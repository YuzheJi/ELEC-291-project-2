0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Sun Mar 30 18:15:16 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _check_bound_PARM_2
0000             28            public _InitPinADC_PARM_2
0000             29            public _main
0000             30            public _Joystick_Control
0000             31            public _Auto_mode_slave
0000             32            public _Read_angle
0000             33            public _get_random_90_250
0000             34            public _simple_rand
0000             35            public _Move_forward
0000             36            public _Right_angle
0000             37            public _Move_back_ms
0000             38            public _Init_all
0000             39            public _check_bound
0000             40            public _servo_pick
0000             41            public _Timer5_ISR
0000             42            public _ADC_at_Pin
0000             43            public _InitPinADC
0000             44            public _InitADC
0000             45            public _Set_Pin_Input
0000             46            public _Set_Pin_Output
0000             47            public _ReceptionOff
0000             48            public _SendATCommand
0000             49            public _waitms_or_RI1
0000             50            public _RXU1
0000             51            public _getstr1
0000             52            public _getchar1_with_timeout
0000             53            public _getchar1
0000             54            public _sendstr1
0000             55            public _putchar1
0000             56            public _UART1_Init
0000             57            public _BMM150_Read_Data
0000             58            public _BMM150_compensate_y
0000             59            public _BMM150_compensate_x
0000             60            public _BMM150_Init
0000             61            public _BMM150_Read_Trim_Registers
0000             62            public _SPI_write
0000             63            public _SPI_read
0000             64            public _SPI_transfer
0000             65            public _waitms
0000             66            public _Timer3us
0000             67            public __c51_external_startup
0000             68            public _curr_angle
0000             69            public _pwm_corr
0000             70            public _seed
0000             71            public _fre_mea_count
0000             72            public _vy
0000             73            public _vx
0000             74            public _vy_thres
0000             75            public _vx_thres
0000             76            public _servo_arm
0000             77            public _servo_base
0000             78            public _R_motor_dir
0000             79            public _L_motor_dir
0000             80            public _pwm_right
0000             81            public _pwm_left
0000             82            public _servo_counter
0000             83            public _pwm_counter
0000             84            public _dig_xyz1
0000             85            public _dig_xy2
0000             86            public _dig_xy1
0000             87            public _dig_z4
0000             88            public _dig_z3
0000             89            public _dig_z2
0000             90            public _dig_z1
0000             91            public _dig_y2
0000             92            public _dig_y1
0000             93            public _dig_x2
0000             94            public _dig_x1
0000             95            public _d2
0000             96            public _d1
0000             97            public _freq100
0000             98            public _buff
0000             99            public _Joystick_Control_PARM_2
0000            100            public _getstr1_PARM_2
0000            101            public _BMM150_Read_Data_PARM_2
0000            102            public _BMM150_compensate_y_PARM_2
0000            103            public _BMM150_compensate_x_PARM_2
0000            104            public _SPI_write_PARM_2
0000            105   ;--------------------------------------------------------
0000            106   ; Special Function Registers
0000            107   ;--------------------------------------------------------
0000            108   _ACC            DATA 0xe0
0000            109   _ADC0ASAH       DATA 0xb6
0000            110   _ADC0ASAL       DATA 0xb5
0000            111   _ADC0ASCF       DATA 0xa1
0000            112   _ADC0ASCT       DATA 0xc7
0000            113   _ADC0CF0        DATA 0xbc
0000            114   _ADC0CF1        DATA 0xb9
0000            115   _ADC0CF2        DATA 0xdf
0000            116   _ADC0CN0        DATA 0xe8
0000            117   _ADC0CN1        DATA 0xb2
0000            118   _ADC0CN2        DATA 0xb3
0000            119   _ADC0GTH        DATA 0xc4
0000            120   _ADC0GTL        DATA 0xc3
0000            121   _ADC0H          DATA 0xbe
0000            122   _ADC0L          DATA 0xbd
0000            123   _ADC0LTH        DATA 0xc6
0000            124   _ADC0LTL        DATA 0xc5
0000            125   _ADC0MX         DATA 0xbb
0000            126   _B              DATA 0xf0
0000            127   _CKCON0         DATA 0x8e
0000            128   _CKCON1         DATA 0xa6
0000            129   _CLEN0          DATA 0xc6
0000            130   _CLIE0          DATA 0xc7
0000            131   _CLIF0          DATA 0xe8
0000            132   _CLKSEL         DATA 0xa9
0000            133   _CLOUT0         DATA 0xd1
0000            134   _CLU0CF         DATA 0xb1
0000            135   _CLU0FN         DATA 0xaf
0000            136   _CLU0MX         DATA 0x84
0000            137   _CLU1CF         DATA 0xb3
0000            138   _CLU1FN         DATA 0xb2
0000            139   _CLU1MX         DATA 0x85
0000            140   _CLU2CF         DATA 0xb6
0000            141   _CLU2FN         DATA 0xb5
0000            142   _CLU2MX         DATA 0x91
0000            143   _CLU3CF         DATA 0xbf
0000            144   _CLU3FN         DATA 0xbe
0000            145   _CLU3MX         DATA 0xae
0000            146   _CMP0CN0        DATA 0x9b
0000            147   _CMP0CN1        DATA 0x99
0000            148   _CMP0MD         DATA 0x9d
0000            149   _CMP0MX         DATA 0x9f
0000            150   _CMP1CN0        DATA 0xbf
0000            151   _CMP1CN1        DATA 0xac
0000            152   _CMP1MD         DATA 0xab
0000            153   _CMP1MX         DATA 0xaa
0000            154   _CRC0CN0        DATA 0xce
0000            155   _CRC0CN1        DATA 0x86
0000            156   _CRC0CNT        DATA 0xd3
0000            157   _CRC0DAT        DATA 0xcb
0000            158   _CRC0FLIP       DATA 0xcf
0000            159   _CRC0IN         DATA 0xca
0000            160   _CRC0ST         DATA 0xd2
0000            161   _DAC0CF0        DATA 0x91
0000            162   _DAC0CF1        DATA 0x92
0000            163   _DAC0H          DATA 0x85
0000            164   _DAC0L          DATA 0x84
0000            165   _DAC1CF0        DATA 0x93
0000            166   _DAC1CF1        DATA 0x94
0000            167   _DAC1H          DATA 0x8a
0000            168   _DAC1L          DATA 0x89
0000            169   _DAC2CF0        DATA 0x95
0000            170   _DAC2CF1        DATA 0x96
0000            171   _DAC2H          DATA 0x8c
0000            172   _DAC2L          DATA 0x8b
0000            173   _DAC3CF0        DATA 0x9a
0000            174   _DAC3CF1        DATA 0x9c
0000            175   _DAC3H          DATA 0x8e
0000            176   _DAC3L          DATA 0x8d
0000            177   _DACGCF0        DATA 0x88
0000            178   _DACGCF1        DATA 0x98
0000            179   _DACGCF2        DATA 0xa2
0000            180   _DERIVID        DATA 0xad
0000            181   _DEVICEID       DATA 0xb5
0000            182   _DPH            DATA 0x83
0000            183   _DPL            DATA 0x82
0000            184   _EIE1           DATA 0xe6
0000            185   _EIE2           DATA 0xf3
0000            186   _EIP1           DATA 0xbb
0000            187   _EIP1H          DATA 0xee
0000            188   _EIP2           DATA 0xed
0000            189   _EIP2H          DATA 0xf6
0000            190   _EMI0CN         DATA 0xe7
0000            191   _FLKEY          DATA 0xb7
0000            192   _HFO0CAL        DATA 0xc7
0000            193   _HFO1CAL        DATA 0xd6
0000            194   _HFOCN          DATA 0xef
0000            195   _I2C0ADM        DATA 0xff
0000            196   _I2C0CN0        DATA 0xba
0000            197   _I2C0DIN        DATA 0xbc
0000            198   _I2C0DOUT       DATA 0xbb
0000            199   _I2C0FCN0       DATA 0xad
0000            200   _I2C0FCN1       DATA 0xab
0000            201   _I2C0FCT        DATA 0xf5
0000            202   _I2C0SLAD       DATA 0xbd
0000            203   _I2C0STAT       DATA 0xb9
0000            204   _IE             DATA 0xa8
0000            205   _IP             DATA 0xb8
0000            206   _IPH            DATA 0xf2
0000            207   _IT01CF         DATA 0xe4
0000            208   _LFO0CN         DATA 0xb1
0000            209   _P0             DATA 0x80
0000            210   _P0MASK         DATA 0xfe
0000            211   _P0MAT          DATA 0xfd
0000            212   _P0MDIN         DATA 0xf1
0000            213   _P0MDOUT        DATA 0xa4
0000            214   _P0SKIP         DATA 0xd4
0000            215   _P1             DATA 0x90
0000            216   _P1MASK         DATA 0xee
0000            217   _P1MAT          DATA 0xed
0000            218   _P1MDIN         DATA 0xf2
0000            219   _P1MDOUT        DATA 0xa5
0000            220   _P1SKIP         DATA 0xd5
0000            221   _P2             DATA 0xa0
0000            222   _P2MASK         DATA 0xfc
0000            223   _P2MAT          DATA 0xfb
0000            224   _P2MDIN         DATA 0xf3
0000            225   _P2MDOUT        DATA 0xa6
0000            226   _P2SKIP         DATA 0xcc
0000            227   _P3             DATA 0xb0
0000            228   _P3MDIN         DATA 0xf4
0000            229   _P3MDOUT        DATA 0x9c
0000            230   _PCA0CENT       DATA 0x9e
0000            231   _PCA0CLR        DATA 0x9c
0000            232   _PCA0CN0        DATA 0xd8
0000            233   _PCA0CPH0       DATA 0xfc
0000            234   _PCA0CPH1       DATA 0xea
0000            235   _PCA0CPH2       DATA 0xec
0000            236   _PCA0CPH3       DATA 0xf5
0000            237   _PCA0CPH4       DATA 0x85
0000            238   _PCA0CPH5       DATA 0xde
0000            239   _PCA0CPL0       DATA 0xfb
0000            240   _PCA0CPL1       DATA 0xe9
0000            241   _PCA0CPL2       DATA 0xeb
0000            242   _PCA0CPL3       DATA 0xf4
0000            243   _PCA0CPL4       DATA 0x84
0000            244   _PCA0CPL5       DATA 0xdd
0000            245   _PCA0CPM0       DATA 0xda
0000            246   _PCA0CPM1       DATA 0xdb
0000            247   _PCA0CPM2       DATA 0xdc
0000            248   _PCA0CPM3       DATA 0xae
0000            249   _PCA0CPM4       DATA 0xaf
0000            250   _PCA0CPM5       DATA 0xcc
0000            251   _PCA0H          DATA 0xfa
0000            252   _PCA0L          DATA 0xf9
0000            253   _PCA0MD         DATA 0xd9
0000            254   _PCA0POL        DATA 0x96
0000            255   _PCA0PWM        DATA 0xf7
0000            256   _PCON0          DATA 0x87
0000            257   _PCON1          DATA 0xcd
0000            258   _PFE0CN         DATA 0xc1
0000            259   _PRTDRV         DATA 0xf6
0000            260   _PSCTL          DATA 0x8f
0000            261   _PSTAT0         DATA 0xaa
0000            262   _PSW            DATA 0xd0
0000            263   _REF0CN         DATA 0xd1
0000            264   _REG0CN         DATA 0xc9
0000            265   _REVID          DATA 0xb6
0000            266   _RSTSRC         DATA 0xef
0000            267   _SBCON1         DATA 0x94
0000            268   _SBRLH1         DATA 0x96
0000            269   _SBRLL1         DATA 0x95
0000            270   _SBUF           DATA 0x99
0000            271   _SBUF0          DATA 0x99
0000            272   _SBUF1          DATA 0x92
0000            273   _SCON           DATA 0x98
0000            274   _SCON0          DATA 0x98
0000            275   _SCON1          DATA 0xc8
0000            276   _SFRPAGE        DATA 0xa7
0000            277   _SFRPGCN        DATA 0xbc
0000            278   _SFRSTACK       DATA 0xd7
0000            279   _SMB0ADM        DATA 0xd6
0000            280   _SMB0ADR        DATA 0xd7
0000            281   _SMB0CF         DATA 0xc1
0000            282   _SMB0CN0        DATA 0xc0
0000            283   _SMB0DAT        DATA 0xc2
0000            284   _SMB0FCN0       DATA 0xc3
0000            285   _SMB0FCN1       DATA 0xc4
0000            286   _SMB0FCT        DATA 0xef
0000            287   _SMB0RXLN       DATA 0xc5
0000            288   _SMB0TC         DATA 0xac
0000            289   _SMOD1          DATA 0x93
0000            290   _SP             DATA 0x81
0000            291   _SPI0CFG        DATA 0xa1
0000            292   _SPI0CKR        DATA 0xa2
0000            293   _SPI0CN0        DATA 0xf8
0000            294   _SPI0DAT        DATA 0xa3
0000            295   _SPI0FCN0       DATA 0x9a
0000            296   _SPI0FCN1       DATA 0x9b
0000            297   _SPI0FCT        DATA 0xf7
0000            298   _SPI0PCF        DATA 0xdf
0000            299   _TCON           DATA 0x88
0000            300   _TH0            DATA 0x8c
0000            301   _TH1            DATA 0x8d
0000            302   _TL0            DATA 0x8a
0000            303   _TL1            DATA 0x8b
0000            304   _TMOD           DATA 0x89
0000            305   _TMR2CN0        DATA 0xc8
0000            306   _TMR2CN1        DATA 0xfd
0000            307   _TMR2H          DATA 0xcf
0000            308   _TMR2L          DATA 0xce
0000            309   _TMR2RLH        DATA 0xcb
0000            310   _TMR2RLL        DATA 0xca
0000            311   _TMR3CN0        DATA 0x91
0000            312   _TMR3CN1        DATA 0xfe
0000            313   _TMR3H          DATA 0x95
0000            314   _TMR3L          DATA 0x94
0000            315   _TMR3RLH        DATA 0x93
0000            316   _TMR3RLL        DATA 0x92
0000            317   _TMR4CN0        DATA 0x98
0000            318   _TMR4CN1        DATA 0xff
0000            319   _TMR4H          DATA 0xa5
0000            320   _TMR4L          DATA 0xa4
0000            321   _TMR4RLH        DATA 0xa3
0000            322   _TMR4RLL        DATA 0xa2
0000            323   _TMR5CN0        DATA 0xc0
0000            324   _TMR5CN1        DATA 0xf1
0000            325   _TMR5H          DATA 0xd5
0000            326   _TMR5L          DATA 0xd4
0000            327   _TMR5RLH        DATA 0xd3
0000            328   _TMR5RLL        DATA 0xd2
0000            329   _UART0PCF       DATA 0xd9
0000            330   _UART1FCN0      DATA 0x9d
0000            331   _UART1FCN1      DATA 0xd8
0000            332   _UART1FCT       DATA 0xfa
0000            333   _UART1LIN       DATA 0x9e
0000            334   _UART1PCF       DATA 0xda
0000            335   _VDM0CN         DATA 0xff
0000            336   _WDTCN          DATA 0x97
0000            337   _XBR0           DATA 0xe1
0000            338   _XBR1           DATA 0xe2
0000            339   _XBR2           DATA 0xe3
0000            340   _XOSC0CN        DATA 0x86
0000            341   _DPTR           DATA 0x8382
0000            342   _TMR2RL         DATA 0xcbca
0000            343   _TMR3RL         DATA 0x9392
0000            344   _TMR4RL         DATA 0xa3a2
0000            345   _TMR5RL         DATA 0xd3d2
0000            346   _TMR0           DATA 0x8c8a
0000            347   _TMR1           DATA 0x8d8b
0000            348   _TMR2           DATA 0xcfce
0000            349   _TMR3           DATA 0x9594
0000            350   _TMR4           DATA 0xa5a4
0000            351   _TMR5           DATA 0xd5d4
0000            352   _SBRL1          DATA 0x9695
0000            353   _PCA0           DATA 0xfaf9
0000            354   _PCA0CP0        DATA 0xfcfb
0000            355   _PCA0CP1        DATA 0xeae9
0000            356   _PCA0CP2        DATA 0xeceb
0000            357   _PCA0CP3        DATA 0xf5f4
0000            358   _PCA0CP4        DATA 0x8584
0000            359   _PCA0CP5        DATA 0xdedd
0000            360   _ADC0ASA        DATA 0xb6b5
0000            361   _ADC0GT         DATA 0xc4c3
0000            362   _ADC0           DATA 0xbebd
0000            363   _ADC0LT         DATA 0xc6c5
0000            364   _DAC0           DATA 0x8584
0000            365   _DAC1           DATA 0x8a89
0000            366   _DAC2           DATA 0x8c8b
0000            367   _DAC3           DATA 0x8e8d
0000            368   ;--------------------------------------------------------
0000            369   ; special function bits
0000            370   ;--------------------------------------------------------
0000            371   _ACC_0          BIT 0xe0
0000            372   _ACC_1          BIT 0xe1
0000            373   _ACC_2          BIT 0xe2
0000            374   _ACC_3          BIT 0xe3
0000            375   _ACC_4          BIT 0xe4
0000            376   _ACC_5          BIT 0xe5
0000            377   _ACC_6          BIT 0xe6
0000            378   _ACC_7          BIT 0xe7
0000            379   _TEMPE          BIT 0xe8
0000            380   _ADGN0          BIT 0xe9
0000            381   _ADGN1          BIT 0xea
0000            382   _ADWINT         BIT 0xeb
0000            383   _ADBUSY         BIT 0xec
0000            384   _ADINT          BIT 0xed
0000            385   _IPOEN          BIT 0xee
0000            386   _ADEN           BIT 0xef
0000            387   _B_0            BIT 0xf0
0000            388   _B_1            BIT 0xf1
0000            389   _B_2            BIT 0xf2
0000            390   _B_3            BIT 0xf3
0000            391   _B_4            BIT 0xf4
0000            392   _B_5            BIT 0xf5
0000            393   _B_6            BIT 0xf6
0000            394   _B_7            BIT 0xf7
0000            395   _C0FIF          BIT 0xe8
0000            396   _C0RIF          BIT 0xe9
0000            397   _C1FIF          BIT 0xea
0000            398   _C1RIF          BIT 0xeb
0000            399   _C2FIF          BIT 0xec
0000            400   _C2RIF          BIT 0xed
0000            401   _C3FIF          BIT 0xee
0000            402   _C3RIF          BIT 0xef
0000            403   _D1SRC0         BIT 0x88
0000            404   _D1SRC1         BIT 0x89
0000            405   _D1AMEN         BIT 0x8a
0000            406   _D01REFSL       BIT 0x8b
0000            407   _D3SRC0         BIT 0x8c
0000            408   _D3SRC1         BIT 0x8d
0000            409   _D3AMEN         BIT 0x8e
0000            410   _D23REFSL       BIT 0x8f
0000            411   _D0UDIS         BIT 0x98
0000            412   _D1UDIS         BIT 0x99
0000            413   _D2UDIS         BIT 0x9a
0000            414   _D3UDIS         BIT 0x9b
0000            415   _EX0            BIT 0xa8
0000            416   _ET0            BIT 0xa9
0000            417   _EX1            BIT 0xaa
0000            418   _ET1            BIT 0xab
0000            419   _ES0            BIT 0xac
0000            420   _ET2            BIT 0xad
0000            421   _ESPI0          BIT 0xae
0000            422   _EA             BIT 0xaf
0000            423   _PX0            BIT 0xb8
0000            424   _PT0            BIT 0xb9
0000            425   _PX1            BIT 0xba
0000            426   _PT1            BIT 0xbb
0000            427   _PS0            BIT 0xbc
0000            428   _PT2            BIT 0xbd
0000            429   _PSPI0          BIT 0xbe
0000            430   _P0_0           BIT 0x80
0000            431   _P0_1           BIT 0x81
0000            432   _P0_2           BIT 0x82
0000            433   _P0_3           BIT 0x83
0000            434   _P0_4           BIT 0x84
0000            435   _P0_5           BIT 0x85
0000            436   _P0_6           BIT 0x86
0000            437   _P0_7           BIT 0x87
0000            438   _P1_0           BIT 0x90
0000            439   _P1_1           BIT 0x91
0000            440   _P1_2           BIT 0x92
0000            441   _P1_3           BIT 0x93
0000            442   _P1_4           BIT 0x94
0000            443   _P1_5           BIT 0x95
0000            444   _P1_6           BIT 0x96
0000            445   _P1_7           BIT 0x97
0000            446   _P2_0           BIT 0xa0
0000            447   _P2_1           BIT 0xa1
0000            448   _P2_2           BIT 0xa2
0000            449   _P2_3           BIT 0xa3
0000            450   _P2_4           BIT 0xa4
0000            451   _P2_5           BIT 0xa5
0000            452   _P2_6           BIT 0xa6
0000            453   _P3_0           BIT 0xb0
0000            454   _P3_1           BIT 0xb1
0000            455   _P3_2           BIT 0xb2
0000            456   _P3_3           BIT 0xb3
0000            457   _P3_4           BIT 0xb4
0000            458   _P3_7           BIT 0xb7
0000            459   _CCF0           BIT 0xd8
0000            460   _CCF1           BIT 0xd9
0000            461   _CCF2           BIT 0xda
0000            462   _CCF3           BIT 0xdb
0000            463   _CCF4           BIT 0xdc
0000            464   _CCF5           BIT 0xdd
0000            465   _CR             BIT 0xde
0000            466   _CF             BIT 0xdf
0000            467   _PARITY         BIT 0xd0
0000            468   _F1             BIT 0xd1
0000            469   _OV             BIT 0xd2
0000            470   _RS0            BIT 0xd3
0000            471   _RS1            BIT 0xd4
0000            472   _F0             BIT 0xd5
0000            473   _AC             BIT 0xd6
0000            474   _CY             BIT 0xd7
0000            475   _RI             BIT 0x98
0000            476   _TI             BIT 0x99
0000            477   _RB8            BIT 0x9a
0000            478   _TB8            BIT 0x9b
0000            479   _REN            BIT 0x9c
0000            480   _CE             BIT 0x9d
0000            481   _SMODE          BIT 0x9e
0000            482   _RI1            BIT 0xc8
0000            483   _TI1            BIT 0xc9
0000            484   _RBX1           BIT 0xca
0000            485   _TBX1           BIT 0xcb
0000            486   _REN1           BIT 0xcc
0000            487   _PERR1          BIT 0xcd
0000            488   _OVR1           BIT 0xce
0000            489   _SI             BIT 0xc0
0000            490   _ACK            BIT 0xc1
0000            491   _ARBLOST        BIT 0xc2
0000            492   _ACKRQ          BIT 0xc3
0000            493   _STO            BIT 0xc4
0000            494   _STA            BIT 0xc5
0000            495   _TXMODE         BIT 0xc6
0000            496   _MASTER         BIT 0xc7
0000            497   _SPIEN          BIT 0xf8
0000            498   _TXNF           BIT 0xf9
0000            499   _NSSMD0         BIT 0xfa
0000            500   _NSSMD1         BIT 0xfb
0000            501   _RXOVRN         BIT 0xfc
0000            502   _MODF           BIT 0xfd
0000            503   _WCOL           BIT 0xfe
0000            504   _SPIF           BIT 0xff
0000            505   _IT0            BIT 0x88
0000            506   _IE0            BIT 0x89
0000            507   _IT1            BIT 0x8a
0000            508   _IE1            BIT 0x8b
0000            509   _TR0            BIT 0x8c
0000            510   _TF0            BIT 0x8d
0000            511   _TR1            BIT 0x8e
0000            512   _TF1            BIT 0x8f
0000            513   _T2XCLK0        BIT 0xc8
0000            514   _T2XCLK1        BIT 0xc9
0000            515   _TR2            BIT 0xca
0000            516   _T2SPLIT        BIT 0xcb
0000            517   _TF2CEN         BIT 0xcc
0000            518   _TF2LEN         BIT 0xcd
0000            519   _TF2L           BIT 0xce
0000            520   _TF2H           BIT 0xcf
0000            521   _T4XCLK0        BIT 0x98
0000            522   _T4XCLK1        BIT 0x99
0000            523   _TR4            BIT 0x9a
0000            524   _T4SPLIT        BIT 0x9b
0000            525   _TF4CEN         BIT 0x9c
0000            526   _TF4LEN         BIT 0x9d
0000            527   _TF4L           BIT 0x9e
0000            528   _TF4H           BIT 0x9f
0000            529   _T5XCLK0        BIT 0xc0
0000            530   _T5XCLK1        BIT 0xc1
0000            531   _TR5            BIT 0xc2
0000            532   _T5SPLIT        BIT 0xc3
0000            533   _TF5CEN         BIT 0xc4
0000            534   _TF5LEN         BIT 0xc5
0000            535   _TF5L           BIT 0xc6
0000            536   _TF5H           BIT 0xc7
0000            537   _RIE            BIT 0xd8
0000            538   _RXTO0          BIT 0xd9
0000            539   _RXTO1          BIT 0xda
0000            540   _RFRQ           BIT 0xdb
0000            541   _TIE            BIT 0xdc
0000            542   _TXHOLD         BIT 0xdd
0000            543   _TXNF1          BIT 0xde
0000            544   _TFRQ           BIT 0xdf
0000            545   ;--------------------------------------------------------
0000            546   ; overlayable register banks
0000            547   ;--------------------------------------------------------
0000            548            rbank0 segment data overlay
0000            549   ;--------------------------------------------------------
0000            550   ; overlayable bit register bank
0000            551   ;--------------------------------------------------------
0000            552            rseg BIT_BANK
0000            553   bits:
0000            554            ds 1
0001            555            b0 equ  bits.0 
0001            556            b1 equ  bits.1 
0001            557            b2 equ  bits.2 
0001            558            b3 equ  bits.3 
0001            559            b4 equ  bits.4 
0001            560            b5 equ  bits.5 
0001            561            b6 equ  bits.6 
0001            562            b7 equ  bits.7 
0001            563   ;--------------------------------------------------------
0001            564   ; internal ram data
0001            565   ;--------------------------------------------------------
0000            566            rseg R_DSEG
0000            567   _SPI_write_PARM_2:
0000            568            ds 1
0001            569   _BMM150_compensate_x_PARM_2:
0001            570            ds 3
0004            571   _BMM150_compensate_x_sloc0_1_0:
0004            572            ds 4
0008            573   _BMM150_compensate_y_PARM_2:
0008            574            ds 3
000B            575   _BMM150_compensate_y_sloc0_1_0:
000B            576            ds 4
000F            577   _BMM150_Read_Data_PARM_2:
000F            578            ds 3
0012            579   _BMM150_Read_Data_mag_x_1_124:
0012            580            ds 3
0015            581   _getstr1_PARM_2:
0015            582            ds 1
0016            583   _Read_angle_sloc0_1_0:
0016            584            ds 4
001A            585   _Auto_mode_slave_sloc0_1_0:
001A            586            ds 2
001C            587   _Joystick_Control_PARM_2:
001C            588            ds 3
001F            589   _Joystick_Control_sloc0_1_0:
001F            590            ds 2
0021            591   _Joystick_Control_sloc1_1_0:
0021            592            ds 1
0022            593   _Joystick_Control_sloc2_1_0:
0022            594            ds 2
0024            595   _Joystick_Control_sloc3_1_0:
0024            596            ds 1
0025            597   _Joystick_Control_sloc4_1_0:
0025            598            ds 2
0027            599   _Joystick_Control_sloc5_1_0:
0027            600            ds 4
002B            601   _Joystick_Control_sloc6_1_0:
002B            602            ds 2
002D            603   _main_pick_char_1_232:
002D            604            ds 1
002E            605   ;--------------------------------------------------------
002E            606   ; overlayable items in internal ram 
002E            607   ;--------------------------------------------------------
0000            608            rseg    R_OSEG
0000            609            rseg    R_OSEG
0000            610            rseg    R_OSEG
0000            611            rseg    R_OSEG
0000            612            rseg    R_OSEG
0000            613            rseg    R_OSEG
0000            614   _InitPinADC_PARM_2:
0000            615            ds 1
0001            616            rseg    R_OSEG
0001            617            rseg    R_OSEG
0001            618   _check_bound_PARM_2:
0001            619            ds 2
0003            620   ;--------------------------------------------------------
0003            621   ; indirectly addressable internal ram data
0003            622   ;--------------------------------------------------------
0000            623            rseg R_ISEG
0000            624   _buff:
0000            625            ds 20
0014            626   ;--------------------------------------------------------
0014            627   ; absolute internal ram data
0014            628   ;--------------------------------------------------------
0000            629            DSEG
0000            630   ;--------------------------------------------------------
0000            631   ; bit data
0000            632   ;--------------------------------------------------------
0000            633            rseg R_BSEG
0000            634   ;--------------------------------------------------------
0000            635   ; paged external ram data
0000            636   ;--------------------------------------------------------
0000            637            rseg R_PSEG
0000            638   ;--------------------------------------------------------
0000            639   ; external ram data
0000            640   ;--------------------------------------------------------
0000            641            rseg R_XSEG
0000            642   _freq100:
0000            643            ds 4
0004            644   _d1:
0004            645            ds 2
0006            646   _d2:
0006            647            ds 2
0008            648   _dig_x1:
0008            649            ds 1
0009            650   _dig_x2:
0009            651            ds 1
000A            652   _dig_y1:
000A            653            ds 1
000B            654   _dig_y2:
000B            655            ds 1
000C            656   _dig_z1:
000C            657            ds 2
000E            658   _dig_z2:
000E            659            ds 2
0010            660   _dig_z3:
0010            661            ds 2
0012            662   _dig_z4:
0012            663            ds 2
0014            664   _dig_xy1:
0014            665            ds 1
0015            666   _dig_xy2:
0015            667            ds 1
0016            668   _dig_xyz1:
0016            669            ds 2
0018            670   _BMM150_Read_Trim_Registers_trim_x1y1_1_97:
0018            671            ds 2
001A            672   _BMM150_Read_Trim_Registers_trim_xyz_data_1_97:
001A            673            ds 4
001E            674   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_97:
001E            675            ds 10
0028            676   _BMM150_compensate_x_retval_1_107:
0028            677            ds 2
002A            678   _BMM150_compensate_x_process_comp_x0_1_107:
002A            679            ds 2
002C            680   _BMM150_compensate_y_retval_1_116:
002C            681            ds 2
002E            682   _BMM150_compensate_y_process_comp_y0_1_116:
002E            683            ds 2
0030            684   _BMM150_Read_Data_x_val_1_125:
0030            685            ds 2
0032            686   _BMM150_Read_Data_y_val_1_125:
0032            687            ds 2
0034            688   _BMM150_Read_Data_rhall_val_1_125:
0034            689            ds 2
0036            690   _Read_angle_mag_x_1_198:
0036            691            ds 2
0038            692   _Read_angle_mag_y_1_198:
0038            693            ds 2
003A            694   _Read_angle_sum_x_1_198:
003A            695            ds 4
003E            696   _Read_angle_sum_y_1_198:
003E            697            ds 4
0042            698   _Read_angle_angle_1_198:
0042            699            ds 4
0046            700   _Auto_mode_slave_command_1_200:
0046            701            ds 2
0048            702   _Auto_mode_slave_state_res_1_200:
0048            703            ds 2
004A            704   _Auto_mode_slave_dummy_1_200:
004A            705            ds 2
004C            706   _Joystick_Control_vx_error_1_209:
004C            707            ds 2
004E            708   _main_vx_1_232:
004E            709            ds 2
0050            710   _main_vy_1_232:
0050            711            ds 2
0052            712   _main_auto_mode_1_232:
0052            713            ds 2
0054            714   ;--------------------------------------------------------
0054            715   ; absolute external ram data
0054            716   ;--------------------------------------------------------
0000            717            XSEG
0000            718   ;--------------------------------------------------------
0000            719   ; external initialized ram data
0000            720   ;--------------------------------------------------------
0000            721            rseg R_IXSEG
0000            722   _pwm_counter:
0000            723            ds 2
0002            724   _servo_counter:
0002            725            ds 2
0004            726   _pwm_left:
0004            727            ds 1
0005            728   _pwm_right:
0005            729            ds 1
0006            730   _L_motor_dir:
0006            731            ds 1
0007            732   _R_motor_dir:
0007            733            ds 1
0008            734   _servo_base:
0008            735            ds 1
0009            736   _servo_arm:
0009            737            ds 1
000A            738   _vx_thres:
000A            739            ds 2
000C            740   _vy_thres:
000C            741            ds 2
000E            742   _vx:
000E            743            ds 2
0010            744   _vy:
0010            745            ds 2
0012            746   _fre_mea_count:
0012            747            ds 2
0014            748   _seed:
0014            749            ds 2
0016            750   _pwm_corr:
0016            751            ds 4
001A            752   _curr_angle:
001A            753            ds 4
0000            754            rseg R_HOME
0000            755            rseg R_GSINIT
0000            756            rseg R_CSEG
0000            757   ;--------------------------------------------------------
0000            758   ; Reset entry point and interrupt vectors
0000            759   ;--------------------------------------------------------
0000            760            CSEG at 0x0000
0000 020000     761            ljmp    _crt0
0093            762            CSEG at 0x0093
0093 020000     763            ljmp    _Timer5_ISR
0096            764   ;--------------------------------------------------------
0096            765   ; global & static initialisations
0096            766   ;--------------------------------------------------------
0000            767            rseg R_HOME
0000            768            rseg R_GSINIT
0000            769            rseg R_GSINIT
0000            770   ;--------------------------------------------------------
0000            771   ; data variables initialization
0000            772   ;--------------------------------------------------------
0000            773            rseg R_DINIT
0000            774            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            775   ;--------------------------------------------------------
0000            776   ; code
0000            777   ;--------------------------------------------------------
0000            778            rseg R_CSEG
0000            779   ;------------------------------------------------------------
0000            780   ;Allocation info for local variables in function '_c51_external_startup'
0000            781   ;------------------------------------------------------------
0000            782   ;------------------------------------------------------------
0000            783   ;        main.c:105: char _c51_external_startup (void)
0000            784   ;        -----------------------------------------
0000            785   ;         function _c51_external_startup
0000            786   ;        -----------------------------------------
0000            787   __c51_external_startup:
0000            788            using   0
0000            789   ;        main.c:108: SFRPAGE = 0x00;
0000 75A700     790            mov     _SFRPAGE,#0x00
0003            791   ;        main.c:109: WDTCN = 0xDE; //First key
0003 7597DE     792            mov     _WDTCN,#0xDE
0006            793   ;        main.c:110: WDTCN = 0xAD; //Second key
0006 7597AD     794            mov     _WDTCN,#0xAD
0009            795   ;        main.c:112: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     796            mov     _VDM0CN,#0x80
000C            797   ;        main.c:113: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     798            mov     _RSTSRC,#0x06
000F            799   ;        main.c:120: SFRPAGE = 0x10;
000F 75A710     800            mov     _SFRPAGE,#0x10
0012            801   ;        main.c:121: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     802            mov     _PFE0CN,#0x20
0015            803   ;        main.c:122: SFRPAGE = 0x00;
0015 75A700     804            mov     _SFRPAGE,#0x00
0018            805   ;        main.c:143: CLKSEL = 0x00;
0018 75A900     806            mov     _CLKSEL,#0x00
001B            807   ;        main.c:144: CLKSEL = 0x00;
001B 75A900     808            mov     _CLKSEL,#0x00
001E            809   ;        main.c:145: while ((CLKSEL & 0x80) == 0);
001E            810   L002001?:
001E E5A9       811            mov     a,_CLKSEL
0020 30E730     812            jnb     acc.7,L002001?
0023            813   ;        main.c:146: CLKSEL = 0x03;
0023 75A903     814            mov     _CLKSEL,#0x03
0026            815   ;        main.c:147: CLKSEL = 0x03;
0026 75A903     816            mov     _CLKSEL,#0x03
0029            817   ;        main.c:148: while ((CLKSEL & 0x80) == 0);
0029            818   L002004?:
0029 E5A9       819            mov     a,_CLKSEL
002B 30E7B0     820            jnb     acc.7,L002004?
002E            821   ;        main.c:154: P0MDOUT |= 0b_1100_0000;
002E 43A4C0     822            orl     _P0MDOUT,#0xC0
0031            823   ;        main.c:155: P1MDOUT |= 0b_0000_0110;
0031 43A506     824            orl     _P1MDOUT,#0x06
0034            825   ;        main.c:156: P2MDOUT |= 0b_0000_0001; // P2.0 in push-pull mode
0034 43A601     826            orl     _P2MDOUT,#0x01
0037            827   ;        main.c:157: XBR0     = 0b_0000_0011; // UART0E = 1 and SPI0E = 1               
0037 75E103     828            mov     _XBR0,#0x03
003A            829   ;        main.c:158: XBR1     = 0b_0000_0000;
003A 75E200     830            mov     _XBR1,#0x00
003D            831   ;        main.c:159: XBR2     = 0b_0100_0001; // Enable crossbar and uart 1
003D 75E341     832            mov     _XBR2,#0x41
0040            833   ;        main.c:160: P0SKIP       = 0b_0000_0111; 
0040 75D407     834            mov     _P0SKIP,#0x07
0043            835   ;        main.c:161: P1SKIP   = 0b_1111_1001;
0043 75D5F9     836            mov     _P1SKIP,#0xF9
0046            837   ;        main.c:166: SCON0 = 0x10;
0046 759810     838            mov     _SCON0,#0x10
0049            839   ;        main.c:167: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     840            mov     _TH1,#0xE6
004C            841   ;        main.c:168: TL1 = TH1;      // Init Timer1
004C 858D8B     842            mov     _TL1,_TH1
004F            843   ;        main.c:169: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     844            anl     _TMOD,#0x0F
0052            845   ;        main.c:170: TMOD |=  0x20;                       
0052 438920     846            orl     _TMOD,#0x20
0055            847   ;        main.c:171: TR1 = 1; // START Timer1
0055 D28E       848            setb    _TR1
0057            849   ;        main.c:172: TI = 1;  // Indicate TX0 ready
0057 D299       850            setb    _TI
0059            851   ;        main.c:173: P2_0=1; // 'set' pin to 1 is normal operation mode.
0059 D2A0       852            setb    _P2_0
005B            853   ;        main.c:176: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
005B 75A211     854            mov     _SPI0CKR,#0x11
005E            855   ;        main.c:177: SPI0CFG = 0b_1110_0000; // SPI mode 3
005E 75A1E0     856            mov     _SPI0CFG,#0xE0
0061            857   ;        main.c:178: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0061 75F801     858            mov     _SPI0CN0,#0x01
0064            859   ;        main.c:181: SFRPAGE=0x10;
0064 75A710     860            mov     _SFRPAGE,#0x10
0067            861   ;        main.c:182: TMR5CN0=0x00;
0067 75C000     862            mov     _TMR5CN0,#0x00
006A            863   ;        main.c:183: TMR5=0xffff;   // Set to reload immediately
006A 75D4FF     864            mov     _TMR5,#0xFF
006D 75D5FF     865            mov     (_TMR5 >> 8),#0xFF
0070            866   ;        main.c:184: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
0070 43F308     867            orl     _EIE2,#0x08
0073            868   ;        main.c:185: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0073 D2C2       869            setb    _TR5
0075            870   ;        main.c:187: EA=1;  // Enable global interrupts
0075 D2AF       871            setb    _EA
0077            872   ;        main.c:188: SFRPAGE=0x00;
0077 75A700     873            mov     _SFRPAGE,#0x00
007A            874   ;        main.c:190: return 0;
007A 758200     875            mov     dpl,#0x00
007D 22         876            ret
007E            877   ;------------------------------------------------------------
007E            878   ;Allocation info for local variables in function 'Timer3us'
007E            879   ;------------------------------------------------------------
007E            880   ;us                        Allocated to registers r2 
007E            881   ;i                         Allocated to registers r3 
007E            882   ;------------------------------------------------------------
007E            883   ;        main.c:194: void Timer3us(unsigned char us)
007E            884   ;        -----------------------------------------
007E            885   ;         function Timer3us
007E            886   ;        -----------------------------------------
007E            887   _Timer3us:
007E AA82       888            mov     r2,dpl
0080            889   ;        main.c:199: CKCON0|=0b_0100_0000;
0080 438E40     890            orl     _CKCON0,#0x40
0083            891   ;        main.c:201: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0083 7592B8     892            mov     _TMR3RL,#0xB8
0086 7593FF     893            mov     (_TMR3RL >> 8),#0xFF
0089            894   ;        main.c:202: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0089 859294     895            mov     _TMR3,_TMR3RL
008C 859395     896            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
008F            897   ;        main.c:204: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
008F 759104     898            mov     _TMR3CN0,#0x04
0092            899   ;        main.c:205: for (i = 0; i < us; i++)       // Count <us> overflows
0092 7B00       900            mov     r3,#0x00
0094            901   L003004?:
0094 C3         902            clr     c
0095 EB         903            mov     a,r3
0096 9A         904            subb    a,r2
0097 5000       905            jnc     L003007?
0099            906   ;        main.c:207: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0099            907   L003001?:
0099 E591       908            mov     a,_TMR3CN0
009B 30E7B0     909            jnb     acc.7,L003001?
009E            910   ;        main.c:208: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
009E 53917F     911            anl     _TMR3CN0,#0x7F
00A1            912   ;        main.c:205: for (i = 0; i < us; i++)       // Count <us> overflows
00A1 0B         913            inc     r3
00A2 8000       914            sjmp    L003004?
00A4            915   L003007?:
00A4            916   ;        main.c:210: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00A4 759100     917            mov     _TMR3CN0,#0x00
00A7 22         918            ret
00A8            919   ;------------------------------------------------------------
00A8            920   ;Allocation info for local variables in function 'waitms'
00A8            921   ;------------------------------------------------------------
00A8            922   ;ms                        Allocated to registers r2 r3 
00A8            923   ;j                         Allocated to registers r4 r5 
00A8            924   ;k                         Allocated to registers r6 
00A8            925   ;------------------------------------------------------------
00A8            926   ;        main.c:213: void waitms (unsigned int ms)
00A8            927   ;        -----------------------------------------
00A8            928   ;         function waitms
00A8            929   ;        -----------------------------------------
00A8            930   _waitms:
00A8 AA82       931            mov     r2,dpl
00AA AB83       932            mov     r3,dph
00AC            933   ;        main.c:217: for(j=0; j<ms; j++)
00AC 7C00       934            mov     r4,#0x00
00AE 7D00       935            mov     r5,#0x00
00B0            936   L004005?:
00B0 C3         937            clr     c
00B1 EC         938            mov     a,r4
00B2 9A         939            subb    a,r2
00B3 ED         940            mov     a,r5
00B4 9B         941            subb    a,r3
00B5 5000       942            jnc     L004009?
00B7            943   ;        main.c:218: for (k=0; k<4; k++) Timer3us(250);
00B7 7E00       944            mov     r6,#0x00
00B9            945   L004001?:
00B9 BE04F0     946            cjne    r6,#0x04,L004018?
00BC            947   L004018?:
00BC 5000       948            jnc     L004007?
00BE 7582FA     949            mov     dpl,#0xFA
00C1 C002       950            push    ar2
00C3 C003       951            push    ar3
00C5 C004       952            push    ar4
00C7 C005       953            push    ar5
00C9 C006       954            push    ar6
00CB 120000     955            lcall   _Timer3us
00CE D006       956            pop     ar6
00D0 D005       957            pop     ar5
00D2 D004       958            pop     ar4
00D4 D003       959            pop     ar3
00D6 D002       960            pop     ar2
00D8 0E         961            inc     r6
00D9 8000       962            sjmp    L004001?
00DB            963   L004007?:
00DB            964   ;        main.c:217: for(j=0; j<ms; j++)
00DB 0C         965            inc     r4
00DC BC0030     966            cjne    r4,#0x00,L004005?
00DF 0D         967            inc     r5
00E0 8000       968            sjmp    L004005?
00E2            969   L004009?:
00E2 22         970            ret
00E3            971   ;------------------------------------------------------------
00E3            972   ;Allocation info for local variables in function 'SPI_transfer'
00E3            973   ;------------------------------------------------------------
00E3            974   ;tx_data                   Allocated to registers 
00E3            975   ;------------------------------------------------------------
00E3            976   ;        main.c:221: unsigned char SPI_transfer(unsigned char tx_data)
00E3            977   ;        -----------------------------------------
00E3            978   ;         function SPI_transfer
00E3            979   ;        -----------------------------------------
00E3            980   _SPI_transfer:
00E3 8582A3     981            mov     _SPI0DAT,dpl
00E6            982   ;        main.c:224: while (!SPIF);      // Wait for transfer to complete
00E6            983   L005001?:
00E6            984   ;        main.c:225: SPIF = 0;           // Clear SPI interrupt flag
00E6 10FFB0     985            jbc     _SPIF,L005008?
00E9 8000       986            sjmp    L005001?
00EB            987   L005008?:
00EB            988   ;        main.c:226: return SPI0DAT;     // Return received data
00EB 85A382     989            mov     dpl,_SPI0DAT
00EE 22         990            ret
00EF            991   ;------------------------------------------------------------
00EF            992   ;Allocation info for local variables in function 'SPI_read'
00EF            993   ;------------------------------------------------------------
00EF            994   ;reg_addr                  Allocated to registers r2 
00EF            995   ;value                     Allocated with name '_SPI_read_value_1_93'
00EF            996   ;------------------------------------------------------------
00EF            997   ;        main.c:229: unsigned char SPI_read(unsigned char reg_addr)
00EF            998   ;        -----------------------------------------
00EF            999   ;         function SPI_read
00EF           1000   ;        -----------------------------------------
00EF           1001   _SPI_read:
00EF AA82      1002            mov     r2,dpl
00F1           1003   ;        main.c:234: reg_addr = reg_addr | 0x80;
00F1 430280    1004            orl     ar2,#0x80
00F4           1005   ;        main.c:236: CS = 0;                // Select the device
00F4 C290      1006            clr     _P1_0
00F6           1007   ;        main.c:237: SPI_transfer(reg_addr);     // Send register address
00F6 8A82      1008            mov     dpl,r2
00F8 120000    1009            lcall   _SPI_transfer
00FB           1010   ;        main.c:238: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
00FB 758200    1011            mov     dpl,#0x00
00FE 120000    1012            lcall   _SPI_transfer
0101           1013   ;        main.c:239: CS = 1;                // Deselect the device
0101 D290      1014            setb    _P1_0
0103           1015   ;        main.c:241: return value;
0103 22        1016            ret
0104           1017   ;------------------------------------------------------------
0104           1018   ;Allocation info for local variables in function 'SPI_write'
0104           1019   ;------------------------------------------------------------
0104           1020   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0104           1021   ;reg_addr                  Allocated to registers r2 
0104           1022   ;------------------------------------------------------------
0104           1023   ;        main.c:244: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0104           1024   ;        -----------------------------------------
0104           1025   ;         function SPI_write
0104           1026   ;        -----------------------------------------
0104           1027   _SPI_write:
0104 AA82      1028            mov     r2,dpl
0106           1029   ;        main.c:247: reg_addr = reg_addr & 0x7F;
0106 53027F    1030            anl     ar2,#0x7F
0109           1031   ;        main.c:249: CS = 0;                // Select device
0109 C290      1032            clr     _P1_0
010B           1033   ;        main.c:250: SPI_transfer(reg_addr);     // Send register address
010B 8A82      1034            mov     dpl,r2
010D 120000    1035            lcall   _SPI_transfer
0110           1036   ;        main.c:251: SPI_transfer(reg_value);    // Send value
0110 858082    1037            mov     dpl,_SPI_write_PARM_2
0113 120000    1038            lcall   _SPI_transfer
0116           1039   ;        main.c:252: CS = 1;                // Deselect device
0116 D290      1040            setb    _P1_0
0118 22        1041            ret
0119           1042   ;------------------------------------------------------------
0119           1043   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
0119           1044   ;------------------------------------------------------------
0119           1045   ;i                         Allocated with name '_BMM150_Read_Trim_Registers_i_1_97'
0119           1046   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_97'
0119           1047   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_97'
0119           1048   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_97'
0119           1049   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97'
0119           1050   ;------------------------------------------------------------
0119           1051   ;        main.c:255: void BMM150_Read_Trim_Registers(void)
0119           1052   ;        -----------------------------------------
0119           1053   ;         function BMM150_Read_Trim_Registers
0119           1054   ;        -----------------------------------------
0119           1055   _BMM150_Read_Trim_Registers:
0119           1056   ;        main.c:259: xdata uint8_t trim_x1y1[2] = {0};
0119 90C8B0    1057            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
011C           1058   ;        main.c:260: xdata uint8_t trim_xyz_data[4] = {0};
011C E4        1059            clr     a
011D F0        1060            movx    @dptr,a
011E 90C8B1    1061            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
0121 F0        1062            movx    @dptr,a
0122 90C910    1063            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0125 F0        1064            movx    @dptr,a
0126 90C911    1065            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0001)
0129 F0        1066            movx    @dptr,a
012A 90C912    1067            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
012D           1068   ;        main.c:261: xdata uint8_t trim_xy1xy2[10] = {0};
012D E4        1069            clr     a
012E F0        1070            movx    @dptr,a
012F 90C913    1071            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0132 F0        1072            movx    @dptr,a
0133 90C970    1073            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0136 F0        1074            movx    @dptr,a
0137 90C971    1075            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0001)
013A F0        1076            movx    @dptr,a
013B 90C972    1077            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0002)
013E E4        1078            clr     a
013F F0        1079            movx    @dptr,a
0140 90C973    1080            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0003)
0143 F0        1081            movx    @dptr,a
0144 90C974    1082            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0147 F0        1083            movx    @dptr,a
0148 90C975    1084            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
014B F0        1085            movx    @dptr,a
014C 90C976    1086            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0006)
014F E4        1087            clr     a
0150 F0        1088            movx    @dptr,a
0151 90C977    1089            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0007)
0154 F0        1090            movx    @dptr,a
0155 90C978    1091            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0158 F0        1092            movx    @dptr,a
0159 90C979    1093            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
015C F0        1094            movx    @dptr,a
015D           1095   ;        main.c:264: for (i=0;i<2;i++){
015D 7A00      1096            mov     r2,#0x00
015F           1097   L008001?:
015F BA0230    1098            cjne    r2,#0x02,L008024?
0162           1099   L008024?:
0162 5000      1100            jnc     L008004?
0164           1101   ;        main.c:265: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
0164 EA        1102            mov     a,r2
0165 24B0      1103            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0167 FB        1104            mov     r3,a
0168 E4        1105            clr     a
0169 34C8      1106            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 >> 8)
016B FC        1107            mov     r4,a
016C 745D      1108            mov     a,#0x5D
016E 2A        1109            add     a,r2
016F F582      1110            mov     dpl,a
0171 C002      1111            push    ar2
0173 C003      1112            push    ar3
0175 C004      1113            push    ar4
0177 120000    1114            lcall   _SPI_read
017A AD82      1115            mov     r5,dpl
017C D004      1116            pop     ar4
017E D003      1117            pop     ar3
0180 D002      1118            pop     ar2
0182 8B82      1119            mov     dpl,r3
0184 8C83      1120            mov     dph,r4
0186 ED        1121            mov     a,r5
0187 F0        1122            movx    @dptr,a
0188           1123   ;        main.c:264: for (i=0;i<2;i++){
0188 0A        1124            inc     r2
0189 8000      1125            sjmp    L008001?
018B           1126   L008004?:
018B           1127   ;        main.c:267: for (i=0;i<4;i++){
018B 7A00      1128            mov     r2,#0x00
018D           1129   L008005?:
018D BA04F0    1130            cjne    r2,#0x04,L008026?
0190           1131   L008026?:
0190 5000      1132            jnc     L008008?
0192           1133   ;        main.c:268: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
0192 EA        1134            mov     a,r2
0193 2410      1135            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0195 FB        1136            mov     r3,a
0196 E4        1137            clr     a
0197 34C9      1138            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 >> 8)
0199 FC        1139            mov     r4,a
019A 7462      1140            mov     a,#0x62
019C 2A        1141            add     a,r2
019D F582      1142            mov     dpl,a
019F C002      1143            push    ar2
01A1 C003      1144            push    ar3
01A3 C004      1145            push    ar4
01A5 120000    1146            lcall   _SPI_read
01A8 AD82      1147            mov     r5,dpl
01AA D004      1148            pop     ar4
01AC D003      1149            pop     ar3
01AE D002      1150            pop     ar2
01B0 8B82      1151            mov     dpl,r3
01B2 8C83      1152            mov     dph,r4
01B4 ED        1153            mov     a,r5
01B5 F0        1154            movx    @dptr,a
01B6           1155   ;        main.c:267: for (i=0;i<4;i++){
01B6 0A        1156            inc     r2
01B7 8000      1157            sjmp    L008005?
01B9           1158   L008008?:
01B9           1159   ;        main.c:270: for (i=0;i<10;i++){
01B9 7A00      1160            mov     r2,#0x00
01BB           1161   L008009?:
01BB BA0AB0    1162            cjne    r2,#0x0A,L008028?
01BE           1163   L008028?:
01BE 5000      1164            jnc     L008012?
01C0           1165   ;        main.c:271: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
01C0 EA        1166            mov     a,r2
01C1 2470      1167            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
01C3 FB        1168            mov     r3,a
01C4 E4        1169            clr     a
01C5 34C9      1170            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 >> 8)
01C7 FC        1171            mov     r4,a
01C8 7468      1172            mov     a,#0x68
01CA 2A        1173            add     a,r2
01CB F582      1174            mov     dpl,a
01CD C002      1175            push    ar2
01CF C003      1176            push    ar3
01D1 C004      1177            push    ar4
01D3 120000    1178            lcall   _SPI_read
01D6 AD82      1179            mov     r5,dpl
01D8 D004      1180            pop     ar4
01DA D003      1181            pop     ar3
01DC D002      1182            pop     ar2
01DE 8B82      1183            mov     dpl,r3
01E0 8C83      1184            mov     dph,r4
01E2 ED        1185            mov     a,r5
01E3 F0        1186            movx    @dptr,a
01E4           1187   ;        main.c:270: for (i=0;i<10;i++){
01E4 0A        1188            inc     r2
01E5 8000      1189            sjmp    L008009?
01E7           1190   L008012?:
01E7           1191   ;        main.c:274: dig_x1 = (int8_t) trim_x1y1[0]; 
01E7 90C8B0    1192            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
01EA E0        1193            movx    a,@dptr
01EB 9051B0    1194            mov     dptr,#_dig_x1
01EE F0        1195            movx    @dptr,a
01EF           1196   ;        main.c:275: dig_y1 = (int8_t) trim_x1y1[1]; 
01EF 90C8B1    1197            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
01F2 E0        1198            movx    a,@dptr
01F3 905130    1199            mov     dptr,#_dig_y1
01F6 F0        1200            movx    @dptr,a
01F7           1201   ;        main.c:276: dig_x2 = (int8_t) trim_xyz_data[2]; 
01F7 90C912    1202            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
01FA E0        1203            movx    a,@dptr
01FB 905170    1204            mov     dptr,#_dig_x2
01FE F0        1205            movx    @dptr,a
01FF           1206   ;        main.c:277: dig_y2 = (int8_t) trim_xyz_data[3]; 
01FF 90C913    1207            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0202 E0        1208            movx    a,@dptr
0203 9050F0    1209            mov     dptr,#_dig_y2
0206 F0        1210            movx    @dptr,a
0207           1211   ;        main.c:291: dig_xy1 = trim_xy1xy2[9];
0207 90C979    1212            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
020A E0        1213            movx    a,@dptr
020B 904FB0    1214            mov     dptr,#_dig_xy1
020E F0        1215            movx    @dptr,a
020F           1216   ;        main.c:292: dig_xy2 = (int8_t)trim_xy1xy2[8];
020F 90C978    1217            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0212 E0        1218            movx    a,@dptr
0213 904F70    1219            mov     dptr,#_dig_xy2
0216 F0        1220            movx    @dptr,a
0217           1221   ;        main.c:294: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
0217 90C975    1222            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
021A E0        1223            movx    a,@dptr
021B FA        1224            mov     r2,a
021C 53027F    1225            anl     ar2,#0x7F
021F 8A03      1226            mov     ar3,r2
0221 7A00      1227            mov     r2,#0x00
0223           1228   ;        main.c:295: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
0223 90C974    1229            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0226 E0        1230            movx    a,@dptr
0227 FC        1231            mov     r4,a
0228 7D00      1232            mov     r5,#0x00
022A 904F30    1233            mov     dptr,#_dig_xyz1
022D EC        1234            mov     a,r4
022E 4A        1235            orl     a,r2
022F F0        1236            movx    @dptr,a
0230 ED        1237            mov     a,r5
0231 4B        1238            orl     a,r3
0232 A3        1239            inc     dptr
0233 F0        1240            movx    @dptr,a
0234 22        1241            ret
0235           1242   ;------------------------------------------------------------
0235           1243   ;Allocation info for local variables in function 'BMM150_Init'
0235           1244   ;------------------------------------------------------------
0235           1245   ;chip_id                   Allocated with name '_BMM150_Init_chip_id_1_102'
0235           1246   ;------------------------------------------------------------
0235           1247   ;        main.c:299: void BMM150_Init(void)
0235           1248   ;        -----------------------------------------
0235           1249   ;         function BMM150_Init
0235           1250   ;        -----------------------------------------
0235           1251   _BMM150_Init:
0235           1252   ;        main.c:304: CS = 1; // Deselect BMM150
0235 D290      1253            setb    _P1_0
0237           1254   ;        main.c:307: waitms(10);
0237 90000A    1255            mov     dptr,#0x000A
023A 120000    1256            lcall   _waitms
023D           1257   ;        main.c:310: SPI_write(BMM150_POWER_CONTROL, 0x82);
023D 758082    1258            mov     _SPI_write_PARM_2,#0x82
0240 75824B    1259            mov     dpl,#0x4B
0243 120000    1260            lcall   _SPI_write
0246           1261   ;        main.c:311: waitms(10);  // Wait for reset to complete
0246 90000A    1262            mov     dptr,#0x000A
0249 120000    1263            lcall   _waitms
024C           1264   ;        main.c:314: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
024C 758001    1265            mov     _SPI_write_PARM_2,#0x01
024F 75824B    1266            mov     dpl,#0x4B
0252 120000    1267            lcall   _SPI_write
0255           1268   ;        main.c:315: waitms(5);
0255 900005    1269            mov     dptr,#0x0005
0258 120000    1270            lcall   _waitms
025B           1271   ;        main.c:318: chip_id = SPI_read(BMM150_CHIP_ID);
025B 758240    1272            mov     dpl,#0x40
025E 120000    1273            lcall   _SPI_read
0261 AA82      1274            mov     r2,dpl
0263           1275   ;        main.c:319: if (chip_id != BMM150_CHIP_ID_VALUE)
0263 BA3230    1276            cjne    r2,#0x32,L009011?
0266 8000      1277            sjmp    L009005?
0268           1278   L009011?:
0268           1279   ;        main.c:321: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
0268 8A03      1280            mov     ar3,r2
026A 7C00      1281            mov     r4,#0x00
026C C003      1282            push    ar3
026E C004      1283            push    ar4
0270 74B0      1284            mov     a,#__str_0
0272 C0E0      1285            push    acc
0274 74D6      1286            mov     a,#(__str_0 >> 8)
0276 C0E0      1287            push    acc
0278 7480      1288            mov     a,#0x80
027A C0E0      1289            push    acc
027C 120000    1290            lcall   _printf
027F E581      1291            mov     a,sp
0281 24FB      1292            add     a,#0xfb
0283 F581      1293            mov     sp,a
0285           1294   ;        main.c:322: while (1) {
0285           1295   L009002?:
0285           1296   ;        main.c:323: printf("Press restart to check again!\r");
0285 74B0      1297            mov     a,#__str_1
0287 C0E0      1298            push    acc
0289 74D7      1299            mov     a,#(__str_1 >> 8)
028B C0E0      1300            push    acc
028D 7480      1301            mov     a,#0x80
028F C0E0      1302            push    acc
0291 120000    1303            lcall   _printf
0294 1581      1304            dec     sp
0296 1581      1305            dec     sp
0298 1581      1306            dec     sp
029A 8000      1307            sjmp    L009002?
029C           1308   L009005?:
029C           1309   ;        main.c:327: printf("DONE! Chip ID = 0x%02X\r\n", chip_id);
029C 7B00      1310            mov     r3,#0x00
029E C002      1311            push    ar2
02A0 C003      1312            push    ar3
02A2 C002      1313            push    ar2
02A4 C003      1314            push    ar3
02A6 74F0      1315            mov     a,#__str_2
02A8 C0E0      1316            push    acc
02AA 74D7      1317            mov     a,#(__str_2 >> 8)
02AC C0E0      1318            push    acc
02AE 7480      1319            mov     a,#0x80
02B0 C0E0      1320            push    acc
02B2 120000    1321            lcall   _printf
02B5 E581      1322            mov     a,sp
02B7 24FB      1323            add     a,#0xfb
02B9 F581      1324            mov     sp,a
02BB           1325   ;        main.c:331: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
02BB 758000    1326            mov     _SPI_write_PARM_2,#0x00
02BE 75824C    1327            mov     dpl,#0x4C
02C1 120000    1328            lcall   _SPI_write
02C4           1329   ;        main.c:334: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
02C4 75807F    1330            mov     _SPI_write_PARM_2,#0x7F
02C7 758251    1331            mov     dpl,#0x51
02CA 120000    1332            lcall   _SPI_write
02CD           1333   ;        main.c:335: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
02CD 75800E    1334            mov     _SPI_write_PARM_2,#0x0E
02D0 758252    1335            mov     dpl,#0x52
02D3 120000    1336            lcall   _SPI_write
02D6           1337   ;        main.c:337: BMM150_Read_Trim_Registers();
02D6 120000    1338            lcall   _BMM150_Read_Trim_Registers
02D9           1339   ;        main.c:339: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
02D9 7430      1340            mov     a,#__str_3
02DB C0E0      1341            push    acc
02DD 74D8      1342            mov     a,#(__str_3 >> 8)
02DF C0E0      1343            push    acc
02E1 7480      1344            mov     a,#0x80
02E3 C0E0      1345            push    acc
02E5 120000    1346            lcall   _printf
02E8 E581      1347            mov     a,sp
02EA 24FB      1348            add     a,#0xfb
02EC F581      1349            mov     sp,a
02EE           1350   ;        main.c:340: return; 
02EE 22        1351            ret
02EF           1352   ;------------------------------------------------------------
02EF           1353   ;Allocation info for local variables in function 'BMM150_compensate_x'
02EF           1354   ;------------------------------------------------------------
02EF           1355   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
02EF           1356   ;mag_data_x                Allocated to registers r2 r3 r4 
02EF           1357   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
02EF           1358   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_107'
02EF           1359   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_107'
02EF           1360   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_107'
02EF           1361   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_107'
02EF           1362   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_107'
02EF           1363   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_107'
02EF           1364   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_107'
02EF           1365   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_107'
02EF           1366   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_107'
02EF           1367   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_107'
02EF           1368   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_107'
02EF           1369   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_107'
02EF           1370   ;------------------------------------------------------------
02EF           1371   ;        main.c:343: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
02EF           1372   ;        -----------------------------------------
02EF           1373   ;         function BMM150_compensate_x
02EF           1374   ;        -----------------------------------------
02EF           1375   _BMM150_compensate_x:
02EF           1376   ;        main.c:361: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
02EF ACF0      1377            mov     r4,b
02F1 120000    1378            lcall   __gptrget
02F4 FA        1379            mov     r2,a
02F5 A3        1380            inc     dptr
02F6 120000    1381            lcall   __gptrget
02F9 FB        1382            mov     r3,a
02FA BA00F0    1383            cjne    r2,#0x00,L010019?
02FD BBF0F0    1384            cjne    r3,#0xF0,L010019?
0300 020000    1385            ljmp    L010011?
0303           1386   L010019?:
0303           1387   ;        main.c:362: if (*data_rhall != 0)
0303 AC30      1388            mov     r4,_BMM150_compensate_x_PARM_2
0305 AD31      1389            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
0307 AE32      1390            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
0309 8C82      1391            mov     dpl,r4
030B 8D83      1392            mov     dph,r5
030D 8EF0      1393            mov     b,r6
030F 120000    1394            lcall   __gptrget
0312 FC        1395            mov     r4,a
0313 A3        1396            inc     dptr
0314 120000    1397            lcall   __gptrget
0317 FD        1398            mov     r5,a
0318 4C        1399            orl     a,r4
0319 6000      1400            jz      L010005?
031B           1401   ;        main.c:365: process_comp_x0 = *data_rhall;
031B 90CA30    1402            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
031E EC        1403            mov     a,r4
031F F0        1404            movx    @dptr,a
0320 A3        1405            inc     dptr
0321 ED        1406            mov     a,r5
0322 F0        1407            movx    @dptr,a
0323 8000      1408            sjmp    L010006?
0325           1409   L010005?:
0325           1410   ;        main.c:367: else if (dig_xyz1 != 0)
0325 904F30    1411            mov     dptr,#_dig_xyz1
0328 E0        1412            movx    a,@dptr
0329 FC        1413            mov     r4,a
032A A3        1414            inc     dptr
032B E0        1415            movx    a,@dptr
032C FD        1416            mov     r5,a
032D 4C        1417            orl     a,r4
032E 6000      1418            jz      L010002?
0330           1419   ;        main.c:369: process_comp_x0 = dig_xyz1;
0330 90CA30    1420            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
0333 EC        1421            mov     a,r4
0334 F0        1422            movx    @dptr,a
0335 A3        1423            inc     dptr
0336 ED        1424            mov     a,r5
0337 F0        1425            movx    @dptr,a
0338 8000      1426            sjmp    L010006?
033A           1427   L010002?:
033A           1428   ;        main.c:373: process_comp_x0 = 0;
033A 90CA30    1429            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
033D E4        1430            clr     a
033E F0        1431            movx    @dptr,a
033F A3        1432            inc     dptr
0340 F0        1433            movx    @dptr,a
0341           1434   L010006?:
0341           1435   ;        main.c:375: if (process_comp_x0 != 0)
0341 90CA30    1436            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
0344 E0        1437            movx    a,@dptr
0345 FC        1438            mov     r4,a
0346 A3        1439            inc     dptr
0347 E0        1440            movx    a,@dptr
0348 FD        1441            mov     r5,a
0349 4C        1442            orl     a,r4
034A 7000      1443            jnz     L010022?
034C 020000    1444            ljmp    L010008?
034F           1445   L010022?:
034F           1446   ;        main.c:378: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
034F 904F30    1447            mov     dptr,#_dig_xyz1
0352 E0        1448            movx    a,@dptr
0353 FE        1449            mov     r6,a
0354 A3        1450            inc     dptr
0355 E0        1451            movx    a,@dptr
0356 FF        1452            mov     r7,a
0357 E4        1453            clr     a
0358 F8        1454            mov     r0,a
0359 EF        1455            mov     a,r7
035A C8        1456            xch     a,r0
035B 5403      1457            anl     a,#0x03
035D A2E0      1458            mov     c,acc.0
035F C8        1459            xch     a,r0
0360 13        1460            rrc     a
0361 C8        1461            xch     a,r0
0362 13        1462            rrc     a
0363 A2E0      1463            mov     c,acc.0
0365 C8        1464            xch     a,r0
0366 13        1465            rrc     a
0367 C8        1466            xch     a,r0
0368 13        1467            rrc     a
0369 C8        1468            xch     a,r0
036A F9        1469            mov     r1,a
036B EE        1470            mov     a,r6
036C 03        1471            rr      a
036D 03        1472            rr      a
036E 54C0      1473            anl     a,#0xc0
0370 FF        1474            mov     r7,a
0371 EE        1475            mov     a,r6
0372 03        1476            rr      a
0373 03        1477            rr      a
0374 543F      1478            anl     a,#0x3f
0376 48        1479            orl     a,r0
0377 F8        1480            mov     r0,a
0378 7E00      1481            mov     r6,#0x00
037A           1482   ;        main.c:379: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
037A 8C00      1483            mov     __divslong_PARM_2,r4
037C 8D01      1484            mov     (__divslong_PARM_2 + 1),r5
037E 750200    1485            mov     (__divslong_PARM_2 + 2),#0x00
0381 750300    1486            mov     (__divslong_PARM_2 + 3),#0x00
0384 8E82      1487            mov     dpl,r6
0386 8F83      1488            mov     dph,r7
0388 88F0      1489            mov     b,r0
038A E9        1490            mov     a,r1
038B C002      1491            push    ar2
038D C003      1492            push    ar3
038F 120000    1493            lcall   __divslong
0392 AC82      1494            mov     r4,dpl
0394 E583      1495            mov     a,dph
0396 24C0      1496            add     a,#0xc0
0398 FD        1497            mov     r5,a
0399           1498   ;        main.c:381: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
0399 8C06      1499            mov     ar6,r4
039B 8D07      1500            mov     ar7,r5
039D 8E90      1501            mov     _BMM150_compensate_x_sloc0_1_0,r6
039F EF        1502            mov     a,r7
03A0 F591      1503            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
03A2 33        1504            rlc     a
03A3 95E0      1505            subb    a,acc
03A5 F592      1506            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
03A7 F593      1507            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03A9 8C06      1508            mov     ar6,r4
03AB 8D07      1509            mov     ar7,r5
03AD 8E00      1510            mov     __mullong_PARM_2,r6
03AF EF        1511            mov     a,r7
03B0 F501      1512            mov     (__mullong_PARM_2 + 1),a
03B2 33        1513            rlc     a
03B3 95E0      1514            subb    a,acc
03B5 F502      1515            mov     (__mullong_PARM_2 + 2),a
03B7 F503      1516            mov     (__mullong_PARM_2 + 3),a
03B9           1517   ;        main.c:382: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
03B9 859082    1518            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03BC 859183    1519            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03BF 8592F0    1520            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03C2 E593      1521            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03C4 C004      1522            push    ar4
03C6 C005      1523            push    ar5
03C8 120000    1524            lcall   __mullong
03CB 858290    1525            mov     _BMM150_compensate_x_sloc0_1_0,dpl
03CE 858391    1526            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
03D1 85F092    1527            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
03D4 F593      1528            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03D6 904F70    1529            mov     dptr,#_dig_xy2
03D9 E0        1530            movx    a,@dptr
03DA FE        1531            mov     r6,a
03DB 33        1532            rlc     a
03DC 95E0      1533            subb    a,acc
03DE FF        1534            mov     r7,a
03DF F8        1535            mov     r0,a
03E0 F9        1536            mov     r1,a
03E1 750080    1537            mov     __divslong_PARM_2,#0x80
03E4 E4        1538            clr     a
03E5 F501      1539            mov     (__divslong_PARM_2 + 1),a
03E7 F502      1540            mov     (__divslong_PARM_2 + 2),a
03E9 F503      1541            mov     (__divslong_PARM_2 + 3),a
03EB 859082    1542            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03EE 859183    1543            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03F1 8592F0    1544            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03F4 E593      1545            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03F6 C006      1546            push    ar6
03F8 C007      1547            push    ar7
03FA C000      1548            push    ar0
03FC C001      1549            push    ar1
03FE 120000    1550            lcall   __divslong
0401 858200    1551            mov     __mullong_PARM_2,dpl
0404 858301    1552            mov     (__mullong_PARM_2 + 1),dph
0407 85F002    1553            mov     (__mullong_PARM_2 + 2),b
040A F503      1554            mov     (__mullong_PARM_2 + 3),a
040C D001      1555            pop     ar1
040E D000      1556            pop     ar0
0410 D007      1557            pop     ar7
0412 D006      1558            pop     ar6
0414           1559   ;        main.c:383: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
0414 8E82      1560            mov     dpl,r6
0416 8F83      1561            mov     dph,r7
0418 88F0      1562            mov     b,r0
041A E9        1563            mov     a,r1
041B 120000    1564            lcall   __mullong
041E 858290    1565            mov     _BMM150_compensate_x_sloc0_1_0,dpl
0421 858391    1566            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
0424 85F092    1567            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
0427 F593      1568            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
0429 D005      1569            pop     ar5
042B D004      1570            pop     ar4
042D 904FB0    1571            mov     dptr,#_dig_xy1
0430 E0        1572            movx    a,@dptr
0431 FE        1573            mov     r6,a
0432 E4        1574            clr     a
0433 5401      1575            anl     a,#0x01
0435 A2E0      1576            mov     c,acc.0
0437 CE        1577            xch     a,r6
0438 13        1578            rrc     a
0439 CE        1579            xch     a,r6
043A 13        1580            rrc     a
043B CE        1581            xch     a,r6
043C 8E00      1582            mov     __mullong_PARM_2,r6
043E F501      1583            mov     (__mullong_PARM_2 + 1),a
0440 33        1584            rlc     a
0441 95E0      1585            subb    a,acc
0443 F502      1586            mov     (__mullong_PARM_2 + 2),a
0445 F503      1587            mov     (__mullong_PARM_2 + 3),a
0447           1588   ;        main.c:384: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
0447 ED        1589            mov     a,r5
0448 33        1590            rlc     a
0449 95E0      1591            subb    a,acc
044B FE        1592            mov     r6,a
044C           1593   ;        main.c:385: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
044C 8C82      1594            mov     dpl,r4
044E 8D83      1595            mov     dph,r5
0450 8EF0      1596            mov     b,r6
0452 120000    1597            lcall   __mullong
0455 AC82      1598            mov     r4,dpl
0457 AD83      1599            mov     r5,dph
0459 AEF0      1600            mov     r6,b
045B FF        1601            mov     r7,a
045C EC        1602            mov     a,r4
045D 2590      1603            add     a,_BMM150_compensate_x_sloc0_1_0
045F FC        1604            mov     r4,a
0460 ED        1605            mov     a,r5
0461 3591      1606            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
0463 FD        1607            mov     r5,a
0464 EE        1608            mov     a,r6
0465 3592      1609            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
0467 FE        1610            mov     r6,a
0468 EF        1611            mov     a,r7
0469 3593      1612            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
046B FF        1613            mov     r7,a
046C 750000    1614            mov     __divslong_PARM_2,#0x00
046F 750102    1615            mov     (__divslong_PARM_2 + 1),#0x02
0472 750200    1616            mov     (__divslong_PARM_2 + 2),#0x00
0475 750300    1617            mov     (__divslong_PARM_2 + 3),#0x00
0478 8C82      1618            mov     dpl,r4
047A 8D83      1619            mov     dph,r5
047C 8EF0      1620            mov     b,r6
047E EF        1621            mov     a,r7
047F 120000    1622            lcall   __divslong
0482 AC82      1623            mov     r4,dpl
0484 AD83      1624            mov     r5,dph
0486 AEF0      1625            mov     r6,b
0488 FF        1626            mov     r7,a
0489 7410      1627            mov     a,#0x10
048B 2E        1628            add     a,r6
048C FE        1629            mov     r6,a
048D E4        1630            clr     a
048E 3F        1631            addc    a,r7
048F FF        1632            mov     r7,a
0490           1633   ;        main.c:386: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
0490 905170    1634            mov     dptr,#_dig_x2
0493 E0        1635            movx    a,@dptr
0494 F8        1636            mov     r0,a
0495 33        1637            rlc     a
0496 95E0      1638            subb    a,acc
0498 F9        1639            mov     r1,a
0499 74A0      1640            mov     a,#0xA0
049B 28        1641            add     a,r0
049C F8        1642            mov     r0,a
049D E4        1643            clr     a
049E 39        1644            addc    a,r1
049F 8800      1645            mov     __mullong_PARM_2,r0
04A1 F501      1646            mov     (__mullong_PARM_2 + 1),a
04A3 33        1647            rlc     a
04A4 95E0      1648            subb    a,acc
04A6 F502      1649            mov     (__mullong_PARM_2 + 2),a
04A8 F503      1650            mov     (__mullong_PARM_2 + 3),a
04AA           1651   ;        main.c:387: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
04AA 8C82      1652            mov     dpl,r4
04AC 8D83      1653            mov     dph,r5
04AE 8EF0      1654            mov     b,r6
04B0 EF        1655            mov     a,r7
04B1 120000    1656            lcall   __mullong
04B4           1657   ;        main.c:388: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
04B4 750000    1658            mov     __divslong_PARM_2,#0x00
04B7 750110    1659            mov     (__divslong_PARM_2 + 1),#0x10
04BA 750200    1660            mov     (__divslong_PARM_2 + 2),#0x00
04BD 750300    1661            mov     (__divslong_PARM_2 + 3),#0x00
04C0 120000    1662            lcall   __divslong
04C3 858200    1663            mov     __mullong_PARM_2,dpl
04C6 858301    1664            mov     (__mullong_PARM_2 + 1),dph
04C9 85F002    1665            mov     (__mullong_PARM_2 + 2),b
04CC F503      1666            mov     (__mullong_PARM_2 + 3),a
04CE D003      1667            pop     ar3
04D0 D002      1668            pop     ar2
04D2 EB        1669            mov     a,r3
04D3 33        1670            rlc     a
04D4 95E0      1671            subb    a,acc
04D6 FC        1672            mov     r4,a
04D7           1673   ;        main.c:389: retval = ((int16_t)(process_comp_x10 / 8192));
04D7 8A82      1674            mov     dpl,r2
04D9 8B83      1675            mov     dph,r3
04DB 8CF0      1676            mov     b,r4
04DD 120000    1677            lcall   __mullong
04E0 750000    1678            mov     __divslong_PARM_2,#0x00
04E3 750120    1679            mov     (__divslong_PARM_2 + 1),#0x20
04E6 750200    1680            mov     (__divslong_PARM_2 + 2),#0x00
04E9 750300    1681            mov     (__divslong_PARM_2 + 3),#0x00
04EC 120000    1682            lcall   __divslong
04EF AA82      1683            mov     r2,dpl
04F1 AB83      1684            mov     r3,dph
04F3           1685   ;        main.c:390: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
04F3 9051B0    1686            mov     dptr,#_dig_x1
04F6 E0        1687            movx    a,@dptr
04F7 FC        1688            mov     r4,a
04F8 33        1689            rlc     a
04F9 95E0      1690            subb    a,acc
04FB C4        1691            swap    a
04FC 03        1692            rr      a
04FD 54F8      1693            anl     a,#0xf8
04FF CC        1694            xch     a,r4
0500 C4        1695            swap    a
0501 03        1696            rr      a
0502 CC        1697            xch     a,r4
0503 6C        1698            xrl     a,r4
0504 CC        1699            xch     a,r4
0505 54F8      1700            anl     a,#0xf8
0507 CC        1701            xch     a,r4
0508 6C        1702            xrl     a,r4
0509 FD        1703            mov     r5,a
050A EC        1704            mov     a,r4
050B 2A        1705            add     a,r2
050C F582      1706            mov     dpl,a
050E ED        1707            mov     a,r5
050F 3B        1708            addc    a,r3
0510 F583      1709            mov     dph,a
0512 750010    1710            mov     __divsint_PARM_2,#0x10
0515 E4        1711            clr     a
0516 F501      1712            mov     (__divsint_PARM_2 + 1),a
0518 120000    1713            lcall   __divsint
051B E582      1714            mov     a,dpl
051D 8583F0    1715            mov     b,dph
0520 90C9D0    1716            mov     dptr,#_BMM150_compensate_x_retval_1_107
0523 F0        1717            movx    @dptr,a
0524 A3        1718            inc     dptr
0525 E5F0      1719            mov     a,b
0527 F0        1720            movx    @dptr,a
0528 8000      1721            sjmp    L010012?
052A           1722   L010008?:
052A           1723   ;        main.c:393: retval = BMM150_OVERFLOW_OUTPUT; 
052A 90C9D0    1724            mov     dptr,#_BMM150_compensate_x_retval_1_107
052D E4        1725            clr     a
052E F0        1726            movx    @dptr,a
052F A3        1727            inc     dptr
0530 7480      1728            mov     a,#0x80
0532 F0        1729            movx    @dptr,a
0533 8000      1730            sjmp    L010012?
0535           1731   L010011?:
0535           1732   ;        main.c:397: retval = BMM150_OVERFLOW_OUTPUT; 
0535 90C9D0    1733            mov     dptr,#_BMM150_compensate_x_retval_1_107
0538 E4        1734            clr     a
0539 F0        1735            movx    @dptr,a
053A A3        1736            inc     dptr
053B 7480      1737            mov     a,#0x80
053D F0        1738            movx    @dptr,a
053E           1739   L010012?:
053E           1740   ;        main.c:399: return retval; 
053E 90C9D0    1741            mov     dptr,#_BMM150_compensate_x_retval_1_107
0541 E0        1742            movx    a,@dptr
0542 FA        1743            mov     r2,a
0543 A3        1744            inc     dptr
0544 E0        1745            movx    a,@dptr
0545 8A82      1746            mov     dpl,r2
0547 F583      1747            mov     dph,a
0549 22        1748            ret
054A           1749   ;------------------------------------------------------------
054A           1750   ;Allocation info for local variables in function 'BMM150_compensate_y'
054A           1751   ;------------------------------------------------------------
054A           1752   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
054A           1753   ;mag_data_y                Allocated to registers r2 r3 r4 
054A           1754   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
054A           1755   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_116'
054A           1756   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_116'
054A           1757   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_116'
054A           1758   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_116'
054A           1759   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_116'
054A           1760   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_116'
054A           1761   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_116'
054A           1762   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_116'
054A           1763   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_116'
054A           1764   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_116'
054A           1765   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_116'
054A           1766   ;------------------------------------------------------------
054A           1767   ;        main.c:402: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
054A           1768   ;        -----------------------------------------
054A           1769   ;         function BMM150_compensate_y
054A           1770   ;        -----------------------------------------
054A           1771   _BMM150_compensate_y:
054A           1772   ;        main.c:420: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
054A ACF0      1773            mov     r4,b
054C 120000    1774            lcall   __gptrget
054F FA        1775            mov     r2,a
0550 A3        1776            inc     dptr
0551 120000    1777            lcall   __gptrget
0554 FB        1778            mov     r3,a
0555 BA00A0    1779            cjne    r2,#0x00,L011019?
0558 BBF0A0    1780            cjne    r3,#0xF0,L011019?
055B 020000    1781            ljmp    L011011?
055E           1782   L011019?:
055E           1783   ;        main.c:422: if (*data_rhall != 0)
055E ACE0      1784            mov     r4,_BMM150_compensate_y_PARM_2
0560 ADE1      1785            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
0562 AEE2      1786            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
0564 8C82      1787            mov     dpl,r4
0566 8D83      1788            mov     dph,r5
0568 8EF0      1789            mov     b,r6
056A 120000    1790            lcall   __gptrget
056D FC        1791            mov     r4,a
056E A3        1792            inc     dptr
056F 120000    1793            lcall   __gptrget
0572 FD        1794            mov     r5,a
0573 4C        1795            orl     a,r4
0574 6000      1796            jz      L011005?
0576           1797   ;        main.c:425: process_comp_y0 = *data_rhall;
0576 90CAF0    1798            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
0579 EC        1799            mov     a,r4
057A F0        1800            movx    @dptr,a
057B A3        1801            inc     dptr
057C ED        1802            mov     a,r5
057D F0        1803            movx    @dptr,a
057E 8000      1804            sjmp    L011006?
0580           1805   L011005?:
0580           1806   ;        main.c:427: else if (dig_xyz1 != 0)
0580 904F30    1807            mov     dptr,#_dig_xyz1
0583 E0        1808            movx    a,@dptr
0584 FC        1809            mov     r4,a
0585 A3        1810            inc     dptr
0586 E0        1811            movx    a,@dptr
0587 FD        1812            mov     r5,a
0588 4C        1813            orl     a,r4
0589 6000      1814            jz      L011002?
058B           1815   ;        main.c:429: process_comp_y0 = dig_xyz1;
058B 90CAF0    1816            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
058E EC        1817            mov     a,r4
058F F0        1818            movx    @dptr,a
0590 A3        1819            inc     dptr
0591 ED        1820            mov     a,r5
0592 F0        1821            movx    @dptr,a
0593 8000      1822            sjmp    L011006?
0595           1823   L011002?:
0595           1824   ;        main.c:433: process_comp_y0 = 0;
0595 90CAF0    1825            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
0598 E4        1826            clr     a
0599 F0        1827            movx    @dptr,a
059A A3        1828            inc     dptr
059B F0        1829            movx    @dptr,a
059C           1830   L011006?:
059C           1831   ;        main.c:436: if (process_comp_y0 != 0)
059C 90CAF0    1832            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
059F E0        1833            movx    a,@dptr
05A0 FC        1834            mov     r4,a
05A1 A3        1835            inc     dptr
05A2 E0        1836            movx    a,@dptr
05A3 FD        1837            mov     r5,a
05A4 4C        1838            orl     a,r4
05A5 7000      1839            jnz     L011022?
05A7 020000    1840            ljmp    L011008?
05AA           1841   L011022?:
05AA           1842   ;        main.c:439: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
05AA 904F30    1843            mov     dptr,#_dig_xyz1
05AD E0        1844            movx    a,@dptr
05AE FE        1845            mov     r6,a
05AF A3        1846            inc     dptr
05B0 E0        1847            movx    a,@dptr
05B1 FF        1848            mov     r7,a
05B2 E4        1849            clr     a
05B3 F8        1850            mov     r0,a
05B4 EF        1851            mov     a,r7
05B5 C8        1852            xch     a,r0
05B6 5403      1853            anl     a,#0x03
05B8 A2E0      1854            mov     c,acc.0
05BA C8        1855            xch     a,r0
05BB 13        1856            rrc     a
05BC C8        1857            xch     a,r0
05BD 13        1858            rrc     a
05BE A2E0      1859            mov     c,acc.0
05C0 C8        1860            xch     a,r0
05C1 13        1861            rrc     a
05C2 C8        1862            xch     a,r0
05C3 13        1863            rrc     a
05C4 C8        1864            xch     a,r0
05C5 F9        1865            mov     r1,a
05C6 EE        1866            mov     a,r6
05C7 03        1867            rr      a
05C8 03        1868            rr      a
05C9 54C0      1869            anl     a,#0xc0
05CB FF        1870            mov     r7,a
05CC EE        1871            mov     a,r6
05CD 03        1872            rr      a
05CE 03        1873            rr      a
05CF 543F      1874            anl     a,#0x3f
05D1 48        1875            orl     a,r0
05D2 F8        1876            mov     r0,a
05D3 7E00      1877            mov     r6,#0x00
05D5 8C00      1878            mov     __divslong_PARM_2,r4
05D7 8D01      1879            mov     (__divslong_PARM_2 + 1),r5
05D9 750200    1880            mov     (__divslong_PARM_2 + 2),#0x00
05DC 750300    1881            mov     (__divslong_PARM_2 + 3),#0x00
05DF           1882   ;        main.c:440: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
05DF 8E82      1883            mov     dpl,r6
05E1 8F83      1884            mov     dph,r7
05E3 88F0      1885            mov     b,r0
05E5 E9        1886            mov     a,r1
05E6 C002      1887            push    ar2
05E8 C003      1888            push    ar3
05EA 120000    1889            lcall   __divslong
05ED AC82      1890            mov     r4,dpl
05EF E583      1891            mov     a,dph
05F1 24C0      1892            add     a,#0xc0
05F3 FD        1893            mov     r5,a
05F4           1894   ;        main.c:442: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
05F4 8C06      1895            mov     ar6,r4
05F6 8D07      1896            mov     ar7,r5
05F8 8EE0      1897            mov     _BMM150_compensate_y_sloc0_1_0,r6
05FA EF        1898            mov     a,r7
05FB F5E1      1899            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
05FD 33        1900            rlc     a
05FE 95E0      1901            subb    a,acc
0600 F5E2      1902            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
0602 F5E3      1903            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0604 8C06      1904            mov     ar6,r4
0606 8D07      1905            mov     ar7,r5
0608 8E00      1906            mov     __mullong_PARM_2,r6
060A EF        1907            mov     a,r7
060B F501      1908            mov     (__mullong_PARM_2 + 1),a
060D 33        1909            rlc     a
060E 95E0      1910            subb    a,acc
0610 F502      1911            mov     (__mullong_PARM_2 + 2),a
0612 F503      1912            mov     (__mullong_PARM_2 + 3),a
0614           1913   ;        main.c:443: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
0614 85E082    1914            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0617 85E183    1915            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
061A 85E2F0    1916            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
061D E5E3      1917            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
061F C004      1918            push    ar4
0621 C005      1919            push    ar5
0623 120000    1920            lcall   __mullong
0626 8582E0    1921            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0629 8583E1    1922            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
062C 85F0E2    1923            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
062F F5E3      1924            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0631 904F70    1925            mov     dptr,#_dig_xy2
0634 E0        1926            movx    a,@dptr
0635 FE        1927            mov     r6,a
0636 33        1928            rlc     a
0637 95E0      1929            subb    a,acc
0639 FF        1930            mov     r7,a
063A F8        1931            mov     r0,a
063B F9        1932            mov     r1,a
063C 750080    1933            mov     __divslong_PARM_2,#0x80
063F E4        1934            clr     a
0640 F501      1935            mov     (__divslong_PARM_2 + 1),a
0642 F502      1936            mov     (__divslong_PARM_2 + 2),a
0644 F503      1937            mov     (__divslong_PARM_2 + 3),a
0646 85E082    1938            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0649 85E183    1939            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
064C 85E2F0    1940            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
064F E5E3      1941            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
0651 C006      1942            push    ar6
0653 C007      1943            push    ar7
0655 C000      1944            push    ar0
0657 C001      1945            push    ar1
0659 120000    1946            lcall   __divslong
065C 858200    1947            mov     __mullong_PARM_2,dpl
065F 858301    1948            mov     (__mullong_PARM_2 + 1),dph
0662 85F002    1949            mov     (__mullong_PARM_2 + 2),b
0665 F503      1950            mov     (__mullong_PARM_2 + 3),a
0667 D001      1951            pop     ar1
0669 D000      1952            pop     ar0
066B D007      1953            pop     ar7
066D D006      1954            pop     ar6
066F           1955   ;        main.c:444: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
066F 8E82      1956            mov     dpl,r6
0671 8F83      1957            mov     dph,r7
0673 88F0      1958            mov     b,r0
0675 E9        1959            mov     a,r1
0676 120000    1960            lcall   __mullong
0679 8582E0    1961            mov     _BMM150_compensate_y_sloc0_1_0,dpl
067C 8583E1    1962            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
067F 85F0E2    1963            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
0682 F5E3      1964            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0684 D005      1965            pop     ar5
0686 D004      1966            pop     ar4
0688 904FB0    1967            mov     dptr,#_dig_xy1
068B E0        1968            movx    a,@dptr
068C FE        1969            mov     r6,a
068D E4        1970            clr     a
068E 5401      1971            anl     a,#0x01
0690 A2E0      1972            mov     c,acc.0
0692 CE        1973            xch     a,r6
0693 13        1974            rrc     a
0694 CE        1975            xch     a,r6
0695 13        1976            rrc     a
0696 CE        1977            xch     a,r6
0697 8E00      1978            mov     __mullong_PARM_2,r6
0699 F501      1979            mov     (__mullong_PARM_2 + 1),a
069B 33        1980            rlc     a
069C 95E0      1981            subb    a,acc
069E F502      1982            mov     (__mullong_PARM_2 + 2),a
06A0 F503      1983            mov     (__mullong_PARM_2 + 3),a
06A2           1984   ;        main.c:445: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
06A2 ED        1985            mov     a,r5
06A3 33        1986            rlc     a
06A4 95E0      1987            subb    a,acc
06A6 FE        1988            mov     r6,a
06A7 8C82      1989            mov     dpl,r4
06A9 8D83      1990            mov     dph,r5
06AB 8EF0      1991            mov     b,r6
06AD 120000    1992            lcall   __mullong
06B0 AC82      1993            mov     r4,dpl
06B2 AD83      1994            mov     r5,dph
06B4 AEF0      1995            mov     r6,b
06B6 FF        1996            mov     r7,a
06B7 EC        1997            mov     a,r4
06B8 25E0      1998            add     a,_BMM150_compensate_y_sloc0_1_0
06BA FC        1999            mov     r4,a
06BB ED        2000            mov     a,r5
06BC 35E1      2001            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
06BE FD        2002            mov     r5,a
06BF EE        2003            mov     a,r6
06C0 35E2      2004            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
06C2 FE        2005            mov     r6,a
06C3 EF        2006            mov     a,r7
06C4 35E3      2007            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
06C6 FF        2008            mov     r7,a
06C7 750000    2009            mov     __divslong_PARM_2,#0x00
06CA 750102    2010            mov     (__divslong_PARM_2 + 1),#0x02
06CD 750200    2011            mov     (__divslong_PARM_2 + 2),#0x00
06D0 750300    2012            mov     (__divslong_PARM_2 + 3),#0x00
06D3           2013   ;        main.c:446: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
06D3 8C82      2014            mov     dpl,r4
06D5 8D83      2015            mov     dph,r5
06D7 8EF0      2016            mov     b,r6
06D9 EF        2017            mov     a,r7
06DA 120000    2018            lcall   __divslong
06DD AC82      2019            mov     r4,dpl
06DF AD83      2020            mov     r5,dph
06E1 AEF0      2021            mov     r6,b
06E3 FF        2022            mov     r7,a
06E4 9050F0    2023            mov     dptr,#_dig_y2
06E7 E0        2024            movx    a,@dptr
06E8 F8        2025            mov     r0,a
06E9 33        2026            rlc     a
06EA 95E0      2027            subb    a,acc
06EC F9        2028            mov     r1,a
06ED 74A0      2029            mov     a,#0xA0
06EF 28        2030            add     a,r0
06F0 F8        2031            mov     r0,a
06F1 E4        2032            clr     a
06F2 39        2033            addc    a,r1
06F3 8800      2034            mov     __mullong_PARM_2,r0
06F5 F501      2035            mov     (__mullong_PARM_2 + 1),a
06F7 33        2036            rlc     a
06F8 95E0      2037            subb    a,acc
06FA F502      2038            mov     (__mullong_PARM_2 + 2),a
06FC F503      2039            mov     (__mullong_PARM_2 + 3),a
06FE           2040   ;        main.c:447: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
06FE 7410      2041            mov     a,#0x10
0700 2E        2042            add     a,r6
0701 FE        2043            mov     r6,a
0702 E4        2044            clr     a
0703 3F        2045            addc    a,r7
0704 8C82      2046            mov     dpl,r4
0706 8D83      2047            mov     dph,r5
0708 8EF0      2048            mov     b,r6
070A 120000    2049            lcall   __mullong
070D           2050   ;        main.c:448: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
070D 750000    2051            mov     __divslong_PARM_2,#0x00
0710 750110    2052            mov     (__divslong_PARM_2 + 1),#0x10
0713 750200    2053            mov     (__divslong_PARM_2 + 2),#0x00
0716 750300    2054            mov     (__divslong_PARM_2 + 3),#0x00
0719 120000    2055            lcall   __divslong
071C 858200    2056            mov     __mullong_PARM_2,dpl
071F 858301    2057            mov     (__mullong_PARM_2 + 1),dph
0722 85F002    2058            mov     (__mullong_PARM_2 + 2),b
0725 F503      2059            mov     (__mullong_PARM_2 + 3),a
0727 D003      2060            pop     ar3
0729 D002      2061            pop     ar2
072B EB        2062            mov     a,r3
072C 33        2063            rlc     a
072D 95E0      2064            subb    a,acc
072F FC        2065            mov     r4,a
0730           2066   ;        main.c:449: retval = (int16_t)(process_comp_y9 / 8192);
0730 8A82      2067            mov     dpl,r2
0732 8B83      2068            mov     dph,r3
0734 8CF0      2069            mov     b,r4
0736 120000    2070            lcall   __mullong
0739 750000    2071            mov     __divslong_PARM_2,#0x00
073C 750120    2072            mov     (__divslong_PARM_2 + 1),#0x20
073F 750200    2073            mov     (__divslong_PARM_2 + 2),#0x00
0742 750300    2074            mov     (__divslong_PARM_2 + 3),#0x00
0745 120000    2075            lcall   __divslong
0748 AA82      2076            mov     r2,dpl
074A AB83      2077            mov     r3,dph
074C           2078   ;        main.c:450: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
074C 905130    2079            mov     dptr,#_dig_y1
074F E0        2080            movx    a,@dptr
0750 FC        2081            mov     r4,a
0751 33        2082            rlc     a
0752 95E0      2083            subb    a,acc
0754 C4        2084            swap    a
0755 03        2085            rr      a
0756 54F8      2086            anl     a,#0xf8
0758 CC        2087            xch     a,r4
0759 C4        2088            swap    a
075A 03        2089            rr      a
075B CC        2090            xch     a,r4
075C 6C        2091            xrl     a,r4
075D CC        2092            xch     a,r4
075E 54F8      2093            anl     a,#0xf8
0760 CC        2094            xch     a,r4
0761 6C        2095            xrl     a,r4
0762 FD        2096            mov     r5,a
0763 EC        2097            mov     a,r4
0764 2A        2098            add     a,r2
0765 F582      2099            mov     dpl,a
0767 ED        2100            mov     a,r5
0768 3B        2101            addc    a,r3
0769 F583      2102            mov     dph,a
076B 750010    2103            mov     __divsint_PARM_2,#0x10
076E E4        2104            clr     a
076F F501      2105            mov     (__divsint_PARM_2 + 1),a
0771 120000    2106            lcall   __divsint
0774 E582      2107            mov     a,dpl
0776 8583F0    2108            mov     b,dph
0779 90CA90    2109            mov     dptr,#_BMM150_compensate_y_retval_1_116
077C F0        2110            movx    @dptr,a
077D A3        2111            inc     dptr
077E E5F0      2112            mov     a,b
0780 F0        2113            movx    @dptr,a
0781 8000      2114            sjmp    L011012?
0783           2115   L011008?:
0783           2116   ;        main.c:454: retval = BMM150_OVERFLOW_OUTPUT;
0783 90CA90    2117            mov     dptr,#_BMM150_compensate_y_retval_1_116
0786 E4        2118            clr     a
0787 F0        2119            movx    @dptr,a
0788 A3        2120            inc     dptr
0789 7480      2121            mov     a,#0x80
078B F0        2122            movx    @dptr,a
078C 8000      2123            sjmp    L011012?
078E           2124   L011011?:
078E           2125   ;        main.c:460: retval = BMM150_OVERFLOW_OUTPUT;
078E 90CA90    2126            mov     dptr,#_BMM150_compensate_y_retval_1_116
0791 E4        2127            clr     a
0792 F0        2128            movx    @dptr,a
0793 A3        2129            inc     dptr
0794 7480      2130            mov     a,#0x80
0796 F0        2131            movx    @dptr,a
0797           2132   L011012?:
0797           2133   ;        main.c:463: return retval;
0797 90CA90    2134            mov     dptr,#_BMM150_compensate_y_retval_1_116
079A E0        2135            movx    a,@dptr
079B FA        2136            mov     r2,a
079C A3        2137            inc     dptr
079D E0        2138            movx    a,@dptr
079E 8A82      2139            mov     dpl,r2
07A0 F583      2140            mov     dph,a
07A2 22        2141            ret
07A3           2142   ;------------------------------------------------------------
07A3           2143   ;Allocation info for local variables in function 'BMM150_Read_Data'
07A3           2144   ;------------------------------------------------------------
07A3           2145   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
07A3           2146   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_124'
07A3           2147   ;raw_x_lsb                 Allocated with name '_BMM150_Read_Data_raw_x_lsb_1_125'
07A3           2148   ;raw_x_msb                 Allocated with name '_BMM150_Read_Data_raw_x_msb_1_125'
07A3           2149   ;raw_y_lsb                 Allocated with name '_BMM150_Read_Data_raw_y_lsb_1_125'
07A3           2150   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_125'
07A3           2151   ;raw_rhall_lsb             Allocated with name '_BMM150_Read_Data_raw_rhall_lsb_1_125'
07A3           2152   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_125'
07A3           2153   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_125'
07A3           2154   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_125'
07A3           2155   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_125'
07A3           2156   ;msb_data                  Allocated with name '_BMM150_Read_Data_msb_data_1_125'
07A3           2157   ;------------------------------------------------------------
07A3           2158   ;        main.c:466: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y)
07A3           2159   ;        -----------------------------------------
07A3           2160   ;         function BMM150_Read_Data
07A3           2161   ;        -----------------------------------------
07A3           2162   _BMM150_Read_Data:
07A3 858230    2163            mov     _BMM150_Read_Data_mag_x_1_124,dpl
07A6 858331    2164            mov     (_BMM150_Read_Data_mag_x_1_124 + 1),dph
07A9 85F032    2165            mov     (_BMM150_Read_Data_mag_x_1_124 + 2),b
07AC           2166   ;        main.c:473: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
07AC 758242    2167            mov     dpl,#0x42
07AF 120000    2168            lcall   _SPI_read
07B2 AD82      2169            mov     r5,dpl
07B4           2170   ;        main.c:474: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
07B4 758243    2171            mov     dpl,#0x43
07B7 C005      2172            push    ar5
07B9 120000    2173            lcall   _SPI_read
07BC AE82      2174            mov     r6,dpl
07BE           2175   ;        main.c:475: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
07BE 758244    2176            mov     dpl,#0x44
07C1 C006      2177            push    ar6
07C3 120000    2178            lcall   _SPI_read
07C6 AF82      2179            mov     r7,dpl
07C8           2180   ;        main.c:476: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
07C8 758245    2181            mov     dpl,#0x45
07CB C007      2182            push    ar7
07CD 120000    2183            lcall   _SPI_read
07D0 A882      2184            mov     r0,dpl
07D2           2185   ;        main.c:479: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
07D2 758248    2186            mov     dpl,#0x48
07D5 C000      2187            push    ar0
07D7 120000    2188            lcall   _SPI_read
07DA A982      2189            mov     r1,dpl
07DC           2190   ;        main.c:480: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
07DC 758249    2191            mov     dpl,#0x49
07DF C001      2192            push    ar1
07E1 120000    2193            lcall   _SPI_read
07E4 AA82      2194            mov     r2,dpl
07E6 D001      2195            pop     ar1
07E8 D000      2196            pop     ar0
07EA D007      2197            pop     ar7
07EC D006      2198            pop     ar6
07EE D005      2199            pop     ar5
07F0           2200   ;        main.c:484: raw_x_lsb = ((raw_x_lsb & 0b_1111_1000)) >> 3;
07F0 5305F8    2201            anl     ar5,#0xF8
07F3 ED        2202            mov     a,r5
07F4 C4        2203            swap    a
07F5 23        2204            rl      a
07F6 541F      2205            anl     a,#0x1f
07F8 FD        2206            mov     r5,a
07F9           2207   ;        main.c:485: msb_data = ((int16_t)((int8_t)raw_x_msb)) << 5; 
07F9 EE        2208            mov     a,r6
07FA 33        2209            rlc     a
07FB 95E0      2210            subb    a,acc
07FD C4        2211            swap    a
07FE 23        2212            rl      a
07FF 54E0      2213            anl     a,#0xe0
0801 CE        2214            xch     a,r6
0802 C4        2215            swap    a
0803 23        2216            rl      a
0804 CE        2217            xch     a,r6
0805 6E        2218            xrl     a,r6
0806 CE        2219            xch     a,r6
0807 54E0      2220            anl     a,#0xe0
0809 CE        2221            xch     a,r6
080A 6E        2222            xrl     a,r6
080B FB        2223            mov     r3,a
080C           2224   ;        main.c:486: x_val = (int16_t)(msb_data | raw_x_lsb);
080C 7C00      2225            mov     r4,#0x00
080E 90CB40    2226            mov     dptr,#_BMM150_Read_Data_x_val_1_125
0811 ED        2227            mov     a,r5
0812 4E        2228            orl     a,r6
0813 F0        2229            movx    @dptr,a
0814 EC        2230            mov     a,r4
0815 4B        2231            orl     a,r3
0816 A3        2232            inc     dptr
0817 F0        2233            movx    @dptr,a
0818           2234   ;        main.c:489: raw_y_lsb = ((raw_y_lsb & 0b_1111_1000)) >> 3;
0818 5307F8    2235            anl     ar7,#0xF8
081B EF        2236            mov     a,r7
081C C4        2237            swap    a
081D 23        2238            rl      a
081E 541F      2239            anl     a,#0x1f
0820 FF        2240            mov     r7,a
0821           2241   ;        main.c:490: msb_data = ((int16_t)((int8_t)raw_y_msb)) << 5; 
0821 E8        2242            mov     a,r0
0822 33        2243            rlc     a
0823 95E0      2244            subb    a,acc
0825 C4        2245            swap    a
0826 23        2246            rl      a
0827 54E0      2247            anl     a,#0xe0
0829 C8        2248            xch     a,r0
082A C4        2249            swap    a
082B 23        2250            rl      a
082C C8        2251            xch     a,r0
082D 68        2252            xrl     a,r0
082E C8        2253            xch     a,r0
082F 54E0      2254            anl     a,#0xe0
0831 C8        2255            xch     a,r0
0832 68        2256            xrl     a,r0
0833 FB        2257            mov     r3,a
0834           2258   ;        main.c:491: y_val = (int16_t)(msb_data | raw_y_lsb);
0834 7C00      2259            mov     r4,#0x00
0836 90CB90    2260            mov     dptr,#_BMM150_Read_Data_y_val_1_125
0839 EF        2261            mov     a,r7
083A 48        2262            orl     a,r0
083B F0        2263            movx    @dptr,a
083C EC        2264            mov     a,r4
083D 4B        2265            orl     a,r3
083E A3        2266            inc     dptr
083F F0        2267            movx    @dptr,a
0840           2268   ;        main.c:499: raw_rhall_lsb = ((raw_rhall_lsb & 0xFC) >> 2);
0840 5301FC    2269            anl     ar1,#0xFC
0843 E9        2270            mov     a,r1
0844 03        2271            rr      a
0845 03        2272            rr      a
0846 543F      2273            anl     a,#0x3f
0848 F9        2274            mov     r1,a
0849           2275   ;        main.c:500: rhall_val = (uint16_t)(((uint16_t)raw_rhall_msb << 6) | raw_rhall_lsb);
0849 E4        2276            clr     a
084A 5403      2277            anl     a,#0x03
084C A2E0      2278            mov     c,acc.0
084E CA        2279            xch     a,r2
084F 13        2280            rrc     a
0850 CA        2281            xch     a,r2
0851 13        2282            rrc     a
0852 A2E0      2283            mov     c,acc.0
0854 CA        2284            xch     a,r2
0855 13        2285            rrc     a
0856 CA        2286            xch     a,r2
0857 13        2287            rrc     a
0858 CA        2288            xch     a,r2
0859 FB        2289            mov     r3,a
085A 7C00      2290            mov     r4,#0x00
085C 90CBF0    2291            mov     dptr,#_BMM150_Read_Data_rhall_val_1_125
085F E9        2292            mov     a,r1
0860 4A        2293            orl     a,r2
0861 F0        2294            movx    @dptr,a
0862 EC        2295            mov     a,r4
0863 4B        2296            orl     a,r3
0864 A3        2297            inc     dptr
0865 F0        2298            movx    @dptr,a
0866           2299   ;        main.c:503: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
0866 7530F0    2300            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_125
0869 7531CB    2301            mov     (_BMM150_compensate_x_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_125 >> 8)
086C 753200    2302            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x00
086F 90CB40    2303            mov     dptr,#_BMM150_Read_Data_x_val_1_125
0872 75F000    2304            mov     b,#0x00
0875 120000    2305            lcall   _BMM150_compensate_x
0878 AA82      2306            mov     r2,dpl
087A AB83      2307            mov     r3,dph
087C 853082    2308            mov     dpl,_BMM150_Read_Data_mag_x_1_124
087F 853183    2309            mov     dph,(_BMM150_Read_Data_mag_x_1_124 + 1)
0882 8532F0    2310            mov     b,(_BMM150_Read_Data_mag_x_1_124 + 2)
0885 EA        2311            mov     a,r2
0886 120000    2312            lcall   __gptrput
0889 A3        2313            inc     dptr
088A EB        2314            mov     a,r3
088B 120000    2315            lcall   __gptrput
088E           2316   ;        main.c:504: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
088E AA90      2317            mov     r2,_BMM150_Read_Data_PARM_2
0890 AB91      2318            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
0892 AC92      2319            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
0894 75E0F0    2320            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_125
0897 75E1CB    2321            mov     (_BMM150_compensate_y_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_125 >> 8)
089A 75E200    2322            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x00
089D 90CB90    2323            mov     dptr,#_BMM150_Read_Data_y_val_1_125
08A0 75F000    2324            mov     b,#0x00
08A3 C002      2325            push    ar2
08A5 C003      2326            push    ar3
08A7 C004      2327            push    ar4
08A9 120000    2328            lcall   _BMM150_compensate_y
08AC AD82      2329            mov     r5,dpl
08AE AE83      2330            mov     r6,dph
08B0 D004      2331            pop     ar4
08B2 D003      2332            pop     ar3
08B4 D002      2333            pop     ar2
08B6 8A82      2334            mov     dpl,r2
08B8 8B83      2335            mov     dph,r3
08BA 8CF0      2336            mov     b,r4
08BC ED        2337            mov     a,r5
08BD 120000    2338            lcall   __gptrput
08C0 A3        2339            inc     dptr
08C1 EE        2340            mov     a,r6
08C2 020000    2341            ljmp    __gptrput
08C5           2342   ;------------------------------------------------------------
08C5           2343   ;Allocation info for local variables in function 'UART1_Init'
08C5           2344   ;------------------------------------------------------------
08C5           2345   ;baudrate                  Allocated to registers r2 r3 r4 r5 
08C5           2346   ;------------------------------------------------------------
08C5           2347   ;        main.c:510: void UART1_Init (unsigned long baudrate)
08C5           2348   ;        -----------------------------------------
08C5           2349   ;         function UART1_Init
08C5           2350   ;        -----------------------------------------
08C5           2351   _UART1_Init:
08C5 AA82      2352            mov     r2,dpl
08C7 AB83      2353            mov     r3,dph
08C9 ACF0      2354            mov     r4,b
08CB FD        2355            mov     r5,a
08CC           2356   ;        main.c:512: SFRPAGE = 0x20;
08CC 75A720    2357            mov     _SFRPAGE,#0x20
08CF           2358   ;        main.c:513: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
08CF 75930C    2359            mov     _SMOD1,#0x0C
08D2           2360   ;        main.c:514: SCON1 = 0x10;
08D2 75C810    2361            mov     _SCON1,#0x10
08D5           2362   ;        main.c:515: SBCON1 =0x00;   // disable baud rate generator
08D5 759400    2363            mov     _SBCON1,#0x00
08D8           2364   ;        main.c:516: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
08D8 8A00      2365            mov     __divulong_PARM_2,r2
08DA 8B01      2366            mov     (__divulong_PARM_2 + 1),r3
08DC 8C02      2367            mov     (__divulong_PARM_2 + 2),r4
08DE 8D03      2368            mov     (__divulong_PARM_2 + 3),r5
08E0 90A200    2369            mov     dptr,#0xA200
08E3 75F04A    2370            mov     b,#0x4A
08E6 7404      2371            mov     a,#0x04
08E8 120000    2372            lcall   __divulong
08EB AA82      2373            mov     r2,dpl
08ED AB83      2374            mov     r3,dph
08EF ACF0      2375            mov     r4,b
08F1 FD        2376            mov     r5,a
08F2 750018    2377            mov     __divulong_PARM_2,#0x18
08F5 E4        2378            clr     a
08F6 F501      2379            mov     (__divulong_PARM_2 + 1),a
08F8 F502      2380            mov     (__divulong_PARM_2 + 2),a
08FA F503      2381            mov     (__divulong_PARM_2 + 3),a
08FC 8A82      2382            mov     dpl,r2
08FE 8B83      2383            mov     dph,r3
0900 8CF0      2384            mov     b,r4
0902 ED        2385            mov     a,r5
0903 120000    2386            lcall   __divulong
0906 AA82      2387            mov     r2,dpl
0908 AB83      2388            mov     r3,dph
090A ACF0      2389            mov     r4,b
090C FD        2390            mov     r5,a
090D E4        2391            clr     a
090E C3        2392            clr     c
090F 9A        2393            subb    a,r2
0910 FA        2394            mov     r2,a
0911 E4        2395            clr     a
0912 9B        2396            subb    a,r3
0913 FB        2397            mov     r3,a
0914 7401      2398            mov     a,#0x01
0916 9C        2399            subb    a,r4
0917 E4        2400            clr     a
0918 9D        2401            subb    a,r5
0919 8A95      2402            mov     _SBRL1,r2
091B 8B96      2403            mov     (_SBRL1 >> 8),r3
091D           2404   ;        main.c:517: TI1 = 1; // indicate ready for TX
091D D2C9      2405            setb    _TI1
091F           2406   ;        main.c:518: SBCON1 |= 0x40;   // enable baud rate generator
091F 439440    2407            orl     _SBCON1,#0x40
0922           2408   ;        main.c:519: SFRPAGE = 0x00;
0922 75A700    2409            mov     _SFRPAGE,#0x00
0925 22        2410            ret
0926           2411   ;------------------------------------------------------------
0926           2412   ;Allocation info for local variables in function 'putchar1'
0926           2413   ;------------------------------------------------------------
0926           2414   ;c                         Allocated to registers r2 
0926           2415   ;------------------------------------------------------------
0926           2416   ;        main.c:522: void putchar1 (char c) 
0926           2417   ;        -----------------------------------------
0926           2418   ;         function putchar1
0926           2419   ;        -----------------------------------------
0926           2420   _putchar1:
0926 AA82      2421            mov     r2,dpl
0928           2422   ;        main.c:524: SFRPAGE = 0x20;
0928 75A720    2423            mov     _SFRPAGE,#0x20
092B           2424   ;        main.c:525: while (!TI1);
092B           2425   L014001?:
092B           2426   ;        main.c:526: TI1=0;
092B 10C9B0    2427            jbc     _TI1,L014008?
092E 8000      2428            sjmp    L014001?
0930           2429   L014008?:
0930           2430   ;        main.c:527: SBUF1 = c;
0930 8A92      2431            mov     _SBUF1,r2
0932           2432   ;        main.c:528: SFRPAGE = 0x00;
0932 75A700    2433            mov     _SFRPAGE,#0x00
0935 22        2434            ret
0936           2435   ;------------------------------------------------------------
0936           2436   ;Allocation info for local variables in function 'sendstr1'
0936           2437   ;------------------------------------------------------------
0936           2438   ;s                         Allocated to registers r2 r3 r4 
0936           2439   ;------------------------------------------------------------
0936           2440   ;        main.c:531: void sendstr1 (char * s)
0936           2441   ;        -----------------------------------------
0936           2442   ;         function sendstr1
0936           2443   ;        -----------------------------------------
0936           2444   _sendstr1:
0936 AA82      2445            mov     r2,dpl
0938 AB83      2446            mov     r3,dph
093A ACF0      2447            mov     r4,b
093C           2448   ;        main.c:533: while(*s)
093C           2449   L015001?:
093C 8A82      2450            mov     dpl,r2
093E 8B83      2451            mov     dph,r3
0940 8CF0      2452            mov     b,r4
0942 120000    2453            lcall   __gptrget
0945 FD        2454            mov     r5,a
0946 6000      2455            jz      L015004?
0948           2456   ;        main.c:535: putchar1(*s);
0948 8D82      2457            mov     dpl,r5
094A C002      2458            push    ar2
094C C003      2459            push    ar3
094E C004      2460            push    ar4
0950 120000    2461            lcall   _putchar1
0953 D004      2462            pop     ar4
0955 D003      2463            pop     ar3
0957 D002      2464            pop     ar2
0959           2465   ;        main.c:536: s++;        
0959 0A        2466            inc     r2
095A BA00F0    2467            cjne    r2,#0x00,L015001?
095D 0B        2468            inc     r3
095E 8000      2469            sjmp    L015001?
0960           2470   L015004?:
0960 22        2471            ret
0961           2472   ;------------------------------------------------------------
0961           2473   ;Allocation info for local variables in function 'getchar1'
0961           2474   ;------------------------------------------------------------
0961           2475   ;c                         Allocated with name '_getchar1_c_1_134'
0961           2476   ;------------------------------------------------------------
0961           2477   ;        main.c:540: char getchar1 (void)
0961           2478   ;        -----------------------------------------
0961           2479   ;         function getchar1
0961           2480   ;        -----------------------------------------
0961           2481   _getchar1:
0961           2482   ;        main.c:543: SFRPAGE = 0x20;
0961 75A720    2483            mov     _SFRPAGE,#0x20
0964           2484   ;        main.c:544: while (!RI1);
0964           2485   L016001?:
0964           2486   ;        main.c:545: RI1=0;
0964 10C8B0    2487            jbc     _RI1,L016008?
0967 8000      2488            sjmp    L016001?
0969           2489   L016008?:
0969           2490   ;        main.c:547: SCON1&=0b_0011_1111;
0969 53C83F    2491            anl     _SCON1,#0x3F
096C           2492   ;        main.c:548: c = SBUF1;
096C 859282    2493            mov     dpl,_SBUF1
096F           2494   ;        main.c:549: SFRPAGE = 0x00;
096F 75A700    2495            mov     _SFRPAGE,#0x00
0972           2496   ;        main.c:550: return (c);
0972 22        2497            ret
0973           2498   ;------------------------------------------------------------
0973           2499   ;Allocation info for local variables in function 'getchar1_with_timeout'
0973           2500   ;------------------------------------------------------------
0973           2501   ;c                         Allocated with name '_getchar1_with_timeout_c_1_136'
0973           2502   ;timeout                   Allocated with name '_getchar1_with_timeout_timeout_1_136'
0973           2503   ;------------------------------------------------------------
0973           2504   ;        main.c:553: char getchar1_with_timeout (void)
0973           2505   ;        -----------------------------------------
0973           2506   ;         function getchar1_with_timeout
0973           2507   ;        -----------------------------------------
0973           2508   _getchar1_with_timeout:
0973           2509   ;        main.c:557: SFRPAGE = 0x20;
0973 75A720    2510            mov     _SFRPAGE,#0x20
0976           2511   ;        main.c:559: while (!RI1)
0976 7A00      2512            mov     r2,#0x00
0978 7B00      2513            mov     r3,#0x00
097A           2514   L017003?:
097A 20C830    2515            jb      _RI1,L017005?
097D           2516   ;        main.c:561: SFRPAGE = 0x00;
097D 75A700    2517            mov     _SFRPAGE,#0x00
0980           2518   ;        main.c:562: Timer3us(20);
0980 758214    2519            mov     dpl,#0x14
0983 C002      2520            push    ar2
0985 C003      2521            push    ar3
0987 120000    2522            lcall   _Timer3us
098A D003      2523            pop     ar3
098C D002      2524            pop     ar2
098E           2525   ;        main.c:563: SFRPAGE = 0x20;
098E 75A720    2526            mov     _SFRPAGE,#0x20
0991           2527   ;        main.c:564: timeout++;
0991 0A        2528            inc     r2
0992 BA0070    2529            cjne    r2,#0x00,L017012?
0995 0B        2530            inc     r3
0996           2531   L017012?:
0996           2532   ;        main.c:565: if(timeout==25000)
0996 BAA8F0    2533            cjne    r2,#0xA8,L017003?
0999 BB61F0    2534            cjne    r3,#0x61,L017003?
099C           2535   ;        main.c:567: SFRPAGE = 0x00;
099C 75A700    2536            mov     _SFRPAGE,#0x00
099F           2537   ;        main.c:568: return ('\n'); // Timeout after half second
099F 75820A    2538            mov     dpl,#0x0A
09A2 22        2539            ret
09A3           2540   L017005?:
09A3           2541   ;        main.c:571: RI1=0;
09A3 C2C8      2542            clr     _RI1
09A5           2543   ;        main.c:573: SCON1&=0b_0011_1111;
09A5 53C83F    2544            anl     _SCON1,#0x3F
09A8           2545   ;        main.c:574: c = SBUF1;
09A8 859282    2546            mov     dpl,_SBUF1
09AB           2547   ;        main.c:575: SFRPAGE = 0x00;
09AB 75A700    2548            mov     _SFRPAGE,#0x00
09AE           2549   ;        main.c:576: return (c);
09AE 22        2550            ret
09AF           2551   ;------------------------------------------------------------
09AF           2552   ;Allocation info for local variables in function 'getstr1'
09AF           2553   ;------------------------------------------------------------
09AF           2554   ;n                         Allocated with name '_getstr1_PARM_2'
09AF           2555   ;s                         Allocated to registers r2 r3 r4 
09AF           2556   ;c                         Allocated with name '_getstr1_c_1_140'
09AF           2557   ;cnt                       Allocated with name '_getstr1_cnt_1_140'
09AF           2558   ;------------------------------------------------------------
09AF           2559   ;        main.c:579: void getstr1 (char * s, unsigned char n)
09AF           2560   ;        -----------------------------------------
09AF           2561   ;         function getstr1
09AF           2562   ;        -----------------------------------------
09AF           2563   _getstr1:
09AF AA82      2564            mov     r2,dpl
09B1 AB83      2565            mov     r3,dph
09B3 ACF0      2566            mov     r4,b
09B5           2567   ;        main.c:585: while(1)
09B5 7D00      2568            mov     r5,#0x00
09B7 8A06      2569            mov     ar6,r2
09B9 8B07      2570            mov     ar7,r3
09BB 8C00      2571            mov     ar0,r4
09BD           2572   L018007?:
09BD           2573   ;        main.c:587: c=getchar1_with_timeout();
09BD C002      2574            push    ar2
09BF C003      2575            push    ar3
09C1 C004      2576            push    ar4
09C3 C005      2577            push    ar5
09C5 C006      2578            push    ar6
09C7 C007      2579            push    ar7
09C9 C000      2580            push    ar0
09CB 120000    2581            lcall   _getchar1_with_timeout
09CE A982      2582            mov     r1,dpl
09D0 D000      2583            pop     ar0
09D2 D007      2584            pop     ar7
09D4 D006      2585            pop     ar6
09D6 D005      2586            pop     ar5
09D8 D004      2587            pop     ar4
09DA D003      2588            pop     ar3
09DC D002      2589            pop     ar2
09DE           2590   ;        main.c:588: if(c=='\n')
09DE B90AF0    2591            cjne    r1,#0x0A,L018002?
09E1           2592   ;        main.c:590: *s=0;
09E1 8A82      2593            mov     dpl,r2
09E3 8B83      2594            mov     dph,r3
09E5 8CF0      2595            mov     b,r4
09E7 E4        2596            clr     a
09E8           2597   ;        main.c:591: return;
09E8 020000    2598            ljmp    __gptrput
09EB           2599   L018002?:
09EB           2600   ;        main.c:594: if (cnt<n)
09EB C3        2601            clr     c
09EC ED        2602            mov     a,r5
09ED 9540      2603            subb    a,_getstr1_PARM_2
09EF 5000      2604            jnc     L018004?
09F1           2605   ;        main.c:596: cnt++;
09F1 0D        2606            inc     r5
09F2           2607   ;        main.c:597: *s=c;
09F2 8E82      2608            mov     dpl,r6
09F4 8F83      2609            mov     dph,r7
09F6 88F0      2610            mov     b,r0
09F8 E9        2611            mov     a,r1
09F9 120000    2612            lcall   __gptrput
09FC A3        2613            inc     dptr
09FD AE82      2614            mov     r6,dpl
09FF AF83      2615            mov     r7,dph
0A01           2616   ;        main.c:598: s++;
0A01 8E02      2617            mov     ar2,r6
0A03 8F03      2618            mov     ar3,r7
0A05 8804      2619            mov     ar4,r0
0A07 8000      2620            sjmp    L018007?
0A09           2621   L018004?:
0A09           2622   ;        main.c:602: *s=0;
0A09 8A82      2623            mov     dpl,r2
0A0B 8B83      2624            mov     dph,r3
0A0D 8CF0      2625            mov     b,r4
0A0F E4        2626            clr     a
0A10           2627   ;        main.c:603: return;
0A10 020000    2628            ljmp    __gptrput
0A13           2629   ;------------------------------------------------------------
0A13           2630   ;Allocation info for local variables in function 'RXU1'
0A13           2631   ;------------------------------------------------------------
0A13           2632   ;------------------------------------------------------------
0A13           2633   ;        main.c:609: bit RXU1 (void)
0A13           2634   ;        -----------------------------------------
0A13           2635   ;         function RXU1
0A13           2636   ;        -----------------------------------------
0A13           2637   _RXU1:
0A13           2638   ;        main.c:612: SFRPAGE = 0x20;
0A13 75A720    2639            mov     _SFRPAGE,#0x20
0A16           2640   ;        main.c:613: mybit=RI1;
0A16 A2C8      2641            mov     c,_RI1
0A18           2642   ;        main.c:614: SFRPAGE = 0x00;
0A18 75A700    2643            mov     _SFRPAGE,#0x00
0A1B           2644   ;        main.c:615: return mybit;
0A1B 22        2645            ret
0A1C           2646   ;------------------------------------------------------------
0A1C           2647   ;Allocation info for local variables in function 'waitms_or_RI1'
0A1C           2648   ;------------------------------------------------------------
0A1C           2649   ;ms                        Allocated to registers r2 r3 
0A1C           2650   ;j                         Allocated with name '_waitms_or_RI1_j_1_148'
0A1C           2651   ;k                         Allocated with name '_waitms_or_RI1_k_1_148'
0A1C           2652   ;------------------------------------------------------------
0A1C           2653   ;        main.c:618: void waitms_or_RI1 (unsigned int ms)
0A1C           2654   ;        -----------------------------------------
0A1C           2655   ;         function waitms_or_RI1
0A1C           2656   ;        -----------------------------------------
0A1C           2657   _waitms_or_RI1:
0A1C AA82      2658            mov     r2,dpl
0A1E AB83      2659            mov     r3,dph
0A20           2660   ;        main.c:622: for(j=0; j<ms; j++)
0A20 7C00      2661            mov     r4,#0x00
0A22 7D00      2662            mov     r5,#0x00
0A24           2663   L020007?:
0A24 C3        2664            clr     c
0A25 EC        2665            mov     a,r4
0A26 9A        2666            subb    a,r2
0A27 ED        2667            mov     a,r5
0A28 9B        2668            subb    a,r3
0A29 5000      2669            jnc     L020011?
0A2B           2670   ;        main.c:624: for (k=0; k<4; k++)
0A2B 7E00      2671            mov     r6,#0x00
0A2D           2672   L020003?:
0A2D BE0430    2673            cjne    r6,#0x04,L020019?
0A30           2674   L020019?:
0A30 5000      2675            jnc     L020009?
0A32           2676   ;        main.c:626: if(RXU1()) return;
0A32 C002      2677            push    ar2
0A34 C003      2678            push    ar3
0A36 C004      2679            push    ar4
0A38 C005      2680            push    ar5
0A3A C006      2681            push    ar6
0A3C 120000    2682            lcall   _RXU1
0A3F E4        2683            clr     a
0A40 33        2684            rlc     a
0A41 D006      2685            pop     ar6
0A43 D005      2686            pop     ar5
0A45 D004      2687            pop     ar4
0A47 D003      2688            pop     ar3
0A49 D002      2689            pop     ar2
0A4B 6000      2690            jz      L020002?
0A4D 22        2691            ret
0A4E           2692   L020002?:
0A4E           2693   ;        main.c:627: Timer3us(250);
0A4E 7582FA    2694            mov     dpl,#0xFA
0A51 C002      2695            push    ar2
0A53 C003      2696            push    ar3
0A55 C004      2697            push    ar4
0A57 C005      2698            push    ar5
0A59 C006      2699            push    ar6
0A5B 120000    2700            lcall   _Timer3us
0A5E D006      2701            pop     ar6
0A60 D005      2702            pop     ar5
0A62 D004      2703            pop     ar4
0A64 D003      2704            pop     ar3
0A66 D002      2705            pop     ar2
0A68           2706   ;        main.c:624: for (k=0; k<4; k++)
0A68 0E        2707            inc     r6
0A69 8000      2708            sjmp    L020003?
0A6B           2709   L020009?:
0A6B           2710   ;        main.c:622: for(j=0; j<ms; j++)
0A6B 0C        2711            inc     r4
0A6C BC0070    2712            cjne    r4,#0x00,L020007?
0A6F 0D        2713            inc     r5
0A70 8000      2714            sjmp    L020007?
0A72           2715   L020011?:
0A72 22        2716            ret
0A73           2717   ;------------------------------------------------------------
0A73           2718   ;Allocation info for local variables in function 'SendATCommand'
0A73           2719   ;------------------------------------------------------------
0A73           2720   ;s                         Allocated to registers r2 r3 r4 
0A73           2721   ;------------------------------------------------------------
0A73           2722   ;        main.c:632: void SendATCommand (char * s)
0A73           2723   ;        -----------------------------------------
0A73           2724   ;         function SendATCommand
0A73           2725   ;        -----------------------------------------
0A73           2726   _SendATCommand:
0A73 AA82      2727            mov     r2,dpl
0A75 AB83      2728            mov     r3,dph
0A77 ACF0      2729            mov     r4,b
0A79           2730   ;        main.c:634: printf("Command: %s", s);
0A79 C002      2731            push    ar2
0A7B C003      2732            push    ar3
0A7D C004      2733            push    ar4
0A7F C002      2734            push    ar2
0A81 C003      2735            push    ar3
0A83 C004      2736            push    ar4
0A85 74F0      2737            mov     a,#__str_4
0A87 C0E0      2738            push    acc
0A89 74E3      2739            mov     a,#(__str_4 >> 8)
0A8B C0E0      2740            push    acc
0A8D 7480      2741            mov     a,#0x80
0A8F C0E0      2742            push    acc
0A91 120000    2743            lcall   _printf
0A94 E581      2744            mov     a,sp
0A96 24FA      2745            add     a,#0xfa
0A98 F581      2746            mov     sp,a
0A9A           2747   ;        main.c:635: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0A9A C2A0      2748            clr     _P2_0
0A9C           2749   ;        main.c:636: waitms(5);
0A9C 900005    2750            mov     dptr,#0x0005
0A9F 120000    2751            lcall   _waitms
0AA2 D004      2752            pop     ar4
0AA4 D003      2753            pop     ar3
0AA6 D002      2754            pop     ar2
0AA8           2755   ;        main.c:637: sendstr1(s);
0AA8 8A82      2756            mov     dpl,r2
0AAA 8B83      2757            mov     dph,r3
0AAC 8CF0      2758            mov     b,r4
0AAE 120000    2759            lcall   _sendstr1
0AB1           2760   ;        main.c:638: getstr1(buff, sizeof(buff)-1);
0AB1 754013    2761            mov     _getstr1_PARM_2,#0x13
0AB4 9052B0    2762            mov     dptr,#_buff
0AB7 75F040    2763            mov     b,#0x40
0ABA 120000    2764            lcall   _getstr1
0ABD           2765   ;        main.c:639: waitms(10);
0ABD 90000A    2766            mov     dptr,#0x000A
0AC0 120000    2767            lcall   _waitms
0AC3           2768   ;        main.c:640: P2_0=1; // 'set' pin to 1 is normal operation mode.
0AC3 D2A0      2769            setb    _P2_0
0AC5           2770   ;        main.c:641: printf("Response: %s\r\n", buff);
0AC5 74B0      2771            mov     a,#_buff
0AC7 C0E0      2772            push    acc
0AC9 7452      2773            mov     a,#(_buff >> 8)
0ACB C0E0      2774            push    acc
0ACD 7440      2775            mov     a,#0x40
0ACF C0E0      2776            push    acc
0AD1 7430      2777            mov     a,#__str_5
0AD3 C0E0      2778            push    acc
0AD5 74E4      2779            mov     a,#(__str_5 >> 8)
0AD7 C0E0      2780            push    acc
0AD9 7480      2781            mov     a,#0x80
0ADB C0E0      2782            push    acc
0ADD 120000    2783            lcall   _printf
0AE0 E581      2784            mov     a,sp
0AE2 24FA      2785            add     a,#0xfa
0AE4 F581      2786            mov     sp,a
0AE6 22        2787            ret
0AE7           2788   ;------------------------------------------------------------
0AE7           2789   ;Allocation info for local variables in function 'ReceptionOff'
0AE7           2790   ;------------------------------------------------------------
0AE7           2791   ;------------------------------------------------------------
0AE7           2792   ;        main.c:644: void ReceptionOff (void)
0AE7           2793   ;        -----------------------------------------
0AE7           2794   ;         function ReceptionOff
0AE7           2795   ;        -----------------------------------------
0AE7           2796   _ReceptionOff:
0AE7           2797   ;        main.c:646: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0AE7 C2A0      2798            clr     _P2_0
0AE9           2799   ;        main.c:647: waitms(10);
0AE9 90000A    2800            mov     dptr,#0x000A
0AEC 120000    2801            lcall   _waitms
0AEF           2802   ;        main.c:648: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0AEF 90E470    2803            mov     dptr,#__str_6
0AF2 75F080    2804            mov     b,#0x80
0AF5 120000    2805            lcall   _sendstr1
0AF8           2806   ;        main.c:649: waitms(10);
0AF8 90000A    2807            mov     dptr,#0x000A
0AFB 120000    2808            lcall   _waitms
0AFE           2809   ;        main.c:651: SCON1&=0b_0011_1111;
0AFE 53C83F    2810            anl     _SCON1,#0x3F
0B01           2811   ;        main.c:652: P2_0=1; // 'set' pin to 1 is normal operation mode.
0B01 D2A0      2812            setb    _P2_0
0B03 22        2813            ret
0B04           2814   ;------------------------------------------------------------
0B04           2815   ;Allocation info for local variables in function 'Set_Pin_Output'
0B04           2816   ;------------------------------------------------------------
0B04           2817   ;pin                       Allocated to registers r2 
0B04           2818   ;mask                      Allocated to registers r3 
0B04           2819   ;------------------------------------------------------------
0B04           2820   ;        main.c:655: void Set_Pin_Output (unsigned char pin)
0B04           2821   ;        -----------------------------------------
0B04           2822   ;         function Set_Pin_Output
0B04           2823   ;        -----------------------------------------
0B04           2824   _Set_Pin_Output:
0B04 AA82      2825            mov     r2,dpl
0B06           2826   ;        main.c:659: mask=(1<<(pin&0x7));
0B06 7407      2827            mov     a,#0x07
0B08 5A        2828            anl     a,r2
0B09 F5F0      2829            mov     b,a
0B0B 05F0      2830            inc     b
0B0D 7401      2831            mov     a,#0x01
0B0F 8000      2832            sjmp    L023011?
0B11           2833   L023009?:
0B11 25E0      2834            add     a,acc
0B13           2835   L023011?:
0B13 D5F0F0    2836            djnz    b,L023009?
0B16 FB        2837            mov     r3,a
0B17           2838   ;        main.c:660: switch(pin/0x10)
0B17 EA        2839            mov     a,r2
0B18 C4        2840            swap    a
0B19 540F      2841            anl     a,#0x0f
0B1B FA        2842            mov  r2,a
0B1C 24FC      2843            add     a,#0xff - 0x03
0B1E 4000      2844            jc      L023006?
0B20 EA        2845            mov     a,r2
0B21 2A        2846            add     a,r2
0B22 2A        2847            add     a,r2
0B23 90E570    2848            mov     dptr,#L023013?
0B26 73        2849            jmp     @a+dptr
0B27           2850   L023013?:
0B27 020000    2851            ljmp    L023001?
0B2A 020000    2852            ljmp    L023002?
0B2D 020000    2853            ljmp    L023003?
0B30 020000    2854            ljmp    L023004?
0B33           2855   ;        main.c:662: case 0: P0MDOUT |= mask; break;
0B33           2856   L023001?:
0B33 EB        2857            mov     a,r3
0B34 42A4      2858            orl     _P0MDOUT,a
0B36           2859   ;        main.c:663: case 1: P1MDOUT |= mask; break;
0B36 22        2860            ret
0B37           2861   L023002?:
0B37 EB        2862            mov     a,r3
0B38 42A5      2863            orl     _P1MDOUT,a
0B3A           2864   ;        main.c:664: case 2: P2MDOUT |= mask; break; 
0B3A 22        2865            ret
0B3B           2866   L023003?:
0B3B EB        2867            mov     a,r3
0B3C 42A6      2868            orl     _P2MDOUT,a
0B3E           2869   ;        main.c:665: case 3: P3MDOUT |= mask; break; 
0B3E 22        2870            ret
0B3F           2871   L023004?:
0B3F EB        2872            mov     a,r3
0B40 429C      2873            orl     _P3MDOUT,a
0B42           2874   ;        main.c:666: }   
0B42           2875   L023006?:
0B42 22        2876            ret
0B43           2877   ;------------------------------------------------------------
0B43           2878   ;Allocation info for local variables in function 'Set_Pin_Input'
0B43           2879   ;------------------------------------------------------------
0B43           2880   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_159'
0B43           2881   ;pin                       Allocated to registers r2 
0B43           2882   ;------------------------------------------------------------
0B43           2883   ;        main.c:669: void Set_Pin_Input (unsigned char pin)
0B43           2884   ;        -----------------------------------------
0B43           2885   ;         function Set_Pin_Input
0B43           2886   ;        -----------------------------------------
0B43           2887   _Set_Pin_Input:
0B43 AA82      2888            mov     r2,dpl
0B45           2889   ;        main.c:673: mask=(1<<(pin&0x7));
0B45 7407      2890            mov     a,#0x07
0B47 5A        2891            anl     a,r2
0B48 F5F0      2892            mov     b,a
0B4A 05F0      2893            inc     b
0B4C 7401      2894            mov     a,#0x01
0B4E 8000      2895            sjmp    L024011?
0B50           2896   L024009?:
0B50 25E0      2897            add     a,acc
0B52           2898   L024011?:
0B52 D5F0F0    2899            djnz    b,L024009?
0B55           2900   ;        main.c:674: mask=~mask;
0B55 F4        2901            cpl     a
0B56 FB        2902            mov     r3,a
0B57           2903   ;        main.c:675: switch(pin/0x10)
0B57 EA        2904            mov     a,r2
0B58 C4        2905            swap    a
0B59 540F      2906            anl     a,#0x0f
0B5B FA        2907            mov  r2,a
0B5C 24FC      2908            add     a,#0xff - 0x03
0B5E 4000      2909            jc      L024006?
0B60 EA        2910            mov     a,r2
0B61 2A        2911            add     a,r2
0B62 2A        2912            add     a,r2
0B63 90E770    2913            mov     dptr,#L024013?
0B66 73        2914            jmp     @a+dptr
0B67           2915   L024013?:
0B67 020000    2916            ljmp    L024001?
0B6A 020000    2917            ljmp    L024002?
0B6D 020000    2918            ljmp    L024003?
0B70 020000    2919            ljmp    L024004?
0B73           2920   ;        main.c:677: case 0: P0MDOUT &= mask; break;
0B73           2921   L024001?:
0B73 EB        2922            mov     a,r3
0B74 52A4      2923            anl     _P0MDOUT,a
0B76           2924   ;        main.c:678: case 1: P1MDOUT &= mask; break;
0B76 22        2925            ret
0B77           2926   L024002?:
0B77 EB        2927            mov     a,r3
0B78 52A5      2928            anl     _P1MDOUT,a
0B7A           2929   ;        main.c:679: case 2: P2MDOUT &= mask; break; 
0B7A 22        2930            ret
0B7B           2931   L024003?:
0B7B EB        2932            mov     a,r3
0B7C 52A6      2933            anl     _P2MDOUT,a
0B7E           2934   ;        main.c:680: case 3: P3MDOUT &= mask; break; 
0B7E 22        2935            ret
0B7F           2936   L024004?:
0B7F EB        2937            mov     a,r3
0B80 529C      2938            anl     _P3MDOUT,a
0B82           2939   ;        main.c:681: }   
0B82           2940   L024006?:
0B82 22        2941            ret
0B83           2942   ;------------------------------------------------------------
0B83           2943   ;Allocation info for local variables in function 'InitADC'
0B83           2944   ;------------------------------------------------------------
0B83           2945   ;------------------------------------------------------------
0B83           2946   ;        main.c:684: void InitADC (void)
0B83           2947   ;        -----------------------------------------
0B83           2948   ;         function InitADC
0B83           2949   ;        -----------------------------------------
0B83           2950   _InitADC:
0B83           2951   ;        main.c:686: SFRPAGE = 0x00;
0B83 75A700    2952            mov     _SFRPAGE,#0x00
0B86           2953   ;        main.c:687: ADEN=0; // Disable ADC
0B86 C2EF      2954            clr     _ADEN
0B88           2955   ;        main.c:692: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0B88 75B280    2956            mov     _ADC0CN1,#0x80
0B8B           2957   ;        main.c:696: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0B8B 75BC20    2958            mov     _ADC0CF0,#0x20
0B8E           2959   ;        main.c:700: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
0B8E 75B91E    2960            mov     _ADC0CF1,#0x1E
0B91           2961   ;        main.c:709: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0B91 75E800    2962            mov     _ADC0CN0,#0x00
0B94           2963   ;        main.c:714: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0B94 75DF3F    2964            mov     _ADC0CF2,#0x3F
0B97           2965   ;        main.c:718: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0B97 75B300    2966            mov     _ADC0CN2,#0x00
0B9A           2967   ;        main.c:720: ADEN=1; // Enable ADC
0B9A D2EF      2968            setb    _ADEN
0B9C 22        2969            ret
0B9D           2970   ;------------------------------------------------------------
0B9D           2971   ;Allocation info for local variables in function 'InitPinADC'
0B9D           2972   ;------------------------------------------------------------
0B9D           2973   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
0B9D           2974   ;portno                    Allocated to registers r2 
0B9D           2975   ;mask                      Allocated to registers r3 
0B9D           2976   ;------------------------------------------------------------
0B9D           2977   ;        main.c:723: void InitPinADC (unsigned char portno, unsigned char pin_num)
0B9D           2978   ;        -----------------------------------------
0B9D           2979   ;         function InitPinADC
0B9D           2980   ;        -----------------------------------------
0B9D           2981   _InitPinADC:
0B9D AA82      2982            mov     r2,dpl
0B9F           2983   ;        main.c:727: mask=1<<pin_num;
0B9F 85E0F0    2984            mov     b,_InitPinADC_PARM_2
0BA2 05F0      2985            inc     b
0BA4 7401      2986            mov     a,#0x01
0BA6 8000      2987            sjmp    L026013?
0BA8           2988   L026011?:
0BA8 25E0      2989            add     a,acc
0BAA           2990   L026013?:
0BAA D5F0F0    2991            djnz    b,L026011?
0BAD FB        2992            mov     r3,a
0BAE           2993   ;        main.c:729: SFRPAGE = 0x20;
0BAE 75A720    2994            mov     _SFRPAGE,#0x20
0BB1           2995   ;        main.c:730: switch (portno)
0BB1 BA0030    2996            cjne    r2,#0x00,L026014?
0BB4 8000      2997            sjmp    L026001?
0BB6           2998   L026014?:
0BB6 BA01B0    2999            cjne    r2,#0x01,L026015?
0BB9 8000      3000            sjmp    L026002?
0BBB           3001   L026015?:
0BBB           3002   ;        main.c:732: case 0:
0BBB BA0230    3003            cjne    r2,#0x02,L026005?
0BBE 8000      3004            sjmp    L026003?
0BC0           3005   L026001?:
0BC0           3006   ;        main.c:733: P0MDIN &= (~mask); // Set pin as analog input
0BC0 EB        3007            mov     a,r3
0BC1 F4        3008            cpl     a
0BC2 FA        3009            mov     r2,a
0BC3 52F1      3010            anl     _P0MDIN,a
0BC5           3011   ;        main.c:734: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0BC5 EB        3012            mov     a,r3
0BC6 42D4      3013            orl     _P0SKIP,a
0BC8           3014   ;        main.c:735: break;
0BC8           3015   ;        main.c:736: case 1:
0BC8 8000      3016            sjmp    L026005?
0BCA           3017   L026002?:
0BCA           3018   ;        main.c:737: P1MDIN &= (~mask); // Set pin as analog input
0BCA EB        3019            mov     a,r3
0BCB F4        3020            cpl     a
0BCC FA        3021            mov     r2,a
0BCD 52F2      3022            anl     _P1MDIN,a
0BCF           3023   ;        main.c:738: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0BCF EB        3024            mov     a,r3
0BD0 42D5      3025            orl     _P1SKIP,a
0BD2           3026   ;        main.c:739: break;
0BD2           3027   ;        main.c:740: case 2:
0BD2 8000      3028            sjmp    L026005?
0BD4           3029   L026003?:
0BD4           3030   ;        main.c:741: P2MDIN &= (~mask); // Set pin as analog input
0BD4 EB        3031            mov     a,r3
0BD5 F4        3032            cpl     a
0BD6 FA        3033            mov     r2,a
0BD7 52F3      3034            anl     _P2MDIN,a
0BD9           3035   ;        main.c:742: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0BD9 EB        3036            mov     a,r3
0BDA 42CC      3037            orl     _P2SKIP,a
0BDC           3038   ;        main.c:746: }
0BDC           3039   L026005?:
0BDC           3040   ;        main.c:747: SFRPAGE = 0x00;
0BDC 75A700    3041            mov     _SFRPAGE,#0x00
0BDF 22        3042            ret
0BE0           3043   ;------------------------------------------------------------
0BE0           3044   ;Allocation info for local variables in function 'ADC_at_Pin'
0BE0           3045   ;------------------------------------------------------------
0BE0           3046   ;pin                       Allocated to registers 
0BE0           3047   ;------------------------------------------------------------
0BE0           3048   ;        main.c:750: unsigned int ADC_at_Pin(unsigned char pin)
0BE0           3049   ;        -----------------------------------------
0BE0           3050   ;         function ADC_at_Pin
0BE0           3051   ;        -----------------------------------------
0BE0           3052   _ADC_at_Pin:
0BE0 8582BB    3053            mov     _ADC0MX,dpl
0BE3           3054   ;        main.c:753: ADINT = 0;
0BE3 C2ED      3055            clr     _ADINT
0BE5           3056   ;        main.c:754: ADBUSY = 1;     // Convert voltage at the pin
0BE5 D2EC      3057            setb    _ADBUSY
0BE7           3058   ;        main.c:755: while (!ADINT); // Wait for conversion to complete
0BE7           3059   L027001?:
0BE7 30EDB0    3060            jnb     _ADINT,L027001?
0BEA           3061   ;        main.c:756: return (ADC0);
0BEA 85BD82    3062            mov     dpl,_ADC0
0BED 85BE83    3063            mov     dph,(_ADC0 >> 8)
0BF0 22        3064            ret
0BF1           3065   ;------------------------------------------------------------
0BF1           3066   ;Allocation info for local variables in function 'Timer5_ISR'
0BF1           3067   ;------------------------------------------------------------
0BF1           3068   ;------------------------------------------------------------
0BF1           3069   ;        main.c:759: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0BF1           3070   ;        -----------------------------------------
0BF1           3071   ;         function Timer5_ISR
0BF1           3072   ;        -----------------------------------------
0BF1           3073   _Timer5_ISR:
0BF1 C080      3074            push    bits
0BF3 C0E0      3075            push    acc
0BF5 C0F0      3076            push    b
0BF7 C082      3077            push    dpl
0BF9 C083      3078            push    dph
0BFB C002      3079            push    (0+2)
0BFD C003      3080            push    (0+3)
0BFF C004      3081            push    (0+4)
0C01 C005      3082            push    (0+5)
0C03 C006      3083            push    (0+6)
0C05 C007      3084            push    (0+7)
0C07 C000      3085            push    (0+0)
0C09 C001      3086            push    (0+1)
0C0B C0D0      3087            push    psw
0C0D 75D000    3088            mov     psw,#0x00
0C10           3089   ;        main.c:761: SFRPAGE=0x10;
0C10 75A710    3090            mov     _SFRPAGE,#0x10
0C13           3091   ;        main.c:762: TF5H = 0; // Clear Timer5 interrupt flag
0C13 C2C7      3092            clr     _TF5H
0C15           3093   ;        main.c:763: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0C15 75D2C4    3094            mov     _TMR5RL,#0xC4
0C18 75D3FF    3095            mov     (_TMR5RL >> 8),#0xFF
0C1B           3096   ;        main.c:765: fre_mea_count++;
0C1B 904BF0    3097            mov     dptr,#_fre_mea_count
0C1E E0        3098            movx    a,@dptr
0C1F 2401      3099            add     a,#0x01
0C21 F0        3100            movx    @dptr,a
0C22 A3        3101            inc     dptr
0C23 E0        3102            movx    a,@dptr
0C24 3400      3103            addc    a,#0x00
0C26 F0        3104            movx    @dptr,a
0C27           3105   ;        main.c:766: if(fre_mea_count == 1000){
0C27 904BF0    3106            mov     dptr,#_fre_mea_count
0C2A E0        3107            movx    a,@dptr
0C2B FA        3108            mov     r2,a
0C2C A3        3109            inc     dptr
0C2D E0        3110            movx    a,@dptr
0C2E FB        3111            mov     r3,a
0C2F BAE830    3112            cjne    r2,#0xE8,L028002?
0C32 BB0330    3113            cjne    r3,#0x03,L028002?
0C35           3114   ;        main.c:767: fre_mea_count = 0;
0C35 904BF0    3115            mov     dptr,#_fre_mea_count
0C38 E4        3116            clr     a
0C39 F0        3117            movx    @dptr,a
0C3A A3        3118            inc     dptr
0C3B F0        3119            movx    @dptr,a
0C3C           3120   ;        main.c:768: freq100 = get_freq();
0C3C 120000    3121            lcall   _get_freq
0C3F AA82      3122            mov     r2,dpl
0C41 AB83      3123            mov     r3,dph
0C43 905270    3124            mov     dptr,#_freq100
0C46 EA        3125            mov     a,r2
0C47 F0        3126            movx    @dptr,a
0C48 A3        3127            inc     dptr
0C49 EB        3128            mov     a,r3
0C4A F0        3129            movx    @dptr,a
0C4B EB        3130            mov     a,r3
0C4C 33        3131            rlc     a
0C4D 95E0      3132            subb    a,acc
0C4F A3        3133            inc     dptr
0C50 F0        3134            movx    @dptr,a
0C51 A3        3135            inc     dptr
0C52 F0        3136            movx    @dptr,a
0C53           3137   L028002?:
0C53           3138   ;        main.c:772: pwm_counter++; 
0C53 904EF0    3139            mov     dptr,#_pwm_counter
0C56 E0        3140            movx    a,@dptr
0C57 2401      3141            add     a,#0x01
0C59 F0        3142            movx    @dptr,a
0C5A A3        3143            inc     dptr
0C5B E0        3144            movx    a,@dptr
0C5C 3400      3145            addc    a,#0x00
0C5E F0        3146            movx    @dptr,a
0C5F           3147   ;        main.c:773: if (pwm_counter == 100){
0C5F 904EF0    3148            mov     dptr,#_pwm_counter
0C62 E0        3149            movx    a,@dptr
0C63 FA        3150            mov     r2,a
0C64 A3        3151            inc     dptr
0C65 E0        3152            movx    a,@dptr
0C66 FB        3153            mov     r3,a
0C67 BA64B0    3154            cjne    r2,#0x64,L028004?
0C6A BB00B0    3155            cjne    r3,#0x00,L028004?
0C6D           3156   ;        main.c:774: pwm_counter = 0; 
0C6D 904EF0    3157            mov     dptr,#_pwm_counter
0C70 E4        3158            clr     a
0C71 F0        3159            movx    @dptr,a
0C72 A3        3160            inc     dptr
0C73 F0        3161            movx    @dptr,a
0C74           3162   L028004?:
0C74           3163   ;        main.c:777: if (pwm_right > pwm_counter){
0C74 904E30    3164            mov     dptr,#_pwm_right
0C77 E0        3165            movx    a,@dptr
0C78 FA        3166            mov     r2,a
0C79 904EF0    3167            mov     dptr,#_pwm_counter
0C7C E0        3168            movx    a,@dptr
0C7D FB        3169            mov     r3,a
0C7E A3        3170            inc     dptr
0C7F E0        3171            movx    a,@dptr
0C80 FC        3172            mov     r4,a
0C81 7D00      3173            mov     r5,#0x00
0C83 C3        3174            clr     c
0C84 EB        3175            mov     a,r3
0C85 9A        3176            subb    a,r2
0C86 EC        3177            mov     a,r4
0C87 9D        3178            subb    a,r5
0C88 5000      3179            jnc     L028009?
0C8A           3180   ;        main.c:778: if(L_motor_dir){
0C8A 904DF0    3181            mov     dptr,#_L_motor_dir
0C8D E0        3182            movx    a,@dptr
0C8E FA        3183            mov     r2,a
0C8F 6000      3184            jz      L028006?
0C91           3185   ;        main.c:779: L_bridge_1 = 1; 
0C91 D2A1      3186            setb    _P2_1
0C93           3187   ;        main.c:780: L_bridge_2 = 0; 
0C93 C2A2      3188            clr     _P2_2
0C95 8000      3189            sjmp    L028010?
0C97           3190   L028006?:
0C97           3191   ;        main.c:783: L_bridge_1 = 0; 
0C97 C2A1      3192            clr     _P2_1
0C99           3193   ;        main.c:784: L_bridge_2 = 1; 
0C99 D2A2      3194            setb    _P2_2
0C9B 8000      3195            sjmp    L028010?
0C9D           3196   L028009?:
0C9D           3197   ;        main.c:788: L_bridge_1 = 0; 
0C9D C2A1      3198            clr     _P2_1
0C9F           3199   ;        main.c:789: L_bridge_2 = 0; 
0C9F C2A2      3200            clr     _P2_2
0CA1           3201   L028010?:
0CA1           3202   ;        main.c:791: if (pwm_left > pwm_counter){
0CA1 904E70    3203            mov     dptr,#_pwm_left
0CA4 E0        3204            movx    a,@dptr
0CA5 FA        3205            mov     r2,a
0CA6 7D00      3206            mov     r5,#0x00
0CA8 C3        3207            clr     c
0CA9 EB        3208            mov     a,r3
0CAA 9A        3209            subb    a,r2
0CAB EC        3210            mov     a,r4
0CAC 9D        3211            subb    a,r5
0CAD 5000      3212            jnc     L028015?
0CAF           3213   ;        main.c:792: if (R_motor_dir){
0CAF 904DB0    3214            mov     dptr,#_R_motor_dir
0CB2 E0        3215            movx    a,@dptr
0CB3 FA        3216            mov     r2,a
0CB4 6000      3217            jz      L028012?
0CB6           3218   ;        main.c:793: R_bridge_1 = 1; 
0CB6 D2A4      3219            setb    _P2_4
0CB8           3220   ;        main.c:794: R_bridge_2 = 0;
0CB8 C2A3      3221            clr     _P2_3
0CBA 8000      3222            sjmp    L028016?
0CBC           3223   L028012?:
0CBC           3224   ;        main.c:797: R_bridge_1 = 0; 
0CBC C2A4      3225            clr     _P2_4
0CBE           3226   ;        main.c:798: R_bridge_2 = 1;
0CBE D2A3      3227            setb    _P2_3
0CC0 8000      3228            sjmp    L028016?
0CC2           3229   L028015?:
0CC2           3230   ;        main.c:802: R_bridge_1 = 0; 
0CC2 C2A4      3231            clr     _P2_4
0CC4           3232   ;        main.c:803: R_bridge_2 = 0; 
0CC4 C2A3      3233            clr     _P2_3
0CC6           3234   L028016?:
0CC6           3235   ;        main.c:806: servo_counter++;
0CC6 904EB0    3236            mov     dptr,#_servo_counter
0CC9 E0        3237            movx    a,@dptr
0CCA 2401      3238            add     a,#0x01
0CCC F0        3239            movx    @dptr,a
0CCD A3        3240            inc     dptr
0CCE E0        3241            movx    a,@dptr
0CCF 3400      3242            addc    a,#0x00
0CD1 F0        3243            movx    @dptr,a
0CD2           3244   ;        main.c:807: if(servo_counter==2000)
0CD2 904EB0    3245            mov     dptr,#_servo_counter
0CD5 E0        3246            movx    a,@dptr
0CD6 FA        3247            mov     r2,a
0CD7 A3        3248            inc     dptr
0CD8 E0        3249            movx    a,@dptr
0CD9 FB        3250            mov     r3,a
0CDA BAD070    3251            cjne    r2,#0xD0,L028018?
0CDD BB0770    3252            cjne    r3,#0x07,L028018?
0CE0           3253   ;        main.c:809: servo_counter=0;
0CE0 904EB0    3254            mov     dptr,#_servo_counter
0CE3 E4        3255            clr     a
0CE4 F0        3256            movx    @dptr,a
0CE5 A3        3257            inc     dptr
0CE6 F0        3258            movx    @dptr,a
0CE7           3259   ;        main.c:810: Servo_arm=1;
0CE7 D296      3260            setb    _P1_6
0CE9           3261   ;        main.c:811: Servo_base=1;
0CE9 D297      3262            setb    _P1_7
0CEB           3263   L028018?:
0CEB           3264   ;        main.c:813: if(servo_arm==servo_counter)
0CEB 904D30    3265            mov     dptr,#_servo_arm
0CEE E0        3266            movx    a,@dptr
0CEF FA        3267            mov     r2,a
0CF0 904EB0    3268            mov     dptr,#_servo_counter
0CF3 E0        3269            movx    a,@dptr
0CF4 FB        3270            mov     r3,a
0CF5 A3        3271            inc     dptr
0CF6 E0        3272            movx    a,@dptr
0CF7 FC        3273            mov     r4,a
0CF8 7D00      3274            mov     r5,#0x00
0CFA EA        3275            mov     a,r2
0CFB B503B0    3276            cjne    a,ar3,L028020?
0CFE ED        3277            mov     a,r5
0CFF B504B0    3278            cjne    a,ar4,L028020?
0D02           3279   ;        main.c:815: Servo_arm=0;
0D02 C296      3280            clr     _P1_6
0D04           3281   L028020?:
0D04           3282   ;        main.c:817: if(servo_base==servo_counter)
0D04 904D70    3283            mov     dptr,#_servo_base
0D07 E0        3284            movx    a,@dptr
0D08 FA        3285            mov     r2,a
0D09 7D00      3286            mov     r5,#0x00
0D0B B503F0    3287            cjne    a,ar3,L028023?
0D0E ED        3288            mov     a,r5
0D0F B504F0    3289            cjne    a,ar4,L028023?
0D12           3290   ;        main.c:819: Servo_base=0;
0D12 C297      3291            clr     _P1_7
0D14           3292   L028023?:
0D14 D0D0      3293            pop     psw
0D16 D001      3294            pop     (0+1)
0D18 D000      3295            pop     (0+0)
0D1A D007      3296            pop     (0+7)
0D1C D006      3297            pop     (0+6)
0D1E D005      3298            pop     (0+5)
0D20 D004      3299            pop     (0+4)
0D22 D003      3300            pop     (0+3)
0D24 D002      3301            pop     (0+2)
0D26 D083      3302            pop     dph
0D28 D082      3303            pop     dpl
0D2A D0F0      3304            pop     b
0D2C D0E0      3305            pop     acc
0D2E D080      3306            pop     bits
0D30 32        3307            reti
0D31           3308   ;------------------------------------------------------------
0D31           3309   ;Allocation info for local variables in function 'servo_pick'
0D31           3310   ;------------------------------------------------------------
0D31           3311   ;i                         Allocated with name '_servo_pick_i_1_183'
0D31           3312   ;------------------------------------------------------------
0D31           3313   ;        main.c:823: void servo_pick(){
0D31           3314   ;        -----------------------------------------
0D31           3315   ;         function servo_pick
0D31           3316   ;        -----------------------------------------
0D31           3317   _servo_pick:
0D31           3318   ;        main.c:825: servo_arm = 1;
0D31 904D30    3319            mov     dptr,#_servo_arm
0D34 7401      3320            mov     a,#0x01
0D36 F0        3321            movx    @dptr,a
0D37           3322   ;        main.c:827: servo_base = 250;
0D37 904D70    3323            mov     dptr,#_servo_base
0D3A 74FA      3324            mov     a,#0xFA
0D3C F0        3325            movx    @dptr,a
0D3D           3326   ;        main.c:828: waitms(200);
0D3D 9000C8    3327            mov     dptr,#0x00C8
0D40 120000    3328            lcall   _waitms
0D43           3329   ;        main.c:829: servo_arm = 250;
0D43 904D30    3330            mov     dptr,#_servo_arm
0D46 74FA      3331            mov     a,#0xFA
0D48 F0        3332            movx    @dptr,a
0D49           3333   ;        main.c:830: Magnet = 1;
0D49 D295      3334            setb    _P1_5
0D4B           3335   ;        main.c:831: waitms(200);
0D4B 9000C8    3336            mov     dptr,#0x00C8
0D4E 120000    3337            lcall   _waitms
0D51           3338   ;        main.c:832: for(i = 0; i<89; i++){
0D51 7A00      3339            mov     r2,#0x00
0D53 7B00      3340            mov     r3,#0x00
0D55           3341   L029001?:
0D55 C3        3342            clr     c
0D56 EA        3343            mov     a,r2
0D57 9459      3344            subb    a,#0x59
0D59 EB        3345            mov     a,r3
0D5A 6480      3346            xrl     a,#0x80
0D5C 9480      3347            subb    a,#0x80
0D5E 5000      3348            jnc     L029004?
0D60           3349   ;        main.c:833: waitms(5);
0D60 900005    3350            mov     dptr,#0x0005
0D63 C002      3351            push    ar2
0D65 C003      3352            push    ar3
0D67 120000    3353            lcall   _waitms
0D6A D003      3354            pop     ar3
0D6C D002      3355            pop     ar2
0D6E           3356   ;        main.c:834: servo_base--;
0D6E 904D70    3357            mov     dptr,#_servo_base
0D71 E0        3358            movx    a,@dptr
0D72 14        3359            dec     a
0D73 904D70    3360            mov     dptr,#_servo_base
0D76 F0        3361            movx    @dptr,a
0D77           3362   ;        main.c:832: for(i = 0; i<89; i++){
0D77 0A        3363            inc     r2
0D78 BA0030    3364            cjne    r2,#0x00,L029001?
0D7B 0B        3365            inc     r3
0D7C 8000      3366            sjmp    L029001?
0D7E           3367   L029004?:
0D7E           3368   ;        main.c:836: waitms(200);
0D7E 9000C8    3369            mov     dptr,#0x00C8
0D81 120000    3370            lcall   _waitms
0D84           3371   ;        main.c:837: for(i = 0; i<159; i++){
0D84 7A00      3372            mov     r2,#0x00
0D86 7B00      3373            mov     r3,#0x00
0D88           3374   L029005?:
0D88 C3        3375            clr     c
0D89 EA        3376            mov     a,r2
0D8A 949F      3377            subb    a,#0x9F
0D8C EB        3378            mov     a,r3
0D8D 6480      3379            xrl     a,#0x80
0D8F 9480      3380            subb    a,#0x80
0D91 5000      3381            jnc     L029008?
0D93           3382   ;        main.c:838: waitms(5);
0D93 900005    3383            mov     dptr,#0x0005
0D96 C002      3384            push    ar2
0D98 C003      3385            push    ar3
0D9A 120000    3386            lcall   _waitms
0D9D D003      3387            pop     ar3
0D9F D002      3388            pop     ar2
0DA1           3389   ;        main.c:839: servo_arm--;
0DA1 904D30    3390            mov     dptr,#_servo_arm
0DA4 E0        3391            movx    a,@dptr
0DA5 14        3392            dec     a
0DA6 904D30    3393            mov     dptr,#_servo_arm
0DA9 F0        3394            movx    @dptr,a
0DAA           3395   ;        main.c:837: for(i = 0; i<159; i++){
0DAA 0A        3396            inc     r2
0DAB BA00B0    3397            cjne    r2,#0x00,L029005?
0DAE 0B        3398            inc     r3
0DAF 8000      3399            sjmp    L029005?
0DB1           3400   L029008?:
0DB1           3401   ;        main.c:841: waitms(200);
0DB1 9000C8    3402            mov     dptr,#0x00C8
0DB4 120000    3403            lcall   _waitms
0DB7           3404   ;        main.c:842: for(i = 0; i<65; i++){
0DB7 7A00      3405            mov     r2,#0x00
0DB9 7B00      3406            mov     r3,#0x00
0DBB           3407   L029009?:
0DBB C3        3408            clr     c
0DBC EA        3409            mov     a,r2
0DBD 9441      3410            subb    a,#0x41
0DBF EB        3411            mov     a,r3
0DC0 6480      3412            xrl     a,#0x80
0DC2 9480      3413            subb    a,#0x80
0DC4 5000      3414            jnc     L029012?
0DC6           3415   ;        main.c:843: waitms(5);
0DC6 900005    3416            mov     dptr,#0x0005
0DC9 C002      3417            push    ar2
0DCB C003      3418            push    ar3
0DCD 120000    3419            lcall   _waitms
0DD0 D003      3420            pop     ar3
0DD2 D002      3421            pop     ar2
0DD4           3422   ;        main.c:844: servo_base--;
0DD4 904D70    3423            mov     dptr,#_servo_base
0DD7 E0        3424            movx    a,@dptr
0DD8 14        3425            dec     a
0DD9 904D70    3426            mov     dptr,#_servo_base
0DDC F0        3427            movx    @dptr,a
0DDD           3428   ;        main.c:842: for(i = 0; i<65; i++){
0DDD 0A        3429            inc     r2
0DDE BA0030    3430            cjne    r2,#0x00,L029009?
0DE1 0B        3431            inc     r3
0DE2 8000      3432            sjmp    L029009?
0DE4           3433   L029012?:
0DE4           3434   ;        main.c:846: waitms(500);
0DE4 9001F4    3435            mov     dptr,#0x01F4
0DE7 120000    3436            lcall   _waitms
0DEA           3437   ;        main.c:847: Magnet = 0;
0DEA C295      3438            clr     _P1_5
0DEC           3439   ;        main.c:848: waitms(200);
0DEC 9000C8    3440            mov     dptr,#0x00C8
0DEF 120000    3441            lcall   _waitms
0DF2           3442   ;        main.c:849: servo_arm=1;
0DF2 904D30    3443            mov     dptr,#_servo_arm
0DF5 7401      3444            mov     a,#0x01
0DF7 F0        3445            movx    @dptr,a
0DF8           3446   ;        main.c:850: servo_base=1;
0DF8 904D70    3447            mov     dptr,#_servo_base
0DFB 7401      3448            mov     a,#0x01
0DFD F0        3449            movx    @dptr,a
0DFE           3450   ;        main.c:851: return;
0DFE 22        3451            ret
0DFF           3452   ;------------------------------------------------------------
0DFF           3453   ;Allocation info for local variables in function 'check_bound'
0DFF           3454   ;------------------------------------------------------------
0DFF           3455   ;d2                        Allocated with name '_check_bound_PARM_2'
0DFF           3456   ;d1                        Allocated to registers r2 r3 
0DFF           3457   ;------------------------------------------------------------
0DFF           3458   ;        main.c:854: int check_bound(int d1, int d2){
0DFF           3459   ;        -----------------------------------------
0DFF           3460   ;         function check_bound
0DFF           3461   ;        -----------------------------------------
0DFF           3462   _check_bound:
0DFF AA82      3463            mov     r2,dpl
0E01 AB83      3464            mov     r3,dph
0E03           3465   ;        main.c:855: if(d1>5000||d2>12000)       return 1;
0E03 C3        3466            clr     c
0E04 7488      3467            mov     a,#0x88
0E06 9A        3468            subb    a,r2
0E07 7493      3469            mov     a,#(0x13 ^ 0x80)
0E09 8BF0      3470            mov     b,r3
0E0B 63F080    3471            xrl     b,#0x80
0E0E 95F0      3472            subb    a,b
0E10 4000      3473            jc      L030001?
0E12 74E0      3474            mov     a,#0xE0
0E14 9590      3475            subb    a,_check_bound_PARM_2
0E16 74AE      3476            mov     a,#(0x2E ^ 0x80)
0E18 8591F0    3477            mov     b,(_check_bound_PARM_2 + 1)
0E1B 63F080    3478            xrl     b,#0x80
0E1E 95F0      3479            subb    a,b
0E20 5000      3480            jnc     L030002?
0E22           3481   L030001?:
0E22 900001    3482            mov     dptr,#0x0001
0E25           3483   ;        main.c:856: else return 0;
0E25 22        3484            ret
0E26           3485   L030002?:
0E26 900000    3486            mov     dptr,#0x0000
0E29 22        3487            ret
0E2A           3488   ;------------------------------------------------------------
0E2A           3489   ;Allocation info for local variables in function 'Init_all'
0E2A           3490   ;------------------------------------------------------------
0E2A           3491   ;------------------------------------------------------------
0E2A           3492   ;        main.c:859: void Init_all(){
0E2A           3493   ;        -----------------------------------------
0E2A           3494   ;         function Init_all
0E2A           3495   ;        -----------------------------------------
0E2A           3496   _Init_all:
0E2A           3497   ;        main.c:861: Set_Pin_Output(0x24);
0E2A 758224    3498            mov     dpl,#0x24
0E2D 120000    3499            lcall   _Set_Pin_Output
0E30           3500   ;        main.c:862: Set_Pin_Output(0x23);
0E30 758223    3501            mov     dpl,#0x23
0E33 120000    3502            lcall   _Set_Pin_Output
0E36           3503   ;        main.c:863: Set_Pin_Output(0x22);
0E36 758222    3504            mov     dpl,#0x22
0E39 120000    3505            lcall   _Set_Pin_Output
0E3C           3506   ;        main.c:864: Set_Pin_Output(0x21);
0E3C 758221    3507            mov     dpl,#0x21
0E3F 120000    3508            lcall   _Set_Pin_Output
0E42           3509   ;        main.c:865: Set_Pin_Output(0x17);
0E42 758217    3510            mov     dpl,#0x17
0E45 120000    3511            lcall   _Set_Pin_Output
0E48           3512   ;        main.c:866: Set_Pin_Output(0x16);
0E48 758216    3513            mov     dpl,#0x16
0E4B 120000    3514            lcall   _Set_Pin_Output
0E4E           3515   ;        main.c:867: Set_Pin_Output(0x15);
0E4E 758215    3516            mov     dpl,#0x15
0E51 120000    3517            lcall   _Set_Pin_Output
0E54           3518   ;        main.c:868: Set_Pin_Output(0x10); // CS
0E54 758210    3519            mov     dpl,#0x10
0E57 120000    3520            lcall   _Set_Pin_Output
0E5A           3521   ;        main.c:869: Set_Pin_Input(0x30);
0E5A 758230    3522            mov     dpl,#0x30
0E5D 120000    3523            lcall   _Set_Pin_Input
0E60           3524   ;        main.c:872: InitPinADC(1,3);
0E60 75E003    3525            mov     _InitPinADC_PARM_2,#0x03
0E63 758201    3526            mov     dpl,#0x01
0E66 120000    3527            lcall   _InitPinADC
0E69           3528   ;        main.c:873: InitPinADC(1,4);
0E69 75E004    3529            mov     _InitPinADC_PARM_2,#0x04
0E6C 758201    3530            mov     dpl,#0x01
0E6F 120000    3531            lcall   _InitPinADC
0E72           3532   ;        main.c:874: InitADC();
0E72 120000    3533            lcall   _InitADC
0E75           3534   ;        main.c:876: TMOD&=0b_1111_0000; 
0E75 5389F0    3535            anl     _TMOD,#0xF0
0E78           3536   ;        main.c:877: TMOD|=0b_0000_0001; 
0E78 438901    3537            orl     _TMOD,#0x01
0E7B           3538   ;        main.c:878: TR0=0; 
0E7B C28C      3539            clr     _TR0
0E7D           3540   ;        main.c:880: Servo_arm=0;
0E7D C296      3541            clr     _P1_6
0E7F           3542   ;        main.c:881: Servo_base=0;
0E7F C297      3543            clr     _P1_7
0E81           3544   ;        main.c:882: Magnet = 0;
0E81 C295      3545            clr     _P1_5
0E83           3546   ;        main.c:883: return;
0E83 22        3547            ret
0E84           3548   ;------------------------------------------------------------
0E84           3549   ;Allocation info for local variables in function 'Move_back_ms'
0E84           3550   ;------------------------------------------------------------
0E84           3551   ;ms                        Allocated to registers r2 r3 
0E84           3552   ;------------------------------------------------------------
0E84           3553   ;        main.c:886: void Move_back_ms(int ms){
0E84           3554   ;        -----------------------------------------
0E84           3555   ;         function Move_back_ms
0E84           3556   ;        -----------------------------------------
0E84           3557   _Move_back_ms:
0E84 AA82      3558            mov     r2,dpl
0E86 AB83      3559            mov     r3,dph
0E88           3560   ;        main.c:888: L_motor_dir = 1;
0E88 904DF0    3561            mov     dptr,#_L_motor_dir
0E8B 7401      3562            mov     a,#0x01
0E8D F0        3563            movx    @dptr,a
0E8E           3564   ;        main.c:889: R_motor_dir = 1;
0E8E 904DB0    3565            mov     dptr,#_R_motor_dir
0E91 7401      3566            mov     a,#0x01
0E93 F0        3567            movx    @dptr,a
0E94           3568   ;        main.c:891: pwm_left = 50;
0E94 904E70    3569            mov     dptr,#_pwm_left
0E97 7432      3570            mov     a,#0x32
0E99 F0        3571            movx    @dptr,a
0E9A           3572   ;        main.c:892: pwm_right = 50;
0E9A 904E30    3573            mov     dptr,#_pwm_right
0E9D 7432      3574            mov     a,#0x32
0E9F F0        3575            movx    @dptr,a
0EA0           3576   ;        main.c:894: waitms(ms);
0EA0 8A82      3577            mov     dpl,r2
0EA2 8B83      3578            mov     dph,r3
0EA4 120000    3579            lcall   _waitms
0EA7           3580   ;        main.c:896: L_motor_dir = 0;
0EA7 904DF0    3581            mov     dptr,#_L_motor_dir
0EAA           3582   ;        main.c:897: R_motor_dir = 0;
0EAA           3583   ;        main.c:898: pwm_left = 0;
0EAA           3584   ;        main.c:899: pwm_right = 0;
0EAA E4        3585            clr     a
0EAB F0        3586            movx    @dptr,a
0EAC 904DB0    3587            mov     dptr,#_R_motor_dir
0EAF F0        3588            movx    @dptr,a
0EB0 904E70    3589            mov     dptr,#_pwm_left
0EB3 F0        3590            movx    @dptr,a
0EB4 904E30    3591            mov     dptr,#_pwm_right
0EB7 F0        3592            movx    @dptr,a
0EB8           3593   ;        main.c:900: return;
0EB8 22        3594            ret
0EB9           3595   ;------------------------------------------------------------
0EB9           3596   ;Allocation info for local variables in function 'Right_angle'
0EB9           3597   ;------------------------------------------------------------
0EB9           3598   ;angle                     Allocated to registers r2 r3 
0EB9           3599   ;------------------------------------------------------------
0EB9           3600   ;        main.c:903: void Right_angle(int angle){
0EB9           3601   ;        -----------------------------------------
0EB9           3602   ;         function Right_angle
0EB9           3603   ;        -----------------------------------------
0EB9           3604   _Right_angle:
0EB9 AA82      3605            mov     r2,dpl
0EBB AB83      3606            mov     r3,dph
0EBD           3607   ;        main.c:905: L_motor_dir = 1;
0EBD 904DF0    3608            mov     dptr,#_L_motor_dir
0EC0 7401      3609            mov     a,#0x01
0EC2 F0        3610            movx    @dptr,a
0EC3           3611   ;        main.c:906: R_motor_dir = 0;
0EC3 904DB0    3612            mov     dptr,#_R_motor_dir
0EC6 E4        3613            clr     a
0EC7 F0        3614            movx    @dptr,a
0EC8           3615   ;        main.c:907: pwm_left = 80;
0EC8 904E70    3616            mov     dptr,#_pwm_left
0ECB 7450      3617            mov     a,#0x50
0ECD F0        3618            movx    @dptr,a
0ECE           3619   ;        main.c:908: pwm_right = 80 * pwm_corr;
0ECE C002      3620            push    ar2
0ED0 C003      3621            push    ar3
0ED2 904B70    3622            mov     dptr,#_pwm_corr
0ED5 E0        3623            movx    a,@dptr
0ED6 C0E0      3624            push    acc
0ED8 A3        3625            inc     dptr
0ED9 E0        3626            movx    a,@dptr
0EDA C0E0      3627            push    acc
0EDC A3        3628            inc     dptr
0EDD E0        3629            movx    a,@dptr
0EDE C0E0      3630            push    acc
0EE0 A3        3631            inc     dptr
0EE1 E0        3632            movx    a,@dptr
0EE2 C0E0      3633            push    acc
0EE4 900000    3634            mov     dptr,#0x0000
0EE7 75F0A0    3635            mov     b,#0xA0
0EEA 7442      3636            mov     a,#0x42
0EEC 120000    3637            lcall   ___fsmul
0EEF AC82      3638            mov     r4,dpl
0EF1 AD83      3639            mov     r5,dph
0EF3 AEF0      3640            mov     r6,b
0EF5 FF        3641            mov     r7,a
0EF6 E581      3642            mov     a,sp
0EF8 24FC      3643            add     a,#0xfc
0EFA F581      3644            mov     sp,a
0EFC 8C82      3645            mov     dpl,r4
0EFE 8D83      3646            mov     dph,r5
0F00 8EF0      3647            mov     b,r6
0F02 EF        3648            mov     a,r7
0F03 120000    3649            lcall   ___fs2uchar
0F06 E582      3650            mov     a,dpl
0F08 D003      3651            pop     ar3
0F0A D002      3652            pop     ar2
0F0C 904E30    3653            mov     dptr,#_pwm_right
0F0F F0        3654            movx    @dptr,a
0F10           3655   ;        main.c:910: waitms(angle);
0F10 8A82      3656            mov     dpl,r2
0F12 8B83      3657            mov     dph,r3
0F14 120000    3658            lcall   _waitms
0F17           3659   ;        main.c:912: L_motor_dir = 0;
0F17 904DF0    3660            mov     dptr,#_L_motor_dir
0F1A           3661   ;        main.c:913: R_motor_dir = 0;
0F1A           3662   ;        main.c:914: pwm_left = 0;
0F1A           3663   ;        main.c:915: pwm_right = 0;
0F1A E4        3664            clr     a
0F1B F0        3665            movx    @dptr,a
0F1C 904DB0    3666            mov     dptr,#_R_motor_dir
0F1F F0        3667            movx    @dptr,a
0F20 904E70    3668            mov     dptr,#_pwm_left
0F23 F0        3669            movx    @dptr,a
0F24 904E30    3670            mov     dptr,#_pwm_right
0F27 F0        3671            movx    @dptr,a
0F28           3672   ;        main.c:916: return;
0F28 22        3673            ret
0F29           3674   ;------------------------------------------------------------
0F29           3675   ;Allocation info for local variables in function 'Move_forward'
0F29           3676   ;------------------------------------------------------------
0F29           3677   ;------------------------------------------------------------
0F29           3678   ;        main.c:919: void Move_forward(){
0F29           3679   ;        -----------------------------------------
0F29           3680   ;         function Move_forward
0F29           3681   ;        -----------------------------------------
0F29           3682   _Move_forward:
0F29           3683   ;        main.c:921: L_motor_dir = 0;
0F29 904DF0    3684            mov     dptr,#_L_motor_dir
0F2C           3685   ;        main.c:922: R_motor_dir = 0;
0F2C E4        3686            clr     a
0F2D F0        3687            movx    @dptr,a
0F2E 904DB0    3688            mov     dptr,#_R_motor_dir
0F31 F0        3689            movx    @dptr,a
0F32           3690   ;        main.c:923: pwm_left = 60;
0F32 904E70    3691            mov     dptr,#_pwm_left
0F35 743C      3692            mov     a,#0x3C
0F37 F0        3693            movx    @dptr,a
0F38           3694   ;        main.c:924: pwm_right = 60 * pwm_corr;
0F38 904B70    3695            mov     dptr,#_pwm_corr
0F3B E0        3696            movx    a,@dptr
0F3C C0E0      3697            push    acc
0F3E A3        3698            inc     dptr
0F3F E0        3699            movx    a,@dptr
0F40 C0E0      3700            push    acc
0F42 A3        3701            inc     dptr
0F43 E0        3702            movx    a,@dptr
0F44 C0E0      3703            push    acc
0F46 A3        3704            inc     dptr
0F47 E0        3705            movx    a,@dptr
0F48 C0E0      3706            push    acc
0F4A 900000    3707            mov     dptr,#0x0000
0F4D 75F070    3708            mov     b,#0x70
0F50 7442      3709            mov     a,#0x42
0F52 120000    3710            lcall   ___fsmul
0F55 AA82      3711            mov     r2,dpl
0F57 AB83      3712            mov     r3,dph
0F59 ACF0      3713            mov     r4,b
0F5B FD        3714            mov     r5,a
0F5C E581      3715            mov     a,sp
0F5E 24FC      3716            add     a,#0xfc
0F60 F581      3717            mov     sp,a
0F62 8A82      3718            mov     dpl,r2
0F64 8B83      3719            mov     dph,r3
0F66 8CF0      3720            mov     b,r4
0F68 ED        3721            mov     a,r5
0F69 120000    3722            lcall   ___fs2uchar
0F6C E582      3723            mov     a,dpl
0F6E 904E30    3724            mov     dptr,#_pwm_right
0F71 F0        3725            movx    @dptr,a
0F72           3726   ;        main.c:925: return;
0F72 22        3727            ret
0F73           3728   ;------------------------------------------------------------
0F73           3729   ;Allocation info for local variables in function 'simple_rand'
0F73           3730   ;------------------------------------------------------------
0F73           3731   ;------------------------------------------------------------
0F73           3732   ;        main.c:928: unsigned int simple_rand() {
0F73           3733   ;        -----------------------------------------
0F73           3734   ;         function simple_rand
0F73           3735   ;        -----------------------------------------
0F73           3736   _simple_rand:
0F73           3737   ;        main.c:929: seed = (seed * 25173 + 13849) & 0xFFFF;  
0F73 904BB0    3738            mov     dptr,#_seed
0F76 E0        3739            movx    a,@dptr
0F77 F500      3740            mov     __mulint_PARM_2,a
0F79 A3        3741            inc     dptr
0F7A E0        3742            movx    a,@dptr
0F7B F501      3743            mov     (__mulint_PARM_2 + 1),a
0F7D 906255    3744            mov     dptr,#0x6255
0F80 120000    3745            lcall   __mulint
0F83 E582      3746            mov     a,dpl
0F85 8583F0    3747            mov     b,dph
0F88 904BB0    3748            mov     dptr,#_seed
0F8B 2419      3749            add     a,#0x19
0F8D F0        3750            movx    @dptr,a
0F8E 7436      3751            mov     a,#0x36
0F90 35F0      3752            addc    a,b
0F92 A3        3753            inc     dptr
0F93 F0        3754            movx    @dptr,a
0F94           3755   ;        main.c:930: return seed;     
0F94 904BB0    3756            mov     dptr,#_seed
0F97 E0        3757            movx    a,@dptr
0F98 FA        3758            mov     r2,a
0F99 A3        3759            inc     dptr
0F9A E0        3760            movx    a,@dptr
0F9B 8A82      3761            mov     dpl,r2
0F9D F583      3762            mov     dph,a
0F9F 22        3763            ret
0FA0           3764   ;------------------------------------------------------------
0FA0           3765   ;Allocation info for local variables in function 'get_random_90_250'
0FA0           3766   ;------------------------------------------------------------
0FA0           3767   ;------------------------------------------------------------
0FA0           3768   ;        main.c:933: unsigned int get_random_90_250() {
0FA0           3769   ;        -----------------------------------------
0FA0           3770   ;         function get_random_90_250
0FA0           3771   ;        -----------------------------------------
0FA0           3772   _get_random_90_250:
0FA0           3773   ;        main.c:934: return (simple_rand() % (250 - 85 + 1)) + 85;
0FA0 120000    3774            lcall   _simple_rand
0FA3 7500A6    3775            mov     __moduint_PARM_2,#0xA6
0FA6 E4        3776            clr     a
0FA7 F501      3777            mov     (__moduint_PARM_2 + 1),a
0FA9 120000    3778            lcall   __moduint
0FAC E582      3779            mov     a,dpl
0FAE 8583F0    3780            mov     b,dph
0FB1 2455      3781            add     a,#0x55
0FB3 F582      3782            mov     dpl,a
0FB5 E4        3783            clr     a
0FB6 35F0      3784            addc    a,b
0FB8 F583      3785            mov     dph,a
0FBA 22        3786            ret
0FBB           3787   ;------------------------------------------------------------
0FBB           3788   ;Allocation info for local variables in function 'Read_angle'
0FBB           3789   ;------------------------------------------------------------
0FBB           3790   ;sloc0                     Allocated with name '_Read_angle_sloc0_1_0'
0FBB           3791   ;i                         Allocated with name '_Read_angle_i_1_198'
0FBB           3792   ;mag_x                     Allocated with name '_Read_angle_mag_x_1_198'
0FBB           3793   ;mag_y                     Allocated with name '_Read_angle_mag_y_1_198'
0FBB           3794   ;sum_x                     Allocated with name '_Read_angle_sum_x_1_198'
0FBB           3795   ;sum_y                     Allocated with name '_Read_angle_sum_y_1_198'
0FBB           3796   ;alpha                     Allocated with name '_Read_angle_alpha_1_198'
0FBB           3797   ;angle                     Allocated with name '_Read_angle_angle_1_198'
0FBB           3798   ;smoothed_angle            Allocated with name '_Read_angle_smoothed_angle_1_198'
0FBB           3799   ;------------------------------------------------------------
0FBB           3800   ;        main.c:937: float Read_angle(void)
0FBB           3801   ;        -----------------------------------------
0FBB           3802   ;         function Read_angle
0FBB           3803   ;        -----------------------------------------
0FBB           3804   _Read_angle:
0FBB           3805   ;        main.c:944: sum_x = 0.0; sum_y = 0.0; alpha = 0.25; 
0FBB 90CCE0    3806            mov     dptr,#_Read_angle_sum_x_1_198
0FBE E4        3807            clr     a
0FBF F0        3808            movx    @dptr,a
0FC0 A3        3809            inc     dptr
0FC1 F0        3810            movx    @dptr,a
0FC2 A3        3811            inc     dptr
0FC3 F0        3812            movx    @dptr,a
0FC4 A3        3813            inc     dptr
0FC5 F0        3814            movx    @dptr,a
0FC6 90CD30    3815            mov     dptr,#_Read_angle_sum_y_1_198
0FC9 F0        3816            movx    @dptr,a
0FCA A3        3817            inc     dptr
0FCB E4        3818            clr     a
0FCC F0        3819            movx    @dptr,a
0FCD A3        3820            inc     dptr
0FCE F0        3821            movx    @dptr,a
0FCF A3        3822            inc     dptr
0FD0 F0        3823            movx    @dptr,a
0FD1           3824   ;        main.c:947: for (i = 0; i < 10; i++){
0FD1 7A00      3825            mov     r2,#0x00
0FD3           3826   L037005?:
0FD3 BA0A70    3827            cjne    r2,#0x0A,L037016?
0FD6           3828   L037016?:
0FD6 4000      3829            jc      L037017?
0FD8 020000    3830            ljmp    L037008?
0FDB           3831   L037017?:
0FDB           3832   ;        main.c:948: BMM150_Read_Data(&mag_x, &mag_y);
0FDB 759090    3833            mov     _BMM150_Read_Data_PARM_2,#_Read_angle_mag_y_1_198
0FDE 7591CC    3834            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_Read_angle_mag_y_1_198 >> 8)
0FE1 759200    3835            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
0FE4 90CC40    3836            mov     dptr,#_Read_angle_mag_x_1_198
0FE7 75F000    3837            mov     b,#0x00
0FEA C002      3838            push    ar2
0FEC 120000    3839            lcall   _BMM150_Read_Data
0FEF           3840   ;        main.c:949: sum_x += (float)mag_x; 
0FEF 90CC40    3841            mov     dptr,#_Read_angle_mag_x_1_198
0FF2 E0        3842            movx    a,@dptr
0FF3 FB        3843            mov     r3,a
0FF4 A3        3844            inc     dptr
0FF5 E0        3845            movx    a,@dptr
0FF6 FC        3846            mov     r4,a
0FF7 8B82      3847            mov     dpl,r3
0FF9 8C83      3848            mov     dph,r4
0FFB 120000    3849            lcall   ___sint2fs
0FFE 858280    3850            mov     _Read_angle_sloc0_1_0,dpl
1001 858381    3851            mov     (_Read_angle_sloc0_1_0 + 1),dph
1004 85F082    3852            mov     (_Read_angle_sloc0_1_0 + 2),b
1007 F583      3853            mov     (_Read_angle_sloc0_1_0 + 3),a
1009 90CCE0    3854            mov     dptr,#_Read_angle_sum_x_1_198
100C E0        3855            movx    a,@dptr
100D FF        3856            mov     r7,a
100E A3        3857            inc     dptr
100F E0        3858            movx    a,@dptr
1010 F8        3859            mov     r0,a
1011 A3        3860            inc     dptr
1012 E0        3861            movx    a,@dptr
1013 F9        3862            mov     r1,a
1014 A3        3863            inc     dptr
1015 E0        3864            movx    a,@dptr
1016 FB        3865            mov     r3,a
1017 C080      3866            push    _Read_angle_sloc0_1_0
1019 C081      3867            push    (_Read_angle_sloc0_1_0 + 1)
101B C082      3868            push    (_Read_angle_sloc0_1_0 + 2)
101D C083      3869            push    (_Read_angle_sloc0_1_0 + 3)
101F 8F82      3870            mov     dpl,r7
1021 8883      3871            mov     dph,r0
1023 89F0      3872            mov     b,r1
1025 EB        3873            mov     a,r3
1026 120000    3874            lcall   ___fsadd
1029 AB82      3875            mov     r3,dpl
102B AC83      3876            mov     r4,dph
102D ADF0      3877            mov     r5,b
102F FE        3878            mov     r6,a
1030 E581      3879            mov     a,sp
1032 24FC      3880            add     a,#0xfc
1034 F581      3881            mov     sp,a
1036 90CCE0    3882            mov     dptr,#_Read_angle_sum_x_1_198
1039 EB        3883            mov     a,r3
103A F0        3884            movx    @dptr,a
103B A3        3885            inc     dptr
103C EC        3886            mov     a,r4
103D F0        3887            movx    @dptr,a
103E A3        3888            inc     dptr
103F ED        3889            mov     a,r5
1040 F0        3890            movx    @dptr,a
1041 A3        3891            inc     dptr
1042 EE        3892            mov     a,r6
1043 F0        3893            movx    @dptr,a
1044           3894   ;        main.c:950: sum_y += (float)mag_y; 
1044 90CC90    3895            mov     dptr,#_Read_angle_mag_y_1_198
1047 E0        3896            movx    a,@dptr
1048 FB        3897            mov     r3,a
1049 A3        3898            inc     dptr
104A E0        3899            movx    a,@dptr
104B FC        3900            mov     r4,a
104C 8B82      3901            mov     dpl,r3
104E 8C83      3902            mov     dph,r4
1050 120000    3903            lcall   ___sint2fs
1053 858280    3904            mov     _Read_angle_sloc0_1_0,dpl
1056 858381    3905            mov     (_Read_angle_sloc0_1_0 + 1),dph
1059 85F082    3906            mov     (_Read_angle_sloc0_1_0 + 2),b
105C F583      3907            mov     (_Read_angle_sloc0_1_0 + 3),a
105E 90CD30    3908            mov     dptr,#_Read_angle_sum_y_1_198
1061 E0        3909            movx    a,@dptr
1062 FF        3910            mov     r7,a
1063 A3        3911            inc     dptr
1064 E0        3912            movx    a,@dptr
1065 F8        3913            mov     r0,a
1066 A3        3914            inc     dptr
1067 E0        3915            movx    a,@dptr
1068 F9        3916            mov     r1,a
1069 A3        3917            inc     dptr
106A E0        3918            movx    a,@dptr
106B FB        3919            mov     r3,a
106C C080      3920            push    _Read_angle_sloc0_1_0
106E C081      3921            push    (_Read_angle_sloc0_1_0 + 1)
1070 C082      3922            push    (_Read_angle_sloc0_1_0 + 2)
1072 C083      3923            push    (_Read_angle_sloc0_1_0 + 3)
1074 8F82      3924            mov     dpl,r7
1076 8883      3925            mov     dph,r0
1078 89F0      3926            mov     b,r1
107A EB        3927            mov     a,r3
107B 120000    3928            lcall   ___fsadd
107E AB82      3929            mov     r3,dpl
1080 AC83      3930            mov     r4,dph
1082 ADF0      3931            mov     r5,b
1084 FE        3932            mov     r6,a
1085 E581      3933            mov     a,sp
1087 24FC      3934            add     a,#0xfc
1089 F581      3935            mov     sp,a
108B 90CD30    3936            mov     dptr,#_Read_angle_sum_y_1_198
108E EB        3937            mov     a,r3
108F F0        3938            movx    @dptr,a
1090 A3        3939            inc     dptr
1091 EC        3940            mov     a,r4
1092 F0        3941            movx    @dptr,a
1093 A3        3942            inc     dptr
1094 ED        3943            mov     a,r5
1095 F0        3944            movx    @dptr,a
1096 A3        3945            inc     dptr
1097 EE        3946            mov     a,r6
1098 F0        3947            movx    @dptr,a
1099           3948   ;        main.c:951: waitms(1);
1099 900001    3949            mov     dptr,#0x0001
109C 120000    3950            lcall   _waitms
109F D002      3951            pop     ar2
10A1           3952   ;        main.c:947: for (i = 0; i < 10; i++){
10A1 0A        3953            inc     r2
10A2 020000    3954            ljmp    L037005?
10A5           3955   L037008?:
10A5           3956   ;        main.c:954: angle = atan2f(sum_y/25.0, sum_x/25.0) * 180.0 / M_PI;
10A5 90CD30    3957            mov     dptr,#_Read_angle_sum_y_1_198
10A8 E0        3958            movx    a,@dptr
10A9 FA        3959            mov     r2,a
10AA A3        3960            inc     dptr
10AB E0        3961            movx    a,@dptr
10AC FB        3962            mov     r3,a
10AD A3        3963            inc     dptr
10AE E0        3964            movx    a,@dptr
10AF FC        3965            mov     r4,a
10B0 A3        3966            inc     dptr
10B1 E0        3967            movx    a,@dptr
10B2 FD        3968            mov     r5,a
10B3 E4        3969            clr     a
10B4 C0E0      3970            push    acc
10B6 C0E0      3971            push    acc
10B8 74C8      3972            mov     a,#0xC8
10BA C0E0      3973            push    acc
10BC 7441      3974            mov     a,#0x41
10BE C0E0      3975            push    acc
10C0 8A82      3976            mov     dpl,r2
10C2 8B83      3977            mov     dph,r3
10C4 8CF0      3978            mov     b,r4
10C6 ED        3979            mov     a,r5
10C7 120000    3980            lcall   ___fsdiv
10CA AA82      3981            mov     r2,dpl
10CC AB83      3982            mov     r3,dph
10CE ACF0      3983            mov     r4,b
10D0 FD        3984            mov     r5,a
10D1 E581      3985            mov     a,sp
10D3 24FC      3986            add     a,#0xfc
10D5 F581      3987            mov     sp,a
10D7 90CCE0    3988            mov     dptr,#_Read_angle_sum_x_1_198
10DA E0        3989            movx    a,@dptr
10DB FE        3990            mov     r6,a
10DC A3        3991            inc     dptr
10DD E0        3992            movx    a,@dptr
10DE FF        3993            mov     r7,a
10DF A3        3994            inc     dptr
10E0 E0        3995            movx    a,@dptr
10E1 F8        3996            mov     r0,a
10E2 A3        3997            inc     dptr
10E3 E0        3998            movx    a,@dptr
10E4 F9        3999            mov     r1,a
10E5 C002      4000            push    ar2
10E7 C003      4001            push    ar3
10E9 C004      4002            push    ar4
10EB C005      4003            push    ar5
10ED E4        4004            clr     a
10EE C0E0      4005            push    acc
10F0 C0E0      4006            push    acc
10F2 74C8      4007            mov     a,#0xC8
10F4 C0E0      4008            push    acc
10F6 7441      4009            mov     a,#0x41
10F8 C0E0      4010            push    acc
10FA 8E82      4011            mov     dpl,r6
10FC 8F83      4012            mov     dph,r7
10FE 88F0      4013            mov     b,r0
1100 E9        4014            mov     a,r1
1101 120000    4015            lcall   ___fsdiv
1104 858200    4016            mov     _atan2f_PARM_2,dpl
1107 858301    4017            mov     (_atan2f_PARM_2 + 1),dph
110A 85F002    4018            mov     (_atan2f_PARM_2 + 2),b
110D F503      4019            mov     (_atan2f_PARM_2 + 3),a
110F E581      4020            mov     a,sp
1111 24FC      4021            add     a,#0xfc
1113 F581      4022            mov     sp,a
1115 D005      4023            pop     ar5
1117 D004      4024            pop     ar4
1119 D003      4025            pop     ar3
111B D002      4026            pop     ar2
111D 8A82      4027            mov     dpl,r2
111F 8B83      4028            mov     dph,r3
1121 8CF0      4029            mov     b,r4
1123 ED        4030            mov     a,r5
1124 120000    4031            lcall   _atan2f
1127 AA82      4032            mov     r2,dpl
1129 AB83      4033            mov     r3,dph
112B ACF0      4034            mov     r4,b
112D FD        4035            mov     r5,a
112E C002      4036            push    ar2
1130 C003      4037            push    ar3
1132 C004      4038            push    ar4
1134 C005      4039            push    ar5
1136 900000    4040            mov     dptr,#0x0000
1139 75F034    4041            mov     b,#0x34
113C 7443      4042            mov     a,#0x43
113E 120000    4043            lcall   ___fsmul
1141 AA82      4044            mov     r2,dpl
1143 AB83      4045            mov     r3,dph
1145 ACF0      4046            mov     r4,b
1147 FD        4047            mov     r5,a
1148 E581      4048            mov     a,sp
114A 24FC      4049            add     a,#0xfc
114C F581      4050            mov     sp,a
114E 74DB      4051            mov     a,#0xDB
1150 C0E0      4052            push    acc
1152 740F      4053            mov     a,#0x0F
1154 C0E0      4054            push    acc
1156 7449      4055            mov     a,#0x49
1158 C0E0      4056            push    acc
115A 7440      4057            mov     a,#0x40
115C C0E0      4058            push    acc
115E 8A82      4059            mov     dpl,r2
1160 8B83      4060            mov     dph,r3
1162 8CF0      4061            mov     b,r4
1164 ED        4062            mov     a,r5
1165 120000    4063            lcall   ___fsdiv
1168 AA82      4064            mov     r2,dpl
116A AB83      4065            mov     r3,dph
116C ACF0      4066            mov     r4,b
116E FD        4067            mov     r5,a
116F E581      4068            mov     a,sp
1171 24FC      4069            add     a,#0xfc
1173 F581      4070            mov     sp,a
1175 90CD80    4071            mov     dptr,#_Read_angle_angle_1_198
1178 EA        4072            mov     a,r2
1179 F0        4073            movx    @dptr,a
117A A3        4074            inc     dptr
117B EB        4075            mov     a,r3
117C F0        4076            movx    @dptr,a
117D A3        4077            inc     dptr
117E EC        4078            mov     a,r4
117F F0        4079            movx    @dptr,a
1180 A3        4080            inc     dptr
1181 ED        4081            mov     a,r5
1182 F0        4082            movx    @dptr,a
1183           4083   ;        main.c:958: if (angle < 0.0) angle += 360.0; 
1183 C002      4084            push    ar2
1185 C003      4085            push    ar3
1187 C004      4086            push    ar4
1189 C005      4087            push    ar5
118B E4        4088            clr     a
118C C0E0      4089            push    acc
118E C0E0      4090            push    acc
1190 C0E0      4091            push    acc
1192 C0E0      4092            push    acc
1194 8A82      4093            mov     dpl,r2
1196 8B83      4094            mov     dph,r3
1198 8CF0      4095            mov     b,r4
119A ED        4096            mov     a,r5
119B 120000    4097            lcall   ___fslt
119E AE82      4098            mov     r6,dpl
11A0 E581      4099            mov     a,sp
11A2 24FC      4100            add     a,#0xfc
11A4 F581      4101            mov     sp,a
11A6 D005      4102            pop     ar5
11A8 D004      4103            pop     ar4
11AA D003      4104            pop     ar3
11AC D002      4105            pop     ar2
11AE EE        4106            mov     a,r6
11AF 6000      4107            jz      L037002?
11B1 E4        4108            clr     a
11B2 C0E0      4109            push    acc
11B4 C0E0      4110            push    acc
11B6 74B4      4111            mov     a,#0xB4
11B8 C0E0      4112            push    acc
11BA 7443      4113            mov     a,#0x43
11BC C0E0      4114            push    acc
11BE 8A82      4115            mov     dpl,r2
11C0 8B83      4116            mov     dph,r3
11C2 8CF0      4117            mov     b,r4
11C4 ED        4118            mov     a,r5
11C5 120000    4119            lcall   ___fsadd
11C8 AA82      4120            mov     r2,dpl
11CA AB83      4121            mov     r3,dph
11CC ACF0      4122            mov     r4,b
11CE FD        4123            mov     r5,a
11CF E581      4124            mov     a,sp
11D1 24FC      4125            add     a,#0xfc
11D3 F581      4126            mov     sp,a
11D5 90CD80    4127            mov     dptr,#_Read_angle_angle_1_198
11D8 EA        4128            mov     a,r2
11D9 F0        4129            movx    @dptr,a
11DA A3        4130            inc     dptr
11DB EB        4131            mov     a,r3
11DC F0        4132            movx    @dptr,a
11DD A3        4133            inc     dptr
11DE EC        4134            mov     a,r4
11DF F0        4135            movx    @dptr,a
11E0 A3        4136            inc     dptr
11E1 ED        4137            mov     a,r5
11E2 F0        4138            movx    @dptr,a
11E3           4139   L037002?:
11E3           4140   ;        main.c:959: if (angle > 360.0) angle -= 360.0; 
11E3 90CD80    4141            mov     dptr,#_Read_angle_angle_1_198
11E6 E0        4142            movx    a,@dptr
11E7 FA        4143            mov     r2,a
11E8 A3        4144            inc     dptr
11E9 E0        4145            movx    a,@dptr
11EA FB        4146            mov     r3,a
11EB A3        4147            inc     dptr
11EC E0        4148            movx    a,@dptr
11ED FC        4149            mov     r4,a
11EE A3        4150            inc     dptr
11EF E0        4151            movx    a,@dptr
11F0 FD        4152            mov     r5,a
11F1 C002      4153            push    ar2
11F3 C003      4154            push    ar3
11F5 C004      4155            push    ar4
11F7 C005      4156            push    ar5
11F9 E4        4157            clr     a
11FA C0E0      4158            push    acc
11FC C0E0      4159            push    acc
11FE 74B4      4160            mov     a,#0xB4
1200 C0E0      4161            push    acc
1202 7443      4162            mov     a,#0x43
1204 C0E0      4163            push    acc
1206 8A82      4164            mov     dpl,r2
1208 8B83      4165            mov     dph,r3
120A 8CF0      4166            mov     b,r4
120C ED        4167            mov     a,r5
120D 120000    4168            lcall   ___fsgt
1210 AE82      4169            mov     r6,dpl
1212 E581      4170            mov     a,sp
1214 24FC      4171            add     a,#0xfc
1216 F581      4172            mov     sp,a
1218 D005      4173            pop     ar5
121A D004      4174            pop     ar4
121C D003      4175            pop     ar3
121E D002      4176            pop     ar2
1220 EE        4177            mov     a,r6
1221 6000      4178            jz      L037004?
1223 E4        4179            clr     a
1224 C0E0      4180            push    acc
1226 C0E0      4181            push    acc
1228 74B4      4182            mov     a,#0xB4
122A C0E0      4183            push    acc
122C 7443      4184            mov     a,#0x43
122E C0E0      4185            push    acc
1230 8A82      4186            mov     dpl,r2
1232 8B83      4187            mov     dph,r3
1234 8CF0      4188            mov     b,r4
1236 ED        4189            mov     a,r5
1237 120000    4190            lcall   ___fssub
123A AA82      4191            mov     r2,dpl
123C AB83      4192            mov     r3,dph
123E ACF0      4193            mov     r4,b
1240 FD        4194            mov     r5,a
1241 E581      4195            mov     a,sp
1243 24FC      4196            add     a,#0xfc
1245 F581      4197            mov     sp,a
1247 90CD80    4198            mov     dptr,#_Read_angle_angle_1_198
124A EA        4199            mov     a,r2
124B F0        4200            movx    @dptr,a
124C A3        4201            inc     dptr
124D EB        4202            mov     a,r3
124E F0        4203            movx    @dptr,a
124F A3        4204            inc     dptr
1250 EC        4205            mov     a,r4
1251 F0        4206            movx    @dptr,a
1252 A3        4207            inc     dptr
1253 ED        4208            mov     a,r5
1254 F0        4209            movx    @dptr,a
1255           4210   L037004?:
1255           4211   ;        main.c:961: return angle; 
1255 90CD80    4212            mov     dptr,#_Read_angle_angle_1_198
1258 E0        4213            movx    a,@dptr
1259 FA        4214            mov     r2,a
125A A3        4215            inc     dptr
125B E0        4216            movx    a,@dptr
125C FB        4217            mov     r3,a
125D A3        4218            inc     dptr
125E E0        4219            movx    a,@dptr
125F FC        4220            mov     r4,a
1260 A3        4221            inc     dptr
1261 E0        4222            movx    a,@dptr
1262 8A82      4223            mov     dpl,r2
1264 8B83      4224            mov     dph,r3
1266 8CF0      4225            mov     b,r4
1268 22        4226            ret
1269           4227   ;------------------------------------------------------------
1269           4228   ;Allocation info for local variables in function 'Auto_mode_slave'
1269           4229   ;------------------------------------------------------------
1269           4230   ;sloc0                     Allocated with name '_Auto_mode_slave_sloc0_1_0'
1269           4231   ;count                     Allocated with name '_Auto_mode_slave_count_1_200'
1269           4232   ;command                   Allocated with name '_Auto_mode_slave_command_1_200'
1269           4233   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_200'
1269           4234   ;bound                     Allocated with name '_Auto_mode_slave_bound_1_200'
1269           4235   ;c                         Allocated with name '_Auto_mode_slave_c_1_200'
1269           4236   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_200'
1269           4237   ;angle                     Allocated with name '_Auto_mode_slave_angle_1_200'
1269           4238   ;------------------------------------------------------------
1269           4239   ;        main.c:964: void Auto_mode_slave(){
1269           4240   ;        -----------------------------------------
1269           4241   ;         function Auto_mode_slave
1269           4242   ;        -----------------------------------------
1269           4243   _Auto_mode_slave:
1269           4244   ;        main.c:967: xdata int state_res = 1;
1269 90CE30    4245            mov     dptr,#_Auto_mode_slave_state_res_1_200
126C 7401      4246            mov     a,#0x01
126E F0        4247            movx    @dptr,a
126F E4        4248            clr     a
1270 A3        4249            inc     dptr
1271 F0        4250            movx    @dptr,a
1272           4251   ;        main.c:973: while(count < 20 && state_res){
1272 E4        4252            clr     a
1273 F5D0      4253            mov     _Auto_mode_slave_sloc0_1_0,a
1275 F5D1      4254            mov     (_Auto_mode_slave_sloc0_1_0 + 1),a
1277           4255   L038018?:
1277 C3        4256            clr     c
1278 E5D0      4257            mov     a,_Auto_mode_slave_sloc0_1_0
127A 9414      4258            subb    a,#0x14
127C E5D1      4259            mov     a,(_Auto_mode_slave_sloc0_1_0 + 1)
127E 6480      4260            xrl     a,#0x80
1280 9480      4261            subb    a,#0x80
1282 4000      4262            jc      L038034?
1284 020000    4263            ljmp    L038020?
1287           4264   L038034?:
1287 90CE30    4265            mov     dptr,#_Auto_mode_slave_state_res_1_200
128A E0        4266            movx    a,@dptr
128B FC        4267            mov     r4,a
128C A3        4268            inc     dptr
128D E0        4269            movx    a,@dptr
128E FD        4270            mov     r5,a
128F 4C        4271            orl     a,r4
1290 7000      4272            jnz     L038035?
1292 020000    4273            ljmp    L038020?
1295           4274   L038035?:
1295           4275   ;        main.c:975: curr_angle = Read_angle();
1295 C004      4276            push    ar4
1297 C005      4277            push    ar5
1299 120000    4278            lcall   _Read_angle
129C AE82      4279            mov     r6,dpl
129E AF83      4280            mov     r7,dph
12A0 ACF0      4281            mov     r4,b
12A2 FD        4282            mov     r5,a
12A3 904B30    4283            mov     dptr,#_curr_angle
12A6 EE        4284            mov     a,r6
12A7 F0        4285            movx    @dptr,a
12A8 A3        4286            inc     dptr
12A9 EF        4287            mov     a,r7
12AA F0        4288            movx    @dptr,a
12AB A3        4289            inc     dptr
12AC EC        4290            mov     a,r4
12AD F0        4291            movx    @dptr,a
12AE A3        4292            inc     dptr
12AF ED        4293            mov     a,r5
12B0 F0        4294            movx    @dptr,a
12B1           4295   ;        main.c:977: if(RXU1()){
12B1 C004      4296            push    ar4
12B3 C005      4297            push    ar5
12B5 120000    4298            lcall   _RXU1
12B8 E4        4299            clr     a
12B9 33        4300            rlc     a
12BA D005      4301            pop     ar5
12BC D004      4302            pop     ar4
12BE D005      4303            pop     ar5
12C0 D004      4304            pop     ar4
12C2 7000      4305            jnz     L038036?
12C4 020000    4306            ljmp    L038012?
12C7           4307   L038036?:
12C7           4308   ;        main.c:978: c=getchar1();       
12C7 C004      4309            push    ar4
12C9 C005      4310            push    ar5
12CB 120000    4311            lcall   _getchar1
12CE AE82      4312            mov     r6,dpl
12D0 D005      4313            pop     ar5
12D2 D004      4314            pop     ar4
12D4           4315   ;        main.c:979: if(c=='!'){
12D4 BE2130    4316            cjne    r6,#0x21,L038037?
12D7 8000      4317            sjmp    L038038?
12D9           4318   L038037?:
12D9 020000    4319            ljmp    L038009?
12DC           4320   L038038?:
12DC           4321   ;        main.c:980: getstr1(buff, sizeof(buff)-1);
12DC 754013    4322            mov     _getstr1_PARM_2,#0x13
12DF 9052B0    4323            mov     dptr,#_buff
12E2 75F040    4324            mov     b,#0x40
12E5 120000    4325            lcall   _getstr1
12E8           4326   ;        main.c:981: if(strlen(buff)==11){
12E8 9052B0    4327            mov     dptr,#_buff
12EB 75F040    4328            mov     b,#0x40
12EE 120000    4329            lcall   _strlen
12F1 AF82      4330            mov     r7,dpl
12F3 AA83      4331            mov     r2,dph
12F5 BF0B30    4332            cjne    r7,#0x0B,L038039?
12F8 BA0030    4333            cjne    r2,#0x00,L038039?
12FB 8000      4334            sjmp    L038040?
12FD           4335   L038039?:
12FD 020000    4336            ljmp    L038012?
1300           4337   L038040?:
1300           4338   ;        main.c:982: printf("master_messgae_auto_mode: %s\r\n", buff);
1300 74B0      4339            mov     a,#_buff
1302 C0E0      4340            push    acc
1304 7452      4341            mov     a,#(_buff >> 8)
1306 C0E0      4342            push    acc
1308 7440      4343            mov     a,#0x40
130A C0E0      4344            push    acc
130C 74B0      4345            mov     a,#__str_7
130E C0E0      4346            push    acc
1310 7408      4347            mov     a,#(__str_7 >> 8)
1312 C0E0      4348            push    acc
1314 7480      4349            mov     a,#0x80
1316 C0E0      4350            push    acc
1318 120000    4351            lcall   _printf
131B E581      4352            mov     a,sp
131D 24FA      4353            add     a,#0xfa
131F F581      4354            mov     sp,a
1321           4355   ;        main.c:983: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
1321 74D0      4356            mov     a,#_Auto_mode_slave_command_1_200
1323 C0E0      4357            push    acc
1325 74CD      4358            mov     a,#(_Auto_mode_slave_command_1_200 >> 8)
1327 C0E0      4359            push    acc
1329 E4        4360            clr     a
132A C0E0      4361            push    acc
132C 7480      4362            mov     a,#_Auto_mode_slave_dummy_1_200
132E C0E0      4363            push    acc
1330 74CE      4364            mov     a,#(_Auto_mode_slave_dummy_1_200 >> 8)
1332 C0E0      4365            push    acc
1334 E4        4366            clr     a
1335 C0E0      4367            push    acc
1337 7480      4368            mov     a,#_Auto_mode_slave_dummy_1_200
1339 C0E0      4369            push    acc
133B 74CE      4370            mov     a,#(_Auto_mode_slave_dummy_1_200 >> 8)
133D C0E0      4371            push    acc
133F E4        4372            clr     a
1340 C0E0      4373            push    acc
1342 7480      4374            mov     a,#_Auto_mode_slave_dummy_1_200
1344 C0E0      4375            push    acc
1346 74CE      4376            mov     a,#(_Auto_mode_slave_dummy_1_200 >> 8)
1348 C0E0      4377            push    acc
134A E4        4378            clr     a
134B C0E0      4379            push    acc
134D 74F0      4380            mov     a,#__str_8
134F C0E0      4381            push    acc
1351 7408      4382            mov     a,#(__str_8 >> 8)
1353 C0E0      4383            push    acc
1355 7480      4384            mov     a,#0x80
1357 C0E0      4385            push    acc
1359 74B0      4386            mov     a,#_buff
135B C0E0      4387            push    acc
135D 7452      4388            mov     a,#(_buff >> 8)
135F C0E0      4389            push    acc
1361 7440      4390            mov     a,#0x40
1363 C0E0      4391            push    acc
1365 120000    4392            lcall   _sscanf
1368 E581      4393            mov     a,sp
136A 24EE      4394            add     a,#0xee
136C F581      4395            mov     sp,a
136E           4396   ;        main.c:984: if(command) state_res = 1;
136E 90CDD0    4397            mov     dptr,#_Auto_mode_slave_command_1_200
1371 E0        4398            movx    a,@dptr
1372 FF        4399            mov     r7,a
1373 A3        4400            inc     dptr
1374 E0        4401            movx    a,@dptr
1375 FA        4402            mov     r2,a
1376 4F        4403            orl     a,r7
1377 6000      4404            jz      L038002?
1379 90CE30    4405            mov     dptr,#_Auto_mode_slave_state_res_1_200
137C 7401      4406            mov     a,#0x01
137E F0        4407            movx    @dptr,a
137F E4        4408            clr     a
1380 A3        4409            inc     dptr
1381 F0        4410            movx    @dptr,a
1382 8000      4411            sjmp    L038012?
1384           4412   L038002?:
1384           4413   ;        main.c:985: else state_res = 0;
1384 90CE30    4414            mov     dptr,#_Auto_mode_slave_state_res_1_200
1387 E4        4415            clr     a
1388 F0        4416            movx    @dptr,a
1389 A3        4417            inc     dptr
138A F0        4418            movx    @dptr,a
138B 8000      4419            sjmp    L038012?
138D           4420   L038009?:
138D           4421   ;        main.c:991: else if(c=='@'){
138D BE40F0    4422            cjne    r6,#0x40,L038012?
1390           4423   ;        main.c:992: sprintf(buff, "%01d,%02d,%ld,%4.1f\n", state_res, count,freq100, curr_angle);
1390 904B30    4424            mov     dptr,#_curr_angle
1393 E0        4425            movx    a,@dptr
1394 C0E0      4426            push    acc
1396 A3        4427            inc     dptr
1397 E0        4428            movx    a,@dptr
1398 C0E0      4429            push    acc
139A A3        4430            inc     dptr
139B E0        4431            movx    a,@dptr
139C C0E0      4432            push    acc
139E A3        4433            inc     dptr
139F E0        4434            movx    a,@dptr
13A0 C0E0      4435            push    acc
13A2 905270    4436            mov     dptr,#_freq100
13A5 E0        4437            movx    a,@dptr
13A6 C0E0      4438            push    acc
13A8 A3        4439            inc     dptr
13A9 E0        4440            movx    a,@dptr
13AA C0E0      4441            push    acc
13AC A3        4442            inc     dptr
13AD E0        4443            movx    a,@dptr
13AE C0E0      4444            push    acc
13B0 A3        4445            inc     dptr
13B1 E0        4446            movx    a,@dptr
13B2 C0E0      4447            push    acc
13B4 C0D0      4448            push    _Auto_mode_slave_sloc0_1_0
13B6 C0D1      4449            push    (_Auto_mode_slave_sloc0_1_0 + 1)
13B8 C004      4450            push    ar4
13BA C005      4451            push    ar5
13BC 74B0      4452            mov     a,#__str_9
13BE C0E0      4453            push    acc
13C0 7409      4454            mov     a,#(__str_9 >> 8)
13C2 C0E0      4455            push    acc
13C4 7480      4456            mov     a,#0x80
13C6 C0E0      4457            push    acc
13C8 74B0      4458            mov     a,#_buff
13CA C0E0      4459            push    acc
13CC 7452      4460            mov     a,#(_buff >> 8)
13CE C0E0      4461            push    acc
13D0 7440      4462            mov     a,#0x40
13D2 C0E0      4463            push    acc
13D4 120000    4464            lcall   _sprintf
13D7 E581      4465            mov     a,sp
13D9 24EE      4466            add     a,#0xee
13DB F581      4467            mov     sp,a
13DD           4468   ;        main.c:993: waitms(5); 
13DD 900005    4469            mov     dptr,#0x0005
13E0 120000    4470            lcall   _waitms
13E3           4471   ;        main.c:994: sendstr1(buff);
13E3 9052B0    4472            mov     dptr,#_buff
13E6 75F040    4473            mov     b,#0x40
13E9 120000    4474            lcall   _sendstr1
13EC           4475   L038012?:
13EC           4476   ;        main.c:999: Move_forward();
13EC 120000    4477            lcall   _Move_forward
13EF           4478   ;        main.c:1001: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
13EF 758209    4479            mov     dpl,#0x09
13F2 120000    4480            lcall   _ADC_at_Pin
13F5 E582      4481            mov     a,dpl
13F7 8583F0    4482            mov     b,dph
13FA 905230    4483            mov     dptr,#_d1
13FD F0        4484            movx    @dptr,a
13FE A3        4485            inc     dptr
13FF E5F0      4486            mov     a,b
1401 F0        4487            movx    @dptr,a
1402           4488   ;        main.c:1002: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
1402 75820A    4489            mov     dpl,#0x0A
1405 120000    4490            lcall   _ADC_at_Pin
1408 AA82      4491            mov     r2,dpl
140A AB83      4492            mov     r3,dph
140C 9051F0    4493            mov     dptr,#_d2
140F EA        4494            mov     a,r2
1410 F0        4495            movx    @dptr,a
1411 A3        4496            inc     dptr
1412 EB        4497            mov     a,r3
1413 F0        4498            movx    @dptr,a
1414           4499   ;        main.c:1003: bound = check_bound(d1,d2);
1414 905230    4500            mov     dptr,#_d1
1417 E0        4501            movx    a,@dptr
1418 FC        4502            mov     r4,a
1419 A3        4503            inc     dptr
141A E0        4504            movx    a,@dptr
141B FD        4505            mov     r5,a
141C 8A90      4506            mov     _check_bound_PARM_2,r2
141E 8B91      4507            mov     (_check_bound_PARM_2 + 1),r3
1420 8C82      4508            mov     dpl,r4
1422 8D83      4509            mov     dph,r5
1424 120000    4510            lcall   _check_bound
1427 AA82      4511            mov     r2,dpl
1429 AB83      4512            mov     r3,dph
142B           4513   ;        main.c:1004: printf("f:%04ld, d1:%d, d2:%d, bound_dectect: %d\r\n",freq100, d1,d2,bound);
142B C002      4514            push    ar2
142D C003      4515            push    ar3
142F C002      4516            push    ar2
1431 C003      4517            push    ar3
1433 9051F0    4518            mov     dptr,#_d2
1436 E0        4519            movx    a,@dptr
1437 C0E0      4520            push    acc
1439 A3        4521            inc     dptr
143A E0        4522            movx    a,@dptr
143B C0E0      4523            push    acc
143D 905230    4524            mov     dptr,#_d1
1440 E0        4525            movx    a,@dptr
1441 C0E0      4526            push    acc
1443 A3        4527            inc     dptr
1444 E0        4528            movx    a,@dptr
1445 C0E0      4529            push    acc
1447 905270    4530            mov     dptr,#_freq100
144A E0        4531            movx    a,@dptr
144B C0E0      4532            push    acc
144D A3        4533            inc     dptr
144E E0        4534            movx    a,@dptr
144F C0E0      4535            push    acc
1451 A3        4536            inc     dptr
1452 E0        4537            movx    a,@dptr
1453 C0E0      4538            push    acc
1455 A3        4539            inc     dptr
1456 E0        4540            movx    a,@dptr
1457 C0E0      4541            push    acc
1459 7430      4542            mov     a,#__str_10
145B C0E0      4543            push    acc
145D 740A      4544            mov     a,#(__str_10 >> 8)
145F C0E0      4545            push    acc
1461 7480      4546            mov     a,#0x80
1463 C0E0      4547            push    acc
1465 120000    4548            lcall   _printf
1468 E581      4549            mov     a,sp
146A 24F3      4550            add     a,#0xf3
146C F581      4551            mov     sp,a
146E D003      4552            pop     ar3
1470 D002      4553            pop     ar2
1472           4554   ;        main.c:1006: if (freq100>=5340){
1472 905270    4555            mov     dptr,#_freq100
1475 E0        4556            movx    a,@dptr
1476 FC        4557            mov     r4,a
1477 A3        4558            inc     dptr
1478 E0        4559            movx    a,@dptr
1479 FD        4560            mov     r5,a
147A A3        4561            inc     dptr
147B E0        4562            movx    a,@dptr
147C FE        4563            mov     r6,a
147D A3        4564            inc     dptr
147E E0        4565            movx    a,@dptr
147F FF        4566            mov     r7,a
1480 C3        4567            clr     c
1481 EC        4568            mov     a,r4
1482 94DC      4569            subb    a,#0xDC
1484 ED        4570            mov     a,r5
1485 9414      4571            subb    a,#0x14
1487 EE        4572            mov     a,r6
1488 9400      4573            subb    a,#0x00
148A EF        4574            mov     a,r7
148B 6480      4575            xrl     a,#0x80
148D 9480      4576            subb    a,#0x80
148F 4000      4577            jc      L038014?
1491           4578   ;        main.c:1007: Move_back_ms(300);
1491 90012C    4579            mov     dptr,#0x012C
1494 C002      4580            push    ar2
1496 C003      4581            push    ar3
1498 120000    4582            lcall   _Move_back_ms
149B           4583   ;        main.c:1008: waitms(100);
149B 900064    4584            mov     dptr,#0x0064
149E 120000    4585            lcall   _waitms
14A1           4586   ;        main.c:1009: servo_pick();
14A1 120000    4587            lcall   _servo_pick
14A4 D003      4588            pop     ar3
14A6 D002      4589            pop     ar2
14A8           4590   ;        main.c:1010: count++;
14A8 05D0      4591            inc     _Auto_mode_slave_sloc0_1_0
14AA E4        4592            clr     a
14AB B5D0B0    4593            cjne    a,_Auto_mode_slave_sloc0_1_0,L038045?
14AE 05D1      4594            inc     (_Auto_mode_slave_sloc0_1_0 + 1)
14B0           4595   L038045?:
14B0           4596   ;        main.c:1011: waitms(100);
14B0 900064    4597            mov     dptr,#0x0064
14B3 C002      4598            push    ar2
14B5 C003      4599            push    ar3
14B7 120000    4600            lcall   _waitms
14BA           4601   ;        main.c:1012: Move_forward();
14BA 120000    4602            lcall   _Move_forward
14BD D003      4603            pop     ar3
14BF D002      4604            pop     ar2
14C1           4605   ;        main.c:1013: freq100 = 1;
14C1 905270    4606            mov     dptr,#_freq100
14C4 7401      4607            mov     a,#0x01
14C6 F0        4608            movx    @dptr,a
14C7 E4        4609            clr     a
14C8 A3        4610            inc     dptr
14C9 F0        4611            movx    @dptr,a
14CA A3        4612            inc     dptr
14CB F0        4613            movx    @dptr,a
14CC A3        4614            inc     dptr
14CD F0        4615            movx    @dptr,a
14CE           4616   L038014?:
14CE           4617   ;        main.c:1016: if(bound == 1){
14CE BA01F0    4618            cjne    r2,#0x01,L038046?
14D1 BB00F0    4619            cjne    r3,#0x00,L038046?
14D4 8000      4620            sjmp    L038047?
14D6           4621   L038046?:
14D6 020000    4622            ljmp    L038018?
14D9           4623   L038047?:
14D9           4624   ;        main.c:1017: Move_back_ms(500);
14D9 9001F4    4625            mov     dptr,#0x01F4
14DC 120000    4626            lcall   _Move_back_ms
14DF           4627   ;        main.c:1018: waitms(100);
14DF 900064    4628            mov     dptr,#0x0064
14E2 120000    4629            lcall   _waitms
14E5           4630   ;        main.c:1019: angle = get_random_90_250();
14E5 120000    4631            lcall   _get_random_90_250
14E8 858200    4632            mov     __mulint_PARM_2,dpl
14EB 858301    4633            mov     (__mulint_PARM_2 + 1),dph
14EE           4634   ;        main.c:1020: Right_angle(angle*600/90);
14EE 900258    4635            mov     dptr,#0x0258
14F1 120000    4636            lcall   __mulint
14F4 AA82      4637            mov     r2,dpl
14F6 AB83      4638            mov     r3,dph
14F8 75005A    4639            mov     __divuint_PARM_2,#0x5A
14FB E4        4640            clr     a
14FC F501      4641            mov     (__divuint_PARM_2 + 1),a
14FE 8A82      4642            mov     dpl,r2
1500 8B83      4643            mov     dph,r3
1502 120000    4644            lcall   __divuint
1505 120000    4645            lcall   _Right_angle
1508 020000    4646            ljmp    L038018?
150B           4647   L038020?:
150B           4648   ;        main.c:1024: printf("Auto mode finished!\r\n");
150B 7400      4649            mov     a,#__str_11
150D C0E0      4650            push    acc
150F 740C      4651            mov     a,#(__str_11 >> 8)
1511 C0E0      4652            push    acc
1513 7480      4653            mov     a,#0x80
1515 C0E0      4654            push    acc
1517 120000    4655            lcall   _printf
151A 1581      4656            dec     sp
151C 1581      4657            dec     sp
151E 1581      4658            dec     sp
1520 22        4659            ret
1521           4660   ;------------------------------------------------------------
1521           4661   ;Allocation info for local variables in function 'Joystick_Control'
1521           4662   ;------------------------------------------------------------
1521           4663   ;vy_ptr                    Allocated with name '_Joystick_Control_PARM_2'
1521           4664   ;vx_ptr                    Allocated to registers r2 r3 r4 
1521           4665   ;sloc0                     Allocated with name '_Joystick_Control_sloc0_1_0'
1521           4666   ;sloc1                     Allocated with name '_Joystick_Control_sloc1_1_0'
1521           4667   ;sloc2                     Allocated with name '_Joystick_Control_sloc2_1_0'
1521           4668   ;sloc3                     Allocated with name '_Joystick_Control_sloc3_1_0'
1521           4669   ;sloc4                     Allocated with name '_Joystick_Control_sloc4_1_0'
1521           4670   ;sloc5                     Allocated with name '_Joystick_Control_sloc5_1_0'
1521           4671   ;sloc6                     Allocated with name '_Joystick_Control_sloc6_1_0'
1521           4672   ;vx                        Allocated with name '_Joystick_Control_vx_1_209'
1521           4673   ;vy                        Allocated with name '_Joystick_Control_vy_1_209'
1521           4674   ;vx_error                  Allocated with name '_Joystick_Control_vx_error_1_209'
1521           4675   ;vy_error                  Allocated with name '_Joystick_Control_vy_error_1_209'
1521           4676   ;vx_err                    Allocated with name '_Joystick_Control_vx_err_1_209'
1521           4677   ;vy_err                    Allocated with name '_Joystick_Control_vy_err_1_209'
1521           4678   ;threshold                 Allocated with name '_Joystick_Control_threshold_1_209'
1521           4679   ;------------------------------------------------------------
1521           4680   ;        main.c:1028: void Joystick_Control(int *vx_ptr, int *vy_ptr)
1521           4681   ;        -----------------------------------------
1521           4682   ;         function Joystick_Control
1521           4683   ;        -----------------------------------------
1521           4684   _Joystick_Control:
1521           4685   ;        main.c:1033: vx = *vx_ptr; 
1521 120000    4686            lcall   __gptrget
1524 F520      4687            mov     _Joystick_Control_sloc0_1_0,a
1526 A3        4688            inc     dptr
1527 120000    4689            lcall   __gptrget
152A F521      4690            mov     (_Joystick_Control_sloc0_1_0 + 1),a
152C           4691   ;        main.c:1034: vy = *vy_ptr; 
152C AC00      4692            mov     r4,_Joystick_Control_PARM_2
152E AD01      4693            mov     r5,(_Joystick_Control_PARM_2 + 1)
1530 AE02      4694            mov     r6,(_Joystick_Control_PARM_2 + 2)
1532 8C82      4695            mov     dpl,r4
1534 8D83      4696            mov     dph,r5
1536 8EF0      4697            mov     b,r6
1538 120000    4698            lcall   __gptrget
153B FC        4699            mov     r4,a
153C A3        4700            inc     dptr
153D 120000    4701            lcall   __gptrget
1540 FD        4702            mov     r5,a
1541           4703   ;        main.c:1036: vx_error = abs(vx-vx_thres)*100/vx_thres; 
1541 904CF0    4704            mov     dptr,#_vx_thres
1544 E0        4705            movx    a,@dptr
1545 FE        4706            mov     r6,a
1546 A3        4707            inc     dptr
1547 E0        4708            movx    a,@dptr
1548 FF        4709            mov     r7,a
1549 E520      4710            mov     a,_Joystick_Control_sloc0_1_0
154B C3        4711            clr     c
154C 9E        4712            subb    a,r6
154D F582      4713            mov     dpl,a
154F E521      4714            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
1551 9F        4715            subb    a,r7
1552 F583      4716            mov     dph,a
1554 C004      4717            push    ar4
1556 C005      4718            push    ar5
1558 120000    4719            lcall   _abs
155B 858200    4720            mov     __mulint_PARM_2,dpl
155E 858301    4721            mov     (__mulint_PARM_2 + 1),dph
1561 900064    4722            mov     dptr,#0x0064
1564 120000    4723            lcall   __mulint
1567 AE82      4724            mov     r6,dpl
1569 AF83      4725            mov     r7,dph
156B 904CF0    4726            mov     dptr,#_vx_thres
156E E0        4727            movx    a,@dptr
156F F500      4728            mov     __divsint_PARM_2,a
1571 A3        4729            inc     dptr
1572 E0        4730            movx    a,@dptr
1573 F501      4731            mov     (__divsint_PARM_2 + 1),a
1575 8E82      4732            mov     dpl,r6
1577 8F83      4733            mov     dph,r7
1579 120000    4734            lcall   __divsint
157C E582      4735            mov     a,dpl
157E 8583F0    4736            mov     b,dph
1581 D005      4737            pop     ar5
1583 D004      4738            pop     ar4
1585 90CEE0    4739            mov     dptr,#_Joystick_Control_vx_error_1_209
1588 F0        4740            movx    @dptr,a
1589 A3        4741            inc     dptr
158A E5F0      4742            mov     a,b
158C F0        4743            movx    @dptr,a
158D           4744   ;        main.c:1037: vy_error = abs(vy-vy_thres)*100/vy_thres; 
158D 904CB0    4745            mov     dptr,#_vy_thres
1590 E0        4746            movx    a,@dptr
1591 FE        4747            mov     r6,a
1592 A3        4748            inc     dptr
1593 E0        4749            movx    a,@dptr
1594 FF        4750            mov     r7,a
1595 EC        4751            mov     a,r4
1596 C3        4752            clr     c
1597 9E        4753            subb    a,r6
1598 F582      4754            mov     dpl,a
159A ED        4755            mov     a,r5
159B 9F        4756            subb    a,r7
159C F583      4757            mov     dph,a
159E C004      4758            push    ar4
15A0 C005      4759            push    ar5
15A2 120000    4760            lcall   _abs
15A5 858200    4761            mov     __mulint_PARM_2,dpl
15A8 858301    4762            mov     (__mulint_PARM_2 + 1),dph
15AB 900064    4763            mov     dptr,#0x0064
15AE 120000    4764            lcall   __mulint
15B1 AE82      4765            mov     r6,dpl
15B3 AF83      4766            mov     r7,dph
15B5 904CB0    4767            mov     dptr,#_vy_thres
15B8 E0        4768            movx    a,@dptr
15B9 F5C0      4769            mov     _Joystick_Control_sloc2_1_0,a
15BB A3        4770            inc     dptr
15BC E0        4771            movx    a,@dptr
15BD F5C1      4772            mov     (_Joystick_Control_sloc2_1_0 + 1),a
15BF 85C000    4773            mov     __divsint_PARM_2,_Joystick_Control_sloc2_1_0
15C2 85C101    4774            mov     (__divsint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
15C5           4775   ;        main.c:1038: vx_err = vx-vx_thres; 
15C5 8E82      4776            mov     dpl,r6
15C7 8F83      4777            mov     dph,r7
15C9 120000    4778            lcall   __divsint
15CC AE82      4779            mov     r6,dpl
15CE AF83      4780            mov     r7,dph
15D0 D005      4781            pop     ar5
15D2 D004      4782            pop     ar4
15D4 904CF0    4783            mov     dptr,#_vx_thres
15D7 E0        4784            movx    a,@dptr
15D8 FA        4785            mov     r2,a
15D9 A3        4786            inc     dptr
15DA E0        4787            movx    a,@dptr
15DB FB        4788            mov     r3,a
15DC E520      4789            mov     a,_Joystick_Control_sloc0_1_0
15DE C3        4790            clr     c
15DF 9A        4791            subb    a,r2
15E0 F560      4792            mov     _Joystick_Control_sloc4_1_0,a
15E2 E521      4793            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
15E4 9B        4794            subb    a,r3
15E5 F561      4795            mov     (_Joystick_Control_sloc4_1_0 + 1),a
15E7           4796   ;        main.c:1039: vy_err = vy-vy_thres; 
15E7 EC        4797            mov     a,r4
15E8 C3        4798            clr     c
15E9 95C0      4799            subb    a,_Joystick_Control_sloc2_1_0
15EB F520      4800            mov     _Joystick_Control_sloc0_1_0,a
15ED ED        4801            mov     a,r5
15EE 95C1      4802            subb    a,(_Joystick_Control_sloc2_1_0 + 1)
15F0 F521      4803            mov     (_Joystick_Control_sloc0_1_0 + 1),a
15F2           4804   ;        main.c:1040: pwm_left = 0; 
15F2 904E70    4805            mov     dptr,#_pwm_left
15F5           4806   ;        main.c:1041: pwm_right = 0; 
15F5 E4        4807            clr     a
15F6 F0        4808            movx    @dptr,a
15F7 904E30    4809            mov     dptr,#_pwm_right
15FA F0        4810            movx    @dptr,a
15FB           4811   ;        main.c:1043: if ((vy_error>5) && (vx_error<5)){
15FB C3        4812            clr     c
15FC 7405      4813            mov     a,#0x05
15FE 9E        4814            subb    a,r6
15FF E4        4815            clr     a
1600 6480      4816            xrl     a,#0x80
1602 8FF0      4817            mov     b,r7
1604 63F080    4818            xrl     b,#0x80
1607 95F0      4819            subb    a,b
1609 E4        4820            clr     a
160A 33        4821            rlc     a
160B F570      4822            mov     _Joystick_Control_sloc1_1_0,a
160D 7000      4823            jnz     L039056?
160F 020000    4824            ljmp    L039005?
1612           4825   L039056?:
1612 90CEE0    4826            mov     dptr,#_Joystick_Control_vx_error_1_209
1615 E0        4827            movx    a,@dptr
1616 FA        4828            mov     r2,a
1617 A3        4829            inc     dptr
1618 E0        4830            movx    a,@dptr
1619 FB        4831            mov     r3,a
161A C3        4832            clr     c
161B EA        4833            mov     a,r2
161C 9405      4834            subb    a,#0x05
161E EB        4835            mov     a,r3
161F 6480      4836            xrl     a,#0x80
1621 9480      4837            subb    a,#0x80
1623 4000      4838            jc      L039057?
1625 020000    4839            ljmp    L039005?
1628           4840   L039057?:
1628           4841   ;        main.c:1044: pwm_left = vy_error; 
1628 904E70    4842            mov     dptr,#_pwm_left
162B EE        4843            mov     a,r6
162C F0        4844            movx    @dptr,a
162D           4845   ;        main.c:1045: pwm_right = vy_error * pwm_corr; 
162D 8E82      4846            mov     dpl,r6
162F 8F83      4847            mov     dph,r7
1631 C004      4848            push    ar4
1633 C005      4849            push    ar5
1635 C006      4850            push    ar6
1637 C007      4851            push    ar7
1639 120000    4852            lcall   ___sint2fs
163C AA82      4853            mov     r2,dpl
163E AB83      4854            mov     r3,dph
1640 A8F0      4855            mov     r0,b
1642 F9        4856            mov     r1,a
1643 904B70    4857            mov     dptr,#_pwm_corr
1646 E0        4858            movx    a,@dptr
1647 C0E0      4859            push    acc
1649 A3        4860            inc     dptr
164A E0        4861            movx    a,@dptr
164B C0E0      4862            push    acc
164D A3        4863            inc     dptr
164E E0        4864            movx    a,@dptr
164F C0E0      4865            push    acc
1651 A3        4866            inc     dptr
1652 E0        4867            movx    a,@dptr
1653 C0E0      4868            push    acc
1655 8A82      4869            mov     dpl,r2
1657 8B83      4870            mov     dph,r3
1659 88F0      4871            mov     b,r0
165B E9        4872            mov     a,r1
165C 120000    4873            lcall   ___fsmul
165F AA82      4874            mov     r2,dpl
1661 AB83      4875            mov     r3,dph
1663 A8F0      4876            mov     r0,b
1665 F9        4877            mov     r1,a
1666 E581      4878            mov     a,sp
1668 24FC      4879            add     a,#0xfc
166A F581      4880            mov     sp,a
166C 8A82      4881            mov     dpl,r2
166E 8B83      4882            mov     dph,r3
1670 88F0      4883            mov     b,r0
1672 E9        4884            mov     a,r1
1673 120000    4885            lcall   ___fs2uchar
1676 858210    4886            mov     _Joystick_Control_sloc3_1_0,dpl
1679 D007      4887            pop     ar7
167B D006      4888            pop     ar6
167D D005      4889            pop     ar5
167F D004      4890            pop     ar4
1681 904E30    4891            mov     dptr,#_pwm_right
1684 E510      4892            mov     a,_Joystick_Control_sloc3_1_0
1686 F0        4893            movx    @dptr,a
1687           4894   ;        main.c:1046: if (vy_err > 0){ //move forward
1687 C3        4895            clr     c
1688 E4        4896            clr     a
1689 9520      4897            subb    a,_Joystick_Control_sloc0_1_0
168B E4        4898            clr     a
168C 6480      4899            xrl     a,#0x80
168E 8521F0    4900            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
1691 63F080    4901            xrl     b,#0x80
1694 95F0      4902            subb    a,b
1696 5000      4903            jnc     L039002?
1698           4904   ;        main.c:1047: L_motor_dir = 0; 
1698 904DF0    4905            mov     dptr,#_L_motor_dir
169B           4906   ;        main.c:1048: R_motor_dir = 0; 
169B E4        4907            clr     a
169C F0        4908            movx    @dptr,a
169D 904DB0    4909            mov     dptr,#_R_motor_dir
16A0 F0        4910            movx    @dptr,a
16A1 8000      4911            sjmp    L039005?
16A3           4912   L039002?:
16A3           4913   ;        main.c:1051: L_motor_dir = 1; 
16A3 904DF0    4914            mov     dptr,#_L_motor_dir
16A6 7401      4915            mov     a,#0x01
16A8 F0        4916            movx    @dptr,a
16A9           4917   ;        main.c:1052: R_motor_dir = 1; 
16A9 904DB0    4918            mov     dptr,#_R_motor_dir
16AC 7401      4919            mov     a,#0x01
16AE F0        4920            movx    @dptr,a
16AF           4921   ;        main.c:1053: pwm_right *= 1.05;
16AF 851082    4922            mov     dpl,_Joystick_Control_sloc3_1_0
16B2 C004      4923            push    ar4
16B4 C005      4924            push    ar5
16B6 C006      4925            push    ar6
16B8 C007      4926            push    ar7
16BA 120000    4927            lcall   ___uchar2fs
16BD A882      4928            mov     r0,dpl
16BF A983      4929            mov     r1,dph
16C1 AAF0      4930            mov     r2,b
16C3 FB        4931            mov     r3,a
16C4 C000      4932            push    ar0
16C6 C001      4933            push    ar1
16C8 C002      4934            push    ar2
16CA C003      4935            push    ar3
16CC 906666    4936            mov     dptr,#0x6666
16CF 75F086    4937            mov     b,#0x86
16D2 743F      4938            mov     a,#0x3F
16D4 120000    4939            lcall   ___fsmul
16D7 AA82      4940            mov     r2,dpl
16D9 AB83      4941            mov     r3,dph
16DB A8F0      4942            mov     r0,b
16DD F9        4943            mov     r1,a
16DE E581      4944            mov     a,sp
16E0 24FC      4945            add     a,#0xfc
16E2 F581      4946            mov     sp,a
16E4 8A82      4947            mov     dpl,r2
16E6 8B83      4948            mov     dph,r3
16E8 88F0      4949            mov     b,r0
16EA E9        4950            mov     a,r1
16EB 120000    4951            lcall   ___fs2uchar
16EE E582      4952            mov     a,dpl
16F0 D007      4953            pop     ar7
16F2 D006      4954            pop     ar6
16F4 D005      4955            pop     ar5
16F6 D004      4956            pop     ar4
16F8 904E30    4957            mov     dptr,#_pwm_right
16FB F0        4958            movx    @dptr,a
16FC           4959   ;        main.c:1124: return; 
16FC           4960   ;        main.c:1053: pwm_right *= 1.05;
16FC           4961   L039005?:
16FC           4962   ;        main.c:1056: if ((vx_error>5)&&(vy_error<5)){
16FC 90CEE0    4963            mov     dptr,#_Joystick_Control_vx_error_1_209
16FF E0        4964            movx    a,@dptr
1700 F500      4965            mov     _Joystick_Control_sloc6_1_0,a
1702 A3        4966            inc     dptr
1703 E0        4967            movx    a,@dptr
1704 F501      4968            mov     (_Joystick_Control_sloc6_1_0 + 1),a
1706 C3        4969            clr     c
1707 7405      4970            mov     a,#0x05
1709 9500      4971            subb    a,_Joystick_Control_sloc6_1_0
170B E4        4972            clr     a
170C 6480      4973            xrl     a,#0x80
170E 8501F0    4974            mov     b,(_Joystick_Control_sloc6_1_0 + 1)
1711 63F080    4975            xrl     b,#0x80
1714 95F0      4976            subb    a,b
1716 E4        4977            clr     a
1717 33        4978            rlc     a
1718 F510      4979            mov     _Joystick_Control_sloc3_1_0,a
171A 7000      4980            jnz     L039059?
171C 020000    4981            ljmp    L039011?
171F           4982   L039059?:
171F C3        4983            clr     c
1720 EE        4984            mov     a,r6
1721 9405      4985            subb    a,#0x05
1723 EF        4986            mov     a,r7
1724 6480      4987            xrl     a,#0x80
1726 9480      4988            subb    a,#0x80
1728 4000      4989            jc      L039060?
172A 020000    4990            ljmp    L039011?
172D           4991   L039060?:
172D           4992   ;        main.c:1057: pwm_left = vx_error; 
172D C004      4993            push    ar4
172F C005      4994            push    ar5
1731 904E70    4995            mov     dptr,#_pwm_left
1734 E500      4996            mov     a,_Joystick_Control_sloc6_1_0
1736 F0        4997            movx    @dptr,a
1737           4998   ;        main.c:1058: pwm_right = vx_error * pwm_corr; 
1737 850082    4999            mov     dpl,_Joystick_Control_sloc6_1_0
173A 850183    5000            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
173D C006      5001            push    ar6
173F C007      5002            push    ar7
1741 120000    5003            lcall   ___sint2fs
1744 AC82      5004            mov     r4,dpl
1746 AD83      5005            mov     r5,dph
1748 AAF0      5006            mov     r2,b
174A FB        5007            mov     r3,a
174B 904B70    5008            mov     dptr,#_pwm_corr
174E E0        5009            movx    a,@dptr
174F C0E0      5010            push    acc
1751 A3        5011            inc     dptr
1752 E0        5012            movx    a,@dptr
1753 C0E0      5013            push    acc
1755 A3        5014            inc     dptr
1756 E0        5015            movx    a,@dptr
1757 C0E0      5016            push    acc
1759 A3        5017            inc     dptr
175A E0        5018            movx    a,@dptr
175B C0E0      5019            push    acc
175D 8C82      5020            mov     dpl,r4
175F 8D83      5021            mov     dph,r5
1761 8AF0      5022            mov     b,r2
1763 EB        5023            mov     a,r3
1764 120000    5024            lcall   ___fsmul
1767 AA82      5025            mov     r2,dpl
1769 AB83      5026            mov     r3,dph
176B ACF0      5027            mov     r4,b
176D FD        5028            mov     r5,a
176E E581      5029            mov     a,sp
1770 24FC      5030            add     a,#0xfc
1772 F581      5031            mov     sp,a
1774 D007      5032            pop     ar7
1776 D006      5033            pop     ar6
1778 8A82      5034            mov     dpl,r2
177A 8B83      5035            mov     dph,r3
177C 8CF0      5036            mov     b,r4
177E ED        5037            mov     a,r5
177F C004      5038            push    ar4
1781 C005      5039            push    ar5
1783 C006      5040            push    ar6
1785 C007      5041            push    ar7
1787 120000    5042            lcall   ___fs2uchar
178A E582      5043            mov     a,dpl
178C D007      5044            pop     ar7
178E D006      5045            pop     ar6
1790 D005      5046            pop     ar5
1792 D004      5047            pop     ar4
1794 904E30    5048            mov     dptr,#_pwm_right
1797 F0        5049            movx    @dptr,a
1798           5050   ;        main.c:1059: if (vx_err > 0){ //turn right
1798 C3        5051            clr     c
1799 E4        5052            clr     a
179A 9560      5053            subb    a,_Joystick_Control_sloc4_1_0
179C E4        5054            clr     a
179D 6480      5055            xrl     a,#0x80
179F 8561F0    5056            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
17A2 63F080    5057            xrl     b,#0x80
17A5 95F0      5058            subb    a,b
17A7 D005      5059            pop     ar5
17A9 D004      5060            pop     ar4
17AB 5000      5061            jnc     L039008?
17AD           5062   ;        main.c:1060: L_motor_dir = 1; 
17AD 904DF0    5063            mov     dptr,#_L_motor_dir
17B0 7401      5064            mov     a,#0x01
17B2 F0        5065            movx    @dptr,a
17B3           5066   ;        main.c:1061: R_motor_dir = 0; 
17B3 904DB0    5067            mov     dptr,#_R_motor_dir
17B6 E4        5068            clr     a
17B7 F0        5069            movx    @dptr,a
17B8 8000      5070            sjmp    L039011?
17BA           5071   L039008?:
17BA           5072   ;        main.c:1064: L_motor_dir = 0; 
17BA 904DF0    5073            mov     dptr,#_L_motor_dir
17BD E4        5074            clr     a
17BE F0        5075            movx    @dptr,a
17BF           5076   ;        main.c:1065: R_motor_dir = 1; 
17BF 904DB0    5077            mov     dptr,#_R_motor_dir
17C2 7401      5078            mov     a,#0x01
17C4 F0        5079            movx    @dptr,a
17C5           5080   L039011?:
17C5           5081   ;        main.c:1068: if ((vx_error>5)&&(vy_error)>5){
17C5 E510      5082            mov     a,_Joystick_Control_sloc3_1_0
17C7 7000      5083            jnz     L039062?
17C9 22        5084            ret
17CA           5085   L039062?:
17CA E570      5086            mov     a,_Joystick_Control_sloc1_1_0
17CC 7000      5087            jnz     L039063?
17CE 22        5088            ret
17CF           5089   L039063?:
17CF           5090   ;        main.c:1070: if (vy_err>0){
17CF C3        5091            clr     c
17D0 E4        5092            clr     a
17D1 9520      5093            subb    a,_Joystick_Control_sloc0_1_0
17D3 E4        5094            clr     a
17D4 6480      5095            xrl     a,#0x80
17D6 8521F0    5096            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
17D9 63F080    5097            xrl     b,#0x80
17DC 95F0      5098            subb    a,b
17DE 4000      5099            jc      L039064?
17E0 020000    5100            ljmp    L039023?
17E3           5101   L039064?:
17E3           5102   ;        main.c:1071: L_motor_dir = 0; 
17E3 904DF0    5103            mov     dptr,#_L_motor_dir
17E6           5104   ;        main.c:1072: R_motor_dir = 0; 
17E6 E4        5105            clr     a
17E7 F0        5106            movx    @dptr,a
17E8 904DB0    5107            mov     dptr,#_R_motor_dir
17EB F0        5108            movx    @dptr,a
17EC           5109   ;        main.c:1074: if (vx_err>0){
17EC C3        5110            clr     c
17ED E4        5111            clr     a
17EE 9560      5112            subb    a,_Joystick_Control_sloc4_1_0
17F0 E4        5113            clr     a
17F1 6480      5114            xrl     a,#0x80
17F3 8561F0    5115            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
17F6 63F080    5116            xrl     b,#0x80
17F9 95F0      5117            subb    a,b
17FB 4000      5118            jc      L039065?
17FD 020000    5119            ljmp    L039020?
1800           5120   L039065?:
1800           5121   ;        main.c:1075: if (vy*100<=vy_thres*100/2){
1800 8C00      5122            mov     __mulint_PARM_2,r4
1802 8D01      5123            mov     (__mulint_PARM_2 + 1),r5
1804 900064    5124            mov     dptr,#0x0064
1807 C004      5125            push    ar4
1809 C005      5126            push    ar5
180B C006      5127            push    ar6
180D C007      5128            push    ar7
180F 120000    5129            lcall   __mulint
1812 AA82      5130            mov     r2,dpl
1814 AB83      5131            mov     r3,dph
1816 D007      5132            pop     ar7
1818 D006      5133            pop     ar6
181A D005      5134            pop     ar5
181C D004      5135            pop     ar4
181E 85C000    5136            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
1821 85C101    5137            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
1824 900064    5138            mov     dptr,#0x0064
1827 C002      5139            push    ar2
1829 C003      5140            push    ar3
182B C004      5141            push    ar4
182D C005      5142            push    ar5
182F C006      5143            push    ar6
1831 C007      5144            push    ar7
1833 120000    5145            lcall   __mulint
1836 A882      5146            mov     r0,dpl
1838 A983      5147            mov     r1,dph
183A 750002    5148            mov     __divsint_PARM_2,#0x02
183D E4        5149            clr     a
183E F501      5150            mov     (__divsint_PARM_2 + 1),a
1840 8882      5151            mov     dpl,r0
1842 8983      5152            mov     dph,r1
1844 120000    5153            lcall   __divsint
1847 A882      5154            mov     r0,dpl
1849 A983      5155            mov     r1,dph
184B D007      5156            pop     ar7
184D D006      5157            pop     ar6
184F D005      5158            pop     ar5
1851 D004      5159            pop     ar4
1853 D003      5160            pop     ar3
1855 D002      5161            pop     ar2
1857 C3        5162            clr     c
1858 E8        5163            mov     a,r0
1859 9A        5164            subb    a,r2
185A E9        5165            mov     a,r1
185B 6480      5166            xrl     a,#0x80
185D 8BF0      5167            mov     b,r3
185F 63F080    5168            xrl     b,#0x80
1862 95F0      5169            subb    a,b
1864 5000      5170            jnc     L039066?
1866 020000    5171            ljmp    L039014?
1869           5172   L039066?:
1869           5173   ;        main.c:1076: pwm_left = vy_error; 
1869 C004      5174            push    ar4
186B C005      5175            push    ar5
186D 904E70    5176            mov     dptr,#_pwm_left
1870 EE        5177            mov     a,r6
1871 F0        5178            movx    @dptr,a
1872           5179   ;        main.c:1077: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
1872 904B70    5180            mov     dptr,#_pwm_corr
1875 E0        5181            movx    a,@dptr
1876 F5B0      5182            mov     _Joystick_Control_sloc5_1_0,a
1878 A3        5183            inc     dptr
1879 E0        5184            movx    a,@dptr
187A F5B1      5185            mov     (_Joystick_Control_sloc5_1_0 + 1),a
187C A3        5186            inc     dptr
187D E0        5187            movx    a,@dptr
187E F5B2      5188            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1880 A3        5189            inc     dptr
1881 E0        5190            movx    a,@dptr
1882 F5B3      5191            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1884 8E82      5192            mov     dpl,r6
1886 8F83      5193            mov     dph,r7
1888 C006      5194            push    ar6
188A C007      5195            push    ar7
188C 120000    5196            lcall   ___sint2fs
188F AA82      5197            mov     r2,dpl
1891 AB83      5198            mov     r3,dph
1893 ACF0      5199            mov     r4,b
1895 FD        5200            mov     r5,a
1896 C002      5201            push    ar2
1898 C003      5202            push    ar3
189A C004      5203            push    ar4
189C C005      5204            push    ar5
189E 85B082    5205            mov     dpl,_Joystick_Control_sloc5_1_0
18A1 85B183    5206            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
18A4 85B2F0    5207            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
18A7 E5B3      5208            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
18A9 120000    5209            lcall   ___fsmul
18AC AA82      5210            mov     r2,dpl
18AE AB83      5211            mov     r3,dph
18B0 ACF0      5212            mov     r4,b
18B2 FD        5213            mov     r5,a
18B3 E581      5214            mov     a,sp
18B5 24FC      5215            add     a,#0xfc
18B7 F581      5216            mov     sp,a
18B9 D007      5217            pop     ar7
18BB D006      5218            pop     ar6
18BD C004      5219            push    ar4
18BF C005      5220            push    ar5
18C1 C006      5221            push    ar6
18C3 C007      5222            push    ar7
18C5 C002      5223            push    ar2
18C7 C003      5224            push    ar3
18C9 C004      5225            push    ar4
18CB C005      5226            push    ar5
18CD 900000    5227            mov     dptr,#0x0000
18D0 75F0C8    5228            mov     b,#0xC8
18D3 7442      5229            mov     a,#0x42
18D5 120000    5230            lcall   ___fsmul
18D8 8582B0    5231            mov     _Joystick_Control_sloc5_1_0,dpl
18DB 8583B1    5232            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
18DE 85F0B2    5233            mov     (_Joystick_Control_sloc5_1_0 + 2),b
18E1 F5B3      5234            mov     (_Joystick_Control_sloc5_1_0 + 3),a
18E3 E581      5235            mov     a,sp
18E5 24FC      5236            add     a,#0xfc
18E7 F581      5237            mov     sp,a
18E9 D007      5238            pop     ar7
18EB D006      5239            pop     ar6
18ED D005      5240            pop     ar5
18EF D004      5241            pop     ar4
18F1 EE        5242            mov     a,r6
18F2 2500      5243            add     a,_Joystick_Control_sloc6_1_0
18F4 F582      5244            mov     dpl,a
18F6 EF        5245            mov     a,r7
18F7 3501      5246            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
18F9 F583      5247            mov     dph,a
18FB C006      5248            push    ar6
18FD C007      5249            push    ar7
18FF 120000    5250            lcall   ___sint2fs
1902 AA82      5251            mov     r2,dpl
1904 AB83      5252            mov     r3,dph
1906 ACF0      5253            mov     r4,b
1908 FD        5254            mov     r5,a
1909 C002      5255            push    ar2
190B C003      5256            push    ar3
190D C004      5257            push    ar4
190F C005      5258            push    ar5
1911 85B082    5259            mov     dpl,_Joystick_Control_sloc5_1_0
1914 85B183    5260            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1917 85B2F0    5261            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
191A E5B3      5262            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
191C 120000    5263            lcall   ___fsdiv
191F AA82      5264            mov     r2,dpl
1921 AB83      5265            mov     r3,dph
1923 ACF0      5266            mov     r4,b
1925 FD        5267            mov     r5,a
1926 E581      5268            mov     a,sp
1928 24FC      5269            add     a,#0xfc
192A F581      5270            mov     sp,a
192C D007      5271            pop     ar7
192E D006      5272            pop     ar6
1930 8A82      5273            mov     dpl,r2
1932 8B83      5274            mov     dph,r3
1934 8CF0      5275            mov     b,r4
1936 ED        5276            mov     a,r5
1937 C004      5277            push    ar4
1939 C005      5278            push    ar5
193B C006      5279            push    ar6
193D C007      5280            push    ar7
193F 120000    5281            lcall   ___fs2uchar
1942 E582      5282            mov     a,dpl
1944 D007      5283            pop     ar7
1946 D006      5284            pop     ar6
1948 D005      5285            pop     ar5
194A D004      5286            pop     ar4
194C 904E30    5287            mov     dptr,#_pwm_right
194F F0        5288            movx    @dptr,a
1950 D005      5289            pop     ar5
1952 D004      5290            pop     ar4
1954 020000    5291            ljmp    L039023?
1957           5292   L039014?:
1957           5293   ;        main.c:1080: pwm_left = vx_error; 
1957 C004      5294            push    ar4
1959 C005      5295            push    ar5
195B 904E70    5296            mov     dptr,#_pwm_left
195E E500      5297            mov     a,_Joystick_Control_sloc6_1_0
1960 F0        5298            movx    @dptr,a
1961           5299   ;        main.c:1081: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
1961 904B70    5300            mov     dptr,#_pwm_corr
1964 E0        5301            movx    a,@dptr
1965 F5B0      5302            mov     _Joystick_Control_sloc5_1_0,a
1967 A3        5303            inc     dptr
1968 E0        5304            movx    a,@dptr
1969 F5B1      5305            mov     (_Joystick_Control_sloc5_1_0 + 1),a
196B A3        5306            inc     dptr
196C E0        5307            movx    a,@dptr
196D F5B2      5308            mov     (_Joystick_Control_sloc5_1_0 + 2),a
196F A3        5309            inc     dptr
1970 E0        5310            movx    a,@dptr
1971 F5B3      5311            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1973 850082    5312            mov     dpl,_Joystick_Control_sloc6_1_0
1976 850183    5313            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
1979 C006      5314            push    ar6
197B C007      5315            push    ar7
197D 120000    5316            lcall   ___sint2fs
1980 AA82      5317            mov     r2,dpl
1982 AB83      5318            mov     r3,dph
1984 ACF0      5319            mov     r4,b
1986 FD        5320            mov     r5,a
1987 C002      5321            push    ar2
1989 C003      5322            push    ar3
198B C004      5323            push    ar4
198D C005      5324            push    ar5
198F 85B082    5325            mov     dpl,_Joystick_Control_sloc5_1_0
1992 85B183    5326            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1995 85B2F0    5327            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1998 E5B3      5328            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
199A 120000    5329            lcall   ___fsmul
199D AA82      5330            mov     r2,dpl
199F AB83      5331            mov     r3,dph
19A1 ACF0      5332            mov     r4,b
19A3 FD        5333            mov     r5,a
19A4 E581      5334            mov     a,sp
19A6 24FC      5335            add     a,#0xfc
19A8 F581      5336            mov     sp,a
19AA D007      5337            pop     ar7
19AC D006      5338            pop     ar6
19AE C004      5339            push    ar4
19B0 C005      5340            push    ar5
19B2 C006      5341            push    ar6
19B4 C007      5342            push    ar7
19B6 C002      5343            push    ar2
19B8 C003      5344            push    ar3
19BA C004      5345            push    ar4
19BC C005      5346            push    ar5
19BE 900000    5347            mov     dptr,#0x0000
19C1 75F0C8    5348            mov     b,#0xC8
19C4 7442      5349            mov     a,#0x42
19C6 120000    5350            lcall   ___fsmul
19C9 8582B0    5351            mov     _Joystick_Control_sloc5_1_0,dpl
19CC 8583B1    5352            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
19CF 85F0B2    5353            mov     (_Joystick_Control_sloc5_1_0 + 2),b
19D2 F5B3      5354            mov     (_Joystick_Control_sloc5_1_0 + 3),a
19D4 E581      5355            mov     a,sp
19D6 24FC      5356            add     a,#0xfc
19D8 F581      5357            mov     sp,a
19DA D007      5358            pop     ar7
19DC D006      5359            pop     ar6
19DE D005      5360            pop     ar5
19E0 D004      5361            pop     ar4
19E2 EE        5362            mov     a,r6
19E3 2500      5363            add     a,_Joystick_Control_sloc6_1_0
19E5 F582      5364            mov     dpl,a
19E7 EF        5365            mov     a,r7
19E8 3501      5366            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
19EA F583      5367            mov     dph,a
19EC C006      5368            push    ar6
19EE C007      5369            push    ar7
19F0 120000    5370            lcall   ___sint2fs
19F3 AA82      5371            mov     r2,dpl
19F5 AB83      5372            mov     r3,dph
19F7 ACF0      5373            mov     r4,b
19F9 FD        5374            mov     r5,a
19FA C002      5375            push    ar2
19FC C003      5376            push    ar3
19FE C004      5377            push    ar4
1A00 C005      5378            push    ar5
1A02 85B082    5379            mov     dpl,_Joystick_Control_sloc5_1_0
1A05 85B183    5380            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1A08 85B2F0    5381            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1A0B E5B3      5382            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1A0D 120000    5383            lcall   ___fsdiv
1A10 AA82      5384            mov     r2,dpl
1A12 AB83      5385            mov     r3,dph
1A14 ACF0      5386            mov     r4,b
1A16 FD        5387            mov     r5,a
1A17 E581      5388            mov     a,sp
1A19 24FC      5389            add     a,#0xfc
1A1B F581      5390            mov     sp,a
1A1D D007      5391            pop     ar7
1A1F D006      5392            pop     ar6
1A21 8A82      5393            mov     dpl,r2
1A23 8B83      5394            mov     dph,r3
1A25 8CF0      5395            mov     b,r4
1A27 ED        5396            mov     a,r5
1A28 C004      5397            push    ar4
1A2A C005      5398            push    ar5
1A2C C006      5399            push    ar6
1A2E C007      5400            push    ar7
1A30 120000    5401            lcall   ___fs2uchar
1A33 E582      5402            mov     a,dpl
1A35 D007      5403            pop     ar7
1A37 D006      5404            pop     ar6
1A39 D005      5405            pop     ar5
1A3B D004      5406            pop     ar4
1A3D 904E30    5407            mov     dptr,#_pwm_right
1A40 F0        5408            movx    @dptr,a
1A41 D005      5409            pop     ar5
1A43 D004      5410            pop     ar4
1A45 020000    5411            ljmp    L039023?
1A48           5412   L039020?:
1A48           5413   ;        main.c:1086: if (vy*100<=vy_thres*100/2){
1A48 8C00      5414            mov     __mulint_PARM_2,r4
1A4A 8D01      5415            mov     (__mulint_PARM_2 + 1),r5
1A4C 900064    5416            mov     dptr,#0x0064
1A4F C004      5417            push    ar4
1A51 C005      5418            push    ar5
1A53 C006      5419            push    ar6
1A55 C007      5420            push    ar7
1A57 120000    5421            lcall   __mulint
1A5A AA82      5422            mov     r2,dpl
1A5C AB83      5423            mov     r3,dph
1A5E D007      5424            pop     ar7
1A60 D006      5425            pop     ar6
1A62 D005      5426            pop     ar5
1A64 D004      5427            pop     ar4
1A66 85C000    5428            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
1A69 85C101    5429            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
1A6C 900064    5430            mov     dptr,#0x0064
1A6F C002      5431            push    ar2
1A71 C003      5432            push    ar3
1A73 C004      5433            push    ar4
1A75 C005      5434            push    ar5
1A77 C006      5435            push    ar6
1A79 C007      5436            push    ar7
1A7B 120000    5437            lcall   __mulint
1A7E A882      5438            mov     r0,dpl
1A80 A983      5439            mov     r1,dph
1A82 750002    5440            mov     __divsint_PARM_2,#0x02
1A85 E4        5441            clr     a
1A86 F501      5442            mov     (__divsint_PARM_2 + 1),a
1A88 8882      5443            mov     dpl,r0
1A8A 8983      5444            mov     dph,r1
1A8C 120000    5445            lcall   __divsint
1A8F A882      5446            mov     r0,dpl
1A91 A983      5447            mov     r1,dph
1A93 D007      5448            pop     ar7
1A95 D006      5449            pop     ar6
1A97 D005      5450            pop     ar5
1A99 D004      5451            pop     ar4
1A9B D003      5452            pop     ar3
1A9D D002      5453            pop     ar2
1A9F C3        5454            clr     c
1AA0 E8        5455            mov     a,r0
1AA1 9A        5456            subb    a,r2
1AA2 E9        5457            mov     a,r1
1AA3 6480      5458            xrl     a,#0x80
1AA5 8BF0      5459            mov     b,r3
1AA7 63F080    5460            xrl     b,#0x80
1AAA 95F0      5461            subb    a,b
1AAC 5000      5462            jnc     L039067?
1AAE 020000    5463            ljmp    L039017?
1AB1           5464   L039067?:
1AB1           5465   ;        main.c:1087: pwm_left = vy_error*100/(vx_error+vy_error);
1AB1 C004      5466            push    ar4
1AB3 C005      5467            push    ar5
1AB5 8E00      5468            mov     __mulint_PARM_2,r6
1AB7 8F01      5469            mov     (__mulint_PARM_2 + 1),r7
1AB9 900064    5470            mov     dptr,#0x0064
1ABC C004      5471            push    ar4
1ABE C005      5472            push    ar5
1AC0 C006      5473            push    ar6
1AC2 C007      5474            push    ar7
1AC4 120000    5475            lcall   __mulint
1AC7 AA82      5476            mov     r2,dpl
1AC9 AB83      5477            mov     r3,dph
1ACB D007      5478            pop     ar7
1ACD D006      5479            pop     ar6
1ACF EE        5480            mov     a,r6
1AD0 2500      5481            add     a,_Joystick_Control_sloc6_1_0
1AD2 F500      5482            mov     __divsint_PARM_2,a
1AD4 EF        5483            mov     a,r7
1AD5 3501      5484            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1AD7 F501      5485            mov     (__divsint_PARM_2 + 1),a
1AD9 8A82      5486            mov     dpl,r2
1ADB 8B83      5487            mov     dph,r3
1ADD C006      5488            push    ar6
1ADF C007      5489            push    ar7
1AE1 120000    5490            lcall   __divsint
1AE4 AA82      5491            mov     r2,dpl
1AE6 D007      5492            pop     ar7
1AE8 D006      5493            pop     ar6
1AEA D005      5494            pop     ar5
1AEC D004      5495            pop     ar4
1AEE 904E70    5496            mov     dptr,#_pwm_left
1AF1 EA        5497            mov     a,r2
1AF2 F0        5498            movx    @dptr,a
1AF3           5499   ;        main.c:1088: pwm_right = vy_error*pwm_corr; 
1AF3 8E82      5500            mov     dpl,r6
1AF5 8F83      5501            mov     dph,r7
1AF7 C006      5502            push    ar6
1AF9 C007      5503            push    ar7
1AFB 120000    5504            lcall   ___sint2fs
1AFE AA82      5505            mov     r2,dpl
1B00 AB83      5506            mov     r3,dph
1B02 ACF0      5507            mov     r4,b
1B04 FD        5508            mov     r5,a
1B05 904B70    5509            mov     dptr,#_pwm_corr
1B08 E0        5510            movx    a,@dptr
1B09 C0E0      5511            push    acc
1B0B A3        5512            inc     dptr
1B0C E0        5513            movx    a,@dptr
1B0D C0E0      5514            push    acc
1B0F A3        5515            inc     dptr
1B10 E0        5516            movx    a,@dptr
1B11 C0E0      5517            push    acc
1B13 A3        5518            inc     dptr
1B14 E0        5519            movx    a,@dptr
1B15 C0E0      5520            push    acc
1B17 8A82      5521            mov     dpl,r2
1B19 8B83      5522            mov     dph,r3
1B1B 8CF0      5523            mov     b,r4
1B1D ED        5524            mov     a,r5
1B1E 120000    5525            lcall   ___fsmul
1B21 AA82      5526            mov     r2,dpl
1B23 AB83      5527            mov     r3,dph
1B25 ACF0      5528            mov     r4,b
1B27 FD        5529            mov     r5,a
1B28 E581      5530            mov     a,sp
1B2A 24FC      5531            add     a,#0xfc
1B2C F581      5532            mov     sp,a
1B2E D007      5533            pop     ar7
1B30 D006      5534            pop     ar6
1B32 8A82      5535            mov     dpl,r2
1B34 8B83      5536            mov     dph,r3
1B36 8CF0      5537            mov     b,r4
1B38 ED        5538            mov     a,r5
1B39 C004      5539            push    ar4
1B3B C005      5540            push    ar5
1B3D C006      5541            push    ar6
1B3F C007      5542            push    ar7
1B41 120000    5543            lcall   ___fs2uchar
1B44 E582      5544            mov     a,dpl
1B46 D007      5545            pop     ar7
1B48 D006      5546            pop     ar6
1B4A D005      5547            pop     ar5
1B4C D004      5548            pop     ar4
1B4E 904E30    5549            mov     dptr,#_pwm_right
1B51 F0        5550            movx    @dptr,a
1B52 D005      5551            pop     ar5
1B54 D004      5552            pop     ar4
1B56 020000    5553            ljmp    L039023?
1B59           5554   L039017?:
1B59           5555   ;        main.c:1091: pwm_left = vx_error*100/(vx_error+vy_error);
1B59 C004      5556            push    ar4
1B5B C005      5557            push    ar5
1B5D 850000    5558            mov     __mulint_PARM_2,_Joystick_Control_sloc6_1_0
1B60 850101    5559            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc6_1_0 + 1)
1B63 900064    5560            mov     dptr,#0x0064
1B66 C004      5561            push    ar4
1B68 C005      5562            push    ar5
1B6A C006      5563            push    ar6
1B6C C007      5564            push    ar7
1B6E 120000    5565            lcall   __mulint
1B71 AA82      5566            mov     r2,dpl
1B73 AB83      5567            mov     r3,dph
1B75 D007      5568            pop     ar7
1B77 D006      5569            pop     ar6
1B79 EE        5570            mov     a,r6
1B7A 2500      5571            add     a,_Joystick_Control_sloc6_1_0
1B7C F500      5572            mov     __divsint_PARM_2,a
1B7E EF        5573            mov     a,r7
1B7F 3501      5574            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1B81 F501      5575            mov     (__divsint_PARM_2 + 1),a
1B83 8A82      5576            mov     dpl,r2
1B85 8B83      5577            mov     dph,r3
1B87 C006      5578            push    ar6
1B89 C007      5579            push    ar7
1B8B 120000    5580            lcall   __divsint
1B8E AA82      5581            mov     r2,dpl
1B90 D007      5582            pop     ar7
1B92 D006      5583            pop     ar6
1B94 D005      5584            pop     ar5
1B96 D004      5585            pop     ar4
1B98 904E70    5586            mov     dptr,#_pwm_left
1B9B EA        5587            mov     a,r2
1B9C F0        5588            movx    @dptr,a
1B9D           5589   ;        main.c:1092: pwm_right = vx_error*pwm_corr; 
1B9D 850082    5590            mov     dpl,_Joystick_Control_sloc6_1_0
1BA0 850183    5591            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
1BA3 C006      5592            push    ar6
1BA5 C007      5593            push    ar7
1BA7 120000    5594            lcall   ___sint2fs
1BAA AA82      5595            mov     r2,dpl
1BAC AB83      5596            mov     r3,dph
1BAE ACF0      5597            mov     r4,b
1BB0 FD        5598            mov     r5,a
1BB1 904B70    5599            mov     dptr,#_pwm_corr
1BB4 E0        5600            movx    a,@dptr
1BB5 C0E0      5601            push    acc
1BB7 A3        5602            inc     dptr
1BB8 E0        5603            movx    a,@dptr
1BB9 C0E0      5604            push    acc
1BBB A3        5605            inc     dptr
1BBC E0        5606            movx    a,@dptr
1BBD C0E0      5607            push    acc
1BBF A3        5608            inc     dptr
1BC0 E0        5609            movx    a,@dptr
1BC1 C0E0      5610            push    acc
1BC3 8A82      5611            mov     dpl,r2
1BC5 8B83      5612            mov     dph,r3
1BC7 8CF0      5613            mov     b,r4
1BC9 ED        5614            mov     a,r5
1BCA 120000    5615            lcall   ___fsmul
1BCD AA82      5616            mov     r2,dpl
1BCF AB83      5617            mov     r3,dph
1BD1 ACF0      5618            mov     r4,b
1BD3 FD        5619            mov     r5,a
1BD4 E581      5620            mov     a,sp
1BD6 24FC      5621            add     a,#0xfc
1BD8 F581      5622            mov     sp,a
1BDA D007      5623            pop     ar7
1BDC D006      5624            pop     ar6
1BDE 8A82      5625            mov     dpl,r2
1BE0 8B83      5626            mov     dph,r3
1BE2 8CF0      5627            mov     b,r4
1BE4 ED        5628            mov     a,r5
1BE5 C004      5629            push    ar4
1BE7 C005      5630            push    ar5
1BE9 C006      5631            push    ar6
1BEB C007      5632            push    ar7
1BED 120000    5633            lcall   ___fs2uchar
1BF0 E582      5634            mov     a,dpl
1BF2 D007      5635            pop     ar7
1BF4 D006      5636            pop     ar6
1BF6 D005      5637            pop     ar5
1BF8 D004      5638            pop     ar4
1BFA 904E30    5639            mov     dptr,#_pwm_right
1BFD F0        5640            movx    @dptr,a
1BFE           5641   ;        main.c:1124: return; 
1BFE D005      5642            pop     ar5
1C00 D004      5643            pop     ar4
1C02           5644   ;        main.c:1092: pwm_right = vx_error*pwm_corr; 
1C02           5645   L039023?:
1C02           5646   ;        main.c:1097: if (vy_err<0){
1C02 E521      5647            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
1C04 20E740    5648            jb      acc.7,L039068?
1C07 22        5649            ret
1C08           5650   L039068?:
1C08           5651   ;        main.c:1098: L_motor_dir = 1; 
1C08 904DF0    5652            mov     dptr,#_L_motor_dir
1C0B 7401      5653            mov     a,#0x01
1C0D F0        5654            movx    @dptr,a
1C0E           5655   ;        main.c:1099: R_motor_dir = 1; 
1C0E 904DB0    5656            mov     dptr,#_R_motor_dir
1C11 7401      5657            mov     a,#0x01
1C13 F0        5658            movx    @dptr,a
1C14           5659   ;        main.c:1101: if (vx_err>0){
1C14 C3        5660            clr     c
1C15 E4        5661            clr     a
1C16 9560      5662            subb    a,_Joystick_Control_sloc4_1_0
1C18 E4        5663            clr     a
1C19 6480      5664            xrl     a,#0x80
1C1B 8561F0    5665            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
1C1E 63F080    5666            xrl     b,#0x80
1C21 95F0      5667            subb    a,b
1C23 4000      5668            jc      L039069?
1C25 020000    5669            ljmp    L039031?
1C28           5670   L039069?:
1C28           5671   ;        main.c:1102: if (vy*100<=vy_thres*100/2){
1C28 8C00      5672            mov     __mulint_PARM_2,r4
1C2A 8D01      5673            mov     (__mulint_PARM_2 + 1),r5
1C2C 900064    5674            mov     dptr,#0x0064
1C2F C006      5675            push    ar6
1C31 C007      5676            push    ar7
1C33 120000    5677            lcall   __mulint
1C36 AA82      5678            mov     r2,dpl
1C38 AB83      5679            mov     r3,dph
1C3A D007      5680            pop     ar7
1C3C D006      5681            pop     ar6
1C3E 85C000    5682            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
1C41 85C101    5683            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
1C44 900064    5684            mov     dptr,#0x0064
1C47 C002      5685            push    ar2
1C49 C003      5686            push    ar3
1C4B C006      5687            push    ar6
1C4D C007      5688            push    ar7
1C4F 120000    5689            lcall   __mulint
1C52 A882      5690            mov     r0,dpl
1C54 A983      5691            mov     r1,dph
1C56 750002    5692            mov     __divsint_PARM_2,#0x02
1C59 E4        5693            clr     a
1C5A F501      5694            mov     (__divsint_PARM_2 + 1),a
1C5C 8882      5695            mov     dpl,r0
1C5E 8983      5696            mov     dph,r1
1C60 120000    5697            lcall   __divsint
1C63 A882      5698            mov     r0,dpl
1C65 A983      5699            mov     r1,dph
1C67 D007      5700            pop     ar7
1C69 D006      5701            pop     ar6
1C6B D003      5702            pop     ar3
1C6D D002      5703            pop     ar2
1C6F C3        5704            clr     c
1C70 E8        5705            mov     a,r0
1C71 9A        5706            subb    a,r2
1C72 E9        5707            mov     a,r1
1C73 6480      5708            xrl     a,#0x80
1C75 8BF0      5709            mov     b,r3
1C77 63F080    5710            xrl     b,#0x80
1C7A 95F0      5711            subb    a,b
1C7C 5000      5712            jnc     L039070?
1C7E 020000    5713            ljmp    L039025?
1C81           5714   L039070?:
1C81           5715   ;        main.c:1103: pwm_left = vy_error; 
1C81 904E70    5716            mov     dptr,#_pwm_left
1C84 EE        5717            mov     a,r6
1C85 F0        5718            movx    @dptr,a
1C86           5719   ;        main.c:1104: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
1C86 904B70    5720            mov     dptr,#_pwm_corr
1C89 E0        5721            movx    a,@dptr
1C8A F5B0      5722            mov     _Joystick_Control_sloc5_1_0,a
1C8C A3        5723            inc     dptr
1C8D E0        5724            movx    a,@dptr
1C8E F5B1      5725            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1C90 A3        5726            inc     dptr
1C91 E0        5727            movx    a,@dptr
1C92 F5B2      5728            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1C94 A3        5729            inc     dptr
1C95 E0        5730            movx    a,@dptr
1C96 F5B3      5731            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1C98 8E82      5732            mov     dpl,r6
1C9A 8F83      5733            mov     dph,r7
1C9C C006      5734            push    ar6
1C9E C007      5735            push    ar7
1CA0 120000    5736            lcall   ___sint2fs
1CA3 AA82      5737            mov     r2,dpl
1CA5 AB83      5738            mov     r3,dph
1CA7 A8F0      5739            mov     r0,b
1CA9 F9        5740            mov     r1,a
1CAA C002      5741            push    ar2
1CAC C003      5742            push    ar3
1CAE C000      5743            push    ar0
1CB0 C001      5744            push    ar1
1CB2 85B082    5745            mov     dpl,_Joystick_Control_sloc5_1_0
1CB5 85B183    5746            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1CB8 85B2F0    5747            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1CBB E5B3      5748            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1CBD 120000    5749            lcall   ___fsmul
1CC0 AA82      5750            mov     r2,dpl
1CC2 AB83      5751            mov     r3,dph
1CC4 A8F0      5752            mov     r0,b
1CC6 F9        5753            mov     r1,a
1CC7 E581      5754            mov     a,sp
1CC9 24FC      5755            add     a,#0xfc
1CCB F581      5756            mov     sp,a
1CCD C002      5757            push    ar2
1CCF C003      5758            push    ar3
1CD1 C000      5759            push    ar0
1CD3 C001      5760            push    ar1
1CD5 900000    5761            mov     dptr,#0x0000
1CD8 75F0C8    5762            mov     b,#0xC8
1CDB 7442      5763            mov     a,#0x42
1CDD 120000    5764            lcall   ___fsmul
1CE0 8582B0    5765            mov     _Joystick_Control_sloc5_1_0,dpl
1CE3 8583B1    5766            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1CE6 85F0B2    5767            mov     (_Joystick_Control_sloc5_1_0 + 2),b
1CE9 F5B3      5768            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1CEB E581      5769            mov     a,sp
1CED 24FC      5770            add     a,#0xfc
1CEF F581      5771            mov     sp,a
1CF1 D007      5772            pop     ar7
1CF3 D006      5773            pop     ar6
1CF5 EE        5774            mov     a,r6
1CF6 2500      5775            add     a,_Joystick_Control_sloc6_1_0
1CF8 F582      5776            mov     dpl,a
1CFA EF        5777            mov     a,r7
1CFB 3501      5778            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1CFD F583      5779            mov     dph,a
1CFF 120000    5780            lcall   ___sint2fs
1D02 AA82      5781            mov     r2,dpl
1D04 AB83      5782            mov     r3,dph
1D06 A8F0      5783            mov     r0,b
1D08 F9        5784            mov     r1,a
1D09 C002      5785            push    ar2
1D0B C003      5786            push    ar3
1D0D C000      5787            push    ar0
1D0F C001      5788            push    ar1
1D11 85B082    5789            mov     dpl,_Joystick_Control_sloc5_1_0
1D14 85B183    5790            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1D17 85B2F0    5791            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1D1A E5B3      5792            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1D1C 120000    5793            lcall   ___fsdiv
1D1F AA82      5794            mov     r2,dpl
1D21 AB83      5795            mov     r3,dph
1D23 A8F0      5796            mov     r0,b
1D25 F9        5797            mov     r1,a
1D26 E581      5798            mov     a,sp
1D28 24FC      5799            add     a,#0xfc
1D2A F581      5800            mov     sp,a
1D2C 8A82      5801            mov     dpl,r2
1D2E 8B83      5802            mov     dph,r3
1D30 88F0      5803            mov     b,r0
1D32 E9        5804            mov     a,r1
1D33 120000    5805            lcall   ___fs2uchar
1D36 E582      5806            mov     a,dpl
1D38 904E30    5807            mov     dptr,#_pwm_right
1D3B F0        5808            movx    @dptr,a
1D3C 22        5809            ret
1D3D           5810   L039025?:
1D3D           5811   ;        main.c:1107: pwm_left = vx_error; 
1D3D 904E70    5812            mov     dptr,#_pwm_left
1D40 E500      5813            mov     a,_Joystick_Control_sloc6_1_0
1D42 F0        5814            movx    @dptr,a
1D43           5815   ;        main.c:1108: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
1D43 904B70    5816            mov     dptr,#_pwm_corr
1D46 E0        5817            movx    a,@dptr
1D47 F5B0      5818            mov     _Joystick_Control_sloc5_1_0,a
1D49 A3        5819            inc     dptr
1D4A E0        5820            movx    a,@dptr
1D4B F5B1      5821            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1D4D A3        5822            inc     dptr
1D4E E0        5823            movx    a,@dptr
1D4F F5B2      5824            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1D51 A3        5825            inc     dptr
1D52 E0        5826            movx    a,@dptr
1D53 F5B3      5827            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1D55 850082    5828            mov     dpl,_Joystick_Control_sloc6_1_0
1D58 850183    5829            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
1D5B C006      5830            push    ar6
1D5D C007      5831            push    ar7
1D5F 120000    5832            lcall   ___sint2fs
1D62 AA82      5833            mov     r2,dpl
1D64 AB83      5834            mov     r3,dph
1D66 A8F0      5835            mov     r0,b
1D68 F9        5836            mov     r1,a
1D69 C002      5837            push    ar2
1D6B C003      5838            push    ar3
1D6D C000      5839            push    ar0
1D6F C001      5840            push    ar1
1D71 85B082    5841            mov     dpl,_Joystick_Control_sloc5_1_0
1D74 85B183    5842            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1D77 85B2F0    5843            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1D7A E5B3      5844            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1D7C 120000    5845            lcall   ___fsmul
1D7F AA82      5846            mov     r2,dpl
1D81 AB83      5847            mov     r3,dph
1D83 A8F0      5848            mov     r0,b
1D85 F9        5849            mov     r1,a
1D86 E581      5850            mov     a,sp
1D88 24FC      5851            add     a,#0xfc
1D8A F581      5852            mov     sp,a
1D8C C002      5853            push    ar2
1D8E C003      5854            push    ar3
1D90 C000      5855            push    ar0
1D92 C001      5856            push    ar1
1D94 900000    5857            mov     dptr,#0x0000
1D97 75F0C8    5858            mov     b,#0xC8
1D9A 7442      5859            mov     a,#0x42
1D9C 120000    5860            lcall   ___fsmul
1D9F 8582B0    5861            mov     _Joystick_Control_sloc5_1_0,dpl
1DA2 8583B1    5862            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1DA5 85F0B2    5863            mov     (_Joystick_Control_sloc5_1_0 + 2),b
1DA8 F5B3      5864            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1DAA E581      5865            mov     a,sp
1DAC 24FC      5866            add     a,#0xfc
1DAE F581      5867            mov     sp,a
1DB0 D007      5868            pop     ar7
1DB2 D006      5869            pop     ar6
1DB4 EE        5870            mov     a,r6
1DB5 2500      5871            add     a,_Joystick_Control_sloc6_1_0
1DB7 F582      5872            mov     dpl,a
1DB9 EF        5873            mov     a,r7
1DBA 3501      5874            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1DBC F583      5875            mov     dph,a
1DBE 120000    5876            lcall   ___sint2fs
1DC1 AA82      5877            mov     r2,dpl
1DC3 AB83      5878            mov     r3,dph
1DC5 A8F0      5879            mov     r0,b
1DC7 F9        5880            mov     r1,a
1DC8 C002      5881            push    ar2
1DCA C003      5882            push    ar3
1DCC C000      5883            push    ar0
1DCE C001      5884            push    ar1
1DD0 85B082    5885            mov     dpl,_Joystick_Control_sloc5_1_0
1DD3 85B183    5886            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1DD6 85B2F0    5887            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1DD9 E5B3      5888            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1DDB 120000    5889            lcall   ___fsdiv
1DDE AA82      5890            mov     r2,dpl
1DE0 AB83      5891            mov     r3,dph
1DE2 A8F0      5892            mov     r0,b
1DE4 F9        5893            mov     r1,a
1DE5 E581      5894            mov     a,sp
1DE7 24FC      5895            add     a,#0xfc
1DE9 F581      5896            mov     sp,a
1DEB 8A82      5897            mov     dpl,r2
1DED 8B83      5898            mov     dph,r3
1DEF 88F0      5899            mov     b,r0
1DF1 E9        5900            mov     a,r1
1DF2 120000    5901            lcall   ___fs2uchar
1DF5 E582      5902            mov     a,dpl
1DF7 904E30    5903            mov     dptr,#_pwm_right
1DFA F0        5904            movx    @dptr,a
1DFB 22        5905            ret
1DFC           5906   L039031?:
1DFC           5907   ;        main.c:1113: if (vy*100<=vy_thres*100/2){
1DFC 8C00      5908            mov     __mulint_PARM_2,r4
1DFE 8D01      5909            mov     (__mulint_PARM_2 + 1),r5
1E00 900064    5910            mov     dptr,#0x0064
1E03 C006      5911            push    ar6
1E05 C007      5912            push    ar7
1E07 120000    5913            lcall   __mulint
1E0A AA82      5914            mov     r2,dpl
1E0C AB83      5915            mov     r3,dph
1E0E D007      5916            pop     ar7
1E10 D006      5917            pop     ar6
1E12 85C000    5918            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
1E15 85C101    5919            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
1E18 900064    5920            mov     dptr,#0x0064
1E1B C002      5921            push    ar2
1E1D C003      5922            push    ar3
1E1F C006      5923            push    ar6
1E21 C007      5924            push    ar7
1E23 120000    5925            lcall   __mulint
1E26 AC82      5926            mov     r4,dpl
1E28 AD83      5927            mov     r5,dph
1E2A 750002    5928            mov     __divsint_PARM_2,#0x02
1E2D E4        5929            clr     a
1E2E F501      5930            mov     (__divsint_PARM_2 + 1),a
1E30 8C82      5931            mov     dpl,r4
1E32 8D83      5932            mov     dph,r5
1E34 120000    5933            lcall   __divsint
1E37 AC82      5934            mov     r4,dpl
1E39 AD83      5935            mov     r5,dph
1E3B D007      5936            pop     ar7
1E3D D006      5937            pop     ar6
1E3F D003      5938            pop     ar3
1E41 D002      5939            pop     ar2
1E43 C3        5940            clr     c
1E44 EC        5941            mov     a,r4
1E45 9A        5942            subb    a,r2
1E46 ED        5943            mov     a,r5
1E47 6480      5944            xrl     a,#0x80
1E49 8BF0      5945            mov     b,r3
1E4B 63F080    5946            xrl     b,#0x80
1E4E 95F0      5947            subb    a,b
1E50 5000      5948            jnc     L039071?
1E52 020000    5949            ljmp    L039028?
1E55           5950   L039071?:
1E55           5951   ;        main.c:1114: pwm_left = vy_error*100/(vx_error+vy_error);
1E55 8E00      5952            mov     __mulint_PARM_2,r6
1E57 8F01      5953            mov     (__mulint_PARM_2 + 1),r7
1E59 900064    5954            mov     dptr,#0x0064
1E5C C006      5955            push    ar6
1E5E C007      5956            push    ar7
1E60 120000    5957            lcall   __mulint
1E63 AA82      5958            mov     r2,dpl
1E65 AB83      5959            mov     r3,dph
1E67 D007      5960            pop     ar7
1E69 D006      5961            pop     ar6
1E6B EE        5962            mov     a,r6
1E6C 2500      5963            add     a,_Joystick_Control_sloc6_1_0
1E6E F500      5964            mov     __divsint_PARM_2,a
1E70 EF        5965            mov     a,r7
1E71 3501      5966            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1E73 F501      5967            mov     (__divsint_PARM_2 + 1),a
1E75 8A82      5968            mov     dpl,r2
1E77 8B83      5969            mov     dph,r3
1E79 C006      5970            push    ar6
1E7B C007      5971            push    ar7
1E7D 120000    5972            lcall   __divsint
1E80 AA82      5973            mov     r2,dpl
1E82 D007      5974            pop     ar7
1E84 D006      5975            pop     ar6
1E86 904E70    5976            mov     dptr,#_pwm_left
1E89 EA        5977            mov     a,r2
1E8A F0        5978            movx    @dptr,a
1E8B           5979   ;        main.c:1115: pwm_right =pwm_corr*vy_error; 
1E8B 904B70    5980            mov     dptr,#_pwm_corr
1E8E E0        5981            movx    a,@dptr
1E8F F5B0      5982            mov     _Joystick_Control_sloc5_1_0,a
1E91 A3        5983            inc     dptr
1E92 E0        5984            movx    a,@dptr
1E93 F5B1      5985            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1E95 A3        5986            inc     dptr
1E96 E0        5987            movx    a,@dptr
1E97 F5B2      5988            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1E99 A3        5989            inc     dptr
1E9A E0        5990            movx    a,@dptr
1E9B F5B3      5991            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1E9D 8E82      5992            mov     dpl,r6
1E9F 8F83      5993            mov     dph,r7
1EA1 120000    5994            lcall   ___sint2fs
1EA4 A882      5995            mov     r0,dpl
1EA6 A983      5996            mov     r1,dph
1EA8 AAF0      5997            mov     r2,b
1EAA FB        5998            mov     r3,a
1EAB C000      5999            push    ar0
1EAD C001      6000            push    ar1
1EAF C002      6001            push    ar2
1EB1 C003      6002            push    ar3
1EB3 85B082    6003            mov     dpl,_Joystick_Control_sloc5_1_0
1EB6 85B183    6004            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1EB9 85B2F0    6005            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1EBC E5B3      6006            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1EBE 120000    6007            lcall   ___fsmul
1EC1 AA82      6008            mov     r2,dpl
1EC3 AB83      6009            mov     r3,dph
1EC5 ACF0      6010            mov     r4,b
1EC7 FD        6011            mov     r5,a
1EC8 E581      6012            mov     a,sp
1ECA 24FC      6013            add     a,#0xfc
1ECC F581      6014            mov     sp,a
1ECE 8A82      6015            mov     dpl,r2
1ED0 8B83      6016            mov     dph,r3
1ED2 8CF0      6017            mov     b,r4
1ED4 ED        6018            mov     a,r5
1ED5 120000    6019            lcall   ___fs2uchar
1ED8 E582      6020            mov     a,dpl
1EDA 904E30    6021            mov     dptr,#_pwm_right
1EDD F0        6022            movx    @dptr,a
1EDE 22        6023            ret
1EDF           6024   L039028?:
1EDF           6025   ;        main.c:1118: pwm_left = vx_error*100/(vx_error+vy_error);
1EDF 850000    6026            mov     __mulint_PARM_2,_Joystick_Control_sloc6_1_0
1EE2 850101    6027            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc6_1_0 + 1)
1EE5 900064    6028            mov     dptr,#0x0064
1EE8 C006      6029            push    ar6
1EEA C007      6030            push    ar7
1EEC 120000    6031            lcall   __mulint
1EEF AA82      6032            mov     r2,dpl
1EF1 AB83      6033            mov     r3,dph
1EF3 D007      6034            pop     ar7
1EF5 D006      6035            pop     ar6
1EF7 EE        6036            mov     a,r6
1EF8 2500      6037            add     a,_Joystick_Control_sloc6_1_0
1EFA F500      6038            mov     __divsint_PARM_2,a
1EFC EF        6039            mov     a,r7
1EFD 3501      6040            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1EFF F501      6041            mov     (__divsint_PARM_2 + 1),a
1F01 8A82      6042            mov     dpl,r2
1F03 8B83      6043            mov     dph,r3
1F05 120000    6044            lcall   __divsint
1F08 AA82      6045            mov     r2,dpl
1F0A 904E70    6046            mov     dptr,#_pwm_left
1F0D EA        6047            mov     a,r2
1F0E F0        6048            movx    @dptr,a
1F0F           6049   ;        main.c:1119: pwm_right = pwm_corr*vx_error; 
1F0F 904B70    6050            mov     dptr,#_pwm_corr
1F12 E0        6051            movx    a,@dptr
1F13 FA        6052            mov     r2,a
1F14 A3        6053            inc     dptr
1F15 E0        6054            movx    a,@dptr
1F16 FB        6055            mov     r3,a
1F17 A3        6056            inc     dptr
1F18 E0        6057            movx    a,@dptr
1F19 FC        6058            mov     r4,a
1F1A A3        6059            inc     dptr
1F1B E0        6060            movx    a,@dptr
1F1C FD        6061            mov     r5,a
1F1D 850082    6062            mov     dpl,_Joystick_Control_sloc6_1_0
1F20 850183    6063            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
1F23 C002      6064            push    ar2
1F25 C003      6065            push    ar3
1F27 C004      6066            push    ar4
1F29 C005      6067            push    ar5
1F2B 120000    6068            lcall   ___sint2fs
1F2E AE82      6069            mov     r6,dpl
1F30 AF83      6070            mov     r7,dph
1F32 A8F0      6071            mov     r0,b
1F34 F9        6072            mov     r1,a
1F35 D005      6073            pop     ar5
1F37 D004      6074            pop     ar4
1F39 D003      6075            pop     ar3
1F3B D002      6076            pop     ar2
1F3D C006      6077            push    ar6
1F3F C007      6078            push    ar7
1F41 C000      6079            push    ar0
1F43 C001      6080            push    ar1
1F45 8A82      6081            mov     dpl,r2
1F47 8B83      6082            mov     dph,r3
1F49 8CF0      6083            mov     b,r4
1F4B ED        6084            mov     a,r5
1F4C 120000    6085            lcall   ___fsmul
1F4F AA82      6086            mov     r2,dpl
1F51 AB83      6087            mov     r3,dph
1F53 ACF0      6088            mov     r4,b
1F55 FD        6089            mov     r5,a
1F56 E581      6090            mov     a,sp
1F58 24FC      6091            add     a,#0xfc
1F5A F581      6092            mov     sp,a
1F5C 8A82      6093            mov     dpl,r2
1F5E 8B83      6094            mov     dph,r3
1F60 8CF0      6095            mov     b,r4
1F62 ED        6096            mov     a,r5
1F63 120000    6097            lcall   ___fs2uchar
1F66 E582      6098            mov     a,dpl
1F68 904E30    6099            mov     dptr,#_pwm_right
1F6B F0        6100            movx    @dptr,a
1F6C           6101   ;        main.c:1124: return; 
1F6C 22        6102            ret
1F6D           6103   ;------------------------------------------------------------
1F6D           6104   ;Allocation info for local variables in function 'main'
1F6D           6105   ;------------------------------------------------------------
1F6D           6106   ;pick_char                 Allocated with name '_main_pick_char_1_232'
1F6D           6107   ;c                         Allocated with name '_main_c_1_232'
1F6D           6108   ;vx                        Allocated with name '_main_vx_1_232'
1F6D           6109   ;vy                        Allocated with name '_main_vy_1_232'
1F6D           6110   ;auto_mode                 Allocated with name '_main_auto_mode_1_232'
1F6D           6111   ;------------------------------------------------------------
1F6D           6112   ;        main.c:1127: void main (void)
1F6D           6113   ;        -----------------------------------------
1F6D           6114   ;         function main
1F6D           6115   ;        -----------------------------------------
1F6D           6116   _main:
1F6D           6117   ;        main.c:1130: xdata int vx = 0, vy = 0; 
1F6D 90CF20    6118            mov     dptr,#_main_vx_1_232
1F70 E4        6119            clr     a
1F71 F0        6120            movx    @dptr,a
1F72 A3        6121            inc     dptr
1F73 F0        6122            movx    @dptr,a
1F74 90CF60    6123            mov     dptr,#_main_vy_1_232
1F77 E4        6124            clr     a
1F78 F0        6125            movx    @dptr,a
1F79 A3        6126            inc     dptr
1F7A F0        6127            movx    @dptr,a
1F7B           6128   ;        main.c:1131: xdata int auto_mode = 0;
1F7B 90CFB0    6129            mov     dptr,#_main_auto_mode_1_232
1F7E E4        6130            clr     a
1F7F F0        6131            movx    @dptr,a
1F80 A3        6132            inc     dptr
1F81 F0        6133            movx    @dptr,a
1F82           6134   ;        main.c:1132: char pick_char = '0';
1F82 755030    6135            mov     _main_pick_char_1_232,#0x30
1F85           6136   ;        main.c:1135: Init_all();
1F85 120000    6137            lcall   _Init_all
1F88           6138   ;        main.c:1136: BMM150_Init();
1F88 120000    6139            lcall   _BMM150_Init
1F8B           6140   ;        main.c:1137: waitms(500);
1F8B 9001F4    6141            mov     dptr,#0x01F4
1F8E 120000    6142            lcall   _waitms
1F91           6143   ;        main.c:1138: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
1F91 7400      6144            mov     a,#__str_12
1F93 C0E0      6145            push    acc
1F95 7413      6146            mov     a,#(__str_12 >> 8)
1F97 C0E0      6147            push    acc
1F99 7480      6148            mov     a,#0x80
1F9B C0E0      6149            push    acc
1F9D 120000    6150            lcall   _printf
1FA0 1581      6151            dec     sp
1FA2 1581      6152            dec     sp
1FA4 1581      6153            dec     sp
1FA6           6154   ;        main.c:1139: UART1_Init(9600);
1FA6 902580    6155            mov     dptr,#0x2580
1FA9 E4        6156            clr     a
1FAA F5F0      6157            mov     b,a
1FAC 120000    6158            lcall   _UART1_Init
1FAF           6159   ;        main.c:1141: ReceptionOff();
1FAF 120000    6160            lcall   _ReceptionOff
1FB2           6161   ;        main.c:1144: SendATCommand("AT+VER\r\n");
1FB2 901340    6162            mov     dptr,#__str_13
1FB5 75F080    6163            mov     b,#0x80
1FB8 120000    6164            lcall   _SendATCommand
1FBB           6165   ;        main.c:1145: SendATCommand("AT+BAUD\r\n");
1FBB 901380    6166            mov     dptr,#__str_14
1FBE 75F080    6167            mov     b,#0x80
1FC1 120000    6168            lcall   _SendATCommand
1FC4           6169   ;        main.c:1146: SendATCommand("AT+RFID\r\n");
1FC4 9013C0    6170            mov     dptr,#__str_15
1FC7 75F080    6171            mov     b,#0x80
1FCA 120000    6172            lcall   _SendATCommand
1FCD           6173   ;        main.c:1147: SendATCommand("AT+DVID\r\n");
1FCD 901400    6174            mov     dptr,#__str_16
1FD0 75F080    6175            mov     b,#0x80
1FD3 120000    6176            lcall   _SendATCommand
1FD6           6177   ;        main.c:1148: SendATCommand("AT+RFC002\r\n");
1FD6 901440    6178            mov     dptr,#__str_17
1FD9 75F080    6179            mov     b,#0x80
1FDC 120000    6180            lcall   _SendATCommand
1FDF           6181   ;        main.c:1149: SendATCommand("AT+POWE\r\n");
1FDF 901480    6182            mov     dptr,#__str_18
1FE2 75F080    6183            mov     b,#0x80
1FE5 120000    6184            lcall   _SendATCommand
1FE8           6185   ;        main.c:1150: SendATCommand("AT+CLSS\r\n");
1FE8 9014C0    6186            mov     dptr,#__str_19
1FEB 75F080    6187            mov     b,#0x80
1FEE 120000    6188            lcall   _SendATCommand
1FF1           6189   ;        main.c:1151: SendATCommand("AT+DVIDEF11\r\n");  
1FF1 901500    6190            mov     dptr,#__str_20
1FF4 75F080    6191            mov     b,#0x80
1FF7 120000    6192            lcall   _SendATCommand
1FFA           6193   ;        main.c:1154: L_bridge_1 = 0; 
1FFA C2A1      6194            clr     _P2_1
1FFC           6195   ;        main.c:1155: L_bridge_2 = 0; 
1FFC C2A2      6196            clr     _P2_2
1FFE           6197   ;        main.c:1156: R_bridge_1 = 0; 
1FFE C2A4      6198            clr     _P2_4
2000           6199   ;        main.c:1157: R_bridge_2 = 0; 
2000 C2A3      6200            clr     _P2_3
2002           6201   ;        main.c:1159: while(1)
2002           6202   L040016?:
2002           6203   ;        main.c:1162: if(pick_char=='1'){
2002 7431      6204            mov     a,#0x31
2004 B55080    6205            cjne    a,_main_pick_char_1_232,L040002?
2007           6206   ;        main.c:1163: servo_pick();
2007 120000    6207            lcall   _servo_pick
200A           6208   ;        main.c:1164: waitms(1000);
200A 9003E8    6209            mov     dptr,#0x03E8
200D 120000    6210            lcall   _waitms
2010           6211   ;        main.c:1165: pick_char = '0';
2010 755030    6212            mov     _main_pick_char_1_232,#0x30
2013           6213   L040002?:
2013           6214   ;        main.c:1168: if(auto_mode){
2013 90CFB0    6215            mov     dptr,#_main_auto_mode_1_232
2016 E0        6216            movx    a,@dptr
2017 FA        6217            mov     r2,a
2018 A3        6218            inc     dptr
2019 E0        6219            movx    a,@dptr
201A FB        6220            mov     r3,a
201B 4A        6221            orl     a,r2
201C 6000      6222            jz      L040004?
201E           6223   ;        main.c:1169: Auto_mode_slave();
201E 120000    6224            lcall   _Auto_mode_slave
2021           6225   ;        main.c:1170: auto_mode = 0;
2021 90CFB0    6226            mov     dptr,#_main_auto_mode_1_232
2024 E4        6227            clr     a
2025 F0        6228            movx    @dptr,a
2026 A3        6229            inc     dptr
2027 F0        6230            movx    @dptr,a
2028           6231   L040004?:
2028           6232   ;        main.c:1172: curr_angle = Read_angle();
2028 120000    6233            lcall   _Read_angle
202B AA82      6234            mov     r2,dpl
202D AB83      6235            mov     r3,dph
202F ACF0      6236            mov     r4,b
2031 FD        6237            mov     r5,a
2032 904B30    6238            mov     dptr,#_curr_angle
2035 EA        6239            mov     a,r2
2036 F0        6240            movx    @dptr,a
2037 A3        6241            inc     dptr
2038 EB        6242            mov     a,r3
2039 F0        6243            movx    @dptr,a
203A A3        6244            inc     dptr
203B EC        6245            mov     a,r4
203C F0        6246            movx    @dptr,a
203D A3        6247            inc     dptr
203E ED        6248            mov     a,r5
203F F0        6249            movx    @dptr,a
2040           6250   ;        main.c:1174: if(RXU1()) // Something has arrived
2040 120000    6251            lcall   _RXU1
2043 5000      6252            jnc     L040016?
2045           6253   ;        main.c:1176: c=getchar1();
2045 120000    6254            lcall   _getchar1
2048 AA82      6255            mov     r2,dpl
204A           6256   ;        main.c:1177: if(c=='!') // Master is sending message
204A BA2100    6257            cjne    r2,#0x21,L040031?
204D 8000      6258            sjmp    L040032?
204F           6259   L040031?:
204F 020000    6260            ljmp    L040011?
2052           6261   L040032?:
2052           6262   ;        main.c:1179: getstr1(buff, sizeof(buff)-1);
2052 754013    6263            mov     _getstr1_PARM_2,#0x13
2055 9052B0    6264            mov     dptr,#_buff
2058 75F040    6265            mov     b,#0x40
205B 120000    6266            lcall   _getstr1
205E           6267   ;        main.c:1180: if(strlen(buff)==11)
205E 9052B0    6268            mov     dptr,#_buff
2061 75F040    6269            mov     b,#0x40
2064 120000    6270            lcall   _strlen
2067 AB82      6271            mov     r3,dpl
2069 AC83      6272            mov     r4,dph
206B BB0BC0    6273            cjne    r3,#0x0B,L040033?
206E BC00C0    6274            cjne    r4,#0x00,L040033?
2071 8000      6275            sjmp    L040034?
2073           6276   L040033?:
2073 020000    6277            ljmp    L040006?
2076           6278   L040034?:
2076           6279   ;        main.c:1182: printf("Master says: %s\r\n", buff);
2076 74B0      6280            mov     a,#_buff
2078 C0E0      6281            push    acc
207A 7452      6282            mov     a,#(_buff >> 8)
207C C0E0      6283            push    acc
207E 7440      6284            mov     a,#0x40
2080 C0E0      6285            push    acc
2082 7480      6286            mov     a,#__str_21
2084 C0E0      6287            push    acc
2086 7417      6288            mov     a,#(__str_21 >> 8)
2088 C0E0      6289            push    acc
208A 7480      6290            mov     a,#0x80
208C C0E0      6291            push    acc
208E 120000    6292            lcall   _printf
2091 E581      6293            mov     a,sp
2093 24FA      6294            add     a,#0xfa
2095 F581      6295            mov     sp,a
2097           6296   ;        main.c:1183: sscanf(buff, "%03d,%03d,%c,%01d", &vx, &vy, &pick_char, &auto_mode);
2097 74B0      6297            mov     a,#_main_auto_mode_1_232
2099 C0E0      6298            push    acc
209B 74CF      6299            mov     a,#(_main_auto_mode_1_232 >> 8)
209D C0E0      6300            push    acc
209F E4        6301            clr     a
20A0 C0E0      6302            push    acc
20A2 7450      6303            mov     a,#_main_pick_char_1_232
20A4 C0E0      6304            push    acc
20A6 74C8      6305            mov     a,#(_main_pick_char_1_232 >> 8)
20A8 C0E0      6306            push    acc
20AA 7440      6307            mov     a,#0x40
20AC C0E0      6308            push    acc
20AE 7460      6309            mov     a,#_main_vy_1_232
20B0 C0E0      6310            push    acc
20B2 74CF      6311            mov     a,#(_main_vy_1_232 >> 8)
20B4 C0E0      6312            push    acc
20B6 E4        6313            clr     a
20B7 C0E0      6314            push    acc
20B9 7420      6315            mov     a,#_main_vx_1_232
20BB C0E0      6316            push    acc
20BD 74CF      6317            mov     a,#(_main_vx_1_232 >> 8)
20BF C0E0      6318            push    acc
20C1 E4        6319            clr     a
20C2 C0E0      6320            push    acc
20C4 74C0      6321            mov     a,#__str_22
20C6 C0E0      6322            push    acc
20C8 7417      6323            mov     a,#(__str_22 >> 8)
20CA C0E0      6324            push    acc
20CC 7480      6325            mov     a,#0x80
20CE C0E0      6326            push    acc
20D0 74B0      6327            mov     a,#_buff
20D2 C0E0      6328            push    acc
20D4 7452      6329            mov     a,#(_buff >> 8)
20D6 C0E0      6330            push    acc
20D8 7440      6331            mov     a,#0x40
20DA C0E0      6332            push    acc
20DC 120000    6333            lcall   _sscanf
20DF E581      6334            mov     a,sp
20E1 24EE      6335            add     a,#0xee
20E3 F581      6336            mov     sp,a
20E5           6337   ;        main.c:1184: printf("Joystick Received: Vx = %d, Vy = %d, Order = %c, Auto = %d\r\n", vx, vy, pick_char, auto_mode);
20E5 E550      6338            mov     a,_main_pick_char_1_232
20E7 FB        6339            mov     r3,a
20E8 33        6340            rlc     a
20E9 95E0      6341            subb    a,acc
20EB FC        6342            mov     r4,a
20EC 90CFB0    6343            mov     dptr,#_main_auto_mode_1_232
20EF E0        6344            movx    a,@dptr
20F0 C0E0      6345            push    acc
20F2 A3        6346            inc     dptr
20F3 E0        6347            movx    a,@dptr
20F4 C0E0      6348            push    acc
20F6 C003      6349            push    ar3
20F8 C004      6350            push    ar4
20FA 90CF60    6351            mov     dptr,#_main_vy_1_232
20FD E0        6352            movx    a,@dptr
20FE C0E0      6353            push    acc
2100 A3        6354            inc     dptr
2101 E0        6355            movx    a,@dptr
2102 C0E0      6356            push    acc
2104 90CF20    6357            mov     dptr,#_main_vx_1_232
2107 E0        6358            movx    a,@dptr
2108 C0E0      6359            push    acc
210A A3        6360            inc     dptr
210B E0        6361            movx    a,@dptr
210C C0E0      6362            push    acc
210E 7400      6363            mov     a,#__str_23
2110 C0E0      6364            push    acc
2112 7418      6365            mov     a,#(__str_23 >> 8)
2114 C0E0      6366            push    acc
2116 7480      6367            mov     a,#0x80
2118 C0E0      6368            push    acc
211A 120000    6369            lcall   _printf
211D E581      6370            mov     a,sp
211F 24F5      6371            add     a,#0xf5
2121 F581      6372            mov     sp,a
2123           6373   ;        main.c:1185: Joystick_Control(&vx, &vy);
2123 750060    6374            mov     _Joystick_Control_PARM_2,#_main_vy_1_232
2126 7501CF    6375            mov     (_Joystick_Control_PARM_2 + 1),#(_main_vy_1_232 >> 8)
2129 750200    6376            mov     (_Joystick_Control_PARM_2 + 2),#0x00
212C 90CF20    6377            mov     dptr,#_main_vx_1_232
212F 75F000    6378            mov     b,#0x00
2132 120000    6379            lcall   _Joystick_Control
2135 020000    6380            ljmp    L040016?
2138           6381   L040006?:
2138           6382   ;        main.c:1188: printf("*** BAD MESSAGE ***: %s\r\n", buff);
2138 74B0      6383            mov     a,#_buff
213A C0E0      6384            push    acc
213C 7452      6385            mov     a,#(_buff >> 8)
213E C0E0      6386            push    acc
2140 7440      6387            mov     a,#0x40
2142 C0E0      6388            push    acc
2144 7440      6389            mov     a,#__str_24
2146 C0E0      6390            push    acc
2148 7418      6391            mov     a,#(__str_24 >> 8)
214A C0E0      6392            push    acc
214C 7480      6393            mov     a,#0x80
214E C0E0      6394            push    acc
2150 120000    6395            lcall   _printf
2153 E581      6396            mov     a,sp
2155 24FA      6397            add     a,#0xfa
2157 F581      6398            mov     sp,a
2159 020000    6399            ljmp    L040016?
215C           6400   L040011?:
215C           6401   ;        main.c:1191: else if(c=='@') // Master wants slave data
215C BA4080    6402            cjne    r2,#0x40,L040035?
215F 8000      6403            sjmp    L040036?
2161           6404   L040035?:
2161 020000    6405            ljmp    L040016?
2164           6406   L040036?:
2164           6407   ;        main.c:1193: sprintf(buff, "0,00,%04ld,%4.1f\n", freq100, curr_angle);
2164 904B30    6408            mov     dptr,#_curr_angle
2167 E0        6409            movx    a,@dptr
2168 C0E0      6410            push    acc
216A A3        6411            inc     dptr
216B E0        6412            movx    a,@dptr
216C C0E0      6413            push    acc
216E A3        6414            inc     dptr
216F E0        6415            movx    a,@dptr
2170 C0E0      6416            push    acc
2172 A3        6417            inc     dptr
2173 E0        6418            movx    a,@dptr
2174 C0E0      6419            push    acc
2176 905270    6420            mov     dptr,#_freq100
2179 E0        6421            movx    a,@dptr
217A C0E0      6422            push    acc
217C A3        6423            inc     dptr
217D E0        6424            movx    a,@dptr
217E C0E0      6425            push    acc
2180 A3        6426            inc     dptr
2181 E0        6427            movx    a,@dptr
2182 C0E0      6428            push    acc
2184 A3        6429            inc     dptr
2185 E0        6430            movx    a,@dptr
2186 C0E0      6431            push    acc
2188 7400      6432            mov     a,#__str_25
218A C0E0      6433            push    acc
218C 7419      6434            mov     a,#(__str_25 >> 8)
218E C0E0      6435            push    acc
2190 7480      6436            mov     a,#0x80
2192 C0E0      6437            push    acc
2194 74B0      6438            mov     a,#_buff
2196 C0E0      6439            push    acc
2198 7452      6440            mov     a,#(_buff >> 8)
219A C0E0      6441            push    acc
219C 7440      6442            mov     a,#0x40
219E C0E0      6443            push    acc
21A0 120000    6444            lcall   _sprintf
21A3 E581      6445            mov     a,sp
21A5 24F2      6446            add     a,#0xf2
21A7 F581      6447            mov     sp,a
21A9           6448   ;        main.c:1194: waitms(5); // The radio seems to need this delay...
21A9 900005    6449            mov     dptr,#0x0005
21AC 120000    6450            lcall   _waitms
21AF           6451   ;        main.c:1195: sendstr1(buff);
21AF 9052B0    6452            mov     dptr,#_buff
21B2 75F040    6453            mov     b,#0x40
21B5 120000    6454            lcall   _sendstr1
21B8 020000    6455            ljmp    L040016?
21BB           6456            rseg R_CSEG
21BB           6457   
0000           6458            rseg R_XINIT
0000           6459   __xinit__pwm_counter:
0000 0000      6460            db 0x00,0x00    ; 0
0002           6461   __xinit__servo_counter:
0002 0000      6462            db 0x00,0x00    ; 0
0004           6463   __xinit__pwm_left:
0004 00        6464            db 0x00         ; 0
0005           6465   __xinit__pwm_right:
0005 00        6466            db 0x00         ; 0
0006           6467   __xinit__L_motor_dir:
0006 01        6468            db 0x01         ; 1
0007           6469   __xinit__R_motor_dir:
0007 01        6470            db 0x01         ; 1
0008           6471   __xinit__servo_base:
0008 01        6472            db 0x01         ; 1
0009           6473   __xinit__servo_arm:
0009 01        6474            db 0x01         ; 1
000A           6475   __xinit__vx_thres:
000A A100      6476            db 0xA1,0x00    ;  161
000C           6477   __xinit__vy_thres:
000C A600      6478            db 0xA6,0x00    ;  166
000E           6479   __xinit__vx:
000E 0000      6480            db 0x00,0x00    ;  0
0010           6481   __xinit__vy:
0010 0000      6482            db 0x00,0x00    ;  0
0012           6483   __xinit__fre_mea_count:
0012 0000      6484            db 0x00,0x00    ; 0
0014           6485   __xinit__seed:
0014 3930      6486            db 0x39,0x30    ; 12345
0016           6487   __xinit__pwm_corr:
0016 3333733F  6488            db 0x33,0x33,0x73,0x3F  ;  9.500000e-001
001A           6489   __xinit__curr_angle:
001A 00000000  6490            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
001E           6491   
0000           6492            rseg R_CONST
0000           6493   __str_0:
0000 4572726F  6494            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
0035 0D        6495            db 0x0D
0036 0A        6496            db 0x0A
0037 00        6497            db 0x00
0038           6498   __str_1:
0038 50726573  6499            db 'Press restart to check again!'
     73207265
     73746172
     7420746F
     20636865
     636B2061
     6761696E
     21
0055 0D        6500            db 0x0D
0056 00        6501            db 0x00
0057           6502   __str_2:
0057 444F4E45  6503            db 'DONE! Chip ID = 0x%02X'
     21204368
     69702049
     44203D20
     30782530
     3258
006D 0D        6504            db 0x0D
006E 0A        6505            db 0x0A
006F 00        6506            db 0x00
0070           6507   __str_3:
0070 424D4D31  6508            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
00A0 0D        6509            db 0x0D
00A1 0A        6510            db 0x0A
00A2 00        6511            db 0x00
00A3           6512   __str_4:
00A3 436F6D6D  6513            db 'Command: %s'
     616E643A
     202573
00AE 00        6514            db 0x00
00AF           6515   __str_5:
00AF 52657370  6516            db 'Response: %s'
     6F6E7365
     3A202573
00BB 0D        6517            db 0x0D
00BC 0A        6518            db 0x0A
00BD 00        6519            db 0x00
00BE           6520   __str_6:
00BE 41542B44  6521            db 'AT+DVID0000'
     56494430
     303030
00C9 0D        6522            db 0x0D
00CA 0A        6523            db 0x0A
00CB 00        6524            db 0x00
00CC           6525   __str_7:
00CC 6D617374  6526            db 'master_messgae_auto_mode: %s'
     65725F6D
     65737367
     61655F61
     75746F5F
     6D6F6465
     3A202573
00E8 0D        6527            db 0x0D
00E9 0A        6528            db 0x0A
00EA 00        6529            db 0x00
00EB           6530   __str_8:
00EB 25303364  6531            db '%03d,%03d,%01d,%01d'
     2C253033
     642C2530
     31642C25
     303164
00FE 00        6532            db 0x00
00FF           6533   __str_9:
00FF 25303164  6534            db '%01d,%02d,%ld,%4.1f'
     2C253032
     642C256C
     642C2534
     2E3166
0112 0A        6535            db 0x0A
0113 00        6536            db 0x00
0114           6537   __str_10:
0114 663A2530  6538            db 'f:%04ld, d1:%d, d2:%d, bound_dectect: %d'
     346C642C
     2064313A
     25642C20
     64323A25
     642C2062
     6F756E64
     5F646563
     74656374
     3A202564
013C 0D        6539            db 0x0D
013D 0A        6540            db 0x0A
013E 00        6541            db 0x00
013F           6542   __str_11:
013F 4175746F  6543            db 'Auto mode finished!'
     206D6F64
     65206669
     6E697368
     656421
0152 0D        6544            db 0x0D
0153 0A        6545            db 0x0A
0154 00        6546            db 0x00
0155           6547   __str_12:
0155 0D        6548            db 0x0D
0156 0A        6549            db 0x0A
0157 45464D38  6550            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
0172 0D        6551            db 0x0D
0173 0A        6552            db 0x0A
0174 00        6553            db 0x00
0175           6554   __str_13:
0175 41542B56  6555            db 'AT+VER'
     4552
017B 0D        6556            db 0x0D
017C 0A        6557            db 0x0A
017D 00        6558            db 0x00
017E           6559   __str_14:
017E 41542B42  6560            db 'AT+BAUD'
     415544
0185 0D        6561            db 0x0D
0186 0A        6562            db 0x0A
0187 00        6563            db 0x00
0188           6564   __str_15:
0188 41542B52  6565            db 'AT+RFID'
     464944
018F 0D        6566            db 0x0D
0190 0A        6567            db 0x0A
0191 00        6568            db 0x00
0192           6569   __str_16:
0192 41542B44  6570            db 'AT+DVID'
     564944
0199 0D        6571            db 0x0D
019A 0A        6572            db 0x0A
019B 00        6573            db 0x00
019C           6574   __str_17:
019C 41542B52  6575            db 'AT+RFC002'
     46433030
     32
01A5 0D        6576            db 0x0D
01A6 0A        6577            db 0x0A
01A7 00        6578            db 0x00
01A8           6579   __str_18:
01A8 41542B50  6580            db 'AT+POWE'
     4F5745
01AF 0D        6581            db 0x0D
01B0 0A        6582            db 0x0A
01B1 00        6583            db 0x00
01B2           6584   __str_19:
01B2 41542B43  6585            db 'AT+CLSS'
     4C5353
01B9 0D        6586            db 0x0D
01BA 0A        6587            db 0x0A
01BB 00        6588            db 0x00
01BC           6589   __str_20:
01BC 41542B44  6590            db 'AT+DVIDEF11'
     56494445
     463131
01C7 0D        6591            db 0x0D
01C8 0A        6592            db 0x0A
01C9 00        6593            db 0x00
01CA           6594   __str_21:
01CA 4D617374  6595            db 'Master says: %s'
     65722073
     6179733A
     202573
01D9 0D        6596            db 0x0D
01DA 0A        6597            db 0x0A
01DB 00        6598            db 0x00
01DC           6599   __str_22:
01DC 25303364  6600            db '%03d,%03d,%c,%01d'
     2C253033
     642C2563
     2C253031
     64
01ED 00        6601            db 0x00
01EE           6602   __str_23:
01EE 4A6F7973  6603            db 'Joystick Received: Vx = %d, Vy = %d, Order = %c, Auto = %d'
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25642C20
     5679203D
     2025642C
     204F7264
     6572203D
     2025632C
     20417574
     6F203D20
     2564
0228 0D        6604            db 0x0D
0229 0A        6605            db 0x0A
022A 00        6606            db 0x00
022B           6607   __str_24:
022B 2A2A2A20  6608            db '*** BAD MESSAGE ***: %s'
     42414420
     4D455353
     41474520
     2A2A2A3A
     202573
0242 0D        6609            db 0x0D
0243 0A        6610            db 0x0A
0244 00        6611            db 0x00
0245           6612   __str_25:
0245 302C3030  6613            db '0,00,%04ld,%4.1f'
     2C253034
     6C642C25
     342E3166
0255 0A        6614            db 0x0A
0256 00        6615            db 0x00
0257           6616   
0096           6617            CSEG
0096           6618   
0096           6619   end
