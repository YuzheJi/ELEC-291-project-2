0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Apr 02 14:51:58 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _check_bound_PARM_2
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Joystick_Control
0000             30            public _measure_distance
0000             31            public _Auto_mode_slave
0000             32            public _Read_angle
0000             33            public _get_random_90_250
0000             34            public _simple_rand
0000             35            public _Move_forward
0000             36            public _Right_angle
0000             37            public _Move_back_ms
0000             38            public _Init_all
0000             39            public _check_bound
0000             40            public _servo_pick
0000             41            public _Timer5_ISR
0000             42            public _ReadHX711
0000             43            public _ADC_at_Pin
0000             44            public _InitPinADC
0000             45            public _InitADC
0000             46            public _Set_Pin_Input
0000             47            public _Set_Pin_Output
0000             48            public _ReceptionOff
0000             49            public _SendATCommand
0000             50            public _waitms_or_RI1
0000             51            public _RXU1
0000             52            public _getstr1
0000             53            public _getchar1_with_timeout
0000             54            public _getchar1
0000             55            public _sendstr1
0000             56            public _putchar1
0000             57            public _UART1_Init
0000             58            public _BMM150_Read_Data
0000             59            public _BMM150_compensate_y
0000             60            public _BMM150_compensate_x
0000             61            public _BMM150_Init
0000             62            public _BMM150_Read_Trim_Registers
0000             63            public _SPI_write
0000             64            public _SPI_read
0000             65            public _SPI_transfer
0000             66            public _waitms
0000             67            public _Timer3us
0000             68            public __c51_external_startup
0000             69            public _distance
0000             70            public _duration
0000             71            public _weight
0000             72            public _mea_yes
0000             73            public _angle_diff
0000             74            public _last_raw_angle
0000             75            public _raw_angle
0000             76            public _curr_angle
0000             77            public _pwm_corr
0000             78            public _seed
0000             79            public _weight_mea_count
0000             80            public _fre_mea_count
0000             81            public _vy
0000             82            public _vx
0000             83            public _vy_thres
0000             84            public _vx_thres
0000             85            public _servo_arm
0000             86            public _servo_base
0000             87            public _R_motor_dir
0000             88            public _L_motor_dir
0000             89            public _pwm_right
0000             90            public _pwm_left
0000             91            public _servo_counter
0000             92            public _pwm_counter
0000             93            public _overflow_count
0000             94            public _temp
0000             95            public _dig_xyz1
0000             96            public _dig_xy2
0000             97            public _dig_xy1
0000             98            public _dig_z4
0000             99            public _dig_z3
0000            100            public _dig_z2
0000            101            public _dig_z1
0000            102            public _dig_y2
0000            103            public _dig_y1
0000            104            public _dig_x2
0000            105            public _dig_x1
0000            106            public _d2
0000            107            public _d1
0000            108            public _freq100
0000            109            public _buff
0000            110            public _Joystick_Control_PARM_2
0000            111            public _getstr1_PARM_2
0000            112            public _BMM150_Read_Data_PARM_2
0000            113            public _BMM150_compensate_y_PARM_2
0000            114            public _BMM150_compensate_x_PARM_2
0000            115            public _SPI_write_PARM_2
0000            116   ;--------------------------------------------------------
0000            117   ; Special Function Registers
0000            118   ;--------------------------------------------------------
0000            119   _ACC            DATA 0xe0
0000            120   _ADC0ASAH       DATA 0xb6
0000            121   _ADC0ASAL       DATA 0xb5
0000            122   _ADC0ASCF       DATA 0xa1
0000            123   _ADC0ASCT       DATA 0xc7
0000            124   _ADC0CF0        DATA 0xbc
0000            125   _ADC0CF1        DATA 0xb9
0000            126   _ADC0CF2        DATA 0xdf
0000            127   _ADC0CN0        DATA 0xe8
0000            128   _ADC0CN1        DATA 0xb2
0000            129   _ADC0CN2        DATA 0xb3
0000            130   _ADC0GTH        DATA 0xc4
0000            131   _ADC0GTL        DATA 0xc3
0000            132   _ADC0H          DATA 0xbe
0000            133   _ADC0L          DATA 0xbd
0000            134   _ADC0LTH        DATA 0xc6
0000            135   _ADC0LTL        DATA 0xc5
0000            136   _ADC0MX         DATA 0xbb
0000            137   _B              DATA 0xf0
0000            138   _CKCON0         DATA 0x8e
0000            139   _CKCON1         DATA 0xa6
0000            140   _CLEN0          DATA 0xc6
0000            141   _CLIE0          DATA 0xc7
0000            142   _CLIF0          DATA 0xe8
0000            143   _CLKSEL         DATA 0xa9
0000            144   _CLOUT0         DATA 0xd1
0000            145   _CLU0CF         DATA 0xb1
0000            146   _CLU0FN         DATA 0xaf
0000            147   _CLU0MX         DATA 0x84
0000            148   _CLU1CF         DATA 0xb3
0000            149   _CLU1FN         DATA 0xb2
0000            150   _CLU1MX         DATA 0x85
0000            151   _CLU2CF         DATA 0xb6
0000            152   _CLU2FN         DATA 0xb5
0000            153   _CLU2MX         DATA 0x91
0000            154   _CLU3CF         DATA 0xbf
0000            155   _CLU3FN         DATA 0xbe
0000            156   _CLU3MX         DATA 0xae
0000            157   _CMP0CN0        DATA 0x9b
0000            158   _CMP0CN1        DATA 0x99
0000            159   _CMP0MD         DATA 0x9d
0000            160   _CMP0MX         DATA 0x9f
0000            161   _CMP1CN0        DATA 0xbf
0000            162   _CMP1CN1        DATA 0xac
0000            163   _CMP1MD         DATA 0xab
0000            164   _CMP1MX         DATA 0xaa
0000            165   _CRC0CN0        DATA 0xce
0000            166   _CRC0CN1        DATA 0x86
0000            167   _CRC0CNT        DATA 0xd3
0000            168   _CRC0DAT        DATA 0xcb
0000            169   _CRC0FLIP       DATA 0xcf
0000            170   _CRC0IN         DATA 0xca
0000            171   _CRC0ST         DATA 0xd2
0000            172   _DAC0CF0        DATA 0x91
0000            173   _DAC0CF1        DATA 0x92
0000            174   _DAC0H          DATA 0x85
0000            175   _DAC0L          DATA 0x84
0000            176   _DAC1CF0        DATA 0x93
0000            177   _DAC1CF1        DATA 0x94
0000            178   _DAC1H          DATA 0x8a
0000            179   _DAC1L          DATA 0x89
0000            180   _DAC2CF0        DATA 0x95
0000            181   _DAC2CF1        DATA 0x96
0000            182   _DAC2H          DATA 0x8c
0000            183   _DAC2L          DATA 0x8b
0000            184   _DAC3CF0        DATA 0x9a
0000            185   _DAC3CF1        DATA 0x9c
0000            186   _DAC3H          DATA 0x8e
0000            187   _DAC3L          DATA 0x8d
0000            188   _DACGCF0        DATA 0x88
0000            189   _DACGCF1        DATA 0x98
0000            190   _DACGCF2        DATA 0xa2
0000            191   _DERIVID        DATA 0xad
0000            192   _DEVICEID       DATA 0xb5
0000            193   _DPH            DATA 0x83
0000            194   _DPL            DATA 0x82
0000            195   _EIE1           DATA 0xe6
0000            196   _EIE2           DATA 0xf3
0000            197   _EIP1           DATA 0xbb
0000            198   _EIP1H          DATA 0xee
0000            199   _EIP2           DATA 0xed
0000            200   _EIP2H          DATA 0xf6
0000            201   _EMI0CN         DATA 0xe7
0000            202   _FLKEY          DATA 0xb7
0000            203   _HFO0CAL        DATA 0xc7
0000            204   _HFO1CAL        DATA 0xd6
0000            205   _HFOCN          DATA 0xef
0000            206   _I2C0ADM        DATA 0xff
0000            207   _I2C0CN0        DATA 0xba
0000            208   _I2C0DIN        DATA 0xbc
0000            209   _I2C0DOUT       DATA 0xbb
0000            210   _I2C0FCN0       DATA 0xad
0000            211   _I2C0FCN1       DATA 0xab
0000            212   _I2C0FCT        DATA 0xf5
0000            213   _I2C0SLAD       DATA 0xbd
0000            214   _I2C0STAT       DATA 0xb9
0000            215   _IE             DATA 0xa8
0000            216   _IP             DATA 0xb8
0000            217   _IPH            DATA 0xf2
0000            218   _IT01CF         DATA 0xe4
0000            219   _LFO0CN         DATA 0xb1
0000            220   _P0             DATA 0x80
0000            221   _P0MASK         DATA 0xfe
0000            222   _P0MAT          DATA 0xfd
0000            223   _P0MDIN         DATA 0xf1
0000            224   _P0MDOUT        DATA 0xa4
0000            225   _P0SKIP         DATA 0xd4
0000            226   _P1             DATA 0x90
0000            227   _P1MASK         DATA 0xee
0000            228   _P1MAT          DATA 0xed
0000            229   _P1MDIN         DATA 0xf2
0000            230   _P1MDOUT        DATA 0xa5
0000            231   _P1SKIP         DATA 0xd5
0000            232   _P2             DATA 0xa0
0000            233   _P2MASK         DATA 0xfc
0000            234   _P2MAT          DATA 0xfb
0000            235   _P2MDIN         DATA 0xf3
0000            236   _P2MDOUT        DATA 0xa6
0000            237   _P2SKIP         DATA 0xcc
0000            238   _P3             DATA 0xb0
0000            239   _P3MDIN         DATA 0xf4
0000            240   _P3MDOUT        DATA 0x9c
0000            241   _PCA0CENT       DATA 0x9e
0000            242   _PCA0CLR        DATA 0x9c
0000            243   _PCA0CN0        DATA 0xd8
0000            244   _PCA0CPH0       DATA 0xfc
0000            245   _PCA0CPH1       DATA 0xea
0000            246   _PCA0CPH2       DATA 0xec
0000            247   _PCA0CPH3       DATA 0xf5
0000            248   _PCA0CPH4       DATA 0x85
0000            249   _PCA0CPH5       DATA 0xde
0000            250   _PCA0CPL0       DATA 0xfb
0000            251   _PCA0CPL1       DATA 0xe9
0000            252   _PCA0CPL2       DATA 0xeb
0000            253   _PCA0CPL3       DATA 0xf4
0000            254   _PCA0CPL4       DATA 0x84
0000            255   _PCA0CPL5       DATA 0xdd
0000            256   _PCA0CPM0       DATA 0xda
0000            257   _PCA0CPM1       DATA 0xdb
0000            258   _PCA0CPM2       DATA 0xdc
0000            259   _PCA0CPM3       DATA 0xae
0000            260   _PCA0CPM4       DATA 0xaf
0000            261   _PCA0CPM5       DATA 0xcc
0000            262   _PCA0H          DATA 0xfa
0000            263   _PCA0L          DATA 0xf9
0000            264   _PCA0MD         DATA 0xd9
0000            265   _PCA0POL        DATA 0x96
0000            266   _PCA0PWM        DATA 0xf7
0000            267   _PCON0          DATA 0x87
0000            268   _PCON1          DATA 0xcd
0000            269   _PFE0CN         DATA 0xc1
0000            270   _PRTDRV         DATA 0xf6
0000            271   _PSCTL          DATA 0x8f
0000            272   _PSTAT0         DATA 0xaa
0000            273   _PSW            DATA 0xd0
0000            274   _REF0CN         DATA 0xd1
0000            275   _REG0CN         DATA 0xc9
0000            276   _REVID          DATA 0xb6
0000            277   _RSTSRC         DATA 0xef
0000            278   _SBCON1         DATA 0x94
0000            279   _SBRLH1         DATA 0x96
0000            280   _SBRLL1         DATA 0x95
0000            281   _SBUF           DATA 0x99
0000            282   _SBUF0          DATA 0x99
0000            283   _SBUF1          DATA 0x92
0000            284   _SCON           DATA 0x98
0000            285   _SCON0          DATA 0x98
0000            286   _SCON1          DATA 0xc8
0000            287   _SFRPAGE        DATA 0xa7
0000            288   _SFRPGCN        DATA 0xbc
0000            289   _SFRSTACK       DATA 0xd7
0000            290   _SMB0ADM        DATA 0xd6
0000            291   _SMB0ADR        DATA 0xd7
0000            292   _SMB0CF         DATA 0xc1
0000            293   _SMB0CN0        DATA 0xc0
0000            294   _SMB0DAT        DATA 0xc2
0000            295   _SMB0FCN0       DATA 0xc3
0000            296   _SMB0FCN1       DATA 0xc4
0000            297   _SMB0FCT        DATA 0xef
0000            298   _SMB0RXLN       DATA 0xc5
0000            299   _SMB0TC         DATA 0xac
0000            300   _SMOD1          DATA 0x93
0000            301   _SP             DATA 0x81
0000            302   _SPI0CFG        DATA 0xa1
0000            303   _SPI0CKR        DATA 0xa2
0000            304   _SPI0CN0        DATA 0xf8
0000            305   _SPI0DAT        DATA 0xa3
0000            306   _SPI0FCN0       DATA 0x9a
0000            307   _SPI0FCN1       DATA 0x9b
0000            308   _SPI0FCT        DATA 0xf7
0000            309   _SPI0PCF        DATA 0xdf
0000            310   _TCON           DATA 0x88
0000            311   _TH0            DATA 0x8c
0000            312   _TH1            DATA 0x8d
0000            313   _TL0            DATA 0x8a
0000            314   _TL1            DATA 0x8b
0000            315   _TMOD           DATA 0x89
0000            316   _TMR2CN0        DATA 0xc8
0000            317   _TMR2CN1        DATA 0xfd
0000            318   _TMR2H          DATA 0xcf
0000            319   _TMR2L          DATA 0xce
0000            320   _TMR2RLH        DATA 0xcb
0000            321   _TMR2RLL        DATA 0xca
0000            322   _TMR3CN0        DATA 0x91
0000            323   _TMR3CN1        DATA 0xfe
0000            324   _TMR3H          DATA 0x95
0000            325   _TMR3L          DATA 0x94
0000            326   _TMR3RLH        DATA 0x93
0000            327   _TMR3RLL        DATA 0x92
0000            328   _TMR4CN0        DATA 0x98
0000            329   _TMR4CN1        DATA 0xff
0000            330   _TMR4H          DATA 0xa5
0000            331   _TMR4L          DATA 0xa4
0000            332   _TMR4RLH        DATA 0xa3
0000            333   _TMR4RLL        DATA 0xa2
0000            334   _TMR5CN0        DATA 0xc0
0000            335   _TMR5CN1        DATA 0xf1
0000            336   _TMR5H          DATA 0xd5
0000            337   _TMR5L          DATA 0xd4
0000            338   _TMR5RLH        DATA 0xd3
0000            339   _TMR5RLL        DATA 0xd2
0000            340   _UART0PCF       DATA 0xd9
0000            341   _UART1FCN0      DATA 0x9d
0000            342   _UART1FCN1      DATA 0xd8
0000            343   _UART1FCT       DATA 0xfa
0000            344   _UART1LIN       DATA 0x9e
0000            345   _UART1PCF       DATA 0xda
0000            346   _VDM0CN         DATA 0xff
0000            347   _WDTCN          DATA 0x97
0000            348   _XBR0           DATA 0xe1
0000            349   _XBR1           DATA 0xe2
0000            350   _XBR2           DATA 0xe3
0000            351   _XOSC0CN        DATA 0x86
0000            352   _DPTR           DATA 0x8382
0000            353   _TMR2RL         DATA 0xcbca
0000            354   _TMR3RL         DATA 0x9392
0000            355   _TMR4RL         DATA 0xa3a2
0000            356   _TMR5RL         DATA 0xd3d2
0000            357   _TMR0           DATA 0x8c8a
0000            358   _TMR1           DATA 0x8d8b
0000            359   _TMR2           DATA 0xcfce
0000            360   _TMR3           DATA 0x9594
0000            361   _TMR4           DATA 0xa5a4
0000            362   _TMR5           DATA 0xd5d4
0000            363   _SBRL1          DATA 0x9695
0000            364   _PCA0           DATA 0xfaf9
0000            365   _PCA0CP0        DATA 0xfcfb
0000            366   _PCA0CP1        DATA 0xeae9
0000            367   _PCA0CP2        DATA 0xeceb
0000            368   _PCA0CP3        DATA 0xf5f4
0000            369   _PCA0CP4        DATA 0x8584
0000            370   _PCA0CP5        DATA 0xdedd
0000            371   _ADC0ASA        DATA 0xb6b5
0000            372   _ADC0GT         DATA 0xc4c3
0000            373   _ADC0           DATA 0xbebd
0000            374   _ADC0LT         DATA 0xc6c5
0000            375   _DAC0           DATA 0x8584
0000            376   _DAC1           DATA 0x8a89
0000            377   _DAC2           DATA 0x8c8b
0000            378   _DAC3           DATA 0x8e8d
0000            379   ;--------------------------------------------------------
0000            380   ; special function bits
0000            381   ;--------------------------------------------------------
0000            382   _ACC_0          BIT 0xe0
0000            383   _ACC_1          BIT 0xe1
0000            384   _ACC_2          BIT 0xe2
0000            385   _ACC_3          BIT 0xe3
0000            386   _ACC_4          BIT 0xe4
0000            387   _ACC_5          BIT 0xe5
0000            388   _ACC_6          BIT 0xe6
0000            389   _ACC_7          BIT 0xe7
0000            390   _TEMPE          BIT 0xe8
0000            391   _ADGN0          BIT 0xe9
0000            392   _ADGN1          BIT 0xea
0000            393   _ADWINT         BIT 0xeb
0000            394   _ADBUSY         BIT 0xec
0000            395   _ADINT          BIT 0xed
0000            396   _IPOEN          BIT 0xee
0000            397   _ADEN           BIT 0xef
0000            398   _B_0            BIT 0xf0
0000            399   _B_1            BIT 0xf1
0000            400   _B_2            BIT 0xf2
0000            401   _B_3            BIT 0xf3
0000            402   _B_4            BIT 0xf4
0000            403   _B_5            BIT 0xf5
0000            404   _B_6            BIT 0xf6
0000            405   _B_7            BIT 0xf7
0000            406   _C0FIF          BIT 0xe8
0000            407   _C0RIF          BIT 0xe9
0000            408   _C1FIF          BIT 0xea
0000            409   _C1RIF          BIT 0xeb
0000            410   _C2FIF          BIT 0xec
0000            411   _C2RIF          BIT 0xed
0000            412   _C3FIF          BIT 0xee
0000            413   _C3RIF          BIT 0xef
0000            414   _D1SRC0         BIT 0x88
0000            415   _D1SRC1         BIT 0x89
0000            416   _D1AMEN         BIT 0x8a
0000            417   _D01REFSL       BIT 0x8b
0000            418   _D3SRC0         BIT 0x8c
0000            419   _D3SRC1         BIT 0x8d
0000            420   _D3AMEN         BIT 0x8e
0000            421   _D23REFSL       BIT 0x8f
0000            422   _D0UDIS         BIT 0x98
0000            423   _D1UDIS         BIT 0x99
0000            424   _D2UDIS         BIT 0x9a
0000            425   _D3UDIS         BIT 0x9b
0000            426   _EX0            BIT 0xa8
0000            427   _ET0            BIT 0xa9
0000            428   _EX1            BIT 0xaa
0000            429   _ET1            BIT 0xab
0000            430   _ES0            BIT 0xac
0000            431   _ET2            BIT 0xad
0000            432   _ESPI0          BIT 0xae
0000            433   _EA             BIT 0xaf
0000            434   _PX0            BIT 0xb8
0000            435   _PT0            BIT 0xb9
0000            436   _PX1            BIT 0xba
0000            437   _PT1            BIT 0xbb
0000            438   _PS0            BIT 0xbc
0000            439   _PT2            BIT 0xbd
0000            440   _PSPI0          BIT 0xbe
0000            441   _P0_0           BIT 0x80
0000            442   _P0_1           BIT 0x81
0000            443   _P0_2           BIT 0x82
0000            444   _P0_3           BIT 0x83
0000            445   _P0_4           BIT 0x84
0000            446   _P0_5           BIT 0x85
0000            447   _P0_6           BIT 0x86
0000            448   _P0_7           BIT 0x87
0000            449   _P1_0           BIT 0x90
0000            450   _P1_1           BIT 0x91
0000            451   _P1_2           BIT 0x92
0000            452   _P1_3           BIT 0x93
0000            453   _P1_4           BIT 0x94
0000            454   _P1_5           BIT 0x95
0000            455   _P1_6           BIT 0x96
0000            456   _P1_7           BIT 0x97
0000            457   _P2_0           BIT 0xa0
0000            458   _P2_1           BIT 0xa1
0000            459   _P2_2           BIT 0xa2
0000            460   _P2_3           BIT 0xa3
0000            461   _P2_4           BIT 0xa4
0000            462   _P2_5           BIT 0xa5
0000            463   _P2_6           BIT 0xa6
0000            464   _P3_0           BIT 0xb0
0000            465   _P3_1           BIT 0xb1
0000            466   _P3_2           BIT 0xb2
0000            467   _P3_3           BIT 0xb3
0000            468   _P3_4           BIT 0xb4
0000            469   _P3_7           BIT 0xb7
0000            470   _CCF0           BIT 0xd8
0000            471   _CCF1           BIT 0xd9
0000            472   _CCF2           BIT 0xda
0000            473   _CCF3           BIT 0xdb
0000            474   _CCF4           BIT 0xdc
0000            475   _CCF5           BIT 0xdd
0000            476   _CR             BIT 0xde
0000            477   _CF             BIT 0xdf
0000            478   _PARITY         BIT 0xd0
0000            479   _F1             BIT 0xd1
0000            480   _OV             BIT 0xd2
0000            481   _RS0            BIT 0xd3
0000            482   _RS1            BIT 0xd4
0000            483   _F0             BIT 0xd5
0000            484   _AC             BIT 0xd6
0000            485   _CY             BIT 0xd7
0000            486   _RI             BIT 0x98
0000            487   _TI             BIT 0x99
0000            488   _RB8            BIT 0x9a
0000            489   _TB8            BIT 0x9b
0000            490   _REN            BIT 0x9c
0000            491   _CE             BIT 0x9d
0000            492   _SMODE          BIT 0x9e
0000            493   _RI1            BIT 0xc8
0000            494   _TI1            BIT 0xc9
0000            495   _RBX1           BIT 0xca
0000            496   _TBX1           BIT 0xcb
0000            497   _REN1           BIT 0xcc
0000            498   _PERR1          BIT 0xcd
0000            499   _OVR1           BIT 0xce
0000            500   _SI             BIT 0xc0
0000            501   _ACK            BIT 0xc1
0000            502   _ARBLOST        BIT 0xc2
0000            503   _ACKRQ          BIT 0xc3
0000            504   _STO            BIT 0xc4
0000            505   _STA            BIT 0xc5
0000            506   _TXMODE         BIT 0xc6
0000            507   _MASTER         BIT 0xc7
0000            508   _SPIEN          BIT 0xf8
0000            509   _TXNF           BIT 0xf9
0000            510   _NSSMD0         BIT 0xfa
0000            511   _NSSMD1         BIT 0xfb
0000            512   _RXOVRN         BIT 0xfc
0000            513   _MODF           BIT 0xfd
0000            514   _WCOL           BIT 0xfe
0000            515   _SPIF           BIT 0xff
0000            516   _IT0            BIT 0x88
0000            517   _IE0            BIT 0x89
0000            518   _IT1            BIT 0x8a
0000            519   _IE1            BIT 0x8b
0000            520   _TR0            BIT 0x8c
0000            521   _TF0            BIT 0x8d
0000            522   _TR1            BIT 0x8e
0000            523   _TF1            BIT 0x8f
0000            524   _T2XCLK0        BIT 0xc8
0000            525   _T2XCLK1        BIT 0xc9
0000            526   _TR2            BIT 0xca
0000            527   _T2SPLIT        BIT 0xcb
0000            528   _TF2CEN         BIT 0xcc
0000            529   _TF2LEN         BIT 0xcd
0000            530   _TF2L           BIT 0xce
0000            531   _TF2H           BIT 0xcf
0000            532   _T4XCLK0        BIT 0x98
0000            533   _T4XCLK1        BIT 0x99
0000            534   _TR4            BIT 0x9a
0000            535   _T4SPLIT        BIT 0x9b
0000            536   _TF4CEN         BIT 0x9c
0000            537   _TF4LEN         BIT 0x9d
0000            538   _TF4L           BIT 0x9e
0000            539   _TF4H           BIT 0x9f
0000            540   _T5XCLK0        BIT 0xc0
0000            541   _T5XCLK1        BIT 0xc1
0000            542   _TR5            BIT 0xc2
0000            543   _T5SPLIT        BIT 0xc3
0000            544   _TF5CEN         BIT 0xc4
0000            545   _TF5LEN         BIT 0xc5
0000            546   _TF5L           BIT 0xc6
0000            547   _TF5H           BIT 0xc7
0000            548   _RIE            BIT 0xd8
0000            549   _RXTO0          BIT 0xd9
0000            550   _RXTO1          BIT 0xda
0000            551   _RFRQ           BIT 0xdb
0000            552   _TIE            BIT 0xdc
0000            553   _TXHOLD         BIT 0xdd
0000            554   _TXNF1          BIT 0xde
0000            555   _TFRQ           BIT 0xdf
0000            556   ;--------------------------------------------------------
0000            557   ; overlayable register banks
0000            558   ;--------------------------------------------------------
0000            559            rbank0 segment data overlay
0000            560   ;--------------------------------------------------------
0000            561   ; overlayable bit register bank
0000            562   ;--------------------------------------------------------
0000            563            rseg BIT_BANK
0000            564   bits:
0000            565            ds 1
0001            566            b0 equ  bits.0 
0001            567            b1 equ  bits.1 
0001            568            b2 equ  bits.2 
0001            569            b3 equ  bits.3 
0001            570            b4 equ  bits.4 
0001            571            b5 equ  bits.5 
0001            572            b6 equ  bits.6 
0001            573            b7 equ  bits.7 
0001            574   ;--------------------------------------------------------
0001            575   ; internal ram data
0001            576   ;--------------------------------------------------------
0000            577            rseg R_DSEG
0000            578   _SPI_write_PARM_2:
0000            579            ds 1
0001            580   _BMM150_compensate_x_PARM_2:
0001            581            ds 3
0004            582   _BMM150_compensate_x_sloc0_1_0:
0004            583            ds 4
0008            584   _BMM150_compensate_y_PARM_2:
0008            585            ds 3
000B            586   _BMM150_compensate_y_sloc0_1_0:
000B            587            ds 4
000F            588   _BMM150_Read_Data_PARM_2:
000F            589            ds 3
0012            590   _BMM150_Read_Data_mag_x_1_123:
0012            591            ds 3
0015            592   _getstr1_PARM_2:
0015            593            ds 1
0016            594   _Read_angle_sloc0_1_0:
0016            595            ds 4
001A            596   _Auto_mode_slave_sloc0_1_0:
001A            597            ds 2
001C            598   _Joystick_Control_PARM_2:
001C            599            ds 3
001F            600   _Joystick_Control_sloc0_1_0:
001F            601            ds 2
0021            602   _Joystick_Control_sloc1_1_0:
0021            603            ds 2
0023            604   _Joystick_Control_sloc2_1_0:
0023            605            ds 1
0024            606   _Joystick_Control_sloc3_1_0:
0024            607            ds 4
0028            608   _Joystick_Control_sloc4_1_0:
0028            609            ds 4
002C            610   _Joystick_Control_sloc5_1_0:
002C            611            ds 4
0030            612   _main_pick_char_1_251:
0030            613            ds 1
0031            614   ;--------------------------------------------------------
0031            615   ; overlayable items in internal ram 
0031            616   ;--------------------------------------------------------
0000            617            rseg    R_OSEG
0000            618            rseg    R_OSEG
0000            619            rseg    R_OSEG
0000            620            rseg    R_OSEG
0000            621            rseg    R_OSEG
0000            622            rseg    R_OSEG
0000            623   _InitPinADC_PARM_2:
0000            624            ds 1
0001            625            rseg    R_OSEG
0001            626            rseg    R_OSEG
0001            627   _check_bound_PARM_2:
0001            628            ds 2
0003            629   ;--------------------------------------------------------
0003            630   ; indirectly addressable internal ram data
0003            631   ;--------------------------------------------------------
0000            632            rseg R_ISEG
0000            633   _buff:
0000            634            ds 20
0014            635   ;--------------------------------------------------------
0014            636   ; absolute internal ram data
0014            637   ;--------------------------------------------------------
0000            638            DSEG
0000            639   ;--------------------------------------------------------
0000            640   ; bit data
0000            641   ;--------------------------------------------------------
0000            642            rseg R_BSEG
0000            643   ;--------------------------------------------------------
0000            644   ; paged external ram data
0000            645   ;--------------------------------------------------------
0000            646            rseg R_PSEG
0000            647   ;--------------------------------------------------------
0000            648   ; external ram data
0000            649   ;--------------------------------------------------------
0000            650            rseg R_XSEG
0000            651   _freq100:
0000            652            ds 4
0004            653   _d1:
0004            654            ds 2
0006            655   _d2:
0006            656            ds 2
0008            657   _dig_x1:
0008            658            ds 1
0009            659   _dig_x2:
0009            660            ds 1
000A            661   _dig_y1:
000A            662            ds 1
000B            663   _dig_y2:
000B            664            ds 1
000C            665   _dig_z1:
000C            666            ds 2
000E            667   _dig_z2:
000E            668            ds 2
0010            669   _dig_z3:
0010            670            ds 2
0012            671   _dig_z4:
0012            672            ds 2
0014            673   _dig_xy1:
0014            674            ds 1
0015            675   _dig_xy2:
0015            676            ds 1
0016            677   _dig_xyz1:
0016            678            ds 2
0018            679   _temp:
0018            680            ds 4
001C            681   _overflow_count:
001C            682            ds 1
001D            683   _BMM150_Read_Trim_Registers_trim_x1y1_1_97:
001D            684            ds 2
001F            685   _BMM150_Read_Trim_Registers_trim_xyz_data_1_97:
001F            686            ds 4
0023            687   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_97:
0023            688            ds 10
002D            689   _BMM150_compensate_x_retval_1_106:
002D            690            ds 2
002F            691   _BMM150_compensate_x_process_comp_x0_1_106:
002F            692            ds 2
0031            693   _BMM150_compensate_y_retval_1_115:
0031            694            ds 2
0033            695   _BMM150_compensate_y_process_comp_y0_1_115:
0033            696            ds 2
0035            697   _BMM150_Read_Data_x_val_1_124:
0035            698            ds 2
0037            699   _BMM150_Read_Data_y_val_1_124:
0037            700            ds 2
0039            701   _BMM150_Read_Data_rhall_val_1_124:
0039            702            ds 2
003B            703   _ReadHX711_dataa_1_168:
003B            704            ds 4
003F            705   _ReadHX711_j_1_168:
003F            706            ds 1
0040            707   _Read_angle_mag_x_1_210:
0040            708            ds 2
0042            709   _Read_angle_mag_y_1_210:
0042            710            ds 2
0044            711   _Read_angle_sum_x_1_210:
0044            712            ds 4
0048            713   _Read_angle_sum_y_1_210:
0048            714            ds 4
004C            715   _Read_angle_angle_1_210:
004C            716            ds 4
0050            717   _Auto_mode_slave_command_1_212:
0050            718            ds 2
0052            719   _Auto_mode_slave_state_res_1_212:
0052            720            ds 2
0054            721   _Auto_mode_slave_dummy_1_212:
0054            722            ds 2
0056            723   _Joystick_Control_vx_error_1_228:
0056            724            ds 2
0058            725   _Joystick_Control_vy_error_1_228:
0058            726            ds 2
005A            727   _Joystick_Control_vx_err_1_228:
005A            728            ds 2
005C            729   _Joystick_Control_vy_err_1_228:
005C            730            ds 2
005E            731   _main_vx_1_251:
005E            732            ds 2
0060            733   _main_vy_1_251:
0060            734            ds 2
0062            735   _main_auto_mode_1_251:
0062            736            ds 2
0064            737   ;--------------------------------------------------------
0064            738   ; absolute external ram data
0064            739   ;--------------------------------------------------------
0000            740            XSEG
0000            741   ;--------------------------------------------------------
0000            742   ; external initialized ram data
0000            743   ;--------------------------------------------------------
0000            744            rseg R_IXSEG
0000            745   _pwm_counter:
0000            746            ds 2
0002            747   _servo_counter:
0002            748            ds 2
0004            749   _pwm_left:
0004            750            ds 1
0005            751   _pwm_right:
0005            752            ds 1
0006            753   _L_motor_dir:
0006            754            ds 1
0007            755   _R_motor_dir:
0007            756            ds 1
0008            757   _servo_base:
0008            758            ds 1
0009            759   _servo_arm:
0009            760            ds 1
000A            761   _vx_thres:
000A            762            ds 2
000C            763   _vy_thres:
000C            764            ds 2
000E            765   _vx:
000E            766            ds 2
0010            767   _vy:
0010            768            ds 2
0012            769   _fre_mea_count:
0012            770            ds 2
0014            771   _weight_mea_count:
0014            772            ds 2
0016            773   _seed:
0016            774            ds 2
0018            775   _pwm_corr:
0018            776            ds 4
001C            777   _curr_angle:
001C            778            ds 4
0020            779   _raw_angle:
0020            780            ds 4
0024            781   _last_raw_angle:
0024            782            ds 4
0028            783   _angle_diff:
0028            784            ds 4
002C            785   _mea_yes:
002C            786            ds 1
002D            787   _weight:
002D            788            ds 2
002F            789   _duration:
002F            790            ds 4
0033            791   _distance:
0033            792            ds 4
0000            793            rseg R_HOME
0000            794            rseg R_GSINIT
0000            795            rseg R_CSEG
0000            796   ;--------------------------------------------------------
0000            797   ; Reset entry point and interrupt vectors
0000            798   ;--------------------------------------------------------
0000            799            CSEG at 0x0000
0000 020000     800            ljmp    _crt0
0093            801            CSEG at 0x0093
0093 020000     802            ljmp    _Timer5_ISR
0096            803   ;--------------------------------------------------------
0096            804   ; global & static initialisations
0096            805   ;--------------------------------------------------------
0000            806            rseg R_HOME
0000            807            rseg R_GSINIT
0000            808            rseg R_GSINIT
0000            809   ;--------------------------------------------------------
0000            810   ; data variables initialization
0000            811   ;--------------------------------------------------------
0000            812            rseg R_DINIT
0000            813            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            814   ;--------------------------------------------------------
0000            815   ; code
0000            816   ;--------------------------------------------------------
0000            817            rseg R_CSEG
0000            818   ;------------------------------------------------------------
0000            819   ;Allocation info for local variables in function '_c51_external_startup'
0000            820   ;------------------------------------------------------------
0000            821   ;------------------------------------------------------------
0000            822   ;        main.c:114: char _c51_external_startup (void)
0000            823   ;        -----------------------------------------
0000            824   ;         function _c51_external_startup
0000            825   ;        -----------------------------------------
0000            826   __c51_external_startup:
0000            827            using   0
0000            828   ;        main.c:117: SFRPAGE = 0x00;
0000 75A700     829            mov     _SFRPAGE,#0x00
0003            830   ;        main.c:118: WDTCN = 0xDE; //First key
0003 7597DE     831            mov     _WDTCN,#0xDE
0006            832   ;        main.c:119: WDTCN = 0xAD; //Second key
0006 7597AD     833            mov     _WDTCN,#0xAD
0009            834   ;        main.c:121: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     835            mov     _VDM0CN,#0x80
000C            836   ;        main.c:122: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     837            mov     _RSTSRC,#0x06
000F            838   ;        main.c:129: SFRPAGE = 0x10;
000F 75A710     839            mov     _SFRPAGE,#0x10
0012            840   ;        main.c:130: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     841            mov     _PFE0CN,#0x20
0015            842   ;        main.c:131: SFRPAGE = 0x00;
0015 75A700     843            mov     _SFRPAGE,#0x00
0018            844   ;        main.c:152: CLKSEL = 0x00;
0018 75A900     845            mov     _CLKSEL,#0x00
001B            846   ;        main.c:153: CLKSEL = 0x00;
001B 75A900     847            mov     _CLKSEL,#0x00
001E            848   ;        main.c:154: while ((CLKSEL & 0x80) == 0);
001E            849   L002001?:
001E E5A9       850            mov     a,_CLKSEL
0020 30E718     851            jnb     acc.7,L002001?
0023            852   ;        main.c:155: CLKSEL = 0x03;
0023 75A903     853            mov     _CLKSEL,#0x03
0026            854   ;        main.c:156: CLKSEL = 0x03;
0026 75A903     855            mov     _CLKSEL,#0x03
0029            856   ;        main.c:157: while ((CLKSEL & 0x80) == 0);
0029            857   L002004?:
0029 E5A9       858            mov     a,_CLKSEL
002B 30E798     859            jnb     acc.7,L002004?
002E            860   ;        main.c:163: P0MDOUT |= 0b_1100_0000;
002E 43A4C0     861            orl     _P0MDOUT,#0xC0
0031            862   ;        main.c:164: P1MDOUT |= 0b_0000_0110;
0031 43A506     863            orl     _P1MDOUT,#0x06
0034            864   ;        main.c:165: P2MDOUT |= 0b_0000_0001; // P2.0 in push-pull mode
0034 43A601     865            orl     _P2MDOUT,#0x01
0037            866   ;        main.c:166: XBR0     = 0b_0000_0011; // UART0E = 1 and SPI0E = 1 0b_0000_0011               
0037 75E103     867            mov     _XBR0,#0x03
003A            868   ;        main.c:167: XBR1     = 0b_0000_0000;
003A 75E200     869            mov     _XBR1,#0x00
003D            870   ;        main.c:168: XBR2     = 0b_0100_0001; // Enable crossbar and uart 1
003D 75E341     871            mov     _XBR2,#0x41
0040            872   ;        main.c:169: P0SKIP       = 0b_0000_0111; 
0040 75D407     873            mov     _P0SKIP,#0x07
0043            874   ;        main.c:170: P1SKIP   = 0b_1111_1001;
0043 75D5F9     875            mov     _P1SKIP,#0xF9
0046            876   ;        main.c:175: SCON0 = 0x10;
0046 759810     877            mov     _SCON0,#0x10
0049            878   ;        main.c:176: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     879            mov     _TH1,#0xE6
004C            880   ;        main.c:177: TL1 = TH1;      // Init Timer1
004C 858D8B     881            mov     _TL1,_TH1
004F            882   ;        main.c:178: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     883            anl     _TMOD,#0x0F
0052            884   ;        main.c:179: TMOD |=  0x20;                       
0052 438920     885            orl     _TMOD,#0x20
0055            886   ;        main.c:180: TR1 = 1; // START Timer1
0055 D28E       887            setb    _TR1
0057            888   ;        main.c:181: TI = 1;  // Indicate TX0 ready
0057 D299       889            setb    _TI
0059            890   ;        main.c:182: P2_0=1; // 'set' pin to 1 is normal operation mode.
0059 D2A0       891            setb    _P2_0
005B            892   ;        main.c:185: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
005B 75A211     893            mov     _SPI0CKR,#0x11
005E            894   ;        main.c:186: SPI0CFG = 0b_1110_0000; // SPI mode 3
005E 75A1E0     895            mov     _SPI0CFG,#0xE0
0061            896   ;        main.c:187: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0061 75F801     897            mov     _SPI0CN0,#0x01
0064            898   ;        main.c:190: SFRPAGE=0x10;
0064 75A710     899            mov     _SFRPAGE,#0x10
0067            900   ;        main.c:191: TMR5CN0=0x00;
0067 75C000     901            mov     _TMR5CN0,#0x00
006A            902   ;        main.c:192: TMR5=0xffff;   // Set to reload immediately
006A 75D4FF     903            mov     _TMR5,#0xFF
006D 75D5FF     904            mov     (_TMR5 >> 8),#0xFF
0070            905   ;        main.c:193: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
0070 43F308     906            orl     _EIE2,#0x08
0073            907   ;        main.c:194: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0073 D2C2       908            setb    _TR5
0075            909   ;        main.c:196: EA=1;  // Enable global interrupts
0075 D2AF       910            setb    _EA
0077            911   ;        main.c:197: SFRPAGE=0x00;
0077 75A700     912            mov     _SFRPAGE,#0x00
007A            913   ;        main.c:199: return 0;
007A 758200     914            mov     dpl,#0x00
007D 22         915            ret
007E            916   ;------------------------------------------------------------
007E            917   ;Allocation info for local variables in function 'Timer3us'
007E            918   ;------------------------------------------------------------
007E            919   ;us                        Allocated to registers r2 
007E            920   ;i                         Allocated to registers r3 
007E            921   ;------------------------------------------------------------
007E            922   ;        main.c:203: void Timer3us(unsigned char us)
007E            923   ;        -----------------------------------------
007E            924   ;         function Timer3us
007E            925   ;        -----------------------------------------
007E            926   _Timer3us:
007E AA82       927            mov     r2,dpl
0080            928   ;        main.c:208: CKCON0|=0b_0100_0000;
0080 438E40     929            orl     _CKCON0,#0x40
0083            930   ;        main.c:210: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0083 7592B8     931            mov     _TMR3RL,#0xB8
0086 7593FF     932            mov     (_TMR3RL >> 8),#0xFF
0089            933   ;        main.c:211: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0089 859294     934            mov     _TMR3,_TMR3RL
008C 859395     935            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
008F            936   ;        main.c:213: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
008F 759104     937            mov     _TMR3CN0,#0x04
0092            938   ;        main.c:214: for (i = 0; i < us; i++)       // Count <us> overflows
0092 7B00       939            mov     r3,#0x00
0094            940   L003004?:
0094 C3         941            clr     c
0095 EB         942            mov     a,r3
0096 9A         943            subb    a,r2
0097 5000       944            jnc     L003007?
0099            945   ;        main.c:216: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0099            946   L003001?:
0099 E591       947            mov     a,_TMR3CN0
009B 30E798     948            jnb     acc.7,L003001?
009E            949   ;        main.c:217: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
009E 53917F     950            anl     _TMR3CN0,#0x7F
00A1            951   ;        main.c:214: for (i = 0; i < us; i++)       // Count <us> overflows
00A1 0B         952            inc     r3
00A2 8000       953            sjmp    L003004?
00A4            954   L003007?:
00A4            955   ;        main.c:219: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00A4 759100     956            mov     _TMR3CN0,#0x00
00A7 22         957            ret
00A8            958   ;------------------------------------------------------------
00A8            959   ;Allocation info for local variables in function 'waitms'
00A8            960   ;------------------------------------------------------------
00A8            961   ;ms                        Allocated to registers r2 r3 
00A8            962   ;j                         Allocated to registers r4 r5 
00A8            963   ;k                         Allocated to registers r6 
00A8            964   ;------------------------------------------------------------
00A8            965   ;        main.c:222: void waitms (unsigned int ms)
00A8            966   ;        -----------------------------------------
00A8            967   ;         function waitms
00A8            968   ;        -----------------------------------------
00A8            969   _waitms:
00A8 AA82       970            mov     r2,dpl
00AA AB83       971            mov     r3,dph
00AC            972   ;        main.c:226: for(j=0; j<ms; j++)
00AC 7C00       973            mov     r4,#0x00
00AE 7D00       974            mov     r5,#0x00
00B0            975   L004005?:
00B0 C3         976            clr     c
00B1 EC         977            mov     a,r4
00B2 9A         978            subb    a,r2
00B3 ED         979            mov     a,r5
00B4 9B         980            subb    a,r3
00B5 5000       981            jnc     L004009?
00B7            982   ;        main.c:227: for (k=0; k<4; k++) Timer3us(250);
00B7 7E00       983            mov     r6,#0x00
00B9            984   L004001?:
00B9 BE04D8     985            cjne    r6,#0x04,L004018?
00BC            986   L004018?:
00BC 5000       987            jnc     L004007?
00BE 7582FA     988            mov     dpl,#0xFA
00C1 C002       989            push    ar2
00C3 C003       990            push    ar3
00C5 C004       991            push    ar4
00C7 C005       992            push    ar5
00C9 C006       993            push    ar6
00CB 120000     994            lcall   _Timer3us
00CE D006       995            pop     ar6
00D0 D005       996            pop     ar5
00D2 D004       997            pop     ar4
00D4 D003       998            pop     ar3
00D6 D002       999            pop     ar2
00D8 0E        1000            inc     r6
00D9 8000      1001            sjmp    L004001?
00DB           1002   L004007?:
00DB           1003   ;        main.c:226: for(j=0; j<ms; j++)
00DB 0C        1004            inc     r4
00DC BC0018    1005            cjne    r4,#0x00,L004005?
00DF 0D        1006            inc     r5
00E0 8000      1007            sjmp    L004005?
00E2           1008   L004009?:
00E2 22        1009            ret
00E3           1010   ;------------------------------------------------------------
00E3           1011   ;Allocation info for local variables in function 'SPI_transfer'
00E3           1012   ;------------------------------------------------------------
00E3           1013   ;tx_data                   Allocated to registers 
00E3           1014   ;------------------------------------------------------------
00E3           1015   ;        main.c:230: unsigned char SPI_transfer(unsigned char tx_data)
00E3           1016   ;        -----------------------------------------
00E3           1017   ;         function SPI_transfer
00E3           1018   ;        -----------------------------------------
00E3           1019   _SPI_transfer:
00E3 8582A3    1020            mov     _SPI0DAT,dpl
00E6           1021   ;        main.c:233: while (!SPIF);      // Wait for transfer to complete
00E6           1022   L005001?:
00E6           1023   ;        main.c:234: SPIF = 0;           // Clear SPI interrupt flag
00E6 10FF98    1024            jbc     _SPIF,L005008?
00E9 8000      1025            sjmp    L005001?
00EB           1026   L005008?:
00EB           1027   ;        main.c:235: return SPI0DAT;     // Return received data
00EB 85A382    1028            mov     dpl,_SPI0DAT
00EE 22        1029            ret
00EF           1030   ;------------------------------------------------------------
00EF           1031   ;Allocation info for local variables in function 'SPI_read'
00EF           1032   ;------------------------------------------------------------
00EF           1033   ;reg_addr                  Allocated to registers r2 
00EF           1034   ;value                     Allocated with name '_SPI_read_value_1_93'
00EF           1035   ;------------------------------------------------------------
00EF           1036   ;        main.c:238: unsigned char SPI_read(unsigned char reg_addr)
00EF           1037   ;        -----------------------------------------
00EF           1038   ;         function SPI_read
00EF           1039   ;        -----------------------------------------
00EF           1040   _SPI_read:
00EF AA82      1041            mov     r2,dpl
00F1           1042   ;        main.c:243: reg_addr = reg_addr | 0x80;
00F1 430280    1043            orl     ar2,#0x80
00F4           1044   ;        main.c:245: CS = 0;                // Select the device
00F4 C290      1045            clr     _P1_0
00F6           1046   ;        main.c:246: SPI_transfer(reg_addr);     // Send register address
00F6 8A82      1047            mov     dpl,r2
00F8 120000    1048            lcall   _SPI_transfer
00FB           1049   ;        main.c:247: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
00FB 758200    1050            mov     dpl,#0x00
00FE 120000    1051            lcall   _SPI_transfer
0101           1052   ;        main.c:248: CS = 1;                // Deselect the device
0101 D290      1053            setb    _P1_0
0103           1054   ;        main.c:250: return value;
0103 22        1055            ret
0104           1056   ;------------------------------------------------------------
0104           1057   ;Allocation info for local variables in function 'SPI_write'
0104           1058   ;------------------------------------------------------------
0104           1059   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0104           1060   ;reg_addr                  Allocated to registers r2 
0104           1061   ;------------------------------------------------------------
0104           1062   ;        main.c:253: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0104           1063   ;        -----------------------------------------
0104           1064   ;         function SPI_write
0104           1065   ;        -----------------------------------------
0104           1066   _SPI_write:
0104 AA82      1067            mov     r2,dpl
0106           1068   ;        main.c:256: reg_addr = reg_addr & 0x7F;
0106 53027F    1069            anl     ar2,#0x7F
0109           1070   ;        main.c:258: CS = 0;                // Select device
0109 C290      1071            clr     _P1_0
010B           1072   ;        main.c:259: SPI_transfer(reg_addr);     // Send register address
010B 8A82      1073            mov     dpl,r2
010D 120000    1074            lcall   _SPI_transfer
0110           1075   ;        main.c:260: SPI_transfer(reg_value);    // Send value
0110 851882    1076            mov     dpl,_SPI_write_PARM_2
0113 120000    1077            lcall   _SPI_transfer
0116           1078   ;        main.c:261: CS = 1;                // Deselect device
0116 D290      1079            setb    _P1_0
0118 22        1080            ret
0119           1081   ;------------------------------------------------------------
0119           1082   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
0119           1083   ;------------------------------------------------------------
0119           1084   ;i                         Allocated with name '_BMM150_Read_Trim_Registers_i_1_97'
0119           1085   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_97'
0119           1086   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_97'
0119           1087   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_97'
0119           1088   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97'
0119           1089   ;------------------------------------------------------------
0119           1090   ;        main.c:264: void BMM150_Read_Trim_Registers(void)
0119           1091   ;        -----------------------------------------
0119           1092   ;         function BMM150_Read_Trim_Registers
0119           1093   ;        -----------------------------------------
0119           1094   _BMM150_Read_Trim_Registers:
0119           1095   ;        main.c:268: xdata uint8_t trim_x1y1[2] = {0};
0119 90CAF8    1096            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
011C           1097   ;        main.c:269: xdata uint8_t trim_xyz_data[4] = {0};
011C E4        1098            clr     a
011D F0        1099            movx    @dptr,a
011E 90CAF9    1100            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
0121 F0        1101            movx    @dptr,a
0122 90CB58    1102            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0125 F0        1103            movx    @dptr,a
0126 90CB59    1104            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0001)
0129 F0        1105            movx    @dptr,a
012A 90CB5A    1106            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
012D           1107   ;        main.c:270: xdata uint8_t trim_xy1xy2[10] = {0};
012D E4        1108            clr     a
012E F0        1109            movx    @dptr,a
012F 90CB5B    1110            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0132 F0        1111            movx    @dptr,a
0133 90CBB8    1112            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0136 F0        1113            movx    @dptr,a
0137 90CBB9    1114            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0001)
013A F0        1115            movx    @dptr,a
013B 90CBBA    1116            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0002)
013E E4        1117            clr     a
013F F0        1118            movx    @dptr,a
0140 90CBBB    1119            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0003)
0143 F0        1120            movx    @dptr,a
0144 90CBBC    1121            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0147 F0        1122            movx    @dptr,a
0148 90CBBD    1123            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
014B F0        1124            movx    @dptr,a
014C 90CBBE    1125            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0006)
014F E4        1126            clr     a
0150 F0        1127            movx    @dptr,a
0151 90CBBF    1128            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0007)
0154 F0        1129            movx    @dptr,a
0155 90CBC0    1130            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0158 F0        1131            movx    @dptr,a
0159 90CBC1    1132            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
015C F0        1133            movx    @dptr,a
015D           1134   ;        main.c:273: for (i=0;i<2;i++){
015D 7A00      1135            mov     r2,#0x00
015F           1136   L008001?:
015F BA0218    1137            cjne    r2,#0x02,L008024?
0162           1138   L008024?:
0162 5000      1139            jnc     L008004?
0164           1140   ;        main.c:274: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
0164 EA        1141            mov     a,r2
0165 24F8      1142            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0167 FB        1143            mov     r3,a
0168 E4        1144            clr     a
0169 34CA      1145            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 >> 8)
016B FC        1146            mov     r4,a
016C 745D      1147            mov     a,#0x5D
016E 2A        1148            add     a,r2
016F F582      1149            mov     dpl,a
0171 C002      1150            push    ar2
0173 C003      1151            push    ar3
0175 C004      1152            push    ar4
0177 120000    1153            lcall   _SPI_read
017A AD82      1154            mov     r5,dpl
017C D004      1155            pop     ar4
017E D003      1156            pop     ar3
0180 D002      1157            pop     ar2
0182 8B82      1158            mov     dpl,r3
0184 8C83      1159            mov     dph,r4
0186 ED        1160            mov     a,r5
0187 F0        1161            movx    @dptr,a
0188           1162   ;        main.c:273: for (i=0;i<2;i++){
0188 0A        1163            inc     r2
0189 8000      1164            sjmp    L008001?
018B           1165   L008004?:
018B           1166   ;        main.c:276: for (i=0;i<4;i++){
018B 7A00      1167            mov     r2,#0x00
018D           1168   L008005?:
018D BA04D8    1169            cjne    r2,#0x04,L008026?
0190           1170   L008026?:
0190 5000      1171            jnc     L008008?
0192           1172   ;        main.c:277: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
0192 EA        1173            mov     a,r2
0193 2458      1174            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0195 FB        1175            mov     r3,a
0196 E4        1176            clr     a
0197 34CB      1177            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 >> 8)
0199 FC        1178            mov     r4,a
019A 7462      1179            mov     a,#0x62
019C 2A        1180            add     a,r2
019D F582      1181            mov     dpl,a
019F C002      1182            push    ar2
01A1 C003      1183            push    ar3
01A3 C004      1184            push    ar4
01A5 120000    1185            lcall   _SPI_read
01A8 AD82      1186            mov     r5,dpl
01AA D004      1187            pop     ar4
01AC D003      1188            pop     ar3
01AE D002      1189            pop     ar2
01B0 8B82      1190            mov     dpl,r3
01B2 8C83      1191            mov     dph,r4
01B4 ED        1192            mov     a,r5
01B5 F0        1193            movx    @dptr,a
01B6           1194   ;        main.c:276: for (i=0;i<4;i++){
01B6 0A        1195            inc     r2
01B7 8000      1196            sjmp    L008005?
01B9           1197   L008008?:
01B9           1198   ;        main.c:279: for (i=0;i<10;i++){
01B9 7A00      1199            mov     r2,#0x00
01BB           1200   L008009?:
01BB BA0A98    1201            cjne    r2,#0x0A,L008028?
01BE           1202   L008028?:
01BE 5000      1203            jnc     L008012?
01C0           1204   ;        main.c:280: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
01C0 EA        1205            mov     a,r2
01C1 24B8      1206            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
01C3 FB        1207            mov     r3,a
01C4 E4        1208            clr     a
01C5 34CB      1209            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 >> 8)
01C7 FC        1210            mov     r4,a
01C8 7468      1211            mov     a,#0x68
01CA 2A        1212            add     a,r2
01CB F582      1213            mov     dpl,a
01CD C002      1214            push    ar2
01CF C003      1215            push    ar3
01D1 C004      1216            push    ar4
01D3 120000    1217            lcall   _SPI_read
01D6 AD82      1218            mov     r5,dpl
01D8 D004      1219            pop     ar4
01DA D003      1220            pop     ar3
01DC D002      1221            pop     ar2
01DE 8B82      1222            mov     dpl,r3
01E0 8C83      1223            mov     dph,r4
01E2 ED        1224            mov     a,r5
01E3 F0        1225            movx    @dptr,a
01E4           1226   ;        main.c:279: for (i=0;i<10;i++){
01E4 0A        1227            inc     r2
01E5 8000      1228            sjmp    L008009?
01E7           1229   L008012?:
01E7           1230   ;        main.c:283: dig_x1 = (int8_t) trim_x1y1[0]; 
01E7 90CAF8    1231            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
01EA E0        1232            movx    a,@dptr
01EB 905448    1233            mov     dptr,#_dig_x1
01EE F0        1234            movx    @dptr,a
01EF           1235   ;        main.c:284: dig_y1 = (int8_t) trim_x1y1[1]; 
01EF 90CAF9    1236            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
01F2 E0        1237            movx    a,@dptr
01F3 9053C8    1238            mov     dptr,#_dig_y1
01F6 F0        1239            movx    @dptr,a
01F7           1240   ;        main.c:285: dig_x2 = (int8_t) trim_xyz_data[2]; 
01F7 90CB5A    1241            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
01FA E0        1242            movx    a,@dptr
01FB 905408    1243            mov     dptr,#_dig_x2
01FE F0        1244            movx    @dptr,a
01FF           1245   ;        main.c:286: dig_y2 = (int8_t) trim_xyz_data[3]; 
01FF 90CB5B    1246            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0202 E0        1247            movx    a,@dptr
0203 905388    1248            mov     dptr,#_dig_y2
0206 F0        1249            movx    @dptr,a
0207           1250   ;        main.c:300: dig_xy1 = trim_xy1xy2[9];
0207 90CBC1    1251            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
020A E0        1252            movx    a,@dptr
020B 905248    1253            mov     dptr,#_dig_xy1
020E F0        1254            movx    @dptr,a
020F           1255   ;        main.c:301: dig_xy2 = (int8_t)trim_xy1xy2[8];
020F 90CBC0    1256            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0212 E0        1257            movx    a,@dptr
0213 905208    1258            mov     dptr,#_dig_xy2
0216 F0        1259            movx    @dptr,a
0217           1260   ;        main.c:303: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
0217 90CBBD    1261            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
021A E0        1262            movx    a,@dptr
021B FA        1263            mov     r2,a
021C 53027F    1264            anl     ar2,#0x7F
021F 8A03      1265            mov     ar3,r2
0221 7A00      1266            mov     r2,#0x00
0223           1267   ;        main.c:304: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
0223 90CBBC    1268            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0226 E0        1269            movx    a,@dptr
0227 FC        1270            mov     r4,a
0228 7D00      1271            mov     r5,#0x00
022A 9051C8    1272            mov     dptr,#_dig_xyz1
022D EC        1273            mov     a,r4
022E 4A        1274            orl     a,r2
022F F0        1275            movx    @dptr,a
0230 ED        1276            mov     a,r5
0231 4B        1277            orl     a,r3
0232 A3        1278            inc     dptr
0233 F0        1279            movx    @dptr,a
0234 22        1280            ret
0235           1281   ;------------------------------------------------------------
0235           1282   ;Allocation info for local variables in function 'BMM150_Init'
0235           1283   ;------------------------------------------------------------
0235           1284   ;chip_id                   Allocated with name '_BMM150_Init_chip_id_1_102'
0235           1285   ;------------------------------------------------------------
0235           1286   ;        main.c:308: void BMM150_Init(void)
0235           1287   ;        -----------------------------------------
0235           1288   ;         function BMM150_Init
0235           1289   ;        -----------------------------------------
0235           1290   _BMM150_Init:
0235           1291   ;        main.c:313: CS = 1; // Deselect BMM150
0235 D290      1292            setb    _P1_0
0237           1293   ;        main.c:316: waitms(10);
0237 90000A    1294            mov     dptr,#0x000A
023A 120000    1295            lcall   _waitms
023D           1296   ;        main.c:319: SPI_write(BMM150_POWER_CONTROL, 0x82);
023D 751882    1297            mov     _SPI_write_PARM_2,#0x82
0240 75824B    1298            mov     dpl,#0x4B
0243 120000    1299            lcall   _SPI_write
0246           1300   ;        main.c:320: waitms(10);  // Wait for reset to complete
0246 90000A    1301            mov     dptr,#0x000A
0249 120000    1302            lcall   _waitms
024C           1303   ;        main.c:323: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
024C 751801    1304            mov     _SPI_write_PARM_2,#0x01
024F 75824B    1305            mov     dpl,#0x4B
0252 120000    1306            lcall   _SPI_write
0255           1307   ;        main.c:324: waitms(5);
0255 900005    1308            mov     dptr,#0x0005
0258 120000    1309            lcall   _waitms
025B           1310   ;        main.c:327: chip_id = SPI_read(BMM150_CHIP_ID);
025B 758240    1311            mov     dpl,#0x40
025E 120000    1312            lcall   _SPI_read
0261 AA82      1313            mov     r2,dpl
0263           1314   ;        main.c:328: if (chip_id != BMM150_CHIP_ID_VALUE)
0263 BA3218    1315            cjne    r2,#0x32,L009006?
0266 8000      1316            sjmp    L009002?
0268           1317   L009006?:
0268           1318   ;        main.c:330: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
0268 8A03      1319            mov     ar3,r2
026A 7C00      1320            mov     r4,#0x00
026C C002      1321            push    ar2
026E C003      1322            push    ar3
0270 C004      1323            push    ar4
0272 7498      1324            mov     a,#__str_0
0274 C0E0      1325            push    acc
0276 74DA      1326            mov     a,#(__str_0 >> 8)
0278 C0E0      1327            push    acc
027A 7480      1328            mov     a,#0x80
027C C0E0      1329            push    acc
027E 120000    1330            lcall   _printf
0281 E581      1331            mov     a,sp
0283 24FB      1332            add     a,#0xfb
0285 F581      1333            mov     sp,a
0287 D002      1334            pop     ar2
0289           1335   L009002?:
0289           1336   ;        main.c:340: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
0289 751800    1337            mov     _SPI_write_PARM_2,#0x00
028C 75824C    1338            mov     dpl,#0x4C
028F C002      1339            push    ar2
0291 120000    1340            lcall   _SPI_write
0294           1341   ;        main.c:343: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
0294 75187F    1342            mov     _SPI_write_PARM_2,#0x7F
0297 758251    1343            mov     dpl,#0x51
029A 120000    1344            lcall   _SPI_write
029D           1345   ;        main.c:344: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
029D 75180E    1346            mov     _SPI_write_PARM_2,#0x0E
02A0 758252    1347            mov     dpl,#0x52
02A3 120000    1348            lcall   _SPI_write
02A6           1349   ;        main.c:346: BMM150_Read_Trim_Registers();
02A6 120000    1350            lcall   _BMM150_Read_Trim_Registers
02A9           1351   ;        main.c:348: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
02A9 7B00      1352            mov     r3,#0x00
02AB C003      1353            push    ar3
02AD 7458      1354            mov     a,#__str_1
02AF C0E0      1355            push    acc
02B1 74DB      1356            mov     a,#(__str_1 >> 8)
02B3 C0E0      1357            push    acc
02B5 7480      1358            mov     a,#0x80
02B7 C0E0      1359            push    acc
02B9 120000    1360            lcall   _printf
02BC E581      1361            mov     a,sp
02BE 24FB      1362            add     a,#0xfb
02C0 F581      1363            mov     sp,a
02C2           1364   ;        main.c:349: return; 
02C2 22        1365            ret
02C3           1366   ;------------------------------------------------------------
02C3           1367   ;Allocation info for local variables in function 'BMM150_compensate_x'
02C3           1368   ;------------------------------------------------------------
02C3           1369   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
02C3           1370   ;mag_data_x                Allocated to registers r2 r3 r4 
02C3           1371   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
02C3           1372   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_106'
02C3           1373   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_106'
02C3           1374   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_106'
02C3           1375   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_106'
02C3           1376   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_106'
02C3           1377   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_106'
02C3           1378   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_106'
02C3           1379   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_106'
02C3           1380   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_106'
02C3           1381   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_106'
02C3           1382   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_106'
02C3           1383   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_106'
02C3           1384   ;------------------------------------------------------------
02C3           1385   ;        main.c:352: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
02C3           1386   ;        -----------------------------------------
02C3           1387   ;         function BMM150_compensate_x
02C3           1388   ;        -----------------------------------------
02C3           1389   _BMM150_compensate_x:
02C3           1390   ;        main.c:370: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
02C3 ACF0      1391            mov     r4,b
02C5 120000    1392            lcall   __gptrget
02C8 FA        1393            mov     r2,a
02C9 A3        1394            inc     dptr
02CA 120000    1395            lcall   __gptrget
02CD FB        1396            mov     r3,a
02CE BA0018    1397            cjne    r2,#0x00,L010019?
02D1 BBF018    1398            cjne    r3,#0xF0,L010019?
02D4 020000    1399            ljmp    L010011?
02D7           1400   L010019?:
02D7           1401   ;        main.c:371: if (*data_rhall != 0)
02D7 ACC8      1402            mov     r4,_BMM150_compensate_x_PARM_2
02D9 ADC9      1403            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
02DB AECA      1404            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
02DD 8C82      1405            mov     dpl,r4
02DF 8D83      1406            mov     dph,r5
02E1 8EF0      1407            mov     b,r6
02E3 120000    1408            lcall   __gptrget
02E6 FC        1409            mov     r4,a
02E7 A3        1410            inc     dptr
02E8 120000    1411            lcall   __gptrget
02EB FD        1412            mov     r5,a
02EC 4C        1413            orl     a,r4
02ED 6000      1414            jz      L010005?
02EF           1415   ;        main.c:374: process_comp_x0 = *data_rhall;
02EF 90CC78    1416            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
02F2 EC        1417            mov     a,r4
02F3 F0        1418            movx    @dptr,a
02F4 A3        1419            inc     dptr
02F5 ED        1420            mov     a,r5
02F6 F0        1421            movx    @dptr,a
02F7 8000      1422            sjmp    L010006?
02F9           1423   L010005?:
02F9           1424   ;        main.c:376: else if (dig_xyz1 != 0)
02F9 9051C8    1425            mov     dptr,#_dig_xyz1
02FC E0        1426            movx    a,@dptr
02FD FC        1427            mov     r4,a
02FE A3        1428            inc     dptr
02FF E0        1429            movx    a,@dptr
0300 FD        1430            mov     r5,a
0301 4C        1431            orl     a,r4
0302 6000      1432            jz      L010002?
0304           1433   ;        main.c:378: process_comp_x0 = dig_xyz1;
0304 90CC78    1434            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0307 EC        1435            mov     a,r4
0308 F0        1436            movx    @dptr,a
0309 A3        1437            inc     dptr
030A ED        1438            mov     a,r5
030B F0        1439            movx    @dptr,a
030C 8000      1440            sjmp    L010006?
030E           1441   L010002?:
030E           1442   ;        main.c:382: process_comp_x0 = 0;
030E 90CC78    1443            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0311 E4        1444            clr     a
0312 F0        1445            movx    @dptr,a
0313 A3        1446            inc     dptr
0314 F0        1447            movx    @dptr,a
0315           1448   L010006?:
0315           1449   ;        main.c:384: if (process_comp_x0 != 0)
0315 90CC78    1450            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0318 E0        1451            movx    a,@dptr
0319 FC        1452            mov     r4,a
031A A3        1453            inc     dptr
031B E0        1454            movx    a,@dptr
031C FD        1455            mov     r5,a
031D 4C        1456            orl     a,r4
031E 7000      1457            jnz     L010022?
0320 020000    1458            ljmp    L010008?
0323           1459   L010022?:
0323           1460   ;        main.c:387: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
0323 9051C8    1461            mov     dptr,#_dig_xyz1
0326 E0        1462            movx    a,@dptr
0327 FE        1463            mov     r6,a
0328 A3        1464            inc     dptr
0329 E0        1465            movx    a,@dptr
032A FF        1466            mov     r7,a
032B E4        1467            clr     a
032C F8        1468            mov     r0,a
032D EF        1469            mov     a,r7
032E C8        1470            xch     a,r0
032F 5403      1471            anl     a,#0x03
0331 A2E0      1472            mov     c,acc.0
0333 C8        1473            xch     a,r0
0334 13        1474            rrc     a
0335 C8        1475            xch     a,r0
0336 13        1476            rrc     a
0337 A2E0      1477            mov     c,acc.0
0339 C8        1478            xch     a,r0
033A 13        1479            rrc     a
033B C8        1480            xch     a,r0
033C 13        1481            rrc     a
033D C8        1482            xch     a,r0
033E F9        1483            mov     r1,a
033F EE        1484            mov     a,r6
0340 03        1485            rr      a
0341 03        1486            rr      a
0342 54C0      1487            anl     a,#0xc0
0344 FF        1488            mov     r7,a
0345 EE        1489            mov     a,r6
0346 03        1490            rr      a
0347 03        1491            rr      a
0348 543F      1492            anl     a,#0x3f
034A 48        1493            orl     a,r0
034B F8        1494            mov     r0,a
034C 7E00      1495            mov     r6,#0x00
034E           1496   ;        main.c:388: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
034E 8C00      1497            mov     __divslong_PARM_2,r4
0350 8D01      1498            mov     (__divslong_PARM_2 + 1),r5
0352 750200    1499            mov     (__divslong_PARM_2 + 2),#0x00
0355 750300    1500            mov     (__divslong_PARM_2 + 3),#0x00
0358 8E82      1501            mov     dpl,r6
035A 8F83      1502            mov     dph,r7
035C 88F0      1503            mov     b,r0
035E E9        1504            mov     a,r1
035F C002      1505            push    ar2
0361 C003      1506            push    ar3
0363 120000    1507            lcall   __divslong
0366 AC82      1508            mov     r4,dpl
0368 E583      1509            mov     a,dph
036A 24C0      1510            add     a,#0xc0
036C FD        1511            mov     r5,a
036D           1512   ;        main.c:390: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
036D 8C06      1513            mov     ar6,r4
036F 8D07      1514            mov     ar7,r5
0371 8E28      1515            mov     _BMM150_compensate_x_sloc0_1_0,r6
0373 EF        1516            mov     a,r7
0374 F529      1517            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
0376 33        1518            rlc     a
0377 95E0      1519            subb    a,acc
0379 F52A      1520            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
037B F52B      1521            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
037D 8C06      1522            mov     ar6,r4
037F 8D07      1523            mov     ar7,r5
0381 8E00      1524            mov     __mullong_PARM_2,r6
0383 EF        1525            mov     a,r7
0384 F501      1526            mov     (__mullong_PARM_2 + 1),a
0386 33        1527            rlc     a
0387 95E0      1528            subb    a,acc
0389 F502      1529            mov     (__mullong_PARM_2 + 2),a
038B F503      1530            mov     (__mullong_PARM_2 + 3),a
038D           1531   ;        main.c:391: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
038D 852882    1532            mov     dpl,_BMM150_compensate_x_sloc0_1_0
0390 852983    1533            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
0393 852AF0    1534            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
0396 E52B      1535            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0398 C004      1536            push    ar4
039A C005      1537            push    ar5
039C 120000    1538            lcall   __mullong
039F 858228    1539            mov     _BMM150_compensate_x_sloc0_1_0,dpl
03A2 858329    1540            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
03A5 85F02A    1541            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
03A8 F52B      1542            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03AA 905208    1543            mov     dptr,#_dig_xy2
03AD E0        1544            movx    a,@dptr
03AE FE        1545            mov     r6,a
03AF 33        1546            rlc     a
03B0 95E0      1547            subb    a,acc
03B2 FF        1548            mov     r7,a
03B3 F8        1549            mov     r0,a
03B4 F9        1550            mov     r1,a
03B5 750080    1551            mov     __divslong_PARM_2,#0x80
03B8 E4        1552            clr     a
03B9 F501      1553            mov     (__divslong_PARM_2 + 1),a
03BB F502      1554            mov     (__divslong_PARM_2 + 2),a
03BD F503      1555            mov     (__divslong_PARM_2 + 3),a
03BF 852882    1556            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03C2 852983    1557            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03C5 852AF0    1558            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03C8 E52B      1559            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03CA C006      1560            push    ar6
03CC C007      1561            push    ar7
03CE C000      1562            push    ar0
03D0 C001      1563            push    ar1
03D2 120000    1564            lcall   __divslong
03D5 858200    1565            mov     __mullong_PARM_2,dpl
03D8 858301    1566            mov     (__mullong_PARM_2 + 1),dph
03DB 85F002    1567            mov     (__mullong_PARM_2 + 2),b
03DE F503      1568            mov     (__mullong_PARM_2 + 3),a
03E0 D001      1569            pop     ar1
03E2 D000      1570            pop     ar0
03E4 D007      1571            pop     ar7
03E6 D006      1572            pop     ar6
03E8           1573   ;        main.c:392: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
03E8 8E82      1574            mov     dpl,r6
03EA 8F83      1575            mov     dph,r7
03EC 88F0      1576            mov     b,r0
03EE E9        1577            mov     a,r1
03EF 120000    1578            lcall   __mullong
03F2 858228    1579            mov     _BMM150_compensate_x_sloc0_1_0,dpl
03F5 858329    1580            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
03F8 85F02A    1581            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
03FB F52B      1582            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03FD D005      1583            pop     ar5
03FF D004      1584            pop     ar4
0401 905248    1585            mov     dptr,#_dig_xy1
0404 E0        1586            movx    a,@dptr
0405 FE        1587            mov     r6,a
0406 E4        1588            clr     a
0407 5401      1589            anl     a,#0x01
0409 A2E0      1590            mov     c,acc.0
040B CE        1591            xch     a,r6
040C 13        1592            rrc     a
040D CE        1593            xch     a,r6
040E 13        1594            rrc     a
040F CE        1595            xch     a,r6
0410 8E00      1596            mov     __mullong_PARM_2,r6
0412 F501      1597            mov     (__mullong_PARM_2 + 1),a
0414 33        1598            rlc     a
0415 95E0      1599            subb    a,acc
0417 F502      1600            mov     (__mullong_PARM_2 + 2),a
0419 F503      1601            mov     (__mullong_PARM_2 + 3),a
041B           1602   ;        main.c:393: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
041B ED        1603            mov     a,r5
041C 33        1604            rlc     a
041D 95E0      1605            subb    a,acc
041F FE        1606            mov     r6,a
0420           1607   ;        main.c:394: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
0420 8C82      1608            mov     dpl,r4
0422 8D83      1609            mov     dph,r5
0424 8EF0      1610            mov     b,r6
0426 120000    1611            lcall   __mullong
0429 AC82      1612            mov     r4,dpl
042B AD83      1613            mov     r5,dph
042D AEF0      1614            mov     r6,b
042F FF        1615            mov     r7,a
0430 EC        1616            mov     a,r4
0431 2528      1617            add     a,_BMM150_compensate_x_sloc0_1_0
0433 FC        1618            mov     r4,a
0434 ED        1619            mov     a,r5
0435 3529      1620            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
0437 FD        1621            mov     r5,a
0438 EE        1622            mov     a,r6
0439 352A      1623            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
043B FE        1624            mov     r6,a
043C EF        1625            mov     a,r7
043D 352B      1626            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
043F FF        1627            mov     r7,a
0440 750000    1628            mov     __divslong_PARM_2,#0x00
0443 750102    1629            mov     (__divslong_PARM_2 + 1),#0x02
0446 750200    1630            mov     (__divslong_PARM_2 + 2),#0x00
0449 750300    1631            mov     (__divslong_PARM_2 + 3),#0x00
044C 8C82      1632            mov     dpl,r4
044E 8D83      1633            mov     dph,r5
0450 8EF0      1634            mov     b,r6
0452 EF        1635            mov     a,r7
0453 120000    1636            lcall   __divslong
0456 AC82      1637            mov     r4,dpl
0458 AD83      1638            mov     r5,dph
045A AEF0      1639            mov     r6,b
045C FF        1640            mov     r7,a
045D 7410      1641            mov     a,#0x10
045F 2E        1642            add     a,r6
0460 FE        1643            mov     r6,a
0461 E4        1644            clr     a
0462 3F        1645            addc    a,r7
0463 FF        1646            mov     r7,a
0464           1647   ;        main.c:395: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
0464 905408    1648            mov     dptr,#_dig_x2
0467 E0        1649            movx    a,@dptr
0468 F8        1650            mov     r0,a
0469 33        1651            rlc     a
046A 95E0      1652            subb    a,acc
046C F9        1653            mov     r1,a
046D 74A0      1654            mov     a,#0xA0
046F 28        1655            add     a,r0
0470 F8        1656            mov     r0,a
0471 E4        1657            clr     a
0472 39        1658            addc    a,r1
0473 8800      1659            mov     __mullong_PARM_2,r0
0475 F501      1660            mov     (__mullong_PARM_2 + 1),a
0477 33        1661            rlc     a
0478 95E0      1662            subb    a,acc
047A F502      1663            mov     (__mullong_PARM_2 + 2),a
047C F503      1664            mov     (__mullong_PARM_2 + 3),a
047E           1665   ;        main.c:396: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
047E 8C82      1666            mov     dpl,r4
0480 8D83      1667            mov     dph,r5
0482 8EF0      1668            mov     b,r6
0484 EF        1669            mov     a,r7
0485 120000    1670            lcall   __mullong
0488           1671   ;        main.c:397: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
0488 750000    1672            mov     __divslong_PARM_2,#0x00
048B 750110    1673            mov     (__divslong_PARM_2 + 1),#0x10
048E 750200    1674            mov     (__divslong_PARM_2 + 2),#0x00
0491 750300    1675            mov     (__divslong_PARM_2 + 3),#0x00
0494 120000    1676            lcall   __divslong
0497 858200    1677            mov     __mullong_PARM_2,dpl
049A 858301    1678            mov     (__mullong_PARM_2 + 1),dph
049D 85F002    1679            mov     (__mullong_PARM_2 + 2),b
04A0 F503      1680            mov     (__mullong_PARM_2 + 3),a
04A2 D003      1681            pop     ar3
04A4 D002      1682            pop     ar2
04A6 EB        1683            mov     a,r3
04A7 33        1684            rlc     a
04A8 95E0      1685            subb    a,acc
04AA FC        1686            mov     r4,a
04AB           1687   ;        main.c:398: retval = ((int16_t)(process_comp_x10 / 8192));
04AB 8A82      1688            mov     dpl,r2
04AD 8B83      1689            mov     dph,r3
04AF 8CF0      1690            mov     b,r4
04B1 120000    1691            lcall   __mullong
04B4 750000    1692            mov     __divslong_PARM_2,#0x00
04B7 750120    1693            mov     (__divslong_PARM_2 + 1),#0x20
04BA 750200    1694            mov     (__divslong_PARM_2 + 2),#0x00
04BD 750300    1695            mov     (__divslong_PARM_2 + 3),#0x00
04C0 120000    1696            lcall   __divslong
04C3 AA82      1697            mov     r2,dpl
04C5 AB83      1698            mov     r3,dph
04C7           1699   ;        main.c:399: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
04C7 905448    1700            mov     dptr,#_dig_x1
04CA E0        1701            movx    a,@dptr
04CB FC        1702            mov     r4,a
04CC 33        1703            rlc     a
04CD 95E0      1704            subb    a,acc
04CF C4        1705            swap    a
04D0 03        1706            rr      a
04D1 54F8      1707            anl     a,#0xf8
04D3 CC        1708            xch     a,r4
04D4 C4        1709            swap    a
04D5 03        1710            rr      a
04D6 CC        1711            xch     a,r4
04D7 6C        1712            xrl     a,r4
04D8 CC        1713            xch     a,r4
04D9 54F8      1714            anl     a,#0xf8
04DB CC        1715            xch     a,r4
04DC 6C        1716            xrl     a,r4
04DD FD        1717            mov     r5,a
04DE EC        1718            mov     a,r4
04DF 2A        1719            add     a,r2
04E0 F582      1720            mov     dpl,a
04E2 ED        1721            mov     a,r5
04E3 3B        1722            addc    a,r3
04E4 F583      1723            mov     dph,a
04E6 750010    1724            mov     __divsint_PARM_2,#0x10
04E9 E4        1725            clr     a
04EA F501      1726            mov     (__divsint_PARM_2 + 1),a
04EC 120000    1727            lcall   __divsint
04EF E582      1728            mov     a,dpl
04F1 8583F0    1729            mov     b,dph
04F4 90CC18    1730            mov     dptr,#_BMM150_compensate_x_retval_1_106
04F7 F0        1731            movx    @dptr,a
04F8 A3        1732            inc     dptr
04F9 E5F0      1733            mov     a,b
04FB F0        1734            movx    @dptr,a
04FC 8000      1735            sjmp    L010012?
04FE           1736   L010008?:
04FE           1737   ;        main.c:402: retval = BMM150_OVERFLOW_OUTPUT; 
04FE 90CC18    1738            mov     dptr,#_BMM150_compensate_x_retval_1_106
0501 E4        1739            clr     a
0502 F0        1740            movx    @dptr,a
0503 A3        1741            inc     dptr
0504 7480      1742            mov     a,#0x80
0506 F0        1743            movx    @dptr,a
0507 8000      1744            sjmp    L010012?
0509           1745   L010011?:
0509           1746   ;        main.c:406: retval = BMM150_OVERFLOW_OUTPUT; 
0509 90CC18    1747            mov     dptr,#_BMM150_compensate_x_retval_1_106
050C E4        1748            clr     a
050D F0        1749            movx    @dptr,a
050E A3        1750            inc     dptr
050F 7480      1751            mov     a,#0x80
0511 F0        1752            movx    @dptr,a
0512           1753   L010012?:
0512           1754   ;        main.c:408: return retval; 
0512 90CC18    1755            mov     dptr,#_BMM150_compensate_x_retval_1_106
0515 E0        1756            movx    a,@dptr
0516 FA        1757            mov     r2,a
0517 A3        1758            inc     dptr
0518 E0        1759            movx    a,@dptr
0519 8A82      1760            mov     dpl,r2
051B F583      1761            mov     dph,a
051D 22        1762            ret
051E           1763   ;------------------------------------------------------------
051E           1764   ;Allocation info for local variables in function 'BMM150_compensate_y'
051E           1765   ;------------------------------------------------------------
051E           1766   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
051E           1767   ;mag_data_y                Allocated to registers r2 r3 r4 
051E           1768   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
051E           1769   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_115'
051E           1770   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_115'
051E           1771   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_115'
051E           1772   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_115'
051E           1773   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_115'
051E           1774   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_115'
051E           1775   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_115'
051E           1776   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_115'
051E           1777   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_115'
051E           1778   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_115'
051E           1779   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_115'
051E           1780   ;------------------------------------------------------------
051E           1781   ;        main.c:411: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
051E           1782   ;        -----------------------------------------
051E           1783   ;         function BMM150_compensate_y
051E           1784   ;        -----------------------------------------
051E           1785   _BMM150_compensate_y:
051E           1786   ;        main.c:429: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
051E ACF0      1787            mov     r4,b
0520 120000    1788            lcall   __gptrget
0523 FA        1789            mov     r2,a
0524 A3        1790            inc     dptr
0525 120000    1791            lcall   __gptrget
0528 FB        1792            mov     r3,a
0529 BA00C8    1793            cjne    r2,#0x00,L011019?
052C BBF0C8    1794            cjne    r3,#0xF0,L011019?
052F 020000    1795            ljmp    L011011?
0532           1796   L011019?:
0532           1797   ;        main.c:431: if (*data_rhall != 0)
0532 AC78      1798            mov     r4,_BMM150_compensate_y_PARM_2
0534 AD79      1799            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
0536 AE7A      1800            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
0538 8C82      1801            mov     dpl,r4
053A 8D83      1802            mov     dph,r5
053C 8EF0      1803            mov     b,r6
053E 120000    1804            lcall   __gptrget
0541 FC        1805            mov     r4,a
0542 A3        1806            inc     dptr
0543 120000    1807            lcall   __gptrget
0546 FD        1808            mov     r5,a
0547 4C        1809            orl     a,r4
0548 6000      1810            jz      L011005?
054A           1811   ;        main.c:434: process_comp_y0 = *data_rhall;
054A 90CD38    1812            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
054D EC        1813            mov     a,r4
054E F0        1814            movx    @dptr,a
054F A3        1815            inc     dptr
0550 ED        1816            mov     a,r5
0551 F0        1817            movx    @dptr,a
0552 8000      1818            sjmp    L011006?
0554           1819   L011005?:
0554           1820   ;        main.c:436: else if (dig_xyz1 != 0)
0554 9051C8    1821            mov     dptr,#_dig_xyz1
0557 E0        1822            movx    a,@dptr
0558 FC        1823            mov     r4,a
0559 A3        1824            inc     dptr
055A E0        1825            movx    a,@dptr
055B FD        1826            mov     r5,a
055C 4C        1827            orl     a,r4
055D 6000      1828            jz      L011002?
055F           1829   ;        main.c:438: process_comp_y0 = dig_xyz1;
055F 90CD38    1830            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
0562 EC        1831            mov     a,r4
0563 F0        1832            movx    @dptr,a
0564 A3        1833            inc     dptr
0565 ED        1834            mov     a,r5
0566 F0        1835            movx    @dptr,a
0567 8000      1836            sjmp    L011006?
0569           1837   L011002?:
0569           1838   ;        main.c:442: process_comp_y0 = 0;
0569 90CD38    1839            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
056C E4        1840            clr     a
056D F0        1841            movx    @dptr,a
056E A3        1842            inc     dptr
056F F0        1843            movx    @dptr,a
0570           1844   L011006?:
0570           1845   ;        main.c:445: if (process_comp_y0 != 0)
0570 90CD38    1846            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
0573 E0        1847            movx    a,@dptr
0574 FC        1848            mov     r4,a
0575 A3        1849            inc     dptr
0576 E0        1850            movx    a,@dptr
0577 FD        1851            mov     r5,a
0578 4C        1852            orl     a,r4
0579 7000      1853            jnz     L011022?
057B 020000    1854            ljmp    L011008?
057E           1855   L011022?:
057E           1856   ;        main.c:448: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
057E 9051C8    1857            mov     dptr,#_dig_xyz1
0581 E0        1858            movx    a,@dptr
0582 FE        1859            mov     r6,a
0583 A3        1860            inc     dptr
0584 E0        1861            movx    a,@dptr
0585 FF        1862            mov     r7,a
0586 E4        1863            clr     a
0587 F8        1864            mov     r0,a
0588 EF        1865            mov     a,r7
0589 C8        1866            xch     a,r0
058A 5403      1867            anl     a,#0x03
058C A2E0      1868            mov     c,acc.0
058E C8        1869            xch     a,r0
058F 13        1870            rrc     a
0590 C8        1871            xch     a,r0
0591 13        1872            rrc     a
0592 A2E0      1873            mov     c,acc.0
0594 C8        1874            xch     a,r0
0595 13        1875            rrc     a
0596 C8        1876            xch     a,r0
0597 13        1877            rrc     a
0598 C8        1878            xch     a,r0
0599 F9        1879            mov     r1,a
059A EE        1880            mov     a,r6
059B 03        1881            rr      a
059C 03        1882            rr      a
059D 54C0      1883            anl     a,#0xc0
059F FF        1884            mov     r7,a
05A0 EE        1885            mov     a,r6
05A1 03        1886            rr      a
05A2 03        1887            rr      a
05A3 543F      1888            anl     a,#0x3f
05A5 48        1889            orl     a,r0
05A6 F8        1890            mov     r0,a
05A7 7E00      1891            mov     r6,#0x00
05A9 8C00      1892            mov     __divslong_PARM_2,r4
05AB 8D01      1893            mov     (__divslong_PARM_2 + 1),r5
05AD 750200    1894            mov     (__divslong_PARM_2 + 2),#0x00
05B0 750300    1895            mov     (__divslong_PARM_2 + 3),#0x00
05B3           1896   ;        main.c:449: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
05B3 8E82      1897            mov     dpl,r6
05B5 8F83      1898            mov     dph,r7
05B7 88F0      1899            mov     b,r0
05B9 E9        1900            mov     a,r1
05BA C002      1901            push    ar2
05BC C003      1902            push    ar3
05BE 120000    1903            lcall   __divslong
05C1 AC82      1904            mov     r4,dpl
05C3 E583      1905            mov     a,dph
05C5 24C0      1906            add     a,#0xc0
05C7 FD        1907            mov     r5,a
05C8           1908   ;        main.c:451: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
05C8 8C06      1909            mov     ar6,r4
05CA 8D07      1910            mov     ar7,r5
05CC 8E78      1911            mov     _BMM150_compensate_y_sloc0_1_0,r6
05CE EF        1912            mov     a,r7
05CF F579      1913            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
05D1 33        1914            rlc     a
05D2 95E0      1915            subb    a,acc
05D4 F57A      1916            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
05D6 F57B      1917            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
05D8 8C06      1918            mov     ar6,r4
05DA 8D07      1919            mov     ar7,r5
05DC 8E00      1920            mov     __mullong_PARM_2,r6
05DE EF        1921            mov     a,r7
05DF F501      1922            mov     (__mullong_PARM_2 + 1),a
05E1 33        1923            rlc     a
05E2 95E0      1924            subb    a,acc
05E4 F502      1925            mov     (__mullong_PARM_2 + 2),a
05E6 F503      1926            mov     (__mullong_PARM_2 + 3),a
05E8           1927   ;        main.c:452: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
05E8 857882    1928            mov     dpl,_BMM150_compensate_y_sloc0_1_0
05EB 857983    1929            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
05EE 857AF0    1930            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
05F1 E57B      1931            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
05F3 C004      1932            push    ar4
05F5 C005      1933            push    ar5
05F7 120000    1934            lcall   __mullong
05FA 858278    1935            mov     _BMM150_compensate_y_sloc0_1_0,dpl
05FD 858379    1936            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
0600 85F07A    1937            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
0603 F57B      1938            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0605 905208    1939            mov     dptr,#_dig_xy2
0608 E0        1940            movx    a,@dptr
0609 FE        1941            mov     r6,a
060A 33        1942            rlc     a
060B 95E0      1943            subb    a,acc
060D FF        1944            mov     r7,a
060E F8        1945            mov     r0,a
060F F9        1946            mov     r1,a
0610 750080    1947            mov     __divslong_PARM_2,#0x80
0613 E4        1948            clr     a
0614 F501      1949            mov     (__divslong_PARM_2 + 1),a
0616 F502      1950            mov     (__divslong_PARM_2 + 2),a
0618 F503      1951            mov     (__divslong_PARM_2 + 3),a
061A 857882    1952            mov     dpl,_BMM150_compensate_y_sloc0_1_0
061D 857983    1953            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0620 857AF0    1954            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
0623 E57B      1955            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
0625 C006      1956            push    ar6
0627 C007      1957            push    ar7
0629 C000      1958            push    ar0
062B C001      1959            push    ar1
062D 120000    1960            lcall   __divslong
0630 858200    1961            mov     __mullong_PARM_2,dpl
0633 858301    1962            mov     (__mullong_PARM_2 + 1),dph
0636 85F002    1963            mov     (__mullong_PARM_2 + 2),b
0639 F503      1964            mov     (__mullong_PARM_2 + 3),a
063B D001      1965            pop     ar1
063D D000      1966            pop     ar0
063F D007      1967            pop     ar7
0641 D006      1968            pop     ar6
0643           1969   ;        main.c:453: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
0643 8E82      1970            mov     dpl,r6
0645 8F83      1971            mov     dph,r7
0647 88F0      1972            mov     b,r0
0649 E9        1973            mov     a,r1
064A 120000    1974            lcall   __mullong
064D 858278    1975            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0650 858379    1976            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
0653 85F07A    1977            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
0656 F57B      1978            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0658 D005      1979            pop     ar5
065A D004      1980            pop     ar4
065C 905248    1981            mov     dptr,#_dig_xy1
065F E0        1982            movx    a,@dptr
0660 FE        1983            mov     r6,a
0661 E4        1984            clr     a
0662 5401      1985            anl     a,#0x01
0664 A2E0      1986            mov     c,acc.0
0666 CE        1987            xch     a,r6
0667 13        1988            rrc     a
0668 CE        1989            xch     a,r6
0669 13        1990            rrc     a
066A CE        1991            xch     a,r6
066B 8E00      1992            mov     __mullong_PARM_2,r6
066D F501      1993            mov     (__mullong_PARM_2 + 1),a
066F 33        1994            rlc     a
0670 95E0      1995            subb    a,acc
0672 F502      1996            mov     (__mullong_PARM_2 + 2),a
0674 F503      1997            mov     (__mullong_PARM_2 + 3),a
0676           1998   ;        main.c:454: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
0676 ED        1999            mov     a,r5
0677 33        2000            rlc     a
0678 95E0      2001            subb    a,acc
067A FE        2002            mov     r6,a
067B 8C82      2003            mov     dpl,r4
067D 8D83      2004            mov     dph,r5
067F 8EF0      2005            mov     b,r6
0681 120000    2006            lcall   __mullong
0684 AC82      2007            mov     r4,dpl
0686 AD83      2008            mov     r5,dph
0688 AEF0      2009            mov     r6,b
068A FF        2010            mov     r7,a
068B EC        2011            mov     a,r4
068C 2578      2012            add     a,_BMM150_compensate_y_sloc0_1_0
068E FC        2013            mov     r4,a
068F ED        2014            mov     a,r5
0690 3579      2015            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
0692 FD        2016            mov     r5,a
0693 EE        2017            mov     a,r6
0694 357A      2018            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
0696 FE        2019            mov     r6,a
0697 EF        2020            mov     a,r7
0698 357B      2021            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
069A FF        2022            mov     r7,a
069B 750000    2023            mov     __divslong_PARM_2,#0x00
069E 750102    2024            mov     (__divslong_PARM_2 + 1),#0x02
06A1 750200    2025            mov     (__divslong_PARM_2 + 2),#0x00
06A4 750300    2026            mov     (__divslong_PARM_2 + 3),#0x00
06A7           2027   ;        main.c:455: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
06A7 8C82      2028            mov     dpl,r4
06A9 8D83      2029            mov     dph,r5
06AB 8EF0      2030            mov     b,r6
06AD EF        2031            mov     a,r7
06AE 120000    2032            lcall   __divslong
06B1 AC82      2033            mov     r4,dpl
06B3 AD83      2034            mov     r5,dph
06B5 AEF0      2035            mov     r6,b
06B7 FF        2036            mov     r7,a
06B8 905388    2037            mov     dptr,#_dig_y2
06BB E0        2038            movx    a,@dptr
06BC F8        2039            mov     r0,a
06BD 33        2040            rlc     a
06BE 95E0      2041            subb    a,acc
06C0 F9        2042            mov     r1,a
06C1 74A0      2043            mov     a,#0xA0
06C3 28        2044            add     a,r0
06C4 F8        2045            mov     r0,a
06C5 E4        2046            clr     a
06C6 39        2047            addc    a,r1
06C7 8800      2048            mov     __mullong_PARM_2,r0
06C9 F501      2049            mov     (__mullong_PARM_2 + 1),a
06CB 33        2050            rlc     a
06CC 95E0      2051            subb    a,acc
06CE F502      2052            mov     (__mullong_PARM_2 + 2),a
06D0 F503      2053            mov     (__mullong_PARM_2 + 3),a
06D2           2054   ;        main.c:456: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
06D2 7410      2055            mov     a,#0x10
06D4 2E        2056            add     a,r6
06D5 FE        2057            mov     r6,a
06D6 E4        2058            clr     a
06D7 3F        2059            addc    a,r7
06D8 8C82      2060            mov     dpl,r4
06DA 8D83      2061            mov     dph,r5
06DC 8EF0      2062            mov     b,r6
06DE 120000    2063            lcall   __mullong
06E1           2064   ;        main.c:457: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
06E1 750000    2065            mov     __divslong_PARM_2,#0x00
06E4 750110    2066            mov     (__divslong_PARM_2 + 1),#0x10
06E7 750200    2067            mov     (__divslong_PARM_2 + 2),#0x00
06EA 750300    2068            mov     (__divslong_PARM_2 + 3),#0x00
06ED 120000    2069            lcall   __divslong
06F0 858200    2070            mov     __mullong_PARM_2,dpl
06F3 858301    2071            mov     (__mullong_PARM_2 + 1),dph
06F6 85F002    2072            mov     (__mullong_PARM_2 + 2),b
06F9 F503      2073            mov     (__mullong_PARM_2 + 3),a
06FB D003      2074            pop     ar3
06FD D002      2075            pop     ar2
06FF EB        2076            mov     a,r3
0700 33        2077            rlc     a
0701 95E0      2078            subb    a,acc
0703 FC        2079            mov     r4,a
0704           2080   ;        main.c:458: retval = (int16_t)(process_comp_y9 / 8192);
0704 8A82      2081            mov     dpl,r2
0706 8B83      2082            mov     dph,r3
0708 8CF0      2083            mov     b,r4
070A 120000    2084            lcall   __mullong
070D 750000    2085            mov     __divslong_PARM_2,#0x00
0710 750120    2086            mov     (__divslong_PARM_2 + 1),#0x20
0713 750200    2087            mov     (__divslong_PARM_2 + 2),#0x00
0716 750300    2088            mov     (__divslong_PARM_2 + 3),#0x00
0719 120000    2089            lcall   __divslong
071C AA82      2090            mov     r2,dpl
071E AB83      2091            mov     r3,dph
0720           2092   ;        main.c:459: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
0720 9053C8    2093            mov     dptr,#_dig_y1
0723 E0        2094            movx    a,@dptr
0724 FC        2095            mov     r4,a
0725 33        2096            rlc     a
0726 95E0      2097            subb    a,acc
0728 C4        2098            swap    a
0729 03        2099            rr      a
072A 54F8      2100            anl     a,#0xf8
072C CC        2101            xch     a,r4
072D C4        2102            swap    a
072E 03        2103            rr      a
072F CC        2104            xch     a,r4
0730 6C        2105            xrl     a,r4
0731 CC        2106            xch     a,r4
0732 54F8      2107            anl     a,#0xf8
0734 CC        2108            xch     a,r4
0735 6C        2109            xrl     a,r4
0736 FD        2110            mov     r5,a
0737 EC        2111            mov     a,r4
0738 2A        2112            add     a,r2
0739 F582      2113            mov     dpl,a
073B ED        2114            mov     a,r5
073C 3B        2115            addc    a,r3
073D F583      2116            mov     dph,a
073F 750010    2117            mov     __divsint_PARM_2,#0x10
0742 E4        2118            clr     a
0743 F501      2119            mov     (__divsint_PARM_2 + 1),a
0745 120000    2120            lcall   __divsint
0748 E582      2121            mov     a,dpl
074A 8583F0    2122            mov     b,dph
074D 90CCD8    2123            mov     dptr,#_BMM150_compensate_y_retval_1_115
0750 F0        2124            movx    @dptr,a
0751 A3        2125            inc     dptr
0752 E5F0      2126            mov     a,b
0754 F0        2127            movx    @dptr,a
0755 8000      2128            sjmp    L011012?
0757           2129   L011008?:
0757           2130   ;        main.c:463: retval = BMM150_OVERFLOW_OUTPUT;
0757 90CCD8    2131            mov     dptr,#_BMM150_compensate_y_retval_1_115
075A E4        2132            clr     a
075B F0        2133            movx    @dptr,a
075C A3        2134            inc     dptr
075D 7480      2135            mov     a,#0x80
075F F0        2136            movx    @dptr,a
0760 8000      2137            sjmp    L011012?
0762           2138   L011011?:
0762           2139   ;        main.c:469: retval = BMM150_OVERFLOW_OUTPUT;
0762 90CCD8    2140            mov     dptr,#_BMM150_compensate_y_retval_1_115
0765 E4        2141            clr     a
0766 F0        2142            movx    @dptr,a
0767 A3        2143            inc     dptr
0768 7480      2144            mov     a,#0x80
076A F0        2145            movx    @dptr,a
076B           2146   L011012?:
076B           2147   ;        main.c:472: return retval;
076B 90CCD8    2148            mov     dptr,#_BMM150_compensate_y_retval_1_115
076E E0        2149            movx    a,@dptr
076F FA        2150            mov     r2,a
0770 A3        2151            inc     dptr
0771 E0        2152            movx    a,@dptr
0772 8A82      2153            mov     dpl,r2
0774 F583      2154            mov     dph,a
0776 22        2155            ret
0777           2156   ;------------------------------------------------------------
0777           2157   ;Allocation info for local variables in function 'BMM150_Read_Data'
0777           2158   ;------------------------------------------------------------
0777           2159   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
0777           2160   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_123'
0777           2161   ;raw_x_lsb                 Allocated with name '_BMM150_Read_Data_raw_x_lsb_1_124'
0777           2162   ;raw_x_msb                 Allocated with name '_BMM150_Read_Data_raw_x_msb_1_124'
0777           2163   ;raw_y_lsb                 Allocated with name '_BMM150_Read_Data_raw_y_lsb_1_124'
0777           2164   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_124'
0777           2165   ;raw_rhall_lsb             Allocated with name '_BMM150_Read_Data_raw_rhall_lsb_1_124'
0777           2166   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_124'
0777           2167   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_124'
0777           2168   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_124'
0777           2169   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_124'
0777           2170   ;msb_data                  Allocated with name '_BMM150_Read_Data_msb_data_1_124'
0777           2171   ;------------------------------------------------------------
0777           2172   ;        main.c:475: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y)
0777           2173   ;        -----------------------------------------
0777           2174   ;         function BMM150_Read_Data
0777           2175   ;        -----------------------------------------
0777           2176   _BMM150_Read_Data:
0777 8582C8    2177            mov     _BMM150_Read_Data_mag_x_1_123,dpl
077A 8583C9    2178            mov     (_BMM150_Read_Data_mag_x_1_123 + 1),dph
077D 85F0CA    2179            mov     (_BMM150_Read_Data_mag_x_1_123 + 2),b
0780           2180   ;        main.c:482: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
0780 758242    2181            mov     dpl,#0x42
0783 120000    2182            lcall   _SPI_read
0786 AD82      2183            mov     r5,dpl
0788           2184   ;        main.c:483: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
0788 758243    2185            mov     dpl,#0x43
078B C005      2186            push    ar5
078D 120000    2187            lcall   _SPI_read
0790 AE82      2188            mov     r6,dpl
0792           2189   ;        main.c:484: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
0792 758244    2190            mov     dpl,#0x44
0795 C006      2191            push    ar6
0797 120000    2192            lcall   _SPI_read
079A AF82      2193            mov     r7,dpl
079C           2194   ;        main.c:485: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
079C 758245    2195            mov     dpl,#0x45
079F C007      2196            push    ar7
07A1 120000    2197            lcall   _SPI_read
07A4 A882      2198            mov     r0,dpl
07A6           2199   ;        main.c:488: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
07A6 758248    2200            mov     dpl,#0x48
07A9 C000      2201            push    ar0
07AB 120000    2202            lcall   _SPI_read
07AE A982      2203            mov     r1,dpl
07B0           2204   ;        main.c:489: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
07B0 758249    2205            mov     dpl,#0x49
07B3 C001      2206            push    ar1
07B5 120000    2207            lcall   _SPI_read
07B8 AA82      2208            mov     r2,dpl
07BA D001      2209            pop     ar1
07BC D000      2210            pop     ar0
07BE D007      2211            pop     ar7
07C0 D006      2212            pop     ar6
07C2 D005      2213            pop     ar5
07C4           2214   ;        main.c:493: raw_x_lsb = ((raw_x_lsb & 0b_1111_1000)) >> 3;
07C4 5305F8    2215            anl     ar5,#0xF8
07C7 ED        2216            mov     a,r5
07C8 C4        2217            swap    a
07C9 23        2218            rl      a
07CA 541F      2219            anl     a,#0x1f
07CC FD        2220            mov     r5,a
07CD           2221   ;        main.c:494: msb_data = ((int16_t)((int8_t)raw_x_msb)) << 5; 
07CD EE        2222            mov     a,r6
07CE 33        2223            rlc     a
07CF 95E0      2224            subb    a,acc
07D1 C4        2225            swap    a
07D2 23        2226            rl      a
07D3 54E0      2227            anl     a,#0xe0
07D5 CE        2228            xch     a,r6
07D6 C4        2229            swap    a
07D7 23        2230            rl      a
07D8 CE        2231            xch     a,r6
07D9 6E        2232            xrl     a,r6
07DA CE        2233            xch     a,r6
07DB 54E0      2234            anl     a,#0xe0
07DD CE        2235            xch     a,r6
07DE 6E        2236            xrl     a,r6
07DF FB        2237            mov     r3,a
07E0           2238   ;        main.c:495: x_val = (int16_t)(msb_data | raw_x_lsb);
07E0 7C00      2239            mov     r4,#0x00
07E2 90CD88    2240            mov     dptr,#_BMM150_Read_Data_x_val_1_124
07E5 ED        2241            mov     a,r5
07E6 4E        2242            orl     a,r6
07E7 F0        2243            movx    @dptr,a
07E8 EC        2244            mov     a,r4
07E9 4B        2245            orl     a,r3
07EA A3        2246            inc     dptr
07EB F0        2247            movx    @dptr,a
07EC           2248   ;        main.c:498: raw_y_lsb = ((raw_y_lsb & 0b_1111_1000)) >> 3;
07EC 5307F8    2249            anl     ar7,#0xF8
07EF EF        2250            mov     a,r7
07F0 C4        2251            swap    a
07F1 23        2252            rl      a
07F2 541F      2253            anl     a,#0x1f
07F4 FF        2254            mov     r7,a
07F5           2255   ;        main.c:499: msb_data = ((int16_t)((int8_t)raw_y_msb)) << 5; 
07F5 E8        2256            mov     a,r0
07F6 33        2257            rlc     a
07F7 95E0      2258            subb    a,acc
07F9 C4        2259            swap    a
07FA 23        2260            rl      a
07FB 54E0      2261            anl     a,#0xe0
07FD C8        2262            xch     a,r0
07FE C4        2263            swap    a
07FF 23        2264            rl      a
0800 C8        2265            xch     a,r0
0801 68        2266            xrl     a,r0
0802 C8        2267            xch     a,r0
0803 54E0      2268            anl     a,#0xe0
0805 C8        2269            xch     a,r0
0806 68        2270            xrl     a,r0
0807 FB        2271            mov     r3,a
0808           2272   ;        main.c:500: y_val = (int16_t)(msb_data | raw_y_lsb);
0808 7C00      2273            mov     r4,#0x00
080A 90CDD8    2274            mov     dptr,#_BMM150_Read_Data_y_val_1_124
080D EF        2275            mov     a,r7
080E 48        2276            orl     a,r0
080F F0        2277            movx    @dptr,a
0810 EC        2278            mov     a,r4
0811 4B        2279            orl     a,r3
0812 A3        2280            inc     dptr
0813 F0        2281            movx    @dptr,a
0814           2282   ;        main.c:508: raw_rhall_lsb = ((raw_rhall_lsb & 0xFC) >> 2);
0814 5301FC    2283            anl     ar1,#0xFC
0817 E9        2284            mov     a,r1
0818 03        2285            rr      a
0819 03        2286            rr      a
081A 543F      2287            anl     a,#0x3f
081C F9        2288            mov     r1,a
081D           2289   ;        main.c:509: rhall_val = (uint16_t)(((uint16_t)raw_rhall_msb << 6) | raw_rhall_lsb);
081D E4        2290            clr     a
081E 5403      2291            anl     a,#0x03
0820 A2E0      2292            mov     c,acc.0
0822 CA        2293            xch     a,r2
0823 13        2294            rrc     a
0824 CA        2295            xch     a,r2
0825 13        2296            rrc     a
0826 A2E0      2297            mov     c,acc.0
0828 CA        2298            xch     a,r2
0829 13        2299            rrc     a
082A CA        2300            xch     a,r2
082B 13        2301            rrc     a
082C CA        2302            xch     a,r2
082D FB        2303            mov     r3,a
082E 7C00      2304            mov     r4,#0x00
0830 90CE38    2305            mov     dptr,#_BMM150_Read_Data_rhall_val_1_124
0833 E9        2306            mov     a,r1
0834 4A        2307            orl     a,r2
0835 F0        2308            movx    @dptr,a
0836 EC        2309            mov     a,r4
0837 4B        2310            orl     a,r3
0838 A3        2311            inc     dptr
0839 F0        2312            movx    @dptr,a
083A           2313   ;        main.c:512: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
083A 75C838    2314            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_124
083D 75C9CE    2315            mov     (_BMM150_compensate_x_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_124 >> 8)
0840 75CA00    2316            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x00
0843 90CD88    2317            mov     dptr,#_BMM150_Read_Data_x_val_1_124
0846 75F000    2318            mov     b,#0x00
0849 120000    2319            lcall   _BMM150_compensate_x
084C AA82      2320            mov     r2,dpl
084E AB83      2321            mov     r3,dph
0850 85C882    2322            mov     dpl,_BMM150_Read_Data_mag_x_1_123
0853 85C983    2323            mov     dph,(_BMM150_Read_Data_mag_x_1_123 + 1)
0856 85CAF0    2324            mov     b,(_BMM150_Read_Data_mag_x_1_123 + 2)
0859 EA        2325            mov     a,r2
085A 120000    2326            lcall   __gptrput
085D A3        2327            inc     dptr
085E EB        2328            mov     a,r3
085F 120000    2329            lcall   __gptrput
0862           2330   ;        main.c:513: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
0862 AA28      2331            mov     r2,_BMM150_Read_Data_PARM_2
0864 AB29      2332            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
0866 AC2A      2333            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
0868 757838    2334            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_124
086B 7579CE    2335            mov     (_BMM150_compensate_y_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_124 >> 8)
086E 757A00    2336            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x00
0871 90CDD8    2337            mov     dptr,#_BMM150_Read_Data_y_val_1_124
0874 75F000    2338            mov     b,#0x00
0877 C002      2339            push    ar2
0879 C003      2340            push    ar3
087B C004      2341            push    ar4
087D 120000    2342            lcall   _BMM150_compensate_y
0880 AD82      2343            mov     r5,dpl
0882 AE83      2344            mov     r6,dph
0884 D004      2345            pop     ar4
0886 D003      2346            pop     ar3
0888 D002      2347            pop     ar2
088A 8A82      2348            mov     dpl,r2
088C 8B83      2349            mov     dph,r3
088E 8CF0      2350            mov     b,r4
0890 ED        2351            mov     a,r5
0891 120000    2352            lcall   __gptrput
0894 A3        2353            inc     dptr
0895 EE        2354            mov     a,r6
0896 020000    2355            ljmp    __gptrput
0899           2356   ;------------------------------------------------------------
0899           2357   ;Allocation info for local variables in function 'UART1_Init'
0899           2358   ;------------------------------------------------------------
0899           2359   ;baudrate                  Allocated to registers r2 r3 r4 r5 
0899           2360   ;------------------------------------------------------------
0899           2361   ;        main.c:519: void UART1_Init (unsigned long baudrate)
0899           2362   ;        -----------------------------------------
0899           2363   ;         function UART1_Init
0899           2364   ;        -----------------------------------------
0899           2365   _UART1_Init:
0899 AA82      2366            mov     r2,dpl
089B AB83      2367            mov     r3,dph
089D ACF0      2368            mov     r4,b
089F FD        2369            mov     r5,a
08A0           2370   ;        main.c:521: SFRPAGE = 0x20;
08A0 75A720    2371            mov     _SFRPAGE,#0x20
08A3           2372   ;        main.c:522: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
08A3 75930C    2373            mov     _SMOD1,#0x0C
08A6           2374   ;        main.c:523: SCON1 = 0x10;
08A6 75C810    2375            mov     _SCON1,#0x10
08A9           2376   ;        main.c:524: SBCON1 =0x00;   // disable baud rate generator
08A9 759400    2377            mov     _SBCON1,#0x00
08AC           2378   ;        main.c:525: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
08AC 8A00      2379            mov     __divulong_PARM_2,r2
08AE 8B01      2380            mov     (__divulong_PARM_2 + 1),r3
08B0 8C02      2381            mov     (__divulong_PARM_2 + 2),r4
08B2 8D03      2382            mov     (__divulong_PARM_2 + 3),r5
08B4 90A200    2383            mov     dptr,#0xA200
08B7 75F04A    2384            mov     b,#0x4A
08BA 7404      2385            mov     a,#0x04
08BC 120000    2386            lcall   __divulong
08BF AA82      2387            mov     r2,dpl
08C1 AB83      2388            mov     r3,dph
08C3 ACF0      2389            mov     r4,b
08C5 FD        2390            mov     r5,a
08C6 750018    2391            mov     __divulong_PARM_2,#0x18
08C9 E4        2392            clr     a
08CA F501      2393            mov     (__divulong_PARM_2 + 1),a
08CC F502      2394            mov     (__divulong_PARM_2 + 2),a
08CE F503      2395            mov     (__divulong_PARM_2 + 3),a
08D0 8A82      2396            mov     dpl,r2
08D2 8B83      2397            mov     dph,r3
08D4 8CF0      2398            mov     b,r4
08D6 ED        2399            mov     a,r5
08D7 120000    2400            lcall   __divulong
08DA AA82      2401            mov     r2,dpl
08DC AB83      2402            mov     r3,dph
08DE ACF0      2403            mov     r4,b
08E0 FD        2404            mov     r5,a
08E1 E4        2405            clr     a
08E2 C3        2406            clr     c
08E3 9A        2407            subb    a,r2
08E4 FA        2408            mov     r2,a
08E5 E4        2409            clr     a
08E6 9B        2410            subb    a,r3
08E7 FB        2411            mov     r3,a
08E8 7401      2412            mov     a,#0x01
08EA 9C        2413            subb    a,r4
08EB E4        2414            clr     a
08EC 9D        2415            subb    a,r5
08ED 8A95      2416            mov     _SBRL1,r2
08EF 8B96      2417            mov     (_SBRL1 >> 8),r3
08F1           2418   ;        main.c:526: TI1 = 1; // indicate ready for TX
08F1 D2C9      2419            setb    _TI1
08F3           2420   ;        main.c:527: SBCON1 |= 0x40;   // enable baud rate generator
08F3 439440    2421            orl     _SBCON1,#0x40
08F6           2422   ;        main.c:528: SFRPAGE = 0x00;
08F6 75A700    2423            mov     _SFRPAGE,#0x00
08F9 22        2424            ret
08FA           2425   ;------------------------------------------------------------
08FA           2426   ;Allocation info for local variables in function 'putchar1'
08FA           2427   ;------------------------------------------------------------
08FA           2428   ;c                         Allocated to registers r2 
08FA           2429   ;------------------------------------------------------------
08FA           2430   ;        main.c:531: void putchar1 (char c) 
08FA           2431   ;        -----------------------------------------
08FA           2432   ;         function putchar1
08FA           2433   ;        -----------------------------------------
08FA           2434   _putchar1:
08FA AA82      2435            mov     r2,dpl
08FC           2436   ;        main.c:533: SFRPAGE = 0x20;
08FC 75A720    2437            mov     _SFRPAGE,#0x20
08FF           2438   ;        main.c:534: while (!TI1);
08FF           2439   L014001?:
08FF           2440   ;        main.c:535: TI1=0;
08FF 10C9D8    2441            jbc     _TI1,L014008?
0902 8000      2442            sjmp    L014001?
0904           2443   L014008?:
0904           2444   ;        main.c:536: SBUF1 = c;
0904 8A92      2445            mov     _SBUF1,r2
0906           2446   ;        main.c:537: SFRPAGE = 0x00;
0906 75A700    2447            mov     _SFRPAGE,#0x00
0909 22        2448            ret
090A           2449   ;------------------------------------------------------------
090A           2450   ;Allocation info for local variables in function 'sendstr1'
090A           2451   ;------------------------------------------------------------
090A           2452   ;s                         Allocated to registers r2 r3 r4 
090A           2453   ;------------------------------------------------------------
090A           2454   ;        main.c:540: void sendstr1 (char * s)
090A           2455   ;        -----------------------------------------
090A           2456   ;         function sendstr1
090A           2457   ;        -----------------------------------------
090A           2458   _sendstr1:
090A AA82      2459            mov     r2,dpl
090C AB83      2460            mov     r3,dph
090E ACF0      2461            mov     r4,b
0910           2462   ;        main.c:542: while(*s)
0910           2463   L015001?:
0910 8A82      2464            mov     dpl,r2
0912 8B83      2465            mov     dph,r3
0914 8CF0      2466            mov     b,r4
0916 120000    2467            lcall   __gptrget
0919 FD        2468            mov     r5,a
091A 6000      2469            jz      L015004?
091C           2470   ;        main.c:544: putchar1(*s);
091C 8D82      2471            mov     dpl,r5
091E C002      2472            push    ar2
0920 C003      2473            push    ar3
0922 C004      2474            push    ar4
0924 120000    2475            lcall   _putchar1
0927 D004      2476            pop     ar4
0929 D003      2477            pop     ar3
092B D002      2478            pop     ar2
092D           2479   ;        main.c:545: s++;        
092D 0A        2480            inc     r2
092E BA0018    2481            cjne    r2,#0x00,L015001?
0931 0B        2482            inc     r3
0932 8000      2483            sjmp    L015001?
0934           2484   L015004?:
0934 22        2485            ret
0935           2486   ;------------------------------------------------------------
0935           2487   ;Allocation info for local variables in function 'getchar1'
0935           2488   ;------------------------------------------------------------
0935           2489   ;c                         Allocated with name '_getchar1_c_1_133'
0935           2490   ;------------------------------------------------------------
0935           2491   ;        main.c:549: char getchar1 (void)
0935           2492   ;        -----------------------------------------
0935           2493   ;         function getchar1
0935           2494   ;        -----------------------------------------
0935           2495   _getchar1:
0935           2496   ;        main.c:552: SFRPAGE = 0x20;
0935 75A720    2497            mov     _SFRPAGE,#0x20
0938           2498   ;        main.c:553: while (!RI1);
0938           2499   L016001?:
0938           2500   ;        main.c:554: RI1=0;
0938 10C8D8    2501            jbc     _RI1,L016008?
093B 8000      2502            sjmp    L016001?
093D           2503   L016008?:
093D           2504   ;        main.c:556: SCON1&=0b_0011_1111;
093D 53C83F    2505            anl     _SCON1,#0x3F
0940           2506   ;        main.c:557: c = SBUF1;
0940 859282    2507            mov     dpl,_SBUF1
0943           2508   ;        main.c:558: SFRPAGE = 0x00;
0943 75A700    2509            mov     _SFRPAGE,#0x00
0946           2510   ;        main.c:559: return (c);
0946 22        2511            ret
0947           2512   ;------------------------------------------------------------
0947           2513   ;Allocation info for local variables in function 'getchar1_with_timeout'
0947           2514   ;------------------------------------------------------------
0947           2515   ;c                         Allocated with name '_getchar1_with_timeout_c_1_135'
0947           2516   ;timeout                   Allocated with name '_getchar1_with_timeout_timeout_1_135'
0947           2517   ;------------------------------------------------------------
0947           2518   ;        main.c:562: char getchar1_with_timeout (void)
0947           2519   ;        -----------------------------------------
0947           2520   ;         function getchar1_with_timeout
0947           2521   ;        -----------------------------------------
0947           2522   _getchar1_with_timeout:
0947           2523   ;        main.c:566: SFRPAGE = 0x20;
0947 75A720    2524            mov     _SFRPAGE,#0x20
094A           2525   ;        main.c:568: while (!RI1)
094A 7A00      2526            mov     r2,#0x00
094C 7B00      2527            mov     r3,#0x00
094E           2528   L017003?:
094E 20C858    2529            jb      _RI1,L017005?
0951           2530   ;        main.c:570: SFRPAGE = 0x00;
0951 75A700    2531            mov     _SFRPAGE,#0x00
0954           2532   ;        main.c:571: Timer3us(20);
0954 758214    2533            mov     dpl,#0x14
0957 C002      2534            push    ar2
0959 C003      2535            push    ar3
095B 120000    2536            lcall   _Timer3us
095E D003      2537            pop     ar3
0960 D002      2538            pop     ar2
0962           2539   ;        main.c:572: SFRPAGE = 0x20;
0962 75A720    2540            mov     _SFRPAGE,#0x20
0965           2541   ;        main.c:573: timeout++;
0965 0A        2542            inc     r2
0966 BA0098    2543            cjne    r2,#0x00,L017012?
0969 0B        2544            inc     r3
096A           2545   L017012?:
096A           2546   ;        main.c:574: if(timeout==25000)
096A BAA818    2547            cjne    r2,#0xA8,L017003?
096D BB6118    2548            cjne    r3,#0x61,L017003?
0970           2549   ;        main.c:576: SFRPAGE = 0x00;
0970 75A700    2550            mov     _SFRPAGE,#0x00
0973           2551   ;        main.c:577: return ('\n'); // Timeout after half second
0973 75820A    2552            mov     dpl,#0x0A
0976 22        2553            ret
0977           2554   L017005?:
0977           2555   ;        main.c:580: RI1=0;
0977 C2C8      2556            clr     _RI1
0979           2557   ;        main.c:582: SCON1&=0b_0011_1111;
0979 53C83F    2558            anl     _SCON1,#0x3F
097C           2559   ;        main.c:583: c = SBUF1;
097C 859282    2560            mov     dpl,_SBUF1
097F           2561   ;        main.c:584: SFRPAGE = 0x00;
097F 75A700    2562            mov     _SFRPAGE,#0x00
0982           2563   ;        main.c:585: return (c);
0982 22        2564            ret
0983           2565   ;------------------------------------------------------------
0983           2566   ;Allocation info for local variables in function 'getstr1'
0983           2567   ;------------------------------------------------------------
0983           2568   ;n                         Allocated with name '_getstr1_PARM_2'
0983           2569   ;s                         Allocated to registers r2 r3 r4 
0983           2570   ;c                         Allocated with name '_getstr1_c_1_139'
0983           2571   ;cnt                       Allocated with name '_getstr1_cnt_1_139'
0983           2572   ;------------------------------------------------------------
0983           2573   ;        main.c:588: void getstr1 (char * s, unsigned char n)
0983           2574   ;        -----------------------------------------
0983           2575   ;         function getstr1
0983           2576   ;        -----------------------------------------
0983           2577   _getstr1:
0983 AA82      2578            mov     r2,dpl
0985 AB83      2579            mov     r3,dph
0987 ACF0      2580            mov     r4,b
0989           2581   ;        main.c:594: while(1)
0989 7D00      2582            mov     r5,#0x00
098B 8A06      2583            mov     ar6,r2
098D 8B07      2584            mov     ar7,r3
098F 8C00      2585            mov     ar0,r4
0991           2586   L018007?:
0991           2587   ;        main.c:596: c=getchar1_with_timeout();
0991 C002      2588            push    ar2
0993 C003      2589            push    ar3
0995 C004      2590            push    ar4
0997 C005      2591            push    ar5
0999 C006      2592            push    ar6
099B C007      2593            push    ar7
099D C000      2594            push    ar0
099F 120000    2595            lcall   _getchar1_with_timeout
09A2 A982      2596            mov     r1,dpl
09A4 D000      2597            pop     ar0
09A6 D007      2598            pop     ar7
09A8 D006      2599            pop     ar6
09AA D005      2600            pop     ar5
09AC D004      2601            pop     ar4
09AE D003      2602            pop     ar3
09B0 D002      2603            pop     ar2
09B2           2604   ;        main.c:597: if(c=='\n')
09B2 B90A18    2605            cjne    r1,#0x0A,L018002?
09B5           2606   ;        main.c:599: *s=0;
09B5 8A82      2607            mov     dpl,r2
09B7 8B83      2608            mov     dph,r3
09B9 8CF0      2609            mov     b,r4
09BB E4        2610            clr     a
09BC           2611   ;        main.c:600: return;
09BC 020000    2612            ljmp    __gptrput
09BF           2613   L018002?:
09BF           2614   ;        main.c:603: if (cnt<n)
09BF C3        2615            clr     c
09C0 ED        2616            mov     a,r5
09C1 95D8      2617            subb    a,_getstr1_PARM_2
09C3 5000      2618            jnc     L018004?
09C5           2619   ;        main.c:605: cnt++;
09C5 0D        2620            inc     r5
09C6           2621   ;        main.c:606: *s=c;
09C6 8E82      2622            mov     dpl,r6
09C8 8F83      2623            mov     dph,r7
09CA 88F0      2624            mov     b,r0
09CC E9        2625            mov     a,r1
09CD 120000    2626            lcall   __gptrput
09D0 A3        2627            inc     dptr
09D1 AE82      2628            mov     r6,dpl
09D3 AF83      2629            mov     r7,dph
09D5           2630   ;        main.c:607: s++;
09D5 8E02      2631            mov     ar2,r6
09D7 8F03      2632            mov     ar3,r7
09D9 8804      2633            mov     ar4,r0
09DB 8000      2634            sjmp    L018007?
09DD           2635   L018004?:
09DD           2636   ;        main.c:611: *s=0;
09DD 8A82      2637            mov     dpl,r2
09DF 8B83      2638            mov     dph,r3
09E1 8CF0      2639            mov     b,r4
09E3 E4        2640            clr     a
09E4           2641   ;        main.c:612: return;
09E4 020000    2642            ljmp    __gptrput
09E7           2643   ;------------------------------------------------------------
09E7           2644   ;Allocation info for local variables in function 'RXU1'
09E7           2645   ;------------------------------------------------------------
09E7           2646   ;------------------------------------------------------------
09E7           2647   ;        main.c:618: bit RXU1 (void)
09E7           2648   ;        -----------------------------------------
09E7           2649   ;         function RXU1
09E7           2650   ;        -----------------------------------------
09E7           2651   _RXU1:
09E7           2652   ;        main.c:621: SFRPAGE = 0x20;
09E7 75A720    2653            mov     _SFRPAGE,#0x20
09EA           2654   ;        main.c:622: mybit=RI1;
09EA A2C8      2655            mov     c,_RI1
09EC           2656   ;        main.c:623: SFRPAGE = 0x00;
09EC 75A700    2657            mov     _SFRPAGE,#0x00
09EF           2658   ;        main.c:624: return mybit;
09EF 22        2659            ret
09F0           2660   ;------------------------------------------------------------
09F0           2661   ;Allocation info for local variables in function 'waitms_or_RI1'
09F0           2662   ;------------------------------------------------------------
09F0           2663   ;ms                        Allocated to registers r2 r3 
09F0           2664   ;j                         Allocated with name '_waitms_or_RI1_j_1_147'
09F0           2665   ;k                         Allocated with name '_waitms_or_RI1_k_1_147'
09F0           2666   ;------------------------------------------------------------
09F0           2667   ;        main.c:627: void waitms_or_RI1 (unsigned int ms)
09F0           2668   ;        -----------------------------------------
09F0           2669   ;         function waitms_or_RI1
09F0           2670   ;        -----------------------------------------
09F0           2671   _waitms_or_RI1:
09F0 AA82      2672            mov     r2,dpl
09F2 AB83      2673            mov     r3,dph
09F4           2674   ;        main.c:631: for(j=0; j<ms; j++)
09F4 7C00      2675            mov     r4,#0x00
09F6 7D00      2676            mov     r5,#0x00
09F8           2677   L020007?:
09F8 C3        2678            clr     c
09F9 EC        2679            mov     a,r4
09FA 9A        2680            subb    a,r2
09FB ED        2681            mov     a,r5
09FC 9B        2682            subb    a,r3
09FD 5000      2683            jnc     L020011?
09FF           2684   ;        main.c:633: for (k=0; k<4; k++)
09FF 7E00      2685            mov     r6,#0x00
0A01           2686   L020003?:
0A01 BE0458    2687            cjne    r6,#0x04,L020019?
0A04           2688   L020019?:
0A04 5000      2689            jnc     L020009?
0A06           2690   ;        main.c:635: if(RXU1()) return;
0A06 C002      2691            push    ar2
0A08 C003      2692            push    ar3
0A0A C004      2693            push    ar4
0A0C C005      2694            push    ar5
0A0E C006      2695            push    ar6
0A10 120000    2696            lcall   _RXU1
0A13 E4        2697            clr     a
0A14 33        2698            rlc     a
0A15 D006      2699            pop     ar6
0A17 D005      2700            pop     ar5
0A19 D004      2701            pop     ar4
0A1B D003      2702            pop     ar3
0A1D D002      2703            pop     ar2
0A1F 6000      2704            jz      L020002?
0A21 22        2705            ret
0A22           2706   L020002?:
0A22           2707   ;        main.c:636: Timer3us(250);
0A22 7582FA    2708            mov     dpl,#0xFA
0A25 C002      2709            push    ar2
0A27 C003      2710            push    ar3
0A29 C004      2711            push    ar4
0A2B C005      2712            push    ar5
0A2D C006      2713            push    ar6
0A2F 120000    2714            lcall   _Timer3us
0A32 D006      2715            pop     ar6
0A34 D005      2716            pop     ar5
0A36 D004      2717            pop     ar4
0A38 D003      2718            pop     ar3
0A3A D002      2719            pop     ar2
0A3C           2720   ;        main.c:633: for (k=0; k<4; k++)
0A3C 0E        2721            inc     r6
0A3D 8000      2722            sjmp    L020003?
0A3F           2723   L020009?:
0A3F           2724   ;        main.c:631: for(j=0; j<ms; j++)
0A3F 0C        2725            inc     r4
0A40 BC0098    2726            cjne    r4,#0x00,L020007?
0A43 0D        2727            inc     r5
0A44 8000      2728            sjmp    L020007?
0A46           2729   L020011?:
0A46 22        2730            ret
0A47           2731   ;------------------------------------------------------------
0A47           2732   ;Allocation info for local variables in function 'SendATCommand'
0A47           2733   ;------------------------------------------------------------
0A47           2734   ;s                         Allocated to registers r2 r3 r4 
0A47           2735   ;------------------------------------------------------------
0A47           2736   ;        main.c:641: void SendATCommand (char * s)
0A47           2737   ;        -----------------------------------------
0A47           2738   ;         function SendATCommand
0A47           2739   ;        -----------------------------------------
0A47           2740   _SendATCommand:
0A47 AA82      2741            mov     r2,dpl
0A49 AB83      2742            mov     r3,dph
0A4B ACF0      2743            mov     r4,b
0A4D           2744   ;        main.c:643: printf("Command: %s", s);
0A4D C002      2745            push    ar2
0A4F C003      2746            push    ar3
0A51 C004      2747            push    ar4
0A53 C002      2748            push    ar2
0A55 C003      2749            push    ar3
0A57 C004      2750            push    ar4
0A59 7418      2751            mov     a,#__str_2
0A5B C0E0      2752            push    acc
0A5D 74E7      2753            mov     a,#(__str_2 >> 8)
0A5F C0E0      2754            push    acc
0A61 7480      2755            mov     a,#0x80
0A63 C0E0      2756            push    acc
0A65 120000    2757            lcall   _printf
0A68 E581      2758            mov     a,sp
0A6A 24FA      2759            add     a,#0xfa
0A6C F581      2760            mov     sp,a
0A6E           2761   ;        main.c:644: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0A6E C2A0      2762            clr     _P2_0
0A70           2763   ;        main.c:645: waitms(5);
0A70 900005    2764            mov     dptr,#0x0005
0A73 120000    2765            lcall   _waitms
0A76 D004      2766            pop     ar4
0A78 D003      2767            pop     ar3
0A7A D002      2768            pop     ar2
0A7C           2769   ;        main.c:646: sendstr1(s);
0A7C 8A82      2770            mov     dpl,r2
0A7E 8B83      2771            mov     dph,r3
0A80 8CF0      2772            mov     b,r4
0A82 120000    2773            lcall   _sendstr1
0A85           2774   ;        main.c:647: getstr1(buff, sizeof(buff)-1);
0A85 75D813    2775            mov     _getstr1_PARM_2,#0x13
0A88 905548    2776            mov     dptr,#_buff
0A8B 75F040    2777            mov     b,#0x40
0A8E 120000    2778            lcall   _getstr1
0A91           2779   ;        main.c:648: waitms(10);
0A91 90000A    2780            mov     dptr,#0x000A
0A94 120000    2781            lcall   _waitms
0A97           2782   ;        main.c:649: P2_0=1; // 'set' pin to 1 is normal operation mode.
0A97 D2A0      2783            setb    _P2_0
0A99           2784   ;        main.c:650: printf("Response: %s\r\n", buff);
0A99 7448      2785            mov     a,#_buff
0A9B C0E0      2786            push    acc
0A9D 7455      2787            mov     a,#(_buff >> 8)
0A9F C0E0      2788            push    acc
0AA1 7440      2789            mov     a,#0x40
0AA3 C0E0      2790            push    acc
0AA5 7458      2791            mov     a,#__str_3
0AA7 C0E0      2792            push    acc
0AA9 74E7      2793            mov     a,#(__str_3 >> 8)
0AAB C0E0      2794            push    acc
0AAD 7480      2795            mov     a,#0x80
0AAF C0E0      2796            push    acc
0AB1 120000    2797            lcall   _printf
0AB4 E581      2798            mov     a,sp
0AB6 24FA      2799            add     a,#0xfa
0AB8 F581      2800            mov     sp,a
0ABA 22        2801            ret
0ABB           2802   ;------------------------------------------------------------
0ABB           2803   ;Allocation info for local variables in function 'ReceptionOff'
0ABB           2804   ;------------------------------------------------------------
0ABB           2805   ;------------------------------------------------------------
0ABB           2806   ;        main.c:653: void ReceptionOff (void)
0ABB           2807   ;        -----------------------------------------
0ABB           2808   ;         function ReceptionOff
0ABB           2809   ;        -----------------------------------------
0ABB           2810   _ReceptionOff:
0ABB           2811   ;        main.c:655: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0ABB C2A0      2812            clr     _P2_0
0ABD           2813   ;        main.c:656: waitms(10);
0ABD 90000A    2814            mov     dptr,#0x000A
0AC0 120000    2815            lcall   _waitms
0AC3           2816   ;        main.c:657: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0AC3 90E798    2817            mov     dptr,#__str_4
0AC6 75F080    2818            mov     b,#0x80
0AC9 120000    2819            lcall   _sendstr1
0ACC           2820   ;        main.c:658: waitms(10);
0ACC 90000A    2821            mov     dptr,#0x000A
0ACF 120000    2822            lcall   _waitms
0AD2           2823   ;        main.c:660: SCON1&=0b_0011_1111;
0AD2 53C83F    2824            anl     _SCON1,#0x3F
0AD5           2825   ;        main.c:661: P2_0=1; // 'set' pin to 1 is normal operation mode.
0AD5 D2A0      2826            setb    _P2_0
0AD7 22        2827            ret
0AD8           2828   ;------------------------------------------------------------
0AD8           2829   ;Allocation info for local variables in function 'Set_Pin_Output'
0AD8           2830   ;------------------------------------------------------------
0AD8           2831   ;pin                       Allocated to registers r2 
0AD8           2832   ;mask                      Allocated to registers r3 
0AD8           2833   ;------------------------------------------------------------
0AD8           2834   ;        main.c:664: void Set_Pin_Output (unsigned char pin)
0AD8           2835   ;        -----------------------------------------
0AD8           2836   ;         function Set_Pin_Output
0AD8           2837   ;        -----------------------------------------
0AD8           2838   _Set_Pin_Output:
0AD8 AA82      2839            mov     r2,dpl
0ADA           2840   ;        main.c:668: mask=(1<<(pin&0x7));
0ADA 7407      2841            mov     a,#0x07
0ADC 5A        2842            anl     a,r2
0ADD F5F0      2843            mov     b,a
0ADF 05F0      2844            inc     b
0AE1 7401      2845            mov     a,#0x01
0AE3 8000      2846            sjmp    L023011?
0AE5           2847   L023009?:
0AE5 25E0      2848            add     a,acc
0AE7           2849   L023011?:
0AE7 D5F018    2850            djnz    b,L023009?
0AEA FB        2851            mov     r3,a
0AEB           2852   ;        main.c:669: switch(pin/0x10)
0AEB EA        2853            mov     a,r2
0AEC C4        2854            swap    a
0AED 540F      2855            anl     a,#0x0f
0AEF FA        2856            mov  r2,a
0AF0 24FC      2857            add     a,#0xff - 0x03
0AF2 4000      2858            jc      L023006?
0AF4 EA        2859            mov     a,r2
0AF5 2A        2860            add     a,r2
0AF6 2A        2861            add     a,r2
0AF7 90E898    2862            mov     dptr,#L023013?
0AFA 73        2863            jmp     @a+dptr
0AFB           2864   L023013?:
0AFB 020000    2865            ljmp    L023001?
0AFE 020000    2866            ljmp    L023002?
0B01 020000    2867            ljmp    L023003?
0B04 020000    2868            ljmp    L023004?
0B07           2869   ;        main.c:671: case 0: P0MDOUT |= mask; break;
0B07           2870   L023001?:
0B07 EB        2871            mov     a,r3
0B08 42A4      2872            orl     _P0MDOUT,a
0B0A           2873   ;        main.c:672: case 1: P1MDOUT |= mask; break;
0B0A 22        2874            ret
0B0B           2875   L023002?:
0B0B EB        2876            mov     a,r3
0B0C 42A5      2877            orl     _P1MDOUT,a
0B0E           2878   ;        main.c:673: case 2: P2MDOUT |= mask; break; 
0B0E 22        2879            ret
0B0F           2880   L023003?:
0B0F EB        2881            mov     a,r3
0B10 42A6      2882            orl     _P2MDOUT,a
0B12           2883   ;        main.c:674: case 3: P3MDOUT |= mask; break; 
0B12 22        2884            ret
0B13           2885   L023004?:
0B13 EB        2886            mov     a,r3
0B14 429C      2887            orl     _P3MDOUT,a
0B16           2888   ;        main.c:675: }   
0B16           2889   L023006?:
0B16 22        2890            ret
0B17           2891   ;------------------------------------------------------------
0B17           2892   ;Allocation info for local variables in function 'Set_Pin_Input'
0B17           2893   ;------------------------------------------------------------
0B17           2894   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_158'
0B17           2895   ;pin                       Allocated to registers r2 
0B17           2896   ;------------------------------------------------------------
0B17           2897   ;        main.c:678: void Set_Pin_Input (unsigned char pin)
0B17           2898   ;        -----------------------------------------
0B17           2899   ;         function Set_Pin_Input
0B17           2900   ;        -----------------------------------------
0B17           2901   _Set_Pin_Input:
0B17 AA82      2902            mov     r2,dpl
0B19           2903   ;        main.c:682: mask=(1<<(pin&0x7));
0B19 7407      2904            mov     a,#0x07
0B1B 5A        2905            anl     a,r2
0B1C F5F0      2906            mov     b,a
0B1E 05F0      2907            inc     b
0B20 7401      2908            mov     a,#0x01
0B22 8000      2909            sjmp    L024011?
0B24           2910   L024009?:
0B24 25E0      2911            add     a,acc
0B26           2912   L024011?:
0B26 D5F018    2913            djnz    b,L024009?
0B29           2914   ;        main.c:683: mask=~mask;
0B29 F4        2915            cpl     a
0B2A FB        2916            mov     r3,a
0B2B           2917   ;        main.c:684: switch(pin/0x10)
0B2B EA        2918            mov     a,r2
0B2C C4        2919            swap    a
0B2D 540F      2920            anl     a,#0x0f
0B2F FA        2921            mov  r2,a
0B30 24FC      2922            add     a,#0xff - 0x03
0B32 4000      2923            jc      L024006?
0B34 EA        2924            mov     a,r2
0B35 2A        2925            add     a,r2
0B36 2A        2926            add     a,r2
0B37 90EA98    2927            mov     dptr,#L024013?
0B3A 73        2928            jmp     @a+dptr
0B3B           2929   L024013?:
0B3B 020000    2930            ljmp    L024001?
0B3E 020000    2931            ljmp    L024002?
0B41 020000    2932            ljmp    L024003?
0B44 020000    2933            ljmp    L024004?
0B47           2934   ;        main.c:686: case 0: P0MDOUT &= mask; break;
0B47           2935   L024001?:
0B47 EB        2936            mov     a,r3
0B48 52A4      2937            anl     _P0MDOUT,a
0B4A           2938   ;        main.c:687: case 1: P1MDOUT &= mask; break;
0B4A 22        2939            ret
0B4B           2940   L024002?:
0B4B EB        2941            mov     a,r3
0B4C 52A5      2942            anl     _P1MDOUT,a
0B4E           2943   ;        main.c:688: case 2: P2MDOUT &= mask; break; 
0B4E 22        2944            ret
0B4F           2945   L024003?:
0B4F EB        2946            mov     a,r3
0B50 52A6      2947            anl     _P2MDOUT,a
0B52           2948   ;        main.c:689: case 3: P3MDOUT &= mask; break; 
0B52 22        2949            ret
0B53           2950   L024004?:
0B53 EB        2951            mov     a,r3
0B54 529C      2952            anl     _P3MDOUT,a
0B56           2953   ;        main.c:690: }   
0B56           2954   L024006?:
0B56 22        2955            ret
0B57           2956   ;------------------------------------------------------------
0B57           2957   ;Allocation info for local variables in function 'InitADC'
0B57           2958   ;------------------------------------------------------------
0B57           2959   ;------------------------------------------------------------
0B57           2960   ;        main.c:693: void InitADC (void)
0B57           2961   ;        -----------------------------------------
0B57           2962   ;         function InitADC
0B57           2963   ;        -----------------------------------------
0B57           2964   _InitADC:
0B57           2965   ;        main.c:695: SFRPAGE = 0x00;
0B57 75A700    2966            mov     _SFRPAGE,#0x00
0B5A           2967   ;        main.c:696: ADEN=0; // Disable ADC
0B5A C2EF      2968            clr     _ADEN
0B5C           2969   ;        main.c:701: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0B5C 75B280    2970            mov     _ADC0CN1,#0x80
0B5F           2971   ;        main.c:705: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0B5F 75BC20    2972            mov     _ADC0CF0,#0x20
0B62           2973   ;        main.c:709: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
0B62 75B91E    2974            mov     _ADC0CF1,#0x1E
0B65           2975   ;        main.c:718: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0B65 75E800    2976            mov     _ADC0CN0,#0x00
0B68           2977   ;        main.c:723: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0B68 75DF3F    2978            mov     _ADC0CF2,#0x3F
0B6B           2979   ;        main.c:727: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0B6B 75B300    2980            mov     _ADC0CN2,#0x00
0B6E           2981   ;        main.c:729: ADEN=1; // Enable ADC
0B6E D2EF      2982            setb    _ADEN
0B70 22        2983            ret
0B71           2984   ;------------------------------------------------------------
0B71           2985   ;Allocation info for local variables in function 'InitPinADC'
0B71           2986   ;------------------------------------------------------------
0B71           2987   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
0B71           2988   ;portno                    Allocated to registers r2 
0B71           2989   ;mask                      Allocated to registers r3 
0B71           2990   ;------------------------------------------------------------
0B71           2991   ;        main.c:732: void InitPinADC (unsigned char portno, unsigned char pin_num)
0B71           2992   ;        -----------------------------------------
0B71           2993   ;         function InitPinADC
0B71           2994   ;        -----------------------------------------
0B71           2995   _InitPinADC:
0B71 AA82      2996            mov     r2,dpl
0B73           2997   ;        main.c:736: mask=1<<pin_num;
0B73 85E0F0    2998            mov     b,_InitPinADC_PARM_2
0B76 05F0      2999            inc     b
0B78 7401      3000            mov     a,#0x01
0B7A 8000      3001            sjmp    L026013?
0B7C           3002   L026011?:
0B7C 25E0      3003            add     a,acc
0B7E           3004   L026013?:
0B7E D5F018    3005            djnz    b,L026011?
0B81 FB        3006            mov     r3,a
0B82           3007   ;        main.c:738: SFRPAGE = 0x20;
0B82 75A720    3008            mov     _SFRPAGE,#0x20
0B85           3009   ;        main.c:739: switch (portno)
0B85 BA0058    3010            cjne    r2,#0x00,L026014?
0B88 8000      3011            sjmp    L026001?
0B8A           3012   L026014?:
0B8A BA01D8    3013            cjne    r2,#0x01,L026015?
0B8D 8000      3014            sjmp    L026002?
0B8F           3015   L026015?:
0B8F           3016   ;        main.c:741: case 0:
0B8F BA0258    3017            cjne    r2,#0x02,L026005?
0B92 8000      3018            sjmp    L026003?
0B94           3019   L026001?:
0B94           3020   ;        main.c:742: P0MDIN &= (~mask); // Set pin as analog input
0B94 EB        3021            mov     a,r3
0B95 F4        3022            cpl     a
0B96 FA        3023            mov     r2,a
0B97 52F1      3024            anl     _P0MDIN,a
0B99           3025   ;        main.c:743: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0B99 EB        3026            mov     a,r3
0B9A 42D4      3027            orl     _P0SKIP,a
0B9C           3028   ;        main.c:744: break;
0B9C           3029   ;        main.c:745: case 1:
0B9C 8000      3030            sjmp    L026005?
0B9E           3031   L026002?:
0B9E           3032   ;        main.c:746: P1MDIN &= (~mask); // Set pin as analog input
0B9E EB        3033            mov     a,r3
0B9F F4        3034            cpl     a
0BA0 FA        3035            mov     r2,a
0BA1 52F2      3036            anl     _P1MDIN,a
0BA3           3037   ;        main.c:747: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0BA3 EB        3038            mov     a,r3
0BA4 42D5      3039            orl     _P1SKIP,a
0BA6           3040   ;        main.c:748: break;
0BA6           3041   ;        main.c:749: case 2:
0BA6 8000      3042            sjmp    L026005?
0BA8           3043   L026003?:
0BA8           3044   ;        main.c:750: P2MDIN &= (~mask); // Set pin as analog input
0BA8 EB        3045            mov     a,r3
0BA9 F4        3046            cpl     a
0BAA FA        3047            mov     r2,a
0BAB 52F3      3048            anl     _P2MDIN,a
0BAD           3049   ;        main.c:751: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0BAD EB        3050            mov     a,r3
0BAE 42CC      3051            orl     _P2SKIP,a
0BB0           3052   ;        main.c:755: }
0BB0           3053   L026005?:
0BB0           3054   ;        main.c:756: SFRPAGE = 0x00;
0BB0 75A700    3055            mov     _SFRPAGE,#0x00
0BB3 22        3056            ret
0BB4           3057   ;------------------------------------------------------------
0BB4           3058   ;Allocation info for local variables in function 'ADC_at_Pin'
0BB4           3059   ;------------------------------------------------------------
0BB4           3060   ;pin                       Allocated to registers 
0BB4           3061   ;------------------------------------------------------------
0BB4           3062   ;        main.c:759: unsigned int ADC_at_Pin(unsigned char pin)
0BB4           3063   ;        -----------------------------------------
0BB4           3064   ;         function ADC_at_Pin
0BB4           3065   ;        -----------------------------------------
0BB4           3066   _ADC_at_Pin:
0BB4 8582BB    3067            mov     _ADC0MX,dpl
0BB7           3068   ;        main.c:762: ADINT = 0;
0BB7 C2ED      3069            clr     _ADINT
0BB9           3070   ;        main.c:763: ADBUSY = 1;     // Convert voltage at the pin
0BB9 D2EC      3071            setb    _ADBUSY
0BBB           3072   ;        main.c:764: while (!ADINT); // Wait for conversion to complete
0BBB           3073   L027001?:
0BBB 30EDD8    3074            jnb     _ADINT,L027001?
0BBE           3075   ;        main.c:765: return (ADC0);
0BBE 85BD82    3076            mov     dpl,_ADC0
0BC1 85BE83    3077            mov     dph,(_ADC0 >> 8)
0BC4 22        3078            ret
0BC5           3079   ;------------------------------------------------------------
0BC5           3080   ;Allocation info for local variables in function 'ReadHX711'
0BC5           3081   ;------------------------------------------------------------
0BC5           3082   ;dataa                     Allocated with name '_ReadHX711_dataa_1_168'
0BC5           3083   ;i                         Allocated with name '_ReadHX711_i_1_168'
0BC5           3084   ;ans                       Allocated with name '_ReadHX711_ans_1_168'
0BC5           3085   ;j                         Allocated with name '_ReadHX711_j_1_168'
0BC5           3086   ;------------------------------------------------------------
0BC5           3087   ;        main.c:768: int ReadHX711(void) {
0BC5           3088   ;        -----------------------------------------
0BC5           3089   ;         function ReadHX711
0BC5           3090   ;        -----------------------------------------
0BC5           3091   _ReadHX711:
0BC5           3092   ;        main.c:769: xdata unsigned long dataa = 0;
0BC5 90CE88    3093            mov     dptr,#_ReadHX711_dataa_1_168
0BC8 E4        3094            clr     a
0BC9 F0        3095            movx    @dptr,a
0BCA A3        3096            inc     dptr
0BCB F0        3097            movx    @dptr,a
0BCC A3        3098            inc     dptr
0BCD F0        3099            movx    @dptr,a
0BCE A3        3100            inc     dptr
0BCF F0        3101            movx    @dptr,a
0BD0           3102   ;        main.c:774: PD_SCK = 0;
0BD0 C2A5      3103            clr     _P2_5
0BD2           3104   ;        main.c:776: for (i = 0; i < 24; i++) {
0BD2 7A00      3105            mov     r2,#0x00
0BD4           3106   L028011?:
0BD4 C3        3107            clr     c
0BD5 EA        3108            mov     a,r2
0BD6 6480      3109            xrl     a,#0x80
0BD8 9498      3110            subb    a,#0x98
0BDA 4000      3111            jc      L028037?
0BDC 020000    3112            ljmp    L028014?
0BDF           3113   L028037?:
0BDF           3114   ;        main.c:777: PD_SCK = 1;
0BDF D2A5      3115            setb    _P2_5
0BE1           3116   ;        main.c:778: for (j = 0; j < 4; j++);
0BE1 90CED8    3117            mov     dptr,#_ReadHX711_j_1_168
0BE4 E4        3118            clr     a
0BE5 F0        3119            movx    @dptr,a
0BE6           3120   L028003?:
0BE6 90CED8    3121            mov     dptr,#_ReadHX711_j_1_168
0BE9 E0        3122            movx    a,@dptr
0BEA FB        3123            mov     r3,a
0BEB C3        3124            clr     c
0BEC 6480      3125            xrl     a,#0x80
0BEE 9484      3126            subb    a,#0x84
0BF0 5000      3127            jnc     L028006?
0BF2 90CED8    3128            mov     dptr,#_ReadHX711_j_1_168
0BF5 E0        3129            movx    a,@dptr
0BF6 2401      3130            add     a,#0x01
0BF8 F0        3131            movx    @dptr,a
0BF9 8000      3132            sjmp    L028003?
0BFB           3133   L028006?:
0BFB           3134   ;        main.c:779: dataa = dataa << 1;
0BFB 90CE88    3135            mov     dptr,#_ReadHX711_dataa_1_168
0BFE E0        3136            movx    a,@dptr
0BFF FB        3137            mov     r3,a
0C00 A3        3138            inc     dptr
0C01 E0        3139            movx    a,@dptr
0C02 FC        3140            mov     r4,a
0C03 A3        3141            inc     dptr
0C04 E0        3142            movx    a,@dptr
0C05 FD        3143            mov     r5,a
0C06 A3        3144            inc     dptr
0C07 E0        3145            movx    a,@dptr
0C08 FE        3146            mov     r6,a
0C09 EB        3147            mov     a,r3
0C0A 2B        3148            add     a,r3
0C0B FB        3149            mov     r3,a
0C0C EC        3150            mov     a,r4
0C0D 33        3151            rlc     a
0C0E FC        3152            mov     r4,a
0C0F ED        3153            mov     a,r5
0C10 33        3154            rlc     a
0C11 FD        3155            mov     r5,a
0C12 EE        3156            mov     a,r6
0C13 33        3157            rlc     a
0C14 FE        3158            mov     r6,a
0C15 90CE88    3159            mov     dptr,#_ReadHX711_dataa_1_168
0C18 EB        3160            mov     a,r3
0C19 F0        3161            movx    @dptr,a
0C1A A3        3162            inc     dptr
0C1B EC        3163            mov     a,r4
0C1C F0        3164            movx    @dptr,a
0C1D A3        3165            inc     dptr
0C1E ED        3166            mov     a,r5
0C1F F0        3167            movx    @dptr,a
0C20 A3        3168            inc     dptr
0C21 EE        3169            mov     a,r6
0C22 F0        3170            movx    @dptr,a
0C23           3171   ;        main.c:780: if (DOUT) {
0C23 30A658    3172            jnb     _P2_6,L028002?
0C26           3173   ;        main.c:781: dataa |= 0x01;
0C26 90CE88    3174            mov     dptr,#_ReadHX711_dataa_1_168
0C29 E0        3175            movx    a,@dptr
0C2A FB        3176            mov     r3,a
0C2B A3        3177            inc     dptr
0C2C E0        3178            movx    a,@dptr
0C2D FC        3179            mov     r4,a
0C2E A3        3180            inc     dptr
0C2F E0        3181            movx    a,@dptr
0C30 FD        3182            mov     r5,a
0C31 A3        3183            inc     dptr
0C32 E0        3184            movx    a,@dptr
0C33 FE        3185            mov     r6,a
0C34 90CE88    3186            mov     dptr,#_ReadHX711_dataa_1_168
0C37 7401      3187            mov     a,#0x01
0C39 4B        3188            orl     a,r3
0C3A F0        3189            movx    @dptr,a
0C3B A3        3190            inc     dptr
0C3C EC        3191            mov     a,r4
0C3D F0        3192            movx    @dptr,a
0C3E A3        3193            inc     dptr
0C3F ED        3194            mov     a,r5
0C40 F0        3195            movx    @dptr,a
0C41 A3        3196            inc     dptr
0C42 EE        3197            mov     a,r6
0C43 F0        3198            movx    @dptr,a
0C44           3199   L028002?:
0C44           3200   ;        main.c:783: PD_SCK = 0;
0C44 C2A5      3201            clr     _P2_5
0C46           3202   ;        main.c:784: for (j = 0; j < 4; j++);
0C46 90CED8    3203            mov     dptr,#_ReadHX711_j_1_168
0C49 E4        3204            clr     a
0C4A F0        3205            movx    @dptr,a
0C4B           3206   L028007?:
0C4B 90CED8    3207            mov     dptr,#_ReadHX711_j_1_168
0C4E E0        3208            movx    a,@dptr
0C4F FB        3209            mov     r3,a
0C50 C3        3210            clr     c
0C51 6480      3211            xrl     a,#0x80
0C53 9484      3212            subb    a,#0x84
0C55 5000      3213            jnc     L028013?
0C57 90CED8    3214            mov     dptr,#_ReadHX711_j_1_168
0C5A E0        3215            movx    a,@dptr
0C5B 2401      3216            add     a,#0x01
0C5D F0        3217            movx    @dptr,a
0C5E 8000      3218            sjmp    L028007?
0C60           3219   L028013?:
0C60           3220   ;        main.c:776: for (i = 0; i < 24; i++) {
0C60 0A        3221            inc     r2
0C61 020000    3222            ljmp    L028011?
0C64           3223   L028014?:
0C64           3224   ;        main.c:787: PD_SCK = 1;
0C64 D2A5      3225            setb    _P2_5
0C66           3226   ;        main.c:788: for (j = 0; j < 4; j++);
0C66 90CED8    3227            mov     dptr,#_ReadHX711_j_1_168
0C69 E4        3228            clr     a
0C6A F0        3229            movx    @dptr,a
0C6B           3230   L028015?:
0C6B 90CED8    3231            mov     dptr,#_ReadHX711_j_1_168
0C6E E0        3232            movx    a,@dptr
0C6F FA        3233            mov     r2,a
0C70 C3        3234            clr     c
0C71 6480      3235            xrl     a,#0x80
0C73 9484      3236            subb    a,#0x84
0C75 5000      3237            jnc     L028018?
0C77 90CED8    3238            mov     dptr,#_ReadHX711_j_1_168
0C7A E0        3239            movx    a,@dptr
0C7B 2401      3240            add     a,#0x01
0C7D F0        3241            movx    @dptr,a
0C7E 8000      3242            sjmp    L028015?
0C80           3243   L028018?:
0C80           3244   ;        main.c:789: PD_SCK = 0;
0C80 C2A5      3245            clr     _P2_5
0C82           3246   ;        main.c:790: for (j = 0; j < 4; j++);
0C82 90CED8    3247            mov     dptr,#_ReadHX711_j_1_168
0C85 E4        3248            clr     a
0C86 F0        3249            movx    @dptr,a
0C87           3250   L028019?:
0C87 90CED8    3251            mov     dptr,#_ReadHX711_j_1_168
0C8A E0        3252            movx    a,@dptr
0C8B FA        3253            mov     r2,a
0C8C C3        3254            clr     c
0C8D 6480      3255            xrl     a,#0x80
0C8F 9484      3256            subb    a,#0x84
0C91 5000      3257            jnc     L028022?
0C93 90CED8    3258            mov     dptr,#_ReadHX711_j_1_168
0C96 E0        3259            movx    a,@dptr
0C97 2401      3260            add     a,#0x01
0C99 F0        3261            movx    @dptr,a
0C9A 8000      3262            sjmp    L028019?
0C9C           3263   L028022?:
0C9C           3264   ;        main.c:791: ans = (dataa % 1000000)/10;
0C9C 90CE88    3265            mov     dptr,#_ReadHX711_dataa_1_168
0C9F E0        3266            movx    a,@dptr
0CA0 FA        3267            mov     r2,a
0CA1 A3        3268            inc     dptr
0CA2 E0        3269            movx    a,@dptr
0CA3 FB        3270            mov     r3,a
0CA4 A3        3271            inc     dptr
0CA5 E0        3272            movx    a,@dptr
0CA6 FC        3273            mov     r4,a
0CA7 A3        3274            inc     dptr
0CA8 E0        3275            movx    a,@dptr
0CA9 FD        3276            mov     r5,a
0CAA 750040    3277            mov     __modulong_PARM_2,#0x40
0CAD 750142    3278            mov     (__modulong_PARM_2 + 1),#0x42
0CB0 75020F    3279            mov     (__modulong_PARM_2 + 2),#0x0F
0CB3 750300    3280            mov     (__modulong_PARM_2 + 3),#0x00
0CB6 8A82      3281            mov     dpl,r2
0CB8 8B83      3282            mov     dph,r3
0CBA 8CF0      3283            mov     b,r4
0CBC ED        3284            mov     a,r5
0CBD 120000    3285            lcall   __modulong
0CC0 AA82      3286            mov     r2,dpl
0CC2 AB83      3287            mov     r3,dph
0CC4 ACF0      3288            mov     r4,b
0CC6 FD        3289            mov     r5,a
0CC7 75000A    3290            mov     __divulong_PARM_2,#0x0A
0CCA E4        3291            clr     a
0CCB F501      3292            mov     (__divulong_PARM_2 + 1),a
0CCD F502      3293            mov     (__divulong_PARM_2 + 2),a
0CCF F503      3294            mov     (__divulong_PARM_2 + 3),a
0CD1 8A82      3295            mov     dpl,r2
0CD3 8B83      3296            mov     dph,r3
0CD5 8CF0      3297            mov     b,r4
0CD7 ED        3298            mov     a,r5
0CD8           3299   ;        main.c:792: return ans;
0CD8 020000    3300            ljmp    __divulong
0CDB           3301   ;------------------------------------------------------------
0CDB           3302   ;Allocation info for local variables in function 'Timer5_ISR'
0CDB           3303   ;------------------------------------------------------------
0CDB           3304   ;------------------------------------------------------------
0CDB           3305   ;        main.c:795: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0CDB           3306   ;        -----------------------------------------
0CDB           3307   ;         function Timer5_ISR
0CDB           3308   ;        -----------------------------------------
0CDB           3309   _Timer5_ISR:
0CDB C018      3310            push    bits
0CDD C0E0      3311            push    acc
0CDF C0F0      3312            push    b
0CE1 C082      3313            push    dpl
0CE3 C083      3314            push    dph
0CE5 C002      3315            push    (0+2)
0CE7 C003      3316            push    (0+3)
0CE9 C004      3317            push    (0+4)
0CEB C005      3318            push    (0+5)
0CED C006      3319            push    (0+6)
0CEF C007      3320            push    (0+7)
0CF1 C000      3321            push    (0+0)
0CF3 C001      3322            push    (0+1)
0CF5 C0D0      3323            push    psw
0CF7 75D000    3324            mov     psw,#0x00
0CFA           3325   ;        main.c:797: SFRPAGE=0x10;
0CFA 75A710    3326            mov     _SFRPAGE,#0x10
0CFD           3327   ;        main.c:798: TF5H = 0; // Clear Timer5 interrupt flag
0CFD C2C7      3328            clr     _TF5H
0CFF           3329   ;        main.c:799: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0CFF 75D2C4    3330            mov     _TMR5RL,#0xC4
0D02 75D3FF    3331            mov     (_TMR5RL >> 8),#0xFF
0D05           3332   ;        main.c:801: fre_mea_count++;
0D05 904E08    3333            mov     dptr,#_fre_mea_count
0D08 E0        3334            movx    a,@dptr
0D09 2401      3335            add     a,#0x01
0D0B F0        3336            movx    @dptr,a
0D0C A3        3337            inc     dptr
0D0D E0        3338            movx    a,@dptr
0D0E 3400      3339            addc    a,#0x00
0D10 F0        3340            movx    @dptr,a
0D11           3341   ;        main.c:802: if(fre_mea_count == 1000){
0D11 904E08    3342            mov     dptr,#_fre_mea_count
0D14 E0        3343            movx    a,@dptr
0D15 FA        3344            mov     r2,a
0D16 A3        3345            inc     dptr
0D17 E0        3346            movx    a,@dptr
0D18 FB        3347            mov     r3,a
0D19 BAE858    3348            cjne    r2,#0xE8,L029004?
0D1C BB0358    3349            cjne    r3,#0x03,L029004?
0D1F           3350   ;        main.c:803: fre_mea_count = 0;
0D1F 904E08    3351            mov     dptr,#_fre_mea_count
0D22 E4        3352            clr     a
0D23 F0        3353            movx    @dptr,a
0D24 A3        3354            inc     dptr
0D25 F0        3355            movx    @dptr,a
0D26           3356   ;        main.c:804: if(mea_yes){
0D26 904BF8    3357            mov     dptr,#_mea_yes
0D29 E0        3358            movx    a,@dptr
0D2A FA        3359            mov     r2,a
0D2B 6000      3360            jz      L029004?
0D2D           3361   ;        main.c:805: freq100 = get_freq();
0D2D 120000    3362            lcall   _get_freq
0D30 AA82      3363            mov     r2,dpl
0D32 AB83      3364            mov     r3,dph
0D34 905508    3365            mov     dptr,#_freq100
0D37 EA        3366            mov     a,r2
0D38 F0        3367            movx    @dptr,a
0D39 A3        3368            inc     dptr
0D3A EB        3369            mov     a,r3
0D3B F0        3370            movx    @dptr,a
0D3C EB        3371            mov     a,r3
0D3D 33        3372            rlc     a
0D3E 95E0      3373            subb    a,acc
0D40 A3        3374            inc     dptr
0D41 F0        3375            movx    @dptr,a
0D42 A3        3376            inc     dptr
0D43 F0        3377            movx    @dptr,a
0D44           3378   L029004?:
0D44           3379   ;        main.c:810: weight_mea_count++;
0D44 904DC8    3380            mov     dptr,#_weight_mea_count
0D47 E0        3381            movx    a,@dptr
0D48 2401      3382            add     a,#0x01
0D4A F0        3383            movx    @dptr,a
0D4B A3        3384            inc     dptr
0D4C E0        3385            movx    a,@dptr
0D4D 3400      3386            addc    a,#0x00
0D4F F0        3387            movx    @dptr,a
0D50           3388   ;        main.c:811: if(weight_mea_count == 20000){
0D50 904DC8    3389            mov     dptr,#_weight_mea_count
0D53 E0        3390            movx    a,@dptr
0D54 FA        3391            mov     r2,a
0D55 A3        3392            inc     dptr
0D56 E0        3393            movx    a,@dptr
0D57 FB        3394            mov     r3,a
0D58 BA20D8    3395            cjne    r2,#0x20,L029008?
0D5B BB4ED8    3396            cjne    r3,#0x4E,L029008?
0D5E           3397   ;        main.c:812: weight_mea_count = 0;
0D5E 904DC8    3398            mov     dptr,#_weight_mea_count
0D61 E4        3399            clr     a
0D62 F0        3400            movx    @dptr,a
0D63 A3        3401            inc     dptr
0D64 F0        3402            movx    @dptr,a
0D65           3403   ;        main.c:813: if(mea_yes) weight = ReadHX711();
0D65 904BF8    3404            mov     dptr,#_mea_yes
0D68 E0        3405            movx    a,@dptr
0D69 FA        3406            mov     r2,a
0D6A 6000      3407            jz      L029008?
0D6C 120000    3408            lcall   _ReadHX711
0D6F E582      3409            mov     a,dpl
0D71 8583F0    3410            mov     b,dph
0D74 904BB8    3411            mov     dptr,#_weight
0D77 F0        3412            movx    @dptr,a
0D78 A3        3413            inc     dptr
0D79 E5F0      3414            mov     a,b
0D7B F0        3415            movx    @dptr,a
0D7C           3416   L029008?:
0D7C           3417   ;        main.c:816: pwm_counter++; 
0D7C 905108    3418            mov     dptr,#_pwm_counter
0D7F E0        3419            movx    a,@dptr
0D80 2401      3420            add     a,#0x01
0D82 F0        3421            movx    @dptr,a
0D83 A3        3422            inc     dptr
0D84 E0        3423            movx    a,@dptr
0D85 3400      3424            addc    a,#0x00
0D87 F0        3425            movx    @dptr,a
0D88           3426   ;        main.c:817: if (pwm_counter == 100){
0D88 905108    3427            mov     dptr,#_pwm_counter
0D8B E0        3428            movx    a,@dptr
0D8C FA        3429            mov     r2,a
0D8D A3        3430            inc     dptr
0D8E E0        3431            movx    a,@dptr
0D8F FB        3432            mov     r3,a
0D90 BA6418    3433            cjne    r2,#0x64,L029010?
0D93 BB0018    3434            cjne    r3,#0x00,L029010?
0D96           3435   ;        main.c:818: pwm_counter = 0; 
0D96 905108    3436            mov     dptr,#_pwm_counter
0D99 E4        3437            clr     a
0D9A F0        3438            movx    @dptr,a
0D9B A3        3439            inc     dptr
0D9C F0        3440            movx    @dptr,a
0D9D           3441   L029010?:
0D9D           3442   ;        main.c:821: if (pwm_right > pwm_counter){
0D9D 905048    3443            mov     dptr,#_pwm_right
0DA0 E0        3444            movx    a,@dptr
0DA1 FA        3445            mov     r2,a
0DA2 905108    3446            mov     dptr,#_pwm_counter
0DA5 E0        3447            movx    a,@dptr
0DA6 FB        3448            mov     r3,a
0DA7 A3        3449            inc     dptr
0DA8 E0        3450            movx    a,@dptr
0DA9 FC        3451            mov     r4,a
0DAA 7D00      3452            mov     r5,#0x00
0DAC C3        3453            clr     c
0DAD EB        3454            mov     a,r3
0DAE 9A        3455            subb    a,r2
0DAF EC        3456            mov     a,r4
0DB0 9D        3457            subb    a,r5
0DB1 5000      3458            jnc     L029015?
0DB3           3459   ;        main.c:822: if(L_motor_dir){
0DB3 905008    3460            mov     dptr,#_L_motor_dir
0DB6 E0        3461            movx    a,@dptr
0DB7 FA        3462            mov     r2,a
0DB8 6000      3463            jz      L029012?
0DBA           3464   ;        main.c:823: L_bridge_1 = 1; 
0DBA D2A1      3465            setb    _P2_1
0DBC           3466   ;        main.c:824: L_bridge_2 = 0; 
0DBC C2A2      3467            clr     _P2_2
0DBE 8000      3468            sjmp    L029016?
0DC0           3469   L029012?:
0DC0           3470   ;        main.c:827: L_bridge_1 = 0; 
0DC0 C2A1      3471            clr     _P2_1
0DC2           3472   ;        main.c:828: L_bridge_2 = 1; 
0DC2 D2A2      3473            setb    _P2_2
0DC4 8000      3474            sjmp    L029016?
0DC6           3475   L029015?:
0DC6           3476   ;        main.c:832: L_bridge_1 = 0; 
0DC6 C2A1      3477            clr     _P2_1
0DC8           3478   ;        main.c:833: L_bridge_2 = 0; 
0DC8 C2A2      3479            clr     _P2_2
0DCA           3480   L029016?:
0DCA           3481   ;        main.c:835: if (pwm_left > pwm_counter){
0DCA 905088    3482            mov     dptr,#_pwm_left
0DCD E0        3483            movx    a,@dptr
0DCE FA        3484            mov     r2,a
0DCF 7D00      3485            mov     r5,#0x00
0DD1 C3        3486            clr     c
0DD2 EB        3487            mov     a,r3
0DD3 9A        3488            subb    a,r2
0DD4 EC        3489            mov     a,r4
0DD5 9D        3490            subb    a,r5
0DD6 5000      3491            jnc     L029021?
0DD8           3492   ;        main.c:836: if (R_motor_dir){
0DD8 904FC8    3493            mov     dptr,#_R_motor_dir
0DDB E0        3494            movx    a,@dptr
0DDC FA        3495            mov     r2,a
0DDD 6000      3496            jz      L029018?
0DDF           3497   ;        main.c:837: R_bridge_1 = 1; 
0DDF D2A4      3498            setb    _P2_4
0DE1           3499   ;        main.c:838: R_bridge_2 = 0;
0DE1 C2A3      3500            clr     _P2_3
0DE3 8000      3501            sjmp    L029022?
0DE5           3502   L029018?:
0DE5           3503   ;        main.c:841: R_bridge_1 = 0; 
0DE5 C2A4      3504            clr     _P2_4
0DE7           3505   ;        main.c:842: R_bridge_2 = 1;
0DE7 D2A3      3506            setb    _P2_3
0DE9 8000      3507            sjmp    L029022?
0DEB           3508   L029021?:
0DEB           3509   ;        main.c:846: R_bridge_1 = 0; 
0DEB C2A4      3510            clr     _P2_4
0DED           3511   ;        main.c:847: R_bridge_2 = 0; 
0DED C2A3      3512            clr     _P2_3
0DEF           3513   L029022?:
0DEF           3514   ;        main.c:850: servo_counter++;
0DEF 9050C8    3515            mov     dptr,#_servo_counter
0DF2 E0        3516            movx    a,@dptr
0DF3 2401      3517            add     a,#0x01
0DF5 F0        3518            movx    @dptr,a
0DF6 A3        3519            inc     dptr
0DF7 E0        3520            movx    a,@dptr
0DF8 3400      3521            addc    a,#0x00
0DFA F0        3522            movx    @dptr,a
0DFB           3523   ;        main.c:851: if(servo_counter==2000)
0DFB 9050C8    3524            mov     dptr,#_servo_counter
0DFE E0        3525            movx    a,@dptr
0DFF FA        3526            mov     r2,a
0E00 A3        3527            inc     dptr
0E01 E0        3528            movx    a,@dptr
0E02 FB        3529            mov     r3,a
0E03 BAD0D8    3530            cjne    r2,#0xD0,L029024?
0E06 BB07D8    3531            cjne    r3,#0x07,L029024?
0E09           3532   ;        main.c:853: servo_counter=0;
0E09 9050C8    3533            mov     dptr,#_servo_counter
0E0C E4        3534            clr     a
0E0D F0        3535            movx    @dptr,a
0E0E A3        3536            inc     dptr
0E0F F0        3537            movx    @dptr,a
0E10           3538   ;        main.c:854: Servo_arm=1;
0E10 D296      3539            setb    _P1_6
0E12           3540   ;        main.c:855: Servo_base=1;
0E12 D297      3541            setb    _P1_7
0E14           3542   L029024?:
0E14           3543   ;        main.c:857: if(servo_arm>=servo_counter)
0E14 904F48    3544            mov     dptr,#_servo_arm
0E17 E0        3545            movx    a,@dptr
0E18 FA        3546            mov     r2,a
0E19 9050C8    3547            mov     dptr,#_servo_counter
0E1C E0        3548            movx    a,@dptr
0E1D FB        3549            mov     r3,a
0E1E A3        3550            inc     dptr
0E1F E0        3551            movx    a,@dptr
0E20 FC        3552            mov     r4,a
0E21 7D00      3553            mov     r5,#0x00
0E23 C3        3554            clr     c
0E24 EA        3555            mov     a,r2
0E25 9B        3556            subb    a,r3
0E26 ED        3557            mov     a,r5
0E27 9C        3558            subb    a,r4
0E28 4000      3559            jc      L029026?
0E2A           3560   ;        main.c:859: Servo_arm = 1;
0E2A D296      3561            setb    _P1_6
0E2C 8000      3562            sjmp    L029027?
0E2E           3563   L029026?:
0E2E           3564   ;        main.c:863: Servo_arm = 0; 
0E2E C296      3565            clr     _P1_6
0E30           3566   L029027?:
0E30           3567   ;        main.c:865: if(servo_base>=servo_counter)
0E30 904F88    3568            mov     dptr,#_servo_base
0E33 E0        3569            movx    a,@dptr
0E34 FA        3570            mov     r2,a
0E35 7D00      3571            mov     r5,#0x00
0E37 C3        3572            clr     c
0E38 EA        3573            mov     a,r2
0E39 9B        3574            subb    a,r3
0E3A ED        3575            mov     a,r5
0E3B 9C        3576            subb    a,r4
0E3C 4000      3577            jc      L029029?
0E3E           3578   ;        main.c:867: Servo_base = 1;
0E3E D297      3579            setb    _P1_7
0E40 8000      3580            sjmp    L029031?
0E42           3581   L029029?:
0E42           3582   ;        main.c:871: Servo_base = 0; 
0E42 C297      3583            clr     _P1_7
0E44           3584   L029031?:
0E44 D0D0      3585            pop     psw
0E46 D001      3586            pop     (0+1)
0E48 D000      3587            pop     (0+0)
0E4A D007      3588            pop     (0+7)
0E4C D006      3589            pop     (0+6)
0E4E D005      3590            pop     (0+5)
0E50 D004      3591            pop     (0+4)
0E52 D003      3592            pop     (0+3)
0E54 D002      3593            pop     (0+2)
0E56 D083      3594            pop     dph
0E58 D082      3595            pop     dpl
0E5A D0F0      3596            pop     b
0E5C D0E0      3597            pop     acc
0E5E D018      3598            pop     bits
0E60 32        3599            reti
0E61           3600   ;------------------------------------------------------------
0E61           3601   ;Allocation info for local variables in function 'servo_pick'
0E61           3602   ;------------------------------------------------------------
0E61           3603   ;i                         Allocated with name '_servo_pick_i_1_190'
0E61           3604   ;------------------------------------------------------------
0E61           3605   ;        main.c:875: void servo_pick(){
0E61           3606   ;        -----------------------------------------
0E61           3607   ;         function servo_pick
0E61           3608   ;        -----------------------------------------
0E61           3609   _servo_pick:
0E61           3610   ;        main.c:877: servo_arm = 50;
0E61 904F48    3611            mov     dptr,#_servo_arm
0E64 7432      3612            mov     a,#0x32
0E66 F0        3613            movx    @dptr,a
0E67           3614   ;        main.c:878: servo_base = 50;
0E67 904F88    3615            mov     dptr,#_servo_base
0E6A 7432      3616            mov     a,#0x32
0E6C F0        3617            movx    @dptr,a
0E6D           3618   ;        main.c:879: waitms(500);
0E6D 9001F4    3619            mov     dptr,#0x01F4
0E70 120000    3620            lcall   _waitms
0E73           3621   ;        main.c:881: for (i=50; i <= 210; i+=20)
0E73 7A32      3622            mov     r2,#0x32
0E75 7B00      3623            mov     r3,#0x00
0E77           3624   L030001?:
0E77 C3        3625            clr     c
0E78 74D2      3626            mov     a,#0xD2
0E7A 9A        3627            subb    a,r2
0E7B E4        3628            clr     a
0E7C 6480      3629            xrl     a,#0x80
0E7E 8BF0      3630            mov     b,r3
0E80 63F080    3631            xrl     b,#0x80
0E83 95F0      3632            subb    a,b
0E85 4000      3633            jc      L030004?
0E87           3634   ;        main.c:883: servo_base = i; 
0E87 904F88    3635            mov     dptr,#_servo_base
0E8A EA        3636            mov     a,r2
0E8B F0        3637            movx    @dptr,a
0E8C           3638   ;        main.c:884: waitms(25);
0E8C 900019    3639            mov     dptr,#0x0019
0E8F C002      3640            push    ar2
0E91 C003      3641            push    ar3
0E93 120000    3642            lcall   _waitms
0E96 D003      3643            pop     ar3
0E98 D002      3644            pop     ar2
0E9A           3645   ;        main.c:881: for (i=50; i <= 210; i+=20)
0E9A 7414      3646            mov     a,#0x14
0E9C 2A        3647            add     a,r2
0E9D FA        3648            mov     r2,a
0E9E E4        3649            clr     a
0E9F 3B        3650            addc    a,r3
0EA0 FB        3651            mov     r3,a
0EA1 8000      3652            sjmp    L030001?
0EA3           3653   L030004?:
0EA3           3654   ;        main.c:886: waitms(500);
0EA3 9001F4    3655            mov     dptr,#0x01F4
0EA6 120000    3656            lcall   _waitms
0EA9           3657   ;        main.c:887: for(i = 50; i <= 250; i+=20)
0EA9 7A32      3658            mov     r2,#0x32
0EAB 7B00      3659            mov     r3,#0x00
0EAD           3660   L030005?:
0EAD C3        3661            clr     c
0EAE 74FA      3662            mov     a,#0xFA
0EB0 9A        3663            subb    a,r2
0EB1 E4        3664            clr     a
0EB2 6480      3665            xrl     a,#0x80
0EB4 8BF0      3666            mov     b,r3
0EB6 63F080    3667            xrl     b,#0x80
0EB9 95F0      3668            subb    a,b
0EBB 4000      3669            jc      L030008?
0EBD           3670   ;        main.c:889: servo_arm = i; 
0EBD 904F48    3671            mov     dptr,#_servo_arm
0EC0 EA        3672            mov     a,r2
0EC1 F0        3673            movx    @dptr,a
0EC2           3674   ;        main.c:890: waitms(25);
0EC2 900019    3675            mov     dptr,#0x0019
0EC5 C002      3676            push    ar2
0EC7 C003      3677            push    ar3
0EC9 120000    3678            lcall   _waitms
0ECC D003      3679            pop     ar3
0ECE D002      3680            pop     ar2
0ED0           3681   ;        main.c:887: for(i = 50; i <= 250; i+=20)
0ED0 7414      3682            mov     a,#0x14
0ED2 2A        3683            add     a,r2
0ED3 FA        3684            mov     r2,a
0ED4 E4        3685            clr     a
0ED5 3B        3686            addc    a,r3
0ED6 FB        3687            mov     r3,a
0ED7 8000      3688            sjmp    L030005?
0ED9           3689   L030008?:
0ED9           3690   ;        main.c:893: Magnet = 1; 
0ED9 D295      3691            setb    _P1_5
0EDB           3692   ;        main.c:894: waitms(500);
0EDB 9001F4    3693            mov     dptr,#0x01F4
0EDE 120000    3694            lcall   _waitms
0EE1           3695   ;        main.c:895: for(i = 200; i >= 90; i-=10){
0EE1 7AC8      3696            mov     r2,#0xC8
0EE3 7B00      3697            mov     r3,#0x00
0EE5           3698   L030009?:
0EE5 C3        3699            clr     c
0EE6 EA        3700            mov     a,r2
0EE7 945A      3701            subb    a,#0x5A
0EE9 EB        3702            mov     a,r3
0EEA 6480      3703            xrl     a,#0x80
0EEC 9480      3704            subb    a,#0x80
0EEE 4000      3705            jc      L030012?
0EF0           3706   ;        main.c:896: waitms(25);
0EF0 900019    3707            mov     dptr,#0x0019
0EF3 C002      3708            push    ar2
0EF5 C003      3709            push    ar3
0EF7 120000    3710            lcall   _waitms
0EFA D003      3711            pop     ar3
0EFC D002      3712            pop     ar2
0EFE           3713   ;        main.c:897: servo_base = i;
0EFE 904F88    3714            mov     dptr,#_servo_base
0F01 EA        3715            mov     a,r2
0F02 F0        3716            movx    @dptr,a
0F03           3717   ;        main.c:895: for(i = 200; i >= 90; i-=10){
0F03 EA        3718            mov     a,r2
0F04 24F6      3719            add     a,#0xf6
0F06 FA        3720            mov     r2,a
0F07 EB        3721            mov     a,r3
0F08 34FF      3722            addc    a,#0xff
0F0A FB        3723            mov     r3,a
0F0B 8000      3724            sjmp    L030009?
0F0D           3725   L030012?:
0F0D           3726   ;        main.c:899: waitms(500);
0F0D 9001F4    3727            mov     dptr,#0x01F4
0F10 120000    3728            lcall   _waitms
0F13           3729   ;        main.c:900: for(i = 90; i <= 200; i+=10){
0F13 7A5A      3730            mov     r2,#0x5A
0F15 7B00      3731            mov     r3,#0x00
0F17           3732   L030013?:
0F17 C3        3733            clr     c
0F18 74C8      3734            mov     a,#0xC8
0F1A 9A        3735            subb    a,r2
0F1B E4        3736            clr     a
0F1C 6480      3737            xrl     a,#0x80
0F1E 8BF0      3738            mov     b,r3
0F20 63F080    3739            xrl     b,#0x80
0F23 95F0      3740            subb    a,b
0F25 4000      3741            jc      L030016?
0F27           3742   ;        main.c:901: waitms(25);
0F27 900019    3743            mov     dptr,#0x0019
0F2A C002      3744            push    ar2
0F2C C003      3745            push    ar3
0F2E 120000    3746            lcall   _waitms
0F31 D003      3747            pop     ar3
0F33 D002      3748            pop     ar2
0F35           3749   ;        main.c:902: servo_base = i;
0F35 904F88    3750            mov     dptr,#_servo_base
0F38 EA        3751            mov     a,r2
0F39 F0        3752            movx    @dptr,a
0F3A           3753   ;        main.c:900: for(i = 90; i <= 200; i+=10){
0F3A 740A      3754            mov     a,#0x0A
0F3C 2A        3755            add     a,r2
0F3D FA        3756            mov     r2,a
0F3E E4        3757            clr     a
0F3F 3B        3758            addc    a,r3
0F40 FB        3759            mov     r3,a
0F41 8000      3760            sjmp    L030013?
0F43           3761   L030016?:
0F43           3762   ;        main.c:904: waitms(500);
0F43 9001F4    3763            mov     dptr,#0x01F4
0F46 120000    3764            lcall   _waitms
0F49           3765   ;        main.c:905: for(i = 240; i >= 100; i-= 5){
0F49 7AF0      3766            mov     r2,#0xF0
0F4B 7B00      3767            mov     r3,#0x00
0F4D           3768   L030017?:
0F4D C3        3769            clr     c
0F4E EA        3770            mov     a,r2
0F4F 9464      3771            subb    a,#0x64
0F51 EB        3772            mov     a,r3
0F52 6480      3773            xrl     a,#0x80
0F54 9480      3774            subb    a,#0x80
0F56 4000      3775            jc      L030020?
0F58           3776   ;        main.c:906: waitms(25);
0F58 900019    3777            mov     dptr,#0x0019
0F5B C002      3778            push    ar2
0F5D C003      3779            push    ar3
0F5F 120000    3780            lcall   _waitms
0F62 D003      3781            pop     ar3
0F64 D002      3782            pop     ar2
0F66           3783   ;        main.c:907: servo_arm = i;
0F66 904F48    3784            mov     dptr,#_servo_arm
0F69 EA        3785            mov     a,r2
0F6A F0        3786            movx    @dptr,a
0F6B           3787   ;        main.c:905: for(i = 240; i >= 100; i-= 5){
0F6B EA        3788            mov     a,r2
0F6C 24FB      3789            add     a,#0xfb
0F6E FA        3790            mov     r2,a
0F6F EB        3791            mov     a,r3
0F70 34FF      3792            addc    a,#0xff
0F72 FB        3793            mov     r3,a
0F73 8000      3794            sjmp    L030017?
0F75           3795   L030020?:
0F75           3796   ;        main.c:909: waitms(500);
0F75 9001F4    3797            mov     dptr,#0x01F4
0F78 120000    3798            lcall   _waitms
0F7B           3799   ;        main.c:910: for(i = 200; i >= 80; i-=5){
0F7B 7AC8      3800            mov     r2,#0xC8
0F7D 7B00      3801            mov     r3,#0x00
0F7F           3802   L030021?:
0F7F C3        3803            clr     c
0F80 EA        3804            mov     a,r2
0F81 9450      3805            subb    a,#0x50
0F83 EB        3806            mov     a,r3
0F84 6480      3807            xrl     a,#0x80
0F86 9480      3808            subb    a,#0x80
0F88 4000      3809            jc      L030024?
0F8A           3810   ;        main.c:911: waitms(25);
0F8A 900019    3811            mov     dptr,#0x0019
0F8D C002      3812            push    ar2
0F8F C003      3813            push    ar3
0F91 120000    3814            lcall   _waitms
0F94 D003      3815            pop     ar3
0F96 D002      3816            pop     ar2
0F98           3817   ;        main.c:912: servo_base = i;
0F98 904F88    3818            mov     dptr,#_servo_base
0F9B EA        3819            mov     a,r2
0F9C F0        3820            movx    @dptr,a
0F9D           3821   ;        main.c:910: for(i = 200; i >= 80; i-=5){
0F9D EA        3822            mov     a,r2
0F9E 24FB      3823            add     a,#0xfb
0FA0 FA        3824            mov     r2,a
0FA1 EB        3825            mov     a,r3
0FA2 34FF      3826            addc    a,#0xff
0FA4 FB        3827            mov     r3,a
0FA5 8000      3828            sjmp    L030021?
0FA7           3829   L030024?:
0FA7           3830   ;        main.c:914: waitms(500);
0FA7 9001F4    3831            mov     dptr,#0x01F4
0FAA 120000    3832            lcall   _waitms
0FAD           3833   ;        main.c:915: Magnet = 0;
0FAD C295      3834            clr     _P1_5
0FAF           3835   ;        main.c:916: waitms(500);
0FAF 9001F4    3836            mov     dptr,#0x01F4
0FB2 120000    3837            lcall   _waitms
0FB5           3838   ;        main.c:917: for (i = 100; i >=40 ; i-=10){
0FB5 7A64      3839            mov     r2,#0x64
0FB7 7B00      3840            mov     r3,#0x00
0FB9           3841   L030025?:
0FB9 C3        3842            clr     c
0FBA EA        3843            mov     a,r2
0FBB 9428      3844            subb    a,#0x28
0FBD EB        3845            mov     a,r3
0FBE 6480      3846            xrl     a,#0x80
0FC0 9480      3847            subb    a,#0x80
0FC2 4000      3848            jc      L030028?
0FC4           3849   ;        main.c:918: servo_arm = i; 
0FC4 904F48    3850            mov     dptr,#_servo_arm
0FC7 EA        3851            mov     a,r2
0FC8 F0        3852            movx    @dptr,a
0FC9           3853   ;        main.c:919: waitms(25);
0FC9 900019    3854            mov     dptr,#0x0019
0FCC C002      3855            push    ar2
0FCE C003      3856            push    ar3
0FD0 120000    3857            lcall   _waitms
0FD3 D003      3858            pop     ar3
0FD5 D002      3859            pop     ar2
0FD7           3860   ;        main.c:917: for (i = 100; i >=40 ; i-=10){
0FD7 EA        3861            mov     a,r2
0FD8 24F6      3862            add     a,#0xf6
0FDA FA        3863            mov     r2,a
0FDB EB        3864            mov     a,r3
0FDC 34FF      3865            addc    a,#0xff
0FDE FB        3866            mov     r3,a
0FDF 8000      3867            sjmp    L030025?
0FE1           3868   L030028?:
0FE1           3869   ;        main.c:921: waitms(500);
0FE1 9001F4    3870            mov     dptr,#0x01F4
0FE4 120000    3871            lcall   _waitms
0FE7           3872   ;        main.c:922: for (i = 80; i >= 40; i-=10){
0FE7 7A50      3873            mov     r2,#0x50
0FE9 7B00      3874            mov     r3,#0x00
0FEB           3875   L030029?:
0FEB C3        3876            clr     c
0FEC EA        3877            mov     a,r2
0FED 9428      3878            subb    a,#0x28
0FEF EB        3879            mov     a,r3
0FF0 6480      3880            xrl     a,#0x80
0FF2 9480      3881            subb    a,#0x80
0FF4 4000      3882            jc      L030032?
0FF6           3883   ;        main.c:923: servo_base = i; 
0FF6 904F88    3884            mov     dptr,#_servo_base
0FF9 EA        3885            mov     a,r2
0FFA F0        3886            movx    @dptr,a
0FFB           3887   ;        main.c:924: waitms(25);
0FFB 900019    3888            mov     dptr,#0x0019
0FFE C002      3889            push    ar2
1000 C003      3890            push    ar3
1002 120000    3891            lcall   _waitms
1005 D003      3892            pop     ar3
1007 D002      3893            pop     ar2
1009           3894   ;        main.c:922: for (i = 80; i >= 40; i-=10){
1009 EA        3895            mov     a,r2
100A 24F6      3896            add     a,#0xf6
100C FA        3897            mov     r2,a
100D EB        3898            mov     a,r3
100E 34FF      3899            addc    a,#0xff
1010 FB        3900            mov     r3,a
1011 8000      3901            sjmp    L030029?
1013           3902   L030032?:
1013           3903   ;        main.c:926: return;
1013 22        3904            ret
1014           3905   ;------------------------------------------------------------
1014           3906   ;Allocation info for local variables in function 'check_bound'
1014           3907   ;------------------------------------------------------------
1014           3908   ;d2                        Allocated with name '_check_bound_PARM_2'
1014           3909   ;d1                        Allocated to registers r2 r3 
1014           3910   ;------------------------------------------------------------
1014           3911   ;        main.c:929: int check_bound(int d1, int d2){
1014           3912   ;        -----------------------------------------
1014           3913   ;         function check_bound
1014           3914   ;        -----------------------------------------
1014           3915   _check_bound:
1014 AA82      3916            mov     r2,dpl
1016 AB83      3917            mov     r3,dph
1018           3918   ;        main.c:930: if(d1>10000||d2>10000)      return 1;
1018 C3        3919            clr     c
1019 7410      3920            mov     a,#0x10
101B 9A        3921            subb    a,r2
101C 74A7      3922            mov     a,#(0x27 ^ 0x80)
101E 8BF0      3923            mov     b,r3
1020 63F080    3924            xrl     b,#0x80
1023 95F0      3925            subb    a,b
1025 4000      3926            jc      L031001?
1027 7410      3927            mov     a,#0x10
1029 9590      3928            subb    a,_check_bound_PARM_2
102B 74A7      3929            mov     a,#(0x27 ^ 0x80)
102D 8591F0    3930            mov     b,(_check_bound_PARM_2 + 1)
1030 63F080    3931            xrl     b,#0x80
1033 95F0      3932            subb    a,b
1035 5000      3933            jnc     L031002?
1037           3934   L031001?:
1037 900001    3935            mov     dptr,#0x0001
103A           3936   ;        main.c:931: else return 0;
103A 22        3937            ret
103B           3938   L031002?:
103B 900000    3939            mov     dptr,#0x0000
103E 22        3940            ret
103F           3941   ;------------------------------------------------------------
103F           3942   ;Allocation info for local variables in function 'Init_all'
103F           3943   ;------------------------------------------------------------
103F           3944   ;------------------------------------------------------------
103F           3945   ;        main.c:934: void Init_all(){
103F           3946   ;        -----------------------------------------
103F           3947   ;         function Init_all
103F           3948   ;        -----------------------------------------
103F           3949   _Init_all:
103F           3950   ;        main.c:936: Set_Pin_Output(0x24);
103F 758224    3951            mov     dpl,#0x24
1042 120000    3952            lcall   _Set_Pin_Output
1045           3953   ;        main.c:937: Set_Pin_Output(0x23);
1045 758223    3954            mov     dpl,#0x23
1048 120000    3955            lcall   _Set_Pin_Output
104B           3956   ;        main.c:938: Set_Pin_Output(0x22);
104B 758222    3957            mov     dpl,#0x22
104E 120000    3958            lcall   _Set_Pin_Output
1051           3959   ;        main.c:939: Set_Pin_Output(0x21);
1051 758221    3960            mov     dpl,#0x21
1054 120000    3961            lcall   _Set_Pin_Output
1057           3962   ;        main.c:940: Set_Pin_Output(0x17);
1057 758217    3963            mov     dpl,#0x17
105A 120000    3964            lcall   _Set_Pin_Output
105D           3965   ;        main.c:941: Set_Pin_Output(0x16);
105D 758216    3966            mov     dpl,#0x16
1060 120000    3967            lcall   _Set_Pin_Output
1063           3968   ;        main.c:942: Set_Pin_Output(0x15);
1063 758215    3969            mov     dpl,#0x15
1066 120000    3970            lcall   _Set_Pin_Output
1069           3971   ;        main.c:943: Set_Pin_Output(0x10); // CS
1069 758210    3972            mov     dpl,#0x10
106C 120000    3973            lcall   _Set_Pin_Output
106F           3974   ;        main.c:945: Set_Pin_Input(0x30);
106F 758230    3975            mov     dpl,#0x30
1072 120000    3976            lcall   _Set_Pin_Input
1075           3977   ;        main.c:946: Set_Pin_Output(0x25); // CLK for Load
1075 758225    3978            mov     dpl,#0x25
1078 120000    3979            lcall   _Set_Pin_Output
107B           3980   ;        main.c:947: Set_Pin_Input(0x26);
107B 758226    3981            mov     dpl,#0x26
107E 120000    3982            lcall   _Set_Pin_Input
1081           3983   ;        main.c:949: Set_Pin_Input(0x33);   //ECHO pin
1081 758233    3984            mov     dpl,#0x33
1084 120000    3985            lcall   _Set_Pin_Input
1087           3986   ;        main.c:950: Set_Pin_Output(0x32);  // TRIGGER pin
1087 758232    3987            mov     dpl,#0x32
108A 120000    3988            lcall   _Set_Pin_Output
108D           3989   ;        main.c:952: InitPinADC(1,3);
108D 75E003    3990            mov     _InitPinADC_PARM_2,#0x03
1090 758201    3991            mov     dpl,#0x01
1093 120000    3992            lcall   _InitPinADC
1096           3993   ;        main.c:953: InitPinADC(1,4);
1096 75E004    3994            mov     _InitPinADC_PARM_2,#0x04
1099 758201    3995            mov     dpl,#0x01
109C 120000    3996            lcall   _InitPinADC
109F           3997   ;        main.c:954: InitADC();
109F 120000    3998            lcall   _InitADC
10A2           3999   ;        main.c:956: TMOD&=0b_1111_0000; 
10A2 5389F0    4000            anl     _TMOD,#0xF0
10A5           4001   ;        main.c:957: TMOD|=0b_0000_0001; 
10A5 438901    4002            orl     _TMOD,#0x01
10A8           4003   ;        main.c:958: TR0=0; 
10A8 C28C      4004            clr     _TR0
10AA           4005   ;        main.c:960: Servo_arm=0;
10AA C296      4006            clr     _P1_6
10AC           4007   ;        main.c:961: Servo_base=0;
10AC C297      4008            clr     _P1_7
10AE           4009   ;        main.c:962: Magnet = 0;
10AE C295      4010            clr     _P1_5
10B0           4011   ;        main.c:963: PD_SCK = 0;
10B0 C2A5      4012            clr     _P2_5
10B2           4013   ;        main.c:964: return;
10B2 22        4014            ret
10B3           4015   ;------------------------------------------------------------
10B3           4016   ;Allocation info for local variables in function 'Move_back_ms'
10B3           4017   ;------------------------------------------------------------
10B3           4018   ;ms                        Allocated to registers r2 r3 
10B3           4019   ;------------------------------------------------------------
10B3           4020   ;        main.c:967: void Move_back_ms(int ms){
10B3           4021   ;        -----------------------------------------
10B3           4022   ;         function Move_back_ms
10B3           4023   ;        -----------------------------------------
10B3           4024   _Move_back_ms:
10B3 AA82      4025            mov     r2,dpl
10B5 AB83      4026            mov     r3,dph
10B7           4027   ;        main.c:969: L_motor_dir = 1;
10B7 905008    4028            mov     dptr,#_L_motor_dir
10BA 7401      4029            mov     a,#0x01
10BC F0        4030            movx    @dptr,a
10BD           4031   ;        main.c:970: R_motor_dir = 1;
10BD 904FC8    4032            mov     dptr,#_R_motor_dir
10C0 7401      4033            mov     a,#0x01
10C2 F0        4034            movx    @dptr,a
10C3           4035   ;        main.c:972: pwm_left = 50;
10C3 905088    4036            mov     dptr,#_pwm_left
10C6 7432      4037            mov     a,#0x32
10C8 F0        4038            movx    @dptr,a
10C9           4039   ;        main.c:973: pwm_right = 50;
10C9 905048    4040            mov     dptr,#_pwm_right
10CC 7432      4041            mov     a,#0x32
10CE F0        4042            movx    @dptr,a
10CF           4043   ;        main.c:975: waitms(ms);
10CF 8A82      4044            mov     dpl,r2
10D1 8B83      4045            mov     dph,r3
10D3 120000    4046            lcall   _waitms
10D6           4047   ;        main.c:977: L_motor_dir = 0;
10D6 905008    4048            mov     dptr,#_L_motor_dir
10D9           4049   ;        main.c:978: R_motor_dir = 0;
10D9           4050   ;        main.c:979: pwm_left = 0;
10D9           4051   ;        main.c:980: pwm_right = 0;
10D9 E4        4052            clr     a
10DA F0        4053            movx    @dptr,a
10DB 904FC8    4054            mov     dptr,#_R_motor_dir
10DE F0        4055            movx    @dptr,a
10DF 905088    4056            mov     dptr,#_pwm_left
10E2 F0        4057            movx    @dptr,a
10E3 905048    4058            mov     dptr,#_pwm_right
10E6 F0        4059            movx    @dptr,a
10E7           4060   ;        main.c:981: return;
10E7 22        4061            ret
10E8           4062   ;------------------------------------------------------------
10E8           4063   ;Allocation info for local variables in function 'Right_angle'
10E8           4064   ;------------------------------------------------------------
10E8           4065   ;angle                     Allocated to registers r2 r3 
10E8           4066   ;------------------------------------------------------------
10E8           4067   ;        main.c:984: void Right_angle(int angle){
10E8           4068   ;        -----------------------------------------
10E8           4069   ;         function Right_angle
10E8           4070   ;        -----------------------------------------
10E8           4071   _Right_angle:
10E8 AA82      4072            mov     r2,dpl
10EA AB83      4073            mov     r3,dph
10EC           4074   ;        main.c:986: L_motor_dir = 1;
10EC 905008    4075            mov     dptr,#_L_motor_dir
10EF 7401      4076            mov     a,#0x01
10F1 F0        4077            movx    @dptr,a
10F2           4078   ;        main.c:987: R_motor_dir = 0;
10F2 904FC8    4079            mov     dptr,#_R_motor_dir
10F5 E4        4080            clr     a
10F6 F0        4081            movx    @dptr,a
10F7           4082   ;        main.c:988: pwm_left = 80;
10F7 905088    4083            mov     dptr,#_pwm_left
10FA 7450      4084            mov     a,#0x50
10FC F0        4085            movx    @dptr,a
10FD           4086   ;        main.c:989: pwm_right = 80 * pwm_corr;
10FD C002      4087            push    ar2
10FF C003      4088            push    ar3
1101 904D38    4089            mov     dptr,#_pwm_corr
1104 E0        4090            movx    a,@dptr
1105 C0E0      4091            push    acc
1107 A3        4092            inc     dptr
1108 E0        4093            movx    a,@dptr
1109 C0E0      4094            push    acc
110B A3        4095            inc     dptr
110C E0        4096            movx    a,@dptr
110D C0E0      4097            push    acc
110F A3        4098            inc     dptr
1110 E0        4099            movx    a,@dptr
1111 C0E0      4100            push    acc
1113 900000    4101            mov     dptr,#0x0000
1116 75F0A0    4102            mov     b,#0xA0
1119 7442      4103            mov     a,#0x42
111B 120000    4104            lcall   ___fsmul
111E AC82      4105            mov     r4,dpl
1120 AD83      4106            mov     r5,dph
1122 AEF0      4107            mov     r6,b
1124 FF        4108            mov     r7,a
1125 E581      4109            mov     a,sp
1127 24FC      4110            add     a,#0xfc
1129 F581      4111            mov     sp,a
112B 8C82      4112            mov     dpl,r4
112D 8D83      4113            mov     dph,r5
112F 8EF0      4114            mov     b,r6
1131 EF        4115            mov     a,r7
1132 120000    4116            lcall   ___fs2uchar
1135 E582      4117            mov     a,dpl
1137 D003      4118            pop     ar3
1139 D002      4119            pop     ar2
113B 905048    4120            mov     dptr,#_pwm_right
113E F0        4121            movx    @dptr,a
113F           4122   ;        main.c:991: waitms(angle);
113F 8A82      4123            mov     dpl,r2
1141 8B83      4124            mov     dph,r3
1143 120000    4125            lcall   _waitms
1146           4126   ;        main.c:993: L_motor_dir = 0;
1146 905008    4127            mov     dptr,#_L_motor_dir
1149           4128   ;        main.c:994: R_motor_dir = 0;
1149           4129   ;        main.c:995: pwm_left = 0;
1149           4130   ;        main.c:996: pwm_right = 0;
1149 E4        4131            clr     a
114A F0        4132            movx    @dptr,a
114B 904FC8    4133            mov     dptr,#_R_motor_dir
114E F0        4134            movx    @dptr,a
114F 905088    4135            mov     dptr,#_pwm_left
1152 F0        4136            movx    @dptr,a
1153 905048    4137            mov     dptr,#_pwm_right
1156 F0        4138            movx    @dptr,a
1157           4139   ;        main.c:997: return;
1157 22        4140            ret
1158           4141   ;------------------------------------------------------------
1158           4142   ;Allocation info for local variables in function 'Move_forward'
1158           4143   ;------------------------------------------------------------
1158           4144   ;------------------------------------------------------------
1158           4145   ;        main.c:1000: void Move_forward(){
1158           4146   ;        -----------------------------------------
1158           4147   ;         function Move_forward
1158           4148   ;        -----------------------------------------
1158           4149   _Move_forward:
1158           4150   ;        main.c:1002: L_motor_dir = 0;
1158 905008    4151            mov     dptr,#_L_motor_dir
115B           4152   ;        main.c:1003: R_motor_dir = 0;
115B E4        4153            clr     a
115C F0        4154            movx    @dptr,a
115D 904FC8    4155            mov     dptr,#_R_motor_dir
1160 F0        4156            movx    @dptr,a
1161           4157   ;        main.c:1004: pwm_left = 60;
1161 905088    4158            mov     dptr,#_pwm_left
1164 743C      4159            mov     a,#0x3C
1166 F0        4160            movx    @dptr,a
1167           4161   ;        main.c:1005: pwm_right = 60 * pwm_corr;
1167 904D38    4162            mov     dptr,#_pwm_corr
116A E0        4163            movx    a,@dptr
116B C0E0      4164            push    acc
116D A3        4165            inc     dptr
116E E0        4166            movx    a,@dptr
116F C0E0      4167            push    acc
1171 A3        4168            inc     dptr
1172 E0        4169            movx    a,@dptr
1173 C0E0      4170            push    acc
1175 A3        4171            inc     dptr
1176 E0        4172            movx    a,@dptr
1177 C0E0      4173            push    acc
1179 900000    4174            mov     dptr,#0x0000
117C 75F070    4175            mov     b,#0x70
117F 7442      4176            mov     a,#0x42
1181 120000    4177            lcall   ___fsmul
1184 AA82      4178            mov     r2,dpl
1186 AB83      4179            mov     r3,dph
1188 ACF0      4180            mov     r4,b
118A FD        4181            mov     r5,a
118B E581      4182            mov     a,sp
118D 24FC      4183            add     a,#0xfc
118F F581      4184            mov     sp,a
1191 8A82      4185            mov     dpl,r2
1193 8B83      4186            mov     dph,r3
1195 8CF0      4187            mov     b,r4
1197 ED        4188            mov     a,r5
1198 120000    4189            lcall   ___fs2uchar
119B E582      4190            mov     a,dpl
119D 905048    4191            mov     dptr,#_pwm_right
11A0 F0        4192            movx    @dptr,a
11A1           4193   ;        main.c:1006: return;
11A1 22        4194            ret
11A2           4195   ;------------------------------------------------------------
11A2           4196   ;Allocation info for local variables in function 'simple_rand'
11A2           4197   ;------------------------------------------------------------
11A2           4198   ;------------------------------------------------------------
11A2           4199   ;        main.c:1009: unsigned int simple_rand() {
11A2           4200   ;        -----------------------------------------
11A2           4201   ;         function simple_rand
11A2           4202   ;        -----------------------------------------
11A2           4203   _simple_rand:
11A2           4204   ;        main.c:1010: seed = (seed * 25173 + 13849) & 0xFFFF;  
11A2 904D78    4205            mov     dptr,#_seed
11A5 E0        4206            movx    a,@dptr
11A6 F500      4207            mov     __mulint_PARM_2,a
11A8 A3        4208            inc     dptr
11A9 E0        4209            movx    a,@dptr
11AA F501      4210            mov     (__mulint_PARM_2 + 1),a
11AC 906255    4211            mov     dptr,#0x6255
11AF 120000    4212            lcall   __mulint
11B2 E582      4213            mov     a,dpl
11B4 8583F0    4214            mov     b,dph
11B7 904D78    4215            mov     dptr,#_seed
11BA 2419      4216            add     a,#0x19
11BC F0        4217            movx    @dptr,a
11BD 7436      4218            mov     a,#0x36
11BF 35F0      4219            addc    a,b
11C1 A3        4220            inc     dptr
11C2 F0        4221            movx    @dptr,a
11C3           4222   ;        main.c:1011: return seed;     
11C3 904D78    4223            mov     dptr,#_seed
11C6 E0        4224            movx    a,@dptr
11C7 FA        4225            mov     r2,a
11C8 A3        4226            inc     dptr
11C9 E0        4227            movx    a,@dptr
11CA 8A82      4228            mov     dpl,r2
11CC F583      4229            mov     dph,a
11CE 22        4230            ret
11CF           4231   ;------------------------------------------------------------
11CF           4232   ;Allocation info for local variables in function 'get_random_90_250'
11CF           4233   ;------------------------------------------------------------
11CF           4234   ;------------------------------------------------------------
11CF           4235   ;        main.c:1014: unsigned int get_random_90_250() {
11CF           4236   ;        -----------------------------------------
11CF           4237   ;         function get_random_90_250
11CF           4238   ;        -----------------------------------------
11CF           4239   _get_random_90_250:
11CF           4240   ;        main.c:1015: return (simple_rand() % (250 - 85 + 1)) + 85;
11CF 120000    4241            lcall   _simple_rand
11D2 7500A6    4242            mov     __moduint_PARM_2,#0xA6
11D5 E4        4243            clr     a
11D6 F501      4244            mov     (__moduint_PARM_2 + 1),a
11D8 120000    4245            lcall   __moduint
11DB E582      4246            mov     a,dpl
11DD 8583F0    4247            mov     b,dph
11E0 2455      4248            add     a,#0x55
11E2 F582      4249            mov     dpl,a
11E4 E4        4250            clr     a
11E5 35F0      4251            addc    a,b
11E7 F583      4252            mov     dph,a
11E9 22        4253            ret
11EA           4254   ;------------------------------------------------------------
11EA           4255   ;Allocation info for local variables in function 'Read_angle'
11EA           4256   ;------------------------------------------------------------
11EA           4257   ;sloc0                     Allocated with name '_Read_angle_sloc0_1_0'
11EA           4258   ;i                         Allocated with name '_Read_angle_i_1_210'
11EA           4259   ;mag_x                     Allocated with name '_Read_angle_mag_x_1_210'
11EA           4260   ;mag_y                     Allocated with name '_Read_angle_mag_y_1_210'
11EA           4261   ;sum_x                     Allocated with name '_Read_angle_sum_x_1_210'
11EA           4262   ;sum_y                     Allocated with name '_Read_angle_sum_y_1_210'
11EA           4263   ;angle                     Allocated with name '_Read_angle_angle_1_210'
11EA           4264   ;------------------------------------------------------------
11EA           4265   ;        main.c:1018: float Read_angle(void)
11EA           4266   ;        -----------------------------------------
11EA           4267   ;         function Read_angle
11EA           4268   ;        -----------------------------------------
11EA           4269   _Read_angle:
11EA           4270   ;        main.c:1025: sum_x = 0.0; sum_y = 0.0;
11EA 90CFC8    4271            mov     dptr,#_Read_angle_sum_x_1_210
11ED E4        4272            clr     a
11EE F0        4273            movx    @dptr,a
11EF A3        4274            inc     dptr
11F0 F0        4275            movx    @dptr,a
11F1 A3        4276            inc     dptr
11F2 F0        4277            movx    @dptr,a
11F3 A3        4278            inc     dptr
11F4 F0        4279            movx    @dptr,a
11F5 90D018    4280            mov     dptr,#_Read_angle_sum_y_1_210
11F8 F0        4281            movx    @dptr,a
11F9 A3        4282            inc     dptr
11FA E4        4283            clr     a
11FB F0        4284            movx    @dptr,a
11FC A3        4285            inc     dptr
11FD F0        4286            movx    @dptr,a
11FE A3        4287            inc     dptr
11FF F0        4288            movx    @dptr,a
1200           4289   ;        main.c:1028: for (i = 0; i < 10; i++){
1200 7A00      4290            mov     r2,#0x00
1202           4291   L038005?:
1202 BA0A68    4292            cjne    r2,#0x0A,L038016?
1205           4293   L038016?:
1205 4000      4294            jc      L038017?
1207 020000    4295            ljmp    L038008?
120A           4296   L038017?:
120A           4297   ;        main.c:1029: BMM150_Read_Data(&mag_x, &mag_y);
120A 752878    4298            mov     _BMM150_Read_Data_PARM_2,#_Read_angle_mag_y_1_210
120D 7529CF    4299            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_Read_angle_mag_y_1_210 >> 8)
1210 752A00    4300            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
1213 90CF28    4301            mov     dptr,#_Read_angle_mag_x_1_210
1216 75F000    4302            mov     b,#0x00
1219 C002      4303            push    ar2
121B 120000    4304            lcall   _BMM150_Read_Data
121E           4305   ;        main.c:1030: sum_x += (float)mag_x; 
121E 90CF28    4306            mov     dptr,#_Read_angle_mag_x_1_210
1221 E0        4307            movx    a,@dptr
1222 FB        4308            mov     r3,a
1223 A3        4309            inc     dptr
1224 E0        4310            movx    a,@dptr
1225 FC        4311            mov     r4,a
1226 8B82      4312            mov     dpl,r3
1228 8C83      4313            mov     dph,r4
122A 120000    4314            lcall   ___sint2fs
122D 858218    4315            mov     _Read_angle_sloc0_1_0,dpl
1230 858319    4316            mov     (_Read_angle_sloc0_1_0 + 1),dph
1233 85F01A    4317            mov     (_Read_angle_sloc0_1_0 + 2),b
1236 F51B      4318            mov     (_Read_angle_sloc0_1_0 + 3),a
1238 90CFC8    4319            mov     dptr,#_Read_angle_sum_x_1_210
123B E0        4320            movx    a,@dptr
123C FF        4321            mov     r7,a
123D A3        4322            inc     dptr
123E E0        4323            movx    a,@dptr
123F F8        4324            mov     r0,a
1240 A3        4325            inc     dptr
1241 E0        4326            movx    a,@dptr
1242 F9        4327            mov     r1,a
1243 A3        4328            inc     dptr
1244 E0        4329            movx    a,@dptr
1245 FB        4330            mov     r3,a
1246 C018      4331            push    _Read_angle_sloc0_1_0
1248 C019      4332            push    (_Read_angle_sloc0_1_0 + 1)
124A C01A      4333            push    (_Read_angle_sloc0_1_0 + 2)
124C C01B      4334            push    (_Read_angle_sloc0_1_0 + 3)
124E 8F82      4335            mov     dpl,r7
1250 8883      4336            mov     dph,r0
1252 89F0      4337            mov     b,r1
1254 EB        4338            mov     a,r3
1255 120000    4339            lcall   ___fsadd
1258 AB82      4340            mov     r3,dpl
125A AC83      4341            mov     r4,dph
125C ADF0      4342            mov     r5,b
125E FE        4343            mov     r6,a
125F E581      4344            mov     a,sp
1261 24FC      4345            add     a,#0xfc
1263 F581      4346            mov     sp,a
1265 90CFC8    4347            mov     dptr,#_Read_angle_sum_x_1_210
1268 EB        4348            mov     a,r3
1269 F0        4349            movx    @dptr,a
126A A3        4350            inc     dptr
126B EC        4351            mov     a,r4
126C F0        4352            movx    @dptr,a
126D A3        4353            inc     dptr
126E ED        4354            mov     a,r5
126F F0        4355            movx    @dptr,a
1270 A3        4356            inc     dptr
1271 EE        4357            mov     a,r6
1272 F0        4358            movx    @dptr,a
1273           4359   ;        main.c:1031: sum_y += (float)mag_y; 
1273 90CF78    4360            mov     dptr,#_Read_angle_mag_y_1_210
1276 E0        4361            movx    a,@dptr
1277 FB        4362            mov     r3,a
1278 A3        4363            inc     dptr
1279 E0        4364            movx    a,@dptr
127A FC        4365            mov     r4,a
127B 8B82      4366            mov     dpl,r3
127D 8C83      4367            mov     dph,r4
127F 120000    4368            lcall   ___sint2fs
1282 858218    4369            mov     _Read_angle_sloc0_1_0,dpl
1285 858319    4370            mov     (_Read_angle_sloc0_1_0 + 1),dph
1288 85F01A    4371            mov     (_Read_angle_sloc0_1_0 + 2),b
128B F51B      4372            mov     (_Read_angle_sloc0_1_0 + 3),a
128D 90D018    4373            mov     dptr,#_Read_angle_sum_y_1_210
1290 E0        4374            movx    a,@dptr
1291 FF        4375            mov     r7,a
1292 A3        4376            inc     dptr
1293 E0        4377            movx    a,@dptr
1294 F8        4378            mov     r0,a
1295 A3        4379            inc     dptr
1296 E0        4380            movx    a,@dptr
1297 F9        4381            mov     r1,a
1298 A3        4382            inc     dptr
1299 E0        4383            movx    a,@dptr
129A FB        4384            mov     r3,a
129B C018      4385            push    _Read_angle_sloc0_1_0
129D C019      4386            push    (_Read_angle_sloc0_1_0 + 1)
129F C01A      4387            push    (_Read_angle_sloc0_1_0 + 2)
12A1 C01B      4388            push    (_Read_angle_sloc0_1_0 + 3)
12A3 8F82      4389            mov     dpl,r7
12A5 8883      4390            mov     dph,r0
12A7 89F0      4391            mov     b,r1
12A9 EB        4392            mov     a,r3
12AA 120000    4393            lcall   ___fsadd
12AD AB82      4394            mov     r3,dpl
12AF AC83      4395            mov     r4,dph
12B1 ADF0      4396            mov     r5,b
12B3 FE        4397            mov     r6,a
12B4 E581      4398            mov     a,sp
12B6 24FC      4399            add     a,#0xfc
12B8 F581      4400            mov     sp,a
12BA 90D018    4401            mov     dptr,#_Read_angle_sum_y_1_210
12BD EB        4402            mov     a,r3
12BE F0        4403            movx    @dptr,a
12BF A3        4404            inc     dptr
12C0 EC        4405            mov     a,r4
12C1 F0        4406            movx    @dptr,a
12C2 A3        4407            inc     dptr
12C3 ED        4408            mov     a,r5
12C4 F0        4409            movx    @dptr,a
12C5 A3        4410            inc     dptr
12C6 EE        4411            mov     a,r6
12C7 F0        4412            movx    @dptr,a
12C8           4413   ;        main.c:1032: Timer3us(1);
12C8 758201    4414            mov     dpl,#0x01
12CB 120000    4415            lcall   _Timer3us
12CE D002      4416            pop     ar2
12D0           4417   ;        main.c:1028: for (i = 0; i < 10; i++){
12D0 0A        4418            inc     r2
12D1 020000    4419            ljmp    L038005?
12D4           4420   L038008?:
12D4           4421   ;        main.c:1034: angle = atan2f(sum_y, sum_x) * 180.0 / M_PI;
12D4 90D018    4422            mov     dptr,#_Read_angle_sum_y_1_210
12D7 E0        4423            movx    a,@dptr
12D8 FA        4424            mov     r2,a
12D9 A3        4425            inc     dptr
12DA E0        4426            movx    a,@dptr
12DB FB        4427            mov     r3,a
12DC A3        4428            inc     dptr
12DD E0        4429            movx    a,@dptr
12DE FC        4430            mov     r4,a
12DF A3        4431            inc     dptr
12E0 E0        4432            movx    a,@dptr
12E1 FD        4433            mov     r5,a
12E2 90CFC8    4434            mov     dptr,#_Read_angle_sum_x_1_210
12E5 E0        4435            movx    a,@dptr
12E6 F500      4436            mov     _atan2f_PARM_2,a
12E8 A3        4437            inc     dptr
12E9 E0        4438            movx    a,@dptr
12EA F501      4439            mov     (_atan2f_PARM_2 + 1),a
12EC A3        4440            inc     dptr
12ED E0        4441            movx    a,@dptr
12EE F502      4442            mov     (_atan2f_PARM_2 + 2),a
12F0 A3        4443            inc     dptr
12F1 E0        4444            movx    a,@dptr
12F2 F503      4445            mov     (_atan2f_PARM_2 + 3),a
12F4 8A82      4446            mov     dpl,r2
12F6 8B83      4447            mov     dph,r3
12F8 8CF0      4448            mov     b,r4
12FA ED        4449            mov     a,r5
12FB 120000    4450            lcall   _atan2f
12FE AA82      4451            mov     r2,dpl
1300 AB83      4452            mov     r3,dph
1302 ACF0      4453            mov     r4,b
1304 FD        4454            mov     r5,a
1305 C002      4455            push    ar2
1307 C003      4456            push    ar3
1309 C004      4457            push    ar4
130B C005      4458            push    ar5
130D 900000    4459            mov     dptr,#0x0000
1310 75F034    4460            mov     b,#0x34
1313 7443      4461            mov     a,#0x43
1315 120000    4462            lcall   ___fsmul
1318 AA82      4463            mov     r2,dpl
131A AB83      4464            mov     r3,dph
131C ACF0      4465            mov     r4,b
131E FD        4466            mov     r5,a
131F E581      4467            mov     a,sp
1321 24FC      4468            add     a,#0xfc
1323 F581      4469            mov     sp,a
1325 74DB      4470            mov     a,#0xDB
1327 C0E0      4471            push    acc
1329 740F      4472            mov     a,#0x0F
132B C0E0      4473            push    acc
132D 7449      4474            mov     a,#0x49
132F C0E0      4475            push    acc
1331 7440      4476            mov     a,#0x40
1333 C0E0      4477            push    acc
1335 8A82      4478            mov     dpl,r2
1337 8B83      4479            mov     dph,r3
1339 8CF0      4480            mov     b,r4
133B ED        4481            mov     a,r5
133C 120000    4482            lcall   ___fsdiv
133F AA82      4483            mov     r2,dpl
1341 AB83      4484            mov     r3,dph
1343 ACF0      4485            mov     r4,b
1345 FD        4486            mov     r5,a
1346 E581      4487            mov     a,sp
1348 24FC      4488            add     a,#0xfc
134A F581      4489            mov     sp,a
134C 90D068    4490            mov     dptr,#_Read_angle_angle_1_210
134F EA        4491            mov     a,r2
1350 F0        4492            movx    @dptr,a
1351 A3        4493            inc     dptr
1352 EB        4494            mov     a,r3
1353 F0        4495            movx    @dptr,a
1354 A3        4496            inc     dptr
1355 EC        4497            mov     a,r4
1356 F0        4498            movx    @dptr,a
1357 A3        4499            inc     dptr
1358 ED        4500            mov     a,r5
1359 F0        4501            movx    @dptr,a
135A           4502   ;        main.c:1035: if (angle < 0.0) angle += 360.0; 
135A C002      4503            push    ar2
135C C003      4504            push    ar3
135E C004      4505            push    ar4
1360 C005      4506            push    ar5
1362 E4        4507            clr     a
1363 C0E0      4508            push    acc
1365 C0E0      4509            push    acc
1367 C0E0      4510            push    acc
1369 C0E0      4511            push    acc
136B 8A82      4512            mov     dpl,r2
136D 8B83      4513            mov     dph,r3
136F 8CF0      4514            mov     b,r4
1371 ED        4515            mov     a,r5
1372 120000    4516            lcall   ___fslt
1375 AE82      4517            mov     r6,dpl
1377 E581      4518            mov     a,sp
1379 24FC      4519            add     a,#0xfc
137B F581      4520            mov     sp,a
137D D005      4521            pop     ar5
137F D004      4522            pop     ar4
1381 D003      4523            pop     ar3
1383 D002      4524            pop     ar2
1385 EE        4525            mov     a,r6
1386 6000      4526            jz      L038002?
1388 E4        4527            clr     a
1389 C0E0      4528            push    acc
138B C0E0      4529            push    acc
138D 74B4      4530            mov     a,#0xB4
138F C0E0      4531            push    acc
1391 7443      4532            mov     a,#0x43
1393 C0E0      4533            push    acc
1395 8A82      4534            mov     dpl,r2
1397 8B83      4535            mov     dph,r3
1399 8CF0      4536            mov     b,r4
139B ED        4537            mov     a,r5
139C 120000    4538            lcall   ___fsadd
139F AA82      4539            mov     r2,dpl
13A1 AB83      4540            mov     r3,dph
13A3 ACF0      4541            mov     r4,b
13A5 FD        4542            mov     r5,a
13A6 E581      4543            mov     a,sp
13A8 24FC      4544            add     a,#0xfc
13AA F581      4545            mov     sp,a
13AC 90D068    4546            mov     dptr,#_Read_angle_angle_1_210
13AF EA        4547            mov     a,r2
13B0 F0        4548            movx    @dptr,a
13B1 A3        4549            inc     dptr
13B2 EB        4550            mov     a,r3
13B3 F0        4551            movx    @dptr,a
13B4 A3        4552            inc     dptr
13B5 EC        4553            mov     a,r4
13B6 F0        4554            movx    @dptr,a
13B7 A3        4555            inc     dptr
13B8 ED        4556            mov     a,r5
13B9 F0        4557            movx    @dptr,a
13BA           4558   L038002?:
13BA           4559   ;        main.c:1036: if (angle > 360.0) angle -= 360.0; 
13BA 90D068    4560            mov     dptr,#_Read_angle_angle_1_210
13BD E0        4561            movx    a,@dptr
13BE FA        4562            mov     r2,a
13BF A3        4563            inc     dptr
13C0 E0        4564            movx    a,@dptr
13C1 FB        4565            mov     r3,a
13C2 A3        4566            inc     dptr
13C3 E0        4567            movx    a,@dptr
13C4 FC        4568            mov     r4,a
13C5 A3        4569            inc     dptr
13C6 E0        4570            movx    a,@dptr
13C7 FD        4571            mov     r5,a
13C8 C002      4572            push    ar2
13CA C003      4573            push    ar3
13CC C004      4574            push    ar4
13CE C005      4575            push    ar5
13D0 E4        4576            clr     a
13D1 C0E0      4577            push    acc
13D3 C0E0      4578            push    acc
13D5 74B4      4579            mov     a,#0xB4
13D7 C0E0      4580            push    acc
13D9 7443      4581            mov     a,#0x43
13DB C0E0      4582            push    acc
13DD 8A82      4583            mov     dpl,r2
13DF 8B83      4584            mov     dph,r3
13E1 8CF0      4585            mov     b,r4
13E3 ED        4586            mov     a,r5
13E4 120000    4587            lcall   ___fsgt
13E7 AE82      4588            mov     r6,dpl
13E9 E581      4589            mov     a,sp
13EB 24FC      4590            add     a,#0xfc
13ED F581      4591            mov     sp,a
13EF D005      4592            pop     ar5
13F1 D004      4593            pop     ar4
13F3 D003      4594            pop     ar3
13F5 D002      4595            pop     ar2
13F7 EE        4596            mov     a,r6
13F8 6000      4597            jz      L038004?
13FA E4        4598            clr     a
13FB C0E0      4599            push    acc
13FD C0E0      4600            push    acc
13FF 74B4      4601            mov     a,#0xB4
1401 C0E0      4602            push    acc
1403 7443      4603            mov     a,#0x43
1405 C0E0      4604            push    acc
1407 8A82      4605            mov     dpl,r2
1409 8B83      4606            mov     dph,r3
140B 8CF0      4607            mov     b,r4
140D ED        4608            mov     a,r5
140E 120000    4609            lcall   ___fssub
1411 AA82      4610            mov     r2,dpl
1413 AB83      4611            mov     r3,dph
1415 ACF0      4612            mov     r4,b
1417 FD        4613            mov     r5,a
1418 E581      4614            mov     a,sp
141A 24FC      4615            add     a,#0xfc
141C F581      4616            mov     sp,a
141E 90D068    4617            mov     dptr,#_Read_angle_angle_1_210
1421 EA        4618            mov     a,r2
1422 F0        4619            movx    @dptr,a
1423 A3        4620            inc     dptr
1424 EB        4621            mov     a,r3
1425 F0        4622            movx    @dptr,a
1426 A3        4623            inc     dptr
1427 EC        4624            mov     a,r4
1428 F0        4625            movx    @dptr,a
1429 A3        4626            inc     dptr
142A ED        4627            mov     a,r5
142B F0        4628            movx    @dptr,a
142C           4629   L038004?:
142C           4630   ;        main.c:1037: return angle; 
142C 90D068    4631            mov     dptr,#_Read_angle_angle_1_210
142F E0        4632            movx    a,@dptr
1430 FA        4633            mov     r2,a
1431 A3        4634            inc     dptr
1432 E0        4635            movx    a,@dptr
1433 FB        4636            mov     r3,a
1434 A3        4637            inc     dptr
1435 E0        4638            movx    a,@dptr
1436 FC        4639            mov     r4,a
1437 A3        4640            inc     dptr
1438 E0        4641            movx    a,@dptr
1439 8A82      4642            mov     dpl,r2
143B 8B83      4643            mov     dph,r3
143D 8CF0      4644            mov     b,r4
143F 22        4645            ret
1440           4646   ;------------------------------------------------------------
1440           4647   ;Allocation info for local variables in function 'Auto_mode_slave'
1440           4648   ;------------------------------------------------------------
1440           4649   ;sloc0                     Allocated with name '_Auto_mode_slave_sloc0_1_0'
1440           4650   ;count                     Allocated with name '_Auto_mode_slave_count_1_212'
1440           4651   ;command                   Allocated with name '_Auto_mode_slave_command_1_212'
1440           4652   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_212'
1440           4653   ;bound                     Allocated with name '_Auto_mode_slave_bound_1_212'
1440           4654   ;c                         Allocated with name '_Auto_mode_slave_c_1_212'
1440           4655   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_212'
1440           4656   ;angle                     Allocated with name '_Auto_mode_slave_angle_1_212'
1440           4657   ;------------------------------------------------------------
1440           4658   ;        main.c:1040: void Auto_mode_slave(){
1440           4659   ;        -----------------------------------------
1440           4660   ;         function Auto_mode_slave
1440           4661   ;        -----------------------------------------
1440           4662   _Auto_mode_slave:
1440           4663   ;        main.c:1043: xdata int state_res = 1;
1440 90D118    4664            mov     dptr,#_Auto_mode_slave_state_res_1_212
1443 7401      4665            mov     a,#0x01
1445 F0        4666            movx    @dptr,a
1446 E4        4667            clr     a
1447 A3        4668            inc     dptr
1448 F0        4669            movx    @dptr,a
1449           4670   ;        main.c:1049: curr_angle = Read_angle();
1449 120000    4671            lcall   _Read_angle
144C AA82      4672            mov     r2,dpl
144E AB83      4673            mov     r3,dph
1450 ACF0      4674            mov     r4,b
1452 FD        4675            mov     r5,a
1453 904CF8    4676            mov     dptr,#_curr_angle
1456 EA        4677            mov     a,r2
1457 F0        4678            movx    @dptr,a
1458 A3        4679            inc     dptr
1459 EB        4680            mov     a,r3
145A F0        4681            movx    @dptr,a
145B A3        4682            inc     dptr
145C EC        4683            mov     a,r4
145D F0        4684            movx    @dptr,a
145E A3        4685            inc     dptr
145F ED        4686            mov     a,r5
1460 F0        4687            movx    @dptr,a
1461           4688   ;        main.c:1051: while(count < 5 && state_res){
1461 E4        4689            clr     a
1462 F568      4690            mov     _Auto_mode_slave_sloc0_1_0,a
1464 F569      4691            mov     (_Auto_mode_slave_sloc0_1_0 + 1),a
1466           4692   L039018?:
1466 C3        4693            clr     c
1467 E568      4694            mov     a,_Auto_mode_slave_sloc0_1_0
1469 9405      4695            subb    a,#0x05
146B E569      4696            mov     a,(_Auto_mode_slave_sloc0_1_0 + 1)
146D 6480      4697            xrl     a,#0x80
146F 9480      4698            subb    a,#0x80
1471 4000      4699            jc      L039046?
1473 020000    4700            ljmp    L039020?
1476           4701   L039046?:
1476 90D118    4702            mov     dptr,#_Auto_mode_slave_state_res_1_212
1479 E0        4703            movx    a,@dptr
147A FC        4704            mov     r4,a
147B A3        4705            inc     dptr
147C E0        4706            movx    a,@dptr
147D FD        4707            mov     r5,a
147E 4C        4708            orl     a,r4
147F 7000      4709            jnz     L039047?
1481 020000    4710            ljmp    L039020?
1484           4711   L039047?:
1484           4712   ;        main.c:1053: if(RXU1()){
1484 C004      4713            push    ar4
1486 C005      4714            push    ar5
1488 120000    4715            lcall   _RXU1
148B D005      4716            pop     ar5
148D D004      4717            pop     ar4
148F 4000      4718            jc      L039048?
1491 020000    4719            ljmp    L039012?
1494           4720   L039048?:
1494           4721   ;        main.c:1054: c=getchar1();      
1494 C004      4722            push    ar4
1496 C005      4723            push    ar5
1498 120000    4724            lcall   _getchar1
149B AE82      4725            mov     r6,dpl
149D D005      4726            pop     ar5
149F D004      4727            pop     ar4
14A1           4728   ;        main.c:1055: if(c=='!'){
14A1 BE2128    4729            cjne    r6,#0x21,L039049?
14A4 8000      4730            sjmp    L039050?
14A6           4731   L039049?:
14A6 020000    4732            ljmp    L039009?
14A9           4733   L039050?:
14A9           4734   ;        main.c:1056: getstr1(buff, sizeof(buff)-1);
14A9 75D813    4735            mov     _getstr1_PARM_2,#0x13
14AC 905548    4736            mov     dptr,#_buff
14AF 75F040    4737            mov     b,#0x40
14B2 120000    4738            lcall   _getstr1
14B5           4739   ;        main.c:1057: if(strlen(buff)==11){
14B5 905548    4740            mov     dptr,#_buff
14B8 75F040    4741            mov     b,#0x40
14BB 120000    4742            lcall   _strlen
14BE AF82      4743            mov     r7,dpl
14C0 AA83      4744            mov     r2,dph
14C2 BF0B28    4745            cjne    r7,#0x0B,L039051?
14C5 BA0028    4746            cjne    r2,#0x00,L039051?
14C8 8000      4747            sjmp    L039052?
14CA           4748   L039051?:
14CA 020000    4749            ljmp    L039012?
14CD           4750   L039052?:
14CD           4751   ;        main.c:1058: printf("master_messgae_auto_mode: %s\r\n", buff);
14CD 7448      4752            mov     a,#_buff
14CF C0E0      4753            push    acc
14D1 7455      4754            mov     a,#(_buff >> 8)
14D3 C0E0      4755            push    acc
14D5 7440      4756            mov     a,#0x40
14D7 C0E0      4757            push    acc
14D9 74A8      4758            mov     a,#__str_5
14DB C0E0      4759            push    acc
14DD 7412      4760            mov     a,#(__str_5 >> 8)
14DF C0E0      4761            push    acc
14E1 7480      4762            mov     a,#0x80
14E3 C0E0      4763            push    acc
14E5 120000    4764            lcall   _printf
14E8 E581      4765            mov     a,sp
14EA 24FA      4766            add     a,#0xfa
14EC F581      4767            mov     sp,a
14EE           4768   ;        main.c:1059: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
14EE 74B8      4769            mov     a,#_Auto_mode_slave_command_1_212
14F0 C0E0      4770            push    acc
14F2 74D0      4771            mov     a,#(_Auto_mode_slave_command_1_212 >> 8)
14F4 C0E0      4772            push    acc
14F6 E4        4773            clr     a
14F7 C0E0      4774            push    acc
14F9 7468      4775            mov     a,#_Auto_mode_slave_dummy_1_212
14FB C0E0      4776            push    acc
14FD 74D1      4777            mov     a,#(_Auto_mode_slave_dummy_1_212 >> 8)
14FF C0E0      4778            push    acc
1501 E4        4779            clr     a
1502 C0E0      4780            push    acc
1504 7468      4781            mov     a,#_Auto_mode_slave_dummy_1_212
1506 C0E0      4782            push    acc
1508 74D1      4783            mov     a,#(_Auto_mode_slave_dummy_1_212 >> 8)
150A C0E0      4784            push    acc
150C E4        4785            clr     a
150D C0E0      4786            push    acc
150F 7468      4787            mov     a,#_Auto_mode_slave_dummy_1_212
1511 C0E0      4788            push    acc
1513 74D1      4789            mov     a,#(_Auto_mode_slave_dummy_1_212 >> 8)
1515 C0E0      4790            push    acc
1517 E4        4791            clr     a
1518 C0E0      4792            push    acc
151A 74E8      4793            mov     a,#__str_6
151C C0E0      4794            push    acc
151E 7412      4795            mov     a,#(__str_6 >> 8)
1520 C0E0      4796            push    acc
1522 7480      4797            mov     a,#0x80
1524 C0E0      4798            push    acc
1526 7448      4799            mov     a,#_buff
1528 C0E0      4800            push    acc
152A 7455      4801            mov     a,#(_buff >> 8)
152C C0E0      4802            push    acc
152E 7440      4803            mov     a,#0x40
1530 C0E0      4804            push    acc
1532 120000    4805            lcall   _sscanf
1535 E581      4806            mov     a,sp
1537 24EE      4807            add     a,#0xee
1539 F581      4808            mov     sp,a
153B           4809   ;        main.c:1060: if(command) state_res = 1;
153B 90D0B8    4810            mov     dptr,#_Auto_mode_slave_command_1_212
153E E0        4811            movx    a,@dptr
153F FF        4812            mov     r7,a
1540 A3        4813            inc     dptr
1541 E0        4814            movx    a,@dptr
1542 FA        4815            mov     r2,a
1543 4F        4816            orl     a,r7
1544 6000      4817            jz      L039002?
1546 90D118    4818            mov     dptr,#_Auto_mode_slave_state_res_1_212
1549 7401      4819            mov     a,#0x01
154B F0        4820            movx    @dptr,a
154C E4        4821            clr     a
154D A3        4822            inc     dptr
154E F0        4823            movx    @dptr,a
154F 020000    4824            ljmp    L039012?
1552           4825   L039002?:
1552           4826   ;        main.c:1061: else state_res = 0;
1552 90D118    4827            mov     dptr,#_Auto_mode_slave_state_res_1_212
1555 E4        4828            clr     a
1556 F0        4829            movx    @dptr,a
1557 A3        4830            inc     dptr
1558 F0        4831            movx    @dptr,a
1559 8000      4832            sjmp    L039012?
155B           4833   L039009?:
155B           4834   ;        main.c:1064: else if(c=='@'){
155B BE40E8    4835            cjne    r6,#0x40,L039012?
155E           4836   ;        main.c:1065: sprintf(buff, "%01d,%02d,%ld,%05d,%03d\n", state_res, count,freq100, 0, (int)curr_angle);
155E 904CF8    4837            mov     dptr,#_curr_angle
1561 E0        4838            movx    a,@dptr
1562 FA        4839            mov     r2,a
1563 A3        4840            inc     dptr
1564 E0        4841            movx    a,@dptr
1565 FB        4842            mov     r3,a
1566 A3        4843            inc     dptr
1567 E0        4844            movx    a,@dptr
1568 FE        4845            mov     r6,a
1569 A3        4846            inc     dptr
156A E0        4847            movx    a,@dptr
156B 8A82      4848            mov     dpl,r2
156D 8B83      4849            mov     dph,r3
156F 8EF0      4850            mov     b,r6
1571 C004      4851            push    ar4
1573 C005      4852            push    ar5
1575 120000    4853            lcall   ___fs2sint
1578 AA82      4854            mov     r2,dpl
157A AB83      4855            mov     r3,dph
157C D005      4856            pop     ar5
157E D004      4857            pop     ar4
1580 C002      4858            push    ar2
1582 C003      4859            push    ar3
1584 E4        4860            clr     a
1585 C0E0      4861            push    acc
1587 C0E0      4862            push    acc
1589 905508    4863            mov     dptr,#_freq100
158C E0        4864            movx    a,@dptr
158D C0E0      4865            push    acc
158F A3        4866            inc     dptr
1590 E0        4867            movx    a,@dptr
1591 C0E0      4868            push    acc
1593 A3        4869            inc     dptr
1594 E0        4870            movx    a,@dptr
1595 C0E0      4871            push    acc
1597 A3        4872            inc     dptr
1598 E0        4873            movx    a,@dptr
1599 C0E0      4874            push    acc
159B C068      4875            push    _Auto_mode_slave_sloc0_1_0
159D C069      4876            push    (_Auto_mode_slave_sloc0_1_0 + 1)
159F C004      4877            push    ar4
15A1 C005      4878            push    ar5
15A3 74E8      4879            mov     a,#__str_7
15A5 C0E0      4880            push    acc
15A7 7413      4881            mov     a,#(__str_7 >> 8)
15A9 C0E0      4882            push    acc
15AB 7480      4883            mov     a,#0x80
15AD C0E0      4884            push    acc
15AF 7448      4885            mov     a,#_buff
15B1 C0E0      4886            push    acc
15B3 7455      4887            mov     a,#(_buff >> 8)
15B5 C0E0      4888            push    acc
15B7 7440      4889            mov     a,#0x40
15B9 C0E0      4890            push    acc
15BB 120000    4891            lcall   _sprintf
15BE E581      4892            mov     a,sp
15C0 24EE      4893            add     a,#0xee
15C2 F581      4894            mov     sp,a
15C4           4895   ;        main.c:1066: waitms(5); 
15C4 900005    4896            mov     dptr,#0x0005
15C7 120000    4897            lcall   _waitms
15CA           4898   ;        main.c:1067: sendstr1(buff);
15CA 905548    4899            mov     dptr,#_buff
15CD 75F040    4900            mov     b,#0x40
15D0 120000    4901            lcall   _sendstr1
15D3           4902   L039012?:
15D3           4903   ;        main.c:1071: Move_forward();
15D3 120000    4904            lcall   _Move_forward
15D6           4905   ;        main.c:1073: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
15D6 758209    4906            mov     dpl,#0x09
15D9 120000    4907            lcall   _ADC_at_Pin
15DC E582      4908            mov     a,dpl
15DE 8583F0    4909            mov     b,dph
15E1 9054C8    4910            mov     dptr,#_d1
15E4 F0        4911            movx    @dptr,a
15E5 A3        4912            inc     dptr
15E6 E5F0      4913            mov     a,b
15E8 F0        4914            movx    @dptr,a
15E9           4915   ;        main.c:1074: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
15E9 75820A    4916            mov     dpl,#0x0A
15EC 120000    4917            lcall   _ADC_at_Pin
15EF AA82      4918            mov     r2,dpl
15F1 AB83      4919            mov     r3,dph
15F3 905488    4920            mov     dptr,#_d2
15F6 EA        4921            mov     a,r2
15F7 F0        4922            movx    @dptr,a
15F8 A3        4923            inc     dptr
15F9 EB        4924            mov     a,r3
15FA F0        4925            movx    @dptr,a
15FB           4926   ;        main.c:1075: bound = check_bound(d1,d2);
15FB 9054C8    4927            mov     dptr,#_d1
15FE E0        4928            movx    a,@dptr
15FF FC        4929            mov     r4,a
1600 A3        4930            inc     dptr
1601 E0        4931            movx    a,@dptr
1602 FD        4932            mov     r5,a
1603 8A90      4933            mov     _check_bound_PARM_2,r2
1605 8B91      4934            mov     (_check_bound_PARM_2 + 1),r3
1607 8C82      4935            mov     dpl,r4
1609 8D83      4936            mov     dph,r5
160B 120000    4937            lcall   _check_bound
160E AA82      4938            mov     r2,dpl
1610 AB83      4939            mov     r3,dph
1612           4940   ;        main.c:1076: printf("f:%04ld, d1:%d, d2:%d, bound_dectect: %d\r\n",freq100, d1,d2,bound);
1612 C002      4941            push    ar2
1614 C003      4942            push    ar3
1616 C002      4943            push    ar2
1618 C003      4944            push    ar3
161A 905488    4945            mov     dptr,#_d2
161D E0        4946            movx    a,@dptr
161E C0E0      4947            push    acc
1620 A3        4948            inc     dptr
1621 E0        4949            movx    a,@dptr
1622 C0E0      4950            push    acc
1624 9054C8    4951            mov     dptr,#_d1
1627 E0        4952            movx    a,@dptr
1628 C0E0      4953            push    acc
162A A3        4954            inc     dptr
162B E0        4955            movx    a,@dptr
162C C0E0      4956            push    acc
162E 905508    4957            mov     dptr,#_freq100
1631 E0        4958            movx    a,@dptr
1632 C0E0      4959            push    acc
1634 A3        4960            inc     dptr
1635 E0        4961            movx    a,@dptr
1636 C0E0      4962            push    acc
1638 A3        4963            inc     dptr
1639 E0        4964            movx    a,@dptr
163A C0E0      4965            push    acc
163C A3        4966            inc     dptr
163D E0        4967            movx    a,@dptr
163E C0E0      4968            push    acc
1640 7468      4969            mov     a,#__str_8
1642 C0E0      4970            push    acc
1644 7414      4971            mov     a,#(__str_8 >> 8)
1646 C0E0      4972            push    acc
1648 7480      4973            mov     a,#0x80
164A C0E0      4974            push    acc
164C 120000    4975            lcall   _printf
164F E581      4976            mov     a,sp
1651 24F3      4977            add     a,#0xf3
1653 F581      4978            mov     sp,a
1655 D003      4979            pop     ar3
1657 D002      4980            pop     ar2
1659           4981   ;        main.c:1078: if (freq100>=5360){
1659 905508    4982            mov     dptr,#_freq100
165C E0        4983            movx    a,@dptr
165D FC        4984            mov     r4,a
165E A3        4985            inc     dptr
165F E0        4986            movx    a,@dptr
1660 FD        4987            mov     r5,a
1661 A3        4988            inc     dptr
1662 E0        4989            movx    a,@dptr
1663 FE        4990            mov     r6,a
1664 A3        4991            inc     dptr
1665 E0        4992            movx    a,@dptr
1666 FF        4993            mov     r7,a
1667 C3        4994            clr     c
1668 EC        4995            mov     a,r4
1669 94F0      4996            subb    a,#0xF0
166B ED        4997            mov     a,r5
166C 9414      4998            subb    a,#0x14
166E EE        4999            mov     a,r6
166F 9400      5000            subb    a,#0x00
1671 EF        5001            mov     a,r7
1672 6480      5002            xrl     a,#0x80
1674 9480      5003            subb    a,#0x80
1676 4000      5004            jc      L039014?
1678           5005   ;        main.c:1079: mea_yes = 0;
1678 904BF8    5006            mov     dptr,#_mea_yes
167B E4        5007            clr     a
167C F0        5008            movx    @dptr,a
167D           5009   ;        main.c:1080: Move_back_ms(300);
167D 90012C    5010            mov     dptr,#0x012C
1680 C002      5011            push    ar2
1682 C003      5012            push    ar3
1684 120000    5013            lcall   _Move_back_ms
1687           5014   ;        main.c:1081: waitms(100);
1687 900064    5015            mov     dptr,#0x0064
168A 120000    5016            lcall   _waitms
168D           5017   ;        main.c:1082: servo_pick();
168D 120000    5018            lcall   _servo_pick
1690 D003      5019            pop     ar3
1692 D002      5020            pop     ar2
1694           5021   ;        main.c:1083: count++;
1694 0568      5022            inc     _Auto_mode_slave_sloc0_1_0
1696 E4        5023            clr     a
1697 B568E8    5024            cjne    a,_Auto_mode_slave_sloc0_1_0,L039057?
169A 0569      5025            inc     (_Auto_mode_slave_sloc0_1_0 + 1)
169C           5026   L039057?:
169C           5027   ;        main.c:1084: waitms(100);
169C 900064    5028            mov     dptr,#0x0064
169F C002      5029            push    ar2
16A1 C003      5030            push    ar3
16A3 120000    5031            lcall   _waitms
16A6           5032   ;        main.c:1085: mea_yes = 1;
16A6 904BF8    5033            mov     dptr,#_mea_yes
16A9 7401      5034            mov     a,#0x01
16AB F0        5035            movx    @dptr,a
16AC           5036   ;        main.c:1086: Move_forward();
16AC 120000    5037            lcall   _Move_forward
16AF D003      5038            pop     ar3
16B1 D002      5039            pop     ar2
16B3           5040   L039014?:
16B3           5041   ;        main.c:1089: if(bound == 1){
16B3 BA0128    5042            cjne    r2,#0x01,L039058?
16B6 BB0028    5043            cjne    r3,#0x00,L039058?
16B9 8000      5044            sjmp    L039059?
16BB           5045   L039058?:
16BB 020000    5046            ljmp    L039018?
16BE           5047   L039059?:
16BE           5048   ;        main.c:1090: Move_back_ms(500);
16BE 9001F4    5049            mov     dptr,#0x01F4
16C1 120000    5050            lcall   _Move_back_ms
16C4           5051   ;        main.c:1091: waitms(100);
16C4 900064    5052            mov     dptr,#0x0064
16C7 120000    5053            lcall   _waitms
16CA           5054   ;        main.c:1092: angle = get_random_90_250();
16CA 120000    5055            lcall   _get_random_90_250
16CD 858200    5056            mov     __mulint_PARM_2,dpl
16D0 858301    5057            mov     (__mulint_PARM_2 + 1),dph
16D3           5058   ;        main.c:1093: Right_angle(angle*600/90);
16D3 900258    5059            mov     dptr,#0x0258
16D6 120000    5060            lcall   __mulint
16D9 AA82      5061            mov     r2,dpl
16DB AB83      5062            mov     r3,dph
16DD 75005A    5063            mov     __divuint_PARM_2,#0x5A
16E0 E4        5064            clr     a
16E1 F501      5065            mov     (__divuint_PARM_2 + 1),a
16E3 8A82      5066            mov     dpl,r2
16E5 8B83      5067            mov     dph,r3
16E7 120000    5068            lcall   __divuint
16EA 120000    5069            lcall   _Right_angle
16ED           5070   ;        main.c:1094: curr_angle = Read_angle() * 1.2;
16ED 120000    5071            lcall   _Read_angle
16F0 AA82      5072            mov     r2,dpl
16F2 AB83      5073            mov     r3,dph
16F4 ACF0      5074            mov     r4,b
16F6 FD        5075            mov     r5,a
16F7 C002      5076            push    ar2
16F9 C003      5077            push    ar3
16FB C004      5078            push    ar4
16FD C005      5079            push    ar5
16FF 90999A    5080            mov     dptr,#0x999A
1702 75F099    5081            mov     b,#0x99
1705 743F      5082            mov     a,#0x3F
1707 120000    5083            lcall   ___fsmul
170A AA82      5084            mov     r2,dpl
170C AB83      5085            mov     r3,dph
170E ACF0      5086            mov     r4,b
1710 FD        5087            mov     r5,a
1711 E581      5088            mov     a,sp
1713 24FC      5089            add     a,#0xfc
1715 F581      5090            mov     sp,a
1717 904CF8    5091            mov     dptr,#_curr_angle
171A EA        5092            mov     a,r2
171B F0        5093            movx    @dptr,a
171C A3        5094            inc     dptr
171D EB        5095            mov     a,r3
171E F0        5096            movx    @dptr,a
171F A3        5097            inc     dptr
1720 EC        5098            mov     a,r4
1721 F0        5099            movx    @dptr,a
1722 A3        5100            inc     dptr
1723 ED        5101            mov     a,r5
1724 F0        5102            movx    @dptr,a
1725 020000    5103            ljmp    L039018?
1728           5104   L039020?:
1728           5105   ;        main.c:1097: dummy = 0;
1728 90D168    5106            mov     dptr,#_Auto_mode_slave_dummy_1_212
172B E4        5107            clr     a
172C F0        5108            movx    @dptr,a
172D A3        5109            inc     dptr
172E F0        5110            movx    @dptr,a
172F           5111   ;        main.c:1098: while(1){
172F           5112   L039028?:
172F           5113   ;        main.c:1099: if(RXU1()) {
172F 120000    5114            lcall   _RXU1
1732 5000      5115            jnc     L039028?
1734           5116   ;        main.c:1100: c=getchar1();
1734 120000    5117            lcall   _getchar1
1737 AA82      5118            mov     r2,dpl
1739           5119   ;        main.c:1101: if(c=='@') // Master wants slave data
1739 BA4038    5120            cjne    r2,#0x40,L039028?
173C           5121   ;        main.c:1103: sprintf(buff, "0,00,%04ld,%05d,%03d\n", freq100, weight, (int)curr_angle);
173C 904CF8    5122            mov     dptr,#_curr_angle
173F E0        5123            movx    a,@dptr
1740 FA        5124            mov     r2,a
1741 A3        5125            inc     dptr
1742 E0        5126            movx    a,@dptr
1743 FB        5127            mov     r3,a
1744 A3        5128            inc     dptr
1745 E0        5129            movx    a,@dptr
1746 FC        5130            mov     r4,a
1747 A3        5131            inc     dptr
1748 E0        5132            movx    a,@dptr
1749 8A82      5133            mov     dpl,r2
174B 8B83      5134            mov     dph,r3
174D 8CF0      5135            mov     b,r4
174F 120000    5136            lcall   ___fs2sint
1752 AA82      5137            mov     r2,dpl
1754 AB83      5138            mov     r3,dph
1756 C002      5139            push    ar2
1758 C003      5140            push    ar3
175A 904BB8    5141            mov     dptr,#_weight
175D E0        5142            movx    a,@dptr
175E C0E0      5143            push    acc
1760 A3        5144            inc     dptr
1761 E0        5145            movx    a,@dptr
1762 C0E0      5146            push    acc
1764 905508    5147            mov     dptr,#_freq100
1767 E0        5148            movx    a,@dptr
1768 C0E0      5149            push    acc
176A A3        5150            inc     dptr
176B E0        5151            movx    a,@dptr
176C C0E0      5152            push    acc
176E A3        5153            inc     dptr
176F E0        5154            movx    a,@dptr
1770 C0E0      5155            push    acc
1772 A3        5156            inc     dptr
1773 E0        5157            movx    a,@dptr
1774 C0E0      5158            push    acc
1776 7478      5159            mov     a,#__str_9
1778 C0E0      5160            push    acc
177A 7416      5161            mov     a,#(__str_9 >> 8)
177C C0E0      5162            push    acc
177E 7480      5163            mov     a,#0x80
1780 C0E0      5164            push    acc
1782 7448      5165            mov     a,#_buff
1784 C0E0      5166            push    acc
1786 7455      5167            mov     a,#(_buff >> 8)
1788 C0E0      5168            push    acc
178A 7440      5169            mov     a,#0x40
178C C0E0      5170            push    acc
178E 120000    5171            lcall   _sprintf
1791 E581      5172            mov     a,sp
1793 24F2      5173            add     a,#0xf2
1795 F581      5174            mov     sp,a
1797           5175   ;        main.c:1104: dummy++;
1797 90D168    5176            mov     dptr,#_Auto_mode_slave_dummy_1_212
179A 7401      5177            mov     a,#0x01
179C F0        5178            movx    @dptr,a
179D E4        5179            clr     a
179E A3        5180            inc     dptr
179F F0        5181            movx    @dptr,a
17A0           5182   ;        main.c:1105: waitms(5); 
17A0 900005    5183            mov     dptr,#0x0005
17A3 120000    5184            lcall   _waitms
17A6           5185   ;        main.c:1106: sendstr1(buff);
17A6 905548    5186            mov     dptr,#_buff
17A9 75F040    5187            mov     b,#0x40
17AC 120000    5188            lcall   _sendstr1
17AF           5189   ;        main.c:1107: if(dummy = 30) break;
17AF 90D168    5190            mov     dptr,#_Auto_mode_slave_dummy_1_212
17B2 741E      5191            mov     a,#0x1E
17B4 F0        5192            movx    @dptr,a
17B5 E4        5193            clr     a
17B6 A3        5194            inc     dptr
17B7 F0        5195            movx    @dptr,a
17B8 22        5196            ret
17B9           5197   ;------------------------------------------------------------
17B9           5198   ;Allocation info for local variables in function 'measure_distance'
17B9           5199   ;------------------------------------------------------------
17B9           5200   ;------------------------------------------------------------
17B9           5201   ;        main.c:1113: int measure_distance(void)
17B9           5202   ;        -----------------------------------------
17B9           5203   ;         function measure_distance
17B9           5204   ;        -----------------------------------------
17B9           5205   _measure_distance:
17B9           5206   ;        main.c:1115: TL0 = 0; 
17B9 758A00    5207            mov     _TL0,#0x00
17BC           5208   ;        main.c:1116: TH0 = 0; 
17BC 758C00    5209            mov     _TH0,#0x00
17BF           5210   ;        main.c:1117: TF0 = 0; 
17BF C28D      5211            clr     _TF0
17C1           5212   ;        main.c:1118: overflow_count = 0;
17C1 905148    5213            mov     dptr,#_overflow_count
17C4           5214   ;        main.c:1119: duration = 0.0; 
17C4 E4        5215            clr     a
17C5 F0        5216            movx    @dptr,a
17C6 904B78    5217            mov     dptr,#_duration
17C9 F0        5218            movx    @dptr,a
17CA A3        5219            inc     dptr
17CB E4        5220            clr     a
17CC F0        5221            movx    @dptr,a
17CD A3        5222            inc     dptr
17CE F0        5223            movx    @dptr,a
17CF A3        5224            inc     dptr
17D0 F0        5225            movx    @dptr,a
17D1           5226   ;        main.c:1121: TRIG_PIN = 1; 
17D1 D2B2      5227            setb    _P3_2
17D3           5228   ;        main.c:1122: Timer3us(10);
17D3 75820A    5229            mov     dpl,#0x0A
17D6 120000    5230            lcall   _Timer3us
17D9           5231   ;        main.c:1123: TRIG_PIN = 0; 
17D9 C2B2      5232            clr     _P3_2
17DB           5233   ;        main.c:1125: while (ECHO_PIN != 0);
17DB           5234   L040001?:
17DB 20B3B8    5235            jb      _P3_3,L040001?
17DE           5236   ;        main.c:1126: while (ECHO_PIN != 1);
17DE           5237   L040004?:
17DE 30B3F8    5238            jnb     _P3_3,L040004?
17E1           5239   ;        main.c:1127: TR0 = 1; 
17E1 D28C      5240            setb    _TR0
17E3           5241   ;        main.c:1128: while (ECHO_PIN == 1)
17E3           5242   L040009?:
17E3 30B378    5243            jnb     _P3_3,L040011?
17E6           5244   ;        main.c:1130: if (TF0 == 1){
17E6           5245   ;        main.c:1131: TF0 = 0; 
17E6 108DB8    5246            jbc     _TF0,L040023?
17E9 8000      5247            sjmp    L040009?
17EB           5248   L040023?:
17EB           5249   ;        main.c:1132: overflow_count++;
17EB 905148    5250            mov     dptr,#_overflow_count
17EE E0        5251            movx    a,@dptr
17EF 2401      5252            add     a,#0x01
17F1 F0        5253            movx    @dptr,a
17F2 8000      5254            sjmp    L040009?
17F4           5255   L040011?:
17F4           5256   ;        main.c:1136: TR0 = 0; 
17F4 C28C      5257            clr     _TR0
17F6           5258   ;        main.c:1137: duration = (overflow_count*65536.0 + TH0*256.0 + TL0) * (12.0/SYSCLK);
17F6 905148    5259            mov     dptr,#_overflow_count
17F9 E0        5260            movx    a,@dptr
17FA F582      5261            mov     dpl,a
17FC 120000    5262            lcall   ___uchar2fs
17FF AA82      5263            mov     r2,dpl
1801 AB83      5264            mov     r3,dph
1803 ACF0      5265            mov     r4,b
1805 FD        5266            mov     r5,a
1806 C002      5267            push    ar2
1808 C003      5268            push    ar3
180A C004      5269            push    ar4
180C C005      5270            push    ar5
180E 900000    5271            mov     dptr,#0x0000
1811 75F080    5272            mov     b,#0x80
1814 7447      5273            mov     a,#0x47
1816 120000    5274            lcall   ___fsmul
1819 AA82      5275            mov     r2,dpl
181B AB83      5276            mov     r3,dph
181D ACF0      5277            mov     r4,b
181F FD        5278            mov     r5,a
1820 E581      5279            mov     a,sp
1822 24FC      5280            add     a,#0xfc
1824 F581      5281            mov     sp,a
1826 858C82    5282            mov     dpl,_TH0
1829 C002      5283            push    ar2
182B C003      5284            push    ar3
182D C004      5285            push    ar4
182F C005      5286            push    ar5
1831 120000    5287            lcall   ___uchar2fs
1834 AE82      5288            mov     r6,dpl
1836 AF83      5289            mov     r7,dph
1838 A8F0      5290            mov     r0,b
183A F9        5291            mov     r1,a
183B C006      5292            push    ar6
183D C007      5293            push    ar7
183F C000      5294            push    ar0
1841 C001      5295            push    ar1
1843 900000    5296            mov     dptr,#0x0000
1846 75F080    5297            mov     b,#0x80
1849 7443      5298            mov     a,#0x43
184B 120000    5299            lcall   ___fsmul
184E AE82      5300            mov     r6,dpl
1850 AF83      5301            mov     r7,dph
1852 A8F0      5302            mov     r0,b
1854 F9        5303            mov     r1,a
1855 E581      5304            mov     a,sp
1857 24FC      5305            add     a,#0xfc
1859 F581      5306            mov     sp,a
185B D005      5307            pop     ar5
185D D004      5308            pop     ar4
185F D003      5309            pop     ar3
1861 D002      5310            pop     ar2
1863 C006      5311            push    ar6
1865 C007      5312            push    ar7
1867 C000      5313            push    ar0
1869 C001      5314            push    ar1
186B 8A82      5315            mov     dpl,r2
186D 8B83      5316            mov     dph,r3
186F 8CF0      5317            mov     b,r4
1871 ED        5318            mov     a,r5
1872 120000    5319            lcall   ___fsadd
1875 AA82      5320            mov     r2,dpl
1877 AB83      5321            mov     r3,dph
1879 ACF0      5322            mov     r4,b
187B FD        5323            mov     r5,a
187C E581      5324            mov     a,sp
187E 24FC      5325            add     a,#0xfc
1880 F581      5326            mov     sp,a
1882 AE8A      5327            mov     r6,_TL0
1884 7F00      5328            mov     r7,#0x00
1886 8E82      5329            mov     dpl,r6
1888 8F83      5330            mov     dph,r7
188A C002      5331            push    ar2
188C C003      5332            push    ar3
188E C004      5333            push    ar4
1890 C005      5334            push    ar5
1892 120000    5335            lcall   ___sint2fs
1895 AE82      5336            mov     r6,dpl
1897 AF83      5337            mov     r7,dph
1899 A8F0      5338            mov     r0,b
189B F9        5339            mov     r1,a
189C D005      5340            pop     ar5
189E D004      5341            pop     ar4
18A0 D003      5342            pop     ar3
18A2 D002      5343            pop     ar2
18A4 C006      5344            push    ar6
18A6 C007      5345            push    ar7
18A8 C000      5346            push    ar0
18AA C001      5347            push    ar1
18AC 8A82      5348            mov     dpl,r2
18AE 8B83      5349            mov     dph,r3
18B0 8CF0      5350            mov     b,r4
18B2 ED        5351            mov     a,r5
18B3 120000    5352            lcall   ___fsadd
18B6 AA82      5353            mov     r2,dpl
18B8 AB83      5354            mov     r3,dph
18BA ACF0      5355            mov     r4,b
18BC FD        5356            mov     r5,a
18BD E581      5357            mov     a,sp
18BF 24FC      5358            add     a,#0xfc
18C1 F581      5359            mov     sp,a
18C3 C002      5360            push    ar2
18C5 C003      5361            push    ar3
18C7 C004      5362            push    ar4
18C9 C005      5363            push    ar5
18CB 90F4FC    5364            mov     dptr,#0xF4FC
18CE 75F032    5365            mov     b,#0x32
18D1 7434      5366            mov     a,#0x34
18D3 120000    5367            lcall   ___fsmul
18D6 AA82      5368            mov     r2,dpl
18D8 AB83      5369            mov     r3,dph
18DA ACF0      5370            mov     r4,b
18DC FD        5371            mov     r5,a
18DD E581      5372            mov     a,sp
18DF 24FC      5373            add     a,#0xfc
18E1 F581      5374            mov     sp,a
18E3 904B78    5375            mov     dptr,#_duration
18E6 EA        5376            mov     a,r2
18E7 F0        5377            movx    @dptr,a
18E8 A3        5378            inc     dptr
18E9 EB        5379            mov     a,r3
18EA F0        5380            movx    @dptr,a
18EB A3        5381            inc     dptr
18EC EC        5382            mov     a,r4
18ED F0        5383            movx    @dptr,a
18EE A3        5384            inc     dptr
18EF ED        5385            mov     a,r5
18F0 F0        5386            movx    @dptr,a
18F1           5387   ;        main.c:1139: distance = 340.0 * duration * 100.0 / 2.0; // distance in cm
18F1 C002      5388            push    ar2
18F3 C003      5389            push    ar3
18F5 C004      5390            push    ar4
18F7 C005      5391            push    ar5
18F9 90D000    5392            mov     dptr,#0xD000
18FC 75F004    5393            mov     b,#0x04
18FF 7447      5394            mov     a,#0x47
1901 120000    5395            lcall   ___fsmul
1904 AA82      5396            mov     r2,dpl
1906 AB83      5397            mov     r3,dph
1908 ACF0      5398            mov     r4,b
190A FD        5399            mov     r5,a
190B E581      5400            mov     a,sp
190D 24FC      5401            add     a,#0xfc
190F F581      5402            mov     sp,a
1911 E4        5403            clr     a
1912 C0E0      5404            push    acc
1914 C0E0      5405            push    acc
1916 C0E0      5406            push    acc
1918 7440      5407            mov     a,#0x40
191A C0E0      5408            push    acc
191C 8A82      5409            mov     dpl,r2
191E 8B83      5410            mov     dph,r3
1920 8CF0      5411            mov     b,r4
1922 ED        5412            mov     a,r5
1923 120000    5413            lcall   ___fsdiv
1926 AA82      5414            mov     r2,dpl
1928 AB83      5415            mov     r3,dph
192A ACF0      5416            mov     r4,b
192C FD        5417            mov     r5,a
192D E581      5418            mov     a,sp
192F 24FC      5419            add     a,#0xfc
1931 F581      5420            mov     sp,a
1933 904B38    5421            mov     dptr,#_distance
1936 EA        5422            mov     a,r2
1937 F0        5423            movx    @dptr,a
1938 A3        5424            inc     dptr
1939 EB        5425            mov     a,r3
193A F0        5426            movx    @dptr,a
193B A3        5427            inc     dptr
193C EC        5428            mov     a,r4
193D F0        5429            movx    @dptr,a
193E A3        5430            inc     dptr
193F ED        5431            mov     a,r5
1940 F0        5432            movx    @dptr,a
1941           5433   ;        main.c:1141: return (int)(10*distance); 
1941 C002      5434            push    ar2
1943 C003      5435            push    ar3
1945 C004      5436            push    ar4
1947 C005      5437            push    ar5
1949 900000    5438            mov     dptr,#0x0000
194C 75F020    5439            mov     b,#0x20
194F 7441      5440            mov     a,#0x41
1951 120000    5441            lcall   ___fsmul
1954 AA82      5442            mov     r2,dpl
1956 AB83      5443            mov     r3,dph
1958 ACF0      5444            mov     r4,b
195A FD        5445            mov     r5,a
195B E581      5446            mov     a,sp
195D 24FC      5447            add     a,#0xfc
195F F581      5448            mov     sp,a
1961 8A82      5449            mov     dpl,r2
1963 8B83      5450            mov     dph,r3
1965 8CF0      5451            mov     b,r4
1967 ED        5452            mov     a,r5
1968 020000    5453            ljmp    ___fs2sint
196B           5454   ;------------------------------------------------------------
196B           5455   ;Allocation info for local variables in function 'Joystick_Control'
196B           5456   ;------------------------------------------------------------
196B           5457   ;vy_ptr                    Allocated with name '_Joystick_Control_PARM_2'
196B           5458   ;vx_ptr                    Allocated to registers r2 r3 r4 
196B           5459   ;sloc0                     Allocated with name '_Joystick_Control_sloc0_1_0'
196B           5460   ;sloc1                     Allocated with name '_Joystick_Control_sloc1_1_0'
196B           5461   ;sloc2                     Allocated with name '_Joystick_Control_sloc2_1_0'
196B           5462   ;sloc3                     Allocated with name '_Joystick_Control_sloc3_1_0'
196B           5463   ;sloc4                     Allocated with name '_Joystick_Control_sloc4_1_0'
196B           5464   ;sloc5                     Allocated with name '_Joystick_Control_sloc5_1_0'
196B           5465   ;vx                        Allocated with name '_Joystick_Control_vx_1_228'
196B           5466   ;vy                        Allocated with name '_Joystick_Control_vy_1_228'
196B           5467   ;vx_error                  Allocated with name '_Joystick_Control_vx_error_1_228'
196B           5468   ;vy_error                  Allocated with name '_Joystick_Control_vy_error_1_228'
196B           5469   ;vx_err                    Allocated with name '_Joystick_Control_vx_err_1_228'
196B           5470   ;vy_err                    Allocated with name '_Joystick_Control_vy_err_1_228'
196B           5471   ;------------------------------------------------------------
196B           5472   ;        main.c:1145: float Joystick_Control(int *vx_ptr, int *vy_ptr)
196B           5473   ;        -----------------------------------------
196B           5474   ;         function Joystick_Control
196B           5475   ;        -----------------------------------------
196B           5476   _Joystick_Control:
196B           5477   ;        main.c:1149: vx = *vx_ptr; 
196B 120000    5478            lcall   __gptrget
196E FA        5479            mov     r2,a
196F A3        5480            inc     dptr
1970 120000    5481            lcall   __gptrget
1973 FB        5482            mov     r3,a
1974           5483   ;        main.c:1150: vy = *vy_ptr; 
1974 AC98      5484            mov     r4,_Joystick_Control_PARM_2
1976 AD99      5485            mov     r5,(_Joystick_Control_PARM_2 + 1)
1978 AE9A      5486            mov     r6,(_Joystick_Control_PARM_2 + 2)
197A 8C82      5487            mov     dpl,r4
197C 8D83      5488            mov     dph,r5
197E 8EF0      5489            mov     b,r6
1980 120000    5490            lcall   __gptrget
1983 FC        5491            mov     r4,a
1984 A3        5492            inc     dptr
1985 120000    5493            lcall   __gptrget
1988 FD        5494            mov     r5,a
1989           5495   ;        main.c:1153: raw_angle = Read_angle();
1989 C002      5496            push    ar2
198B C003      5497            push    ar3
198D C004      5498            push    ar4
198F C005      5499            push    ar5
1991 120000    5500            lcall   _Read_angle
1994 AE82      5501            mov     r6,dpl
1996 AF83      5502            mov     r7,dph
1998 A8F0      5503            mov     r0,b
199A F9        5504            mov     r1,a
199B D005      5505            pop     ar5
199D D004      5506            pop     ar4
199F D003      5507            pop     ar3
19A1 D002      5508            pop     ar2
19A3 904CB8    5509            mov     dptr,#_raw_angle
19A6 EE        5510            mov     a,r6
19A7 F0        5511            movx    @dptr,a
19A8 A3        5512            inc     dptr
19A9 EF        5513            mov     a,r7
19AA F0        5514            movx    @dptr,a
19AB A3        5515            inc     dptr
19AC E8        5516            mov     a,r0
19AD F0        5517            movx    @dptr,a
19AE A3        5518            inc     dptr
19AF E9        5519            mov     a,r1
19B0 F0        5520            movx    @dptr,a
19B1           5521   ;        main.c:1156: vx_error = abs(vx-vx_thres)*100/vx_thres; 
19B1 904F08    5522            mov     dptr,#_vx_thres
19B4 E0        5523            movx    a,@dptr
19B5 FE        5524            mov     r6,a
19B6 A3        5525            inc     dptr
19B7 E0        5526            movx    a,@dptr
19B8 FF        5527            mov     r7,a
19B9 EA        5528            mov     a,r2
19BA C3        5529            clr     c
19BB 9E        5530            subb    a,r6
19BC F582      5531            mov     dpl,a
19BE EB        5532            mov     a,r3
19BF 9F        5533            subb    a,r7
19C0 F583      5534            mov     dph,a
19C2 C002      5535            push    ar2
19C4 C003      5536            push    ar3
19C6 C004      5537            push    ar4
19C8 C005      5538            push    ar5
19CA 120000    5539            lcall   _abs
19CD 858200    5540            mov     __mulint_PARM_2,dpl
19D0 858301    5541            mov     (__mulint_PARM_2 + 1),dph
19D3 900064    5542            mov     dptr,#0x0064
19D6 120000    5543            lcall   __mulint
19D9 AE82      5544            mov     r6,dpl
19DB AF83      5545            mov     r7,dph
19DD 904F08    5546            mov     dptr,#_vx_thres
19E0 E0        5547            movx    a,@dptr
19E1 F500      5548            mov     __divsint_PARM_2,a
19E3 A3        5549            inc     dptr
19E4 E0        5550            movx    a,@dptr
19E5 F501      5551            mov     (__divsint_PARM_2 + 1),a
19E7 8E82      5552            mov     dpl,r6
19E9 8F83      5553            mov     dph,r7
19EB 120000    5554            lcall   __divsint
19EE E582      5555            mov     a,dpl
19F0 8583F0    5556            mov     b,dph
19F3 D005      5557            pop     ar5
19F5 D004      5558            pop     ar4
19F7 90D1C8    5559            mov     dptr,#_Joystick_Control_vx_error_1_228
19FA F0        5560            movx    @dptr,a
19FB A3        5561            inc     dptr
19FC E5F0      5562            mov     a,b
19FE F0        5563            movx    @dptr,a
19FF           5564   ;        main.c:1157: vy_error = abs(vy-vy_thres)*100/vy_thres; 
19FF 904EC8    5565            mov     dptr,#_vy_thres
1A02 E0        5566            movx    a,@dptr
1A03 FE        5567            mov     r6,a
1A04 A3        5568            inc     dptr
1A05 E0        5569            movx    a,@dptr
1A06 FF        5570            mov     r7,a
1A07 EC        5571            mov     a,r4
1A08 C3        5572            clr     c
1A09 9E        5573            subb    a,r6
1A0A F582      5574            mov     dpl,a
1A0C ED        5575            mov     a,r5
1A0D 9F        5576            subb    a,r7
1A0E F583      5577            mov     dph,a
1A10 C004      5578            push    ar4
1A12 C005      5579            push    ar5
1A14 120000    5580            lcall   _abs
1A17 858200    5581            mov     __mulint_PARM_2,dpl
1A1A 858301    5582            mov     (__mulint_PARM_2 + 1),dph
1A1D 900064    5583            mov     dptr,#0x0064
1A20 120000    5584            lcall   __mulint
1A23 AE82      5585            mov     r6,dpl
1A25 AF83      5586            mov     r7,dph
1A27 904EC8    5587            mov     dptr,#_vy_thres
1A2A E0        5588            movx    a,@dptr
1A2B F5B8      5589            mov     _Joystick_Control_sloc0_1_0,a
1A2D A3        5590            inc     dptr
1A2E E0        5591            movx    a,@dptr
1A2F F5B9      5592            mov     (_Joystick_Control_sloc0_1_0 + 1),a
1A31 85B800    5593            mov     __divsint_PARM_2,_Joystick_Control_sloc0_1_0
1A34 85B901    5594            mov     (__divsint_PARM_2 + 1),(_Joystick_Control_sloc0_1_0 + 1)
1A37 8E82      5595            mov     dpl,r6
1A39 8F83      5596            mov     dph,r7
1A3B 120000    5597            lcall   __divsint
1A3E AE82      5598            mov     r6,dpl
1A40 AF83      5599            mov     r7,dph
1A42 D005      5600            pop     ar5
1A44 D004      5601            pop     ar4
1A46 D003      5602            pop     ar3
1A48 D002      5603            pop     ar2
1A4A 90D228    5604            mov     dptr,#_Joystick_Control_vy_error_1_228
1A4D EE        5605            mov     a,r6
1A4E F0        5606            movx    @dptr,a
1A4F A3        5607            inc     dptr
1A50 EF        5608            mov     a,r7
1A51 F0        5609            movx    @dptr,a
1A52           5610   ;        main.c:1158: vx_err = vx-vx_thres; 
1A52 904F08    5611            mov     dptr,#_vx_thres
1A55 E0        5612            movx    a,@dptr
1A56 F8        5613            mov     r0,a
1A57 A3        5614            inc     dptr
1A58 E0        5615            movx    a,@dptr
1A59 F9        5616            mov     r1,a
1A5A EA        5617            mov     a,r2
1A5B C3        5618            clr     c
1A5C 98        5619            subb    a,r0
1A5D FA        5620            mov     r2,a
1A5E EB        5621            mov     a,r3
1A5F 99        5622            subb    a,r1
1A60 FB        5623            mov     r3,a
1A61 90D278    5624            mov     dptr,#_Joystick_Control_vx_err_1_228
1A64 EA        5625            mov     a,r2
1A65 F0        5626            movx    @dptr,a
1A66 A3        5627            inc     dptr
1A67 EB        5628            mov     a,r3
1A68 F0        5629            movx    @dptr,a
1A69           5630   ;        main.c:1159: vy_err = vy-vy_thres; 
1A69 EC        5631            mov     a,r4
1A6A C3        5632            clr     c
1A6B 95B8      5633            subb    a,_Joystick_Control_sloc0_1_0
1A6D F508      5634            mov     _Joystick_Control_sloc1_1_0,a
1A6F ED        5635            mov     a,r5
1A70 95B9      5636            subb    a,(_Joystick_Control_sloc0_1_0 + 1)
1A72 F509      5637            mov     (_Joystick_Control_sloc1_1_0 + 1),a
1A74 90D2C8    5638            mov     dptr,#_Joystick_Control_vy_err_1_228
1A77 E508      5639            mov     a,_Joystick_Control_sloc1_1_0
1A79 F0        5640            movx    @dptr,a
1A7A A3        5641            inc     dptr
1A7B E509      5642            mov     a,(_Joystick_Control_sloc1_1_0 + 1)
1A7D F0        5643            movx    @dptr,a
1A7E           5644   ;        main.c:1160: pwm_left = 0; 
1A7E 905088    5645            mov     dptr,#_pwm_left
1A81           5646   ;        main.c:1161: pwm_right = 0; 
1A81 E4        5647            clr     a
1A82 F0        5648            movx    @dptr,a
1A83 905048    5649            mov     dptr,#_pwm_right
1A86 F0        5650            movx    @dptr,a
1A87           5651   ;        main.c:1163: if ((vy_error>5) && (vx_error<5)){
1A87 C3        5652            clr     c
1A88 7405      5653            mov     a,#0x05
1A8A 9E        5654            subb    a,r6
1A8B E4        5655            clr     a
1A8C 6480      5656            xrl     a,#0x80
1A8E 8FF0      5657            mov     b,r7
1A90 63F080    5658            xrl     b,#0x80
1A93 95F0      5659            subb    a,b
1A95 E4        5660            clr     a
1A96 33        5661            rlc     a
1A97 F5B8      5662            mov     _Joystick_Control_sloc0_1_0,a
1A99 7000      5663            jnz     L041062?
1A9B 020000    5664            ljmp    L041005?
1A9E           5665   L041062?:
1A9E 90D1C8    5666            mov     dptr,#_Joystick_Control_vx_error_1_228
1AA1 E0        5667            movx    a,@dptr
1AA2 F8        5668            mov     r0,a
1AA3 A3        5669            inc     dptr
1AA4 E0        5670            movx    a,@dptr
1AA5 F9        5671            mov     r1,a
1AA6 C3        5672            clr     c
1AA7 E8        5673            mov     a,r0
1AA8 9405      5674            subb    a,#0x05
1AAA E9        5675            mov     a,r1
1AAB 6480      5676            xrl     a,#0x80
1AAD 9480      5677            subb    a,#0x80
1AAF 4000      5678            jc      L041063?
1AB1 020000    5679            ljmp    L041005?
1AB4           5680   L041063?:
1AB4           5681   ;        main.c:1164: pwm_left = vy_error; 
1AB4 C002      5682            push    ar2
1AB6 C003      5683            push    ar3
1AB8 905088    5684            mov     dptr,#_pwm_left
1ABB EE        5685            mov     a,r6
1ABC F0        5686            movx    @dptr,a
1ABD           5687   ;        main.c:1165: pwm_right = vy_error * pwm_corr; 
1ABD 8E82      5688            mov     dpl,r6
1ABF 8F83      5689            mov     dph,r7
1AC1 C004      5690            push    ar4
1AC3 C005      5691            push    ar5
1AC5 C006      5692            push    ar6
1AC7 C007      5693            push    ar7
1AC9 120000    5694            lcall   ___sint2fs
1ACC AA82      5695            mov     r2,dpl
1ACE AB83      5696            mov     r3,dph
1AD0 A8F0      5697            mov     r0,b
1AD2 F9        5698            mov     r1,a
1AD3 904D38    5699            mov     dptr,#_pwm_corr
1AD6 E0        5700            movx    a,@dptr
1AD7 C0E0      5701            push    acc
1AD9 A3        5702            inc     dptr
1ADA E0        5703            movx    a,@dptr
1ADB C0E0      5704            push    acc
1ADD A3        5705            inc     dptr
1ADE E0        5706            movx    a,@dptr
1ADF C0E0      5707            push    acc
1AE1 A3        5708            inc     dptr
1AE2 E0        5709            movx    a,@dptr
1AE3 C0E0      5710            push    acc
1AE5 8A82      5711            mov     dpl,r2
1AE7 8B83      5712            mov     dph,r3
1AE9 88F0      5713            mov     b,r0
1AEB E9        5714            mov     a,r1
1AEC 120000    5715            lcall   ___fsmul
1AEF AA82      5716            mov     r2,dpl
1AF1 AB83      5717            mov     r3,dph
1AF3 A8F0      5718            mov     r0,b
1AF5 F9        5719            mov     r1,a
1AF6 E581      5720            mov     a,sp
1AF8 24FC      5721            add     a,#0xfc
1AFA F581      5722            mov     sp,a
1AFC D007      5723            pop     ar7
1AFE D006      5724            pop     ar6
1B00 D005      5725            pop     ar5
1B02 D004      5726            pop     ar4
1B04 8A82      5727            mov     dpl,r2
1B06 8B83      5728            mov     dph,r3
1B08 88F0      5729            mov     b,r0
1B0A E9        5730            mov     a,r1
1B0B C002      5731            push    ar2
1B0D C003      5732            push    ar3
1B0F C004      5733            push    ar4
1B11 C005      5734            push    ar5
1B13 C006      5735            push    ar6
1B15 C007      5736            push    ar7
1B17 120000    5737            lcall   ___fs2uchar
1B1A 858258    5738            mov     _Joystick_Control_sloc2_1_0,dpl
1B1D D007      5739            pop     ar7
1B1F D006      5740            pop     ar6
1B21 D005      5741            pop     ar5
1B23 D004      5742            pop     ar4
1B25 D003      5743            pop     ar3
1B27 D002      5744            pop     ar2
1B29 905048    5745            mov     dptr,#_pwm_right
1B2C E558      5746            mov     a,_Joystick_Control_sloc2_1_0
1B2E F0        5747            movx    @dptr,a
1B2F           5748   ;        main.c:1166: if (vy_err > 0){ //move forward
1B2F C3        5749            clr     c
1B30 E4        5750            clr     a
1B31 9508      5751            subb    a,_Joystick_Control_sloc1_1_0
1B33 E4        5752            clr     a
1B34 6480      5753            xrl     a,#0x80
1B36 8509F0    5754            mov     b,(_Joystick_Control_sloc1_1_0 + 1)
1B39 63F080    5755            xrl     b,#0x80
1B3C 95F0      5756            subb    a,b
1B3E D003      5757            pop     ar3
1B40 D002      5758            pop     ar2
1B42 5000      5759            jnc     L041002?
1B44           5760   ;        main.c:1167: L_motor_dir = 0; 
1B44 905008    5761            mov     dptr,#_L_motor_dir
1B47           5762   ;        main.c:1168: R_motor_dir = 0; 
1B47 E4        5763            clr     a
1B48 F0        5764            movx    @dptr,a
1B49 904FC8    5765            mov     dptr,#_R_motor_dir
1B4C F0        5766            movx    @dptr,a
1B4D 8000      5767            sjmp    L041005?
1B4F           5768   L041002?:
1B4F           5769   ;        main.c:1171: L_motor_dir = 1; 
1B4F C002      5770            push    ar2
1B51 C003      5771            push    ar3
1B53 905008    5772            mov     dptr,#_L_motor_dir
1B56 7401      5773            mov     a,#0x01
1B58 F0        5774            movx    @dptr,a
1B59           5775   ;        main.c:1172: R_motor_dir = 1; 
1B59 904FC8    5776            mov     dptr,#_R_motor_dir
1B5C 7401      5777            mov     a,#0x01
1B5E F0        5778            movx    @dptr,a
1B5F           5779   ;        main.c:1173: pwm_right *= 1.05;
1B5F 855882    5780            mov     dpl,_Joystick_Control_sloc2_1_0
1B62 C004      5781            push    ar4
1B64 C005      5782            push    ar5
1B66 C006      5783            push    ar6
1B68 C007      5784            push    ar7
1B6A 120000    5785            lcall   ___uchar2fs
1B6D A882      5786            mov     r0,dpl
1B6F A983      5787            mov     r1,dph
1B71 AAF0      5788            mov     r2,b
1B73 FB        5789            mov     r3,a
1B74 C000      5790            push    ar0
1B76 C001      5791            push    ar1
1B78 C002      5792            push    ar2
1B7A C003      5793            push    ar3
1B7C 906666    5794            mov     dptr,#0x6666
1B7F 75F086    5795            mov     b,#0x86
1B82 743F      5796            mov     a,#0x3F
1B84 120000    5797            lcall   ___fsmul
1B87 AA82      5798            mov     r2,dpl
1B89 AB83      5799            mov     r3,dph
1B8B A8F0      5800            mov     r0,b
1B8D F9        5801            mov     r1,a
1B8E E581      5802            mov     a,sp
1B90 24FC      5803            add     a,#0xfc
1B92 F581      5804            mov     sp,a
1B94 D007      5805            pop     ar7
1B96 D006      5806            pop     ar6
1B98 D005      5807            pop     ar5
1B9A D004      5808            pop     ar4
1B9C 8A82      5809            mov     dpl,r2
1B9E 8B83      5810            mov     dph,r3
1BA0 88F0      5811            mov     b,r0
1BA2 E9        5812            mov     a,r1
1BA3 C002      5813            push    ar2
1BA5 C003      5814            push    ar3
1BA7 C004      5815            push    ar4
1BA9 C005      5816            push    ar5
1BAB C006      5817            push    ar6
1BAD C007      5818            push    ar7
1BAF 120000    5819            lcall   ___fs2uchar
1BB2 E582      5820            mov     a,dpl
1BB4 D007      5821            pop     ar7
1BB6 D006      5822            pop     ar6
1BB8 D005      5823            pop     ar5
1BBA D004      5824            pop     ar4
1BBC D003      5825            pop     ar3
1BBE D002      5826            pop     ar2
1BC0 905048    5827            mov     dptr,#_pwm_right
1BC3 F0        5828            movx    @dptr,a
1BC4           5829   ;        main.c:1256: return curr_angle; 
1BC4 D003      5830            pop     ar3
1BC6 D002      5831            pop     ar2
1BC8           5832   ;        main.c:1173: pwm_right *= 1.05;
1BC8           5833   L041005?:
1BC8           5834   ;        main.c:1176: if ((vx_error>5)&&(vy_error<5)){
1BC8 90D1C8    5835            mov     dptr,#_Joystick_Control_vx_error_1_228
1BCB E0        5836            movx    a,@dptr
1BCC F8        5837            mov     r0,a
1BCD A3        5838            inc     dptr
1BCE E0        5839            movx    a,@dptr
1BCF F9        5840            mov     r1,a
1BD0 C3        5841            clr     c
1BD1 7405      5842            mov     a,#0x05
1BD3 98        5843            subb    a,r0
1BD4 E4        5844            clr     a
1BD5 6480      5845            xrl     a,#0x80
1BD7 89F0      5846            mov     b,r1
1BD9 63F080    5847            xrl     b,#0x80
1BDC 95F0      5848            subb    a,b
1BDE E4        5849            clr     a
1BDF 33        5850            rlc     a
1BE0 F558      5851            mov     _Joystick_Control_sloc2_1_0,a
1BE2 7000      5852            jnz     L041065?
1BE4 020000    5853            ljmp    L041015?
1BE7           5854   L041065?:
1BE7 C3        5855            clr     c
1BE8 EE        5856            mov     a,r6
1BE9 9405      5857            subb    a,#0x05
1BEB EF        5858            mov     a,r7
1BEC 6480      5859            xrl     a,#0x80
1BEE 9480      5860            subb    a,#0x80
1BF0 4000      5861            jc      L041066?
1BF2 020000    5862            ljmp    L041015?
1BF5           5863   L041066?:
1BF5           5864   ;        main.c:1177: pwm_left = vx_error; 
1BF5 C004      5865            push    ar4
1BF7 C005      5866            push    ar5
1BF9 905088    5867            mov     dptr,#_pwm_left
1BFC E8        5868            mov     a,r0
1BFD F0        5869            movx    @dptr,a
1BFE           5870   ;        main.c:1178: pwm_right = vx_error * pwm_corr; 
1BFE 8882      5871            mov     dpl,r0
1C00 8983      5872            mov     dph,r1
1C02 C002      5873            push    ar2
1C04 C003      5874            push    ar3
1C06 C000      5875            push    ar0
1C08 C001      5876            push    ar1
1C0A 120000    5877            lcall   ___sint2fs
1C0D AE82      5878            mov     r6,dpl
1C0F AF83      5879            mov     r7,dph
1C11 ACF0      5880            mov     r4,b
1C13 FD        5881            mov     r5,a
1C14 904D38    5882            mov     dptr,#_pwm_corr
1C17 E0        5883            movx    a,@dptr
1C18 C0E0      5884            push    acc
1C1A A3        5885            inc     dptr
1C1B E0        5886            movx    a,@dptr
1C1C C0E0      5887            push    acc
1C1E A3        5888            inc     dptr
1C1F E0        5889            movx    a,@dptr
1C20 C0E0      5890            push    acc
1C22 A3        5891            inc     dptr
1C23 E0        5892            movx    a,@dptr
1C24 C0E0      5893            push    acc
1C26 8E82      5894            mov     dpl,r6
1C28 8F83      5895            mov     dph,r7
1C2A 8CF0      5896            mov     b,r4
1C2C ED        5897            mov     a,r5
1C2D 120000    5898            lcall   ___fsmul
1C30 AC82      5899            mov     r4,dpl
1C32 AD83      5900            mov     r5,dph
1C34 AEF0      5901            mov     r6,b
1C36 FF        5902            mov     r7,a
1C37 E581      5903            mov     a,sp
1C39 24FC      5904            add     a,#0xfc
1C3B F581      5905            mov     sp,a
1C3D D001      5906            pop     ar1
1C3F D000      5907            pop     ar0
1C41 8C82      5908            mov     dpl,r4
1C43 8D83      5909            mov     dph,r5
1C45 8EF0      5910            mov     b,r6
1C47 EF        5911            mov     a,r7
1C48 C004      5912            push    ar4
1C4A C005      5913            push    ar5
1C4C C000      5914            push    ar0
1C4E C001      5915            push    ar1
1C50 120000    5916            lcall   ___fs2uchar
1C53 E582      5917            mov     a,dpl
1C55 D001      5918            pop     ar1
1C57 D000      5919            pop     ar0
1C59 D005      5920            pop     ar5
1C5B D004      5921            pop     ar4
1C5D D003      5922            pop     ar3
1C5F D002      5923            pop     ar2
1C61 905048    5924            mov     dptr,#_pwm_right
1C64 F0        5925            movx    @dptr,a
1C65           5926   ;        main.c:1179: if (vx_err > 0){ //turn right
1C65 C3        5927            clr     c
1C66 E4        5928            clr     a
1C67 9A        5929            subb    a,r2
1C68 E4        5930            clr     a
1C69 6480      5931            xrl     a,#0x80
1C6B 8BF0      5932            mov     b,r3
1C6D 63F080    5933            xrl     b,#0x80
1C70 95F0      5934            subb    a,b
1C72 D005      5935            pop     ar5
1C74 D004      5936            pop     ar4
1C76 4000      5937            jc      L041067?
1C78 020000    5938            ljmp    L041008?
1C7B           5939   L041067?:
1C7B           5940   ;        main.c:1180: L_motor_dir = 1; 
1C7B C004      5941            push    ar4
1C7D C005      5942            push    ar5
1C7F 905008    5943            mov     dptr,#_L_motor_dir
1C82 7401      5944            mov     a,#0x01
1C84 F0        5945            movx    @dptr,a
1C85           5946   ;        main.c:1181: R_motor_dir = 0;
1C85 904FC8    5947            mov     dptr,#_R_motor_dir
1C88 E4        5948            clr     a
1C89 F0        5949            movx    @dptr,a
1C8A           5950   ;        main.c:1182: curr_angle += angle_diff * 1.45; // TUNE THIS
1C8A C004      5951            push    ar4
1C8C C005      5952            push    ar5
1C8E C000      5953            push    ar0
1C90 C001      5954            push    ar1
1C92 904C38    5955            mov     dptr,#_angle_diff
1C95 E0        5956            movx    a,@dptr
1C96 C0E0      5957            push    acc
1C98 A3        5958            inc     dptr
1C99 E0        5959            movx    a,@dptr
1C9A C0E0      5960            push    acc
1C9C A3        5961            inc     dptr
1C9D E0        5962            movx    a,@dptr
1C9E C0E0      5963            push    acc
1CA0 A3        5964            inc     dptr
1CA1 E0        5965            movx    a,@dptr
1CA2 C0E0      5966            push    acc
1CA4 90999A    5967            mov     dptr,#0x999A
1CA7 75F0B9    5968            mov     b,#0xB9
1CAA 743F      5969            mov     a,#0x3F
1CAC 120000    5970            lcall   ___fsmul
1CAF 8582A8    5971            mov     _Joystick_Control_sloc3_1_0,dpl
1CB2 8583A9    5972            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
1CB5 85F0AA    5973            mov     (_Joystick_Control_sloc3_1_0 + 2),b
1CB8 F5AB      5974            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1CBA E581      5975            mov     a,sp
1CBC 24FC      5976            add     a,#0xfc
1CBE F581      5977            mov     sp,a
1CC0 D001      5978            pop     ar1
1CC2 D000      5979            pop     ar0
1CC4 D005      5980            pop     ar5
1CC6 D004      5981            pop     ar4
1CC8 904CF8    5982            mov     dptr,#_curr_angle
1CCB E0        5983            movx    a,@dptr
1CCC FC        5984            mov     r4,a
1CCD A3        5985            inc     dptr
1CCE E0        5986            movx    a,@dptr
1CCF FD        5987            mov     r5,a
1CD0 A3        5988            inc     dptr
1CD1 E0        5989            movx    a,@dptr
1CD2 FA        5990            mov     r2,a
1CD3 A3        5991            inc     dptr
1CD4 E0        5992            movx    a,@dptr
1CD5 FB        5993            mov     r3,a
1CD6 C000      5994            push    ar0
1CD8 C001      5995            push    ar1
1CDA C0A8      5996            push    _Joystick_Control_sloc3_1_0
1CDC C0A9      5997            push    (_Joystick_Control_sloc3_1_0 + 1)
1CDE C0AA      5998            push    (_Joystick_Control_sloc3_1_0 + 2)
1CE0 C0AB      5999            push    (_Joystick_Control_sloc3_1_0 + 3)
1CE2 8C82      6000            mov     dpl,r4
1CE4 8D83      6001            mov     dph,r5
1CE6 8AF0      6002            mov     b,r2
1CE8 EB        6003            mov     a,r3
1CE9 120000    6004            lcall   ___fsadd
1CEC AA82      6005            mov     r2,dpl
1CEE AB83      6006            mov     r3,dph
1CF0 ACF0      6007            mov     r4,b
1CF2 FD        6008            mov     r5,a
1CF3 E581      6009            mov     a,sp
1CF5 24FC      6010            add     a,#0xfc
1CF7 F581      6011            mov     sp,a
1CF9 D001      6012            pop     ar1
1CFB D000      6013            pop     ar0
1CFD 904CF8    6014            mov     dptr,#_curr_angle
1D00 EA        6015            mov     a,r2
1D01 F0        6016            movx    @dptr,a
1D02 A3        6017            inc     dptr
1D03 EB        6018            mov     a,r3
1D04 F0        6019            movx    @dptr,a
1D05 A3        6020            inc     dptr
1D06 EC        6021            mov     a,r4
1D07 F0        6022            movx    @dptr,a
1D08 A3        6023            inc     dptr
1D09 ED        6024            mov     a,r5
1D0A F0        6025            movx    @dptr,a
1D0B D005      6026            pop     ar5
1D0D D004      6027            pop     ar4
1D0F 020000    6028            ljmp    L041009?
1D12           6029   L041008?:
1D12           6030   ;        main.c:1185: L_motor_dir = 0; 
1D12 C004      6031            push    ar4
1D14 C005      6032            push    ar5
1D16 905008    6033            mov     dptr,#_L_motor_dir
1D19 E4        6034            clr     a
1D1A F0        6035            movx    @dptr,a
1D1B           6036   ;        main.c:1186: R_motor_dir = 1; 
1D1B 904FC8    6037            mov     dptr,#_R_motor_dir
1D1E 7401      6038            mov     a,#0x01
1D20 F0        6039            movx    @dptr,a
1D21           6040   ;        main.c:1187: curr_angle -= angle_diff * 1.4; // TUNE THIS
1D21 C004      6041            push    ar4
1D23 C005      6042            push    ar5
1D25 C000      6043            push    ar0
1D27 C001      6044            push    ar1
1D29 904C38    6045            mov     dptr,#_angle_diff
1D2C E0        6046            movx    a,@dptr
1D2D C0E0      6047            push    acc
1D2F A3        6048            inc     dptr
1D30 E0        6049            movx    a,@dptr
1D31 C0E0      6050            push    acc
1D33 A3        6051            inc     dptr
1D34 E0        6052            movx    a,@dptr
1D35 C0E0      6053            push    acc
1D37 A3        6054            inc     dptr
1D38 E0        6055            movx    a,@dptr
1D39 C0E0      6056            push    acc
1D3B 903333    6057            mov     dptr,#0x3333
1D3E 75F0B3    6058            mov     b,#0xB3
1D41 743F      6059            mov     a,#0x3F
1D43 120000    6060            lcall   ___fsmul
1D46 8582A8    6061            mov     _Joystick_Control_sloc3_1_0,dpl
1D49 8583A9    6062            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
1D4C 85F0AA    6063            mov     (_Joystick_Control_sloc3_1_0 + 2),b
1D4F F5AB      6064            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1D51 E581      6065            mov     a,sp
1D53 24FC      6066            add     a,#0xfc
1D55 F581      6067            mov     sp,a
1D57 D001      6068            pop     ar1
1D59 D000      6069            pop     ar0
1D5B D005      6070            pop     ar5
1D5D D004      6071            pop     ar4
1D5F 904CF8    6072            mov     dptr,#_curr_angle
1D62 E0        6073            movx    a,@dptr
1D63 FC        6074            mov     r4,a
1D64 A3        6075            inc     dptr
1D65 E0        6076            movx    a,@dptr
1D66 FD        6077            mov     r5,a
1D67 A3        6078            inc     dptr
1D68 E0        6079            movx    a,@dptr
1D69 FA        6080            mov     r2,a
1D6A A3        6081            inc     dptr
1D6B E0        6082            movx    a,@dptr
1D6C FB        6083            mov     r3,a
1D6D C000      6084            push    ar0
1D6F C001      6085            push    ar1
1D71 C0A8      6086            push    _Joystick_Control_sloc3_1_0
1D73 C0A9      6087            push    (_Joystick_Control_sloc3_1_0 + 1)
1D75 C0AA      6088            push    (_Joystick_Control_sloc3_1_0 + 2)
1D77 C0AB      6089            push    (_Joystick_Control_sloc3_1_0 + 3)
1D79 8C82      6090            mov     dpl,r4
1D7B 8D83      6091            mov     dph,r5
1D7D 8AF0      6092            mov     b,r2
1D7F EB        6093            mov     a,r3
1D80 120000    6094            lcall   ___fssub
1D83 AA82      6095            mov     r2,dpl
1D85 AB83      6096            mov     r3,dph
1D87 ACF0      6097            mov     r4,b
1D89 FD        6098            mov     r5,a
1D8A E581      6099            mov     a,sp
1D8C 24FC      6100            add     a,#0xfc
1D8E F581      6101            mov     sp,a
1D90 D001      6102            pop     ar1
1D92 D000      6103            pop     ar0
1D94 904CF8    6104            mov     dptr,#_curr_angle
1D97 EA        6105            mov     a,r2
1D98 F0        6106            movx    @dptr,a
1D99 A3        6107            inc     dptr
1D9A EB        6108            mov     a,r3
1D9B F0        6109            movx    @dptr,a
1D9C A3        6110            inc     dptr
1D9D EC        6111            mov     a,r4
1D9E F0        6112            movx    @dptr,a
1D9F A3        6113            inc     dptr
1DA0 ED        6114            mov     a,r5
1DA1 F0        6115            movx    @dptr,a
1DA2           6116   ;        main.c:1256: return curr_angle; 
1DA2 D005      6117            pop     ar5
1DA4 D004      6118            pop     ar4
1DA6           6119   ;        main.c:1187: curr_angle -= angle_diff * 1.4; // TUNE THIS
1DA6           6120   L041009?:
1DA6           6121   ;        main.c:1189: if (curr_angle > 360.0) curr_angle -= 360.0; 
1DA6 904CF8    6122            mov     dptr,#_curr_angle
1DA9 E0        6123            movx    a,@dptr
1DAA F5A8      6124            mov     _Joystick_Control_sloc3_1_0,a
1DAC A3        6125            inc     dptr
1DAD E0        6126            movx    a,@dptr
1DAE F5A9      6127            mov     (_Joystick_Control_sloc3_1_0 + 1),a
1DB0 A3        6128            inc     dptr
1DB1 E0        6129            movx    a,@dptr
1DB2 F5AA      6130            mov     (_Joystick_Control_sloc3_1_0 + 2),a
1DB4 A3        6131            inc     dptr
1DB5 E0        6132            movx    a,@dptr
1DB6 F5AB      6133            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1DB8 C004      6134            push    ar4
1DBA C005      6135            push    ar5
1DBC C000      6136            push    ar0
1DBE C001      6137            push    ar1
1DC0 E4        6138            clr     a
1DC1 C0E0      6139            push    acc
1DC3 C0E0      6140            push    acc
1DC5 74B4      6141            mov     a,#0xB4
1DC7 C0E0      6142            push    acc
1DC9 7443      6143            mov     a,#0x43
1DCB C0E0      6144            push    acc
1DCD 85A882    6145            mov     dpl,_Joystick_Control_sloc3_1_0
1DD0 85A983    6146            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
1DD3 85AAF0    6147            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
1DD6 E5AB      6148            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
1DD8 120000    6149            lcall   ___fsgt
1DDB AA82      6150            mov     r2,dpl
1DDD E581      6151            mov     a,sp
1DDF 24FC      6152            add     a,#0xfc
1DE1 F581      6153            mov     sp,a
1DE3 D001      6154            pop     ar1
1DE5 D000      6155            pop     ar0
1DE7 D005      6156            pop     ar5
1DE9 D004      6157            pop     ar4
1DEB EA        6158            mov     a,r2
1DEC 6000      6159            jz      L041011?
1DEE C004      6160            push    ar4
1DF0 C005      6161            push    ar5
1DF2 C000      6162            push    ar0
1DF4 C001      6163            push    ar1
1DF6 E4        6164            clr     a
1DF7 C0E0      6165            push    acc
1DF9 C0E0      6166            push    acc
1DFB 74B4      6167            mov     a,#0xB4
1DFD C0E0      6168            push    acc
1DFF 7443      6169            mov     a,#0x43
1E01 C0E0      6170            push    acc
1E03 85A882    6171            mov     dpl,_Joystick_Control_sloc3_1_0
1E06 85A983    6172            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
1E09 85AAF0    6173            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
1E0C E5AB      6174            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
1E0E 120000    6175            lcall   ___fssub
1E11 AA82      6176            mov     r2,dpl
1E13 AB83      6177            mov     r3,dph
1E15 AEF0      6178            mov     r6,b
1E17 FF        6179            mov     r7,a
1E18 E581      6180            mov     a,sp
1E1A 24FC      6181            add     a,#0xfc
1E1C F581      6182            mov     sp,a
1E1E D001      6183            pop     ar1
1E20 D000      6184            pop     ar0
1E22 D005      6185            pop     ar5
1E24 D004      6186            pop     ar4
1E26 904CF8    6187            mov     dptr,#_curr_angle
1E29 EA        6188            mov     a,r2
1E2A F0        6189            movx    @dptr,a
1E2B A3        6190            inc     dptr
1E2C EB        6191            mov     a,r3
1E2D F0        6192            movx    @dptr,a
1E2E A3        6193            inc     dptr
1E2F EE        6194            mov     a,r6
1E30 F0        6195            movx    @dptr,a
1E31 A3        6196            inc     dptr
1E32 EF        6197            mov     a,r7
1E33 F0        6198            movx    @dptr,a
1E34           6199   L041011?:
1E34           6200   ;        main.c:1190: if (curr_angle < 0.0) curr_angle += 360.0; 
1E34 904CF8    6201            mov     dptr,#_curr_angle
1E37 E0        6202            movx    a,@dptr
1E38 F5A8      6203            mov     _Joystick_Control_sloc3_1_0,a
1E3A A3        6204            inc     dptr
1E3B E0        6205            movx    a,@dptr
1E3C F5A9      6206            mov     (_Joystick_Control_sloc3_1_0 + 1),a
1E3E A3        6207            inc     dptr
1E3F E0        6208            movx    a,@dptr
1E40 F5AA      6209            mov     (_Joystick_Control_sloc3_1_0 + 2),a
1E42 A3        6210            inc     dptr
1E43 E0        6211            movx    a,@dptr
1E44 F5AB      6212            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1E46 C004      6213            push    ar4
1E48 C005      6214            push    ar5
1E4A C000      6215            push    ar0
1E4C C001      6216            push    ar1
1E4E E4        6217            clr     a
1E4F C0E0      6218            push    acc
1E51 C0E0      6219            push    acc
1E53 C0E0      6220            push    acc
1E55 C0E0      6221            push    acc
1E57 85A882    6222            mov     dpl,_Joystick_Control_sloc3_1_0
1E5A 85A983    6223            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
1E5D 85AAF0    6224            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
1E60 E5AB      6225            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
1E62 120000    6226            lcall   ___fslt
1E65 AA82      6227            mov     r2,dpl
1E67 E581      6228            mov     a,sp
1E69 24FC      6229            add     a,#0xfc
1E6B F581      6230            mov     sp,a
1E6D D001      6231            pop     ar1
1E6F D000      6232            pop     ar0
1E71 D005      6233            pop     ar5
1E73 D004      6234            pop     ar4
1E75 EA        6235            mov     a,r2
1E76 6000      6236            jz      L041015?
1E78 C004      6237            push    ar4
1E7A C005      6238            push    ar5
1E7C C000      6239            push    ar0
1E7E C001      6240            push    ar1
1E80 E4        6241            clr     a
1E81 C0E0      6242            push    acc
1E83 C0E0      6243            push    acc
1E85 74B4      6244            mov     a,#0xB4
1E87 C0E0      6245            push    acc
1E89 7443      6246            mov     a,#0x43
1E8B C0E0      6247            push    acc
1E8D 85A882    6248            mov     dpl,_Joystick_Control_sloc3_1_0
1E90 85A983    6249            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
1E93 85AAF0    6250            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
1E96 E5AB      6251            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
1E98 120000    6252            lcall   ___fsadd
1E9B AA82      6253            mov     r2,dpl
1E9D AB83      6254            mov     r3,dph
1E9F AEF0      6255            mov     r6,b
1EA1 FF        6256            mov     r7,a
1EA2 E581      6257            mov     a,sp
1EA4 24FC      6258            add     a,#0xfc
1EA6 F581      6259            mov     sp,a
1EA8 D001      6260            pop     ar1
1EAA D000      6261            pop     ar0
1EAC D005      6262            pop     ar5
1EAE D004      6263            pop     ar4
1EB0 904CF8    6264            mov     dptr,#_curr_angle
1EB3 EA        6265            mov     a,r2
1EB4 F0        6266            movx    @dptr,a
1EB5 A3        6267            inc     dptr
1EB6 EB        6268            mov     a,r3
1EB7 F0        6269            movx    @dptr,a
1EB8 A3        6270            inc     dptr
1EB9 EE        6271            mov     a,r6
1EBA F0        6272            movx    @dptr,a
1EBB A3        6273            inc     dptr
1EBC EF        6274            mov     a,r7
1EBD F0        6275            movx    @dptr,a
1EBE           6276   L041015?:
1EBE           6277   ;        main.c:1192: if ((vx_error>5)&&(vy_error)>5){
1EBE E558      6278            mov     a,_Joystick_Control_sloc2_1_0
1EC0 7000      6279            jnz     L041070?
1EC2 020000    6280            ljmp    L041040?
1EC5           6281   L041070?:
1EC5 E5B8      6282            mov     a,_Joystick_Control_sloc0_1_0
1EC7 7000      6283            jnz     L041071?
1EC9 020000    6284            ljmp    L041040?
1ECC           6285   L041071?:
1ECC           6286   ;        main.c:1194: angle_diff = fabsf(raw_angle - last_raw_angle);
1ECC 904CB8    6287            mov     dptr,#_raw_angle
1ECF E0        6288            movx    a,@dptr
1ED0 FA        6289            mov     r2,a
1ED1 A3        6290            inc     dptr
1ED2 E0        6291            movx    a,@dptr
1ED3 FB        6292            mov     r3,a
1ED4 A3        6293            inc     dptr
1ED5 E0        6294            movx    a,@dptr
1ED6 FE        6295            mov     r6,a
1ED7 A3        6296            inc     dptr
1ED8 E0        6297            movx    a,@dptr
1ED9 FF        6298            mov     r7,a
1EDA C004      6299            push    ar4
1EDC C005      6300            push    ar5
1EDE C000      6301            push    ar0
1EE0 C001      6302            push    ar1
1EE2 904C78    6303            mov     dptr,#_last_raw_angle
1EE5 E0        6304            movx    a,@dptr
1EE6 C0E0      6305            push    acc
1EE8 A3        6306            inc     dptr
1EE9 E0        6307            movx    a,@dptr
1EEA C0E0      6308            push    acc
1EEC A3        6309            inc     dptr
1EED E0        6310            movx    a,@dptr
1EEE C0E0      6311            push    acc
1EF0 A3        6312            inc     dptr
1EF1 E0        6313            movx    a,@dptr
1EF2 C0E0      6314            push    acc
1EF4 8A82      6315            mov     dpl,r2
1EF6 8B83      6316            mov     dph,r3
1EF8 8EF0      6317            mov     b,r6
1EFA EF        6318            mov     a,r7
1EFB 120000    6319            lcall   ___fssub
1EFE AA82      6320            mov     r2,dpl
1F00 AB83      6321            mov     r3,dph
1F02 AEF0      6322            mov     r6,b
1F04 FF        6323            mov     r7,a
1F05 E581      6324            mov     a,sp
1F07 24FC      6325            add     a,#0xfc
1F09 F581      6326            mov     sp,a
1F0B 8A82      6327            mov     dpl,r2
1F0D 8B83      6328            mov     dph,r3
1F0F 8EF0      6329            mov     b,r6
1F11 EF        6330            mov     a,r7
1F12 120000    6331            lcall   _fabsf
1F15 858248    6332            mov     _Joystick_Control_sloc5_1_0,dpl
1F18 858349    6333            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1F1B 85F04A    6334            mov     (_Joystick_Control_sloc5_1_0 + 2),b
1F1E F54B      6335            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1F20 D001      6336            pop     ar1
1F22 D000      6337            pop     ar0
1F24 D005      6338            pop     ar5
1F26 D004      6339            pop     ar4
1F28 904C38    6340            mov     dptr,#_angle_diff
1F2B E548      6341            mov     a,_Joystick_Control_sloc5_1_0
1F2D F0        6342            movx    @dptr,a
1F2E A3        6343            inc     dptr
1F2F E549      6344            mov     a,(_Joystick_Control_sloc5_1_0 + 1)
1F31 F0        6345            movx    @dptr,a
1F32 A3        6346            inc     dptr
1F33 E54A      6347            mov     a,(_Joystick_Control_sloc5_1_0 + 2)
1F35 F0        6348            movx    @dptr,a
1F36 A3        6349            inc     dptr
1F37 E54B      6350            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1F39 F0        6351            movx    @dptr,a
1F3A           6352   ;        main.c:1195: if (vy_err>0){
1F3A 90D2C8    6353            mov     dptr,#_Joystick_Control_vy_err_1_228
1F3D E0        6354            movx    a,@dptr
1F3E F5A8      6355            mov     _Joystick_Control_sloc3_1_0,a
1F40 A3        6356            inc     dptr
1F41 E0        6357            movx    a,@dptr
1F42 F5A9      6358            mov     (_Joystick_Control_sloc3_1_0 + 1),a
1F44 C3        6359            clr     c
1F45 E4        6360            clr     a
1F46 95A8      6361            subb    a,_Joystick_Control_sloc3_1_0
1F48 E4        6362            clr     a
1F49 6480      6363            xrl     a,#0x80
1F4B 85A9F0    6364            mov     b,(_Joystick_Control_sloc3_1_0 + 1)
1F4E 63F080    6365            xrl     b,#0x80
1F51 95F0      6366            subb    a,b
1F53 4000      6367            jc      L041072?
1F55 020000    6368            ljmp    L041027?
1F58           6369   L041072?:
1F58           6370   ;        main.c:1196: L_motor_dir = 0; 
1F58 905008    6371            mov     dptr,#_L_motor_dir
1F5B           6372   ;        main.c:1197: R_motor_dir = 0; 
1F5B E4        6373            clr     a
1F5C F0        6374            movx    @dptr,a
1F5D 904FC8    6375            mov     dptr,#_R_motor_dir
1F60 F0        6376            movx    @dptr,a
1F61           6377   ;        main.c:1199: if (vx_err>0){
1F61 90D278    6378            mov     dptr,#_Joystick_Control_vx_err_1_228
1F64 E0        6379            movx    a,@dptr
1F65 FA        6380            mov     r2,a
1F66 A3        6381            inc     dptr
1F67 E0        6382            movx    a,@dptr
1F68 FB        6383            mov     r3,a
1F69 C3        6384            clr     c
1F6A E4        6385            clr     a
1F6B 9A        6386            subb    a,r2
1F6C E4        6387            clr     a
1F6D 6480      6388            xrl     a,#0x80
1F6F 8BF0      6389            mov     b,r3
1F71 63F080    6390            xrl     b,#0x80
1F74 95F0      6391            subb    a,b
1F76 4000      6392            jc      L041073?
1F78 020000    6393            ljmp    L041024?
1F7B           6394   L041073?:
1F7B           6395   ;        main.c:1201: if (vy*100<=vy_thres*100/2){
1F7B 8C00      6396            mov     __mulint_PARM_2,r4
1F7D 8D01      6397            mov     (__mulint_PARM_2 + 1),r5
1F7F 900064    6398            mov     dptr,#0x0064
1F82 C004      6399            push    ar4
1F84 C005      6400            push    ar5
1F86 C000      6401            push    ar0
1F88 C001      6402            push    ar1
1F8A 120000    6403            lcall   __mulint
1F8D AA82      6404            mov     r2,dpl
1F8F AB83      6405            mov     r3,dph
1F91 D001      6406            pop     ar1
1F93 D000      6407            pop     ar0
1F95 D005      6408            pop     ar5
1F97 D004      6409            pop     ar4
1F99 904EC8    6410            mov     dptr,#_vy_thres
1F9C E0        6411            movx    a,@dptr
1F9D F500      6412            mov     __mulint_PARM_2,a
1F9F A3        6413            inc     dptr
1FA0 E0        6414            movx    a,@dptr
1FA1 F501      6415            mov     (__mulint_PARM_2 + 1),a
1FA3 900064    6416            mov     dptr,#0x0064
1FA6 C002      6417            push    ar2
1FA8 C003      6418            push    ar3
1FAA C004      6419            push    ar4
1FAC C005      6420            push    ar5
1FAE C000      6421            push    ar0
1FB0 C001      6422            push    ar1
1FB2 120000    6423            lcall   __mulint
1FB5 AE82      6424            mov     r6,dpl
1FB7 AF83      6425            mov     r7,dph
1FB9 750002    6426            mov     __divsint_PARM_2,#0x02
1FBC E4        6427            clr     a
1FBD F501      6428            mov     (__divsint_PARM_2 + 1),a
1FBF 8E82      6429            mov     dpl,r6
1FC1 8F83      6430            mov     dph,r7
1FC3 120000    6431            lcall   __divsint
1FC6 AE82      6432            mov     r6,dpl
1FC8 AF83      6433            mov     r7,dph
1FCA D001      6434            pop     ar1
1FCC D000      6435            pop     ar0
1FCE D005      6436            pop     ar5
1FD0 D004      6437            pop     ar4
1FD2 D003      6438            pop     ar3
1FD4 D002      6439            pop     ar2
1FD6 C3        6440            clr     c
1FD7 EE        6441            mov     a,r6
1FD8 9A        6442            subb    a,r2
1FD9 EF        6443            mov     a,r7
1FDA 6480      6444            xrl     a,#0x80
1FDC 8BF0      6445            mov     b,r3
1FDE 63F080    6446            xrl     b,#0x80
1FE1 95F0      6447            subb    a,b
1FE3 5000      6448            jnc     L041074?
1FE5 020000    6449            ljmp    L041018?
1FE8           6450   L041074?:
1FE8           6451   ;        main.c:1202: pwm_left = vy_error; 
1FE8 90D228    6452            mov     dptr,#_Joystick_Control_vy_error_1_228
1FEB E0        6453            movx    a,@dptr
1FEC F508      6454            mov     _Joystick_Control_sloc1_1_0,a
1FEE A3        6455            inc     dptr
1FEF E0        6456            movx    a,@dptr
1FF0 F509      6457            mov     (_Joystick_Control_sloc1_1_0 + 1),a
1FF2 905088    6458            mov     dptr,#_pwm_left
1FF5 E508      6459            mov     a,_Joystick_Control_sloc1_1_0
1FF7 F0        6460            movx    @dptr,a
1FF8           6461   ;        main.c:1203: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
1FF8 904D38    6462            mov     dptr,#_pwm_corr
1FFB E0        6463            movx    a,@dptr
1FFC F5F8      6464            mov     _Joystick_Control_sloc4_1_0,a
1FFE A3        6465            inc     dptr
1FFF E0        6466            movx    a,@dptr
2000 F5F9      6467            mov     (_Joystick_Control_sloc4_1_0 + 1),a
2002 A3        6468            inc     dptr
2003 E0        6469            movx    a,@dptr
2004 F5FA      6470            mov     (_Joystick_Control_sloc4_1_0 + 2),a
2006 A3        6471            inc     dptr
2007 E0        6472            movx    a,@dptr
2008 F5FB      6473            mov     (_Joystick_Control_sloc4_1_0 + 3),a
200A 850882    6474            mov     dpl,_Joystick_Control_sloc1_1_0
200D 850983    6475            mov     dph,(_Joystick_Control_sloc1_1_0 + 1)
2010 C004      6476            push    ar4
2012 C005      6477            push    ar5
2014 C000      6478            push    ar0
2016 C001      6479            push    ar1
2018 120000    6480            lcall   ___sint2fs
201B AA82      6481            mov     r2,dpl
201D AB83      6482            mov     r3,dph
201F AEF0      6483            mov     r6,b
2021 FF        6484            mov     r7,a
2022 C002      6485            push    ar2
2024 C003      6486            push    ar3
2026 C006      6487            push    ar6
2028 C007      6488            push    ar7
202A 85F882    6489            mov     dpl,_Joystick_Control_sloc4_1_0
202D 85F983    6490            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
2030 85FAF0    6491            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
2033 E5FB      6492            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
2035 120000    6493            lcall   ___fsmul
2038 AA82      6494            mov     r2,dpl
203A AB83      6495            mov     r3,dph
203C AEF0      6496            mov     r6,b
203E FF        6497            mov     r7,a
203F E581      6498            mov     a,sp
2041 24FC      6499            add     a,#0xfc
2043 F581      6500            mov     sp,a
2045 C002      6501            push    ar2
2047 C003      6502            push    ar3
2049 C006      6503            push    ar6
204B C007      6504            push    ar7
204D 900000    6505            mov     dptr,#0x0000
2050 75F0C8    6506            mov     b,#0xC8
2053 7442      6507            mov     a,#0x42
2055 120000    6508            lcall   ___fsmul
2058 8582F8    6509            mov     _Joystick_Control_sloc4_1_0,dpl
205B 8583F9    6510            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
205E 85F0FA    6511            mov     (_Joystick_Control_sloc4_1_0 + 2),b
2061 F5FB      6512            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2063 E581      6513            mov     a,sp
2065 24FC      6514            add     a,#0xfc
2067 F581      6515            mov     sp,a
2069 D001      6516            pop     ar1
206B D000      6517            pop     ar0
206D E508      6518            mov     a,_Joystick_Control_sloc1_1_0
206F 28        6519            add     a,r0
2070 F582      6520            mov     dpl,a
2072 E509      6521            mov     a,(_Joystick_Control_sloc1_1_0 + 1)
2074 39        6522            addc    a,r1
2075 F583      6523            mov     dph,a
2077 C000      6524            push    ar0
2079 C001      6525            push    ar1
207B 120000    6526            lcall   ___sint2fs
207E AA82      6527            mov     r2,dpl
2080 AB83      6528            mov     r3,dph
2082 AEF0      6529            mov     r6,b
2084 FF        6530            mov     r7,a
2085 C002      6531            push    ar2
2087 C003      6532            push    ar3
2089 C006      6533            push    ar6
208B C007      6534            push    ar7
208D 85F882    6535            mov     dpl,_Joystick_Control_sloc4_1_0
2090 85F983    6536            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
2093 85FAF0    6537            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
2096 E5FB      6538            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
2098 120000    6539            lcall   ___fsdiv
209B AA82      6540            mov     r2,dpl
209D AB83      6541            mov     r3,dph
209F AEF0      6542            mov     r6,b
20A1 FF        6543            mov     r7,a
20A2 E581      6544            mov     a,sp
20A4 24FC      6545            add     a,#0xfc
20A6 F581      6546            mov     sp,a
20A8 8A82      6547            mov     dpl,r2
20AA 8B83      6548            mov     dph,r3
20AC 8EF0      6549            mov     b,r6
20AE EF        6550            mov     a,r7
20AF 120000    6551            lcall   ___fs2uchar
20B2 E582      6552            mov     a,dpl
20B4 D001      6553            pop     ar1
20B6 D000      6554            pop     ar0
20B8 D005      6555            pop     ar5
20BA D004      6556            pop     ar4
20BC 905048    6557            mov     dptr,#_pwm_right
20BF F0        6558            movx    @dptr,a
20C0 020000    6559            ljmp    L041019?
20C3           6560   L041018?:
20C3           6561   ;        main.c:1206: pwm_left = vx_error; 
20C3 905088    6562            mov     dptr,#_pwm_left
20C6 E8        6563            mov     a,r0
20C7 F0        6564            movx    @dptr,a
20C8           6565   ;        main.c:1207: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
20C8 904D38    6566            mov     dptr,#_pwm_corr
20CB E0        6567            movx    a,@dptr
20CC F5F8      6568            mov     _Joystick_Control_sloc4_1_0,a
20CE A3        6569            inc     dptr
20CF E0        6570            movx    a,@dptr
20D0 F5F9      6571            mov     (_Joystick_Control_sloc4_1_0 + 1),a
20D2 A3        6572            inc     dptr
20D3 E0        6573            movx    a,@dptr
20D4 F5FA      6574            mov     (_Joystick_Control_sloc4_1_0 + 2),a
20D6 A3        6575            inc     dptr
20D7 E0        6576            movx    a,@dptr
20D8 F5FB      6577            mov     (_Joystick_Control_sloc4_1_0 + 3),a
20DA 8882      6578            mov     dpl,r0
20DC 8983      6579            mov     dph,r1
20DE C004      6580            push    ar4
20E0 C005      6581            push    ar5
20E2 C000      6582            push    ar0
20E4 C001      6583            push    ar1
20E6 120000    6584            lcall   ___sint2fs
20E9 AA82      6585            mov     r2,dpl
20EB AB83      6586            mov     r3,dph
20ED AEF0      6587            mov     r6,b
20EF FF        6588            mov     r7,a
20F0 C002      6589            push    ar2
20F2 C003      6590            push    ar3
20F4 C006      6591            push    ar6
20F6 C007      6592            push    ar7
20F8 85F882    6593            mov     dpl,_Joystick_Control_sloc4_1_0
20FB 85F983    6594            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
20FE 85FAF0    6595            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
2101 E5FB      6596            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
2103 120000    6597            lcall   ___fsmul
2106 AA82      6598            mov     r2,dpl
2108 AB83      6599            mov     r3,dph
210A AEF0      6600            mov     r6,b
210C FF        6601            mov     r7,a
210D E581      6602            mov     a,sp
210F 24FC      6603            add     a,#0xfc
2111 F581      6604            mov     sp,a
2113 C002      6605            push    ar2
2115 C003      6606            push    ar3
2117 C006      6607            push    ar6
2119 C007      6608            push    ar7
211B 900000    6609            mov     dptr,#0x0000
211E 75F0C8    6610            mov     b,#0xC8
2121 7442      6611            mov     a,#0x42
2123 120000    6612            lcall   ___fsmul
2126 8582F8    6613            mov     _Joystick_Control_sloc4_1_0,dpl
2129 8583F9    6614            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
212C 85F0FA    6615            mov     (_Joystick_Control_sloc4_1_0 + 2),b
212F F5FB      6616            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2131 E581      6617            mov     a,sp
2133 24FC      6618            add     a,#0xfc
2135 F581      6619            mov     sp,a
2137 D001      6620            pop     ar1
2139 D000      6621            pop     ar0
213B 90D228    6622            mov     dptr,#_Joystick_Control_vy_error_1_228
213E E0        6623            movx    a,@dptr
213F FA        6624            mov     r2,a
2140 A3        6625            inc     dptr
2141 E0        6626            movx    a,@dptr
2142 FB        6627            mov     r3,a
2143 EA        6628            mov     a,r2
2144 28        6629            add     a,r0
2145 F582      6630            mov     dpl,a
2147 EB        6631            mov     a,r3
2148 39        6632            addc    a,r1
2149 F583      6633            mov     dph,a
214B C000      6634            push    ar0
214D C001      6635            push    ar1
214F 120000    6636            lcall   ___sint2fs
2152 AA82      6637            mov     r2,dpl
2154 AB83      6638            mov     r3,dph
2156 AEF0      6639            mov     r6,b
2158 FF        6640            mov     r7,a
2159 C002      6641            push    ar2
215B C003      6642            push    ar3
215D C006      6643            push    ar6
215F C007      6644            push    ar7
2161 85F882    6645            mov     dpl,_Joystick_Control_sloc4_1_0
2164 85F983    6646            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
2167 85FAF0    6647            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
216A E5FB      6648            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
216C 120000    6649            lcall   ___fsdiv
216F AA82      6650            mov     r2,dpl
2171 AB83      6651            mov     r3,dph
2173 AEF0      6652            mov     r6,b
2175 FF        6653            mov     r7,a
2176 E581      6654            mov     a,sp
2178 24FC      6655            add     a,#0xfc
217A F581      6656            mov     sp,a
217C 8A82      6657            mov     dpl,r2
217E 8B83      6658            mov     dph,r3
2180 8EF0      6659            mov     b,r6
2182 EF        6660            mov     a,r7
2183 120000    6661            lcall   ___fs2uchar
2186 E582      6662            mov     a,dpl
2188 D001      6663            pop     ar1
218A D000      6664            pop     ar0
218C D005      6665            pop     ar5
218E D004      6666            pop     ar4
2190 905048    6667            mov     dptr,#_pwm_right
2193 F0        6668            movx    @dptr,a
2194           6669   ;        main.c:1256: return curr_angle; 
2194           6670   ;        main.c:1207: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
2194           6671   L041019?:
2194           6672   ;        main.c:1209: curr_angle += angle_diff * 1.5; // TUNE THIS 
2194 C004      6673            push    ar4
2196 C005      6674            push    ar5
2198 C004      6675            push    ar4
219A C005      6676            push    ar5
219C C000      6677            push    ar0
219E C001      6678            push    ar1
21A0 C048      6679            push    _Joystick_Control_sloc5_1_0
21A2 C049      6680            push    (_Joystick_Control_sloc5_1_0 + 1)
21A4 C04A      6681            push    (_Joystick_Control_sloc5_1_0 + 2)
21A6 C04B      6682            push    (_Joystick_Control_sloc5_1_0 + 3)
21A8 900000    6683            mov     dptr,#0x0000
21AB 75F0C0    6684            mov     b,#0xC0
21AE 743F      6685            mov     a,#0x3F
21B0 120000    6686            lcall   ___fsmul
21B3 8582F8    6687            mov     _Joystick_Control_sloc4_1_0,dpl
21B6 8583F9    6688            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
21B9 85F0FA    6689            mov     (_Joystick_Control_sloc4_1_0 + 2),b
21BC F5FB      6690            mov     (_Joystick_Control_sloc4_1_0 + 3),a
21BE E581      6691            mov     a,sp
21C0 24FC      6692            add     a,#0xfc
21C2 F581      6693            mov     sp,a
21C4 D001      6694            pop     ar1
21C6 D000      6695            pop     ar0
21C8 D005      6696            pop     ar5
21CA D004      6697            pop     ar4
21CC 904CF8    6698            mov     dptr,#_curr_angle
21CF E0        6699            movx    a,@dptr
21D0 FE        6700            mov     r6,a
21D1 A3        6701            inc     dptr
21D2 E0        6702            movx    a,@dptr
21D3 FF        6703            mov     r7,a
21D4 A3        6704            inc     dptr
21D5 E0        6705            movx    a,@dptr
21D6 FA        6706            mov     r2,a
21D7 A3        6707            inc     dptr
21D8 E0        6708            movx    a,@dptr
21D9 FB        6709            mov     r3,a
21DA C000      6710            push    ar0
21DC C001      6711            push    ar1
21DE C0F8      6712            push    _Joystick_Control_sloc4_1_0
21E0 C0F9      6713            push    (_Joystick_Control_sloc4_1_0 + 1)
21E2 C0FA      6714            push    (_Joystick_Control_sloc4_1_0 + 2)
21E4 C0FB      6715            push    (_Joystick_Control_sloc4_1_0 + 3)
21E6 8E82      6716            mov     dpl,r6
21E8 8F83      6717            mov     dph,r7
21EA 8AF0      6718            mov     b,r2
21EC EB        6719            mov     a,r3
21ED 120000    6720            lcall   ___fsadd
21F0 AA82      6721            mov     r2,dpl
21F2 AB83      6722            mov     r3,dph
21F4 ACF0      6723            mov     r4,b
21F6 FD        6724            mov     r5,a
21F7 E581      6725            mov     a,sp
21F9 24FC      6726            add     a,#0xfc
21FB F581      6727            mov     sp,a
21FD D001      6728            pop     ar1
21FF D000      6729            pop     ar0
2201 904CF8    6730            mov     dptr,#_curr_angle
2204 EA        6731            mov     a,r2
2205 F0        6732            movx    @dptr,a
2206 A3        6733            inc     dptr
2207 EB        6734            mov     a,r3
2208 F0        6735            movx    @dptr,a
2209 A3        6736            inc     dptr
220A EC        6737            mov     a,r4
220B F0        6738            movx    @dptr,a
220C A3        6739            inc     dptr
220D ED        6740            mov     a,r5
220E F0        6741            movx    @dptr,a
220F D005      6742            pop     ar5
2211 D004      6743            pop     ar4
2213 020000    6744            ljmp    L041027?
2216           6745   L041024?:
2216           6746   ;        main.c:1213: if (vy*100<=vy_thres*100/2){
2216 8C00      6747            mov     __mulint_PARM_2,r4
2218 8D01      6748            mov     (__mulint_PARM_2 + 1),r5
221A 900064    6749            mov     dptr,#0x0064
221D C004      6750            push    ar4
221F C005      6751            push    ar5
2221 C000      6752            push    ar0
2223 C001      6753            push    ar1
2225 120000    6754            lcall   __mulint
2228 AA82      6755            mov     r2,dpl
222A AB83      6756            mov     r3,dph
222C D001      6757            pop     ar1
222E D000      6758            pop     ar0
2230 D005      6759            pop     ar5
2232 D004      6760            pop     ar4
2234 904EC8    6761            mov     dptr,#_vy_thres
2237 E0        6762            movx    a,@dptr
2238 F500      6763            mov     __mulint_PARM_2,a
223A A3        6764            inc     dptr
223B E0        6765            movx    a,@dptr
223C F501      6766            mov     (__mulint_PARM_2 + 1),a
223E 900064    6767            mov     dptr,#0x0064
2241 C002      6768            push    ar2
2243 C003      6769            push    ar3
2245 C004      6770            push    ar4
2247 C005      6771            push    ar5
2249 C000      6772            push    ar0
224B C001      6773            push    ar1
224D 120000    6774            lcall   __mulint
2250 AE82      6775            mov     r6,dpl
2252 AF83      6776            mov     r7,dph
2254 750002    6777            mov     __divsint_PARM_2,#0x02
2257 E4        6778            clr     a
2258 F501      6779            mov     (__divsint_PARM_2 + 1),a
225A 8E82      6780            mov     dpl,r6
225C 8F83      6781            mov     dph,r7
225E 120000    6782            lcall   __divsint
2261 AE82      6783            mov     r6,dpl
2263 AF83      6784            mov     r7,dph
2265 D001      6785            pop     ar1
2267 D000      6786            pop     ar0
2269 D005      6787            pop     ar5
226B D004      6788            pop     ar4
226D D003      6789            pop     ar3
226F D002      6790            pop     ar2
2271 C3        6791            clr     c
2272 EE        6792            mov     a,r6
2273 9A        6793            subb    a,r2
2274 EF        6794            mov     a,r7
2275 6480      6795            xrl     a,#0x80
2277 8BF0      6796            mov     b,r3
2279 63F080    6797            xrl     b,#0x80
227C 95F0      6798            subb    a,b
227E 5000      6799            jnc     L041075?
2280 020000    6800            ljmp    L041021?
2283           6801   L041075?:
2283           6802   ;        main.c:1214: pwm_left = vy_error*100/(vx_error+vy_error);
2283 90D228    6803            mov     dptr,#_Joystick_Control_vy_error_1_228
2286 E0        6804            movx    a,@dptr
2287 FA        6805            mov     r2,a
2288 A3        6806            inc     dptr
2289 E0        6807            movx    a,@dptr
228A FB        6808            mov     r3,a
228B 8A00      6809            mov     __mulint_PARM_2,r2
228D 8B01      6810            mov     (__mulint_PARM_2 + 1),r3
228F 900064    6811            mov     dptr,#0x0064
2292 C002      6812            push    ar2
2294 C003      6813            push    ar3
2296 C004      6814            push    ar4
2298 C005      6815            push    ar5
229A C000      6816            push    ar0
229C C001      6817            push    ar1
229E 120000    6818            lcall   __mulint
22A1 AE82      6819            mov     r6,dpl
22A3 AF83      6820            mov     r7,dph
22A5 D001      6821            pop     ar1
22A7 D000      6822            pop     ar0
22A9 D005      6823            pop     ar5
22AB D004      6824            pop     ar4
22AD D003      6825            pop     ar3
22AF D002      6826            pop     ar2
22B1 EA        6827            mov     a,r2
22B2 28        6828            add     a,r0
22B3 F500      6829            mov     __divsint_PARM_2,a
22B5 EB        6830            mov     a,r3
22B6 39        6831            addc    a,r1
22B7 F501      6832            mov     (__divsint_PARM_2 + 1),a
22B9 8E82      6833            mov     dpl,r6
22BB 8F83      6834            mov     dph,r7
22BD C002      6835            push    ar2
22BF C003      6836            push    ar3
22C1 C004      6837            push    ar4
22C3 C005      6838            push    ar5
22C5 C000      6839            push    ar0
22C7 C001      6840            push    ar1
22C9 120000    6841            lcall   __divsint
22CC AE82      6842            mov     r6,dpl
22CE D001      6843            pop     ar1
22D0 D000      6844            pop     ar0
22D2 D005      6845            pop     ar5
22D4 D004      6846            pop     ar4
22D6 D003      6847            pop     ar3
22D8 D002      6848            pop     ar2
22DA 905088    6849            mov     dptr,#_pwm_left
22DD EE        6850            mov     a,r6
22DE F0        6851            movx    @dptr,a
22DF           6852   ;        main.c:1215: pwm_right = vy_error*pwm_corr; 
22DF 8A82      6853            mov     dpl,r2
22E1 8B83      6854            mov     dph,r3
22E3 C004      6855            push    ar4
22E5 C005      6856            push    ar5
22E7 C000      6857            push    ar0
22E9 C001      6858            push    ar1
22EB 120000    6859            lcall   ___sint2fs
22EE AA82      6860            mov     r2,dpl
22F0 AB83      6861            mov     r3,dph
22F2 AEF0      6862            mov     r6,b
22F4 FF        6863            mov     r7,a
22F5 904D38    6864            mov     dptr,#_pwm_corr
22F8 E0        6865            movx    a,@dptr
22F9 C0E0      6866            push    acc
22FB A3        6867            inc     dptr
22FC E0        6868            movx    a,@dptr
22FD C0E0      6869            push    acc
22FF A3        6870            inc     dptr
2300 E0        6871            movx    a,@dptr
2301 C0E0      6872            push    acc
2303 A3        6873            inc     dptr
2304 E0        6874            movx    a,@dptr
2305 C0E0      6875            push    acc
2307 8A82      6876            mov     dpl,r2
2309 8B83      6877            mov     dph,r3
230B 8EF0      6878            mov     b,r6
230D EF        6879            mov     a,r7
230E 120000    6880            lcall   ___fsmul
2311 AA82      6881            mov     r2,dpl
2313 AB83      6882            mov     r3,dph
2315 AEF0      6883            mov     r6,b
2317 FF        6884            mov     r7,a
2318 E581      6885            mov     a,sp
231A 24FC      6886            add     a,#0xfc
231C F581      6887            mov     sp,a
231E 8A82      6888            mov     dpl,r2
2320 8B83      6889            mov     dph,r3
2322 8EF0      6890            mov     b,r6
2324 EF        6891            mov     a,r7
2325 120000    6892            lcall   ___fs2uchar
2328 E582      6893            mov     a,dpl
232A D001      6894            pop     ar1
232C D000      6895            pop     ar0
232E D005      6896            pop     ar5
2330 D004      6897            pop     ar4
2332 905048    6898            mov     dptr,#_pwm_right
2335 F0        6899            movx    @dptr,a
2336 020000    6900            ljmp    L041022?
2339           6901   L041021?:
2339           6902   ;        main.c:1218: pwm_left = vx_error*100/(vx_error+vy_error);
2339 8800      6903            mov     __mulint_PARM_2,r0
233B 8901      6904            mov     (__mulint_PARM_2 + 1),r1
233D 900064    6905            mov     dptr,#0x0064
2340 C004      6906            push    ar4
2342 C005      6907            push    ar5
2344 C000      6908            push    ar0
2346 C001      6909            push    ar1
2348 120000    6910            lcall   __mulint
234B AA82      6911            mov     r2,dpl
234D AB83      6912            mov     r3,dph
234F D001      6913            pop     ar1
2351 D000      6914            pop     ar0
2353 90D228    6915            mov     dptr,#_Joystick_Control_vy_error_1_228
2356 E0        6916            movx    a,@dptr
2357 FE        6917            mov     r6,a
2358 A3        6918            inc     dptr
2359 E0        6919            movx    a,@dptr
235A FF        6920            mov     r7,a
235B EE        6921            mov     a,r6
235C 28        6922            add     a,r0
235D F500      6923            mov     __divsint_PARM_2,a
235F EF        6924            mov     a,r7
2360 39        6925            addc    a,r1
2361 F501      6926            mov     (__divsint_PARM_2 + 1),a
2363 8A82      6927            mov     dpl,r2
2365 8B83      6928            mov     dph,r3
2367 C000      6929            push    ar0
2369 C001      6930            push    ar1
236B 120000    6931            lcall   __divsint
236E AA82      6932            mov     r2,dpl
2370 D001      6933            pop     ar1
2372 D000      6934            pop     ar0
2374 905088    6935            mov     dptr,#_pwm_left
2377 EA        6936            mov     a,r2
2378 F0        6937            movx    @dptr,a
2379           6938   ;        main.c:1219: pwm_right = vx_error*pwm_corr; 
2379 8882      6939            mov     dpl,r0
237B 8983      6940            mov     dph,r1
237D C000      6941            push    ar0
237F C001      6942            push    ar1
2381 120000    6943            lcall   ___sint2fs
2384 AA82      6944            mov     r2,dpl
2386 AB83      6945            mov     r3,dph
2388 AEF0      6946            mov     r6,b
238A FF        6947            mov     r7,a
238B 904D38    6948            mov     dptr,#_pwm_corr
238E E0        6949            movx    a,@dptr
238F C0E0      6950            push    acc
2391 A3        6951            inc     dptr
2392 E0        6952            movx    a,@dptr
2393 C0E0      6953            push    acc
2395 A3        6954            inc     dptr
2396 E0        6955            movx    a,@dptr
2397 C0E0      6956            push    acc
2399 A3        6957            inc     dptr
239A E0        6958            movx    a,@dptr
239B C0E0      6959            push    acc
239D 8A82      6960            mov     dpl,r2
239F 8B83      6961            mov     dph,r3
23A1 8EF0      6962            mov     b,r6
23A3 EF        6963            mov     a,r7
23A4 120000    6964            lcall   ___fsmul
23A7 AA82      6965            mov     r2,dpl
23A9 AB83      6966            mov     r3,dph
23AB AEF0      6967            mov     r6,b
23AD FF        6968            mov     r7,a
23AE E581      6969            mov     a,sp
23B0 24FC      6970            add     a,#0xfc
23B2 F581      6971            mov     sp,a
23B4 8A82      6972            mov     dpl,r2
23B6 8B83      6973            mov     dph,r3
23B8 8EF0      6974            mov     b,r6
23BA EF        6975            mov     a,r7
23BB 120000    6976            lcall   ___fs2uchar
23BE E582      6977            mov     a,dpl
23C0 D001      6978            pop     ar1
23C2 D000      6979            pop     ar0
23C4 D005      6980            pop     ar5
23C6 D004      6981            pop     ar4
23C8 905048    6982            mov     dptr,#_pwm_right
23CB F0        6983            movx    @dptr,a
23CC           6984   L041022?:
23CC           6985   ;        main.c:1221: curr_angle -= angle_diff * 1.5; // TUNE THIS 
23CC C004      6986            push    ar4
23CE C005      6987            push    ar5
23D0 C004      6988            push    ar4
23D2 C005      6989            push    ar5
23D4 C000      6990            push    ar0
23D6 C001      6991            push    ar1
23D8 C048      6992            push    _Joystick_Control_sloc5_1_0
23DA C049      6993            push    (_Joystick_Control_sloc5_1_0 + 1)
23DC C04A      6994            push    (_Joystick_Control_sloc5_1_0 + 2)
23DE C04B      6995            push    (_Joystick_Control_sloc5_1_0 + 3)
23E0 900000    6996            mov     dptr,#0x0000
23E3 75F0C0    6997            mov     b,#0xC0
23E6 743F      6998            mov     a,#0x3F
23E8 120000    6999            lcall   ___fsmul
23EB 8582F8    7000            mov     _Joystick_Control_sloc4_1_0,dpl
23EE 8583F9    7001            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
23F1 85F0FA    7002            mov     (_Joystick_Control_sloc4_1_0 + 2),b
23F4 F5FB      7003            mov     (_Joystick_Control_sloc4_1_0 + 3),a
23F6 E581      7004            mov     a,sp
23F8 24FC      7005            add     a,#0xfc
23FA F581      7006            mov     sp,a
23FC D001      7007            pop     ar1
23FE D000      7008            pop     ar0
2400 D005      7009            pop     ar5
2402 D004      7010            pop     ar4
2404 904CF8    7011            mov     dptr,#_curr_angle
2407 E0        7012            movx    a,@dptr
2408 FC        7013            mov     r4,a
2409 A3        7014            inc     dptr
240A E0        7015            movx    a,@dptr
240B FD        7016            mov     r5,a
240C A3        7017            inc     dptr
240D E0        7018            movx    a,@dptr
240E FA        7019            mov     r2,a
240F A3        7020            inc     dptr
2410 E0        7021            movx    a,@dptr
2411 FB        7022            mov     r3,a
2412 C000      7023            push    ar0
2414 C001      7024            push    ar1
2416 C0F8      7025            push    _Joystick_Control_sloc4_1_0
2418 C0F9      7026            push    (_Joystick_Control_sloc4_1_0 + 1)
241A C0FA      7027            push    (_Joystick_Control_sloc4_1_0 + 2)
241C C0FB      7028            push    (_Joystick_Control_sloc4_1_0 + 3)
241E 8C82      7029            mov     dpl,r4
2420 8D83      7030            mov     dph,r5
2422 8AF0      7031            mov     b,r2
2424 EB        7032            mov     a,r3
2425 120000    7033            lcall   ___fssub
2428 AA82      7034            mov     r2,dpl
242A AB83      7035            mov     r3,dph
242C ACF0      7036            mov     r4,b
242E FD        7037            mov     r5,a
242F E581      7038            mov     a,sp
2431 24FC      7039            add     a,#0xfc
2433 F581      7040            mov     sp,a
2435 D001      7041            pop     ar1
2437 D000      7042            pop     ar0
2439 904CF8    7043            mov     dptr,#_curr_angle
243C EA        7044            mov     a,r2
243D F0        7045            movx    @dptr,a
243E A3        7046            inc     dptr
243F EB        7047            mov     a,r3
2440 F0        7048            movx    @dptr,a
2441 A3        7049            inc     dptr
2442 EC        7050            mov     a,r4
2443 F0        7051            movx    @dptr,a
2444 A3        7052            inc     dptr
2445 ED        7053            mov     a,r5
2446 F0        7054            movx    @dptr,a
2447           7055   ;        main.c:1256: return curr_angle; 
2447 D005      7056            pop     ar5
2449 D004      7057            pop     ar4
244B           7058   ;        main.c:1221: curr_angle -= angle_diff * 1.5; // TUNE THIS 
244B           7059   L041027?:
244B           7060   ;        main.c:1225: if (vy_err<0){
244B E5A9      7061            mov     a,(_Joystick_Control_sloc3_1_0 + 1)
244D 20E7B8    7062            jb      acc.7,L041076?
2450 020000    7063            ljmp    L041040?
2453           7064   L041076?:
2453           7065   ;        main.c:1226: L_motor_dir = 1; 
2453 905008    7066            mov     dptr,#_L_motor_dir
2456 7401      7067            mov     a,#0x01
2458 F0        7068            movx    @dptr,a
2459           7069   ;        main.c:1227: R_motor_dir = 1; 
2459 904FC8    7070            mov     dptr,#_R_motor_dir
245C 7401      7071            mov     a,#0x01
245E F0        7072            movx    @dptr,a
245F           7073   ;        main.c:1229: if (vx_err>0){
245F 90D278    7074            mov     dptr,#_Joystick_Control_vx_err_1_228
2462 E0        7075            movx    a,@dptr
2463 FA        7076            mov     r2,a
2464 A3        7077            inc     dptr
2465 E0        7078            movx    a,@dptr
2466 FB        7079            mov     r3,a
2467 C3        7080            clr     c
2468 E4        7081            clr     a
2469 9A        7082            subb    a,r2
246A E4        7083            clr     a
246B 6480      7084            xrl     a,#0x80
246D 8BF0      7085            mov     b,r3
246F 63F080    7086            xrl     b,#0x80
2472 95F0      7087            subb    a,b
2474 4000      7088            jc      L041077?
2476 020000    7089            ljmp    L041035?
2479           7090   L041077?:
2479           7091   ;        main.c:1230: if (vy*100<=vy_thres*100/2){
2479 8C00      7092            mov     __mulint_PARM_2,r4
247B 8D01      7093            mov     (__mulint_PARM_2 + 1),r5
247D 900064    7094            mov     dptr,#0x0064
2480 C000      7095            push    ar0
2482 C001      7096            push    ar1
2484 120000    7097            lcall   __mulint
2487 AA82      7098            mov     r2,dpl
2489 AB83      7099            mov     r3,dph
248B D001      7100            pop     ar1
248D D000      7101            pop     ar0
248F 904EC8    7102            mov     dptr,#_vy_thres
2492 E0        7103            movx    a,@dptr
2493 F500      7104            mov     __mulint_PARM_2,a
2495 A3        7105            inc     dptr
2496 E0        7106            movx    a,@dptr
2497 F501      7107            mov     (__mulint_PARM_2 + 1),a
2499 900064    7108            mov     dptr,#0x0064
249C C002      7109            push    ar2
249E C003      7110            push    ar3
24A0 C000      7111            push    ar0
24A2 C001      7112            push    ar1
24A4 120000    7113            lcall   __mulint
24A7 AE82      7114            mov     r6,dpl
24A9 AF83      7115            mov     r7,dph
24AB 750002    7116            mov     __divsint_PARM_2,#0x02
24AE E4        7117            clr     a
24AF F501      7118            mov     (__divsint_PARM_2 + 1),a
24B1 8E82      7119            mov     dpl,r6
24B3 8F83      7120            mov     dph,r7
24B5 120000    7121            lcall   __divsint
24B8 AE82      7122            mov     r6,dpl
24BA AF83      7123            mov     r7,dph
24BC D001      7124            pop     ar1
24BE D000      7125            pop     ar0
24C0 D003      7126            pop     ar3
24C2 D002      7127            pop     ar2
24C4 C3        7128            clr     c
24C5 EE        7129            mov     a,r6
24C6 9A        7130            subb    a,r2
24C7 EF        7131            mov     a,r7
24C8 6480      7132            xrl     a,#0x80
24CA 8BF0      7133            mov     b,r3
24CC 63F080    7134            xrl     b,#0x80
24CF 95F0      7135            subb    a,b
24D1 5000      7136            jnc     L041078?
24D3 020000    7137            ljmp    L041029?
24D6           7138   L041078?:
24D6           7139   ;        main.c:1231: pwm_left = vy_error; 
24D6 90D228    7140            mov     dptr,#_Joystick_Control_vy_error_1_228
24D9 E0        7141            movx    a,@dptr
24DA F5F8      7142            mov     _Joystick_Control_sloc4_1_0,a
24DC A3        7143            inc     dptr
24DD E0        7144            movx    a,@dptr
24DE F5F9      7145            mov     (_Joystick_Control_sloc4_1_0 + 1),a
24E0 905088    7146            mov     dptr,#_pwm_left
24E3 E5F8      7147            mov     a,_Joystick_Control_sloc4_1_0
24E5 F0        7148            movx    @dptr,a
24E6           7149   ;        main.c:1232: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
24E6 904D38    7150            mov     dptr,#_pwm_corr
24E9 E0        7151            movx    a,@dptr
24EA F5A8      7152            mov     _Joystick_Control_sloc3_1_0,a
24EC A3        7153            inc     dptr
24ED E0        7154            movx    a,@dptr
24EE F5A9      7155            mov     (_Joystick_Control_sloc3_1_0 + 1),a
24F0 A3        7156            inc     dptr
24F1 E0        7157            movx    a,@dptr
24F2 F5AA      7158            mov     (_Joystick_Control_sloc3_1_0 + 2),a
24F4 A3        7159            inc     dptr
24F5 E0        7160            movx    a,@dptr
24F6 F5AB      7161            mov     (_Joystick_Control_sloc3_1_0 + 3),a
24F8 85F882    7162            mov     dpl,_Joystick_Control_sloc4_1_0
24FB 85F983    7163            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
24FE C000      7164            push    ar0
2500 C001      7165            push    ar1
2502 120000    7166            lcall   ___sint2fs
2505 AA82      7167            mov     r2,dpl
2507 AB83      7168            mov     r3,dph
2509 AEF0      7169            mov     r6,b
250B FF        7170            mov     r7,a
250C C002      7171            push    ar2
250E C003      7172            push    ar3
2510 C006      7173            push    ar6
2512 C007      7174            push    ar7
2514 85A882    7175            mov     dpl,_Joystick_Control_sloc3_1_0
2517 85A983    7176            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
251A 85AAF0    7177            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
251D E5AB      7178            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
251F 120000    7179            lcall   ___fsmul
2522 AA82      7180            mov     r2,dpl
2524 AB83      7181            mov     r3,dph
2526 AEF0      7182            mov     r6,b
2528 FF        7183            mov     r7,a
2529 E581      7184            mov     a,sp
252B 24FC      7185            add     a,#0xfc
252D F581      7186            mov     sp,a
252F C002      7187            push    ar2
2531 C003      7188            push    ar3
2533 C006      7189            push    ar6
2535 C007      7190            push    ar7
2537 900000    7191            mov     dptr,#0x0000
253A 75F0C8    7192            mov     b,#0xC8
253D 7442      7193            mov     a,#0x42
253F 120000    7194            lcall   ___fsmul
2542 8582A8    7195            mov     _Joystick_Control_sloc3_1_0,dpl
2545 8583A9    7196            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
2548 85F0AA    7197            mov     (_Joystick_Control_sloc3_1_0 + 2),b
254B F5AB      7198            mov     (_Joystick_Control_sloc3_1_0 + 3),a
254D E581      7199            mov     a,sp
254F 24FC      7200            add     a,#0xfc
2551 F581      7201            mov     sp,a
2553 D001      7202            pop     ar1
2555 D000      7203            pop     ar0
2557 E5F8      7204            mov     a,_Joystick_Control_sloc4_1_0
2559 28        7205            add     a,r0
255A F582      7206            mov     dpl,a
255C E5F9      7207            mov     a,(_Joystick_Control_sloc4_1_0 + 1)
255E 39        7208            addc    a,r1
255F F583      7209            mov     dph,a
2561 120000    7210            lcall   ___sint2fs
2564 AA82      7211            mov     r2,dpl
2566 AB83      7212            mov     r3,dph
2568 AEF0      7213            mov     r6,b
256A FF        7214            mov     r7,a
256B C002      7215            push    ar2
256D C003      7216            push    ar3
256F C006      7217            push    ar6
2571 C007      7218            push    ar7
2573 85A882    7219            mov     dpl,_Joystick_Control_sloc3_1_0
2576 85A983    7220            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
2579 85AAF0    7221            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
257C E5AB      7222            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
257E 120000    7223            lcall   ___fsdiv
2581 AA82      7224            mov     r2,dpl
2583 AB83      7225            mov     r3,dph
2585 AEF0      7226            mov     r6,b
2587 FF        7227            mov     r7,a
2588 E581      7228            mov     a,sp
258A 24FC      7229            add     a,#0xfc
258C F581      7230            mov     sp,a
258E 8A82      7231            mov     dpl,r2
2590 8B83      7232            mov     dph,r3
2592 8EF0      7233            mov     b,r6
2594 EF        7234            mov     a,r7
2595 120000    7235            lcall   ___fs2uchar
2598 E582      7236            mov     a,dpl
259A 905048    7237            mov     dptr,#_pwm_right
259D F0        7238            movx    @dptr,a
259E 020000    7239            ljmp    L041030?
25A1           7240   L041029?:
25A1           7241   ;        main.c:1235: pwm_left = vx_error; 
25A1 905088    7242            mov     dptr,#_pwm_left
25A4 E8        7243            mov     a,r0
25A5 F0        7244            movx    @dptr,a
25A6           7245   ;        main.c:1236: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
25A6 904D38    7246            mov     dptr,#_pwm_corr
25A9 E0        7247            movx    a,@dptr
25AA F5F8      7248            mov     _Joystick_Control_sloc4_1_0,a
25AC A3        7249            inc     dptr
25AD E0        7250            movx    a,@dptr
25AE F5F9      7251            mov     (_Joystick_Control_sloc4_1_0 + 1),a
25B0 A3        7252            inc     dptr
25B1 E0        7253            movx    a,@dptr
25B2 F5FA      7254            mov     (_Joystick_Control_sloc4_1_0 + 2),a
25B4 A3        7255            inc     dptr
25B5 E0        7256            movx    a,@dptr
25B6 F5FB      7257            mov     (_Joystick_Control_sloc4_1_0 + 3),a
25B8 8882      7258            mov     dpl,r0
25BA 8983      7259            mov     dph,r1
25BC C000      7260            push    ar0
25BE C001      7261            push    ar1
25C0 120000    7262            lcall   ___sint2fs
25C3 AA82      7263            mov     r2,dpl
25C5 AB83      7264            mov     r3,dph
25C7 AEF0      7265            mov     r6,b
25C9 FF        7266            mov     r7,a
25CA C002      7267            push    ar2
25CC C003      7268            push    ar3
25CE C006      7269            push    ar6
25D0 C007      7270            push    ar7
25D2 85F882    7271            mov     dpl,_Joystick_Control_sloc4_1_0
25D5 85F983    7272            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
25D8 85FAF0    7273            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
25DB E5FB      7274            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
25DD 120000    7275            lcall   ___fsmul
25E0 AA82      7276            mov     r2,dpl
25E2 AB83      7277            mov     r3,dph
25E4 AEF0      7278            mov     r6,b
25E6 FF        7279            mov     r7,a
25E7 E581      7280            mov     a,sp
25E9 24FC      7281            add     a,#0xfc
25EB F581      7282            mov     sp,a
25ED C002      7283            push    ar2
25EF C003      7284            push    ar3
25F1 C006      7285            push    ar6
25F3 C007      7286            push    ar7
25F5 900000    7287            mov     dptr,#0x0000
25F8 75F0C8    7288            mov     b,#0xC8
25FB 7442      7289            mov     a,#0x42
25FD 120000    7290            lcall   ___fsmul
2600 8582F8    7291            mov     _Joystick_Control_sloc4_1_0,dpl
2603 8583F9    7292            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
2606 85F0FA    7293            mov     (_Joystick_Control_sloc4_1_0 + 2),b
2609 F5FB      7294            mov     (_Joystick_Control_sloc4_1_0 + 3),a
260B E581      7295            mov     a,sp
260D 24FC      7296            add     a,#0xfc
260F F581      7297            mov     sp,a
2611 D001      7298            pop     ar1
2613 D000      7299            pop     ar0
2615 90D228    7300            mov     dptr,#_Joystick_Control_vy_error_1_228
2618 E0        7301            movx    a,@dptr
2619 FA        7302            mov     r2,a
261A A3        7303            inc     dptr
261B E0        7304            movx    a,@dptr
261C FB        7305            mov     r3,a
261D EA        7306            mov     a,r2
261E 28        7307            add     a,r0
261F F582      7308            mov     dpl,a
2621 EB        7309            mov     a,r3
2622 39        7310            addc    a,r1
2623 F583      7311            mov     dph,a
2625 120000    7312            lcall   ___sint2fs
2628 AA82      7313            mov     r2,dpl
262A AB83      7314            mov     r3,dph
262C AEF0      7315            mov     r6,b
262E FF        7316            mov     r7,a
262F C002      7317            push    ar2
2631 C003      7318            push    ar3
2633 C006      7319            push    ar6
2635 C007      7320            push    ar7
2637 85F882    7321            mov     dpl,_Joystick_Control_sloc4_1_0
263A 85F983    7322            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
263D 85FAF0    7323            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
2640 E5FB      7324            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
2642 120000    7325            lcall   ___fsdiv
2645 AA82      7326            mov     r2,dpl
2647 AB83      7327            mov     r3,dph
2649 AEF0      7328            mov     r6,b
264B FF        7329            mov     r7,a
264C E581      7330            mov     a,sp
264E 24FC      7331            add     a,#0xfc
2650 F581      7332            mov     sp,a
2652 8A82      7333            mov     dpl,r2
2654 8B83      7334            mov     dph,r3
2656 8EF0      7335            mov     b,r6
2658 EF        7336            mov     a,r7
2659 120000    7337            lcall   ___fs2uchar
265C E582      7338            mov     a,dpl
265E 905048    7339            mov     dptr,#_pwm_right
2661 F0        7340            movx    @dptr,a
2662           7341   L041030?:
2662           7342   ;        main.c:1238: curr_angle -= angle_diff * 1.4; // TUNE THIS 
2662 C048      7343            push    _Joystick_Control_sloc5_1_0
2664 C049      7344            push    (_Joystick_Control_sloc5_1_0 + 1)
2666 C04A      7345            push    (_Joystick_Control_sloc5_1_0 + 2)
2668 C04B      7346            push    (_Joystick_Control_sloc5_1_0 + 3)
266A 903333    7347            mov     dptr,#0x3333
266D 75F0B3    7348            mov     b,#0xB3
2670 743F      7349            mov     a,#0x3F
2672 120000    7350            lcall   ___fsmul
2675 8582F8    7351            mov     _Joystick_Control_sloc4_1_0,dpl
2678 8583F9    7352            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
267B 85F0FA    7353            mov     (_Joystick_Control_sloc4_1_0 + 2),b
267E F5FB      7354            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2680 E581      7355            mov     a,sp
2682 24FC      7356            add     a,#0xfc
2684 F581      7357            mov     sp,a
2686 904CF8    7358            mov     dptr,#_curr_angle
2689 E0        7359            movx    a,@dptr
268A FA        7360            mov     r2,a
268B A3        7361            inc     dptr
268C E0        7362            movx    a,@dptr
268D FB        7363            mov     r3,a
268E A3        7364            inc     dptr
268F E0        7365            movx    a,@dptr
2690 FE        7366            mov     r6,a
2691 A3        7367            inc     dptr
2692 E0        7368            movx    a,@dptr
2693 FF        7369            mov     r7,a
2694 C0F8      7370            push    _Joystick_Control_sloc4_1_0
2696 C0F9      7371            push    (_Joystick_Control_sloc4_1_0 + 1)
2698 C0FA      7372            push    (_Joystick_Control_sloc4_1_0 + 2)
269A C0FB      7373            push    (_Joystick_Control_sloc4_1_0 + 3)
269C 8A82      7374            mov     dpl,r2
269E 8B83      7375            mov     dph,r3
26A0 8EF0      7376            mov     b,r6
26A2 EF        7377            mov     a,r7
26A3 120000    7378            lcall   ___fssub
26A6 AA82      7379            mov     r2,dpl
26A8 AB83      7380            mov     r3,dph
26AA AEF0      7381            mov     r6,b
26AC FF        7382            mov     r7,a
26AD E581      7383            mov     a,sp
26AF 24FC      7384            add     a,#0xfc
26B1 F581      7385            mov     sp,a
26B3 904CF8    7386            mov     dptr,#_curr_angle
26B6 EA        7387            mov     a,r2
26B7 F0        7388            movx    @dptr,a
26B8 A3        7389            inc     dptr
26B9 EB        7390            mov     a,r3
26BA F0        7391            movx    @dptr,a
26BB A3        7392            inc     dptr
26BC EE        7393            mov     a,r6
26BD F0        7394            movx    @dptr,a
26BE A3        7395            inc     dptr
26BF EF        7396            mov     a,r7
26C0 F0        7397            movx    @dptr,a
26C1 020000    7398            ljmp    L041040?
26C4           7399   L041035?:
26C4           7400   ;        main.c:1242: if (vy*100<=vy_thres*100/2){
26C4 8C00      7401            mov     __mulint_PARM_2,r4
26C6 8D01      7402            mov     (__mulint_PARM_2 + 1),r5
26C8 900064    7403            mov     dptr,#0x0064
26CB C000      7404            push    ar0
26CD C001      7405            push    ar1
26CF 120000    7406            lcall   __mulint
26D2 AA82      7407            mov     r2,dpl
26D4 AB83      7408            mov     r3,dph
26D6 D001      7409            pop     ar1
26D8 D000      7410            pop     ar0
26DA 904EC8    7411            mov     dptr,#_vy_thres
26DD E0        7412            movx    a,@dptr
26DE F500      7413            mov     __mulint_PARM_2,a
26E0 A3        7414            inc     dptr
26E1 E0        7415            movx    a,@dptr
26E2 F501      7416            mov     (__mulint_PARM_2 + 1),a
26E4 900064    7417            mov     dptr,#0x0064
26E7 C002      7418            push    ar2
26E9 C003      7419            push    ar3
26EB C000      7420            push    ar0
26ED C001      7421            push    ar1
26EF 120000    7422            lcall   __mulint
26F2 AC82      7423            mov     r4,dpl
26F4 AD83      7424            mov     r5,dph
26F6 750002    7425            mov     __divsint_PARM_2,#0x02
26F9 E4        7426            clr     a
26FA F501      7427            mov     (__divsint_PARM_2 + 1),a
26FC 8C82      7428            mov     dpl,r4
26FE 8D83      7429            mov     dph,r5
2700 120000    7430            lcall   __divsint
2703 AC82      7431            mov     r4,dpl
2705 AD83      7432            mov     r5,dph
2707 D001      7433            pop     ar1
2709 D000      7434            pop     ar0
270B D003      7435            pop     ar3
270D D002      7436            pop     ar2
270F C3        7437            clr     c
2710 EC        7438            mov     a,r4
2711 9A        7439            subb    a,r2
2712 ED        7440            mov     a,r5
2713 6480      7441            xrl     a,#0x80
2715 8BF0      7442            mov     b,r3
2717 63F080    7443            xrl     b,#0x80
271A 95F0      7444            subb    a,b
271C 5000      7445            jnc     L041079?
271E 020000    7446            ljmp    L041032?
2721           7447   L041079?:
2721           7448   ;        main.c:1243: pwm_left = vy_error*100/(vx_error+vy_error);
2721 90D228    7449            mov     dptr,#_Joystick_Control_vy_error_1_228
2724 E0        7450            movx    a,@dptr
2725 FA        7451            mov     r2,a
2726 A3        7452            inc     dptr
2727 E0        7453            movx    a,@dptr
2728 FB        7454            mov     r3,a
2729 8A00      7455            mov     __mulint_PARM_2,r2
272B 8B01      7456            mov     (__mulint_PARM_2 + 1),r3
272D 900064    7457            mov     dptr,#0x0064
2730 C002      7458            push    ar2
2732 C003      7459            push    ar3
2734 C000      7460            push    ar0
2736 C001      7461            push    ar1
2738 120000    7462            lcall   __mulint
273B AC82      7463            mov     r4,dpl
273D AD83      7464            mov     r5,dph
273F D001      7465            pop     ar1
2741 D000      7466            pop     ar0
2743 D003      7467            pop     ar3
2745 D002      7468            pop     ar2
2747 EA        7469            mov     a,r2
2748 28        7470            add     a,r0
2749 F500      7471            mov     __divsint_PARM_2,a
274B EB        7472            mov     a,r3
274C 39        7473            addc    a,r1
274D F501      7474            mov     (__divsint_PARM_2 + 1),a
274F 8C82      7475            mov     dpl,r4
2751 8D83      7476            mov     dph,r5
2753 C002      7477            push    ar2
2755 C003      7478            push    ar3
2757 120000    7479            lcall   __divsint
275A AC82      7480            mov     r4,dpl
275C D003      7481            pop     ar3
275E D002      7482            pop     ar2
2760 905088    7483            mov     dptr,#_pwm_left
2763 EC        7484            mov     a,r4
2764 F0        7485            movx    @dptr,a
2765           7486   ;        main.c:1244: pwm_right =pwm_corr*vy_error; 
2765 904D38    7487            mov     dptr,#_pwm_corr
2768 E0        7488            movx    a,@dptr
2769 F5F8      7489            mov     _Joystick_Control_sloc4_1_0,a
276B A3        7490            inc     dptr
276C E0        7491            movx    a,@dptr
276D F5F9      7492            mov     (_Joystick_Control_sloc4_1_0 + 1),a
276F A3        7493            inc     dptr
2770 E0        7494            movx    a,@dptr
2771 F5FA      7495            mov     (_Joystick_Control_sloc4_1_0 + 2),a
2773 A3        7496            inc     dptr
2774 E0        7497            movx    a,@dptr
2775 F5FB      7498            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2777 8A82      7499            mov     dpl,r2
2779 8B83      7500            mov     dph,r3
277B 120000    7501            lcall   ___sint2fs
277E AA82      7502            mov     r2,dpl
2780 AB83      7503            mov     r3,dph
2782 ACF0      7504            mov     r4,b
2784 FD        7505            mov     r5,a
2785 C002      7506            push    ar2
2787 C003      7507            push    ar3
2789 C004      7508            push    ar4
278B C005      7509            push    ar5
278D 85F882    7510            mov     dpl,_Joystick_Control_sloc4_1_0
2790 85F983    7511            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
2793 85FAF0    7512            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
2796 E5FB      7513            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
2798 120000    7514            lcall   ___fsmul
279B AA82      7515            mov     r2,dpl
279D AB83      7516            mov     r3,dph
279F ACF0      7517            mov     r4,b
27A1 FD        7518            mov     r5,a
27A2 E581      7519            mov     a,sp
27A4 24FC      7520            add     a,#0xfc
27A6 F581      7521            mov     sp,a
27A8 8A82      7522            mov     dpl,r2
27AA 8B83      7523            mov     dph,r3
27AC 8CF0      7524            mov     b,r4
27AE ED        7525            mov     a,r5
27AF 120000    7526            lcall   ___fs2uchar
27B2 E582      7527            mov     a,dpl
27B4 905048    7528            mov     dptr,#_pwm_right
27B7 F0        7529            movx    @dptr,a
27B8 020000    7530            ljmp    L041033?
27BB           7531   L041032?:
27BB           7532   ;        main.c:1247: pwm_left = vx_error*100/(vx_error+vy_error);
27BB 8800      7533            mov     __mulint_PARM_2,r0
27BD 8901      7534            mov     (__mulint_PARM_2 + 1),r1
27BF 900064    7535            mov     dptr,#0x0064
27C2 C000      7536            push    ar0
27C4 C001      7537            push    ar1
27C6 120000    7538            lcall   __mulint
27C9 AA82      7539            mov     r2,dpl
27CB AB83      7540            mov     r3,dph
27CD D001      7541            pop     ar1
27CF D000      7542            pop     ar0
27D1 90D228    7543            mov     dptr,#_Joystick_Control_vy_error_1_228
27D4 E0        7544            movx    a,@dptr
27D5 FC        7545            mov     r4,a
27D6 A3        7546            inc     dptr
27D7 E0        7547            movx    a,@dptr
27D8 FD        7548            mov     r5,a
27D9 EC        7549            mov     a,r4
27DA 28        7550            add     a,r0
27DB F500      7551            mov     __divsint_PARM_2,a
27DD ED        7552            mov     a,r5
27DE 39        7553            addc    a,r1
27DF F501      7554            mov     (__divsint_PARM_2 + 1),a
27E1 8A82      7555            mov     dpl,r2
27E3 8B83      7556            mov     dph,r3
27E5 C000      7557            push    ar0
27E7 C001      7558            push    ar1
27E9 120000    7559            lcall   __divsint
27EC AA82      7560            mov     r2,dpl
27EE D001      7561            pop     ar1
27F0 D000      7562            pop     ar0
27F2 905088    7563            mov     dptr,#_pwm_left
27F5 EA        7564            mov     a,r2
27F6 F0        7565            movx    @dptr,a
27F7           7566   ;        main.c:1248: pwm_right = pwm_corr*vx_error; 
27F7 904D38    7567            mov     dptr,#_pwm_corr
27FA E0        7568            movx    a,@dptr
27FB FA        7569            mov     r2,a
27FC A3        7570            inc     dptr
27FD E0        7571            movx    a,@dptr
27FE FB        7572            mov     r3,a
27FF A3        7573            inc     dptr
2800 E0        7574            movx    a,@dptr
2801 FC        7575            mov     r4,a
2802 A3        7576            inc     dptr
2803 E0        7577            movx    a,@dptr
2804 FD        7578            mov     r5,a
2805 8882      7579            mov     dpl,r0
2807 8983      7580            mov     dph,r1
2809 C002      7581            push    ar2
280B C003      7582            push    ar3
280D C004      7583            push    ar4
280F C005      7584            push    ar5
2811 120000    7585            lcall   ___sint2fs
2814 AE82      7586            mov     r6,dpl
2816 AF83      7587            mov     r7,dph
2818 A8F0      7588            mov     r0,b
281A F9        7589            mov     r1,a
281B D005      7590            pop     ar5
281D D004      7591            pop     ar4
281F D003      7592            pop     ar3
2821 D002      7593            pop     ar2
2823 C006      7594            push    ar6
2825 C007      7595            push    ar7
2827 C000      7596            push    ar0
2829 C001      7597            push    ar1
282B 8A82      7598            mov     dpl,r2
282D 8B83      7599            mov     dph,r3
282F 8CF0      7600            mov     b,r4
2831 ED        7601            mov     a,r5
2832 120000    7602            lcall   ___fsmul
2835 AA82      7603            mov     r2,dpl
2837 AB83      7604            mov     r3,dph
2839 ACF0      7605            mov     r4,b
283B FD        7606            mov     r5,a
283C E581      7607            mov     a,sp
283E 24FC      7608            add     a,#0xfc
2840 F581      7609            mov     sp,a
2842 8A82      7610            mov     dpl,r2
2844 8B83      7611            mov     dph,r3
2846 8CF0      7612            mov     b,r4
2848 ED        7613            mov     a,r5
2849 120000    7614            lcall   ___fs2uchar
284C E582      7615            mov     a,dpl
284E 905048    7616            mov     dptr,#_pwm_right
2851 F0        7617            movx    @dptr,a
2852           7618   L041033?:
2852           7619   ;        main.c:1250: curr_angle += angle_diff * 1.4; // TUNE THIS 
2852 C048      7620            push    _Joystick_Control_sloc5_1_0
2854 C049      7621            push    (_Joystick_Control_sloc5_1_0 + 1)
2856 C04A      7622            push    (_Joystick_Control_sloc5_1_0 + 2)
2858 C04B      7623            push    (_Joystick_Control_sloc5_1_0 + 3)
285A 903333    7624            mov     dptr,#0x3333
285D 75F0B3    7625            mov     b,#0xB3
2860 743F      7626            mov     a,#0x3F
2862 120000    7627            lcall   ___fsmul
2865 AA82      7628            mov     r2,dpl
2867 AB83      7629            mov     r3,dph
2869 ACF0      7630            mov     r4,b
286B FD        7631            mov     r5,a
286C E581      7632            mov     a,sp
286E 24FC      7633            add     a,#0xfc
2870 F581      7634            mov     sp,a
2872 904CF8    7635            mov     dptr,#_curr_angle
2875 E0        7636            movx    a,@dptr
2876 FE        7637            mov     r6,a
2877 A3        7638            inc     dptr
2878 E0        7639            movx    a,@dptr
2879 FF        7640            mov     r7,a
287A A3        7641            inc     dptr
287B E0        7642            movx    a,@dptr
287C F8        7643            mov     r0,a
287D A3        7644            inc     dptr
287E E0        7645            movx    a,@dptr
287F F9        7646            mov     r1,a
2880 C002      7647            push    ar2
2882 C003      7648            push    ar3
2884 C004      7649            push    ar4
2886 C005      7650            push    ar5
2888 8E82      7651            mov     dpl,r6
288A 8F83      7652            mov     dph,r7
288C 88F0      7653            mov     b,r0
288E E9        7654            mov     a,r1
288F 120000    7655            lcall   ___fsadd
2892 AA82      7656            mov     r2,dpl
2894 AB83      7657            mov     r3,dph
2896 ACF0      7658            mov     r4,b
2898 FD        7659            mov     r5,a
2899 E581      7660            mov     a,sp
289B 24FC      7661            add     a,#0xfc
289D F581      7662            mov     sp,a
289F 904CF8    7663            mov     dptr,#_curr_angle
28A2 EA        7664            mov     a,r2
28A3 F0        7665            movx    @dptr,a
28A4 A3        7666            inc     dptr
28A5 EB        7667            mov     a,r3
28A6 F0        7668            movx    @dptr,a
28A7 A3        7669            inc     dptr
28A8 EC        7670            mov     a,r4
28A9 F0        7671            movx    @dptr,a
28AA A3        7672            inc     dptr
28AB ED        7673            mov     a,r5
28AC F0        7674            movx    @dptr,a
28AD           7675   L041040?:
28AD           7676   ;        main.c:1255: last_raw_angle = raw_angle; 
28AD 904CB8    7677            mov     dptr,#_raw_angle
28B0 E0        7678            movx    a,@dptr
28B1 FA        7679            mov     r2,a
28B2 A3        7680            inc     dptr
28B3 E0        7681            movx    a,@dptr
28B4 FB        7682            mov     r3,a
28B5 A3        7683            inc     dptr
28B6 E0        7684            movx    a,@dptr
28B7 FC        7685            mov     r4,a
28B8 A3        7686            inc     dptr
28B9 E0        7687            movx    a,@dptr
28BA FD        7688            mov     r5,a
28BB 904C78    7689            mov     dptr,#_last_raw_angle
28BE EA        7690            mov     a,r2
28BF F0        7691            movx    @dptr,a
28C0 A3        7692            inc     dptr
28C1 EB        7693            mov     a,r3
28C2 F0        7694            movx    @dptr,a
28C3 A3        7695            inc     dptr
28C4 EC        7696            mov     a,r4
28C5 F0        7697            movx    @dptr,a
28C6 A3        7698            inc     dptr
28C7 ED        7699            mov     a,r5
28C8 F0        7700            movx    @dptr,a
28C9           7701   ;        main.c:1256: return curr_angle; 
28C9 904CF8    7702            mov     dptr,#_curr_angle
28CC E0        7703            movx    a,@dptr
28CD FA        7704            mov     r2,a
28CE A3        7705            inc     dptr
28CF E0        7706            movx    a,@dptr
28D0 FB        7707            mov     r3,a
28D1 A3        7708            inc     dptr
28D2 E0        7709            movx    a,@dptr
28D3 FC        7710            mov     r4,a
28D4 A3        7711            inc     dptr
28D5 E0        7712            movx    a,@dptr
28D6 8A82      7713            mov     dpl,r2
28D8 8B83      7714            mov     dph,r3
28DA 8CF0      7715            mov     b,r4
28DC 22        7716            ret
28DD           7717   ;------------------------------------------------------------
28DD           7718   ;Allocation info for local variables in function 'main'
28DD           7719   ;------------------------------------------------------------
28DD           7720   ;pick_char                 Allocated with name '_main_pick_char_1_251'
28DD           7721   ;c                         Allocated with name '_main_c_1_251'
28DD           7722   ;vx                        Allocated with name '_main_vx_1_251'
28DD           7723   ;vy                        Allocated with name '_main_vy_1_251'
28DD           7724   ;auto_mode                 Allocated with name '_main_auto_mode_1_251'
28DD           7725   ;angle_count               Allocated with name '_main_angle_count_1_251'
28DD           7726   ;------------------------------------------------------------
28DD           7727   ;        main.c:1259: void main (void)
28DD           7728   ;        -----------------------------------------
28DD           7729   ;         function main
28DD           7730   ;        -----------------------------------------
28DD           7731   _main:
28DD           7732   ;        main.c:1262: xdata int vx = 0, vy = 0; 
28DD 90D308    7733            mov     dptr,#_main_vx_1_251
28E0 E4        7734            clr     a
28E1 F0        7735            movx    @dptr,a
28E2 A3        7736            inc     dptr
28E3 F0        7737            movx    @dptr,a
28E4 90D348    7738            mov     dptr,#_main_vy_1_251
28E7 E4        7739            clr     a
28E8 F0        7740            movx    @dptr,a
28E9 A3        7741            inc     dptr
28EA F0        7742            movx    @dptr,a
28EB           7743   ;        main.c:1263: xdata int auto_mode = 0;
28EB 90D398    7744            mov     dptr,#_main_auto_mode_1_251
28EE E4        7745            clr     a
28EF F0        7746            movx    @dptr,a
28F0 A3        7747            inc     dptr
28F1 F0        7748            movx    @dptr,a
28F2           7749   ;        main.c:1264: char pick_char = '0';
28F2 759830    7750            mov     _main_pick_char_1_251,#0x30
28F5           7751   ;        main.c:1268: Init_all();
28F5 120000    7752            lcall   _Init_all
28F8           7753   ;        main.c:1269: BMM150_Init();
28F8 120000    7754            lcall   _BMM150_Init
28FB           7755   ;        main.c:1270: waitms(500);
28FB 9001F4    7756            mov     dptr,#0x01F4
28FE 120000    7757            lcall   _waitms
2901           7758   ;        main.c:1272: UART1_Init(9600);
2901 902580    7759            mov     dptr,#0x2580
2904 E4        7760            clr     a
2905 F5F0      7761            mov     b,a
2907 120000    7762            lcall   _UART1_Init
290A           7763   ;        main.c:1274: ReceptionOff();
290A 120000    7764            lcall   _ReceptionOff
290D           7765   ;        main.c:1277: SendATCommand("AT+VER\r\n");
290D 902100    7766            mov     dptr,#__str_10
2910 75F080    7767            mov     b,#0x80
2913 120000    7768            lcall   _SendATCommand
2916           7769   ;        main.c:1278: SendATCommand("AT+BAUD\r\n");
2916 902140    7770            mov     dptr,#__str_11
2919 75F080    7771            mov     b,#0x80
291C 120000    7772            lcall   _SendATCommand
291F           7773   ;        main.c:1279: SendATCommand("AT+RFID\r\n");
291F 902180    7774            mov     dptr,#__str_12
2922 75F080    7775            mov     b,#0x80
2925 120000    7776            lcall   _SendATCommand
2928           7777   ;        main.c:1280: SendATCommand("AT+DVID\r\n");
2928 9021C0    7778            mov     dptr,#__str_13
292B 75F080    7779            mov     b,#0x80
292E 120000    7780            lcall   _SendATCommand
2931           7781   ;        main.c:1281: SendATCommand("AT+RFC002\r\n");
2931 902200    7782            mov     dptr,#__str_14
2934 75F080    7783            mov     b,#0x80
2937 120000    7784            lcall   _SendATCommand
293A           7785   ;        main.c:1282: SendATCommand("AT+POWE\r\n");
293A 902240    7786            mov     dptr,#__str_15
293D 75F080    7787            mov     b,#0x80
2940 120000    7788            lcall   _SendATCommand
2943           7789   ;        main.c:1283: SendATCommand("AT+CLSS\r\n");
2943 902280    7790            mov     dptr,#__str_16
2946 75F080    7791            mov     b,#0x80
2949 120000    7792            lcall   _SendATCommand
294C           7793   ;        main.c:1284: SendATCommand("AT+DVIDEF11\r\n");  
294C 9022C0    7794            mov     dptr,#__str_17
294F 75F080    7795            mov     b,#0x80
2952 120000    7796            lcall   _SendATCommand
2955           7797   ;        main.c:1287: L_bridge_1 = 0; 
2955 C2A1      7798            clr     _P2_1
2957           7799   ;        main.c:1288: L_bridge_2 = 0; 
2957 C2A2      7800            clr     _P2_2
2959           7801   ;        main.c:1289: R_bridge_1 = 0; 
2959 C2A4      7802            clr     _P2_4
295B           7803   ;        main.c:1290: R_bridge_2 = 0; 
295B C2A3      7804            clr     _P2_3
295D           7805   ;        main.c:1293: curr_angle = Read_angle();
295D 120000    7806            lcall   _Read_angle
2960 AA82      7807            mov     r2,dpl
2962 AB83      7808            mov     r3,dph
2964 ACF0      7809            mov     r4,b
2966 FD        7810            mov     r5,a
2967 904CF8    7811            mov     dptr,#_curr_angle
296A EA        7812            mov     a,r2
296B F0        7813            movx    @dptr,a
296C A3        7814            inc     dptr
296D EB        7815            mov     a,r3
296E F0        7816            movx    @dptr,a
296F A3        7817            inc     dptr
2970 EC        7818            mov     a,r4
2971 F0        7819            movx    @dptr,a
2972 A3        7820            inc     dptr
2973 ED        7821            mov     a,r5
2974 F0        7822            movx    @dptr,a
2975           7823   ;        main.c:1294: waitms(1000);
2975 9003E8    7824            mov     dptr,#0x03E8
2978 120000    7825            lcall   _waitms
297B           7826   ;        main.c:1295: while(1)
297B           7827   L042016?:
297B           7828   ;        main.c:1297: temp = Read_angle();
297B 120000    7829            lcall   _Read_angle
297E AA82      7830            mov     r2,dpl
2980 AB83      7831            mov     r3,dph
2982 ACF0      7832            mov     r4,b
2984 FD        7833            mov     r5,a
2985 905188    7834            mov     dptr,#_temp
2988 EA        7835            mov     a,r2
2989 F0        7836            movx    @dptr,a
298A A3        7837            inc     dptr
298B EB        7838            mov     a,r3
298C F0        7839            movx    @dptr,a
298D A3        7840            inc     dptr
298E EC        7841            mov     a,r4
298F F0        7842            movx    @dptr,a
2990 A3        7843            inc     dptr
2991 ED        7844            mov     a,r5
2992 F0        7845            movx    @dptr,a
2993           7846   ;        main.c:1301: if(pick_char=='1'){
2993 7431      7847            mov     a,#0x31
2995 B59840    7848            cjne    a,_main_pick_char_1_251,L042002?
2998           7849   ;        main.c:1302: servo_pick();
2998 120000    7850            lcall   _servo_pick
299B           7851   ;        main.c:1303: waitms(1000);
299B 9003E8    7852            mov     dptr,#0x03E8
299E 120000    7853            lcall   _waitms
29A1           7854   ;        main.c:1304: pick_char = '0';
29A1 759830    7855            mov     _main_pick_char_1_251,#0x30
29A4           7856   L042002?:
29A4           7857   ;        main.c:1307: if(auto_mode){
29A4 90D398    7858            mov     dptr,#_main_auto_mode_1_251
29A7 E0        7859            movx    a,@dptr
29A8 FA        7860            mov     r2,a
29A9 A3        7861            inc     dptr
29AA E0        7862            movx    a,@dptr
29AB FB        7863            mov     r3,a
29AC 4A        7864            orl     a,r2
29AD 6000      7865            jz      L042004?
29AF           7866   ;        main.c:1308: Auto_mode_slave();
29AF 120000    7867            lcall   _Auto_mode_slave
29B2           7868   ;        main.c:1309: auto_mode = 0;
29B2 90D398    7869            mov     dptr,#_main_auto_mode_1_251
29B5 E4        7870            clr     a
29B6 F0        7871            movx    @dptr,a
29B7 A3        7872            inc     dptr
29B8 F0        7873            movx    @dptr,a
29B9           7874   L042004?:
29B9           7875   ;        main.c:1311: if(RXU1()) // Something has arrived
29B9 120000    7876            lcall   _RXU1
29BC 5000      7877            jnc     L042016?
29BE           7878   ;        main.c:1313: c=getchar1();
29BE 120000    7879            lcall   _getchar1
29C1 AA82      7880            mov     r2,dpl
29C3           7881   ;        main.c:1314: if(c=='!') // Master is sending message
29C3 BA21C0    7882            cjne    r2,#0x21,L042031?
29C6 8000      7883            sjmp    L042032?
29C8           7884   L042031?:
29C8 020000    7885            ljmp    L042011?
29CB           7886   L042032?:
29CB           7887   ;        main.c:1316: getstr1(buff, sizeof(buff)-1);
29CB 75D813    7888            mov     _getstr1_PARM_2,#0x13
29CE 905548    7889            mov     dptr,#_buff
29D1 75F040    7890            mov     b,#0x40
29D4 120000    7891            lcall   _getstr1
29D7           7892   ;        main.c:1317: if(strlen(buff)==11)
29D7 905548    7893            mov     dptr,#_buff
29DA 75F040    7894            mov     b,#0x40
29DD 120000    7895            lcall   _strlen
29E0 AB82      7896            mov     r3,dpl
29E2 AC83      7897            mov     r4,dph
29E4 BB0B80    7898            cjne    r3,#0x0B,L042033?
29E7 BC0080    7899            cjne    r4,#0x00,L042033?
29EA 8000      7900            sjmp    L042034?
29EC           7901   L042033?:
29EC 020000    7902            ljmp    L042006?
29EF           7903   L042034?:
29EF           7904   ;        main.c:1319: printf("Master says: %s\r\n", buff);
29EF 7448      7905            mov     a,#_buff
29F1 C0E0      7906            push    acc
29F3 7455      7907            mov     a,#(_buff >> 8)
29F5 C0E0      7908            push    acc
29F7 7440      7909            mov     a,#0x40
29F9 C0E0      7910            push    acc
29FB 7440      7911            mov     a,#__str_18
29FD C0E0      7912            push    acc
29FF 7425      7913            mov     a,#(__str_18 >> 8)
2A01 C0E0      7914            push    acc
2A03 7480      7915            mov     a,#0x80
2A05 C0E0      7916            push    acc
2A07 120000    7917            lcall   _printf
2A0A E581      7918            mov     a,sp
2A0C 24FA      7919            add     a,#0xfa
2A0E F581      7920            mov     sp,a
2A10           7921   ;        main.c:1320: sscanf(buff, "%03d,%03d,%c,%01d", &vx, &vy, &pick_char, &auto_mode);
2A10 7498      7922            mov     a,#_main_auto_mode_1_251
2A12 C0E0      7923            push    acc
2A14 74D3      7924            mov     a,#(_main_auto_mode_1_251 >> 8)
2A16 C0E0      7925            push    acc
2A18 E4        7926            clr     a
2A19 C0E0      7927            push    acc
2A1B 7498      7928            mov     a,#_main_pick_char_1_251
2A1D C0E0      7929            push    acc
2A1F 74CA      7930            mov     a,#(_main_pick_char_1_251 >> 8)
2A21 C0E0      7931            push    acc
2A23 7440      7932            mov     a,#0x40
2A25 C0E0      7933            push    acc
2A27 7448      7934            mov     a,#_main_vy_1_251
2A29 C0E0      7935            push    acc
2A2B 74D3      7936            mov     a,#(_main_vy_1_251 >> 8)
2A2D C0E0      7937            push    acc
2A2F E4        7938            clr     a
2A30 C0E0      7939            push    acc
2A32 7408      7940            mov     a,#_main_vx_1_251
2A34 C0E0      7941            push    acc
2A36 74D3      7942            mov     a,#(_main_vx_1_251 >> 8)
2A38 C0E0      7943            push    acc
2A3A E4        7944            clr     a
2A3B C0E0      7945            push    acc
2A3D 7480      7946            mov     a,#__str_19
2A3F C0E0      7947            push    acc
2A41 7425      7948            mov     a,#(__str_19 >> 8)
2A43 C0E0      7949            push    acc
2A45 7480      7950            mov     a,#0x80
2A47 C0E0      7951            push    acc
2A49 7448      7952            mov     a,#_buff
2A4B C0E0      7953            push    acc
2A4D 7455      7954            mov     a,#(_buff >> 8)
2A4F C0E0      7955            push    acc
2A51 7440      7956            mov     a,#0x40
2A53 C0E0      7957            push    acc
2A55 120000    7958            lcall   _sscanf
2A58 E581      7959            mov     a,sp
2A5A 24EE      7960            add     a,#0xee
2A5C F581      7961            mov     sp,a
2A5E           7962   ;        main.c:1322: curr_angle = Joystick_Control(&vx, &vy);
2A5E 759848    7963            mov     _Joystick_Control_PARM_2,#_main_vy_1_251
2A61 7599D3    7964            mov     (_Joystick_Control_PARM_2 + 1),#(_main_vy_1_251 >> 8)
2A64 759A00    7965            mov     (_Joystick_Control_PARM_2 + 2),#0x00
2A67 90D308    7966            mov     dptr,#_main_vx_1_251
2A6A 75F000    7967            mov     b,#0x00
2A6D 120000    7968            lcall   _Joystick_Control
2A70 AB82      7969            mov     r3,dpl
2A72 AC83      7970            mov     r4,dph
2A74 ADF0      7971            mov     r5,b
2A76 FE        7972            mov     r6,a
2A77 904CF8    7973            mov     dptr,#_curr_angle
2A7A EB        7974            mov     a,r3
2A7B F0        7975            movx    @dptr,a
2A7C A3        7976            inc     dptr
2A7D EC        7977            mov     a,r4
2A7E F0        7978            movx    @dptr,a
2A7F A3        7979            inc     dptr
2A80 ED        7980            mov     a,r5
2A81 F0        7981            movx    @dptr,a
2A82 A3        7982            inc     dptr
2A83 EE        7983            mov     a,r6
2A84 F0        7984            movx    @dptr,a
2A85 020000    7985            ljmp    L042016?
2A88           7986   L042006?:
2A88           7987   ;        main.c:1325: printf("*** BAD MESSAGE ***: %s\r\n", buff);
2A88 7448      7988            mov     a,#_buff
2A8A C0E0      7989            push    acc
2A8C 7455      7990            mov     a,#(_buff >> 8)
2A8E C0E0      7991            push    acc
2A90 7440      7992            mov     a,#0x40
2A92 C0E0      7993            push    acc
2A94 74C0      7994            mov     a,#__str_20
2A96 C0E0      7995            push    acc
2A98 7425      7996            mov     a,#(__str_20 >> 8)
2A9A C0E0      7997            push    acc
2A9C 7480      7998            mov     a,#0x80
2A9E C0E0      7999            push    acc
2AA0 120000    8000            lcall   _printf
2AA3 E581      8001            mov     a,sp
2AA5 24FA      8002            add     a,#0xfa
2AA7 F581      8003            mov     sp,a
2AA9 020000    8004            ljmp    L042016?
2AAC           8005   L042011?:
2AAC           8006   ;        main.c:1328: else if(c=='@') // Master wants slave data
2AAC BA4000    8007            cjne    r2,#0x40,L042035?
2AAF 8000      8008            sjmp    L042036?
2AB1           8009   L042035?:
2AB1 020000    8010            ljmp    L042016?
2AB4           8011   L042036?:
2AB4           8012   ;        main.c:1330: sprintf(buff, "0,00,%04ld,%05d,%03d\n", freq100, weight, (int)curr_angle);
2AB4 904CF8    8013            mov     dptr,#_curr_angle
2AB7 E0        8014            movx    a,@dptr
2AB8 FA        8015            mov     r2,a
2AB9 A3        8016            inc     dptr
2ABA E0        8017            movx    a,@dptr
2ABB FB        8018            mov     r3,a
2ABC A3        8019            inc     dptr
2ABD E0        8020            movx    a,@dptr
2ABE FC        8021            mov     r4,a
2ABF A3        8022            inc     dptr
2AC0 E0        8023            movx    a,@dptr
2AC1 8A82      8024            mov     dpl,r2
2AC3 8B83      8025            mov     dph,r3
2AC5 8CF0      8026            mov     b,r4
2AC7 120000    8027            lcall   ___fs2sint
2ACA AA82      8028            mov     r2,dpl
2ACC AB83      8029            mov     r3,dph
2ACE C002      8030            push    ar2
2AD0 C003      8031            push    ar3
2AD2 904BB8    8032            mov     dptr,#_weight
2AD5 E0        8033            movx    a,@dptr
2AD6 C0E0      8034            push    acc
2AD8 A3        8035            inc     dptr
2AD9 E0        8036            movx    a,@dptr
2ADA C0E0      8037            push    acc
2ADC 905508    8038            mov     dptr,#_freq100
2ADF E0        8039            movx    a,@dptr
2AE0 C0E0      8040            push    acc
2AE2 A3        8041            inc     dptr
2AE3 E0        8042            movx    a,@dptr
2AE4 C0E0      8043            push    acc
2AE6 A3        8044            inc     dptr
2AE7 E0        8045            movx    a,@dptr
2AE8 C0E0      8046            push    acc
2AEA A3        8047            inc     dptr
2AEB E0        8048            movx    a,@dptr
2AEC C0E0      8049            push    acc
2AEE 7478      8050            mov     a,#__str_9
2AF0 C0E0      8051            push    acc
2AF2 7416      8052            mov     a,#(__str_9 >> 8)
2AF4 C0E0      8053            push    acc
2AF6 7480      8054            mov     a,#0x80
2AF8 C0E0      8055            push    acc
2AFA 7448      8056            mov     a,#_buff
2AFC C0E0      8057            push    acc
2AFE 7455      8058            mov     a,#(_buff >> 8)
2B00 C0E0      8059            push    acc
2B02 7440      8060            mov     a,#0x40
2B04 C0E0      8061            push    acc
2B06 120000    8062            lcall   _sprintf
2B09 E581      8063            mov     a,sp
2B0B 24F2      8064            add     a,#0xf2
2B0D F581      8065            mov     sp,a
2B0F           8066   ;        main.c:1331: waitms(5); // The radio seems to need this delay...
2B0F 900005    8067            mov     dptr,#0x0005
2B12 120000    8068            lcall   _waitms
2B15           8069   ;        main.c:1332: sendstr1(buff);
2B15 905548    8070            mov     dptr,#_buff
2B18 75F040    8071            mov     b,#0x40
2B1B 120000    8072            lcall   _sendstr1
2B1E 020000    8073            ljmp    L042016?
2B21           8074            rseg R_CSEG
2B21           8075   
0000           8076            rseg R_XINIT
0000           8077   __xinit__pwm_counter:
0000 0000      8078            db 0x00,0x00    ; 0
0002           8079   __xinit__servo_counter:
0002 0000      8080            db 0x00,0x00    ; 0
0004           8081   __xinit__pwm_left:
0004 00        8082            db 0x00         ; 0
0005           8083   __xinit__pwm_right:
0005 00        8084            db 0x00         ; 0
0006           8085   __xinit__L_motor_dir:
0006 01        8086            db 0x01         ; 1
0007           8087   __xinit__R_motor_dir:
0007 01        8088            db 0x01         ; 1
0008           8089   __xinit__servo_base:
0008 32        8090            db 0x32         ; 50
0009           8091   __xinit__servo_arm:
0009 32        8092            db 0x32         ; 50
000A           8093   __xinit__vx_thres:
000A A100      8094            db 0xA1,0x00    ;  161
000C           8095   __xinit__vy_thres:
000C A600      8096            db 0xA6,0x00    ;  166
000E           8097   __xinit__vx:
000E 0000      8098            db 0x00,0x00    ;  0
0010           8099   __xinit__vy:
0010 0000      8100            db 0x00,0x00    ;  0
0012           8101   __xinit__fre_mea_count:
0012 0000      8102            db 0x00,0x00    ; 0
0014           8103   __xinit__weight_mea_count:
0014 0000      8104            db 0x00,0x00    ; 0
0016           8105   __xinit__seed:
0016 3930      8106            db 0x39,0x30    ; 12345
0018           8107   __xinit__pwm_corr:
0018 3333733F  8108            db 0x33,0x33,0x73,0x3F  ;  9.500000e-001
001C           8109   __xinit__curr_angle:
001C 00000000  8110            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0020           8111   __xinit__raw_angle:
0020 00000000  8112            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0024           8113   __xinit__last_raw_angle:
0024 00000000  8114            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0028           8115   __xinit__angle_diff:
0028 00000000  8116            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
002C           8117   __xinit__mea_yes:
002C 01        8118            db 0x01         ;  1
002D           8119   __xinit__weight:
002D 0000      8120            db 0x00,0x00    ; 0
002F           8121   __xinit__duration:
002F 00000000  8122            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0033           8123   __xinit__distance:
0033 00000000  8124            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0037           8125   
0000           8126            rseg R_CONST
0000           8127   __str_0:
0000 4572726F  8128            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
0035 0D        8129            db 0x0D
0036 0A        8130            db 0x0A
0037 00        8131            db 0x00
0038           8132   __str_1:
0038 424D4D31  8133            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
0068 0D        8134            db 0x0D
0069 0A        8135            db 0x0A
006A 00        8136            db 0x00
006B           8137   __str_2:
006B 436F6D6D  8138            db 'Command: %s'
     616E643A
     202573
0076 00        8139            db 0x00
0077           8140   __str_3:
0077 52657370  8141            db 'Response: %s'
     6F6E7365
     3A202573
0083 0D        8142            db 0x0D
0084 0A        8143            db 0x0A
0085 00        8144            db 0x00
0086           8145   __str_4:
0086 41542B44  8146            db 'AT+DVID0000'
     56494430
     303030
0091 0D        8147            db 0x0D
0092 0A        8148            db 0x0A
0093 00        8149            db 0x00
0094           8150   __str_5:
0094 6D617374  8151            db 'master_messgae_auto_mode: %s'
     65725F6D
     65737367
     61655F61
     75746F5F
     6D6F6465
     3A202573
00B0 0D        8152            db 0x0D
00B1 0A        8153            db 0x0A
00B2 00        8154            db 0x00
00B3           8155   __str_6:
00B3 25303364  8156            db '%03d,%03d,%01d,%01d'
     2C253033
     642C2530
     31642C25
     303164
00C6 00        8157            db 0x00
00C7           8158   __str_7:
00C7 25303164  8159            db '%01d,%02d,%ld,%05d,%03d'
     2C253032
     642C256C
     642C2530
     35642C25
     303364
00DE 0A        8160            db 0x0A
00DF 00        8161            db 0x00
00E0           8162   __str_8:
00E0 663A2530  8163            db 'f:%04ld, d1:%d, d2:%d, bound_dectect: %d'
     346C642C
     2064313A
     25642C20
     64323A25
     642C2062
     6F756E64
     5F646563
     74656374
     3A202564
0108 0D        8164            db 0x0D
0109 0A        8165            db 0x0A
010A 00        8166            db 0x00
010B           8167   __str_9:
010B 302C3030  8168            db '0,00,%04ld,%05d,%03d'
     2C253034
     6C642C25
     3035642C
     25303364
011F 0A        8169            db 0x0A
0120 00        8170            db 0x00
0121           8171   __str_10:
0121 41542B56  8172            db 'AT+VER'
     4552
0127 0D        8173            db 0x0D
0128 0A        8174            db 0x0A
0129 00        8175            db 0x00
012A           8176   __str_11:
012A 41542B42  8177            db 'AT+BAUD'
     415544
0131 0D        8178            db 0x0D
0132 0A        8179            db 0x0A
0133 00        8180            db 0x00
0134           8181   __str_12:
0134 41542B52  8182            db 'AT+RFID'
     464944
013B 0D        8183            db 0x0D
013C 0A        8184            db 0x0A
013D 00        8185            db 0x00
013E           8186   __str_13:
013E 41542B44  8187            db 'AT+DVID'
     564944
0145 0D        8188            db 0x0D
0146 0A        8189            db 0x0A
0147 00        8190            db 0x00
0148           8191   __str_14:
0148 41542B52  8192            db 'AT+RFC002'
     46433030
     32
0151 0D        8193            db 0x0D
0152 0A        8194            db 0x0A
0153 00        8195            db 0x00
0154           8196   __str_15:
0154 41542B50  8197            db 'AT+POWE'
     4F5745
015B 0D        8198            db 0x0D
015C 0A        8199            db 0x0A
015D 00        8200            db 0x00
015E           8201   __str_16:
015E 41542B43  8202            db 'AT+CLSS'
     4C5353
0165 0D        8203            db 0x0D
0166 0A        8204            db 0x0A
0167 00        8205            db 0x00
0168           8206   __str_17:
0168 41542B44  8207            db 'AT+DVIDEF11'
     56494445
     463131
0173 0D        8208            db 0x0D
0174 0A        8209            db 0x0A
0175 00        8210            db 0x00
0176           8211   __str_18:
0176 4D617374  8212            db 'Master says: %s'
     65722073
     6179733A
     202573
0185 0D        8213            db 0x0D
0186 0A        8214            db 0x0A
0187 00        8215            db 0x00
0188           8216   __str_19:
0188 25303364  8217            db '%03d,%03d,%c,%01d'
     2C253033
     642C2563
     2C253031
     64
0199 00        8218            db 0x00
019A           8219   __str_20:
019A 2A2A2A20  8220            db '*** BAD MESSAGE ***: %s'
     42414420
     4D455353
     41474520
     2A2A2A3A
     202573
01B1 0D        8221            db 0x0D
01B2 0A        8222            db 0x0A
01B3 00        8223            db 0x00
01B4           8224   
0096           8225            CSEG
0096           8226   
0096           8227   end
