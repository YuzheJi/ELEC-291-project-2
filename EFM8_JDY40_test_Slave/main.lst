0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Sat Mar 29 18:51:35 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _check_bound_PARM_2
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Joystick_Control
0000             30            public _Read_angle
0000             31            public _Auto_mode_slave
0000             32            public _get_random_90_250
0000             33            public _simple_rand
0000             34            public _Move_forward
0000             35            public _Right_angle
0000             36            public _Move_back_ms
0000             37            public _Init_all
0000             38            public _check_bound
0000             39            public _servo_pick
0000             40            public _Timer5_ISR
0000             41            public _ADC_at_Pin
0000             42            public _InitPinADC
0000             43            public _InitADC
0000             44            public _Set_Pin_Input
0000             45            public _Set_Pin_Output
0000             46            public _ReceptionOff
0000             47            public _SendATCommand
0000             48            public _waitms_or_RI1
0000             49            public _RXU1
0000             50            public _getstr1
0000             51            public _getchar1_with_timeout
0000             52            public _getchar1
0000             53            public _sendstr1
0000             54            public _putchar1
0000             55            public _UART1_Init
0000             56            public _BMM150_Read_Data
0000             57            public _BMM150_compensate_y
0000             58            public _BMM150_compensate_x
0000             59            public _BMM150_Init
0000             60            public _BMM150_Read_Trim_Registers
0000             61            public _SPI_write
0000             62            public _SPI_read
0000             63            public _SPI_transfer
0000             64            public _waitms
0000             65            public _Timer3us
0000             66            public __c51_external_startup
0000             67            public _pwm_corr
0000             68            public _seed
0000             69            public _fre_mea_count
0000             70            public _vy
0000             71            public _vx
0000             72            public _vy_thres
0000             73            public _vx_thres
0000             74            public _servo_arm
0000             75            public _servo_base
0000             76            public _R_motor_dir
0000             77            public _L_motor_dir
0000             78            public _pwm_right
0000             79            public _pwm_left
0000             80            public _servo_counter
0000             81            public _pwm_counter
0000             82            public _dig_xyz1
0000             83            public _dig_xy2
0000             84            public _dig_xy1
0000             85            public _dig_z4
0000             86            public _dig_z3
0000             87            public _dig_z2
0000             88            public _dig_z1
0000             89            public _dig_y2
0000             90            public _dig_y1
0000             91            public _dig_x2
0000             92            public _dig_x1
0000             93            public _d2
0000             94            public _d1
0000             95            public _freq100
0000             96            public _buff
0000             97            public _Joystick_Control_PARM_2
0000             98            public _getstr1_PARM_2
0000             99            public _BMM150_Read_Data_PARM_2
0000            100            public _BMM150_compensate_y_PARM_2
0000            101            public _BMM150_compensate_x_PARM_2
0000            102            public _SPI_write_PARM_2
0000            103   ;--------------------------------------------------------
0000            104   ; Special Function Registers
0000            105   ;--------------------------------------------------------
0000            106   _ACC            DATA 0xe0
0000            107   _ADC0ASAH       DATA 0xb6
0000            108   _ADC0ASAL       DATA 0xb5
0000            109   _ADC0ASCF       DATA 0xa1
0000            110   _ADC0ASCT       DATA 0xc7
0000            111   _ADC0CF0        DATA 0xbc
0000            112   _ADC0CF1        DATA 0xb9
0000            113   _ADC0CF2        DATA 0xdf
0000            114   _ADC0CN0        DATA 0xe8
0000            115   _ADC0CN1        DATA 0xb2
0000            116   _ADC0CN2        DATA 0xb3
0000            117   _ADC0GTH        DATA 0xc4
0000            118   _ADC0GTL        DATA 0xc3
0000            119   _ADC0H          DATA 0xbe
0000            120   _ADC0L          DATA 0xbd
0000            121   _ADC0LTH        DATA 0xc6
0000            122   _ADC0LTL        DATA 0xc5
0000            123   _ADC0MX         DATA 0xbb
0000            124   _B              DATA 0xf0
0000            125   _CKCON0         DATA 0x8e
0000            126   _CKCON1         DATA 0xa6
0000            127   _CLEN0          DATA 0xc6
0000            128   _CLIE0          DATA 0xc7
0000            129   _CLIF0          DATA 0xe8
0000            130   _CLKSEL         DATA 0xa9
0000            131   _CLOUT0         DATA 0xd1
0000            132   _CLU0CF         DATA 0xb1
0000            133   _CLU0FN         DATA 0xaf
0000            134   _CLU0MX         DATA 0x84
0000            135   _CLU1CF         DATA 0xb3
0000            136   _CLU1FN         DATA 0xb2
0000            137   _CLU1MX         DATA 0x85
0000            138   _CLU2CF         DATA 0xb6
0000            139   _CLU2FN         DATA 0xb5
0000            140   _CLU2MX         DATA 0x91
0000            141   _CLU3CF         DATA 0xbf
0000            142   _CLU3FN         DATA 0xbe
0000            143   _CLU3MX         DATA 0xae
0000            144   _CMP0CN0        DATA 0x9b
0000            145   _CMP0CN1        DATA 0x99
0000            146   _CMP0MD         DATA 0x9d
0000            147   _CMP0MX         DATA 0x9f
0000            148   _CMP1CN0        DATA 0xbf
0000            149   _CMP1CN1        DATA 0xac
0000            150   _CMP1MD         DATA 0xab
0000            151   _CMP1MX         DATA 0xaa
0000            152   _CRC0CN0        DATA 0xce
0000            153   _CRC0CN1        DATA 0x86
0000            154   _CRC0CNT        DATA 0xd3
0000            155   _CRC0DAT        DATA 0xcb
0000            156   _CRC0FLIP       DATA 0xcf
0000            157   _CRC0IN         DATA 0xca
0000            158   _CRC0ST         DATA 0xd2
0000            159   _DAC0CF0        DATA 0x91
0000            160   _DAC0CF1        DATA 0x92
0000            161   _DAC0H          DATA 0x85
0000            162   _DAC0L          DATA 0x84
0000            163   _DAC1CF0        DATA 0x93
0000            164   _DAC1CF1        DATA 0x94
0000            165   _DAC1H          DATA 0x8a
0000            166   _DAC1L          DATA 0x89
0000            167   _DAC2CF0        DATA 0x95
0000            168   _DAC2CF1        DATA 0x96
0000            169   _DAC2H          DATA 0x8c
0000            170   _DAC2L          DATA 0x8b
0000            171   _DAC3CF0        DATA 0x9a
0000            172   _DAC3CF1        DATA 0x9c
0000            173   _DAC3H          DATA 0x8e
0000            174   _DAC3L          DATA 0x8d
0000            175   _DACGCF0        DATA 0x88
0000            176   _DACGCF1        DATA 0x98
0000            177   _DACGCF2        DATA 0xa2
0000            178   _DERIVID        DATA 0xad
0000            179   _DEVICEID       DATA 0xb5
0000            180   _DPH            DATA 0x83
0000            181   _DPL            DATA 0x82
0000            182   _EIE1           DATA 0xe6
0000            183   _EIE2           DATA 0xf3
0000            184   _EIP1           DATA 0xbb
0000            185   _EIP1H          DATA 0xee
0000            186   _EIP2           DATA 0xed
0000            187   _EIP2H          DATA 0xf6
0000            188   _EMI0CN         DATA 0xe7
0000            189   _FLKEY          DATA 0xb7
0000            190   _HFO0CAL        DATA 0xc7
0000            191   _HFO1CAL        DATA 0xd6
0000            192   _HFOCN          DATA 0xef
0000            193   _I2C0ADM        DATA 0xff
0000            194   _I2C0CN0        DATA 0xba
0000            195   _I2C0DIN        DATA 0xbc
0000            196   _I2C0DOUT       DATA 0xbb
0000            197   _I2C0FCN0       DATA 0xad
0000            198   _I2C0FCN1       DATA 0xab
0000            199   _I2C0FCT        DATA 0xf5
0000            200   _I2C0SLAD       DATA 0xbd
0000            201   _I2C0STAT       DATA 0xb9
0000            202   _IE             DATA 0xa8
0000            203   _IP             DATA 0xb8
0000            204   _IPH            DATA 0xf2
0000            205   _IT01CF         DATA 0xe4
0000            206   _LFO0CN         DATA 0xb1
0000            207   _P0             DATA 0x80
0000            208   _P0MASK         DATA 0xfe
0000            209   _P0MAT          DATA 0xfd
0000            210   _P0MDIN         DATA 0xf1
0000            211   _P0MDOUT        DATA 0xa4
0000            212   _P0SKIP         DATA 0xd4
0000            213   _P1             DATA 0x90
0000            214   _P1MASK         DATA 0xee
0000            215   _P1MAT          DATA 0xed
0000            216   _P1MDIN         DATA 0xf2
0000            217   _P1MDOUT        DATA 0xa5
0000            218   _P1SKIP         DATA 0xd5
0000            219   _P2             DATA 0xa0
0000            220   _P2MASK         DATA 0xfc
0000            221   _P2MAT          DATA 0xfb
0000            222   _P2MDIN         DATA 0xf3
0000            223   _P2MDOUT        DATA 0xa6
0000            224   _P2SKIP         DATA 0xcc
0000            225   _P3             DATA 0xb0
0000            226   _P3MDIN         DATA 0xf4
0000            227   _P3MDOUT        DATA 0x9c
0000            228   _PCA0CENT       DATA 0x9e
0000            229   _PCA0CLR        DATA 0x9c
0000            230   _PCA0CN0        DATA 0xd8
0000            231   _PCA0CPH0       DATA 0xfc
0000            232   _PCA0CPH1       DATA 0xea
0000            233   _PCA0CPH2       DATA 0xec
0000            234   _PCA0CPH3       DATA 0xf5
0000            235   _PCA0CPH4       DATA 0x85
0000            236   _PCA0CPH5       DATA 0xde
0000            237   _PCA0CPL0       DATA 0xfb
0000            238   _PCA0CPL1       DATA 0xe9
0000            239   _PCA0CPL2       DATA 0xeb
0000            240   _PCA0CPL3       DATA 0xf4
0000            241   _PCA0CPL4       DATA 0x84
0000            242   _PCA0CPL5       DATA 0xdd
0000            243   _PCA0CPM0       DATA 0xda
0000            244   _PCA0CPM1       DATA 0xdb
0000            245   _PCA0CPM2       DATA 0xdc
0000            246   _PCA0CPM3       DATA 0xae
0000            247   _PCA0CPM4       DATA 0xaf
0000            248   _PCA0CPM5       DATA 0xcc
0000            249   _PCA0H          DATA 0xfa
0000            250   _PCA0L          DATA 0xf9
0000            251   _PCA0MD         DATA 0xd9
0000            252   _PCA0POL        DATA 0x96
0000            253   _PCA0PWM        DATA 0xf7
0000            254   _PCON0          DATA 0x87
0000            255   _PCON1          DATA 0xcd
0000            256   _PFE0CN         DATA 0xc1
0000            257   _PRTDRV         DATA 0xf6
0000            258   _PSCTL          DATA 0x8f
0000            259   _PSTAT0         DATA 0xaa
0000            260   _PSW            DATA 0xd0
0000            261   _REF0CN         DATA 0xd1
0000            262   _REG0CN         DATA 0xc9
0000            263   _REVID          DATA 0xb6
0000            264   _RSTSRC         DATA 0xef
0000            265   _SBCON1         DATA 0x94
0000            266   _SBRLH1         DATA 0x96
0000            267   _SBRLL1         DATA 0x95
0000            268   _SBUF           DATA 0x99
0000            269   _SBUF0          DATA 0x99
0000            270   _SBUF1          DATA 0x92
0000            271   _SCON           DATA 0x98
0000            272   _SCON0          DATA 0x98
0000            273   _SCON1          DATA 0xc8
0000            274   _SFRPAGE        DATA 0xa7
0000            275   _SFRPGCN        DATA 0xbc
0000            276   _SFRSTACK       DATA 0xd7
0000            277   _SMB0ADM        DATA 0xd6
0000            278   _SMB0ADR        DATA 0xd7
0000            279   _SMB0CF         DATA 0xc1
0000            280   _SMB0CN0        DATA 0xc0
0000            281   _SMB0DAT        DATA 0xc2
0000            282   _SMB0FCN0       DATA 0xc3
0000            283   _SMB0FCN1       DATA 0xc4
0000            284   _SMB0FCT        DATA 0xef
0000            285   _SMB0RXLN       DATA 0xc5
0000            286   _SMB0TC         DATA 0xac
0000            287   _SMOD1          DATA 0x93
0000            288   _SP             DATA 0x81
0000            289   _SPI0CFG        DATA 0xa1
0000            290   _SPI0CKR        DATA 0xa2
0000            291   _SPI0CN0        DATA 0xf8
0000            292   _SPI0DAT        DATA 0xa3
0000            293   _SPI0FCN0       DATA 0x9a
0000            294   _SPI0FCN1       DATA 0x9b
0000            295   _SPI0FCT        DATA 0xf7
0000            296   _SPI0PCF        DATA 0xdf
0000            297   _TCON           DATA 0x88
0000            298   _TH0            DATA 0x8c
0000            299   _TH1            DATA 0x8d
0000            300   _TL0            DATA 0x8a
0000            301   _TL1            DATA 0x8b
0000            302   _TMOD           DATA 0x89
0000            303   _TMR2CN0        DATA 0xc8
0000            304   _TMR2CN1        DATA 0xfd
0000            305   _TMR2H          DATA 0xcf
0000            306   _TMR2L          DATA 0xce
0000            307   _TMR2RLH        DATA 0xcb
0000            308   _TMR2RLL        DATA 0xca
0000            309   _TMR3CN0        DATA 0x91
0000            310   _TMR3CN1        DATA 0xfe
0000            311   _TMR3H          DATA 0x95
0000            312   _TMR3L          DATA 0x94
0000            313   _TMR3RLH        DATA 0x93
0000            314   _TMR3RLL        DATA 0x92
0000            315   _TMR4CN0        DATA 0x98
0000            316   _TMR4CN1        DATA 0xff
0000            317   _TMR4H          DATA 0xa5
0000            318   _TMR4L          DATA 0xa4
0000            319   _TMR4RLH        DATA 0xa3
0000            320   _TMR4RLL        DATA 0xa2
0000            321   _TMR5CN0        DATA 0xc0
0000            322   _TMR5CN1        DATA 0xf1
0000            323   _TMR5H          DATA 0xd5
0000            324   _TMR5L          DATA 0xd4
0000            325   _TMR5RLH        DATA 0xd3
0000            326   _TMR5RLL        DATA 0xd2
0000            327   _UART0PCF       DATA 0xd9
0000            328   _UART1FCN0      DATA 0x9d
0000            329   _UART1FCN1      DATA 0xd8
0000            330   _UART1FCT       DATA 0xfa
0000            331   _UART1LIN       DATA 0x9e
0000            332   _UART1PCF       DATA 0xda
0000            333   _VDM0CN         DATA 0xff
0000            334   _WDTCN          DATA 0x97
0000            335   _XBR0           DATA 0xe1
0000            336   _XBR1           DATA 0xe2
0000            337   _XBR2           DATA 0xe3
0000            338   _XOSC0CN        DATA 0x86
0000            339   _DPTR           DATA 0x8382
0000            340   _TMR2RL         DATA 0xcbca
0000            341   _TMR3RL         DATA 0x9392
0000            342   _TMR4RL         DATA 0xa3a2
0000            343   _TMR5RL         DATA 0xd3d2
0000            344   _TMR0           DATA 0x8c8a
0000            345   _TMR1           DATA 0x8d8b
0000            346   _TMR2           DATA 0xcfce
0000            347   _TMR3           DATA 0x9594
0000            348   _TMR4           DATA 0xa5a4
0000            349   _TMR5           DATA 0xd5d4
0000            350   _SBRL1          DATA 0x9695
0000            351   _PCA0           DATA 0xfaf9
0000            352   _PCA0CP0        DATA 0xfcfb
0000            353   _PCA0CP1        DATA 0xeae9
0000            354   _PCA0CP2        DATA 0xeceb
0000            355   _PCA0CP3        DATA 0xf5f4
0000            356   _PCA0CP4        DATA 0x8584
0000            357   _PCA0CP5        DATA 0xdedd
0000            358   _ADC0ASA        DATA 0xb6b5
0000            359   _ADC0GT         DATA 0xc4c3
0000            360   _ADC0           DATA 0xbebd
0000            361   _ADC0LT         DATA 0xc6c5
0000            362   _DAC0           DATA 0x8584
0000            363   _DAC1           DATA 0x8a89
0000            364   _DAC2           DATA 0x8c8b
0000            365   _DAC3           DATA 0x8e8d
0000            366   ;--------------------------------------------------------
0000            367   ; special function bits
0000            368   ;--------------------------------------------------------
0000            369   _ACC_0          BIT 0xe0
0000            370   _ACC_1          BIT 0xe1
0000            371   _ACC_2          BIT 0xe2
0000            372   _ACC_3          BIT 0xe3
0000            373   _ACC_4          BIT 0xe4
0000            374   _ACC_5          BIT 0xe5
0000            375   _ACC_6          BIT 0xe6
0000            376   _ACC_7          BIT 0xe7
0000            377   _TEMPE          BIT 0xe8
0000            378   _ADGN0          BIT 0xe9
0000            379   _ADGN1          BIT 0xea
0000            380   _ADWINT         BIT 0xeb
0000            381   _ADBUSY         BIT 0xec
0000            382   _ADINT          BIT 0xed
0000            383   _IPOEN          BIT 0xee
0000            384   _ADEN           BIT 0xef
0000            385   _B_0            BIT 0xf0
0000            386   _B_1            BIT 0xf1
0000            387   _B_2            BIT 0xf2
0000            388   _B_3            BIT 0xf3
0000            389   _B_4            BIT 0xf4
0000            390   _B_5            BIT 0xf5
0000            391   _B_6            BIT 0xf6
0000            392   _B_7            BIT 0xf7
0000            393   _C0FIF          BIT 0xe8
0000            394   _C0RIF          BIT 0xe9
0000            395   _C1FIF          BIT 0xea
0000            396   _C1RIF          BIT 0xeb
0000            397   _C2FIF          BIT 0xec
0000            398   _C2RIF          BIT 0xed
0000            399   _C3FIF          BIT 0xee
0000            400   _C3RIF          BIT 0xef
0000            401   _D1SRC0         BIT 0x88
0000            402   _D1SRC1         BIT 0x89
0000            403   _D1AMEN         BIT 0x8a
0000            404   _D01REFSL       BIT 0x8b
0000            405   _D3SRC0         BIT 0x8c
0000            406   _D3SRC1         BIT 0x8d
0000            407   _D3AMEN         BIT 0x8e
0000            408   _D23REFSL       BIT 0x8f
0000            409   _D0UDIS         BIT 0x98
0000            410   _D1UDIS         BIT 0x99
0000            411   _D2UDIS         BIT 0x9a
0000            412   _D3UDIS         BIT 0x9b
0000            413   _EX0            BIT 0xa8
0000            414   _ET0            BIT 0xa9
0000            415   _EX1            BIT 0xaa
0000            416   _ET1            BIT 0xab
0000            417   _ES0            BIT 0xac
0000            418   _ET2            BIT 0xad
0000            419   _ESPI0          BIT 0xae
0000            420   _EA             BIT 0xaf
0000            421   _PX0            BIT 0xb8
0000            422   _PT0            BIT 0xb9
0000            423   _PX1            BIT 0xba
0000            424   _PT1            BIT 0xbb
0000            425   _PS0            BIT 0xbc
0000            426   _PT2            BIT 0xbd
0000            427   _PSPI0          BIT 0xbe
0000            428   _P0_0           BIT 0x80
0000            429   _P0_1           BIT 0x81
0000            430   _P0_2           BIT 0x82
0000            431   _P0_3           BIT 0x83
0000            432   _P0_4           BIT 0x84
0000            433   _P0_5           BIT 0x85
0000            434   _P0_6           BIT 0x86
0000            435   _P0_7           BIT 0x87
0000            436   _P1_0           BIT 0x90
0000            437   _P1_1           BIT 0x91
0000            438   _P1_2           BIT 0x92
0000            439   _P1_3           BIT 0x93
0000            440   _P1_4           BIT 0x94
0000            441   _P1_5           BIT 0x95
0000            442   _P1_6           BIT 0x96
0000            443   _P1_7           BIT 0x97
0000            444   _P2_0           BIT 0xa0
0000            445   _P2_1           BIT 0xa1
0000            446   _P2_2           BIT 0xa2
0000            447   _P2_3           BIT 0xa3
0000            448   _P2_4           BIT 0xa4
0000            449   _P2_5           BIT 0xa5
0000            450   _P2_6           BIT 0xa6
0000            451   _P3_0           BIT 0xb0
0000            452   _P3_1           BIT 0xb1
0000            453   _P3_2           BIT 0xb2
0000            454   _P3_3           BIT 0xb3
0000            455   _P3_4           BIT 0xb4
0000            456   _P3_7           BIT 0xb7
0000            457   _CCF0           BIT 0xd8
0000            458   _CCF1           BIT 0xd9
0000            459   _CCF2           BIT 0xda
0000            460   _CCF3           BIT 0xdb
0000            461   _CCF4           BIT 0xdc
0000            462   _CCF5           BIT 0xdd
0000            463   _CR             BIT 0xde
0000            464   _CF             BIT 0xdf
0000            465   _PARITY         BIT 0xd0
0000            466   _F1             BIT 0xd1
0000            467   _OV             BIT 0xd2
0000            468   _RS0            BIT 0xd3
0000            469   _RS1            BIT 0xd4
0000            470   _F0             BIT 0xd5
0000            471   _AC             BIT 0xd6
0000            472   _CY             BIT 0xd7
0000            473   _RI             BIT 0x98
0000            474   _TI             BIT 0x99
0000            475   _RB8            BIT 0x9a
0000            476   _TB8            BIT 0x9b
0000            477   _REN            BIT 0x9c
0000            478   _CE             BIT 0x9d
0000            479   _SMODE          BIT 0x9e
0000            480   _RI1            BIT 0xc8
0000            481   _TI1            BIT 0xc9
0000            482   _RBX1           BIT 0xca
0000            483   _TBX1           BIT 0xcb
0000            484   _REN1           BIT 0xcc
0000            485   _PERR1          BIT 0xcd
0000            486   _OVR1           BIT 0xce
0000            487   _SI             BIT 0xc0
0000            488   _ACK            BIT 0xc1
0000            489   _ARBLOST        BIT 0xc2
0000            490   _ACKRQ          BIT 0xc3
0000            491   _STO            BIT 0xc4
0000            492   _STA            BIT 0xc5
0000            493   _TXMODE         BIT 0xc6
0000            494   _MASTER         BIT 0xc7
0000            495   _SPIEN          BIT 0xf8
0000            496   _TXNF           BIT 0xf9
0000            497   _NSSMD0         BIT 0xfa
0000            498   _NSSMD1         BIT 0xfb
0000            499   _RXOVRN         BIT 0xfc
0000            500   _MODF           BIT 0xfd
0000            501   _WCOL           BIT 0xfe
0000            502   _SPIF           BIT 0xff
0000            503   _IT0            BIT 0x88
0000            504   _IE0            BIT 0x89
0000            505   _IT1            BIT 0x8a
0000            506   _IE1            BIT 0x8b
0000            507   _TR0            BIT 0x8c
0000            508   _TF0            BIT 0x8d
0000            509   _TR1            BIT 0x8e
0000            510   _TF1            BIT 0x8f
0000            511   _T2XCLK0        BIT 0xc8
0000            512   _T2XCLK1        BIT 0xc9
0000            513   _TR2            BIT 0xca
0000            514   _T2SPLIT        BIT 0xcb
0000            515   _TF2CEN         BIT 0xcc
0000            516   _TF2LEN         BIT 0xcd
0000            517   _TF2L           BIT 0xce
0000            518   _TF2H           BIT 0xcf
0000            519   _T4XCLK0        BIT 0x98
0000            520   _T4XCLK1        BIT 0x99
0000            521   _TR4            BIT 0x9a
0000            522   _T4SPLIT        BIT 0x9b
0000            523   _TF4CEN         BIT 0x9c
0000            524   _TF4LEN         BIT 0x9d
0000            525   _TF4L           BIT 0x9e
0000            526   _TF4H           BIT 0x9f
0000            527   _T5XCLK0        BIT 0xc0
0000            528   _T5XCLK1        BIT 0xc1
0000            529   _TR5            BIT 0xc2
0000            530   _T5SPLIT        BIT 0xc3
0000            531   _TF5CEN         BIT 0xc4
0000            532   _TF5LEN         BIT 0xc5
0000            533   _TF5L           BIT 0xc6
0000            534   _TF5H           BIT 0xc7
0000            535   _RIE            BIT 0xd8
0000            536   _RXTO0          BIT 0xd9
0000            537   _RXTO1          BIT 0xda
0000            538   _RFRQ           BIT 0xdb
0000            539   _TIE            BIT 0xdc
0000            540   _TXHOLD         BIT 0xdd
0000            541   _TXNF1          BIT 0xde
0000            542   _TFRQ           BIT 0xdf
0000            543   ;--------------------------------------------------------
0000            544   ; overlayable register banks
0000            545   ;--------------------------------------------------------
0000            546            rbank0 segment data overlay
0000            547   ;--------------------------------------------------------
0000            548   ; overlayable bit register bank
0000            549   ;--------------------------------------------------------
0000            550            rseg BIT_BANK
0000            551   bits:
0000            552            ds 1
0001            553            b0 equ  bits.0 
0001            554            b1 equ  bits.1 
0001            555            b2 equ  bits.2 
0001            556            b3 equ  bits.3 
0001            557            b4 equ  bits.4 
0001            558            b5 equ  bits.5 
0001            559            b6 equ  bits.6 
0001            560            b7 equ  bits.7 
0001            561   ;--------------------------------------------------------
0001            562   ; internal ram data
0001            563   ;--------------------------------------------------------
0000            564            rseg R_DSEG
0000            565   _SPI_write_PARM_2:
0000            566            ds 1
0001            567   _BMM150_compensate_x_PARM_2:
0001            568            ds 3
0004            569   _BMM150_compensate_x_sloc0_1_0:
0004            570            ds 4
0008            571   _BMM150_compensate_y_PARM_2:
0008            572            ds 3
000B            573   _BMM150_compensate_y_sloc0_1_0:
000B            574            ds 4
000F            575   _BMM150_Read_Data_PARM_2:
000F            576            ds 3
0012            577   _BMM150_Read_Data_mag_x_1_124:
0012            578            ds 3
0015            579   _getstr1_PARM_2:
0015            580            ds 1
0016            581   _Auto_mode_slave_sloc0_1_0:
0016            582            ds 2
0018            583   _Read_angle_sloc0_1_0:
0018            584            ds 4
001C            585   _Joystick_Control_PARM_2:
001C            586            ds 3
001F            587   _Joystick_Control_sloc0_1_0:
001F            588            ds 2
0021            589   _Joystick_Control_sloc1_1_0:
0021            590            ds 1
0022            591   _Joystick_Control_sloc2_1_0:
0022            592            ds 2
0024            593   _Joystick_Control_sloc3_1_0:
0024            594            ds 1
0025            595   _Joystick_Control_sloc4_1_0:
0025            596            ds 2
0027            597   _Joystick_Control_sloc5_1_0:
0027            598            ds 4
002B            599   _Joystick_Control_sloc6_1_0:
002B            600            ds 2
002D            601   ;--------------------------------------------------------
002D            602   ; overlayable items in internal ram 
002D            603   ;--------------------------------------------------------
0000            604            rseg    R_OSEG
0000            605            rseg    R_OSEG
0000            606            rseg    R_OSEG
0000            607            rseg    R_OSEG
0000            608            rseg    R_OSEG
0000            609            rseg    R_OSEG
0000            610   _InitPinADC_PARM_2:
0000            611            ds 1
0001            612            rseg    R_OSEG
0001            613            rseg    R_OSEG
0001            614   _check_bound_PARM_2:
0001            615            ds 2
0003            616   ;--------------------------------------------------------
0003            617   ; indirectly addressable internal ram data
0003            618   ;--------------------------------------------------------
0000            619            rseg R_ISEG
0000            620   _buff:
0000            621            ds 20
0014            622   ;--------------------------------------------------------
0014            623   ; absolute internal ram data
0014            624   ;--------------------------------------------------------
0000            625            DSEG
0000            626   ;--------------------------------------------------------
0000            627   ; bit data
0000            628   ;--------------------------------------------------------
0000            629            rseg R_BSEG
0000            630   ;--------------------------------------------------------
0000            631   ; paged external ram data
0000            632   ;--------------------------------------------------------
0000            633            rseg R_PSEG
0000            634   ;--------------------------------------------------------
0000            635   ; external ram data
0000            636   ;--------------------------------------------------------
0000            637            rseg R_XSEG
0000            638   _freq100:
0000            639            ds 4
0004            640   _d1:
0004            641            ds 2
0006            642   _d2:
0006            643            ds 2
0008            644   _dig_x1:
0008            645            ds 1
0009            646   _dig_x2:
0009            647            ds 1
000A            648   _dig_y1:
000A            649            ds 1
000B            650   _dig_y2:
000B            651            ds 1
000C            652   _dig_z1:
000C            653            ds 2
000E            654   _dig_z2:
000E            655            ds 2
0010            656   _dig_z3:
0010            657            ds 2
0012            658   _dig_z4:
0012            659            ds 2
0014            660   _dig_xy1:
0014            661            ds 1
0015            662   _dig_xy2:
0015            663            ds 1
0016            664   _dig_xyz1:
0016            665            ds 2
0018            666   _BMM150_Read_Trim_Registers_trim_x1y1_1_97:
0018            667            ds 2
001A            668   _BMM150_Read_Trim_Registers_trim_xyz_data_1_97:
001A            669            ds 4
001E            670   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_97:
001E            671            ds 10
0028            672   _BMM150_compensate_x_retval_1_107:
0028            673            ds 2
002A            674   _BMM150_compensate_x_process_comp_x0_1_107:
002A            675            ds 2
002C            676   _BMM150_compensate_y_retval_1_116:
002C            677            ds 2
002E            678   _BMM150_compensate_y_process_comp_y0_1_116:
002E            679            ds 2
0030            680   _BMM150_Read_Data_x_val_1_125:
0030            681            ds 2
0032            682   _BMM150_Read_Data_y_val_1_125:
0032            683            ds 2
0034            684   _BMM150_Read_Data_rhall_val_1_125:
0034            685            ds 2
0036            686   _Auto_mode_slave_command_1_197:
0036            687            ds 2
0038            688   _Auto_mode_slave_state_res_1_197:
0038            689            ds 2
003A            690   _Auto_mode_slave_dummy_1_197:
003A            691            ds 2
003C            692   _Read_angle_mag_x_1_206:
003C            693            ds 2
003E            694   _Read_angle_mag_y_1_206:
003E            695            ds 2
0040            696   _Read_angle_sum_x_1_206:
0040            697            ds 4
0044            698   _Read_angle_sum_y_1_206:
0044            699            ds 4
0048            700   _Read_angle_angle_1_206:
0048            701            ds 4
004C            702   _Joystick_Control_vx_error_1_209:
004C            703            ds 2
004E            704   _main_vx_1_232:
004E            705            ds 2
0050            706   _main_vy_1_232:
0050            707            ds 2
0052            708   _main_auto_mode_1_232:
0052            709            ds 1
0053            710   _main_pick_1_232:
0053            711            ds 1
0054            712   ;--------------------------------------------------------
0054            713   ; absolute external ram data
0054            714   ;--------------------------------------------------------
0000            715            XSEG
0000            716   ;--------------------------------------------------------
0000            717   ; external initialized ram data
0000            718   ;--------------------------------------------------------
0000            719            rseg R_IXSEG
0000            720   _pwm_counter:
0000            721            ds 2
0002            722   _servo_counter:
0002            723            ds 2
0004            724   _pwm_left:
0004            725            ds 1
0005            726   _pwm_right:
0005            727            ds 1
0006            728   _L_motor_dir:
0006            729            ds 1
0007            730   _R_motor_dir:
0007            731            ds 1
0008            732   _servo_base:
0008            733            ds 1
0009            734   _servo_arm:
0009            735            ds 1
000A            736   _vx_thres:
000A            737            ds 2
000C            738   _vy_thres:
000C            739            ds 2
000E            740   _vx:
000E            741            ds 2
0010            742   _vy:
0010            743            ds 2
0012            744   _fre_mea_count:
0012            745            ds 2
0014            746   _seed:
0014            747            ds 2
0016            748   _pwm_corr:
0016            749            ds 4
0000            750            rseg R_HOME
0000            751            rseg R_GSINIT
0000            752            rseg R_CSEG
0000            753   ;--------------------------------------------------------
0000            754   ; Reset entry point and interrupt vectors
0000            755   ;--------------------------------------------------------
0000            756            CSEG at 0x0000
0000 020000     757            ljmp    _crt0
0093            758            CSEG at 0x0093
0093 020000     759            ljmp    _Timer5_ISR
0096            760   ;--------------------------------------------------------
0096            761   ; global & static initialisations
0096            762   ;--------------------------------------------------------
0000            763            rseg R_HOME
0000            764            rseg R_GSINIT
0000            765            rseg R_GSINIT
0000            766   ;--------------------------------------------------------
0000            767   ; data variables initialization
0000            768   ;--------------------------------------------------------
0000            769            rseg R_DINIT
0000            770            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            771   ;--------------------------------------------------------
0000            772   ; code
0000            773   ;--------------------------------------------------------
0000            774            rseg R_CSEG
0000            775   ;------------------------------------------------------------
0000            776   ;Allocation info for local variables in function '_c51_external_startup'
0000            777   ;------------------------------------------------------------
0000            778   ;------------------------------------------------------------
0000            779   ;        main.c:104: char _c51_external_startup (void)
0000            780   ;        -----------------------------------------
0000            781   ;         function _c51_external_startup
0000            782   ;        -----------------------------------------
0000            783   __c51_external_startup:
0000            784            using   0
0000            785   ;        main.c:107: SFRPAGE = 0x00;
0000 75A700     786            mov     _SFRPAGE,#0x00
0003            787   ;        main.c:108: WDTCN = 0xDE; //First key
0003 7597DE     788            mov     _WDTCN,#0xDE
0006            789   ;        main.c:109: WDTCN = 0xAD; //Second key
0006 7597AD     790            mov     _WDTCN,#0xAD
0009            791   ;        main.c:111: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     792            mov     _VDM0CN,#0x80
000C            793   ;        main.c:112: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     794            mov     _RSTSRC,#0x06
000F            795   ;        main.c:119: SFRPAGE = 0x10;
000F 75A710     796            mov     _SFRPAGE,#0x10
0012            797   ;        main.c:120: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     798            mov     _PFE0CN,#0x20
0015            799   ;        main.c:121: SFRPAGE = 0x00;
0015 75A700     800            mov     _SFRPAGE,#0x00
0018            801   ;        main.c:142: CLKSEL = 0x00;
0018 75A900     802            mov     _CLKSEL,#0x00
001B            803   ;        main.c:143: CLKSEL = 0x00;
001B 75A900     804            mov     _CLKSEL,#0x00
001E            805   ;        main.c:144: while ((CLKSEL & 0x80) == 0);
001E            806   L002001?:
001E E5A9       807            mov     a,_CLKSEL
0020 30E750     808            jnb     acc.7,L002001?
0023            809   ;        main.c:145: CLKSEL = 0x03;
0023 75A903     810            mov     _CLKSEL,#0x03
0026            811   ;        main.c:146: CLKSEL = 0x03;
0026 75A903     812            mov     _CLKSEL,#0x03
0029            813   ;        main.c:147: while ((CLKSEL & 0x80) == 0);
0029            814   L002004?:
0029 E5A9       815            mov     a,_CLKSEL
002B 30E7D0     816            jnb     acc.7,L002004?
002E            817   ;        main.c:153: P0MDOUT |= 0b_1100_0000;
002E 43A4C0     818            orl     _P0MDOUT,#0xC0
0031            819   ;        main.c:154: P1MDOUT |= 0b_0000_0110;
0031 43A506     820            orl     _P1MDOUT,#0x06
0034            821   ;        main.c:155: P2MDOUT |= 0b_0000_0001; // P2.0 in push-pull mode
0034 43A601     822            orl     _P2MDOUT,#0x01
0037            823   ;        main.c:156: XBR0     = 0b_0000_0011; // UART0E = 1 and SPI0E = 1               
0037 75E103     824            mov     _XBR0,#0x03
003A            825   ;        main.c:157: XBR1     = 0b_0000_0000;
003A 75E200     826            mov     _XBR1,#0x00
003D            827   ;        main.c:158: XBR2     = 0b_0100_0001; // Enable crossbar and uart 1
003D 75E341     828            mov     _XBR2,#0x41
0040            829   ;        main.c:159: P0SKIP       = 0b_0000_0111; 
0040 75D407     830            mov     _P0SKIP,#0x07
0043            831   ;        main.c:160: P1SKIP   = 0b_1111_1001;
0043 75D5F9     832            mov     _P1SKIP,#0xF9
0046            833   ;        main.c:165: SCON0 = 0x10;
0046 759810     834            mov     _SCON0,#0x10
0049            835   ;        main.c:166: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     836            mov     _TH1,#0xE6
004C            837   ;        main.c:167: TL1 = TH1;      // Init Timer1
004C 858D8B     838            mov     _TL1,_TH1
004F            839   ;        main.c:168: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     840            anl     _TMOD,#0x0F
0052            841   ;        main.c:169: TMOD |=  0x20;                       
0052 438920     842            orl     _TMOD,#0x20
0055            843   ;        main.c:170: TR1 = 1; // START Timer1
0055 D28E       844            setb    _TR1
0057            845   ;        main.c:171: TI = 1;  // Indicate TX0 ready
0057 D299       846            setb    _TI
0059            847   ;        main.c:172: P2_0=1; // 'set' pin to 1 is normal operation mode.
0059 D2A0       848            setb    _P2_0
005B            849   ;        main.c:175: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
005B 75A211     850            mov     _SPI0CKR,#0x11
005E            851   ;        main.c:176: SPI0CFG = 0b_1110_0000; // SPI mode 3
005E 75A1E0     852            mov     _SPI0CFG,#0xE0
0061            853   ;        main.c:177: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0061 75F801     854            mov     _SPI0CN0,#0x01
0064            855   ;        main.c:180: SFRPAGE=0x10;
0064 75A710     856            mov     _SFRPAGE,#0x10
0067            857   ;        main.c:181: TMR5CN0=0x00;
0067 75C000     858            mov     _TMR5CN0,#0x00
006A            859   ;        main.c:182: TMR5=0xffff;   // Set to reload immediately
006A 75D4FF     860            mov     _TMR5,#0xFF
006D 75D5FF     861            mov     (_TMR5 >> 8),#0xFF
0070            862   ;        main.c:183: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
0070 43F308     863            orl     _EIE2,#0x08
0073            864   ;        main.c:184: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0073 D2C2       865            setb    _TR5
0075            866   ;        main.c:186: EA=1;  // Enable global interrupts
0075 D2AF       867            setb    _EA
0077            868   ;        main.c:187: SFRPAGE=0x00;
0077 75A700     869            mov     _SFRPAGE,#0x00
007A            870   ;        main.c:189: return 0;
007A 758200     871            mov     dpl,#0x00
007D 22         872            ret
007E            873   ;------------------------------------------------------------
007E            874   ;Allocation info for local variables in function 'Timer3us'
007E            875   ;------------------------------------------------------------
007E            876   ;us                        Allocated to registers r2 
007E            877   ;i                         Allocated to registers r3 
007E            878   ;------------------------------------------------------------
007E            879   ;        main.c:193: void Timer3us(unsigned char us)
007E            880   ;        -----------------------------------------
007E            881   ;         function Timer3us
007E            882   ;        -----------------------------------------
007E            883   _Timer3us:
007E AA82       884            mov     r2,dpl
0080            885   ;        main.c:198: CKCON0|=0b_0100_0000;
0080 438E40     886            orl     _CKCON0,#0x40
0083            887   ;        main.c:200: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0083 7592B8     888            mov     _TMR3RL,#0xB8
0086 7593FF     889            mov     (_TMR3RL >> 8),#0xFF
0089            890   ;        main.c:201: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0089 859294     891            mov     _TMR3,_TMR3RL
008C 859395     892            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
008F            893   ;        main.c:203: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
008F 759104     894            mov     _TMR3CN0,#0x04
0092            895   ;        main.c:204: for (i = 0; i < us; i++)       // Count <us> overflows
0092 7B00       896            mov     r3,#0x00
0094            897   L003004?:
0094 C3         898            clr     c
0095 EB         899            mov     a,r3
0096 9A         900            subb    a,r2
0097 5000       901            jnc     L003007?
0099            902   ;        main.c:206: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0099            903   L003001?:
0099 E591       904            mov     a,_TMR3CN0
009B 30E7D0     905            jnb     acc.7,L003001?
009E            906   ;        main.c:207: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
009E 53917F     907            anl     _TMR3CN0,#0x7F
00A1            908   ;        main.c:204: for (i = 0; i < us; i++)       // Count <us> overflows
00A1 0B         909            inc     r3
00A2 8000       910            sjmp    L003004?
00A4            911   L003007?:
00A4            912   ;        main.c:209: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00A4 759100     913            mov     _TMR3CN0,#0x00
00A7 22         914            ret
00A8            915   ;------------------------------------------------------------
00A8            916   ;Allocation info for local variables in function 'waitms'
00A8            917   ;------------------------------------------------------------
00A8            918   ;ms                        Allocated to registers r2 r3 
00A8            919   ;j                         Allocated to registers r4 r5 
00A8            920   ;k                         Allocated to registers r6 
00A8            921   ;------------------------------------------------------------
00A8            922   ;        main.c:212: void waitms (unsigned int ms)
00A8            923   ;        -----------------------------------------
00A8            924   ;         function waitms
00A8            925   ;        -----------------------------------------
00A8            926   _waitms:
00A8 AA82       927            mov     r2,dpl
00AA AB83       928            mov     r3,dph
00AC            929   ;        main.c:216: for(j=0; j<ms; j++)
00AC 7C00       930            mov     r4,#0x00
00AE 7D00       931            mov     r5,#0x00
00B0            932   L004005?:
00B0 C3         933            clr     c
00B1 EC         934            mov     a,r4
00B2 9A         935            subb    a,r2
00B3 ED         936            mov     a,r5
00B4 9B         937            subb    a,r3
00B5 5000       938            jnc     L004009?
00B7            939   ;        main.c:217: for (k=0; k<4; k++) Timer3us(250);
00B7 7E00       940            mov     r6,#0x00
00B9            941   L004001?:
00B9 BE0410     942            cjne    r6,#0x04,L004018?
00BC            943   L004018?:
00BC 5000       944            jnc     L004007?
00BE 7582FA     945            mov     dpl,#0xFA
00C1 C002       946            push    ar2
00C3 C003       947            push    ar3
00C5 C004       948            push    ar4
00C7 C005       949            push    ar5
00C9 C006       950            push    ar6
00CB 120000     951            lcall   _Timer3us
00CE D006       952            pop     ar6
00D0 D005       953            pop     ar5
00D2 D004       954            pop     ar4
00D4 D003       955            pop     ar3
00D6 D002       956            pop     ar2
00D8 0E         957            inc     r6
00D9 8000       958            sjmp    L004001?
00DB            959   L004007?:
00DB            960   ;        main.c:216: for(j=0; j<ms; j++)
00DB 0C         961            inc     r4
00DC BC0050     962            cjne    r4,#0x00,L004005?
00DF 0D         963            inc     r5
00E0 8000       964            sjmp    L004005?
00E2            965   L004009?:
00E2 22         966            ret
00E3            967   ;------------------------------------------------------------
00E3            968   ;Allocation info for local variables in function 'SPI_transfer'
00E3            969   ;------------------------------------------------------------
00E3            970   ;tx_data                   Allocated to registers 
00E3            971   ;------------------------------------------------------------
00E3            972   ;        main.c:220: unsigned char SPI_transfer(unsigned char tx_data)
00E3            973   ;        -----------------------------------------
00E3            974   ;         function SPI_transfer
00E3            975   ;        -----------------------------------------
00E3            976   _SPI_transfer:
00E3 8582A3     977            mov     _SPI0DAT,dpl
00E6            978   ;        main.c:223: while (!SPIF);      // Wait for transfer to complete
00E6            979   L005001?:
00E6            980   ;        main.c:224: SPIF = 0;           // Clear SPI interrupt flag
00E6 10FFD0     981            jbc     _SPIF,L005008?
00E9 8000       982            sjmp    L005001?
00EB            983   L005008?:
00EB            984   ;        main.c:225: return SPI0DAT;     // Return received data
00EB 85A382     985            mov     dpl,_SPI0DAT
00EE 22         986            ret
00EF            987   ;------------------------------------------------------------
00EF            988   ;Allocation info for local variables in function 'SPI_read'
00EF            989   ;------------------------------------------------------------
00EF            990   ;reg_addr                  Allocated to registers r2 
00EF            991   ;value                     Allocated with name '_SPI_read_value_1_93'
00EF            992   ;------------------------------------------------------------
00EF            993   ;        main.c:228: unsigned char SPI_read(unsigned char reg_addr)
00EF            994   ;        -----------------------------------------
00EF            995   ;         function SPI_read
00EF            996   ;        -----------------------------------------
00EF            997   _SPI_read:
00EF AA82       998            mov     r2,dpl
00F1            999   ;        main.c:233: reg_addr = reg_addr | 0x80;
00F1 430280    1000            orl     ar2,#0x80
00F4           1001   ;        main.c:235: CS = 0;                // Select the device
00F4 C290      1002            clr     _P1_0
00F6           1003   ;        main.c:236: SPI_transfer(reg_addr);     // Send register address
00F6 8A82      1004            mov     dpl,r2
00F8 120000    1005            lcall   _SPI_transfer
00FB           1006   ;        main.c:237: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
00FB 758200    1007            mov     dpl,#0x00
00FE 120000    1008            lcall   _SPI_transfer
0101           1009   ;        main.c:238: CS = 1;                // Deselect the device
0101 D290      1010            setb    _P1_0
0103           1011   ;        main.c:240: return value;
0103 22        1012            ret
0104           1013   ;------------------------------------------------------------
0104           1014   ;Allocation info for local variables in function 'SPI_write'
0104           1015   ;------------------------------------------------------------
0104           1016   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0104           1017   ;reg_addr                  Allocated to registers r2 
0104           1018   ;------------------------------------------------------------
0104           1019   ;        main.c:243: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0104           1020   ;        -----------------------------------------
0104           1021   ;         function SPI_write
0104           1022   ;        -----------------------------------------
0104           1023   _SPI_write:
0104 AA82      1024            mov     r2,dpl
0106           1025   ;        main.c:246: reg_addr = reg_addr & 0x7F;
0106 53027F    1026            anl     ar2,#0x7F
0109           1027   ;        main.c:248: CS = 0;                // Select device
0109 C290      1028            clr     _P1_0
010B           1029   ;        main.c:249: SPI_transfer(reg_addr);     // Send register address
010B 8A82      1030            mov     dpl,r2
010D 120000    1031            lcall   _SPI_transfer
0110           1032   ;        main.c:250: SPI_transfer(reg_value);    // Send value
0110 859882    1033            mov     dpl,_SPI_write_PARM_2
0113 120000    1034            lcall   _SPI_transfer
0116           1035   ;        main.c:251: CS = 1;                // Deselect device
0116 D290      1036            setb    _P1_0
0118 22        1037            ret
0119           1038   ;------------------------------------------------------------
0119           1039   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
0119           1040   ;------------------------------------------------------------
0119           1041   ;i                         Allocated with name '_BMM150_Read_Trim_Registers_i_1_97'
0119           1042   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_97'
0119           1043   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_97'
0119           1044   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_97'
0119           1045   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97'
0119           1046   ;------------------------------------------------------------
0119           1047   ;        main.c:254: void BMM150_Read_Trim_Registers(void)
0119           1048   ;        -----------------------------------------
0119           1049   ;         function BMM150_Read_Trim_Registers
0119           1050   ;        -----------------------------------------
0119           1051   _BMM150_Read_Trim_Registers:
0119           1052   ;        main.c:258: xdata uint8_t trim_x1y1[2] = {0};
0119 90CD78    1053            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
011C           1054   ;        main.c:259: xdata uint8_t trim_xyz_data[4] = {0};
011C E4        1055            clr     a
011D F0        1056            movx    @dptr,a
011E 90CD79    1057            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
0121 F0        1058            movx    @dptr,a
0122 90CDD8    1059            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0125 F0        1060            movx    @dptr,a
0126 90CDD9    1061            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0001)
0129 F0        1062            movx    @dptr,a
012A 90CDDA    1063            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
012D           1064   ;        main.c:260: xdata uint8_t trim_xy1xy2[10] = {0};
012D E4        1065            clr     a
012E F0        1066            movx    @dptr,a
012F 90CDDB    1067            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0132 F0        1068            movx    @dptr,a
0133 90CE38    1069            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0136 F0        1070            movx    @dptr,a
0137 90CE39    1071            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0001)
013A F0        1072            movx    @dptr,a
013B 90CE3A    1073            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0002)
013E E4        1074            clr     a
013F F0        1075            movx    @dptr,a
0140 90CE3B    1076            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0003)
0143 F0        1077            movx    @dptr,a
0144 90CE3C    1078            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0147 F0        1079            movx    @dptr,a
0148 90CE3D    1080            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
014B F0        1081            movx    @dptr,a
014C 90CE3E    1082            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0006)
014F E4        1083            clr     a
0150 F0        1084            movx    @dptr,a
0151 90CE3F    1085            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0007)
0154 F0        1086            movx    @dptr,a
0155 90CE40    1087            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0158 F0        1088            movx    @dptr,a
0159 90CE41    1089            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
015C F0        1090            movx    @dptr,a
015D           1091   ;        main.c:263: for (i=0;i<2;i++){
015D 7A00      1092            mov     r2,#0x00
015F           1093   L008001?:
015F BA0250    1094            cjne    r2,#0x02,L008024?
0162           1095   L008024?:
0162 5000      1096            jnc     L008004?
0164           1097   ;        main.c:264: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
0164 EA        1098            mov     a,r2
0165 2478      1099            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0167 FB        1100            mov     r3,a
0168 E4        1101            clr     a
0169 34CD      1102            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 >> 8)
016B FC        1103            mov     r4,a
016C 745D      1104            mov     a,#0x5D
016E 2A        1105            add     a,r2
016F F582      1106            mov     dpl,a
0171 C002      1107            push    ar2
0173 C003      1108            push    ar3
0175 C004      1109            push    ar4
0177 120000    1110            lcall   _SPI_read
017A AD82      1111            mov     r5,dpl
017C D004      1112            pop     ar4
017E D003      1113            pop     ar3
0180 D002      1114            pop     ar2
0182 8B82      1115            mov     dpl,r3
0184 8C83      1116            mov     dph,r4
0186 ED        1117            mov     a,r5
0187 F0        1118            movx    @dptr,a
0188           1119   ;        main.c:263: for (i=0;i<2;i++){
0188 0A        1120            inc     r2
0189 8000      1121            sjmp    L008001?
018B           1122   L008004?:
018B           1123   ;        main.c:266: for (i=0;i<4;i++){
018B 7A00      1124            mov     r2,#0x00
018D           1125   L008005?:
018D BA0410    1126            cjne    r2,#0x04,L008026?
0190           1127   L008026?:
0190 5000      1128            jnc     L008008?
0192           1129   ;        main.c:267: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
0192 EA        1130            mov     a,r2
0193 24D8      1131            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0195 FB        1132            mov     r3,a
0196 E4        1133            clr     a
0197 34CD      1134            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 >> 8)
0199 FC        1135            mov     r4,a
019A 7462      1136            mov     a,#0x62
019C 2A        1137            add     a,r2
019D F582      1138            mov     dpl,a
019F C002      1139            push    ar2
01A1 C003      1140            push    ar3
01A3 C004      1141            push    ar4
01A5 120000    1142            lcall   _SPI_read
01A8 AD82      1143            mov     r5,dpl
01AA D004      1144            pop     ar4
01AC D003      1145            pop     ar3
01AE D002      1146            pop     ar2
01B0 8B82      1147            mov     dpl,r3
01B2 8C83      1148            mov     dph,r4
01B4 ED        1149            mov     a,r5
01B5 F0        1150            movx    @dptr,a
01B6           1151   ;        main.c:266: for (i=0;i<4;i++){
01B6 0A        1152            inc     r2
01B7 8000      1153            sjmp    L008005?
01B9           1154   L008008?:
01B9           1155   ;        main.c:269: for (i=0;i<10;i++){
01B9 7A00      1156            mov     r2,#0x00
01BB           1157   L008009?:
01BB BA0AD0    1158            cjne    r2,#0x0A,L008028?
01BE           1159   L008028?:
01BE 5000      1160            jnc     L008012?
01C0           1161   ;        main.c:270: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
01C0 EA        1162            mov     a,r2
01C1 2438      1163            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
01C3 FB        1164            mov     r3,a
01C4 E4        1165            clr     a
01C5 34CE      1166            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 >> 8)
01C7 FC        1167            mov     r4,a
01C8 7468      1168            mov     a,#0x68
01CA 2A        1169            add     a,r2
01CB F582      1170            mov     dpl,a
01CD C002      1171            push    ar2
01CF C003      1172            push    ar3
01D1 C004      1173            push    ar4
01D3 120000    1174            lcall   _SPI_read
01D6 AD82      1175            mov     r5,dpl
01D8 D004      1176            pop     ar4
01DA D003      1177            pop     ar3
01DC D002      1178            pop     ar2
01DE 8B82      1179            mov     dpl,r3
01E0 8C83      1180            mov     dph,r4
01E2 ED        1181            mov     a,r5
01E3 F0        1182            movx    @dptr,a
01E4           1183   ;        main.c:269: for (i=0;i<10;i++){
01E4 0A        1184            inc     r2
01E5 8000      1185            sjmp    L008009?
01E7           1186   L008012?:
01E7           1187   ;        main.c:273: dig_x1 = (int8_t) trim_x1y1[0]; 
01E7 90CD78    1188            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
01EA E0        1189            movx    a,@dptr
01EB 9056C8    1190            mov     dptr,#_dig_x1
01EE F0        1191            movx    @dptr,a
01EF           1192   ;        main.c:274: dig_y1 = (int8_t) trim_x1y1[1]; 
01EF 90CD79    1193            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
01F2 E0        1194            movx    a,@dptr
01F3 905648    1195            mov     dptr,#_dig_y1
01F6 F0        1196            movx    @dptr,a
01F7           1197   ;        main.c:275: dig_x2 = (int8_t) trim_xyz_data[2]; 
01F7 90CDDA    1198            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
01FA E0        1199            movx    a,@dptr
01FB 905688    1200            mov     dptr,#_dig_x2
01FE F0        1201            movx    @dptr,a
01FF           1202   ;        main.c:276: dig_y2 = (int8_t) trim_xyz_data[3]; 
01FF 90CDDB    1203            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0202 E0        1204            movx    a,@dptr
0203 905608    1205            mov     dptr,#_dig_y2
0206 F0        1206            movx    @dptr,a
0207           1207   ;        main.c:290: dig_xy1 = trim_xy1xy2[9];
0207 90CE41    1208            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
020A E0        1209            movx    a,@dptr
020B 9054C8    1210            mov     dptr,#_dig_xy1
020E F0        1211            movx    @dptr,a
020F           1212   ;        main.c:291: dig_xy2 = (int8_t)trim_xy1xy2[8];
020F 90CE40    1213            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0212 E0        1214            movx    a,@dptr
0213 905488    1215            mov     dptr,#_dig_xy2
0216 F0        1216            movx    @dptr,a
0217           1217   ;        main.c:293: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
0217 90CE3D    1218            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
021A E0        1219            movx    a,@dptr
021B FA        1220            mov     r2,a
021C 53027F    1221            anl     ar2,#0x7F
021F 8A03      1222            mov     ar3,r2
0221 7A00      1223            mov     r2,#0x00
0223           1224   ;        main.c:294: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
0223 90CE3C    1225            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0226 E0        1226            movx    a,@dptr
0227 FC        1227            mov     r4,a
0228 7D00      1228            mov     r5,#0x00
022A 905448    1229            mov     dptr,#_dig_xyz1
022D EC        1230            mov     a,r4
022E 4A        1231            orl     a,r2
022F F0        1232            movx    @dptr,a
0230 ED        1233            mov     a,r5
0231 4B        1234            orl     a,r3
0232 A3        1235            inc     dptr
0233 F0        1236            movx    @dptr,a
0234 22        1237            ret
0235           1238   ;------------------------------------------------------------
0235           1239   ;Allocation info for local variables in function 'BMM150_Init'
0235           1240   ;------------------------------------------------------------
0235           1241   ;chip_id                   Allocated with name '_BMM150_Init_chip_id_1_102'
0235           1242   ;------------------------------------------------------------
0235           1243   ;        main.c:298: void BMM150_Init(void)
0235           1244   ;        -----------------------------------------
0235           1245   ;         function BMM150_Init
0235           1246   ;        -----------------------------------------
0235           1247   _BMM150_Init:
0235           1248   ;        main.c:303: CS = 1; // Deselect BMM150
0235 D290      1249            setb    _P1_0
0237           1250   ;        main.c:306: waitms(10);
0237 90000A    1251            mov     dptr,#0x000A
023A 120000    1252            lcall   _waitms
023D           1253   ;        main.c:309: SPI_write(BMM150_POWER_CONTROL, 0x82);
023D 759882    1254            mov     _SPI_write_PARM_2,#0x82
0240 75824B    1255            mov     dpl,#0x4B
0243 120000    1256            lcall   _SPI_write
0246           1257   ;        main.c:310: waitms(10);  // Wait for reset to complete
0246 90000A    1258            mov     dptr,#0x000A
0249 120000    1259            lcall   _waitms
024C           1260   ;        main.c:313: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
024C 759801    1261            mov     _SPI_write_PARM_2,#0x01
024F 75824B    1262            mov     dpl,#0x4B
0252 120000    1263            lcall   _SPI_write
0255           1264   ;        main.c:314: waitms(5);
0255 900005    1265            mov     dptr,#0x0005
0258 120000    1266            lcall   _waitms
025B           1267   ;        main.c:317: chip_id = SPI_read(BMM150_CHIP_ID);
025B 758240    1268            mov     dpl,#0x40
025E 120000    1269            lcall   _SPI_read
0261 AA82      1270            mov     r2,dpl
0263           1271   ;        main.c:318: if (chip_id != BMM150_CHIP_ID_VALUE)
0263 BA3250    1272            cjne    r2,#0x32,L009011?
0266 8000      1273            sjmp    L009005?
0268           1274   L009011?:
0268           1275   ;        main.c:320: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
0268 8A03      1276            mov     ar3,r2
026A 7C00      1277            mov     r4,#0x00
026C C003      1278            push    ar3
026E C004      1279            push    ar4
0270 74D0      1280            mov     a,#__str_0
0272 C0E0      1281            push    acc
0274 74DB      1282            mov     a,#(__str_0 >> 8)
0276 C0E0      1283            push    acc
0278 7480      1284            mov     a,#0x80
027A C0E0      1285            push    acc
027C 120000    1286            lcall   _printf
027F E581      1287            mov     a,sp
0281 24FB      1288            add     a,#0xfb
0283 F581      1289            mov     sp,a
0285           1290   ;        main.c:321: while (1) {
0285           1291   L009002?:
0285           1292   ;        main.c:322: printf("Press restart to check again!\r");
0285 74D0      1293            mov     a,#__str_1
0287 C0E0      1294            push    acc
0289 74DC      1295            mov     a,#(__str_1 >> 8)
028B C0E0      1296            push    acc
028D 7480      1297            mov     a,#0x80
028F C0E0      1298            push    acc
0291 120000    1299            lcall   _printf
0294 1581      1300            dec     sp
0296 1581      1301            dec     sp
0298 1581      1302            dec     sp
029A 8000      1303            sjmp    L009002?
029C           1304   L009005?:
029C           1305   ;        main.c:326: printf("DONE! Chip ID = 0x%02X\r\n", chip_id);
029C 7B00      1306            mov     r3,#0x00
029E C002      1307            push    ar2
02A0 C003      1308            push    ar3
02A2 C002      1309            push    ar2
02A4 C003      1310            push    ar3
02A6 7410      1311            mov     a,#__str_2
02A8 C0E0      1312            push    acc
02AA 74DD      1313            mov     a,#(__str_2 >> 8)
02AC C0E0      1314            push    acc
02AE 7480      1315            mov     a,#0x80
02B0 C0E0      1316            push    acc
02B2 120000    1317            lcall   _printf
02B5 E581      1318            mov     a,sp
02B7 24FB      1319            add     a,#0xfb
02B9 F581      1320            mov     sp,a
02BB           1321   ;        main.c:330: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
02BB 759800    1322            mov     _SPI_write_PARM_2,#0x00
02BE 75824C    1323            mov     dpl,#0x4C
02C1 120000    1324            lcall   _SPI_write
02C4           1325   ;        main.c:333: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
02C4 75987F    1326            mov     _SPI_write_PARM_2,#0x7F
02C7 758251    1327            mov     dpl,#0x51
02CA 120000    1328            lcall   _SPI_write
02CD           1329   ;        main.c:334: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
02CD 75980E    1330            mov     _SPI_write_PARM_2,#0x0E
02D0 758252    1331            mov     dpl,#0x52
02D3 120000    1332            lcall   _SPI_write
02D6           1333   ;        main.c:336: BMM150_Read_Trim_Registers();
02D6 120000    1334            lcall   _BMM150_Read_Trim_Registers
02D9           1335   ;        main.c:338: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
02D9 7450      1336            mov     a,#__str_3
02DB C0E0      1337            push    acc
02DD 74DD      1338            mov     a,#(__str_3 >> 8)
02DF C0E0      1339            push    acc
02E1 7480      1340            mov     a,#0x80
02E3 C0E0      1341            push    acc
02E5 120000    1342            lcall   _printf
02E8 E581      1343            mov     a,sp
02EA 24FB      1344            add     a,#0xfb
02EC F581      1345            mov     sp,a
02EE           1346   ;        main.c:339: return; 
02EE 22        1347            ret
02EF           1348   ;------------------------------------------------------------
02EF           1349   ;Allocation info for local variables in function 'BMM150_compensate_x'
02EF           1350   ;------------------------------------------------------------
02EF           1351   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
02EF           1352   ;mag_data_x                Allocated to registers r2 r3 r4 
02EF           1353   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
02EF           1354   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_107'
02EF           1355   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_107'
02EF           1356   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_107'
02EF           1357   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_107'
02EF           1358   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_107'
02EF           1359   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_107'
02EF           1360   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_107'
02EF           1361   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_107'
02EF           1362   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_107'
02EF           1363   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_107'
02EF           1364   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_107'
02EF           1365   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_107'
02EF           1366   ;------------------------------------------------------------
02EF           1367   ;        main.c:342: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
02EF           1368   ;        -----------------------------------------
02EF           1369   ;         function BMM150_compensate_x
02EF           1370   ;        -----------------------------------------
02EF           1371   _BMM150_compensate_x:
02EF           1372   ;        main.c:360: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
02EF ACF0      1373            mov     r4,b
02F1 120000    1374            lcall   __gptrget
02F4 FA        1375            mov     r2,a
02F5 A3        1376            inc     dptr
02F6 120000    1377            lcall   __gptrget
02F9 FB        1378            mov     r3,a
02FA BA0010    1379            cjne    r2,#0x00,L010019?
02FD BBF010    1380            cjne    r3,#0xF0,L010019?
0300 020000    1381            ljmp    L010011?
0303           1382   L010019?:
0303           1383   ;        main.c:361: if (*data_rhall != 0)
0303 AC48      1384            mov     r4,_BMM150_compensate_x_PARM_2
0305 AD49      1385            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
0307 AE4A      1386            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
0309 8C82      1387            mov     dpl,r4
030B 8D83      1388            mov     dph,r5
030D 8EF0      1389            mov     b,r6
030F 120000    1390            lcall   __gptrget
0312 FC        1391            mov     r4,a
0313 A3        1392            inc     dptr
0314 120000    1393            lcall   __gptrget
0317 FD        1394            mov     r5,a
0318 4C        1395            orl     a,r4
0319 6000      1396            jz      L010005?
031B           1397   ;        main.c:364: process_comp_x0 = *data_rhall;
031B 90CEF8    1398            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
031E EC        1399            mov     a,r4
031F F0        1400            movx    @dptr,a
0320 A3        1401            inc     dptr
0321 ED        1402            mov     a,r5
0322 F0        1403            movx    @dptr,a
0323 8000      1404            sjmp    L010006?
0325           1405   L010005?:
0325           1406   ;        main.c:366: else if (dig_xyz1 != 0)
0325 905448    1407            mov     dptr,#_dig_xyz1
0328 E0        1408            movx    a,@dptr
0329 FC        1409            mov     r4,a
032A A3        1410            inc     dptr
032B E0        1411            movx    a,@dptr
032C FD        1412            mov     r5,a
032D 4C        1413            orl     a,r4
032E 6000      1414            jz      L010002?
0330           1415   ;        main.c:368: process_comp_x0 = dig_xyz1;
0330 90CEF8    1416            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
0333 EC        1417            mov     a,r4
0334 F0        1418            movx    @dptr,a
0335 A3        1419            inc     dptr
0336 ED        1420            mov     a,r5
0337 F0        1421            movx    @dptr,a
0338 8000      1422            sjmp    L010006?
033A           1423   L010002?:
033A           1424   ;        main.c:372: process_comp_x0 = 0;
033A 90CEF8    1425            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
033D E4        1426            clr     a
033E F0        1427            movx    @dptr,a
033F A3        1428            inc     dptr
0340 F0        1429            movx    @dptr,a
0341           1430   L010006?:
0341           1431   ;        main.c:374: if (process_comp_x0 != 0)
0341 90CEF8    1432            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
0344 E0        1433            movx    a,@dptr
0345 FC        1434            mov     r4,a
0346 A3        1435            inc     dptr
0347 E0        1436            movx    a,@dptr
0348 FD        1437            mov     r5,a
0349 4C        1438            orl     a,r4
034A 7000      1439            jnz     L010022?
034C 020000    1440            ljmp    L010008?
034F           1441   L010022?:
034F           1442   ;        main.c:377: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
034F 905448    1443            mov     dptr,#_dig_xyz1
0352 E0        1444            movx    a,@dptr
0353 FE        1445            mov     r6,a
0354 A3        1446            inc     dptr
0355 E0        1447            movx    a,@dptr
0356 FF        1448            mov     r7,a
0357 E4        1449            clr     a
0358 F8        1450            mov     r0,a
0359 EF        1451            mov     a,r7
035A C8        1452            xch     a,r0
035B 5403      1453            anl     a,#0x03
035D A2E0      1454            mov     c,acc.0
035F C8        1455            xch     a,r0
0360 13        1456            rrc     a
0361 C8        1457            xch     a,r0
0362 13        1458            rrc     a
0363 A2E0      1459            mov     c,acc.0
0365 C8        1460            xch     a,r0
0366 13        1461            rrc     a
0367 C8        1462            xch     a,r0
0368 13        1463            rrc     a
0369 C8        1464            xch     a,r0
036A F9        1465            mov     r1,a
036B EE        1466            mov     a,r6
036C 03        1467            rr      a
036D 03        1468            rr      a
036E 54C0      1469            anl     a,#0xc0
0370 FF        1470            mov     r7,a
0371 EE        1471            mov     a,r6
0372 03        1472            rr      a
0373 03        1473            rr      a
0374 543F      1474            anl     a,#0x3f
0376 48        1475            orl     a,r0
0377 F8        1476            mov     r0,a
0378 7E00      1477            mov     r6,#0x00
037A           1478   ;        main.c:378: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
037A 8C00      1479            mov     __divslong_PARM_2,r4
037C 8D01      1480            mov     (__divslong_PARM_2 + 1),r5
037E 750200    1481            mov     (__divslong_PARM_2 + 2),#0x00
0381 750300    1482            mov     (__divslong_PARM_2 + 3),#0x00
0384 8E82      1483            mov     dpl,r6
0386 8F83      1484            mov     dph,r7
0388 88F0      1485            mov     b,r0
038A E9        1486            mov     a,r1
038B C002      1487            push    ar2
038D C003      1488            push    ar3
038F 120000    1489            lcall   __divslong
0392 AC82      1490            mov     r4,dpl
0394 E583      1491            mov     a,dph
0396 24C0      1492            add     a,#0xc0
0398 FD        1493            mov     r5,a
0399           1494   ;        main.c:380: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
0399 8C06      1495            mov     ar6,r4
039B 8D07      1496            mov     ar7,r5
039D 8EA8      1497            mov     _BMM150_compensate_x_sloc0_1_0,r6
039F EF        1498            mov     a,r7
03A0 F5A9      1499            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
03A2 33        1500            rlc     a
03A3 95E0      1501            subb    a,acc
03A5 F5AA      1502            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
03A7 F5AB      1503            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03A9 8C06      1504            mov     ar6,r4
03AB 8D07      1505            mov     ar7,r5
03AD 8E00      1506            mov     __mullong_PARM_2,r6
03AF EF        1507            mov     a,r7
03B0 F501      1508            mov     (__mullong_PARM_2 + 1),a
03B2 33        1509            rlc     a
03B3 95E0      1510            subb    a,acc
03B5 F502      1511            mov     (__mullong_PARM_2 + 2),a
03B7 F503      1512            mov     (__mullong_PARM_2 + 3),a
03B9           1513   ;        main.c:381: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
03B9 85A882    1514            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03BC 85A983    1515            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03BF 85AAF0    1516            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03C2 E5AB      1517            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03C4 C004      1518            push    ar4
03C6 C005      1519            push    ar5
03C8 120000    1520            lcall   __mullong
03CB 8582A8    1521            mov     _BMM150_compensate_x_sloc0_1_0,dpl
03CE 8583A9    1522            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
03D1 85F0AA    1523            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
03D4 F5AB      1524            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03D6 905488    1525            mov     dptr,#_dig_xy2
03D9 E0        1526            movx    a,@dptr
03DA FE        1527            mov     r6,a
03DB 33        1528            rlc     a
03DC 95E0      1529            subb    a,acc
03DE FF        1530            mov     r7,a
03DF F8        1531            mov     r0,a
03E0 F9        1532            mov     r1,a
03E1 750080    1533            mov     __divslong_PARM_2,#0x80
03E4 E4        1534            clr     a
03E5 F501      1535            mov     (__divslong_PARM_2 + 1),a
03E7 F502      1536            mov     (__divslong_PARM_2 + 2),a
03E9 F503      1537            mov     (__divslong_PARM_2 + 3),a
03EB 85A882    1538            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03EE 85A983    1539            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03F1 85AAF0    1540            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03F4 E5AB      1541            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03F6 C006      1542            push    ar6
03F8 C007      1543            push    ar7
03FA C000      1544            push    ar0
03FC C001      1545            push    ar1
03FE 120000    1546            lcall   __divslong
0401 858200    1547            mov     __mullong_PARM_2,dpl
0404 858301    1548            mov     (__mullong_PARM_2 + 1),dph
0407 85F002    1549            mov     (__mullong_PARM_2 + 2),b
040A F503      1550            mov     (__mullong_PARM_2 + 3),a
040C D001      1551            pop     ar1
040E D000      1552            pop     ar0
0410 D007      1553            pop     ar7
0412 D006      1554            pop     ar6
0414           1555   ;        main.c:382: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
0414 8E82      1556            mov     dpl,r6
0416 8F83      1557            mov     dph,r7
0418 88F0      1558            mov     b,r0
041A E9        1559            mov     a,r1
041B 120000    1560            lcall   __mullong
041E 8582A8    1561            mov     _BMM150_compensate_x_sloc0_1_0,dpl
0421 8583A9    1562            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
0424 85F0AA    1563            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
0427 F5AB      1564            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
0429 D005      1565            pop     ar5
042B D004      1566            pop     ar4
042D 9054C8    1567            mov     dptr,#_dig_xy1
0430 E0        1568            movx    a,@dptr
0431 FE        1569            mov     r6,a
0432 E4        1570            clr     a
0433 5401      1571            anl     a,#0x01
0435 A2E0      1572            mov     c,acc.0
0437 CE        1573            xch     a,r6
0438 13        1574            rrc     a
0439 CE        1575            xch     a,r6
043A 13        1576            rrc     a
043B CE        1577            xch     a,r6
043C 8E00      1578            mov     __mullong_PARM_2,r6
043E F501      1579            mov     (__mullong_PARM_2 + 1),a
0440 33        1580            rlc     a
0441 95E0      1581            subb    a,acc
0443 F502      1582            mov     (__mullong_PARM_2 + 2),a
0445 F503      1583            mov     (__mullong_PARM_2 + 3),a
0447           1584   ;        main.c:383: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
0447 ED        1585            mov     a,r5
0448 33        1586            rlc     a
0449 95E0      1587            subb    a,acc
044B FE        1588            mov     r6,a
044C           1589   ;        main.c:384: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
044C 8C82      1590            mov     dpl,r4
044E 8D83      1591            mov     dph,r5
0450 8EF0      1592            mov     b,r6
0452 120000    1593            lcall   __mullong
0455 AC82      1594            mov     r4,dpl
0457 AD83      1595            mov     r5,dph
0459 AEF0      1596            mov     r6,b
045B FF        1597            mov     r7,a
045C EC        1598            mov     a,r4
045D 25A8      1599            add     a,_BMM150_compensate_x_sloc0_1_0
045F FC        1600            mov     r4,a
0460 ED        1601            mov     a,r5
0461 35A9      1602            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
0463 FD        1603            mov     r5,a
0464 EE        1604            mov     a,r6
0465 35AA      1605            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
0467 FE        1606            mov     r6,a
0468 EF        1607            mov     a,r7
0469 35AB      1608            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
046B FF        1609            mov     r7,a
046C 750000    1610            mov     __divslong_PARM_2,#0x00
046F 750102    1611            mov     (__divslong_PARM_2 + 1),#0x02
0472 750200    1612            mov     (__divslong_PARM_2 + 2),#0x00
0475 750300    1613            mov     (__divslong_PARM_2 + 3),#0x00
0478 8C82      1614            mov     dpl,r4
047A 8D83      1615            mov     dph,r5
047C 8EF0      1616            mov     b,r6
047E EF        1617            mov     a,r7
047F 120000    1618            lcall   __divslong
0482 AC82      1619            mov     r4,dpl
0484 AD83      1620            mov     r5,dph
0486 AEF0      1621            mov     r6,b
0488 FF        1622            mov     r7,a
0489 7410      1623            mov     a,#0x10
048B 2E        1624            add     a,r6
048C FE        1625            mov     r6,a
048D E4        1626            clr     a
048E 3F        1627            addc    a,r7
048F FF        1628            mov     r7,a
0490           1629   ;        main.c:385: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
0490 905688    1630            mov     dptr,#_dig_x2
0493 E0        1631            movx    a,@dptr
0494 F8        1632            mov     r0,a
0495 33        1633            rlc     a
0496 95E0      1634            subb    a,acc
0498 F9        1635            mov     r1,a
0499 74A0      1636            mov     a,#0xA0
049B 28        1637            add     a,r0
049C F8        1638            mov     r0,a
049D E4        1639            clr     a
049E 39        1640            addc    a,r1
049F 8800      1641            mov     __mullong_PARM_2,r0
04A1 F501      1642            mov     (__mullong_PARM_2 + 1),a
04A3 33        1643            rlc     a
04A4 95E0      1644            subb    a,acc
04A6 F502      1645            mov     (__mullong_PARM_2 + 2),a
04A8 F503      1646            mov     (__mullong_PARM_2 + 3),a
04AA           1647   ;        main.c:386: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
04AA 8C82      1648            mov     dpl,r4
04AC 8D83      1649            mov     dph,r5
04AE 8EF0      1650            mov     b,r6
04B0 EF        1651            mov     a,r7
04B1 120000    1652            lcall   __mullong
04B4           1653   ;        main.c:387: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
04B4 750000    1654            mov     __divslong_PARM_2,#0x00
04B7 750110    1655            mov     (__divslong_PARM_2 + 1),#0x10
04BA 750200    1656            mov     (__divslong_PARM_2 + 2),#0x00
04BD 750300    1657            mov     (__divslong_PARM_2 + 3),#0x00
04C0 120000    1658            lcall   __divslong
04C3 858200    1659            mov     __mullong_PARM_2,dpl
04C6 858301    1660            mov     (__mullong_PARM_2 + 1),dph
04C9 85F002    1661            mov     (__mullong_PARM_2 + 2),b
04CC F503      1662            mov     (__mullong_PARM_2 + 3),a
04CE D003      1663            pop     ar3
04D0 D002      1664            pop     ar2
04D2 EB        1665            mov     a,r3
04D3 33        1666            rlc     a
04D4 95E0      1667            subb    a,acc
04D6 FC        1668            mov     r4,a
04D7           1669   ;        main.c:388: retval = ((int16_t)(process_comp_x10 / 8192));
04D7 8A82      1670            mov     dpl,r2
04D9 8B83      1671            mov     dph,r3
04DB 8CF0      1672            mov     b,r4
04DD 120000    1673            lcall   __mullong
04E0 750000    1674            mov     __divslong_PARM_2,#0x00
04E3 750120    1675            mov     (__divslong_PARM_2 + 1),#0x20
04E6 750200    1676            mov     (__divslong_PARM_2 + 2),#0x00
04E9 750300    1677            mov     (__divslong_PARM_2 + 3),#0x00
04EC 120000    1678            lcall   __divslong
04EF AA82      1679            mov     r2,dpl
04F1 AB83      1680            mov     r3,dph
04F3           1681   ;        main.c:389: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
04F3 9056C8    1682            mov     dptr,#_dig_x1
04F6 E0        1683            movx    a,@dptr
04F7 FC        1684            mov     r4,a
04F8 33        1685            rlc     a
04F9 95E0      1686            subb    a,acc
04FB C4        1687            swap    a
04FC 03        1688            rr      a
04FD 54F8      1689            anl     a,#0xf8
04FF CC        1690            xch     a,r4
0500 C4        1691            swap    a
0501 03        1692            rr      a
0502 CC        1693            xch     a,r4
0503 6C        1694            xrl     a,r4
0504 CC        1695            xch     a,r4
0505 54F8      1696            anl     a,#0xf8
0507 CC        1697            xch     a,r4
0508 6C        1698            xrl     a,r4
0509 FD        1699            mov     r5,a
050A EC        1700            mov     a,r4
050B 2A        1701            add     a,r2
050C F582      1702            mov     dpl,a
050E ED        1703            mov     a,r5
050F 3B        1704            addc    a,r3
0510 F583      1705            mov     dph,a
0512 750010    1706            mov     __divsint_PARM_2,#0x10
0515 E4        1707            clr     a
0516 F501      1708            mov     (__divsint_PARM_2 + 1),a
0518 120000    1709            lcall   __divsint
051B E582      1710            mov     a,dpl
051D 8583F0    1711            mov     b,dph
0520 90CE98    1712            mov     dptr,#_BMM150_compensate_x_retval_1_107
0523 F0        1713            movx    @dptr,a
0524 A3        1714            inc     dptr
0525 E5F0      1715            mov     a,b
0527 F0        1716            movx    @dptr,a
0528 8000      1717            sjmp    L010012?
052A           1718   L010008?:
052A           1719   ;        main.c:392: retval = BMM150_OVERFLOW_OUTPUT; 
052A 90CE98    1720            mov     dptr,#_BMM150_compensate_x_retval_1_107
052D E4        1721            clr     a
052E F0        1722            movx    @dptr,a
052F A3        1723            inc     dptr
0530 7480      1724            mov     a,#0x80
0532 F0        1725            movx    @dptr,a
0533 8000      1726            sjmp    L010012?
0535           1727   L010011?:
0535           1728   ;        main.c:396: retval = BMM150_OVERFLOW_OUTPUT; 
0535 90CE98    1729            mov     dptr,#_BMM150_compensate_x_retval_1_107
0538 E4        1730            clr     a
0539 F0        1731            movx    @dptr,a
053A A3        1732            inc     dptr
053B 7480      1733            mov     a,#0x80
053D F0        1734            movx    @dptr,a
053E           1735   L010012?:
053E           1736   ;        main.c:398: return retval; 
053E 90CE98    1737            mov     dptr,#_BMM150_compensate_x_retval_1_107
0541 E0        1738            movx    a,@dptr
0542 FA        1739            mov     r2,a
0543 A3        1740            inc     dptr
0544 E0        1741            movx    a,@dptr
0545 8A82      1742            mov     dpl,r2
0547 F583      1743            mov     dph,a
0549 22        1744            ret
054A           1745   ;------------------------------------------------------------
054A           1746   ;Allocation info for local variables in function 'BMM150_compensate_y'
054A           1747   ;------------------------------------------------------------
054A           1748   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
054A           1749   ;mag_data_y                Allocated to registers r2 r3 r4 
054A           1750   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
054A           1751   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_116'
054A           1752   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_116'
054A           1753   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_116'
054A           1754   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_116'
054A           1755   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_116'
054A           1756   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_116'
054A           1757   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_116'
054A           1758   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_116'
054A           1759   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_116'
054A           1760   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_116'
054A           1761   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_116'
054A           1762   ;------------------------------------------------------------
054A           1763   ;        main.c:401: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
054A           1764   ;        -----------------------------------------
054A           1765   ;         function BMM150_compensate_y
054A           1766   ;        -----------------------------------------
054A           1767   _BMM150_compensate_y:
054A           1768   ;        main.c:419: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
054A ACF0      1769            mov     r4,b
054C 120000    1770            lcall   __gptrget
054F FA        1771            mov     r2,a
0550 A3        1772            inc     dptr
0551 120000    1773            lcall   __gptrget
0554 FB        1774            mov     r3,a
0555 BA00C0    1775            cjne    r2,#0x00,L011019?
0558 BBF0C0    1776            cjne    r3,#0xF0,L011019?
055B 020000    1777            ljmp    L011011?
055E           1778   L011019?:
055E           1779   ;        main.c:421: if (*data_rhall != 0)
055E ACF8      1780            mov     r4,_BMM150_compensate_y_PARM_2
0560 ADF9      1781            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
0562 AEFA      1782            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
0564 8C82      1783            mov     dpl,r4
0566 8D83      1784            mov     dph,r5
0568 8EF0      1785            mov     b,r6
056A 120000    1786            lcall   __gptrget
056D FC        1787            mov     r4,a
056E A3        1788            inc     dptr
056F 120000    1789            lcall   __gptrget
0572 FD        1790            mov     r5,a
0573 4C        1791            orl     a,r4
0574 6000      1792            jz      L011005?
0576           1793   ;        main.c:424: process_comp_y0 = *data_rhall;
0576 90CFB8    1794            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
0579 EC        1795            mov     a,r4
057A F0        1796            movx    @dptr,a
057B A3        1797            inc     dptr
057C ED        1798            mov     a,r5
057D F0        1799            movx    @dptr,a
057E 8000      1800            sjmp    L011006?
0580           1801   L011005?:
0580           1802   ;        main.c:426: else if (dig_xyz1 != 0)
0580 905448    1803            mov     dptr,#_dig_xyz1
0583 E0        1804            movx    a,@dptr
0584 FC        1805            mov     r4,a
0585 A3        1806            inc     dptr
0586 E0        1807            movx    a,@dptr
0587 FD        1808            mov     r5,a
0588 4C        1809            orl     a,r4
0589 6000      1810            jz      L011002?
058B           1811   ;        main.c:428: process_comp_y0 = dig_xyz1;
058B 90CFB8    1812            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
058E EC        1813            mov     a,r4
058F F0        1814            movx    @dptr,a
0590 A3        1815            inc     dptr
0591 ED        1816            mov     a,r5
0592 F0        1817            movx    @dptr,a
0593 8000      1818            sjmp    L011006?
0595           1819   L011002?:
0595           1820   ;        main.c:432: process_comp_y0 = 0;
0595 90CFB8    1821            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
0598 E4        1822            clr     a
0599 F0        1823            movx    @dptr,a
059A A3        1824            inc     dptr
059B F0        1825            movx    @dptr,a
059C           1826   L011006?:
059C           1827   ;        main.c:435: if (process_comp_y0 != 0)
059C 90CFB8    1828            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
059F E0        1829            movx    a,@dptr
05A0 FC        1830            mov     r4,a
05A1 A3        1831            inc     dptr
05A2 E0        1832            movx    a,@dptr
05A3 FD        1833            mov     r5,a
05A4 4C        1834            orl     a,r4
05A5 7000      1835            jnz     L011022?
05A7 020000    1836            ljmp    L011008?
05AA           1837   L011022?:
05AA           1838   ;        main.c:438: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
05AA 905448    1839            mov     dptr,#_dig_xyz1
05AD E0        1840            movx    a,@dptr
05AE FE        1841            mov     r6,a
05AF A3        1842            inc     dptr
05B0 E0        1843            movx    a,@dptr
05B1 FF        1844            mov     r7,a
05B2 E4        1845            clr     a
05B3 F8        1846            mov     r0,a
05B4 EF        1847            mov     a,r7
05B5 C8        1848            xch     a,r0
05B6 5403      1849            anl     a,#0x03
05B8 A2E0      1850            mov     c,acc.0
05BA C8        1851            xch     a,r0
05BB 13        1852            rrc     a
05BC C8        1853            xch     a,r0
05BD 13        1854            rrc     a
05BE A2E0      1855            mov     c,acc.0
05C0 C8        1856            xch     a,r0
05C1 13        1857            rrc     a
05C2 C8        1858            xch     a,r0
05C3 13        1859            rrc     a
05C4 C8        1860            xch     a,r0
05C5 F9        1861            mov     r1,a
05C6 EE        1862            mov     a,r6
05C7 03        1863            rr      a
05C8 03        1864            rr      a
05C9 54C0      1865            anl     a,#0xc0
05CB FF        1866            mov     r7,a
05CC EE        1867            mov     a,r6
05CD 03        1868            rr      a
05CE 03        1869            rr      a
05CF 543F      1870            anl     a,#0x3f
05D1 48        1871            orl     a,r0
05D2 F8        1872            mov     r0,a
05D3 7E00      1873            mov     r6,#0x00
05D5 8C00      1874            mov     __divslong_PARM_2,r4
05D7 8D01      1875            mov     (__divslong_PARM_2 + 1),r5
05D9 750200    1876            mov     (__divslong_PARM_2 + 2),#0x00
05DC 750300    1877            mov     (__divslong_PARM_2 + 3),#0x00
05DF           1878   ;        main.c:439: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
05DF 8E82      1879            mov     dpl,r6
05E1 8F83      1880            mov     dph,r7
05E3 88F0      1881            mov     b,r0
05E5 E9        1882            mov     a,r1
05E6 C002      1883            push    ar2
05E8 C003      1884            push    ar3
05EA 120000    1885            lcall   __divslong
05ED AC82      1886            mov     r4,dpl
05EF E583      1887            mov     a,dph
05F1 24C0      1888            add     a,#0xc0
05F3 FD        1889            mov     r5,a
05F4           1890   ;        main.c:441: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
05F4 8C06      1891            mov     ar6,r4
05F6 8D07      1892            mov     ar7,r5
05F8 8EF8      1893            mov     _BMM150_compensate_y_sloc0_1_0,r6
05FA EF        1894            mov     a,r7
05FB F5F9      1895            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
05FD 33        1896            rlc     a
05FE 95E0      1897            subb    a,acc
0600 F5FA      1898            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
0602 F5FB      1899            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0604 8C06      1900            mov     ar6,r4
0606 8D07      1901            mov     ar7,r5
0608 8E00      1902            mov     __mullong_PARM_2,r6
060A EF        1903            mov     a,r7
060B F501      1904            mov     (__mullong_PARM_2 + 1),a
060D 33        1905            rlc     a
060E 95E0      1906            subb    a,acc
0610 F502      1907            mov     (__mullong_PARM_2 + 2),a
0612 F503      1908            mov     (__mullong_PARM_2 + 3),a
0614           1909   ;        main.c:442: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
0614 85F882    1910            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0617 85F983    1911            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
061A 85FAF0    1912            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
061D E5FB      1913            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
061F C004      1914            push    ar4
0621 C005      1915            push    ar5
0623 120000    1916            lcall   __mullong
0626 8582F8    1917            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0629 8583F9    1918            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
062C 85F0FA    1919            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
062F F5FB      1920            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0631 905488    1921            mov     dptr,#_dig_xy2
0634 E0        1922            movx    a,@dptr
0635 FE        1923            mov     r6,a
0636 33        1924            rlc     a
0637 95E0      1925            subb    a,acc
0639 FF        1926            mov     r7,a
063A F8        1927            mov     r0,a
063B F9        1928            mov     r1,a
063C 750080    1929            mov     __divslong_PARM_2,#0x80
063F E4        1930            clr     a
0640 F501      1931            mov     (__divslong_PARM_2 + 1),a
0642 F502      1932            mov     (__divslong_PARM_2 + 2),a
0644 F503      1933            mov     (__divslong_PARM_2 + 3),a
0646 85F882    1934            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0649 85F983    1935            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
064C 85FAF0    1936            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
064F E5FB      1937            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
0651 C006      1938            push    ar6
0653 C007      1939            push    ar7
0655 C000      1940            push    ar0
0657 C001      1941            push    ar1
0659 120000    1942            lcall   __divslong
065C 858200    1943            mov     __mullong_PARM_2,dpl
065F 858301    1944            mov     (__mullong_PARM_2 + 1),dph
0662 85F002    1945            mov     (__mullong_PARM_2 + 2),b
0665 F503      1946            mov     (__mullong_PARM_2 + 3),a
0667 D001      1947            pop     ar1
0669 D000      1948            pop     ar0
066B D007      1949            pop     ar7
066D D006      1950            pop     ar6
066F           1951   ;        main.c:443: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
066F 8E82      1952            mov     dpl,r6
0671 8F83      1953            mov     dph,r7
0673 88F0      1954            mov     b,r0
0675 E9        1955            mov     a,r1
0676 120000    1956            lcall   __mullong
0679 8582F8    1957            mov     _BMM150_compensate_y_sloc0_1_0,dpl
067C 8583F9    1958            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
067F 85F0FA    1959            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
0682 F5FB      1960            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0684 D005      1961            pop     ar5
0686 D004      1962            pop     ar4
0688 9054C8    1963            mov     dptr,#_dig_xy1
068B E0        1964            movx    a,@dptr
068C FE        1965            mov     r6,a
068D E4        1966            clr     a
068E 5401      1967            anl     a,#0x01
0690 A2E0      1968            mov     c,acc.0
0692 CE        1969            xch     a,r6
0693 13        1970            rrc     a
0694 CE        1971            xch     a,r6
0695 13        1972            rrc     a
0696 CE        1973            xch     a,r6
0697 8E00      1974            mov     __mullong_PARM_2,r6
0699 F501      1975            mov     (__mullong_PARM_2 + 1),a
069B 33        1976            rlc     a
069C 95E0      1977            subb    a,acc
069E F502      1978            mov     (__mullong_PARM_2 + 2),a
06A0 F503      1979            mov     (__mullong_PARM_2 + 3),a
06A2           1980   ;        main.c:444: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
06A2 ED        1981            mov     a,r5
06A3 33        1982            rlc     a
06A4 95E0      1983            subb    a,acc
06A6 FE        1984            mov     r6,a
06A7 8C82      1985            mov     dpl,r4
06A9 8D83      1986            mov     dph,r5
06AB 8EF0      1987            mov     b,r6
06AD 120000    1988            lcall   __mullong
06B0 AC82      1989            mov     r4,dpl
06B2 AD83      1990            mov     r5,dph
06B4 AEF0      1991            mov     r6,b
06B6 FF        1992            mov     r7,a
06B7 EC        1993            mov     a,r4
06B8 25F8      1994            add     a,_BMM150_compensate_y_sloc0_1_0
06BA FC        1995            mov     r4,a
06BB ED        1996            mov     a,r5
06BC 35F9      1997            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
06BE FD        1998            mov     r5,a
06BF EE        1999            mov     a,r6
06C0 35FA      2000            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
06C2 FE        2001            mov     r6,a
06C3 EF        2002            mov     a,r7
06C4 35FB      2003            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
06C6 FF        2004            mov     r7,a
06C7 750000    2005            mov     __divslong_PARM_2,#0x00
06CA 750102    2006            mov     (__divslong_PARM_2 + 1),#0x02
06CD 750200    2007            mov     (__divslong_PARM_2 + 2),#0x00
06D0 750300    2008            mov     (__divslong_PARM_2 + 3),#0x00
06D3           2009   ;        main.c:445: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
06D3 8C82      2010            mov     dpl,r4
06D5 8D83      2011            mov     dph,r5
06D7 8EF0      2012            mov     b,r6
06D9 EF        2013            mov     a,r7
06DA 120000    2014            lcall   __divslong
06DD AC82      2015            mov     r4,dpl
06DF AD83      2016            mov     r5,dph
06E1 AEF0      2017            mov     r6,b
06E3 FF        2018            mov     r7,a
06E4 905608    2019            mov     dptr,#_dig_y2
06E7 E0        2020            movx    a,@dptr
06E8 F8        2021            mov     r0,a
06E9 33        2022            rlc     a
06EA 95E0      2023            subb    a,acc
06EC F9        2024            mov     r1,a
06ED 74A0      2025            mov     a,#0xA0
06EF 28        2026            add     a,r0
06F0 F8        2027            mov     r0,a
06F1 E4        2028            clr     a
06F2 39        2029            addc    a,r1
06F3 8800      2030            mov     __mullong_PARM_2,r0
06F5 F501      2031            mov     (__mullong_PARM_2 + 1),a
06F7 33        2032            rlc     a
06F8 95E0      2033            subb    a,acc
06FA F502      2034            mov     (__mullong_PARM_2 + 2),a
06FC F503      2035            mov     (__mullong_PARM_2 + 3),a
06FE           2036   ;        main.c:446: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
06FE 7410      2037            mov     a,#0x10
0700 2E        2038            add     a,r6
0701 FE        2039            mov     r6,a
0702 E4        2040            clr     a
0703 3F        2041            addc    a,r7
0704 8C82      2042            mov     dpl,r4
0706 8D83      2043            mov     dph,r5
0708 8EF0      2044            mov     b,r6
070A 120000    2045            lcall   __mullong
070D           2046   ;        main.c:447: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
070D 750000    2047            mov     __divslong_PARM_2,#0x00
0710 750110    2048            mov     (__divslong_PARM_2 + 1),#0x10
0713 750200    2049            mov     (__divslong_PARM_2 + 2),#0x00
0716 750300    2050            mov     (__divslong_PARM_2 + 3),#0x00
0719 120000    2051            lcall   __divslong
071C 858200    2052            mov     __mullong_PARM_2,dpl
071F 858301    2053            mov     (__mullong_PARM_2 + 1),dph
0722 85F002    2054            mov     (__mullong_PARM_2 + 2),b
0725 F503      2055            mov     (__mullong_PARM_2 + 3),a
0727 D003      2056            pop     ar3
0729 D002      2057            pop     ar2
072B EB        2058            mov     a,r3
072C 33        2059            rlc     a
072D 95E0      2060            subb    a,acc
072F FC        2061            mov     r4,a
0730           2062   ;        main.c:448: retval = (int16_t)(process_comp_y9 / 8192);
0730 8A82      2063            mov     dpl,r2
0732 8B83      2064            mov     dph,r3
0734 8CF0      2065            mov     b,r4
0736 120000    2066            lcall   __mullong
0739 750000    2067            mov     __divslong_PARM_2,#0x00
073C 750120    2068            mov     (__divslong_PARM_2 + 1),#0x20
073F 750200    2069            mov     (__divslong_PARM_2 + 2),#0x00
0742 750300    2070            mov     (__divslong_PARM_2 + 3),#0x00
0745 120000    2071            lcall   __divslong
0748 AA82      2072            mov     r2,dpl
074A AB83      2073            mov     r3,dph
074C           2074   ;        main.c:449: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
074C 905648    2075            mov     dptr,#_dig_y1
074F E0        2076            movx    a,@dptr
0750 FC        2077            mov     r4,a
0751 33        2078            rlc     a
0752 95E0      2079            subb    a,acc
0754 C4        2080            swap    a
0755 03        2081            rr      a
0756 54F8      2082            anl     a,#0xf8
0758 CC        2083            xch     a,r4
0759 C4        2084            swap    a
075A 03        2085            rr      a
075B CC        2086            xch     a,r4
075C 6C        2087            xrl     a,r4
075D CC        2088            xch     a,r4
075E 54F8      2089            anl     a,#0xf8
0760 CC        2090            xch     a,r4
0761 6C        2091            xrl     a,r4
0762 FD        2092            mov     r5,a
0763 EC        2093            mov     a,r4
0764 2A        2094            add     a,r2
0765 F582      2095            mov     dpl,a
0767 ED        2096            mov     a,r5
0768 3B        2097            addc    a,r3
0769 F583      2098            mov     dph,a
076B 750010    2099            mov     __divsint_PARM_2,#0x10
076E E4        2100            clr     a
076F F501      2101            mov     (__divsint_PARM_2 + 1),a
0771 120000    2102            lcall   __divsint
0774 E582      2103            mov     a,dpl
0776 8583F0    2104            mov     b,dph
0779 90CF58    2105            mov     dptr,#_BMM150_compensate_y_retval_1_116
077C F0        2106            movx    @dptr,a
077D A3        2107            inc     dptr
077E E5F0      2108            mov     a,b
0780 F0        2109            movx    @dptr,a
0781 8000      2110            sjmp    L011012?
0783           2111   L011008?:
0783           2112   ;        main.c:453: retval = BMM150_OVERFLOW_OUTPUT;
0783 90CF58    2113            mov     dptr,#_BMM150_compensate_y_retval_1_116
0786 E4        2114            clr     a
0787 F0        2115            movx    @dptr,a
0788 A3        2116            inc     dptr
0789 7480      2117            mov     a,#0x80
078B F0        2118            movx    @dptr,a
078C 8000      2119            sjmp    L011012?
078E           2120   L011011?:
078E           2121   ;        main.c:459: retval = BMM150_OVERFLOW_OUTPUT;
078E 90CF58    2122            mov     dptr,#_BMM150_compensate_y_retval_1_116
0791 E4        2123            clr     a
0792 F0        2124            movx    @dptr,a
0793 A3        2125            inc     dptr
0794 7480      2126            mov     a,#0x80
0796 F0        2127            movx    @dptr,a
0797           2128   L011012?:
0797           2129   ;        main.c:462: return retval;
0797 90CF58    2130            mov     dptr,#_BMM150_compensate_y_retval_1_116
079A E0        2131            movx    a,@dptr
079B FA        2132            mov     r2,a
079C A3        2133            inc     dptr
079D E0        2134            movx    a,@dptr
079E 8A82      2135            mov     dpl,r2
07A0 F583      2136            mov     dph,a
07A2 22        2137            ret
07A3           2138   ;------------------------------------------------------------
07A3           2139   ;Allocation info for local variables in function 'BMM150_Read_Data'
07A3           2140   ;------------------------------------------------------------
07A3           2141   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
07A3           2142   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_124'
07A3           2143   ;raw_x_lsb                 Allocated with name '_BMM150_Read_Data_raw_x_lsb_1_125'
07A3           2144   ;raw_x_msb                 Allocated with name '_BMM150_Read_Data_raw_x_msb_1_125'
07A3           2145   ;raw_y_lsb                 Allocated with name '_BMM150_Read_Data_raw_y_lsb_1_125'
07A3           2146   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_125'
07A3           2147   ;raw_rhall_lsb             Allocated with name '_BMM150_Read_Data_raw_rhall_lsb_1_125'
07A3           2148   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_125'
07A3           2149   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_125'
07A3           2150   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_125'
07A3           2151   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_125'
07A3           2152   ;msb_data                  Allocated with name '_BMM150_Read_Data_msb_data_1_125'
07A3           2153   ;------------------------------------------------------------
07A3           2154   ;        main.c:465: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y)
07A3           2155   ;        -----------------------------------------
07A3           2156   ;         function BMM150_Read_Data
07A3           2157   ;        -----------------------------------------
07A3           2158   _BMM150_Read_Data:
07A3 858248    2159            mov     _BMM150_Read_Data_mag_x_1_124,dpl
07A6 858349    2160            mov     (_BMM150_Read_Data_mag_x_1_124 + 1),dph
07A9 85F04A    2161            mov     (_BMM150_Read_Data_mag_x_1_124 + 2),b
07AC           2162   ;        main.c:472: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
07AC 758242    2163            mov     dpl,#0x42
07AF 120000    2164            lcall   _SPI_read
07B2 AD82      2165            mov     r5,dpl
07B4           2166   ;        main.c:473: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
07B4 758243    2167            mov     dpl,#0x43
07B7 C005      2168            push    ar5
07B9 120000    2169            lcall   _SPI_read
07BC AE82      2170            mov     r6,dpl
07BE           2171   ;        main.c:474: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
07BE 758244    2172            mov     dpl,#0x44
07C1 C006      2173            push    ar6
07C3 120000    2174            lcall   _SPI_read
07C6 AF82      2175            mov     r7,dpl
07C8           2176   ;        main.c:475: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
07C8 758245    2177            mov     dpl,#0x45
07CB C007      2178            push    ar7
07CD 120000    2179            lcall   _SPI_read
07D0 A882      2180            mov     r0,dpl
07D2           2181   ;        main.c:478: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
07D2 758248    2182            mov     dpl,#0x48
07D5 C000      2183            push    ar0
07D7 120000    2184            lcall   _SPI_read
07DA A982      2185            mov     r1,dpl
07DC           2186   ;        main.c:479: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
07DC 758249    2187            mov     dpl,#0x49
07DF C001      2188            push    ar1
07E1 120000    2189            lcall   _SPI_read
07E4 AA82      2190            mov     r2,dpl
07E6 D001      2191            pop     ar1
07E8 D000      2192            pop     ar0
07EA D007      2193            pop     ar7
07EC D006      2194            pop     ar6
07EE D005      2195            pop     ar5
07F0           2196   ;        main.c:483: raw_x_lsb = ((raw_x_lsb & 0b_1111_1000)) >> 3;
07F0 5305F8    2197            anl     ar5,#0xF8
07F3 ED        2198            mov     a,r5
07F4 C4        2199            swap    a
07F5 23        2200            rl      a
07F6 541F      2201            anl     a,#0x1f
07F8 FD        2202            mov     r5,a
07F9           2203   ;        main.c:484: msb_data = ((int16_t)((int8_t)raw_x_msb)) << 5; 
07F9 EE        2204            mov     a,r6
07FA 33        2205            rlc     a
07FB 95E0      2206            subb    a,acc
07FD C4        2207            swap    a
07FE 23        2208            rl      a
07FF 54E0      2209            anl     a,#0xe0
0801 CE        2210            xch     a,r6
0802 C4        2211            swap    a
0803 23        2212            rl      a
0804 CE        2213            xch     a,r6
0805 6E        2214            xrl     a,r6
0806 CE        2215            xch     a,r6
0807 54E0      2216            anl     a,#0xe0
0809 CE        2217            xch     a,r6
080A 6E        2218            xrl     a,r6
080B FB        2219            mov     r3,a
080C           2220   ;        main.c:485: x_val = (int16_t)(msb_data | raw_x_lsb);
080C 7C00      2221            mov     r4,#0x00
080E 90D010    2222            mov     dptr,#_BMM150_Read_Data_x_val_1_125
0811 ED        2223            mov     a,r5
0812 4E        2224            orl     a,r6
0813 F0        2225            movx    @dptr,a
0814 EC        2226            mov     a,r4
0815 4B        2227            orl     a,r3
0816 A3        2228            inc     dptr
0817 F0        2229            movx    @dptr,a
0818           2230   ;        main.c:488: raw_y_lsb = ((raw_y_lsb & 0b_1111_1000)) >> 3;
0818 5307F8    2231            anl     ar7,#0xF8
081B EF        2232            mov     a,r7
081C C4        2233            swap    a
081D 23        2234            rl      a
081E 541F      2235            anl     a,#0x1f
0820 FF        2236            mov     r7,a
0821           2237   ;        main.c:489: msb_data = ((int16_t)((int8_t)raw_y_msb)) << 5; 
0821 E8        2238            mov     a,r0
0822 33        2239            rlc     a
0823 95E0      2240            subb    a,acc
0825 C4        2241            swap    a
0826 23        2242            rl      a
0827 54E0      2243            anl     a,#0xe0
0829 C8        2244            xch     a,r0
082A C4        2245            swap    a
082B 23        2246            rl      a
082C C8        2247            xch     a,r0
082D 68        2248            xrl     a,r0
082E C8        2249            xch     a,r0
082F 54E0      2250            anl     a,#0xe0
0831 C8        2251            xch     a,r0
0832 68        2252            xrl     a,r0
0833 FB        2253            mov     r3,a
0834           2254   ;        main.c:490: y_val = (int16_t)(msb_data | raw_y_lsb);
0834 7C00      2255            mov     r4,#0x00
0836 90D060    2256            mov     dptr,#_BMM150_Read_Data_y_val_1_125
0839 EF        2257            mov     a,r7
083A 48        2258            orl     a,r0
083B F0        2259            movx    @dptr,a
083C EC        2260            mov     a,r4
083D 4B        2261            orl     a,r3
083E A3        2262            inc     dptr
083F F0        2263            movx    @dptr,a
0840           2264   ;        main.c:498: raw_rhall_lsb = ((raw_rhall_lsb & 0xFC) >> 2);
0840 5301FC    2265            anl     ar1,#0xFC
0843 E9        2266            mov     a,r1
0844 03        2267            rr      a
0845 03        2268            rr      a
0846 543F      2269            anl     a,#0x3f
0848 F9        2270            mov     r1,a
0849           2271   ;        main.c:499: rhall_val = (uint16_t)(((uint16_t)raw_rhall_msb << 6) | raw_rhall_lsb);
0849 E4        2272            clr     a
084A 5403      2273            anl     a,#0x03
084C A2E0      2274            mov     c,acc.0
084E CA        2275            xch     a,r2
084F 13        2276            rrc     a
0850 CA        2277            xch     a,r2
0851 13        2278            rrc     a
0852 A2E0      2279            mov     c,acc.0
0854 CA        2280            xch     a,r2
0855 13        2281            rrc     a
0856 CA        2282            xch     a,r2
0857 13        2283            rrc     a
0858 CA        2284            xch     a,r2
0859 FB        2285            mov     r3,a
085A 7C00      2286            mov     r4,#0x00
085C 90D0C0    2287            mov     dptr,#_BMM150_Read_Data_rhall_val_1_125
085F E9        2288            mov     a,r1
0860 4A        2289            orl     a,r2
0861 F0        2290            movx    @dptr,a
0862 EC        2291            mov     a,r4
0863 4B        2292            orl     a,r3
0864 A3        2293            inc     dptr
0865 F0        2294            movx    @dptr,a
0866           2295   ;        main.c:502: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
0866 7548C0    2296            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_125
0869 7549D0    2297            mov     (_BMM150_compensate_x_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_125 >> 8)
086C 754A00    2298            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x00
086F 90D010    2299            mov     dptr,#_BMM150_Read_Data_x_val_1_125
0872 75F000    2300            mov     b,#0x00
0875 120000    2301            lcall   _BMM150_compensate_x
0878 AA82      2302            mov     r2,dpl
087A AB83      2303            mov     r3,dph
087C 854882    2304            mov     dpl,_BMM150_Read_Data_mag_x_1_124
087F 854983    2305            mov     dph,(_BMM150_Read_Data_mag_x_1_124 + 1)
0882 854AF0    2306            mov     b,(_BMM150_Read_Data_mag_x_1_124 + 2)
0885 EA        2307            mov     a,r2
0886 120000    2308            lcall   __gptrput
0889 A3        2309            inc     dptr
088A EB        2310            mov     a,r3
088B 120000    2311            lcall   __gptrput
088E           2312   ;        main.c:503: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
088E AAA8      2313            mov     r2,_BMM150_Read_Data_PARM_2
0890 ABA9      2314            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
0892 ACAA      2315            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
0894 75F8C0    2316            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_125
0897 75F9D0    2317            mov     (_BMM150_compensate_y_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_125 >> 8)
089A 75FA00    2318            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x00
089D 90D060    2319            mov     dptr,#_BMM150_Read_Data_y_val_1_125
08A0 75F000    2320            mov     b,#0x00
08A3 C002      2321            push    ar2
08A5 C003      2322            push    ar3
08A7 C004      2323            push    ar4
08A9 120000    2324            lcall   _BMM150_compensate_y
08AC AD82      2325            mov     r5,dpl
08AE AE83      2326            mov     r6,dph
08B0 D004      2327            pop     ar4
08B2 D003      2328            pop     ar3
08B4 D002      2329            pop     ar2
08B6 8A82      2330            mov     dpl,r2
08B8 8B83      2331            mov     dph,r3
08BA 8CF0      2332            mov     b,r4
08BC ED        2333            mov     a,r5
08BD 120000    2334            lcall   __gptrput
08C0 A3        2335            inc     dptr
08C1 EE        2336            mov     a,r6
08C2 020000    2337            ljmp    __gptrput
08C5           2338   ;------------------------------------------------------------
08C5           2339   ;Allocation info for local variables in function 'UART1_Init'
08C5           2340   ;------------------------------------------------------------
08C5           2341   ;baudrate                  Allocated to registers r2 r3 r4 r5 
08C5           2342   ;------------------------------------------------------------
08C5           2343   ;        main.c:509: void UART1_Init (unsigned long baudrate)
08C5           2344   ;        -----------------------------------------
08C5           2345   ;         function UART1_Init
08C5           2346   ;        -----------------------------------------
08C5           2347   _UART1_Init:
08C5 AA82      2348            mov     r2,dpl
08C7 AB83      2349            mov     r3,dph
08C9 ACF0      2350            mov     r4,b
08CB FD        2351            mov     r5,a
08CC           2352   ;        main.c:511: SFRPAGE = 0x20;
08CC 75A720    2353            mov     _SFRPAGE,#0x20
08CF           2354   ;        main.c:512: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
08CF 75930C    2355            mov     _SMOD1,#0x0C
08D2           2356   ;        main.c:513: SCON1 = 0x10;
08D2 75C810    2357            mov     _SCON1,#0x10
08D5           2358   ;        main.c:514: SBCON1 =0x00;   // disable baud rate generator
08D5 759400    2359            mov     _SBCON1,#0x00
08D8           2360   ;        main.c:515: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
08D8 8A00      2361            mov     __divulong_PARM_2,r2
08DA 8B01      2362            mov     (__divulong_PARM_2 + 1),r3
08DC 8C02      2363            mov     (__divulong_PARM_2 + 2),r4
08DE 8D03      2364            mov     (__divulong_PARM_2 + 3),r5
08E0 90A200    2365            mov     dptr,#0xA200
08E3 75F04A    2366            mov     b,#0x4A
08E6 7404      2367            mov     a,#0x04
08E8 120000    2368            lcall   __divulong
08EB AA82      2369            mov     r2,dpl
08ED AB83      2370            mov     r3,dph
08EF ACF0      2371            mov     r4,b
08F1 FD        2372            mov     r5,a
08F2 750018    2373            mov     __divulong_PARM_2,#0x18
08F5 E4        2374            clr     a
08F6 F501      2375            mov     (__divulong_PARM_2 + 1),a
08F8 F502      2376            mov     (__divulong_PARM_2 + 2),a
08FA F503      2377            mov     (__divulong_PARM_2 + 3),a
08FC 8A82      2378            mov     dpl,r2
08FE 8B83      2379            mov     dph,r3
0900 8CF0      2380            mov     b,r4
0902 ED        2381            mov     a,r5
0903 120000    2382            lcall   __divulong
0906 AA82      2383            mov     r2,dpl
0908 AB83      2384            mov     r3,dph
090A ACF0      2385            mov     r4,b
090C FD        2386            mov     r5,a
090D E4        2387            clr     a
090E C3        2388            clr     c
090F 9A        2389            subb    a,r2
0910 FA        2390            mov     r2,a
0911 E4        2391            clr     a
0912 9B        2392            subb    a,r3
0913 FB        2393            mov     r3,a
0914 7401      2394            mov     a,#0x01
0916 9C        2395            subb    a,r4
0917 E4        2396            clr     a
0918 9D        2397            subb    a,r5
0919 8A95      2398            mov     _SBRL1,r2
091B 8B96      2399            mov     (_SBRL1 >> 8),r3
091D           2400   ;        main.c:516: TI1 = 1; // indicate ready for TX
091D D2C9      2401            setb    _TI1
091F           2402   ;        main.c:517: SBCON1 |= 0x40;   // enable baud rate generator
091F 439440    2403            orl     _SBCON1,#0x40
0922           2404   ;        main.c:518: SFRPAGE = 0x00;
0922 75A700    2405            mov     _SFRPAGE,#0x00
0925 22        2406            ret
0926           2407   ;------------------------------------------------------------
0926           2408   ;Allocation info for local variables in function 'putchar1'
0926           2409   ;------------------------------------------------------------
0926           2410   ;c                         Allocated to registers r2 
0926           2411   ;------------------------------------------------------------
0926           2412   ;        main.c:521: void putchar1 (char c) 
0926           2413   ;        -----------------------------------------
0926           2414   ;         function putchar1
0926           2415   ;        -----------------------------------------
0926           2416   _putchar1:
0926 AA82      2417            mov     r2,dpl
0928           2418   ;        main.c:523: SFRPAGE = 0x20;
0928 75A720    2419            mov     _SFRPAGE,#0x20
092B           2420   ;        main.c:524: while (!TI1);
092B           2421   L014001?:
092B           2422   ;        main.c:525: TI1=0;
092B 10C9D0    2423            jbc     _TI1,L014008?
092E 8000      2424            sjmp    L014001?
0930           2425   L014008?:
0930           2426   ;        main.c:526: SBUF1 = c;
0930 8A92      2427            mov     _SBUF1,r2
0932           2428   ;        main.c:527: SFRPAGE = 0x00;
0932 75A700    2429            mov     _SFRPAGE,#0x00
0935 22        2430            ret
0936           2431   ;------------------------------------------------------------
0936           2432   ;Allocation info for local variables in function 'sendstr1'
0936           2433   ;------------------------------------------------------------
0936           2434   ;s                         Allocated to registers r2 r3 r4 
0936           2435   ;------------------------------------------------------------
0936           2436   ;        main.c:530: void sendstr1 (char * s)
0936           2437   ;        -----------------------------------------
0936           2438   ;         function sendstr1
0936           2439   ;        -----------------------------------------
0936           2440   _sendstr1:
0936 AA82      2441            mov     r2,dpl
0938 AB83      2442            mov     r3,dph
093A ACF0      2443            mov     r4,b
093C           2444   ;        main.c:532: while(*s)
093C           2445   L015001?:
093C 8A82      2446            mov     dpl,r2
093E 8B83      2447            mov     dph,r3
0940 8CF0      2448            mov     b,r4
0942 120000    2449            lcall   __gptrget
0945 FD        2450            mov     r5,a
0946 6000      2451            jz      L015004?
0948           2452   ;        main.c:534: putchar1(*s);
0948 8D82      2453            mov     dpl,r5
094A C002      2454            push    ar2
094C C003      2455            push    ar3
094E C004      2456            push    ar4
0950 120000    2457            lcall   _putchar1
0953 D004      2458            pop     ar4
0955 D003      2459            pop     ar3
0957 D002      2460            pop     ar2
0959           2461   ;        main.c:535: s++;        
0959 0A        2462            inc     r2
095A BA0010    2463            cjne    r2,#0x00,L015001?
095D 0B        2464            inc     r3
095E 8000      2465            sjmp    L015001?
0960           2466   L015004?:
0960 22        2467            ret
0961           2468   ;------------------------------------------------------------
0961           2469   ;Allocation info for local variables in function 'getchar1'
0961           2470   ;------------------------------------------------------------
0961           2471   ;c                         Allocated with name '_getchar1_c_1_134'
0961           2472   ;------------------------------------------------------------
0961           2473   ;        main.c:539: char getchar1 (void)
0961           2474   ;        -----------------------------------------
0961           2475   ;         function getchar1
0961           2476   ;        -----------------------------------------
0961           2477   _getchar1:
0961           2478   ;        main.c:542: SFRPAGE = 0x20;
0961 75A720    2479            mov     _SFRPAGE,#0x20
0964           2480   ;        main.c:543: while (!RI1);
0964           2481   L016001?:
0964           2482   ;        main.c:544: RI1=0;
0964 10C8D0    2483            jbc     _RI1,L016008?
0967 8000      2484            sjmp    L016001?
0969           2485   L016008?:
0969           2486   ;        main.c:546: SCON1&=0b_0011_1111;
0969 53C83F    2487            anl     _SCON1,#0x3F
096C           2488   ;        main.c:547: c = SBUF1;
096C 859282    2489            mov     dpl,_SBUF1
096F           2490   ;        main.c:548: SFRPAGE = 0x00;
096F 75A700    2491            mov     _SFRPAGE,#0x00
0972           2492   ;        main.c:549: return (c);
0972 22        2493            ret
0973           2494   ;------------------------------------------------------------
0973           2495   ;Allocation info for local variables in function 'getchar1_with_timeout'
0973           2496   ;------------------------------------------------------------
0973           2497   ;c                         Allocated with name '_getchar1_with_timeout_c_1_136'
0973           2498   ;timeout                   Allocated with name '_getchar1_with_timeout_timeout_1_136'
0973           2499   ;------------------------------------------------------------
0973           2500   ;        main.c:552: char getchar1_with_timeout (void)
0973           2501   ;        -----------------------------------------
0973           2502   ;         function getchar1_with_timeout
0973           2503   ;        -----------------------------------------
0973           2504   _getchar1_with_timeout:
0973           2505   ;        main.c:556: SFRPAGE = 0x20;
0973 75A720    2506            mov     _SFRPAGE,#0x20
0976           2507   ;        main.c:558: while (!RI1)
0976 7A00      2508            mov     r2,#0x00
0978 7B00      2509            mov     r3,#0x00
097A           2510   L017003?:
097A 20C850    2511            jb      _RI1,L017005?
097D           2512   ;        main.c:560: SFRPAGE = 0x00;
097D 75A700    2513            mov     _SFRPAGE,#0x00
0980           2514   ;        main.c:561: Timer3us(20);
0980 758214    2515            mov     dpl,#0x14
0983 C002      2516            push    ar2
0985 C003      2517            push    ar3
0987 120000    2518            lcall   _Timer3us
098A D003      2519            pop     ar3
098C D002      2520            pop     ar2
098E           2521   ;        main.c:562: SFRPAGE = 0x20;
098E 75A720    2522            mov     _SFRPAGE,#0x20
0991           2523   ;        main.c:563: timeout++;
0991 0A        2524            inc     r2
0992 BA0090    2525            cjne    r2,#0x00,L017012?
0995 0B        2526            inc     r3
0996           2527   L017012?:
0996           2528   ;        main.c:564: if(timeout==25000)
0996 BAA810    2529            cjne    r2,#0xA8,L017003?
0999 BB6110    2530            cjne    r3,#0x61,L017003?
099C           2531   ;        main.c:566: SFRPAGE = 0x00;
099C 75A700    2532            mov     _SFRPAGE,#0x00
099F           2533   ;        main.c:567: return ('\n'); // Timeout after half second
099F 75820A    2534            mov     dpl,#0x0A
09A2 22        2535            ret
09A3           2536   L017005?:
09A3           2537   ;        main.c:570: RI1=0;
09A3 C2C8      2538            clr     _RI1
09A5           2539   ;        main.c:572: SCON1&=0b_0011_1111;
09A5 53C83F    2540            anl     _SCON1,#0x3F
09A8           2541   ;        main.c:573: c = SBUF1;
09A8 859282    2542            mov     dpl,_SBUF1
09AB           2543   ;        main.c:574: SFRPAGE = 0x00;
09AB 75A700    2544            mov     _SFRPAGE,#0x00
09AE           2545   ;        main.c:575: return (c);
09AE 22        2546            ret
09AF           2547   ;------------------------------------------------------------
09AF           2548   ;Allocation info for local variables in function 'getstr1'
09AF           2549   ;------------------------------------------------------------
09AF           2550   ;n                         Allocated with name '_getstr1_PARM_2'
09AF           2551   ;s                         Allocated to registers r2 r3 r4 
09AF           2552   ;c                         Allocated with name '_getstr1_c_1_140'
09AF           2553   ;cnt                       Allocated with name '_getstr1_cnt_1_140'
09AF           2554   ;------------------------------------------------------------
09AF           2555   ;        main.c:578: void getstr1 (char * s, unsigned char n)
09AF           2556   ;        -----------------------------------------
09AF           2557   ;         function getstr1
09AF           2558   ;        -----------------------------------------
09AF           2559   _getstr1:
09AF AA82      2560            mov     r2,dpl
09B1 AB83      2561            mov     r3,dph
09B3 ACF0      2562            mov     r4,b
09B5           2563   ;        main.c:584: while(1)
09B5 7D00      2564            mov     r5,#0x00
09B7 8A06      2565            mov     ar6,r2
09B9 8B07      2566            mov     ar7,r3
09BB 8C00      2567            mov     ar0,r4
09BD           2568   L018007?:
09BD           2569   ;        main.c:586: c=getchar1_with_timeout();
09BD C002      2570            push    ar2
09BF C003      2571            push    ar3
09C1 C004      2572            push    ar4
09C3 C005      2573            push    ar5
09C5 C006      2574            push    ar6
09C7 C007      2575            push    ar7
09C9 C000      2576            push    ar0
09CB 120000    2577            lcall   _getchar1_with_timeout
09CE A982      2578            mov     r1,dpl
09D0 D000      2579            pop     ar0
09D2 D007      2580            pop     ar7
09D4 D006      2581            pop     ar6
09D6 D005      2582            pop     ar5
09D8 D004      2583            pop     ar4
09DA D003      2584            pop     ar3
09DC D002      2585            pop     ar2
09DE           2586   ;        main.c:587: if(c=='\n')
09DE B90A10    2587            cjne    r1,#0x0A,L018002?
09E1           2588   ;        main.c:589: *s=0;
09E1 8A82      2589            mov     dpl,r2
09E3 8B83      2590            mov     dph,r3
09E5 8CF0      2591            mov     b,r4
09E7 E4        2592            clr     a
09E8           2593   ;        main.c:590: return;
09E8 020000    2594            ljmp    __gptrput
09EB           2595   L018002?:
09EB           2596   ;        main.c:593: if (cnt<n)
09EB C3        2597            clr     c
09EC ED        2598            mov     a,r5
09ED 9558      2599            subb    a,_getstr1_PARM_2
09EF 5000      2600            jnc     L018004?
09F1           2601   ;        main.c:595: cnt++;
09F1 0D        2602            inc     r5
09F2           2603   ;        main.c:596: *s=c;
09F2 8E82      2604            mov     dpl,r6
09F4 8F83      2605            mov     dph,r7
09F6 88F0      2606            mov     b,r0
09F8 E9        2607            mov     a,r1
09F9 120000    2608            lcall   __gptrput
09FC A3        2609            inc     dptr
09FD AE82      2610            mov     r6,dpl
09FF AF83      2611            mov     r7,dph
0A01           2612   ;        main.c:597: s++;
0A01 8E02      2613            mov     ar2,r6
0A03 8F03      2614            mov     ar3,r7
0A05 8804      2615            mov     ar4,r0
0A07 8000      2616            sjmp    L018007?
0A09           2617   L018004?:
0A09           2618   ;        main.c:601: *s=0;
0A09 8A82      2619            mov     dpl,r2
0A0B 8B83      2620            mov     dph,r3
0A0D 8CF0      2621            mov     b,r4
0A0F E4        2622            clr     a
0A10           2623   ;        main.c:602: return;
0A10 020000    2624            ljmp    __gptrput
0A13           2625   ;------------------------------------------------------------
0A13           2626   ;Allocation info for local variables in function 'RXU1'
0A13           2627   ;------------------------------------------------------------
0A13           2628   ;------------------------------------------------------------
0A13           2629   ;        main.c:608: bit RXU1 (void)
0A13           2630   ;        -----------------------------------------
0A13           2631   ;         function RXU1
0A13           2632   ;        -----------------------------------------
0A13           2633   _RXU1:
0A13           2634   ;        main.c:611: SFRPAGE = 0x20;
0A13 75A720    2635            mov     _SFRPAGE,#0x20
0A16           2636   ;        main.c:612: mybit=RI1;
0A16 A2C8      2637            mov     c,_RI1
0A18           2638   ;        main.c:613: SFRPAGE = 0x00;
0A18 75A700    2639            mov     _SFRPAGE,#0x00
0A1B           2640   ;        main.c:614: return mybit;
0A1B 22        2641            ret
0A1C           2642   ;------------------------------------------------------------
0A1C           2643   ;Allocation info for local variables in function 'waitms_or_RI1'
0A1C           2644   ;------------------------------------------------------------
0A1C           2645   ;ms                        Allocated to registers r2 r3 
0A1C           2646   ;j                         Allocated with name '_waitms_or_RI1_j_1_148'
0A1C           2647   ;k                         Allocated with name '_waitms_or_RI1_k_1_148'
0A1C           2648   ;------------------------------------------------------------
0A1C           2649   ;        main.c:617: void waitms_or_RI1 (unsigned int ms)
0A1C           2650   ;        -----------------------------------------
0A1C           2651   ;         function waitms_or_RI1
0A1C           2652   ;        -----------------------------------------
0A1C           2653   _waitms_or_RI1:
0A1C AA82      2654            mov     r2,dpl
0A1E AB83      2655            mov     r3,dph
0A20           2656   ;        main.c:621: for(j=0; j<ms; j++)
0A20 7C00      2657            mov     r4,#0x00
0A22 7D00      2658            mov     r5,#0x00
0A24           2659   L020007?:
0A24 C3        2660            clr     c
0A25 EC        2661            mov     a,r4
0A26 9A        2662            subb    a,r2
0A27 ED        2663            mov     a,r5
0A28 9B        2664            subb    a,r3
0A29 5000      2665            jnc     L020011?
0A2B           2666   ;        main.c:623: for (k=0; k<4; k++)
0A2B 7E00      2667            mov     r6,#0x00
0A2D           2668   L020003?:
0A2D BE0450    2669            cjne    r6,#0x04,L020019?
0A30           2670   L020019?:
0A30 5000      2671            jnc     L020009?
0A32           2672   ;        main.c:625: if(RXU1()) return;
0A32 C002      2673            push    ar2
0A34 C003      2674            push    ar3
0A36 C004      2675            push    ar4
0A38 C005      2676            push    ar5
0A3A C006      2677            push    ar6
0A3C 120000    2678            lcall   _RXU1
0A3F E4        2679            clr     a
0A40 33        2680            rlc     a
0A41 D006      2681            pop     ar6
0A43 D005      2682            pop     ar5
0A45 D004      2683            pop     ar4
0A47 D003      2684            pop     ar3
0A49 D002      2685            pop     ar2
0A4B 6000      2686            jz      L020002?
0A4D 22        2687            ret
0A4E           2688   L020002?:
0A4E           2689   ;        main.c:626: Timer3us(250);
0A4E 7582FA    2690            mov     dpl,#0xFA
0A51 C002      2691            push    ar2
0A53 C003      2692            push    ar3
0A55 C004      2693            push    ar4
0A57 C005      2694            push    ar5
0A59 C006      2695            push    ar6
0A5B 120000    2696            lcall   _Timer3us
0A5E D006      2697            pop     ar6
0A60 D005      2698            pop     ar5
0A62 D004      2699            pop     ar4
0A64 D003      2700            pop     ar3
0A66 D002      2701            pop     ar2
0A68           2702   ;        main.c:623: for (k=0; k<4; k++)
0A68 0E        2703            inc     r6
0A69 8000      2704            sjmp    L020003?
0A6B           2705   L020009?:
0A6B           2706   ;        main.c:621: for(j=0; j<ms; j++)
0A6B 0C        2707            inc     r4
0A6C BC0090    2708            cjne    r4,#0x00,L020007?
0A6F 0D        2709            inc     r5
0A70 8000      2710            sjmp    L020007?
0A72           2711   L020011?:
0A72 22        2712            ret
0A73           2713   ;------------------------------------------------------------
0A73           2714   ;Allocation info for local variables in function 'SendATCommand'
0A73           2715   ;------------------------------------------------------------
0A73           2716   ;s                         Allocated to registers r2 r3 r4 
0A73           2717   ;------------------------------------------------------------
0A73           2718   ;        main.c:631: void SendATCommand (char * s)
0A73           2719   ;        -----------------------------------------
0A73           2720   ;         function SendATCommand
0A73           2721   ;        -----------------------------------------
0A73           2722   _SendATCommand:
0A73 AA82      2723            mov     r2,dpl
0A75 AB83      2724            mov     r3,dph
0A77 ACF0      2725            mov     r4,b
0A79           2726   ;        main.c:633: printf("Command: %s", s);
0A79 C002      2727            push    ar2
0A7B C003      2728            push    ar3
0A7D C004      2729            push    ar4
0A7F C002      2730            push    ar2
0A81 C003      2731            push    ar3
0A83 C004      2732            push    ar4
0A85 7410      2733            mov     a,#__str_4
0A87 C0E0      2734            push    acc
0A89 74E9      2735            mov     a,#(__str_4 >> 8)
0A8B C0E0      2736            push    acc
0A8D 7480      2737            mov     a,#0x80
0A8F C0E0      2738            push    acc
0A91 120000    2739            lcall   _printf
0A94 E581      2740            mov     a,sp
0A96 24FA      2741            add     a,#0xfa
0A98 F581      2742            mov     sp,a
0A9A           2743   ;        main.c:634: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0A9A C2A0      2744            clr     _P2_0
0A9C           2745   ;        main.c:635: waitms(5);
0A9C 900005    2746            mov     dptr,#0x0005
0A9F 120000    2747            lcall   _waitms
0AA2 D004      2748            pop     ar4
0AA4 D003      2749            pop     ar3
0AA6 D002      2750            pop     ar2
0AA8           2751   ;        main.c:636: sendstr1(s);
0AA8 8A82      2752            mov     dpl,r2
0AAA 8B83      2753            mov     dph,r3
0AAC 8CF0      2754            mov     b,r4
0AAE 120000    2755            lcall   _sendstr1
0AB1           2756   ;        main.c:637: getstr1(buff, sizeof(buff)-1);
0AB1 755813    2757            mov     _getstr1_PARM_2,#0x13
0AB4 9057C8    2758            mov     dptr,#_buff
0AB7 75F040    2759            mov     b,#0x40
0ABA 120000    2760            lcall   _getstr1
0ABD           2761   ;        main.c:638: waitms(10);
0ABD 90000A    2762            mov     dptr,#0x000A
0AC0 120000    2763            lcall   _waitms
0AC3           2764   ;        main.c:639: P2_0=1; // 'set' pin to 1 is normal operation mode.
0AC3 D2A0      2765            setb    _P2_0
0AC5           2766   ;        main.c:640: printf("Response: %s\r\n", buff);
0AC5 74C8      2767            mov     a,#_buff
0AC7 C0E0      2768            push    acc
0AC9 7457      2769            mov     a,#(_buff >> 8)
0ACB C0E0      2770            push    acc
0ACD 7440      2771            mov     a,#0x40
0ACF C0E0      2772            push    acc
0AD1 7450      2773            mov     a,#__str_5
0AD3 C0E0      2774            push    acc
0AD5 74E9      2775            mov     a,#(__str_5 >> 8)
0AD7 C0E0      2776            push    acc
0AD9 7480      2777            mov     a,#0x80
0ADB C0E0      2778            push    acc
0ADD 120000    2779            lcall   _printf
0AE0 E581      2780            mov     a,sp
0AE2 24FA      2781            add     a,#0xfa
0AE4 F581      2782            mov     sp,a
0AE6 22        2783            ret
0AE7           2784   ;------------------------------------------------------------
0AE7           2785   ;Allocation info for local variables in function 'ReceptionOff'
0AE7           2786   ;------------------------------------------------------------
0AE7           2787   ;------------------------------------------------------------
0AE7           2788   ;        main.c:643: void ReceptionOff (void)
0AE7           2789   ;        -----------------------------------------
0AE7           2790   ;         function ReceptionOff
0AE7           2791   ;        -----------------------------------------
0AE7           2792   _ReceptionOff:
0AE7           2793   ;        main.c:645: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0AE7 C2A0      2794            clr     _P2_0
0AE9           2795   ;        main.c:646: waitms(10);
0AE9 90000A    2796            mov     dptr,#0x000A
0AEC 120000    2797            lcall   _waitms
0AEF           2798   ;        main.c:647: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0AEF 90E990    2799            mov     dptr,#__str_6
0AF2 75F080    2800            mov     b,#0x80
0AF5 120000    2801            lcall   _sendstr1
0AF8           2802   ;        main.c:648: waitms(10);
0AF8 90000A    2803            mov     dptr,#0x000A
0AFB 120000    2804            lcall   _waitms
0AFE           2805   ;        main.c:650: SCON1&=0b_0011_1111;
0AFE 53C83F    2806            anl     _SCON1,#0x3F
0B01           2807   ;        main.c:651: P2_0=1; // 'set' pin to 1 is normal operation mode.
0B01 D2A0      2808            setb    _P2_0
0B03 22        2809            ret
0B04           2810   ;------------------------------------------------------------
0B04           2811   ;Allocation info for local variables in function 'Set_Pin_Output'
0B04           2812   ;------------------------------------------------------------
0B04           2813   ;pin                       Allocated to registers r2 
0B04           2814   ;mask                      Allocated to registers r3 
0B04           2815   ;------------------------------------------------------------
0B04           2816   ;        main.c:654: void Set_Pin_Output (unsigned char pin)
0B04           2817   ;        -----------------------------------------
0B04           2818   ;         function Set_Pin_Output
0B04           2819   ;        -----------------------------------------
0B04           2820   _Set_Pin_Output:
0B04 AA82      2821            mov     r2,dpl
0B06           2822   ;        main.c:658: mask=(1<<(pin&0x7));
0B06 7407      2823            mov     a,#0x07
0B08 5A        2824            anl     a,r2
0B09 F5F0      2825            mov     b,a
0B0B 05F0      2826            inc     b
0B0D 7401      2827            mov     a,#0x01
0B0F 8000      2828            sjmp    L023011?
0B11           2829   L023009?:
0B11 25E0      2830            add     a,acc
0B13           2831   L023011?:
0B13 D5F010    2832            djnz    b,L023009?
0B16 FB        2833            mov     r3,a
0B17           2834   ;        main.c:659: switch(pin/0x10)
0B17 EA        2835            mov     a,r2
0B18 C4        2836            swap    a
0B19 540F      2837            anl     a,#0x0f
0B1B FA        2838            mov  r2,a
0B1C 24FC      2839            add     a,#0xff - 0x03
0B1E 4000      2840            jc      L023006?
0B20 EA        2841            mov     a,r2
0B21 2A        2842            add     a,r2
0B22 2A        2843            add     a,r2
0B23 90EA90    2844            mov     dptr,#L023013?
0B26 73        2845            jmp     @a+dptr
0B27           2846   L023013?:
0B27 020000    2847            ljmp    L023001?
0B2A 020000    2848            ljmp    L023002?
0B2D 020000    2849            ljmp    L023003?
0B30 020000    2850            ljmp    L023004?
0B33           2851   ;        main.c:661: case 0: P0MDOUT |= mask; break;
0B33           2852   L023001?:
0B33 EB        2853            mov     a,r3
0B34 42A4      2854            orl     _P0MDOUT,a
0B36           2855   ;        main.c:662: case 1: P1MDOUT |= mask; break;
0B36 22        2856            ret
0B37           2857   L023002?:
0B37 EB        2858            mov     a,r3
0B38 42A5      2859            orl     _P1MDOUT,a
0B3A           2860   ;        main.c:663: case 2: P2MDOUT |= mask; break; 
0B3A 22        2861            ret
0B3B           2862   L023003?:
0B3B EB        2863            mov     a,r3
0B3C 42A6      2864            orl     _P2MDOUT,a
0B3E           2865   ;        main.c:664: case 3: P3MDOUT |= mask; break; 
0B3E 22        2866            ret
0B3F           2867   L023004?:
0B3F EB        2868            mov     a,r3
0B40 429C      2869            orl     _P3MDOUT,a
0B42           2870   ;        main.c:665: }   
0B42           2871   L023006?:
0B42 22        2872            ret
0B43           2873   ;------------------------------------------------------------
0B43           2874   ;Allocation info for local variables in function 'Set_Pin_Input'
0B43           2875   ;------------------------------------------------------------
0B43           2876   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_159'
0B43           2877   ;pin                       Allocated to registers r2 
0B43           2878   ;------------------------------------------------------------
0B43           2879   ;        main.c:668: void Set_Pin_Input (unsigned char pin)
0B43           2880   ;        -----------------------------------------
0B43           2881   ;         function Set_Pin_Input
0B43           2882   ;        -----------------------------------------
0B43           2883   _Set_Pin_Input:
0B43 AA82      2884            mov     r2,dpl
0B45           2885   ;        main.c:672: mask=(1<<(pin&0x7));
0B45 7407      2886            mov     a,#0x07
0B47 5A        2887            anl     a,r2
0B48 F5F0      2888            mov     b,a
0B4A 05F0      2889            inc     b
0B4C 7401      2890            mov     a,#0x01
0B4E 8000      2891            sjmp    L024011?
0B50           2892   L024009?:
0B50 25E0      2893            add     a,acc
0B52           2894   L024011?:
0B52 D5F010    2895            djnz    b,L024009?
0B55           2896   ;        main.c:673: mask=~mask;
0B55 F4        2897            cpl     a
0B56 FB        2898            mov     r3,a
0B57           2899   ;        main.c:674: switch(pin/0x10)
0B57 EA        2900            mov     a,r2
0B58 C4        2901            swap    a
0B59 540F      2902            anl     a,#0x0f
0B5B FA        2903            mov  r2,a
0B5C 24FC      2904            add     a,#0xff - 0x03
0B5E 4000      2905            jc      L024006?
0B60 EA        2906            mov     a,r2
0B61 2A        2907            add     a,r2
0B62 2A        2908            add     a,r2
0B63 90EC90    2909            mov     dptr,#L024013?
0B66 73        2910            jmp     @a+dptr
0B67           2911   L024013?:
0B67 020000    2912            ljmp    L024001?
0B6A 020000    2913            ljmp    L024002?
0B6D 020000    2914            ljmp    L024003?
0B70 020000    2915            ljmp    L024004?
0B73           2916   ;        main.c:676: case 0: P0MDOUT &= mask; break;
0B73           2917   L024001?:
0B73 EB        2918            mov     a,r3
0B74 52A4      2919            anl     _P0MDOUT,a
0B76           2920   ;        main.c:677: case 1: P1MDOUT &= mask; break;
0B76 22        2921            ret
0B77           2922   L024002?:
0B77 EB        2923            mov     a,r3
0B78 52A5      2924            anl     _P1MDOUT,a
0B7A           2925   ;        main.c:678: case 2: P2MDOUT &= mask; break; 
0B7A 22        2926            ret
0B7B           2927   L024003?:
0B7B EB        2928            mov     a,r3
0B7C 52A6      2929            anl     _P2MDOUT,a
0B7E           2930   ;        main.c:679: case 3: P3MDOUT &= mask; break; 
0B7E 22        2931            ret
0B7F           2932   L024004?:
0B7F EB        2933            mov     a,r3
0B80 529C      2934            anl     _P3MDOUT,a
0B82           2935   ;        main.c:680: }   
0B82           2936   L024006?:
0B82 22        2937            ret
0B83           2938   ;------------------------------------------------------------
0B83           2939   ;Allocation info for local variables in function 'InitADC'
0B83           2940   ;------------------------------------------------------------
0B83           2941   ;------------------------------------------------------------
0B83           2942   ;        main.c:683: void InitADC (void)
0B83           2943   ;        -----------------------------------------
0B83           2944   ;         function InitADC
0B83           2945   ;        -----------------------------------------
0B83           2946   _InitADC:
0B83           2947   ;        main.c:685: SFRPAGE = 0x00;
0B83 75A700    2948            mov     _SFRPAGE,#0x00
0B86           2949   ;        main.c:686: ADEN=0; // Disable ADC
0B86 C2EF      2950            clr     _ADEN
0B88           2951   ;        main.c:691: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0B88 75B280    2952            mov     _ADC0CN1,#0x80
0B8B           2953   ;        main.c:695: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0B8B 75BC20    2954            mov     _ADC0CF0,#0x20
0B8E           2955   ;        main.c:699: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
0B8E 75B91E    2956            mov     _ADC0CF1,#0x1E
0B91           2957   ;        main.c:708: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0B91 75E800    2958            mov     _ADC0CN0,#0x00
0B94           2959   ;        main.c:713: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0B94 75DF3F    2960            mov     _ADC0CF2,#0x3F
0B97           2961   ;        main.c:717: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0B97 75B300    2962            mov     _ADC0CN2,#0x00
0B9A           2963   ;        main.c:719: ADEN=1; // Enable ADC
0B9A D2EF      2964            setb    _ADEN
0B9C 22        2965            ret
0B9D           2966   ;------------------------------------------------------------
0B9D           2967   ;Allocation info for local variables in function 'InitPinADC'
0B9D           2968   ;------------------------------------------------------------
0B9D           2969   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
0B9D           2970   ;portno                    Allocated to registers r2 
0B9D           2971   ;mask                      Allocated to registers r3 
0B9D           2972   ;------------------------------------------------------------
0B9D           2973   ;        main.c:722: void InitPinADC (unsigned char portno, unsigned char pin_num)
0B9D           2974   ;        -----------------------------------------
0B9D           2975   ;         function InitPinADC
0B9D           2976   ;        -----------------------------------------
0B9D           2977   _InitPinADC:
0B9D AA82      2978            mov     r2,dpl
0B9F           2979   ;        main.c:726: mask=1<<pin_num;
0B9F 85B0F0    2980            mov     b,_InitPinADC_PARM_2
0BA2 05F0      2981            inc     b
0BA4 7401      2982            mov     a,#0x01
0BA6 8000      2983            sjmp    L026013?
0BA8           2984   L026011?:
0BA8 25E0      2985            add     a,acc
0BAA           2986   L026013?:
0BAA D5F010    2987            djnz    b,L026011?
0BAD FB        2988            mov     r3,a
0BAE           2989   ;        main.c:728: SFRPAGE = 0x20;
0BAE 75A720    2990            mov     _SFRPAGE,#0x20
0BB1           2991   ;        main.c:729: switch (portno)
0BB1 BA0050    2992            cjne    r2,#0x00,L026014?
0BB4 8000      2993            sjmp    L026001?
0BB6           2994   L026014?:
0BB6 BA01D0    2995            cjne    r2,#0x01,L026015?
0BB9 8000      2996            sjmp    L026002?
0BBB           2997   L026015?:
0BBB           2998   ;        main.c:731: case 0:
0BBB BA0250    2999            cjne    r2,#0x02,L026005?
0BBE 8000      3000            sjmp    L026003?
0BC0           3001   L026001?:
0BC0           3002   ;        main.c:732: P0MDIN &= (~mask); // Set pin as analog input
0BC0 EB        3003            mov     a,r3
0BC1 F4        3004            cpl     a
0BC2 FA        3005            mov     r2,a
0BC3 52F1      3006            anl     _P0MDIN,a
0BC5           3007   ;        main.c:733: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0BC5 EB        3008            mov     a,r3
0BC6 42D4      3009            orl     _P0SKIP,a
0BC8           3010   ;        main.c:734: break;
0BC8           3011   ;        main.c:735: case 1:
0BC8 8000      3012            sjmp    L026005?
0BCA           3013   L026002?:
0BCA           3014   ;        main.c:736: P1MDIN &= (~mask); // Set pin as analog input
0BCA EB        3015            mov     a,r3
0BCB F4        3016            cpl     a
0BCC FA        3017            mov     r2,a
0BCD 52F2      3018            anl     _P1MDIN,a
0BCF           3019   ;        main.c:737: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0BCF EB        3020            mov     a,r3
0BD0 42D5      3021            orl     _P1SKIP,a
0BD2           3022   ;        main.c:738: break;
0BD2           3023   ;        main.c:739: case 2:
0BD2 8000      3024            sjmp    L026005?
0BD4           3025   L026003?:
0BD4           3026   ;        main.c:740: P2MDIN &= (~mask); // Set pin as analog input
0BD4 EB        3027            mov     a,r3
0BD5 F4        3028            cpl     a
0BD6 FA        3029            mov     r2,a
0BD7 52F3      3030            anl     _P2MDIN,a
0BD9           3031   ;        main.c:741: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0BD9 EB        3032            mov     a,r3
0BDA 42CC      3033            orl     _P2SKIP,a
0BDC           3034   ;        main.c:745: }
0BDC           3035   L026005?:
0BDC           3036   ;        main.c:746: SFRPAGE = 0x00;
0BDC 75A700    3037            mov     _SFRPAGE,#0x00
0BDF 22        3038            ret
0BE0           3039   ;------------------------------------------------------------
0BE0           3040   ;Allocation info for local variables in function 'ADC_at_Pin'
0BE0           3041   ;------------------------------------------------------------
0BE0           3042   ;pin                       Allocated to registers 
0BE0           3043   ;------------------------------------------------------------
0BE0           3044   ;        main.c:749: unsigned int ADC_at_Pin(unsigned char pin)
0BE0           3045   ;        -----------------------------------------
0BE0           3046   ;         function ADC_at_Pin
0BE0           3047   ;        -----------------------------------------
0BE0           3048   _ADC_at_Pin:
0BE0 8582BB    3049            mov     _ADC0MX,dpl
0BE3           3050   ;        main.c:752: ADINT = 0;
0BE3 C2ED      3051            clr     _ADINT
0BE5           3052   ;        main.c:753: ADBUSY = 1;     // Convert voltage at the pin
0BE5 D2EC      3053            setb    _ADBUSY
0BE7           3054   ;        main.c:754: while (!ADINT); // Wait for conversion to complete
0BE7           3055   L027001?:
0BE7 30ED48    3056            jnb     _ADINT,L027001?
0BEA           3057   ;        main.c:755: return (ADC0);
0BEA 85BD82    3058            mov     dpl,_ADC0
0BED 85BE83    3059            mov     dph,(_ADC0 >> 8)
0BF0 22        3060            ret
0BF1           3061   ;------------------------------------------------------------
0BF1           3062   ;Allocation info for local variables in function 'Timer5_ISR'
0BF1           3063   ;------------------------------------------------------------
0BF1           3064   ;------------------------------------------------------------
0BF1           3065   ;        main.c:758: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0BF1           3066   ;        -----------------------------------------
0BF1           3067   ;         function Timer5_ISR
0BF1           3068   ;        -----------------------------------------
0BF1           3069   _Timer5_ISR:
0BF1 C098      3070            push    bits
0BF3 C0E0      3071            push    acc
0BF5 C0F0      3072            push    b
0BF7 C082      3073            push    dpl
0BF9 C083      3074            push    dph
0BFB C002      3075            push    (0+2)
0BFD C003      3076            push    (0+3)
0BFF C004      3077            push    (0+4)
0C01 C005      3078            push    (0+5)
0C03 C006      3079            push    (0+6)
0C05 C007      3080            push    (0+7)
0C07 C000      3081            push    (0+0)
0C09 C001      3082            push    (0+1)
0C0B C0D0      3083            push    psw
0C0D 75D000    3084            mov     psw,#0x00
0C10           3085   ;        main.c:760: SFRPAGE=0x10;
0C10 75A710    3086            mov     _SFRPAGE,#0x10
0C13           3087   ;        main.c:761: TF5H = 0; // Clear Timer5 interrupt flag
0C13 C2C7      3088            clr     _TF5H
0C15           3089   ;        main.c:762: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0C15 75D2C4    3090            mov     _TMR5RL,#0xC4
0C18 75D3FF    3091            mov     (_TMR5RL >> 8),#0xFF
0C1B           3092   ;        main.c:764: fre_mea_count++;
0C1B 905108    3093            mov     dptr,#_fre_mea_count
0C1E E0        3094            movx    a,@dptr
0C1F 2401      3095            add     a,#0x01
0C21 F0        3096            movx    @dptr,a
0C22 A3        3097            inc     dptr
0C23 E0        3098            movx    a,@dptr
0C24 3400      3099            addc    a,#0x00
0C26 F0        3100            movx    @dptr,a
0C27           3101   ;        main.c:765: if(fre_mea_count == 1000){
0C27 905108    3102            mov     dptr,#_fre_mea_count
0C2A E0        3103            movx    a,@dptr
0C2B FA        3104            mov     r2,a
0C2C A3        3105            inc     dptr
0C2D E0        3106            movx    a,@dptr
0C2E FB        3107            mov     r3,a
0C2F BAE8B0    3108            cjne    r2,#0xE8,L028002?
0C32 BB03B0    3109            cjne    r3,#0x03,L028002?
0C35           3110   ;        main.c:766: fre_mea_count = 0;
0C35 905108    3111            mov     dptr,#_fre_mea_count
0C38 E4        3112            clr     a
0C39 F0        3113            movx    @dptr,a
0C3A A3        3114            inc     dptr
0C3B F0        3115            movx    @dptr,a
0C3C           3116   ;        main.c:767: freq100 = get_freq();
0C3C 120000    3117            lcall   _get_freq
0C3F AA82      3118            mov     r2,dpl
0C41 AB83      3119            mov     r3,dph
0C43 905788    3120            mov     dptr,#_freq100
0C46 EA        3121            mov     a,r2
0C47 F0        3122            movx    @dptr,a
0C48 A3        3123            inc     dptr
0C49 EB        3124            mov     a,r3
0C4A F0        3125            movx    @dptr,a
0C4B EB        3126            mov     a,r3
0C4C 33        3127            rlc     a
0C4D 95E0      3128            subb    a,acc
0C4F A3        3129            inc     dptr
0C50 F0        3130            movx    @dptr,a
0C51 A3        3131            inc     dptr
0C52 F0        3132            movx    @dptr,a
0C53           3133   L028002?:
0C53           3134   ;        main.c:771: pwm_counter++; 
0C53 905408    3135            mov     dptr,#_pwm_counter
0C56 E0        3136            movx    a,@dptr
0C57 2401      3137            add     a,#0x01
0C59 F0        3138            movx    @dptr,a
0C5A A3        3139            inc     dptr
0C5B E0        3140            movx    a,@dptr
0C5C 3400      3141            addc    a,#0x00
0C5E F0        3142            movx    @dptr,a
0C5F           3143   ;        main.c:772: if (pwm_counter == 100){
0C5F 905408    3144            mov     dptr,#_pwm_counter
0C62 E0        3145            movx    a,@dptr
0C63 FA        3146            mov     r2,a
0C64 A3        3147            inc     dptr
0C65 E0        3148            movx    a,@dptr
0C66 FB        3149            mov     r3,a
0C67 BA6430    3150            cjne    r2,#0x64,L028004?
0C6A BB0030    3151            cjne    r3,#0x00,L028004?
0C6D           3152   ;        main.c:773: pwm_counter = 0; 
0C6D 905408    3153            mov     dptr,#_pwm_counter
0C70 E4        3154            clr     a
0C71 F0        3155            movx    @dptr,a
0C72 A3        3156            inc     dptr
0C73 F0        3157            movx    @dptr,a
0C74           3158   L028004?:
0C74           3159   ;        main.c:776: if (pwm_right > pwm_counter){
0C74 905348    3160            mov     dptr,#_pwm_right
0C77 E0        3161            movx    a,@dptr
0C78 FA        3162            mov     r2,a
0C79 905408    3163            mov     dptr,#_pwm_counter
0C7C E0        3164            movx    a,@dptr
0C7D FB        3165            mov     r3,a
0C7E A3        3166            inc     dptr
0C7F E0        3167            movx    a,@dptr
0C80 FC        3168            mov     r4,a
0C81 7D00      3169            mov     r5,#0x00
0C83 C3        3170            clr     c
0C84 EB        3171            mov     a,r3
0C85 9A        3172            subb    a,r2
0C86 EC        3173            mov     a,r4
0C87 9D        3174            subb    a,r5
0C88 5000      3175            jnc     L028009?
0C8A           3176   ;        main.c:777: if(L_motor_dir){
0C8A 905308    3177            mov     dptr,#_L_motor_dir
0C8D E0        3178            movx    a,@dptr
0C8E FA        3179            mov     r2,a
0C8F 6000      3180            jz      L028006?
0C91           3181   ;        main.c:778: L_bridge_1 = 1; 
0C91 D2A1      3182            setb    _P2_1
0C93           3183   ;        main.c:779: L_bridge_2 = 0; 
0C93 C2A2      3184            clr     _P2_2
0C95 8000      3185            sjmp    L028010?
0C97           3186   L028006?:
0C97           3187   ;        main.c:782: L_bridge_1 = 0; 
0C97 C2A1      3188            clr     _P2_1
0C99           3189   ;        main.c:783: L_bridge_2 = 1; 
0C99 D2A2      3190            setb    _P2_2
0C9B 8000      3191            sjmp    L028010?
0C9D           3192   L028009?:
0C9D           3193   ;        main.c:787: L_bridge_1 = 0; 
0C9D C2A1      3194            clr     _P2_1
0C9F           3195   ;        main.c:788: L_bridge_2 = 0; 
0C9F C2A2      3196            clr     _P2_2
0CA1           3197   L028010?:
0CA1           3198   ;        main.c:790: if (pwm_left > pwm_counter){
0CA1 905388    3199            mov     dptr,#_pwm_left
0CA4 E0        3200            movx    a,@dptr
0CA5 FA        3201            mov     r2,a
0CA6 7D00      3202            mov     r5,#0x00
0CA8 C3        3203            clr     c
0CA9 EB        3204            mov     a,r3
0CAA 9A        3205            subb    a,r2
0CAB EC        3206            mov     a,r4
0CAC 9D        3207            subb    a,r5
0CAD 5000      3208            jnc     L028015?
0CAF           3209   ;        main.c:791: if (R_motor_dir){
0CAF 9052C8    3210            mov     dptr,#_R_motor_dir
0CB2 E0        3211            movx    a,@dptr
0CB3 FA        3212            mov     r2,a
0CB4 6000      3213            jz      L028012?
0CB6           3214   ;        main.c:792: R_bridge_1 = 1; 
0CB6 D2A4      3215            setb    _P2_4
0CB8           3216   ;        main.c:793: R_bridge_2 = 0;
0CB8 C2A3      3217            clr     _P2_3
0CBA 8000      3218            sjmp    L028016?
0CBC           3219   L028012?:
0CBC           3220   ;        main.c:796: R_bridge_1 = 0; 
0CBC C2A4      3221            clr     _P2_4
0CBE           3222   ;        main.c:797: R_bridge_2 = 1;
0CBE D2A3      3223            setb    _P2_3
0CC0 8000      3224            sjmp    L028016?
0CC2           3225   L028015?:
0CC2           3226   ;        main.c:801: R_bridge_1 = 0; 
0CC2 C2A4      3227            clr     _P2_4
0CC4           3228   ;        main.c:802: R_bridge_2 = 0; 
0CC4 C2A3      3229            clr     _P2_3
0CC6           3230   L028016?:
0CC6           3231   ;        main.c:805: servo_counter++;
0CC6 9053C8    3232            mov     dptr,#_servo_counter
0CC9 E0        3233            movx    a,@dptr
0CCA 2401      3234            add     a,#0x01
0CCC F0        3235            movx    @dptr,a
0CCD A3        3236            inc     dptr
0CCE E0        3237            movx    a,@dptr
0CCF 3400      3238            addc    a,#0x00
0CD1 F0        3239            movx    @dptr,a
0CD2           3240   ;        main.c:806: if(servo_counter==2000)
0CD2 9053C8    3241            mov     dptr,#_servo_counter
0CD5 E0        3242            movx    a,@dptr
0CD6 FA        3243            mov     r2,a
0CD7 A3        3244            inc     dptr
0CD8 E0        3245            movx    a,@dptr
0CD9 FB        3246            mov     r3,a
0CDA BAD0F0    3247            cjne    r2,#0xD0,L028018?
0CDD BB07F0    3248            cjne    r3,#0x07,L028018?
0CE0           3249   ;        main.c:808: servo_counter=0;
0CE0 9053C8    3250            mov     dptr,#_servo_counter
0CE3 E4        3251            clr     a
0CE4 F0        3252            movx    @dptr,a
0CE5 A3        3253            inc     dptr
0CE6 F0        3254            movx    @dptr,a
0CE7           3255   ;        main.c:809: Servo_arm=1;
0CE7 D296      3256            setb    _P1_6
0CE9           3257   ;        main.c:810: Servo_base=1;
0CE9 D297      3258            setb    _P1_7
0CEB           3259   L028018?:
0CEB           3260   ;        main.c:812: if(servo_arm==servo_counter)
0CEB 905248    3261            mov     dptr,#_servo_arm
0CEE E0        3262            movx    a,@dptr
0CEF FA        3263            mov     r2,a
0CF0 9053C8    3264            mov     dptr,#_servo_counter
0CF3 E0        3265            movx    a,@dptr
0CF4 FB        3266            mov     r3,a
0CF5 A3        3267            inc     dptr
0CF6 E0        3268            movx    a,@dptr
0CF7 FC        3269            mov     r4,a
0CF8 7D00      3270            mov     r5,#0x00
0CFA EA        3271            mov     a,r2
0CFB B50330    3272            cjne    a,ar3,L028020?
0CFE ED        3273            mov     a,r5
0CFF B50430    3274            cjne    a,ar4,L028020?
0D02           3275   ;        main.c:814: Servo_arm=0;
0D02 C296      3276            clr     _P1_6
0D04           3277   L028020?:
0D04           3278   ;        main.c:816: if(servo_base==servo_counter)
0D04 905288    3279            mov     dptr,#_servo_base
0D07 E0        3280            movx    a,@dptr
0D08 FA        3281            mov     r2,a
0D09 7D00      3282            mov     r5,#0x00
0D0B B50370    3283            cjne    a,ar3,L028023?
0D0E ED        3284            mov     a,r5
0D0F B50470    3285            cjne    a,ar4,L028023?
0D12           3286   ;        main.c:818: Servo_base=0;
0D12 C297      3287            clr     _P1_7
0D14           3288   L028023?:
0D14 D0D0      3289            pop     psw
0D16 D001      3290            pop     (0+1)
0D18 D000      3291            pop     (0+0)
0D1A D007      3292            pop     (0+7)
0D1C D006      3293            pop     (0+6)
0D1E D005      3294            pop     (0+5)
0D20 D004      3295            pop     (0+4)
0D22 D003      3296            pop     (0+3)
0D24 D002      3297            pop     (0+2)
0D26 D083      3298            pop     dph
0D28 D082      3299            pop     dpl
0D2A D0F0      3300            pop     b
0D2C D0E0      3301            pop     acc
0D2E D098      3302            pop     bits
0D30 32        3303            reti
0D31           3304   ;------------------------------------------------------------
0D31           3305   ;Allocation info for local variables in function 'servo_pick'
0D31           3306   ;------------------------------------------------------------
0D31           3307   ;i                         Allocated with name '_servo_pick_i_1_183'
0D31           3308   ;------------------------------------------------------------
0D31           3309   ;        main.c:822: void servo_pick(){
0D31           3310   ;        -----------------------------------------
0D31           3311   ;         function servo_pick
0D31           3312   ;        -----------------------------------------
0D31           3313   _servo_pick:
0D31           3314   ;        main.c:824: servo_arm = 1;
0D31 905248    3315            mov     dptr,#_servo_arm
0D34 7401      3316            mov     a,#0x01
0D36 F0        3317            movx    @dptr,a
0D37           3318   ;        main.c:826: servo_base = 250;
0D37 905288    3319            mov     dptr,#_servo_base
0D3A 74FA      3320            mov     a,#0xFA
0D3C F0        3321            movx    @dptr,a
0D3D           3322   ;        main.c:827: waitms(200);
0D3D 9000C8    3323            mov     dptr,#0x00C8
0D40 120000    3324            lcall   _waitms
0D43           3325   ;        main.c:828: servo_arm = 250;
0D43 905248    3326            mov     dptr,#_servo_arm
0D46 74FA      3327            mov     a,#0xFA
0D48 F0        3328            movx    @dptr,a
0D49           3329   ;        main.c:829: Magnet = 1;
0D49 D295      3330            setb    _P1_5
0D4B           3331   ;        main.c:830: waitms(200);
0D4B 9000C8    3332            mov     dptr,#0x00C8
0D4E 120000    3333            lcall   _waitms
0D51           3334   ;        main.c:831: for(i = 0; i<89; i++){
0D51 7A00      3335            mov     r2,#0x00
0D53 7B00      3336            mov     r3,#0x00
0D55           3337   L029001?:
0D55 C3        3338            clr     c
0D56 EA        3339            mov     a,r2
0D57 9459      3340            subb    a,#0x59
0D59 EB        3341            mov     a,r3
0D5A 6480      3342            xrl     a,#0x80
0D5C 9480      3343            subb    a,#0x80
0D5E 5000      3344            jnc     L029004?
0D60           3345   ;        main.c:832: waitms(5);
0D60 900005    3346            mov     dptr,#0x0005
0D63 C002      3347            push    ar2
0D65 C003      3348            push    ar3
0D67 120000    3349            lcall   _waitms
0D6A D003      3350            pop     ar3
0D6C D002      3351            pop     ar2
0D6E           3352   ;        main.c:833: servo_base--;
0D6E 905288    3353            mov     dptr,#_servo_base
0D71 E0        3354            movx    a,@dptr
0D72 14        3355            dec     a
0D73 905288    3356            mov     dptr,#_servo_base
0D76 F0        3357            movx    @dptr,a
0D77           3358   ;        main.c:831: for(i = 0; i<89; i++){
0D77 0A        3359            inc     r2
0D78 BA00B0    3360            cjne    r2,#0x00,L029001?
0D7B 0B        3361            inc     r3
0D7C 8000      3362            sjmp    L029001?
0D7E           3363   L029004?:
0D7E           3364   ;        main.c:835: waitms(200);
0D7E 9000C8    3365            mov     dptr,#0x00C8
0D81 120000    3366            lcall   _waitms
0D84           3367   ;        main.c:836: for(i = 0; i<159; i++){
0D84 7A00      3368            mov     r2,#0x00
0D86 7B00      3369            mov     r3,#0x00
0D88           3370   L029005?:
0D88 C3        3371            clr     c
0D89 EA        3372            mov     a,r2
0D8A 949F      3373            subb    a,#0x9F
0D8C EB        3374            mov     a,r3
0D8D 6480      3375            xrl     a,#0x80
0D8F 9480      3376            subb    a,#0x80
0D91 5000      3377            jnc     L029008?
0D93           3378   ;        main.c:837: waitms(5);
0D93 900005    3379            mov     dptr,#0x0005
0D96 C002      3380            push    ar2
0D98 C003      3381            push    ar3
0D9A 120000    3382            lcall   _waitms
0D9D D003      3383            pop     ar3
0D9F D002      3384            pop     ar2
0DA1           3385   ;        main.c:838: servo_arm--;
0DA1 905248    3386            mov     dptr,#_servo_arm
0DA4 E0        3387            movx    a,@dptr
0DA5 14        3388            dec     a
0DA6 905248    3389            mov     dptr,#_servo_arm
0DA9 F0        3390            movx    @dptr,a
0DAA           3391   ;        main.c:836: for(i = 0; i<159; i++){
0DAA 0A        3392            inc     r2
0DAB BA0030    3393            cjne    r2,#0x00,L029005?
0DAE 0B        3394            inc     r3
0DAF 8000      3395            sjmp    L029005?
0DB1           3396   L029008?:
0DB1           3397   ;        main.c:840: waitms(200);
0DB1 9000C8    3398            mov     dptr,#0x00C8
0DB4 120000    3399            lcall   _waitms
0DB7           3400   ;        main.c:841: for(i = 0; i<65; i++){
0DB7 7A00      3401            mov     r2,#0x00
0DB9 7B00      3402            mov     r3,#0x00
0DBB           3403   L029009?:
0DBB C3        3404            clr     c
0DBC EA        3405            mov     a,r2
0DBD 9441      3406            subb    a,#0x41
0DBF EB        3407            mov     a,r3
0DC0 6480      3408            xrl     a,#0x80
0DC2 9480      3409            subb    a,#0x80
0DC4 5000      3410            jnc     L029012?
0DC6           3411   ;        main.c:842: waitms(5);
0DC6 900005    3412            mov     dptr,#0x0005
0DC9 C002      3413            push    ar2
0DCB C003      3414            push    ar3
0DCD 120000    3415            lcall   _waitms
0DD0 D003      3416            pop     ar3
0DD2 D002      3417            pop     ar2
0DD4           3418   ;        main.c:843: servo_base--;
0DD4 905288    3419            mov     dptr,#_servo_base
0DD7 E0        3420            movx    a,@dptr
0DD8 14        3421            dec     a
0DD9 905288    3422            mov     dptr,#_servo_base
0DDC F0        3423            movx    @dptr,a
0DDD           3424   ;        main.c:841: for(i = 0; i<65; i++){
0DDD 0A        3425            inc     r2
0DDE BA00B0    3426            cjne    r2,#0x00,L029009?
0DE1 0B        3427            inc     r3
0DE2 8000      3428            sjmp    L029009?
0DE4           3429   L029012?:
0DE4           3430   ;        main.c:845: waitms(500);
0DE4 9001F4    3431            mov     dptr,#0x01F4
0DE7 120000    3432            lcall   _waitms
0DEA           3433   ;        main.c:846: Magnet = 0;
0DEA C295      3434            clr     _P1_5
0DEC           3435   ;        main.c:847: waitms(200);
0DEC 9000C8    3436            mov     dptr,#0x00C8
0DEF 120000    3437            lcall   _waitms
0DF2           3438   ;        main.c:848: servo_arm=1;
0DF2 905248    3439            mov     dptr,#_servo_arm
0DF5 7401      3440            mov     a,#0x01
0DF7 F0        3441            movx    @dptr,a
0DF8           3442   ;        main.c:849: servo_base=1;
0DF8 905288    3443            mov     dptr,#_servo_base
0DFB 7401      3444            mov     a,#0x01
0DFD F0        3445            movx    @dptr,a
0DFE           3446   ;        main.c:850: return;
0DFE 22        3447            ret
0DFF           3448   ;------------------------------------------------------------
0DFF           3449   ;Allocation info for local variables in function 'check_bound'
0DFF           3450   ;------------------------------------------------------------
0DFF           3451   ;d2                        Allocated with name '_check_bound_PARM_2'
0DFF           3452   ;d1                        Allocated to registers r2 r3 
0DFF           3453   ;------------------------------------------------------------
0DFF           3454   ;        main.c:853: int check_bound(int d1, int d2){
0DFF           3455   ;        -----------------------------------------
0DFF           3456   ;         function check_bound
0DFF           3457   ;        -----------------------------------------
0DFF           3458   _check_bound:
0DFF AA82      3459            mov     r2,dpl
0E01 AB83      3460            mov     r3,dph
0E03           3461   ;        main.c:854: if(d1>5000||d2>12000)       return 1;
0E03 C3        3462            clr     c
0E04 7488      3463            mov     a,#0x88
0E06 9A        3464            subb    a,r2
0E07 7493      3465            mov     a,#(0x13 ^ 0x80)
0E09 8BF0      3466            mov     b,r3
0E0B 63F080    3467            xrl     b,#0x80
0E0E 95F0      3468            subb    a,b
0E10 4000      3469            jc      L030001?
0E12 74E0      3470            mov     a,#0xE0
0E14 9560      3471            subb    a,_check_bound_PARM_2
0E16 74AE      3472            mov     a,#(0x2E ^ 0x80)
0E18 8561F0    3473            mov     b,(_check_bound_PARM_2 + 1)
0E1B 63F080    3474            xrl     b,#0x80
0E1E 95F0      3475            subb    a,b
0E20 5000      3476            jnc     L030002?
0E22           3477   L030001?:
0E22 900001    3478            mov     dptr,#0x0001
0E25           3479   ;        main.c:855: else return 0;
0E25 22        3480            ret
0E26           3481   L030002?:
0E26 900000    3482            mov     dptr,#0x0000
0E29 22        3483            ret
0E2A           3484   ;------------------------------------------------------------
0E2A           3485   ;Allocation info for local variables in function 'Init_all'
0E2A           3486   ;------------------------------------------------------------
0E2A           3487   ;------------------------------------------------------------
0E2A           3488   ;        main.c:858: void Init_all(){
0E2A           3489   ;        -----------------------------------------
0E2A           3490   ;         function Init_all
0E2A           3491   ;        -----------------------------------------
0E2A           3492   _Init_all:
0E2A           3493   ;        main.c:860: Set_Pin_Output(0x24);
0E2A 758224    3494            mov     dpl,#0x24
0E2D 120000    3495            lcall   _Set_Pin_Output
0E30           3496   ;        main.c:861: Set_Pin_Output(0x23);
0E30 758223    3497            mov     dpl,#0x23
0E33 120000    3498            lcall   _Set_Pin_Output
0E36           3499   ;        main.c:862: Set_Pin_Output(0x22);
0E36 758222    3500            mov     dpl,#0x22
0E39 120000    3501            lcall   _Set_Pin_Output
0E3C           3502   ;        main.c:863: Set_Pin_Output(0x21);
0E3C 758221    3503            mov     dpl,#0x21
0E3F 120000    3504            lcall   _Set_Pin_Output
0E42           3505   ;        main.c:864: Set_Pin_Output(0x17);
0E42 758217    3506            mov     dpl,#0x17
0E45 120000    3507            lcall   _Set_Pin_Output
0E48           3508   ;        main.c:865: Set_Pin_Output(0x16);
0E48 758216    3509            mov     dpl,#0x16
0E4B 120000    3510            lcall   _Set_Pin_Output
0E4E           3511   ;        main.c:866: Set_Pin_Output(0x15);
0E4E 758215    3512            mov     dpl,#0x15
0E51 120000    3513            lcall   _Set_Pin_Output
0E54           3514   ;        main.c:867: Set_Pin_Output(0x10); // CS
0E54 758210    3515            mov     dpl,#0x10
0E57 120000    3516            lcall   _Set_Pin_Output
0E5A           3517   ;        main.c:868: Set_Pin_Input(0x30);
0E5A 758230    3518            mov     dpl,#0x30
0E5D 120000    3519            lcall   _Set_Pin_Input
0E60           3520   ;        main.c:871: InitPinADC(1,3);
0E60 75B003    3521            mov     _InitPinADC_PARM_2,#0x03
0E63 758201    3522            mov     dpl,#0x01
0E66 120000    3523            lcall   _InitPinADC
0E69           3524   ;        main.c:872: InitPinADC(1,4);
0E69 75B004    3525            mov     _InitPinADC_PARM_2,#0x04
0E6C 758201    3526            mov     dpl,#0x01
0E6F 120000    3527            lcall   _InitPinADC
0E72           3528   ;        main.c:873: InitADC();
0E72 120000    3529            lcall   _InitADC
0E75           3530   ;        main.c:875: TMOD&=0b_1111_0000; 
0E75 5389F0    3531            anl     _TMOD,#0xF0
0E78           3532   ;        main.c:876: TMOD|=0b_0000_0001; 
0E78 438901    3533            orl     _TMOD,#0x01
0E7B           3534   ;        main.c:877: TR0=0; 
0E7B C28C      3535            clr     _TR0
0E7D           3536   ;        main.c:879: Servo_arm=0;
0E7D C296      3537            clr     _P1_6
0E7F           3538   ;        main.c:880: Servo_base=0;
0E7F C297      3539            clr     _P1_7
0E81           3540   ;        main.c:881: Magnet = 0;
0E81 C295      3541            clr     _P1_5
0E83           3542   ;        main.c:882: return;
0E83 22        3543            ret
0E84           3544   ;------------------------------------------------------------
0E84           3545   ;Allocation info for local variables in function 'Move_back_ms'
0E84           3546   ;------------------------------------------------------------
0E84           3547   ;ms                        Allocated to registers r2 r3 
0E84           3548   ;------------------------------------------------------------
0E84           3549   ;        main.c:885: void Move_back_ms(int ms){
0E84           3550   ;        -----------------------------------------
0E84           3551   ;         function Move_back_ms
0E84           3552   ;        -----------------------------------------
0E84           3553   _Move_back_ms:
0E84 AA82      3554            mov     r2,dpl
0E86 AB83      3555            mov     r3,dph
0E88           3556   ;        main.c:887: L_motor_dir = 1;
0E88 905308    3557            mov     dptr,#_L_motor_dir
0E8B 7401      3558            mov     a,#0x01
0E8D F0        3559            movx    @dptr,a
0E8E           3560   ;        main.c:888: R_motor_dir = 1;
0E8E 9052C8    3561            mov     dptr,#_R_motor_dir
0E91 7401      3562            mov     a,#0x01
0E93 F0        3563            movx    @dptr,a
0E94           3564   ;        main.c:890: pwm_left = 50;
0E94 905388    3565            mov     dptr,#_pwm_left
0E97 7432      3566            mov     a,#0x32
0E99 F0        3567            movx    @dptr,a
0E9A           3568   ;        main.c:891: pwm_right = 50;
0E9A 905348    3569            mov     dptr,#_pwm_right
0E9D 7432      3570            mov     a,#0x32
0E9F F0        3571            movx    @dptr,a
0EA0           3572   ;        main.c:893: waitms(ms);
0EA0 8A82      3573            mov     dpl,r2
0EA2 8B83      3574            mov     dph,r3
0EA4 120000    3575            lcall   _waitms
0EA7           3576   ;        main.c:895: L_motor_dir = 0;
0EA7 905308    3577            mov     dptr,#_L_motor_dir
0EAA           3578   ;        main.c:896: R_motor_dir = 0;
0EAA           3579   ;        main.c:897: pwm_left = 0;
0EAA           3580   ;        main.c:898: pwm_right = 0;
0EAA E4        3581            clr     a
0EAB F0        3582            movx    @dptr,a
0EAC 9052C8    3583            mov     dptr,#_R_motor_dir
0EAF F0        3584            movx    @dptr,a
0EB0 905388    3585            mov     dptr,#_pwm_left
0EB3 F0        3586            movx    @dptr,a
0EB4 905348    3587            mov     dptr,#_pwm_right
0EB7 F0        3588            movx    @dptr,a
0EB8           3589   ;        main.c:899: return;
0EB8 22        3590            ret
0EB9           3591   ;------------------------------------------------------------
0EB9           3592   ;Allocation info for local variables in function 'Right_angle'
0EB9           3593   ;------------------------------------------------------------
0EB9           3594   ;angle                     Allocated to registers r2 r3 
0EB9           3595   ;------------------------------------------------------------
0EB9           3596   ;        main.c:902: void Right_angle(int angle){
0EB9           3597   ;        -----------------------------------------
0EB9           3598   ;         function Right_angle
0EB9           3599   ;        -----------------------------------------
0EB9           3600   _Right_angle:
0EB9 AA82      3601            mov     r2,dpl
0EBB AB83      3602            mov     r3,dph
0EBD           3603   ;        main.c:904: L_motor_dir = 1;
0EBD 905308    3604            mov     dptr,#_L_motor_dir
0EC0 7401      3605            mov     a,#0x01
0EC2 F0        3606            movx    @dptr,a
0EC3           3607   ;        main.c:905: R_motor_dir = 0;
0EC3 9052C8    3608            mov     dptr,#_R_motor_dir
0EC6 E4        3609            clr     a
0EC7 F0        3610            movx    @dptr,a
0EC8           3611   ;        main.c:906: pwm_left = 80;
0EC8 905388    3612            mov     dptr,#_pwm_left
0ECB 7450      3613            mov     a,#0x50
0ECD F0        3614            movx    @dptr,a
0ECE           3615   ;        main.c:907: pwm_right = 80 * pwm_corr;
0ECE C002      3616            push    ar2
0ED0 C003      3617            push    ar3
0ED2 905088    3618            mov     dptr,#_pwm_corr
0ED5 E0        3619            movx    a,@dptr
0ED6 C0E0      3620            push    acc
0ED8 A3        3621            inc     dptr
0ED9 E0        3622            movx    a,@dptr
0EDA C0E0      3623            push    acc
0EDC A3        3624            inc     dptr
0EDD E0        3625            movx    a,@dptr
0EDE C0E0      3626            push    acc
0EE0 A3        3627            inc     dptr
0EE1 E0        3628            movx    a,@dptr
0EE2 C0E0      3629            push    acc
0EE4 900000    3630            mov     dptr,#0x0000
0EE7 75F0A0    3631            mov     b,#0xA0
0EEA 7442      3632            mov     a,#0x42
0EEC 120000    3633            lcall   ___fsmul
0EEF AC82      3634            mov     r4,dpl
0EF1 AD83      3635            mov     r5,dph
0EF3 AEF0      3636            mov     r6,b
0EF5 FF        3637            mov     r7,a
0EF6 E581      3638            mov     a,sp
0EF8 24FC      3639            add     a,#0xfc
0EFA F581      3640            mov     sp,a
0EFC 8C82      3641            mov     dpl,r4
0EFE 8D83      3642            mov     dph,r5
0F00 8EF0      3643            mov     b,r6
0F02 EF        3644            mov     a,r7
0F03 120000    3645            lcall   ___fs2uchar
0F06 E582      3646            mov     a,dpl
0F08 D003      3647            pop     ar3
0F0A D002      3648            pop     ar2
0F0C 905348    3649            mov     dptr,#_pwm_right
0F0F F0        3650            movx    @dptr,a
0F10           3651   ;        main.c:909: waitms(angle);
0F10 8A82      3652            mov     dpl,r2
0F12 8B83      3653            mov     dph,r3
0F14 120000    3654            lcall   _waitms
0F17           3655   ;        main.c:911: L_motor_dir = 0;
0F17 905308    3656            mov     dptr,#_L_motor_dir
0F1A           3657   ;        main.c:912: R_motor_dir = 0;
0F1A           3658   ;        main.c:913: pwm_left = 0;
0F1A           3659   ;        main.c:914: pwm_right = 0;
0F1A E4        3660            clr     a
0F1B F0        3661            movx    @dptr,a
0F1C 9052C8    3662            mov     dptr,#_R_motor_dir
0F1F F0        3663            movx    @dptr,a
0F20 905388    3664            mov     dptr,#_pwm_left
0F23 F0        3665            movx    @dptr,a
0F24 905348    3666            mov     dptr,#_pwm_right
0F27 F0        3667            movx    @dptr,a
0F28           3668   ;        main.c:915: return;
0F28 22        3669            ret
0F29           3670   ;------------------------------------------------------------
0F29           3671   ;Allocation info for local variables in function 'Move_forward'
0F29           3672   ;------------------------------------------------------------
0F29           3673   ;------------------------------------------------------------
0F29           3674   ;        main.c:918: void Move_forward(){
0F29           3675   ;        -----------------------------------------
0F29           3676   ;         function Move_forward
0F29           3677   ;        -----------------------------------------
0F29           3678   _Move_forward:
0F29           3679   ;        main.c:920: L_motor_dir = 0;
0F29 905308    3680            mov     dptr,#_L_motor_dir
0F2C           3681   ;        main.c:921: R_motor_dir = 0;
0F2C E4        3682            clr     a
0F2D F0        3683            movx    @dptr,a
0F2E 9052C8    3684            mov     dptr,#_R_motor_dir
0F31 F0        3685            movx    @dptr,a
0F32           3686   ;        main.c:922: pwm_left = 90;
0F32 905388    3687            mov     dptr,#_pwm_left
0F35 745A      3688            mov     a,#0x5A
0F37 F0        3689            movx    @dptr,a
0F38           3690   ;        main.c:923: pwm_right = 90 * pwm_corr;
0F38 905088    3691            mov     dptr,#_pwm_corr
0F3B E0        3692            movx    a,@dptr
0F3C C0E0      3693            push    acc
0F3E A3        3694            inc     dptr
0F3F E0        3695            movx    a,@dptr
0F40 C0E0      3696            push    acc
0F42 A3        3697            inc     dptr
0F43 E0        3698            movx    a,@dptr
0F44 C0E0      3699            push    acc
0F46 A3        3700            inc     dptr
0F47 E0        3701            movx    a,@dptr
0F48 C0E0      3702            push    acc
0F4A 900000    3703            mov     dptr,#0x0000
0F4D 75F0B4    3704            mov     b,#0xB4
0F50 7442      3705            mov     a,#0x42
0F52 120000    3706            lcall   ___fsmul
0F55 AA82      3707            mov     r2,dpl
0F57 AB83      3708            mov     r3,dph
0F59 ACF0      3709            mov     r4,b
0F5B FD        3710            mov     r5,a
0F5C E581      3711            mov     a,sp
0F5E 24FC      3712            add     a,#0xfc
0F60 F581      3713            mov     sp,a
0F62 8A82      3714            mov     dpl,r2
0F64 8B83      3715            mov     dph,r3
0F66 8CF0      3716            mov     b,r4
0F68 ED        3717            mov     a,r5
0F69 120000    3718            lcall   ___fs2uchar
0F6C E582      3719            mov     a,dpl
0F6E 905348    3720            mov     dptr,#_pwm_right
0F71 F0        3721            movx    @dptr,a
0F72           3722   ;        main.c:924: return;
0F72 22        3723            ret
0F73           3724   ;------------------------------------------------------------
0F73           3725   ;Allocation info for local variables in function 'simple_rand'
0F73           3726   ;------------------------------------------------------------
0F73           3727   ;------------------------------------------------------------
0F73           3728   ;        main.c:927: unsigned int simple_rand() {
0F73           3729   ;        -----------------------------------------
0F73           3730   ;         function simple_rand
0F73           3731   ;        -----------------------------------------
0F73           3732   _simple_rand:
0F73           3733   ;        main.c:928: seed = (seed * 25173 + 13849) & 0xFFFF;  
0F73 9050C8    3734            mov     dptr,#_seed
0F76 E0        3735            movx    a,@dptr
0F77 F500      3736            mov     __mulint_PARM_2,a
0F79 A3        3737            inc     dptr
0F7A E0        3738            movx    a,@dptr
0F7B F501      3739            mov     (__mulint_PARM_2 + 1),a
0F7D 906255    3740            mov     dptr,#0x6255
0F80 120000    3741            lcall   __mulint
0F83 E582      3742            mov     a,dpl
0F85 8583F0    3743            mov     b,dph
0F88 9050C8    3744            mov     dptr,#_seed
0F8B 2419      3745            add     a,#0x19
0F8D F0        3746            movx    @dptr,a
0F8E 7436      3747            mov     a,#0x36
0F90 35F0      3748            addc    a,b
0F92 A3        3749            inc     dptr
0F93 F0        3750            movx    @dptr,a
0F94           3751   ;        main.c:929: return seed;     
0F94 9050C8    3752            mov     dptr,#_seed
0F97 E0        3753            movx    a,@dptr
0F98 FA        3754            mov     r2,a
0F99 A3        3755            inc     dptr
0F9A E0        3756            movx    a,@dptr
0F9B 8A82      3757            mov     dpl,r2
0F9D F583      3758            mov     dph,a
0F9F 22        3759            ret
0FA0           3760   ;------------------------------------------------------------
0FA0           3761   ;Allocation info for local variables in function 'get_random_90_250'
0FA0           3762   ;------------------------------------------------------------
0FA0           3763   ;------------------------------------------------------------
0FA0           3764   ;        main.c:932: unsigned int get_random_90_250() {
0FA0           3765   ;        -----------------------------------------
0FA0           3766   ;         function get_random_90_250
0FA0           3767   ;        -----------------------------------------
0FA0           3768   _get_random_90_250:
0FA0           3769   ;        main.c:933: return (simple_rand() % (250 - 85 + 1)) + 85;
0FA0 120000    3770            lcall   _simple_rand
0FA3 7500A6    3771            mov     __moduint_PARM_2,#0xA6
0FA6 E4        3772            clr     a
0FA7 F501      3773            mov     (__moduint_PARM_2 + 1),a
0FA9 120000    3774            lcall   __moduint
0FAC E582      3775            mov     a,dpl
0FAE 8583F0    3776            mov     b,dph
0FB1 2455      3777            add     a,#0x55
0FB3 F582      3778            mov     dpl,a
0FB5 E4        3779            clr     a
0FB6 35F0      3780            addc    a,b
0FB8 F583      3781            mov     dph,a
0FBA 22        3782            ret
0FBB           3783   ;------------------------------------------------------------
0FBB           3784   ;Allocation info for local variables in function 'Auto_mode_slave'
0FBB           3785   ;------------------------------------------------------------
0FBB           3786   ;sloc0                     Allocated with name '_Auto_mode_slave_sloc0_1_0'
0FBB           3787   ;count                     Allocated with name '_Auto_mode_slave_count_1_197'
0FBB           3788   ;command                   Allocated with name '_Auto_mode_slave_command_1_197'
0FBB           3789   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_197'
0FBB           3790   ;bound                     Allocated with name '_Auto_mode_slave_bound_1_197'
0FBB           3791   ;c                         Allocated with name '_Auto_mode_slave_c_1_197'
0FBB           3792   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_197'
0FBB           3793   ;angle                     Allocated with name '_Auto_mode_slave_angle_1_197'
0FBB           3794   ;------------------------------------------------------------
0FBB           3795   ;        main.c:936: void Auto_mode_slave(){
0FBB           3796   ;        -----------------------------------------
0FBB           3797   ;         function Auto_mode_slave
0FBB           3798   ;        -----------------------------------------
0FBB           3799   _Auto_mode_slave:
0FBB           3800   ;        main.c:939: xdata int state_res = 1;
0FBB 90D170    3801            mov     dptr,#_Auto_mode_slave_state_res_1_197
0FBE 7401      3802            mov     a,#0x01
0FC0 F0        3803            movx    @dptr,a
0FC1 E4        3804            clr     a
0FC2 A3        3805            inc     dptr
0FC3 F0        3806            movx    @dptr,a
0FC4           3807   ;        main.c:945: while(count < 20 && state_res){
0FC4 E4        3808            clr     a
0FC5 F598      3809            mov     _Auto_mode_slave_sloc0_1_0,a
0FC7 F599      3810            mov     (_Auto_mode_slave_sloc0_1_0 + 1),a
0FC9           3811   L037018?:
0FC9 C3        3812            clr     c
0FCA E598      3813            mov     a,_Auto_mode_slave_sloc0_1_0
0FCC 9414      3814            subb    a,#0x14
0FCE E599      3815            mov     a,(_Auto_mode_slave_sloc0_1_0 + 1)
0FD0 6480      3816            xrl     a,#0x80
0FD2 9480      3817            subb    a,#0x80
0FD4 4000      3818            jc      L037034?
0FD6 020000    3819            ljmp    L037020?
0FD9           3820   L037034?:
0FD9 90D170    3821            mov     dptr,#_Auto_mode_slave_state_res_1_197
0FDC E0        3822            movx    a,@dptr
0FDD FC        3823            mov     r4,a
0FDE A3        3824            inc     dptr
0FDF E0        3825            movx    a,@dptr
0FE0 FD        3826            mov     r5,a
0FE1 4C        3827            orl     a,r4
0FE2 7000      3828            jnz     L037035?
0FE4 020000    3829            ljmp    L037020?
0FE7           3830   L037035?:
0FE7           3831   ;        main.c:947: if(RXU1()){
0FE7 C004      3832            push    ar4
0FE9 C005      3833            push    ar5
0FEB 120000    3834            lcall   _RXU1
0FEE D005      3835            pop     ar5
0FF0 D004      3836            pop     ar4
0FF2 4000      3837            jc      L037036?
0FF4 020000    3838            ljmp    L037012?
0FF7           3839   L037036?:
0FF7           3840   ;        main.c:948: c=getchar1();       
0FF7 C004      3841            push    ar4
0FF9 C005      3842            push    ar5
0FFB 120000    3843            lcall   _getchar1
0FFE AE82      3844            mov     r6,dpl
1000 D005      3845            pop     ar5
1002 D004      3846            pop     ar4
1004           3847   ;        main.c:949: if(c=='!'){
1004 BE21C0    3848            cjne    r6,#0x21,L037037?
1007 8000      3849            sjmp    L037038?
1009           3850   L037037?:
1009 020000    3851            ljmp    L037009?
100C           3852   L037038?:
100C           3853   ;        main.c:950: getstr1(buff, sizeof(buff)-1);
100C 755813    3854            mov     _getstr1_PARM_2,#0x13
100F 9057C8    3855            mov     dptr,#_buff
1012 75F040    3856            mov     b,#0x40
1015 120000    3857            lcall   _getstr1
1018           3858   ;        main.c:951: if(strlen(buff)==11){
1018 9057C8    3859            mov     dptr,#_buff
101B 75F040    3860            mov     b,#0x40
101E 120000    3861            lcall   _strlen
1021 AF82      3862            mov     r7,dpl
1023 AA83      3863            mov     r2,dph
1025 BF0BC0    3864            cjne    r7,#0x0B,L037039?
1028 BA00C0    3865            cjne    r2,#0x00,L037039?
102B 8000      3866            sjmp    L037040?
102D           3867   L037039?:
102D 020000    3868            ljmp    L037012?
1030           3869   L037040?:
1030           3870   ;        main.c:953: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
1030 7410      3871            mov     a,#_Auto_mode_slave_command_1_197
1032 C0E0      3872            push    acc
1034 74D1      3873            mov     a,#(_Auto_mode_slave_command_1_197 >> 8)
1036 C0E0      3874            push    acc
1038 E4        3875            clr     a
1039 C0E0      3876            push    acc
103B 74C0      3877            mov     a,#_Auto_mode_slave_dummy_1_197
103D C0E0      3878            push    acc
103F 74D1      3879            mov     a,#(_Auto_mode_slave_dummy_1_197 >> 8)
1041 C0E0      3880            push    acc
1043 E4        3881            clr     a
1044 C0E0      3882            push    acc
1046 74C0      3883            mov     a,#_Auto_mode_slave_dummy_1_197
1048 C0E0      3884            push    acc
104A 74D1      3885            mov     a,#(_Auto_mode_slave_dummy_1_197 >> 8)
104C C0E0      3886            push    acc
104E E4        3887            clr     a
104F C0E0      3888            push    acc
1051 74C0      3889            mov     a,#_Auto_mode_slave_dummy_1_197
1053 C0E0      3890            push    acc
1055 74D1      3891            mov     a,#(_Auto_mode_slave_dummy_1_197 >> 8)
1057 C0E0      3892            push    acc
1059 E4        3893            clr     a
105A C0E0      3894            push    acc
105C 7440      3895            mov     a,#__str_7
105E C0E0      3896            push    acc
1060 740A      3897            mov     a,#(__str_7 >> 8)
1062 C0E0      3898            push    acc
1064 7480      3899            mov     a,#0x80
1066 C0E0      3900            push    acc
1068 74C8      3901            mov     a,#_buff
106A C0E0      3902            push    acc
106C 7457      3903            mov     a,#(_buff >> 8)
106E C0E0      3904            push    acc
1070 7440      3905            mov     a,#0x40
1072 C0E0      3906            push    acc
1074 120000    3907            lcall   _sscanf
1077 E581      3908            mov     a,sp
1079 24EE      3909            add     a,#0xee
107B F581      3910            mov     sp,a
107D           3911   ;        main.c:954: if(command) state_res = 1;
107D 90D110    3912            mov     dptr,#_Auto_mode_slave_command_1_197
1080 E0        3913            movx    a,@dptr
1081 FF        3914            mov     r7,a
1082 A3        3915            inc     dptr
1083 E0        3916            movx    a,@dptr
1084 FA        3917            mov     r2,a
1085 4F        3918            orl     a,r7
1086 6000      3919            jz      L037002?
1088 90D170    3920            mov     dptr,#_Auto_mode_slave_state_res_1_197
108B 7401      3921            mov     a,#0x01
108D F0        3922            movx    @dptr,a
108E E4        3923            clr     a
108F A3        3924            inc     dptr
1090 F0        3925            movx    @dptr,a
1091 8000      3926            sjmp    L037012?
1093           3927   L037002?:
1093           3928   ;        main.c:955: else state_res = 0;
1093 90D170    3929            mov     dptr,#_Auto_mode_slave_state_res_1_197
1096 E4        3930            clr     a
1097 F0        3931            movx    @dptr,a
1098 A3        3932            inc     dptr
1099 F0        3933            movx    @dptr,a
109A 8000      3934            sjmp    L037012?
109C           3935   L037009?:
109C           3936   ;        main.c:961: else if(c=='@'){
109C BE4080    3937            cjne    r6,#0x40,L037012?
109F           3938   ;        main.c:962: sprintf(buff, "%01d,%02d,%ld\n", state_res, count,freq100);
109F 905788    3939            mov     dptr,#_freq100
10A2 E0        3940            movx    a,@dptr
10A3 C0E0      3941            push    acc
10A5 A3        3942            inc     dptr
10A6 E0        3943            movx    a,@dptr
10A7 C0E0      3944            push    acc
10A9 A3        3945            inc     dptr
10AA E0        3946            movx    a,@dptr
10AB C0E0      3947            push    acc
10AD A3        3948            inc     dptr
10AE E0        3949            movx    a,@dptr
10AF C0E0      3950            push    acc
10B1 C098      3951            push    _Auto_mode_slave_sloc0_1_0
10B3 C099      3952            push    (_Auto_mode_slave_sloc0_1_0 + 1)
10B5 C004      3953            push    ar4
10B7 C005      3954            push    ar5
10B9 7400      3955            mov     a,#__str_8
10BB C0E0      3956            push    acc
10BD 740B      3957            mov     a,#(__str_8 >> 8)
10BF C0E0      3958            push    acc
10C1 7480      3959            mov     a,#0x80
10C3 C0E0      3960            push    acc
10C5 74C8      3961            mov     a,#_buff
10C7 C0E0      3962            push    acc
10C9 7457      3963            mov     a,#(_buff >> 8)
10CB C0E0      3964            push    acc
10CD 7440      3965            mov     a,#0x40
10CF C0E0      3966            push    acc
10D1 120000    3967            lcall   _sprintf
10D4 E581      3968            mov     a,sp
10D6 24F2      3969            add     a,#0xf2
10D8 F581      3970            mov     sp,a
10DA           3971   ;        main.c:963: waitms(5); 
10DA 900005    3972            mov     dptr,#0x0005
10DD 120000    3973            lcall   _waitms
10E0           3974   ;        main.c:964: sendstr1(buff);
10E0 9057C8    3975            mov     dptr,#_buff
10E3 75F040    3976            mov     b,#0x40
10E6 120000    3977            lcall   _sendstr1
10E9           3978   L037012?:
10E9           3979   ;        main.c:969: Move_forward();
10E9 120000    3980            lcall   _Move_forward
10EC           3981   ;        main.c:971: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
10EC 758209    3982            mov     dpl,#0x09
10EF 120000    3983            lcall   _ADC_at_Pin
10F2 E582      3984            mov     a,dpl
10F4 8583F0    3985            mov     b,dph
10F7 905748    3986            mov     dptr,#_d1
10FA F0        3987            movx    @dptr,a
10FB A3        3988            inc     dptr
10FC E5F0      3989            mov     a,b
10FE F0        3990            movx    @dptr,a
10FF           3991   ;        main.c:972: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
10FF 75820A    3992            mov     dpl,#0x0A
1102 120000    3993            lcall   _ADC_at_Pin
1105 AA82      3994            mov     r2,dpl
1107 AB83      3995            mov     r3,dph
1109 905708    3996            mov     dptr,#_d2
110C EA        3997            mov     a,r2
110D F0        3998            movx    @dptr,a
110E A3        3999            inc     dptr
110F EB        4000            mov     a,r3
1110 F0        4001            movx    @dptr,a
1111           4002   ;        main.c:973: bound = check_bound(d1,d2);
1111 905748    4003            mov     dptr,#_d1
1114 E0        4004            movx    a,@dptr
1115 FC        4005            mov     r4,a
1116 A3        4006            inc     dptr
1117 E0        4007            movx    a,@dptr
1118 FD        4008            mov     r5,a
1119 8A60      4009            mov     _check_bound_PARM_2,r2
111B 8B61      4010            mov     (_check_bound_PARM_2 + 1),r3
111D 8C82      4011            mov     dpl,r4
111F 8D83      4012            mov     dph,r5
1121 120000    4013            lcall   _check_bound
1124 AA82      4014            mov     r2,dpl
1126 AB83      4015            mov     r3,dph
1128           4016   ;        main.c:974: printf("f:%04ld, d1:%d, d2:%d, bound_dectect: %d\r\n",freq100, d1,d2,bound);
1128 C002      4017            push    ar2
112A C003      4018            push    ar3
112C C002      4019            push    ar2
112E C003      4020            push    ar3
1130 905708    4021            mov     dptr,#_d2
1133 E0        4022            movx    a,@dptr
1134 C0E0      4023            push    acc
1136 A3        4024            inc     dptr
1137 E0        4025            movx    a,@dptr
1138 C0E0      4026            push    acc
113A 905748    4027            mov     dptr,#_d1
113D E0        4028            movx    a,@dptr
113E C0E0      4029            push    acc
1140 A3        4030            inc     dptr
1141 E0        4031            movx    a,@dptr
1142 C0E0      4032            push    acc
1144 905788    4033            mov     dptr,#_freq100
1147 E0        4034            movx    a,@dptr
1148 C0E0      4035            push    acc
114A A3        4036            inc     dptr
114B E0        4037            movx    a,@dptr
114C C0E0      4038            push    acc
114E A3        4039            inc     dptr
114F E0        4040            movx    a,@dptr
1150 C0E0      4041            push    acc
1152 A3        4042            inc     dptr
1153 E0        4043            movx    a,@dptr
1154 C0E0      4044            push    acc
1156 7480      4045            mov     a,#__str_9
1158 C0E0      4046            push    acc
115A 740B      4047            mov     a,#(__str_9 >> 8)
115C C0E0      4048            push    acc
115E 7480      4049            mov     a,#0x80
1160 C0E0      4050            push    acc
1162 120000    4051            lcall   _printf
1165 E581      4052            mov     a,sp
1167 24F3      4053            add     a,#0xf3
1169 F581      4054            mov     sp,a
116B D003      4055            pop     ar3
116D D002      4056            pop     ar2
116F           4057   ;        main.c:976: if (freq100>5400){
116F 905788    4058            mov     dptr,#_freq100
1172 E0        4059            movx    a,@dptr
1173 FC        4060            mov     r4,a
1174 A3        4061            inc     dptr
1175 E0        4062            movx    a,@dptr
1176 FD        4063            mov     r5,a
1177 A3        4064            inc     dptr
1178 E0        4065            movx    a,@dptr
1179 FE        4066            mov     r6,a
117A A3        4067            inc     dptr
117B E0        4068            movx    a,@dptr
117C FF        4069            mov     r7,a
117D C3        4070            clr     c
117E 7418      4071            mov     a,#0x18
1180 9C        4072            subb    a,r4
1181 7415      4073            mov     a,#0x15
1183 9D        4074            subb    a,r5
1184 E4        4075            clr     a
1185 9E        4076            subb    a,r6
1186 E4        4077            clr     a
1187 6480      4078            xrl     a,#0x80
1189 8FF0      4079            mov     b,r7
118B 63F080    4080            xrl     b,#0x80
118E 95F0      4081            subb    a,b
1190 5000      4082            jnc     L037014?
1192           4083   ;        main.c:977: Move_back_ms(300);
1192 90012C    4084            mov     dptr,#0x012C
1195 C002      4085            push    ar2
1197 C003      4086            push    ar3
1199 120000    4087            lcall   _Move_back_ms
119C           4088   ;        main.c:978: servo_pick();
119C 120000    4089            lcall   _servo_pick
119F D003      4090            pop     ar3
11A1 D002      4091            pop     ar2
11A3           4092   ;        main.c:979: count++;
11A3 0598      4093            inc     _Auto_mode_slave_sloc0_1_0
11A5 E4        4094            clr     a
11A6 B59800    4095            cjne    a,_Auto_mode_slave_sloc0_1_0,L037045?
11A9 0599      4096            inc     (_Auto_mode_slave_sloc0_1_0 + 1)
11AB           4097   L037045?:
11AB           4098   ;        main.c:980: Move_forward();
11AB C002      4099            push    ar2
11AD C003      4100            push    ar3
11AF 120000    4101            lcall   _Move_forward
11B2 D003      4102            pop     ar3
11B4 D002      4103            pop     ar2
11B6           4104   L037014?:
11B6           4105   ;        main.c:983: if(bound == 1){
11B6 BA0140    4106            cjne    r2,#0x01,L037046?
11B9 BB0040    4107            cjne    r3,#0x00,L037046?
11BC 8000      4108            sjmp    L037047?
11BE           4109   L037046?:
11BE 020000    4110            ljmp    L037018?
11C1           4111   L037047?:
11C1           4112   ;        main.c:984: angle = get_random_90_250();
11C1 120000    4113            lcall   _get_random_90_250
11C4 AA82      4114            mov     r2,dpl
11C6 AB83      4115            mov     r3,dph
11C8           4116   ;        main.c:985: Right_angle(angle*600/90);
11C8 8A00      4117            mov     __mulint_PARM_2,r2
11CA 8B01      4118            mov     (__mulint_PARM_2 + 1),r3
11CC 900258    4119            mov     dptr,#0x0258
11CF C002      4120            push    ar2
11D1 C003      4121            push    ar3
11D3 120000    4122            lcall   __mulint
11D6 AC82      4123            mov     r4,dpl
11D8 AD83      4124            mov     r5,dph
11DA 75005A    4125            mov     __divuint_PARM_2,#0x5A
11DD E4        4126            clr     a
11DE F501      4127            mov     (__divuint_PARM_2 + 1),a
11E0 8C82      4128            mov     dpl,r4
11E2 8D83      4129            mov     dph,r5
11E4 120000    4130            lcall   __divuint
11E7 120000    4131            lcall   _Right_angle
11EA           4132   ;        main.c:986: printf("Turn!!! %d\r\n", angle);
11EA 7450      4133            mov     a,#__str_10
11EC C0E0      4134            push    acc
11EE 740D      4135            mov     a,#(__str_10 >> 8)
11F0 C0E0      4136            push    acc
11F2 7480      4137            mov     a,#0x80
11F4 C0E0      4138            push    acc
11F6 120000    4139            lcall   _printf
11F9 E581      4140            mov     a,sp
11FB 24FB      4141            add     a,#0xfb
11FD F581      4142            mov     sp,a
11FF 020000    4143            ljmp    L037018?
1202           4144   L037020?:
1202           4145   ;        main.c:990: printf("Auto mode finished!\r\n");
1202 7490      4146            mov     a,#__str_11
1204 C0E0      4147            push    acc
1206 740D      4148            mov     a,#(__str_11 >> 8)
1208 C0E0      4149            push    acc
120A 7480      4150            mov     a,#0x80
120C C0E0      4151            push    acc
120E 120000    4152            lcall   _printf
1211 1581      4153            dec     sp
1213 1581      4154            dec     sp
1215 1581      4155            dec     sp
1217 22        4156            ret
1218           4157   ;------------------------------------------------------------
1218           4158   ;Allocation info for local variables in function 'Read_angle'
1218           4159   ;------------------------------------------------------------
1218           4160   ;sloc0                     Allocated with name '_Read_angle_sloc0_1_0'
1218           4161   ;i                         Allocated with name '_Read_angle_i_1_206'
1218           4162   ;mag_x                     Allocated with name '_Read_angle_mag_x_1_206'
1218           4163   ;mag_y                     Allocated with name '_Read_angle_mag_y_1_206'
1218           4164   ;sum_x                     Allocated with name '_Read_angle_sum_x_1_206'
1218           4165   ;sum_y                     Allocated with name '_Read_angle_sum_y_1_206'
1218           4166   ;alpha                     Allocated with name '_Read_angle_alpha_1_206'
1218           4167   ;angle                     Allocated with name '_Read_angle_angle_1_206'
1218           4168   ;smoothed_angle            Allocated with name '_Read_angle_smoothed_angle_1_206'
1218           4169   ;------------------------------------------------------------
1218           4170   ;        main.c:993: float Read_angle(void)
1218           4171   ;        -----------------------------------------
1218           4172   ;         function Read_angle
1218           4173   ;        -----------------------------------------
1218           4174   _Read_angle:
1218           4175   ;        main.c:1000: sum_x = 0.0; sum_y = 0.0; alpha = 0.25; 
1218 90D2B0    4176            mov     dptr,#_Read_angle_sum_x_1_206
121B E4        4177            clr     a
121C F0        4178            movx    @dptr,a
121D A3        4179            inc     dptr
121E F0        4180            movx    @dptr,a
121F A3        4181            inc     dptr
1220 F0        4182            movx    @dptr,a
1221 A3        4183            inc     dptr
1222 F0        4184            movx    @dptr,a
1223 90D300    4185            mov     dptr,#_Read_angle_sum_y_1_206
1226 F0        4186            movx    @dptr,a
1227 A3        4187            inc     dptr
1228 E4        4188            clr     a
1229 F0        4189            movx    @dptr,a
122A A3        4190            inc     dptr
122B F0        4191            movx    @dptr,a
122C A3        4192            inc     dptr
122D F0        4193            movx    @dptr,a
122E           4194   ;        main.c:1003: for (i = 0; i < 25; i++){
122E 7A00      4195            mov     r2,#0x00
1230           4196   L038005?:
1230 BA1910    4197            cjne    r2,#0x19,L038016?
1233           4198   L038016?:
1233 4000      4199            jc      L038017?
1235 020000    4200            ljmp    L038008?
1238           4201   L038017?:
1238           4202   ;        main.c:1004: BMM150_Read_Data(&mag_x, &mag_y);
1238 75A860    4203            mov     _BMM150_Read_Data_PARM_2,#_Read_angle_mag_y_1_206
123B 75A9D2    4204            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_Read_angle_mag_y_1_206 >> 8)
123E 75AA00    4205            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
1241 90D210    4206            mov     dptr,#_Read_angle_mag_x_1_206
1244 75F000    4207            mov     b,#0x00
1247 C002      4208            push    ar2
1249 120000    4209            lcall   _BMM150_Read_Data
124C           4210   ;        main.c:1005: sum_x += (float)mag_x; 
124C 90D210    4211            mov     dptr,#_Read_angle_mag_x_1_206
124F E0        4212            movx    a,@dptr
1250 FB        4213            mov     r3,a
1251 A3        4214            inc     dptr
1252 E0        4215            movx    a,@dptr
1253 FC        4216            mov     r4,a
1254 8B82      4217            mov     dpl,r3
1256 8C83      4218            mov     dph,r4
1258 120000    4219            lcall   ___sint2fs
125B 8582E8    4220            mov     _Read_angle_sloc0_1_0,dpl
125E 8583E9    4221            mov     (_Read_angle_sloc0_1_0 + 1),dph
1261 85F0EA    4222            mov     (_Read_angle_sloc0_1_0 + 2),b
1264 F5EB      4223            mov     (_Read_angle_sloc0_1_0 + 3),a
1266 90D2B0    4224            mov     dptr,#_Read_angle_sum_x_1_206
1269 E0        4225            movx    a,@dptr
126A FF        4226            mov     r7,a
126B A3        4227            inc     dptr
126C E0        4228            movx    a,@dptr
126D F8        4229            mov     r0,a
126E A3        4230            inc     dptr
126F E0        4231            movx    a,@dptr
1270 F9        4232            mov     r1,a
1271 A3        4233            inc     dptr
1272 E0        4234            movx    a,@dptr
1273 FB        4235            mov     r3,a
1274 C0E8      4236            push    _Read_angle_sloc0_1_0
1276 C0E9      4237            push    (_Read_angle_sloc0_1_0 + 1)
1278 C0EA      4238            push    (_Read_angle_sloc0_1_0 + 2)
127A C0EB      4239            push    (_Read_angle_sloc0_1_0 + 3)
127C 8F82      4240            mov     dpl,r7
127E 8883      4241            mov     dph,r0
1280 89F0      4242            mov     b,r1
1282 EB        4243            mov     a,r3
1283 120000    4244            lcall   ___fsadd
1286 AB82      4245            mov     r3,dpl
1288 AC83      4246            mov     r4,dph
128A ADF0      4247            mov     r5,b
128C FE        4248            mov     r6,a
128D E581      4249            mov     a,sp
128F 24FC      4250            add     a,#0xfc
1291 F581      4251            mov     sp,a
1293 90D2B0    4252            mov     dptr,#_Read_angle_sum_x_1_206
1296 EB        4253            mov     a,r3
1297 F0        4254            movx    @dptr,a
1298 A3        4255            inc     dptr
1299 EC        4256            mov     a,r4
129A F0        4257            movx    @dptr,a
129B A3        4258            inc     dptr
129C ED        4259            mov     a,r5
129D F0        4260            movx    @dptr,a
129E A3        4261            inc     dptr
129F EE        4262            mov     a,r6
12A0 F0        4263            movx    @dptr,a
12A1           4264   ;        main.c:1006: sum_y += (float)mag_y; 
12A1 90D260    4265            mov     dptr,#_Read_angle_mag_y_1_206
12A4 E0        4266            movx    a,@dptr
12A5 FB        4267            mov     r3,a
12A6 A3        4268            inc     dptr
12A7 E0        4269            movx    a,@dptr
12A8 FC        4270            mov     r4,a
12A9 8B82      4271            mov     dpl,r3
12AB 8C83      4272            mov     dph,r4
12AD 120000    4273            lcall   ___sint2fs
12B0 8582E8    4274            mov     _Read_angle_sloc0_1_0,dpl
12B3 8583E9    4275            mov     (_Read_angle_sloc0_1_0 + 1),dph
12B6 85F0EA    4276            mov     (_Read_angle_sloc0_1_0 + 2),b
12B9 F5EB      4277            mov     (_Read_angle_sloc0_1_0 + 3),a
12BB 90D300    4278            mov     dptr,#_Read_angle_sum_y_1_206
12BE E0        4279            movx    a,@dptr
12BF FF        4280            mov     r7,a
12C0 A3        4281            inc     dptr
12C1 E0        4282            movx    a,@dptr
12C2 F8        4283            mov     r0,a
12C3 A3        4284            inc     dptr
12C4 E0        4285            movx    a,@dptr
12C5 F9        4286            mov     r1,a
12C6 A3        4287            inc     dptr
12C7 E0        4288            movx    a,@dptr
12C8 FB        4289            mov     r3,a
12C9 C0E8      4290            push    _Read_angle_sloc0_1_0
12CB C0E9      4291            push    (_Read_angle_sloc0_1_0 + 1)
12CD C0EA      4292            push    (_Read_angle_sloc0_1_0 + 2)
12CF C0EB      4293            push    (_Read_angle_sloc0_1_0 + 3)
12D1 8F82      4294            mov     dpl,r7
12D3 8883      4295            mov     dph,r0
12D5 89F0      4296            mov     b,r1
12D7 EB        4297            mov     a,r3
12D8 120000    4298            lcall   ___fsadd
12DB AB82      4299            mov     r3,dpl
12DD AC83      4300            mov     r4,dph
12DF ADF0      4301            mov     r5,b
12E1 FE        4302            mov     r6,a
12E2 E581      4303            mov     a,sp
12E4 24FC      4304            add     a,#0xfc
12E6 F581      4305            mov     sp,a
12E8 90D300    4306            mov     dptr,#_Read_angle_sum_y_1_206
12EB EB        4307            mov     a,r3
12EC F0        4308            movx    @dptr,a
12ED A3        4309            inc     dptr
12EE EC        4310            mov     a,r4
12EF F0        4311            movx    @dptr,a
12F0 A3        4312            inc     dptr
12F1 ED        4313            mov     a,r5
12F2 F0        4314            movx    @dptr,a
12F3 A3        4315            inc     dptr
12F4 EE        4316            mov     a,r6
12F5 F0        4317            movx    @dptr,a
12F6           4318   ;        main.c:1007: waitms(1);
12F6 900001    4319            mov     dptr,#0x0001
12F9 120000    4320            lcall   _waitms
12FC D002      4321            pop     ar2
12FE           4322   ;        main.c:1003: for (i = 0; i < 25; i++){
12FE 0A        4323            inc     r2
12FF 020000    4324            ljmp    L038005?
1302           4325   L038008?:
1302           4326   ;        main.c:1010: angle = atan2f(sum_y/25.0, sum_x/25.0) * 180.0 / M_PI;
1302 90D300    4327            mov     dptr,#_Read_angle_sum_y_1_206
1305 E0        4328            movx    a,@dptr
1306 FA        4329            mov     r2,a
1307 A3        4330            inc     dptr
1308 E0        4331            movx    a,@dptr
1309 FB        4332            mov     r3,a
130A A3        4333            inc     dptr
130B E0        4334            movx    a,@dptr
130C FC        4335            mov     r4,a
130D A3        4336            inc     dptr
130E E0        4337            movx    a,@dptr
130F FD        4338            mov     r5,a
1310 E4        4339            clr     a
1311 C0E0      4340            push    acc
1313 C0E0      4341            push    acc
1315 74C8      4342            mov     a,#0xC8
1317 C0E0      4343            push    acc
1319 7441      4344            mov     a,#0x41
131B C0E0      4345            push    acc
131D 8A82      4346            mov     dpl,r2
131F 8B83      4347            mov     dph,r3
1321 8CF0      4348            mov     b,r4
1323 ED        4349            mov     a,r5
1324 120000    4350            lcall   ___fsdiv
1327 AA82      4351            mov     r2,dpl
1329 AB83      4352            mov     r3,dph
132B ACF0      4353            mov     r4,b
132D FD        4354            mov     r5,a
132E E581      4355            mov     a,sp
1330 24FC      4356            add     a,#0xfc
1332 F581      4357            mov     sp,a
1334 90D2B0    4358            mov     dptr,#_Read_angle_sum_x_1_206
1337 E0        4359            movx    a,@dptr
1338 FE        4360            mov     r6,a
1339 A3        4361            inc     dptr
133A E0        4362            movx    a,@dptr
133B FF        4363            mov     r7,a
133C A3        4364            inc     dptr
133D E0        4365            movx    a,@dptr
133E F8        4366            mov     r0,a
133F A3        4367            inc     dptr
1340 E0        4368            movx    a,@dptr
1341 F9        4369            mov     r1,a
1342 C002      4370            push    ar2
1344 C003      4371            push    ar3
1346 C004      4372            push    ar4
1348 C005      4373            push    ar5
134A E4        4374            clr     a
134B C0E0      4375            push    acc
134D C0E0      4376            push    acc
134F 74C8      4377            mov     a,#0xC8
1351 C0E0      4378            push    acc
1353 7441      4379            mov     a,#0x41
1355 C0E0      4380            push    acc
1357 8E82      4381            mov     dpl,r6
1359 8F83      4382            mov     dph,r7
135B 88F0      4383            mov     b,r0
135D E9        4384            mov     a,r1
135E 120000    4385            lcall   ___fsdiv
1361 858200    4386            mov     _atan2f_PARM_2,dpl
1364 858301    4387            mov     (_atan2f_PARM_2 + 1),dph
1367 85F002    4388            mov     (_atan2f_PARM_2 + 2),b
136A F503      4389            mov     (_atan2f_PARM_2 + 3),a
136C E581      4390            mov     a,sp
136E 24FC      4391            add     a,#0xfc
1370 F581      4392            mov     sp,a
1372 D005      4393            pop     ar5
1374 D004      4394            pop     ar4
1376 D003      4395            pop     ar3
1378 D002      4396            pop     ar2
137A 8A82      4397            mov     dpl,r2
137C 8B83      4398            mov     dph,r3
137E 8CF0      4399            mov     b,r4
1380 ED        4400            mov     a,r5
1381 120000    4401            lcall   _atan2f
1384 AA82      4402            mov     r2,dpl
1386 AB83      4403            mov     r3,dph
1388 ACF0      4404            mov     r4,b
138A FD        4405            mov     r5,a
138B C002      4406            push    ar2
138D C003      4407            push    ar3
138F C004      4408            push    ar4
1391 C005      4409            push    ar5
1393 900000    4410            mov     dptr,#0x0000
1396 75F034    4411            mov     b,#0x34
1399 7443      4412            mov     a,#0x43
139B 120000    4413            lcall   ___fsmul
139E AA82      4414            mov     r2,dpl
13A0 AB83      4415            mov     r3,dph
13A2 ACF0      4416            mov     r4,b
13A4 FD        4417            mov     r5,a
13A5 E581      4418            mov     a,sp
13A7 24FC      4419            add     a,#0xfc
13A9 F581      4420            mov     sp,a
13AB 74DB      4421            mov     a,#0xDB
13AD C0E0      4422            push    acc
13AF 740F      4423            mov     a,#0x0F
13B1 C0E0      4424            push    acc
13B3 7449      4425            mov     a,#0x49
13B5 C0E0      4426            push    acc
13B7 7440      4427            mov     a,#0x40
13B9 C0E0      4428            push    acc
13BB 8A82      4429            mov     dpl,r2
13BD 8B83      4430            mov     dph,r3
13BF 8CF0      4431            mov     b,r4
13C1 ED        4432            mov     a,r5
13C2 120000    4433            lcall   ___fsdiv
13C5 AA82      4434            mov     r2,dpl
13C7 AB83      4435            mov     r3,dph
13C9 ACF0      4436            mov     r4,b
13CB FD        4437            mov     r5,a
13CC E581      4438            mov     a,sp
13CE 24FC      4439            add     a,#0xfc
13D0 F581      4440            mov     sp,a
13D2 90D350    4441            mov     dptr,#_Read_angle_angle_1_206
13D5 EA        4442            mov     a,r2
13D6 F0        4443            movx    @dptr,a
13D7 A3        4444            inc     dptr
13D8 EB        4445            mov     a,r3
13D9 F0        4446            movx    @dptr,a
13DA A3        4447            inc     dptr
13DB EC        4448            mov     a,r4
13DC F0        4449            movx    @dptr,a
13DD A3        4450            inc     dptr
13DE ED        4451            mov     a,r5
13DF F0        4452            movx    @dptr,a
13E0           4453   ;        main.c:1014: if (angle < 0.0) angle += 360.0; 
13E0 C002      4454            push    ar2
13E2 C003      4455            push    ar3
13E4 C004      4456            push    ar4
13E6 C005      4457            push    ar5
13E8 E4        4458            clr     a
13E9 C0E0      4459            push    acc
13EB C0E0      4460            push    acc
13ED C0E0      4461            push    acc
13EF C0E0      4462            push    acc
13F1 8A82      4463            mov     dpl,r2
13F3 8B83      4464            mov     dph,r3
13F5 8CF0      4465            mov     b,r4
13F7 ED        4466            mov     a,r5
13F8 120000    4467            lcall   ___fslt
13FB AE82      4468            mov     r6,dpl
13FD E581      4469            mov     a,sp
13FF 24FC      4470            add     a,#0xfc
1401 F581      4471            mov     sp,a
1403 D005      4472            pop     ar5
1405 D004      4473            pop     ar4
1407 D003      4474            pop     ar3
1409 D002      4475            pop     ar2
140B EE        4476            mov     a,r6
140C 6000      4477            jz      L038002?
140E E4        4478            clr     a
140F C0E0      4479            push    acc
1411 C0E0      4480            push    acc
1413 74B4      4481            mov     a,#0xB4
1415 C0E0      4482            push    acc
1417 7443      4483            mov     a,#0x43
1419 C0E0      4484            push    acc
141B 8A82      4485            mov     dpl,r2
141D 8B83      4486            mov     dph,r3
141F 8CF0      4487            mov     b,r4
1421 ED        4488            mov     a,r5
1422 120000    4489            lcall   ___fsadd
1425 AA82      4490            mov     r2,dpl
1427 AB83      4491            mov     r3,dph
1429 ACF0      4492            mov     r4,b
142B FD        4493            mov     r5,a
142C E581      4494            mov     a,sp
142E 24FC      4495            add     a,#0xfc
1430 F581      4496            mov     sp,a
1432 90D350    4497            mov     dptr,#_Read_angle_angle_1_206
1435 EA        4498            mov     a,r2
1436 F0        4499            movx    @dptr,a
1437 A3        4500            inc     dptr
1438 EB        4501            mov     a,r3
1439 F0        4502            movx    @dptr,a
143A A3        4503            inc     dptr
143B EC        4504            mov     a,r4
143C F0        4505            movx    @dptr,a
143D A3        4506            inc     dptr
143E ED        4507            mov     a,r5
143F F0        4508            movx    @dptr,a
1440           4509   L038002?:
1440           4510   ;        main.c:1015: if (angle > 360.0) angle -= 360.0; 
1440 90D350    4511            mov     dptr,#_Read_angle_angle_1_206
1443 E0        4512            movx    a,@dptr
1444 FA        4513            mov     r2,a
1445 A3        4514            inc     dptr
1446 E0        4515            movx    a,@dptr
1447 FB        4516            mov     r3,a
1448 A3        4517            inc     dptr
1449 E0        4518            movx    a,@dptr
144A FC        4519            mov     r4,a
144B A3        4520            inc     dptr
144C E0        4521            movx    a,@dptr
144D FD        4522            mov     r5,a
144E C002      4523            push    ar2
1450 C003      4524            push    ar3
1452 C004      4525            push    ar4
1454 C005      4526            push    ar5
1456 E4        4527            clr     a
1457 C0E0      4528            push    acc
1459 C0E0      4529            push    acc
145B 74B4      4530            mov     a,#0xB4
145D C0E0      4531            push    acc
145F 7443      4532            mov     a,#0x43
1461 C0E0      4533            push    acc
1463 8A82      4534            mov     dpl,r2
1465 8B83      4535            mov     dph,r3
1467 8CF0      4536            mov     b,r4
1469 ED        4537            mov     a,r5
146A 120000    4538            lcall   ___fsgt
146D AE82      4539            mov     r6,dpl
146F E581      4540            mov     a,sp
1471 24FC      4541            add     a,#0xfc
1473 F581      4542            mov     sp,a
1475 D005      4543            pop     ar5
1477 D004      4544            pop     ar4
1479 D003      4545            pop     ar3
147B D002      4546            pop     ar2
147D EE        4547            mov     a,r6
147E 6000      4548            jz      L038004?
1480 E4        4549            clr     a
1481 C0E0      4550            push    acc
1483 C0E0      4551            push    acc
1485 74B4      4552            mov     a,#0xB4
1487 C0E0      4553            push    acc
1489 7443      4554            mov     a,#0x43
148B C0E0      4555            push    acc
148D 8A82      4556            mov     dpl,r2
148F 8B83      4557            mov     dph,r3
1491 8CF0      4558            mov     b,r4
1493 ED        4559            mov     a,r5
1494 120000    4560            lcall   ___fssub
1497 AA82      4561            mov     r2,dpl
1499 AB83      4562            mov     r3,dph
149B ACF0      4563            mov     r4,b
149D FD        4564            mov     r5,a
149E E581      4565            mov     a,sp
14A0 24FC      4566            add     a,#0xfc
14A2 F581      4567            mov     sp,a
14A4 90D350    4568            mov     dptr,#_Read_angle_angle_1_206
14A7 EA        4569            mov     a,r2
14A8 F0        4570            movx    @dptr,a
14A9 A3        4571            inc     dptr
14AA EB        4572            mov     a,r3
14AB F0        4573            movx    @dptr,a
14AC A3        4574            inc     dptr
14AD EC        4575            mov     a,r4
14AE F0        4576            movx    @dptr,a
14AF A3        4577            inc     dptr
14B0 ED        4578            mov     a,r5
14B1 F0        4579            movx    @dptr,a
14B2           4580   L038004?:
14B2           4581   ;        main.c:1017: return angle; 
14B2 90D350    4582            mov     dptr,#_Read_angle_angle_1_206
14B5 E0        4583            movx    a,@dptr
14B6 FA        4584            mov     r2,a
14B7 A3        4585            inc     dptr
14B8 E0        4586            movx    a,@dptr
14B9 FB        4587            mov     r3,a
14BA A3        4588            inc     dptr
14BB E0        4589            movx    a,@dptr
14BC FC        4590            mov     r4,a
14BD A3        4591            inc     dptr
14BE E0        4592            movx    a,@dptr
14BF 8A82      4593            mov     dpl,r2
14C1 8B83      4594            mov     dph,r3
14C3 8CF0      4595            mov     b,r4
14C5 22        4596            ret
14C6           4597   ;------------------------------------------------------------
14C6           4598   ;Allocation info for local variables in function 'Joystick_Control'
14C6           4599   ;------------------------------------------------------------
14C6           4600   ;vy_ptr                    Allocated with name '_Joystick_Control_PARM_2'
14C6           4601   ;vx_ptr                    Allocated to registers r2 r3 r4 
14C6           4602   ;sloc0                     Allocated with name '_Joystick_Control_sloc0_1_0'
14C6           4603   ;sloc1                     Allocated with name '_Joystick_Control_sloc1_1_0'
14C6           4604   ;sloc2                     Allocated with name '_Joystick_Control_sloc2_1_0'
14C6           4605   ;sloc3                     Allocated with name '_Joystick_Control_sloc3_1_0'
14C6           4606   ;sloc4                     Allocated with name '_Joystick_Control_sloc4_1_0'
14C6           4607   ;sloc5                     Allocated with name '_Joystick_Control_sloc5_1_0'
14C6           4608   ;sloc6                     Allocated with name '_Joystick_Control_sloc6_1_0'
14C6           4609   ;vx                        Allocated with name '_Joystick_Control_vx_1_209'
14C6           4610   ;vy                        Allocated with name '_Joystick_Control_vy_1_209'
14C6           4611   ;vx_error                  Allocated with name '_Joystick_Control_vx_error_1_209'
14C6           4612   ;vy_error                  Allocated with name '_Joystick_Control_vy_error_1_209'
14C6           4613   ;vx_err                    Allocated with name '_Joystick_Control_vx_err_1_209'
14C6           4614   ;vy_err                    Allocated with name '_Joystick_Control_vy_err_1_209'
14C6           4615   ;threshold                 Allocated with name '_Joystick_Control_threshold_1_209'
14C6           4616   ;------------------------------------------------------------
14C6           4617   ;        main.c:1020: void Joystick_Control(int *vx_ptr, int *vy_ptr)
14C6           4618   ;        -----------------------------------------
14C6           4619   ;         function Joystick_Control
14C6           4620   ;        -----------------------------------------
14C6           4621   _Joystick_Control:
14C6           4622   ;        main.c:1025: vx = *vx_ptr; 
14C6 120000    4623            lcall   __gptrget
14C9 F538      4624            mov     _Joystick_Control_sloc0_1_0,a
14CB A3        4625            inc     dptr
14CC 120000    4626            lcall   __gptrget
14CF F539      4627            mov     (_Joystick_Control_sloc0_1_0 + 1),a
14D1           4628   ;        main.c:1026: vy = *vy_ptr; 
14D1 AC18      4629            mov     r4,_Joystick_Control_PARM_2
14D3 AD19      4630            mov     r5,(_Joystick_Control_PARM_2 + 1)
14D5 AE1A      4631            mov     r6,(_Joystick_Control_PARM_2 + 2)
14D7 8C82      4632            mov     dpl,r4
14D9 8D83      4633            mov     dph,r5
14DB 8EF0      4634            mov     b,r6
14DD 120000    4635            lcall   __gptrget
14E0 FC        4636            mov     r4,a
14E1 A3        4637            inc     dptr
14E2 120000    4638            lcall   __gptrget
14E5 FD        4639            mov     r5,a
14E6           4640   ;        main.c:1028: vx_error = abs(vx-vx_thres)*100/vx_thres; 
14E6 905208    4641            mov     dptr,#_vx_thres
14E9 E0        4642            movx    a,@dptr
14EA FE        4643            mov     r6,a
14EB A3        4644            inc     dptr
14EC E0        4645            movx    a,@dptr
14ED FF        4646            mov     r7,a
14EE E538      4647            mov     a,_Joystick_Control_sloc0_1_0
14F0 C3        4648            clr     c
14F1 9E        4649            subb    a,r6
14F2 F582      4650            mov     dpl,a
14F4 E539      4651            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
14F6 9F        4652            subb    a,r7
14F7 F583      4653            mov     dph,a
14F9 C004      4654            push    ar4
14FB C005      4655            push    ar5
14FD 120000    4656            lcall   _abs
1500 858200    4657            mov     __mulint_PARM_2,dpl
1503 858301    4658            mov     (__mulint_PARM_2 + 1),dph
1506 900064    4659            mov     dptr,#0x0064
1509 120000    4660            lcall   __mulint
150C AE82      4661            mov     r6,dpl
150E AF83      4662            mov     r7,dph
1510 905208    4663            mov     dptr,#_vx_thres
1513 E0        4664            movx    a,@dptr
1514 F500      4665            mov     __divsint_PARM_2,a
1516 A3        4666            inc     dptr
1517 E0        4667            movx    a,@dptr
1518 F501      4668            mov     (__divsint_PARM_2 + 1),a
151A 8E82      4669            mov     dpl,r6
151C 8F83      4670            mov     dph,r7
151E 120000    4671            lcall   __divsint
1521 E582      4672            mov     a,dpl
1523 8583F0    4673            mov     b,dph
1526 D005      4674            pop     ar5
1528 D004      4675            pop     ar4
152A 90D3B0    4676            mov     dptr,#_Joystick_Control_vx_error_1_209
152D F0        4677            movx    @dptr,a
152E A3        4678            inc     dptr
152F E5F0      4679            mov     a,b
1531 F0        4680            movx    @dptr,a
1532           4681   ;        main.c:1029: vy_error = abs(vy-vy_thres)*100/vy_thres; 
1532 9051C8    4682            mov     dptr,#_vy_thres
1535 E0        4683            movx    a,@dptr
1536 FE        4684            mov     r6,a
1537 A3        4685            inc     dptr
1538 E0        4686            movx    a,@dptr
1539 FF        4687            mov     r7,a
153A EC        4688            mov     a,r4
153B C3        4689            clr     c
153C 9E        4690            subb    a,r6
153D F582      4691            mov     dpl,a
153F ED        4692            mov     a,r5
1540 9F        4693            subb    a,r7
1541 F583      4694            mov     dph,a
1543 C004      4695            push    ar4
1545 C005      4696            push    ar5
1547 120000    4697            lcall   _abs
154A 858200    4698            mov     __mulint_PARM_2,dpl
154D 858301    4699            mov     (__mulint_PARM_2 + 1),dph
1550 900064    4700            mov     dptr,#0x0064
1553 120000    4701            lcall   __mulint
1556 AE82      4702            mov     r6,dpl
1558 AF83      4703            mov     r7,dph
155A 9051C8    4704            mov     dptr,#_vy_thres
155D E0        4705            movx    a,@dptr
155E F5D8      4706            mov     _Joystick_Control_sloc2_1_0,a
1560 A3        4707            inc     dptr
1561 E0        4708            movx    a,@dptr
1562 F5D9      4709            mov     (_Joystick_Control_sloc2_1_0 + 1),a
1564 85D800    4710            mov     __divsint_PARM_2,_Joystick_Control_sloc2_1_0
1567 85D901    4711            mov     (__divsint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
156A           4712   ;        main.c:1030: vx_err = vx-vx_thres; 
156A 8E82      4713            mov     dpl,r6
156C 8F83      4714            mov     dph,r7
156E 120000    4715            lcall   __divsint
1571 AE82      4716            mov     r6,dpl
1573 AF83      4717            mov     r7,dph
1575 D005      4718            pop     ar5
1577 D004      4719            pop     ar4
1579 905208    4720            mov     dptr,#_vx_thres
157C E0        4721            movx    a,@dptr
157D FA        4722            mov     r2,a
157E A3        4723            inc     dptr
157F E0        4724            movx    a,@dptr
1580 FB        4725            mov     r3,a
1581 E538      4726            mov     a,_Joystick_Control_sloc0_1_0
1583 C3        4727            clr     c
1584 9A        4728            subb    a,r2
1585 F578      4729            mov     _Joystick_Control_sloc4_1_0,a
1587 E539      4730            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
1589 9B        4731            subb    a,r3
158A F579      4732            mov     (_Joystick_Control_sloc4_1_0 + 1),a
158C           4733   ;        main.c:1031: vy_err = vy-vy_thres; 
158C EC        4734            mov     a,r4
158D C3        4735            clr     c
158E 95D8      4736            subb    a,_Joystick_Control_sloc2_1_0
1590 F538      4737            mov     _Joystick_Control_sloc0_1_0,a
1592 ED        4738            mov     a,r5
1593 95D9      4739            subb    a,(_Joystick_Control_sloc2_1_0 + 1)
1595 F539      4740            mov     (_Joystick_Control_sloc0_1_0 + 1),a
1597           4741   ;        main.c:1032: pwm_left = 0; 
1597 905388    4742            mov     dptr,#_pwm_left
159A           4743   ;        main.c:1033: pwm_right = 0; 
159A E4        4744            clr     a
159B F0        4745            movx    @dptr,a
159C 905348    4746            mov     dptr,#_pwm_right
159F F0        4747            movx    @dptr,a
15A0           4748   ;        main.c:1035: if ((vy_error>5) && (vx_error<5)){
15A0 C3        4749            clr     c
15A1 7405      4750            mov     a,#0x05
15A3 9E        4751            subb    a,r6
15A4 E4        4752            clr     a
15A5 6480      4753            xrl     a,#0x80
15A7 8FF0      4754            mov     b,r7
15A9 63F080    4755            xrl     b,#0x80
15AC 95F0      4756            subb    a,b
15AE E4        4757            clr     a
15AF 33        4758            rlc     a
15B0 F588      4759            mov     _Joystick_Control_sloc1_1_0,a
15B2 7000      4760            jnz     L039056?
15B4 020000    4761            ljmp    L039005?
15B7           4762   L039056?:
15B7 90D3B0    4763            mov     dptr,#_Joystick_Control_vx_error_1_209
15BA E0        4764            movx    a,@dptr
15BB FA        4765            mov     r2,a
15BC A3        4766            inc     dptr
15BD E0        4767            movx    a,@dptr
15BE FB        4768            mov     r3,a
15BF C3        4769            clr     c
15C0 EA        4770            mov     a,r2
15C1 9405      4771            subb    a,#0x05
15C3 EB        4772            mov     a,r3
15C4 6480      4773            xrl     a,#0x80
15C6 9480      4774            subb    a,#0x80
15C8 4000      4775            jc      L039057?
15CA 020000    4776            ljmp    L039005?
15CD           4777   L039057?:
15CD           4778   ;        main.c:1036: pwm_left = vy_error; 
15CD 905388    4779            mov     dptr,#_pwm_left
15D0 EE        4780            mov     a,r6
15D1 F0        4781            movx    @dptr,a
15D2           4782   ;        main.c:1037: pwm_right = vy_error * pwm_corr; 
15D2 8E82      4783            mov     dpl,r6
15D4 8F83      4784            mov     dph,r7
15D6 C004      4785            push    ar4
15D8 C005      4786            push    ar5
15DA C006      4787            push    ar6
15DC C007      4788            push    ar7
15DE 120000    4789            lcall   ___sint2fs
15E1 AA82      4790            mov     r2,dpl
15E3 AB83      4791            mov     r3,dph
15E5 A8F0      4792            mov     r0,b
15E7 F9        4793            mov     r1,a
15E8 905088    4794            mov     dptr,#_pwm_corr
15EB E0        4795            movx    a,@dptr
15EC C0E0      4796            push    acc
15EE A3        4797            inc     dptr
15EF E0        4798            movx    a,@dptr
15F0 C0E0      4799            push    acc
15F2 A3        4800            inc     dptr
15F3 E0        4801            movx    a,@dptr
15F4 C0E0      4802            push    acc
15F6 A3        4803            inc     dptr
15F7 E0        4804            movx    a,@dptr
15F8 C0E0      4805            push    acc
15FA 8A82      4806            mov     dpl,r2
15FC 8B83      4807            mov     dph,r3
15FE 88F0      4808            mov     b,r0
1600 E9        4809            mov     a,r1
1601 120000    4810            lcall   ___fsmul
1604 AA82      4811            mov     r2,dpl
1606 AB83      4812            mov     r3,dph
1608 A8F0      4813            mov     r0,b
160A F9        4814            mov     r1,a
160B E581      4815            mov     a,sp
160D 24FC      4816            add     a,#0xfc
160F F581      4817            mov     sp,a
1611 8A82      4818            mov     dpl,r2
1613 8B83      4819            mov     dph,r3
1615 88F0      4820            mov     b,r0
1617 E9        4821            mov     a,r1
1618 120000    4822            lcall   ___fs2uchar
161B 858228    4823            mov     _Joystick_Control_sloc3_1_0,dpl
161E D007      4824            pop     ar7
1620 D006      4825            pop     ar6
1622 D005      4826            pop     ar5
1624 D004      4827            pop     ar4
1626 905348    4828            mov     dptr,#_pwm_right
1629 E528      4829            mov     a,_Joystick_Control_sloc3_1_0
162B F0        4830            movx    @dptr,a
162C           4831   ;        main.c:1038: if (vy_err > 0){ //move forward
162C C3        4832            clr     c
162D E4        4833            clr     a
162E 9538      4834            subb    a,_Joystick_Control_sloc0_1_0
1630 E4        4835            clr     a
1631 6480      4836            xrl     a,#0x80
1633 8539F0    4837            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
1636 63F080    4838            xrl     b,#0x80
1639 95F0      4839            subb    a,b
163B 5000      4840            jnc     L039002?
163D           4841   ;        main.c:1039: L_motor_dir = 0; 
163D 905308    4842            mov     dptr,#_L_motor_dir
1640           4843   ;        main.c:1040: R_motor_dir = 0; 
1640 E4        4844            clr     a
1641 F0        4845            movx    @dptr,a
1642 9052C8    4846            mov     dptr,#_R_motor_dir
1645 F0        4847            movx    @dptr,a
1646 8000      4848            sjmp    L039005?
1648           4849   L039002?:
1648           4850   ;        main.c:1043: L_motor_dir = 1; 
1648 905308    4851            mov     dptr,#_L_motor_dir
164B 7401      4852            mov     a,#0x01
164D F0        4853            movx    @dptr,a
164E           4854   ;        main.c:1044: R_motor_dir = 1; 
164E 9052C8    4855            mov     dptr,#_R_motor_dir
1651 7401      4856            mov     a,#0x01
1653 F0        4857            movx    @dptr,a
1654           4858   ;        main.c:1045: pwm_right *= 1.05;
1654 852882    4859            mov     dpl,_Joystick_Control_sloc3_1_0
1657 C004      4860            push    ar4
1659 C005      4861            push    ar5
165B C006      4862            push    ar6
165D C007      4863            push    ar7
165F 120000    4864            lcall   ___uchar2fs
1662 A882      4865            mov     r0,dpl
1664 A983      4866            mov     r1,dph
1666 AAF0      4867            mov     r2,b
1668 FB        4868            mov     r3,a
1669 C000      4869            push    ar0
166B C001      4870            push    ar1
166D C002      4871            push    ar2
166F C003      4872            push    ar3
1671 906666    4873            mov     dptr,#0x6666
1674 75F086    4874            mov     b,#0x86
1677 743F      4875            mov     a,#0x3F
1679 120000    4876            lcall   ___fsmul
167C AA82      4877            mov     r2,dpl
167E AB83      4878            mov     r3,dph
1680 A8F0      4879            mov     r0,b
1682 F9        4880            mov     r1,a
1683 E581      4881            mov     a,sp
1685 24FC      4882            add     a,#0xfc
1687 F581      4883            mov     sp,a
1689 8A82      4884            mov     dpl,r2
168B 8B83      4885            mov     dph,r3
168D 88F0      4886            mov     b,r0
168F E9        4887            mov     a,r1
1690 120000    4888            lcall   ___fs2uchar
1693 E582      4889            mov     a,dpl
1695 D007      4890            pop     ar7
1697 D006      4891            pop     ar6
1699 D005      4892            pop     ar5
169B D004      4893            pop     ar4
169D 905348    4894            mov     dptr,#_pwm_right
16A0 F0        4895            movx    @dptr,a
16A1           4896   ;        main.c:1116: return; 
16A1           4897   ;        main.c:1045: pwm_right *= 1.05;
16A1           4898   L039005?:
16A1           4899   ;        main.c:1048: if ((vx_error>5)&&(vy_error<5)){
16A1 90D3B0    4900            mov     dptr,#_Joystick_Control_vx_error_1_209
16A4 E0        4901            movx    a,@dptr
16A5 F518      4902            mov     _Joystick_Control_sloc6_1_0,a
16A7 A3        4903            inc     dptr
16A8 E0        4904            movx    a,@dptr
16A9 F519      4905            mov     (_Joystick_Control_sloc6_1_0 + 1),a
16AB C3        4906            clr     c
16AC 7405      4907            mov     a,#0x05
16AE 9518      4908            subb    a,_Joystick_Control_sloc6_1_0
16B0 E4        4909            clr     a
16B1 6480      4910            xrl     a,#0x80
16B3 8519F0    4911            mov     b,(_Joystick_Control_sloc6_1_0 + 1)
16B6 63F080    4912            xrl     b,#0x80
16B9 95F0      4913            subb    a,b
16BB E4        4914            clr     a
16BC 33        4915            rlc     a
16BD F528      4916            mov     _Joystick_Control_sloc3_1_0,a
16BF 7000      4917            jnz     L039059?
16C1 020000    4918            ljmp    L039011?
16C4           4919   L039059?:
16C4 C3        4920            clr     c
16C5 EE        4921            mov     a,r6
16C6 9405      4922            subb    a,#0x05
16C8 EF        4923            mov     a,r7
16C9 6480      4924            xrl     a,#0x80
16CB 9480      4925            subb    a,#0x80
16CD 4000      4926            jc      L039060?
16CF 020000    4927            ljmp    L039011?
16D2           4928   L039060?:
16D2           4929   ;        main.c:1049: pwm_left = vx_error; 
16D2 C004      4930            push    ar4
16D4 C005      4931            push    ar5
16D6 905388    4932            mov     dptr,#_pwm_left
16D9 E518      4933            mov     a,_Joystick_Control_sloc6_1_0
16DB F0        4934            movx    @dptr,a
16DC           4935   ;        main.c:1050: pwm_right = vx_error * pwm_corr; 
16DC 851882    4936            mov     dpl,_Joystick_Control_sloc6_1_0
16DF 851983    4937            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
16E2 C006      4938            push    ar6
16E4 C007      4939            push    ar7
16E6 120000    4940            lcall   ___sint2fs
16E9 AC82      4941            mov     r4,dpl
16EB AD83      4942            mov     r5,dph
16ED AAF0      4943            mov     r2,b
16EF FB        4944            mov     r3,a
16F0 905088    4945            mov     dptr,#_pwm_corr
16F3 E0        4946            movx    a,@dptr
16F4 C0E0      4947            push    acc
16F6 A3        4948            inc     dptr
16F7 E0        4949            movx    a,@dptr
16F8 C0E0      4950            push    acc
16FA A3        4951            inc     dptr
16FB E0        4952            movx    a,@dptr
16FC C0E0      4953            push    acc
16FE A3        4954            inc     dptr
16FF E0        4955            movx    a,@dptr
1700 C0E0      4956            push    acc
1702 8C82      4957            mov     dpl,r4
1704 8D83      4958            mov     dph,r5
1706 8AF0      4959            mov     b,r2
1708 EB        4960            mov     a,r3
1709 120000    4961            lcall   ___fsmul
170C AA82      4962            mov     r2,dpl
170E AB83      4963            mov     r3,dph
1710 ACF0      4964            mov     r4,b
1712 FD        4965            mov     r5,a
1713 E581      4966            mov     a,sp
1715 24FC      4967            add     a,#0xfc
1717 F581      4968            mov     sp,a
1719 D007      4969            pop     ar7
171B D006      4970            pop     ar6
171D 8A82      4971            mov     dpl,r2
171F 8B83      4972            mov     dph,r3
1721 8CF0      4973            mov     b,r4
1723 ED        4974            mov     a,r5
1724 C004      4975            push    ar4
1726 C005      4976            push    ar5
1728 C006      4977            push    ar6
172A C007      4978            push    ar7
172C 120000    4979            lcall   ___fs2uchar
172F E582      4980            mov     a,dpl
1731 D007      4981            pop     ar7
1733 D006      4982            pop     ar6
1735 D005      4983            pop     ar5
1737 D004      4984            pop     ar4
1739 905348    4985            mov     dptr,#_pwm_right
173C F0        4986            movx    @dptr,a
173D           4987   ;        main.c:1051: if (vx_err > 0){ //turn right
173D C3        4988            clr     c
173E E4        4989            clr     a
173F 9578      4990            subb    a,_Joystick_Control_sloc4_1_0
1741 E4        4991            clr     a
1742 6480      4992            xrl     a,#0x80
1744 8579F0    4993            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
1747 63F080    4994            xrl     b,#0x80
174A 95F0      4995            subb    a,b
174C D005      4996            pop     ar5
174E D004      4997            pop     ar4
1750 5000      4998            jnc     L039008?
1752           4999   ;        main.c:1052: L_motor_dir = 1; 
1752 905308    5000            mov     dptr,#_L_motor_dir
1755 7401      5001            mov     a,#0x01
1757 F0        5002            movx    @dptr,a
1758           5003   ;        main.c:1053: R_motor_dir = 0; 
1758 9052C8    5004            mov     dptr,#_R_motor_dir
175B E4        5005            clr     a
175C F0        5006            movx    @dptr,a
175D 8000      5007            sjmp    L039011?
175F           5008   L039008?:
175F           5009   ;        main.c:1056: L_motor_dir = 0; 
175F 905308    5010            mov     dptr,#_L_motor_dir
1762 E4        5011            clr     a
1763 F0        5012            movx    @dptr,a
1764           5013   ;        main.c:1057: R_motor_dir = 1; 
1764 9052C8    5014            mov     dptr,#_R_motor_dir
1767 7401      5015            mov     a,#0x01
1769 F0        5016            movx    @dptr,a
176A           5017   L039011?:
176A           5018   ;        main.c:1060: if ((vx_error>5)&&(vy_error)>5){
176A E528      5019            mov     a,_Joystick_Control_sloc3_1_0
176C 7000      5020            jnz     L039062?
176E 22        5021            ret
176F           5022   L039062?:
176F E588      5023            mov     a,_Joystick_Control_sloc1_1_0
1771 7000      5024            jnz     L039063?
1773 22        5025            ret
1774           5026   L039063?:
1774           5027   ;        main.c:1062: if (vy_err>0){
1774 C3        5028            clr     c
1775 E4        5029            clr     a
1776 9538      5030            subb    a,_Joystick_Control_sloc0_1_0
1778 E4        5031            clr     a
1779 6480      5032            xrl     a,#0x80
177B 8539F0    5033            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
177E 63F080    5034            xrl     b,#0x80
1781 95F0      5035            subb    a,b
1783 4000      5036            jc      L039064?
1785 020000    5037            ljmp    L039023?
1788           5038   L039064?:
1788           5039   ;        main.c:1063: L_motor_dir = 0; 
1788 905308    5040            mov     dptr,#_L_motor_dir
178B           5041   ;        main.c:1064: R_motor_dir = 0; 
178B E4        5042            clr     a
178C F0        5043            movx    @dptr,a
178D 9052C8    5044            mov     dptr,#_R_motor_dir
1790 F0        5045            movx    @dptr,a
1791           5046   ;        main.c:1066: if (vx_err>0){
1791 C3        5047            clr     c
1792 E4        5048            clr     a
1793 9578      5049            subb    a,_Joystick_Control_sloc4_1_0
1795 E4        5050            clr     a
1796 6480      5051            xrl     a,#0x80
1798 8579F0    5052            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
179B 63F080    5053            xrl     b,#0x80
179E 95F0      5054            subb    a,b
17A0 4000      5055            jc      L039065?
17A2 020000    5056            ljmp    L039020?
17A5           5057   L039065?:
17A5           5058   ;        main.c:1067: if (vy*100<=vy_thres*100/2){
17A5 8C00      5059            mov     __mulint_PARM_2,r4
17A7 8D01      5060            mov     (__mulint_PARM_2 + 1),r5
17A9 900064    5061            mov     dptr,#0x0064
17AC C004      5062            push    ar4
17AE C005      5063            push    ar5
17B0 C006      5064            push    ar6
17B2 C007      5065            push    ar7
17B4 120000    5066            lcall   __mulint
17B7 AA82      5067            mov     r2,dpl
17B9 AB83      5068            mov     r3,dph
17BB D007      5069            pop     ar7
17BD D006      5070            pop     ar6
17BF D005      5071            pop     ar5
17C1 D004      5072            pop     ar4
17C3 85D800    5073            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
17C6 85D901    5074            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
17C9 900064    5075            mov     dptr,#0x0064
17CC C002      5076            push    ar2
17CE C003      5077            push    ar3
17D0 C004      5078            push    ar4
17D2 C005      5079            push    ar5
17D4 C006      5080            push    ar6
17D6 C007      5081            push    ar7
17D8 120000    5082            lcall   __mulint
17DB A882      5083            mov     r0,dpl
17DD A983      5084            mov     r1,dph
17DF 750002    5085            mov     __divsint_PARM_2,#0x02
17E2 E4        5086            clr     a
17E3 F501      5087            mov     (__divsint_PARM_2 + 1),a
17E5 8882      5088            mov     dpl,r0
17E7 8983      5089            mov     dph,r1
17E9 120000    5090            lcall   __divsint
17EC A882      5091            mov     r0,dpl
17EE A983      5092            mov     r1,dph
17F0 D007      5093            pop     ar7
17F2 D006      5094            pop     ar6
17F4 D005      5095            pop     ar5
17F6 D004      5096            pop     ar4
17F8 D003      5097            pop     ar3
17FA D002      5098            pop     ar2
17FC C3        5099            clr     c
17FD E8        5100            mov     a,r0
17FE 9A        5101            subb    a,r2
17FF E9        5102            mov     a,r1
1800 6480      5103            xrl     a,#0x80
1802 8BF0      5104            mov     b,r3
1804 63F080    5105            xrl     b,#0x80
1807 95F0      5106            subb    a,b
1809 5000      5107            jnc     L039066?
180B 020000    5108            ljmp    L039014?
180E           5109   L039066?:
180E           5110   ;        main.c:1068: pwm_left = vy_error; 
180E C004      5111            push    ar4
1810 C005      5112            push    ar5
1812 905388    5113            mov     dptr,#_pwm_left
1815 EE        5114            mov     a,r6
1816 F0        5115            movx    @dptr,a
1817           5116   ;        main.c:1069: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
1817 905088    5117            mov     dptr,#_pwm_corr
181A E0        5118            movx    a,@dptr
181B F5C8      5119            mov     _Joystick_Control_sloc5_1_0,a
181D A3        5120            inc     dptr
181E E0        5121            movx    a,@dptr
181F F5C9      5122            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1821 A3        5123            inc     dptr
1822 E0        5124            movx    a,@dptr
1823 F5CA      5125            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1825 A3        5126            inc     dptr
1826 E0        5127            movx    a,@dptr
1827 F5CB      5128            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1829 8E82      5129            mov     dpl,r6
182B 8F83      5130            mov     dph,r7
182D C006      5131            push    ar6
182F C007      5132            push    ar7
1831 120000    5133            lcall   ___sint2fs
1834 AA82      5134            mov     r2,dpl
1836 AB83      5135            mov     r3,dph
1838 ACF0      5136            mov     r4,b
183A FD        5137            mov     r5,a
183B C002      5138            push    ar2
183D C003      5139            push    ar3
183F C004      5140            push    ar4
1841 C005      5141            push    ar5
1843 85C882    5142            mov     dpl,_Joystick_Control_sloc5_1_0
1846 85C983    5143            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1849 85CAF0    5144            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
184C E5CB      5145            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
184E 120000    5146            lcall   ___fsmul
1851 AA82      5147            mov     r2,dpl
1853 AB83      5148            mov     r3,dph
1855 ACF0      5149            mov     r4,b
1857 FD        5150            mov     r5,a
1858 E581      5151            mov     a,sp
185A 24FC      5152            add     a,#0xfc
185C F581      5153            mov     sp,a
185E D007      5154            pop     ar7
1860 D006      5155            pop     ar6
1862 C004      5156            push    ar4
1864 C005      5157            push    ar5
1866 C006      5158            push    ar6
1868 C007      5159            push    ar7
186A C002      5160            push    ar2
186C C003      5161            push    ar3
186E C004      5162            push    ar4
1870 C005      5163            push    ar5
1872 900000    5164            mov     dptr,#0x0000
1875 75F0C8    5165            mov     b,#0xC8
1878 7442      5166            mov     a,#0x42
187A 120000    5167            lcall   ___fsmul
187D 8582C8    5168            mov     _Joystick_Control_sloc5_1_0,dpl
1880 8583C9    5169            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1883 85F0CA    5170            mov     (_Joystick_Control_sloc5_1_0 + 2),b
1886 F5CB      5171            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1888 E581      5172            mov     a,sp
188A 24FC      5173            add     a,#0xfc
188C F581      5174            mov     sp,a
188E D007      5175            pop     ar7
1890 D006      5176            pop     ar6
1892 D005      5177            pop     ar5
1894 D004      5178            pop     ar4
1896 EE        5179            mov     a,r6
1897 2518      5180            add     a,_Joystick_Control_sloc6_1_0
1899 F582      5181            mov     dpl,a
189B EF        5182            mov     a,r7
189C 3519      5183            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
189E F583      5184            mov     dph,a
18A0 C006      5185            push    ar6
18A2 C007      5186            push    ar7
18A4 120000    5187            lcall   ___sint2fs
18A7 AA82      5188            mov     r2,dpl
18A9 AB83      5189            mov     r3,dph
18AB ACF0      5190            mov     r4,b
18AD FD        5191            mov     r5,a
18AE C002      5192            push    ar2
18B0 C003      5193            push    ar3
18B2 C004      5194            push    ar4
18B4 C005      5195            push    ar5
18B6 85C882    5196            mov     dpl,_Joystick_Control_sloc5_1_0
18B9 85C983    5197            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
18BC 85CAF0    5198            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
18BF E5CB      5199            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
18C1 120000    5200            lcall   ___fsdiv
18C4 AA82      5201            mov     r2,dpl
18C6 AB83      5202            mov     r3,dph
18C8 ACF0      5203            mov     r4,b
18CA FD        5204            mov     r5,a
18CB E581      5205            mov     a,sp
18CD 24FC      5206            add     a,#0xfc
18CF F581      5207            mov     sp,a
18D1 D007      5208            pop     ar7
18D3 D006      5209            pop     ar6
18D5 8A82      5210            mov     dpl,r2
18D7 8B83      5211            mov     dph,r3
18D9 8CF0      5212            mov     b,r4
18DB ED        5213            mov     a,r5
18DC C004      5214            push    ar4
18DE C005      5215            push    ar5
18E0 C006      5216            push    ar6
18E2 C007      5217            push    ar7
18E4 120000    5218            lcall   ___fs2uchar
18E7 E582      5219            mov     a,dpl
18E9 D007      5220            pop     ar7
18EB D006      5221            pop     ar6
18ED D005      5222            pop     ar5
18EF D004      5223            pop     ar4
18F1 905348    5224            mov     dptr,#_pwm_right
18F4 F0        5225            movx    @dptr,a
18F5 D005      5226            pop     ar5
18F7 D004      5227            pop     ar4
18F9 020000    5228            ljmp    L039023?
18FC           5229   L039014?:
18FC           5230   ;        main.c:1072: pwm_left = vx_error; 
18FC C004      5231            push    ar4
18FE C005      5232            push    ar5
1900 905388    5233            mov     dptr,#_pwm_left
1903 E518      5234            mov     a,_Joystick_Control_sloc6_1_0
1905 F0        5235            movx    @dptr,a
1906           5236   ;        main.c:1073: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
1906 905088    5237            mov     dptr,#_pwm_corr
1909 E0        5238            movx    a,@dptr
190A F5C8      5239            mov     _Joystick_Control_sloc5_1_0,a
190C A3        5240            inc     dptr
190D E0        5241            movx    a,@dptr
190E F5C9      5242            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1910 A3        5243            inc     dptr
1911 E0        5244            movx    a,@dptr
1912 F5CA      5245            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1914 A3        5246            inc     dptr
1915 E0        5247            movx    a,@dptr
1916 F5CB      5248            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1918 851882    5249            mov     dpl,_Joystick_Control_sloc6_1_0
191B 851983    5250            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
191E C006      5251            push    ar6
1920 C007      5252            push    ar7
1922 120000    5253            lcall   ___sint2fs
1925 AA82      5254            mov     r2,dpl
1927 AB83      5255            mov     r3,dph
1929 ACF0      5256            mov     r4,b
192B FD        5257            mov     r5,a
192C C002      5258            push    ar2
192E C003      5259            push    ar3
1930 C004      5260            push    ar4
1932 C005      5261            push    ar5
1934 85C882    5262            mov     dpl,_Joystick_Control_sloc5_1_0
1937 85C983    5263            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
193A 85CAF0    5264            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
193D E5CB      5265            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
193F 120000    5266            lcall   ___fsmul
1942 AA82      5267            mov     r2,dpl
1944 AB83      5268            mov     r3,dph
1946 ACF0      5269            mov     r4,b
1948 FD        5270            mov     r5,a
1949 E581      5271            mov     a,sp
194B 24FC      5272            add     a,#0xfc
194D F581      5273            mov     sp,a
194F D007      5274            pop     ar7
1951 D006      5275            pop     ar6
1953 C004      5276            push    ar4
1955 C005      5277            push    ar5
1957 C006      5278            push    ar6
1959 C007      5279            push    ar7
195B C002      5280            push    ar2
195D C003      5281            push    ar3
195F C004      5282            push    ar4
1961 C005      5283            push    ar5
1963 900000    5284            mov     dptr,#0x0000
1966 75F0C8    5285            mov     b,#0xC8
1969 7442      5286            mov     a,#0x42
196B 120000    5287            lcall   ___fsmul
196E 8582C8    5288            mov     _Joystick_Control_sloc5_1_0,dpl
1971 8583C9    5289            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1974 85F0CA    5290            mov     (_Joystick_Control_sloc5_1_0 + 2),b
1977 F5CB      5291            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1979 E581      5292            mov     a,sp
197B 24FC      5293            add     a,#0xfc
197D F581      5294            mov     sp,a
197F D007      5295            pop     ar7
1981 D006      5296            pop     ar6
1983 D005      5297            pop     ar5
1985 D004      5298            pop     ar4
1987 EE        5299            mov     a,r6
1988 2518      5300            add     a,_Joystick_Control_sloc6_1_0
198A F582      5301            mov     dpl,a
198C EF        5302            mov     a,r7
198D 3519      5303            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
198F F583      5304            mov     dph,a
1991 C006      5305            push    ar6
1993 C007      5306            push    ar7
1995 120000    5307            lcall   ___sint2fs
1998 AA82      5308            mov     r2,dpl
199A AB83      5309            mov     r3,dph
199C ACF0      5310            mov     r4,b
199E FD        5311            mov     r5,a
199F C002      5312            push    ar2
19A1 C003      5313            push    ar3
19A3 C004      5314            push    ar4
19A5 C005      5315            push    ar5
19A7 85C882    5316            mov     dpl,_Joystick_Control_sloc5_1_0
19AA 85C983    5317            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
19AD 85CAF0    5318            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
19B0 E5CB      5319            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
19B2 120000    5320            lcall   ___fsdiv
19B5 AA82      5321            mov     r2,dpl
19B7 AB83      5322            mov     r3,dph
19B9 ACF0      5323            mov     r4,b
19BB FD        5324            mov     r5,a
19BC E581      5325            mov     a,sp
19BE 24FC      5326            add     a,#0xfc
19C0 F581      5327            mov     sp,a
19C2 D007      5328            pop     ar7
19C4 D006      5329            pop     ar6
19C6 8A82      5330            mov     dpl,r2
19C8 8B83      5331            mov     dph,r3
19CA 8CF0      5332            mov     b,r4
19CC ED        5333            mov     a,r5
19CD C004      5334            push    ar4
19CF C005      5335            push    ar5
19D1 C006      5336            push    ar6
19D3 C007      5337            push    ar7
19D5 120000    5338            lcall   ___fs2uchar
19D8 E582      5339            mov     a,dpl
19DA D007      5340            pop     ar7
19DC D006      5341            pop     ar6
19DE D005      5342            pop     ar5
19E0 D004      5343            pop     ar4
19E2 905348    5344            mov     dptr,#_pwm_right
19E5 F0        5345            movx    @dptr,a
19E6 D005      5346            pop     ar5
19E8 D004      5347            pop     ar4
19EA 020000    5348            ljmp    L039023?
19ED           5349   L039020?:
19ED           5350   ;        main.c:1078: if (vy*100<=vy_thres*100/2){
19ED 8C00      5351            mov     __mulint_PARM_2,r4
19EF 8D01      5352            mov     (__mulint_PARM_2 + 1),r5
19F1 900064    5353            mov     dptr,#0x0064
19F4 C004      5354            push    ar4
19F6 C005      5355            push    ar5
19F8 C006      5356            push    ar6
19FA C007      5357            push    ar7
19FC 120000    5358            lcall   __mulint
19FF AA82      5359            mov     r2,dpl
1A01 AB83      5360            mov     r3,dph
1A03 D007      5361            pop     ar7
1A05 D006      5362            pop     ar6
1A07 D005      5363            pop     ar5
1A09 D004      5364            pop     ar4
1A0B 85D800    5365            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
1A0E 85D901    5366            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
1A11 900064    5367            mov     dptr,#0x0064
1A14 C002      5368            push    ar2
1A16 C003      5369            push    ar3
1A18 C004      5370            push    ar4
1A1A C005      5371            push    ar5
1A1C C006      5372            push    ar6
1A1E C007      5373            push    ar7
1A20 120000    5374            lcall   __mulint
1A23 A882      5375            mov     r0,dpl
1A25 A983      5376            mov     r1,dph
1A27 750002    5377            mov     __divsint_PARM_2,#0x02
1A2A E4        5378            clr     a
1A2B F501      5379            mov     (__divsint_PARM_2 + 1),a
1A2D 8882      5380            mov     dpl,r0
1A2F 8983      5381            mov     dph,r1
1A31 120000    5382            lcall   __divsint
1A34 A882      5383            mov     r0,dpl
1A36 A983      5384            mov     r1,dph
1A38 D007      5385            pop     ar7
1A3A D006      5386            pop     ar6
1A3C D005      5387            pop     ar5
1A3E D004      5388            pop     ar4
1A40 D003      5389            pop     ar3
1A42 D002      5390            pop     ar2
1A44 C3        5391            clr     c
1A45 E8        5392            mov     a,r0
1A46 9A        5393            subb    a,r2
1A47 E9        5394            mov     a,r1
1A48 6480      5395            xrl     a,#0x80
1A4A 8BF0      5396            mov     b,r3
1A4C 63F080    5397            xrl     b,#0x80
1A4F 95F0      5398            subb    a,b
1A51 5000      5399            jnc     L039067?
1A53 020000    5400            ljmp    L039017?
1A56           5401   L039067?:
1A56           5402   ;        main.c:1079: pwm_left = vy_error*100/(vx_error+vy_error);
1A56 C004      5403            push    ar4
1A58 C005      5404            push    ar5
1A5A 8E00      5405            mov     __mulint_PARM_2,r6
1A5C 8F01      5406            mov     (__mulint_PARM_2 + 1),r7
1A5E 900064    5407            mov     dptr,#0x0064
1A61 C004      5408            push    ar4
1A63 C005      5409            push    ar5
1A65 C006      5410            push    ar6
1A67 C007      5411            push    ar7
1A69 120000    5412            lcall   __mulint
1A6C AA82      5413            mov     r2,dpl
1A6E AB83      5414            mov     r3,dph
1A70 D007      5415            pop     ar7
1A72 D006      5416            pop     ar6
1A74 EE        5417            mov     a,r6
1A75 2518      5418            add     a,_Joystick_Control_sloc6_1_0
1A77 F500      5419            mov     __divsint_PARM_2,a
1A79 EF        5420            mov     a,r7
1A7A 3519      5421            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1A7C F501      5422            mov     (__divsint_PARM_2 + 1),a
1A7E 8A82      5423            mov     dpl,r2
1A80 8B83      5424            mov     dph,r3
1A82 C006      5425            push    ar6
1A84 C007      5426            push    ar7
1A86 120000    5427            lcall   __divsint
1A89 AA82      5428            mov     r2,dpl
1A8B D007      5429            pop     ar7
1A8D D006      5430            pop     ar6
1A8F D005      5431            pop     ar5
1A91 D004      5432            pop     ar4
1A93 905388    5433            mov     dptr,#_pwm_left
1A96 EA        5434            mov     a,r2
1A97 F0        5435            movx    @dptr,a
1A98           5436   ;        main.c:1080: pwm_right = vy_error*pwm_corr; 
1A98 8E82      5437            mov     dpl,r6
1A9A 8F83      5438            mov     dph,r7
1A9C C006      5439            push    ar6
1A9E C007      5440            push    ar7
1AA0 120000    5441            lcall   ___sint2fs
1AA3 AA82      5442            mov     r2,dpl
1AA5 AB83      5443            mov     r3,dph
1AA7 ACF0      5444            mov     r4,b
1AA9 FD        5445            mov     r5,a
1AAA 905088    5446            mov     dptr,#_pwm_corr
1AAD E0        5447            movx    a,@dptr
1AAE C0E0      5448            push    acc
1AB0 A3        5449            inc     dptr
1AB1 E0        5450            movx    a,@dptr
1AB2 C0E0      5451            push    acc
1AB4 A3        5452            inc     dptr
1AB5 E0        5453            movx    a,@dptr
1AB6 C0E0      5454            push    acc
1AB8 A3        5455            inc     dptr
1AB9 E0        5456            movx    a,@dptr
1ABA C0E0      5457            push    acc
1ABC 8A82      5458            mov     dpl,r2
1ABE 8B83      5459            mov     dph,r3
1AC0 8CF0      5460            mov     b,r4
1AC2 ED        5461            mov     a,r5
1AC3 120000    5462            lcall   ___fsmul
1AC6 AA82      5463            mov     r2,dpl
1AC8 AB83      5464            mov     r3,dph
1ACA ACF0      5465            mov     r4,b
1ACC FD        5466            mov     r5,a
1ACD E581      5467            mov     a,sp
1ACF 24FC      5468            add     a,#0xfc
1AD1 F581      5469            mov     sp,a
1AD3 D007      5470            pop     ar7
1AD5 D006      5471            pop     ar6
1AD7 8A82      5472            mov     dpl,r2
1AD9 8B83      5473            mov     dph,r3
1ADB 8CF0      5474            mov     b,r4
1ADD ED        5475            mov     a,r5
1ADE C004      5476            push    ar4
1AE0 C005      5477            push    ar5
1AE2 C006      5478            push    ar6
1AE4 C007      5479            push    ar7
1AE6 120000    5480            lcall   ___fs2uchar
1AE9 E582      5481            mov     a,dpl
1AEB D007      5482            pop     ar7
1AED D006      5483            pop     ar6
1AEF D005      5484            pop     ar5
1AF1 D004      5485            pop     ar4
1AF3 905348    5486            mov     dptr,#_pwm_right
1AF6 F0        5487            movx    @dptr,a
1AF7 D005      5488            pop     ar5
1AF9 D004      5489            pop     ar4
1AFB 020000    5490            ljmp    L039023?
1AFE           5491   L039017?:
1AFE           5492   ;        main.c:1083: pwm_left = vx_error*100/(vx_error+vy_error);
1AFE C004      5493            push    ar4
1B00 C005      5494            push    ar5
1B02 851800    5495            mov     __mulint_PARM_2,_Joystick_Control_sloc6_1_0
1B05 851901    5496            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc6_1_0 + 1)
1B08 900064    5497            mov     dptr,#0x0064
1B0B C004      5498            push    ar4
1B0D C005      5499            push    ar5
1B0F C006      5500            push    ar6
1B11 C007      5501            push    ar7
1B13 120000    5502            lcall   __mulint
1B16 AA82      5503            mov     r2,dpl
1B18 AB83      5504            mov     r3,dph
1B1A D007      5505            pop     ar7
1B1C D006      5506            pop     ar6
1B1E EE        5507            mov     a,r6
1B1F 2518      5508            add     a,_Joystick_Control_sloc6_1_0
1B21 F500      5509            mov     __divsint_PARM_2,a
1B23 EF        5510            mov     a,r7
1B24 3519      5511            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1B26 F501      5512            mov     (__divsint_PARM_2 + 1),a
1B28 8A82      5513            mov     dpl,r2
1B2A 8B83      5514            mov     dph,r3
1B2C C006      5515            push    ar6
1B2E C007      5516            push    ar7
1B30 120000    5517            lcall   __divsint
1B33 AA82      5518            mov     r2,dpl
1B35 D007      5519            pop     ar7
1B37 D006      5520            pop     ar6
1B39 D005      5521            pop     ar5
1B3B D004      5522            pop     ar4
1B3D 905388    5523            mov     dptr,#_pwm_left
1B40 EA        5524            mov     a,r2
1B41 F0        5525            movx    @dptr,a
1B42           5526   ;        main.c:1084: pwm_right = vx_error*pwm_corr; 
1B42 851882    5527            mov     dpl,_Joystick_Control_sloc6_1_0
1B45 851983    5528            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
1B48 C006      5529            push    ar6
1B4A C007      5530            push    ar7
1B4C 120000    5531            lcall   ___sint2fs
1B4F AA82      5532            mov     r2,dpl
1B51 AB83      5533            mov     r3,dph
1B53 ACF0      5534            mov     r4,b
1B55 FD        5535            mov     r5,a
1B56 905088    5536            mov     dptr,#_pwm_corr
1B59 E0        5537            movx    a,@dptr
1B5A C0E0      5538            push    acc
1B5C A3        5539            inc     dptr
1B5D E0        5540            movx    a,@dptr
1B5E C0E0      5541            push    acc
1B60 A3        5542            inc     dptr
1B61 E0        5543            movx    a,@dptr
1B62 C0E0      5544            push    acc
1B64 A3        5545            inc     dptr
1B65 E0        5546            movx    a,@dptr
1B66 C0E0      5547            push    acc
1B68 8A82      5548            mov     dpl,r2
1B6A 8B83      5549            mov     dph,r3
1B6C 8CF0      5550            mov     b,r4
1B6E ED        5551            mov     a,r5
1B6F 120000    5552            lcall   ___fsmul
1B72 AA82      5553            mov     r2,dpl
1B74 AB83      5554            mov     r3,dph
1B76 ACF0      5555            mov     r4,b
1B78 FD        5556            mov     r5,a
1B79 E581      5557            mov     a,sp
1B7B 24FC      5558            add     a,#0xfc
1B7D F581      5559            mov     sp,a
1B7F D007      5560            pop     ar7
1B81 D006      5561            pop     ar6
1B83 8A82      5562            mov     dpl,r2
1B85 8B83      5563            mov     dph,r3
1B87 8CF0      5564            mov     b,r4
1B89 ED        5565            mov     a,r5
1B8A C004      5566            push    ar4
1B8C C005      5567            push    ar5
1B8E C006      5568            push    ar6
1B90 C007      5569            push    ar7
1B92 120000    5570            lcall   ___fs2uchar
1B95 E582      5571            mov     a,dpl
1B97 D007      5572            pop     ar7
1B99 D006      5573            pop     ar6
1B9B D005      5574            pop     ar5
1B9D D004      5575            pop     ar4
1B9F 905348    5576            mov     dptr,#_pwm_right
1BA2 F0        5577            movx    @dptr,a
1BA3           5578   ;        main.c:1116: return; 
1BA3 D005      5579            pop     ar5
1BA5 D004      5580            pop     ar4
1BA7           5581   ;        main.c:1084: pwm_right = vx_error*pwm_corr; 
1BA7           5582   L039023?:
1BA7           5583   ;        main.c:1089: if (vy_err<0){
1BA7 E539      5584            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
1BA9 20E750    5585            jb      acc.7,L039068?
1BAC 22        5586            ret
1BAD           5587   L039068?:
1BAD           5588   ;        main.c:1090: L_motor_dir = 1; 
1BAD 905308    5589            mov     dptr,#_L_motor_dir
1BB0 7401      5590            mov     a,#0x01
1BB2 F0        5591            movx    @dptr,a
1BB3           5592   ;        main.c:1091: R_motor_dir = 1; 
1BB3 9052C8    5593            mov     dptr,#_R_motor_dir
1BB6 7401      5594            mov     a,#0x01
1BB8 F0        5595            movx    @dptr,a
1BB9           5596   ;        main.c:1093: if (vx_err>0){
1BB9 C3        5597            clr     c
1BBA E4        5598            clr     a
1BBB 9578      5599            subb    a,_Joystick_Control_sloc4_1_0
1BBD E4        5600            clr     a
1BBE 6480      5601            xrl     a,#0x80
1BC0 8579F0    5602            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
1BC3 63F080    5603            xrl     b,#0x80
1BC6 95F0      5604            subb    a,b
1BC8 4000      5605            jc      L039069?
1BCA 020000    5606            ljmp    L039031?
1BCD           5607   L039069?:
1BCD           5608   ;        main.c:1094: if (vy*100<=vy_thres*100/2){
1BCD 8C00      5609            mov     __mulint_PARM_2,r4
1BCF 8D01      5610            mov     (__mulint_PARM_2 + 1),r5
1BD1 900064    5611            mov     dptr,#0x0064
1BD4 C006      5612            push    ar6
1BD6 C007      5613            push    ar7
1BD8 120000    5614            lcall   __mulint
1BDB AA82      5615            mov     r2,dpl
1BDD AB83      5616            mov     r3,dph
1BDF D007      5617            pop     ar7
1BE1 D006      5618            pop     ar6
1BE3 85D800    5619            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
1BE6 85D901    5620            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
1BE9 900064    5621            mov     dptr,#0x0064
1BEC C002      5622            push    ar2
1BEE C003      5623            push    ar3
1BF0 C006      5624            push    ar6
1BF2 C007      5625            push    ar7
1BF4 120000    5626            lcall   __mulint
1BF7 A882      5627            mov     r0,dpl
1BF9 A983      5628            mov     r1,dph
1BFB 750002    5629            mov     __divsint_PARM_2,#0x02
1BFE E4        5630            clr     a
1BFF F501      5631            mov     (__divsint_PARM_2 + 1),a
1C01 8882      5632            mov     dpl,r0
1C03 8983      5633            mov     dph,r1
1C05 120000    5634            lcall   __divsint
1C08 A882      5635            mov     r0,dpl
1C0A A983      5636            mov     r1,dph
1C0C D007      5637            pop     ar7
1C0E D006      5638            pop     ar6
1C10 D003      5639            pop     ar3
1C12 D002      5640            pop     ar2
1C14 C3        5641            clr     c
1C15 E8        5642            mov     a,r0
1C16 9A        5643            subb    a,r2
1C17 E9        5644            mov     a,r1
1C18 6480      5645            xrl     a,#0x80
1C1A 8BF0      5646            mov     b,r3
1C1C 63F080    5647            xrl     b,#0x80
1C1F 95F0      5648            subb    a,b
1C21 5000      5649            jnc     L039070?
1C23 020000    5650            ljmp    L039025?
1C26           5651   L039070?:
1C26           5652   ;        main.c:1095: pwm_left = vy_error; 
1C26 905388    5653            mov     dptr,#_pwm_left
1C29 EE        5654            mov     a,r6
1C2A F0        5655            movx    @dptr,a
1C2B           5656   ;        main.c:1096: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
1C2B 905088    5657            mov     dptr,#_pwm_corr
1C2E E0        5658            movx    a,@dptr
1C2F F5C8      5659            mov     _Joystick_Control_sloc5_1_0,a
1C31 A3        5660            inc     dptr
1C32 E0        5661            movx    a,@dptr
1C33 F5C9      5662            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1C35 A3        5663            inc     dptr
1C36 E0        5664            movx    a,@dptr
1C37 F5CA      5665            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1C39 A3        5666            inc     dptr
1C3A E0        5667            movx    a,@dptr
1C3B F5CB      5668            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1C3D 8E82      5669            mov     dpl,r6
1C3F 8F83      5670            mov     dph,r7
1C41 C006      5671            push    ar6
1C43 C007      5672            push    ar7
1C45 120000    5673            lcall   ___sint2fs
1C48 AA82      5674            mov     r2,dpl
1C4A AB83      5675            mov     r3,dph
1C4C A8F0      5676            mov     r0,b
1C4E F9        5677            mov     r1,a
1C4F C002      5678            push    ar2
1C51 C003      5679            push    ar3
1C53 C000      5680            push    ar0
1C55 C001      5681            push    ar1
1C57 85C882    5682            mov     dpl,_Joystick_Control_sloc5_1_0
1C5A 85C983    5683            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1C5D 85CAF0    5684            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1C60 E5CB      5685            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1C62 120000    5686            lcall   ___fsmul
1C65 AA82      5687            mov     r2,dpl
1C67 AB83      5688            mov     r3,dph
1C69 A8F0      5689            mov     r0,b
1C6B F9        5690            mov     r1,a
1C6C E581      5691            mov     a,sp
1C6E 24FC      5692            add     a,#0xfc
1C70 F581      5693            mov     sp,a
1C72 C002      5694            push    ar2
1C74 C003      5695            push    ar3
1C76 C000      5696            push    ar0
1C78 C001      5697            push    ar1
1C7A 900000    5698            mov     dptr,#0x0000
1C7D 75F0C8    5699            mov     b,#0xC8
1C80 7442      5700            mov     a,#0x42
1C82 120000    5701            lcall   ___fsmul
1C85 8582C8    5702            mov     _Joystick_Control_sloc5_1_0,dpl
1C88 8583C9    5703            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1C8B 85F0CA    5704            mov     (_Joystick_Control_sloc5_1_0 + 2),b
1C8E F5CB      5705            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1C90 E581      5706            mov     a,sp
1C92 24FC      5707            add     a,#0xfc
1C94 F581      5708            mov     sp,a
1C96 D007      5709            pop     ar7
1C98 D006      5710            pop     ar6
1C9A EE        5711            mov     a,r6
1C9B 2518      5712            add     a,_Joystick_Control_sloc6_1_0
1C9D F582      5713            mov     dpl,a
1C9F EF        5714            mov     a,r7
1CA0 3519      5715            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1CA2 F583      5716            mov     dph,a
1CA4 120000    5717            lcall   ___sint2fs
1CA7 AA82      5718            mov     r2,dpl
1CA9 AB83      5719            mov     r3,dph
1CAB A8F0      5720            mov     r0,b
1CAD F9        5721            mov     r1,a
1CAE C002      5722            push    ar2
1CB0 C003      5723            push    ar3
1CB2 C000      5724            push    ar0
1CB4 C001      5725            push    ar1
1CB6 85C882    5726            mov     dpl,_Joystick_Control_sloc5_1_0
1CB9 85C983    5727            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1CBC 85CAF0    5728            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1CBF E5CB      5729            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1CC1 120000    5730            lcall   ___fsdiv
1CC4 AA82      5731            mov     r2,dpl
1CC6 AB83      5732            mov     r3,dph
1CC8 A8F0      5733            mov     r0,b
1CCA F9        5734            mov     r1,a
1CCB E581      5735            mov     a,sp
1CCD 24FC      5736            add     a,#0xfc
1CCF F581      5737            mov     sp,a
1CD1 8A82      5738            mov     dpl,r2
1CD3 8B83      5739            mov     dph,r3
1CD5 88F0      5740            mov     b,r0
1CD7 E9        5741            mov     a,r1
1CD8 120000    5742            lcall   ___fs2uchar
1CDB E582      5743            mov     a,dpl
1CDD 905348    5744            mov     dptr,#_pwm_right
1CE0 F0        5745            movx    @dptr,a
1CE1 22        5746            ret
1CE2           5747   L039025?:
1CE2           5748   ;        main.c:1099: pwm_left = vx_error; 
1CE2 905388    5749            mov     dptr,#_pwm_left
1CE5 E518      5750            mov     a,_Joystick_Control_sloc6_1_0
1CE7 F0        5751            movx    @dptr,a
1CE8           5752   ;        main.c:1100: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
1CE8 905088    5753            mov     dptr,#_pwm_corr
1CEB E0        5754            movx    a,@dptr
1CEC F5C8      5755            mov     _Joystick_Control_sloc5_1_0,a
1CEE A3        5756            inc     dptr
1CEF E0        5757            movx    a,@dptr
1CF0 F5C9      5758            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1CF2 A3        5759            inc     dptr
1CF3 E0        5760            movx    a,@dptr
1CF4 F5CA      5761            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1CF6 A3        5762            inc     dptr
1CF7 E0        5763            movx    a,@dptr
1CF8 F5CB      5764            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1CFA 851882    5765            mov     dpl,_Joystick_Control_sloc6_1_0
1CFD 851983    5766            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
1D00 C006      5767            push    ar6
1D02 C007      5768            push    ar7
1D04 120000    5769            lcall   ___sint2fs
1D07 AA82      5770            mov     r2,dpl
1D09 AB83      5771            mov     r3,dph
1D0B A8F0      5772            mov     r0,b
1D0D F9        5773            mov     r1,a
1D0E C002      5774            push    ar2
1D10 C003      5775            push    ar3
1D12 C000      5776            push    ar0
1D14 C001      5777            push    ar1
1D16 85C882    5778            mov     dpl,_Joystick_Control_sloc5_1_0
1D19 85C983    5779            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1D1C 85CAF0    5780            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1D1F E5CB      5781            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1D21 120000    5782            lcall   ___fsmul
1D24 AA82      5783            mov     r2,dpl
1D26 AB83      5784            mov     r3,dph
1D28 A8F0      5785            mov     r0,b
1D2A F9        5786            mov     r1,a
1D2B E581      5787            mov     a,sp
1D2D 24FC      5788            add     a,#0xfc
1D2F F581      5789            mov     sp,a
1D31 C002      5790            push    ar2
1D33 C003      5791            push    ar3
1D35 C000      5792            push    ar0
1D37 C001      5793            push    ar1
1D39 900000    5794            mov     dptr,#0x0000
1D3C 75F0C8    5795            mov     b,#0xC8
1D3F 7442      5796            mov     a,#0x42
1D41 120000    5797            lcall   ___fsmul
1D44 8582C8    5798            mov     _Joystick_Control_sloc5_1_0,dpl
1D47 8583C9    5799            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1D4A 85F0CA    5800            mov     (_Joystick_Control_sloc5_1_0 + 2),b
1D4D F5CB      5801            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1D4F E581      5802            mov     a,sp
1D51 24FC      5803            add     a,#0xfc
1D53 F581      5804            mov     sp,a
1D55 D007      5805            pop     ar7
1D57 D006      5806            pop     ar6
1D59 EE        5807            mov     a,r6
1D5A 2518      5808            add     a,_Joystick_Control_sloc6_1_0
1D5C F582      5809            mov     dpl,a
1D5E EF        5810            mov     a,r7
1D5F 3519      5811            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1D61 F583      5812            mov     dph,a
1D63 120000    5813            lcall   ___sint2fs
1D66 AA82      5814            mov     r2,dpl
1D68 AB83      5815            mov     r3,dph
1D6A A8F0      5816            mov     r0,b
1D6C F9        5817            mov     r1,a
1D6D C002      5818            push    ar2
1D6F C003      5819            push    ar3
1D71 C000      5820            push    ar0
1D73 C001      5821            push    ar1
1D75 85C882    5822            mov     dpl,_Joystick_Control_sloc5_1_0
1D78 85C983    5823            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1D7B 85CAF0    5824            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1D7E E5CB      5825            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1D80 120000    5826            lcall   ___fsdiv
1D83 AA82      5827            mov     r2,dpl
1D85 AB83      5828            mov     r3,dph
1D87 A8F0      5829            mov     r0,b
1D89 F9        5830            mov     r1,a
1D8A E581      5831            mov     a,sp
1D8C 24FC      5832            add     a,#0xfc
1D8E F581      5833            mov     sp,a
1D90 8A82      5834            mov     dpl,r2
1D92 8B83      5835            mov     dph,r3
1D94 88F0      5836            mov     b,r0
1D96 E9        5837            mov     a,r1
1D97 120000    5838            lcall   ___fs2uchar
1D9A E582      5839            mov     a,dpl
1D9C 905348    5840            mov     dptr,#_pwm_right
1D9F F0        5841            movx    @dptr,a
1DA0 22        5842            ret
1DA1           5843   L039031?:
1DA1           5844   ;        main.c:1105: if (vy*100<=vy_thres*100/2){
1DA1 8C00      5845            mov     __mulint_PARM_2,r4
1DA3 8D01      5846            mov     (__mulint_PARM_2 + 1),r5
1DA5 900064    5847            mov     dptr,#0x0064
1DA8 C006      5848            push    ar6
1DAA C007      5849            push    ar7
1DAC 120000    5850            lcall   __mulint
1DAF AA82      5851            mov     r2,dpl
1DB1 AB83      5852            mov     r3,dph
1DB3 D007      5853            pop     ar7
1DB5 D006      5854            pop     ar6
1DB7 85D800    5855            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
1DBA 85D901    5856            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
1DBD 900064    5857            mov     dptr,#0x0064
1DC0 C002      5858            push    ar2
1DC2 C003      5859            push    ar3
1DC4 C006      5860            push    ar6
1DC6 C007      5861            push    ar7
1DC8 120000    5862            lcall   __mulint
1DCB AC82      5863            mov     r4,dpl
1DCD AD83      5864            mov     r5,dph
1DCF 750002    5865            mov     __divsint_PARM_2,#0x02
1DD2 E4        5866            clr     a
1DD3 F501      5867            mov     (__divsint_PARM_2 + 1),a
1DD5 8C82      5868            mov     dpl,r4
1DD7 8D83      5869            mov     dph,r5
1DD9 120000    5870            lcall   __divsint
1DDC AC82      5871            mov     r4,dpl
1DDE AD83      5872            mov     r5,dph
1DE0 D007      5873            pop     ar7
1DE2 D006      5874            pop     ar6
1DE4 D003      5875            pop     ar3
1DE6 D002      5876            pop     ar2
1DE8 C3        5877            clr     c
1DE9 EC        5878            mov     a,r4
1DEA 9A        5879            subb    a,r2
1DEB ED        5880            mov     a,r5
1DEC 6480      5881            xrl     a,#0x80
1DEE 8BF0      5882            mov     b,r3
1DF0 63F080    5883            xrl     b,#0x80
1DF3 95F0      5884            subb    a,b
1DF5 5000      5885            jnc     L039071?
1DF7 020000    5886            ljmp    L039028?
1DFA           5887   L039071?:
1DFA           5888   ;        main.c:1106: pwm_left = vy_error*100/(vx_error+vy_error);
1DFA 8E00      5889            mov     __mulint_PARM_2,r6
1DFC 8F01      5890            mov     (__mulint_PARM_2 + 1),r7
1DFE 900064    5891            mov     dptr,#0x0064
1E01 C006      5892            push    ar6
1E03 C007      5893            push    ar7
1E05 120000    5894            lcall   __mulint
1E08 AA82      5895            mov     r2,dpl
1E0A AB83      5896            mov     r3,dph
1E0C D007      5897            pop     ar7
1E0E D006      5898            pop     ar6
1E10 EE        5899            mov     a,r6
1E11 2518      5900            add     a,_Joystick_Control_sloc6_1_0
1E13 F500      5901            mov     __divsint_PARM_2,a
1E15 EF        5902            mov     a,r7
1E16 3519      5903            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1E18 F501      5904            mov     (__divsint_PARM_2 + 1),a
1E1A 8A82      5905            mov     dpl,r2
1E1C 8B83      5906            mov     dph,r3
1E1E C006      5907            push    ar6
1E20 C007      5908            push    ar7
1E22 120000    5909            lcall   __divsint
1E25 AA82      5910            mov     r2,dpl
1E27 D007      5911            pop     ar7
1E29 D006      5912            pop     ar6
1E2B 905388    5913            mov     dptr,#_pwm_left
1E2E EA        5914            mov     a,r2
1E2F F0        5915            movx    @dptr,a
1E30           5916   ;        main.c:1107: pwm_right =pwm_corr*vy_error; 
1E30 905088    5917            mov     dptr,#_pwm_corr
1E33 E0        5918            movx    a,@dptr
1E34 F5C8      5919            mov     _Joystick_Control_sloc5_1_0,a
1E36 A3        5920            inc     dptr
1E37 E0        5921            movx    a,@dptr
1E38 F5C9      5922            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1E3A A3        5923            inc     dptr
1E3B E0        5924            movx    a,@dptr
1E3C F5CA      5925            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1E3E A3        5926            inc     dptr
1E3F E0        5927            movx    a,@dptr
1E40 F5CB      5928            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1E42 8E82      5929            mov     dpl,r6
1E44 8F83      5930            mov     dph,r7
1E46 120000    5931            lcall   ___sint2fs
1E49 A882      5932            mov     r0,dpl
1E4B A983      5933            mov     r1,dph
1E4D AAF0      5934            mov     r2,b
1E4F FB        5935            mov     r3,a
1E50 C000      5936            push    ar0
1E52 C001      5937            push    ar1
1E54 C002      5938            push    ar2
1E56 C003      5939            push    ar3
1E58 85C882    5940            mov     dpl,_Joystick_Control_sloc5_1_0
1E5B 85C983    5941            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1E5E 85CAF0    5942            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1E61 E5CB      5943            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1E63 120000    5944            lcall   ___fsmul
1E66 AA82      5945            mov     r2,dpl
1E68 AB83      5946            mov     r3,dph
1E6A ACF0      5947            mov     r4,b
1E6C FD        5948            mov     r5,a
1E6D E581      5949            mov     a,sp
1E6F 24FC      5950            add     a,#0xfc
1E71 F581      5951            mov     sp,a
1E73 8A82      5952            mov     dpl,r2
1E75 8B83      5953            mov     dph,r3
1E77 8CF0      5954            mov     b,r4
1E79 ED        5955            mov     a,r5
1E7A 120000    5956            lcall   ___fs2uchar
1E7D E582      5957            mov     a,dpl
1E7F 905348    5958            mov     dptr,#_pwm_right
1E82 F0        5959            movx    @dptr,a
1E83 22        5960            ret
1E84           5961   L039028?:
1E84           5962   ;        main.c:1110: pwm_left = vx_error*100/(vx_error+vy_error);
1E84 851800    5963            mov     __mulint_PARM_2,_Joystick_Control_sloc6_1_0
1E87 851901    5964            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc6_1_0 + 1)
1E8A 900064    5965            mov     dptr,#0x0064
1E8D C006      5966            push    ar6
1E8F C007      5967            push    ar7
1E91 120000    5968            lcall   __mulint
1E94 AA82      5969            mov     r2,dpl
1E96 AB83      5970            mov     r3,dph
1E98 D007      5971            pop     ar7
1E9A D006      5972            pop     ar6
1E9C EE        5973            mov     a,r6
1E9D 2518      5974            add     a,_Joystick_Control_sloc6_1_0
1E9F F500      5975            mov     __divsint_PARM_2,a
1EA1 EF        5976            mov     a,r7
1EA2 3519      5977            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1EA4 F501      5978            mov     (__divsint_PARM_2 + 1),a
1EA6 8A82      5979            mov     dpl,r2
1EA8 8B83      5980            mov     dph,r3
1EAA 120000    5981            lcall   __divsint
1EAD AA82      5982            mov     r2,dpl
1EAF 905388    5983            mov     dptr,#_pwm_left
1EB2 EA        5984            mov     a,r2
1EB3 F0        5985            movx    @dptr,a
1EB4           5986   ;        main.c:1111: pwm_right = pwm_corr*vx_error; 
1EB4 905088    5987            mov     dptr,#_pwm_corr
1EB7 E0        5988            movx    a,@dptr
1EB8 FA        5989            mov     r2,a
1EB9 A3        5990            inc     dptr
1EBA E0        5991            movx    a,@dptr
1EBB FB        5992            mov     r3,a
1EBC A3        5993            inc     dptr
1EBD E0        5994            movx    a,@dptr
1EBE FC        5995            mov     r4,a
1EBF A3        5996            inc     dptr
1EC0 E0        5997            movx    a,@dptr
1EC1 FD        5998            mov     r5,a
1EC2 851882    5999            mov     dpl,_Joystick_Control_sloc6_1_0
1EC5 851983    6000            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
1EC8 C002      6001            push    ar2
1ECA C003      6002            push    ar3
1ECC C004      6003            push    ar4
1ECE C005      6004            push    ar5
1ED0 120000    6005            lcall   ___sint2fs
1ED3 AE82      6006            mov     r6,dpl
1ED5 AF83      6007            mov     r7,dph
1ED7 A8F0      6008            mov     r0,b
1ED9 F9        6009            mov     r1,a
1EDA D005      6010            pop     ar5
1EDC D004      6011            pop     ar4
1EDE D003      6012            pop     ar3
1EE0 D002      6013            pop     ar2
1EE2 C006      6014            push    ar6
1EE4 C007      6015            push    ar7
1EE6 C000      6016            push    ar0
1EE8 C001      6017            push    ar1
1EEA 8A82      6018            mov     dpl,r2
1EEC 8B83      6019            mov     dph,r3
1EEE 8CF0      6020            mov     b,r4
1EF0 ED        6021            mov     a,r5
1EF1 120000    6022            lcall   ___fsmul
1EF4 AA82      6023            mov     r2,dpl
1EF6 AB83      6024            mov     r3,dph
1EF8 ACF0      6025            mov     r4,b
1EFA FD        6026            mov     r5,a
1EFB E581      6027            mov     a,sp
1EFD 24FC      6028            add     a,#0xfc
1EFF F581      6029            mov     sp,a
1F01 8A82      6030            mov     dpl,r2
1F03 8B83      6031            mov     dph,r3
1F05 8CF0      6032            mov     b,r4
1F07 ED        6033            mov     a,r5
1F08 120000    6034            lcall   ___fs2uchar
1F0B E582      6035            mov     a,dpl
1F0D 905348    6036            mov     dptr,#_pwm_right
1F10 F0        6037            movx    @dptr,a
1F11           6038   ;        main.c:1116: return; 
1F11 22        6039            ret
1F12           6040   ;------------------------------------------------------------
1F12           6041   ;Allocation info for local variables in function 'main'
1F12           6042   ;------------------------------------------------------------
1F12           6043   ;c                         Allocated with name '_main_c_1_232'
1F12           6044   ;vx                        Allocated with name '_main_vx_1_232'
1F12           6045   ;vy                        Allocated with name '_main_vy_1_232'
1F12           6046   ;auto_mode                 Allocated with name '_main_auto_mode_1_232'
1F12           6047   ;pick_done                 Allocated with name '_main_pick_done_1_232'
1F12           6048   ;pick                      Allocated with name '_main_pick_1_232'
1F12           6049   ;angle                     Allocated with name '_main_angle_1_232'
1F12           6050   ;------------------------------------------------------------
1F12           6051   ;        main.c:1119: void main (void)
1F12           6052   ;        -----------------------------------------
1F12           6053   ;         function main
1F12           6054   ;        -----------------------------------------
1F12           6055   _main:
1F12           6056   ;        main.c:1122: xdata int vx = 0, vy = 0; 
1F12 90D3F0    6057            mov     dptr,#_main_vx_1_232
1F15 E4        6058            clr     a
1F16 F0        6059            movx    @dptr,a
1F17 A3        6060            inc     dptr
1F18 F0        6061            movx    @dptr,a
1F19 90D430    6062            mov     dptr,#_main_vy_1_232
1F1C E4        6063            clr     a
1F1D F0        6064            movx    @dptr,a
1F1E A3        6065            inc     dptr
1F1F F0        6066            movx    @dptr,a
1F20           6067   ;        main.c:1123: xdata uint8_t auto_mode = 0;
1F20 90D480    6068            mov     dptr,#_main_auto_mode_1_232
1F23           6069   ;        main.c:1125: xdata uint8_t pick = 0;
1F23 E4        6070            clr     a
1F24 F0        6071            movx    @dptr,a
1F25 90D4D0    6072            mov     dptr,#_main_pick_1_232
1F28 F0        6073            movx    @dptr,a
1F29           6074   ;        main.c:1129: Init_all();
1F29 120000    6075            lcall   _Init_all
1F2C           6076   ;        main.c:1130: BMM150_Init();
1F2C 120000    6077            lcall   _BMM150_Init
1F2F           6078   ;        main.c:1131: waitms(500);
1F2F 9001F4    6079            mov     dptr,#0x01F4
1F32 120000    6080            lcall   _waitms
1F35           6081   ;        main.c:1132: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
1F35 7410      6082            mov     a,#__str_12
1F37 C0E0      6083            push    acc
1F39 7418      6084            mov     a,#(__str_12 >> 8)
1F3B C0E0      6085            push    acc
1F3D 7480      6086            mov     a,#0x80
1F3F C0E0      6087            push    acc
1F41 120000    6088            lcall   _printf
1F44 1581      6089            dec     sp
1F46 1581      6090            dec     sp
1F48 1581      6091            dec     sp
1F4A           6092   ;        main.c:1133: UART1_Init(9600);
1F4A 902580    6093            mov     dptr,#0x2580
1F4D E4        6094            clr     a
1F4E F5F0      6095            mov     b,a
1F50 120000    6096            lcall   _UART1_Init
1F53           6097   ;        main.c:1135: ReceptionOff();
1F53 120000    6098            lcall   _ReceptionOff
1F56           6099   ;        main.c:1138: SendATCommand("AT+VER\r\n");
1F56 901850    6100            mov     dptr,#__str_13
1F59 75F080    6101            mov     b,#0x80
1F5C 120000    6102            lcall   _SendATCommand
1F5F           6103   ;        main.c:1139: SendATCommand("AT+BAUD\r\n");
1F5F 901890    6104            mov     dptr,#__str_14
1F62 75F080    6105            mov     b,#0x80
1F65 120000    6106            lcall   _SendATCommand
1F68           6107   ;        main.c:1140: SendATCommand("AT+RFID\r\n");
1F68 9018D0    6108            mov     dptr,#__str_15
1F6B 75F080    6109            mov     b,#0x80
1F6E 120000    6110            lcall   _SendATCommand
1F71           6111   ;        main.c:1141: SendATCommand("AT+DVID\r\n");
1F71 901910    6112            mov     dptr,#__str_16
1F74 75F080    6113            mov     b,#0x80
1F77 120000    6114            lcall   _SendATCommand
1F7A           6115   ;        main.c:1142: SendATCommand("AT+RFC002\r\n");
1F7A 901950    6116            mov     dptr,#__str_17
1F7D 75F080    6117            mov     b,#0x80
1F80 120000    6118            lcall   _SendATCommand
1F83           6119   ;        main.c:1143: SendATCommand("AT+POWE\r\n");
1F83 901990    6120            mov     dptr,#__str_18
1F86 75F080    6121            mov     b,#0x80
1F89 120000    6122            lcall   _SendATCommand
1F8C           6123   ;        main.c:1144: SendATCommand("AT+CLSS\r\n");
1F8C 9019D0    6124            mov     dptr,#__str_19
1F8F 75F080    6125            mov     b,#0x80
1F92 120000    6126            lcall   _SendATCommand
1F95           6127   ;        main.c:1145: SendATCommand("AT+DVIDEF11\r\n");  
1F95 901A10    6128            mov     dptr,#__str_20
1F98 75F080    6129            mov     b,#0x80
1F9B 120000    6130            lcall   _SendATCommand
1F9E           6131   ;        main.c:1148: L_bridge_1 = 0; 
1F9E C2A1      6132            clr     _P2_1
1FA0           6133   ;        main.c:1149: L_bridge_2 = 0; 
1FA0 C2A2      6134            clr     _P2_2
1FA2           6135   ;        main.c:1150: R_bridge_1 = 0; 
1FA2 C2A4      6136            clr     _P2_4
1FA4           6137   ;        main.c:1151: R_bridge_2 = 0; 
1FA4 C2A3      6138            clr     _P2_3
1FA6           6139   ;        main.c:1153: while(1)
1FA6           6140   L040016?:
1FA6           6141   ;        main.c:1156: if(pick==1){
1FA6 90D4D0    6142            mov     dptr,#_main_pick_1_232
1FA9 E0        6143            movx    a,@dptr
1FAA FA        6144            mov     r2,a
1FAB BA0190    6145            cjne    r2,#0x01,L040002?
1FAE           6146   ;        main.c:1157: servo_pick();
1FAE 120000    6147            lcall   _servo_pick
1FB1           6148   ;        main.c:1158: waitms(1000);
1FB1 9003E8    6149            mov     dptr,#0x03E8
1FB4 120000    6150            lcall   _waitms
1FB7           6151   ;        main.c:1159: pick = 0;
1FB7 90D4D0    6152            mov     dptr,#_main_pick_1_232
1FBA E4        6153            clr     a
1FBB F0        6154            movx    @dptr,a
1FBC           6155   L040002?:
1FBC           6156   ;        main.c:1162: if(auto_mode){
1FBC 90D480    6157            mov     dptr,#_main_auto_mode_1_232
1FBF E0        6158            movx    a,@dptr
1FC0 FA        6159            mov     r2,a
1FC1 6000      6160            jz      L040004?
1FC3           6161   ;        main.c:1163: Auto_mode_slave();
1FC3 120000    6162            lcall   _Auto_mode_slave
1FC6           6163   ;        main.c:1164: auto_mode = 0;
1FC6 90D480    6164            mov     dptr,#_main_auto_mode_1_232
1FC9 E4        6165            clr     a
1FCA F0        6166            movx    @dptr,a
1FCB           6167   L040004?:
1FCB           6168   ;        main.c:1166: angle = Read_angle();
1FCB 120000    6169            lcall   _Read_angle
1FCE           6170   ;        main.c:1170: if(RXU1()) // Something has arrived
1FCE 120000    6171            lcall   _RXU1
1FD1 5000      6172            jnc     L040016?
1FD3           6173   ;        main.c:1172: c=getchar1();
1FD3 120000    6174            lcall   _getchar1
1FD6 AA82      6175            mov     r2,dpl
1FD8           6176   ;        main.c:1174: if(c=='!') // Master is sending message
1FD8 BA2110    6177            cjne    r2,#0x21,L040031?
1FDB 8000      6178            sjmp    L040032?
1FDD           6179   L040031?:
1FDD 020000    6180            ljmp    L040011?
1FE0           6181   L040032?:
1FE0           6182   ;        main.c:1176: getstr1(buff, sizeof(buff)-1);
1FE0 755813    6183            mov     _getstr1_PARM_2,#0x13
1FE3 9057C8    6184            mov     dptr,#_buff
1FE6 75F040    6185            mov     b,#0x40
1FE9 120000    6186            lcall   _getstr1
1FEC           6187   ;        main.c:1177: if(strlen(buff)==12)
1FEC 9057C8    6188            mov     dptr,#_buff
1FEF 75F040    6189            mov     b,#0x40
1FF2 120000    6190            lcall   _strlen
1FF5 AB82      6191            mov     r3,dpl
1FF7 AC83      6192            mov     r4,dph
1FF9 BB0CD0    6193            cjne    r3,#0x0C,L040033?
1FFC BC00D0    6194            cjne    r4,#0x00,L040033?
1FFF 8000      6195            sjmp    L040034?
2001           6196   L040033?:
2001 020000    6197            ljmp    L040006?
2004           6198   L040034?:
2004           6199   ;        main.c:1180: sscanf(buff, "%03d,%03d,%01d,%01d", &vx, &vy, &pick, &auto_mode);
2004 7480      6200            mov     a,#_main_auto_mode_1_232
2006 C0E0      6201            push    acc
2008 74D4      6202            mov     a,#(_main_auto_mode_1_232 >> 8)
200A C0E0      6203            push    acc
200C E4        6204            clr     a
200D C0E0      6205            push    acc
200F 74D0      6206            mov     a,#_main_pick_1_232
2011 C0E0      6207            push    acc
2013 74D4      6208            mov     a,#(_main_pick_1_232 >> 8)
2015 C0E0      6209            push    acc
2017 E4        6210            clr     a
2018 C0E0      6211            push    acc
201A 7430      6212            mov     a,#_main_vy_1_232
201C C0E0      6213            push    acc
201E 74D4      6214            mov     a,#(_main_vy_1_232 >> 8)
2020 C0E0      6215            push    acc
2022 E4        6216            clr     a
2023 C0E0      6217            push    acc
2025 74F0      6218            mov     a,#_main_vx_1_232
2027 C0E0      6219            push    acc
2029 74D3      6220            mov     a,#(_main_vx_1_232 >> 8)
202B C0E0      6221            push    acc
202D E4        6222            clr     a
202E C0E0      6223            push    acc
2030 7440      6224            mov     a,#__str_7
2032 C0E0      6225            push    acc
2034 740A      6226            mov     a,#(__str_7 >> 8)
2036 C0E0      6227            push    acc
2038 7480      6228            mov     a,#0x80
203A C0E0      6229            push    acc
203C 74C8      6230            mov     a,#_buff
203E C0E0      6231            push    acc
2040 7457      6232            mov     a,#(_buff >> 8)
2042 C0E0      6233            push    acc
2044 7440      6234            mov     a,#0x40
2046 C0E0      6235            push    acc
2048 120000    6236            lcall   _sscanf
204B E581      6237            mov     a,sp
204D 24EE      6238            add     a,#0xee
204F F581      6239            mov     sp,a
2051           6240   ;        main.c:1181: printf("Joystick Received: Vx = %03d, Vy = %03d, Order = %01d, Auto = %01d\r\n", vx, vy, pick, auto_mode);
2051 90D480    6241            mov     dptr,#_main_auto_mode_1_232
2054 E0        6242            movx    a,@dptr
2055 FB        6243            mov     r3,a
2056 7C00      6244            mov     r4,#0x00
2058 90D4D0    6245            mov     dptr,#_main_pick_1_232
205B E0        6246            movx    a,@dptr
205C FD        6247            mov     r5,a
205D 7E00      6248            mov     r6,#0x00
205F C003      6249            push    ar3
2061 C004      6250            push    ar4
2063 C005      6251            push    ar5
2065 C006      6252            push    ar6
2067 90D430    6253            mov     dptr,#_main_vy_1_232
206A E0        6254            movx    a,@dptr
206B C0E0      6255            push    acc
206D A3        6256            inc     dptr
206E E0        6257            movx    a,@dptr
206F C0E0      6258            push    acc
2071 90D3F0    6259            mov     dptr,#_main_vx_1_232
2074 E0        6260            movx    a,@dptr
2075 C0E0      6261            push    acc
2077 A3        6262            inc     dptr
2078 E0        6263            movx    a,@dptr
2079 C0E0      6264            push    acc
207B 7490      6265            mov     a,#__str_21
207D C0E0      6266            push    acc
207F 741C      6267            mov     a,#(__str_21 >> 8)
2081 C0E0      6268            push    acc
2083 7480      6269            mov     a,#0x80
2085 C0E0      6270            push    acc
2087 120000    6271            lcall   _printf
208A E581      6272            mov     a,sp
208C 24F5      6273            add     a,#0xf5
208E F581      6274            mov     sp,a
2090           6275   ;        main.c:1182: Joystick_Control(&vx, &vy);
2090 751830    6276            mov     _Joystick_Control_PARM_2,#_main_vy_1_232
2093 7519D4    6277            mov     (_Joystick_Control_PARM_2 + 1),#(_main_vy_1_232 >> 8)
2096 751A00    6278            mov     (_Joystick_Control_PARM_2 + 2),#0x00
2099 90D3F0    6279            mov     dptr,#_main_vx_1_232
209C 75F000    6280            mov     b,#0x00
209F 120000    6281            lcall   _Joystick_Control
20A2 020000    6282            ljmp    L040016?
20A5           6283   L040006?:
20A5           6284   ;        main.c:1185: printf("*** BAD MESSAGE ***: %s\r\n", buff);
20A5 74C8      6285            mov     a,#_buff
20A7 C0E0      6286            push    acc
20A9 7457      6287            mov     a,#(_buff >> 8)
20AB C0E0      6288            push    acc
20AD 7440      6289            mov     a,#0x40
20AF C0E0      6290            push    acc
20B1 74D0      6291            mov     a,#__str_22
20B3 C0E0      6292            push    acc
20B5 741C      6293            mov     a,#(__str_22 >> 8)
20B7 C0E0      6294            push    acc
20B9 7480      6295            mov     a,#0x80
20BB C0E0      6296            push    acc
20BD 120000    6297            lcall   _printf
20C0 E581      6298            mov     a,sp
20C2 24FA      6299            add     a,#0xfa
20C4 F581      6300            mov     sp,a
20C6 020000    6301            ljmp    L040016?
20C9           6302   L040011?:
20C9           6303   ;        main.c:1188: else if(c=='@') // Master wants slave data
20C9 BA4010    6304            cjne    r2,#0x40,L040035?
20CC 8000      6305            sjmp    L040036?
20CE           6306   L040035?:
20CE 020000    6307            ljmp    L040016?
20D1           6308   L040036?:
20D1           6309   ;        main.c:1190: sprintf(buff, "0,00,%04ld\n", freq100);
20D1 905788    6310            mov     dptr,#_freq100
20D4 E0        6311            movx    a,@dptr
20D5 C0E0      6312            push    acc
20D7 A3        6313            inc     dptr
20D8 E0        6314            movx    a,@dptr
20D9 C0E0      6315            push    acc
20DB A3        6316            inc     dptr
20DC E0        6317            movx    a,@dptr
20DD C0E0      6318            push    acc
20DF A3        6319            inc     dptr
20E0 E0        6320            movx    a,@dptr
20E1 C0E0      6321            push    acc
20E3 7490      6322            mov     a,#__str_23
20E5 C0E0      6323            push    acc
20E7 741D      6324            mov     a,#(__str_23 >> 8)
20E9 C0E0      6325            push    acc
20EB 7480      6326            mov     a,#0x80
20ED C0E0      6327            push    acc
20EF 74C8      6328            mov     a,#_buff
20F1 C0E0      6329            push    acc
20F3 7457      6330            mov     a,#(_buff >> 8)
20F5 C0E0      6331            push    acc
20F7 7440      6332            mov     a,#0x40
20F9 C0E0      6333            push    acc
20FB 120000    6334            lcall   _sprintf
20FE E581      6335            mov     a,sp
2100 24F6      6336            add     a,#0xf6
2102 F581      6337            mov     sp,a
2104           6338   ;        main.c:1191: waitms(5); // The radio seems to need this delay...
2104 900005    6339            mov     dptr,#0x0005
2107 120000    6340            lcall   _waitms
210A           6341   ;        main.c:1192: sendstr1(buff);
210A 9057C8    6342            mov     dptr,#_buff
210D 75F040    6343            mov     b,#0x40
2110 120000    6344            lcall   _sendstr1
2113 020000    6345            ljmp    L040016?
2116           6346            rseg R_CSEG
2116           6347   
0000           6348            rseg R_XINIT
0000           6349   __xinit__pwm_counter:
0000 0000      6350            db 0x00,0x00    ; 0
0002           6351   __xinit__servo_counter:
0002 0000      6352            db 0x00,0x00    ; 0
0004           6353   __xinit__pwm_left:
0004 00        6354            db 0x00         ; 0
0005           6355   __xinit__pwm_right:
0005 00        6356            db 0x00         ; 0
0006           6357   __xinit__L_motor_dir:
0006 01        6358            db 0x01         ; 1
0007           6359   __xinit__R_motor_dir:
0007 01        6360            db 0x01         ; 1
0008           6361   __xinit__servo_base:
0008 01        6362            db 0x01         ; 1
0009           6363   __xinit__servo_arm:
0009 01        6364            db 0x01         ; 1
000A           6365   __xinit__vx_thres:
000A A100      6366            db 0xA1,0x00    ;  161
000C           6367   __xinit__vy_thres:
000C A600      6368            db 0xA6,0x00    ;  166
000E           6369   __xinit__vx:
000E 0000      6370            db 0x00,0x00    ;  0
0010           6371   __xinit__vy:
0010 0000      6372            db 0x00,0x00    ;  0
0012           6373   __xinit__fre_mea_count:
0012 0000      6374            db 0x00,0x00    ; 0
0014           6375   __xinit__seed:
0014 3930      6376            db 0x39,0x30    ; 12345
0016           6377   __xinit__pwm_corr:
0016 3333733F  6378            db 0x33,0x33,0x73,0x3F  ;  9.500000e-001
001A           6379   
0000           6380            rseg R_CONST
0000           6381   __str_0:
0000 4572726F  6382            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
0035 0D        6383            db 0x0D
0036 0A        6384            db 0x0A
0037 00        6385            db 0x00
0038           6386   __str_1:
0038 50726573  6387            db 'Press restart to check again!'
     73207265
     73746172
     7420746F
     20636865
     636B2061
     6761696E
     21
0055 0D        6388            db 0x0D
0056 00        6389            db 0x00
0057           6390   __str_2:
0057 444F4E45  6391            db 'DONE! Chip ID = 0x%02X'
     21204368
     69702049
     44203D20
     30782530
     3258
006D 0D        6392            db 0x0D
006E 0A        6393            db 0x0A
006F 00        6394            db 0x00
0070           6395   __str_3:
0070 424D4D31  6396            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
00A0 0D        6397            db 0x0D
00A1 0A        6398            db 0x0A
00A2 00        6399            db 0x00
00A3           6400   __str_4:
00A3 436F6D6D  6401            db 'Command: %s'
     616E643A
     202573
00AE 00        6402            db 0x00
00AF           6403   __str_5:
00AF 52657370  6404            db 'Response: %s'
     6F6E7365
     3A202573
00BB 0D        6405            db 0x0D
00BC 0A        6406            db 0x0A
00BD 00        6407            db 0x00
00BE           6408   __str_6:
00BE 41542B44  6409            db 'AT+DVID0000'
     56494430
     303030
00C9 0D        6410            db 0x0D
00CA 0A        6411            db 0x0A
00CB 00        6412            db 0x00
00CC           6413   __str_7:
00CC 25303364  6414            db '%03d,%03d,%01d,%01d'
     2C253033
     642C2530
     31642C25
     303164
00DF 00        6415            db 0x00
00E0           6416   __str_8:
00E0 25303164  6417            db '%01d,%02d,%ld'
     2C253032
     642C256C
     64
00ED 0A        6418            db 0x0A
00EE 00        6419            db 0x00
00EF           6420   __str_9:
00EF 663A2530  6421            db 'f:%04ld, d1:%d, d2:%d, bound_dectect: %d'
     346C642C
     2064313A
     25642C20
     64323A25
     642C2062
     6F756E64
     5F646563
     74656374
     3A202564
0117 0D        6422            db 0x0D
0118 0A        6423            db 0x0A
0119 00        6424            db 0x00
011A           6425   __str_10:
011A 5475726E  6426            db 'Turn!!! %d'
     21212120
     2564
0124 0D        6427            db 0x0D
0125 0A        6428            db 0x0A
0126 00        6429            db 0x00
0127           6430   __str_11:
0127 4175746F  6431            db 'Auto mode finished!'
     206D6F64
     65206669
     6E697368
     656421
013A 0D        6432            db 0x0D
013B 0A        6433            db 0x0A
013C 00        6434            db 0x00
013D           6435   __str_12:
013D 0D        6436            db 0x0D
013E 0A        6437            db 0x0A
013F 45464D38  6438            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
015A 0D        6439            db 0x0D
015B 0A        6440            db 0x0A
015C 00        6441            db 0x00
015D           6442   __str_13:
015D 41542B56  6443            db 'AT+VER'
     4552
0163 0D        6444            db 0x0D
0164 0A        6445            db 0x0A
0165 00        6446            db 0x00
0166           6447   __str_14:
0166 41542B42  6448            db 'AT+BAUD'
     415544
016D 0D        6449            db 0x0D
016E 0A        6450            db 0x0A
016F 00        6451            db 0x00
0170           6452   __str_15:
0170 41542B52  6453            db 'AT+RFID'
     464944
0177 0D        6454            db 0x0D
0178 0A        6455            db 0x0A
0179 00        6456            db 0x00
017A           6457   __str_16:
017A 41542B44  6458            db 'AT+DVID'
     564944
0181 0D        6459            db 0x0D
0182 0A        6460            db 0x0A
0183 00        6461            db 0x00
0184           6462   __str_17:
0184 41542B52  6463            db 'AT+RFC002'
     46433030
     32
018D 0D        6464            db 0x0D
018E 0A        6465            db 0x0A
018F 00        6466            db 0x00
0190           6467   __str_18:
0190 41542B50  6468            db 'AT+POWE'
     4F5745
0197 0D        6469            db 0x0D
0198 0A        6470            db 0x0A
0199 00        6471            db 0x00
019A           6472   __str_19:
019A 41542B43  6473            db 'AT+CLSS'
     4C5353
01A1 0D        6474            db 0x0D
01A2 0A        6475            db 0x0A
01A3 00        6476            db 0x00
01A4           6477   __str_20:
01A4 41542B44  6478            db 'AT+DVIDEF11'
     56494445
     463131
01AF 0D        6479            db 0x0D
01B0 0A        6480            db 0x0A
01B1 00        6481            db 0x00
01B2           6482   __str_21:
01B2 4A6F7973  6483            db 'Joystick Received: Vx = %03d, Vy = %03d, Order = %01d, Auto '
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25303364
     2C205679
     203D2025
     3033642C
     204F7264
     6572203D
     20253031
     642C2041
     75746F20
01EE 3D202530  6484            db '= %01d'
     3164
01F4 0D        6485            db 0x0D
01F5 0A        6486            db 0x0A
01F6 00        6487            db 0x00
01F7           6488   __str_22:
01F7 2A2A2A20  6489            db '*** BAD MESSAGE ***: %s'
     42414420
     4D455353
     41474520
     2A2A2A3A
     202573
020E 0D        6490            db 0x0D
020F 0A        6491            db 0x0A
0210 00        6492            db 0x00
0211           6493   __str_23:
0211 302C3030  6494            db '0,00,%04ld'
     2C253034
     6C64
021B 0A        6495            db 0x0A
021C 00        6496            db 0x00
021D           6497   
0096           6498            CSEG
0096           6499   
0096           6500   end
