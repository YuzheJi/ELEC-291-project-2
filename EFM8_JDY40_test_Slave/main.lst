0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Apr 02 19:34:47 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _check_bound_PARM_2
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Joystick_Control
0000             30            public _Auto_mode_slave
0000             31            public _Read_angle
0000             32            public _get_random_90_250
0000             33            public _simple_rand
0000             34            public _Move_forward
0000             35            public _Right_angle
0000             36            public _Move_back_ms
0000             37            public _Init_all
0000             38            public _check_bound
0000             39            public _servo_pick
0000             40            public _Timer5_ISR
0000             41            public _ReadHX711
0000             42            public _ADC_at_Pin
0000             43            public _InitPinADC
0000             44            public _InitADC
0000             45            public _Set_Pin_Input
0000             46            public _Set_Pin_Output
0000             47            public _measure_distance
0000             48            public _ReceptionOff
0000             49            public _SendATCommand
0000             50            public _waitms_or_RI1
0000             51            public _RXU1
0000             52            public _getstr1
0000             53            public _getchar1_with_timeout
0000             54            public _getchar1
0000             55            public _sendstr1
0000             56            public _putchar1
0000             57            public _UART1_Init
0000             58            public _BMM150_Read_Data
0000             59            public _BMM150_compensate_y
0000             60            public _BMM150_compensate_x
0000             61            public _BMM150_Init
0000             62            public _BMM150_Read_Trim_Registers
0000             63            public _SPI_write
0000             64            public _SPI_read
0000             65            public _SPI_transfer
0000             66            public _waitms
0000             67            public _Timer3us
0000             68            public __c51_external_startup
0000             69            public _duration
0000             70            public _weight
0000             71            public _mea_yes
0000             72            public _angle_diff
0000             73            public _last_raw_angle
0000             74            public _raw_angle
0000             75            public _curr_angle
0000             76            public _pwm_corr
0000             77            public _seed
0000             78            public _weight_mea_count
0000             79            public _fre_mea_count
0000             80            public _vy
0000             81            public _vx
0000             82            public _vy_thres
0000             83            public _vx_thres
0000             84            public _servo_arm
0000             85            public _servo_base
0000             86            public _R_motor_dir
0000             87            public _L_motor_dir
0000             88            public _pwm_right
0000             89            public _pwm_left
0000             90            public _servo_counter
0000             91            public _pwm_counter
0000             92            public _i_loo
0000             93            public _overflow_count
0000             94            public _distance
0000             95            public _temp
0000             96            public _dig_xyz1
0000             97            public _dig_xy2
0000             98            public _dig_xy1
0000             99            public _dig_z4
0000            100            public _dig_z3
0000            101            public _dig_z2
0000            102            public _dig_z1
0000            103            public _dig_y2
0000            104            public _dig_y1
0000            105            public _dig_x2
0000            106            public _dig_x1
0000            107            public _d2
0000            108            public _d1
0000            109            public _freq100
0000            110            public _buff
0000            111            public _Joystick_Control_PARM_2
0000            112            public _getstr1_PARM_2
0000            113            public _BMM150_Read_Data_PARM_2
0000            114            public _BMM150_compensate_y_PARM_2
0000            115            public _BMM150_compensate_x_PARM_2
0000            116            public _SPI_write_PARM_2
0000            117   ;--------------------------------------------------------
0000            118   ; Special Function Registers
0000            119   ;--------------------------------------------------------
0000            120   _ACC            DATA 0xe0
0000            121   _ADC0ASAH       DATA 0xb6
0000            122   _ADC0ASAL       DATA 0xb5
0000            123   _ADC0ASCF       DATA 0xa1
0000            124   _ADC0ASCT       DATA 0xc7
0000            125   _ADC0CF0        DATA 0xbc
0000            126   _ADC0CF1        DATA 0xb9
0000            127   _ADC0CF2        DATA 0xdf
0000            128   _ADC0CN0        DATA 0xe8
0000            129   _ADC0CN1        DATA 0xb2
0000            130   _ADC0CN2        DATA 0xb3
0000            131   _ADC0GTH        DATA 0xc4
0000            132   _ADC0GTL        DATA 0xc3
0000            133   _ADC0H          DATA 0xbe
0000            134   _ADC0L          DATA 0xbd
0000            135   _ADC0LTH        DATA 0xc6
0000            136   _ADC0LTL        DATA 0xc5
0000            137   _ADC0MX         DATA 0xbb
0000            138   _B              DATA 0xf0
0000            139   _CKCON0         DATA 0x8e
0000            140   _CKCON1         DATA 0xa6
0000            141   _CLEN0          DATA 0xc6
0000            142   _CLIE0          DATA 0xc7
0000            143   _CLIF0          DATA 0xe8
0000            144   _CLKSEL         DATA 0xa9
0000            145   _CLOUT0         DATA 0xd1
0000            146   _CLU0CF         DATA 0xb1
0000            147   _CLU0FN         DATA 0xaf
0000            148   _CLU0MX         DATA 0x84
0000            149   _CLU1CF         DATA 0xb3
0000            150   _CLU1FN         DATA 0xb2
0000            151   _CLU1MX         DATA 0x85
0000            152   _CLU2CF         DATA 0xb6
0000            153   _CLU2FN         DATA 0xb5
0000            154   _CLU2MX         DATA 0x91
0000            155   _CLU3CF         DATA 0xbf
0000            156   _CLU3FN         DATA 0xbe
0000            157   _CLU3MX         DATA 0xae
0000            158   _CMP0CN0        DATA 0x9b
0000            159   _CMP0CN1        DATA 0x99
0000            160   _CMP0MD         DATA 0x9d
0000            161   _CMP0MX         DATA 0x9f
0000            162   _CMP1CN0        DATA 0xbf
0000            163   _CMP1CN1        DATA 0xac
0000            164   _CMP1MD         DATA 0xab
0000            165   _CMP1MX         DATA 0xaa
0000            166   _CRC0CN0        DATA 0xce
0000            167   _CRC0CN1        DATA 0x86
0000            168   _CRC0CNT        DATA 0xd3
0000            169   _CRC0DAT        DATA 0xcb
0000            170   _CRC0FLIP       DATA 0xcf
0000            171   _CRC0IN         DATA 0xca
0000            172   _CRC0ST         DATA 0xd2
0000            173   _DAC0CF0        DATA 0x91
0000            174   _DAC0CF1        DATA 0x92
0000            175   _DAC0H          DATA 0x85
0000            176   _DAC0L          DATA 0x84
0000            177   _DAC1CF0        DATA 0x93
0000            178   _DAC1CF1        DATA 0x94
0000            179   _DAC1H          DATA 0x8a
0000            180   _DAC1L          DATA 0x89
0000            181   _DAC2CF0        DATA 0x95
0000            182   _DAC2CF1        DATA 0x96
0000            183   _DAC2H          DATA 0x8c
0000            184   _DAC2L          DATA 0x8b
0000            185   _DAC3CF0        DATA 0x9a
0000            186   _DAC3CF1        DATA 0x9c
0000            187   _DAC3H          DATA 0x8e
0000            188   _DAC3L          DATA 0x8d
0000            189   _DACGCF0        DATA 0x88
0000            190   _DACGCF1        DATA 0x98
0000            191   _DACGCF2        DATA 0xa2
0000            192   _DERIVID        DATA 0xad
0000            193   _DEVICEID       DATA 0xb5
0000            194   _DPH            DATA 0x83
0000            195   _DPL            DATA 0x82
0000            196   _EIE1           DATA 0xe6
0000            197   _EIE2           DATA 0xf3
0000            198   _EIP1           DATA 0xbb
0000            199   _EIP1H          DATA 0xee
0000            200   _EIP2           DATA 0xed
0000            201   _EIP2H          DATA 0xf6
0000            202   _EMI0CN         DATA 0xe7
0000            203   _FLKEY          DATA 0xb7
0000            204   _HFO0CAL        DATA 0xc7
0000            205   _HFO1CAL        DATA 0xd6
0000            206   _HFOCN          DATA 0xef
0000            207   _I2C0ADM        DATA 0xff
0000            208   _I2C0CN0        DATA 0xba
0000            209   _I2C0DIN        DATA 0xbc
0000            210   _I2C0DOUT       DATA 0xbb
0000            211   _I2C0FCN0       DATA 0xad
0000            212   _I2C0FCN1       DATA 0xab
0000            213   _I2C0FCT        DATA 0xf5
0000            214   _I2C0SLAD       DATA 0xbd
0000            215   _I2C0STAT       DATA 0xb9
0000            216   _IE             DATA 0xa8
0000            217   _IP             DATA 0xb8
0000            218   _IPH            DATA 0xf2
0000            219   _IT01CF         DATA 0xe4
0000            220   _LFO0CN         DATA 0xb1
0000            221   _P0             DATA 0x80
0000            222   _P0MASK         DATA 0xfe
0000            223   _P0MAT          DATA 0xfd
0000            224   _P0MDIN         DATA 0xf1
0000            225   _P0MDOUT        DATA 0xa4
0000            226   _P0SKIP         DATA 0xd4
0000            227   _P1             DATA 0x90
0000            228   _P1MASK         DATA 0xee
0000            229   _P1MAT          DATA 0xed
0000            230   _P1MDIN         DATA 0xf2
0000            231   _P1MDOUT        DATA 0xa5
0000            232   _P1SKIP         DATA 0xd5
0000            233   _P2             DATA 0xa0
0000            234   _P2MASK         DATA 0xfc
0000            235   _P2MAT          DATA 0xfb
0000            236   _P2MDIN         DATA 0xf3
0000            237   _P2MDOUT        DATA 0xa6
0000            238   _P2SKIP         DATA 0xcc
0000            239   _P3             DATA 0xb0
0000            240   _P3MDIN         DATA 0xf4
0000            241   _P3MDOUT        DATA 0x9c
0000            242   _PCA0CENT       DATA 0x9e
0000            243   _PCA0CLR        DATA 0x9c
0000            244   _PCA0CN0        DATA 0xd8
0000            245   _PCA0CPH0       DATA 0xfc
0000            246   _PCA0CPH1       DATA 0xea
0000            247   _PCA0CPH2       DATA 0xec
0000            248   _PCA0CPH3       DATA 0xf5
0000            249   _PCA0CPH4       DATA 0x85
0000            250   _PCA0CPH5       DATA 0xde
0000            251   _PCA0CPL0       DATA 0xfb
0000            252   _PCA0CPL1       DATA 0xe9
0000            253   _PCA0CPL2       DATA 0xeb
0000            254   _PCA0CPL3       DATA 0xf4
0000            255   _PCA0CPL4       DATA 0x84
0000            256   _PCA0CPL5       DATA 0xdd
0000            257   _PCA0CPM0       DATA 0xda
0000            258   _PCA0CPM1       DATA 0xdb
0000            259   _PCA0CPM2       DATA 0xdc
0000            260   _PCA0CPM3       DATA 0xae
0000            261   _PCA0CPM4       DATA 0xaf
0000            262   _PCA0CPM5       DATA 0xcc
0000            263   _PCA0H          DATA 0xfa
0000            264   _PCA0L          DATA 0xf9
0000            265   _PCA0MD         DATA 0xd9
0000            266   _PCA0POL        DATA 0x96
0000            267   _PCA0PWM        DATA 0xf7
0000            268   _PCON0          DATA 0x87
0000            269   _PCON1          DATA 0xcd
0000            270   _PFE0CN         DATA 0xc1
0000            271   _PRTDRV         DATA 0xf6
0000            272   _PSCTL          DATA 0x8f
0000            273   _PSTAT0         DATA 0xaa
0000            274   _PSW            DATA 0xd0
0000            275   _REF0CN         DATA 0xd1
0000            276   _REG0CN         DATA 0xc9
0000            277   _REVID          DATA 0xb6
0000            278   _RSTSRC         DATA 0xef
0000            279   _SBCON1         DATA 0x94
0000            280   _SBRLH1         DATA 0x96
0000            281   _SBRLL1         DATA 0x95
0000            282   _SBUF           DATA 0x99
0000            283   _SBUF0          DATA 0x99
0000            284   _SBUF1          DATA 0x92
0000            285   _SCON           DATA 0x98
0000            286   _SCON0          DATA 0x98
0000            287   _SCON1          DATA 0xc8
0000            288   _SFRPAGE        DATA 0xa7
0000            289   _SFRPGCN        DATA 0xbc
0000            290   _SFRSTACK       DATA 0xd7
0000            291   _SMB0ADM        DATA 0xd6
0000            292   _SMB0ADR        DATA 0xd7
0000            293   _SMB0CF         DATA 0xc1
0000            294   _SMB0CN0        DATA 0xc0
0000            295   _SMB0DAT        DATA 0xc2
0000            296   _SMB0FCN0       DATA 0xc3
0000            297   _SMB0FCN1       DATA 0xc4
0000            298   _SMB0FCT        DATA 0xef
0000            299   _SMB0RXLN       DATA 0xc5
0000            300   _SMB0TC         DATA 0xac
0000            301   _SMOD1          DATA 0x93
0000            302   _SP             DATA 0x81
0000            303   _SPI0CFG        DATA 0xa1
0000            304   _SPI0CKR        DATA 0xa2
0000            305   _SPI0CN0        DATA 0xf8
0000            306   _SPI0DAT        DATA 0xa3
0000            307   _SPI0FCN0       DATA 0x9a
0000            308   _SPI0FCN1       DATA 0x9b
0000            309   _SPI0FCT        DATA 0xf7
0000            310   _SPI0PCF        DATA 0xdf
0000            311   _TCON           DATA 0x88
0000            312   _TH0            DATA 0x8c
0000            313   _TH1            DATA 0x8d
0000            314   _TL0            DATA 0x8a
0000            315   _TL1            DATA 0x8b
0000            316   _TMOD           DATA 0x89
0000            317   _TMR2CN0        DATA 0xc8
0000            318   _TMR2CN1        DATA 0xfd
0000            319   _TMR2H          DATA 0xcf
0000            320   _TMR2L          DATA 0xce
0000            321   _TMR2RLH        DATA 0xcb
0000            322   _TMR2RLL        DATA 0xca
0000            323   _TMR3CN0        DATA 0x91
0000            324   _TMR3CN1        DATA 0xfe
0000            325   _TMR3H          DATA 0x95
0000            326   _TMR3L          DATA 0x94
0000            327   _TMR3RLH        DATA 0x93
0000            328   _TMR3RLL        DATA 0x92
0000            329   _TMR4CN0        DATA 0x98
0000            330   _TMR4CN1        DATA 0xff
0000            331   _TMR4H          DATA 0xa5
0000            332   _TMR4L          DATA 0xa4
0000            333   _TMR4RLH        DATA 0xa3
0000            334   _TMR4RLL        DATA 0xa2
0000            335   _TMR5CN0        DATA 0xc0
0000            336   _TMR5CN1        DATA 0xf1
0000            337   _TMR5H          DATA 0xd5
0000            338   _TMR5L          DATA 0xd4
0000            339   _TMR5RLH        DATA 0xd3
0000            340   _TMR5RLL        DATA 0xd2
0000            341   _UART0PCF       DATA 0xd9
0000            342   _UART1FCN0      DATA 0x9d
0000            343   _UART1FCN1      DATA 0xd8
0000            344   _UART1FCT       DATA 0xfa
0000            345   _UART1LIN       DATA 0x9e
0000            346   _UART1PCF       DATA 0xda
0000            347   _VDM0CN         DATA 0xff
0000            348   _WDTCN          DATA 0x97
0000            349   _XBR0           DATA 0xe1
0000            350   _XBR1           DATA 0xe2
0000            351   _XBR2           DATA 0xe3
0000            352   _XOSC0CN        DATA 0x86
0000            353   _DPTR           DATA 0x8382
0000            354   _TMR2RL         DATA 0xcbca
0000            355   _TMR3RL         DATA 0x9392
0000            356   _TMR4RL         DATA 0xa3a2
0000            357   _TMR5RL         DATA 0xd3d2
0000            358   _TMR0           DATA 0x8c8a
0000            359   _TMR1           DATA 0x8d8b
0000            360   _TMR2           DATA 0xcfce
0000            361   _TMR3           DATA 0x9594
0000            362   _TMR4           DATA 0xa5a4
0000            363   _TMR5           DATA 0xd5d4
0000            364   _SBRL1          DATA 0x9695
0000            365   _PCA0           DATA 0xfaf9
0000            366   _PCA0CP0        DATA 0xfcfb
0000            367   _PCA0CP1        DATA 0xeae9
0000            368   _PCA0CP2        DATA 0xeceb
0000            369   _PCA0CP3        DATA 0xf5f4
0000            370   _PCA0CP4        DATA 0x8584
0000            371   _PCA0CP5        DATA 0xdedd
0000            372   _ADC0ASA        DATA 0xb6b5
0000            373   _ADC0GT         DATA 0xc4c3
0000            374   _ADC0           DATA 0xbebd
0000            375   _ADC0LT         DATA 0xc6c5
0000            376   _DAC0           DATA 0x8584
0000            377   _DAC1           DATA 0x8a89
0000            378   _DAC2           DATA 0x8c8b
0000            379   _DAC3           DATA 0x8e8d
0000            380   ;--------------------------------------------------------
0000            381   ; special function bits
0000            382   ;--------------------------------------------------------
0000            383   _ACC_0          BIT 0xe0
0000            384   _ACC_1          BIT 0xe1
0000            385   _ACC_2          BIT 0xe2
0000            386   _ACC_3          BIT 0xe3
0000            387   _ACC_4          BIT 0xe4
0000            388   _ACC_5          BIT 0xe5
0000            389   _ACC_6          BIT 0xe6
0000            390   _ACC_7          BIT 0xe7
0000            391   _TEMPE          BIT 0xe8
0000            392   _ADGN0          BIT 0xe9
0000            393   _ADGN1          BIT 0xea
0000            394   _ADWINT         BIT 0xeb
0000            395   _ADBUSY         BIT 0xec
0000            396   _ADINT          BIT 0xed
0000            397   _IPOEN          BIT 0xee
0000            398   _ADEN           BIT 0xef
0000            399   _B_0            BIT 0xf0
0000            400   _B_1            BIT 0xf1
0000            401   _B_2            BIT 0xf2
0000            402   _B_3            BIT 0xf3
0000            403   _B_4            BIT 0xf4
0000            404   _B_5            BIT 0xf5
0000            405   _B_6            BIT 0xf6
0000            406   _B_7            BIT 0xf7
0000            407   _C0FIF          BIT 0xe8
0000            408   _C0RIF          BIT 0xe9
0000            409   _C1FIF          BIT 0xea
0000            410   _C1RIF          BIT 0xeb
0000            411   _C2FIF          BIT 0xec
0000            412   _C2RIF          BIT 0xed
0000            413   _C3FIF          BIT 0xee
0000            414   _C3RIF          BIT 0xef
0000            415   _D1SRC0         BIT 0x88
0000            416   _D1SRC1         BIT 0x89
0000            417   _D1AMEN         BIT 0x8a
0000            418   _D01REFSL       BIT 0x8b
0000            419   _D3SRC0         BIT 0x8c
0000            420   _D3SRC1         BIT 0x8d
0000            421   _D3AMEN         BIT 0x8e
0000            422   _D23REFSL       BIT 0x8f
0000            423   _D0UDIS         BIT 0x98
0000            424   _D1UDIS         BIT 0x99
0000            425   _D2UDIS         BIT 0x9a
0000            426   _D3UDIS         BIT 0x9b
0000            427   _EX0            BIT 0xa8
0000            428   _ET0            BIT 0xa9
0000            429   _EX1            BIT 0xaa
0000            430   _ET1            BIT 0xab
0000            431   _ES0            BIT 0xac
0000            432   _ET2            BIT 0xad
0000            433   _ESPI0          BIT 0xae
0000            434   _EA             BIT 0xaf
0000            435   _PX0            BIT 0xb8
0000            436   _PT0            BIT 0xb9
0000            437   _PX1            BIT 0xba
0000            438   _PT1            BIT 0xbb
0000            439   _PS0            BIT 0xbc
0000            440   _PT2            BIT 0xbd
0000            441   _PSPI0          BIT 0xbe
0000            442   _P0_0           BIT 0x80
0000            443   _P0_1           BIT 0x81
0000            444   _P0_2           BIT 0x82
0000            445   _P0_3           BIT 0x83
0000            446   _P0_4           BIT 0x84
0000            447   _P0_5           BIT 0x85
0000            448   _P0_6           BIT 0x86
0000            449   _P0_7           BIT 0x87
0000            450   _P1_0           BIT 0x90
0000            451   _P1_1           BIT 0x91
0000            452   _P1_2           BIT 0x92
0000            453   _P1_3           BIT 0x93
0000            454   _P1_4           BIT 0x94
0000            455   _P1_5           BIT 0x95
0000            456   _P1_6           BIT 0x96
0000            457   _P1_7           BIT 0x97
0000            458   _P2_0           BIT 0xa0
0000            459   _P2_1           BIT 0xa1
0000            460   _P2_2           BIT 0xa2
0000            461   _P2_3           BIT 0xa3
0000            462   _P2_4           BIT 0xa4
0000            463   _P2_5           BIT 0xa5
0000            464   _P2_6           BIT 0xa6
0000            465   _P3_0           BIT 0xb0
0000            466   _P3_1           BIT 0xb1
0000            467   _P3_2           BIT 0xb2
0000            468   _P3_3           BIT 0xb3
0000            469   _P3_4           BIT 0xb4
0000            470   _P3_7           BIT 0xb7
0000            471   _CCF0           BIT 0xd8
0000            472   _CCF1           BIT 0xd9
0000            473   _CCF2           BIT 0xda
0000            474   _CCF3           BIT 0xdb
0000            475   _CCF4           BIT 0xdc
0000            476   _CCF5           BIT 0xdd
0000            477   _CR             BIT 0xde
0000            478   _CF             BIT 0xdf
0000            479   _PARITY         BIT 0xd0
0000            480   _F1             BIT 0xd1
0000            481   _OV             BIT 0xd2
0000            482   _RS0            BIT 0xd3
0000            483   _RS1            BIT 0xd4
0000            484   _F0             BIT 0xd5
0000            485   _AC             BIT 0xd6
0000            486   _CY             BIT 0xd7
0000            487   _RI             BIT 0x98
0000            488   _TI             BIT 0x99
0000            489   _RB8            BIT 0x9a
0000            490   _TB8            BIT 0x9b
0000            491   _REN            BIT 0x9c
0000            492   _CE             BIT 0x9d
0000            493   _SMODE          BIT 0x9e
0000            494   _RI1            BIT 0xc8
0000            495   _TI1            BIT 0xc9
0000            496   _RBX1           BIT 0xca
0000            497   _TBX1           BIT 0xcb
0000            498   _REN1           BIT 0xcc
0000            499   _PERR1          BIT 0xcd
0000            500   _OVR1           BIT 0xce
0000            501   _SI             BIT 0xc0
0000            502   _ACK            BIT 0xc1
0000            503   _ARBLOST        BIT 0xc2
0000            504   _ACKRQ          BIT 0xc3
0000            505   _STO            BIT 0xc4
0000            506   _STA            BIT 0xc5
0000            507   _TXMODE         BIT 0xc6
0000            508   _MASTER         BIT 0xc7
0000            509   _SPIEN          BIT 0xf8
0000            510   _TXNF           BIT 0xf9
0000            511   _NSSMD0         BIT 0xfa
0000            512   _NSSMD1         BIT 0xfb
0000            513   _RXOVRN         BIT 0xfc
0000            514   _MODF           BIT 0xfd
0000            515   _WCOL           BIT 0xfe
0000            516   _SPIF           BIT 0xff
0000            517   _IT0            BIT 0x88
0000            518   _IE0            BIT 0x89
0000            519   _IT1            BIT 0x8a
0000            520   _IE1            BIT 0x8b
0000            521   _TR0            BIT 0x8c
0000            522   _TF0            BIT 0x8d
0000            523   _TR1            BIT 0x8e
0000            524   _TF1            BIT 0x8f
0000            525   _T2XCLK0        BIT 0xc8
0000            526   _T2XCLK1        BIT 0xc9
0000            527   _TR2            BIT 0xca
0000            528   _T2SPLIT        BIT 0xcb
0000            529   _TF2CEN         BIT 0xcc
0000            530   _TF2LEN         BIT 0xcd
0000            531   _TF2L           BIT 0xce
0000            532   _TF2H           BIT 0xcf
0000            533   _T4XCLK0        BIT 0x98
0000            534   _T4XCLK1        BIT 0x99
0000            535   _TR4            BIT 0x9a
0000            536   _T4SPLIT        BIT 0x9b
0000            537   _TF4CEN         BIT 0x9c
0000            538   _TF4LEN         BIT 0x9d
0000            539   _TF4L           BIT 0x9e
0000            540   _TF4H           BIT 0x9f
0000            541   _T5XCLK0        BIT 0xc0
0000            542   _T5XCLK1        BIT 0xc1
0000            543   _TR5            BIT 0xc2
0000            544   _T5SPLIT        BIT 0xc3
0000            545   _TF5CEN         BIT 0xc4
0000            546   _TF5LEN         BIT 0xc5
0000            547   _TF5L           BIT 0xc6
0000            548   _TF5H           BIT 0xc7
0000            549   _RIE            BIT 0xd8
0000            550   _RXTO0          BIT 0xd9
0000            551   _RXTO1          BIT 0xda
0000            552   _RFRQ           BIT 0xdb
0000            553   _TIE            BIT 0xdc
0000            554   _TXHOLD         BIT 0xdd
0000            555   _TXNF1          BIT 0xde
0000            556   _TFRQ           BIT 0xdf
0000            557   ;--------------------------------------------------------
0000            558   ; overlayable register banks
0000            559   ;--------------------------------------------------------
0000            560            rbank0 segment data overlay
0000            561   ;--------------------------------------------------------
0000            562   ; overlayable bit register bank
0000            563   ;--------------------------------------------------------
0000            564            rseg BIT_BANK
0000            565   bits:
0000            566            ds 1
0001            567            b0 equ  bits.0 
0001            568            b1 equ  bits.1 
0001            569            b2 equ  bits.2 
0001            570            b3 equ  bits.3 
0001            571            b4 equ  bits.4 
0001            572            b5 equ  bits.5 
0001            573            b6 equ  bits.6 
0001            574            b7 equ  bits.7 
0001            575   ;--------------------------------------------------------
0001            576   ; internal ram data
0001            577   ;--------------------------------------------------------
0000            578            rseg R_DSEG
0000            579   _SPI_write_PARM_2:
0000            580            ds 1
0001            581   _BMM150_compensate_x_PARM_2:
0001            582            ds 3
0004            583   _BMM150_compensate_x_sloc0_1_0:
0004            584            ds 4
0008            585   _BMM150_compensate_y_PARM_2:
0008            586            ds 3
000B            587   _BMM150_compensate_y_sloc0_1_0:
000B            588            ds 4
000F            589   _BMM150_Read_Data_PARM_2:
000F            590            ds 3
0012            591   _BMM150_Read_Data_mag_x_1_123:
0012            592            ds 3
0015            593   _getstr1_PARM_2:
0015            594            ds 1
0016            595   _Read_angle_sloc0_1_0:
0016            596            ds 4
001A            597   _Auto_mode_slave_sloc0_1_0:
001A            598            ds 2
001C            599   _Joystick_Control_PARM_2:
001C            600            ds 3
001F            601   _Joystick_Control_sloc0_1_0:
001F            602            ds 2
0021            603   _Joystick_Control_sloc1_1_0:
0021            604            ds 2
0023            605   _Joystick_Control_sloc2_1_0:
0023            606            ds 1
0024            607   _Joystick_Control_sloc3_1_0:
0024            608            ds 4
0028            609   _Joystick_Control_sloc4_1_0:
0028            610            ds 4
002C            611   _Joystick_Control_sloc5_1_0:
002C            612            ds 4
0030            613   ;--------------------------------------------------------
0030            614   ; overlayable items in internal ram 
0030            615   ;--------------------------------------------------------
0000            616            rseg    R_OSEG
0000            617            rseg    R_OSEG
0000            618            rseg    R_OSEG
0000            619            rseg    R_OSEG
0000            620            rseg    R_OSEG
0000            621            rseg    R_OSEG
0000            622   _InitPinADC_PARM_2:
0000            623            ds 1
0001            624            rseg    R_OSEG
0001            625            rseg    R_OSEG
0001            626   _check_bound_PARM_2:
0001            627            ds 2
0003            628   ;--------------------------------------------------------
0003            629   ; indirectly addressable internal ram data
0003            630   ;--------------------------------------------------------
0000            631            rseg R_ISEG
0000            632   _buff:
0000            633            ds 20
0014            634   ;--------------------------------------------------------
0014            635   ; absolute internal ram data
0014            636   ;--------------------------------------------------------
0000            637            DSEG
0000            638   ;--------------------------------------------------------
0000            639   ; bit data
0000            640   ;--------------------------------------------------------
0000            641            rseg R_BSEG
0000            642   ;--------------------------------------------------------
0000            643   ; paged external ram data
0000            644   ;--------------------------------------------------------
0000            645            rseg R_PSEG
0000            646   ;--------------------------------------------------------
0000            647   ; external ram data
0000            648   ;--------------------------------------------------------
0000            649            rseg R_XSEG
0000            650   _freq100:
0000            651            ds 4
0004            652   _d1:
0004            653            ds 2
0006            654   _d2:
0006            655            ds 2
0008            656   _dig_x1:
0008            657            ds 1
0009            658   _dig_x2:
0009            659            ds 1
000A            660   _dig_y1:
000A            661            ds 1
000B            662   _dig_y2:
000B            663            ds 1
000C            664   _dig_z1:
000C            665            ds 2
000E            666   _dig_z2:
000E            667            ds 2
0010            668   _dig_z3:
0010            669            ds 2
0012            670   _dig_z4:
0012            671            ds 2
0014            672   _dig_xy1:
0014            673            ds 1
0015            674   _dig_xy2:
0015            675            ds 1
0016            676   _dig_xyz1:
0016            677            ds 2
0018            678   _temp:
0018            679            ds 4
001C            680   _distance:
001C            681            ds 2
001E            682   _overflow_count:
001E            683            ds 1
001F            684   _i_loo:
001F            685            ds 2
0021            686   _BMM150_Read_Trim_Registers_trim_x1y1_1_97:
0021            687            ds 2
0023            688   _BMM150_Read_Trim_Registers_trim_xyz_data_1_97:
0023            689            ds 4
0027            690   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_97:
0027            691            ds 10
0031            692   _BMM150_compensate_x_retval_1_106:
0031            693            ds 2
0033            694   _BMM150_compensate_x_process_comp_x0_1_106:
0033            695            ds 2
0035            696   _BMM150_compensate_y_retval_1_115:
0035            697            ds 2
0037            698   _BMM150_compensate_y_process_comp_y0_1_115:
0037            699            ds 2
0039            700   _BMM150_Read_Data_x_val_1_124:
0039            701            ds 2
003B            702   _BMM150_Read_Data_y_val_1_124:
003B            703            ds 2
003D            704   _BMM150_Read_Data_rhall_val_1_124:
003D            705            ds 2
003F            706   _ReadHX711_dataa_1_174:
003F            707            ds 4
0043            708   _ReadHX711_j_1_174:
0043            709            ds 1
0044            710   _Read_angle_mag_x_1_216:
0044            711            ds 2
0046            712   _Read_angle_mag_y_1_216:
0046            713            ds 2
0048            714   _Read_angle_sum_x_1_216:
0048            715            ds 4
004C            716   _Read_angle_sum_y_1_216:
004C            717            ds 4
0050            718   _Read_angle_angle_1_216:
0050            719            ds 4
0054            720   _Auto_mode_slave_command_1_218:
0054            721            ds 2
0056            722   _Auto_mode_slave_state_res_1_218:
0056            723            ds 2
0058            724   _Auto_mode_slave_dummy_1_218:
0058            725            ds 2
005A            726   _Joystick_Control_vx_error_1_230:
005A            727            ds 2
005C            728   _Joystick_Control_vy_error_1_230:
005C            729            ds 2
005E            730   _Joystick_Control_vx_err_1_230:
005E            731            ds 2
0060            732   _Joystick_Control_vy_err_1_230:
0060            733            ds 2
0062            734   _main_vx_1_253:
0062            735            ds 2
0064            736   _main_vy_1_253:
0064            737            ds 2
0066            738   _main_auto_mode_1_253:
0066            739            ds 2
0068            740   _main_pick_char_1_253:
0068            741            ds 1
0069            742   ;--------------------------------------------------------
0069            743   ; absolute external ram data
0069            744   ;--------------------------------------------------------
0000            745            XSEG
0000            746   ;--------------------------------------------------------
0000            747   ; external initialized ram data
0000            748   ;--------------------------------------------------------
0000            749            rseg R_IXSEG
0000            750   _pwm_counter:
0000            751            ds 2
0002            752   _servo_counter:
0002            753            ds 2
0004            754   _pwm_left:
0004            755            ds 1
0005            756   _pwm_right:
0005            757            ds 1
0006            758   _L_motor_dir:
0006            759            ds 1
0007            760   _R_motor_dir:
0007            761            ds 1
0008            762   _servo_base:
0008            763            ds 1
0009            764   _servo_arm:
0009            765            ds 1
000A            766   _vx_thres:
000A            767            ds 2
000C            768   _vy_thres:
000C            769            ds 2
000E            770   _vx:
000E            771            ds 2
0010            772   _vy:
0010            773            ds 2
0012            774   _fre_mea_count:
0012            775            ds 2
0014            776   _weight_mea_count:
0014            777            ds 2
0016            778   _seed:
0016            779            ds 2
0018            780   _pwm_corr:
0018            781            ds 4
001C            782   _curr_angle:
001C            783            ds 4
0020            784   _raw_angle:
0020            785            ds 4
0024            786   _last_raw_angle:
0024            787            ds 4
0028            788   _angle_diff:
0028            789            ds 4
002C            790   _mea_yes:
002C            791            ds 1
002D            792   _weight:
002D            793            ds 2
002F            794   _duration:
002F            795            ds 4
0000            796            rseg R_HOME
0000            797            rseg R_GSINIT
0000            798            rseg R_CSEG
0000            799   ;--------------------------------------------------------
0000            800   ; Reset entry point and interrupt vectors
0000            801   ;--------------------------------------------------------
0000            802            CSEG at 0x0000
0000 020000     803            ljmp    _crt0
0093            804            CSEG at 0x0093
0093 020000     805            ljmp    _Timer5_ISR
0096            806   ;--------------------------------------------------------
0096            807   ; global & static initialisations
0096            808   ;--------------------------------------------------------
0000            809            rseg R_HOME
0000            810            rseg R_GSINIT
0000            811            rseg R_GSINIT
0000            812   ;--------------------------------------------------------
0000            813   ; data variables initialization
0000            814   ;--------------------------------------------------------
0000            815            rseg R_DINIT
0000            816            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            817   ;--------------------------------------------------------
0000            818   ; code
0000            819   ;--------------------------------------------------------
0000            820            rseg R_CSEG
0000            821   ;------------------------------------------------------------
0000            822   ;Allocation info for local variables in function '_c51_external_startup'
0000            823   ;------------------------------------------------------------
0000            824   ;------------------------------------------------------------
0000            825   ;        main.c:118: char _c51_external_startup (void)
0000            826   ;        -----------------------------------------
0000            827   ;         function _c51_external_startup
0000            828   ;        -----------------------------------------
0000            829   __c51_external_startup:
0000            830            using   0
0000            831   ;        main.c:121: SFRPAGE = 0x00;
0000 75A700     832            mov     _SFRPAGE,#0x00
0003            833   ;        main.c:122: WDTCN = 0xDE; //First key
0003 7597DE     834            mov     _WDTCN,#0xDE
0006            835   ;        main.c:123: WDTCN = 0xAD; //Second key
0006 7597AD     836            mov     _WDTCN,#0xAD
0009            837   ;        main.c:125: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     838            mov     _VDM0CN,#0x80
000C            839   ;        main.c:126: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     840            mov     _RSTSRC,#0x06
000F            841   ;        main.c:133: SFRPAGE = 0x10;
000F 75A710     842            mov     _SFRPAGE,#0x10
0012            843   ;        main.c:134: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     844            mov     _PFE0CN,#0x20
0015            845   ;        main.c:135: SFRPAGE = 0x00;
0015 75A700     846            mov     _SFRPAGE,#0x00
0018            847   ;        main.c:156: CLKSEL = 0x00;
0018 75A900     848            mov     _CLKSEL,#0x00
001B            849   ;        main.c:157: CLKSEL = 0x00;
001B 75A900     850            mov     _CLKSEL,#0x00
001E            851   ;        main.c:158: while ((CLKSEL & 0x80) == 0);
001E            852   L002001?:
001E E5A9       853            mov     a,_CLKSEL
0020 30E7E8     854            jnb     acc.7,L002001?
0023            855   ;        main.c:159: CLKSEL = 0x03;
0023 75A903     856            mov     _CLKSEL,#0x03
0026            857   ;        main.c:160: CLKSEL = 0x03;
0026 75A903     858            mov     _CLKSEL,#0x03
0029            859   ;        main.c:161: while ((CLKSEL & 0x80) == 0);
0029            860   L002004?:
0029 E5A9       861            mov     a,_CLKSEL
002B 30E768     862            jnb     acc.7,L002004?
002E            863   ;        main.c:167: P0MDOUT |= 0b_1100_0000;
002E 43A4C0     864            orl     _P0MDOUT,#0xC0
0031            865   ;        main.c:168: P1MDOUT |= 0b_0000_0110;
0031 43A506     866            orl     _P1MDOUT,#0x06
0034            867   ;        main.c:169: P2MDOUT |= 0b_0000_0001; // P2.0 in push-pull mode
0034 43A601     868            orl     _P2MDOUT,#0x01
0037            869   ;        main.c:170: XBR0     = 0b_0000_0011; // UART0E = 1 and SPI0E = 1 0b_0000_0011               
0037 75E103     870            mov     _XBR0,#0x03
003A            871   ;        main.c:171: XBR1     = 0b_0000_0000;
003A 75E200     872            mov     _XBR1,#0x00
003D            873   ;        main.c:172: XBR2     = 0b_0100_0001; // Enable crossbar and uart 1
003D 75E341     874            mov     _XBR2,#0x41
0040            875   ;        main.c:173: P0SKIP       = 0b_0000_0111; 
0040 75D407     876            mov     _P0SKIP,#0x07
0043            877   ;        main.c:174: P1SKIP   = 0b_1111_1001;
0043 75D5F9     878            mov     _P1SKIP,#0xF9
0046            879   ;        main.c:179: SCON0 = 0x10;
0046 759810     880            mov     _SCON0,#0x10
0049            881   ;        main.c:180: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     882            mov     _TH1,#0xE6
004C            883   ;        main.c:181: TL1 = TH1;      // Init Timer1
004C 858D8B     884            mov     _TL1,_TH1
004F            885   ;        main.c:182: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     886            anl     _TMOD,#0x0F
0052            887   ;        main.c:183: TMOD |=  0x20;                       
0052 438920     888            orl     _TMOD,#0x20
0055            889   ;        main.c:184: TR1 = 1; // START Timer1
0055 D28E       890            setb    _TR1
0057            891   ;        main.c:185: TI = 1;  // Indicate TX0 ready
0057 D299       892            setb    _TI
0059            893   ;        main.c:186: P2_0=1; // 'set' pin to 1 is normal operation mode.
0059 D2A0       894            setb    _P2_0
005B            895   ;        main.c:189: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
005B 75A211     896            mov     _SPI0CKR,#0x11
005E            897   ;        main.c:190: SPI0CFG = 0b_1110_0000; // SPI mode 3
005E 75A1E0     898            mov     _SPI0CFG,#0xE0
0061            899   ;        main.c:191: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0061 75F801     900            mov     _SPI0CN0,#0x01
0064            901   ;        main.c:194: SFRPAGE=0x10;
0064 75A710     902            mov     _SFRPAGE,#0x10
0067            903   ;        main.c:195: TMR5CN0=0x00;
0067 75C000     904            mov     _TMR5CN0,#0x00
006A            905   ;        main.c:196: TMR5=0xffff;   // Set to reload immediately
006A 75D4FF     906            mov     _TMR5,#0xFF
006D 75D5FF     907            mov     (_TMR5 >> 8),#0xFF
0070            908   ;        main.c:197: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
0070 43F308     909            orl     _EIE2,#0x08
0073            910   ;        main.c:198: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0073 D2C2       911            setb    _TR5
0075            912   ;        main.c:200: EA=1;  // Enable global interrupts
0075 D2AF       913            setb    _EA
0077            914   ;        main.c:201: SFRPAGE=0x00;
0077 75A700     915            mov     _SFRPAGE,#0x00
007A            916   ;        main.c:203: return 0;
007A 758200     917            mov     dpl,#0x00
007D 22         918            ret
007E            919   ;------------------------------------------------------------
007E            920   ;Allocation info for local variables in function 'Timer3us'
007E            921   ;------------------------------------------------------------
007E            922   ;us                        Allocated to registers r2 
007E            923   ;i                         Allocated to registers r3 
007E            924   ;------------------------------------------------------------
007E            925   ;        main.c:207: void Timer3us(unsigned char us)
007E            926   ;        -----------------------------------------
007E            927   ;         function Timer3us
007E            928   ;        -----------------------------------------
007E            929   _Timer3us:
007E AA82       930            mov     r2,dpl
0080            931   ;        main.c:212: CKCON0|=0b_0100_0000;
0080 438E40     932            orl     _CKCON0,#0x40
0083            933   ;        main.c:214: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0083 7592B8     934            mov     _TMR3RL,#0xB8
0086 7593FF     935            mov     (_TMR3RL >> 8),#0xFF
0089            936   ;        main.c:215: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0089 859294     937            mov     _TMR3,_TMR3RL
008C 859395     938            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
008F            939   ;        main.c:217: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
008F 759104     940            mov     _TMR3CN0,#0x04
0092            941   ;        main.c:218: for (i = 0; i < us; i++)       // Count <us> overflows
0092 7B00       942            mov     r3,#0x00
0094            943   L003004?:
0094 C3         944            clr     c
0095 EB         945            mov     a,r3
0096 9A         946            subb    a,r2
0097 5000       947            jnc     L003007?
0099            948   ;        main.c:220: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0099            949   L003001?:
0099 E591       950            mov     a,_TMR3CN0
009B 30E768     951            jnb     acc.7,L003001?
009E            952   ;        main.c:221: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
009E 53917F     953            anl     _TMR3CN0,#0x7F
00A1            954   ;        main.c:218: for (i = 0; i < us; i++)       // Count <us> overflows
00A1 0B         955            inc     r3
00A2 8000       956            sjmp    L003004?
00A4            957   L003007?:
00A4            958   ;        main.c:223: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00A4 759100     959            mov     _TMR3CN0,#0x00
00A7 22         960            ret
00A8            961   ;------------------------------------------------------------
00A8            962   ;Allocation info for local variables in function 'waitms'
00A8            963   ;------------------------------------------------------------
00A8            964   ;ms                        Allocated to registers r2 r3 
00A8            965   ;j                         Allocated to registers r4 r5 
00A8            966   ;k                         Allocated to registers r6 
00A8            967   ;------------------------------------------------------------
00A8            968   ;        main.c:226: void waitms (unsigned int ms)
00A8            969   ;        -----------------------------------------
00A8            970   ;         function waitms
00A8            971   ;        -----------------------------------------
00A8            972   _waitms:
00A8 AA82       973            mov     r2,dpl
00AA AB83       974            mov     r3,dph
00AC            975   ;        main.c:230: for(j=0; j<ms; j++)
00AC 7C00       976            mov     r4,#0x00
00AE 7D00       977            mov     r5,#0x00
00B0            978   L004005?:
00B0 C3         979            clr     c
00B1 EC         980            mov     a,r4
00B2 9A         981            subb    a,r2
00B3 ED         982            mov     a,r5
00B4 9B         983            subb    a,r3
00B5 5000       984            jnc     L004009?
00B7            985   ;        main.c:231: for (k=0; k<4; k++) Timer3us(250);
00B7 7E00       986            mov     r6,#0x00
00B9            987   L004001?:
00B9 BE04A8     988            cjne    r6,#0x04,L004018?
00BC            989   L004018?:
00BC 5000       990            jnc     L004007?
00BE 7582FA     991            mov     dpl,#0xFA
00C1 C002       992            push    ar2
00C3 C003       993            push    ar3
00C5 C004       994            push    ar4
00C7 C005       995            push    ar5
00C9 C006       996            push    ar6
00CB 120000     997            lcall   _Timer3us
00CE D006       998            pop     ar6
00D0 D005       999            pop     ar5
00D2 D004      1000            pop     ar4
00D4 D003      1001            pop     ar3
00D6 D002      1002            pop     ar2
00D8 0E        1003            inc     r6
00D9 8000      1004            sjmp    L004001?
00DB           1005   L004007?:
00DB           1006   ;        main.c:230: for(j=0; j<ms; j++)
00DB 0C        1007            inc     r4
00DC BC00E8    1008            cjne    r4,#0x00,L004005?
00DF 0D        1009            inc     r5
00E0 8000      1010            sjmp    L004005?
00E2           1011   L004009?:
00E2 22        1012            ret
00E3           1013   ;------------------------------------------------------------
00E3           1014   ;Allocation info for local variables in function 'SPI_transfer'
00E3           1015   ;------------------------------------------------------------
00E3           1016   ;tx_data                   Allocated to registers 
00E3           1017   ;------------------------------------------------------------
00E3           1018   ;        main.c:234: unsigned char SPI_transfer(unsigned char tx_data)
00E3           1019   ;        -----------------------------------------
00E3           1020   ;         function SPI_transfer
00E3           1021   ;        -----------------------------------------
00E3           1022   _SPI_transfer:
00E3 8582A3    1023            mov     _SPI0DAT,dpl
00E6           1024   ;        main.c:237: while (!SPIF);      // Wait for transfer to complete
00E6           1025   L005001?:
00E6           1026   ;        main.c:238: SPIF = 0;           // Clear SPI interrupt flag
00E6 10FF68    1027            jbc     _SPIF,L005008?
00E9 8000      1028            sjmp    L005001?
00EB           1029   L005008?:
00EB           1030   ;        main.c:239: return SPI0DAT;     // Return received data
00EB 85A382    1031            mov     dpl,_SPI0DAT
00EE 22        1032            ret
00EF           1033   ;------------------------------------------------------------
00EF           1034   ;Allocation info for local variables in function 'SPI_read'
00EF           1035   ;------------------------------------------------------------
00EF           1036   ;reg_addr                  Allocated to registers r2 
00EF           1037   ;value                     Allocated with name '_SPI_read_value_1_93'
00EF           1038   ;------------------------------------------------------------
00EF           1039   ;        main.c:242: unsigned char SPI_read(unsigned char reg_addr)
00EF           1040   ;        -----------------------------------------
00EF           1041   ;         function SPI_read
00EF           1042   ;        -----------------------------------------
00EF           1043   _SPI_read:
00EF AA82      1044            mov     r2,dpl
00F1           1045   ;        main.c:247: reg_addr = reg_addr | 0x80;
00F1 430280    1046            orl     ar2,#0x80
00F4           1047   ;        main.c:249: CS = 0;                // Select the device
00F4 C290      1048            clr     _P1_0
00F6           1049   ;        main.c:250: SPI_transfer(reg_addr);     // Send register address
00F6 8A82      1050            mov     dpl,r2
00F8 120000    1051            lcall   _SPI_transfer
00FB           1052   ;        main.c:251: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
00FB 758200    1053            mov     dpl,#0x00
00FE 120000    1054            lcall   _SPI_transfer
0101           1055   ;        main.c:252: CS = 1;                // Deselect the device
0101 D290      1056            setb    _P1_0
0103           1057   ;        main.c:254: return value;
0103 22        1058            ret
0104           1059   ;------------------------------------------------------------
0104           1060   ;Allocation info for local variables in function 'SPI_write'
0104           1061   ;------------------------------------------------------------
0104           1062   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0104           1063   ;reg_addr                  Allocated to registers r2 
0104           1064   ;------------------------------------------------------------
0104           1065   ;        main.c:257: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0104           1066   ;        -----------------------------------------
0104           1067   ;         function SPI_write
0104           1068   ;        -----------------------------------------
0104           1069   _SPI_write:
0104 AA82      1070            mov     r2,dpl
0106           1071   ;        main.c:260: reg_addr = reg_addr & 0x7F;
0106 53027F    1072            anl     ar2,#0x7F
0109           1073   ;        main.c:262: CS = 0;                // Select device
0109 C290      1074            clr     _P1_0
010B           1075   ;        main.c:263: SPI_transfer(reg_addr);     // Send register address
010B 8A82      1076            mov     dpl,r2
010D 120000    1077            lcall   _SPI_transfer
0110           1078   ;        main.c:264: SPI_transfer(reg_value);    // Send value
0110 85E082    1079            mov     dpl,_SPI_write_PARM_2
0113 120000    1080            lcall   _SPI_transfer
0116           1081   ;        main.c:265: CS = 1;                // Deselect device
0116 D290      1082            setb    _P1_0
0118 22        1083            ret
0119           1084   ;------------------------------------------------------------
0119           1085   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
0119           1086   ;------------------------------------------------------------
0119           1087   ;i                         Allocated with name '_BMM150_Read_Trim_Registers_i_1_97'
0119           1088   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_97'
0119           1089   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_97'
0119           1090   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_97'
0119           1091   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97'
0119           1092   ;------------------------------------------------------------
0119           1093   ;        main.c:268: void BMM150_Read_Trim_Registers(void)
0119           1094   ;        -----------------------------------------
0119           1095   ;         function BMM150_Read_Trim_Registers
0119           1096   ;        -----------------------------------------
0119           1097   _BMM150_Read_Trim_Registers:
0119           1098   ;        main.c:272: xdata uint8_t trim_x1y1[2] = {0};
0119 90CB78    1099            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
011C           1100   ;        main.c:273: xdata uint8_t trim_xyz_data[4] = {0};
011C E4        1101            clr     a
011D F0        1102            movx    @dptr,a
011E 90CB79    1103            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
0121 F0        1104            movx    @dptr,a
0122 90CBD8    1105            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0125 F0        1106            movx    @dptr,a
0126 90CBD9    1107            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0001)
0129 F0        1108            movx    @dptr,a
012A 90CBDA    1109            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
012D           1110   ;        main.c:274: xdata uint8_t trim_xy1xy2[10] = {0};
012D E4        1111            clr     a
012E F0        1112            movx    @dptr,a
012F 90CBDB    1113            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0132 F0        1114            movx    @dptr,a
0133 90CC38    1115            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0136 F0        1116            movx    @dptr,a
0137 90CC39    1117            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0001)
013A F0        1118            movx    @dptr,a
013B 90CC3A    1119            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0002)
013E E4        1120            clr     a
013F F0        1121            movx    @dptr,a
0140 90CC3B    1122            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0003)
0143 F0        1123            movx    @dptr,a
0144 90CC3C    1124            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0147 F0        1125            movx    @dptr,a
0148 90CC3D    1126            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
014B F0        1127            movx    @dptr,a
014C 90CC3E    1128            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0006)
014F E4        1129            clr     a
0150 F0        1130            movx    @dptr,a
0151 90CC3F    1131            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0007)
0154 F0        1132            movx    @dptr,a
0155 90CC40    1133            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0158 F0        1134            movx    @dptr,a
0159 90CC41    1135            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
015C F0        1136            movx    @dptr,a
015D           1137   ;        main.c:277: for (i=0;i<2;i++){
015D 7A00      1138            mov     r2,#0x00
015F           1139   L008001?:
015F BA02E8    1140            cjne    r2,#0x02,L008024?
0162           1141   L008024?:
0162 5000      1142            jnc     L008004?
0164           1143   ;        main.c:278: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
0164 EA        1144            mov     a,r2
0165 2478      1145            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0167 FB        1146            mov     r3,a
0168 E4        1147            clr     a
0169 34CB      1148            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 >> 8)
016B FC        1149            mov     r4,a
016C 745D      1150            mov     a,#0x5D
016E 2A        1151            add     a,r2
016F F582      1152            mov     dpl,a
0171 C002      1153            push    ar2
0173 C003      1154            push    ar3
0175 C004      1155            push    ar4
0177 120000    1156            lcall   _SPI_read
017A AD82      1157            mov     r5,dpl
017C D004      1158            pop     ar4
017E D003      1159            pop     ar3
0180 D002      1160            pop     ar2
0182 8B82      1161            mov     dpl,r3
0184 8C83      1162            mov     dph,r4
0186 ED        1163            mov     a,r5
0187 F0        1164            movx    @dptr,a
0188           1165   ;        main.c:277: for (i=0;i<2;i++){
0188 0A        1166            inc     r2
0189 8000      1167            sjmp    L008001?
018B           1168   L008004?:
018B           1169   ;        main.c:280: for (i=0;i<4;i++){
018B 7A00      1170            mov     r2,#0x00
018D           1171   L008005?:
018D BA04A8    1172            cjne    r2,#0x04,L008026?
0190           1173   L008026?:
0190 5000      1174            jnc     L008008?
0192           1175   ;        main.c:281: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
0192 EA        1176            mov     a,r2
0193 24D8      1177            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0195 FB        1178            mov     r3,a
0196 E4        1179            clr     a
0197 34CB      1180            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 >> 8)
0199 FC        1181            mov     r4,a
019A 7462      1182            mov     a,#0x62
019C 2A        1183            add     a,r2
019D F582      1184            mov     dpl,a
019F C002      1185            push    ar2
01A1 C003      1186            push    ar3
01A3 C004      1187            push    ar4
01A5 120000    1188            lcall   _SPI_read
01A8 AD82      1189            mov     r5,dpl
01AA D004      1190            pop     ar4
01AC D003      1191            pop     ar3
01AE D002      1192            pop     ar2
01B0 8B82      1193            mov     dpl,r3
01B2 8C83      1194            mov     dph,r4
01B4 ED        1195            mov     a,r5
01B5 F0        1196            movx    @dptr,a
01B6           1197   ;        main.c:280: for (i=0;i<4;i++){
01B6 0A        1198            inc     r2
01B7 8000      1199            sjmp    L008005?
01B9           1200   L008008?:
01B9           1201   ;        main.c:283: for (i=0;i<10;i++){
01B9 7A00      1202            mov     r2,#0x00
01BB           1203   L008009?:
01BB BA0A68    1204            cjne    r2,#0x0A,L008028?
01BE           1205   L008028?:
01BE 5000      1206            jnc     L008012?
01C0           1207   ;        main.c:284: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
01C0 EA        1208            mov     a,r2
01C1 2438      1209            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
01C3 FB        1210            mov     r3,a
01C4 E4        1211            clr     a
01C5 34CC      1212            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 >> 8)
01C7 FC        1213            mov     r4,a
01C8 7468      1214            mov     a,#0x68
01CA 2A        1215            add     a,r2
01CB F582      1216            mov     dpl,a
01CD C002      1217            push    ar2
01CF C003      1218            push    ar3
01D1 C004      1219            push    ar4
01D3 120000    1220            lcall   _SPI_read
01D6 AD82      1221            mov     r5,dpl
01D8 D004      1222            pop     ar4
01DA D003      1223            pop     ar3
01DC D002      1224            pop     ar2
01DE 8B82      1225            mov     dpl,r3
01E0 8C83      1226            mov     dph,r4
01E2 ED        1227            mov     a,r5
01E3 F0        1228            movx    @dptr,a
01E4           1229   ;        main.c:283: for (i=0;i<10;i++){
01E4 0A        1230            inc     r2
01E5 8000      1231            sjmp    L008009?
01E7           1232   L008012?:
01E7           1233   ;        main.c:287: dig_x1 = (int8_t) trim_x1y1[0]; 
01E7 90CB78    1234            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
01EA E0        1235            movx    a,@dptr
01EB 905510    1236            mov     dptr,#_dig_x1
01EE F0        1237            movx    @dptr,a
01EF           1238   ;        main.c:288: dig_y1 = (int8_t) trim_x1y1[1]; 
01EF 90CB79    1239            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
01F2 E0        1240            movx    a,@dptr
01F3 905490    1241            mov     dptr,#_dig_y1
01F6 F0        1242            movx    @dptr,a
01F7           1243   ;        main.c:289: dig_x2 = (int8_t) trim_xyz_data[2]; 
01F7 90CBDA    1244            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
01FA E0        1245            movx    a,@dptr
01FB 9054D0    1246            mov     dptr,#_dig_x2
01FE F0        1247            movx    @dptr,a
01FF           1248   ;        main.c:290: dig_y2 = (int8_t) trim_xyz_data[3]; 
01FF 90CBDB    1249            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0202 E0        1250            movx    a,@dptr
0203 905450    1251            mov     dptr,#_dig_y2
0206 F0        1252            movx    @dptr,a
0207           1253   ;        main.c:304: dig_xy1 = trim_xy1xy2[9];
0207 90CC41    1254            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
020A E0        1255            movx    a,@dptr
020B 905310    1256            mov     dptr,#_dig_xy1
020E F0        1257            movx    @dptr,a
020F           1258   ;        main.c:305: dig_xy2 = (int8_t)trim_xy1xy2[8];
020F 90CC40    1259            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0212 E0        1260            movx    a,@dptr
0213 9052D0    1261            mov     dptr,#_dig_xy2
0216 F0        1262            movx    @dptr,a
0217           1263   ;        main.c:307: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
0217 90CC3D    1264            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
021A E0        1265            movx    a,@dptr
021B FA        1266            mov     r2,a
021C 53027F    1267            anl     ar2,#0x7F
021F 8A03      1268            mov     ar3,r2
0221 7A00      1269            mov     r2,#0x00
0223           1270   ;        main.c:308: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
0223 90CC3C    1271            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0226 E0        1272            movx    a,@dptr
0227 FC        1273            mov     r4,a
0228 7D00      1274            mov     r5,#0x00
022A 905290    1275            mov     dptr,#_dig_xyz1
022D EC        1276            mov     a,r4
022E 4A        1277            orl     a,r2
022F F0        1278            movx    @dptr,a
0230 ED        1279            mov     a,r5
0231 4B        1280            orl     a,r3
0232 A3        1281            inc     dptr
0233 F0        1282            movx    @dptr,a
0234 22        1283            ret
0235           1284   ;------------------------------------------------------------
0235           1285   ;Allocation info for local variables in function 'BMM150_Init'
0235           1286   ;------------------------------------------------------------
0235           1287   ;chip_id                   Allocated with name '_BMM150_Init_chip_id_1_102'
0235           1288   ;------------------------------------------------------------
0235           1289   ;        main.c:312: void BMM150_Init(void)
0235           1290   ;        -----------------------------------------
0235           1291   ;         function BMM150_Init
0235           1292   ;        -----------------------------------------
0235           1293   _BMM150_Init:
0235           1294   ;        main.c:317: CS = 1; // Deselect BMM150
0235 D290      1295            setb    _P1_0
0237           1296   ;        main.c:320: waitms(10);
0237 90000A    1297            mov     dptr,#0x000A
023A 120000    1298            lcall   _waitms
023D           1299   ;        main.c:323: SPI_write(BMM150_POWER_CONTROL, 0x82);
023D 75E082    1300            mov     _SPI_write_PARM_2,#0x82
0240 75824B    1301            mov     dpl,#0x4B
0243 120000    1302            lcall   _SPI_write
0246           1303   ;        main.c:324: waitms(10);  // Wait for reset to complete
0246 90000A    1304            mov     dptr,#0x000A
0249 120000    1305            lcall   _waitms
024C           1306   ;        main.c:327: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
024C 75E001    1307            mov     _SPI_write_PARM_2,#0x01
024F 75824B    1308            mov     dpl,#0x4B
0252 120000    1309            lcall   _SPI_write
0255           1310   ;        main.c:328: waitms(5);
0255 900005    1311            mov     dptr,#0x0005
0258 120000    1312            lcall   _waitms
025B           1313   ;        main.c:331: chip_id = SPI_read(BMM150_CHIP_ID);
025B 758240    1314            mov     dpl,#0x40
025E 120000    1315            lcall   _SPI_read
0261 AA82      1316            mov     r2,dpl
0263           1317   ;        main.c:332: if (chip_id != BMM150_CHIP_ID_VALUE)
0263 BA32E8    1318            cjne    r2,#0x32,L009006?
0266 8000      1319            sjmp    L009002?
0268           1320   L009006?:
0268           1321   ;        main.c:334: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
0268 8A03      1322            mov     ar3,r2
026A 7C00      1323            mov     r4,#0x00
026C C002      1324            push    ar2
026E C003      1325            push    ar3
0270 C004      1326            push    ar4
0272 7468      1327            mov     a,#__str_0
0274 C0E0      1328            push    acc
0276 74DB      1329            mov     a,#(__str_0 >> 8)
0278 C0E0      1330            push    acc
027A 7480      1331            mov     a,#0x80
027C C0E0      1332            push    acc
027E 120000    1333            lcall   _printf
0281 E581      1334            mov     a,sp
0283 24FB      1335            add     a,#0xfb
0285 F581      1336            mov     sp,a
0287 D002      1337            pop     ar2
0289           1338   L009002?:
0289           1339   ;        main.c:344: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
0289 75E000    1340            mov     _SPI_write_PARM_2,#0x00
028C 75824C    1341            mov     dpl,#0x4C
028F C002      1342            push    ar2
0291 120000    1343            lcall   _SPI_write
0294           1344   ;        main.c:347: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
0294 75E07F    1345            mov     _SPI_write_PARM_2,#0x7F
0297 758251    1346            mov     dpl,#0x51
029A 120000    1347            lcall   _SPI_write
029D           1348   ;        main.c:348: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
029D 75E00E    1349            mov     _SPI_write_PARM_2,#0x0E
02A0 758252    1350            mov     dpl,#0x52
02A3 120000    1351            lcall   _SPI_write
02A6           1352   ;        main.c:350: BMM150_Read_Trim_Registers();
02A6 120000    1353            lcall   _BMM150_Read_Trim_Registers
02A9           1354   ;        main.c:352: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
02A9 7B00      1355            mov     r3,#0x00
02AB C003      1356            push    ar3
02AD 7428      1357            mov     a,#__str_1
02AF C0E0      1358            push    acc
02B1 74DC      1359            mov     a,#(__str_1 >> 8)
02B3 C0E0      1360            push    acc
02B5 7480      1361            mov     a,#0x80
02B7 C0E0      1362            push    acc
02B9 120000    1363            lcall   _printf
02BC E581      1364            mov     a,sp
02BE 24FB      1365            add     a,#0xfb
02C0 F581      1366            mov     sp,a
02C2           1367   ;        main.c:353: return; 
02C2 22        1368            ret
02C3           1369   ;------------------------------------------------------------
02C3           1370   ;Allocation info for local variables in function 'BMM150_compensate_x'
02C3           1371   ;------------------------------------------------------------
02C3           1372   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
02C3           1373   ;mag_data_x                Allocated to registers r2 r3 r4 
02C3           1374   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
02C3           1375   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_106'
02C3           1376   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_106'
02C3           1377   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_106'
02C3           1378   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_106'
02C3           1379   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_106'
02C3           1380   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_106'
02C3           1381   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_106'
02C3           1382   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_106'
02C3           1383   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_106'
02C3           1384   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_106'
02C3           1385   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_106'
02C3           1386   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_106'
02C3           1387   ;------------------------------------------------------------
02C3           1388   ;        main.c:356: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
02C3           1389   ;        -----------------------------------------
02C3           1390   ;         function BMM150_compensate_x
02C3           1391   ;        -----------------------------------------
02C3           1392   _BMM150_compensate_x:
02C3           1393   ;        main.c:374: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
02C3 ACF0      1394            mov     r4,b
02C5 120000    1395            lcall   __gptrget
02C8 FA        1396            mov     r2,a
02C9 A3        1397            inc     dptr
02CA 120000    1398            lcall   __gptrget
02CD FB        1399            mov     r3,a
02CE BA00E8    1400            cjne    r2,#0x00,L010019?
02D1 BBF0E8    1401            cjne    r3,#0xF0,L010019?
02D4 020000    1402            ljmp    L010011?
02D7           1403   L010019?:
02D7           1404   ;        main.c:375: if (*data_rhall != 0)
02D7 AC90      1405            mov     r4,_BMM150_compensate_x_PARM_2
02D9 AD91      1406            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
02DB AE92      1407            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
02DD 8C82      1408            mov     dpl,r4
02DF 8D83      1409            mov     dph,r5
02E1 8EF0      1410            mov     b,r6
02E3 120000    1411            lcall   __gptrget
02E6 FC        1412            mov     r4,a
02E7 A3        1413            inc     dptr
02E8 120000    1414            lcall   __gptrget
02EB FD        1415            mov     r5,a
02EC 4C        1416            orl     a,r4
02ED 6000      1417            jz      L010005?
02EF           1418   ;        main.c:378: process_comp_x0 = *data_rhall;
02EF 90CCF8    1419            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
02F2 EC        1420            mov     a,r4
02F3 F0        1421            movx    @dptr,a
02F4 A3        1422            inc     dptr
02F5 ED        1423            mov     a,r5
02F6 F0        1424            movx    @dptr,a
02F7 8000      1425            sjmp    L010006?
02F9           1426   L010005?:
02F9           1427   ;        main.c:380: else if (dig_xyz1 != 0)
02F9 905290    1428            mov     dptr,#_dig_xyz1
02FC E0        1429            movx    a,@dptr
02FD FC        1430            mov     r4,a
02FE A3        1431            inc     dptr
02FF E0        1432            movx    a,@dptr
0300 FD        1433            mov     r5,a
0301 4C        1434            orl     a,r4
0302 6000      1435            jz      L010002?
0304           1436   ;        main.c:382: process_comp_x0 = dig_xyz1;
0304 90CCF8    1437            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0307 EC        1438            mov     a,r4
0308 F0        1439            movx    @dptr,a
0309 A3        1440            inc     dptr
030A ED        1441            mov     a,r5
030B F0        1442            movx    @dptr,a
030C 8000      1443            sjmp    L010006?
030E           1444   L010002?:
030E           1445   ;        main.c:386: process_comp_x0 = 0;
030E 90CCF8    1446            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0311 E4        1447            clr     a
0312 F0        1448            movx    @dptr,a
0313 A3        1449            inc     dptr
0314 F0        1450            movx    @dptr,a
0315           1451   L010006?:
0315           1452   ;        main.c:388: if (process_comp_x0 != 0)
0315 90CCF8    1453            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0318 E0        1454            movx    a,@dptr
0319 FC        1455            mov     r4,a
031A A3        1456            inc     dptr
031B E0        1457            movx    a,@dptr
031C FD        1458            mov     r5,a
031D 4C        1459            orl     a,r4
031E 7000      1460            jnz     L010022?
0320 020000    1461            ljmp    L010008?
0323           1462   L010022?:
0323           1463   ;        main.c:391: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
0323 905290    1464            mov     dptr,#_dig_xyz1
0326 E0        1465            movx    a,@dptr
0327 FE        1466            mov     r6,a
0328 A3        1467            inc     dptr
0329 E0        1468            movx    a,@dptr
032A FF        1469            mov     r7,a
032B E4        1470            clr     a
032C F8        1471            mov     r0,a
032D EF        1472            mov     a,r7
032E C8        1473            xch     a,r0
032F 5403      1474            anl     a,#0x03
0331 A2E0      1475            mov     c,acc.0
0333 C8        1476            xch     a,r0
0334 13        1477            rrc     a
0335 C8        1478            xch     a,r0
0336 13        1479            rrc     a
0337 A2E0      1480            mov     c,acc.0
0339 C8        1481            xch     a,r0
033A 13        1482            rrc     a
033B C8        1483            xch     a,r0
033C 13        1484            rrc     a
033D C8        1485            xch     a,r0
033E F9        1486            mov     r1,a
033F EE        1487            mov     a,r6
0340 03        1488            rr      a
0341 03        1489            rr      a
0342 54C0      1490            anl     a,#0xc0
0344 FF        1491            mov     r7,a
0345 EE        1492            mov     a,r6
0346 03        1493            rr      a
0347 03        1494            rr      a
0348 543F      1495            anl     a,#0x3f
034A 48        1496            orl     a,r0
034B F8        1497            mov     r0,a
034C 7E00      1498            mov     r6,#0x00
034E           1499   ;        main.c:392: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
034E 8C00      1500            mov     __divslong_PARM_2,r4
0350 8D01      1501            mov     (__divslong_PARM_2 + 1),r5
0352 750200    1502            mov     (__divslong_PARM_2 + 2),#0x00
0355 750300    1503            mov     (__divslong_PARM_2 + 3),#0x00
0358 8E82      1504            mov     dpl,r6
035A 8F83      1505            mov     dph,r7
035C 88F0      1506            mov     b,r0
035E E9        1507            mov     a,r1
035F C002      1508            push    ar2
0361 C003      1509            push    ar3
0363 120000    1510            lcall   __divslong
0366 AC82      1511            mov     r4,dpl
0368 E583      1512            mov     a,dph
036A 24C0      1513            add     a,#0xc0
036C FD        1514            mov     r5,a
036D           1515   ;        main.c:394: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
036D 8C06      1516            mov     ar6,r4
036F 8D07      1517            mov     ar7,r5
0371 8EF8      1518            mov     _BMM150_compensate_x_sloc0_1_0,r6
0373 EF        1519            mov     a,r7
0374 F5F9      1520            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
0376 33        1521            rlc     a
0377 95E0      1522            subb    a,acc
0379 F5FA      1523            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
037B F5FB      1524            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
037D 8C06      1525            mov     ar6,r4
037F 8D07      1526            mov     ar7,r5
0381 8E00      1527            mov     __mullong_PARM_2,r6
0383 EF        1528            mov     a,r7
0384 F501      1529            mov     (__mullong_PARM_2 + 1),a
0386 33        1530            rlc     a
0387 95E0      1531            subb    a,acc
0389 F502      1532            mov     (__mullong_PARM_2 + 2),a
038B F503      1533            mov     (__mullong_PARM_2 + 3),a
038D           1534   ;        main.c:395: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
038D 85F882    1535            mov     dpl,_BMM150_compensate_x_sloc0_1_0
0390 85F983    1536            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
0393 85FAF0    1537            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
0396 E5FB      1538            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0398 C004      1539            push    ar4
039A C005      1540            push    ar5
039C 120000    1541            lcall   __mullong
039F 8582F8    1542            mov     _BMM150_compensate_x_sloc0_1_0,dpl
03A2 8583F9    1543            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
03A5 85F0FA    1544            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
03A8 F5FB      1545            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03AA 9052D0    1546            mov     dptr,#_dig_xy2
03AD E0        1547            movx    a,@dptr
03AE FE        1548            mov     r6,a
03AF 33        1549            rlc     a
03B0 95E0      1550            subb    a,acc
03B2 FF        1551            mov     r7,a
03B3 F8        1552            mov     r0,a
03B4 F9        1553            mov     r1,a
03B5 750080    1554            mov     __divslong_PARM_2,#0x80
03B8 E4        1555            clr     a
03B9 F501      1556            mov     (__divslong_PARM_2 + 1),a
03BB F502      1557            mov     (__divslong_PARM_2 + 2),a
03BD F503      1558            mov     (__divslong_PARM_2 + 3),a
03BF 85F882    1559            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03C2 85F983    1560            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03C5 85FAF0    1561            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03C8 E5FB      1562            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03CA C006      1563            push    ar6
03CC C007      1564            push    ar7
03CE C000      1565            push    ar0
03D0 C001      1566            push    ar1
03D2 120000    1567            lcall   __divslong
03D5 858200    1568            mov     __mullong_PARM_2,dpl
03D8 858301    1569            mov     (__mullong_PARM_2 + 1),dph
03DB 85F002    1570            mov     (__mullong_PARM_2 + 2),b
03DE F503      1571            mov     (__mullong_PARM_2 + 3),a
03E0 D001      1572            pop     ar1
03E2 D000      1573            pop     ar0
03E4 D007      1574            pop     ar7
03E6 D006      1575            pop     ar6
03E8           1576   ;        main.c:396: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
03E8 8E82      1577            mov     dpl,r6
03EA 8F83      1578            mov     dph,r7
03EC 88F0      1579            mov     b,r0
03EE E9        1580            mov     a,r1
03EF 120000    1581            lcall   __mullong
03F2 8582F8    1582            mov     _BMM150_compensate_x_sloc0_1_0,dpl
03F5 8583F9    1583            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
03F8 85F0FA    1584            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
03FB F5FB      1585            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03FD D005      1586            pop     ar5
03FF D004      1587            pop     ar4
0401 905310    1588            mov     dptr,#_dig_xy1
0404 E0        1589            movx    a,@dptr
0405 FE        1590            mov     r6,a
0406 E4        1591            clr     a
0407 5401      1592            anl     a,#0x01
0409 A2E0      1593            mov     c,acc.0
040B CE        1594            xch     a,r6
040C 13        1595            rrc     a
040D CE        1596            xch     a,r6
040E 13        1597            rrc     a
040F CE        1598            xch     a,r6
0410 8E00      1599            mov     __mullong_PARM_2,r6
0412 F501      1600            mov     (__mullong_PARM_2 + 1),a
0414 33        1601            rlc     a
0415 95E0      1602            subb    a,acc
0417 F502      1603            mov     (__mullong_PARM_2 + 2),a
0419 F503      1604            mov     (__mullong_PARM_2 + 3),a
041B           1605   ;        main.c:397: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
041B ED        1606            mov     a,r5
041C 33        1607            rlc     a
041D 95E0      1608            subb    a,acc
041F FE        1609            mov     r6,a
0420           1610   ;        main.c:398: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
0420 8C82      1611            mov     dpl,r4
0422 8D83      1612            mov     dph,r5
0424 8EF0      1613            mov     b,r6
0426 120000    1614            lcall   __mullong
0429 AC82      1615            mov     r4,dpl
042B AD83      1616            mov     r5,dph
042D AEF0      1617            mov     r6,b
042F FF        1618            mov     r7,a
0430 EC        1619            mov     a,r4
0431 25F8      1620            add     a,_BMM150_compensate_x_sloc0_1_0
0433 FC        1621            mov     r4,a
0434 ED        1622            mov     a,r5
0435 35F9      1623            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
0437 FD        1624            mov     r5,a
0438 EE        1625            mov     a,r6
0439 35FA      1626            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
043B FE        1627            mov     r6,a
043C EF        1628            mov     a,r7
043D 35FB      1629            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
043F FF        1630            mov     r7,a
0440 750000    1631            mov     __divslong_PARM_2,#0x00
0443 750102    1632            mov     (__divslong_PARM_2 + 1),#0x02
0446 750200    1633            mov     (__divslong_PARM_2 + 2),#0x00
0449 750300    1634            mov     (__divslong_PARM_2 + 3),#0x00
044C 8C82      1635            mov     dpl,r4
044E 8D83      1636            mov     dph,r5
0450 8EF0      1637            mov     b,r6
0452 EF        1638            mov     a,r7
0453 120000    1639            lcall   __divslong
0456 AC82      1640            mov     r4,dpl
0458 AD83      1641            mov     r5,dph
045A AEF0      1642            mov     r6,b
045C FF        1643            mov     r7,a
045D 7410      1644            mov     a,#0x10
045F 2E        1645            add     a,r6
0460 FE        1646            mov     r6,a
0461 E4        1647            clr     a
0462 3F        1648            addc    a,r7
0463 FF        1649            mov     r7,a
0464           1650   ;        main.c:399: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
0464 9054D0    1651            mov     dptr,#_dig_x2
0467 E0        1652            movx    a,@dptr
0468 F8        1653            mov     r0,a
0469 33        1654            rlc     a
046A 95E0      1655            subb    a,acc
046C F9        1656            mov     r1,a
046D 74A0      1657            mov     a,#0xA0
046F 28        1658            add     a,r0
0470 F8        1659            mov     r0,a
0471 E4        1660            clr     a
0472 39        1661            addc    a,r1
0473 8800      1662            mov     __mullong_PARM_2,r0
0475 F501      1663            mov     (__mullong_PARM_2 + 1),a
0477 33        1664            rlc     a
0478 95E0      1665            subb    a,acc
047A F502      1666            mov     (__mullong_PARM_2 + 2),a
047C F503      1667            mov     (__mullong_PARM_2 + 3),a
047E           1668   ;        main.c:400: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
047E 8C82      1669            mov     dpl,r4
0480 8D83      1670            mov     dph,r5
0482 8EF0      1671            mov     b,r6
0484 EF        1672            mov     a,r7
0485 120000    1673            lcall   __mullong
0488           1674   ;        main.c:401: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
0488 750000    1675            mov     __divslong_PARM_2,#0x00
048B 750110    1676            mov     (__divslong_PARM_2 + 1),#0x10
048E 750200    1677            mov     (__divslong_PARM_2 + 2),#0x00
0491 750300    1678            mov     (__divslong_PARM_2 + 3),#0x00
0494 120000    1679            lcall   __divslong
0497 858200    1680            mov     __mullong_PARM_2,dpl
049A 858301    1681            mov     (__mullong_PARM_2 + 1),dph
049D 85F002    1682            mov     (__mullong_PARM_2 + 2),b
04A0 F503      1683            mov     (__mullong_PARM_2 + 3),a
04A2 D003      1684            pop     ar3
04A4 D002      1685            pop     ar2
04A6 EB        1686            mov     a,r3
04A7 33        1687            rlc     a
04A8 95E0      1688            subb    a,acc
04AA FC        1689            mov     r4,a
04AB           1690   ;        main.c:402: retval = ((int16_t)(process_comp_x10 / 8192));
04AB 8A82      1691            mov     dpl,r2
04AD 8B83      1692            mov     dph,r3
04AF 8CF0      1693            mov     b,r4
04B1 120000    1694            lcall   __mullong
04B4 750000    1695            mov     __divslong_PARM_2,#0x00
04B7 750120    1696            mov     (__divslong_PARM_2 + 1),#0x20
04BA 750200    1697            mov     (__divslong_PARM_2 + 2),#0x00
04BD 750300    1698            mov     (__divslong_PARM_2 + 3),#0x00
04C0 120000    1699            lcall   __divslong
04C3 AA82      1700            mov     r2,dpl
04C5 AB83      1701            mov     r3,dph
04C7           1702   ;        main.c:403: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
04C7 905510    1703            mov     dptr,#_dig_x1
04CA E0        1704            movx    a,@dptr
04CB FC        1705            mov     r4,a
04CC 33        1706            rlc     a
04CD 95E0      1707            subb    a,acc
04CF C4        1708            swap    a
04D0 03        1709            rr      a
04D1 54F8      1710            anl     a,#0xf8
04D3 CC        1711            xch     a,r4
04D4 C4        1712            swap    a
04D5 03        1713            rr      a
04D6 CC        1714            xch     a,r4
04D7 6C        1715            xrl     a,r4
04D8 CC        1716            xch     a,r4
04D9 54F8      1717            anl     a,#0xf8
04DB CC        1718            xch     a,r4
04DC 6C        1719            xrl     a,r4
04DD FD        1720            mov     r5,a
04DE EC        1721            mov     a,r4
04DF 2A        1722            add     a,r2
04E0 F582      1723            mov     dpl,a
04E2 ED        1724            mov     a,r5
04E3 3B        1725            addc    a,r3
04E4 F583      1726            mov     dph,a
04E6 750010    1727            mov     __divsint_PARM_2,#0x10
04E9 E4        1728            clr     a
04EA F501      1729            mov     (__divsint_PARM_2 + 1),a
04EC 120000    1730            lcall   __divsint
04EF E582      1731            mov     a,dpl
04F1 8583F0    1732            mov     b,dph
04F4 90CC98    1733            mov     dptr,#_BMM150_compensate_x_retval_1_106
04F7 F0        1734            movx    @dptr,a
04F8 A3        1735            inc     dptr
04F9 E5F0      1736            mov     a,b
04FB F0        1737            movx    @dptr,a
04FC 8000      1738            sjmp    L010012?
04FE           1739   L010008?:
04FE           1740   ;        main.c:406: retval = BMM150_OVERFLOW_OUTPUT; 
04FE 90CC98    1741            mov     dptr,#_BMM150_compensate_x_retval_1_106
0501 E4        1742            clr     a
0502 F0        1743            movx    @dptr,a
0503 A3        1744            inc     dptr
0504 7480      1745            mov     a,#0x80
0506 F0        1746            movx    @dptr,a
0507 8000      1747            sjmp    L010012?
0509           1748   L010011?:
0509           1749   ;        main.c:410: retval = BMM150_OVERFLOW_OUTPUT; 
0509 90CC98    1750            mov     dptr,#_BMM150_compensate_x_retval_1_106
050C E4        1751            clr     a
050D F0        1752            movx    @dptr,a
050E A3        1753            inc     dptr
050F 7480      1754            mov     a,#0x80
0511 F0        1755            movx    @dptr,a
0512           1756   L010012?:
0512           1757   ;        main.c:412: return retval; 
0512 90CC98    1758            mov     dptr,#_BMM150_compensate_x_retval_1_106
0515 E0        1759            movx    a,@dptr
0516 FA        1760            mov     r2,a
0517 A3        1761            inc     dptr
0518 E0        1762            movx    a,@dptr
0519 8A82      1763            mov     dpl,r2
051B F583      1764            mov     dph,a
051D 22        1765            ret
051E           1766   ;------------------------------------------------------------
051E           1767   ;Allocation info for local variables in function 'BMM150_compensate_y'
051E           1768   ;------------------------------------------------------------
051E           1769   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
051E           1770   ;mag_data_y                Allocated to registers r2 r3 r4 
051E           1771   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
051E           1772   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_115'
051E           1773   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_115'
051E           1774   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_115'
051E           1775   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_115'
051E           1776   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_115'
051E           1777   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_115'
051E           1778   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_115'
051E           1779   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_115'
051E           1780   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_115'
051E           1781   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_115'
051E           1782   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_115'
051E           1783   ;------------------------------------------------------------
051E           1784   ;        main.c:415: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
051E           1785   ;        -----------------------------------------
051E           1786   ;         function BMM150_compensate_y
051E           1787   ;        -----------------------------------------
051E           1788   _BMM150_compensate_y:
051E           1789   ;        main.c:433: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
051E ACF0      1790            mov     r4,b
0520 120000    1791            lcall   __gptrget
0523 FA        1792            mov     r2,a
0524 A3        1793            inc     dptr
0525 120000    1794            lcall   __gptrget
0528 FB        1795            mov     r3,a
0529 BA0098    1796            cjne    r2,#0x00,L011019?
052C BBF098    1797            cjne    r3,#0xF0,L011019?
052F 020000    1798            ljmp    L011011?
0532           1799   L011019?:
0532           1800   ;        main.c:435: if (*data_rhall != 0)
0532 AC40      1801            mov     r4,_BMM150_compensate_y_PARM_2
0534 AD41      1802            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
0536 AE42      1803            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
0538 8C82      1804            mov     dpl,r4
053A 8D83      1805            mov     dph,r5
053C 8EF0      1806            mov     b,r6
053E 120000    1807            lcall   __gptrget
0541 FC        1808            mov     r4,a
0542 A3        1809            inc     dptr
0543 120000    1810            lcall   __gptrget
0546 FD        1811            mov     r5,a
0547 4C        1812            orl     a,r4
0548 6000      1813            jz      L011005?
054A           1814   ;        main.c:438: process_comp_y0 = *data_rhall;
054A 90CDB8    1815            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
054D EC        1816            mov     a,r4
054E F0        1817            movx    @dptr,a
054F A3        1818            inc     dptr
0550 ED        1819            mov     a,r5
0551 F0        1820            movx    @dptr,a
0552 8000      1821            sjmp    L011006?
0554           1822   L011005?:
0554           1823   ;        main.c:440: else if (dig_xyz1 != 0)
0554 905290    1824            mov     dptr,#_dig_xyz1
0557 E0        1825            movx    a,@dptr
0558 FC        1826            mov     r4,a
0559 A3        1827            inc     dptr
055A E0        1828            movx    a,@dptr
055B FD        1829            mov     r5,a
055C 4C        1830            orl     a,r4
055D 6000      1831            jz      L011002?
055F           1832   ;        main.c:442: process_comp_y0 = dig_xyz1;
055F 90CDB8    1833            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
0562 EC        1834            mov     a,r4
0563 F0        1835            movx    @dptr,a
0564 A3        1836            inc     dptr
0565 ED        1837            mov     a,r5
0566 F0        1838            movx    @dptr,a
0567 8000      1839            sjmp    L011006?
0569           1840   L011002?:
0569           1841   ;        main.c:446: process_comp_y0 = 0;
0569 90CDB8    1842            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
056C E4        1843            clr     a
056D F0        1844            movx    @dptr,a
056E A3        1845            inc     dptr
056F F0        1846            movx    @dptr,a
0570           1847   L011006?:
0570           1848   ;        main.c:449: if (process_comp_y0 != 0)
0570 90CDB8    1849            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
0573 E0        1850            movx    a,@dptr
0574 FC        1851            mov     r4,a
0575 A3        1852            inc     dptr
0576 E0        1853            movx    a,@dptr
0577 FD        1854            mov     r5,a
0578 4C        1855            orl     a,r4
0579 7000      1856            jnz     L011022?
057B 020000    1857            ljmp    L011008?
057E           1858   L011022?:
057E           1859   ;        main.c:452: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
057E 905290    1860            mov     dptr,#_dig_xyz1
0581 E0        1861            movx    a,@dptr
0582 FE        1862            mov     r6,a
0583 A3        1863            inc     dptr
0584 E0        1864            movx    a,@dptr
0585 FF        1865            mov     r7,a
0586 E4        1866            clr     a
0587 F8        1867            mov     r0,a
0588 EF        1868            mov     a,r7
0589 C8        1869            xch     a,r0
058A 5403      1870            anl     a,#0x03
058C A2E0      1871            mov     c,acc.0
058E C8        1872            xch     a,r0
058F 13        1873            rrc     a
0590 C8        1874            xch     a,r0
0591 13        1875            rrc     a
0592 A2E0      1876            mov     c,acc.0
0594 C8        1877            xch     a,r0
0595 13        1878            rrc     a
0596 C8        1879            xch     a,r0
0597 13        1880            rrc     a
0598 C8        1881            xch     a,r0
0599 F9        1882            mov     r1,a
059A EE        1883            mov     a,r6
059B 03        1884            rr      a
059C 03        1885            rr      a
059D 54C0      1886            anl     a,#0xc0
059F FF        1887            mov     r7,a
05A0 EE        1888            mov     a,r6
05A1 03        1889            rr      a
05A2 03        1890            rr      a
05A3 543F      1891            anl     a,#0x3f
05A5 48        1892            orl     a,r0
05A6 F8        1893            mov     r0,a
05A7 7E00      1894            mov     r6,#0x00
05A9 8C00      1895            mov     __divslong_PARM_2,r4
05AB 8D01      1896            mov     (__divslong_PARM_2 + 1),r5
05AD 750200    1897            mov     (__divslong_PARM_2 + 2),#0x00
05B0 750300    1898            mov     (__divslong_PARM_2 + 3),#0x00
05B3           1899   ;        main.c:453: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
05B3 8E82      1900            mov     dpl,r6
05B5 8F83      1901            mov     dph,r7
05B7 88F0      1902            mov     b,r0
05B9 E9        1903            mov     a,r1
05BA C002      1904            push    ar2
05BC C003      1905            push    ar3
05BE 120000    1906            lcall   __divslong
05C1 AC82      1907            mov     r4,dpl
05C3 E583      1908            mov     a,dph
05C5 24C0      1909            add     a,#0xc0
05C7 FD        1910            mov     r5,a
05C8           1911   ;        main.c:455: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
05C8 8C06      1912            mov     ar6,r4
05CA 8D07      1913            mov     ar7,r5
05CC 8E48      1914            mov     _BMM150_compensate_y_sloc0_1_0,r6
05CE EF        1915            mov     a,r7
05CF F549      1916            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
05D1 33        1917            rlc     a
05D2 95E0      1918            subb    a,acc
05D4 F54A      1919            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
05D6 F54B      1920            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
05D8 8C06      1921            mov     ar6,r4
05DA 8D07      1922            mov     ar7,r5
05DC 8E00      1923            mov     __mullong_PARM_2,r6
05DE EF        1924            mov     a,r7
05DF F501      1925            mov     (__mullong_PARM_2 + 1),a
05E1 33        1926            rlc     a
05E2 95E0      1927            subb    a,acc
05E4 F502      1928            mov     (__mullong_PARM_2 + 2),a
05E6 F503      1929            mov     (__mullong_PARM_2 + 3),a
05E8           1930   ;        main.c:456: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
05E8 854882    1931            mov     dpl,_BMM150_compensate_y_sloc0_1_0
05EB 854983    1932            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
05EE 854AF0    1933            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
05F1 E54B      1934            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
05F3 C004      1935            push    ar4
05F5 C005      1936            push    ar5
05F7 120000    1937            lcall   __mullong
05FA 858248    1938            mov     _BMM150_compensate_y_sloc0_1_0,dpl
05FD 858349    1939            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
0600 85F04A    1940            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
0603 F54B      1941            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0605 9052D0    1942            mov     dptr,#_dig_xy2
0608 E0        1943            movx    a,@dptr
0609 FE        1944            mov     r6,a
060A 33        1945            rlc     a
060B 95E0      1946            subb    a,acc
060D FF        1947            mov     r7,a
060E F8        1948            mov     r0,a
060F F9        1949            mov     r1,a
0610 750080    1950            mov     __divslong_PARM_2,#0x80
0613 E4        1951            clr     a
0614 F501      1952            mov     (__divslong_PARM_2 + 1),a
0616 F502      1953            mov     (__divslong_PARM_2 + 2),a
0618 F503      1954            mov     (__divslong_PARM_2 + 3),a
061A 854882    1955            mov     dpl,_BMM150_compensate_y_sloc0_1_0
061D 854983    1956            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0620 854AF0    1957            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
0623 E54B      1958            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
0625 C006      1959            push    ar6
0627 C007      1960            push    ar7
0629 C000      1961            push    ar0
062B C001      1962            push    ar1
062D 120000    1963            lcall   __divslong
0630 858200    1964            mov     __mullong_PARM_2,dpl
0633 858301    1965            mov     (__mullong_PARM_2 + 1),dph
0636 85F002    1966            mov     (__mullong_PARM_2 + 2),b
0639 F503      1967            mov     (__mullong_PARM_2 + 3),a
063B D001      1968            pop     ar1
063D D000      1969            pop     ar0
063F D007      1970            pop     ar7
0641 D006      1971            pop     ar6
0643           1972   ;        main.c:457: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
0643 8E82      1973            mov     dpl,r6
0645 8F83      1974            mov     dph,r7
0647 88F0      1975            mov     b,r0
0649 E9        1976            mov     a,r1
064A 120000    1977            lcall   __mullong
064D 858248    1978            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0650 858349    1979            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
0653 85F04A    1980            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
0656 F54B      1981            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0658 D005      1982            pop     ar5
065A D004      1983            pop     ar4
065C 905310    1984            mov     dptr,#_dig_xy1
065F E0        1985            movx    a,@dptr
0660 FE        1986            mov     r6,a
0661 E4        1987            clr     a
0662 5401      1988            anl     a,#0x01
0664 A2E0      1989            mov     c,acc.0
0666 CE        1990            xch     a,r6
0667 13        1991            rrc     a
0668 CE        1992            xch     a,r6
0669 13        1993            rrc     a
066A CE        1994            xch     a,r6
066B 8E00      1995            mov     __mullong_PARM_2,r6
066D F501      1996            mov     (__mullong_PARM_2 + 1),a
066F 33        1997            rlc     a
0670 95E0      1998            subb    a,acc
0672 F502      1999            mov     (__mullong_PARM_2 + 2),a
0674 F503      2000            mov     (__mullong_PARM_2 + 3),a
0676           2001   ;        main.c:458: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
0676 ED        2002            mov     a,r5
0677 33        2003            rlc     a
0678 95E0      2004            subb    a,acc
067A FE        2005            mov     r6,a
067B 8C82      2006            mov     dpl,r4
067D 8D83      2007            mov     dph,r5
067F 8EF0      2008            mov     b,r6
0681 120000    2009            lcall   __mullong
0684 AC82      2010            mov     r4,dpl
0686 AD83      2011            mov     r5,dph
0688 AEF0      2012            mov     r6,b
068A FF        2013            mov     r7,a
068B EC        2014            mov     a,r4
068C 2548      2015            add     a,_BMM150_compensate_y_sloc0_1_0
068E FC        2016            mov     r4,a
068F ED        2017            mov     a,r5
0690 3549      2018            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
0692 FD        2019            mov     r5,a
0693 EE        2020            mov     a,r6
0694 354A      2021            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
0696 FE        2022            mov     r6,a
0697 EF        2023            mov     a,r7
0698 354B      2024            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
069A FF        2025            mov     r7,a
069B 750000    2026            mov     __divslong_PARM_2,#0x00
069E 750102    2027            mov     (__divslong_PARM_2 + 1),#0x02
06A1 750200    2028            mov     (__divslong_PARM_2 + 2),#0x00
06A4 750300    2029            mov     (__divslong_PARM_2 + 3),#0x00
06A7           2030   ;        main.c:459: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
06A7 8C82      2031            mov     dpl,r4
06A9 8D83      2032            mov     dph,r5
06AB 8EF0      2033            mov     b,r6
06AD EF        2034            mov     a,r7
06AE 120000    2035            lcall   __divslong
06B1 AC82      2036            mov     r4,dpl
06B3 AD83      2037            mov     r5,dph
06B5 AEF0      2038            mov     r6,b
06B7 FF        2039            mov     r7,a
06B8 905450    2040            mov     dptr,#_dig_y2
06BB E0        2041            movx    a,@dptr
06BC F8        2042            mov     r0,a
06BD 33        2043            rlc     a
06BE 95E0      2044            subb    a,acc
06C0 F9        2045            mov     r1,a
06C1 74A0      2046            mov     a,#0xA0
06C3 28        2047            add     a,r0
06C4 F8        2048            mov     r0,a
06C5 E4        2049            clr     a
06C6 39        2050            addc    a,r1
06C7 8800      2051            mov     __mullong_PARM_2,r0
06C9 F501      2052            mov     (__mullong_PARM_2 + 1),a
06CB 33        2053            rlc     a
06CC 95E0      2054            subb    a,acc
06CE F502      2055            mov     (__mullong_PARM_2 + 2),a
06D0 F503      2056            mov     (__mullong_PARM_2 + 3),a
06D2           2057   ;        main.c:460: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
06D2 7410      2058            mov     a,#0x10
06D4 2E        2059            add     a,r6
06D5 FE        2060            mov     r6,a
06D6 E4        2061            clr     a
06D7 3F        2062            addc    a,r7
06D8 8C82      2063            mov     dpl,r4
06DA 8D83      2064            mov     dph,r5
06DC 8EF0      2065            mov     b,r6
06DE 120000    2066            lcall   __mullong
06E1           2067   ;        main.c:461: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
06E1 750000    2068            mov     __divslong_PARM_2,#0x00
06E4 750110    2069            mov     (__divslong_PARM_2 + 1),#0x10
06E7 750200    2070            mov     (__divslong_PARM_2 + 2),#0x00
06EA 750300    2071            mov     (__divslong_PARM_2 + 3),#0x00
06ED 120000    2072            lcall   __divslong
06F0 858200    2073            mov     __mullong_PARM_2,dpl
06F3 858301    2074            mov     (__mullong_PARM_2 + 1),dph
06F6 85F002    2075            mov     (__mullong_PARM_2 + 2),b
06F9 F503      2076            mov     (__mullong_PARM_2 + 3),a
06FB D003      2077            pop     ar3
06FD D002      2078            pop     ar2
06FF EB        2079            mov     a,r3
0700 33        2080            rlc     a
0701 95E0      2081            subb    a,acc
0703 FC        2082            mov     r4,a
0704           2083   ;        main.c:462: retval = (int16_t)(process_comp_y9 / 8192);
0704 8A82      2084            mov     dpl,r2
0706 8B83      2085            mov     dph,r3
0708 8CF0      2086            mov     b,r4
070A 120000    2087            lcall   __mullong
070D 750000    2088            mov     __divslong_PARM_2,#0x00
0710 750120    2089            mov     (__divslong_PARM_2 + 1),#0x20
0713 750200    2090            mov     (__divslong_PARM_2 + 2),#0x00
0716 750300    2091            mov     (__divslong_PARM_2 + 3),#0x00
0719 120000    2092            lcall   __divslong
071C AA82      2093            mov     r2,dpl
071E AB83      2094            mov     r3,dph
0720           2095   ;        main.c:463: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
0720 905490    2096            mov     dptr,#_dig_y1
0723 E0        2097            movx    a,@dptr
0724 FC        2098            mov     r4,a
0725 33        2099            rlc     a
0726 95E0      2100            subb    a,acc
0728 C4        2101            swap    a
0729 03        2102            rr      a
072A 54F8      2103            anl     a,#0xf8
072C CC        2104            xch     a,r4
072D C4        2105            swap    a
072E 03        2106            rr      a
072F CC        2107            xch     a,r4
0730 6C        2108            xrl     a,r4
0731 CC        2109            xch     a,r4
0732 54F8      2110            anl     a,#0xf8
0734 CC        2111            xch     a,r4
0735 6C        2112            xrl     a,r4
0736 FD        2113            mov     r5,a
0737 EC        2114            mov     a,r4
0738 2A        2115            add     a,r2
0739 F582      2116            mov     dpl,a
073B ED        2117            mov     a,r5
073C 3B        2118            addc    a,r3
073D F583      2119            mov     dph,a
073F 750010    2120            mov     __divsint_PARM_2,#0x10
0742 E4        2121            clr     a
0743 F501      2122            mov     (__divsint_PARM_2 + 1),a
0745 120000    2123            lcall   __divsint
0748 E582      2124            mov     a,dpl
074A 8583F0    2125            mov     b,dph
074D 90CD58    2126            mov     dptr,#_BMM150_compensate_y_retval_1_115
0750 F0        2127            movx    @dptr,a
0751 A3        2128            inc     dptr
0752 E5F0      2129            mov     a,b
0754 F0        2130            movx    @dptr,a
0755 8000      2131            sjmp    L011012?
0757           2132   L011008?:
0757           2133   ;        main.c:467: retval = BMM150_OVERFLOW_OUTPUT;
0757 90CD58    2134            mov     dptr,#_BMM150_compensate_y_retval_1_115
075A E4        2135            clr     a
075B F0        2136            movx    @dptr,a
075C A3        2137            inc     dptr
075D 7480      2138            mov     a,#0x80
075F F0        2139            movx    @dptr,a
0760 8000      2140            sjmp    L011012?
0762           2141   L011011?:
0762           2142   ;        main.c:473: retval = BMM150_OVERFLOW_OUTPUT;
0762 90CD58    2143            mov     dptr,#_BMM150_compensate_y_retval_1_115
0765 E4        2144            clr     a
0766 F0        2145            movx    @dptr,a
0767 A3        2146            inc     dptr
0768 7480      2147            mov     a,#0x80
076A F0        2148            movx    @dptr,a
076B           2149   L011012?:
076B           2150   ;        main.c:476: return retval;
076B 90CD58    2151            mov     dptr,#_BMM150_compensate_y_retval_1_115
076E E0        2152            movx    a,@dptr
076F FA        2153            mov     r2,a
0770 A3        2154            inc     dptr
0771 E0        2155            movx    a,@dptr
0772 8A82      2156            mov     dpl,r2
0774 F583      2157            mov     dph,a
0776 22        2158            ret
0777           2159   ;------------------------------------------------------------
0777           2160   ;Allocation info for local variables in function 'BMM150_Read_Data'
0777           2161   ;------------------------------------------------------------
0777           2162   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
0777           2163   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_123'
0777           2164   ;raw_x_lsb                 Allocated with name '_BMM150_Read_Data_raw_x_lsb_1_124'
0777           2165   ;raw_x_msb                 Allocated with name '_BMM150_Read_Data_raw_x_msb_1_124'
0777           2166   ;raw_y_lsb                 Allocated with name '_BMM150_Read_Data_raw_y_lsb_1_124'
0777           2167   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_124'
0777           2168   ;raw_rhall_lsb             Allocated with name '_BMM150_Read_Data_raw_rhall_lsb_1_124'
0777           2169   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_124'
0777           2170   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_124'
0777           2171   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_124'
0777           2172   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_124'
0777           2173   ;msb_data                  Allocated with name '_BMM150_Read_Data_msb_data_1_124'
0777           2174   ;------------------------------------------------------------
0777           2175   ;        main.c:479: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y)
0777           2176   ;        -----------------------------------------
0777           2177   ;         function BMM150_Read_Data
0777           2178   ;        -----------------------------------------
0777           2179   _BMM150_Read_Data:
0777 858298    2180            mov     _BMM150_Read_Data_mag_x_1_123,dpl
077A 858399    2181            mov     (_BMM150_Read_Data_mag_x_1_123 + 1),dph
077D 85F09A    2182            mov     (_BMM150_Read_Data_mag_x_1_123 + 2),b
0780           2183   ;        main.c:486: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
0780 758242    2184            mov     dpl,#0x42
0783 120000    2185            lcall   _SPI_read
0786 AD82      2186            mov     r5,dpl
0788           2187   ;        main.c:487: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
0788 758243    2188            mov     dpl,#0x43
078B C005      2189            push    ar5
078D 120000    2190            lcall   _SPI_read
0790 AE82      2191            mov     r6,dpl
0792           2192   ;        main.c:488: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
0792 758244    2193            mov     dpl,#0x44
0795 C006      2194            push    ar6
0797 120000    2195            lcall   _SPI_read
079A AF82      2196            mov     r7,dpl
079C           2197   ;        main.c:489: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
079C 758245    2198            mov     dpl,#0x45
079F C007      2199            push    ar7
07A1 120000    2200            lcall   _SPI_read
07A4 A882      2201            mov     r0,dpl
07A6           2202   ;        main.c:492: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
07A6 758248    2203            mov     dpl,#0x48
07A9 C000      2204            push    ar0
07AB 120000    2205            lcall   _SPI_read
07AE A982      2206            mov     r1,dpl
07B0           2207   ;        main.c:493: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
07B0 758249    2208            mov     dpl,#0x49
07B3 C001      2209            push    ar1
07B5 120000    2210            lcall   _SPI_read
07B8 AA82      2211            mov     r2,dpl
07BA D001      2212            pop     ar1
07BC D000      2213            pop     ar0
07BE D007      2214            pop     ar7
07C0 D006      2215            pop     ar6
07C2 D005      2216            pop     ar5
07C4           2217   ;        main.c:497: raw_x_lsb = ((raw_x_lsb & 0b_1111_1000)) >> 3;
07C4 5305F8    2218            anl     ar5,#0xF8
07C7 ED        2219            mov     a,r5
07C8 C4        2220            swap    a
07C9 23        2221            rl      a
07CA 541F      2222            anl     a,#0x1f
07CC FD        2223            mov     r5,a
07CD           2224   ;        main.c:498: msb_data = ((int16_t)((int8_t)raw_x_msb)) << 5; 
07CD EE        2225            mov     a,r6
07CE 33        2226            rlc     a
07CF 95E0      2227            subb    a,acc
07D1 C4        2228            swap    a
07D2 23        2229            rl      a
07D3 54E0      2230            anl     a,#0xe0
07D5 CE        2231            xch     a,r6
07D6 C4        2232            swap    a
07D7 23        2233            rl      a
07D8 CE        2234            xch     a,r6
07D9 6E        2235            xrl     a,r6
07DA CE        2236            xch     a,r6
07DB 54E0      2237            anl     a,#0xe0
07DD CE        2238            xch     a,r6
07DE 6E        2239            xrl     a,r6
07DF FB        2240            mov     r3,a
07E0           2241   ;        main.c:499: x_val = (int16_t)(msb_data | raw_x_lsb);
07E0 7C00      2242            mov     r4,#0x00
07E2 90CE08    2243            mov     dptr,#_BMM150_Read_Data_x_val_1_124
07E5 ED        2244            mov     a,r5
07E6 4E        2245            orl     a,r6
07E7 F0        2246            movx    @dptr,a
07E8 EC        2247            mov     a,r4
07E9 4B        2248            orl     a,r3
07EA A3        2249            inc     dptr
07EB F0        2250            movx    @dptr,a
07EC           2251   ;        main.c:502: raw_y_lsb = ((raw_y_lsb & 0b_1111_1000)) >> 3;
07EC 5307F8    2252            anl     ar7,#0xF8
07EF EF        2253            mov     a,r7
07F0 C4        2254            swap    a
07F1 23        2255            rl      a
07F2 541F      2256            anl     a,#0x1f
07F4 FF        2257            mov     r7,a
07F5           2258   ;        main.c:503: msb_data = ((int16_t)((int8_t)raw_y_msb)) << 5; 
07F5 E8        2259            mov     a,r0
07F6 33        2260            rlc     a
07F7 95E0      2261            subb    a,acc
07F9 C4        2262            swap    a
07FA 23        2263            rl      a
07FB 54E0      2264            anl     a,#0xe0
07FD C8        2265            xch     a,r0
07FE C4        2266            swap    a
07FF 23        2267            rl      a
0800 C8        2268            xch     a,r0
0801 68        2269            xrl     a,r0
0802 C8        2270            xch     a,r0
0803 54E0      2271            anl     a,#0xe0
0805 C8        2272            xch     a,r0
0806 68        2273            xrl     a,r0
0807 FB        2274            mov     r3,a
0808           2275   ;        main.c:504: y_val = (int16_t)(msb_data | raw_y_lsb);
0808 7C00      2276            mov     r4,#0x00
080A 90CE58    2277            mov     dptr,#_BMM150_Read_Data_y_val_1_124
080D EF        2278            mov     a,r7
080E 48        2279            orl     a,r0
080F F0        2280            movx    @dptr,a
0810 EC        2281            mov     a,r4
0811 4B        2282            orl     a,r3
0812 A3        2283            inc     dptr
0813 F0        2284            movx    @dptr,a
0814           2285   ;        main.c:512: raw_rhall_lsb = ((raw_rhall_lsb & 0xFC) >> 2);
0814 5301FC    2286            anl     ar1,#0xFC
0817 E9        2287            mov     a,r1
0818 03        2288            rr      a
0819 03        2289            rr      a
081A 543F      2290            anl     a,#0x3f
081C F9        2291            mov     r1,a
081D           2292   ;        main.c:513: rhall_val = (uint16_t)(((uint16_t)raw_rhall_msb << 6) | raw_rhall_lsb);
081D E4        2293            clr     a
081E 5403      2294            anl     a,#0x03
0820 A2E0      2295            mov     c,acc.0
0822 CA        2296            xch     a,r2
0823 13        2297            rrc     a
0824 CA        2298            xch     a,r2
0825 13        2299            rrc     a
0826 A2E0      2300            mov     c,acc.0
0828 CA        2301            xch     a,r2
0829 13        2302            rrc     a
082A CA        2303            xch     a,r2
082B 13        2304            rrc     a
082C CA        2305            xch     a,r2
082D FB        2306            mov     r3,a
082E 7C00      2307            mov     r4,#0x00
0830 90CEB8    2308            mov     dptr,#_BMM150_Read_Data_rhall_val_1_124
0833 E9        2309            mov     a,r1
0834 4A        2310            orl     a,r2
0835 F0        2311            movx    @dptr,a
0836 EC        2312            mov     a,r4
0837 4B        2313            orl     a,r3
0838 A3        2314            inc     dptr
0839 F0        2315            movx    @dptr,a
083A           2316   ;        main.c:516: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
083A 7590B8    2317            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_124
083D 7591CE    2318            mov     (_BMM150_compensate_x_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_124 >> 8)
0840 759200    2319            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x00
0843 90CE08    2320            mov     dptr,#_BMM150_Read_Data_x_val_1_124
0846 75F000    2321            mov     b,#0x00
0849 120000    2322            lcall   _BMM150_compensate_x
084C AA82      2323            mov     r2,dpl
084E AB83      2324            mov     r3,dph
0850 859882    2325            mov     dpl,_BMM150_Read_Data_mag_x_1_123
0853 859983    2326            mov     dph,(_BMM150_Read_Data_mag_x_1_123 + 1)
0856 859AF0    2327            mov     b,(_BMM150_Read_Data_mag_x_1_123 + 2)
0859 EA        2328            mov     a,r2
085A 120000    2329            lcall   __gptrput
085D A3        2330            inc     dptr
085E EB        2331            mov     a,r3
085F 120000    2332            lcall   __gptrput
0862           2333   ;        main.c:517: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
0862 AAF0      2334            mov     r2,_BMM150_Read_Data_PARM_2
0864 ABF1      2335            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
0866 ACF2      2336            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
0868 7540B8    2337            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_124
086B 7541CE    2338            mov     (_BMM150_compensate_y_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_124 >> 8)
086E 754200    2339            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x00
0871 90CE58    2340            mov     dptr,#_BMM150_Read_Data_y_val_1_124
0874 75F000    2341            mov     b,#0x00
0877 C002      2342            push    ar2
0879 C003      2343            push    ar3
087B C004      2344            push    ar4
087D 120000    2345            lcall   _BMM150_compensate_y
0880 AD82      2346            mov     r5,dpl
0882 AE83      2347            mov     r6,dph
0884 D004      2348            pop     ar4
0886 D003      2349            pop     ar3
0888 D002      2350            pop     ar2
088A 8A82      2351            mov     dpl,r2
088C 8B83      2352            mov     dph,r3
088E 8CF0      2353            mov     b,r4
0890 ED        2354            mov     a,r5
0891 120000    2355            lcall   __gptrput
0894 A3        2356            inc     dptr
0895 EE        2357            mov     a,r6
0896 020000    2358            ljmp    __gptrput
0899           2359   ;------------------------------------------------------------
0899           2360   ;Allocation info for local variables in function 'UART1_Init'
0899           2361   ;------------------------------------------------------------
0899           2362   ;baudrate                  Allocated to registers r2 r3 r4 r5 
0899           2363   ;------------------------------------------------------------
0899           2364   ;        main.c:523: void UART1_Init (unsigned long baudrate)
0899           2365   ;        -----------------------------------------
0899           2366   ;         function UART1_Init
0899           2367   ;        -----------------------------------------
0899           2368   _UART1_Init:
0899 AA82      2369            mov     r2,dpl
089B AB83      2370            mov     r3,dph
089D ACF0      2371            mov     r4,b
089F FD        2372            mov     r5,a
08A0           2373   ;        main.c:525: SFRPAGE = 0x20;
08A0 75A720    2374            mov     _SFRPAGE,#0x20
08A3           2375   ;        main.c:526: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
08A3 75930C    2376            mov     _SMOD1,#0x0C
08A6           2377   ;        main.c:527: SCON1 = 0x10;
08A6 75C810    2378            mov     _SCON1,#0x10
08A9           2379   ;        main.c:528: SBCON1 =0x00;   // disable baud rate generator
08A9 759400    2380            mov     _SBCON1,#0x00
08AC           2381   ;        main.c:529: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
08AC 8A00      2382            mov     __divulong_PARM_2,r2
08AE 8B01      2383            mov     (__divulong_PARM_2 + 1),r3
08B0 8C02      2384            mov     (__divulong_PARM_2 + 2),r4
08B2 8D03      2385            mov     (__divulong_PARM_2 + 3),r5
08B4 90A200    2386            mov     dptr,#0xA200
08B7 75F04A    2387            mov     b,#0x4A
08BA 7404      2388            mov     a,#0x04
08BC 120000    2389            lcall   __divulong
08BF AA82      2390            mov     r2,dpl
08C1 AB83      2391            mov     r3,dph
08C3 ACF0      2392            mov     r4,b
08C5 FD        2393            mov     r5,a
08C6 750018    2394            mov     __divulong_PARM_2,#0x18
08C9 E4        2395            clr     a
08CA F501      2396            mov     (__divulong_PARM_2 + 1),a
08CC F502      2397            mov     (__divulong_PARM_2 + 2),a
08CE F503      2398            mov     (__divulong_PARM_2 + 3),a
08D0 8A82      2399            mov     dpl,r2
08D2 8B83      2400            mov     dph,r3
08D4 8CF0      2401            mov     b,r4
08D6 ED        2402            mov     a,r5
08D7 120000    2403            lcall   __divulong
08DA AA82      2404            mov     r2,dpl
08DC AB83      2405            mov     r3,dph
08DE ACF0      2406            mov     r4,b
08E0 FD        2407            mov     r5,a
08E1 E4        2408            clr     a
08E2 C3        2409            clr     c
08E3 9A        2410            subb    a,r2
08E4 FA        2411            mov     r2,a
08E5 E4        2412            clr     a
08E6 9B        2413            subb    a,r3
08E7 FB        2414            mov     r3,a
08E8 7401      2415            mov     a,#0x01
08EA 9C        2416            subb    a,r4
08EB E4        2417            clr     a
08EC 9D        2418            subb    a,r5
08ED 8A95      2419            mov     _SBRL1,r2
08EF 8B96      2420            mov     (_SBRL1 >> 8),r3
08F1           2421   ;        main.c:530: TI1 = 1; // indicate ready for TX
08F1 D2C9      2422            setb    _TI1
08F3           2423   ;        main.c:531: SBCON1 |= 0x40;   // enable baud rate generator
08F3 439440    2424            orl     _SBCON1,#0x40
08F6           2425   ;        main.c:532: SFRPAGE = 0x00;
08F6 75A700    2426            mov     _SFRPAGE,#0x00
08F9 22        2427            ret
08FA           2428   ;------------------------------------------------------------
08FA           2429   ;Allocation info for local variables in function 'putchar1'
08FA           2430   ;------------------------------------------------------------
08FA           2431   ;c                         Allocated to registers r2 
08FA           2432   ;------------------------------------------------------------
08FA           2433   ;        main.c:535: void putchar1 (char c) 
08FA           2434   ;        -----------------------------------------
08FA           2435   ;         function putchar1
08FA           2436   ;        -----------------------------------------
08FA           2437   _putchar1:
08FA AA82      2438            mov     r2,dpl
08FC           2439   ;        main.c:537: SFRPAGE = 0x20;
08FC 75A720    2440            mov     _SFRPAGE,#0x20
08FF           2441   ;        main.c:538: while (!TI1);
08FF           2442   L014001?:
08FF           2443   ;        main.c:539: TI1=0;
08FF 10C9A8    2444            jbc     _TI1,L014008?
0902 8000      2445            sjmp    L014001?
0904           2446   L014008?:
0904           2447   ;        main.c:540: SBUF1 = c;
0904 8A92      2448            mov     _SBUF1,r2
0906           2449   ;        main.c:541: SFRPAGE = 0x00;
0906 75A700    2450            mov     _SFRPAGE,#0x00
0909 22        2451            ret
090A           2452   ;------------------------------------------------------------
090A           2453   ;Allocation info for local variables in function 'sendstr1'
090A           2454   ;------------------------------------------------------------
090A           2455   ;s                         Allocated to registers r2 r3 r4 
090A           2456   ;------------------------------------------------------------
090A           2457   ;        main.c:544: void sendstr1 (char * s)
090A           2458   ;        -----------------------------------------
090A           2459   ;         function sendstr1
090A           2460   ;        -----------------------------------------
090A           2461   _sendstr1:
090A AA82      2462            mov     r2,dpl
090C AB83      2463            mov     r3,dph
090E ACF0      2464            mov     r4,b
0910           2465   ;        main.c:546: while(*s)
0910           2466   L015001?:
0910 8A82      2467            mov     dpl,r2
0912 8B83      2468            mov     dph,r3
0914 8CF0      2469            mov     b,r4
0916 120000    2470            lcall   __gptrget
0919 FD        2471            mov     r5,a
091A 6000      2472            jz      L015004?
091C           2473   ;        main.c:548: putchar1(*s);
091C 8D82      2474            mov     dpl,r5
091E C002      2475            push    ar2
0920 C003      2476            push    ar3
0922 C004      2477            push    ar4
0924 120000    2478            lcall   _putchar1
0927 D004      2479            pop     ar4
0929 D003      2480            pop     ar3
092B D002      2481            pop     ar2
092D           2482   ;        main.c:549: s++;        
092D 0A        2483            inc     r2
092E BA00E8    2484            cjne    r2,#0x00,L015001?
0931 0B        2485            inc     r3
0932 8000      2486            sjmp    L015001?
0934           2487   L015004?:
0934 22        2488            ret
0935           2489   ;------------------------------------------------------------
0935           2490   ;Allocation info for local variables in function 'getchar1'
0935           2491   ;------------------------------------------------------------
0935           2492   ;c                         Allocated with name '_getchar1_c_1_133'
0935           2493   ;------------------------------------------------------------
0935           2494   ;        main.c:553: char getchar1 (void)
0935           2495   ;        -----------------------------------------
0935           2496   ;         function getchar1
0935           2497   ;        -----------------------------------------
0935           2498   _getchar1:
0935           2499   ;        main.c:556: SFRPAGE = 0x20;
0935 75A720    2500            mov     _SFRPAGE,#0x20
0938           2501   ;        main.c:557: while (!RI1);
0938           2502   L016001?:
0938           2503   ;        main.c:558: RI1=0;
0938 10C8A8    2504            jbc     _RI1,L016008?
093B 8000      2505            sjmp    L016001?
093D           2506   L016008?:
093D           2507   ;        main.c:560: SCON1&=0b_0011_1111;
093D 53C83F    2508            anl     _SCON1,#0x3F
0940           2509   ;        main.c:561: c = SBUF1;
0940 859282    2510            mov     dpl,_SBUF1
0943           2511   ;        main.c:562: SFRPAGE = 0x00;
0943 75A700    2512            mov     _SFRPAGE,#0x00
0946           2513   ;        main.c:563: return (c);
0946 22        2514            ret
0947           2515   ;------------------------------------------------------------
0947           2516   ;Allocation info for local variables in function 'getchar1_with_timeout'
0947           2517   ;------------------------------------------------------------
0947           2518   ;c                         Allocated with name '_getchar1_with_timeout_c_1_135'
0947           2519   ;timeout                   Allocated with name '_getchar1_with_timeout_timeout_1_135'
0947           2520   ;------------------------------------------------------------
0947           2521   ;        main.c:566: char getchar1_with_timeout (void)
0947           2522   ;        -----------------------------------------
0947           2523   ;         function getchar1_with_timeout
0947           2524   ;        -----------------------------------------
0947           2525   _getchar1_with_timeout:
0947           2526   ;        main.c:570: SFRPAGE = 0x20;
0947 75A720    2527            mov     _SFRPAGE,#0x20
094A           2528   ;        main.c:572: while (!RI1)
094A 7A00      2529            mov     r2,#0x00
094C 7B00      2530            mov     r3,#0x00
094E           2531   L017003?:
094E 20C828    2532            jb      _RI1,L017005?
0951           2533   ;        main.c:574: SFRPAGE = 0x00;
0951 75A700    2534            mov     _SFRPAGE,#0x00
0954           2535   ;        main.c:575: Timer3us(20);
0954 758214    2536            mov     dpl,#0x14
0957 C002      2537            push    ar2
0959 C003      2538            push    ar3
095B 120000    2539            lcall   _Timer3us
095E D003      2540            pop     ar3
0960 D002      2541            pop     ar2
0962           2542   ;        main.c:576: SFRPAGE = 0x20;
0962 75A720    2543            mov     _SFRPAGE,#0x20
0965           2544   ;        main.c:577: timeout++;
0965 0A        2545            inc     r2
0966 BA0068    2546            cjne    r2,#0x00,L017012?
0969 0B        2547            inc     r3
096A           2548   L017012?:
096A           2549   ;        main.c:578: if(timeout==25000)
096A BAA8E8    2550            cjne    r2,#0xA8,L017003?
096D BB61E8    2551            cjne    r3,#0x61,L017003?
0970           2552   ;        main.c:580: SFRPAGE = 0x00;
0970 75A700    2553            mov     _SFRPAGE,#0x00
0973           2554   ;        main.c:581: return ('\n'); // Timeout after half second
0973 75820A    2555            mov     dpl,#0x0A
0976 22        2556            ret
0977           2557   L017005?:
0977           2558   ;        main.c:584: RI1=0;
0977 C2C8      2559            clr     _RI1
0979           2560   ;        main.c:586: SCON1&=0b_0011_1111;
0979 53C83F    2561            anl     _SCON1,#0x3F
097C           2562   ;        main.c:587: c = SBUF1;
097C 859282    2563            mov     dpl,_SBUF1
097F           2564   ;        main.c:588: SFRPAGE = 0x00;
097F 75A700    2565            mov     _SFRPAGE,#0x00
0982           2566   ;        main.c:589: return (c);
0982 22        2567            ret
0983           2568   ;------------------------------------------------------------
0983           2569   ;Allocation info for local variables in function 'getstr1'
0983           2570   ;------------------------------------------------------------
0983           2571   ;n                         Allocated with name '_getstr1_PARM_2'
0983           2572   ;s                         Allocated to registers r2 r3 r4 
0983           2573   ;c                         Allocated with name '_getstr1_c_1_139'
0983           2574   ;cnt                       Allocated with name '_getstr1_cnt_1_139'
0983           2575   ;------------------------------------------------------------
0983           2576   ;        main.c:592: void getstr1 (char * s, unsigned char n)
0983           2577   ;        -----------------------------------------
0983           2578   ;         function getstr1
0983           2579   ;        -----------------------------------------
0983           2580   _getstr1:
0983 AA82      2581            mov     r2,dpl
0985 AB83      2582            mov     r3,dph
0987 ACF0      2583            mov     r4,b
0989           2584   ;        main.c:598: while(1)
0989 7D00      2585            mov     r5,#0x00
098B 8A06      2586            mov     ar6,r2
098D 8B07      2587            mov     ar7,r3
098F 8C00      2588            mov     ar0,r4
0991           2589   L018007?:
0991           2590   ;        main.c:600: c=getchar1_with_timeout();
0991 C002      2591            push    ar2
0993 C003      2592            push    ar3
0995 C004      2593            push    ar4
0997 C005      2594            push    ar5
0999 C006      2595            push    ar6
099B C007      2596            push    ar7
099D C000      2597            push    ar0
099F 120000    2598            lcall   _getchar1_with_timeout
09A2 A982      2599            mov     r1,dpl
09A4 D000      2600            pop     ar0
09A6 D007      2601            pop     ar7
09A8 D006      2602            pop     ar6
09AA D005      2603            pop     ar5
09AC D004      2604            pop     ar4
09AE D003      2605            pop     ar3
09B0 D002      2606            pop     ar2
09B2           2607   ;        main.c:601: if(c=='\n')
09B2 B90AE8    2608            cjne    r1,#0x0A,L018002?
09B5           2609   ;        main.c:603: *s=0;
09B5 8A82      2610            mov     dpl,r2
09B7 8B83      2611            mov     dph,r3
09B9 8CF0      2612            mov     b,r4
09BB E4        2613            clr     a
09BC           2614   ;        main.c:604: return;
09BC 020000    2615            ljmp    __gptrput
09BF           2616   L018002?:
09BF           2617   ;        main.c:607: if (cnt<n)
09BF C3        2618            clr     c
09C0 ED        2619            mov     a,r5
09C1 95A0      2620            subb    a,_getstr1_PARM_2
09C3 5000      2621            jnc     L018004?
09C5           2622   ;        main.c:609: cnt++;
09C5 0D        2623            inc     r5
09C6           2624   ;        main.c:610: *s=c;
09C6 8E82      2625            mov     dpl,r6
09C8 8F83      2626            mov     dph,r7
09CA 88F0      2627            mov     b,r0
09CC E9        2628            mov     a,r1
09CD 120000    2629            lcall   __gptrput
09D0 A3        2630            inc     dptr
09D1 AE82      2631            mov     r6,dpl
09D3 AF83      2632            mov     r7,dph
09D5           2633   ;        main.c:611: s++;
09D5 8E02      2634            mov     ar2,r6
09D7 8F03      2635            mov     ar3,r7
09D9 8804      2636            mov     ar4,r0
09DB 8000      2637            sjmp    L018007?
09DD           2638   L018004?:
09DD           2639   ;        main.c:615: *s=0;
09DD 8A82      2640            mov     dpl,r2
09DF 8B83      2641            mov     dph,r3
09E1 8CF0      2642            mov     b,r4
09E3 E4        2643            clr     a
09E4           2644   ;        main.c:616: return;
09E4 020000    2645            ljmp    __gptrput
09E7           2646   ;------------------------------------------------------------
09E7           2647   ;Allocation info for local variables in function 'RXU1'
09E7           2648   ;------------------------------------------------------------
09E7           2649   ;------------------------------------------------------------
09E7           2650   ;        main.c:622: bit RXU1 (void)
09E7           2651   ;        -----------------------------------------
09E7           2652   ;         function RXU1
09E7           2653   ;        -----------------------------------------
09E7           2654   _RXU1:
09E7           2655   ;        main.c:625: SFRPAGE = 0x20;
09E7 75A720    2656            mov     _SFRPAGE,#0x20
09EA           2657   ;        main.c:626: mybit=RI1;
09EA A2C8      2658            mov     c,_RI1
09EC           2659   ;        main.c:627: SFRPAGE = 0x00;
09EC 75A700    2660            mov     _SFRPAGE,#0x00
09EF           2661   ;        main.c:628: return mybit;
09EF 22        2662            ret
09F0           2663   ;------------------------------------------------------------
09F0           2664   ;Allocation info for local variables in function 'waitms_or_RI1'
09F0           2665   ;------------------------------------------------------------
09F0           2666   ;ms                        Allocated to registers r2 r3 
09F0           2667   ;j                         Allocated with name '_waitms_or_RI1_j_1_147'
09F0           2668   ;k                         Allocated with name '_waitms_or_RI1_k_1_147'
09F0           2669   ;------------------------------------------------------------
09F0           2670   ;        main.c:631: void waitms_or_RI1 (unsigned int ms)
09F0           2671   ;        -----------------------------------------
09F0           2672   ;         function waitms_or_RI1
09F0           2673   ;        -----------------------------------------
09F0           2674   _waitms_or_RI1:
09F0 AA82      2675            mov     r2,dpl
09F2 AB83      2676            mov     r3,dph
09F4           2677   ;        main.c:635: for(j=0; j<ms; j++)
09F4 7C00      2678            mov     r4,#0x00
09F6 7D00      2679            mov     r5,#0x00
09F8           2680   L020007?:
09F8 C3        2681            clr     c
09F9 EC        2682            mov     a,r4
09FA 9A        2683            subb    a,r2
09FB ED        2684            mov     a,r5
09FC 9B        2685            subb    a,r3
09FD 5000      2686            jnc     L020011?
09FF           2687   ;        main.c:637: for (k=0; k<4; k++)
09FF 7E00      2688            mov     r6,#0x00
0A01           2689   L020003?:
0A01 BE0428    2690            cjne    r6,#0x04,L020019?
0A04           2691   L020019?:
0A04 5000      2692            jnc     L020009?
0A06           2693   ;        main.c:639: if(RXU1()) return;
0A06 C002      2694            push    ar2
0A08 C003      2695            push    ar3
0A0A C004      2696            push    ar4
0A0C C005      2697            push    ar5
0A0E C006      2698            push    ar6
0A10 120000    2699            lcall   _RXU1
0A13 E4        2700            clr     a
0A14 33        2701            rlc     a
0A15 D006      2702            pop     ar6
0A17 D005      2703            pop     ar5
0A19 D004      2704            pop     ar4
0A1B D003      2705            pop     ar3
0A1D D002      2706            pop     ar2
0A1F 6000      2707            jz      L020002?
0A21 22        2708            ret
0A22           2709   L020002?:
0A22           2710   ;        main.c:640: Timer3us(250);
0A22 7582FA    2711            mov     dpl,#0xFA
0A25 C002      2712            push    ar2
0A27 C003      2713            push    ar3
0A29 C004      2714            push    ar4
0A2B C005      2715            push    ar5
0A2D C006      2716            push    ar6
0A2F 120000    2717            lcall   _Timer3us
0A32 D006      2718            pop     ar6
0A34 D005      2719            pop     ar5
0A36 D004      2720            pop     ar4
0A38 D003      2721            pop     ar3
0A3A D002      2722            pop     ar2
0A3C           2723   ;        main.c:637: for (k=0; k<4; k++)
0A3C 0E        2724            inc     r6
0A3D 8000      2725            sjmp    L020003?
0A3F           2726   L020009?:
0A3F           2727   ;        main.c:635: for(j=0; j<ms; j++)
0A3F 0C        2728            inc     r4
0A40 BC0068    2729            cjne    r4,#0x00,L020007?
0A43 0D        2730            inc     r5
0A44 8000      2731            sjmp    L020007?
0A46           2732   L020011?:
0A46 22        2733            ret
0A47           2734   ;------------------------------------------------------------
0A47           2735   ;Allocation info for local variables in function 'SendATCommand'
0A47           2736   ;------------------------------------------------------------
0A47           2737   ;s                         Allocated to registers r2 r3 r4 
0A47           2738   ;------------------------------------------------------------
0A47           2739   ;        main.c:645: void SendATCommand (char * s)
0A47           2740   ;        -----------------------------------------
0A47           2741   ;         function SendATCommand
0A47           2742   ;        -----------------------------------------
0A47           2743   _SendATCommand:
0A47 AA82      2744            mov     r2,dpl
0A49 AB83      2745            mov     r3,dph
0A4B ACF0      2746            mov     r4,b
0A4D           2747   ;        main.c:647: printf("Command: %s", s);
0A4D C002      2748            push    ar2
0A4F C003      2749            push    ar3
0A51 C004      2750            push    ar4
0A53 C002      2751            push    ar2
0A55 C003      2752            push    ar3
0A57 C004      2753            push    ar4
0A59 74E8      2754            mov     a,#__str_2
0A5B C0E0      2755            push    acc
0A5D 74E7      2756            mov     a,#(__str_2 >> 8)
0A5F C0E0      2757            push    acc
0A61 7480      2758            mov     a,#0x80
0A63 C0E0      2759            push    acc
0A65 120000    2760            lcall   _printf
0A68 E581      2761            mov     a,sp
0A6A 24FA      2762            add     a,#0xfa
0A6C F581      2763            mov     sp,a
0A6E           2764   ;        main.c:648: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0A6E C2A0      2765            clr     _P2_0
0A70           2766   ;        main.c:649: waitms(5);
0A70 900005    2767            mov     dptr,#0x0005
0A73 120000    2768            lcall   _waitms
0A76 D004      2769            pop     ar4
0A78 D003      2770            pop     ar3
0A7A D002      2771            pop     ar2
0A7C           2772   ;        main.c:650: sendstr1(s);
0A7C 8A82      2773            mov     dpl,r2
0A7E 8B83      2774            mov     dph,r3
0A80 8CF0      2775            mov     b,r4
0A82 120000    2776            lcall   _sendstr1
0A85           2777   ;        main.c:651: getstr1(buff, sizeof(buff)-1);
0A85 75A013    2778            mov     _getstr1_PARM_2,#0x13
0A88 905610    2779            mov     dptr,#_buff
0A8B 75F040    2780            mov     b,#0x40
0A8E 120000    2781            lcall   _getstr1
0A91           2782   ;        main.c:652: waitms(10);
0A91 90000A    2783            mov     dptr,#0x000A
0A94 120000    2784            lcall   _waitms
0A97           2785   ;        main.c:653: P2_0=1; // 'set' pin to 1 is normal operation mode.
0A97 D2A0      2786            setb    _P2_0
0A99           2787   ;        main.c:654: printf("Response: %s\r\n", buff);
0A99 7410      2788            mov     a,#_buff
0A9B C0E0      2789            push    acc
0A9D 7456      2790            mov     a,#(_buff >> 8)
0A9F C0E0      2791            push    acc
0AA1 7440      2792            mov     a,#0x40
0AA3 C0E0      2793            push    acc
0AA5 7428      2794            mov     a,#__str_3
0AA7 C0E0      2795            push    acc
0AA9 74E8      2796            mov     a,#(__str_3 >> 8)
0AAB C0E0      2797            push    acc
0AAD 7480      2798            mov     a,#0x80
0AAF C0E0      2799            push    acc
0AB1 120000    2800            lcall   _printf
0AB4 E581      2801            mov     a,sp
0AB6 24FA      2802            add     a,#0xfa
0AB8 F581      2803            mov     sp,a
0ABA 22        2804            ret
0ABB           2805   ;------------------------------------------------------------
0ABB           2806   ;Allocation info for local variables in function 'ReceptionOff'
0ABB           2807   ;------------------------------------------------------------
0ABB           2808   ;------------------------------------------------------------
0ABB           2809   ;        main.c:657: void ReceptionOff (void)
0ABB           2810   ;        -----------------------------------------
0ABB           2811   ;         function ReceptionOff
0ABB           2812   ;        -----------------------------------------
0ABB           2813   _ReceptionOff:
0ABB           2814   ;        main.c:659: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0ABB C2A0      2815            clr     _P2_0
0ABD           2816   ;        main.c:660: waitms(10);
0ABD 90000A    2817            mov     dptr,#0x000A
0AC0 120000    2818            lcall   _waitms
0AC3           2819   ;        main.c:661: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0AC3 90E868    2820            mov     dptr,#__str_4
0AC6 75F080    2821            mov     b,#0x80
0AC9 120000    2822            lcall   _sendstr1
0ACC           2823   ;        main.c:662: waitms(10);
0ACC 90000A    2824            mov     dptr,#0x000A
0ACF 120000    2825            lcall   _waitms
0AD2           2826   ;        main.c:664: SCON1&=0b_0011_1111;
0AD2 53C83F    2827            anl     _SCON1,#0x3F
0AD5           2828   ;        main.c:665: P2_0=1; // 'set' pin to 1 is normal operation mode.
0AD5 D2A0      2829            setb    _P2_0
0AD7 22        2830            ret
0AD8           2831   ;------------------------------------------------------------
0AD8           2832   ;Allocation info for local variables in function 'measure_distance'
0AD8           2833   ;------------------------------------------------------------
0AD8           2834   ;answer                    Allocated with name '_measure_distance_answer_1_155'
0AD8           2835   ;------------------------------------------------------------
0AD8           2836   ;        main.c:668: int measure_distance(void)
0AD8           2837   ;        -----------------------------------------
0AD8           2838   ;         function measure_distance
0AD8           2839   ;        -----------------------------------------
0AD8           2840   _measure_distance:
0AD8           2841   ;        main.c:671: TL0 = 0; 
0AD8 758A00    2842            mov     _TL0,#0x00
0ADB           2843   ;        main.c:672: TH0 = 0; 
0ADB 758C00    2844            mov     _TH0,#0x00
0ADE           2845   ;        main.c:673: TF0 = 0; 
0ADE C28D      2846            clr     _TF0
0AE0           2847   ;        main.c:674: overflow_count = 0;
0AE0 9051D0    2848            mov     dptr,#_overflow_count
0AE3           2849   ;        main.c:675: duration = 0;
0AE3 E4        2850            clr     a
0AE4 F0        2851            movx    @dptr,a
0AE5 904BC0    2852            mov     dptr,#_duration
0AE8 F0        2853            movx    @dptr,a
0AE9 A3        2854            inc     dptr
0AEA E4        2855            clr     a
0AEB F0        2856            movx    @dptr,a
0AEC A3        2857            inc     dptr
0AED F0        2858            movx    @dptr,a
0AEE A3        2859            inc     dptr
0AEF F0        2860            movx    @dptr,a
0AF0           2861   ;        main.c:677: TRIG_PIN = 1; 
0AF0 D280      2862            setb    _P0_0
0AF2           2863   ;        main.c:678: for(i_loo =0; i_loo <40; i_loo ++);
0AF2 905190    2864            mov     dptr,#_i_loo
0AF5 7428      2865            mov     a,#0x28
0AF7 F0        2866            movx    @dptr,a
0AF8 E4        2867            clr     a
0AF9 A3        2868            inc     dptr
0AFA F0        2869            movx    @dptr,a
0AFB           2870   L023016?:
0AFB 905190    2871            mov     dptr,#_i_loo
0AFE E0        2872            movx    a,@dptr
0AFF FA        2873            mov     r2,a
0B00 A3        2874            inc     dptr
0B01 E0        2875            movx    a,@dptr
0B02 FB        2876            mov     r3,a
0B03 1A        2877            dec     r2
0B04 BAFFE8    2878            cjne    r2,#0xff,L023029?
0B07 1B        2879            dec     r3
0B08           2880   L023029?:
0B08 905190    2881            mov     dptr,#_i_loo
0B0B EA        2882            mov     a,r2
0B0C F0        2883            movx    @dptr,a
0B0D A3        2884            inc     dptr
0B0E EB        2885            mov     a,r3
0B0F F0        2886            movx    @dptr,a
0B10 905190    2887            mov     dptr,#_i_loo
0B13 E0        2888            movx    a,@dptr
0B14 FA        2889            mov     r2,a
0B15 A3        2890            inc     dptr
0B16 E0        2891            movx    a,@dptr
0B17 FB        2892            mov     r3,a
0B18 4A        2893            orl     a,r2
0B19 7000      2894            jnz     L023016?
0B1B 905190    2895            mov     dptr,#_i_loo
0B1E 7428      2896            mov     a,#0x28
0B20 F0        2897            movx    @dptr,a
0B21 E4        2898            clr     a
0B22 A3        2899            inc     dptr
0B23 F0        2900            movx    @dptr,a
0B24           2901   ;        main.c:679: TRIG_PIN = 0; 
0B24 C280      2902            clr     _P0_0
0B26           2903   ;        main.c:681: while (ECHO_PIN != 0){
0B26           2904   L023003?:
0B26 30B168    2905            jnb     _P3_1,L023006?
0B29           2906   ;        main.c:682: i_loo++;
0B29 905190    2907            mov     dptr,#_i_loo
0B2C E0        2908            movx    a,@dptr
0B2D 2401      2909            add     a,#0x01
0B2F F0        2910            movx    @dptr,a
0B30 A3        2911            inc     dptr
0B31 E0        2912            movx    a,@dptr
0B32 3400      2913            addc    a,#0x00
0B34 F0        2914            movx    @dptr,a
0B35           2915   ;        main.c:683: if (i_loo > 3000){
0B35 905190    2916            mov     dptr,#_i_loo
0B38 E0        2917            movx    a,@dptr
0B39 FA        2918            mov     r2,a
0B3A A3        2919            inc     dptr
0B3B E0        2920            movx    a,@dptr
0B3C FB        2921            mov     r3,a
0B3D C3        2922            clr     c
0B3E 74B8      2923            mov     a,#0xB8
0B40 9A        2924            subb    a,r2
0B41 748B      2925            mov     a,#(0x0B ^ 0x80)
0B43 8BF0      2926            mov     b,r3
0B45 63F080    2927            xrl     b,#0x80
0B48 95F0      2928            subb    a,b
0B4A 5000      2929            jnc     L023003?
0B4C           2930   ;        main.c:684: printf("Time out\r\n");
0B4C 74A8      2931            mov     a,#__str_5
0B4E C0E0      2932            push    acc
0B50 74E9      2933            mov     a,#(__str_5 >> 8)
0B52 C0E0      2934            push    acc
0B54 7480      2935            mov     a,#0x80
0B56 C0E0      2936            push    acc
0B58 120000    2937            lcall   _printf
0B5B 1581      2938            dec     sp
0B5D 1581      2939            dec     sp
0B5F 1581      2940            dec     sp
0B61           2941   ;        main.c:685: return -1;
0B61 90FFFF    2942            mov     dptr,#0xFFFF
0B64 22        2943            ret
0B65           2944   ;        main.c:688: while (ECHO_PIN != 1);
0B65           2945   L023006?:
0B65 30B168    2946            jnb     _P3_1,L023006?
0B68           2947   ;        main.c:689: TR0 = 1; 
0B68 D28C      2948            setb    _TR0
0B6A           2949   ;        main.c:690: while (ECHO_PIN == 1)
0B6A           2950   L023011?:
0B6A 30B128    2951            jnb     _P3_1,L023013?
0B6D           2952   ;        main.c:692: if (TF0 == 1){
0B6D           2953   ;        main.c:693: TF0 = 0; 
0B6D 108D68    2954            jbc     _TF0,L023035?
0B70 8000      2955            sjmp    L023011?
0B72           2956   L023035?:
0B72           2957   ;        main.c:694: overflow_count++;
0B72 9051D0    2958            mov     dptr,#_overflow_count
0B75 E0        2959            movx    a,@dptr
0B76 2401      2960            add     a,#0x01
0B78 F0        2961            movx    @dptr,a
0B79 8000      2962            sjmp    L023011?
0B7B           2963   L023013?:
0B7B           2964   ;        main.c:698: TR0 = 0; 
0B7B C28C      2965            clr     _TR0
0B7D           2966   ;        main.c:699: duration = (overflow_count*65536.0 + TH0*256.0 + TL0) * (12.0/SYSCLK);
0B7D 9051D0    2967            mov     dptr,#_overflow_count
0B80 E0        2968            movx    a,@dptr
0B81 F582      2969            mov     dpl,a
0B83 120000    2970            lcall   ___uchar2fs
0B86 AA82      2971            mov     r2,dpl
0B88 AB83      2972            mov     r3,dph
0B8A ACF0      2973            mov     r4,b
0B8C FD        2974            mov     r5,a
0B8D C002      2975            push    ar2
0B8F C003      2976            push    ar3
0B91 C004      2977            push    ar4
0B93 C005      2978            push    ar5
0B95 900000    2979            mov     dptr,#0x0000
0B98 75F080    2980            mov     b,#0x80
0B9B 7447      2981            mov     a,#0x47
0B9D 120000    2982            lcall   ___fsmul
0BA0 AA82      2983            mov     r2,dpl
0BA2 AB83      2984            mov     r3,dph
0BA4 ACF0      2985            mov     r4,b
0BA6 FD        2986            mov     r5,a
0BA7 E581      2987            mov     a,sp
0BA9 24FC      2988            add     a,#0xfc
0BAB F581      2989            mov     sp,a
0BAD 858C82    2990            mov     dpl,_TH0
0BB0 C002      2991            push    ar2
0BB2 C003      2992            push    ar3
0BB4 C004      2993            push    ar4
0BB6 C005      2994            push    ar5
0BB8 120000    2995            lcall   ___uchar2fs
0BBB AE82      2996            mov     r6,dpl
0BBD AF83      2997            mov     r7,dph
0BBF A8F0      2998            mov     r0,b
0BC1 F9        2999            mov     r1,a
0BC2 C006      3000            push    ar6
0BC4 C007      3001            push    ar7
0BC6 C000      3002            push    ar0
0BC8 C001      3003            push    ar1
0BCA 900000    3004            mov     dptr,#0x0000
0BCD 75F080    3005            mov     b,#0x80
0BD0 7443      3006            mov     a,#0x43
0BD2 120000    3007            lcall   ___fsmul
0BD5 AE82      3008            mov     r6,dpl
0BD7 AF83      3009            mov     r7,dph
0BD9 A8F0      3010            mov     r0,b
0BDB F9        3011            mov     r1,a
0BDC E581      3012            mov     a,sp
0BDE 24FC      3013            add     a,#0xfc
0BE0 F581      3014            mov     sp,a
0BE2 D005      3015            pop     ar5
0BE4 D004      3016            pop     ar4
0BE6 D003      3017            pop     ar3
0BE8 D002      3018            pop     ar2
0BEA C006      3019            push    ar6
0BEC C007      3020            push    ar7
0BEE C000      3021            push    ar0
0BF0 C001      3022            push    ar1
0BF2 8A82      3023            mov     dpl,r2
0BF4 8B83      3024            mov     dph,r3
0BF6 8CF0      3025            mov     b,r4
0BF8 ED        3026            mov     a,r5
0BF9 120000    3027            lcall   ___fsadd
0BFC AA82      3028            mov     r2,dpl
0BFE AB83      3029            mov     r3,dph
0C00 ACF0      3030            mov     r4,b
0C02 FD        3031            mov     r5,a
0C03 E581      3032            mov     a,sp
0C05 24FC      3033            add     a,#0xfc
0C07 F581      3034            mov     sp,a
0C09 AE8A      3035            mov     r6,_TL0
0C0B 7F00      3036            mov     r7,#0x00
0C0D 8E82      3037            mov     dpl,r6
0C0F 8F83      3038            mov     dph,r7
0C11 C002      3039            push    ar2
0C13 C003      3040            push    ar3
0C15 C004      3041            push    ar4
0C17 C005      3042            push    ar5
0C19 120000    3043            lcall   ___sint2fs
0C1C AE82      3044            mov     r6,dpl
0C1E AF83      3045            mov     r7,dph
0C20 A8F0      3046            mov     r0,b
0C22 F9        3047            mov     r1,a
0C23 D005      3048            pop     ar5
0C25 D004      3049            pop     ar4
0C27 D003      3050            pop     ar3
0C29 D002      3051            pop     ar2
0C2B C006      3052            push    ar6
0C2D C007      3053            push    ar7
0C2F C000      3054            push    ar0
0C31 C001      3055            push    ar1
0C33 8A82      3056            mov     dpl,r2
0C35 8B83      3057            mov     dph,r3
0C37 8CF0      3058            mov     b,r4
0C39 ED        3059            mov     a,r5
0C3A 120000    3060            lcall   ___fsadd
0C3D AA82      3061            mov     r2,dpl
0C3F AB83      3062            mov     r3,dph
0C41 ACF0      3063            mov     r4,b
0C43 FD        3064            mov     r5,a
0C44 E581      3065            mov     a,sp
0C46 24FC      3066            add     a,#0xfc
0C48 F581      3067            mov     sp,a
0C4A C002      3068            push    ar2
0C4C C003      3069            push    ar3
0C4E C004      3070            push    ar4
0C50 C005      3071            push    ar5
0C52 90F4FC    3072            mov     dptr,#0xF4FC
0C55 75F032    3073            mov     b,#0x32
0C58 7434      3074            mov     a,#0x34
0C5A 120000    3075            lcall   ___fsmul
0C5D AA82      3076            mov     r2,dpl
0C5F AB83      3077            mov     r3,dph
0C61 ACF0      3078            mov     r4,b
0C63 FD        3079            mov     r5,a
0C64 E581      3080            mov     a,sp
0C66 24FC      3081            add     a,#0xfc
0C68 F581      3082            mov     sp,a
0C6A 904BC0    3083            mov     dptr,#_duration
0C6D EA        3084            mov     a,r2
0C6E F0        3085            movx    @dptr,a
0C6F A3        3086            inc     dptr
0C70 EB        3087            mov     a,r3
0C71 F0        3088            movx    @dptr,a
0C72 A3        3089            inc     dptr
0C73 EC        3090            mov     a,r4
0C74 F0        3091            movx    @dptr,a
0C75 A3        3092            inc     dptr
0C76 ED        3093            mov     a,r5
0C77 F0        3094            movx    @dptr,a
0C78           3095   ;        main.c:701: answer = 100 * (340.0 * duration * 100.0 / 2.0); // distance in cm
0C78 C002      3096            push    ar2
0C7A C003      3097            push    ar3
0C7C C004      3098            push    ar4
0C7E C005      3099            push    ar5
0C80 90D000    3100            mov     dptr,#0xD000
0C83 75F004    3101            mov     b,#0x04
0C86 7447      3102            mov     a,#0x47
0C88 120000    3103            lcall   ___fsmul
0C8B AA82      3104            mov     r2,dpl
0C8D AB83      3105            mov     r3,dph
0C8F ACF0      3106            mov     r4,b
0C91 FD        3107            mov     r5,a
0C92 E581      3108            mov     a,sp
0C94 24FC      3109            add     a,#0xfc
0C96 F581      3110            mov     sp,a
0C98 E4        3111            clr     a
0C99 C0E0      3112            push    acc
0C9B C0E0      3113            push    acc
0C9D C0E0      3114            push    acc
0C9F 7440      3115            mov     a,#0x40
0CA1 C0E0      3116            push    acc
0CA3 8A82      3117            mov     dpl,r2
0CA5 8B83      3118            mov     dph,r3
0CA7 8CF0      3119            mov     b,r4
0CA9 ED        3120            mov     a,r5
0CAA 120000    3121            lcall   ___fsdiv
0CAD AA82      3122            mov     r2,dpl
0CAF AB83      3123            mov     r3,dph
0CB1 ACF0      3124            mov     r4,b
0CB3 FD        3125            mov     r5,a
0CB4 E581      3126            mov     a,sp
0CB6 24FC      3127            add     a,#0xfc
0CB8 F581      3128            mov     sp,a
0CBA C002      3129            push    ar2
0CBC C003      3130            push    ar3
0CBE C004      3131            push    ar4
0CC0 C005      3132            push    ar5
0CC2 900000    3133            mov     dptr,#0x0000
0CC5 75F0C8    3134            mov     b,#0xC8
0CC8 7442      3135            mov     a,#0x42
0CCA 120000    3136            lcall   ___fsmul
0CCD AA82      3137            mov     r2,dpl
0CCF AB83      3138            mov     r3,dph
0CD1 ACF0      3139            mov     r4,b
0CD3 FD        3140            mov     r5,a
0CD4 E581      3141            mov     a,sp
0CD6 24FC      3142            add     a,#0xfc
0CD8 F581      3143            mov     sp,a
0CDA 8A82      3144            mov     dpl,r2
0CDC 8B83      3145            mov     dph,r3
0CDE 8CF0      3146            mov     b,r4
0CE0 ED        3147            mov     a,r5
0CE1           3148   ;        main.c:703: return answer; 
0CE1 020000    3149            ljmp    ___fs2sint
0CE4           3150   ;------------------------------------------------------------
0CE4           3151   ;Allocation info for local variables in function 'Set_Pin_Output'
0CE4           3152   ;------------------------------------------------------------
0CE4           3153   ;pin                       Allocated to registers r2 
0CE4           3154   ;mask                      Allocated to registers r3 
0CE4           3155   ;------------------------------------------------------------
0CE4           3156   ;        main.c:706: void Set_Pin_Output (unsigned char pin)
0CE4           3157   ;        -----------------------------------------
0CE4           3158   ;         function Set_Pin_Output
0CE4           3159   ;        -----------------------------------------
0CE4           3160   _Set_Pin_Output:
0CE4 AA82      3161            mov     r2,dpl
0CE6           3162   ;        main.c:710: mask=(1<<(pin&0x7));
0CE6 7407      3163            mov     a,#0x07
0CE8 5A        3164            anl     a,r2
0CE9 F5F0      3165            mov     b,a
0CEB 05F0      3166            inc     b
0CED 7401      3167            mov     a,#0x01
0CEF 8000      3168            sjmp    L024011?
0CF1           3169   L024009?:
0CF1 25E0      3170            add     a,acc
0CF3           3171   L024011?:
0CF3 D5F068    3172            djnz    b,L024009?
0CF6 FB        3173            mov     r3,a
0CF7           3174   ;        main.c:711: switch(pin/0x10)
0CF7 EA        3175            mov     a,r2
0CF8 C4        3176            swap    a
0CF9 540F      3177            anl     a,#0x0f
0CFB FA        3178            mov  r2,a
0CFC 24FC      3179            add     a,#0xff - 0x03
0CFE 4000      3180            jc      L024006?
0D00 EA        3181            mov     a,r2
0D01 2A        3182            add     a,r2
0D02 2A        3183            add     a,r2
0D03 90ECE8    3184            mov     dptr,#L024013?
0D06 73        3185            jmp     @a+dptr
0D07           3186   L024013?:
0D07 020000    3187            ljmp    L024001?
0D0A 020000    3188            ljmp    L024002?
0D0D 020000    3189            ljmp    L024003?
0D10 020000    3190            ljmp    L024004?
0D13           3191   ;        main.c:713: case 0: P0MDOUT |= mask; break;
0D13           3192   L024001?:
0D13 EB        3193            mov     a,r3
0D14 42A4      3194            orl     _P0MDOUT,a
0D16           3195   ;        main.c:714: case 1: P1MDOUT |= mask; break;
0D16 22        3196            ret
0D17           3197   L024002?:
0D17 EB        3198            mov     a,r3
0D18 42A5      3199            orl     _P1MDOUT,a
0D1A           3200   ;        main.c:715: case 2: P2MDOUT |= mask; break; 
0D1A 22        3201            ret
0D1B           3202   L024003?:
0D1B EB        3203            mov     a,r3
0D1C 42A6      3204            orl     _P2MDOUT,a
0D1E           3205   ;        main.c:716: case 3: P3MDOUT |= mask; break; 
0D1E 22        3206            ret
0D1F           3207   L024004?:
0D1F EB        3208            mov     a,r3
0D20 429C      3209            orl     _P3MDOUT,a
0D22           3210   ;        main.c:717: }   
0D22           3211   L024006?:
0D22 22        3212            ret
0D23           3213   ;------------------------------------------------------------
0D23           3214   ;Allocation info for local variables in function 'Set_Pin_Input'
0D23           3215   ;------------------------------------------------------------
0D23           3216   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_164'
0D23           3217   ;pin                       Allocated to registers r2 
0D23           3218   ;------------------------------------------------------------
0D23           3219   ;        main.c:720: void Set_Pin_Input (unsigned char pin)
0D23           3220   ;        -----------------------------------------
0D23           3221   ;         function Set_Pin_Input
0D23           3222   ;        -----------------------------------------
0D23           3223   _Set_Pin_Input:
0D23 AA82      3224            mov     r2,dpl
0D25           3225   ;        main.c:724: mask=(1<<(pin&0x7));
0D25 7407      3226            mov     a,#0x07
0D27 5A        3227            anl     a,r2
0D28 F5F0      3228            mov     b,a
0D2A 05F0      3229            inc     b
0D2C 7401      3230            mov     a,#0x01
0D2E 8000      3231            sjmp    L025011?
0D30           3232   L025009?:
0D30 25E0      3233            add     a,acc
0D32           3234   L025011?:
0D32 D5F068    3235            djnz    b,L025009?
0D35           3236   ;        main.c:725: mask=~mask;
0D35 F4        3237            cpl     a
0D36 FB        3238            mov     r3,a
0D37           3239   ;        main.c:726: switch(pin/0x10)
0D37 EA        3240            mov     a,r2
0D38 C4        3241            swap    a
0D39 540F      3242            anl     a,#0x0f
0D3B FA        3243            mov  r2,a
0D3C 24FC      3244            add     a,#0xff - 0x03
0D3E 4000      3245            jc      L025006?
0D40 EA        3246            mov     a,r2
0D41 2A        3247            add     a,r2
0D42 2A        3248            add     a,r2
0D43 90EEE8    3249            mov     dptr,#L025013?
0D46 73        3250            jmp     @a+dptr
0D47           3251   L025013?:
0D47 020000    3252            ljmp    L025001?
0D4A 020000    3253            ljmp    L025002?
0D4D 020000    3254            ljmp    L025003?
0D50 020000    3255            ljmp    L025004?
0D53           3256   ;        main.c:728: case 0: P0MDOUT &= mask; break;
0D53           3257   L025001?:
0D53 EB        3258            mov     a,r3
0D54 52A4      3259            anl     _P0MDOUT,a
0D56           3260   ;        main.c:729: case 1: P1MDOUT &= mask; break;
0D56 22        3261            ret
0D57           3262   L025002?:
0D57 EB        3263            mov     a,r3
0D58 52A5      3264            anl     _P1MDOUT,a
0D5A           3265   ;        main.c:730: case 2: P2MDOUT &= mask; break; 
0D5A 22        3266            ret
0D5B           3267   L025003?:
0D5B EB        3268            mov     a,r3
0D5C 52A6      3269            anl     _P2MDOUT,a
0D5E           3270   ;        main.c:731: case 3: P3MDOUT &= mask; break; 
0D5E 22        3271            ret
0D5F           3272   L025004?:
0D5F EB        3273            mov     a,r3
0D60 529C      3274            anl     _P3MDOUT,a
0D62           3275   ;        main.c:732: }   
0D62           3276   L025006?:
0D62 22        3277            ret
0D63           3278   ;------------------------------------------------------------
0D63           3279   ;Allocation info for local variables in function 'InitADC'
0D63           3280   ;------------------------------------------------------------
0D63           3281   ;------------------------------------------------------------
0D63           3282   ;        main.c:735: void InitADC (void)
0D63           3283   ;        -----------------------------------------
0D63           3284   ;         function InitADC
0D63           3285   ;        -----------------------------------------
0D63           3286   _InitADC:
0D63           3287   ;        main.c:737: SFRPAGE = 0x00;
0D63 75A700    3288            mov     _SFRPAGE,#0x00
0D66           3289   ;        main.c:738: ADEN=0; // Disable ADC
0D66 C2EF      3290            clr     _ADEN
0D68           3291   ;        main.c:743: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0D68 75B280    3292            mov     _ADC0CN1,#0x80
0D6B           3293   ;        main.c:747: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0D6B 75BC20    3294            mov     _ADC0CF0,#0x20
0D6E           3295   ;        main.c:751: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
0D6E 75B91E    3296            mov     _ADC0CF1,#0x1E
0D71           3297   ;        main.c:760: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0D71 75E800    3298            mov     _ADC0CN0,#0x00
0D74           3299   ;        main.c:765: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0D74 75DF3F    3300            mov     _ADC0CF2,#0x3F
0D77           3301   ;        main.c:769: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0D77 75B300    3302            mov     _ADC0CN2,#0x00
0D7A           3303   ;        main.c:771: ADEN=1; // Enable ADC
0D7A D2EF      3304            setb    _ADEN
0D7C 22        3305            ret
0D7D           3306   ;------------------------------------------------------------
0D7D           3307   ;Allocation info for local variables in function 'InitPinADC'
0D7D           3308   ;------------------------------------------------------------
0D7D           3309   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
0D7D           3310   ;portno                    Allocated to registers r2 
0D7D           3311   ;mask                      Allocated to registers r3 
0D7D           3312   ;------------------------------------------------------------
0D7D           3313   ;        main.c:774: void InitPinADC (unsigned char portno, unsigned char pin_num)
0D7D           3314   ;        -----------------------------------------
0D7D           3315   ;         function InitPinADC
0D7D           3316   ;        -----------------------------------------
0D7D           3317   _InitPinADC:
0D7D AA82      3318            mov     r2,dpl
0D7F           3319   ;        main.c:778: mask=1<<pin_num;
0D7F 85E0F0    3320            mov     b,_InitPinADC_PARM_2
0D82 05F0      3321            inc     b
0D84 7401      3322            mov     a,#0x01
0D86 8000      3323            sjmp    L027013?
0D88           3324   L027011?:
0D88 25E0      3325            add     a,acc
0D8A           3326   L027013?:
0D8A D5F0C8    3327            djnz    b,L027011?
0D8D FB        3328            mov     r3,a
0D8E           3329   ;        main.c:780: SFRPAGE = 0x20;
0D8E 75A720    3330            mov     _SFRPAGE,#0x20
0D91           3331   ;        main.c:781: switch (portno)
0D91 BA0008    3332            cjne    r2,#0x00,L027014?
0D94 8000      3333            sjmp    L027001?
0D96           3334   L027014?:
0D96 BA0188    3335            cjne    r2,#0x01,L027015?
0D99 8000      3336            sjmp    L027002?
0D9B           3337   L027015?:
0D9B           3338   ;        main.c:783: case 0:
0D9B BA0208    3339            cjne    r2,#0x02,L027005?
0D9E 8000      3340            sjmp    L027003?
0DA0           3341   L027001?:
0DA0           3342   ;        main.c:784: P0MDIN &= (~mask); // Set pin as analog input
0DA0 EB        3343            mov     a,r3
0DA1 F4        3344            cpl     a
0DA2 FA        3345            mov     r2,a
0DA3 52F1      3346            anl     _P0MDIN,a
0DA5           3347   ;        main.c:785: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0DA5 EB        3348            mov     a,r3
0DA6 42D4      3349            orl     _P0SKIP,a
0DA8           3350   ;        main.c:786: break;
0DA8           3351   ;        main.c:787: case 1:
0DA8 8000      3352            sjmp    L027005?
0DAA           3353   L027002?:
0DAA           3354   ;        main.c:788: P1MDIN &= (~mask); // Set pin as analog input
0DAA EB        3355            mov     a,r3
0DAB F4        3356            cpl     a
0DAC FA        3357            mov     r2,a
0DAD 52F2      3358            anl     _P1MDIN,a
0DAF           3359   ;        main.c:789: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0DAF EB        3360            mov     a,r3
0DB0 42D5      3361            orl     _P1SKIP,a
0DB2           3362   ;        main.c:790: break;
0DB2           3363   ;        main.c:791: case 2:
0DB2 8000      3364            sjmp    L027005?
0DB4           3365   L027003?:
0DB4           3366   ;        main.c:792: P2MDIN &= (~mask); // Set pin as analog input
0DB4 EB        3367            mov     a,r3
0DB5 F4        3368            cpl     a
0DB6 FA        3369            mov     r2,a
0DB7 52F3      3370            anl     _P2MDIN,a
0DB9           3371   ;        main.c:793: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0DB9 EB        3372            mov     a,r3
0DBA 42CC      3373            orl     _P2SKIP,a
0DBC           3374   ;        main.c:797: }
0DBC           3375   L027005?:
0DBC           3376   ;        main.c:798: SFRPAGE = 0x00;
0DBC 75A700    3377            mov     _SFRPAGE,#0x00
0DBF 22        3378            ret
0DC0           3379   ;------------------------------------------------------------
0DC0           3380   ;Allocation info for local variables in function 'ADC_at_Pin'
0DC0           3381   ;------------------------------------------------------------
0DC0           3382   ;pin                       Allocated to registers 
0DC0           3383   ;------------------------------------------------------------
0DC0           3384   ;        main.c:801: unsigned int ADC_at_Pin(unsigned char pin)
0DC0           3385   ;        -----------------------------------------
0DC0           3386   ;         function ADC_at_Pin
0DC0           3387   ;        -----------------------------------------
0DC0           3388   _ADC_at_Pin:
0DC0 8582BB    3389            mov     _ADC0MX,dpl
0DC3           3390   ;        main.c:804: ADINT = 0;
0DC3 C2ED      3391            clr     _ADINT
0DC5           3392   ;        main.c:805: ADBUSY = 1;     // Convert voltage at the pin
0DC5 D2EC      3393            setb    _ADBUSY
0DC7           3394   ;        main.c:806: while (!ADINT); // Wait for conversion to complete
0DC7           3395   L028001?:
0DC7 30ED88    3396            jnb     _ADINT,L028001?
0DCA           3397   ;        main.c:807: return (ADC0);
0DCA 85BD82    3398            mov     dpl,_ADC0
0DCD 85BE83    3399            mov     dph,(_ADC0 >> 8)
0DD0 22        3400            ret
0DD1           3401   ;------------------------------------------------------------
0DD1           3402   ;Allocation info for local variables in function 'ReadHX711'
0DD1           3403   ;------------------------------------------------------------
0DD1           3404   ;dataa                     Allocated with name '_ReadHX711_dataa_1_174'
0DD1           3405   ;i                         Allocated with name '_ReadHX711_i_1_174'
0DD1           3406   ;ans                       Allocated with name '_ReadHX711_ans_1_174'
0DD1           3407   ;j                         Allocated with name '_ReadHX711_j_1_174'
0DD1           3408   ;------------------------------------------------------------
0DD1           3409   ;        main.c:810: int ReadHX711(void) {
0DD1           3410   ;        -----------------------------------------
0DD1           3411   ;         function ReadHX711
0DD1           3412   ;        -----------------------------------------
0DD1           3413   _ReadHX711:
0DD1           3414   ;        main.c:811: xdata unsigned long dataa = 0;
0DD1 90CF08    3415            mov     dptr,#_ReadHX711_dataa_1_174
0DD4 E4        3416            clr     a
0DD5 F0        3417            movx    @dptr,a
0DD6 A3        3418            inc     dptr
0DD7 F0        3419            movx    @dptr,a
0DD8 A3        3420            inc     dptr
0DD9 F0        3421            movx    @dptr,a
0DDA A3        3422            inc     dptr
0DDB F0        3423            movx    @dptr,a
0DDC           3424   ;        main.c:816: PD_SCK = 0;
0DDC C2A5      3425            clr     _P2_5
0DDE           3426   ;        main.c:818: for (i = 0; i < 24; i++) {
0DDE 7A00      3427            mov     r2,#0x00
0DE0           3428   L029011?:
0DE0 C3        3429            clr     c
0DE1 EA        3430            mov     a,r2
0DE2 6480      3431            xrl     a,#0x80
0DE4 9498      3432            subb    a,#0x98
0DE6 4000      3433            jc      L029037?
0DE8 020000    3434            ljmp    L029014?
0DEB           3435   L029037?:
0DEB           3436   ;        main.c:819: PD_SCK = 1;
0DEB D2A5      3437            setb    _P2_5
0DED           3438   ;        main.c:820: for (j = 0; j < 4; j++);
0DED 90CF58    3439            mov     dptr,#_ReadHX711_j_1_174
0DF0 E4        3440            clr     a
0DF1 F0        3441            movx    @dptr,a
0DF2           3442   L029003?:
0DF2 90CF58    3443            mov     dptr,#_ReadHX711_j_1_174
0DF5 E0        3444            movx    a,@dptr
0DF6 FB        3445            mov     r3,a
0DF7 C3        3446            clr     c
0DF8 6480      3447            xrl     a,#0x80
0DFA 9484      3448            subb    a,#0x84
0DFC 5000      3449            jnc     L029006?
0DFE 90CF58    3450            mov     dptr,#_ReadHX711_j_1_174
0E01 E0        3451            movx    a,@dptr
0E02 2401      3452            add     a,#0x01
0E04 F0        3453            movx    @dptr,a
0E05 8000      3454            sjmp    L029003?
0E07           3455   L029006?:
0E07           3456   ;        main.c:821: dataa = dataa << 1;
0E07 90CF08    3457            mov     dptr,#_ReadHX711_dataa_1_174
0E0A E0        3458            movx    a,@dptr
0E0B FB        3459            mov     r3,a
0E0C A3        3460            inc     dptr
0E0D E0        3461            movx    a,@dptr
0E0E FC        3462            mov     r4,a
0E0F A3        3463            inc     dptr
0E10 E0        3464            movx    a,@dptr
0E11 FD        3465            mov     r5,a
0E12 A3        3466            inc     dptr
0E13 E0        3467            movx    a,@dptr
0E14 FE        3468            mov     r6,a
0E15 EB        3469            mov     a,r3
0E16 2B        3470            add     a,r3
0E17 FB        3471            mov     r3,a
0E18 EC        3472            mov     a,r4
0E19 33        3473            rlc     a
0E1A FC        3474            mov     r4,a
0E1B ED        3475            mov     a,r5
0E1C 33        3476            rlc     a
0E1D FD        3477            mov     r5,a
0E1E EE        3478            mov     a,r6
0E1F 33        3479            rlc     a
0E20 FE        3480            mov     r6,a
0E21 90CF08    3481            mov     dptr,#_ReadHX711_dataa_1_174
0E24 EB        3482            mov     a,r3
0E25 F0        3483            movx    @dptr,a
0E26 A3        3484            inc     dptr
0E27 EC        3485            mov     a,r4
0E28 F0        3486            movx    @dptr,a
0E29 A3        3487            inc     dptr
0E2A ED        3488            mov     a,r5
0E2B F0        3489            movx    @dptr,a
0E2C A3        3490            inc     dptr
0E2D EE        3491            mov     a,r6
0E2E F0        3492            movx    @dptr,a
0E2F           3493   ;        main.c:822: if (DOUT) {
0E2F 30A608    3494            jnb     _P2_6,L029002?
0E32           3495   ;        main.c:823: dataa |= 0x01;
0E32 90CF08    3496            mov     dptr,#_ReadHX711_dataa_1_174
0E35 E0        3497            movx    a,@dptr
0E36 FB        3498            mov     r3,a
0E37 A3        3499            inc     dptr
0E38 E0        3500            movx    a,@dptr
0E39 FC        3501            mov     r4,a
0E3A A3        3502            inc     dptr
0E3B E0        3503            movx    a,@dptr
0E3C FD        3504            mov     r5,a
0E3D A3        3505            inc     dptr
0E3E E0        3506            movx    a,@dptr
0E3F FE        3507            mov     r6,a
0E40 90CF08    3508            mov     dptr,#_ReadHX711_dataa_1_174
0E43 7401      3509            mov     a,#0x01
0E45 4B        3510            orl     a,r3
0E46 F0        3511            movx    @dptr,a
0E47 A3        3512            inc     dptr
0E48 EC        3513            mov     a,r4
0E49 F0        3514            movx    @dptr,a
0E4A A3        3515            inc     dptr
0E4B ED        3516            mov     a,r5
0E4C F0        3517            movx    @dptr,a
0E4D A3        3518            inc     dptr
0E4E EE        3519            mov     a,r6
0E4F F0        3520            movx    @dptr,a
0E50           3521   L029002?:
0E50           3522   ;        main.c:825: PD_SCK = 0;
0E50 C2A5      3523            clr     _P2_5
0E52           3524   ;        main.c:826: for (j = 0; j < 4; j++);
0E52 90CF58    3525            mov     dptr,#_ReadHX711_j_1_174
0E55 E4        3526            clr     a
0E56 F0        3527            movx    @dptr,a
0E57           3528   L029007?:
0E57 90CF58    3529            mov     dptr,#_ReadHX711_j_1_174
0E5A E0        3530            movx    a,@dptr
0E5B FB        3531            mov     r3,a
0E5C C3        3532            clr     c
0E5D 6480      3533            xrl     a,#0x80
0E5F 9484      3534            subb    a,#0x84
0E61 5000      3535            jnc     L029013?
0E63 90CF58    3536            mov     dptr,#_ReadHX711_j_1_174
0E66 E0        3537            movx    a,@dptr
0E67 2401      3538            add     a,#0x01
0E69 F0        3539            movx    @dptr,a
0E6A 8000      3540            sjmp    L029007?
0E6C           3541   L029013?:
0E6C           3542   ;        main.c:818: for (i = 0; i < 24; i++) {
0E6C 0A        3543            inc     r2
0E6D 020000    3544            ljmp    L029011?
0E70           3545   L029014?:
0E70           3546   ;        main.c:829: PD_SCK = 1;
0E70 D2A5      3547            setb    _P2_5
0E72           3548   ;        main.c:830: for (j = 0; j < 4; j++);
0E72 90CF58    3549            mov     dptr,#_ReadHX711_j_1_174
0E75 E4        3550            clr     a
0E76 F0        3551            movx    @dptr,a
0E77           3552   L029015?:
0E77 90CF58    3553            mov     dptr,#_ReadHX711_j_1_174
0E7A E0        3554            movx    a,@dptr
0E7B FA        3555            mov     r2,a
0E7C C3        3556            clr     c
0E7D 6480      3557            xrl     a,#0x80
0E7F 9484      3558            subb    a,#0x84
0E81 5000      3559            jnc     L029018?
0E83 90CF58    3560            mov     dptr,#_ReadHX711_j_1_174
0E86 E0        3561            movx    a,@dptr
0E87 2401      3562            add     a,#0x01
0E89 F0        3563            movx    @dptr,a
0E8A 8000      3564            sjmp    L029015?
0E8C           3565   L029018?:
0E8C           3566   ;        main.c:831: PD_SCK = 0;
0E8C C2A5      3567            clr     _P2_5
0E8E           3568   ;        main.c:832: for (j = 0; j < 4; j++);
0E8E 90CF58    3569            mov     dptr,#_ReadHX711_j_1_174
0E91 E4        3570            clr     a
0E92 F0        3571            movx    @dptr,a
0E93           3572   L029019?:
0E93 90CF58    3573            mov     dptr,#_ReadHX711_j_1_174
0E96 E0        3574            movx    a,@dptr
0E97 FA        3575            mov     r2,a
0E98 C3        3576            clr     c
0E99 6480      3577            xrl     a,#0x80
0E9B 9484      3578            subb    a,#0x84
0E9D 5000      3579            jnc     L029022?
0E9F 90CF58    3580            mov     dptr,#_ReadHX711_j_1_174
0EA2 E0        3581            movx    a,@dptr
0EA3 2401      3582            add     a,#0x01
0EA5 F0        3583            movx    @dptr,a
0EA6 8000      3584            sjmp    L029019?
0EA8           3585   L029022?:
0EA8           3586   ;        main.c:833: ans = (dataa % 1000000)/10;
0EA8 90CF08    3587            mov     dptr,#_ReadHX711_dataa_1_174
0EAB E0        3588            movx    a,@dptr
0EAC FA        3589            mov     r2,a
0EAD A3        3590            inc     dptr
0EAE E0        3591            movx    a,@dptr
0EAF FB        3592            mov     r3,a
0EB0 A3        3593            inc     dptr
0EB1 E0        3594            movx    a,@dptr
0EB2 FC        3595            mov     r4,a
0EB3 A3        3596            inc     dptr
0EB4 E0        3597            movx    a,@dptr
0EB5 FD        3598            mov     r5,a
0EB6 750040    3599            mov     __modulong_PARM_2,#0x40
0EB9 750142    3600            mov     (__modulong_PARM_2 + 1),#0x42
0EBC 75020F    3601            mov     (__modulong_PARM_2 + 2),#0x0F
0EBF 750300    3602            mov     (__modulong_PARM_2 + 3),#0x00
0EC2 8A82      3603            mov     dpl,r2
0EC4 8B83      3604            mov     dph,r3
0EC6 8CF0      3605            mov     b,r4
0EC8 ED        3606            mov     a,r5
0EC9 120000    3607            lcall   __modulong
0ECC AA82      3608            mov     r2,dpl
0ECE AB83      3609            mov     r3,dph
0ED0 ACF0      3610            mov     r4,b
0ED2 FD        3611            mov     r5,a
0ED3 75000A    3612            mov     __divulong_PARM_2,#0x0A
0ED6 E4        3613            clr     a
0ED7 F501      3614            mov     (__divulong_PARM_2 + 1),a
0ED9 F502      3615            mov     (__divulong_PARM_2 + 2),a
0EDB F503      3616            mov     (__divulong_PARM_2 + 3),a
0EDD 8A82      3617            mov     dpl,r2
0EDF 8B83      3618            mov     dph,r3
0EE1 8CF0      3619            mov     b,r4
0EE3 ED        3620            mov     a,r5
0EE4           3621   ;        main.c:834: return ans;
0EE4 020000    3622            ljmp    __divulong
0EE7           3623   ;------------------------------------------------------------
0EE7           3624   ;Allocation info for local variables in function 'Timer5_ISR'
0EE7           3625   ;------------------------------------------------------------
0EE7           3626   ;------------------------------------------------------------
0EE7           3627   ;        main.c:837: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0EE7           3628   ;        -----------------------------------------
0EE7           3629   ;         function Timer5_ISR
0EE7           3630   ;        -----------------------------------------
0EE7           3631   _Timer5_ISR:
0EE7 C0E8      3632            push    bits
0EE9 C0E0      3633            push    acc
0EEB C0F0      3634            push    b
0EED C082      3635            push    dpl
0EEF C083      3636            push    dph
0EF1 C002      3637            push    (0+2)
0EF3 C003      3638            push    (0+3)
0EF5 C004      3639            push    (0+4)
0EF7 C005      3640            push    (0+5)
0EF9 C006      3641            push    (0+6)
0EFB C007      3642            push    (0+7)
0EFD C000      3643            push    (0+0)
0EFF C001      3644            push    (0+1)
0F01 C0D0      3645            push    psw
0F03 75D000    3646            mov     psw,#0x00
0F06           3647   ;        main.c:839: SFRPAGE=0x10;
0F06 75A710    3648            mov     _SFRPAGE,#0x10
0F09           3649   ;        main.c:840: TF5H = 0; // Clear Timer5 interrupt flag
0F09 C2C7      3650            clr     _TF5H
0F0B           3651   ;        main.c:841: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0F0B 75D2C4    3652            mov     _TMR5RL,#0xC4
0F0E 75D3FF    3653            mov     (_TMR5RL >> 8),#0xFF
0F11           3654   ;        main.c:843: fre_mea_count++;
0F11 904E50    3655            mov     dptr,#_fre_mea_count
0F14 E0        3656            movx    a,@dptr
0F15 2401      3657            add     a,#0x01
0F17 F0        3658            movx    @dptr,a
0F18 A3        3659            inc     dptr
0F19 E0        3660            movx    a,@dptr
0F1A 3400      3661            addc    a,#0x00
0F1C F0        3662            movx    @dptr,a
0F1D           3663   ;        main.c:844: if(fre_mea_count == 1000){
0F1D 904E50    3664            mov     dptr,#_fre_mea_count
0F20 E0        3665            movx    a,@dptr
0F21 FA        3666            mov     r2,a
0F22 A3        3667            inc     dptr
0F23 E0        3668            movx    a,@dptr
0F24 FB        3669            mov     r3,a
0F25 BAE898    3670            cjne    r2,#0xE8,L030004?
0F28 BB0398    3671            cjne    r3,#0x03,L030004?
0F2B           3672   ;        main.c:845: fre_mea_count = 0;
0F2B 904E50    3673            mov     dptr,#_fre_mea_count
0F2E E4        3674            clr     a
0F2F F0        3675            movx    @dptr,a
0F30 A3        3676            inc     dptr
0F31 F0        3677            movx    @dptr,a
0F32           3678   ;        main.c:846: if(mea_yes){
0F32 904C40    3679            mov     dptr,#_mea_yes
0F35 E0        3680            movx    a,@dptr
0F36 FA        3681            mov     r2,a
0F37 6000      3682            jz      L030004?
0F39           3683   ;        main.c:847: freq100 = get_freq();
0F39 120000    3684            lcall   _get_freq
0F3C AA82      3685            mov     r2,dpl
0F3E AB83      3686            mov     r3,dph
0F40 9055D0    3687            mov     dptr,#_freq100
0F43 EA        3688            mov     a,r2
0F44 F0        3689            movx    @dptr,a
0F45 A3        3690            inc     dptr
0F46 EB        3691            mov     a,r3
0F47 F0        3692            movx    @dptr,a
0F48 EB        3693            mov     a,r3
0F49 33        3694            rlc     a
0F4A 95E0      3695            subb    a,acc
0F4C A3        3696            inc     dptr
0F4D F0        3697            movx    @dptr,a
0F4E A3        3698            inc     dptr
0F4F F0        3699            movx    @dptr,a
0F50           3700   L030004?:
0F50           3701   ;        main.c:852: weight_mea_count++;
0F50 904E10    3702            mov     dptr,#_weight_mea_count
0F53 E0        3703            movx    a,@dptr
0F54 2401      3704            add     a,#0x01
0F56 F0        3705            movx    @dptr,a
0F57 A3        3706            inc     dptr
0F58 E0        3707            movx    a,@dptr
0F59 3400      3708            addc    a,#0x00
0F5B F0        3709            movx    @dptr,a
0F5C           3710   ;        main.c:853: if(weight_mea_count == 20000){
0F5C 904E10    3711            mov     dptr,#_weight_mea_count
0F5F E0        3712            movx    a,@dptr
0F60 FA        3713            mov     r2,a
0F61 A3        3714            inc     dptr
0F62 E0        3715            movx    a,@dptr
0F63 FB        3716            mov     r3,a
0F64 BA2018    3717            cjne    r2,#0x20,L030008?
0F67 BB4E18    3718            cjne    r3,#0x4E,L030008?
0F6A           3719   ;        main.c:854: weight_mea_count = 0;
0F6A 904E10    3720            mov     dptr,#_weight_mea_count
0F6D E4        3721            clr     a
0F6E F0        3722            movx    @dptr,a
0F6F A3        3723            inc     dptr
0F70 F0        3724            movx    @dptr,a
0F71           3725   ;        main.c:855: distance = measure_distance();
0F71 120000    3726            lcall   _measure_distance
0F74 E582      3727            mov     a,dpl
0F76 8583F0    3728            mov     b,dph
0F79 905210    3729            mov     dptr,#_distance
0F7C F0        3730            movx    @dptr,a
0F7D A3        3731            inc     dptr
0F7E E5F0      3732            mov     a,b
0F80 F0        3733            movx    @dptr,a
0F81           3734   ;        main.c:856: if(mea_yes) weight = ReadHX711();
0F81 904C40    3735            mov     dptr,#_mea_yes
0F84 E0        3736            movx    a,@dptr
0F85 FA        3737            mov     r2,a
0F86 6000      3738            jz      L030008?
0F88 120000    3739            lcall   _ReadHX711
0F8B E582      3740            mov     a,dpl
0F8D 8583F0    3741            mov     b,dph
0F90 904C00    3742            mov     dptr,#_weight
0F93 F0        3743            movx    @dptr,a
0F94 A3        3744            inc     dptr
0F95 E5F0      3745            mov     a,b
0F97 F0        3746            movx    @dptr,a
0F98           3747   L030008?:
0F98           3748   ;        main.c:859: pwm_counter++; 
0F98 905150    3749            mov     dptr,#_pwm_counter
0F9B E0        3750            movx    a,@dptr
0F9C 2401      3751            add     a,#0x01
0F9E F0        3752            movx    @dptr,a
0F9F A3        3753            inc     dptr
0FA0 E0        3754            movx    a,@dptr
0FA1 3400      3755            addc    a,#0x00
0FA3 F0        3756            movx    @dptr,a
0FA4           3757   ;        main.c:860: if (pwm_counter == 100){
0FA4 905150    3758            mov     dptr,#_pwm_counter
0FA7 E0        3759            movx    a,@dptr
0FA8 FA        3760            mov     r2,a
0FA9 A3        3761            inc     dptr
0FAA E0        3762            movx    a,@dptr
0FAB FB        3763            mov     r3,a
0FAC BA6458    3764            cjne    r2,#0x64,L030010?
0FAF BB0058    3765            cjne    r3,#0x00,L030010?
0FB2           3766   ;        main.c:861: pwm_counter = 0; 
0FB2 905150    3767            mov     dptr,#_pwm_counter
0FB5 E4        3768            clr     a
0FB6 F0        3769            movx    @dptr,a
0FB7 A3        3770            inc     dptr
0FB8 F0        3771            movx    @dptr,a
0FB9           3772   L030010?:
0FB9           3773   ;        main.c:864: if (pwm_right > pwm_counter){
0FB9 905090    3774            mov     dptr,#_pwm_right
0FBC E0        3775            movx    a,@dptr
0FBD FA        3776            mov     r2,a
0FBE 905150    3777            mov     dptr,#_pwm_counter
0FC1 E0        3778            movx    a,@dptr
0FC2 FB        3779            mov     r3,a
0FC3 A3        3780            inc     dptr
0FC4 E0        3781            movx    a,@dptr
0FC5 FC        3782            mov     r4,a
0FC6 7D00      3783            mov     r5,#0x00
0FC8 C3        3784            clr     c
0FC9 EB        3785            mov     a,r3
0FCA 9A        3786            subb    a,r2
0FCB EC        3787            mov     a,r4
0FCC 9D        3788            subb    a,r5
0FCD 5000      3789            jnc     L030015?
0FCF           3790   ;        main.c:865: if(L_motor_dir){
0FCF 905050    3791            mov     dptr,#_L_motor_dir
0FD2 E0        3792            movx    a,@dptr
0FD3 FA        3793            mov     r2,a
0FD4 6000      3794            jz      L030012?
0FD6           3795   ;        main.c:866: L_bridge_1 = 1; 
0FD6 D2A1      3796            setb    _P2_1
0FD8           3797   ;        main.c:867: L_bridge_2 = 0; 
0FD8 C2A2      3798            clr     _P2_2
0FDA 8000      3799            sjmp    L030016?
0FDC           3800   L030012?:
0FDC           3801   ;        main.c:870: L_bridge_1 = 0; 
0FDC C2A1      3802            clr     _P2_1
0FDE           3803   ;        main.c:871: L_bridge_2 = 1; 
0FDE D2A2      3804            setb    _P2_2
0FE0 8000      3805            sjmp    L030016?
0FE2           3806   L030015?:
0FE2           3807   ;        main.c:875: L_bridge_1 = 0; 
0FE2 C2A1      3808            clr     _P2_1
0FE4           3809   ;        main.c:876: L_bridge_2 = 0; 
0FE4 C2A2      3810            clr     _P2_2
0FE6           3811   L030016?:
0FE6           3812   ;        main.c:878: if (pwm_left > pwm_counter){
0FE6 9050D0    3813            mov     dptr,#_pwm_left
0FE9 E0        3814            movx    a,@dptr
0FEA FA        3815            mov     r2,a
0FEB 7D00      3816            mov     r5,#0x00
0FED C3        3817            clr     c
0FEE EB        3818            mov     a,r3
0FEF 9A        3819            subb    a,r2
0FF0 EC        3820            mov     a,r4
0FF1 9D        3821            subb    a,r5
0FF2 5000      3822            jnc     L030021?
0FF4           3823   ;        main.c:879: if (R_motor_dir){
0FF4 905010    3824            mov     dptr,#_R_motor_dir
0FF7 E0        3825            movx    a,@dptr
0FF8 FA        3826            mov     r2,a
0FF9 6000      3827            jz      L030018?
0FFB           3828   ;        main.c:880: R_bridge_1 = 1; 
0FFB D2A4      3829            setb    _P2_4
0FFD           3830   ;        main.c:881: R_bridge_2 = 0;
0FFD C2A3      3831            clr     _P2_3
0FFF 8000      3832            sjmp    L030022?
1001           3833   L030018?:
1001           3834   ;        main.c:884: R_bridge_1 = 0; 
1001 C2A4      3835            clr     _P2_4
1003           3836   ;        main.c:885: R_bridge_2 = 1;
1003 D2A3      3837            setb    _P2_3
1005 8000      3838            sjmp    L030022?
1007           3839   L030021?:
1007           3840   ;        main.c:889: R_bridge_1 = 0; 
1007 C2A4      3841            clr     _P2_4
1009           3842   ;        main.c:890: R_bridge_2 = 0; 
1009 C2A3      3843            clr     _P2_3
100B           3844   L030022?:
100B           3845   ;        main.c:893: servo_counter++;
100B 905110    3846            mov     dptr,#_servo_counter
100E E0        3847            movx    a,@dptr
100F 2401      3848            add     a,#0x01
1011 F0        3849            movx    @dptr,a
1012 A3        3850            inc     dptr
1013 E0        3851            movx    a,@dptr
1014 3400      3852            addc    a,#0x00
1016 F0        3853            movx    @dptr,a
1017           3854   ;        main.c:894: if(servo_counter==2000)
1017 905110    3855            mov     dptr,#_servo_counter
101A E0        3856            movx    a,@dptr
101B FA        3857            mov     r2,a
101C A3        3858            inc     dptr
101D E0        3859            movx    a,@dptr
101E FB        3860            mov     r3,a
101F BAD018    3861            cjne    r2,#0xD0,L030024?
1022 BB0718    3862            cjne    r3,#0x07,L030024?
1025           3863   ;        main.c:896: servo_counter=0;
1025 905110    3864            mov     dptr,#_servo_counter
1028 E4        3865            clr     a
1029 F0        3866            movx    @dptr,a
102A A3        3867            inc     dptr
102B F0        3868            movx    @dptr,a
102C           3869   ;        main.c:897: Servo_arm=1;
102C D296      3870            setb    _P1_6
102E           3871   ;        main.c:898: Servo_base=1;
102E D297      3872            setb    _P1_7
1030           3873   L030024?:
1030           3874   ;        main.c:900: if(servo_arm>=servo_counter)
1030 904F90    3875            mov     dptr,#_servo_arm
1033 E0        3876            movx    a,@dptr
1034 FA        3877            mov     r2,a
1035 905110    3878            mov     dptr,#_servo_counter
1038 E0        3879            movx    a,@dptr
1039 FB        3880            mov     r3,a
103A A3        3881            inc     dptr
103B E0        3882            movx    a,@dptr
103C FC        3883            mov     r4,a
103D 7D00      3884            mov     r5,#0x00
103F C3        3885            clr     c
1040 EA        3886            mov     a,r2
1041 9B        3887            subb    a,r3
1042 ED        3888            mov     a,r5
1043 9C        3889            subb    a,r4
1044 4000      3890            jc      L030026?
1046           3891   ;        main.c:902: Servo_arm = 1;
1046 D296      3892            setb    _P1_6
1048 8000      3893            sjmp    L030027?
104A           3894   L030026?:
104A           3895   ;        main.c:906: Servo_arm = 0; 
104A C296      3896            clr     _P1_6
104C           3897   L030027?:
104C           3898   ;        main.c:908: if(servo_base>=servo_counter)
104C 904FD0    3899            mov     dptr,#_servo_base
104F E0        3900            movx    a,@dptr
1050 FA        3901            mov     r2,a
1051 7D00      3902            mov     r5,#0x00
1053 C3        3903            clr     c
1054 EA        3904            mov     a,r2
1055 9B        3905            subb    a,r3
1056 ED        3906            mov     a,r5
1057 9C        3907            subb    a,r4
1058 4000      3908            jc      L030029?
105A           3909   ;        main.c:910: Servo_base = 1;
105A D297      3910            setb    _P1_7
105C 8000      3911            sjmp    L030031?
105E           3912   L030029?:
105E           3913   ;        main.c:914: Servo_base = 0; 
105E C297      3914            clr     _P1_7
1060           3915   L030031?:
1060 D0D0      3916            pop     psw
1062 D001      3917            pop     (0+1)
1064 D000      3918            pop     (0+0)
1066 D007      3919            pop     (0+7)
1068 D006      3920            pop     (0+6)
106A D005      3921            pop     (0+5)
106C D004      3922            pop     (0+4)
106E D003      3923            pop     (0+3)
1070 D002      3924            pop     (0+2)
1072 D083      3925            pop     dph
1074 D082      3926            pop     dpl
1076 D0F0      3927            pop     b
1078 D0E0      3928            pop     acc
107A D0E8      3929            pop     bits
107C 32        3930            reti
107D           3931   ;------------------------------------------------------------
107D           3932   ;Allocation info for local variables in function 'servo_pick'
107D           3933   ;------------------------------------------------------------
107D           3934   ;------------------------------------------------------------
107D           3935   ;        main.c:918: void servo_pick(){
107D           3936   ;        -----------------------------------------
107D           3937   ;         function servo_pick
107D           3938   ;        -----------------------------------------
107D           3939   _servo_pick:
107D           3940   ;        main.c:919: servo_arm = 50;
107D 904F90    3941            mov     dptr,#_servo_arm
1080 7432      3942            mov     a,#0x32
1082 F0        3943            movx    @dptr,a
1083           3944   ;        main.c:920: servo_base = 50;
1083 904FD0    3945            mov     dptr,#_servo_base
1086 7432      3946            mov     a,#0x32
1088 F0        3947            movx    @dptr,a
1089           3948   ;        main.c:921: waitms(500);
1089 9001F4    3949            mov     dptr,#0x01F4
108C 120000    3950            lcall   _waitms
108F           3951   ;        main.c:923: for (i_loo=50; i_loo <= 210; i_loo+=20)
108F 905190    3952            mov     dptr,#_i_loo
1092 7432      3953            mov     a,#0x32
1094 F0        3954            movx    @dptr,a
1095 E4        3955            clr     a
1096 A3        3956            inc     dptr
1097 F0        3957            movx    @dptr,a
1098           3958   L031001?:
1098 905190    3959            mov     dptr,#_i_loo
109B E0        3960            movx    a,@dptr
109C FA        3961            mov     r2,a
109D A3        3962            inc     dptr
109E E0        3963            movx    a,@dptr
109F FB        3964            mov     r3,a
10A0 C3        3965            clr     c
10A1 74D2      3966            mov     a,#0xD2
10A3 9A        3967            subb    a,r2
10A4 E4        3968            clr     a
10A5 6480      3969            xrl     a,#0x80
10A7 8BF0      3970            mov     b,r3
10A9 63F080    3971            xrl     b,#0x80
10AC 95F0      3972            subb    a,b
10AE 4000      3973            jc      L031004?
10B0           3974   ;        main.c:925: servo_base = i_loo; 
10B0 904FD0    3975            mov     dptr,#_servo_base
10B3 EA        3976            mov     a,r2
10B4 F0        3977            movx    @dptr,a
10B5           3978   ;        main.c:926: waitms(25);
10B5 900019    3979            mov     dptr,#0x0019
10B8 120000    3980            lcall   _waitms
10BB           3981   ;        main.c:923: for (i_loo=50; i_loo <= 210; i_loo+=20)
10BB 905190    3982            mov     dptr,#_i_loo
10BE E0        3983            movx    a,@dptr
10BF FA        3984            mov     r2,a
10C0 A3        3985            inc     dptr
10C1 E0        3986            movx    a,@dptr
10C2 FB        3987            mov     r3,a
10C3 905190    3988            mov     dptr,#_i_loo
10C6 7414      3989            mov     a,#0x14
10C8 2A        3990            add     a,r2
10C9 F0        3991            movx    @dptr,a
10CA E4        3992            clr     a
10CB 3B        3993            addc    a,r3
10CC A3        3994            inc     dptr
10CD F0        3995            movx    @dptr,a
10CE 8000      3996            sjmp    L031001?
10D0           3997   L031004?:
10D0           3998   ;        main.c:928: waitms(500);
10D0 9001F4    3999            mov     dptr,#0x01F4
10D3 120000    4000            lcall   _waitms
10D6           4001   ;        main.c:929: for(i_loo = 50; i_loo <= 250; i_loo+=20)
10D6 905190    4002            mov     dptr,#_i_loo
10D9 7432      4003            mov     a,#0x32
10DB F0        4004            movx    @dptr,a
10DC E4        4005            clr     a
10DD A3        4006            inc     dptr
10DE F0        4007            movx    @dptr,a
10DF           4008   L031005?:
10DF 905190    4009            mov     dptr,#_i_loo
10E2 E0        4010            movx    a,@dptr
10E3 FA        4011            mov     r2,a
10E4 A3        4012            inc     dptr
10E5 E0        4013            movx    a,@dptr
10E6 FB        4014            mov     r3,a
10E7 C3        4015            clr     c
10E8 74FA      4016            mov     a,#0xFA
10EA 9A        4017            subb    a,r2
10EB E4        4018            clr     a
10EC 6480      4019            xrl     a,#0x80
10EE 8BF0      4020            mov     b,r3
10F0 63F080    4021            xrl     b,#0x80
10F3 95F0      4022            subb    a,b
10F5 4000      4023            jc      L031008?
10F7           4024   ;        main.c:931: servo_arm = i_loo; 
10F7 904F90    4025            mov     dptr,#_servo_arm
10FA EA        4026            mov     a,r2
10FB F0        4027            movx    @dptr,a
10FC           4028   ;        main.c:932: waitms(25);
10FC 900019    4029            mov     dptr,#0x0019
10FF 120000    4030            lcall   _waitms
1102           4031   ;        main.c:929: for(i_loo = 50; i_loo <= 250; i_loo+=20)
1102 905190    4032            mov     dptr,#_i_loo
1105 E0        4033            movx    a,@dptr
1106 FA        4034            mov     r2,a
1107 A3        4035            inc     dptr
1108 E0        4036            movx    a,@dptr
1109 FB        4037            mov     r3,a
110A 905190    4038            mov     dptr,#_i_loo
110D 7414      4039            mov     a,#0x14
110F 2A        4040            add     a,r2
1110 F0        4041            movx    @dptr,a
1111 E4        4042            clr     a
1112 3B        4043            addc    a,r3
1113 A3        4044            inc     dptr
1114 F0        4045            movx    @dptr,a
1115 8000      4046            sjmp    L031005?
1117           4047   L031008?:
1117           4048   ;        main.c:935: Magnet = 1; 
1117 D295      4049            setb    _P1_5
1119           4050   ;        main.c:936: waitms(500);
1119 9001F4    4051            mov     dptr,#0x01F4
111C 120000    4052            lcall   _waitms
111F           4053   ;        main.c:937: for(i_loo = 200; i_loo >= 90; i_loo-=10){
111F 905190    4054            mov     dptr,#_i_loo
1122 74C8      4055            mov     a,#0xC8
1124 F0        4056            movx    @dptr,a
1125 E4        4057            clr     a
1126 A3        4058            inc     dptr
1127 F0        4059            movx    @dptr,a
1128           4060   L031009?:
1128 905190    4061            mov     dptr,#_i_loo
112B E0        4062            movx    a,@dptr
112C FA        4063            mov     r2,a
112D A3        4064            inc     dptr
112E E0        4065            movx    a,@dptr
112F FB        4066            mov     r3,a
1130 C3        4067            clr     c
1131 EA        4068            mov     a,r2
1132 945A      4069            subb    a,#0x5A
1134 EB        4070            mov     a,r3
1135 6480      4071            xrl     a,#0x80
1137 9480      4072            subb    a,#0x80
1139 4000      4073            jc      L031012?
113B           4074   ;        main.c:938: waitms(25);
113B 900019    4075            mov     dptr,#0x0019
113E 120000    4076            lcall   _waitms
1141           4077   ;        main.c:939: servo_base = i_loo;
1141 905190    4078            mov     dptr,#_i_loo
1144 E0        4079            movx    a,@dptr
1145 FA        4080            mov     r2,a
1146 A3        4081            inc     dptr
1147 E0        4082            movx    a,@dptr
1148 FB        4083            mov     r3,a
1149 904FD0    4084            mov     dptr,#_servo_base
114C EA        4085            mov     a,r2
114D F0        4086            movx    @dptr,a
114E           4087   ;        main.c:937: for(i_loo = 200; i_loo >= 90; i_loo-=10){
114E EA        4088            mov     a,r2
114F 24F6      4089            add     a,#0xf6
1151 FA        4090            mov     r2,a
1152 EB        4091            mov     a,r3
1153 34FF      4092            addc    a,#0xff
1155 FB        4093            mov     r3,a
1156 905190    4094            mov     dptr,#_i_loo
1159 EA        4095            mov     a,r2
115A F0        4096            movx    @dptr,a
115B A3        4097            inc     dptr
115C EB        4098            mov     a,r3
115D F0        4099            movx    @dptr,a
115E 8000      4100            sjmp    L031009?
1160           4101   L031012?:
1160           4102   ;        main.c:941: waitms(500);
1160 9001F4    4103            mov     dptr,#0x01F4
1163 120000    4104            lcall   _waitms
1166           4105   ;        main.c:942: for(i_loo = 90; i_loo <= 200; i_loo+=10){
1166 905190    4106            mov     dptr,#_i_loo
1169 745A      4107            mov     a,#0x5A
116B F0        4108            movx    @dptr,a
116C E4        4109            clr     a
116D A3        4110            inc     dptr
116E F0        4111            movx    @dptr,a
116F           4112   L031013?:
116F 905190    4113            mov     dptr,#_i_loo
1172 E0        4114            movx    a,@dptr
1173 FA        4115            mov     r2,a
1174 A3        4116            inc     dptr
1175 E0        4117            movx    a,@dptr
1176 FB        4118            mov     r3,a
1177 C3        4119            clr     c
1178 74C8      4120            mov     a,#0xC8
117A 9A        4121            subb    a,r2
117B E4        4122            clr     a
117C 6480      4123            xrl     a,#0x80
117E 8BF0      4124            mov     b,r3
1180 63F080    4125            xrl     b,#0x80
1183 95F0      4126            subb    a,b
1185 4000      4127            jc      L031016?
1187           4128   ;        main.c:943: waitms(25);
1187 900019    4129            mov     dptr,#0x0019
118A 120000    4130            lcall   _waitms
118D           4131   ;        main.c:944: servo_base = i_loo;
118D 905190    4132            mov     dptr,#_i_loo
1190 E0        4133            movx    a,@dptr
1191 FA        4134            mov     r2,a
1192 A3        4135            inc     dptr
1193 E0        4136            movx    a,@dptr
1194 FB        4137            mov     r3,a
1195 904FD0    4138            mov     dptr,#_servo_base
1198 EA        4139            mov     a,r2
1199 F0        4140            movx    @dptr,a
119A           4141   ;        main.c:942: for(i_loo = 90; i_loo <= 200; i_loo+=10){
119A 905190    4142            mov     dptr,#_i_loo
119D 740A      4143            mov     a,#0x0A
119F 2A        4144            add     a,r2
11A0 F0        4145            movx    @dptr,a
11A1 E4        4146            clr     a
11A2 3B        4147            addc    a,r3
11A3 A3        4148            inc     dptr
11A4 F0        4149            movx    @dptr,a
11A5 8000      4150            sjmp    L031013?
11A7           4151   L031016?:
11A7           4152   ;        main.c:946: waitms(500);
11A7 9001F4    4153            mov     dptr,#0x01F4
11AA 120000    4154            lcall   _waitms
11AD           4155   ;        main.c:947: for(i_loo = 240; i_loo >= 100; i_loo-= 5){
11AD 905190    4156            mov     dptr,#_i_loo
11B0 74F0      4157            mov     a,#0xF0
11B2 F0        4158            movx    @dptr,a
11B3 E4        4159            clr     a
11B4 A3        4160            inc     dptr
11B5 F0        4161            movx    @dptr,a
11B6           4162   L031017?:
11B6 905190    4163            mov     dptr,#_i_loo
11B9 E0        4164            movx    a,@dptr
11BA FA        4165            mov     r2,a
11BB A3        4166            inc     dptr
11BC E0        4167            movx    a,@dptr
11BD FB        4168            mov     r3,a
11BE C3        4169            clr     c
11BF EA        4170            mov     a,r2
11C0 9464      4171            subb    a,#0x64
11C2 EB        4172            mov     a,r3
11C3 6480      4173            xrl     a,#0x80
11C5 9480      4174            subb    a,#0x80
11C7 4000      4175            jc      L031020?
11C9           4176   ;        main.c:948: waitms(25);
11C9 900019    4177            mov     dptr,#0x0019
11CC 120000    4178            lcall   _waitms
11CF           4179   ;        main.c:949: servo_arm = i_loo;
11CF 905190    4180            mov     dptr,#_i_loo
11D2 E0        4181            movx    a,@dptr
11D3 FA        4182            mov     r2,a
11D4 A3        4183            inc     dptr
11D5 E0        4184            movx    a,@dptr
11D6 FB        4185            mov     r3,a
11D7 904F90    4186            mov     dptr,#_servo_arm
11DA EA        4187            mov     a,r2
11DB F0        4188            movx    @dptr,a
11DC           4189   ;        main.c:947: for(i_loo = 240; i_loo >= 100; i_loo-= 5){
11DC EA        4190            mov     a,r2
11DD 24FB      4191            add     a,#0xfb
11DF FA        4192            mov     r2,a
11E0 EB        4193            mov     a,r3
11E1 34FF      4194            addc    a,#0xff
11E3 FB        4195            mov     r3,a
11E4 905190    4196            mov     dptr,#_i_loo
11E7 EA        4197            mov     a,r2
11E8 F0        4198            movx    @dptr,a
11E9 A3        4199            inc     dptr
11EA EB        4200            mov     a,r3
11EB F0        4201            movx    @dptr,a
11EC 8000      4202            sjmp    L031017?
11EE           4203   L031020?:
11EE           4204   ;        main.c:951: waitms(500);
11EE 9001F4    4205            mov     dptr,#0x01F4
11F1 120000    4206            lcall   _waitms
11F4           4207   ;        main.c:952: for(i_loo = 200; i_loo >= 80; i_loo-=5){
11F4 905190    4208            mov     dptr,#_i_loo
11F7 74C8      4209            mov     a,#0xC8
11F9 F0        4210            movx    @dptr,a
11FA E4        4211            clr     a
11FB A3        4212            inc     dptr
11FC F0        4213            movx    @dptr,a
11FD           4214   L031021?:
11FD 905190    4215            mov     dptr,#_i_loo
1200 E0        4216            movx    a,@dptr
1201 FA        4217            mov     r2,a
1202 A3        4218            inc     dptr
1203 E0        4219            movx    a,@dptr
1204 FB        4220            mov     r3,a
1205 C3        4221            clr     c
1206 EA        4222            mov     a,r2
1207 9450      4223            subb    a,#0x50
1209 EB        4224            mov     a,r3
120A 6480      4225            xrl     a,#0x80
120C 9480      4226            subb    a,#0x80
120E 4000      4227            jc      L031024?
1210           4228   ;        main.c:953: waitms(25);
1210 900019    4229            mov     dptr,#0x0019
1213 120000    4230            lcall   _waitms
1216           4231   ;        main.c:954: servo_base = i_loo;
1216 905190    4232            mov     dptr,#_i_loo
1219 E0        4233            movx    a,@dptr
121A FA        4234            mov     r2,a
121B A3        4235            inc     dptr
121C E0        4236            movx    a,@dptr
121D FB        4237            mov     r3,a
121E 904FD0    4238            mov     dptr,#_servo_base
1221 EA        4239            mov     a,r2
1222 F0        4240            movx    @dptr,a
1223           4241   ;        main.c:952: for(i_loo = 200; i_loo >= 80; i_loo-=5){
1223 EA        4242            mov     a,r2
1224 24FB      4243            add     a,#0xfb
1226 FA        4244            mov     r2,a
1227 EB        4245            mov     a,r3
1228 34FF      4246            addc    a,#0xff
122A FB        4247            mov     r3,a
122B 905190    4248            mov     dptr,#_i_loo
122E EA        4249            mov     a,r2
122F F0        4250            movx    @dptr,a
1230 A3        4251            inc     dptr
1231 EB        4252            mov     a,r3
1232 F0        4253            movx    @dptr,a
1233 8000      4254            sjmp    L031021?
1235           4255   L031024?:
1235           4256   ;        main.c:956: waitms(500);
1235 9001F4    4257            mov     dptr,#0x01F4
1238 120000    4258            lcall   _waitms
123B           4259   ;        main.c:957: Magnet = 0;
123B C295      4260            clr     _P1_5
123D           4261   ;        main.c:958: waitms(500);
123D 9001F4    4262            mov     dptr,#0x01F4
1240 120000    4263            lcall   _waitms
1243           4264   ;        main.c:959: for (i_loo = 100; i_loo >=40 ; i_loo-=10){
1243 905190    4265            mov     dptr,#_i_loo
1246 7464      4266            mov     a,#0x64
1248 F0        4267            movx    @dptr,a
1249 E4        4268            clr     a
124A A3        4269            inc     dptr
124B F0        4270            movx    @dptr,a
124C           4271   L031025?:
124C 905190    4272            mov     dptr,#_i_loo
124F E0        4273            movx    a,@dptr
1250 FA        4274            mov     r2,a
1251 A3        4275            inc     dptr
1252 E0        4276            movx    a,@dptr
1253 FB        4277            mov     r3,a
1254 C3        4278            clr     c
1255 EA        4279            mov     a,r2
1256 9428      4280            subb    a,#0x28
1258 EB        4281            mov     a,r3
1259 6480      4282            xrl     a,#0x80
125B 9480      4283            subb    a,#0x80
125D 4000      4284            jc      L031028?
125F           4285   ;        main.c:960: servo_arm = i_loo; 
125F 904F90    4286            mov     dptr,#_servo_arm
1262 EA        4287            mov     a,r2
1263 F0        4288            movx    @dptr,a
1264           4289   ;        main.c:961: waitms(25);
1264 900019    4290            mov     dptr,#0x0019
1267 120000    4291            lcall   _waitms
126A           4292   ;        main.c:959: for (i_loo = 100; i_loo >=40 ; i_loo-=10){
126A 905190    4293            mov     dptr,#_i_loo
126D E0        4294            movx    a,@dptr
126E FA        4295            mov     r2,a
126F A3        4296            inc     dptr
1270 E0        4297            movx    a,@dptr
1271 FB        4298            mov     r3,a
1272 EA        4299            mov     a,r2
1273 24F6      4300            add     a,#0xf6
1275 FA        4301            mov     r2,a
1276 EB        4302            mov     a,r3
1277 34FF      4303            addc    a,#0xff
1279 FB        4304            mov     r3,a
127A 905190    4305            mov     dptr,#_i_loo
127D EA        4306            mov     a,r2
127E F0        4307            movx    @dptr,a
127F A3        4308            inc     dptr
1280 EB        4309            mov     a,r3
1281 F0        4310            movx    @dptr,a
1282 8000      4311            sjmp    L031025?
1284           4312   L031028?:
1284           4313   ;        main.c:963: waitms(500);
1284 9001F4    4314            mov     dptr,#0x01F4
1287 120000    4315            lcall   _waitms
128A           4316   ;        main.c:964: for (i_loo = 80; i_loo >= 40; i_loo-=10){
128A 905190    4317            mov     dptr,#_i_loo
128D 7450      4318            mov     a,#0x50
128F F0        4319            movx    @dptr,a
1290 E4        4320            clr     a
1291 A3        4321            inc     dptr
1292 F0        4322            movx    @dptr,a
1293           4323   L031029?:
1293 905190    4324            mov     dptr,#_i_loo
1296 E0        4325            movx    a,@dptr
1297 FA        4326            mov     r2,a
1298 A3        4327            inc     dptr
1299 E0        4328            movx    a,@dptr
129A FB        4329            mov     r3,a
129B C3        4330            clr     c
129C EA        4331            mov     a,r2
129D 9428      4332            subb    a,#0x28
129F EB        4333            mov     a,r3
12A0 6480      4334            xrl     a,#0x80
12A2 9480      4335            subb    a,#0x80
12A4 4000      4336            jc      L031032?
12A6           4337   ;        main.c:965: servo_base = i_loo; 
12A6 904FD0    4338            mov     dptr,#_servo_base
12A9 EA        4339            mov     a,r2
12AA F0        4340            movx    @dptr,a
12AB           4341   ;        main.c:966: waitms(25);
12AB 900019    4342            mov     dptr,#0x0019
12AE 120000    4343            lcall   _waitms
12B1           4344   ;        main.c:964: for (i_loo = 80; i_loo >= 40; i_loo-=10){
12B1 905190    4345            mov     dptr,#_i_loo
12B4 E0        4346            movx    a,@dptr
12B5 FA        4347            mov     r2,a
12B6 A3        4348            inc     dptr
12B7 E0        4349            movx    a,@dptr
12B8 FB        4350            mov     r3,a
12B9 EA        4351            mov     a,r2
12BA 24F6      4352            add     a,#0xf6
12BC FA        4353            mov     r2,a
12BD EB        4354            mov     a,r3
12BE 34FF      4355            addc    a,#0xff
12C0 FB        4356            mov     r3,a
12C1 905190    4357            mov     dptr,#_i_loo
12C4 EA        4358            mov     a,r2
12C5 F0        4359            movx    @dptr,a
12C6 A3        4360            inc     dptr
12C7 EB        4361            mov     a,r3
12C8 F0        4362            movx    @dptr,a
12C9 8000      4363            sjmp    L031029?
12CB           4364   L031032?:
12CB           4365   ;        main.c:968: return;
12CB 22        4366            ret
12CC           4367   ;------------------------------------------------------------
12CC           4368   ;Allocation info for local variables in function 'check_bound'
12CC           4369   ;------------------------------------------------------------
12CC           4370   ;d2                        Allocated with name '_check_bound_PARM_2'
12CC           4371   ;d1                        Allocated to registers r2 r3 
12CC           4372   ;------------------------------------------------------------
12CC           4373   ;        main.c:971: int check_bound(int d1, int d2){
12CC           4374   ;        -----------------------------------------
12CC           4375   ;         function check_bound
12CC           4376   ;        -----------------------------------------
12CC           4377   _check_bound:
12CC AA82      4378            mov     r2,dpl
12CE AB83      4379            mov     r3,dph
12D0           4380   ;        main.c:972: if(d1>10000||d2>10000)      return 1;
12D0 C3        4381            clr     c
12D1 7410      4382            mov     a,#0x10
12D3 9A        4383            subb    a,r2
12D4 74A7      4384            mov     a,#(0x27 ^ 0x80)
12D6 8BF0      4385            mov     b,r3
12D8 63F080    4386            xrl     b,#0x80
12DB 95F0      4387            subb    a,b
12DD 4000      4388            jc      L032001?
12DF 7410      4389            mov     a,#0x10
12E1 9590      4390            subb    a,_check_bound_PARM_2
12E3 74A7      4391            mov     a,#(0x27 ^ 0x80)
12E5 8591F0    4392            mov     b,(_check_bound_PARM_2 + 1)
12E8 63F080    4393            xrl     b,#0x80
12EB 95F0      4394            subb    a,b
12ED 5000      4395            jnc     L032002?
12EF           4396   L032001?:
12EF 900001    4397            mov     dptr,#0x0001
12F2           4398   ;        main.c:973: else return 0;
12F2 22        4399            ret
12F3           4400   L032002?:
12F3 900000    4401            mov     dptr,#0x0000
12F6 22        4402            ret
12F7           4403   ;------------------------------------------------------------
12F7           4404   ;Allocation info for local variables in function 'Init_all'
12F7           4405   ;------------------------------------------------------------
12F7           4406   ;------------------------------------------------------------
12F7           4407   ;        main.c:976: void Init_all(){
12F7           4408   ;        -----------------------------------------
12F7           4409   ;         function Init_all
12F7           4410   ;        -----------------------------------------
12F7           4411   _Init_all:
12F7           4412   ;        main.c:978: Set_Pin_Output(0x24);
12F7 758224    4413            mov     dpl,#0x24
12FA 120000    4414            lcall   _Set_Pin_Output
12FD           4415   ;        main.c:979: Set_Pin_Output(0x23);
12FD 758223    4416            mov     dpl,#0x23
1300 120000    4417            lcall   _Set_Pin_Output
1303           4418   ;        main.c:980: Set_Pin_Output(0x22);
1303 758222    4419            mov     dpl,#0x22
1306 120000    4420            lcall   _Set_Pin_Output
1309           4421   ;        main.c:981: Set_Pin_Output(0x21);
1309 758221    4422            mov     dpl,#0x21
130C 120000    4423            lcall   _Set_Pin_Output
130F           4424   ;        main.c:982: Set_Pin_Output(0x17);
130F 758217    4425            mov     dpl,#0x17
1312 120000    4426            lcall   _Set_Pin_Output
1315           4427   ;        main.c:983: Set_Pin_Output(0x16);
1315 758216    4428            mov     dpl,#0x16
1318 120000    4429            lcall   _Set_Pin_Output
131B           4430   ;        main.c:984: Set_Pin_Output(0x15);
131B 758215    4431            mov     dpl,#0x15
131E 120000    4432            lcall   _Set_Pin_Output
1321           4433   ;        main.c:985: Set_Pin_Output(0x10); // CS
1321 758210    4434            mov     dpl,#0x10
1324 120000    4435            lcall   _Set_Pin_Output
1327           4436   ;        main.c:987: Set_Pin_Input(0x30);
1327 758230    4437            mov     dpl,#0x30
132A 120000    4438            lcall   _Set_Pin_Input
132D           4439   ;        main.c:988: Set_Pin_Output(0x25); // CLK for Load
132D 758225    4440            mov     dpl,#0x25
1330 120000    4441            lcall   _Set_Pin_Output
1333           4442   ;        main.c:989: Set_Pin_Input(0x26);
1333 758226    4443            mov     dpl,#0x26
1336 120000    4444            lcall   _Set_Pin_Input
1339           4445   ;        main.c:991: Set_Pin_Input(0x31);   //ECHO pin
1339 758231    4446            mov     dpl,#0x31
133C 120000    4447            lcall   _Set_Pin_Input
133F           4448   ;        main.c:992: Set_Pin_Output(0x00);  // TRIGGER pin
133F 758200    4449            mov     dpl,#0x00
1342 120000    4450            lcall   _Set_Pin_Output
1345           4451   ;        main.c:994: InitPinADC(1,3);
1345 75E003    4452            mov     _InitPinADC_PARM_2,#0x03
1348 758201    4453            mov     dpl,#0x01
134B 120000    4454            lcall   _InitPinADC
134E           4455   ;        main.c:995: InitPinADC(1,4);
134E 75E004    4456            mov     _InitPinADC_PARM_2,#0x04
1351 758201    4457            mov     dpl,#0x01
1354 120000    4458            lcall   _InitPinADC
1357           4459   ;        main.c:996: InitADC();
1357 120000    4460            lcall   _InitADC
135A           4461   ;        main.c:998: TMOD&=0b_1111_0000; 
135A 5389F0    4462            anl     _TMOD,#0xF0
135D           4463   ;        main.c:999: TMOD|=0b_0000_0001; 
135D 438901    4464            orl     _TMOD,#0x01
1360           4465   ;        main.c:1000: TR0=0; 
1360 C28C      4466            clr     _TR0
1362           4467   ;        main.c:1002: Servo_arm=0;
1362 C296      4468            clr     _P1_6
1364           4469   ;        main.c:1003: Servo_base=0;
1364 C297      4470            clr     _P1_7
1366           4471   ;        main.c:1004: Magnet = 0;
1366 C295      4472            clr     _P1_5
1368           4473   ;        main.c:1005: PD_SCK = 0;
1368 C2A5      4474            clr     _P2_5
136A           4475   ;        main.c:1006: return;
136A 22        4476            ret
136B           4477   ;------------------------------------------------------------
136B           4478   ;Allocation info for local variables in function 'Move_back_ms'
136B           4479   ;------------------------------------------------------------
136B           4480   ;ms                        Allocated to registers r2 r3 
136B           4481   ;------------------------------------------------------------
136B           4482   ;        main.c:1009: void Move_back_ms(int ms){
136B           4483   ;        -----------------------------------------
136B           4484   ;         function Move_back_ms
136B           4485   ;        -----------------------------------------
136B           4486   _Move_back_ms:
136B AA82      4487            mov     r2,dpl
136D AB83      4488            mov     r3,dph
136F           4489   ;        main.c:1011: L_motor_dir = 1;
136F 905050    4490            mov     dptr,#_L_motor_dir
1372 7401      4491            mov     a,#0x01
1374 F0        4492            movx    @dptr,a
1375           4493   ;        main.c:1012: R_motor_dir = 1;
1375 905010    4494            mov     dptr,#_R_motor_dir
1378 7401      4495            mov     a,#0x01
137A F0        4496            movx    @dptr,a
137B           4497   ;        main.c:1014: pwm_left = 50;
137B 9050D0    4498            mov     dptr,#_pwm_left
137E 7432      4499            mov     a,#0x32
1380 F0        4500            movx    @dptr,a
1381           4501   ;        main.c:1015: pwm_right = 50;
1381 905090    4502            mov     dptr,#_pwm_right
1384 7432      4503            mov     a,#0x32
1386 F0        4504            movx    @dptr,a
1387           4505   ;        main.c:1017: waitms(ms);
1387 8A82      4506            mov     dpl,r2
1389 8B83      4507            mov     dph,r3
138B 120000    4508            lcall   _waitms
138E           4509   ;        main.c:1019: L_motor_dir = 0;
138E 905050    4510            mov     dptr,#_L_motor_dir
1391           4511   ;        main.c:1020: R_motor_dir = 0;
1391           4512   ;        main.c:1021: pwm_left = 0;
1391           4513   ;        main.c:1022: pwm_right = 0;
1391 E4        4514            clr     a
1392 F0        4515            movx    @dptr,a
1393 905010    4516            mov     dptr,#_R_motor_dir
1396 F0        4517            movx    @dptr,a
1397 9050D0    4518            mov     dptr,#_pwm_left
139A F0        4519            movx    @dptr,a
139B 905090    4520            mov     dptr,#_pwm_right
139E F0        4521            movx    @dptr,a
139F           4522   ;        main.c:1023: return;
139F 22        4523            ret
13A0           4524   ;------------------------------------------------------------
13A0           4525   ;Allocation info for local variables in function 'Right_angle'
13A0           4526   ;------------------------------------------------------------
13A0           4527   ;angle                     Allocated to registers r2 r3 
13A0           4528   ;------------------------------------------------------------
13A0           4529   ;        main.c:1026: void Right_angle(int angle){
13A0           4530   ;        -----------------------------------------
13A0           4531   ;         function Right_angle
13A0           4532   ;        -----------------------------------------
13A0           4533   _Right_angle:
13A0 AA82      4534            mov     r2,dpl
13A2 AB83      4535            mov     r3,dph
13A4           4536   ;        main.c:1028: L_motor_dir = 1;
13A4 905050    4537            mov     dptr,#_L_motor_dir
13A7 7401      4538            mov     a,#0x01
13A9 F0        4539            movx    @dptr,a
13AA           4540   ;        main.c:1029: R_motor_dir = 0;
13AA 905010    4541            mov     dptr,#_R_motor_dir
13AD E4        4542            clr     a
13AE F0        4543            movx    @dptr,a
13AF           4544   ;        main.c:1030: pwm_left = 80;
13AF 9050D0    4545            mov     dptr,#_pwm_left
13B2 7450      4546            mov     a,#0x50
13B4 F0        4547            movx    @dptr,a
13B5           4548   ;        main.c:1031: pwm_right = 80 * pwm_corr;
13B5 C002      4549            push    ar2
13B7 C003      4550            push    ar3
13B9 904D80    4551            mov     dptr,#_pwm_corr
13BC E0        4552            movx    a,@dptr
13BD C0E0      4553            push    acc
13BF A3        4554            inc     dptr
13C0 E0        4555            movx    a,@dptr
13C1 C0E0      4556            push    acc
13C3 A3        4557            inc     dptr
13C4 E0        4558            movx    a,@dptr
13C5 C0E0      4559            push    acc
13C7 A3        4560            inc     dptr
13C8 E0        4561            movx    a,@dptr
13C9 C0E0      4562            push    acc
13CB 900000    4563            mov     dptr,#0x0000
13CE 75F0A0    4564            mov     b,#0xA0
13D1 7442      4565            mov     a,#0x42
13D3 120000    4566            lcall   ___fsmul
13D6 AC82      4567            mov     r4,dpl
13D8 AD83      4568            mov     r5,dph
13DA AEF0      4569            mov     r6,b
13DC FF        4570            mov     r7,a
13DD E581      4571            mov     a,sp
13DF 24FC      4572            add     a,#0xfc
13E1 F581      4573            mov     sp,a
13E3 8C82      4574            mov     dpl,r4
13E5 8D83      4575            mov     dph,r5
13E7 8EF0      4576            mov     b,r6
13E9 EF        4577            mov     a,r7
13EA 120000    4578            lcall   ___fs2uchar
13ED E582      4579            mov     a,dpl
13EF D003      4580            pop     ar3
13F1 D002      4581            pop     ar2
13F3 905090    4582            mov     dptr,#_pwm_right
13F6 F0        4583            movx    @dptr,a
13F7           4584   ;        main.c:1033: waitms(angle);
13F7 8A82      4585            mov     dpl,r2
13F9 8B83      4586            mov     dph,r3
13FB 120000    4587            lcall   _waitms
13FE           4588   ;        main.c:1035: L_motor_dir = 0;
13FE 905050    4589            mov     dptr,#_L_motor_dir
1401           4590   ;        main.c:1036: R_motor_dir = 0;
1401           4591   ;        main.c:1037: pwm_left = 0;
1401           4592   ;        main.c:1038: pwm_right = 0;
1401 E4        4593            clr     a
1402 F0        4594            movx    @dptr,a
1403 905010    4595            mov     dptr,#_R_motor_dir
1406 F0        4596            movx    @dptr,a
1407 9050D0    4597            mov     dptr,#_pwm_left
140A F0        4598            movx    @dptr,a
140B 905090    4599            mov     dptr,#_pwm_right
140E F0        4600            movx    @dptr,a
140F           4601   ;        main.c:1039: return;
140F 22        4602            ret
1410           4603   ;------------------------------------------------------------
1410           4604   ;Allocation info for local variables in function 'Move_forward'
1410           4605   ;------------------------------------------------------------
1410           4606   ;------------------------------------------------------------
1410           4607   ;        main.c:1042: void Move_forward(){
1410           4608   ;        -----------------------------------------
1410           4609   ;         function Move_forward
1410           4610   ;        -----------------------------------------
1410           4611   _Move_forward:
1410           4612   ;        main.c:1044: L_motor_dir = 0;
1410 905050    4613            mov     dptr,#_L_motor_dir
1413           4614   ;        main.c:1045: R_motor_dir = 0;
1413 E4        4615            clr     a
1414 F0        4616            movx    @dptr,a
1415 905010    4617            mov     dptr,#_R_motor_dir
1418 F0        4618            movx    @dptr,a
1419           4619   ;        main.c:1046: pwm_left = 60;
1419 9050D0    4620            mov     dptr,#_pwm_left
141C 743C      4621            mov     a,#0x3C
141E F0        4622            movx    @dptr,a
141F           4623   ;        main.c:1047: pwm_right = 60 * pwm_corr;
141F 904D80    4624            mov     dptr,#_pwm_corr
1422 E0        4625            movx    a,@dptr
1423 C0E0      4626            push    acc
1425 A3        4627            inc     dptr
1426 E0        4628            movx    a,@dptr
1427 C0E0      4629            push    acc
1429 A3        4630            inc     dptr
142A E0        4631            movx    a,@dptr
142B C0E0      4632            push    acc
142D A3        4633            inc     dptr
142E E0        4634            movx    a,@dptr
142F C0E0      4635            push    acc
1431 900000    4636            mov     dptr,#0x0000
1434 75F070    4637            mov     b,#0x70
1437 7442      4638            mov     a,#0x42
1439 120000    4639            lcall   ___fsmul
143C AA82      4640            mov     r2,dpl
143E AB83      4641            mov     r3,dph
1440 ACF0      4642            mov     r4,b
1442 FD        4643            mov     r5,a
1443 E581      4644            mov     a,sp
1445 24FC      4645            add     a,#0xfc
1447 F581      4646            mov     sp,a
1449 8A82      4647            mov     dpl,r2
144B 8B83      4648            mov     dph,r3
144D 8CF0      4649            mov     b,r4
144F ED        4650            mov     a,r5
1450 120000    4651            lcall   ___fs2uchar
1453 E582      4652            mov     a,dpl
1455 905090    4653            mov     dptr,#_pwm_right
1458 F0        4654            movx    @dptr,a
1459           4655   ;        main.c:1048: return;
1459 22        4656            ret
145A           4657   ;------------------------------------------------------------
145A           4658   ;Allocation info for local variables in function 'simple_rand'
145A           4659   ;------------------------------------------------------------
145A           4660   ;------------------------------------------------------------
145A           4661   ;        main.c:1051: unsigned int simple_rand() {
145A           4662   ;        -----------------------------------------
145A           4663   ;         function simple_rand
145A           4664   ;        -----------------------------------------
145A           4665   _simple_rand:
145A           4666   ;        main.c:1052: seed = (seed * 25173 + 13849) & 0xFFFF;  
145A 904DC0    4667            mov     dptr,#_seed
145D E0        4668            movx    a,@dptr
145E F500      4669            mov     __mulint_PARM_2,a
1460 A3        4670            inc     dptr
1461 E0        4671            movx    a,@dptr
1462 F501      4672            mov     (__mulint_PARM_2 + 1),a
1464 906255    4673            mov     dptr,#0x6255
1467 120000    4674            lcall   __mulint
146A E582      4675            mov     a,dpl
146C 8583F0    4676            mov     b,dph
146F 904DC0    4677            mov     dptr,#_seed
1472 2419      4678            add     a,#0x19
1474 F0        4679            movx    @dptr,a
1475 7436      4680            mov     a,#0x36
1477 35F0      4681            addc    a,b
1479 A3        4682            inc     dptr
147A F0        4683            movx    @dptr,a
147B           4684   ;        main.c:1053: return seed;     
147B 904DC0    4685            mov     dptr,#_seed
147E E0        4686            movx    a,@dptr
147F FA        4687            mov     r2,a
1480 A3        4688            inc     dptr
1481 E0        4689            movx    a,@dptr
1482 8A82      4690            mov     dpl,r2
1484 F583      4691            mov     dph,a
1486 22        4692            ret
1487           4693   ;------------------------------------------------------------
1487           4694   ;Allocation info for local variables in function 'get_random_90_250'
1487           4695   ;------------------------------------------------------------
1487           4696   ;------------------------------------------------------------
1487           4697   ;        main.c:1056: unsigned int get_random_90_250() {
1487           4698   ;        -----------------------------------------
1487           4699   ;         function get_random_90_250
1487           4700   ;        -----------------------------------------
1487           4701   _get_random_90_250:
1487           4702   ;        main.c:1057: return (simple_rand() % (250 - 85 + 1)) + 90;
1487 120000    4703            lcall   _simple_rand
148A 7500A6    4704            mov     __moduint_PARM_2,#0xA6
148D E4        4705            clr     a
148E F501      4706            mov     (__moduint_PARM_2 + 1),a
1490 120000    4707            lcall   __moduint
1493 E582      4708            mov     a,dpl
1495 8583F0    4709            mov     b,dph
1498 245A      4710            add     a,#0x5A
149A F582      4711            mov     dpl,a
149C E4        4712            clr     a
149D 35F0      4713            addc    a,b
149F F583      4714            mov     dph,a
14A1 22        4715            ret
14A2           4716   ;------------------------------------------------------------
14A2           4717   ;Allocation info for local variables in function 'Read_angle'
14A2           4718   ;------------------------------------------------------------
14A2           4719   ;sloc0                     Allocated with name '_Read_angle_sloc0_1_0'
14A2           4720   ;i                         Allocated with name '_Read_angle_i_1_216'
14A2           4721   ;mag_x                     Allocated with name '_Read_angle_mag_x_1_216'
14A2           4722   ;mag_y                     Allocated with name '_Read_angle_mag_y_1_216'
14A2           4723   ;sum_x                     Allocated with name '_Read_angle_sum_x_1_216'
14A2           4724   ;sum_y                     Allocated with name '_Read_angle_sum_y_1_216'
14A2           4725   ;angle                     Allocated with name '_Read_angle_angle_1_216'
14A2           4726   ;------------------------------------------------------------
14A2           4727   ;        main.c:1060: float Read_angle(void)
14A2           4728   ;        -----------------------------------------
14A2           4729   ;         function Read_angle
14A2           4730   ;        -----------------------------------------
14A2           4731   _Read_angle:
14A2           4732   ;        main.c:1067: sum_x = 0.0; sum_y = 0.0;
14A2 90D048    4733            mov     dptr,#_Read_angle_sum_x_1_216
14A5 E4        4734            clr     a
14A6 F0        4735            movx    @dptr,a
14A7 A3        4736            inc     dptr
14A8 F0        4737            movx    @dptr,a
14A9 A3        4738            inc     dptr
14AA F0        4739            movx    @dptr,a
14AB A3        4740            inc     dptr
14AC F0        4741            movx    @dptr,a
14AD 90D098    4742            mov     dptr,#_Read_angle_sum_y_1_216
14B0 F0        4743            movx    @dptr,a
14B1 A3        4744            inc     dptr
14B2 E4        4745            clr     a
14B3 F0        4746            movx    @dptr,a
14B4 A3        4747            inc     dptr
14B5 F0        4748            movx    @dptr,a
14B6 A3        4749            inc     dptr
14B7 F0        4750            movx    @dptr,a
14B8           4751   ;        main.c:1070: for (i = 0; i < 10; i++){
14B8 7A00      4752            mov     r2,#0x00
14BA           4753   L039005?:
14BA BA0A68    4754            cjne    r2,#0x0A,L039016?
14BD           4755   L039016?:
14BD 4000      4756            jc      L039017?
14BF 020000    4757            ljmp    L039008?
14C2           4758   L039017?:
14C2           4759   ;        main.c:1071: BMM150_Read_Data(&mag_x, &mag_y);
14C2 75F0F8    4760            mov     _BMM150_Read_Data_PARM_2,#_Read_angle_mag_y_1_216
14C5 75F1CF    4761            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_Read_angle_mag_y_1_216 >> 8)
14C8 75F200    4762            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
14CB 90CFA8    4763            mov     dptr,#_Read_angle_mag_x_1_216
14CE 75F000    4764            mov     b,#0x00
14D1 C002      4765            push    ar2
14D3 120000    4766            lcall   _BMM150_Read_Data
14D6           4767   ;        main.c:1072: sum_x += (float)mag_x; 
14D6 90CFA8    4768            mov     dptr,#_Read_angle_mag_x_1_216
14D9 E0        4769            movx    a,@dptr
14DA FB        4770            mov     r3,a
14DB A3        4771            inc     dptr
14DC E0        4772            movx    a,@dptr
14DD FC        4773            mov     r4,a
14DE 8B82      4774            mov     dpl,r3
14E0 8C83      4775            mov     dph,r4
14E2 120000    4776            lcall   ___sint2fs
14E5 8582E8    4777            mov     _Read_angle_sloc0_1_0,dpl
14E8 8583E9    4778            mov     (_Read_angle_sloc0_1_0 + 1),dph
14EB 85F0EA    4779            mov     (_Read_angle_sloc0_1_0 + 2),b
14EE F5EB      4780            mov     (_Read_angle_sloc0_1_0 + 3),a
14F0 90D048    4781            mov     dptr,#_Read_angle_sum_x_1_216
14F3 E0        4782            movx    a,@dptr
14F4 FF        4783            mov     r7,a
14F5 A3        4784            inc     dptr
14F6 E0        4785            movx    a,@dptr
14F7 F8        4786            mov     r0,a
14F8 A3        4787            inc     dptr
14F9 E0        4788            movx    a,@dptr
14FA F9        4789            mov     r1,a
14FB A3        4790            inc     dptr
14FC E0        4791            movx    a,@dptr
14FD FB        4792            mov     r3,a
14FE C0E8      4793            push    _Read_angle_sloc0_1_0
1500 C0E9      4794            push    (_Read_angle_sloc0_1_0 + 1)
1502 C0EA      4795            push    (_Read_angle_sloc0_1_0 + 2)
1504 C0EB      4796            push    (_Read_angle_sloc0_1_0 + 3)
1506 8F82      4797            mov     dpl,r7
1508 8883      4798            mov     dph,r0
150A 89F0      4799            mov     b,r1
150C EB        4800            mov     a,r3
150D 120000    4801            lcall   ___fsadd
1510 AB82      4802            mov     r3,dpl
1512 AC83      4803            mov     r4,dph
1514 ADF0      4804            mov     r5,b
1516 FE        4805            mov     r6,a
1517 E581      4806            mov     a,sp
1519 24FC      4807            add     a,#0xfc
151B F581      4808            mov     sp,a
151D 90D048    4809            mov     dptr,#_Read_angle_sum_x_1_216
1520 EB        4810            mov     a,r3
1521 F0        4811            movx    @dptr,a
1522 A3        4812            inc     dptr
1523 EC        4813            mov     a,r4
1524 F0        4814            movx    @dptr,a
1525 A3        4815            inc     dptr
1526 ED        4816            mov     a,r5
1527 F0        4817            movx    @dptr,a
1528 A3        4818            inc     dptr
1529 EE        4819            mov     a,r6
152A F0        4820            movx    @dptr,a
152B           4821   ;        main.c:1073: sum_y += (float)mag_y; 
152B 90CFF8    4822            mov     dptr,#_Read_angle_mag_y_1_216
152E E0        4823            movx    a,@dptr
152F FB        4824            mov     r3,a
1530 A3        4825            inc     dptr
1531 E0        4826            movx    a,@dptr
1532 FC        4827            mov     r4,a
1533 8B82      4828            mov     dpl,r3
1535 8C83      4829            mov     dph,r4
1537 120000    4830            lcall   ___sint2fs
153A 8582E8    4831            mov     _Read_angle_sloc0_1_0,dpl
153D 8583E9    4832            mov     (_Read_angle_sloc0_1_0 + 1),dph
1540 85F0EA    4833            mov     (_Read_angle_sloc0_1_0 + 2),b
1543 F5EB      4834            mov     (_Read_angle_sloc0_1_0 + 3),a
1545 90D098    4835            mov     dptr,#_Read_angle_sum_y_1_216
1548 E0        4836            movx    a,@dptr
1549 FF        4837            mov     r7,a
154A A3        4838            inc     dptr
154B E0        4839            movx    a,@dptr
154C F8        4840            mov     r0,a
154D A3        4841            inc     dptr
154E E0        4842            movx    a,@dptr
154F F9        4843            mov     r1,a
1550 A3        4844            inc     dptr
1551 E0        4845            movx    a,@dptr
1552 FB        4846            mov     r3,a
1553 C0E8      4847            push    _Read_angle_sloc0_1_0
1555 C0E9      4848            push    (_Read_angle_sloc0_1_0 + 1)
1557 C0EA      4849            push    (_Read_angle_sloc0_1_0 + 2)
1559 C0EB      4850            push    (_Read_angle_sloc0_1_0 + 3)
155B 8F82      4851            mov     dpl,r7
155D 8883      4852            mov     dph,r0
155F 89F0      4853            mov     b,r1
1561 EB        4854            mov     a,r3
1562 120000    4855            lcall   ___fsadd
1565 AB82      4856            mov     r3,dpl
1567 AC83      4857            mov     r4,dph
1569 ADF0      4858            mov     r5,b
156B FE        4859            mov     r6,a
156C E581      4860            mov     a,sp
156E 24FC      4861            add     a,#0xfc
1570 F581      4862            mov     sp,a
1572 90D098    4863            mov     dptr,#_Read_angle_sum_y_1_216
1575 EB        4864            mov     a,r3
1576 F0        4865            movx    @dptr,a
1577 A3        4866            inc     dptr
1578 EC        4867            mov     a,r4
1579 F0        4868            movx    @dptr,a
157A A3        4869            inc     dptr
157B ED        4870            mov     a,r5
157C F0        4871            movx    @dptr,a
157D A3        4872            inc     dptr
157E EE        4873            mov     a,r6
157F F0        4874            movx    @dptr,a
1580           4875   ;        main.c:1074: Timer3us(1);
1580 758201    4876            mov     dpl,#0x01
1583 120000    4877            lcall   _Timer3us
1586 D002      4878            pop     ar2
1588           4879   ;        main.c:1070: for (i = 0; i < 10; i++){
1588 0A        4880            inc     r2
1589 020000    4881            ljmp    L039005?
158C           4882   L039008?:
158C           4883   ;        main.c:1076: angle = atan2f(sum_y, sum_x) * 180.0 / M_PI;
158C 90D098    4884            mov     dptr,#_Read_angle_sum_y_1_216
158F E0        4885            movx    a,@dptr
1590 FA        4886            mov     r2,a
1591 A3        4887            inc     dptr
1592 E0        4888            movx    a,@dptr
1593 FB        4889            mov     r3,a
1594 A3        4890            inc     dptr
1595 E0        4891            movx    a,@dptr
1596 FC        4892            mov     r4,a
1597 A3        4893            inc     dptr
1598 E0        4894            movx    a,@dptr
1599 FD        4895            mov     r5,a
159A 90D048    4896            mov     dptr,#_Read_angle_sum_x_1_216
159D E0        4897            movx    a,@dptr
159E F500      4898            mov     _atan2f_PARM_2,a
15A0 A3        4899            inc     dptr
15A1 E0        4900            movx    a,@dptr
15A2 F501      4901            mov     (_atan2f_PARM_2 + 1),a
15A4 A3        4902            inc     dptr
15A5 E0        4903            movx    a,@dptr
15A6 F502      4904            mov     (_atan2f_PARM_2 + 2),a
15A8 A3        4905            inc     dptr
15A9 E0        4906            movx    a,@dptr
15AA F503      4907            mov     (_atan2f_PARM_2 + 3),a
15AC 8A82      4908            mov     dpl,r2
15AE 8B83      4909            mov     dph,r3
15B0 8CF0      4910            mov     b,r4
15B2 ED        4911            mov     a,r5
15B3 120000    4912            lcall   _atan2f
15B6 AA82      4913            mov     r2,dpl
15B8 AB83      4914            mov     r3,dph
15BA ACF0      4915            mov     r4,b
15BC FD        4916            mov     r5,a
15BD C002      4917            push    ar2
15BF C003      4918            push    ar3
15C1 C004      4919            push    ar4
15C3 C005      4920            push    ar5
15C5 900000    4921            mov     dptr,#0x0000
15C8 75F034    4922            mov     b,#0x34
15CB 7443      4923            mov     a,#0x43
15CD 120000    4924            lcall   ___fsmul
15D0 AA82      4925            mov     r2,dpl
15D2 AB83      4926            mov     r3,dph
15D4 ACF0      4927            mov     r4,b
15D6 FD        4928            mov     r5,a
15D7 E581      4929            mov     a,sp
15D9 24FC      4930            add     a,#0xfc
15DB F581      4931            mov     sp,a
15DD 74DB      4932            mov     a,#0xDB
15DF C0E0      4933            push    acc
15E1 740F      4934            mov     a,#0x0F
15E3 C0E0      4935            push    acc
15E5 7449      4936            mov     a,#0x49
15E7 C0E0      4937            push    acc
15E9 7440      4938            mov     a,#0x40
15EB C0E0      4939            push    acc
15ED 8A82      4940            mov     dpl,r2
15EF 8B83      4941            mov     dph,r3
15F1 8CF0      4942            mov     b,r4
15F3 ED        4943            mov     a,r5
15F4 120000    4944            lcall   ___fsdiv
15F7 AA82      4945            mov     r2,dpl
15F9 AB83      4946            mov     r3,dph
15FB ACF0      4947            mov     r4,b
15FD FD        4948            mov     r5,a
15FE E581      4949            mov     a,sp
1600 24FC      4950            add     a,#0xfc
1602 F581      4951            mov     sp,a
1604 90D0E8    4952            mov     dptr,#_Read_angle_angle_1_216
1607 EA        4953            mov     a,r2
1608 F0        4954            movx    @dptr,a
1609 A3        4955            inc     dptr
160A EB        4956            mov     a,r3
160B F0        4957            movx    @dptr,a
160C A3        4958            inc     dptr
160D EC        4959            mov     a,r4
160E F0        4960            movx    @dptr,a
160F A3        4961            inc     dptr
1610 ED        4962            mov     a,r5
1611 F0        4963            movx    @dptr,a
1612           4964   ;        main.c:1077: if (angle < 0.0) angle += 360.0; 
1612 C002      4965            push    ar2
1614 C003      4966            push    ar3
1616 C004      4967            push    ar4
1618 C005      4968            push    ar5
161A E4        4969            clr     a
161B C0E0      4970            push    acc
161D C0E0      4971            push    acc
161F C0E0      4972            push    acc
1621 C0E0      4973            push    acc
1623 8A82      4974            mov     dpl,r2
1625 8B83      4975            mov     dph,r3
1627 8CF0      4976            mov     b,r4
1629 ED        4977            mov     a,r5
162A 120000    4978            lcall   ___fslt
162D AE82      4979            mov     r6,dpl
162F E581      4980            mov     a,sp
1631 24FC      4981            add     a,#0xfc
1633 F581      4982            mov     sp,a
1635 D005      4983            pop     ar5
1637 D004      4984            pop     ar4
1639 D003      4985            pop     ar3
163B D002      4986            pop     ar2
163D EE        4987            mov     a,r6
163E 6000      4988            jz      L039002?
1640 E4        4989            clr     a
1641 C0E0      4990            push    acc
1643 C0E0      4991            push    acc
1645 74B4      4992            mov     a,#0xB4
1647 C0E0      4993            push    acc
1649 7443      4994            mov     a,#0x43
164B C0E0      4995            push    acc
164D 8A82      4996            mov     dpl,r2
164F 8B83      4997            mov     dph,r3
1651 8CF0      4998            mov     b,r4
1653 ED        4999            mov     a,r5
1654 120000    5000            lcall   ___fsadd
1657 AA82      5001            mov     r2,dpl
1659 AB83      5002            mov     r3,dph
165B ACF0      5003            mov     r4,b
165D FD        5004            mov     r5,a
165E E581      5005            mov     a,sp
1660 24FC      5006            add     a,#0xfc
1662 F581      5007            mov     sp,a
1664 90D0E8    5008            mov     dptr,#_Read_angle_angle_1_216
1667 EA        5009            mov     a,r2
1668 F0        5010            movx    @dptr,a
1669 A3        5011            inc     dptr
166A EB        5012            mov     a,r3
166B F0        5013            movx    @dptr,a
166C A3        5014            inc     dptr
166D EC        5015            mov     a,r4
166E F0        5016            movx    @dptr,a
166F A3        5017            inc     dptr
1670 ED        5018            mov     a,r5
1671 F0        5019            movx    @dptr,a
1672           5020   L039002?:
1672           5021   ;        main.c:1078: if (angle > 360.0) angle -= 360.0; 
1672 90D0E8    5022            mov     dptr,#_Read_angle_angle_1_216
1675 E0        5023            movx    a,@dptr
1676 FA        5024            mov     r2,a
1677 A3        5025            inc     dptr
1678 E0        5026            movx    a,@dptr
1679 FB        5027            mov     r3,a
167A A3        5028            inc     dptr
167B E0        5029            movx    a,@dptr
167C FC        5030            mov     r4,a
167D A3        5031            inc     dptr
167E E0        5032            movx    a,@dptr
167F FD        5033            mov     r5,a
1680 C002      5034            push    ar2
1682 C003      5035            push    ar3
1684 C004      5036            push    ar4
1686 C005      5037            push    ar5
1688 E4        5038            clr     a
1689 C0E0      5039            push    acc
168B C0E0      5040            push    acc
168D 74B4      5041            mov     a,#0xB4
168F C0E0      5042            push    acc
1691 7443      5043            mov     a,#0x43
1693 C0E0      5044            push    acc
1695 8A82      5045            mov     dpl,r2
1697 8B83      5046            mov     dph,r3
1699 8CF0      5047            mov     b,r4
169B ED        5048            mov     a,r5
169C 120000    5049            lcall   ___fsgt
169F AE82      5050            mov     r6,dpl
16A1 E581      5051            mov     a,sp
16A3 24FC      5052            add     a,#0xfc
16A5 F581      5053            mov     sp,a
16A7 D005      5054            pop     ar5
16A9 D004      5055            pop     ar4
16AB D003      5056            pop     ar3
16AD D002      5057            pop     ar2
16AF EE        5058            mov     a,r6
16B0 6000      5059            jz      L039004?
16B2 E4        5060            clr     a
16B3 C0E0      5061            push    acc
16B5 C0E0      5062            push    acc
16B7 74B4      5063            mov     a,#0xB4
16B9 C0E0      5064            push    acc
16BB 7443      5065            mov     a,#0x43
16BD C0E0      5066            push    acc
16BF 8A82      5067            mov     dpl,r2
16C1 8B83      5068            mov     dph,r3
16C3 8CF0      5069            mov     b,r4
16C5 ED        5070            mov     a,r5
16C6 120000    5071            lcall   ___fssub
16C9 AA82      5072            mov     r2,dpl
16CB AB83      5073            mov     r3,dph
16CD ACF0      5074            mov     r4,b
16CF FD        5075            mov     r5,a
16D0 E581      5076            mov     a,sp
16D2 24FC      5077            add     a,#0xfc
16D4 F581      5078            mov     sp,a
16D6 90D0E8    5079            mov     dptr,#_Read_angle_angle_1_216
16D9 EA        5080            mov     a,r2
16DA F0        5081            movx    @dptr,a
16DB A3        5082            inc     dptr
16DC EB        5083            mov     a,r3
16DD F0        5084            movx    @dptr,a
16DE A3        5085            inc     dptr
16DF EC        5086            mov     a,r4
16E0 F0        5087            movx    @dptr,a
16E1 A3        5088            inc     dptr
16E2 ED        5089            mov     a,r5
16E3 F0        5090            movx    @dptr,a
16E4           5091   L039004?:
16E4           5092   ;        main.c:1079: return angle; 
16E4 90D0E8    5093            mov     dptr,#_Read_angle_angle_1_216
16E7 E0        5094            movx    a,@dptr
16E8 FA        5095            mov     r2,a
16E9 A3        5096            inc     dptr
16EA E0        5097            movx    a,@dptr
16EB FB        5098            mov     r3,a
16EC A3        5099            inc     dptr
16ED E0        5100            movx    a,@dptr
16EE FC        5101            mov     r4,a
16EF A3        5102            inc     dptr
16F0 E0        5103            movx    a,@dptr
16F1 8A82      5104            mov     dpl,r2
16F3 8B83      5105            mov     dph,r3
16F5 8CF0      5106            mov     b,r4
16F7 22        5107            ret
16F8           5108   ;------------------------------------------------------------
16F8           5109   ;Allocation info for local variables in function 'Auto_mode_slave'
16F8           5110   ;------------------------------------------------------------
16F8           5111   ;sloc0                     Allocated with name '_Auto_mode_slave_sloc0_1_0'
16F8           5112   ;count                     Allocated with name '_Auto_mode_slave_count_1_218'
16F8           5113   ;command                   Allocated with name '_Auto_mode_slave_command_1_218'
16F8           5114   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_218'
16F8           5115   ;bound                     Allocated with name '_Auto_mode_slave_bound_1_218'
16F8           5116   ;c                         Allocated with name '_Auto_mode_slave_c_1_218'
16F8           5117   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_218'
16F8           5118   ;angle                     Allocated with name '_Auto_mode_slave_angle_1_218'
16F8           5119   ;------------------------------------------------------------
16F8           5120   ;        main.c:1082: void Auto_mode_slave(){
16F8           5121   ;        -----------------------------------------
16F8           5122   ;         function Auto_mode_slave
16F8           5123   ;        -----------------------------------------
16F8           5124   _Auto_mode_slave:
16F8           5125   ;        main.c:1085: xdata int state_res = 1;
16F8 90D198    5126            mov     dptr,#_Auto_mode_slave_state_res_1_218
16FB 7401      5127            mov     a,#0x01
16FD F0        5128            movx    @dptr,a
16FE E4        5129            clr     a
16FF A3        5130            inc     dptr
1700 F0        5131            movx    @dptr,a
1701           5132   ;        main.c:1091: curr_angle = Read_angle();
1701 120000    5133            lcall   _Read_angle
1704 AA82      5134            mov     r2,dpl
1706 AB83      5135            mov     r3,dph
1708 ACF0      5136            mov     r4,b
170A FD        5137            mov     r5,a
170B 904D40    5138            mov     dptr,#_curr_angle
170E EA        5139            mov     a,r2
170F F0        5140            movx    @dptr,a
1710 A3        5141            inc     dptr
1711 EB        5142            mov     a,r3
1712 F0        5143            movx    @dptr,a
1713 A3        5144            inc     dptr
1714 EC        5145            mov     a,r4
1715 F0        5146            movx    @dptr,a
1716 A3        5147            inc     dptr
1717 ED        5148            mov     a,r5
1718 F0        5149            movx    @dptr,a
1719           5150   ;        main.c:1093: while(count < 5 && state_res){
1719 E4        5151            clr     a
171A F538      5152            mov     _Auto_mode_slave_sloc0_1_0,a
171C F539      5153            mov     (_Auto_mode_slave_sloc0_1_0 + 1),a
171E           5154   L040018?:
171E C3        5155            clr     c
171F E538      5156            mov     a,_Auto_mode_slave_sloc0_1_0
1721 9405      5157            subb    a,#0x05
1723 E539      5158            mov     a,(_Auto_mode_slave_sloc0_1_0 + 1)
1725 6480      5159            xrl     a,#0x80
1727 9480      5160            subb    a,#0x80
1729 4000      5161            jc      L040046?
172B 020000    5162            ljmp    L040020?
172E           5163   L040046?:
172E 90D198    5164            mov     dptr,#_Auto_mode_slave_state_res_1_218
1731 E0        5165            movx    a,@dptr
1732 FC        5166            mov     r4,a
1733 A3        5167            inc     dptr
1734 E0        5168            movx    a,@dptr
1735 FD        5169            mov     r5,a
1736 4C        5170            orl     a,r4
1737 7000      5171            jnz     L040047?
1739 020000    5172            ljmp    L040020?
173C           5173   L040047?:
173C           5174   ;        main.c:1095: if(RXU1()){
173C C004      5175            push    ar4
173E C005      5176            push    ar5
1740 120000    5177            lcall   _RXU1
1743 D005      5178            pop     ar5
1745 D004      5179            pop     ar4
1747 4000      5180            jc      L040048?
1749 020000    5181            ljmp    L040012?
174C           5182   L040048?:
174C           5183   ;        main.c:1096: c=getchar1();      
174C C004      5184            push    ar4
174E C005      5185            push    ar5
1750 120000    5186            lcall   _getchar1
1753 AE82      5187            mov     r6,dpl
1755 D005      5188            pop     ar5
1757 D004      5189            pop     ar4
1759           5190   ;        main.c:1097: if(c=='!'){
1759 BE2168    5191            cjne    r6,#0x21,L040049?
175C 8000      5192            sjmp    L040050?
175E           5193   L040049?:
175E 020000    5194            ljmp    L040009?
1761           5195   L040050?:
1761           5196   ;        main.c:1098: getstr1(buff, sizeof(buff)-1);
1761 75A013    5197            mov     _getstr1_PARM_2,#0x13
1764 905610    5198            mov     dptr,#_buff
1767 75F040    5199            mov     b,#0x40
176A 120000    5200            lcall   _getstr1
176D           5201   ;        main.c:1099: if(strlen(buff)==11){
176D 905610    5202            mov     dptr,#_buff
1770 75F040    5203            mov     b,#0x40
1773 120000    5204            lcall   _strlen
1776 AF82      5205            mov     r7,dpl
1778 AA83      5206            mov     r2,dph
177A BF0B68    5207            cjne    r7,#0x0B,L040051?
177D BA0068    5208            cjne    r2,#0x00,L040051?
1780 8000      5209            sjmp    L040052?
1782           5210   L040051?:
1782 020000    5211            ljmp    L040012?
1785           5212   L040052?:
1785           5213   ;        main.c:1100: printf("master_messgae_auto_mode: %s\r\n", buff);
1785 7410      5214            mov     a,#_buff
1787 C0E0      5215            push    acc
1789 7456      5216            mov     a,#(_buff >> 8)
178B C0E0      5217            push    acc
178D 7440      5218            mov     a,#0x40
178F C0E0      5219            push    acc
1791 74E8      5220            mov     a,#__str_6
1793 C0E0      5221            push    acc
1795 7415      5222            mov     a,#(__str_6 >> 8)
1797 C0E0      5223            push    acc
1799 7480      5224            mov     a,#0x80
179B C0E0      5225            push    acc
179D 120000    5226            lcall   _printf
17A0 E581      5227            mov     a,sp
17A2 24FA      5228            add     a,#0xfa
17A4 F581      5229            mov     sp,a
17A6           5230   ;        main.c:1101: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
17A6 7438      5231            mov     a,#_Auto_mode_slave_command_1_218
17A8 C0E0      5232            push    acc
17AA 74D1      5233            mov     a,#(_Auto_mode_slave_command_1_218 >> 8)
17AC C0E0      5234            push    acc
17AE E4        5235            clr     a
17AF C0E0      5236            push    acc
17B1 74E8      5237            mov     a,#_Auto_mode_slave_dummy_1_218
17B3 C0E0      5238            push    acc
17B5 74D1      5239            mov     a,#(_Auto_mode_slave_dummy_1_218 >> 8)
17B7 C0E0      5240            push    acc
17B9 E4        5241            clr     a
17BA C0E0      5242            push    acc
17BC 74E8      5243            mov     a,#_Auto_mode_slave_dummy_1_218
17BE C0E0      5244            push    acc
17C0 74D1      5245            mov     a,#(_Auto_mode_slave_dummy_1_218 >> 8)
17C2 C0E0      5246            push    acc
17C4 E4        5247            clr     a
17C5 C0E0      5248            push    acc
17C7 74E8      5249            mov     a,#_Auto_mode_slave_dummy_1_218
17C9 C0E0      5250            push    acc
17CB 74D1      5251            mov     a,#(_Auto_mode_slave_dummy_1_218 >> 8)
17CD C0E0      5252            push    acc
17CF E4        5253            clr     a
17D0 C0E0      5254            push    acc
17D2 7428      5255            mov     a,#__str_7
17D4 C0E0      5256            push    acc
17D6 7416      5257            mov     a,#(__str_7 >> 8)
17D8 C0E0      5258            push    acc
17DA 7480      5259            mov     a,#0x80
17DC C0E0      5260            push    acc
17DE 7410      5261            mov     a,#_buff
17E0 C0E0      5262            push    acc
17E2 7456      5263            mov     a,#(_buff >> 8)
17E4 C0E0      5264            push    acc
17E6 7440      5265            mov     a,#0x40
17E8 C0E0      5266            push    acc
17EA 120000    5267            lcall   _sscanf
17ED E581      5268            mov     a,sp
17EF 24EE      5269            add     a,#0xee
17F1 F581      5270            mov     sp,a
17F3           5271   ;        main.c:1102: if(command) state_res = 1;
17F3 90D138    5272            mov     dptr,#_Auto_mode_slave_command_1_218
17F6 E0        5273            movx    a,@dptr
17F7 FF        5274            mov     r7,a
17F8 A3        5275            inc     dptr
17F9 E0        5276            movx    a,@dptr
17FA FA        5277            mov     r2,a
17FB 4F        5278            orl     a,r7
17FC 6000      5279            jz      L040002?
17FE 90D198    5280            mov     dptr,#_Auto_mode_slave_state_res_1_218
1801 7401      5281            mov     a,#0x01
1803 F0        5282            movx    @dptr,a
1804 E4        5283            clr     a
1805 A3        5284            inc     dptr
1806 F0        5285            movx    @dptr,a
1807 020000    5286            ljmp    L040012?
180A           5287   L040002?:
180A           5288   ;        main.c:1103: else state_res = 0;
180A 90D198    5289            mov     dptr,#_Auto_mode_slave_state_res_1_218
180D E4        5290            clr     a
180E F0        5291            movx    @dptr,a
180F A3        5292            inc     dptr
1810 F0        5293            movx    @dptr,a
1811 8000      5294            sjmp    L040012?
1813           5295   L040009?:
1813           5296   ;        main.c:1106: else if(c=='@'){
1813 BE4028    5297            cjne    r6,#0x40,L040012?
1816           5298   ;        main.c:1107: sprintf(buff, "%01d,%02d,%ld,%05d,%03d\n", state_res, count,freq100, 0, (int)curr_angle);
1816 904D40    5299            mov     dptr,#_curr_angle
1819 E0        5300            movx    a,@dptr
181A FA        5301            mov     r2,a
181B A3        5302            inc     dptr
181C E0        5303            movx    a,@dptr
181D FB        5304            mov     r3,a
181E A3        5305            inc     dptr
181F E0        5306            movx    a,@dptr
1820 FE        5307            mov     r6,a
1821 A3        5308            inc     dptr
1822 E0        5309            movx    a,@dptr
1823 8A82      5310            mov     dpl,r2
1825 8B83      5311            mov     dph,r3
1827 8EF0      5312            mov     b,r6
1829 C004      5313            push    ar4
182B C005      5314            push    ar5
182D 120000    5315            lcall   ___fs2sint
1830 AA82      5316            mov     r2,dpl
1832 AB83      5317            mov     r3,dph
1834 D005      5318            pop     ar5
1836 D004      5319            pop     ar4
1838 C002      5320            push    ar2
183A C003      5321            push    ar3
183C E4        5322            clr     a
183D C0E0      5323            push    acc
183F C0E0      5324            push    acc
1841 9055D0    5325            mov     dptr,#_freq100
1844 E0        5326            movx    a,@dptr
1845 C0E0      5327            push    acc
1847 A3        5328            inc     dptr
1848 E0        5329            movx    a,@dptr
1849 C0E0      5330            push    acc
184B A3        5331            inc     dptr
184C E0        5332            movx    a,@dptr
184D C0E0      5333            push    acc
184F A3        5334            inc     dptr
1850 E0        5335            movx    a,@dptr
1851 C0E0      5336            push    acc
1853 C038      5337            push    _Auto_mode_slave_sloc0_1_0
1855 C039      5338            push    (_Auto_mode_slave_sloc0_1_0 + 1)
1857 C004      5339            push    ar4
1859 C005      5340            push    ar5
185B 74E8      5341            mov     a,#__str_8
185D C0E0      5342            push    acc
185F 7416      5343            mov     a,#(__str_8 >> 8)
1861 C0E0      5344            push    acc
1863 7480      5345            mov     a,#0x80
1865 C0E0      5346            push    acc
1867 7410      5347            mov     a,#_buff
1869 C0E0      5348            push    acc
186B 7456      5349            mov     a,#(_buff >> 8)
186D C0E0      5350            push    acc
186F 7440      5351            mov     a,#0x40
1871 C0E0      5352            push    acc
1873 120000    5353            lcall   _sprintf
1876 E581      5354            mov     a,sp
1878 24EE      5355            add     a,#0xee
187A F581      5356            mov     sp,a
187C           5357   ;        main.c:1108: waitms(5); 
187C 900005    5358            mov     dptr,#0x0005
187F 120000    5359            lcall   _waitms
1882           5360   ;        main.c:1109: sendstr1(buff);
1882 905610    5361            mov     dptr,#_buff
1885 75F040    5362            mov     b,#0x40
1888 120000    5363            lcall   _sendstr1
188B           5364   L040012?:
188B           5365   ;        main.c:1113: Move_forward();
188B 120000    5366            lcall   _Move_forward
188E           5367   ;        main.c:1115: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
188E 758209    5368            mov     dpl,#0x09
1891 120000    5369            lcall   _ADC_at_Pin
1894 E582      5370            mov     a,dpl
1896 8583F0    5371            mov     b,dph
1899 905590    5372            mov     dptr,#_d1
189C F0        5373            movx    @dptr,a
189D A3        5374            inc     dptr
189E E5F0      5375            mov     a,b
18A0 F0        5376            movx    @dptr,a
18A1           5377   ;        main.c:1116: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
18A1 75820A    5378            mov     dpl,#0x0A
18A4 120000    5379            lcall   _ADC_at_Pin
18A7 AA82      5380            mov     r2,dpl
18A9 AB83      5381            mov     r3,dph
18AB 905550    5382            mov     dptr,#_d2
18AE EA        5383            mov     a,r2
18AF F0        5384            movx    @dptr,a
18B0 A3        5385            inc     dptr
18B1 EB        5386            mov     a,r3
18B2 F0        5387            movx    @dptr,a
18B3           5388   ;        main.c:1117: bound = check_bound(d1,d2);
18B3 905590    5389            mov     dptr,#_d1
18B6 E0        5390            movx    a,@dptr
18B7 FC        5391            mov     r4,a
18B8 A3        5392            inc     dptr
18B9 E0        5393            movx    a,@dptr
18BA FD        5394            mov     r5,a
18BB 8A90      5395            mov     _check_bound_PARM_2,r2
18BD 8B91      5396            mov     (_check_bound_PARM_2 + 1),r3
18BF 8C82      5397            mov     dpl,r4
18C1 8D83      5398            mov     dph,r5
18C3 120000    5399            lcall   _check_bound
18C6 AA82      5400            mov     r2,dpl
18C8 AB83      5401            mov     r3,dph
18CA           5402   ;        main.c:1118: printf("f:%04ld, d1:%d, d2:%d, bound_dectect: %d\r\n",freq100, d1,d2,bound);
18CA C002      5403            push    ar2
18CC C003      5404            push    ar3
18CE C002      5405            push    ar2
18D0 C003      5406            push    ar3
18D2 905550    5407            mov     dptr,#_d2
18D5 E0        5408            movx    a,@dptr
18D6 C0E0      5409            push    acc
18D8 A3        5410            inc     dptr
18D9 E0        5411            movx    a,@dptr
18DA C0E0      5412            push    acc
18DC 905590    5413            mov     dptr,#_d1
18DF E0        5414            movx    a,@dptr
18E0 C0E0      5415            push    acc
18E2 A3        5416            inc     dptr
18E3 E0        5417            movx    a,@dptr
18E4 C0E0      5418            push    acc
18E6 9055D0    5419            mov     dptr,#_freq100
18E9 E0        5420            movx    a,@dptr
18EA C0E0      5421            push    acc
18EC A3        5422            inc     dptr
18ED E0        5423            movx    a,@dptr
18EE C0E0      5424            push    acc
18F0 A3        5425            inc     dptr
18F1 E0        5426            movx    a,@dptr
18F2 C0E0      5427            push    acc
18F4 A3        5428            inc     dptr
18F5 E0        5429            movx    a,@dptr
18F6 C0E0      5430            push    acc
18F8 7468      5431            mov     a,#__str_9
18FA C0E0      5432            push    acc
18FC 7417      5433            mov     a,#(__str_9 >> 8)
18FE C0E0      5434            push    acc
1900 7480      5435            mov     a,#0x80
1902 C0E0      5436            push    acc
1904 120000    5437            lcall   _printf
1907 E581      5438            mov     a,sp
1909 24F3      5439            add     a,#0xf3
190B F581      5440            mov     sp,a
190D D003      5441            pop     ar3
190F D002      5442            pop     ar2
1911           5443   ;        main.c:1120: if (freq100>=5360){
1911 9055D0    5444            mov     dptr,#_freq100
1914 E0        5445            movx    a,@dptr
1915 FC        5446            mov     r4,a
1916 A3        5447            inc     dptr
1917 E0        5448            movx    a,@dptr
1918 FD        5449            mov     r5,a
1919 A3        5450            inc     dptr
191A E0        5451            movx    a,@dptr
191B FE        5452            mov     r6,a
191C A3        5453            inc     dptr
191D E0        5454            movx    a,@dptr
191E FF        5455            mov     r7,a
191F C3        5456            clr     c
1920 EC        5457            mov     a,r4
1921 94F0      5458            subb    a,#0xF0
1923 ED        5459            mov     a,r5
1924 9414      5460            subb    a,#0x14
1926 EE        5461            mov     a,r6
1927 9400      5462            subb    a,#0x00
1929 EF        5463            mov     a,r7
192A 6480      5464            xrl     a,#0x80
192C 9480      5465            subb    a,#0x80
192E 4000      5466            jc      L040014?
1930           5467   ;        main.c:1121: mea_yes = 0;
1930 904C40    5468            mov     dptr,#_mea_yes
1933 E4        5469            clr     a
1934 F0        5470            movx    @dptr,a
1935           5471   ;        main.c:1122: Move_back_ms(300);
1935 90012C    5472            mov     dptr,#0x012C
1938 C002      5473            push    ar2
193A C003      5474            push    ar3
193C 120000    5475            lcall   _Move_back_ms
193F           5476   ;        main.c:1123: waitms(100);
193F 900064    5477            mov     dptr,#0x0064
1942 120000    5478            lcall   _waitms
1945           5479   ;        main.c:1124: servo_pick();
1945 120000    5480            lcall   _servo_pick
1948 D003      5481            pop     ar3
194A D002      5482            pop     ar2
194C           5483   ;        main.c:1125: count++;
194C 0538      5484            inc     _Auto_mode_slave_sloc0_1_0
194E E4        5485            clr     a
194F B538E8    5486            cjne    a,_Auto_mode_slave_sloc0_1_0,L040057?
1952 0539      5487            inc     (_Auto_mode_slave_sloc0_1_0 + 1)
1954           5488   L040057?:
1954           5489   ;        main.c:1126: waitms(100);
1954 900064    5490            mov     dptr,#0x0064
1957 C002      5491            push    ar2
1959 C003      5492            push    ar3
195B 120000    5493            lcall   _waitms
195E           5494   ;        main.c:1127: mea_yes = 1;
195E 904C40    5495            mov     dptr,#_mea_yes
1961 7401      5496            mov     a,#0x01
1963 F0        5497            movx    @dptr,a
1964           5498   ;        main.c:1128: Move_forward();
1964 120000    5499            lcall   _Move_forward
1967 D003      5500            pop     ar3
1969 D002      5501            pop     ar2
196B           5502   L040014?:
196B           5503   ;        main.c:1131: if(bound == 1){
196B BA0128    5504            cjne    r2,#0x01,L040058?
196E BB0028    5505            cjne    r3,#0x00,L040058?
1971 8000      5506            sjmp    L040059?
1973           5507   L040058?:
1973 020000    5508            ljmp    L040018?
1976           5509   L040059?:
1976           5510   ;        main.c:1132: Move_back_ms(500);
1976 9001F4    5511            mov     dptr,#0x01F4
1979 120000    5512            lcall   _Move_back_ms
197C           5513   ;        main.c:1133: waitms(100);
197C 900064    5514            mov     dptr,#0x0064
197F 120000    5515            lcall   _waitms
1982           5516   ;        main.c:1134: angle = get_random_90_250();
1982 120000    5517            lcall   _get_random_90_250
1985 858200    5518            mov     __mulint_PARM_2,dpl
1988 858301    5519            mov     (__mulint_PARM_2 + 1),dph
198B           5520   ;        main.c:1135: Right_angle(angle*600/90);
198B 900258    5521            mov     dptr,#0x0258
198E 120000    5522            lcall   __mulint
1991 AA82      5523            mov     r2,dpl
1993 AB83      5524            mov     r3,dph
1995 75005A    5525            mov     __divuint_PARM_2,#0x5A
1998 E4        5526            clr     a
1999 F501      5527            mov     (__divuint_PARM_2 + 1),a
199B 8A82      5528            mov     dpl,r2
199D 8B83      5529            mov     dph,r3
199F 120000    5530            lcall   __divuint
19A2 120000    5531            lcall   _Right_angle
19A5           5532   ;        main.c:1136: curr_angle = Read_angle() * 1.2;
19A5 120000    5533            lcall   _Read_angle
19A8 AA82      5534            mov     r2,dpl
19AA AB83      5535            mov     r3,dph
19AC ACF0      5536            mov     r4,b
19AE FD        5537            mov     r5,a
19AF C002      5538            push    ar2
19B1 C003      5539            push    ar3
19B3 C004      5540            push    ar4
19B5 C005      5541            push    ar5
19B7 90999A    5542            mov     dptr,#0x999A
19BA 75F099    5543            mov     b,#0x99
19BD 743F      5544            mov     a,#0x3F
19BF 120000    5545            lcall   ___fsmul
19C2 AA82      5546            mov     r2,dpl
19C4 AB83      5547            mov     r3,dph
19C6 ACF0      5548            mov     r4,b
19C8 FD        5549            mov     r5,a
19C9 E581      5550            mov     a,sp
19CB 24FC      5551            add     a,#0xfc
19CD F581      5552            mov     sp,a
19CF 904D40    5553            mov     dptr,#_curr_angle
19D2 EA        5554            mov     a,r2
19D3 F0        5555            movx    @dptr,a
19D4 A3        5556            inc     dptr
19D5 EB        5557            mov     a,r3
19D6 F0        5558            movx    @dptr,a
19D7 A3        5559            inc     dptr
19D8 EC        5560            mov     a,r4
19D9 F0        5561            movx    @dptr,a
19DA A3        5562            inc     dptr
19DB ED        5563            mov     a,r5
19DC F0        5564            movx    @dptr,a
19DD 020000    5565            ljmp    L040018?
19E0           5566   L040020?:
19E0           5567   ;        main.c:1139: dummy = 0;
19E0 90D1E8    5568            mov     dptr,#_Auto_mode_slave_dummy_1_218
19E3 E4        5569            clr     a
19E4 F0        5570            movx    @dptr,a
19E5 A3        5571            inc     dptr
19E6 F0        5572            movx    @dptr,a
19E7           5573   ;        main.c:1140: while(1){
19E7           5574   L040028?:
19E7           5575   ;        main.c:1141: if(RXU1()) {
19E7 120000    5576            lcall   _RXU1
19EA 5000      5577            jnc     L040028?
19EC           5578   ;        main.c:1142: c=getchar1();
19EC 120000    5579            lcall   _getchar1
19EF AA82      5580            mov     r2,dpl
19F1           5581   ;        main.c:1143: if(c=='@') // Master wants slave data
19F1 BA4038    5582            cjne    r2,#0x40,L040028?
19F4           5583   ;        main.c:1145: sprintf(buff, "0,00,%04ld,%05d,%03d\n", freq100, weight, (int)curr_angle);
19F4 904D40    5584            mov     dptr,#_curr_angle
19F7 E0        5585            movx    a,@dptr
19F8 FA        5586            mov     r2,a
19F9 A3        5587            inc     dptr
19FA E0        5588            movx    a,@dptr
19FB FB        5589            mov     r3,a
19FC A3        5590            inc     dptr
19FD E0        5591            movx    a,@dptr
19FE FC        5592            mov     r4,a
19FF A3        5593            inc     dptr
1A00 E0        5594            movx    a,@dptr
1A01 8A82      5595            mov     dpl,r2
1A03 8B83      5596            mov     dph,r3
1A05 8CF0      5597            mov     b,r4
1A07 120000    5598            lcall   ___fs2sint
1A0A AA82      5599            mov     r2,dpl
1A0C AB83      5600            mov     r3,dph
1A0E C002      5601            push    ar2
1A10 C003      5602            push    ar3
1A12 904C00    5603            mov     dptr,#_weight
1A15 E0        5604            movx    a,@dptr
1A16 C0E0      5605            push    acc
1A18 A3        5606            inc     dptr
1A19 E0        5607            movx    a,@dptr
1A1A C0E0      5608            push    acc
1A1C 9055D0    5609            mov     dptr,#_freq100
1A1F E0        5610            movx    a,@dptr
1A20 C0E0      5611            push    acc
1A22 A3        5612            inc     dptr
1A23 E0        5613            movx    a,@dptr
1A24 C0E0      5614            push    acc
1A26 A3        5615            inc     dptr
1A27 E0        5616            movx    a,@dptr
1A28 C0E0      5617            push    acc
1A2A A3        5618            inc     dptr
1A2B E0        5619            movx    a,@dptr
1A2C C0E0      5620            push    acc
1A2E 7478      5621            mov     a,#__str_10
1A30 C0E0      5622            push    acc
1A32 7419      5623            mov     a,#(__str_10 >> 8)
1A34 C0E0      5624            push    acc
1A36 7480      5625            mov     a,#0x80
1A38 C0E0      5626            push    acc
1A3A 7410      5627            mov     a,#_buff
1A3C C0E0      5628            push    acc
1A3E 7456      5629            mov     a,#(_buff >> 8)
1A40 C0E0      5630            push    acc
1A42 7440      5631            mov     a,#0x40
1A44 C0E0      5632            push    acc
1A46 120000    5633            lcall   _sprintf
1A49 E581      5634            mov     a,sp
1A4B 24F2      5635            add     a,#0xf2
1A4D F581      5636            mov     sp,a
1A4F           5637   ;        main.c:1146: dummy++;
1A4F 90D1E8    5638            mov     dptr,#_Auto_mode_slave_dummy_1_218
1A52 7401      5639            mov     a,#0x01
1A54 F0        5640            movx    @dptr,a
1A55 E4        5641            clr     a
1A56 A3        5642            inc     dptr
1A57 F0        5643            movx    @dptr,a
1A58           5644   ;        main.c:1147: waitms(5); 
1A58 900005    5645            mov     dptr,#0x0005
1A5B 120000    5646            lcall   _waitms
1A5E           5647   ;        main.c:1148: sendstr1(buff);
1A5E 905610    5648            mov     dptr,#_buff
1A61 75F040    5649            mov     b,#0x40
1A64 120000    5650            lcall   _sendstr1
1A67           5651   ;        main.c:1149: if(dummy = 30) break;
1A67 90D1E8    5652            mov     dptr,#_Auto_mode_slave_dummy_1_218
1A6A 741E      5653            mov     a,#0x1E
1A6C F0        5654            movx    @dptr,a
1A6D E4        5655            clr     a
1A6E A3        5656            inc     dptr
1A6F F0        5657            movx    @dptr,a
1A70 22        5658            ret
1A71           5659   ;------------------------------------------------------------
1A71           5660   ;Allocation info for local variables in function 'Joystick_Control'
1A71           5661   ;------------------------------------------------------------
1A71           5662   ;vy_ptr                    Allocated with name '_Joystick_Control_PARM_2'
1A71           5663   ;vx_ptr                    Allocated to registers r2 r3 r4 
1A71           5664   ;sloc0                     Allocated with name '_Joystick_Control_sloc0_1_0'
1A71           5665   ;sloc1                     Allocated with name '_Joystick_Control_sloc1_1_0'
1A71           5666   ;sloc2                     Allocated with name '_Joystick_Control_sloc2_1_0'
1A71           5667   ;sloc3                     Allocated with name '_Joystick_Control_sloc3_1_0'
1A71           5668   ;sloc4                     Allocated with name '_Joystick_Control_sloc4_1_0'
1A71           5669   ;sloc5                     Allocated with name '_Joystick_Control_sloc5_1_0'
1A71           5670   ;vx                        Allocated with name '_Joystick_Control_vx_1_230'
1A71           5671   ;vy                        Allocated with name '_Joystick_Control_vy_1_230'
1A71           5672   ;vx_error                  Allocated with name '_Joystick_Control_vx_error_1_230'
1A71           5673   ;vy_error                  Allocated with name '_Joystick_Control_vy_error_1_230'
1A71           5674   ;vx_err                    Allocated with name '_Joystick_Control_vx_err_1_230'
1A71           5675   ;vy_err                    Allocated with name '_Joystick_Control_vy_err_1_230'
1A71           5676   ;------------------------------------------------------------
1A71           5677   ;        main.c:1155: float Joystick_Control(int *vx_ptr, int *vy_ptr)
1A71           5678   ;        -----------------------------------------
1A71           5679   ;         function Joystick_Control
1A71           5680   ;        -----------------------------------------
1A71           5681   _Joystick_Control:
1A71           5682   ;        main.c:1159: vx = *vx_ptr; 
1A71 120000    5683            lcall   __gptrget
1A74 FA        5684            mov     r2,a
1A75 A3        5685            inc     dptr
1A76 120000    5686            lcall   __gptrget
1A79 FB        5687            mov     r3,a
1A7A           5688   ;        main.c:1160: vy = *vy_ptr; 
1A7A AC60      5689            mov     r4,_Joystick_Control_PARM_2
1A7C AD61      5690            mov     r5,(_Joystick_Control_PARM_2 + 1)
1A7E AE62      5691            mov     r6,(_Joystick_Control_PARM_2 + 2)
1A80 8C82      5692            mov     dpl,r4
1A82 8D83      5693            mov     dph,r5
1A84 8EF0      5694            mov     b,r6
1A86 120000    5695            lcall   __gptrget
1A89 FC        5696            mov     r4,a
1A8A A3        5697            inc     dptr
1A8B 120000    5698            lcall   __gptrget
1A8E FD        5699            mov     r5,a
1A8F           5700   ;        main.c:1163: raw_angle = Read_angle();
1A8F C002      5701            push    ar2
1A91 C003      5702            push    ar3
1A93 C004      5703            push    ar4
1A95 C005      5704            push    ar5
1A97 120000    5705            lcall   _Read_angle
1A9A AE82      5706            mov     r6,dpl
1A9C AF83      5707            mov     r7,dph
1A9E A8F0      5708            mov     r0,b
1AA0 F9        5709            mov     r1,a
1AA1 D005      5710            pop     ar5
1AA3 D004      5711            pop     ar4
1AA5 D003      5712            pop     ar3
1AA7 D002      5713            pop     ar2
1AA9 904D00    5714            mov     dptr,#_raw_angle
1AAC EE        5715            mov     a,r6
1AAD F0        5716            movx    @dptr,a
1AAE A3        5717            inc     dptr
1AAF EF        5718            mov     a,r7
1AB0 F0        5719            movx    @dptr,a
1AB1 A3        5720            inc     dptr
1AB2 E8        5721            mov     a,r0
1AB3 F0        5722            movx    @dptr,a
1AB4 A3        5723            inc     dptr
1AB5 E9        5724            mov     a,r1
1AB6 F0        5725            movx    @dptr,a
1AB7           5726   ;        main.c:1166: vx_error = abs(vx-vx_thres)*100/vx_thres; 
1AB7 904F50    5727            mov     dptr,#_vx_thres
1ABA E0        5728            movx    a,@dptr
1ABB FE        5729            mov     r6,a
1ABC A3        5730            inc     dptr
1ABD E0        5731            movx    a,@dptr
1ABE FF        5732            mov     r7,a
1ABF EA        5733            mov     a,r2
1AC0 C3        5734            clr     c
1AC1 9E        5735            subb    a,r6
1AC2 F582      5736            mov     dpl,a
1AC4 EB        5737            mov     a,r3
1AC5 9F        5738            subb    a,r7
1AC6 F583      5739            mov     dph,a
1AC8 C002      5740            push    ar2
1ACA C003      5741            push    ar3
1ACC C004      5742            push    ar4
1ACE C005      5743            push    ar5
1AD0 120000    5744            lcall   _abs
1AD3 858200    5745            mov     __mulint_PARM_2,dpl
1AD6 858301    5746            mov     (__mulint_PARM_2 + 1),dph
1AD9 900064    5747            mov     dptr,#0x0064
1ADC 120000    5748            lcall   __mulint
1ADF AE82      5749            mov     r6,dpl
1AE1 AF83      5750            mov     r7,dph
1AE3 904F50    5751            mov     dptr,#_vx_thres
1AE6 E0        5752            movx    a,@dptr
1AE7 F500      5753            mov     __divsint_PARM_2,a
1AE9 A3        5754            inc     dptr
1AEA E0        5755            movx    a,@dptr
1AEB F501      5756            mov     (__divsint_PARM_2 + 1),a
1AED 8E82      5757            mov     dpl,r6
1AEF 8F83      5758            mov     dph,r7
1AF1 120000    5759            lcall   __divsint
1AF4 E582      5760            mov     a,dpl
1AF6 8583F0    5761            mov     b,dph
1AF9 D005      5762            pop     ar5
1AFB D004      5763            pop     ar4
1AFD 90D248    5764            mov     dptr,#_Joystick_Control_vx_error_1_230
1B00 F0        5765            movx    @dptr,a
1B01 A3        5766            inc     dptr
1B02 E5F0      5767            mov     a,b
1B04 F0        5768            movx    @dptr,a
1B05           5769   ;        main.c:1167: vy_error = abs(vy-vy_thres)*100/vy_thres; 
1B05 904F10    5770            mov     dptr,#_vy_thres
1B08 E0        5771            movx    a,@dptr
1B09 FE        5772            mov     r6,a
1B0A A3        5773            inc     dptr
1B0B E0        5774            movx    a,@dptr
1B0C FF        5775            mov     r7,a
1B0D EC        5776            mov     a,r4
1B0E C3        5777            clr     c
1B0F 9E        5778            subb    a,r6
1B10 F582      5779            mov     dpl,a
1B12 ED        5780            mov     a,r5
1B13 9F        5781            subb    a,r7
1B14 F583      5782            mov     dph,a
1B16 C004      5783            push    ar4
1B18 C005      5784            push    ar5
1B1A 120000    5785            lcall   _abs
1B1D 858200    5786            mov     __mulint_PARM_2,dpl
1B20 858301    5787            mov     (__mulint_PARM_2 + 1),dph
1B23 900064    5788            mov     dptr,#0x0064
1B26 120000    5789            lcall   __mulint
1B29 AE82      5790            mov     r6,dpl
1B2B AF83      5791            mov     r7,dph
1B2D 904F10    5792            mov     dptr,#_vy_thres
1B30 E0        5793            movx    a,@dptr
1B31 F588      5794            mov     _Joystick_Control_sloc0_1_0,a
1B33 A3        5795            inc     dptr
1B34 E0        5796            movx    a,@dptr
1B35 F589      5797            mov     (_Joystick_Control_sloc0_1_0 + 1),a
1B37 858800    5798            mov     __divsint_PARM_2,_Joystick_Control_sloc0_1_0
1B3A 858901    5799            mov     (__divsint_PARM_2 + 1),(_Joystick_Control_sloc0_1_0 + 1)
1B3D 8E82      5800            mov     dpl,r6
1B3F 8F83      5801            mov     dph,r7
1B41 120000    5802            lcall   __divsint
1B44 AE82      5803            mov     r6,dpl
1B46 AF83      5804            mov     r7,dph
1B48 D005      5805            pop     ar5
1B4A D004      5806            pop     ar4
1B4C D003      5807            pop     ar3
1B4E D002      5808            pop     ar2
1B50 90D2A8    5809            mov     dptr,#_Joystick_Control_vy_error_1_230
1B53 EE        5810            mov     a,r6
1B54 F0        5811            movx    @dptr,a
1B55 A3        5812            inc     dptr
1B56 EF        5813            mov     a,r7
1B57 F0        5814            movx    @dptr,a
1B58           5815   ;        main.c:1168: vx_err = vx-vx_thres; 
1B58 904F50    5816            mov     dptr,#_vx_thres
1B5B E0        5817            movx    a,@dptr
1B5C F8        5818            mov     r0,a
1B5D A3        5819            inc     dptr
1B5E E0        5820            movx    a,@dptr
1B5F F9        5821            mov     r1,a
1B60 EA        5822            mov     a,r2
1B61 C3        5823            clr     c
1B62 98        5824            subb    a,r0
1B63 FA        5825            mov     r2,a
1B64 EB        5826            mov     a,r3
1B65 99        5827            subb    a,r1
1B66 FB        5828            mov     r3,a
1B67 90D2F8    5829            mov     dptr,#_Joystick_Control_vx_err_1_230
1B6A EA        5830            mov     a,r2
1B6B F0        5831            movx    @dptr,a
1B6C A3        5832            inc     dptr
1B6D EB        5833            mov     a,r3
1B6E F0        5834            movx    @dptr,a
1B6F           5835   ;        main.c:1169: vy_err = vy-vy_thres; 
1B6F EC        5836            mov     a,r4
1B70 C3        5837            clr     c
1B71 9588      5838            subb    a,_Joystick_Control_sloc0_1_0
1B73 F5D8      5839            mov     _Joystick_Control_sloc1_1_0,a
1B75 ED        5840            mov     a,r5
1B76 9589      5841            subb    a,(_Joystick_Control_sloc0_1_0 + 1)
1B78 F5D9      5842            mov     (_Joystick_Control_sloc1_1_0 + 1),a
1B7A 90D348    5843            mov     dptr,#_Joystick_Control_vy_err_1_230
1B7D E5D8      5844            mov     a,_Joystick_Control_sloc1_1_0
1B7F F0        5845            movx    @dptr,a
1B80 A3        5846            inc     dptr
1B81 E5D9      5847            mov     a,(_Joystick_Control_sloc1_1_0 + 1)
1B83 F0        5848            movx    @dptr,a
1B84           5849   ;        main.c:1170: pwm_left = 0; 
1B84 9050D0    5850            mov     dptr,#_pwm_left
1B87           5851   ;        main.c:1171: pwm_right = 0; 
1B87 E4        5852            clr     a
1B88 F0        5853            movx    @dptr,a
1B89 905090    5854            mov     dptr,#_pwm_right
1B8C F0        5855            movx    @dptr,a
1B8D           5856   ;        main.c:1173: if ((vy_error>5) && (vx_error<5)){
1B8D C3        5857            clr     c
1B8E 7405      5858            mov     a,#0x05
1B90 9E        5859            subb    a,r6
1B91 E4        5860            clr     a
1B92 6480      5861            xrl     a,#0x80
1B94 8FF0      5862            mov     b,r7
1B96 63F080    5863            xrl     b,#0x80
1B99 95F0      5864            subb    a,b
1B9B E4        5865            clr     a
1B9C 33        5866            rlc     a
1B9D F588      5867            mov     _Joystick_Control_sloc0_1_0,a
1B9F 7000      5868            jnz     L041062?
1BA1 020000    5869            ljmp    L041005?
1BA4           5870   L041062?:
1BA4 90D248    5871            mov     dptr,#_Joystick_Control_vx_error_1_230
1BA7 E0        5872            movx    a,@dptr
1BA8 F8        5873            mov     r0,a
1BA9 A3        5874            inc     dptr
1BAA E0        5875            movx    a,@dptr
1BAB F9        5876            mov     r1,a
1BAC C3        5877            clr     c
1BAD E8        5878            mov     a,r0
1BAE 9405      5879            subb    a,#0x05
1BB0 E9        5880            mov     a,r1
1BB1 6480      5881            xrl     a,#0x80
1BB3 9480      5882            subb    a,#0x80
1BB5 4000      5883            jc      L041063?
1BB7 020000    5884            ljmp    L041005?
1BBA           5885   L041063?:
1BBA           5886   ;        main.c:1174: pwm_left = vy_error; 
1BBA C002      5887            push    ar2
1BBC C003      5888            push    ar3
1BBE 9050D0    5889            mov     dptr,#_pwm_left
1BC1 EE        5890            mov     a,r6
1BC2 F0        5891            movx    @dptr,a
1BC3           5892   ;        main.c:1175: pwm_right = vy_error * pwm_corr; 
1BC3 8E82      5893            mov     dpl,r6
1BC5 8F83      5894            mov     dph,r7
1BC7 C004      5895            push    ar4
1BC9 C005      5896            push    ar5
1BCB C006      5897            push    ar6
1BCD C007      5898            push    ar7
1BCF 120000    5899            lcall   ___sint2fs
1BD2 AA82      5900            mov     r2,dpl
1BD4 AB83      5901            mov     r3,dph
1BD6 A8F0      5902            mov     r0,b
1BD8 F9        5903            mov     r1,a
1BD9 904D80    5904            mov     dptr,#_pwm_corr
1BDC E0        5905            movx    a,@dptr
1BDD C0E0      5906            push    acc
1BDF A3        5907            inc     dptr
1BE0 E0        5908            movx    a,@dptr
1BE1 C0E0      5909            push    acc
1BE3 A3        5910            inc     dptr
1BE4 E0        5911            movx    a,@dptr
1BE5 C0E0      5912            push    acc
1BE7 A3        5913            inc     dptr
1BE8 E0        5914            movx    a,@dptr
1BE9 C0E0      5915            push    acc
1BEB 8A82      5916            mov     dpl,r2
1BED 8B83      5917            mov     dph,r3
1BEF 88F0      5918            mov     b,r0
1BF1 E9        5919            mov     a,r1
1BF2 120000    5920            lcall   ___fsmul
1BF5 AA82      5921            mov     r2,dpl
1BF7 AB83      5922            mov     r3,dph
1BF9 A8F0      5923            mov     r0,b
1BFB F9        5924            mov     r1,a
1BFC E581      5925            mov     a,sp
1BFE 24FC      5926            add     a,#0xfc
1C00 F581      5927            mov     sp,a
1C02 D007      5928            pop     ar7
1C04 D006      5929            pop     ar6
1C06 D005      5930            pop     ar5
1C08 D004      5931            pop     ar4
1C0A 8A82      5932            mov     dpl,r2
1C0C 8B83      5933            mov     dph,r3
1C0E 88F0      5934            mov     b,r0
1C10 E9        5935            mov     a,r1
1C11 C002      5936            push    ar2
1C13 C003      5937            push    ar3
1C15 C004      5938            push    ar4
1C17 C005      5939            push    ar5
1C19 C006      5940            push    ar6
1C1B C007      5941            push    ar7
1C1D 120000    5942            lcall   ___fs2uchar
1C20 858228    5943            mov     _Joystick_Control_sloc2_1_0,dpl
1C23 D007      5944            pop     ar7
1C25 D006      5945            pop     ar6
1C27 D005      5946            pop     ar5
1C29 D004      5947            pop     ar4
1C2B D003      5948            pop     ar3
1C2D D002      5949            pop     ar2
1C2F 905090    5950            mov     dptr,#_pwm_right
1C32 E528      5951            mov     a,_Joystick_Control_sloc2_1_0
1C34 F0        5952            movx    @dptr,a
1C35           5953   ;        main.c:1176: if (vy_err > 0){ //move forward
1C35 C3        5954            clr     c
1C36 E4        5955            clr     a
1C37 95D8      5956            subb    a,_Joystick_Control_sloc1_1_0
1C39 E4        5957            clr     a
1C3A 6480      5958            xrl     a,#0x80
1C3C 85D9F0    5959            mov     b,(_Joystick_Control_sloc1_1_0 + 1)
1C3F 63F080    5960            xrl     b,#0x80
1C42 95F0      5961            subb    a,b
1C44 D003      5962            pop     ar3
1C46 D002      5963            pop     ar2
1C48 5000      5964            jnc     L041002?
1C4A           5965   ;        main.c:1177: L_motor_dir = 0; 
1C4A 905050    5966            mov     dptr,#_L_motor_dir
1C4D           5967   ;        main.c:1178: R_motor_dir = 0; 
1C4D E4        5968            clr     a
1C4E F0        5969            movx    @dptr,a
1C4F 905010    5970            mov     dptr,#_R_motor_dir
1C52 F0        5971            movx    @dptr,a
1C53 8000      5972            sjmp    L041005?
1C55           5973   L041002?:
1C55           5974   ;        main.c:1181: L_motor_dir = 1; 
1C55 C002      5975            push    ar2
1C57 C003      5976            push    ar3
1C59 905050    5977            mov     dptr,#_L_motor_dir
1C5C 7401      5978            mov     a,#0x01
1C5E F0        5979            movx    @dptr,a
1C5F           5980   ;        main.c:1182: R_motor_dir = 1; 
1C5F 905010    5981            mov     dptr,#_R_motor_dir
1C62 7401      5982            mov     a,#0x01
1C64 F0        5983            movx    @dptr,a
1C65           5984   ;        main.c:1183: pwm_right *= 1.05;
1C65 852882    5985            mov     dpl,_Joystick_Control_sloc2_1_0
1C68 C004      5986            push    ar4
1C6A C005      5987            push    ar5
1C6C C006      5988            push    ar6
1C6E C007      5989            push    ar7
1C70 120000    5990            lcall   ___uchar2fs
1C73 A882      5991            mov     r0,dpl
1C75 A983      5992            mov     r1,dph
1C77 AAF0      5993            mov     r2,b
1C79 FB        5994            mov     r3,a
1C7A C000      5995            push    ar0
1C7C C001      5996            push    ar1
1C7E C002      5997            push    ar2
1C80 C003      5998            push    ar3
1C82 906666    5999            mov     dptr,#0x6666
1C85 75F086    6000            mov     b,#0x86
1C88 743F      6001            mov     a,#0x3F
1C8A 120000    6002            lcall   ___fsmul
1C8D AA82      6003            mov     r2,dpl
1C8F AB83      6004            mov     r3,dph
1C91 A8F0      6005            mov     r0,b
1C93 F9        6006            mov     r1,a
1C94 E581      6007            mov     a,sp
1C96 24FC      6008            add     a,#0xfc
1C98 F581      6009            mov     sp,a
1C9A D007      6010            pop     ar7
1C9C D006      6011            pop     ar6
1C9E D005      6012            pop     ar5
1CA0 D004      6013            pop     ar4
1CA2 8A82      6014            mov     dpl,r2
1CA4 8B83      6015            mov     dph,r3
1CA6 88F0      6016            mov     b,r0
1CA8 E9        6017            mov     a,r1
1CA9 C002      6018            push    ar2
1CAB C003      6019            push    ar3
1CAD C004      6020            push    ar4
1CAF C005      6021            push    ar5
1CB1 C006      6022            push    ar6
1CB3 C007      6023            push    ar7
1CB5 120000    6024            lcall   ___fs2uchar
1CB8 E582      6025            mov     a,dpl
1CBA D007      6026            pop     ar7
1CBC D006      6027            pop     ar6
1CBE D005      6028            pop     ar5
1CC0 D004      6029            pop     ar4
1CC2 D003      6030            pop     ar3
1CC4 D002      6031            pop     ar2
1CC6 905090    6032            mov     dptr,#_pwm_right
1CC9 F0        6033            movx    @dptr,a
1CCA           6034   ;        main.c:1266: return curr_angle; 
1CCA D003      6035            pop     ar3
1CCC D002      6036            pop     ar2
1CCE           6037   ;        main.c:1183: pwm_right *= 1.05;
1CCE           6038   L041005?:
1CCE           6039   ;        main.c:1186: if ((vx_error>5)&&(vy_error<5)){
1CCE 90D248    6040            mov     dptr,#_Joystick_Control_vx_error_1_230
1CD1 E0        6041            movx    a,@dptr
1CD2 F8        6042            mov     r0,a
1CD3 A3        6043            inc     dptr
1CD4 E0        6044            movx    a,@dptr
1CD5 F9        6045            mov     r1,a
1CD6 C3        6046            clr     c
1CD7 7405      6047            mov     a,#0x05
1CD9 98        6048            subb    a,r0
1CDA E4        6049            clr     a
1CDB 6480      6050            xrl     a,#0x80
1CDD 89F0      6051            mov     b,r1
1CDF 63F080    6052            xrl     b,#0x80
1CE2 95F0      6053            subb    a,b
1CE4 E4        6054            clr     a
1CE5 33        6055            rlc     a
1CE6 F528      6056            mov     _Joystick_Control_sloc2_1_0,a
1CE8 7000      6057            jnz     L041065?
1CEA 020000    6058            ljmp    L041015?
1CED           6059   L041065?:
1CED C3        6060            clr     c
1CEE EE        6061            mov     a,r6
1CEF 9405      6062            subb    a,#0x05
1CF1 EF        6063            mov     a,r7
1CF2 6480      6064            xrl     a,#0x80
1CF4 9480      6065            subb    a,#0x80
1CF6 4000      6066            jc      L041066?
1CF8 020000    6067            ljmp    L041015?
1CFB           6068   L041066?:
1CFB           6069   ;        main.c:1187: pwm_left = vx_error; 
1CFB C004      6070            push    ar4
1CFD C005      6071            push    ar5
1CFF 9050D0    6072            mov     dptr,#_pwm_left
1D02 E8        6073            mov     a,r0
1D03 F0        6074            movx    @dptr,a
1D04           6075   ;        main.c:1188: pwm_right = vx_error * pwm_corr; 
1D04 8882      6076            mov     dpl,r0
1D06 8983      6077            mov     dph,r1
1D08 C002      6078            push    ar2
1D0A C003      6079            push    ar3
1D0C C000      6080            push    ar0
1D0E C001      6081            push    ar1
1D10 120000    6082            lcall   ___sint2fs
1D13 AE82      6083            mov     r6,dpl
1D15 AF83      6084            mov     r7,dph
1D17 ACF0      6085            mov     r4,b
1D19 FD        6086            mov     r5,a
1D1A 904D80    6087            mov     dptr,#_pwm_corr
1D1D E0        6088            movx    a,@dptr
1D1E C0E0      6089            push    acc
1D20 A3        6090            inc     dptr
1D21 E0        6091            movx    a,@dptr
1D22 C0E0      6092            push    acc
1D24 A3        6093            inc     dptr
1D25 E0        6094            movx    a,@dptr
1D26 C0E0      6095            push    acc
1D28 A3        6096            inc     dptr
1D29 E0        6097            movx    a,@dptr
1D2A C0E0      6098            push    acc
1D2C 8E82      6099            mov     dpl,r6
1D2E 8F83      6100            mov     dph,r7
1D30 8CF0      6101            mov     b,r4
1D32 ED        6102            mov     a,r5
1D33 120000    6103            lcall   ___fsmul
1D36 AC82      6104            mov     r4,dpl
1D38 AD83      6105            mov     r5,dph
1D3A AEF0      6106            mov     r6,b
1D3C FF        6107            mov     r7,a
1D3D E581      6108            mov     a,sp
1D3F 24FC      6109            add     a,#0xfc
1D41 F581      6110            mov     sp,a
1D43 D001      6111            pop     ar1
1D45 D000      6112            pop     ar0
1D47 8C82      6113            mov     dpl,r4
1D49 8D83      6114            mov     dph,r5
1D4B 8EF0      6115            mov     b,r6
1D4D EF        6116            mov     a,r7
1D4E C004      6117            push    ar4
1D50 C005      6118            push    ar5
1D52 C000      6119            push    ar0
1D54 C001      6120            push    ar1
1D56 120000    6121            lcall   ___fs2uchar
1D59 E582      6122            mov     a,dpl
1D5B D001      6123            pop     ar1
1D5D D000      6124            pop     ar0
1D5F D005      6125            pop     ar5
1D61 D004      6126            pop     ar4
1D63 D003      6127            pop     ar3
1D65 D002      6128            pop     ar2
1D67 905090    6129            mov     dptr,#_pwm_right
1D6A F0        6130            movx    @dptr,a
1D6B           6131   ;        main.c:1189: if (vx_err > 0){ //turn right
1D6B C3        6132            clr     c
1D6C E4        6133            clr     a
1D6D 9A        6134            subb    a,r2
1D6E E4        6135            clr     a
1D6F 6480      6136            xrl     a,#0x80
1D71 8BF0      6137            mov     b,r3
1D73 63F080    6138            xrl     b,#0x80
1D76 95F0      6139            subb    a,b
1D78 D005      6140            pop     ar5
1D7A D004      6141            pop     ar4
1D7C 4000      6142            jc      L041067?
1D7E 020000    6143            ljmp    L041008?
1D81           6144   L041067?:
1D81           6145   ;        main.c:1190: L_motor_dir = 1; 
1D81 C004      6146            push    ar4
1D83 C005      6147            push    ar5
1D85 905050    6148            mov     dptr,#_L_motor_dir
1D88 7401      6149            mov     a,#0x01
1D8A F0        6150            movx    @dptr,a
1D8B           6151   ;        main.c:1191: R_motor_dir = 0;
1D8B 905010    6152            mov     dptr,#_R_motor_dir
1D8E E4        6153            clr     a
1D8F F0        6154            movx    @dptr,a
1D90           6155   ;        main.c:1192: curr_angle += angle_diff * 1.45; // TUNE THIS
1D90 C004      6156            push    ar4
1D92 C005      6157            push    ar5
1D94 C000      6158            push    ar0
1D96 C001      6159            push    ar1
1D98 904C80    6160            mov     dptr,#_angle_diff
1D9B E0        6161            movx    a,@dptr
1D9C C0E0      6162            push    acc
1D9E A3        6163            inc     dptr
1D9F E0        6164            movx    a,@dptr
1DA0 C0E0      6165            push    acc
1DA2 A3        6166            inc     dptr
1DA3 E0        6167            movx    a,@dptr
1DA4 C0E0      6168            push    acc
1DA6 A3        6169            inc     dptr
1DA7 E0        6170            movx    a,@dptr
1DA8 C0E0      6171            push    acc
1DAA 90999A    6172            mov     dptr,#0x999A
1DAD 75F0B9    6173            mov     b,#0xB9
1DB0 743F      6174            mov     a,#0x3F
1DB2 120000    6175            lcall   ___fsmul
1DB5 858278    6176            mov     _Joystick_Control_sloc3_1_0,dpl
1DB8 858379    6177            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
1DBB 85F07A    6178            mov     (_Joystick_Control_sloc3_1_0 + 2),b
1DBE F57B      6179            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1DC0 E581      6180            mov     a,sp
1DC2 24FC      6181            add     a,#0xfc
1DC4 F581      6182            mov     sp,a
1DC6 D001      6183            pop     ar1
1DC8 D000      6184            pop     ar0
1DCA D005      6185            pop     ar5
1DCC D004      6186            pop     ar4
1DCE 904D40    6187            mov     dptr,#_curr_angle
1DD1 E0        6188            movx    a,@dptr
1DD2 FC        6189            mov     r4,a
1DD3 A3        6190            inc     dptr
1DD4 E0        6191            movx    a,@dptr
1DD5 FD        6192            mov     r5,a
1DD6 A3        6193            inc     dptr
1DD7 E0        6194            movx    a,@dptr
1DD8 FA        6195            mov     r2,a
1DD9 A3        6196            inc     dptr
1DDA E0        6197            movx    a,@dptr
1DDB FB        6198            mov     r3,a
1DDC C000      6199            push    ar0
1DDE C001      6200            push    ar1
1DE0 C078      6201            push    _Joystick_Control_sloc3_1_0
1DE2 C079      6202            push    (_Joystick_Control_sloc3_1_0 + 1)
1DE4 C07A      6203            push    (_Joystick_Control_sloc3_1_0 + 2)
1DE6 C07B      6204            push    (_Joystick_Control_sloc3_1_0 + 3)
1DE8 8C82      6205            mov     dpl,r4
1DEA 8D83      6206            mov     dph,r5
1DEC 8AF0      6207            mov     b,r2
1DEE EB        6208            mov     a,r3
1DEF 120000    6209            lcall   ___fsadd
1DF2 AA82      6210            mov     r2,dpl
1DF4 AB83      6211            mov     r3,dph
1DF6 ACF0      6212            mov     r4,b
1DF8 FD        6213            mov     r5,a
1DF9 E581      6214            mov     a,sp
1DFB 24FC      6215            add     a,#0xfc
1DFD F581      6216            mov     sp,a
1DFF D001      6217            pop     ar1
1E01 D000      6218            pop     ar0
1E03 904D40    6219            mov     dptr,#_curr_angle
1E06 EA        6220            mov     a,r2
1E07 F0        6221            movx    @dptr,a
1E08 A3        6222            inc     dptr
1E09 EB        6223            mov     a,r3
1E0A F0        6224            movx    @dptr,a
1E0B A3        6225            inc     dptr
1E0C EC        6226            mov     a,r4
1E0D F0        6227            movx    @dptr,a
1E0E A3        6228            inc     dptr
1E0F ED        6229            mov     a,r5
1E10 F0        6230            movx    @dptr,a
1E11 D005      6231            pop     ar5
1E13 D004      6232            pop     ar4
1E15 020000    6233            ljmp    L041009?
1E18           6234   L041008?:
1E18           6235   ;        main.c:1195: L_motor_dir = 0; 
1E18 C004      6236            push    ar4
1E1A C005      6237            push    ar5
1E1C 905050    6238            mov     dptr,#_L_motor_dir
1E1F E4        6239            clr     a
1E20 F0        6240            movx    @dptr,a
1E21           6241   ;        main.c:1196: R_motor_dir = 1; 
1E21 905010    6242            mov     dptr,#_R_motor_dir
1E24 7401      6243            mov     a,#0x01
1E26 F0        6244            movx    @dptr,a
1E27           6245   ;        main.c:1197: curr_angle -= angle_diff * 1.4; // TUNE THIS
1E27 C004      6246            push    ar4
1E29 C005      6247            push    ar5
1E2B C000      6248            push    ar0
1E2D C001      6249            push    ar1
1E2F 904C80    6250            mov     dptr,#_angle_diff
1E32 E0        6251            movx    a,@dptr
1E33 C0E0      6252            push    acc
1E35 A3        6253            inc     dptr
1E36 E0        6254            movx    a,@dptr
1E37 C0E0      6255            push    acc
1E39 A3        6256            inc     dptr
1E3A E0        6257            movx    a,@dptr
1E3B C0E0      6258            push    acc
1E3D A3        6259            inc     dptr
1E3E E0        6260            movx    a,@dptr
1E3F C0E0      6261            push    acc
1E41 903333    6262            mov     dptr,#0x3333
1E44 75F0B3    6263            mov     b,#0xB3
1E47 743F      6264            mov     a,#0x3F
1E49 120000    6265            lcall   ___fsmul
1E4C 858278    6266            mov     _Joystick_Control_sloc3_1_0,dpl
1E4F 858379    6267            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
1E52 85F07A    6268            mov     (_Joystick_Control_sloc3_1_0 + 2),b
1E55 F57B      6269            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1E57 E581      6270            mov     a,sp
1E59 24FC      6271            add     a,#0xfc
1E5B F581      6272            mov     sp,a
1E5D D001      6273            pop     ar1
1E5F D000      6274            pop     ar0
1E61 D005      6275            pop     ar5
1E63 D004      6276            pop     ar4
1E65 904D40    6277            mov     dptr,#_curr_angle
1E68 E0        6278            movx    a,@dptr
1E69 FC        6279            mov     r4,a
1E6A A3        6280            inc     dptr
1E6B E0        6281            movx    a,@dptr
1E6C FD        6282            mov     r5,a
1E6D A3        6283            inc     dptr
1E6E E0        6284            movx    a,@dptr
1E6F FA        6285            mov     r2,a
1E70 A3        6286            inc     dptr
1E71 E0        6287            movx    a,@dptr
1E72 FB        6288            mov     r3,a
1E73 C000      6289            push    ar0
1E75 C001      6290            push    ar1
1E77 C078      6291            push    _Joystick_Control_sloc3_1_0
1E79 C079      6292            push    (_Joystick_Control_sloc3_1_0 + 1)
1E7B C07A      6293            push    (_Joystick_Control_sloc3_1_0 + 2)
1E7D C07B      6294            push    (_Joystick_Control_sloc3_1_0 + 3)
1E7F 8C82      6295            mov     dpl,r4
1E81 8D83      6296            mov     dph,r5
1E83 8AF0      6297            mov     b,r2
1E85 EB        6298            mov     a,r3
1E86 120000    6299            lcall   ___fssub
1E89 AA82      6300            mov     r2,dpl
1E8B AB83      6301            mov     r3,dph
1E8D ACF0      6302            mov     r4,b
1E8F FD        6303            mov     r5,a
1E90 E581      6304            mov     a,sp
1E92 24FC      6305            add     a,#0xfc
1E94 F581      6306            mov     sp,a
1E96 D001      6307            pop     ar1
1E98 D000      6308            pop     ar0
1E9A 904D40    6309            mov     dptr,#_curr_angle
1E9D EA        6310            mov     a,r2
1E9E F0        6311            movx    @dptr,a
1E9F A3        6312            inc     dptr
1EA0 EB        6313            mov     a,r3
1EA1 F0        6314            movx    @dptr,a
1EA2 A3        6315            inc     dptr
1EA3 EC        6316            mov     a,r4
1EA4 F0        6317            movx    @dptr,a
1EA5 A3        6318            inc     dptr
1EA6 ED        6319            mov     a,r5
1EA7 F0        6320            movx    @dptr,a
1EA8           6321   ;        main.c:1266: return curr_angle; 
1EA8 D005      6322            pop     ar5
1EAA D004      6323            pop     ar4
1EAC           6324   ;        main.c:1197: curr_angle -= angle_diff * 1.4; // TUNE THIS
1EAC           6325   L041009?:
1EAC           6326   ;        main.c:1199: if (curr_angle > 360.0) curr_angle -= 360.0; 
1EAC 904D40    6327            mov     dptr,#_curr_angle
1EAF E0        6328            movx    a,@dptr
1EB0 F578      6329            mov     _Joystick_Control_sloc3_1_0,a
1EB2 A3        6330            inc     dptr
1EB3 E0        6331            movx    a,@dptr
1EB4 F579      6332            mov     (_Joystick_Control_sloc3_1_0 + 1),a
1EB6 A3        6333            inc     dptr
1EB7 E0        6334            movx    a,@dptr
1EB8 F57A      6335            mov     (_Joystick_Control_sloc3_1_0 + 2),a
1EBA A3        6336            inc     dptr
1EBB E0        6337            movx    a,@dptr
1EBC F57B      6338            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1EBE C004      6339            push    ar4
1EC0 C005      6340            push    ar5
1EC2 C000      6341            push    ar0
1EC4 C001      6342            push    ar1
1EC6 E4        6343            clr     a
1EC7 C0E0      6344            push    acc
1EC9 C0E0      6345            push    acc
1ECB 74B4      6346            mov     a,#0xB4
1ECD C0E0      6347            push    acc
1ECF 7443      6348            mov     a,#0x43
1ED1 C0E0      6349            push    acc
1ED3 857882    6350            mov     dpl,_Joystick_Control_sloc3_1_0
1ED6 857983    6351            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
1ED9 857AF0    6352            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
1EDC E57B      6353            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
1EDE 120000    6354            lcall   ___fsgt
1EE1 AA82      6355            mov     r2,dpl
1EE3 E581      6356            mov     a,sp
1EE5 24FC      6357            add     a,#0xfc
1EE7 F581      6358            mov     sp,a
1EE9 D001      6359            pop     ar1
1EEB D000      6360            pop     ar0
1EED D005      6361            pop     ar5
1EEF D004      6362            pop     ar4
1EF1 EA        6363            mov     a,r2
1EF2 6000      6364            jz      L041011?
1EF4 C004      6365            push    ar4
1EF6 C005      6366            push    ar5
1EF8 C000      6367            push    ar0
1EFA C001      6368            push    ar1
1EFC E4        6369            clr     a
1EFD C0E0      6370            push    acc
1EFF C0E0      6371            push    acc
1F01 74B4      6372            mov     a,#0xB4
1F03 C0E0      6373            push    acc
1F05 7443      6374            mov     a,#0x43
1F07 C0E0      6375            push    acc
1F09 857882    6376            mov     dpl,_Joystick_Control_sloc3_1_0
1F0C 857983    6377            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
1F0F 857AF0    6378            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
1F12 E57B      6379            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
1F14 120000    6380            lcall   ___fssub
1F17 AA82      6381            mov     r2,dpl
1F19 AB83      6382            mov     r3,dph
1F1B AEF0      6383            mov     r6,b
1F1D FF        6384            mov     r7,a
1F1E E581      6385            mov     a,sp
1F20 24FC      6386            add     a,#0xfc
1F22 F581      6387            mov     sp,a
1F24 D001      6388            pop     ar1
1F26 D000      6389            pop     ar0
1F28 D005      6390            pop     ar5
1F2A D004      6391            pop     ar4
1F2C 904D40    6392            mov     dptr,#_curr_angle
1F2F EA        6393            mov     a,r2
1F30 F0        6394            movx    @dptr,a
1F31 A3        6395            inc     dptr
1F32 EB        6396            mov     a,r3
1F33 F0        6397            movx    @dptr,a
1F34 A3        6398            inc     dptr
1F35 EE        6399            mov     a,r6
1F36 F0        6400            movx    @dptr,a
1F37 A3        6401            inc     dptr
1F38 EF        6402            mov     a,r7
1F39 F0        6403            movx    @dptr,a
1F3A           6404   L041011?:
1F3A           6405   ;        main.c:1200: if (curr_angle < 0.0) curr_angle += 360.0; 
1F3A 904D40    6406            mov     dptr,#_curr_angle
1F3D E0        6407            movx    a,@dptr
1F3E F578      6408            mov     _Joystick_Control_sloc3_1_0,a
1F40 A3        6409            inc     dptr
1F41 E0        6410            movx    a,@dptr
1F42 F579      6411            mov     (_Joystick_Control_sloc3_1_0 + 1),a
1F44 A3        6412            inc     dptr
1F45 E0        6413            movx    a,@dptr
1F46 F57A      6414            mov     (_Joystick_Control_sloc3_1_0 + 2),a
1F48 A3        6415            inc     dptr
1F49 E0        6416            movx    a,@dptr
1F4A F57B      6417            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1F4C C004      6418            push    ar4
1F4E C005      6419            push    ar5
1F50 C000      6420            push    ar0
1F52 C001      6421            push    ar1
1F54 E4        6422            clr     a
1F55 C0E0      6423            push    acc
1F57 C0E0      6424            push    acc
1F59 C0E0      6425            push    acc
1F5B C0E0      6426            push    acc
1F5D 857882    6427            mov     dpl,_Joystick_Control_sloc3_1_0
1F60 857983    6428            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
1F63 857AF0    6429            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
1F66 E57B      6430            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
1F68 120000    6431            lcall   ___fslt
1F6B AA82      6432            mov     r2,dpl
1F6D E581      6433            mov     a,sp
1F6F 24FC      6434            add     a,#0xfc
1F71 F581      6435            mov     sp,a
1F73 D001      6436            pop     ar1
1F75 D000      6437            pop     ar0
1F77 D005      6438            pop     ar5
1F79 D004      6439            pop     ar4
1F7B EA        6440            mov     a,r2
1F7C 6000      6441            jz      L041015?
1F7E C004      6442            push    ar4
1F80 C005      6443            push    ar5
1F82 C000      6444            push    ar0
1F84 C001      6445            push    ar1
1F86 E4        6446            clr     a
1F87 C0E0      6447            push    acc
1F89 C0E0      6448            push    acc
1F8B 74B4      6449            mov     a,#0xB4
1F8D C0E0      6450            push    acc
1F8F 7443      6451            mov     a,#0x43
1F91 C0E0      6452            push    acc
1F93 857882    6453            mov     dpl,_Joystick_Control_sloc3_1_0
1F96 857983    6454            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
1F99 857AF0    6455            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
1F9C E57B      6456            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
1F9E 120000    6457            lcall   ___fsadd
1FA1 AA82      6458            mov     r2,dpl
1FA3 AB83      6459            mov     r3,dph
1FA5 AEF0      6460            mov     r6,b
1FA7 FF        6461            mov     r7,a
1FA8 E581      6462            mov     a,sp
1FAA 24FC      6463            add     a,#0xfc
1FAC F581      6464            mov     sp,a
1FAE D001      6465            pop     ar1
1FB0 D000      6466            pop     ar0
1FB2 D005      6467            pop     ar5
1FB4 D004      6468            pop     ar4
1FB6 904D40    6469            mov     dptr,#_curr_angle
1FB9 EA        6470            mov     a,r2
1FBA F0        6471            movx    @dptr,a
1FBB A3        6472            inc     dptr
1FBC EB        6473            mov     a,r3
1FBD F0        6474            movx    @dptr,a
1FBE A3        6475            inc     dptr
1FBF EE        6476            mov     a,r6
1FC0 F0        6477            movx    @dptr,a
1FC1 A3        6478            inc     dptr
1FC2 EF        6479            mov     a,r7
1FC3 F0        6480            movx    @dptr,a
1FC4           6481   L041015?:
1FC4           6482   ;        main.c:1202: if ((vx_error>5)&&(vy_error)>5){
1FC4 E528      6483            mov     a,_Joystick_Control_sloc2_1_0
1FC6 7000      6484            jnz     L041070?
1FC8 020000    6485            ljmp    L041040?
1FCB           6486   L041070?:
1FCB E588      6487            mov     a,_Joystick_Control_sloc0_1_0
1FCD 7000      6488            jnz     L041071?
1FCF 020000    6489            ljmp    L041040?
1FD2           6490   L041071?:
1FD2           6491   ;        main.c:1204: angle_diff = fabsf(raw_angle - last_raw_angle);
1FD2 904D00    6492            mov     dptr,#_raw_angle
1FD5 E0        6493            movx    a,@dptr
1FD6 FA        6494            mov     r2,a
1FD7 A3        6495            inc     dptr
1FD8 E0        6496            movx    a,@dptr
1FD9 FB        6497            mov     r3,a
1FDA A3        6498            inc     dptr
1FDB E0        6499            movx    a,@dptr
1FDC FE        6500            mov     r6,a
1FDD A3        6501            inc     dptr
1FDE E0        6502            movx    a,@dptr
1FDF FF        6503            mov     r7,a
1FE0 C004      6504            push    ar4
1FE2 C005      6505            push    ar5
1FE4 C000      6506            push    ar0
1FE6 C001      6507            push    ar1
1FE8 904CC0    6508            mov     dptr,#_last_raw_angle
1FEB E0        6509            movx    a,@dptr
1FEC C0E0      6510            push    acc
1FEE A3        6511            inc     dptr
1FEF E0        6512            movx    a,@dptr
1FF0 C0E0      6513            push    acc
1FF2 A3        6514            inc     dptr
1FF3 E0        6515            movx    a,@dptr
1FF4 C0E0      6516            push    acc
1FF6 A3        6517            inc     dptr
1FF7 E0        6518            movx    a,@dptr
1FF8 C0E0      6519            push    acc
1FFA 8A82      6520            mov     dpl,r2
1FFC 8B83      6521            mov     dph,r3
1FFE 8EF0      6522            mov     b,r6
2000 EF        6523            mov     a,r7
2001 120000    6524            lcall   ___fssub
2004 AA82      6525            mov     r2,dpl
2006 AB83      6526            mov     r3,dph
2008 AEF0      6527            mov     r6,b
200A FF        6528            mov     r7,a
200B E581      6529            mov     a,sp
200D 24FC      6530            add     a,#0xfc
200F F581      6531            mov     sp,a
2011 8A82      6532            mov     dpl,r2
2013 8B83      6533            mov     dph,r3
2015 8EF0      6534            mov     b,r6
2017 EF        6535            mov     a,r7
2018 120000    6536            lcall   _fabsf
201B 858218    6537            mov     _Joystick_Control_sloc5_1_0,dpl
201E 858319    6538            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
2021 85F01A    6539            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2024 F51B      6540            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2026 D001      6541            pop     ar1
2028 D000      6542            pop     ar0
202A D005      6543            pop     ar5
202C D004      6544            pop     ar4
202E 904C80    6545            mov     dptr,#_angle_diff
2031 E518      6546            mov     a,_Joystick_Control_sloc5_1_0
2033 F0        6547            movx    @dptr,a
2034 A3        6548            inc     dptr
2035 E519      6549            mov     a,(_Joystick_Control_sloc5_1_0 + 1)
2037 F0        6550            movx    @dptr,a
2038 A3        6551            inc     dptr
2039 E51A      6552            mov     a,(_Joystick_Control_sloc5_1_0 + 2)
203B F0        6553            movx    @dptr,a
203C A3        6554            inc     dptr
203D E51B      6555            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
203F F0        6556            movx    @dptr,a
2040           6557   ;        main.c:1205: if (vy_err>0){
2040 90D348    6558            mov     dptr,#_Joystick_Control_vy_err_1_230
2043 E0        6559            movx    a,@dptr
2044 F578      6560            mov     _Joystick_Control_sloc3_1_0,a
2046 A3        6561            inc     dptr
2047 E0        6562            movx    a,@dptr
2048 F579      6563            mov     (_Joystick_Control_sloc3_1_0 + 1),a
204A C3        6564            clr     c
204B E4        6565            clr     a
204C 9578      6566            subb    a,_Joystick_Control_sloc3_1_0
204E E4        6567            clr     a
204F 6480      6568            xrl     a,#0x80
2051 8579F0    6569            mov     b,(_Joystick_Control_sloc3_1_0 + 1)
2054 63F080    6570            xrl     b,#0x80
2057 95F0      6571            subb    a,b
2059 4000      6572            jc      L041072?
205B 020000    6573            ljmp    L041027?
205E           6574   L041072?:
205E           6575   ;        main.c:1206: L_motor_dir = 0; 
205E 905050    6576            mov     dptr,#_L_motor_dir
2061           6577   ;        main.c:1207: R_motor_dir = 0; 
2061 E4        6578            clr     a
2062 F0        6579            movx    @dptr,a
2063 905010    6580            mov     dptr,#_R_motor_dir
2066 F0        6581            movx    @dptr,a
2067           6582   ;        main.c:1209: if (vx_err>0){
2067 90D2F8    6583            mov     dptr,#_Joystick_Control_vx_err_1_230
206A E0        6584            movx    a,@dptr
206B FA        6585            mov     r2,a
206C A3        6586            inc     dptr
206D E0        6587            movx    a,@dptr
206E FB        6588            mov     r3,a
206F C3        6589            clr     c
2070 E4        6590            clr     a
2071 9A        6591            subb    a,r2
2072 E4        6592            clr     a
2073 6480      6593            xrl     a,#0x80
2075 8BF0      6594            mov     b,r3
2077 63F080    6595            xrl     b,#0x80
207A 95F0      6596            subb    a,b
207C 4000      6597            jc      L041073?
207E 020000    6598            ljmp    L041024?
2081           6599   L041073?:
2081           6600   ;        main.c:1211: if (vy*100<=vy_thres*100/2){
2081 8C00      6601            mov     __mulint_PARM_2,r4
2083 8D01      6602            mov     (__mulint_PARM_2 + 1),r5
2085 900064    6603            mov     dptr,#0x0064
2088 C004      6604            push    ar4
208A C005      6605            push    ar5
208C C000      6606            push    ar0
208E C001      6607            push    ar1
2090 120000    6608            lcall   __mulint
2093 AA82      6609            mov     r2,dpl
2095 AB83      6610            mov     r3,dph
2097 D001      6611            pop     ar1
2099 D000      6612            pop     ar0
209B D005      6613            pop     ar5
209D D004      6614            pop     ar4
209F 904F10    6615            mov     dptr,#_vy_thres
20A2 E0        6616            movx    a,@dptr
20A3 F500      6617            mov     __mulint_PARM_2,a
20A5 A3        6618            inc     dptr
20A6 E0        6619            movx    a,@dptr
20A7 F501      6620            mov     (__mulint_PARM_2 + 1),a
20A9 900064    6621            mov     dptr,#0x0064
20AC C002      6622            push    ar2
20AE C003      6623            push    ar3
20B0 C004      6624            push    ar4
20B2 C005      6625            push    ar5
20B4 C000      6626            push    ar0
20B6 C001      6627            push    ar1
20B8 120000    6628            lcall   __mulint
20BB AE82      6629            mov     r6,dpl
20BD AF83      6630            mov     r7,dph
20BF 750002    6631            mov     __divsint_PARM_2,#0x02
20C2 E4        6632            clr     a
20C3 F501      6633            mov     (__divsint_PARM_2 + 1),a
20C5 8E82      6634            mov     dpl,r6
20C7 8F83      6635            mov     dph,r7
20C9 120000    6636            lcall   __divsint
20CC AE82      6637            mov     r6,dpl
20CE AF83      6638            mov     r7,dph
20D0 D001      6639            pop     ar1
20D2 D000      6640            pop     ar0
20D4 D005      6641            pop     ar5
20D6 D004      6642            pop     ar4
20D8 D003      6643            pop     ar3
20DA D002      6644            pop     ar2
20DC C3        6645            clr     c
20DD EE        6646            mov     a,r6
20DE 9A        6647            subb    a,r2
20DF EF        6648            mov     a,r7
20E0 6480      6649            xrl     a,#0x80
20E2 8BF0      6650            mov     b,r3
20E4 63F080    6651            xrl     b,#0x80
20E7 95F0      6652            subb    a,b
20E9 5000      6653            jnc     L041074?
20EB 020000    6654            ljmp    L041018?
20EE           6655   L041074?:
20EE           6656   ;        main.c:1212: pwm_left = vy_error; 
20EE 90D2A8    6657            mov     dptr,#_Joystick_Control_vy_error_1_230
20F1 E0        6658            movx    a,@dptr
20F2 F5D8      6659            mov     _Joystick_Control_sloc1_1_0,a
20F4 A3        6660            inc     dptr
20F5 E0        6661            movx    a,@dptr
20F6 F5D9      6662            mov     (_Joystick_Control_sloc1_1_0 + 1),a
20F8 9050D0    6663            mov     dptr,#_pwm_left
20FB E5D8      6664            mov     a,_Joystick_Control_sloc1_1_0
20FD F0        6665            movx    @dptr,a
20FE           6666   ;        main.c:1213: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
20FE 904D80    6667            mov     dptr,#_pwm_corr
2101 E0        6668            movx    a,@dptr
2102 F5C8      6669            mov     _Joystick_Control_sloc4_1_0,a
2104 A3        6670            inc     dptr
2105 E0        6671            movx    a,@dptr
2106 F5C9      6672            mov     (_Joystick_Control_sloc4_1_0 + 1),a
2108 A3        6673            inc     dptr
2109 E0        6674            movx    a,@dptr
210A F5CA      6675            mov     (_Joystick_Control_sloc4_1_0 + 2),a
210C A3        6676            inc     dptr
210D E0        6677            movx    a,@dptr
210E F5CB      6678            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2110 85D882    6679            mov     dpl,_Joystick_Control_sloc1_1_0
2113 85D983    6680            mov     dph,(_Joystick_Control_sloc1_1_0 + 1)
2116 C004      6681            push    ar4
2118 C005      6682            push    ar5
211A C000      6683            push    ar0
211C C001      6684            push    ar1
211E 120000    6685            lcall   ___sint2fs
2121 AA82      6686            mov     r2,dpl
2123 AB83      6687            mov     r3,dph
2125 AEF0      6688            mov     r6,b
2127 FF        6689            mov     r7,a
2128 C002      6690            push    ar2
212A C003      6691            push    ar3
212C C006      6692            push    ar6
212E C007      6693            push    ar7
2130 85C882    6694            mov     dpl,_Joystick_Control_sloc4_1_0
2133 85C983    6695            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
2136 85CAF0    6696            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
2139 E5CB      6697            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
213B 120000    6698            lcall   ___fsmul
213E AA82      6699            mov     r2,dpl
2140 AB83      6700            mov     r3,dph
2142 AEF0      6701            mov     r6,b
2144 FF        6702            mov     r7,a
2145 E581      6703            mov     a,sp
2147 24FC      6704            add     a,#0xfc
2149 F581      6705            mov     sp,a
214B C002      6706            push    ar2
214D C003      6707            push    ar3
214F C006      6708            push    ar6
2151 C007      6709            push    ar7
2153 900000    6710            mov     dptr,#0x0000
2156 75F0C8    6711            mov     b,#0xC8
2159 7442      6712            mov     a,#0x42
215B 120000    6713            lcall   ___fsmul
215E 8582C8    6714            mov     _Joystick_Control_sloc4_1_0,dpl
2161 8583C9    6715            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
2164 85F0CA    6716            mov     (_Joystick_Control_sloc4_1_0 + 2),b
2167 F5CB      6717            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2169 E581      6718            mov     a,sp
216B 24FC      6719            add     a,#0xfc
216D F581      6720            mov     sp,a
216F D001      6721            pop     ar1
2171 D000      6722            pop     ar0
2173 E5D8      6723            mov     a,_Joystick_Control_sloc1_1_0
2175 28        6724            add     a,r0
2176 F582      6725            mov     dpl,a
2178 E5D9      6726            mov     a,(_Joystick_Control_sloc1_1_0 + 1)
217A 39        6727            addc    a,r1
217B F583      6728            mov     dph,a
217D C000      6729            push    ar0
217F C001      6730            push    ar1
2181 120000    6731            lcall   ___sint2fs
2184 AA82      6732            mov     r2,dpl
2186 AB83      6733            mov     r3,dph
2188 AEF0      6734            mov     r6,b
218A FF        6735            mov     r7,a
218B C002      6736            push    ar2
218D C003      6737            push    ar3
218F C006      6738            push    ar6
2191 C007      6739            push    ar7
2193 85C882    6740            mov     dpl,_Joystick_Control_sloc4_1_0
2196 85C983    6741            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
2199 85CAF0    6742            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
219C E5CB      6743            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
219E 120000    6744            lcall   ___fsdiv
21A1 AA82      6745            mov     r2,dpl
21A3 AB83      6746            mov     r3,dph
21A5 AEF0      6747            mov     r6,b
21A7 FF        6748            mov     r7,a
21A8 E581      6749            mov     a,sp
21AA 24FC      6750            add     a,#0xfc
21AC F581      6751            mov     sp,a
21AE 8A82      6752            mov     dpl,r2
21B0 8B83      6753            mov     dph,r3
21B2 8EF0      6754            mov     b,r6
21B4 EF        6755            mov     a,r7
21B5 120000    6756            lcall   ___fs2uchar
21B8 E582      6757            mov     a,dpl
21BA D001      6758            pop     ar1
21BC D000      6759            pop     ar0
21BE D005      6760            pop     ar5
21C0 D004      6761            pop     ar4
21C2 905090    6762            mov     dptr,#_pwm_right
21C5 F0        6763            movx    @dptr,a
21C6 020000    6764            ljmp    L041019?
21C9           6765   L041018?:
21C9           6766   ;        main.c:1216: pwm_left = vx_error; 
21C9 9050D0    6767            mov     dptr,#_pwm_left
21CC E8        6768            mov     a,r0
21CD F0        6769            movx    @dptr,a
21CE           6770   ;        main.c:1217: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
21CE 904D80    6771            mov     dptr,#_pwm_corr
21D1 E0        6772            movx    a,@dptr
21D2 F5C8      6773            mov     _Joystick_Control_sloc4_1_0,a
21D4 A3        6774            inc     dptr
21D5 E0        6775            movx    a,@dptr
21D6 F5C9      6776            mov     (_Joystick_Control_sloc4_1_0 + 1),a
21D8 A3        6777            inc     dptr
21D9 E0        6778            movx    a,@dptr
21DA F5CA      6779            mov     (_Joystick_Control_sloc4_1_0 + 2),a
21DC A3        6780            inc     dptr
21DD E0        6781            movx    a,@dptr
21DE F5CB      6782            mov     (_Joystick_Control_sloc4_1_0 + 3),a
21E0 8882      6783            mov     dpl,r0
21E2 8983      6784            mov     dph,r1
21E4 C004      6785            push    ar4
21E6 C005      6786            push    ar5
21E8 C000      6787            push    ar0
21EA C001      6788            push    ar1
21EC 120000    6789            lcall   ___sint2fs
21EF AA82      6790            mov     r2,dpl
21F1 AB83      6791            mov     r3,dph
21F3 AEF0      6792            mov     r6,b
21F5 FF        6793            mov     r7,a
21F6 C002      6794            push    ar2
21F8 C003      6795            push    ar3
21FA C006      6796            push    ar6
21FC C007      6797            push    ar7
21FE 85C882    6798            mov     dpl,_Joystick_Control_sloc4_1_0
2201 85C983    6799            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
2204 85CAF0    6800            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
2207 E5CB      6801            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
2209 120000    6802            lcall   ___fsmul
220C AA82      6803            mov     r2,dpl
220E AB83      6804            mov     r3,dph
2210 AEF0      6805            mov     r6,b
2212 FF        6806            mov     r7,a
2213 E581      6807            mov     a,sp
2215 24FC      6808            add     a,#0xfc
2217 F581      6809            mov     sp,a
2219 C002      6810            push    ar2
221B C003      6811            push    ar3
221D C006      6812            push    ar6
221F C007      6813            push    ar7
2221 900000    6814            mov     dptr,#0x0000
2224 75F0C8    6815            mov     b,#0xC8
2227 7442      6816            mov     a,#0x42
2229 120000    6817            lcall   ___fsmul
222C 8582C8    6818            mov     _Joystick_Control_sloc4_1_0,dpl
222F 8583C9    6819            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
2232 85F0CA    6820            mov     (_Joystick_Control_sloc4_1_0 + 2),b
2235 F5CB      6821            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2237 E581      6822            mov     a,sp
2239 24FC      6823            add     a,#0xfc
223B F581      6824            mov     sp,a
223D D001      6825            pop     ar1
223F D000      6826            pop     ar0
2241 90D2A8    6827            mov     dptr,#_Joystick_Control_vy_error_1_230
2244 E0        6828            movx    a,@dptr
2245 FA        6829            mov     r2,a
2246 A3        6830            inc     dptr
2247 E0        6831            movx    a,@dptr
2248 FB        6832            mov     r3,a
2249 EA        6833            mov     a,r2
224A 28        6834            add     a,r0
224B F582      6835            mov     dpl,a
224D EB        6836            mov     a,r3
224E 39        6837            addc    a,r1
224F F583      6838            mov     dph,a
2251 C000      6839            push    ar0
2253 C001      6840            push    ar1
2255 120000    6841            lcall   ___sint2fs
2258 AA82      6842            mov     r2,dpl
225A AB83      6843            mov     r3,dph
225C AEF0      6844            mov     r6,b
225E FF        6845            mov     r7,a
225F C002      6846            push    ar2
2261 C003      6847            push    ar3
2263 C006      6848            push    ar6
2265 C007      6849            push    ar7
2267 85C882    6850            mov     dpl,_Joystick_Control_sloc4_1_0
226A 85C983    6851            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
226D 85CAF0    6852            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
2270 E5CB      6853            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
2272 120000    6854            lcall   ___fsdiv
2275 AA82      6855            mov     r2,dpl
2277 AB83      6856            mov     r3,dph
2279 AEF0      6857            mov     r6,b
227B FF        6858            mov     r7,a
227C E581      6859            mov     a,sp
227E 24FC      6860            add     a,#0xfc
2280 F581      6861            mov     sp,a
2282 8A82      6862            mov     dpl,r2
2284 8B83      6863            mov     dph,r3
2286 8EF0      6864            mov     b,r6
2288 EF        6865            mov     a,r7
2289 120000    6866            lcall   ___fs2uchar
228C E582      6867            mov     a,dpl
228E D001      6868            pop     ar1
2290 D000      6869            pop     ar0
2292 D005      6870            pop     ar5
2294 D004      6871            pop     ar4
2296 905090    6872            mov     dptr,#_pwm_right
2299 F0        6873            movx    @dptr,a
229A           6874   ;        main.c:1266: return curr_angle; 
229A           6875   ;        main.c:1217: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
229A           6876   L041019?:
229A           6877   ;        main.c:1219: curr_angle += angle_diff * 1.5; // TUNE THIS 
229A C004      6878            push    ar4
229C C005      6879            push    ar5
229E C004      6880            push    ar4
22A0 C005      6881            push    ar5
22A2 C000      6882            push    ar0
22A4 C001      6883            push    ar1
22A6 C018      6884            push    _Joystick_Control_sloc5_1_0
22A8 C019      6885            push    (_Joystick_Control_sloc5_1_0 + 1)
22AA C01A      6886            push    (_Joystick_Control_sloc5_1_0 + 2)
22AC C01B      6887            push    (_Joystick_Control_sloc5_1_0 + 3)
22AE 900000    6888            mov     dptr,#0x0000
22B1 75F0C0    6889            mov     b,#0xC0
22B4 743F      6890            mov     a,#0x3F
22B6 120000    6891            lcall   ___fsmul
22B9 8582C8    6892            mov     _Joystick_Control_sloc4_1_0,dpl
22BC 8583C9    6893            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
22BF 85F0CA    6894            mov     (_Joystick_Control_sloc4_1_0 + 2),b
22C2 F5CB      6895            mov     (_Joystick_Control_sloc4_1_0 + 3),a
22C4 E581      6896            mov     a,sp
22C6 24FC      6897            add     a,#0xfc
22C8 F581      6898            mov     sp,a
22CA D001      6899            pop     ar1
22CC D000      6900            pop     ar0
22CE D005      6901            pop     ar5
22D0 D004      6902            pop     ar4
22D2 904D40    6903            mov     dptr,#_curr_angle
22D5 E0        6904            movx    a,@dptr
22D6 FE        6905            mov     r6,a
22D7 A3        6906            inc     dptr
22D8 E0        6907            movx    a,@dptr
22D9 FF        6908            mov     r7,a
22DA A3        6909            inc     dptr
22DB E0        6910            movx    a,@dptr
22DC FA        6911            mov     r2,a
22DD A3        6912            inc     dptr
22DE E0        6913            movx    a,@dptr
22DF FB        6914            mov     r3,a
22E0 C000      6915            push    ar0
22E2 C001      6916            push    ar1
22E4 C0C8      6917            push    _Joystick_Control_sloc4_1_0
22E6 C0C9      6918            push    (_Joystick_Control_sloc4_1_0 + 1)
22E8 C0CA      6919            push    (_Joystick_Control_sloc4_1_0 + 2)
22EA C0CB      6920            push    (_Joystick_Control_sloc4_1_0 + 3)
22EC 8E82      6921            mov     dpl,r6
22EE 8F83      6922            mov     dph,r7
22F0 8AF0      6923            mov     b,r2
22F2 EB        6924            mov     a,r3
22F3 120000    6925            lcall   ___fsadd
22F6 AA82      6926            mov     r2,dpl
22F8 AB83      6927            mov     r3,dph
22FA ACF0      6928            mov     r4,b
22FC FD        6929            mov     r5,a
22FD E581      6930            mov     a,sp
22FF 24FC      6931            add     a,#0xfc
2301 F581      6932            mov     sp,a
2303 D001      6933            pop     ar1
2305 D000      6934            pop     ar0
2307 904D40    6935            mov     dptr,#_curr_angle
230A EA        6936            mov     a,r2
230B F0        6937            movx    @dptr,a
230C A3        6938            inc     dptr
230D EB        6939            mov     a,r3
230E F0        6940            movx    @dptr,a
230F A3        6941            inc     dptr
2310 EC        6942            mov     a,r4
2311 F0        6943            movx    @dptr,a
2312 A3        6944            inc     dptr
2313 ED        6945            mov     a,r5
2314 F0        6946            movx    @dptr,a
2315 D005      6947            pop     ar5
2317 D004      6948            pop     ar4
2319 020000    6949            ljmp    L041027?
231C           6950   L041024?:
231C           6951   ;        main.c:1223: if (vy*100<=vy_thres*100/2){
231C 8C00      6952            mov     __mulint_PARM_2,r4
231E 8D01      6953            mov     (__mulint_PARM_2 + 1),r5
2320 900064    6954            mov     dptr,#0x0064
2323 C004      6955            push    ar4
2325 C005      6956            push    ar5
2327 C000      6957            push    ar0
2329 C001      6958            push    ar1
232B 120000    6959            lcall   __mulint
232E AA82      6960            mov     r2,dpl
2330 AB83      6961            mov     r3,dph
2332 D001      6962            pop     ar1
2334 D000      6963            pop     ar0
2336 D005      6964            pop     ar5
2338 D004      6965            pop     ar4
233A 904F10    6966            mov     dptr,#_vy_thres
233D E0        6967            movx    a,@dptr
233E F500      6968            mov     __mulint_PARM_2,a
2340 A3        6969            inc     dptr
2341 E0        6970            movx    a,@dptr
2342 F501      6971            mov     (__mulint_PARM_2 + 1),a
2344 900064    6972            mov     dptr,#0x0064
2347 C002      6973            push    ar2
2349 C003      6974            push    ar3
234B C004      6975            push    ar4
234D C005      6976            push    ar5
234F C000      6977            push    ar0
2351 C001      6978            push    ar1
2353 120000    6979            lcall   __mulint
2356 AE82      6980            mov     r6,dpl
2358 AF83      6981            mov     r7,dph
235A 750002    6982            mov     __divsint_PARM_2,#0x02
235D E4        6983            clr     a
235E F501      6984            mov     (__divsint_PARM_2 + 1),a
2360 8E82      6985            mov     dpl,r6
2362 8F83      6986            mov     dph,r7
2364 120000    6987            lcall   __divsint
2367 AE82      6988            mov     r6,dpl
2369 AF83      6989            mov     r7,dph
236B D001      6990            pop     ar1
236D D000      6991            pop     ar0
236F D005      6992            pop     ar5
2371 D004      6993            pop     ar4
2373 D003      6994            pop     ar3
2375 D002      6995            pop     ar2
2377 C3        6996            clr     c
2378 EE        6997            mov     a,r6
2379 9A        6998            subb    a,r2
237A EF        6999            mov     a,r7
237B 6480      7000            xrl     a,#0x80
237D 8BF0      7001            mov     b,r3
237F 63F080    7002            xrl     b,#0x80
2382 95F0      7003            subb    a,b
2384 5000      7004            jnc     L041075?
2386 020000    7005            ljmp    L041021?
2389           7006   L041075?:
2389           7007   ;        main.c:1224: pwm_left = vy_error*100/(vx_error+vy_error);
2389 90D2A8    7008            mov     dptr,#_Joystick_Control_vy_error_1_230
238C E0        7009            movx    a,@dptr
238D FA        7010            mov     r2,a
238E A3        7011            inc     dptr
238F E0        7012            movx    a,@dptr
2390 FB        7013            mov     r3,a
2391 8A00      7014            mov     __mulint_PARM_2,r2
2393 8B01      7015            mov     (__mulint_PARM_2 + 1),r3
2395 900064    7016            mov     dptr,#0x0064
2398 C002      7017            push    ar2
239A C003      7018            push    ar3
239C C004      7019            push    ar4
239E C005      7020            push    ar5
23A0 C000      7021            push    ar0
23A2 C001      7022            push    ar1
23A4 120000    7023            lcall   __mulint
23A7 AE82      7024            mov     r6,dpl
23A9 AF83      7025            mov     r7,dph
23AB D001      7026            pop     ar1
23AD D000      7027            pop     ar0
23AF D005      7028            pop     ar5
23B1 D004      7029            pop     ar4
23B3 D003      7030            pop     ar3
23B5 D002      7031            pop     ar2
23B7 EA        7032            mov     a,r2
23B8 28        7033            add     a,r0
23B9 F500      7034            mov     __divsint_PARM_2,a
23BB EB        7035            mov     a,r3
23BC 39        7036            addc    a,r1
23BD F501      7037            mov     (__divsint_PARM_2 + 1),a
23BF 8E82      7038            mov     dpl,r6
23C1 8F83      7039            mov     dph,r7
23C3 C002      7040            push    ar2
23C5 C003      7041            push    ar3
23C7 C004      7042            push    ar4
23C9 C005      7043            push    ar5
23CB C000      7044            push    ar0
23CD C001      7045            push    ar1
23CF 120000    7046            lcall   __divsint
23D2 AE82      7047            mov     r6,dpl
23D4 D001      7048            pop     ar1
23D6 D000      7049            pop     ar0
23D8 D005      7050            pop     ar5
23DA D004      7051            pop     ar4
23DC D003      7052            pop     ar3
23DE D002      7053            pop     ar2
23E0 9050D0    7054            mov     dptr,#_pwm_left
23E3 EE        7055            mov     a,r6
23E4 F0        7056            movx    @dptr,a
23E5           7057   ;        main.c:1225: pwm_right = vy_error*pwm_corr; 
23E5 8A82      7058            mov     dpl,r2
23E7 8B83      7059            mov     dph,r3
23E9 C004      7060            push    ar4
23EB C005      7061            push    ar5
23ED C000      7062            push    ar0
23EF C001      7063            push    ar1
23F1 120000    7064            lcall   ___sint2fs
23F4 AA82      7065            mov     r2,dpl
23F6 AB83      7066            mov     r3,dph
23F8 AEF0      7067            mov     r6,b
23FA FF        7068            mov     r7,a
23FB 904D80    7069            mov     dptr,#_pwm_corr
23FE E0        7070            movx    a,@dptr
23FF C0E0      7071            push    acc
2401 A3        7072            inc     dptr
2402 E0        7073            movx    a,@dptr
2403 C0E0      7074            push    acc
2405 A3        7075            inc     dptr
2406 E0        7076            movx    a,@dptr
2407 C0E0      7077            push    acc
2409 A3        7078            inc     dptr
240A E0        7079            movx    a,@dptr
240B C0E0      7080            push    acc
240D 8A82      7081            mov     dpl,r2
240F 8B83      7082            mov     dph,r3
2411 8EF0      7083            mov     b,r6
2413 EF        7084            mov     a,r7
2414 120000    7085            lcall   ___fsmul
2417 AA82      7086            mov     r2,dpl
2419 AB83      7087            mov     r3,dph
241B AEF0      7088            mov     r6,b
241D FF        7089            mov     r7,a
241E E581      7090            mov     a,sp
2420 24FC      7091            add     a,#0xfc
2422 F581      7092            mov     sp,a
2424 8A82      7093            mov     dpl,r2
2426 8B83      7094            mov     dph,r3
2428 8EF0      7095            mov     b,r6
242A EF        7096            mov     a,r7
242B 120000    7097            lcall   ___fs2uchar
242E E582      7098            mov     a,dpl
2430 D001      7099            pop     ar1
2432 D000      7100            pop     ar0
2434 D005      7101            pop     ar5
2436 D004      7102            pop     ar4
2438 905090    7103            mov     dptr,#_pwm_right
243B F0        7104            movx    @dptr,a
243C 020000    7105            ljmp    L041022?
243F           7106   L041021?:
243F           7107   ;        main.c:1228: pwm_left = vx_error*100/(vx_error+vy_error);
243F 8800      7108            mov     __mulint_PARM_2,r0
2441 8901      7109            mov     (__mulint_PARM_2 + 1),r1
2443 900064    7110            mov     dptr,#0x0064
2446 C004      7111            push    ar4
2448 C005      7112            push    ar5
244A C000      7113            push    ar0
244C C001      7114            push    ar1
244E 120000    7115            lcall   __mulint
2451 AA82      7116            mov     r2,dpl
2453 AB83      7117            mov     r3,dph
2455 D001      7118            pop     ar1
2457 D000      7119            pop     ar0
2459 90D2A8    7120            mov     dptr,#_Joystick_Control_vy_error_1_230
245C E0        7121            movx    a,@dptr
245D FE        7122            mov     r6,a
245E A3        7123            inc     dptr
245F E0        7124            movx    a,@dptr
2460 FF        7125            mov     r7,a
2461 EE        7126            mov     a,r6
2462 28        7127            add     a,r0
2463 F500      7128            mov     __divsint_PARM_2,a
2465 EF        7129            mov     a,r7
2466 39        7130            addc    a,r1
2467 F501      7131            mov     (__divsint_PARM_2 + 1),a
2469 8A82      7132            mov     dpl,r2
246B 8B83      7133            mov     dph,r3
246D C000      7134            push    ar0
246F C001      7135            push    ar1
2471 120000    7136            lcall   __divsint
2474 AA82      7137            mov     r2,dpl
2476 D001      7138            pop     ar1
2478 D000      7139            pop     ar0
247A 9050D0    7140            mov     dptr,#_pwm_left
247D EA        7141            mov     a,r2
247E F0        7142            movx    @dptr,a
247F           7143   ;        main.c:1229: pwm_right = vx_error*pwm_corr; 
247F 8882      7144            mov     dpl,r0
2481 8983      7145            mov     dph,r1
2483 C000      7146            push    ar0
2485 C001      7147            push    ar1
2487 120000    7148            lcall   ___sint2fs
248A AA82      7149            mov     r2,dpl
248C AB83      7150            mov     r3,dph
248E AEF0      7151            mov     r6,b
2490 FF        7152            mov     r7,a
2491 904D80    7153            mov     dptr,#_pwm_corr
2494 E0        7154            movx    a,@dptr
2495 C0E0      7155            push    acc
2497 A3        7156            inc     dptr
2498 E0        7157            movx    a,@dptr
2499 C0E0      7158            push    acc
249B A3        7159            inc     dptr
249C E0        7160            movx    a,@dptr
249D C0E0      7161            push    acc
249F A3        7162            inc     dptr
24A0 E0        7163            movx    a,@dptr
24A1 C0E0      7164            push    acc
24A3 8A82      7165            mov     dpl,r2
24A5 8B83      7166            mov     dph,r3
24A7 8EF0      7167            mov     b,r6
24A9 EF        7168            mov     a,r7
24AA 120000    7169            lcall   ___fsmul
24AD AA82      7170            mov     r2,dpl
24AF AB83      7171            mov     r3,dph
24B1 AEF0      7172            mov     r6,b
24B3 FF        7173            mov     r7,a
24B4 E581      7174            mov     a,sp
24B6 24FC      7175            add     a,#0xfc
24B8 F581      7176            mov     sp,a
24BA 8A82      7177            mov     dpl,r2
24BC 8B83      7178            mov     dph,r3
24BE 8EF0      7179            mov     b,r6
24C0 EF        7180            mov     a,r7
24C1 120000    7181            lcall   ___fs2uchar
24C4 E582      7182            mov     a,dpl
24C6 D001      7183            pop     ar1
24C8 D000      7184            pop     ar0
24CA D005      7185            pop     ar5
24CC D004      7186            pop     ar4
24CE 905090    7187            mov     dptr,#_pwm_right
24D1 F0        7188            movx    @dptr,a
24D2           7189   L041022?:
24D2           7190   ;        main.c:1231: curr_angle -= angle_diff * 1.5; // TUNE THIS 
24D2 C004      7191            push    ar4
24D4 C005      7192            push    ar5
24D6 C004      7193            push    ar4
24D8 C005      7194            push    ar5
24DA C000      7195            push    ar0
24DC C001      7196            push    ar1
24DE C018      7197            push    _Joystick_Control_sloc5_1_0
24E0 C019      7198            push    (_Joystick_Control_sloc5_1_0 + 1)
24E2 C01A      7199            push    (_Joystick_Control_sloc5_1_0 + 2)
24E4 C01B      7200            push    (_Joystick_Control_sloc5_1_0 + 3)
24E6 900000    7201            mov     dptr,#0x0000
24E9 75F0C0    7202            mov     b,#0xC0
24EC 743F      7203            mov     a,#0x3F
24EE 120000    7204            lcall   ___fsmul
24F1 8582C8    7205            mov     _Joystick_Control_sloc4_1_0,dpl
24F4 8583C9    7206            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
24F7 85F0CA    7207            mov     (_Joystick_Control_sloc4_1_0 + 2),b
24FA F5CB      7208            mov     (_Joystick_Control_sloc4_1_0 + 3),a
24FC E581      7209            mov     a,sp
24FE 24FC      7210            add     a,#0xfc
2500 F581      7211            mov     sp,a
2502 D001      7212            pop     ar1
2504 D000      7213            pop     ar0
2506 D005      7214            pop     ar5
2508 D004      7215            pop     ar4
250A 904D40    7216            mov     dptr,#_curr_angle
250D E0        7217            movx    a,@dptr
250E FC        7218            mov     r4,a
250F A3        7219            inc     dptr
2510 E0        7220            movx    a,@dptr
2511 FD        7221            mov     r5,a
2512 A3        7222            inc     dptr
2513 E0        7223            movx    a,@dptr
2514 FA        7224            mov     r2,a
2515 A3        7225            inc     dptr
2516 E0        7226            movx    a,@dptr
2517 FB        7227            mov     r3,a
2518 C000      7228            push    ar0
251A C001      7229            push    ar1
251C C0C8      7230            push    _Joystick_Control_sloc4_1_0
251E C0C9      7231            push    (_Joystick_Control_sloc4_1_0 + 1)
2520 C0CA      7232            push    (_Joystick_Control_sloc4_1_0 + 2)
2522 C0CB      7233            push    (_Joystick_Control_sloc4_1_0 + 3)
2524 8C82      7234            mov     dpl,r4
2526 8D83      7235            mov     dph,r5
2528 8AF0      7236            mov     b,r2
252A EB        7237            mov     a,r3
252B 120000    7238            lcall   ___fssub
252E AA82      7239            mov     r2,dpl
2530 AB83      7240            mov     r3,dph
2532 ACF0      7241            mov     r4,b
2534 FD        7242            mov     r5,a
2535 E581      7243            mov     a,sp
2537 24FC      7244            add     a,#0xfc
2539 F581      7245            mov     sp,a
253B D001      7246            pop     ar1
253D D000      7247            pop     ar0
253F 904D40    7248            mov     dptr,#_curr_angle
2542 EA        7249            mov     a,r2
2543 F0        7250            movx    @dptr,a
2544 A3        7251            inc     dptr
2545 EB        7252            mov     a,r3
2546 F0        7253            movx    @dptr,a
2547 A3        7254            inc     dptr
2548 EC        7255            mov     a,r4
2549 F0        7256            movx    @dptr,a
254A A3        7257            inc     dptr
254B ED        7258            mov     a,r5
254C F0        7259            movx    @dptr,a
254D           7260   ;        main.c:1266: return curr_angle; 
254D D005      7261            pop     ar5
254F D004      7262            pop     ar4
2551           7263   ;        main.c:1231: curr_angle -= angle_diff * 1.5; // TUNE THIS 
2551           7264   L041027?:
2551           7265   ;        main.c:1235: if (vy_err<0){
2551 E579      7266            mov     a,(_Joystick_Control_sloc3_1_0 + 1)
2553 20E740    7267            jb      acc.7,L041076?
2556 020000    7268            ljmp    L041040?
2559           7269   L041076?:
2559           7270   ;        main.c:1236: L_motor_dir = 1; 
2559 905050    7271            mov     dptr,#_L_motor_dir
255C 7401      7272            mov     a,#0x01
255E F0        7273            movx    @dptr,a
255F           7274   ;        main.c:1237: R_motor_dir = 1; 
255F 905010    7275            mov     dptr,#_R_motor_dir
2562 7401      7276            mov     a,#0x01
2564 F0        7277            movx    @dptr,a
2565           7278   ;        main.c:1239: if (vx_err>0){
2565 90D2F8    7279            mov     dptr,#_Joystick_Control_vx_err_1_230
2568 E0        7280            movx    a,@dptr
2569 FA        7281            mov     r2,a
256A A3        7282            inc     dptr
256B E0        7283            movx    a,@dptr
256C FB        7284            mov     r3,a
256D C3        7285            clr     c
256E E4        7286            clr     a
256F 9A        7287            subb    a,r2
2570 E4        7288            clr     a
2571 6480      7289            xrl     a,#0x80
2573 8BF0      7290            mov     b,r3
2575 63F080    7291            xrl     b,#0x80
2578 95F0      7292            subb    a,b
257A 4000      7293            jc      L041077?
257C 020000    7294            ljmp    L041035?
257F           7295   L041077?:
257F           7296   ;        main.c:1240: if (vy*100<=vy_thres*100/2){
257F 8C00      7297            mov     __mulint_PARM_2,r4
2581 8D01      7298            mov     (__mulint_PARM_2 + 1),r5
2583 900064    7299            mov     dptr,#0x0064
2586 C000      7300            push    ar0
2588 C001      7301            push    ar1
258A 120000    7302            lcall   __mulint
258D AA82      7303            mov     r2,dpl
258F AB83      7304            mov     r3,dph
2591 D001      7305            pop     ar1
2593 D000      7306            pop     ar0
2595 904F10    7307            mov     dptr,#_vy_thres
2598 E0        7308            movx    a,@dptr
2599 F500      7309            mov     __mulint_PARM_2,a
259B A3        7310            inc     dptr
259C E0        7311            movx    a,@dptr
259D F501      7312            mov     (__mulint_PARM_2 + 1),a
259F 900064    7313            mov     dptr,#0x0064
25A2 C002      7314            push    ar2
25A4 C003      7315            push    ar3
25A6 C000      7316            push    ar0
25A8 C001      7317            push    ar1
25AA 120000    7318            lcall   __mulint
25AD AE82      7319            mov     r6,dpl
25AF AF83      7320            mov     r7,dph
25B1 750002    7321            mov     __divsint_PARM_2,#0x02
25B4 E4        7322            clr     a
25B5 F501      7323            mov     (__divsint_PARM_2 + 1),a
25B7 8E82      7324            mov     dpl,r6
25B9 8F83      7325            mov     dph,r7
25BB 120000    7326            lcall   __divsint
25BE AE82      7327            mov     r6,dpl
25C0 AF83      7328            mov     r7,dph
25C2 D001      7329            pop     ar1
25C4 D000      7330            pop     ar0
25C6 D003      7331            pop     ar3
25C8 D002      7332            pop     ar2
25CA C3        7333            clr     c
25CB EE        7334            mov     a,r6
25CC 9A        7335            subb    a,r2
25CD EF        7336            mov     a,r7
25CE 6480      7337            xrl     a,#0x80
25D0 8BF0      7338            mov     b,r3
25D2 63F080    7339            xrl     b,#0x80
25D5 95F0      7340            subb    a,b
25D7 5000      7341            jnc     L041078?
25D9 020000    7342            ljmp    L041029?
25DC           7343   L041078?:
25DC           7344   ;        main.c:1241: pwm_left = vy_error; 
25DC 90D2A8    7345            mov     dptr,#_Joystick_Control_vy_error_1_230
25DF E0        7346            movx    a,@dptr
25E0 F5C8      7347            mov     _Joystick_Control_sloc4_1_0,a
25E2 A3        7348            inc     dptr
25E3 E0        7349            movx    a,@dptr
25E4 F5C9      7350            mov     (_Joystick_Control_sloc4_1_0 + 1),a
25E6 9050D0    7351            mov     dptr,#_pwm_left
25E9 E5C8      7352            mov     a,_Joystick_Control_sloc4_1_0
25EB F0        7353            movx    @dptr,a
25EC           7354   ;        main.c:1242: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
25EC 904D80    7355            mov     dptr,#_pwm_corr
25EF E0        7356            movx    a,@dptr
25F0 F578      7357            mov     _Joystick_Control_sloc3_1_0,a
25F2 A3        7358            inc     dptr
25F3 E0        7359            movx    a,@dptr
25F4 F579      7360            mov     (_Joystick_Control_sloc3_1_0 + 1),a
25F6 A3        7361            inc     dptr
25F7 E0        7362            movx    a,@dptr
25F8 F57A      7363            mov     (_Joystick_Control_sloc3_1_0 + 2),a
25FA A3        7364            inc     dptr
25FB E0        7365            movx    a,@dptr
25FC F57B      7366            mov     (_Joystick_Control_sloc3_1_0 + 3),a
25FE 85C882    7367            mov     dpl,_Joystick_Control_sloc4_1_0
2601 85C983    7368            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
2604 C000      7369            push    ar0
2606 C001      7370            push    ar1
2608 120000    7371            lcall   ___sint2fs
260B AA82      7372            mov     r2,dpl
260D AB83      7373            mov     r3,dph
260F AEF0      7374            mov     r6,b
2611 FF        7375            mov     r7,a
2612 C002      7376            push    ar2
2614 C003      7377            push    ar3
2616 C006      7378            push    ar6
2618 C007      7379            push    ar7
261A 857882    7380            mov     dpl,_Joystick_Control_sloc3_1_0
261D 857983    7381            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
2620 857AF0    7382            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
2623 E57B      7383            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
2625 120000    7384            lcall   ___fsmul
2628 AA82      7385            mov     r2,dpl
262A AB83      7386            mov     r3,dph
262C AEF0      7387            mov     r6,b
262E FF        7388            mov     r7,a
262F E581      7389            mov     a,sp
2631 24FC      7390            add     a,#0xfc
2633 F581      7391            mov     sp,a
2635 C002      7392            push    ar2
2637 C003      7393            push    ar3
2639 C006      7394            push    ar6
263B C007      7395            push    ar7
263D 900000    7396            mov     dptr,#0x0000
2640 75F0C8    7397            mov     b,#0xC8
2643 7442      7398            mov     a,#0x42
2645 120000    7399            lcall   ___fsmul
2648 858278    7400            mov     _Joystick_Control_sloc3_1_0,dpl
264B 858379    7401            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
264E 85F07A    7402            mov     (_Joystick_Control_sloc3_1_0 + 2),b
2651 F57B      7403            mov     (_Joystick_Control_sloc3_1_0 + 3),a
2653 E581      7404            mov     a,sp
2655 24FC      7405            add     a,#0xfc
2657 F581      7406            mov     sp,a
2659 D001      7407            pop     ar1
265B D000      7408            pop     ar0
265D E5C8      7409            mov     a,_Joystick_Control_sloc4_1_0
265F 28        7410            add     a,r0
2660 F582      7411            mov     dpl,a
2662 E5C9      7412            mov     a,(_Joystick_Control_sloc4_1_0 + 1)
2664 39        7413            addc    a,r1
2665 F583      7414            mov     dph,a
2667 120000    7415            lcall   ___sint2fs
266A AA82      7416            mov     r2,dpl
266C AB83      7417            mov     r3,dph
266E AEF0      7418            mov     r6,b
2670 FF        7419            mov     r7,a
2671 C002      7420            push    ar2
2673 C003      7421            push    ar3
2675 C006      7422            push    ar6
2677 C007      7423            push    ar7
2679 857882    7424            mov     dpl,_Joystick_Control_sloc3_1_0
267C 857983    7425            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
267F 857AF0    7426            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
2682 E57B      7427            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
2684 120000    7428            lcall   ___fsdiv
2687 AA82      7429            mov     r2,dpl
2689 AB83      7430            mov     r3,dph
268B AEF0      7431            mov     r6,b
268D FF        7432            mov     r7,a
268E E581      7433            mov     a,sp
2690 24FC      7434            add     a,#0xfc
2692 F581      7435            mov     sp,a
2694 8A82      7436            mov     dpl,r2
2696 8B83      7437            mov     dph,r3
2698 8EF0      7438            mov     b,r6
269A EF        7439            mov     a,r7
269B 120000    7440            lcall   ___fs2uchar
269E E582      7441            mov     a,dpl
26A0 905090    7442            mov     dptr,#_pwm_right
26A3 F0        7443            movx    @dptr,a
26A4 020000    7444            ljmp    L041030?
26A7           7445   L041029?:
26A7           7446   ;        main.c:1245: pwm_left = vx_error; 
26A7 9050D0    7447            mov     dptr,#_pwm_left
26AA E8        7448            mov     a,r0
26AB F0        7449            movx    @dptr,a
26AC           7450   ;        main.c:1246: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
26AC 904D80    7451            mov     dptr,#_pwm_corr
26AF E0        7452            movx    a,@dptr
26B0 F5C8      7453            mov     _Joystick_Control_sloc4_1_0,a
26B2 A3        7454            inc     dptr
26B3 E0        7455            movx    a,@dptr
26B4 F5C9      7456            mov     (_Joystick_Control_sloc4_1_0 + 1),a
26B6 A3        7457            inc     dptr
26B7 E0        7458            movx    a,@dptr
26B8 F5CA      7459            mov     (_Joystick_Control_sloc4_1_0 + 2),a
26BA A3        7460            inc     dptr
26BB E0        7461            movx    a,@dptr
26BC F5CB      7462            mov     (_Joystick_Control_sloc4_1_0 + 3),a
26BE 8882      7463            mov     dpl,r0
26C0 8983      7464            mov     dph,r1
26C2 C000      7465            push    ar0
26C4 C001      7466            push    ar1
26C6 120000    7467            lcall   ___sint2fs
26C9 AA82      7468            mov     r2,dpl
26CB AB83      7469            mov     r3,dph
26CD AEF0      7470            mov     r6,b
26CF FF        7471            mov     r7,a
26D0 C002      7472            push    ar2
26D2 C003      7473            push    ar3
26D4 C006      7474            push    ar6
26D6 C007      7475            push    ar7
26D8 85C882    7476            mov     dpl,_Joystick_Control_sloc4_1_0
26DB 85C983    7477            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
26DE 85CAF0    7478            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
26E1 E5CB      7479            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
26E3 120000    7480            lcall   ___fsmul
26E6 AA82      7481            mov     r2,dpl
26E8 AB83      7482            mov     r3,dph
26EA AEF0      7483            mov     r6,b
26EC FF        7484            mov     r7,a
26ED E581      7485            mov     a,sp
26EF 24FC      7486            add     a,#0xfc
26F1 F581      7487            mov     sp,a
26F3 C002      7488            push    ar2
26F5 C003      7489            push    ar3
26F7 C006      7490            push    ar6
26F9 C007      7491            push    ar7
26FB 900000    7492            mov     dptr,#0x0000
26FE 75F0C8    7493            mov     b,#0xC8
2701 7442      7494            mov     a,#0x42
2703 120000    7495            lcall   ___fsmul
2706 8582C8    7496            mov     _Joystick_Control_sloc4_1_0,dpl
2709 8583C9    7497            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
270C 85F0CA    7498            mov     (_Joystick_Control_sloc4_1_0 + 2),b
270F F5CB      7499            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2711 E581      7500            mov     a,sp
2713 24FC      7501            add     a,#0xfc
2715 F581      7502            mov     sp,a
2717 D001      7503            pop     ar1
2719 D000      7504            pop     ar0
271B 90D2A8    7505            mov     dptr,#_Joystick_Control_vy_error_1_230
271E E0        7506            movx    a,@dptr
271F FA        7507            mov     r2,a
2720 A3        7508            inc     dptr
2721 E0        7509            movx    a,@dptr
2722 FB        7510            mov     r3,a
2723 EA        7511            mov     a,r2
2724 28        7512            add     a,r0
2725 F582      7513            mov     dpl,a
2727 EB        7514            mov     a,r3
2728 39        7515            addc    a,r1
2729 F583      7516            mov     dph,a
272B 120000    7517            lcall   ___sint2fs
272E AA82      7518            mov     r2,dpl
2730 AB83      7519            mov     r3,dph
2732 AEF0      7520            mov     r6,b
2734 FF        7521            mov     r7,a
2735 C002      7522            push    ar2
2737 C003      7523            push    ar3
2739 C006      7524            push    ar6
273B C007      7525            push    ar7
273D 85C882    7526            mov     dpl,_Joystick_Control_sloc4_1_0
2740 85C983    7527            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
2743 85CAF0    7528            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
2746 E5CB      7529            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
2748 120000    7530            lcall   ___fsdiv
274B AA82      7531            mov     r2,dpl
274D AB83      7532            mov     r3,dph
274F AEF0      7533            mov     r6,b
2751 FF        7534            mov     r7,a
2752 E581      7535            mov     a,sp
2754 24FC      7536            add     a,#0xfc
2756 F581      7537            mov     sp,a
2758 8A82      7538            mov     dpl,r2
275A 8B83      7539            mov     dph,r3
275C 8EF0      7540            mov     b,r6
275E EF        7541            mov     a,r7
275F 120000    7542            lcall   ___fs2uchar
2762 E582      7543            mov     a,dpl
2764 905090    7544            mov     dptr,#_pwm_right
2767 F0        7545            movx    @dptr,a
2768           7546   L041030?:
2768           7547   ;        main.c:1248: curr_angle -= angle_diff * 1.4; // TUNE THIS 
2768 C018      7548            push    _Joystick_Control_sloc5_1_0
276A C019      7549            push    (_Joystick_Control_sloc5_1_0 + 1)
276C C01A      7550            push    (_Joystick_Control_sloc5_1_0 + 2)
276E C01B      7551            push    (_Joystick_Control_sloc5_1_0 + 3)
2770 903333    7552            mov     dptr,#0x3333
2773 75F0B3    7553            mov     b,#0xB3
2776 743F      7554            mov     a,#0x3F
2778 120000    7555            lcall   ___fsmul
277B 8582C8    7556            mov     _Joystick_Control_sloc4_1_0,dpl
277E 8583C9    7557            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
2781 85F0CA    7558            mov     (_Joystick_Control_sloc4_1_0 + 2),b
2784 F5CB      7559            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2786 E581      7560            mov     a,sp
2788 24FC      7561            add     a,#0xfc
278A F581      7562            mov     sp,a
278C 904D40    7563            mov     dptr,#_curr_angle
278F E0        7564            movx    a,@dptr
2790 FA        7565            mov     r2,a
2791 A3        7566            inc     dptr
2792 E0        7567            movx    a,@dptr
2793 FB        7568            mov     r3,a
2794 A3        7569            inc     dptr
2795 E0        7570            movx    a,@dptr
2796 FE        7571            mov     r6,a
2797 A3        7572            inc     dptr
2798 E0        7573            movx    a,@dptr
2799 FF        7574            mov     r7,a
279A C0C8      7575            push    _Joystick_Control_sloc4_1_0
279C C0C9      7576            push    (_Joystick_Control_sloc4_1_0 + 1)
279E C0CA      7577            push    (_Joystick_Control_sloc4_1_0 + 2)
27A0 C0CB      7578            push    (_Joystick_Control_sloc4_1_0 + 3)
27A2 8A82      7579            mov     dpl,r2
27A4 8B83      7580            mov     dph,r3
27A6 8EF0      7581            mov     b,r6
27A8 EF        7582            mov     a,r7
27A9 120000    7583            lcall   ___fssub
27AC AA82      7584            mov     r2,dpl
27AE AB83      7585            mov     r3,dph
27B0 AEF0      7586            mov     r6,b
27B2 FF        7587            mov     r7,a
27B3 E581      7588            mov     a,sp
27B5 24FC      7589            add     a,#0xfc
27B7 F581      7590            mov     sp,a
27B9 904D40    7591            mov     dptr,#_curr_angle
27BC EA        7592            mov     a,r2
27BD F0        7593            movx    @dptr,a
27BE A3        7594            inc     dptr
27BF EB        7595            mov     a,r3
27C0 F0        7596            movx    @dptr,a
27C1 A3        7597            inc     dptr
27C2 EE        7598            mov     a,r6
27C3 F0        7599            movx    @dptr,a
27C4 A3        7600            inc     dptr
27C5 EF        7601            mov     a,r7
27C6 F0        7602            movx    @dptr,a
27C7 020000    7603            ljmp    L041040?
27CA           7604   L041035?:
27CA           7605   ;        main.c:1252: if (vy*100<=vy_thres*100/2){
27CA 8C00      7606            mov     __mulint_PARM_2,r4
27CC 8D01      7607            mov     (__mulint_PARM_2 + 1),r5
27CE 900064    7608            mov     dptr,#0x0064
27D1 C000      7609            push    ar0
27D3 C001      7610            push    ar1
27D5 120000    7611            lcall   __mulint
27D8 AA82      7612            mov     r2,dpl
27DA AB83      7613            mov     r3,dph
27DC D001      7614            pop     ar1
27DE D000      7615            pop     ar0
27E0 904F10    7616            mov     dptr,#_vy_thres
27E3 E0        7617            movx    a,@dptr
27E4 F500      7618            mov     __mulint_PARM_2,a
27E6 A3        7619            inc     dptr
27E7 E0        7620            movx    a,@dptr
27E8 F501      7621            mov     (__mulint_PARM_2 + 1),a
27EA 900064    7622            mov     dptr,#0x0064
27ED C002      7623            push    ar2
27EF C003      7624            push    ar3
27F1 C000      7625            push    ar0
27F3 C001      7626            push    ar1
27F5 120000    7627            lcall   __mulint
27F8 AC82      7628            mov     r4,dpl
27FA AD83      7629            mov     r5,dph
27FC 750002    7630            mov     __divsint_PARM_2,#0x02
27FF E4        7631            clr     a
2800 F501      7632            mov     (__divsint_PARM_2 + 1),a
2802 8C82      7633            mov     dpl,r4
2804 8D83      7634            mov     dph,r5
2806 120000    7635            lcall   __divsint
2809 AC82      7636            mov     r4,dpl
280B AD83      7637            mov     r5,dph
280D D001      7638            pop     ar1
280F D000      7639            pop     ar0
2811 D003      7640            pop     ar3
2813 D002      7641            pop     ar2
2815 C3        7642            clr     c
2816 EC        7643            mov     a,r4
2817 9A        7644            subb    a,r2
2818 ED        7645            mov     a,r5
2819 6480      7646            xrl     a,#0x80
281B 8BF0      7647            mov     b,r3
281D 63F080    7648            xrl     b,#0x80
2820 95F0      7649            subb    a,b
2822 5000      7650            jnc     L041079?
2824 020000    7651            ljmp    L041032?
2827           7652   L041079?:
2827           7653   ;        main.c:1253: pwm_left = vy_error*100/(vx_error+vy_error);
2827 90D2A8    7654            mov     dptr,#_Joystick_Control_vy_error_1_230
282A E0        7655            movx    a,@dptr
282B FA        7656            mov     r2,a
282C A3        7657            inc     dptr
282D E0        7658            movx    a,@dptr
282E FB        7659            mov     r3,a
282F 8A00      7660            mov     __mulint_PARM_2,r2
2831 8B01      7661            mov     (__mulint_PARM_2 + 1),r3
2833 900064    7662            mov     dptr,#0x0064
2836 C002      7663            push    ar2
2838 C003      7664            push    ar3
283A C000      7665            push    ar0
283C C001      7666            push    ar1
283E 120000    7667            lcall   __mulint
2841 AC82      7668            mov     r4,dpl
2843 AD83      7669            mov     r5,dph
2845 D001      7670            pop     ar1
2847 D000      7671            pop     ar0
2849 D003      7672            pop     ar3
284B D002      7673            pop     ar2
284D EA        7674            mov     a,r2
284E 28        7675            add     a,r0
284F F500      7676            mov     __divsint_PARM_2,a
2851 EB        7677            mov     a,r3
2852 39        7678            addc    a,r1
2853 F501      7679            mov     (__divsint_PARM_2 + 1),a
2855 8C82      7680            mov     dpl,r4
2857 8D83      7681            mov     dph,r5
2859 C002      7682            push    ar2
285B C003      7683            push    ar3
285D 120000    7684            lcall   __divsint
2860 AC82      7685            mov     r4,dpl
2862 D003      7686            pop     ar3
2864 D002      7687            pop     ar2
2866 9050D0    7688            mov     dptr,#_pwm_left
2869 EC        7689            mov     a,r4
286A F0        7690            movx    @dptr,a
286B           7691   ;        main.c:1254: pwm_right =pwm_corr*vy_error; 
286B 904D80    7692            mov     dptr,#_pwm_corr
286E E0        7693            movx    a,@dptr
286F F5C8      7694            mov     _Joystick_Control_sloc4_1_0,a
2871 A3        7695            inc     dptr
2872 E0        7696            movx    a,@dptr
2873 F5C9      7697            mov     (_Joystick_Control_sloc4_1_0 + 1),a
2875 A3        7698            inc     dptr
2876 E0        7699            movx    a,@dptr
2877 F5CA      7700            mov     (_Joystick_Control_sloc4_1_0 + 2),a
2879 A3        7701            inc     dptr
287A E0        7702            movx    a,@dptr
287B F5CB      7703            mov     (_Joystick_Control_sloc4_1_0 + 3),a
287D 8A82      7704            mov     dpl,r2
287F 8B83      7705            mov     dph,r3
2881 120000    7706            lcall   ___sint2fs
2884 AA82      7707            mov     r2,dpl
2886 AB83      7708            mov     r3,dph
2888 ACF0      7709            mov     r4,b
288A FD        7710            mov     r5,a
288B C002      7711            push    ar2
288D C003      7712            push    ar3
288F C004      7713            push    ar4
2891 C005      7714            push    ar5
2893 85C882    7715            mov     dpl,_Joystick_Control_sloc4_1_0
2896 85C983    7716            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
2899 85CAF0    7717            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
289C E5CB      7718            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
289E 120000    7719            lcall   ___fsmul
28A1 AA82      7720            mov     r2,dpl
28A3 AB83      7721            mov     r3,dph
28A5 ACF0      7722            mov     r4,b
28A7 FD        7723            mov     r5,a
28A8 E581      7724            mov     a,sp
28AA 24FC      7725            add     a,#0xfc
28AC F581      7726            mov     sp,a
28AE 8A82      7727            mov     dpl,r2
28B0 8B83      7728            mov     dph,r3
28B2 8CF0      7729            mov     b,r4
28B4 ED        7730            mov     a,r5
28B5 120000    7731            lcall   ___fs2uchar
28B8 E582      7732            mov     a,dpl
28BA 905090    7733            mov     dptr,#_pwm_right
28BD F0        7734            movx    @dptr,a
28BE 020000    7735            ljmp    L041033?
28C1           7736   L041032?:
28C1           7737   ;        main.c:1257: pwm_left = vx_error*100/(vx_error+vy_error);
28C1 8800      7738            mov     __mulint_PARM_2,r0
28C3 8901      7739            mov     (__mulint_PARM_2 + 1),r1
28C5 900064    7740            mov     dptr,#0x0064
28C8 C000      7741            push    ar0
28CA C001      7742            push    ar1
28CC 120000    7743            lcall   __mulint
28CF AA82      7744            mov     r2,dpl
28D1 AB83      7745            mov     r3,dph
28D3 D001      7746            pop     ar1
28D5 D000      7747            pop     ar0
28D7 90D2A8    7748            mov     dptr,#_Joystick_Control_vy_error_1_230
28DA E0        7749            movx    a,@dptr
28DB FC        7750            mov     r4,a
28DC A3        7751            inc     dptr
28DD E0        7752            movx    a,@dptr
28DE FD        7753            mov     r5,a
28DF EC        7754            mov     a,r4
28E0 28        7755            add     a,r0
28E1 F500      7756            mov     __divsint_PARM_2,a
28E3 ED        7757            mov     a,r5
28E4 39        7758            addc    a,r1
28E5 F501      7759            mov     (__divsint_PARM_2 + 1),a
28E7 8A82      7760            mov     dpl,r2
28E9 8B83      7761            mov     dph,r3
28EB C000      7762            push    ar0
28ED C001      7763            push    ar1
28EF 120000    7764            lcall   __divsint
28F2 AA82      7765            mov     r2,dpl
28F4 D001      7766            pop     ar1
28F6 D000      7767            pop     ar0
28F8 9050D0    7768            mov     dptr,#_pwm_left
28FB EA        7769            mov     a,r2
28FC F0        7770            movx    @dptr,a
28FD           7771   ;        main.c:1258: pwm_right = pwm_corr*vx_error; 
28FD 904D80    7772            mov     dptr,#_pwm_corr
2900 E0        7773            movx    a,@dptr
2901 FA        7774            mov     r2,a
2902 A3        7775            inc     dptr
2903 E0        7776            movx    a,@dptr
2904 FB        7777            mov     r3,a
2905 A3        7778            inc     dptr
2906 E0        7779            movx    a,@dptr
2907 FC        7780            mov     r4,a
2908 A3        7781            inc     dptr
2909 E0        7782            movx    a,@dptr
290A FD        7783            mov     r5,a
290B 8882      7784            mov     dpl,r0
290D 8983      7785            mov     dph,r1
290F C002      7786            push    ar2
2911 C003      7787            push    ar3
2913 C004      7788            push    ar4
2915 C005      7789            push    ar5
2917 120000    7790            lcall   ___sint2fs
291A AE82      7791            mov     r6,dpl
291C AF83      7792            mov     r7,dph
291E A8F0      7793            mov     r0,b
2920 F9        7794            mov     r1,a
2921 D005      7795            pop     ar5
2923 D004      7796            pop     ar4
2925 D003      7797            pop     ar3
2927 D002      7798            pop     ar2
2929 C006      7799            push    ar6
292B C007      7800            push    ar7
292D C000      7801            push    ar0
292F C001      7802            push    ar1
2931 8A82      7803            mov     dpl,r2
2933 8B83      7804            mov     dph,r3
2935 8CF0      7805            mov     b,r4
2937 ED        7806            mov     a,r5
2938 120000    7807            lcall   ___fsmul
293B AA82      7808            mov     r2,dpl
293D AB83      7809            mov     r3,dph
293F ACF0      7810            mov     r4,b
2941 FD        7811            mov     r5,a
2942 E581      7812            mov     a,sp
2944 24FC      7813            add     a,#0xfc
2946 F581      7814            mov     sp,a
2948 8A82      7815            mov     dpl,r2
294A 8B83      7816            mov     dph,r3
294C 8CF0      7817            mov     b,r4
294E ED        7818            mov     a,r5
294F 120000    7819            lcall   ___fs2uchar
2952 E582      7820            mov     a,dpl
2954 905090    7821            mov     dptr,#_pwm_right
2957 F0        7822            movx    @dptr,a
2958           7823   L041033?:
2958           7824   ;        main.c:1260: curr_angle += angle_diff * 1.4; // TUNE THIS 
2958 C018      7825            push    _Joystick_Control_sloc5_1_0
295A C019      7826            push    (_Joystick_Control_sloc5_1_0 + 1)
295C C01A      7827            push    (_Joystick_Control_sloc5_1_0 + 2)
295E C01B      7828            push    (_Joystick_Control_sloc5_1_0 + 3)
2960 903333    7829            mov     dptr,#0x3333
2963 75F0B3    7830            mov     b,#0xB3
2966 743F      7831            mov     a,#0x3F
2968 120000    7832            lcall   ___fsmul
296B AA82      7833            mov     r2,dpl
296D AB83      7834            mov     r3,dph
296F ACF0      7835            mov     r4,b
2971 FD        7836            mov     r5,a
2972 E581      7837            mov     a,sp
2974 24FC      7838            add     a,#0xfc
2976 F581      7839            mov     sp,a
2978 904D40    7840            mov     dptr,#_curr_angle
297B E0        7841            movx    a,@dptr
297C FE        7842            mov     r6,a
297D A3        7843            inc     dptr
297E E0        7844            movx    a,@dptr
297F FF        7845            mov     r7,a
2980 A3        7846            inc     dptr
2981 E0        7847            movx    a,@dptr
2982 F8        7848            mov     r0,a
2983 A3        7849            inc     dptr
2984 E0        7850            movx    a,@dptr
2985 F9        7851            mov     r1,a
2986 C002      7852            push    ar2
2988 C003      7853            push    ar3
298A C004      7854            push    ar4
298C C005      7855            push    ar5
298E 8E82      7856            mov     dpl,r6
2990 8F83      7857            mov     dph,r7
2992 88F0      7858            mov     b,r0
2994 E9        7859            mov     a,r1
2995 120000    7860            lcall   ___fsadd
2998 AA82      7861            mov     r2,dpl
299A AB83      7862            mov     r3,dph
299C ACF0      7863            mov     r4,b
299E FD        7864            mov     r5,a
299F E581      7865            mov     a,sp
29A1 24FC      7866            add     a,#0xfc
29A3 F581      7867            mov     sp,a
29A5 904D40    7868            mov     dptr,#_curr_angle
29A8 EA        7869            mov     a,r2
29A9 F0        7870            movx    @dptr,a
29AA A3        7871            inc     dptr
29AB EB        7872            mov     a,r3
29AC F0        7873            movx    @dptr,a
29AD A3        7874            inc     dptr
29AE EC        7875            mov     a,r4
29AF F0        7876            movx    @dptr,a
29B0 A3        7877            inc     dptr
29B1 ED        7878            mov     a,r5
29B2 F0        7879            movx    @dptr,a
29B3           7880   L041040?:
29B3           7881   ;        main.c:1265: last_raw_angle = raw_angle; 
29B3 904D00    7882            mov     dptr,#_raw_angle
29B6 E0        7883            movx    a,@dptr
29B7 FA        7884            mov     r2,a
29B8 A3        7885            inc     dptr
29B9 E0        7886            movx    a,@dptr
29BA FB        7887            mov     r3,a
29BB A3        7888            inc     dptr
29BC E0        7889            movx    a,@dptr
29BD FC        7890            mov     r4,a
29BE A3        7891            inc     dptr
29BF E0        7892            movx    a,@dptr
29C0 FD        7893            mov     r5,a
29C1 904CC0    7894            mov     dptr,#_last_raw_angle
29C4 EA        7895            mov     a,r2
29C5 F0        7896            movx    @dptr,a
29C6 A3        7897            inc     dptr
29C7 EB        7898            mov     a,r3
29C8 F0        7899            movx    @dptr,a
29C9 A3        7900            inc     dptr
29CA EC        7901            mov     a,r4
29CB F0        7902            movx    @dptr,a
29CC A3        7903            inc     dptr
29CD ED        7904            mov     a,r5
29CE F0        7905            movx    @dptr,a
29CF           7906   ;        main.c:1266: return curr_angle; 
29CF 904D40    7907            mov     dptr,#_curr_angle
29D2 E0        7908            movx    a,@dptr
29D3 FA        7909            mov     r2,a
29D4 A3        7910            inc     dptr
29D5 E0        7911            movx    a,@dptr
29D6 FB        7912            mov     r3,a
29D7 A3        7913            inc     dptr
29D8 E0        7914            movx    a,@dptr
29D9 FC        7915            mov     r4,a
29DA A3        7916            inc     dptr
29DB E0        7917            movx    a,@dptr
29DC 8A82      7918            mov     dpl,r2
29DE 8B83      7919            mov     dph,r3
29E0 8CF0      7920            mov     b,r4
29E2 22        7921            ret
29E3           7922   ;------------------------------------------------------------
29E3           7923   ;Allocation info for local variables in function 'main'
29E3           7924   ;------------------------------------------------------------
29E3           7925   ;c                         Allocated with name '_main_c_1_253'
29E3           7926   ;vx                        Allocated with name '_main_vx_1_253'
29E3           7927   ;vy                        Allocated with name '_main_vy_1_253'
29E3           7928   ;auto_mode                 Allocated with name '_main_auto_mode_1_253'
29E3           7929   ;pick_char                 Allocated with name '_main_pick_char_1_253'
29E3           7930   ;angle_count               Allocated with name '_main_angle_count_1_253'
29E3           7931   ;------------------------------------------------------------
29E3           7932   ;        main.c:1269: void main (void)
29E3           7933   ;        -----------------------------------------
29E3           7934   ;         function main
29E3           7935   ;        -----------------------------------------
29E3           7936   _main:
29E3           7937   ;        main.c:1272: xdata int vx = 0, vy = 0; 
29E3 90D388    7938            mov     dptr,#_main_vx_1_253
29E6 E4        7939            clr     a
29E7 F0        7940            movx    @dptr,a
29E8 A3        7941            inc     dptr
29E9 F0        7942            movx    @dptr,a
29EA 90D3C8    7943            mov     dptr,#_main_vy_1_253
29ED E4        7944            clr     a
29EE F0        7945            movx    @dptr,a
29EF A3        7946            inc     dptr
29F0 F0        7947            movx    @dptr,a
29F1           7948   ;        main.c:1273: xdata int auto_mode = 0;
29F1 90D418    7949            mov     dptr,#_main_auto_mode_1_253
29F4 E4        7950            clr     a
29F5 F0        7951            movx    @dptr,a
29F6 A3        7952            inc     dptr
29F7 F0        7953            movx    @dptr,a
29F8           7954   ;        main.c:1274: xdata char pick_char = '0';
29F8 90D468    7955            mov     dptr,#_main_pick_char_1_253
29FB 7430      7956            mov     a,#0x30
29FD F0        7957            movx    @dptr,a
29FE           7958   ;        main.c:1277: Init_all();
29FE 120000    7959            lcall   _Init_all
2A01           7960   ;        main.c:1278: BMM150_Init();
2A01 120000    7961            lcall   _BMM150_Init
2A04           7962   ;        main.c:1279: waitms(500);
2A04 9001F4    7963            mov     dptr,#0x01F4
2A07 120000    7964            lcall   _waitms
2A0A           7965   ;        main.c:1280: UART1_Init(9600);
2A0A 902580    7966            mov     dptr,#0x2580
2A0D E4        7967            clr     a
2A0E F5F0      7968            mov     b,a
2A10 120000    7969            lcall   _UART1_Init
2A13           7970   ;        main.c:1282: ReceptionOff();
2A13 120000    7971            lcall   _ReceptionOff
2A16           7972   ;        main.c:1285: SendATCommand("AT+VER\r\n");
2A16 902280    7973            mov     dptr,#__str_11
2A19 75F080    7974            mov     b,#0x80
2A1C 120000    7975            lcall   _SendATCommand
2A1F           7976   ;        main.c:1286: SendATCommand("AT+BAUD\r\n");
2A1F 9022C0    7977            mov     dptr,#__str_12
2A22 75F080    7978            mov     b,#0x80
2A25 120000    7979            lcall   _SendATCommand
2A28           7980   ;        main.c:1287: SendATCommand("AT+RFID\r\n");
2A28 902300    7981            mov     dptr,#__str_13
2A2B 75F080    7982            mov     b,#0x80
2A2E 120000    7983            lcall   _SendATCommand
2A31           7984   ;        main.c:1288: SendATCommand("AT+DVID\r\n");
2A31 902340    7985            mov     dptr,#__str_14
2A34 75F080    7986            mov     b,#0x80
2A37 120000    7987            lcall   _SendATCommand
2A3A           7988   ;        main.c:1289: SendATCommand("AT+RFC002\r\n");
2A3A 902380    7989            mov     dptr,#__str_15
2A3D 75F080    7990            mov     b,#0x80
2A40 120000    7991            lcall   _SendATCommand
2A43           7992   ;        main.c:1290: SendATCommand("AT+POWE\r\n");
2A43 9023C0    7993            mov     dptr,#__str_16
2A46 75F080    7994            mov     b,#0x80
2A49 120000    7995            lcall   _SendATCommand
2A4C           7996   ;        main.c:1291: SendATCommand("AT+CLSS\r\n");
2A4C 902400    7997            mov     dptr,#__str_17
2A4F 75F080    7998            mov     b,#0x80
2A52 120000    7999            lcall   _SendATCommand
2A55           8000   ;        main.c:1292: SendATCommand("AT+DVIDEF11\r\n");  
2A55 902440    8001            mov     dptr,#__str_18
2A58 75F080    8002            mov     b,#0x80
2A5B 120000    8003            lcall   _SendATCommand
2A5E           8004   ;        main.c:1295: L_bridge_1 = 0; 
2A5E C2A1      8005            clr     _P2_1
2A60           8006   ;        main.c:1296: L_bridge_2 = 0; 
2A60 C2A2      8007            clr     _P2_2
2A62           8008   ;        main.c:1297: R_bridge_1 = 0; 
2A62 C2A4      8009            clr     _P2_4
2A64           8010   ;        main.c:1298: R_bridge_2 = 0; 
2A64 C2A3      8011            clr     _P2_3
2A66           8012   ;        main.c:1301: curr_angle = Read_angle();
2A66 120000    8013            lcall   _Read_angle
2A69 AA82      8014            mov     r2,dpl
2A6B AB83      8015            mov     r3,dph
2A6D ACF0      8016            mov     r4,b
2A6F FD        8017            mov     r5,a
2A70 904D40    8018            mov     dptr,#_curr_angle
2A73 EA        8019            mov     a,r2
2A74 F0        8020            movx    @dptr,a
2A75 A3        8021            inc     dptr
2A76 EB        8022            mov     a,r3
2A77 F0        8023            movx    @dptr,a
2A78 A3        8024            inc     dptr
2A79 EC        8025            mov     a,r4
2A7A F0        8026            movx    @dptr,a
2A7B A3        8027            inc     dptr
2A7C ED        8028            mov     a,r5
2A7D F0        8029            movx    @dptr,a
2A7E           8030   ;        main.c:1302: waitms(1000);
2A7E 9003E8    8031            mov     dptr,#0x03E8
2A81 120000    8032            lcall   _waitms
2A84           8033   ;        main.c:1303: while(1){  
2A84           8034   L042016?:
2A84           8035   ;        main.c:1305: temp = Read_angle();
2A84 120000    8036            lcall   _Read_angle
2A87 AA82      8037            mov     r2,dpl
2A89 AB83      8038            mov     r3,dph
2A8B ACF0      8039            mov     r4,b
2A8D FD        8040            mov     r5,a
2A8E 905250    8041            mov     dptr,#_temp
2A91 EA        8042            mov     a,r2
2A92 F0        8043            movx    @dptr,a
2A93 A3        8044            inc     dptr
2A94 EB        8045            mov     a,r3
2A95 F0        8046            movx    @dptr,a
2A96 A3        8047            inc     dptr
2A97 EC        8048            mov     a,r4
2A98 F0        8049            movx    @dptr,a
2A99 A3        8050            inc     dptr
2A9A ED        8051            mov     a,r5
2A9B F0        8052            movx    @dptr,a
2A9C           8053   ;        main.c:1306: printf("distance: %d\r\n", distance);
2A9C 905210    8054            mov     dptr,#_distance
2A9F E0        8055            movx    a,@dptr
2AA0 C0E0      8056            push    acc
2AA2 A3        8057            inc     dptr
2AA3 E0        8058            movx    a,@dptr
2AA4 C0E0      8059            push    acc
2AA6 74C0      8060            mov     a,#__str_19
2AA8 C0E0      8061            push    acc
2AAA 7424      8062            mov     a,#(__str_19 >> 8)
2AAC C0E0      8063            push    acc
2AAE 7480      8064            mov     a,#0x80
2AB0 C0E0      8065            push    acc
2AB2 120000    8066            lcall   _printf
2AB5 E581      8067            mov     a,sp
2AB7 24FB      8068            add     a,#0xfb
2AB9 F581      8069            mov     sp,a
2ABB           8070   ;        main.c:1308: if(pick_char=='1'){
2ABB 90D468    8071            mov     dptr,#_main_pick_char_1_253
2ABE E0        8072            movx    a,@dptr
2ABF FA        8073            mov     r2,a
2AC0 BA3100    8074            cjne    r2,#0x31,L042002?
2AC3           8075   ;        main.c:1309: servo_pick();
2AC3 120000    8076            lcall   _servo_pick
2AC6           8077   ;        main.c:1310: waitms(1000);
2AC6 9003E8    8078            mov     dptr,#0x03E8
2AC9 120000    8079            lcall   _waitms
2ACC           8080   ;        main.c:1311: pick_char = '0';
2ACC 90D468    8081            mov     dptr,#_main_pick_char_1_253
2ACF 7430      8082            mov     a,#0x30
2AD1 F0        8083            movx    @dptr,a
2AD2           8084   L042002?:
2AD2           8085   ;        main.c:1314: if(auto_mode){
2AD2 90D418    8086            mov     dptr,#_main_auto_mode_1_253
2AD5 E0        8087            movx    a,@dptr
2AD6 FA        8088            mov     r2,a
2AD7 A3        8089            inc     dptr
2AD8 E0        8090            movx    a,@dptr
2AD9 FB        8091            mov     r3,a
2ADA 4A        8092            orl     a,r2
2ADB 6000      8093            jz      L042004?
2ADD           8094   ;        main.c:1315: Auto_mode_slave();
2ADD 120000    8095            lcall   _Auto_mode_slave
2AE0           8096   ;        main.c:1316: auto_mode = 0;
2AE0 90D418    8097            mov     dptr,#_main_auto_mode_1_253
2AE3 E4        8098            clr     a
2AE4 F0        8099            movx    @dptr,a
2AE5 A3        8100            inc     dptr
2AE6 F0        8101            movx    @dptr,a
2AE7           8102   L042004?:
2AE7           8103   ;        main.c:1318: if(RXU1()) // Something has arrived
2AE7 120000    8104            lcall   _RXU1
2AEA 5000      8105            jnc     L042016?
2AEC           8106   ;        main.c:1320: c=getchar1();
2AEC 120000    8107            lcall   _getchar1
2AEF AA82      8108            mov     r2,dpl
2AF1           8109   ;        main.c:1321: if(c=='!') // Master is sending message
2AF1 BA2180    8110            cjne    r2,#0x21,L042031?
2AF4 8000      8111            sjmp    L042032?
2AF6           8112   L042031?:
2AF6 020000    8113            ljmp    L042011?
2AF9           8114   L042032?:
2AF9           8115   ;        main.c:1323: getstr1(buff, sizeof(buff)-1);
2AF9 75A013    8116            mov     _getstr1_PARM_2,#0x13
2AFC 905610    8117            mov     dptr,#_buff
2AFF 75F040    8118            mov     b,#0x40
2B02 120000    8119            lcall   _getstr1
2B05           8120   ;        main.c:1324: if(strlen(buff)==11)
2B05 905610    8121            mov     dptr,#_buff
2B08 75F040    8122            mov     b,#0x40
2B0B 120000    8123            lcall   _strlen
2B0E AB82      8124            mov     r3,dpl
2B10 AC83      8125            mov     r4,dph
2B12 BB0B40    8126            cjne    r3,#0x0B,L042033?
2B15 BC0040    8127            cjne    r4,#0x00,L042033?
2B18 8000      8128            sjmp    L042034?
2B1A           8129   L042033?:
2B1A 020000    8130            ljmp    L042006?
2B1D           8131   L042034?:
2B1D           8132   ;        main.c:1326: printf("Master says: %s\r\n", buff);
2B1D 7410      8133            mov     a,#_buff
2B1F C0E0      8134            push    acc
2B21 7456      8135            mov     a,#(_buff >> 8)
2B23 C0E0      8136            push    acc
2B25 7440      8137            mov     a,#0x40
2B27 C0E0      8138            push    acc
2B29 7400      8139            mov     a,#__str_20
2B2B C0E0      8140            push    acc
2B2D 7427      8141            mov     a,#(__str_20 >> 8)
2B2F C0E0      8142            push    acc
2B31 7480      8143            mov     a,#0x80
2B33 C0E0      8144            push    acc
2B35 120000    8145            lcall   _printf
2B38 E581      8146            mov     a,sp
2B3A 24FA      8147            add     a,#0xfa
2B3C F581      8148            mov     sp,a
2B3E           8149   ;        main.c:1327: sscanf(buff, "%03d,%03d,%c,%01d", &vx, &vy, &pick_char, &auto_mode);
2B3E 7418      8150            mov     a,#_main_auto_mode_1_253
2B40 C0E0      8151            push    acc
2B42 74D4      8152            mov     a,#(_main_auto_mode_1_253 >> 8)
2B44 C0E0      8153            push    acc
2B46 E4        8154            clr     a
2B47 C0E0      8155            push    acc
2B49 7468      8156            mov     a,#_main_pick_char_1_253
2B4B C0E0      8157            push    acc
2B4D 74D4      8158            mov     a,#(_main_pick_char_1_253 >> 8)
2B4F C0E0      8159            push    acc
2B51 E4        8160            clr     a
2B52 C0E0      8161            push    acc
2B54 74C8      8162            mov     a,#_main_vy_1_253
2B56 C0E0      8163            push    acc
2B58 74D3      8164            mov     a,#(_main_vy_1_253 >> 8)
2B5A C0E0      8165            push    acc
2B5C E4        8166            clr     a
2B5D C0E0      8167            push    acc
2B5F 7488      8168            mov     a,#_main_vx_1_253
2B61 C0E0      8169            push    acc
2B63 74D3      8170            mov     a,#(_main_vx_1_253 >> 8)
2B65 C0E0      8171            push    acc
2B67 E4        8172            clr     a
2B68 C0E0      8173            push    acc
2B6A 7440      8174            mov     a,#__str_21
2B6C C0E0      8175            push    acc
2B6E 7427      8176            mov     a,#(__str_21 >> 8)
2B70 C0E0      8177            push    acc
2B72 7480      8178            mov     a,#0x80
2B74 C0E0      8179            push    acc
2B76 7410      8180            mov     a,#_buff
2B78 C0E0      8181            push    acc
2B7A 7456      8182            mov     a,#(_buff >> 8)
2B7C C0E0      8183            push    acc
2B7E 7440      8184            mov     a,#0x40
2B80 C0E0      8185            push    acc
2B82 120000    8186            lcall   _sscanf
2B85 E581      8187            mov     a,sp
2B87 24EE      8188            add     a,#0xee
2B89 F581      8189            mov     sp,a
2B8B           8190   ;        main.c:1329: curr_angle = Joystick_Control(&vx, &vy);
2B8B 7560C8    8191            mov     _Joystick_Control_PARM_2,#_main_vy_1_253
2B8E 7561D3    8192            mov     (_Joystick_Control_PARM_2 + 1),#(_main_vy_1_253 >> 8)
2B91 756200    8193            mov     (_Joystick_Control_PARM_2 + 2),#0x00
2B94 90D388    8194            mov     dptr,#_main_vx_1_253
2B97 75F000    8195            mov     b,#0x00
2B9A 120000    8196            lcall   _Joystick_Control
2B9D AB82      8197            mov     r3,dpl
2B9F AC83      8198            mov     r4,dph
2BA1 ADF0      8199            mov     r5,b
2BA3 FE        8200            mov     r6,a
2BA4 904D40    8201            mov     dptr,#_curr_angle
2BA7 EB        8202            mov     a,r3
2BA8 F0        8203            movx    @dptr,a
2BA9 A3        8204            inc     dptr
2BAA EC        8205            mov     a,r4
2BAB F0        8206            movx    @dptr,a
2BAC A3        8207            inc     dptr
2BAD ED        8208            mov     a,r5
2BAE F0        8209            movx    @dptr,a
2BAF A3        8210            inc     dptr
2BB0 EE        8211            mov     a,r6
2BB1 F0        8212            movx    @dptr,a
2BB2 020000    8213            ljmp    L042016?
2BB5           8214   L042006?:
2BB5           8215   ;        main.c:1332: printf("*** BAD MESSAGE ***: %s\r\n", buff);
2BB5 7410      8216            mov     a,#_buff
2BB7 C0E0      8217            push    acc
2BB9 7456      8218            mov     a,#(_buff >> 8)
2BBB C0E0      8219            push    acc
2BBD 7440      8220            mov     a,#0x40
2BBF C0E0      8221            push    acc
2BC1 7480      8222            mov     a,#__str_22
2BC3 C0E0      8223            push    acc
2BC5 7427      8224            mov     a,#(__str_22 >> 8)
2BC7 C0E0      8225            push    acc
2BC9 7480      8226            mov     a,#0x80
2BCB C0E0      8227            push    acc
2BCD 120000    8228            lcall   _printf
2BD0 E581      8229            mov     a,sp
2BD2 24FA      8230            add     a,#0xfa
2BD4 F581      8231            mov     sp,a
2BD6 020000    8232            ljmp    L042016?
2BD9           8233   L042011?:
2BD9           8234   ;        main.c:1335: else if(c=='@') // Master wants slave data
2BD9 BA40C0    8235            cjne    r2,#0x40,L042035?
2BDC 8000      8236            sjmp    L042036?
2BDE           8237   L042035?:
2BDE 020000    8238            ljmp    L042016?
2BE1           8239   L042036?:
2BE1           8240   ;        main.c:1337: sprintf(buff, "0,00,%04ld,%05d,%03d\n", freq100, weight, (int)curr_angle);
2BE1 904D40    8241            mov     dptr,#_curr_angle
2BE4 E0        8242            movx    a,@dptr
2BE5 FA        8243            mov     r2,a
2BE6 A3        8244            inc     dptr
2BE7 E0        8245            movx    a,@dptr
2BE8 FB        8246            mov     r3,a
2BE9 A3        8247            inc     dptr
2BEA E0        8248            movx    a,@dptr
2BEB FC        8249            mov     r4,a
2BEC A3        8250            inc     dptr
2BED E0        8251            movx    a,@dptr
2BEE 8A82      8252            mov     dpl,r2
2BF0 8B83      8253            mov     dph,r3
2BF2 8CF0      8254            mov     b,r4
2BF4 120000    8255            lcall   ___fs2sint
2BF7 AA82      8256            mov     r2,dpl
2BF9 AB83      8257            mov     r3,dph
2BFB C002      8258            push    ar2
2BFD C003      8259            push    ar3
2BFF 904C00    8260            mov     dptr,#_weight
2C02 E0        8261            movx    a,@dptr
2C03 C0E0      8262            push    acc
2C05 A3        8263            inc     dptr
2C06 E0        8264            movx    a,@dptr
2C07 C0E0      8265            push    acc
2C09 9055D0    8266            mov     dptr,#_freq100
2C0C E0        8267            movx    a,@dptr
2C0D C0E0      8268            push    acc
2C0F A3        8269            inc     dptr
2C10 E0        8270            movx    a,@dptr
2C11 C0E0      8271            push    acc
2C13 A3        8272            inc     dptr
2C14 E0        8273            movx    a,@dptr
2C15 C0E0      8274            push    acc
2C17 A3        8275            inc     dptr
2C18 E0        8276            movx    a,@dptr
2C19 C0E0      8277            push    acc
2C1B 7478      8278            mov     a,#__str_10
2C1D C0E0      8279            push    acc
2C1F 7419      8280            mov     a,#(__str_10 >> 8)
2C21 C0E0      8281            push    acc
2C23 7480      8282            mov     a,#0x80
2C25 C0E0      8283            push    acc
2C27 7410      8284            mov     a,#_buff
2C29 C0E0      8285            push    acc
2C2B 7456      8286            mov     a,#(_buff >> 8)
2C2D C0E0      8287            push    acc
2C2F 7440      8288            mov     a,#0x40
2C31 C0E0      8289            push    acc
2C33 120000    8290            lcall   _sprintf
2C36 E581      8291            mov     a,sp
2C38 24F2      8292            add     a,#0xf2
2C3A F581      8293            mov     sp,a
2C3C           8294   ;        main.c:1338: waitms(5); // The radio seems to need this delay...
2C3C 900005    8295            mov     dptr,#0x0005
2C3F 120000    8296            lcall   _waitms
2C42           8297   ;        main.c:1339: sendstr1(buff);
2C42 905610    8298            mov     dptr,#_buff
2C45 75F040    8299            mov     b,#0x40
2C48 120000    8300            lcall   _sendstr1
2C4B 020000    8301            ljmp    L042016?
2C4E           8302            rseg R_CSEG
2C4E           8303   
0000           8304            rseg R_XINIT
0000           8305   __xinit__pwm_counter:
0000 0000      8306            db 0x00,0x00    ; 0
0002           8307   __xinit__servo_counter:
0002 0000      8308            db 0x00,0x00    ; 0
0004           8309   __xinit__pwm_left:
0004 00        8310            db 0x00         ; 0
0005           8311   __xinit__pwm_right:
0005 00        8312            db 0x00         ; 0
0006           8313   __xinit__L_motor_dir:
0006 01        8314            db 0x01         ; 1
0007           8315   __xinit__R_motor_dir:
0007 01        8316            db 0x01         ; 1
0008           8317   __xinit__servo_base:
0008 32        8318            db 0x32         ; 50
0009           8319   __xinit__servo_arm:
0009 32        8320            db 0x32         ; 50
000A           8321   __xinit__vx_thres:
000A A100      8322            db 0xA1,0x00    ;  161
000C           8323   __xinit__vy_thres:
000C A600      8324            db 0xA6,0x00    ;  166
000E           8325   __xinit__vx:
000E 0000      8326            db 0x00,0x00    ;  0
0010           8327   __xinit__vy:
0010 0000      8328            db 0x00,0x00    ;  0
0012           8329   __xinit__fre_mea_count:
0012 0000      8330            db 0x00,0x00    ; 0
0014           8331   __xinit__weight_mea_count:
0014 0000      8332            db 0x00,0x00    ; 0
0016           8333   __xinit__seed:
0016 3930      8334            db 0x39,0x30    ; 12345
0018           8335   __xinit__pwm_corr:
0018 3333733F  8336            db 0x33,0x33,0x73,0x3F  ;  9.500000e-001
001C           8337   __xinit__curr_angle:
001C 00000000  8338            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0020           8339   __xinit__raw_angle:
0020 00000000  8340            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0024           8341   __xinit__last_raw_angle:
0024 00000000  8342            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0028           8343   __xinit__angle_diff:
0028 00000000  8344            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
002C           8345   __xinit__mea_yes:
002C 01        8346            db 0x01         ;  1
002D           8347   __xinit__weight:
002D 0000      8348            db 0x00,0x00    ; 0
002F           8349   __xinit__duration:
002F 00000000  8350            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0033           8351   
0000           8352            rseg R_CONST
0000           8353   __str_0:
0000 4572726F  8354            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
0035 0D        8355            db 0x0D
0036 0A        8356            db 0x0A
0037 00        8357            db 0x00
0038           8358   __str_1:
0038 424D4D31  8359            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
0068 0D        8360            db 0x0D
0069 0A        8361            db 0x0A
006A 00        8362            db 0x00
006B           8363   __str_2:
006B 436F6D6D  8364            db 'Command: %s'
     616E643A
     202573
0076 00        8365            db 0x00
0077           8366   __str_3:
0077 52657370  8367            db 'Response: %s'
     6F6E7365
     3A202573
0083 0D        8368            db 0x0D
0084 0A        8369            db 0x0A
0085 00        8370            db 0x00
0086           8371   __str_4:
0086 41542B44  8372            db 'AT+DVID0000'
     56494430
     303030
0091 0D        8373            db 0x0D
0092 0A        8374            db 0x0A
0093 00        8375            db 0x00
0094           8376   __str_5:
0094 54696D65  8377            db 'Time out'
     206F7574
009C 0D        8378            db 0x0D
009D 0A        8379            db 0x0A
009E 00        8380            db 0x00
009F           8381   __str_6:
009F 6D617374  8382            db 'master_messgae_auto_mode: %s'
     65725F6D
     65737367
     61655F61
     75746F5F
     6D6F6465
     3A202573
00BB 0D        8383            db 0x0D
00BC 0A        8384            db 0x0A
00BD 00        8385            db 0x00
00BE           8386   __str_7:
00BE 25303364  8387            db '%03d,%03d,%01d,%01d'
     2C253033
     642C2530
     31642C25
     303164
00D1 00        8388            db 0x00
00D2           8389   __str_8:
00D2 25303164  8390            db '%01d,%02d,%ld,%05d,%03d'
     2C253032
     642C256C
     642C2530
     35642C25
     303364
00E9 0A        8391            db 0x0A
00EA 00        8392            db 0x00
00EB           8393   __str_9:
00EB 663A2530  8394            db 'f:%04ld, d1:%d, d2:%d, bound_dectect: %d'
     346C642C
     2064313A
     25642C20
     64323A25
     642C2062
     6F756E64
     5F646563
     74656374
     3A202564
0113 0D        8395            db 0x0D
0114 0A        8396            db 0x0A
0115 00        8397            db 0x00
0116           8398   __str_10:
0116 302C3030  8399            db '0,00,%04ld,%05d,%03d'
     2C253034
     6C642C25
     3035642C
     25303364
012A 0A        8400            db 0x0A
012B 00        8401            db 0x00
012C           8402   __str_11:
012C 41542B56  8403            db 'AT+VER'
     4552
0132 0D        8404            db 0x0D
0133 0A        8405            db 0x0A
0134 00        8406            db 0x00
0135           8407   __str_12:
0135 41542B42  8408            db 'AT+BAUD'
     415544
013C 0D        8409            db 0x0D
013D 0A        8410            db 0x0A
013E 00        8411            db 0x00
013F           8412   __str_13:
013F 41542B52  8413            db 'AT+RFID'
     464944
0146 0D        8414            db 0x0D
0147 0A        8415            db 0x0A
0148 00        8416            db 0x00
0149           8417   __str_14:
0149 41542B44  8418            db 'AT+DVID'
     564944
0150 0D        8419            db 0x0D
0151 0A        8420            db 0x0A
0152 00        8421            db 0x00
0153           8422   __str_15:
0153 41542B52  8423            db 'AT+RFC002'
     46433030
     32
015C 0D        8424            db 0x0D
015D 0A        8425            db 0x0A
015E 00        8426            db 0x00
015F           8427   __str_16:
015F 41542B50  8428            db 'AT+POWE'
     4F5745
0166 0D        8429            db 0x0D
0167 0A        8430            db 0x0A
0168 00        8431            db 0x00
0169           8432   __str_17:
0169 41542B43  8433            db 'AT+CLSS'
     4C5353
0170 0D        8434            db 0x0D
0171 0A        8435            db 0x0A
0172 00        8436            db 0x00
0173           8437   __str_18:
0173 41542B44  8438            db 'AT+DVIDEF11'
     56494445
     463131
017E 0D        8439            db 0x0D
017F 0A        8440            db 0x0A
0180 00        8441            db 0x00
0181           8442   __str_19:
0181 64697374  8443            db 'distance: %d'
     616E6365
     3A202564
018D 0D        8444            db 0x0D
018E 0A        8445            db 0x0A
018F 00        8446            db 0x00
0190           8447   __str_20:
0190 4D617374  8448            db 'Master says: %s'
     65722073
     6179733A
     202573
019F 0D        8449            db 0x0D
01A0 0A        8450            db 0x0A
01A1 00        8451            db 0x00
01A2           8452   __str_21:
01A2 25303364  8453            db '%03d,%03d,%c,%01d'
     2C253033
     642C2563
     2C253031
     64
01B3 00        8454            db 0x00
01B4           8455   __str_22:
01B4 2A2A2A20  8456            db '*** BAD MESSAGE ***: %s'
     42414420
     4D455353
     41474520
     2A2A2A3A
     202573
01CB 0D        8457            db 0x0D
01CC 0A        8458            db 0x0A
01CD 00        8459            db 0x00
01CE           8460   
0096           8461            CSEG
0096           8462   
0096           8463   end
