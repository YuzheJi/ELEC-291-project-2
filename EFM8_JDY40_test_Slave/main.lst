0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Apr 03 06:53:28 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _check_bound_PARM_2
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Joystick_Control
0000             30            public _Auto_mode_slave
0000             31            public _Read_angle
0000             32            public _get_random_90_250
0000             33            public _simple_rand
0000             34            public _Move_forward
0000             35            public _Right_angle
0000             36            public _Move_back_ms
0000             37            public _Init_all
0000             38            public _check_bound
0000             39            public _servo_moveaway
0000             40            public _Move_forward_ms
0000             41            public _servo_push
0000             42            public _servo_pick
0000             43            public _Timer5_ISR
0000             44            public _ReadHX711
0000             45            public _ADC_at_Pin
0000             46            public _InitPinADC
0000             47            public _InitADC
0000             48            public _Set_Pin_Input
0000             49            public _Set_Pin_Output
0000             50            public _measure_distance
0000             51            public _ReceptionOff
0000             52            public _SendATCommand
0000             53            public _waitms_or_RI1
0000             54            public _RXU1
0000             55            public _getstr1
0000             56            public _getchar1_with_timeout
0000             57            public _getchar1
0000             58            public _sendstr1
0000             59            public _putchar1
0000             60            public _UART1_Init
0000             61            public _BMM150_Read_Data
0000             62            public _BMM150_compensate_y
0000             63            public _BMM150_compensate_x
0000             64            public _BMM150_Init
0000             65            public _BMM150_Read_Trim_Registers
0000             66            public _SPI_write
0000             67            public _SPI_read
0000             68            public _SPI_transfer
0000             69            public _waitms
0000             70            public _Timer3us
0000             71            public __c51_external_startup
0000             72            public _pick
0000             73            public _auto_mode
0000             74            public _duration
0000             75            public _weight
0000             76            public _mea_yes
0000             77            public _angle_diff
0000             78            public _last_raw_angle
0000             79            public _raw_angle
0000             80            public _curr_angle
0000             81            public _pwm_corr
0000             82            public _seed
0000             83            public _weight_mea_count
0000             84            public _fre_mea_count
0000             85            public _vy
0000             86            public _vx
0000             87            public _vy_thres
0000             88            public _vx_thres
0000             89            public _servo_arm
0000             90            public _servo_base
0000             91            public _R_motor_dir
0000             92            public _L_motor_dir
0000             93            public _pwm_right
0000             94            public _pwm_left
0000             95            public _servo_counter
0000             96            public _pwm_counter
0000             97            public _i
0000             98            public _i_loo
0000             99            public _overflow_count
0000            100            public _distance
0000            101            public _dig_xyz1
0000            102            public _dig_xy2
0000            103            public _dig_xy1
0000            104            public _dig_z4
0000            105            public _dig_z3
0000            106            public _dig_z2
0000            107            public _dig_z1
0000            108            public _dig_y2
0000            109            public _dig_y1
0000            110            public _dig_x2
0000            111            public _dig_x1
0000            112            public _d2
0000            113            public _d1
0000            114            public _freq100
0000            115            public _buff
0000            116            public _Joystick_Control_PARM_2
0000            117            public _getstr1_PARM_2
0000            118            public _BMM150_Read_Data_PARM_2
0000            119            public _BMM150_compensate_y_PARM_2
0000            120            public _BMM150_compensate_x_PARM_2
0000            121            public _SPI_write_PARM_2
0000            122   ;--------------------------------------------------------
0000            123   ; Special Function Registers
0000            124   ;--------------------------------------------------------
0000            125   _ACC            DATA 0xe0
0000            126   _ADC0ASAH       DATA 0xb6
0000            127   _ADC0ASAL       DATA 0xb5
0000            128   _ADC0ASCF       DATA 0xa1
0000            129   _ADC0ASCT       DATA 0xc7
0000            130   _ADC0CF0        DATA 0xbc
0000            131   _ADC0CF1        DATA 0xb9
0000            132   _ADC0CF2        DATA 0xdf
0000            133   _ADC0CN0        DATA 0xe8
0000            134   _ADC0CN1        DATA 0xb2
0000            135   _ADC0CN2        DATA 0xb3
0000            136   _ADC0GTH        DATA 0xc4
0000            137   _ADC0GTL        DATA 0xc3
0000            138   _ADC0H          DATA 0xbe
0000            139   _ADC0L          DATA 0xbd
0000            140   _ADC0LTH        DATA 0xc6
0000            141   _ADC0LTL        DATA 0xc5
0000            142   _ADC0MX         DATA 0xbb
0000            143   _B              DATA 0xf0
0000            144   _CKCON0         DATA 0x8e
0000            145   _CKCON1         DATA 0xa6
0000            146   _CLEN0          DATA 0xc6
0000            147   _CLIE0          DATA 0xc7
0000            148   _CLIF0          DATA 0xe8
0000            149   _CLKSEL         DATA 0xa9
0000            150   _CLOUT0         DATA 0xd1
0000            151   _CLU0CF         DATA 0xb1
0000            152   _CLU0FN         DATA 0xaf
0000            153   _CLU0MX         DATA 0x84
0000            154   _CLU1CF         DATA 0xb3
0000            155   _CLU1FN         DATA 0xb2
0000            156   _CLU1MX         DATA 0x85
0000            157   _CLU2CF         DATA 0xb6
0000            158   _CLU2FN         DATA 0xb5
0000            159   _CLU2MX         DATA 0x91
0000            160   _CLU3CF         DATA 0xbf
0000            161   _CLU3FN         DATA 0xbe
0000            162   _CLU3MX         DATA 0xae
0000            163   _CMP0CN0        DATA 0x9b
0000            164   _CMP0CN1        DATA 0x99
0000            165   _CMP0MD         DATA 0x9d
0000            166   _CMP0MX         DATA 0x9f
0000            167   _CMP1CN0        DATA 0xbf
0000            168   _CMP1CN1        DATA 0xac
0000            169   _CMP1MD         DATA 0xab
0000            170   _CMP1MX         DATA 0xaa
0000            171   _CRC0CN0        DATA 0xce
0000            172   _CRC0CN1        DATA 0x86
0000            173   _CRC0CNT        DATA 0xd3
0000            174   _CRC0DAT        DATA 0xcb
0000            175   _CRC0FLIP       DATA 0xcf
0000            176   _CRC0IN         DATA 0xca
0000            177   _CRC0ST         DATA 0xd2
0000            178   _DAC0CF0        DATA 0x91
0000            179   _DAC0CF1        DATA 0x92
0000            180   _DAC0H          DATA 0x85
0000            181   _DAC0L          DATA 0x84
0000            182   _DAC1CF0        DATA 0x93
0000            183   _DAC1CF1        DATA 0x94
0000            184   _DAC1H          DATA 0x8a
0000            185   _DAC1L          DATA 0x89
0000            186   _DAC2CF0        DATA 0x95
0000            187   _DAC2CF1        DATA 0x96
0000            188   _DAC2H          DATA 0x8c
0000            189   _DAC2L          DATA 0x8b
0000            190   _DAC3CF0        DATA 0x9a
0000            191   _DAC3CF1        DATA 0x9c
0000            192   _DAC3H          DATA 0x8e
0000            193   _DAC3L          DATA 0x8d
0000            194   _DACGCF0        DATA 0x88
0000            195   _DACGCF1        DATA 0x98
0000            196   _DACGCF2        DATA 0xa2
0000            197   _DERIVID        DATA 0xad
0000            198   _DEVICEID       DATA 0xb5
0000            199   _DPH            DATA 0x83
0000            200   _DPL            DATA 0x82
0000            201   _EIE1           DATA 0xe6
0000            202   _EIE2           DATA 0xf3
0000            203   _EIP1           DATA 0xbb
0000            204   _EIP1H          DATA 0xee
0000            205   _EIP2           DATA 0xed
0000            206   _EIP2H          DATA 0xf6
0000            207   _EMI0CN         DATA 0xe7
0000            208   _FLKEY          DATA 0xb7
0000            209   _HFO0CAL        DATA 0xc7
0000            210   _HFO1CAL        DATA 0xd6
0000            211   _HFOCN          DATA 0xef
0000            212   _I2C0ADM        DATA 0xff
0000            213   _I2C0CN0        DATA 0xba
0000            214   _I2C0DIN        DATA 0xbc
0000            215   _I2C0DOUT       DATA 0xbb
0000            216   _I2C0FCN0       DATA 0xad
0000            217   _I2C0FCN1       DATA 0xab
0000            218   _I2C0FCT        DATA 0xf5
0000            219   _I2C0SLAD       DATA 0xbd
0000            220   _I2C0STAT       DATA 0xb9
0000            221   _IE             DATA 0xa8
0000            222   _IP             DATA 0xb8
0000            223   _IPH            DATA 0xf2
0000            224   _IT01CF         DATA 0xe4
0000            225   _LFO0CN         DATA 0xb1
0000            226   _P0             DATA 0x80
0000            227   _P0MASK         DATA 0xfe
0000            228   _P0MAT          DATA 0xfd
0000            229   _P0MDIN         DATA 0xf1
0000            230   _P0MDOUT        DATA 0xa4
0000            231   _P0SKIP         DATA 0xd4
0000            232   _P1             DATA 0x90
0000            233   _P1MASK         DATA 0xee
0000            234   _P1MAT          DATA 0xed
0000            235   _P1MDIN         DATA 0xf2
0000            236   _P1MDOUT        DATA 0xa5
0000            237   _P1SKIP         DATA 0xd5
0000            238   _P2             DATA 0xa0
0000            239   _P2MASK         DATA 0xfc
0000            240   _P2MAT          DATA 0xfb
0000            241   _P2MDIN         DATA 0xf3
0000            242   _P2MDOUT        DATA 0xa6
0000            243   _P2SKIP         DATA 0xcc
0000            244   _P3             DATA 0xb0
0000            245   _P3MDIN         DATA 0xf4
0000            246   _P3MDOUT        DATA 0x9c
0000            247   _PCA0CENT       DATA 0x9e
0000            248   _PCA0CLR        DATA 0x9c
0000            249   _PCA0CN0        DATA 0xd8
0000            250   _PCA0CPH0       DATA 0xfc
0000            251   _PCA0CPH1       DATA 0xea
0000            252   _PCA0CPH2       DATA 0xec
0000            253   _PCA0CPH3       DATA 0xf5
0000            254   _PCA0CPH4       DATA 0x85
0000            255   _PCA0CPH5       DATA 0xde
0000            256   _PCA0CPL0       DATA 0xfb
0000            257   _PCA0CPL1       DATA 0xe9
0000            258   _PCA0CPL2       DATA 0xeb
0000            259   _PCA0CPL3       DATA 0xf4
0000            260   _PCA0CPL4       DATA 0x84
0000            261   _PCA0CPL5       DATA 0xdd
0000            262   _PCA0CPM0       DATA 0xda
0000            263   _PCA0CPM1       DATA 0xdb
0000            264   _PCA0CPM2       DATA 0xdc
0000            265   _PCA0CPM3       DATA 0xae
0000            266   _PCA0CPM4       DATA 0xaf
0000            267   _PCA0CPM5       DATA 0xcc
0000            268   _PCA0H          DATA 0xfa
0000            269   _PCA0L          DATA 0xf9
0000            270   _PCA0MD         DATA 0xd9
0000            271   _PCA0POL        DATA 0x96
0000            272   _PCA0PWM        DATA 0xf7
0000            273   _PCON0          DATA 0x87
0000            274   _PCON1          DATA 0xcd
0000            275   _PFE0CN         DATA 0xc1
0000            276   _PRTDRV         DATA 0xf6
0000            277   _PSCTL          DATA 0x8f
0000            278   _PSTAT0         DATA 0xaa
0000            279   _PSW            DATA 0xd0
0000            280   _REF0CN         DATA 0xd1
0000            281   _REG0CN         DATA 0xc9
0000            282   _REVID          DATA 0xb6
0000            283   _RSTSRC         DATA 0xef
0000            284   _SBCON1         DATA 0x94
0000            285   _SBRLH1         DATA 0x96
0000            286   _SBRLL1         DATA 0x95
0000            287   _SBUF           DATA 0x99
0000            288   _SBUF0          DATA 0x99
0000            289   _SBUF1          DATA 0x92
0000            290   _SCON           DATA 0x98
0000            291   _SCON0          DATA 0x98
0000            292   _SCON1          DATA 0xc8
0000            293   _SFRPAGE        DATA 0xa7
0000            294   _SFRPGCN        DATA 0xbc
0000            295   _SFRSTACK       DATA 0xd7
0000            296   _SMB0ADM        DATA 0xd6
0000            297   _SMB0ADR        DATA 0xd7
0000            298   _SMB0CF         DATA 0xc1
0000            299   _SMB0CN0        DATA 0xc0
0000            300   _SMB0DAT        DATA 0xc2
0000            301   _SMB0FCN0       DATA 0xc3
0000            302   _SMB0FCN1       DATA 0xc4
0000            303   _SMB0FCT        DATA 0xef
0000            304   _SMB0RXLN       DATA 0xc5
0000            305   _SMB0TC         DATA 0xac
0000            306   _SMOD1          DATA 0x93
0000            307   _SP             DATA 0x81
0000            308   _SPI0CFG        DATA 0xa1
0000            309   _SPI0CKR        DATA 0xa2
0000            310   _SPI0CN0        DATA 0xf8
0000            311   _SPI0DAT        DATA 0xa3
0000            312   _SPI0FCN0       DATA 0x9a
0000            313   _SPI0FCN1       DATA 0x9b
0000            314   _SPI0FCT        DATA 0xf7
0000            315   _SPI0PCF        DATA 0xdf
0000            316   _TCON           DATA 0x88
0000            317   _TH0            DATA 0x8c
0000            318   _TH1            DATA 0x8d
0000            319   _TL0            DATA 0x8a
0000            320   _TL1            DATA 0x8b
0000            321   _TMOD           DATA 0x89
0000            322   _TMR2CN0        DATA 0xc8
0000            323   _TMR2CN1        DATA 0xfd
0000            324   _TMR2H          DATA 0xcf
0000            325   _TMR2L          DATA 0xce
0000            326   _TMR2RLH        DATA 0xcb
0000            327   _TMR2RLL        DATA 0xca
0000            328   _TMR3CN0        DATA 0x91
0000            329   _TMR3CN1        DATA 0xfe
0000            330   _TMR3H          DATA 0x95
0000            331   _TMR3L          DATA 0x94
0000            332   _TMR3RLH        DATA 0x93
0000            333   _TMR3RLL        DATA 0x92
0000            334   _TMR4CN0        DATA 0x98
0000            335   _TMR4CN1        DATA 0xff
0000            336   _TMR4H          DATA 0xa5
0000            337   _TMR4L          DATA 0xa4
0000            338   _TMR4RLH        DATA 0xa3
0000            339   _TMR4RLL        DATA 0xa2
0000            340   _TMR5CN0        DATA 0xc0
0000            341   _TMR5CN1        DATA 0xf1
0000            342   _TMR5H          DATA 0xd5
0000            343   _TMR5L          DATA 0xd4
0000            344   _TMR5RLH        DATA 0xd3
0000            345   _TMR5RLL        DATA 0xd2
0000            346   _UART0PCF       DATA 0xd9
0000            347   _UART1FCN0      DATA 0x9d
0000            348   _UART1FCN1      DATA 0xd8
0000            349   _UART1FCT       DATA 0xfa
0000            350   _UART1LIN       DATA 0x9e
0000            351   _UART1PCF       DATA 0xda
0000            352   _VDM0CN         DATA 0xff
0000            353   _WDTCN          DATA 0x97
0000            354   _XBR0           DATA 0xe1
0000            355   _XBR1           DATA 0xe2
0000            356   _XBR2           DATA 0xe3
0000            357   _XOSC0CN        DATA 0x86
0000            358   _DPTR           DATA 0x8382
0000            359   _TMR2RL         DATA 0xcbca
0000            360   _TMR3RL         DATA 0x9392
0000            361   _TMR4RL         DATA 0xa3a2
0000            362   _TMR5RL         DATA 0xd3d2
0000            363   _TMR0           DATA 0x8c8a
0000            364   _TMR1           DATA 0x8d8b
0000            365   _TMR2           DATA 0xcfce
0000            366   _TMR3           DATA 0x9594
0000            367   _TMR4           DATA 0xa5a4
0000            368   _TMR5           DATA 0xd5d4
0000            369   _SBRL1          DATA 0x9695
0000            370   _PCA0           DATA 0xfaf9
0000            371   _PCA0CP0        DATA 0xfcfb
0000            372   _PCA0CP1        DATA 0xeae9
0000            373   _PCA0CP2        DATA 0xeceb
0000            374   _PCA0CP3        DATA 0xf5f4
0000            375   _PCA0CP4        DATA 0x8584
0000            376   _PCA0CP5        DATA 0xdedd
0000            377   _ADC0ASA        DATA 0xb6b5
0000            378   _ADC0GT         DATA 0xc4c3
0000            379   _ADC0           DATA 0xbebd
0000            380   _ADC0LT         DATA 0xc6c5
0000            381   _DAC0           DATA 0x8584
0000            382   _DAC1           DATA 0x8a89
0000            383   _DAC2           DATA 0x8c8b
0000            384   _DAC3           DATA 0x8e8d
0000            385   ;--------------------------------------------------------
0000            386   ; special function bits
0000            387   ;--------------------------------------------------------
0000            388   _ACC_0          BIT 0xe0
0000            389   _ACC_1          BIT 0xe1
0000            390   _ACC_2          BIT 0xe2
0000            391   _ACC_3          BIT 0xe3
0000            392   _ACC_4          BIT 0xe4
0000            393   _ACC_5          BIT 0xe5
0000            394   _ACC_6          BIT 0xe6
0000            395   _ACC_7          BIT 0xe7
0000            396   _TEMPE          BIT 0xe8
0000            397   _ADGN0          BIT 0xe9
0000            398   _ADGN1          BIT 0xea
0000            399   _ADWINT         BIT 0xeb
0000            400   _ADBUSY         BIT 0xec
0000            401   _ADINT          BIT 0xed
0000            402   _IPOEN          BIT 0xee
0000            403   _ADEN           BIT 0xef
0000            404   _B_0            BIT 0xf0
0000            405   _B_1            BIT 0xf1
0000            406   _B_2            BIT 0xf2
0000            407   _B_3            BIT 0xf3
0000            408   _B_4            BIT 0xf4
0000            409   _B_5            BIT 0xf5
0000            410   _B_6            BIT 0xf6
0000            411   _B_7            BIT 0xf7
0000            412   _C0FIF          BIT 0xe8
0000            413   _C0RIF          BIT 0xe9
0000            414   _C1FIF          BIT 0xea
0000            415   _C1RIF          BIT 0xeb
0000            416   _C2FIF          BIT 0xec
0000            417   _C2RIF          BIT 0xed
0000            418   _C3FIF          BIT 0xee
0000            419   _C3RIF          BIT 0xef
0000            420   _D1SRC0         BIT 0x88
0000            421   _D1SRC1         BIT 0x89
0000            422   _D1AMEN         BIT 0x8a
0000            423   _D01REFSL       BIT 0x8b
0000            424   _D3SRC0         BIT 0x8c
0000            425   _D3SRC1         BIT 0x8d
0000            426   _D3AMEN         BIT 0x8e
0000            427   _D23REFSL       BIT 0x8f
0000            428   _D0UDIS         BIT 0x98
0000            429   _D1UDIS         BIT 0x99
0000            430   _D2UDIS         BIT 0x9a
0000            431   _D3UDIS         BIT 0x9b
0000            432   _EX0            BIT 0xa8
0000            433   _ET0            BIT 0xa9
0000            434   _EX1            BIT 0xaa
0000            435   _ET1            BIT 0xab
0000            436   _ES0            BIT 0xac
0000            437   _ET2            BIT 0xad
0000            438   _ESPI0          BIT 0xae
0000            439   _EA             BIT 0xaf
0000            440   _PX0            BIT 0xb8
0000            441   _PT0            BIT 0xb9
0000            442   _PX1            BIT 0xba
0000            443   _PT1            BIT 0xbb
0000            444   _PS0            BIT 0xbc
0000            445   _PT2            BIT 0xbd
0000            446   _PSPI0          BIT 0xbe
0000            447   _P0_0           BIT 0x80
0000            448   _P0_1           BIT 0x81
0000            449   _P0_2           BIT 0x82
0000            450   _P0_3           BIT 0x83
0000            451   _P0_4           BIT 0x84
0000            452   _P0_5           BIT 0x85
0000            453   _P0_6           BIT 0x86
0000            454   _P0_7           BIT 0x87
0000            455   _P1_0           BIT 0x90
0000            456   _P1_1           BIT 0x91
0000            457   _P1_2           BIT 0x92
0000            458   _P1_3           BIT 0x93
0000            459   _P1_4           BIT 0x94
0000            460   _P1_5           BIT 0x95
0000            461   _P1_6           BIT 0x96
0000            462   _P1_7           BIT 0x97
0000            463   _P2_0           BIT 0xa0
0000            464   _P2_1           BIT 0xa1
0000            465   _P2_2           BIT 0xa2
0000            466   _P2_3           BIT 0xa3
0000            467   _P2_4           BIT 0xa4
0000            468   _P2_5           BIT 0xa5
0000            469   _P2_6           BIT 0xa6
0000            470   _P3_0           BIT 0xb0
0000            471   _P3_1           BIT 0xb1
0000            472   _P3_2           BIT 0xb2
0000            473   _P3_3           BIT 0xb3
0000            474   _P3_4           BIT 0xb4
0000            475   _P3_7           BIT 0xb7
0000            476   _CCF0           BIT 0xd8
0000            477   _CCF1           BIT 0xd9
0000            478   _CCF2           BIT 0xda
0000            479   _CCF3           BIT 0xdb
0000            480   _CCF4           BIT 0xdc
0000            481   _CCF5           BIT 0xdd
0000            482   _CR             BIT 0xde
0000            483   _CF             BIT 0xdf
0000            484   _PARITY         BIT 0xd0
0000            485   _F1             BIT 0xd1
0000            486   _OV             BIT 0xd2
0000            487   _RS0            BIT 0xd3
0000            488   _RS1            BIT 0xd4
0000            489   _F0             BIT 0xd5
0000            490   _AC             BIT 0xd6
0000            491   _CY             BIT 0xd7
0000            492   _RI             BIT 0x98
0000            493   _TI             BIT 0x99
0000            494   _RB8            BIT 0x9a
0000            495   _TB8            BIT 0x9b
0000            496   _REN            BIT 0x9c
0000            497   _CE             BIT 0x9d
0000            498   _SMODE          BIT 0x9e
0000            499   _RI1            BIT 0xc8
0000            500   _TI1            BIT 0xc9
0000            501   _RBX1           BIT 0xca
0000            502   _TBX1           BIT 0xcb
0000            503   _REN1           BIT 0xcc
0000            504   _PERR1          BIT 0xcd
0000            505   _OVR1           BIT 0xce
0000            506   _SI             BIT 0xc0
0000            507   _ACK            BIT 0xc1
0000            508   _ARBLOST        BIT 0xc2
0000            509   _ACKRQ          BIT 0xc3
0000            510   _STO            BIT 0xc4
0000            511   _STA            BIT 0xc5
0000            512   _TXMODE         BIT 0xc6
0000            513   _MASTER         BIT 0xc7
0000            514   _SPIEN          BIT 0xf8
0000            515   _TXNF           BIT 0xf9
0000            516   _NSSMD0         BIT 0xfa
0000            517   _NSSMD1         BIT 0xfb
0000            518   _RXOVRN         BIT 0xfc
0000            519   _MODF           BIT 0xfd
0000            520   _WCOL           BIT 0xfe
0000            521   _SPIF           BIT 0xff
0000            522   _IT0            BIT 0x88
0000            523   _IE0            BIT 0x89
0000            524   _IT1            BIT 0x8a
0000            525   _IE1            BIT 0x8b
0000            526   _TR0            BIT 0x8c
0000            527   _TF0            BIT 0x8d
0000            528   _TR1            BIT 0x8e
0000            529   _TF1            BIT 0x8f
0000            530   _T2XCLK0        BIT 0xc8
0000            531   _T2XCLK1        BIT 0xc9
0000            532   _TR2            BIT 0xca
0000            533   _T2SPLIT        BIT 0xcb
0000            534   _TF2CEN         BIT 0xcc
0000            535   _TF2LEN         BIT 0xcd
0000            536   _TF2L           BIT 0xce
0000            537   _TF2H           BIT 0xcf
0000            538   _T4XCLK0        BIT 0x98
0000            539   _T4XCLK1        BIT 0x99
0000            540   _TR4            BIT 0x9a
0000            541   _T4SPLIT        BIT 0x9b
0000            542   _TF4CEN         BIT 0x9c
0000            543   _TF4LEN         BIT 0x9d
0000            544   _TF4L           BIT 0x9e
0000            545   _TF4H           BIT 0x9f
0000            546   _T5XCLK0        BIT 0xc0
0000            547   _T5XCLK1        BIT 0xc1
0000            548   _TR5            BIT 0xc2
0000            549   _T5SPLIT        BIT 0xc3
0000            550   _TF5CEN         BIT 0xc4
0000            551   _TF5LEN         BIT 0xc5
0000            552   _TF5L           BIT 0xc6
0000            553   _TF5H           BIT 0xc7
0000            554   _RIE            BIT 0xd8
0000            555   _RXTO0          BIT 0xd9
0000            556   _RXTO1          BIT 0xda
0000            557   _RFRQ           BIT 0xdb
0000            558   _TIE            BIT 0xdc
0000            559   _TXHOLD         BIT 0xdd
0000            560   _TXNF1          BIT 0xde
0000            561   _TFRQ           BIT 0xdf
0000            562   ;--------------------------------------------------------
0000            563   ; overlayable register banks
0000            564   ;--------------------------------------------------------
0000            565            rbank0 segment data overlay
0000            566   ;--------------------------------------------------------
0000            567   ; overlayable bit register bank
0000            568   ;--------------------------------------------------------
0000            569            rseg BIT_BANK
0000            570   bits:
0000            571            ds 1
0001            572            b0 equ  bits.0 
0001            573            b1 equ  bits.1 
0001            574            b2 equ  bits.2 
0001            575            b3 equ  bits.3 
0001            576            b4 equ  bits.4 
0001            577            b5 equ  bits.5 
0001            578            b6 equ  bits.6 
0001            579            b7 equ  bits.7 
0001            580   ;--------------------------------------------------------
0001            581   ; internal ram data
0001            582   ;--------------------------------------------------------
0000            583            rseg R_DSEG
0000            584   _SPI_write_PARM_2:
0000            585            ds 1
0001            586   _BMM150_compensate_x_PARM_2:
0001            587            ds 3
0004            588   _BMM150_compensate_x_sloc0_1_0:
0004            589            ds 4
0008            590   _BMM150_compensate_y_PARM_2:
0008            591            ds 3
000B            592   _BMM150_compensate_y_sloc0_1_0:
000B            593            ds 4
000F            594   _BMM150_Read_Data_PARM_2:
000F            595            ds 3
0012            596   _BMM150_Read_Data_mag_x_1_123:
0012            597            ds 3
0015            598   _getstr1_PARM_2:
0015            599            ds 1
0016            600   _Auto_mode_slave_sloc0_1_0:
0016            601            ds 2
0018            602   _Joystick_Control_PARM_2:
0018            603            ds 3
001B            604   _Joystick_Control_sloc0_1_0:
001B            605            ds 2
001D            606   _Joystick_Control_sloc1_1_0:
001D            607            ds 1
001E            608   _Joystick_Control_sloc2_1_0:
001E            609            ds 1
001F            610   _Joystick_Control_sloc3_1_0:
001F            611            ds 4
0023            612   _Joystick_Control_sloc4_1_0:
0023            613            ds 4
0027            614   _Joystick_Control_sloc5_1_0:
0027            615            ds 4
002B            616   _main_sloc0_1_0:
002B            617            ds 2
002D            618   ;--------------------------------------------------------
002D            619   ; overlayable items in internal ram 
002D            620   ;--------------------------------------------------------
0000            621            rseg    R_OSEG
0000            622            rseg    R_OSEG
0000            623            rseg    R_OSEG
0000            624            rseg    R_OSEG
0000            625            rseg    R_OSEG
0000            626            rseg    R_OSEG
0000            627   _InitPinADC_PARM_2:
0000            628            ds 1
0001            629            rseg    R_OSEG
0001            630            rseg    R_OSEG
0001            631   _check_bound_PARM_2:
0001            632            ds 2
0003            633   ;--------------------------------------------------------
0003            634   ; indirectly addressable internal ram data
0003            635   ;--------------------------------------------------------
0000            636            rseg R_ISEG
0000            637   _buff:
0000            638            ds 20
0014            639   ;--------------------------------------------------------
0014            640   ; absolute internal ram data
0014            641   ;--------------------------------------------------------
0000            642            DSEG
0000            643   ;--------------------------------------------------------
0000            644   ; bit data
0000            645   ;--------------------------------------------------------
0000            646            rseg R_BSEG
0000            647   ;--------------------------------------------------------
0000            648   ; paged external ram data
0000            649   ;--------------------------------------------------------
0000            650            rseg R_PSEG
0000            651   ;--------------------------------------------------------
0000            652   ; external ram data
0000            653   ;--------------------------------------------------------
0000            654            rseg R_XSEG
0000            655   _freq100:
0000            656            ds 4
0004            657   _d1:
0004            658            ds 2
0006            659   _d2:
0006            660            ds 2
0008            661   _dig_x1:
0008            662            ds 1
0009            663   _dig_x2:
0009            664            ds 1
000A            665   _dig_y1:
000A            666            ds 1
000B            667   _dig_y2:
000B            668            ds 1
000C            669   _dig_z1:
000C            670            ds 2
000E            671   _dig_z2:
000E            672            ds 2
0010            673   _dig_z3:
0010            674            ds 2
0012            675   _dig_z4:
0012            676            ds 2
0014            677   _dig_xy1:
0014            678            ds 1
0015            679   _dig_xy2:
0015            680            ds 1
0016            681   _dig_xyz1:
0016            682            ds 2
0018            683   _distance:
0018            684            ds 2
001A            685   _overflow_count:
001A            686            ds 1
001B            687   _i_loo:
001B            688            ds 2
001D            689   _i:
001D            690            ds 2
001F            691   _BMM150_Read_Trim_Registers_trim_x1y1_1_97:
001F            692            ds 2
0021            693   _BMM150_Read_Trim_Registers_trim_xyz_data_1_97:
0021            694            ds 4
0025            695   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_97:
0025            696            ds 10
002F            697   _BMM150_compensate_x_retval_1_106:
002F            698            ds 2
0031            699   _BMM150_compensate_x_process_comp_x0_1_106:
0031            700            ds 2
0033            701   _BMM150_compensate_y_retval_1_115:
0033            702            ds 2
0035            703   _BMM150_compensate_y_process_comp_y0_1_115:
0035            704            ds 2
0037            705   _BMM150_Read_Data_x_val_1_124:
0037            706            ds 2
0039            707   _BMM150_Read_Data_y_val_1_124:
0039            708            ds 2
003B            709   _BMM150_Read_Data_rhall_val_1_124:
003B            710            ds 2
003D            711   _ReadHX711_dataa_1_174:
003D            712            ds 4
0041            713   _ReadHX711_j_1_174:
0041            714            ds 1
0042            715   _Read_angle_mag_x_1_229:
0042            716            ds 2
0044            717   _Read_angle_mag_y_1_229:
0044            718            ds 2
0046            719   _Read_angle_sum_x_1_229:
0046            720            ds 4
004A            721   _Read_angle_sum_y_1_229:
004A            722            ds 4
004E            723   _Read_angle_angle_1_229:
004E            724            ds 4
0052            725   _Auto_mode_slave_command_1_231:
0052            726            ds 2
0054            727   _Auto_mode_slave_state_res_1_231:
0054            728            ds 2
0056            729   _Auto_mode_slave_dummy_1_231:
0056            730            ds 2
0058            731   _Joystick_Control_vx_error_1_242:
0058            732            ds 2
005A            733   _Joystick_Control_vy_error_1_242:
005A            734            ds 2
005C            735   _Joystick_Control_vx_err_1_242:
005C            736            ds 2
005E            737   _Joystick_Control_vy_err_1_242:
005E            738            ds 2
0060            739   ;--------------------------------------------------------
0060            740   ; absolute external ram data
0060            741   ;--------------------------------------------------------
0000            742            XSEG
0000            743   ;--------------------------------------------------------
0000            744   ; external initialized ram data
0000            745   ;--------------------------------------------------------
0000            746            rseg R_IXSEG
0000            747   _pwm_counter:
0000            748            ds 2
0002            749   _servo_counter:
0002            750            ds 2
0004            751   _pwm_left:
0004            752            ds 1
0005            753   _pwm_right:
0005            754            ds 1
0006            755   _L_motor_dir:
0006            756            ds 1
0007            757   _R_motor_dir:
0007            758            ds 1
0008            759   _servo_base:
0008            760            ds 1
0009            761   _servo_arm:
0009            762            ds 1
000A            763   _vx_thres:
000A            764            ds 2
000C            765   _vy_thres:
000C            766            ds 2
000E            767   _vx:
000E            768            ds 2
0010            769   _vy:
0010            770            ds 2
0012            771   _fre_mea_count:
0012            772            ds 2
0014            773   _weight_mea_count:
0014            774            ds 2
0016            775   _seed:
0016            776            ds 2
0018            777   _pwm_corr:
0018            778            ds 4
001C            779   _curr_angle:
001C            780            ds 4
0020            781   _raw_angle:
0020            782            ds 4
0024            783   _last_raw_angle:
0024            784            ds 4
0028            785   _angle_diff:
0028            786            ds 4
002C            787   _mea_yes:
002C            788            ds 1
002D            789   _weight:
002D            790            ds 2
002F            791   _duration:
002F            792            ds 4
0033            793   _auto_mode:
0033            794            ds 2
0035            795   _pick:
0035            796            ds 1
0000            797            rseg R_HOME
0000            798            rseg R_GSINIT
0000            799            rseg R_CSEG
0000            800   ;--------------------------------------------------------
0000            801   ; Reset entry point and interrupt vectors
0000            802   ;--------------------------------------------------------
0000            803            CSEG at 0x0000
0000 020000     804            ljmp    _crt0
0093            805            CSEG at 0x0093
0093 020000     806            ljmp    _Timer5_ISR
0096            807   ;--------------------------------------------------------
0096            808   ; global & static initialisations
0096            809   ;--------------------------------------------------------
0000            810            rseg R_HOME
0000            811            rseg R_GSINIT
0000            812            rseg R_GSINIT
0000            813   ;--------------------------------------------------------
0000            814   ; data variables initialization
0000            815   ;--------------------------------------------------------
0000            816            rseg R_DINIT
0000            817            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            818   ;--------------------------------------------------------
0000            819   ; code
0000            820   ;--------------------------------------------------------
0000            821            rseg R_CSEG
0000            822   ;------------------------------------------------------------
0000            823   ;Allocation info for local variables in function '_c51_external_startup'
0000            824   ;------------------------------------------------------------
0000            825   ;------------------------------------------------------------
0000            826   ;        main.c:120: char _c51_external_startup (void)
0000            827   ;        -----------------------------------------
0000            828   ;         function _c51_external_startup
0000            829   ;        -----------------------------------------
0000            830   __c51_external_startup:
0000            831            using   0
0000            832   ;        main.c:123: SFRPAGE = 0x00;
0000 75A700     833            mov     _SFRPAGE,#0x00
0003            834   ;        main.c:124: WDTCN = 0xDE; //First key
0003 7597DE     835            mov     _WDTCN,#0xDE
0006            836   ;        main.c:125: WDTCN = 0xAD; //Second key
0006 7597AD     837            mov     _WDTCN,#0xAD
0009            838   ;        main.c:127: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     839            mov     _VDM0CN,#0x80
000C            840   ;        main.c:128: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     841            mov     _RSTSRC,#0x06
000F            842   ;        main.c:135: SFRPAGE = 0x10;
000F 75A710     843            mov     _SFRPAGE,#0x10
0012            844   ;        main.c:136: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     845            mov     _PFE0CN,#0x20
0015            846   ;        main.c:137: SFRPAGE = 0x00;
0015 75A700     847            mov     _SFRPAGE,#0x00
0018            848   ;        main.c:158: CLKSEL = 0x00;
0018 75A900     849            mov     _CLKSEL,#0x00
001B            850   ;        main.c:159: CLKSEL = 0x00;
001B 75A900     851            mov     _CLKSEL,#0x00
001E            852   ;        main.c:160: while ((CLKSEL & 0x80) == 0);
001E            853   L002001?:
001E E5A9       854            mov     a,_CLKSEL
0020 30E7D0     855            jnb     acc.7,L002001?
0023            856   ;        main.c:161: CLKSEL = 0x03;
0023 75A903     857            mov     _CLKSEL,#0x03
0026            858   ;        main.c:162: CLKSEL = 0x03;
0026 75A903     859            mov     _CLKSEL,#0x03
0029            860   ;        main.c:163: while ((CLKSEL & 0x80) == 0);
0029            861   L002004?:
0029 E5A9       862            mov     a,_CLKSEL
002B 30E750     863            jnb     acc.7,L002004?
002E            864   ;        main.c:169: P0MDOUT |= 0b_1100_0000;
002E 43A4C0     865            orl     _P0MDOUT,#0xC0
0031            866   ;        main.c:170: P1MDOUT |= 0b_0000_0110;
0031 43A506     867            orl     _P1MDOUT,#0x06
0034            868   ;        main.c:171: P2MDOUT |= 0b_0000_0001; // P2.0 in push-pull mode
0034 43A601     869            orl     _P2MDOUT,#0x01
0037            870   ;        main.c:172: XBR0     = 0b_0000_0011; // UART0E = 1 and SPI0E = 1 0b_0000_0011               
0037 75E103     871            mov     _XBR0,#0x03
003A            872   ;        main.c:173: XBR1     = 0b_0000_0000;
003A 75E200     873            mov     _XBR1,#0x00
003D            874   ;        main.c:174: XBR2     = 0b_0100_0001; // Enable crossbar and uart 1
003D 75E341     875            mov     _XBR2,#0x41
0040            876   ;        main.c:175: P0SKIP       = 0b_0000_0111; 
0040 75D407     877            mov     _P0SKIP,#0x07
0043            878   ;        main.c:176: P1SKIP   = 0b_1111_1001;
0043 75D5F9     879            mov     _P1SKIP,#0xF9
0046            880   ;        main.c:181: SCON0 = 0x10;
0046 759810     881            mov     _SCON0,#0x10
0049            882   ;        main.c:182: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     883            mov     _TH1,#0xE6
004C            884   ;        main.c:183: TL1 = TH1;      // Init Timer1
004C 858D8B     885            mov     _TL1,_TH1
004F            886   ;        main.c:184: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     887            anl     _TMOD,#0x0F
0052            888   ;        main.c:185: TMOD |=  0x20;                       
0052 438920     889            orl     _TMOD,#0x20
0055            890   ;        main.c:186: TR1 = 1; // START Timer1
0055 D28E       891            setb    _TR1
0057            892   ;        main.c:187: TI = 1;  // Indicate TX0 ready
0057 D299       893            setb    _TI
0059            894   ;        main.c:188: P2_0=1; // 'set' pin to 1 is normal operation mode.
0059 D2A0       895            setb    _P2_0
005B            896   ;        main.c:191: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
005B 75A211     897            mov     _SPI0CKR,#0x11
005E            898   ;        main.c:192: SPI0CFG = 0b_1110_0000; // SPI mode 3
005E 75A1E0     899            mov     _SPI0CFG,#0xE0
0061            900   ;        main.c:193: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0061 75F801     901            mov     _SPI0CN0,#0x01
0064            902   ;        main.c:196: SFRPAGE=0x10;
0064 75A710     903            mov     _SFRPAGE,#0x10
0067            904   ;        main.c:197: TMR5CN0=0x00;
0067 75C000     905            mov     _TMR5CN0,#0x00
006A            906   ;        main.c:198: TMR5=0xffff;   // Set to reload immediately
006A 75D4FF     907            mov     _TMR5,#0xFF
006D 75D5FF     908            mov     (_TMR5 >> 8),#0xFF
0070            909   ;        main.c:199: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
0070 43F308     910            orl     _EIE2,#0x08
0073            911   ;        main.c:200: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0073 D2C2       912            setb    _TR5
0075            913   ;        main.c:202: EA=1;  // Enable global interrupts
0075 D2AF       914            setb    _EA
0077            915   ;        main.c:203: SFRPAGE=0x00;
0077 75A700     916            mov     _SFRPAGE,#0x00
007A            917   ;        main.c:205: return 0;
007A 758200     918            mov     dpl,#0x00
007D 22         919            ret
007E            920   ;------------------------------------------------------------
007E            921   ;Allocation info for local variables in function 'Timer3us'
007E            922   ;------------------------------------------------------------
007E            923   ;us                        Allocated to registers r2 
007E            924   ;i                         Allocated to registers r3 
007E            925   ;------------------------------------------------------------
007E            926   ;        main.c:209: void Timer3us(unsigned char us)
007E            927   ;        -----------------------------------------
007E            928   ;         function Timer3us
007E            929   ;        -----------------------------------------
007E            930   _Timer3us:
007E AA82       931            mov     r2,dpl
0080            932   ;        main.c:214: CKCON0|=0b_0100_0000;
0080 438E40     933            orl     _CKCON0,#0x40
0083            934   ;        main.c:216: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0083 7592B8     935            mov     _TMR3RL,#0xB8
0086 7593FF     936            mov     (_TMR3RL >> 8),#0xFF
0089            937   ;        main.c:217: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0089 859294     938            mov     _TMR3,_TMR3RL
008C 859395     939            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
008F            940   ;        main.c:219: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
008F 759104     941            mov     _TMR3CN0,#0x04
0092            942   ;        main.c:220: for (i = 0; i < us; i++)       // Count <us> overflows
0092 7B00       943            mov     r3,#0x00
0094            944   L003004?:
0094 C3         945            clr     c
0095 EB         946            mov     a,r3
0096 9A         947            subb    a,r2
0097 5000       948            jnc     L003007?
0099            949   ;        main.c:222: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0099            950   L003001?:
0099 E591       951            mov     a,_TMR3CN0
009B 30E750     952            jnb     acc.7,L003001?
009E            953   ;        main.c:223: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
009E 53917F     954            anl     _TMR3CN0,#0x7F
00A1            955   ;        main.c:220: for (i = 0; i < us; i++)       // Count <us> overflows
00A1 0B         956            inc     r3
00A2 8000       957            sjmp    L003004?
00A4            958   L003007?:
00A4            959   ;        main.c:225: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00A4 759100     960            mov     _TMR3CN0,#0x00
00A7 22         961            ret
00A8            962   ;------------------------------------------------------------
00A8            963   ;Allocation info for local variables in function 'waitms'
00A8            964   ;------------------------------------------------------------
00A8            965   ;ms                        Allocated to registers r2 r3 
00A8            966   ;j                         Allocated to registers r4 r5 
00A8            967   ;k                         Allocated to registers r6 
00A8            968   ;------------------------------------------------------------
00A8            969   ;        main.c:228: void waitms (unsigned int ms)
00A8            970   ;        -----------------------------------------
00A8            971   ;         function waitms
00A8            972   ;        -----------------------------------------
00A8            973   _waitms:
00A8 AA82       974            mov     r2,dpl
00AA AB83       975            mov     r3,dph
00AC            976   ;        main.c:232: for(j=0; j<ms; j++)
00AC 7C00       977            mov     r4,#0x00
00AE 7D00       978            mov     r5,#0x00
00B0            979   L004005?:
00B0 C3         980            clr     c
00B1 EC         981            mov     a,r4
00B2 9A         982            subb    a,r2
00B3 ED         983            mov     a,r5
00B4 9B         984            subb    a,r3
00B5 5000       985            jnc     L004009?
00B7            986   ;        main.c:233: for (k=0; k<4; k++) Timer3us(250);
00B7 7E00       987            mov     r6,#0x00
00B9            988   L004001?:
00B9 BE0490     989            cjne    r6,#0x04,L004018?
00BC            990   L004018?:
00BC 5000       991            jnc     L004007?
00BE 7582FA     992            mov     dpl,#0xFA
00C1 C002       993            push    ar2
00C3 C003       994            push    ar3
00C5 C004       995            push    ar4
00C7 C005       996            push    ar5
00C9 C006       997            push    ar6
00CB 120000     998            lcall   _Timer3us
00CE D006       999            pop     ar6
00D0 D005      1000            pop     ar5
00D2 D004      1001            pop     ar4
00D4 D003      1002            pop     ar3
00D6 D002      1003            pop     ar2
00D8 0E        1004            inc     r6
00D9 8000      1005            sjmp    L004001?
00DB           1006   L004007?:
00DB           1007   ;        main.c:232: for(j=0; j<ms; j++)
00DB 0C        1008            inc     r4
00DC BC00D0    1009            cjne    r4,#0x00,L004005?
00DF 0D        1010            inc     r5
00E0 8000      1011            sjmp    L004005?
00E2           1012   L004009?:
00E2 22        1013            ret
00E3           1014   ;------------------------------------------------------------
00E3           1015   ;Allocation info for local variables in function 'SPI_transfer'
00E3           1016   ;------------------------------------------------------------
00E3           1017   ;tx_data                   Allocated to registers 
00E3           1018   ;------------------------------------------------------------
00E3           1019   ;        main.c:236: unsigned char SPI_transfer(unsigned char tx_data)
00E3           1020   ;        -----------------------------------------
00E3           1021   ;         function SPI_transfer
00E3           1022   ;        -----------------------------------------
00E3           1023   _SPI_transfer:
00E3 8582A3    1024            mov     _SPI0DAT,dpl
00E6           1025   ;        main.c:239: while (!SPIF);      // Wait for transfer to complete
00E6           1026   L005001?:
00E6           1027   ;        main.c:240: SPIF = 0;           // Clear SPI interrupt flag
00E6 10FF50    1028            jbc     _SPIF,L005008?
00E9 8000      1029            sjmp    L005001?
00EB           1030   L005008?:
00EB           1031   ;        main.c:241: return SPI0DAT;     // Return received data
00EB 85A382    1032            mov     dpl,_SPI0DAT
00EE 22        1033            ret
00EF           1034   ;------------------------------------------------------------
00EF           1035   ;Allocation info for local variables in function 'SPI_read'
00EF           1036   ;------------------------------------------------------------
00EF           1037   ;reg_addr                  Allocated to registers r2 
00EF           1038   ;value                     Allocated with name '_SPI_read_value_1_93'
00EF           1039   ;------------------------------------------------------------
00EF           1040   ;        main.c:244: unsigned char SPI_read(unsigned char reg_addr)
00EF           1041   ;        -----------------------------------------
00EF           1042   ;         function SPI_read
00EF           1043   ;        -----------------------------------------
00EF           1044   _SPI_read:
00EF AA82      1045            mov     r2,dpl
00F1           1046   ;        main.c:249: reg_addr = reg_addr | 0x80;
00F1 430280    1047            orl     ar2,#0x80
00F4           1048   ;        main.c:251: CS = 0;                // Select the device
00F4 C290      1049            clr     _P1_0
00F6           1050   ;        main.c:252: SPI_transfer(reg_addr);     // Send register address
00F6 8A82      1051            mov     dpl,r2
00F8 120000    1052            lcall   _SPI_transfer
00FB           1053   ;        main.c:253: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
00FB 758200    1054            mov     dpl,#0x00
00FE 120000    1055            lcall   _SPI_transfer
0101           1056   ;        main.c:254: CS = 1;                // Deselect the device
0101 D290      1057            setb    _P1_0
0103           1058   ;        main.c:256: return value;
0103 22        1059            ret
0104           1060   ;------------------------------------------------------------
0104           1061   ;Allocation info for local variables in function 'SPI_write'
0104           1062   ;------------------------------------------------------------
0104           1063   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0104           1064   ;reg_addr                  Allocated to registers r2 
0104           1065   ;------------------------------------------------------------
0104           1066   ;        main.c:259: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0104           1067   ;        -----------------------------------------
0104           1068   ;         function SPI_write
0104           1069   ;        -----------------------------------------
0104           1070   _SPI_write:
0104 AA82      1071            mov     r2,dpl
0106           1072   ;        main.c:262: reg_addr = reg_addr & 0x7F;
0106 53027F    1073            anl     ar2,#0x7F
0109           1074   ;        main.c:264: CS = 0;                // Select device
0109 C290      1075            clr     _P1_0
010B           1076   ;        main.c:265: SPI_transfer(reg_addr);     // Send register address
010B 8A82      1077            mov     dpl,r2
010D 120000    1078            lcall   _SPI_transfer
0110           1079   ;        main.c:266: SPI_transfer(reg_value);    // Send value
0110 85F882    1080            mov     dpl,_SPI_write_PARM_2
0113 120000    1081            lcall   _SPI_transfer
0116           1082   ;        main.c:267: CS = 1;                // Deselect device
0116 D290      1083            setb    _P1_0
0118 22        1084            ret
0119           1085   ;------------------------------------------------------------
0119           1086   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
0119           1087   ;------------------------------------------------------------
0119           1088   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_97'
0119           1089   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_97'
0119           1090   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_97'
0119           1091   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97'
0119           1092   ;------------------------------------------------------------
0119           1093   ;        main.c:270: void BMM150_Read_Trim_Registers(void)
0119           1094   ;        -----------------------------------------
0119           1095   ;         function BMM150_Read_Trim_Registers
0119           1096   ;        -----------------------------------------
0119           1097   _BMM150_Read_Trim_Registers:
0119           1098   ;        main.c:274: xdata uint8_t trim_x1y1[2] = {0};
0119 90D380    1099            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
011C           1100   ;        main.c:275: xdata uint8_t trim_xyz_data[4] = {0};
011C E4        1101            clr     a
011D F0        1102            movx    @dptr,a
011E 90D381    1103            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
0121 F0        1104            movx    @dptr,a
0122 90D3E0    1105            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0125 F0        1106            movx    @dptr,a
0126 90D3E1    1107            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0001)
0129 F0        1108            movx    @dptr,a
012A 90D3E2    1109            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
012D           1110   ;        main.c:276: xdata uint8_t trim_xy1xy2[10] = {0};
012D E4        1111            clr     a
012E F0        1112            movx    @dptr,a
012F 90D3E3    1113            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0132 F0        1114            movx    @dptr,a
0133 90D440    1115            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0136 F0        1116            movx    @dptr,a
0137 90D441    1117            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0001)
013A F0        1118            movx    @dptr,a
013B 90D442    1119            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0002)
013E E4        1120            clr     a
013F F0        1121            movx    @dptr,a
0140 90D443    1122            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0003)
0143 F0        1123            movx    @dptr,a
0144 90D444    1124            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0147 F0        1125            movx    @dptr,a
0148 90D445    1126            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
014B F0        1127            movx    @dptr,a
014C 90D446    1128            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0006)
014F E4        1129            clr     a
0150 F0        1130            movx    @dptr,a
0151 90D447    1131            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0007)
0154 F0        1132            movx    @dptr,a
0155 90D448    1133            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0158 F0        1134            movx    @dptr,a
0159 90D449    1135            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
015C F0        1136            movx    @dptr,a
015D           1137   ;        main.c:279: for (i=0;i<2;i++){
015D 9059A8    1138            mov     dptr,#_i
0160 E4        1139            clr     a
0161 F0        1140            movx    @dptr,a
0162 A3        1141            inc     dptr
0163 F0        1142            movx    @dptr,a
0164           1143   L008001?:
0164 9059A8    1144            mov     dptr,#_i
0167 E0        1145            movx    a,@dptr
0168 FA        1146            mov     r2,a
0169 A3        1147            inc     dptr
016A E0        1148            movx    a,@dptr
016B FB        1149            mov     r3,a
016C C3        1150            clr     c
016D EA        1151            mov     a,r2
016E 9402      1152            subb    a,#0x02
0170 EB        1153            mov     a,r3
0171 9400      1154            subb    a,#0x00
0173 5000      1155            jnc     L008004?
0175           1156   ;        main.c:280: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
0175 EA        1157            mov     a,r2
0176 2480      1158            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0178 FC        1159            mov     r4,a
0179 EB        1160            mov     a,r3
017A 34D3      1161            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 >> 8)
017C FD        1162            mov     r5,a
017D 745D      1163            mov     a,#0x5D
017F 2A        1164            add     a,r2
0180 F582      1165            mov     dpl,a
0182 C004      1166            push    ar4
0184 C005      1167            push    ar5
0186 120000    1168            lcall   _SPI_read
0189 AA82      1169            mov     r2,dpl
018B D005      1170            pop     ar5
018D D004      1171            pop     ar4
018F 8C82      1172            mov     dpl,r4
0191 8D83      1173            mov     dph,r5
0193 EA        1174            mov     a,r2
0194 F0        1175            movx    @dptr,a
0195           1176   ;        main.c:279: for (i=0;i<2;i++){
0195 9059A8    1177            mov     dptr,#_i
0198 E0        1178            movx    a,@dptr
0199 2401      1179            add     a,#0x01
019B F0        1180            movx    @dptr,a
019C A3        1181            inc     dptr
019D E0        1182            movx    a,@dptr
019E 3400      1183            addc    a,#0x00
01A0 F0        1184            movx    @dptr,a
01A1 8000      1185            sjmp    L008001?
01A3           1186   L008004?:
01A3           1187   ;        main.c:282: for (i=0;i<4;i++){
01A3 9059A8    1188            mov     dptr,#_i
01A6 E4        1189            clr     a
01A7 F0        1190            movx    @dptr,a
01A8 A3        1191            inc     dptr
01A9 F0        1192            movx    @dptr,a
01AA           1193   L008005?:
01AA 9059A8    1194            mov     dptr,#_i
01AD E0        1195            movx    a,@dptr
01AE FA        1196            mov     r2,a
01AF A3        1197            inc     dptr
01B0 E0        1198            movx    a,@dptr
01B1 FB        1199            mov     r3,a
01B2 C3        1200            clr     c
01B3 EA        1201            mov     a,r2
01B4 9404      1202            subb    a,#0x04
01B6 EB        1203            mov     a,r3
01B7 9400      1204            subb    a,#0x00
01B9 5000      1205            jnc     L008008?
01BB           1206   ;        main.c:283: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
01BB EA        1207            mov     a,r2
01BC 24E0      1208            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
01BE FC        1209            mov     r4,a
01BF EB        1210            mov     a,r3
01C0 34D3      1211            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 >> 8)
01C2 FD        1212            mov     r5,a
01C3 7462      1213            mov     a,#0x62
01C5 2A        1214            add     a,r2
01C6 F582      1215            mov     dpl,a
01C8 C004      1216            push    ar4
01CA C005      1217            push    ar5
01CC 120000    1218            lcall   _SPI_read
01CF AA82      1219            mov     r2,dpl
01D1 D005      1220            pop     ar5
01D3 D004      1221            pop     ar4
01D5 8C82      1222            mov     dpl,r4
01D7 8D83      1223            mov     dph,r5
01D9 EA        1224            mov     a,r2
01DA F0        1225            movx    @dptr,a
01DB           1226   ;        main.c:282: for (i=0;i<4;i++){
01DB 9059A8    1227            mov     dptr,#_i
01DE E0        1228            movx    a,@dptr
01DF 2401      1229            add     a,#0x01
01E1 F0        1230            movx    @dptr,a
01E2 A3        1231            inc     dptr
01E3 E0        1232            movx    a,@dptr
01E4 3400      1233            addc    a,#0x00
01E6 F0        1234            movx    @dptr,a
01E7 8000      1235            sjmp    L008005?
01E9           1236   L008008?:
01E9           1237   ;        main.c:285: for (i=0;i<10;i++){
01E9 9059A8    1238            mov     dptr,#_i
01EC E4        1239            clr     a
01ED F0        1240            movx    @dptr,a
01EE A3        1241            inc     dptr
01EF F0        1242            movx    @dptr,a
01F0           1243   L008009?:
01F0 9059A8    1244            mov     dptr,#_i
01F3 E0        1245            movx    a,@dptr
01F4 FA        1246            mov     r2,a
01F5 A3        1247            inc     dptr
01F6 E0        1248            movx    a,@dptr
01F7 FB        1249            mov     r3,a
01F8 C3        1250            clr     c
01F9 EA        1251            mov     a,r2
01FA 940A      1252            subb    a,#0x0A
01FC EB        1253            mov     a,r3
01FD 9400      1254            subb    a,#0x00
01FF 5000      1255            jnc     L008012?
0201           1256   ;        main.c:286: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
0201 EA        1257            mov     a,r2
0202 2440      1258            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0204 FC        1259            mov     r4,a
0205 EB        1260            mov     a,r3
0206 34D4      1261            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 >> 8)
0208 FD        1262            mov     r5,a
0209 7468      1263            mov     a,#0x68
020B 2A        1264            add     a,r2
020C F582      1265            mov     dpl,a
020E C004      1266            push    ar4
0210 C005      1267            push    ar5
0212 120000    1268            lcall   _SPI_read
0215 AA82      1269            mov     r2,dpl
0217 D005      1270            pop     ar5
0219 D004      1271            pop     ar4
021B 8C82      1272            mov     dpl,r4
021D 8D83      1273            mov     dph,r5
021F EA        1274            mov     a,r2
0220 F0        1275            movx    @dptr,a
0221           1276   ;        main.c:285: for (i=0;i<10;i++){
0221 9059A8    1277            mov     dptr,#_i
0224 E0        1278            movx    a,@dptr
0225 2401      1279            add     a,#0x01
0227 F0        1280            movx    @dptr,a
0228 A3        1281            inc     dptr
0229 E0        1282            movx    a,@dptr
022A 3400      1283            addc    a,#0x00
022C F0        1284            movx    @dptr,a
022D 8000      1285            sjmp    L008009?
022F           1286   L008012?:
022F           1287   ;        main.c:289: dig_x1 = (int8_t) trim_x1y1[0]; 
022F 90D380    1288            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0232 E0        1289            movx    a,@dptr
0233 905D28    1290            mov     dptr,#_dig_x1
0236 F0        1291            movx    @dptr,a
0237           1292   ;        main.c:290: dig_y1 = (int8_t) trim_x1y1[1]; 
0237 90D381    1293            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
023A E0        1294            movx    a,@dptr
023B 905CA8    1295            mov     dptr,#_dig_y1
023E F0        1296            movx    @dptr,a
023F           1297   ;        main.c:291: dig_x2 = (int8_t) trim_xyz_data[2]; 
023F 90D3E2    1298            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
0242 E0        1299            movx    a,@dptr
0243 905CE8    1300            mov     dptr,#_dig_x2
0246 F0        1301            movx    @dptr,a
0247           1302   ;        main.c:292: dig_y2 = (int8_t) trim_xyz_data[3]; 
0247 90D3E3    1303            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
024A E0        1304            movx    a,@dptr
024B 905C68    1305            mov     dptr,#_dig_y2
024E F0        1306            movx    @dptr,a
024F           1307   ;        main.c:306: dig_xy1 = trim_xy1xy2[9];
024F 90D449    1308            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
0252 E0        1309            movx    a,@dptr
0253 905B28    1310            mov     dptr,#_dig_xy1
0256 F0        1311            movx    @dptr,a
0257           1312   ;        main.c:307: dig_xy2 = (int8_t)trim_xy1xy2[8];
0257 90D448    1313            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
025A E0        1314            movx    a,@dptr
025B 905AE8    1315            mov     dptr,#_dig_xy2
025E F0        1316            movx    @dptr,a
025F           1317   ;        main.c:309: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
025F 90D445    1318            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
0262 E0        1319            movx    a,@dptr
0263 FA        1320            mov     r2,a
0264 53027F    1321            anl     ar2,#0x7F
0267 8A03      1322            mov     ar3,r2
0269 7A00      1323            mov     r2,#0x00
026B           1324   ;        main.c:310: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
026B 90D444    1325            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
026E E0        1326            movx    a,@dptr
026F FC        1327            mov     r4,a
0270 7D00      1328            mov     r5,#0x00
0272 905AA8    1329            mov     dptr,#_dig_xyz1
0275 EC        1330            mov     a,r4
0276 4A        1331            orl     a,r2
0277 F0        1332            movx    @dptr,a
0278 ED        1333            mov     a,r5
0279 4B        1334            orl     a,r3
027A A3        1335            inc     dptr
027B F0        1336            movx    @dptr,a
027C 22        1337            ret
027D           1338   ;------------------------------------------------------------
027D           1339   ;Allocation info for local variables in function 'BMM150_Init'
027D           1340   ;------------------------------------------------------------
027D           1341   ;chip_id                   Allocated with name '_BMM150_Init_chip_id_1_102'
027D           1342   ;------------------------------------------------------------
027D           1343   ;        main.c:314: void BMM150_Init(void)
027D           1344   ;        -----------------------------------------
027D           1345   ;         function BMM150_Init
027D           1346   ;        -----------------------------------------
027D           1347   _BMM150_Init:
027D           1348   ;        main.c:319: CS = 1; // Deselect BMM150
027D D290      1349            setb    _P1_0
027F           1350   ;        main.c:322: waitms(10);
027F 90000A    1351            mov     dptr,#0x000A
0282 120000    1352            lcall   _waitms
0285           1353   ;        main.c:325: SPI_write(BMM150_POWER_CONTROL, 0x82);
0285 75F882    1354            mov     _SPI_write_PARM_2,#0x82
0288 75824B    1355            mov     dpl,#0x4B
028B 120000    1356            lcall   _SPI_write
028E           1357   ;        main.c:326: waitms(10);  // Wait for reset to complete
028E 90000A    1358            mov     dptr,#0x000A
0291 120000    1359            lcall   _waitms
0294           1360   ;        main.c:329: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
0294 75F801    1361            mov     _SPI_write_PARM_2,#0x01
0297 75824B    1362            mov     dpl,#0x4B
029A 120000    1363            lcall   _SPI_write
029D           1364   ;        main.c:330: waitms(5);
029D 900005    1365            mov     dptr,#0x0005
02A0 120000    1366            lcall   _waitms
02A3           1367   ;        main.c:333: chip_id = SPI_read(BMM150_CHIP_ID);
02A3 758240    1368            mov     dpl,#0x40
02A6 120000    1369            lcall   _SPI_read
02A9 AA82      1370            mov     r2,dpl
02AB           1371   ;        main.c:334: if (chip_id != BMM150_CHIP_ID_VALUE)
02AB BA3210    1372            cjne    r2,#0x32,L009006?
02AE 8000      1373            sjmp    L009002?
02B0           1374   L009006?:
02B0           1375   ;        main.c:336: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
02B0 8A03      1376            mov     ar3,r2
02B2 7C00      1377            mov     r4,#0x00
02B4 C002      1378            push    ar2
02B6 C003      1379            push    ar3
02B8 C004      1380            push    ar4
02BA 7490      1381            mov     a,#__str_0
02BC C0E0      1382            push    acc
02BE 74E1      1383            mov     a,#(__str_0 >> 8)
02C0 C0E0      1384            push    acc
02C2 7480      1385            mov     a,#0x80
02C4 C0E0      1386            push    acc
02C6 120000    1387            lcall   _printf
02C9 E581      1388            mov     a,sp
02CB 24FB      1389            add     a,#0xfb
02CD F581      1390            mov     sp,a
02CF D002      1391            pop     ar2
02D1           1392   L009002?:
02D1           1393   ;        main.c:346: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
02D1 75F800    1394            mov     _SPI_write_PARM_2,#0x00
02D4 75824C    1395            mov     dpl,#0x4C
02D7 C002      1396            push    ar2
02D9 120000    1397            lcall   _SPI_write
02DC           1398   ;        main.c:349: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
02DC 75F87F    1399            mov     _SPI_write_PARM_2,#0x7F
02DF 758251    1400            mov     dpl,#0x51
02E2 120000    1401            lcall   _SPI_write
02E5           1402   ;        main.c:350: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
02E5 75F80E    1403            mov     _SPI_write_PARM_2,#0x0E
02E8 758252    1404            mov     dpl,#0x52
02EB 120000    1405            lcall   _SPI_write
02EE           1406   ;        main.c:352: BMM150_Read_Trim_Registers();
02EE 120000    1407            lcall   _BMM150_Read_Trim_Registers
02F1           1408   ;        main.c:354: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
02F1 7B00      1409            mov     r3,#0x00
02F3 C003      1410            push    ar3
02F5 7450      1411            mov     a,#__str_1
02F7 C0E0      1412            push    acc
02F9 74E2      1413            mov     a,#(__str_1 >> 8)
02FB C0E0      1414            push    acc
02FD 7480      1415            mov     a,#0x80
02FF C0E0      1416            push    acc
0301 120000    1417            lcall   _printf
0304 E581      1418            mov     a,sp
0306 24FB      1419            add     a,#0xfb
0308 F581      1420            mov     sp,a
030A           1421   ;        main.c:355: return; 
030A 22        1422            ret
030B           1423   ;------------------------------------------------------------
030B           1424   ;Allocation info for local variables in function 'BMM150_compensate_x'
030B           1425   ;------------------------------------------------------------
030B           1426   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
030B           1427   ;mag_data_x                Allocated to registers r2 r3 r4 
030B           1428   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
030B           1429   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_106'
030B           1430   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_106'
030B           1431   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_106'
030B           1432   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_106'
030B           1433   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_106'
030B           1434   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_106'
030B           1435   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_106'
030B           1436   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_106'
030B           1437   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_106'
030B           1438   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_106'
030B           1439   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_106'
030B           1440   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_106'
030B           1441   ;------------------------------------------------------------
030B           1442   ;        main.c:358: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
030B           1443   ;        -----------------------------------------
030B           1444   ;         function BMM150_compensate_x
030B           1445   ;        -----------------------------------------
030B           1446   _BMM150_compensate_x:
030B           1447   ;        main.c:376: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
030B ACF0      1448            mov     r4,b
030D 120000    1449            lcall   __gptrget
0310 FA        1450            mov     r2,a
0311 A3        1451            inc     dptr
0312 120000    1452            lcall   __gptrget
0315 FB        1453            mov     r3,a
0316 BA0010    1454            cjne    r2,#0x00,L010019?
0319 BBF010    1455            cjne    r3,#0xF0,L010019?
031C 020000    1456            ljmp    L010011?
031F           1457   L010019?:
031F           1458   ;        main.c:377: if (*data_rhall != 0)
031F ACA8      1459            mov     r4,_BMM150_compensate_x_PARM_2
0321 ADA9      1460            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
0323 AEAA      1461            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
0325 8C82      1462            mov     dpl,r4
0327 8D83      1463            mov     dph,r5
0329 8EF0      1464            mov     b,r6
032B 120000    1465            lcall   __gptrget
032E FC        1466            mov     r4,a
032F A3        1467            inc     dptr
0330 120000    1468            lcall   __gptrget
0333 FD        1469            mov     r5,a
0334 4C        1470            orl     a,r4
0335 6000      1471            jz      L010005?
0337           1472   ;        main.c:380: process_comp_x0 = *data_rhall;
0337 90D500    1473            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
033A EC        1474            mov     a,r4
033B F0        1475            movx    @dptr,a
033C A3        1476            inc     dptr
033D ED        1477            mov     a,r5
033E F0        1478            movx    @dptr,a
033F 8000      1479            sjmp    L010006?
0341           1480   L010005?:
0341           1481   ;        main.c:382: else if (dig_xyz1 != 0)
0341 905AA8    1482            mov     dptr,#_dig_xyz1
0344 E0        1483            movx    a,@dptr
0345 FC        1484            mov     r4,a
0346 A3        1485            inc     dptr
0347 E0        1486            movx    a,@dptr
0348 FD        1487            mov     r5,a
0349 4C        1488            orl     a,r4
034A 6000      1489            jz      L010002?
034C           1490   ;        main.c:384: process_comp_x0 = dig_xyz1;
034C 90D500    1491            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
034F EC        1492            mov     a,r4
0350 F0        1493            movx    @dptr,a
0351 A3        1494            inc     dptr
0352 ED        1495            mov     a,r5
0353 F0        1496            movx    @dptr,a
0354 8000      1497            sjmp    L010006?
0356           1498   L010002?:
0356           1499   ;        main.c:388: process_comp_x0 = 0;
0356 90D500    1500            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0359 E4        1501            clr     a
035A F0        1502            movx    @dptr,a
035B A3        1503            inc     dptr
035C F0        1504            movx    @dptr,a
035D           1505   L010006?:
035D           1506   ;        main.c:390: if (process_comp_x0 != 0)
035D 90D500    1507            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0360 E0        1508            movx    a,@dptr
0361 FC        1509            mov     r4,a
0362 A3        1510            inc     dptr
0363 E0        1511            movx    a,@dptr
0364 FD        1512            mov     r5,a
0365 4C        1513            orl     a,r4
0366 7000      1514            jnz     L010022?
0368 020000    1515            ljmp    L010008?
036B           1516   L010022?:
036B           1517   ;        main.c:393: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
036B 905AA8    1518            mov     dptr,#_dig_xyz1
036E E0        1519            movx    a,@dptr
036F FE        1520            mov     r6,a
0370 A3        1521            inc     dptr
0371 E0        1522            movx    a,@dptr
0372 FF        1523            mov     r7,a
0373 E4        1524            clr     a
0374 F8        1525            mov     r0,a
0375 EF        1526            mov     a,r7
0376 C8        1527            xch     a,r0
0377 5403      1528            anl     a,#0x03
0379 A2E0      1529            mov     c,acc.0
037B C8        1530            xch     a,r0
037C 13        1531            rrc     a
037D C8        1532            xch     a,r0
037E 13        1533            rrc     a
037F A2E0      1534            mov     c,acc.0
0381 C8        1535            xch     a,r0
0382 13        1536            rrc     a
0383 C8        1537            xch     a,r0
0384 13        1538            rrc     a
0385 C8        1539            xch     a,r0
0386 F9        1540            mov     r1,a
0387 EE        1541            mov     a,r6
0388 03        1542            rr      a
0389 03        1543            rr      a
038A 54C0      1544            anl     a,#0xc0
038C FF        1545            mov     r7,a
038D EE        1546            mov     a,r6
038E 03        1547            rr      a
038F 03        1548            rr      a
0390 543F      1549            anl     a,#0x3f
0392 48        1550            orl     a,r0
0393 F8        1551            mov     r0,a
0394 7E00      1552            mov     r6,#0x00
0396           1553   ;        main.c:394: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
0396 8C00      1554            mov     __divslong_PARM_2,r4
0398 8D01      1555            mov     (__divslong_PARM_2 + 1),r5
039A 750200    1556            mov     (__divslong_PARM_2 + 2),#0x00
039D 750300    1557            mov     (__divslong_PARM_2 + 3),#0x00
03A0 8E82      1558            mov     dpl,r6
03A2 8F83      1559            mov     dph,r7
03A4 88F0      1560            mov     b,r0
03A6 E9        1561            mov     a,r1
03A7 C002      1562            push    ar2
03A9 C003      1563            push    ar3
03AB 120000    1564            lcall   __divslong
03AE AC82      1565            mov     r4,dpl
03B0 E583      1566            mov     a,dph
03B2 24C0      1567            add     a,#0xc0
03B4 FD        1568            mov     r5,a
03B5           1569   ;        main.c:396: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
03B5 8C06      1570            mov     ar6,r4
03B7 8D07      1571            mov     ar7,r5
03B9 8E10      1572            mov     _BMM150_compensate_x_sloc0_1_0,r6
03BB EF        1573            mov     a,r7
03BC F511      1574            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
03BE 33        1575            rlc     a
03BF 95E0      1576            subb    a,acc
03C1 F512      1577            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
03C3 F513      1578            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03C5 8C06      1579            mov     ar6,r4
03C7 8D07      1580            mov     ar7,r5
03C9 8E00      1581            mov     __mullong_PARM_2,r6
03CB EF        1582            mov     a,r7
03CC F501      1583            mov     (__mullong_PARM_2 + 1),a
03CE 33        1584            rlc     a
03CF 95E0      1585            subb    a,acc
03D1 F502      1586            mov     (__mullong_PARM_2 + 2),a
03D3 F503      1587            mov     (__mullong_PARM_2 + 3),a
03D5           1588   ;        main.c:397: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
03D5 851082    1589            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03D8 851183    1590            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03DB 8512F0    1591            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03DE E513      1592            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03E0 C004      1593            push    ar4
03E2 C005      1594            push    ar5
03E4 120000    1595            lcall   __mullong
03E7 858210    1596            mov     _BMM150_compensate_x_sloc0_1_0,dpl
03EA 858311    1597            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
03ED 85F012    1598            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
03F0 F513      1599            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03F2 905AE8    1600            mov     dptr,#_dig_xy2
03F5 E0        1601            movx    a,@dptr
03F6 FE        1602            mov     r6,a
03F7 33        1603            rlc     a
03F8 95E0      1604            subb    a,acc
03FA FF        1605            mov     r7,a
03FB F8        1606            mov     r0,a
03FC F9        1607            mov     r1,a
03FD 750080    1608            mov     __divslong_PARM_2,#0x80
0400 E4        1609            clr     a
0401 F501      1610            mov     (__divslong_PARM_2 + 1),a
0403 F502      1611            mov     (__divslong_PARM_2 + 2),a
0405 F503      1612            mov     (__divslong_PARM_2 + 3),a
0407 851082    1613            mov     dpl,_BMM150_compensate_x_sloc0_1_0
040A 851183    1614            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
040D 8512F0    1615            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
0410 E513      1616            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0412 C006      1617            push    ar6
0414 C007      1618            push    ar7
0416 C000      1619            push    ar0
0418 C001      1620            push    ar1
041A 120000    1621            lcall   __divslong
041D 858200    1622            mov     __mullong_PARM_2,dpl
0420 858301    1623            mov     (__mullong_PARM_2 + 1),dph
0423 85F002    1624            mov     (__mullong_PARM_2 + 2),b
0426 F503      1625            mov     (__mullong_PARM_2 + 3),a
0428 D001      1626            pop     ar1
042A D000      1627            pop     ar0
042C D007      1628            pop     ar7
042E D006      1629            pop     ar6
0430           1630   ;        main.c:398: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
0430 8E82      1631            mov     dpl,r6
0432 8F83      1632            mov     dph,r7
0434 88F0      1633            mov     b,r0
0436 E9        1634            mov     a,r1
0437 120000    1635            lcall   __mullong
043A 858210    1636            mov     _BMM150_compensate_x_sloc0_1_0,dpl
043D 858311    1637            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
0440 85F012    1638            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
0443 F513      1639            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
0445 D005      1640            pop     ar5
0447 D004      1641            pop     ar4
0449 905B28    1642            mov     dptr,#_dig_xy1
044C E0        1643            movx    a,@dptr
044D FE        1644            mov     r6,a
044E E4        1645            clr     a
044F 5401      1646            anl     a,#0x01
0451 A2E0      1647            mov     c,acc.0
0453 CE        1648            xch     a,r6
0454 13        1649            rrc     a
0455 CE        1650            xch     a,r6
0456 13        1651            rrc     a
0457 CE        1652            xch     a,r6
0458 8E00      1653            mov     __mullong_PARM_2,r6
045A F501      1654            mov     (__mullong_PARM_2 + 1),a
045C 33        1655            rlc     a
045D 95E0      1656            subb    a,acc
045F F502      1657            mov     (__mullong_PARM_2 + 2),a
0461 F503      1658            mov     (__mullong_PARM_2 + 3),a
0463           1659   ;        main.c:399: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
0463 ED        1660            mov     a,r5
0464 33        1661            rlc     a
0465 95E0      1662            subb    a,acc
0467 FE        1663            mov     r6,a
0468           1664   ;        main.c:400: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
0468 8C82      1665            mov     dpl,r4
046A 8D83      1666            mov     dph,r5
046C 8EF0      1667            mov     b,r6
046E 120000    1668            lcall   __mullong
0471 AC82      1669            mov     r4,dpl
0473 AD83      1670            mov     r5,dph
0475 AEF0      1671            mov     r6,b
0477 FF        1672            mov     r7,a
0478 EC        1673            mov     a,r4
0479 2510      1674            add     a,_BMM150_compensate_x_sloc0_1_0
047B FC        1675            mov     r4,a
047C ED        1676            mov     a,r5
047D 3511      1677            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
047F FD        1678            mov     r5,a
0480 EE        1679            mov     a,r6
0481 3512      1680            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
0483 FE        1681            mov     r6,a
0484 EF        1682            mov     a,r7
0485 3513      1683            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0487 FF        1684            mov     r7,a
0488 750000    1685            mov     __divslong_PARM_2,#0x00
048B 750102    1686            mov     (__divslong_PARM_2 + 1),#0x02
048E 750200    1687            mov     (__divslong_PARM_2 + 2),#0x00
0491 750300    1688            mov     (__divslong_PARM_2 + 3),#0x00
0494 8C82      1689            mov     dpl,r4
0496 8D83      1690            mov     dph,r5
0498 8EF0      1691            mov     b,r6
049A EF        1692            mov     a,r7
049B 120000    1693            lcall   __divslong
049E AC82      1694            mov     r4,dpl
04A0 AD83      1695            mov     r5,dph
04A2 AEF0      1696            mov     r6,b
04A4 FF        1697            mov     r7,a
04A5 7410      1698            mov     a,#0x10
04A7 2E        1699            add     a,r6
04A8 FE        1700            mov     r6,a
04A9 E4        1701            clr     a
04AA 3F        1702            addc    a,r7
04AB FF        1703            mov     r7,a
04AC           1704   ;        main.c:401: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
04AC 905CE8    1705            mov     dptr,#_dig_x2
04AF E0        1706            movx    a,@dptr
04B0 F8        1707            mov     r0,a
04B1 33        1708            rlc     a
04B2 95E0      1709            subb    a,acc
04B4 F9        1710            mov     r1,a
04B5 74A0      1711            mov     a,#0xA0
04B7 28        1712            add     a,r0
04B8 F8        1713            mov     r0,a
04B9 E4        1714            clr     a
04BA 39        1715            addc    a,r1
04BB 8800      1716            mov     __mullong_PARM_2,r0
04BD F501      1717            mov     (__mullong_PARM_2 + 1),a
04BF 33        1718            rlc     a
04C0 95E0      1719            subb    a,acc
04C2 F502      1720            mov     (__mullong_PARM_2 + 2),a
04C4 F503      1721            mov     (__mullong_PARM_2 + 3),a
04C6           1722   ;        main.c:402: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
04C6 8C82      1723            mov     dpl,r4
04C8 8D83      1724            mov     dph,r5
04CA 8EF0      1725            mov     b,r6
04CC EF        1726            mov     a,r7
04CD 120000    1727            lcall   __mullong
04D0           1728   ;        main.c:403: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
04D0 750000    1729            mov     __divslong_PARM_2,#0x00
04D3 750110    1730            mov     (__divslong_PARM_2 + 1),#0x10
04D6 750200    1731            mov     (__divslong_PARM_2 + 2),#0x00
04D9 750300    1732            mov     (__divslong_PARM_2 + 3),#0x00
04DC 120000    1733            lcall   __divslong
04DF 858200    1734            mov     __mullong_PARM_2,dpl
04E2 858301    1735            mov     (__mullong_PARM_2 + 1),dph
04E5 85F002    1736            mov     (__mullong_PARM_2 + 2),b
04E8 F503      1737            mov     (__mullong_PARM_2 + 3),a
04EA D003      1738            pop     ar3
04EC D002      1739            pop     ar2
04EE EB        1740            mov     a,r3
04EF 33        1741            rlc     a
04F0 95E0      1742            subb    a,acc
04F2 FC        1743            mov     r4,a
04F3           1744   ;        main.c:404: retval = ((int16_t)(process_comp_x10 / 8192));
04F3 8A82      1745            mov     dpl,r2
04F5 8B83      1746            mov     dph,r3
04F7 8CF0      1747            mov     b,r4
04F9 120000    1748            lcall   __mullong
04FC 750000    1749            mov     __divslong_PARM_2,#0x00
04FF 750120    1750            mov     (__divslong_PARM_2 + 1),#0x20
0502 750200    1751            mov     (__divslong_PARM_2 + 2),#0x00
0505 750300    1752            mov     (__divslong_PARM_2 + 3),#0x00
0508 120000    1753            lcall   __divslong
050B AA82      1754            mov     r2,dpl
050D AB83      1755            mov     r3,dph
050F           1756   ;        main.c:405: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
050F 905D28    1757            mov     dptr,#_dig_x1
0512 E0        1758            movx    a,@dptr
0513 FC        1759            mov     r4,a
0514 33        1760            rlc     a
0515 95E0      1761            subb    a,acc
0517 C4        1762            swap    a
0518 03        1763            rr      a
0519 54F8      1764            anl     a,#0xf8
051B CC        1765            xch     a,r4
051C C4        1766            swap    a
051D 03        1767            rr      a
051E CC        1768            xch     a,r4
051F 6C        1769            xrl     a,r4
0520 CC        1770            xch     a,r4
0521 54F8      1771            anl     a,#0xf8
0523 CC        1772            xch     a,r4
0524 6C        1773            xrl     a,r4
0525 FD        1774            mov     r5,a
0526 EC        1775            mov     a,r4
0527 2A        1776            add     a,r2
0528 F582      1777            mov     dpl,a
052A ED        1778            mov     a,r5
052B 3B        1779            addc    a,r3
052C F583      1780            mov     dph,a
052E 750010    1781            mov     __divsint_PARM_2,#0x10
0531 E4        1782            clr     a
0532 F501      1783            mov     (__divsint_PARM_2 + 1),a
0534 120000    1784            lcall   __divsint
0537 E582      1785            mov     a,dpl
0539 8583F0    1786            mov     b,dph
053C 90D4A0    1787            mov     dptr,#_BMM150_compensate_x_retval_1_106
053F F0        1788            movx    @dptr,a
0540 A3        1789            inc     dptr
0541 E5F0      1790            mov     a,b
0543 F0        1791            movx    @dptr,a
0544 8000      1792            sjmp    L010012?
0546           1793   L010008?:
0546           1794   ;        main.c:408: retval = BMM150_OVERFLOW_OUTPUT; 
0546 90D4A0    1795            mov     dptr,#_BMM150_compensate_x_retval_1_106
0549 E4        1796            clr     a
054A F0        1797            movx    @dptr,a
054B A3        1798            inc     dptr
054C 7480      1799            mov     a,#0x80
054E F0        1800            movx    @dptr,a
054F 8000      1801            sjmp    L010012?
0551           1802   L010011?:
0551           1803   ;        main.c:412: retval = BMM150_OVERFLOW_OUTPUT; 
0551 90D4A0    1804            mov     dptr,#_BMM150_compensate_x_retval_1_106
0554 E4        1805            clr     a
0555 F0        1806            movx    @dptr,a
0556 A3        1807            inc     dptr
0557 7480      1808            mov     a,#0x80
0559 F0        1809            movx    @dptr,a
055A           1810   L010012?:
055A           1811   ;        main.c:414: return retval; 
055A 90D4A0    1812            mov     dptr,#_BMM150_compensate_x_retval_1_106
055D E0        1813            movx    a,@dptr
055E FA        1814            mov     r2,a
055F A3        1815            inc     dptr
0560 E0        1816            movx    a,@dptr
0561 8A82      1817            mov     dpl,r2
0563 F583      1818            mov     dph,a
0565 22        1819            ret
0566           1820   ;------------------------------------------------------------
0566           1821   ;Allocation info for local variables in function 'BMM150_compensate_y'
0566           1822   ;------------------------------------------------------------
0566           1823   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
0566           1824   ;mag_data_y                Allocated to registers r2 r3 r4 
0566           1825   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
0566           1826   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_115'
0566           1827   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_115'
0566           1828   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_115'
0566           1829   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_115'
0566           1830   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_115'
0566           1831   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_115'
0566           1832   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_115'
0566           1833   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_115'
0566           1834   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_115'
0566           1835   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_115'
0566           1836   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_115'
0566           1837   ;------------------------------------------------------------
0566           1838   ;        main.c:417: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
0566           1839   ;        -----------------------------------------
0566           1840   ;         function BMM150_compensate_y
0566           1841   ;        -----------------------------------------
0566           1842   _BMM150_compensate_y:
0566           1843   ;        main.c:435: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
0566 ACF0      1844            mov     r4,b
0568 120000    1845            lcall   __gptrget
056B FA        1846            mov     r2,a
056C A3        1847            inc     dptr
056D 120000    1848            lcall   __gptrget
0570 FB        1849            mov     r3,a
0571 BA00C0    1850            cjne    r2,#0x00,L011019?
0574 BBF0C0    1851            cjne    r3,#0xF0,L011019?
0577 020000    1852            ljmp    L011011?
057A           1853   L011019?:
057A           1854   ;        main.c:437: if (*data_rhall != 0)
057A AC58      1855            mov     r4,_BMM150_compensate_y_PARM_2
057C AD59      1856            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
057E AE5A      1857            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
0580 8C82      1858            mov     dpl,r4
0582 8D83      1859            mov     dph,r5
0584 8EF0      1860            mov     b,r6
0586 120000    1861            lcall   __gptrget
0589 FC        1862            mov     r4,a
058A A3        1863            inc     dptr
058B 120000    1864            lcall   __gptrget
058E FD        1865            mov     r5,a
058F 4C        1866            orl     a,r4
0590 6000      1867            jz      L011005?
0592           1868   ;        main.c:440: process_comp_y0 = *data_rhall;
0592 90D5C0    1869            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
0595 EC        1870            mov     a,r4
0596 F0        1871            movx    @dptr,a
0597 A3        1872            inc     dptr
0598 ED        1873            mov     a,r5
0599 F0        1874            movx    @dptr,a
059A 8000      1875            sjmp    L011006?
059C           1876   L011005?:
059C           1877   ;        main.c:442: else if (dig_xyz1 != 0)
059C 905AA8    1878            mov     dptr,#_dig_xyz1
059F E0        1879            movx    a,@dptr
05A0 FC        1880            mov     r4,a
05A1 A3        1881            inc     dptr
05A2 E0        1882            movx    a,@dptr
05A3 FD        1883            mov     r5,a
05A4 4C        1884            orl     a,r4
05A5 6000      1885            jz      L011002?
05A7           1886   ;        main.c:444: process_comp_y0 = dig_xyz1;
05A7 90D5C0    1887            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
05AA EC        1888            mov     a,r4
05AB F0        1889            movx    @dptr,a
05AC A3        1890            inc     dptr
05AD ED        1891            mov     a,r5
05AE F0        1892            movx    @dptr,a
05AF 8000      1893            sjmp    L011006?
05B1           1894   L011002?:
05B1           1895   ;        main.c:448: process_comp_y0 = 0;
05B1 90D5C0    1896            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
05B4 E4        1897            clr     a
05B5 F0        1898            movx    @dptr,a
05B6 A3        1899            inc     dptr
05B7 F0        1900            movx    @dptr,a
05B8           1901   L011006?:
05B8           1902   ;        main.c:451: if (process_comp_y0 != 0)
05B8 90D5C0    1903            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
05BB E0        1904            movx    a,@dptr
05BC FC        1905            mov     r4,a
05BD A3        1906            inc     dptr
05BE E0        1907            movx    a,@dptr
05BF FD        1908            mov     r5,a
05C0 4C        1909            orl     a,r4
05C1 7000      1910            jnz     L011022?
05C3 020000    1911            ljmp    L011008?
05C6           1912   L011022?:
05C6           1913   ;        main.c:454: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
05C6 905AA8    1914            mov     dptr,#_dig_xyz1
05C9 E0        1915            movx    a,@dptr
05CA FE        1916            mov     r6,a
05CB A3        1917            inc     dptr
05CC E0        1918            movx    a,@dptr
05CD FF        1919            mov     r7,a
05CE E4        1920            clr     a
05CF F8        1921            mov     r0,a
05D0 EF        1922            mov     a,r7
05D1 C8        1923            xch     a,r0
05D2 5403      1924            anl     a,#0x03
05D4 A2E0      1925            mov     c,acc.0
05D6 C8        1926            xch     a,r0
05D7 13        1927            rrc     a
05D8 C8        1928            xch     a,r0
05D9 13        1929            rrc     a
05DA A2E0      1930            mov     c,acc.0
05DC C8        1931            xch     a,r0
05DD 13        1932            rrc     a
05DE C8        1933            xch     a,r0
05DF 13        1934            rrc     a
05E0 C8        1935            xch     a,r0
05E1 F9        1936            mov     r1,a
05E2 EE        1937            mov     a,r6
05E3 03        1938            rr      a
05E4 03        1939            rr      a
05E5 54C0      1940            anl     a,#0xc0
05E7 FF        1941            mov     r7,a
05E8 EE        1942            mov     a,r6
05E9 03        1943            rr      a
05EA 03        1944            rr      a
05EB 543F      1945            anl     a,#0x3f
05ED 48        1946            orl     a,r0
05EE F8        1947            mov     r0,a
05EF 7E00      1948            mov     r6,#0x00
05F1 8C00      1949            mov     __divslong_PARM_2,r4
05F3 8D01      1950            mov     (__divslong_PARM_2 + 1),r5
05F5 750200    1951            mov     (__divslong_PARM_2 + 2),#0x00
05F8 750300    1952            mov     (__divslong_PARM_2 + 3),#0x00
05FB           1953   ;        main.c:455: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
05FB 8E82      1954            mov     dpl,r6
05FD 8F83      1955            mov     dph,r7
05FF 88F0      1956            mov     b,r0
0601 E9        1957            mov     a,r1
0602 C002      1958            push    ar2
0604 C003      1959            push    ar3
0606 120000    1960            lcall   __divslong
0609 AC82      1961            mov     r4,dpl
060B E583      1962            mov     a,dph
060D 24C0      1963            add     a,#0xc0
060F FD        1964            mov     r5,a
0610           1965   ;        main.c:457: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
0610 8C06      1966            mov     ar6,r4
0612 8D07      1967            mov     ar7,r5
0614 8E60      1968            mov     _BMM150_compensate_y_sloc0_1_0,r6
0616 EF        1969            mov     a,r7
0617 F561      1970            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
0619 33        1971            rlc     a
061A 95E0      1972            subb    a,acc
061C F562      1973            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
061E F563      1974            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0620 8C06      1975            mov     ar6,r4
0622 8D07      1976            mov     ar7,r5
0624 8E00      1977            mov     __mullong_PARM_2,r6
0626 EF        1978            mov     a,r7
0627 F501      1979            mov     (__mullong_PARM_2 + 1),a
0629 33        1980            rlc     a
062A 95E0      1981            subb    a,acc
062C F502      1982            mov     (__mullong_PARM_2 + 2),a
062E F503      1983            mov     (__mullong_PARM_2 + 3),a
0630           1984   ;        main.c:458: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
0630 856082    1985            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0633 856183    1986            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0636 8562F0    1987            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
0639 E563      1988            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
063B C004      1989            push    ar4
063D C005      1990            push    ar5
063F 120000    1991            lcall   __mullong
0642 858260    1992            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0645 858361    1993            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
0648 85F062    1994            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
064B F563      1995            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
064D 905AE8    1996            mov     dptr,#_dig_xy2
0650 E0        1997            movx    a,@dptr
0651 FE        1998            mov     r6,a
0652 33        1999            rlc     a
0653 95E0      2000            subb    a,acc
0655 FF        2001            mov     r7,a
0656 F8        2002            mov     r0,a
0657 F9        2003            mov     r1,a
0658 750080    2004            mov     __divslong_PARM_2,#0x80
065B E4        2005            clr     a
065C F501      2006            mov     (__divslong_PARM_2 + 1),a
065E F502      2007            mov     (__divslong_PARM_2 + 2),a
0660 F503      2008            mov     (__divslong_PARM_2 + 3),a
0662 856082    2009            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0665 856183    2010            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0668 8562F0    2011            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
066B E563      2012            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
066D C006      2013            push    ar6
066F C007      2014            push    ar7
0671 C000      2015            push    ar0
0673 C001      2016            push    ar1
0675 120000    2017            lcall   __divslong
0678 858200    2018            mov     __mullong_PARM_2,dpl
067B 858301    2019            mov     (__mullong_PARM_2 + 1),dph
067E 85F002    2020            mov     (__mullong_PARM_2 + 2),b
0681 F503      2021            mov     (__mullong_PARM_2 + 3),a
0683 D001      2022            pop     ar1
0685 D000      2023            pop     ar0
0687 D007      2024            pop     ar7
0689 D006      2025            pop     ar6
068B           2026   ;        main.c:459: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
068B 8E82      2027            mov     dpl,r6
068D 8F83      2028            mov     dph,r7
068F 88F0      2029            mov     b,r0
0691 E9        2030            mov     a,r1
0692 120000    2031            lcall   __mullong
0695 858260    2032            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0698 858361    2033            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
069B 85F062    2034            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
069E F563      2035            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
06A0 D005      2036            pop     ar5
06A2 D004      2037            pop     ar4
06A4 905B28    2038            mov     dptr,#_dig_xy1
06A7 E0        2039            movx    a,@dptr
06A8 FE        2040            mov     r6,a
06A9 E4        2041            clr     a
06AA 5401      2042            anl     a,#0x01
06AC A2E0      2043            mov     c,acc.0
06AE CE        2044            xch     a,r6
06AF 13        2045            rrc     a
06B0 CE        2046            xch     a,r6
06B1 13        2047            rrc     a
06B2 CE        2048            xch     a,r6
06B3 8E00      2049            mov     __mullong_PARM_2,r6
06B5 F501      2050            mov     (__mullong_PARM_2 + 1),a
06B7 33        2051            rlc     a
06B8 95E0      2052            subb    a,acc
06BA F502      2053            mov     (__mullong_PARM_2 + 2),a
06BC F503      2054            mov     (__mullong_PARM_2 + 3),a
06BE           2055   ;        main.c:460: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
06BE ED        2056            mov     a,r5
06BF 33        2057            rlc     a
06C0 95E0      2058            subb    a,acc
06C2 FE        2059            mov     r6,a
06C3 8C82      2060            mov     dpl,r4
06C5 8D83      2061            mov     dph,r5
06C7 8EF0      2062            mov     b,r6
06C9 120000    2063            lcall   __mullong
06CC AC82      2064            mov     r4,dpl
06CE AD83      2065            mov     r5,dph
06D0 AEF0      2066            mov     r6,b
06D2 FF        2067            mov     r7,a
06D3 EC        2068            mov     a,r4
06D4 2560      2069            add     a,_BMM150_compensate_y_sloc0_1_0
06D6 FC        2070            mov     r4,a
06D7 ED        2071            mov     a,r5
06D8 3561      2072            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
06DA FD        2073            mov     r5,a
06DB EE        2074            mov     a,r6
06DC 3562      2075            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
06DE FE        2076            mov     r6,a
06DF EF        2077            mov     a,r7
06E0 3563      2078            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
06E2 FF        2079            mov     r7,a
06E3 750000    2080            mov     __divslong_PARM_2,#0x00
06E6 750102    2081            mov     (__divslong_PARM_2 + 1),#0x02
06E9 750200    2082            mov     (__divslong_PARM_2 + 2),#0x00
06EC 750300    2083            mov     (__divslong_PARM_2 + 3),#0x00
06EF           2084   ;        main.c:461: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
06EF 8C82      2085            mov     dpl,r4
06F1 8D83      2086            mov     dph,r5
06F3 8EF0      2087            mov     b,r6
06F5 EF        2088            mov     a,r7
06F6 120000    2089            lcall   __divslong
06F9 AC82      2090            mov     r4,dpl
06FB AD83      2091            mov     r5,dph
06FD AEF0      2092            mov     r6,b
06FF FF        2093            mov     r7,a
0700 905C68    2094            mov     dptr,#_dig_y2
0703 E0        2095            movx    a,@dptr
0704 F8        2096            mov     r0,a
0705 33        2097            rlc     a
0706 95E0      2098            subb    a,acc
0708 F9        2099            mov     r1,a
0709 74A0      2100            mov     a,#0xA0
070B 28        2101            add     a,r0
070C F8        2102            mov     r0,a
070D E4        2103            clr     a
070E 39        2104            addc    a,r1
070F 8800      2105            mov     __mullong_PARM_2,r0
0711 F501      2106            mov     (__mullong_PARM_2 + 1),a
0713 33        2107            rlc     a
0714 95E0      2108            subb    a,acc
0716 F502      2109            mov     (__mullong_PARM_2 + 2),a
0718 F503      2110            mov     (__mullong_PARM_2 + 3),a
071A           2111   ;        main.c:462: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
071A 7410      2112            mov     a,#0x10
071C 2E        2113            add     a,r6
071D FE        2114            mov     r6,a
071E E4        2115            clr     a
071F 3F        2116            addc    a,r7
0720 8C82      2117            mov     dpl,r4
0722 8D83      2118            mov     dph,r5
0724 8EF0      2119            mov     b,r6
0726 120000    2120            lcall   __mullong
0729           2121   ;        main.c:463: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
0729 750000    2122            mov     __divslong_PARM_2,#0x00
072C 750110    2123            mov     (__divslong_PARM_2 + 1),#0x10
072F 750200    2124            mov     (__divslong_PARM_2 + 2),#0x00
0732 750300    2125            mov     (__divslong_PARM_2 + 3),#0x00
0735 120000    2126            lcall   __divslong
0738 858200    2127            mov     __mullong_PARM_2,dpl
073B 858301    2128            mov     (__mullong_PARM_2 + 1),dph
073E 85F002    2129            mov     (__mullong_PARM_2 + 2),b
0741 F503      2130            mov     (__mullong_PARM_2 + 3),a
0743 D003      2131            pop     ar3
0745 D002      2132            pop     ar2
0747 EB        2133            mov     a,r3
0748 33        2134            rlc     a
0749 95E0      2135            subb    a,acc
074B FC        2136            mov     r4,a
074C           2137   ;        main.c:464: retval = (int16_t)(process_comp_y9 / 8192);
074C 8A82      2138            mov     dpl,r2
074E 8B83      2139            mov     dph,r3
0750 8CF0      2140            mov     b,r4
0752 120000    2141            lcall   __mullong
0755 750000    2142            mov     __divslong_PARM_2,#0x00
0758 750120    2143            mov     (__divslong_PARM_2 + 1),#0x20
075B 750200    2144            mov     (__divslong_PARM_2 + 2),#0x00
075E 750300    2145            mov     (__divslong_PARM_2 + 3),#0x00
0761 120000    2146            lcall   __divslong
0764 AA82      2147            mov     r2,dpl
0766 AB83      2148            mov     r3,dph
0768           2149   ;        main.c:465: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
0768 905CA8    2150            mov     dptr,#_dig_y1
076B E0        2151            movx    a,@dptr
076C FC        2152            mov     r4,a
076D 33        2153            rlc     a
076E 95E0      2154            subb    a,acc
0770 C4        2155            swap    a
0771 03        2156            rr      a
0772 54F8      2157            anl     a,#0xf8
0774 CC        2158            xch     a,r4
0775 C4        2159            swap    a
0776 03        2160            rr      a
0777 CC        2161            xch     a,r4
0778 6C        2162            xrl     a,r4
0779 CC        2163            xch     a,r4
077A 54F8      2164            anl     a,#0xf8
077C CC        2165            xch     a,r4
077D 6C        2166            xrl     a,r4
077E FD        2167            mov     r5,a
077F EC        2168            mov     a,r4
0780 2A        2169            add     a,r2
0781 F582      2170            mov     dpl,a
0783 ED        2171            mov     a,r5
0784 3B        2172            addc    a,r3
0785 F583      2173            mov     dph,a
0787 750010    2174            mov     __divsint_PARM_2,#0x10
078A E4        2175            clr     a
078B F501      2176            mov     (__divsint_PARM_2 + 1),a
078D 120000    2177            lcall   __divsint
0790 E582      2178            mov     a,dpl
0792 8583F0    2179            mov     b,dph
0795 90D560    2180            mov     dptr,#_BMM150_compensate_y_retval_1_115
0798 F0        2181            movx    @dptr,a
0799 A3        2182            inc     dptr
079A E5F0      2183            mov     a,b
079C F0        2184            movx    @dptr,a
079D 8000      2185            sjmp    L011012?
079F           2186   L011008?:
079F           2187   ;        main.c:469: retval = BMM150_OVERFLOW_OUTPUT;
079F 90D560    2188            mov     dptr,#_BMM150_compensate_y_retval_1_115
07A2 E4        2189            clr     a
07A3 F0        2190            movx    @dptr,a
07A4 A3        2191            inc     dptr
07A5 7480      2192            mov     a,#0x80
07A7 F0        2193            movx    @dptr,a
07A8 8000      2194            sjmp    L011012?
07AA           2195   L011011?:
07AA           2196   ;        main.c:475: retval = BMM150_OVERFLOW_OUTPUT;
07AA 90D560    2197            mov     dptr,#_BMM150_compensate_y_retval_1_115
07AD E4        2198            clr     a
07AE F0        2199            movx    @dptr,a
07AF A3        2200            inc     dptr
07B0 7480      2201            mov     a,#0x80
07B2 F0        2202            movx    @dptr,a
07B3           2203   L011012?:
07B3           2204   ;        main.c:478: return retval;
07B3 90D560    2205            mov     dptr,#_BMM150_compensate_y_retval_1_115
07B6 E0        2206            movx    a,@dptr
07B7 FA        2207            mov     r2,a
07B8 A3        2208            inc     dptr
07B9 E0        2209            movx    a,@dptr
07BA 8A82      2210            mov     dpl,r2
07BC F583      2211            mov     dph,a
07BE 22        2212            ret
07BF           2213   ;------------------------------------------------------------
07BF           2214   ;Allocation info for local variables in function 'BMM150_Read_Data'
07BF           2215   ;------------------------------------------------------------
07BF           2216   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
07BF           2217   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_123'
07BF           2218   ;raw_x_lsb                 Allocated with name '_BMM150_Read_Data_raw_x_lsb_1_124'
07BF           2219   ;raw_x_msb                 Allocated with name '_BMM150_Read_Data_raw_x_msb_1_124'
07BF           2220   ;raw_y_lsb                 Allocated with name '_BMM150_Read_Data_raw_y_lsb_1_124'
07BF           2221   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_124'
07BF           2222   ;raw_rhall_lsb             Allocated with name '_BMM150_Read_Data_raw_rhall_lsb_1_124'
07BF           2223   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_124'
07BF           2224   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_124'
07BF           2225   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_124'
07BF           2226   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_124'
07BF           2227   ;msb_data                  Allocated with name '_BMM150_Read_Data_msb_data_1_124'
07BF           2228   ;------------------------------------------------------------
07BF           2229   ;        main.c:481: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y)
07BF           2230   ;        -----------------------------------------
07BF           2231   ;         function BMM150_Read_Data
07BF           2232   ;        -----------------------------------------
07BF           2233   _BMM150_Read_Data:
07BF 8582B0    2234            mov     _BMM150_Read_Data_mag_x_1_123,dpl
07C2 8583B1    2235            mov     (_BMM150_Read_Data_mag_x_1_123 + 1),dph
07C5 85F0B2    2236            mov     (_BMM150_Read_Data_mag_x_1_123 + 2),b
07C8           2237   ;        main.c:488: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
07C8 758242    2238            mov     dpl,#0x42
07CB 120000    2239            lcall   _SPI_read
07CE AD82      2240            mov     r5,dpl
07D0           2241   ;        main.c:489: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
07D0 758243    2242            mov     dpl,#0x43
07D3 C005      2243            push    ar5
07D5 120000    2244            lcall   _SPI_read
07D8 AE82      2245            mov     r6,dpl
07DA           2246   ;        main.c:490: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
07DA 758244    2247            mov     dpl,#0x44
07DD C006      2248            push    ar6
07DF 120000    2249            lcall   _SPI_read
07E2 AF82      2250            mov     r7,dpl
07E4           2251   ;        main.c:491: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
07E4 758245    2252            mov     dpl,#0x45
07E7 C007      2253            push    ar7
07E9 120000    2254            lcall   _SPI_read
07EC A882      2255            mov     r0,dpl
07EE           2256   ;        main.c:494: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
07EE 758248    2257            mov     dpl,#0x48
07F1 C000      2258            push    ar0
07F3 120000    2259            lcall   _SPI_read
07F6 A982      2260            mov     r1,dpl
07F8           2261   ;        main.c:495: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
07F8 758249    2262            mov     dpl,#0x49
07FB C001      2263            push    ar1
07FD 120000    2264            lcall   _SPI_read
0800 AA82      2265            mov     r2,dpl
0802 D001      2266            pop     ar1
0804 D000      2267            pop     ar0
0806 D007      2268            pop     ar7
0808 D006      2269            pop     ar6
080A D005      2270            pop     ar5
080C           2271   ;        main.c:499: raw_x_lsb = ((raw_x_lsb & 0b_1111_1000)) >> 3;
080C 5305F8    2272            anl     ar5,#0xF8
080F ED        2273            mov     a,r5
0810 C4        2274            swap    a
0811 23        2275            rl      a
0812 541F      2276            anl     a,#0x1f
0814 FD        2277            mov     r5,a
0815           2278   ;        main.c:500: msb_data = ((int16_t)((int8_t)raw_x_msb)) << 5; 
0815 EE        2279            mov     a,r6
0816 33        2280            rlc     a
0817 95E0      2281            subb    a,acc
0819 C4        2282            swap    a
081A 23        2283            rl      a
081B 54E0      2284            anl     a,#0xe0
081D CE        2285            xch     a,r6
081E C4        2286            swap    a
081F 23        2287            rl      a
0820 CE        2288            xch     a,r6
0821 6E        2289            xrl     a,r6
0822 CE        2290            xch     a,r6
0823 54E0      2291            anl     a,#0xe0
0825 CE        2292            xch     a,r6
0826 6E        2293            xrl     a,r6
0827 FB        2294            mov     r3,a
0828           2295   ;        main.c:501: x_val = (int16_t)(msb_data | raw_x_lsb);
0828 7C00      2296            mov     r4,#0x00
082A 90D610    2297            mov     dptr,#_BMM150_Read_Data_x_val_1_124
082D ED        2298            mov     a,r5
082E 4E        2299            orl     a,r6
082F F0        2300            movx    @dptr,a
0830 EC        2301            mov     a,r4
0831 4B        2302            orl     a,r3
0832 A3        2303            inc     dptr
0833 F0        2304            movx    @dptr,a
0834           2305   ;        main.c:504: raw_y_lsb = ((raw_y_lsb & 0b_1111_1000)) >> 3;
0834 5307F8    2306            anl     ar7,#0xF8
0837 EF        2307            mov     a,r7
0838 C4        2308            swap    a
0839 23        2309            rl      a
083A 541F      2310            anl     a,#0x1f
083C FF        2311            mov     r7,a
083D           2312   ;        main.c:505: msb_data = ((int16_t)((int8_t)raw_y_msb)) << 5; 
083D E8        2313            mov     a,r0
083E 33        2314            rlc     a
083F 95E0      2315            subb    a,acc
0841 C4        2316            swap    a
0842 23        2317            rl      a
0843 54E0      2318            anl     a,#0xe0
0845 C8        2319            xch     a,r0
0846 C4        2320            swap    a
0847 23        2321            rl      a
0848 C8        2322            xch     a,r0
0849 68        2323            xrl     a,r0
084A C8        2324            xch     a,r0
084B 54E0      2325            anl     a,#0xe0
084D C8        2326            xch     a,r0
084E 68        2327            xrl     a,r0
084F FB        2328            mov     r3,a
0850           2329   ;        main.c:506: y_val = (int16_t)(msb_data | raw_y_lsb);
0850 7C00      2330            mov     r4,#0x00
0852 90D660    2331            mov     dptr,#_BMM150_Read_Data_y_val_1_124
0855 EF        2332            mov     a,r7
0856 48        2333            orl     a,r0
0857 F0        2334            movx    @dptr,a
0858 EC        2335            mov     a,r4
0859 4B        2336            orl     a,r3
085A A3        2337            inc     dptr
085B F0        2338            movx    @dptr,a
085C           2339   ;        main.c:514: raw_rhall_lsb = ((raw_rhall_lsb & 0xFC) >> 2);
085C 5301FC    2340            anl     ar1,#0xFC
085F E9        2341            mov     a,r1
0860 03        2342            rr      a
0861 03        2343            rr      a
0862 543F      2344            anl     a,#0x3f
0864 F9        2345            mov     r1,a
0865           2346   ;        main.c:515: rhall_val = (uint16_t)(((uint16_t)raw_rhall_msb << 6) | raw_rhall_lsb);
0865 E4        2347            clr     a
0866 5403      2348            anl     a,#0x03
0868 A2E0      2349            mov     c,acc.0
086A CA        2350            xch     a,r2
086B 13        2351            rrc     a
086C CA        2352            xch     a,r2
086D 13        2353            rrc     a
086E A2E0      2354            mov     c,acc.0
0870 CA        2355            xch     a,r2
0871 13        2356            rrc     a
0872 CA        2357            xch     a,r2
0873 13        2358            rrc     a
0874 CA        2359            xch     a,r2
0875 FB        2360            mov     r3,a
0876 7C00      2361            mov     r4,#0x00
0878 90D6C0    2362            mov     dptr,#_BMM150_Read_Data_rhall_val_1_124
087B E9        2363            mov     a,r1
087C 4A        2364            orl     a,r2
087D F0        2365            movx    @dptr,a
087E EC        2366            mov     a,r4
087F 4B        2367            orl     a,r3
0880 A3        2368            inc     dptr
0881 F0        2369            movx    @dptr,a
0882           2370   ;        main.c:518: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
0882 75A8C0    2371            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_124
0885 75A9D6    2372            mov     (_BMM150_compensate_x_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_124 >> 8)
0888 75AA00    2373            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x00
088B 90D610    2374            mov     dptr,#_BMM150_Read_Data_x_val_1_124
088E 75F000    2375            mov     b,#0x00
0891 120000    2376            lcall   _BMM150_compensate_x
0894 AA82      2377            mov     r2,dpl
0896 AB83      2378            mov     r3,dph
0898 85B082    2379            mov     dpl,_BMM150_Read_Data_mag_x_1_123
089B 85B183    2380            mov     dph,(_BMM150_Read_Data_mag_x_1_123 + 1)
089E 85B2F0    2381            mov     b,(_BMM150_Read_Data_mag_x_1_123 + 2)
08A1 EA        2382            mov     a,r2
08A2 120000    2383            lcall   __gptrput
08A5 A3        2384            inc     dptr
08A6 EB        2385            mov     a,r3
08A7 120000    2386            lcall   __gptrput
08AA           2387   ;        main.c:519: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
08AA AA08      2388            mov     r2,_BMM150_Read_Data_PARM_2
08AC AB09      2389            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
08AE AC0A      2390            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
08B0 7558C0    2391            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_124
08B3 7559D6    2392            mov     (_BMM150_compensate_y_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_124 >> 8)
08B6 755A00    2393            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x00
08B9 90D660    2394            mov     dptr,#_BMM150_Read_Data_y_val_1_124
08BC 75F000    2395            mov     b,#0x00
08BF C002      2396            push    ar2
08C1 C003      2397            push    ar3
08C3 C004      2398            push    ar4
08C5 120000    2399            lcall   _BMM150_compensate_y
08C8 AD82      2400            mov     r5,dpl
08CA AE83      2401            mov     r6,dph
08CC D004      2402            pop     ar4
08CE D003      2403            pop     ar3
08D0 D002      2404            pop     ar2
08D2 8A82      2405            mov     dpl,r2
08D4 8B83      2406            mov     dph,r3
08D6 8CF0      2407            mov     b,r4
08D8 ED        2408            mov     a,r5
08D9 120000    2409            lcall   __gptrput
08DC A3        2410            inc     dptr
08DD EE        2411            mov     a,r6
08DE 020000    2412            ljmp    __gptrput
08E1           2413   ;------------------------------------------------------------
08E1           2414   ;Allocation info for local variables in function 'UART1_Init'
08E1           2415   ;------------------------------------------------------------
08E1           2416   ;baudrate                  Allocated to registers r2 r3 r4 r5 
08E1           2417   ;------------------------------------------------------------
08E1           2418   ;        main.c:525: void UART1_Init (unsigned long baudrate)
08E1           2419   ;        -----------------------------------------
08E1           2420   ;         function UART1_Init
08E1           2421   ;        -----------------------------------------
08E1           2422   _UART1_Init:
08E1 AA82      2423            mov     r2,dpl
08E3 AB83      2424            mov     r3,dph
08E5 ACF0      2425            mov     r4,b
08E7 FD        2426            mov     r5,a
08E8           2427   ;        main.c:527: SFRPAGE = 0x20;
08E8 75A720    2428            mov     _SFRPAGE,#0x20
08EB           2429   ;        main.c:528: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
08EB 75930C    2430            mov     _SMOD1,#0x0C
08EE           2431   ;        main.c:529: SCON1 = 0x10;
08EE 75C810    2432            mov     _SCON1,#0x10
08F1           2433   ;        main.c:530: SBCON1 =0x00;   // disable baud rate generator
08F1 759400    2434            mov     _SBCON1,#0x00
08F4           2435   ;        main.c:531: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
08F4 8A00      2436            mov     __divulong_PARM_2,r2
08F6 8B01      2437            mov     (__divulong_PARM_2 + 1),r3
08F8 8C02      2438            mov     (__divulong_PARM_2 + 2),r4
08FA 8D03      2439            mov     (__divulong_PARM_2 + 3),r5
08FC 90A200    2440            mov     dptr,#0xA200
08FF 75F04A    2441            mov     b,#0x4A
0902 7404      2442            mov     a,#0x04
0904 120000    2443            lcall   __divulong
0907 AA82      2444            mov     r2,dpl
0909 AB83      2445            mov     r3,dph
090B ACF0      2446            mov     r4,b
090D FD        2447            mov     r5,a
090E 750018    2448            mov     __divulong_PARM_2,#0x18
0911 E4        2449            clr     a
0912 F501      2450            mov     (__divulong_PARM_2 + 1),a
0914 F502      2451            mov     (__divulong_PARM_2 + 2),a
0916 F503      2452            mov     (__divulong_PARM_2 + 3),a
0918 8A82      2453            mov     dpl,r2
091A 8B83      2454            mov     dph,r3
091C 8CF0      2455            mov     b,r4
091E ED        2456            mov     a,r5
091F 120000    2457            lcall   __divulong
0922 AA82      2458            mov     r2,dpl
0924 AB83      2459            mov     r3,dph
0926 ACF0      2460            mov     r4,b
0928 FD        2461            mov     r5,a
0929 E4        2462            clr     a
092A C3        2463            clr     c
092B 9A        2464            subb    a,r2
092C FA        2465            mov     r2,a
092D E4        2466            clr     a
092E 9B        2467            subb    a,r3
092F FB        2468            mov     r3,a
0930 7401      2469            mov     a,#0x01
0932 9C        2470            subb    a,r4
0933 E4        2471            clr     a
0934 9D        2472            subb    a,r5
0935 8A95      2473            mov     _SBRL1,r2
0937 8B96      2474            mov     (_SBRL1 >> 8),r3
0939           2475   ;        main.c:532: TI1 = 1; // indicate ready for TX
0939 D2C9      2476            setb    _TI1
093B           2477   ;        main.c:533: SBCON1 |= 0x40;   // enable baud rate generator
093B 439440    2478            orl     _SBCON1,#0x40
093E           2479   ;        main.c:534: SFRPAGE = 0x00;
093E 75A700    2480            mov     _SFRPAGE,#0x00
0941 22        2481            ret
0942           2482   ;------------------------------------------------------------
0942           2483   ;Allocation info for local variables in function 'putchar1'
0942           2484   ;------------------------------------------------------------
0942           2485   ;c                         Allocated to registers r2 
0942           2486   ;------------------------------------------------------------
0942           2487   ;        main.c:537: void putchar1 (char c) 
0942           2488   ;        -----------------------------------------
0942           2489   ;         function putchar1
0942           2490   ;        -----------------------------------------
0942           2491   _putchar1:
0942 AA82      2492            mov     r2,dpl
0944           2493   ;        main.c:539: SFRPAGE = 0x20;
0944 75A720    2494            mov     _SFRPAGE,#0x20
0947           2495   ;        main.c:540: while (!TI1);
0947           2496   L014001?:
0947           2497   ;        main.c:541: TI1=0;
0947 10C9D0    2498            jbc     _TI1,L014008?
094A 8000      2499            sjmp    L014001?
094C           2500   L014008?:
094C           2501   ;        main.c:542: SBUF1 = c;
094C 8A92      2502            mov     _SBUF1,r2
094E           2503   ;        main.c:543: SFRPAGE = 0x00;
094E 75A700    2504            mov     _SFRPAGE,#0x00
0951 22        2505            ret
0952           2506   ;------------------------------------------------------------
0952           2507   ;Allocation info for local variables in function 'sendstr1'
0952           2508   ;------------------------------------------------------------
0952           2509   ;s                         Allocated to registers r2 r3 r4 
0952           2510   ;------------------------------------------------------------
0952           2511   ;        main.c:546: void sendstr1 (char * s)
0952           2512   ;        -----------------------------------------
0952           2513   ;         function sendstr1
0952           2514   ;        -----------------------------------------
0952           2515   _sendstr1:
0952 AA82      2516            mov     r2,dpl
0954 AB83      2517            mov     r3,dph
0956 ACF0      2518            mov     r4,b
0958           2519   ;        main.c:548: while(*s)
0958           2520   L015001?:
0958 8A82      2521            mov     dpl,r2
095A 8B83      2522            mov     dph,r3
095C 8CF0      2523            mov     b,r4
095E 120000    2524            lcall   __gptrget
0961 FD        2525            mov     r5,a
0962 6000      2526            jz      L015004?
0964           2527   ;        main.c:550: putchar1(*s);
0964 8D82      2528            mov     dpl,r5
0966 C002      2529            push    ar2
0968 C003      2530            push    ar3
096A C004      2531            push    ar4
096C 120000    2532            lcall   _putchar1
096F D004      2533            pop     ar4
0971 D003      2534            pop     ar3
0973 D002      2535            pop     ar2
0975           2536   ;        main.c:551: s++;        
0975 0A        2537            inc     r2
0976 BA0010    2538            cjne    r2,#0x00,L015001?
0979 0B        2539            inc     r3
097A 8000      2540            sjmp    L015001?
097C           2541   L015004?:
097C 22        2542            ret
097D           2543   ;------------------------------------------------------------
097D           2544   ;Allocation info for local variables in function 'getchar1'
097D           2545   ;------------------------------------------------------------
097D           2546   ;c                         Allocated with name '_getchar1_c_1_133'
097D           2547   ;------------------------------------------------------------
097D           2548   ;        main.c:555: char getchar1 (void)
097D           2549   ;        -----------------------------------------
097D           2550   ;         function getchar1
097D           2551   ;        -----------------------------------------
097D           2552   _getchar1:
097D           2553   ;        main.c:558: SFRPAGE = 0x20;
097D 75A720    2554            mov     _SFRPAGE,#0x20
0980           2555   ;        main.c:559: while (!RI1);
0980           2556   L016001?:
0980           2557   ;        main.c:560: RI1=0;
0980 10C8D0    2558            jbc     _RI1,L016008?
0983 8000      2559            sjmp    L016001?
0985           2560   L016008?:
0985           2561   ;        main.c:562: SCON1&=0b_0011_1111;
0985 53C83F    2562            anl     _SCON1,#0x3F
0988           2563   ;        main.c:563: c = SBUF1;
0988 859282    2564            mov     dpl,_SBUF1
098B           2565   ;        main.c:564: SFRPAGE = 0x00;
098B 75A700    2566            mov     _SFRPAGE,#0x00
098E           2567   ;        main.c:565: return (c);
098E 22        2568            ret
098F           2569   ;------------------------------------------------------------
098F           2570   ;Allocation info for local variables in function 'getchar1_with_timeout'
098F           2571   ;------------------------------------------------------------
098F           2572   ;c                         Allocated with name '_getchar1_with_timeout_c_1_135'
098F           2573   ;timeout                   Allocated with name '_getchar1_with_timeout_timeout_1_135'
098F           2574   ;------------------------------------------------------------
098F           2575   ;        main.c:568: char getchar1_with_timeout (void)
098F           2576   ;        -----------------------------------------
098F           2577   ;         function getchar1_with_timeout
098F           2578   ;        -----------------------------------------
098F           2579   _getchar1_with_timeout:
098F           2580   ;        main.c:572: SFRPAGE = 0x20;
098F 75A720    2581            mov     _SFRPAGE,#0x20
0992           2582   ;        main.c:574: while (!RI1)
0992 7A00      2583            mov     r2,#0x00
0994 7B00      2584            mov     r3,#0x00
0996           2585   L017003?:
0996 20C850    2586            jb      _RI1,L017005?
0999           2587   ;        main.c:576: SFRPAGE = 0x00;
0999 75A700    2588            mov     _SFRPAGE,#0x00
099C           2589   ;        main.c:577: Timer3us(20);
099C 758214    2590            mov     dpl,#0x14
099F C002      2591            push    ar2
09A1 C003      2592            push    ar3
09A3 120000    2593            lcall   _Timer3us
09A6 D003      2594            pop     ar3
09A8 D002      2595            pop     ar2
09AA           2596   ;        main.c:578: SFRPAGE = 0x20;
09AA 75A720    2597            mov     _SFRPAGE,#0x20
09AD           2598   ;        main.c:579: timeout++;
09AD 0A        2599            inc     r2
09AE BA0090    2600            cjne    r2,#0x00,L017012?
09B1 0B        2601            inc     r3
09B2           2602   L017012?:
09B2           2603   ;        main.c:580: if(timeout==25000)
09B2 BAA810    2604            cjne    r2,#0xA8,L017003?
09B5 BB6110    2605            cjne    r3,#0x61,L017003?
09B8           2606   ;        main.c:582: SFRPAGE = 0x00;
09B8 75A700    2607            mov     _SFRPAGE,#0x00
09BB           2608   ;        main.c:583: return ('\n'); // Timeout after half second
09BB 75820A    2609            mov     dpl,#0x0A
09BE 22        2610            ret
09BF           2611   L017005?:
09BF           2612   ;        main.c:586: RI1=0;
09BF C2C8      2613            clr     _RI1
09C1           2614   ;        main.c:588: SCON1&=0b_0011_1111;
09C1 53C83F    2615            anl     _SCON1,#0x3F
09C4           2616   ;        main.c:589: c = SBUF1;
09C4 859282    2617            mov     dpl,_SBUF1
09C7           2618   ;        main.c:590: SFRPAGE = 0x00;
09C7 75A700    2619            mov     _SFRPAGE,#0x00
09CA           2620   ;        main.c:591: return (c);
09CA 22        2621            ret
09CB           2622   ;------------------------------------------------------------
09CB           2623   ;Allocation info for local variables in function 'getstr1'
09CB           2624   ;------------------------------------------------------------
09CB           2625   ;n                         Allocated with name '_getstr1_PARM_2'
09CB           2626   ;s                         Allocated to registers r2 r3 r4 
09CB           2627   ;c                         Allocated with name '_getstr1_c_1_139'
09CB           2628   ;cnt                       Allocated with name '_getstr1_cnt_1_139'
09CB           2629   ;------------------------------------------------------------
09CB           2630   ;        main.c:594: void getstr1 (char * s, unsigned char n)
09CB           2631   ;        -----------------------------------------
09CB           2632   ;         function getstr1
09CB           2633   ;        -----------------------------------------
09CB           2634   _getstr1:
09CB AA82      2635            mov     r2,dpl
09CD AB83      2636            mov     r3,dph
09CF ACF0      2637            mov     r4,b
09D1           2638   ;        main.c:600: while(1)
09D1 7D00      2639            mov     r5,#0x00
09D3 8A06      2640            mov     ar6,r2
09D5 8B07      2641            mov     ar7,r3
09D7 8C00      2642            mov     ar0,r4
09D9           2643   L018007?:
09D9           2644   ;        main.c:602: c=getchar1_with_timeout();
09D9 C002      2645            push    ar2
09DB C003      2646            push    ar3
09DD C004      2647            push    ar4
09DF C005      2648            push    ar5
09E1 C006      2649            push    ar6
09E3 C007      2650            push    ar7
09E5 C000      2651            push    ar0
09E7 120000    2652            lcall   _getchar1_with_timeout
09EA A982      2653            mov     r1,dpl
09EC D000      2654            pop     ar0
09EE D007      2655            pop     ar7
09F0 D006      2656            pop     ar6
09F2 D005      2657            pop     ar5
09F4 D004      2658            pop     ar4
09F6 D003      2659            pop     ar3
09F8 D002      2660            pop     ar2
09FA           2661   ;        main.c:603: if(c=='\n')
09FA B90A10    2662            cjne    r1,#0x0A,L018002?
09FD           2663   ;        main.c:605: *s=0;
09FD 8A82      2664            mov     dpl,r2
09FF 8B83      2665            mov     dph,r3
0A01 8CF0      2666            mov     b,r4
0A03 E4        2667            clr     a
0A04           2668   ;        main.c:606: return;
0A04 020000    2669            ljmp    __gptrput
0A07           2670   L018002?:
0A07           2671   ;        main.c:609: if (cnt<n)
0A07 C3        2672            clr     c
0A08 ED        2673            mov     a,r5
0A09 95B8      2674            subb    a,_getstr1_PARM_2
0A0B 5000      2675            jnc     L018004?
0A0D           2676   ;        main.c:611: cnt++;
0A0D 0D        2677            inc     r5
0A0E           2678   ;        main.c:612: *s=c;
0A0E 8E82      2679            mov     dpl,r6
0A10 8F83      2680            mov     dph,r7
0A12 88F0      2681            mov     b,r0
0A14 E9        2682            mov     a,r1
0A15 120000    2683            lcall   __gptrput
0A18 A3        2684            inc     dptr
0A19 AE82      2685            mov     r6,dpl
0A1B AF83      2686            mov     r7,dph
0A1D           2687   ;        main.c:613: s++;
0A1D 8E02      2688            mov     ar2,r6
0A1F 8F03      2689            mov     ar3,r7
0A21 8804      2690            mov     ar4,r0
0A23 8000      2691            sjmp    L018007?
0A25           2692   L018004?:
0A25           2693   ;        main.c:617: *s=0;
0A25 8A82      2694            mov     dpl,r2
0A27 8B83      2695            mov     dph,r3
0A29 8CF0      2696            mov     b,r4
0A2B E4        2697            clr     a
0A2C           2698   ;        main.c:618: return;
0A2C 020000    2699            ljmp    __gptrput
0A2F           2700   ;------------------------------------------------------------
0A2F           2701   ;Allocation info for local variables in function 'RXU1'
0A2F           2702   ;------------------------------------------------------------
0A2F           2703   ;------------------------------------------------------------
0A2F           2704   ;        main.c:624: bit RXU1 (void)
0A2F           2705   ;        -----------------------------------------
0A2F           2706   ;         function RXU1
0A2F           2707   ;        -----------------------------------------
0A2F           2708   _RXU1:
0A2F           2709   ;        main.c:627: SFRPAGE = 0x20;
0A2F 75A720    2710            mov     _SFRPAGE,#0x20
0A32           2711   ;        main.c:628: mybit=RI1;
0A32 A2C8      2712            mov     c,_RI1
0A34           2713   ;        main.c:629: SFRPAGE = 0x00;
0A34 75A700    2714            mov     _SFRPAGE,#0x00
0A37           2715   ;        main.c:630: return mybit;
0A37 22        2716            ret
0A38           2717   ;------------------------------------------------------------
0A38           2718   ;Allocation info for local variables in function 'waitms_or_RI1'
0A38           2719   ;------------------------------------------------------------
0A38           2720   ;ms                        Allocated to registers r2 r3 
0A38           2721   ;j                         Allocated with name '_waitms_or_RI1_j_1_147'
0A38           2722   ;k                         Allocated with name '_waitms_or_RI1_k_1_147'
0A38           2723   ;------------------------------------------------------------
0A38           2724   ;        main.c:633: void waitms_or_RI1 (unsigned int ms)
0A38           2725   ;        -----------------------------------------
0A38           2726   ;         function waitms_or_RI1
0A38           2727   ;        -----------------------------------------
0A38           2728   _waitms_or_RI1:
0A38 AA82      2729            mov     r2,dpl
0A3A AB83      2730            mov     r3,dph
0A3C           2731   ;        main.c:637: for(j=0; j<ms; j++)
0A3C 7C00      2732            mov     r4,#0x00
0A3E 7D00      2733            mov     r5,#0x00
0A40           2734   L020007?:
0A40 C3        2735            clr     c
0A41 EC        2736            mov     a,r4
0A42 9A        2737            subb    a,r2
0A43 ED        2738            mov     a,r5
0A44 9B        2739            subb    a,r3
0A45 5000      2740            jnc     L020011?
0A47           2741   ;        main.c:639: for (k=0; k<4; k++)
0A47 7E00      2742            mov     r6,#0x00
0A49           2743   L020003?:
0A49 BE0450    2744            cjne    r6,#0x04,L020019?
0A4C           2745   L020019?:
0A4C 5000      2746            jnc     L020009?
0A4E           2747   ;        main.c:641: if(RXU1()) return;
0A4E C002      2748            push    ar2
0A50 C003      2749            push    ar3
0A52 C004      2750            push    ar4
0A54 C005      2751            push    ar5
0A56 C006      2752            push    ar6
0A58 120000    2753            lcall   _RXU1
0A5B E4        2754            clr     a
0A5C 33        2755            rlc     a
0A5D D006      2756            pop     ar6
0A5F D005      2757            pop     ar5
0A61 D004      2758            pop     ar4
0A63 D003      2759            pop     ar3
0A65 D002      2760            pop     ar2
0A67 6000      2761            jz      L020002?
0A69 22        2762            ret
0A6A           2763   L020002?:
0A6A           2764   ;        main.c:642: Timer3us(250);
0A6A 7582FA    2765            mov     dpl,#0xFA
0A6D C002      2766            push    ar2
0A6F C003      2767            push    ar3
0A71 C004      2768            push    ar4
0A73 C005      2769            push    ar5
0A75 C006      2770            push    ar6
0A77 120000    2771            lcall   _Timer3us
0A7A D006      2772            pop     ar6
0A7C D005      2773            pop     ar5
0A7E D004      2774            pop     ar4
0A80 D003      2775            pop     ar3
0A82 D002      2776            pop     ar2
0A84           2777   ;        main.c:639: for (k=0; k<4; k++)
0A84 0E        2778            inc     r6
0A85 8000      2779            sjmp    L020003?
0A87           2780   L020009?:
0A87           2781   ;        main.c:637: for(j=0; j<ms; j++)
0A87 0C        2782            inc     r4
0A88 BC0090    2783            cjne    r4,#0x00,L020007?
0A8B 0D        2784            inc     r5
0A8C 8000      2785            sjmp    L020007?
0A8E           2786   L020011?:
0A8E 22        2787            ret
0A8F           2788   ;------------------------------------------------------------
0A8F           2789   ;Allocation info for local variables in function 'SendATCommand'
0A8F           2790   ;------------------------------------------------------------
0A8F           2791   ;s                         Allocated to registers r2 r3 r4 
0A8F           2792   ;------------------------------------------------------------
0A8F           2793   ;        main.c:647: void SendATCommand (char * s)
0A8F           2794   ;        -----------------------------------------
0A8F           2795   ;         function SendATCommand
0A8F           2796   ;        -----------------------------------------
0A8F           2797   _SendATCommand:
0A8F AA82      2798            mov     r2,dpl
0A91 AB83      2799            mov     r3,dph
0A93 ACF0      2800            mov     r4,b
0A95           2801   ;        main.c:649: printf("Command: %s", s);
0A95 C002      2802            push    ar2
0A97 C003      2803            push    ar3
0A99 C004      2804            push    ar4
0A9B C002      2805            push    ar2
0A9D C003      2806            push    ar3
0A9F C004      2807            push    ar4
0AA1 7410      2808            mov     a,#__str_2
0AA3 C0E0      2809            push    acc
0AA5 74EE      2810            mov     a,#(__str_2 >> 8)
0AA7 C0E0      2811            push    acc
0AA9 7480      2812            mov     a,#0x80
0AAB C0E0      2813            push    acc
0AAD 120000    2814            lcall   _printf
0AB0 E581      2815            mov     a,sp
0AB2 24FA      2816            add     a,#0xfa
0AB4 F581      2817            mov     sp,a
0AB6           2818   ;        main.c:650: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0AB6 C2A0      2819            clr     _P2_0
0AB8           2820   ;        main.c:651: waitms(5);
0AB8 900005    2821            mov     dptr,#0x0005
0ABB 120000    2822            lcall   _waitms
0ABE D004      2823            pop     ar4
0AC0 D003      2824            pop     ar3
0AC2 D002      2825            pop     ar2
0AC4           2826   ;        main.c:652: sendstr1(s);
0AC4 8A82      2827            mov     dpl,r2
0AC6 8B83      2828            mov     dph,r3
0AC8 8CF0      2829            mov     b,r4
0ACA 120000    2830            lcall   _sendstr1
0ACD           2831   ;        main.c:653: getstr1(buff, sizeof(buff)-1);
0ACD 75B813    2832            mov     _getstr1_PARM_2,#0x13
0AD0 905E28    2833            mov     dptr,#_buff
0AD3 75F040    2834            mov     b,#0x40
0AD6 120000    2835            lcall   _getstr1
0AD9           2836   ;        main.c:654: waitms(10);
0AD9 90000A    2837            mov     dptr,#0x000A
0ADC 120000    2838            lcall   _waitms
0ADF           2839   ;        main.c:655: P2_0=1; // 'set' pin to 1 is normal operation mode.
0ADF D2A0      2840            setb    _P2_0
0AE1           2841   ;        main.c:656: printf("Response: %s\r\n", buff);
0AE1 7428      2842            mov     a,#_buff
0AE3 C0E0      2843            push    acc
0AE5 745E      2844            mov     a,#(_buff >> 8)
0AE7 C0E0      2845            push    acc
0AE9 7440      2846            mov     a,#0x40
0AEB C0E0      2847            push    acc
0AED 7450      2848            mov     a,#__str_3
0AEF C0E0      2849            push    acc
0AF1 74EE      2850            mov     a,#(__str_3 >> 8)
0AF3 C0E0      2851            push    acc
0AF5 7480      2852            mov     a,#0x80
0AF7 C0E0      2853            push    acc
0AF9 120000    2854            lcall   _printf
0AFC E581      2855            mov     a,sp
0AFE 24FA      2856            add     a,#0xfa
0B00 F581      2857            mov     sp,a
0B02 22        2858            ret
0B03           2859   ;------------------------------------------------------------
0B03           2860   ;Allocation info for local variables in function 'ReceptionOff'
0B03           2861   ;------------------------------------------------------------
0B03           2862   ;------------------------------------------------------------
0B03           2863   ;        main.c:659: void ReceptionOff (void)
0B03           2864   ;        -----------------------------------------
0B03           2865   ;         function ReceptionOff
0B03           2866   ;        -----------------------------------------
0B03           2867   _ReceptionOff:
0B03           2868   ;        main.c:661: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0B03 C2A0      2869            clr     _P2_0
0B05           2870   ;        main.c:662: waitms(10);
0B05 90000A    2871            mov     dptr,#0x000A
0B08 120000    2872            lcall   _waitms
0B0B           2873   ;        main.c:663: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0B0B 90EE90    2874            mov     dptr,#__str_4
0B0E 75F080    2875            mov     b,#0x80
0B11 120000    2876            lcall   _sendstr1
0B14           2877   ;        main.c:664: waitms(10);
0B14 90000A    2878            mov     dptr,#0x000A
0B17 120000    2879            lcall   _waitms
0B1A           2880   ;        main.c:666: SCON1&=0b_0011_1111;
0B1A 53C83F    2881            anl     _SCON1,#0x3F
0B1D           2882   ;        main.c:667: P2_0=1; // 'set' pin to 1 is normal operation mode.
0B1D D2A0      2883            setb    _P2_0
0B1F 22        2884            ret
0B20           2885   ;------------------------------------------------------------
0B20           2886   ;Allocation info for local variables in function 'measure_distance'
0B20           2887   ;------------------------------------------------------------
0B20           2888   ;------------------------------------------------------------
0B20           2889   ;        main.c:670: int measure_distance(void)
0B20           2890   ;        -----------------------------------------
0B20           2891   ;         function measure_distance
0B20           2892   ;        -----------------------------------------
0B20           2893   _measure_distance:
0B20           2894   ;        main.c:674: TL0 = 0; 
0B20 758A00    2895            mov     _TL0,#0x00
0B23           2896   ;        main.c:675: TH0 = 0; 
0B23 758C00    2897            mov     _TH0,#0x00
0B26           2898   ;        main.c:676: TF0 = 0; 
0B26 C28D      2899            clr     _TF0
0B28           2900   ;        main.c:677: overflow_count = 0;
0B28 905A28    2901            mov     dptr,#_overflow_count
0B2B           2902   ;        main.c:678: duration = 0;
0B2B E4        2903            clr     a
0B2C F0        2904            movx    @dptr,a
0B2D 9053D8    2905            mov     dptr,#_duration
0B30 F0        2906            movx    @dptr,a
0B31 A3        2907            inc     dptr
0B32 E4        2908            clr     a
0B33 F0        2909            movx    @dptr,a
0B34 A3        2910            inc     dptr
0B35 F0        2911            movx    @dptr,a
0B36 A3        2912            inc     dptr
0B37 F0        2913            movx    @dptr,a
0B38           2914   ;        main.c:680: TRIG_PIN = 1; 
0B38 D280      2915            setb    _P0_0
0B3A           2916   ;        main.c:681: for(i = 0; i < 40; i++);
0B3A 9059A8    2917            mov     dptr,#_i
0B3D 7428      2918            mov     a,#0x28
0B3F F0        2919            movx    @dptr,a
0B40 E4        2920            clr     a
0B41 A3        2921            inc     dptr
0B42 F0        2922            movx    @dptr,a
0B43           2923   L023016?:
0B43 9059A8    2924            mov     dptr,#_i
0B46 E0        2925            movx    a,@dptr
0B47 FA        2926            mov     r2,a
0B48 A3        2927            inc     dptr
0B49 E0        2928            movx    a,@dptr
0B4A FB        2929            mov     r3,a
0B4B 1A        2930            dec     r2
0B4C BAFF10    2931            cjne    r2,#0xff,L023029?
0B4F 1B        2932            dec     r3
0B50           2933   L023029?:
0B50 9059A8    2934            mov     dptr,#_i
0B53 EA        2935            mov     a,r2
0B54 F0        2936            movx    @dptr,a
0B55 A3        2937            inc     dptr
0B56 EB        2938            mov     a,r3
0B57 F0        2939            movx    @dptr,a
0B58 9059A8    2940            mov     dptr,#_i
0B5B E0        2941            movx    a,@dptr
0B5C FA        2942            mov     r2,a
0B5D A3        2943            inc     dptr
0B5E E0        2944            movx    a,@dptr
0B5F FB        2945            mov     r3,a
0B60 4A        2946            orl     a,r2
0B61 7000      2947            jnz     L023016?
0B63 9059A8    2948            mov     dptr,#_i
0B66 7428      2949            mov     a,#0x28
0B68 F0        2950            movx    @dptr,a
0B69 E4        2951            clr     a
0B6A A3        2952            inc     dptr
0B6B F0        2953            movx    @dptr,a
0B6C           2954   ;        main.c:682: TRIG_PIN = 0; 
0B6C C280      2955            clr     _P0_0
0B6E           2956   ;        main.c:684: while (ECHO_PIN != 0){
0B6E           2957   L023003?:
0B6E 30B190    2958            jnb     _P3_1,L023006?
0B71           2959   ;        main.c:685: i++;
0B71 9059A8    2960            mov     dptr,#_i
0B74 E0        2961            movx    a,@dptr
0B75 2401      2962            add     a,#0x01
0B77 F0        2963            movx    @dptr,a
0B78 A3        2964            inc     dptr
0B79 E0        2965            movx    a,@dptr
0B7A 3400      2966            addc    a,#0x00
0B7C F0        2967            movx    @dptr,a
0B7D           2968   ;        main.c:686: if (i > 3000){
0B7D 9059A8    2969            mov     dptr,#_i
0B80 E0        2970            movx    a,@dptr
0B81 FA        2971            mov     r2,a
0B82 A3        2972            inc     dptr
0B83 E0        2973            movx    a,@dptr
0B84 FB        2974            mov     r3,a
0B85 C3        2975            clr     c
0B86 74B8      2976            mov     a,#0xB8
0B88 9A        2977            subb    a,r2
0B89 740B      2978            mov     a,#0x0B
0B8B 9B        2979            subb    a,r3
0B8C 5000      2980            jnc     L023003?
0B8E           2981   ;        main.c:688: return -1;
0B8E 90FFFF    2982            mov     dptr,#0xFFFF
0B91 22        2983            ret
0B92           2984   ;        main.c:691: while (ECHO_PIN != 1);
0B92           2985   L023006?:
0B92 30B190    2986            jnb     _P3_1,L023006?
0B95           2987   ;        main.c:692: TR0 = 1; 
0B95 D28C      2988            setb    _TR0
0B97           2989   ;        main.c:693: while (ECHO_PIN == 1)
0B97           2990   L023011?:
0B97 30B170    2991            jnb     _P3_1,L023013?
0B9A           2992   ;        main.c:695: if (TF0 == 1){
0B9A           2993   ;        main.c:696: TF0 = 0; 
0B9A 108DB0    2994            jbc     _TF0,L023035?
0B9D 8000      2995            sjmp    L023011?
0B9F           2996   L023035?:
0B9F           2997   ;        main.c:697: overflow_count++;
0B9F 905A28    2998            mov     dptr,#_overflow_count
0BA2 E0        2999            movx    a,@dptr
0BA3 2401      3000            add     a,#0x01
0BA5 F0        3001            movx    @dptr,a
0BA6 8000      3002            sjmp    L023011?
0BA8           3003   L023013?:
0BA8           3004   ;        main.c:701: TR0 = 0; 
0BA8 C28C      3005            clr     _TR0
0BAA           3006   ;        main.c:702: duration = (overflow_count*65536.0 + TH0*256.0 + TL0) * (12.0/SYSCLK);
0BAA 905A28    3007            mov     dptr,#_overflow_count
0BAD E0        3008            movx    a,@dptr
0BAE F582      3009            mov     dpl,a
0BB0 120000    3010            lcall   ___uchar2fs
0BB3 AA82      3011            mov     r2,dpl
0BB5 AB83      3012            mov     r3,dph
0BB7 ACF0      3013            mov     r4,b
0BB9 FD        3014            mov     r5,a
0BBA C002      3015            push    ar2
0BBC C003      3016            push    ar3
0BBE C004      3017            push    ar4
0BC0 C005      3018            push    ar5
0BC2 900000    3019            mov     dptr,#0x0000
0BC5 75F080    3020            mov     b,#0x80
0BC8 7447      3021            mov     a,#0x47
0BCA 120000    3022            lcall   ___fsmul
0BCD AA82      3023            mov     r2,dpl
0BCF AB83      3024            mov     r3,dph
0BD1 ACF0      3025            mov     r4,b
0BD3 FD        3026            mov     r5,a
0BD4 E581      3027            mov     a,sp
0BD6 24FC      3028            add     a,#0xfc
0BD8 F581      3029            mov     sp,a
0BDA 858C82    3030            mov     dpl,_TH0
0BDD C002      3031            push    ar2
0BDF C003      3032            push    ar3
0BE1 C004      3033            push    ar4
0BE3 C005      3034            push    ar5
0BE5 120000    3035            lcall   ___uchar2fs
0BE8 AE82      3036            mov     r6,dpl
0BEA AF83      3037            mov     r7,dph
0BEC A8F0      3038            mov     r0,b
0BEE F9        3039            mov     r1,a
0BEF C006      3040            push    ar6
0BF1 C007      3041            push    ar7
0BF3 C000      3042            push    ar0
0BF5 C001      3043            push    ar1
0BF7 900000    3044            mov     dptr,#0x0000
0BFA 75F080    3045            mov     b,#0x80
0BFD 7443      3046            mov     a,#0x43
0BFF 120000    3047            lcall   ___fsmul
0C02 AE82      3048            mov     r6,dpl
0C04 AF83      3049            mov     r7,dph
0C06 A8F0      3050            mov     r0,b
0C08 F9        3051            mov     r1,a
0C09 E581      3052            mov     a,sp
0C0B 24FC      3053            add     a,#0xfc
0C0D F581      3054            mov     sp,a
0C0F D005      3055            pop     ar5
0C11 D004      3056            pop     ar4
0C13 D003      3057            pop     ar3
0C15 D002      3058            pop     ar2
0C17 C006      3059            push    ar6
0C19 C007      3060            push    ar7
0C1B C000      3061            push    ar0
0C1D C001      3062            push    ar1
0C1F 8A82      3063            mov     dpl,r2
0C21 8B83      3064            mov     dph,r3
0C23 8CF0      3065            mov     b,r4
0C25 ED        3066            mov     a,r5
0C26 120000    3067            lcall   ___fsadd
0C29 AA82      3068            mov     r2,dpl
0C2B AB83      3069            mov     r3,dph
0C2D ACF0      3070            mov     r4,b
0C2F FD        3071            mov     r5,a
0C30 E581      3072            mov     a,sp
0C32 24FC      3073            add     a,#0xfc
0C34 F581      3074            mov     sp,a
0C36 AE8A      3075            mov     r6,_TL0
0C38 7F00      3076            mov     r7,#0x00
0C3A 8E82      3077            mov     dpl,r6
0C3C 8F83      3078            mov     dph,r7
0C3E C002      3079            push    ar2
0C40 C003      3080            push    ar3
0C42 C004      3081            push    ar4
0C44 C005      3082            push    ar5
0C46 120000    3083            lcall   ___sint2fs
0C49 AE82      3084            mov     r6,dpl
0C4B AF83      3085            mov     r7,dph
0C4D A8F0      3086            mov     r0,b
0C4F F9        3087            mov     r1,a
0C50 D005      3088            pop     ar5
0C52 D004      3089            pop     ar4
0C54 D003      3090            pop     ar3
0C56 D002      3091            pop     ar2
0C58 C006      3092            push    ar6
0C5A C007      3093            push    ar7
0C5C C000      3094            push    ar0
0C5E C001      3095            push    ar1
0C60 8A82      3096            mov     dpl,r2
0C62 8B83      3097            mov     dph,r3
0C64 8CF0      3098            mov     b,r4
0C66 ED        3099            mov     a,r5
0C67 120000    3100            lcall   ___fsadd
0C6A AA82      3101            mov     r2,dpl
0C6C AB83      3102            mov     r3,dph
0C6E ACF0      3103            mov     r4,b
0C70 FD        3104            mov     r5,a
0C71 E581      3105            mov     a,sp
0C73 24FC      3106            add     a,#0xfc
0C75 F581      3107            mov     sp,a
0C77 C002      3108            push    ar2
0C79 C003      3109            push    ar3
0C7B C004      3110            push    ar4
0C7D C005      3111            push    ar5
0C7F 90F4FC    3112            mov     dptr,#0xF4FC
0C82 75F032    3113            mov     b,#0x32
0C85 7434      3114            mov     a,#0x34
0C87 120000    3115            lcall   ___fsmul
0C8A AA82      3116            mov     r2,dpl
0C8C AB83      3117            mov     r3,dph
0C8E ACF0      3118            mov     r4,b
0C90 FD        3119            mov     r5,a
0C91 E581      3120            mov     a,sp
0C93 24FC      3121            add     a,#0xfc
0C95 F581      3122            mov     sp,a
0C97 9053D8    3123            mov     dptr,#_duration
0C9A EA        3124            mov     a,r2
0C9B F0        3125            movx    @dptr,a
0C9C A3        3126            inc     dptr
0C9D EB        3127            mov     a,r3
0C9E F0        3128            movx    @dptr,a
0C9F A3        3129            inc     dptr
0CA0 EC        3130            mov     a,r4
0CA1 F0        3131            movx    @dptr,a
0CA2 A3        3132            inc     dptr
0CA3 ED        3133            mov     a,r5
0CA4 F0        3134            movx    @dptr,a
0CA5           3135   ;        main.c:704: distance = 100 * (340.0 * duration * 100.0 / 2.0); // distance in cm
0CA5 C002      3136            push    ar2
0CA7 C003      3137            push    ar3
0CA9 C004      3138            push    ar4
0CAB C005      3139            push    ar5
0CAD 90D000    3140            mov     dptr,#0xD000
0CB0 75F004    3141            mov     b,#0x04
0CB3 7447      3142            mov     a,#0x47
0CB5 120000    3143            lcall   ___fsmul
0CB8 AA82      3144            mov     r2,dpl
0CBA AB83      3145            mov     r3,dph
0CBC ACF0      3146            mov     r4,b
0CBE FD        3147            mov     r5,a
0CBF E581      3148            mov     a,sp
0CC1 24FC      3149            add     a,#0xfc
0CC3 F581      3150            mov     sp,a
0CC5 E4        3151            clr     a
0CC6 C0E0      3152            push    acc
0CC8 C0E0      3153            push    acc
0CCA C0E0      3154            push    acc
0CCC 7440      3155            mov     a,#0x40
0CCE C0E0      3156            push    acc
0CD0 8A82      3157            mov     dpl,r2
0CD2 8B83      3158            mov     dph,r3
0CD4 8CF0      3159            mov     b,r4
0CD6 ED        3160            mov     a,r5
0CD7 120000    3161            lcall   ___fsdiv
0CDA AA82      3162            mov     r2,dpl
0CDC AB83      3163            mov     r3,dph
0CDE ACF0      3164            mov     r4,b
0CE0 FD        3165            mov     r5,a
0CE1 E581      3166            mov     a,sp
0CE3 24FC      3167            add     a,#0xfc
0CE5 F581      3168            mov     sp,a
0CE7 C002      3169            push    ar2
0CE9 C003      3170            push    ar3
0CEB C004      3171            push    ar4
0CED C005      3172            push    ar5
0CEF 900000    3173            mov     dptr,#0x0000
0CF2 75F0C8    3174            mov     b,#0xC8
0CF5 7442      3175            mov     a,#0x42
0CF7 120000    3176            lcall   ___fsmul
0CFA AA82      3177            mov     r2,dpl
0CFC AB83      3178            mov     r3,dph
0CFE ACF0      3179            mov     r4,b
0D00 FD        3180            mov     r5,a
0D01 E581      3181            mov     a,sp
0D03 24FC      3182            add     a,#0xfc
0D05 F581      3183            mov     sp,a
0D07 8A82      3184            mov     dpl,r2
0D09 8B83      3185            mov     dph,r3
0D0B 8CF0      3186            mov     b,r4
0D0D ED        3187            mov     a,r5
0D0E 120000    3188            lcall   ___fs2sint
0D11 AA82      3189            mov     r2,dpl
0D13 AB83      3190            mov     r3,dph
0D15 905A68    3191            mov     dptr,#_distance
0D18 EA        3192            mov     a,r2
0D19 F0        3193            movx    @dptr,a
0D1A A3        3194            inc     dptr
0D1B EB        3195            mov     a,r3
0D1C F0        3196            movx    @dptr,a
0D1D           3197   ;        main.c:706: return distance; 
0D1D 8A82      3198            mov     dpl,r2
0D1F 8B83      3199            mov     dph,r3
0D21 22        3200            ret
0D22           3201   ;------------------------------------------------------------
0D22           3202   ;Allocation info for local variables in function 'Set_Pin_Output'
0D22           3203   ;------------------------------------------------------------
0D22           3204   ;pin                       Allocated to registers r2 
0D22           3205   ;mask                      Allocated to registers r3 
0D22           3206   ;------------------------------------------------------------
0D22           3207   ;        main.c:709: void Set_Pin_Output (unsigned char pin)
0D22           3208   ;        -----------------------------------------
0D22           3209   ;         function Set_Pin_Output
0D22           3210   ;        -----------------------------------------
0D22           3211   _Set_Pin_Output:
0D22 AA82      3212            mov     r2,dpl
0D24           3213   ;        main.c:713: mask=(1<<(pin&0x7));
0D24 7407      3214            mov     a,#0x07
0D26 5A        3215            anl     a,r2
0D27 F5F0      3216            mov     b,a
0D29 05F0      3217            inc     b
0D2B 7401      3218            mov     a,#0x01
0D2D 8000      3219            sjmp    L024011?
0D2F           3220   L024009?:
0D2F 25E0      3221            add     a,acc
0D31           3222   L024011?:
0D31 D5F0B0    3223            djnz    b,L024009?
0D34 FB        3224            mov     r3,a
0D35           3225   ;        main.c:714: switch(pin/0x10)
0D35 EA        3226            mov     a,r2
0D36 C4        3227            swap    a
0D37 540F      3228            anl     a,#0x0f
0D39 FA        3229            mov  r2,a
0D3A 24FC      3230            add     a,#0xff - 0x03
0D3C 4000      3231            jc      L024006?
0D3E EA        3232            mov     a,r2
0D3F 2A        3233            add     a,r2
0D40 2A        3234            add     a,r2
0D41 900330    3235            mov     dptr,#L024013?
0D44 73        3236            jmp     @a+dptr
0D45           3237   L024013?:
0D45 020000    3238            ljmp    L024001?
0D48 020000    3239            ljmp    L024002?
0D4B 020000    3240            ljmp    L024003?
0D4E 020000    3241            ljmp    L024004?
0D51           3242   ;        main.c:716: case 0: P0MDOUT |= mask; break;
0D51           3243   L024001?:
0D51 EB        3244            mov     a,r3
0D52 42A4      3245            orl     _P0MDOUT,a
0D54           3246   ;        main.c:717: case 1: P1MDOUT |= mask; break;
0D54 22        3247            ret
0D55           3248   L024002?:
0D55 EB        3249            mov     a,r3
0D56 42A5      3250            orl     _P1MDOUT,a
0D58           3251   ;        main.c:718: case 2: P2MDOUT |= mask; break; 
0D58 22        3252            ret
0D59           3253   L024003?:
0D59 EB        3254            mov     a,r3
0D5A 42A6      3255            orl     _P2MDOUT,a
0D5C           3256   ;        main.c:719: case 3: P3MDOUT |= mask; break; 
0D5C 22        3257            ret
0D5D           3258   L024004?:
0D5D EB        3259            mov     a,r3
0D5E 429C      3260            orl     _P3MDOUT,a
0D60           3261   ;        main.c:720: }   
0D60           3262   L024006?:
0D60 22        3263            ret
0D61           3264   ;------------------------------------------------------------
0D61           3265   ;Allocation info for local variables in function 'Set_Pin_Input'
0D61           3266   ;------------------------------------------------------------
0D61           3267   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_164'
0D61           3268   ;pin                       Allocated to registers r2 
0D61           3269   ;------------------------------------------------------------
0D61           3270   ;        main.c:723: void Set_Pin_Input (unsigned char pin)
0D61           3271   ;        -----------------------------------------
0D61           3272   ;         function Set_Pin_Input
0D61           3273   ;        -----------------------------------------
0D61           3274   _Set_Pin_Input:
0D61 AA82      3275            mov     r2,dpl
0D63           3276   ;        main.c:727: mask=(1<<(pin&0x7));
0D63 7407      3277            mov     a,#0x07
0D65 5A        3278            anl     a,r2
0D66 F5F0      3279            mov     b,a
0D68 05F0      3280            inc     b
0D6A 7401      3281            mov     a,#0x01
0D6C 8000      3282            sjmp    L025011?
0D6E           3283   L025009?:
0D6E 25E0      3284            add     a,acc
0D70           3285   L025011?:
0D70 D5F0B0    3286            djnz    b,L025009?
0D73           3287   ;        main.c:728: mask=~mask;
0D73 F4        3288            cpl     a
0D74 FB        3289            mov     r3,a
0D75           3290   ;        main.c:729: switch(pin/0x10)
0D75 EA        3291            mov     a,r2
0D76 C4        3292            swap    a
0D77 540F      3293            anl     a,#0x0f
0D79 FA        3294            mov  r2,a
0D7A 24FC      3295            add     a,#0xff - 0x03
0D7C 4000      3296            jc      L025006?
0D7E EA        3297            mov     a,r2
0D7F 2A        3298            add     a,r2
0D80 2A        3299            add     a,r2
0D81 900530    3300            mov     dptr,#L025013?
0D84 73        3301            jmp     @a+dptr
0D85           3302   L025013?:
0D85 020000    3303            ljmp    L025001?
0D88 020000    3304            ljmp    L025002?
0D8B 020000    3305            ljmp    L025003?
0D8E 020000    3306            ljmp    L025004?
0D91           3307   ;        main.c:731: case 0: P0MDOUT &= mask; break;
0D91           3308   L025001?:
0D91 EB        3309            mov     a,r3
0D92 52A4      3310            anl     _P0MDOUT,a
0D94           3311   ;        main.c:732: case 1: P1MDOUT &= mask; break;
0D94 22        3312            ret
0D95           3313   L025002?:
0D95 EB        3314            mov     a,r3
0D96 52A5      3315            anl     _P1MDOUT,a
0D98           3316   ;        main.c:733: case 2: P2MDOUT &= mask; break; 
0D98 22        3317            ret
0D99           3318   L025003?:
0D99 EB        3319            mov     a,r3
0D9A 52A6      3320            anl     _P2MDOUT,a
0D9C           3321   ;        main.c:734: case 3: P3MDOUT &= mask; break; 
0D9C 22        3322            ret
0D9D           3323   L025004?:
0D9D EB        3324            mov     a,r3
0D9E 529C      3325            anl     _P3MDOUT,a
0DA0           3326   ;        main.c:735: }   
0DA0           3327   L025006?:
0DA0 22        3328            ret
0DA1           3329   ;------------------------------------------------------------
0DA1           3330   ;Allocation info for local variables in function 'InitADC'
0DA1           3331   ;------------------------------------------------------------
0DA1           3332   ;------------------------------------------------------------
0DA1           3333   ;        main.c:738: void InitADC (void)
0DA1           3334   ;        -----------------------------------------
0DA1           3335   ;         function InitADC
0DA1           3336   ;        -----------------------------------------
0DA1           3337   _InitADC:
0DA1           3338   ;        main.c:740: SFRPAGE = 0x00;
0DA1 75A700    3339            mov     _SFRPAGE,#0x00
0DA4           3340   ;        main.c:741: ADEN=0; // Disable ADC
0DA4 C2EF      3341            clr     _ADEN
0DA6           3342   ;        main.c:746: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0DA6 75B280    3343            mov     _ADC0CN1,#0x80
0DA9           3344   ;        main.c:750: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0DA9 75BC20    3345            mov     _ADC0CF0,#0x20
0DAC           3346   ;        main.c:754: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
0DAC 75B91E    3347            mov     _ADC0CF1,#0x1E
0DAF           3348   ;        main.c:763: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0DAF 75E800    3349            mov     _ADC0CN0,#0x00
0DB2           3350   ;        main.c:768: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0DB2 75DF3F    3351            mov     _ADC0CF2,#0x3F
0DB5           3352   ;        main.c:772: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0DB5 75B300    3353            mov     _ADC0CN2,#0x00
0DB8           3354   ;        main.c:774: ADEN=1; // Enable ADC
0DB8 D2EF      3355            setb    _ADEN
0DBA 22        3356            ret
0DBB           3357   ;------------------------------------------------------------
0DBB           3358   ;Allocation info for local variables in function 'InitPinADC'
0DBB           3359   ;------------------------------------------------------------
0DBB           3360   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
0DBB           3361   ;portno                    Allocated to registers r2 
0DBB           3362   ;mask                      Allocated to registers r3 
0DBB           3363   ;------------------------------------------------------------
0DBB           3364   ;        main.c:777: void InitPinADC (unsigned char portno, unsigned char pin_num)
0DBB           3365   ;        -----------------------------------------
0DBB           3366   ;         function InitPinADC
0DBB           3367   ;        -----------------------------------------
0DBB           3368   _InitPinADC:
0DBB AA82      3369            mov     r2,dpl
0DBD           3370   ;        main.c:781: mask=1<<pin_num;
0DBD 85F8F0    3371            mov     b,_InitPinADC_PARM_2
0DC0 05F0      3372            inc     b
0DC2 7401      3373            mov     a,#0x01
0DC4 8000      3374            sjmp    L027013?
0DC6           3375   L027011?:
0DC6 25E0      3376            add     a,acc
0DC8           3377   L027013?:
0DC8 D5F0B0    3378            djnz    b,L027011?
0DCB FB        3379            mov     r3,a
0DCC           3380   ;        main.c:783: SFRPAGE = 0x20;
0DCC 75A720    3381            mov     _SFRPAGE,#0x20
0DCF           3382   ;        main.c:784: switch (portno)
0DCF BA00F0    3383            cjne    r2,#0x00,L027014?
0DD2 8000      3384            sjmp    L027001?
0DD4           3385   L027014?:
0DD4 BA0170    3386            cjne    r2,#0x01,L027015?
0DD7 8000      3387            sjmp    L027002?
0DD9           3388   L027015?:
0DD9           3389   ;        main.c:786: case 0:
0DD9 BA02F0    3390            cjne    r2,#0x02,L027005?
0DDC 8000      3391            sjmp    L027003?
0DDE           3392   L027001?:
0DDE           3393   ;        main.c:787: P0MDIN &= (~mask); // Set pin as analog input
0DDE EB        3394            mov     a,r3
0DDF F4        3395            cpl     a
0DE0 FA        3396            mov     r2,a
0DE1 52F1      3397            anl     _P0MDIN,a
0DE3           3398   ;        main.c:788: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0DE3 EB        3399            mov     a,r3
0DE4 42D4      3400            orl     _P0SKIP,a
0DE6           3401   ;        main.c:789: break;
0DE6           3402   ;        main.c:790: case 1:
0DE6 8000      3403            sjmp    L027005?
0DE8           3404   L027002?:
0DE8           3405   ;        main.c:791: P1MDIN &= (~mask); // Set pin as analog input
0DE8 EB        3406            mov     a,r3
0DE9 F4        3407            cpl     a
0DEA FA        3408            mov     r2,a
0DEB 52F2      3409            anl     _P1MDIN,a
0DED           3410   ;        main.c:792: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0DED EB        3411            mov     a,r3
0DEE 42D5      3412            orl     _P1SKIP,a
0DF0           3413   ;        main.c:793: break;
0DF0           3414   ;        main.c:794: case 2:
0DF0 8000      3415            sjmp    L027005?
0DF2           3416   L027003?:
0DF2           3417   ;        main.c:795: P2MDIN &= (~mask); // Set pin as analog input
0DF2 EB        3418            mov     a,r3
0DF3 F4        3419            cpl     a
0DF4 FA        3420            mov     r2,a
0DF5 52F3      3421            anl     _P2MDIN,a
0DF7           3422   ;        main.c:796: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0DF7 EB        3423            mov     a,r3
0DF8 42CC      3424            orl     _P2SKIP,a
0DFA           3425   ;        main.c:800: }
0DFA           3426   L027005?:
0DFA           3427   ;        main.c:801: SFRPAGE = 0x00;
0DFA 75A700    3428            mov     _SFRPAGE,#0x00
0DFD 22        3429            ret
0DFE           3430   ;------------------------------------------------------------
0DFE           3431   ;Allocation info for local variables in function 'ADC_at_Pin'
0DFE           3432   ;------------------------------------------------------------
0DFE           3433   ;pin                       Allocated to registers 
0DFE           3434   ;------------------------------------------------------------
0DFE           3435   ;        main.c:804: unsigned int ADC_at_Pin(unsigned char pin)
0DFE           3436   ;        -----------------------------------------
0DFE           3437   ;         function ADC_at_Pin
0DFE           3438   ;        -----------------------------------------
0DFE           3439   _ADC_at_Pin:
0DFE 8582BB    3440            mov     _ADC0MX,dpl
0E01           3441   ;        main.c:807: ADINT = 0;
0E01 C2ED      3442            clr     _ADINT
0E03           3443   ;        main.c:808: ADBUSY = 1;     // Convert voltage at the pin
0E03 D2EC      3444            setb    _ADBUSY
0E05           3445   ;        main.c:809: while (!ADINT); // Wait for conversion to complete
0E05           3446   L028001?:
0E05 30ED70    3447            jnb     _ADINT,L028001?
0E08           3448   ;        main.c:810: return (ADC0);
0E08 85BD82    3449            mov     dpl,_ADC0
0E0B 85BE83    3450            mov     dph,(_ADC0 >> 8)
0E0E 22        3451            ret
0E0F           3452   ;------------------------------------------------------------
0E0F           3453   ;Allocation info for local variables in function 'ReadHX711'
0E0F           3454   ;------------------------------------------------------------
0E0F           3455   ;dataa                     Allocated with name '_ReadHX711_dataa_1_174'
0E0F           3456   ;ans                       Allocated with name '_ReadHX711_ans_1_174'
0E0F           3457   ;j                         Allocated with name '_ReadHX711_j_1_174'
0E0F           3458   ;------------------------------------------------------------
0E0F           3459   ;        main.c:813: int ReadHX711(void) {
0E0F           3460   ;        -----------------------------------------
0E0F           3461   ;         function ReadHX711
0E0F           3462   ;        -----------------------------------------
0E0F           3463   _ReadHX711:
0E0F           3464   ;        main.c:814: xdata unsigned long dataa = 0;
0E0F 90D710    3465            mov     dptr,#_ReadHX711_dataa_1_174
0E12 E4        3466            clr     a
0E13 F0        3467            movx    @dptr,a
0E14 A3        3468            inc     dptr
0E15 F0        3469            movx    @dptr,a
0E16 A3        3470            inc     dptr
0E17 F0        3471            movx    @dptr,a
0E18 A3        3472            inc     dptr
0E19 F0        3473            movx    @dptr,a
0E1A           3474   ;        main.c:819: PD_SCK = 0;
0E1A C2A5      3475            clr     _P2_5
0E1C           3476   ;        main.c:821: for (i = 0; i < 24; i++) {
0E1C 9059A8    3477            mov     dptr,#_i
0E1F E4        3478            clr     a
0E20 F0        3479            movx    @dptr,a
0E21 A3        3480            inc     dptr
0E22 F0        3481            movx    @dptr,a
0E23           3482   L029011?:
0E23 9059A8    3483            mov     dptr,#_i
0E26 E0        3484            movx    a,@dptr
0E27 FA        3485            mov     r2,a
0E28 A3        3486            inc     dptr
0E29 E0        3487            movx    a,@dptr
0E2A FB        3488            mov     r3,a
0E2B C3        3489            clr     c
0E2C EA        3490            mov     a,r2
0E2D 9418      3491            subb    a,#0x18
0E2F EB        3492            mov     a,r3
0E30 9400      3493            subb    a,#0x00
0E32 4000      3494            jc      L029036?
0E34 020000    3495            ljmp    L029014?
0E37           3496   L029036?:
0E37           3497   ;        main.c:822: PD_SCK = 1;
0E37 D2A5      3498            setb    _P2_5
0E39           3499   ;        main.c:823: for (j = 0; j < 4; j++);
0E39 90D760    3500            mov     dptr,#_ReadHX711_j_1_174
0E3C E4        3501            clr     a
0E3D F0        3502            movx    @dptr,a
0E3E           3503   L029003?:
0E3E 90D760    3504            mov     dptr,#_ReadHX711_j_1_174
0E41 E0        3505            movx    a,@dptr
0E42 FA        3506            mov     r2,a
0E43 C3        3507            clr     c
0E44 6480      3508            xrl     a,#0x80
0E46 9484      3509            subb    a,#0x84
0E48 5000      3510            jnc     L029006?
0E4A 90D760    3511            mov     dptr,#_ReadHX711_j_1_174
0E4D E0        3512            movx    a,@dptr
0E4E 2401      3513            add     a,#0x01
0E50 F0        3514            movx    @dptr,a
0E51 8000      3515            sjmp    L029003?
0E53           3516   L029006?:
0E53           3517   ;        main.c:824: dataa = dataa << 1;
0E53 90D710    3518            mov     dptr,#_ReadHX711_dataa_1_174
0E56 E0        3519            movx    a,@dptr
0E57 FA        3520            mov     r2,a
0E58 A3        3521            inc     dptr
0E59 E0        3522            movx    a,@dptr
0E5A FB        3523            mov     r3,a
0E5B A3        3524            inc     dptr
0E5C E0        3525            movx    a,@dptr
0E5D FC        3526            mov     r4,a
0E5E A3        3527            inc     dptr
0E5F E0        3528            movx    a,@dptr
0E60 FD        3529            mov     r5,a
0E61 EA        3530            mov     a,r2
0E62 2A        3531            add     a,r2
0E63 FA        3532            mov     r2,a
0E64 EB        3533            mov     a,r3
0E65 33        3534            rlc     a
0E66 FB        3535            mov     r3,a
0E67 EC        3536            mov     a,r4
0E68 33        3537            rlc     a
0E69 FC        3538            mov     r4,a
0E6A ED        3539            mov     a,r5
0E6B 33        3540            rlc     a
0E6C FD        3541            mov     r5,a
0E6D 90D710    3542            mov     dptr,#_ReadHX711_dataa_1_174
0E70 EA        3543            mov     a,r2
0E71 F0        3544            movx    @dptr,a
0E72 A3        3545            inc     dptr
0E73 EB        3546            mov     a,r3
0E74 F0        3547            movx    @dptr,a
0E75 A3        3548            inc     dptr
0E76 EC        3549            mov     a,r4
0E77 F0        3550            movx    @dptr,a
0E78 A3        3551            inc     dptr
0E79 ED        3552            mov     a,r5
0E7A F0        3553            movx    @dptr,a
0E7B           3554   ;        main.c:825: if (DOUT) {
0E7B 30A6F0    3555            jnb     _P2_6,L029002?
0E7E           3556   ;        main.c:826: dataa |= 0x01;
0E7E 90D710    3557            mov     dptr,#_ReadHX711_dataa_1_174
0E81 E0        3558            movx    a,@dptr
0E82 FA        3559            mov     r2,a
0E83 A3        3560            inc     dptr
0E84 E0        3561            movx    a,@dptr
0E85 FB        3562            mov     r3,a
0E86 A3        3563            inc     dptr
0E87 E0        3564            movx    a,@dptr
0E88 FC        3565            mov     r4,a
0E89 A3        3566            inc     dptr
0E8A E0        3567            movx    a,@dptr
0E8B FD        3568            mov     r5,a
0E8C 90D710    3569            mov     dptr,#_ReadHX711_dataa_1_174
0E8F 7401      3570            mov     a,#0x01
0E91 4A        3571            orl     a,r2
0E92 F0        3572            movx    @dptr,a
0E93 A3        3573            inc     dptr
0E94 EB        3574            mov     a,r3
0E95 F0        3575            movx    @dptr,a
0E96 A3        3576            inc     dptr
0E97 EC        3577            mov     a,r4
0E98 F0        3578            movx    @dptr,a
0E99 A3        3579            inc     dptr
0E9A ED        3580            mov     a,r5
0E9B F0        3581            movx    @dptr,a
0E9C           3582   L029002?:
0E9C           3583   ;        main.c:828: PD_SCK = 0;
0E9C C2A5      3584            clr     _P2_5
0E9E           3585   ;        main.c:829: for (j = 0; j < 4; j++);
0E9E 90D760    3586            mov     dptr,#_ReadHX711_j_1_174
0EA1 E4        3587            clr     a
0EA2 F0        3588            movx    @dptr,a
0EA3           3589   L029007?:
0EA3 90D760    3590            mov     dptr,#_ReadHX711_j_1_174
0EA6 E0        3591            movx    a,@dptr
0EA7 FA        3592            mov     r2,a
0EA8 C3        3593            clr     c
0EA9 6480      3594            xrl     a,#0x80
0EAB 9484      3595            subb    a,#0x84
0EAD 5000      3596            jnc     L029013?
0EAF 90D760    3597            mov     dptr,#_ReadHX711_j_1_174
0EB2 E0        3598            movx    a,@dptr
0EB3 2401      3599            add     a,#0x01
0EB5 F0        3600            movx    @dptr,a
0EB6 8000      3601            sjmp    L029007?
0EB8           3602   L029013?:
0EB8           3603   ;        main.c:821: for (i = 0; i < 24; i++) {
0EB8 9059A8    3604            mov     dptr,#_i
0EBB E0        3605            movx    a,@dptr
0EBC 2401      3606            add     a,#0x01
0EBE F0        3607            movx    @dptr,a
0EBF A3        3608            inc     dptr
0EC0 E0        3609            movx    a,@dptr
0EC1 3400      3610            addc    a,#0x00
0EC3 F0        3611            movx    @dptr,a
0EC4 020000    3612            ljmp    L029011?
0EC7           3613   L029014?:
0EC7           3614   ;        main.c:832: PD_SCK = 1;
0EC7 D2A5      3615            setb    _P2_5
0EC9           3616   ;        main.c:833: for (j = 0; j < 4; j++);
0EC9 90D760    3617            mov     dptr,#_ReadHX711_j_1_174
0ECC E4        3618            clr     a
0ECD F0        3619            movx    @dptr,a
0ECE           3620   L029015?:
0ECE 90D760    3621            mov     dptr,#_ReadHX711_j_1_174
0ED1 E0        3622            movx    a,@dptr
0ED2 FA        3623            mov     r2,a
0ED3 C3        3624            clr     c
0ED4 6480      3625            xrl     a,#0x80
0ED6 9484      3626            subb    a,#0x84
0ED8 5000      3627            jnc     L029018?
0EDA 90D760    3628            mov     dptr,#_ReadHX711_j_1_174
0EDD E0        3629            movx    a,@dptr
0EDE 2401      3630            add     a,#0x01
0EE0 F0        3631            movx    @dptr,a
0EE1 8000      3632            sjmp    L029015?
0EE3           3633   L029018?:
0EE3           3634   ;        main.c:834: PD_SCK = 0;
0EE3 C2A5      3635            clr     _P2_5
0EE5           3636   ;        main.c:835: for (j = 0; j < 4; j++);
0EE5 90D760    3637            mov     dptr,#_ReadHX711_j_1_174
0EE8 E4        3638            clr     a
0EE9 F0        3639            movx    @dptr,a
0EEA           3640   L029019?:
0EEA 90D760    3641            mov     dptr,#_ReadHX711_j_1_174
0EED E0        3642            movx    a,@dptr
0EEE FA        3643            mov     r2,a
0EEF C3        3644            clr     c
0EF0 6480      3645            xrl     a,#0x80
0EF2 9484      3646            subb    a,#0x84
0EF4 5000      3647            jnc     L029022?
0EF6 90D760    3648            mov     dptr,#_ReadHX711_j_1_174
0EF9 E0        3649            movx    a,@dptr
0EFA 2401      3650            add     a,#0x01
0EFC F0        3651            movx    @dptr,a
0EFD 8000      3652            sjmp    L029019?
0EFF           3653   L029022?:
0EFF           3654   ;        main.c:836: ans = (dataa % 1000000)/10;
0EFF 90D710    3655            mov     dptr,#_ReadHX711_dataa_1_174
0F02 E0        3656            movx    a,@dptr
0F03 FA        3657            mov     r2,a
0F04 A3        3658            inc     dptr
0F05 E0        3659            movx    a,@dptr
0F06 FB        3660            mov     r3,a
0F07 A3        3661            inc     dptr
0F08 E0        3662            movx    a,@dptr
0F09 FC        3663            mov     r4,a
0F0A A3        3664            inc     dptr
0F0B E0        3665            movx    a,@dptr
0F0C FD        3666            mov     r5,a
0F0D 750040    3667            mov     __modulong_PARM_2,#0x40
0F10 750142    3668            mov     (__modulong_PARM_2 + 1),#0x42
0F13 75020F    3669            mov     (__modulong_PARM_2 + 2),#0x0F
0F16 750300    3670            mov     (__modulong_PARM_2 + 3),#0x00
0F19 8A82      3671            mov     dpl,r2
0F1B 8B83      3672            mov     dph,r3
0F1D 8CF0      3673            mov     b,r4
0F1F ED        3674            mov     a,r5
0F20 120000    3675            lcall   __modulong
0F23 AA82      3676            mov     r2,dpl
0F25 AB83      3677            mov     r3,dph
0F27 ACF0      3678            mov     r4,b
0F29 FD        3679            mov     r5,a
0F2A 75000A    3680            mov     __divulong_PARM_2,#0x0A
0F2D E4        3681            clr     a
0F2E F501      3682            mov     (__divulong_PARM_2 + 1),a
0F30 F502      3683            mov     (__divulong_PARM_2 + 2),a
0F32 F503      3684            mov     (__divulong_PARM_2 + 3),a
0F34 8A82      3685            mov     dpl,r2
0F36 8B83      3686            mov     dph,r3
0F38 8CF0      3687            mov     b,r4
0F3A ED        3688            mov     a,r5
0F3B           3689   ;        main.c:837: return ans;
0F3B 020000    3690            ljmp    __divulong
0F3E           3691   ;------------------------------------------------------------
0F3E           3692   ;Allocation info for local variables in function 'Timer5_ISR'
0F3E           3693   ;------------------------------------------------------------
0F3E           3694   ;------------------------------------------------------------
0F3E           3695   ;        main.c:840: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0F3E           3696   ;        -----------------------------------------
0F3E           3697   ;         function Timer5_ISR
0F3E           3698   ;        -----------------------------------------
0F3E           3699   _Timer5_ISR:
0F3E C000      3700            push    bits
0F40 C0E0      3701            push    acc
0F42 C0F0      3702            push    b
0F44 C082      3703            push    dpl
0F46 C083      3704            push    dph
0F48 C002      3705            push    (0+2)
0F4A C003      3706            push    (0+3)
0F4C C004      3707            push    (0+4)
0F4E C005      3708            push    (0+5)
0F50 C006      3709            push    (0+6)
0F52 C007      3710            push    (0+7)
0F54 C000      3711            push    (0+0)
0F56 C001      3712            push    (0+1)
0F58 C0D0      3713            push    psw
0F5A 75D000    3714            mov     psw,#0x00
0F5D           3715   ;        main.c:842: SFRPAGE=0x10;
0F5D 75A710    3716            mov     _SFRPAGE,#0x10
0F60           3717   ;        main.c:843: TF5H = 0; // Clear Timer5 interrupt flag
0F60 C2C7      3718            clr     _TF5H
0F62           3719   ;        main.c:844: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0F62 75D2C4    3720            mov     _TMR5RL,#0xC4
0F65 75D3FF    3721            mov     (_TMR5RL >> 8),#0xFF
0F68           3722   ;        main.c:846: fre_mea_count++;
0F68 905668    3723            mov     dptr,#_fre_mea_count
0F6B E0        3724            movx    a,@dptr
0F6C 2401      3725            add     a,#0x01
0F6E F0        3726            movx    @dptr,a
0F6F A3        3727            inc     dptr
0F70 E0        3728            movx    a,@dptr
0F71 3400      3729            addc    a,#0x00
0F73 F0        3730            movx    @dptr,a
0F74           3731   ;        main.c:847: if(fre_mea_count == 1000){
0F74 905668    3732            mov     dptr,#_fre_mea_count
0F77 E0        3733            movx    a,@dptr
0F78 FA        3734            mov     r2,a
0F79 A3        3735            inc     dptr
0F7A E0        3736            movx    a,@dptr
0F7B FB        3737            mov     r3,a
0F7C BAE880    3738            cjne    r2,#0xE8,L030004?
0F7F BB0380    3739            cjne    r3,#0x03,L030004?
0F82           3740   ;        main.c:848: fre_mea_count = 0;
0F82 905668    3741            mov     dptr,#_fre_mea_count
0F85 E4        3742            clr     a
0F86 F0        3743            movx    @dptr,a
0F87 A3        3744            inc     dptr
0F88 F0        3745            movx    @dptr,a
0F89           3746   ;        main.c:849: if(mea_yes){
0F89 905458    3747            mov     dptr,#_mea_yes
0F8C E0        3748            movx    a,@dptr
0F8D FA        3749            mov     r2,a
0F8E 6000      3750            jz      L030004?
0F90           3751   ;        main.c:850: freq100 = get_freq();
0F90 120000    3752            lcall   _get_freq
0F93 AA82      3753            mov     r2,dpl
0F95 AB83      3754            mov     r3,dph
0F97 905DE8    3755            mov     dptr,#_freq100
0F9A EA        3756            mov     a,r2
0F9B F0        3757            movx    @dptr,a
0F9C A3        3758            inc     dptr
0F9D EB        3759            mov     a,r3
0F9E F0        3760            movx    @dptr,a
0F9F EB        3761            mov     a,r3
0FA0 33        3762            rlc     a
0FA1 95E0      3763            subb    a,acc
0FA3 A3        3764            inc     dptr
0FA4 F0        3765            movx    @dptr,a
0FA5 A3        3766            inc     dptr
0FA6 F0        3767            movx    @dptr,a
0FA7           3768   L030004?:
0FA7           3769   ;        main.c:854: weight_mea_count++;
0FA7 905628    3770            mov     dptr,#_weight_mea_count
0FAA E0        3771            movx    a,@dptr
0FAB 2401      3772            add     a,#0x01
0FAD F0        3773            movx    @dptr,a
0FAE A3        3774            inc     dptr
0FAF E0        3775            movx    a,@dptr
0FB0 3400      3776            addc    a,#0x00
0FB2 F0        3777            movx    @dptr,a
0FB3           3778   ;        main.c:855: if(weight_mea_count == 20000){
0FB3 905628    3779            mov     dptr,#_weight_mea_count
0FB6 E0        3780            movx    a,@dptr
0FB7 FA        3781            mov     r2,a
0FB8 A3        3782            inc     dptr
0FB9 E0        3783            movx    a,@dptr
0FBA FB        3784            mov     r3,a
0FBB BA2000    3785            cjne    r2,#0x20,L030010?
0FBE BB4E00    3786            cjne    r3,#0x4E,L030010?
0FC1           3787   ;        main.c:856: weight_mea_count = 0;
0FC1 905628    3788            mov     dptr,#_weight_mea_count
0FC4 E4        3789            clr     a
0FC5 F0        3790            movx    @dptr,a
0FC6 A3        3791            inc     dptr
0FC7 F0        3792            movx    @dptr,a
0FC8           3793   ;        main.c:857: if(mea_yes) distance = measure_distance();
0FC8 905458    3794            mov     dptr,#_mea_yes
0FCB E0        3795            movx    a,@dptr
0FCC FA        3796            mov     r2,a
0FCD 6000      3797            jz      L030006?
0FCF 120000    3798            lcall   _measure_distance
0FD2 E582      3799            mov     a,dpl
0FD4 8583F0    3800            mov     b,dph
0FD7 905A68    3801            mov     dptr,#_distance
0FDA F0        3802            movx    @dptr,a
0FDB A3        3803            inc     dptr
0FDC E5F0      3804            mov     a,b
0FDE F0        3805            movx    @dptr,a
0FDF           3806   L030006?:
0FDF           3807   ;        main.c:858: if(mea_yes) weight = ReadHX711();
0FDF 905458    3808            mov     dptr,#_mea_yes
0FE2 E0        3809            movx    a,@dptr
0FE3 FA        3810            mov     r2,a
0FE4 6000      3811            jz      L030010?
0FE6 120000    3812            lcall   _ReadHX711
0FE9 E582      3813            mov     a,dpl
0FEB 8583F0    3814            mov     b,dph
0FEE 905418    3815            mov     dptr,#_weight
0FF1 F0        3816            movx    @dptr,a
0FF2 A3        3817            inc     dptr
0FF3 E5F0      3818            mov     a,b
0FF5 F0        3819            movx    @dptr,a
0FF6           3820   L030010?:
0FF6           3821   ;        main.c:861: pwm_counter++; 
0FF6 905968    3822            mov     dptr,#_pwm_counter
0FF9 E0        3823            movx    a,@dptr
0FFA 2401      3824            add     a,#0x01
0FFC F0        3825            movx    @dptr,a
0FFD A3        3826            inc     dptr
0FFE E0        3827            movx    a,@dptr
0FFF 3400      3828            addc    a,#0x00
1001 F0        3829            movx    @dptr,a
1002           3830   ;        main.c:862: if (pwm_counter == 100){
1002 905968    3831            mov     dptr,#_pwm_counter
1005 E0        3832            movx    a,@dptr
1006 FA        3833            mov     r2,a
1007 A3        3834            inc     dptr
1008 E0        3835            movx    a,@dptr
1009 FB        3836            mov     r3,a
100A BA6480    3837            cjne    r2,#0x64,L030012?
100D BB0080    3838            cjne    r3,#0x00,L030012?
1010           3839   ;        main.c:863: pwm_counter = 0; 
1010 905968    3840            mov     dptr,#_pwm_counter
1013 E4        3841            clr     a
1014 F0        3842            movx    @dptr,a
1015 A3        3843            inc     dptr
1016 F0        3844            movx    @dptr,a
1017           3845   L030012?:
1017           3846   ;        main.c:866: if (pwm_right > pwm_counter){
1017 9058A8    3847            mov     dptr,#_pwm_right
101A E0        3848            movx    a,@dptr
101B FA        3849            mov     r2,a
101C 905968    3850            mov     dptr,#_pwm_counter
101F E0        3851            movx    a,@dptr
1020 FB        3852            mov     r3,a
1021 A3        3853            inc     dptr
1022 E0        3854            movx    a,@dptr
1023 FC        3855            mov     r4,a
1024 7D00      3856            mov     r5,#0x00
1026 C3        3857            clr     c
1027 EB        3858            mov     a,r3
1028 9A        3859            subb    a,r2
1029 EC        3860            mov     a,r4
102A 9D        3861            subb    a,r5
102B 5000      3862            jnc     L030017?
102D           3863   ;        main.c:867: if(L_motor_dir){
102D 905868    3864            mov     dptr,#_L_motor_dir
1030 E0        3865            movx    a,@dptr
1031 FA        3866            mov     r2,a
1032 6000      3867            jz      L030014?
1034           3868   ;        main.c:868: L_bridge_1 = 1; 
1034 D2A1      3869            setb    _P2_1
1036           3870   ;        main.c:869: L_bridge_2 = 0; 
1036 C2A2      3871            clr     _P2_2
1038 8000      3872            sjmp    L030018?
103A           3873   L030014?:
103A           3874   ;        main.c:872: L_bridge_1 = 0; 
103A C2A1      3875            clr     _P2_1
103C           3876   ;        main.c:873: L_bridge_2 = 1; 
103C D2A2      3877            setb    _P2_2
103E 8000      3878            sjmp    L030018?
1040           3879   L030017?:
1040           3880   ;        main.c:877: L_bridge_1 = 0; 
1040 C2A1      3881            clr     _P2_1
1042           3882   ;        main.c:878: L_bridge_2 = 0; 
1042 C2A2      3883            clr     _P2_2
1044           3884   L030018?:
1044           3885   ;        main.c:880: if (pwm_left > pwm_counter){
1044 9058E8    3886            mov     dptr,#_pwm_left
1047 E0        3887            movx    a,@dptr
1048 FA        3888            mov     r2,a
1049 7D00      3889            mov     r5,#0x00
104B C3        3890            clr     c
104C EB        3891            mov     a,r3
104D 9A        3892            subb    a,r2
104E EC        3893            mov     a,r4
104F 9D        3894            subb    a,r5
1050 5000      3895            jnc     L030023?
1052           3896   ;        main.c:881: if (R_motor_dir){
1052 905828    3897            mov     dptr,#_R_motor_dir
1055 E0        3898            movx    a,@dptr
1056 FA        3899            mov     r2,a
1057 6000      3900            jz      L030020?
1059           3901   ;        main.c:882: R_bridge_1 = 1; 
1059 D2A4      3902            setb    _P2_4
105B           3903   ;        main.c:883: R_bridge_2 = 0;
105B C2A3      3904            clr     _P2_3
105D 8000      3905            sjmp    L030024?
105F           3906   L030020?:
105F           3907   ;        main.c:886: R_bridge_1 = 0; 
105F C2A4      3908            clr     _P2_4
1061           3909   ;        main.c:887: R_bridge_2 = 1;
1061 D2A3      3910            setb    _P2_3
1063 8000      3911            sjmp    L030024?
1065           3912   L030023?:
1065           3913   ;        main.c:891: R_bridge_1 = 0; 
1065 C2A4      3914            clr     _P2_4
1067           3915   ;        main.c:892: R_bridge_2 = 0; 
1067 C2A3      3916            clr     _P2_3
1069           3917   L030024?:
1069           3918   ;        main.c:895: servo_counter++;
1069 905928    3919            mov     dptr,#_servo_counter
106C E0        3920            movx    a,@dptr
106D 2401      3921            add     a,#0x01
106F F0        3922            movx    @dptr,a
1070 A3        3923            inc     dptr
1071 E0        3924            movx    a,@dptr
1072 3400      3925            addc    a,#0x00
1074 F0        3926            movx    @dptr,a
1075           3927   ;        main.c:896: if(servo_counter==2000)
1075 905928    3928            mov     dptr,#_servo_counter
1078 E0        3929            movx    a,@dptr
1079 FA        3930            mov     r2,a
107A A3        3931            inc     dptr
107B E0        3932            movx    a,@dptr
107C FB        3933            mov     r3,a
107D BAD040    3934            cjne    r2,#0xD0,L030026?
1080 BB0740    3935            cjne    r3,#0x07,L030026?
1083           3936   ;        main.c:898: servo_counter=0;
1083 905928    3937            mov     dptr,#_servo_counter
1086 E4        3938            clr     a
1087 F0        3939            movx    @dptr,a
1088 A3        3940            inc     dptr
1089 F0        3941            movx    @dptr,a
108A           3942   ;        main.c:899: Servo_arm=1;
108A D296      3943            setb    _P1_6
108C           3944   ;        main.c:900: Servo_base=1;
108C D297      3945            setb    _P1_7
108E           3946   L030026?:
108E           3947   ;        main.c:902: if(servo_arm>=servo_counter)
108E 9057A8    3948            mov     dptr,#_servo_arm
1091 E0        3949            movx    a,@dptr
1092 FA        3950            mov     r2,a
1093 905928    3951            mov     dptr,#_servo_counter
1096 E0        3952            movx    a,@dptr
1097 FB        3953            mov     r3,a
1098 A3        3954            inc     dptr
1099 E0        3955            movx    a,@dptr
109A FC        3956            mov     r4,a
109B 7D00      3957            mov     r5,#0x00
109D C3        3958            clr     c
109E EA        3959            mov     a,r2
109F 9B        3960            subb    a,r3
10A0 ED        3961            mov     a,r5
10A1 9C        3962            subb    a,r4
10A2 4000      3963            jc      L030028?
10A4           3964   ;        main.c:904: Servo_arm = 1;
10A4 D296      3965            setb    _P1_6
10A6 8000      3966            sjmp    L030029?
10A8           3967   L030028?:
10A8           3968   ;        main.c:908: Servo_arm = 0; 
10A8 C296      3969            clr     _P1_6
10AA           3970   L030029?:
10AA           3971   ;        main.c:910: if(servo_base>=servo_counter)
10AA 9057E8    3972            mov     dptr,#_servo_base
10AD E0        3973            movx    a,@dptr
10AE FA        3974            mov     r2,a
10AF 7D00      3975            mov     r5,#0x00
10B1 C3        3976            clr     c
10B2 EA        3977            mov     a,r2
10B3 9B        3978            subb    a,r3
10B4 ED        3979            mov     a,r5
10B5 9C        3980            subb    a,r4
10B6 4000      3981            jc      L030031?
10B8           3982   ;        main.c:912: Servo_base = 1;
10B8 D297      3983            setb    _P1_7
10BA 8000      3984            sjmp    L030033?
10BC           3985   L030031?:
10BC           3986   ;        main.c:916: Servo_base = 0; 
10BC C297      3987            clr     _P1_7
10BE           3988   L030033?:
10BE D0D0      3989            pop     psw
10C0 D001      3990            pop     (0+1)
10C2 D000      3991            pop     (0+0)
10C4 D007      3992            pop     (0+7)
10C6 D006      3993            pop     (0+6)
10C8 D005      3994            pop     (0+5)
10CA D004      3995            pop     (0+4)
10CC D003      3996            pop     (0+3)
10CE D002      3997            pop     (0+2)
10D0 D083      3998            pop     dph
10D2 D082      3999            pop     dpl
10D4 D0F0      4000            pop     b
10D6 D0E0      4001            pop     acc
10D8 D000      4002            pop     bits
10DA 32        4003            reti
10DB           4004   ;------------------------------------------------------------
10DB           4005   ;Allocation info for local variables in function 'servo_pick'
10DB           4006   ;------------------------------------------------------------
10DB           4007   ;------------------------------------------------------------
10DB           4008   ;        main.c:920: void servo_pick(){
10DB           4009   ;        -----------------------------------------
10DB           4010   ;         function servo_pick
10DB           4011   ;        -----------------------------------------
10DB           4012   _servo_pick:
10DB           4013   ;        main.c:921: servo_arm = 50;
10DB 9057A8    4014            mov     dptr,#_servo_arm
10DE 7432      4015            mov     a,#0x32
10E0 F0        4016            movx    @dptr,a
10E1           4017   ;        main.c:922: servo_base = 50;
10E1 9057E8    4018            mov     dptr,#_servo_base
10E4 7432      4019            mov     a,#0x32
10E6 F0        4020            movx    @dptr,a
10E7           4021   ;        main.c:923: waitms(500);
10E7 9001F4    4022            mov     dptr,#0x01F4
10EA 120000    4023            lcall   _waitms
10ED           4024   ;        main.c:924: for (i_loo=50; i_loo <= 210; i_loo+=20)
10ED 9059E8    4025            mov     dptr,#_i_loo
10F0 7432      4026            mov     a,#0x32
10F2 F0        4027            movx    @dptr,a
10F3 E4        4028            clr     a
10F4 A3        4029            inc     dptr
10F5 F0        4030            movx    @dptr,a
10F6           4031   L031001?:
10F6 9059E8    4032            mov     dptr,#_i_loo
10F9 E0        4033            movx    a,@dptr
10FA FA        4034            mov     r2,a
10FB A3        4035            inc     dptr
10FC E0        4036            movx    a,@dptr
10FD FB        4037            mov     r3,a
10FE C3        4038            clr     c
10FF 74D2      4039            mov     a,#0xD2
1101 9A        4040            subb    a,r2
1102 E4        4041            clr     a
1103 6480      4042            xrl     a,#0x80
1105 8BF0      4043            mov     b,r3
1107 63F080    4044            xrl     b,#0x80
110A 95F0      4045            subb    a,b
110C 4000      4046            jc      L031004?
110E           4047   ;        main.c:926: servo_base = i_loo; 
110E 9057E8    4048            mov     dptr,#_servo_base
1111 EA        4049            mov     a,r2
1112 F0        4050            movx    @dptr,a
1113           4051   ;        main.c:927: waitms(25);
1113 900019    4052            mov     dptr,#0x0019
1116 120000    4053            lcall   _waitms
1119           4054   ;        main.c:924: for (i_loo=50; i_loo <= 210; i_loo+=20)
1119 9059E8    4055            mov     dptr,#_i_loo
111C E0        4056            movx    a,@dptr
111D FA        4057            mov     r2,a
111E A3        4058            inc     dptr
111F E0        4059            movx    a,@dptr
1120 FB        4060            mov     r3,a
1121 9059E8    4061            mov     dptr,#_i_loo
1124 7414      4062            mov     a,#0x14
1126 2A        4063            add     a,r2
1127 F0        4064            movx    @dptr,a
1128 E4        4065            clr     a
1129 3B        4066            addc    a,r3
112A A3        4067            inc     dptr
112B F0        4068            movx    @dptr,a
112C 8000      4069            sjmp    L031001?
112E           4070   L031004?:
112E           4071   ;        main.c:929: waitms(500);
112E 9001F4    4072            mov     dptr,#0x01F4
1131 120000    4073            lcall   _waitms
1134           4074   ;        main.c:930: for(i_loo = 50; i_loo <= 250; i_loo+=20)
1134 9059E8    4075            mov     dptr,#_i_loo
1137 7432      4076            mov     a,#0x32
1139 F0        4077            movx    @dptr,a
113A E4        4078            clr     a
113B A3        4079            inc     dptr
113C F0        4080            movx    @dptr,a
113D           4081   L031005?:
113D 9059E8    4082            mov     dptr,#_i_loo
1140 E0        4083            movx    a,@dptr
1141 FA        4084            mov     r2,a
1142 A3        4085            inc     dptr
1143 E0        4086            movx    a,@dptr
1144 FB        4087            mov     r3,a
1145 C3        4088            clr     c
1146 74FA      4089            mov     a,#0xFA
1148 9A        4090            subb    a,r2
1149 E4        4091            clr     a
114A 6480      4092            xrl     a,#0x80
114C 8BF0      4093            mov     b,r3
114E 63F080    4094            xrl     b,#0x80
1151 95F0      4095            subb    a,b
1153 4000      4096            jc      L031008?
1155           4097   ;        main.c:932: servo_arm = i_loo; 
1155 9057A8    4098            mov     dptr,#_servo_arm
1158 EA        4099            mov     a,r2
1159 F0        4100            movx    @dptr,a
115A           4101   ;        main.c:933: waitms(25);
115A 900019    4102            mov     dptr,#0x0019
115D 120000    4103            lcall   _waitms
1160           4104   ;        main.c:930: for(i_loo = 50; i_loo <= 250; i_loo+=20)
1160 9059E8    4105            mov     dptr,#_i_loo
1163 E0        4106            movx    a,@dptr
1164 FA        4107            mov     r2,a
1165 A3        4108            inc     dptr
1166 E0        4109            movx    a,@dptr
1167 FB        4110            mov     r3,a
1168 9059E8    4111            mov     dptr,#_i_loo
116B 7414      4112            mov     a,#0x14
116D 2A        4113            add     a,r2
116E F0        4114            movx    @dptr,a
116F E4        4115            clr     a
1170 3B        4116            addc    a,r3
1171 A3        4117            inc     dptr
1172 F0        4118            movx    @dptr,a
1173 8000      4119            sjmp    L031005?
1175           4120   L031008?:
1175           4121   ;        main.c:935: Magnet = 1; 
1175 D295      4122            setb    _P1_5
1177           4123   ;        main.c:936: waitms(500);
1177 9001F4    4124            mov     dptr,#0x01F4
117A 120000    4125            lcall   _waitms
117D           4126   ;        main.c:937: for(i_loo = 200; i_loo >= 110; i_loo-=10){
117D 9059E8    4127            mov     dptr,#_i_loo
1180 74C8      4128            mov     a,#0xC8
1182 F0        4129            movx    @dptr,a
1183 E4        4130            clr     a
1184 A3        4131            inc     dptr
1185 F0        4132            movx    @dptr,a
1186           4133   L031009?:
1186 9059E8    4134            mov     dptr,#_i_loo
1189 E0        4135            movx    a,@dptr
118A FA        4136            mov     r2,a
118B A3        4137            inc     dptr
118C E0        4138            movx    a,@dptr
118D FB        4139            mov     r3,a
118E C3        4140            clr     c
118F EA        4141            mov     a,r2
1190 946E      4142            subb    a,#0x6E
1192 EB        4143            mov     a,r3
1193 6480      4144            xrl     a,#0x80
1195 9480      4145            subb    a,#0x80
1197 4000      4146            jc      L031012?
1199           4147   ;        main.c:938: waitms(25);
1199 900019    4148            mov     dptr,#0x0019
119C 120000    4149            lcall   _waitms
119F           4150   ;        main.c:939: servo_base = i_loo;
119F 9059E8    4151            mov     dptr,#_i_loo
11A2 E0        4152            movx    a,@dptr
11A3 FA        4153            mov     r2,a
11A4 A3        4154            inc     dptr
11A5 E0        4155            movx    a,@dptr
11A6 FB        4156            mov     r3,a
11A7 9057E8    4157            mov     dptr,#_servo_base
11AA EA        4158            mov     a,r2
11AB F0        4159            movx    @dptr,a
11AC           4160   ;        main.c:937: for(i_loo = 200; i_loo >= 110; i_loo-=10){
11AC EA        4161            mov     a,r2
11AD 24F6      4162            add     a,#0xf6
11AF FA        4163            mov     r2,a
11B0 EB        4164            mov     a,r3
11B1 34FF      4165            addc    a,#0xff
11B3 FB        4166            mov     r3,a
11B4 9059E8    4167            mov     dptr,#_i_loo
11B7 EA        4168            mov     a,r2
11B8 F0        4169            movx    @dptr,a
11B9 A3        4170            inc     dptr
11BA EB        4171            mov     a,r3
11BB F0        4172            movx    @dptr,a
11BC 8000      4173            sjmp    L031009?
11BE           4174   L031012?:
11BE           4175   ;        main.c:941: Magnet = 1; 
11BE D295      4176            setb    _P1_5
11C0           4177   ;        main.c:942: waitms(500);
11C0 9001F4    4178            mov     dptr,#0x01F4
11C3 120000    4179            lcall   _waitms
11C6           4180   ;        main.c:943: for(i_loo = 110; i_loo <= 200; i_loo+=10){
11C6 9059E8    4181            mov     dptr,#_i_loo
11C9 746E      4182            mov     a,#0x6E
11CB F0        4183            movx    @dptr,a
11CC E4        4184            clr     a
11CD A3        4185            inc     dptr
11CE F0        4186            movx    @dptr,a
11CF           4187   L031013?:
11CF 9059E8    4188            mov     dptr,#_i_loo
11D2 E0        4189            movx    a,@dptr
11D3 FA        4190            mov     r2,a
11D4 A3        4191            inc     dptr
11D5 E0        4192            movx    a,@dptr
11D6 FB        4193            mov     r3,a
11D7 C3        4194            clr     c
11D8 74C8      4195            mov     a,#0xC8
11DA 9A        4196            subb    a,r2
11DB E4        4197            clr     a
11DC 6480      4198            xrl     a,#0x80
11DE 8BF0      4199            mov     b,r3
11E0 63F080    4200            xrl     b,#0x80
11E3 95F0      4201            subb    a,b
11E5 4000      4202            jc      L031016?
11E7           4203   ;        main.c:944: waitms(25);
11E7 900019    4204            mov     dptr,#0x0019
11EA 120000    4205            lcall   _waitms
11ED           4206   ;        main.c:945: servo_base = i_loo;
11ED 9059E8    4207            mov     dptr,#_i_loo
11F0 E0        4208            movx    a,@dptr
11F1 FA        4209            mov     r2,a
11F2 A3        4210            inc     dptr
11F3 E0        4211            movx    a,@dptr
11F4 FB        4212            mov     r3,a
11F5 9057E8    4213            mov     dptr,#_servo_base
11F8 EA        4214            mov     a,r2
11F9 F0        4215            movx    @dptr,a
11FA           4216   ;        main.c:943: for(i_loo = 110; i_loo <= 200; i_loo+=10){
11FA 9059E8    4217            mov     dptr,#_i_loo
11FD 740A      4218            mov     a,#0x0A
11FF 2A        4219            add     a,r2
1200 F0        4220            movx    @dptr,a
1201 E4        4221            clr     a
1202 3B        4222            addc    a,r3
1203 A3        4223            inc     dptr
1204 F0        4224            movx    @dptr,a
1205 8000      4225            sjmp    L031013?
1207           4226   L031016?:
1207           4227   ;        main.c:947: Magnet = 1; 
1207 D295      4228            setb    _P1_5
1209           4229   ;        main.c:948: waitms(500);
1209 9001F4    4230            mov     dptr,#0x01F4
120C 120000    4231            lcall   _waitms
120F           4232   ;        main.c:949: for(i_loo = 240; i_loo >= 80; i_loo-=10){
120F 9059E8    4233            mov     dptr,#_i_loo
1212 74F0      4234            mov     a,#0xF0
1214 F0        4235            movx    @dptr,a
1215 E4        4236            clr     a
1216 A3        4237            inc     dptr
1217 F0        4238            movx    @dptr,a
1218           4239   L031017?:
1218 9059E8    4240            mov     dptr,#_i_loo
121B E0        4241            movx    a,@dptr
121C FA        4242            mov     r2,a
121D A3        4243            inc     dptr
121E E0        4244            movx    a,@dptr
121F FB        4245            mov     r3,a
1220 C3        4246            clr     c
1221 EA        4247            mov     a,r2
1222 9450      4248            subb    a,#0x50
1224 EB        4249            mov     a,r3
1225 6480      4250            xrl     a,#0x80
1227 9480      4251            subb    a,#0x80
1229 4000      4252            jc      L031020?
122B           4253   ;        main.c:950: waitms(25);
122B 900019    4254            mov     dptr,#0x0019
122E 120000    4255            lcall   _waitms
1231           4256   ;        main.c:951: servo_arm = i_loo;
1231 9059E8    4257            mov     dptr,#_i_loo
1234 E0        4258            movx    a,@dptr
1235 FA        4259            mov     r2,a
1236 A3        4260            inc     dptr
1237 E0        4261            movx    a,@dptr
1238 FB        4262            mov     r3,a
1239 9057A8    4263            mov     dptr,#_servo_arm
123C EA        4264            mov     a,r2
123D F0        4265            movx    @dptr,a
123E           4266   ;        main.c:952: Magnet = 1; 
123E D295      4267            setb    _P1_5
1240           4268   ;        main.c:949: for(i_loo = 240; i_loo >= 80; i_loo-=10){
1240 EA        4269            mov     a,r2
1241 24F6      4270            add     a,#0xf6
1243 FA        4271            mov     r2,a
1244 EB        4272            mov     a,r3
1245 34FF      4273            addc    a,#0xff
1247 FB        4274            mov     r3,a
1248 9059E8    4275            mov     dptr,#_i_loo
124B EA        4276            mov     a,r2
124C F0        4277            movx    @dptr,a
124D A3        4278            inc     dptr
124E EB        4279            mov     a,r3
124F F0        4280            movx    @dptr,a
1250 8000      4281            sjmp    L031017?
1252           4282   L031020?:
1252           4283   ;        main.c:954: Magnet = 1; 
1252 D295      4284            setb    _P1_5
1254           4285   ;        main.c:955: waitms(500);
1254 9001F4    4286            mov     dptr,#0x01F4
1257 120000    4287            lcall   _waitms
125A           4288   ;        main.c:956: for(i_loo = 200; i_loo >= 80; i_loo-=10){
125A 9059E8    4289            mov     dptr,#_i_loo
125D 74C8      4290            mov     a,#0xC8
125F F0        4291            movx    @dptr,a
1260 E4        4292            clr     a
1261 A3        4293            inc     dptr
1262 F0        4294            movx    @dptr,a
1263           4295   L031021?:
1263 9059E8    4296            mov     dptr,#_i_loo
1266 E0        4297            movx    a,@dptr
1267 FA        4298            mov     r2,a
1268 A3        4299            inc     dptr
1269 E0        4300            movx    a,@dptr
126A FB        4301            mov     r3,a
126B C3        4302            clr     c
126C EA        4303            mov     a,r2
126D 9450      4304            subb    a,#0x50
126F EB        4305            mov     a,r3
1270 6480      4306            xrl     a,#0x80
1272 9480      4307            subb    a,#0x80
1274 4000      4308            jc      L031024?
1276           4309   ;        main.c:957: waitms(25);
1276 900019    4310            mov     dptr,#0x0019
1279 120000    4311            lcall   _waitms
127C           4312   ;        main.c:958: servo_base = i_loo;
127C 9059E8    4313            mov     dptr,#_i_loo
127F E0        4314            movx    a,@dptr
1280 FA        4315            mov     r2,a
1281 A3        4316            inc     dptr
1282 E0        4317            movx    a,@dptr
1283 FB        4318            mov     r3,a
1284 9057E8    4319            mov     dptr,#_servo_base
1287 EA        4320            mov     a,r2
1288 F0        4321            movx    @dptr,a
1289           4322   ;        main.c:959: Magnet = 1; 
1289 D295      4323            setb    _P1_5
128B           4324   ;        main.c:956: for(i_loo = 200; i_loo >= 80; i_loo-=10){
128B EA        4325            mov     a,r2
128C 24F6      4326            add     a,#0xf6
128E FA        4327            mov     r2,a
128F EB        4328            mov     a,r3
1290 34FF      4329            addc    a,#0xff
1292 FB        4330            mov     r3,a
1293 9059E8    4331            mov     dptr,#_i_loo
1296 EA        4332            mov     a,r2
1297 F0        4333            movx    @dptr,a
1298 A3        4334            inc     dptr
1299 EB        4335            mov     a,r3
129A F0        4336            movx    @dptr,a
129B 8000      4337            sjmp    L031021?
129D           4338   L031024?:
129D           4339   ;        main.c:961: Magnet = 1; 
129D D295      4340            setb    _P1_5
129F           4341   ;        main.c:962: waitms(500);
129F 9001F4    4342            mov     dptr,#0x01F4
12A2 120000    4343            lcall   _waitms
12A5           4344   ;        main.c:963: for(i_loo = 90; i_loo <= 100; i_loo+=10){
12A5 9059E8    4345            mov     dptr,#_i_loo
12A8 745A      4346            mov     a,#0x5A
12AA F0        4347            movx    @dptr,a
12AB E4        4348            clr     a
12AC A3        4349            inc     dptr
12AD F0        4350            movx    @dptr,a
12AE           4351   L031025?:
12AE 9059E8    4352            mov     dptr,#_i_loo
12B1 E0        4353            movx    a,@dptr
12B2 FA        4354            mov     r2,a
12B3 A3        4355            inc     dptr
12B4 E0        4356            movx    a,@dptr
12B5 FB        4357            mov     r3,a
12B6 C3        4358            clr     c
12B7 7464      4359            mov     a,#0x64
12B9 9A        4360            subb    a,r2
12BA E4        4361            clr     a
12BB 6480      4362            xrl     a,#0x80
12BD 8BF0      4363            mov     b,r3
12BF 63F080    4364            xrl     b,#0x80
12C2 95F0      4365            subb    a,b
12C4 4000      4366            jc      L031028?
12C6           4367   ;        main.c:964: waitms(25);
12C6 900019    4368            mov     dptr,#0x0019
12C9 120000    4369            lcall   _waitms
12CC           4370   ;        main.c:965: servo_arm = i_loo;
12CC 9059E8    4371            mov     dptr,#_i_loo
12CF E0        4372            movx    a,@dptr
12D0 FA        4373            mov     r2,a
12D1 A3        4374            inc     dptr
12D2 E0        4375            movx    a,@dptr
12D3 FB        4376            mov     r3,a
12D4 9057A8    4377            mov     dptr,#_servo_arm
12D7 EA        4378            mov     a,r2
12D8 F0        4379            movx    @dptr,a
12D9           4380   ;        main.c:966: Magnet = 1; 
12D9 D295      4381            setb    _P1_5
12DB           4382   ;        main.c:963: for(i_loo = 90; i_loo <= 100; i_loo+=10){
12DB 9059E8    4383            mov     dptr,#_i_loo
12DE 740A      4384            mov     a,#0x0A
12E0 2A        4385            add     a,r2
12E1 F0        4386            movx    @dptr,a
12E2 E4        4387            clr     a
12E3 3B        4388            addc    a,r3
12E4 A3        4389            inc     dptr
12E5 F0        4390            movx    @dptr,a
12E6 8000      4391            sjmp    L031025?
12E8           4392   L031028?:
12E8           4393   ;        main.c:968: waitms(500);
12E8 9001F4    4394            mov     dptr,#0x01F4
12EB 120000    4395            lcall   _waitms
12EE           4396   ;        main.c:969: Magnet = 0;
12EE C295      4397            clr     _P1_5
12F0           4398   ;        main.c:970: waitms(500);
12F0 9001F4    4399            mov     dptr,#0x01F4
12F3 120000    4400            lcall   _waitms
12F6           4401   ;        main.c:971: for (i_loo = 100; i_loo >=50 ; i_loo-=10){
12F6 9059E8    4402            mov     dptr,#_i_loo
12F9 7464      4403            mov     a,#0x64
12FB F0        4404            movx    @dptr,a
12FC E4        4405            clr     a
12FD A3        4406            inc     dptr
12FE F0        4407            movx    @dptr,a
12FF           4408   L031029?:
12FF 9059E8    4409            mov     dptr,#_i_loo
1302 E0        4410            movx    a,@dptr
1303 FA        4411            mov     r2,a
1304 A3        4412            inc     dptr
1305 E0        4413            movx    a,@dptr
1306 FB        4414            mov     r3,a
1307 C3        4415            clr     c
1308 EA        4416            mov     a,r2
1309 9432      4417            subb    a,#0x32
130B EB        4418            mov     a,r3
130C 6480      4419            xrl     a,#0x80
130E 9480      4420            subb    a,#0x80
1310 4000      4421            jc      L031032?
1312           4422   ;        main.c:972: servo_arm = i_loo; 
1312 9057A8    4423            mov     dptr,#_servo_arm
1315 EA        4424            mov     a,r2
1316 F0        4425            movx    @dptr,a
1317           4426   ;        main.c:973: waitms(25);
1317 900019    4427            mov     dptr,#0x0019
131A 120000    4428            lcall   _waitms
131D           4429   ;        main.c:971: for (i_loo = 100; i_loo >=50 ; i_loo-=10){
131D 9059E8    4430            mov     dptr,#_i_loo
1320 E0        4431            movx    a,@dptr
1321 FA        4432            mov     r2,a
1322 A3        4433            inc     dptr
1323 E0        4434            movx    a,@dptr
1324 FB        4435            mov     r3,a
1325 EA        4436            mov     a,r2
1326 24F6      4437            add     a,#0xf6
1328 FA        4438            mov     r2,a
1329 EB        4439            mov     a,r3
132A 34FF      4440            addc    a,#0xff
132C FB        4441            mov     r3,a
132D 9059E8    4442            mov     dptr,#_i_loo
1330 EA        4443            mov     a,r2
1331 F0        4444            movx    @dptr,a
1332 A3        4445            inc     dptr
1333 EB        4446            mov     a,r3
1334 F0        4447            movx    @dptr,a
1335 8000      4448            sjmp    L031029?
1337           4449   L031032?:
1337           4450   ;        main.c:975: waitms(500);
1337 9001F4    4451            mov     dptr,#0x01F4
133A 120000    4452            lcall   _waitms
133D           4453   ;        main.c:976: for (i_loo = 80; i_loo >= 50; i_loo-=10){
133D 9059E8    4454            mov     dptr,#_i_loo
1340 7450      4455            mov     a,#0x50
1342 F0        4456            movx    @dptr,a
1343 E4        4457            clr     a
1344 A3        4458            inc     dptr
1345 F0        4459            movx    @dptr,a
1346           4460   L031033?:
1346 9059E8    4461            mov     dptr,#_i_loo
1349 E0        4462            movx    a,@dptr
134A FA        4463            mov     r2,a
134B A3        4464            inc     dptr
134C E0        4465            movx    a,@dptr
134D FB        4466            mov     r3,a
134E C3        4467            clr     c
134F EA        4468            mov     a,r2
1350 9432      4469            subb    a,#0x32
1352 EB        4470            mov     a,r3
1353 6480      4471            xrl     a,#0x80
1355 9480      4472            subb    a,#0x80
1357 4000      4473            jc      L031036?
1359           4474   ;        main.c:977: servo_base = i_loo; 
1359 9057E8    4475            mov     dptr,#_servo_base
135C EA        4476            mov     a,r2
135D F0        4477            movx    @dptr,a
135E           4478   ;        main.c:978: waitms(25);
135E 900019    4479            mov     dptr,#0x0019
1361 120000    4480            lcall   _waitms
1364           4481   ;        main.c:976: for (i_loo = 80; i_loo >= 50; i_loo-=10){
1364 9059E8    4482            mov     dptr,#_i_loo
1367 E0        4483            movx    a,@dptr
1368 FA        4484            mov     r2,a
1369 A3        4485            inc     dptr
136A E0        4486            movx    a,@dptr
136B FB        4487            mov     r3,a
136C EA        4488            mov     a,r2
136D 24F6      4489            add     a,#0xf6
136F FA        4490            mov     r2,a
1370 EB        4491            mov     a,r3
1371 34FF      4492            addc    a,#0xff
1373 FB        4493            mov     r3,a
1374 9059E8    4494            mov     dptr,#_i_loo
1377 EA        4495            mov     a,r2
1378 F0        4496            movx    @dptr,a
1379 A3        4497            inc     dptr
137A EB        4498            mov     a,r3
137B F0        4499            movx    @dptr,a
137C 8000      4500            sjmp    L031033?
137E           4501   L031036?:
137E           4502   ;        main.c:980: return;
137E 22        4503            ret
137F           4504   ;------------------------------------------------------------
137F           4505   ;Allocation info for local variables in function 'servo_push'
137F           4506   ;------------------------------------------------------------
137F           4507   ;------------------------------------------------------------
137F           4508   ;        main.c:983: void servo_push(void)
137F           4509   ;        -----------------------------------------
137F           4510   ;         function servo_push
137F           4511   ;        -----------------------------------------
137F           4512   _servo_push:
137F           4513   ;        main.c:985: servo_arm = 50;
137F 9057A8    4514            mov     dptr,#_servo_arm
1382 7432      4515            mov     a,#0x32
1384 F0        4516            movx    @dptr,a
1385           4517   ;        main.c:986: servo_base = 50;
1385 9057E8    4518            mov     dptr,#_servo_base
1388 7432      4519            mov     a,#0x32
138A F0        4520            movx    @dptr,a
138B           4521   ;        main.c:987: waitms(500);
138B 9001F4    4522            mov     dptr,#0x01F4
138E 120000    4523            lcall   _waitms
1391           4524   ;        main.c:988: for (i_loo=50; i_loo <= 130; i_loo+=10)
1391 9059E8    4525            mov     dptr,#_i_loo
1394 7432      4526            mov     a,#0x32
1396 F0        4527            movx    @dptr,a
1397 E4        4528            clr     a
1398 A3        4529            inc     dptr
1399 F0        4530            movx    @dptr,a
139A           4531   L032001?:
139A 9059E8    4532            mov     dptr,#_i_loo
139D E0        4533            movx    a,@dptr
139E FA        4534            mov     r2,a
139F A3        4535            inc     dptr
13A0 E0        4536            movx    a,@dptr
13A1 FB        4537            mov     r3,a
13A2 C3        4538            clr     c
13A3 7482      4539            mov     a,#0x82
13A5 9A        4540            subb    a,r2
13A6 E4        4541            clr     a
13A7 6480      4542            xrl     a,#0x80
13A9 8BF0      4543            mov     b,r3
13AB 63F080    4544            xrl     b,#0x80
13AE 95F0      4545            subb    a,b
13B0 4000      4546            jc      L032004?
13B2           4547   ;        main.c:990: servo_base = i_loo; 
13B2 9057E8    4548            mov     dptr,#_servo_base
13B5 EA        4549            mov     a,r2
13B6 F0        4550            movx    @dptr,a
13B7           4551   ;        main.c:991: waitms(25);
13B7 900019    4552            mov     dptr,#0x0019
13BA 120000    4553            lcall   _waitms
13BD           4554   ;        main.c:988: for (i_loo=50; i_loo <= 130; i_loo+=10)
13BD 9059E8    4555            mov     dptr,#_i_loo
13C0 E0        4556            movx    a,@dptr
13C1 FA        4557            mov     r2,a
13C2 A3        4558            inc     dptr
13C3 E0        4559            movx    a,@dptr
13C4 FB        4560            mov     r3,a
13C5 9059E8    4561            mov     dptr,#_i_loo
13C8 740A      4562            mov     a,#0x0A
13CA 2A        4563            add     a,r2
13CB F0        4564            movx    @dptr,a
13CC E4        4565            clr     a
13CD 3B        4566            addc    a,r3
13CE A3        4567            inc     dptr
13CF F0        4568            movx    @dptr,a
13D0 8000      4569            sjmp    L032001?
13D2           4570   L032004?:
13D2           4571   ;        main.c:993: waitms(200);
13D2 9000C8    4572            mov     dptr,#0x00C8
13D5 120000    4573            lcall   _waitms
13D8           4574   ;        main.c:994: for (i_loo=50; i_loo <= 130; i_loo+=10)
13D8 9059E8    4575            mov     dptr,#_i_loo
13DB 7432      4576            mov     a,#0x32
13DD F0        4577            movx    @dptr,a
13DE E4        4578            clr     a
13DF A3        4579            inc     dptr
13E0 F0        4580            movx    @dptr,a
13E1           4581   L032005?:
13E1 9059E8    4582            mov     dptr,#_i_loo
13E4 E0        4583            movx    a,@dptr
13E5 FA        4584            mov     r2,a
13E6 A3        4585            inc     dptr
13E7 E0        4586            movx    a,@dptr
13E8 FB        4587            mov     r3,a
13E9 C3        4588            clr     c
13EA 7482      4589            mov     a,#0x82
13EC 9A        4590            subb    a,r2
13ED E4        4591            clr     a
13EE 6480      4592            xrl     a,#0x80
13F0 8BF0      4593            mov     b,r3
13F2 63F080    4594            xrl     b,#0x80
13F5 95F0      4595            subb    a,b
13F7 4000      4596            jc      L032008?
13F9           4597   ;        main.c:996: servo_arm = i_loo; 
13F9 9057A8    4598            mov     dptr,#_servo_arm
13FC EA        4599            mov     a,r2
13FD F0        4600            movx    @dptr,a
13FE           4601   ;        main.c:997: waitms(25);
13FE 900019    4602            mov     dptr,#0x0019
1401 120000    4603            lcall   _waitms
1404           4604   ;        main.c:994: for (i_loo=50; i_loo <= 130; i_loo+=10)
1404 9059E8    4605            mov     dptr,#_i_loo
1407 E0        4606            movx    a,@dptr
1408 FA        4607            mov     r2,a
1409 A3        4608            inc     dptr
140A E0        4609            movx    a,@dptr
140B FB        4610            mov     r3,a
140C 9059E8    4611            mov     dptr,#_i_loo
140F 740A      4612            mov     a,#0x0A
1411 2A        4613            add     a,r2
1412 F0        4614            movx    @dptr,a
1413 E4        4615            clr     a
1414 3B        4616            addc    a,r3
1415 A3        4617            inc     dptr
1416 F0        4618            movx    @dptr,a
1417 8000      4619            sjmp    L032005?
1419           4620   L032008?:
1419           4621   ;        main.c:999: waitms(200);
1419 9000C8    4622            mov     dptr,#0x00C8
141C 120000    4623            lcall   _waitms
141F           4624   ;        main.c:1000: for (i_loo=130; i_loo <= 250; i_loo+=10)
141F 9059E8    4625            mov     dptr,#_i_loo
1422 7482      4626            mov     a,#0x82
1424 F0        4627            movx    @dptr,a
1425 E4        4628            clr     a
1426 A3        4629            inc     dptr
1427 F0        4630            movx    @dptr,a
1428           4631   L032009?:
1428 9059E8    4632            mov     dptr,#_i_loo
142B E0        4633            movx    a,@dptr
142C FA        4634            mov     r2,a
142D A3        4635            inc     dptr
142E E0        4636            movx    a,@dptr
142F FB        4637            mov     r3,a
1430 C3        4638            clr     c
1431 74FA      4639            mov     a,#0xFA
1433 9A        4640            subb    a,r2
1434 E4        4641            clr     a
1435 6480      4642            xrl     a,#0x80
1437 8BF0      4643            mov     b,r3
1439 63F080    4644            xrl     b,#0x80
143C 95F0      4645            subb    a,b
143E 4000      4646            jc      L032012?
1440           4647   ;        main.c:1002: servo_base = i_loo; 
1440 9057E8    4648            mov     dptr,#_servo_base
1443 EA        4649            mov     a,r2
1444 F0        4650            movx    @dptr,a
1445           4651   ;        main.c:1003: waitms(25);
1445 900019    4652            mov     dptr,#0x0019
1448 120000    4653            lcall   _waitms
144B           4654   ;        main.c:1000: for (i_loo=130; i_loo <= 250; i_loo+=10)
144B 9059E8    4655            mov     dptr,#_i_loo
144E E0        4656            movx    a,@dptr
144F FA        4657            mov     r2,a
1450 A3        4658            inc     dptr
1451 E0        4659            movx    a,@dptr
1452 FB        4660            mov     r3,a
1453 9059E8    4661            mov     dptr,#_i_loo
1456 740A      4662            mov     a,#0x0A
1458 2A        4663            add     a,r2
1459 F0        4664            movx    @dptr,a
145A E4        4665            clr     a
145B 3B        4666            addc    a,r3
145C A3        4667            inc     dptr
145D F0        4668            movx    @dptr,a
145E 8000      4669            sjmp    L032009?
1460           4670   L032012?:
1460           4671   ;        main.c:1005: waitms(200);
1460 9000C8    4672            mov     dptr,#0x00C8
1463 120000    4673            lcall   _waitms
1466           4674   ;        main.c:1006: for (i_loo=250; i_loo >= 150; i_loo-=10)
1466 9059E8    4675            mov     dptr,#_i_loo
1469 74FA      4676            mov     a,#0xFA
146B F0        4677            movx    @dptr,a
146C E4        4678            clr     a
146D A3        4679            inc     dptr
146E F0        4680            movx    @dptr,a
146F           4681   L032013?:
146F 9059E8    4682            mov     dptr,#_i_loo
1472 E0        4683            movx    a,@dptr
1473 FA        4684            mov     r2,a
1474 A3        4685            inc     dptr
1475 E0        4686            movx    a,@dptr
1476 FB        4687            mov     r3,a
1477 C3        4688            clr     c
1478 EA        4689            mov     a,r2
1479 9496      4690            subb    a,#0x96
147B EB        4691            mov     a,r3
147C 6480      4692            xrl     a,#0x80
147E 9480      4693            subb    a,#0x80
1480 4000      4694            jc      L032016?
1482           4695   ;        main.c:1008: servo_base = i_loo; 
1482 9057E8    4696            mov     dptr,#_servo_base
1485 EA        4697            mov     a,r2
1486 F0        4698            movx    @dptr,a
1487           4699   ;        main.c:1009: waitms(25);
1487 900019    4700            mov     dptr,#0x0019
148A 120000    4701            lcall   _waitms
148D           4702   ;        main.c:1006: for (i_loo=250; i_loo >= 150; i_loo-=10)
148D 9059E8    4703            mov     dptr,#_i_loo
1490 E0        4704            movx    a,@dptr
1491 FA        4705            mov     r2,a
1492 A3        4706            inc     dptr
1493 E0        4707            movx    a,@dptr
1494 FB        4708            mov     r3,a
1495 EA        4709            mov     a,r2
1496 24F6      4710            add     a,#0xf6
1498 FA        4711            mov     r2,a
1499 EB        4712            mov     a,r3
149A 34FF      4713            addc    a,#0xff
149C FB        4714            mov     r3,a
149D 9059E8    4715            mov     dptr,#_i_loo
14A0 EA        4716            mov     a,r2
14A1 F0        4717            movx    @dptr,a
14A2 A3        4718            inc     dptr
14A3 EB        4719            mov     a,r3
14A4 F0        4720            movx    @dptr,a
14A5 8000      4721            sjmp    L032013?
14A7           4722   L032016?:
14A7           4723   ;        main.c:1011: waitms(200);
14A7 9000C8    4724            mov     dptr,#0x00C8
14AA 120000    4725            lcall   _waitms
14AD           4726   ;        main.c:1012: for (i_loo=130; i_loo >= 50; i_loo-=10)
14AD 9059E8    4727            mov     dptr,#_i_loo
14B0 7482      4728            mov     a,#0x82
14B2 F0        4729            movx    @dptr,a
14B3 E4        4730            clr     a
14B4 A3        4731            inc     dptr
14B5 F0        4732            movx    @dptr,a
14B6           4733   L032017?:
14B6 9059E8    4734            mov     dptr,#_i_loo
14B9 E0        4735            movx    a,@dptr
14BA FA        4736            mov     r2,a
14BB A3        4737            inc     dptr
14BC E0        4738            movx    a,@dptr
14BD FB        4739            mov     r3,a
14BE C3        4740            clr     c
14BF EA        4741            mov     a,r2
14C0 9432      4742            subb    a,#0x32
14C2 EB        4743            mov     a,r3
14C3 6480      4744            xrl     a,#0x80
14C5 9480      4745            subb    a,#0x80
14C7 4000      4746            jc      L032020?
14C9           4747   ;        main.c:1014: servo_arm = i_loo; 
14C9 9057A8    4748            mov     dptr,#_servo_arm
14CC EA        4749            mov     a,r2
14CD F0        4750            movx    @dptr,a
14CE           4751   ;        main.c:1015: waitms(25);
14CE 900019    4752            mov     dptr,#0x0019
14D1 120000    4753            lcall   _waitms
14D4           4754   ;        main.c:1012: for (i_loo=130; i_loo >= 50; i_loo-=10)
14D4 9059E8    4755            mov     dptr,#_i_loo
14D7 E0        4756            movx    a,@dptr
14D8 FA        4757            mov     r2,a
14D9 A3        4758            inc     dptr
14DA E0        4759            movx    a,@dptr
14DB FB        4760            mov     r3,a
14DC EA        4761            mov     a,r2
14DD 24F6      4762            add     a,#0xf6
14DF FA        4763            mov     r2,a
14E0 EB        4764            mov     a,r3
14E1 34FF      4765            addc    a,#0xff
14E3 FB        4766            mov     r3,a
14E4 9059E8    4767            mov     dptr,#_i_loo
14E7 EA        4768            mov     a,r2
14E8 F0        4769            movx    @dptr,a
14E9 A3        4770            inc     dptr
14EA EB        4771            mov     a,r3
14EB F0        4772            movx    @dptr,a
14EC 8000      4773            sjmp    L032017?
14EE           4774   L032020?:
14EE           4775   ;        main.c:1017: waitms(200);
14EE 9000C8    4776            mov     dptr,#0x00C8
14F1 120000    4777            lcall   _waitms
14F4           4778   ;        main.c:1018: for (i_loo=150; i_loo >= 50; i_loo-=10)
14F4 9059E8    4779            mov     dptr,#_i_loo
14F7 7496      4780            mov     a,#0x96
14F9 F0        4781            movx    @dptr,a
14FA E4        4782            clr     a
14FB A3        4783            inc     dptr
14FC F0        4784            movx    @dptr,a
14FD           4785   L032021?:
14FD 9059E8    4786            mov     dptr,#_i_loo
1500 E0        4787            movx    a,@dptr
1501 FA        4788            mov     r2,a
1502 A3        4789            inc     dptr
1503 E0        4790            movx    a,@dptr
1504 FB        4791            mov     r3,a
1505 C3        4792            clr     c
1506 EA        4793            mov     a,r2
1507 9432      4794            subb    a,#0x32
1509 EB        4795            mov     a,r3
150A 6480      4796            xrl     a,#0x80
150C 9480      4797            subb    a,#0x80
150E 4000      4798            jc      L032024?
1510           4799   ;        main.c:1020: servo_base = i_loo; 
1510 9057E8    4800            mov     dptr,#_servo_base
1513 EA        4801            mov     a,r2
1514 F0        4802            movx    @dptr,a
1515           4803   ;        main.c:1021: waitms(25);
1515 900019    4804            mov     dptr,#0x0019
1518 120000    4805            lcall   _waitms
151B           4806   ;        main.c:1018: for (i_loo=150; i_loo >= 50; i_loo-=10)
151B 9059E8    4807            mov     dptr,#_i_loo
151E E0        4808            movx    a,@dptr
151F FA        4809            mov     r2,a
1520 A3        4810            inc     dptr
1521 E0        4811            movx    a,@dptr
1522 FB        4812            mov     r3,a
1523 EA        4813            mov     a,r2
1524 24F6      4814            add     a,#0xf6
1526 FA        4815            mov     r2,a
1527 EB        4816            mov     a,r3
1528 34FF      4817            addc    a,#0xff
152A FB        4818            mov     r3,a
152B 9059E8    4819            mov     dptr,#_i_loo
152E EA        4820            mov     a,r2
152F F0        4821            movx    @dptr,a
1530 A3        4822            inc     dptr
1531 EB        4823            mov     a,r3
1532 F0        4824            movx    @dptr,a
1533 8000      4825            sjmp    L032021?
1535           4826   L032024?:
1535           4827   ;        main.c:1023: waitms(200);
1535 9000C8    4828            mov     dptr,#0x00C8
1538           4829   ;        main.c:1024: return; 
1538 020000    4830            ljmp    _waitms
153B           4831   ;------------------------------------------------------------
153B           4832   ;Allocation info for local variables in function 'Move_forward_ms'
153B           4833   ;------------------------------------------------------------
153B           4834   ;ms                        Allocated to registers r2 r3 
153B           4835   ;------------------------------------------------------------
153B           4836   ;        main.c:1027: void Move_forward_ms(int ms){
153B           4837   ;        -----------------------------------------
153B           4838   ;         function Move_forward_ms
153B           4839   ;        -----------------------------------------
153B           4840   _Move_forward_ms:
153B AA82      4841            mov     r2,dpl
153D AB83      4842            mov     r3,dph
153F           4843   ;        main.c:1029: L_motor_dir = 0;
153F 905868    4844            mov     dptr,#_L_motor_dir
1542           4845   ;        main.c:1030: R_motor_dir = 0;
1542 E4        4846            clr     a
1543 F0        4847            movx    @dptr,a
1544 905828    4848            mov     dptr,#_R_motor_dir
1547 F0        4849            movx    @dptr,a
1548           4850   ;        main.c:1032: pwm_left = 50;
1548 9058E8    4851            mov     dptr,#_pwm_left
154B 7432      4852            mov     a,#0x32
154D F0        4853            movx    @dptr,a
154E           4854   ;        main.c:1033: pwm_right = 50;
154E 9058A8    4855            mov     dptr,#_pwm_right
1551 7432      4856            mov     a,#0x32
1553 F0        4857            movx    @dptr,a
1554           4858   ;        main.c:1035: waitms(ms);
1554 8A82      4859            mov     dpl,r2
1556 8B83      4860            mov     dph,r3
1558 120000    4861            lcall   _waitms
155B           4862   ;        main.c:1037: L_motor_dir = 0;
155B 905868    4863            mov     dptr,#_L_motor_dir
155E           4864   ;        main.c:1038: R_motor_dir = 0;
155E           4865   ;        main.c:1039: pwm_left = 0;
155E           4866   ;        main.c:1040: pwm_right = 0;
155E E4        4867            clr     a
155F F0        4868            movx    @dptr,a
1560 905828    4869            mov     dptr,#_R_motor_dir
1563 F0        4870            movx    @dptr,a
1564 9058E8    4871            mov     dptr,#_pwm_left
1567 F0        4872            movx    @dptr,a
1568 9058A8    4873            mov     dptr,#_pwm_right
156B F0        4874            movx    @dptr,a
156C           4875   ;        main.c:1041: return;
156C 22        4876            ret
156D           4877   ;------------------------------------------------------------
156D           4878   ;Allocation info for local variables in function 'servo_moveaway'
156D           4879   ;------------------------------------------------------------
156D           4880   ;------------------------------------------------------------
156D           4881   ;        main.c:1044: void servo_moveaway(void)
156D           4882   ;        -----------------------------------------
156D           4883   ;         function servo_moveaway
156D           4884   ;        -----------------------------------------
156D           4885   _servo_moveaway:
156D           4886   ;        main.c:1045: {  pwm_left = 0;
156D 9058E8    4887            mov     dptr,#_pwm_left
1570           4888   ;        main.c:1046: pwm_right = 0;
1570 E4        4889            clr     a
1571 F0        4890            movx    @dptr,a
1572 9058A8    4891            mov     dptr,#_pwm_right
1575 F0        4892            movx    @dptr,a
1576           4893   ;        main.c:1047: waitms(200);
1576 9000C8    4894            mov     dptr,#0x00C8
1579 120000    4895            lcall   _waitms
157C           4896   ;        main.c:1048: Move_forward_ms(200);
157C 9000C8    4897            mov     dptr,#0x00C8
157F 120000    4898            lcall   _Move_forward_ms
1582           4899   ;        main.c:1049: servo_push();
1582 120000    4900            lcall   _servo_push
1585           4901   ;        main.c:1050: waitms(100);
1585 900064    4902            mov     dptr,#0x0064
1588 120000    4903            lcall   _waitms
158B           4904   ;        main.c:1051: Move_forward_ms(500);
158B 9001F4    4905            mov     dptr,#0x01F4
158E 120000    4906            lcall   _Move_forward_ms
1591           4907   ;        main.c:1052: servo_push();
1591           4908   ;        main.c:1053: return; 
1591 020000    4909            ljmp    _servo_push
1594           4910   ;------------------------------------------------------------
1594           4911   ;Allocation info for local variables in function 'check_bound'
1594           4912   ;------------------------------------------------------------
1594           4913   ;d2                        Allocated with name '_check_bound_PARM_2'
1594           4914   ;d1                        Allocated to registers r2 r3 
1594           4915   ;------------------------------------------------------------
1594           4916   ;        main.c:1056: int check_bound(int d1, int d2){
1594           4917   ;        -----------------------------------------
1594           4918   ;         function check_bound
1594           4919   ;        -----------------------------------------
1594           4920   _check_bound:
1594 AA82      4921            mov     r2,dpl
1596 AB83      4922            mov     r3,dph
1598           4923   ;        main.c:1057: if(d1>10000||d2>10000)     return 1;
1598 C3        4924            clr     c
1599 7410      4925            mov     a,#0x10
159B 9A        4926            subb    a,r2
159C 74A7      4927            mov     a,#(0x27 ^ 0x80)
159E 8BF0      4928            mov     b,r3
15A0 63F080    4929            xrl     b,#0x80
15A3 95F0      4930            subb    a,b
15A5 4000      4931            jc      L035001?
15A7 7410      4932            mov     a,#0x10
15A9 95A8      4933            subb    a,_check_bound_PARM_2
15AB 74A7      4934            mov     a,#(0x27 ^ 0x80)
15AD 85A9F0    4935            mov     b,(_check_bound_PARM_2 + 1)
15B0 63F080    4936            xrl     b,#0x80
15B3 95F0      4937            subb    a,b
15B5 5000      4938            jnc     L035002?
15B7           4939   L035001?:
15B7 900001    4940            mov     dptr,#0x0001
15BA           4941   ;        main.c:1058: else return 0;
15BA 22        4942            ret
15BB           4943   L035002?:
15BB 900000    4944            mov     dptr,#0x0000
15BE 22        4945            ret
15BF           4946   ;------------------------------------------------------------
15BF           4947   ;Allocation info for local variables in function 'Init_all'
15BF           4948   ;------------------------------------------------------------
15BF           4949   ;------------------------------------------------------------
15BF           4950   ;        main.c:1061: void Init_all(){
15BF           4951   ;        -----------------------------------------
15BF           4952   ;         function Init_all
15BF           4953   ;        -----------------------------------------
15BF           4954   _Init_all:
15BF           4955   ;        main.c:1063: Set_Pin_Output(0x24);
15BF 758224    4956            mov     dpl,#0x24
15C2 120000    4957            lcall   _Set_Pin_Output
15C5           4958   ;        main.c:1064: Set_Pin_Output(0x23);
15C5 758223    4959            mov     dpl,#0x23
15C8 120000    4960            lcall   _Set_Pin_Output
15CB           4961   ;        main.c:1065: Set_Pin_Output(0x22);
15CB 758222    4962            mov     dpl,#0x22
15CE 120000    4963            lcall   _Set_Pin_Output
15D1           4964   ;        main.c:1066: Set_Pin_Output(0x21);
15D1 758221    4965            mov     dpl,#0x21
15D4 120000    4966            lcall   _Set_Pin_Output
15D7           4967   ;        main.c:1067: Set_Pin_Output(0x17);
15D7 758217    4968            mov     dpl,#0x17
15DA 120000    4969            lcall   _Set_Pin_Output
15DD           4970   ;        main.c:1068: Set_Pin_Output(0x16);
15DD 758216    4971            mov     dpl,#0x16
15E0 120000    4972            lcall   _Set_Pin_Output
15E3           4973   ;        main.c:1069: Set_Pin_Output(0x15);
15E3 758215    4974            mov     dpl,#0x15
15E6 120000    4975            lcall   _Set_Pin_Output
15E9           4976   ;        main.c:1070: Set_Pin_Output(0x10); // CS
15E9 758210    4977            mov     dpl,#0x10
15EC 120000    4978            lcall   _Set_Pin_Output
15EF           4979   ;        main.c:1072: Set_Pin_Input(0x30);
15EF 758230    4980            mov     dpl,#0x30
15F2 120000    4981            lcall   _Set_Pin_Input
15F5           4982   ;        main.c:1073: Set_Pin_Output(0x25); // CLK for Load
15F5 758225    4983            mov     dpl,#0x25
15F8 120000    4984            lcall   _Set_Pin_Output
15FB           4985   ;        main.c:1074: Set_Pin_Input(0x26);
15FB 758226    4986            mov     dpl,#0x26
15FE 120000    4987            lcall   _Set_Pin_Input
1601           4988   ;        main.c:1076: Set_Pin_Input(0x31);   //ECHO pin
1601 758231    4989            mov     dpl,#0x31
1604 120000    4990            lcall   _Set_Pin_Input
1607           4991   ;        main.c:1077: Set_Pin_Output(0x00);  // TRIGGER pin
1607 758200    4992            mov     dpl,#0x00
160A 120000    4993            lcall   _Set_Pin_Output
160D           4994   ;        main.c:1079: InitPinADC(1,3);
160D 75F803    4995            mov     _InitPinADC_PARM_2,#0x03
1610 758201    4996            mov     dpl,#0x01
1613 120000    4997            lcall   _InitPinADC
1616           4998   ;        main.c:1080: InitPinADC(1,4);
1616 75F804    4999            mov     _InitPinADC_PARM_2,#0x04
1619 758201    5000            mov     dpl,#0x01
161C 120000    5001            lcall   _InitPinADC
161F           5002   ;        main.c:1081: InitADC();
161F 120000    5003            lcall   _InitADC
1622           5004   ;        main.c:1083: TMOD&=0b_1111_0000; 
1622 5389F0    5005            anl     _TMOD,#0xF0
1625           5006   ;        main.c:1084: TMOD|=0b_0000_0001; 
1625 438901    5007            orl     _TMOD,#0x01
1628           5008   ;        main.c:1085: TR0=0; 
1628 C28C      5009            clr     _TR0
162A           5010   ;        main.c:1087: Servo_arm=0;
162A C296      5011            clr     _P1_6
162C           5012   ;        main.c:1088: Servo_base=0;
162C C297      5013            clr     _P1_7
162E           5014   ;        main.c:1089: Magnet = 0;
162E C295      5015            clr     _P1_5
1630           5016   ;        main.c:1090: PD_SCK = 0;
1630 C2A5      5017            clr     _P2_5
1632           5018   ;        main.c:1091: return;
1632 22        5019            ret
1633           5020   ;------------------------------------------------------------
1633           5021   ;Allocation info for local variables in function 'Move_back_ms'
1633           5022   ;------------------------------------------------------------
1633           5023   ;ms                        Allocated to registers r2 r3 
1633           5024   ;------------------------------------------------------------
1633           5025   ;        main.c:1094: void Move_back_ms(int ms){
1633           5026   ;        -----------------------------------------
1633           5027   ;         function Move_back_ms
1633           5028   ;        -----------------------------------------
1633           5029   _Move_back_ms:
1633 AA82      5030            mov     r2,dpl
1635 AB83      5031            mov     r3,dph
1637           5032   ;        main.c:1096: L_motor_dir = 1;
1637 905868    5033            mov     dptr,#_L_motor_dir
163A 7401      5034            mov     a,#0x01
163C F0        5035            movx    @dptr,a
163D           5036   ;        main.c:1097: R_motor_dir = 1;
163D 905828    5037            mov     dptr,#_R_motor_dir
1640 7401      5038            mov     a,#0x01
1642 F0        5039            movx    @dptr,a
1643           5040   ;        main.c:1099: pwm_left = 80;
1643 9058E8    5041            mov     dptr,#_pwm_left
1646 7450      5042            mov     a,#0x50
1648 F0        5043            movx    @dptr,a
1649           5044   ;        main.c:1100: pwm_right = 80*pwm_corr;
1649 C002      5045            push    ar2
164B C003      5046            push    ar3
164D 905598    5047            mov     dptr,#_pwm_corr
1650 E0        5048            movx    a,@dptr
1651 C0E0      5049            push    acc
1653 A3        5050            inc     dptr
1654 E0        5051            movx    a,@dptr
1655 C0E0      5052            push    acc
1657 A3        5053            inc     dptr
1658 E0        5054            movx    a,@dptr
1659 C0E0      5055            push    acc
165B A3        5056            inc     dptr
165C E0        5057            movx    a,@dptr
165D C0E0      5058            push    acc
165F 900000    5059            mov     dptr,#0x0000
1662 75F0A0    5060            mov     b,#0xA0
1665 7442      5061            mov     a,#0x42
1667 120000    5062            lcall   ___fsmul
166A AC82      5063            mov     r4,dpl
166C AD83      5064            mov     r5,dph
166E AEF0      5065            mov     r6,b
1670 FF        5066            mov     r7,a
1671 E581      5067            mov     a,sp
1673 24FC      5068            add     a,#0xfc
1675 F581      5069            mov     sp,a
1677 8C82      5070            mov     dpl,r4
1679 8D83      5071            mov     dph,r5
167B 8EF0      5072            mov     b,r6
167D EF        5073            mov     a,r7
167E 120000    5074            lcall   ___fs2uchar
1681 E582      5075            mov     a,dpl
1683 D003      5076            pop     ar3
1685 D002      5077            pop     ar2
1687 9058A8    5078            mov     dptr,#_pwm_right
168A F0        5079            movx    @dptr,a
168B           5080   ;        main.c:1102: waitms(ms);
168B 8A82      5081            mov     dpl,r2
168D 8B83      5082            mov     dph,r3
168F 120000    5083            lcall   _waitms
1692           5084   ;        main.c:1104: L_motor_dir = 0;
1692 905868    5085            mov     dptr,#_L_motor_dir
1695           5086   ;        main.c:1105: R_motor_dir = 0;
1695           5087   ;        main.c:1106: pwm_left = 0;
1695           5088   ;        main.c:1107: pwm_right = 0;
1695 E4        5089            clr     a
1696 F0        5090            movx    @dptr,a
1697 905828    5091            mov     dptr,#_R_motor_dir
169A F0        5092            movx    @dptr,a
169B 9058E8    5093            mov     dptr,#_pwm_left
169E F0        5094            movx    @dptr,a
169F 9058A8    5095            mov     dptr,#_pwm_right
16A2 F0        5096            movx    @dptr,a
16A3           5097   ;        main.c:1108: return;
16A3 22        5098            ret
16A4           5099   ;------------------------------------------------------------
16A4           5100   ;Allocation info for local variables in function 'Right_angle'
16A4           5101   ;------------------------------------------------------------
16A4           5102   ;angle                     Allocated to registers r2 r3 
16A4           5103   ;------------------------------------------------------------
16A4           5104   ;        main.c:1112: void Right_angle(int angle){
16A4           5105   ;        -----------------------------------------
16A4           5106   ;         function Right_angle
16A4           5107   ;        -----------------------------------------
16A4           5108   _Right_angle:
16A4 AA82      5109            mov     r2,dpl
16A6 AB83      5110            mov     r3,dph
16A8           5111   ;        main.c:1114: L_motor_dir = 1;
16A8 905868    5112            mov     dptr,#_L_motor_dir
16AB 7401      5113            mov     a,#0x01
16AD F0        5114            movx    @dptr,a
16AE           5115   ;        main.c:1115: R_motor_dir = 0;
16AE 905828    5116            mov     dptr,#_R_motor_dir
16B1 E4        5117            clr     a
16B2 F0        5118            movx    @dptr,a
16B3           5119   ;        main.c:1116: pwm_left = 80;
16B3 9058E8    5120            mov     dptr,#_pwm_left
16B6 7450      5121            mov     a,#0x50
16B8 F0        5122            movx    @dptr,a
16B9           5123   ;        main.c:1117: pwm_right = 80 * pwm_corr;
16B9 C002      5124            push    ar2
16BB C003      5125            push    ar3
16BD 905598    5126            mov     dptr,#_pwm_corr
16C0 E0        5127            movx    a,@dptr
16C1 C0E0      5128            push    acc
16C3 A3        5129            inc     dptr
16C4 E0        5130            movx    a,@dptr
16C5 C0E0      5131            push    acc
16C7 A3        5132            inc     dptr
16C8 E0        5133            movx    a,@dptr
16C9 C0E0      5134            push    acc
16CB A3        5135            inc     dptr
16CC E0        5136            movx    a,@dptr
16CD C0E0      5137            push    acc
16CF 900000    5138            mov     dptr,#0x0000
16D2 75F0A0    5139            mov     b,#0xA0
16D5 7442      5140            mov     a,#0x42
16D7 120000    5141            lcall   ___fsmul
16DA AC82      5142            mov     r4,dpl
16DC AD83      5143            mov     r5,dph
16DE AEF0      5144            mov     r6,b
16E0 FF        5145            mov     r7,a
16E1 E581      5146            mov     a,sp
16E3 24FC      5147            add     a,#0xfc
16E5 F581      5148            mov     sp,a
16E7 8C82      5149            mov     dpl,r4
16E9 8D83      5150            mov     dph,r5
16EB 8EF0      5151            mov     b,r6
16ED EF        5152            mov     a,r7
16EE 120000    5153            lcall   ___fs2uchar
16F1 E582      5154            mov     a,dpl
16F3 D003      5155            pop     ar3
16F5 D002      5156            pop     ar2
16F7 9058A8    5157            mov     dptr,#_pwm_right
16FA F0        5158            movx    @dptr,a
16FB           5159   ;        main.c:1119: waitms(angle);
16FB 8A82      5160            mov     dpl,r2
16FD 8B83      5161            mov     dph,r3
16FF 120000    5162            lcall   _waitms
1702           5163   ;        main.c:1121: L_motor_dir = 0;
1702 905868    5164            mov     dptr,#_L_motor_dir
1705           5165   ;        main.c:1122: R_motor_dir = 0;
1705           5166   ;        main.c:1123: pwm_left = 0;
1705           5167   ;        main.c:1124: pwm_right = 0;
1705 E4        5168            clr     a
1706 F0        5169            movx    @dptr,a
1707 905828    5170            mov     dptr,#_R_motor_dir
170A F0        5171            movx    @dptr,a
170B 9058E8    5172            mov     dptr,#_pwm_left
170E F0        5173            movx    @dptr,a
170F 9058A8    5174            mov     dptr,#_pwm_right
1712 F0        5175            movx    @dptr,a
1713           5176   ;        main.c:1125: return;
1713 22        5177            ret
1714           5178   ;------------------------------------------------------------
1714           5179   ;Allocation info for local variables in function 'Move_forward'
1714           5180   ;------------------------------------------------------------
1714           5181   ;------------------------------------------------------------
1714           5182   ;        main.c:1128: void Move_forward(){
1714           5183   ;        -----------------------------------------
1714           5184   ;         function Move_forward
1714           5185   ;        -----------------------------------------
1714           5186   _Move_forward:
1714           5187   ;        main.c:1130: L_motor_dir = 0;
1714 905868    5188            mov     dptr,#_L_motor_dir
1717           5189   ;        main.c:1131: R_motor_dir = 0;
1717 E4        5190            clr     a
1718 F0        5191            movx    @dptr,a
1719 905828    5192            mov     dptr,#_R_motor_dir
171C F0        5193            movx    @dptr,a
171D           5194   ;        main.c:1132: pwm_left = 60;
171D 9058E8    5195            mov     dptr,#_pwm_left
1720 743C      5196            mov     a,#0x3C
1722 F0        5197            movx    @dptr,a
1723           5198   ;        main.c:1133: pwm_right = 60 * pwm_corr;
1723 905598    5199            mov     dptr,#_pwm_corr
1726 E0        5200            movx    a,@dptr
1727 C0E0      5201            push    acc
1729 A3        5202            inc     dptr
172A E0        5203            movx    a,@dptr
172B C0E0      5204            push    acc
172D A3        5205            inc     dptr
172E E0        5206            movx    a,@dptr
172F C0E0      5207            push    acc
1731 A3        5208            inc     dptr
1732 E0        5209            movx    a,@dptr
1733 C0E0      5210            push    acc
1735 900000    5211            mov     dptr,#0x0000
1738 75F070    5212            mov     b,#0x70
173B 7442      5213            mov     a,#0x42
173D 120000    5214            lcall   ___fsmul
1740 AA82      5215            mov     r2,dpl
1742 AB83      5216            mov     r3,dph
1744 ACF0      5217            mov     r4,b
1746 FD        5218            mov     r5,a
1747 E581      5219            mov     a,sp
1749 24FC      5220            add     a,#0xfc
174B F581      5221            mov     sp,a
174D 8A82      5222            mov     dpl,r2
174F 8B83      5223            mov     dph,r3
1751 8CF0      5224            mov     b,r4
1753 ED        5225            mov     a,r5
1754 120000    5226            lcall   ___fs2uchar
1757 E582      5227            mov     a,dpl
1759 9058A8    5228            mov     dptr,#_pwm_right
175C F0        5229            movx    @dptr,a
175D           5230   ;        main.c:1134: return;
175D 22        5231            ret
175E           5232   ;------------------------------------------------------------
175E           5233   ;Allocation info for local variables in function 'simple_rand'
175E           5234   ;------------------------------------------------------------
175E           5235   ;------------------------------------------------------------
175E           5236   ;        main.c:1137: unsigned int simple_rand() {
175E           5237   ;        -----------------------------------------
175E           5238   ;         function simple_rand
175E           5239   ;        -----------------------------------------
175E           5240   _simple_rand:
175E           5241   ;        main.c:1138: seed = (seed * 25173 + 13849) & 0xFFFF;  
175E 9055D8    5242            mov     dptr,#_seed
1761 E0        5243            movx    a,@dptr
1762 F500      5244            mov     __mulint_PARM_2,a
1764 A3        5245            inc     dptr
1765 E0        5246            movx    a,@dptr
1766 F501      5247            mov     (__mulint_PARM_2 + 1),a
1768 906255    5248            mov     dptr,#0x6255
176B 120000    5249            lcall   __mulint
176E E582      5250            mov     a,dpl
1770 8583F0    5251            mov     b,dph
1773 9055D8    5252            mov     dptr,#_seed
1776 2419      5253            add     a,#0x19
1778 F0        5254            movx    @dptr,a
1779 7436      5255            mov     a,#0x36
177B 35F0      5256            addc    a,b
177D A3        5257            inc     dptr
177E F0        5258            movx    @dptr,a
177F           5259   ;        main.c:1139: return seed;     
177F 9055D8    5260            mov     dptr,#_seed
1782 E0        5261            movx    a,@dptr
1783 FA        5262            mov     r2,a
1784 A3        5263            inc     dptr
1785 E0        5264            movx    a,@dptr
1786 8A82      5265            mov     dpl,r2
1788 F583      5266            mov     dph,a
178A 22        5267            ret
178B           5268   ;------------------------------------------------------------
178B           5269   ;Allocation info for local variables in function 'get_random_90_250'
178B           5270   ;------------------------------------------------------------
178B           5271   ;------------------------------------------------------------
178B           5272   ;        main.c:1142: unsigned int get_random_90_250() {
178B           5273   ;        -----------------------------------------
178B           5274   ;         function get_random_90_250
178B           5275   ;        -----------------------------------------
178B           5276   _get_random_90_250:
178B           5277   ;        main.c:1143: return (simple_rand() % (250 - 85 + 1)) + 90;
178B 120000    5278            lcall   _simple_rand
178E 7500A6    5279            mov     __moduint_PARM_2,#0xA6
1791 E4        5280            clr     a
1792 F501      5281            mov     (__moduint_PARM_2 + 1),a
1794 120000    5282            lcall   __moduint
1797 E582      5283            mov     a,dpl
1799 8583F0    5284            mov     b,dph
179C 245A      5285            add     a,#0x5A
179E F582      5286            mov     dpl,a
17A0 E4        5287            clr     a
17A1 35F0      5288            addc    a,b
17A3 F583      5289            mov     dph,a
17A5 22        5290            ret
17A6           5291   ;------------------------------------------------------------
17A6           5292   ;Allocation info for local variables in function 'Read_angle'
17A6           5293   ;------------------------------------------------------------
17A6           5294   ;mag_x                     Allocated with name '_Read_angle_mag_x_1_229'
17A6           5295   ;mag_y                     Allocated with name '_Read_angle_mag_y_1_229'
17A6           5296   ;sum_x                     Allocated with name '_Read_angle_sum_x_1_229'
17A6           5297   ;sum_y                     Allocated with name '_Read_angle_sum_y_1_229'
17A6           5298   ;angle                     Allocated with name '_Read_angle_angle_1_229'
17A6           5299   ;------------------------------------------------------------
17A6           5300   ;        main.c:1146: float Read_angle(void)
17A6           5301   ;        -----------------------------------------
17A6           5302   ;         function Read_angle
17A6           5303   ;        -----------------------------------------
17A6           5304   _Read_angle:
17A6           5305   ;        main.c:1153: sum_x = 0.0; sum_y = 0.0;
17A6 90D850    5306            mov     dptr,#_Read_angle_sum_x_1_229
17A9 E4        5307            clr     a
17AA F0        5308            movx    @dptr,a
17AB A3        5309            inc     dptr
17AC F0        5310            movx    @dptr,a
17AD A3        5311            inc     dptr
17AE F0        5312            movx    @dptr,a
17AF A3        5313            inc     dptr
17B0 F0        5314            movx    @dptr,a
17B1 90D8A0    5315            mov     dptr,#_Read_angle_sum_y_1_229
17B4 F0        5316            movx    @dptr,a
17B5 A3        5317            inc     dptr
17B6           5318   ;        main.c:1156: for (i = 0; i < 10; i++){
17B6 E4        5319            clr     a
17B7 F0        5320            movx    @dptr,a
17B8 A3        5321            inc     dptr
17B9 F0        5322            movx    @dptr,a
17BA A3        5323            inc     dptr
17BB F0        5324            movx    @dptr,a
17BC 9059A8    5325            mov     dptr,#_i
17BF F0        5326            movx    @dptr,a
17C0 A3        5327            inc     dptr
17C1 F0        5328            movx    @dptr,a
17C2           5329   L042005?:
17C2 9059A8    5330            mov     dptr,#_i
17C5 E0        5331            movx    a,@dptr
17C6 FA        5332            mov     r2,a
17C7 A3        5333            inc     dptr
17C8 E0        5334            movx    a,@dptr
17C9 FB        5335            mov     r3,a
17CA C3        5336            clr     c
17CB EA        5337            mov     a,r2
17CC 940A      5338            subb    a,#0x0A
17CE EB        5339            mov     a,r3
17CF 9400      5340            subb    a,#0x00
17D1 4000      5341            jc      L042015?
17D3 020000    5342            ljmp    L042008?
17D6           5343   L042015?:
17D6           5344   ;        main.c:1157: BMM150_Read_Data(&mag_x, &mag_y);
17D6 750800    5345            mov     _BMM150_Read_Data_PARM_2,#_Read_angle_mag_y_1_229
17D9 7509D8    5346            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_Read_angle_mag_y_1_229 >> 8)
17DC 750A00    5347            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
17DF 90D7B0    5348            mov     dptr,#_Read_angle_mag_x_1_229
17E2 75F000    5349            mov     b,#0x00
17E5 120000    5350            lcall   _BMM150_Read_Data
17E8           5351   ;        main.c:1158: sum_x += (float)mag_x; 
17E8 90D7B0    5352            mov     dptr,#_Read_angle_mag_x_1_229
17EB E0        5353            movx    a,@dptr
17EC FA        5354            mov     r2,a
17ED A3        5355            inc     dptr
17EE E0        5356            movx    a,@dptr
17EF FB        5357            mov     r3,a
17F0 8A82      5358            mov     dpl,r2
17F2 8B83      5359            mov     dph,r3
17F4 120000    5360            lcall   ___sint2fs
17F7 AA82      5361            mov     r2,dpl
17F9 AB83      5362            mov     r3,dph
17FB ACF0      5363            mov     r4,b
17FD FD        5364            mov     r5,a
17FE 90D850    5365            mov     dptr,#_Read_angle_sum_x_1_229
1801 E0        5366            movx    a,@dptr
1802 FE        5367            mov     r6,a
1803 A3        5368            inc     dptr
1804 E0        5369            movx    a,@dptr
1805 FF        5370            mov     r7,a
1806 A3        5371            inc     dptr
1807 E0        5372            movx    a,@dptr
1808 F8        5373            mov     r0,a
1809 A3        5374            inc     dptr
180A E0        5375            movx    a,@dptr
180B F9        5376            mov     r1,a
180C C002      5377            push    ar2
180E C003      5378            push    ar3
1810 C004      5379            push    ar4
1812 C005      5380            push    ar5
1814 8E82      5381            mov     dpl,r6
1816 8F83      5382            mov     dph,r7
1818 88F0      5383            mov     b,r0
181A E9        5384            mov     a,r1
181B 120000    5385            lcall   ___fsadd
181E AA82      5386            mov     r2,dpl
1820 AB83      5387            mov     r3,dph
1822 ACF0      5388            mov     r4,b
1824 FD        5389            mov     r5,a
1825 E581      5390            mov     a,sp
1827 24FC      5391            add     a,#0xfc
1829 F581      5392            mov     sp,a
182B 90D850    5393            mov     dptr,#_Read_angle_sum_x_1_229
182E EA        5394            mov     a,r2
182F F0        5395            movx    @dptr,a
1830 A3        5396            inc     dptr
1831 EB        5397            mov     a,r3
1832 F0        5398            movx    @dptr,a
1833 A3        5399            inc     dptr
1834 EC        5400            mov     a,r4
1835 F0        5401            movx    @dptr,a
1836 A3        5402            inc     dptr
1837 ED        5403            mov     a,r5
1838 F0        5404            movx    @dptr,a
1839           5405   ;        main.c:1159: sum_y += (float)mag_y; 
1839 90D800    5406            mov     dptr,#_Read_angle_mag_y_1_229
183C E0        5407            movx    a,@dptr
183D FA        5408            mov     r2,a
183E A3        5409            inc     dptr
183F E0        5410            movx    a,@dptr
1840 FB        5411            mov     r3,a
1841 8A82      5412            mov     dpl,r2
1843 8B83      5413            mov     dph,r3
1845 120000    5414            lcall   ___sint2fs
1848 AA82      5415            mov     r2,dpl
184A AB83      5416            mov     r3,dph
184C ACF0      5417            mov     r4,b
184E FD        5418            mov     r5,a
184F 90D8A0    5419            mov     dptr,#_Read_angle_sum_y_1_229
1852 E0        5420            movx    a,@dptr
1853 FE        5421            mov     r6,a
1854 A3        5422            inc     dptr
1855 E0        5423            movx    a,@dptr
1856 FF        5424            mov     r7,a
1857 A3        5425            inc     dptr
1858 E0        5426            movx    a,@dptr
1859 F8        5427            mov     r0,a
185A A3        5428            inc     dptr
185B E0        5429            movx    a,@dptr
185C F9        5430            mov     r1,a
185D C002      5431            push    ar2
185F C003      5432            push    ar3
1861 C004      5433            push    ar4
1863 C005      5434            push    ar5
1865 8E82      5435            mov     dpl,r6
1867 8F83      5436            mov     dph,r7
1869 88F0      5437            mov     b,r0
186B E9        5438            mov     a,r1
186C 120000    5439            lcall   ___fsadd
186F AA82      5440            mov     r2,dpl
1871 AB83      5441            mov     r3,dph
1873 ACF0      5442            mov     r4,b
1875 FD        5443            mov     r5,a
1876 E581      5444            mov     a,sp
1878 24FC      5445            add     a,#0xfc
187A F581      5446            mov     sp,a
187C 90D8A0    5447            mov     dptr,#_Read_angle_sum_y_1_229
187F EA        5448            mov     a,r2
1880 F0        5449            movx    @dptr,a
1881 A3        5450            inc     dptr
1882 EB        5451            mov     a,r3
1883 F0        5452            movx    @dptr,a
1884 A3        5453            inc     dptr
1885 EC        5454            mov     a,r4
1886 F0        5455            movx    @dptr,a
1887 A3        5456            inc     dptr
1888 ED        5457            mov     a,r5
1889 F0        5458            movx    @dptr,a
188A           5459   ;        main.c:1160: Timer3us(1);
188A 758201    5460            mov     dpl,#0x01
188D 120000    5461            lcall   _Timer3us
1890           5462   ;        main.c:1156: for (i = 0; i < 10; i++){
1890 9059A8    5463            mov     dptr,#_i
1893 E0        5464            movx    a,@dptr
1894 2401      5465            add     a,#0x01
1896 F0        5466            movx    @dptr,a
1897 A3        5467            inc     dptr
1898 E0        5468            movx    a,@dptr
1899 3400      5469            addc    a,#0x00
189B F0        5470            movx    @dptr,a
189C 020000    5471            ljmp    L042005?
189F           5472   L042008?:
189F           5473   ;        main.c:1162: angle = atan2f(sum_y, sum_x) * 180.0 / M_PI;
189F 90D8A0    5474            mov     dptr,#_Read_angle_sum_y_1_229
18A2 E0        5475            movx    a,@dptr
18A3 FA        5476            mov     r2,a
18A4 A3        5477            inc     dptr
18A5 E0        5478            movx    a,@dptr
18A6 FB        5479            mov     r3,a
18A7 A3        5480            inc     dptr
18A8 E0        5481            movx    a,@dptr
18A9 FC        5482            mov     r4,a
18AA A3        5483            inc     dptr
18AB E0        5484            movx    a,@dptr
18AC FD        5485            mov     r5,a
18AD 90D850    5486            mov     dptr,#_Read_angle_sum_x_1_229
18B0 E0        5487            movx    a,@dptr
18B1 F500      5488            mov     _atan2f_PARM_2,a
18B3 A3        5489            inc     dptr
18B4 E0        5490            movx    a,@dptr
18B5 F501      5491            mov     (_atan2f_PARM_2 + 1),a
18B7 A3        5492            inc     dptr
18B8 E0        5493            movx    a,@dptr
18B9 F502      5494            mov     (_atan2f_PARM_2 + 2),a
18BB A3        5495            inc     dptr
18BC E0        5496            movx    a,@dptr
18BD F503      5497            mov     (_atan2f_PARM_2 + 3),a
18BF 8A82      5498            mov     dpl,r2
18C1 8B83      5499            mov     dph,r3
18C3 8CF0      5500            mov     b,r4
18C5 ED        5501            mov     a,r5
18C6 120000    5502            lcall   _atan2f
18C9 AA82      5503            mov     r2,dpl
18CB AB83      5504            mov     r3,dph
18CD ACF0      5505            mov     r4,b
18CF FD        5506            mov     r5,a
18D0 C002      5507            push    ar2
18D2 C003      5508            push    ar3
18D4 C004      5509            push    ar4
18D6 C005      5510            push    ar5
18D8 900000    5511            mov     dptr,#0x0000
18DB 75F034    5512            mov     b,#0x34
18DE 7443      5513            mov     a,#0x43
18E0 120000    5514            lcall   ___fsmul
18E3 AA82      5515            mov     r2,dpl
18E5 AB83      5516            mov     r3,dph
18E7 ACF0      5517            mov     r4,b
18E9 FD        5518            mov     r5,a
18EA E581      5519            mov     a,sp
18EC 24FC      5520            add     a,#0xfc
18EE F581      5521            mov     sp,a
18F0 74DB      5522            mov     a,#0xDB
18F2 C0E0      5523            push    acc
18F4 740F      5524            mov     a,#0x0F
18F6 C0E0      5525            push    acc
18F8 7449      5526            mov     a,#0x49
18FA C0E0      5527            push    acc
18FC 7440      5528            mov     a,#0x40
18FE C0E0      5529            push    acc
1900 8A82      5530            mov     dpl,r2
1902 8B83      5531            mov     dph,r3
1904 8CF0      5532            mov     b,r4
1906 ED        5533            mov     a,r5
1907 120000    5534            lcall   ___fsdiv
190A AA82      5535            mov     r2,dpl
190C AB83      5536            mov     r3,dph
190E ACF0      5537            mov     r4,b
1910 FD        5538            mov     r5,a
1911 E581      5539            mov     a,sp
1913 24FC      5540            add     a,#0xfc
1915 F581      5541            mov     sp,a
1917 90D8F0    5542            mov     dptr,#_Read_angle_angle_1_229
191A EA        5543            mov     a,r2
191B F0        5544            movx    @dptr,a
191C A3        5545            inc     dptr
191D EB        5546            mov     a,r3
191E F0        5547            movx    @dptr,a
191F A3        5548            inc     dptr
1920 EC        5549            mov     a,r4
1921 F0        5550            movx    @dptr,a
1922 A3        5551            inc     dptr
1923 ED        5552            mov     a,r5
1924 F0        5553            movx    @dptr,a
1925           5554   ;        main.c:1163: if (angle < 0.0) angle += 360.0; 
1925 C002      5555            push    ar2
1927 C003      5556            push    ar3
1929 C004      5557            push    ar4
192B C005      5558            push    ar5
192D E4        5559            clr     a
192E C0E0      5560            push    acc
1930 C0E0      5561            push    acc
1932 C0E0      5562            push    acc
1934 C0E0      5563            push    acc
1936 8A82      5564            mov     dpl,r2
1938 8B83      5565            mov     dph,r3
193A 8CF0      5566            mov     b,r4
193C ED        5567            mov     a,r5
193D 120000    5568            lcall   ___fslt
1940 AE82      5569            mov     r6,dpl
1942 E581      5570            mov     a,sp
1944 24FC      5571            add     a,#0xfc
1946 F581      5572            mov     sp,a
1948 D005      5573            pop     ar5
194A D004      5574            pop     ar4
194C D003      5575            pop     ar3
194E D002      5576            pop     ar2
1950 EE        5577            mov     a,r6
1951 6000      5578            jz      L042002?
1953 E4        5579            clr     a
1954 C0E0      5580            push    acc
1956 C0E0      5581            push    acc
1958 74B4      5582            mov     a,#0xB4
195A C0E0      5583            push    acc
195C 7443      5584            mov     a,#0x43
195E C0E0      5585            push    acc
1960 8A82      5586            mov     dpl,r2
1962 8B83      5587            mov     dph,r3
1964 8CF0      5588            mov     b,r4
1966 ED        5589            mov     a,r5
1967 120000    5590            lcall   ___fsadd
196A AA82      5591            mov     r2,dpl
196C AB83      5592            mov     r3,dph
196E ACF0      5593            mov     r4,b
1970 FD        5594            mov     r5,a
1971 E581      5595            mov     a,sp
1973 24FC      5596            add     a,#0xfc
1975 F581      5597            mov     sp,a
1977 90D8F0    5598            mov     dptr,#_Read_angle_angle_1_229
197A EA        5599            mov     a,r2
197B F0        5600            movx    @dptr,a
197C A3        5601            inc     dptr
197D EB        5602            mov     a,r3
197E F0        5603            movx    @dptr,a
197F A3        5604            inc     dptr
1980 EC        5605            mov     a,r4
1981 F0        5606            movx    @dptr,a
1982 A3        5607            inc     dptr
1983 ED        5608            mov     a,r5
1984 F0        5609            movx    @dptr,a
1985           5610   L042002?:
1985           5611   ;        main.c:1164: if (angle > 360.0) angle -= 360.0; 
1985 90D8F0    5612            mov     dptr,#_Read_angle_angle_1_229
1988 E0        5613            movx    a,@dptr
1989 FA        5614            mov     r2,a
198A A3        5615            inc     dptr
198B E0        5616            movx    a,@dptr
198C FB        5617            mov     r3,a
198D A3        5618            inc     dptr
198E E0        5619            movx    a,@dptr
198F FC        5620            mov     r4,a
1990 A3        5621            inc     dptr
1991 E0        5622            movx    a,@dptr
1992 FD        5623            mov     r5,a
1993 C002      5624            push    ar2
1995 C003      5625            push    ar3
1997 C004      5626            push    ar4
1999 C005      5627            push    ar5
199B E4        5628            clr     a
199C C0E0      5629            push    acc
199E C0E0      5630            push    acc
19A0 74B4      5631            mov     a,#0xB4
19A2 C0E0      5632            push    acc
19A4 7443      5633            mov     a,#0x43
19A6 C0E0      5634            push    acc
19A8 8A82      5635            mov     dpl,r2
19AA 8B83      5636            mov     dph,r3
19AC 8CF0      5637            mov     b,r4
19AE ED        5638            mov     a,r5
19AF 120000    5639            lcall   ___fsgt
19B2 AE82      5640            mov     r6,dpl
19B4 E581      5641            mov     a,sp
19B6 24FC      5642            add     a,#0xfc
19B8 F581      5643            mov     sp,a
19BA D005      5644            pop     ar5
19BC D004      5645            pop     ar4
19BE D003      5646            pop     ar3
19C0 D002      5647            pop     ar2
19C2 EE        5648            mov     a,r6
19C3 6000      5649            jz      L042004?
19C5 E4        5650            clr     a
19C6 C0E0      5651            push    acc
19C8 C0E0      5652            push    acc
19CA 74B4      5653            mov     a,#0xB4
19CC C0E0      5654            push    acc
19CE 7443      5655            mov     a,#0x43
19D0 C0E0      5656            push    acc
19D2 8A82      5657            mov     dpl,r2
19D4 8B83      5658            mov     dph,r3
19D6 8CF0      5659            mov     b,r4
19D8 ED        5660            mov     a,r5
19D9 120000    5661            lcall   ___fssub
19DC AA82      5662            mov     r2,dpl
19DE AB83      5663            mov     r3,dph
19E0 ACF0      5664            mov     r4,b
19E2 FD        5665            mov     r5,a
19E3 E581      5666            mov     a,sp
19E5 24FC      5667            add     a,#0xfc
19E7 F581      5668            mov     sp,a
19E9 90D8F0    5669            mov     dptr,#_Read_angle_angle_1_229
19EC EA        5670            mov     a,r2
19ED F0        5671            movx    @dptr,a
19EE A3        5672            inc     dptr
19EF EB        5673            mov     a,r3
19F0 F0        5674            movx    @dptr,a
19F1 A3        5675            inc     dptr
19F2 EC        5676            mov     a,r4
19F3 F0        5677            movx    @dptr,a
19F4 A3        5678            inc     dptr
19F5 ED        5679            mov     a,r5
19F6 F0        5680            movx    @dptr,a
19F7           5681   L042004?:
19F7           5682   ;        main.c:1165: return angle; 
19F7 90D8F0    5683            mov     dptr,#_Read_angle_angle_1_229
19FA E0        5684            movx    a,@dptr
19FB FA        5685            mov     r2,a
19FC A3        5686            inc     dptr
19FD E0        5687            movx    a,@dptr
19FE FB        5688            mov     r3,a
19FF A3        5689            inc     dptr
1A00 E0        5690            movx    a,@dptr
1A01 FC        5691            mov     r4,a
1A02 A3        5692            inc     dptr
1A03 E0        5693            movx    a,@dptr
1A04 8A82      5694            mov     dpl,r2
1A06 8B83      5695            mov     dph,r3
1A08 8CF0      5696            mov     b,r4
1A0A 22        5697            ret
1A0B           5698   ;------------------------------------------------------------
1A0B           5699   ;Allocation info for local variables in function 'Auto_mode_slave'
1A0B           5700   ;------------------------------------------------------------
1A0B           5701   ;sloc0                     Allocated with name '_Auto_mode_slave_sloc0_1_0'
1A0B           5702   ;count                     Allocated with name '_Auto_mode_slave_count_1_231'
1A0B           5703   ;command                   Allocated with name '_Auto_mode_slave_command_1_231'
1A0B           5704   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_231'
1A0B           5705   ;bound                     Allocated with name '_Auto_mode_slave_bound_1_231'
1A0B           5706   ;c                         Allocated with name '_Auto_mode_slave_c_1_231'
1A0B           5707   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_231'
1A0B           5708   ;angle                     Allocated with name '_Auto_mode_slave_angle_1_231'
1A0B           5709   ;------------------------------------------------------------
1A0B           5710   ;        main.c:1168: void Auto_mode_slave(){
1A0B           5711   ;        -----------------------------------------
1A0B           5712   ;         function Auto_mode_slave
1A0B           5713   ;        -----------------------------------------
1A0B           5714   _Auto_mode_slave:
1A0B           5715   ;        main.c:1171: xdata int state_res = 1;
1A0B 90D9A0    5716            mov     dptr,#_Auto_mode_slave_state_res_1_231
1A0E 7401      5717            mov     a,#0x01
1A10 F0        5718            movx    @dptr,a
1A11 E4        5719            clr     a
1A12 A3        5720            inc     dptr
1A13 F0        5721            movx    @dptr,a
1A14           5722   ;        main.c:1177: curr_angle = Read_angle();
1A14 120000    5723            lcall   _Read_angle
1A17 AA82      5724            mov     r2,dpl
1A19 AB83      5725            mov     r3,dph
1A1B ACF0      5726            mov     r4,b
1A1D FD        5727            mov     r5,a
1A1E 905558    5728            mov     dptr,#_curr_angle
1A21 EA        5729            mov     a,r2
1A22 F0        5730            movx    @dptr,a
1A23 A3        5731            inc     dptr
1A24 EB        5732            mov     a,r3
1A25 F0        5733            movx    @dptr,a
1A26 A3        5734            inc     dptr
1A27 EC        5735            mov     a,r4
1A28 F0        5736            movx    @dptr,a
1A29 A3        5737            inc     dptr
1A2A ED        5738            mov     a,r5
1A2B F0        5739            movx    @dptr,a
1A2C           5740   ;        main.c:1179: while(count < 20 && state_res){
1A2C E4        5741            clr     a
1A2D F500      5742            mov     _Auto_mode_slave_sloc0_1_0,a
1A2F F501      5743            mov     (_Auto_mode_slave_sloc0_1_0 + 1),a
1A31           5744   L043020?:
1A31 C3        5745            clr     c
1A32 E500      5746            mov     a,_Auto_mode_slave_sloc0_1_0
1A34 9414      5747            subb    a,#0x14
1A36 E501      5748            mov     a,(_Auto_mode_slave_sloc0_1_0 + 1)
1A38 6480      5749            xrl     a,#0x80
1A3A 9480      5750            subb    a,#0x80
1A3C 4000      5751            jc      L043042?
1A3E 020000    5752            ljmp    L043022?
1A41           5753   L043042?:
1A41 90D9A0    5754            mov     dptr,#_Auto_mode_slave_state_res_1_231
1A44 E0        5755            movx    a,@dptr
1A45 FC        5756            mov     r4,a
1A46 A3        5757            inc     dptr
1A47 E0        5758            movx    a,@dptr
1A48 FD        5759            mov     r5,a
1A49 4C        5760            orl     a,r4
1A4A 7000      5761            jnz     L043043?
1A4C 020000    5762            ljmp    L043022?
1A4F           5763   L043043?:
1A4F           5764   ;        main.c:1181: if(RXU1()){
1A4F C004      5765            push    ar4
1A51 C005      5766            push    ar5
1A53 120000    5767            lcall   _RXU1
1A56 D005      5768            pop     ar5
1A58 D004      5769            pop     ar4
1A5A 4000      5770            jc      L043044?
1A5C 020000    5771            ljmp    L043012?
1A5F           5772   L043044?:
1A5F           5773   ;        main.c:1182: c=getchar1();      
1A5F C004      5774            push    ar4
1A61 C005      5775            push    ar5
1A63 120000    5776            lcall   _getchar1
1A66 AE82      5777            mov     r6,dpl
1A68 D005      5778            pop     ar5
1A6A D004      5779            pop     ar4
1A6C           5780   ;        main.c:1183: if(c=='!'){
1A6C BE21D0    5781            cjne    r6,#0x21,L043045?
1A6F 8000      5782            sjmp    L043046?
1A71           5783   L043045?:
1A71 020000    5784            ljmp    L043009?
1A74           5785   L043046?:
1A74           5786   ;        main.c:1184: getstr1(buff, sizeof(buff)-1);
1A74 75B813    5787            mov     _getstr1_PARM_2,#0x13
1A77 905E28    5788            mov     dptr,#_buff
1A7A 75F040    5789            mov     b,#0x40
1A7D 120000    5790            lcall   _getstr1
1A80           5791   ;        main.c:1185: if(strlen(buff)==11){
1A80 905E28    5792            mov     dptr,#_buff
1A83 75F040    5793            mov     b,#0x40
1A86 120000    5794            lcall   _strlen
1A89 AF82      5795            mov     r7,dpl
1A8B AA83      5796            mov     r2,dph
1A8D BF0BD0    5797            cjne    r7,#0x0B,L043047?
1A90 BA00D0    5798            cjne    r2,#0x00,L043047?
1A93 8000      5799            sjmp    L043048?
1A95           5800   L043047?:
1A95 020000    5801            ljmp    L043012?
1A98           5802   L043048?:
1A98           5803   ;        main.c:1187: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
1A98 7440      5804            mov     a,#_Auto_mode_slave_command_1_231
1A9A C0E0      5805            push    acc
1A9C 74D9      5806            mov     a,#(_Auto_mode_slave_command_1_231 >> 8)
1A9E C0E0      5807            push    acc
1AA0 E4        5808            clr     a
1AA1 C0E0      5809            push    acc
1AA3 74F0      5810            mov     a,#_Auto_mode_slave_dummy_1_231
1AA5 C0E0      5811            push    acc
1AA7 74D9      5812            mov     a,#(_Auto_mode_slave_dummy_1_231 >> 8)
1AA9 C0E0      5813            push    acc
1AAB E4        5814            clr     a
1AAC C0E0      5815            push    acc
1AAE 74F0      5816            mov     a,#_Auto_mode_slave_dummy_1_231
1AB0 C0E0      5817            push    acc
1AB2 74D9      5818            mov     a,#(_Auto_mode_slave_dummy_1_231 >> 8)
1AB4 C0E0      5819            push    acc
1AB6 E4        5820            clr     a
1AB7 C0E0      5821            push    acc
1AB9 74F0      5822            mov     a,#_Auto_mode_slave_dummy_1_231
1ABB C0E0      5823            push    acc
1ABD 74D9      5824            mov     a,#(_Auto_mode_slave_dummy_1_231 >> 8)
1ABF C0E0      5825            push    acc
1AC1 E4        5826            clr     a
1AC2 C0E0      5827            push    acc
1AC4 7450      5828            mov     a,#__str_5
1AC6 C0E0      5829            push    acc
1AC8 741F      5830            mov     a,#(__str_5 >> 8)
1ACA C0E0      5831            push    acc
1ACC 7480      5832            mov     a,#0x80
1ACE C0E0      5833            push    acc
1AD0 7428      5834            mov     a,#_buff
1AD2 C0E0      5835            push    acc
1AD4 745E      5836            mov     a,#(_buff >> 8)
1AD6 C0E0      5837            push    acc
1AD8 7440      5838            mov     a,#0x40
1ADA C0E0      5839            push    acc
1ADC 120000    5840            lcall   _sscanf
1ADF E581      5841            mov     a,sp
1AE1 24EE      5842            add     a,#0xee
1AE3 F581      5843            mov     sp,a
1AE5           5844   ;        main.c:1188: if(command) state_res = 1;
1AE5 90D940    5845            mov     dptr,#_Auto_mode_slave_command_1_231
1AE8 E0        5846            movx    a,@dptr
1AE9 FF        5847            mov     r7,a
1AEA A3        5848            inc     dptr
1AEB E0        5849            movx    a,@dptr
1AEC FA        5850            mov     r2,a
1AED 4F        5851            orl     a,r7
1AEE 6000      5852            jz      L043002?
1AF0 90D9A0    5853            mov     dptr,#_Auto_mode_slave_state_res_1_231
1AF3 7401      5854            mov     a,#0x01
1AF5 F0        5855            movx    @dptr,a
1AF6 E4        5856            clr     a
1AF7 A3        5857            inc     dptr
1AF8 F0        5858            movx    @dptr,a
1AF9 020000    5859            ljmp    L043012?
1AFC           5860   L043002?:
1AFC           5861   ;        main.c:1189: else state_res = 0;
1AFC 90D9A0    5862            mov     dptr,#_Auto_mode_slave_state_res_1_231
1AFF E4        5863            clr     a
1B00 F0        5864            movx    @dptr,a
1B01 A3        5865            inc     dptr
1B02 F0        5866            movx    @dptr,a
1B03 8000      5867            sjmp    L043012?
1B05           5868   L043009?:
1B05           5869   ;        main.c:1192: else if(c=='@'){
1B05 BE4090    5870            cjne    r6,#0x40,L043012?
1B08           5871   ;        main.c:1193: sprintf(buff, "%01d,%02d,%ld,%05d,%03d\n", state_res, count, freq100, 0, (int)curr_angle);
1B08 905558    5872            mov     dptr,#_curr_angle
1B0B E0        5873            movx    a,@dptr
1B0C FA        5874            mov     r2,a
1B0D A3        5875            inc     dptr
1B0E E0        5876            movx    a,@dptr
1B0F FB        5877            mov     r3,a
1B10 A3        5878            inc     dptr
1B11 E0        5879            movx    a,@dptr
1B12 FE        5880            mov     r6,a
1B13 A3        5881            inc     dptr
1B14 E0        5882            movx    a,@dptr
1B15 8A82      5883            mov     dpl,r2
1B17 8B83      5884            mov     dph,r3
1B19 8EF0      5885            mov     b,r6
1B1B C004      5886            push    ar4
1B1D C005      5887            push    ar5
1B1F 120000    5888            lcall   ___fs2sint
1B22 AA82      5889            mov     r2,dpl
1B24 AB83      5890            mov     r3,dph
1B26 D005      5891            pop     ar5
1B28 D004      5892            pop     ar4
1B2A C002      5893            push    ar2
1B2C C003      5894            push    ar3
1B2E E4        5895            clr     a
1B2F C0E0      5896            push    acc
1B31 C0E0      5897            push    acc
1B33 905DE8    5898            mov     dptr,#_freq100
1B36 E0        5899            movx    a,@dptr
1B37 C0E0      5900            push    acc
1B39 A3        5901            inc     dptr
1B3A E0        5902            movx    a,@dptr
1B3B C0E0      5903            push    acc
1B3D A3        5904            inc     dptr
1B3E E0        5905            movx    a,@dptr
1B3F C0E0      5906            push    acc
1B41 A3        5907            inc     dptr
1B42 E0        5908            movx    a,@dptr
1B43 C0E0      5909            push    acc
1B45 C000      5910            push    _Auto_mode_slave_sloc0_1_0
1B47 C001      5911            push    (_Auto_mode_slave_sloc0_1_0 + 1)
1B49 C004      5912            push    ar4
1B4B C005      5913            push    ar5
1B4D 7410      5914            mov     a,#__str_6
1B4F C0E0      5915            push    acc
1B51 7420      5916            mov     a,#(__str_6 >> 8)
1B53 C0E0      5917            push    acc
1B55 7480      5918            mov     a,#0x80
1B57 C0E0      5919            push    acc
1B59 7428      5920            mov     a,#_buff
1B5B C0E0      5921            push    acc
1B5D 745E      5922            mov     a,#(_buff >> 8)
1B5F C0E0      5923            push    acc
1B61 7440      5924            mov     a,#0x40
1B63 C0E0      5925            push    acc
1B65 120000    5926            lcall   _sprintf
1B68 E581      5927            mov     a,sp
1B6A 24EE      5928            add     a,#0xee
1B6C F581      5929            mov     sp,a
1B6E           5930   ;        main.c:1194: waitms(5); 
1B6E 900005    5931            mov     dptr,#0x0005
1B71 120000    5932            lcall   _waitms
1B74           5933   ;        main.c:1195: sendstr1(buff);
1B74 905E28    5934            mov     dptr,#_buff
1B77 75F040    5935            mov     b,#0x40
1B7A 120000    5936            lcall   _sendstr1
1B7D           5937   L043012?:
1B7D           5938   ;        main.c:1199: Move_forward();
1B7D 120000    5939            lcall   _Move_forward
1B80           5940   ;        main.c:1201: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
1B80 758209    5941            mov     dpl,#0x09
1B83 120000    5942            lcall   _ADC_at_Pin
1B86 E582      5943            mov     a,dpl
1B88 8583F0    5944            mov     b,dph
1B8B 905DA8    5945            mov     dptr,#_d1
1B8E F0        5946            movx    @dptr,a
1B8F A3        5947            inc     dptr
1B90 E5F0      5948            mov     a,b
1B92 F0        5949            movx    @dptr,a
1B93           5950   ;        main.c:1202: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
1B93 75820A    5951            mov     dpl,#0x0A
1B96 120000    5952            lcall   _ADC_at_Pin
1B99 AA82      5953            mov     r2,dpl
1B9B AB83      5954            mov     r3,dph
1B9D 905D68    5955            mov     dptr,#_d2
1BA0 EA        5956            mov     a,r2
1BA1 F0        5957            movx    @dptr,a
1BA2 A3        5958            inc     dptr
1BA3 EB        5959            mov     a,r3
1BA4 F0        5960            movx    @dptr,a
1BA5           5961   ;        main.c:1203: bound = check_bound(d1,d2);
1BA5 905DA8    5962            mov     dptr,#_d1
1BA8 E0        5963            movx    a,@dptr
1BA9 FC        5964            mov     r4,a
1BAA A3        5965            inc     dptr
1BAB E0        5966            movx    a,@dptr
1BAC FD        5967            mov     r5,a
1BAD 8AA8      5968            mov     _check_bound_PARM_2,r2
1BAF 8BA9      5969            mov     (_check_bound_PARM_2 + 1),r3
1BB1 8C82      5970            mov     dpl,r4
1BB3 8D83      5971            mov     dph,r5
1BB5 120000    5972            lcall   _check_bound
1BB8 AA82      5973            mov     r2,dpl
1BBA AB83      5974            mov     r3,dph
1BBC           5975   ;        main.c:1204: printf("f:%04ld, d1:%d, d2:%d, bound_dectect: %d, distance: %d\r\n",freq100, d1,d2,bound,distance);
1BBC C002      5976            push    ar2
1BBE C003      5977            push    ar3
1BC0 905A68    5978            mov     dptr,#_distance
1BC3 E0        5979            movx    a,@dptr
1BC4 C0E0      5980            push    acc
1BC6 A3        5981            inc     dptr
1BC7 E0        5982            movx    a,@dptr
1BC8 C0E0      5983            push    acc
1BCA C002      5984            push    ar2
1BCC C003      5985            push    ar3
1BCE 905D68    5986            mov     dptr,#_d2
1BD1 E0        5987            movx    a,@dptr
1BD2 C0E0      5988            push    acc
1BD4 A3        5989            inc     dptr
1BD5 E0        5990            movx    a,@dptr
1BD6 C0E0      5991            push    acc
1BD8 905DA8    5992            mov     dptr,#_d1
1BDB E0        5993            movx    a,@dptr
1BDC C0E0      5994            push    acc
1BDE A3        5995            inc     dptr
1BDF E0        5996            movx    a,@dptr
1BE0 C0E0      5997            push    acc
1BE2 905DE8    5998            mov     dptr,#_freq100
1BE5 E0        5999            movx    a,@dptr
1BE6 C0E0      6000            push    acc
1BE8 A3        6001            inc     dptr
1BE9 E0        6002            movx    a,@dptr
1BEA C0E0      6003            push    acc
1BEC A3        6004            inc     dptr
1BED E0        6005            movx    a,@dptr
1BEE C0E0      6006            push    acc
1BF0 A3        6007            inc     dptr
1BF1 E0        6008            movx    a,@dptr
1BF2 C0E0      6009            push    acc
1BF4 7490      6010            mov     a,#__str_7
1BF6 C0E0      6011            push    acc
1BF8 7420      6012            mov     a,#(__str_7 >> 8)
1BFA C0E0      6013            push    acc
1BFC 7480      6014            mov     a,#0x80
1BFE C0E0      6015            push    acc
1C00 120000    6016            lcall   _printf
1C03 E581      6017            mov     a,sp
1C05 24F1      6018            add     a,#0xf1
1C07 F581      6019            mov     sp,a
1C09           6020   ;        main.c:1205: printf("%d \r\n", count);
1C09 C000      6021            push    _Auto_mode_slave_sloc0_1_0
1C0B C001      6022            push    (_Auto_mode_slave_sloc0_1_0 + 1)
1C0D 74D0      6023            mov     a,#__str_8
1C0F C0E0      6024            push    acc
1C11 7420      6025            mov     a,#(__str_8 >> 8)
1C13 C0E0      6026            push    acc
1C15 7480      6027            mov     a,#0x80
1C17 C0E0      6028            push    acc
1C19 120000    6029            lcall   _printf
1C1C E581      6030            mov     a,sp
1C1E 24FB      6031            add     a,#0xfb
1C20 F581      6032            mov     sp,a
1C22 D003      6033            pop     ar3
1C24 D002      6034            pop     ar2
1C26           6035   ;        main.c:1206: if (freq100>=5355){
1C26 905DE8    6036            mov     dptr,#_freq100
1C29 E0        6037            movx    a,@dptr
1C2A FC        6038            mov     r4,a
1C2B A3        6039            inc     dptr
1C2C E0        6040            movx    a,@dptr
1C2D FD        6041            mov     r5,a
1C2E A3        6042            inc     dptr
1C2F E0        6043            movx    a,@dptr
1C30 FE        6044            mov     r6,a
1C31 A3        6045            inc     dptr
1C32 E0        6046            movx    a,@dptr
1C33 FF        6047            mov     r7,a
1C34 C3        6048            clr     c
1C35 EC        6049            mov     a,r4
1C36 94EB      6050            subb    a,#0xEB
1C38 ED        6051            mov     a,r5
1C39 9414      6052            subb    a,#0x14
1C3B EE        6053            mov     a,r6
1C3C 9400      6054            subb    a,#0x00
1C3E EF        6055            mov     a,r7
1C3F 6480      6056            xrl     a,#0x80
1C41 9480      6057            subb    a,#0x80
1C43 4000      6058            jc      L043014?
1C45           6059   ;        main.c:1207: mea_yes = 0;
1C45 905458    6060            mov     dptr,#_mea_yes
1C48 E4        6061            clr     a
1C49 F0        6062            movx    @dptr,a
1C4A           6063   ;        main.c:1208: Move_back_ms(100);
1C4A 900064    6064            mov     dptr,#0x0064
1C4D C002      6065            push    ar2
1C4F C003      6066            push    ar3
1C51 120000    6067            lcall   _Move_back_ms
1C54           6068   ;        main.c:1209: waitms(100);
1C54 900064    6069            mov     dptr,#0x0064
1C57 120000    6070            lcall   _waitms
1C5A           6071   ;        main.c:1210: servo_pick();
1C5A 120000    6072            lcall   _servo_pick
1C5D D003      6073            pop     ar3
1C5F D002      6074            pop     ar2
1C61           6075   ;        main.c:1211: count++;
1C61 0500      6076            inc     _Auto_mode_slave_sloc0_1_0
1C63 E4        6077            clr     a
1C64 B50050    6078            cjne    a,_Auto_mode_slave_sloc0_1_0,L043053?
1C67 0501      6079            inc     (_Auto_mode_slave_sloc0_1_0 + 1)
1C69           6080   L043053?:
1C69           6081   ;        main.c:1212: waitms(100);
1C69 900064    6082            mov     dptr,#0x0064
1C6C C002      6083            push    ar2
1C6E C003      6084            push    ar3
1C70 120000    6085            lcall   _waitms
1C73           6086   ;        main.c:1213: mea_yes = 1;
1C73 905458    6087            mov     dptr,#_mea_yes
1C76 7401      6088            mov     a,#0x01
1C78 F0        6089            movx    @dptr,a
1C79           6090   ;        main.c:1214: Move_forward();
1C79 120000    6091            lcall   _Move_forward
1C7C D003      6092            pop     ar3
1C7E D002      6093            pop     ar2
1C80           6094   L043014?:
1C80           6095   ;        main.c:1217: if (distance < 600){
1C80 905A68    6096            mov     dptr,#_distance
1C83 E0        6097            movx    a,@dptr
1C84 FC        6098            mov     r4,a
1C85 A3        6099            inc     dptr
1C86 E0        6100            movx    a,@dptr
1C87 FD        6101            mov     r5,a
1C88 C3        6102            clr     c
1C89 EC        6103            mov     a,r4
1C8A 9458      6104            subb    a,#0x58
1C8C ED        6105            mov     a,r5
1C8D 6480      6106            xrl     a,#0x80
1C8F 9482      6107            subb    a,#0x82
1C91 5000      6108            jnc     L043016?
1C93           6109   ;        main.c:1218: servo_moveaway();
1C93 C002      6110            push    ar2
1C95 C003      6111            push    ar3
1C97 120000    6112            lcall   _servo_moveaway
1C9A D003      6113            pop     ar3
1C9C D002      6114            pop     ar2
1C9E           6115   L043016?:
1C9E           6116   ;        main.c:1221: if(bound == 1){
1C9E BA01D0    6117            cjne    r2,#0x01,L043055?
1CA1 BB00D0    6118            cjne    r3,#0x00,L043055?
1CA4 8000      6119            sjmp    L043056?
1CA6           6120   L043055?:
1CA6 020000    6121            ljmp    L043020?
1CA9           6122   L043056?:
1CA9           6123   ;        main.c:1222: Move_back_ms(400);
1CA9 900190    6124            mov     dptr,#0x0190
1CAC 120000    6125            lcall   _Move_back_ms
1CAF           6126   ;        main.c:1223: waitms(100);
1CAF 900064    6127            mov     dptr,#0x0064
1CB2 120000    6128            lcall   _waitms
1CB5           6129   ;        main.c:1224: angle = get_random_90_250();
1CB5 120000    6130            lcall   _get_random_90_250
1CB8 858200    6131            mov     __mulint_PARM_2,dpl
1CBB 858301    6132            mov     (__mulint_PARM_2 + 1),dph
1CBE           6133   ;        main.c:1225: Right_angle(angle*600/90);
1CBE 900258    6134            mov     dptr,#0x0258
1CC1 120000    6135            lcall   __mulint
1CC4 AA82      6136            mov     r2,dpl
1CC6 AB83      6137            mov     r3,dph
1CC8 75005A    6138            mov     __divuint_PARM_2,#0x5A
1CCB E4        6139            clr     a
1CCC F501      6140            mov     (__divuint_PARM_2 + 1),a
1CCE 8A82      6141            mov     dpl,r2
1CD0 8B83      6142            mov     dph,r3
1CD2 120000    6143            lcall   __divuint
1CD5 120000    6144            lcall   _Right_angle
1CD8           6145   ;        main.c:1226: curr_angle = Read_angle() * 1.2;
1CD8 120000    6146            lcall   _Read_angle
1CDB AA82      6147            mov     r2,dpl
1CDD AB83      6148            mov     r3,dph
1CDF ACF0      6149            mov     r4,b
1CE1 FD        6150            mov     r5,a
1CE2 C002      6151            push    ar2
1CE4 C003      6152            push    ar3
1CE6 C004      6153            push    ar4
1CE8 C005      6154            push    ar5
1CEA 90999A    6155            mov     dptr,#0x999A
1CED 75F099    6156            mov     b,#0x99
1CF0 743F      6157            mov     a,#0x3F
1CF2 120000    6158            lcall   ___fsmul
1CF5 AA82      6159            mov     r2,dpl
1CF7 AB83      6160            mov     r3,dph
1CF9 ACF0      6161            mov     r4,b
1CFB FD        6162            mov     r5,a
1CFC E581      6163            mov     a,sp
1CFE 24FC      6164            add     a,#0xfc
1D00 F581      6165            mov     sp,a
1D02 905558    6166            mov     dptr,#_curr_angle
1D05 EA        6167            mov     a,r2
1D06 F0        6168            movx    @dptr,a
1D07 A3        6169            inc     dptr
1D08 EB        6170            mov     a,r3
1D09 F0        6171            movx    @dptr,a
1D0A A3        6172            inc     dptr
1D0B EC        6173            mov     a,r4
1D0C F0        6174            movx    @dptr,a
1D0D A3        6175            inc     dptr
1D0E ED        6176            mov     a,r5
1D0F F0        6177            movx    @dptr,a
1D10 020000    6178            ljmp    L043020?
1D13           6179   L043022?:
1D13           6180   ;        main.c:1229: dummy = 0;
1D13 90D9F0    6181            mov     dptr,#_Auto_mode_slave_dummy_1_231
1D16 E4        6182            clr     a
1D17 F0        6183            movx    @dptr,a
1D18 A3        6184            inc     dptr
1D19 F0        6185            movx    @dptr,a
1D1A           6186   ;        main.c:1231: sprintf(buff, "0,20,%04ld,%05d,%03d,%03d,%03d\n", freq100, weight, (int)curr_angle);
1D1A 905558    6187            mov     dptr,#_curr_angle
1D1D E0        6188            movx    a,@dptr
1D1E FA        6189            mov     r2,a
1D1F A3        6190            inc     dptr
1D20 E0        6191            movx    a,@dptr
1D21 FB        6192            mov     r3,a
1D22 A3        6193            inc     dptr
1D23 E0        6194            movx    a,@dptr
1D24 FC        6195            mov     r4,a
1D25 A3        6196            inc     dptr
1D26 E0        6197            movx    a,@dptr
1D27 8A82      6198            mov     dpl,r2
1D29 8B83      6199            mov     dph,r3
1D2B 8CF0      6200            mov     b,r4
1D2D 120000    6201            lcall   ___fs2sint
1D30 AA82      6202            mov     r2,dpl
1D32 AB83      6203            mov     r3,dph
1D34 C002      6204            push    ar2
1D36 C003      6205            push    ar3
1D38 905418    6206            mov     dptr,#_weight
1D3B E0        6207            movx    a,@dptr
1D3C C0E0      6208            push    acc
1D3E A3        6209            inc     dptr
1D3F E0        6210            movx    a,@dptr
1D40 C0E0      6211            push    acc
1D42 905DE8    6212            mov     dptr,#_freq100
1D45 E0        6213            movx    a,@dptr
1D46 C0E0      6214            push    acc
1D48 A3        6215            inc     dptr
1D49 E0        6216            movx    a,@dptr
1D4A C0E0      6217            push    acc
1D4C A3        6218            inc     dptr
1D4D E0        6219            movx    a,@dptr
1D4E C0E0      6220            push    acc
1D50 A3        6221            inc     dptr
1D51 E0        6222            movx    a,@dptr
1D52 C0E0      6223            push    acc
1D54 74E0      6224            mov     a,#__str_9
1D56 C0E0      6225            push    acc
1D58 7422      6226            mov     a,#(__str_9 >> 8)
1D5A C0E0      6227            push    acc
1D5C 7480      6228            mov     a,#0x80
1D5E C0E0      6229            push    acc
1D60 7428      6230            mov     a,#_buff
1D62 C0E0      6231            push    acc
1D64 745E      6232            mov     a,#(_buff >> 8)
1D66 C0E0      6233            push    acc
1D68 7440      6234            mov     a,#0x40
1D6A C0E0      6235            push    acc
1D6C 120000    6236            lcall   _sprintf
1D6F E581      6237            mov     a,sp
1D71 24F2      6238            add     a,#0xf2
1D73 F581      6239            mov     sp,a
1D75           6240   ;        main.c:1232: dummy++;
1D75 90D9F0    6241            mov     dptr,#_Auto_mode_slave_dummy_1_231
1D78 7401      6242            mov     a,#0x01
1D7A F0        6243            movx    @dptr,a
1D7B E4        6244            clr     a
1D7C A3        6245            inc     dptr
1D7D F0        6246            movx    @dptr,a
1D7E           6247   ;        main.c:1233: waitms(5); 
1D7E 900005    6248            mov     dptr,#0x0005
1D81 120000    6249            lcall   _waitms
1D84           6250   ;        main.c:1234: sendstr1(buff);
1D84 905E28    6251            mov     dptr,#_buff
1D87 75F040    6252            mov     b,#0x40
1D8A 120000    6253            lcall   _sendstr1
1D8D           6254   ;        main.c:1235: printf("%s\r\n",buff);
1D8D 7428      6255            mov     a,#_buff
1D8F C0E0      6256            push    acc
1D91 745E      6257            mov     a,#(_buff >> 8)
1D93 C0E0      6258            push    acc
1D95 7440      6259            mov     a,#0x40
1D97 C0E0      6260            push    acc
1D99 7420      6261            mov     a,#__str_10
1D9B C0E0      6262            push    acc
1D9D 7423      6263            mov     a,#(__str_10 >> 8)
1D9F C0E0      6264            push    acc
1DA1 7480      6265            mov     a,#0x80
1DA3 C0E0      6266            push    acc
1DA5 120000    6267            lcall   _printf
1DA8 E581      6268            mov     a,sp
1DAA 24FA      6269            add     a,#0xfa
1DAC F581      6270            mov     sp,a
1DAE           6271   ;        main.c:1236: if(dummy = 100) break;
1DAE 90D9F0    6272            mov     dptr,#_Auto_mode_slave_dummy_1_231
1DB1 7464      6273            mov     a,#0x64
1DB3 F0        6274            movx    @dptr,a
1DB4 E4        6275            clr     a
1DB5 A3        6276            inc     dptr
1DB6 F0        6277            movx    @dptr,a
1DB7 22        6278            ret
1DB8           6279   ;------------------------------------------------------------
1DB8           6280   ;Allocation info for local variables in function 'Joystick_Control'
1DB8           6281   ;------------------------------------------------------------
1DB8           6282   ;vy_ptr                    Allocated with name '_Joystick_Control_PARM_2'
1DB8           6283   ;vx_ptr                    Allocated to registers r2 r3 r4 
1DB8           6284   ;sloc0                     Allocated with name '_Joystick_Control_sloc0_1_0'
1DB8           6285   ;sloc1                     Allocated with name '_Joystick_Control_sloc1_1_0'
1DB8           6286   ;sloc2                     Allocated with name '_Joystick_Control_sloc2_1_0'
1DB8           6287   ;sloc3                     Allocated with name '_Joystick_Control_sloc3_1_0'
1DB8           6288   ;sloc4                     Allocated with name '_Joystick_Control_sloc4_1_0'
1DB8           6289   ;sloc5                     Allocated with name '_Joystick_Control_sloc5_1_0'
1DB8           6290   ;vx_error                  Allocated with name '_Joystick_Control_vx_error_1_242'
1DB8           6291   ;vy_error                  Allocated with name '_Joystick_Control_vy_error_1_242'
1DB8           6292   ;vx_err                    Allocated with name '_Joystick_Control_vx_err_1_242'
1DB8           6293   ;vy_err                    Allocated with name '_Joystick_Control_vy_err_1_242'
1DB8           6294   ;------------------------------------------------------------
1DB8           6295   ;        main.c:1240: float Joystick_Control(int *vx_ptr, int *vy_ptr)
1DB8           6296   ;        -----------------------------------------
1DB8           6297   ;         function Joystick_Control
1DB8           6298   ;        -----------------------------------------
1DB8           6299   _Joystick_Control:
1DB8           6300   ;        main.c:1244: vx = *vx_ptr; 
1DB8 120000    6301            lcall   __gptrget
1DBB FA        6302            mov     r2,a
1DBC A3        6303            inc     dptr
1DBD 120000    6304            lcall   __gptrget
1DC0 FB        6305            mov     r3,a
1DC1 9056E8    6306            mov     dptr,#_vx
1DC4 EA        6307            mov     a,r2
1DC5 F0        6308            movx    @dptr,a
1DC6 A3        6309            inc     dptr
1DC7 EB        6310            mov     a,r3
1DC8 F0        6311            movx    @dptr,a
1DC9           6312   ;        main.c:1245: vy = *vy_ptr; 
1DC9 AA78      6313            mov     r2,_Joystick_Control_PARM_2
1DCB AB79      6314            mov     r3,(_Joystick_Control_PARM_2 + 1)
1DCD AC7A      6315            mov     r4,(_Joystick_Control_PARM_2 + 2)
1DCF 8A82      6316            mov     dpl,r2
1DD1 8B83      6317            mov     dph,r3
1DD3 8CF0      6318            mov     b,r4
1DD5 120000    6319            lcall   __gptrget
1DD8 FA        6320            mov     r2,a
1DD9 A3        6321            inc     dptr
1DDA 120000    6322            lcall   __gptrget
1DDD FB        6323            mov     r3,a
1DDE 9056A8    6324            mov     dptr,#_vy
1DE1 EA        6325            mov     a,r2
1DE2 F0        6326            movx    @dptr,a
1DE3 A3        6327            inc     dptr
1DE4 EB        6328            mov     a,r3
1DE5 F0        6329            movx    @dptr,a
1DE6           6330   ;        main.c:1248: raw_angle = Read_angle();
1DE6 120000    6331            lcall   _Read_angle
1DE9 AA82      6332            mov     r2,dpl
1DEB AB83      6333            mov     r3,dph
1DED ACF0      6334            mov     r4,b
1DEF FD        6335            mov     r5,a
1DF0 905518    6336            mov     dptr,#_raw_angle
1DF3 EA        6337            mov     a,r2
1DF4 F0        6338            movx    @dptr,a
1DF5 A3        6339            inc     dptr
1DF6 EB        6340            mov     a,r3
1DF7 F0        6341            movx    @dptr,a
1DF8 A3        6342            inc     dptr
1DF9 EC        6343            mov     a,r4
1DFA F0        6344            movx    @dptr,a
1DFB A3        6345            inc     dptr
1DFC ED        6346            mov     a,r5
1DFD F0        6347            movx    @dptr,a
1DFE           6348   ;        main.c:1251: vx_error = abs(vx-vx_thres)*100/vx_thres; 
1DFE 905768    6349            mov     dptr,#_vx_thres
1E01 E0        6350            movx    a,@dptr
1E02 FA        6351            mov     r2,a
1E03 A3        6352            inc     dptr
1E04 E0        6353            movx    a,@dptr
1E05 FB        6354            mov     r3,a
1E06 9056E8    6355            mov     dptr,#_vx
1E09 E0        6356            movx    a,@dptr
1E0A FC        6357            mov     r4,a
1E0B A3        6358            inc     dptr
1E0C E0        6359            movx    a,@dptr
1E0D FD        6360            mov     r5,a
1E0E EC        6361            mov     a,r4
1E0F C3        6362            clr     c
1E10 9A        6363            subb    a,r2
1E11 F582      6364            mov     dpl,a
1E13 ED        6365            mov     a,r5
1E14 9B        6366            subb    a,r3
1E15 F583      6367            mov     dph,a
1E17 120000    6368            lcall   _abs
1E1A 858200    6369            mov     __mulint_PARM_2,dpl
1E1D 858301    6370            mov     (__mulint_PARM_2 + 1),dph
1E20 900064    6371            mov     dptr,#0x0064
1E23 120000    6372            lcall   __mulint
1E26 AA82      6373            mov     r2,dpl
1E28 AB83      6374            mov     r3,dph
1E2A 905768    6375            mov     dptr,#_vx_thres
1E2D E0        6376            movx    a,@dptr
1E2E F500      6377            mov     __divsint_PARM_2,a
1E30 A3        6378            inc     dptr
1E31 E0        6379            movx    a,@dptr
1E32 F501      6380            mov     (__divsint_PARM_2 + 1),a
1E34 8A82      6381            mov     dpl,r2
1E36 8B83      6382            mov     dph,r3
1E38 120000    6383            lcall   __divsint
1E3B E582      6384            mov     a,dpl
1E3D 8583F0    6385            mov     b,dph
1E40 90DA50    6386            mov     dptr,#_Joystick_Control_vx_error_1_242
1E43 F0        6387            movx    @dptr,a
1E44 A3        6388            inc     dptr
1E45 E5F0      6389            mov     a,b
1E47 F0        6390            movx    @dptr,a
1E48           6391   ;        main.c:1252: vy_error = abs(vy-vy_thres)*100/vy_thres; 
1E48 905728    6392            mov     dptr,#_vy_thres
1E4B E0        6393            movx    a,@dptr
1E4C FA        6394            mov     r2,a
1E4D A3        6395            inc     dptr
1E4E E0        6396            movx    a,@dptr
1E4F FB        6397            mov     r3,a
1E50 9056A8    6398            mov     dptr,#_vy
1E53 E0        6399            movx    a,@dptr
1E54 FC        6400            mov     r4,a
1E55 A3        6401            inc     dptr
1E56 E0        6402            movx    a,@dptr
1E57 FD        6403            mov     r5,a
1E58 EC        6404            mov     a,r4
1E59 C3        6405            clr     c
1E5A 9A        6406            subb    a,r2
1E5B F582      6407            mov     dpl,a
1E5D ED        6408            mov     a,r5
1E5E 9B        6409            subb    a,r3
1E5F F583      6410            mov     dph,a
1E61 120000    6411            lcall   _abs
1E64 858200    6412            mov     __mulint_PARM_2,dpl
1E67 858301    6413            mov     (__mulint_PARM_2 + 1),dph
1E6A 900064    6414            mov     dptr,#0x0064
1E6D 120000    6415            lcall   __mulint
1E70 AA82      6416            mov     r2,dpl
1E72 AB83      6417            mov     r3,dph
1E74 905728    6418            mov     dptr,#_vy_thres
1E77 E0        6419            movx    a,@dptr
1E78 FC        6420            mov     r4,a
1E79 A3        6421            inc     dptr
1E7A E0        6422            movx    a,@dptr
1E7B FD        6423            mov     r5,a
1E7C 8C00      6424            mov     __divsint_PARM_2,r4
1E7E 8D01      6425            mov     (__divsint_PARM_2 + 1),r5
1E80 8A82      6426            mov     dpl,r2
1E82 8B83      6427            mov     dph,r3
1E84 C004      6428            push    ar4
1E86 C005      6429            push    ar5
1E88 120000    6430            lcall   __divsint
1E8B AA82      6431            mov     r2,dpl
1E8D AB83      6432            mov     r3,dph
1E8F D005      6433            pop     ar5
1E91 D004      6434            pop     ar4
1E93 90DAB0    6435            mov     dptr,#_Joystick_Control_vy_error_1_242
1E96 EA        6436            mov     a,r2
1E97 F0        6437            movx    @dptr,a
1E98 A3        6438            inc     dptr
1E99 EB        6439            mov     a,r3
1E9A F0        6440            movx    @dptr,a
1E9B           6441   ;        main.c:1253: vx_err = vx-vx_thres; 
1E9B 905768    6442            mov     dptr,#_vx_thres
1E9E E0        6443            movx    a,@dptr
1E9F FE        6444            mov     r6,a
1EA0 A3        6445            inc     dptr
1EA1 E0        6446            movx    a,@dptr
1EA2 FF        6447            mov     r7,a
1EA3 9056E8    6448            mov     dptr,#_vx
1EA6 E0        6449            movx    a,@dptr
1EA7 F8        6450            mov     r0,a
1EA8 A3        6451            inc     dptr
1EA9 E0        6452            movx    a,@dptr
1EAA F9        6453            mov     r1,a
1EAB E8        6454            mov     a,r0
1EAC C3        6455            clr     c
1EAD 9E        6456            subb    a,r6
1EAE FE        6457            mov     r6,a
1EAF E9        6458            mov     a,r1
1EB0 9F        6459            subb    a,r7
1EB1 FF        6460            mov     r7,a
1EB2 90DB00    6461            mov     dptr,#_Joystick_Control_vx_err_1_242
1EB5 EE        6462            mov     a,r6
1EB6 F0        6463            movx    @dptr,a
1EB7 A3        6464            inc     dptr
1EB8 EF        6465            mov     a,r7
1EB9 F0        6466            movx    @dptr,a
1EBA           6467   ;        main.c:1254: vy_err = vy-vy_thres; 
1EBA 9056A8    6468            mov     dptr,#_vy
1EBD E0        6469            movx    a,@dptr
1EBE F8        6470            mov     r0,a
1EBF A3        6471            inc     dptr
1EC0 E0        6472            movx    a,@dptr
1EC1 F9        6473            mov     r1,a
1EC2 E8        6474            mov     a,r0
1EC3 C3        6475            clr     c
1EC4 9C        6476            subb    a,r4
1EC5 F550      6477            mov     _Joystick_Control_sloc0_1_0,a
1EC7 E9        6478            mov     a,r1
1EC8 9D        6479            subb    a,r5
1EC9 F551      6480            mov     (_Joystick_Control_sloc0_1_0 + 1),a
1ECB 90DB50    6481            mov     dptr,#_Joystick_Control_vy_err_1_242
1ECE E550      6482            mov     a,_Joystick_Control_sloc0_1_0
1ED0 F0        6483            movx    @dptr,a
1ED1 A3        6484            inc     dptr
1ED2 E551      6485            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
1ED4 F0        6486            movx    @dptr,a
1ED5           6487   ;        main.c:1255: pwm_left = 0; 
1ED5 9058E8    6488            mov     dptr,#_pwm_left
1ED8           6489   ;        main.c:1256: pwm_right = 0; 
1ED8 E4        6490            clr     a
1ED9 F0        6491            movx    @dptr,a
1EDA 9058A8    6492            mov     dptr,#_pwm_right
1EDD F0        6493            movx    @dptr,a
1EDE           6494   ;        main.c:1258: if ((vy_error>5) && (vx_error<5)){
1EDE C3        6495            clr     c
1EDF 7405      6496            mov     a,#0x05
1EE1 9A        6497            subb    a,r2
1EE2 E4        6498            clr     a
1EE3 6480      6499            xrl     a,#0x80
1EE5 8BF0      6500            mov     b,r3
1EE7 63F080    6501            xrl     b,#0x80
1EEA 95F0      6502            subb    a,b
1EEC E4        6503            clr     a
1EED 33        6504            rlc     a
1EEE F5F0      6505            mov     _Joystick_Control_sloc2_1_0,a
1EF0 7000      6506            jnz     L044062?
1EF2 020000    6507            ljmp    L044005?
1EF5           6508   L044062?:
1EF5 90DA50    6509            mov     dptr,#_Joystick_Control_vx_error_1_242
1EF8 E0        6510            movx    a,@dptr
1EF9 F9        6511            mov     r1,a
1EFA A3        6512            inc     dptr
1EFB E0        6513            movx    a,@dptr
1EFC F8        6514            mov     r0,a
1EFD C3        6515            clr     c
1EFE E9        6516            mov     a,r1
1EFF 9405      6517            subb    a,#0x05
1F01 E8        6518            mov     a,r0
1F02 6480      6519            xrl     a,#0x80
1F04 9480      6520            subb    a,#0x80
1F06 4000      6521            jc      L044063?
1F08 020000    6522            ljmp    L044005?
1F0B           6523   L044063?:
1F0B           6524   ;        main.c:1259: pwm_left = vy_error; 
1F0B 9058E8    6525            mov     dptr,#_pwm_left
1F0E EA        6526            mov     a,r2
1F0F F0        6527            movx    @dptr,a
1F10           6528   ;        main.c:1260: pwm_right = vy_error * pwm_corr; 
1F10 8A82      6529            mov     dpl,r2
1F12 8B83      6530            mov     dph,r3
1F14 C002      6531            push    ar2
1F16 C003      6532            push    ar3
1F18 C006      6533            push    ar6
1F1A C007      6534            push    ar7
1F1C 120000    6535            lcall   ___sint2fs
1F1F A982      6536            mov     r1,dpl
1F21 A883      6537            mov     r0,dph
1F23 ACF0      6538            mov     r4,b
1F25 FD        6539            mov     r5,a
1F26 905598    6540            mov     dptr,#_pwm_corr
1F29 E0        6541            movx    a,@dptr
1F2A C0E0      6542            push    acc
1F2C A3        6543            inc     dptr
1F2D E0        6544            movx    a,@dptr
1F2E C0E0      6545            push    acc
1F30 A3        6546            inc     dptr
1F31 E0        6547            movx    a,@dptr
1F32 C0E0      6548            push    acc
1F34 A3        6549            inc     dptr
1F35 E0        6550            movx    a,@dptr
1F36 C0E0      6551            push    acc
1F38 8982      6552            mov     dpl,r1
1F3A 8883      6553            mov     dph,r0
1F3C 8CF0      6554            mov     b,r4
1F3E ED        6555            mov     a,r5
1F3F 120000    6556            lcall   ___fsmul
1F42 AC82      6557            mov     r4,dpl
1F44 AD83      6558            mov     r5,dph
1F46 A8F0      6559            mov     r0,b
1F48 F9        6560            mov     r1,a
1F49 E581      6561            mov     a,sp
1F4B 24FC      6562            add     a,#0xfc
1F4D F581      6563            mov     sp,a
1F4F 8C82      6564            mov     dpl,r4
1F51 8D83      6565            mov     dph,r5
1F53 88F0      6566            mov     b,r0
1F55 E9        6567            mov     a,r1
1F56 120000    6568            lcall   ___fs2uchar
1F59 8582A0    6569            mov     _Joystick_Control_sloc1_1_0,dpl
1F5C D007      6570            pop     ar7
1F5E D006      6571            pop     ar6
1F60 D003      6572            pop     ar3
1F62 D002      6573            pop     ar2
1F64 9058A8    6574            mov     dptr,#_pwm_right
1F67 E5A0      6575            mov     a,_Joystick_Control_sloc1_1_0
1F69 F0        6576            movx    @dptr,a
1F6A           6577   ;        main.c:1261: if (vy_err > 0){ //move forward
1F6A C3        6578            clr     c
1F6B E4        6579            clr     a
1F6C 9550      6580            subb    a,_Joystick_Control_sloc0_1_0
1F6E E4        6581            clr     a
1F6F 6480      6582            xrl     a,#0x80
1F71 8551F0    6583            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
1F74 63F080    6584            xrl     b,#0x80
1F77 95F0      6585            subb    a,b
1F79 5000      6586            jnc     L044002?
1F7B           6587   ;        main.c:1262: L_motor_dir = 0; 
1F7B 905868    6588            mov     dptr,#_L_motor_dir
1F7E           6589   ;        main.c:1263: R_motor_dir = 0; 
1F7E E4        6590            clr     a
1F7F F0        6591            movx    @dptr,a
1F80 905828    6592            mov     dptr,#_R_motor_dir
1F83 F0        6593            movx    @dptr,a
1F84 8000      6594            sjmp    L044005?
1F86           6595   L044002?:
1F86           6596   ;        main.c:1266: L_motor_dir = 1; 
1F86 905868    6597            mov     dptr,#_L_motor_dir
1F89 7401      6598            mov     a,#0x01
1F8B F0        6599            movx    @dptr,a
1F8C           6600   ;        main.c:1267: R_motor_dir = 1; 
1F8C 905828    6601            mov     dptr,#_R_motor_dir
1F8F 7401      6602            mov     a,#0x01
1F91 F0        6603            movx    @dptr,a
1F92           6604   ;        main.c:1268: pwm_right *= 1.05;
1F92 85A082    6605            mov     dpl,_Joystick_Control_sloc1_1_0
1F95 C002      6606            push    ar2
1F97 C003      6607            push    ar3
1F99 C006      6608            push    ar6
1F9B C007      6609            push    ar7
1F9D 120000    6610            lcall   ___uchar2fs
1FA0 AC82      6611            mov     r4,dpl
1FA2 AD83      6612            mov     r5,dph
1FA4 A9F0      6613            mov     r1,b
1FA6 F8        6614            mov     r0,a
1FA7 C004      6615            push    ar4
1FA9 C005      6616            push    ar5
1FAB C001      6617            push    ar1
1FAD C000      6618            push    ar0
1FAF 906666    6619            mov     dptr,#0x6666
1FB2 75F086    6620            mov     b,#0x86
1FB5 743F      6621            mov     a,#0x3F
1FB7 120000    6622            lcall   ___fsmul
1FBA AC82      6623            mov     r4,dpl
1FBC AD83      6624            mov     r5,dph
1FBE A8F0      6625            mov     r0,b
1FC0 F9        6626            mov     r1,a
1FC1 E581      6627            mov     a,sp
1FC3 24FC      6628            add     a,#0xfc
1FC5 F581      6629            mov     sp,a
1FC7 8C82      6630            mov     dpl,r4
1FC9 8D83      6631            mov     dph,r5
1FCB 88F0      6632            mov     b,r0
1FCD E9        6633            mov     a,r1
1FCE 120000    6634            lcall   ___fs2uchar
1FD1 E582      6635            mov     a,dpl
1FD3 D007      6636            pop     ar7
1FD5 D006      6637            pop     ar6
1FD7 D003      6638            pop     ar3
1FD9 D002      6639            pop     ar2
1FDB 9058A8    6640            mov     dptr,#_pwm_right
1FDE F0        6641            movx    @dptr,a
1FDF           6642   ;        main.c:1351: return curr_angle; 
1FDF           6643   ;        main.c:1268: pwm_right *= 1.05;
1FDF           6644   L044005?:
1FDF           6645   ;        main.c:1271: if ((vx_error>5)&&(vy_error<5)){
1FDF 90DA50    6646            mov     dptr,#_Joystick_Control_vx_error_1_242
1FE2 E0        6647            movx    a,@dptr
1FE3 FC        6648            mov     r4,a
1FE4 A3        6649            inc     dptr
1FE5 E0        6650            movx    a,@dptr
1FE6 FD        6651            mov     r5,a
1FE7 C3        6652            clr     c
1FE8 7405      6653            mov     a,#0x05
1FEA 9C        6654            subb    a,r4
1FEB E4        6655            clr     a
1FEC 6480      6656            xrl     a,#0x80
1FEE 8DF0      6657            mov     b,r5
1FF0 63F080    6658            xrl     b,#0x80
1FF3 95F0      6659            subb    a,b
1FF5 E4        6660            clr     a
1FF6 33        6661            rlc     a
1FF7 F9        6662            mov     r1,a
1FF8 7000      6663            jnz     L044065?
1FFA 020000    6664            ljmp    L044015?
1FFD           6665   L044065?:
1FFD C3        6666            clr     c
1FFE EA        6667            mov     a,r2
1FFF 9405      6668            subb    a,#0x05
2001 EB        6669            mov     a,r3
2002 6480      6670            xrl     a,#0x80
2004 9480      6671            subb    a,#0x80
2006 4000      6672            jc      L044066?
2008 020000    6673            ljmp    L044015?
200B           6674   L044066?:
200B           6675   ;        main.c:1272: pwm_left = vx_error; 
200B C001      6676            push    ar1
200D 9058E8    6677            mov     dptr,#_pwm_left
2010 EC        6678            mov     a,r4
2011 F0        6679            movx    @dptr,a
2012           6680   ;        main.c:1273: pwm_right = vx_error * pwm_corr; 
2012 8C82      6681            mov     dpl,r4
2014 8D83      6682            mov     dph,r5
2016 C004      6683            push    ar4
2018 C005      6684            push    ar5
201A C006      6685            push    ar6
201C C007      6686            push    ar7
201E 120000    6687            lcall   ___sint2fs
2021 AA82      6688            mov     r2,dpl
2023 AB83      6689            mov     r3,dph
2025 A9F0      6690            mov     r1,b
2027 F8        6691            mov     r0,a
2028 905598    6692            mov     dptr,#_pwm_corr
202B E0        6693            movx    a,@dptr
202C C0E0      6694            push    acc
202E A3        6695            inc     dptr
202F E0        6696            movx    a,@dptr
2030 C0E0      6697            push    acc
2032 A3        6698            inc     dptr
2033 E0        6699            movx    a,@dptr
2034 C0E0      6700            push    acc
2036 A3        6701            inc     dptr
2037 E0        6702            movx    a,@dptr
2038 C0E0      6703            push    acc
203A 8A82      6704            mov     dpl,r2
203C 8B83      6705            mov     dph,r3
203E 89F0      6706            mov     b,r1
2040 E8        6707            mov     a,r0
2041 120000    6708            lcall   ___fsmul
2044 AA82      6709            mov     r2,dpl
2046 AB83      6710            mov     r3,dph
2048 A8F0      6711            mov     r0,b
204A F9        6712            mov     r1,a
204B E581      6713            mov     a,sp
204D 24FC      6714            add     a,#0xfc
204F F581      6715            mov     sp,a
2051 8A82      6716            mov     dpl,r2
2053 8B83      6717            mov     dph,r3
2055 88F0      6718            mov     b,r0
2057 E9        6719            mov     a,r1
2058 C001      6720            push    ar1
205A 120000    6721            lcall   ___fs2uchar
205D E582      6722            mov     a,dpl
205F D001      6723            pop     ar1
2061 D007      6724            pop     ar7
2063 D006      6725            pop     ar6
2065 D005      6726            pop     ar5
2067 D004      6727            pop     ar4
2069 9058A8    6728            mov     dptr,#_pwm_right
206C F0        6729            movx    @dptr,a
206D           6730   ;        main.c:1274: if (vx_err > 0){ //turn right
206D C3        6731            clr     c
206E E4        6732            clr     a
206F 9E        6733            subb    a,r6
2070 E4        6734            clr     a
2071 6480      6735            xrl     a,#0x80
2073 8FF0      6736            mov     b,r7
2075 63F080    6737            xrl     b,#0x80
2078 95F0      6738            subb    a,b
207A D001      6739            pop     ar1
207C 4000      6740            jc      L044067?
207E 020000    6741            ljmp    L044008?
2081           6742   L044067?:
2081           6743   ;        main.c:1275: L_motor_dir = 1; 
2081 C001      6744            push    ar1
2083 905868    6745            mov     dptr,#_L_motor_dir
2086 7401      6746            mov     a,#0x01
2088 F0        6747            movx    @dptr,a
2089           6748   ;        main.c:1276: R_motor_dir = 0;
2089 905828    6749            mov     dptr,#_R_motor_dir
208C E4        6750            clr     a
208D F0        6751            movx    @dptr,a
208E           6752   ;        main.c:1277: curr_angle += angle_diff * 1.45; // TUNE THIS
208E C004      6753            push    ar4
2090 C005      6754            push    ar5
2092 C001      6755            push    ar1
2094 905498    6756            mov     dptr,#_angle_diff
2097 E0        6757            movx    a,@dptr
2098 C0E0      6758            push    acc
209A A3        6759            inc     dptr
209B E0        6760            movx    a,@dptr
209C C0E0      6761            push    acc
209E A3        6762            inc     dptr
209F E0        6763            movx    a,@dptr
20A0 C0E0      6764            push    acc
20A2 A3        6765            inc     dptr
20A3 E0        6766            movx    a,@dptr
20A4 C0E0      6767            push    acc
20A6 90999A    6768            mov     dptr,#0x999A
20A9 75F0B9    6769            mov     b,#0xB9
20AC 743F      6770            mov     a,#0x3F
20AE 120000    6771            lcall   ___fsmul
20B1 858240    6772            mov     _Joystick_Control_sloc3_1_0,dpl
20B4 858341    6773            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
20B7 85F042    6774            mov     (_Joystick_Control_sloc3_1_0 + 2),b
20BA F543      6775            mov     (_Joystick_Control_sloc3_1_0 + 3),a
20BC E581      6776            mov     a,sp
20BE 24FC      6777            add     a,#0xfc
20C0 F581      6778            mov     sp,a
20C2 D001      6779            pop     ar1
20C4 905558    6780            mov     dptr,#_curr_angle
20C7 E0        6781            movx    a,@dptr
20C8 F8        6782            mov     r0,a
20C9 A3        6783            inc     dptr
20CA E0        6784            movx    a,@dptr
20CB F9        6785            mov     r1,a
20CC A3        6786            inc     dptr
20CD E0        6787            movx    a,@dptr
20CE FA        6788            mov     r2,a
20CF A3        6789            inc     dptr
20D0 E0        6790            movx    a,@dptr
20D1 FB        6791            mov     r3,a
20D2 C001      6792            push    ar1
20D4 C040      6793            push    _Joystick_Control_sloc3_1_0
20D6 C041      6794            push    (_Joystick_Control_sloc3_1_0 + 1)
20D8 C042      6795            push    (_Joystick_Control_sloc3_1_0 + 2)
20DA C043      6796            push    (_Joystick_Control_sloc3_1_0 + 3)
20DC 8882      6797            mov     dpl,r0
20DE 8983      6798            mov     dph,r1
20E0 8AF0      6799            mov     b,r2
20E2 EB        6800            mov     a,r3
20E3 120000    6801            lcall   ___fsadd
20E6 AA82      6802            mov     r2,dpl
20E8 AB83      6803            mov     r3,dph
20EA AEF0      6804            mov     r6,b
20EC FF        6805            mov     r7,a
20ED E581      6806            mov     a,sp
20EF 24FC      6807            add     a,#0xfc
20F1 F581      6808            mov     sp,a
20F3 D001      6809            pop     ar1
20F5 D005      6810            pop     ar5
20F7 D004      6811            pop     ar4
20F9 905558    6812            mov     dptr,#_curr_angle
20FC EA        6813            mov     a,r2
20FD F0        6814            movx    @dptr,a
20FE A3        6815            inc     dptr
20FF EB        6816            mov     a,r3
2100 F0        6817            movx    @dptr,a
2101 A3        6818            inc     dptr
2102 EE        6819            mov     a,r6
2103 F0        6820            movx    @dptr,a
2104 A3        6821            inc     dptr
2105 EF        6822            mov     a,r7
2106 F0        6823            movx    @dptr,a
2107 D001      6824            pop     ar1
2109 020000    6825            ljmp    L044009?
210C           6826   L044008?:
210C           6827   ;        main.c:1280: L_motor_dir = 0; 
210C C001      6828            push    ar1
210E 905868    6829            mov     dptr,#_L_motor_dir
2111 E4        6830            clr     a
2112 F0        6831            movx    @dptr,a
2113           6832   ;        main.c:1281: R_motor_dir = 1; 
2113 905828    6833            mov     dptr,#_R_motor_dir
2116 7401      6834            mov     a,#0x01
2118 F0        6835            movx    @dptr,a
2119           6836   ;        main.c:1282: curr_angle -= angle_diff * 1.4; // TUNE THIS
2119 C004      6837            push    ar4
211B C005      6838            push    ar5
211D C001      6839            push    ar1
211F 905498    6840            mov     dptr,#_angle_diff
2122 E0        6841            movx    a,@dptr
2123 C0E0      6842            push    acc
2125 A3        6843            inc     dptr
2126 E0        6844            movx    a,@dptr
2127 C0E0      6845            push    acc
2129 A3        6846            inc     dptr
212A E0        6847            movx    a,@dptr
212B C0E0      6848            push    acc
212D A3        6849            inc     dptr
212E E0        6850            movx    a,@dptr
212F C0E0      6851            push    acc
2131 903333    6852            mov     dptr,#0x3333
2134 75F0B3    6853            mov     b,#0xB3
2137 743F      6854            mov     a,#0x3F
2139 120000    6855            lcall   ___fsmul
213C 858240    6856            mov     _Joystick_Control_sloc3_1_0,dpl
213F 858341    6857            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
2142 85F042    6858            mov     (_Joystick_Control_sloc3_1_0 + 2),b
2145 F543      6859            mov     (_Joystick_Control_sloc3_1_0 + 3),a
2147 E581      6860            mov     a,sp
2149 24FC      6861            add     a,#0xfc
214B F581      6862            mov     sp,a
214D D001      6863            pop     ar1
214F 905558    6864            mov     dptr,#_curr_angle
2152 E0        6865            movx    a,@dptr
2153 F8        6866            mov     r0,a
2154 A3        6867            inc     dptr
2155 E0        6868            movx    a,@dptr
2156 F9        6869            mov     r1,a
2157 A3        6870            inc     dptr
2158 E0        6871            movx    a,@dptr
2159 FA        6872            mov     r2,a
215A A3        6873            inc     dptr
215B E0        6874            movx    a,@dptr
215C FB        6875            mov     r3,a
215D C001      6876            push    ar1
215F C040      6877            push    _Joystick_Control_sloc3_1_0
2161 C041      6878            push    (_Joystick_Control_sloc3_1_0 + 1)
2163 C042      6879            push    (_Joystick_Control_sloc3_1_0 + 2)
2165 C043      6880            push    (_Joystick_Control_sloc3_1_0 + 3)
2167 8882      6881            mov     dpl,r0
2169 8983      6882            mov     dph,r1
216B 8AF0      6883            mov     b,r2
216D EB        6884            mov     a,r3
216E 120000    6885            lcall   ___fssub
2171 AA82      6886            mov     r2,dpl
2173 AB83      6887            mov     r3,dph
2175 AEF0      6888            mov     r6,b
2177 FF        6889            mov     r7,a
2178 E581      6890            mov     a,sp
217A 24FC      6891            add     a,#0xfc
217C F581      6892            mov     sp,a
217E D001      6893            pop     ar1
2180 D005      6894            pop     ar5
2182 D004      6895            pop     ar4
2184 905558    6896            mov     dptr,#_curr_angle
2187 EA        6897            mov     a,r2
2188 F0        6898            movx    @dptr,a
2189 A3        6899            inc     dptr
218A EB        6900            mov     a,r3
218B F0        6901            movx    @dptr,a
218C A3        6902            inc     dptr
218D EE        6903            mov     a,r6
218E F0        6904            movx    @dptr,a
218F A3        6905            inc     dptr
2190 EF        6906            mov     a,r7
2191 F0        6907            movx    @dptr,a
2192           6908   ;        main.c:1351: return curr_angle; 
2192 D001      6909            pop     ar1
2194           6910   ;        main.c:1282: curr_angle -= angle_diff * 1.4; // TUNE THIS
2194           6911   L044009?:
2194           6912   ;        main.c:1284: if (curr_angle > 360.0) curr_angle -= 360.0; 
2194 905558    6913            mov     dptr,#_curr_angle
2197 E0        6914            movx    a,@dptr
2198 FA        6915            mov     r2,a
2199 A3        6916            inc     dptr
219A E0        6917            movx    a,@dptr
219B FB        6918            mov     r3,a
219C A3        6919            inc     dptr
219D E0        6920            movx    a,@dptr
219E FE        6921            mov     r6,a
219F A3        6922            inc     dptr
21A0 E0        6923            movx    a,@dptr
21A1 FF        6924            mov     r7,a
21A2 C002      6925            push    ar2
21A4 C003      6926            push    ar3
21A6 C004      6927            push    ar4
21A8 C005      6928            push    ar5
21AA C006      6929            push    ar6
21AC C007      6930            push    ar7
21AE C001      6931            push    ar1
21B0 E4        6932            clr     a
21B1 C0E0      6933            push    acc
21B3 C0E0      6934            push    acc
21B5 74B4      6935            mov     a,#0xB4
21B7 C0E0      6936            push    acc
21B9 7443      6937            mov     a,#0x43
21BB C0E0      6938            push    acc
21BD 8A82      6939            mov     dpl,r2
21BF 8B83      6940            mov     dph,r3
21C1 8EF0      6941            mov     b,r6
21C3 EF        6942            mov     a,r7
21C4 120000    6943            lcall   ___fsgt
21C7 A882      6944            mov     r0,dpl
21C9 E581      6945            mov     a,sp
21CB 24FC      6946            add     a,#0xfc
21CD F581      6947            mov     sp,a
21CF D001      6948            pop     ar1
21D1 D007      6949            pop     ar7
21D3 D006      6950            pop     ar6
21D5 D005      6951            pop     ar5
21D7 D004      6952            pop     ar4
21D9 D003      6953            pop     ar3
21DB D002      6954            pop     ar2
21DD E8        6955            mov     a,r0
21DE 6000      6956            jz      L044011?
21E0 C004      6957            push    ar4
21E2 C005      6958            push    ar5
21E4 C001      6959            push    ar1
21E6 E4        6960            clr     a
21E7 C0E0      6961            push    acc
21E9 C0E0      6962            push    acc
21EB 74B4      6963            mov     a,#0xB4
21ED C0E0      6964            push    acc
21EF 7443      6965            mov     a,#0x43
21F1 C0E0      6966            push    acc
21F3 8A82      6967            mov     dpl,r2
21F5 8B83      6968            mov     dph,r3
21F7 8EF0      6969            mov     b,r6
21F9 EF        6970            mov     a,r7
21FA 120000    6971            lcall   ___fssub
21FD AA82      6972            mov     r2,dpl
21FF AB83      6973            mov     r3,dph
2201 AEF0      6974            mov     r6,b
2203 FF        6975            mov     r7,a
2204 E581      6976            mov     a,sp
2206 24FC      6977            add     a,#0xfc
2208 F581      6978            mov     sp,a
220A D001      6979            pop     ar1
220C D005      6980            pop     ar5
220E D004      6981            pop     ar4
2210 905558    6982            mov     dptr,#_curr_angle
2213 EA        6983            mov     a,r2
2214 F0        6984            movx    @dptr,a
2215 A3        6985            inc     dptr
2216 EB        6986            mov     a,r3
2217 F0        6987            movx    @dptr,a
2218 A3        6988            inc     dptr
2219 EE        6989            mov     a,r6
221A F0        6990            movx    @dptr,a
221B A3        6991            inc     dptr
221C EF        6992            mov     a,r7
221D F0        6993            movx    @dptr,a
221E           6994   L044011?:
221E           6995   ;        main.c:1285: if (curr_angle < 0.0) curr_angle += 360.0; 
221E 905558    6996            mov     dptr,#_curr_angle
2221 E0        6997            movx    a,@dptr
2222 FA        6998            mov     r2,a
2223 A3        6999            inc     dptr
2224 E0        7000            movx    a,@dptr
2225 FB        7001            mov     r3,a
2226 A3        7002            inc     dptr
2227 E0        7003            movx    a,@dptr
2228 FE        7004            mov     r6,a
2229 A3        7005            inc     dptr
222A E0        7006            movx    a,@dptr
222B FF        7007            mov     r7,a
222C C002      7008            push    ar2
222E C003      7009            push    ar3
2230 C004      7010            push    ar4
2232 C005      7011            push    ar5
2234 C006      7012            push    ar6
2236 C007      7013            push    ar7
2238 C001      7014            push    ar1
223A E4        7015            clr     a
223B C0E0      7016            push    acc
223D C0E0      7017            push    acc
223F C0E0      7018            push    acc
2241 C0E0      7019            push    acc
2243 8A82      7020            mov     dpl,r2
2245 8B83      7021            mov     dph,r3
2247 8EF0      7022            mov     b,r6
2249 EF        7023            mov     a,r7
224A 120000    7024            lcall   ___fslt
224D A882      7025            mov     r0,dpl
224F E581      7026            mov     a,sp
2251 24FC      7027            add     a,#0xfc
2253 F581      7028            mov     sp,a
2255 D001      7029            pop     ar1
2257 D007      7030            pop     ar7
2259 D006      7031            pop     ar6
225B D005      7032            pop     ar5
225D D004      7033            pop     ar4
225F D003      7034            pop     ar3
2261 D002      7035            pop     ar2
2263 E8        7036            mov     a,r0
2264 6000      7037            jz      L044015?
2266 C004      7038            push    ar4
2268 C005      7039            push    ar5
226A C001      7040            push    ar1
226C E4        7041            clr     a
226D C0E0      7042            push    acc
226F C0E0      7043            push    acc
2271 74B4      7044            mov     a,#0xB4
2273 C0E0      7045            push    acc
2275 7443      7046            mov     a,#0x43
2277 C0E0      7047            push    acc
2279 8A82      7048            mov     dpl,r2
227B 8B83      7049            mov     dph,r3
227D 8EF0      7050            mov     b,r6
227F EF        7051            mov     a,r7
2280 120000    7052            lcall   ___fsadd
2283 AA82      7053            mov     r2,dpl
2285 AB83      7054            mov     r3,dph
2287 AEF0      7055            mov     r6,b
2289 FF        7056            mov     r7,a
228A E581      7057            mov     a,sp
228C 24FC      7058            add     a,#0xfc
228E F581      7059            mov     sp,a
2290 D001      7060            pop     ar1
2292 D005      7061            pop     ar5
2294 D004      7062            pop     ar4
2296 905558    7063            mov     dptr,#_curr_angle
2299 EA        7064            mov     a,r2
229A F0        7065            movx    @dptr,a
229B A3        7066            inc     dptr
229C EB        7067            mov     a,r3
229D F0        7068            movx    @dptr,a
229E A3        7069            inc     dptr
229F EE        7070            mov     a,r6
22A0 F0        7071            movx    @dptr,a
22A1 A3        7072            inc     dptr
22A2 EF        7073            mov     a,r7
22A3 F0        7074            movx    @dptr,a
22A4           7075   L044015?:
22A4           7076   ;        main.c:1287: if ((vx_error>5)&&(vy_error)>5){
22A4 E9        7077            mov     a,r1
22A5 7000      7078            jnz     L044070?
22A7 020000    7079            ljmp    L044040?
22AA           7080   L044070?:
22AA E5F0      7081            mov     a,_Joystick_Control_sloc2_1_0
22AC 7000      7082            jnz     L044071?
22AE 020000    7083            ljmp    L044040?
22B1           7084   L044071?:
22B1           7085   ;        main.c:1289: angle_diff = fabsf(raw_angle - last_raw_angle);
22B1 905518    7086            mov     dptr,#_raw_angle
22B4 E0        7087            movx    a,@dptr
22B5 FA        7088            mov     r2,a
22B6 A3        7089            inc     dptr
22B7 E0        7090            movx    a,@dptr
22B8 FB        7091            mov     r3,a
22B9 A3        7092            inc     dptr
22BA E0        7093            movx    a,@dptr
22BB FE        7094            mov     r6,a
22BC A3        7095            inc     dptr
22BD E0        7096            movx    a,@dptr
22BE FF        7097            mov     r7,a
22BF C004      7098            push    ar4
22C1 C005      7099            push    ar5
22C3 9054D8    7100            mov     dptr,#_last_raw_angle
22C6 E0        7101            movx    a,@dptr
22C7 C0E0      7102            push    acc
22C9 A3        7103            inc     dptr
22CA E0        7104            movx    a,@dptr
22CB C0E0      7105            push    acc
22CD A3        7106            inc     dptr
22CE E0        7107            movx    a,@dptr
22CF C0E0      7108            push    acc
22D1 A3        7109            inc     dptr
22D2 E0        7110            movx    a,@dptr
22D3 C0E0      7111            push    acc
22D5 8A82      7112            mov     dpl,r2
22D7 8B83      7113            mov     dph,r3
22D9 8EF0      7114            mov     b,r6
22DB EF        7115            mov     a,r7
22DC 120000    7116            lcall   ___fssub
22DF AA82      7117            mov     r2,dpl
22E1 AB83      7118            mov     r3,dph
22E3 AEF0      7119            mov     r6,b
22E5 FF        7120            mov     r7,a
22E6 E581      7121            mov     a,sp
22E8 24FC      7122            add     a,#0xfc
22EA F581      7123            mov     sp,a
22EC 8A82      7124            mov     dpl,r2
22EE 8B83      7125            mov     dph,r3
22F0 8EF0      7126            mov     b,r6
22F2 EF        7127            mov     a,r7
22F3 120000    7128            lcall   _fabsf
22F6 858290    7129            mov     _Joystick_Control_sloc4_1_0,dpl
22F9 858391    7130            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
22FC 85F092    7131            mov     (_Joystick_Control_sloc4_1_0 + 2),b
22FF F593      7132            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2301 D005      7133            pop     ar5
2303 D004      7134            pop     ar4
2305 905498    7135            mov     dptr,#_angle_diff
2308 E590      7136            mov     a,_Joystick_Control_sloc4_1_0
230A F0        7137            movx    @dptr,a
230B A3        7138            inc     dptr
230C E591      7139            mov     a,(_Joystick_Control_sloc4_1_0 + 1)
230E F0        7140            movx    @dptr,a
230F A3        7141            inc     dptr
2310 E592      7142            mov     a,(_Joystick_Control_sloc4_1_0 + 2)
2312 F0        7143            movx    @dptr,a
2313 A3        7144            inc     dptr
2314 E593      7145            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
2316 F0        7146            movx    @dptr,a
2317           7147   ;        main.c:1290: if (vy_err>0){
2317 90DB50    7148            mov     dptr,#_Joystick_Control_vy_err_1_242
231A E0        7149            movx    a,@dptr
231B F8        7150            mov     r0,a
231C A3        7151            inc     dptr
231D E0        7152            movx    a,@dptr
231E F9        7153            mov     r1,a
231F C3        7154            clr     c
2320 E4        7155            clr     a
2321 98        7156            subb    a,r0
2322 E4        7157            clr     a
2323 6480      7158            xrl     a,#0x80
2325 89F0      7159            mov     b,r1
2327 63F080    7160            xrl     b,#0x80
232A 95F0      7161            subb    a,b
232C 4000      7162            jc      L044072?
232E 020000    7163            ljmp    L044027?
2331           7164   L044072?:
2331           7165   ;        main.c:1291: L_motor_dir = 0; 
2331 C000      7166            push    ar0
2333 C001      7167            push    ar1
2335 905868    7168            mov     dptr,#_L_motor_dir
2338           7169   ;        main.c:1292: R_motor_dir = 0; 
2338 E4        7170            clr     a
2339 F0        7171            movx    @dptr,a
233A 905828    7172            mov     dptr,#_R_motor_dir
233D F0        7173            movx    @dptr,a
233E           7174   ;        main.c:1294: if (vx_err>0){
233E 90DB00    7175            mov     dptr,#_Joystick_Control_vx_err_1_242
2341 E0        7176            movx    a,@dptr
2342 F8        7177            mov     r0,a
2343 A3        7178            inc     dptr
2344 E0        7179            movx    a,@dptr
2345 F9        7180            mov     r1,a
2346 C3        7181            clr     c
2347 E4        7182            clr     a
2348 98        7183            subb    a,r0
2349 E4        7184            clr     a
234A 6480      7185            xrl     a,#0x80
234C 89F0      7186            mov     b,r1
234E 63F080    7187            xrl     b,#0x80
2351 95F0      7188            subb    a,b
2353 D001      7189            pop     ar1
2355 D000      7190            pop     ar0
2357 4000      7191            jc      L044073?
2359 020000    7192            ljmp    L044024?
235C           7193   L044073?:
235C           7194   ;        main.c:1296: if (vy*100<=vy_thres*100/2){
235C C000      7195            push    ar0
235E C001      7196            push    ar1
2360 9056A8    7197            mov     dptr,#_vy
2363 E0        7198            movx    a,@dptr
2364 F500      7199            mov     __mulint_PARM_2,a
2366 A3        7200            inc     dptr
2367 E0        7201            movx    a,@dptr
2368 F501      7202            mov     (__mulint_PARM_2 + 1),a
236A 900064    7203            mov     dptr,#0x0064
236D C004      7204            push    ar4
236F C005      7205            push    ar5
2371 C000      7206            push    ar0
2373 C001      7207            push    ar1
2375 120000    7208            lcall   __mulint
2378 858240    7209            mov     _Joystick_Control_sloc3_1_0,dpl
237B 858341    7210            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
237E D001      7211            pop     ar1
2380 D000      7212            pop     ar0
2382 905728    7213            mov     dptr,#_vy_thres
2385 E0        7214            movx    a,@dptr
2386 F500      7215            mov     __mulint_PARM_2,a
2388 A3        7216            inc     dptr
2389 E0        7217            movx    a,@dptr
238A F501      7218            mov     (__mulint_PARM_2 + 1),a
238C 900064    7219            mov     dptr,#0x0064
238F 120000    7220            lcall   __mulint
2392 A882      7221            mov     r0,dpl
2394 A983      7222            mov     r1,dph
2396 750002    7223            mov     __divsint_PARM_2,#0x02
2399 E4        7224            clr     a
239A F501      7225            mov     (__divsint_PARM_2 + 1),a
239C 8882      7226            mov     dpl,r0
239E 8983      7227            mov     dph,r1
23A0 120000    7228            lcall   __divsint
23A3 A882      7229            mov     r0,dpl
23A5 A983      7230            mov     r1,dph
23A7 D005      7231            pop     ar5
23A9 D004      7232            pop     ar4
23AB C3        7233            clr     c
23AC E8        7234            mov     a,r0
23AD 9540      7235            subb    a,_Joystick_Control_sloc3_1_0
23AF E9        7236            mov     a,r1
23B0 6480      7237            xrl     a,#0x80
23B2 8541F0    7238            mov     b,(_Joystick_Control_sloc3_1_0 + 1)
23B5 63F080    7239            xrl     b,#0x80
23B8 95F0      7240            subb    a,b
23BA D001      7241            pop     ar1
23BC D000      7242            pop     ar0
23BE 5000      7243            jnc     L044074?
23C0 020000    7244            ljmp    L044018?
23C3           7245   L044074?:
23C3           7246   ;        main.c:1297: pwm_left = vy_error; 
23C3 C000      7247            push    ar0
23C5 C001      7248            push    ar1
23C7 90DAB0    7249            mov     dptr,#_Joystick_Control_vy_error_1_242
23CA E0        7250            movx    a,@dptr
23CB F540      7251            mov     _Joystick_Control_sloc3_1_0,a
23CD A3        7252            inc     dptr
23CE E0        7253            movx    a,@dptr
23CF F541      7254            mov     (_Joystick_Control_sloc3_1_0 + 1),a
23D1 9058E8    7255            mov     dptr,#_pwm_left
23D4 E540      7256            mov     a,_Joystick_Control_sloc3_1_0
23D6 F0        7257            movx    @dptr,a
23D7           7258   ;        main.c:1298: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
23D7 905598    7259            mov     dptr,#_pwm_corr
23DA E0        7260            movx    a,@dptr
23DB F5E0      7261            mov     _Joystick_Control_sloc5_1_0,a
23DD A3        7262            inc     dptr
23DE E0        7263            movx    a,@dptr
23DF F5E1      7264            mov     (_Joystick_Control_sloc5_1_0 + 1),a
23E1 A3        7265            inc     dptr
23E2 E0        7266            movx    a,@dptr
23E3 F5E2      7267            mov     (_Joystick_Control_sloc5_1_0 + 2),a
23E5 A3        7268            inc     dptr
23E6 E0        7269            movx    a,@dptr
23E7 F5E3      7270            mov     (_Joystick_Control_sloc5_1_0 + 3),a
23E9 854082    7271            mov     dpl,_Joystick_Control_sloc3_1_0
23EC 854183    7272            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
23EF C004      7273            push    ar4
23F1 C005      7274            push    ar5
23F3 C000      7275            push    ar0
23F5 C001      7276            push    ar1
23F7 120000    7277            lcall   ___sint2fs
23FA AE82      7278            mov     r6,dpl
23FC AF83      7279            mov     r7,dph
23FE AAF0      7280            mov     r2,b
2400 FB        7281            mov     r3,a
2401 C006      7282            push    ar6
2403 C007      7283            push    ar7
2405 C002      7284            push    ar2
2407 C003      7285            push    ar3
2409 85E082    7286            mov     dpl,_Joystick_Control_sloc5_1_0
240C 85E183    7287            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
240F 85E2F0    7288            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2412 E5E3      7289            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2414 120000    7290            lcall   ___fsmul
2417 AA82      7291            mov     r2,dpl
2419 AB83      7292            mov     r3,dph
241B AEF0      7293            mov     r6,b
241D FF        7294            mov     r7,a
241E E581      7295            mov     a,sp
2420 24FC      7296            add     a,#0xfc
2422 F581      7297            mov     sp,a
2424 C002      7298            push    ar2
2426 C003      7299            push    ar3
2428 C006      7300            push    ar6
242A C007      7301            push    ar7
242C 900000    7302            mov     dptr,#0x0000
242F 75F0C8    7303            mov     b,#0xC8
2432 7442      7304            mov     a,#0x42
2434 120000    7305            lcall   ___fsmul
2437 8582E0    7306            mov     _Joystick_Control_sloc5_1_0,dpl
243A 8583E1    7307            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
243D 85F0E2    7308            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2440 F5E3      7309            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2442 E581      7310            mov     a,sp
2444 24FC      7311            add     a,#0xfc
2446 F581      7312            mov     sp,a
2448 D001      7313            pop     ar1
244A D000      7314            pop     ar0
244C D005      7315            pop     ar5
244E D004      7316            pop     ar4
2450 E540      7317            mov     a,_Joystick_Control_sloc3_1_0
2452 2C        7318            add     a,r4
2453 F582      7319            mov     dpl,a
2455 E541      7320            mov     a,(_Joystick_Control_sloc3_1_0 + 1)
2457 3D        7321            addc    a,r5
2458 F583      7322            mov     dph,a
245A C004      7323            push    ar4
245C C005      7324            push    ar5
245E 120000    7325            lcall   ___sint2fs
2461 A882      7326            mov     r0,dpl
2463 A983      7327            mov     r1,dph
2465 AAF0      7328            mov     r2,b
2467 FB        7329            mov     r3,a
2468 C000      7330            push    ar0
246A C001      7331            push    ar1
246C C000      7332            push    ar0
246E C001      7333            push    ar1
2470 C002      7334            push    ar2
2472 C003      7335            push    ar3
2474 85E082    7336            mov     dpl,_Joystick_Control_sloc5_1_0
2477 85E183    7337            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
247A 85E2F0    7338            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
247D E5E3      7339            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
247F 120000    7340            lcall   ___fsdiv
2482 AA82      7341            mov     r2,dpl
2484 AB83      7342            mov     r3,dph
2486 AEF0      7343            mov     r6,b
2488 FF        7344            mov     r7,a
2489 E581      7345            mov     a,sp
248B 24FC      7346            add     a,#0xfc
248D F581      7347            mov     sp,a
248F 8A82      7348            mov     dpl,r2
2491 8B83      7349            mov     dph,r3
2493 8EF0      7350            mov     b,r6
2495 EF        7351            mov     a,r7
2496 120000    7352            lcall   ___fs2uchar
2499 E582      7353            mov     a,dpl
249B D001      7354            pop     ar1
249D D000      7355            pop     ar0
249F D005      7356            pop     ar5
24A1 D004      7357            pop     ar4
24A3 9058A8    7358            mov     dptr,#_pwm_right
24A6 F0        7359            movx    @dptr,a
24A7 D001      7360            pop     ar1
24A9 D000      7361            pop     ar0
24AB 020000    7362            ljmp    L044019?
24AE           7363   L044018?:
24AE           7364   ;        main.c:1301: pwm_left = vx_error; 
24AE C000      7365            push    ar0
24B0 C001      7366            push    ar1
24B2 9058E8    7367            mov     dptr,#_pwm_left
24B5 EC        7368            mov     a,r4
24B6 F0        7369            movx    @dptr,a
24B7           7370   ;        main.c:1302: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
24B7 905598    7371            mov     dptr,#_pwm_corr
24BA E0        7372            movx    a,@dptr
24BB F5E0      7373            mov     _Joystick_Control_sloc5_1_0,a
24BD A3        7374            inc     dptr
24BE E0        7375            movx    a,@dptr
24BF F5E1      7376            mov     (_Joystick_Control_sloc5_1_0 + 1),a
24C1 A3        7377            inc     dptr
24C2 E0        7378            movx    a,@dptr
24C3 F5E2      7379            mov     (_Joystick_Control_sloc5_1_0 + 2),a
24C5 A3        7380            inc     dptr
24C6 E0        7381            movx    a,@dptr
24C7 F5E3      7382            mov     (_Joystick_Control_sloc5_1_0 + 3),a
24C9 8C82      7383            mov     dpl,r4
24CB 8D83      7384            mov     dph,r5
24CD C004      7385            push    ar4
24CF C005      7386            push    ar5
24D1 120000    7387            lcall   ___sint2fs
24D4 A882      7388            mov     r0,dpl
24D6 A983      7389            mov     r1,dph
24D8 AAF0      7390            mov     r2,b
24DA FB        7391            mov     r3,a
24DB C000      7392            push    ar0
24DD C001      7393            push    ar1
24DF C000      7394            push    ar0
24E1 C001      7395            push    ar1
24E3 C002      7396            push    ar2
24E5 C003      7397            push    ar3
24E7 85E082    7398            mov     dpl,_Joystick_Control_sloc5_1_0
24EA 85E183    7399            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
24ED 85E2F0    7400            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
24F0 E5E3      7401            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
24F2 120000    7402            lcall   ___fsmul
24F5 AA82      7403            mov     r2,dpl
24F7 AB83      7404            mov     r3,dph
24F9 AEF0      7405            mov     r6,b
24FB FF        7406            mov     r7,a
24FC E581      7407            mov     a,sp
24FE 24FC      7408            add     a,#0xfc
2500 F581      7409            mov     sp,a
2502 C002      7410            push    ar2
2504 C003      7411            push    ar3
2506 C006      7412            push    ar6
2508 C007      7413            push    ar7
250A 900000    7414            mov     dptr,#0x0000
250D 75F0C8    7415            mov     b,#0xC8
2510 7442      7416            mov     a,#0x42
2512 120000    7417            lcall   ___fsmul
2515 8582E0    7418            mov     _Joystick_Control_sloc5_1_0,dpl
2518 8583E1    7419            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
251B 85F0E2    7420            mov     (_Joystick_Control_sloc5_1_0 + 2),b
251E F5E3      7421            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2520 E581      7422            mov     a,sp
2522 24FC      7423            add     a,#0xfc
2524 F581      7424            mov     sp,a
2526 D001      7425            pop     ar1
2528 D000      7426            pop     ar0
252A D005      7427            pop     ar5
252C D004      7428            pop     ar4
252E 90DAB0    7429            mov     dptr,#_Joystick_Control_vy_error_1_242
2531 E0        7430            movx    a,@dptr
2532 F8        7431            mov     r0,a
2533 A3        7432            inc     dptr
2534 E0        7433            movx    a,@dptr
2535 F9        7434            mov     r1,a
2536 E8        7435            mov     a,r0
2537 2C        7436            add     a,r4
2538 F582      7437            mov     dpl,a
253A E9        7438            mov     a,r1
253B 3D        7439            addc    a,r5
253C F583      7440            mov     dph,a
253E C004      7441            push    ar4
2540 C005      7442            push    ar5
2542 120000    7443            lcall   ___sint2fs
2545 A882      7444            mov     r0,dpl
2547 A983      7445            mov     r1,dph
2549 AAF0      7446            mov     r2,b
254B FB        7447            mov     r3,a
254C C000      7448            push    ar0
254E C001      7449            push    ar1
2550 C000      7450            push    ar0
2552 C001      7451            push    ar1
2554 C002      7452            push    ar2
2556 C003      7453            push    ar3
2558 85E082    7454            mov     dpl,_Joystick_Control_sloc5_1_0
255B 85E183    7455            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
255E 85E2F0    7456            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2561 E5E3      7457            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2563 120000    7458            lcall   ___fsdiv
2566 AA82      7459            mov     r2,dpl
2568 AB83      7460            mov     r3,dph
256A AEF0      7461            mov     r6,b
256C FF        7462            mov     r7,a
256D E581      7463            mov     a,sp
256F 24FC      7464            add     a,#0xfc
2571 F581      7465            mov     sp,a
2573 8A82      7466            mov     dpl,r2
2575 8B83      7467            mov     dph,r3
2577 8EF0      7468            mov     b,r6
2579 EF        7469            mov     a,r7
257A 120000    7470            lcall   ___fs2uchar
257D E582      7471            mov     a,dpl
257F D001      7472            pop     ar1
2581 D000      7473            pop     ar0
2583 D005      7474            pop     ar5
2585 D004      7475            pop     ar4
2587 9058A8    7476            mov     dptr,#_pwm_right
258A F0        7477            movx    @dptr,a
258B           7478   ;        main.c:1351: return curr_angle; 
258B D001      7479            pop     ar1
258D D000      7480            pop     ar0
258F           7481   ;        main.c:1302: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
258F           7482   L044019?:
258F           7483   ;        main.c:1304: curr_angle += angle_diff * 1.5; // TUNE THIS 
258F C000      7484            push    ar0
2591 C001      7485            push    ar1
2593 C004      7486            push    ar4
2595 C005      7487            push    ar5
2597 C000      7488            push    ar0
2599 C001      7489            push    ar1
259B C090      7490            push    _Joystick_Control_sloc4_1_0
259D C091      7491            push    (_Joystick_Control_sloc4_1_0 + 1)
259F C092      7492            push    (_Joystick_Control_sloc4_1_0 + 2)
25A1 C093      7493            push    (_Joystick_Control_sloc4_1_0 + 3)
25A3 900000    7494            mov     dptr,#0x0000
25A6 75F0C0    7495            mov     b,#0xC0
25A9 743F      7496            mov     a,#0x3F
25AB 120000    7497            lcall   ___fsmul
25AE 8582E0    7498            mov     _Joystick_Control_sloc5_1_0,dpl
25B1 8583E1    7499            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
25B4 85F0E2    7500            mov     (_Joystick_Control_sloc5_1_0 + 2),b
25B7 F5E3      7501            mov     (_Joystick_Control_sloc5_1_0 + 3),a
25B9 E581      7502            mov     a,sp
25BB 24FC      7503            add     a,#0xfc
25BD F581      7504            mov     sp,a
25BF D001      7505            pop     ar1
25C1 D000      7506            pop     ar0
25C3 905558    7507            mov     dptr,#_curr_angle
25C6 E0        7508            movx    a,@dptr
25C7 F8        7509            mov     r0,a
25C8 A3        7510            inc     dptr
25C9 E0        7511            movx    a,@dptr
25CA F9        7512            mov     r1,a
25CB A3        7513            inc     dptr
25CC E0        7514            movx    a,@dptr
25CD FA        7515            mov     r2,a
25CE A3        7516            inc     dptr
25CF E0        7517            movx    a,@dptr
25D0 FB        7518            mov     r3,a
25D1 C000      7519            push    ar0
25D3 C001      7520            push    ar1
25D5 C0E0      7521            push    _Joystick_Control_sloc5_1_0
25D7 C0E1      7522            push    (_Joystick_Control_sloc5_1_0 + 1)
25D9 C0E2      7523            push    (_Joystick_Control_sloc5_1_0 + 2)
25DB C0E3      7524            push    (_Joystick_Control_sloc5_1_0 + 3)
25DD 8882      7525            mov     dpl,r0
25DF 8983      7526            mov     dph,r1
25E1 8AF0      7527            mov     b,r2
25E3 EB        7528            mov     a,r3
25E4 120000    7529            lcall   ___fsadd
25E7 AA82      7530            mov     r2,dpl
25E9 AB83      7531            mov     r3,dph
25EB AEF0      7532            mov     r6,b
25ED FF        7533            mov     r7,a
25EE E581      7534            mov     a,sp
25F0 24FC      7535            add     a,#0xfc
25F2 F581      7536            mov     sp,a
25F4 D001      7537            pop     ar1
25F6 D000      7538            pop     ar0
25F8 D005      7539            pop     ar5
25FA D004      7540            pop     ar4
25FC 905558    7541            mov     dptr,#_curr_angle
25FF EA        7542            mov     a,r2
2600 F0        7543            movx    @dptr,a
2601 A3        7544            inc     dptr
2602 EB        7545            mov     a,r3
2603 F0        7546            movx    @dptr,a
2604 A3        7547            inc     dptr
2605 EE        7548            mov     a,r6
2606 F0        7549            movx    @dptr,a
2607 A3        7550            inc     dptr
2608 EF        7551            mov     a,r7
2609 F0        7552            movx    @dptr,a
260A D001      7553            pop     ar1
260C D000      7554            pop     ar0
260E 020000    7555            ljmp    L044027?
2611           7556   L044024?:
2611           7557   ;        main.c:1308: if (vy*100<=vy_thres*100/2){
2611 9056A8    7558            mov     dptr,#_vy
2614 E0        7559            movx    a,@dptr
2615 F500      7560            mov     __mulint_PARM_2,a
2617 A3        7561            inc     dptr
2618 E0        7562            movx    a,@dptr
2619 F501      7563            mov     (__mulint_PARM_2 + 1),a
261B 900064    7564            mov     dptr,#0x0064
261E C004      7565            push    ar4
2620 C005      7566            push    ar5
2622 C000      7567            push    ar0
2624 C001      7568            push    ar1
2626 120000    7569            lcall   __mulint
2629 AA82      7570            mov     r2,dpl
262B AB83      7571            mov     r3,dph
262D D001      7572            pop     ar1
262F D000      7573            pop     ar0
2631 D005      7574            pop     ar5
2633 D004      7575            pop     ar4
2635 905728    7576            mov     dptr,#_vy_thres
2638 E0        7577            movx    a,@dptr
2639 F500      7578            mov     __mulint_PARM_2,a
263B A3        7579            inc     dptr
263C E0        7580            movx    a,@dptr
263D F501      7581            mov     (__mulint_PARM_2 + 1),a
263F 900064    7582            mov     dptr,#0x0064
2642 C002      7583            push    ar2
2644 C003      7584            push    ar3
2646 C004      7585            push    ar4
2648 C005      7586            push    ar5
264A C000      7587            push    ar0
264C C001      7588            push    ar1
264E 120000    7589            lcall   __mulint
2651 AE82      7590            mov     r6,dpl
2653 AF83      7591            mov     r7,dph
2655 750002    7592            mov     __divsint_PARM_2,#0x02
2658 E4        7593            clr     a
2659 F501      7594            mov     (__divsint_PARM_2 + 1),a
265B 8E82      7595            mov     dpl,r6
265D 8F83      7596            mov     dph,r7
265F 120000    7597            lcall   __divsint
2662 AE82      7598            mov     r6,dpl
2664 AF83      7599            mov     r7,dph
2666 D001      7600            pop     ar1
2668 D000      7601            pop     ar0
266A D005      7602            pop     ar5
266C D004      7603            pop     ar4
266E D003      7604            pop     ar3
2670 D002      7605            pop     ar2
2672 C3        7606            clr     c
2673 EE        7607            mov     a,r6
2674 9A        7608            subb    a,r2
2675 EF        7609            mov     a,r7
2676 6480      7610            xrl     a,#0x80
2678 8BF0      7611            mov     b,r3
267A 63F080    7612            xrl     b,#0x80
267D 95F0      7613            subb    a,b
267F 5000      7614            jnc     L044075?
2681 020000    7615            ljmp    L044021?
2684           7616   L044075?:
2684           7617   ;        main.c:1309: pwm_left = vy_error*100/(vx_error+vy_error);
2684 90DAB0    7618            mov     dptr,#_Joystick_Control_vy_error_1_242
2687 E0        7619            movx    a,@dptr
2688 FA        7620            mov     r2,a
2689 A3        7621            inc     dptr
268A E0        7622            movx    a,@dptr
268B FB        7623            mov     r3,a
268C 8A00      7624            mov     __mulint_PARM_2,r2
268E 8B01      7625            mov     (__mulint_PARM_2 + 1),r3
2690 900064    7626            mov     dptr,#0x0064
2693 C002      7627            push    ar2
2695 C003      7628            push    ar3
2697 C004      7629            push    ar4
2699 C005      7630            push    ar5
269B C000      7631            push    ar0
269D C001      7632            push    ar1
269F 120000    7633            lcall   __mulint
26A2 AE82      7634            mov     r6,dpl
26A4 AF83      7635            mov     r7,dph
26A6 D001      7636            pop     ar1
26A8 D000      7637            pop     ar0
26AA D005      7638            pop     ar5
26AC D004      7639            pop     ar4
26AE D003      7640            pop     ar3
26B0 D002      7641            pop     ar2
26B2 EA        7642            mov     a,r2
26B3 2C        7643            add     a,r4
26B4 F500      7644            mov     __divsint_PARM_2,a
26B6 EB        7645            mov     a,r3
26B7 3D        7646            addc    a,r5
26B8 F501      7647            mov     (__divsint_PARM_2 + 1),a
26BA 8E82      7648            mov     dpl,r6
26BC 8F83      7649            mov     dph,r7
26BE C002      7650            push    ar2
26C0 C003      7651            push    ar3
26C2 C004      7652            push    ar4
26C4 C005      7653            push    ar5
26C6 C000      7654            push    ar0
26C8 C001      7655            push    ar1
26CA 120000    7656            lcall   __divsint
26CD AE82      7657            mov     r6,dpl
26CF D001      7658            pop     ar1
26D1 D000      7659            pop     ar0
26D3 D005      7660            pop     ar5
26D5 D004      7661            pop     ar4
26D7 D003      7662            pop     ar3
26D9 D002      7663            pop     ar2
26DB 9058E8    7664            mov     dptr,#_pwm_left
26DE EE        7665            mov     a,r6
26DF F0        7666            movx    @dptr,a
26E0           7667   ;        main.c:1310: pwm_right = vy_error*pwm_corr; 
26E0 8A82      7668            mov     dpl,r2
26E2 8B83      7669            mov     dph,r3
26E4 C004      7670            push    ar4
26E6 C005      7671            push    ar5
26E8 C000      7672            push    ar0
26EA C001      7673            push    ar1
26EC 120000    7674            lcall   ___sint2fs
26EF AA82      7675            mov     r2,dpl
26F1 AB83      7676            mov     r3,dph
26F3 AEF0      7677            mov     r6,b
26F5 FF        7678            mov     r7,a
26F6 905598    7679            mov     dptr,#_pwm_corr
26F9 E0        7680            movx    a,@dptr
26FA C0E0      7681            push    acc
26FC A3        7682            inc     dptr
26FD E0        7683            movx    a,@dptr
26FE C0E0      7684            push    acc
2700 A3        7685            inc     dptr
2701 E0        7686            movx    a,@dptr
2702 C0E0      7687            push    acc
2704 A3        7688            inc     dptr
2705 E0        7689            movx    a,@dptr
2706 C0E0      7690            push    acc
2708 8A82      7691            mov     dpl,r2
270A 8B83      7692            mov     dph,r3
270C 8EF0      7693            mov     b,r6
270E EF        7694            mov     a,r7
270F 120000    7695            lcall   ___fsmul
2712 AA82      7696            mov     r2,dpl
2714 AB83      7697            mov     r3,dph
2716 AEF0      7698            mov     r6,b
2718 FF        7699            mov     r7,a
2719 E581      7700            mov     a,sp
271B 24FC      7701            add     a,#0xfc
271D F581      7702            mov     sp,a
271F 8A82      7703            mov     dpl,r2
2721 8B83      7704            mov     dph,r3
2723 8EF0      7705            mov     b,r6
2725 EF        7706            mov     a,r7
2726 120000    7707            lcall   ___fs2uchar
2729 E582      7708            mov     a,dpl
272B D001      7709            pop     ar1
272D D000      7710            pop     ar0
272F D005      7711            pop     ar5
2731 D004      7712            pop     ar4
2733 9058A8    7713            mov     dptr,#_pwm_right
2736 F0        7714            movx    @dptr,a
2737 020000    7715            ljmp    L044022?
273A           7716   L044021?:
273A           7717   ;        main.c:1313: pwm_left = vx_error*100/(vx_error+vy_error);
273A 8C00      7718            mov     __mulint_PARM_2,r4
273C 8D01      7719            mov     (__mulint_PARM_2 + 1),r5
273E 900064    7720            mov     dptr,#0x0064
2741 C004      7721            push    ar4
2743 C005      7722            push    ar5
2745 C000      7723            push    ar0
2747 C001      7724            push    ar1
2749 120000    7725            lcall   __mulint
274C AA82      7726            mov     r2,dpl
274E AB83      7727            mov     r3,dph
2750 D001      7728            pop     ar1
2752 D000      7729            pop     ar0
2754 D005      7730            pop     ar5
2756 D004      7731            pop     ar4
2758 90DAB0    7732            mov     dptr,#_Joystick_Control_vy_error_1_242
275B E0        7733            movx    a,@dptr
275C FE        7734            mov     r6,a
275D A3        7735            inc     dptr
275E E0        7736            movx    a,@dptr
275F FF        7737            mov     r7,a
2760 EE        7738            mov     a,r6
2761 2C        7739            add     a,r4
2762 F500      7740            mov     __divsint_PARM_2,a
2764 EF        7741            mov     a,r7
2765 3D        7742            addc    a,r5
2766 F501      7743            mov     (__divsint_PARM_2 + 1),a
2768 8A82      7744            mov     dpl,r2
276A 8B83      7745            mov     dph,r3
276C C004      7746            push    ar4
276E C005      7747            push    ar5
2770 C000      7748            push    ar0
2772 C001      7749            push    ar1
2774 120000    7750            lcall   __divsint
2777 AA82      7751            mov     r2,dpl
2779 D001      7752            pop     ar1
277B D000      7753            pop     ar0
277D D005      7754            pop     ar5
277F D004      7755            pop     ar4
2781 9058E8    7756            mov     dptr,#_pwm_left
2784 EA        7757            mov     a,r2
2785 F0        7758            movx    @dptr,a
2786           7759   ;        main.c:1314: pwm_right = vx_error*pwm_corr; 
2786 8C82      7760            mov     dpl,r4
2788 8D83      7761            mov     dph,r5
278A C004      7762            push    ar4
278C C005      7763            push    ar5
278E C000      7764            push    ar0
2790 C001      7765            push    ar1
2792 120000    7766            lcall   ___sint2fs
2795 AA82      7767            mov     r2,dpl
2797 AB83      7768            mov     r3,dph
2799 AEF0      7769            mov     r6,b
279B FF        7770            mov     r7,a
279C 905598    7771            mov     dptr,#_pwm_corr
279F E0        7772            movx    a,@dptr
27A0 C0E0      7773            push    acc
27A2 A3        7774            inc     dptr
27A3 E0        7775            movx    a,@dptr
27A4 C0E0      7776            push    acc
27A6 A3        7777            inc     dptr
27A7 E0        7778            movx    a,@dptr
27A8 C0E0      7779            push    acc
27AA A3        7780            inc     dptr
27AB E0        7781            movx    a,@dptr
27AC C0E0      7782            push    acc
27AE 8A82      7783            mov     dpl,r2
27B0 8B83      7784            mov     dph,r3
27B2 8EF0      7785            mov     b,r6
27B4 EF        7786            mov     a,r7
27B5 120000    7787            lcall   ___fsmul
27B8 AA82      7788            mov     r2,dpl
27BA AB83      7789            mov     r3,dph
27BC AEF0      7790            mov     r6,b
27BE FF        7791            mov     r7,a
27BF E581      7792            mov     a,sp
27C1 24FC      7793            add     a,#0xfc
27C3 F581      7794            mov     sp,a
27C5 8A82      7795            mov     dpl,r2
27C7 8B83      7796            mov     dph,r3
27C9 8EF0      7797            mov     b,r6
27CB EF        7798            mov     a,r7
27CC 120000    7799            lcall   ___fs2uchar
27CF E582      7800            mov     a,dpl
27D1 D001      7801            pop     ar1
27D3 D000      7802            pop     ar0
27D5 D005      7803            pop     ar5
27D7 D004      7804            pop     ar4
27D9 9058A8    7805            mov     dptr,#_pwm_right
27DC F0        7806            movx    @dptr,a
27DD           7807   L044022?:
27DD           7808   ;        main.c:1316: curr_angle -= angle_diff * 1.5; // TUNE THIS 
27DD C000      7809            push    ar0
27DF C001      7810            push    ar1
27E1 C004      7811            push    ar4
27E3 C005      7812            push    ar5
27E5 C000      7813            push    ar0
27E7 C001      7814            push    ar1
27E9 C090      7815            push    _Joystick_Control_sloc4_1_0
27EB C091      7816            push    (_Joystick_Control_sloc4_1_0 + 1)
27ED C092      7817            push    (_Joystick_Control_sloc4_1_0 + 2)
27EF C093      7818            push    (_Joystick_Control_sloc4_1_0 + 3)
27F1 900000    7819            mov     dptr,#0x0000
27F4 75F0C0    7820            mov     b,#0xC0
27F7 743F      7821            mov     a,#0x3F
27F9 120000    7822            lcall   ___fsmul
27FC 8582E0    7823            mov     _Joystick_Control_sloc5_1_0,dpl
27FF 8583E1    7824            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
2802 85F0E2    7825            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2805 F5E3      7826            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2807 E581      7827            mov     a,sp
2809 24FC      7828            add     a,#0xfc
280B F581      7829            mov     sp,a
280D D001      7830            pop     ar1
280F D000      7831            pop     ar0
2811 905558    7832            mov     dptr,#_curr_angle
2814 E0        7833            movx    a,@dptr
2815 F8        7834            mov     r0,a
2816 A3        7835            inc     dptr
2817 E0        7836            movx    a,@dptr
2818 F9        7837            mov     r1,a
2819 A3        7838            inc     dptr
281A E0        7839            movx    a,@dptr
281B FA        7840            mov     r2,a
281C A3        7841            inc     dptr
281D E0        7842            movx    a,@dptr
281E FB        7843            mov     r3,a
281F C000      7844            push    ar0
2821 C001      7845            push    ar1
2823 C0E0      7846            push    _Joystick_Control_sloc5_1_0
2825 C0E1      7847            push    (_Joystick_Control_sloc5_1_0 + 1)
2827 C0E2      7848            push    (_Joystick_Control_sloc5_1_0 + 2)
2829 C0E3      7849            push    (_Joystick_Control_sloc5_1_0 + 3)
282B 8882      7850            mov     dpl,r0
282D 8983      7851            mov     dph,r1
282F 8AF0      7852            mov     b,r2
2831 EB        7853            mov     a,r3
2832 120000    7854            lcall   ___fssub
2835 AA82      7855            mov     r2,dpl
2837 AB83      7856            mov     r3,dph
2839 AEF0      7857            mov     r6,b
283B FF        7858            mov     r7,a
283C E581      7859            mov     a,sp
283E 24FC      7860            add     a,#0xfc
2840 F581      7861            mov     sp,a
2842 D001      7862            pop     ar1
2844 D000      7863            pop     ar0
2846 D005      7864            pop     ar5
2848 D004      7865            pop     ar4
284A 905558    7866            mov     dptr,#_curr_angle
284D EA        7867            mov     a,r2
284E F0        7868            movx    @dptr,a
284F A3        7869            inc     dptr
2850 EB        7870            mov     a,r3
2851 F0        7871            movx    @dptr,a
2852 A3        7872            inc     dptr
2853 EE        7873            mov     a,r6
2854 F0        7874            movx    @dptr,a
2855 A3        7875            inc     dptr
2856 EF        7876            mov     a,r7
2857 F0        7877            movx    @dptr,a
2858           7878   ;        main.c:1351: return curr_angle; 
2858 D001      7879            pop     ar1
285A D000      7880            pop     ar0
285C           7881   ;        main.c:1316: curr_angle -= angle_diff * 1.5; // TUNE THIS 
285C           7882   L044027?:
285C           7883   ;        main.c:1320: if (vy_err<0){
285C E9        7884            mov     a,r1
285D 20E7E0    7885            jb      acc.7,L044076?
2860 020000    7886            ljmp    L044040?
2863           7887   L044076?:
2863           7888   ;        main.c:1321: L_motor_dir = 1; 
2863 905868    7889            mov     dptr,#_L_motor_dir
2866 7401      7890            mov     a,#0x01
2868 F0        7891            movx    @dptr,a
2869           7892   ;        main.c:1322: R_motor_dir = 1; 
2869 905828    7893            mov     dptr,#_R_motor_dir
286C 7401      7894            mov     a,#0x01
286E F0        7895            movx    @dptr,a
286F           7896   ;        main.c:1324: if (vx_err>0){
286F 90DB00    7897            mov     dptr,#_Joystick_Control_vx_err_1_242
2872 E0        7898            movx    a,@dptr
2873 FA        7899            mov     r2,a
2874 A3        7900            inc     dptr
2875 E0        7901            movx    a,@dptr
2876 FB        7902            mov     r3,a
2877 C3        7903            clr     c
2878 E4        7904            clr     a
2879 9A        7905            subb    a,r2
287A E4        7906            clr     a
287B 6480      7907            xrl     a,#0x80
287D 8BF0      7908            mov     b,r3
287F 63F080    7909            xrl     b,#0x80
2882 95F0      7910            subb    a,b
2884 4000      7911            jc      L044077?
2886 020000    7912            ljmp    L044035?
2889           7913   L044077?:
2889           7914   ;        main.c:1325: if (vy*100<=vy_thres*100/2){
2889 9056A8    7915            mov     dptr,#_vy
288C E0        7916            movx    a,@dptr
288D F500      7917            mov     __mulint_PARM_2,a
288F A3        7918            inc     dptr
2890 E0        7919            movx    a,@dptr
2891 F501      7920            mov     (__mulint_PARM_2 + 1),a
2893 900064    7921            mov     dptr,#0x0064
2896 C004      7922            push    ar4
2898 C005      7923            push    ar5
289A 120000    7924            lcall   __mulint
289D AA82      7925            mov     r2,dpl
289F AB83      7926            mov     r3,dph
28A1 D005      7927            pop     ar5
28A3 D004      7928            pop     ar4
28A5 905728    7929            mov     dptr,#_vy_thres
28A8 E0        7930            movx    a,@dptr
28A9 F500      7931            mov     __mulint_PARM_2,a
28AB A3        7932            inc     dptr
28AC E0        7933            movx    a,@dptr
28AD F501      7934            mov     (__mulint_PARM_2 + 1),a
28AF 900064    7935            mov     dptr,#0x0064
28B2 C002      7936            push    ar2
28B4 C003      7937            push    ar3
28B6 C004      7938            push    ar4
28B8 C005      7939            push    ar5
28BA 120000    7940            lcall   __mulint
28BD AE82      7941            mov     r6,dpl
28BF AF83      7942            mov     r7,dph
28C1 750002    7943            mov     __divsint_PARM_2,#0x02
28C4 E4        7944            clr     a
28C5 F501      7945            mov     (__divsint_PARM_2 + 1),a
28C7 8E82      7946            mov     dpl,r6
28C9 8F83      7947            mov     dph,r7
28CB 120000    7948            lcall   __divsint
28CE AE82      7949            mov     r6,dpl
28D0 AF83      7950            mov     r7,dph
28D2 D005      7951            pop     ar5
28D4 D004      7952            pop     ar4
28D6 D003      7953            pop     ar3
28D8 D002      7954            pop     ar2
28DA C3        7955            clr     c
28DB EE        7956            mov     a,r6
28DC 9A        7957            subb    a,r2
28DD EF        7958            mov     a,r7
28DE 6480      7959            xrl     a,#0x80
28E0 8BF0      7960            mov     b,r3
28E2 63F080    7961            xrl     b,#0x80
28E5 95F0      7962            subb    a,b
28E7 5000      7963            jnc     L044078?
28E9 020000    7964            ljmp    L044029?
28EC           7965   L044078?:
28EC           7966   ;        main.c:1326: pwm_left = vy_error; 
28EC 90DAB0    7967            mov     dptr,#_Joystick_Control_vy_error_1_242
28EF E0        7968            movx    a,@dptr
28F0 FA        7969            mov     r2,a
28F1 A3        7970            inc     dptr
28F2 E0        7971            movx    a,@dptr
28F3 FB        7972            mov     r3,a
28F4 9058E8    7973            mov     dptr,#_pwm_left
28F7 EA        7974            mov     a,r2
28F8 F0        7975            movx    @dptr,a
28F9           7976   ;        main.c:1327: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
28F9 905598    7977            mov     dptr,#_pwm_corr
28FC E0        7978            movx    a,@dptr
28FD F5E0      7979            mov     _Joystick_Control_sloc5_1_0,a
28FF A3        7980            inc     dptr
2900 E0        7981            movx    a,@dptr
2901 F5E1      7982            mov     (_Joystick_Control_sloc5_1_0 + 1),a
2903 A3        7983            inc     dptr
2904 E0        7984            movx    a,@dptr
2905 F5E2      7985            mov     (_Joystick_Control_sloc5_1_0 + 2),a
2907 A3        7986            inc     dptr
2908 E0        7987            movx    a,@dptr
2909 F5E3      7988            mov     (_Joystick_Control_sloc5_1_0 + 3),a
290B 8A82      7989            mov     dpl,r2
290D 8B83      7990            mov     dph,r3
290F C002      7991            push    ar2
2911 C003      7992            push    ar3
2913 C004      7993            push    ar4
2915 C005      7994            push    ar5
2917 120000    7995            lcall   ___sint2fs
291A AE82      7996            mov     r6,dpl
291C AF83      7997            mov     r7,dph
291E A8F0      7998            mov     r0,b
2920 F9        7999            mov     r1,a
2921 C006      8000            push    ar6
2923 C007      8001            push    ar7
2925 C000      8002            push    ar0
2927 C001      8003            push    ar1
2929 85E082    8004            mov     dpl,_Joystick_Control_sloc5_1_0
292C 85E183    8005            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
292F 85E2F0    8006            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2932 E5E3      8007            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2934 120000    8008            lcall   ___fsmul
2937 AE82      8009            mov     r6,dpl
2939 AF83      8010            mov     r7,dph
293B A8F0      8011            mov     r0,b
293D F9        8012            mov     r1,a
293E E581      8013            mov     a,sp
2940 24FC      8014            add     a,#0xfc
2942 F581      8015            mov     sp,a
2944 C006      8016            push    ar6
2946 C007      8017            push    ar7
2948 C000      8018            push    ar0
294A C001      8019            push    ar1
294C 900000    8020            mov     dptr,#0x0000
294F 75F0C8    8021            mov     b,#0xC8
2952 7442      8022            mov     a,#0x42
2954 120000    8023            lcall   ___fsmul
2957 8582E0    8024            mov     _Joystick_Control_sloc5_1_0,dpl
295A 8583E1    8025            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
295D 85F0E2    8026            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2960 F5E3      8027            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2962 E581      8028            mov     a,sp
2964 24FC      8029            add     a,#0xfc
2966 F581      8030            mov     sp,a
2968 D005      8031            pop     ar5
296A D004      8032            pop     ar4
296C D003      8033            pop     ar3
296E D002      8034            pop     ar2
2970 EA        8035            mov     a,r2
2971 2C        8036            add     a,r4
2972 F582      8037            mov     dpl,a
2974 EB        8038            mov     a,r3
2975 3D        8039            addc    a,r5
2976 F583      8040            mov     dph,a
2978 120000    8041            lcall   ___sint2fs
297B AA82      8042            mov     r2,dpl
297D AB83      8043            mov     r3,dph
297F AEF0      8044            mov     r6,b
2981 FF        8045            mov     r7,a
2982 C002      8046            push    ar2
2984 C003      8047            push    ar3
2986 C006      8048            push    ar6
2988 C007      8049            push    ar7
298A 85E082    8050            mov     dpl,_Joystick_Control_sloc5_1_0
298D 85E183    8051            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2990 85E2F0    8052            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2993 E5E3      8053            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2995 120000    8054            lcall   ___fsdiv
2998 AA82      8055            mov     r2,dpl
299A AB83      8056            mov     r3,dph
299C AEF0      8057            mov     r6,b
299E FF        8058            mov     r7,a
299F E581      8059            mov     a,sp
29A1 24FC      8060            add     a,#0xfc
29A3 F581      8061            mov     sp,a
29A5 8A82      8062            mov     dpl,r2
29A7 8B83      8063            mov     dph,r3
29A9 8EF0      8064            mov     b,r6
29AB EF        8065            mov     a,r7
29AC 120000    8066            lcall   ___fs2uchar
29AF E582      8067            mov     a,dpl
29B1 9058A8    8068            mov     dptr,#_pwm_right
29B4 F0        8069            movx    @dptr,a
29B5 020000    8070            ljmp    L044030?
29B8           8071   L044029?:
29B8           8072   ;        main.c:1330: pwm_left = vx_error; 
29B8 9058E8    8073            mov     dptr,#_pwm_left
29BB EC        8074            mov     a,r4
29BC F0        8075            movx    @dptr,a
29BD           8076   ;        main.c:1331: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
29BD 905598    8077            mov     dptr,#_pwm_corr
29C0 E0        8078            movx    a,@dptr
29C1 F5E0      8079            mov     _Joystick_Control_sloc5_1_0,a
29C3 A3        8080            inc     dptr
29C4 E0        8081            movx    a,@dptr
29C5 F5E1      8082            mov     (_Joystick_Control_sloc5_1_0 + 1),a
29C7 A3        8083            inc     dptr
29C8 E0        8084            movx    a,@dptr
29C9 F5E2      8085            mov     (_Joystick_Control_sloc5_1_0 + 2),a
29CB A3        8086            inc     dptr
29CC E0        8087            movx    a,@dptr
29CD F5E3      8088            mov     (_Joystick_Control_sloc5_1_0 + 3),a
29CF 8C82      8089            mov     dpl,r4
29D1 8D83      8090            mov     dph,r5
29D3 C004      8091            push    ar4
29D5 C005      8092            push    ar5
29D7 120000    8093            lcall   ___sint2fs
29DA A882      8094            mov     r0,dpl
29DC A983      8095            mov     r1,dph
29DE AAF0      8096            mov     r2,b
29E0 FB        8097            mov     r3,a
29E1 C000      8098            push    ar0
29E3 C001      8099            push    ar1
29E5 C002      8100            push    ar2
29E7 C003      8101            push    ar3
29E9 85E082    8102            mov     dpl,_Joystick_Control_sloc5_1_0
29EC 85E183    8103            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
29EF 85E2F0    8104            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
29F2 E5E3      8105            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
29F4 120000    8106            lcall   ___fsmul
29F7 AA82      8107            mov     r2,dpl
29F9 AB83      8108            mov     r3,dph
29FB AEF0      8109            mov     r6,b
29FD FF        8110            mov     r7,a
29FE E581      8111            mov     a,sp
2A00 24FC      8112            add     a,#0xfc
2A02 F581      8113            mov     sp,a
2A04 C002      8114            push    ar2
2A06 C003      8115            push    ar3
2A08 C006      8116            push    ar6
2A0A C007      8117            push    ar7
2A0C 900000    8118            mov     dptr,#0x0000
2A0F 75F0C8    8119            mov     b,#0xC8
2A12 7442      8120            mov     a,#0x42
2A14 120000    8121            lcall   ___fsmul
2A17 8582E0    8122            mov     _Joystick_Control_sloc5_1_0,dpl
2A1A 8583E1    8123            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
2A1D 85F0E2    8124            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2A20 F5E3      8125            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2A22 E581      8126            mov     a,sp
2A24 24FC      8127            add     a,#0xfc
2A26 F581      8128            mov     sp,a
2A28 D005      8129            pop     ar5
2A2A D004      8130            pop     ar4
2A2C 90DAB0    8131            mov     dptr,#_Joystick_Control_vy_error_1_242
2A2F E0        8132            movx    a,@dptr
2A30 F8        8133            mov     r0,a
2A31 A3        8134            inc     dptr
2A32 E0        8135            movx    a,@dptr
2A33 F9        8136            mov     r1,a
2A34 E8        8137            mov     a,r0
2A35 2C        8138            add     a,r4
2A36 F582      8139            mov     dpl,a
2A38 E9        8140            mov     a,r1
2A39 3D        8141            addc    a,r5
2A3A F583      8142            mov     dph,a
2A3C 120000    8143            lcall   ___sint2fs
2A3F A882      8144            mov     r0,dpl
2A41 A983      8145            mov     r1,dph
2A43 AAF0      8146            mov     r2,b
2A45 FB        8147            mov     r3,a
2A46 C000      8148            push    ar0
2A48 C001      8149            push    ar1
2A4A C002      8150            push    ar2
2A4C C003      8151            push    ar3
2A4E 85E082    8152            mov     dpl,_Joystick_Control_sloc5_1_0
2A51 85E183    8153            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2A54 85E2F0    8154            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2A57 E5E3      8155            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2A59 120000    8156            lcall   ___fsdiv
2A5C AA82      8157            mov     r2,dpl
2A5E AB83      8158            mov     r3,dph
2A60 AEF0      8159            mov     r6,b
2A62 FF        8160            mov     r7,a
2A63 E581      8161            mov     a,sp
2A65 24FC      8162            add     a,#0xfc
2A67 F581      8163            mov     sp,a
2A69 8A82      8164            mov     dpl,r2
2A6B 8B83      8165            mov     dph,r3
2A6D 8EF0      8166            mov     b,r6
2A6F EF        8167            mov     a,r7
2A70 120000    8168            lcall   ___fs2uchar
2A73 E582      8169            mov     a,dpl
2A75 9058A8    8170            mov     dptr,#_pwm_right
2A78 F0        8171            movx    @dptr,a
2A79           8172   L044030?:
2A79           8173   ;        main.c:1333: curr_angle -= angle_diff * 1.4; // TUNE THIS 
2A79 C090      8174            push    _Joystick_Control_sloc4_1_0
2A7B C091      8175            push    (_Joystick_Control_sloc4_1_0 + 1)
2A7D C092      8176            push    (_Joystick_Control_sloc4_1_0 + 2)
2A7F C093      8177            push    (_Joystick_Control_sloc4_1_0 + 3)
2A81 903333    8178            mov     dptr,#0x3333
2A84 75F0B3    8179            mov     b,#0xB3
2A87 743F      8180            mov     a,#0x3F
2A89 120000    8181            lcall   ___fsmul
2A8C 8582E0    8182            mov     _Joystick_Control_sloc5_1_0,dpl
2A8F 8583E1    8183            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
2A92 85F0E2    8184            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2A95 F5E3      8185            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2A97 E581      8186            mov     a,sp
2A99 24FC      8187            add     a,#0xfc
2A9B F581      8188            mov     sp,a
2A9D 905558    8189            mov     dptr,#_curr_angle
2AA0 E0        8190            movx    a,@dptr
2AA1 F8        8191            mov     r0,a
2AA2 A3        8192            inc     dptr
2AA3 E0        8193            movx    a,@dptr
2AA4 F9        8194            mov     r1,a
2AA5 A3        8195            inc     dptr
2AA6 E0        8196            movx    a,@dptr
2AA7 FA        8197            mov     r2,a
2AA8 A3        8198            inc     dptr
2AA9 E0        8199            movx    a,@dptr
2AAA FB        8200            mov     r3,a
2AAB C0E0      8201            push    _Joystick_Control_sloc5_1_0
2AAD C0E1      8202            push    (_Joystick_Control_sloc5_1_0 + 1)
2AAF C0E2      8203            push    (_Joystick_Control_sloc5_1_0 + 2)
2AB1 C0E3      8204            push    (_Joystick_Control_sloc5_1_0 + 3)
2AB3 8882      8205            mov     dpl,r0
2AB5 8983      8206            mov     dph,r1
2AB7 8AF0      8207            mov     b,r2
2AB9 EB        8208            mov     a,r3
2ABA 120000    8209            lcall   ___fssub
2ABD AA82      8210            mov     r2,dpl
2ABF AB83      8211            mov     r3,dph
2AC1 AEF0      8212            mov     r6,b
2AC3 FF        8213            mov     r7,a
2AC4 E581      8214            mov     a,sp
2AC6 24FC      8215            add     a,#0xfc
2AC8 F581      8216            mov     sp,a
2ACA 905558    8217            mov     dptr,#_curr_angle
2ACD EA        8218            mov     a,r2
2ACE F0        8219            movx    @dptr,a
2ACF A3        8220            inc     dptr
2AD0 EB        8221            mov     a,r3
2AD1 F0        8222            movx    @dptr,a
2AD2 A3        8223            inc     dptr
2AD3 EE        8224            mov     a,r6
2AD4 F0        8225            movx    @dptr,a
2AD5 A3        8226            inc     dptr
2AD6 EF        8227            mov     a,r7
2AD7 F0        8228            movx    @dptr,a
2AD8 020000    8229            ljmp    L044040?
2ADB           8230   L044035?:
2ADB           8231   ;        main.c:1337: if (vy*100<=vy_thres*100/2){
2ADB 9056A8    8232            mov     dptr,#_vy
2ADE E0        8233            movx    a,@dptr
2ADF F500      8234            mov     __mulint_PARM_2,a
2AE1 A3        8235            inc     dptr
2AE2 E0        8236            movx    a,@dptr
2AE3 F501      8237            mov     (__mulint_PARM_2 + 1),a
2AE5 900064    8238            mov     dptr,#0x0064
2AE8 C004      8239            push    ar4
2AEA C005      8240            push    ar5
2AEC 120000    8241            lcall   __mulint
2AEF AA82      8242            mov     r2,dpl
2AF1 AB83      8243            mov     r3,dph
2AF3 D005      8244            pop     ar5
2AF5 D004      8245            pop     ar4
2AF7 905728    8246            mov     dptr,#_vy_thres
2AFA E0        8247            movx    a,@dptr
2AFB F500      8248            mov     __mulint_PARM_2,a
2AFD A3        8249            inc     dptr
2AFE E0        8250            movx    a,@dptr
2AFF F501      8251            mov     (__mulint_PARM_2 + 1),a
2B01 900064    8252            mov     dptr,#0x0064
2B04 C002      8253            push    ar2
2B06 C003      8254            push    ar3
2B08 C004      8255            push    ar4
2B0A C005      8256            push    ar5
2B0C 120000    8257            lcall   __mulint
2B0F AE82      8258            mov     r6,dpl
2B11 AF83      8259            mov     r7,dph
2B13 750002    8260            mov     __divsint_PARM_2,#0x02
2B16 E4        8261            clr     a
2B17 F501      8262            mov     (__divsint_PARM_2 + 1),a
2B19 8E82      8263            mov     dpl,r6
2B1B 8F83      8264            mov     dph,r7
2B1D 120000    8265            lcall   __divsint
2B20 AE82      8266            mov     r6,dpl
2B22 AF83      8267            mov     r7,dph
2B24 D005      8268            pop     ar5
2B26 D004      8269            pop     ar4
2B28 D003      8270            pop     ar3
2B2A D002      8271            pop     ar2
2B2C C3        8272            clr     c
2B2D EE        8273            mov     a,r6
2B2E 9A        8274            subb    a,r2
2B2F EF        8275            mov     a,r7
2B30 6480      8276            xrl     a,#0x80
2B32 8BF0      8277            mov     b,r3
2B34 63F080    8278            xrl     b,#0x80
2B37 95F0      8279            subb    a,b
2B39 5000      8280            jnc     L044079?
2B3B 020000    8281            ljmp    L044032?
2B3E           8282   L044079?:
2B3E           8283   ;        main.c:1338: pwm_left = vy_error*100/(vx_error+vy_error);
2B3E 90DAB0    8284            mov     dptr,#_Joystick_Control_vy_error_1_242
2B41 E0        8285            movx    a,@dptr
2B42 FA        8286            mov     r2,a
2B43 A3        8287            inc     dptr
2B44 E0        8288            movx    a,@dptr
2B45 FB        8289            mov     r3,a
2B46 8A00      8290            mov     __mulint_PARM_2,r2
2B48 8B01      8291            mov     (__mulint_PARM_2 + 1),r3
2B4A 900064    8292            mov     dptr,#0x0064
2B4D C002      8293            push    ar2
2B4F C003      8294            push    ar3
2B51 C004      8295            push    ar4
2B53 C005      8296            push    ar5
2B55 120000    8297            lcall   __mulint
2B58 AE82      8298            mov     r6,dpl
2B5A AF83      8299            mov     r7,dph
2B5C D005      8300            pop     ar5
2B5E D004      8301            pop     ar4
2B60 D003      8302            pop     ar3
2B62 D002      8303            pop     ar2
2B64 EA        8304            mov     a,r2
2B65 2C        8305            add     a,r4
2B66 F500      8306            mov     __divsint_PARM_2,a
2B68 EB        8307            mov     a,r3
2B69 3D        8308            addc    a,r5
2B6A F501      8309            mov     (__divsint_PARM_2 + 1),a
2B6C 8E82      8310            mov     dpl,r6
2B6E 8F83      8311            mov     dph,r7
2B70 C002      8312            push    ar2
2B72 C003      8313            push    ar3
2B74 120000    8314            lcall   __divsint
2B77 AE82      8315            mov     r6,dpl
2B79 D003      8316            pop     ar3
2B7B D002      8317            pop     ar2
2B7D 9058E8    8318            mov     dptr,#_pwm_left
2B80 EE        8319            mov     a,r6
2B81 F0        8320            movx    @dptr,a
2B82           8321   ;        main.c:1339: pwm_right =pwm_corr*vy_error; 
2B82 905598    8322            mov     dptr,#_pwm_corr
2B85 E0        8323            movx    a,@dptr
2B86 F5E0      8324            mov     _Joystick_Control_sloc5_1_0,a
2B88 A3        8325            inc     dptr
2B89 E0        8326            movx    a,@dptr
2B8A F5E1      8327            mov     (_Joystick_Control_sloc5_1_0 + 1),a
2B8C A3        8328            inc     dptr
2B8D E0        8329            movx    a,@dptr
2B8E F5E2      8330            mov     (_Joystick_Control_sloc5_1_0 + 2),a
2B90 A3        8331            inc     dptr
2B91 E0        8332            movx    a,@dptr
2B92 F5E3      8333            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2B94 8A82      8334            mov     dpl,r2
2B96 8B83      8335            mov     dph,r3
2B98 120000    8336            lcall   ___sint2fs
2B9B AA82      8337            mov     r2,dpl
2B9D AB83      8338            mov     r3,dph
2B9F AEF0      8339            mov     r6,b
2BA1 FF        8340            mov     r7,a
2BA2 C002      8341            push    ar2
2BA4 C003      8342            push    ar3
2BA6 C006      8343            push    ar6
2BA8 C007      8344            push    ar7
2BAA 85E082    8345            mov     dpl,_Joystick_Control_sloc5_1_0
2BAD 85E183    8346            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2BB0 85E2F0    8347            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2BB3 E5E3      8348            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2BB5 120000    8349            lcall   ___fsmul
2BB8 AA82      8350            mov     r2,dpl
2BBA AB83      8351            mov     r3,dph
2BBC AEF0      8352            mov     r6,b
2BBE FF        8353            mov     r7,a
2BBF E581      8354            mov     a,sp
2BC1 24FC      8355            add     a,#0xfc
2BC3 F581      8356            mov     sp,a
2BC5 8A82      8357            mov     dpl,r2
2BC7 8B83      8358            mov     dph,r3
2BC9 8EF0      8359            mov     b,r6
2BCB EF        8360            mov     a,r7
2BCC 120000    8361            lcall   ___fs2uchar
2BCF E582      8362            mov     a,dpl
2BD1 9058A8    8363            mov     dptr,#_pwm_right
2BD4 F0        8364            movx    @dptr,a
2BD5 020000    8365            ljmp    L044033?
2BD8           8366   L044032?:
2BD8           8367   ;        main.c:1342: pwm_left = vx_error*100/(vx_error+vy_error);
2BD8 8C00      8368            mov     __mulint_PARM_2,r4
2BDA 8D01      8369            mov     (__mulint_PARM_2 + 1),r5
2BDC 900064    8370            mov     dptr,#0x0064
2BDF C004      8371            push    ar4
2BE1 C005      8372            push    ar5
2BE3 120000    8373            lcall   __mulint
2BE6 AA82      8374            mov     r2,dpl
2BE8 AB83      8375            mov     r3,dph
2BEA D005      8376            pop     ar5
2BEC D004      8377            pop     ar4
2BEE 90DAB0    8378            mov     dptr,#_Joystick_Control_vy_error_1_242
2BF1 E0        8379            movx    a,@dptr
2BF2 FE        8380            mov     r6,a
2BF3 A3        8381            inc     dptr
2BF4 E0        8382            movx    a,@dptr
2BF5 FF        8383            mov     r7,a
2BF6 EE        8384            mov     a,r6
2BF7 2C        8385            add     a,r4
2BF8 F500      8386            mov     __divsint_PARM_2,a
2BFA EF        8387            mov     a,r7
2BFB 3D        8388            addc    a,r5
2BFC F501      8389            mov     (__divsint_PARM_2 + 1),a
2BFE 8A82      8390            mov     dpl,r2
2C00 8B83      8391            mov     dph,r3
2C02 C004      8392            push    ar4
2C04 C005      8393            push    ar5
2C06 120000    8394            lcall   __divsint
2C09 AA82      8395            mov     r2,dpl
2C0B D005      8396            pop     ar5
2C0D D004      8397            pop     ar4
2C0F 9058E8    8398            mov     dptr,#_pwm_left
2C12 EA        8399            mov     a,r2
2C13 F0        8400            movx    @dptr,a
2C14           8401   ;        main.c:1343: pwm_right = pwm_corr*vx_error; 
2C14 905598    8402            mov     dptr,#_pwm_corr
2C17 E0        8403            movx    a,@dptr
2C18 FA        8404            mov     r2,a
2C19 A3        8405            inc     dptr
2C1A E0        8406            movx    a,@dptr
2C1B FB        8407            mov     r3,a
2C1C A3        8408            inc     dptr
2C1D E0        8409            movx    a,@dptr
2C1E FE        8410            mov     r6,a
2C1F A3        8411            inc     dptr
2C20 E0        8412            movx    a,@dptr
2C21 FF        8413            mov     r7,a
2C22 8C82      8414            mov     dpl,r4
2C24 8D83      8415            mov     dph,r5
2C26 C002      8416            push    ar2
2C28 C003      8417            push    ar3
2C2A C006      8418            push    ar6
2C2C C007      8419            push    ar7
2C2E 120000    8420            lcall   ___sint2fs
2C31 AC82      8421            mov     r4,dpl
2C33 AD83      8422            mov     r5,dph
2C35 A8F0      8423            mov     r0,b
2C37 F9        8424            mov     r1,a
2C38 D007      8425            pop     ar7
2C3A D006      8426            pop     ar6
2C3C D003      8427            pop     ar3
2C3E D002      8428            pop     ar2
2C40 C004      8429            push    ar4
2C42 C005      8430            push    ar5
2C44 C000      8431            push    ar0
2C46 C001      8432            push    ar1
2C48 8A82      8433            mov     dpl,r2
2C4A 8B83      8434            mov     dph,r3
2C4C 8EF0      8435            mov     b,r6
2C4E EF        8436            mov     a,r7
2C4F 120000    8437            lcall   ___fsmul
2C52 AA82      8438            mov     r2,dpl
2C54 AB83      8439            mov     r3,dph
2C56 ACF0      8440            mov     r4,b
2C58 FD        8441            mov     r5,a
2C59 E581      8442            mov     a,sp
2C5B 24FC      8443            add     a,#0xfc
2C5D F581      8444            mov     sp,a
2C5F 8A82      8445            mov     dpl,r2
2C61 8B83      8446            mov     dph,r3
2C63 8CF0      8447            mov     b,r4
2C65 ED        8448            mov     a,r5
2C66 120000    8449            lcall   ___fs2uchar
2C69 E582      8450            mov     a,dpl
2C6B 9058A8    8451            mov     dptr,#_pwm_right
2C6E F0        8452            movx    @dptr,a
2C6F           8453   L044033?:
2C6F           8454   ;        main.c:1345: curr_angle += angle_diff * 1.4; // TUNE THIS 
2C6F C090      8455            push    _Joystick_Control_sloc4_1_0
2C71 C091      8456            push    (_Joystick_Control_sloc4_1_0 + 1)
2C73 C092      8457            push    (_Joystick_Control_sloc4_1_0 + 2)
2C75 C093      8458            push    (_Joystick_Control_sloc4_1_0 + 3)
2C77 903333    8459            mov     dptr,#0x3333
2C7A 75F0B3    8460            mov     b,#0xB3
2C7D 743F      8461            mov     a,#0x3F
2C7F 120000    8462            lcall   ___fsmul
2C82 AA82      8463            mov     r2,dpl
2C84 AB83      8464            mov     r3,dph
2C86 ACF0      8465            mov     r4,b
2C88 FD        8466            mov     r5,a
2C89 E581      8467            mov     a,sp
2C8B 24FC      8468            add     a,#0xfc
2C8D F581      8469            mov     sp,a
2C8F 905558    8470            mov     dptr,#_curr_angle
2C92 E0        8471            movx    a,@dptr
2C93 FE        8472            mov     r6,a
2C94 A3        8473            inc     dptr
2C95 E0        8474            movx    a,@dptr
2C96 FF        8475            mov     r7,a
2C97 A3        8476            inc     dptr
2C98 E0        8477            movx    a,@dptr
2C99 F8        8478            mov     r0,a
2C9A A3        8479            inc     dptr
2C9B E0        8480            movx    a,@dptr
2C9C F9        8481            mov     r1,a
2C9D C002      8482            push    ar2
2C9F C003      8483            push    ar3
2CA1 C004      8484            push    ar4
2CA3 C005      8485            push    ar5
2CA5 8E82      8486            mov     dpl,r6
2CA7 8F83      8487            mov     dph,r7
2CA9 88F0      8488            mov     b,r0
2CAB E9        8489            mov     a,r1
2CAC 120000    8490            lcall   ___fsadd
2CAF AA82      8491            mov     r2,dpl
2CB1 AB83      8492            mov     r3,dph
2CB3 ACF0      8493            mov     r4,b
2CB5 FD        8494            mov     r5,a
2CB6 E581      8495            mov     a,sp
2CB8 24FC      8496            add     a,#0xfc
2CBA F581      8497            mov     sp,a
2CBC 905558    8498            mov     dptr,#_curr_angle
2CBF EA        8499            mov     a,r2
2CC0 F0        8500            movx    @dptr,a
2CC1 A3        8501            inc     dptr
2CC2 EB        8502            mov     a,r3
2CC3 F0        8503            movx    @dptr,a
2CC4 A3        8504            inc     dptr
2CC5 EC        8505            mov     a,r4
2CC6 F0        8506            movx    @dptr,a
2CC7 A3        8507            inc     dptr
2CC8 ED        8508            mov     a,r5
2CC9 F0        8509            movx    @dptr,a
2CCA           8510   L044040?:
2CCA           8511   ;        main.c:1350: last_raw_angle = raw_angle; 
2CCA 905518    8512            mov     dptr,#_raw_angle
2CCD E0        8513            movx    a,@dptr
2CCE FA        8514            mov     r2,a
2CCF A3        8515            inc     dptr
2CD0 E0        8516            movx    a,@dptr
2CD1 FB        8517            mov     r3,a
2CD2 A3        8518            inc     dptr
2CD3 E0        8519            movx    a,@dptr
2CD4 FC        8520            mov     r4,a
2CD5 A3        8521            inc     dptr
2CD6 E0        8522            movx    a,@dptr
2CD7 FD        8523            mov     r5,a
2CD8 9054D8    8524            mov     dptr,#_last_raw_angle
2CDB EA        8525            mov     a,r2
2CDC F0        8526            movx    @dptr,a
2CDD A3        8527            inc     dptr
2CDE EB        8528            mov     a,r3
2CDF F0        8529            movx    @dptr,a
2CE0 A3        8530            inc     dptr
2CE1 EC        8531            mov     a,r4
2CE2 F0        8532            movx    @dptr,a
2CE3 A3        8533            inc     dptr
2CE4 ED        8534            mov     a,r5
2CE5 F0        8535            movx    @dptr,a
2CE6           8536   ;        main.c:1351: return curr_angle; 
2CE6 905558    8537            mov     dptr,#_curr_angle
2CE9 E0        8538            movx    a,@dptr
2CEA FA        8539            mov     r2,a
2CEB A3        8540            inc     dptr
2CEC E0        8541            movx    a,@dptr
2CED FB        8542            mov     r3,a
2CEE A3        8543            inc     dptr
2CEF E0        8544            movx    a,@dptr
2CF0 FC        8545            mov     r4,a
2CF1 A3        8546            inc     dptr
2CF2 E0        8547            movx    a,@dptr
2CF3 8A82      8548            mov     dpl,r2
2CF5 8B83      8549            mov     dph,r3
2CF7 8CF0      8550            mov     b,r4
2CF9 22        8551            ret
2CFA           8552   ;------------------------------------------------------------
2CFA           8553   ;Allocation info for local variables in function 'main'
2CFA           8554   ;------------------------------------------------------------
2CFA           8555   ;sloc0                     Allocated with name '_main_sloc0_1_0'
2CFA           8556   ;c                         Allocated with name '_main_c_1_265'
2CFA           8557   ;angle_count               Allocated with name '_main_angle_count_1_265'
2CFA           8558   ;------------------------------------------------------------
2CFA           8559   ;        main.c:1355: void main (void)
2CFA           8560   ;        -----------------------------------------
2CFA           8561   ;         function main
2CFA           8562   ;        -----------------------------------------
2CFA           8563   _main:
2CFA           8564   ;        main.c:1361: Init_all();
2CFA 120000    8565            lcall   _Init_all
2CFD           8566   ;        main.c:1362: BMM150_Init();
2CFD 120000    8567            lcall   _BMM150_Init
2D00           8568   ;        main.c:1363: waitms(500);
2D00 9001F4    8569            mov     dptr,#0x01F4
2D03 120000    8570            lcall   _waitms
2D06           8571   ;        main.c:1364: UART1_Init(9600);
2D06 902580    8572            mov     dptr,#0x2580
2D09 E4        8573            clr     a
2D0A F5F0      8574            mov     b,a
2D0C 120000    8575            lcall   _UART1_Init
2D0F           8576   ;        main.c:1366: ReceptionOff();
2D0F 120000    8577            lcall   _ReceptionOff
2D12           8578   ;        main.c:1369: SendATCommand("AT+VER\r\n");
2D12 902C20    8579            mov     dptr,#__str_11
2D15 75F080    8580            mov     b,#0x80
2D18 120000    8581            lcall   _SendATCommand
2D1B           8582   ;        main.c:1370: SendATCommand("AT+BAUD\r\n");
2D1B 902C60    8583            mov     dptr,#__str_12
2D1E 75F080    8584            mov     b,#0x80
2D21 120000    8585            lcall   _SendATCommand
2D24           8586   ;        main.c:1371: SendATCommand("AT+RFID\r\n");
2D24 902CA0    8587            mov     dptr,#__str_13
2D27 75F080    8588            mov     b,#0x80
2D2A 120000    8589            lcall   _SendATCommand
2D2D           8590   ;        main.c:1372: SendATCommand("AT+DVID\r\n");
2D2D 902CE0    8591            mov     dptr,#__str_14
2D30 75F080    8592            mov     b,#0x80
2D33 120000    8593            lcall   _SendATCommand
2D36           8594   ;        main.c:1373: SendATCommand("AT+RFC002\r\n");
2D36 902D20    8595            mov     dptr,#__str_15
2D39 75F080    8596            mov     b,#0x80
2D3C 120000    8597            lcall   _SendATCommand
2D3F           8598   ;        main.c:1374: SendATCommand("AT+POWE\r\n");
2D3F 902D60    8599            mov     dptr,#__str_16
2D42 75F080    8600            mov     b,#0x80
2D45 120000    8601            lcall   _SendATCommand
2D48           8602   ;        main.c:1375: SendATCommand("AT+CLSS\r\n");
2D48 902DA0    8603            mov     dptr,#__str_17
2D4B 75F080    8604            mov     b,#0x80
2D4E 120000    8605            lcall   _SendATCommand
2D51           8606   ;        main.c:1376: SendATCommand("AT+DVIDEF11\r\n");  
2D51 902DE0    8607            mov     dptr,#__str_18
2D54 75F080    8608            mov     b,#0x80
2D57 120000    8609            lcall   _SendATCommand
2D5A           8610   ;        main.c:1379: L_bridge_1 = 0; 
2D5A C2A1      8611            clr     _P2_1
2D5C           8612   ;        main.c:1380: L_bridge_2 = 0; 
2D5C C2A2      8613            clr     _P2_2
2D5E           8614   ;        main.c:1381: R_bridge_1 = 0; 
2D5E C2A4      8615            clr     _P2_4
2D60           8616   ;        main.c:1382: R_bridge_2 = 0; 
2D60 C2A3      8617            clr     _P2_3
2D62           8618   ;        main.c:1383: vx = 0; 
2D62 9056E8    8619            mov     dptr,#_vx
2D65 E4        8620            clr     a
2D66 F0        8621            movx    @dptr,a
2D67 A3        8622            inc     dptr
2D68 F0        8623            movx    @dptr,a
2D69           8624   ;        main.c:1384: vy = 0; 
2D69 9056A8    8625            mov     dptr,#_vy
2D6C E4        8626            clr     a
2D6D F0        8627            movx    @dptr,a
2D6E A3        8628            inc     dptr
2D6F F0        8629            movx    @dptr,a
2D70           8630   ;        main.c:1387: curr_angle = Read_angle();
2D70 120000    8631            lcall   _Read_angle
2D73 AA82      8632            mov     r2,dpl
2D75 AB83      8633            mov     r3,dph
2D77 ACF0      8634            mov     r4,b
2D79 FD        8635            mov     r5,a
2D7A 905558    8636            mov     dptr,#_curr_angle
2D7D EA        8637            mov     a,r2
2D7E F0        8638            movx    @dptr,a
2D7F A3        8639            inc     dptr
2D80 EB        8640            mov     a,r3
2D81 F0        8641            movx    @dptr,a
2D82 A3        8642            inc     dptr
2D83 EC        8643            mov     a,r4
2D84 F0        8644            movx    @dptr,a
2D85 A3        8645            inc     dptr
2D86 ED        8646            mov     a,r5
2D87 F0        8647            movx    @dptr,a
2D88           8648   ;        main.c:1390: waitms(1000);
2D88 9003E8    8649            mov     dptr,#0x03E8
2D8B 120000    8650            lcall   _waitms
2D8E           8651   ;        main.c:1391: while(1){  
2D8E           8652   L045016?:
2D8E           8653   ;        main.c:1393: printf("angle: %d, raw_angle: %d\r\n", (int)curr_angle, (int)Read_angle());
2D8E 120000    8654            lcall   _Read_angle
2D91 120000    8655            lcall   ___fs2sint
2D94 AA82      8656            mov     r2,dpl
2D96 AB83      8657            mov     r3,dph
2D98 905558    8658            mov     dptr,#_curr_angle
2D9B E0        8659            movx    a,@dptr
2D9C FC        8660            mov     r4,a
2D9D A3        8661            inc     dptr
2D9E E0        8662            movx    a,@dptr
2D9F FD        8663            mov     r5,a
2DA0 A3        8664            inc     dptr
2DA1 E0        8665            movx    a,@dptr
2DA2 FE        8666            mov     r6,a
2DA3 A3        8667            inc     dptr
2DA4 E0        8668            movx    a,@dptr
2DA5 8C82      8669            mov     dpl,r4
2DA7 8D83      8670            mov     dph,r5
2DA9 8EF0      8671            mov     b,r6
2DAB C002      8672            push    ar2
2DAD C003      8673            push    ar3
2DAF 120000    8674            lcall   ___fs2sint
2DB2 AC82      8675            mov     r4,dpl
2DB4 AD83      8676            mov     r5,dph
2DB6 C004      8677            push    ar4
2DB8 C005      8678            push    ar5
2DBA 7460      8679            mov     a,#__str_19
2DBC C0E0      8680            push    acc
2DBE 742E      8681            mov     a,#(__str_19 >> 8)
2DC0 C0E0      8682            push    acc
2DC2 7480      8683            mov     a,#0x80
2DC4 C0E0      8684            push    acc
2DC6 120000    8685            lcall   _printf
2DC9 E581      8686            mov     a,sp
2DCB 24F9      8687            add     a,#0xf9
2DCD F581      8688            mov     sp,a
2DCF           8689   ;        main.c:1395: if(pick=='1'){
2DCF 905358    8690            mov     dptr,#_pick
2DD2 E0        8691            movx    a,@dptr
2DD3 FA        8692            mov     r2,a
2DD4 BA31A0    8693            cjne    r2,#0x31,L045002?
2DD7           8694   ;        main.c:1396: servo_pick();
2DD7 120000    8695            lcall   _servo_pick
2DDA           8696   ;        main.c:1397: waitms(1000);
2DDA 9003E8    8697            mov     dptr,#0x03E8
2DDD 120000    8698            lcall   _waitms
2DE0           8699   ;        main.c:1398: pick = 0;
2DE0 905358    8700            mov     dptr,#_pick
2DE3 E4        8701            clr     a
2DE4 F0        8702            movx    @dptr,a
2DE5           8703   L045002?:
2DE5           8704   ;        main.c:1401: if(auto_mode){
2DE5 905398    8705            mov     dptr,#_auto_mode
2DE8 E0        8706            movx    a,@dptr
2DE9 FA        8707            mov     r2,a
2DEA A3        8708            inc     dptr
2DEB E0        8709            movx    a,@dptr
2DEC FB        8710            mov     r3,a
2DED 4A        8711            orl     a,r2
2DEE 6000      8712            jz      L045004?
2DF0           8713   ;        main.c:1402: Auto_mode_slave();
2DF0 120000    8714            lcall   _Auto_mode_slave
2DF3           8715   ;        main.c:1403: auto_mode = 0;
2DF3 905398    8716            mov     dptr,#_auto_mode
2DF6 E4        8717            clr     a
2DF7 F0        8718            movx    @dptr,a
2DF8 A3        8719            inc     dptr
2DF9 F0        8720            movx    @dptr,a
2DFA           8721   L045004?:
2DFA           8722   ;        main.c:1406: if(RXU1()) // Something has arrived
2DFA 120000    8723            lcall   _RXU1
2DFD 5000      8724            jnc     L045016?
2DFF           8725   ;        main.c:1408: c=getchar1();
2DFF 120000    8726            lcall   _getchar1
2E02 AA82      8727            mov     r2,dpl
2E04           8728   ;        main.c:1409: if(c=='!') // Master is sending message
2E04 BA2120    8729            cjne    r2,#0x21,L045031?
2E07 8000      8730            sjmp    L045032?
2E09           8731   L045031?:
2E09 020000    8732            ljmp    L045011?
2E0C           8733   L045032?:
2E0C           8734   ;        main.c:1411: getstr1(buff, sizeof(buff)-1);
2E0C 75B813    8735            mov     _getstr1_PARM_2,#0x13
2E0F 905E28    8736            mov     dptr,#_buff
2E12 75F040    8737            mov     b,#0x40
2E15 120000    8738            lcall   _getstr1
2E18           8739   ;        main.c:1412: if(strlen(buff)==11)
2E18 905E28    8740            mov     dptr,#_buff
2E1B 75F040    8741            mov     b,#0x40
2E1E 120000    8742            lcall   _strlen
2E21 AB82      8743            mov     r3,dpl
2E23 AC83      8744            mov     r4,dph
2E25 BB0BE8    8745            cjne    r3,#0x0B,L045033?
2E28 BC00E8    8746            cjne    r4,#0x00,L045033?
2E2B 8000      8747            sjmp    L045034?
2E2D           8748   L045033?:
2E2D 020000    8749            ljmp    L045006?
2E30           8750   L045034?:
2E30           8751   ;        main.c:1416: sscanf(buff,"%03d,%03d,%01d,%01d",&vx, &vy,&pick,&auto_mode);
2E30 7498      8752            mov     a,#_auto_mode
2E32 C0E0      8753            push    acc
2E34 7453      8754            mov     a,#(_auto_mode >> 8)
2E36 C0E0      8755            push    acc
2E38 E4        8756            clr     a
2E39 C0E0      8757            push    acc
2E3B 7458      8758            mov     a,#_pick
2E3D C0E0      8759            push    acc
2E3F 7453      8760            mov     a,#(_pick >> 8)
2E41 C0E0      8761            push    acc
2E43 E4        8762            clr     a
2E44 C0E0      8763            push    acc
2E46 74A8      8764            mov     a,#_vy
2E48 C0E0      8765            push    acc
2E4A 7456      8766            mov     a,#(_vy >> 8)
2E4C C0E0      8767            push    acc
2E4E E4        8768            clr     a
2E4F C0E0      8769            push    acc
2E51 74E8      8770            mov     a,#_vx
2E53 C0E0      8771            push    acc
2E55 7456      8772            mov     a,#(_vx >> 8)
2E57 C0E0      8773            push    acc
2E59 E4        8774            clr     a
2E5A C0E0      8775            push    acc
2E5C 7450      8776            mov     a,#__str_5
2E5E C0E0      8777            push    acc
2E60 741F      8778            mov     a,#(__str_5 >> 8)
2E62 C0E0      8779            push    acc
2E64 7480      8780            mov     a,#0x80
2E66 C0E0      8781            push    acc
2E68 7428      8782            mov     a,#_buff
2E6A C0E0      8783            push    acc
2E6C 745E      8784            mov     a,#(_buff >> 8)
2E6E C0E0      8785            push    acc
2E70 7440      8786            mov     a,#0x40
2E72 C0E0      8787            push    acc
2E74 120000    8788            lcall   _sscanf
2E77 E581      8789            mov     a,sp
2E79 24EE      8790            add     a,#0xee
2E7B F581      8791            mov     sp,a
2E7D           8792   ;        main.c:1417: pick = buff[8];
2E7D 905358    8793            mov     dptr,#_pick
2E80 7830      8794            mov     r0,#(_buff + 0x0008)
2E82 E6        8795            mov     a,@r0
2E83 F0        8796            movx    @dptr,a
2E84           8797   ;        main.c:1419: curr_angle = Joystick_Control(&vx, &vy);
2E84 7578A8    8798            mov     _Joystick_Control_PARM_2,#_vy
2E87 757956    8799            mov     (_Joystick_Control_PARM_2 + 1),#(_vy >> 8)
2E8A 757A00    8800            mov     (_Joystick_Control_PARM_2 + 2),#0x00
2E8D 9056E8    8801            mov     dptr,#_vx
2E90 75F000    8802            mov     b,#0x00
2E93 120000    8803            lcall   _Joystick_Control
2E96 AB82      8804            mov     r3,dpl
2E98 AC83      8805            mov     r4,dph
2E9A ADF0      8806            mov     r5,b
2E9C FE        8807            mov     r6,a
2E9D 905558    8808            mov     dptr,#_curr_angle
2EA0 EB        8809            mov     a,r3
2EA1 F0        8810            movx    @dptr,a
2EA2 A3        8811            inc     dptr
2EA3 EC        8812            mov     a,r4
2EA4 F0        8813            movx    @dptr,a
2EA5 A3        8814            inc     dptr
2EA6 ED        8815            mov     a,r5
2EA7 F0        8816            movx    @dptr,a
2EA8 A3        8817            inc     dptr
2EA9 EE        8818            mov     a,r6
2EAA F0        8819            movx    @dptr,a
2EAB 020000    8820            ljmp    L045016?
2EAE           8821   L045006?:
2EAE           8822   ;        main.c:1422: printf("*** BAD MESSAGE ***: %s\r\n", buff);
2EAE 7428      8823            mov     a,#_buff
2EB0 C0E0      8824            push    acc
2EB2 745E      8825            mov     a,#(_buff >> 8)
2EB4 C0E0      8826            push    acc
2EB6 7440      8827            mov     a,#0x40
2EB8 C0E0      8828            push    acc
2EBA 74A8      8829            mov     a,#__str_20
2EBC C0E0      8830            push    acc
2EBE 7430      8831            mov     a,#(__str_20 >> 8)
2EC0 C0E0      8832            push    acc
2EC2 7480      8833            mov     a,#0x80
2EC4 C0E0      8834            push    acc
2EC6 120000    8835            lcall   _printf
2EC9 E581      8836            mov     a,sp
2ECB 24FA      8837            add     a,#0xfa
2ECD F581      8838            mov     sp,a
2ECF 020000    8839            ljmp    L045016?
2ED2           8840   L045011?:
2ED2           8841   ;        main.c:1425: else if(c=='@') // Master wants slave data
2ED2 BA40E8    8842            cjne    r2,#0x40,L045035?
2ED5 8000      8843            sjmp    L045036?
2ED7           8844   L045035?:
2ED7 020000    8845            ljmp    L045016?
2EDA           8846   L045036?:
2EDA           8847   ;        main.c:1427: sprintf(buff, "0,00,%04ld,%05d,%03d,%03d,%03d\n", freq100, weight, (int)curr_angle, pwm_left, pwm_right);
2EDA 9058A8    8848            mov     dptr,#_pwm_right
2EDD E0        8849            movx    a,@dptr
2EDE FA        8850            mov     r2,a
2EDF 7B00      8851            mov     r3,#0x00
2EE1 9058E8    8852            mov     dptr,#_pwm_left
2EE4 E0        8853            movx    a,@dptr
2EE5 FC        8854            mov     r4,a
2EE6 8C20      8855            mov     _main_sloc0_1_0,r4
2EE8 752100    8856            mov     (_main_sloc0_1_0 + 1),#0x00
2EEB 905558    8857            mov     dptr,#_curr_angle
2EEE E0        8858            movx    a,@dptr
2EEF FE        8859            mov     r6,a
2EF0 A3        8860            inc     dptr
2EF1 E0        8861            movx    a,@dptr
2EF2 FF        8862            mov     r7,a
2EF3 A3        8863            inc     dptr
2EF4 E0        8864            movx    a,@dptr
2EF5 FC        8865            mov     r4,a
2EF6 A3        8866            inc     dptr
2EF7 E0        8867            movx    a,@dptr
2EF8 8E82      8868            mov     dpl,r6
2EFA 8F83      8869            mov     dph,r7
2EFC 8CF0      8870            mov     b,r4
2EFE C002      8871            push    ar2
2F00 C003      8872            push    ar3
2F02 120000    8873            lcall   ___fs2sint
2F05 AC82      8874            mov     r4,dpl
2F07 AD83      8875            mov     r5,dph
2F09 C020      8876            push    _main_sloc0_1_0
2F0B C021      8877            push    (_main_sloc0_1_0 + 1)
2F0D C004      8878            push    ar4
2F0F C005      8879            push    ar5
2F11 905418    8880            mov     dptr,#_weight
2F14 E0        8881            movx    a,@dptr
2F15 C0E0      8882            push    acc
2F17 A3        8883            inc     dptr
2F18 E0        8884            movx    a,@dptr
2F19 C0E0      8885            push    acc
2F1B 905DE8    8886            mov     dptr,#_freq100
2F1E E0        8887            movx    a,@dptr
2F1F C0E0      8888            push    acc
2F21 A3        8889            inc     dptr
2F22 E0        8890            movx    a,@dptr
2F23 C0E0      8891            push    acc
2F25 A3        8892            inc     dptr
2F26 E0        8893            movx    a,@dptr
2F27 C0E0      8894            push    acc
2F29 A3        8895            inc     dptr
2F2A E0        8896            movx    a,@dptr
2F2B C0E0      8897            push    acc
2F2D 7468      8898            mov     a,#__str_21
2F2F C0E0      8899            push    acc
2F31 7431      8900            mov     a,#(__str_21 >> 8)
2F33 C0E0      8901            push    acc
2F35 7480      8902            mov     a,#0x80
2F37 C0E0      8903            push    acc
2F39 7428      8904            mov     a,#_buff
2F3B C0E0      8905            push    acc
2F3D 745E      8906            mov     a,#(_buff >> 8)
2F3F C0E0      8907            push    acc
2F41 7440      8908            mov     a,#0x40
2F43 C0E0      8909            push    acc
2F45 120000    8910            lcall   _sprintf
2F48 E581      8911            mov     a,sp
2F4A 24EE      8912            add     a,#0xee
2F4C F581      8913            mov     sp,a
2F4E           8914   ;        main.c:1428: waitms(5); // The radio seems to need this delay...
2F4E 900005    8915            mov     dptr,#0x0005
2F51 120000    8916            lcall   _waitms
2F54           8917   ;        main.c:1429: sendstr1(buff);
2F54 905E28    8918            mov     dptr,#_buff
2F57 75F040    8919            mov     b,#0x40
2F5A 120000    8920            lcall   _sendstr1
2F5D 020000    8921            ljmp    L045016?
2F60           8922            rseg R_CSEG
2F60           8923   
0000           8924            rseg R_XINIT
0000           8925   __xinit__pwm_counter:
0000 0000      8926            db 0x00,0x00    ; 0
0002           8927   __xinit__servo_counter:
0002 0000      8928            db 0x00,0x00    ; 0
0004           8929   __xinit__pwm_left:
0004 00        8930            db 0x00         ; 0
0005           8931   __xinit__pwm_right:
0005 00        8932            db 0x00         ; 0
0006           8933   __xinit__L_motor_dir:
0006 01        8934            db 0x01         ; 1
0007           8935   __xinit__R_motor_dir:
0007 01        8936            db 0x01         ; 1
0008           8937   __xinit__servo_base:
0008 32        8938            db 0x32         ; 50
0009           8939   __xinit__servo_arm:
0009 32        8940            db 0x32         ; 50
000A           8941   __xinit__vx_thres:
000A A100      8942            db 0xA1,0x00    ;  161
000C           8943   __xinit__vy_thres:
000C A600      8944            db 0xA6,0x00    ;  166
000E           8945   __xinit__vx:
000E 0000      8946            db 0x00,0x00    ;  0
0010           8947   __xinit__vy:
0010 0000      8948            db 0x00,0x00    ;  0
0012           8949   __xinit__fre_mea_count:
0012 0000      8950            db 0x00,0x00    ; 0
0014           8951   __xinit__weight_mea_count:
0014 0000      8952            db 0x00,0x00    ; 0
0016           8953   __xinit__seed:
0016 3930      8954            db 0x39,0x30    ; 12345
0018           8955   __xinit__pwm_corr:
0018 3333733F  8956            db 0x33,0x33,0x73,0x3F  ;  9.500000e-001
001C           8957   __xinit__curr_angle:
001C 00000000  8958            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0020           8959   __xinit__raw_angle:
0020 00000000  8960            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0024           8961   __xinit__last_raw_angle:
0024 00000000  8962            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0028           8963   __xinit__angle_diff:
0028 00000000  8964            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
002C           8965   __xinit__mea_yes:
002C 01        8966            db 0x01         ;  1
002D           8967   __xinit__weight:
002D 0000      8968            db 0x00,0x00    ; 0
002F           8969   __xinit__duration:
002F 00000000  8970            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0033           8971   __xinit__auto_mode:
0033 0000      8972            db 0x00,0x00    ;  0
0035           8973   __xinit__pick:
0035 00        8974            db 0x00         ;  0
0036           8975   
0000           8976            rseg R_CONST
0000           8977   __str_0:
0000 4572726F  8978            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
0035 0D        8979            db 0x0D
0036 0A        8980            db 0x0A
0037 00        8981            db 0x00
0038           8982   __str_1:
0038 424D4D31  8983            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
0068 0D        8984            db 0x0D
0069 0A        8985            db 0x0A
006A 00        8986            db 0x00
006B           8987   __str_2:
006B 436F6D6D  8988            db 'Command: %s'
     616E643A
     202573
0076 00        8989            db 0x00
0077           8990   __str_3:
0077 52657370  8991            db 'Response: %s'
     6F6E7365
     3A202573
0083 0D        8992            db 0x0D
0084 0A        8993            db 0x0A
0085 00        8994            db 0x00
0086           8995   __str_4:
0086 41542B44  8996            db 'AT+DVID0000'
     56494430
     303030
0091 0D        8997            db 0x0D
0092 0A        8998            db 0x0A
0093 00        8999            db 0x00
0094           9000   __str_5:
0094 25303364  9001            db '%03d,%03d,%01d,%01d'
     2C253033
     642C2530
     31642C25
     303164
00A7 00        9002            db 0x00
00A8           9003   __str_6:
00A8 25303164  9004            db '%01d,%02d,%ld,%05d,%03d'
     2C253032
     642C256C
     642C2530
     35642C25
     303364
00BF 0A        9005            db 0x0A
00C0 00        9006            db 0x00
00C1           9007   __str_7:
00C1 663A2530  9008            db 'f:%04ld, d1:%d, d2:%d, bound_dectect: %d, distance: %d'
     346C642C
     2064313A
     25642C20
     64323A25
     642C2062
     6F756E64
     5F646563
     74656374
     3A202564
     2C206469
     7374616E
     63653A20
     2564
00F7 0D        9009            db 0x0D
00F8 0A        9010            db 0x0A
00F9 00        9011            db 0x00
00FA           9012   __str_8:
00FA 256420    9013            db '%d '
00FD 0D        9014            db 0x0D
00FE 0A        9015            db 0x0A
00FF 00        9016            db 0x00
0100           9017   __str_9:
0100 302C3230  9018            db '0,20,%04ld,%05d,%03d,%03d,%03d'
     2C253034
     6C642C25
     3035642C
     25303364
     2C253033
     642C2530
     3364
011E 0A        9019            db 0x0A
011F 00        9020            db 0x00
0120           9021   __str_10:
0120 2573      9022            db '%s'
0122 0D        9023            db 0x0D
0123 0A        9024            db 0x0A
0124 00        9025            db 0x00
0125           9026   __str_11:
0125 41542B56  9027            db 'AT+VER'
     4552
012B 0D        9028            db 0x0D
012C 0A        9029            db 0x0A
012D 00        9030            db 0x00
012E           9031   __str_12:
012E 41542B42  9032            db 'AT+BAUD'
     415544
0135 0D        9033            db 0x0D
0136 0A        9034            db 0x0A
0137 00        9035            db 0x00
0138           9036   __str_13:
0138 41542B52  9037            db 'AT+RFID'
     464944
013F 0D        9038            db 0x0D
0140 0A        9039            db 0x0A
0141 00        9040            db 0x00
0142           9041   __str_14:
0142 41542B44  9042            db 'AT+DVID'
     564944
0149 0D        9043            db 0x0D
014A 0A        9044            db 0x0A
014B 00        9045            db 0x00
014C           9046   __str_15:
014C 41542B52  9047            db 'AT+RFC002'
     46433030
     32
0155 0D        9048            db 0x0D
0156 0A        9049            db 0x0A
0157 00        9050            db 0x00
0158           9051   __str_16:
0158 41542B50  9052            db 'AT+POWE'
     4F5745
015F 0D        9053            db 0x0D
0160 0A        9054            db 0x0A
0161 00        9055            db 0x00
0162           9056   __str_17:
0162 41542B43  9057            db 'AT+CLSS'
     4C5353
0169 0D        9058            db 0x0D
016A 0A        9059            db 0x0A
016B 00        9060            db 0x00
016C           9061   __str_18:
016C 41542B44  9062            db 'AT+DVIDEF11'
     56494445
     463131
0177 0D        9063            db 0x0D
0178 0A        9064            db 0x0A
0179 00        9065            db 0x00
017A           9066   __str_19:
017A 616E676C  9067            db 'angle: %d, raw_angle: %d'
     653A2025
     642C2072
     61775F61
     6E676C65
     3A202564
0192 0D        9068            db 0x0D
0193 0A        9069            db 0x0A
0194 00        9070            db 0x00
0195           9071   __str_20:
0195 2A2A2A20  9072            db '*** BAD MESSAGE ***: %s'
     42414420
     4D455353
     41474520
     2A2A2A3A
     202573
01AC 0D        9073            db 0x0D
01AD 0A        9074            db 0x0A
01AE 00        9075            db 0x00
01AF           9076   __str_21:
01AF 302C3030  9077            db '0,00,%04ld,%05d,%03d,%03d,%03d'
     2C253034
     6C642C25
     3035642C
     25303364
     2C253033
     642C2530
     3364
01CD 0A        9078            db 0x0A
01CE 00        9079            db 0x00
01CF           9080   
0096           9081            CSEG
0096           9082   
0096           9083   end
