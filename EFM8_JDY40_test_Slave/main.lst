0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Apr 01 19:46:15 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _check_bound_PARM_2
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Joystick_Control
0000             30            public _measure_distance
0000             31            public _Auto_mode_slave
0000             32            public _Read_angle
0000             33            public _get_random_90_250
0000             34            public _simple_rand
0000             35            public _Move_forward
0000             36            public _Right_angle
0000             37            public _Move_back_ms
0000             38            public _Init_all
0000             39            public _check_bound
0000             40            public _servo_pick
0000             41            public _Timer5_ISR
0000             42            public _ReadHX711
0000             43            public _ADC_at_Pin
0000             44            public _InitPinADC
0000             45            public _InitADC
0000             46            public _Set_Pin_Input
0000             47            public _Set_Pin_Output
0000             48            public _ReceptionOff
0000             49            public _SendATCommand
0000             50            public _waitms_or_RI1
0000             51            public _RXU1
0000             52            public _getstr1
0000             53            public _getchar1_with_timeout
0000             54            public _getchar1
0000             55            public _sendstr1
0000             56            public _putchar1
0000             57            public _UART1_Init
0000             58            public _BMM150_Read_Data
0000             59            public _BMM150_compensate_y
0000             60            public _BMM150_compensate_x
0000             61            public _BMM150_Init
0000             62            public _BMM150_Read_Trim_Registers
0000             63            public _SPI_write
0000             64            public _SPI_read
0000             65            public _SPI_transfer
0000             66            public _waitms
0000             67            public _Timer3us
0000             68            public __c51_external_startup
0000             69            public _distance
0000             70            public _duration
0000             71            public _weight
0000             72            public _mea_yes
0000             73            public _angle_diff
0000             74            public _last_raw_angle
0000             75            public _raw_angle
0000             76            public _curr_angle
0000             77            public _pwm_corr
0000             78            public _seed
0000             79            public _weight_mea_count
0000             80            public _fre_mea_count
0000             81            public _vy
0000             82            public _vx
0000             83            public _vy_thres
0000             84            public _vx_thres
0000             85            public _servo_arm
0000             86            public _servo_base
0000             87            public _R_motor_dir
0000             88            public _L_motor_dir
0000             89            public _pwm_right
0000             90            public _pwm_left
0000             91            public _servo_counter
0000             92            public _pwm_counter
0000             93            public _overflow_count
0000             94            public _temp
0000             95            public _dig_xyz1
0000             96            public _dig_xy2
0000             97            public _dig_xy1
0000             98            public _dig_z4
0000             99            public _dig_z3
0000            100            public _dig_z2
0000            101            public _dig_z1
0000            102            public _dig_y2
0000            103            public _dig_y1
0000            104            public _dig_x2
0000            105            public _dig_x1
0000            106            public _d2
0000            107            public _d1
0000            108            public _freq100
0000            109            public _buff
0000            110            public _Joystick_Control_PARM_2
0000            111            public _getstr1_PARM_2
0000            112            public _BMM150_Read_Data_PARM_2
0000            113            public _BMM150_compensate_y_PARM_2
0000            114            public _BMM150_compensate_x_PARM_2
0000            115            public _SPI_write_PARM_2
0000            116   ;--------------------------------------------------------
0000            117   ; Special Function Registers
0000            118   ;--------------------------------------------------------
0000            119   _ACC            DATA 0xe0
0000            120   _ADC0ASAH       DATA 0xb6
0000            121   _ADC0ASAL       DATA 0xb5
0000            122   _ADC0ASCF       DATA 0xa1
0000            123   _ADC0ASCT       DATA 0xc7
0000            124   _ADC0CF0        DATA 0xbc
0000            125   _ADC0CF1        DATA 0xb9
0000            126   _ADC0CF2        DATA 0xdf
0000            127   _ADC0CN0        DATA 0xe8
0000            128   _ADC0CN1        DATA 0xb2
0000            129   _ADC0CN2        DATA 0xb3
0000            130   _ADC0GTH        DATA 0xc4
0000            131   _ADC0GTL        DATA 0xc3
0000            132   _ADC0H          DATA 0xbe
0000            133   _ADC0L          DATA 0xbd
0000            134   _ADC0LTH        DATA 0xc6
0000            135   _ADC0LTL        DATA 0xc5
0000            136   _ADC0MX         DATA 0xbb
0000            137   _B              DATA 0xf0
0000            138   _CKCON0         DATA 0x8e
0000            139   _CKCON1         DATA 0xa6
0000            140   _CLEN0          DATA 0xc6
0000            141   _CLIE0          DATA 0xc7
0000            142   _CLIF0          DATA 0xe8
0000            143   _CLKSEL         DATA 0xa9
0000            144   _CLOUT0         DATA 0xd1
0000            145   _CLU0CF         DATA 0xb1
0000            146   _CLU0FN         DATA 0xaf
0000            147   _CLU0MX         DATA 0x84
0000            148   _CLU1CF         DATA 0xb3
0000            149   _CLU1FN         DATA 0xb2
0000            150   _CLU1MX         DATA 0x85
0000            151   _CLU2CF         DATA 0xb6
0000            152   _CLU2FN         DATA 0xb5
0000            153   _CLU2MX         DATA 0x91
0000            154   _CLU3CF         DATA 0xbf
0000            155   _CLU3FN         DATA 0xbe
0000            156   _CLU3MX         DATA 0xae
0000            157   _CMP0CN0        DATA 0x9b
0000            158   _CMP0CN1        DATA 0x99
0000            159   _CMP0MD         DATA 0x9d
0000            160   _CMP0MX         DATA 0x9f
0000            161   _CMP1CN0        DATA 0xbf
0000            162   _CMP1CN1        DATA 0xac
0000            163   _CMP1MD         DATA 0xab
0000            164   _CMP1MX         DATA 0xaa
0000            165   _CRC0CN0        DATA 0xce
0000            166   _CRC0CN1        DATA 0x86
0000            167   _CRC0CNT        DATA 0xd3
0000            168   _CRC0DAT        DATA 0xcb
0000            169   _CRC0FLIP       DATA 0xcf
0000            170   _CRC0IN         DATA 0xca
0000            171   _CRC0ST         DATA 0xd2
0000            172   _DAC0CF0        DATA 0x91
0000            173   _DAC0CF1        DATA 0x92
0000            174   _DAC0H          DATA 0x85
0000            175   _DAC0L          DATA 0x84
0000            176   _DAC1CF0        DATA 0x93
0000            177   _DAC1CF1        DATA 0x94
0000            178   _DAC1H          DATA 0x8a
0000            179   _DAC1L          DATA 0x89
0000            180   _DAC2CF0        DATA 0x95
0000            181   _DAC2CF1        DATA 0x96
0000            182   _DAC2H          DATA 0x8c
0000            183   _DAC2L          DATA 0x8b
0000            184   _DAC3CF0        DATA 0x9a
0000            185   _DAC3CF1        DATA 0x9c
0000            186   _DAC3H          DATA 0x8e
0000            187   _DAC3L          DATA 0x8d
0000            188   _DACGCF0        DATA 0x88
0000            189   _DACGCF1        DATA 0x98
0000            190   _DACGCF2        DATA 0xa2
0000            191   _DERIVID        DATA 0xad
0000            192   _DEVICEID       DATA 0xb5
0000            193   _DPH            DATA 0x83
0000            194   _DPL            DATA 0x82
0000            195   _EIE1           DATA 0xe6
0000            196   _EIE2           DATA 0xf3
0000            197   _EIP1           DATA 0xbb
0000            198   _EIP1H          DATA 0xee
0000            199   _EIP2           DATA 0xed
0000            200   _EIP2H          DATA 0xf6
0000            201   _EMI0CN         DATA 0xe7
0000            202   _FLKEY          DATA 0xb7
0000            203   _HFO0CAL        DATA 0xc7
0000            204   _HFO1CAL        DATA 0xd6
0000            205   _HFOCN          DATA 0xef
0000            206   _I2C0ADM        DATA 0xff
0000            207   _I2C0CN0        DATA 0xba
0000            208   _I2C0DIN        DATA 0xbc
0000            209   _I2C0DOUT       DATA 0xbb
0000            210   _I2C0FCN0       DATA 0xad
0000            211   _I2C0FCN1       DATA 0xab
0000            212   _I2C0FCT        DATA 0xf5
0000            213   _I2C0SLAD       DATA 0xbd
0000            214   _I2C0STAT       DATA 0xb9
0000            215   _IE             DATA 0xa8
0000            216   _IP             DATA 0xb8
0000            217   _IPH            DATA 0xf2
0000            218   _IT01CF         DATA 0xe4
0000            219   _LFO0CN         DATA 0xb1
0000            220   _P0             DATA 0x80
0000            221   _P0MASK         DATA 0xfe
0000            222   _P0MAT          DATA 0xfd
0000            223   _P0MDIN         DATA 0xf1
0000            224   _P0MDOUT        DATA 0xa4
0000            225   _P0SKIP         DATA 0xd4
0000            226   _P1             DATA 0x90
0000            227   _P1MASK         DATA 0xee
0000            228   _P1MAT          DATA 0xed
0000            229   _P1MDIN         DATA 0xf2
0000            230   _P1MDOUT        DATA 0xa5
0000            231   _P1SKIP         DATA 0xd5
0000            232   _P2             DATA 0xa0
0000            233   _P2MASK         DATA 0xfc
0000            234   _P2MAT          DATA 0xfb
0000            235   _P2MDIN         DATA 0xf3
0000            236   _P2MDOUT        DATA 0xa6
0000            237   _P2SKIP         DATA 0xcc
0000            238   _P3             DATA 0xb0
0000            239   _P3MDIN         DATA 0xf4
0000            240   _P3MDOUT        DATA 0x9c
0000            241   _PCA0CENT       DATA 0x9e
0000            242   _PCA0CLR        DATA 0x9c
0000            243   _PCA0CN0        DATA 0xd8
0000            244   _PCA0CPH0       DATA 0xfc
0000            245   _PCA0CPH1       DATA 0xea
0000            246   _PCA0CPH2       DATA 0xec
0000            247   _PCA0CPH3       DATA 0xf5
0000            248   _PCA0CPH4       DATA 0x85
0000            249   _PCA0CPH5       DATA 0xde
0000            250   _PCA0CPL0       DATA 0xfb
0000            251   _PCA0CPL1       DATA 0xe9
0000            252   _PCA0CPL2       DATA 0xeb
0000            253   _PCA0CPL3       DATA 0xf4
0000            254   _PCA0CPL4       DATA 0x84
0000            255   _PCA0CPL5       DATA 0xdd
0000            256   _PCA0CPM0       DATA 0xda
0000            257   _PCA0CPM1       DATA 0xdb
0000            258   _PCA0CPM2       DATA 0xdc
0000            259   _PCA0CPM3       DATA 0xae
0000            260   _PCA0CPM4       DATA 0xaf
0000            261   _PCA0CPM5       DATA 0xcc
0000            262   _PCA0H          DATA 0xfa
0000            263   _PCA0L          DATA 0xf9
0000            264   _PCA0MD         DATA 0xd9
0000            265   _PCA0POL        DATA 0x96
0000            266   _PCA0PWM        DATA 0xf7
0000            267   _PCON0          DATA 0x87
0000            268   _PCON1          DATA 0xcd
0000            269   _PFE0CN         DATA 0xc1
0000            270   _PRTDRV         DATA 0xf6
0000            271   _PSCTL          DATA 0x8f
0000            272   _PSTAT0         DATA 0xaa
0000            273   _PSW            DATA 0xd0
0000            274   _REF0CN         DATA 0xd1
0000            275   _REG0CN         DATA 0xc9
0000            276   _REVID          DATA 0xb6
0000            277   _RSTSRC         DATA 0xef
0000            278   _SBCON1         DATA 0x94
0000            279   _SBRLH1         DATA 0x96
0000            280   _SBRLL1         DATA 0x95
0000            281   _SBUF           DATA 0x99
0000            282   _SBUF0          DATA 0x99
0000            283   _SBUF1          DATA 0x92
0000            284   _SCON           DATA 0x98
0000            285   _SCON0          DATA 0x98
0000            286   _SCON1          DATA 0xc8
0000            287   _SFRPAGE        DATA 0xa7
0000            288   _SFRPGCN        DATA 0xbc
0000            289   _SFRSTACK       DATA 0xd7
0000            290   _SMB0ADM        DATA 0xd6
0000            291   _SMB0ADR        DATA 0xd7
0000            292   _SMB0CF         DATA 0xc1
0000            293   _SMB0CN0        DATA 0xc0
0000            294   _SMB0DAT        DATA 0xc2
0000            295   _SMB0FCN0       DATA 0xc3
0000            296   _SMB0FCN1       DATA 0xc4
0000            297   _SMB0FCT        DATA 0xef
0000            298   _SMB0RXLN       DATA 0xc5
0000            299   _SMB0TC         DATA 0xac
0000            300   _SMOD1          DATA 0x93
0000            301   _SP             DATA 0x81
0000            302   _SPI0CFG        DATA 0xa1
0000            303   _SPI0CKR        DATA 0xa2
0000            304   _SPI0CN0        DATA 0xf8
0000            305   _SPI0DAT        DATA 0xa3
0000            306   _SPI0FCN0       DATA 0x9a
0000            307   _SPI0FCN1       DATA 0x9b
0000            308   _SPI0FCT        DATA 0xf7
0000            309   _SPI0PCF        DATA 0xdf
0000            310   _TCON           DATA 0x88
0000            311   _TH0            DATA 0x8c
0000            312   _TH1            DATA 0x8d
0000            313   _TL0            DATA 0x8a
0000            314   _TL1            DATA 0x8b
0000            315   _TMOD           DATA 0x89
0000            316   _TMR2CN0        DATA 0xc8
0000            317   _TMR2CN1        DATA 0xfd
0000            318   _TMR2H          DATA 0xcf
0000            319   _TMR2L          DATA 0xce
0000            320   _TMR2RLH        DATA 0xcb
0000            321   _TMR2RLL        DATA 0xca
0000            322   _TMR3CN0        DATA 0x91
0000            323   _TMR3CN1        DATA 0xfe
0000            324   _TMR3H          DATA 0x95
0000            325   _TMR3L          DATA 0x94
0000            326   _TMR3RLH        DATA 0x93
0000            327   _TMR3RLL        DATA 0x92
0000            328   _TMR4CN0        DATA 0x98
0000            329   _TMR4CN1        DATA 0xff
0000            330   _TMR4H          DATA 0xa5
0000            331   _TMR4L          DATA 0xa4
0000            332   _TMR4RLH        DATA 0xa3
0000            333   _TMR4RLL        DATA 0xa2
0000            334   _TMR5CN0        DATA 0xc0
0000            335   _TMR5CN1        DATA 0xf1
0000            336   _TMR5H          DATA 0xd5
0000            337   _TMR5L          DATA 0xd4
0000            338   _TMR5RLH        DATA 0xd3
0000            339   _TMR5RLL        DATA 0xd2
0000            340   _UART0PCF       DATA 0xd9
0000            341   _UART1FCN0      DATA 0x9d
0000            342   _UART1FCN1      DATA 0xd8
0000            343   _UART1FCT       DATA 0xfa
0000            344   _UART1LIN       DATA 0x9e
0000            345   _UART1PCF       DATA 0xda
0000            346   _VDM0CN         DATA 0xff
0000            347   _WDTCN          DATA 0x97
0000            348   _XBR0           DATA 0xe1
0000            349   _XBR1           DATA 0xe2
0000            350   _XBR2           DATA 0xe3
0000            351   _XOSC0CN        DATA 0x86
0000            352   _DPTR           DATA 0x8382
0000            353   _TMR2RL         DATA 0xcbca
0000            354   _TMR3RL         DATA 0x9392
0000            355   _TMR4RL         DATA 0xa3a2
0000            356   _TMR5RL         DATA 0xd3d2
0000            357   _TMR0           DATA 0x8c8a
0000            358   _TMR1           DATA 0x8d8b
0000            359   _TMR2           DATA 0xcfce
0000            360   _TMR3           DATA 0x9594
0000            361   _TMR4           DATA 0xa5a4
0000            362   _TMR5           DATA 0xd5d4
0000            363   _SBRL1          DATA 0x9695
0000            364   _PCA0           DATA 0xfaf9
0000            365   _PCA0CP0        DATA 0xfcfb
0000            366   _PCA0CP1        DATA 0xeae9
0000            367   _PCA0CP2        DATA 0xeceb
0000            368   _PCA0CP3        DATA 0xf5f4
0000            369   _PCA0CP4        DATA 0x8584
0000            370   _PCA0CP5        DATA 0xdedd
0000            371   _ADC0ASA        DATA 0xb6b5
0000            372   _ADC0GT         DATA 0xc4c3
0000            373   _ADC0           DATA 0xbebd
0000            374   _ADC0LT         DATA 0xc6c5
0000            375   _DAC0           DATA 0x8584
0000            376   _DAC1           DATA 0x8a89
0000            377   _DAC2           DATA 0x8c8b
0000            378   _DAC3           DATA 0x8e8d
0000            379   ;--------------------------------------------------------
0000            380   ; special function bits
0000            381   ;--------------------------------------------------------
0000            382   _ACC_0          BIT 0xe0
0000            383   _ACC_1          BIT 0xe1
0000            384   _ACC_2          BIT 0xe2
0000            385   _ACC_3          BIT 0xe3
0000            386   _ACC_4          BIT 0xe4
0000            387   _ACC_5          BIT 0xe5
0000            388   _ACC_6          BIT 0xe6
0000            389   _ACC_7          BIT 0xe7
0000            390   _TEMPE          BIT 0xe8
0000            391   _ADGN0          BIT 0xe9
0000            392   _ADGN1          BIT 0xea
0000            393   _ADWINT         BIT 0xeb
0000            394   _ADBUSY         BIT 0xec
0000            395   _ADINT          BIT 0xed
0000            396   _IPOEN          BIT 0xee
0000            397   _ADEN           BIT 0xef
0000            398   _B_0            BIT 0xf0
0000            399   _B_1            BIT 0xf1
0000            400   _B_2            BIT 0xf2
0000            401   _B_3            BIT 0xf3
0000            402   _B_4            BIT 0xf4
0000            403   _B_5            BIT 0xf5
0000            404   _B_6            BIT 0xf6
0000            405   _B_7            BIT 0xf7
0000            406   _C0FIF          BIT 0xe8
0000            407   _C0RIF          BIT 0xe9
0000            408   _C1FIF          BIT 0xea
0000            409   _C1RIF          BIT 0xeb
0000            410   _C2FIF          BIT 0xec
0000            411   _C2RIF          BIT 0xed
0000            412   _C3FIF          BIT 0xee
0000            413   _C3RIF          BIT 0xef
0000            414   _D1SRC0         BIT 0x88
0000            415   _D1SRC1         BIT 0x89
0000            416   _D1AMEN         BIT 0x8a
0000            417   _D01REFSL       BIT 0x8b
0000            418   _D3SRC0         BIT 0x8c
0000            419   _D3SRC1         BIT 0x8d
0000            420   _D3AMEN         BIT 0x8e
0000            421   _D23REFSL       BIT 0x8f
0000            422   _D0UDIS         BIT 0x98
0000            423   _D1UDIS         BIT 0x99
0000            424   _D2UDIS         BIT 0x9a
0000            425   _D3UDIS         BIT 0x9b
0000            426   _EX0            BIT 0xa8
0000            427   _ET0            BIT 0xa9
0000            428   _EX1            BIT 0xaa
0000            429   _ET1            BIT 0xab
0000            430   _ES0            BIT 0xac
0000            431   _ET2            BIT 0xad
0000            432   _ESPI0          BIT 0xae
0000            433   _EA             BIT 0xaf
0000            434   _PX0            BIT 0xb8
0000            435   _PT0            BIT 0xb9
0000            436   _PX1            BIT 0xba
0000            437   _PT1            BIT 0xbb
0000            438   _PS0            BIT 0xbc
0000            439   _PT2            BIT 0xbd
0000            440   _PSPI0          BIT 0xbe
0000            441   _P0_0           BIT 0x80
0000            442   _P0_1           BIT 0x81
0000            443   _P0_2           BIT 0x82
0000            444   _P0_3           BIT 0x83
0000            445   _P0_4           BIT 0x84
0000            446   _P0_5           BIT 0x85
0000            447   _P0_6           BIT 0x86
0000            448   _P0_7           BIT 0x87
0000            449   _P1_0           BIT 0x90
0000            450   _P1_1           BIT 0x91
0000            451   _P1_2           BIT 0x92
0000            452   _P1_3           BIT 0x93
0000            453   _P1_4           BIT 0x94
0000            454   _P1_5           BIT 0x95
0000            455   _P1_6           BIT 0x96
0000            456   _P1_7           BIT 0x97
0000            457   _P2_0           BIT 0xa0
0000            458   _P2_1           BIT 0xa1
0000            459   _P2_2           BIT 0xa2
0000            460   _P2_3           BIT 0xa3
0000            461   _P2_4           BIT 0xa4
0000            462   _P2_5           BIT 0xa5
0000            463   _P2_6           BIT 0xa6
0000            464   _P3_0           BIT 0xb0
0000            465   _P3_1           BIT 0xb1
0000            466   _P3_2           BIT 0xb2
0000            467   _P3_3           BIT 0xb3
0000            468   _P3_4           BIT 0xb4
0000            469   _P3_7           BIT 0xb7
0000            470   _CCF0           BIT 0xd8
0000            471   _CCF1           BIT 0xd9
0000            472   _CCF2           BIT 0xda
0000            473   _CCF3           BIT 0xdb
0000            474   _CCF4           BIT 0xdc
0000            475   _CCF5           BIT 0xdd
0000            476   _CR             BIT 0xde
0000            477   _CF             BIT 0xdf
0000            478   _PARITY         BIT 0xd0
0000            479   _F1             BIT 0xd1
0000            480   _OV             BIT 0xd2
0000            481   _RS0            BIT 0xd3
0000            482   _RS1            BIT 0xd4
0000            483   _F0             BIT 0xd5
0000            484   _AC             BIT 0xd6
0000            485   _CY             BIT 0xd7
0000            486   _RI             BIT 0x98
0000            487   _TI             BIT 0x99
0000            488   _RB8            BIT 0x9a
0000            489   _TB8            BIT 0x9b
0000            490   _REN            BIT 0x9c
0000            491   _CE             BIT 0x9d
0000            492   _SMODE          BIT 0x9e
0000            493   _RI1            BIT 0xc8
0000            494   _TI1            BIT 0xc9
0000            495   _RBX1           BIT 0xca
0000            496   _TBX1           BIT 0xcb
0000            497   _REN1           BIT 0xcc
0000            498   _PERR1          BIT 0xcd
0000            499   _OVR1           BIT 0xce
0000            500   _SI             BIT 0xc0
0000            501   _ACK            BIT 0xc1
0000            502   _ARBLOST        BIT 0xc2
0000            503   _ACKRQ          BIT 0xc3
0000            504   _STO            BIT 0xc4
0000            505   _STA            BIT 0xc5
0000            506   _TXMODE         BIT 0xc6
0000            507   _MASTER         BIT 0xc7
0000            508   _SPIEN          BIT 0xf8
0000            509   _TXNF           BIT 0xf9
0000            510   _NSSMD0         BIT 0xfa
0000            511   _NSSMD1         BIT 0xfb
0000            512   _RXOVRN         BIT 0xfc
0000            513   _MODF           BIT 0xfd
0000            514   _WCOL           BIT 0xfe
0000            515   _SPIF           BIT 0xff
0000            516   _IT0            BIT 0x88
0000            517   _IE0            BIT 0x89
0000            518   _IT1            BIT 0x8a
0000            519   _IE1            BIT 0x8b
0000            520   _TR0            BIT 0x8c
0000            521   _TF0            BIT 0x8d
0000            522   _TR1            BIT 0x8e
0000            523   _TF1            BIT 0x8f
0000            524   _T2XCLK0        BIT 0xc8
0000            525   _T2XCLK1        BIT 0xc9
0000            526   _TR2            BIT 0xca
0000            527   _T2SPLIT        BIT 0xcb
0000            528   _TF2CEN         BIT 0xcc
0000            529   _TF2LEN         BIT 0xcd
0000            530   _TF2L           BIT 0xce
0000            531   _TF2H           BIT 0xcf
0000            532   _T4XCLK0        BIT 0x98
0000            533   _T4XCLK1        BIT 0x99
0000            534   _TR4            BIT 0x9a
0000            535   _T4SPLIT        BIT 0x9b
0000            536   _TF4CEN         BIT 0x9c
0000            537   _TF4LEN         BIT 0x9d
0000            538   _TF4L           BIT 0x9e
0000            539   _TF4H           BIT 0x9f
0000            540   _T5XCLK0        BIT 0xc0
0000            541   _T5XCLK1        BIT 0xc1
0000            542   _TR5            BIT 0xc2
0000            543   _T5SPLIT        BIT 0xc3
0000            544   _TF5CEN         BIT 0xc4
0000            545   _TF5LEN         BIT 0xc5
0000            546   _TF5L           BIT 0xc6
0000            547   _TF5H           BIT 0xc7
0000            548   _RIE            BIT 0xd8
0000            549   _RXTO0          BIT 0xd9
0000            550   _RXTO1          BIT 0xda
0000            551   _RFRQ           BIT 0xdb
0000            552   _TIE            BIT 0xdc
0000            553   _TXHOLD         BIT 0xdd
0000            554   _TXNF1          BIT 0xde
0000            555   _TFRQ           BIT 0xdf
0000            556   ;--------------------------------------------------------
0000            557   ; overlayable register banks
0000            558   ;--------------------------------------------------------
0000            559            rbank0 segment data overlay
0000            560   ;--------------------------------------------------------
0000            561   ; overlayable bit register bank
0000            562   ;--------------------------------------------------------
0000            563            rseg BIT_BANK
0000            564   bits:
0000            565            ds 1
0001            566            b0 equ  bits.0 
0001            567            b1 equ  bits.1 
0001            568            b2 equ  bits.2 
0001            569            b3 equ  bits.3 
0001            570            b4 equ  bits.4 
0001            571            b5 equ  bits.5 
0001            572            b6 equ  bits.6 
0001            573            b7 equ  bits.7 
0001            574   ;--------------------------------------------------------
0001            575   ; internal ram data
0001            576   ;--------------------------------------------------------
0000            577            rseg R_DSEG
0000            578   _SPI_write_PARM_2:
0000            579            ds 1
0001            580   _BMM150_compensate_x_PARM_2:
0001            581            ds 3
0004            582   _BMM150_compensate_x_sloc0_1_0:
0004            583            ds 4
0008            584   _BMM150_compensate_y_PARM_2:
0008            585            ds 3
000B            586   _BMM150_compensate_y_sloc0_1_0:
000B            587            ds 4
000F            588   _BMM150_Read_Data_PARM_2:
000F            589            ds 3
0012            590   _BMM150_Read_Data_mag_x_1_123:
0012            591            ds 3
0015            592   _getstr1_PARM_2:
0015            593            ds 1
0016            594   _Read_angle_sloc0_1_0:
0016            595            ds 4
001A            596   _Auto_mode_slave_sloc0_1_0:
001A            597            ds 2
001C            598   _Joystick_Control_PARM_2:
001C            599            ds 3
001F            600   _Joystick_Control_sloc0_1_0:
001F            601            ds 2
0021            602   _Joystick_Control_sloc1_1_0:
0021            603            ds 2
0023            604   _Joystick_Control_sloc2_1_0:
0023            605            ds 1
0024            606   _Joystick_Control_sloc3_1_0:
0024            607            ds 4
0028            608   _Joystick_Control_sloc4_1_0:
0028            609            ds 4
002C            610   _Joystick_Control_sloc5_1_0:
002C            611            ds 4
0030            612   _main_pick_char_1_248:
0030            613            ds 1
0031            614   ;--------------------------------------------------------
0031            615   ; overlayable items in internal ram 
0031            616   ;--------------------------------------------------------
0000            617            rseg    R_OSEG
0000            618            rseg    R_OSEG
0000            619            rseg    R_OSEG
0000            620            rseg    R_OSEG
0000            621            rseg    R_OSEG
0000            622            rseg    R_OSEG
0000            623   _InitPinADC_PARM_2:
0000            624            ds 1
0001            625            rseg    R_OSEG
0001            626            rseg    R_OSEG
0001            627   _check_bound_PARM_2:
0001            628            ds 2
0003            629   ;--------------------------------------------------------
0003            630   ; indirectly addressable internal ram data
0003            631   ;--------------------------------------------------------
0000            632            rseg R_ISEG
0000            633   _buff:
0000            634            ds 20
0014            635   ;--------------------------------------------------------
0014            636   ; absolute internal ram data
0014            637   ;--------------------------------------------------------
0000            638            DSEG
0000            639   ;--------------------------------------------------------
0000            640   ; bit data
0000            641   ;--------------------------------------------------------
0000            642            rseg R_BSEG
0000            643   ;--------------------------------------------------------
0000            644   ; paged external ram data
0000            645   ;--------------------------------------------------------
0000            646            rseg R_PSEG
0000            647   ;--------------------------------------------------------
0000            648   ; external ram data
0000            649   ;--------------------------------------------------------
0000            650            rseg R_XSEG
0000            651   _freq100:
0000            652            ds 4
0004            653   _d1:
0004            654            ds 2
0006            655   _d2:
0006            656            ds 2
0008            657   _dig_x1:
0008            658            ds 1
0009            659   _dig_x2:
0009            660            ds 1
000A            661   _dig_y1:
000A            662            ds 1
000B            663   _dig_y2:
000B            664            ds 1
000C            665   _dig_z1:
000C            666            ds 2
000E            667   _dig_z2:
000E            668            ds 2
0010            669   _dig_z3:
0010            670            ds 2
0012            671   _dig_z4:
0012            672            ds 2
0014            673   _dig_xy1:
0014            674            ds 1
0015            675   _dig_xy2:
0015            676            ds 1
0016            677   _dig_xyz1:
0016            678            ds 2
0018            679   _temp:
0018            680            ds 4
001C            681   _overflow_count:
001C            682            ds 1
001D            683   _BMM150_Read_Trim_Registers_trim_x1y1_1_97:
001D            684            ds 2
001F            685   _BMM150_Read_Trim_Registers_trim_xyz_data_1_97:
001F            686            ds 4
0023            687   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_97:
0023            688            ds 10
002D            689   _BMM150_compensate_x_retval_1_106:
002D            690            ds 2
002F            691   _BMM150_compensate_x_process_comp_x0_1_106:
002F            692            ds 2
0031            693   _BMM150_compensate_y_retval_1_115:
0031            694            ds 2
0033            695   _BMM150_compensate_y_process_comp_y0_1_115:
0033            696            ds 2
0035            697   _BMM150_Read_Data_x_val_1_124:
0035            698            ds 2
0037            699   _BMM150_Read_Data_y_val_1_124:
0037            700            ds 2
0039            701   _BMM150_Read_Data_rhall_val_1_124:
0039            702            ds 2
003B            703   _ReadHX711_dataa_1_168:
003B            704            ds 4
003F            705   _ReadHX711_j_1_168:
003F            706            ds 1
0040            707   _Read_angle_mag_x_1_210:
0040            708            ds 2
0042            709   _Read_angle_mag_y_1_210:
0042            710            ds 2
0044            711   _Read_angle_sum_x_1_210:
0044            712            ds 4
0048            713   _Read_angle_sum_y_1_210:
0048            714            ds 4
004C            715   _Read_angle_angle_1_210:
004C            716            ds 4
0050            717   _Auto_mode_slave_command_1_212:
0050            718            ds 2
0052            719   _Auto_mode_slave_state_res_1_212:
0052            720            ds 2
0054            721   _Auto_mode_slave_dummy_1_212:
0054            722            ds 2
0056            723   _Joystick_Control_vx_error_1_225:
0056            724            ds 2
0058            725   _Joystick_Control_vy_error_1_225:
0058            726            ds 2
005A            727   _Joystick_Control_vx_err_1_225:
005A            728            ds 2
005C            729   _Joystick_Control_vy_err_1_225:
005C            730            ds 2
005E            731   _main_vx_1_248:
005E            732            ds 2
0060            733   _main_vy_1_248:
0060            734            ds 2
0062            735   _main_auto_mode_1_248:
0062            736            ds 2
0064            737   ;--------------------------------------------------------
0064            738   ; absolute external ram data
0064            739   ;--------------------------------------------------------
0000            740            XSEG
0000            741   ;--------------------------------------------------------
0000            742   ; external initialized ram data
0000            743   ;--------------------------------------------------------
0000            744            rseg R_IXSEG
0000            745   _pwm_counter:
0000            746            ds 2
0002            747   _servo_counter:
0002            748            ds 2
0004            749   _pwm_left:
0004            750            ds 1
0005            751   _pwm_right:
0005            752            ds 1
0006            753   _L_motor_dir:
0006            754            ds 1
0007            755   _R_motor_dir:
0007            756            ds 1
0008            757   _servo_base:
0008            758            ds 1
0009            759   _servo_arm:
0009            760            ds 1
000A            761   _vx_thres:
000A            762            ds 2
000C            763   _vy_thres:
000C            764            ds 2
000E            765   _vx:
000E            766            ds 2
0010            767   _vy:
0010            768            ds 2
0012            769   _fre_mea_count:
0012            770            ds 2
0014            771   _weight_mea_count:
0014            772            ds 2
0016            773   _seed:
0016            774            ds 2
0018            775   _pwm_corr:
0018            776            ds 4
001C            777   _curr_angle:
001C            778            ds 4
0020            779   _raw_angle:
0020            780            ds 4
0024            781   _last_raw_angle:
0024            782            ds 4
0028            783   _angle_diff:
0028            784            ds 4
002C            785   _mea_yes:
002C            786            ds 1
002D            787   _weight:
002D            788            ds 2
002F            789   _duration:
002F            790            ds 4
0033            791   _distance:
0033            792            ds 4
0000            793            rseg R_HOME
0000            794            rseg R_GSINIT
0000            795            rseg R_CSEG
0000            796   ;--------------------------------------------------------
0000            797   ; Reset entry point and interrupt vectors
0000            798   ;--------------------------------------------------------
0000            799            CSEG at 0x0000
0000 020000     800            ljmp    _crt0
0093            801            CSEG at 0x0093
0093 020000     802            ljmp    _Timer5_ISR
0096            803   ;--------------------------------------------------------
0096            804   ; global & static initialisations
0096            805   ;--------------------------------------------------------
0000            806            rseg R_HOME
0000            807            rseg R_GSINIT
0000            808            rseg R_GSINIT
0000            809   ;--------------------------------------------------------
0000            810   ; data variables initialization
0000            811   ;--------------------------------------------------------
0000            812            rseg R_DINIT
0000            813            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            814   ;--------------------------------------------------------
0000            815   ; code
0000            816   ;--------------------------------------------------------
0000            817            rseg R_CSEG
0000            818   ;------------------------------------------------------------
0000            819   ;Allocation info for local variables in function '_c51_external_startup'
0000            820   ;------------------------------------------------------------
0000            821   ;------------------------------------------------------------
0000            822   ;        main.c:114: char _c51_external_startup (void)
0000            823   ;        -----------------------------------------
0000            824   ;         function _c51_external_startup
0000            825   ;        -----------------------------------------
0000            826   __c51_external_startup:
0000            827            using   0
0000            828   ;        main.c:117: SFRPAGE = 0x00;
0000 75A700     829            mov     _SFRPAGE,#0x00
0003            830   ;        main.c:118: WDTCN = 0xDE; //First key
0003 7597DE     831            mov     _WDTCN,#0xDE
0006            832   ;        main.c:119: WDTCN = 0xAD; //Second key
0006 7597AD     833            mov     _WDTCN,#0xAD
0009            834   ;        main.c:121: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     835            mov     _VDM0CN,#0x80
000C            836   ;        main.c:122: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     837            mov     _RSTSRC,#0x06
000F            838   ;        main.c:129: SFRPAGE = 0x10;
000F 75A710     839            mov     _SFRPAGE,#0x10
0012            840   ;        main.c:130: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     841            mov     _PFE0CN,#0x20
0015            842   ;        main.c:131: SFRPAGE = 0x00;
0015 75A700     843            mov     _SFRPAGE,#0x00
0018            844   ;        main.c:152: CLKSEL = 0x00;
0018 75A900     845            mov     _CLKSEL,#0x00
001B            846   ;        main.c:153: CLKSEL = 0x00;
001B 75A900     847            mov     _CLKSEL,#0x00
001E            848   ;        main.c:154: while ((CLKSEL & 0x80) == 0);
001E            849   L002001?:
001E E5A9       850            mov     a,_CLKSEL
0020 30E7F8     851            jnb     acc.7,L002001?
0023            852   ;        main.c:155: CLKSEL = 0x03;
0023 75A903     853            mov     _CLKSEL,#0x03
0026            854   ;        main.c:156: CLKSEL = 0x03;
0026 75A903     855            mov     _CLKSEL,#0x03
0029            856   ;        main.c:157: while ((CLKSEL & 0x80) == 0);
0029            857   L002004?:
0029 E5A9       858            mov     a,_CLKSEL
002B 30E778     859            jnb     acc.7,L002004?
002E            860   ;        main.c:163: P0MDOUT |= 0b_1100_0000;
002E 43A4C0     861            orl     _P0MDOUT,#0xC0
0031            862   ;        main.c:164: P1MDOUT |= 0b_0000_0110;
0031 43A506     863            orl     _P1MDOUT,#0x06
0034            864   ;        main.c:165: P2MDOUT |= 0b_0000_0001; // P2.0 in push-pull mode
0034 43A601     865            orl     _P2MDOUT,#0x01
0037            866   ;        main.c:166: XBR0     = 0b_0000_0011; // UART0E = 1 and SPI0E = 1 0b_0000_0011               
0037 75E103     867            mov     _XBR0,#0x03
003A            868   ;        main.c:167: XBR1     = 0b_0000_0000;
003A 75E200     869            mov     _XBR1,#0x00
003D            870   ;        main.c:168: XBR2     = 0b_0100_0001; // Enable crossbar and uart 1
003D 75E341     871            mov     _XBR2,#0x41
0040            872   ;        main.c:169: P0SKIP       = 0b_0000_0111; 
0040 75D407     873            mov     _P0SKIP,#0x07
0043            874   ;        main.c:170: P1SKIP   = 0b_1111_1001;
0043 75D5F9     875            mov     _P1SKIP,#0xF9
0046            876   ;        main.c:175: SCON0 = 0x10;
0046 759810     877            mov     _SCON0,#0x10
0049            878   ;        main.c:176: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     879            mov     _TH1,#0xE6
004C            880   ;        main.c:177: TL1 = TH1;      // Init Timer1
004C 858D8B     881            mov     _TL1,_TH1
004F            882   ;        main.c:178: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     883            anl     _TMOD,#0x0F
0052            884   ;        main.c:179: TMOD |=  0x20;                       
0052 438920     885            orl     _TMOD,#0x20
0055            886   ;        main.c:180: TR1 = 1; // START Timer1
0055 D28E       887            setb    _TR1
0057            888   ;        main.c:181: TI = 1;  // Indicate TX0 ready
0057 D299       889            setb    _TI
0059            890   ;        main.c:182: P2_0=1; // 'set' pin to 1 is normal operation mode.
0059 D2A0       891            setb    _P2_0
005B            892   ;        main.c:185: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
005B 75A211     893            mov     _SPI0CKR,#0x11
005E            894   ;        main.c:186: SPI0CFG = 0b_1110_0000; // SPI mode 3
005E 75A1E0     895            mov     _SPI0CFG,#0xE0
0061            896   ;        main.c:187: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0061 75F801     897            mov     _SPI0CN0,#0x01
0064            898   ;        main.c:190: SFRPAGE=0x10;
0064 75A710     899            mov     _SFRPAGE,#0x10
0067            900   ;        main.c:191: TMR5CN0=0x00;
0067 75C000     901            mov     _TMR5CN0,#0x00
006A            902   ;        main.c:192: TMR5=0xffff;   // Set to reload immediately
006A 75D4FF     903            mov     _TMR5,#0xFF
006D 75D5FF     904            mov     (_TMR5 >> 8),#0xFF
0070            905   ;        main.c:193: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
0070 43F308     906            orl     _EIE2,#0x08
0073            907   ;        main.c:194: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0073 D2C2       908            setb    _TR5
0075            909   ;        main.c:196: EA=1;  // Enable global interrupts
0075 D2AF       910            setb    _EA
0077            911   ;        main.c:197: SFRPAGE=0x00;
0077 75A700     912            mov     _SFRPAGE,#0x00
007A            913   ;        main.c:199: return 0;
007A 758200     914            mov     dpl,#0x00
007D 22         915            ret
007E            916   ;------------------------------------------------------------
007E            917   ;Allocation info for local variables in function 'Timer3us'
007E            918   ;------------------------------------------------------------
007E            919   ;us                        Allocated to registers r2 
007E            920   ;i                         Allocated to registers r3 
007E            921   ;------------------------------------------------------------
007E            922   ;        main.c:203: void Timer3us(unsigned char us)
007E            923   ;        -----------------------------------------
007E            924   ;         function Timer3us
007E            925   ;        -----------------------------------------
007E            926   _Timer3us:
007E AA82       927            mov     r2,dpl
0080            928   ;        main.c:208: CKCON0|=0b_0100_0000;
0080 438E40     929            orl     _CKCON0,#0x40
0083            930   ;        main.c:210: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0083 7592B8     931            mov     _TMR3RL,#0xB8
0086 7593FF     932            mov     (_TMR3RL >> 8),#0xFF
0089            933   ;        main.c:211: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0089 859294     934            mov     _TMR3,_TMR3RL
008C 859395     935            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
008F            936   ;        main.c:213: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
008F 759104     937            mov     _TMR3CN0,#0x04
0092            938   ;        main.c:214: for (i = 0; i < us; i++)       // Count <us> overflows
0092 7B00       939            mov     r3,#0x00
0094            940   L003004?:
0094 C3         941            clr     c
0095 EB         942            mov     a,r3
0096 9A         943            subb    a,r2
0097 5000       944            jnc     L003007?
0099            945   ;        main.c:216: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0099            946   L003001?:
0099 E591       947            mov     a,_TMR3CN0
009B 30E778     948            jnb     acc.7,L003001?
009E            949   ;        main.c:217: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
009E 53917F     950            anl     _TMR3CN0,#0x7F
00A1            951   ;        main.c:214: for (i = 0; i < us; i++)       // Count <us> overflows
00A1 0B         952            inc     r3
00A2 8000       953            sjmp    L003004?
00A4            954   L003007?:
00A4            955   ;        main.c:219: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00A4 759100     956            mov     _TMR3CN0,#0x00
00A7 22         957            ret
00A8            958   ;------------------------------------------------------------
00A8            959   ;Allocation info for local variables in function 'waitms'
00A8            960   ;------------------------------------------------------------
00A8            961   ;ms                        Allocated to registers r2 r3 
00A8            962   ;j                         Allocated to registers r4 r5 
00A8            963   ;k                         Allocated to registers r6 
00A8            964   ;------------------------------------------------------------
00A8            965   ;        main.c:222: void waitms (unsigned int ms)
00A8            966   ;        -----------------------------------------
00A8            967   ;         function waitms
00A8            968   ;        -----------------------------------------
00A8            969   _waitms:
00A8 AA82       970            mov     r2,dpl
00AA AB83       971            mov     r3,dph
00AC            972   ;        main.c:226: for(j=0; j<ms; j++)
00AC 7C00       973            mov     r4,#0x00
00AE 7D00       974            mov     r5,#0x00
00B0            975   L004005?:
00B0 C3         976            clr     c
00B1 EC         977            mov     a,r4
00B2 9A         978            subb    a,r2
00B3 ED         979            mov     a,r5
00B4 9B         980            subb    a,r3
00B5 5000       981            jnc     L004009?
00B7            982   ;        main.c:227: for (k=0; k<4; k++) Timer3us(250);
00B7 7E00       983            mov     r6,#0x00
00B9            984   L004001?:
00B9 BE04B8     985            cjne    r6,#0x04,L004018?
00BC            986   L004018?:
00BC 5000       987            jnc     L004007?
00BE 7582FA     988            mov     dpl,#0xFA
00C1 C002       989            push    ar2
00C3 C003       990            push    ar3
00C5 C004       991            push    ar4
00C7 C005       992            push    ar5
00C9 C006       993            push    ar6
00CB 120000     994            lcall   _Timer3us
00CE D006       995            pop     ar6
00D0 D005       996            pop     ar5
00D2 D004       997            pop     ar4
00D4 D003       998            pop     ar3
00D6 D002       999            pop     ar2
00D8 0E        1000            inc     r6
00D9 8000      1001            sjmp    L004001?
00DB           1002   L004007?:
00DB           1003   ;        main.c:226: for(j=0; j<ms; j++)
00DB 0C        1004            inc     r4
00DC BC00F8    1005            cjne    r4,#0x00,L004005?
00DF 0D        1006            inc     r5
00E0 8000      1007            sjmp    L004005?
00E2           1008   L004009?:
00E2 22        1009            ret
00E3           1010   ;------------------------------------------------------------
00E3           1011   ;Allocation info for local variables in function 'SPI_transfer'
00E3           1012   ;------------------------------------------------------------
00E3           1013   ;tx_data                   Allocated to registers 
00E3           1014   ;------------------------------------------------------------
00E3           1015   ;        main.c:230: unsigned char SPI_transfer(unsigned char tx_data)
00E3           1016   ;        -----------------------------------------
00E3           1017   ;         function SPI_transfer
00E3           1018   ;        -----------------------------------------
00E3           1019   _SPI_transfer:
00E3 8582A3    1020            mov     _SPI0DAT,dpl
00E6           1021   ;        main.c:233: while (!SPIF);      // Wait for transfer to complete
00E6           1022   L005001?:
00E6           1023   ;        main.c:234: SPIF = 0;           // Clear SPI interrupt flag
00E6 10FF78    1024            jbc     _SPIF,L005008?
00E9 8000      1025            sjmp    L005001?
00EB           1026   L005008?:
00EB           1027   ;        main.c:235: return SPI0DAT;     // Return received data
00EB 85A382    1028            mov     dpl,_SPI0DAT
00EE 22        1029            ret
00EF           1030   ;------------------------------------------------------------
00EF           1031   ;Allocation info for local variables in function 'SPI_read'
00EF           1032   ;------------------------------------------------------------
00EF           1033   ;reg_addr                  Allocated to registers r2 
00EF           1034   ;value                     Allocated with name '_SPI_read_value_1_93'
00EF           1035   ;------------------------------------------------------------
00EF           1036   ;        main.c:238: unsigned char SPI_read(unsigned char reg_addr)
00EF           1037   ;        -----------------------------------------
00EF           1038   ;         function SPI_read
00EF           1039   ;        -----------------------------------------
00EF           1040   _SPI_read:
00EF AA82      1041            mov     r2,dpl
00F1           1042   ;        main.c:243: reg_addr = reg_addr | 0x80;
00F1 430280    1043            orl     ar2,#0x80
00F4           1044   ;        main.c:245: CS = 0;                // Select the device
00F4 C290      1045            clr     _P1_0
00F6           1046   ;        main.c:246: SPI_transfer(reg_addr);     // Send register address
00F6 8A82      1047            mov     dpl,r2
00F8 120000    1048            lcall   _SPI_transfer
00FB           1049   ;        main.c:247: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
00FB 758200    1050            mov     dpl,#0x00
00FE 120000    1051            lcall   _SPI_transfer
0101           1052   ;        main.c:248: CS = 1;                // Deselect the device
0101 D290      1053            setb    _P1_0
0103           1054   ;        main.c:250: return value;
0103 22        1055            ret
0104           1056   ;------------------------------------------------------------
0104           1057   ;Allocation info for local variables in function 'SPI_write'
0104           1058   ;------------------------------------------------------------
0104           1059   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0104           1060   ;reg_addr                  Allocated to registers r2 
0104           1061   ;------------------------------------------------------------
0104           1062   ;        main.c:253: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0104           1063   ;        -----------------------------------------
0104           1064   ;         function SPI_write
0104           1065   ;        -----------------------------------------
0104           1066   _SPI_write:
0104 AA82      1067            mov     r2,dpl
0106           1068   ;        main.c:256: reg_addr = reg_addr & 0x7F;
0106 53027F    1069            anl     ar2,#0x7F
0109           1070   ;        main.c:258: CS = 0;                // Select device
0109 C290      1071            clr     _P1_0
010B           1072   ;        main.c:259: SPI_transfer(reg_addr);     // Send register address
010B 8A82      1073            mov     dpl,r2
010D 120000    1074            lcall   _SPI_transfer
0110           1075   ;        main.c:260: SPI_transfer(reg_value);    // Send value
0110 85F082    1076            mov     dpl,_SPI_write_PARM_2
0113 120000    1077            lcall   _SPI_transfer
0116           1078   ;        main.c:261: CS = 1;                // Deselect device
0116 D290      1079            setb    _P1_0
0118 22        1080            ret
0119           1081   ;------------------------------------------------------------
0119           1082   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
0119           1083   ;------------------------------------------------------------
0119           1084   ;i                         Allocated with name '_BMM150_Read_Trim_Registers_i_1_97'
0119           1085   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_97'
0119           1086   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_97'
0119           1087   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_97'
0119           1088   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97'
0119           1089   ;------------------------------------------------------------
0119           1090   ;        main.c:264: void BMM150_Read_Trim_Registers(void)
0119           1091   ;        -----------------------------------------
0119           1092   ;         function BMM150_Read_Trim_Registers
0119           1093   ;        -----------------------------------------
0119           1094   _BMM150_Read_Trim_Registers:
0119           1095   ;        main.c:268: xdata uint8_t trim_x1y1[2] = {0};
0119 90D1D8    1096            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
011C           1097   ;        main.c:269: xdata uint8_t trim_xyz_data[4] = {0};
011C E4        1098            clr     a
011D F0        1099            movx    @dptr,a
011E 90D1D9    1100            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
0121 F0        1101            movx    @dptr,a
0122 90D238    1102            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0125 F0        1103            movx    @dptr,a
0126 90D239    1104            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0001)
0129 F0        1105            movx    @dptr,a
012A 90D23A    1106            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
012D           1107   ;        main.c:270: xdata uint8_t trim_xy1xy2[10] = {0};
012D E4        1108            clr     a
012E F0        1109            movx    @dptr,a
012F 90D23B    1110            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0132 F0        1111            movx    @dptr,a
0133 90D298    1112            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0136 F0        1113            movx    @dptr,a
0137 90D299    1114            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0001)
013A F0        1115            movx    @dptr,a
013B 90D29A    1116            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0002)
013E E4        1117            clr     a
013F F0        1118            movx    @dptr,a
0140 90D29B    1119            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0003)
0143 F0        1120            movx    @dptr,a
0144 90D29C    1121            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0147 F0        1122            movx    @dptr,a
0148 90D29D    1123            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
014B F0        1124            movx    @dptr,a
014C 90D29E    1125            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0006)
014F E4        1126            clr     a
0150 F0        1127            movx    @dptr,a
0151 90D29F    1128            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0007)
0154 F0        1129            movx    @dptr,a
0155 90D2A0    1130            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0158 F0        1131            movx    @dptr,a
0159 90D2A1    1132            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
015C F0        1133            movx    @dptr,a
015D           1134   ;        main.c:273: for (i=0;i<2;i++){
015D 7A00      1135            mov     r2,#0x00
015F           1136   L008001?:
015F BA02F8    1137            cjne    r2,#0x02,L008024?
0162           1138   L008024?:
0162 5000      1139            jnc     L008004?
0164           1140   ;        main.c:274: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
0164 EA        1141            mov     a,r2
0165 24D8      1142            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0167 FB        1143            mov     r3,a
0168 E4        1144            clr     a
0169 34D1      1145            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 >> 8)
016B FC        1146            mov     r4,a
016C 745D      1147            mov     a,#0x5D
016E 2A        1148            add     a,r2
016F F582      1149            mov     dpl,a
0171 C002      1150            push    ar2
0173 C003      1151            push    ar3
0175 C004      1152            push    ar4
0177 120000    1153            lcall   _SPI_read
017A AD82      1154            mov     r5,dpl
017C D004      1155            pop     ar4
017E D003      1156            pop     ar3
0180 D002      1157            pop     ar2
0182 8B82      1158            mov     dpl,r3
0184 8C83      1159            mov     dph,r4
0186 ED        1160            mov     a,r5
0187 F0        1161            movx    @dptr,a
0188           1162   ;        main.c:273: for (i=0;i<2;i++){
0188 0A        1163            inc     r2
0189 8000      1164            sjmp    L008001?
018B           1165   L008004?:
018B           1166   ;        main.c:276: for (i=0;i<4;i++){
018B 7A00      1167            mov     r2,#0x00
018D           1168   L008005?:
018D BA04B8    1169            cjne    r2,#0x04,L008026?
0190           1170   L008026?:
0190 5000      1171            jnc     L008008?
0192           1172   ;        main.c:277: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
0192 EA        1173            mov     a,r2
0193 2438      1174            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0195 FB        1175            mov     r3,a
0196 E4        1176            clr     a
0197 34D2      1177            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 >> 8)
0199 FC        1178            mov     r4,a
019A 7462      1179            mov     a,#0x62
019C 2A        1180            add     a,r2
019D F582      1181            mov     dpl,a
019F C002      1182            push    ar2
01A1 C003      1183            push    ar3
01A3 C004      1184            push    ar4
01A5 120000    1185            lcall   _SPI_read
01A8 AD82      1186            mov     r5,dpl
01AA D004      1187            pop     ar4
01AC D003      1188            pop     ar3
01AE D002      1189            pop     ar2
01B0 8B82      1190            mov     dpl,r3
01B2 8C83      1191            mov     dph,r4
01B4 ED        1192            mov     a,r5
01B5 F0        1193            movx    @dptr,a
01B6           1194   ;        main.c:276: for (i=0;i<4;i++){
01B6 0A        1195            inc     r2
01B7 8000      1196            sjmp    L008005?
01B9           1197   L008008?:
01B9           1198   ;        main.c:279: for (i=0;i<10;i++){
01B9 7A00      1199            mov     r2,#0x00
01BB           1200   L008009?:
01BB BA0A78    1201            cjne    r2,#0x0A,L008028?
01BE           1202   L008028?:
01BE 5000      1203            jnc     L008012?
01C0           1204   ;        main.c:280: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
01C0 EA        1205            mov     a,r2
01C1 2498      1206            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
01C3 FB        1207            mov     r3,a
01C4 E4        1208            clr     a
01C5 34D2      1209            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 >> 8)
01C7 FC        1210            mov     r4,a
01C8 7468      1211            mov     a,#0x68
01CA 2A        1212            add     a,r2
01CB F582      1213            mov     dpl,a
01CD C002      1214            push    ar2
01CF C003      1215            push    ar3
01D1 C004      1216            push    ar4
01D3 120000    1217            lcall   _SPI_read
01D6 AD82      1218            mov     r5,dpl
01D8 D004      1219            pop     ar4
01DA D003      1220            pop     ar3
01DC D002      1221            pop     ar2
01DE 8B82      1222            mov     dpl,r3
01E0 8C83      1223            mov     dph,r4
01E2 ED        1224            mov     a,r5
01E3 F0        1225            movx    @dptr,a
01E4           1226   ;        main.c:279: for (i=0;i<10;i++){
01E4 0A        1227            inc     r2
01E5 8000      1228            sjmp    L008009?
01E7           1229   L008012?:
01E7           1230   ;        main.c:283: dig_x1 = (int8_t) trim_x1y1[0]; 
01E7 90D1D8    1231            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
01EA E0        1232            movx    a,@dptr
01EB 905B20    1233            mov     dptr,#_dig_x1
01EE F0        1234            movx    @dptr,a
01EF           1235   ;        main.c:284: dig_y1 = (int8_t) trim_x1y1[1]; 
01EF 90D1D9    1236            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
01F2 E0        1237            movx    a,@dptr
01F3 905AA0    1238            mov     dptr,#_dig_y1
01F6 F0        1239            movx    @dptr,a
01F7           1240   ;        main.c:285: dig_x2 = (int8_t) trim_xyz_data[2]; 
01F7 90D23A    1241            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
01FA E0        1242            movx    a,@dptr
01FB 905AE0    1243            mov     dptr,#_dig_x2
01FE F0        1244            movx    @dptr,a
01FF           1245   ;        main.c:286: dig_y2 = (int8_t) trim_xyz_data[3]; 
01FF 90D23B    1246            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0202 E0        1247            movx    a,@dptr
0203 905A60    1248            mov     dptr,#_dig_y2
0206 F0        1249            movx    @dptr,a
0207           1250   ;        main.c:300: dig_xy1 = trim_xy1xy2[9];
0207 90D2A1    1251            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
020A E0        1252            movx    a,@dptr
020B 905920    1253            mov     dptr,#_dig_xy1
020E F0        1254            movx    @dptr,a
020F           1255   ;        main.c:301: dig_xy2 = (int8_t)trim_xy1xy2[8];
020F 90D2A0    1256            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0212 E0        1257            movx    a,@dptr
0213 9058E0    1258            mov     dptr,#_dig_xy2
0216 F0        1259            movx    @dptr,a
0217           1260   ;        main.c:303: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
0217 90D29D    1261            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
021A E0        1262            movx    a,@dptr
021B FA        1263            mov     r2,a
021C 53027F    1264            anl     ar2,#0x7F
021F 8A03      1265            mov     ar3,r2
0221 7A00      1266            mov     r2,#0x00
0223           1267   ;        main.c:304: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
0223 90D29C    1268            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0226 E0        1269            movx    a,@dptr
0227 FC        1270            mov     r4,a
0228 7D00      1271            mov     r5,#0x00
022A 9058A0    1272            mov     dptr,#_dig_xyz1
022D EC        1273            mov     a,r4
022E 4A        1274            orl     a,r2
022F F0        1275            movx    @dptr,a
0230 ED        1276            mov     a,r5
0231 4B        1277            orl     a,r3
0232 A3        1278            inc     dptr
0233 F0        1279            movx    @dptr,a
0234 22        1280            ret
0235           1281   ;------------------------------------------------------------
0235           1282   ;Allocation info for local variables in function 'BMM150_Init'
0235           1283   ;------------------------------------------------------------
0235           1284   ;chip_id                   Allocated with name '_BMM150_Init_chip_id_1_102'
0235           1285   ;------------------------------------------------------------
0235           1286   ;        main.c:308: void BMM150_Init(void)
0235           1287   ;        -----------------------------------------
0235           1288   ;         function BMM150_Init
0235           1289   ;        -----------------------------------------
0235           1290   _BMM150_Init:
0235           1291   ;        main.c:313: CS = 1; // Deselect BMM150
0235 D290      1292            setb    _P1_0
0237           1293   ;        main.c:316: waitms(10);
0237 90000A    1294            mov     dptr,#0x000A
023A 120000    1295            lcall   _waitms
023D           1296   ;        main.c:319: SPI_write(BMM150_POWER_CONTROL, 0x82);
023D 75F082    1297            mov     _SPI_write_PARM_2,#0x82
0240 75824B    1298            mov     dpl,#0x4B
0243 120000    1299            lcall   _SPI_write
0246           1300   ;        main.c:320: waitms(10);  // Wait for reset to complete
0246 90000A    1301            mov     dptr,#0x000A
0249 120000    1302            lcall   _waitms
024C           1303   ;        main.c:323: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
024C 75F001    1304            mov     _SPI_write_PARM_2,#0x01
024F 75824B    1305            mov     dpl,#0x4B
0252 120000    1306            lcall   _SPI_write
0255           1307   ;        main.c:324: waitms(5);
0255 900005    1308            mov     dptr,#0x0005
0258 120000    1309            lcall   _waitms
025B           1310   ;        main.c:327: chip_id = SPI_read(BMM150_CHIP_ID);
025B 758240    1311            mov     dpl,#0x40
025E 120000    1312            lcall   _SPI_read
0261 AA82      1313            mov     r2,dpl
0263           1314   ;        main.c:328: if (chip_id != BMM150_CHIP_ID_VALUE)
0263 BA32F8    1315            cjne    r2,#0x32,L009006?
0266 8000      1316            sjmp    L009002?
0268           1317   L009006?:
0268           1318   ;        main.c:330: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
0268 8A03      1319            mov     ar3,r2
026A 7C00      1320            mov     r4,#0x00
026C C002      1321            push    ar2
026E C003      1322            push    ar3
0270 C004      1323            push    ar4
0272 7478      1324            mov     a,#__str_0
0274 C0E0      1325            push    acc
0276 74E1      1326            mov     a,#(__str_0 >> 8)
0278 C0E0      1327            push    acc
027A 7480      1328            mov     a,#0x80
027C C0E0      1329            push    acc
027E 120000    1330            lcall   _printf
0281 E581      1331            mov     a,sp
0283 24FB      1332            add     a,#0xfb
0285 F581      1333            mov     sp,a
0287 D002      1334            pop     ar2
0289           1335   L009002?:
0289           1336   ;        main.c:340: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
0289 75F000    1337            mov     _SPI_write_PARM_2,#0x00
028C 75824C    1338            mov     dpl,#0x4C
028F C002      1339            push    ar2
0291 120000    1340            lcall   _SPI_write
0294           1341   ;        main.c:343: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
0294 75F07F    1342            mov     _SPI_write_PARM_2,#0x7F
0297 758251    1343            mov     dpl,#0x51
029A 120000    1344            lcall   _SPI_write
029D           1345   ;        main.c:344: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
029D 75F00E    1346            mov     _SPI_write_PARM_2,#0x0E
02A0 758252    1347            mov     dpl,#0x52
02A3 120000    1348            lcall   _SPI_write
02A6           1349   ;        main.c:346: BMM150_Read_Trim_Registers();
02A6 120000    1350            lcall   _BMM150_Read_Trim_Registers
02A9           1351   ;        main.c:348: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
02A9 7B00      1352            mov     r3,#0x00
02AB C003      1353            push    ar3
02AD 7438      1354            mov     a,#__str_1
02AF C0E0      1355            push    acc
02B1 74E2      1356            mov     a,#(__str_1 >> 8)
02B3 C0E0      1357            push    acc
02B5 7480      1358            mov     a,#0x80
02B7 C0E0      1359            push    acc
02B9 120000    1360            lcall   _printf
02BC E581      1361            mov     a,sp
02BE 24FB      1362            add     a,#0xfb
02C0 F581      1363            mov     sp,a
02C2           1364   ;        main.c:349: return; 
02C2 22        1365            ret
02C3           1366   ;------------------------------------------------------------
02C3           1367   ;Allocation info for local variables in function 'BMM150_compensate_x'
02C3           1368   ;------------------------------------------------------------
02C3           1369   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
02C3           1370   ;mag_data_x                Allocated to registers r2 r3 r4 
02C3           1371   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
02C3           1372   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_106'
02C3           1373   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_106'
02C3           1374   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_106'
02C3           1375   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_106'
02C3           1376   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_106'
02C3           1377   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_106'
02C3           1378   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_106'
02C3           1379   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_106'
02C3           1380   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_106'
02C3           1381   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_106'
02C3           1382   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_106'
02C3           1383   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_106'
02C3           1384   ;------------------------------------------------------------
02C3           1385   ;        main.c:352: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
02C3           1386   ;        -----------------------------------------
02C3           1387   ;         function BMM150_compensate_x
02C3           1388   ;        -----------------------------------------
02C3           1389   _BMM150_compensate_x:
02C3           1390   ;        main.c:370: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
02C3 ACF0      1391            mov     r4,b
02C5 120000    1392            lcall   __gptrget
02C8 FA        1393            mov     r2,a
02C9 A3        1394            inc     dptr
02CA 120000    1395            lcall   __gptrget
02CD FB        1396            mov     r3,a
02CE BA00F8    1397            cjne    r2,#0x00,L010019?
02D1 BBF0F8    1398            cjne    r3,#0xF0,L010019?
02D4 020000    1399            ljmp    L010011?
02D7           1400   L010019?:
02D7           1401   ;        main.c:371: if (*data_rhall != 0)
02D7 ACA0      1402            mov     r4,_BMM150_compensate_x_PARM_2
02D9 ADA1      1403            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
02DB AEA2      1404            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
02DD 8C82      1405            mov     dpl,r4
02DF 8D83      1406            mov     dph,r5
02E1 8EF0      1407            mov     b,r6
02E3 120000    1408            lcall   __gptrget
02E6 FC        1409            mov     r4,a
02E7 A3        1410            inc     dptr
02E8 120000    1411            lcall   __gptrget
02EB FD        1412            mov     r5,a
02EC 4C        1413            orl     a,r4
02ED 6000      1414            jz      L010005?
02EF           1415   ;        main.c:374: process_comp_x0 = *data_rhall;
02EF 90D358    1416            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
02F2 EC        1417            mov     a,r4
02F3 F0        1418            movx    @dptr,a
02F4 A3        1419            inc     dptr
02F5 ED        1420            mov     a,r5
02F6 F0        1421            movx    @dptr,a
02F7 8000      1422            sjmp    L010006?
02F9           1423   L010005?:
02F9           1424   ;        main.c:376: else if (dig_xyz1 != 0)
02F9 9058A0    1425            mov     dptr,#_dig_xyz1
02FC E0        1426            movx    a,@dptr
02FD FC        1427            mov     r4,a
02FE A3        1428            inc     dptr
02FF E0        1429            movx    a,@dptr
0300 FD        1430            mov     r5,a
0301 4C        1431            orl     a,r4
0302 6000      1432            jz      L010002?
0304           1433   ;        main.c:378: process_comp_x0 = dig_xyz1;
0304 90D358    1434            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0307 EC        1435            mov     a,r4
0308 F0        1436            movx    @dptr,a
0309 A3        1437            inc     dptr
030A ED        1438            mov     a,r5
030B F0        1439            movx    @dptr,a
030C 8000      1440            sjmp    L010006?
030E           1441   L010002?:
030E           1442   ;        main.c:382: process_comp_x0 = 0;
030E 90D358    1443            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0311 E4        1444            clr     a
0312 F0        1445            movx    @dptr,a
0313 A3        1446            inc     dptr
0314 F0        1447            movx    @dptr,a
0315           1448   L010006?:
0315           1449   ;        main.c:384: if (process_comp_x0 != 0)
0315 90D358    1450            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0318 E0        1451            movx    a,@dptr
0319 FC        1452            mov     r4,a
031A A3        1453            inc     dptr
031B E0        1454            movx    a,@dptr
031C FD        1455            mov     r5,a
031D 4C        1456            orl     a,r4
031E 7000      1457            jnz     L010022?
0320 020000    1458            ljmp    L010008?
0323           1459   L010022?:
0323           1460   ;        main.c:387: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
0323 9058A0    1461            mov     dptr,#_dig_xyz1
0326 E0        1462            movx    a,@dptr
0327 FE        1463            mov     r6,a
0328 A3        1464            inc     dptr
0329 E0        1465            movx    a,@dptr
032A FF        1466            mov     r7,a
032B E4        1467            clr     a
032C F8        1468            mov     r0,a
032D EF        1469            mov     a,r7
032E C8        1470            xch     a,r0
032F 5403      1471            anl     a,#0x03
0331 A2E0      1472            mov     c,acc.0
0333 C8        1473            xch     a,r0
0334 13        1474            rrc     a
0335 C8        1475            xch     a,r0
0336 13        1476            rrc     a
0337 A2E0      1477            mov     c,acc.0
0339 C8        1478            xch     a,r0
033A 13        1479            rrc     a
033B C8        1480            xch     a,r0
033C 13        1481            rrc     a
033D C8        1482            xch     a,r0
033E F9        1483            mov     r1,a
033F EE        1484            mov     a,r6
0340 03        1485            rr      a
0341 03        1486            rr      a
0342 54C0      1487            anl     a,#0xc0
0344 FF        1488            mov     r7,a
0345 EE        1489            mov     a,r6
0346 03        1490            rr      a
0347 03        1491            rr      a
0348 543F      1492            anl     a,#0x3f
034A 48        1493            orl     a,r0
034B F8        1494            mov     r0,a
034C 7E00      1495            mov     r6,#0x00
034E           1496   ;        main.c:388: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
034E 8C00      1497            mov     __divslong_PARM_2,r4
0350 8D01      1498            mov     (__divslong_PARM_2 + 1),r5
0352 750200    1499            mov     (__divslong_PARM_2 + 2),#0x00
0355 750300    1500            mov     (__divslong_PARM_2 + 3),#0x00
0358 8E82      1501            mov     dpl,r6
035A 8F83      1502            mov     dph,r7
035C 88F0      1503            mov     b,r0
035E E9        1504            mov     a,r1
035F C002      1505            push    ar2
0361 C003      1506            push    ar3
0363 120000    1507            lcall   __divslong
0366 AC82      1508            mov     r4,dpl
0368 E583      1509            mov     a,dph
036A 24C0      1510            add     a,#0xc0
036C FD        1511            mov     r5,a
036D           1512   ;        main.c:390: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
036D 8C06      1513            mov     ar6,r4
036F 8D07      1514            mov     ar7,r5
0371 8E00      1515            mov     _BMM150_compensate_x_sloc0_1_0,r6
0373 EF        1516            mov     a,r7
0374 F501      1517            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
0376 33        1518            rlc     a
0377 95E0      1519            subb    a,acc
0379 F502      1520            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
037B F503      1521            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
037D 8C06      1522            mov     ar6,r4
037F 8D07      1523            mov     ar7,r5
0381 8E00      1524            mov     __mullong_PARM_2,r6
0383 EF        1525            mov     a,r7
0384 F501      1526            mov     (__mullong_PARM_2 + 1),a
0386 33        1527            rlc     a
0387 95E0      1528            subb    a,acc
0389 F502      1529            mov     (__mullong_PARM_2 + 2),a
038B F503      1530            mov     (__mullong_PARM_2 + 3),a
038D           1531   ;        main.c:391: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
038D 850082    1532            mov     dpl,_BMM150_compensate_x_sloc0_1_0
0390 850183    1533            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
0393 8502F0    1534            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
0396 E503      1535            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0398 C004      1536            push    ar4
039A C005      1537            push    ar5
039C 120000    1538            lcall   __mullong
039F 858200    1539            mov     _BMM150_compensate_x_sloc0_1_0,dpl
03A2 858301    1540            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
03A5 85F002    1541            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
03A8 F503      1542            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03AA 9058E0    1543            mov     dptr,#_dig_xy2
03AD E0        1544            movx    a,@dptr
03AE FE        1545            mov     r6,a
03AF 33        1546            rlc     a
03B0 95E0      1547            subb    a,acc
03B2 FF        1548            mov     r7,a
03B3 F8        1549            mov     r0,a
03B4 F9        1550            mov     r1,a
03B5 750080    1551            mov     __divslong_PARM_2,#0x80
03B8 E4        1552            clr     a
03B9 F501      1553            mov     (__divslong_PARM_2 + 1),a
03BB F502      1554            mov     (__divslong_PARM_2 + 2),a
03BD F503      1555            mov     (__divslong_PARM_2 + 3),a
03BF 850082    1556            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03C2 850183    1557            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03C5 8502F0    1558            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03C8 E503      1559            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03CA C006      1560            push    ar6
03CC C007      1561            push    ar7
03CE C000      1562            push    ar0
03D0 C001      1563            push    ar1
03D2 120000    1564            lcall   __divslong
03D5 858200    1565            mov     __mullong_PARM_2,dpl
03D8 858301    1566            mov     (__mullong_PARM_2 + 1),dph
03DB 85F002    1567            mov     (__mullong_PARM_2 + 2),b
03DE F503      1568            mov     (__mullong_PARM_2 + 3),a
03E0 D001      1569            pop     ar1
03E2 D000      1570            pop     ar0
03E4 D007      1571            pop     ar7
03E6 D006      1572            pop     ar6
03E8           1573   ;        main.c:392: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
03E8 8E82      1574            mov     dpl,r6
03EA 8F83      1575            mov     dph,r7
03EC 88F0      1576            mov     b,r0
03EE E9        1577            mov     a,r1
03EF 120000    1578            lcall   __mullong
03F2 858200    1579            mov     _BMM150_compensate_x_sloc0_1_0,dpl
03F5 858301    1580            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
03F8 85F002    1581            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
03FB F503      1582            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03FD D005      1583            pop     ar5
03FF D004      1584            pop     ar4
0401 905920    1585            mov     dptr,#_dig_xy1
0404 E0        1586            movx    a,@dptr
0405 FE        1587            mov     r6,a
0406 E4        1588            clr     a
0407 5401      1589            anl     a,#0x01
0409 A2E0      1590            mov     c,acc.0
040B CE        1591            xch     a,r6
040C 13        1592            rrc     a
040D CE        1593            xch     a,r6
040E 13        1594            rrc     a
040F CE        1595            xch     a,r6
0410 8E00      1596            mov     __mullong_PARM_2,r6
0412 F501      1597            mov     (__mullong_PARM_2 + 1),a
0414 33        1598            rlc     a
0415 95E0      1599            subb    a,acc
0417 F502      1600            mov     (__mullong_PARM_2 + 2),a
0419 F503      1601            mov     (__mullong_PARM_2 + 3),a
041B           1602   ;        main.c:393: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
041B ED        1603            mov     a,r5
041C 33        1604            rlc     a
041D 95E0      1605            subb    a,acc
041F FE        1606            mov     r6,a
0420           1607   ;        main.c:394: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
0420 8C82      1608            mov     dpl,r4
0422 8D83      1609            mov     dph,r5
0424 8EF0      1610            mov     b,r6
0426 120000    1611            lcall   __mullong
0429 AC82      1612            mov     r4,dpl
042B AD83      1613            mov     r5,dph
042D AEF0      1614            mov     r6,b
042F FF        1615            mov     r7,a
0430 EC        1616            mov     a,r4
0431 2500      1617            add     a,_BMM150_compensate_x_sloc0_1_0
0433 FC        1618            mov     r4,a
0434 ED        1619            mov     a,r5
0435 3501      1620            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
0437 FD        1621            mov     r5,a
0438 EE        1622            mov     a,r6
0439 3502      1623            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
043B FE        1624            mov     r6,a
043C EF        1625            mov     a,r7
043D 3503      1626            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
043F FF        1627            mov     r7,a
0440 750000    1628            mov     __divslong_PARM_2,#0x00
0443 750102    1629            mov     (__divslong_PARM_2 + 1),#0x02
0446 750200    1630            mov     (__divslong_PARM_2 + 2),#0x00
0449 750300    1631            mov     (__divslong_PARM_2 + 3),#0x00
044C 8C82      1632            mov     dpl,r4
044E 8D83      1633            mov     dph,r5
0450 8EF0      1634            mov     b,r6
0452 EF        1635            mov     a,r7
0453 120000    1636            lcall   __divslong
0456 AC82      1637            mov     r4,dpl
0458 AD83      1638            mov     r5,dph
045A AEF0      1639            mov     r6,b
045C FF        1640            mov     r7,a
045D 7410      1641            mov     a,#0x10
045F 2E        1642            add     a,r6
0460 FE        1643            mov     r6,a
0461 E4        1644            clr     a
0462 3F        1645            addc    a,r7
0463 FF        1646            mov     r7,a
0464           1647   ;        main.c:395: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
0464 905AE0    1648            mov     dptr,#_dig_x2
0467 E0        1649            movx    a,@dptr
0468 F8        1650            mov     r0,a
0469 33        1651            rlc     a
046A 95E0      1652            subb    a,acc
046C F9        1653            mov     r1,a
046D 74A0      1654            mov     a,#0xA0
046F 28        1655            add     a,r0
0470 F8        1656            mov     r0,a
0471 E4        1657            clr     a
0472 39        1658            addc    a,r1
0473 8800      1659            mov     __mullong_PARM_2,r0
0475 F501      1660            mov     (__mullong_PARM_2 + 1),a
0477 33        1661            rlc     a
0478 95E0      1662            subb    a,acc
047A F502      1663            mov     (__mullong_PARM_2 + 2),a
047C F503      1664            mov     (__mullong_PARM_2 + 3),a
047E           1665   ;        main.c:396: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
047E 8C82      1666            mov     dpl,r4
0480 8D83      1667            mov     dph,r5
0482 8EF0      1668            mov     b,r6
0484 EF        1669            mov     a,r7
0485 120000    1670            lcall   __mullong
0488           1671   ;        main.c:397: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
0488 750000    1672            mov     __divslong_PARM_2,#0x00
048B 750110    1673            mov     (__divslong_PARM_2 + 1),#0x10
048E 750200    1674            mov     (__divslong_PARM_2 + 2),#0x00
0491 750300    1675            mov     (__divslong_PARM_2 + 3),#0x00
0494 120000    1676            lcall   __divslong
0497 858200    1677            mov     __mullong_PARM_2,dpl
049A 858301    1678            mov     (__mullong_PARM_2 + 1),dph
049D 85F002    1679            mov     (__mullong_PARM_2 + 2),b
04A0 F503      1680            mov     (__mullong_PARM_2 + 3),a
04A2 D003      1681            pop     ar3
04A4 D002      1682            pop     ar2
04A6 EB        1683            mov     a,r3
04A7 33        1684            rlc     a
04A8 95E0      1685            subb    a,acc
04AA FC        1686            mov     r4,a
04AB           1687   ;        main.c:398: retval = ((int16_t)(process_comp_x10 / 8192));
04AB 8A82      1688            mov     dpl,r2
04AD 8B83      1689            mov     dph,r3
04AF 8CF0      1690            mov     b,r4
04B1 120000    1691            lcall   __mullong
04B4 750000    1692            mov     __divslong_PARM_2,#0x00
04B7 750120    1693            mov     (__divslong_PARM_2 + 1),#0x20
04BA 750200    1694            mov     (__divslong_PARM_2 + 2),#0x00
04BD 750300    1695            mov     (__divslong_PARM_2 + 3),#0x00
04C0 120000    1696            lcall   __divslong
04C3 AA82      1697            mov     r2,dpl
04C5 AB83      1698            mov     r3,dph
04C7           1699   ;        main.c:399: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
04C7 905B20    1700            mov     dptr,#_dig_x1
04CA E0        1701            movx    a,@dptr
04CB FC        1702            mov     r4,a
04CC 33        1703            rlc     a
04CD 95E0      1704            subb    a,acc
04CF C4        1705            swap    a
04D0 03        1706            rr      a
04D1 54F8      1707            anl     a,#0xf8
04D3 CC        1708            xch     a,r4
04D4 C4        1709            swap    a
04D5 03        1710            rr      a
04D6 CC        1711            xch     a,r4
04D7 6C        1712            xrl     a,r4
04D8 CC        1713            xch     a,r4
04D9 54F8      1714            anl     a,#0xf8
04DB CC        1715            xch     a,r4
04DC 6C        1716            xrl     a,r4
04DD FD        1717            mov     r5,a
04DE EC        1718            mov     a,r4
04DF 2A        1719            add     a,r2
04E0 F582      1720            mov     dpl,a
04E2 ED        1721            mov     a,r5
04E3 3B        1722            addc    a,r3
04E4 F583      1723            mov     dph,a
04E6 750010    1724            mov     __divsint_PARM_2,#0x10
04E9 E4        1725            clr     a
04EA F501      1726            mov     (__divsint_PARM_2 + 1),a
04EC 120000    1727            lcall   __divsint
04EF E582      1728            mov     a,dpl
04F1 8583F0    1729            mov     b,dph
04F4 90D2F8    1730            mov     dptr,#_BMM150_compensate_x_retval_1_106
04F7 F0        1731            movx    @dptr,a
04F8 A3        1732            inc     dptr
04F9 E5F0      1733            mov     a,b
04FB F0        1734            movx    @dptr,a
04FC 8000      1735            sjmp    L010012?
04FE           1736   L010008?:
04FE           1737   ;        main.c:402: retval = BMM150_OVERFLOW_OUTPUT; 
04FE 90D2F8    1738            mov     dptr,#_BMM150_compensate_x_retval_1_106
0501 E4        1739            clr     a
0502 F0        1740            movx    @dptr,a
0503 A3        1741            inc     dptr
0504 7480      1742            mov     a,#0x80
0506 F0        1743            movx    @dptr,a
0507 8000      1744            sjmp    L010012?
0509           1745   L010011?:
0509           1746   ;        main.c:406: retval = BMM150_OVERFLOW_OUTPUT; 
0509 90D2F8    1747            mov     dptr,#_BMM150_compensate_x_retval_1_106
050C E4        1748            clr     a
050D F0        1749            movx    @dptr,a
050E A3        1750            inc     dptr
050F 7480      1751            mov     a,#0x80
0511 F0        1752            movx    @dptr,a
0512           1753   L010012?:
0512           1754   ;        main.c:408: return retval; 
0512 90D2F8    1755            mov     dptr,#_BMM150_compensate_x_retval_1_106
0515 E0        1756            movx    a,@dptr
0516 FA        1757            mov     r2,a
0517 A3        1758            inc     dptr
0518 E0        1759            movx    a,@dptr
0519 8A82      1760            mov     dpl,r2
051B F583      1761            mov     dph,a
051D 22        1762            ret
051E           1763   ;------------------------------------------------------------
051E           1764   ;Allocation info for local variables in function 'BMM150_compensate_y'
051E           1765   ;------------------------------------------------------------
051E           1766   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
051E           1767   ;mag_data_y                Allocated to registers r2 r3 r4 
051E           1768   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
051E           1769   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_115'
051E           1770   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_115'
051E           1771   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_115'
051E           1772   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_115'
051E           1773   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_115'
051E           1774   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_115'
051E           1775   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_115'
051E           1776   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_115'
051E           1777   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_115'
051E           1778   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_115'
051E           1779   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_115'
051E           1780   ;------------------------------------------------------------
051E           1781   ;        main.c:411: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
051E           1782   ;        -----------------------------------------
051E           1783   ;         function BMM150_compensate_y
051E           1784   ;        -----------------------------------------
051E           1785   _BMM150_compensate_y:
051E           1786   ;        main.c:429: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
051E ACF0      1787            mov     r4,b
0520 120000    1788            lcall   __gptrget
0523 FA        1789            mov     r2,a
0524 A3        1790            inc     dptr
0525 120000    1791            lcall   __gptrget
0528 FB        1792            mov     r3,a
0529 BA00A8    1793            cjne    r2,#0x00,L011019?
052C BBF0A8    1794            cjne    r3,#0xF0,L011019?
052F 020000    1795            ljmp    L011011?
0532           1796   L011019?:
0532           1797   ;        main.c:431: if (*data_rhall != 0)
0532 AC50      1798            mov     r4,_BMM150_compensate_y_PARM_2
0534 AD51      1799            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
0536 AE52      1800            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
0538 8C82      1801            mov     dpl,r4
053A 8D83      1802            mov     dph,r5
053C 8EF0      1803            mov     b,r6
053E 120000    1804            lcall   __gptrget
0541 FC        1805            mov     r4,a
0542 A3        1806            inc     dptr
0543 120000    1807            lcall   __gptrget
0546 FD        1808            mov     r5,a
0547 4C        1809            orl     a,r4
0548 6000      1810            jz      L011005?
054A           1811   ;        main.c:434: process_comp_y0 = *data_rhall;
054A 90D418    1812            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
054D EC        1813            mov     a,r4
054E F0        1814            movx    @dptr,a
054F A3        1815            inc     dptr
0550 ED        1816            mov     a,r5
0551 F0        1817            movx    @dptr,a
0552 8000      1818            sjmp    L011006?
0554           1819   L011005?:
0554           1820   ;        main.c:436: else if (dig_xyz1 != 0)
0554 9058A0    1821            mov     dptr,#_dig_xyz1
0557 E0        1822            movx    a,@dptr
0558 FC        1823            mov     r4,a
0559 A3        1824            inc     dptr
055A E0        1825            movx    a,@dptr
055B FD        1826            mov     r5,a
055C 4C        1827            orl     a,r4
055D 6000      1828            jz      L011002?
055F           1829   ;        main.c:438: process_comp_y0 = dig_xyz1;
055F 90D418    1830            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
0562 EC        1831            mov     a,r4
0563 F0        1832            movx    @dptr,a
0564 A3        1833            inc     dptr
0565 ED        1834            mov     a,r5
0566 F0        1835            movx    @dptr,a
0567 8000      1836            sjmp    L011006?
0569           1837   L011002?:
0569           1838   ;        main.c:442: process_comp_y0 = 0;
0569 90D418    1839            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
056C E4        1840            clr     a
056D F0        1841            movx    @dptr,a
056E A3        1842            inc     dptr
056F F0        1843            movx    @dptr,a
0570           1844   L011006?:
0570           1845   ;        main.c:445: if (process_comp_y0 != 0)
0570 90D418    1846            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
0573 E0        1847            movx    a,@dptr
0574 FC        1848            mov     r4,a
0575 A3        1849            inc     dptr
0576 E0        1850            movx    a,@dptr
0577 FD        1851            mov     r5,a
0578 4C        1852            orl     a,r4
0579 7000      1853            jnz     L011022?
057B 020000    1854            ljmp    L011008?
057E           1855   L011022?:
057E           1856   ;        main.c:448: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
057E 9058A0    1857            mov     dptr,#_dig_xyz1
0581 E0        1858            movx    a,@dptr
0582 FE        1859            mov     r6,a
0583 A3        1860            inc     dptr
0584 E0        1861            movx    a,@dptr
0585 FF        1862            mov     r7,a
0586 E4        1863            clr     a
0587 F8        1864            mov     r0,a
0588 EF        1865            mov     a,r7
0589 C8        1866            xch     a,r0
058A 5403      1867            anl     a,#0x03
058C A2E0      1868            mov     c,acc.0
058E C8        1869            xch     a,r0
058F 13        1870            rrc     a
0590 C8        1871            xch     a,r0
0591 13        1872            rrc     a
0592 A2E0      1873            mov     c,acc.0
0594 C8        1874            xch     a,r0
0595 13        1875            rrc     a
0596 C8        1876            xch     a,r0
0597 13        1877            rrc     a
0598 C8        1878            xch     a,r0
0599 F9        1879            mov     r1,a
059A EE        1880            mov     a,r6
059B 03        1881            rr      a
059C 03        1882            rr      a
059D 54C0      1883            anl     a,#0xc0
059F FF        1884            mov     r7,a
05A0 EE        1885            mov     a,r6
05A1 03        1886            rr      a
05A2 03        1887            rr      a
05A3 543F      1888            anl     a,#0x3f
05A5 48        1889            orl     a,r0
05A6 F8        1890            mov     r0,a
05A7 7E00      1891            mov     r6,#0x00
05A9 8C00      1892            mov     __divslong_PARM_2,r4
05AB 8D01      1893            mov     (__divslong_PARM_2 + 1),r5
05AD 750200    1894            mov     (__divslong_PARM_2 + 2),#0x00
05B0 750300    1895            mov     (__divslong_PARM_2 + 3),#0x00
05B3           1896   ;        main.c:449: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
05B3 8E82      1897            mov     dpl,r6
05B5 8F83      1898            mov     dph,r7
05B7 88F0      1899            mov     b,r0
05B9 E9        1900            mov     a,r1
05BA C002      1901            push    ar2
05BC C003      1902            push    ar3
05BE 120000    1903            lcall   __divslong
05C1 AC82      1904            mov     r4,dpl
05C3 E583      1905            mov     a,dph
05C5 24C0      1906            add     a,#0xc0
05C7 FD        1907            mov     r5,a
05C8           1908   ;        main.c:451: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
05C8 8C06      1909            mov     ar6,r4
05CA 8D07      1910            mov     ar7,r5
05CC 8E50      1911            mov     _BMM150_compensate_y_sloc0_1_0,r6
05CE EF        1912            mov     a,r7
05CF F551      1913            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
05D1 33        1914            rlc     a
05D2 95E0      1915            subb    a,acc
05D4 F552      1916            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
05D6 F553      1917            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
05D8 8C06      1918            mov     ar6,r4
05DA 8D07      1919            mov     ar7,r5
05DC 8E00      1920            mov     __mullong_PARM_2,r6
05DE EF        1921            mov     a,r7
05DF F501      1922            mov     (__mullong_PARM_2 + 1),a
05E1 33        1923            rlc     a
05E2 95E0      1924            subb    a,acc
05E4 F502      1925            mov     (__mullong_PARM_2 + 2),a
05E6 F503      1926            mov     (__mullong_PARM_2 + 3),a
05E8           1927   ;        main.c:452: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
05E8 855082    1928            mov     dpl,_BMM150_compensate_y_sloc0_1_0
05EB 855183    1929            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
05EE 8552F0    1930            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
05F1 E553      1931            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
05F3 C004      1932            push    ar4
05F5 C005      1933            push    ar5
05F7 120000    1934            lcall   __mullong
05FA 858250    1935            mov     _BMM150_compensate_y_sloc0_1_0,dpl
05FD 858351    1936            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
0600 85F052    1937            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
0603 F553      1938            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0605 9058E0    1939            mov     dptr,#_dig_xy2
0608 E0        1940            movx    a,@dptr
0609 FE        1941            mov     r6,a
060A 33        1942            rlc     a
060B 95E0      1943            subb    a,acc
060D FF        1944            mov     r7,a
060E F8        1945            mov     r0,a
060F F9        1946            mov     r1,a
0610 750080    1947            mov     __divslong_PARM_2,#0x80
0613 E4        1948            clr     a
0614 F501      1949            mov     (__divslong_PARM_2 + 1),a
0616 F502      1950            mov     (__divslong_PARM_2 + 2),a
0618 F503      1951            mov     (__divslong_PARM_2 + 3),a
061A 855082    1952            mov     dpl,_BMM150_compensate_y_sloc0_1_0
061D 855183    1953            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0620 8552F0    1954            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
0623 E553      1955            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
0625 C006      1956            push    ar6
0627 C007      1957            push    ar7
0629 C000      1958            push    ar0
062B C001      1959            push    ar1
062D 120000    1960            lcall   __divslong
0630 858200    1961            mov     __mullong_PARM_2,dpl
0633 858301    1962            mov     (__mullong_PARM_2 + 1),dph
0636 85F002    1963            mov     (__mullong_PARM_2 + 2),b
0639 F503      1964            mov     (__mullong_PARM_2 + 3),a
063B D001      1965            pop     ar1
063D D000      1966            pop     ar0
063F D007      1967            pop     ar7
0641 D006      1968            pop     ar6
0643           1969   ;        main.c:453: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
0643 8E82      1970            mov     dpl,r6
0645 8F83      1971            mov     dph,r7
0647 88F0      1972            mov     b,r0
0649 E9        1973            mov     a,r1
064A 120000    1974            lcall   __mullong
064D 858250    1975            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0650 858351    1976            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
0653 85F052    1977            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
0656 F553      1978            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0658 D005      1979            pop     ar5
065A D004      1980            pop     ar4
065C 905920    1981            mov     dptr,#_dig_xy1
065F E0        1982            movx    a,@dptr
0660 FE        1983            mov     r6,a
0661 E4        1984            clr     a
0662 5401      1985            anl     a,#0x01
0664 A2E0      1986            mov     c,acc.0
0666 CE        1987            xch     a,r6
0667 13        1988            rrc     a
0668 CE        1989            xch     a,r6
0669 13        1990            rrc     a
066A CE        1991            xch     a,r6
066B 8E00      1992            mov     __mullong_PARM_2,r6
066D F501      1993            mov     (__mullong_PARM_2 + 1),a
066F 33        1994            rlc     a
0670 95E0      1995            subb    a,acc
0672 F502      1996            mov     (__mullong_PARM_2 + 2),a
0674 F503      1997            mov     (__mullong_PARM_2 + 3),a
0676           1998   ;        main.c:454: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
0676 ED        1999            mov     a,r5
0677 33        2000            rlc     a
0678 95E0      2001            subb    a,acc
067A FE        2002            mov     r6,a
067B 8C82      2003            mov     dpl,r4
067D 8D83      2004            mov     dph,r5
067F 8EF0      2005            mov     b,r6
0681 120000    2006            lcall   __mullong
0684 AC82      2007            mov     r4,dpl
0686 AD83      2008            mov     r5,dph
0688 AEF0      2009            mov     r6,b
068A FF        2010            mov     r7,a
068B EC        2011            mov     a,r4
068C 2550      2012            add     a,_BMM150_compensate_y_sloc0_1_0
068E FC        2013            mov     r4,a
068F ED        2014            mov     a,r5
0690 3551      2015            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
0692 FD        2016            mov     r5,a
0693 EE        2017            mov     a,r6
0694 3552      2018            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
0696 FE        2019            mov     r6,a
0697 EF        2020            mov     a,r7
0698 3553      2021            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
069A FF        2022            mov     r7,a
069B 750000    2023            mov     __divslong_PARM_2,#0x00
069E 750102    2024            mov     (__divslong_PARM_2 + 1),#0x02
06A1 750200    2025            mov     (__divslong_PARM_2 + 2),#0x00
06A4 750300    2026            mov     (__divslong_PARM_2 + 3),#0x00
06A7           2027   ;        main.c:455: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
06A7 8C82      2028            mov     dpl,r4
06A9 8D83      2029            mov     dph,r5
06AB 8EF0      2030            mov     b,r6
06AD EF        2031            mov     a,r7
06AE 120000    2032            lcall   __divslong
06B1 AC82      2033            mov     r4,dpl
06B3 AD83      2034            mov     r5,dph
06B5 AEF0      2035            mov     r6,b
06B7 FF        2036            mov     r7,a
06B8 905A60    2037            mov     dptr,#_dig_y2
06BB E0        2038            movx    a,@dptr
06BC F8        2039            mov     r0,a
06BD 33        2040            rlc     a
06BE 95E0      2041            subb    a,acc
06C0 F9        2042            mov     r1,a
06C1 74A0      2043            mov     a,#0xA0
06C3 28        2044            add     a,r0
06C4 F8        2045            mov     r0,a
06C5 E4        2046            clr     a
06C6 39        2047            addc    a,r1
06C7 8800      2048            mov     __mullong_PARM_2,r0
06C9 F501      2049            mov     (__mullong_PARM_2 + 1),a
06CB 33        2050            rlc     a
06CC 95E0      2051            subb    a,acc
06CE F502      2052            mov     (__mullong_PARM_2 + 2),a
06D0 F503      2053            mov     (__mullong_PARM_2 + 3),a
06D2           2054   ;        main.c:456: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
06D2 7410      2055            mov     a,#0x10
06D4 2E        2056            add     a,r6
06D5 FE        2057            mov     r6,a
06D6 E4        2058            clr     a
06D7 3F        2059            addc    a,r7
06D8 8C82      2060            mov     dpl,r4
06DA 8D83      2061            mov     dph,r5
06DC 8EF0      2062            mov     b,r6
06DE 120000    2063            lcall   __mullong
06E1           2064   ;        main.c:457: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
06E1 750000    2065            mov     __divslong_PARM_2,#0x00
06E4 750110    2066            mov     (__divslong_PARM_2 + 1),#0x10
06E7 750200    2067            mov     (__divslong_PARM_2 + 2),#0x00
06EA 750300    2068            mov     (__divslong_PARM_2 + 3),#0x00
06ED 120000    2069            lcall   __divslong
06F0 858200    2070            mov     __mullong_PARM_2,dpl
06F3 858301    2071            mov     (__mullong_PARM_2 + 1),dph
06F6 85F002    2072            mov     (__mullong_PARM_2 + 2),b
06F9 F503      2073            mov     (__mullong_PARM_2 + 3),a
06FB D003      2074            pop     ar3
06FD D002      2075            pop     ar2
06FF EB        2076            mov     a,r3
0700 33        2077            rlc     a
0701 95E0      2078            subb    a,acc
0703 FC        2079            mov     r4,a
0704           2080   ;        main.c:458: retval = (int16_t)(process_comp_y9 / 8192);
0704 8A82      2081            mov     dpl,r2
0706 8B83      2082            mov     dph,r3
0708 8CF0      2083            mov     b,r4
070A 120000    2084            lcall   __mullong
070D 750000    2085            mov     __divslong_PARM_2,#0x00
0710 750120    2086            mov     (__divslong_PARM_2 + 1),#0x20
0713 750200    2087            mov     (__divslong_PARM_2 + 2),#0x00
0716 750300    2088            mov     (__divslong_PARM_2 + 3),#0x00
0719 120000    2089            lcall   __divslong
071C AA82      2090            mov     r2,dpl
071E AB83      2091            mov     r3,dph
0720           2092   ;        main.c:459: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
0720 905AA0    2093            mov     dptr,#_dig_y1
0723 E0        2094            movx    a,@dptr
0724 FC        2095            mov     r4,a
0725 33        2096            rlc     a
0726 95E0      2097            subb    a,acc
0728 C4        2098            swap    a
0729 03        2099            rr      a
072A 54F8      2100            anl     a,#0xf8
072C CC        2101            xch     a,r4
072D C4        2102            swap    a
072E 03        2103            rr      a
072F CC        2104            xch     a,r4
0730 6C        2105            xrl     a,r4
0731 CC        2106            xch     a,r4
0732 54F8      2107            anl     a,#0xf8
0734 CC        2108            xch     a,r4
0735 6C        2109            xrl     a,r4
0736 FD        2110            mov     r5,a
0737 EC        2111            mov     a,r4
0738 2A        2112            add     a,r2
0739 F582      2113            mov     dpl,a
073B ED        2114            mov     a,r5
073C 3B        2115            addc    a,r3
073D F583      2116            mov     dph,a
073F 750010    2117            mov     __divsint_PARM_2,#0x10
0742 E4        2118            clr     a
0743 F501      2119            mov     (__divsint_PARM_2 + 1),a
0745 120000    2120            lcall   __divsint
0748 E582      2121            mov     a,dpl
074A 8583F0    2122            mov     b,dph
074D 90D3B8    2123            mov     dptr,#_BMM150_compensate_y_retval_1_115
0750 F0        2124            movx    @dptr,a
0751 A3        2125            inc     dptr
0752 E5F0      2126            mov     a,b
0754 F0        2127            movx    @dptr,a
0755 8000      2128            sjmp    L011012?
0757           2129   L011008?:
0757           2130   ;        main.c:463: retval = BMM150_OVERFLOW_OUTPUT;
0757 90D3B8    2131            mov     dptr,#_BMM150_compensate_y_retval_1_115
075A E4        2132            clr     a
075B F0        2133            movx    @dptr,a
075C A3        2134            inc     dptr
075D 7480      2135            mov     a,#0x80
075F F0        2136            movx    @dptr,a
0760 8000      2137            sjmp    L011012?
0762           2138   L011011?:
0762           2139   ;        main.c:469: retval = BMM150_OVERFLOW_OUTPUT;
0762 90D3B8    2140            mov     dptr,#_BMM150_compensate_y_retval_1_115
0765 E4        2141            clr     a
0766 F0        2142            movx    @dptr,a
0767 A3        2143            inc     dptr
0768 7480      2144            mov     a,#0x80
076A F0        2145            movx    @dptr,a
076B           2146   L011012?:
076B           2147   ;        main.c:472: return retval;
076B 90D3B8    2148            mov     dptr,#_BMM150_compensate_y_retval_1_115
076E E0        2149            movx    a,@dptr
076F FA        2150            mov     r2,a
0770 A3        2151            inc     dptr
0771 E0        2152            movx    a,@dptr
0772 8A82      2153            mov     dpl,r2
0774 F583      2154            mov     dph,a
0776 22        2155            ret
0777           2156   ;------------------------------------------------------------
0777           2157   ;Allocation info for local variables in function 'BMM150_Read_Data'
0777           2158   ;------------------------------------------------------------
0777           2159   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
0777           2160   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_123'
0777           2161   ;raw_x_lsb                 Allocated with name '_BMM150_Read_Data_raw_x_lsb_1_124'
0777           2162   ;raw_x_msb                 Allocated with name '_BMM150_Read_Data_raw_x_msb_1_124'
0777           2163   ;raw_y_lsb                 Allocated with name '_BMM150_Read_Data_raw_y_lsb_1_124'
0777           2164   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_124'
0777           2165   ;raw_rhall_lsb             Allocated with name '_BMM150_Read_Data_raw_rhall_lsb_1_124'
0777           2166   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_124'
0777           2167   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_124'
0777           2168   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_124'
0777           2169   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_124'
0777           2170   ;msb_data                  Allocated with name '_BMM150_Read_Data_msb_data_1_124'
0777           2171   ;------------------------------------------------------------
0777           2172   ;        main.c:475: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y)
0777           2173   ;        -----------------------------------------
0777           2174   ;         function BMM150_Read_Data
0777           2175   ;        -----------------------------------------
0777           2176   _BMM150_Read_Data:
0777 8582A0    2177            mov     _BMM150_Read_Data_mag_x_1_123,dpl
077A 8583A1    2178            mov     (_BMM150_Read_Data_mag_x_1_123 + 1),dph
077D 85F0A2    2179            mov     (_BMM150_Read_Data_mag_x_1_123 + 2),b
0780           2180   ;        main.c:482: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
0780 758242    2181            mov     dpl,#0x42
0783 120000    2182            lcall   _SPI_read
0786 AD82      2183            mov     r5,dpl
0788           2184   ;        main.c:483: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
0788 758243    2185            mov     dpl,#0x43
078B C005      2186            push    ar5
078D 120000    2187            lcall   _SPI_read
0790 AE82      2188            mov     r6,dpl
0792           2189   ;        main.c:484: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
0792 758244    2190            mov     dpl,#0x44
0795 C006      2191            push    ar6
0797 120000    2192            lcall   _SPI_read
079A AF82      2193            mov     r7,dpl
079C           2194   ;        main.c:485: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
079C 758245    2195            mov     dpl,#0x45
079F C007      2196            push    ar7
07A1 120000    2197            lcall   _SPI_read
07A4 A882      2198            mov     r0,dpl
07A6           2199   ;        main.c:488: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
07A6 758248    2200            mov     dpl,#0x48
07A9 C000      2201            push    ar0
07AB 120000    2202            lcall   _SPI_read
07AE A982      2203            mov     r1,dpl
07B0           2204   ;        main.c:489: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
07B0 758249    2205            mov     dpl,#0x49
07B3 C001      2206            push    ar1
07B5 120000    2207            lcall   _SPI_read
07B8 AA82      2208            mov     r2,dpl
07BA D001      2209            pop     ar1
07BC D000      2210            pop     ar0
07BE D007      2211            pop     ar7
07C0 D006      2212            pop     ar6
07C2 D005      2213            pop     ar5
07C4           2214   ;        main.c:493: raw_x_lsb = ((raw_x_lsb & 0b_1111_1000)) >> 3;
07C4 5305F8    2215            anl     ar5,#0xF8
07C7 ED        2216            mov     a,r5
07C8 C4        2217            swap    a
07C9 23        2218            rl      a
07CA 541F      2219            anl     a,#0x1f
07CC FD        2220            mov     r5,a
07CD           2221   ;        main.c:494: msb_data = ((int16_t)((int8_t)raw_x_msb)) << 5; 
07CD EE        2222            mov     a,r6
07CE 33        2223            rlc     a
07CF 95E0      2224            subb    a,acc
07D1 C4        2225            swap    a
07D2 23        2226            rl      a
07D3 54E0      2227            anl     a,#0xe0
07D5 CE        2228            xch     a,r6
07D6 C4        2229            swap    a
07D7 23        2230            rl      a
07D8 CE        2231            xch     a,r6
07D9 6E        2232            xrl     a,r6
07DA CE        2233            xch     a,r6
07DB 54E0      2234            anl     a,#0xe0
07DD CE        2235            xch     a,r6
07DE 6E        2236            xrl     a,r6
07DF FB        2237            mov     r3,a
07E0           2238   ;        main.c:495: x_val = (int16_t)(msb_data | raw_x_lsb);
07E0 7C00      2239            mov     r4,#0x00
07E2 90D468    2240            mov     dptr,#_BMM150_Read_Data_x_val_1_124
07E5 ED        2241            mov     a,r5
07E6 4E        2242            orl     a,r6
07E7 F0        2243            movx    @dptr,a
07E8 EC        2244            mov     a,r4
07E9 4B        2245            orl     a,r3
07EA A3        2246            inc     dptr
07EB F0        2247            movx    @dptr,a
07EC           2248   ;        main.c:498: raw_y_lsb = ((raw_y_lsb & 0b_1111_1000)) >> 3;
07EC 5307F8    2249            anl     ar7,#0xF8
07EF EF        2250            mov     a,r7
07F0 C4        2251            swap    a
07F1 23        2252            rl      a
07F2 541F      2253            anl     a,#0x1f
07F4 FF        2254            mov     r7,a
07F5           2255   ;        main.c:499: msb_data = ((int16_t)((int8_t)raw_y_msb)) << 5; 
07F5 E8        2256            mov     a,r0
07F6 33        2257            rlc     a
07F7 95E0      2258            subb    a,acc
07F9 C4        2259            swap    a
07FA 23        2260            rl      a
07FB 54E0      2261            anl     a,#0xe0
07FD C8        2262            xch     a,r0
07FE C4        2263            swap    a
07FF 23        2264            rl      a
0800 C8        2265            xch     a,r0
0801 68        2266            xrl     a,r0
0802 C8        2267            xch     a,r0
0803 54E0      2268            anl     a,#0xe0
0805 C8        2269            xch     a,r0
0806 68        2270            xrl     a,r0
0807 FB        2271            mov     r3,a
0808           2272   ;        main.c:500: y_val = (int16_t)(msb_data | raw_y_lsb);
0808 7C00      2273            mov     r4,#0x00
080A 90D4B8    2274            mov     dptr,#_BMM150_Read_Data_y_val_1_124
080D EF        2275            mov     a,r7
080E 48        2276            orl     a,r0
080F F0        2277            movx    @dptr,a
0810 EC        2278            mov     a,r4
0811 4B        2279            orl     a,r3
0812 A3        2280            inc     dptr
0813 F0        2281            movx    @dptr,a
0814           2282   ;        main.c:508: raw_rhall_lsb = ((raw_rhall_lsb & 0xFC) >> 2);
0814 5301FC    2283            anl     ar1,#0xFC
0817 E9        2284            mov     a,r1
0818 03        2285            rr      a
0819 03        2286            rr      a
081A 543F      2287            anl     a,#0x3f
081C F9        2288            mov     r1,a
081D           2289   ;        main.c:509: rhall_val = (uint16_t)(((uint16_t)raw_rhall_msb << 6) | raw_rhall_lsb);
081D E4        2290            clr     a
081E 5403      2291            anl     a,#0x03
0820 A2E0      2292            mov     c,acc.0
0822 CA        2293            xch     a,r2
0823 13        2294            rrc     a
0824 CA        2295            xch     a,r2
0825 13        2296            rrc     a
0826 A2E0      2297            mov     c,acc.0
0828 CA        2298            xch     a,r2
0829 13        2299            rrc     a
082A CA        2300            xch     a,r2
082B 13        2301            rrc     a
082C CA        2302            xch     a,r2
082D FB        2303            mov     r3,a
082E 7C00      2304            mov     r4,#0x00
0830 90D518    2305            mov     dptr,#_BMM150_Read_Data_rhall_val_1_124
0833 E9        2306            mov     a,r1
0834 4A        2307            orl     a,r2
0835 F0        2308            movx    @dptr,a
0836 EC        2309            mov     a,r4
0837 4B        2310            orl     a,r3
0838 A3        2311            inc     dptr
0839 F0        2312            movx    @dptr,a
083A           2313   ;        main.c:512: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
083A 75A018    2314            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_124
083D 75A1D5    2315            mov     (_BMM150_compensate_x_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_124 >> 8)
0840 75A200    2316            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x00
0843 90D468    2317            mov     dptr,#_BMM150_Read_Data_x_val_1_124
0846 75F000    2318            mov     b,#0x00
0849 120000    2319            lcall   _BMM150_compensate_x
084C AA82      2320            mov     r2,dpl
084E AB83      2321            mov     r3,dph
0850 85A082    2322            mov     dpl,_BMM150_Read_Data_mag_x_1_123
0853 85A183    2323            mov     dph,(_BMM150_Read_Data_mag_x_1_123 + 1)
0856 85A2F0    2324            mov     b,(_BMM150_Read_Data_mag_x_1_123 + 2)
0859 EA        2325            mov     a,r2
085A 120000    2326            lcall   __gptrput
085D A3        2327            inc     dptr
085E EB        2328            mov     a,r3
085F 120000    2329            lcall   __gptrput
0862           2330   ;        main.c:513: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
0862 AA00      2331            mov     r2,_BMM150_Read_Data_PARM_2
0864 AB01      2332            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
0866 AC02      2333            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
0868 755018    2334            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_124
086B 7551D5    2335            mov     (_BMM150_compensate_y_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_124 >> 8)
086E 755200    2336            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x00
0871 90D4B8    2337            mov     dptr,#_BMM150_Read_Data_y_val_1_124
0874 75F000    2338            mov     b,#0x00
0877 C002      2339            push    ar2
0879 C003      2340            push    ar3
087B C004      2341            push    ar4
087D 120000    2342            lcall   _BMM150_compensate_y
0880 AD82      2343            mov     r5,dpl
0882 AE83      2344            mov     r6,dph
0884 D004      2345            pop     ar4
0886 D003      2346            pop     ar3
0888 D002      2347            pop     ar2
088A 8A82      2348            mov     dpl,r2
088C 8B83      2349            mov     dph,r3
088E 8CF0      2350            mov     b,r4
0890 ED        2351            mov     a,r5
0891 120000    2352            lcall   __gptrput
0894 A3        2353            inc     dptr
0895 EE        2354            mov     a,r6
0896 020000    2355            ljmp    __gptrput
0899           2356   ;------------------------------------------------------------
0899           2357   ;Allocation info for local variables in function 'UART1_Init'
0899           2358   ;------------------------------------------------------------
0899           2359   ;baudrate                  Allocated to registers r2 r3 r4 r5 
0899           2360   ;------------------------------------------------------------
0899           2361   ;        main.c:519: void UART1_Init (unsigned long baudrate)
0899           2362   ;        -----------------------------------------
0899           2363   ;         function UART1_Init
0899           2364   ;        -----------------------------------------
0899           2365   _UART1_Init:
0899 AA82      2366            mov     r2,dpl
089B AB83      2367            mov     r3,dph
089D ACF0      2368            mov     r4,b
089F FD        2369            mov     r5,a
08A0           2370   ;        main.c:521: SFRPAGE = 0x20;
08A0 75A720    2371            mov     _SFRPAGE,#0x20
08A3           2372   ;        main.c:522: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
08A3 75930C    2373            mov     _SMOD1,#0x0C
08A6           2374   ;        main.c:523: SCON1 = 0x10;
08A6 75C810    2375            mov     _SCON1,#0x10
08A9           2376   ;        main.c:524: SBCON1 =0x00;   // disable baud rate generator
08A9 759400    2377            mov     _SBCON1,#0x00
08AC           2378   ;        main.c:525: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
08AC 8A00      2379            mov     __divulong_PARM_2,r2
08AE 8B01      2380            mov     (__divulong_PARM_2 + 1),r3
08B0 8C02      2381            mov     (__divulong_PARM_2 + 2),r4
08B2 8D03      2382            mov     (__divulong_PARM_2 + 3),r5
08B4 90A200    2383            mov     dptr,#0xA200
08B7 75F04A    2384            mov     b,#0x4A
08BA 7404      2385            mov     a,#0x04
08BC 120000    2386            lcall   __divulong
08BF AA82      2387            mov     r2,dpl
08C1 AB83      2388            mov     r3,dph
08C3 ACF0      2389            mov     r4,b
08C5 FD        2390            mov     r5,a
08C6 750018    2391            mov     __divulong_PARM_2,#0x18
08C9 E4        2392            clr     a
08CA F501      2393            mov     (__divulong_PARM_2 + 1),a
08CC F502      2394            mov     (__divulong_PARM_2 + 2),a
08CE F503      2395            mov     (__divulong_PARM_2 + 3),a
08D0 8A82      2396            mov     dpl,r2
08D2 8B83      2397            mov     dph,r3
08D4 8CF0      2398            mov     b,r4
08D6 ED        2399            mov     a,r5
08D7 120000    2400            lcall   __divulong
08DA AA82      2401            mov     r2,dpl
08DC AB83      2402            mov     r3,dph
08DE ACF0      2403            mov     r4,b
08E0 FD        2404            mov     r5,a
08E1 E4        2405            clr     a
08E2 C3        2406            clr     c
08E3 9A        2407            subb    a,r2
08E4 FA        2408            mov     r2,a
08E5 E4        2409            clr     a
08E6 9B        2410            subb    a,r3
08E7 FB        2411            mov     r3,a
08E8 7401      2412            mov     a,#0x01
08EA 9C        2413            subb    a,r4
08EB E4        2414            clr     a
08EC 9D        2415            subb    a,r5
08ED 8A95      2416            mov     _SBRL1,r2
08EF 8B96      2417            mov     (_SBRL1 >> 8),r3
08F1           2418   ;        main.c:526: TI1 = 1; // indicate ready for TX
08F1 D2C9      2419            setb    _TI1
08F3           2420   ;        main.c:527: SBCON1 |= 0x40;   // enable baud rate generator
08F3 439440    2421            orl     _SBCON1,#0x40
08F6           2422   ;        main.c:528: SFRPAGE = 0x00;
08F6 75A700    2423            mov     _SFRPAGE,#0x00
08F9 22        2424            ret
08FA           2425   ;------------------------------------------------------------
08FA           2426   ;Allocation info for local variables in function 'putchar1'
08FA           2427   ;------------------------------------------------------------
08FA           2428   ;c                         Allocated to registers r2 
08FA           2429   ;------------------------------------------------------------
08FA           2430   ;        main.c:531: void putchar1 (char c) 
08FA           2431   ;        -----------------------------------------
08FA           2432   ;         function putchar1
08FA           2433   ;        -----------------------------------------
08FA           2434   _putchar1:
08FA AA82      2435            mov     r2,dpl
08FC           2436   ;        main.c:533: SFRPAGE = 0x20;
08FC 75A720    2437            mov     _SFRPAGE,#0x20
08FF           2438   ;        main.c:534: while (!TI1);
08FF           2439   L014001?:
08FF           2440   ;        main.c:535: TI1=0;
08FF 10C9B8    2441            jbc     _TI1,L014008?
0902 8000      2442            sjmp    L014001?
0904           2443   L014008?:
0904           2444   ;        main.c:536: SBUF1 = c;
0904 8A92      2445            mov     _SBUF1,r2
0906           2446   ;        main.c:537: SFRPAGE = 0x00;
0906 75A700    2447            mov     _SFRPAGE,#0x00
0909 22        2448            ret
090A           2449   ;------------------------------------------------------------
090A           2450   ;Allocation info for local variables in function 'sendstr1'
090A           2451   ;------------------------------------------------------------
090A           2452   ;s                         Allocated to registers r2 r3 r4 
090A           2453   ;------------------------------------------------------------
090A           2454   ;        main.c:540: void sendstr1 (char * s)
090A           2455   ;        -----------------------------------------
090A           2456   ;         function sendstr1
090A           2457   ;        -----------------------------------------
090A           2458   _sendstr1:
090A AA82      2459            mov     r2,dpl
090C AB83      2460            mov     r3,dph
090E ACF0      2461            mov     r4,b
0910           2462   ;        main.c:542: while(*s)
0910           2463   L015001?:
0910 8A82      2464            mov     dpl,r2
0912 8B83      2465            mov     dph,r3
0914 8CF0      2466            mov     b,r4
0916 120000    2467            lcall   __gptrget
0919 FD        2468            mov     r5,a
091A 6000      2469            jz      L015004?
091C           2470   ;        main.c:544: putchar1(*s);
091C 8D82      2471            mov     dpl,r5
091E C002      2472            push    ar2
0920 C003      2473            push    ar3
0922 C004      2474            push    ar4
0924 120000    2475            lcall   _putchar1
0927 D004      2476            pop     ar4
0929 D003      2477            pop     ar3
092B D002      2478            pop     ar2
092D           2479   ;        main.c:545: s++;        
092D 0A        2480            inc     r2
092E BA00F8    2481            cjne    r2,#0x00,L015001?
0931 0B        2482            inc     r3
0932 8000      2483            sjmp    L015001?
0934           2484   L015004?:
0934 22        2485            ret
0935           2486   ;------------------------------------------------------------
0935           2487   ;Allocation info for local variables in function 'getchar1'
0935           2488   ;------------------------------------------------------------
0935           2489   ;c                         Allocated with name '_getchar1_c_1_133'
0935           2490   ;------------------------------------------------------------
0935           2491   ;        main.c:549: char getchar1 (void)
0935           2492   ;        -----------------------------------------
0935           2493   ;         function getchar1
0935           2494   ;        -----------------------------------------
0935           2495   _getchar1:
0935           2496   ;        main.c:552: SFRPAGE = 0x20;
0935 75A720    2497            mov     _SFRPAGE,#0x20
0938           2498   ;        main.c:553: while (!RI1);
0938           2499   L016001?:
0938           2500   ;        main.c:554: RI1=0;
0938 10C8B8    2501            jbc     _RI1,L016008?
093B 8000      2502            sjmp    L016001?
093D           2503   L016008?:
093D           2504   ;        main.c:556: SCON1&=0b_0011_1111;
093D 53C83F    2505            anl     _SCON1,#0x3F
0940           2506   ;        main.c:557: c = SBUF1;
0940 859282    2507            mov     dpl,_SBUF1
0943           2508   ;        main.c:558: SFRPAGE = 0x00;
0943 75A700    2509            mov     _SFRPAGE,#0x00
0946           2510   ;        main.c:559: return (c);
0946 22        2511            ret
0947           2512   ;------------------------------------------------------------
0947           2513   ;Allocation info for local variables in function 'getchar1_with_timeout'
0947           2514   ;------------------------------------------------------------
0947           2515   ;c                         Allocated with name '_getchar1_with_timeout_c_1_135'
0947           2516   ;timeout                   Allocated with name '_getchar1_with_timeout_timeout_1_135'
0947           2517   ;------------------------------------------------------------
0947           2518   ;        main.c:562: char getchar1_with_timeout (void)
0947           2519   ;        -----------------------------------------
0947           2520   ;         function getchar1_with_timeout
0947           2521   ;        -----------------------------------------
0947           2522   _getchar1_with_timeout:
0947           2523   ;        main.c:566: SFRPAGE = 0x20;
0947 75A720    2524            mov     _SFRPAGE,#0x20
094A           2525   ;        main.c:568: while (!RI1)
094A 7A00      2526            mov     r2,#0x00
094C 7B00      2527            mov     r3,#0x00
094E           2528   L017003?:
094E 20C838    2529            jb      _RI1,L017005?
0951           2530   ;        main.c:570: SFRPAGE = 0x00;
0951 75A700    2531            mov     _SFRPAGE,#0x00
0954           2532   ;        main.c:571: Timer3us(20);
0954 758214    2533            mov     dpl,#0x14
0957 C002      2534            push    ar2
0959 C003      2535            push    ar3
095B 120000    2536            lcall   _Timer3us
095E D003      2537            pop     ar3
0960 D002      2538            pop     ar2
0962           2539   ;        main.c:572: SFRPAGE = 0x20;
0962 75A720    2540            mov     _SFRPAGE,#0x20
0965           2541   ;        main.c:573: timeout++;
0965 0A        2542            inc     r2
0966 BA0078    2543            cjne    r2,#0x00,L017012?
0969 0B        2544            inc     r3
096A           2545   L017012?:
096A           2546   ;        main.c:574: if(timeout==25000)
096A BAA8F8    2547            cjne    r2,#0xA8,L017003?
096D BB61F8    2548            cjne    r3,#0x61,L017003?
0970           2549   ;        main.c:576: SFRPAGE = 0x00;
0970 75A700    2550            mov     _SFRPAGE,#0x00
0973           2551   ;        main.c:577: return ('\n'); // Timeout after half second
0973 75820A    2552            mov     dpl,#0x0A
0976 22        2553            ret
0977           2554   L017005?:
0977           2555   ;        main.c:580: RI1=0;
0977 C2C8      2556            clr     _RI1
0979           2557   ;        main.c:582: SCON1&=0b_0011_1111;
0979 53C83F    2558            anl     _SCON1,#0x3F
097C           2559   ;        main.c:583: c = SBUF1;
097C 859282    2560            mov     dpl,_SBUF1
097F           2561   ;        main.c:584: SFRPAGE = 0x00;
097F 75A700    2562            mov     _SFRPAGE,#0x00
0982           2563   ;        main.c:585: return (c);
0982 22        2564            ret
0983           2565   ;------------------------------------------------------------
0983           2566   ;Allocation info for local variables in function 'getstr1'
0983           2567   ;------------------------------------------------------------
0983           2568   ;n                         Allocated with name '_getstr1_PARM_2'
0983           2569   ;s                         Allocated to registers r2 r3 r4 
0983           2570   ;c                         Allocated with name '_getstr1_c_1_139'
0983           2571   ;cnt                       Allocated with name '_getstr1_cnt_1_139'
0983           2572   ;------------------------------------------------------------
0983           2573   ;        main.c:588: void getstr1 (char * s, unsigned char n)
0983           2574   ;        -----------------------------------------
0983           2575   ;         function getstr1
0983           2576   ;        -----------------------------------------
0983           2577   _getstr1:
0983 AA82      2578            mov     r2,dpl
0985 AB83      2579            mov     r3,dph
0987 ACF0      2580            mov     r4,b
0989           2581   ;        main.c:594: while(1)
0989 7D00      2582            mov     r5,#0x00
098B 8A06      2583            mov     ar6,r2
098D 8B07      2584            mov     ar7,r3
098F 8C00      2585            mov     ar0,r4
0991           2586   L018007?:
0991           2587   ;        main.c:596: c=getchar1_with_timeout();
0991 C002      2588            push    ar2
0993 C003      2589            push    ar3
0995 C004      2590            push    ar4
0997 C005      2591            push    ar5
0999 C006      2592            push    ar6
099B C007      2593            push    ar7
099D C000      2594            push    ar0
099F 120000    2595            lcall   _getchar1_with_timeout
09A2 A982      2596            mov     r1,dpl
09A4 D000      2597            pop     ar0
09A6 D007      2598            pop     ar7
09A8 D006      2599            pop     ar6
09AA D005      2600            pop     ar5
09AC D004      2601            pop     ar4
09AE D003      2602            pop     ar3
09B0 D002      2603            pop     ar2
09B2           2604   ;        main.c:597: if(c=='\n')
09B2 B90AF8    2605            cjne    r1,#0x0A,L018002?
09B5           2606   ;        main.c:599: *s=0;
09B5 8A82      2607            mov     dpl,r2
09B7 8B83      2608            mov     dph,r3
09B9 8CF0      2609            mov     b,r4
09BB E4        2610            clr     a
09BC           2611   ;        main.c:600: return;
09BC 020000    2612            ljmp    __gptrput
09BF           2613   L018002?:
09BF           2614   ;        main.c:603: if (cnt<n)
09BF C3        2615            clr     c
09C0 ED        2616            mov     a,r5
09C1 95B0      2617            subb    a,_getstr1_PARM_2
09C3 5000      2618            jnc     L018004?
09C5           2619   ;        main.c:605: cnt++;
09C5 0D        2620            inc     r5
09C6           2621   ;        main.c:606: *s=c;
09C6 8E82      2622            mov     dpl,r6
09C8 8F83      2623            mov     dph,r7
09CA 88F0      2624            mov     b,r0
09CC E9        2625            mov     a,r1
09CD 120000    2626            lcall   __gptrput
09D0 A3        2627            inc     dptr
09D1 AE82      2628            mov     r6,dpl
09D3 AF83      2629            mov     r7,dph
09D5           2630   ;        main.c:607: s++;
09D5 8E02      2631            mov     ar2,r6
09D7 8F03      2632            mov     ar3,r7
09D9 8804      2633            mov     ar4,r0
09DB 8000      2634            sjmp    L018007?
09DD           2635   L018004?:
09DD           2636   ;        main.c:611: *s=0;
09DD 8A82      2637            mov     dpl,r2
09DF 8B83      2638            mov     dph,r3
09E1 8CF0      2639            mov     b,r4
09E3 E4        2640            clr     a
09E4           2641   ;        main.c:612: return;
09E4 020000    2642            ljmp    __gptrput
09E7           2643   ;------------------------------------------------------------
09E7           2644   ;Allocation info for local variables in function 'RXU1'
09E7           2645   ;------------------------------------------------------------
09E7           2646   ;------------------------------------------------------------
09E7           2647   ;        main.c:618: bit RXU1 (void)
09E7           2648   ;        -----------------------------------------
09E7           2649   ;         function RXU1
09E7           2650   ;        -----------------------------------------
09E7           2651   _RXU1:
09E7           2652   ;        main.c:621: SFRPAGE = 0x20;
09E7 75A720    2653            mov     _SFRPAGE,#0x20
09EA           2654   ;        main.c:622: mybit=RI1;
09EA A2C8      2655            mov     c,_RI1
09EC           2656   ;        main.c:623: SFRPAGE = 0x00;
09EC 75A700    2657            mov     _SFRPAGE,#0x00
09EF           2658   ;        main.c:624: return mybit;
09EF 22        2659            ret
09F0           2660   ;------------------------------------------------------------
09F0           2661   ;Allocation info for local variables in function 'waitms_or_RI1'
09F0           2662   ;------------------------------------------------------------
09F0           2663   ;ms                        Allocated to registers r2 r3 
09F0           2664   ;j                         Allocated with name '_waitms_or_RI1_j_1_147'
09F0           2665   ;k                         Allocated with name '_waitms_or_RI1_k_1_147'
09F0           2666   ;------------------------------------------------------------
09F0           2667   ;        main.c:627: void waitms_or_RI1 (unsigned int ms)
09F0           2668   ;        -----------------------------------------
09F0           2669   ;         function waitms_or_RI1
09F0           2670   ;        -----------------------------------------
09F0           2671   _waitms_or_RI1:
09F0 AA82      2672            mov     r2,dpl
09F2 AB83      2673            mov     r3,dph
09F4           2674   ;        main.c:631: for(j=0; j<ms; j++)
09F4 7C00      2675            mov     r4,#0x00
09F6 7D00      2676            mov     r5,#0x00
09F8           2677   L020007?:
09F8 C3        2678            clr     c
09F9 EC        2679            mov     a,r4
09FA 9A        2680            subb    a,r2
09FB ED        2681            mov     a,r5
09FC 9B        2682            subb    a,r3
09FD 5000      2683            jnc     L020011?
09FF           2684   ;        main.c:633: for (k=0; k<4; k++)
09FF 7E00      2685            mov     r6,#0x00
0A01           2686   L020003?:
0A01 BE0438    2687            cjne    r6,#0x04,L020019?
0A04           2688   L020019?:
0A04 5000      2689            jnc     L020009?
0A06           2690   ;        main.c:635: if(RXU1()) return;
0A06 C002      2691            push    ar2
0A08 C003      2692            push    ar3
0A0A C004      2693            push    ar4
0A0C C005      2694            push    ar5
0A0E C006      2695            push    ar6
0A10 120000    2696            lcall   _RXU1
0A13 E4        2697            clr     a
0A14 33        2698            rlc     a
0A15 D006      2699            pop     ar6
0A17 D005      2700            pop     ar5
0A19 D004      2701            pop     ar4
0A1B D003      2702            pop     ar3
0A1D D002      2703            pop     ar2
0A1F 6000      2704            jz      L020002?
0A21 22        2705            ret
0A22           2706   L020002?:
0A22           2707   ;        main.c:636: Timer3us(250);
0A22 7582FA    2708            mov     dpl,#0xFA
0A25 C002      2709            push    ar2
0A27 C003      2710            push    ar3
0A29 C004      2711            push    ar4
0A2B C005      2712            push    ar5
0A2D C006      2713            push    ar6
0A2F 120000    2714            lcall   _Timer3us
0A32 D006      2715            pop     ar6
0A34 D005      2716            pop     ar5
0A36 D004      2717            pop     ar4
0A38 D003      2718            pop     ar3
0A3A D002      2719            pop     ar2
0A3C           2720   ;        main.c:633: for (k=0; k<4; k++)
0A3C 0E        2721            inc     r6
0A3D 8000      2722            sjmp    L020003?
0A3F           2723   L020009?:
0A3F           2724   ;        main.c:631: for(j=0; j<ms; j++)
0A3F 0C        2725            inc     r4
0A40 BC0078    2726            cjne    r4,#0x00,L020007?
0A43 0D        2727            inc     r5
0A44 8000      2728            sjmp    L020007?
0A46           2729   L020011?:
0A46 22        2730            ret
0A47           2731   ;------------------------------------------------------------
0A47           2732   ;Allocation info for local variables in function 'SendATCommand'
0A47           2733   ;------------------------------------------------------------
0A47           2734   ;s                         Allocated to registers r2 r3 r4 
0A47           2735   ;------------------------------------------------------------
0A47           2736   ;        main.c:641: void SendATCommand (char * s)
0A47           2737   ;        -----------------------------------------
0A47           2738   ;         function SendATCommand
0A47           2739   ;        -----------------------------------------
0A47           2740   _SendATCommand:
0A47 AA82      2741            mov     r2,dpl
0A49 AB83      2742            mov     r3,dph
0A4B ACF0      2743            mov     r4,b
0A4D           2744   ;        main.c:643: printf("Command: %s", s);
0A4D C002      2745            push    ar2
0A4F C003      2746            push    ar3
0A51 C004      2747            push    ar4
0A53 C002      2748            push    ar2
0A55 C003      2749            push    ar3
0A57 C004      2750            push    ar4
0A59 74F8      2751            mov     a,#__str_2
0A5B C0E0      2752            push    acc
0A5D 74ED      2753            mov     a,#(__str_2 >> 8)
0A5F C0E0      2754            push    acc
0A61 7480      2755            mov     a,#0x80
0A63 C0E0      2756            push    acc
0A65 120000    2757            lcall   _printf
0A68 E581      2758            mov     a,sp
0A6A 24FA      2759            add     a,#0xfa
0A6C F581      2760            mov     sp,a
0A6E           2761   ;        main.c:644: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0A6E C2A0      2762            clr     _P2_0
0A70           2763   ;        main.c:645: waitms(5);
0A70 900005    2764            mov     dptr,#0x0005
0A73 120000    2765            lcall   _waitms
0A76 D004      2766            pop     ar4
0A78 D003      2767            pop     ar3
0A7A D002      2768            pop     ar2
0A7C           2769   ;        main.c:646: sendstr1(s);
0A7C 8A82      2770            mov     dpl,r2
0A7E 8B83      2771            mov     dph,r3
0A80 8CF0      2772            mov     b,r4
0A82 120000    2773            lcall   _sendstr1
0A85           2774   ;        main.c:647: getstr1(buff, sizeof(buff)-1);
0A85 75B013    2775            mov     _getstr1_PARM_2,#0x13
0A88 905C20    2776            mov     dptr,#_buff
0A8B 75F040    2777            mov     b,#0x40
0A8E 120000    2778            lcall   _getstr1
0A91           2779   ;        main.c:648: waitms(10);
0A91 90000A    2780            mov     dptr,#0x000A
0A94 120000    2781            lcall   _waitms
0A97           2782   ;        main.c:649: P2_0=1; // 'set' pin to 1 is normal operation mode.
0A97 D2A0      2783            setb    _P2_0
0A99           2784   ;        main.c:650: printf("Response: %s\r\n", buff);
0A99 7420      2785            mov     a,#_buff
0A9B C0E0      2786            push    acc
0A9D 745C      2787            mov     a,#(_buff >> 8)
0A9F C0E0      2788            push    acc
0AA1 7440      2789            mov     a,#0x40
0AA3 C0E0      2790            push    acc
0AA5 7438      2791            mov     a,#__str_3
0AA7 C0E0      2792            push    acc
0AA9 74EE      2793            mov     a,#(__str_3 >> 8)
0AAB C0E0      2794            push    acc
0AAD 7480      2795            mov     a,#0x80
0AAF C0E0      2796            push    acc
0AB1 120000    2797            lcall   _printf
0AB4 E581      2798            mov     a,sp
0AB6 24FA      2799            add     a,#0xfa
0AB8 F581      2800            mov     sp,a
0ABA 22        2801            ret
0ABB           2802   ;------------------------------------------------------------
0ABB           2803   ;Allocation info for local variables in function 'ReceptionOff'
0ABB           2804   ;------------------------------------------------------------
0ABB           2805   ;------------------------------------------------------------
0ABB           2806   ;        main.c:653: void ReceptionOff (void)
0ABB           2807   ;        -----------------------------------------
0ABB           2808   ;         function ReceptionOff
0ABB           2809   ;        -----------------------------------------
0ABB           2810   _ReceptionOff:
0ABB           2811   ;        main.c:655: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0ABB C2A0      2812            clr     _P2_0
0ABD           2813   ;        main.c:656: waitms(10);
0ABD 90000A    2814            mov     dptr,#0x000A
0AC0 120000    2815            lcall   _waitms
0AC3           2816   ;        main.c:657: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0AC3 90EE78    2817            mov     dptr,#__str_4
0AC6 75F080    2818            mov     b,#0x80
0AC9 120000    2819            lcall   _sendstr1
0ACC           2820   ;        main.c:658: waitms(10);
0ACC 90000A    2821            mov     dptr,#0x000A
0ACF 120000    2822            lcall   _waitms
0AD2           2823   ;        main.c:660: SCON1&=0b_0011_1111;
0AD2 53C83F    2824            anl     _SCON1,#0x3F
0AD5           2825   ;        main.c:661: P2_0=1; // 'set' pin to 1 is normal operation mode.
0AD5 D2A0      2826            setb    _P2_0
0AD7 22        2827            ret
0AD8           2828   ;------------------------------------------------------------
0AD8           2829   ;Allocation info for local variables in function 'Set_Pin_Output'
0AD8           2830   ;------------------------------------------------------------
0AD8           2831   ;pin                       Allocated to registers r2 
0AD8           2832   ;mask                      Allocated to registers r3 
0AD8           2833   ;------------------------------------------------------------
0AD8           2834   ;        main.c:664: void Set_Pin_Output (unsigned char pin)
0AD8           2835   ;        -----------------------------------------
0AD8           2836   ;         function Set_Pin_Output
0AD8           2837   ;        -----------------------------------------
0AD8           2838   _Set_Pin_Output:
0AD8 AA82      2839            mov     r2,dpl
0ADA           2840   ;        main.c:668: mask=(1<<(pin&0x7));
0ADA 7407      2841            mov     a,#0x07
0ADC 5A        2842            anl     a,r2
0ADD F5F0      2843            mov     b,a
0ADF 05F0      2844            inc     b
0AE1 7401      2845            mov     a,#0x01
0AE3 8000      2846            sjmp    L023011?
0AE5           2847   L023009?:
0AE5 25E0      2848            add     a,acc
0AE7           2849   L023011?:
0AE7 D5F0F8    2850            djnz    b,L023009?
0AEA FB        2851            mov     r3,a
0AEB           2852   ;        main.c:669: switch(pin/0x10)
0AEB EA        2853            mov     a,r2
0AEC C4        2854            swap    a
0AED 540F      2855            anl     a,#0x0f
0AEF FA        2856            mov  r2,a
0AF0 24FC      2857            add     a,#0xff - 0x03
0AF2 4000      2858            jc      L023006?
0AF4 EA        2859            mov     a,r2
0AF5 2A        2860            add     a,r2
0AF6 2A        2861            add     a,r2
0AF7 90EF78    2862            mov     dptr,#L023013?
0AFA 73        2863            jmp     @a+dptr
0AFB           2864   L023013?:
0AFB 020000    2865            ljmp    L023001?
0AFE 020000    2866            ljmp    L023002?
0B01 020000    2867            ljmp    L023003?
0B04 020000    2868            ljmp    L023004?
0B07           2869   ;        main.c:671: case 0: P0MDOUT |= mask; break;
0B07           2870   L023001?:
0B07 EB        2871            mov     a,r3
0B08 42A4      2872            orl     _P0MDOUT,a
0B0A           2873   ;        main.c:672: case 1: P1MDOUT |= mask; break;
0B0A 22        2874            ret
0B0B           2875   L023002?:
0B0B EB        2876            mov     a,r3
0B0C 42A5      2877            orl     _P1MDOUT,a
0B0E           2878   ;        main.c:673: case 2: P2MDOUT |= mask; break; 
0B0E 22        2879            ret
0B0F           2880   L023003?:
0B0F EB        2881            mov     a,r3
0B10 42A6      2882            orl     _P2MDOUT,a
0B12           2883   ;        main.c:674: case 3: P3MDOUT |= mask; break; 
0B12 22        2884            ret
0B13           2885   L023004?:
0B13 EB        2886            mov     a,r3
0B14 429C      2887            orl     _P3MDOUT,a
0B16           2888   ;        main.c:675: }   
0B16           2889   L023006?:
0B16 22        2890            ret
0B17           2891   ;------------------------------------------------------------
0B17           2892   ;Allocation info for local variables in function 'Set_Pin_Input'
0B17           2893   ;------------------------------------------------------------
0B17           2894   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_158'
0B17           2895   ;pin                       Allocated to registers r2 
0B17           2896   ;------------------------------------------------------------
0B17           2897   ;        main.c:678: void Set_Pin_Input (unsigned char pin)
0B17           2898   ;        -----------------------------------------
0B17           2899   ;         function Set_Pin_Input
0B17           2900   ;        -----------------------------------------
0B17           2901   _Set_Pin_Input:
0B17 AA82      2902            mov     r2,dpl
0B19           2903   ;        main.c:682: mask=(1<<(pin&0x7));
0B19 7407      2904            mov     a,#0x07
0B1B 5A        2905            anl     a,r2
0B1C F5F0      2906            mov     b,a
0B1E 05F0      2907            inc     b
0B20 7401      2908            mov     a,#0x01
0B22 8000      2909            sjmp    L024011?
0B24           2910   L024009?:
0B24 25E0      2911            add     a,acc
0B26           2912   L024011?:
0B26 D5F060    2913            djnz    b,L024009?
0B29           2914   ;        main.c:683: mask=~mask;
0B29 F4        2915            cpl     a
0B2A FB        2916            mov     r3,a
0B2B           2917   ;        main.c:684: switch(pin/0x10)
0B2B EA        2918            mov     a,r2
0B2C C4        2919            swap    a
0B2D 540F      2920            anl     a,#0x0f
0B2F FA        2921            mov  r2,a
0B30 24FC      2922            add     a,#0xff - 0x03
0B32 4000      2923            jc      L024006?
0B34 EA        2924            mov     a,r2
0B35 2A        2925            add     a,r2
0B36 2A        2926            add     a,r2
0B37 9001E0    2927            mov     dptr,#L024013?
0B3A 73        2928            jmp     @a+dptr
0B3B           2929   L024013?:
0B3B 020000    2930            ljmp    L024001?
0B3E 020000    2931            ljmp    L024002?
0B41 020000    2932            ljmp    L024003?
0B44 020000    2933            ljmp    L024004?
0B47           2934   ;        main.c:686: case 0: P0MDOUT &= mask; break;
0B47           2935   L024001?:
0B47 EB        2936            mov     a,r3
0B48 52A4      2937            anl     _P0MDOUT,a
0B4A           2938   ;        main.c:687: case 1: P1MDOUT &= mask; break;
0B4A 22        2939            ret
0B4B           2940   L024002?:
0B4B EB        2941            mov     a,r3
0B4C 52A5      2942            anl     _P1MDOUT,a
0B4E           2943   ;        main.c:688: case 2: P2MDOUT &= mask; break; 
0B4E 22        2944            ret
0B4F           2945   L024003?:
0B4F EB        2946            mov     a,r3
0B50 52A6      2947            anl     _P2MDOUT,a
0B52           2948   ;        main.c:689: case 3: P3MDOUT &= mask; break; 
0B52 22        2949            ret
0B53           2950   L024004?:
0B53 EB        2951            mov     a,r3
0B54 529C      2952            anl     _P3MDOUT,a
0B56           2953   ;        main.c:690: }   
0B56           2954   L024006?:
0B56 22        2955            ret
0B57           2956   ;------------------------------------------------------------
0B57           2957   ;Allocation info for local variables in function 'InitADC'
0B57           2958   ;------------------------------------------------------------
0B57           2959   ;------------------------------------------------------------
0B57           2960   ;        main.c:693: void InitADC (void)
0B57           2961   ;        -----------------------------------------
0B57           2962   ;         function InitADC
0B57           2963   ;        -----------------------------------------
0B57           2964   _InitADC:
0B57           2965   ;        main.c:695: SFRPAGE = 0x00;
0B57 75A700    2966            mov     _SFRPAGE,#0x00
0B5A           2967   ;        main.c:696: ADEN=0; // Disable ADC
0B5A C2EF      2968            clr     _ADEN
0B5C           2969   ;        main.c:701: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0B5C 75B280    2970            mov     _ADC0CN1,#0x80
0B5F           2971   ;        main.c:705: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0B5F 75BC20    2972            mov     _ADC0CF0,#0x20
0B62           2973   ;        main.c:709: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
0B62 75B91E    2974            mov     _ADC0CF1,#0x1E
0B65           2975   ;        main.c:718: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0B65 75E800    2976            mov     _ADC0CN0,#0x00
0B68           2977   ;        main.c:723: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0B68 75DF3F    2978            mov     _ADC0CF2,#0x3F
0B6B           2979   ;        main.c:727: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0B6B 75B300    2980            mov     _ADC0CN2,#0x00
0B6E           2981   ;        main.c:729: ADEN=1; // Enable ADC
0B6E D2EF      2982            setb    _ADEN
0B70 22        2983            ret
0B71           2984   ;------------------------------------------------------------
0B71           2985   ;Allocation info for local variables in function 'InitPinADC'
0B71           2986   ;------------------------------------------------------------
0B71           2987   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
0B71           2988   ;portno                    Allocated to registers r2 
0B71           2989   ;mask                      Allocated to registers r3 
0B71           2990   ;------------------------------------------------------------
0B71           2991   ;        main.c:732: void InitPinADC (unsigned char portno, unsigned char pin_num)
0B71           2992   ;        -----------------------------------------
0B71           2993   ;         function InitPinADC
0B71           2994   ;        -----------------------------------------
0B71           2995   _InitPinADC:
0B71 AA82      2996            mov     r2,dpl
0B73           2997   ;        main.c:736: mask=1<<pin_num;
0B73 85B0F0    2998            mov     b,_InitPinADC_PARM_2
0B76 05F0      2999            inc     b
0B78 7401      3000            mov     a,#0x01
0B7A 8000      3001            sjmp    L026013?
0B7C           3002   L026011?:
0B7C 25E0      3003            add     a,acc
0B7E           3004   L026013?:
0B7E D5F060    3005            djnz    b,L026011?
0B81 FB        3006            mov     r3,a
0B82           3007   ;        main.c:738: SFRPAGE = 0x20;
0B82 75A720    3008            mov     _SFRPAGE,#0x20
0B85           3009   ;        main.c:739: switch (portno)
0B85 BA00A0    3010            cjne    r2,#0x00,L026014?
0B88 8000      3011            sjmp    L026001?
0B8A           3012   L026014?:
0B8A BA0120    3013            cjne    r2,#0x01,L026015?
0B8D 8000      3014            sjmp    L026002?
0B8F           3015   L026015?:
0B8F           3016   ;        main.c:741: case 0:
0B8F BA02A0    3017            cjne    r2,#0x02,L026005?
0B92 8000      3018            sjmp    L026003?
0B94           3019   L026001?:
0B94           3020   ;        main.c:742: P0MDIN &= (~mask); // Set pin as analog input
0B94 EB        3021            mov     a,r3
0B95 F4        3022            cpl     a
0B96 FA        3023            mov     r2,a
0B97 52F1      3024            anl     _P0MDIN,a
0B99           3025   ;        main.c:743: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0B99 EB        3026            mov     a,r3
0B9A 42D4      3027            orl     _P0SKIP,a
0B9C           3028   ;        main.c:744: break;
0B9C           3029   ;        main.c:745: case 1:
0B9C 8000      3030            sjmp    L026005?
0B9E           3031   L026002?:
0B9E           3032   ;        main.c:746: P1MDIN &= (~mask); // Set pin as analog input
0B9E EB        3033            mov     a,r3
0B9F F4        3034            cpl     a
0BA0 FA        3035            mov     r2,a
0BA1 52F2      3036            anl     _P1MDIN,a
0BA3           3037   ;        main.c:747: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0BA3 EB        3038            mov     a,r3
0BA4 42D5      3039            orl     _P1SKIP,a
0BA6           3040   ;        main.c:748: break;
0BA6           3041   ;        main.c:749: case 2:
0BA6 8000      3042            sjmp    L026005?
0BA8           3043   L026003?:
0BA8           3044   ;        main.c:750: P2MDIN &= (~mask); // Set pin as analog input
0BA8 EB        3045            mov     a,r3
0BA9 F4        3046            cpl     a
0BAA FA        3047            mov     r2,a
0BAB 52F3      3048            anl     _P2MDIN,a
0BAD           3049   ;        main.c:751: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0BAD EB        3050            mov     a,r3
0BAE 42CC      3051            orl     _P2SKIP,a
0BB0           3052   ;        main.c:755: }
0BB0           3053   L026005?:
0BB0           3054   ;        main.c:756: SFRPAGE = 0x00;
0BB0 75A700    3055            mov     _SFRPAGE,#0x00
0BB3 22        3056            ret
0BB4           3057   ;------------------------------------------------------------
0BB4           3058   ;Allocation info for local variables in function 'ADC_at_Pin'
0BB4           3059   ;------------------------------------------------------------
0BB4           3060   ;pin                       Allocated to registers 
0BB4           3061   ;------------------------------------------------------------
0BB4           3062   ;        main.c:759: unsigned int ADC_at_Pin(unsigned char pin)
0BB4           3063   ;        -----------------------------------------
0BB4           3064   ;         function ADC_at_Pin
0BB4           3065   ;        -----------------------------------------
0BB4           3066   _ADC_at_Pin:
0BB4 8582BB    3067            mov     _ADC0MX,dpl
0BB7           3068   ;        main.c:762: ADINT = 0;
0BB7 C2ED      3069            clr     _ADINT
0BB9           3070   ;        main.c:763: ADBUSY = 1;     // Convert voltage at the pin
0BB9 D2EC      3071            setb    _ADBUSY
0BBB           3072   ;        main.c:764: while (!ADINT); // Wait for conversion to complete
0BBB           3073   L027001?:
0BBB 30ED20    3074            jnb     _ADINT,L027001?
0BBE           3075   ;        main.c:765: return (ADC0);
0BBE 85BD82    3076            mov     dpl,_ADC0
0BC1 85BE83    3077            mov     dph,(_ADC0 >> 8)
0BC4 22        3078            ret
0BC5           3079   ;------------------------------------------------------------
0BC5           3080   ;Allocation info for local variables in function 'ReadHX711'
0BC5           3081   ;------------------------------------------------------------
0BC5           3082   ;dataa                     Allocated with name '_ReadHX711_dataa_1_168'
0BC5           3083   ;i                         Allocated with name '_ReadHX711_i_1_168'
0BC5           3084   ;ans                       Allocated with name '_ReadHX711_ans_1_168'
0BC5           3085   ;j                         Allocated with name '_ReadHX711_j_1_168'
0BC5           3086   ;------------------------------------------------------------
0BC5           3087   ;        main.c:768: int ReadHX711(void) {
0BC5           3088   ;        -----------------------------------------
0BC5           3089   ;         function ReadHX711
0BC5           3090   ;        -----------------------------------------
0BC5           3091   _ReadHX711:
0BC5           3092   ;        main.c:769: xdata unsigned long dataa = 0;
0BC5 90D568    3093            mov     dptr,#_ReadHX711_dataa_1_168
0BC8 E4        3094            clr     a
0BC9 F0        3095            movx    @dptr,a
0BCA A3        3096            inc     dptr
0BCB F0        3097            movx    @dptr,a
0BCC A3        3098            inc     dptr
0BCD F0        3099            movx    @dptr,a
0BCE A3        3100            inc     dptr
0BCF F0        3101            movx    @dptr,a
0BD0           3102   ;        main.c:774: PD_SCK = 0;
0BD0 C2A5      3103            clr     _P2_5
0BD2           3104   ;        main.c:776: for (i = 0; i < 24; i++) {
0BD2 7A00      3105            mov     r2,#0x00
0BD4           3106   L028011?:
0BD4 C3        3107            clr     c
0BD5 EA        3108            mov     a,r2
0BD6 6480      3109            xrl     a,#0x80
0BD8 9498      3110            subb    a,#0x98
0BDA 4000      3111            jc      L028037?
0BDC 020000    3112            ljmp    L028014?
0BDF           3113   L028037?:
0BDF           3114   ;        main.c:777: PD_SCK = 1;
0BDF D2A5      3115            setb    _P2_5
0BE1           3116   ;        main.c:778: for (j = 0; j < 4; j++);
0BE1 90D5B8    3117            mov     dptr,#_ReadHX711_j_1_168
0BE4 E4        3118            clr     a
0BE5 F0        3119            movx    @dptr,a
0BE6           3120   L028003?:
0BE6 90D5B8    3121            mov     dptr,#_ReadHX711_j_1_168
0BE9 E0        3122            movx    a,@dptr
0BEA FB        3123            mov     r3,a
0BEB C3        3124            clr     c
0BEC 6480      3125            xrl     a,#0x80
0BEE 9484      3126            subb    a,#0x84
0BF0 5000      3127            jnc     L028006?
0BF2 90D5B8    3128            mov     dptr,#_ReadHX711_j_1_168
0BF5 E0        3129            movx    a,@dptr
0BF6 2401      3130            add     a,#0x01
0BF8 F0        3131            movx    @dptr,a
0BF9 8000      3132            sjmp    L028003?
0BFB           3133   L028006?:
0BFB           3134   ;        main.c:779: dataa = dataa << 1;
0BFB 90D568    3135            mov     dptr,#_ReadHX711_dataa_1_168
0BFE E0        3136            movx    a,@dptr
0BFF FB        3137            mov     r3,a
0C00 A3        3138            inc     dptr
0C01 E0        3139            movx    a,@dptr
0C02 FC        3140            mov     r4,a
0C03 A3        3141            inc     dptr
0C04 E0        3142            movx    a,@dptr
0C05 FD        3143            mov     r5,a
0C06 A3        3144            inc     dptr
0C07 E0        3145            movx    a,@dptr
0C08 FE        3146            mov     r6,a
0C09 EB        3147            mov     a,r3
0C0A 2B        3148            add     a,r3
0C0B FB        3149            mov     r3,a
0C0C EC        3150            mov     a,r4
0C0D 33        3151            rlc     a
0C0E FC        3152            mov     r4,a
0C0F ED        3153            mov     a,r5
0C10 33        3154            rlc     a
0C11 FD        3155            mov     r5,a
0C12 EE        3156            mov     a,r6
0C13 33        3157            rlc     a
0C14 FE        3158            mov     r6,a
0C15 90D568    3159            mov     dptr,#_ReadHX711_dataa_1_168
0C18 EB        3160            mov     a,r3
0C19 F0        3161            movx    @dptr,a
0C1A A3        3162            inc     dptr
0C1B EC        3163            mov     a,r4
0C1C F0        3164            movx    @dptr,a
0C1D A3        3165            inc     dptr
0C1E ED        3166            mov     a,r5
0C1F F0        3167            movx    @dptr,a
0C20 A3        3168            inc     dptr
0C21 EE        3169            mov     a,r6
0C22 F0        3170            movx    @dptr,a
0C23           3171   ;        main.c:780: if (DOUT) {
0C23 30A6A0    3172            jnb     _P2_6,L028002?
0C26           3173   ;        main.c:781: dataa |= 0x01;
0C26 90D568    3174            mov     dptr,#_ReadHX711_dataa_1_168
0C29 E0        3175            movx    a,@dptr
0C2A FB        3176            mov     r3,a
0C2B A3        3177            inc     dptr
0C2C E0        3178            movx    a,@dptr
0C2D FC        3179            mov     r4,a
0C2E A3        3180            inc     dptr
0C2F E0        3181            movx    a,@dptr
0C30 FD        3182            mov     r5,a
0C31 A3        3183            inc     dptr
0C32 E0        3184            movx    a,@dptr
0C33 FE        3185            mov     r6,a
0C34 90D568    3186            mov     dptr,#_ReadHX711_dataa_1_168
0C37 7401      3187            mov     a,#0x01
0C39 4B        3188            orl     a,r3
0C3A F0        3189            movx    @dptr,a
0C3B A3        3190            inc     dptr
0C3C EC        3191            mov     a,r4
0C3D F0        3192            movx    @dptr,a
0C3E A3        3193            inc     dptr
0C3F ED        3194            mov     a,r5
0C40 F0        3195            movx    @dptr,a
0C41 A3        3196            inc     dptr
0C42 EE        3197            mov     a,r6
0C43 F0        3198            movx    @dptr,a
0C44           3199   L028002?:
0C44           3200   ;        main.c:783: PD_SCK = 0;
0C44 C2A5      3201            clr     _P2_5
0C46           3202   ;        main.c:784: for (j = 0; j < 4; j++);
0C46 90D5B8    3203            mov     dptr,#_ReadHX711_j_1_168
0C49 E4        3204            clr     a
0C4A F0        3205            movx    @dptr,a
0C4B           3206   L028007?:
0C4B 90D5B8    3207            mov     dptr,#_ReadHX711_j_1_168
0C4E E0        3208            movx    a,@dptr
0C4F FB        3209            mov     r3,a
0C50 C3        3210            clr     c
0C51 6480      3211            xrl     a,#0x80
0C53 9484      3212            subb    a,#0x84
0C55 5000      3213            jnc     L028013?
0C57 90D5B8    3214            mov     dptr,#_ReadHX711_j_1_168
0C5A E0        3215            movx    a,@dptr
0C5B 2401      3216            add     a,#0x01
0C5D F0        3217            movx    @dptr,a
0C5E 8000      3218            sjmp    L028007?
0C60           3219   L028013?:
0C60           3220   ;        main.c:776: for (i = 0; i < 24; i++) {
0C60 0A        3221            inc     r2
0C61 020000    3222            ljmp    L028011?
0C64           3223   L028014?:
0C64           3224   ;        main.c:787: PD_SCK = 1;
0C64 D2A5      3225            setb    _P2_5
0C66           3226   ;        main.c:788: for (j = 0; j < 4; j++);
0C66 90D5B8    3227            mov     dptr,#_ReadHX711_j_1_168
0C69 E4        3228            clr     a
0C6A F0        3229            movx    @dptr,a
0C6B           3230   L028015?:
0C6B 90D5B8    3231            mov     dptr,#_ReadHX711_j_1_168
0C6E E0        3232            movx    a,@dptr
0C6F FA        3233            mov     r2,a
0C70 C3        3234            clr     c
0C71 6480      3235            xrl     a,#0x80
0C73 9484      3236            subb    a,#0x84
0C75 5000      3237            jnc     L028018?
0C77 90D5B8    3238            mov     dptr,#_ReadHX711_j_1_168
0C7A E0        3239            movx    a,@dptr
0C7B 2401      3240            add     a,#0x01
0C7D F0        3241            movx    @dptr,a
0C7E 8000      3242            sjmp    L028015?
0C80           3243   L028018?:
0C80           3244   ;        main.c:789: PD_SCK = 0;
0C80 C2A5      3245            clr     _P2_5
0C82           3246   ;        main.c:790: for (j = 0; j < 4; j++);
0C82 90D5B8    3247            mov     dptr,#_ReadHX711_j_1_168
0C85 E4        3248            clr     a
0C86 F0        3249            movx    @dptr,a
0C87           3250   L028019?:
0C87 90D5B8    3251            mov     dptr,#_ReadHX711_j_1_168
0C8A E0        3252            movx    a,@dptr
0C8B FA        3253            mov     r2,a
0C8C C3        3254            clr     c
0C8D 6480      3255            xrl     a,#0x80
0C8F 9484      3256            subb    a,#0x84
0C91 5000      3257            jnc     L028022?
0C93 90D5B8    3258            mov     dptr,#_ReadHX711_j_1_168
0C96 E0        3259            movx    a,@dptr
0C97 2401      3260            add     a,#0x01
0C99 F0        3261            movx    @dptr,a
0C9A 8000      3262            sjmp    L028019?
0C9C           3263   L028022?:
0C9C           3264   ;        main.c:791: ans = (dataa % 1000000)/10;
0C9C 90D568    3265            mov     dptr,#_ReadHX711_dataa_1_168
0C9F E0        3266            movx    a,@dptr
0CA0 FA        3267            mov     r2,a
0CA1 A3        3268            inc     dptr
0CA2 E0        3269            movx    a,@dptr
0CA3 FB        3270            mov     r3,a
0CA4 A3        3271            inc     dptr
0CA5 E0        3272            movx    a,@dptr
0CA6 FC        3273            mov     r4,a
0CA7 A3        3274            inc     dptr
0CA8 E0        3275            movx    a,@dptr
0CA9 FD        3276            mov     r5,a
0CAA 750040    3277            mov     __modulong_PARM_2,#0x40
0CAD 750142    3278            mov     (__modulong_PARM_2 + 1),#0x42
0CB0 75020F    3279            mov     (__modulong_PARM_2 + 2),#0x0F
0CB3 750300    3280            mov     (__modulong_PARM_2 + 3),#0x00
0CB6 8A82      3281            mov     dpl,r2
0CB8 8B83      3282            mov     dph,r3
0CBA 8CF0      3283            mov     b,r4
0CBC ED        3284            mov     a,r5
0CBD 120000    3285            lcall   __modulong
0CC0 AA82      3286            mov     r2,dpl
0CC2 AB83      3287            mov     r3,dph
0CC4 ACF0      3288            mov     r4,b
0CC6 FD        3289            mov     r5,a
0CC7 75000A    3290            mov     __divulong_PARM_2,#0x0A
0CCA E4        3291            clr     a
0CCB F501      3292            mov     (__divulong_PARM_2 + 1),a
0CCD F502      3293            mov     (__divulong_PARM_2 + 2),a
0CCF F503      3294            mov     (__divulong_PARM_2 + 3),a
0CD1 8A82      3295            mov     dpl,r2
0CD3 8B83      3296            mov     dph,r3
0CD5 8CF0      3297            mov     b,r4
0CD7 ED        3298            mov     a,r5
0CD8           3299   ;        main.c:792: return ans;
0CD8 020000    3300            ljmp    __divulong
0CDB           3301   ;------------------------------------------------------------
0CDB           3302   ;Allocation info for local variables in function 'Timer5_ISR'
0CDB           3303   ;------------------------------------------------------------
0CDB           3304   ;------------------------------------------------------------
0CDB           3305   ;        main.c:795: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0CDB           3306   ;        -----------------------------------------
0CDB           3307   ;         function Timer5_ISR
0CDB           3308   ;        -----------------------------------------
0CDB           3309   _Timer5_ISR:
0CDB C0F0      3310            push    bits
0CDD C0E0      3311            push    acc
0CDF C0F0      3312            push    b
0CE1 C082      3313            push    dpl
0CE3 C083      3314            push    dph
0CE5 C002      3315            push    (0+2)
0CE7 C003      3316            push    (0+3)
0CE9 C004      3317            push    (0+4)
0CEB C005      3318            push    (0+5)
0CED C006      3319            push    (0+6)
0CEF C007      3320            push    (0+7)
0CF1 C000      3321            push    (0+0)
0CF3 C001      3322            push    (0+1)
0CF5 C0D0      3323            push    psw
0CF7 75D000    3324            mov     psw,#0x00
0CFA           3325   ;        main.c:797: SFRPAGE=0x10;
0CFA 75A710    3326            mov     _SFRPAGE,#0x10
0CFD           3327   ;        main.c:798: TF5H = 0; // Clear Timer5 interrupt flag
0CFD C2C7      3328            clr     _TF5H
0CFF           3329   ;        main.c:799: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0CFF 75D2C4    3330            mov     _TMR5RL,#0xC4
0D02 75D3FF    3331            mov     (_TMR5RL >> 8),#0xFF
0D05           3332   ;        main.c:801: fre_mea_count++;
0D05 9054E0    3333            mov     dptr,#_fre_mea_count
0D08 E0        3334            movx    a,@dptr
0D09 2401      3335            add     a,#0x01
0D0B F0        3336            movx    @dptr,a
0D0C A3        3337            inc     dptr
0D0D E0        3338            movx    a,@dptr
0D0E 3400      3339            addc    a,#0x00
0D10 F0        3340            movx    @dptr,a
0D11           3341   ;        main.c:802: if(fre_mea_count == 1000){
0D11 9054E0    3342            mov     dptr,#_fre_mea_count
0D14 E0        3343            movx    a,@dptr
0D15 FA        3344            mov     r2,a
0D16 A3        3345            inc     dptr
0D17 E0        3346            movx    a,@dptr
0D18 FB        3347            mov     r3,a
0D19 BAE830    3348            cjne    r2,#0xE8,L029004?
0D1C BB0330    3349            cjne    r3,#0x03,L029004?
0D1F           3350   ;        main.c:803: fre_mea_count = 0;
0D1F 9054E0    3351            mov     dptr,#_fre_mea_count
0D22 E4        3352            clr     a
0D23 F0        3353            movx    @dptr,a
0D24 A3        3354            inc     dptr
0D25 F0        3355            movx    @dptr,a
0D26           3356   ;        main.c:804: if(mea_yes)
0D26 9052D0    3357            mov     dptr,#_mea_yes
0D29 E0        3358            movx    a,@dptr
0D2A FA        3359            mov     r2,a
0D2B 6000      3360            jz      L029004?
0D2D           3361   ;        main.c:806: freq100 = get_freq();
0D2D 120000    3362            lcall   _get_freq
0D30 AA82      3363            mov     r2,dpl
0D32 AB83      3364            mov     r3,dph
0D34 905BE0    3365            mov     dptr,#_freq100
0D37 EA        3366            mov     a,r2
0D38 F0        3367            movx    @dptr,a
0D39 A3        3368            inc     dptr
0D3A EB        3369            mov     a,r3
0D3B F0        3370            movx    @dptr,a
0D3C EB        3371            mov     a,r3
0D3D 33        3372            rlc     a
0D3E 95E0      3373            subb    a,acc
0D40 A3        3374            inc     dptr
0D41 F0        3375            movx    @dptr,a
0D42 A3        3376            inc     dptr
0D43 F0        3377            movx    @dptr,a
0D44           3378   L029004?:
0D44           3379   ;        main.c:811: weight_mea_count++;
0D44 9054A0    3380            mov     dptr,#_weight_mea_count
0D47 E0        3381            movx    a,@dptr
0D48 2401      3382            add     a,#0x01
0D4A F0        3383            movx    @dptr,a
0D4B A3        3384            inc     dptr
0D4C E0        3385            movx    a,@dptr
0D4D 3400      3386            addc    a,#0x00
0D4F F0        3387            movx    @dptr,a
0D50           3388   ;        main.c:812: if(weight_mea_count == 20000){
0D50 9054A0    3389            mov     dptr,#_weight_mea_count
0D53 E0        3390            movx    a,@dptr
0D54 FA        3391            mov     r2,a
0D55 A3        3392            inc     dptr
0D56 E0        3393            movx    a,@dptr
0D57 FB        3394            mov     r3,a
0D58 BA20B0    3395            cjne    r2,#0x20,L029008?
0D5B BB4EB0    3396            cjne    r3,#0x4E,L029008?
0D5E           3397   ;        main.c:813: weight_mea_count = 0;
0D5E 9054A0    3398            mov     dptr,#_weight_mea_count
0D61 E4        3399            clr     a
0D62 F0        3400            movx    @dptr,a
0D63 A3        3401            inc     dptr
0D64 F0        3402            movx    @dptr,a
0D65           3403   ;        main.c:814: if(mea_yes) weight = ReadHX711();
0D65 9052D0    3404            mov     dptr,#_mea_yes
0D68 E0        3405            movx    a,@dptr
0D69 FA        3406            mov     r2,a
0D6A 6000      3407            jz      L029008?
0D6C 120000    3408            lcall   _ReadHX711
0D6F E582      3409            mov     a,dpl
0D71 8583F0    3410            mov     b,dph
0D74 905290    3411            mov     dptr,#_weight
0D77 F0        3412            movx    @dptr,a
0D78 A3        3413            inc     dptr
0D79 E5F0      3414            mov     a,b
0D7B F0        3415            movx    @dptr,a
0D7C           3416   L029008?:
0D7C           3417   ;        main.c:819: pwm_counter++; 
0D7C 9057E0    3418            mov     dptr,#_pwm_counter
0D7F E0        3419            movx    a,@dptr
0D80 2401      3420            add     a,#0x01
0D82 F0        3421            movx    @dptr,a
0D83 A3        3422            inc     dptr
0D84 E0        3423            movx    a,@dptr
0D85 3400      3424            addc    a,#0x00
0D87 F0        3425            movx    @dptr,a
0D88           3426   ;        main.c:820: if (pwm_counter == 100){
0D88 9057E0    3427            mov     dptr,#_pwm_counter
0D8B E0        3428            movx    a,@dptr
0D8C FA        3429            mov     r2,a
0D8D A3        3430            inc     dptr
0D8E E0        3431            movx    a,@dptr
0D8F FB        3432            mov     r3,a
0D90 BA64F0    3433            cjne    r2,#0x64,L029010?
0D93 BB00F0    3434            cjne    r3,#0x00,L029010?
0D96           3435   ;        main.c:821: pwm_counter = 0; 
0D96 9057E0    3436            mov     dptr,#_pwm_counter
0D99 E4        3437            clr     a
0D9A F0        3438            movx    @dptr,a
0D9B A3        3439            inc     dptr
0D9C F0        3440            movx    @dptr,a
0D9D           3441   L029010?:
0D9D           3442   ;        main.c:824: if (pwm_right > pwm_counter){
0D9D 905720    3443            mov     dptr,#_pwm_right
0DA0 E0        3444            movx    a,@dptr
0DA1 FA        3445            mov     r2,a
0DA2 9057E0    3446            mov     dptr,#_pwm_counter
0DA5 E0        3447            movx    a,@dptr
0DA6 FB        3448            mov     r3,a
0DA7 A3        3449            inc     dptr
0DA8 E0        3450            movx    a,@dptr
0DA9 FC        3451            mov     r4,a
0DAA 7D00      3452            mov     r5,#0x00
0DAC C3        3453            clr     c
0DAD EB        3454            mov     a,r3
0DAE 9A        3455            subb    a,r2
0DAF EC        3456            mov     a,r4
0DB0 9D        3457            subb    a,r5
0DB1 5000      3458            jnc     L029015?
0DB3           3459   ;        main.c:825: if(L_motor_dir){
0DB3 9056E0    3460            mov     dptr,#_L_motor_dir
0DB6 E0        3461            movx    a,@dptr
0DB7 FA        3462            mov     r2,a
0DB8 6000      3463            jz      L029012?
0DBA           3464   ;        main.c:826: L_bridge_1 = 1; 
0DBA D2A1      3465            setb    _P2_1
0DBC           3466   ;        main.c:827: L_bridge_2 = 0; 
0DBC C2A2      3467            clr     _P2_2
0DBE 8000      3468            sjmp    L029016?
0DC0           3469   L029012?:
0DC0           3470   ;        main.c:830: L_bridge_1 = 0; 
0DC0 C2A1      3471            clr     _P2_1
0DC2           3472   ;        main.c:831: L_bridge_2 = 1; 
0DC2 D2A2      3473            setb    _P2_2
0DC4 8000      3474            sjmp    L029016?
0DC6           3475   L029015?:
0DC6           3476   ;        main.c:835: L_bridge_1 = 0; 
0DC6 C2A1      3477            clr     _P2_1
0DC8           3478   ;        main.c:836: L_bridge_2 = 0; 
0DC8 C2A2      3479            clr     _P2_2
0DCA           3480   L029016?:
0DCA           3481   ;        main.c:838: if (pwm_left > pwm_counter){
0DCA 905760    3482            mov     dptr,#_pwm_left
0DCD E0        3483            movx    a,@dptr
0DCE FA        3484            mov     r2,a
0DCF 7D00      3485            mov     r5,#0x00
0DD1 C3        3486            clr     c
0DD2 EB        3487            mov     a,r3
0DD3 9A        3488            subb    a,r2
0DD4 EC        3489            mov     a,r4
0DD5 9D        3490            subb    a,r5
0DD6 5000      3491            jnc     L029021?
0DD8           3492   ;        main.c:839: if (R_motor_dir){
0DD8 9056A0    3493            mov     dptr,#_R_motor_dir
0DDB E0        3494            movx    a,@dptr
0DDC FA        3495            mov     r2,a
0DDD 6000      3496            jz      L029018?
0DDF           3497   ;        main.c:840: R_bridge_1 = 1; 
0DDF D2A4      3498            setb    _P2_4
0DE1           3499   ;        main.c:841: R_bridge_2 = 0;
0DE1 C2A3      3500            clr     _P2_3
0DE3 8000      3501            sjmp    L029022?
0DE5           3502   L029018?:
0DE5           3503   ;        main.c:844: R_bridge_1 = 0; 
0DE5 C2A4      3504            clr     _P2_4
0DE7           3505   ;        main.c:845: R_bridge_2 = 1;
0DE7 D2A3      3506            setb    _P2_3
0DE9 8000      3507            sjmp    L029022?
0DEB           3508   L029021?:
0DEB           3509   ;        main.c:849: R_bridge_1 = 0; 
0DEB C2A4      3510            clr     _P2_4
0DED           3511   ;        main.c:850: R_bridge_2 = 0; 
0DED C2A3      3512            clr     _P2_3
0DEF           3513   L029022?:
0DEF           3514   ;        main.c:853: servo_counter++;
0DEF 9057A0    3515            mov     dptr,#_servo_counter
0DF2 E0        3516            movx    a,@dptr
0DF3 2401      3517            add     a,#0x01
0DF5 F0        3518            movx    @dptr,a
0DF6 A3        3519            inc     dptr
0DF7 E0        3520            movx    a,@dptr
0DF8 3400      3521            addc    a,#0x00
0DFA F0        3522            movx    @dptr,a
0DFB           3523   ;        main.c:854: if(servo_counter==2000)
0DFB 9057A0    3524            mov     dptr,#_servo_counter
0DFE E0        3525            movx    a,@dptr
0DFF FA        3526            mov     r2,a
0E00 A3        3527            inc     dptr
0E01 E0        3528            movx    a,@dptr
0E02 FB        3529            mov     r3,a
0E03 BAD0B0    3530            cjne    r2,#0xD0,L029024?
0E06 BB07B0    3531            cjne    r3,#0x07,L029024?
0E09           3532   ;        main.c:856: servo_counter=0;
0E09 9057A0    3533            mov     dptr,#_servo_counter
0E0C E4        3534            clr     a
0E0D F0        3535            movx    @dptr,a
0E0E A3        3536            inc     dptr
0E0F F0        3537            movx    @dptr,a
0E10           3538   ;        main.c:857: Servo_arm=1;
0E10 D296      3539            setb    _P1_6
0E12           3540   ;        main.c:858: Servo_base=1;
0E12 D297      3541            setb    _P1_7
0E14           3542   L029024?:
0E14           3543   ;        main.c:860: if(servo_arm>=servo_counter)
0E14 905620    3544            mov     dptr,#_servo_arm
0E17 E0        3545            movx    a,@dptr
0E18 FA        3546            mov     r2,a
0E19 9057A0    3547            mov     dptr,#_servo_counter
0E1C E0        3548            movx    a,@dptr
0E1D FB        3549            mov     r3,a
0E1E A3        3550            inc     dptr
0E1F E0        3551            movx    a,@dptr
0E20 FC        3552            mov     r4,a
0E21 7D00      3553            mov     r5,#0x00
0E23 C3        3554            clr     c
0E24 EA        3555            mov     a,r2
0E25 9B        3556            subb    a,r3
0E26 ED        3557            mov     a,r5
0E27 9C        3558            subb    a,r4
0E28 4000      3559            jc      L029026?
0E2A           3560   ;        main.c:862: Servo_arm = 1;
0E2A D296      3561            setb    _P1_6
0E2C 8000      3562            sjmp    L029027?
0E2E           3563   L029026?:
0E2E           3564   ;        main.c:866: Servo_arm = 0; 
0E2E C296      3565            clr     _P1_6
0E30           3566   L029027?:
0E30           3567   ;        main.c:868: if(servo_base>=servo_counter)
0E30 905660    3568            mov     dptr,#_servo_base
0E33 E0        3569            movx    a,@dptr
0E34 FA        3570            mov     r2,a
0E35 7D00      3571            mov     r5,#0x00
0E37 C3        3572            clr     c
0E38 EA        3573            mov     a,r2
0E39 9B        3574            subb    a,r3
0E3A ED        3575            mov     a,r5
0E3B 9C        3576            subb    a,r4
0E3C 4000      3577            jc      L029029?
0E3E           3578   ;        main.c:870: Servo_base = 1;
0E3E D297      3579            setb    _P1_7
0E40 8000      3580            sjmp    L029031?
0E42           3581   L029029?:
0E42           3582   ;        main.c:874: Servo_base = 0; 
0E42 C297      3583            clr     _P1_7
0E44           3584   L029031?:
0E44 D0D0      3585            pop     psw
0E46 D001      3586            pop     (0+1)
0E48 D000      3587            pop     (0+0)
0E4A D007      3588            pop     (0+7)
0E4C D006      3589            pop     (0+6)
0E4E D005      3590            pop     (0+5)
0E50 D004      3591            pop     (0+4)
0E52 D003      3592            pop     (0+3)
0E54 D002      3593            pop     (0+2)
0E56 D083      3594            pop     dph
0E58 D082      3595            pop     dpl
0E5A D0F0      3596            pop     b
0E5C D0E0      3597            pop     acc
0E5E D0F0      3598            pop     bits
0E60 32        3599            reti
0E61           3600   ;------------------------------------------------------------
0E61           3601   ;Allocation info for local variables in function 'servo_pick'
0E61           3602   ;------------------------------------------------------------
0E61           3603   ;i                         Allocated with name '_servo_pick_i_1_190'
0E61           3604   ;------------------------------------------------------------
0E61           3605   ;        main.c:878: void servo_pick(){
0E61           3606   ;        -----------------------------------------
0E61           3607   ;         function servo_pick
0E61           3608   ;        -----------------------------------------
0E61           3609   _servo_pick:
0E61           3610   ;        main.c:880: servo_arm = 50;
0E61 905620    3611            mov     dptr,#_servo_arm
0E64 7432      3612            mov     a,#0x32
0E66 F0        3613            movx    @dptr,a
0E67           3614   ;        main.c:881: servo_base = 50;
0E67 905660    3615            mov     dptr,#_servo_base
0E6A 7432      3616            mov     a,#0x32
0E6C F0        3617            movx    @dptr,a
0E6D           3618   ;        main.c:882: waitms(100);
0E6D 900064    3619            mov     dptr,#0x0064
0E70 120000    3620            lcall   _waitms
0E73           3621   ;        main.c:884: for (i=0; i < 250-50; i++)
0E73 7A00      3622            mov     r2,#0x00
0E75 7B00      3623            mov     r3,#0x00
0E77           3624   L030001?:
0E77 C3        3625            clr     c
0E78 EA        3626            mov     a,r2
0E79 94C8      3627            subb    a,#0xC8
0E7B EB        3628            mov     a,r3
0E7C 6480      3629            xrl     a,#0x80
0E7E 9480      3630            subb    a,#0x80
0E80 5000      3631            jnc     L030004?
0E82           3632   ;        main.c:886: servo_base++; 
0E82 905660    3633            mov     dptr,#_servo_base
0E85 E0        3634            movx    a,@dptr
0E86 2401      3635            add     a,#0x01
0E88 F0        3636            movx    @dptr,a
0E89           3637   ;        main.c:887: waitms(1);
0E89 900001    3638            mov     dptr,#0x0001
0E8C C002      3639            push    ar2
0E8E C003      3640            push    ar3
0E90 120000    3641            lcall   _waitms
0E93 D003      3642            pop     ar3
0E95 D002      3643            pop     ar2
0E97           3644   ;        main.c:884: for (i=0; i < 250-50; i++)
0E97 0A        3645            inc     r2
0E98 BA00F0    3646            cjne    r2,#0x00,L030001?
0E9B 0B        3647            inc     r3
0E9C 8000      3648            sjmp    L030001?
0E9E           3649   L030004?:
0E9E           3650   ;        main.c:889: waitms(600);
0E9E 900258    3651            mov     dptr,#0x0258
0EA1 120000    3652            lcall   _waitms
0EA4           3653   ;        main.c:890: for(i = 0; i < 250 - 50; i++)
0EA4 7A00      3654            mov     r2,#0x00
0EA6 7B00      3655            mov     r3,#0x00
0EA8           3656   L030005?:
0EA8 C3        3657            clr     c
0EA9 EA        3658            mov     a,r2
0EAA 94C8      3659            subb    a,#0xC8
0EAC EB        3660            mov     a,r3
0EAD 6480      3661            xrl     a,#0x80
0EAF 9480      3662            subb    a,#0x80
0EB1 5000      3663            jnc     L030008?
0EB3           3664   ;        main.c:892: servo_arm++; 
0EB3 905620    3665            mov     dptr,#_servo_arm
0EB6 E0        3666            movx    a,@dptr
0EB7 2401      3667            add     a,#0x01
0EB9 F0        3668            movx    @dptr,a
0EBA           3669   ;        main.c:893: waitms(1);
0EBA 900001    3670            mov     dptr,#0x0001
0EBD C002      3671            push    ar2
0EBF C003      3672            push    ar3
0EC1 120000    3673            lcall   _waitms
0EC4 D003      3674            pop     ar3
0EC6 D002      3675            pop     ar2
0EC8           3676   ;        main.c:890: for(i = 0; i < 250 - 50; i++)
0EC8 0A        3677            inc     r2
0EC9 BA0070    3678            cjne    r2,#0x00,L030005?
0ECC 0B        3679            inc     r3
0ECD 8000      3680            sjmp    L030005?
0ECF           3681   L030008?:
0ECF           3682   ;        main.c:896: Magnet = 1; 
0ECF D295      3683            setb    _P1_5
0ED1           3684   ;        main.c:897: waitms(100);
0ED1 900064    3685            mov     dptr,#0x0064
0ED4 120000    3686            lcall   _waitms
0ED7           3687   ;        main.c:898: for(i = 0; i < 120; i++){
0ED7 7A00      3688            mov     r2,#0x00
0ED9 7B00      3689            mov     r3,#0x00
0EDB           3690   L030009?:
0EDB C3        3691            clr     c
0EDC EA        3692            mov     a,r2
0EDD 9478      3693            subb    a,#0x78
0EDF EB        3694            mov     a,r3
0EE0 6480      3695            xrl     a,#0x80
0EE2 9480      3696            subb    a,#0x80
0EE4 5000      3697            jnc     L030012?
0EE6           3698   ;        main.c:899: waitms(5);
0EE6 900005    3699            mov     dptr,#0x0005
0EE9 C002      3700            push    ar2
0EEB C003      3701            push    ar3
0EED 120000    3702            lcall   _waitms
0EF0 D003      3703            pop     ar3
0EF2 D002      3704            pop     ar2
0EF4           3705   ;        main.c:900: servo_base--;
0EF4 905660    3706            mov     dptr,#_servo_base
0EF7 E0        3707            movx    a,@dptr
0EF8 14        3708            dec     a
0EF9 905660    3709            mov     dptr,#_servo_base
0EFC F0        3710            movx    @dptr,a
0EFD           3711   ;        main.c:898: for(i = 0; i < 120; i++){
0EFD 0A        3712            inc     r2
0EFE BA00F0    3713            cjne    r2,#0x00,L030009?
0F01 0B        3714            inc     r3
0F02 8000      3715            sjmp    L030009?
0F04           3716   L030012?:
0F04           3717   ;        main.c:902: waitms(100);
0F04 900064    3718            mov     dptr,#0x0064
0F07 120000    3719            lcall   _waitms
0F0A           3720   ;        main.c:903: for(i = 0; i < 120; i++){
0F0A 7A00      3721            mov     r2,#0x00
0F0C 7B00      3722            mov     r3,#0x00
0F0E           3723   L030013?:
0F0E C3        3724            clr     c
0F0F EA        3725            mov     a,r2
0F10 9478      3726            subb    a,#0x78
0F12 EB        3727            mov     a,r3
0F13 6480      3728            xrl     a,#0x80
0F15 9480      3729            subb    a,#0x80
0F17 5000      3730            jnc     L030016?
0F19           3731   ;        main.c:904: waitms(5);
0F19 900005    3732            mov     dptr,#0x0005
0F1C C002      3733            push    ar2
0F1E C003      3734            push    ar3
0F20 120000    3735            lcall   _waitms
0F23 D003      3736            pop     ar3
0F25 D002      3737            pop     ar2
0F27           3738   ;        main.c:905: servo_base++;
0F27 905660    3739            mov     dptr,#_servo_base
0F2A E0        3740            movx    a,@dptr
0F2B 2401      3741            add     a,#0x01
0F2D F0        3742            movx    @dptr,a
0F2E           3743   ;        main.c:903: for(i = 0; i < 120; i++){
0F2E 0A        3744            inc     r2
0F2F BA0070    3745            cjne    r2,#0x00,L030013?
0F32 0B        3746            inc     r3
0F33 8000      3747            sjmp    L030013?
0F35           3748   L030016?:
0F35           3749   ;        main.c:907: waitms(100);
0F35 900064    3750            mov     dptr,#0x0064
0F38 120000    3751            lcall   _waitms
0F3B           3752   ;        main.c:908: for(i = 0; i<160; i++){
0F3B 7A00      3753            mov     r2,#0x00
0F3D 7B00      3754            mov     r3,#0x00
0F3F           3755   L030017?:
0F3F C3        3756            clr     c
0F40 EA        3757            mov     a,r2
0F41 94A0      3758            subb    a,#0xA0
0F43 EB        3759            mov     a,r3
0F44 6480      3760            xrl     a,#0x80
0F46 9480      3761            subb    a,#0x80
0F48 5000      3762            jnc     L030020?
0F4A           3763   ;        main.c:909: waitms(5);
0F4A 900005    3764            mov     dptr,#0x0005
0F4D C002      3765            push    ar2
0F4F C003      3766            push    ar3
0F51 120000    3767            lcall   _waitms
0F54 D003      3768            pop     ar3
0F56 D002      3769            pop     ar2
0F58           3770   ;        main.c:910: servo_arm--;
0F58 905620    3771            mov     dptr,#_servo_arm
0F5B E0        3772            movx    a,@dptr
0F5C 14        3773            dec     a
0F5D 905620    3774            mov     dptr,#_servo_arm
0F60 F0        3775            movx    @dptr,a
0F61           3776   ;        main.c:908: for(i = 0; i<160; i++){
0F61 0A        3777            inc     r2
0F62 BA00F0    3778            cjne    r2,#0x00,L030017?
0F65 0B        3779            inc     r3
0F66 8000      3780            sjmp    L030017?
0F68           3781   L030020?:
0F68           3782   ;        main.c:912: waitms(100);
0F68 900064    3783            mov     dptr,#0x0064
0F6B 120000    3784            lcall   _waitms
0F6E           3785   ;        main.c:913: for(i = 0; i<135+30; i++){
0F6E 7A00      3786            mov     r2,#0x00
0F70 7B00      3787            mov     r3,#0x00
0F72           3788   L030021?:
0F72 C3        3789            clr     c
0F73 EA        3790            mov     a,r2
0F74 94A5      3791            subb    a,#0xA5
0F76 EB        3792            mov     a,r3
0F77 6480      3793            xrl     a,#0x80
0F79 9480      3794            subb    a,#0x80
0F7B 5000      3795            jnc     L030024?
0F7D           3796   ;        main.c:914: waitms(5);
0F7D 900005    3797            mov     dptr,#0x0005
0F80 C002      3798            push    ar2
0F82 C003      3799            push    ar3
0F84 120000    3800            lcall   _waitms
0F87 D003      3801            pop     ar3
0F89 D002      3802            pop     ar2
0F8B           3803   ;        main.c:915: servo_base--;
0F8B 905660    3804            mov     dptr,#_servo_base
0F8E E0        3805            movx    a,@dptr
0F8F 14        3806            dec     a
0F90 905660    3807            mov     dptr,#_servo_base
0F93 F0        3808            movx    @dptr,a
0F94           3809   ;        main.c:913: for(i = 0; i<135+30; i++){
0F94 0A        3810            inc     r2
0F95 BA0070    3811            cjne    r2,#0x00,L030021?
0F98 0B        3812            inc     r3
0F99 8000      3813            sjmp    L030021?
0F9B           3814   L030024?:
0F9B           3815   ;        main.c:917: waitms(100);
0F9B 900064    3816            mov     dptr,#0x0064
0F9E 120000    3817            lcall   _waitms
0FA1           3818   ;        main.c:918: Magnet = 0;
0FA1 C295      3819            clr     _P1_5
0FA3           3820   ;        main.c:919: waitms(100);
0FA3 900064    3821            mov     dptr,#0x0064
0FA6 120000    3822            lcall   _waitms
0FA9           3823   ;        main.c:922: for (i=0; i < 90-50; i++){
0FA9 7A00      3824            mov     r2,#0x00
0FAB 7B00      3825            mov     r3,#0x00
0FAD           3826   L030025?:
0FAD C3        3827            clr     c
0FAE EA        3828            mov     a,r2
0FAF 9428      3829            subb    a,#0x28
0FB1 EB        3830            mov     a,r3
0FB2 6480      3831            xrl     a,#0x80
0FB4 9480      3832            subb    a,#0x80
0FB6 5000      3833            jnc     L030028?
0FB8           3834   ;        main.c:923: servo_arm--; 
0FB8 905620    3835            mov     dptr,#_servo_arm
0FBB E0        3836            movx    a,@dptr
0FBC 14        3837            dec     a
0FBD 905620    3838            mov     dptr,#_servo_arm
0FC0 F0        3839            movx    @dptr,a
0FC1           3840   ;        main.c:924: waitms(1);
0FC1 900001    3841            mov     dptr,#0x0001
0FC4 C002      3842            push    ar2
0FC6 C003      3843            push    ar3
0FC8 120000    3844            lcall   _waitms
0FCB D003      3845            pop     ar3
0FCD D002      3846            pop     ar2
0FCF           3847   ;        main.c:922: for (i=0; i < 90-50; i++){
0FCF 0A        3848            inc     r2
0FD0 BA00F0    3849            cjne    r2,#0x00,L030025?
0FD3 0B        3850            inc     r3
0FD4 8000      3851            sjmp    L030025?
0FD6           3852   L030028?:
0FD6           3853   ;        main.c:926: waitms(100);
0FD6 900064    3854            mov     dptr,#0x0064
0FD9 120000    3855            lcall   _waitms
0FDC           3856   ;        main.c:927: for (i=0; i < 115-30-50; i++){
0FDC 7A00      3857            mov     r2,#0x00
0FDE 7B00      3858            mov     r3,#0x00
0FE0           3859   L030029?:
0FE0 C3        3860            clr     c
0FE1 EA        3861            mov     a,r2
0FE2 9423      3862            subb    a,#0x23
0FE4 EB        3863            mov     a,r3
0FE5 6480      3864            xrl     a,#0x80
0FE7 9480      3865            subb    a,#0x80
0FE9 5000      3866            jnc     L030032?
0FEB           3867   ;        main.c:928: servo_base--; 
0FEB 905660    3868            mov     dptr,#_servo_base
0FEE E0        3869            movx    a,@dptr
0FEF 14        3870            dec     a
0FF0 905660    3871            mov     dptr,#_servo_base
0FF3 F0        3872            movx    @dptr,a
0FF4           3873   ;        main.c:929: waitms(1);
0FF4 900001    3874            mov     dptr,#0x0001
0FF7 C002      3875            push    ar2
0FF9 C003      3876            push    ar3
0FFB 120000    3877            lcall   _waitms
0FFE D003      3878            pop     ar3
1000 D002      3879            pop     ar2
1002           3880   ;        main.c:927: for (i=0; i < 115-30-50; i++){
1002 0A        3881            inc     r2
1003 BA0070    3882            cjne    r2,#0x00,L030029?
1006 0B        3883            inc     r3
1007 8000      3884            sjmp    L030029?
1009           3885   L030032?:
1009           3886   ;        main.c:931: return;
1009 22        3887            ret
100A           3888   ;------------------------------------------------------------
100A           3889   ;Allocation info for local variables in function 'check_bound'
100A           3890   ;------------------------------------------------------------
100A           3891   ;d2                        Allocated with name '_check_bound_PARM_2'
100A           3892   ;d1                        Allocated to registers r2 r3 
100A           3893   ;------------------------------------------------------------
100A           3894   ;        main.c:934: int check_bound(int d1, int d2){
100A           3895   ;        -----------------------------------------
100A           3896   ;         function check_bound
100A           3897   ;        -----------------------------------------
100A           3898   _check_bound:
100A AA82      3899            mov     r2,dpl
100C AB83      3900            mov     r3,dph
100E           3901   ;        main.c:935: if(d1>12000||d2>12000)      return 1;
100E C3        3902            clr     c
100F 74E0      3903            mov     a,#0xE0
1011 9A        3904            subb    a,r2
1012 74AE      3905            mov     a,#(0x2E ^ 0x80)
1014 8BF0      3906            mov     b,r3
1016 63F080    3907            xrl     b,#0x80
1019 95F0      3908            subb    a,b
101B 4000      3909            jc      L031001?
101D 74E0      3910            mov     a,#0xE0
101F 9560      3911            subb    a,_check_bound_PARM_2
1021 74AE      3912            mov     a,#(0x2E ^ 0x80)
1023 8561F0    3913            mov     b,(_check_bound_PARM_2 + 1)
1026 63F080    3914            xrl     b,#0x80
1029 95F0      3915            subb    a,b
102B 5000      3916            jnc     L031002?
102D           3917   L031001?:
102D 900001    3918            mov     dptr,#0x0001
1030           3919   ;        main.c:936: else return 0;
1030 22        3920            ret
1031           3921   L031002?:
1031 900000    3922            mov     dptr,#0x0000
1034 22        3923            ret
1035           3924   ;------------------------------------------------------------
1035           3925   ;Allocation info for local variables in function 'Init_all'
1035           3926   ;------------------------------------------------------------
1035           3927   ;------------------------------------------------------------
1035           3928   ;        main.c:939: void Init_all(){
1035           3929   ;        -----------------------------------------
1035           3930   ;         function Init_all
1035           3931   ;        -----------------------------------------
1035           3932   _Init_all:
1035           3933   ;        main.c:941: Set_Pin_Output(0x24);
1035 758224    3934            mov     dpl,#0x24
1038 120000    3935            lcall   _Set_Pin_Output
103B           3936   ;        main.c:942: Set_Pin_Output(0x23);
103B 758223    3937            mov     dpl,#0x23
103E 120000    3938            lcall   _Set_Pin_Output
1041           3939   ;        main.c:943: Set_Pin_Output(0x22);
1041 758222    3940            mov     dpl,#0x22
1044 120000    3941            lcall   _Set_Pin_Output
1047           3942   ;        main.c:944: Set_Pin_Output(0x21);
1047 758221    3943            mov     dpl,#0x21
104A 120000    3944            lcall   _Set_Pin_Output
104D           3945   ;        main.c:945: Set_Pin_Output(0x17);
104D 758217    3946            mov     dpl,#0x17
1050 120000    3947            lcall   _Set_Pin_Output
1053           3948   ;        main.c:946: Set_Pin_Output(0x16);
1053 758216    3949            mov     dpl,#0x16
1056 120000    3950            lcall   _Set_Pin_Output
1059           3951   ;        main.c:947: Set_Pin_Output(0x15);
1059 758215    3952            mov     dpl,#0x15
105C 120000    3953            lcall   _Set_Pin_Output
105F           3954   ;        main.c:948: Set_Pin_Output(0x10); // CS
105F 758210    3955            mov     dpl,#0x10
1062 120000    3956            lcall   _Set_Pin_Output
1065           3957   ;        main.c:950: Set_Pin_Input(0x30);
1065 758230    3958            mov     dpl,#0x30
1068 120000    3959            lcall   _Set_Pin_Input
106B           3960   ;        main.c:951: Set_Pin_Output(0x25); // CLK for Load
106B 758225    3961            mov     dpl,#0x25
106E 120000    3962            lcall   _Set_Pin_Output
1071           3963   ;        main.c:952: Set_Pin_Input(0x26);
1071 758226    3964            mov     dpl,#0x26
1074 120000    3965            lcall   _Set_Pin_Input
1077           3966   ;        main.c:954: Set_Pin_Input(0x33);   //ECHO pin
1077 758233    3967            mov     dpl,#0x33
107A 120000    3968            lcall   _Set_Pin_Input
107D           3969   ;        main.c:955: Set_Pin_Output(0x32);  // TRIGGER pin
107D 758232    3970            mov     dpl,#0x32
1080 120000    3971            lcall   _Set_Pin_Output
1083           3972   ;        main.c:957: InitPinADC(1,3);
1083 75B003    3973            mov     _InitPinADC_PARM_2,#0x03
1086 758201    3974            mov     dpl,#0x01
1089 120000    3975            lcall   _InitPinADC
108C           3976   ;        main.c:958: InitPinADC(1,4);
108C 75B004    3977            mov     _InitPinADC_PARM_2,#0x04
108F 758201    3978            mov     dpl,#0x01
1092 120000    3979            lcall   _InitPinADC
1095           3980   ;        main.c:959: InitADC();
1095 120000    3981            lcall   _InitADC
1098           3982   ;        main.c:961: TMOD&=0b_1111_0000; 
1098 5389F0    3983            anl     _TMOD,#0xF0
109B           3984   ;        main.c:962: TMOD|=0b_0000_0001; 
109B 438901    3985            orl     _TMOD,#0x01
109E           3986   ;        main.c:963: TR0=0; 
109E C28C      3987            clr     _TR0
10A0           3988   ;        main.c:965: Servo_arm=0;
10A0 C296      3989            clr     _P1_6
10A2           3990   ;        main.c:966: Servo_base=0;
10A2 C297      3991            clr     _P1_7
10A4           3992   ;        main.c:967: Magnet = 0;
10A4 C295      3993            clr     _P1_5
10A6           3994   ;        main.c:968: PD_SCK = 0;
10A6 C2A5      3995            clr     _P2_5
10A8           3996   ;        main.c:969: return;
10A8 22        3997            ret
10A9           3998   ;------------------------------------------------------------
10A9           3999   ;Allocation info for local variables in function 'Move_back_ms'
10A9           4000   ;------------------------------------------------------------
10A9           4001   ;ms                        Allocated to registers r2 r3 
10A9           4002   ;------------------------------------------------------------
10A9           4003   ;        main.c:972: void Move_back_ms(int ms){
10A9           4004   ;        -----------------------------------------
10A9           4005   ;         function Move_back_ms
10A9           4006   ;        -----------------------------------------
10A9           4007   _Move_back_ms:
10A9 AA82      4008            mov     r2,dpl
10AB AB83      4009            mov     r3,dph
10AD           4010   ;        main.c:974: L_motor_dir = 1;
10AD 9056E0    4011            mov     dptr,#_L_motor_dir
10B0 7401      4012            mov     a,#0x01
10B2 F0        4013            movx    @dptr,a
10B3           4014   ;        main.c:975: R_motor_dir = 1;
10B3 9056A0    4015            mov     dptr,#_R_motor_dir
10B6 7401      4016            mov     a,#0x01
10B8 F0        4017            movx    @dptr,a
10B9           4018   ;        main.c:977: pwm_left = 50;
10B9 905760    4019            mov     dptr,#_pwm_left
10BC 7432      4020            mov     a,#0x32
10BE F0        4021            movx    @dptr,a
10BF           4022   ;        main.c:978: pwm_right = 50;
10BF 905720    4023            mov     dptr,#_pwm_right
10C2 7432      4024            mov     a,#0x32
10C4 F0        4025            movx    @dptr,a
10C5           4026   ;        main.c:980: waitms(ms);
10C5 8A82      4027            mov     dpl,r2
10C7 8B83      4028            mov     dph,r3
10C9 120000    4029            lcall   _waitms
10CC           4030   ;        main.c:982: L_motor_dir = 0;
10CC 9056E0    4031            mov     dptr,#_L_motor_dir
10CF           4032   ;        main.c:983: R_motor_dir = 0;
10CF           4033   ;        main.c:984: pwm_left = 0;
10CF           4034   ;        main.c:985: pwm_right = 0;
10CF E4        4035            clr     a
10D0 F0        4036            movx    @dptr,a
10D1 9056A0    4037            mov     dptr,#_R_motor_dir
10D4 F0        4038            movx    @dptr,a
10D5 905760    4039            mov     dptr,#_pwm_left
10D8 F0        4040            movx    @dptr,a
10D9 905720    4041            mov     dptr,#_pwm_right
10DC F0        4042            movx    @dptr,a
10DD           4043   ;        main.c:986: return;
10DD 22        4044            ret
10DE           4045   ;------------------------------------------------------------
10DE           4046   ;Allocation info for local variables in function 'Right_angle'
10DE           4047   ;------------------------------------------------------------
10DE           4048   ;angle                     Allocated to registers r2 r3 
10DE           4049   ;------------------------------------------------------------
10DE           4050   ;        main.c:989: void Right_angle(int angle){
10DE           4051   ;        -----------------------------------------
10DE           4052   ;         function Right_angle
10DE           4053   ;        -----------------------------------------
10DE           4054   _Right_angle:
10DE AA82      4055            mov     r2,dpl
10E0 AB83      4056            mov     r3,dph
10E2           4057   ;        main.c:991: L_motor_dir = 1;
10E2 9056E0    4058            mov     dptr,#_L_motor_dir
10E5 7401      4059            mov     a,#0x01
10E7 F0        4060            movx    @dptr,a
10E8           4061   ;        main.c:992: R_motor_dir = 0;
10E8 9056A0    4062            mov     dptr,#_R_motor_dir
10EB E4        4063            clr     a
10EC F0        4064            movx    @dptr,a
10ED           4065   ;        main.c:993: pwm_left = 80;
10ED 905760    4066            mov     dptr,#_pwm_left
10F0 7450      4067            mov     a,#0x50
10F2 F0        4068            movx    @dptr,a
10F3           4069   ;        main.c:994: pwm_right = 80 * pwm_corr;
10F3 C002      4070            push    ar2
10F5 C003      4071            push    ar3
10F7 905410    4072            mov     dptr,#_pwm_corr
10FA E0        4073            movx    a,@dptr
10FB C0E0      4074            push    acc
10FD A3        4075            inc     dptr
10FE E0        4076            movx    a,@dptr
10FF C0E0      4077            push    acc
1101 A3        4078            inc     dptr
1102 E0        4079            movx    a,@dptr
1103 C0E0      4080            push    acc
1105 A3        4081            inc     dptr
1106 E0        4082            movx    a,@dptr
1107 C0E0      4083            push    acc
1109 900000    4084            mov     dptr,#0x0000
110C 75F0A0    4085            mov     b,#0xA0
110F 7442      4086            mov     a,#0x42
1111 120000    4087            lcall   ___fsmul
1114 AC82      4088            mov     r4,dpl
1116 AD83      4089            mov     r5,dph
1118 AEF0      4090            mov     r6,b
111A FF        4091            mov     r7,a
111B E581      4092            mov     a,sp
111D 24FC      4093            add     a,#0xfc
111F F581      4094            mov     sp,a
1121 8C82      4095            mov     dpl,r4
1123 8D83      4096            mov     dph,r5
1125 8EF0      4097            mov     b,r6
1127 EF        4098            mov     a,r7
1128 120000    4099            lcall   ___fs2uchar
112B E582      4100            mov     a,dpl
112D D003      4101            pop     ar3
112F D002      4102            pop     ar2
1131 905720    4103            mov     dptr,#_pwm_right
1134 F0        4104            movx    @dptr,a
1135           4105   ;        main.c:996: waitms(angle);
1135 8A82      4106            mov     dpl,r2
1137 8B83      4107            mov     dph,r3
1139 120000    4108            lcall   _waitms
113C           4109   ;        main.c:998: L_motor_dir = 0;
113C 9056E0    4110            mov     dptr,#_L_motor_dir
113F           4111   ;        main.c:999: R_motor_dir = 0;
113F           4112   ;        main.c:1000: pwm_left = 0;
113F           4113   ;        main.c:1001: pwm_right = 0;
113F E4        4114            clr     a
1140 F0        4115            movx    @dptr,a
1141 9056A0    4116            mov     dptr,#_R_motor_dir
1144 F0        4117            movx    @dptr,a
1145 905760    4118            mov     dptr,#_pwm_left
1148 F0        4119            movx    @dptr,a
1149 905720    4120            mov     dptr,#_pwm_right
114C F0        4121            movx    @dptr,a
114D           4122   ;        main.c:1002: return;
114D 22        4123            ret
114E           4124   ;------------------------------------------------------------
114E           4125   ;Allocation info for local variables in function 'Move_forward'
114E           4126   ;------------------------------------------------------------
114E           4127   ;------------------------------------------------------------
114E           4128   ;        main.c:1005: void Move_forward(){
114E           4129   ;        -----------------------------------------
114E           4130   ;         function Move_forward
114E           4131   ;        -----------------------------------------
114E           4132   _Move_forward:
114E           4133   ;        main.c:1007: L_motor_dir = 0;
114E 9056E0    4134            mov     dptr,#_L_motor_dir
1151           4135   ;        main.c:1008: R_motor_dir = 0;
1151 E4        4136            clr     a
1152 F0        4137            movx    @dptr,a
1153 9056A0    4138            mov     dptr,#_R_motor_dir
1156 F0        4139            movx    @dptr,a
1157           4140   ;        main.c:1009: pwm_left = 60;
1157 905760    4141            mov     dptr,#_pwm_left
115A 743C      4142            mov     a,#0x3C
115C F0        4143            movx    @dptr,a
115D           4144   ;        main.c:1010: pwm_right = 60 * pwm_corr;
115D 905410    4145            mov     dptr,#_pwm_corr
1160 E0        4146            movx    a,@dptr
1161 C0E0      4147            push    acc
1163 A3        4148            inc     dptr
1164 E0        4149            movx    a,@dptr
1165 C0E0      4150            push    acc
1167 A3        4151            inc     dptr
1168 E0        4152            movx    a,@dptr
1169 C0E0      4153            push    acc
116B A3        4154            inc     dptr
116C E0        4155            movx    a,@dptr
116D C0E0      4156            push    acc
116F 900000    4157            mov     dptr,#0x0000
1172 75F070    4158            mov     b,#0x70
1175 7442      4159            mov     a,#0x42
1177 120000    4160            lcall   ___fsmul
117A AA82      4161            mov     r2,dpl
117C AB83      4162            mov     r3,dph
117E ACF0      4163            mov     r4,b
1180 FD        4164            mov     r5,a
1181 E581      4165            mov     a,sp
1183 24FC      4166            add     a,#0xfc
1185 F581      4167            mov     sp,a
1187 8A82      4168            mov     dpl,r2
1189 8B83      4169            mov     dph,r3
118B 8CF0      4170            mov     b,r4
118D ED        4171            mov     a,r5
118E 120000    4172            lcall   ___fs2uchar
1191 E582      4173            mov     a,dpl
1193 905720    4174            mov     dptr,#_pwm_right
1196 F0        4175            movx    @dptr,a
1197           4176   ;        main.c:1011: return;
1197 22        4177            ret
1198           4178   ;------------------------------------------------------------
1198           4179   ;Allocation info for local variables in function 'simple_rand'
1198           4180   ;------------------------------------------------------------
1198           4181   ;------------------------------------------------------------
1198           4182   ;        main.c:1014: unsigned int simple_rand() {
1198           4183   ;        -----------------------------------------
1198           4184   ;         function simple_rand
1198           4185   ;        -----------------------------------------
1198           4186   _simple_rand:
1198           4187   ;        main.c:1015: seed = (seed * 25173 + 13849) & 0xFFFF;  
1198 905450    4188            mov     dptr,#_seed
119B E0        4189            movx    a,@dptr
119C F500      4190            mov     __mulint_PARM_2,a
119E A3        4191            inc     dptr
119F E0        4192            movx    a,@dptr
11A0 F501      4193            mov     (__mulint_PARM_2 + 1),a
11A2 906255    4194            mov     dptr,#0x6255
11A5 120000    4195            lcall   __mulint
11A8 E582      4196            mov     a,dpl
11AA 8583F0    4197            mov     b,dph
11AD 905450    4198            mov     dptr,#_seed
11B0 2419      4199            add     a,#0x19
11B2 F0        4200            movx    @dptr,a
11B3 7436      4201            mov     a,#0x36
11B5 35F0      4202            addc    a,b
11B7 A3        4203            inc     dptr
11B8 F0        4204            movx    @dptr,a
11B9           4205   ;        main.c:1016: return seed;     
11B9 905450    4206            mov     dptr,#_seed
11BC E0        4207            movx    a,@dptr
11BD FA        4208            mov     r2,a
11BE A3        4209            inc     dptr
11BF E0        4210            movx    a,@dptr
11C0 8A82      4211            mov     dpl,r2
11C2 F583      4212            mov     dph,a
11C4 22        4213            ret
11C5           4214   ;------------------------------------------------------------
11C5           4215   ;Allocation info for local variables in function 'get_random_90_250'
11C5           4216   ;------------------------------------------------------------
11C5           4217   ;------------------------------------------------------------
11C5           4218   ;        main.c:1019: unsigned int get_random_90_250() {
11C5           4219   ;        -----------------------------------------
11C5           4220   ;         function get_random_90_250
11C5           4221   ;        -----------------------------------------
11C5           4222   _get_random_90_250:
11C5           4223   ;        main.c:1020: return (simple_rand() % (250 - 85 + 1)) + 85;
11C5 120000    4224            lcall   _simple_rand
11C8 7500A6    4225            mov     __moduint_PARM_2,#0xA6
11CB E4        4226            clr     a
11CC F501      4227            mov     (__moduint_PARM_2 + 1),a
11CE 120000    4228            lcall   __moduint
11D1 E582      4229            mov     a,dpl
11D3 8583F0    4230            mov     b,dph
11D6 2455      4231            add     a,#0x55
11D8 F582      4232            mov     dpl,a
11DA E4        4233            clr     a
11DB 35F0      4234            addc    a,b
11DD F583      4235            mov     dph,a
11DF 22        4236            ret
11E0           4237   ;------------------------------------------------------------
11E0           4238   ;Allocation info for local variables in function 'Read_angle'
11E0           4239   ;------------------------------------------------------------
11E0           4240   ;sloc0                     Allocated with name '_Read_angle_sloc0_1_0'
11E0           4241   ;i                         Allocated with name '_Read_angle_i_1_210'
11E0           4242   ;mag_x                     Allocated with name '_Read_angle_mag_x_1_210'
11E0           4243   ;mag_y                     Allocated with name '_Read_angle_mag_y_1_210'
11E0           4244   ;sum_x                     Allocated with name '_Read_angle_sum_x_1_210'
11E0           4245   ;sum_y                     Allocated with name '_Read_angle_sum_y_1_210'
11E0           4246   ;angle                     Allocated with name '_Read_angle_angle_1_210'
11E0           4247   ;------------------------------------------------------------
11E0           4248   ;        main.c:1023: float Read_angle(void)
11E0           4249   ;        -----------------------------------------
11E0           4250   ;         function Read_angle
11E0           4251   ;        -----------------------------------------
11E0           4252   _Read_angle:
11E0           4253   ;        main.c:1030: sum_x = 0.0; sum_y = 0.0;
11E0 90D6A8    4254            mov     dptr,#_Read_angle_sum_x_1_210
11E3 E4        4255            clr     a
11E4 F0        4256            movx    @dptr,a
11E5 A3        4257            inc     dptr
11E6 F0        4258            movx    @dptr,a
11E7 A3        4259            inc     dptr
11E8 F0        4260            movx    @dptr,a
11E9 A3        4261            inc     dptr
11EA F0        4262            movx    @dptr,a
11EB 90D6F8    4263            mov     dptr,#_Read_angle_sum_y_1_210
11EE F0        4264            movx    @dptr,a
11EF A3        4265            inc     dptr
11F0 E4        4266            clr     a
11F1 F0        4267            movx    @dptr,a
11F2 A3        4268            inc     dptr
11F3 F0        4269            movx    @dptr,a
11F4 A3        4270            inc     dptr
11F5 F0        4271            movx    @dptr,a
11F6           4272   ;        main.c:1033: for (i = 0; i < 10; i++){
11F6 7A00      4273            mov     r2,#0x00
11F8           4274   L038005?:
11F8 BA0A40    4275            cjne    r2,#0x0A,L038016?
11FB           4276   L038016?:
11FB 4000      4277            jc      L038017?
11FD 020000    4278            ljmp    L038008?
1200           4279   L038017?:
1200           4280   ;        main.c:1034: BMM150_Read_Data(&mag_x, &mag_y);
1200 750058    4281            mov     _BMM150_Read_Data_PARM_2,#_Read_angle_mag_y_1_210
1203 7501D6    4282            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_Read_angle_mag_y_1_210 >> 8)
1206 750200    4283            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
1209 90D608    4284            mov     dptr,#_Read_angle_mag_x_1_210
120C 75F000    4285            mov     b,#0x00
120F C002      4286            push    ar2
1211 120000    4287            lcall   _BMM150_Read_Data
1214           4288   ;        main.c:1035: sum_x += (float)mag_x; 
1214 90D608    4289            mov     dptr,#_Read_angle_mag_x_1_210
1217 E0        4290            movx    a,@dptr
1218 FB        4291            mov     r3,a
1219 A3        4292            inc     dptr
121A E0        4293            movx    a,@dptr
121B FC        4294            mov     r4,a
121C 8B82      4295            mov     dpl,r3
121E 8C83      4296            mov     dph,r4
1220 120000    4297            lcall   ___sint2fs
1223 8582F0    4298            mov     _Read_angle_sloc0_1_0,dpl
1226 8583F1    4299            mov     (_Read_angle_sloc0_1_0 + 1),dph
1229 85F0F2    4300            mov     (_Read_angle_sloc0_1_0 + 2),b
122C F5F3      4301            mov     (_Read_angle_sloc0_1_0 + 3),a
122E 90D6A8    4302            mov     dptr,#_Read_angle_sum_x_1_210
1231 E0        4303            movx    a,@dptr
1232 FF        4304            mov     r7,a
1233 A3        4305            inc     dptr
1234 E0        4306            movx    a,@dptr
1235 F8        4307            mov     r0,a
1236 A3        4308            inc     dptr
1237 E0        4309            movx    a,@dptr
1238 F9        4310            mov     r1,a
1239 A3        4311            inc     dptr
123A E0        4312            movx    a,@dptr
123B FB        4313            mov     r3,a
123C C0F0      4314            push    _Read_angle_sloc0_1_0
123E C0F1      4315            push    (_Read_angle_sloc0_1_0 + 1)
1240 C0F2      4316            push    (_Read_angle_sloc0_1_0 + 2)
1242 C0F3      4317            push    (_Read_angle_sloc0_1_0 + 3)
1244 8F82      4318            mov     dpl,r7
1246 8883      4319            mov     dph,r0
1248 89F0      4320            mov     b,r1
124A EB        4321            mov     a,r3
124B 120000    4322            lcall   ___fsadd
124E AB82      4323            mov     r3,dpl
1250 AC83      4324            mov     r4,dph
1252 ADF0      4325            mov     r5,b
1254 FE        4326            mov     r6,a
1255 E581      4327            mov     a,sp
1257 24FC      4328            add     a,#0xfc
1259 F581      4329            mov     sp,a
125B 90D6A8    4330            mov     dptr,#_Read_angle_sum_x_1_210
125E EB        4331            mov     a,r3
125F F0        4332            movx    @dptr,a
1260 A3        4333            inc     dptr
1261 EC        4334            mov     a,r4
1262 F0        4335            movx    @dptr,a
1263 A3        4336            inc     dptr
1264 ED        4337            mov     a,r5
1265 F0        4338            movx    @dptr,a
1266 A3        4339            inc     dptr
1267 EE        4340            mov     a,r6
1268 F0        4341            movx    @dptr,a
1269           4342   ;        main.c:1036: sum_y += (float)mag_y; 
1269 90D658    4343            mov     dptr,#_Read_angle_mag_y_1_210
126C E0        4344            movx    a,@dptr
126D FB        4345            mov     r3,a
126E A3        4346            inc     dptr
126F E0        4347            movx    a,@dptr
1270 FC        4348            mov     r4,a
1271 8B82      4349            mov     dpl,r3
1273 8C83      4350            mov     dph,r4
1275 120000    4351            lcall   ___sint2fs
1278 8582F0    4352            mov     _Read_angle_sloc0_1_0,dpl
127B 8583F1    4353            mov     (_Read_angle_sloc0_1_0 + 1),dph
127E 85F0F2    4354            mov     (_Read_angle_sloc0_1_0 + 2),b
1281 F5F3      4355            mov     (_Read_angle_sloc0_1_0 + 3),a
1283 90D6F8    4356            mov     dptr,#_Read_angle_sum_y_1_210
1286 E0        4357            movx    a,@dptr
1287 FF        4358            mov     r7,a
1288 A3        4359            inc     dptr
1289 E0        4360            movx    a,@dptr
128A F8        4361            mov     r0,a
128B A3        4362            inc     dptr
128C E0        4363            movx    a,@dptr
128D F9        4364            mov     r1,a
128E A3        4365            inc     dptr
128F E0        4366            movx    a,@dptr
1290 FB        4367            mov     r3,a
1291 C0F0      4368            push    _Read_angle_sloc0_1_0
1293 C0F1      4369            push    (_Read_angle_sloc0_1_0 + 1)
1295 C0F2      4370            push    (_Read_angle_sloc0_1_0 + 2)
1297 C0F3      4371            push    (_Read_angle_sloc0_1_0 + 3)
1299 8F82      4372            mov     dpl,r7
129B 8883      4373            mov     dph,r0
129D 89F0      4374            mov     b,r1
129F EB        4375            mov     a,r3
12A0 120000    4376            lcall   ___fsadd
12A3 AB82      4377            mov     r3,dpl
12A5 AC83      4378            mov     r4,dph
12A7 ADF0      4379            mov     r5,b
12A9 FE        4380            mov     r6,a
12AA E581      4381            mov     a,sp
12AC 24FC      4382            add     a,#0xfc
12AE F581      4383            mov     sp,a
12B0 90D6F8    4384            mov     dptr,#_Read_angle_sum_y_1_210
12B3 EB        4385            mov     a,r3
12B4 F0        4386            movx    @dptr,a
12B5 A3        4387            inc     dptr
12B6 EC        4388            mov     a,r4
12B7 F0        4389            movx    @dptr,a
12B8 A3        4390            inc     dptr
12B9 ED        4391            mov     a,r5
12BA F0        4392            movx    @dptr,a
12BB A3        4393            inc     dptr
12BC EE        4394            mov     a,r6
12BD F0        4395            movx    @dptr,a
12BE           4396   ;        main.c:1037: Timer3us(1);
12BE 758201    4397            mov     dpl,#0x01
12C1 120000    4398            lcall   _Timer3us
12C4 D002      4399            pop     ar2
12C6           4400   ;        main.c:1033: for (i = 0; i < 10; i++){
12C6 0A        4401            inc     r2
12C7 020000    4402            ljmp    L038005?
12CA           4403   L038008?:
12CA           4404   ;        main.c:1039: angle = atan2f(sum_y, sum_x) * 180.0 / M_PI;
12CA 90D6F8    4405            mov     dptr,#_Read_angle_sum_y_1_210
12CD E0        4406            movx    a,@dptr
12CE FA        4407            mov     r2,a
12CF A3        4408            inc     dptr
12D0 E0        4409            movx    a,@dptr
12D1 FB        4410            mov     r3,a
12D2 A3        4411            inc     dptr
12D3 E0        4412            movx    a,@dptr
12D4 FC        4413            mov     r4,a
12D5 A3        4414            inc     dptr
12D6 E0        4415            movx    a,@dptr
12D7 FD        4416            mov     r5,a
12D8 90D6A8    4417            mov     dptr,#_Read_angle_sum_x_1_210
12DB E0        4418            movx    a,@dptr
12DC F500      4419            mov     _atan2f_PARM_2,a
12DE A3        4420            inc     dptr
12DF E0        4421            movx    a,@dptr
12E0 F501      4422            mov     (_atan2f_PARM_2 + 1),a
12E2 A3        4423            inc     dptr
12E3 E0        4424            movx    a,@dptr
12E4 F502      4425            mov     (_atan2f_PARM_2 + 2),a
12E6 A3        4426            inc     dptr
12E7 E0        4427            movx    a,@dptr
12E8 F503      4428            mov     (_atan2f_PARM_2 + 3),a
12EA 8A82      4429            mov     dpl,r2
12EC 8B83      4430            mov     dph,r3
12EE 8CF0      4431            mov     b,r4
12F0 ED        4432            mov     a,r5
12F1 120000    4433            lcall   _atan2f
12F4 AA82      4434            mov     r2,dpl
12F6 AB83      4435            mov     r3,dph
12F8 ACF0      4436            mov     r4,b
12FA FD        4437            mov     r5,a
12FB C002      4438            push    ar2
12FD C003      4439            push    ar3
12FF C004      4440            push    ar4
1301 C005      4441            push    ar5
1303 900000    4442            mov     dptr,#0x0000
1306 75F034    4443            mov     b,#0x34
1309 7443      4444            mov     a,#0x43
130B 120000    4445            lcall   ___fsmul
130E AA82      4446            mov     r2,dpl
1310 AB83      4447            mov     r3,dph
1312 ACF0      4448            mov     r4,b
1314 FD        4449            mov     r5,a
1315 E581      4450            mov     a,sp
1317 24FC      4451            add     a,#0xfc
1319 F581      4452            mov     sp,a
131B 74DB      4453            mov     a,#0xDB
131D C0E0      4454            push    acc
131F 740F      4455            mov     a,#0x0F
1321 C0E0      4456            push    acc
1323 7449      4457            mov     a,#0x49
1325 C0E0      4458            push    acc
1327 7440      4459            mov     a,#0x40
1329 C0E0      4460            push    acc
132B 8A82      4461            mov     dpl,r2
132D 8B83      4462            mov     dph,r3
132F 8CF0      4463            mov     b,r4
1331 ED        4464            mov     a,r5
1332 120000    4465            lcall   ___fsdiv
1335 AA82      4466            mov     r2,dpl
1337 AB83      4467            mov     r3,dph
1339 ACF0      4468            mov     r4,b
133B FD        4469            mov     r5,a
133C E581      4470            mov     a,sp
133E 24FC      4471            add     a,#0xfc
1340 F581      4472            mov     sp,a
1342 90D748    4473            mov     dptr,#_Read_angle_angle_1_210
1345 EA        4474            mov     a,r2
1346 F0        4475            movx    @dptr,a
1347 A3        4476            inc     dptr
1348 EB        4477            mov     a,r3
1349 F0        4478            movx    @dptr,a
134A A3        4479            inc     dptr
134B EC        4480            mov     a,r4
134C F0        4481            movx    @dptr,a
134D A3        4482            inc     dptr
134E ED        4483            mov     a,r5
134F F0        4484            movx    @dptr,a
1350           4485   ;        main.c:1040: if (angle < 0.0) angle += 360.0; 
1350 C002      4486            push    ar2
1352 C003      4487            push    ar3
1354 C004      4488            push    ar4
1356 C005      4489            push    ar5
1358 E4        4490            clr     a
1359 C0E0      4491            push    acc
135B C0E0      4492            push    acc
135D C0E0      4493            push    acc
135F C0E0      4494            push    acc
1361 8A82      4495            mov     dpl,r2
1363 8B83      4496            mov     dph,r3
1365 8CF0      4497            mov     b,r4
1367 ED        4498            mov     a,r5
1368 120000    4499            lcall   ___fslt
136B AE82      4500            mov     r6,dpl
136D E581      4501            mov     a,sp
136F 24FC      4502            add     a,#0xfc
1371 F581      4503            mov     sp,a
1373 D005      4504            pop     ar5
1375 D004      4505            pop     ar4
1377 D003      4506            pop     ar3
1379 D002      4507            pop     ar2
137B EE        4508            mov     a,r6
137C 6000      4509            jz      L038002?
137E E4        4510            clr     a
137F C0E0      4511            push    acc
1381 C0E0      4512            push    acc
1383 74B4      4513            mov     a,#0xB4
1385 C0E0      4514            push    acc
1387 7443      4515            mov     a,#0x43
1389 C0E0      4516            push    acc
138B 8A82      4517            mov     dpl,r2
138D 8B83      4518            mov     dph,r3
138F 8CF0      4519            mov     b,r4
1391 ED        4520            mov     a,r5
1392 120000    4521            lcall   ___fsadd
1395 AA82      4522            mov     r2,dpl
1397 AB83      4523            mov     r3,dph
1399 ACF0      4524            mov     r4,b
139B FD        4525            mov     r5,a
139C E581      4526            mov     a,sp
139E 24FC      4527            add     a,#0xfc
13A0 F581      4528            mov     sp,a
13A2 90D748    4529            mov     dptr,#_Read_angle_angle_1_210
13A5 EA        4530            mov     a,r2
13A6 F0        4531            movx    @dptr,a
13A7 A3        4532            inc     dptr
13A8 EB        4533            mov     a,r3
13A9 F0        4534            movx    @dptr,a
13AA A3        4535            inc     dptr
13AB EC        4536            mov     a,r4
13AC F0        4537            movx    @dptr,a
13AD A3        4538            inc     dptr
13AE ED        4539            mov     a,r5
13AF F0        4540            movx    @dptr,a
13B0           4541   L038002?:
13B0           4542   ;        main.c:1041: if (angle > 360.0) angle -= 360.0; 
13B0 90D748    4543            mov     dptr,#_Read_angle_angle_1_210
13B3 E0        4544            movx    a,@dptr
13B4 FA        4545            mov     r2,a
13B5 A3        4546            inc     dptr
13B6 E0        4547            movx    a,@dptr
13B7 FB        4548            mov     r3,a
13B8 A3        4549            inc     dptr
13B9 E0        4550            movx    a,@dptr
13BA FC        4551            mov     r4,a
13BB A3        4552            inc     dptr
13BC E0        4553            movx    a,@dptr
13BD FD        4554            mov     r5,a
13BE C002      4555            push    ar2
13C0 C003      4556            push    ar3
13C2 C004      4557            push    ar4
13C4 C005      4558            push    ar5
13C6 E4        4559            clr     a
13C7 C0E0      4560            push    acc
13C9 C0E0      4561            push    acc
13CB 74B4      4562            mov     a,#0xB4
13CD C0E0      4563            push    acc
13CF 7443      4564            mov     a,#0x43
13D1 C0E0      4565            push    acc
13D3 8A82      4566            mov     dpl,r2
13D5 8B83      4567            mov     dph,r3
13D7 8CF0      4568            mov     b,r4
13D9 ED        4569            mov     a,r5
13DA 120000    4570            lcall   ___fsgt
13DD AE82      4571            mov     r6,dpl
13DF E581      4572            mov     a,sp
13E1 24FC      4573            add     a,#0xfc
13E3 F581      4574            mov     sp,a
13E5 D005      4575            pop     ar5
13E7 D004      4576            pop     ar4
13E9 D003      4577            pop     ar3
13EB D002      4578            pop     ar2
13ED EE        4579            mov     a,r6
13EE 6000      4580            jz      L038004?
13F0 E4        4581            clr     a
13F1 C0E0      4582            push    acc
13F3 C0E0      4583            push    acc
13F5 74B4      4584            mov     a,#0xB4
13F7 C0E0      4585            push    acc
13F9 7443      4586            mov     a,#0x43
13FB C0E0      4587            push    acc
13FD 8A82      4588            mov     dpl,r2
13FF 8B83      4589            mov     dph,r3
1401 8CF0      4590            mov     b,r4
1403 ED        4591            mov     a,r5
1404 120000    4592            lcall   ___fssub
1407 AA82      4593            mov     r2,dpl
1409 AB83      4594            mov     r3,dph
140B ACF0      4595            mov     r4,b
140D FD        4596            mov     r5,a
140E E581      4597            mov     a,sp
1410 24FC      4598            add     a,#0xfc
1412 F581      4599            mov     sp,a
1414 90D748    4600            mov     dptr,#_Read_angle_angle_1_210
1417 EA        4601            mov     a,r2
1418 F0        4602            movx    @dptr,a
1419 A3        4603            inc     dptr
141A EB        4604            mov     a,r3
141B F0        4605            movx    @dptr,a
141C A3        4606            inc     dptr
141D EC        4607            mov     a,r4
141E F0        4608            movx    @dptr,a
141F A3        4609            inc     dptr
1420 ED        4610            mov     a,r5
1421 F0        4611            movx    @dptr,a
1422           4612   L038004?:
1422           4613   ;        main.c:1042: return angle; 
1422 90D748    4614            mov     dptr,#_Read_angle_angle_1_210
1425 E0        4615            movx    a,@dptr
1426 FA        4616            mov     r2,a
1427 A3        4617            inc     dptr
1428 E0        4618            movx    a,@dptr
1429 FB        4619            mov     r3,a
142A A3        4620            inc     dptr
142B E0        4621            movx    a,@dptr
142C FC        4622            mov     r4,a
142D A3        4623            inc     dptr
142E E0        4624            movx    a,@dptr
142F 8A82      4625            mov     dpl,r2
1431 8B83      4626            mov     dph,r3
1433 8CF0      4627            mov     b,r4
1435 22        4628            ret
1436           4629   ;------------------------------------------------------------
1436           4630   ;Allocation info for local variables in function 'Auto_mode_slave'
1436           4631   ;------------------------------------------------------------
1436           4632   ;sloc0                     Allocated with name '_Auto_mode_slave_sloc0_1_0'
1436           4633   ;count                     Allocated with name '_Auto_mode_slave_count_1_212'
1436           4634   ;command                   Allocated with name '_Auto_mode_slave_command_1_212'
1436           4635   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_212'
1436           4636   ;bound                     Allocated with name '_Auto_mode_slave_bound_1_212'
1436           4637   ;c                         Allocated with name '_Auto_mode_slave_c_1_212'
1436           4638   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_212'
1436           4639   ;angle                     Allocated with name '_Auto_mode_slave_angle_1_212'
1436           4640   ;------------------------------------------------------------
1436           4641   ;        main.c:1045: void Auto_mode_slave(){
1436           4642   ;        -----------------------------------------
1436           4643   ;         function Auto_mode_slave
1436           4644   ;        -----------------------------------------
1436           4645   _Auto_mode_slave:
1436           4646   ;        main.c:1048: xdata int state_res = 1;
1436 90D7F8    4647            mov     dptr,#_Auto_mode_slave_state_res_1_212
1439 7401      4648            mov     a,#0x01
143B F0        4649            movx    @dptr,a
143C E4        4650            clr     a
143D A3        4651            inc     dptr
143E F0        4652            movx    @dptr,a
143F           4653   ;        main.c:1054: curr_angle = Read_angle();
143F 120000    4654            lcall   _Read_angle
1442 AA82      4655            mov     r2,dpl
1444 AB83      4656            mov     r3,dph
1446 ACF0      4657            mov     r4,b
1448 FD        4658            mov     r5,a
1449 9053D0    4659            mov     dptr,#_curr_angle
144C EA        4660            mov     a,r2
144D F0        4661            movx    @dptr,a
144E A3        4662            inc     dptr
144F EB        4663            mov     a,r3
1450 F0        4664            movx    @dptr,a
1451 A3        4665            inc     dptr
1452 EC        4666            mov     a,r4
1453 F0        4667            movx    @dptr,a
1454 A3        4668            inc     dptr
1455 ED        4669            mov     a,r5
1456 F0        4670            movx    @dptr,a
1457           4671   ;        main.c:1056: while(count < 20 && state_res){
1457 E4        4672            clr     a
1458 F540      4673            mov     _Auto_mode_slave_sloc0_1_0,a
145A F541      4674            mov     (_Auto_mode_slave_sloc0_1_0 + 1),a
145C           4675   L039018?:
145C C3        4676            clr     c
145D E540      4677            mov     a,_Auto_mode_slave_sloc0_1_0
145F 9414      4678            subb    a,#0x14
1461 E541      4679            mov     a,(_Auto_mode_slave_sloc0_1_0 + 1)
1463 6480      4680            xrl     a,#0x80
1465 9480      4681            subb    a,#0x80
1467 4000      4682            jc      L039034?
1469 22        4683            ret
146A           4684   L039034?:
146A 90D7F8    4685            mov     dptr,#_Auto_mode_slave_state_res_1_212
146D E0        4686            movx    a,@dptr
146E FC        4687            mov     r4,a
146F A3        4688            inc     dptr
1470 E0        4689            movx    a,@dptr
1471 FD        4690            mov     r5,a
1472 4C        4691            orl     a,r4
1473 7000      4692            jnz     L039035?
1475 22        4693            ret
1476           4694   L039035?:
1476           4695   ;        main.c:1058: if(RXU1()){
1476 C004      4696            push    ar4
1478 C005      4697            push    ar5
147A 120000    4698            lcall   _RXU1
147D D005      4699            pop     ar5
147F D004      4700            pop     ar4
1481 4000      4701            jc      L039036?
1483 020000    4702            ljmp    L039012?
1486           4703   L039036?:
1486           4704   ;        main.c:1059: c=getchar1();      
1486 C004      4705            push    ar4
1488 C005      4706            push    ar5
148A 120000    4707            lcall   _getchar1
148D AE82      4708            mov     r6,dpl
148F D005      4709            pop     ar5
1491 D004      4710            pop     ar4
1493           4711   ;        main.c:1060: if(c=='!'){
1493 BE21C0    4712            cjne    r6,#0x21,L039037?
1496 8000      4713            sjmp    L039038?
1498           4714   L039037?:
1498 020000    4715            ljmp    L039009?
149B           4716   L039038?:
149B           4717   ;        main.c:1061: getstr1(buff, sizeof(buff)-1);
149B 75B013    4718            mov     _getstr1_PARM_2,#0x13
149E 905C20    4719            mov     dptr,#_buff
14A1 75F040    4720            mov     b,#0x40
14A4 120000    4721            lcall   _getstr1
14A7           4722   ;        main.c:1062: if(strlen(buff)==11){
14A7 905C20    4723            mov     dptr,#_buff
14AA 75F040    4724            mov     b,#0x40
14AD 120000    4725            lcall   _strlen
14B0 AF82      4726            mov     r7,dpl
14B2 AA83      4727            mov     r2,dph
14B4 BF0BC0    4728            cjne    r7,#0x0B,L039039?
14B7 BA00C0    4729            cjne    r2,#0x00,L039039?
14BA 8000      4730            sjmp    L039040?
14BC           4731   L039039?:
14BC 020000    4732            ljmp    L039012?
14BF           4733   L039040?:
14BF           4734   ;        main.c:1063: printf("master_messgae_auto_mode: %s\r\n", buff);
14BF 7420      4735            mov     a,#_buff
14C1 C0E0      4736            push    acc
14C3 745C      4737            mov     a,#(_buff >> 8)
14C5 C0E0      4738            push    acc
14C7 7440      4739            mov     a,#0x40
14C9 C0E0      4740            push    acc
14CB 7440      4741            mov     a,#__str_5
14CD C0E0      4742            push    acc
14CF 7419      4743            mov     a,#(__str_5 >> 8)
14D1 C0E0      4744            push    acc
14D3 7480      4745            mov     a,#0x80
14D5 C0E0      4746            push    acc
14D7 120000    4747            lcall   _printf
14DA E581      4748            mov     a,sp
14DC 24FA      4749            add     a,#0xfa
14DE F581      4750            mov     sp,a
14E0           4751   ;        main.c:1064: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
14E0 7498      4752            mov     a,#_Auto_mode_slave_command_1_212
14E2 C0E0      4753            push    acc
14E4 74D7      4754            mov     a,#(_Auto_mode_slave_command_1_212 >> 8)
14E6 C0E0      4755            push    acc
14E8 E4        4756            clr     a
14E9 C0E0      4757            push    acc
14EB 7448      4758            mov     a,#_Auto_mode_slave_dummy_1_212
14ED C0E0      4759            push    acc
14EF 74D8      4760            mov     a,#(_Auto_mode_slave_dummy_1_212 >> 8)
14F1 C0E0      4761            push    acc
14F3 E4        4762            clr     a
14F4 C0E0      4763            push    acc
14F6 7448      4764            mov     a,#_Auto_mode_slave_dummy_1_212
14F8 C0E0      4765            push    acc
14FA 74D8      4766            mov     a,#(_Auto_mode_slave_dummy_1_212 >> 8)
14FC C0E0      4767            push    acc
14FE E4        4768            clr     a
14FF C0E0      4769            push    acc
1501 7448      4770            mov     a,#_Auto_mode_slave_dummy_1_212
1503 C0E0      4771            push    acc
1505 74D8      4772            mov     a,#(_Auto_mode_slave_dummy_1_212 >> 8)
1507 C0E0      4773            push    acc
1509 E4        4774            clr     a
150A C0E0      4775            push    acc
150C 7480      4776            mov     a,#__str_6
150E C0E0      4777            push    acc
1510 7419      4778            mov     a,#(__str_6 >> 8)
1512 C0E0      4779            push    acc
1514 7480      4780            mov     a,#0x80
1516 C0E0      4781            push    acc
1518 7420      4782            mov     a,#_buff
151A C0E0      4783            push    acc
151C 745C      4784            mov     a,#(_buff >> 8)
151E C0E0      4785            push    acc
1520 7440      4786            mov     a,#0x40
1522 C0E0      4787            push    acc
1524 120000    4788            lcall   _sscanf
1527 E581      4789            mov     a,sp
1529 24EE      4790            add     a,#0xee
152B F581      4791            mov     sp,a
152D           4792   ;        main.c:1065: if(command) state_res = 1;
152D 90D798    4793            mov     dptr,#_Auto_mode_slave_command_1_212
1530 E0        4794            movx    a,@dptr
1531 FF        4795            mov     r7,a
1532 A3        4796            inc     dptr
1533 E0        4797            movx    a,@dptr
1534 FA        4798            mov     r2,a
1535 4F        4799            orl     a,r7
1536 6000      4800            jz      L039002?
1538 90D7F8    4801            mov     dptr,#_Auto_mode_slave_state_res_1_212
153B 7401      4802            mov     a,#0x01
153D F0        4803            movx    @dptr,a
153E E4        4804            clr     a
153F A3        4805            inc     dptr
1540 F0        4806            movx    @dptr,a
1541 020000    4807            ljmp    L039012?
1544           4808   L039002?:
1544           4809   ;        main.c:1066: else state_res = 0;
1544 90D7F8    4810            mov     dptr,#_Auto_mode_slave_state_res_1_212
1547 E4        4811            clr     a
1548 F0        4812            movx    @dptr,a
1549 A3        4813            inc     dptr
154A F0        4814            movx    @dptr,a
154B 8000      4815            sjmp    L039012?
154D           4816   L039009?:
154D           4817   ;        main.c:1072: else if(c=='@'){
154D BE4080    4818            cjne    r6,#0x40,L039012?
1550           4819   ;        main.c:1073: sprintf(buff, "%01d,%02d,%ld,%05d,%03d\n", state_res, count,freq100, 0, (int)curr_angle);
1550 9053D0    4820            mov     dptr,#_curr_angle
1553 E0        4821            movx    a,@dptr
1554 FA        4822            mov     r2,a
1555 A3        4823            inc     dptr
1556 E0        4824            movx    a,@dptr
1557 FB        4825            mov     r3,a
1558 A3        4826            inc     dptr
1559 E0        4827            movx    a,@dptr
155A FE        4828            mov     r6,a
155B A3        4829            inc     dptr
155C E0        4830            movx    a,@dptr
155D 8A82      4831            mov     dpl,r2
155F 8B83      4832            mov     dph,r3
1561 8EF0      4833            mov     b,r6
1563 C004      4834            push    ar4
1565 C005      4835            push    ar5
1567 120000    4836            lcall   ___fs2sint
156A AA82      4837            mov     r2,dpl
156C AB83      4838            mov     r3,dph
156E D005      4839            pop     ar5
1570 D004      4840            pop     ar4
1572 C002      4841            push    ar2
1574 C003      4842            push    ar3
1576 E4        4843            clr     a
1577 C0E0      4844            push    acc
1579 C0E0      4845            push    acc
157B 905BE0    4846            mov     dptr,#_freq100
157E E0        4847            movx    a,@dptr
157F C0E0      4848            push    acc
1581 A3        4849            inc     dptr
1582 E0        4850            movx    a,@dptr
1583 C0E0      4851            push    acc
1585 A3        4852            inc     dptr
1586 E0        4853            movx    a,@dptr
1587 C0E0      4854            push    acc
1589 A3        4855            inc     dptr
158A E0        4856            movx    a,@dptr
158B C0E0      4857            push    acc
158D C040      4858            push    _Auto_mode_slave_sloc0_1_0
158F C041      4859            push    (_Auto_mode_slave_sloc0_1_0 + 1)
1591 C004      4860            push    ar4
1593 C005      4861            push    ar5
1595 7480      4862            mov     a,#__str_7
1597 C0E0      4863            push    acc
1599 741A      4864            mov     a,#(__str_7 >> 8)
159B C0E0      4865            push    acc
159D 7480      4866            mov     a,#0x80
159F C0E0      4867            push    acc
15A1 7420      4868            mov     a,#_buff
15A3 C0E0      4869            push    acc
15A5 745C      4870            mov     a,#(_buff >> 8)
15A7 C0E0      4871            push    acc
15A9 7440      4872            mov     a,#0x40
15AB C0E0      4873            push    acc
15AD 120000    4874            lcall   _sprintf
15B0 E581      4875            mov     a,sp
15B2 24EE      4876            add     a,#0xee
15B4 F581      4877            mov     sp,a
15B6           4878   ;        main.c:1074: waitms(5); 
15B6 900005    4879            mov     dptr,#0x0005
15B9 120000    4880            lcall   _waitms
15BC           4881   ;        main.c:1075: sendstr1(buff);
15BC 905C20    4882            mov     dptr,#_buff
15BF 75F040    4883            mov     b,#0x40
15C2 120000    4884            lcall   _sendstr1
15C5           4885   L039012?:
15C5           4886   ;        main.c:1080: Move_forward();
15C5 120000    4887            lcall   _Move_forward
15C8           4888   ;        main.c:1082: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
15C8 758209    4889            mov     dpl,#0x09
15CB 120000    4890            lcall   _ADC_at_Pin
15CE E582      4891            mov     a,dpl
15D0 8583F0    4892            mov     b,dph
15D3 905BA0    4893            mov     dptr,#_d1
15D6 F0        4894            movx    @dptr,a
15D7 A3        4895            inc     dptr
15D8 E5F0      4896            mov     a,b
15DA F0        4897            movx    @dptr,a
15DB           4898   ;        main.c:1083: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
15DB 75820A    4899            mov     dpl,#0x0A
15DE 120000    4900            lcall   _ADC_at_Pin
15E1 AA82      4901            mov     r2,dpl
15E3 AB83      4902            mov     r3,dph
15E5 905B60    4903            mov     dptr,#_d2
15E8 EA        4904            mov     a,r2
15E9 F0        4905            movx    @dptr,a
15EA A3        4906            inc     dptr
15EB EB        4907            mov     a,r3
15EC F0        4908            movx    @dptr,a
15ED           4909   ;        main.c:1084: bound = check_bound(d1,d2);
15ED 905BA0    4910            mov     dptr,#_d1
15F0 E0        4911            movx    a,@dptr
15F1 FC        4912            mov     r4,a
15F2 A3        4913            inc     dptr
15F3 E0        4914            movx    a,@dptr
15F4 FD        4915            mov     r5,a
15F5 8A60      4916            mov     _check_bound_PARM_2,r2
15F7 8B61      4917            mov     (_check_bound_PARM_2 + 1),r3
15F9 8C82      4918            mov     dpl,r4
15FB 8D83      4919            mov     dph,r5
15FD 120000    4920            lcall   _check_bound
1600 AA82      4921            mov     r2,dpl
1602 AB83      4922            mov     r3,dph
1604           4923   ;        main.c:1085: printf("f:%04ld, d1:%d, d2:%d, bound_dectect: %d\r\n",freq100, d1,d2,bound);
1604 C002      4924            push    ar2
1606 C003      4925            push    ar3
1608 C002      4926            push    ar2
160A C003      4927            push    ar3
160C 905B60    4928            mov     dptr,#_d2
160F E0        4929            movx    a,@dptr
1610 C0E0      4930            push    acc
1612 A3        4931            inc     dptr
1613 E0        4932            movx    a,@dptr
1614 C0E0      4933            push    acc
1616 905BA0    4934            mov     dptr,#_d1
1619 E0        4935            movx    a,@dptr
161A C0E0      4936            push    acc
161C A3        4937            inc     dptr
161D E0        4938            movx    a,@dptr
161E C0E0      4939            push    acc
1620 905BE0    4940            mov     dptr,#_freq100
1623 E0        4941            movx    a,@dptr
1624 C0E0      4942            push    acc
1626 A3        4943            inc     dptr
1627 E0        4944            movx    a,@dptr
1628 C0E0      4945            push    acc
162A A3        4946            inc     dptr
162B E0        4947            movx    a,@dptr
162C C0E0      4948            push    acc
162E A3        4949            inc     dptr
162F E0        4950            movx    a,@dptr
1630 C0E0      4951            push    acc
1632 7400      4952            mov     a,#__str_8
1634 C0E0      4953            push    acc
1636 741B      4954            mov     a,#(__str_8 >> 8)
1638 C0E0      4955            push    acc
163A 7480      4956            mov     a,#0x80
163C C0E0      4957            push    acc
163E 120000    4958            lcall   _printf
1641 E581      4959            mov     a,sp
1643 24F3      4960            add     a,#0xf3
1645 F581      4961            mov     sp,a
1647 D003      4962            pop     ar3
1649 D002      4963            pop     ar2
164B           4964   ;        main.c:1087: if (freq100>=5340){
164B 905BE0    4965            mov     dptr,#_freq100
164E E0        4966            movx    a,@dptr
164F FC        4967            mov     r4,a
1650 A3        4968            inc     dptr
1651 E0        4969            movx    a,@dptr
1652 FD        4970            mov     r5,a
1653 A3        4971            inc     dptr
1654 E0        4972            movx    a,@dptr
1655 FE        4973            mov     r6,a
1656 A3        4974            inc     dptr
1657 E0        4975            movx    a,@dptr
1658 FF        4976            mov     r7,a
1659 C3        4977            clr     c
165A EC        4978            mov     a,r4
165B 94DC      4979            subb    a,#0xDC
165D ED        4980            mov     a,r5
165E 9414      4981            subb    a,#0x14
1660 EE        4982            mov     a,r6
1661 9400      4983            subb    a,#0x00
1663 EF        4984            mov     a,r7
1664 6480      4985            xrl     a,#0x80
1666 9480      4986            subb    a,#0x80
1668 4000      4987            jc      L039014?
166A           4988   ;        main.c:1088: mea_yes = 0;
166A 9052D0    4989            mov     dptr,#_mea_yes
166D E4        4990            clr     a
166E F0        4991            movx    @dptr,a
166F           4992   ;        main.c:1089: Move_back_ms(300);
166F 90012C    4993            mov     dptr,#0x012C
1672 C002      4994            push    ar2
1674 C003      4995            push    ar3
1676 120000    4996            lcall   _Move_back_ms
1679           4997   ;        main.c:1090: waitms(100);
1679 900064    4998            mov     dptr,#0x0064
167C 120000    4999            lcall   _waitms
167F           5000   ;        main.c:1091: servo_pick();
167F 120000    5001            lcall   _servo_pick
1682 D003      5002            pop     ar3
1684 D002      5003            pop     ar2
1686           5004   ;        main.c:1092: count++;
1686 0540      5005            inc     _Auto_mode_slave_sloc0_1_0
1688 E4        5006            clr     a
1689 B54080    5007            cjne    a,_Auto_mode_slave_sloc0_1_0,L039045?
168C 0541      5008            inc     (_Auto_mode_slave_sloc0_1_0 + 1)
168E           5009   L039045?:
168E           5010   ;        main.c:1093: waitms(100);
168E 900064    5011            mov     dptr,#0x0064
1691 C002      5012            push    ar2
1693 C003      5013            push    ar3
1695 120000    5014            lcall   _waitms
1698           5015   ;        main.c:1094: mea_yes = 1;
1698 9052D0    5016            mov     dptr,#_mea_yes
169B 7401      5017            mov     a,#0x01
169D F0        5018            movx    @dptr,a
169E           5019   ;        main.c:1095: Move_forward();
169E 120000    5020            lcall   _Move_forward
16A1 D003      5021            pop     ar3
16A3 D002      5022            pop     ar2
16A5           5023   L039014?:
16A5           5024   ;        main.c:1098: if(bound == 1){
16A5 BA01C0    5025            cjne    r2,#0x01,L039046?
16A8 BB00C0    5026            cjne    r3,#0x00,L039046?
16AB 8000      5027            sjmp    L039047?
16AD           5028   L039046?:
16AD 020000    5029            ljmp    L039018?
16B0           5030   L039047?:
16B0           5031   ;        main.c:1099: Move_back_ms(500);
16B0 9001F4    5032            mov     dptr,#0x01F4
16B3 120000    5033            lcall   _Move_back_ms
16B6           5034   ;        main.c:1100: waitms(100);
16B6 900064    5035            mov     dptr,#0x0064
16B9 120000    5036            lcall   _waitms
16BC           5037   ;        main.c:1101: angle = get_random_90_250();
16BC 120000    5038            lcall   _get_random_90_250
16BF 858200    5039            mov     __mulint_PARM_2,dpl
16C2 858301    5040            mov     (__mulint_PARM_2 + 1),dph
16C5           5041   ;        main.c:1102: Right_angle(angle*600/90);
16C5 900258    5042            mov     dptr,#0x0258
16C8 120000    5043            lcall   __mulint
16CB AA82      5044            mov     r2,dpl
16CD AB83      5045            mov     r3,dph
16CF 75005A    5046            mov     __divuint_PARM_2,#0x5A
16D2 E4        5047            clr     a
16D3 F501      5048            mov     (__divuint_PARM_2 + 1),a
16D5 8A82      5049            mov     dpl,r2
16D7 8B83      5050            mov     dph,r3
16D9 120000    5051            lcall   __divuint
16DC 120000    5052            lcall   _Right_angle
16DF           5053   ;        main.c:1103: curr_angle = Read_angle() * 1.2;
16DF 120000    5054            lcall   _Read_angle
16E2 AA82      5055            mov     r2,dpl
16E4 AB83      5056            mov     r3,dph
16E6 ACF0      5057            mov     r4,b
16E8 FD        5058            mov     r5,a
16E9 C002      5059            push    ar2
16EB C003      5060            push    ar3
16ED C004      5061            push    ar4
16EF C005      5062            push    ar5
16F1 90999A    5063            mov     dptr,#0x999A
16F4 75F099    5064            mov     b,#0x99
16F7 743F      5065            mov     a,#0x3F
16F9 120000    5066            lcall   ___fsmul
16FC AA82      5067            mov     r2,dpl
16FE AB83      5068            mov     r3,dph
1700 ACF0      5069            mov     r4,b
1702 FD        5070            mov     r5,a
1703 E581      5071            mov     a,sp
1705 24FC      5072            add     a,#0xfc
1707 F581      5073            mov     sp,a
1709 9053D0    5074            mov     dptr,#_curr_angle
170C EA        5075            mov     a,r2
170D F0        5076            movx    @dptr,a
170E A3        5077            inc     dptr
170F EB        5078            mov     a,r3
1710 F0        5079            movx    @dptr,a
1711 A3        5080            inc     dptr
1712 EC        5081            mov     a,r4
1713 F0        5082            movx    @dptr,a
1714 A3        5083            inc     dptr
1715 ED        5084            mov     a,r5
1716 F0        5085            movx    @dptr,a
1717 020000    5086            ljmp    L039018?
171A           5087   ;------------------------------------------------------------
171A           5088   ;Allocation info for local variables in function 'measure_distance'
171A           5089   ;------------------------------------------------------------
171A           5090   ;------------------------------------------------------------
171A           5091   ;        main.c:1110: float measure_distance(void)
171A           5092   ;        -----------------------------------------
171A           5093   ;         function measure_distance
171A           5094   ;        -----------------------------------------
171A           5095   _measure_distance:
171A           5096   ;        main.c:1112: TL0 = 0; 
171A 758A00    5097            mov     _TL0,#0x00
171D           5098   ;        main.c:1113: TH0 = 0; 
171D 758C00    5099            mov     _TH0,#0x00
1720           5100   ;        main.c:1114: TF0 = 0; 
1720 C28D      5101            clr     _TF0
1722           5102   ;        main.c:1115: overflow_count = 0;
1722 905820    5103            mov     dptr,#_overflow_count
1725           5104   ;        main.c:1116: duration = 0.0; 
1725 E4        5105            clr     a
1726 F0        5106            movx    @dptr,a
1727 905250    5107            mov     dptr,#_duration
172A F0        5108            movx    @dptr,a
172B A3        5109            inc     dptr
172C E4        5110            clr     a
172D F0        5111            movx    @dptr,a
172E A3        5112            inc     dptr
172F F0        5113            movx    @dptr,a
1730 A3        5114            inc     dptr
1731 F0        5115            movx    @dptr,a
1732           5116   ;        main.c:1118: TRIG_PIN = 1; 
1732 D2B2      5117            setb    _P3_2
1734           5118   ;        main.c:1119: Timer3us(10);
1734 75820A    5119            mov     dpl,#0x0A
1737 120000    5120            lcall   _Timer3us
173A           5121   ;        main.c:1120: TRIG_PIN = 0; 
173A C2B2      5122            clr     _P3_2
173C           5123   ;        main.c:1122: while (ECHO_PIN != 0);
173C           5124   L040001?:
173C 20B3D0    5125            jb      _P3_3,L040001?
173F           5126   ;        main.c:1123: while (ECHO_PIN != 1);
173F           5127   L040004?:
173F 30B310    5128            jnb     _P3_3,L040004?
1742           5129   ;        main.c:1124: TR0 = 1; 
1742 D28C      5130            setb    _TR0
1744           5131   ;        main.c:1125: while (ECHO_PIN == 1)
1744           5132   L040009?:
1744 30B390    5133            jnb     _P3_3,L040011?
1747           5134   ;        main.c:1127: if (TF0 == 1){
1747           5135   ;        main.c:1128: TF0 = 0; 
1747 108DD0    5136            jbc     _TF0,L040023?
174A 8000      5137            sjmp    L040009?
174C           5138   L040023?:
174C           5139   ;        main.c:1129: overflow_count++;
174C 905820    5140            mov     dptr,#_overflow_count
174F E0        5141            movx    a,@dptr
1750 2401      5142            add     a,#0x01
1752 F0        5143            movx    @dptr,a
1753 8000      5144            sjmp    L040009?
1755           5145   L040011?:
1755           5146   ;        main.c:1133: TR0 = 0; 
1755 C28C      5147            clr     _TR0
1757           5148   ;        main.c:1134: duration = (overflow_count*65536.0 + TH0*256.0 + TL0) * (12.0/SYSCLK);
1757 905820    5149            mov     dptr,#_overflow_count
175A E0        5150            movx    a,@dptr
175B F582      5151            mov     dpl,a
175D 120000    5152            lcall   ___uchar2fs
1760 AA82      5153            mov     r2,dpl
1762 AB83      5154            mov     r3,dph
1764 ACF0      5155            mov     r4,b
1766 FD        5156            mov     r5,a
1767 C002      5157            push    ar2
1769 C003      5158            push    ar3
176B C004      5159            push    ar4
176D C005      5160            push    ar5
176F 900000    5161            mov     dptr,#0x0000
1772 75F080    5162            mov     b,#0x80
1775 7447      5163            mov     a,#0x47
1777 120000    5164            lcall   ___fsmul
177A AA82      5165            mov     r2,dpl
177C AB83      5166            mov     r3,dph
177E ACF0      5167            mov     r4,b
1780 FD        5168            mov     r5,a
1781 E581      5169            mov     a,sp
1783 24FC      5170            add     a,#0xfc
1785 F581      5171            mov     sp,a
1787 858C82    5172            mov     dpl,_TH0
178A C002      5173            push    ar2
178C C003      5174            push    ar3
178E C004      5175            push    ar4
1790 C005      5176            push    ar5
1792 120000    5177            lcall   ___uchar2fs
1795 AE82      5178            mov     r6,dpl
1797 AF83      5179            mov     r7,dph
1799 A8F0      5180            mov     r0,b
179B F9        5181            mov     r1,a
179C C006      5182            push    ar6
179E C007      5183            push    ar7
17A0 C000      5184            push    ar0
17A2 C001      5185            push    ar1
17A4 900000    5186            mov     dptr,#0x0000
17A7 75F080    5187            mov     b,#0x80
17AA 7443      5188            mov     a,#0x43
17AC 120000    5189            lcall   ___fsmul
17AF AE82      5190            mov     r6,dpl
17B1 AF83      5191            mov     r7,dph
17B3 A8F0      5192            mov     r0,b
17B5 F9        5193            mov     r1,a
17B6 E581      5194            mov     a,sp
17B8 24FC      5195            add     a,#0xfc
17BA F581      5196            mov     sp,a
17BC D005      5197            pop     ar5
17BE D004      5198            pop     ar4
17C0 D003      5199            pop     ar3
17C2 D002      5200            pop     ar2
17C4 C006      5201            push    ar6
17C6 C007      5202            push    ar7
17C8 C000      5203            push    ar0
17CA C001      5204            push    ar1
17CC 8A82      5205            mov     dpl,r2
17CE 8B83      5206            mov     dph,r3
17D0 8CF0      5207            mov     b,r4
17D2 ED        5208            mov     a,r5
17D3 120000    5209            lcall   ___fsadd
17D6 AA82      5210            mov     r2,dpl
17D8 AB83      5211            mov     r3,dph
17DA ACF0      5212            mov     r4,b
17DC FD        5213            mov     r5,a
17DD E581      5214            mov     a,sp
17DF 24FC      5215            add     a,#0xfc
17E1 F581      5216            mov     sp,a
17E3 AE8A      5217            mov     r6,_TL0
17E5 7F00      5218            mov     r7,#0x00
17E7 8E82      5219            mov     dpl,r6
17E9 8F83      5220            mov     dph,r7
17EB C002      5221            push    ar2
17ED C003      5222            push    ar3
17EF C004      5223            push    ar4
17F1 C005      5224            push    ar5
17F3 120000    5225            lcall   ___sint2fs
17F6 AE82      5226            mov     r6,dpl
17F8 AF83      5227            mov     r7,dph
17FA A8F0      5228            mov     r0,b
17FC F9        5229            mov     r1,a
17FD D005      5230            pop     ar5
17FF D004      5231            pop     ar4
1801 D003      5232            pop     ar3
1803 D002      5233            pop     ar2
1805 C006      5234            push    ar6
1807 C007      5235            push    ar7
1809 C000      5236            push    ar0
180B C001      5237            push    ar1
180D 8A82      5238            mov     dpl,r2
180F 8B83      5239            mov     dph,r3
1811 8CF0      5240            mov     b,r4
1813 ED        5241            mov     a,r5
1814 120000    5242            lcall   ___fsadd
1817 AA82      5243            mov     r2,dpl
1819 AB83      5244            mov     r3,dph
181B ACF0      5245            mov     r4,b
181D FD        5246            mov     r5,a
181E E581      5247            mov     a,sp
1820 24FC      5248            add     a,#0xfc
1822 F581      5249            mov     sp,a
1824 C002      5250            push    ar2
1826 C003      5251            push    ar3
1828 C004      5252            push    ar4
182A C005      5253            push    ar5
182C 90F4FC    5254            mov     dptr,#0xF4FC
182F 75F032    5255            mov     b,#0x32
1832 7434      5256            mov     a,#0x34
1834 120000    5257            lcall   ___fsmul
1837 AA82      5258            mov     r2,dpl
1839 AB83      5259            mov     r3,dph
183B ACF0      5260            mov     r4,b
183D FD        5261            mov     r5,a
183E E581      5262            mov     a,sp
1840 24FC      5263            add     a,#0xfc
1842 F581      5264            mov     sp,a
1844 905250    5265            mov     dptr,#_duration
1847 EA        5266            mov     a,r2
1848 F0        5267            movx    @dptr,a
1849 A3        5268            inc     dptr
184A EB        5269            mov     a,r3
184B F0        5270            movx    @dptr,a
184C A3        5271            inc     dptr
184D EC        5272            mov     a,r4
184E F0        5273            movx    @dptr,a
184F A3        5274            inc     dptr
1850 ED        5275            mov     a,r5
1851 F0        5276            movx    @dptr,a
1852           5277   ;        main.c:1136: distance = 340.0 * duration * 100.0 / 2.0; // distance in cm
1852 C002      5278            push    ar2
1854 C003      5279            push    ar3
1856 C004      5280            push    ar4
1858 C005      5281            push    ar5
185A 90D000    5282            mov     dptr,#0xD000
185D 75F004    5283            mov     b,#0x04
1860 7447      5284            mov     a,#0x47
1862 120000    5285            lcall   ___fsmul
1865 AA82      5286            mov     r2,dpl
1867 AB83      5287            mov     r3,dph
1869 ACF0      5288            mov     r4,b
186B FD        5289            mov     r5,a
186C E581      5290            mov     a,sp
186E 24FC      5291            add     a,#0xfc
1870 F581      5292            mov     sp,a
1872 E4        5293            clr     a
1873 C0E0      5294            push    acc
1875 C0E0      5295            push    acc
1877 C0E0      5296            push    acc
1879 7440      5297            mov     a,#0x40
187B C0E0      5298            push    acc
187D 8A82      5299            mov     dpl,r2
187F 8B83      5300            mov     dph,r3
1881 8CF0      5301            mov     b,r4
1883 ED        5302            mov     a,r5
1884 120000    5303            lcall   ___fsdiv
1887 AA82      5304            mov     r2,dpl
1889 AB83      5305            mov     r3,dph
188B ACF0      5306            mov     r4,b
188D FD        5307            mov     r5,a
188E E581      5308            mov     a,sp
1890 24FC      5309            add     a,#0xfc
1892 F581      5310            mov     sp,a
1894 905210    5311            mov     dptr,#_distance
1897 EA        5312            mov     a,r2
1898 F0        5313            movx    @dptr,a
1899 A3        5314            inc     dptr
189A EB        5315            mov     a,r3
189B F0        5316            movx    @dptr,a
189C A3        5317            inc     dptr
189D EC        5318            mov     a,r4
189E F0        5319            movx    @dptr,a
189F A3        5320            inc     dptr
18A0           5321   ;        main.c:1138: return distance; 
18A0 ED        5322            mov     a,r5
18A1 F0        5323            movx    @dptr,a
18A2 8A82      5324            mov     dpl,r2
18A4 8B83      5325            mov     dph,r3
18A6 8CF0      5326            mov     b,r4
18A8 22        5327            ret
18A9           5328   ;------------------------------------------------------------
18A9           5329   ;Allocation info for local variables in function 'Joystick_Control'
18A9           5330   ;------------------------------------------------------------
18A9           5331   ;vy_ptr                    Allocated with name '_Joystick_Control_PARM_2'
18A9           5332   ;vx_ptr                    Allocated to registers r2 r3 r4 
18A9           5333   ;sloc0                     Allocated with name '_Joystick_Control_sloc0_1_0'
18A9           5334   ;sloc1                     Allocated with name '_Joystick_Control_sloc1_1_0'
18A9           5335   ;sloc2                     Allocated with name '_Joystick_Control_sloc2_1_0'
18A9           5336   ;sloc3                     Allocated with name '_Joystick_Control_sloc3_1_0'
18A9           5337   ;sloc4                     Allocated with name '_Joystick_Control_sloc4_1_0'
18A9           5338   ;sloc5                     Allocated with name '_Joystick_Control_sloc5_1_0'
18A9           5339   ;vx                        Allocated with name '_Joystick_Control_vx_1_225'
18A9           5340   ;vy                        Allocated with name '_Joystick_Control_vy_1_225'
18A9           5341   ;vx_error                  Allocated with name '_Joystick_Control_vx_error_1_225'
18A9           5342   ;vy_error                  Allocated with name '_Joystick_Control_vy_error_1_225'
18A9           5343   ;vx_err                    Allocated with name '_Joystick_Control_vx_err_1_225'
18A9           5344   ;vy_err                    Allocated with name '_Joystick_Control_vy_err_1_225'
18A9           5345   ;------------------------------------------------------------
18A9           5346   ;        main.c:1142: float Joystick_Control(int *vx_ptr, int *vy_ptr)
18A9           5347   ;        -----------------------------------------
18A9           5348   ;         function Joystick_Control
18A9           5349   ;        -----------------------------------------
18A9           5350   _Joystick_Control:
18A9           5351   ;        main.c:1146: vx = *vx_ptr; 
18A9 120000    5352            lcall   __gptrget
18AC FA        5353            mov     r2,a
18AD A3        5354            inc     dptr
18AE 120000    5355            lcall   __gptrget
18B1 FB        5356            mov     r3,a
18B2           5357   ;        main.c:1147: vy = *vy_ptr; 
18B2 AC70      5358            mov     r4,_Joystick_Control_PARM_2
18B4 AD71      5359            mov     r5,(_Joystick_Control_PARM_2 + 1)
18B6 AE72      5360            mov     r6,(_Joystick_Control_PARM_2 + 2)
18B8 8C82      5361            mov     dpl,r4
18BA 8D83      5362            mov     dph,r5
18BC 8EF0      5363            mov     b,r6
18BE 120000    5364            lcall   __gptrget
18C1 FC        5365            mov     r4,a
18C2 A3        5366            inc     dptr
18C3 120000    5367            lcall   __gptrget
18C6 FD        5368            mov     r5,a
18C7           5369   ;        main.c:1150: raw_angle = Read_angle();
18C7 C002      5370            push    ar2
18C9 C003      5371            push    ar3
18CB C004      5372            push    ar4
18CD C005      5373            push    ar5
18CF 120000    5374            lcall   _Read_angle
18D2 AE82      5375            mov     r6,dpl
18D4 AF83      5376            mov     r7,dph
18D6 A8F0      5377            mov     r0,b
18D8 F9        5378            mov     r1,a
18D9 D005      5379            pop     ar5
18DB D004      5380            pop     ar4
18DD D003      5381            pop     ar3
18DF D002      5382            pop     ar2
18E1 905390    5383            mov     dptr,#_raw_angle
18E4 EE        5384            mov     a,r6
18E5 F0        5385            movx    @dptr,a
18E6 A3        5386            inc     dptr
18E7 EF        5387            mov     a,r7
18E8 F0        5388            movx    @dptr,a
18E9 A3        5389            inc     dptr
18EA E8        5390            mov     a,r0
18EB F0        5391            movx    @dptr,a
18EC A3        5392            inc     dptr
18ED E9        5393            mov     a,r1
18EE F0        5394            movx    @dptr,a
18EF           5395   ;        main.c:1153: vx_error = abs(vx-vx_thres)*100/vx_thres; 
18EF 9055E0    5396            mov     dptr,#_vx_thres
18F2 E0        5397            movx    a,@dptr
18F3 FE        5398            mov     r6,a
18F4 A3        5399            inc     dptr
18F5 E0        5400            movx    a,@dptr
18F6 FF        5401            mov     r7,a
18F7 EA        5402            mov     a,r2
18F8 C3        5403            clr     c
18F9 9E        5404            subb    a,r6
18FA F582      5405            mov     dpl,a
18FC EB        5406            mov     a,r3
18FD 9F        5407            subb    a,r7
18FE F583      5408            mov     dph,a
1900 C002      5409            push    ar2
1902 C003      5410            push    ar3
1904 C004      5411            push    ar4
1906 C005      5412            push    ar5
1908 120000    5413            lcall   _abs
190B 858200    5414            mov     __mulint_PARM_2,dpl
190E 858301    5415            mov     (__mulint_PARM_2 + 1),dph
1911 900064    5416            mov     dptr,#0x0064
1914 120000    5417            lcall   __mulint
1917 AE82      5418            mov     r6,dpl
1919 AF83      5419            mov     r7,dph
191B 9055E0    5420            mov     dptr,#_vx_thres
191E E0        5421            movx    a,@dptr
191F F500      5422            mov     __divsint_PARM_2,a
1921 A3        5423            inc     dptr
1922 E0        5424            movx    a,@dptr
1923 F501      5425            mov     (__divsint_PARM_2 + 1),a
1925 8E82      5426            mov     dpl,r6
1927 8F83      5427            mov     dph,r7
1929 120000    5428            lcall   __divsint
192C E582      5429            mov     a,dpl
192E 8583F0    5430            mov     b,dph
1931 D005      5431            pop     ar5
1933 D004      5432            pop     ar4
1935 90D8A8    5433            mov     dptr,#_Joystick_Control_vx_error_1_225
1938 F0        5434            movx    @dptr,a
1939 A3        5435            inc     dptr
193A E5F0      5436            mov     a,b
193C F0        5437            movx    @dptr,a
193D           5438   ;        main.c:1154: vy_error = abs(vy-vy_thres)*100/vy_thres; 
193D 9055A0    5439            mov     dptr,#_vy_thres
1940 E0        5440            movx    a,@dptr
1941 FE        5441            mov     r6,a
1942 A3        5442            inc     dptr
1943 E0        5443            movx    a,@dptr
1944 FF        5444            mov     r7,a
1945 EC        5445            mov     a,r4
1946 C3        5446            clr     c
1947 9E        5447            subb    a,r6
1948 F582      5448            mov     dpl,a
194A ED        5449            mov     a,r5
194B 9F        5450            subb    a,r7
194C F583      5451            mov     dph,a
194E C004      5452            push    ar4
1950 C005      5453            push    ar5
1952 120000    5454            lcall   _abs
1955 858200    5455            mov     __mulint_PARM_2,dpl
1958 858301    5456            mov     (__mulint_PARM_2 + 1),dph
195B 900064    5457            mov     dptr,#0x0064
195E 120000    5458            lcall   __mulint
1961 AE82      5459            mov     r6,dpl
1963 AF83      5460            mov     r7,dph
1965 9055A0    5461            mov     dptr,#_vy_thres
1968 E0        5462            movx    a,@dptr
1969 F590      5463            mov     _Joystick_Control_sloc0_1_0,a
196B A3        5464            inc     dptr
196C E0        5465            movx    a,@dptr
196D F591      5466            mov     (_Joystick_Control_sloc0_1_0 + 1),a
196F 859000    5467            mov     __divsint_PARM_2,_Joystick_Control_sloc0_1_0
1972 859101    5468            mov     (__divsint_PARM_2 + 1),(_Joystick_Control_sloc0_1_0 + 1)
1975 8E82      5469            mov     dpl,r6
1977 8F83      5470            mov     dph,r7
1979 120000    5471            lcall   __divsint
197C AE82      5472            mov     r6,dpl
197E AF83      5473            mov     r7,dph
1980 D005      5474            pop     ar5
1982 D004      5475            pop     ar4
1984 D003      5476            pop     ar3
1986 D002      5477            pop     ar2
1988 90D908    5478            mov     dptr,#_Joystick_Control_vy_error_1_225
198B EE        5479            mov     a,r6
198C F0        5480            movx    @dptr,a
198D A3        5481            inc     dptr
198E EF        5482            mov     a,r7
198F F0        5483            movx    @dptr,a
1990           5484   ;        main.c:1155: vx_err = vx-vx_thres; 
1990 9055E0    5485            mov     dptr,#_vx_thres
1993 E0        5486            movx    a,@dptr
1994 F8        5487            mov     r0,a
1995 A3        5488            inc     dptr
1996 E0        5489            movx    a,@dptr
1997 F9        5490            mov     r1,a
1998 EA        5491            mov     a,r2
1999 C3        5492            clr     c
199A 98        5493            subb    a,r0
199B FA        5494            mov     r2,a
199C EB        5495            mov     a,r3
199D 99        5496            subb    a,r1
199E FB        5497            mov     r3,a
199F 90D958    5498            mov     dptr,#_Joystick_Control_vx_err_1_225
19A2 EA        5499            mov     a,r2
19A3 F0        5500            movx    @dptr,a
19A4 A3        5501            inc     dptr
19A5 EB        5502            mov     a,r3
19A6 F0        5503            movx    @dptr,a
19A7           5504   ;        main.c:1156: vy_err = vy-vy_thres; 
19A7 EC        5505            mov     a,r4
19A8 C3        5506            clr     c
19A9 9590      5507            subb    a,_Joystick_Control_sloc0_1_0
19AB F5E8      5508            mov     _Joystick_Control_sloc1_1_0,a
19AD ED        5509            mov     a,r5
19AE 9591      5510            subb    a,(_Joystick_Control_sloc0_1_0 + 1)
19B0 F5E9      5511            mov     (_Joystick_Control_sloc1_1_0 + 1),a
19B2 90D9A8    5512            mov     dptr,#_Joystick_Control_vy_err_1_225
19B5 E5E8      5513            mov     a,_Joystick_Control_sloc1_1_0
19B7 F0        5514            movx    @dptr,a
19B8 A3        5515            inc     dptr
19B9 E5E9      5516            mov     a,(_Joystick_Control_sloc1_1_0 + 1)
19BB F0        5517            movx    @dptr,a
19BC           5518   ;        main.c:1157: pwm_left = 0; 
19BC 905760    5519            mov     dptr,#_pwm_left
19BF           5520   ;        main.c:1158: pwm_right = 0; 
19BF E4        5521            clr     a
19C0 F0        5522            movx    @dptr,a
19C1 905720    5523            mov     dptr,#_pwm_right
19C4 F0        5524            movx    @dptr,a
19C5           5525   ;        main.c:1160: if ((vy_error>5) && (vx_error<5)){
19C5 C3        5526            clr     c
19C6 7405      5527            mov     a,#0x05
19C8 9E        5528            subb    a,r6
19C9 E4        5529            clr     a
19CA 6480      5530            xrl     a,#0x80
19CC 8FF0      5531            mov     b,r7
19CE 63F080    5532            xrl     b,#0x80
19D1 95F0      5533            subb    a,b
19D3 E4        5534            clr     a
19D4 33        5535            rlc     a
19D5 F590      5536            mov     _Joystick_Control_sloc0_1_0,a
19D7 7000      5537            jnz     L041062?
19D9 020000    5538            ljmp    L041005?
19DC           5539   L041062?:
19DC 90D8A8    5540            mov     dptr,#_Joystick_Control_vx_error_1_225
19DF E0        5541            movx    a,@dptr
19E0 F8        5542            mov     r0,a
19E1 A3        5543            inc     dptr
19E2 E0        5544            movx    a,@dptr
19E3 F9        5545            mov     r1,a
19E4 C3        5546            clr     c
19E5 E8        5547            mov     a,r0
19E6 9405      5548            subb    a,#0x05
19E8 E9        5549            mov     a,r1
19E9 6480      5550            xrl     a,#0x80
19EB 9480      5551            subb    a,#0x80
19ED 4000      5552            jc      L041063?
19EF 020000    5553            ljmp    L041005?
19F2           5554   L041063?:
19F2           5555   ;        main.c:1161: pwm_left = vy_error; 
19F2 C002      5556            push    ar2
19F4 C003      5557            push    ar3
19F6 905760    5558            mov     dptr,#_pwm_left
19F9 EE        5559            mov     a,r6
19FA F0        5560            movx    @dptr,a
19FB           5561   ;        main.c:1162: pwm_right = vy_error * pwm_corr; 
19FB 8E82      5562            mov     dpl,r6
19FD 8F83      5563            mov     dph,r7
19FF C004      5564            push    ar4
1A01 C005      5565            push    ar5
1A03 C006      5566            push    ar6
1A05 C007      5567            push    ar7
1A07 120000    5568            lcall   ___sint2fs
1A0A AA82      5569            mov     r2,dpl
1A0C AB83      5570            mov     r3,dph
1A0E A8F0      5571            mov     r0,b
1A10 F9        5572            mov     r1,a
1A11 905410    5573            mov     dptr,#_pwm_corr
1A14 E0        5574            movx    a,@dptr
1A15 C0E0      5575            push    acc
1A17 A3        5576            inc     dptr
1A18 E0        5577            movx    a,@dptr
1A19 C0E0      5578            push    acc
1A1B A3        5579            inc     dptr
1A1C E0        5580            movx    a,@dptr
1A1D C0E0      5581            push    acc
1A1F A3        5582            inc     dptr
1A20 E0        5583            movx    a,@dptr
1A21 C0E0      5584            push    acc
1A23 8A82      5585            mov     dpl,r2
1A25 8B83      5586            mov     dph,r3
1A27 88F0      5587            mov     b,r0
1A29 E9        5588            mov     a,r1
1A2A 120000    5589            lcall   ___fsmul
1A2D AA82      5590            mov     r2,dpl
1A2F AB83      5591            mov     r3,dph
1A31 A8F0      5592            mov     r0,b
1A33 F9        5593            mov     r1,a
1A34 E581      5594            mov     a,sp
1A36 24FC      5595            add     a,#0xfc
1A38 F581      5596            mov     sp,a
1A3A D007      5597            pop     ar7
1A3C D006      5598            pop     ar6
1A3E D005      5599            pop     ar5
1A40 D004      5600            pop     ar4
1A42 8A82      5601            mov     dpl,r2
1A44 8B83      5602            mov     dph,r3
1A46 88F0      5603            mov     b,r0
1A48 E9        5604            mov     a,r1
1A49 C002      5605            push    ar2
1A4B C003      5606            push    ar3
1A4D C004      5607            push    ar4
1A4F C005      5608            push    ar5
1A51 C006      5609            push    ar6
1A53 C007      5610            push    ar7
1A55 120000    5611            lcall   ___fs2uchar
1A58 858238    5612            mov     _Joystick_Control_sloc2_1_0,dpl
1A5B D007      5613            pop     ar7
1A5D D006      5614            pop     ar6
1A5F D005      5615            pop     ar5
1A61 D004      5616            pop     ar4
1A63 D003      5617            pop     ar3
1A65 D002      5618            pop     ar2
1A67 905720    5619            mov     dptr,#_pwm_right
1A6A E538      5620            mov     a,_Joystick_Control_sloc2_1_0
1A6C F0        5621            movx    @dptr,a
1A6D           5622   ;        main.c:1163: if (vy_err > 0){ //move forward
1A6D C3        5623            clr     c
1A6E E4        5624            clr     a
1A6F 95E8      5625            subb    a,_Joystick_Control_sloc1_1_0
1A71 E4        5626            clr     a
1A72 6480      5627            xrl     a,#0x80
1A74 85E9F0    5628            mov     b,(_Joystick_Control_sloc1_1_0 + 1)
1A77 63F080    5629            xrl     b,#0x80
1A7A 95F0      5630            subb    a,b
1A7C D003      5631            pop     ar3
1A7E D002      5632            pop     ar2
1A80 5000      5633            jnc     L041002?
1A82           5634   ;        main.c:1164: L_motor_dir = 0; 
1A82 9056E0    5635            mov     dptr,#_L_motor_dir
1A85           5636   ;        main.c:1165: R_motor_dir = 0; 
1A85 E4        5637            clr     a
1A86 F0        5638            movx    @dptr,a
1A87 9056A0    5639            mov     dptr,#_R_motor_dir
1A8A F0        5640            movx    @dptr,a
1A8B 8000      5641            sjmp    L041005?
1A8D           5642   L041002?:
1A8D           5643   ;        main.c:1168: L_motor_dir = 1; 
1A8D C002      5644            push    ar2
1A8F C003      5645            push    ar3
1A91 9056E0    5646            mov     dptr,#_L_motor_dir
1A94 7401      5647            mov     a,#0x01
1A96 F0        5648            movx    @dptr,a
1A97           5649   ;        main.c:1169: R_motor_dir = 1; 
1A97 9056A0    5650            mov     dptr,#_R_motor_dir
1A9A 7401      5651            mov     a,#0x01
1A9C F0        5652            movx    @dptr,a
1A9D           5653   ;        main.c:1170: pwm_right *= 1.05;
1A9D 853882    5654            mov     dpl,_Joystick_Control_sloc2_1_0
1AA0 C004      5655            push    ar4
1AA2 C005      5656            push    ar5
1AA4 C006      5657            push    ar6
1AA6 C007      5658            push    ar7
1AA8 120000    5659            lcall   ___uchar2fs
1AAB A882      5660            mov     r0,dpl
1AAD A983      5661            mov     r1,dph
1AAF AAF0      5662            mov     r2,b
1AB1 FB        5663            mov     r3,a
1AB2 C000      5664            push    ar0
1AB4 C001      5665            push    ar1
1AB6 C002      5666            push    ar2
1AB8 C003      5667            push    ar3
1ABA 906666    5668            mov     dptr,#0x6666
1ABD 75F086    5669            mov     b,#0x86
1AC0 743F      5670            mov     a,#0x3F
1AC2 120000    5671            lcall   ___fsmul
1AC5 AA82      5672            mov     r2,dpl
1AC7 AB83      5673            mov     r3,dph
1AC9 A8F0      5674            mov     r0,b
1ACB F9        5675            mov     r1,a
1ACC E581      5676            mov     a,sp
1ACE 24FC      5677            add     a,#0xfc
1AD0 F581      5678            mov     sp,a
1AD2 D007      5679            pop     ar7
1AD4 D006      5680            pop     ar6
1AD6 D005      5681            pop     ar5
1AD8 D004      5682            pop     ar4
1ADA 8A82      5683            mov     dpl,r2
1ADC 8B83      5684            mov     dph,r3
1ADE 88F0      5685            mov     b,r0
1AE0 E9        5686            mov     a,r1
1AE1 C002      5687            push    ar2
1AE3 C003      5688            push    ar3
1AE5 C004      5689            push    ar4
1AE7 C005      5690            push    ar5
1AE9 C006      5691            push    ar6
1AEB C007      5692            push    ar7
1AED 120000    5693            lcall   ___fs2uchar
1AF0 E582      5694            mov     a,dpl
1AF2 D007      5695            pop     ar7
1AF4 D006      5696            pop     ar6
1AF6 D005      5697            pop     ar5
1AF8 D004      5698            pop     ar4
1AFA D003      5699            pop     ar3
1AFC D002      5700            pop     ar2
1AFE 905720    5701            mov     dptr,#_pwm_right
1B01 F0        5702            movx    @dptr,a
1B02           5703   ;        main.c:1253: return curr_angle; 
1B02 D003      5704            pop     ar3
1B04 D002      5705            pop     ar2
1B06           5706   ;        main.c:1170: pwm_right *= 1.05;
1B06           5707   L041005?:
1B06           5708   ;        main.c:1173: if ((vx_error>5)&&(vy_error<5)){
1B06 90D8A8    5709            mov     dptr,#_Joystick_Control_vx_error_1_225
1B09 E0        5710            movx    a,@dptr
1B0A F8        5711            mov     r0,a
1B0B A3        5712            inc     dptr
1B0C E0        5713            movx    a,@dptr
1B0D F9        5714            mov     r1,a
1B0E C3        5715            clr     c
1B0F 7405      5716            mov     a,#0x05
1B11 98        5717            subb    a,r0
1B12 E4        5718            clr     a
1B13 6480      5719            xrl     a,#0x80
1B15 89F0      5720            mov     b,r1
1B17 63F080    5721            xrl     b,#0x80
1B1A 95F0      5722            subb    a,b
1B1C E4        5723            clr     a
1B1D 33        5724            rlc     a
1B1E F538      5725            mov     _Joystick_Control_sloc2_1_0,a
1B20 7000      5726            jnz     L041065?
1B22 020000    5727            ljmp    L041015?
1B25           5728   L041065?:
1B25 C3        5729            clr     c
1B26 EE        5730            mov     a,r6
1B27 9405      5731            subb    a,#0x05
1B29 EF        5732            mov     a,r7
1B2A 6480      5733            xrl     a,#0x80
1B2C 9480      5734            subb    a,#0x80
1B2E 4000      5735            jc      L041066?
1B30 020000    5736            ljmp    L041015?
1B33           5737   L041066?:
1B33           5738   ;        main.c:1174: pwm_left = vx_error; 
1B33 C004      5739            push    ar4
1B35 C005      5740            push    ar5
1B37 905760    5741            mov     dptr,#_pwm_left
1B3A E8        5742            mov     a,r0
1B3B F0        5743            movx    @dptr,a
1B3C           5744   ;        main.c:1175: pwm_right = vx_error * pwm_corr; 
1B3C 8882      5745            mov     dpl,r0
1B3E 8983      5746            mov     dph,r1
1B40 C002      5747            push    ar2
1B42 C003      5748            push    ar3
1B44 C000      5749            push    ar0
1B46 C001      5750            push    ar1
1B48 120000    5751            lcall   ___sint2fs
1B4B AE82      5752            mov     r6,dpl
1B4D AF83      5753            mov     r7,dph
1B4F ACF0      5754            mov     r4,b
1B51 FD        5755            mov     r5,a
1B52 905410    5756            mov     dptr,#_pwm_corr
1B55 E0        5757            movx    a,@dptr
1B56 C0E0      5758            push    acc
1B58 A3        5759            inc     dptr
1B59 E0        5760            movx    a,@dptr
1B5A C0E0      5761            push    acc
1B5C A3        5762            inc     dptr
1B5D E0        5763            movx    a,@dptr
1B5E C0E0      5764            push    acc
1B60 A3        5765            inc     dptr
1B61 E0        5766            movx    a,@dptr
1B62 C0E0      5767            push    acc
1B64 8E82      5768            mov     dpl,r6
1B66 8F83      5769            mov     dph,r7
1B68 8CF0      5770            mov     b,r4
1B6A ED        5771            mov     a,r5
1B6B 120000    5772            lcall   ___fsmul
1B6E AC82      5773            mov     r4,dpl
1B70 AD83      5774            mov     r5,dph
1B72 AEF0      5775            mov     r6,b
1B74 FF        5776            mov     r7,a
1B75 E581      5777            mov     a,sp
1B77 24FC      5778            add     a,#0xfc
1B79 F581      5779            mov     sp,a
1B7B D001      5780            pop     ar1
1B7D D000      5781            pop     ar0
1B7F 8C82      5782            mov     dpl,r4
1B81 8D83      5783            mov     dph,r5
1B83 8EF0      5784            mov     b,r6
1B85 EF        5785            mov     a,r7
1B86 C004      5786            push    ar4
1B88 C005      5787            push    ar5
1B8A C000      5788            push    ar0
1B8C C001      5789            push    ar1
1B8E 120000    5790            lcall   ___fs2uchar
1B91 E582      5791            mov     a,dpl
1B93 D001      5792            pop     ar1
1B95 D000      5793            pop     ar0
1B97 D005      5794            pop     ar5
1B99 D004      5795            pop     ar4
1B9B D003      5796            pop     ar3
1B9D D002      5797            pop     ar2
1B9F 905720    5798            mov     dptr,#_pwm_right
1BA2 F0        5799            movx    @dptr,a
1BA3           5800   ;        main.c:1176: if (vx_err > 0){ //turn right
1BA3 C3        5801            clr     c
1BA4 E4        5802            clr     a
1BA5 9A        5803            subb    a,r2
1BA6 E4        5804            clr     a
1BA7 6480      5805            xrl     a,#0x80
1BA9 8BF0      5806            mov     b,r3
1BAB 63F080    5807            xrl     b,#0x80
1BAE 95F0      5808            subb    a,b
1BB0 D005      5809            pop     ar5
1BB2 D004      5810            pop     ar4
1BB4 4000      5811            jc      L041067?
1BB6 020000    5812            ljmp    L041008?
1BB9           5813   L041067?:
1BB9           5814   ;        main.c:1177: L_motor_dir = 1; 
1BB9 C004      5815            push    ar4
1BBB C005      5816            push    ar5
1BBD 9056E0    5817            mov     dptr,#_L_motor_dir
1BC0 7401      5818            mov     a,#0x01
1BC2 F0        5819            movx    @dptr,a
1BC3           5820   ;        main.c:1178: R_motor_dir = 0;
1BC3 9056A0    5821            mov     dptr,#_R_motor_dir
1BC6 E4        5822            clr     a
1BC7 F0        5823            movx    @dptr,a
1BC8           5824   ;        main.c:1179: curr_angle += angle_diff * 1.45; // TUNE THIS
1BC8 C004      5825            push    ar4
1BCA C005      5826            push    ar5
1BCC C000      5827            push    ar0
1BCE C001      5828            push    ar1
1BD0 905310    5829            mov     dptr,#_angle_diff
1BD3 E0        5830            movx    a,@dptr
1BD4 C0E0      5831            push    acc
1BD6 A3        5832            inc     dptr
1BD7 E0        5833            movx    a,@dptr
1BD8 C0E0      5834            push    acc
1BDA A3        5835            inc     dptr
1BDB E0        5836            movx    a,@dptr
1BDC C0E0      5837            push    acc
1BDE A3        5838            inc     dptr
1BDF E0        5839            movx    a,@dptr
1BE0 C0E0      5840            push    acc
1BE2 90999A    5841            mov     dptr,#0x999A
1BE5 75F0B9    5842            mov     b,#0xB9
1BE8 743F      5843            mov     a,#0x3F
1BEA 120000    5844            lcall   ___fsmul
1BED 858288    5845            mov     _Joystick_Control_sloc3_1_0,dpl
1BF0 858389    5846            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
1BF3 85F08A    5847            mov     (_Joystick_Control_sloc3_1_0 + 2),b
1BF6 F58B      5848            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1BF8 E581      5849            mov     a,sp
1BFA 24FC      5850            add     a,#0xfc
1BFC F581      5851            mov     sp,a
1BFE D001      5852            pop     ar1
1C00 D000      5853            pop     ar0
1C02 D005      5854            pop     ar5
1C04 D004      5855            pop     ar4
1C06 9053D0    5856            mov     dptr,#_curr_angle
1C09 E0        5857            movx    a,@dptr
1C0A FC        5858            mov     r4,a
1C0B A3        5859            inc     dptr
1C0C E0        5860            movx    a,@dptr
1C0D FD        5861            mov     r5,a
1C0E A3        5862            inc     dptr
1C0F E0        5863            movx    a,@dptr
1C10 FA        5864            mov     r2,a
1C11 A3        5865            inc     dptr
1C12 E0        5866            movx    a,@dptr
1C13 FB        5867            mov     r3,a
1C14 C000      5868            push    ar0
1C16 C001      5869            push    ar1
1C18 C088      5870            push    _Joystick_Control_sloc3_1_0
1C1A C089      5871            push    (_Joystick_Control_sloc3_1_0 + 1)
1C1C C08A      5872            push    (_Joystick_Control_sloc3_1_0 + 2)
1C1E C08B      5873            push    (_Joystick_Control_sloc3_1_0 + 3)
1C20 8C82      5874            mov     dpl,r4
1C22 8D83      5875            mov     dph,r5
1C24 8AF0      5876            mov     b,r2
1C26 EB        5877            mov     a,r3
1C27 120000    5878            lcall   ___fsadd
1C2A AA82      5879            mov     r2,dpl
1C2C AB83      5880            mov     r3,dph
1C2E ACF0      5881            mov     r4,b
1C30 FD        5882            mov     r5,a
1C31 E581      5883            mov     a,sp
1C33 24FC      5884            add     a,#0xfc
1C35 F581      5885            mov     sp,a
1C37 D001      5886            pop     ar1
1C39 D000      5887            pop     ar0
1C3B 9053D0    5888            mov     dptr,#_curr_angle
1C3E EA        5889            mov     a,r2
1C3F F0        5890            movx    @dptr,a
1C40 A3        5891            inc     dptr
1C41 EB        5892            mov     a,r3
1C42 F0        5893            movx    @dptr,a
1C43 A3        5894            inc     dptr
1C44 EC        5895            mov     a,r4
1C45 F0        5896            movx    @dptr,a
1C46 A3        5897            inc     dptr
1C47 ED        5898            mov     a,r5
1C48 F0        5899            movx    @dptr,a
1C49 D005      5900            pop     ar5
1C4B D004      5901            pop     ar4
1C4D 020000    5902            ljmp    L041009?
1C50           5903   L041008?:
1C50           5904   ;        main.c:1182: L_motor_dir = 0; 
1C50 C004      5905            push    ar4
1C52 C005      5906            push    ar5
1C54 9056E0    5907            mov     dptr,#_L_motor_dir
1C57 E4        5908            clr     a
1C58 F0        5909            movx    @dptr,a
1C59           5910   ;        main.c:1183: R_motor_dir = 1; 
1C59 9056A0    5911            mov     dptr,#_R_motor_dir
1C5C 7401      5912            mov     a,#0x01
1C5E F0        5913            movx    @dptr,a
1C5F           5914   ;        main.c:1184: curr_angle -= angle_diff * 1.4; // TUNE THIS
1C5F C004      5915            push    ar4
1C61 C005      5916            push    ar5
1C63 C000      5917            push    ar0
1C65 C001      5918            push    ar1
1C67 905310    5919            mov     dptr,#_angle_diff
1C6A E0        5920            movx    a,@dptr
1C6B C0E0      5921            push    acc
1C6D A3        5922            inc     dptr
1C6E E0        5923            movx    a,@dptr
1C6F C0E0      5924            push    acc
1C71 A3        5925            inc     dptr
1C72 E0        5926            movx    a,@dptr
1C73 C0E0      5927            push    acc
1C75 A3        5928            inc     dptr
1C76 E0        5929            movx    a,@dptr
1C77 C0E0      5930            push    acc
1C79 903333    5931            mov     dptr,#0x3333
1C7C 75F0B3    5932            mov     b,#0xB3
1C7F 743F      5933            mov     a,#0x3F
1C81 120000    5934            lcall   ___fsmul
1C84 858288    5935            mov     _Joystick_Control_sloc3_1_0,dpl
1C87 858389    5936            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
1C8A 85F08A    5937            mov     (_Joystick_Control_sloc3_1_0 + 2),b
1C8D F58B      5938            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1C8F E581      5939            mov     a,sp
1C91 24FC      5940            add     a,#0xfc
1C93 F581      5941            mov     sp,a
1C95 D001      5942            pop     ar1
1C97 D000      5943            pop     ar0
1C99 D005      5944            pop     ar5
1C9B D004      5945            pop     ar4
1C9D 9053D0    5946            mov     dptr,#_curr_angle
1CA0 E0        5947            movx    a,@dptr
1CA1 FC        5948            mov     r4,a
1CA2 A3        5949            inc     dptr
1CA3 E0        5950            movx    a,@dptr
1CA4 FD        5951            mov     r5,a
1CA5 A3        5952            inc     dptr
1CA6 E0        5953            movx    a,@dptr
1CA7 FA        5954            mov     r2,a
1CA8 A3        5955            inc     dptr
1CA9 E0        5956            movx    a,@dptr
1CAA FB        5957            mov     r3,a
1CAB C000      5958            push    ar0
1CAD C001      5959            push    ar1
1CAF C088      5960            push    _Joystick_Control_sloc3_1_0
1CB1 C089      5961            push    (_Joystick_Control_sloc3_1_0 + 1)
1CB3 C08A      5962            push    (_Joystick_Control_sloc3_1_0 + 2)
1CB5 C08B      5963            push    (_Joystick_Control_sloc3_1_0 + 3)
1CB7 8C82      5964            mov     dpl,r4
1CB9 8D83      5965            mov     dph,r5
1CBB 8AF0      5966            mov     b,r2
1CBD EB        5967            mov     a,r3
1CBE 120000    5968            lcall   ___fssub
1CC1 AA82      5969            mov     r2,dpl
1CC3 AB83      5970            mov     r3,dph
1CC5 ACF0      5971            mov     r4,b
1CC7 FD        5972            mov     r5,a
1CC8 E581      5973            mov     a,sp
1CCA 24FC      5974            add     a,#0xfc
1CCC F581      5975            mov     sp,a
1CCE D001      5976            pop     ar1
1CD0 D000      5977            pop     ar0
1CD2 9053D0    5978            mov     dptr,#_curr_angle
1CD5 EA        5979            mov     a,r2
1CD6 F0        5980            movx    @dptr,a
1CD7 A3        5981            inc     dptr
1CD8 EB        5982            mov     a,r3
1CD9 F0        5983            movx    @dptr,a
1CDA A3        5984            inc     dptr
1CDB EC        5985            mov     a,r4
1CDC F0        5986            movx    @dptr,a
1CDD A3        5987            inc     dptr
1CDE ED        5988            mov     a,r5
1CDF F0        5989            movx    @dptr,a
1CE0           5990   ;        main.c:1253: return curr_angle; 
1CE0 D005      5991            pop     ar5
1CE2 D004      5992            pop     ar4
1CE4           5993   ;        main.c:1184: curr_angle -= angle_diff * 1.4; // TUNE THIS
1CE4           5994   L041009?:
1CE4           5995   ;        main.c:1186: if (curr_angle > 360.0) curr_angle -= 360.0; 
1CE4 9053D0    5996            mov     dptr,#_curr_angle
1CE7 E0        5997            movx    a,@dptr
1CE8 F588      5998            mov     _Joystick_Control_sloc3_1_0,a
1CEA A3        5999            inc     dptr
1CEB E0        6000            movx    a,@dptr
1CEC F589      6001            mov     (_Joystick_Control_sloc3_1_0 + 1),a
1CEE A3        6002            inc     dptr
1CEF E0        6003            movx    a,@dptr
1CF0 F58A      6004            mov     (_Joystick_Control_sloc3_1_0 + 2),a
1CF2 A3        6005            inc     dptr
1CF3 E0        6006            movx    a,@dptr
1CF4 F58B      6007            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1CF6 C004      6008            push    ar4
1CF8 C005      6009            push    ar5
1CFA C000      6010            push    ar0
1CFC C001      6011            push    ar1
1CFE E4        6012            clr     a
1CFF C0E0      6013            push    acc
1D01 C0E0      6014            push    acc
1D03 74B4      6015            mov     a,#0xB4
1D05 C0E0      6016            push    acc
1D07 7443      6017            mov     a,#0x43
1D09 C0E0      6018            push    acc
1D0B 858882    6019            mov     dpl,_Joystick_Control_sloc3_1_0
1D0E 858983    6020            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
1D11 858AF0    6021            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
1D14 E58B      6022            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
1D16 120000    6023            lcall   ___fsgt
1D19 AA82      6024            mov     r2,dpl
1D1B E581      6025            mov     a,sp
1D1D 24FC      6026            add     a,#0xfc
1D1F F581      6027            mov     sp,a
1D21 D001      6028            pop     ar1
1D23 D000      6029            pop     ar0
1D25 D005      6030            pop     ar5
1D27 D004      6031            pop     ar4
1D29 EA        6032            mov     a,r2
1D2A 6000      6033            jz      L041011?
1D2C C004      6034            push    ar4
1D2E C005      6035            push    ar5
1D30 C000      6036            push    ar0
1D32 C001      6037            push    ar1
1D34 E4        6038            clr     a
1D35 C0E0      6039            push    acc
1D37 C0E0      6040            push    acc
1D39 74B4      6041            mov     a,#0xB4
1D3B C0E0      6042            push    acc
1D3D 7443      6043            mov     a,#0x43
1D3F C0E0      6044            push    acc
1D41 858882    6045            mov     dpl,_Joystick_Control_sloc3_1_0
1D44 858983    6046            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
1D47 858AF0    6047            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
1D4A E58B      6048            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
1D4C 120000    6049            lcall   ___fssub
1D4F AA82      6050            mov     r2,dpl
1D51 AB83      6051            mov     r3,dph
1D53 AEF0      6052            mov     r6,b
1D55 FF        6053            mov     r7,a
1D56 E581      6054            mov     a,sp
1D58 24FC      6055            add     a,#0xfc
1D5A F581      6056            mov     sp,a
1D5C D001      6057            pop     ar1
1D5E D000      6058            pop     ar0
1D60 D005      6059            pop     ar5
1D62 D004      6060            pop     ar4
1D64 9053D0    6061            mov     dptr,#_curr_angle
1D67 EA        6062            mov     a,r2
1D68 F0        6063            movx    @dptr,a
1D69 A3        6064            inc     dptr
1D6A EB        6065            mov     a,r3
1D6B F0        6066            movx    @dptr,a
1D6C A3        6067            inc     dptr
1D6D EE        6068            mov     a,r6
1D6E F0        6069            movx    @dptr,a
1D6F A3        6070            inc     dptr
1D70 EF        6071            mov     a,r7
1D71 F0        6072            movx    @dptr,a
1D72           6073   L041011?:
1D72           6074   ;        main.c:1187: if (curr_angle < 0.0) curr_angle += 360.0; 
1D72 9053D0    6075            mov     dptr,#_curr_angle
1D75 E0        6076            movx    a,@dptr
1D76 F588      6077            mov     _Joystick_Control_sloc3_1_0,a
1D78 A3        6078            inc     dptr
1D79 E0        6079            movx    a,@dptr
1D7A F589      6080            mov     (_Joystick_Control_sloc3_1_0 + 1),a
1D7C A3        6081            inc     dptr
1D7D E0        6082            movx    a,@dptr
1D7E F58A      6083            mov     (_Joystick_Control_sloc3_1_0 + 2),a
1D80 A3        6084            inc     dptr
1D81 E0        6085            movx    a,@dptr
1D82 F58B      6086            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1D84 C004      6087            push    ar4
1D86 C005      6088            push    ar5
1D88 C000      6089            push    ar0
1D8A C001      6090            push    ar1
1D8C E4        6091            clr     a
1D8D C0E0      6092            push    acc
1D8F C0E0      6093            push    acc
1D91 C0E0      6094            push    acc
1D93 C0E0      6095            push    acc
1D95 858882    6096            mov     dpl,_Joystick_Control_sloc3_1_0
1D98 858983    6097            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
1D9B 858AF0    6098            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
1D9E E58B      6099            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
1DA0 120000    6100            lcall   ___fslt
1DA3 AA82      6101            mov     r2,dpl
1DA5 E581      6102            mov     a,sp
1DA7 24FC      6103            add     a,#0xfc
1DA9 F581      6104            mov     sp,a
1DAB D001      6105            pop     ar1
1DAD D000      6106            pop     ar0
1DAF D005      6107            pop     ar5
1DB1 D004      6108            pop     ar4
1DB3 EA        6109            mov     a,r2
1DB4 6000      6110            jz      L041015?
1DB6 C004      6111            push    ar4
1DB8 C005      6112            push    ar5
1DBA C000      6113            push    ar0
1DBC C001      6114            push    ar1
1DBE E4        6115            clr     a
1DBF C0E0      6116            push    acc
1DC1 C0E0      6117            push    acc
1DC3 74B4      6118            mov     a,#0xB4
1DC5 C0E0      6119            push    acc
1DC7 7443      6120            mov     a,#0x43
1DC9 C0E0      6121            push    acc
1DCB 858882    6122            mov     dpl,_Joystick_Control_sloc3_1_0
1DCE 858983    6123            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
1DD1 858AF0    6124            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
1DD4 E58B      6125            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
1DD6 120000    6126            lcall   ___fsadd
1DD9 AA82      6127            mov     r2,dpl
1DDB AB83      6128            mov     r3,dph
1DDD AEF0      6129            mov     r6,b
1DDF FF        6130            mov     r7,a
1DE0 E581      6131            mov     a,sp
1DE2 24FC      6132            add     a,#0xfc
1DE4 F581      6133            mov     sp,a
1DE6 D001      6134            pop     ar1
1DE8 D000      6135            pop     ar0
1DEA D005      6136            pop     ar5
1DEC D004      6137            pop     ar4
1DEE 9053D0    6138            mov     dptr,#_curr_angle
1DF1 EA        6139            mov     a,r2
1DF2 F0        6140            movx    @dptr,a
1DF3 A3        6141            inc     dptr
1DF4 EB        6142            mov     a,r3
1DF5 F0        6143            movx    @dptr,a
1DF6 A3        6144            inc     dptr
1DF7 EE        6145            mov     a,r6
1DF8 F0        6146            movx    @dptr,a
1DF9 A3        6147            inc     dptr
1DFA EF        6148            mov     a,r7
1DFB F0        6149            movx    @dptr,a
1DFC           6150   L041015?:
1DFC           6151   ;        main.c:1189: if ((vx_error>5)&&(vy_error)>5){
1DFC E538      6152            mov     a,_Joystick_Control_sloc2_1_0
1DFE 7000      6153            jnz     L041070?
1E00 020000    6154            ljmp    L041040?
1E03           6155   L041070?:
1E03 E590      6156            mov     a,_Joystick_Control_sloc0_1_0
1E05 7000      6157            jnz     L041071?
1E07 020000    6158            ljmp    L041040?
1E0A           6159   L041071?:
1E0A           6160   ;        main.c:1191: angle_diff = fabsf(raw_angle - last_raw_angle);
1E0A 905390    6161            mov     dptr,#_raw_angle
1E0D E0        6162            movx    a,@dptr
1E0E FA        6163            mov     r2,a
1E0F A3        6164            inc     dptr
1E10 E0        6165            movx    a,@dptr
1E11 FB        6166            mov     r3,a
1E12 A3        6167            inc     dptr
1E13 E0        6168            movx    a,@dptr
1E14 FE        6169            mov     r6,a
1E15 A3        6170            inc     dptr
1E16 E0        6171            movx    a,@dptr
1E17 FF        6172            mov     r7,a
1E18 C004      6173            push    ar4
1E1A C005      6174            push    ar5
1E1C C000      6175            push    ar0
1E1E C001      6176            push    ar1
1E20 905350    6177            mov     dptr,#_last_raw_angle
1E23 E0        6178            movx    a,@dptr
1E24 C0E0      6179            push    acc
1E26 A3        6180            inc     dptr
1E27 E0        6181            movx    a,@dptr
1E28 C0E0      6182            push    acc
1E2A A3        6183            inc     dptr
1E2B E0        6184            movx    a,@dptr
1E2C C0E0      6185            push    acc
1E2E A3        6186            inc     dptr
1E2F E0        6187            movx    a,@dptr
1E30 C0E0      6188            push    acc
1E32 8A82      6189            mov     dpl,r2
1E34 8B83      6190            mov     dph,r3
1E36 8EF0      6191            mov     b,r6
1E38 EF        6192            mov     a,r7
1E39 120000    6193            lcall   ___fssub
1E3C AA82      6194            mov     r2,dpl
1E3E AB83      6195            mov     r3,dph
1E40 AEF0      6196            mov     r6,b
1E42 FF        6197            mov     r7,a
1E43 E581      6198            mov     a,sp
1E45 24FC      6199            add     a,#0xfc
1E47 F581      6200            mov     sp,a
1E49 8A82      6201            mov     dpl,r2
1E4B 8B83      6202            mov     dph,r3
1E4D 8EF0      6203            mov     b,r6
1E4F EF        6204            mov     a,r7
1E50 120000    6205            lcall   _fabsf
1E53 858228    6206            mov     _Joystick_Control_sloc5_1_0,dpl
1E56 858329    6207            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1E59 85F02A    6208            mov     (_Joystick_Control_sloc5_1_0 + 2),b
1E5C F52B      6209            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1E5E D001      6210            pop     ar1
1E60 D000      6211            pop     ar0
1E62 D005      6212            pop     ar5
1E64 D004      6213            pop     ar4
1E66 905310    6214            mov     dptr,#_angle_diff
1E69 E528      6215            mov     a,_Joystick_Control_sloc5_1_0
1E6B F0        6216            movx    @dptr,a
1E6C A3        6217            inc     dptr
1E6D E529      6218            mov     a,(_Joystick_Control_sloc5_1_0 + 1)
1E6F F0        6219            movx    @dptr,a
1E70 A3        6220            inc     dptr
1E71 E52A      6221            mov     a,(_Joystick_Control_sloc5_1_0 + 2)
1E73 F0        6222            movx    @dptr,a
1E74 A3        6223            inc     dptr
1E75 E52B      6224            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1E77 F0        6225            movx    @dptr,a
1E78           6226   ;        main.c:1192: if (vy_err>0){
1E78 90D9A8    6227            mov     dptr,#_Joystick_Control_vy_err_1_225
1E7B E0        6228            movx    a,@dptr
1E7C F588      6229            mov     _Joystick_Control_sloc3_1_0,a
1E7E A3        6230            inc     dptr
1E7F E0        6231            movx    a,@dptr
1E80 F589      6232            mov     (_Joystick_Control_sloc3_1_0 + 1),a
1E82 C3        6233            clr     c
1E83 E4        6234            clr     a
1E84 9588      6235            subb    a,_Joystick_Control_sloc3_1_0
1E86 E4        6236            clr     a
1E87 6480      6237            xrl     a,#0x80
1E89 8589F0    6238            mov     b,(_Joystick_Control_sloc3_1_0 + 1)
1E8C 63F080    6239            xrl     b,#0x80
1E8F 95F0      6240            subb    a,b
1E91 4000      6241            jc      L041072?
1E93 020000    6242            ljmp    L041027?
1E96           6243   L041072?:
1E96           6244   ;        main.c:1193: L_motor_dir = 0; 
1E96 9056E0    6245            mov     dptr,#_L_motor_dir
1E99           6246   ;        main.c:1194: R_motor_dir = 0; 
1E99 E4        6247            clr     a
1E9A F0        6248            movx    @dptr,a
1E9B 9056A0    6249            mov     dptr,#_R_motor_dir
1E9E F0        6250            movx    @dptr,a
1E9F           6251   ;        main.c:1196: if (vx_err>0){
1E9F 90D958    6252            mov     dptr,#_Joystick_Control_vx_err_1_225
1EA2 E0        6253            movx    a,@dptr
1EA3 FA        6254            mov     r2,a
1EA4 A3        6255            inc     dptr
1EA5 E0        6256            movx    a,@dptr
1EA6 FB        6257            mov     r3,a
1EA7 C3        6258            clr     c
1EA8 E4        6259            clr     a
1EA9 9A        6260            subb    a,r2
1EAA E4        6261            clr     a
1EAB 6480      6262            xrl     a,#0x80
1EAD 8BF0      6263            mov     b,r3
1EAF 63F080    6264            xrl     b,#0x80
1EB2 95F0      6265            subb    a,b
1EB4 4000      6266            jc      L041073?
1EB6 020000    6267            ljmp    L041024?
1EB9           6268   L041073?:
1EB9           6269   ;        main.c:1198: if (vy*100<=vy_thres*100/2){
1EB9 8C00      6270            mov     __mulint_PARM_2,r4
1EBB 8D01      6271            mov     (__mulint_PARM_2 + 1),r5
1EBD 900064    6272            mov     dptr,#0x0064
1EC0 C004      6273            push    ar4
1EC2 C005      6274            push    ar5
1EC4 C000      6275            push    ar0
1EC6 C001      6276            push    ar1
1EC8 120000    6277            lcall   __mulint
1ECB AA82      6278            mov     r2,dpl
1ECD AB83      6279            mov     r3,dph
1ECF D001      6280            pop     ar1
1ED1 D000      6281            pop     ar0
1ED3 D005      6282            pop     ar5
1ED5 D004      6283            pop     ar4
1ED7 9055A0    6284            mov     dptr,#_vy_thres
1EDA E0        6285            movx    a,@dptr
1EDB F500      6286            mov     __mulint_PARM_2,a
1EDD A3        6287            inc     dptr
1EDE E0        6288            movx    a,@dptr
1EDF F501      6289            mov     (__mulint_PARM_2 + 1),a
1EE1 900064    6290            mov     dptr,#0x0064
1EE4 C002      6291            push    ar2
1EE6 C003      6292            push    ar3
1EE8 C004      6293            push    ar4
1EEA C005      6294            push    ar5
1EEC C000      6295            push    ar0
1EEE C001      6296            push    ar1
1EF0 120000    6297            lcall   __mulint
1EF3 AE82      6298            mov     r6,dpl
1EF5 AF83      6299            mov     r7,dph
1EF7 750002    6300            mov     __divsint_PARM_2,#0x02
1EFA E4        6301            clr     a
1EFB F501      6302            mov     (__divsint_PARM_2 + 1),a
1EFD 8E82      6303            mov     dpl,r6
1EFF 8F83      6304            mov     dph,r7
1F01 120000    6305            lcall   __divsint
1F04 AE82      6306            mov     r6,dpl
1F06 AF83      6307            mov     r7,dph
1F08 D001      6308            pop     ar1
1F0A D000      6309            pop     ar0
1F0C D005      6310            pop     ar5
1F0E D004      6311            pop     ar4
1F10 D003      6312            pop     ar3
1F12 D002      6313            pop     ar2
1F14 C3        6314            clr     c
1F15 EE        6315            mov     a,r6
1F16 9A        6316            subb    a,r2
1F17 EF        6317            mov     a,r7
1F18 6480      6318            xrl     a,#0x80
1F1A 8BF0      6319            mov     b,r3
1F1C 63F080    6320            xrl     b,#0x80
1F1F 95F0      6321            subb    a,b
1F21 5000      6322            jnc     L041074?
1F23 020000    6323            ljmp    L041018?
1F26           6324   L041074?:
1F26           6325   ;        main.c:1199: pwm_left = vy_error; 
1F26 90D908    6326            mov     dptr,#_Joystick_Control_vy_error_1_225
1F29 E0        6327            movx    a,@dptr
1F2A F5E8      6328            mov     _Joystick_Control_sloc1_1_0,a
1F2C A3        6329            inc     dptr
1F2D E0        6330            movx    a,@dptr
1F2E F5E9      6331            mov     (_Joystick_Control_sloc1_1_0 + 1),a
1F30 905760    6332            mov     dptr,#_pwm_left
1F33 E5E8      6333            mov     a,_Joystick_Control_sloc1_1_0
1F35 F0        6334            movx    @dptr,a
1F36           6335   ;        main.c:1200: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
1F36 905410    6336            mov     dptr,#_pwm_corr
1F39 E0        6337            movx    a,@dptr
1F3A F5D8      6338            mov     _Joystick_Control_sloc4_1_0,a
1F3C A3        6339            inc     dptr
1F3D E0        6340            movx    a,@dptr
1F3E F5D9      6341            mov     (_Joystick_Control_sloc4_1_0 + 1),a
1F40 A3        6342            inc     dptr
1F41 E0        6343            movx    a,@dptr
1F42 F5DA      6344            mov     (_Joystick_Control_sloc4_1_0 + 2),a
1F44 A3        6345            inc     dptr
1F45 E0        6346            movx    a,@dptr
1F46 F5DB      6347            mov     (_Joystick_Control_sloc4_1_0 + 3),a
1F48 85E882    6348            mov     dpl,_Joystick_Control_sloc1_1_0
1F4B 85E983    6349            mov     dph,(_Joystick_Control_sloc1_1_0 + 1)
1F4E C004      6350            push    ar4
1F50 C005      6351            push    ar5
1F52 C000      6352            push    ar0
1F54 C001      6353            push    ar1
1F56 120000    6354            lcall   ___sint2fs
1F59 AA82      6355            mov     r2,dpl
1F5B AB83      6356            mov     r3,dph
1F5D AEF0      6357            mov     r6,b
1F5F FF        6358            mov     r7,a
1F60 C002      6359            push    ar2
1F62 C003      6360            push    ar3
1F64 C006      6361            push    ar6
1F66 C007      6362            push    ar7
1F68 85D882    6363            mov     dpl,_Joystick_Control_sloc4_1_0
1F6B 85D983    6364            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
1F6E 85DAF0    6365            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
1F71 E5DB      6366            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
1F73 120000    6367            lcall   ___fsmul
1F76 AA82      6368            mov     r2,dpl
1F78 AB83      6369            mov     r3,dph
1F7A AEF0      6370            mov     r6,b
1F7C FF        6371            mov     r7,a
1F7D E581      6372            mov     a,sp
1F7F 24FC      6373            add     a,#0xfc
1F81 F581      6374            mov     sp,a
1F83 C002      6375            push    ar2
1F85 C003      6376            push    ar3
1F87 C006      6377            push    ar6
1F89 C007      6378            push    ar7
1F8B 900000    6379            mov     dptr,#0x0000
1F8E 75F0C8    6380            mov     b,#0xC8
1F91 7442      6381            mov     a,#0x42
1F93 120000    6382            lcall   ___fsmul
1F96 8582D8    6383            mov     _Joystick_Control_sloc4_1_0,dpl
1F99 8583D9    6384            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
1F9C 85F0DA    6385            mov     (_Joystick_Control_sloc4_1_0 + 2),b
1F9F F5DB      6386            mov     (_Joystick_Control_sloc4_1_0 + 3),a
1FA1 E581      6387            mov     a,sp
1FA3 24FC      6388            add     a,#0xfc
1FA5 F581      6389            mov     sp,a
1FA7 D001      6390            pop     ar1
1FA9 D000      6391            pop     ar0
1FAB E5E8      6392            mov     a,_Joystick_Control_sloc1_1_0
1FAD 28        6393            add     a,r0
1FAE F582      6394            mov     dpl,a
1FB0 E5E9      6395            mov     a,(_Joystick_Control_sloc1_1_0 + 1)
1FB2 39        6396            addc    a,r1
1FB3 F583      6397            mov     dph,a
1FB5 C000      6398            push    ar0
1FB7 C001      6399            push    ar1
1FB9 120000    6400            lcall   ___sint2fs
1FBC AA82      6401            mov     r2,dpl
1FBE AB83      6402            mov     r3,dph
1FC0 AEF0      6403            mov     r6,b
1FC2 FF        6404            mov     r7,a
1FC3 C002      6405            push    ar2
1FC5 C003      6406            push    ar3
1FC7 C006      6407            push    ar6
1FC9 C007      6408            push    ar7
1FCB 85D882    6409            mov     dpl,_Joystick_Control_sloc4_1_0
1FCE 85D983    6410            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
1FD1 85DAF0    6411            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
1FD4 E5DB      6412            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
1FD6 120000    6413            lcall   ___fsdiv
1FD9 AA82      6414            mov     r2,dpl
1FDB AB83      6415            mov     r3,dph
1FDD AEF0      6416            mov     r6,b
1FDF FF        6417            mov     r7,a
1FE0 E581      6418            mov     a,sp
1FE2 24FC      6419            add     a,#0xfc
1FE4 F581      6420            mov     sp,a
1FE6 8A82      6421            mov     dpl,r2
1FE8 8B83      6422            mov     dph,r3
1FEA 8EF0      6423            mov     b,r6
1FEC EF        6424            mov     a,r7
1FED 120000    6425            lcall   ___fs2uchar
1FF0 E582      6426            mov     a,dpl
1FF2 D001      6427            pop     ar1
1FF4 D000      6428            pop     ar0
1FF6 D005      6429            pop     ar5
1FF8 D004      6430            pop     ar4
1FFA 905720    6431            mov     dptr,#_pwm_right
1FFD F0        6432            movx    @dptr,a
1FFE 020000    6433            ljmp    L041019?
2001           6434   L041018?:
2001           6435   ;        main.c:1203: pwm_left = vx_error; 
2001 905760    6436            mov     dptr,#_pwm_left
2004 E8        6437            mov     a,r0
2005 F0        6438            movx    @dptr,a
2006           6439   ;        main.c:1204: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
2006 905410    6440            mov     dptr,#_pwm_corr
2009 E0        6441            movx    a,@dptr
200A F5D8      6442            mov     _Joystick_Control_sloc4_1_0,a
200C A3        6443            inc     dptr
200D E0        6444            movx    a,@dptr
200E F5D9      6445            mov     (_Joystick_Control_sloc4_1_0 + 1),a
2010 A3        6446            inc     dptr
2011 E0        6447            movx    a,@dptr
2012 F5DA      6448            mov     (_Joystick_Control_sloc4_1_0 + 2),a
2014 A3        6449            inc     dptr
2015 E0        6450            movx    a,@dptr
2016 F5DB      6451            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2018 8882      6452            mov     dpl,r0
201A 8983      6453            mov     dph,r1
201C C004      6454            push    ar4
201E C005      6455            push    ar5
2020 C000      6456            push    ar0
2022 C001      6457            push    ar1
2024 120000    6458            lcall   ___sint2fs
2027 AA82      6459            mov     r2,dpl
2029 AB83      6460            mov     r3,dph
202B AEF0      6461            mov     r6,b
202D FF        6462            mov     r7,a
202E C002      6463            push    ar2
2030 C003      6464            push    ar3
2032 C006      6465            push    ar6
2034 C007      6466            push    ar7
2036 85D882    6467            mov     dpl,_Joystick_Control_sloc4_1_0
2039 85D983    6468            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
203C 85DAF0    6469            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
203F E5DB      6470            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
2041 120000    6471            lcall   ___fsmul
2044 AA82      6472            mov     r2,dpl
2046 AB83      6473            mov     r3,dph
2048 AEF0      6474            mov     r6,b
204A FF        6475            mov     r7,a
204B E581      6476            mov     a,sp
204D 24FC      6477            add     a,#0xfc
204F F581      6478            mov     sp,a
2051 C002      6479            push    ar2
2053 C003      6480            push    ar3
2055 C006      6481            push    ar6
2057 C007      6482            push    ar7
2059 900000    6483            mov     dptr,#0x0000
205C 75F0C8    6484            mov     b,#0xC8
205F 7442      6485            mov     a,#0x42
2061 120000    6486            lcall   ___fsmul
2064 8582D8    6487            mov     _Joystick_Control_sloc4_1_0,dpl
2067 8583D9    6488            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
206A 85F0DA    6489            mov     (_Joystick_Control_sloc4_1_0 + 2),b
206D F5DB      6490            mov     (_Joystick_Control_sloc4_1_0 + 3),a
206F E581      6491            mov     a,sp
2071 24FC      6492            add     a,#0xfc
2073 F581      6493            mov     sp,a
2075 D001      6494            pop     ar1
2077 D000      6495            pop     ar0
2079 90D908    6496            mov     dptr,#_Joystick_Control_vy_error_1_225
207C E0        6497            movx    a,@dptr
207D FA        6498            mov     r2,a
207E A3        6499            inc     dptr
207F E0        6500            movx    a,@dptr
2080 FB        6501            mov     r3,a
2081 EA        6502            mov     a,r2
2082 28        6503            add     a,r0
2083 F582      6504            mov     dpl,a
2085 EB        6505            mov     a,r3
2086 39        6506            addc    a,r1
2087 F583      6507            mov     dph,a
2089 C000      6508            push    ar0
208B C001      6509            push    ar1
208D 120000    6510            lcall   ___sint2fs
2090 AA82      6511            mov     r2,dpl
2092 AB83      6512            mov     r3,dph
2094 AEF0      6513            mov     r6,b
2096 FF        6514            mov     r7,a
2097 C002      6515            push    ar2
2099 C003      6516            push    ar3
209B C006      6517            push    ar6
209D C007      6518            push    ar7
209F 85D882    6519            mov     dpl,_Joystick_Control_sloc4_1_0
20A2 85D983    6520            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
20A5 85DAF0    6521            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
20A8 E5DB      6522            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
20AA 120000    6523            lcall   ___fsdiv
20AD AA82      6524            mov     r2,dpl
20AF AB83      6525            mov     r3,dph
20B1 AEF0      6526            mov     r6,b
20B3 FF        6527            mov     r7,a
20B4 E581      6528            mov     a,sp
20B6 24FC      6529            add     a,#0xfc
20B8 F581      6530            mov     sp,a
20BA 8A82      6531            mov     dpl,r2
20BC 8B83      6532            mov     dph,r3
20BE 8EF0      6533            mov     b,r6
20C0 EF        6534            mov     a,r7
20C1 120000    6535            lcall   ___fs2uchar
20C4 E582      6536            mov     a,dpl
20C6 D001      6537            pop     ar1
20C8 D000      6538            pop     ar0
20CA D005      6539            pop     ar5
20CC D004      6540            pop     ar4
20CE 905720    6541            mov     dptr,#_pwm_right
20D1 F0        6542            movx    @dptr,a
20D2           6543   ;        main.c:1253: return curr_angle; 
20D2           6544   ;        main.c:1204: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
20D2           6545   L041019?:
20D2           6546   ;        main.c:1206: curr_angle += angle_diff * 1.5; // TUNE THIS 
20D2 C004      6547            push    ar4
20D4 C005      6548            push    ar5
20D6 C004      6549            push    ar4
20D8 C005      6550            push    ar5
20DA C000      6551            push    ar0
20DC C001      6552            push    ar1
20DE C028      6553            push    _Joystick_Control_sloc5_1_0
20E0 C029      6554            push    (_Joystick_Control_sloc5_1_0 + 1)
20E2 C02A      6555            push    (_Joystick_Control_sloc5_1_0 + 2)
20E4 C02B      6556            push    (_Joystick_Control_sloc5_1_0 + 3)
20E6 900000    6557            mov     dptr,#0x0000
20E9 75F0C0    6558            mov     b,#0xC0
20EC 743F      6559            mov     a,#0x3F
20EE 120000    6560            lcall   ___fsmul
20F1 8582D8    6561            mov     _Joystick_Control_sloc4_1_0,dpl
20F4 8583D9    6562            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
20F7 85F0DA    6563            mov     (_Joystick_Control_sloc4_1_0 + 2),b
20FA F5DB      6564            mov     (_Joystick_Control_sloc4_1_0 + 3),a
20FC E581      6565            mov     a,sp
20FE 24FC      6566            add     a,#0xfc
2100 F581      6567            mov     sp,a
2102 D001      6568            pop     ar1
2104 D000      6569            pop     ar0
2106 D005      6570            pop     ar5
2108 D004      6571            pop     ar4
210A 9053D0    6572            mov     dptr,#_curr_angle
210D E0        6573            movx    a,@dptr
210E FE        6574            mov     r6,a
210F A3        6575            inc     dptr
2110 E0        6576            movx    a,@dptr
2111 FF        6577            mov     r7,a
2112 A3        6578            inc     dptr
2113 E0        6579            movx    a,@dptr
2114 FA        6580            mov     r2,a
2115 A3        6581            inc     dptr
2116 E0        6582            movx    a,@dptr
2117 FB        6583            mov     r3,a
2118 C000      6584            push    ar0
211A C001      6585            push    ar1
211C C0D8      6586            push    _Joystick_Control_sloc4_1_0
211E C0D9      6587            push    (_Joystick_Control_sloc4_1_0 + 1)
2120 C0DA      6588            push    (_Joystick_Control_sloc4_1_0 + 2)
2122 C0DB      6589            push    (_Joystick_Control_sloc4_1_0 + 3)
2124 8E82      6590            mov     dpl,r6
2126 8F83      6591            mov     dph,r7
2128 8AF0      6592            mov     b,r2
212A EB        6593            mov     a,r3
212B 120000    6594            lcall   ___fsadd
212E AA82      6595            mov     r2,dpl
2130 AB83      6596            mov     r3,dph
2132 ACF0      6597            mov     r4,b
2134 FD        6598            mov     r5,a
2135 E581      6599            mov     a,sp
2137 24FC      6600            add     a,#0xfc
2139 F581      6601            mov     sp,a
213B D001      6602            pop     ar1
213D D000      6603            pop     ar0
213F 9053D0    6604            mov     dptr,#_curr_angle
2142 EA        6605            mov     a,r2
2143 F0        6606            movx    @dptr,a
2144 A3        6607            inc     dptr
2145 EB        6608            mov     a,r3
2146 F0        6609            movx    @dptr,a
2147 A3        6610            inc     dptr
2148 EC        6611            mov     a,r4
2149 F0        6612            movx    @dptr,a
214A A3        6613            inc     dptr
214B ED        6614            mov     a,r5
214C F0        6615            movx    @dptr,a
214D D005      6616            pop     ar5
214F D004      6617            pop     ar4
2151 020000    6618            ljmp    L041027?
2154           6619   L041024?:
2154           6620   ;        main.c:1210: if (vy*100<=vy_thres*100/2){
2154 8C00      6621            mov     __mulint_PARM_2,r4
2156 8D01      6622            mov     (__mulint_PARM_2 + 1),r5
2158 900064    6623            mov     dptr,#0x0064
215B C004      6624            push    ar4
215D C005      6625            push    ar5
215F C000      6626            push    ar0
2161 C001      6627            push    ar1
2163 120000    6628            lcall   __mulint
2166 AA82      6629            mov     r2,dpl
2168 AB83      6630            mov     r3,dph
216A D001      6631            pop     ar1
216C D000      6632            pop     ar0
216E D005      6633            pop     ar5
2170 D004      6634            pop     ar4
2172 9055A0    6635            mov     dptr,#_vy_thres
2175 E0        6636            movx    a,@dptr
2176 F500      6637            mov     __mulint_PARM_2,a
2178 A3        6638            inc     dptr
2179 E0        6639            movx    a,@dptr
217A F501      6640            mov     (__mulint_PARM_2 + 1),a
217C 900064    6641            mov     dptr,#0x0064
217F C002      6642            push    ar2
2181 C003      6643            push    ar3
2183 C004      6644            push    ar4
2185 C005      6645            push    ar5
2187 C000      6646            push    ar0
2189 C001      6647            push    ar1
218B 120000    6648            lcall   __mulint
218E AE82      6649            mov     r6,dpl
2190 AF83      6650            mov     r7,dph
2192 750002    6651            mov     __divsint_PARM_2,#0x02
2195 E4        6652            clr     a
2196 F501      6653            mov     (__divsint_PARM_2 + 1),a
2198 8E82      6654            mov     dpl,r6
219A 8F83      6655            mov     dph,r7
219C 120000    6656            lcall   __divsint
219F AE82      6657            mov     r6,dpl
21A1 AF83      6658            mov     r7,dph
21A3 D001      6659            pop     ar1
21A5 D000      6660            pop     ar0
21A7 D005      6661            pop     ar5
21A9 D004      6662            pop     ar4
21AB D003      6663            pop     ar3
21AD D002      6664            pop     ar2
21AF C3        6665            clr     c
21B0 EE        6666            mov     a,r6
21B1 9A        6667            subb    a,r2
21B2 EF        6668            mov     a,r7
21B3 6480      6669            xrl     a,#0x80
21B5 8BF0      6670            mov     b,r3
21B7 63F080    6671            xrl     b,#0x80
21BA 95F0      6672            subb    a,b
21BC 5000      6673            jnc     L041075?
21BE 020000    6674            ljmp    L041021?
21C1           6675   L041075?:
21C1           6676   ;        main.c:1211: pwm_left = vy_error*100/(vx_error+vy_error);
21C1 90D908    6677            mov     dptr,#_Joystick_Control_vy_error_1_225
21C4 E0        6678            movx    a,@dptr
21C5 FA        6679            mov     r2,a
21C6 A3        6680            inc     dptr
21C7 E0        6681            movx    a,@dptr
21C8 FB        6682            mov     r3,a
21C9 8A00      6683            mov     __mulint_PARM_2,r2
21CB 8B01      6684            mov     (__mulint_PARM_2 + 1),r3
21CD 900064    6685            mov     dptr,#0x0064
21D0 C002      6686            push    ar2
21D2 C003      6687            push    ar3
21D4 C004      6688            push    ar4
21D6 C005      6689            push    ar5
21D8 C000      6690            push    ar0
21DA C001      6691            push    ar1
21DC 120000    6692            lcall   __mulint
21DF AE82      6693            mov     r6,dpl
21E1 AF83      6694            mov     r7,dph
21E3 D001      6695            pop     ar1
21E5 D000      6696            pop     ar0
21E7 D005      6697            pop     ar5
21E9 D004      6698            pop     ar4
21EB D003      6699            pop     ar3
21ED D002      6700            pop     ar2
21EF EA        6701            mov     a,r2
21F0 28        6702            add     a,r0
21F1 F500      6703            mov     __divsint_PARM_2,a
21F3 EB        6704            mov     a,r3
21F4 39        6705            addc    a,r1
21F5 F501      6706            mov     (__divsint_PARM_2 + 1),a
21F7 8E82      6707            mov     dpl,r6
21F9 8F83      6708            mov     dph,r7
21FB C002      6709            push    ar2
21FD C003      6710            push    ar3
21FF C004      6711            push    ar4
2201 C005      6712            push    ar5
2203 C000      6713            push    ar0
2205 C001      6714            push    ar1
2207 120000    6715            lcall   __divsint
220A AE82      6716            mov     r6,dpl
220C D001      6717            pop     ar1
220E D000      6718            pop     ar0
2210 D005      6719            pop     ar5
2212 D004      6720            pop     ar4
2214 D003      6721            pop     ar3
2216 D002      6722            pop     ar2
2218 905760    6723            mov     dptr,#_pwm_left
221B EE        6724            mov     a,r6
221C F0        6725            movx    @dptr,a
221D           6726   ;        main.c:1212: pwm_right = vy_error*pwm_corr; 
221D 8A82      6727            mov     dpl,r2
221F 8B83      6728            mov     dph,r3
2221 C004      6729            push    ar4
2223 C005      6730            push    ar5
2225 C000      6731            push    ar0
2227 C001      6732            push    ar1
2229 120000    6733            lcall   ___sint2fs
222C AA82      6734            mov     r2,dpl
222E AB83      6735            mov     r3,dph
2230 AEF0      6736            mov     r6,b
2232 FF        6737            mov     r7,a
2233 905410    6738            mov     dptr,#_pwm_corr
2236 E0        6739            movx    a,@dptr
2237 C0E0      6740            push    acc
2239 A3        6741            inc     dptr
223A E0        6742            movx    a,@dptr
223B C0E0      6743            push    acc
223D A3        6744            inc     dptr
223E E0        6745            movx    a,@dptr
223F C0E0      6746            push    acc
2241 A3        6747            inc     dptr
2242 E0        6748            movx    a,@dptr
2243 C0E0      6749            push    acc
2245 8A82      6750            mov     dpl,r2
2247 8B83      6751            mov     dph,r3
2249 8EF0      6752            mov     b,r6
224B EF        6753            mov     a,r7
224C 120000    6754            lcall   ___fsmul
224F AA82      6755            mov     r2,dpl
2251 AB83      6756            mov     r3,dph
2253 AEF0      6757            mov     r6,b
2255 FF        6758            mov     r7,a
2256 E581      6759            mov     a,sp
2258 24FC      6760            add     a,#0xfc
225A F581      6761            mov     sp,a
225C 8A82      6762            mov     dpl,r2
225E 8B83      6763            mov     dph,r3
2260 8EF0      6764            mov     b,r6
2262 EF        6765            mov     a,r7
2263 120000    6766            lcall   ___fs2uchar
2266 E582      6767            mov     a,dpl
2268 D001      6768            pop     ar1
226A D000      6769            pop     ar0
226C D005      6770            pop     ar5
226E D004      6771            pop     ar4
2270 905720    6772            mov     dptr,#_pwm_right
2273 F0        6773            movx    @dptr,a
2274 020000    6774            ljmp    L041022?
2277           6775   L041021?:
2277           6776   ;        main.c:1215: pwm_left = vx_error*100/(vx_error+vy_error);
2277 8800      6777            mov     __mulint_PARM_2,r0
2279 8901      6778            mov     (__mulint_PARM_2 + 1),r1
227B 900064    6779            mov     dptr,#0x0064
227E C004      6780            push    ar4
2280 C005      6781            push    ar5
2282 C000      6782            push    ar0
2284 C001      6783            push    ar1
2286 120000    6784            lcall   __mulint
2289 AA82      6785            mov     r2,dpl
228B AB83      6786            mov     r3,dph
228D D001      6787            pop     ar1
228F D000      6788            pop     ar0
2291 90D908    6789            mov     dptr,#_Joystick_Control_vy_error_1_225
2294 E0        6790            movx    a,@dptr
2295 FE        6791            mov     r6,a
2296 A3        6792            inc     dptr
2297 E0        6793            movx    a,@dptr
2298 FF        6794            mov     r7,a
2299 EE        6795            mov     a,r6
229A 28        6796            add     a,r0
229B F500      6797            mov     __divsint_PARM_2,a
229D EF        6798            mov     a,r7
229E 39        6799            addc    a,r1
229F F501      6800            mov     (__divsint_PARM_2 + 1),a
22A1 8A82      6801            mov     dpl,r2
22A3 8B83      6802            mov     dph,r3
22A5 C000      6803            push    ar0
22A7 C001      6804            push    ar1
22A9 120000    6805            lcall   __divsint
22AC AA82      6806            mov     r2,dpl
22AE D001      6807            pop     ar1
22B0 D000      6808            pop     ar0
22B2 905760    6809            mov     dptr,#_pwm_left
22B5 EA        6810            mov     a,r2
22B6 F0        6811            movx    @dptr,a
22B7           6812   ;        main.c:1216: pwm_right = vx_error*pwm_corr; 
22B7 8882      6813            mov     dpl,r0
22B9 8983      6814            mov     dph,r1
22BB C000      6815            push    ar0
22BD C001      6816            push    ar1
22BF 120000    6817            lcall   ___sint2fs
22C2 AA82      6818            mov     r2,dpl
22C4 AB83      6819            mov     r3,dph
22C6 AEF0      6820            mov     r6,b
22C8 FF        6821            mov     r7,a
22C9 905410    6822            mov     dptr,#_pwm_corr
22CC E0        6823            movx    a,@dptr
22CD C0E0      6824            push    acc
22CF A3        6825            inc     dptr
22D0 E0        6826            movx    a,@dptr
22D1 C0E0      6827            push    acc
22D3 A3        6828            inc     dptr
22D4 E0        6829            movx    a,@dptr
22D5 C0E0      6830            push    acc
22D7 A3        6831            inc     dptr
22D8 E0        6832            movx    a,@dptr
22D9 C0E0      6833            push    acc
22DB 8A82      6834            mov     dpl,r2
22DD 8B83      6835            mov     dph,r3
22DF 8EF0      6836            mov     b,r6
22E1 EF        6837            mov     a,r7
22E2 120000    6838            lcall   ___fsmul
22E5 AA82      6839            mov     r2,dpl
22E7 AB83      6840            mov     r3,dph
22E9 AEF0      6841            mov     r6,b
22EB FF        6842            mov     r7,a
22EC E581      6843            mov     a,sp
22EE 24FC      6844            add     a,#0xfc
22F0 F581      6845            mov     sp,a
22F2 8A82      6846            mov     dpl,r2
22F4 8B83      6847            mov     dph,r3
22F6 8EF0      6848            mov     b,r6
22F8 EF        6849            mov     a,r7
22F9 120000    6850            lcall   ___fs2uchar
22FC E582      6851            mov     a,dpl
22FE D001      6852            pop     ar1
2300 D000      6853            pop     ar0
2302 D005      6854            pop     ar5
2304 D004      6855            pop     ar4
2306 905720    6856            mov     dptr,#_pwm_right
2309 F0        6857            movx    @dptr,a
230A           6858   L041022?:
230A           6859   ;        main.c:1218: curr_angle -= angle_diff * 1.5; // TUNE THIS 
230A C004      6860            push    ar4
230C C005      6861            push    ar5
230E C004      6862            push    ar4
2310 C005      6863            push    ar5
2312 C000      6864            push    ar0
2314 C001      6865            push    ar1
2316 C028      6866            push    _Joystick_Control_sloc5_1_0
2318 C029      6867            push    (_Joystick_Control_sloc5_1_0 + 1)
231A C02A      6868            push    (_Joystick_Control_sloc5_1_0 + 2)
231C C02B      6869            push    (_Joystick_Control_sloc5_1_0 + 3)
231E 900000    6870            mov     dptr,#0x0000
2321 75F0C0    6871            mov     b,#0xC0
2324 743F      6872            mov     a,#0x3F
2326 120000    6873            lcall   ___fsmul
2329 8582D8    6874            mov     _Joystick_Control_sloc4_1_0,dpl
232C 8583D9    6875            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
232F 85F0DA    6876            mov     (_Joystick_Control_sloc4_1_0 + 2),b
2332 F5DB      6877            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2334 E581      6878            mov     a,sp
2336 24FC      6879            add     a,#0xfc
2338 F581      6880            mov     sp,a
233A D001      6881            pop     ar1
233C D000      6882            pop     ar0
233E D005      6883            pop     ar5
2340 D004      6884            pop     ar4
2342 9053D0    6885            mov     dptr,#_curr_angle
2345 E0        6886            movx    a,@dptr
2346 FC        6887            mov     r4,a
2347 A3        6888            inc     dptr
2348 E0        6889            movx    a,@dptr
2349 FD        6890            mov     r5,a
234A A3        6891            inc     dptr
234B E0        6892            movx    a,@dptr
234C FA        6893            mov     r2,a
234D A3        6894            inc     dptr
234E E0        6895            movx    a,@dptr
234F FB        6896            mov     r3,a
2350 C000      6897            push    ar0
2352 C001      6898            push    ar1
2354 C0D8      6899            push    _Joystick_Control_sloc4_1_0
2356 C0D9      6900            push    (_Joystick_Control_sloc4_1_0 + 1)
2358 C0DA      6901            push    (_Joystick_Control_sloc4_1_0 + 2)
235A C0DB      6902            push    (_Joystick_Control_sloc4_1_0 + 3)
235C 8C82      6903            mov     dpl,r4
235E 8D83      6904            mov     dph,r5
2360 8AF0      6905            mov     b,r2
2362 EB        6906            mov     a,r3
2363 120000    6907            lcall   ___fssub
2366 AA82      6908            mov     r2,dpl
2368 AB83      6909            mov     r3,dph
236A ACF0      6910            mov     r4,b
236C FD        6911            mov     r5,a
236D E581      6912            mov     a,sp
236F 24FC      6913            add     a,#0xfc
2371 F581      6914            mov     sp,a
2373 D001      6915            pop     ar1
2375 D000      6916            pop     ar0
2377 9053D0    6917            mov     dptr,#_curr_angle
237A EA        6918            mov     a,r2
237B F0        6919            movx    @dptr,a
237C A3        6920            inc     dptr
237D EB        6921            mov     a,r3
237E F0        6922            movx    @dptr,a
237F A3        6923            inc     dptr
2380 EC        6924            mov     a,r4
2381 F0        6925            movx    @dptr,a
2382 A3        6926            inc     dptr
2383 ED        6927            mov     a,r5
2384 F0        6928            movx    @dptr,a
2385           6929   ;        main.c:1253: return curr_angle; 
2385 D005      6930            pop     ar5
2387 D004      6931            pop     ar4
2389           6932   ;        main.c:1218: curr_angle -= angle_diff * 1.5; // TUNE THIS 
2389           6933   L041027?:
2389           6934   ;        main.c:1222: if (vy_err<0){
2389 E589      6935            mov     a,(_Joystick_Control_sloc3_1_0 + 1)
238B 20E7D0    6936            jb      acc.7,L041076?
238E 020000    6937            ljmp    L041040?
2391           6938   L041076?:
2391           6939   ;        main.c:1223: L_motor_dir = 1; 
2391 9056E0    6940            mov     dptr,#_L_motor_dir
2394 7401      6941            mov     a,#0x01
2396 F0        6942            movx    @dptr,a
2397           6943   ;        main.c:1224: R_motor_dir = 1; 
2397 9056A0    6944            mov     dptr,#_R_motor_dir
239A 7401      6945            mov     a,#0x01
239C F0        6946            movx    @dptr,a
239D           6947   ;        main.c:1226: if (vx_err>0){
239D 90D958    6948            mov     dptr,#_Joystick_Control_vx_err_1_225
23A0 E0        6949            movx    a,@dptr
23A1 FA        6950            mov     r2,a
23A2 A3        6951            inc     dptr
23A3 E0        6952            movx    a,@dptr
23A4 FB        6953            mov     r3,a
23A5 C3        6954            clr     c
23A6 E4        6955            clr     a
23A7 9A        6956            subb    a,r2
23A8 E4        6957            clr     a
23A9 6480      6958            xrl     a,#0x80
23AB 8BF0      6959            mov     b,r3
23AD 63F080    6960            xrl     b,#0x80
23B0 95F0      6961            subb    a,b
23B2 4000      6962            jc      L041077?
23B4 020000    6963            ljmp    L041035?
23B7           6964   L041077?:
23B7           6965   ;        main.c:1227: if (vy*100<=vy_thres*100/2){
23B7 8C00      6966            mov     __mulint_PARM_2,r4
23B9 8D01      6967            mov     (__mulint_PARM_2 + 1),r5
23BB 900064    6968            mov     dptr,#0x0064
23BE C000      6969            push    ar0
23C0 C001      6970            push    ar1
23C2 120000    6971            lcall   __mulint
23C5 AA82      6972            mov     r2,dpl
23C7 AB83      6973            mov     r3,dph
23C9 D001      6974            pop     ar1
23CB D000      6975            pop     ar0
23CD 9055A0    6976            mov     dptr,#_vy_thres
23D0 E0        6977            movx    a,@dptr
23D1 F500      6978            mov     __mulint_PARM_2,a
23D3 A3        6979            inc     dptr
23D4 E0        6980            movx    a,@dptr
23D5 F501      6981            mov     (__mulint_PARM_2 + 1),a
23D7 900064    6982            mov     dptr,#0x0064
23DA C002      6983            push    ar2
23DC C003      6984            push    ar3
23DE C000      6985            push    ar0
23E0 C001      6986            push    ar1
23E2 120000    6987            lcall   __mulint
23E5 AE82      6988            mov     r6,dpl
23E7 AF83      6989            mov     r7,dph
23E9 750002    6990            mov     __divsint_PARM_2,#0x02
23EC E4        6991            clr     a
23ED F501      6992            mov     (__divsint_PARM_2 + 1),a
23EF 8E82      6993            mov     dpl,r6
23F1 8F83      6994            mov     dph,r7
23F3 120000    6995            lcall   __divsint
23F6 AE82      6996            mov     r6,dpl
23F8 AF83      6997            mov     r7,dph
23FA D001      6998            pop     ar1
23FC D000      6999            pop     ar0
23FE D003      7000            pop     ar3
2400 D002      7001            pop     ar2
2402 C3        7002            clr     c
2403 EE        7003            mov     a,r6
2404 9A        7004            subb    a,r2
2405 EF        7005            mov     a,r7
2406 6480      7006            xrl     a,#0x80
2408 8BF0      7007            mov     b,r3
240A 63F080    7008            xrl     b,#0x80
240D 95F0      7009            subb    a,b
240F 5000      7010            jnc     L041078?
2411 020000    7011            ljmp    L041029?
2414           7012   L041078?:
2414           7013   ;        main.c:1228: pwm_left = vy_error; 
2414 90D908    7014            mov     dptr,#_Joystick_Control_vy_error_1_225
2417 E0        7015            movx    a,@dptr
2418 F5D8      7016            mov     _Joystick_Control_sloc4_1_0,a
241A A3        7017            inc     dptr
241B E0        7018            movx    a,@dptr
241C F5D9      7019            mov     (_Joystick_Control_sloc4_1_0 + 1),a
241E 905760    7020            mov     dptr,#_pwm_left
2421 E5D8      7021            mov     a,_Joystick_Control_sloc4_1_0
2423 F0        7022            movx    @dptr,a
2424           7023   ;        main.c:1229: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
2424 905410    7024            mov     dptr,#_pwm_corr
2427 E0        7025            movx    a,@dptr
2428 F588      7026            mov     _Joystick_Control_sloc3_1_0,a
242A A3        7027            inc     dptr
242B E0        7028            movx    a,@dptr
242C F589      7029            mov     (_Joystick_Control_sloc3_1_0 + 1),a
242E A3        7030            inc     dptr
242F E0        7031            movx    a,@dptr
2430 F58A      7032            mov     (_Joystick_Control_sloc3_1_0 + 2),a
2432 A3        7033            inc     dptr
2433 E0        7034            movx    a,@dptr
2434 F58B      7035            mov     (_Joystick_Control_sloc3_1_0 + 3),a
2436 85D882    7036            mov     dpl,_Joystick_Control_sloc4_1_0
2439 85D983    7037            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
243C C000      7038            push    ar0
243E C001      7039            push    ar1
2440 120000    7040            lcall   ___sint2fs
2443 AA82      7041            mov     r2,dpl
2445 AB83      7042            mov     r3,dph
2447 AEF0      7043            mov     r6,b
2449 FF        7044            mov     r7,a
244A C002      7045            push    ar2
244C C003      7046            push    ar3
244E C006      7047            push    ar6
2450 C007      7048            push    ar7
2452 858882    7049            mov     dpl,_Joystick_Control_sloc3_1_0
2455 858983    7050            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
2458 858AF0    7051            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
245B E58B      7052            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
245D 120000    7053            lcall   ___fsmul
2460 AA82      7054            mov     r2,dpl
2462 AB83      7055            mov     r3,dph
2464 AEF0      7056            mov     r6,b
2466 FF        7057            mov     r7,a
2467 E581      7058            mov     a,sp
2469 24FC      7059            add     a,#0xfc
246B F581      7060            mov     sp,a
246D C002      7061            push    ar2
246F C003      7062            push    ar3
2471 C006      7063            push    ar6
2473 C007      7064            push    ar7
2475 900000    7065            mov     dptr,#0x0000
2478 75F0C8    7066            mov     b,#0xC8
247B 7442      7067            mov     a,#0x42
247D 120000    7068            lcall   ___fsmul
2480 858288    7069            mov     _Joystick_Control_sloc3_1_0,dpl
2483 858389    7070            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
2486 85F08A    7071            mov     (_Joystick_Control_sloc3_1_0 + 2),b
2489 F58B      7072            mov     (_Joystick_Control_sloc3_1_0 + 3),a
248B E581      7073            mov     a,sp
248D 24FC      7074            add     a,#0xfc
248F F581      7075            mov     sp,a
2491 D001      7076            pop     ar1
2493 D000      7077            pop     ar0
2495 E5D8      7078            mov     a,_Joystick_Control_sloc4_1_0
2497 28        7079            add     a,r0
2498 F582      7080            mov     dpl,a
249A E5D9      7081            mov     a,(_Joystick_Control_sloc4_1_0 + 1)
249C 39        7082            addc    a,r1
249D F583      7083            mov     dph,a
249F 120000    7084            lcall   ___sint2fs
24A2 AA82      7085            mov     r2,dpl
24A4 AB83      7086            mov     r3,dph
24A6 AEF0      7087            mov     r6,b
24A8 FF        7088            mov     r7,a
24A9 C002      7089            push    ar2
24AB C003      7090            push    ar3
24AD C006      7091            push    ar6
24AF C007      7092            push    ar7
24B1 858882    7093            mov     dpl,_Joystick_Control_sloc3_1_0
24B4 858983    7094            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
24B7 858AF0    7095            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
24BA E58B      7096            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
24BC 120000    7097            lcall   ___fsdiv
24BF AA82      7098            mov     r2,dpl
24C1 AB83      7099            mov     r3,dph
24C3 AEF0      7100            mov     r6,b
24C5 FF        7101            mov     r7,a
24C6 E581      7102            mov     a,sp
24C8 24FC      7103            add     a,#0xfc
24CA F581      7104            mov     sp,a
24CC 8A82      7105            mov     dpl,r2
24CE 8B83      7106            mov     dph,r3
24D0 8EF0      7107            mov     b,r6
24D2 EF        7108            mov     a,r7
24D3 120000    7109            lcall   ___fs2uchar
24D6 E582      7110            mov     a,dpl
24D8 905720    7111            mov     dptr,#_pwm_right
24DB F0        7112            movx    @dptr,a
24DC 020000    7113            ljmp    L041030?
24DF           7114   L041029?:
24DF           7115   ;        main.c:1232: pwm_left = vx_error; 
24DF 905760    7116            mov     dptr,#_pwm_left
24E2 E8        7117            mov     a,r0
24E3 F0        7118            movx    @dptr,a
24E4           7119   ;        main.c:1233: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
24E4 905410    7120            mov     dptr,#_pwm_corr
24E7 E0        7121            movx    a,@dptr
24E8 F5D8      7122            mov     _Joystick_Control_sloc4_1_0,a
24EA A3        7123            inc     dptr
24EB E0        7124            movx    a,@dptr
24EC F5D9      7125            mov     (_Joystick_Control_sloc4_1_0 + 1),a
24EE A3        7126            inc     dptr
24EF E0        7127            movx    a,@dptr
24F0 F5DA      7128            mov     (_Joystick_Control_sloc4_1_0 + 2),a
24F2 A3        7129            inc     dptr
24F3 E0        7130            movx    a,@dptr
24F4 F5DB      7131            mov     (_Joystick_Control_sloc4_1_0 + 3),a
24F6 8882      7132            mov     dpl,r0
24F8 8983      7133            mov     dph,r1
24FA C000      7134            push    ar0
24FC C001      7135            push    ar1
24FE 120000    7136            lcall   ___sint2fs
2501 AA82      7137            mov     r2,dpl
2503 AB83      7138            mov     r3,dph
2505 AEF0      7139            mov     r6,b
2507 FF        7140            mov     r7,a
2508 C002      7141            push    ar2
250A C003      7142            push    ar3
250C C006      7143            push    ar6
250E C007      7144            push    ar7
2510 85D882    7145            mov     dpl,_Joystick_Control_sloc4_1_0
2513 85D983    7146            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
2516 85DAF0    7147            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
2519 E5DB      7148            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
251B 120000    7149            lcall   ___fsmul
251E AA82      7150            mov     r2,dpl
2520 AB83      7151            mov     r3,dph
2522 AEF0      7152            mov     r6,b
2524 FF        7153            mov     r7,a
2525 E581      7154            mov     a,sp
2527 24FC      7155            add     a,#0xfc
2529 F581      7156            mov     sp,a
252B C002      7157            push    ar2
252D C003      7158            push    ar3
252F C006      7159            push    ar6
2531 C007      7160            push    ar7
2533 900000    7161            mov     dptr,#0x0000
2536 75F0C8    7162            mov     b,#0xC8
2539 7442      7163            mov     a,#0x42
253B 120000    7164            lcall   ___fsmul
253E 8582D8    7165            mov     _Joystick_Control_sloc4_1_0,dpl
2541 8583D9    7166            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
2544 85F0DA    7167            mov     (_Joystick_Control_sloc4_1_0 + 2),b
2547 F5DB      7168            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2549 E581      7169            mov     a,sp
254B 24FC      7170            add     a,#0xfc
254D F581      7171            mov     sp,a
254F D001      7172            pop     ar1
2551 D000      7173            pop     ar0
2553 90D908    7174            mov     dptr,#_Joystick_Control_vy_error_1_225
2556 E0        7175            movx    a,@dptr
2557 FA        7176            mov     r2,a
2558 A3        7177            inc     dptr
2559 E0        7178            movx    a,@dptr
255A FB        7179            mov     r3,a
255B EA        7180            mov     a,r2
255C 28        7181            add     a,r0
255D F582      7182            mov     dpl,a
255F EB        7183            mov     a,r3
2560 39        7184            addc    a,r1
2561 F583      7185            mov     dph,a
2563 120000    7186            lcall   ___sint2fs
2566 AA82      7187            mov     r2,dpl
2568 AB83      7188            mov     r3,dph
256A AEF0      7189            mov     r6,b
256C FF        7190            mov     r7,a
256D C002      7191            push    ar2
256F C003      7192            push    ar3
2571 C006      7193            push    ar6
2573 C007      7194            push    ar7
2575 85D882    7195            mov     dpl,_Joystick_Control_sloc4_1_0
2578 85D983    7196            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
257B 85DAF0    7197            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
257E E5DB      7198            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
2580 120000    7199            lcall   ___fsdiv
2583 AA82      7200            mov     r2,dpl
2585 AB83      7201            mov     r3,dph
2587 AEF0      7202            mov     r6,b
2589 FF        7203            mov     r7,a
258A E581      7204            mov     a,sp
258C 24FC      7205            add     a,#0xfc
258E F581      7206            mov     sp,a
2590 8A82      7207            mov     dpl,r2
2592 8B83      7208            mov     dph,r3
2594 8EF0      7209            mov     b,r6
2596 EF        7210            mov     a,r7
2597 120000    7211            lcall   ___fs2uchar
259A E582      7212            mov     a,dpl
259C 905720    7213            mov     dptr,#_pwm_right
259F F0        7214            movx    @dptr,a
25A0           7215   L041030?:
25A0           7216   ;        main.c:1235: curr_angle -= angle_diff * 1.4; // TUNE THIS 
25A0 C028      7217            push    _Joystick_Control_sloc5_1_0
25A2 C029      7218            push    (_Joystick_Control_sloc5_1_0 + 1)
25A4 C02A      7219            push    (_Joystick_Control_sloc5_1_0 + 2)
25A6 C02B      7220            push    (_Joystick_Control_sloc5_1_0 + 3)
25A8 903333    7221            mov     dptr,#0x3333
25AB 75F0B3    7222            mov     b,#0xB3
25AE 743F      7223            mov     a,#0x3F
25B0 120000    7224            lcall   ___fsmul
25B3 8582D8    7225            mov     _Joystick_Control_sloc4_1_0,dpl
25B6 8583D9    7226            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
25B9 85F0DA    7227            mov     (_Joystick_Control_sloc4_1_0 + 2),b
25BC F5DB      7228            mov     (_Joystick_Control_sloc4_1_0 + 3),a
25BE E581      7229            mov     a,sp
25C0 24FC      7230            add     a,#0xfc
25C2 F581      7231            mov     sp,a
25C4 9053D0    7232            mov     dptr,#_curr_angle
25C7 E0        7233            movx    a,@dptr
25C8 FA        7234            mov     r2,a
25C9 A3        7235            inc     dptr
25CA E0        7236            movx    a,@dptr
25CB FB        7237            mov     r3,a
25CC A3        7238            inc     dptr
25CD E0        7239            movx    a,@dptr
25CE FE        7240            mov     r6,a
25CF A3        7241            inc     dptr
25D0 E0        7242            movx    a,@dptr
25D1 FF        7243            mov     r7,a
25D2 C0D8      7244            push    _Joystick_Control_sloc4_1_0
25D4 C0D9      7245            push    (_Joystick_Control_sloc4_1_0 + 1)
25D6 C0DA      7246            push    (_Joystick_Control_sloc4_1_0 + 2)
25D8 C0DB      7247            push    (_Joystick_Control_sloc4_1_0 + 3)
25DA 8A82      7248            mov     dpl,r2
25DC 8B83      7249            mov     dph,r3
25DE 8EF0      7250            mov     b,r6
25E0 EF        7251            mov     a,r7
25E1 120000    7252            lcall   ___fssub
25E4 AA82      7253            mov     r2,dpl
25E6 AB83      7254            mov     r3,dph
25E8 AEF0      7255            mov     r6,b
25EA FF        7256            mov     r7,a
25EB E581      7257            mov     a,sp
25ED 24FC      7258            add     a,#0xfc
25EF F581      7259            mov     sp,a
25F1 9053D0    7260            mov     dptr,#_curr_angle
25F4 EA        7261            mov     a,r2
25F5 F0        7262            movx    @dptr,a
25F6 A3        7263            inc     dptr
25F7 EB        7264            mov     a,r3
25F8 F0        7265            movx    @dptr,a
25F9 A3        7266            inc     dptr
25FA EE        7267            mov     a,r6
25FB F0        7268            movx    @dptr,a
25FC A3        7269            inc     dptr
25FD EF        7270            mov     a,r7
25FE F0        7271            movx    @dptr,a
25FF 020000    7272            ljmp    L041040?
2602           7273   L041035?:
2602           7274   ;        main.c:1239: if (vy*100<=vy_thres*100/2){
2602 8C00      7275            mov     __mulint_PARM_2,r4
2604 8D01      7276            mov     (__mulint_PARM_2 + 1),r5
2606 900064    7277            mov     dptr,#0x0064
2609 C000      7278            push    ar0
260B C001      7279            push    ar1
260D 120000    7280            lcall   __mulint
2610 AA82      7281            mov     r2,dpl
2612 AB83      7282            mov     r3,dph
2614 D001      7283            pop     ar1
2616 D000      7284            pop     ar0
2618 9055A0    7285            mov     dptr,#_vy_thres
261B E0        7286            movx    a,@dptr
261C F500      7287            mov     __mulint_PARM_2,a
261E A3        7288            inc     dptr
261F E0        7289            movx    a,@dptr
2620 F501      7290            mov     (__mulint_PARM_2 + 1),a
2622 900064    7291            mov     dptr,#0x0064
2625 C002      7292            push    ar2
2627 C003      7293            push    ar3
2629 C000      7294            push    ar0
262B C001      7295            push    ar1
262D 120000    7296            lcall   __mulint
2630 AC82      7297            mov     r4,dpl
2632 AD83      7298            mov     r5,dph
2634 750002    7299            mov     __divsint_PARM_2,#0x02
2637 E4        7300            clr     a
2638 F501      7301            mov     (__divsint_PARM_2 + 1),a
263A 8C82      7302            mov     dpl,r4
263C 8D83      7303            mov     dph,r5
263E 120000    7304            lcall   __divsint
2641 AC82      7305            mov     r4,dpl
2643 AD83      7306            mov     r5,dph
2645 D001      7307            pop     ar1
2647 D000      7308            pop     ar0
2649 D003      7309            pop     ar3
264B D002      7310            pop     ar2
264D C3        7311            clr     c
264E EC        7312            mov     a,r4
264F 9A        7313            subb    a,r2
2650 ED        7314            mov     a,r5
2651 6480      7315            xrl     a,#0x80
2653 8BF0      7316            mov     b,r3
2655 63F080    7317            xrl     b,#0x80
2658 95F0      7318            subb    a,b
265A 5000      7319            jnc     L041079?
265C 020000    7320            ljmp    L041032?
265F           7321   L041079?:
265F           7322   ;        main.c:1240: pwm_left = vy_error*100/(vx_error+vy_error);
265F 90D908    7323            mov     dptr,#_Joystick_Control_vy_error_1_225
2662 E0        7324            movx    a,@dptr
2663 FA        7325            mov     r2,a
2664 A3        7326            inc     dptr
2665 E0        7327            movx    a,@dptr
2666 FB        7328            mov     r3,a
2667 8A00      7329            mov     __mulint_PARM_2,r2
2669 8B01      7330            mov     (__mulint_PARM_2 + 1),r3
266B 900064    7331            mov     dptr,#0x0064
266E C002      7332            push    ar2
2670 C003      7333            push    ar3
2672 C000      7334            push    ar0
2674 C001      7335            push    ar1
2676 120000    7336            lcall   __mulint
2679 AC82      7337            mov     r4,dpl
267B AD83      7338            mov     r5,dph
267D D001      7339            pop     ar1
267F D000      7340            pop     ar0
2681 D003      7341            pop     ar3
2683 D002      7342            pop     ar2
2685 EA        7343            mov     a,r2
2686 28        7344            add     a,r0
2687 F500      7345            mov     __divsint_PARM_2,a
2689 EB        7346            mov     a,r3
268A 39        7347            addc    a,r1
268B F501      7348            mov     (__divsint_PARM_2 + 1),a
268D 8C82      7349            mov     dpl,r4
268F 8D83      7350            mov     dph,r5
2691 C002      7351            push    ar2
2693 C003      7352            push    ar3
2695 120000    7353            lcall   __divsint
2698 AC82      7354            mov     r4,dpl
269A D003      7355            pop     ar3
269C D002      7356            pop     ar2
269E 905760    7357            mov     dptr,#_pwm_left
26A1 EC        7358            mov     a,r4
26A2 F0        7359            movx    @dptr,a
26A3           7360   ;        main.c:1241: pwm_right =pwm_corr*vy_error; 
26A3 905410    7361            mov     dptr,#_pwm_corr
26A6 E0        7362            movx    a,@dptr
26A7 F5D8      7363            mov     _Joystick_Control_sloc4_1_0,a
26A9 A3        7364            inc     dptr
26AA E0        7365            movx    a,@dptr
26AB F5D9      7366            mov     (_Joystick_Control_sloc4_1_0 + 1),a
26AD A3        7367            inc     dptr
26AE E0        7368            movx    a,@dptr
26AF F5DA      7369            mov     (_Joystick_Control_sloc4_1_0 + 2),a
26B1 A3        7370            inc     dptr
26B2 E0        7371            movx    a,@dptr
26B3 F5DB      7372            mov     (_Joystick_Control_sloc4_1_0 + 3),a
26B5 8A82      7373            mov     dpl,r2
26B7 8B83      7374            mov     dph,r3
26B9 120000    7375            lcall   ___sint2fs
26BC AA82      7376            mov     r2,dpl
26BE AB83      7377            mov     r3,dph
26C0 ACF0      7378            mov     r4,b
26C2 FD        7379            mov     r5,a
26C3 C002      7380            push    ar2
26C5 C003      7381            push    ar3
26C7 C004      7382            push    ar4
26C9 C005      7383            push    ar5
26CB 85D882    7384            mov     dpl,_Joystick_Control_sloc4_1_0
26CE 85D983    7385            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
26D1 85DAF0    7386            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
26D4 E5DB      7387            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
26D6 120000    7388            lcall   ___fsmul
26D9 AA82      7389            mov     r2,dpl
26DB AB83      7390            mov     r3,dph
26DD ACF0      7391            mov     r4,b
26DF FD        7392            mov     r5,a
26E0 E581      7393            mov     a,sp
26E2 24FC      7394            add     a,#0xfc
26E4 F581      7395            mov     sp,a
26E6 8A82      7396            mov     dpl,r2
26E8 8B83      7397            mov     dph,r3
26EA 8CF0      7398            mov     b,r4
26EC ED        7399            mov     a,r5
26ED 120000    7400            lcall   ___fs2uchar
26F0 E582      7401            mov     a,dpl
26F2 905720    7402            mov     dptr,#_pwm_right
26F5 F0        7403            movx    @dptr,a
26F6 020000    7404            ljmp    L041033?
26F9           7405   L041032?:
26F9           7406   ;        main.c:1244: pwm_left = vx_error*100/(vx_error+vy_error);
26F9 8800      7407            mov     __mulint_PARM_2,r0
26FB 8901      7408            mov     (__mulint_PARM_2 + 1),r1
26FD 900064    7409            mov     dptr,#0x0064
2700 C000      7410            push    ar0
2702 C001      7411            push    ar1
2704 120000    7412            lcall   __mulint
2707 AA82      7413            mov     r2,dpl
2709 AB83      7414            mov     r3,dph
270B D001      7415            pop     ar1
270D D000      7416            pop     ar0
270F 90D908    7417            mov     dptr,#_Joystick_Control_vy_error_1_225
2712 E0        7418            movx    a,@dptr
2713 FC        7419            mov     r4,a
2714 A3        7420            inc     dptr
2715 E0        7421            movx    a,@dptr
2716 FD        7422            mov     r5,a
2717 EC        7423            mov     a,r4
2718 28        7424            add     a,r0
2719 F500      7425            mov     __divsint_PARM_2,a
271B ED        7426            mov     a,r5
271C 39        7427            addc    a,r1
271D F501      7428            mov     (__divsint_PARM_2 + 1),a
271F 8A82      7429            mov     dpl,r2
2721 8B83      7430            mov     dph,r3
2723 C000      7431            push    ar0
2725 C001      7432            push    ar1
2727 120000    7433            lcall   __divsint
272A AA82      7434            mov     r2,dpl
272C D001      7435            pop     ar1
272E D000      7436            pop     ar0
2730 905760    7437            mov     dptr,#_pwm_left
2733 EA        7438            mov     a,r2
2734 F0        7439            movx    @dptr,a
2735           7440   ;        main.c:1245: pwm_right = pwm_corr*vx_error; 
2735 905410    7441            mov     dptr,#_pwm_corr
2738 E0        7442            movx    a,@dptr
2739 FA        7443            mov     r2,a
273A A3        7444            inc     dptr
273B E0        7445            movx    a,@dptr
273C FB        7446            mov     r3,a
273D A3        7447            inc     dptr
273E E0        7448            movx    a,@dptr
273F FC        7449            mov     r4,a
2740 A3        7450            inc     dptr
2741 E0        7451            movx    a,@dptr
2742 FD        7452            mov     r5,a
2743 8882      7453            mov     dpl,r0
2745 8983      7454            mov     dph,r1
2747 C002      7455            push    ar2
2749 C003      7456            push    ar3
274B C004      7457            push    ar4
274D C005      7458            push    ar5
274F 120000    7459            lcall   ___sint2fs
2752 AE82      7460            mov     r6,dpl
2754 AF83      7461            mov     r7,dph
2756 A8F0      7462            mov     r0,b
2758 F9        7463            mov     r1,a
2759 D005      7464            pop     ar5
275B D004      7465            pop     ar4
275D D003      7466            pop     ar3
275F D002      7467            pop     ar2
2761 C006      7468            push    ar6
2763 C007      7469            push    ar7
2765 C000      7470            push    ar0
2767 C001      7471            push    ar1
2769 8A82      7472            mov     dpl,r2
276B 8B83      7473            mov     dph,r3
276D 8CF0      7474            mov     b,r4
276F ED        7475            mov     a,r5
2770 120000    7476            lcall   ___fsmul
2773 AA82      7477            mov     r2,dpl
2775 AB83      7478            mov     r3,dph
2777 ACF0      7479            mov     r4,b
2779 FD        7480            mov     r5,a
277A E581      7481            mov     a,sp
277C 24FC      7482            add     a,#0xfc
277E F581      7483            mov     sp,a
2780 8A82      7484            mov     dpl,r2
2782 8B83      7485            mov     dph,r3
2784 8CF0      7486            mov     b,r4
2786 ED        7487            mov     a,r5
2787 120000    7488            lcall   ___fs2uchar
278A E582      7489            mov     a,dpl
278C 905720    7490            mov     dptr,#_pwm_right
278F F0        7491            movx    @dptr,a
2790           7492   L041033?:
2790           7493   ;        main.c:1247: curr_angle += angle_diff * 1.4; // TUNE THIS 
2790 C028      7494            push    _Joystick_Control_sloc5_1_0
2792 C029      7495            push    (_Joystick_Control_sloc5_1_0 + 1)
2794 C02A      7496            push    (_Joystick_Control_sloc5_1_0 + 2)
2796 C02B      7497            push    (_Joystick_Control_sloc5_1_0 + 3)
2798 903333    7498            mov     dptr,#0x3333
279B 75F0B3    7499            mov     b,#0xB3
279E 743F      7500            mov     a,#0x3F
27A0 120000    7501            lcall   ___fsmul
27A3 AA82      7502            mov     r2,dpl
27A5 AB83      7503            mov     r3,dph
27A7 ACF0      7504            mov     r4,b
27A9 FD        7505            mov     r5,a
27AA E581      7506            mov     a,sp
27AC 24FC      7507            add     a,#0xfc
27AE F581      7508            mov     sp,a
27B0 9053D0    7509            mov     dptr,#_curr_angle
27B3 E0        7510            movx    a,@dptr
27B4 FE        7511            mov     r6,a
27B5 A3        7512            inc     dptr
27B6 E0        7513            movx    a,@dptr
27B7 FF        7514            mov     r7,a
27B8 A3        7515            inc     dptr
27B9 E0        7516            movx    a,@dptr
27BA F8        7517            mov     r0,a
27BB A3        7518            inc     dptr
27BC E0        7519            movx    a,@dptr
27BD F9        7520            mov     r1,a
27BE C002      7521            push    ar2
27C0 C003      7522            push    ar3
27C2 C004      7523            push    ar4
27C4 C005      7524            push    ar5
27C6 8E82      7525            mov     dpl,r6
27C8 8F83      7526            mov     dph,r7
27CA 88F0      7527            mov     b,r0
27CC E9        7528            mov     a,r1
27CD 120000    7529            lcall   ___fsadd
27D0 AA82      7530            mov     r2,dpl
27D2 AB83      7531            mov     r3,dph
27D4 ACF0      7532            mov     r4,b
27D6 FD        7533            mov     r5,a
27D7 E581      7534            mov     a,sp
27D9 24FC      7535            add     a,#0xfc
27DB F581      7536            mov     sp,a
27DD 9053D0    7537            mov     dptr,#_curr_angle
27E0 EA        7538            mov     a,r2
27E1 F0        7539            movx    @dptr,a
27E2 A3        7540            inc     dptr
27E3 EB        7541            mov     a,r3
27E4 F0        7542            movx    @dptr,a
27E5 A3        7543            inc     dptr
27E6 EC        7544            mov     a,r4
27E7 F0        7545            movx    @dptr,a
27E8 A3        7546            inc     dptr
27E9 ED        7547            mov     a,r5
27EA F0        7548            movx    @dptr,a
27EB           7549   L041040?:
27EB           7550   ;        main.c:1252: last_raw_angle = raw_angle; 
27EB 905390    7551            mov     dptr,#_raw_angle
27EE E0        7552            movx    a,@dptr
27EF FA        7553            mov     r2,a
27F0 A3        7554            inc     dptr
27F1 E0        7555            movx    a,@dptr
27F2 FB        7556            mov     r3,a
27F3 A3        7557            inc     dptr
27F4 E0        7558            movx    a,@dptr
27F5 FC        7559            mov     r4,a
27F6 A3        7560            inc     dptr
27F7 E0        7561            movx    a,@dptr
27F8 FD        7562            mov     r5,a
27F9 905350    7563            mov     dptr,#_last_raw_angle
27FC EA        7564            mov     a,r2
27FD F0        7565            movx    @dptr,a
27FE A3        7566            inc     dptr
27FF EB        7567            mov     a,r3
2800 F0        7568            movx    @dptr,a
2801 A3        7569            inc     dptr
2802 EC        7570            mov     a,r4
2803 F0        7571            movx    @dptr,a
2804 A3        7572            inc     dptr
2805 ED        7573            mov     a,r5
2806 F0        7574            movx    @dptr,a
2807           7575   ;        main.c:1253: return curr_angle; 
2807 9053D0    7576            mov     dptr,#_curr_angle
280A E0        7577            movx    a,@dptr
280B FA        7578            mov     r2,a
280C A3        7579            inc     dptr
280D E0        7580            movx    a,@dptr
280E FB        7581            mov     r3,a
280F A3        7582            inc     dptr
2810 E0        7583            movx    a,@dptr
2811 FC        7584            mov     r4,a
2812 A3        7585            inc     dptr
2813 E0        7586            movx    a,@dptr
2814 8A82      7587            mov     dpl,r2
2816 8B83      7588            mov     dph,r3
2818 8CF0      7589            mov     b,r4
281A 22        7590            ret
281B           7591   ;------------------------------------------------------------
281B           7592   ;Allocation info for local variables in function 'main'
281B           7593   ;------------------------------------------------------------
281B           7594   ;pick_char                 Allocated with name '_main_pick_char_1_248'
281B           7595   ;c                         Allocated with name '_main_c_1_248'
281B           7596   ;vx                        Allocated with name '_main_vx_1_248'
281B           7597   ;vy                        Allocated with name '_main_vy_1_248'
281B           7598   ;auto_mode                 Allocated with name '_main_auto_mode_1_248'
281B           7599   ;angle_count               Allocated with name '_main_angle_count_1_248'
281B           7600   ;------------------------------------------------------------
281B           7601   ;        main.c:1256: void main (void)
281B           7602   ;        -----------------------------------------
281B           7603   ;         function main
281B           7604   ;        -----------------------------------------
281B           7605   _main:
281B           7606   ;        main.c:1259: xdata int vx = 0, vy = 0; 
281B 90D9E8    7607            mov     dptr,#_main_vx_1_248
281E E4        7608            clr     a
281F F0        7609            movx    @dptr,a
2820 A3        7610            inc     dptr
2821 F0        7611            movx    @dptr,a
2822 90DA28    7612            mov     dptr,#_main_vy_1_248
2825 E4        7613            clr     a
2826 F0        7614            movx    @dptr,a
2827 A3        7615            inc     dptr
2828 F0        7616            movx    @dptr,a
2829           7617   ;        main.c:1260: xdata int auto_mode = 0;
2829 90DA78    7618            mov     dptr,#_main_auto_mode_1_248
282C E4        7619            clr     a
282D F0        7620            movx    @dptr,a
282E A3        7621            inc     dptr
282F F0        7622            movx    @dptr,a
2830           7623   ;        main.c:1261: char pick_char = '0';
2830 757830    7624            mov     _main_pick_char_1_248,#0x30
2833           7625   ;        main.c:1265: Init_all();
2833 120000    7626            lcall   _Init_all
2836           7627   ;        main.c:1266: BMM150_Init();
2836 120000    7628            lcall   _BMM150_Init
2839           7629   ;        main.c:1267: waitms(500);
2839 9001F4    7630            mov     dptr,#0x01F4
283C 120000    7631            lcall   _waitms
283F           7632   ;        main.c:1269: UART1_Init(9600);
283F 902580    7633            mov     dptr,#0x2580
2842 E4        7634            clr     a
2843 F5F0      7635            mov     b,a
2845 120000    7636            lcall   _UART1_Init
2848           7637   ;        main.c:1271: ReceptionOff();
2848 120000    7638            lcall   _ReceptionOff
284B           7639   ;        main.c:1274: SendATCommand("AT+VER\r\n");
284B 902710    7640            mov     dptr,#__str_9
284E 75F080    7641            mov     b,#0x80
2851 120000    7642            lcall   _SendATCommand
2854           7643   ;        main.c:1275: SendATCommand("AT+BAUD\r\n");
2854 902750    7644            mov     dptr,#__str_10
2857 75F080    7645            mov     b,#0x80
285A 120000    7646            lcall   _SendATCommand
285D           7647   ;        main.c:1276: SendATCommand("AT+RFID\r\n");
285D 902790    7648            mov     dptr,#__str_11
2860 75F080    7649            mov     b,#0x80
2863 120000    7650            lcall   _SendATCommand
2866           7651   ;        main.c:1277: SendATCommand("AT+DVID\r\n");
2866 9027D0    7652            mov     dptr,#__str_12
2869 75F080    7653            mov     b,#0x80
286C 120000    7654            lcall   _SendATCommand
286F           7655   ;        main.c:1278: SendATCommand("AT+RFC002\r\n");
286F 902810    7656            mov     dptr,#__str_13
2872 75F080    7657            mov     b,#0x80
2875 120000    7658            lcall   _SendATCommand
2878           7659   ;        main.c:1279: SendATCommand("AT+POWE\r\n");
2878 902850    7660            mov     dptr,#__str_14
287B 75F080    7661            mov     b,#0x80
287E 120000    7662            lcall   _SendATCommand
2881           7663   ;        main.c:1280: SendATCommand("AT+CLSS\r\n");
2881 902890    7664            mov     dptr,#__str_15
2884 75F080    7665            mov     b,#0x80
2887 120000    7666            lcall   _SendATCommand
288A           7667   ;        main.c:1281: SendATCommand("AT+DVIDEF11\r\n");  
288A 9028D0    7668            mov     dptr,#__str_16
288D 75F080    7669            mov     b,#0x80
2890 120000    7670            lcall   _SendATCommand
2893           7671   ;        main.c:1284: L_bridge_1 = 0; 
2893 C2A1      7672            clr     _P2_1
2895           7673   ;        main.c:1285: L_bridge_2 = 0; 
2895 C2A2      7674            clr     _P2_2
2897           7675   ;        main.c:1286: R_bridge_1 = 0; 
2897 C2A4      7676            clr     _P2_4
2899           7677   ;        main.c:1287: R_bridge_2 = 0; 
2899 C2A3      7678            clr     _P2_3
289B           7679   ;        main.c:1290: curr_angle = Read_angle();
289B 120000    7680            lcall   _Read_angle
289E AA82      7681            mov     r2,dpl
28A0 AB83      7682            mov     r3,dph
28A2 ACF0      7683            mov     r4,b
28A4 FD        7684            mov     r5,a
28A5 9053D0    7685            mov     dptr,#_curr_angle
28A8 EA        7686            mov     a,r2
28A9 F0        7687            movx    @dptr,a
28AA A3        7688            inc     dptr
28AB EB        7689            mov     a,r3
28AC F0        7690            movx    @dptr,a
28AD A3        7691            inc     dptr
28AE EC        7692            mov     a,r4
28AF F0        7693            movx    @dptr,a
28B0 A3        7694            inc     dptr
28B1 ED        7695            mov     a,r5
28B2 F0        7696            movx    @dptr,a
28B3           7697   ;        main.c:1291: waitms(1000);
28B3 9003E8    7698            mov     dptr,#0x03E8
28B6 120000    7699            lcall   _waitms
28B9           7700   ;        main.c:1292: while(1)
28B9           7701   L042016?:
28B9           7702   ;        main.c:1294: temp = Read_angle();
28B9 120000    7703            lcall   _Read_angle
28BC AA82      7704            mov     r2,dpl
28BE AB83      7705            mov     r3,dph
28C0 ACF0      7706            mov     r4,b
28C2 FD        7707            mov     r5,a
28C3 905860    7708            mov     dptr,#_temp
28C6 EA        7709            mov     a,r2
28C7 F0        7710            movx    @dptr,a
28C8 A3        7711            inc     dptr
28C9 EB        7712            mov     a,r3
28CA F0        7713            movx    @dptr,a
28CB A3        7714            inc     dptr
28CC EC        7715            mov     a,r4
28CD F0        7716            movx    @dptr,a
28CE A3        7717            inc     dptr
28CF ED        7718            mov     a,r5
28D0 F0        7719            movx    @dptr,a
28D1           7720   ;        main.c:1298: if(pick_char=='1'){
28D1 7431      7721            mov     a,#0x31
28D3 B57850    7722            cjne    a,_main_pick_char_1_248,L042002?
28D6           7723   ;        main.c:1299: servo_pick();
28D6 120000    7724            lcall   _servo_pick
28D9           7725   ;        main.c:1300: waitms(1000);
28D9 9003E8    7726            mov     dptr,#0x03E8
28DC 120000    7727            lcall   _waitms
28DF           7728   ;        main.c:1301: pick_char = '0';
28DF 757830    7729            mov     _main_pick_char_1_248,#0x30
28E2           7730   L042002?:
28E2           7731   ;        main.c:1304: if(auto_mode){
28E2 90DA78    7732            mov     dptr,#_main_auto_mode_1_248
28E5 E0        7733            movx    a,@dptr
28E6 FA        7734            mov     r2,a
28E7 A3        7735            inc     dptr
28E8 E0        7736            movx    a,@dptr
28E9 FB        7737            mov     r3,a
28EA 4A        7738            orl     a,r2
28EB 6000      7739            jz      L042004?
28ED           7740   ;        main.c:1305: Auto_mode_slave();
28ED 120000    7741            lcall   _Auto_mode_slave
28F0           7742   ;        main.c:1306: auto_mode = 0;
28F0 90DA78    7743            mov     dptr,#_main_auto_mode_1_248
28F3 E4        7744            clr     a
28F4 F0        7745            movx    @dptr,a
28F5 A3        7746            inc     dptr
28F6 F0        7747            movx    @dptr,a
28F7           7748   L042004?:
28F7           7749   ;        main.c:1309: if(RXU1()) // Something has arrived
28F7 120000    7750            lcall   _RXU1
28FA 5000      7751            jnc     L042016?
28FC           7752   ;        main.c:1311: c=getchar1();
28FC 120000    7753            lcall   _getchar1
28FF AA82      7754            mov     r2,dpl
2901           7755   ;        main.c:1312: if(c=='!') // Master is sending message
2901 BA21D0    7756            cjne    r2,#0x21,L042031?
2904 8000      7757            sjmp    L042032?
2906           7758   L042031?:
2906 020000    7759            ljmp    L042011?
2909           7760   L042032?:
2909           7761   ;        main.c:1314: getstr1(buff, sizeof(buff)-1);
2909 75B013    7762            mov     _getstr1_PARM_2,#0x13
290C 905C20    7763            mov     dptr,#_buff
290F 75F040    7764            mov     b,#0x40
2912 120000    7765            lcall   _getstr1
2915           7766   ;        main.c:1315: if(strlen(buff)==11)
2915 905C20    7767            mov     dptr,#_buff
2918 75F040    7768            mov     b,#0x40
291B 120000    7769            lcall   _strlen
291E AB82      7770            mov     r3,dpl
2920 AC83      7771            mov     r4,dph
2922 BB0B90    7772            cjne    r3,#0x0B,L042033?
2925 BC0090    7773            cjne    r4,#0x00,L042033?
2928 8000      7774            sjmp    L042034?
292A           7775   L042033?:
292A 020000    7776            ljmp    L042006?
292D           7777   L042034?:
292D           7778   ;        main.c:1317: printf("Master says: %s\r\n", buff);
292D 7420      7779            mov     a,#_buff
292F C0E0      7780            push    acc
2931 745C      7781            mov     a,#(_buff >> 8)
2933 C0E0      7782            push    acc
2935 7440      7783            mov     a,#0x40
2937 C0E0      7784            push    acc
2939 7450      7785            mov     a,#__str_17
293B C0E0      7786            push    acc
293D 742B      7787            mov     a,#(__str_17 >> 8)
293F C0E0      7788            push    acc
2941 7480      7789            mov     a,#0x80
2943 C0E0      7790            push    acc
2945 120000    7791            lcall   _printf
2948 E581      7792            mov     a,sp
294A 24FA      7793            add     a,#0xfa
294C F581      7794            mov     sp,a
294E           7795   ;        main.c:1318: sscanf(buff, "%03d,%03d,%c,%01d", &vx, &vy, &pick_char, &auto_mode);
294E 7478      7796            mov     a,#_main_auto_mode_1_248
2950 C0E0      7797            push    acc
2952 74DA      7798            mov     a,#(_main_auto_mode_1_248 >> 8)
2954 C0E0      7799            push    acc
2956 E4        7800            clr     a
2957 C0E0      7801            push    acc
2959 7478      7802            mov     a,#_main_pick_char_1_248
295B C0E0      7803            push    acc
295D 74D1      7804            mov     a,#(_main_pick_char_1_248 >> 8)
295F C0E0      7805            push    acc
2961 7440      7806            mov     a,#0x40
2963 C0E0      7807            push    acc
2965 7428      7808            mov     a,#_main_vy_1_248
2967 C0E0      7809            push    acc
2969 74DA      7810            mov     a,#(_main_vy_1_248 >> 8)
296B C0E0      7811            push    acc
296D E4        7812            clr     a
296E C0E0      7813            push    acc
2970 74E8      7814            mov     a,#_main_vx_1_248
2972 C0E0      7815            push    acc
2974 74D9      7816            mov     a,#(_main_vx_1_248 >> 8)
2976 C0E0      7817            push    acc
2978 E4        7818            clr     a
2979 C0E0      7819            push    acc
297B 7490      7820            mov     a,#__str_18
297D C0E0      7821            push    acc
297F 742B      7822            mov     a,#(__str_18 >> 8)
2981 C0E0      7823            push    acc
2983 7480      7824            mov     a,#0x80
2985 C0E0      7825            push    acc
2987 7420      7826            mov     a,#_buff
2989 C0E0      7827            push    acc
298B 745C      7828            mov     a,#(_buff >> 8)
298D C0E0      7829            push    acc
298F 7440      7830            mov     a,#0x40
2991 C0E0      7831            push    acc
2993 120000    7832            lcall   _sscanf
2996 E581      7833            mov     a,sp
2998 24EE      7834            add     a,#0xee
299A F581      7835            mov     sp,a
299C           7836   ;        main.c:1320: curr_angle = Joystick_Control(&vx, &vy);
299C 757028    7837            mov     _Joystick_Control_PARM_2,#_main_vy_1_248
299F 7571DA    7838            mov     (_Joystick_Control_PARM_2 + 1),#(_main_vy_1_248 >> 8)
29A2 757200    7839            mov     (_Joystick_Control_PARM_2 + 2),#0x00
29A5 90D9E8    7840            mov     dptr,#_main_vx_1_248
29A8 75F000    7841            mov     b,#0x00
29AB 120000    7842            lcall   _Joystick_Control
29AE AB82      7843            mov     r3,dpl
29B0 AC83      7844            mov     r4,dph
29B2 ADF0      7845            mov     r5,b
29B4 FE        7846            mov     r6,a
29B5 9053D0    7847            mov     dptr,#_curr_angle
29B8 EB        7848            mov     a,r3
29B9 F0        7849            movx    @dptr,a
29BA A3        7850            inc     dptr
29BB EC        7851            mov     a,r4
29BC F0        7852            movx    @dptr,a
29BD A3        7853            inc     dptr
29BE ED        7854            mov     a,r5
29BF F0        7855            movx    @dptr,a
29C0 A3        7856            inc     dptr
29C1 EE        7857            mov     a,r6
29C2 F0        7858            movx    @dptr,a
29C3 020000    7859            ljmp    L042016?
29C6           7860   L042006?:
29C6           7861   ;        main.c:1323: printf("*** BAD MESSAGE ***: %s\r\n", buff);
29C6 7420      7862            mov     a,#_buff
29C8 C0E0      7863            push    acc
29CA 745C      7864            mov     a,#(_buff >> 8)
29CC C0E0      7865            push    acc
29CE 7440      7866            mov     a,#0x40
29D0 C0E0      7867            push    acc
29D2 74D0      7868            mov     a,#__str_19
29D4 C0E0      7869            push    acc
29D6 742B      7870            mov     a,#(__str_19 >> 8)
29D8 C0E0      7871            push    acc
29DA 7480      7872            mov     a,#0x80
29DC C0E0      7873            push    acc
29DE 120000    7874            lcall   _printf
29E1 E581      7875            mov     a,sp
29E3 24FA      7876            add     a,#0xfa
29E5 F581      7877            mov     sp,a
29E7 020000    7878            ljmp    L042016?
29EA           7879   L042011?:
29EA           7880   ;        main.c:1326: else if(c=='@') // Master wants slave data
29EA BA4010    7881            cjne    r2,#0x40,L042035?
29ED 8000      7882            sjmp    L042036?
29EF           7883   L042035?:
29EF 020000    7884            ljmp    L042016?
29F2           7885   L042036?:
29F2           7886   ;        main.c:1328: sprintf(buff, "0,00,%04ld,%05d,%03d\n", freq100, weight, (int)curr_angle);
29F2 9053D0    7887            mov     dptr,#_curr_angle
29F5 E0        7888            movx    a,@dptr
29F6 FA        7889            mov     r2,a
29F7 A3        7890            inc     dptr
29F8 E0        7891            movx    a,@dptr
29F9 FB        7892            mov     r3,a
29FA A3        7893            inc     dptr
29FB E0        7894            movx    a,@dptr
29FC FC        7895            mov     r4,a
29FD A3        7896            inc     dptr
29FE E0        7897            movx    a,@dptr
29FF 8A82      7898            mov     dpl,r2
2A01 8B83      7899            mov     dph,r3
2A03 8CF0      7900            mov     b,r4
2A05 120000    7901            lcall   ___fs2sint
2A08 AA82      7902            mov     r2,dpl
2A0A AB83      7903            mov     r3,dph
2A0C C002      7904            push    ar2
2A0E C003      7905            push    ar3
2A10 905290    7906            mov     dptr,#_weight
2A13 E0        7907            movx    a,@dptr
2A14 C0E0      7908            push    acc
2A16 A3        7909            inc     dptr
2A17 E0        7910            movx    a,@dptr
2A18 C0E0      7911            push    acc
2A1A 905BE0    7912            mov     dptr,#_freq100
2A1D E0        7913            movx    a,@dptr
2A1E C0E0      7914            push    acc
2A20 A3        7915            inc     dptr
2A21 E0        7916            movx    a,@dptr
2A22 C0E0      7917            push    acc
2A24 A3        7918            inc     dptr
2A25 E0        7919            movx    a,@dptr
2A26 C0E0      7920            push    acc
2A28 A3        7921            inc     dptr
2A29 E0        7922            movx    a,@dptr
2A2A C0E0      7923            push    acc
2A2C 7490      7924            mov     a,#__str_20
2A2E C0E0      7925            push    acc
2A30 742C      7926            mov     a,#(__str_20 >> 8)
2A32 C0E0      7927            push    acc
2A34 7480      7928            mov     a,#0x80
2A36 C0E0      7929            push    acc
2A38 7420      7930            mov     a,#_buff
2A3A C0E0      7931            push    acc
2A3C 745C      7932            mov     a,#(_buff >> 8)
2A3E C0E0      7933            push    acc
2A40 7440      7934            mov     a,#0x40
2A42 C0E0      7935            push    acc
2A44 120000    7936            lcall   _sprintf
2A47 E581      7937            mov     a,sp
2A49 24F2      7938            add     a,#0xf2
2A4B F581      7939            mov     sp,a
2A4D           7940   ;        main.c:1330: waitms(5); // The radio seems to need this delay...
2A4D 900005    7941            mov     dptr,#0x0005
2A50 120000    7942            lcall   _waitms
2A53           7943   ;        main.c:1331: sendstr1(buff);
2A53 905C20    7944            mov     dptr,#_buff
2A56 75F040    7945            mov     b,#0x40
2A59 120000    7946            lcall   _sendstr1
2A5C 020000    7947            ljmp    L042016?
2A5F           7948            rseg R_CSEG
2A5F           7949   
0000           7950            rseg R_XINIT
0000           7951   __xinit__pwm_counter:
0000 0000      7952            db 0x00,0x00    ; 0
0002           7953   __xinit__servo_counter:
0002 0000      7954            db 0x00,0x00    ; 0
0004           7955   __xinit__pwm_left:
0004 00        7956            db 0x00         ; 0
0005           7957   __xinit__pwm_right:
0005 00        7958            db 0x00         ; 0
0006           7959   __xinit__L_motor_dir:
0006 01        7960            db 0x01         ; 1
0007           7961   __xinit__R_motor_dir:
0007 01        7962            db 0x01         ; 1
0008           7963   __xinit__servo_base:
0008 32        7964            db 0x32         ; 50
0009           7965   __xinit__servo_arm:
0009 32        7966            db 0x32         ; 50
000A           7967   __xinit__vx_thres:
000A A100      7968            db 0xA1,0x00    ;  161
000C           7969   __xinit__vy_thres:
000C A600      7970            db 0xA6,0x00    ;  166
000E           7971   __xinit__vx:
000E 0000      7972            db 0x00,0x00    ;  0
0010           7973   __xinit__vy:
0010 0000      7974            db 0x00,0x00    ;  0
0012           7975   __xinit__fre_mea_count:
0012 0000      7976            db 0x00,0x00    ; 0
0014           7977   __xinit__weight_mea_count:
0014 0000      7978            db 0x00,0x00    ; 0
0016           7979   __xinit__seed:
0016 3930      7980            db 0x39,0x30    ; 12345
0018           7981   __xinit__pwm_corr:
0018 3333733F  7982            db 0x33,0x33,0x73,0x3F  ;  9.500000e-001
001C           7983   __xinit__curr_angle:
001C 00000000  7984            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0020           7985   __xinit__raw_angle:
0020 00000000  7986            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0024           7987   __xinit__last_raw_angle:
0024 00000000  7988            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0028           7989   __xinit__angle_diff:
0028 00000000  7990            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
002C           7991   __xinit__mea_yes:
002C 01        7992            db 0x01         ;  1
002D           7993   __xinit__weight:
002D 0000      7994            db 0x00,0x00    ; 0
002F           7995   __xinit__duration:
002F 00000000  7996            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0033           7997   __xinit__distance:
0033 00000000  7998            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0037           7999   
0000           8000            rseg R_CONST
0000           8001   __str_0:
0000 4572726F  8002            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
0035 0D        8003            db 0x0D
0036 0A        8004            db 0x0A
0037 00        8005            db 0x00
0038           8006   __str_1:
0038 424D4D31  8007            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
0068 0D        8008            db 0x0D
0069 0A        8009            db 0x0A
006A 00        8010            db 0x00
006B           8011   __str_2:
006B 436F6D6D  8012            db 'Command: %s'
     616E643A
     202573
0076 00        8013            db 0x00
0077           8014   __str_3:
0077 52657370  8015            db 'Response: %s'
     6F6E7365
     3A202573
0083 0D        8016            db 0x0D
0084 0A        8017            db 0x0A
0085 00        8018            db 0x00
0086           8019   __str_4:
0086 41542B44  8020            db 'AT+DVID0000'
     56494430
     303030
0091 0D        8021            db 0x0D
0092 0A        8022            db 0x0A
0093 00        8023            db 0x00
0094           8024   __str_5:
0094 6D617374  8025            db 'master_messgae_auto_mode: %s'
     65725F6D
     65737367
     61655F61
     75746F5F
     6D6F6465
     3A202573
00B0 0D        8026            db 0x0D
00B1 0A        8027            db 0x0A
00B2 00        8028            db 0x00
00B3           8029   __str_6:
00B3 25303364  8030            db '%03d,%03d,%01d,%01d'
     2C253033
     642C2530
     31642C25
     303164
00C6 00        8031            db 0x00
00C7           8032   __str_7:
00C7 25303164  8033            db '%01d,%02d,%ld,%05d,%03d'
     2C253032
     642C256C
     642C2530
     35642C25
     303364
00DE 0A        8034            db 0x0A
00DF 00        8035            db 0x00
00E0           8036   __str_8:
00E0 663A2530  8037            db 'f:%04ld, d1:%d, d2:%d, bound_dectect: %d'
     346C642C
     2064313A
     25642C20
     64323A25
     642C2062
     6F756E64
     5F646563
     74656374
     3A202564
0108 0D        8038            db 0x0D
0109 0A        8039            db 0x0A
010A 00        8040            db 0x00
010B           8041   __str_9:
010B 41542B56  8042            db 'AT+VER'
     4552
0111 0D        8043            db 0x0D
0112 0A        8044            db 0x0A
0113 00        8045            db 0x00
0114           8046   __str_10:
0114 41542B42  8047            db 'AT+BAUD'
     415544
011B 0D        8048            db 0x0D
011C 0A        8049            db 0x0A
011D 00        8050            db 0x00
011E           8051   __str_11:
011E 41542B52  8052            db 'AT+RFID'
     464944
0125 0D        8053            db 0x0D
0126 0A        8054            db 0x0A
0127 00        8055            db 0x00
0128           8056   __str_12:
0128 41542B44  8057            db 'AT+DVID'
     564944
012F 0D        8058            db 0x0D
0130 0A        8059            db 0x0A
0131 00        8060            db 0x00
0132           8061   __str_13:
0132 41542B52  8062            db 'AT+RFC002'
     46433030
     32
013B 0D        8063            db 0x0D
013C 0A        8064            db 0x0A
013D 00        8065            db 0x00
013E           8066   __str_14:
013E 41542B50  8067            db 'AT+POWE'
     4F5745
0145 0D        8068            db 0x0D
0146 0A        8069            db 0x0A
0147 00        8070            db 0x00
0148           8071   __str_15:
0148 41542B43  8072            db 'AT+CLSS'
     4C5353
014F 0D        8073            db 0x0D
0150 0A        8074            db 0x0A
0151 00        8075            db 0x00
0152           8076   __str_16:
0152 41542B44  8077            db 'AT+DVIDEF11'
     56494445
     463131
015D 0D        8078            db 0x0D
015E 0A        8079            db 0x0A
015F 00        8080            db 0x00
0160           8081   __str_17:
0160 4D617374  8082            db 'Master says: %s'
     65722073
     6179733A
     202573
016F 0D        8083            db 0x0D
0170 0A        8084            db 0x0A
0171 00        8085            db 0x00
0172           8086   __str_18:
0172 25303364  8087            db '%03d,%03d,%c,%01d'
     2C253033
     642C2563
     2C253031
     64
0183 00        8088            db 0x00
0184           8089   __str_19:
0184 2A2A2A20  8090            db '*** BAD MESSAGE ***: %s'
     42414420
     4D455353
     41474520
     2A2A2A3A
     202573
019B 0D        8091            db 0x0D
019C 0A        8092            db 0x0A
019D 00        8093            db 0x00
019E           8094   __str_20:
019E 302C3030  8095            db '0,00,%04ld,%05d,%03d'
     2C253034
     6C642C25
     3035642C
     25303364
01B2 0A        8096            db 0x0A
01B3 00        8097            db 0x00
01B4           8098   
0096           8099            CSEG
0096           8100   
0096           8101   end
