0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Apr 01 16:33:22 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _check_bound_PARM_2
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Joystick_Control
0000             30            public _Auto_mode_slave
0000             31            public _get_random_90_250
0000             32            public _simple_rand
0000             33            public _Move_forward
0000             34            public _Right_angle
0000             35            public _Move_back_ms
0000             36            public _Init_all
0000             37            public _check_bound
0000             38            public _servo_pick
0000             39            public _Timer5_ISR
0000             40            public _ReadHX711
0000             41            public _ADC_at_Pin
0000             42            public _InitPinADC
0000             43            public _InitADC
0000             44            public _Set_Pin_Input
0000             45            public _Set_Pin_Output
0000             46            public _ReceptionOff
0000             47            public _SendATCommand
0000             48            public _waitms_or_RI1
0000             49            public _RXU1
0000             50            public _getstr1
0000             51            public _getchar1_with_timeout
0000             52            public _getchar1
0000             53            public _sendstr1
0000             54            public _putchar1
0000             55            public _UART1_Init
0000             56            public _waitms
0000             57            public _Timer3us
0000             58            public __c51_external_startup
0000             59            public _weight
0000             60            public _mea_yes
0000             61            public _angle_diff
0000             62            public _last_raw_angle
0000             63            public _raw_angle
0000             64            public _curr_angle
0000             65            public _pwm_corr
0000             66            public _seed
0000             67            public _weight_mea_count
0000             68            public _fre_mea_count
0000             69            public _vy
0000             70            public _vx
0000             71            public _vy_thres
0000             72            public _vx_thres
0000             73            public _servo_arm
0000             74            public _servo_base
0000             75            public _R_motor_dir
0000             76            public _L_motor_dir
0000             77            public _pwm_right
0000             78            public _pwm_left
0000             79            public _servo_counter
0000             80            public _pwm_counter
0000             81            public _temp
0000             82            public _dig_xyz1
0000             83            public _dig_xy2
0000             84            public _dig_xy1
0000             85            public _dig_z4
0000             86            public _dig_z3
0000             87            public _dig_z2
0000             88            public _dig_z1
0000             89            public _dig_y2
0000             90            public _dig_y1
0000             91            public _dig_x2
0000             92            public _dig_x1
0000             93            public _d2
0000             94            public _d1
0000             95            public _freq100
0000             96            public _buff
0000             97            public _Joystick_Control_PARM_2
0000             98            public _getstr1_PARM_2
0000             99   ;--------------------------------------------------------
0000            100   ; Special Function Registers
0000            101   ;--------------------------------------------------------
0000            102   _ACC            DATA 0xe0
0000            103   _ADC0ASAH       DATA 0xb6
0000            104   _ADC0ASAL       DATA 0xb5
0000            105   _ADC0ASCF       DATA 0xa1
0000            106   _ADC0ASCT       DATA 0xc7
0000            107   _ADC0CF0        DATA 0xbc
0000            108   _ADC0CF1        DATA 0xb9
0000            109   _ADC0CF2        DATA 0xdf
0000            110   _ADC0CN0        DATA 0xe8
0000            111   _ADC0CN1        DATA 0xb2
0000            112   _ADC0CN2        DATA 0xb3
0000            113   _ADC0GTH        DATA 0xc4
0000            114   _ADC0GTL        DATA 0xc3
0000            115   _ADC0H          DATA 0xbe
0000            116   _ADC0L          DATA 0xbd
0000            117   _ADC0LTH        DATA 0xc6
0000            118   _ADC0LTL        DATA 0xc5
0000            119   _ADC0MX         DATA 0xbb
0000            120   _B              DATA 0xf0
0000            121   _CKCON0         DATA 0x8e
0000            122   _CKCON1         DATA 0xa6
0000            123   _CLEN0          DATA 0xc6
0000            124   _CLIE0          DATA 0xc7
0000            125   _CLIF0          DATA 0xe8
0000            126   _CLKSEL         DATA 0xa9
0000            127   _CLOUT0         DATA 0xd1
0000            128   _CLU0CF         DATA 0xb1
0000            129   _CLU0FN         DATA 0xaf
0000            130   _CLU0MX         DATA 0x84
0000            131   _CLU1CF         DATA 0xb3
0000            132   _CLU1FN         DATA 0xb2
0000            133   _CLU1MX         DATA 0x85
0000            134   _CLU2CF         DATA 0xb6
0000            135   _CLU2FN         DATA 0xb5
0000            136   _CLU2MX         DATA 0x91
0000            137   _CLU3CF         DATA 0xbf
0000            138   _CLU3FN         DATA 0xbe
0000            139   _CLU3MX         DATA 0xae
0000            140   _CMP0CN0        DATA 0x9b
0000            141   _CMP0CN1        DATA 0x99
0000            142   _CMP0MD         DATA 0x9d
0000            143   _CMP0MX         DATA 0x9f
0000            144   _CMP1CN0        DATA 0xbf
0000            145   _CMP1CN1        DATA 0xac
0000            146   _CMP1MD         DATA 0xab
0000            147   _CMP1MX         DATA 0xaa
0000            148   _CRC0CN0        DATA 0xce
0000            149   _CRC0CN1        DATA 0x86
0000            150   _CRC0CNT        DATA 0xd3
0000            151   _CRC0DAT        DATA 0xcb
0000            152   _CRC0FLIP       DATA 0xcf
0000            153   _CRC0IN         DATA 0xca
0000            154   _CRC0ST         DATA 0xd2
0000            155   _DAC0CF0        DATA 0x91
0000            156   _DAC0CF1        DATA 0x92
0000            157   _DAC0H          DATA 0x85
0000            158   _DAC0L          DATA 0x84
0000            159   _DAC1CF0        DATA 0x93
0000            160   _DAC1CF1        DATA 0x94
0000            161   _DAC1H          DATA 0x8a
0000            162   _DAC1L          DATA 0x89
0000            163   _DAC2CF0        DATA 0x95
0000            164   _DAC2CF1        DATA 0x96
0000            165   _DAC2H          DATA 0x8c
0000            166   _DAC2L          DATA 0x8b
0000            167   _DAC3CF0        DATA 0x9a
0000            168   _DAC3CF1        DATA 0x9c
0000            169   _DAC3H          DATA 0x8e
0000            170   _DAC3L          DATA 0x8d
0000            171   _DACGCF0        DATA 0x88
0000            172   _DACGCF1        DATA 0x98
0000            173   _DACGCF2        DATA 0xa2
0000            174   _DERIVID        DATA 0xad
0000            175   _DEVICEID       DATA 0xb5
0000            176   _DPH            DATA 0x83
0000            177   _DPL            DATA 0x82
0000            178   _EIE1           DATA 0xe6
0000            179   _EIE2           DATA 0xf3
0000            180   _EIP1           DATA 0xbb
0000            181   _EIP1H          DATA 0xee
0000            182   _EIP2           DATA 0xed
0000            183   _EIP2H          DATA 0xf6
0000            184   _EMI0CN         DATA 0xe7
0000            185   _FLKEY          DATA 0xb7
0000            186   _HFO0CAL        DATA 0xc7
0000            187   _HFO1CAL        DATA 0xd6
0000            188   _HFOCN          DATA 0xef
0000            189   _I2C0ADM        DATA 0xff
0000            190   _I2C0CN0        DATA 0xba
0000            191   _I2C0DIN        DATA 0xbc
0000            192   _I2C0DOUT       DATA 0xbb
0000            193   _I2C0FCN0       DATA 0xad
0000            194   _I2C0FCN1       DATA 0xab
0000            195   _I2C0FCT        DATA 0xf5
0000            196   _I2C0SLAD       DATA 0xbd
0000            197   _I2C0STAT       DATA 0xb9
0000            198   _IE             DATA 0xa8
0000            199   _IP             DATA 0xb8
0000            200   _IPH            DATA 0xf2
0000            201   _IT01CF         DATA 0xe4
0000            202   _LFO0CN         DATA 0xb1
0000            203   _P0             DATA 0x80
0000            204   _P0MASK         DATA 0xfe
0000            205   _P0MAT          DATA 0xfd
0000            206   _P0MDIN         DATA 0xf1
0000            207   _P0MDOUT        DATA 0xa4
0000            208   _P0SKIP         DATA 0xd4
0000            209   _P1             DATA 0x90
0000            210   _P1MASK         DATA 0xee
0000            211   _P1MAT          DATA 0xed
0000            212   _P1MDIN         DATA 0xf2
0000            213   _P1MDOUT        DATA 0xa5
0000            214   _P1SKIP         DATA 0xd5
0000            215   _P2             DATA 0xa0
0000            216   _P2MASK         DATA 0xfc
0000            217   _P2MAT          DATA 0xfb
0000            218   _P2MDIN         DATA 0xf3
0000            219   _P2MDOUT        DATA 0xa6
0000            220   _P2SKIP         DATA 0xcc
0000            221   _P3             DATA 0xb0
0000            222   _P3MDIN         DATA 0xf4
0000            223   _P3MDOUT        DATA 0x9c
0000            224   _PCA0CENT       DATA 0x9e
0000            225   _PCA0CLR        DATA 0x9c
0000            226   _PCA0CN0        DATA 0xd8
0000            227   _PCA0CPH0       DATA 0xfc
0000            228   _PCA0CPH1       DATA 0xea
0000            229   _PCA0CPH2       DATA 0xec
0000            230   _PCA0CPH3       DATA 0xf5
0000            231   _PCA0CPH4       DATA 0x85
0000            232   _PCA0CPH5       DATA 0xde
0000            233   _PCA0CPL0       DATA 0xfb
0000            234   _PCA0CPL1       DATA 0xe9
0000            235   _PCA0CPL2       DATA 0xeb
0000            236   _PCA0CPL3       DATA 0xf4
0000            237   _PCA0CPL4       DATA 0x84
0000            238   _PCA0CPL5       DATA 0xdd
0000            239   _PCA0CPM0       DATA 0xda
0000            240   _PCA0CPM1       DATA 0xdb
0000            241   _PCA0CPM2       DATA 0xdc
0000            242   _PCA0CPM3       DATA 0xae
0000            243   _PCA0CPM4       DATA 0xaf
0000            244   _PCA0CPM5       DATA 0xcc
0000            245   _PCA0H          DATA 0xfa
0000            246   _PCA0L          DATA 0xf9
0000            247   _PCA0MD         DATA 0xd9
0000            248   _PCA0POL        DATA 0x96
0000            249   _PCA0PWM        DATA 0xf7
0000            250   _PCON0          DATA 0x87
0000            251   _PCON1          DATA 0xcd
0000            252   _PFE0CN         DATA 0xc1
0000            253   _PRTDRV         DATA 0xf6
0000            254   _PSCTL          DATA 0x8f
0000            255   _PSTAT0         DATA 0xaa
0000            256   _PSW            DATA 0xd0
0000            257   _REF0CN         DATA 0xd1
0000            258   _REG0CN         DATA 0xc9
0000            259   _REVID          DATA 0xb6
0000            260   _RSTSRC         DATA 0xef
0000            261   _SBCON1         DATA 0x94
0000            262   _SBRLH1         DATA 0x96
0000            263   _SBRLL1         DATA 0x95
0000            264   _SBUF           DATA 0x99
0000            265   _SBUF0          DATA 0x99
0000            266   _SBUF1          DATA 0x92
0000            267   _SCON           DATA 0x98
0000            268   _SCON0          DATA 0x98
0000            269   _SCON1          DATA 0xc8
0000            270   _SFRPAGE        DATA 0xa7
0000            271   _SFRPGCN        DATA 0xbc
0000            272   _SFRSTACK       DATA 0xd7
0000            273   _SMB0ADM        DATA 0xd6
0000            274   _SMB0ADR        DATA 0xd7
0000            275   _SMB0CF         DATA 0xc1
0000            276   _SMB0CN0        DATA 0xc0
0000            277   _SMB0DAT        DATA 0xc2
0000            278   _SMB0FCN0       DATA 0xc3
0000            279   _SMB0FCN1       DATA 0xc4
0000            280   _SMB0FCT        DATA 0xef
0000            281   _SMB0RXLN       DATA 0xc5
0000            282   _SMB0TC         DATA 0xac
0000            283   _SMOD1          DATA 0x93
0000            284   _SP             DATA 0x81
0000            285   _SPI0CFG        DATA 0xa1
0000            286   _SPI0CKR        DATA 0xa2
0000            287   _SPI0CN0        DATA 0xf8
0000            288   _SPI0DAT        DATA 0xa3
0000            289   _SPI0FCN0       DATA 0x9a
0000            290   _SPI0FCN1       DATA 0x9b
0000            291   _SPI0FCT        DATA 0xf7
0000            292   _SPI0PCF        DATA 0xdf
0000            293   _TCON           DATA 0x88
0000            294   _TH0            DATA 0x8c
0000            295   _TH1            DATA 0x8d
0000            296   _TL0            DATA 0x8a
0000            297   _TL1            DATA 0x8b
0000            298   _TMOD           DATA 0x89
0000            299   _TMR2CN0        DATA 0xc8
0000            300   _TMR2CN1        DATA 0xfd
0000            301   _TMR2H          DATA 0xcf
0000            302   _TMR2L          DATA 0xce
0000            303   _TMR2RLH        DATA 0xcb
0000            304   _TMR2RLL        DATA 0xca
0000            305   _TMR3CN0        DATA 0x91
0000            306   _TMR3CN1        DATA 0xfe
0000            307   _TMR3H          DATA 0x95
0000            308   _TMR3L          DATA 0x94
0000            309   _TMR3RLH        DATA 0x93
0000            310   _TMR3RLL        DATA 0x92
0000            311   _TMR4CN0        DATA 0x98
0000            312   _TMR4CN1        DATA 0xff
0000            313   _TMR4H          DATA 0xa5
0000            314   _TMR4L          DATA 0xa4
0000            315   _TMR4RLH        DATA 0xa3
0000            316   _TMR4RLL        DATA 0xa2
0000            317   _TMR5CN0        DATA 0xc0
0000            318   _TMR5CN1        DATA 0xf1
0000            319   _TMR5H          DATA 0xd5
0000            320   _TMR5L          DATA 0xd4
0000            321   _TMR5RLH        DATA 0xd3
0000            322   _TMR5RLL        DATA 0xd2
0000            323   _UART0PCF       DATA 0xd9
0000            324   _UART1FCN0      DATA 0x9d
0000            325   _UART1FCN1      DATA 0xd8
0000            326   _UART1FCT       DATA 0xfa
0000            327   _UART1LIN       DATA 0x9e
0000            328   _UART1PCF       DATA 0xda
0000            329   _VDM0CN         DATA 0xff
0000            330   _WDTCN          DATA 0x97
0000            331   _XBR0           DATA 0xe1
0000            332   _XBR1           DATA 0xe2
0000            333   _XBR2           DATA 0xe3
0000            334   _XOSC0CN        DATA 0x86
0000            335   _DPTR           DATA 0x8382
0000            336   _TMR2RL         DATA 0xcbca
0000            337   _TMR3RL         DATA 0x9392
0000            338   _TMR4RL         DATA 0xa3a2
0000            339   _TMR5RL         DATA 0xd3d2
0000            340   _TMR0           DATA 0x8c8a
0000            341   _TMR1           DATA 0x8d8b
0000            342   _TMR2           DATA 0xcfce
0000            343   _TMR3           DATA 0x9594
0000            344   _TMR4           DATA 0xa5a4
0000            345   _TMR5           DATA 0xd5d4
0000            346   _SBRL1          DATA 0x9695
0000            347   _PCA0           DATA 0xfaf9
0000            348   _PCA0CP0        DATA 0xfcfb
0000            349   _PCA0CP1        DATA 0xeae9
0000            350   _PCA0CP2        DATA 0xeceb
0000            351   _PCA0CP3        DATA 0xf5f4
0000            352   _PCA0CP4        DATA 0x8584
0000            353   _PCA0CP5        DATA 0xdedd
0000            354   _ADC0ASA        DATA 0xb6b5
0000            355   _ADC0GT         DATA 0xc4c3
0000            356   _ADC0           DATA 0xbebd
0000            357   _ADC0LT         DATA 0xc6c5
0000            358   _DAC0           DATA 0x8584
0000            359   _DAC1           DATA 0x8a89
0000            360   _DAC2           DATA 0x8c8b
0000            361   _DAC3           DATA 0x8e8d
0000            362   ;--------------------------------------------------------
0000            363   ; special function bits
0000            364   ;--------------------------------------------------------
0000            365   _ACC_0          BIT 0xe0
0000            366   _ACC_1          BIT 0xe1
0000            367   _ACC_2          BIT 0xe2
0000            368   _ACC_3          BIT 0xe3
0000            369   _ACC_4          BIT 0xe4
0000            370   _ACC_5          BIT 0xe5
0000            371   _ACC_6          BIT 0xe6
0000            372   _ACC_7          BIT 0xe7
0000            373   _TEMPE          BIT 0xe8
0000            374   _ADGN0          BIT 0xe9
0000            375   _ADGN1          BIT 0xea
0000            376   _ADWINT         BIT 0xeb
0000            377   _ADBUSY         BIT 0xec
0000            378   _ADINT          BIT 0xed
0000            379   _IPOEN          BIT 0xee
0000            380   _ADEN           BIT 0xef
0000            381   _B_0            BIT 0xf0
0000            382   _B_1            BIT 0xf1
0000            383   _B_2            BIT 0xf2
0000            384   _B_3            BIT 0xf3
0000            385   _B_4            BIT 0xf4
0000            386   _B_5            BIT 0xf5
0000            387   _B_6            BIT 0xf6
0000            388   _B_7            BIT 0xf7
0000            389   _C0FIF          BIT 0xe8
0000            390   _C0RIF          BIT 0xe9
0000            391   _C1FIF          BIT 0xea
0000            392   _C1RIF          BIT 0xeb
0000            393   _C2FIF          BIT 0xec
0000            394   _C2RIF          BIT 0xed
0000            395   _C3FIF          BIT 0xee
0000            396   _C3RIF          BIT 0xef
0000            397   _D1SRC0         BIT 0x88
0000            398   _D1SRC1         BIT 0x89
0000            399   _D1AMEN         BIT 0x8a
0000            400   _D01REFSL       BIT 0x8b
0000            401   _D3SRC0         BIT 0x8c
0000            402   _D3SRC1         BIT 0x8d
0000            403   _D3AMEN         BIT 0x8e
0000            404   _D23REFSL       BIT 0x8f
0000            405   _D0UDIS         BIT 0x98
0000            406   _D1UDIS         BIT 0x99
0000            407   _D2UDIS         BIT 0x9a
0000            408   _D3UDIS         BIT 0x9b
0000            409   _EX0            BIT 0xa8
0000            410   _ET0            BIT 0xa9
0000            411   _EX1            BIT 0xaa
0000            412   _ET1            BIT 0xab
0000            413   _ES0            BIT 0xac
0000            414   _ET2            BIT 0xad
0000            415   _ESPI0          BIT 0xae
0000            416   _EA             BIT 0xaf
0000            417   _PX0            BIT 0xb8
0000            418   _PT0            BIT 0xb9
0000            419   _PX1            BIT 0xba
0000            420   _PT1            BIT 0xbb
0000            421   _PS0            BIT 0xbc
0000            422   _PT2            BIT 0xbd
0000            423   _PSPI0          BIT 0xbe
0000            424   _P0_0           BIT 0x80
0000            425   _P0_1           BIT 0x81
0000            426   _P0_2           BIT 0x82
0000            427   _P0_3           BIT 0x83
0000            428   _P0_4           BIT 0x84
0000            429   _P0_5           BIT 0x85
0000            430   _P0_6           BIT 0x86
0000            431   _P0_7           BIT 0x87
0000            432   _P1_0           BIT 0x90
0000            433   _P1_1           BIT 0x91
0000            434   _P1_2           BIT 0x92
0000            435   _P1_3           BIT 0x93
0000            436   _P1_4           BIT 0x94
0000            437   _P1_5           BIT 0x95
0000            438   _P1_6           BIT 0x96
0000            439   _P1_7           BIT 0x97
0000            440   _P2_0           BIT 0xa0
0000            441   _P2_1           BIT 0xa1
0000            442   _P2_2           BIT 0xa2
0000            443   _P2_3           BIT 0xa3
0000            444   _P2_4           BIT 0xa4
0000            445   _P2_5           BIT 0xa5
0000            446   _P2_6           BIT 0xa6
0000            447   _P3_0           BIT 0xb0
0000            448   _P3_1           BIT 0xb1
0000            449   _P3_2           BIT 0xb2
0000            450   _P3_3           BIT 0xb3
0000            451   _P3_4           BIT 0xb4
0000            452   _P3_7           BIT 0xb7
0000            453   _CCF0           BIT 0xd8
0000            454   _CCF1           BIT 0xd9
0000            455   _CCF2           BIT 0xda
0000            456   _CCF3           BIT 0xdb
0000            457   _CCF4           BIT 0xdc
0000            458   _CCF5           BIT 0xdd
0000            459   _CR             BIT 0xde
0000            460   _CF             BIT 0xdf
0000            461   _PARITY         BIT 0xd0
0000            462   _F1             BIT 0xd1
0000            463   _OV             BIT 0xd2
0000            464   _RS0            BIT 0xd3
0000            465   _RS1            BIT 0xd4
0000            466   _F0             BIT 0xd5
0000            467   _AC             BIT 0xd6
0000            468   _CY             BIT 0xd7
0000            469   _RI             BIT 0x98
0000            470   _TI             BIT 0x99
0000            471   _RB8            BIT 0x9a
0000            472   _TB8            BIT 0x9b
0000            473   _REN            BIT 0x9c
0000            474   _CE             BIT 0x9d
0000            475   _SMODE          BIT 0x9e
0000            476   _RI1            BIT 0xc8
0000            477   _TI1            BIT 0xc9
0000            478   _RBX1           BIT 0xca
0000            479   _TBX1           BIT 0xcb
0000            480   _REN1           BIT 0xcc
0000            481   _PERR1          BIT 0xcd
0000            482   _OVR1           BIT 0xce
0000            483   _SI             BIT 0xc0
0000            484   _ACK            BIT 0xc1
0000            485   _ARBLOST        BIT 0xc2
0000            486   _ACKRQ          BIT 0xc3
0000            487   _STO            BIT 0xc4
0000            488   _STA            BIT 0xc5
0000            489   _TXMODE         BIT 0xc6
0000            490   _MASTER         BIT 0xc7
0000            491   _SPIEN          BIT 0xf8
0000            492   _TXNF           BIT 0xf9
0000            493   _NSSMD0         BIT 0xfa
0000            494   _NSSMD1         BIT 0xfb
0000            495   _RXOVRN         BIT 0xfc
0000            496   _MODF           BIT 0xfd
0000            497   _WCOL           BIT 0xfe
0000            498   _SPIF           BIT 0xff
0000            499   _IT0            BIT 0x88
0000            500   _IE0            BIT 0x89
0000            501   _IT1            BIT 0x8a
0000            502   _IE1            BIT 0x8b
0000            503   _TR0            BIT 0x8c
0000            504   _TF0            BIT 0x8d
0000            505   _TR1            BIT 0x8e
0000            506   _TF1            BIT 0x8f
0000            507   _T2XCLK0        BIT 0xc8
0000            508   _T2XCLK1        BIT 0xc9
0000            509   _TR2            BIT 0xca
0000            510   _T2SPLIT        BIT 0xcb
0000            511   _TF2CEN         BIT 0xcc
0000            512   _TF2LEN         BIT 0xcd
0000            513   _TF2L           BIT 0xce
0000            514   _TF2H           BIT 0xcf
0000            515   _T4XCLK0        BIT 0x98
0000            516   _T4XCLK1        BIT 0x99
0000            517   _TR4            BIT 0x9a
0000            518   _T4SPLIT        BIT 0x9b
0000            519   _TF4CEN         BIT 0x9c
0000            520   _TF4LEN         BIT 0x9d
0000            521   _TF4L           BIT 0x9e
0000            522   _TF4H           BIT 0x9f
0000            523   _T5XCLK0        BIT 0xc0
0000            524   _T5XCLK1        BIT 0xc1
0000            525   _TR5            BIT 0xc2
0000            526   _T5SPLIT        BIT 0xc3
0000            527   _TF5CEN         BIT 0xc4
0000            528   _TF5LEN         BIT 0xc5
0000            529   _TF5L           BIT 0xc6
0000            530   _TF5H           BIT 0xc7
0000            531   _RIE            BIT 0xd8
0000            532   _RXTO0          BIT 0xd9
0000            533   _RXTO1          BIT 0xda
0000            534   _RFRQ           BIT 0xdb
0000            535   _TIE            BIT 0xdc
0000            536   _TXHOLD         BIT 0xdd
0000            537   _TXNF1          BIT 0xde
0000            538   _TFRQ           BIT 0xdf
0000            539   ;--------------------------------------------------------
0000            540   ; overlayable register banks
0000            541   ;--------------------------------------------------------
0000            542            rbank0 segment data overlay
0000            543   ;--------------------------------------------------------
0000            544   ; overlayable bit register bank
0000            545   ;--------------------------------------------------------
0000            546            rseg BIT_BANK
0000            547   bits:
0000            548            ds 1
0001            549            b0 equ  bits.0 
0001            550            b1 equ  bits.1 
0001            551            b2 equ  bits.2 
0001            552            b3 equ  bits.3 
0001            553            b4 equ  bits.4 
0001            554            b5 equ  bits.5 
0001            555            b6 equ  bits.6 
0001            556            b7 equ  bits.7 
0001            557   ;--------------------------------------------------------
0001            558   ; internal ram data
0001            559   ;--------------------------------------------------------
0000            560            rseg R_DSEG
0000            561   _getstr1_PARM_2:
0000            562            ds 1
0001            563   _Auto_mode_slave_sloc0_1_0:
0001            564            ds 2
0003            565   _Joystick_Control_PARM_2:
0003            566            ds 3
0006            567   _Joystick_Control_sloc0_1_0:
0006            568            ds 2
0008            569   _Joystick_Control_sloc1_1_0:
0008            570            ds 1
0009            571   _Joystick_Control_sloc2_1_0:
0009            572            ds 2
000B            573   _Joystick_Control_sloc3_1_0:
000B            574            ds 1
000C            575   _Joystick_Control_sloc4_1_0:
000C            576            ds 2
000E            577   _Joystick_Control_sloc5_1_0:
000E            578            ds 4
0012            579   _Joystick_Control_sloc6_1_0:
0012            580            ds 2
0014            581   _main_pick_char_1_200:
0014            582            ds 1
0015            583   ;--------------------------------------------------------
0015            584   ; overlayable items in internal ram 
0015            585   ;--------------------------------------------------------
0000            586            rseg    R_OSEG
0000            587            rseg    R_OSEG
0000            588            rseg    R_OSEG
0000            589            rseg    R_OSEG
0000            590            rseg    R_OSEG
0000            591   _InitPinADC_PARM_2:
0000            592            ds 1
0001            593            rseg    R_OSEG
0001            594            rseg    R_OSEG
0001            595   _check_bound_PARM_2:
0001            596            ds 2
0003            597   ;--------------------------------------------------------
0003            598   ; indirectly addressable internal ram data
0003            599   ;--------------------------------------------------------
0000            600            rseg R_ISEG
0000            601   _buff:
0000            602            ds 20
0014            603   ;--------------------------------------------------------
0014            604   ; absolute internal ram data
0014            605   ;--------------------------------------------------------
0000            606            DSEG
0000            607   ;--------------------------------------------------------
0000            608   ; bit data
0000            609   ;--------------------------------------------------------
0000            610            rseg R_BSEG
0000            611   ;--------------------------------------------------------
0000            612   ; paged external ram data
0000            613   ;--------------------------------------------------------
0000            614            rseg R_PSEG
0000            615   ;--------------------------------------------------------
0000            616   ; external ram data
0000            617   ;--------------------------------------------------------
0000            618            rseg R_XSEG
0000            619   _freq100:
0000            620            ds 4
0004            621   _d1:
0004            622            ds 2
0006            623   _d2:
0006            624            ds 2
0008            625   _dig_x1:
0008            626            ds 1
0009            627   _dig_x2:
0009            628            ds 1
000A            629   _dig_y1:
000A            630            ds 1
000B            631   _dig_y2:
000B            632            ds 1
000C            633   _dig_z1:
000C            634            ds 2
000E            635   _dig_z2:
000E            636            ds 2
0010            637   _dig_z3:
0010            638            ds 2
0012            639   _dig_z4:
0012            640            ds 2
0014            641   _dig_xy1:
0014            642            ds 1
0015            643   _dig_xy2:
0015            644            ds 1
0016            645   _dig_xyz1:
0016            646            ds 2
0018            647   _temp:
0018            648            ds 4
001C            649   _ReadHX711_dataa_1_133:
001C            650            ds 4
0020            651   _ReadHX711_j_1_133:
0020            652            ds 1
0021            653   _Auto_mode_slave_command_1_168:
0021            654            ds 2
0023            655   _Auto_mode_slave_state_res_1_168:
0023            656            ds 2
0025            657   _Auto_mode_slave_dummy_1_168:
0025            658            ds 2
0027            659   _Joystick_Control_vx_error_1_177:
0027            660            ds 2
0029            661   _main_vx_1_200:
0029            662            ds 2
002B            663   _main_vy_1_200:
002B            664            ds 2
002D            665   _main_auto_mode_1_200:
002D            666            ds 2
002F            667   ;--------------------------------------------------------
002F            668   ; absolute external ram data
002F            669   ;--------------------------------------------------------
0000            670            XSEG
0000            671   ;--------------------------------------------------------
0000            672   ; external initialized ram data
0000            673   ;--------------------------------------------------------
0000            674            rseg R_IXSEG
0000            675   _pwm_counter:
0000            676            ds 2
0002            677   _servo_counter:
0002            678            ds 2
0004            679   _pwm_left:
0004            680            ds 1
0005            681   _pwm_right:
0005            682            ds 1
0006            683   _L_motor_dir:
0006            684            ds 1
0007            685   _R_motor_dir:
0007            686            ds 1
0008            687   _servo_base:
0008            688            ds 1
0009            689   _servo_arm:
0009            690            ds 1
000A            691   _vx_thres:
000A            692            ds 2
000C            693   _vy_thres:
000C            694            ds 2
000E            695   _vx:
000E            696            ds 2
0010            697   _vy:
0010            698            ds 2
0012            699   _fre_mea_count:
0012            700            ds 2
0014            701   _weight_mea_count:
0014            702            ds 2
0016            703   _seed:
0016            704            ds 2
0018            705   _pwm_corr:
0018            706            ds 4
001C            707   _curr_angle:
001C            708            ds 4
0020            709   _raw_angle:
0020            710            ds 4
0024            711   _last_raw_angle:
0024            712            ds 4
0028            713   _angle_diff:
0028            714            ds 4
002C            715   _mea_yes:
002C            716            ds 1
002D            717   _weight:
002D            718            ds 2
0000            719            rseg R_HOME
0000            720            rseg R_GSINIT
0000            721            rseg R_CSEG
0000            722   ;--------------------------------------------------------
0000            723   ; Reset entry point and interrupt vectors
0000            724   ;--------------------------------------------------------
0000            725            CSEG at 0x0000
0000 020000     726            ljmp    _crt0
0093            727            CSEG at 0x0093
0093 020000     728            ljmp    _Timer5_ISR
0096            729   ;--------------------------------------------------------
0096            730   ; global & static initialisations
0096            731   ;--------------------------------------------------------
0000            732            rseg R_HOME
0000            733            rseg R_GSINIT
0000            734            rseg R_GSINIT
0000            735   ;--------------------------------------------------------
0000            736   ; data variables initialization
0000            737   ;--------------------------------------------------------
0000            738            rseg R_DINIT
0000            739            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            740   ;--------------------------------------------------------
0000            741   ; code
0000            742   ;--------------------------------------------------------
0000            743            rseg R_CSEG
0000            744   ;------------------------------------------------------------
0000            745   ;Allocation info for local variables in function '_c51_external_startup'
0000            746   ;------------------------------------------------------------
0000            747   ;------------------------------------------------------------
0000            748   ;        main.c:111: char _c51_external_startup (void)
0000            749   ;        -----------------------------------------
0000            750   ;         function _c51_external_startup
0000            751   ;        -----------------------------------------
0000            752   __c51_external_startup:
0000            753            using   0
0000            754   ;        main.c:114: SFRPAGE = 0x00;
0000 75A700     755            mov     _SFRPAGE,#0x00
0003            756   ;        main.c:115: WDTCN = 0xDE; //First key
0003 7597DE     757            mov     _WDTCN,#0xDE
0006            758   ;        main.c:116: WDTCN = 0xAD; //Second key
0006 7597AD     759            mov     _WDTCN,#0xAD
0009            760   ;        main.c:118: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     761            mov     _VDM0CN,#0x80
000C            762   ;        main.c:119: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     763            mov     _RSTSRC,#0x06
000F            764   ;        main.c:126: SFRPAGE = 0x10;
000F 75A710     765            mov     _SFRPAGE,#0x10
0012            766   ;        main.c:127: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     767            mov     _PFE0CN,#0x20
0015            768   ;        main.c:128: SFRPAGE = 0x00;
0015 75A700     769            mov     _SFRPAGE,#0x00
0018            770   ;        main.c:149: CLKSEL = 0x00;
0018 75A900     771            mov     _CLKSEL,#0x00
001B            772   ;        main.c:150: CLKSEL = 0x00;
001B 75A900     773            mov     _CLKSEL,#0x00
001E            774   ;        main.c:151: while ((CLKSEL & 0x80) == 0);
001E            775   L002001?:
001E E5A9       776            mov     a,_CLKSEL
0020 30E7B0     777            jnb     acc.7,L002001?
0023            778   ;        main.c:152: CLKSEL = 0x03;
0023 75A903     779            mov     _CLKSEL,#0x03
0026            780   ;        main.c:153: CLKSEL = 0x03;
0026 75A903     781            mov     _CLKSEL,#0x03
0029            782   ;        main.c:154: while ((CLKSEL & 0x80) == 0);
0029            783   L002004?:
0029 E5A9       784            mov     a,_CLKSEL
002B 30E730     785            jnb     acc.7,L002004?
002E            786   ;        main.c:160: P0MDOUT |= 0b_1100_0000;
002E 43A4C0     787            orl     _P0MDOUT,#0xC0
0031            788   ;        main.c:161: P1MDOUT |= 0b_0000_0110;
0031 43A506     789            orl     _P1MDOUT,#0x06
0034            790   ;        main.c:162: P2MDOUT |= 0b_0000_0001; // P2.0 in push-pull mode
0034 43A601     791            orl     _P2MDOUT,#0x01
0037            792   ;        main.c:163: XBR0     = 0b_0000_0011; // UART0E = 1 and SPI0E = 1 0b_0000_0011               
0037 75E103     793            mov     _XBR0,#0x03
003A            794   ;        main.c:164: XBR1     = 0b_0000_0000;
003A 75E200     795            mov     _XBR1,#0x00
003D            796   ;        main.c:165: XBR2     = 0b_0100_0001; // Enable crossbar and uart 1
003D 75E341     797            mov     _XBR2,#0x41
0040            798   ;        main.c:166: P0SKIP       = 0b_0000_0111; 
0040 75D407     799            mov     _P0SKIP,#0x07
0043            800   ;        main.c:167: P1SKIP   = 0b_1111_1001;
0043 75D5F9     801            mov     _P1SKIP,#0xF9
0046            802   ;        main.c:172: SCON0 = 0x10;
0046 759810     803            mov     _SCON0,#0x10
0049            804   ;        main.c:173: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     805            mov     _TH1,#0xE6
004C            806   ;        main.c:174: TL1 = TH1;      // Init Timer1
004C 858D8B     807            mov     _TL1,_TH1
004F            808   ;        main.c:175: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     809            anl     _TMOD,#0x0F
0052            810   ;        main.c:176: TMOD |=  0x20;                       
0052 438920     811            orl     _TMOD,#0x20
0055            812   ;        main.c:177: TR1 = 1; // START Timer1
0055 D28E       813            setb    _TR1
0057            814   ;        main.c:178: TI = 1;  // Indicate TX0 ready
0057 D299       815            setb    _TI
0059            816   ;        main.c:179: P2_0=1; // 'set' pin to 1 is normal operation mode.
0059 D2A0       817            setb    _P2_0
005B            818   ;        main.c:182: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
005B 75A211     819            mov     _SPI0CKR,#0x11
005E            820   ;        main.c:183: SPI0CFG = 0b_1110_0000; // SPI mode 3
005E 75A1E0     821            mov     _SPI0CFG,#0xE0
0061            822   ;        main.c:184: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0061 75F801     823            mov     _SPI0CN0,#0x01
0064            824   ;        main.c:187: SFRPAGE=0x10;
0064 75A710     825            mov     _SFRPAGE,#0x10
0067            826   ;        main.c:188: TMR5CN0=0x00;
0067 75C000     827            mov     _TMR5CN0,#0x00
006A            828   ;        main.c:189: TMR5=0xffff;   // Set to reload immediately
006A 75D4FF     829            mov     _TMR5,#0xFF
006D 75D5FF     830            mov     (_TMR5 >> 8),#0xFF
0070            831   ;        main.c:190: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
0070 43F308     832            orl     _EIE2,#0x08
0073            833   ;        main.c:191: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0073 D2C2       834            setb    _TR5
0075            835   ;        main.c:193: EA=1;  // Enable global interrupts
0075 D2AF       836            setb    _EA
0077            837   ;        main.c:194: SFRPAGE=0x00;
0077 75A700     838            mov     _SFRPAGE,#0x00
007A            839   ;        main.c:196: return 0;
007A 758200     840            mov     dpl,#0x00
007D 22         841            ret
007E            842   ;------------------------------------------------------------
007E            843   ;Allocation info for local variables in function 'Timer3us'
007E            844   ;------------------------------------------------------------
007E            845   ;us                        Allocated to registers r2 
007E            846   ;i                         Allocated to registers r3 
007E            847   ;------------------------------------------------------------
007E            848   ;        main.c:200: void Timer3us(unsigned char us)
007E            849   ;        -----------------------------------------
007E            850   ;         function Timer3us
007E            851   ;        -----------------------------------------
007E            852   _Timer3us:
007E AA82       853            mov     r2,dpl
0080            854   ;        main.c:205: CKCON0|=0b_0100_0000;
0080 438E40     855            orl     _CKCON0,#0x40
0083            856   ;        main.c:207: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0083 7592B8     857            mov     _TMR3RL,#0xB8
0086 7593FF     858            mov     (_TMR3RL >> 8),#0xFF
0089            859   ;        main.c:208: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0089 859294     860            mov     _TMR3,_TMR3RL
008C 859395     861            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
008F            862   ;        main.c:210: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
008F 759104     863            mov     _TMR3CN0,#0x04
0092            864   ;        main.c:211: for (i = 0; i < us; i++)       // Count <us> overflows
0092 7B00       865            mov     r3,#0x00
0094            866   L003004?:
0094 C3         867            clr     c
0095 EB         868            mov     a,r3
0096 9A         869            subb    a,r2
0097 5000       870            jnc     L003007?
0099            871   ;        main.c:213: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0099            872   L003001?:
0099 E591       873            mov     a,_TMR3CN0
009B 30E730     874            jnb     acc.7,L003001?
009E            875   ;        main.c:214: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
009E 53917F     876            anl     _TMR3CN0,#0x7F
00A1            877   ;        main.c:211: for (i = 0; i < us; i++)       // Count <us> overflows
00A1 0B         878            inc     r3
00A2 8000       879            sjmp    L003004?
00A4            880   L003007?:
00A4            881   ;        main.c:216: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00A4 759100     882            mov     _TMR3CN0,#0x00
00A7 22         883            ret
00A8            884   ;------------------------------------------------------------
00A8            885   ;Allocation info for local variables in function 'waitms'
00A8            886   ;------------------------------------------------------------
00A8            887   ;ms                        Allocated to registers r2 r3 
00A8            888   ;j                         Allocated to registers r4 r5 
00A8            889   ;k                         Allocated to registers r6 
00A8            890   ;------------------------------------------------------------
00A8            891   ;        main.c:219: void waitms (unsigned int ms)
00A8            892   ;        -----------------------------------------
00A8            893   ;         function waitms
00A8            894   ;        -----------------------------------------
00A8            895   _waitms:
00A8 AA82       896            mov     r2,dpl
00AA AB83       897            mov     r3,dph
00AC            898   ;        main.c:223: for(j=0; j<ms; j++)
00AC 7C00       899            mov     r4,#0x00
00AE 7D00       900            mov     r5,#0x00
00B0            901   L004005?:
00B0 C3         902            clr     c
00B1 EC         903            mov     a,r4
00B2 9A         904            subb    a,r2
00B3 ED         905            mov     a,r5
00B4 9B         906            subb    a,r3
00B5 5000       907            jnc     L004009?
00B7            908   ;        main.c:224: for (k=0; k<4; k++) Timer3us(250);
00B7 7E00       909            mov     r6,#0x00
00B9            910   L004001?:
00B9 BE0470     911            cjne    r6,#0x04,L004018?
00BC            912   L004018?:
00BC 5000       913            jnc     L004007?
00BE 7582FA     914            mov     dpl,#0xFA
00C1 C002       915            push    ar2
00C3 C003       916            push    ar3
00C5 C004       917            push    ar4
00C7 C005       918            push    ar5
00C9 C006       919            push    ar6
00CB 120000     920            lcall   _Timer3us
00CE D006       921            pop     ar6
00D0 D005       922            pop     ar5
00D2 D004       923            pop     ar4
00D4 D003       924            pop     ar3
00D6 D002       925            pop     ar2
00D8 0E         926            inc     r6
00D9 8000       927            sjmp    L004001?
00DB            928   L004007?:
00DB            929   ;        main.c:223: for(j=0; j<ms; j++)
00DB 0C         930            inc     r4
00DC BC00B0     931            cjne    r4,#0x00,L004005?
00DF 0D         932            inc     r5
00E0 8000       933            sjmp    L004005?
00E2            934   L004009?:
00E2 22         935            ret
00E3            936   ;------------------------------------------------------------
00E3            937   ;Allocation info for local variables in function 'UART1_Init'
00E3            938   ;------------------------------------------------------------
00E3            939   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00E3            940   ;------------------------------------------------------------
00E3            941   ;        main.c:516: void UART1_Init (unsigned long baudrate)
00E3            942   ;        -----------------------------------------
00E3            943   ;         function UART1_Init
00E3            944   ;        -----------------------------------------
00E3            945   _UART1_Init:
00E3 AA82       946            mov     r2,dpl
00E5 AB83       947            mov     r3,dph
00E7 ACF0       948            mov     r4,b
00E9 FD         949            mov     r5,a
00EA            950   ;        main.c:518: SFRPAGE = 0x20;
00EA 75A720     951            mov     _SFRPAGE,#0x20
00ED            952   ;        main.c:519: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00ED 75930C     953            mov     _SMOD1,#0x0C
00F0            954   ;        main.c:520: SCON1 = 0x10;
00F0 75C810     955            mov     _SCON1,#0x10
00F3            956   ;        main.c:521: SBCON1 =0x00;   // disable baud rate generator
00F3 759400     957            mov     _SBCON1,#0x00
00F6            958   ;        main.c:522: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00F6 8A00       959            mov     __divulong_PARM_2,r2
00F8 8B01       960            mov     (__divulong_PARM_2 + 1),r3
00FA 8C02       961            mov     (__divulong_PARM_2 + 2),r4
00FC 8D03       962            mov     (__divulong_PARM_2 + 3),r5
00FE 90A200     963            mov     dptr,#0xA200
0101 75F04A     964            mov     b,#0x4A
0104 7404       965            mov     a,#0x04
0106 120000     966            lcall   __divulong
0109 AA82       967            mov     r2,dpl
010B AB83       968            mov     r3,dph
010D ACF0       969            mov     r4,b
010F FD         970            mov     r5,a
0110 750018     971            mov     __divulong_PARM_2,#0x18
0113 E4         972            clr     a
0114 F501       973            mov     (__divulong_PARM_2 + 1),a
0116 F502       974            mov     (__divulong_PARM_2 + 2),a
0118 F503       975            mov     (__divulong_PARM_2 + 3),a
011A 8A82       976            mov     dpl,r2
011C 8B83       977            mov     dph,r3
011E 8CF0       978            mov     b,r4
0120 ED         979            mov     a,r5
0121 120000     980            lcall   __divulong
0124 AA82       981            mov     r2,dpl
0126 AB83       982            mov     r3,dph
0128 ACF0       983            mov     r4,b
012A FD         984            mov     r5,a
012B E4         985            clr     a
012C C3         986            clr     c
012D 9A         987            subb    a,r2
012E FA         988            mov     r2,a
012F E4         989            clr     a
0130 9B         990            subb    a,r3
0131 FB         991            mov     r3,a
0132 7401       992            mov     a,#0x01
0134 9C         993            subb    a,r4
0135 E4         994            clr     a
0136 9D         995            subb    a,r5
0137 8A95       996            mov     _SBRL1,r2
0139 8B96       997            mov     (_SBRL1 >> 8),r3
013B            998   ;        main.c:523: TI1 = 1; // indicate ready for TX
013B D2C9       999            setb    _TI1
013D           1000   ;        main.c:524: SBCON1 |= 0x40;   // enable baud rate generator
013D 439440    1001            orl     _SBCON1,#0x40
0140           1002   ;        main.c:525: SFRPAGE = 0x00;
0140 75A700    1003            mov     _SFRPAGE,#0x00
0143 22        1004            ret
0144           1005   ;------------------------------------------------------------
0144           1006   ;Allocation info for local variables in function 'putchar1'
0144           1007   ;------------------------------------------------------------
0144           1008   ;c                         Allocated to registers r2 
0144           1009   ;------------------------------------------------------------
0144           1010   ;        main.c:528: void putchar1 (char c) 
0144           1011   ;        -----------------------------------------
0144           1012   ;         function putchar1
0144           1013   ;        -----------------------------------------
0144           1014   _putchar1:
0144 AA82      1015            mov     r2,dpl
0146           1016   ;        main.c:530: SFRPAGE = 0x20;
0146 75A720    1017            mov     _SFRPAGE,#0x20
0149           1018   ;        main.c:531: while (!TI1);
0149           1019   L006001?:
0149           1020   ;        main.c:532: TI1=0;
0149 10C900    1021            jbc     _TI1,L006008?
014C 8000      1022            sjmp    L006001?
014E           1023   L006008?:
014E           1024   ;        main.c:533: SBUF1 = c;
014E 8A92      1025            mov     _SBUF1,r2
0150           1026   ;        main.c:534: SFRPAGE = 0x00;
0150 75A700    1027            mov     _SFRPAGE,#0x00
0153 22        1028            ret
0154           1029   ;------------------------------------------------------------
0154           1030   ;Allocation info for local variables in function 'sendstr1'
0154           1031   ;------------------------------------------------------------
0154           1032   ;s                         Allocated to registers r2 r3 r4 
0154           1033   ;------------------------------------------------------------
0154           1034   ;        main.c:537: void sendstr1 (char * s)
0154           1035   ;        -----------------------------------------
0154           1036   ;         function sendstr1
0154           1037   ;        -----------------------------------------
0154           1038   _sendstr1:
0154 AA82      1039            mov     r2,dpl
0156 AB83      1040            mov     r3,dph
0158 ACF0      1041            mov     r4,b
015A           1042   ;        main.c:539: while(*s)
015A           1043   L007001?:
015A 8A82      1044            mov     dpl,r2
015C 8B83      1045            mov     dph,r3
015E 8CF0      1046            mov     b,r4
0160 120000    1047            lcall   __gptrget
0163 FD        1048            mov     r5,a
0164 6000      1049            jz      L007004?
0166           1050   ;        main.c:541: putchar1(*s);
0166 8D82      1051            mov     dpl,r5
0168 C002      1052            push    ar2
016A C003      1053            push    ar3
016C C004      1054            push    ar4
016E 120000    1055            lcall   _putchar1
0171 D004      1056            pop     ar4
0173 D003      1057            pop     ar3
0175 D002      1058            pop     ar2
0177           1059   ;        main.c:542: s++;        
0177 0A        1060            inc     r2
0178 BA0040    1061            cjne    r2,#0x00,L007001?
017B 0B        1062            inc     r3
017C 8000      1063            sjmp    L007001?
017E           1064   L007004?:
017E 22        1065            ret
017F           1066   ;------------------------------------------------------------
017F           1067   ;Allocation info for local variables in function 'getchar1'
017F           1068   ;------------------------------------------------------------
017F           1069   ;c                         Allocated with name '_getchar1_c_1_98'
017F           1070   ;------------------------------------------------------------
017F           1071   ;        main.c:546: char getchar1 (void)
017F           1072   ;        -----------------------------------------
017F           1073   ;         function getchar1
017F           1074   ;        -----------------------------------------
017F           1075   _getchar1:
017F           1076   ;        main.c:549: SFRPAGE = 0x20;
017F 75A720    1077            mov     _SFRPAGE,#0x20
0182           1078   ;        main.c:550: while (!RI1);
0182           1079   L008001?:
0182           1080   ;        main.c:551: RI1=0;
0182 10C840    1081            jbc     _RI1,L008008?
0185 8000      1082            sjmp    L008001?
0187           1083   L008008?:
0187           1084   ;        main.c:553: SCON1&=0b_0011_1111;
0187 53C83F    1085            anl     _SCON1,#0x3F
018A           1086   ;        main.c:554: c = SBUF1;
018A 859282    1087            mov     dpl,_SBUF1
018D           1088   ;        main.c:555: SFRPAGE = 0x00;
018D 75A700    1089            mov     _SFRPAGE,#0x00
0190           1090   ;        main.c:556: return (c);
0190 22        1091            ret
0191           1092   ;------------------------------------------------------------
0191           1093   ;Allocation info for local variables in function 'getchar1_with_timeout'
0191           1094   ;------------------------------------------------------------
0191           1095   ;c                         Allocated with name '_getchar1_with_timeout_c_1_100'
0191           1096   ;timeout                   Allocated with name '_getchar1_with_timeout_timeout_1_100'
0191           1097   ;------------------------------------------------------------
0191           1098   ;        main.c:559: char getchar1_with_timeout (void)
0191           1099   ;        -----------------------------------------
0191           1100   ;         function getchar1_with_timeout
0191           1101   ;        -----------------------------------------
0191           1102   _getchar1_with_timeout:
0191           1103   ;        main.c:563: SFRPAGE = 0x20;
0191 75A720    1104            mov     _SFRPAGE,#0x20
0194           1105   ;        main.c:565: while (!RI1)
0194 7A00      1106            mov     r2,#0x00
0196 7B00      1107            mov     r3,#0x00
0198           1108   L009003?:
0198 20C8C0    1109            jb      _RI1,L009005?
019B           1110   ;        main.c:567: SFRPAGE = 0x00;
019B 75A700    1111            mov     _SFRPAGE,#0x00
019E           1112   ;        main.c:568: Timer3us(20);
019E 758214    1113            mov     dpl,#0x14
01A1 C002      1114            push    ar2
01A3 C003      1115            push    ar3
01A5 120000    1116            lcall   _Timer3us
01A8 D003      1117            pop     ar3
01AA D002      1118            pop     ar2
01AC           1119   ;        main.c:569: SFRPAGE = 0x20;
01AC 75A720    1120            mov     _SFRPAGE,#0x20
01AF           1121   ;        main.c:570: timeout++;
01AF 0A        1122            inc     r2
01B0 BA0000    1123            cjne    r2,#0x00,L009012?
01B3 0B        1124            inc     r3
01B4           1125   L009012?:
01B4           1126   ;        main.c:571: if(timeout==25000)
01B4 BAA880    1127            cjne    r2,#0xA8,L009003?
01B7 BB6180    1128            cjne    r3,#0x61,L009003?
01BA           1129   ;        main.c:573: SFRPAGE = 0x00;
01BA 75A700    1130            mov     _SFRPAGE,#0x00
01BD           1131   ;        main.c:574: return ('\n'); // Timeout after half second
01BD 75820A    1132            mov     dpl,#0x0A
01C0 22        1133            ret
01C1           1134   L009005?:
01C1           1135   ;        main.c:577: RI1=0;
01C1 C2C8      1136            clr     _RI1
01C3           1137   ;        main.c:579: SCON1&=0b_0011_1111;
01C3 53C83F    1138            anl     _SCON1,#0x3F
01C6           1139   ;        main.c:580: c = SBUF1;
01C6 859282    1140            mov     dpl,_SBUF1
01C9           1141   ;        main.c:581: SFRPAGE = 0x00;
01C9 75A700    1142            mov     _SFRPAGE,#0x00
01CC           1143   ;        main.c:582: return (c);
01CC 22        1144            ret
01CD           1145   ;------------------------------------------------------------
01CD           1146   ;Allocation info for local variables in function 'getstr1'
01CD           1147   ;------------------------------------------------------------
01CD           1148   ;n                         Allocated with name '_getstr1_PARM_2'
01CD           1149   ;s                         Allocated to registers r2 r3 r4 
01CD           1150   ;c                         Allocated with name '_getstr1_c_1_104'
01CD           1151   ;cnt                       Allocated with name '_getstr1_cnt_1_104'
01CD           1152   ;------------------------------------------------------------
01CD           1153   ;        main.c:585: void getstr1 (char * s, unsigned char n)
01CD           1154   ;        -----------------------------------------
01CD           1155   ;         function getstr1
01CD           1156   ;        -----------------------------------------
01CD           1157   _getstr1:
01CD AA82      1158            mov     r2,dpl
01CF AB83      1159            mov     r3,dph
01D1 ACF0      1160            mov     r4,b
01D3           1161   ;        main.c:591: while(1)
01D3 7D00      1162            mov     r5,#0x00
01D5 8A06      1163            mov     ar6,r2
01D7 8B07      1164            mov     ar7,r3
01D9 8C00      1165            mov     ar0,r4
01DB           1166   L010007?:
01DB           1167   ;        main.c:593: c=getchar1_with_timeout();
01DB C002      1168            push    ar2
01DD C003      1169            push    ar3
01DF C004      1170            push    ar4
01E1 C005      1171            push    ar5
01E3 C006      1172            push    ar6
01E5 C007      1173            push    ar7
01E7 C000      1174            push    ar0
01E9 120000    1175            lcall   _getchar1_with_timeout
01EC A982      1176            mov     r1,dpl
01EE D000      1177            pop     ar0
01F0 D007      1178            pop     ar7
01F2 D006      1179            pop     ar6
01F4 D005      1180            pop     ar5
01F6 D004      1181            pop     ar4
01F8 D003      1182            pop     ar3
01FA D002      1183            pop     ar2
01FC           1184   ;        main.c:594: if(c=='\n')
01FC B90A80    1185            cjne    r1,#0x0A,L010002?
01FF           1186   ;        main.c:596: *s=0;
01FF 8A82      1187            mov     dpl,r2
0201 8B83      1188            mov     dph,r3
0203 8CF0      1189            mov     b,r4
0205 E4        1190            clr     a
0206           1191   ;        main.c:597: return;
0206 020000    1192            ljmp    __gptrput
0209           1193   L010002?:
0209           1194   ;        main.c:600: if (cnt<n)
0209 C3        1195            clr     c
020A ED        1196            mov     a,r5
020B 95D0      1197            subb    a,_getstr1_PARM_2
020D 5000      1198            jnc     L010004?
020F           1199   ;        main.c:602: cnt++;
020F 0D        1200            inc     r5
0210           1201   ;        main.c:603: *s=c;
0210 8E82      1202            mov     dpl,r6
0212 8F83      1203            mov     dph,r7
0214 88F0      1204            mov     b,r0
0216 E9        1205            mov     a,r1
0217 120000    1206            lcall   __gptrput
021A A3        1207            inc     dptr
021B AE82      1208            mov     r6,dpl
021D AF83      1209            mov     r7,dph
021F           1210   ;        main.c:604: s++;
021F 8E02      1211            mov     ar2,r6
0221 8F03      1212            mov     ar3,r7
0223 8804      1213            mov     ar4,r0
0225 8000      1214            sjmp    L010007?
0227           1215   L010004?:
0227           1216   ;        main.c:608: *s=0;
0227 8A82      1217            mov     dpl,r2
0229 8B83      1218            mov     dph,r3
022B 8CF0      1219            mov     b,r4
022D E4        1220            clr     a
022E           1221   ;        main.c:609: return;
022E 020000    1222            ljmp    __gptrput
0231           1223   ;------------------------------------------------------------
0231           1224   ;Allocation info for local variables in function 'RXU1'
0231           1225   ;------------------------------------------------------------
0231           1226   ;------------------------------------------------------------
0231           1227   ;        main.c:615: bit RXU1 (void)
0231           1228   ;        -----------------------------------------
0231           1229   ;         function RXU1
0231           1230   ;        -----------------------------------------
0231           1231   _RXU1:
0231           1232   ;        main.c:618: SFRPAGE = 0x20;
0231 75A720    1233            mov     _SFRPAGE,#0x20
0234           1234   ;        main.c:619: mybit=RI1;
0234 A2C8      1235            mov     c,_RI1
0236           1236   ;        main.c:620: SFRPAGE = 0x00;
0236 75A700    1237            mov     _SFRPAGE,#0x00
0239           1238   ;        main.c:621: return mybit;
0239 22        1239            ret
023A           1240   ;------------------------------------------------------------
023A           1241   ;Allocation info for local variables in function 'waitms_or_RI1'
023A           1242   ;------------------------------------------------------------
023A           1243   ;ms                        Allocated to registers r2 r3 
023A           1244   ;j                         Allocated with name '_waitms_or_RI1_j_1_112'
023A           1245   ;k                         Allocated with name '_waitms_or_RI1_k_1_112'
023A           1246   ;------------------------------------------------------------
023A           1247   ;        main.c:624: void waitms_or_RI1 (unsigned int ms)
023A           1248   ;        -----------------------------------------
023A           1249   ;         function waitms_or_RI1
023A           1250   ;        -----------------------------------------
023A           1251   _waitms_or_RI1:
023A AA82      1252            mov     r2,dpl
023C AB83      1253            mov     r3,dph
023E           1254   ;        main.c:628: for(j=0; j<ms; j++)
023E 7C00      1255            mov     r4,#0x00
0240 7D00      1256            mov     r5,#0x00
0242           1257   L012007?:
0242 C3        1258            clr     c
0243 EC        1259            mov     a,r4
0244 9A        1260            subb    a,r2
0245 ED        1261            mov     a,r5
0246 9B        1262            subb    a,r3
0247 5000      1263            jnc     L012011?
0249           1264   ;        main.c:630: for (k=0; k<4; k++)
0249 7E00      1265            mov     r6,#0x00
024B           1266   L012003?:
024B BE0400    1267            cjne    r6,#0x04,L012019?
024E           1268   L012019?:
024E 5000      1269            jnc     L012009?
0250           1270   ;        main.c:632: if(RXU1()) return;
0250 C002      1271            push    ar2
0252 C003      1272            push    ar3
0254 C004      1273            push    ar4
0256 C005      1274            push    ar5
0258 C006      1275            push    ar6
025A 120000    1276            lcall   _RXU1
025D E4        1277            clr     a
025E 33        1278            rlc     a
025F D006      1279            pop     ar6
0261 D005      1280            pop     ar5
0263 D004      1281            pop     ar4
0265 D003      1282            pop     ar3
0267 D002      1283            pop     ar2
0269 6000      1284            jz      L012002?
026B 22        1285            ret
026C           1286   L012002?:
026C           1287   ;        main.c:633: Timer3us(250);
026C 7582FA    1288            mov     dpl,#0xFA
026F C002      1289            push    ar2
0271 C003      1290            push    ar3
0273 C004      1291            push    ar4
0275 C005      1292            push    ar5
0277 C006      1293            push    ar6
0279 120000    1294            lcall   _Timer3us
027C D006      1295            pop     ar6
027E D005      1296            pop     ar5
0280 D004      1297            pop     ar4
0282 D003      1298            pop     ar3
0284 D002      1299            pop     ar2
0286           1300   ;        main.c:630: for (k=0; k<4; k++)
0286 0E        1301            inc     r6
0287 8000      1302            sjmp    L012003?
0289           1303   L012009?:
0289           1304   ;        main.c:628: for(j=0; j<ms; j++)
0289 0C        1305            inc     r4
028A BC0040    1306            cjne    r4,#0x00,L012007?
028D 0D        1307            inc     r5
028E 8000      1308            sjmp    L012007?
0290           1309   L012011?:
0290 22        1310            ret
0291           1311   ;------------------------------------------------------------
0291           1312   ;Allocation info for local variables in function 'SendATCommand'
0291           1313   ;------------------------------------------------------------
0291           1314   ;s                         Allocated to registers r2 r3 r4 
0291           1315   ;------------------------------------------------------------
0291           1316   ;        main.c:638: void SendATCommand (char * s)
0291           1317   ;        -----------------------------------------
0291           1318   ;         function SendATCommand
0291           1319   ;        -----------------------------------------
0291           1320   _SendATCommand:
0291 AA82      1321            mov     r2,dpl
0293 AB83      1322            mov     r3,dph
0295 ACF0      1323            mov     r4,b
0297           1324   ;        main.c:640: printf("Command: %s", s);
0297 C002      1325            push    ar2
0299 C003      1326            push    ar3
029B C004      1327            push    ar4
029D C002      1328            push    ar2
029F C003      1329            push    ar3
02A1 C004      1330            push    ar4
02A3 74C0      1331            mov     a,#__str_0
02A5 C0E0      1332            push    acc
02A7 74D1      1333            mov     a,#(__str_0 >> 8)
02A9 C0E0      1334            push    acc
02AB 7480      1335            mov     a,#0x80
02AD C0E0      1336            push    acc
02AF 120000    1337            lcall   _printf
02B2 E581      1338            mov     a,sp
02B4 24FA      1339            add     a,#0xfa
02B6 F581      1340            mov     sp,a
02B8           1341   ;        main.c:641: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02B8 C2A0      1342            clr     _P2_0
02BA           1343   ;        main.c:642: waitms(5);
02BA 900005    1344            mov     dptr,#0x0005
02BD 120000    1345            lcall   _waitms
02C0 D004      1346            pop     ar4
02C2 D003      1347            pop     ar3
02C4 D002      1348            pop     ar2
02C6           1349   ;        main.c:643: sendstr1(s);
02C6 8A82      1350            mov     dpl,r2
02C8 8B83      1351            mov     dph,r3
02CA 8CF0      1352            mov     b,r4
02CC 120000    1353            lcall   _sendstr1
02CF           1354   ;        main.c:644: getstr1(buff, sizeof(buff)-1);
02CF 75D013    1355            mov     _getstr1_PARM_2,#0x13
02D2 905240    1356            mov     dptr,#_buff
02D5 75F040    1357            mov     b,#0x40
02D8 120000    1358            lcall   _getstr1
02DB           1359   ;        main.c:645: waitms(10);
02DB 90000A    1360            mov     dptr,#0x000A
02DE 120000    1361            lcall   _waitms
02E1           1362   ;        main.c:646: P2_0=1; // 'set' pin to 1 is normal operation mode.
02E1 D2A0      1363            setb    _P2_0
02E3           1364   ;        main.c:647: printf("Response: %s\r\n", buff);
02E3 7440      1365            mov     a,#_buff
02E5 C0E0      1366            push    acc
02E7 7452      1367            mov     a,#(_buff >> 8)
02E9 C0E0      1368            push    acc
02EB 7440      1369            mov     a,#0x40
02ED C0E0      1370            push    acc
02EF 7480      1371            mov     a,#__str_1
02F1 C0E0      1372            push    acc
02F3 74D2      1373            mov     a,#(__str_1 >> 8)
02F5 C0E0      1374            push    acc
02F7 7480      1375            mov     a,#0x80
02F9 C0E0      1376            push    acc
02FB 120000    1377            lcall   _printf
02FE E581      1378            mov     a,sp
0300 24FA      1379            add     a,#0xfa
0302 F581      1380            mov     sp,a
0304 22        1381            ret
0305           1382   ;------------------------------------------------------------
0305           1383   ;Allocation info for local variables in function 'ReceptionOff'
0305           1384   ;------------------------------------------------------------
0305           1385   ;------------------------------------------------------------
0305           1386   ;        main.c:650: void ReceptionOff (void)
0305           1387   ;        -----------------------------------------
0305           1388   ;         function ReceptionOff
0305           1389   ;        -----------------------------------------
0305           1390   _ReceptionOff:
0305           1391   ;        main.c:652: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0305 C2A0      1392            clr     _P2_0
0307           1393   ;        main.c:653: waitms(10);
0307 90000A    1394            mov     dptr,#0x000A
030A 120000    1395            lcall   _waitms
030D           1396   ;        main.c:654: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
030D 90D2C0    1397            mov     dptr,#__str_2
0310 75F080    1398            mov     b,#0x80
0313 120000    1399            lcall   _sendstr1
0316           1400   ;        main.c:655: waitms(10);
0316 90000A    1401            mov     dptr,#0x000A
0319 120000    1402            lcall   _waitms
031C           1403   ;        main.c:657: SCON1&=0b_0011_1111;
031C 53C83F    1404            anl     _SCON1,#0x3F
031F           1405   ;        main.c:658: P2_0=1; // 'set' pin to 1 is normal operation mode.
031F D2A0      1406            setb    _P2_0
0321 22        1407            ret
0322           1408   ;------------------------------------------------------------
0322           1409   ;Allocation info for local variables in function 'Set_Pin_Output'
0322           1410   ;------------------------------------------------------------
0322           1411   ;pin                       Allocated to registers r2 
0322           1412   ;mask                      Allocated to registers r3 
0322           1413   ;------------------------------------------------------------
0322           1414   ;        main.c:661: void Set_Pin_Output (unsigned char pin)
0322           1415   ;        -----------------------------------------
0322           1416   ;         function Set_Pin_Output
0322           1417   ;        -----------------------------------------
0322           1418   _Set_Pin_Output:
0322 AA82      1419            mov     r2,dpl
0324           1420   ;        main.c:665: mask=(1<<(pin&0x7));
0324 7407      1421            mov     a,#0x07
0326 5A        1422            anl     a,r2
0327 F5F0      1423            mov     b,a
0329 05F0      1424            inc     b
032B 7401      1425            mov     a,#0x01
032D 8000      1426            sjmp    L015011?
032F           1427   L015009?:
032F 25E0      1428            add     a,acc
0331           1429   L015011?:
0331 D5F040    1430            djnz    b,L015009?
0334 FB        1431            mov     r3,a
0335           1432   ;        main.c:666: switch(pin/0x10)
0335 EA        1433            mov     a,r2
0336 C4        1434            swap    a
0337 540F      1435            anl     a,#0x0f
0339 FA        1436            mov  r2,a
033A 24FC      1437            add     a,#0xff - 0x03
033C 4000      1438            jc      L015006?
033E EA        1439            mov     a,r2
033F 2A        1440            add     a,r2
0340 2A        1441            add     a,r2
0341 90D3C0    1442            mov     dptr,#L015013?
0344 73        1443            jmp     @a+dptr
0345           1444   L015013?:
0345 020000    1445            ljmp    L015001?
0348 020000    1446            ljmp    L015002?
034B 020000    1447            ljmp    L015003?
034E 020000    1448            ljmp    L015004?
0351           1449   ;        main.c:668: case 0: P0MDOUT |= mask; break;
0351           1450   L015001?:
0351 EB        1451            mov     a,r3
0352 42A4      1452            orl     _P0MDOUT,a
0354           1453   ;        main.c:669: case 1: P1MDOUT |= mask; break;
0354 22        1454            ret
0355           1455   L015002?:
0355 EB        1456            mov     a,r3
0356 42A5      1457            orl     _P1MDOUT,a
0358           1458   ;        main.c:670: case 2: P2MDOUT |= mask; break; 
0358 22        1459            ret
0359           1460   L015003?:
0359 EB        1461            mov     a,r3
035A 42A6      1462            orl     _P2MDOUT,a
035C           1463   ;        main.c:671: case 3: P3MDOUT |= mask; break; 
035C 22        1464            ret
035D           1465   L015004?:
035D EB        1466            mov     a,r3
035E 429C      1467            orl     _P3MDOUT,a
0360           1468   ;        main.c:672: }   
0360           1469   L015006?:
0360 22        1470            ret
0361           1471   ;------------------------------------------------------------
0361           1472   ;Allocation info for local variables in function 'Set_Pin_Input'
0361           1473   ;------------------------------------------------------------
0361           1474   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_123'
0361           1475   ;pin                       Allocated to registers r2 
0361           1476   ;------------------------------------------------------------
0361           1477   ;        main.c:675: void Set_Pin_Input (unsigned char pin)
0361           1478   ;        -----------------------------------------
0361           1479   ;         function Set_Pin_Input
0361           1480   ;        -----------------------------------------
0361           1481   _Set_Pin_Input:
0361 AA82      1482            mov     r2,dpl
0363           1483   ;        main.c:679: mask=(1<<(pin&0x7));
0363 7407      1484            mov     a,#0x07
0365 5A        1485            anl     a,r2
0366 F5F0      1486            mov     b,a
0368 05F0      1487            inc     b
036A 7401      1488            mov     a,#0x01
036C 8000      1489            sjmp    L016011?
036E           1490   L016009?:
036E 25E0      1491            add     a,acc
0370           1492   L016011?:
0370 D5F040    1493            djnz    b,L016009?
0373           1494   ;        main.c:680: mask=~mask;
0373 F4        1495            cpl     a
0374 FB        1496            mov     r3,a
0375           1497   ;        main.c:681: switch(pin/0x10)
0375 EA        1498            mov     a,r2
0376 C4        1499            swap    a
0377 540F      1500            anl     a,#0x0f
0379 FA        1501            mov  r2,a
037A 24FC      1502            add     a,#0xff - 0x03
037C 4000      1503            jc      L016006?
037E EA        1504            mov     a,r2
037F 2A        1505            add     a,r2
0380 2A        1506            add     a,r2
0381 90D5C0    1507            mov     dptr,#L016013?
0384 73        1508            jmp     @a+dptr
0385           1509   L016013?:
0385 020000    1510            ljmp    L016001?
0388 020000    1511            ljmp    L016002?
038B 020000    1512            ljmp    L016003?
038E 020000    1513            ljmp    L016004?
0391           1514   ;        main.c:683: case 0: P0MDOUT &= mask; break;
0391           1515   L016001?:
0391 EB        1516            mov     a,r3
0392 52A4      1517            anl     _P0MDOUT,a
0394           1518   ;        main.c:684: case 1: P1MDOUT &= mask; break;
0394 22        1519            ret
0395           1520   L016002?:
0395 EB        1521            mov     a,r3
0396 52A5      1522            anl     _P1MDOUT,a
0398           1523   ;        main.c:685: case 2: P2MDOUT &= mask; break; 
0398 22        1524            ret
0399           1525   L016003?:
0399 EB        1526            mov     a,r3
039A 52A6      1527            anl     _P2MDOUT,a
039C           1528   ;        main.c:686: case 3: P3MDOUT &= mask; break; 
039C 22        1529            ret
039D           1530   L016004?:
039D EB        1531            mov     a,r3
039E 529C      1532            anl     _P3MDOUT,a
03A0           1533   ;        main.c:687: }   
03A0           1534   L016006?:
03A0 22        1535            ret
03A1           1536   ;------------------------------------------------------------
03A1           1537   ;Allocation info for local variables in function 'InitADC'
03A1           1538   ;------------------------------------------------------------
03A1           1539   ;------------------------------------------------------------
03A1           1540   ;        main.c:690: void InitADC (void)
03A1           1541   ;        -----------------------------------------
03A1           1542   ;         function InitADC
03A1           1543   ;        -----------------------------------------
03A1           1544   _InitADC:
03A1           1545   ;        main.c:692: SFRPAGE = 0x00;
03A1 75A700    1546            mov     _SFRPAGE,#0x00
03A4           1547   ;        main.c:693: ADEN=0; // Disable ADC
03A4 C2EF      1548            clr     _ADEN
03A6           1549   ;        main.c:698: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
03A6 75B280    1550            mov     _ADC0CN1,#0x80
03A9           1551   ;        main.c:702: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
03A9 75BC20    1552            mov     _ADC0CF0,#0x20
03AC           1553   ;        main.c:706: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
03AC 75B91E    1554            mov     _ADC0CF1,#0x1E
03AF           1555   ;        main.c:715: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
03AF 75E800    1556            mov     _ADC0CN0,#0x00
03B2           1557   ;        main.c:720: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03B2 75DF3F    1558            mov     _ADC0CF2,#0x3F
03B5           1559   ;        main.c:724: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03B5 75B300    1560            mov     _ADC0CN2,#0x00
03B8           1561   ;        main.c:726: ADEN=1; // Enable ADC
03B8 D2EF      1562            setb    _ADEN
03BA 22        1563            ret
03BB           1564   ;------------------------------------------------------------
03BB           1565   ;Allocation info for local variables in function 'InitPinADC'
03BB           1566   ;------------------------------------------------------------
03BB           1567   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
03BB           1568   ;portno                    Allocated to registers r2 
03BB           1569   ;mask                      Allocated to registers r3 
03BB           1570   ;------------------------------------------------------------
03BB           1571   ;        main.c:729: void InitPinADC (unsigned char portno, unsigned char pin_num)
03BB           1572   ;        -----------------------------------------
03BB           1573   ;         function InitPinADC
03BB           1574   ;        -----------------------------------------
03BB           1575   _InitPinADC:
03BB AA82      1576            mov     r2,dpl
03BD           1577   ;        main.c:733: mask=1<<pin_num;
03BD 85E0F0    1578            mov     b,_InitPinADC_PARM_2
03C0 05F0      1579            inc     b
03C2 7401      1580            mov     a,#0x01
03C4 8000      1581            sjmp    L018013?
03C6           1582   L018011?:
03C6 25E0      1583            add     a,acc
03C8           1584   L018013?:
03C8 D5F040    1585            djnz    b,L018011?
03CB FB        1586            mov     r3,a
03CC           1587   ;        main.c:735: SFRPAGE = 0x20;
03CC 75A720    1588            mov     _SFRPAGE,#0x20
03CF           1589   ;        main.c:736: switch (portno)
03CF BA0080    1590            cjne    r2,#0x00,L018014?
03D2 8000      1591            sjmp    L018001?
03D4           1592   L018014?:
03D4 BA0100    1593            cjne    r2,#0x01,L018015?
03D7 8000      1594            sjmp    L018002?
03D9           1595   L018015?:
03D9           1596   ;        main.c:738: case 0:
03D9 BA0280    1597            cjne    r2,#0x02,L018005?
03DC 8000      1598            sjmp    L018003?
03DE           1599   L018001?:
03DE           1600   ;        main.c:739: P0MDIN &= (~mask); // Set pin as analog input
03DE EB        1601            mov     a,r3
03DF F4        1602            cpl     a
03E0 FA        1603            mov     r2,a
03E1 52F1      1604            anl     _P0MDIN,a
03E3           1605   ;        main.c:740: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03E3 EB        1606            mov     a,r3
03E4 42D4      1607            orl     _P0SKIP,a
03E6           1608   ;        main.c:741: break;
03E6           1609   ;        main.c:742: case 1:
03E6 8000      1610            sjmp    L018005?
03E8           1611   L018002?:
03E8           1612   ;        main.c:743: P1MDIN &= (~mask); // Set pin as analog input
03E8 EB        1613            mov     a,r3
03E9 F4        1614            cpl     a
03EA FA        1615            mov     r2,a
03EB 52F2      1616            anl     _P1MDIN,a
03ED           1617   ;        main.c:744: P1SKIP |= mask; // Skip Crossbar decoding for this pin
03ED EB        1618            mov     a,r3
03EE 42D5      1619            orl     _P1SKIP,a
03F0           1620   ;        main.c:745: break;
03F0           1621   ;        main.c:746: case 2:
03F0 8000      1622            sjmp    L018005?
03F2           1623   L018003?:
03F2           1624   ;        main.c:747: P2MDIN &= (~mask); // Set pin as analog input
03F2 EB        1625            mov     a,r3
03F3 F4        1626            cpl     a
03F4 FA        1627            mov     r2,a
03F5 52F3      1628            anl     _P2MDIN,a
03F7           1629   ;        main.c:748: P2SKIP |= mask; // Skip Crossbar decoding for this pin
03F7 EB        1630            mov     a,r3
03F8 42CC      1631            orl     _P2SKIP,a
03FA           1632   ;        main.c:752: }
03FA           1633   L018005?:
03FA           1634   ;        main.c:753: SFRPAGE = 0x00;
03FA 75A700    1635            mov     _SFRPAGE,#0x00
03FD 22        1636            ret
03FE           1637   ;------------------------------------------------------------
03FE           1638   ;Allocation info for local variables in function 'ADC_at_Pin'
03FE           1639   ;------------------------------------------------------------
03FE           1640   ;pin                       Allocated to registers 
03FE           1641   ;------------------------------------------------------------
03FE           1642   ;        main.c:756: unsigned int ADC_at_Pin(unsigned char pin)
03FE           1643   ;        -----------------------------------------
03FE           1644   ;         function ADC_at_Pin
03FE           1645   ;        -----------------------------------------
03FE           1646   _ADC_at_Pin:
03FE 8582BB    1647            mov     _ADC0MX,dpl
0401           1648   ;        main.c:759: ADINT = 0;
0401 C2ED      1649            clr     _ADINT
0403           1650   ;        main.c:760: ADBUSY = 1;     // Convert voltage at the pin
0403 D2EC      1651            setb    _ADBUSY
0405           1652   ;        main.c:761: while (!ADINT); // Wait for conversion to complete
0405           1653   L019001?:
0405 30ED00    1654            jnb     _ADINT,L019001?
0408           1655   ;        main.c:762: return (ADC0);
0408 85BD82    1656            mov     dpl,_ADC0
040B 85BE83    1657            mov     dph,(_ADC0 >> 8)
040E 22        1658            ret
040F           1659   ;------------------------------------------------------------
040F           1660   ;Allocation info for local variables in function 'ReadHX711'
040F           1661   ;------------------------------------------------------------
040F           1662   ;dataa                     Allocated with name '_ReadHX711_dataa_1_133'
040F           1663   ;i                         Allocated with name '_ReadHX711_i_1_133'
040F           1664   ;ans                       Allocated with name '_ReadHX711_ans_1_133'
040F           1665   ;j                         Allocated with name '_ReadHX711_j_1_133'
040F           1666   ;------------------------------------------------------------
040F           1667   ;        main.c:765: int ReadHX711(void) {
040F           1668   ;        -----------------------------------------
040F           1669   ;         function ReadHX711
040F           1670   ;        -----------------------------------------
040F           1671   _ReadHX711:
040F           1672   ;        main.c:766: xdata unsigned long dataa = 0;
040F 90C5B0    1673            mov     dptr,#_ReadHX711_dataa_1_133
0412 E4        1674            clr     a
0413 F0        1675            movx    @dptr,a
0414 A3        1676            inc     dptr
0415 F0        1677            movx    @dptr,a
0416 A3        1678            inc     dptr
0417 F0        1679            movx    @dptr,a
0418 A3        1680            inc     dptr
0419 F0        1681            movx    @dptr,a
041A           1682   ;        main.c:771: PD_SCK = 0;
041A C2A5      1683            clr     _P2_5
041C           1684   ;        main.c:773: for (i = 0; i < 24; i++) {
041C 7A00      1685            mov     r2,#0x00
041E           1686   L020011?:
041E C3        1687            clr     c
041F EA        1688            mov     a,r2
0420 6480      1689            xrl     a,#0x80
0422 9498      1690            subb    a,#0x98
0424 4000      1691            jc      L020037?
0426 020000    1692            ljmp    L020014?
0429           1693   L020037?:
0429           1694   ;        main.c:774: PD_SCK = 1;
0429 D2A5      1695            setb    _P2_5
042B           1696   ;        main.c:775: for (j = 0; j < 4; j++);
042B 90C600    1697            mov     dptr,#_ReadHX711_j_1_133
042E E4        1698            clr     a
042F F0        1699            movx    @dptr,a
0430           1700   L020003?:
0430 90C600    1701            mov     dptr,#_ReadHX711_j_1_133
0433 E0        1702            movx    a,@dptr
0434 FB        1703            mov     r3,a
0435 C3        1704            clr     c
0436 6480      1705            xrl     a,#0x80
0438 9484      1706            subb    a,#0x84
043A 5000      1707            jnc     L020006?
043C 90C600    1708            mov     dptr,#_ReadHX711_j_1_133
043F E0        1709            movx    a,@dptr
0440 2401      1710            add     a,#0x01
0442 F0        1711            movx    @dptr,a
0443 8000      1712            sjmp    L020003?
0445           1713   L020006?:
0445           1714   ;        main.c:776: dataa = dataa << 1;
0445 90C5B0    1715            mov     dptr,#_ReadHX711_dataa_1_133
0448 E0        1716            movx    a,@dptr
0449 FB        1717            mov     r3,a
044A A3        1718            inc     dptr
044B E0        1719            movx    a,@dptr
044C FC        1720            mov     r4,a
044D A3        1721            inc     dptr
044E E0        1722            movx    a,@dptr
044F FD        1723            mov     r5,a
0450 A3        1724            inc     dptr
0451 E0        1725            movx    a,@dptr
0452 FE        1726            mov     r6,a
0453 EB        1727            mov     a,r3
0454 2B        1728            add     a,r3
0455 FB        1729            mov     r3,a
0456 EC        1730            mov     a,r4
0457 33        1731            rlc     a
0458 FC        1732            mov     r4,a
0459 ED        1733            mov     a,r5
045A 33        1734            rlc     a
045B FD        1735            mov     r5,a
045C EE        1736            mov     a,r6
045D 33        1737            rlc     a
045E FE        1738            mov     r6,a
045F 90C5B0    1739            mov     dptr,#_ReadHX711_dataa_1_133
0462 EB        1740            mov     a,r3
0463 F0        1741            movx    @dptr,a
0464 A3        1742            inc     dptr
0465 EC        1743            mov     a,r4
0466 F0        1744            movx    @dptr,a
0467 A3        1745            inc     dptr
0468 ED        1746            mov     a,r5
0469 F0        1747            movx    @dptr,a
046A A3        1748            inc     dptr
046B EE        1749            mov     a,r6
046C F0        1750            movx    @dptr,a
046D           1751   ;        main.c:777: if (DOUT) {
046D 30A680    1752            jnb     _P2_6,L020002?
0470           1753   ;        main.c:778: dataa |= 0x01;
0470 90C5B0    1754            mov     dptr,#_ReadHX711_dataa_1_133
0473 E0        1755            movx    a,@dptr
0474 FB        1756            mov     r3,a
0475 A3        1757            inc     dptr
0476 E0        1758            movx    a,@dptr
0477 FC        1759            mov     r4,a
0478 A3        1760            inc     dptr
0479 E0        1761            movx    a,@dptr
047A FD        1762            mov     r5,a
047B A3        1763            inc     dptr
047C E0        1764            movx    a,@dptr
047D FE        1765            mov     r6,a
047E 90C5B0    1766            mov     dptr,#_ReadHX711_dataa_1_133
0481 7401      1767            mov     a,#0x01
0483 4B        1768            orl     a,r3
0484 F0        1769            movx    @dptr,a
0485 A3        1770            inc     dptr
0486 EC        1771            mov     a,r4
0487 F0        1772            movx    @dptr,a
0488 A3        1773            inc     dptr
0489 ED        1774            mov     a,r5
048A F0        1775            movx    @dptr,a
048B A3        1776            inc     dptr
048C EE        1777            mov     a,r6
048D F0        1778            movx    @dptr,a
048E           1779   L020002?:
048E           1780   ;        main.c:780: PD_SCK = 0;
048E C2A5      1781            clr     _P2_5
0490           1782   ;        main.c:781: for (j = 0; j < 4; j++);
0490 90C600    1783            mov     dptr,#_ReadHX711_j_1_133
0493 E4        1784            clr     a
0494 F0        1785            movx    @dptr,a
0495           1786   L020007?:
0495 90C600    1787            mov     dptr,#_ReadHX711_j_1_133
0498 E0        1788            movx    a,@dptr
0499 FB        1789            mov     r3,a
049A C3        1790            clr     c
049B 6480      1791            xrl     a,#0x80
049D 9484      1792            subb    a,#0x84
049F 5000      1793            jnc     L020013?
04A1 90C600    1794            mov     dptr,#_ReadHX711_j_1_133
04A4 E0        1795            movx    a,@dptr
04A5 2401      1796            add     a,#0x01
04A7 F0        1797            movx    @dptr,a
04A8 8000      1798            sjmp    L020007?
04AA           1799   L020013?:
04AA           1800   ;        main.c:773: for (i = 0; i < 24; i++) {
04AA 0A        1801            inc     r2
04AB 020000    1802            ljmp    L020011?
04AE           1803   L020014?:
04AE           1804   ;        main.c:784: PD_SCK = 1;
04AE D2A5      1805            setb    _P2_5
04B0           1806   ;        main.c:785: for (j = 0; j < 4; j++);
04B0 90C600    1807            mov     dptr,#_ReadHX711_j_1_133
04B3 E4        1808            clr     a
04B4 F0        1809            movx    @dptr,a
04B5           1810   L020015?:
04B5 90C600    1811            mov     dptr,#_ReadHX711_j_1_133
04B8 E0        1812            movx    a,@dptr
04B9 FA        1813            mov     r2,a
04BA C3        1814            clr     c
04BB 6480      1815            xrl     a,#0x80
04BD 9484      1816            subb    a,#0x84
04BF 5000      1817            jnc     L020018?
04C1 90C600    1818            mov     dptr,#_ReadHX711_j_1_133
04C4 E0        1819            movx    a,@dptr
04C5 2401      1820            add     a,#0x01
04C7 F0        1821            movx    @dptr,a
04C8 8000      1822            sjmp    L020015?
04CA           1823   L020018?:
04CA           1824   ;        main.c:786: PD_SCK = 0;
04CA C2A5      1825            clr     _P2_5
04CC           1826   ;        main.c:787: for (j = 0; j < 4; j++);
04CC 90C600    1827            mov     dptr,#_ReadHX711_j_1_133
04CF E4        1828            clr     a
04D0 F0        1829            movx    @dptr,a
04D1           1830   L020019?:
04D1 90C600    1831            mov     dptr,#_ReadHX711_j_1_133
04D4 E0        1832            movx    a,@dptr
04D5 FA        1833            mov     r2,a
04D6 C3        1834            clr     c
04D7 6480      1835            xrl     a,#0x80
04D9 9484      1836            subb    a,#0x84
04DB 5000      1837            jnc     L020022?
04DD 90C600    1838            mov     dptr,#_ReadHX711_j_1_133
04E0 E0        1839            movx    a,@dptr
04E1 2401      1840            add     a,#0x01
04E3 F0        1841            movx    @dptr,a
04E4 8000      1842            sjmp    L020019?
04E6           1843   L020022?:
04E6           1844   ;        main.c:788: ans = (dataa % 1000000)/10;
04E6 90C5B0    1845            mov     dptr,#_ReadHX711_dataa_1_133
04E9 E0        1846            movx    a,@dptr
04EA FA        1847            mov     r2,a
04EB A3        1848            inc     dptr
04EC E0        1849            movx    a,@dptr
04ED FB        1850            mov     r3,a
04EE A3        1851            inc     dptr
04EF E0        1852            movx    a,@dptr
04F0 FC        1853            mov     r4,a
04F1 A3        1854            inc     dptr
04F2 E0        1855            movx    a,@dptr
04F3 FD        1856            mov     r5,a
04F4 750040    1857            mov     __modulong_PARM_2,#0x40
04F7 750142    1858            mov     (__modulong_PARM_2 + 1),#0x42
04FA 75020F    1859            mov     (__modulong_PARM_2 + 2),#0x0F
04FD 750300    1860            mov     (__modulong_PARM_2 + 3),#0x00
0500 8A82      1861            mov     dpl,r2
0502 8B83      1862            mov     dph,r3
0504 8CF0      1863            mov     b,r4
0506 ED        1864            mov     a,r5
0507 120000    1865            lcall   __modulong
050A AA82      1866            mov     r2,dpl
050C AB83      1867            mov     r3,dph
050E ACF0      1868            mov     r4,b
0510 FD        1869            mov     r5,a
0511 75000A    1870            mov     __divulong_PARM_2,#0x0A
0514 E4        1871            clr     a
0515 F501      1872            mov     (__divulong_PARM_2 + 1),a
0517 F502      1873            mov     (__divulong_PARM_2 + 2),a
0519 F503      1874            mov     (__divulong_PARM_2 + 3),a
051B 8A82      1875            mov     dpl,r2
051D 8B83      1876            mov     dph,r3
051F 8CF0      1877            mov     b,r4
0521 ED        1878            mov     a,r5
0522           1879   ;        main.c:789: return ans;
0522 020000    1880            ljmp    __divulong
0525           1881   ;------------------------------------------------------------
0525           1882   ;Allocation info for local variables in function 'Timer5_ISR'
0525           1883   ;------------------------------------------------------------
0525           1884   ;------------------------------------------------------------
0525           1885   ;        main.c:792: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0525           1886   ;        -----------------------------------------
0525           1887   ;         function Timer5_ISR
0525           1888   ;        -----------------------------------------
0525           1889   _Timer5_ISR:
0525 C0D0      1890            push    bits
0527 C0E0      1891            push    acc
0529 C0F0      1892            push    b
052B C082      1893            push    dpl
052D C083      1894            push    dph
052F C002      1895            push    (0+2)
0531 C003      1896            push    (0+3)
0533 C004      1897            push    (0+4)
0535 C005      1898            push    (0+5)
0537 C006      1899            push    (0+6)
0539 C007      1900            push    (0+7)
053B C000      1901            push    (0+0)
053D C001      1902            push    (0+1)
053F C0D0      1903            push    psw
0541 75D000    1904            mov     psw,#0x00
0544           1905   ;        main.c:794: SFRPAGE=0x10;
0544 75A710    1906            mov     _SFRPAGE,#0x10
0547           1907   ;        main.c:795: TF5H = 0; // Clear Timer5 interrupt flag
0547 C2C7      1908            clr     _TF5H
0549           1909   ;        main.c:796: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0549 75D2C4    1910            mov     _TMR5RL,#0xC4
054C 75D3FF    1911            mov     (_TMR5RL >> 8),#0xFF
054F           1912   ;        main.c:798: fre_mea_count++;
054F 904B40    1913            mov     dptr,#_fre_mea_count
0552 E0        1914            movx    a,@dptr
0553 2401      1915            add     a,#0x01
0555 F0        1916            movx    @dptr,a
0556 A3        1917            inc     dptr
0557 E0        1918            movx    a,@dptr
0558 3400      1919            addc    a,#0x00
055A F0        1920            movx    @dptr,a
055B           1921   ;        main.c:799: if(fre_mea_count == 1000){
055B 904B40    1922            mov     dptr,#_fre_mea_count
055E E0        1923            movx    a,@dptr
055F FA        1924            mov     r2,a
0560 A3        1925            inc     dptr
0561 E0        1926            movx    a,@dptr
0562 FB        1927            mov     r3,a
0563 BAE810    1928            cjne    r2,#0xE8,L021004?
0566 BB0310    1929            cjne    r3,#0x03,L021004?
0569           1930   ;        main.c:800: fre_mea_count = 0;
0569 904B40    1931            mov     dptr,#_fre_mea_count
056C E4        1932            clr     a
056D F0        1933            movx    @dptr,a
056E A3        1934            inc     dptr
056F F0        1935            movx    @dptr,a
0570           1936   ;        main.c:801: if(mea_yes) freq100 = get_freq();
0570 904930    1937            mov     dptr,#_mea_yes
0573 E0        1938            movx    a,@dptr
0574 FA        1939            mov     r2,a
0575 6000      1940            jz      L021004?
0577 120000    1941            lcall   _get_freq
057A AA82      1942            mov     r2,dpl
057C AB83      1943            mov     r3,dph
057E 905200    1944            mov     dptr,#_freq100
0581 EA        1945            mov     a,r2
0582 F0        1946            movx    @dptr,a
0583 A3        1947            inc     dptr
0584 EB        1948            mov     a,r3
0585 F0        1949            movx    @dptr,a
0586 EB        1950            mov     a,r3
0587 33        1951            rlc     a
0588 95E0      1952            subb    a,acc
058A A3        1953            inc     dptr
058B F0        1954            movx    @dptr,a
058C A3        1955            inc     dptr
058D F0        1956            movx    @dptr,a
058E           1957   L021004?:
058E           1958   ;        main.c:810: pwm_counter++; 
058E 904E40    1959            mov     dptr,#_pwm_counter
0591 E0        1960            movx    a,@dptr
0592 2401      1961            add     a,#0x01
0594 F0        1962            movx    @dptr,a
0595 A3        1963            inc     dptr
0596 E0        1964            movx    a,@dptr
0597 3400      1965            addc    a,#0x00
0599 F0        1966            movx    @dptr,a
059A           1967   ;        main.c:811: if (pwm_counter == 100){
059A 904E40    1968            mov     dptr,#_pwm_counter
059D E0        1969            movx    a,@dptr
059E FA        1970            mov     r2,a
059F A3        1971            inc     dptr
05A0 E0        1972            movx    a,@dptr
05A1 FB        1973            mov     r3,a
05A2 BA6490    1974            cjne    r2,#0x64,L021006?
05A5 BB0090    1975            cjne    r3,#0x00,L021006?
05A8           1976   ;        main.c:812: pwm_counter = 0; 
05A8 904E40    1977            mov     dptr,#_pwm_counter
05AB E4        1978            clr     a
05AC F0        1979            movx    @dptr,a
05AD A3        1980            inc     dptr
05AE F0        1981            movx    @dptr,a
05AF           1982   L021006?:
05AF           1983   ;        main.c:815: if (pwm_right > pwm_counter){
05AF 904D80    1984            mov     dptr,#_pwm_right
05B2 E0        1985            movx    a,@dptr
05B3 FA        1986            mov     r2,a
05B4 904E40    1987            mov     dptr,#_pwm_counter
05B7 E0        1988            movx    a,@dptr
05B8 FB        1989            mov     r3,a
05B9 A3        1990            inc     dptr
05BA E0        1991            movx    a,@dptr
05BB FC        1992            mov     r4,a
05BC 7D00      1993            mov     r5,#0x00
05BE C3        1994            clr     c
05BF EB        1995            mov     a,r3
05C0 9A        1996            subb    a,r2
05C1 EC        1997            mov     a,r4
05C2 9D        1998            subb    a,r5
05C3 5000      1999            jnc     L021011?
05C5           2000   ;        main.c:816: if(L_motor_dir){
05C5 904D40    2001            mov     dptr,#_L_motor_dir
05C8 E0        2002            movx    a,@dptr
05C9 FA        2003            mov     r2,a
05CA 6000      2004            jz      L021008?
05CC           2005   ;        main.c:817: L_bridge_1 = 1; 
05CC D2A1      2006            setb    _P2_1
05CE           2007   ;        main.c:818: L_bridge_2 = 0; 
05CE C2A2      2008            clr     _P2_2
05D0 8000      2009            sjmp    L021012?
05D2           2010   L021008?:
05D2           2011   ;        main.c:821: L_bridge_1 = 0; 
05D2 C2A1      2012            clr     _P2_1
05D4           2013   ;        main.c:822: L_bridge_2 = 1; 
05D4 D2A2      2014            setb    _P2_2
05D6 8000      2015            sjmp    L021012?
05D8           2016   L021011?:
05D8           2017   ;        main.c:826: L_bridge_1 = 0; 
05D8 C2A1      2018            clr     _P2_1
05DA           2019   ;        main.c:827: L_bridge_2 = 0; 
05DA C2A2      2020            clr     _P2_2
05DC           2021   L021012?:
05DC           2022   ;        main.c:829: if (pwm_left > pwm_counter){
05DC 904DC0    2023            mov     dptr,#_pwm_left
05DF E0        2024            movx    a,@dptr
05E0 FA        2025            mov     r2,a
05E1 7D00      2026            mov     r5,#0x00
05E3 C3        2027            clr     c
05E4 EB        2028            mov     a,r3
05E5 9A        2029            subb    a,r2
05E6 EC        2030            mov     a,r4
05E7 9D        2031            subb    a,r5
05E8 5000      2032            jnc     L021017?
05EA           2033   ;        main.c:830: if (R_motor_dir){
05EA 904D00    2034            mov     dptr,#_R_motor_dir
05ED E0        2035            movx    a,@dptr
05EE FA        2036            mov     r2,a
05EF 6000      2037            jz      L021014?
05F1           2038   ;        main.c:831: R_bridge_1 = 1; 
05F1 D2A4      2039            setb    _P2_4
05F3           2040   ;        main.c:832: R_bridge_2 = 0;
05F3 C2A3      2041            clr     _P2_3
05F5 8000      2042            sjmp    L021018?
05F7           2043   L021014?:
05F7           2044   ;        main.c:835: R_bridge_1 = 0; 
05F7 C2A4      2045            clr     _P2_4
05F9           2046   ;        main.c:836: R_bridge_2 = 1;
05F9 D2A3      2047            setb    _P2_3
05FB 8000      2048            sjmp    L021018?
05FD           2049   L021017?:
05FD           2050   ;        main.c:840: R_bridge_1 = 0; 
05FD C2A4      2051            clr     _P2_4
05FF           2052   ;        main.c:841: R_bridge_2 = 0; 
05FF C2A3      2053            clr     _P2_3
0601           2054   L021018?:
0601           2055   ;        main.c:844: servo_counter++;
0601 904E00    2056            mov     dptr,#_servo_counter
0604 E0        2057            movx    a,@dptr
0605 2401      2058            add     a,#0x01
0607 F0        2059            movx    @dptr,a
0608 A3        2060            inc     dptr
0609 E0        2061            movx    a,@dptr
060A 3400      2062            addc    a,#0x00
060C F0        2063            movx    @dptr,a
060D           2064   ;        main.c:845: if(servo_counter==2000)
060D 904E00    2065            mov     dptr,#_servo_counter
0610 E0        2066            movx    a,@dptr
0611 FA        2067            mov     r2,a
0612 A3        2068            inc     dptr
0613 E0        2069            movx    a,@dptr
0614 FB        2070            mov     r3,a
0615 BAD050    2071            cjne    r2,#0xD0,L021020?
0618 BB0750    2072            cjne    r3,#0x07,L021020?
061B           2073   ;        main.c:847: servo_counter=0;
061B 904E00    2074            mov     dptr,#_servo_counter
061E E4        2075            clr     a
061F F0        2076            movx    @dptr,a
0620 A3        2077            inc     dptr
0621 F0        2078            movx    @dptr,a
0622           2079   ;        main.c:848: Servo_arm=1;
0622 D296      2080            setb    _P1_6
0624           2081   ;        main.c:849: Servo_base=1;
0624 D297      2082            setb    _P1_7
0626           2083   L021020?:
0626           2084   ;        main.c:851: if(servo_arm>=servo_counter)
0626 904C80    2085            mov     dptr,#_servo_arm
0629 E0        2086            movx    a,@dptr
062A FA        2087            mov     r2,a
062B 904E00    2088            mov     dptr,#_servo_counter
062E E0        2089            movx    a,@dptr
062F FB        2090            mov     r3,a
0630 A3        2091            inc     dptr
0631 E0        2092            movx    a,@dptr
0632 FC        2093            mov     r4,a
0633 7D00      2094            mov     r5,#0x00
0635 C3        2095            clr     c
0636 EA        2096            mov     a,r2
0637 9B        2097            subb    a,r3
0638 ED        2098            mov     a,r5
0639 9C        2099            subb    a,r4
063A 4000      2100            jc      L021022?
063C           2101   ;        main.c:853: Servo_arm = 1;
063C D296      2102            setb    _P1_6
063E 8000      2103            sjmp    L021023?
0640           2104   L021022?:
0640           2105   ;        main.c:857: Servo_arm = 0; 
0640 C296      2106            clr     _P1_6
0642           2107   L021023?:
0642           2108   ;        main.c:859: if(servo_base>=servo_counter)
0642 904CC0    2109            mov     dptr,#_servo_base
0645 E0        2110            movx    a,@dptr
0646 FA        2111            mov     r2,a
0647 7D00      2112            mov     r5,#0x00
0649 C3        2113            clr     c
064A EA        2114            mov     a,r2
064B 9B        2115            subb    a,r3
064C ED        2116            mov     a,r5
064D 9C        2117            subb    a,r4
064E 4000      2118            jc      L021025?
0650           2119   ;        main.c:861: Servo_base = 1;
0650 D297      2120            setb    _P1_7
0652 8000      2121            sjmp    L021027?
0654           2122   L021025?:
0654           2123   ;        main.c:865: Servo_base = 0; 
0654 C297      2124            clr     _P1_7
0656           2125   L021027?:
0656 D0D0      2126            pop     psw
0658 D001      2127            pop     (0+1)
065A D000      2128            pop     (0+0)
065C D007      2129            pop     (0+7)
065E D006      2130            pop     (0+6)
0660 D005      2131            pop     (0+5)
0662 D004      2132            pop     (0+4)
0664 D003      2133            pop     (0+3)
0666 D002      2134            pop     (0+2)
0668 D083      2135            pop     dph
066A D082      2136            pop     dpl
066C D0F0      2137            pop     b
066E D0E0      2138            pop     acc
0670 D0D0      2139            pop     bits
0672 32        2140            reti
0673           2141   ;------------------------------------------------------------
0673           2142   ;Allocation info for local variables in function 'servo_pick'
0673           2143   ;------------------------------------------------------------
0673           2144   ;i                         Allocated with name '_servo_pick_i_1_153'
0673           2145   ;------------------------------------------------------------
0673           2146   ;        main.c:869: void servo_pick(){
0673           2147   ;        -----------------------------------------
0673           2148   ;         function servo_pick
0673           2149   ;        -----------------------------------------
0673           2150   _servo_pick:
0673           2151   ;        main.c:871: servo_arm = 2;
0673 904C80    2152            mov     dptr,#_servo_arm
0676 7402      2153            mov     a,#0x02
0678 F0        2154            movx    @dptr,a
0679           2155   ;        main.c:872: servo_base = 60;
0679 904CC0    2156            mov     dptr,#_servo_base
067C 743C      2157            mov     a,#0x3C
067E F0        2158            movx    @dptr,a
067F           2159   ;        main.c:873: waitms(400);
067F 900190    2160            mov     dptr,#0x0190
0682 120000    2161            lcall   _waitms
0685           2162   ;        main.c:874: servo_base = 255;
0685 904CC0    2163            mov     dptr,#_servo_base
0688 74FF      2164            mov     a,#0xFF
068A F0        2165            movx    @dptr,a
068B           2166   ;        main.c:875: waitms(400);
068B 900190    2167            mov     dptr,#0x0190
068E 120000    2168            lcall   _waitms
0691           2169   ;        main.c:876: Magnet = 1;
0691 D295      2170            setb    _P1_5
0693           2171   ;        main.c:877: servo_arm = 250;
0693 904C80    2172            mov     dptr,#_servo_arm
0696 74FA      2173            mov     a,#0xFA
0698 F0        2174            movx    @dptr,a
0699           2175   ;        main.c:878: waitms(400);
0699 900190    2176            mov     dptr,#0x0190
069C 120000    2177            lcall   _waitms
069F           2178   ;        main.c:879: for(i = 0; i < 130; i++){
069F 7A00      2179            mov     r2,#0x00
06A1 7B00      2180            mov     r3,#0x00
06A3           2181   L022001?:
06A3 C3        2182            clr     c
06A4 EA        2183            mov     a,r2
06A5 9482      2184            subb    a,#0x82
06A7 EB        2185            mov     a,r3
06A8 6480      2186            xrl     a,#0x80
06AA 9480      2187            subb    a,#0x80
06AC 5000      2188            jnc     L022004?
06AE           2189   ;        main.c:880: waitms(5);
06AE 900005    2190            mov     dptr,#0x0005
06B1 C002      2191            push    ar2
06B3 C003      2192            push    ar3
06B5 120000    2193            lcall   _waitms
06B8 D003      2194            pop     ar3
06BA D002      2195            pop     ar2
06BC           2196   ;        main.c:881: servo_base--;
06BC 904CC0    2197            mov     dptr,#_servo_base
06BF E0        2198            movx    a,@dptr
06C0 14        2199            dec     a
06C1 904CC0    2200            mov     dptr,#_servo_base
06C4 F0        2201            movx    @dptr,a
06C5           2202   ;        main.c:879: for(i = 0; i < 130; i++){
06C5 0A        2203            inc     r2
06C6 BA0090    2204            cjne    r2,#0x00,L022001?
06C9 0B        2205            inc     r3
06CA 8000      2206            sjmp    L022001?
06CC           2207   L022004?:
06CC           2208   ;        main.c:883: waitms(400);
06CC 900190    2209            mov     dptr,#0x0190
06CF 120000    2210            lcall   _waitms
06D2           2211   ;        main.c:884: for(i = 0; i < 130; i++){
06D2 7A00      2212            mov     r2,#0x00
06D4 7B00      2213            mov     r3,#0x00
06D6           2214   L022005?:
06D6 C3        2215            clr     c
06D7 EA        2216            mov     a,r2
06D8 9482      2217            subb    a,#0x82
06DA EB        2218            mov     a,r3
06DB 6480      2219            xrl     a,#0x80
06DD 9480      2220            subb    a,#0x80
06DF 5000      2221            jnc     L022008?
06E1           2222   ;        main.c:885: waitms(5);
06E1 900005    2223            mov     dptr,#0x0005
06E4 C002      2224            push    ar2
06E6 C003      2225            push    ar3
06E8 120000    2226            lcall   _waitms
06EB D003      2227            pop     ar3
06ED D002      2228            pop     ar2
06EF           2229   ;        main.c:886: servo_base++;
06EF 904CC0    2230            mov     dptr,#_servo_base
06F2 E0        2231            movx    a,@dptr
06F3 2401      2232            add     a,#0x01
06F5 F0        2233            movx    @dptr,a
06F6           2234   ;        main.c:884: for(i = 0; i < 130; i++){
06F6 0A        2235            inc     r2
06F7 BA0010    2236            cjne    r2,#0x00,L022005?
06FA 0B        2237            inc     r3
06FB 8000      2238            sjmp    L022005?
06FD           2239   L022008?:
06FD           2240   ;        main.c:888: waitms(400);
06FD 900190    2241            mov     dptr,#0x0190
0700 120000    2242            lcall   _waitms
0703           2243   ;        main.c:889: for(i = 0; i<150; i++){
0703 7A00      2244            mov     r2,#0x00
0705 7B00      2245            mov     r3,#0x00
0707           2246   L022009?:
0707 C3        2247            clr     c
0708 EA        2248            mov     a,r2
0709 9496      2249            subb    a,#0x96
070B EB        2250            mov     a,r3
070C 6480      2251            xrl     a,#0x80
070E 9480      2252            subb    a,#0x80
0710 5000      2253            jnc     L022012?
0712           2254   ;        main.c:890: waitms(5);
0712 900005    2255            mov     dptr,#0x0005
0715 C002      2256            push    ar2
0717 C003      2257            push    ar3
0719 120000    2258            lcall   _waitms
071C D003      2259            pop     ar3
071E D002      2260            pop     ar2
0720           2261   ;        main.c:891: servo_arm--;
0720 904C80    2262            mov     dptr,#_servo_arm
0723 E0        2263            movx    a,@dptr
0724 14        2264            dec     a
0725 904C80    2265            mov     dptr,#_servo_arm
0728 F0        2266            movx    @dptr,a
0729           2267   ;        main.c:889: for(i = 0; i<150; i++){
0729 0A        2268            inc     r2
072A BA0090    2269            cjne    r2,#0x00,L022009?
072D 0B        2270            inc     r3
072E 8000      2271            sjmp    L022009?
0730           2272   L022012?:
0730           2273   ;        main.c:893: waitms(200);
0730 9000C8    2274            mov     dptr,#0x00C8
0733 120000    2275            lcall   _waitms
0736           2276   ;        main.c:894: for(i = 0; i<115; i++){
0736 7A00      2277            mov     r2,#0x00
0738 7B00      2278            mov     r3,#0x00
073A           2279   L022013?:
073A C3        2280            clr     c
073B EA        2281            mov     a,r2
073C 9473      2282            subb    a,#0x73
073E EB        2283            mov     a,r3
073F 6480      2284            xrl     a,#0x80
0741 9480      2285            subb    a,#0x80
0743 5000      2286            jnc     L022016?
0745           2287   ;        main.c:895: waitms(5);
0745 900005    2288            mov     dptr,#0x0005
0748 C002      2289            push    ar2
074A C003      2290            push    ar3
074C 120000    2291            lcall   _waitms
074F D003      2292            pop     ar3
0751 D002      2293            pop     ar2
0753           2294   ;        main.c:896: servo_base--;
0753 904CC0    2295            mov     dptr,#_servo_base
0756 E0        2296            movx    a,@dptr
0757 14        2297            dec     a
0758 904CC0    2298            mov     dptr,#_servo_base
075B F0        2299            movx    @dptr,a
075C           2300   ;        main.c:894: for(i = 0; i<115; i++){
075C 0A        2301            inc     r2
075D BA0010    2302            cjne    r2,#0x00,L022013?
0760 0B        2303            inc     r3
0761 8000      2304            sjmp    L022013?
0763           2305   L022016?:
0763           2306   ;        main.c:898: waitms(500);
0763 9001F4    2307            mov     dptr,#0x01F4
0766 120000    2308            lcall   _waitms
0769           2309   ;        main.c:899: Magnet = 0;
0769 C295      2310            clr     _P1_5
076B           2311   ;        main.c:900: waitms(200);
076B 9000C8    2312            mov     dptr,#0x00C8
076E 120000    2313            lcall   _waitms
0771           2314   ;        main.c:901: servo_arm=2;
0771 904C80    2315            mov     dptr,#_servo_arm
0774 7402      2316            mov     a,#0x02
0776 F0        2317            movx    @dptr,a
0777           2318   ;        main.c:902: servo_base=60;
0777 904CC0    2319            mov     dptr,#_servo_base
077A 743C      2320            mov     a,#0x3C
077C F0        2321            movx    @dptr,a
077D           2322   ;        main.c:903: return;
077D 22        2323            ret
077E           2324   ;------------------------------------------------------------
077E           2325   ;Allocation info for local variables in function 'check_bound'
077E           2326   ;------------------------------------------------------------
077E           2327   ;d2                        Allocated with name '_check_bound_PARM_2'
077E           2328   ;d1                        Allocated to registers r2 r3 
077E           2329   ;------------------------------------------------------------
077E           2330   ;        main.c:906: int check_bound(int d1, int d2){
077E           2331   ;        -----------------------------------------
077E           2332   ;         function check_bound
077E           2333   ;        -----------------------------------------
077E           2334   _check_bound:
077E AA82      2335            mov     r2,dpl
0780 AB83      2336            mov     r3,dph
0782           2337   ;        main.c:907: if(d1>12000||d2>12000)      return 1;
0782 C3        2338            clr     c
0783 74E0      2339            mov     a,#0xE0
0785 9A        2340            subb    a,r2
0786 74AE      2341            mov     a,#(0x2E ^ 0x80)
0788 8BF0      2342            mov     b,r3
078A 63F080    2343            xrl     b,#0x80
078D 95F0      2344            subb    a,b
078F 4000      2345            jc      L023001?
0791 74E0      2346            mov     a,#0xE0
0793 9590      2347            subb    a,_check_bound_PARM_2
0795 74AE      2348            mov     a,#(0x2E ^ 0x80)
0797 8591F0    2349            mov     b,(_check_bound_PARM_2 + 1)
079A 63F080    2350            xrl     b,#0x80
079D 95F0      2351            subb    a,b
079F 5000      2352            jnc     L023002?
07A1           2353   L023001?:
07A1 900001    2354            mov     dptr,#0x0001
07A4           2355   ;        main.c:908: else return 0;
07A4 22        2356            ret
07A5           2357   L023002?:
07A5 900000    2358            mov     dptr,#0x0000
07A8 22        2359            ret
07A9           2360   ;------------------------------------------------------------
07A9           2361   ;Allocation info for local variables in function 'Init_all'
07A9           2362   ;------------------------------------------------------------
07A9           2363   ;------------------------------------------------------------
07A9           2364   ;        main.c:911: void Init_all(){
07A9           2365   ;        -----------------------------------------
07A9           2366   ;         function Init_all
07A9           2367   ;        -----------------------------------------
07A9           2368   _Init_all:
07A9           2369   ;        main.c:913: Set_Pin_Output(0x24);
07A9 758224    2370            mov     dpl,#0x24
07AC 120000    2371            lcall   _Set_Pin_Output
07AF           2372   ;        main.c:914: Set_Pin_Output(0x23);
07AF 758223    2373            mov     dpl,#0x23
07B2 120000    2374            lcall   _Set_Pin_Output
07B5           2375   ;        main.c:915: Set_Pin_Output(0x22);
07B5 758222    2376            mov     dpl,#0x22
07B8 120000    2377            lcall   _Set_Pin_Output
07BB           2378   ;        main.c:916: Set_Pin_Output(0x21);
07BB 758221    2379            mov     dpl,#0x21
07BE 120000    2380            lcall   _Set_Pin_Output
07C1           2381   ;        main.c:917: Set_Pin_Output(0x17);
07C1 758217    2382            mov     dpl,#0x17
07C4 120000    2383            lcall   _Set_Pin_Output
07C7           2384   ;        main.c:918: Set_Pin_Output(0x16);
07C7 758216    2385            mov     dpl,#0x16
07CA 120000    2386            lcall   _Set_Pin_Output
07CD           2387   ;        main.c:919: Set_Pin_Output(0x15);
07CD 758215    2388            mov     dpl,#0x15
07D0 120000    2389            lcall   _Set_Pin_Output
07D3           2390   ;        main.c:920: Set_Pin_Output(0x10); // CS
07D3 758210    2391            mov     dpl,#0x10
07D6 120000    2392            lcall   _Set_Pin_Output
07D9           2393   ;        main.c:922: Set_Pin_Input(0x30);
07D9 758230    2394            mov     dpl,#0x30
07DC 120000    2395            lcall   _Set_Pin_Input
07DF           2396   ;        main.c:923: Set_Pin_Output(0x25); // CLK for Load
07DF 758225    2397            mov     dpl,#0x25
07E2 120000    2398            lcall   _Set_Pin_Output
07E5           2399   ;        main.c:924: Set_Pin_Input(0x26);
07E5 758226    2400            mov     dpl,#0x26
07E8 120000    2401            lcall   _Set_Pin_Input
07EB           2402   ;        main.c:927: InitPinADC(1,3);
07EB 75E003    2403            mov     _InitPinADC_PARM_2,#0x03
07EE 758201    2404            mov     dpl,#0x01
07F1 120000    2405            lcall   _InitPinADC
07F4           2406   ;        main.c:928: InitPinADC(1,4);
07F4 75E004    2407            mov     _InitPinADC_PARM_2,#0x04
07F7 758201    2408            mov     dpl,#0x01
07FA 120000    2409            lcall   _InitPinADC
07FD           2410   ;        main.c:929: InitADC();
07FD 120000    2411            lcall   _InitADC
0800           2412   ;        main.c:931: TMOD&=0b_1111_0000; 
0800 5389F0    2413            anl     _TMOD,#0xF0
0803           2414   ;        main.c:932: TMOD|=0b_0000_0001; 
0803 438901    2415            orl     _TMOD,#0x01
0806           2416   ;        main.c:933: TR0=0; 
0806 C28C      2417            clr     _TR0
0808           2418   ;        main.c:935: Servo_arm=0;
0808 C296      2419            clr     _P1_6
080A           2420   ;        main.c:936: Servo_base=0;
080A C297      2421            clr     _P1_7
080C           2422   ;        main.c:937: Magnet = 0;
080C C295      2423            clr     _P1_5
080E           2424   ;        main.c:938: PD_SCK = 0;
080E C2A5      2425            clr     _P2_5
0810           2426   ;        main.c:939: return;
0810 22        2427            ret
0811           2428   ;------------------------------------------------------------
0811           2429   ;Allocation info for local variables in function 'Move_back_ms'
0811           2430   ;------------------------------------------------------------
0811           2431   ;ms                        Allocated to registers r2 r3 
0811           2432   ;------------------------------------------------------------
0811           2433   ;        main.c:942: void Move_back_ms(int ms){
0811           2434   ;        -----------------------------------------
0811           2435   ;         function Move_back_ms
0811           2436   ;        -----------------------------------------
0811           2437   _Move_back_ms:
0811 AA82      2438            mov     r2,dpl
0813 AB83      2439            mov     r3,dph
0815           2440   ;        main.c:944: L_motor_dir = 1;
0815 904D40    2441            mov     dptr,#_L_motor_dir
0818 7401      2442            mov     a,#0x01
081A F0        2443            movx    @dptr,a
081B           2444   ;        main.c:945: R_motor_dir = 1;
081B 904D00    2445            mov     dptr,#_R_motor_dir
081E 7401      2446            mov     a,#0x01
0820 F0        2447            movx    @dptr,a
0821           2448   ;        main.c:947: pwm_left = 50;
0821 904DC0    2449            mov     dptr,#_pwm_left
0824 7432      2450            mov     a,#0x32
0826 F0        2451            movx    @dptr,a
0827           2452   ;        main.c:948: pwm_right = 50;
0827 904D80    2453            mov     dptr,#_pwm_right
082A 7432      2454            mov     a,#0x32
082C F0        2455            movx    @dptr,a
082D           2456   ;        main.c:950: waitms(ms);
082D 8A82      2457            mov     dpl,r2
082F 8B83      2458            mov     dph,r3
0831 120000    2459            lcall   _waitms
0834           2460   ;        main.c:952: L_motor_dir = 0;
0834 904D40    2461            mov     dptr,#_L_motor_dir
0837           2462   ;        main.c:953: R_motor_dir = 0;
0837           2463   ;        main.c:954: pwm_left = 0;
0837           2464   ;        main.c:955: pwm_right = 0;
0837 E4        2465            clr     a
0838 F0        2466            movx    @dptr,a
0839 904D00    2467            mov     dptr,#_R_motor_dir
083C F0        2468            movx    @dptr,a
083D 904DC0    2469            mov     dptr,#_pwm_left
0840 F0        2470            movx    @dptr,a
0841 904D80    2471            mov     dptr,#_pwm_right
0844 F0        2472            movx    @dptr,a
0845           2473   ;        main.c:956: return;
0845 22        2474            ret
0846           2475   ;------------------------------------------------------------
0846           2476   ;Allocation info for local variables in function 'Right_angle'
0846           2477   ;------------------------------------------------------------
0846           2478   ;angle                     Allocated to registers r2 r3 
0846           2479   ;------------------------------------------------------------
0846           2480   ;        main.c:959: void Right_angle(int angle){
0846           2481   ;        -----------------------------------------
0846           2482   ;         function Right_angle
0846           2483   ;        -----------------------------------------
0846           2484   _Right_angle:
0846 AA82      2485            mov     r2,dpl
0848 AB83      2486            mov     r3,dph
084A           2487   ;        main.c:961: L_motor_dir = 1;
084A 904D40    2488            mov     dptr,#_L_motor_dir
084D 7401      2489            mov     a,#0x01
084F F0        2490            movx    @dptr,a
0850           2491   ;        main.c:962: R_motor_dir = 0;
0850 904D00    2492            mov     dptr,#_R_motor_dir
0853 E4        2493            clr     a
0854 F0        2494            movx    @dptr,a
0855           2495   ;        main.c:963: pwm_left = 80;
0855 904DC0    2496            mov     dptr,#_pwm_left
0858 7450      2497            mov     a,#0x50
085A F0        2498            movx    @dptr,a
085B           2499   ;        main.c:964: pwm_right = 80 * pwm_corr;
085B C002      2500            push    ar2
085D C003      2501            push    ar3
085F 904A70    2502            mov     dptr,#_pwm_corr
0862 E0        2503            movx    a,@dptr
0863 C0E0      2504            push    acc
0865 A3        2505            inc     dptr
0866 E0        2506            movx    a,@dptr
0867 C0E0      2507            push    acc
0869 A3        2508            inc     dptr
086A E0        2509            movx    a,@dptr
086B C0E0      2510            push    acc
086D A3        2511            inc     dptr
086E E0        2512            movx    a,@dptr
086F C0E0      2513            push    acc
0871 900000    2514            mov     dptr,#0x0000
0874 75F0A0    2515            mov     b,#0xA0
0877 7442      2516            mov     a,#0x42
0879 120000    2517            lcall   ___fsmul
087C AC82      2518            mov     r4,dpl
087E AD83      2519            mov     r5,dph
0880 AEF0      2520            mov     r6,b
0882 FF        2521            mov     r7,a
0883 E581      2522            mov     a,sp
0885 24FC      2523            add     a,#0xfc
0887 F581      2524            mov     sp,a
0889 8C82      2525            mov     dpl,r4
088B 8D83      2526            mov     dph,r5
088D 8EF0      2527            mov     b,r6
088F EF        2528            mov     a,r7
0890 120000    2529            lcall   ___fs2uchar
0893 E582      2530            mov     a,dpl
0895 D003      2531            pop     ar3
0897 D002      2532            pop     ar2
0899 904D80    2533            mov     dptr,#_pwm_right
089C F0        2534            movx    @dptr,a
089D           2535   ;        main.c:966: waitms(angle);
089D 8A82      2536            mov     dpl,r2
089F 8B83      2537            mov     dph,r3
08A1 120000    2538            lcall   _waitms
08A4           2539   ;        main.c:968: L_motor_dir = 0;
08A4 904D40    2540            mov     dptr,#_L_motor_dir
08A7           2541   ;        main.c:969: R_motor_dir = 0;
08A7           2542   ;        main.c:970: pwm_left = 0;
08A7           2543   ;        main.c:971: pwm_right = 0;
08A7 E4        2544            clr     a
08A8 F0        2545            movx    @dptr,a
08A9 904D00    2546            mov     dptr,#_R_motor_dir
08AC F0        2547            movx    @dptr,a
08AD 904DC0    2548            mov     dptr,#_pwm_left
08B0 F0        2549            movx    @dptr,a
08B1 904D80    2550            mov     dptr,#_pwm_right
08B4 F0        2551            movx    @dptr,a
08B5           2552   ;        main.c:972: return;
08B5 22        2553            ret
08B6           2554   ;------------------------------------------------------------
08B6           2555   ;Allocation info for local variables in function 'Move_forward'
08B6           2556   ;------------------------------------------------------------
08B6           2557   ;------------------------------------------------------------
08B6           2558   ;        main.c:975: void Move_forward(){
08B6           2559   ;        -----------------------------------------
08B6           2560   ;         function Move_forward
08B6           2561   ;        -----------------------------------------
08B6           2562   _Move_forward:
08B6           2563   ;        main.c:977: L_motor_dir = 0;
08B6 904D40    2564            mov     dptr,#_L_motor_dir
08B9           2565   ;        main.c:978: R_motor_dir = 0;
08B9 E4        2566            clr     a
08BA F0        2567            movx    @dptr,a
08BB 904D00    2568            mov     dptr,#_R_motor_dir
08BE F0        2569            movx    @dptr,a
08BF           2570   ;        main.c:979: pwm_left = 60;
08BF 904DC0    2571            mov     dptr,#_pwm_left
08C2 743C      2572            mov     a,#0x3C
08C4 F0        2573            movx    @dptr,a
08C5           2574   ;        main.c:980: pwm_right = 60 * pwm_corr;
08C5 904A70    2575            mov     dptr,#_pwm_corr
08C8 E0        2576            movx    a,@dptr
08C9 C0E0      2577            push    acc
08CB A3        2578            inc     dptr
08CC E0        2579            movx    a,@dptr
08CD C0E0      2580            push    acc
08CF A3        2581            inc     dptr
08D0 E0        2582            movx    a,@dptr
08D1 C0E0      2583            push    acc
08D3 A3        2584            inc     dptr
08D4 E0        2585            movx    a,@dptr
08D5 C0E0      2586            push    acc
08D7 900000    2587            mov     dptr,#0x0000
08DA 75F070    2588            mov     b,#0x70
08DD 7442      2589            mov     a,#0x42
08DF 120000    2590            lcall   ___fsmul
08E2 AA82      2591            mov     r2,dpl
08E4 AB83      2592            mov     r3,dph
08E6 ACF0      2593            mov     r4,b
08E8 FD        2594            mov     r5,a
08E9 E581      2595            mov     a,sp
08EB 24FC      2596            add     a,#0xfc
08ED F581      2597            mov     sp,a
08EF 8A82      2598            mov     dpl,r2
08F1 8B83      2599            mov     dph,r3
08F3 8CF0      2600            mov     b,r4
08F5 ED        2601            mov     a,r5
08F6 120000    2602            lcall   ___fs2uchar
08F9 E582      2603            mov     a,dpl
08FB 904D80    2604            mov     dptr,#_pwm_right
08FE F0        2605            movx    @dptr,a
08FF           2606   ;        main.c:981: return;
08FF 22        2607            ret
0900           2608   ;------------------------------------------------------------
0900           2609   ;Allocation info for local variables in function 'simple_rand'
0900           2610   ;------------------------------------------------------------
0900           2611   ;------------------------------------------------------------
0900           2612   ;        main.c:984: unsigned int simple_rand() {
0900           2613   ;        -----------------------------------------
0900           2614   ;         function simple_rand
0900           2615   ;        -----------------------------------------
0900           2616   _simple_rand:
0900           2617   ;        main.c:985: seed = (seed * 25173 + 13849) & 0xFFFF;  
0900 904AB0    2618            mov     dptr,#_seed
0903 E0        2619            movx    a,@dptr
0904 F500      2620            mov     __mulint_PARM_2,a
0906 A3        2621            inc     dptr
0907 E0        2622            movx    a,@dptr
0908 F501      2623            mov     (__mulint_PARM_2 + 1),a
090A 906255    2624            mov     dptr,#0x6255
090D 120000    2625            lcall   __mulint
0910 E582      2626            mov     a,dpl
0912 8583F0    2627            mov     b,dph
0915 904AB0    2628            mov     dptr,#_seed
0918 2419      2629            add     a,#0x19
091A F0        2630            movx    @dptr,a
091B 7436      2631            mov     a,#0x36
091D 35F0      2632            addc    a,b
091F A3        2633            inc     dptr
0920 F0        2634            movx    @dptr,a
0921           2635   ;        main.c:986: return seed;     
0921 904AB0    2636            mov     dptr,#_seed
0924 E0        2637            movx    a,@dptr
0925 FA        2638            mov     r2,a
0926 A3        2639            inc     dptr
0927 E0        2640            movx    a,@dptr
0928 8A82      2641            mov     dpl,r2
092A F583      2642            mov     dph,a
092C 22        2643            ret
092D           2644   ;------------------------------------------------------------
092D           2645   ;Allocation info for local variables in function 'get_random_90_250'
092D           2646   ;------------------------------------------------------------
092D           2647   ;------------------------------------------------------------
092D           2648   ;        main.c:989: unsigned int get_random_90_250() {
092D           2649   ;        -----------------------------------------
092D           2650   ;         function get_random_90_250
092D           2651   ;        -----------------------------------------
092D           2652   _get_random_90_250:
092D           2653   ;        main.c:990: return (simple_rand() % (250 - 85 + 1)) + 85;
092D 120000    2654            lcall   _simple_rand
0930 7500A6    2655            mov     __moduint_PARM_2,#0xA6
0933 E4        2656            clr     a
0934 F501      2657            mov     (__moduint_PARM_2 + 1),a
0936 120000    2658            lcall   __moduint
0939 E582      2659            mov     a,dpl
093B 8583F0    2660            mov     b,dph
093E 2455      2661            add     a,#0x55
0940 F582      2662            mov     dpl,a
0942 E4        2663            clr     a
0943 35F0      2664            addc    a,b
0945 F583      2665            mov     dph,a
0947 22        2666            ret
0948           2667   ;------------------------------------------------------------
0948           2668   ;Allocation info for local variables in function 'Auto_mode_slave'
0948           2669   ;------------------------------------------------------------
0948           2670   ;sloc0                     Allocated with name '_Auto_mode_slave_sloc0_1_0'
0948           2671   ;count                     Allocated with name '_Auto_mode_slave_count_1_168'
0948           2672   ;command                   Allocated with name '_Auto_mode_slave_command_1_168'
0948           2673   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_168'
0948           2674   ;bound                     Allocated with name '_Auto_mode_slave_bound_1_168'
0948           2675   ;c                         Allocated with name '_Auto_mode_slave_c_1_168'
0948           2676   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_168'
0948           2677   ;angle                     Allocated with name '_Auto_mode_slave_angle_1_168'
0948           2678   ;------------------------------------------------------------
0948           2679   ;        main.c:1015: void Auto_mode_slave(){
0948           2680   ;        -----------------------------------------
0948           2681   ;         function Auto_mode_slave
0948           2682   ;        -----------------------------------------
0948           2683   _Auto_mode_slave:
0948           2684   ;        main.c:1018: xdata int state_res = 1;
0948 90C6B0    2685            mov     dptr,#_Auto_mode_slave_state_res_1_168
094B 7401      2686            mov     a,#0x01
094D F0        2687            movx    @dptr,a
094E E4        2688            clr     a
094F A3        2689            inc     dptr
0950 F0        2690            movx    @dptr,a
0951           2691   ;        main.c:1026: while(count < 20 && state_res){
0951 E4        2692            clr     a
0952 F5E0      2693            mov     _Auto_mode_slave_sloc0_1_0,a
0954 F5E1      2694            mov     (_Auto_mode_slave_sloc0_1_0 + 1),a
0956           2695   L030018?:
0956 C3        2696            clr     c
0957 E5E0      2697            mov     a,_Auto_mode_slave_sloc0_1_0
0959 9414      2698            subb    a,#0x14
095B E5E1      2699            mov     a,(_Auto_mode_slave_sloc0_1_0 + 1)
095D 6480      2700            xrl     a,#0x80
095F 9480      2701            subb    a,#0x80
0961 4000      2702            jc      L030034?
0963 22        2703            ret
0964           2704   L030034?:
0964 90C6B0    2705            mov     dptr,#_Auto_mode_slave_state_res_1_168
0967 E0        2706            movx    a,@dptr
0968 FC        2707            mov     r4,a
0969 A3        2708            inc     dptr
096A E0        2709            movx    a,@dptr
096B FD        2710            mov     r5,a
096C 4C        2711            orl     a,r4
096D 7000      2712            jnz     L030035?
096F 22        2713            ret
0970           2714   L030035?:
0970           2715   ;        main.c:1028: if(RXU1()){
0970 C004      2716            push    ar4
0972 C005      2717            push    ar5
0974 120000    2718            lcall   _RXU1
0977 D005      2719            pop     ar5
0979 D004      2720            pop     ar4
097B 4000      2721            jc      L030036?
097D 020000    2722            ljmp    L030012?
0980           2723   L030036?:
0980           2724   ;        main.c:1029: c=getchar1();      
0980 C004      2725            push    ar4
0982 C005      2726            push    ar5
0984 120000    2727            lcall   _getchar1
0987 AE82      2728            mov     r6,dpl
0989 D005      2729            pop     ar5
098B D004      2730            pop     ar4
098D           2731   ;        main.c:1030: if(c=='!'){
098D BE21E0    2732            cjne    r6,#0x21,L030037?
0990 8000      2733            sjmp    L030038?
0992           2734   L030037?:
0992 020000    2735            ljmp    L030009?
0995           2736   L030038?:
0995           2737   ;        main.c:1031: getstr1(buff, sizeof(buff)-1);
0995 75D013    2738            mov     _getstr1_PARM_2,#0x13
0998 905240    2739            mov     dptr,#_buff
099B 75F040    2740            mov     b,#0x40
099E 120000    2741            lcall   _getstr1
09A1           2742   ;        main.c:1032: if(strlen(buff)==11){
09A1 905240    2743            mov     dptr,#_buff
09A4 75F040    2744            mov     b,#0x40
09A7 120000    2745            lcall   _strlen
09AA AF82      2746            mov     r7,dpl
09AC AA83      2747            mov     r2,dph
09AE BF0BE0    2748            cjne    r7,#0x0B,L030039?
09B1 BA00E0    2749            cjne    r2,#0x00,L030039?
09B4 8000      2750            sjmp    L030040?
09B6           2751   L030039?:
09B6 020000    2752            ljmp    L030012?
09B9           2753   L030040?:
09B9           2754   ;        main.c:1033: printf("master_messgae_auto_mode: %s\r\n", buff);
09B9 7440      2755            mov     a,#_buff
09BB C0E0      2756            push    acc
09BD 7452      2757            mov     a,#(_buff >> 8)
09BF C0E0      2758            push    acc
09C1 7440      2759            mov     a,#0x40
09C3 C0E0      2760            push    acc
09C5 7460      2761            mov     a,#__str_3
09C7 C0E0      2762            push    acc
09C9 74E7      2763            mov     a,#(__str_3 >> 8)
09CB C0E0      2764            push    acc
09CD 7480      2765            mov     a,#0x80
09CF C0E0      2766            push    acc
09D1 120000    2767            lcall   _printf
09D4 E581      2768            mov     a,sp
09D6 24FA      2769            add     a,#0xfa
09D8 F581      2770            mov     sp,a
09DA           2771   ;        main.c:1034: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
09DA 7450      2772            mov     a,#_Auto_mode_slave_command_1_168
09DC C0E0      2773            push    acc
09DE 74C6      2774            mov     a,#(_Auto_mode_slave_command_1_168 >> 8)
09E0 C0E0      2775            push    acc
09E2 E4        2776            clr     a
09E3 C0E0      2777            push    acc
09E5 7400      2778            mov     a,#_Auto_mode_slave_dummy_1_168
09E7 C0E0      2779            push    acc
09E9 74C7      2780            mov     a,#(_Auto_mode_slave_dummy_1_168 >> 8)
09EB C0E0      2781            push    acc
09ED E4        2782            clr     a
09EE C0E0      2783            push    acc
09F0 7400      2784            mov     a,#_Auto_mode_slave_dummy_1_168
09F2 C0E0      2785            push    acc
09F4 74C7      2786            mov     a,#(_Auto_mode_slave_dummy_1_168 >> 8)
09F6 C0E0      2787            push    acc
09F8 E4        2788            clr     a
09F9 C0E0      2789            push    acc
09FB 7400      2790            mov     a,#_Auto_mode_slave_dummy_1_168
09FD C0E0      2791            push    acc
09FF 74C7      2792            mov     a,#(_Auto_mode_slave_dummy_1_168 >> 8)
0A01 C0E0      2793            push    acc
0A03 E4        2794            clr     a
0A04 C0E0      2795            push    acc
0A06 74A0      2796            mov     a,#__str_4
0A08 C0E0      2797            push    acc
0A0A 74E7      2798            mov     a,#(__str_4 >> 8)
0A0C C0E0      2799            push    acc
0A0E 7480      2800            mov     a,#0x80
0A10 C0E0      2801            push    acc
0A12 7440      2802            mov     a,#_buff
0A14 C0E0      2803            push    acc
0A16 7452      2804            mov     a,#(_buff >> 8)
0A18 C0E0      2805            push    acc
0A1A 7440      2806            mov     a,#0x40
0A1C C0E0      2807            push    acc
0A1E 120000    2808            lcall   _sscanf
0A21 E581      2809            mov     a,sp
0A23 24EE      2810            add     a,#0xee
0A25 F581      2811            mov     sp,a
0A27           2812   ;        main.c:1035: if(command) state_res = 1;
0A27 90C650    2813            mov     dptr,#_Auto_mode_slave_command_1_168
0A2A E0        2814            movx    a,@dptr
0A2B FF        2815            mov     r7,a
0A2C A3        2816            inc     dptr
0A2D E0        2817            movx    a,@dptr
0A2E FA        2818            mov     r2,a
0A2F 4F        2819            orl     a,r7
0A30 6000      2820            jz      L030002?
0A32 90C6B0    2821            mov     dptr,#_Auto_mode_slave_state_res_1_168
0A35 7401      2822            mov     a,#0x01
0A37 F0        2823            movx    @dptr,a
0A38 E4        2824            clr     a
0A39 A3        2825            inc     dptr
0A3A F0        2826            movx    @dptr,a
0A3B 020000    2827            ljmp    L030012?
0A3E           2828   L030002?:
0A3E           2829   ;        main.c:1036: else state_res = 0;
0A3E 90C6B0    2830            mov     dptr,#_Auto_mode_slave_state_res_1_168
0A41 E4        2831            clr     a
0A42 F0        2832            movx    @dptr,a
0A43 A3        2833            inc     dptr
0A44 F0        2834            movx    @dptr,a
0A45 8000      2835            sjmp    L030012?
0A47           2836   L030009?:
0A47           2837   ;        main.c:1042: else if(c=='@'){
0A47 BE40A0    2838            cjne    r6,#0x40,L030012?
0A4A           2839   ;        main.c:1043: sprintf(buff, "%01d,%02d,%ld,%05d,%03d\n", state_res, count,freq100, 0, (int)curr_angle);
0A4A 904A30    2840            mov     dptr,#_curr_angle
0A4D E0        2841            movx    a,@dptr
0A4E FA        2842            mov     r2,a
0A4F A3        2843            inc     dptr
0A50 E0        2844            movx    a,@dptr
0A51 FB        2845            mov     r3,a
0A52 A3        2846            inc     dptr
0A53 E0        2847            movx    a,@dptr
0A54 FE        2848            mov     r6,a
0A55 A3        2849            inc     dptr
0A56 E0        2850            movx    a,@dptr
0A57 8A82      2851            mov     dpl,r2
0A59 8B83      2852            mov     dph,r3
0A5B 8EF0      2853            mov     b,r6
0A5D C004      2854            push    ar4
0A5F C005      2855            push    ar5
0A61 120000    2856            lcall   ___fs2sint
0A64 AA82      2857            mov     r2,dpl
0A66 AB83      2858            mov     r3,dph
0A68 D005      2859            pop     ar5
0A6A D004      2860            pop     ar4
0A6C C002      2861            push    ar2
0A6E C003      2862            push    ar3
0A70 E4        2863            clr     a
0A71 C0E0      2864            push    acc
0A73 C0E0      2865            push    acc
0A75 905200    2866            mov     dptr,#_freq100
0A78 E0        2867            movx    a,@dptr
0A79 C0E0      2868            push    acc
0A7B A3        2869            inc     dptr
0A7C E0        2870            movx    a,@dptr
0A7D C0E0      2871            push    acc
0A7F A3        2872            inc     dptr
0A80 E0        2873            movx    a,@dptr
0A81 C0E0      2874            push    acc
0A83 A3        2875            inc     dptr
0A84 E0        2876            movx    a,@dptr
0A85 C0E0      2877            push    acc
0A87 C0E0      2878            push    _Auto_mode_slave_sloc0_1_0
0A89 C0E1      2879            push    (_Auto_mode_slave_sloc0_1_0 + 1)
0A8B C004      2880            push    ar4
0A8D C005      2881            push    ar5
0A8F 74A0      2882            mov     a,#__str_5
0A91 C0E0      2883            push    acc
0A93 74E8      2884            mov     a,#(__str_5 >> 8)
0A95 C0E0      2885            push    acc
0A97 7480      2886            mov     a,#0x80
0A99 C0E0      2887            push    acc
0A9B 7440      2888            mov     a,#_buff
0A9D C0E0      2889            push    acc
0A9F 7452      2890            mov     a,#(_buff >> 8)
0AA1 C0E0      2891            push    acc
0AA3 7440      2892            mov     a,#0x40
0AA5 C0E0      2893            push    acc
0AA7 120000    2894            lcall   _sprintf
0AAA E581      2895            mov     a,sp
0AAC 24EE      2896            add     a,#0xee
0AAE F581      2897            mov     sp,a
0AB0           2898   ;        main.c:1044: waitms(5); 
0AB0 900005    2899            mov     dptr,#0x0005
0AB3 120000    2900            lcall   _waitms
0AB6           2901   ;        main.c:1045: sendstr1(buff);
0AB6 905240    2902            mov     dptr,#_buff
0AB9 75F040    2903            mov     b,#0x40
0ABC 120000    2904            lcall   _sendstr1
0ABF           2905   L030012?:
0ABF           2906   ;        main.c:1050: Move_forward();
0ABF 120000    2907            lcall   _Move_forward
0AC2           2908   ;        main.c:1052: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
0AC2 758209    2909            mov     dpl,#0x09
0AC5 120000    2910            lcall   _ADC_at_Pin
0AC8 E582      2911            mov     a,dpl
0ACA 8583F0    2912            mov     b,dph
0ACD 9051C0    2913            mov     dptr,#_d1
0AD0 F0        2914            movx    @dptr,a
0AD1 A3        2915            inc     dptr
0AD2 E5F0      2916            mov     a,b
0AD4 F0        2917            movx    @dptr,a
0AD5           2918   ;        main.c:1053: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
0AD5 75820A    2919            mov     dpl,#0x0A
0AD8 120000    2920            lcall   _ADC_at_Pin
0ADB AA82      2921            mov     r2,dpl
0ADD AB83      2922            mov     r3,dph
0ADF 905180    2923            mov     dptr,#_d2
0AE2 EA        2924            mov     a,r2
0AE3 F0        2925            movx    @dptr,a
0AE4 A3        2926            inc     dptr
0AE5 EB        2927            mov     a,r3
0AE6 F0        2928            movx    @dptr,a
0AE7           2929   ;        main.c:1054: bound = check_bound(d1,d2);
0AE7 9051C0    2930            mov     dptr,#_d1
0AEA E0        2931            movx    a,@dptr
0AEB FC        2932            mov     r4,a
0AEC A3        2933            inc     dptr
0AED E0        2934            movx    a,@dptr
0AEE FD        2935            mov     r5,a
0AEF 8A90      2936            mov     _check_bound_PARM_2,r2
0AF1 8B91      2937            mov     (_check_bound_PARM_2 + 1),r3
0AF3 8C82      2938            mov     dpl,r4
0AF5 8D83      2939            mov     dph,r5
0AF7 120000    2940            lcall   _check_bound
0AFA AA82      2941            mov     r2,dpl
0AFC AB83      2942            mov     r3,dph
0AFE           2943   ;        main.c:1055: printf("f:%04ld, d1:%d, d2:%d, bound_dectect: %d\r\n",freq100, d1,d2,bound);
0AFE C002      2944            push    ar2
0B00 C003      2945            push    ar3
0B02 C002      2946            push    ar2
0B04 C003      2947            push    ar3
0B06 905180    2948            mov     dptr,#_d2
0B09 E0        2949            movx    a,@dptr
0B0A C0E0      2950            push    acc
0B0C A3        2951            inc     dptr
0B0D E0        2952            movx    a,@dptr
0B0E C0E0      2953            push    acc
0B10 9051C0    2954            mov     dptr,#_d1
0B13 E0        2955            movx    a,@dptr
0B14 C0E0      2956            push    acc
0B16 A3        2957            inc     dptr
0B17 E0        2958            movx    a,@dptr
0B18 C0E0      2959            push    acc
0B1A 905200    2960            mov     dptr,#_freq100
0B1D E0        2961            movx    a,@dptr
0B1E C0E0      2962            push    acc
0B20 A3        2963            inc     dptr
0B21 E0        2964            movx    a,@dptr
0B22 C0E0      2965            push    acc
0B24 A3        2966            inc     dptr
0B25 E0        2967            movx    a,@dptr
0B26 C0E0      2968            push    acc
0B28 A3        2969            inc     dptr
0B29 E0        2970            movx    a,@dptr
0B2A C0E0      2971            push    acc
0B2C 7420      2972            mov     a,#__str_6
0B2E C0E0      2973            push    acc
0B30 74E9      2974            mov     a,#(__str_6 >> 8)
0B32 C0E0      2975            push    acc
0B34 7480      2976            mov     a,#0x80
0B36 C0E0      2977            push    acc
0B38 120000    2978            lcall   _printf
0B3B E581      2979            mov     a,sp
0B3D 24F3      2980            add     a,#0xf3
0B3F F581      2981            mov     sp,a
0B41 D003      2982            pop     ar3
0B43 D002      2983            pop     ar2
0B45           2984   ;        main.c:1057: if (freq100>=5340){
0B45 905200    2985            mov     dptr,#_freq100
0B48 E0        2986            movx    a,@dptr
0B49 FC        2987            mov     r4,a
0B4A A3        2988            inc     dptr
0B4B E0        2989            movx    a,@dptr
0B4C FD        2990            mov     r5,a
0B4D A3        2991            inc     dptr
0B4E E0        2992            movx    a,@dptr
0B4F FE        2993            mov     r6,a
0B50 A3        2994            inc     dptr
0B51 E0        2995            movx    a,@dptr
0B52 FF        2996            mov     r7,a
0B53 C3        2997            clr     c
0B54 EC        2998            mov     a,r4
0B55 94DC      2999            subb    a,#0xDC
0B57 ED        3000            mov     a,r5
0B58 9414      3001            subb    a,#0x14
0B5A EE        3002            mov     a,r6
0B5B 9400      3003            subb    a,#0x00
0B5D EF        3004            mov     a,r7
0B5E 6480      3005            xrl     a,#0x80
0B60 9480      3006            subb    a,#0x80
0B62 4000      3007            jc      L030014?
0B64           3008   ;        main.c:1058: mea_yes = 0;
0B64 904930    3009            mov     dptr,#_mea_yes
0B67 E4        3010            clr     a
0B68 F0        3011            movx    @dptr,a
0B69           3012   ;        main.c:1059: Move_back_ms(300);
0B69 90012C    3013            mov     dptr,#0x012C
0B6C C002      3014            push    ar2
0B6E C003      3015            push    ar3
0B70 120000    3016            lcall   _Move_back_ms
0B73           3017   ;        main.c:1060: waitms(100);
0B73 900064    3018            mov     dptr,#0x0064
0B76 120000    3019            lcall   _waitms
0B79           3020   ;        main.c:1061: servo_pick();
0B79 120000    3021            lcall   _servo_pick
0B7C D003      3022            pop     ar3
0B7E D002      3023            pop     ar2
0B80           3024   ;        main.c:1062: count++;
0B80 05E0      3025            inc     _Auto_mode_slave_sloc0_1_0
0B82 E4        3026            clr     a
0B83 B5E0A0    3027            cjne    a,_Auto_mode_slave_sloc0_1_0,L030045?
0B86 05E1      3028            inc     (_Auto_mode_slave_sloc0_1_0 + 1)
0B88           3029   L030045?:
0B88           3030   ;        main.c:1063: waitms(100);
0B88 900064    3031            mov     dptr,#0x0064
0B8B C002      3032            push    ar2
0B8D C003      3033            push    ar3
0B8F 120000    3034            lcall   _waitms
0B92           3035   ;        main.c:1064: mea_yes = 1;
0B92 904930    3036            mov     dptr,#_mea_yes
0B95 7401      3037            mov     a,#0x01
0B97 F0        3038            movx    @dptr,a
0B98           3039   ;        main.c:1065: Move_forward();
0B98 120000    3040            lcall   _Move_forward
0B9B D003      3041            pop     ar3
0B9D D002      3042            pop     ar2
0B9F           3043   L030014?:
0B9F           3044   ;        main.c:1068: if(bound == 1){
0B9F BA01E0    3045            cjne    r2,#0x01,L030046?
0BA2 BB00E0    3046            cjne    r3,#0x00,L030046?
0BA5 8000      3047            sjmp    L030047?
0BA7           3048   L030046?:
0BA7 020000    3049            ljmp    L030018?
0BAA           3050   L030047?:
0BAA           3051   ;        main.c:1069: Move_back_ms(500);
0BAA 9001F4    3052            mov     dptr,#0x01F4
0BAD 120000    3053            lcall   _Move_back_ms
0BB0           3054   ;        main.c:1070: waitms(100);
0BB0 900064    3055            mov     dptr,#0x0064
0BB3 120000    3056            lcall   _waitms
0BB6           3057   ;        main.c:1071: angle = get_random_90_250();
0BB6 120000    3058            lcall   _get_random_90_250
0BB9 858200    3059            mov     __mulint_PARM_2,dpl
0BBC 858301    3060            mov     (__mulint_PARM_2 + 1),dph
0BBF           3061   ;        main.c:1072: Right_angle(angle*600/90);
0BBF 900258    3062            mov     dptr,#0x0258
0BC2 120000    3063            lcall   __mulint
0BC5 AA82      3064            mov     r2,dpl
0BC7 AB83      3065            mov     r3,dph
0BC9 75005A    3066            mov     __divuint_PARM_2,#0x5A
0BCC E4        3067            clr     a
0BCD F501      3068            mov     (__divuint_PARM_2 + 1),a
0BCF 8A82      3069            mov     dpl,r2
0BD1 8B83      3070            mov     dph,r3
0BD3 120000    3071            lcall   __divuint
0BD6 120000    3072            lcall   _Right_angle
0BD9 020000    3073            ljmp    L030018?
0BDC           3074   ;------------------------------------------------------------
0BDC           3075   ;Allocation info for local variables in function 'Joystick_Control'
0BDC           3076   ;------------------------------------------------------------
0BDC           3077   ;vy_ptr                    Allocated with name '_Joystick_Control_PARM_2'
0BDC           3078   ;vx_ptr                    Allocated to registers r2 r3 r4 
0BDC           3079   ;sloc0                     Allocated with name '_Joystick_Control_sloc0_1_0'
0BDC           3080   ;sloc1                     Allocated with name '_Joystick_Control_sloc1_1_0'
0BDC           3081   ;sloc2                     Allocated with name '_Joystick_Control_sloc2_1_0'
0BDC           3082   ;sloc3                     Allocated with name '_Joystick_Control_sloc3_1_0'
0BDC           3083   ;sloc4                     Allocated with name '_Joystick_Control_sloc4_1_0'
0BDC           3084   ;sloc5                     Allocated with name '_Joystick_Control_sloc5_1_0'
0BDC           3085   ;sloc6                     Allocated with name '_Joystick_Control_sloc6_1_0'
0BDC           3086   ;vx                        Allocated with name '_Joystick_Control_vx_1_177'
0BDC           3087   ;vy                        Allocated with name '_Joystick_Control_vy_1_177'
0BDC           3088   ;vx_error                  Allocated with name '_Joystick_Control_vx_error_1_177'
0BDC           3089   ;vy_error                  Allocated with name '_Joystick_Control_vy_error_1_177'
0BDC           3090   ;vx_err                    Allocated with name '_Joystick_Control_vx_err_1_177'
0BDC           3091   ;vy_err                    Allocated with name '_Joystick_Control_vy_err_1_177'
0BDC           3092   ;------------------------------------------------------------
0BDC           3093   ;        main.c:1080: float Joystick_Control(int *vx_ptr, int *vy_ptr)
0BDC           3094   ;        -----------------------------------------
0BDC           3095   ;         function Joystick_Control
0BDC           3096   ;        -----------------------------------------
0BDC           3097   _Joystick_Control:
0BDC           3098   ;        main.c:1084: vx = *vx_ptr; 
0BDC 120000    3099            lcall   __gptrget
0BDF F530      3100            mov     _Joystick_Control_sloc0_1_0,a
0BE1 A3        3101            inc     dptr
0BE2 120000    3102            lcall   __gptrget
0BE5 F531      3103            mov     (_Joystick_Control_sloc0_1_0 + 1),a
0BE7           3104   ;        main.c:1085: vy = *vy_ptr; 
0BE7 AC90      3105            mov     r4,_Joystick_Control_PARM_2
0BE9 AD91      3106            mov     r5,(_Joystick_Control_PARM_2 + 1)
0BEB AE92      3107            mov     r6,(_Joystick_Control_PARM_2 + 2)
0BED 8C82      3108            mov     dpl,r4
0BEF 8D83      3109            mov     dph,r5
0BF1 8EF0      3110            mov     b,r6
0BF3 120000    3111            lcall   __gptrget
0BF6 FC        3112            mov     r4,a
0BF7 A3        3113            inc     dptr
0BF8 120000    3114            lcall   __gptrget
0BFB FD        3115            mov     r5,a
0BFC           3116   ;        main.c:1091: vx_error = abs(vx-vx_thres)*100/vx_thres; 
0BFC 904C40    3117            mov     dptr,#_vx_thres
0BFF E0        3118            movx    a,@dptr
0C00 FE        3119            mov     r6,a
0C01 A3        3120            inc     dptr
0C02 E0        3121            movx    a,@dptr
0C03 FF        3122            mov     r7,a
0C04 E530      3123            mov     a,_Joystick_Control_sloc0_1_0
0C06 C3        3124            clr     c
0C07 9E        3125            subb    a,r6
0C08 F582      3126            mov     dpl,a
0C0A E531      3127            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
0C0C 9F        3128            subb    a,r7
0C0D F583      3129            mov     dph,a
0C0F C004      3130            push    ar4
0C11 C005      3131            push    ar5
0C13 120000    3132            lcall   _abs
0C16 858200    3133            mov     __mulint_PARM_2,dpl
0C19 858301    3134            mov     (__mulint_PARM_2 + 1),dph
0C1C 900064    3135            mov     dptr,#0x0064
0C1F 120000    3136            lcall   __mulint
0C22 AE82      3137            mov     r6,dpl
0C24 AF83      3138            mov     r7,dph
0C26 904C40    3139            mov     dptr,#_vx_thres
0C29 E0        3140            movx    a,@dptr
0C2A F500      3141            mov     __divsint_PARM_2,a
0C2C A3        3142            inc     dptr
0C2D E0        3143            movx    a,@dptr
0C2E F501      3144            mov     (__divsint_PARM_2 + 1),a
0C30 8E82      3145            mov     dpl,r6
0C32 8F83      3146            mov     dph,r7
0C34 120000    3147            lcall   __divsint
0C37 E582      3148            mov     a,dpl
0C39 8583F0    3149            mov     b,dph
0C3C D005      3150            pop     ar5
0C3E D004      3151            pop     ar4
0C40 90C760    3152            mov     dptr,#_Joystick_Control_vx_error_1_177
0C43 F0        3153            movx    @dptr,a
0C44 A3        3154            inc     dptr
0C45 E5F0      3155            mov     a,b
0C47 F0        3156            movx    @dptr,a
0C48           3157   ;        main.c:1092: vy_error = abs(vy-vy_thres)*100/vy_thres; 
0C48 904C00    3158            mov     dptr,#_vy_thres
0C4B E0        3159            movx    a,@dptr
0C4C FE        3160            mov     r6,a
0C4D A3        3161            inc     dptr
0C4E E0        3162            movx    a,@dptr
0C4F FF        3163            mov     r7,a
0C50 EC        3164            mov     a,r4
0C51 C3        3165            clr     c
0C52 9E        3166            subb    a,r6
0C53 F582      3167            mov     dpl,a
0C55 ED        3168            mov     a,r5
0C56 9F        3169            subb    a,r7
0C57 F583      3170            mov     dph,a
0C59 C004      3171            push    ar4
0C5B C005      3172            push    ar5
0C5D 120000    3173            lcall   _abs
0C60 858200    3174            mov     __mulint_PARM_2,dpl
0C63 858301    3175            mov     (__mulint_PARM_2 + 1),dph
0C66 900064    3176            mov     dptr,#0x0064
0C69 120000    3177            lcall   __mulint
0C6C AE82      3178            mov     r6,dpl
0C6E AF83      3179            mov     r7,dph
0C70 904C00    3180            mov     dptr,#_vy_thres
0C73 E0        3181            movx    a,@dptr
0C74 F5D0      3182            mov     _Joystick_Control_sloc2_1_0,a
0C76 A3        3183            inc     dptr
0C77 E0        3184            movx    a,@dptr
0C78 F5D1      3185            mov     (_Joystick_Control_sloc2_1_0 + 1),a
0C7A 85D000    3186            mov     __divsint_PARM_2,_Joystick_Control_sloc2_1_0
0C7D 85D101    3187            mov     (__divsint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
0C80           3188   ;        main.c:1093: vx_err = vx-vx_thres; 
0C80 8E82      3189            mov     dpl,r6
0C82 8F83      3190            mov     dph,r7
0C84 120000    3191            lcall   __divsint
0C87 AE82      3192            mov     r6,dpl
0C89 AF83      3193            mov     r7,dph
0C8B D005      3194            pop     ar5
0C8D D004      3195            pop     ar4
0C8F 904C40    3196            mov     dptr,#_vx_thres
0C92 E0        3197            movx    a,@dptr
0C93 FA        3198            mov     r2,a
0C94 A3        3199            inc     dptr
0C95 E0        3200            movx    a,@dptr
0C96 FB        3201            mov     r3,a
0C97 E530      3202            mov     a,_Joystick_Control_sloc0_1_0
0C99 C3        3203            clr     c
0C9A 9A        3204            subb    a,r2
0C9B F570      3205            mov     _Joystick_Control_sloc4_1_0,a
0C9D E531      3206            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
0C9F 9B        3207            subb    a,r3
0CA0 F571      3208            mov     (_Joystick_Control_sloc4_1_0 + 1),a
0CA2           3209   ;        main.c:1094: vy_err = vy-vy_thres; 
0CA2 EC        3210            mov     a,r4
0CA3 C3        3211            clr     c
0CA4 95D0      3212            subb    a,_Joystick_Control_sloc2_1_0
0CA6 F530      3213            mov     _Joystick_Control_sloc0_1_0,a
0CA8 ED        3214            mov     a,r5
0CA9 95D1      3215            subb    a,(_Joystick_Control_sloc2_1_0 + 1)
0CAB F531      3216            mov     (_Joystick_Control_sloc0_1_0 + 1),a
0CAD           3217   ;        main.c:1095: pwm_left = 0; 
0CAD 904DC0    3218            mov     dptr,#_pwm_left
0CB0           3219   ;        main.c:1096: pwm_right = 0; 
0CB0 E4        3220            clr     a
0CB1 F0        3221            movx    @dptr,a
0CB2 904D80    3222            mov     dptr,#_pwm_right
0CB5 F0        3223            movx    @dptr,a
0CB6           3224   ;        main.c:1098: if ((vy_error>5) && (vx_error<5)){
0CB6 C3        3225            clr     c
0CB7 7405      3226            mov     a,#0x05
0CB9 9E        3227            subb    a,r6
0CBA E4        3228            clr     a
0CBB 6480      3229            xrl     a,#0x80
0CBD 8FF0      3230            mov     b,r7
0CBF 63F080    3231            xrl     b,#0x80
0CC2 95F0      3232            subb    a,b
0CC4 E4        3233            clr     a
0CC5 33        3234            rlc     a
0CC6 F580      3235            mov     _Joystick_Control_sloc1_1_0,a
0CC8 7000      3236            jnz     L031056?
0CCA 020000    3237            ljmp    L031005?
0CCD           3238   L031056?:
0CCD 90C760    3239            mov     dptr,#_Joystick_Control_vx_error_1_177
0CD0 E0        3240            movx    a,@dptr
0CD1 FA        3241            mov     r2,a
0CD2 A3        3242            inc     dptr
0CD3 E0        3243            movx    a,@dptr
0CD4 FB        3244            mov     r3,a
0CD5 C3        3245            clr     c
0CD6 EA        3246            mov     a,r2
0CD7 9405      3247            subb    a,#0x05
0CD9 EB        3248            mov     a,r3
0CDA 6480      3249            xrl     a,#0x80
0CDC 9480      3250            subb    a,#0x80
0CDE 4000      3251            jc      L031057?
0CE0 020000    3252            ljmp    L031005?
0CE3           3253   L031057?:
0CE3           3254   ;        main.c:1099: pwm_left = vy_error; 
0CE3 904DC0    3255            mov     dptr,#_pwm_left
0CE6 EE        3256            mov     a,r6
0CE7 F0        3257            movx    @dptr,a
0CE8           3258   ;        main.c:1100: pwm_right = vy_error * pwm_corr; 
0CE8 8E82      3259            mov     dpl,r6
0CEA 8F83      3260            mov     dph,r7
0CEC C004      3261            push    ar4
0CEE C005      3262            push    ar5
0CF0 C006      3263            push    ar6
0CF2 C007      3264            push    ar7
0CF4 120000    3265            lcall   ___sint2fs
0CF7 AA82      3266            mov     r2,dpl
0CF9 AB83      3267            mov     r3,dph
0CFB A8F0      3268            mov     r0,b
0CFD F9        3269            mov     r1,a
0CFE 904A70    3270            mov     dptr,#_pwm_corr
0D01 E0        3271            movx    a,@dptr
0D02 C0E0      3272            push    acc
0D04 A3        3273            inc     dptr
0D05 E0        3274            movx    a,@dptr
0D06 C0E0      3275            push    acc
0D08 A3        3276            inc     dptr
0D09 E0        3277            movx    a,@dptr
0D0A C0E0      3278            push    acc
0D0C A3        3279            inc     dptr
0D0D E0        3280            movx    a,@dptr
0D0E C0E0      3281            push    acc
0D10 8A82      3282            mov     dpl,r2
0D12 8B83      3283            mov     dph,r3
0D14 88F0      3284            mov     b,r0
0D16 E9        3285            mov     a,r1
0D17 120000    3286            lcall   ___fsmul
0D1A AA82      3287            mov     r2,dpl
0D1C AB83      3288            mov     r3,dph
0D1E A8F0      3289            mov     r0,b
0D20 F9        3290            mov     r1,a
0D21 E581      3291            mov     a,sp
0D23 24FC      3292            add     a,#0xfc
0D25 F581      3293            mov     sp,a
0D27 8A82      3294            mov     dpl,r2
0D29 8B83      3295            mov     dph,r3
0D2B 88F0      3296            mov     b,r0
0D2D E9        3297            mov     a,r1
0D2E 120000    3298            lcall   ___fs2uchar
0D31 858220    3299            mov     _Joystick_Control_sloc3_1_0,dpl
0D34 D007      3300            pop     ar7
0D36 D006      3301            pop     ar6
0D38 D005      3302            pop     ar5
0D3A D004      3303            pop     ar4
0D3C 904D80    3304            mov     dptr,#_pwm_right
0D3F E520      3305            mov     a,_Joystick_Control_sloc3_1_0
0D41 F0        3306            movx    @dptr,a
0D42           3307   ;        main.c:1101: if (vy_err > 0){ //move forward
0D42 C3        3308            clr     c
0D43 E4        3309            clr     a
0D44 9530      3310            subb    a,_Joystick_Control_sloc0_1_0
0D46 E4        3311            clr     a
0D47 6480      3312            xrl     a,#0x80
0D49 8531F0    3313            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
0D4C 63F080    3314            xrl     b,#0x80
0D4F 95F0      3315            subb    a,b
0D51 5000      3316            jnc     L031002?
0D53           3317   ;        main.c:1102: L_motor_dir = 0; 
0D53 904D40    3318            mov     dptr,#_L_motor_dir
0D56           3319   ;        main.c:1103: R_motor_dir = 0; 
0D56 E4        3320            clr     a
0D57 F0        3321            movx    @dptr,a
0D58 904D00    3322            mov     dptr,#_R_motor_dir
0D5B F0        3323            movx    @dptr,a
0D5C 8000      3324            sjmp    L031005?
0D5E           3325   L031002?:
0D5E           3326   ;        main.c:1106: L_motor_dir = 1; 
0D5E 904D40    3327            mov     dptr,#_L_motor_dir
0D61 7401      3328            mov     a,#0x01
0D63 F0        3329            movx    @dptr,a
0D64           3330   ;        main.c:1107: R_motor_dir = 1; 
0D64 904D00    3331            mov     dptr,#_R_motor_dir
0D67 7401      3332            mov     a,#0x01
0D69 F0        3333            movx    @dptr,a
0D6A           3334   ;        main.c:1108: pwm_right *= 1.05;
0D6A 852082    3335            mov     dpl,_Joystick_Control_sloc3_1_0
0D6D C004      3336            push    ar4
0D6F C005      3337            push    ar5
0D71 C006      3338            push    ar6
0D73 C007      3339            push    ar7
0D75 120000    3340            lcall   ___uchar2fs
0D78 A882      3341            mov     r0,dpl
0D7A A983      3342            mov     r1,dph
0D7C AAF0      3343            mov     r2,b
0D7E FB        3344            mov     r3,a
0D7F C000      3345            push    ar0
0D81 C001      3346            push    ar1
0D83 C002      3347            push    ar2
0D85 C003      3348            push    ar3
0D87 906666    3349            mov     dptr,#0x6666
0D8A 75F086    3350            mov     b,#0x86
0D8D 743F      3351            mov     a,#0x3F
0D8F 120000    3352            lcall   ___fsmul
0D92 AA82      3353            mov     r2,dpl
0D94 AB83      3354            mov     r3,dph
0D96 A8F0      3355            mov     r0,b
0D98 F9        3356            mov     r1,a
0D99 E581      3357            mov     a,sp
0D9B 24FC      3358            add     a,#0xfc
0D9D F581      3359            mov     sp,a
0D9F 8A82      3360            mov     dpl,r2
0DA1 8B83      3361            mov     dph,r3
0DA3 88F0      3362            mov     b,r0
0DA5 E9        3363            mov     a,r1
0DA6 120000    3364            lcall   ___fs2uchar
0DA9 E582      3365            mov     a,dpl
0DAB D007      3366            pop     ar7
0DAD D006      3367            pop     ar6
0DAF D005      3368            pop     ar5
0DB1 D004      3369            pop     ar4
0DB3 904D80    3370            mov     dptr,#_pwm_right
0DB6 F0        3371            movx    @dptr,a
0DB7           3372   ;        main.c:1192: return 0.0;
0DB7           3373   ;        main.c:1108: pwm_right *= 1.05;
0DB7           3374   L031005?:
0DB7           3375   ;        main.c:1111: if ((vx_error>5)&&(vy_error<5)){
0DB7 90C760    3376            mov     dptr,#_Joystick_Control_vx_error_1_177
0DBA E0        3377            movx    a,@dptr
0DBB F510      3378            mov     _Joystick_Control_sloc6_1_0,a
0DBD A3        3379            inc     dptr
0DBE E0        3380            movx    a,@dptr
0DBF F511      3381            mov     (_Joystick_Control_sloc6_1_0 + 1),a
0DC1 C3        3382            clr     c
0DC2 7405      3383            mov     a,#0x05
0DC4 9510      3384            subb    a,_Joystick_Control_sloc6_1_0
0DC6 E4        3385            clr     a
0DC7 6480      3386            xrl     a,#0x80
0DC9 8511F0    3387            mov     b,(_Joystick_Control_sloc6_1_0 + 1)
0DCC 63F080    3388            xrl     b,#0x80
0DCF 95F0      3389            subb    a,b
0DD1 E4        3390            clr     a
0DD2 33        3391            rlc     a
0DD3 F520      3392            mov     _Joystick_Control_sloc3_1_0,a
0DD5 7000      3393            jnz     L031059?
0DD7 020000    3394            ljmp    L031011?
0DDA           3395   L031059?:
0DDA C3        3396            clr     c
0DDB EE        3397            mov     a,r6
0DDC 9405      3398            subb    a,#0x05
0DDE EF        3399            mov     a,r7
0DDF 6480      3400            xrl     a,#0x80
0DE1 9480      3401            subb    a,#0x80
0DE3 4000      3402            jc      L031060?
0DE5 020000    3403            ljmp    L031011?
0DE8           3404   L031060?:
0DE8           3405   ;        main.c:1112: pwm_left = vx_error; 
0DE8 C004      3406            push    ar4
0DEA C005      3407            push    ar5
0DEC 904DC0    3408            mov     dptr,#_pwm_left
0DEF E510      3409            mov     a,_Joystick_Control_sloc6_1_0
0DF1 F0        3410            movx    @dptr,a
0DF2           3411   ;        main.c:1113: pwm_right = vx_error * pwm_corr; 
0DF2 851082    3412            mov     dpl,_Joystick_Control_sloc6_1_0
0DF5 851183    3413            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
0DF8 C006      3414            push    ar6
0DFA C007      3415            push    ar7
0DFC 120000    3416            lcall   ___sint2fs
0DFF AC82      3417            mov     r4,dpl
0E01 AD83      3418            mov     r5,dph
0E03 AAF0      3419            mov     r2,b
0E05 FB        3420            mov     r3,a
0E06 904A70    3421            mov     dptr,#_pwm_corr
0E09 E0        3422            movx    a,@dptr
0E0A C0E0      3423            push    acc
0E0C A3        3424            inc     dptr
0E0D E0        3425            movx    a,@dptr
0E0E C0E0      3426            push    acc
0E10 A3        3427            inc     dptr
0E11 E0        3428            movx    a,@dptr
0E12 C0E0      3429            push    acc
0E14 A3        3430            inc     dptr
0E15 E0        3431            movx    a,@dptr
0E16 C0E0      3432            push    acc
0E18 8C82      3433            mov     dpl,r4
0E1A 8D83      3434            mov     dph,r5
0E1C 8AF0      3435            mov     b,r2
0E1E EB        3436            mov     a,r3
0E1F 120000    3437            lcall   ___fsmul
0E22 AA82      3438            mov     r2,dpl
0E24 AB83      3439            mov     r3,dph
0E26 ACF0      3440            mov     r4,b
0E28 FD        3441            mov     r5,a
0E29 E581      3442            mov     a,sp
0E2B 24FC      3443            add     a,#0xfc
0E2D F581      3444            mov     sp,a
0E2F D007      3445            pop     ar7
0E31 D006      3446            pop     ar6
0E33 8A82      3447            mov     dpl,r2
0E35 8B83      3448            mov     dph,r3
0E37 8CF0      3449            mov     b,r4
0E39 ED        3450            mov     a,r5
0E3A C004      3451            push    ar4
0E3C C005      3452            push    ar5
0E3E C006      3453            push    ar6
0E40 C007      3454            push    ar7
0E42 120000    3455            lcall   ___fs2uchar
0E45 E582      3456            mov     a,dpl
0E47 D007      3457            pop     ar7
0E49 D006      3458            pop     ar6
0E4B D005      3459            pop     ar5
0E4D D004      3460            pop     ar4
0E4F 904D80    3461            mov     dptr,#_pwm_right
0E52 F0        3462            movx    @dptr,a
0E53           3463   ;        main.c:1114: if (vx_err > 0){ //turn right
0E53 C3        3464            clr     c
0E54 E4        3465            clr     a
0E55 9570      3466            subb    a,_Joystick_Control_sloc4_1_0
0E57 E4        3467            clr     a
0E58 6480      3468            xrl     a,#0x80
0E5A 8571F0    3469            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
0E5D 63F080    3470            xrl     b,#0x80
0E60 95F0      3471            subb    a,b
0E62 D005      3472            pop     ar5
0E64 D004      3473            pop     ar4
0E66 5000      3474            jnc     L031008?
0E68           3475   ;        main.c:1115: L_motor_dir = 1; 
0E68 904D40    3476            mov     dptr,#_L_motor_dir
0E6B 7401      3477            mov     a,#0x01
0E6D F0        3478            movx    @dptr,a
0E6E           3479   ;        main.c:1116: R_motor_dir = 0;
0E6E 904D00    3480            mov     dptr,#_R_motor_dir
0E71 E4        3481            clr     a
0E72 F0        3482            movx    @dptr,a
0E73 8000      3483            sjmp    L031011?
0E75           3484   L031008?:
0E75           3485   ;        main.c:1120: L_motor_dir = 0; 
0E75 904D40    3486            mov     dptr,#_L_motor_dir
0E78 E4        3487            clr     a
0E79 F0        3488            movx    @dptr,a
0E7A           3489   ;        main.c:1121: R_motor_dir = 1; 
0E7A 904D00    3490            mov     dptr,#_R_motor_dir
0E7D 7401      3491            mov     a,#0x01
0E7F F0        3492            movx    @dptr,a
0E80           3493   L031011?:
0E80           3494   ;        main.c:1127: if ((vx_error>5)&&(vy_error)>5){
0E80 E520      3495            mov     a,_Joystick_Control_sloc3_1_0
0E82 7000      3496            jnz     L031062?
0E84 020000    3497            ljmp    L031036?
0E87           3498   L031062?:
0E87 E580      3499            mov     a,_Joystick_Control_sloc1_1_0
0E89 7000      3500            jnz     L031063?
0E8B 020000    3501            ljmp    L031036?
0E8E           3502   L031063?:
0E8E           3503   ;        main.c:1130: if (vy_err>0){
0E8E C3        3504            clr     c
0E8F E4        3505            clr     a
0E90 9530      3506            subb    a,_Joystick_Control_sloc0_1_0
0E92 E4        3507            clr     a
0E93 6480      3508            xrl     a,#0x80
0E95 8531F0    3509            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
0E98 63F080    3510            xrl     b,#0x80
0E9B 95F0      3511            subb    a,b
0E9D 4000      3512            jc      L031064?
0E9F 020000    3513            ljmp    L031023?
0EA2           3514   L031064?:
0EA2           3515   ;        main.c:1131: L_motor_dir = 0; 
0EA2 904D40    3516            mov     dptr,#_L_motor_dir
0EA5           3517   ;        main.c:1132: R_motor_dir = 0; 
0EA5 E4        3518            clr     a
0EA6 F0        3519            movx    @dptr,a
0EA7 904D00    3520            mov     dptr,#_R_motor_dir
0EAA F0        3521            movx    @dptr,a
0EAB           3522   ;        main.c:1134: if (vx_err>0){
0EAB C3        3523            clr     c
0EAC E4        3524            clr     a
0EAD 9570      3525            subb    a,_Joystick_Control_sloc4_1_0
0EAF E4        3526            clr     a
0EB0 6480      3527            xrl     a,#0x80
0EB2 8571F0    3528            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
0EB5 63F080    3529            xrl     b,#0x80
0EB8 95F0      3530            subb    a,b
0EBA 4000      3531            jc      L031065?
0EBC 020000    3532            ljmp    L031020?
0EBF           3533   L031065?:
0EBF           3534   ;        main.c:1136: if (vy*100<=vy_thres*100/2){
0EBF 8C00      3535            mov     __mulint_PARM_2,r4
0EC1 8D01      3536            mov     (__mulint_PARM_2 + 1),r5
0EC3 900064    3537            mov     dptr,#0x0064
0EC6 C004      3538            push    ar4
0EC8 C005      3539            push    ar5
0ECA C006      3540            push    ar6
0ECC C007      3541            push    ar7
0ECE 120000    3542            lcall   __mulint
0ED1 AA82      3543            mov     r2,dpl
0ED3 AB83      3544            mov     r3,dph
0ED5 D007      3545            pop     ar7
0ED7 D006      3546            pop     ar6
0ED9 D005      3547            pop     ar5
0EDB D004      3548            pop     ar4
0EDD 85D000    3549            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
0EE0 85D101    3550            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
0EE3 900064    3551            mov     dptr,#0x0064
0EE6 C002      3552            push    ar2
0EE8 C003      3553            push    ar3
0EEA C004      3554            push    ar4
0EEC C005      3555            push    ar5
0EEE C006      3556            push    ar6
0EF0 C007      3557            push    ar7
0EF2 120000    3558            lcall   __mulint
0EF5 A882      3559            mov     r0,dpl
0EF7 A983      3560            mov     r1,dph
0EF9 750002    3561            mov     __divsint_PARM_2,#0x02
0EFC E4        3562            clr     a
0EFD F501      3563            mov     (__divsint_PARM_2 + 1),a
0EFF 8882      3564            mov     dpl,r0
0F01 8983      3565            mov     dph,r1
0F03 120000    3566            lcall   __divsint
0F06 A882      3567            mov     r0,dpl
0F08 A983      3568            mov     r1,dph
0F0A D007      3569            pop     ar7
0F0C D006      3570            pop     ar6
0F0E D005      3571            pop     ar5
0F10 D004      3572            pop     ar4
0F12 D003      3573            pop     ar3
0F14 D002      3574            pop     ar2
0F16 C3        3575            clr     c
0F17 E8        3576            mov     a,r0
0F18 9A        3577            subb    a,r2
0F19 E9        3578            mov     a,r1
0F1A 6480      3579            xrl     a,#0x80
0F1C 8BF0      3580            mov     b,r3
0F1E 63F080    3581            xrl     b,#0x80
0F21 95F0      3582            subb    a,b
0F23 5000      3583            jnc     L031066?
0F25 020000    3584            ljmp    L031014?
0F28           3585   L031066?:
0F28           3586   ;        main.c:1137: pwm_left = vy_error; 
0F28 C004      3587            push    ar4
0F2A C005      3588            push    ar5
0F2C 904DC0    3589            mov     dptr,#_pwm_left
0F2F EE        3590            mov     a,r6
0F30 F0        3591            movx    @dptr,a
0F31           3592   ;        main.c:1138: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
0F31 904A70    3593            mov     dptr,#_pwm_corr
0F34 E0        3594            movx    a,@dptr
0F35 F5C0      3595            mov     _Joystick_Control_sloc5_1_0,a
0F37 A3        3596            inc     dptr
0F38 E0        3597            movx    a,@dptr
0F39 F5C1      3598            mov     (_Joystick_Control_sloc5_1_0 + 1),a
0F3B A3        3599            inc     dptr
0F3C E0        3600            movx    a,@dptr
0F3D F5C2      3601            mov     (_Joystick_Control_sloc5_1_0 + 2),a
0F3F A3        3602            inc     dptr
0F40 E0        3603            movx    a,@dptr
0F41 F5C3      3604            mov     (_Joystick_Control_sloc5_1_0 + 3),a
0F43 8E82      3605            mov     dpl,r6
0F45 8F83      3606            mov     dph,r7
0F47 C006      3607            push    ar6
0F49 C007      3608            push    ar7
0F4B 120000    3609            lcall   ___sint2fs
0F4E AA82      3610            mov     r2,dpl
0F50 AB83      3611            mov     r3,dph
0F52 ACF0      3612            mov     r4,b
0F54 FD        3613            mov     r5,a
0F55 C002      3614            push    ar2
0F57 C003      3615            push    ar3
0F59 C004      3616            push    ar4
0F5B C005      3617            push    ar5
0F5D 85C082    3618            mov     dpl,_Joystick_Control_sloc5_1_0
0F60 85C183    3619            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
0F63 85C2F0    3620            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
0F66 E5C3      3621            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
0F68 120000    3622            lcall   ___fsmul
0F6B AA82      3623            mov     r2,dpl
0F6D AB83      3624            mov     r3,dph
0F6F ACF0      3625            mov     r4,b
0F71 FD        3626            mov     r5,a
0F72 E581      3627            mov     a,sp
0F74 24FC      3628            add     a,#0xfc
0F76 F581      3629            mov     sp,a
0F78 D007      3630            pop     ar7
0F7A D006      3631            pop     ar6
0F7C C004      3632            push    ar4
0F7E C005      3633            push    ar5
0F80 C006      3634            push    ar6
0F82 C007      3635            push    ar7
0F84 C002      3636            push    ar2
0F86 C003      3637            push    ar3
0F88 C004      3638            push    ar4
0F8A C005      3639            push    ar5
0F8C 900000    3640            mov     dptr,#0x0000
0F8F 75F0C8    3641            mov     b,#0xC8
0F92 7442      3642            mov     a,#0x42
0F94 120000    3643            lcall   ___fsmul
0F97 8582C0    3644            mov     _Joystick_Control_sloc5_1_0,dpl
0F9A 8583C1    3645            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
0F9D 85F0C2    3646            mov     (_Joystick_Control_sloc5_1_0 + 2),b
0FA0 F5C3      3647            mov     (_Joystick_Control_sloc5_1_0 + 3),a
0FA2 E581      3648            mov     a,sp
0FA4 24FC      3649            add     a,#0xfc
0FA6 F581      3650            mov     sp,a
0FA8 D007      3651            pop     ar7
0FAA D006      3652            pop     ar6
0FAC D005      3653            pop     ar5
0FAE D004      3654            pop     ar4
0FB0 EE        3655            mov     a,r6
0FB1 2510      3656            add     a,_Joystick_Control_sloc6_1_0
0FB3 F582      3657            mov     dpl,a
0FB5 EF        3658            mov     a,r7
0FB6 3511      3659            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
0FB8 F583      3660            mov     dph,a
0FBA C006      3661            push    ar6
0FBC C007      3662            push    ar7
0FBE 120000    3663            lcall   ___sint2fs
0FC1 AA82      3664            mov     r2,dpl
0FC3 AB83      3665            mov     r3,dph
0FC5 ACF0      3666            mov     r4,b
0FC7 FD        3667            mov     r5,a
0FC8 C002      3668            push    ar2
0FCA C003      3669            push    ar3
0FCC C004      3670            push    ar4
0FCE C005      3671            push    ar5
0FD0 85C082    3672            mov     dpl,_Joystick_Control_sloc5_1_0
0FD3 85C183    3673            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
0FD6 85C2F0    3674            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
0FD9 E5C3      3675            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
0FDB 120000    3676            lcall   ___fsdiv
0FDE AA82      3677            mov     r2,dpl
0FE0 AB83      3678            mov     r3,dph
0FE2 ACF0      3679            mov     r4,b
0FE4 FD        3680            mov     r5,a
0FE5 E581      3681            mov     a,sp
0FE7 24FC      3682            add     a,#0xfc
0FE9 F581      3683            mov     sp,a
0FEB D007      3684            pop     ar7
0FED D006      3685            pop     ar6
0FEF 8A82      3686            mov     dpl,r2
0FF1 8B83      3687            mov     dph,r3
0FF3 8CF0      3688            mov     b,r4
0FF5 ED        3689            mov     a,r5
0FF6 C004      3690            push    ar4
0FF8 C005      3691            push    ar5
0FFA C006      3692            push    ar6
0FFC C007      3693            push    ar7
0FFE 120000    3694            lcall   ___fs2uchar
1001 E582      3695            mov     a,dpl
1003 D007      3696            pop     ar7
1005 D006      3697            pop     ar6
1007 D005      3698            pop     ar5
1009 D004      3699            pop     ar4
100B 904D80    3700            mov     dptr,#_pwm_right
100E F0        3701            movx    @dptr,a
100F D005      3702            pop     ar5
1011 D004      3703            pop     ar4
1013 020000    3704            ljmp    L031023?
1016           3705   L031014?:
1016           3706   ;        main.c:1141: pwm_left = vx_error; 
1016 C004      3707            push    ar4
1018 C005      3708            push    ar5
101A 904DC0    3709            mov     dptr,#_pwm_left
101D E510      3710            mov     a,_Joystick_Control_sloc6_1_0
101F F0        3711            movx    @dptr,a
1020           3712   ;        main.c:1142: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
1020 904A70    3713            mov     dptr,#_pwm_corr
1023 E0        3714            movx    a,@dptr
1024 F5C0      3715            mov     _Joystick_Control_sloc5_1_0,a
1026 A3        3716            inc     dptr
1027 E0        3717            movx    a,@dptr
1028 F5C1      3718            mov     (_Joystick_Control_sloc5_1_0 + 1),a
102A A3        3719            inc     dptr
102B E0        3720            movx    a,@dptr
102C F5C2      3721            mov     (_Joystick_Control_sloc5_1_0 + 2),a
102E A3        3722            inc     dptr
102F E0        3723            movx    a,@dptr
1030 F5C3      3724            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1032 851082    3725            mov     dpl,_Joystick_Control_sloc6_1_0
1035 851183    3726            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
1038 C006      3727            push    ar6
103A C007      3728            push    ar7
103C 120000    3729            lcall   ___sint2fs
103F AA82      3730            mov     r2,dpl
1041 AB83      3731            mov     r3,dph
1043 ACF0      3732            mov     r4,b
1045 FD        3733            mov     r5,a
1046 C002      3734            push    ar2
1048 C003      3735            push    ar3
104A C004      3736            push    ar4
104C C005      3737            push    ar5
104E 85C082    3738            mov     dpl,_Joystick_Control_sloc5_1_0
1051 85C183    3739            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1054 85C2F0    3740            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1057 E5C3      3741            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1059 120000    3742            lcall   ___fsmul
105C AA82      3743            mov     r2,dpl
105E AB83      3744            mov     r3,dph
1060 ACF0      3745            mov     r4,b
1062 FD        3746            mov     r5,a
1063 E581      3747            mov     a,sp
1065 24FC      3748            add     a,#0xfc
1067 F581      3749            mov     sp,a
1069 D007      3750            pop     ar7
106B D006      3751            pop     ar6
106D C004      3752            push    ar4
106F C005      3753            push    ar5
1071 C006      3754            push    ar6
1073 C007      3755            push    ar7
1075 C002      3756            push    ar2
1077 C003      3757            push    ar3
1079 C004      3758            push    ar4
107B C005      3759            push    ar5
107D 900000    3760            mov     dptr,#0x0000
1080 75F0C8    3761            mov     b,#0xC8
1083 7442      3762            mov     a,#0x42
1085 120000    3763            lcall   ___fsmul
1088 8582C0    3764            mov     _Joystick_Control_sloc5_1_0,dpl
108B 8583C1    3765            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
108E 85F0C2    3766            mov     (_Joystick_Control_sloc5_1_0 + 2),b
1091 F5C3      3767            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1093 E581      3768            mov     a,sp
1095 24FC      3769            add     a,#0xfc
1097 F581      3770            mov     sp,a
1099 D007      3771            pop     ar7
109B D006      3772            pop     ar6
109D D005      3773            pop     ar5
109F D004      3774            pop     ar4
10A1 EE        3775            mov     a,r6
10A2 2510      3776            add     a,_Joystick_Control_sloc6_1_0
10A4 F582      3777            mov     dpl,a
10A6 EF        3778            mov     a,r7
10A7 3511      3779            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
10A9 F583      3780            mov     dph,a
10AB C006      3781            push    ar6
10AD C007      3782            push    ar7
10AF 120000    3783            lcall   ___sint2fs
10B2 AA82      3784            mov     r2,dpl
10B4 AB83      3785            mov     r3,dph
10B6 ACF0      3786            mov     r4,b
10B8 FD        3787            mov     r5,a
10B9 C002      3788            push    ar2
10BB C003      3789            push    ar3
10BD C004      3790            push    ar4
10BF C005      3791            push    ar5
10C1 85C082    3792            mov     dpl,_Joystick_Control_sloc5_1_0
10C4 85C183    3793            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
10C7 85C2F0    3794            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
10CA E5C3      3795            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
10CC 120000    3796            lcall   ___fsdiv
10CF AA82      3797            mov     r2,dpl
10D1 AB83      3798            mov     r3,dph
10D3 ACF0      3799            mov     r4,b
10D5 FD        3800            mov     r5,a
10D6 E581      3801            mov     a,sp
10D8 24FC      3802            add     a,#0xfc
10DA F581      3803            mov     sp,a
10DC D007      3804            pop     ar7
10DE D006      3805            pop     ar6
10E0 8A82      3806            mov     dpl,r2
10E2 8B83      3807            mov     dph,r3
10E4 8CF0      3808            mov     b,r4
10E6 ED        3809            mov     a,r5
10E7 C004      3810            push    ar4
10E9 C005      3811            push    ar5
10EB C006      3812            push    ar6
10ED C007      3813            push    ar7
10EF 120000    3814            lcall   ___fs2uchar
10F2 E582      3815            mov     a,dpl
10F4 D007      3816            pop     ar7
10F6 D006      3817            pop     ar6
10F8 D005      3818            pop     ar5
10FA D004      3819            pop     ar4
10FC 904D80    3820            mov     dptr,#_pwm_right
10FF F0        3821            movx    @dptr,a
1100 D005      3822            pop     ar5
1102 D004      3823            pop     ar4
1104 020000    3824            ljmp    L031023?
1107           3825   L031020?:
1107           3826   ;        main.c:1148: if (vy*100<=vy_thres*100/2){
1107 8C00      3827            mov     __mulint_PARM_2,r4
1109 8D01      3828            mov     (__mulint_PARM_2 + 1),r5
110B 900064    3829            mov     dptr,#0x0064
110E C004      3830            push    ar4
1110 C005      3831            push    ar5
1112 C006      3832            push    ar6
1114 C007      3833            push    ar7
1116 120000    3834            lcall   __mulint
1119 AA82      3835            mov     r2,dpl
111B AB83      3836            mov     r3,dph
111D D007      3837            pop     ar7
111F D006      3838            pop     ar6
1121 D005      3839            pop     ar5
1123 D004      3840            pop     ar4
1125 85D000    3841            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
1128 85D101    3842            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
112B 900064    3843            mov     dptr,#0x0064
112E C002      3844            push    ar2
1130 C003      3845            push    ar3
1132 C004      3846            push    ar4
1134 C005      3847            push    ar5
1136 C006      3848            push    ar6
1138 C007      3849            push    ar7
113A 120000    3850            lcall   __mulint
113D A882      3851            mov     r0,dpl
113F A983      3852            mov     r1,dph
1141 750002    3853            mov     __divsint_PARM_2,#0x02
1144 E4        3854            clr     a
1145 F501      3855            mov     (__divsint_PARM_2 + 1),a
1147 8882      3856            mov     dpl,r0
1149 8983      3857            mov     dph,r1
114B 120000    3858            lcall   __divsint
114E A882      3859            mov     r0,dpl
1150 A983      3860            mov     r1,dph
1152 D007      3861            pop     ar7
1154 D006      3862            pop     ar6
1156 D005      3863            pop     ar5
1158 D004      3864            pop     ar4
115A D003      3865            pop     ar3
115C D002      3866            pop     ar2
115E C3        3867            clr     c
115F E8        3868            mov     a,r0
1160 9A        3869            subb    a,r2
1161 E9        3870            mov     a,r1
1162 6480      3871            xrl     a,#0x80
1164 8BF0      3872            mov     b,r3
1166 63F080    3873            xrl     b,#0x80
1169 95F0      3874            subb    a,b
116B 5000      3875            jnc     L031067?
116D 020000    3876            ljmp    L031017?
1170           3877   L031067?:
1170           3878   ;        main.c:1149: pwm_left = vy_error*100/(vx_error+vy_error);
1170 C004      3879            push    ar4
1172 C005      3880            push    ar5
1174 8E00      3881            mov     __mulint_PARM_2,r6
1176 8F01      3882            mov     (__mulint_PARM_2 + 1),r7
1178 900064    3883            mov     dptr,#0x0064
117B C004      3884            push    ar4
117D C005      3885            push    ar5
117F C006      3886            push    ar6
1181 C007      3887            push    ar7
1183 120000    3888            lcall   __mulint
1186 AA82      3889            mov     r2,dpl
1188 AB83      3890            mov     r3,dph
118A D007      3891            pop     ar7
118C D006      3892            pop     ar6
118E EE        3893            mov     a,r6
118F 2510      3894            add     a,_Joystick_Control_sloc6_1_0
1191 F500      3895            mov     __divsint_PARM_2,a
1193 EF        3896            mov     a,r7
1194 3511      3897            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1196 F501      3898            mov     (__divsint_PARM_2 + 1),a
1198 8A82      3899            mov     dpl,r2
119A 8B83      3900            mov     dph,r3
119C C006      3901            push    ar6
119E C007      3902            push    ar7
11A0 120000    3903            lcall   __divsint
11A3 AA82      3904            mov     r2,dpl
11A5 D007      3905            pop     ar7
11A7 D006      3906            pop     ar6
11A9 D005      3907            pop     ar5
11AB D004      3908            pop     ar4
11AD 904DC0    3909            mov     dptr,#_pwm_left
11B0 EA        3910            mov     a,r2
11B1 F0        3911            movx    @dptr,a
11B2           3912   ;        main.c:1150: pwm_right = vy_error*pwm_corr; 
11B2 8E82      3913            mov     dpl,r6
11B4 8F83      3914            mov     dph,r7
11B6 C006      3915            push    ar6
11B8 C007      3916            push    ar7
11BA 120000    3917            lcall   ___sint2fs
11BD AA82      3918            mov     r2,dpl
11BF AB83      3919            mov     r3,dph
11C1 ACF0      3920            mov     r4,b
11C3 FD        3921            mov     r5,a
11C4 904A70    3922            mov     dptr,#_pwm_corr
11C7 E0        3923            movx    a,@dptr
11C8 C0E0      3924            push    acc
11CA A3        3925            inc     dptr
11CB E0        3926            movx    a,@dptr
11CC C0E0      3927            push    acc
11CE A3        3928            inc     dptr
11CF E0        3929            movx    a,@dptr
11D0 C0E0      3930            push    acc
11D2 A3        3931            inc     dptr
11D3 E0        3932            movx    a,@dptr
11D4 C0E0      3933            push    acc
11D6 8A82      3934            mov     dpl,r2
11D8 8B83      3935            mov     dph,r3
11DA 8CF0      3936            mov     b,r4
11DC ED        3937            mov     a,r5
11DD 120000    3938            lcall   ___fsmul
11E0 AA82      3939            mov     r2,dpl
11E2 AB83      3940            mov     r3,dph
11E4 ACF0      3941            mov     r4,b
11E6 FD        3942            mov     r5,a
11E7 E581      3943            mov     a,sp
11E9 24FC      3944            add     a,#0xfc
11EB F581      3945            mov     sp,a
11ED D007      3946            pop     ar7
11EF D006      3947            pop     ar6
11F1 8A82      3948            mov     dpl,r2
11F3 8B83      3949            mov     dph,r3
11F5 8CF0      3950            mov     b,r4
11F7 ED        3951            mov     a,r5
11F8 C004      3952            push    ar4
11FA C005      3953            push    ar5
11FC C006      3954            push    ar6
11FE C007      3955            push    ar7
1200 120000    3956            lcall   ___fs2uchar
1203 E582      3957            mov     a,dpl
1205 D007      3958            pop     ar7
1207 D006      3959            pop     ar6
1209 D005      3960            pop     ar5
120B D004      3961            pop     ar4
120D 904D80    3962            mov     dptr,#_pwm_right
1210 F0        3963            movx    @dptr,a
1211 D005      3964            pop     ar5
1213 D004      3965            pop     ar4
1215 020000    3966            ljmp    L031023?
1218           3967   L031017?:
1218           3968   ;        main.c:1153: pwm_left = vx_error*100/(vx_error+vy_error);
1218 C004      3969            push    ar4
121A C005      3970            push    ar5
121C 851000    3971            mov     __mulint_PARM_2,_Joystick_Control_sloc6_1_0
121F 851101    3972            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc6_1_0 + 1)
1222 900064    3973            mov     dptr,#0x0064
1225 C004      3974            push    ar4
1227 C005      3975            push    ar5
1229 C006      3976            push    ar6
122B C007      3977            push    ar7
122D 120000    3978            lcall   __mulint
1230 AA82      3979            mov     r2,dpl
1232 AB83      3980            mov     r3,dph
1234 D007      3981            pop     ar7
1236 D006      3982            pop     ar6
1238 EE        3983            mov     a,r6
1239 2510      3984            add     a,_Joystick_Control_sloc6_1_0
123B F500      3985            mov     __divsint_PARM_2,a
123D EF        3986            mov     a,r7
123E 3511      3987            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1240 F501      3988            mov     (__divsint_PARM_2 + 1),a
1242 8A82      3989            mov     dpl,r2
1244 8B83      3990            mov     dph,r3
1246 C006      3991            push    ar6
1248 C007      3992            push    ar7
124A 120000    3993            lcall   __divsint
124D AA82      3994            mov     r2,dpl
124F D007      3995            pop     ar7
1251 D006      3996            pop     ar6
1253 D005      3997            pop     ar5
1255 D004      3998            pop     ar4
1257 904DC0    3999            mov     dptr,#_pwm_left
125A EA        4000            mov     a,r2
125B F0        4001            movx    @dptr,a
125C           4002   ;        main.c:1154: pwm_right = vx_error*pwm_corr; 
125C 851082    4003            mov     dpl,_Joystick_Control_sloc6_1_0
125F 851183    4004            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
1262 C006      4005            push    ar6
1264 C007      4006            push    ar7
1266 120000    4007            lcall   ___sint2fs
1269 AA82      4008            mov     r2,dpl
126B AB83      4009            mov     r3,dph
126D ACF0      4010            mov     r4,b
126F FD        4011            mov     r5,a
1270 904A70    4012            mov     dptr,#_pwm_corr
1273 E0        4013            movx    a,@dptr
1274 C0E0      4014            push    acc
1276 A3        4015            inc     dptr
1277 E0        4016            movx    a,@dptr
1278 C0E0      4017            push    acc
127A A3        4018            inc     dptr
127B E0        4019            movx    a,@dptr
127C C0E0      4020            push    acc
127E A3        4021            inc     dptr
127F E0        4022            movx    a,@dptr
1280 C0E0      4023            push    acc
1282 8A82      4024            mov     dpl,r2
1284 8B83      4025            mov     dph,r3
1286 8CF0      4026            mov     b,r4
1288 ED        4027            mov     a,r5
1289 120000    4028            lcall   ___fsmul
128C AA82      4029            mov     r2,dpl
128E AB83      4030            mov     r3,dph
1290 ACF0      4031            mov     r4,b
1292 FD        4032            mov     r5,a
1293 E581      4033            mov     a,sp
1295 24FC      4034            add     a,#0xfc
1297 F581      4035            mov     sp,a
1299 D007      4036            pop     ar7
129B D006      4037            pop     ar6
129D 8A82      4038            mov     dpl,r2
129F 8B83      4039            mov     dph,r3
12A1 8CF0      4040            mov     b,r4
12A3 ED        4041            mov     a,r5
12A4 C004      4042            push    ar4
12A6 C005      4043            push    ar5
12A8 C006      4044            push    ar6
12AA C007      4045            push    ar7
12AC 120000    4046            lcall   ___fs2uchar
12AF E582      4047            mov     a,dpl
12B1 D007      4048            pop     ar7
12B3 D006      4049            pop     ar6
12B5 D005      4050            pop     ar5
12B7 D004      4051            pop     ar4
12B9 904D80    4052            mov     dptr,#_pwm_right
12BC F0        4053            movx    @dptr,a
12BD           4054   ;        main.c:1192: return 0.0;
12BD D005      4055            pop     ar5
12BF D004      4056            pop     ar4
12C1           4057   ;        main.c:1154: pwm_right = vx_error*pwm_corr; 
12C1           4058   L031023?:
12C1           4059   ;        main.c:1160: if (vy_err<0){
12C1 E531      4060            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
12C3 20E7A0    4061            jb      acc.7,L031068?
12C6 020000    4062            ljmp    L031036?
12C9           4063   L031068?:
12C9           4064   ;        main.c:1161: L_motor_dir = 1; 
12C9 904D40    4065            mov     dptr,#_L_motor_dir
12CC 7401      4066            mov     a,#0x01
12CE F0        4067            movx    @dptr,a
12CF           4068   ;        main.c:1162: R_motor_dir = 1; 
12CF 904D00    4069            mov     dptr,#_R_motor_dir
12D2 7401      4070            mov     a,#0x01
12D4 F0        4071            movx    @dptr,a
12D5           4072   ;        main.c:1164: if (vx_err>0){
12D5 C3        4073            clr     c
12D6 E4        4074            clr     a
12D7 9570      4075            subb    a,_Joystick_Control_sloc4_1_0
12D9 E4        4076            clr     a
12DA 6480      4077            xrl     a,#0x80
12DC 8571F0    4078            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
12DF 63F080    4079            xrl     b,#0x80
12E2 95F0      4080            subb    a,b
12E4 4000      4081            jc      L031069?
12E6 020000    4082            ljmp    L031031?
12E9           4083   L031069?:
12E9           4084   ;        main.c:1165: if (vy*100<=vy_thres*100/2){
12E9 8C00      4085            mov     __mulint_PARM_2,r4
12EB 8D01      4086            mov     (__mulint_PARM_2 + 1),r5
12ED 900064    4087            mov     dptr,#0x0064
12F0 C006      4088            push    ar6
12F2 C007      4089            push    ar7
12F4 120000    4090            lcall   __mulint
12F7 AA82      4091            mov     r2,dpl
12F9 AB83      4092            mov     r3,dph
12FB D007      4093            pop     ar7
12FD D006      4094            pop     ar6
12FF 85D000    4095            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
1302 85D101    4096            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
1305 900064    4097            mov     dptr,#0x0064
1308 C002      4098            push    ar2
130A C003      4099            push    ar3
130C C006      4100            push    ar6
130E C007      4101            push    ar7
1310 120000    4102            lcall   __mulint
1313 A882      4103            mov     r0,dpl
1315 A983      4104            mov     r1,dph
1317 750002    4105            mov     __divsint_PARM_2,#0x02
131A E4        4106            clr     a
131B F501      4107            mov     (__divsint_PARM_2 + 1),a
131D 8882      4108            mov     dpl,r0
131F 8983      4109            mov     dph,r1
1321 120000    4110            lcall   __divsint
1324 A882      4111            mov     r0,dpl
1326 A983      4112            mov     r1,dph
1328 D007      4113            pop     ar7
132A D006      4114            pop     ar6
132C D003      4115            pop     ar3
132E D002      4116            pop     ar2
1330 C3        4117            clr     c
1331 E8        4118            mov     a,r0
1332 9A        4119            subb    a,r2
1333 E9        4120            mov     a,r1
1334 6480      4121            xrl     a,#0x80
1336 8BF0      4122            mov     b,r3
1338 63F080    4123            xrl     b,#0x80
133B 95F0      4124            subb    a,b
133D 5000      4125            jnc     L031070?
133F 020000    4126            ljmp    L031025?
1342           4127   L031070?:
1342           4128   ;        main.c:1166: pwm_left = vy_error; 
1342 904DC0    4129            mov     dptr,#_pwm_left
1345 EE        4130            mov     a,r6
1346 F0        4131            movx    @dptr,a
1347           4132   ;        main.c:1167: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
1347 904A70    4133            mov     dptr,#_pwm_corr
134A E0        4134            movx    a,@dptr
134B F5C0      4135            mov     _Joystick_Control_sloc5_1_0,a
134D A3        4136            inc     dptr
134E E0        4137            movx    a,@dptr
134F F5C1      4138            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1351 A3        4139            inc     dptr
1352 E0        4140            movx    a,@dptr
1353 F5C2      4141            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1355 A3        4142            inc     dptr
1356 E0        4143            movx    a,@dptr
1357 F5C3      4144            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1359 8E82      4145            mov     dpl,r6
135B 8F83      4146            mov     dph,r7
135D C006      4147            push    ar6
135F C007      4148            push    ar7
1361 120000    4149            lcall   ___sint2fs
1364 AA82      4150            mov     r2,dpl
1366 AB83      4151            mov     r3,dph
1368 A8F0      4152            mov     r0,b
136A F9        4153            mov     r1,a
136B C002      4154            push    ar2
136D C003      4155            push    ar3
136F C000      4156            push    ar0
1371 C001      4157            push    ar1
1373 85C082    4158            mov     dpl,_Joystick_Control_sloc5_1_0
1376 85C183    4159            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1379 85C2F0    4160            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
137C E5C3      4161            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
137E 120000    4162            lcall   ___fsmul
1381 AA82      4163            mov     r2,dpl
1383 AB83      4164            mov     r3,dph
1385 A8F0      4165            mov     r0,b
1387 F9        4166            mov     r1,a
1388 E581      4167            mov     a,sp
138A 24FC      4168            add     a,#0xfc
138C F581      4169            mov     sp,a
138E C002      4170            push    ar2
1390 C003      4171            push    ar3
1392 C000      4172            push    ar0
1394 C001      4173            push    ar1
1396 900000    4174            mov     dptr,#0x0000
1399 75F0C8    4175            mov     b,#0xC8
139C 7442      4176            mov     a,#0x42
139E 120000    4177            lcall   ___fsmul
13A1 8582C0    4178            mov     _Joystick_Control_sloc5_1_0,dpl
13A4 8583C1    4179            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
13A7 85F0C2    4180            mov     (_Joystick_Control_sloc5_1_0 + 2),b
13AA F5C3      4181            mov     (_Joystick_Control_sloc5_1_0 + 3),a
13AC E581      4182            mov     a,sp
13AE 24FC      4183            add     a,#0xfc
13B0 F581      4184            mov     sp,a
13B2 D007      4185            pop     ar7
13B4 D006      4186            pop     ar6
13B6 EE        4187            mov     a,r6
13B7 2510      4188            add     a,_Joystick_Control_sloc6_1_0
13B9 F582      4189            mov     dpl,a
13BB EF        4190            mov     a,r7
13BC 3511      4191            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
13BE F583      4192            mov     dph,a
13C0 120000    4193            lcall   ___sint2fs
13C3 AA82      4194            mov     r2,dpl
13C5 AB83      4195            mov     r3,dph
13C7 A8F0      4196            mov     r0,b
13C9 F9        4197            mov     r1,a
13CA C002      4198            push    ar2
13CC C003      4199            push    ar3
13CE C000      4200            push    ar0
13D0 C001      4201            push    ar1
13D2 85C082    4202            mov     dpl,_Joystick_Control_sloc5_1_0
13D5 85C183    4203            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
13D8 85C2F0    4204            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
13DB E5C3      4205            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
13DD 120000    4206            lcall   ___fsdiv
13E0 AA82      4207            mov     r2,dpl
13E2 AB83      4208            mov     r3,dph
13E4 A8F0      4209            mov     r0,b
13E6 F9        4210            mov     r1,a
13E7 E581      4211            mov     a,sp
13E9 24FC      4212            add     a,#0xfc
13EB F581      4213            mov     sp,a
13ED 8A82      4214            mov     dpl,r2
13EF 8B83      4215            mov     dph,r3
13F1 88F0      4216            mov     b,r0
13F3 E9        4217            mov     a,r1
13F4 120000    4218            lcall   ___fs2uchar
13F7 E582      4219            mov     a,dpl
13F9 904D80    4220            mov     dptr,#_pwm_right
13FC F0        4221            movx    @dptr,a
13FD 020000    4222            ljmp    L031036?
1400           4223   L031025?:
1400           4224   ;        main.c:1170: pwm_left = vx_error; 
1400 904DC0    4225            mov     dptr,#_pwm_left
1403 E510      4226            mov     a,_Joystick_Control_sloc6_1_0
1405 F0        4227            movx    @dptr,a
1406           4228   ;        main.c:1171: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
1406 904A70    4229            mov     dptr,#_pwm_corr
1409 E0        4230            movx    a,@dptr
140A F5C0      4231            mov     _Joystick_Control_sloc5_1_0,a
140C A3        4232            inc     dptr
140D E0        4233            movx    a,@dptr
140E F5C1      4234            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1410 A3        4235            inc     dptr
1411 E0        4236            movx    a,@dptr
1412 F5C2      4237            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1414 A3        4238            inc     dptr
1415 E0        4239            movx    a,@dptr
1416 F5C3      4240            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1418 851082    4241            mov     dpl,_Joystick_Control_sloc6_1_0
141B 851183    4242            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
141E C006      4243            push    ar6
1420 C007      4244            push    ar7
1422 120000    4245            lcall   ___sint2fs
1425 AA82      4246            mov     r2,dpl
1427 AB83      4247            mov     r3,dph
1429 A8F0      4248            mov     r0,b
142B F9        4249            mov     r1,a
142C C002      4250            push    ar2
142E C003      4251            push    ar3
1430 C000      4252            push    ar0
1432 C001      4253            push    ar1
1434 85C082    4254            mov     dpl,_Joystick_Control_sloc5_1_0
1437 85C183    4255            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
143A 85C2F0    4256            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
143D E5C3      4257            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
143F 120000    4258            lcall   ___fsmul
1442 AA82      4259            mov     r2,dpl
1444 AB83      4260            mov     r3,dph
1446 A8F0      4261            mov     r0,b
1448 F9        4262            mov     r1,a
1449 E581      4263            mov     a,sp
144B 24FC      4264            add     a,#0xfc
144D F581      4265            mov     sp,a
144F C002      4266            push    ar2
1451 C003      4267            push    ar3
1453 C000      4268            push    ar0
1455 C001      4269            push    ar1
1457 900000    4270            mov     dptr,#0x0000
145A 75F0C8    4271            mov     b,#0xC8
145D 7442      4272            mov     a,#0x42
145F 120000    4273            lcall   ___fsmul
1462 8582C0    4274            mov     _Joystick_Control_sloc5_1_0,dpl
1465 8583C1    4275            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1468 85F0C2    4276            mov     (_Joystick_Control_sloc5_1_0 + 2),b
146B F5C3      4277            mov     (_Joystick_Control_sloc5_1_0 + 3),a
146D E581      4278            mov     a,sp
146F 24FC      4279            add     a,#0xfc
1471 F581      4280            mov     sp,a
1473 D007      4281            pop     ar7
1475 D006      4282            pop     ar6
1477 EE        4283            mov     a,r6
1478 2510      4284            add     a,_Joystick_Control_sloc6_1_0
147A F582      4285            mov     dpl,a
147C EF        4286            mov     a,r7
147D 3511      4287            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
147F F583      4288            mov     dph,a
1481 120000    4289            lcall   ___sint2fs
1484 AA82      4290            mov     r2,dpl
1486 AB83      4291            mov     r3,dph
1488 A8F0      4292            mov     r0,b
148A F9        4293            mov     r1,a
148B C002      4294            push    ar2
148D C003      4295            push    ar3
148F C000      4296            push    ar0
1491 C001      4297            push    ar1
1493 85C082    4298            mov     dpl,_Joystick_Control_sloc5_1_0
1496 85C183    4299            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1499 85C2F0    4300            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
149C E5C3      4301            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
149E 120000    4302            lcall   ___fsdiv
14A1 AA82      4303            mov     r2,dpl
14A3 AB83      4304            mov     r3,dph
14A5 A8F0      4305            mov     r0,b
14A7 F9        4306            mov     r1,a
14A8 E581      4307            mov     a,sp
14AA 24FC      4308            add     a,#0xfc
14AC F581      4309            mov     sp,a
14AE 8A82      4310            mov     dpl,r2
14B0 8B83      4311            mov     dph,r3
14B2 88F0      4312            mov     b,r0
14B4 E9        4313            mov     a,r1
14B5 120000    4314            lcall   ___fs2uchar
14B8 E582      4315            mov     a,dpl
14BA 904D80    4316            mov     dptr,#_pwm_right
14BD F0        4317            movx    @dptr,a
14BE 020000    4318            ljmp    L031036?
14C1           4319   L031031?:
14C1           4320   ;        main.c:1177: if (vy*100<=vy_thres*100/2){
14C1 8C00      4321            mov     __mulint_PARM_2,r4
14C3 8D01      4322            mov     (__mulint_PARM_2 + 1),r5
14C5 900064    4323            mov     dptr,#0x0064
14C8 C006      4324            push    ar6
14CA C007      4325            push    ar7
14CC 120000    4326            lcall   __mulint
14CF AA82      4327            mov     r2,dpl
14D1 AB83      4328            mov     r3,dph
14D3 D007      4329            pop     ar7
14D5 D006      4330            pop     ar6
14D7 85D000    4331            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
14DA 85D101    4332            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
14DD 900064    4333            mov     dptr,#0x0064
14E0 C002      4334            push    ar2
14E2 C003      4335            push    ar3
14E4 C006      4336            push    ar6
14E6 C007      4337            push    ar7
14E8 120000    4338            lcall   __mulint
14EB AC82      4339            mov     r4,dpl
14ED AD83      4340            mov     r5,dph
14EF 750002    4341            mov     __divsint_PARM_2,#0x02
14F2 E4        4342            clr     a
14F3 F501      4343            mov     (__divsint_PARM_2 + 1),a
14F5 8C82      4344            mov     dpl,r4
14F7 8D83      4345            mov     dph,r5
14F9 120000    4346            lcall   __divsint
14FC AC82      4347            mov     r4,dpl
14FE AD83      4348            mov     r5,dph
1500 D007      4349            pop     ar7
1502 D006      4350            pop     ar6
1504 D003      4351            pop     ar3
1506 D002      4352            pop     ar2
1508 C3        4353            clr     c
1509 EC        4354            mov     a,r4
150A 9A        4355            subb    a,r2
150B ED        4356            mov     a,r5
150C 6480      4357            xrl     a,#0x80
150E 8BF0      4358            mov     b,r3
1510 63F080    4359            xrl     b,#0x80
1513 95F0      4360            subb    a,b
1515 5000      4361            jnc     L031071?
1517 020000    4362            ljmp    L031028?
151A           4363   L031071?:
151A           4364   ;        main.c:1178: pwm_left = vy_error*100/(vx_error+vy_error);
151A 8E00      4365            mov     __mulint_PARM_2,r6
151C 8F01      4366            mov     (__mulint_PARM_2 + 1),r7
151E 900064    4367            mov     dptr,#0x0064
1521 C006      4368            push    ar6
1523 C007      4369            push    ar7
1525 120000    4370            lcall   __mulint
1528 AA82      4371            mov     r2,dpl
152A AB83      4372            mov     r3,dph
152C D007      4373            pop     ar7
152E D006      4374            pop     ar6
1530 EE        4375            mov     a,r6
1531 2510      4376            add     a,_Joystick_Control_sloc6_1_0
1533 F500      4377            mov     __divsint_PARM_2,a
1535 EF        4378            mov     a,r7
1536 3511      4379            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1538 F501      4380            mov     (__divsint_PARM_2 + 1),a
153A 8A82      4381            mov     dpl,r2
153C 8B83      4382            mov     dph,r3
153E C006      4383            push    ar6
1540 C007      4384            push    ar7
1542 120000    4385            lcall   __divsint
1545 AA82      4386            mov     r2,dpl
1547 D007      4387            pop     ar7
1549 D006      4388            pop     ar6
154B 904DC0    4389            mov     dptr,#_pwm_left
154E EA        4390            mov     a,r2
154F F0        4391            movx    @dptr,a
1550           4392   ;        main.c:1179: pwm_right =pwm_corr*vy_error; 
1550 904A70    4393            mov     dptr,#_pwm_corr
1553 E0        4394            movx    a,@dptr
1554 F5C0      4395            mov     _Joystick_Control_sloc5_1_0,a
1556 A3        4396            inc     dptr
1557 E0        4397            movx    a,@dptr
1558 F5C1      4398            mov     (_Joystick_Control_sloc5_1_0 + 1),a
155A A3        4399            inc     dptr
155B E0        4400            movx    a,@dptr
155C F5C2      4401            mov     (_Joystick_Control_sloc5_1_0 + 2),a
155E A3        4402            inc     dptr
155F E0        4403            movx    a,@dptr
1560 F5C3      4404            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1562 8E82      4405            mov     dpl,r6
1564 8F83      4406            mov     dph,r7
1566 120000    4407            lcall   ___sint2fs
1569 A882      4408            mov     r0,dpl
156B A983      4409            mov     r1,dph
156D AAF0      4410            mov     r2,b
156F FB        4411            mov     r3,a
1570 C000      4412            push    ar0
1572 C001      4413            push    ar1
1574 C002      4414            push    ar2
1576 C003      4415            push    ar3
1578 85C082    4416            mov     dpl,_Joystick_Control_sloc5_1_0
157B 85C183    4417            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
157E 85C2F0    4418            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1581 E5C3      4419            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1583 120000    4420            lcall   ___fsmul
1586 AA82      4421            mov     r2,dpl
1588 AB83      4422            mov     r3,dph
158A ACF0      4423            mov     r4,b
158C FD        4424            mov     r5,a
158D E581      4425            mov     a,sp
158F 24FC      4426            add     a,#0xfc
1591 F581      4427            mov     sp,a
1593 8A82      4428            mov     dpl,r2
1595 8B83      4429            mov     dph,r3
1597 8CF0      4430            mov     b,r4
1599 ED        4431            mov     a,r5
159A 120000    4432            lcall   ___fs2uchar
159D E582      4433            mov     a,dpl
159F 904D80    4434            mov     dptr,#_pwm_right
15A2 F0        4435            movx    @dptr,a
15A3 020000    4436            ljmp    L031036?
15A6           4437   L031028?:
15A6           4438   ;        main.c:1182: pwm_left = vx_error*100/(vx_error+vy_error);
15A6 851000    4439            mov     __mulint_PARM_2,_Joystick_Control_sloc6_1_0
15A9 851101    4440            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc6_1_0 + 1)
15AC 900064    4441            mov     dptr,#0x0064
15AF C006      4442            push    ar6
15B1 C007      4443            push    ar7
15B3 120000    4444            lcall   __mulint
15B6 AA82      4445            mov     r2,dpl
15B8 AB83      4446            mov     r3,dph
15BA D007      4447            pop     ar7
15BC D006      4448            pop     ar6
15BE EE        4449            mov     a,r6
15BF 2510      4450            add     a,_Joystick_Control_sloc6_1_0
15C1 F500      4451            mov     __divsint_PARM_2,a
15C3 EF        4452            mov     a,r7
15C4 3511      4453            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
15C6 F501      4454            mov     (__divsint_PARM_2 + 1),a
15C8 8A82      4455            mov     dpl,r2
15CA 8B83      4456            mov     dph,r3
15CC 120000    4457            lcall   __divsint
15CF AA82      4458            mov     r2,dpl
15D1 904DC0    4459            mov     dptr,#_pwm_left
15D4 EA        4460            mov     a,r2
15D5 F0        4461            movx    @dptr,a
15D6           4462   ;        main.c:1183: pwm_right = pwm_corr*vx_error; 
15D6 904A70    4463            mov     dptr,#_pwm_corr
15D9 E0        4464            movx    a,@dptr
15DA FA        4465            mov     r2,a
15DB A3        4466            inc     dptr
15DC E0        4467            movx    a,@dptr
15DD FB        4468            mov     r3,a
15DE A3        4469            inc     dptr
15DF E0        4470            movx    a,@dptr
15E0 FC        4471            mov     r4,a
15E1 A3        4472            inc     dptr
15E2 E0        4473            movx    a,@dptr
15E3 FD        4474            mov     r5,a
15E4 851082    4475            mov     dpl,_Joystick_Control_sloc6_1_0
15E7 851183    4476            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
15EA C002      4477            push    ar2
15EC C003      4478            push    ar3
15EE C004      4479            push    ar4
15F0 C005      4480            push    ar5
15F2 120000    4481            lcall   ___sint2fs
15F5 AE82      4482            mov     r6,dpl
15F7 AF83      4483            mov     r7,dph
15F9 A8F0      4484            mov     r0,b
15FB F9        4485            mov     r1,a
15FC D005      4486            pop     ar5
15FE D004      4487            pop     ar4
1600 D003      4488            pop     ar3
1602 D002      4489            pop     ar2
1604 C006      4490            push    ar6
1606 C007      4491            push    ar7
1608 C000      4492            push    ar0
160A C001      4493            push    ar1
160C 8A82      4494            mov     dpl,r2
160E 8B83      4495            mov     dph,r3
1610 8CF0      4496            mov     b,r4
1612 ED        4497            mov     a,r5
1613 120000    4498            lcall   ___fsmul
1616 AA82      4499            mov     r2,dpl
1618 AB83      4500            mov     r3,dph
161A ACF0      4501            mov     r4,b
161C FD        4502            mov     r5,a
161D E581      4503            mov     a,sp
161F 24FC      4504            add     a,#0xfc
1621 F581      4505            mov     sp,a
1623 8A82      4506            mov     dpl,r2
1625 8B83      4507            mov     dph,r3
1627 8CF0      4508            mov     b,r4
1629 ED        4509            mov     a,r5
162A 120000    4510            lcall   ___fs2uchar
162D E582      4511            mov     a,dpl
162F 904D80    4512            mov     dptr,#_pwm_right
1632 F0        4513            movx    @dptr,a
1633           4514   L031036?:
1633           4515   ;        main.c:1192: return 0.0;
1633 900000    4516            mov     dptr,#(0x00&0x00ff)
1636 E4        4517            clr     a
1637 F5F0      4518            mov     b,a
1639 22        4519            ret
163A           4520   ;------------------------------------------------------------
163A           4521   ;Allocation info for local variables in function 'main'
163A           4522   ;------------------------------------------------------------
163A           4523   ;pick_char                 Allocated with name '_main_pick_char_1_200'
163A           4524   ;c                         Allocated with name '_main_c_1_200'
163A           4525   ;vx                        Allocated with name '_main_vx_1_200'
163A           4526   ;vy                        Allocated with name '_main_vy_1_200'
163A           4527   ;auto_mode                 Allocated with name '_main_auto_mode_1_200'
163A           4528   ;angle_count               Allocated with name '_main_angle_count_1_200'
163A           4529   ;------------------------------------------------------------
163A           4530   ;        main.c:1195: void main (void)
163A           4531   ;        -----------------------------------------
163A           4532   ;         function main
163A           4533   ;        -----------------------------------------
163A           4534   _main:
163A           4535   ;        main.c:1198: xdata int vx = 0, vy = 0; 
163A 90C7A0    4536            mov     dptr,#_main_vx_1_200
163D E4        4537            clr     a
163E F0        4538            movx    @dptr,a
163F A3        4539            inc     dptr
1640 F0        4540            movx    @dptr,a
1641 90C7E0    4541            mov     dptr,#_main_vy_1_200
1644 E4        4542            clr     a
1645 F0        4543            movx    @dptr,a
1646 A3        4544            inc     dptr
1647 F0        4545            movx    @dptr,a
1648           4546   ;        main.c:1199: xdata int auto_mode = 0;
1648 90C830    4547            mov     dptr,#_main_auto_mode_1_200
164B E4        4548            clr     a
164C F0        4549            movx    @dptr,a
164D A3        4550            inc     dptr
164E F0        4551            movx    @dptr,a
164F           4552   ;        main.c:1200: char pick_char = '0';
164F 756030    4553            mov     _main_pick_char_1_200,#0x30
1652           4554   ;        main.c:1204: Init_all();
1652 120000    4555            lcall   _Init_all
1655           4556   ;        main.c:1206: waitms(500);
1655 9001F4    4557            mov     dptr,#0x01F4
1658 120000    4558            lcall   _waitms
165B           4559   ;        main.c:1207: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
165B 7460      4560            mov     a,#__str_7
165D C0E0      4561            push    acc
165F 7403      4562            mov     a,#(__str_7 >> 8)
1661 C0E0      4563            push    acc
1663 7480      4564            mov     a,#0x80
1665 C0E0      4565            push    acc
1667 120000    4566            lcall   _printf
166A 1581      4567            dec     sp
166C 1581      4568            dec     sp
166E 1581      4569            dec     sp
1670           4570   ;        main.c:1208: UART1_Init(9600);
1670 902580    4571            mov     dptr,#0x2580
1673 E4        4572            clr     a
1674 F5F0      4573            mov     b,a
1676 120000    4574            lcall   _UART1_Init
1679           4575   ;        main.c:1210: ReceptionOff();
1679 120000    4576            lcall   _ReceptionOff
167C           4577   ;        main.c:1213: SendATCommand("AT+VER\r\n");
167C 9003A0    4578            mov     dptr,#__str_8
167F 75F080    4579            mov     b,#0x80
1682 120000    4580            lcall   _SendATCommand
1685           4581   ;        main.c:1214: SendATCommand("AT+BAUD\r\n");
1685 9003E0    4582            mov     dptr,#__str_9
1688 75F080    4583            mov     b,#0x80
168B 120000    4584            lcall   _SendATCommand
168E           4585   ;        main.c:1215: SendATCommand("AT+RFID\r\n");
168E 900420    4586            mov     dptr,#__str_10
1691 75F080    4587            mov     b,#0x80
1694 120000    4588            lcall   _SendATCommand
1697           4589   ;        main.c:1216: SendATCommand("AT+DVID\r\n");
1697 900460    4590            mov     dptr,#__str_11
169A 75F080    4591            mov     b,#0x80
169D 120000    4592            lcall   _SendATCommand
16A0           4593   ;        main.c:1217: SendATCommand("AT+RFC002\r\n");
16A0 9004A0    4594            mov     dptr,#__str_12
16A3 75F080    4595            mov     b,#0x80
16A6 120000    4596            lcall   _SendATCommand
16A9           4597   ;        main.c:1218: SendATCommand("AT+POWE\r\n");
16A9 9004E0    4598            mov     dptr,#__str_13
16AC 75F080    4599            mov     b,#0x80
16AF 120000    4600            lcall   _SendATCommand
16B2           4601   ;        main.c:1219: SendATCommand("AT+CLSS\r\n");
16B2 900520    4602            mov     dptr,#__str_14
16B5 75F080    4603            mov     b,#0x80
16B8 120000    4604            lcall   _SendATCommand
16BB           4605   ;        main.c:1220: SendATCommand("AT+DVIDEF11\r\n");  
16BB 900560    4606            mov     dptr,#__str_15
16BE 75F080    4607            mov     b,#0x80
16C1 120000    4608            lcall   _SendATCommand
16C4           4609   ;        main.c:1223: L_bridge_1 = 0; 
16C4 C2A1      4610            clr     _P2_1
16C6           4611   ;        main.c:1224: L_bridge_2 = 0; 
16C6 C2A2      4612            clr     _P2_2
16C8           4613   ;        main.c:1225: R_bridge_1 = 0; 
16C8 C2A4      4614            clr     _P2_4
16CA           4615   ;        main.c:1226: R_bridge_2 = 0; 
16CA C2A3      4616            clr     _P2_3
16CC           4617   ;        main.c:1230: waitms(1000);
16CC 9003E8    4618            mov     dptr,#0x03E8
16CF 120000    4619            lcall   _waitms
16D2           4620   ;        main.c:1231: servo_pick();
16D2 120000    4621            lcall   _servo_pick
16D5           4622   ;        main.c:1232: while(1)
16D5           4623   L032016?:
16D5           4624   ;        main.c:1238: if(pick_char=='1'){
16D5 7431      4625            mov     a,#0x31
16D7 B560E0    4626            cjne    a,_main_pick_char_1_200,L032002?
16DA           4627   ;        main.c:1239: servo_pick();
16DA 120000    4628            lcall   _servo_pick
16DD           4629   ;        main.c:1240: waitms(1000);
16DD 9003E8    4630            mov     dptr,#0x03E8
16E0 120000    4631            lcall   _waitms
16E3           4632   ;        main.c:1241: pick_char = '0';
16E3 756030    4633            mov     _main_pick_char_1_200,#0x30
16E6           4634   L032002?:
16E6           4635   ;        main.c:1244: if(auto_mode){
16E6 90C830    4636            mov     dptr,#_main_auto_mode_1_200
16E9 E0        4637            movx    a,@dptr
16EA FA        4638            mov     r2,a
16EB A3        4639            inc     dptr
16EC E0        4640            movx    a,@dptr
16ED FB        4641            mov     r3,a
16EE 4A        4642            orl     a,r2
16EF 6000      4643            jz      L032004?
16F1           4644   ;        main.c:1245: Auto_mode_slave();
16F1 120000    4645            lcall   _Auto_mode_slave
16F4           4646   ;        main.c:1246: auto_mode = 0;
16F4 90C830    4647            mov     dptr,#_main_auto_mode_1_200
16F7 E4        4648            clr     a
16F8 F0        4649            movx    @dptr,a
16F9 A3        4650            inc     dptr
16FA F0        4651            movx    @dptr,a
16FB           4652   L032004?:
16FB           4653   ;        main.c:1249: if(RXU1()) // Something has arrived
16FB 120000    4654            lcall   _RXU1
16FE 5000      4655            jnc     L032016?
1700           4656   ;        main.c:1251: c=getchar1();
1700 120000    4657            lcall   _getchar1
1703 AA82      4658            mov     r2,dpl
1705           4659   ;        main.c:1252: if(c=='!') // Master is sending message
1705 BA2160    4660            cjne    r2,#0x21,L032031?
1708 8000      4661            sjmp    L032032?
170A           4662   L032031?:
170A 020000    4663            ljmp    L032011?
170D           4664   L032032?:
170D           4665   ;        main.c:1254: getstr1(buff, sizeof(buff)-1);
170D 75D013    4666            mov     _getstr1_PARM_2,#0x13
1710 905240    4667            mov     dptr,#_buff
1713 75F040    4668            mov     b,#0x40
1716 120000    4669            lcall   _getstr1
1719           4670   ;        main.c:1255: if(strlen(buff)==11)
1719 905240    4671            mov     dptr,#_buff
171C 75F040    4672            mov     b,#0x40
171F 120000    4673            lcall   _strlen
1722 AB82      4674            mov     r3,dpl
1724 AC83      4675            mov     r4,dph
1726 BB0B20    4676            cjne    r3,#0x0B,L032033?
1729 BC0020    4677            cjne    r4,#0x00,L032033?
172C 8000      4678            sjmp    L032034?
172E           4679   L032033?:
172E 020000    4680            ljmp    L032006?
1731           4681   L032034?:
1731           4682   ;        main.c:1257: printf("Master says: %s\r\n", buff);
1731 7440      4683            mov     a,#_buff
1733 C0E0      4684            push    acc
1735 7452      4685            mov     a,#(_buff >> 8)
1737 C0E0      4686            push    acc
1739 7440      4687            mov     a,#0x40
173B C0E0      4688            push    acc
173D 74E0      4689            mov     a,#__str_16
173F C0E0      4690            push    acc
1741 7407      4691            mov     a,#(__str_16 >> 8)
1743 C0E0      4692            push    acc
1745 7480      4693            mov     a,#0x80
1747 C0E0      4694            push    acc
1749 120000    4695            lcall   _printf
174C E581      4696            mov     a,sp
174E 24FA      4697            add     a,#0xfa
1750 F581      4698            mov     sp,a
1752           4699   ;        main.c:1258: sscanf(buff, "%03d,%03d,%c,%01d", &vx, &vy, &pick_char, &auto_mode);
1752 7430      4700            mov     a,#_main_auto_mode_1_200
1754 C0E0      4701            push    acc
1756 74C8      4702            mov     a,#(_main_auto_mode_1_200 >> 8)
1758 C0E0      4703            push    acc
175A E4        4704            clr     a
175B C0E0      4705            push    acc
175D 7460      4706            mov     a,#_main_pick_char_1_200
175F C0E0      4707            push    acc
1761 74C5      4708            mov     a,#(_main_pick_char_1_200 >> 8)
1763 C0E0      4709            push    acc
1765 7440      4710            mov     a,#0x40
1767 C0E0      4711            push    acc
1769 74E0      4712            mov     a,#_main_vy_1_200
176B C0E0      4713            push    acc
176D 74C7      4714            mov     a,#(_main_vy_1_200 >> 8)
176F C0E0      4715            push    acc
1771 E4        4716            clr     a
1772 C0E0      4717            push    acc
1774 74A0      4718            mov     a,#_main_vx_1_200
1776 C0E0      4719            push    acc
1778 74C7      4720            mov     a,#(_main_vx_1_200 >> 8)
177A C0E0      4721            push    acc
177C E4        4722            clr     a
177D C0E0      4723            push    acc
177F 7420      4724            mov     a,#__str_17
1781 C0E0      4725            push    acc
1783 7408      4726            mov     a,#(__str_17 >> 8)
1785 C0E0      4727            push    acc
1787 7480      4728            mov     a,#0x80
1789 C0E0      4729            push    acc
178B 7440      4730            mov     a,#_buff
178D C0E0      4731            push    acc
178F 7452      4732            mov     a,#(_buff >> 8)
1791 C0E0      4733            push    acc
1793 7440      4734            mov     a,#0x40
1795 C0E0      4735            push    acc
1797 120000    4736            lcall   _sscanf
179A E581      4737            mov     a,sp
179C 24EE      4738            add     a,#0xee
179E F581      4739            mov     sp,a
17A0           4740   ;        main.c:1259: printf("Joystick Received: Vx = %d, Vy = %d, Order = %c, Auto = %d\r\n", vx, vy, pick_char, auto_mode);
17A0 E560      4741            mov     a,_main_pick_char_1_200
17A2 FB        4742            mov     r3,a
17A3 33        4743            rlc     a
17A4 95E0      4744            subb    a,acc
17A6 FC        4745            mov     r4,a
17A7 90C830    4746            mov     dptr,#_main_auto_mode_1_200
17AA E0        4747            movx    a,@dptr
17AB C0E0      4748            push    acc
17AD A3        4749            inc     dptr
17AE E0        4750            movx    a,@dptr
17AF C0E0      4751            push    acc
17B1 C003      4752            push    ar3
17B3 C004      4753            push    ar4
17B5 90C7E0    4754            mov     dptr,#_main_vy_1_200
17B8 E0        4755            movx    a,@dptr
17B9 C0E0      4756            push    acc
17BB A3        4757            inc     dptr
17BC E0        4758            movx    a,@dptr
17BD C0E0      4759            push    acc
17BF 90C7A0    4760            mov     dptr,#_main_vx_1_200
17C2 E0        4761            movx    a,@dptr
17C3 C0E0      4762            push    acc
17C5 A3        4763            inc     dptr
17C6 E0        4764            movx    a,@dptr
17C7 C0E0      4765            push    acc
17C9 7460      4766            mov     a,#__str_18
17CB C0E0      4767            push    acc
17CD 7408      4768            mov     a,#(__str_18 >> 8)
17CF C0E0      4769            push    acc
17D1 7480      4770            mov     a,#0x80
17D3 C0E0      4771            push    acc
17D5 120000    4772            lcall   _printf
17D8 E581      4773            mov     a,sp
17DA 24F5      4774            add     a,#0xf5
17DC F581      4775            mov     sp,a
17DE           4776   ;        main.c:1260: curr_angle = Joystick_Control(&vx, &vy);
17DE 7590E0    4777            mov     _Joystick_Control_PARM_2,#_main_vy_1_200
17E1 7591C7    4778            mov     (_Joystick_Control_PARM_2 + 1),#(_main_vy_1_200 >> 8)
17E4 759200    4779            mov     (_Joystick_Control_PARM_2 + 2),#0x00
17E7 90C7A0    4780            mov     dptr,#_main_vx_1_200
17EA 75F000    4781            mov     b,#0x00
17ED 120000    4782            lcall   _Joystick_Control
17F0 AB82      4783            mov     r3,dpl
17F2 AC83      4784            mov     r4,dph
17F4 ADF0      4785            mov     r5,b
17F6 FE        4786            mov     r6,a
17F7 904A30    4787            mov     dptr,#_curr_angle
17FA EB        4788            mov     a,r3
17FB F0        4789            movx    @dptr,a
17FC A3        4790            inc     dptr
17FD EC        4791            mov     a,r4
17FE F0        4792            movx    @dptr,a
17FF A3        4793            inc     dptr
1800 ED        4794            mov     a,r5
1801 F0        4795            movx    @dptr,a
1802 A3        4796            inc     dptr
1803 EE        4797            mov     a,r6
1804 F0        4798            movx    @dptr,a
1805 020000    4799            ljmp    L032016?
1808           4800   L032006?:
1808           4801   ;        main.c:1263: printf("*** BAD MESSAGE ***: %s\r\n", buff);
1808 7440      4802            mov     a,#_buff
180A C0E0      4803            push    acc
180C 7452      4804            mov     a,#(_buff >> 8)
180E C0E0      4805            push    acc
1810 7440      4806            mov     a,#0x40
1812 C0E0      4807            push    acc
1814 74A0      4808            mov     a,#__str_19
1816 C0E0      4809            push    acc
1818 7408      4810            mov     a,#(__str_19 >> 8)
181A C0E0      4811            push    acc
181C 7480      4812            mov     a,#0x80
181E C0E0      4813            push    acc
1820 120000    4814            lcall   _printf
1823 E581      4815            mov     a,sp
1825 24FA      4816            add     a,#0xfa
1827 F581      4817            mov     sp,a
1829 020000    4818            ljmp    L032016?
182C           4819   L032011?:
182C           4820   ;        main.c:1266: else if(c=='@') // Master wants slave data
182C BA40E0    4821            cjne    r2,#0x40,L032035?
182F 8000      4822            sjmp    L032036?
1831           4823   L032035?:
1831 020000    4824            ljmp    L032016?
1834           4825   L032036?:
1834           4826   ;        main.c:1268: sprintf(buff, "0,00,%04ld,%05d,%03d\n", freq100, weight, (int)curr_angle);
1834 904A30    4827            mov     dptr,#_curr_angle
1837 E0        4828            movx    a,@dptr
1838 FA        4829            mov     r2,a
1839 A3        4830            inc     dptr
183A E0        4831            movx    a,@dptr
183B FB        4832            mov     r3,a
183C A3        4833            inc     dptr
183D E0        4834            movx    a,@dptr
183E FC        4835            mov     r4,a
183F A3        4836            inc     dptr
1840 E0        4837            movx    a,@dptr
1841 8A82      4838            mov     dpl,r2
1843 8B83      4839            mov     dph,r3
1845 8CF0      4840            mov     b,r4
1847 120000    4841            lcall   ___fs2sint
184A AA82      4842            mov     r2,dpl
184C AB83      4843            mov     r3,dph
184E C002      4844            push    ar2
1850 C003      4845            push    ar3
1852 9048F0    4846            mov     dptr,#_weight
1855 E0        4847            movx    a,@dptr
1856 C0E0      4848            push    acc
1858 A3        4849            inc     dptr
1859 E0        4850            movx    a,@dptr
185A C0E0      4851            push    acc
185C 905200    4852            mov     dptr,#_freq100
185F E0        4853            movx    a,@dptr
1860 C0E0      4854            push    acc
1862 A3        4855            inc     dptr
1863 E0        4856            movx    a,@dptr
1864 C0E0      4857            push    acc
1866 A3        4858            inc     dptr
1867 E0        4859            movx    a,@dptr
1868 C0E0      4860            push    acc
186A A3        4861            inc     dptr
186B E0        4862            movx    a,@dptr
186C C0E0      4863            push    acc
186E 7460      4864            mov     a,#__str_20
1870 C0E0      4865            push    acc
1872 7409      4866            mov     a,#(__str_20 >> 8)
1874 C0E0      4867            push    acc
1876 7480      4868            mov     a,#0x80
1878 C0E0      4869            push    acc
187A 7440      4870            mov     a,#_buff
187C C0E0      4871            push    acc
187E 7452      4872            mov     a,#(_buff >> 8)
1880 C0E0      4873            push    acc
1882 7440      4874            mov     a,#0x40
1884 C0E0      4875            push    acc
1886 120000    4876            lcall   _sprintf
1889 E581      4877            mov     a,sp
188B 24F2      4878            add     a,#0xf2
188D F581      4879            mov     sp,a
188F           4880   ;        main.c:1269: printf("%s\r\n",buff);
188F 7440      4881            mov     a,#_buff
1891 C0E0      4882            push    acc
1893 7452      4883            mov     a,#(_buff >> 8)
1895 C0E0      4884            push    acc
1897 7440      4885            mov     a,#0x40
1899 C0E0      4886            push    acc
189B 74A0      4887            mov     a,#__str_21
189D C0E0      4888            push    acc
189F 7409      4889            mov     a,#(__str_21 >> 8)
18A1 C0E0      4890            push    acc
18A3 7480      4891            mov     a,#0x80
18A5 C0E0      4892            push    acc
18A7 120000    4893            lcall   _printf
18AA E581      4894            mov     a,sp
18AC 24FA      4895            add     a,#0xfa
18AE F581      4896            mov     sp,a
18B0           4897   ;        main.c:1270: waitms(5); // The radio seems to need this delay...
18B0 900005    4898            mov     dptr,#0x0005
18B3 120000    4899            lcall   _waitms
18B6           4900   ;        main.c:1271: sendstr1(buff);
18B6 905240    4901            mov     dptr,#_buff
18B9 75F040    4902            mov     b,#0x40
18BC 120000    4903            lcall   _sendstr1
18BF 020000    4904            ljmp    L032016?
18C2           4905            rseg R_CSEG
18C2           4906   
0000           4907            rseg R_XINIT
0000           4908   __xinit__pwm_counter:
0000 0000      4909            db 0x00,0x00    ; 0
0002           4910   __xinit__servo_counter:
0002 0000      4911            db 0x00,0x00    ; 0
0004           4912   __xinit__pwm_left:
0004 00        4913            db 0x00         ; 0
0005           4914   __xinit__pwm_right:
0005 00        4915            db 0x00         ; 0
0006           4916   __xinit__L_motor_dir:
0006 01        4917            db 0x01         ; 1
0007           4918   __xinit__R_motor_dir:
0007 01        4919            db 0x01         ; 1
0008           4920   __xinit__servo_base:
0008 3C        4921            db 0x3c         ; 60
0009           4922   __xinit__servo_arm:
0009 02        4923            db 0x02         ; 2
000A           4924   __xinit__vx_thres:
000A A100      4925            db 0xA1,0x00    ;  161
000C           4926   __xinit__vy_thres:
000C A600      4927            db 0xA6,0x00    ;  166
000E           4928   __xinit__vx:
000E 0000      4929            db 0x00,0x00    ;  0
0010           4930   __xinit__vy:
0010 0000      4931            db 0x00,0x00    ;  0
0012           4932   __xinit__fre_mea_count:
0012 0000      4933            db 0x00,0x00    ; 0
0014           4934   __xinit__weight_mea_count:
0014 0000      4935            db 0x00,0x00    ; 0
0016           4936   __xinit__seed:
0016 3930      4937            db 0x39,0x30    ; 12345
0018           4938   __xinit__pwm_corr:
0018 3333733F  4939            db 0x33,0x33,0x73,0x3F  ;  9.500000e-001
001C           4940   __xinit__curr_angle:
001C 00000000  4941            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0020           4942   __xinit__raw_angle:
0020 00000000  4943            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0024           4944   __xinit__last_raw_angle:
0024 00000000  4945            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0028           4946   __xinit__angle_diff:
0028 00000000  4947            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
002C           4948   __xinit__mea_yes:
002C 01        4949            db 0x01         ;  1
002D           4950   __xinit__weight:
002D 0000      4951            db 0x00,0x00    ; 0
002F           4952   
0000           4953            rseg R_CONST
0000           4954   __str_0:
0000 436F6D6D  4955            db 'Command: %s'
     616E643A
     202573
000B 00        4956            db 0x00
000C           4957   __str_1:
000C 52657370  4958            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        4959            db 0x0D
0019 0A        4960            db 0x0A
001A 00        4961            db 0x00
001B           4962   __str_2:
001B 41542B44  4963            db 'AT+DVID0000'
     56494430
     303030
0026 0D        4964            db 0x0D
0027 0A        4965            db 0x0A
0028 00        4966            db 0x00
0029           4967   __str_3:
0029 6D617374  4968            db 'master_messgae_auto_mode: %s'
     65725F6D
     65737367
     61655F61
     75746F5F
     6D6F6465
     3A202573
0045 0D        4969            db 0x0D
0046 0A        4970            db 0x0A
0047 00        4971            db 0x00
0048           4972   __str_4:
0048 25303364  4973            db '%03d,%03d,%01d,%01d'
     2C253033
     642C2530
     31642C25
     303164
005B 00        4974            db 0x00
005C           4975   __str_5:
005C 25303164  4976            db '%01d,%02d,%ld,%05d,%03d'
     2C253032
     642C256C
     642C2530
     35642C25
     303364
0073 0A        4977            db 0x0A
0074 00        4978            db 0x00
0075           4979   __str_6:
0075 663A2530  4980            db 'f:%04ld, d1:%d, d2:%d, bound_dectect: %d'
     346C642C
     2064313A
     25642C20
     64323A25
     642C2062
     6F756E64
     5F646563
     74656374
     3A202564
009D 0D        4981            db 0x0D
009E 0A        4982            db 0x0A
009F 00        4983            db 0x00
00A0           4984   __str_7:
00A0 0D        4985            db 0x0D
00A1 0A        4986            db 0x0A
00A2 45464D38  4987            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
00BD 0D        4988            db 0x0D
00BE 0A        4989            db 0x0A
00BF 00        4990            db 0x00
00C0           4991   __str_8:
00C0 41542B56  4992            db 'AT+VER'
     4552
00C6 0D        4993            db 0x0D
00C7 0A        4994            db 0x0A
00C8 00        4995            db 0x00
00C9           4996   __str_9:
00C9 41542B42  4997            db 'AT+BAUD'
     415544
00D0 0D        4998            db 0x0D
00D1 0A        4999            db 0x0A
00D2 00        5000            db 0x00
00D3           5001   __str_10:
00D3 41542B52  5002            db 'AT+RFID'
     464944
00DA 0D        5003            db 0x0D
00DB 0A        5004            db 0x0A
00DC 00        5005            db 0x00
00DD           5006   __str_11:
00DD 41542B44  5007            db 'AT+DVID'
     564944
00E4 0D        5008            db 0x0D
00E5 0A        5009            db 0x0A
00E6 00        5010            db 0x00
00E7           5011   __str_12:
00E7 41542B52  5012            db 'AT+RFC002'
     46433030
     32
00F0 0D        5013            db 0x0D
00F1 0A        5014            db 0x0A
00F2 00        5015            db 0x00
00F3           5016   __str_13:
00F3 41542B50  5017            db 'AT+POWE'
     4F5745
00FA 0D        5018            db 0x0D
00FB 0A        5019            db 0x0A
00FC 00        5020            db 0x00
00FD           5021   __str_14:
00FD 41542B43  5022            db 'AT+CLSS'
     4C5353
0104 0D        5023            db 0x0D
0105 0A        5024            db 0x0A
0106 00        5025            db 0x00
0107           5026   __str_15:
0107 41542B44  5027            db 'AT+DVIDEF11'
     56494445
     463131
0112 0D        5028            db 0x0D
0113 0A        5029            db 0x0A
0114 00        5030            db 0x00
0115           5031   __str_16:
0115 4D617374  5032            db 'Master says: %s'
     65722073
     6179733A
     202573
0124 0D        5033            db 0x0D
0125 0A        5034            db 0x0A
0126 00        5035            db 0x00
0127           5036   __str_17:
0127 25303364  5037            db '%03d,%03d,%c,%01d'
     2C253033
     642C2563
     2C253031
     64
0138 00        5038            db 0x00
0139           5039   __str_18:
0139 4A6F7973  5040            db 'Joystick Received: Vx = %d, Vy = %d, Order = %c, Auto = %d'
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25642C20
     5679203D
     2025642C
     204F7264
     6572203D
     2025632C
     20417574
     6F203D20
     2564
0173 0D        5041            db 0x0D
0174 0A        5042            db 0x0A
0175 00        5043            db 0x00
0176           5044   __str_19:
0176 2A2A2A20  5045            db '*** BAD MESSAGE ***: %s'
     42414420
     4D455353
     41474520
     2A2A2A3A
     202573
018D 0D        5046            db 0x0D
018E 0A        5047            db 0x0A
018F 00        5048            db 0x00
0190           5049   __str_20:
0190 302C3030  5050            db '0,00,%04ld,%05d,%03d'
     2C253034
     6C642C25
     3035642C
     25303364
01A4 0A        5051            db 0x0A
01A5 00        5052            db 0x00
01A6           5053   __str_21:
01A6 2573      5054            db '%s'
01A8 0D        5055            db 0x0D
01A9 0A        5056            db 0x0A
01AA 00        5057            db 0x00
01AB           5058   
0096           5059            CSEG
0096           5060   
0096           5061   end
