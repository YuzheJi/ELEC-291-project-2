0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Apr 03 02:47:52 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _check_bound_PARM_2
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Joystick_Control
0000             30            public _Auto_mode_slave
0000             31            public _Read_angle
0000             32            public _get_random_90_250
0000             33            public _simple_rand
0000             34            public _Move_forward
0000             35            public _Right_angle
0000             36            public _Move_back_ms
0000             37            public _Init_all
0000             38            public _check_bound
0000             39            public _servo_moveaway
0000             40            public _Move_forward_ms
0000             41            public _servo_push
0000             42            public _servo_pick
0000             43            public _Timer5_ISR
0000             44            public _ReadHX711
0000             45            public _ADC_at_Pin
0000             46            public _InitPinADC
0000             47            public _InitADC
0000             48            public _Set_Pin_Input
0000             49            public _Set_Pin_Output
0000             50            public _measure_distance
0000             51            public _ReceptionOff
0000             52            public _SendATCommand
0000             53            public _waitms_or_RI1
0000             54            public _RXU1
0000             55            public _getstr1
0000             56            public _getchar1_with_timeout
0000             57            public _getchar1
0000             58            public _sendstr1
0000             59            public _putchar1
0000             60            public _UART1_Init
0000             61            public _BMM150_Read_Data
0000             62            public _BMM150_compensate_y
0000             63            public _BMM150_compensate_x
0000             64            public _BMM150_Init
0000             65            public _BMM150_Read_Trim_Registers
0000             66            public _SPI_write
0000             67            public _SPI_read
0000             68            public _SPI_transfer
0000             69            public _waitms
0000             70            public _Timer3us
0000             71            public __c51_external_startup
0000             72            public _pick
0000             73            public _auto_mode
0000             74            public _duration
0000             75            public _weight
0000             76            public _mea_yes
0000             77            public _angle_diff
0000             78            public _last_raw_angle
0000             79            public _raw_angle
0000             80            public _curr_angle
0000             81            public _pwm_corr
0000             82            public _seed
0000             83            public _weight_mea_count
0000             84            public _fre_mea_count
0000             85            public _vy
0000             86            public _vx
0000             87            public _vy_thres
0000             88            public _vx_thres
0000             89            public _servo_arm
0000             90            public _servo_base
0000             91            public _R_motor_dir
0000             92            public _L_motor_dir
0000             93            public _pwm_right
0000             94            public _pwm_left
0000             95            public _servo_counter
0000             96            public _pwm_counter
0000             97            public _i
0000             98            public _i_loo
0000             99            public _overflow_count
0000            100            public _distance
0000            101            public _dig_xyz1
0000            102            public _dig_xy2
0000            103            public _dig_xy1
0000            104            public _dig_z4
0000            105            public _dig_z3
0000            106            public _dig_z2
0000            107            public _dig_z1
0000            108            public _dig_y2
0000            109            public _dig_y1
0000            110            public _dig_x2
0000            111            public _dig_x1
0000            112            public _d2
0000            113            public _d1
0000            114            public _freq100
0000            115            public _buff
0000            116            public _Joystick_Control_PARM_2
0000            117            public _getstr1_PARM_2
0000            118            public _BMM150_Read_Data_PARM_2
0000            119            public _BMM150_compensate_y_PARM_2
0000            120            public _BMM150_compensate_x_PARM_2
0000            121            public _SPI_write_PARM_2
0000            122   ;--------------------------------------------------------
0000            123   ; Special Function Registers
0000            124   ;--------------------------------------------------------
0000            125   _ACC            DATA 0xe0
0000            126   _ADC0ASAH       DATA 0xb6
0000            127   _ADC0ASAL       DATA 0xb5
0000            128   _ADC0ASCF       DATA 0xa1
0000            129   _ADC0ASCT       DATA 0xc7
0000            130   _ADC0CF0        DATA 0xbc
0000            131   _ADC0CF1        DATA 0xb9
0000            132   _ADC0CF2        DATA 0xdf
0000            133   _ADC0CN0        DATA 0xe8
0000            134   _ADC0CN1        DATA 0xb2
0000            135   _ADC0CN2        DATA 0xb3
0000            136   _ADC0GTH        DATA 0xc4
0000            137   _ADC0GTL        DATA 0xc3
0000            138   _ADC0H          DATA 0xbe
0000            139   _ADC0L          DATA 0xbd
0000            140   _ADC0LTH        DATA 0xc6
0000            141   _ADC0LTL        DATA 0xc5
0000            142   _ADC0MX         DATA 0xbb
0000            143   _B              DATA 0xf0
0000            144   _CKCON0         DATA 0x8e
0000            145   _CKCON1         DATA 0xa6
0000            146   _CLEN0          DATA 0xc6
0000            147   _CLIE0          DATA 0xc7
0000            148   _CLIF0          DATA 0xe8
0000            149   _CLKSEL         DATA 0xa9
0000            150   _CLOUT0         DATA 0xd1
0000            151   _CLU0CF         DATA 0xb1
0000            152   _CLU0FN         DATA 0xaf
0000            153   _CLU0MX         DATA 0x84
0000            154   _CLU1CF         DATA 0xb3
0000            155   _CLU1FN         DATA 0xb2
0000            156   _CLU1MX         DATA 0x85
0000            157   _CLU2CF         DATA 0xb6
0000            158   _CLU2FN         DATA 0xb5
0000            159   _CLU2MX         DATA 0x91
0000            160   _CLU3CF         DATA 0xbf
0000            161   _CLU3FN         DATA 0xbe
0000            162   _CLU3MX         DATA 0xae
0000            163   _CMP0CN0        DATA 0x9b
0000            164   _CMP0CN1        DATA 0x99
0000            165   _CMP0MD         DATA 0x9d
0000            166   _CMP0MX         DATA 0x9f
0000            167   _CMP1CN0        DATA 0xbf
0000            168   _CMP1CN1        DATA 0xac
0000            169   _CMP1MD         DATA 0xab
0000            170   _CMP1MX         DATA 0xaa
0000            171   _CRC0CN0        DATA 0xce
0000            172   _CRC0CN1        DATA 0x86
0000            173   _CRC0CNT        DATA 0xd3
0000            174   _CRC0DAT        DATA 0xcb
0000            175   _CRC0FLIP       DATA 0xcf
0000            176   _CRC0IN         DATA 0xca
0000            177   _CRC0ST         DATA 0xd2
0000            178   _DAC0CF0        DATA 0x91
0000            179   _DAC0CF1        DATA 0x92
0000            180   _DAC0H          DATA 0x85
0000            181   _DAC0L          DATA 0x84
0000            182   _DAC1CF0        DATA 0x93
0000            183   _DAC1CF1        DATA 0x94
0000            184   _DAC1H          DATA 0x8a
0000            185   _DAC1L          DATA 0x89
0000            186   _DAC2CF0        DATA 0x95
0000            187   _DAC2CF1        DATA 0x96
0000            188   _DAC2H          DATA 0x8c
0000            189   _DAC2L          DATA 0x8b
0000            190   _DAC3CF0        DATA 0x9a
0000            191   _DAC3CF1        DATA 0x9c
0000            192   _DAC3H          DATA 0x8e
0000            193   _DAC3L          DATA 0x8d
0000            194   _DACGCF0        DATA 0x88
0000            195   _DACGCF1        DATA 0x98
0000            196   _DACGCF2        DATA 0xa2
0000            197   _DERIVID        DATA 0xad
0000            198   _DEVICEID       DATA 0xb5
0000            199   _DPH            DATA 0x83
0000            200   _DPL            DATA 0x82
0000            201   _EIE1           DATA 0xe6
0000            202   _EIE2           DATA 0xf3
0000            203   _EIP1           DATA 0xbb
0000            204   _EIP1H          DATA 0xee
0000            205   _EIP2           DATA 0xed
0000            206   _EIP2H          DATA 0xf6
0000            207   _EMI0CN         DATA 0xe7
0000            208   _FLKEY          DATA 0xb7
0000            209   _HFO0CAL        DATA 0xc7
0000            210   _HFO1CAL        DATA 0xd6
0000            211   _HFOCN          DATA 0xef
0000            212   _I2C0ADM        DATA 0xff
0000            213   _I2C0CN0        DATA 0xba
0000            214   _I2C0DIN        DATA 0xbc
0000            215   _I2C0DOUT       DATA 0xbb
0000            216   _I2C0FCN0       DATA 0xad
0000            217   _I2C0FCN1       DATA 0xab
0000            218   _I2C0FCT        DATA 0xf5
0000            219   _I2C0SLAD       DATA 0xbd
0000            220   _I2C0STAT       DATA 0xb9
0000            221   _IE             DATA 0xa8
0000            222   _IP             DATA 0xb8
0000            223   _IPH            DATA 0xf2
0000            224   _IT01CF         DATA 0xe4
0000            225   _LFO0CN         DATA 0xb1
0000            226   _P0             DATA 0x80
0000            227   _P0MASK         DATA 0xfe
0000            228   _P0MAT          DATA 0xfd
0000            229   _P0MDIN         DATA 0xf1
0000            230   _P0MDOUT        DATA 0xa4
0000            231   _P0SKIP         DATA 0xd4
0000            232   _P1             DATA 0x90
0000            233   _P1MASK         DATA 0xee
0000            234   _P1MAT          DATA 0xed
0000            235   _P1MDIN         DATA 0xf2
0000            236   _P1MDOUT        DATA 0xa5
0000            237   _P1SKIP         DATA 0xd5
0000            238   _P2             DATA 0xa0
0000            239   _P2MASK         DATA 0xfc
0000            240   _P2MAT          DATA 0xfb
0000            241   _P2MDIN         DATA 0xf3
0000            242   _P2MDOUT        DATA 0xa6
0000            243   _P2SKIP         DATA 0xcc
0000            244   _P3             DATA 0xb0
0000            245   _P3MDIN         DATA 0xf4
0000            246   _P3MDOUT        DATA 0x9c
0000            247   _PCA0CENT       DATA 0x9e
0000            248   _PCA0CLR        DATA 0x9c
0000            249   _PCA0CN0        DATA 0xd8
0000            250   _PCA0CPH0       DATA 0xfc
0000            251   _PCA0CPH1       DATA 0xea
0000            252   _PCA0CPH2       DATA 0xec
0000            253   _PCA0CPH3       DATA 0xf5
0000            254   _PCA0CPH4       DATA 0x85
0000            255   _PCA0CPH5       DATA 0xde
0000            256   _PCA0CPL0       DATA 0xfb
0000            257   _PCA0CPL1       DATA 0xe9
0000            258   _PCA0CPL2       DATA 0xeb
0000            259   _PCA0CPL3       DATA 0xf4
0000            260   _PCA0CPL4       DATA 0x84
0000            261   _PCA0CPL5       DATA 0xdd
0000            262   _PCA0CPM0       DATA 0xda
0000            263   _PCA0CPM1       DATA 0xdb
0000            264   _PCA0CPM2       DATA 0xdc
0000            265   _PCA0CPM3       DATA 0xae
0000            266   _PCA0CPM4       DATA 0xaf
0000            267   _PCA0CPM5       DATA 0xcc
0000            268   _PCA0H          DATA 0xfa
0000            269   _PCA0L          DATA 0xf9
0000            270   _PCA0MD         DATA 0xd9
0000            271   _PCA0POL        DATA 0x96
0000            272   _PCA0PWM        DATA 0xf7
0000            273   _PCON0          DATA 0x87
0000            274   _PCON1          DATA 0xcd
0000            275   _PFE0CN         DATA 0xc1
0000            276   _PRTDRV         DATA 0xf6
0000            277   _PSCTL          DATA 0x8f
0000            278   _PSTAT0         DATA 0xaa
0000            279   _PSW            DATA 0xd0
0000            280   _REF0CN         DATA 0xd1
0000            281   _REG0CN         DATA 0xc9
0000            282   _REVID          DATA 0xb6
0000            283   _RSTSRC         DATA 0xef
0000            284   _SBCON1         DATA 0x94
0000            285   _SBRLH1         DATA 0x96
0000            286   _SBRLL1         DATA 0x95
0000            287   _SBUF           DATA 0x99
0000            288   _SBUF0          DATA 0x99
0000            289   _SBUF1          DATA 0x92
0000            290   _SCON           DATA 0x98
0000            291   _SCON0          DATA 0x98
0000            292   _SCON1          DATA 0xc8
0000            293   _SFRPAGE        DATA 0xa7
0000            294   _SFRPGCN        DATA 0xbc
0000            295   _SFRSTACK       DATA 0xd7
0000            296   _SMB0ADM        DATA 0xd6
0000            297   _SMB0ADR        DATA 0xd7
0000            298   _SMB0CF         DATA 0xc1
0000            299   _SMB0CN0        DATA 0xc0
0000            300   _SMB0DAT        DATA 0xc2
0000            301   _SMB0FCN0       DATA 0xc3
0000            302   _SMB0FCN1       DATA 0xc4
0000            303   _SMB0FCT        DATA 0xef
0000            304   _SMB0RXLN       DATA 0xc5
0000            305   _SMB0TC         DATA 0xac
0000            306   _SMOD1          DATA 0x93
0000            307   _SP             DATA 0x81
0000            308   _SPI0CFG        DATA 0xa1
0000            309   _SPI0CKR        DATA 0xa2
0000            310   _SPI0CN0        DATA 0xf8
0000            311   _SPI0DAT        DATA 0xa3
0000            312   _SPI0FCN0       DATA 0x9a
0000            313   _SPI0FCN1       DATA 0x9b
0000            314   _SPI0FCT        DATA 0xf7
0000            315   _SPI0PCF        DATA 0xdf
0000            316   _TCON           DATA 0x88
0000            317   _TH0            DATA 0x8c
0000            318   _TH1            DATA 0x8d
0000            319   _TL0            DATA 0x8a
0000            320   _TL1            DATA 0x8b
0000            321   _TMOD           DATA 0x89
0000            322   _TMR2CN0        DATA 0xc8
0000            323   _TMR2CN1        DATA 0xfd
0000            324   _TMR2H          DATA 0xcf
0000            325   _TMR2L          DATA 0xce
0000            326   _TMR2RLH        DATA 0xcb
0000            327   _TMR2RLL        DATA 0xca
0000            328   _TMR3CN0        DATA 0x91
0000            329   _TMR3CN1        DATA 0xfe
0000            330   _TMR3H          DATA 0x95
0000            331   _TMR3L          DATA 0x94
0000            332   _TMR3RLH        DATA 0x93
0000            333   _TMR3RLL        DATA 0x92
0000            334   _TMR4CN0        DATA 0x98
0000            335   _TMR4CN1        DATA 0xff
0000            336   _TMR4H          DATA 0xa5
0000            337   _TMR4L          DATA 0xa4
0000            338   _TMR4RLH        DATA 0xa3
0000            339   _TMR4RLL        DATA 0xa2
0000            340   _TMR5CN0        DATA 0xc0
0000            341   _TMR5CN1        DATA 0xf1
0000            342   _TMR5H          DATA 0xd5
0000            343   _TMR5L          DATA 0xd4
0000            344   _TMR5RLH        DATA 0xd3
0000            345   _TMR5RLL        DATA 0xd2
0000            346   _UART0PCF       DATA 0xd9
0000            347   _UART1FCN0      DATA 0x9d
0000            348   _UART1FCN1      DATA 0xd8
0000            349   _UART1FCT       DATA 0xfa
0000            350   _UART1LIN       DATA 0x9e
0000            351   _UART1PCF       DATA 0xda
0000            352   _VDM0CN         DATA 0xff
0000            353   _WDTCN          DATA 0x97
0000            354   _XBR0           DATA 0xe1
0000            355   _XBR1           DATA 0xe2
0000            356   _XBR2           DATA 0xe3
0000            357   _XOSC0CN        DATA 0x86
0000            358   _DPTR           DATA 0x8382
0000            359   _TMR2RL         DATA 0xcbca
0000            360   _TMR3RL         DATA 0x9392
0000            361   _TMR4RL         DATA 0xa3a2
0000            362   _TMR5RL         DATA 0xd3d2
0000            363   _TMR0           DATA 0x8c8a
0000            364   _TMR1           DATA 0x8d8b
0000            365   _TMR2           DATA 0xcfce
0000            366   _TMR3           DATA 0x9594
0000            367   _TMR4           DATA 0xa5a4
0000            368   _TMR5           DATA 0xd5d4
0000            369   _SBRL1          DATA 0x9695
0000            370   _PCA0           DATA 0xfaf9
0000            371   _PCA0CP0        DATA 0xfcfb
0000            372   _PCA0CP1        DATA 0xeae9
0000            373   _PCA0CP2        DATA 0xeceb
0000            374   _PCA0CP3        DATA 0xf5f4
0000            375   _PCA0CP4        DATA 0x8584
0000            376   _PCA0CP5        DATA 0xdedd
0000            377   _ADC0ASA        DATA 0xb6b5
0000            378   _ADC0GT         DATA 0xc4c3
0000            379   _ADC0           DATA 0xbebd
0000            380   _ADC0LT         DATA 0xc6c5
0000            381   _DAC0           DATA 0x8584
0000            382   _DAC1           DATA 0x8a89
0000            383   _DAC2           DATA 0x8c8b
0000            384   _DAC3           DATA 0x8e8d
0000            385   ;--------------------------------------------------------
0000            386   ; special function bits
0000            387   ;--------------------------------------------------------
0000            388   _ACC_0          BIT 0xe0
0000            389   _ACC_1          BIT 0xe1
0000            390   _ACC_2          BIT 0xe2
0000            391   _ACC_3          BIT 0xe3
0000            392   _ACC_4          BIT 0xe4
0000            393   _ACC_5          BIT 0xe5
0000            394   _ACC_6          BIT 0xe6
0000            395   _ACC_7          BIT 0xe7
0000            396   _TEMPE          BIT 0xe8
0000            397   _ADGN0          BIT 0xe9
0000            398   _ADGN1          BIT 0xea
0000            399   _ADWINT         BIT 0xeb
0000            400   _ADBUSY         BIT 0xec
0000            401   _ADINT          BIT 0xed
0000            402   _IPOEN          BIT 0xee
0000            403   _ADEN           BIT 0xef
0000            404   _B_0            BIT 0xf0
0000            405   _B_1            BIT 0xf1
0000            406   _B_2            BIT 0xf2
0000            407   _B_3            BIT 0xf3
0000            408   _B_4            BIT 0xf4
0000            409   _B_5            BIT 0xf5
0000            410   _B_6            BIT 0xf6
0000            411   _B_7            BIT 0xf7
0000            412   _C0FIF          BIT 0xe8
0000            413   _C0RIF          BIT 0xe9
0000            414   _C1FIF          BIT 0xea
0000            415   _C1RIF          BIT 0xeb
0000            416   _C2FIF          BIT 0xec
0000            417   _C2RIF          BIT 0xed
0000            418   _C3FIF          BIT 0xee
0000            419   _C3RIF          BIT 0xef
0000            420   _D1SRC0         BIT 0x88
0000            421   _D1SRC1         BIT 0x89
0000            422   _D1AMEN         BIT 0x8a
0000            423   _D01REFSL       BIT 0x8b
0000            424   _D3SRC0         BIT 0x8c
0000            425   _D3SRC1         BIT 0x8d
0000            426   _D3AMEN         BIT 0x8e
0000            427   _D23REFSL       BIT 0x8f
0000            428   _D0UDIS         BIT 0x98
0000            429   _D1UDIS         BIT 0x99
0000            430   _D2UDIS         BIT 0x9a
0000            431   _D3UDIS         BIT 0x9b
0000            432   _EX0            BIT 0xa8
0000            433   _ET0            BIT 0xa9
0000            434   _EX1            BIT 0xaa
0000            435   _ET1            BIT 0xab
0000            436   _ES0            BIT 0xac
0000            437   _ET2            BIT 0xad
0000            438   _ESPI0          BIT 0xae
0000            439   _EA             BIT 0xaf
0000            440   _PX0            BIT 0xb8
0000            441   _PT0            BIT 0xb9
0000            442   _PX1            BIT 0xba
0000            443   _PT1            BIT 0xbb
0000            444   _PS0            BIT 0xbc
0000            445   _PT2            BIT 0xbd
0000            446   _PSPI0          BIT 0xbe
0000            447   _P0_0           BIT 0x80
0000            448   _P0_1           BIT 0x81
0000            449   _P0_2           BIT 0x82
0000            450   _P0_3           BIT 0x83
0000            451   _P0_4           BIT 0x84
0000            452   _P0_5           BIT 0x85
0000            453   _P0_6           BIT 0x86
0000            454   _P0_7           BIT 0x87
0000            455   _P1_0           BIT 0x90
0000            456   _P1_1           BIT 0x91
0000            457   _P1_2           BIT 0x92
0000            458   _P1_3           BIT 0x93
0000            459   _P1_4           BIT 0x94
0000            460   _P1_5           BIT 0x95
0000            461   _P1_6           BIT 0x96
0000            462   _P1_7           BIT 0x97
0000            463   _P2_0           BIT 0xa0
0000            464   _P2_1           BIT 0xa1
0000            465   _P2_2           BIT 0xa2
0000            466   _P2_3           BIT 0xa3
0000            467   _P2_4           BIT 0xa4
0000            468   _P2_5           BIT 0xa5
0000            469   _P2_6           BIT 0xa6
0000            470   _P3_0           BIT 0xb0
0000            471   _P3_1           BIT 0xb1
0000            472   _P3_2           BIT 0xb2
0000            473   _P3_3           BIT 0xb3
0000            474   _P3_4           BIT 0xb4
0000            475   _P3_7           BIT 0xb7
0000            476   _CCF0           BIT 0xd8
0000            477   _CCF1           BIT 0xd9
0000            478   _CCF2           BIT 0xda
0000            479   _CCF3           BIT 0xdb
0000            480   _CCF4           BIT 0xdc
0000            481   _CCF5           BIT 0xdd
0000            482   _CR             BIT 0xde
0000            483   _CF             BIT 0xdf
0000            484   _PARITY         BIT 0xd0
0000            485   _F1             BIT 0xd1
0000            486   _OV             BIT 0xd2
0000            487   _RS0            BIT 0xd3
0000            488   _RS1            BIT 0xd4
0000            489   _F0             BIT 0xd5
0000            490   _AC             BIT 0xd6
0000            491   _CY             BIT 0xd7
0000            492   _RI             BIT 0x98
0000            493   _TI             BIT 0x99
0000            494   _RB8            BIT 0x9a
0000            495   _TB8            BIT 0x9b
0000            496   _REN            BIT 0x9c
0000            497   _CE             BIT 0x9d
0000            498   _SMODE          BIT 0x9e
0000            499   _RI1            BIT 0xc8
0000            500   _TI1            BIT 0xc9
0000            501   _RBX1           BIT 0xca
0000            502   _TBX1           BIT 0xcb
0000            503   _REN1           BIT 0xcc
0000            504   _PERR1          BIT 0xcd
0000            505   _OVR1           BIT 0xce
0000            506   _SI             BIT 0xc0
0000            507   _ACK            BIT 0xc1
0000            508   _ARBLOST        BIT 0xc2
0000            509   _ACKRQ          BIT 0xc3
0000            510   _STO            BIT 0xc4
0000            511   _STA            BIT 0xc5
0000            512   _TXMODE         BIT 0xc6
0000            513   _MASTER         BIT 0xc7
0000            514   _SPIEN          BIT 0xf8
0000            515   _TXNF           BIT 0xf9
0000            516   _NSSMD0         BIT 0xfa
0000            517   _NSSMD1         BIT 0xfb
0000            518   _RXOVRN         BIT 0xfc
0000            519   _MODF           BIT 0xfd
0000            520   _WCOL           BIT 0xfe
0000            521   _SPIF           BIT 0xff
0000            522   _IT0            BIT 0x88
0000            523   _IE0            BIT 0x89
0000            524   _IT1            BIT 0x8a
0000            525   _IE1            BIT 0x8b
0000            526   _TR0            BIT 0x8c
0000            527   _TF0            BIT 0x8d
0000            528   _TR1            BIT 0x8e
0000            529   _TF1            BIT 0x8f
0000            530   _T2XCLK0        BIT 0xc8
0000            531   _T2XCLK1        BIT 0xc9
0000            532   _TR2            BIT 0xca
0000            533   _T2SPLIT        BIT 0xcb
0000            534   _TF2CEN         BIT 0xcc
0000            535   _TF2LEN         BIT 0xcd
0000            536   _TF2L           BIT 0xce
0000            537   _TF2H           BIT 0xcf
0000            538   _T4XCLK0        BIT 0x98
0000            539   _T4XCLK1        BIT 0x99
0000            540   _TR4            BIT 0x9a
0000            541   _T4SPLIT        BIT 0x9b
0000            542   _TF4CEN         BIT 0x9c
0000            543   _TF4LEN         BIT 0x9d
0000            544   _TF4L           BIT 0x9e
0000            545   _TF4H           BIT 0x9f
0000            546   _T5XCLK0        BIT 0xc0
0000            547   _T5XCLK1        BIT 0xc1
0000            548   _TR5            BIT 0xc2
0000            549   _T5SPLIT        BIT 0xc3
0000            550   _TF5CEN         BIT 0xc4
0000            551   _TF5LEN         BIT 0xc5
0000            552   _TF5L           BIT 0xc6
0000            553   _TF5H           BIT 0xc7
0000            554   _RIE            BIT 0xd8
0000            555   _RXTO0          BIT 0xd9
0000            556   _RXTO1          BIT 0xda
0000            557   _RFRQ           BIT 0xdb
0000            558   _TIE            BIT 0xdc
0000            559   _TXHOLD         BIT 0xdd
0000            560   _TXNF1          BIT 0xde
0000            561   _TFRQ           BIT 0xdf
0000            562   ;--------------------------------------------------------
0000            563   ; overlayable register banks
0000            564   ;--------------------------------------------------------
0000            565            rbank0 segment data overlay
0000            566   ;--------------------------------------------------------
0000            567   ; overlayable bit register bank
0000            568   ;--------------------------------------------------------
0000            569            rseg BIT_BANK
0000            570   bits:
0000            571            ds 1
0001            572            b0 equ  bits.0 
0001            573            b1 equ  bits.1 
0001            574            b2 equ  bits.2 
0001            575            b3 equ  bits.3 
0001            576            b4 equ  bits.4 
0001            577            b5 equ  bits.5 
0001            578            b6 equ  bits.6 
0001            579            b7 equ  bits.7 
0001            580   ;--------------------------------------------------------
0001            581   ; internal ram data
0001            582   ;--------------------------------------------------------
0000            583            rseg R_DSEG
0000            584   _SPI_write_PARM_2:
0000            585            ds 1
0001            586   _BMM150_compensate_x_PARM_2:
0001            587            ds 3
0004            588   _BMM150_compensate_x_sloc0_1_0:
0004            589            ds 4
0008            590   _BMM150_compensate_y_PARM_2:
0008            591            ds 3
000B            592   _BMM150_compensate_y_sloc0_1_0:
000B            593            ds 4
000F            594   _BMM150_Read_Data_PARM_2:
000F            595            ds 3
0012            596   _BMM150_Read_Data_mag_x_1_123:
0012            597            ds 3
0015            598   _getstr1_PARM_2:
0015            599            ds 1
0016            600   _Auto_mode_slave_sloc0_1_0:
0016            601            ds 2
0018            602   _Joystick_Control_PARM_2:
0018            603            ds 3
001B            604   _Joystick_Control_sloc0_1_0:
001B            605            ds 2
001D            606   _Joystick_Control_sloc1_1_0:
001D            607            ds 1
001E            608   _Joystick_Control_sloc2_1_0:
001E            609            ds 1
001F            610   _Joystick_Control_sloc3_1_0:
001F            611            ds 4
0023            612   _Joystick_Control_sloc4_1_0:
0023            613            ds 4
0027            614   _Joystick_Control_sloc5_1_0:
0027            615            ds 4
002B            616   ;--------------------------------------------------------
002B            617   ; overlayable items in internal ram 
002B            618   ;--------------------------------------------------------
0000            619            rseg    R_OSEG
0000            620            rseg    R_OSEG
0000            621            rseg    R_OSEG
0000            622            rseg    R_OSEG
0000            623            rseg    R_OSEG
0000            624            rseg    R_OSEG
0000            625   _InitPinADC_PARM_2:
0000            626            ds 1
0001            627            rseg    R_OSEG
0001            628            rseg    R_OSEG
0001            629   _check_bound_PARM_2:
0001            630            ds 2
0003            631   ;--------------------------------------------------------
0003            632   ; indirectly addressable internal ram data
0003            633   ;--------------------------------------------------------
0000            634            rseg R_ISEG
0000            635   _buff:
0000            636            ds 20
0014            637   ;--------------------------------------------------------
0014            638   ; absolute internal ram data
0014            639   ;--------------------------------------------------------
0000            640            DSEG
0000            641   ;--------------------------------------------------------
0000            642   ; bit data
0000            643   ;--------------------------------------------------------
0000            644            rseg R_BSEG
0000            645   ;--------------------------------------------------------
0000            646   ; paged external ram data
0000            647   ;--------------------------------------------------------
0000            648            rseg R_PSEG
0000            649   ;--------------------------------------------------------
0000            650   ; external ram data
0000            651   ;--------------------------------------------------------
0000            652            rseg R_XSEG
0000            653   _freq100:
0000            654            ds 4
0004            655   _d1:
0004            656            ds 2
0006            657   _d2:
0006            658            ds 2
0008            659   _dig_x1:
0008            660            ds 1
0009            661   _dig_x2:
0009            662            ds 1
000A            663   _dig_y1:
000A            664            ds 1
000B            665   _dig_y2:
000B            666            ds 1
000C            667   _dig_z1:
000C            668            ds 2
000E            669   _dig_z2:
000E            670            ds 2
0010            671   _dig_z3:
0010            672            ds 2
0012            673   _dig_z4:
0012            674            ds 2
0014            675   _dig_xy1:
0014            676            ds 1
0015            677   _dig_xy2:
0015            678            ds 1
0016            679   _dig_xyz1:
0016            680            ds 2
0018            681   _distance:
0018            682            ds 2
001A            683   _overflow_count:
001A            684            ds 1
001B            685   _i_loo:
001B            686            ds 2
001D            687   _i:
001D            688            ds 2
001F            689   _BMM150_Read_Trim_Registers_trim_x1y1_1_97:
001F            690            ds 2
0021            691   _BMM150_Read_Trim_Registers_trim_xyz_data_1_97:
0021            692            ds 4
0025            693   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_97:
0025            694            ds 10
002F            695   _BMM150_compensate_x_retval_1_106:
002F            696            ds 2
0031            697   _BMM150_compensate_x_process_comp_x0_1_106:
0031            698            ds 2
0033            699   _BMM150_compensate_y_retval_1_115:
0033            700            ds 2
0035            701   _BMM150_compensate_y_process_comp_y0_1_115:
0035            702            ds 2
0037            703   _BMM150_Read_Data_x_val_1_124:
0037            704            ds 2
0039            705   _BMM150_Read_Data_y_val_1_124:
0039            706            ds 2
003B            707   _BMM150_Read_Data_rhall_val_1_124:
003B            708            ds 2
003D            709   _ReadHX711_dataa_1_174:
003D            710            ds 4
0041            711   _ReadHX711_j_1_174:
0041            712            ds 1
0042            713   _Read_angle_mag_x_1_228:
0042            714            ds 2
0044            715   _Read_angle_mag_y_1_228:
0044            716            ds 2
0046            717   _Read_angle_sum_x_1_228:
0046            718            ds 4
004A            719   _Read_angle_sum_y_1_228:
004A            720            ds 4
004E            721   _Read_angle_angle_1_228:
004E            722            ds 4
0052            723   _Auto_mode_slave_command_1_230:
0052            724            ds 2
0054            725   _Auto_mode_slave_state_res_1_230:
0054            726            ds 2
0056            727   _Auto_mode_slave_dummy_1_230:
0056            728            ds 2
0058            729   _Joystick_Control_vx_error_1_243:
0058            730            ds 2
005A            731   _Joystick_Control_vy_error_1_243:
005A            732            ds 2
005C            733   _Joystick_Control_vx_err_1_243:
005C            734            ds 2
005E            735   _Joystick_Control_vy_err_1_243:
005E            736            ds 2
0060            737   ;--------------------------------------------------------
0060            738   ; absolute external ram data
0060            739   ;--------------------------------------------------------
0000            740            XSEG
0000            741   ;--------------------------------------------------------
0000            742   ; external initialized ram data
0000            743   ;--------------------------------------------------------
0000            744            rseg R_IXSEG
0000            745   _pwm_counter:
0000            746            ds 2
0002            747   _servo_counter:
0002            748            ds 2
0004            749   _pwm_left:
0004            750            ds 1
0005            751   _pwm_right:
0005            752            ds 1
0006            753   _L_motor_dir:
0006            754            ds 1
0007            755   _R_motor_dir:
0007            756            ds 1
0008            757   _servo_base:
0008            758            ds 1
0009            759   _servo_arm:
0009            760            ds 1
000A            761   _vx_thres:
000A            762            ds 2
000C            763   _vy_thres:
000C            764            ds 2
000E            765   _vx:
000E            766            ds 2
0010            767   _vy:
0010            768            ds 2
0012            769   _fre_mea_count:
0012            770            ds 2
0014            771   _weight_mea_count:
0014            772            ds 2
0016            773   _seed:
0016            774            ds 2
0018            775   _pwm_corr:
0018            776            ds 4
001C            777   _curr_angle:
001C            778            ds 4
0020            779   _raw_angle:
0020            780            ds 4
0024            781   _last_raw_angle:
0024            782            ds 4
0028            783   _angle_diff:
0028            784            ds 4
002C            785   _mea_yes:
002C            786            ds 1
002D            787   _weight:
002D            788            ds 2
002F            789   _duration:
002F            790            ds 4
0033            791   _auto_mode:
0033            792            ds 2
0035            793   _pick:
0035            794            ds 1
0000            795            rseg R_HOME
0000            796            rseg R_GSINIT
0000            797            rseg R_CSEG
0000            798   ;--------------------------------------------------------
0000            799   ; Reset entry point and interrupt vectors
0000            800   ;--------------------------------------------------------
0000            801            CSEG at 0x0000
0000 020000     802            ljmp    _crt0
0093            803            CSEG at 0x0093
0093 020000     804            ljmp    _Timer5_ISR
0096            805   ;--------------------------------------------------------
0096            806   ; global & static initialisations
0096            807   ;--------------------------------------------------------
0000            808            rseg R_HOME
0000            809            rseg R_GSINIT
0000            810            rseg R_GSINIT
0000            811   ;--------------------------------------------------------
0000            812   ; data variables initialization
0000            813   ;--------------------------------------------------------
0000            814            rseg R_DINIT
0000            815            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            816   ;--------------------------------------------------------
0000            817   ; code
0000            818   ;--------------------------------------------------------
0000            819            rseg R_CSEG
0000            820   ;------------------------------------------------------------
0000            821   ;Allocation info for local variables in function '_c51_external_startup'
0000            822   ;------------------------------------------------------------
0000            823   ;------------------------------------------------------------
0000            824   ;        main.c:120: char _c51_external_startup (void)
0000            825   ;        -----------------------------------------
0000            826   ;         function _c51_external_startup
0000            827   ;        -----------------------------------------
0000            828   __c51_external_startup:
0000            829            using   0
0000            830   ;        main.c:123: SFRPAGE = 0x00;
0000 75A700     831            mov     _SFRPAGE,#0x00
0003            832   ;        main.c:124: WDTCN = 0xDE; //First key
0003 7597DE     833            mov     _WDTCN,#0xDE
0006            834   ;        main.c:125: WDTCN = 0xAD; //Second key
0006 7597AD     835            mov     _WDTCN,#0xAD
0009            836   ;        main.c:127: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     837            mov     _VDM0CN,#0x80
000C            838   ;        main.c:128: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     839            mov     _RSTSRC,#0x06
000F            840   ;        main.c:135: SFRPAGE = 0x10;
000F 75A710     841            mov     _SFRPAGE,#0x10
0012            842   ;        main.c:136: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     843            mov     _PFE0CN,#0x20
0015            844   ;        main.c:137: SFRPAGE = 0x00;
0015 75A700     845            mov     _SFRPAGE,#0x00
0018            846   ;        main.c:158: CLKSEL = 0x00;
0018 75A900     847            mov     _CLKSEL,#0x00
001B            848   ;        main.c:159: CLKSEL = 0x00;
001B 75A900     849            mov     _CLKSEL,#0x00
001E            850   ;        main.c:160: while ((CLKSEL & 0x80) == 0);
001E            851   L002001?:
001E E5A9       852            mov     a,_CLKSEL
0020 30E738     853            jnb     acc.7,L002001?
0023            854   ;        main.c:161: CLKSEL = 0x03;
0023 75A903     855            mov     _CLKSEL,#0x03
0026            856   ;        main.c:162: CLKSEL = 0x03;
0026 75A903     857            mov     _CLKSEL,#0x03
0029            858   ;        main.c:163: while ((CLKSEL & 0x80) == 0);
0029            859   L002004?:
0029 E5A9       860            mov     a,_CLKSEL
002B 30E7B8     861            jnb     acc.7,L002004?
002E            862   ;        main.c:169: P0MDOUT |= 0b_1100_0000;
002E 43A4C0     863            orl     _P0MDOUT,#0xC0
0031            864   ;        main.c:170: P1MDOUT |= 0b_0000_0110;
0031 43A506     865            orl     _P1MDOUT,#0x06
0034            866   ;        main.c:171: P2MDOUT |= 0b_0000_0001; // P2.0 in push-pull mode
0034 43A601     867            orl     _P2MDOUT,#0x01
0037            868   ;        main.c:172: XBR0     = 0b_0000_0011; // UART0E = 1 and SPI0E = 1 0b_0000_0011               
0037 75E103     869            mov     _XBR0,#0x03
003A            870   ;        main.c:173: XBR1     = 0b_0000_0000;
003A 75E200     871            mov     _XBR1,#0x00
003D            872   ;        main.c:174: XBR2     = 0b_0100_0001; // Enable crossbar and uart 1
003D 75E341     873            mov     _XBR2,#0x41
0040            874   ;        main.c:175: P0SKIP       = 0b_0000_0111; 
0040 75D407     875            mov     _P0SKIP,#0x07
0043            876   ;        main.c:176: P1SKIP   = 0b_1111_1001;
0043 75D5F9     877            mov     _P1SKIP,#0xF9
0046            878   ;        main.c:181: SCON0 = 0x10;
0046 759810     879            mov     _SCON0,#0x10
0049            880   ;        main.c:182: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     881            mov     _TH1,#0xE6
004C            882   ;        main.c:183: TL1 = TH1;      // Init Timer1
004C 858D8B     883            mov     _TL1,_TH1
004F            884   ;        main.c:184: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     885            anl     _TMOD,#0x0F
0052            886   ;        main.c:185: TMOD |=  0x20;                       
0052 438920     887            orl     _TMOD,#0x20
0055            888   ;        main.c:186: TR1 = 1; // START Timer1
0055 D28E       889            setb    _TR1
0057            890   ;        main.c:187: TI = 1;  // Indicate TX0 ready
0057 D299       891            setb    _TI
0059            892   ;        main.c:188: P2_0=1; // 'set' pin to 1 is normal operation mode.
0059 D2A0       893            setb    _P2_0
005B            894   ;        main.c:191: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
005B 75A211     895            mov     _SPI0CKR,#0x11
005E            896   ;        main.c:192: SPI0CFG = 0b_1110_0000; // SPI mode 3
005E 75A1E0     897            mov     _SPI0CFG,#0xE0
0061            898   ;        main.c:193: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0061 75F801     899            mov     _SPI0CN0,#0x01
0064            900   ;        main.c:196: SFRPAGE=0x10;
0064 75A710     901            mov     _SFRPAGE,#0x10
0067            902   ;        main.c:197: TMR5CN0=0x00;
0067 75C000     903            mov     _TMR5CN0,#0x00
006A            904   ;        main.c:198: TMR5=0xffff;   // Set to reload immediately
006A 75D4FF     905            mov     _TMR5,#0xFF
006D 75D5FF     906            mov     (_TMR5 >> 8),#0xFF
0070            907   ;        main.c:199: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
0070 43F308     908            orl     _EIE2,#0x08
0073            909   ;        main.c:200: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0073 D2C2       910            setb    _TR5
0075            911   ;        main.c:202: EA=1;  // Enable global interrupts
0075 D2AF       912            setb    _EA
0077            913   ;        main.c:203: SFRPAGE=0x00;
0077 75A700     914            mov     _SFRPAGE,#0x00
007A            915   ;        main.c:205: return 0;
007A 758200     916            mov     dpl,#0x00
007D 22         917            ret
007E            918   ;------------------------------------------------------------
007E            919   ;Allocation info for local variables in function 'Timer3us'
007E            920   ;------------------------------------------------------------
007E            921   ;us                        Allocated to registers r2 
007E            922   ;i                         Allocated to registers r3 
007E            923   ;------------------------------------------------------------
007E            924   ;        main.c:209: void Timer3us(unsigned char us)
007E            925   ;        -----------------------------------------
007E            926   ;         function Timer3us
007E            927   ;        -----------------------------------------
007E            928   _Timer3us:
007E AA82       929            mov     r2,dpl
0080            930   ;        main.c:214: CKCON0|=0b_0100_0000;
0080 438E40     931            orl     _CKCON0,#0x40
0083            932   ;        main.c:216: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0083 7592B8     933            mov     _TMR3RL,#0xB8
0086 7593FF     934            mov     (_TMR3RL >> 8),#0xFF
0089            935   ;        main.c:217: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0089 859294     936            mov     _TMR3,_TMR3RL
008C 859395     937            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
008F            938   ;        main.c:219: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
008F 759104     939            mov     _TMR3CN0,#0x04
0092            940   ;        main.c:220: for (i = 0; i < us; i++)       // Count <us> overflows
0092 7B00       941            mov     r3,#0x00
0094            942   L003004?:
0094 C3         943            clr     c
0095 EB         944            mov     a,r3
0096 9A         945            subb    a,r2
0097 5000       946            jnc     L003007?
0099            947   ;        main.c:222: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0099            948   L003001?:
0099 E591       949            mov     a,_TMR3CN0
009B 30E7B8     950            jnb     acc.7,L003001?
009E            951   ;        main.c:223: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
009E 53917F     952            anl     _TMR3CN0,#0x7F
00A1            953   ;        main.c:220: for (i = 0; i < us; i++)       // Count <us> overflows
00A1 0B         954            inc     r3
00A2 8000       955            sjmp    L003004?
00A4            956   L003007?:
00A4            957   ;        main.c:225: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00A4 759100     958            mov     _TMR3CN0,#0x00
00A7 22         959            ret
00A8            960   ;------------------------------------------------------------
00A8            961   ;Allocation info for local variables in function 'waitms'
00A8            962   ;------------------------------------------------------------
00A8            963   ;ms                        Allocated to registers r2 r3 
00A8            964   ;j                         Allocated to registers r4 r5 
00A8            965   ;k                         Allocated to registers r6 
00A8            966   ;------------------------------------------------------------
00A8            967   ;        main.c:228: void waitms (unsigned int ms)
00A8            968   ;        -----------------------------------------
00A8            969   ;         function waitms
00A8            970   ;        -----------------------------------------
00A8            971   _waitms:
00A8 AA82       972            mov     r2,dpl
00AA AB83       973            mov     r3,dph
00AC            974   ;        main.c:232: for(j=0; j<ms; j++)
00AC 7C00       975            mov     r4,#0x00
00AE 7D00       976            mov     r5,#0x00
00B0            977   L004005?:
00B0 C3         978            clr     c
00B1 EC         979            mov     a,r4
00B2 9A         980            subb    a,r2
00B3 ED         981            mov     a,r5
00B4 9B         982            subb    a,r3
00B5 5000       983            jnc     L004009?
00B7            984   ;        main.c:233: for (k=0; k<4; k++) Timer3us(250);
00B7 7E00       985            mov     r6,#0x00
00B9            986   L004001?:
00B9 BE04F8     987            cjne    r6,#0x04,L004018?
00BC            988   L004018?:
00BC 5000       989            jnc     L004007?
00BE 7582FA     990            mov     dpl,#0xFA
00C1 C002       991            push    ar2
00C3 C003       992            push    ar3
00C5 C004       993            push    ar4
00C7 C005       994            push    ar5
00C9 C006       995            push    ar6
00CB 120000     996            lcall   _Timer3us
00CE D006       997            pop     ar6
00D0 D005       998            pop     ar5
00D2 D004       999            pop     ar4
00D4 D003      1000            pop     ar3
00D6 D002      1001            pop     ar2
00D8 0E        1002            inc     r6
00D9 8000      1003            sjmp    L004001?
00DB           1004   L004007?:
00DB           1005   ;        main.c:232: for(j=0; j<ms; j++)
00DB 0C        1006            inc     r4
00DC BC0038    1007            cjne    r4,#0x00,L004005?
00DF 0D        1008            inc     r5
00E0 8000      1009            sjmp    L004005?
00E2           1010   L004009?:
00E2 22        1011            ret
00E3           1012   ;------------------------------------------------------------
00E3           1013   ;Allocation info for local variables in function 'SPI_transfer'
00E3           1014   ;------------------------------------------------------------
00E3           1015   ;tx_data                   Allocated to registers 
00E3           1016   ;------------------------------------------------------------
00E3           1017   ;        main.c:236: unsigned char SPI_transfer(unsigned char tx_data)
00E3           1018   ;        -----------------------------------------
00E3           1019   ;         function SPI_transfer
00E3           1020   ;        -----------------------------------------
00E3           1021   _SPI_transfer:
00E3 8582A3    1022            mov     _SPI0DAT,dpl
00E6           1023   ;        main.c:239: while (!SPIF);      // Wait for transfer to complete
00E6           1024   L005001?:
00E6           1025   ;        main.c:240: SPIF = 0;           // Clear SPI interrupt flag
00E6 10FFB8    1026            jbc     _SPIF,L005008?
00E9 8000      1027            sjmp    L005001?
00EB           1028   L005008?:
00EB           1029   ;        main.c:241: return SPI0DAT;     // Return received data
00EB 85A382    1030            mov     dpl,_SPI0DAT
00EE 22        1031            ret
00EF           1032   ;------------------------------------------------------------
00EF           1033   ;Allocation info for local variables in function 'SPI_read'
00EF           1034   ;------------------------------------------------------------
00EF           1035   ;reg_addr                  Allocated to registers r2 
00EF           1036   ;value                     Allocated with name '_SPI_read_value_1_93'
00EF           1037   ;------------------------------------------------------------
00EF           1038   ;        main.c:244: unsigned char SPI_read(unsigned char reg_addr)
00EF           1039   ;        -----------------------------------------
00EF           1040   ;         function SPI_read
00EF           1041   ;        -----------------------------------------
00EF           1042   _SPI_read:
00EF AA82      1043            mov     r2,dpl
00F1           1044   ;        main.c:249: reg_addr = reg_addr | 0x80;
00F1 430280    1045            orl     ar2,#0x80
00F4           1046   ;        main.c:251: CS = 0;                // Select the device
00F4 C290      1047            clr     _P1_0
00F6           1048   ;        main.c:252: SPI_transfer(reg_addr);     // Send register address
00F6 8A82      1049            mov     dpl,r2
00F8 120000    1050            lcall   _SPI_transfer
00FB           1051   ;        main.c:253: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
00FB 758200    1052            mov     dpl,#0x00
00FE 120000    1053            lcall   _SPI_transfer
0101           1054   ;        main.c:254: CS = 1;                // Deselect the device
0101 D290      1055            setb    _P1_0
0103           1056   ;        main.c:256: return value;
0103 22        1057            ret
0104           1058   ;------------------------------------------------------------
0104           1059   ;Allocation info for local variables in function 'SPI_write'
0104           1060   ;------------------------------------------------------------
0104           1061   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0104           1062   ;reg_addr                  Allocated to registers r2 
0104           1063   ;------------------------------------------------------------
0104           1064   ;        main.c:259: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0104           1065   ;        -----------------------------------------
0104           1066   ;         function SPI_write
0104           1067   ;        -----------------------------------------
0104           1068   _SPI_write:
0104 AA82      1069            mov     r2,dpl
0106           1070   ;        main.c:262: reg_addr = reg_addr & 0x7F;
0106 53027F    1071            anl     ar2,#0x7F
0109           1072   ;        main.c:264: CS = 0;                // Select device
0109 C290      1073            clr     _P1_0
010B           1074   ;        main.c:265: SPI_transfer(reg_addr);     // Send register address
010B 8A82      1075            mov     dpl,r2
010D 120000    1076            lcall   _SPI_transfer
0110           1077   ;        main.c:266: SPI_transfer(reg_value);    // Send value
0110 85A082    1078            mov     dpl,_SPI_write_PARM_2
0113 120000    1079            lcall   _SPI_transfer
0116           1080   ;        main.c:267: CS = 1;                // Deselect device
0116 D290      1081            setb    _P1_0
0118 22        1082            ret
0119           1083   ;------------------------------------------------------------
0119           1084   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
0119           1085   ;------------------------------------------------------------
0119           1086   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_97'
0119           1087   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_97'
0119           1088   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_97'
0119           1089   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97'
0119           1090   ;------------------------------------------------------------
0119           1091   ;        main.c:270: void BMM150_Read_Trim_Registers(void)
0119           1092   ;        -----------------------------------------
0119           1093   ;         function BMM150_Read_Trim_Registers
0119           1094   ;        -----------------------------------------
0119           1095   _BMM150_Read_Trim_Registers:
0119           1096   ;        main.c:274: xdata uint8_t trim_x1y1[2] = {0};
0119 90CBE8    1097            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
011C           1098   ;        main.c:275: xdata uint8_t trim_xyz_data[4] = {0};
011C E4        1099            clr     a
011D F0        1100            movx    @dptr,a
011E 90CBE9    1101            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
0121 F0        1102            movx    @dptr,a
0122 90CC48    1103            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0125 F0        1104            movx    @dptr,a
0126 90CC49    1105            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0001)
0129 F0        1106            movx    @dptr,a
012A 90CC4A    1107            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
012D           1108   ;        main.c:276: xdata uint8_t trim_xy1xy2[10] = {0};
012D E4        1109            clr     a
012E F0        1110            movx    @dptr,a
012F 90CC4B    1111            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0132 F0        1112            movx    @dptr,a
0133 90CCA8    1113            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0136 F0        1114            movx    @dptr,a
0137 90CCA9    1115            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0001)
013A F0        1116            movx    @dptr,a
013B 90CCAA    1117            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0002)
013E E4        1118            clr     a
013F F0        1119            movx    @dptr,a
0140 90CCAB    1120            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0003)
0143 F0        1121            movx    @dptr,a
0144 90CCAC    1122            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0147 F0        1123            movx    @dptr,a
0148 90CCAD    1124            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
014B F0        1125            movx    @dptr,a
014C 90CCAE    1126            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0006)
014F E4        1127            clr     a
0150 F0        1128            movx    @dptr,a
0151 90CCAF    1129            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0007)
0154 F0        1130            movx    @dptr,a
0155 90CCB0    1131            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0158 F0        1132            movx    @dptr,a
0159 90CCB1    1133            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
015C F0        1134            movx    @dptr,a
015D           1135   ;        main.c:279: for (i=0;i<2;i++){
015D 905250    1136            mov     dptr,#_i
0160 E4        1137            clr     a
0161 F0        1138            movx    @dptr,a
0162 A3        1139            inc     dptr
0163 F0        1140            movx    @dptr,a
0164           1141   L008001?:
0164 905250    1142            mov     dptr,#_i
0167 E0        1143            movx    a,@dptr
0168 FA        1144            mov     r2,a
0169 A3        1145            inc     dptr
016A E0        1146            movx    a,@dptr
016B FB        1147            mov     r3,a
016C C3        1148            clr     c
016D EA        1149            mov     a,r2
016E 9402      1150            subb    a,#0x02
0170 EB        1151            mov     a,r3
0171 9400      1152            subb    a,#0x00
0173 5000      1153            jnc     L008004?
0175           1154   ;        main.c:280: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
0175 EA        1155            mov     a,r2
0176 24E8      1156            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0178 FC        1157            mov     r4,a
0179 EB        1158            mov     a,r3
017A 34CB      1159            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 >> 8)
017C FD        1160            mov     r5,a
017D 745D      1161            mov     a,#0x5D
017F 2A        1162            add     a,r2
0180 F582      1163            mov     dpl,a
0182 C004      1164            push    ar4
0184 C005      1165            push    ar5
0186 120000    1166            lcall   _SPI_read
0189 AA82      1167            mov     r2,dpl
018B D005      1168            pop     ar5
018D D004      1169            pop     ar4
018F 8C82      1170            mov     dpl,r4
0191 8D83      1171            mov     dph,r5
0193 EA        1172            mov     a,r2
0194 F0        1173            movx    @dptr,a
0195           1174   ;        main.c:279: for (i=0;i<2;i++){
0195 905250    1175            mov     dptr,#_i
0198 E0        1176            movx    a,@dptr
0199 2401      1177            add     a,#0x01
019B F0        1178            movx    @dptr,a
019C A3        1179            inc     dptr
019D E0        1180            movx    a,@dptr
019E 3400      1181            addc    a,#0x00
01A0 F0        1182            movx    @dptr,a
01A1 8000      1183            sjmp    L008001?
01A3           1184   L008004?:
01A3           1185   ;        main.c:282: for (i=0;i<4;i++){
01A3 905250    1186            mov     dptr,#_i
01A6 E4        1187            clr     a
01A7 F0        1188            movx    @dptr,a
01A8 A3        1189            inc     dptr
01A9 F0        1190            movx    @dptr,a
01AA           1191   L008005?:
01AA 905250    1192            mov     dptr,#_i
01AD E0        1193            movx    a,@dptr
01AE FA        1194            mov     r2,a
01AF A3        1195            inc     dptr
01B0 E0        1196            movx    a,@dptr
01B1 FB        1197            mov     r3,a
01B2 C3        1198            clr     c
01B3 EA        1199            mov     a,r2
01B4 9404      1200            subb    a,#0x04
01B6 EB        1201            mov     a,r3
01B7 9400      1202            subb    a,#0x00
01B9 5000      1203            jnc     L008008?
01BB           1204   ;        main.c:283: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
01BB EA        1205            mov     a,r2
01BC 2448      1206            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
01BE FC        1207            mov     r4,a
01BF EB        1208            mov     a,r3
01C0 34CC      1209            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 >> 8)
01C2 FD        1210            mov     r5,a
01C3 7462      1211            mov     a,#0x62
01C5 2A        1212            add     a,r2
01C6 F582      1213            mov     dpl,a
01C8 C004      1214            push    ar4
01CA C005      1215            push    ar5
01CC 120000    1216            lcall   _SPI_read
01CF AA82      1217            mov     r2,dpl
01D1 D005      1218            pop     ar5
01D3 D004      1219            pop     ar4
01D5 8C82      1220            mov     dpl,r4
01D7 8D83      1221            mov     dph,r5
01D9 EA        1222            mov     a,r2
01DA F0        1223            movx    @dptr,a
01DB           1224   ;        main.c:282: for (i=0;i<4;i++){
01DB 905250    1225            mov     dptr,#_i
01DE E0        1226            movx    a,@dptr
01DF 2401      1227            add     a,#0x01
01E1 F0        1228            movx    @dptr,a
01E2 A3        1229            inc     dptr
01E3 E0        1230            movx    a,@dptr
01E4 3400      1231            addc    a,#0x00
01E6 F0        1232            movx    @dptr,a
01E7 8000      1233            sjmp    L008005?
01E9           1234   L008008?:
01E9           1235   ;        main.c:285: for (i=0;i<10;i++){
01E9 905250    1236            mov     dptr,#_i
01EC E4        1237            clr     a
01ED F0        1238            movx    @dptr,a
01EE A3        1239            inc     dptr
01EF F0        1240            movx    @dptr,a
01F0           1241   L008009?:
01F0 905250    1242            mov     dptr,#_i
01F3 E0        1243            movx    a,@dptr
01F4 FA        1244            mov     r2,a
01F5 A3        1245            inc     dptr
01F6 E0        1246            movx    a,@dptr
01F7 FB        1247            mov     r3,a
01F8 C3        1248            clr     c
01F9 EA        1249            mov     a,r2
01FA 940A      1250            subb    a,#0x0A
01FC EB        1251            mov     a,r3
01FD 9400      1252            subb    a,#0x00
01FF 5000      1253            jnc     L008012?
0201           1254   ;        main.c:286: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
0201 EA        1255            mov     a,r2
0202 24A8      1256            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0204 FC        1257            mov     r4,a
0205 EB        1258            mov     a,r3
0206 34CC      1259            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 >> 8)
0208 FD        1260            mov     r5,a
0209 7468      1261            mov     a,#0x68
020B 2A        1262            add     a,r2
020C F582      1263            mov     dpl,a
020E C004      1264            push    ar4
0210 C005      1265            push    ar5
0212 120000    1266            lcall   _SPI_read
0215 AA82      1267            mov     r2,dpl
0217 D005      1268            pop     ar5
0219 D004      1269            pop     ar4
021B 8C82      1270            mov     dpl,r4
021D 8D83      1271            mov     dph,r5
021F EA        1272            mov     a,r2
0220 F0        1273            movx    @dptr,a
0221           1274   ;        main.c:285: for (i=0;i<10;i++){
0221 905250    1275            mov     dptr,#_i
0224 E0        1276            movx    a,@dptr
0225 2401      1277            add     a,#0x01
0227 F0        1278            movx    @dptr,a
0228 A3        1279            inc     dptr
0229 E0        1280            movx    a,@dptr
022A 3400      1281            addc    a,#0x00
022C F0        1282            movx    @dptr,a
022D 8000      1283            sjmp    L008009?
022F           1284   L008012?:
022F           1285   ;        main.c:289: dig_x1 = (int8_t) trim_x1y1[0]; 
022F 90CBE8    1286            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0232 E0        1287            movx    a,@dptr
0233 9055D0    1288            mov     dptr,#_dig_x1
0236 F0        1289            movx    @dptr,a
0237           1290   ;        main.c:290: dig_y1 = (int8_t) trim_x1y1[1]; 
0237 90CBE9    1291            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
023A E0        1292            movx    a,@dptr
023B 905550    1293            mov     dptr,#_dig_y1
023E F0        1294            movx    @dptr,a
023F           1295   ;        main.c:291: dig_x2 = (int8_t) trim_xyz_data[2]; 
023F 90CC4A    1296            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
0242 E0        1297            movx    a,@dptr
0243 905590    1298            mov     dptr,#_dig_x2
0246 F0        1299            movx    @dptr,a
0247           1300   ;        main.c:292: dig_y2 = (int8_t) trim_xyz_data[3]; 
0247 90CC4B    1301            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
024A E0        1302            movx    a,@dptr
024B 905510    1303            mov     dptr,#_dig_y2
024E F0        1304            movx    @dptr,a
024F           1305   ;        main.c:306: dig_xy1 = trim_xy1xy2[9];
024F 90CCB1    1306            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
0252 E0        1307            movx    a,@dptr
0253 9053D0    1308            mov     dptr,#_dig_xy1
0256 F0        1309            movx    @dptr,a
0257           1310   ;        main.c:307: dig_xy2 = (int8_t)trim_xy1xy2[8];
0257 90CCB0    1311            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
025A E0        1312            movx    a,@dptr
025B 905390    1313            mov     dptr,#_dig_xy2
025E F0        1314            movx    @dptr,a
025F           1315   ;        main.c:309: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
025F 90CCAD    1316            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
0262 E0        1317            movx    a,@dptr
0263 FA        1318            mov     r2,a
0264 53027F    1319            anl     ar2,#0x7F
0267 8A03      1320            mov     ar3,r2
0269 7A00      1321            mov     r2,#0x00
026B           1322   ;        main.c:310: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
026B 90CCAC    1323            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
026E E0        1324            movx    a,@dptr
026F FC        1325            mov     r4,a
0270 7D00      1326            mov     r5,#0x00
0272 905350    1327            mov     dptr,#_dig_xyz1
0275 EC        1328            mov     a,r4
0276 4A        1329            orl     a,r2
0277 F0        1330            movx    @dptr,a
0278 ED        1331            mov     a,r5
0279 4B        1332            orl     a,r3
027A A3        1333            inc     dptr
027B F0        1334            movx    @dptr,a
027C 22        1335            ret
027D           1336   ;------------------------------------------------------------
027D           1337   ;Allocation info for local variables in function 'BMM150_Init'
027D           1338   ;------------------------------------------------------------
027D           1339   ;chip_id                   Allocated with name '_BMM150_Init_chip_id_1_102'
027D           1340   ;------------------------------------------------------------
027D           1341   ;        main.c:314: void BMM150_Init(void)
027D           1342   ;        -----------------------------------------
027D           1343   ;         function BMM150_Init
027D           1344   ;        -----------------------------------------
027D           1345   _BMM150_Init:
027D           1346   ;        main.c:319: CS = 1; // Deselect BMM150
027D D290      1347            setb    _P1_0
027F           1348   ;        main.c:322: waitms(10);
027F 90000A    1349            mov     dptr,#0x000A
0282 120000    1350            lcall   _waitms
0285           1351   ;        main.c:325: SPI_write(BMM150_POWER_CONTROL, 0x82);
0285 75A082    1352            mov     _SPI_write_PARM_2,#0x82
0288 75824B    1353            mov     dpl,#0x4B
028B 120000    1354            lcall   _SPI_write
028E           1355   ;        main.c:326: waitms(10);  // Wait for reset to complete
028E 90000A    1356            mov     dptr,#0x000A
0291 120000    1357            lcall   _waitms
0294           1358   ;        main.c:329: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
0294 75A001    1359            mov     _SPI_write_PARM_2,#0x01
0297 75824B    1360            mov     dpl,#0x4B
029A 120000    1361            lcall   _SPI_write
029D           1362   ;        main.c:330: waitms(5);
029D 900005    1363            mov     dptr,#0x0005
02A0 120000    1364            lcall   _waitms
02A3           1365   ;        main.c:333: chip_id = SPI_read(BMM150_CHIP_ID);
02A3 758240    1366            mov     dpl,#0x40
02A6 120000    1367            lcall   _SPI_read
02A9 AA82      1368            mov     r2,dpl
02AB           1369   ;        main.c:334: if (chip_id != BMM150_CHIP_ID_VALUE)
02AB BA3278    1370            cjne    r2,#0x32,L009006?
02AE 8000      1371            sjmp    L009002?
02B0           1372   L009006?:
02B0           1373   ;        main.c:336: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
02B0 8A03      1374            mov     ar3,r2
02B2 7C00      1375            mov     r4,#0x00
02B4 C002      1376            push    ar2
02B6 C003      1377            push    ar3
02B8 C004      1378            push    ar4
02BA 74F8      1379            mov     a,#__str_0
02BC C0E0      1380            push    acc
02BE 74D9      1381            mov     a,#(__str_0 >> 8)
02C0 C0E0      1382            push    acc
02C2 7480      1383            mov     a,#0x80
02C4 C0E0      1384            push    acc
02C6 120000    1385            lcall   _printf
02C9 E581      1386            mov     a,sp
02CB 24FB      1387            add     a,#0xfb
02CD F581      1388            mov     sp,a
02CF D002      1389            pop     ar2
02D1           1390   L009002?:
02D1           1391   ;        main.c:346: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
02D1 75A000    1392            mov     _SPI_write_PARM_2,#0x00
02D4 75824C    1393            mov     dpl,#0x4C
02D7 C002      1394            push    ar2
02D9 120000    1395            lcall   _SPI_write
02DC           1396   ;        main.c:349: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
02DC 75A07F    1397            mov     _SPI_write_PARM_2,#0x7F
02DF 758251    1398            mov     dpl,#0x51
02E2 120000    1399            lcall   _SPI_write
02E5           1400   ;        main.c:350: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
02E5 75A00E    1401            mov     _SPI_write_PARM_2,#0x0E
02E8 758252    1402            mov     dpl,#0x52
02EB 120000    1403            lcall   _SPI_write
02EE           1404   ;        main.c:352: BMM150_Read_Trim_Registers();
02EE 120000    1405            lcall   _BMM150_Read_Trim_Registers
02F1           1406   ;        main.c:354: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
02F1 7B00      1407            mov     r3,#0x00
02F3 C003      1408            push    ar3
02F5 74B8      1409            mov     a,#__str_1
02F7 C0E0      1410            push    acc
02F9 74DA      1411            mov     a,#(__str_1 >> 8)
02FB C0E0      1412            push    acc
02FD 7480      1413            mov     a,#0x80
02FF C0E0      1414            push    acc
0301 120000    1415            lcall   _printf
0304 E581      1416            mov     a,sp
0306 24FB      1417            add     a,#0xfb
0308 F581      1418            mov     sp,a
030A           1419   ;        main.c:355: return; 
030A 22        1420            ret
030B           1421   ;------------------------------------------------------------
030B           1422   ;Allocation info for local variables in function 'BMM150_compensate_x'
030B           1423   ;------------------------------------------------------------
030B           1424   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
030B           1425   ;mag_data_x                Allocated to registers r2 r3 r4 
030B           1426   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
030B           1427   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_106'
030B           1428   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_106'
030B           1429   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_106'
030B           1430   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_106'
030B           1431   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_106'
030B           1432   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_106'
030B           1433   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_106'
030B           1434   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_106'
030B           1435   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_106'
030B           1436   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_106'
030B           1437   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_106'
030B           1438   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_106'
030B           1439   ;------------------------------------------------------------
030B           1440   ;        main.c:358: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
030B           1441   ;        -----------------------------------------
030B           1442   ;         function BMM150_compensate_x
030B           1443   ;        -----------------------------------------
030B           1444   _BMM150_compensate_x:
030B           1445   ;        main.c:376: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
030B ACF0      1446            mov     r4,b
030D 120000    1447            lcall   __gptrget
0310 FA        1448            mov     r2,a
0311 A3        1449            inc     dptr
0312 120000    1450            lcall   __gptrget
0315 FB        1451            mov     r3,a
0316 BA0078    1452            cjne    r2,#0x00,L010019?
0319 BBF078    1453            cjne    r3,#0xF0,L010019?
031C 020000    1454            ljmp    L010011?
031F           1455   L010019?:
031F           1456   ;        main.c:377: if (*data_rhall != 0)
031F AC50      1457            mov     r4,_BMM150_compensate_x_PARM_2
0321 AD51      1458            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
0323 AE52      1459            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
0325 8C82      1460            mov     dpl,r4
0327 8D83      1461            mov     dph,r5
0329 8EF0      1462            mov     b,r6
032B 120000    1463            lcall   __gptrget
032E FC        1464            mov     r4,a
032F A3        1465            inc     dptr
0330 120000    1466            lcall   __gptrget
0333 FD        1467            mov     r5,a
0334 4C        1468            orl     a,r4
0335 6000      1469            jz      L010005?
0337           1470   ;        main.c:380: process_comp_x0 = *data_rhall;
0337 90CD68    1471            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
033A EC        1472            mov     a,r4
033B F0        1473            movx    @dptr,a
033C A3        1474            inc     dptr
033D ED        1475            mov     a,r5
033E F0        1476            movx    @dptr,a
033F 8000      1477            sjmp    L010006?
0341           1478   L010005?:
0341           1479   ;        main.c:382: else if (dig_xyz1 != 0)
0341 905350    1480            mov     dptr,#_dig_xyz1
0344 E0        1481            movx    a,@dptr
0345 FC        1482            mov     r4,a
0346 A3        1483            inc     dptr
0347 E0        1484            movx    a,@dptr
0348 FD        1485            mov     r5,a
0349 4C        1486            orl     a,r4
034A 6000      1487            jz      L010002?
034C           1488   ;        main.c:384: process_comp_x0 = dig_xyz1;
034C 90CD68    1489            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
034F EC        1490            mov     a,r4
0350 F0        1491            movx    @dptr,a
0351 A3        1492            inc     dptr
0352 ED        1493            mov     a,r5
0353 F0        1494            movx    @dptr,a
0354 8000      1495            sjmp    L010006?
0356           1496   L010002?:
0356           1497   ;        main.c:388: process_comp_x0 = 0;
0356 90CD68    1498            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0359 E4        1499            clr     a
035A F0        1500            movx    @dptr,a
035B A3        1501            inc     dptr
035C F0        1502            movx    @dptr,a
035D           1503   L010006?:
035D           1504   ;        main.c:390: if (process_comp_x0 != 0)
035D 90CD68    1505            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0360 E0        1506            movx    a,@dptr
0361 FC        1507            mov     r4,a
0362 A3        1508            inc     dptr
0363 E0        1509            movx    a,@dptr
0364 FD        1510            mov     r5,a
0365 4C        1511            orl     a,r4
0366 7000      1512            jnz     L010022?
0368 020000    1513            ljmp    L010008?
036B           1514   L010022?:
036B           1515   ;        main.c:393: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
036B 905350    1516            mov     dptr,#_dig_xyz1
036E E0        1517            movx    a,@dptr
036F FE        1518            mov     r6,a
0370 A3        1519            inc     dptr
0371 E0        1520            movx    a,@dptr
0372 FF        1521            mov     r7,a
0373 E4        1522            clr     a
0374 F8        1523            mov     r0,a
0375 EF        1524            mov     a,r7
0376 C8        1525            xch     a,r0
0377 5403      1526            anl     a,#0x03
0379 A2E0      1527            mov     c,acc.0
037B C8        1528            xch     a,r0
037C 13        1529            rrc     a
037D C8        1530            xch     a,r0
037E 13        1531            rrc     a
037F A2E0      1532            mov     c,acc.0
0381 C8        1533            xch     a,r0
0382 13        1534            rrc     a
0383 C8        1535            xch     a,r0
0384 13        1536            rrc     a
0385 C8        1537            xch     a,r0
0386 F9        1538            mov     r1,a
0387 EE        1539            mov     a,r6
0388 03        1540            rr      a
0389 03        1541            rr      a
038A 54C0      1542            anl     a,#0xc0
038C FF        1543            mov     r7,a
038D EE        1544            mov     a,r6
038E 03        1545            rr      a
038F 03        1546            rr      a
0390 543F      1547            anl     a,#0x3f
0392 48        1548            orl     a,r0
0393 F8        1549            mov     r0,a
0394 7E00      1550            mov     r6,#0x00
0396           1551   ;        main.c:394: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
0396 8C00      1552            mov     __divslong_PARM_2,r4
0398 8D01      1553            mov     (__divslong_PARM_2 + 1),r5
039A 750200    1554            mov     (__divslong_PARM_2 + 2),#0x00
039D 750300    1555            mov     (__divslong_PARM_2 + 3),#0x00
03A0 8E82      1556            mov     dpl,r6
03A2 8F83      1557            mov     dph,r7
03A4 88F0      1558            mov     b,r0
03A6 E9        1559            mov     a,r1
03A7 C002      1560            push    ar2
03A9 C003      1561            push    ar3
03AB 120000    1562            lcall   __divslong
03AE AC82      1563            mov     r4,dpl
03B0 E583      1564            mov     a,dph
03B2 24C0      1565            add     a,#0xc0
03B4 FD        1566            mov     r5,a
03B5           1567   ;        main.c:396: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
03B5 8C06      1568            mov     ar6,r4
03B7 8D07      1569            mov     ar7,r5
03B9 8EB8      1570            mov     _BMM150_compensate_x_sloc0_1_0,r6
03BB EF        1571            mov     a,r7
03BC F5B9      1572            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
03BE 33        1573            rlc     a
03BF 95E0      1574            subb    a,acc
03C1 F5BA      1575            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
03C3 F5BB      1576            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03C5 8C06      1577            mov     ar6,r4
03C7 8D07      1578            mov     ar7,r5
03C9 8E00      1579            mov     __mullong_PARM_2,r6
03CB EF        1580            mov     a,r7
03CC F501      1581            mov     (__mullong_PARM_2 + 1),a
03CE 33        1582            rlc     a
03CF 95E0      1583            subb    a,acc
03D1 F502      1584            mov     (__mullong_PARM_2 + 2),a
03D3 F503      1585            mov     (__mullong_PARM_2 + 3),a
03D5           1586   ;        main.c:397: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
03D5 85B882    1587            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03D8 85B983    1588            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03DB 85BAF0    1589            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03DE E5BB      1590            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03E0 C004      1591            push    ar4
03E2 C005      1592            push    ar5
03E4 120000    1593            lcall   __mullong
03E7 8582B8    1594            mov     _BMM150_compensate_x_sloc0_1_0,dpl
03EA 8583B9    1595            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
03ED 85F0BA    1596            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
03F0 F5BB      1597            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03F2 905390    1598            mov     dptr,#_dig_xy2
03F5 E0        1599            movx    a,@dptr
03F6 FE        1600            mov     r6,a
03F7 33        1601            rlc     a
03F8 95E0      1602            subb    a,acc
03FA FF        1603            mov     r7,a
03FB F8        1604            mov     r0,a
03FC F9        1605            mov     r1,a
03FD 750080    1606            mov     __divslong_PARM_2,#0x80
0400 E4        1607            clr     a
0401 F501      1608            mov     (__divslong_PARM_2 + 1),a
0403 F502      1609            mov     (__divslong_PARM_2 + 2),a
0405 F503      1610            mov     (__divslong_PARM_2 + 3),a
0407 85B882    1611            mov     dpl,_BMM150_compensate_x_sloc0_1_0
040A 85B983    1612            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
040D 85BAF0    1613            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
0410 E5BB      1614            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0412 C006      1615            push    ar6
0414 C007      1616            push    ar7
0416 C000      1617            push    ar0
0418 C001      1618            push    ar1
041A 120000    1619            lcall   __divslong
041D 858200    1620            mov     __mullong_PARM_2,dpl
0420 858301    1621            mov     (__mullong_PARM_2 + 1),dph
0423 85F002    1622            mov     (__mullong_PARM_2 + 2),b
0426 F503      1623            mov     (__mullong_PARM_2 + 3),a
0428 D001      1624            pop     ar1
042A D000      1625            pop     ar0
042C D007      1626            pop     ar7
042E D006      1627            pop     ar6
0430           1628   ;        main.c:398: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
0430 8E82      1629            mov     dpl,r6
0432 8F83      1630            mov     dph,r7
0434 88F0      1631            mov     b,r0
0436 E9        1632            mov     a,r1
0437 120000    1633            lcall   __mullong
043A 8582B8    1634            mov     _BMM150_compensate_x_sloc0_1_0,dpl
043D 8583B9    1635            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
0440 85F0BA    1636            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
0443 F5BB      1637            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
0445 D005      1638            pop     ar5
0447 D004      1639            pop     ar4
0449 9053D0    1640            mov     dptr,#_dig_xy1
044C E0        1641            movx    a,@dptr
044D FE        1642            mov     r6,a
044E E4        1643            clr     a
044F 5401      1644            anl     a,#0x01
0451 A2E0      1645            mov     c,acc.0
0453 CE        1646            xch     a,r6
0454 13        1647            rrc     a
0455 CE        1648            xch     a,r6
0456 13        1649            rrc     a
0457 CE        1650            xch     a,r6
0458 8E00      1651            mov     __mullong_PARM_2,r6
045A F501      1652            mov     (__mullong_PARM_2 + 1),a
045C 33        1653            rlc     a
045D 95E0      1654            subb    a,acc
045F F502      1655            mov     (__mullong_PARM_2 + 2),a
0461 F503      1656            mov     (__mullong_PARM_2 + 3),a
0463           1657   ;        main.c:399: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
0463 ED        1658            mov     a,r5
0464 33        1659            rlc     a
0465 95E0      1660            subb    a,acc
0467 FE        1661            mov     r6,a
0468           1662   ;        main.c:400: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
0468 8C82      1663            mov     dpl,r4
046A 8D83      1664            mov     dph,r5
046C 8EF0      1665            mov     b,r6
046E 120000    1666            lcall   __mullong
0471 AC82      1667            mov     r4,dpl
0473 AD83      1668            mov     r5,dph
0475 AEF0      1669            mov     r6,b
0477 FF        1670            mov     r7,a
0478 EC        1671            mov     a,r4
0479 25B8      1672            add     a,_BMM150_compensate_x_sloc0_1_0
047B FC        1673            mov     r4,a
047C ED        1674            mov     a,r5
047D 35B9      1675            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
047F FD        1676            mov     r5,a
0480 EE        1677            mov     a,r6
0481 35BA      1678            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
0483 FE        1679            mov     r6,a
0484 EF        1680            mov     a,r7
0485 35BB      1681            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0487 FF        1682            mov     r7,a
0488 750000    1683            mov     __divslong_PARM_2,#0x00
048B 750102    1684            mov     (__divslong_PARM_2 + 1),#0x02
048E 750200    1685            mov     (__divslong_PARM_2 + 2),#0x00
0491 750300    1686            mov     (__divslong_PARM_2 + 3),#0x00
0494 8C82      1687            mov     dpl,r4
0496 8D83      1688            mov     dph,r5
0498 8EF0      1689            mov     b,r6
049A EF        1690            mov     a,r7
049B 120000    1691            lcall   __divslong
049E AC82      1692            mov     r4,dpl
04A0 AD83      1693            mov     r5,dph
04A2 AEF0      1694            mov     r6,b
04A4 FF        1695            mov     r7,a
04A5 7410      1696            mov     a,#0x10
04A7 2E        1697            add     a,r6
04A8 FE        1698            mov     r6,a
04A9 E4        1699            clr     a
04AA 3F        1700            addc    a,r7
04AB FF        1701            mov     r7,a
04AC           1702   ;        main.c:401: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
04AC 905590    1703            mov     dptr,#_dig_x2
04AF E0        1704            movx    a,@dptr
04B0 F8        1705            mov     r0,a
04B1 33        1706            rlc     a
04B2 95E0      1707            subb    a,acc
04B4 F9        1708            mov     r1,a
04B5 74A0      1709            mov     a,#0xA0
04B7 28        1710            add     a,r0
04B8 F8        1711            mov     r0,a
04B9 E4        1712            clr     a
04BA 39        1713            addc    a,r1
04BB 8800      1714            mov     __mullong_PARM_2,r0
04BD F501      1715            mov     (__mullong_PARM_2 + 1),a
04BF 33        1716            rlc     a
04C0 95E0      1717            subb    a,acc
04C2 F502      1718            mov     (__mullong_PARM_2 + 2),a
04C4 F503      1719            mov     (__mullong_PARM_2 + 3),a
04C6           1720   ;        main.c:402: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
04C6 8C82      1721            mov     dpl,r4
04C8 8D83      1722            mov     dph,r5
04CA 8EF0      1723            mov     b,r6
04CC EF        1724            mov     a,r7
04CD 120000    1725            lcall   __mullong
04D0           1726   ;        main.c:403: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
04D0 750000    1727            mov     __divslong_PARM_2,#0x00
04D3 750110    1728            mov     (__divslong_PARM_2 + 1),#0x10
04D6 750200    1729            mov     (__divslong_PARM_2 + 2),#0x00
04D9 750300    1730            mov     (__divslong_PARM_2 + 3),#0x00
04DC 120000    1731            lcall   __divslong
04DF 858200    1732            mov     __mullong_PARM_2,dpl
04E2 858301    1733            mov     (__mullong_PARM_2 + 1),dph
04E5 85F002    1734            mov     (__mullong_PARM_2 + 2),b
04E8 F503      1735            mov     (__mullong_PARM_2 + 3),a
04EA D003      1736            pop     ar3
04EC D002      1737            pop     ar2
04EE EB        1738            mov     a,r3
04EF 33        1739            rlc     a
04F0 95E0      1740            subb    a,acc
04F2 FC        1741            mov     r4,a
04F3           1742   ;        main.c:404: retval = ((int16_t)(process_comp_x10 / 8192));
04F3 8A82      1743            mov     dpl,r2
04F5 8B83      1744            mov     dph,r3
04F7 8CF0      1745            mov     b,r4
04F9 120000    1746            lcall   __mullong
04FC 750000    1747            mov     __divslong_PARM_2,#0x00
04FF 750120    1748            mov     (__divslong_PARM_2 + 1),#0x20
0502 750200    1749            mov     (__divslong_PARM_2 + 2),#0x00
0505 750300    1750            mov     (__divslong_PARM_2 + 3),#0x00
0508 120000    1751            lcall   __divslong
050B AA82      1752            mov     r2,dpl
050D AB83      1753            mov     r3,dph
050F           1754   ;        main.c:405: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
050F 9055D0    1755            mov     dptr,#_dig_x1
0512 E0        1756            movx    a,@dptr
0513 FC        1757            mov     r4,a
0514 33        1758            rlc     a
0515 95E0      1759            subb    a,acc
0517 C4        1760            swap    a
0518 03        1761            rr      a
0519 54F8      1762            anl     a,#0xf8
051B CC        1763            xch     a,r4
051C C4        1764            swap    a
051D 03        1765            rr      a
051E CC        1766            xch     a,r4
051F 6C        1767            xrl     a,r4
0520 CC        1768            xch     a,r4
0521 54F8      1769            anl     a,#0xf8
0523 CC        1770            xch     a,r4
0524 6C        1771            xrl     a,r4
0525 FD        1772            mov     r5,a
0526 EC        1773            mov     a,r4
0527 2A        1774            add     a,r2
0528 F582      1775            mov     dpl,a
052A ED        1776            mov     a,r5
052B 3B        1777            addc    a,r3
052C F583      1778            mov     dph,a
052E 750010    1779            mov     __divsint_PARM_2,#0x10
0531 E4        1780            clr     a
0532 F501      1781            mov     (__divsint_PARM_2 + 1),a
0534 120000    1782            lcall   __divsint
0537 E582      1783            mov     a,dpl
0539 8583F0    1784            mov     b,dph
053C 90CD08    1785            mov     dptr,#_BMM150_compensate_x_retval_1_106
053F F0        1786            movx    @dptr,a
0540 A3        1787            inc     dptr
0541 E5F0      1788            mov     a,b
0543 F0        1789            movx    @dptr,a
0544 8000      1790            sjmp    L010012?
0546           1791   L010008?:
0546           1792   ;        main.c:408: retval = BMM150_OVERFLOW_OUTPUT; 
0546 90CD08    1793            mov     dptr,#_BMM150_compensate_x_retval_1_106
0549 E4        1794            clr     a
054A F0        1795            movx    @dptr,a
054B A3        1796            inc     dptr
054C 7480      1797            mov     a,#0x80
054E F0        1798            movx    @dptr,a
054F 8000      1799            sjmp    L010012?
0551           1800   L010011?:
0551           1801   ;        main.c:412: retval = BMM150_OVERFLOW_OUTPUT; 
0551 90CD08    1802            mov     dptr,#_BMM150_compensate_x_retval_1_106
0554 E4        1803            clr     a
0555 F0        1804            movx    @dptr,a
0556 A3        1805            inc     dptr
0557 7480      1806            mov     a,#0x80
0559 F0        1807            movx    @dptr,a
055A           1808   L010012?:
055A           1809   ;        main.c:414: return retval; 
055A 90CD08    1810            mov     dptr,#_BMM150_compensate_x_retval_1_106
055D E0        1811            movx    a,@dptr
055E FA        1812            mov     r2,a
055F A3        1813            inc     dptr
0560 E0        1814            movx    a,@dptr
0561 8A82      1815            mov     dpl,r2
0563 F583      1816            mov     dph,a
0565 22        1817            ret
0566           1818   ;------------------------------------------------------------
0566           1819   ;Allocation info for local variables in function 'BMM150_compensate_y'
0566           1820   ;------------------------------------------------------------
0566           1821   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
0566           1822   ;mag_data_y                Allocated to registers r2 r3 r4 
0566           1823   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
0566           1824   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_115'
0566           1825   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_115'
0566           1826   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_115'
0566           1827   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_115'
0566           1828   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_115'
0566           1829   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_115'
0566           1830   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_115'
0566           1831   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_115'
0566           1832   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_115'
0566           1833   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_115'
0566           1834   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_115'
0566           1835   ;------------------------------------------------------------
0566           1836   ;        main.c:417: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
0566           1837   ;        -----------------------------------------
0566           1838   ;         function BMM150_compensate_y
0566           1839   ;        -----------------------------------------
0566           1840   _BMM150_compensate_y:
0566           1841   ;        main.c:435: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
0566 ACF0      1842            mov     r4,b
0568 120000    1843            lcall   __gptrget
056B FA        1844            mov     r2,a
056C A3        1845            inc     dptr
056D 120000    1846            lcall   __gptrget
0570 FB        1847            mov     r3,a
0571 BA0028    1848            cjne    r2,#0x00,L011019?
0574 BBF028    1849            cjne    r3,#0xF0,L011019?
0577 020000    1850            ljmp    L011011?
057A           1851   L011019?:
057A           1852   ;        main.c:437: if (*data_rhall != 0)
057A AC00      1853            mov     r4,_BMM150_compensate_y_PARM_2
057C AD01      1854            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
057E AE02      1855            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
0580 8C82      1856            mov     dpl,r4
0582 8D83      1857            mov     dph,r5
0584 8EF0      1858            mov     b,r6
0586 120000    1859            lcall   __gptrget
0589 FC        1860            mov     r4,a
058A A3        1861            inc     dptr
058B 120000    1862            lcall   __gptrget
058E FD        1863            mov     r5,a
058F 4C        1864            orl     a,r4
0590 6000      1865            jz      L011005?
0592           1866   ;        main.c:440: process_comp_y0 = *data_rhall;
0592 90CE28    1867            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
0595 EC        1868            mov     a,r4
0596 F0        1869            movx    @dptr,a
0597 A3        1870            inc     dptr
0598 ED        1871            mov     a,r5
0599 F0        1872            movx    @dptr,a
059A 8000      1873            sjmp    L011006?
059C           1874   L011005?:
059C           1875   ;        main.c:442: else if (dig_xyz1 != 0)
059C 905350    1876            mov     dptr,#_dig_xyz1
059F E0        1877            movx    a,@dptr
05A0 FC        1878            mov     r4,a
05A1 A3        1879            inc     dptr
05A2 E0        1880            movx    a,@dptr
05A3 FD        1881            mov     r5,a
05A4 4C        1882            orl     a,r4
05A5 6000      1883            jz      L011002?
05A7           1884   ;        main.c:444: process_comp_y0 = dig_xyz1;
05A7 90CE28    1885            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
05AA EC        1886            mov     a,r4
05AB F0        1887            movx    @dptr,a
05AC A3        1888            inc     dptr
05AD ED        1889            mov     a,r5
05AE F0        1890            movx    @dptr,a
05AF 8000      1891            sjmp    L011006?
05B1           1892   L011002?:
05B1           1893   ;        main.c:448: process_comp_y0 = 0;
05B1 90CE28    1894            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
05B4 E4        1895            clr     a
05B5 F0        1896            movx    @dptr,a
05B6 A3        1897            inc     dptr
05B7 F0        1898            movx    @dptr,a
05B8           1899   L011006?:
05B8           1900   ;        main.c:451: if (process_comp_y0 != 0)
05B8 90CE28    1901            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
05BB E0        1902            movx    a,@dptr
05BC FC        1903            mov     r4,a
05BD A3        1904            inc     dptr
05BE E0        1905            movx    a,@dptr
05BF FD        1906            mov     r5,a
05C0 4C        1907            orl     a,r4
05C1 7000      1908            jnz     L011022?
05C3 020000    1909            ljmp    L011008?
05C6           1910   L011022?:
05C6           1911   ;        main.c:454: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
05C6 905350    1912            mov     dptr,#_dig_xyz1
05C9 E0        1913            movx    a,@dptr
05CA FE        1914            mov     r6,a
05CB A3        1915            inc     dptr
05CC E0        1916            movx    a,@dptr
05CD FF        1917            mov     r7,a
05CE E4        1918            clr     a
05CF F8        1919            mov     r0,a
05D0 EF        1920            mov     a,r7
05D1 C8        1921            xch     a,r0
05D2 5403      1922            anl     a,#0x03
05D4 A2E0      1923            mov     c,acc.0
05D6 C8        1924            xch     a,r0
05D7 13        1925            rrc     a
05D8 C8        1926            xch     a,r0
05D9 13        1927            rrc     a
05DA A2E0      1928            mov     c,acc.0
05DC C8        1929            xch     a,r0
05DD 13        1930            rrc     a
05DE C8        1931            xch     a,r0
05DF 13        1932            rrc     a
05E0 C8        1933            xch     a,r0
05E1 F9        1934            mov     r1,a
05E2 EE        1935            mov     a,r6
05E3 03        1936            rr      a
05E4 03        1937            rr      a
05E5 54C0      1938            anl     a,#0xc0
05E7 FF        1939            mov     r7,a
05E8 EE        1940            mov     a,r6
05E9 03        1941            rr      a
05EA 03        1942            rr      a
05EB 543F      1943            anl     a,#0x3f
05ED 48        1944            orl     a,r0
05EE F8        1945            mov     r0,a
05EF 7E00      1946            mov     r6,#0x00
05F1 8C00      1947            mov     __divslong_PARM_2,r4
05F3 8D01      1948            mov     (__divslong_PARM_2 + 1),r5
05F5 750200    1949            mov     (__divslong_PARM_2 + 2),#0x00
05F8 750300    1950            mov     (__divslong_PARM_2 + 3),#0x00
05FB           1951   ;        main.c:455: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
05FB 8E82      1952            mov     dpl,r6
05FD 8F83      1953            mov     dph,r7
05FF 88F0      1954            mov     b,r0
0601 E9        1955            mov     a,r1
0602 C002      1956            push    ar2
0604 C003      1957            push    ar3
0606 120000    1958            lcall   __divslong
0609 AC82      1959            mov     r4,dpl
060B E583      1960            mov     a,dph
060D 24C0      1961            add     a,#0xc0
060F FD        1962            mov     r5,a
0610           1963   ;        main.c:457: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
0610 8C06      1964            mov     ar6,r4
0612 8D07      1965            mov     ar7,r5
0614 8E08      1966            mov     _BMM150_compensate_y_sloc0_1_0,r6
0616 EF        1967            mov     a,r7
0617 F509      1968            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
0619 33        1969            rlc     a
061A 95E0      1970            subb    a,acc
061C F50A      1971            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
061E F50B      1972            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0620 8C06      1973            mov     ar6,r4
0622 8D07      1974            mov     ar7,r5
0624 8E00      1975            mov     __mullong_PARM_2,r6
0626 EF        1976            mov     a,r7
0627 F501      1977            mov     (__mullong_PARM_2 + 1),a
0629 33        1978            rlc     a
062A 95E0      1979            subb    a,acc
062C F502      1980            mov     (__mullong_PARM_2 + 2),a
062E F503      1981            mov     (__mullong_PARM_2 + 3),a
0630           1982   ;        main.c:458: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
0630 850882    1983            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0633 850983    1984            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0636 850AF0    1985            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
0639 E50B      1986            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
063B C004      1987            push    ar4
063D C005      1988            push    ar5
063F 120000    1989            lcall   __mullong
0642 858208    1990            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0645 858309    1991            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
0648 85F00A    1992            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
064B F50B      1993            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
064D 905390    1994            mov     dptr,#_dig_xy2
0650 E0        1995            movx    a,@dptr
0651 FE        1996            mov     r6,a
0652 33        1997            rlc     a
0653 95E0      1998            subb    a,acc
0655 FF        1999            mov     r7,a
0656 F8        2000            mov     r0,a
0657 F9        2001            mov     r1,a
0658 750080    2002            mov     __divslong_PARM_2,#0x80
065B E4        2003            clr     a
065C F501      2004            mov     (__divslong_PARM_2 + 1),a
065E F502      2005            mov     (__divslong_PARM_2 + 2),a
0660 F503      2006            mov     (__divslong_PARM_2 + 3),a
0662 850882    2007            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0665 850983    2008            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0668 850AF0    2009            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
066B E50B      2010            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
066D C006      2011            push    ar6
066F C007      2012            push    ar7
0671 C000      2013            push    ar0
0673 C001      2014            push    ar1
0675 120000    2015            lcall   __divslong
0678 858200    2016            mov     __mullong_PARM_2,dpl
067B 858301    2017            mov     (__mullong_PARM_2 + 1),dph
067E 85F002    2018            mov     (__mullong_PARM_2 + 2),b
0681 F503      2019            mov     (__mullong_PARM_2 + 3),a
0683 D001      2020            pop     ar1
0685 D000      2021            pop     ar0
0687 D007      2022            pop     ar7
0689 D006      2023            pop     ar6
068B           2024   ;        main.c:459: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
068B 8E82      2025            mov     dpl,r6
068D 8F83      2026            mov     dph,r7
068F 88F0      2027            mov     b,r0
0691 E9        2028            mov     a,r1
0692 120000    2029            lcall   __mullong
0695 858208    2030            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0698 858309    2031            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
069B 85F00A    2032            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
069E F50B      2033            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
06A0 D005      2034            pop     ar5
06A2 D004      2035            pop     ar4
06A4 9053D0    2036            mov     dptr,#_dig_xy1
06A7 E0        2037            movx    a,@dptr
06A8 FE        2038            mov     r6,a
06A9 E4        2039            clr     a
06AA 5401      2040            anl     a,#0x01
06AC A2E0      2041            mov     c,acc.0
06AE CE        2042            xch     a,r6
06AF 13        2043            rrc     a
06B0 CE        2044            xch     a,r6
06B1 13        2045            rrc     a
06B2 CE        2046            xch     a,r6
06B3 8E00      2047            mov     __mullong_PARM_2,r6
06B5 F501      2048            mov     (__mullong_PARM_2 + 1),a
06B7 33        2049            rlc     a
06B8 95E0      2050            subb    a,acc
06BA F502      2051            mov     (__mullong_PARM_2 + 2),a
06BC F503      2052            mov     (__mullong_PARM_2 + 3),a
06BE           2053   ;        main.c:460: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
06BE ED        2054            mov     a,r5
06BF 33        2055            rlc     a
06C0 95E0      2056            subb    a,acc
06C2 FE        2057            mov     r6,a
06C3 8C82      2058            mov     dpl,r4
06C5 8D83      2059            mov     dph,r5
06C7 8EF0      2060            mov     b,r6
06C9 120000    2061            lcall   __mullong
06CC AC82      2062            mov     r4,dpl
06CE AD83      2063            mov     r5,dph
06D0 AEF0      2064            mov     r6,b
06D2 FF        2065            mov     r7,a
06D3 EC        2066            mov     a,r4
06D4 2508      2067            add     a,_BMM150_compensate_y_sloc0_1_0
06D6 FC        2068            mov     r4,a
06D7 ED        2069            mov     a,r5
06D8 3509      2070            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
06DA FD        2071            mov     r5,a
06DB EE        2072            mov     a,r6
06DC 350A      2073            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
06DE FE        2074            mov     r6,a
06DF EF        2075            mov     a,r7
06E0 350B      2076            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
06E2 FF        2077            mov     r7,a
06E3 750000    2078            mov     __divslong_PARM_2,#0x00
06E6 750102    2079            mov     (__divslong_PARM_2 + 1),#0x02
06E9 750200    2080            mov     (__divslong_PARM_2 + 2),#0x00
06EC 750300    2081            mov     (__divslong_PARM_2 + 3),#0x00
06EF           2082   ;        main.c:461: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
06EF 8C82      2083            mov     dpl,r4
06F1 8D83      2084            mov     dph,r5
06F3 8EF0      2085            mov     b,r6
06F5 EF        2086            mov     a,r7
06F6 120000    2087            lcall   __divslong
06F9 AC82      2088            mov     r4,dpl
06FB AD83      2089            mov     r5,dph
06FD AEF0      2090            mov     r6,b
06FF FF        2091            mov     r7,a
0700 905510    2092            mov     dptr,#_dig_y2
0703 E0        2093            movx    a,@dptr
0704 F8        2094            mov     r0,a
0705 33        2095            rlc     a
0706 95E0      2096            subb    a,acc
0708 F9        2097            mov     r1,a
0709 74A0      2098            mov     a,#0xA0
070B 28        2099            add     a,r0
070C F8        2100            mov     r0,a
070D E4        2101            clr     a
070E 39        2102            addc    a,r1
070F 8800      2103            mov     __mullong_PARM_2,r0
0711 F501      2104            mov     (__mullong_PARM_2 + 1),a
0713 33        2105            rlc     a
0714 95E0      2106            subb    a,acc
0716 F502      2107            mov     (__mullong_PARM_2 + 2),a
0718 F503      2108            mov     (__mullong_PARM_2 + 3),a
071A           2109   ;        main.c:462: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
071A 7410      2110            mov     a,#0x10
071C 2E        2111            add     a,r6
071D FE        2112            mov     r6,a
071E E4        2113            clr     a
071F 3F        2114            addc    a,r7
0720 8C82      2115            mov     dpl,r4
0722 8D83      2116            mov     dph,r5
0724 8EF0      2117            mov     b,r6
0726 120000    2118            lcall   __mullong
0729           2119   ;        main.c:463: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
0729 750000    2120            mov     __divslong_PARM_2,#0x00
072C 750110    2121            mov     (__divslong_PARM_2 + 1),#0x10
072F 750200    2122            mov     (__divslong_PARM_2 + 2),#0x00
0732 750300    2123            mov     (__divslong_PARM_2 + 3),#0x00
0735 120000    2124            lcall   __divslong
0738 858200    2125            mov     __mullong_PARM_2,dpl
073B 858301    2126            mov     (__mullong_PARM_2 + 1),dph
073E 85F002    2127            mov     (__mullong_PARM_2 + 2),b
0741 F503      2128            mov     (__mullong_PARM_2 + 3),a
0743 D003      2129            pop     ar3
0745 D002      2130            pop     ar2
0747 EB        2131            mov     a,r3
0748 33        2132            rlc     a
0749 95E0      2133            subb    a,acc
074B FC        2134            mov     r4,a
074C           2135   ;        main.c:464: retval = (int16_t)(process_comp_y9 / 8192);
074C 8A82      2136            mov     dpl,r2
074E 8B83      2137            mov     dph,r3
0750 8CF0      2138            mov     b,r4
0752 120000    2139            lcall   __mullong
0755 750000    2140            mov     __divslong_PARM_2,#0x00
0758 750120    2141            mov     (__divslong_PARM_2 + 1),#0x20
075B 750200    2142            mov     (__divslong_PARM_2 + 2),#0x00
075E 750300    2143            mov     (__divslong_PARM_2 + 3),#0x00
0761 120000    2144            lcall   __divslong
0764 AA82      2145            mov     r2,dpl
0766 AB83      2146            mov     r3,dph
0768           2147   ;        main.c:465: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
0768 905550    2148            mov     dptr,#_dig_y1
076B E0        2149            movx    a,@dptr
076C FC        2150            mov     r4,a
076D 33        2151            rlc     a
076E 95E0      2152            subb    a,acc
0770 C4        2153            swap    a
0771 03        2154            rr      a
0772 54F8      2155            anl     a,#0xf8
0774 CC        2156            xch     a,r4
0775 C4        2157            swap    a
0776 03        2158            rr      a
0777 CC        2159            xch     a,r4
0778 6C        2160            xrl     a,r4
0779 CC        2161            xch     a,r4
077A 54F8      2162            anl     a,#0xf8
077C CC        2163            xch     a,r4
077D 6C        2164            xrl     a,r4
077E FD        2165            mov     r5,a
077F EC        2166            mov     a,r4
0780 2A        2167            add     a,r2
0781 F582      2168            mov     dpl,a
0783 ED        2169            mov     a,r5
0784 3B        2170            addc    a,r3
0785 F583      2171            mov     dph,a
0787 750010    2172            mov     __divsint_PARM_2,#0x10
078A E4        2173            clr     a
078B F501      2174            mov     (__divsint_PARM_2 + 1),a
078D 120000    2175            lcall   __divsint
0790 E582      2176            mov     a,dpl
0792 8583F0    2177            mov     b,dph
0795 90CDC8    2178            mov     dptr,#_BMM150_compensate_y_retval_1_115
0798 F0        2179            movx    @dptr,a
0799 A3        2180            inc     dptr
079A E5F0      2181            mov     a,b
079C F0        2182            movx    @dptr,a
079D 8000      2183            sjmp    L011012?
079F           2184   L011008?:
079F           2185   ;        main.c:469: retval = BMM150_OVERFLOW_OUTPUT;
079F 90CDC8    2186            mov     dptr,#_BMM150_compensate_y_retval_1_115
07A2 E4        2187            clr     a
07A3 F0        2188            movx    @dptr,a
07A4 A3        2189            inc     dptr
07A5 7480      2190            mov     a,#0x80
07A7 F0        2191            movx    @dptr,a
07A8 8000      2192            sjmp    L011012?
07AA           2193   L011011?:
07AA           2194   ;        main.c:475: retval = BMM150_OVERFLOW_OUTPUT;
07AA 90CDC8    2195            mov     dptr,#_BMM150_compensate_y_retval_1_115
07AD E4        2196            clr     a
07AE F0        2197            movx    @dptr,a
07AF A3        2198            inc     dptr
07B0 7480      2199            mov     a,#0x80
07B2 F0        2200            movx    @dptr,a
07B3           2201   L011012?:
07B3           2202   ;        main.c:478: return retval;
07B3 90CDC8    2203            mov     dptr,#_BMM150_compensate_y_retval_1_115
07B6 E0        2204            movx    a,@dptr
07B7 FA        2205            mov     r2,a
07B8 A3        2206            inc     dptr
07B9 E0        2207            movx    a,@dptr
07BA 8A82      2208            mov     dpl,r2
07BC F583      2209            mov     dph,a
07BE 22        2210            ret
07BF           2211   ;------------------------------------------------------------
07BF           2212   ;Allocation info for local variables in function 'BMM150_Read_Data'
07BF           2213   ;------------------------------------------------------------
07BF           2214   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
07BF           2215   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_123'
07BF           2216   ;raw_x_lsb                 Allocated with name '_BMM150_Read_Data_raw_x_lsb_1_124'
07BF           2217   ;raw_x_msb                 Allocated with name '_BMM150_Read_Data_raw_x_msb_1_124'
07BF           2218   ;raw_y_lsb                 Allocated with name '_BMM150_Read_Data_raw_y_lsb_1_124'
07BF           2219   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_124'
07BF           2220   ;raw_rhall_lsb             Allocated with name '_BMM150_Read_Data_raw_rhall_lsb_1_124'
07BF           2221   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_124'
07BF           2222   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_124'
07BF           2223   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_124'
07BF           2224   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_124'
07BF           2225   ;msb_data                  Allocated with name '_BMM150_Read_Data_msb_data_1_124'
07BF           2226   ;------------------------------------------------------------
07BF           2227   ;        main.c:481: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y)
07BF           2228   ;        -----------------------------------------
07BF           2229   ;         function BMM150_Read_Data
07BF           2230   ;        -----------------------------------------
07BF           2231   _BMM150_Read_Data:
07BF 858258    2232            mov     _BMM150_Read_Data_mag_x_1_123,dpl
07C2 858359    2233            mov     (_BMM150_Read_Data_mag_x_1_123 + 1),dph
07C5 85F05A    2234            mov     (_BMM150_Read_Data_mag_x_1_123 + 2),b
07C8           2235   ;        main.c:488: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
07C8 758242    2236            mov     dpl,#0x42
07CB 120000    2237            lcall   _SPI_read
07CE AD82      2238            mov     r5,dpl
07D0           2239   ;        main.c:489: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
07D0 758243    2240            mov     dpl,#0x43
07D3 C005      2241            push    ar5
07D5 120000    2242            lcall   _SPI_read
07D8 AE82      2243            mov     r6,dpl
07DA           2244   ;        main.c:490: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
07DA 758244    2245            mov     dpl,#0x44
07DD C006      2246            push    ar6
07DF 120000    2247            lcall   _SPI_read
07E2 AF82      2248            mov     r7,dpl
07E4           2249   ;        main.c:491: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
07E4 758245    2250            mov     dpl,#0x45
07E7 C007      2251            push    ar7
07E9 120000    2252            lcall   _SPI_read
07EC A882      2253            mov     r0,dpl
07EE           2254   ;        main.c:494: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
07EE 758248    2255            mov     dpl,#0x48
07F1 C000      2256            push    ar0
07F3 120000    2257            lcall   _SPI_read
07F6 A982      2258            mov     r1,dpl
07F8           2259   ;        main.c:495: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
07F8 758249    2260            mov     dpl,#0x49
07FB C001      2261            push    ar1
07FD 120000    2262            lcall   _SPI_read
0800 AA82      2263            mov     r2,dpl
0802 D001      2264            pop     ar1
0804 D000      2265            pop     ar0
0806 D007      2266            pop     ar7
0808 D006      2267            pop     ar6
080A D005      2268            pop     ar5
080C           2269   ;        main.c:499: raw_x_lsb = ((raw_x_lsb & 0b_1111_1000)) >> 3;
080C 5305F8    2270            anl     ar5,#0xF8
080F ED        2271            mov     a,r5
0810 C4        2272            swap    a
0811 23        2273            rl      a
0812 541F      2274            anl     a,#0x1f
0814 FD        2275            mov     r5,a
0815           2276   ;        main.c:500: msb_data = ((int16_t)((int8_t)raw_x_msb)) << 5; 
0815 EE        2277            mov     a,r6
0816 33        2278            rlc     a
0817 95E0      2279            subb    a,acc
0819 C4        2280            swap    a
081A 23        2281            rl      a
081B 54E0      2282            anl     a,#0xe0
081D CE        2283            xch     a,r6
081E C4        2284            swap    a
081F 23        2285            rl      a
0820 CE        2286            xch     a,r6
0821 6E        2287            xrl     a,r6
0822 CE        2288            xch     a,r6
0823 54E0      2289            anl     a,#0xe0
0825 CE        2290            xch     a,r6
0826 6E        2291            xrl     a,r6
0827 FB        2292            mov     r3,a
0828           2293   ;        main.c:501: x_val = (int16_t)(msb_data | raw_x_lsb);
0828 7C00      2294            mov     r4,#0x00
082A 90CE78    2295            mov     dptr,#_BMM150_Read_Data_x_val_1_124
082D ED        2296            mov     a,r5
082E 4E        2297            orl     a,r6
082F F0        2298            movx    @dptr,a
0830 EC        2299            mov     a,r4
0831 4B        2300            orl     a,r3
0832 A3        2301            inc     dptr
0833 F0        2302            movx    @dptr,a
0834           2303   ;        main.c:504: raw_y_lsb = ((raw_y_lsb & 0b_1111_1000)) >> 3;
0834 5307F8    2304            anl     ar7,#0xF8
0837 EF        2305            mov     a,r7
0838 C4        2306            swap    a
0839 23        2307            rl      a
083A 541F      2308            anl     a,#0x1f
083C FF        2309            mov     r7,a
083D           2310   ;        main.c:505: msb_data = ((int16_t)((int8_t)raw_y_msb)) << 5; 
083D E8        2311            mov     a,r0
083E 33        2312            rlc     a
083F 95E0      2313            subb    a,acc
0841 C4        2314            swap    a
0842 23        2315            rl      a
0843 54E0      2316            anl     a,#0xe0
0845 C8        2317            xch     a,r0
0846 C4        2318            swap    a
0847 23        2319            rl      a
0848 C8        2320            xch     a,r0
0849 68        2321            xrl     a,r0
084A C8        2322            xch     a,r0
084B 54E0      2323            anl     a,#0xe0
084D C8        2324            xch     a,r0
084E 68        2325            xrl     a,r0
084F FB        2326            mov     r3,a
0850           2327   ;        main.c:506: y_val = (int16_t)(msb_data | raw_y_lsb);
0850 7C00      2328            mov     r4,#0x00
0852 90CEC8    2329            mov     dptr,#_BMM150_Read_Data_y_val_1_124
0855 EF        2330            mov     a,r7
0856 48        2331            orl     a,r0
0857 F0        2332            movx    @dptr,a
0858 EC        2333            mov     a,r4
0859 4B        2334            orl     a,r3
085A A3        2335            inc     dptr
085B F0        2336            movx    @dptr,a
085C           2337   ;        main.c:514: raw_rhall_lsb = ((raw_rhall_lsb & 0xFC) >> 2);
085C 5301FC    2338            anl     ar1,#0xFC
085F E9        2339            mov     a,r1
0860 03        2340            rr      a
0861 03        2341            rr      a
0862 543F      2342            anl     a,#0x3f
0864 F9        2343            mov     r1,a
0865           2344   ;        main.c:515: rhall_val = (uint16_t)(((uint16_t)raw_rhall_msb << 6) | raw_rhall_lsb);
0865 E4        2345            clr     a
0866 5403      2346            anl     a,#0x03
0868 A2E0      2347            mov     c,acc.0
086A CA        2348            xch     a,r2
086B 13        2349            rrc     a
086C CA        2350            xch     a,r2
086D 13        2351            rrc     a
086E A2E0      2352            mov     c,acc.0
0870 CA        2353            xch     a,r2
0871 13        2354            rrc     a
0872 CA        2355            xch     a,r2
0873 13        2356            rrc     a
0874 CA        2357            xch     a,r2
0875 FB        2358            mov     r3,a
0876 7C00      2359            mov     r4,#0x00
0878 90CF28    2360            mov     dptr,#_BMM150_Read_Data_rhall_val_1_124
087B E9        2361            mov     a,r1
087C 4A        2362            orl     a,r2
087D F0        2363            movx    @dptr,a
087E EC        2364            mov     a,r4
087F 4B        2365            orl     a,r3
0880 A3        2366            inc     dptr
0881 F0        2367            movx    @dptr,a
0882           2368   ;        main.c:518: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
0882 755028    2369            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_124
0885 7551CF    2370            mov     (_BMM150_compensate_x_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_124 >> 8)
0888 755200    2371            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x00
088B 90CE78    2372            mov     dptr,#_BMM150_Read_Data_x_val_1_124
088E 75F000    2373            mov     b,#0x00
0891 120000    2374            lcall   _BMM150_compensate_x
0894 AA82      2375            mov     r2,dpl
0896 AB83      2376            mov     r3,dph
0898 855882    2377            mov     dpl,_BMM150_Read_Data_mag_x_1_123
089B 855983    2378            mov     dph,(_BMM150_Read_Data_mag_x_1_123 + 1)
089E 855AF0    2379            mov     b,(_BMM150_Read_Data_mag_x_1_123 + 2)
08A1 EA        2380            mov     a,r2
08A2 120000    2381            lcall   __gptrput
08A5 A3        2382            inc     dptr
08A6 EB        2383            mov     a,r3
08A7 120000    2384            lcall   __gptrput
08AA           2385   ;        main.c:519: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
08AA AAB0      2386            mov     r2,_BMM150_Read_Data_PARM_2
08AC ABB1      2387            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
08AE ACB2      2388            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
08B0 750028    2389            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_124
08B3 7501CF    2390            mov     (_BMM150_compensate_y_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_124 >> 8)
08B6 750200    2391            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x00
08B9 90CEC8    2392            mov     dptr,#_BMM150_Read_Data_y_val_1_124
08BC 75F000    2393            mov     b,#0x00
08BF C002      2394            push    ar2
08C1 C003      2395            push    ar3
08C3 C004      2396            push    ar4
08C5 120000    2397            lcall   _BMM150_compensate_y
08C8 AD82      2398            mov     r5,dpl
08CA AE83      2399            mov     r6,dph
08CC D004      2400            pop     ar4
08CE D003      2401            pop     ar3
08D0 D002      2402            pop     ar2
08D2 8A82      2403            mov     dpl,r2
08D4 8B83      2404            mov     dph,r3
08D6 8CF0      2405            mov     b,r4
08D8 ED        2406            mov     a,r5
08D9 120000    2407            lcall   __gptrput
08DC A3        2408            inc     dptr
08DD EE        2409            mov     a,r6
08DE 020000    2410            ljmp    __gptrput
08E1           2411   ;------------------------------------------------------------
08E1           2412   ;Allocation info for local variables in function 'UART1_Init'
08E1           2413   ;------------------------------------------------------------
08E1           2414   ;baudrate                  Allocated to registers r2 r3 r4 r5 
08E1           2415   ;------------------------------------------------------------
08E1           2416   ;        main.c:525: void UART1_Init (unsigned long baudrate)
08E1           2417   ;        -----------------------------------------
08E1           2418   ;         function UART1_Init
08E1           2419   ;        -----------------------------------------
08E1           2420   _UART1_Init:
08E1 AA82      2421            mov     r2,dpl
08E3 AB83      2422            mov     r3,dph
08E5 ACF0      2423            mov     r4,b
08E7 FD        2424            mov     r5,a
08E8           2425   ;        main.c:527: SFRPAGE = 0x20;
08E8 75A720    2426            mov     _SFRPAGE,#0x20
08EB           2427   ;        main.c:528: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
08EB 75930C    2428            mov     _SMOD1,#0x0C
08EE           2429   ;        main.c:529: SCON1 = 0x10;
08EE 75C810    2430            mov     _SCON1,#0x10
08F1           2431   ;        main.c:530: SBCON1 =0x00;   // disable baud rate generator
08F1 759400    2432            mov     _SBCON1,#0x00
08F4           2433   ;        main.c:531: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
08F4 8A00      2434            mov     __divulong_PARM_2,r2
08F6 8B01      2435            mov     (__divulong_PARM_2 + 1),r3
08F8 8C02      2436            mov     (__divulong_PARM_2 + 2),r4
08FA 8D03      2437            mov     (__divulong_PARM_2 + 3),r5
08FC 90A200    2438            mov     dptr,#0xA200
08FF 75F04A    2439            mov     b,#0x4A
0902 7404      2440            mov     a,#0x04
0904 120000    2441            lcall   __divulong
0907 AA82      2442            mov     r2,dpl
0909 AB83      2443            mov     r3,dph
090B ACF0      2444            mov     r4,b
090D FD        2445            mov     r5,a
090E 750018    2446            mov     __divulong_PARM_2,#0x18
0911 E4        2447            clr     a
0912 F501      2448            mov     (__divulong_PARM_2 + 1),a
0914 F502      2449            mov     (__divulong_PARM_2 + 2),a
0916 F503      2450            mov     (__divulong_PARM_2 + 3),a
0918 8A82      2451            mov     dpl,r2
091A 8B83      2452            mov     dph,r3
091C 8CF0      2453            mov     b,r4
091E ED        2454            mov     a,r5
091F 120000    2455            lcall   __divulong
0922 AA82      2456            mov     r2,dpl
0924 AB83      2457            mov     r3,dph
0926 ACF0      2458            mov     r4,b
0928 FD        2459            mov     r5,a
0929 E4        2460            clr     a
092A C3        2461            clr     c
092B 9A        2462            subb    a,r2
092C FA        2463            mov     r2,a
092D E4        2464            clr     a
092E 9B        2465            subb    a,r3
092F FB        2466            mov     r3,a
0930 7401      2467            mov     a,#0x01
0932 9C        2468            subb    a,r4
0933 E4        2469            clr     a
0934 9D        2470            subb    a,r5
0935 8A95      2471            mov     _SBRL1,r2
0937 8B96      2472            mov     (_SBRL1 >> 8),r3
0939           2473   ;        main.c:532: TI1 = 1; // indicate ready for TX
0939 D2C9      2474            setb    _TI1
093B           2475   ;        main.c:533: SBCON1 |= 0x40;   // enable baud rate generator
093B 439440    2476            orl     _SBCON1,#0x40
093E           2477   ;        main.c:534: SFRPAGE = 0x00;
093E 75A700    2478            mov     _SFRPAGE,#0x00
0941 22        2479            ret
0942           2480   ;------------------------------------------------------------
0942           2481   ;Allocation info for local variables in function 'putchar1'
0942           2482   ;------------------------------------------------------------
0942           2483   ;c                         Allocated to registers r2 
0942           2484   ;------------------------------------------------------------
0942           2485   ;        main.c:537: void putchar1 (char c) 
0942           2486   ;        -----------------------------------------
0942           2487   ;         function putchar1
0942           2488   ;        -----------------------------------------
0942           2489   _putchar1:
0942 AA82      2490            mov     r2,dpl
0944           2491   ;        main.c:539: SFRPAGE = 0x20;
0944 75A720    2492            mov     _SFRPAGE,#0x20
0947           2493   ;        main.c:540: while (!TI1);
0947           2494   L014001?:
0947           2495   ;        main.c:541: TI1=0;
0947 10C938    2496            jbc     _TI1,L014008?
094A 8000      2497            sjmp    L014001?
094C           2498   L014008?:
094C           2499   ;        main.c:542: SBUF1 = c;
094C 8A92      2500            mov     _SBUF1,r2
094E           2501   ;        main.c:543: SFRPAGE = 0x00;
094E 75A700    2502            mov     _SFRPAGE,#0x00
0951 22        2503            ret
0952           2504   ;------------------------------------------------------------
0952           2505   ;Allocation info for local variables in function 'sendstr1'
0952           2506   ;------------------------------------------------------------
0952           2507   ;s                         Allocated to registers r2 r3 r4 
0952           2508   ;------------------------------------------------------------
0952           2509   ;        main.c:546: void sendstr1 (char * s)
0952           2510   ;        -----------------------------------------
0952           2511   ;         function sendstr1
0952           2512   ;        -----------------------------------------
0952           2513   _sendstr1:
0952 AA82      2514            mov     r2,dpl
0954 AB83      2515            mov     r3,dph
0956 ACF0      2516            mov     r4,b
0958           2517   ;        main.c:548: while(*s)
0958           2518   L015001?:
0958 8A82      2519            mov     dpl,r2
095A 8B83      2520            mov     dph,r3
095C 8CF0      2521            mov     b,r4
095E 120000    2522            lcall   __gptrget
0961 FD        2523            mov     r5,a
0962 6000      2524            jz      L015004?
0964           2525   ;        main.c:550: putchar1(*s);
0964 8D82      2526            mov     dpl,r5
0966 C002      2527            push    ar2
0968 C003      2528            push    ar3
096A C004      2529            push    ar4
096C 120000    2530            lcall   _putchar1
096F D004      2531            pop     ar4
0971 D003      2532            pop     ar3
0973 D002      2533            pop     ar2
0975           2534   ;        main.c:551: s++;        
0975 0A        2535            inc     r2
0976 BA0078    2536            cjne    r2,#0x00,L015001?
0979 0B        2537            inc     r3
097A 8000      2538            sjmp    L015001?
097C           2539   L015004?:
097C 22        2540            ret
097D           2541   ;------------------------------------------------------------
097D           2542   ;Allocation info for local variables in function 'getchar1'
097D           2543   ;------------------------------------------------------------
097D           2544   ;c                         Allocated with name '_getchar1_c_1_133'
097D           2545   ;------------------------------------------------------------
097D           2546   ;        main.c:555: char getchar1 (void)
097D           2547   ;        -----------------------------------------
097D           2548   ;         function getchar1
097D           2549   ;        -----------------------------------------
097D           2550   _getchar1:
097D           2551   ;        main.c:558: SFRPAGE = 0x20;
097D 75A720    2552            mov     _SFRPAGE,#0x20
0980           2553   ;        main.c:559: while (!RI1);
0980           2554   L016001?:
0980           2555   ;        main.c:560: RI1=0;
0980 10C838    2556            jbc     _RI1,L016008?
0983 8000      2557            sjmp    L016001?
0985           2558   L016008?:
0985           2559   ;        main.c:562: SCON1&=0b_0011_1111;
0985 53C83F    2560            anl     _SCON1,#0x3F
0988           2561   ;        main.c:563: c = SBUF1;
0988 859282    2562            mov     dpl,_SBUF1
098B           2563   ;        main.c:564: SFRPAGE = 0x00;
098B 75A700    2564            mov     _SFRPAGE,#0x00
098E           2565   ;        main.c:565: return (c);
098E 22        2566            ret
098F           2567   ;------------------------------------------------------------
098F           2568   ;Allocation info for local variables in function 'getchar1_with_timeout'
098F           2569   ;------------------------------------------------------------
098F           2570   ;c                         Allocated with name '_getchar1_with_timeout_c_1_135'
098F           2571   ;timeout                   Allocated with name '_getchar1_with_timeout_timeout_1_135'
098F           2572   ;------------------------------------------------------------
098F           2573   ;        main.c:568: char getchar1_with_timeout (void)
098F           2574   ;        -----------------------------------------
098F           2575   ;         function getchar1_with_timeout
098F           2576   ;        -----------------------------------------
098F           2577   _getchar1_with_timeout:
098F           2578   ;        main.c:572: SFRPAGE = 0x20;
098F 75A720    2579            mov     _SFRPAGE,#0x20
0992           2580   ;        main.c:574: while (!RI1)
0992 7A00      2581            mov     r2,#0x00
0994 7B00      2582            mov     r3,#0x00
0996           2583   L017003?:
0996 20C8B8    2584            jb      _RI1,L017005?
0999           2585   ;        main.c:576: SFRPAGE = 0x00;
0999 75A700    2586            mov     _SFRPAGE,#0x00
099C           2587   ;        main.c:577: Timer3us(20);
099C 758214    2588            mov     dpl,#0x14
099F C002      2589            push    ar2
09A1 C003      2590            push    ar3
09A3 120000    2591            lcall   _Timer3us
09A6 D003      2592            pop     ar3
09A8 D002      2593            pop     ar2
09AA           2594   ;        main.c:578: SFRPAGE = 0x20;
09AA 75A720    2595            mov     _SFRPAGE,#0x20
09AD           2596   ;        main.c:579: timeout++;
09AD 0A        2597            inc     r2
09AE BA00F8    2598            cjne    r2,#0x00,L017012?
09B1 0B        2599            inc     r3
09B2           2600   L017012?:
09B2           2601   ;        main.c:580: if(timeout==25000)
09B2 BAA878    2602            cjne    r2,#0xA8,L017003?
09B5 BB6178    2603            cjne    r3,#0x61,L017003?
09B8           2604   ;        main.c:582: SFRPAGE = 0x00;
09B8 75A700    2605            mov     _SFRPAGE,#0x00
09BB           2606   ;        main.c:583: return ('\n'); // Timeout after half second
09BB 75820A    2607            mov     dpl,#0x0A
09BE 22        2608            ret
09BF           2609   L017005?:
09BF           2610   ;        main.c:586: RI1=0;
09BF C2C8      2611            clr     _RI1
09C1           2612   ;        main.c:588: SCON1&=0b_0011_1111;
09C1 53C83F    2613            anl     _SCON1,#0x3F
09C4           2614   ;        main.c:589: c = SBUF1;
09C4 859282    2615            mov     dpl,_SBUF1
09C7           2616   ;        main.c:590: SFRPAGE = 0x00;
09C7 75A700    2617            mov     _SFRPAGE,#0x00
09CA           2618   ;        main.c:591: return (c);
09CA 22        2619            ret
09CB           2620   ;------------------------------------------------------------
09CB           2621   ;Allocation info for local variables in function 'getstr1'
09CB           2622   ;------------------------------------------------------------
09CB           2623   ;n                         Allocated with name '_getstr1_PARM_2'
09CB           2624   ;s                         Allocated to registers r2 r3 r4 
09CB           2625   ;c                         Allocated with name '_getstr1_c_1_139'
09CB           2626   ;cnt                       Allocated with name '_getstr1_cnt_1_139'
09CB           2627   ;------------------------------------------------------------
09CB           2628   ;        main.c:594: void getstr1 (char * s, unsigned char n)
09CB           2629   ;        -----------------------------------------
09CB           2630   ;         function getstr1
09CB           2631   ;        -----------------------------------------
09CB           2632   _getstr1:
09CB AA82      2633            mov     r2,dpl
09CD AB83      2634            mov     r3,dph
09CF ACF0      2635            mov     r4,b
09D1           2636   ;        main.c:600: while(1)
09D1 7D00      2637            mov     r5,#0x00
09D3 8A06      2638            mov     ar6,r2
09D5 8B07      2639            mov     ar7,r3
09D7 8C00      2640            mov     ar0,r4
09D9           2641   L018007?:
09D9           2642   ;        main.c:602: c=getchar1_with_timeout();
09D9 C002      2643            push    ar2
09DB C003      2644            push    ar3
09DD C004      2645            push    ar4
09DF C005      2646            push    ar5
09E1 C006      2647            push    ar6
09E3 C007      2648            push    ar7
09E5 C000      2649            push    ar0
09E7 120000    2650            lcall   _getchar1_with_timeout
09EA A982      2651            mov     r1,dpl
09EC D000      2652            pop     ar0
09EE D007      2653            pop     ar7
09F0 D006      2654            pop     ar6
09F2 D005      2655            pop     ar5
09F4 D004      2656            pop     ar4
09F6 D003      2657            pop     ar3
09F8 D002      2658            pop     ar2
09FA           2659   ;        main.c:603: if(c=='\n')
09FA B90A78    2660            cjne    r1,#0x0A,L018002?
09FD           2661   ;        main.c:605: *s=0;
09FD 8A82      2662            mov     dpl,r2
09FF 8B83      2663            mov     dph,r3
0A01 8CF0      2664            mov     b,r4
0A03 E4        2665            clr     a
0A04           2666   ;        main.c:606: return;
0A04 020000    2667            ljmp    __gptrput
0A07           2668   L018002?:
0A07           2669   ;        main.c:609: if (cnt<n)
0A07 C3        2670            clr     c
0A08 ED        2671            mov     a,r5
0A09 9560      2672            subb    a,_getstr1_PARM_2
0A0B 5000      2673            jnc     L018004?
0A0D           2674   ;        main.c:611: cnt++;
0A0D 0D        2675            inc     r5
0A0E           2676   ;        main.c:612: *s=c;
0A0E 8E82      2677            mov     dpl,r6
0A10 8F83      2678            mov     dph,r7
0A12 88F0      2679            mov     b,r0
0A14 E9        2680            mov     a,r1
0A15 120000    2681            lcall   __gptrput
0A18 A3        2682            inc     dptr
0A19 AE82      2683            mov     r6,dpl
0A1B AF83      2684            mov     r7,dph
0A1D           2685   ;        main.c:613: s++;
0A1D 8E02      2686            mov     ar2,r6
0A1F 8F03      2687            mov     ar3,r7
0A21 8804      2688            mov     ar4,r0
0A23 8000      2689            sjmp    L018007?
0A25           2690   L018004?:
0A25           2691   ;        main.c:617: *s=0;
0A25 8A82      2692            mov     dpl,r2
0A27 8B83      2693            mov     dph,r3
0A29 8CF0      2694            mov     b,r4
0A2B E4        2695            clr     a
0A2C           2696   ;        main.c:618: return;
0A2C 020000    2697            ljmp    __gptrput
0A2F           2698   ;------------------------------------------------------------
0A2F           2699   ;Allocation info for local variables in function 'RXU1'
0A2F           2700   ;------------------------------------------------------------
0A2F           2701   ;------------------------------------------------------------
0A2F           2702   ;        main.c:624: bit RXU1 (void)
0A2F           2703   ;        -----------------------------------------
0A2F           2704   ;         function RXU1
0A2F           2705   ;        -----------------------------------------
0A2F           2706   _RXU1:
0A2F           2707   ;        main.c:627: SFRPAGE = 0x20;
0A2F 75A720    2708            mov     _SFRPAGE,#0x20
0A32           2709   ;        main.c:628: mybit=RI1;
0A32 A2C8      2710            mov     c,_RI1
0A34           2711   ;        main.c:629: SFRPAGE = 0x00;
0A34 75A700    2712            mov     _SFRPAGE,#0x00
0A37           2713   ;        main.c:630: return mybit;
0A37 22        2714            ret
0A38           2715   ;------------------------------------------------------------
0A38           2716   ;Allocation info for local variables in function 'waitms_or_RI1'
0A38           2717   ;------------------------------------------------------------
0A38           2718   ;ms                        Allocated to registers r2 r3 
0A38           2719   ;j                         Allocated with name '_waitms_or_RI1_j_1_147'
0A38           2720   ;k                         Allocated with name '_waitms_or_RI1_k_1_147'
0A38           2721   ;------------------------------------------------------------
0A38           2722   ;        main.c:633: void waitms_or_RI1 (unsigned int ms)
0A38           2723   ;        -----------------------------------------
0A38           2724   ;         function waitms_or_RI1
0A38           2725   ;        -----------------------------------------
0A38           2726   _waitms_or_RI1:
0A38 AA82      2727            mov     r2,dpl
0A3A AB83      2728            mov     r3,dph
0A3C           2729   ;        main.c:637: for(j=0; j<ms; j++)
0A3C 7C00      2730            mov     r4,#0x00
0A3E 7D00      2731            mov     r5,#0x00
0A40           2732   L020007?:
0A40 C3        2733            clr     c
0A41 EC        2734            mov     a,r4
0A42 9A        2735            subb    a,r2
0A43 ED        2736            mov     a,r5
0A44 9B        2737            subb    a,r3
0A45 5000      2738            jnc     L020011?
0A47           2739   ;        main.c:639: for (k=0; k<4; k++)
0A47 7E00      2740            mov     r6,#0x00
0A49           2741   L020003?:
0A49 BE04B8    2742            cjne    r6,#0x04,L020019?
0A4C           2743   L020019?:
0A4C 5000      2744            jnc     L020009?
0A4E           2745   ;        main.c:641: if(RXU1()) return;
0A4E C002      2746            push    ar2
0A50 C003      2747            push    ar3
0A52 C004      2748            push    ar4
0A54 C005      2749            push    ar5
0A56 C006      2750            push    ar6
0A58 120000    2751            lcall   _RXU1
0A5B E4        2752            clr     a
0A5C 33        2753            rlc     a
0A5D D006      2754            pop     ar6
0A5F D005      2755            pop     ar5
0A61 D004      2756            pop     ar4
0A63 D003      2757            pop     ar3
0A65 D002      2758            pop     ar2
0A67 6000      2759            jz      L020002?
0A69 22        2760            ret
0A6A           2761   L020002?:
0A6A           2762   ;        main.c:642: Timer3us(250);
0A6A 7582FA    2763            mov     dpl,#0xFA
0A6D C002      2764            push    ar2
0A6F C003      2765            push    ar3
0A71 C004      2766            push    ar4
0A73 C005      2767            push    ar5
0A75 C006      2768            push    ar6
0A77 120000    2769            lcall   _Timer3us
0A7A D006      2770            pop     ar6
0A7C D005      2771            pop     ar5
0A7E D004      2772            pop     ar4
0A80 D003      2773            pop     ar3
0A82 D002      2774            pop     ar2
0A84           2775   ;        main.c:639: for (k=0; k<4; k++)
0A84 0E        2776            inc     r6
0A85 8000      2777            sjmp    L020003?
0A87           2778   L020009?:
0A87           2779   ;        main.c:637: for(j=0; j<ms; j++)
0A87 0C        2780            inc     r4
0A88 BC00F8    2781            cjne    r4,#0x00,L020007?
0A8B 0D        2782            inc     r5
0A8C 8000      2783            sjmp    L020007?
0A8E           2784   L020011?:
0A8E 22        2785            ret
0A8F           2786   ;------------------------------------------------------------
0A8F           2787   ;Allocation info for local variables in function 'SendATCommand'
0A8F           2788   ;------------------------------------------------------------
0A8F           2789   ;s                         Allocated to registers r2 r3 r4 
0A8F           2790   ;------------------------------------------------------------
0A8F           2791   ;        main.c:647: void SendATCommand (char * s)
0A8F           2792   ;        -----------------------------------------
0A8F           2793   ;         function SendATCommand
0A8F           2794   ;        -----------------------------------------
0A8F           2795   _SendATCommand:
0A8F AA82      2796            mov     r2,dpl
0A91 AB83      2797            mov     r3,dph
0A93 ACF0      2798            mov     r4,b
0A95           2799   ;        main.c:649: printf("Command: %s", s);
0A95 C002      2800            push    ar2
0A97 C003      2801            push    ar3
0A99 C004      2802            push    ar4
0A9B C002      2803            push    ar2
0A9D C003      2804            push    ar3
0A9F C004      2805            push    ar4
0AA1 7478      2806            mov     a,#__str_2
0AA3 C0E0      2807            push    acc
0AA5 74E6      2808            mov     a,#(__str_2 >> 8)
0AA7 C0E0      2809            push    acc
0AA9 7480      2810            mov     a,#0x80
0AAB C0E0      2811            push    acc
0AAD 120000    2812            lcall   _printf
0AB0 E581      2813            mov     a,sp
0AB2 24FA      2814            add     a,#0xfa
0AB4 F581      2815            mov     sp,a
0AB6           2816   ;        main.c:650: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0AB6 C2A0      2817            clr     _P2_0
0AB8           2818   ;        main.c:651: waitms(5);
0AB8 900005    2819            mov     dptr,#0x0005
0ABB 120000    2820            lcall   _waitms
0ABE D004      2821            pop     ar4
0AC0 D003      2822            pop     ar3
0AC2 D002      2823            pop     ar2
0AC4           2824   ;        main.c:652: sendstr1(s);
0AC4 8A82      2825            mov     dpl,r2
0AC6 8B83      2826            mov     dph,r3
0AC8 8CF0      2827            mov     b,r4
0ACA 120000    2828            lcall   _sendstr1
0ACD           2829   ;        main.c:653: getstr1(buff, sizeof(buff)-1);
0ACD 756013    2830            mov     _getstr1_PARM_2,#0x13
0AD0 9056D0    2831            mov     dptr,#_buff
0AD3 75F040    2832            mov     b,#0x40
0AD6 120000    2833            lcall   _getstr1
0AD9           2834   ;        main.c:654: waitms(10);
0AD9 90000A    2835            mov     dptr,#0x000A
0ADC 120000    2836            lcall   _waitms
0ADF           2837   ;        main.c:655: P2_0=1; // 'set' pin to 1 is normal operation mode.
0ADF D2A0      2838            setb    _P2_0
0AE1           2839   ;        main.c:656: printf("Response: %s\r\n", buff);
0AE1 74D0      2840            mov     a,#_buff
0AE3 C0E0      2841            push    acc
0AE5 7456      2842            mov     a,#(_buff >> 8)
0AE7 C0E0      2843            push    acc
0AE9 7440      2844            mov     a,#0x40
0AEB C0E0      2845            push    acc
0AED 74B8      2846            mov     a,#__str_3
0AEF C0E0      2847            push    acc
0AF1 74E6      2848            mov     a,#(__str_3 >> 8)
0AF3 C0E0      2849            push    acc
0AF5 7480      2850            mov     a,#0x80
0AF7 C0E0      2851            push    acc
0AF9 120000    2852            lcall   _printf
0AFC E581      2853            mov     a,sp
0AFE 24FA      2854            add     a,#0xfa
0B00 F581      2855            mov     sp,a
0B02 22        2856            ret
0B03           2857   ;------------------------------------------------------------
0B03           2858   ;Allocation info for local variables in function 'ReceptionOff'
0B03           2859   ;------------------------------------------------------------
0B03           2860   ;------------------------------------------------------------
0B03           2861   ;        main.c:659: void ReceptionOff (void)
0B03           2862   ;        -----------------------------------------
0B03           2863   ;         function ReceptionOff
0B03           2864   ;        -----------------------------------------
0B03           2865   _ReceptionOff:
0B03           2866   ;        main.c:661: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0B03 C2A0      2867            clr     _P2_0
0B05           2868   ;        main.c:662: waitms(10);
0B05 90000A    2869            mov     dptr,#0x000A
0B08 120000    2870            lcall   _waitms
0B0B           2871   ;        main.c:663: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0B0B 90E6F8    2872            mov     dptr,#__str_4
0B0E 75F080    2873            mov     b,#0x80
0B11 120000    2874            lcall   _sendstr1
0B14           2875   ;        main.c:664: waitms(10);
0B14 90000A    2876            mov     dptr,#0x000A
0B17 120000    2877            lcall   _waitms
0B1A           2878   ;        main.c:666: SCON1&=0b_0011_1111;
0B1A 53C83F    2879            anl     _SCON1,#0x3F
0B1D           2880   ;        main.c:667: P2_0=1; // 'set' pin to 1 is normal operation mode.
0B1D D2A0      2881            setb    _P2_0
0B1F 22        2882            ret
0B20           2883   ;------------------------------------------------------------
0B20           2884   ;Allocation info for local variables in function 'measure_distance'
0B20           2885   ;------------------------------------------------------------
0B20           2886   ;------------------------------------------------------------
0B20           2887   ;        main.c:670: int measure_distance(void)
0B20           2888   ;        -----------------------------------------
0B20           2889   ;         function measure_distance
0B20           2890   ;        -----------------------------------------
0B20           2891   _measure_distance:
0B20           2892   ;        main.c:674: TL0 = 0; 
0B20 758A00    2893            mov     _TL0,#0x00
0B23           2894   ;        main.c:675: TH0 = 0; 
0B23 758C00    2895            mov     _TH0,#0x00
0B26           2896   ;        main.c:676: TF0 = 0; 
0B26 C28D      2897            clr     _TF0
0B28           2898   ;        main.c:677: overflow_count = 0;
0B28 9052D0    2899            mov     dptr,#_overflow_count
0B2B           2900   ;        main.c:678: duration = 0;
0B2B E4        2901            clr     a
0B2C F0        2902            movx    @dptr,a
0B2D 904C80    2903            mov     dptr,#_duration
0B30 F0        2904            movx    @dptr,a
0B31 A3        2905            inc     dptr
0B32 E4        2906            clr     a
0B33 F0        2907            movx    @dptr,a
0B34 A3        2908            inc     dptr
0B35 F0        2909            movx    @dptr,a
0B36 A3        2910            inc     dptr
0B37 F0        2911            movx    @dptr,a
0B38           2912   ;        main.c:680: TRIG_PIN = 1; 
0B38 D280      2913            setb    _P0_0
0B3A           2914   ;        main.c:681: for(i = 0; i < 40; i++);
0B3A 905250    2915            mov     dptr,#_i
0B3D 7428      2916            mov     a,#0x28
0B3F F0        2917            movx    @dptr,a
0B40 E4        2918            clr     a
0B41 A3        2919            inc     dptr
0B42 F0        2920            movx    @dptr,a
0B43           2921   L023016?:
0B43 905250    2922            mov     dptr,#_i
0B46 E0        2923            movx    a,@dptr
0B47 FA        2924            mov     r2,a
0B48 A3        2925            inc     dptr
0B49 E0        2926            movx    a,@dptr
0B4A FB        2927            mov     r3,a
0B4B 1A        2928            dec     r2
0B4C BAFF78    2929            cjne    r2,#0xff,L023029?
0B4F 1B        2930            dec     r3
0B50           2931   L023029?:
0B50 905250    2932            mov     dptr,#_i
0B53 EA        2933            mov     a,r2
0B54 F0        2934            movx    @dptr,a
0B55 A3        2935            inc     dptr
0B56 EB        2936            mov     a,r3
0B57 F0        2937            movx    @dptr,a
0B58 905250    2938            mov     dptr,#_i
0B5B E0        2939            movx    a,@dptr
0B5C FA        2940            mov     r2,a
0B5D A3        2941            inc     dptr
0B5E E0        2942            movx    a,@dptr
0B5F FB        2943            mov     r3,a
0B60 4A        2944            orl     a,r2
0B61 7000      2945            jnz     L023016?
0B63 905250    2946            mov     dptr,#_i
0B66 7428      2947            mov     a,#0x28
0B68 F0        2948            movx    @dptr,a
0B69 E4        2949            clr     a
0B6A A3        2950            inc     dptr
0B6B F0        2951            movx    @dptr,a
0B6C           2952   ;        main.c:682: TRIG_PIN = 0; 
0B6C C280      2953            clr     _P0_0
0B6E           2954   ;        main.c:684: while (ECHO_PIN != 0){
0B6E           2955   L023003?:
0B6E 30B1F8    2956            jnb     _P3_1,L023006?
0B71           2957   ;        main.c:685: i++;
0B71 905250    2958            mov     dptr,#_i
0B74 E0        2959            movx    a,@dptr
0B75 2401      2960            add     a,#0x01
0B77 F0        2961            movx    @dptr,a
0B78 A3        2962            inc     dptr
0B79 E0        2963            movx    a,@dptr
0B7A 3400      2964            addc    a,#0x00
0B7C F0        2965            movx    @dptr,a
0B7D           2966   ;        main.c:686: if (i > 3000){
0B7D 905250    2967            mov     dptr,#_i
0B80 E0        2968            movx    a,@dptr
0B81 FA        2969            mov     r2,a
0B82 A3        2970            inc     dptr
0B83 E0        2971            movx    a,@dptr
0B84 FB        2972            mov     r3,a
0B85 C3        2973            clr     c
0B86 74B8      2974            mov     a,#0xB8
0B88 9A        2975            subb    a,r2
0B89 740B      2976            mov     a,#0x0B
0B8B 9B        2977            subb    a,r3
0B8C 5000      2978            jnc     L023003?
0B8E           2979   ;        main.c:688: return -1;
0B8E 90FFFF    2980            mov     dptr,#0xFFFF
0B91 22        2981            ret
0B92           2982   ;        main.c:691: while (ECHO_PIN != 1);
0B92           2983   L023006?:
0B92 30B1F8    2984            jnb     _P3_1,L023006?
0B95           2985   ;        main.c:692: TR0 = 1; 
0B95 D28C      2986            setb    _TR0
0B97           2987   ;        main.c:693: while (ECHO_PIN == 1)
0B97           2988   L023011?:
0B97 30B178    2989            jnb     _P3_1,L023013?
0B9A           2990   ;        main.c:695: if (TF0 == 1){
0B9A           2991   ;        main.c:696: TF0 = 0; 
0B9A 108DB8    2992            jbc     _TF0,L023035?
0B9D 8000      2993            sjmp    L023011?
0B9F           2994   L023035?:
0B9F           2995   ;        main.c:697: overflow_count++;
0B9F 9052D0    2996            mov     dptr,#_overflow_count
0BA2 E0        2997            movx    a,@dptr
0BA3 2401      2998            add     a,#0x01
0BA5 F0        2999            movx    @dptr,a
0BA6 8000      3000            sjmp    L023011?
0BA8           3001   L023013?:
0BA8           3002   ;        main.c:701: TR0 = 0; 
0BA8 C28C      3003            clr     _TR0
0BAA           3004   ;        main.c:702: duration = (overflow_count*65536.0 + TH0*256.0 + TL0) * (12.0/SYSCLK);
0BAA 9052D0    3005            mov     dptr,#_overflow_count
0BAD E0        3006            movx    a,@dptr
0BAE F582      3007            mov     dpl,a
0BB0 120000    3008            lcall   ___uchar2fs
0BB3 AA82      3009            mov     r2,dpl
0BB5 AB83      3010            mov     r3,dph
0BB7 ACF0      3011            mov     r4,b
0BB9 FD        3012            mov     r5,a
0BBA C002      3013            push    ar2
0BBC C003      3014            push    ar3
0BBE C004      3015            push    ar4
0BC0 C005      3016            push    ar5
0BC2 900000    3017            mov     dptr,#0x0000
0BC5 75F080    3018            mov     b,#0x80
0BC8 7447      3019            mov     a,#0x47
0BCA 120000    3020            lcall   ___fsmul
0BCD AA82      3021            mov     r2,dpl
0BCF AB83      3022            mov     r3,dph
0BD1 ACF0      3023            mov     r4,b
0BD3 FD        3024            mov     r5,a
0BD4 E581      3025            mov     a,sp
0BD6 24FC      3026            add     a,#0xfc
0BD8 F581      3027            mov     sp,a
0BDA 858C82    3028            mov     dpl,_TH0
0BDD C002      3029            push    ar2
0BDF C003      3030            push    ar3
0BE1 C004      3031            push    ar4
0BE3 C005      3032            push    ar5
0BE5 120000    3033            lcall   ___uchar2fs
0BE8 AE82      3034            mov     r6,dpl
0BEA AF83      3035            mov     r7,dph
0BEC A8F0      3036            mov     r0,b
0BEE F9        3037            mov     r1,a
0BEF C006      3038            push    ar6
0BF1 C007      3039            push    ar7
0BF3 C000      3040            push    ar0
0BF5 C001      3041            push    ar1
0BF7 900000    3042            mov     dptr,#0x0000
0BFA 75F080    3043            mov     b,#0x80
0BFD 7443      3044            mov     a,#0x43
0BFF 120000    3045            lcall   ___fsmul
0C02 AE82      3046            mov     r6,dpl
0C04 AF83      3047            mov     r7,dph
0C06 A8F0      3048            mov     r0,b
0C08 F9        3049            mov     r1,a
0C09 E581      3050            mov     a,sp
0C0B 24FC      3051            add     a,#0xfc
0C0D F581      3052            mov     sp,a
0C0F D005      3053            pop     ar5
0C11 D004      3054            pop     ar4
0C13 D003      3055            pop     ar3
0C15 D002      3056            pop     ar2
0C17 C006      3057            push    ar6
0C19 C007      3058            push    ar7
0C1B C000      3059            push    ar0
0C1D C001      3060            push    ar1
0C1F 8A82      3061            mov     dpl,r2
0C21 8B83      3062            mov     dph,r3
0C23 8CF0      3063            mov     b,r4
0C25 ED        3064            mov     a,r5
0C26 120000    3065            lcall   ___fsadd
0C29 AA82      3066            mov     r2,dpl
0C2B AB83      3067            mov     r3,dph
0C2D ACF0      3068            mov     r4,b
0C2F FD        3069            mov     r5,a
0C30 E581      3070            mov     a,sp
0C32 24FC      3071            add     a,#0xfc
0C34 F581      3072            mov     sp,a
0C36 AE8A      3073            mov     r6,_TL0
0C38 7F00      3074            mov     r7,#0x00
0C3A 8E82      3075            mov     dpl,r6
0C3C 8F83      3076            mov     dph,r7
0C3E C002      3077            push    ar2
0C40 C003      3078            push    ar3
0C42 C004      3079            push    ar4
0C44 C005      3080            push    ar5
0C46 120000    3081            lcall   ___sint2fs
0C49 AE82      3082            mov     r6,dpl
0C4B AF83      3083            mov     r7,dph
0C4D A8F0      3084            mov     r0,b
0C4F F9        3085            mov     r1,a
0C50 D005      3086            pop     ar5
0C52 D004      3087            pop     ar4
0C54 D003      3088            pop     ar3
0C56 D002      3089            pop     ar2
0C58 C006      3090            push    ar6
0C5A C007      3091            push    ar7
0C5C C000      3092            push    ar0
0C5E C001      3093            push    ar1
0C60 8A82      3094            mov     dpl,r2
0C62 8B83      3095            mov     dph,r3
0C64 8CF0      3096            mov     b,r4
0C66 ED        3097            mov     a,r5
0C67 120000    3098            lcall   ___fsadd
0C6A AA82      3099            mov     r2,dpl
0C6C AB83      3100            mov     r3,dph
0C6E ACF0      3101            mov     r4,b
0C70 FD        3102            mov     r5,a
0C71 E581      3103            mov     a,sp
0C73 24FC      3104            add     a,#0xfc
0C75 F581      3105            mov     sp,a
0C77 C002      3106            push    ar2
0C79 C003      3107            push    ar3
0C7B C004      3108            push    ar4
0C7D C005      3109            push    ar5
0C7F 90F4FC    3110            mov     dptr,#0xF4FC
0C82 75F032    3111            mov     b,#0x32
0C85 7434      3112            mov     a,#0x34
0C87 120000    3113            lcall   ___fsmul
0C8A AA82      3114            mov     r2,dpl
0C8C AB83      3115            mov     r3,dph
0C8E ACF0      3116            mov     r4,b
0C90 FD        3117            mov     r5,a
0C91 E581      3118            mov     a,sp
0C93 24FC      3119            add     a,#0xfc
0C95 F581      3120            mov     sp,a
0C97 904C80    3121            mov     dptr,#_duration
0C9A EA        3122            mov     a,r2
0C9B F0        3123            movx    @dptr,a
0C9C A3        3124            inc     dptr
0C9D EB        3125            mov     a,r3
0C9E F0        3126            movx    @dptr,a
0C9F A3        3127            inc     dptr
0CA0 EC        3128            mov     a,r4
0CA1 F0        3129            movx    @dptr,a
0CA2 A3        3130            inc     dptr
0CA3 ED        3131            mov     a,r5
0CA4 F0        3132            movx    @dptr,a
0CA5           3133   ;        main.c:704: distance = 100 * (340.0 * duration * 100.0 / 2.0); // distance in cm
0CA5 C002      3134            push    ar2
0CA7 C003      3135            push    ar3
0CA9 C004      3136            push    ar4
0CAB C005      3137            push    ar5
0CAD 90D000    3138            mov     dptr,#0xD000
0CB0 75F004    3139            mov     b,#0x04
0CB3 7447      3140            mov     a,#0x47
0CB5 120000    3141            lcall   ___fsmul
0CB8 AA82      3142            mov     r2,dpl
0CBA AB83      3143            mov     r3,dph
0CBC ACF0      3144            mov     r4,b
0CBE FD        3145            mov     r5,a
0CBF E581      3146            mov     a,sp
0CC1 24FC      3147            add     a,#0xfc
0CC3 F581      3148            mov     sp,a
0CC5 E4        3149            clr     a
0CC6 C0E0      3150            push    acc
0CC8 C0E0      3151            push    acc
0CCA C0E0      3152            push    acc
0CCC 7440      3153            mov     a,#0x40
0CCE C0E0      3154            push    acc
0CD0 8A82      3155            mov     dpl,r2
0CD2 8B83      3156            mov     dph,r3
0CD4 8CF0      3157            mov     b,r4
0CD6 ED        3158            mov     a,r5
0CD7 120000    3159            lcall   ___fsdiv
0CDA AA82      3160            mov     r2,dpl
0CDC AB83      3161            mov     r3,dph
0CDE ACF0      3162            mov     r4,b
0CE0 FD        3163            mov     r5,a
0CE1 E581      3164            mov     a,sp
0CE3 24FC      3165            add     a,#0xfc
0CE5 F581      3166            mov     sp,a
0CE7 C002      3167            push    ar2
0CE9 C003      3168            push    ar3
0CEB C004      3169            push    ar4
0CED C005      3170            push    ar5
0CEF 900000    3171            mov     dptr,#0x0000
0CF2 75F0C8    3172            mov     b,#0xC8
0CF5 7442      3173            mov     a,#0x42
0CF7 120000    3174            lcall   ___fsmul
0CFA AA82      3175            mov     r2,dpl
0CFC AB83      3176            mov     r3,dph
0CFE ACF0      3177            mov     r4,b
0D00 FD        3178            mov     r5,a
0D01 E581      3179            mov     a,sp
0D03 24FC      3180            add     a,#0xfc
0D05 F581      3181            mov     sp,a
0D07 8A82      3182            mov     dpl,r2
0D09 8B83      3183            mov     dph,r3
0D0B 8CF0      3184            mov     b,r4
0D0D ED        3185            mov     a,r5
0D0E 120000    3186            lcall   ___fs2sint
0D11 AA82      3187            mov     r2,dpl
0D13 AB83      3188            mov     r3,dph
0D15 905310    3189            mov     dptr,#_distance
0D18 EA        3190            mov     a,r2
0D19 F0        3191            movx    @dptr,a
0D1A A3        3192            inc     dptr
0D1B EB        3193            mov     a,r3
0D1C F0        3194            movx    @dptr,a
0D1D           3195   ;        main.c:706: return distance; 
0D1D 8A82      3196            mov     dpl,r2
0D1F 8B83      3197            mov     dph,r3
0D21 22        3198            ret
0D22           3199   ;------------------------------------------------------------
0D22           3200   ;Allocation info for local variables in function 'Set_Pin_Output'
0D22           3201   ;------------------------------------------------------------
0D22           3202   ;pin                       Allocated to registers r2 
0D22           3203   ;mask                      Allocated to registers r3 
0D22           3204   ;------------------------------------------------------------
0D22           3205   ;        main.c:709: void Set_Pin_Output (unsigned char pin)
0D22           3206   ;        -----------------------------------------
0D22           3207   ;         function Set_Pin_Output
0D22           3208   ;        -----------------------------------------
0D22           3209   _Set_Pin_Output:
0D22 AA82      3210            mov     r2,dpl
0D24           3211   ;        main.c:713: mask=(1<<(pin&0x7));
0D24 7407      3212            mov     a,#0x07
0D26 5A        3213            anl     a,r2
0D27 F5F0      3214            mov     b,a
0D29 05F0      3215            inc     b
0D2B 7401      3216            mov     a,#0x01
0D2D 8000      3217            sjmp    L024011?
0D2F           3218   L024009?:
0D2F 25E0      3219            add     a,acc
0D31           3220   L024011?:
0D31 D5F0B8    3221            djnz    b,L024009?
0D34 FB        3222            mov     r3,a
0D35           3223   ;        main.c:714: switch(pin/0x10)
0D35 EA        3224            mov     a,r2
0D36 C4        3225            swap    a
0D37 540F      3226            anl     a,#0x0f
0D39 FA        3227            mov  r2,a
0D3A 24FC      3228            add     a,#0xff - 0x03
0D3C 4000      3229            jc      L024006?
0D3E EA        3230            mov     a,r2
0D3F 2A        3231            add     a,r2
0D40 2A        3232            add     a,r2
0D41 90EB38    3233            mov     dptr,#L024013?
0D44 73        3234            jmp     @a+dptr
0D45           3235   L024013?:
0D45 020000    3236            ljmp    L024001?
0D48 020000    3237            ljmp    L024002?
0D4B 020000    3238            ljmp    L024003?
0D4E 020000    3239            ljmp    L024004?
0D51           3240   ;        main.c:716: case 0: P0MDOUT |= mask; break;
0D51           3241   L024001?:
0D51 EB        3242            mov     a,r3
0D52 42A4      3243            orl     _P0MDOUT,a
0D54           3244   ;        main.c:717: case 1: P1MDOUT |= mask; break;
0D54 22        3245            ret
0D55           3246   L024002?:
0D55 EB        3247            mov     a,r3
0D56 42A5      3248            orl     _P1MDOUT,a
0D58           3249   ;        main.c:718: case 2: P2MDOUT |= mask; break; 
0D58 22        3250            ret
0D59           3251   L024003?:
0D59 EB        3252            mov     a,r3
0D5A 42A6      3253            orl     _P2MDOUT,a
0D5C           3254   ;        main.c:719: case 3: P3MDOUT |= mask; break; 
0D5C 22        3255            ret
0D5D           3256   L024004?:
0D5D EB        3257            mov     a,r3
0D5E 429C      3258            orl     _P3MDOUT,a
0D60           3259   ;        main.c:720: }   
0D60           3260   L024006?:
0D60 22        3261            ret
0D61           3262   ;------------------------------------------------------------
0D61           3263   ;Allocation info for local variables in function 'Set_Pin_Input'
0D61           3264   ;------------------------------------------------------------
0D61           3265   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_164'
0D61           3266   ;pin                       Allocated to registers r2 
0D61           3267   ;------------------------------------------------------------
0D61           3268   ;        main.c:723: void Set_Pin_Input (unsigned char pin)
0D61           3269   ;        -----------------------------------------
0D61           3270   ;         function Set_Pin_Input
0D61           3271   ;        -----------------------------------------
0D61           3272   _Set_Pin_Input:
0D61 AA82      3273            mov     r2,dpl
0D63           3274   ;        main.c:727: mask=(1<<(pin&0x7));
0D63 7407      3275            mov     a,#0x07
0D65 5A        3276            anl     a,r2
0D66 F5F0      3277            mov     b,a
0D68 05F0      3278            inc     b
0D6A 7401      3279            mov     a,#0x01
0D6C 8000      3280            sjmp    L025011?
0D6E           3281   L025009?:
0D6E 25E0      3282            add     a,acc
0D70           3283   L025011?:
0D70 D5F0B8    3284            djnz    b,L025009?
0D73           3285   ;        main.c:728: mask=~mask;
0D73 F4        3286            cpl     a
0D74 FB        3287            mov     r3,a
0D75           3288   ;        main.c:729: switch(pin/0x10)
0D75 EA        3289            mov     a,r2
0D76 C4        3290            swap    a
0D77 540F      3291            anl     a,#0x0f
0D79 FA        3292            mov  r2,a
0D7A 24FC      3293            add     a,#0xff - 0x03
0D7C 4000      3294            jc      L025006?
0D7E EA        3295            mov     a,r2
0D7F 2A        3296            add     a,r2
0D80 2A        3297            add     a,r2
0D81 90ED38    3298            mov     dptr,#L025013?
0D84 73        3299            jmp     @a+dptr
0D85           3300   L025013?:
0D85 020000    3301            ljmp    L025001?
0D88 020000    3302            ljmp    L025002?
0D8B 020000    3303            ljmp    L025003?
0D8E 020000    3304            ljmp    L025004?
0D91           3305   ;        main.c:731: case 0: P0MDOUT &= mask; break;
0D91           3306   L025001?:
0D91 EB        3307            mov     a,r3
0D92 52A4      3308            anl     _P0MDOUT,a
0D94           3309   ;        main.c:732: case 1: P1MDOUT &= mask; break;
0D94 22        3310            ret
0D95           3311   L025002?:
0D95 EB        3312            mov     a,r3
0D96 52A5      3313            anl     _P1MDOUT,a
0D98           3314   ;        main.c:733: case 2: P2MDOUT &= mask; break; 
0D98 22        3315            ret
0D99           3316   L025003?:
0D99 EB        3317            mov     a,r3
0D9A 52A6      3318            anl     _P2MDOUT,a
0D9C           3319   ;        main.c:734: case 3: P3MDOUT &= mask; break; 
0D9C 22        3320            ret
0D9D           3321   L025004?:
0D9D EB        3322            mov     a,r3
0D9E 529C      3323            anl     _P3MDOUT,a
0DA0           3324   ;        main.c:735: }   
0DA0           3325   L025006?:
0DA0 22        3326            ret
0DA1           3327   ;------------------------------------------------------------
0DA1           3328   ;Allocation info for local variables in function 'InitADC'
0DA1           3329   ;------------------------------------------------------------
0DA1           3330   ;------------------------------------------------------------
0DA1           3331   ;        main.c:738: void InitADC (void)
0DA1           3332   ;        -----------------------------------------
0DA1           3333   ;         function InitADC
0DA1           3334   ;        -----------------------------------------
0DA1           3335   _InitADC:
0DA1           3336   ;        main.c:740: SFRPAGE = 0x00;
0DA1 75A700    3337            mov     _SFRPAGE,#0x00
0DA4           3338   ;        main.c:741: ADEN=0; // Disable ADC
0DA4 C2EF      3339            clr     _ADEN
0DA6           3340   ;        main.c:746: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0DA6 75B280    3341            mov     _ADC0CN1,#0x80
0DA9           3342   ;        main.c:750: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0DA9 75BC20    3343            mov     _ADC0CF0,#0x20
0DAC           3344   ;        main.c:754: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
0DAC 75B91E    3345            mov     _ADC0CF1,#0x1E
0DAF           3346   ;        main.c:763: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0DAF 75E800    3347            mov     _ADC0CN0,#0x00
0DB2           3348   ;        main.c:768: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0DB2 75DF3F    3349            mov     _ADC0CF2,#0x3F
0DB5           3350   ;        main.c:772: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0DB5 75B300    3351            mov     _ADC0CN2,#0x00
0DB8           3352   ;        main.c:774: ADEN=1; // Enable ADC
0DB8 D2EF      3353            setb    _ADEN
0DBA 22        3354            ret
0DBB           3355   ;------------------------------------------------------------
0DBB           3356   ;Allocation info for local variables in function 'InitPinADC'
0DBB           3357   ;------------------------------------------------------------
0DBB           3358   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
0DBB           3359   ;portno                    Allocated to registers r2 
0DBB           3360   ;mask                      Allocated to registers r3 
0DBB           3361   ;------------------------------------------------------------
0DBB           3362   ;        main.c:777: void InitPinADC (unsigned char portno, unsigned char pin_num)
0DBB           3363   ;        -----------------------------------------
0DBB           3364   ;         function InitPinADC
0DBB           3365   ;        -----------------------------------------
0DBB           3366   _InitPinADC:
0DBB AA82      3367            mov     r2,dpl
0DBD           3368   ;        main.c:781: mask=1<<pin_num;
0DBD 85E0F0    3369            mov     b,_InitPinADC_PARM_2
0DC0 05F0      3370            inc     b
0DC2 7401      3371            mov     a,#0x01
0DC4 8000      3372            sjmp    L027013?
0DC6           3373   L027011?:
0DC6 25E0      3374            add     a,acc
0DC8           3375   L027013?:
0DC8 D5F0B8    3376            djnz    b,L027011?
0DCB FB        3377            mov     r3,a
0DCC           3378   ;        main.c:783: SFRPAGE = 0x20;
0DCC 75A720    3379            mov     _SFRPAGE,#0x20
0DCF           3380   ;        main.c:784: switch (portno)
0DCF BA00F8    3381            cjne    r2,#0x00,L027014?
0DD2 8000      3382            sjmp    L027001?
0DD4           3383   L027014?:
0DD4 BA0178    3384            cjne    r2,#0x01,L027015?
0DD7 8000      3385            sjmp    L027002?
0DD9           3386   L027015?:
0DD9           3387   ;        main.c:786: case 0:
0DD9 BA0260    3388            cjne    r2,#0x02,L027005?
0DDC 8000      3389            sjmp    L027003?
0DDE           3390   L027001?:
0DDE           3391   ;        main.c:787: P0MDIN &= (~mask); // Set pin as analog input
0DDE EB        3392            mov     a,r3
0DDF F4        3393            cpl     a
0DE0 FA        3394            mov     r2,a
0DE1 52F1      3395            anl     _P0MDIN,a
0DE3           3396   ;        main.c:788: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0DE3 EB        3397            mov     a,r3
0DE4 42D4      3398            orl     _P0SKIP,a
0DE6           3399   ;        main.c:789: break;
0DE6           3400   ;        main.c:790: case 1:
0DE6 8000      3401            sjmp    L027005?
0DE8           3402   L027002?:
0DE8           3403   ;        main.c:791: P1MDIN &= (~mask); // Set pin as analog input
0DE8 EB        3404            mov     a,r3
0DE9 F4        3405            cpl     a
0DEA FA        3406            mov     r2,a
0DEB 52F2      3407            anl     _P1MDIN,a
0DED           3408   ;        main.c:792: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0DED EB        3409            mov     a,r3
0DEE 42D5      3410            orl     _P1SKIP,a
0DF0           3411   ;        main.c:793: break;
0DF0           3412   ;        main.c:794: case 2:
0DF0 8000      3413            sjmp    L027005?
0DF2           3414   L027003?:
0DF2           3415   ;        main.c:795: P2MDIN &= (~mask); // Set pin as analog input
0DF2 EB        3416            mov     a,r3
0DF3 F4        3417            cpl     a
0DF4 FA        3418            mov     r2,a
0DF5 52F3      3419            anl     _P2MDIN,a
0DF7           3420   ;        main.c:796: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0DF7 EB        3421            mov     a,r3
0DF8 42CC      3422            orl     _P2SKIP,a
0DFA           3423   ;        main.c:800: }
0DFA           3424   L027005?:
0DFA           3425   ;        main.c:801: SFRPAGE = 0x00;
0DFA 75A700    3426            mov     _SFRPAGE,#0x00
0DFD 22        3427            ret
0DFE           3428   ;------------------------------------------------------------
0DFE           3429   ;Allocation info for local variables in function 'ADC_at_Pin'
0DFE           3430   ;------------------------------------------------------------
0DFE           3431   ;pin                       Allocated to registers 
0DFE           3432   ;------------------------------------------------------------
0DFE           3433   ;        main.c:804: unsigned int ADC_at_Pin(unsigned char pin)
0DFE           3434   ;        -----------------------------------------
0DFE           3435   ;         function ADC_at_Pin
0DFE           3436   ;        -----------------------------------------
0DFE           3437   _ADC_at_Pin:
0DFE 8582BB    3438            mov     _ADC0MX,dpl
0E01           3439   ;        main.c:807: ADINT = 0;
0E01 C2ED      3440            clr     _ADINT
0E03           3441   ;        main.c:808: ADBUSY = 1;     // Convert voltage at the pin
0E03 D2EC      3442            setb    _ADBUSY
0E05           3443   ;        main.c:809: while (!ADINT); // Wait for conversion to complete
0E05           3444   L028001?:
0E05 30EDE0    3445            jnb     _ADINT,L028001?
0E08           3446   ;        main.c:810: return (ADC0);
0E08 85BD82    3447            mov     dpl,_ADC0
0E0B 85BE83    3448            mov     dph,(_ADC0 >> 8)
0E0E 22        3449            ret
0E0F           3450   ;------------------------------------------------------------
0E0F           3451   ;Allocation info for local variables in function 'ReadHX711'
0E0F           3452   ;------------------------------------------------------------
0E0F           3453   ;dataa                     Allocated with name '_ReadHX711_dataa_1_174'
0E0F           3454   ;ans                       Allocated with name '_ReadHX711_ans_1_174'
0E0F           3455   ;j                         Allocated with name '_ReadHX711_j_1_174'
0E0F           3456   ;------------------------------------------------------------
0E0F           3457   ;        main.c:813: int ReadHX711(void) {
0E0F           3458   ;        -----------------------------------------
0E0F           3459   ;         function ReadHX711
0E0F           3460   ;        -----------------------------------------
0E0F           3461   _ReadHX711:
0E0F           3462   ;        main.c:814: xdata unsigned long dataa = 0;
0E0F 90CF78    3463            mov     dptr,#_ReadHX711_dataa_1_174
0E12 E4        3464            clr     a
0E13 F0        3465            movx    @dptr,a
0E14 A3        3466            inc     dptr
0E15 F0        3467            movx    @dptr,a
0E16 A3        3468            inc     dptr
0E17 F0        3469            movx    @dptr,a
0E18 A3        3470            inc     dptr
0E19 F0        3471            movx    @dptr,a
0E1A           3472   ;        main.c:819: PD_SCK = 0;
0E1A C2A5      3473            clr     _P2_5
0E1C           3474   ;        main.c:821: for (i = 0; i < 24; i++) {
0E1C 905250    3475            mov     dptr,#_i
0E1F E4        3476            clr     a
0E20 F0        3477            movx    @dptr,a
0E21 A3        3478            inc     dptr
0E22 F0        3479            movx    @dptr,a
0E23           3480   L029011?:
0E23 905250    3481            mov     dptr,#_i
0E26 E0        3482            movx    a,@dptr
0E27 FA        3483            mov     r2,a
0E28 A3        3484            inc     dptr
0E29 E0        3485            movx    a,@dptr
0E2A FB        3486            mov     r3,a
0E2B C3        3487            clr     c
0E2C EA        3488            mov     a,r2
0E2D 9418      3489            subb    a,#0x18
0E2F EB        3490            mov     a,r3
0E30 9400      3491            subb    a,#0x00
0E32 4000      3492            jc      L029036?
0E34 020000    3493            ljmp    L029014?
0E37           3494   L029036?:
0E37           3495   ;        main.c:822: PD_SCK = 1;
0E37 D2A5      3496            setb    _P2_5
0E39           3497   ;        main.c:823: for (j = 0; j < 4; j++);
0E39 90CFC8    3498            mov     dptr,#_ReadHX711_j_1_174
0E3C E4        3499            clr     a
0E3D F0        3500            movx    @dptr,a
0E3E           3501   L029003?:
0E3E 90CFC8    3502            mov     dptr,#_ReadHX711_j_1_174
0E41 E0        3503            movx    a,@dptr
0E42 FA        3504            mov     r2,a
0E43 C3        3505            clr     c
0E44 6480      3506            xrl     a,#0x80
0E46 9484      3507            subb    a,#0x84
0E48 5000      3508            jnc     L029006?
0E4A 90CFC8    3509            mov     dptr,#_ReadHX711_j_1_174
0E4D E0        3510            movx    a,@dptr
0E4E 2401      3511            add     a,#0x01
0E50 F0        3512            movx    @dptr,a
0E51 8000      3513            sjmp    L029003?
0E53           3514   L029006?:
0E53           3515   ;        main.c:824: dataa = dataa << 1;
0E53 90CF78    3516            mov     dptr,#_ReadHX711_dataa_1_174
0E56 E0        3517            movx    a,@dptr
0E57 FA        3518            mov     r2,a
0E58 A3        3519            inc     dptr
0E59 E0        3520            movx    a,@dptr
0E5A FB        3521            mov     r3,a
0E5B A3        3522            inc     dptr
0E5C E0        3523            movx    a,@dptr
0E5D FC        3524            mov     r4,a
0E5E A3        3525            inc     dptr
0E5F E0        3526            movx    a,@dptr
0E60 FD        3527            mov     r5,a
0E61 EA        3528            mov     a,r2
0E62 2A        3529            add     a,r2
0E63 FA        3530            mov     r2,a
0E64 EB        3531            mov     a,r3
0E65 33        3532            rlc     a
0E66 FB        3533            mov     r3,a
0E67 EC        3534            mov     a,r4
0E68 33        3535            rlc     a
0E69 FC        3536            mov     r4,a
0E6A ED        3537            mov     a,r5
0E6B 33        3538            rlc     a
0E6C FD        3539            mov     r5,a
0E6D 90CF78    3540            mov     dptr,#_ReadHX711_dataa_1_174
0E70 EA        3541            mov     a,r2
0E71 F0        3542            movx    @dptr,a
0E72 A3        3543            inc     dptr
0E73 EB        3544            mov     a,r3
0E74 F0        3545            movx    @dptr,a
0E75 A3        3546            inc     dptr
0E76 EC        3547            mov     a,r4
0E77 F0        3548            movx    @dptr,a
0E78 A3        3549            inc     dptr
0E79 ED        3550            mov     a,r5
0E7A F0        3551            movx    @dptr,a
0E7B           3552   ;        main.c:825: if (DOUT) {
0E7B 30A660    3553            jnb     _P2_6,L029002?
0E7E           3554   ;        main.c:826: dataa |= 0x01;
0E7E 90CF78    3555            mov     dptr,#_ReadHX711_dataa_1_174
0E81 E0        3556            movx    a,@dptr
0E82 FA        3557            mov     r2,a
0E83 A3        3558            inc     dptr
0E84 E0        3559            movx    a,@dptr
0E85 FB        3560            mov     r3,a
0E86 A3        3561            inc     dptr
0E87 E0        3562            movx    a,@dptr
0E88 FC        3563            mov     r4,a
0E89 A3        3564            inc     dptr
0E8A E0        3565            movx    a,@dptr
0E8B FD        3566            mov     r5,a
0E8C 90CF78    3567            mov     dptr,#_ReadHX711_dataa_1_174
0E8F 7401      3568            mov     a,#0x01
0E91 4A        3569            orl     a,r2
0E92 F0        3570            movx    @dptr,a
0E93 A3        3571            inc     dptr
0E94 EB        3572            mov     a,r3
0E95 F0        3573            movx    @dptr,a
0E96 A3        3574            inc     dptr
0E97 EC        3575            mov     a,r4
0E98 F0        3576            movx    @dptr,a
0E99 A3        3577            inc     dptr
0E9A ED        3578            mov     a,r5
0E9B F0        3579            movx    @dptr,a
0E9C           3580   L029002?:
0E9C           3581   ;        main.c:828: PD_SCK = 0;
0E9C C2A5      3582            clr     _P2_5
0E9E           3583   ;        main.c:829: for (j = 0; j < 4; j++);
0E9E 90CFC8    3584            mov     dptr,#_ReadHX711_j_1_174
0EA1 E4        3585            clr     a
0EA2 F0        3586            movx    @dptr,a
0EA3           3587   L029007?:
0EA3 90CFC8    3588            mov     dptr,#_ReadHX711_j_1_174
0EA6 E0        3589            movx    a,@dptr
0EA7 FA        3590            mov     r2,a
0EA8 C3        3591            clr     c
0EA9 6480      3592            xrl     a,#0x80
0EAB 9484      3593            subb    a,#0x84
0EAD 5000      3594            jnc     L029013?
0EAF 90CFC8    3595            mov     dptr,#_ReadHX711_j_1_174
0EB2 E0        3596            movx    a,@dptr
0EB3 2401      3597            add     a,#0x01
0EB5 F0        3598            movx    @dptr,a
0EB6 8000      3599            sjmp    L029007?
0EB8           3600   L029013?:
0EB8           3601   ;        main.c:821: for (i = 0; i < 24; i++) {
0EB8 905250    3602            mov     dptr,#_i
0EBB E0        3603            movx    a,@dptr
0EBC 2401      3604            add     a,#0x01
0EBE F0        3605            movx    @dptr,a
0EBF A3        3606            inc     dptr
0EC0 E0        3607            movx    a,@dptr
0EC1 3400      3608            addc    a,#0x00
0EC3 F0        3609            movx    @dptr,a
0EC4 020000    3610            ljmp    L029011?
0EC7           3611   L029014?:
0EC7           3612   ;        main.c:832: PD_SCK = 1;
0EC7 D2A5      3613            setb    _P2_5
0EC9           3614   ;        main.c:833: for (j = 0; j < 4; j++);
0EC9 90CFC8    3615            mov     dptr,#_ReadHX711_j_1_174
0ECC E4        3616            clr     a
0ECD F0        3617            movx    @dptr,a
0ECE           3618   L029015?:
0ECE 90CFC8    3619            mov     dptr,#_ReadHX711_j_1_174
0ED1 E0        3620            movx    a,@dptr
0ED2 FA        3621            mov     r2,a
0ED3 C3        3622            clr     c
0ED4 6480      3623            xrl     a,#0x80
0ED6 9484      3624            subb    a,#0x84
0ED8 5000      3625            jnc     L029018?
0EDA 90CFC8    3626            mov     dptr,#_ReadHX711_j_1_174
0EDD E0        3627            movx    a,@dptr
0EDE 2401      3628            add     a,#0x01
0EE0 F0        3629            movx    @dptr,a
0EE1 8000      3630            sjmp    L029015?
0EE3           3631   L029018?:
0EE3           3632   ;        main.c:834: PD_SCK = 0;
0EE3 C2A5      3633            clr     _P2_5
0EE5           3634   ;        main.c:835: for (j = 0; j < 4; j++);
0EE5 90CFC8    3635            mov     dptr,#_ReadHX711_j_1_174
0EE8 E4        3636            clr     a
0EE9 F0        3637            movx    @dptr,a
0EEA           3638   L029019?:
0EEA 90CFC8    3639            mov     dptr,#_ReadHX711_j_1_174
0EED E0        3640            movx    a,@dptr
0EEE FA        3641            mov     r2,a
0EEF C3        3642            clr     c
0EF0 6480      3643            xrl     a,#0x80
0EF2 9484      3644            subb    a,#0x84
0EF4 5000      3645            jnc     L029022?
0EF6 90CFC8    3646            mov     dptr,#_ReadHX711_j_1_174
0EF9 E0        3647            movx    a,@dptr
0EFA 2401      3648            add     a,#0x01
0EFC F0        3649            movx    @dptr,a
0EFD 8000      3650            sjmp    L029019?
0EFF           3651   L029022?:
0EFF           3652   ;        main.c:836: ans = (dataa % 1000000)/10;
0EFF 90CF78    3653            mov     dptr,#_ReadHX711_dataa_1_174
0F02 E0        3654            movx    a,@dptr
0F03 FA        3655            mov     r2,a
0F04 A3        3656            inc     dptr
0F05 E0        3657            movx    a,@dptr
0F06 FB        3658            mov     r3,a
0F07 A3        3659            inc     dptr
0F08 E0        3660            movx    a,@dptr
0F09 FC        3661            mov     r4,a
0F0A A3        3662            inc     dptr
0F0B E0        3663            movx    a,@dptr
0F0C FD        3664            mov     r5,a
0F0D 750040    3665            mov     __modulong_PARM_2,#0x40
0F10 750142    3666            mov     (__modulong_PARM_2 + 1),#0x42
0F13 75020F    3667            mov     (__modulong_PARM_2 + 2),#0x0F
0F16 750300    3668            mov     (__modulong_PARM_2 + 3),#0x00
0F19 8A82      3669            mov     dpl,r2
0F1B 8B83      3670            mov     dph,r3
0F1D 8CF0      3671            mov     b,r4
0F1F ED        3672            mov     a,r5
0F20 120000    3673            lcall   __modulong
0F23 AA82      3674            mov     r2,dpl
0F25 AB83      3675            mov     r3,dph
0F27 ACF0      3676            mov     r4,b
0F29 FD        3677            mov     r5,a
0F2A 75000A    3678            mov     __divulong_PARM_2,#0x0A
0F2D E4        3679            clr     a
0F2E F501      3680            mov     (__divulong_PARM_2 + 1),a
0F30 F502      3681            mov     (__divulong_PARM_2 + 2),a
0F32 F503      3682            mov     (__divulong_PARM_2 + 3),a
0F34 8A82      3683            mov     dpl,r2
0F36 8B83      3684            mov     dph,r3
0F38 8CF0      3685            mov     b,r4
0F3A ED        3686            mov     a,r5
0F3B           3687   ;        main.c:837: return ans;
0F3B 020000    3688            ljmp    __divulong
0F3E           3689   ;------------------------------------------------------------
0F3E           3690   ;Allocation info for local variables in function 'Timer5_ISR'
0F3E           3691   ;------------------------------------------------------------
0F3E           3692   ;------------------------------------------------------------
0F3E           3693   ;        main.c:840: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0F3E           3694   ;        -----------------------------------------
0F3E           3695   ;         function Timer5_ISR
0F3E           3696   ;        -----------------------------------------
0F3E           3697   _Timer5_ISR:
0F3E C0A8      3698            push    bits
0F40 C0E0      3699            push    acc
0F42 C0F0      3700            push    b
0F44 C082      3701            push    dpl
0F46 C083      3702            push    dph
0F48 C002      3703            push    (0+2)
0F4A C003      3704            push    (0+3)
0F4C C004      3705            push    (0+4)
0F4E C005      3706            push    (0+5)
0F50 C006      3707            push    (0+6)
0F52 C007      3708            push    (0+7)
0F54 C000      3709            push    (0+0)
0F56 C001      3710            push    (0+1)
0F58 C0D0      3711            push    psw
0F5A 75D000    3712            mov     psw,#0x00
0F5D           3713   ;        main.c:842: SFRPAGE=0x10;
0F5D 75A710    3714            mov     _SFRPAGE,#0x10
0F60           3715   ;        main.c:843: TF5H = 0; // Clear Timer5 interrupt flag
0F60 C2C7      3716            clr     _TF5H
0F62           3717   ;        main.c:844: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0F62 75D2C4    3718            mov     _TMR5RL,#0xC4
0F65 75D3FF    3719            mov     (_TMR5RL >> 8),#0xFF
0F68           3720   ;        main.c:846: fre_mea_count++;
0F68 904F10    3721            mov     dptr,#_fre_mea_count
0F6B E0        3722            movx    a,@dptr
0F6C 2401      3723            add     a,#0x01
0F6E F0        3724            movx    @dptr,a
0F6F A3        3725            inc     dptr
0F70 E0        3726            movx    a,@dptr
0F71 3400      3727            addc    a,#0x00
0F73 F0        3728            movx    @dptr,a
0F74           3729   ;        main.c:847: if(fre_mea_count == 1000){
0F74 904F10    3730            mov     dptr,#_fre_mea_count
0F77 E0        3731            movx    a,@dptr
0F78 FA        3732            mov     r2,a
0F79 A3        3733            inc     dptr
0F7A E0        3734            movx    a,@dptr
0F7B FB        3735            mov     r3,a
0F7C BAE8F0    3736            cjne    r2,#0xE8,L030004?
0F7F BB03F0    3737            cjne    r3,#0x03,L030004?
0F82           3738   ;        main.c:848: fre_mea_count = 0;
0F82 904F10    3739            mov     dptr,#_fre_mea_count
0F85 E4        3740            clr     a
0F86 F0        3741            movx    @dptr,a
0F87 A3        3742            inc     dptr
0F88 F0        3743            movx    @dptr,a
0F89           3744   ;        main.c:849: if(mea_yes){
0F89 904D00    3745            mov     dptr,#_mea_yes
0F8C E0        3746            movx    a,@dptr
0F8D FA        3747            mov     r2,a
0F8E 6000      3748            jz      L030004?
0F90           3749   ;        main.c:850: freq100 = get_freq();
0F90 120000    3750            lcall   _get_freq
0F93 AA82      3751            mov     r2,dpl
0F95 AB83      3752            mov     r3,dph
0F97 905690    3753            mov     dptr,#_freq100
0F9A EA        3754            mov     a,r2
0F9B F0        3755            movx    @dptr,a
0F9C A3        3756            inc     dptr
0F9D EB        3757            mov     a,r3
0F9E F0        3758            movx    @dptr,a
0F9F EB        3759            mov     a,r3
0FA0 33        3760            rlc     a
0FA1 95E0      3761            subb    a,acc
0FA3 A3        3762            inc     dptr
0FA4 F0        3763            movx    @dptr,a
0FA5 A3        3764            inc     dptr
0FA6 F0        3765            movx    @dptr,a
0FA7           3766   L030004?:
0FA7           3767   ;        main.c:854: weight_mea_count++;
0FA7 904ED0    3768            mov     dptr,#_weight_mea_count
0FAA E0        3769            movx    a,@dptr
0FAB 2401      3770            add     a,#0x01
0FAD F0        3771            movx    @dptr,a
0FAE A3        3772            inc     dptr
0FAF E0        3773            movx    a,@dptr
0FB0 3400      3774            addc    a,#0x00
0FB2 F0        3775            movx    @dptr,a
0FB3           3776   ;        main.c:855: if(weight_mea_count == 20000){
0FB3 904ED0    3777            mov     dptr,#_weight_mea_count
0FB6 E0        3778            movx    a,@dptr
0FB7 FA        3779            mov     r2,a
0FB8 A3        3780            inc     dptr
0FB9 E0        3781            movx    a,@dptr
0FBA FB        3782            mov     r3,a
0FBB BA2070    3783            cjne    r2,#0x20,L030010?
0FBE BB4E70    3784            cjne    r3,#0x4E,L030010?
0FC1           3785   ;        main.c:856: weight_mea_count = 0;
0FC1 904ED0    3786            mov     dptr,#_weight_mea_count
0FC4 E4        3787            clr     a
0FC5 F0        3788            movx    @dptr,a
0FC6 A3        3789            inc     dptr
0FC7 F0        3790            movx    @dptr,a
0FC8           3791   ;        main.c:857: if(mea_yes) distance = measure_distance();
0FC8 904D00    3792            mov     dptr,#_mea_yes
0FCB E0        3793            movx    a,@dptr
0FCC FA        3794            mov     r2,a
0FCD 6000      3795            jz      L030006?
0FCF 120000    3796            lcall   _measure_distance
0FD2 E582      3797            mov     a,dpl
0FD4 8583F0    3798            mov     b,dph
0FD7 905310    3799            mov     dptr,#_distance
0FDA F0        3800            movx    @dptr,a
0FDB A3        3801            inc     dptr
0FDC E5F0      3802            mov     a,b
0FDE F0        3803            movx    @dptr,a
0FDF           3804   L030006?:
0FDF           3805   ;        main.c:858: if(mea_yes) weight = ReadHX711();
0FDF 904D00    3806            mov     dptr,#_mea_yes
0FE2 E0        3807            movx    a,@dptr
0FE3 FA        3808            mov     r2,a
0FE4 6000      3809            jz      L030010?
0FE6 120000    3810            lcall   _ReadHX711
0FE9 E582      3811            mov     a,dpl
0FEB 8583F0    3812            mov     b,dph
0FEE 904CC0    3813            mov     dptr,#_weight
0FF1 F0        3814            movx    @dptr,a
0FF2 A3        3815            inc     dptr
0FF3 E5F0      3816            mov     a,b
0FF5 F0        3817            movx    @dptr,a
0FF6           3818   L030010?:
0FF6           3819   ;        main.c:861: pwm_counter++; 
0FF6 905210    3820            mov     dptr,#_pwm_counter
0FF9 E0        3821            movx    a,@dptr
0FFA 2401      3822            add     a,#0x01
0FFC F0        3823            movx    @dptr,a
0FFD A3        3824            inc     dptr
0FFE E0        3825            movx    a,@dptr
0FFF 3400      3826            addc    a,#0x00
1001 F0        3827            movx    @dptr,a
1002           3828   ;        main.c:862: if (pwm_counter == 100){
1002 905210    3829            mov     dptr,#_pwm_counter
1005 E0        3830            movx    a,@dptr
1006 FA        3831            mov     r2,a
1007 A3        3832            inc     dptr
1008 E0        3833            movx    a,@dptr
1009 FB        3834            mov     r3,a
100A BA64F0    3835            cjne    r2,#0x64,L030012?
100D BB00F0    3836            cjne    r3,#0x00,L030012?
1010           3837   ;        main.c:863: pwm_counter = 0; 
1010 905210    3838            mov     dptr,#_pwm_counter
1013 E4        3839            clr     a
1014 F0        3840            movx    @dptr,a
1015 A3        3841            inc     dptr
1016 F0        3842            movx    @dptr,a
1017           3843   L030012?:
1017           3844   ;        main.c:866: if (pwm_right > pwm_counter){
1017 905150    3845            mov     dptr,#_pwm_right
101A E0        3846            movx    a,@dptr
101B FA        3847            mov     r2,a
101C 905210    3848            mov     dptr,#_pwm_counter
101F E0        3849            movx    a,@dptr
1020 FB        3850            mov     r3,a
1021 A3        3851            inc     dptr
1022 E0        3852            movx    a,@dptr
1023 FC        3853            mov     r4,a
1024 7D00      3854            mov     r5,#0x00
1026 C3        3855            clr     c
1027 EB        3856            mov     a,r3
1028 9A        3857            subb    a,r2
1029 EC        3858            mov     a,r4
102A 9D        3859            subb    a,r5
102B 5000      3860            jnc     L030017?
102D           3861   ;        main.c:867: if(L_motor_dir){
102D 905110    3862            mov     dptr,#_L_motor_dir
1030 E0        3863            movx    a,@dptr
1031 FA        3864            mov     r2,a
1032 6000      3865            jz      L030014?
1034           3866   ;        main.c:868: L_bridge_1 = 1; 
1034 D2A1      3867            setb    _P2_1
1036           3868   ;        main.c:869: L_bridge_2 = 0; 
1036 C2A2      3869            clr     _P2_2
1038 8000      3870            sjmp    L030018?
103A           3871   L030014?:
103A           3872   ;        main.c:872: L_bridge_1 = 0; 
103A C2A1      3873            clr     _P2_1
103C           3874   ;        main.c:873: L_bridge_2 = 1; 
103C D2A2      3875            setb    _P2_2
103E 8000      3876            sjmp    L030018?
1040           3877   L030017?:
1040           3878   ;        main.c:877: L_bridge_1 = 0; 
1040 C2A1      3879            clr     _P2_1
1042           3880   ;        main.c:878: L_bridge_2 = 0; 
1042 C2A2      3881            clr     _P2_2
1044           3882   L030018?:
1044           3883   ;        main.c:880: if (pwm_left > pwm_counter){
1044 905190    3884            mov     dptr,#_pwm_left
1047 E0        3885            movx    a,@dptr
1048 FA        3886            mov     r2,a
1049 7D00      3887            mov     r5,#0x00
104B C3        3888            clr     c
104C EB        3889            mov     a,r3
104D 9A        3890            subb    a,r2
104E EC        3891            mov     a,r4
104F 9D        3892            subb    a,r5
1050 5000      3893            jnc     L030023?
1052           3894   ;        main.c:881: if (R_motor_dir){
1052 9050D0    3895            mov     dptr,#_R_motor_dir
1055 E0        3896            movx    a,@dptr
1056 FA        3897            mov     r2,a
1057 6000      3898            jz      L030020?
1059           3899   ;        main.c:882: R_bridge_1 = 1; 
1059 D2A4      3900            setb    _P2_4
105B           3901   ;        main.c:883: R_bridge_2 = 0;
105B C2A3      3902            clr     _P2_3
105D 8000      3903            sjmp    L030024?
105F           3904   L030020?:
105F           3905   ;        main.c:886: R_bridge_1 = 0; 
105F C2A4      3906            clr     _P2_4
1061           3907   ;        main.c:887: R_bridge_2 = 1;
1061 D2A3      3908            setb    _P2_3
1063 8000      3909            sjmp    L030024?
1065           3910   L030023?:
1065           3911   ;        main.c:891: R_bridge_1 = 0; 
1065 C2A4      3912            clr     _P2_4
1067           3913   ;        main.c:892: R_bridge_2 = 0; 
1067 C2A3      3914            clr     _P2_3
1069           3915   L030024?:
1069           3916   ;        main.c:895: servo_counter++;
1069 9051D0    3917            mov     dptr,#_servo_counter
106C E0        3918            movx    a,@dptr
106D 2401      3919            add     a,#0x01
106F F0        3920            movx    @dptr,a
1070 A3        3921            inc     dptr
1071 E0        3922            movx    a,@dptr
1072 3400      3923            addc    a,#0x00
1074 F0        3924            movx    @dptr,a
1075           3925   ;        main.c:896: if(servo_counter==2000)
1075 9051D0    3926            mov     dptr,#_servo_counter
1078 E0        3927            movx    a,@dptr
1079 FA        3928            mov     r2,a
107A A3        3929            inc     dptr
107B E0        3930            movx    a,@dptr
107C FB        3931            mov     r3,a
107D BAD0B0    3932            cjne    r2,#0xD0,L030026?
1080 BB07B0    3933            cjne    r3,#0x07,L030026?
1083           3934   ;        main.c:898: servo_counter=0;
1083 9051D0    3935            mov     dptr,#_servo_counter
1086 E4        3936            clr     a
1087 F0        3937            movx    @dptr,a
1088 A3        3938            inc     dptr
1089 F0        3939            movx    @dptr,a
108A           3940   ;        main.c:899: Servo_arm=1;
108A D296      3941            setb    _P1_6
108C           3942   ;        main.c:900: Servo_base=1;
108C D297      3943            setb    _P1_7
108E           3944   L030026?:
108E           3945   ;        main.c:902: if(servo_arm>=servo_counter)
108E 905050    3946            mov     dptr,#_servo_arm
1091 E0        3947            movx    a,@dptr
1092 FA        3948            mov     r2,a
1093 9051D0    3949            mov     dptr,#_servo_counter
1096 E0        3950            movx    a,@dptr
1097 FB        3951            mov     r3,a
1098 A3        3952            inc     dptr
1099 E0        3953            movx    a,@dptr
109A FC        3954            mov     r4,a
109B 7D00      3955            mov     r5,#0x00
109D C3        3956            clr     c
109E EA        3957            mov     a,r2
109F 9B        3958            subb    a,r3
10A0 ED        3959            mov     a,r5
10A1 9C        3960            subb    a,r4
10A2 4000      3961            jc      L030028?
10A4           3962   ;        main.c:904: Servo_arm = 1;
10A4 D296      3963            setb    _P1_6
10A6 8000      3964            sjmp    L030029?
10A8           3965   L030028?:
10A8           3966   ;        main.c:908: Servo_arm = 0; 
10A8 C296      3967            clr     _P1_6
10AA           3968   L030029?:
10AA           3969   ;        main.c:910: if(servo_base>=servo_counter)
10AA 905090    3970            mov     dptr,#_servo_base
10AD E0        3971            movx    a,@dptr
10AE FA        3972            mov     r2,a
10AF 7D00      3973            mov     r5,#0x00
10B1 C3        3974            clr     c
10B2 EA        3975            mov     a,r2
10B3 9B        3976            subb    a,r3
10B4 ED        3977            mov     a,r5
10B5 9C        3978            subb    a,r4
10B6 4000      3979            jc      L030031?
10B8           3980   ;        main.c:912: Servo_base = 1;
10B8 D297      3981            setb    _P1_7
10BA 8000      3982            sjmp    L030033?
10BC           3983   L030031?:
10BC           3984   ;        main.c:916: Servo_base = 0; 
10BC C297      3985            clr     _P1_7
10BE           3986   L030033?:
10BE D0D0      3987            pop     psw
10C0 D001      3988            pop     (0+1)
10C2 D000      3989            pop     (0+0)
10C4 D007      3990            pop     (0+7)
10C6 D006      3991            pop     (0+6)
10C8 D005      3992            pop     (0+5)
10CA D004      3993            pop     (0+4)
10CC D003      3994            pop     (0+3)
10CE D002      3995            pop     (0+2)
10D0 D083      3996            pop     dph
10D2 D082      3997            pop     dpl
10D4 D0F0      3998            pop     b
10D6 D0E0      3999            pop     acc
10D8 D0A8      4000            pop     bits
10DA 32        4001            reti
10DB           4002   ;------------------------------------------------------------
10DB           4003   ;Allocation info for local variables in function 'servo_pick'
10DB           4004   ;------------------------------------------------------------
10DB           4005   ;------------------------------------------------------------
10DB           4006   ;        main.c:920: void servo_pick(){
10DB           4007   ;        -----------------------------------------
10DB           4008   ;         function servo_pick
10DB           4009   ;        -----------------------------------------
10DB           4010   _servo_pick:
10DB           4011   ;        main.c:921: servo_arm = 50;
10DB 905050    4012            mov     dptr,#_servo_arm
10DE 7432      4013            mov     a,#0x32
10E0 F0        4014            movx    @dptr,a
10E1           4015   ;        main.c:922: servo_base = 50;
10E1 905090    4016            mov     dptr,#_servo_base
10E4 7432      4017            mov     a,#0x32
10E6 F0        4018            movx    @dptr,a
10E7           4019   ;        main.c:923: waitms(500);
10E7 9001F4    4020            mov     dptr,#0x01F4
10EA 120000    4021            lcall   _waitms
10ED           4022   ;        main.c:924: for (i_loo=50; i_loo <= 210; i_loo+=20)
10ED 905290    4023            mov     dptr,#_i_loo
10F0 7432      4024            mov     a,#0x32
10F2 F0        4025            movx    @dptr,a
10F3 E4        4026            clr     a
10F4 A3        4027            inc     dptr
10F5 F0        4028            movx    @dptr,a
10F6           4029   L031001?:
10F6 905290    4030            mov     dptr,#_i_loo
10F9 E0        4031            movx    a,@dptr
10FA FA        4032            mov     r2,a
10FB A3        4033            inc     dptr
10FC E0        4034            movx    a,@dptr
10FD FB        4035            mov     r3,a
10FE C3        4036            clr     c
10FF 74D2      4037            mov     a,#0xD2
1101 9A        4038            subb    a,r2
1102 E4        4039            clr     a
1103 6480      4040            xrl     a,#0x80
1105 8BF0      4041            mov     b,r3
1107 63F080    4042            xrl     b,#0x80
110A 95F0      4043            subb    a,b
110C 4000      4044            jc      L031004?
110E           4045   ;        main.c:926: servo_base = i_loo; 
110E 905090    4046            mov     dptr,#_servo_base
1111 EA        4047            mov     a,r2
1112 F0        4048            movx    @dptr,a
1113           4049   ;        main.c:927: waitms(25);
1113 900019    4050            mov     dptr,#0x0019
1116 120000    4051            lcall   _waitms
1119           4052   ;        main.c:924: for (i_loo=50; i_loo <= 210; i_loo+=20)
1119 905290    4053            mov     dptr,#_i_loo
111C E0        4054            movx    a,@dptr
111D FA        4055            mov     r2,a
111E A3        4056            inc     dptr
111F E0        4057            movx    a,@dptr
1120 FB        4058            mov     r3,a
1121 905290    4059            mov     dptr,#_i_loo
1124 7414      4060            mov     a,#0x14
1126 2A        4061            add     a,r2
1127 F0        4062            movx    @dptr,a
1128 E4        4063            clr     a
1129 3B        4064            addc    a,r3
112A A3        4065            inc     dptr
112B F0        4066            movx    @dptr,a
112C 8000      4067            sjmp    L031001?
112E           4068   L031004?:
112E           4069   ;        main.c:929: waitms(500);
112E 9001F4    4070            mov     dptr,#0x01F4
1131 120000    4071            lcall   _waitms
1134           4072   ;        main.c:930: for(i_loo = 50; i_loo <= 250; i_loo+=20)
1134 905290    4073            mov     dptr,#_i_loo
1137 7432      4074            mov     a,#0x32
1139 F0        4075            movx    @dptr,a
113A E4        4076            clr     a
113B A3        4077            inc     dptr
113C F0        4078            movx    @dptr,a
113D           4079   L031005?:
113D 905290    4080            mov     dptr,#_i_loo
1140 E0        4081            movx    a,@dptr
1141 FA        4082            mov     r2,a
1142 A3        4083            inc     dptr
1143 E0        4084            movx    a,@dptr
1144 FB        4085            mov     r3,a
1145 C3        4086            clr     c
1146 74FA      4087            mov     a,#0xFA
1148 9A        4088            subb    a,r2
1149 E4        4089            clr     a
114A 6480      4090            xrl     a,#0x80
114C 8BF0      4091            mov     b,r3
114E 63F080    4092            xrl     b,#0x80
1151 95F0      4093            subb    a,b
1153 4000      4094            jc      L031008?
1155           4095   ;        main.c:932: servo_arm = i_loo; 
1155 905050    4096            mov     dptr,#_servo_arm
1158 EA        4097            mov     a,r2
1159 F0        4098            movx    @dptr,a
115A           4099   ;        main.c:933: waitms(25);
115A 900019    4100            mov     dptr,#0x0019
115D 120000    4101            lcall   _waitms
1160           4102   ;        main.c:930: for(i_loo = 50; i_loo <= 250; i_loo+=20)
1160 905290    4103            mov     dptr,#_i_loo
1163 E0        4104            movx    a,@dptr
1164 FA        4105            mov     r2,a
1165 A3        4106            inc     dptr
1166 E0        4107            movx    a,@dptr
1167 FB        4108            mov     r3,a
1168 905290    4109            mov     dptr,#_i_loo
116B 7414      4110            mov     a,#0x14
116D 2A        4111            add     a,r2
116E F0        4112            movx    @dptr,a
116F E4        4113            clr     a
1170 3B        4114            addc    a,r3
1171 A3        4115            inc     dptr
1172 F0        4116            movx    @dptr,a
1173 8000      4117            sjmp    L031005?
1175           4118   L031008?:
1175           4119   ;        main.c:935: Magnet = 1; 
1175 D295      4120            setb    _P1_5
1177           4121   ;        main.c:936: waitms(500);
1177 9001F4    4122            mov     dptr,#0x01F4
117A 120000    4123            lcall   _waitms
117D           4124   ;        main.c:937: for(i_loo = 200; i_loo >= 110; i_loo-=10){
117D 905290    4125            mov     dptr,#_i_loo
1180 74C8      4126            mov     a,#0xC8
1182 F0        4127            movx    @dptr,a
1183 E4        4128            clr     a
1184 A3        4129            inc     dptr
1185 F0        4130            movx    @dptr,a
1186           4131   L031009?:
1186 905290    4132            mov     dptr,#_i_loo
1189 E0        4133            movx    a,@dptr
118A FA        4134            mov     r2,a
118B A3        4135            inc     dptr
118C E0        4136            movx    a,@dptr
118D FB        4137            mov     r3,a
118E C3        4138            clr     c
118F EA        4139            mov     a,r2
1190 946E      4140            subb    a,#0x6E
1192 EB        4141            mov     a,r3
1193 6480      4142            xrl     a,#0x80
1195 9480      4143            subb    a,#0x80
1197 4000      4144            jc      L031012?
1199           4145   ;        main.c:938: waitms(25);
1199 900019    4146            mov     dptr,#0x0019
119C 120000    4147            lcall   _waitms
119F           4148   ;        main.c:939: servo_base = i_loo;
119F 905290    4149            mov     dptr,#_i_loo
11A2 E0        4150            movx    a,@dptr
11A3 FA        4151            mov     r2,a
11A4 A3        4152            inc     dptr
11A5 E0        4153            movx    a,@dptr
11A6 FB        4154            mov     r3,a
11A7 905090    4155            mov     dptr,#_servo_base
11AA EA        4156            mov     a,r2
11AB F0        4157            movx    @dptr,a
11AC           4158   ;        main.c:937: for(i_loo = 200; i_loo >= 110; i_loo-=10){
11AC EA        4159            mov     a,r2
11AD 24F6      4160            add     a,#0xf6
11AF FA        4161            mov     r2,a
11B0 EB        4162            mov     a,r3
11B1 34FF      4163            addc    a,#0xff
11B3 FB        4164            mov     r3,a
11B4 905290    4165            mov     dptr,#_i_loo
11B7 EA        4166            mov     a,r2
11B8 F0        4167            movx    @dptr,a
11B9 A3        4168            inc     dptr
11BA EB        4169            mov     a,r3
11BB F0        4170            movx    @dptr,a
11BC 8000      4171            sjmp    L031009?
11BE           4172   L031012?:
11BE           4173   ;        main.c:941: Magnet = 1; 
11BE D295      4174            setb    _P1_5
11C0           4175   ;        main.c:942: waitms(500);
11C0 9001F4    4176            mov     dptr,#0x01F4
11C3 120000    4177            lcall   _waitms
11C6           4178   ;        main.c:943: for(i_loo = 110; i_loo <= 200; i_loo+=10){
11C6 905290    4179            mov     dptr,#_i_loo
11C9 746E      4180            mov     a,#0x6E
11CB F0        4181            movx    @dptr,a
11CC E4        4182            clr     a
11CD A3        4183            inc     dptr
11CE F0        4184            movx    @dptr,a
11CF           4185   L031013?:
11CF 905290    4186            mov     dptr,#_i_loo
11D2 E0        4187            movx    a,@dptr
11D3 FA        4188            mov     r2,a
11D4 A3        4189            inc     dptr
11D5 E0        4190            movx    a,@dptr
11D6 FB        4191            mov     r3,a
11D7 C3        4192            clr     c
11D8 74C8      4193            mov     a,#0xC8
11DA 9A        4194            subb    a,r2
11DB E4        4195            clr     a
11DC 6480      4196            xrl     a,#0x80
11DE 8BF0      4197            mov     b,r3
11E0 63F080    4198            xrl     b,#0x80
11E3 95F0      4199            subb    a,b
11E5 4000      4200            jc      L031016?
11E7           4201   ;        main.c:944: waitms(25);
11E7 900019    4202            mov     dptr,#0x0019
11EA 120000    4203            lcall   _waitms
11ED           4204   ;        main.c:945: servo_base = i_loo;
11ED 905290    4205            mov     dptr,#_i_loo
11F0 E0        4206            movx    a,@dptr
11F1 FA        4207            mov     r2,a
11F2 A3        4208            inc     dptr
11F3 E0        4209            movx    a,@dptr
11F4 FB        4210            mov     r3,a
11F5 905090    4211            mov     dptr,#_servo_base
11F8 EA        4212            mov     a,r2
11F9 F0        4213            movx    @dptr,a
11FA           4214   ;        main.c:943: for(i_loo = 110; i_loo <= 200; i_loo+=10){
11FA 905290    4215            mov     dptr,#_i_loo
11FD 740A      4216            mov     a,#0x0A
11FF 2A        4217            add     a,r2
1200 F0        4218            movx    @dptr,a
1201 E4        4219            clr     a
1202 3B        4220            addc    a,r3
1203 A3        4221            inc     dptr
1204 F0        4222            movx    @dptr,a
1205 8000      4223            sjmp    L031013?
1207           4224   L031016?:
1207           4225   ;        main.c:947: Magnet = 1; 
1207 D295      4226            setb    _P1_5
1209           4227   ;        main.c:948: waitms(500);
1209 9001F4    4228            mov     dptr,#0x01F4
120C 120000    4229            lcall   _waitms
120F           4230   ;        main.c:949: for(i_loo = 240; i_loo >= 100; i_loo-=10){
120F 905290    4231            mov     dptr,#_i_loo
1212 74F0      4232            mov     a,#0xF0
1214 F0        4233            movx    @dptr,a
1215 E4        4234            clr     a
1216 A3        4235            inc     dptr
1217 F0        4236            movx    @dptr,a
1218           4237   L031017?:
1218 905290    4238            mov     dptr,#_i_loo
121B E0        4239            movx    a,@dptr
121C FA        4240            mov     r2,a
121D A3        4241            inc     dptr
121E E0        4242            movx    a,@dptr
121F FB        4243            mov     r3,a
1220 C3        4244            clr     c
1221 EA        4245            mov     a,r2
1222 9464      4246            subb    a,#0x64
1224 EB        4247            mov     a,r3
1225 6480      4248            xrl     a,#0x80
1227 9480      4249            subb    a,#0x80
1229 4000      4250            jc      L031020?
122B           4251   ;        main.c:950: waitms(25);
122B 900019    4252            mov     dptr,#0x0019
122E 120000    4253            lcall   _waitms
1231           4254   ;        main.c:951: servo_arm = i_loo;
1231 905290    4255            mov     dptr,#_i_loo
1234 E0        4256            movx    a,@dptr
1235 FA        4257            mov     r2,a
1236 A3        4258            inc     dptr
1237 E0        4259            movx    a,@dptr
1238 FB        4260            mov     r3,a
1239 905050    4261            mov     dptr,#_servo_arm
123C EA        4262            mov     a,r2
123D F0        4263            movx    @dptr,a
123E           4264   ;        main.c:952: Magnet = 1; 
123E D295      4265            setb    _P1_5
1240           4266   ;        main.c:949: for(i_loo = 240; i_loo >= 100; i_loo-=10){
1240 EA        4267            mov     a,r2
1241 24F6      4268            add     a,#0xf6
1243 FA        4269            mov     r2,a
1244 EB        4270            mov     a,r3
1245 34FF      4271            addc    a,#0xff
1247 FB        4272            mov     r3,a
1248 905290    4273            mov     dptr,#_i_loo
124B EA        4274            mov     a,r2
124C F0        4275            movx    @dptr,a
124D A3        4276            inc     dptr
124E EB        4277            mov     a,r3
124F F0        4278            movx    @dptr,a
1250 8000      4279            sjmp    L031017?
1252           4280   L031020?:
1252           4281   ;        main.c:954: Magnet = 1; 
1252 D295      4282            setb    _P1_5
1254           4283   ;        main.c:955: waitms(500);
1254 9001F4    4284            mov     dptr,#0x01F4
1257 120000    4285            lcall   _waitms
125A           4286   ;        main.c:956: for(i_loo = 200; i_loo >= 90; i_loo-=10){
125A 905290    4287            mov     dptr,#_i_loo
125D 74C8      4288            mov     a,#0xC8
125F F0        4289            movx    @dptr,a
1260 E4        4290            clr     a
1261 A3        4291            inc     dptr
1262 F0        4292            movx    @dptr,a
1263           4293   L031021?:
1263 905290    4294            mov     dptr,#_i_loo
1266 E0        4295            movx    a,@dptr
1267 FA        4296            mov     r2,a
1268 A3        4297            inc     dptr
1269 E0        4298            movx    a,@dptr
126A FB        4299            mov     r3,a
126B C3        4300            clr     c
126C EA        4301            mov     a,r2
126D 945A      4302            subb    a,#0x5A
126F EB        4303            mov     a,r3
1270 6480      4304            xrl     a,#0x80
1272 9480      4305            subb    a,#0x80
1274 4000      4306            jc      L031024?
1276           4307   ;        main.c:957: waitms(25);
1276 900019    4308            mov     dptr,#0x0019
1279 120000    4309            lcall   _waitms
127C           4310   ;        main.c:958: servo_base = i_loo;
127C 905290    4311            mov     dptr,#_i_loo
127F E0        4312            movx    a,@dptr
1280 FA        4313            mov     r2,a
1281 A3        4314            inc     dptr
1282 E0        4315            movx    a,@dptr
1283 FB        4316            mov     r3,a
1284 905090    4317            mov     dptr,#_servo_base
1287 EA        4318            mov     a,r2
1288 F0        4319            movx    @dptr,a
1289           4320   ;        main.c:959: Magnet = 1; 
1289 D295      4321            setb    _P1_5
128B           4322   ;        main.c:956: for(i_loo = 200; i_loo >= 90; i_loo-=10){
128B EA        4323            mov     a,r2
128C 24F6      4324            add     a,#0xf6
128E FA        4325            mov     r2,a
128F EB        4326            mov     a,r3
1290 34FF      4327            addc    a,#0xff
1292 FB        4328            mov     r3,a
1293 905290    4329            mov     dptr,#_i_loo
1296 EA        4330            mov     a,r2
1297 F0        4331            movx    @dptr,a
1298 A3        4332            inc     dptr
1299 EB        4333            mov     a,r3
129A F0        4334            movx    @dptr,a
129B 8000      4335            sjmp    L031021?
129D           4336   L031024?:
129D           4337   ;        main.c:961: Magnet = 1; 
129D D295      4338            setb    _P1_5
129F           4339   ;        main.c:962: waitms(500);
129F 9001F4    4340            mov     dptr,#0x01F4
12A2 120000    4341            lcall   _waitms
12A5           4342   ;        main.c:963: Magnet = 0;
12A5 C295      4343            clr     _P1_5
12A7           4344   ;        main.c:964: waitms(500);
12A7 9001F4    4345            mov     dptr,#0x01F4
12AA 120000    4346            lcall   _waitms
12AD           4347   ;        main.c:965: for (i_loo = 100; i_loo >=50 ; i_loo-=10){
12AD 905290    4348            mov     dptr,#_i_loo
12B0 7464      4349            mov     a,#0x64
12B2 F0        4350            movx    @dptr,a
12B3 E4        4351            clr     a
12B4 A3        4352            inc     dptr
12B5 F0        4353            movx    @dptr,a
12B6           4354   L031025?:
12B6 905290    4355            mov     dptr,#_i_loo
12B9 E0        4356            movx    a,@dptr
12BA FA        4357            mov     r2,a
12BB A3        4358            inc     dptr
12BC E0        4359            movx    a,@dptr
12BD FB        4360            mov     r3,a
12BE C3        4361            clr     c
12BF EA        4362            mov     a,r2
12C0 9432      4363            subb    a,#0x32
12C2 EB        4364            mov     a,r3
12C3 6480      4365            xrl     a,#0x80
12C5 9480      4366            subb    a,#0x80
12C7 4000      4367            jc      L031028?
12C9           4368   ;        main.c:966: servo_arm = i_loo; 
12C9 905050    4369            mov     dptr,#_servo_arm
12CC EA        4370            mov     a,r2
12CD F0        4371            movx    @dptr,a
12CE           4372   ;        main.c:967: waitms(25);
12CE 900019    4373            mov     dptr,#0x0019
12D1 120000    4374            lcall   _waitms
12D4           4375   ;        main.c:965: for (i_loo = 100; i_loo >=50 ; i_loo-=10){
12D4 905290    4376            mov     dptr,#_i_loo
12D7 E0        4377            movx    a,@dptr
12D8 FA        4378            mov     r2,a
12D9 A3        4379            inc     dptr
12DA E0        4380            movx    a,@dptr
12DB FB        4381            mov     r3,a
12DC EA        4382            mov     a,r2
12DD 24F6      4383            add     a,#0xf6
12DF FA        4384            mov     r2,a
12E0 EB        4385            mov     a,r3
12E1 34FF      4386            addc    a,#0xff
12E3 FB        4387            mov     r3,a
12E4 905290    4388            mov     dptr,#_i_loo
12E7 EA        4389            mov     a,r2
12E8 F0        4390            movx    @dptr,a
12E9 A3        4391            inc     dptr
12EA EB        4392            mov     a,r3
12EB F0        4393            movx    @dptr,a
12EC 8000      4394            sjmp    L031025?
12EE           4395   L031028?:
12EE           4396   ;        main.c:969: waitms(500);
12EE 9001F4    4397            mov     dptr,#0x01F4
12F1 120000    4398            lcall   _waitms
12F4           4399   ;        main.c:970: for (i_loo = 90; i_loo >= 50; i_loo-=10){
12F4 905290    4400            mov     dptr,#_i_loo
12F7 745A      4401            mov     a,#0x5A
12F9 F0        4402            movx    @dptr,a
12FA E4        4403            clr     a
12FB A3        4404            inc     dptr
12FC F0        4405            movx    @dptr,a
12FD           4406   L031029?:
12FD 905290    4407            mov     dptr,#_i_loo
1300 E0        4408            movx    a,@dptr
1301 FA        4409            mov     r2,a
1302 A3        4410            inc     dptr
1303 E0        4411            movx    a,@dptr
1304 FB        4412            mov     r3,a
1305 C3        4413            clr     c
1306 EA        4414            mov     a,r2
1307 9432      4415            subb    a,#0x32
1309 EB        4416            mov     a,r3
130A 6480      4417            xrl     a,#0x80
130C 9480      4418            subb    a,#0x80
130E 4000      4419            jc      L031032?
1310           4420   ;        main.c:971: servo_base = i_loo; 
1310 905090    4421            mov     dptr,#_servo_base
1313 EA        4422            mov     a,r2
1314 F0        4423            movx    @dptr,a
1315           4424   ;        main.c:972: waitms(25);
1315 900019    4425            mov     dptr,#0x0019
1318 120000    4426            lcall   _waitms
131B           4427   ;        main.c:970: for (i_loo = 90; i_loo >= 50; i_loo-=10){
131B 905290    4428            mov     dptr,#_i_loo
131E E0        4429            movx    a,@dptr
131F FA        4430            mov     r2,a
1320 A3        4431            inc     dptr
1321 E0        4432            movx    a,@dptr
1322 FB        4433            mov     r3,a
1323 EA        4434            mov     a,r2
1324 24F6      4435            add     a,#0xf6
1326 FA        4436            mov     r2,a
1327 EB        4437            mov     a,r3
1328 34FF      4438            addc    a,#0xff
132A FB        4439            mov     r3,a
132B 905290    4440            mov     dptr,#_i_loo
132E EA        4441            mov     a,r2
132F F0        4442            movx    @dptr,a
1330 A3        4443            inc     dptr
1331 EB        4444            mov     a,r3
1332 F0        4445            movx    @dptr,a
1333 8000      4446            sjmp    L031029?
1335           4447   L031032?:
1335           4448   ;        main.c:974: return;
1335 22        4449            ret
1336           4450   ;------------------------------------------------------------
1336           4451   ;Allocation info for local variables in function 'servo_push'
1336           4452   ;------------------------------------------------------------
1336           4453   ;------------------------------------------------------------
1336           4454   ;        main.c:977: void servo_push(void)
1336           4455   ;        -----------------------------------------
1336           4456   ;         function servo_push
1336           4457   ;        -----------------------------------------
1336           4458   _servo_push:
1336           4459   ;        main.c:979: servo_arm = 50;
1336 905050    4460            mov     dptr,#_servo_arm
1339 7432      4461            mov     a,#0x32
133B F0        4462            movx    @dptr,a
133C           4463   ;        main.c:980: servo_base = 50;
133C 905090    4464            mov     dptr,#_servo_base
133F 7432      4465            mov     a,#0x32
1341 F0        4466            movx    @dptr,a
1342           4467   ;        main.c:981: waitms(500);
1342 9001F4    4468            mov     dptr,#0x01F4
1345 120000    4469            lcall   _waitms
1348           4470   ;        main.c:982: for (i_loo=50; i_loo <= 130; i_loo+=10)
1348 905290    4471            mov     dptr,#_i_loo
134B 7432      4472            mov     a,#0x32
134D F0        4473            movx    @dptr,a
134E E4        4474            clr     a
134F A3        4475            inc     dptr
1350 F0        4476            movx    @dptr,a
1351           4477   L032001?:
1351 905290    4478            mov     dptr,#_i_loo
1354 E0        4479            movx    a,@dptr
1355 FA        4480            mov     r2,a
1356 A3        4481            inc     dptr
1357 E0        4482            movx    a,@dptr
1358 FB        4483            mov     r3,a
1359 C3        4484            clr     c
135A 7482      4485            mov     a,#0x82
135C 9A        4486            subb    a,r2
135D E4        4487            clr     a
135E 6480      4488            xrl     a,#0x80
1360 8BF0      4489            mov     b,r3
1362 63F080    4490            xrl     b,#0x80
1365 95F0      4491            subb    a,b
1367 4000      4492            jc      L032004?
1369           4493   ;        main.c:984: servo_base = i_loo; 
1369 905090    4494            mov     dptr,#_servo_base
136C EA        4495            mov     a,r2
136D F0        4496            movx    @dptr,a
136E           4497   ;        main.c:985: waitms(25);
136E 900019    4498            mov     dptr,#0x0019
1371 120000    4499            lcall   _waitms
1374           4500   ;        main.c:982: for (i_loo=50; i_loo <= 130; i_loo+=10)
1374 905290    4501            mov     dptr,#_i_loo
1377 E0        4502            movx    a,@dptr
1378 FA        4503            mov     r2,a
1379 A3        4504            inc     dptr
137A E0        4505            movx    a,@dptr
137B FB        4506            mov     r3,a
137C 905290    4507            mov     dptr,#_i_loo
137F 740A      4508            mov     a,#0x0A
1381 2A        4509            add     a,r2
1382 F0        4510            movx    @dptr,a
1383 E4        4511            clr     a
1384 3B        4512            addc    a,r3
1385 A3        4513            inc     dptr
1386 F0        4514            movx    @dptr,a
1387 8000      4515            sjmp    L032001?
1389           4516   L032004?:
1389           4517   ;        main.c:987: waitms(200);
1389 9000C8    4518            mov     dptr,#0x00C8
138C 120000    4519            lcall   _waitms
138F           4520   ;        main.c:988: for (i_loo=50; i_loo <= 130; i_loo+=10)
138F 905290    4521            mov     dptr,#_i_loo
1392 7432      4522            mov     a,#0x32
1394 F0        4523            movx    @dptr,a
1395 E4        4524            clr     a
1396 A3        4525            inc     dptr
1397 F0        4526            movx    @dptr,a
1398           4527   L032005?:
1398 905290    4528            mov     dptr,#_i_loo
139B E0        4529            movx    a,@dptr
139C FA        4530            mov     r2,a
139D A3        4531            inc     dptr
139E E0        4532            movx    a,@dptr
139F FB        4533            mov     r3,a
13A0 C3        4534            clr     c
13A1 7482      4535            mov     a,#0x82
13A3 9A        4536            subb    a,r2
13A4 E4        4537            clr     a
13A5 6480      4538            xrl     a,#0x80
13A7 8BF0      4539            mov     b,r3
13A9 63F080    4540            xrl     b,#0x80
13AC 95F0      4541            subb    a,b
13AE 4000      4542            jc      L032008?
13B0           4543   ;        main.c:990: servo_arm = i_loo; 
13B0 905050    4544            mov     dptr,#_servo_arm
13B3 EA        4545            mov     a,r2
13B4 F0        4546            movx    @dptr,a
13B5           4547   ;        main.c:991: waitms(25);
13B5 900019    4548            mov     dptr,#0x0019
13B8 120000    4549            lcall   _waitms
13BB           4550   ;        main.c:988: for (i_loo=50; i_loo <= 130; i_loo+=10)
13BB 905290    4551            mov     dptr,#_i_loo
13BE E0        4552            movx    a,@dptr
13BF FA        4553            mov     r2,a
13C0 A3        4554            inc     dptr
13C1 E0        4555            movx    a,@dptr
13C2 FB        4556            mov     r3,a
13C3 905290    4557            mov     dptr,#_i_loo
13C6 740A      4558            mov     a,#0x0A
13C8 2A        4559            add     a,r2
13C9 F0        4560            movx    @dptr,a
13CA E4        4561            clr     a
13CB 3B        4562            addc    a,r3
13CC A3        4563            inc     dptr
13CD F0        4564            movx    @dptr,a
13CE 8000      4565            sjmp    L032005?
13D0           4566   L032008?:
13D0           4567   ;        main.c:993: waitms(200);
13D0 9000C8    4568            mov     dptr,#0x00C8
13D3 120000    4569            lcall   _waitms
13D6           4570   ;        main.c:994: for (i_loo=130; i_loo <= 250; i_loo+=10)
13D6 905290    4571            mov     dptr,#_i_loo
13D9 7482      4572            mov     a,#0x82
13DB F0        4573            movx    @dptr,a
13DC E4        4574            clr     a
13DD A3        4575            inc     dptr
13DE F0        4576            movx    @dptr,a
13DF           4577   L032009?:
13DF 905290    4578            mov     dptr,#_i_loo
13E2 E0        4579            movx    a,@dptr
13E3 FA        4580            mov     r2,a
13E4 A3        4581            inc     dptr
13E5 E0        4582            movx    a,@dptr
13E6 FB        4583            mov     r3,a
13E7 C3        4584            clr     c
13E8 74FA      4585            mov     a,#0xFA
13EA 9A        4586            subb    a,r2
13EB E4        4587            clr     a
13EC 6480      4588            xrl     a,#0x80
13EE 8BF0      4589            mov     b,r3
13F0 63F080    4590            xrl     b,#0x80
13F3 95F0      4591            subb    a,b
13F5 4000      4592            jc      L032012?
13F7           4593   ;        main.c:996: servo_base = i_loo; 
13F7 905090    4594            mov     dptr,#_servo_base
13FA EA        4595            mov     a,r2
13FB F0        4596            movx    @dptr,a
13FC           4597   ;        main.c:997: waitms(25);
13FC 900019    4598            mov     dptr,#0x0019
13FF 120000    4599            lcall   _waitms
1402           4600   ;        main.c:994: for (i_loo=130; i_loo <= 250; i_loo+=10)
1402 905290    4601            mov     dptr,#_i_loo
1405 E0        4602            movx    a,@dptr
1406 FA        4603            mov     r2,a
1407 A3        4604            inc     dptr
1408 E0        4605            movx    a,@dptr
1409 FB        4606            mov     r3,a
140A 905290    4607            mov     dptr,#_i_loo
140D 740A      4608            mov     a,#0x0A
140F 2A        4609            add     a,r2
1410 F0        4610            movx    @dptr,a
1411 E4        4611            clr     a
1412 3B        4612            addc    a,r3
1413 A3        4613            inc     dptr
1414 F0        4614            movx    @dptr,a
1415 8000      4615            sjmp    L032009?
1417           4616   L032012?:
1417           4617   ;        main.c:999: waitms(200);
1417 9000C8    4618            mov     dptr,#0x00C8
141A 120000    4619            lcall   _waitms
141D           4620   ;        main.c:1000: for (i_loo=250; i_loo >= 150; i_loo-=10)
141D 905290    4621            mov     dptr,#_i_loo
1420 74FA      4622            mov     a,#0xFA
1422 F0        4623            movx    @dptr,a
1423 E4        4624            clr     a
1424 A3        4625            inc     dptr
1425 F0        4626            movx    @dptr,a
1426           4627   L032013?:
1426 905290    4628            mov     dptr,#_i_loo
1429 E0        4629            movx    a,@dptr
142A FA        4630            mov     r2,a
142B A3        4631            inc     dptr
142C E0        4632            movx    a,@dptr
142D FB        4633            mov     r3,a
142E C3        4634            clr     c
142F EA        4635            mov     a,r2
1430 9496      4636            subb    a,#0x96
1432 EB        4637            mov     a,r3
1433 6480      4638            xrl     a,#0x80
1435 9480      4639            subb    a,#0x80
1437 4000      4640            jc      L032016?
1439           4641   ;        main.c:1002: servo_base = i_loo; 
1439 905090    4642            mov     dptr,#_servo_base
143C EA        4643            mov     a,r2
143D F0        4644            movx    @dptr,a
143E           4645   ;        main.c:1003: waitms(25);
143E 900019    4646            mov     dptr,#0x0019
1441 120000    4647            lcall   _waitms
1444           4648   ;        main.c:1000: for (i_loo=250; i_loo >= 150; i_loo-=10)
1444 905290    4649            mov     dptr,#_i_loo
1447 E0        4650            movx    a,@dptr
1448 FA        4651            mov     r2,a
1449 A3        4652            inc     dptr
144A E0        4653            movx    a,@dptr
144B FB        4654            mov     r3,a
144C EA        4655            mov     a,r2
144D 24F6      4656            add     a,#0xf6
144F FA        4657            mov     r2,a
1450 EB        4658            mov     a,r3
1451 34FF      4659            addc    a,#0xff
1453 FB        4660            mov     r3,a
1454 905290    4661            mov     dptr,#_i_loo
1457 EA        4662            mov     a,r2
1458 F0        4663            movx    @dptr,a
1459 A3        4664            inc     dptr
145A EB        4665            mov     a,r3
145B F0        4666            movx    @dptr,a
145C 8000      4667            sjmp    L032013?
145E           4668   L032016?:
145E           4669   ;        main.c:1005: waitms(200);
145E 9000C8    4670            mov     dptr,#0x00C8
1461 120000    4671            lcall   _waitms
1464           4672   ;        main.c:1006: for (i_loo=130; i_loo >= 50; i_loo-=10)
1464 905290    4673            mov     dptr,#_i_loo
1467 7482      4674            mov     a,#0x82
1469 F0        4675            movx    @dptr,a
146A E4        4676            clr     a
146B A3        4677            inc     dptr
146C F0        4678            movx    @dptr,a
146D           4679   L032017?:
146D 905290    4680            mov     dptr,#_i_loo
1470 E0        4681            movx    a,@dptr
1471 FA        4682            mov     r2,a
1472 A3        4683            inc     dptr
1473 E0        4684            movx    a,@dptr
1474 FB        4685            mov     r3,a
1475 C3        4686            clr     c
1476 EA        4687            mov     a,r2
1477 9432      4688            subb    a,#0x32
1479 EB        4689            mov     a,r3
147A 6480      4690            xrl     a,#0x80
147C 9480      4691            subb    a,#0x80
147E 4000      4692            jc      L032020?
1480           4693   ;        main.c:1008: servo_arm = i_loo; 
1480 905050    4694            mov     dptr,#_servo_arm
1483 EA        4695            mov     a,r2
1484 F0        4696            movx    @dptr,a
1485           4697   ;        main.c:1009: waitms(25);
1485 900019    4698            mov     dptr,#0x0019
1488 120000    4699            lcall   _waitms
148B           4700   ;        main.c:1006: for (i_loo=130; i_loo >= 50; i_loo-=10)
148B 905290    4701            mov     dptr,#_i_loo
148E E0        4702            movx    a,@dptr
148F FA        4703            mov     r2,a
1490 A3        4704            inc     dptr
1491 E0        4705            movx    a,@dptr
1492 FB        4706            mov     r3,a
1493 EA        4707            mov     a,r2
1494 24F6      4708            add     a,#0xf6
1496 FA        4709            mov     r2,a
1497 EB        4710            mov     a,r3
1498 34FF      4711            addc    a,#0xff
149A FB        4712            mov     r3,a
149B 905290    4713            mov     dptr,#_i_loo
149E EA        4714            mov     a,r2
149F F0        4715            movx    @dptr,a
14A0 A3        4716            inc     dptr
14A1 EB        4717            mov     a,r3
14A2 F0        4718            movx    @dptr,a
14A3 8000      4719            sjmp    L032017?
14A5           4720   L032020?:
14A5           4721   ;        main.c:1011: waitms(200);
14A5 9000C8    4722            mov     dptr,#0x00C8
14A8 120000    4723            lcall   _waitms
14AB           4724   ;        main.c:1012: for (i_loo=150; i_loo >= 50; i_loo-=10)
14AB 905290    4725            mov     dptr,#_i_loo
14AE 7496      4726            mov     a,#0x96
14B0 F0        4727            movx    @dptr,a
14B1 E4        4728            clr     a
14B2 A3        4729            inc     dptr
14B3 F0        4730            movx    @dptr,a
14B4           4731   L032021?:
14B4 905290    4732            mov     dptr,#_i_loo
14B7 E0        4733            movx    a,@dptr
14B8 FA        4734            mov     r2,a
14B9 A3        4735            inc     dptr
14BA E0        4736            movx    a,@dptr
14BB FB        4737            mov     r3,a
14BC C3        4738            clr     c
14BD EA        4739            mov     a,r2
14BE 9432      4740            subb    a,#0x32
14C0 EB        4741            mov     a,r3
14C1 6480      4742            xrl     a,#0x80
14C3 9480      4743            subb    a,#0x80
14C5 4000      4744            jc      L032024?
14C7           4745   ;        main.c:1014: servo_base = i_loo; 
14C7 905090    4746            mov     dptr,#_servo_base
14CA EA        4747            mov     a,r2
14CB F0        4748            movx    @dptr,a
14CC           4749   ;        main.c:1015: waitms(25);
14CC 900019    4750            mov     dptr,#0x0019
14CF 120000    4751            lcall   _waitms
14D2           4752   ;        main.c:1012: for (i_loo=150; i_loo >= 50; i_loo-=10)
14D2 905290    4753            mov     dptr,#_i_loo
14D5 E0        4754            movx    a,@dptr
14D6 FA        4755            mov     r2,a
14D7 A3        4756            inc     dptr
14D8 E0        4757            movx    a,@dptr
14D9 FB        4758            mov     r3,a
14DA EA        4759            mov     a,r2
14DB 24F6      4760            add     a,#0xf6
14DD FA        4761            mov     r2,a
14DE EB        4762            mov     a,r3
14DF 34FF      4763            addc    a,#0xff
14E1 FB        4764            mov     r3,a
14E2 905290    4765            mov     dptr,#_i_loo
14E5 EA        4766            mov     a,r2
14E6 F0        4767            movx    @dptr,a
14E7 A3        4768            inc     dptr
14E8 EB        4769            mov     a,r3
14E9 F0        4770            movx    @dptr,a
14EA 8000      4771            sjmp    L032021?
14EC           4772   L032024?:
14EC           4773   ;        main.c:1017: waitms(200);
14EC 9000C8    4774            mov     dptr,#0x00C8
14EF           4775   ;        main.c:1018: return; 
14EF 020000    4776            ljmp    _waitms
14F2           4777   ;------------------------------------------------------------
14F2           4778   ;Allocation info for local variables in function 'Move_forward_ms'
14F2           4779   ;------------------------------------------------------------
14F2           4780   ;ms                        Allocated to registers r2 r3 
14F2           4781   ;------------------------------------------------------------
14F2           4782   ;        main.c:1021: void Move_forward_ms(int ms){
14F2           4783   ;        -----------------------------------------
14F2           4784   ;         function Move_forward_ms
14F2           4785   ;        -----------------------------------------
14F2           4786   _Move_forward_ms:
14F2 AA82      4787            mov     r2,dpl
14F4 AB83      4788            mov     r3,dph
14F6           4789   ;        main.c:1023: L_motor_dir = 0;
14F6 905110    4790            mov     dptr,#_L_motor_dir
14F9           4791   ;        main.c:1024: R_motor_dir = 0;
14F9 E4        4792            clr     a
14FA F0        4793            movx    @dptr,a
14FB 9050D0    4794            mov     dptr,#_R_motor_dir
14FE F0        4795            movx    @dptr,a
14FF           4796   ;        main.c:1026: pwm_left = 50;
14FF 905190    4797            mov     dptr,#_pwm_left
1502 7432      4798            mov     a,#0x32
1504 F0        4799            movx    @dptr,a
1505           4800   ;        main.c:1027: pwm_right = 50;
1505 905150    4801            mov     dptr,#_pwm_right
1508 7432      4802            mov     a,#0x32
150A F0        4803            movx    @dptr,a
150B           4804   ;        main.c:1029: waitms(ms);
150B 8A82      4805            mov     dpl,r2
150D 8B83      4806            mov     dph,r3
150F 120000    4807            lcall   _waitms
1512           4808   ;        main.c:1031: L_motor_dir = 0;
1512 905110    4809            mov     dptr,#_L_motor_dir
1515           4810   ;        main.c:1032: R_motor_dir = 0;
1515           4811   ;        main.c:1033: pwm_left = 0;
1515           4812   ;        main.c:1034: pwm_right = 0;
1515 E4        4813            clr     a
1516 F0        4814            movx    @dptr,a
1517 9050D0    4815            mov     dptr,#_R_motor_dir
151A F0        4816            movx    @dptr,a
151B 905190    4817            mov     dptr,#_pwm_left
151E F0        4818            movx    @dptr,a
151F 905150    4819            mov     dptr,#_pwm_right
1522 F0        4820            movx    @dptr,a
1523           4821   ;        main.c:1035: return;
1523 22        4822            ret
1524           4823   ;------------------------------------------------------------
1524           4824   ;Allocation info for local variables in function 'servo_moveaway'
1524           4825   ;------------------------------------------------------------
1524           4826   ;------------------------------------------------------------
1524           4827   ;        main.c:1038: void servo_moveaway(void)
1524           4828   ;        -----------------------------------------
1524           4829   ;         function servo_moveaway
1524           4830   ;        -----------------------------------------
1524           4831   _servo_moveaway:
1524           4832   ;        main.c:1039: {  pwm_left = 0;
1524 905190    4833            mov     dptr,#_pwm_left
1527           4834   ;        main.c:1040: pwm_right = 0;
1527 E4        4835            clr     a
1528 F0        4836            movx    @dptr,a
1529 905150    4837            mov     dptr,#_pwm_right
152C F0        4838            movx    @dptr,a
152D           4839   ;        main.c:1041: servo_push();
152D 120000    4840            lcall   _servo_push
1530           4841   ;        main.c:1042: waitms(100);
1530 900064    4842            mov     dptr,#0x0064
1533 120000    4843            lcall   _waitms
1536           4844   ;        main.c:1043: Move_forward_ms(500);
1536 9001F4    4845            mov     dptr,#0x01F4
1539 120000    4846            lcall   _Move_forward_ms
153C           4847   ;        main.c:1044: servo_push();
153C           4848   ;        main.c:1045: return; 
153C 020000    4849            ljmp    _servo_push
153F           4850   ;------------------------------------------------------------
153F           4851   ;Allocation info for local variables in function 'check_bound'
153F           4852   ;------------------------------------------------------------
153F           4853   ;d2                        Allocated with name '_check_bound_PARM_2'
153F           4854   ;d1                        Allocated to registers r2 r3 
153F           4855   ;------------------------------------------------------------
153F           4856   ;        main.c:1048: int check_bound(int d1, int d2){
153F           4857   ;        -----------------------------------------
153F           4858   ;         function check_bound
153F           4859   ;        -----------------------------------------
153F           4860   _check_bound:
153F AA82      4861            mov     r2,dpl
1541 AB83      4862            mov     r3,dph
1543           4863   ;        main.c:1049: if(d1>10000||d2>10000)     return 1;
1543 C3        4864            clr     c
1544 7410      4865            mov     a,#0x10
1546 9A        4866            subb    a,r2
1547 74A7      4867            mov     a,#(0x27 ^ 0x80)
1549 8BF0      4868            mov     b,r3
154B 63F080    4869            xrl     b,#0x80
154E 95F0      4870            subb    a,b
1550 4000      4871            jc      L035001?
1552 7410      4872            mov     a,#0x10
1554 9590      4873            subb    a,_check_bound_PARM_2
1556 74A7      4874            mov     a,#(0x27 ^ 0x80)
1558 8591F0    4875            mov     b,(_check_bound_PARM_2 + 1)
155B 63F080    4876            xrl     b,#0x80
155E 95F0      4877            subb    a,b
1560 5000      4878            jnc     L035002?
1562           4879   L035001?:
1562 900001    4880            mov     dptr,#0x0001
1565           4881   ;        main.c:1050: else return 0;
1565 22        4882            ret
1566           4883   L035002?:
1566 900000    4884            mov     dptr,#0x0000
1569 22        4885            ret
156A           4886   ;------------------------------------------------------------
156A           4887   ;Allocation info for local variables in function 'Init_all'
156A           4888   ;------------------------------------------------------------
156A           4889   ;------------------------------------------------------------
156A           4890   ;        main.c:1053: void Init_all(){
156A           4891   ;        -----------------------------------------
156A           4892   ;         function Init_all
156A           4893   ;        -----------------------------------------
156A           4894   _Init_all:
156A           4895   ;        main.c:1055: Set_Pin_Output(0x24);
156A 758224    4896            mov     dpl,#0x24
156D 120000    4897            lcall   _Set_Pin_Output
1570           4898   ;        main.c:1056: Set_Pin_Output(0x23);
1570 758223    4899            mov     dpl,#0x23
1573 120000    4900            lcall   _Set_Pin_Output
1576           4901   ;        main.c:1057: Set_Pin_Output(0x22);
1576 758222    4902            mov     dpl,#0x22
1579 120000    4903            lcall   _Set_Pin_Output
157C           4904   ;        main.c:1058: Set_Pin_Output(0x21);
157C 758221    4905            mov     dpl,#0x21
157F 120000    4906            lcall   _Set_Pin_Output
1582           4907   ;        main.c:1059: Set_Pin_Output(0x17);
1582 758217    4908            mov     dpl,#0x17
1585 120000    4909            lcall   _Set_Pin_Output
1588           4910   ;        main.c:1060: Set_Pin_Output(0x16);
1588 758216    4911            mov     dpl,#0x16
158B 120000    4912            lcall   _Set_Pin_Output
158E           4913   ;        main.c:1061: Set_Pin_Output(0x15);
158E 758215    4914            mov     dpl,#0x15
1591 120000    4915            lcall   _Set_Pin_Output
1594           4916   ;        main.c:1062: Set_Pin_Output(0x10); // CS
1594 758210    4917            mov     dpl,#0x10
1597 120000    4918            lcall   _Set_Pin_Output
159A           4919   ;        main.c:1064: Set_Pin_Input(0x30);
159A 758230    4920            mov     dpl,#0x30
159D 120000    4921            lcall   _Set_Pin_Input
15A0           4922   ;        main.c:1065: Set_Pin_Output(0x25); // CLK for Load
15A0 758225    4923            mov     dpl,#0x25
15A3 120000    4924            lcall   _Set_Pin_Output
15A6           4925   ;        main.c:1066: Set_Pin_Input(0x26);
15A6 758226    4926            mov     dpl,#0x26
15A9 120000    4927            lcall   _Set_Pin_Input
15AC           4928   ;        main.c:1068: Set_Pin_Input(0x31);   //ECHO pin
15AC 758231    4929            mov     dpl,#0x31
15AF 120000    4930            lcall   _Set_Pin_Input
15B2           4931   ;        main.c:1069: Set_Pin_Output(0x00);  // TRIGGER pin
15B2 758200    4932            mov     dpl,#0x00
15B5 120000    4933            lcall   _Set_Pin_Output
15B8           4934   ;        main.c:1071: InitPinADC(1,3);
15B8 75E003    4935            mov     _InitPinADC_PARM_2,#0x03
15BB 758201    4936            mov     dpl,#0x01
15BE 120000    4937            lcall   _InitPinADC
15C1           4938   ;        main.c:1072: InitPinADC(1,4);
15C1 75E004    4939            mov     _InitPinADC_PARM_2,#0x04
15C4 758201    4940            mov     dpl,#0x01
15C7 120000    4941            lcall   _InitPinADC
15CA           4942   ;        main.c:1073: InitADC();
15CA 120000    4943            lcall   _InitADC
15CD           4944   ;        main.c:1075: TMOD&=0b_1111_0000; 
15CD 5389F0    4945            anl     _TMOD,#0xF0
15D0           4946   ;        main.c:1076: TMOD|=0b_0000_0001; 
15D0 438901    4947            orl     _TMOD,#0x01
15D3           4948   ;        main.c:1077: TR0=0; 
15D3 C28C      4949            clr     _TR0
15D5           4950   ;        main.c:1079: Servo_arm=0;
15D5 C296      4951            clr     _P1_6
15D7           4952   ;        main.c:1080: Servo_base=0;
15D7 C297      4953            clr     _P1_7
15D9           4954   ;        main.c:1081: Magnet = 0;
15D9 C295      4955            clr     _P1_5
15DB           4956   ;        main.c:1082: PD_SCK = 0;
15DB C2A5      4957            clr     _P2_5
15DD           4958   ;        main.c:1083: return;
15DD 22        4959            ret
15DE           4960   ;------------------------------------------------------------
15DE           4961   ;Allocation info for local variables in function 'Move_back_ms'
15DE           4962   ;------------------------------------------------------------
15DE           4963   ;ms                        Allocated to registers r2 r3 
15DE           4964   ;------------------------------------------------------------
15DE           4965   ;        main.c:1086: void Move_back_ms(int ms){
15DE           4966   ;        -----------------------------------------
15DE           4967   ;         function Move_back_ms
15DE           4968   ;        -----------------------------------------
15DE           4969   _Move_back_ms:
15DE AA82      4970            mov     r2,dpl
15E0 AB83      4971            mov     r3,dph
15E2           4972   ;        main.c:1088: L_motor_dir = 1;
15E2 905110    4973            mov     dptr,#_L_motor_dir
15E5 7401      4974            mov     a,#0x01
15E7 F0        4975            movx    @dptr,a
15E8           4976   ;        main.c:1089: R_motor_dir = 1;
15E8 9050D0    4977            mov     dptr,#_R_motor_dir
15EB 7401      4978            mov     a,#0x01
15ED F0        4979            movx    @dptr,a
15EE           4980   ;        main.c:1091: pwm_left = 80;
15EE 905190    4981            mov     dptr,#_pwm_left
15F1 7450      4982            mov     a,#0x50
15F3 F0        4983            movx    @dptr,a
15F4           4984   ;        main.c:1092: pwm_right = 80*pwm_corr;
15F4 C002      4985            push    ar2
15F6 C003      4986            push    ar3
15F8 904E40    4987            mov     dptr,#_pwm_corr
15FB E0        4988            movx    a,@dptr
15FC C0E0      4989            push    acc
15FE A3        4990            inc     dptr
15FF E0        4991            movx    a,@dptr
1600 C0E0      4992            push    acc
1602 A3        4993            inc     dptr
1603 E0        4994            movx    a,@dptr
1604 C0E0      4995            push    acc
1606 A3        4996            inc     dptr
1607 E0        4997            movx    a,@dptr
1608 C0E0      4998            push    acc
160A 900000    4999            mov     dptr,#0x0000
160D 75F0A0    5000            mov     b,#0xA0
1610 7442      5001            mov     a,#0x42
1612 120000    5002            lcall   ___fsmul
1615 AC82      5003            mov     r4,dpl
1617 AD83      5004            mov     r5,dph
1619 AEF0      5005            mov     r6,b
161B FF        5006            mov     r7,a
161C E581      5007            mov     a,sp
161E 24FC      5008            add     a,#0xfc
1620 F581      5009            mov     sp,a
1622 8C82      5010            mov     dpl,r4
1624 8D83      5011            mov     dph,r5
1626 8EF0      5012            mov     b,r6
1628 EF        5013            mov     a,r7
1629 120000    5014            lcall   ___fs2uchar
162C E582      5015            mov     a,dpl
162E D003      5016            pop     ar3
1630 D002      5017            pop     ar2
1632 905150    5018            mov     dptr,#_pwm_right
1635 F0        5019            movx    @dptr,a
1636           5020   ;        main.c:1094: waitms(ms);
1636 8A82      5021            mov     dpl,r2
1638 8B83      5022            mov     dph,r3
163A 120000    5023            lcall   _waitms
163D           5024   ;        main.c:1096: L_motor_dir = 0;
163D 905110    5025            mov     dptr,#_L_motor_dir
1640           5026   ;        main.c:1097: R_motor_dir = 0;
1640           5027   ;        main.c:1098: pwm_left = 0;
1640           5028   ;        main.c:1099: pwm_right = 0;
1640 E4        5029            clr     a
1641 F0        5030            movx    @dptr,a
1642 9050D0    5031            mov     dptr,#_R_motor_dir
1645 F0        5032            movx    @dptr,a
1646 905190    5033            mov     dptr,#_pwm_left
1649 F0        5034            movx    @dptr,a
164A 905150    5035            mov     dptr,#_pwm_right
164D F0        5036            movx    @dptr,a
164E           5037   ;        main.c:1100: return;
164E 22        5038            ret
164F           5039   ;------------------------------------------------------------
164F           5040   ;Allocation info for local variables in function 'Right_angle'
164F           5041   ;------------------------------------------------------------
164F           5042   ;angle                     Allocated to registers r2 r3 
164F           5043   ;------------------------------------------------------------
164F           5044   ;        main.c:1104: void Right_angle(int angle){
164F           5045   ;        -----------------------------------------
164F           5046   ;         function Right_angle
164F           5047   ;        -----------------------------------------
164F           5048   _Right_angle:
164F AA82      5049            mov     r2,dpl
1651 AB83      5050            mov     r3,dph
1653           5051   ;        main.c:1106: L_motor_dir = 1;
1653 905110    5052            mov     dptr,#_L_motor_dir
1656 7401      5053            mov     a,#0x01
1658 F0        5054            movx    @dptr,a
1659           5055   ;        main.c:1107: R_motor_dir = 0;
1659 9050D0    5056            mov     dptr,#_R_motor_dir
165C E4        5057            clr     a
165D F0        5058            movx    @dptr,a
165E           5059   ;        main.c:1108: pwm_left = 80;
165E 905190    5060            mov     dptr,#_pwm_left
1661 7450      5061            mov     a,#0x50
1663 F0        5062            movx    @dptr,a
1664           5063   ;        main.c:1109: pwm_right = 80 * pwm_corr;
1664 C002      5064            push    ar2
1666 C003      5065            push    ar3
1668 904E40    5066            mov     dptr,#_pwm_corr
166B E0        5067            movx    a,@dptr
166C C0E0      5068            push    acc
166E A3        5069            inc     dptr
166F E0        5070            movx    a,@dptr
1670 C0E0      5071            push    acc
1672 A3        5072            inc     dptr
1673 E0        5073            movx    a,@dptr
1674 C0E0      5074            push    acc
1676 A3        5075            inc     dptr
1677 E0        5076            movx    a,@dptr
1678 C0E0      5077            push    acc
167A 900000    5078            mov     dptr,#0x0000
167D 75F0A0    5079            mov     b,#0xA0
1680 7442      5080            mov     a,#0x42
1682 120000    5081            lcall   ___fsmul
1685 AC82      5082            mov     r4,dpl
1687 AD83      5083            mov     r5,dph
1689 AEF0      5084            mov     r6,b
168B FF        5085            mov     r7,a
168C E581      5086            mov     a,sp
168E 24FC      5087            add     a,#0xfc
1690 F581      5088            mov     sp,a
1692 8C82      5089            mov     dpl,r4
1694 8D83      5090            mov     dph,r5
1696 8EF0      5091            mov     b,r6
1698 EF        5092            mov     a,r7
1699 120000    5093            lcall   ___fs2uchar
169C E582      5094            mov     a,dpl
169E D003      5095            pop     ar3
16A0 D002      5096            pop     ar2
16A2 905150    5097            mov     dptr,#_pwm_right
16A5 F0        5098            movx    @dptr,a
16A6           5099   ;        main.c:1111: waitms(angle);
16A6 8A82      5100            mov     dpl,r2
16A8 8B83      5101            mov     dph,r3
16AA 120000    5102            lcall   _waitms
16AD           5103   ;        main.c:1113: L_motor_dir = 0;
16AD 905110    5104            mov     dptr,#_L_motor_dir
16B0           5105   ;        main.c:1114: R_motor_dir = 0;
16B0           5106   ;        main.c:1115: pwm_left = 0;
16B0           5107   ;        main.c:1116: pwm_right = 0;
16B0 E4        5108            clr     a
16B1 F0        5109            movx    @dptr,a
16B2 9050D0    5110            mov     dptr,#_R_motor_dir
16B5 F0        5111            movx    @dptr,a
16B6 905190    5112            mov     dptr,#_pwm_left
16B9 F0        5113            movx    @dptr,a
16BA 905150    5114            mov     dptr,#_pwm_right
16BD F0        5115            movx    @dptr,a
16BE           5116   ;        main.c:1117: return;
16BE 22        5117            ret
16BF           5118   ;------------------------------------------------------------
16BF           5119   ;Allocation info for local variables in function 'Move_forward'
16BF           5120   ;------------------------------------------------------------
16BF           5121   ;------------------------------------------------------------
16BF           5122   ;        main.c:1120: void Move_forward(){
16BF           5123   ;        -----------------------------------------
16BF           5124   ;         function Move_forward
16BF           5125   ;        -----------------------------------------
16BF           5126   _Move_forward:
16BF           5127   ;        main.c:1122: L_motor_dir = 0;
16BF 905110    5128            mov     dptr,#_L_motor_dir
16C2           5129   ;        main.c:1123: R_motor_dir = 0;
16C2 E4        5130            clr     a
16C3 F0        5131            movx    @dptr,a
16C4 9050D0    5132            mov     dptr,#_R_motor_dir
16C7 F0        5133            movx    @dptr,a
16C8           5134   ;        main.c:1124: pwm_left = 60;
16C8 905190    5135            mov     dptr,#_pwm_left
16CB 743C      5136            mov     a,#0x3C
16CD F0        5137            movx    @dptr,a
16CE           5138   ;        main.c:1125: pwm_right = 60 * pwm_corr;
16CE 904E40    5139            mov     dptr,#_pwm_corr
16D1 E0        5140            movx    a,@dptr
16D2 C0E0      5141            push    acc
16D4 A3        5142            inc     dptr
16D5 E0        5143            movx    a,@dptr
16D6 C0E0      5144            push    acc
16D8 A3        5145            inc     dptr
16D9 E0        5146            movx    a,@dptr
16DA C0E0      5147            push    acc
16DC A3        5148            inc     dptr
16DD E0        5149            movx    a,@dptr
16DE C0E0      5150            push    acc
16E0 900000    5151            mov     dptr,#0x0000
16E3 75F070    5152            mov     b,#0x70
16E6 7442      5153            mov     a,#0x42
16E8 120000    5154            lcall   ___fsmul
16EB AA82      5155            mov     r2,dpl
16ED AB83      5156            mov     r3,dph
16EF ACF0      5157            mov     r4,b
16F1 FD        5158            mov     r5,a
16F2 E581      5159            mov     a,sp
16F4 24FC      5160            add     a,#0xfc
16F6 F581      5161            mov     sp,a
16F8 8A82      5162            mov     dpl,r2
16FA 8B83      5163            mov     dph,r3
16FC 8CF0      5164            mov     b,r4
16FE ED        5165            mov     a,r5
16FF 120000    5166            lcall   ___fs2uchar
1702 E582      5167            mov     a,dpl
1704 905150    5168            mov     dptr,#_pwm_right
1707 F0        5169            movx    @dptr,a
1708           5170   ;        main.c:1126: return;
1708 22        5171            ret
1709           5172   ;------------------------------------------------------------
1709           5173   ;Allocation info for local variables in function 'simple_rand'
1709           5174   ;------------------------------------------------------------
1709           5175   ;------------------------------------------------------------
1709           5176   ;        main.c:1129: unsigned int simple_rand() {
1709           5177   ;        -----------------------------------------
1709           5178   ;         function simple_rand
1709           5179   ;        -----------------------------------------
1709           5180   _simple_rand:
1709           5181   ;        main.c:1130: seed = (seed * 25173 + 13849) & 0xFFFF;  
1709 904E80    5182            mov     dptr,#_seed
170C E0        5183            movx    a,@dptr
170D F500      5184            mov     __mulint_PARM_2,a
170F A3        5185            inc     dptr
1710 E0        5186            movx    a,@dptr
1711 F501      5187            mov     (__mulint_PARM_2 + 1),a
1713 906255    5188            mov     dptr,#0x6255
1716 120000    5189            lcall   __mulint
1719 E582      5190            mov     a,dpl
171B 8583F0    5191            mov     b,dph
171E 904E80    5192            mov     dptr,#_seed
1721 2419      5193            add     a,#0x19
1723 F0        5194            movx    @dptr,a
1724 7436      5195            mov     a,#0x36
1726 35F0      5196            addc    a,b
1728 A3        5197            inc     dptr
1729 F0        5198            movx    @dptr,a
172A           5199   ;        main.c:1131: return seed;     
172A 904E80    5200            mov     dptr,#_seed
172D E0        5201            movx    a,@dptr
172E FA        5202            mov     r2,a
172F A3        5203            inc     dptr
1730 E0        5204            movx    a,@dptr
1731 8A82      5205            mov     dpl,r2
1733 F583      5206            mov     dph,a
1735 22        5207            ret
1736           5208   ;------------------------------------------------------------
1736           5209   ;Allocation info for local variables in function 'get_random_90_250'
1736           5210   ;------------------------------------------------------------
1736           5211   ;------------------------------------------------------------
1736           5212   ;        main.c:1134: unsigned int get_random_90_250() {
1736           5213   ;        -----------------------------------------
1736           5214   ;         function get_random_90_250
1736           5215   ;        -----------------------------------------
1736           5216   _get_random_90_250:
1736           5217   ;        main.c:1135: return (simple_rand() % (250 - 85 + 1)) + 90;
1736 120000    5218            lcall   _simple_rand
1739 7500A6    5219            mov     __moduint_PARM_2,#0xA6
173C E4        5220            clr     a
173D F501      5221            mov     (__moduint_PARM_2 + 1),a
173F 120000    5222            lcall   __moduint
1742 E582      5223            mov     a,dpl
1744 8583F0    5224            mov     b,dph
1747 245A      5225            add     a,#0x5A
1749 F582      5226            mov     dpl,a
174B E4        5227            clr     a
174C 35F0      5228            addc    a,b
174E F583      5229            mov     dph,a
1750 22        5230            ret
1751           5231   ;------------------------------------------------------------
1751           5232   ;Allocation info for local variables in function 'Read_angle'
1751           5233   ;------------------------------------------------------------
1751           5234   ;mag_x                     Allocated with name '_Read_angle_mag_x_1_228'
1751           5235   ;mag_y                     Allocated with name '_Read_angle_mag_y_1_228'
1751           5236   ;sum_x                     Allocated with name '_Read_angle_sum_x_1_228'
1751           5237   ;sum_y                     Allocated with name '_Read_angle_sum_y_1_228'
1751           5238   ;angle                     Allocated with name '_Read_angle_angle_1_228'
1751           5239   ;------------------------------------------------------------
1751           5240   ;        main.c:1138: float Read_angle(void)
1751           5241   ;        -----------------------------------------
1751           5242   ;         function Read_angle
1751           5243   ;        -----------------------------------------
1751           5244   _Read_angle:
1751           5245   ;        main.c:1145: sum_x = 0.0; sum_y = 0.0;
1751 90D0B8    5246            mov     dptr,#_Read_angle_sum_x_1_228
1754 E4        5247            clr     a
1755 F0        5248            movx    @dptr,a
1756 A3        5249            inc     dptr
1757 F0        5250            movx    @dptr,a
1758 A3        5251            inc     dptr
1759 F0        5252            movx    @dptr,a
175A A3        5253            inc     dptr
175B F0        5254            movx    @dptr,a
175C 90D108    5255            mov     dptr,#_Read_angle_sum_y_1_228
175F F0        5256            movx    @dptr,a
1760 A3        5257            inc     dptr
1761           5258   ;        main.c:1148: for (i = 0; i < 10; i++){
1761 E4        5259            clr     a
1762 F0        5260            movx    @dptr,a
1763 A3        5261            inc     dptr
1764 F0        5262            movx    @dptr,a
1765 A3        5263            inc     dptr
1766 F0        5264            movx    @dptr,a
1767 905250    5265            mov     dptr,#_i
176A F0        5266            movx    @dptr,a
176B A3        5267            inc     dptr
176C F0        5268            movx    @dptr,a
176D           5269   L042005?:
176D 905250    5270            mov     dptr,#_i
1770 E0        5271            movx    a,@dptr
1771 FA        5272            mov     r2,a
1772 A3        5273            inc     dptr
1773 E0        5274            movx    a,@dptr
1774 FB        5275            mov     r3,a
1775 C3        5276            clr     c
1776 EA        5277            mov     a,r2
1777 940A      5278            subb    a,#0x0A
1779 EB        5279            mov     a,r3
177A 9400      5280            subb    a,#0x00
177C 4000      5281            jc      L042015?
177E 020000    5282            ljmp    L042008?
1781           5283   L042015?:
1781           5284   ;        main.c:1149: BMM150_Read_Data(&mag_x, &mag_y);
1781 75B068    5285            mov     _BMM150_Read_Data_PARM_2,#_Read_angle_mag_y_1_228
1784 75B1D0    5286            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_Read_angle_mag_y_1_228 >> 8)
1787 75B200    5287            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
178A 90D018    5288            mov     dptr,#_Read_angle_mag_x_1_228
178D 75F000    5289            mov     b,#0x00
1790 120000    5290            lcall   _BMM150_Read_Data
1793           5291   ;        main.c:1150: sum_x += (float)mag_x; 
1793 90D018    5292            mov     dptr,#_Read_angle_mag_x_1_228
1796 E0        5293            movx    a,@dptr
1797 FA        5294            mov     r2,a
1798 A3        5295            inc     dptr
1799 E0        5296            movx    a,@dptr
179A FB        5297            mov     r3,a
179B 8A82      5298            mov     dpl,r2
179D 8B83      5299            mov     dph,r3
179F 120000    5300            lcall   ___sint2fs
17A2 AA82      5301            mov     r2,dpl
17A4 AB83      5302            mov     r3,dph
17A6 ACF0      5303            mov     r4,b
17A8 FD        5304            mov     r5,a
17A9 90D0B8    5305            mov     dptr,#_Read_angle_sum_x_1_228
17AC E0        5306            movx    a,@dptr
17AD FE        5307            mov     r6,a
17AE A3        5308            inc     dptr
17AF E0        5309            movx    a,@dptr
17B0 FF        5310            mov     r7,a
17B1 A3        5311            inc     dptr
17B2 E0        5312            movx    a,@dptr
17B3 F8        5313            mov     r0,a
17B4 A3        5314            inc     dptr
17B5 E0        5315            movx    a,@dptr
17B6 F9        5316            mov     r1,a
17B7 C002      5317            push    ar2
17B9 C003      5318            push    ar3
17BB C004      5319            push    ar4
17BD C005      5320            push    ar5
17BF 8E82      5321            mov     dpl,r6
17C1 8F83      5322            mov     dph,r7
17C3 88F0      5323            mov     b,r0
17C5 E9        5324            mov     a,r1
17C6 120000    5325            lcall   ___fsadd
17C9 AA82      5326            mov     r2,dpl
17CB AB83      5327            mov     r3,dph
17CD ACF0      5328            mov     r4,b
17CF FD        5329            mov     r5,a
17D0 E581      5330            mov     a,sp
17D2 24FC      5331            add     a,#0xfc
17D4 F581      5332            mov     sp,a
17D6 90D0B8    5333            mov     dptr,#_Read_angle_sum_x_1_228
17D9 EA        5334            mov     a,r2
17DA F0        5335            movx    @dptr,a
17DB A3        5336            inc     dptr
17DC EB        5337            mov     a,r3
17DD F0        5338            movx    @dptr,a
17DE A3        5339            inc     dptr
17DF EC        5340            mov     a,r4
17E0 F0        5341            movx    @dptr,a
17E1 A3        5342            inc     dptr
17E2 ED        5343            mov     a,r5
17E3 F0        5344            movx    @dptr,a
17E4           5345   ;        main.c:1151: sum_y += (float)mag_y; 
17E4 90D068    5346            mov     dptr,#_Read_angle_mag_y_1_228
17E7 E0        5347            movx    a,@dptr
17E8 FA        5348            mov     r2,a
17E9 A3        5349            inc     dptr
17EA E0        5350            movx    a,@dptr
17EB FB        5351            mov     r3,a
17EC 8A82      5352            mov     dpl,r2
17EE 8B83      5353            mov     dph,r3
17F0 120000    5354            lcall   ___sint2fs
17F3 AA82      5355            mov     r2,dpl
17F5 AB83      5356            mov     r3,dph
17F7 ACF0      5357            mov     r4,b
17F9 FD        5358            mov     r5,a
17FA 90D108    5359            mov     dptr,#_Read_angle_sum_y_1_228
17FD E0        5360            movx    a,@dptr
17FE FE        5361            mov     r6,a
17FF A3        5362            inc     dptr
1800 E0        5363            movx    a,@dptr
1801 FF        5364            mov     r7,a
1802 A3        5365            inc     dptr
1803 E0        5366            movx    a,@dptr
1804 F8        5367            mov     r0,a
1805 A3        5368            inc     dptr
1806 E0        5369            movx    a,@dptr
1807 F9        5370            mov     r1,a
1808 C002      5371            push    ar2
180A C003      5372            push    ar3
180C C004      5373            push    ar4
180E C005      5374            push    ar5
1810 8E82      5375            mov     dpl,r6
1812 8F83      5376            mov     dph,r7
1814 88F0      5377            mov     b,r0
1816 E9        5378            mov     a,r1
1817 120000    5379            lcall   ___fsadd
181A AA82      5380            mov     r2,dpl
181C AB83      5381            mov     r3,dph
181E ACF0      5382            mov     r4,b
1820 FD        5383            mov     r5,a
1821 E581      5384            mov     a,sp
1823 24FC      5385            add     a,#0xfc
1825 F581      5386            mov     sp,a
1827 90D108    5387            mov     dptr,#_Read_angle_sum_y_1_228
182A EA        5388            mov     a,r2
182B F0        5389            movx    @dptr,a
182C A3        5390            inc     dptr
182D EB        5391            mov     a,r3
182E F0        5392            movx    @dptr,a
182F A3        5393            inc     dptr
1830 EC        5394            mov     a,r4
1831 F0        5395            movx    @dptr,a
1832 A3        5396            inc     dptr
1833 ED        5397            mov     a,r5
1834 F0        5398            movx    @dptr,a
1835           5399   ;        main.c:1152: Timer3us(1);
1835 758201    5400            mov     dpl,#0x01
1838 120000    5401            lcall   _Timer3us
183B           5402   ;        main.c:1148: for (i = 0; i < 10; i++){
183B 905250    5403            mov     dptr,#_i
183E E0        5404            movx    a,@dptr
183F 2401      5405            add     a,#0x01
1841 F0        5406            movx    @dptr,a
1842 A3        5407            inc     dptr
1843 E0        5408            movx    a,@dptr
1844 3400      5409            addc    a,#0x00
1846 F0        5410            movx    @dptr,a
1847 020000    5411            ljmp    L042005?
184A           5412   L042008?:
184A           5413   ;        main.c:1154: angle = atan2f(sum_y, sum_x) * 180.0 / M_PI;
184A 90D108    5414            mov     dptr,#_Read_angle_sum_y_1_228
184D E0        5415            movx    a,@dptr
184E FA        5416            mov     r2,a
184F A3        5417            inc     dptr
1850 E0        5418            movx    a,@dptr
1851 FB        5419            mov     r3,a
1852 A3        5420            inc     dptr
1853 E0        5421            movx    a,@dptr
1854 FC        5422            mov     r4,a
1855 A3        5423            inc     dptr
1856 E0        5424            movx    a,@dptr
1857 FD        5425            mov     r5,a
1858 90D0B8    5426            mov     dptr,#_Read_angle_sum_x_1_228
185B E0        5427            movx    a,@dptr
185C F500      5428            mov     _atan2f_PARM_2,a
185E A3        5429            inc     dptr
185F E0        5430            movx    a,@dptr
1860 F501      5431            mov     (_atan2f_PARM_2 + 1),a
1862 A3        5432            inc     dptr
1863 E0        5433            movx    a,@dptr
1864 F502      5434            mov     (_atan2f_PARM_2 + 2),a
1866 A3        5435            inc     dptr
1867 E0        5436            movx    a,@dptr
1868 F503      5437            mov     (_atan2f_PARM_2 + 3),a
186A 8A82      5438            mov     dpl,r2
186C 8B83      5439            mov     dph,r3
186E 8CF0      5440            mov     b,r4
1870 ED        5441            mov     a,r5
1871 120000    5442            lcall   _atan2f
1874 AA82      5443            mov     r2,dpl
1876 AB83      5444            mov     r3,dph
1878 ACF0      5445            mov     r4,b
187A FD        5446            mov     r5,a
187B C002      5447            push    ar2
187D C003      5448            push    ar3
187F C004      5449            push    ar4
1881 C005      5450            push    ar5
1883 900000    5451            mov     dptr,#0x0000
1886 75F034    5452            mov     b,#0x34
1889 7443      5453            mov     a,#0x43
188B 120000    5454            lcall   ___fsmul
188E AA82      5455            mov     r2,dpl
1890 AB83      5456            mov     r3,dph
1892 ACF0      5457            mov     r4,b
1894 FD        5458            mov     r5,a
1895 E581      5459            mov     a,sp
1897 24FC      5460            add     a,#0xfc
1899 F581      5461            mov     sp,a
189B 74DB      5462            mov     a,#0xDB
189D C0E0      5463            push    acc
189F 740F      5464            mov     a,#0x0F
18A1 C0E0      5465            push    acc
18A3 7449      5466            mov     a,#0x49
18A5 C0E0      5467            push    acc
18A7 7440      5468            mov     a,#0x40
18A9 C0E0      5469            push    acc
18AB 8A82      5470            mov     dpl,r2
18AD 8B83      5471            mov     dph,r3
18AF 8CF0      5472            mov     b,r4
18B1 ED        5473            mov     a,r5
18B2 120000    5474            lcall   ___fsdiv
18B5 AA82      5475            mov     r2,dpl
18B7 AB83      5476            mov     r3,dph
18B9 ACF0      5477            mov     r4,b
18BB FD        5478            mov     r5,a
18BC E581      5479            mov     a,sp
18BE 24FC      5480            add     a,#0xfc
18C0 F581      5481            mov     sp,a
18C2 90D158    5482            mov     dptr,#_Read_angle_angle_1_228
18C5 EA        5483            mov     a,r2
18C6 F0        5484            movx    @dptr,a
18C7 A3        5485            inc     dptr
18C8 EB        5486            mov     a,r3
18C9 F0        5487            movx    @dptr,a
18CA A3        5488            inc     dptr
18CB EC        5489            mov     a,r4
18CC F0        5490            movx    @dptr,a
18CD A3        5491            inc     dptr
18CE ED        5492            mov     a,r5
18CF F0        5493            movx    @dptr,a
18D0           5494   ;        main.c:1155: if (angle < 0.0) angle += 360.0; 
18D0 C002      5495            push    ar2
18D2 C003      5496            push    ar3
18D4 C004      5497            push    ar4
18D6 C005      5498            push    ar5
18D8 E4        5499            clr     a
18D9 C0E0      5500            push    acc
18DB C0E0      5501            push    acc
18DD C0E0      5502            push    acc
18DF C0E0      5503            push    acc
18E1 8A82      5504            mov     dpl,r2
18E3 8B83      5505            mov     dph,r3
18E5 8CF0      5506            mov     b,r4
18E7 ED        5507            mov     a,r5
18E8 120000    5508            lcall   ___fslt
18EB AE82      5509            mov     r6,dpl
18ED E581      5510            mov     a,sp
18EF 24FC      5511            add     a,#0xfc
18F1 F581      5512            mov     sp,a
18F3 D005      5513            pop     ar5
18F5 D004      5514            pop     ar4
18F7 D003      5515            pop     ar3
18F9 D002      5516            pop     ar2
18FB EE        5517            mov     a,r6
18FC 6000      5518            jz      L042002?
18FE E4        5519            clr     a
18FF C0E0      5520            push    acc
1901 C0E0      5521            push    acc
1903 74B4      5522            mov     a,#0xB4
1905 C0E0      5523            push    acc
1907 7443      5524            mov     a,#0x43
1909 C0E0      5525            push    acc
190B 8A82      5526            mov     dpl,r2
190D 8B83      5527            mov     dph,r3
190F 8CF0      5528            mov     b,r4
1911 ED        5529            mov     a,r5
1912 120000    5530            lcall   ___fsadd
1915 AA82      5531            mov     r2,dpl
1917 AB83      5532            mov     r3,dph
1919 ACF0      5533            mov     r4,b
191B FD        5534            mov     r5,a
191C E581      5535            mov     a,sp
191E 24FC      5536            add     a,#0xfc
1920 F581      5537            mov     sp,a
1922 90D158    5538            mov     dptr,#_Read_angle_angle_1_228
1925 EA        5539            mov     a,r2
1926 F0        5540            movx    @dptr,a
1927 A3        5541            inc     dptr
1928 EB        5542            mov     a,r3
1929 F0        5543            movx    @dptr,a
192A A3        5544            inc     dptr
192B EC        5545            mov     a,r4
192C F0        5546            movx    @dptr,a
192D A3        5547            inc     dptr
192E ED        5548            mov     a,r5
192F F0        5549            movx    @dptr,a
1930           5550   L042002?:
1930           5551   ;        main.c:1156: if (angle > 360.0) angle -= 360.0; 
1930 90D158    5552            mov     dptr,#_Read_angle_angle_1_228
1933 E0        5553            movx    a,@dptr
1934 FA        5554            mov     r2,a
1935 A3        5555            inc     dptr
1936 E0        5556            movx    a,@dptr
1937 FB        5557            mov     r3,a
1938 A3        5558            inc     dptr
1939 E0        5559            movx    a,@dptr
193A FC        5560            mov     r4,a
193B A3        5561            inc     dptr
193C E0        5562            movx    a,@dptr
193D FD        5563            mov     r5,a
193E C002      5564            push    ar2
1940 C003      5565            push    ar3
1942 C004      5566            push    ar4
1944 C005      5567            push    ar5
1946 E4        5568            clr     a
1947 C0E0      5569            push    acc
1949 C0E0      5570            push    acc
194B 74B4      5571            mov     a,#0xB4
194D C0E0      5572            push    acc
194F 7443      5573            mov     a,#0x43
1951 C0E0      5574            push    acc
1953 8A82      5575            mov     dpl,r2
1955 8B83      5576            mov     dph,r3
1957 8CF0      5577            mov     b,r4
1959 ED        5578            mov     a,r5
195A 120000    5579            lcall   ___fsgt
195D AE82      5580            mov     r6,dpl
195F E581      5581            mov     a,sp
1961 24FC      5582            add     a,#0xfc
1963 F581      5583            mov     sp,a
1965 D005      5584            pop     ar5
1967 D004      5585            pop     ar4
1969 D003      5586            pop     ar3
196B D002      5587            pop     ar2
196D EE        5588            mov     a,r6
196E 6000      5589            jz      L042004?
1970 E4        5590            clr     a
1971 C0E0      5591            push    acc
1973 C0E0      5592            push    acc
1975 74B4      5593            mov     a,#0xB4
1977 C0E0      5594            push    acc
1979 7443      5595            mov     a,#0x43
197B C0E0      5596            push    acc
197D 8A82      5597            mov     dpl,r2
197F 8B83      5598            mov     dph,r3
1981 8CF0      5599            mov     b,r4
1983 ED        5600            mov     a,r5
1984 120000    5601            lcall   ___fssub
1987 AA82      5602            mov     r2,dpl
1989 AB83      5603            mov     r3,dph
198B ACF0      5604            mov     r4,b
198D FD        5605            mov     r5,a
198E E581      5606            mov     a,sp
1990 24FC      5607            add     a,#0xfc
1992 F581      5608            mov     sp,a
1994 90D158    5609            mov     dptr,#_Read_angle_angle_1_228
1997 EA        5610            mov     a,r2
1998 F0        5611            movx    @dptr,a
1999 A3        5612            inc     dptr
199A EB        5613            mov     a,r3
199B F0        5614            movx    @dptr,a
199C A3        5615            inc     dptr
199D EC        5616            mov     a,r4
199E F0        5617            movx    @dptr,a
199F A3        5618            inc     dptr
19A0 ED        5619            mov     a,r5
19A1 F0        5620            movx    @dptr,a
19A2           5621   L042004?:
19A2           5622   ;        main.c:1157: return angle; 
19A2 90D158    5623            mov     dptr,#_Read_angle_angle_1_228
19A5 E0        5624            movx    a,@dptr
19A6 FA        5625            mov     r2,a
19A7 A3        5626            inc     dptr
19A8 E0        5627            movx    a,@dptr
19A9 FB        5628            mov     r3,a
19AA A3        5629            inc     dptr
19AB E0        5630            movx    a,@dptr
19AC FC        5631            mov     r4,a
19AD A3        5632            inc     dptr
19AE E0        5633            movx    a,@dptr
19AF 8A82      5634            mov     dpl,r2
19B1 8B83      5635            mov     dph,r3
19B3 8CF0      5636            mov     b,r4
19B5 22        5637            ret
19B6           5638   ;------------------------------------------------------------
19B6           5639   ;Allocation info for local variables in function 'Auto_mode_slave'
19B6           5640   ;------------------------------------------------------------
19B6           5641   ;sloc0                     Allocated with name '_Auto_mode_slave_sloc0_1_0'
19B6           5642   ;count                     Allocated with name '_Auto_mode_slave_count_1_230'
19B6           5643   ;command                   Allocated with name '_Auto_mode_slave_command_1_230'
19B6           5644   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_230'
19B6           5645   ;bound                     Allocated with name '_Auto_mode_slave_bound_1_230'
19B6           5646   ;c                         Allocated with name '_Auto_mode_slave_c_1_230'
19B6           5647   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_230'
19B6           5648   ;angle                     Allocated with name '_Auto_mode_slave_angle_1_230'
19B6           5649   ;------------------------------------------------------------
19B6           5650   ;        main.c:1160: void Auto_mode_slave(){
19B6           5651   ;        -----------------------------------------
19B6           5652   ;         function Auto_mode_slave
19B6           5653   ;        -----------------------------------------
19B6           5654   _Auto_mode_slave:
19B6           5655   ;        main.c:1163: xdata int state_res = 1;
19B6 90D208    5656            mov     dptr,#_Auto_mode_slave_state_res_1_230
19B9 7401      5657            mov     a,#0x01
19BB F0        5658            movx    @dptr,a
19BC E4        5659            clr     a
19BD A3        5660            inc     dptr
19BE F0        5661            movx    @dptr,a
19BF           5662   ;        main.c:1169: curr_angle = Read_angle();
19BF 120000    5663            lcall   _Read_angle
19C2 AA82      5664            mov     r2,dpl
19C4 AB83      5665            mov     r3,dph
19C6 ACF0      5666            mov     r4,b
19C8 FD        5667            mov     r5,a
19C9 904E00    5668            mov     dptr,#_curr_angle
19CC EA        5669            mov     a,r2
19CD F0        5670            movx    @dptr,a
19CE A3        5671            inc     dptr
19CF EB        5672            mov     a,r3
19D0 F0        5673            movx    @dptr,a
19D1 A3        5674            inc     dptr
19D2 EC        5675            mov     a,r4
19D3 F0        5676            movx    @dptr,a
19D4 A3        5677            inc     dptr
19D5 ED        5678            mov     a,r5
19D6 F0        5679            movx    @dptr,a
19D7           5680   ;        main.c:1171: while(count < 5 && state_res){
19D7 E4        5681            clr     a
19D8 F5A8      5682            mov     _Auto_mode_slave_sloc0_1_0,a
19DA F5A9      5683            mov     (_Auto_mode_slave_sloc0_1_0 + 1),a
19DC           5684   L043020?:
19DC C3        5685            clr     c
19DD E5A8      5686            mov     a,_Auto_mode_slave_sloc0_1_0
19DF 9405      5687            subb    a,#0x05
19E1 E5A9      5688            mov     a,(_Auto_mode_slave_sloc0_1_0 + 1)
19E3 6480      5689            xrl     a,#0x80
19E5 9480      5690            subb    a,#0x80
19E7 4000      5691            jc      L043049?
19E9 020000    5692            ljmp    L043022?
19EC           5693   L043049?:
19EC 90D208    5694            mov     dptr,#_Auto_mode_slave_state_res_1_230
19EF E0        5695            movx    a,@dptr
19F0 FC        5696            mov     r4,a
19F1 A3        5697            inc     dptr
19F2 E0        5698            movx    a,@dptr
19F3 FD        5699            mov     r5,a
19F4 4C        5700            orl     a,r4
19F5 7000      5701            jnz     L043050?
19F7 020000    5702            ljmp    L043022?
19FA           5703   L043050?:
19FA           5704   ;        main.c:1173: if(RXU1()){
19FA C004      5705            push    ar4
19FC C005      5706            push    ar5
19FE 120000    5707            lcall   _RXU1
1A01 D005      5708            pop     ar5
1A03 D004      5709            pop     ar4
1A05 4000      5710            jc      L043051?
1A07 020000    5711            ljmp    L043012?
1A0A           5712   L043051?:
1A0A           5713   ;        main.c:1174: c=getchar1();      
1A0A C004      5714            push    ar4
1A0C C005      5715            push    ar5
1A0E 120000    5716            lcall   _getchar1
1A11 AE82      5717            mov     r6,dpl
1A13 D005      5718            pop     ar5
1A15 D004      5719            pop     ar4
1A17           5720   ;        main.c:1175: if(c=='!'){
1A17 BE21C0    5721            cjne    r6,#0x21,L043052?
1A1A 8000      5722            sjmp    L043053?
1A1C           5723   L043052?:
1A1C 020000    5724            ljmp    L043009?
1A1F           5725   L043053?:
1A1F           5726   ;        main.c:1176: getstr1(buff, sizeof(buff)-1);
1A1F 756013    5727            mov     _getstr1_PARM_2,#0x13
1A22 9056D0    5728            mov     dptr,#_buff
1A25 75F040    5729            mov     b,#0x40
1A28 120000    5730            lcall   _getstr1
1A2B           5731   ;        main.c:1177: if(strlen(buff)==11){
1A2B 9056D0    5732            mov     dptr,#_buff
1A2E 75F040    5733            mov     b,#0x40
1A31 120000    5734            lcall   _strlen
1A34 AF82      5735            mov     r7,dpl
1A36 AA83      5736            mov     r2,dph
1A38 BF0BC0    5737            cjne    r7,#0x0B,L043054?
1A3B BA00C0    5738            cjne    r2,#0x00,L043054?
1A3E 8000      5739            sjmp    L043055?
1A40           5740   L043054?:
1A40 020000    5741            ljmp    L043012?
1A43           5742   L043055?:
1A43           5743   ;        main.c:1179: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
1A43 74A8      5744            mov     a,#_Auto_mode_slave_command_1_230
1A45 C0E0      5745            push    acc
1A47 74D1      5746            mov     a,#(_Auto_mode_slave_command_1_230 >> 8)
1A49 C0E0      5747            push    acc
1A4B E4        5748            clr     a
1A4C C0E0      5749            push    acc
1A4E 7458      5750            mov     a,#_Auto_mode_slave_dummy_1_230
1A50 C0E0      5751            push    acc
1A52 74D2      5752            mov     a,#(_Auto_mode_slave_dummy_1_230 >> 8)
1A54 C0E0      5753            push    acc
1A56 E4        5754            clr     a
1A57 C0E0      5755            push    acc
1A59 7458      5756            mov     a,#_Auto_mode_slave_dummy_1_230
1A5B C0E0      5757            push    acc
1A5D 74D2      5758            mov     a,#(_Auto_mode_slave_dummy_1_230 >> 8)
1A5F C0E0      5759            push    acc
1A61 E4        5760            clr     a
1A62 C0E0      5761            push    acc
1A64 7458      5762            mov     a,#_Auto_mode_slave_dummy_1_230
1A66 C0E0      5763            push    acc
1A68 74D2      5764            mov     a,#(_Auto_mode_slave_dummy_1_230 >> 8)
1A6A C0E0      5765            push    acc
1A6C E4        5766            clr     a
1A6D C0E0      5767            push    acc
1A6F 7440      5768            mov     a,#__str_5
1A71 C0E0      5769            push    acc
1A73 7417      5770            mov     a,#(__str_5 >> 8)
1A75 C0E0      5771            push    acc
1A77 7480      5772            mov     a,#0x80
1A79 C0E0      5773            push    acc
1A7B 74D0      5774            mov     a,#_buff
1A7D C0E0      5775            push    acc
1A7F 7456      5776            mov     a,#(_buff >> 8)
1A81 C0E0      5777            push    acc
1A83 7440      5778            mov     a,#0x40
1A85 C0E0      5779            push    acc
1A87 120000    5780            lcall   _sscanf
1A8A E581      5781            mov     a,sp
1A8C 24EE      5782            add     a,#0xee
1A8E F581      5783            mov     sp,a
1A90           5784   ;        main.c:1180: if(command) state_res = 1;
1A90 90D1A8    5785            mov     dptr,#_Auto_mode_slave_command_1_230
1A93 E0        5786            movx    a,@dptr
1A94 FF        5787            mov     r7,a
1A95 A3        5788            inc     dptr
1A96 E0        5789            movx    a,@dptr
1A97 FA        5790            mov     r2,a
1A98 4F        5791            orl     a,r7
1A99 6000      5792            jz      L043002?
1A9B 90D208    5793            mov     dptr,#_Auto_mode_slave_state_res_1_230
1A9E 7401      5794            mov     a,#0x01
1AA0 F0        5795            movx    @dptr,a
1AA1 E4        5796            clr     a
1AA2 A3        5797            inc     dptr
1AA3 F0        5798            movx    @dptr,a
1AA4 020000    5799            ljmp    L043012?
1AA7           5800   L043002?:
1AA7           5801   ;        main.c:1181: else state_res = 0;
1AA7 90D208    5802            mov     dptr,#_Auto_mode_slave_state_res_1_230
1AAA E4        5803            clr     a
1AAB F0        5804            movx    @dptr,a
1AAC A3        5805            inc     dptr
1AAD F0        5806            movx    @dptr,a
1AAE 8000      5807            sjmp    L043012?
1AB0           5808   L043009?:
1AB0           5809   ;        main.c:1184: else if(c=='@'){
1AB0 BE4080    5810            cjne    r6,#0x40,L043012?
1AB3           5811   ;        main.c:1185: sprintf(buff, "%01d,%02d,%ld,%05d,%03d\n", state_res, count,freq100, 0, (int)curr_angle);
1AB3 904E00    5812            mov     dptr,#_curr_angle
1AB6 E0        5813            movx    a,@dptr
1AB7 FA        5814            mov     r2,a
1AB8 A3        5815            inc     dptr
1AB9 E0        5816            movx    a,@dptr
1ABA FB        5817            mov     r3,a
1ABB A3        5818            inc     dptr
1ABC E0        5819            movx    a,@dptr
1ABD FE        5820            mov     r6,a
1ABE A3        5821            inc     dptr
1ABF E0        5822            movx    a,@dptr
1AC0 8A82      5823            mov     dpl,r2
1AC2 8B83      5824            mov     dph,r3
1AC4 8EF0      5825            mov     b,r6
1AC6 C004      5826            push    ar4
1AC8 C005      5827            push    ar5
1ACA 120000    5828            lcall   ___fs2sint
1ACD AA82      5829            mov     r2,dpl
1ACF AB83      5830            mov     r3,dph
1AD1 D005      5831            pop     ar5
1AD3 D004      5832            pop     ar4
1AD5 C002      5833            push    ar2
1AD7 C003      5834            push    ar3
1AD9 E4        5835            clr     a
1ADA C0E0      5836            push    acc
1ADC C0E0      5837            push    acc
1ADE 905690    5838            mov     dptr,#_freq100
1AE1 E0        5839            movx    a,@dptr
1AE2 C0E0      5840            push    acc
1AE4 A3        5841            inc     dptr
1AE5 E0        5842            movx    a,@dptr
1AE6 C0E0      5843            push    acc
1AE8 A3        5844            inc     dptr
1AE9 E0        5845            movx    a,@dptr
1AEA C0E0      5846            push    acc
1AEC A3        5847            inc     dptr
1AED E0        5848            movx    a,@dptr
1AEE C0E0      5849            push    acc
1AF0 C0A8      5850            push    _Auto_mode_slave_sloc0_1_0
1AF2 C0A9      5851            push    (_Auto_mode_slave_sloc0_1_0 + 1)
1AF4 C004      5852            push    ar4
1AF6 C005      5853            push    ar5
1AF8 7400      5854            mov     a,#__str_6
1AFA C0E0      5855            push    acc
1AFC 7418      5856            mov     a,#(__str_6 >> 8)
1AFE C0E0      5857            push    acc
1B00 7480      5858            mov     a,#0x80
1B02 C0E0      5859            push    acc
1B04 74D0      5860            mov     a,#_buff
1B06 C0E0      5861            push    acc
1B08 7456      5862            mov     a,#(_buff >> 8)
1B0A C0E0      5863            push    acc
1B0C 7440      5864            mov     a,#0x40
1B0E C0E0      5865            push    acc
1B10 120000    5866            lcall   _sprintf
1B13 E581      5867            mov     a,sp
1B15 24EE      5868            add     a,#0xee
1B17 F581      5869            mov     sp,a
1B19           5870   ;        main.c:1186: waitms(5); 
1B19 900005    5871            mov     dptr,#0x0005
1B1C 120000    5872            lcall   _waitms
1B1F           5873   ;        main.c:1187: sendstr1(buff);
1B1F 9056D0    5874            mov     dptr,#_buff
1B22 75F040    5875            mov     b,#0x40
1B25 120000    5876            lcall   _sendstr1
1B28           5877   L043012?:
1B28           5878   ;        main.c:1191: Move_forward();
1B28 120000    5879            lcall   _Move_forward
1B2B           5880   ;        main.c:1193: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
1B2B 758209    5881            mov     dpl,#0x09
1B2E 120000    5882            lcall   _ADC_at_Pin
1B31 E582      5883            mov     a,dpl
1B33 8583F0    5884            mov     b,dph
1B36 905650    5885            mov     dptr,#_d1
1B39 F0        5886            movx    @dptr,a
1B3A A3        5887            inc     dptr
1B3B E5F0      5888            mov     a,b
1B3D F0        5889            movx    @dptr,a
1B3E           5890   ;        main.c:1194: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
1B3E 75820A    5891            mov     dpl,#0x0A
1B41 120000    5892            lcall   _ADC_at_Pin
1B44 AA82      5893            mov     r2,dpl
1B46 AB83      5894            mov     r3,dph
1B48 905610    5895            mov     dptr,#_d2
1B4B EA        5896            mov     a,r2
1B4C F0        5897            movx    @dptr,a
1B4D A3        5898            inc     dptr
1B4E EB        5899            mov     a,r3
1B4F F0        5900            movx    @dptr,a
1B50           5901   ;        main.c:1195: bound = check_bound(d1,d2);
1B50 905650    5902            mov     dptr,#_d1
1B53 E0        5903            movx    a,@dptr
1B54 FC        5904            mov     r4,a
1B55 A3        5905            inc     dptr
1B56 E0        5906            movx    a,@dptr
1B57 FD        5907            mov     r5,a
1B58 8A90      5908            mov     _check_bound_PARM_2,r2
1B5A 8B91      5909            mov     (_check_bound_PARM_2 + 1),r3
1B5C 8C82      5910            mov     dpl,r4
1B5E 8D83      5911            mov     dph,r5
1B60 120000    5912            lcall   _check_bound
1B63 AA82      5913            mov     r2,dpl
1B65 AB83      5914            mov     r3,dph
1B67           5915   ;        main.c:1198: if (freq100>=5360){
1B67 905690    5916            mov     dptr,#_freq100
1B6A E0        5917            movx    a,@dptr
1B6B FC        5918            mov     r4,a
1B6C A3        5919            inc     dptr
1B6D E0        5920            movx    a,@dptr
1B6E FD        5921            mov     r5,a
1B6F A3        5922            inc     dptr
1B70 E0        5923            movx    a,@dptr
1B71 FE        5924            mov     r6,a
1B72 A3        5925            inc     dptr
1B73 E0        5926            movx    a,@dptr
1B74 FF        5927            mov     r7,a
1B75 C3        5928            clr     c
1B76 EC        5929            mov     a,r4
1B77 94F0      5930            subb    a,#0xF0
1B79 ED        5931            mov     a,r5
1B7A 9414      5932            subb    a,#0x14
1B7C EE        5933            mov     a,r6
1B7D 9400      5934            subb    a,#0x00
1B7F EF        5935            mov     a,r7
1B80 6480      5936            xrl     a,#0x80
1B82 9480      5937            subb    a,#0x80
1B84 4000      5938            jc      L043014?
1B86           5939   ;        main.c:1199: mea_yes = 0;
1B86 904D00    5940            mov     dptr,#_mea_yes
1B89 E4        5941            clr     a
1B8A F0        5942            movx    @dptr,a
1B8B           5943   ;        main.c:1200: Move_back_ms(100);
1B8B 900064    5944            mov     dptr,#0x0064
1B8E C002      5945            push    ar2
1B90 C003      5946            push    ar3
1B92 120000    5947            lcall   _Move_back_ms
1B95           5948   ;        main.c:1201: waitms(100);
1B95 900064    5949            mov     dptr,#0x0064
1B98 120000    5950            lcall   _waitms
1B9B           5951   ;        main.c:1202: servo_pick();
1B9B 120000    5952            lcall   _servo_pick
1B9E D003      5953            pop     ar3
1BA0 D002      5954            pop     ar2
1BA2           5955   ;        main.c:1203: count++;
1BA2 05A8      5956            inc     _Auto_mode_slave_sloc0_1_0
1BA4 E4        5957            clr     a
1BA5 B5A8C0    5958            cjne    a,_Auto_mode_slave_sloc0_1_0,L043060?
1BA8 05A9      5959            inc     (_Auto_mode_slave_sloc0_1_0 + 1)
1BAA           5960   L043060?:
1BAA           5961   ;        main.c:1204: waitms(100);
1BAA 900064    5962            mov     dptr,#0x0064
1BAD C002      5963            push    ar2
1BAF C003      5964            push    ar3
1BB1 120000    5965            lcall   _waitms
1BB4           5966   ;        main.c:1205: mea_yes = 1;
1BB4 904D00    5967            mov     dptr,#_mea_yes
1BB7 7401      5968            mov     a,#0x01
1BB9 F0        5969            movx    @dptr,a
1BBA           5970   ;        main.c:1206: Move_forward();
1BBA 120000    5971            lcall   _Move_forward
1BBD D003      5972            pop     ar3
1BBF D002      5973            pop     ar2
1BC1           5974   L043014?:
1BC1           5975   ;        main.c:1209: if (distance < 400){
1BC1 905310    5976            mov     dptr,#_distance
1BC4 E0        5977            movx    a,@dptr
1BC5 FC        5978            mov     r4,a
1BC6 A3        5979            inc     dptr
1BC7 E0        5980            movx    a,@dptr
1BC8 FD        5981            mov     r5,a
1BC9 C3        5982            clr     c
1BCA EC        5983            mov     a,r4
1BCB 9490      5984            subb    a,#0x90
1BCD ED        5985            mov     a,r5
1BCE 6480      5986            xrl     a,#0x80
1BD0 9481      5987            subb    a,#0x81
1BD2 5000      5988            jnc     L043016?
1BD4           5989   ;        main.c:1210: servo_moveaway();
1BD4 C002      5990            push    ar2
1BD6 C003      5991            push    ar3
1BD8 120000    5992            lcall   _servo_moveaway
1BDB D003      5993            pop     ar3
1BDD D002      5994            pop     ar2
1BDF           5995   L043016?:
1BDF           5996   ;        main.c:1213: if(bound == 1){
1BDF BA0140    5997            cjne    r2,#0x01,L043062?
1BE2 BB0040    5998            cjne    r3,#0x00,L043062?
1BE5 8000      5999            sjmp    L043063?
1BE7           6000   L043062?:
1BE7 020000    6001            ljmp    L043020?
1BEA           6002   L043063?:
1BEA           6003   ;        main.c:1214: Move_back_ms(400);
1BEA 900190    6004            mov     dptr,#0x0190
1BED 120000    6005            lcall   _Move_back_ms
1BF0           6006   ;        main.c:1215: waitms(100);
1BF0 900064    6007            mov     dptr,#0x0064
1BF3 120000    6008            lcall   _waitms
1BF6           6009   ;        main.c:1216: angle = get_random_90_250();
1BF6 120000    6010            lcall   _get_random_90_250
1BF9 858200    6011            mov     __mulint_PARM_2,dpl
1BFC 858301    6012            mov     (__mulint_PARM_2 + 1),dph
1BFF           6013   ;        main.c:1217: Right_angle(angle*600/90);
1BFF 900258    6014            mov     dptr,#0x0258
1C02 120000    6015            lcall   __mulint
1C05 AA82      6016            mov     r2,dpl
1C07 AB83      6017            mov     r3,dph
1C09 75005A    6018            mov     __divuint_PARM_2,#0x5A
1C0C E4        6019            clr     a
1C0D F501      6020            mov     (__divuint_PARM_2 + 1),a
1C0F 8A82      6021            mov     dpl,r2
1C11 8B83      6022            mov     dph,r3
1C13 120000    6023            lcall   __divuint
1C16 120000    6024            lcall   _Right_angle
1C19           6025   ;        main.c:1218: curr_angle = Read_angle() * 1.2;
1C19 120000    6026            lcall   _Read_angle
1C1C AA82      6027            mov     r2,dpl
1C1E AB83      6028            mov     r3,dph
1C20 ACF0      6029            mov     r4,b
1C22 FD        6030            mov     r5,a
1C23 C002      6031            push    ar2
1C25 C003      6032            push    ar3
1C27 C004      6033            push    ar4
1C29 C005      6034            push    ar5
1C2B 90999A    6035            mov     dptr,#0x999A
1C2E 75F099    6036            mov     b,#0x99
1C31 743F      6037            mov     a,#0x3F
1C33 120000    6038            lcall   ___fsmul
1C36 AA82      6039            mov     r2,dpl
1C38 AB83      6040            mov     r3,dph
1C3A ACF0      6041            mov     r4,b
1C3C FD        6042            mov     r5,a
1C3D E581      6043            mov     a,sp
1C3F 24FC      6044            add     a,#0xfc
1C41 F581      6045            mov     sp,a
1C43 904E00    6046            mov     dptr,#_curr_angle
1C46 EA        6047            mov     a,r2
1C47 F0        6048            movx    @dptr,a
1C48 A3        6049            inc     dptr
1C49 EB        6050            mov     a,r3
1C4A F0        6051            movx    @dptr,a
1C4B A3        6052            inc     dptr
1C4C EC        6053            mov     a,r4
1C4D F0        6054            movx    @dptr,a
1C4E A3        6055            inc     dptr
1C4F ED        6056            mov     a,r5
1C50 F0        6057            movx    @dptr,a
1C51 020000    6058            ljmp    L043020?
1C54           6059   L043022?:
1C54           6060   ;        main.c:1221: dummy = 0;
1C54 90D258    6061            mov     dptr,#_Auto_mode_slave_dummy_1_230
1C57 E4        6062            clr     a
1C58 F0        6063            movx    @dptr,a
1C59 A3        6064            inc     dptr
1C5A F0        6065            movx    @dptr,a
1C5B           6066   ;        main.c:1222: while(1){
1C5B           6067   L043030?:
1C5B           6068   ;        main.c:1223: if(RXU1()) {
1C5B 120000    6069            lcall   _RXU1
1C5E 5000      6070            jnc     L043030?
1C60           6071   ;        main.c:1224: c=getchar1();
1C60 120000    6072            lcall   _getchar1
1C63 AA82      6073            mov     r2,dpl
1C65           6074   ;        main.c:1225: if(c=='@') // Master wants slave data
1C65 BA4050    6075            cjne    r2,#0x40,L043030?
1C68           6076   ;        main.c:1227: sprintf(buff, "0,00,%04ld,%05d,%03d,%03d,%03d\n", freq100, weight, (int)curr_angle);
1C68 904E00    6077            mov     dptr,#_curr_angle
1C6B E0        6078            movx    a,@dptr
1C6C FA        6079            mov     r2,a
1C6D A3        6080            inc     dptr
1C6E E0        6081            movx    a,@dptr
1C6F FB        6082            mov     r3,a
1C70 A3        6083            inc     dptr
1C71 E0        6084            movx    a,@dptr
1C72 FC        6085            mov     r4,a
1C73 A3        6086            inc     dptr
1C74 E0        6087            movx    a,@dptr
1C75 8A82      6088            mov     dpl,r2
1C77 8B83      6089            mov     dph,r3
1C79 8CF0      6090            mov     b,r4
1C7B 120000    6091            lcall   ___fs2sint
1C7E AA82      6092            mov     r2,dpl
1C80 AB83      6093            mov     r3,dph
1C82 C002      6094            push    ar2
1C84 C003      6095            push    ar3
1C86 904CC0    6096            mov     dptr,#_weight
1C89 E0        6097            movx    a,@dptr
1C8A C0E0      6098            push    acc
1C8C A3        6099            inc     dptr
1C8D E0        6100            movx    a,@dptr
1C8E C0E0      6101            push    acc
1C90 905690    6102            mov     dptr,#_freq100
1C93 E0        6103            movx    a,@dptr
1C94 C0E0      6104            push    acc
1C96 A3        6105            inc     dptr
1C97 E0        6106            movx    a,@dptr
1C98 C0E0      6107            push    acc
1C9A A3        6108            inc     dptr
1C9B E0        6109            movx    a,@dptr
1C9C C0E0      6110            push    acc
1C9E A3        6111            inc     dptr
1C9F E0        6112            movx    a,@dptr
1CA0 C0E0      6113            push    acc
1CA2 7490      6114            mov     a,#__str_7
1CA4 C0E0      6115            push    acc
1CA6 741A      6116            mov     a,#(__str_7 >> 8)
1CA8 C0E0      6117            push    acc
1CAA 7480      6118            mov     a,#0x80
1CAC C0E0      6119            push    acc
1CAE 74D0      6120            mov     a,#_buff
1CB0 C0E0      6121            push    acc
1CB2 7456      6122            mov     a,#(_buff >> 8)
1CB4 C0E0      6123            push    acc
1CB6 7440      6124            mov     a,#0x40
1CB8 C0E0      6125            push    acc
1CBA 120000    6126            lcall   _sprintf
1CBD E581      6127            mov     a,sp
1CBF 24F2      6128            add     a,#0xf2
1CC1 F581      6129            mov     sp,a
1CC3           6130   ;        main.c:1228: dummy++;
1CC3 90D258    6131            mov     dptr,#_Auto_mode_slave_dummy_1_230
1CC6 7401      6132            mov     a,#0x01
1CC8 F0        6133            movx    @dptr,a
1CC9 E4        6134            clr     a
1CCA A3        6135            inc     dptr
1CCB F0        6136            movx    @dptr,a
1CCC           6137   ;        main.c:1229: waitms(5); 
1CCC 900005    6138            mov     dptr,#0x0005
1CCF 120000    6139            lcall   _waitms
1CD2           6140   ;        main.c:1230: sendstr1(buff);
1CD2 9056D0    6141            mov     dptr,#_buff
1CD5 75F040    6142            mov     b,#0x40
1CD8 120000    6143            lcall   _sendstr1
1CDB           6144   ;        main.c:1231: if(dummy = 30) break;
1CDB 90D258    6145            mov     dptr,#_Auto_mode_slave_dummy_1_230
1CDE 741E      6146            mov     a,#0x1E
1CE0 F0        6147            movx    @dptr,a
1CE1 E4        6148            clr     a
1CE2 A3        6149            inc     dptr
1CE3 F0        6150            movx    @dptr,a
1CE4 22        6151            ret
1CE5           6152   ;------------------------------------------------------------
1CE5           6153   ;Allocation info for local variables in function 'Joystick_Control'
1CE5           6154   ;------------------------------------------------------------
1CE5           6155   ;vy_ptr                    Allocated with name '_Joystick_Control_PARM_2'
1CE5           6156   ;vx_ptr                    Allocated to registers r2 r3 r4 
1CE5           6157   ;sloc0                     Allocated with name '_Joystick_Control_sloc0_1_0'
1CE5           6158   ;sloc1                     Allocated with name '_Joystick_Control_sloc1_1_0'
1CE5           6159   ;sloc2                     Allocated with name '_Joystick_Control_sloc2_1_0'
1CE5           6160   ;sloc3                     Allocated with name '_Joystick_Control_sloc3_1_0'
1CE5           6161   ;sloc4                     Allocated with name '_Joystick_Control_sloc4_1_0'
1CE5           6162   ;sloc5                     Allocated with name '_Joystick_Control_sloc5_1_0'
1CE5           6163   ;vx_error                  Allocated with name '_Joystick_Control_vx_error_1_243'
1CE5           6164   ;vy_error                  Allocated with name '_Joystick_Control_vy_error_1_243'
1CE5           6165   ;vx_err                    Allocated with name '_Joystick_Control_vx_err_1_243'
1CE5           6166   ;vy_err                    Allocated with name '_Joystick_Control_vy_err_1_243'
1CE5           6167   ;------------------------------------------------------------
1CE5           6168   ;        main.c:1237: float Joystick_Control(int *vx_ptr, int *vy_ptr)
1CE5           6169   ;        -----------------------------------------
1CE5           6170   ;         function Joystick_Control
1CE5           6171   ;        -----------------------------------------
1CE5           6172   _Joystick_Control:
1CE5           6173   ;        main.c:1241: vx = *vx_ptr; 
1CE5 120000    6174            lcall   __gptrget
1CE8 FA        6175            mov     r2,a
1CE9 A3        6176            inc     dptr
1CEA 120000    6177            lcall   __gptrget
1CED FB        6178            mov     r3,a
1CEE 904F90    6179            mov     dptr,#_vx
1CF1 EA        6180            mov     a,r2
1CF2 F0        6181            movx    @dptr,a
1CF3 A3        6182            inc     dptr
1CF4 EB        6183            mov     a,r3
1CF5 F0        6184            movx    @dptr,a
1CF6           6185   ;        main.c:1242: vy = *vy_ptr; 
1CF6 AA20      6186            mov     r2,_Joystick_Control_PARM_2
1CF8 AB21      6187            mov     r3,(_Joystick_Control_PARM_2 + 1)
1CFA AC22      6188            mov     r4,(_Joystick_Control_PARM_2 + 2)
1CFC 8A82      6189            mov     dpl,r2
1CFE 8B83      6190            mov     dph,r3
1D00 8CF0      6191            mov     b,r4
1D02 120000    6192            lcall   __gptrget
1D05 FA        6193            mov     r2,a
1D06 A3        6194            inc     dptr
1D07 120000    6195            lcall   __gptrget
1D0A FB        6196            mov     r3,a
1D0B 904F50    6197            mov     dptr,#_vy
1D0E EA        6198            mov     a,r2
1D0F F0        6199            movx    @dptr,a
1D10 A3        6200            inc     dptr
1D11 EB        6201            mov     a,r3
1D12 F0        6202            movx    @dptr,a
1D13           6203   ;        main.c:1245: raw_angle = Read_angle();
1D13 120000    6204            lcall   _Read_angle
1D16 AA82      6205            mov     r2,dpl
1D18 AB83      6206            mov     r3,dph
1D1A ACF0      6207            mov     r4,b
1D1C FD        6208            mov     r5,a
1D1D 904DC0    6209            mov     dptr,#_raw_angle
1D20 EA        6210            mov     a,r2
1D21 F0        6211            movx    @dptr,a
1D22 A3        6212            inc     dptr
1D23 EB        6213            mov     a,r3
1D24 F0        6214            movx    @dptr,a
1D25 A3        6215            inc     dptr
1D26 EC        6216            mov     a,r4
1D27 F0        6217            movx    @dptr,a
1D28 A3        6218            inc     dptr
1D29 ED        6219            mov     a,r5
1D2A F0        6220            movx    @dptr,a
1D2B           6221   ;        main.c:1248: vx_error = abs(vx-vx_thres)*100/vx_thres; 
1D2B 905010    6222            mov     dptr,#_vx_thres
1D2E E0        6223            movx    a,@dptr
1D2F FA        6224            mov     r2,a
1D30 A3        6225            inc     dptr
1D31 E0        6226            movx    a,@dptr
1D32 FB        6227            mov     r3,a
1D33 904F90    6228            mov     dptr,#_vx
1D36 E0        6229            movx    a,@dptr
1D37 FC        6230            mov     r4,a
1D38 A3        6231            inc     dptr
1D39 E0        6232            movx    a,@dptr
1D3A FD        6233            mov     r5,a
1D3B EC        6234            mov     a,r4
1D3C C3        6235            clr     c
1D3D 9A        6236            subb    a,r2
1D3E F582      6237            mov     dpl,a
1D40 ED        6238            mov     a,r5
1D41 9B        6239            subb    a,r3
1D42 F583      6240            mov     dph,a
1D44 120000    6241            lcall   _abs
1D47 858200    6242            mov     __mulint_PARM_2,dpl
1D4A 858301    6243            mov     (__mulint_PARM_2 + 1),dph
1D4D 900064    6244            mov     dptr,#0x0064
1D50 120000    6245            lcall   __mulint
1D53 AA82      6246            mov     r2,dpl
1D55 AB83      6247            mov     r3,dph
1D57 905010    6248            mov     dptr,#_vx_thres
1D5A E0        6249            movx    a,@dptr
1D5B F500      6250            mov     __divsint_PARM_2,a
1D5D A3        6251            inc     dptr
1D5E E0        6252            movx    a,@dptr
1D5F F501      6253            mov     (__divsint_PARM_2 + 1),a
1D61 8A82      6254            mov     dpl,r2
1D63 8B83      6255            mov     dph,r3
1D65 120000    6256            lcall   __divsint
1D68 E582      6257            mov     a,dpl
1D6A 8583F0    6258            mov     b,dph
1D6D 90D2B8    6259            mov     dptr,#_Joystick_Control_vx_error_1_243
1D70 F0        6260            movx    @dptr,a
1D71 A3        6261            inc     dptr
1D72 E5F0      6262            mov     a,b
1D74 F0        6263            movx    @dptr,a
1D75           6264   ;        main.c:1249: vy_error = abs(vy-vy_thres)*100/vy_thres; 
1D75 904FD0    6265            mov     dptr,#_vy_thres
1D78 E0        6266            movx    a,@dptr
1D79 FA        6267            mov     r2,a
1D7A A3        6268            inc     dptr
1D7B E0        6269            movx    a,@dptr
1D7C FB        6270            mov     r3,a
1D7D 904F50    6271            mov     dptr,#_vy
1D80 E0        6272            movx    a,@dptr
1D81 FC        6273            mov     r4,a
1D82 A3        6274            inc     dptr
1D83 E0        6275            movx    a,@dptr
1D84 FD        6276            mov     r5,a
1D85 EC        6277            mov     a,r4
1D86 C3        6278            clr     c
1D87 9A        6279            subb    a,r2
1D88 F582      6280            mov     dpl,a
1D8A ED        6281            mov     a,r5
1D8B 9B        6282            subb    a,r3
1D8C F583      6283            mov     dph,a
1D8E 120000    6284            lcall   _abs
1D91 858200    6285            mov     __mulint_PARM_2,dpl
1D94 858301    6286            mov     (__mulint_PARM_2 + 1),dph
1D97 900064    6287            mov     dptr,#0x0064
1D9A 120000    6288            lcall   __mulint
1D9D AA82      6289            mov     r2,dpl
1D9F AB83      6290            mov     r3,dph
1DA1 904FD0    6291            mov     dptr,#_vy_thres
1DA4 E0        6292            movx    a,@dptr
1DA5 FC        6293            mov     r4,a
1DA6 A3        6294            inc     dptr
1DA7 E0        6295            movx    a,@dptr
1DA8 FD        6296            mov     r5,a
1DA9 8C00      6297            mov     __divsint_PARM_2,r4
1DAB 8D01      6298            mov     (__divsint_PARM_2 + 1),r5
1DAD 8A82      6299            mov     dpl,r2
1DAF 8B83      6300            mov     dph,r3
1DB1 C004      6301            push    ar4
1DB3 C005      6302            push    ar5
1DB5 120000    6303            lcall   __divsint
1DB8 AA82      6304            mov     r2,dpl
1DBA AB83      6305            mov     r3,dph
1DBC D005      6306            pop     ar5
1DBE D004      6307            pop     ar4
1DC0 90D318    6308            mov     dptr,#_Joystick_Control_vy_error_1_243
1DC3 EA        6309            mov     a,r2
1DC4 F0        6310            movx    @dptr,a
1DC5 A3        6311            inc     dptr
1DC6 EB        6312            mov     a,r3
1DC7 F0        6313            movx    @dptr,a
1DC8           6314   ;        main.c:1250: vx_err = vx-vx_thres; 
1DC8 905010    6315            mov     dptr,#_vx_thres
1DCB E0        6316            movx    a,@dptr
1DCC FE        6317            mov     r6,a
1DCD A3        6318            inc     dptr
1DCE E0        6319            movx    a,@dptr
1DCF FF        6320            mov     r7,a
1DD0 904F90    6321            mov     dptr,#_vx
1DD3 E0        6322            movx    a,@dptr
1DD4 F8        6323            mov     r0,a
1DD5 A3        6324            inc     dptr
1DD6 E0        6325            movx    a,@dptr
1DD7 F9        6326            mov     r1,a
1DD8 E8        6327            mov     a,r0
1DD9 C3        6328            clr     c
1DDA 9E        6329            subb    a,r6
1DDB FE        6330            mov     r6,a
1DDC E9        6331            mov     a,r1
1DDD 9F        6332            subb    a,r7
1DDE FF        6333            mov     r7,a
1DDF 90D368    6334            mov     dptr,#_Joystick_Control_vx_err_1_243
1DE2 EE        6335            mov     a,r6
1DE3 F0        6336            movx    @dptr,a
1DE4 A3        6337            inc     dptr
1DE5 EF        6338            mov     a,r7
1DE6 F0        6339            movx    @dptr,a
1DE7           6340   ;        main.c:1251: vy_err = vy-vy_thres; 
1DE7 904F50    6341            mov     dptr,#_vy
1DEA E0        6342            movx    a,@dptr
1DEB F8        6343            mov     r0,a
1DEC A3        6344            inc     dptr
1DED E0        6345            movx    a,@dptr
1DEE F9        6346            mov     r1,a
1DEF E8        6347            mov     a,r0
1DF0 C3        6348            clr     c
1DF1 9C        6349            subb    a,r4
1DF2 F5F8      6350            mov     _Joystick_Control_sloc0_1_0,a
1DF4 E9        6351            mov     a,r1
1DF5 9D        6352            subb    a,r5
1DF6 F5F9      6353            mov     (_Joystick_Control_sloc0_1_0 + 1),a
1DF8 90D3B8    6354            mov     dptr,#_Joystick_Control_vy_err_1_243
1DFB E5F8      6355            mov     a,_Joystick_Control_sloc0_1_0
1DFD F0        6356            movx    @dptr,a
1DFE A3        6357            inc     dptr
1DFF E5F9      6358            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
1E01 F0        6359            movx    @dptr,a
1E02           6360   ;        main.c:1252: pwm_left = 0; 
1E02 905190    6361            mov     dptr,#_pwm_left
1E05           6362   ;        main.c:1253: pwm_right = 0; 
1E05 E4        6363            clr     a
1E06 F0        6364            movx    @dptr,a
1E07 905150    6365            mov     dptr,#_pwm_right
1E0A F0        6366            movx    @dptr,a
1E0B           6367   ;        main.c:1255: if ((vy_error>5) && (vx_error<5)){
1E0B C3        6368            clr     c
1E0C 7405      6369            mov     a,#0x05
1E0E 9A        6370            subb    a,r2
1E0F E4        6371            clr     a
1E10 6480      6372            xrl     a,#0x80
1E12 8BF0      6373            mov     b,r3
1E14 63F080    6374            xrl     b,#0x80
1E17 95F0      6375            subb    a,b
1E19 E4        6376            clr     a
1E1A 33        6377            rlc     a
1E1B F598      6378            mov     _Joystick_Control_sloc2_1_0,a
1E1D 7000      6379            jnz     L044062?
1E1F 020000    6380            ljmp    L044005?
1E22           6381   L044062?:
1E22 90D2B8    6382            mov     dptr,#_Joystick_Control_vx_error_1_243
1E25 E0        6383            movx    a,@dptr
1E26 F9        6384            mov     r1,a
1E27 A3        6385            inc     dptr
1E28 E0        6386            movx    a,@dptr
1E29 F8        6387            mov     r0,a
1E2A C3        6388            clr     c
1E2B E9        6389            mov     a,r1
1E2C 9405      6390            subb    a,#0x05
1E2E E8        6391            mov     a,r0
1E2F 6480      6392            xrl     a,#0x80
1E31 9480      6393            subb    a,#0x80
1E33 4000      6394            jc      L044063?
1E35 020000    6395            ljmp    L044005?
1E38           6396   L044063?:
1E38           6397   ;        main.c:1256: pwm_left = vy_error; 
1E38 905190    6398            mov     dptr,#_pwm_left
1E3B EA        6399            mov     a,r2
1E3C F0        6400            movx    @dptr,a
1E3D           6401   ;        main.c:1257: pwm_right = vy_error * pwm_corr; 
1E3D 8A82      6402            mov     dpl,r2
1E3F 8B83      6403            mov     dph,r3
1E41 C002      6404            push    ar2
1E43 C003      6405            push    ar3
1E45 C006      6406            push    ar6
1E47 C007      6407            push    ar7
1E49 120000    6408            lcall   ___sint2fs
1E4C A982      6409            mov     r1,dpl
1E4E A883      6410            mov     r0,dph
1E50 ACF0      6411            mov     r4,b
1E52 FD        6412            mov     r5,a
1E53 904E40    6413            mov     dptr,#_pwm_corr
1E56 E0        6414            movx    a,@dptr
1E57 C0E0      6415            push    acc
1E59 A3        6416            inc     dptr
1E5A E0        6417            movx    a,@dptr
1E5B C0E0      6418            push    acc
1E5D A3        6419            inc     dptr
1E5E E0        6420            movx    a,@dptr
1E5F C0E0      6421            push    acc
1E61 A3        6422            inc     dptr
1E62 E0        6423            movx    a,@dptr
1E63 C0E0      6424            push    acc
1E65 8982      6425            mov     dpl,r1
1E67 8883      6426            mov     dph,r0
1E69 8CF0      6427            mov     b,r4
1E6B ED        6428            mov     a,r5
1E6C 120000    6429            lcall   ___fsmul
1E6F AC82      6430            mov     r4,dpl
1E71 AD83      6431            mov     r5,dph
1E73 A8F0      6432            mov     r0,b
1E75 F9        6433            mov     r1,a
1E76 E581      6434            mov     a,sp
1E78 24FC      6435            add     a,#0xfc
1E7A F581      6436            mov     sp,a
1E7C 8C82      6437            mov     dpl,r4
1E7E 8D83      6438            mov     dph,r5
1E80 88F0      6439            mov     b,r0
1E82 E9        6440            mov     a,r1
1E83 120000    6441            lcall   ___fs2uchar
1E86 858248    6442            mov     _Joystick_Control_sloc1_1_0,dpl
1E89 D007      6443            pop     ar7
1E8B D006      6444            pop     ar6
1E8D D003      6445            pop     ar3
1E8F D002      6446            pop     ar2
1E91 905150    6447            mov     dptr,#_pwm_right
1E94 E548      6448            mov     a,_Joystick_Control_sloc1_1_0
1E96 F0        6449            movx    @dptr,a
1E97           6450   ;        main.c:1258: if (vy_err > 0){ //move forward
1E97 C3        6451            clr     c
1E98 E4        6452            clr     a
1E99 95F8      6453            subb    a,_Joystick_Control_sloc0_1_0
1E9B E4        6454            clr     a
1E9C 6480      6455            xrl     a,#0x80
1E9E 85F9F0    6456            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
1EA1 63F080    6457            xrl     b,#0x80
1EA4 95F0      6458            subb    a,b
1EA6 5000      6459            jnc     L044002?
1EA8           6460   ;        main.c:1259: L_motor_dir = 0; 
1EA8 905110    6461            mov     dptr,#_L_motor_dir
1EAB           6462   ;        main.c:1260: R_motor_dir = 0; 
1EAB E4        6463            clr     a
1EAC F0        6464            movx    @dptr,a
1EAD 9050D0    6465            mov     dptr,#_R_motor_dir
1EB0 F0        6466            movx    @dptr,a
1EB1 8000      6467            sjmp    L044005?
1EB3           6468   L044002?:
1EB3           6469   ;        main.c:1263: L_motor_dir = 1; 
1EB3 905110    6470            mov     dptr,#_L_motor_dir
1EB6 7401      6471            mov     a,#0x01
1EB8 F0        6472            movx    @dptr,a
1EB9           6473   ;        main.c:1264: R_motor_dir = 1; 
1EB9 9050D0    6474            mov     dptr,#_R_motor_dir
1EBC 7401      6475            mov     a,#0x01
1EBE F0        6476            movx    @dptr,a
1EBF           6477   ;        main.c:1265: pwm_right *= 1.05;
1EBF 854882    6478            mov     dpl,_Joystick_Control_sloc1_1_0
1EC2 C002      6479            push    ar2
1EC4 C003      6480            push    ar3
1EC6 C006      6481            push    ar6
1EC8 C007      6482            push    ar7
1ECA 120000    6483            lcall   ___uchar2fs
1ECD AC82      6484            mov     r4,dpl
1ECF AD83      6485            mov     r5,dph
1ED1 A9F0      6486            mov     r1,b
1ED3 F8        6487            mov     r0,a
1ED4 C004      6488            push    ar4
1ED6 C005      6489            push    ar5
1ED8 C001      6490            push    ar1
1EDA C000      6491            push    ar0
1EDC 906666    6492            mov     dptr,#0x6666
1EDF 75F086    6493            mov     b,#0x86
1EE2 743F      6494            mov     a,#0x3F
1EE4 120000    6495            lcall   ___fsmul
1EE7 AC82      6496            mov     r4,dpl
1EE9 AD83      6497            mov     r5,dph
1EEB A8F0      6498            mov     r0,b
1EED F9        6499            mov     r1,a
1EEE E581      6500            mov     a,sp
1EF0 24FC      6501            add     a,#0xfc
1EF2 F581      6502            mov     sp,a
1EF4 8C82      6503            mov     dpl,r4
1EF6 8D83      6504            mov     dph,r5
1EF8 88F0      6505            mov     b,r0
1EFA E9        6506            mov     a,r1
1EFB 120000    6507            lcall   ___fs2uchar
1EFE E582      6508            mov     a,dpl
1F00 D007      6509            pop     ar7
1F02 D006      6510            pop     ar6
1F04 D003      6511            pop     ar3
1F06 D002      6512            pop     ar2
1F08 905150    6513            mov     dptr,#_pwm_right
1F0B F0        6514            movx    @dptr,a
1F0C           6515   ;        main.c:1348: return curr_angle; 
1F0C           6516   ;        main.c:1265: pwm_right *= 1.05;
1F0C           6517   L044005?:
1F0C           6518   ;        main.c:1268: if ((vx_error>5)&&(vy_error<5)){
1F0C 90D2B8    6519            mov     dptr,#_Joystick_Control_vx_error_1_243
1F0F E0        6520            movx    a,@dptr
1F10 FC        6521            mov     r4,a
1F11 A3        6522            inc     dptr
1F12 E0        6523            movx    a,@dptr
1F13 FD        6524            mov     r5,a
1F14 C3        6525            clr     c
1F15 7405      6526            mov     a,#0x05
1F17 9C        6527            subb    a,r4
1F18 E4        6528            clr     a
1F19 6480      6529            xrl     a,#0x80
1F1B 8DF0      6530            mov     b,r5
1F1D 63F080    6531            xrl     b,#0x80
1F20 95F0      6532            subb    a,b
1F22 E4        6533            clr     a
1F23 33        6534            rlc     a
1F24 F9        6535            mov     r1,a
1F25 7000      6536            jnz     L044065?
1F27 020000    6537            ljmp    L044015?
1F2A           6538   L044065?:
1F2A C3        6539            clr     c
1F2B EA        6540            mov     a,r2
1F2C 9405      6541            subb    a,#0x05
1F2E EB        6542            mov     a,r3
1F2F 6480      6543            xrl     a,#0x80
1F31 9480      6544            subb    a,#0x80
1F33 4000      6545            jc      L044066?
1F35 020000    6546            ljmp    L044015?
1F38           6547   L044066?:
1F38           6548   ;        main.c:1269: pwm_left = vx_error; 
1F38 C001      6549            push    ar1
1F3A 905190    6550            mov     dptr,#_pwm_left
1F3D EC        6551            mov     a,r4
1F3E F0        6552            movx    @dptr,a
1F3F           6553   ;        main.c:1270: pwm_right = vx_error * pwm_corr; 
1F3F 8C82      6554            mov     dpl,r4
1F41 8D83      6555            mov     dph,r5
1F43 C004      6556            push    ar4
1F45 C005      6557            push    ar5
1F47 C006      6558            push    ar6
1F49 C007      6559            push    ar7
1F4B 120000    6560            lcall   ___sint2fs
1F4E AA82      6561            mov     r2,dpl
1F50 AB83      6562            mov     r3,dph
1F52 A9F0      6563            mov     r1,b
1F54 F8        6564            mov     r0,a
1F55 904E40    6565            mov     dptr,#_pwm_corr
1F58 E0        6566            movx    a,@dptr
1F59 C0E0      6567            push    acc
1F5B A3        6568            inc     dptr
1F5C E0        6569            movx    a,@dptr
1F5D C0E0      6570            push    acc
1F5F A3        6571            inc     dptr
1F60 E0        6572            movx    a,@dptr
1F61 C0E0      6573            push    acc
1F63 A3        6574            inc     dptr
1F64 E0        6575            movx    a,@dptr
1F65 C0E0      6576            push    acc
1F67 8A82      6577            mov     dpl,r2
1F69 8B83      6578            mov     dph,r3
1F6B 89F0      6579            mov     b,r1
1F6D E8        6580            mov     a,r0
1F6E 120000    6581            lcall   ___fsmul
1F71 AA82      6582            mov     r2,dpl
1F73 AB83      6583            mov     r3,dph
1F75 A8F0      6584            mov     r0,b
1F77 F9        6585            mov     r1,a
1F78 E581      6586            mov     a,sp
1F7A 24FC      6587            add     a,#0xfc
1F7C F581      6588            mov     sp,a
1F7E 8A82      6589            mov     dpl,r2
1F80 8B83      6590            mov     dph,r3
1F82 88F0      6591            mov     b,r0
1F84 E9        6592            mov     a,r1
1F85 C001      6593            push    ar1
1F87 120000    6594            lcall   ___fs2uchar
1F8A E582      6595            mov     a,dpl
1F8C D001      6596            pop     ar1
1F8E D007      6597            pop     ar7
1F90 D006      6598            pop     ar6
1F92 D005      6599            pop     ar5
1F94 D004      6600            pop     ar4
1F96 905150    6601            mov     dptr,#_pwm_right
1F99 F0        6602            movx    @dptr,a
1F9A           6603   ;        main.c:1271: if (vx_err > 0){ //turn right
1F9A C3        6604            clr     c
1F9B E4        6605            clr     a
1F9C 9E        6606            subb    a,r6
1F9D E4        6607            clr     a
1F9E 6480      6608            xrl     a,#0x80
1FA0 8FF0      6609            mov     b,r7
1FA2 63F080    6610            xrl     b,#0x80
1FA5 95F0      6611            subb    a,b
1FA7 D001      6612            pop     ar1
1FA9 4000      6613            jc      L044067?
1FAB 020000    6614            ljmp    L044008?
1FAE           6615   L044067?:
1FAE           6616   ;        main.c:1272: L_motor_dir = 1; 
1FAE C001      6617            push    ar1
1FB0 905110    6618            mov     dptr,#_L_motor_dir
1FB3 7401      6619            mov     a,#0x01
1FB5 F0        6620            movx    @dptr,a
1FB6           6621   ;        main.c:1273: R_motor_dir = 0;
1FB6 9050D0    6622            mov     dptr,#_R_motor_dir
1FB9 E4        6623            clr     a
1FBA F0        6624            movx    @dptr,a
1FBB           6625   ;        main.c:1274: curr_angle += angle_diff * 1.45; // TUNE THIS
1FBB C004      6626            push    ar4
1FBD C005      6627            push    ar5
1FBF C001      6628            push    ar1
1FC1 904D40    6629            mov     dptr,#_angle_diff
1FC4 E0        6630            movx    a,@dptr
1FC5 C0E0      6631            push    acc
1FC7 A3        6632            inc     dptr
1FC8 E0        6633            movx    a,@dptr
1FC9 C0E0      6634            push    acc
1FCB A3        6635            inc     dptr
1FCC E0        6636            movx    a,@dptr
1FCD C0E0      6637            push    acc
1FCF A3        6638            inc     dptr
1FD0 E0        6639            movx    a,@dptr
1FD1 C0E0      6640            push    acc
1FD3 90999A    6641            mov     dptr,#0x999A
1FD6 75F0B9    6642            mov     b,#0xB9
1FD9 743F      6643            mov     a,#0x3F
1FDB 120000    6644            lcall   ___fsmul
1FDE 8582E8    6645            mov     _Joystick_Control_sloc3_1_0,dpl
1FE1 8583E9    6646            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
1FE4 85F0EA    6647            mov     (_Joystick_Control_sloc3_1_0 + 2),b
1FE7 F5EB      6648            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1FE9 E581      6649            mov     a,sp
1FEB 24FC      6650            add     a,#0xfc
1FED F581      6651            mov     sp,a
1FEF D001      6652            pop     ar1
1FF1 904E00    6653            mov     dptr,#_curr_angle
1FF4 E0        6654            movx    a,@dptr
1FF5 F8        6655            mov     r0,a
1FF6 A3        6656            inc     dptr
1FF7 E0        6657            movx    a,@dptr
1FF8 F9        6658            mov     r1,a
1FF9 A3        6659            inc     dptr
1FFA E0        6660            movx    a,@dptr
1FFB FA        6661            mov     r2,a
1FFC A3        6662            inc     dptr
1FFD E0        6663            movx    a,@dptr
1FFE FB        6664            mov     r3,a
1FFF C001      6665            push    ar1
2001 C0E8      6666            push    _Joystick_Control_sloc3_1_0
2003 C0E9      6667            push    (_Joystick_Control_sloc3_1_0 + 1)
2005 C0EA      6668            push    (_Joystick_Control_sloc3_1_0 + 2)
2007 C0EB      6669            push    (_Joystick_Control_sloc3_1_0 + 3)
2009 8882      6670            mov     dpl,r0
200B 8983      6671            mov     dph,r1
200D 8AF0      6672            mov     b,r2
200F EB        6673            mov     a,r3
2010 120000    6674            lcall   ___fsadd
2013 AA82      6675            mov     r2,dpl
2015 AB83      6676            mov     r3,dph
2017 AEF0      6677            mov     r6,b
2019 FF        6678            mov     r7,a
201A E581      6679            mov     a,sp
201C 24FC      6680            add     a,#0xfc
201E F581      6681            mov     sp,a
2020 D001      6682            pop     ar1
2022 D005      6683            pop     ar5
2024 D004      6684            pop     ar4
2026 904E00    6685            mov     dptr,#_curr_angle
2029 EA        6686            mov     a,r2
202A F0        6687            movx    @dptr,a
202B A3        6688            inc     dptr
202C EB        6689            mov     a,r3
202D F0        6690            movx    @dptr,a
202E A3        6691            inc     dptr
202F EE        6692            mov     a,r6
2030 F0        6693            movx    @dptr,a
2031 A3        6694            inc     dptr
2032 EF        6695            mov     a,r7
2033 F0        6696            movx    @dptr,a
2034 D001      6697            pop     ar1
2036 020000    6698            ljmp    L044009?
2039           6699   L044008?:
2039           6700   ;        main.c:1277: L_motor_dir = 0; 
2039 C001      6701            push    ar1
203B 905110    6702            mov     dptr,#_L_motor_dir
203E E4        6703            clr     a
203F F0        6704            movx    @dptr,a
2040           6705   ;        main.c:1278: R_motor_dir = 1; 
2040 9050D0    6706            mov     dptr,#_R_motor_dir
2043 7401      6707            mov     a,#0x01
2045 F0        6708            movx    @dptr,a
2046           6709   ;        main.c:1279: curr_angle -= angle_diff * 1.4; // TUNE THIS
2046 C004      6710            push    ar4
2048 C005      6711            push    ar5
204A C001      6712            push    ar1
204C 904D40    6713            mov     dptr,#_angle_diff
204F E0        6714            movx    a,@dptr
2050 C0E0      6715            push    acc
2052 A3        6716            inc     dptr
2053 E0        6717            movx    a,@dptr
2054 C0E0      6718            push    acc
2056 A3        6719            inc     dptr
2057 E0        6720            movx    a,@dptr
2058 C0E0      6721            push    acc
205A A3        6722            inc     dptr
205B E0        6723            movx    a,@dptr
205C C0E0      6724            push    acc
205E 903333    6725            mov     dptr,#0x3333
2061 75F0B3    6726            mov     b,#0xB3
2064 743F      6727            mov     a,#0x3F
2066 120000    6728            lcall   ___fsmul
2069 8582E8    6729            mov     _Joystick_Control_sloc3_1_0,dpl
206C 8583E9    6730            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
206F 85F0EA    6731            mov     (_Joystick_Control_sloc3_1_0 + 2),b
2072 F5EB      6732            mov     (_Joystick_Control_sloc3_1_0 + 3),a
2074 E581      6733            mov     a,sp
2076 24FC      6734            add     a,#0xfc
2078 F581      6735            mov     sp,a
207A D001      6736            pop     ar1
207C 904E00    6737            mov     dptr,#_curr_angle
207F E0        6738            movx    a,@dptr
2080 F8        6739            mov     r0,a
2081 A3        6740            inc     dptr
2082 E0        6741            movx    a,@dptr
2083 F9        6742            mov     r1,a
2084 A3        6743            inc     dptr
2085 E0        6744            movx    a,@dptr
2086 FA        6745            mov     r2,a
2087 A3        6746            inc     dptr
2088 E0        6747            movx    a,@dptr
2089 FB        6748            mov     r3,a
208A C001      6749            push    ar1
208C C0E8      6750            push    _Joystick_Control_sloc3_1_0
208E C0E9      6751            push    (_Joystick_Control_sloc3_1_0 + 1)
2090 C0EA      6752            push    (_Joystick_Control_sloc3_1_0 + 2)
2092 C0EB      6753            push    (_Joystick_Control_sloc3_1_0 + 3)
2094 8882      6754            mov     dpl,r0
2096 8983      6755            mov     dph,r1
2098 8AF0      6756            mov     b,r2
209A EB        6757            mov     a,r3
209B 120000    6758            lcall   ___fssub
209E AA82      6759            mov     r2,dpl
20A0 AB83      6760            mov     r3,dph
20A2 AEF0      6761            mov     r6,b
20A4 FF        6762            mov     r7,a
20A5 E581      6763            mov     a,sp
20A7 24FC      6764            add     a,#0xfc
20A9 F581      6765            mov     sp,a
20AB D001      6766            pop     ar1
20AD D005      6767            pop     ar5
20AF D004      6768            pop     ar4
20B1 904E00    6769            mov     dptr,#_curr_angle
20B4 EA        6770            mov     a,r2
20B5 F0        6771            movx    @dptr,a
20B6 A3        6772            inc     dptr
20B7 EB        6773            mov     a,r3
20B8 F0        6774            movx    @dptr,a
20B9 A3        6775            inc     dptr
20BA EE        6776            mov     a,r6
20BB F0        6777            movx    @dptr,a
20BC A3        6778            inc     dptr
20BD EF        6779            mov     a,r7
20BE F0        6780            movx    @dptr,a
20BF           6781   ;        main.c:1348: return curr_angle; 
20BF D001      6782            pop     ar1
20C1           6783   ;        main.c:1279: curr_angle -= angle_diff * 1.4; // TUNE THIS
20C1           6784   L044009?:
20C1           6785   ;        main.c:1281: if (curr_angle > 360.0) curr_angle -= 360.0; 
20C1 904E00    6786            mov     dptr,#_curr_angle
20C4 E0        6787            movx    a,@dptr
20C5 FA        6788            mov     r2,a
20C6 A3        6789            inc     dptr
20C7 E0        6790            movx    a,@dptr
20C8 FB        6791            mov     r3,a
20C9 A3        6792            inc     dptr
20CA E0        6793            movx    a,@dptr
20CB FE        6794            mov     r6,a
20CC A3        6795            inc     dptr
20CD E0        6796            movx    a,@dptr
20CE FF        6797            mov     r7,a
20CF C002      6798            push    ar2
20D1 C003      6799            push    ar3
20D3 C004      6800            push    ar4
20D5 C005      6801            push    ar5
20D7 C006      6802            push    ar6
20D9 C007      6803            push    ar7
20DB C001      6804            push    ar1
20DD E4        6805            clr     a
20DE C0E0      6806            push    acc
20E0 C0E0      6807            push    acc
20E2 74B4      6808            mov     a,#0xB4
20E4 C0E0      6809            push    acc
20E6 7443      6810            mov     a,#0x43
20E8 C0E0      6811            push    acc
20EA 8A82      6812            mov     dpl,r2
20EC 8B83      6813            mov     dph,r3
20EE 8EF0      6814            mov     b,r6
20F0 EF        6815            mov     a,r7
20F1 120000    6816            lcall   ___fsgt
20F4 A882      6817            mov     r0,dpl
20F6 E581      6818            mov     a,sp
20F8 24FC      6819            add     a,#0xfc
20FA F581      6820            mov     sp,a
20FC D001      6821            pop     ar1
20FE D007      6822            pop     ar7
2100 D006      6823            pop     ar6
2102 D005      6824            pop     ar5
2104 D004      6825            pop     ar4
2106 D003      6826            pop     ar3
2108 D002      6827            pop     ar2
210A E8        6828            mov     a,r0
210B 6000      6829            jz      L044011?
210D C004      6830            push    ar4
210F C005      6831            push    ar5
2111 C001      6832            push    ar1
2113 E4        6833            clr     a
2114 C0E0      6834            push    acc
2116 C0E0      6835            push    acc
2118 74B4      6836            mov     a,#0xB4
211A C0E0      6837            push    acc
211C 7443      6838            mov     a,#0x43
211E C0E0      6839            push    acc
2120 8A82      6840            mov     dpl,r2
2122 8B83      6841            mov     dph,r3
2124 8EF0      6842            mov     b,r6
2126 EF        6843            mov     a,r7
2127 120000    6844            lcall   ___fssub
212A AA82      6845            mov     r2,dpl
212C AB83      6846            mov     r3,dph
212E AEF0      6847            mov     r6,b
2130 FF        6848            mov     r7,a
2131 E581      6849            mov     a,sp
2133 24FC      6850            add     a,#0xfc
2135 F581      6851            mov     sp,a
2137 D001      6852            pop     ar1
2139 D005      6853            pop     ar5
213B D004      6854            pop     ar4
213D 904E00    6855            mov     dptr,#_curr_angle
2140 EA        6856            mov     a,r2
2141 F0        6857            movx    @dptr,a
2142 A3        6858            inc     dptr
2143 EB        6859            mov     a,r3
2144 F0        6860            movx    @dptr,a
2145 A3        6861            inc     dptr
2146 EE        6862            mov     a,r6
2147 F0        6863            movx    @dptr,a
2148 A3        6864            inc     dptr
2149 EF        6865            mov     a,r7
214A F0        6866            movx    @dptr,a
214B           6867   L044011?:
214B           6868   ;        main.c:1282: if (curr_angle < 0.0) curr_angle += 360.0; 
214B 904E00    6869            mov     dptr,#_curr_angle
214E E0        6870            movx    a,@dptr
214F FA        6871            mov     r2,a
2150 A3        6872            inc     dptr
2151 E0        6873            movx    a,@dptr
2152 FB        6874            mov     r3,a
2153 A3        6875            inc     dptr
2154 E0        6876            movx    a,@dptr
2155 FE        6877            mov     r6,a
2156 A3        6878            inc     dptr
2157 E0        6879            movx    a,@dptr
2158 FF        6880            mov     r7,a
2159 C002      6881            push    ar2
215B C003      6882            push    ar3
215D C004      6883            push    ar4
215F C005      6884            push    ar5
2161 C006      6885            push    ar6
2163 C007      6886            push    ar7
2165 C001      6887            push    ar1
2167 E4        6888            clr     a
2168 C0E0      6889            push    acc
216A C0E0      6890            push    acc
216C C0E0      6891            push    acc
216E C0E0      6892            push    acc
2170 8A82      6893            mov     dpl,r2
2172 8B83      6894            mov     dph,r3
2174 8EF0      6895            mov     b,r6
2176 EF        6896            mov     a,r7
2177 120000    6897            lcall   ___fslt
217A A882      6898            mov     r0,dpl
217C E581      6899            mov     a,sp
217E 24FC      6900            add     a,#0xfc
2180 F581      6901            mov     sp,a
2182 D001      6902            pop     ar1
2184 D007      6903            pop     ar7
2186 D006      6904            pop     ar6
2188 D005      6905            pop     ar5
218A D004      6906            pop     ar4
218C D003      6907            pop     ar3
218E D002      6908            pop     ar2
2190 E8        6909            mov     a,r0
2191 6000      6910            jz      L044015?
2193 C004      6911            push    ar4
2195 C005      6912            push    ar5
2197 C001      6913            push    ar1
2199 E4        6914            clr     a
219A C0E0      6915            push    acc
219C C0E0      6916            push    acc
219E 74B4      6917            mov     a,#0xB4
21A0 C0E0      6918            push    acc
21A2 7443      6919            mov     a,#0x43
21A4 C0E0      6920            push    acc
21A6 8A82      6921            mov     dpl,r2
21A8 8B83      6922            mov     dph,r3
21AA 8EF0      6923            mov     b,r6
21AC EF        6924            mov     a,r7
21AD 120000    6925            lcall   ___fsadd
21B0 AA82      6926            mov     r2,dpl
21B2 AB83      6927            mov     r3,dph
21B4 AEF0      6928            mov     r6,b
21B6 FF        6929            mov     r7,a
21B7 E581      6930            mov     a,sp
21B9 24FC      6931            add     a,#0xfc
21BB F581      6932            mov     sp,a
21BD D001      6933            pop     ar1
21BF D005      6934            pop     ar5
21C1 D004      6935            pop     ar4
21C3 904E00    6936            mov     dptr,#_curr_angle
21C6 EA        6937            mov     a,r2
21C7 F0        6938            movx    @dptr,a
21C8 A3        6939            inc     dptr
21C9 EB        6940            mov     a,r3
21CA F0        6941            movx    @dptr,a
21CB A3        6942            inc     dptr
21CC EE        6943            mov     a,r6
21CD F0        6944            movx    @dptr,a
21CE A3        6945            inc     dptr
21CF EF        6946            mov     a,r7
21D0 F0        6947            movx    @dptr,a
21D1           6948   L044015?:
21D1           6949   ;        main.c:1284: if ((vx_error>5)&&(vy_error)>5){
21D1 E9        6950            mov     a,r1
21D2 7000      6951            jnz     L044070?
21D4 020000    6952            ljmp    L044040?
21D7           6953   L044070?:
21D7 E598      6954            mov     a,_Joystick_Control_sloc2_1_0
21D9 7000      6955            jnz     L044071?
21DB 020000    6956            ljmp    L044040?
21DE           6957   L044071?:
21DE           6958   ;        main.c:1286: angle_diff = fabsf(raw_angle - last_raw_angle);
21DE 904DC0    6959            mov     dptr,#_raw_angle
21E1 E0        6960            movx    a,@dptr
21E2 FA        6961            mov     r2,a
21E3 A3        6962            inc     dptr
21E4 E0        6963            movx    a,@dptr
21E5 FB        6964            mov     r3,a
21E6 A3        6965            inc     dptr
21E7 E0        6966            movx    a,@dptr
21E8 FE        6967            mov     r6,a
21E9 A3        6968            inc     dptr
21EA E0        6969            movx    a,@dptr
21EB FF        6970            mov     r7,a
21EC C004      6971            push    ar4
21EE C005      6972            push    ar5
21F0 904D80    6973            mov     dptr,#_last_raw_angle
21F3 E0        6974            movx    a,@dptr
21F4 C0E0      6975            push    acc
21F6 A3        6976            inc     dptr
21F7 E0        6977            movx    a,@dptr
21F8 C0E0      6978            push    acc
21FA A3        6979            inc     dptr
21FB E0        6980            movx    a,@dptr
21FC C0E0      6981            push    acc
21FE A3        6982            inc     dptr
21FF E0        6983            movx    a,@dptr
2200 C0E0      6984            push    acc
2202 8A82      6985            mov     dpl,r2
2204 8B83      6986            mov     dph,r3
2206 8EF0      6987            mov     b,r6
2208 EF        6988            mov     a,r7
2209 120000    6989            lcall   ___fssub
220C AA82      6990            mov     r2,dpl
220E AB83      6991            mov     r3,dph
2210 AEF0      6992            mov     r6,b
2212 FF        6993            mov     r7,a
2213 E581      6994            mov     a,sp
2215 24FC      6995            add     a,#0xfc
2217 F581      6996            mov     sp,a
2219 8A82      6997            mov     dpl,r2
221B 8B83      6998            mov     dph,r3
221D 8EF0      6999            mov     b,r6
221F EF        7000            mov     a,r7
2220 120000    7001            lcall   _fabsf
2223 858238    7002            mov     _Joystick_Control_sloc4_1_0,dpl
2226 858339    7003            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
2229 85F03A    7004            mov     (_Joystick_Control_sloc4_1_0 + 2),b
222C F53B      7005            mov     (_Joystick_Control_sloc4_1_0 + 3),a
222E D005      7006            pop     ar5
2230 D004      7007            pop     ar4
2232 904D40    7008            mov     dptr,#_angle_diff
2235 E538      7009            mov     a,_Joystick_Control_sloc4_1_0
2237 F0        7010            movx    @dptr,a
2238 A3        7011            inc     dptr
2239 E539      7012            mov     a,(_Joystick_Control_sloc4_1_0 + 1)
223B F0        7013            movx    @dptr,a
223C A3        7014            inc     dptr
223D E53A      7015            mov     a,(_Joystick_Control_sloc4_1_0 + 2)
223F F0        7016            movx    @dptr,a
2240 A3        7017            inc     dptr
2241 E53B      7018            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
2243 F0        7019            movx    @dptr,a
2244           7020   ;        main.c:1287: if (vy_err>0){
2244 90D3B8    7021            mov     dptr,#_Joystick_Control_vy_err_1_243
2247 E0        7022            movx    a,@dptr
2248 F8        7023            mov     r0,a
2249 A3        7024            inc     dptr
224A E0        7025            movx    a,@dptr
224B F9        7026            mov     r1,a
224C C3        7027            clr     c
224D E4        7028            clr     a
224E 98        7029            subb    a,r0
224F E4        7030            clr     a
2250 6480      7031            xrl     a,#0x80
2252 89F0      7032            mov     b,r1
2254 63F080    7033            xrl     b,#0x80
2257 95F0      7034            subb    a,b
2259 4000      7035            jc      L044072?
225B 020000    7036            ljmp    L044027?
225E           7037   L044072?:
225E           7038   ;        main.c:1288: L_motor_dir = 0; 
225E C000      7039            push    ar0
2260 C001      7040            push    ar1
2262 905110    7041            mov     dptr,#_L_motor_dir
2265           7042   ;        main.c:1289: R_motor_dir = 0; 
2265 E4        7043            clr     a
2266 F0        7044            movx    @dptr,a
2267 9050D0    7045            mov     dptr,#_R_motor_dir
226A F0        7046            movx    @dptr,a
226B           7047   ;        main.c:1291: if (vx_err>0){
226B 90D368    7048            mov     dptr,#_Joystick_Control_vx_err_1_243
226E E0        7049            movx    a,@dptr
226F F8        7050            mov     r0,a
2270 A3        7051            inc     dptr
2271 E0        7052            movx    a,@dptr
2272 F9        7053            mov     r1,a
2273 C3        7054            clr     c
2274 E4        7055            clr     a
2275 98        7056            subb    a,r0
2276 E4        7057            clr     a
2277 6480      7058            xrl     a,#0x80
2279 89F0      7059            mov     b,r1
227B 63F080    7060            xrl     b,#0x80
227E 95F0      7061            subb    a,b
2280 D001      7062            pop     ar1
2282 D000      7063            pop     ar0
2284 4000      7064            jc      L044073?
2286 020000    7065            ljmp    L044024?
2289           7066   L044073?:
2289           7067   ;        main.c:1293: if (vy*100<=vy_thres*100/2){
2289 C000      7068            push    ar0
228B C001      7069            push    ar1
228D 904F50    7070            mov     dptr,#_vy
2290 E0        7071            movx    a,@dptr
2291 F500      7072            mov     __mulint_PARM_2,a
2293 A3        7073            inc     dptr
2294 E0        7074            movx    a,@dptr
2295 F501      7075            mov     (__mulint_PARM_2 + 1),a
2297 900064    7076            mov     dptr,#0x0064
229A C004      7077            push    ar4
229C C005      7078            push    ar5
229E C000      7079            push    ar0
22A0 C001      7080            push    ar1
22A2 120000    7081            lcall   __mulint
22A5 8582E8    7082            mov     _Joystick_Control_sloc3_1_0,dpl
22A8 8583E9    7083            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
22AB D001      7084            pop     ar1
22AD D000      7085            pop     ar0
22AF 904FD0    7086            mov     dptr,#_vy_thres
22B2 E0        7087            movx    a,@dptr
22B3 F500      7088            mov     __mulint_PARM_2,a
22B5 A3        7089            inc     dptr
22B6 E0        7090            movx    a,@dptr
22B7 F501      7091            mov     (__mulint_PARM_2 + 1),a
22B9 900064    7092            mov     dptr,#0x0064
22BC 120000    7093            lcall   __mulint
22BF A882      7094            mov     r0,dpl
22C1 A983      7095            mov     r1,dph
22C3 750002    7096            mov     __divsint_PARM_2,#0x02
22C6 E4        7097            clr     a
22C7 F501      7098            mov     (__divsint_PARM_2 + 1),a
22C9 8882      7099            mov     dpl,r0
22CB 8983      7100            mov     dph,r1
22CD 120000    7101            lcall   __divsint
22D0 A882      7102            mov     r0,dpl
22D2 A983      7103            mov     r1,dph
22D4 D005      7104            pop     ar5
22D6 D004      7105            pop     ar4
22D8 C3        7106            clr     c
22D9 E8        7107            mov     a,r0
22DA 95E8      7108            subb    a,_Joystick_Control_sloc3_1_0
22DC E9        7109            mov     a,r1
22DD 6480      7110            xrl     a,#0x80
22DF 85E9F0    7111            mov     b,(_Joystick_Control_sloc3_1_0 + 1)
22E2 63F080    7112            xrl     b,#0x80
22E5 95F0      7113            subb    a,b
22E7 D001      7114            pop     ar1
22E9 D000      7115            pop     ar0
22EB 5000      7116            jnc     L044074?
22ED 020000    7117            ljmp    L044018?
22F0           7118   L044074?:
22F0           7119   ;        main.c:1294: pwm_left = vy_error; 
22F0 C000      7120            push    ar0
22F2 C001      7121            push    ar1
22F4 90D318    7122            mov     dptr,#_Joystick_Control_vy_error_1_243
22F7 E0        7123            movx    a,@dptr
22F8 F5E8      7124            mov     _Joystick_Control_sloc3_1_0,a
22FA A3        7125            inc     dptr
22FB E0        7126            movx    a,@dptr
22FC F5E9      7127            mov     (_Joystick_Control_sloc3_1_0 + 1),a
22FE 905190    7128            mov     dptr,#_pwm_left
2301 E5E8      7129            mov     a,_Joystick_Control_sloc3_1_0
2303 F0        7130            movx    @dptr,a
2304           7131   ;        main.c:1295: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
2304 904E40    7132            mov     dptr,#_pwm_corr
2307 E0        7133            movx    a,@dptr
2308 F588      7134            mov     _Joystick_Control_sloc5_1_0,a
230A A3        7135            inc     dptr
230B E0        7136            movx    a,@dptr
230C F589      7137            mov     (_Joystick_Control_sloc5_1_0 + 1),a
230E A3        7138            inc     dptr
230F E0        7139            movx    a,@dptr
2310 F58A      7140            mov     (_Joystick_Control_sloc5_1_0 + 2),a
2312 A3        7141            inc     dptr
2313 E0        7142            movx    a,@dptr
2314 F58B      7143            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2316 85E882    7144            mov     dpl,_Joystick_Control_sloc3_1_0
2319 85E983    7145            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
231C C004      7146            push    ar4
231E C005      7147            push    ar5
2320 C000      7148            push    ar0
2322 C001      7149            push    ar1
2324 120000    7150            lcall   ___sint2fs
2327 AE82      7151            mov     r6,dpl
2329 AF83      7152            mov     r7,dph
232B AAF0      7153            mov     r2,b
232D FB        7154            mov     r3,a
232E C006      7155            push    ar6
2330 C007      7156            push    ar7
2332 C002      7157            push    ar2
2334 C003      7158            push    ar3
2336 858882    7159            mov     dpl,_Joystick_Control_sloc5_1_0
2339 858983    7160            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
233C 858AF0    7161            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
233F E58B      7162            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2341 120000    7163            lcall   ___fsmul
2344 AA82      7164            mov     r2,dpl
2346 AB83      7165            mov     r3,dph
2348 AEF0      7166            mov     r6,b
234A FF        7167            mov     r7,a
234B E581      7168            mov     a,sp
234D 24FC      7169            add     a,#0xfc
234F F581      7170            mov     sp,a
2351 C002      7171            push    ar2
2353 C003      7172            push    ar3
2355 C006      7173            push    ar6
2357 C007      7174            push    ar7
2359 900000    7175            mov     dptr,#0x0000
235C 75F0C8    7176            mov     b,#0xC8
235F 7442      7177            mov     a,#0x42
2361 120000    7178            lcall   ___fsmul
2364 858288    7179            mov     _Joystick_Control_sloc5_1_0,dpl
2367 858389    7180            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
236A 85F08A    7181            mov     (_Joystick_Control_sloc5_1_0 + 2),b
236D F58B      7182            mov     (_Joystick_Control_sloc5_1_0 + 3),a
236F E581      7183            mov     a,sp
2371 24FC      7184            add     a,#0xfc
2373 F581      7185            mov     sp,a
2375 D001      7186            pop     ar1
2377 D000      7187            pop     ar0
2379 D005      7188            pop     ar5
237B D004      7189            pop     ar4
237D E5E8      7190            mov     a,_Joystick_Control_sloc3_1_0
237F 2C        7191            add     a,r4
2380 F582      7192            mov     dpl,a
2382 E5E9      7193            mov     a,(_Joystick_Control_sloc3_1_0 + 1)
2384 3D        7194            addc    a,r5
2385 F583      7195            mov     dph,a
2387 C004      7196            push    ar4
2389 C005      7197            push    ar5
238B 120000    7198            lcall   ___sint2fs
238E A882      7199            mov     r0,dpl
2390 A983      7200            mov     r1,dph
2392 AAF0      7201            mov     r2,b
2394 FB        7202            mov     r3,a
2395 C000      7203            push    ar0
2397 C001      7204            push    ar1
2399 C000      7205            push    ar0
239B C001      7206            push    ar1
239D C002      7207            push    ar2
239F C003      7208            push    ar3
23A1 858882    7209            mov     dpl,_Joystick_Control_sloc5_1_0
23A4 858983    7210            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
23A7 858AF0    7211            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
23AA E58B      7212            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
23AC 120000    7213            lcall   ___fsdiv
23AF AA82      7214            mov     r2,dpl
23B1 AB83      7215            mov     r3,dph
23B3 AEF0      7216            mov     r6,b
23B5 FF        7217            mov     r7,a
23B6 E581      7218            mov     a,sp
23B8 24FC      7219            add     a,#0xfc
23BA F581      7220            mov     sp,a
23BC 8A82      7221            mov     dpl,r2
23BE 8B83      7222            mov     dph,r3
23C0 8EF0      7223            mov     b,r6
23C2 EF        7224            mov     a,r7
23C3 120000    7225            lcall   ___fs2uchar
23C6 E582      7226            mov     a,dpl
23C8 D001      7227            pop     ar1
23CA D000      7228            pop     ar0
23CC D005      7229            pop     ar5
23CE D004      7230            pop     ar4
23D0 905150    7231            mov     dptr,#_pwm_right
23D3 F0        7232            movx    @dptr,a
23D4 D001      7233            pop     ar1
23D6 D000      7234            pop     ar0
23D8 020000    7235            ljmp    L044019?
23DB           7236   L044018?:
23DB           7237   ;        main.c:1298: pwm_left = vx_error; 
23DB C000      7238            push    ar0
23DD C001      7239            push    ar1
23DF 905190    7240            mov     dptr,#_pwm_left
23E2 EC        7241            mov     a,r4
23E3 F0        7242            movx    @dptr,a
23E4           7243   ;        main.c:1299: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
23E4 904E40    7244            mov     dptr,#_pwm_corr
23E7 E0        7245            movx    a,@dptr
23E8 F588      7246            mov     _Joystick_Control_sloc5_1_0,a
23EA A3        7247            inc     dptr
23EB E0        7248            movx    a,@dptr
23EC F589      7249            mov     (_Joystick_Control_sloc5_1_0 + 1),a
23EE A3        7250            inc     dptr
23EF E0        7251            movx    a,@dptr
23F0 F58A      7252            mov     (_Joystick_Control_sloc5_1_0 + 2),a
23F2 A3        7253            inc     dptr
23F3 E0        7254            movx    a,@dptr
23F4 F58B      7255            mov     (_Joystick_Control_sloc5_1_0 + 3),a
23F6 8C82      7256            mov     dpl,r4
23F8 8D83      7257            mov     dph,r5
23FA C004      7258            push    ar4
23FC C005      7259            push    ar5
23FE 120000    7260            lcall   ___sint2fs
2401 A882      7261            mov     r0,dpl
2403 A983      7262            mov     r1,dph
2405 AAF0      7263            mov     r2,b
2407 FB        7264            mov     r3,a
2408 C000      7265            push    ar0
240A C001      7266            push    ar1
240C C000      7267            push    ar0
240E C001      7268            push    ar1
2410 C002      7269            push    ar2
2412 C003      7270            push    ar3
2414 858882    7271            mov     dpl,_Joystick_Control_sloc5_1_0
2417 858983    7272            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
241A 858AF0    7273            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
241D E58B      7274            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
241F 120000    7275            lcall   ___fsmul
2422 AA82      7276            mov     r2,dpl
2424 AB83      7277            mov     r3,dph
2426 AEF0      7278            mov     r6,b
2428 FF        7279            mov     r7,a
2429 E581      7280            mov     a,sp
242B 24FC      7281            add     a,#0xfc
242D F581      7282            mov     sp,a
242F C002      7283            push    ar2
2431 C003      7284            push    ar3
2433 C006      7285            push    ar6
2435 C007      7286            push    ar7
2437 900000    7287            mov     dptr,#0x0000
243A 75F0C8    7288            mov     b,#0xC8
243D 7442      7289            mov     a,#0x42
243F 120000    7290            lcall   ___fsmul
2442 858288    7291            mov     _Joystick_Control_sloc5_1_0,dpl
2445 858389    7292            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
2448 85F08A    7293            mov     (_Joystick_Control_sloc5_1_0 + 2),b
244B F58B      7294            mov     (_Joystick_Control_sloc5_1_0 + 3),a
244D E581      7295            mov     a,sp
244F 24FC      7296            add     a,#0xfc
2451 F581      7297            mov     sp,a
2453 D001      7298            pop     ar1
2455 D000      7299            pop     ar0
2457 D005      7300            pop     ar5
2459 D004      7301            pop     ar4
245B 90D318    7302            mov     dptr,#_Joystick_Control_vy_error_1_243
245E E0        7303            movx    a,@dptr
245F F8        7304            mov     r0,a
2460 A3        7305            inc     dptr
2461 E0        7306            movx    a,@dptr
2462 F9        7307            mov     r1,a
2463 E8        7308            mov     a,r0
2464 2C        7309            add     a,r4
2465 F582      7310            mov     dpl,a
2467 E9        7311            mov     a,r1
2468 3D        7312            addc    a,r5
2469 F583      7313            mov     dph,a
246B C004      7314            push    ar4
246D C005      7315            push    ar5
246F 120000    7316            lcall   ___sint2fs
2472 A882      7317            mov     r0,dpl
2474 A983      7318            mov     r1,dph
2476 AAF0      7319            mov     r2,b
2478 FB        7320            mov     r3,a
2479 C000      7321            push    ar0
247B C001      7322            push    ar1
247D C000      7323            push    ar0
247F C001      7324            push    ar1
2481 C002      7325            push    ar2
2483 C003      7326            push    ar3
2485 858882    7327            mov     dpl,_Joystick_Control_sloc5_1_0
2488 858983    7328            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
248B 858AF0    7329            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
248E E58B      7330            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2490 120000    7331            lcall   ___fsdiv
2493 AA82      7332            mov     r2,dpl
2495 AB83      7333            mov     r3,dph
2497 AEF0      7334            mov     r6,b
2499 FF        7335            mov     r7,a
249A E581      7336            mov     a,sp
249C 24FC      7337            add     a,#0xfc
249E F581      7338            mov     sp,a
24A0 8A82      7339            mov     dpl,r2
24A2 8B83      7340            mov     dph,r3
24A4 8EF0      7341            mov     b,r6
24A6 EF        7342            mov     a,r7
24A7 120000    7343            lcall   ___fs2uchar
24AA E582      7344            mov     a,dpl
24AC D001      7345            pop     ar1
24AE D000      7346            pop     ar0
24B0 D005      7347            pop     ar5
24B2 D004      7348            pop     ar4
24B4 905150    7349            mov     dptr,#_pwm_right
24B7 F0        7350            movx    @dptr,a
24B8           7351   ;        main.c:1348: return curr_angle; 
24B8 D001      7352            pop     ar1
24BA D000      7353            pop     ar0
24BC           7354   ;        main.c:1299: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
24BC           7355   L044019?:
24BC           7356   ;        main.c:1301: curr_angle += angle_diff * 1.5; // TUNE THIS 
24BC C000      7357            push    ar0
24BE C001      7358            push    ar1
24C0 C004      7359            push    ar4
24C2 C005      7360            push    ar5
24C4 C000      7361            push    ar0
24C6 C001      7362            push    ar1
24C8 C038      7363            push    _Joystick_Control_sloc4_1_0
24CA C039      7364            push    (_Joystick_Control_sloc4_1_0 + 1)
24CC C03A      7365            push    (_Joystick_Control_sloc4_1_0 + 2)
24CE C03B      7366            push    (_Joystick_Control_sloc4_1_0 + 3)
24D0 900000    7367            mov     dptr,#0x0000
24D3 75F0C0    7368            mov     b,#0xC0
24D6 743F      7369            mov     a,#0x3F
24D8 120000    7370            lcall   ___fsmul
24DB 858288    7371            mov     _Joystick_Control_sloc5_1_0,dpl
24DE 858389    7372            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
24E1 85F08A    7373            mov     (_Joystick_Control_sloc5_1_0 + 2),b
24E4 F58B      7374            mov     (_Joystick_Control_sloc5_1_0 + 3),a
24E6 E581      7375            mov     a,sp
24E8 24FC      7376            add     a,#0xfc
24EA F581      7377            mov     sp,a
24EC D001      7378            pop     ar1
24EE D000      7379            pop     ar0
24F0 904E00    7380            mov     dptr,#_curr_angle
24F3 E0        7381            movx    a,@dptr
24F4 F8        7382            mov     r0,a
24F5 A3        7383            inc     dptr
24F6 E0        7384            movx    a,@dptr
24F7 F9        7385            mov     r1,a
24F8 A3        7386            inc     dptr
24F9 E0        7387            movx    a,@dptr
24FA FA        7388            mov     r2,a
24FB A3        7389            inc     dptr
24FC E0        7390            movx    a,@dptr
24FD FB        7391            mov     r3,a
24FE C000      7392            push    ar0
2500 C001      7393            push    ar1
2502 C088      7394            push    _Joystick_Control_sloc5_1_0
2504 C089      7395            push    (_Joystick_Control_sloc5_1_0 + 1)
2506 C08A      7396            push    (_Joystick_Control_sloc5_1_0 + 2)
2508 C08B      7397            push    (_Joystick_Control_sloc5_1_0 + 3)
250A 8882      7398            mov     dpl,r0
250C 8983      7399            mov     dph,r1
250E 8AF0      7400            mov     b,r2
2510 EB        7401            mov     a,r3
2511 120000    7402            lcall   ___fsadd
2514 AA82      7403            mov     r2,dpl
2516 AB83      7404            mov     r3,dph
2518 AEF0      7405            mov     r6,b
251A FF        7406            mov     r7,a
251B E581      7407            mov     a,sp
251D 24FC      7408            add     a,#0xfc
251F F581      7409            mov     sp,a
2521 D001      7410            pop     ar1
2523 D000      7411            pop     ar0
2525 D005      7412            pop     ar5
2527 D004      7413            pop     ar4
2529 904E00    7414            mov     dptr,#_curr_angle
252C EA        7415            mov     a,r2
252D F0        7416            movx    @dptr,a
252E A3        7417            inc     dptr
252F EB        7418            mov     a,r3
2530 F0        7419            movx    @dptr,a
2531 A3        7420            inc     dptr
2532 EE        7421            mov     a,r6
2533 F0        7422            movx    @dptr,a
2534 A3        7423            inc     dptr
2535 EF        7424            mov     a,r7
2536 F0        7425            movx    @dptr,a
2537 D001      7426            pop     ar1
2539 D000      7427            pop     ar0
253B 020000    7428            ljmp    L044027?
253E           7429   L044024?:
253E           7430   ;        main.c:1305: if (vy*100<=vy_thres*100/2){
253E 904F50    7431            mov     dptr,#_vy
2541 E0        7432            movx    a,@dptr
2542 F500      7433            mov     __mulint_PARM_2,a
2544 A3        7434            inc     dptr
2545 E0        7435            movx    a,@dptr
2546 F501      7436            mov     (__mulint_PARM_2 + 1),a
2548 900064    7437            mov     dptr,#0x0064
254B C004      7438            push    ar4
254D C005      7439            push    ar5
254F C000      7440            push    ar0
2551 C001      7441            push    ar1
2553 120000    7442            lcall   __mulint
2556 AA82      7443            mov     r2,dpl
2558 AB83      7444            mov     r3,dph
255A D001      7445            pop     ar1
255C D000      7446            pop     ar0
255E D005      7447            pop     ar5
2560 D004      7448            pop     ar4
2562 904FD0    7449            mov     dptr,#_vy_thres
2565 E0        7450            movx    a,@dptr
2566 F500      7451            mov     __mulint_PARM_2,a
2568 A3        7452            inc     dptr
2569 E0        7453            movx    a,@dptr
256A F501      7454            mov     (__mulint_PARM_2 + 1),a
256C 900064    7455            mov     dptr,#0x0064
256F C002      7456            push    ar2
2571 C003      7457            push    ar3
2573 C004      7458            push    ar4
2575 C005      7459            push    ar5
2577 C000      7460            push    ar0
2579 C001      7461            push    ar1
257B 120000    7462            lcall   __mulint
257E AE82      7463            mov     r6,dpl
2580 AF83      7464            mov     r7,dph
2582 750002    7465            mov     __divsint_PARM_2,#0x02
2585 E4        7466            clr     a
2586 F501      7467            mov     (__divsint_PARM_2 + 1),a
2588 8E82      7468            mov     dpl,r6
258A 8F83      7469            mov     dph,r7
258C 120000    7470            lcall   __divsint
258F AE82      7471            mov     r6,dpl
2591 AF83      7472            mov     r7,dph
2593 D001      7473            pop     ar1
2595 D000      7474            pop     ar0
2597 D005      7475            pop     ar5
2599 D004      7476            pop     ar4
259B D003      7477            pop     ar3
259D D002      7478            pop     ar2
259F C3        7479            clr     c
25A0 EE        7480            mov     a,r6
25A1 9A        7481            subb    a,r2
25A2 EF        7482            mov     a,r7
25A3 6480      7483            xrl     a,#0x80
25A5 8BF0      7484            mov     b,r3
25A7 63F080    7485            xrl     b,#0x80
25AA 95F0      7486            subb    a,b
25AC 5000      7487            jnc     L044075?
25AE 020000    7488            ljmp    L044021?
25B1           7489   L044075?:
25B1           7490   ;        main.c:1306: pwm_left = vy_error*100/(vx_error+vy_error);
25B1 90D318    7491            mov     dptr,#_Joystick_Control_vy_error_1_243
25B4 E0        7492            movx    a,@dptr
25B5 FA        7493            mov     r2,a
25B6 A3        7494            inc     dptr
25B7 E0        7495            movx    a,@dptr
25B8 FB        7496            mov     r3,a
25B9 8A00      7497            mov     __mulint_PARM_2,r2
25BB 8B01      7498            mov     (__mulint_PARM_2 + 1),r3
25BD 900064    7499            mov     dptr,#0x0064
25C0 C002      7500            push    ar2
25C2 C003      7501            push    ar3
25C4 C004      7502            push    ar4
25C6 C005      7503            push    ar5
25C8 C000      7504            push    ar0
25CA C001      7505            push    ar1
25CC 120000    7506            lcall   __mulint
25CF AE82      7507            mov     r6,dpl
25D1 AF83      7508            mov     r7,dph
25D3 D001      7509            pop     ar1
25D5 D000      7510            pop     ar0
25D7 D005      7511            pop     ar5
25D9 D004      7512            pop     ar4
25DB D003      7513            pop     ar3
25DD D002      7514            pop     ar2
25DF EA        7515            mov     a,r2
25E0 2C        7516            add     a,r4
25E1 F500      7517            mov     __divsint_PARM_2,a
25E3 EB        7518            mov     a,r3
25E4 3D        7519            addc    a,r5
25E5 F501      7520            mov     (__divsint_PARM_2 + 1),a
25E7 8E82      7521            mov     dpl,r6
25E9 8F83      7522            mov     dph,r7
25EB C002      7523            push    ar2
25ED C003      7524            push    ar3
25EF C004      7525            push    ar4
25F1 C005      7526            push    ar5
25F3 C000      7527            push    ar0
25F5 C001      7528            push    ar1
25F7 120000    7529            lcall   __divsint
25FA AE82      7530            mov     r6,dpl
25FC D001      7531            pop     ar1
25FE D000      7532            pop     ar0
2600 D005      7533            pop     ar5
2602 D004      7534            pop     ar4
2604 D003      7535            pop     ar3
2606 D002      7536            pop     ar2
2608 905190    7537            mov     dptr,#_pwm_left
260B EE        7538            mov     a,r6
260C F0        7539            movx    @dptr,a
260D           7540   ;        main.c:1307: pwm_right = vy_error*pwm_corr; 
260D 8A82      7541            mov     dpl,r2
260F 8B83      7542            mov     dph,r3
2611 C004      7543            push    ar4
2613 C005      7544            push    ar5
2615 C000      7545            push    ar0
2617 C001      7546            push    ar1
2619 120000    7547            lcall   ___sint2fs
261C AA82      7548            mov     r2,dpl
261E AB83      7549            mov     r3,dph
2620 AEF0      7550            mov     r6,b
2622 FF        7551            mov     r7,a
2623 904E40    7552            mov     dptr,#_pwm_corr
2626 E0        7553            movx    a,@dptr
2627 C0E0      7554            push    acc
2629 A3        7555            inc     dptr
262A E0        7556            movx    a,@dptr
262B C0E0      7557            push    acc
262D A3        7558            inc     dptr
262E E0        7559            movx    a,@dptr
262F C0E0      7560            push    acc
2631 A3        7561            inc     dptr
2632 E0        7562            movx    a,@dptr
2633 C0E0      7563            push    acc
2635 8A82      7564            mov     dpl,r2
2637 8B83      7565            mov     dph,r3
2639 8EF0      7566            mov     b,r6
263B EF        7567            mov     a,r7
263C 120000    7568            lcall   ___fsmul
263F AA82      7569            mov     r2,dpl
2641 AB83      7570            mov     r3,dph
2643 AEF0      7571            mov     r6,b
2645 FF        7572            mov     r7,a
2646 E581      7573            mov     a,sp
2648 24FC      7574            add     a,#0xfc
264A F581      7575            mov     sp,a
264C 8A82      7576            mov     dpl,r2
264E 8B83      7577            mov     dph,r3
2650 8EF0      7578            mov     b,r6
2652 EF        7579            mov     a,r7
2653 120000    7580            lcall   ___fs2uchar
2656 E582      7581            mov     a,dpl
2658 D001      7582            pop     ar1
265A D000      7583            pop     ar0
265C D005      7584            pop     ar5
265E D004      7585            pop     ar4
2660 905150    7586            mov     dptr,#_pwm_right
2663 F0        7587            movx    @dptr,a
2664 020000    7588            ljmp    L044022?
2667           7589   L044021?:
2667           7590   ;        main.c:1310: pwm_left = vx_error*100/(vx_error+vy_error);
2667 8C00      7591            mov     __mulint_PARM_2,r4
2669 8D01      7592            mov     (__mulint_PARM_2 + 1),r5
266B 900064    7593            mov     dptr,#0x0064
266E C004      7594            push    ar4
2670 C005      7595            push    ar5
2672 C000      7596            push    ar0
2674 C001      7597            push    ar1
2676 120000    7598            lcall   __mulint
2679 AA82      7599            mov     r2,dpl
267B AB83      7600            mov     r3,dph
267D D001      7601            pop     ar1
267F D000      7602            pop     ar0
2681 D005      7603            pop     ar5
2683 D004      7604            pop     ar4
2685 90D318    7605            mov     dptr,#_Joystick_Control_vy_error_1_243
2688 E0        7606            movx    a,@dptr
2689 FE        7607            mov     r6,a
268A A3        7608            inc     dptr
268B E0        7609            movx    a,@dptr
268C FF        7610            mov     r7,a
268D EE        7611            mov     a,r6
268E 2C        7612            add     a,r4
268F F500      7613            mov     __divsint_PARM_2,a
2691 EF        7614            mov     a,r7
2692 3D        7615            addc    a,r5
2693 F501      7616            mov     (__divsint_PARM_2 + 1),a
2695 8A82      7617            mov     dpl,r2
2697 8B83      7618            mov     dph,r3
2699 C004      7619            push    ar4
269B C005      7620            push    ar5
269D C000      7621            push    ar0
269F C001      7622            push    ar1
26A1 120000    7623            lcall   __divsint
26A4 AA82      7624            mov     r2,dpl
26A6 D001      7625            pop     ar1
26A8 D000      7626            pop     ar0
26AA D005      7627            pop     ar5
26AC D004      7628            pop     ar4
26AE 905190    7629            mov     dptr,#_pwm_left
26B1 EA        7630            mov     a,r2
26B2 F0        7631            movx    @dptr,a
26B3           7632   ;        main.c:1311: pwm_right = vx_error*pwm_corr; 
26B3 8C82      7633            mov     dpl,r4
26B5 8D83      7634            mov     dph,r5
26B7 C004      7635            push    ar4
26B9 C005      7636            push    ar5
26BB C000      7637            push    ar0
26BD C001      7638            push    ar1
26BF 120000    7639            lcall   ___sint2fs
26C2 AA82      7640            mov     r2,dpl
26C4 AB83      7641            mov     r3,dph
26C6 AEF0      7642            mov     r6,b
26C8 FF        7643            mov     r7,a
26C9 904E40    7644            mov     dptr,#_pwm_corr
26CC E0        7645            movx    a,@dptr
26CD C0E0      7646            push    acc
26CF A3        7647            inc     dptr
26D0 E0        7648            movx    a,@dptr
26D1 C0E0      7649            push    acc
26D3 A3        7650            inc     dptr
26D4 E0        7651            movx    a,@dptr
26D5 C0E0      7652            push    acc
26D7 A3        7653            inc     dptr
26D8 E0        7654            movx    a,@dptr
26D9 C0E0      7655            push    acc
26DB 8A82      7656            mov     dpl,r2
26DD 8B83      7657            mov     dph,r3
26DF 8EF0      7658            mov     b,r6
26E1 EF        7659            mov     a,r7
26E2 120000    7660            lcall   ___fsmul
26E5 AA82      7661            mov     r2,dpl
26E7 AB83      7662            mov     r3,dph
26E9 AEF0      7663            mov     r6,b
26EB FF        7664            mov     r7,a
26EC E581      7665            mov     a,sp
26EE 24FC      7666            add     a,#0xfc
26F0 F581      7667            mov     sp,a
26F2 8A82      7668            mov     dpl,r2
26F4 8B83      7669            mov     dph,r3
26F6 8EF0      7670            mov     b,r6
26F8 EF        7671            mov     a,r7
26F9 120000    7672            lcall   ___fs2uchar
26FC E582      7673            mov     a,dpl
26FE D001      7674            pop     ar1
2700 D000      7675            pop     ar0
2702 D005      7676            pop     ar5
2704 D004      7677            pop     ar4
2706 905150    7678            mov     dptr,#_pwm_right
2709 F0        7679            movx    @dptr,a
270A           7680   L044022?:
270A           7681   ;        main.c:1313: curr_angle -= angle_diff * 1.5; // TUNE THIS 
270A C000      7682            push    ar0
270C C001      7683            push    ar1
270E C004      7684            push    ar4
2710 C005      7685            push    ar5
2712 C000      7686            push    ar0
2714 C001      7687            push    ar1
2716 C038      7688            push    _Joystick_Control_sloc4_1_0
2718 C039      7689            push    (_Joystick_Control_sloc4_1_0 + 1)
271A C03A      7690            push    (_Joystick_Control_sloc4_1_0 + 2)
271C C03B      7691            push    (_Joystick_Control_sloc4_1_0 + 3)
271E 900000    7692            mov     dptr,#0x0000
2721 75F0C0    7693            mov     b,#0xC0
2724 743F      7694            mov     a,#0x3F
2726 120000    7695            lcall   ___fsmul
2729 858288    7696            mov     _Joystick_Control_sloc5_1_0,dpl
272C 858389    7697            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
272F 85F08A    7698            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2732 F58B      7699            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2734 E581      7700            mov     a,sp
2736 24FC      7701            add     a,#0xfc
2738 F581      7702            mov     sp,a
273A D001      7703            pop     ar1
273C D000      7704            pop     ar0
273E 904E00    7705            mov     dptr,#_curr_angle
2741 E0        7706            movx    a,@dptr
2742 F8        7707            mov     r0,a
2743 A3        7708            inc     dptr
2744 E0        7709            movx    a,@dptr
2745 F9        7710            mov     r1,a
2746 A3        7711            inc     dptr
2747 E0        7712            movx    a,@dptr
2748 FA        7713            mov     r2,a
2749 A3        7714            inc     dptr
274A E0        7715            movx    a,@dptr
274B FB        7716            mov     r3,a
274C C000      7717            push    ar0
274E C001      7718            push    ar1
2750 C088      7719            push    _Joystick_Control_sloc5_1_0
2752 C089      7720            push    (_Joystick_Control_sloc5_1_0 + 1)
2754 C08A      7721            push    (_Joystick_Control_sloc5_1_0 + 2)
2756 C08B      7722            push    (_Joystick_Control_sloc5_1_0 + 3)
2758 8882      7723            mov     dpl,r0
275A 8983      7724            mov     dph,r1
275C 8AF0      7725            mov     b,r2
275E EB        7726            mov     a,r3
275F 120000    7727            lcall   ___fssub
2762 AA82      7728            mov     r2,dpl
2764 AB83      7729            mov     r3,dph
2766 AEF0      7730            mov     r6,b
2768 FF        7731            mov     r7,a
2769 E581      7732            mov     a,sp
276B 24FC      7733            add     a,#0xfc
276D F581      7734            mov     sp,a
276F D001      7735            pop     ar1
2771 D000      7736            pop     ar0
2773 D005      7737            pop     ar5
2775 D004      7738            pop     ar4
2777 904E00    7739            mov     dptr,#_curr_angle
277A EA        7740            mov     a,r2
277B F0        7741            movx    @dptr,a
277C A3        7742            inc     dptr
277D EB        7743            mov     a,r3
277E F0        7744            movx    @dptr,a
277F A3        7745            inc     dptr
2780 EE        7746            mov     a,r6
2781 F0        7747            movx    @dptr,a
2782 A3        7748            inc     dptr
2783 EF        7749            mov     a,r7
2784 F0        7750            movx    @dptr,a
2785           7751   ;        main.c:1348: return curr_angle; 
2785 D001      7752            pop     ar1
2787 D000      7753            pop     ar0
2789           7754   ;        main.c:1313: curr_angle -= angle_diff * 1.5; // TUNE THIS 
2789           7755   L044027?:
2789           7756   ;        main.c:1317: if (vy_err<0){
2789 E9        7757            mov     a,r1
278A 20E750    7758            jb      acc.7,L044076?
278D 020000    7759            ljmp    L044040?
2790           7760   L044076?:
2790           7761   ;        main.c:1318: L_motor_dir = 1; 
2790 905110    7762            mov     dptr,#_L_motor_dir
2793 7401      7763            mov     a,#0x01
2795 F0        7764            movx    @dptr,a
2796           7765   ;        main.c:1319: R_motor_dir = 1; 
2796 9050D0    7766            mov     dptr,#_R_motor_dir
2799 7401      7767            mov     a,#0x01
279B F0        7768            movx    @dptr,a
279C           7769   ;        main.c:1321: if (vx_err>0){
279C 90D368    7770            mov     dptr,#_Joystick_Control_vx_err_1_243
279F E0        7771            movx    a,@dptr
27A0 FA        7772            mov     r2,a
27A1 A3        7773            inc     dptr
27A2 E0        7774            movx    a,@dptr
27A3 FB        7775            mov     r3,a
27A4 C3        7776            clr     c
27A5 E4        7777            clr     a
27A6 9A        7778            subb    a,r2
27A7 E4        7779            clr     a
27A8 6480      7780            xrl     a,#0x80
27AA 8BF0      7781            mov     b,r3
27AC 63F080    7782            xrl     b,#0x80
27AF 95F0      7783            subb    a,b
27B1 4000      7784            jc      L044077?
27B3 020000    7785            ljmp    L044035?
27B6           7786   L044077?:
27B6           7787   ;        main.c:1322: if (vy*100<=vy_thres*100/2){
27B6 904F50    7788            mov     dptr,#_vy
27B9 E0        7789            movx    a,@dptr
27BA F500      7790            mov     __mulint_PARM_2,a
27BC A3        7791            inc     dptr
27BD E0        7792            movx    a,@dptr
27BE F501      7793            mov     (__mulint_PARM_2 + 1),a
27C0 900064    7794            mov     dptr,#0x0064
27C3 C004      7795            push    ar4
27C5 C005      7796            push    ar5
27C7 120000    7797            lcall   __mulint
27CA AA82      7798            mov     r2,dpl
27CC AB83      7799            mov     r3,dph
27CE D005      7800            pop     ar5
27D0 D004      7801            pop     ar4
27D2 904FD0    7802            mov     dptr,#_vy_thres
27D5 E0        7803            movx    a,@dptr
27D6 F500      7804            mov     __mulint_PARM_2,a
27D8 A3        7805            inc     dptr
27D9 E0        7806            movx    a,@dptr
27DA F501      7807            mov     (__mulint_PARM_2 + 1),a
27DC 900064    7808            mov     dptr,#0x0064
27DF C002      7809            push    ar2
27E1 C003      7810            push    ar3
27E3 C004      7811            push    ar4
27E5 C005      7812            push    ar5
27E7 120000    7813            lcall   __mulint
27EA AE82      7814            mov     r6,dpl
27EC AF83      7815            mov     r7,dph
27EE 750002    7816            mov     __divsint_PARM_2,#0x02
27F1 E4        7817            clr     a
27F2 F501      7818            mov     (__divsint_PARM_2 + 1),a
27F4 8E82      7819            mov     dpl,r6
27F6 8F83      7820            mov     dph,r7
27F8 120000    7821            lcall   __divsint
27FB AE82      7822            mov     r6,dpl
27FD AF83      7823            mov     r7,dph
27FF D005      7824            pop     ar5
2801 D004      7825            pop     ar4
2803 D003      7826            pop     ar3
2805 D002      7827            pop     ar2
2807 C3        7828            clr     c
2808 EE        7829            mov     a,r6
2809 9A        7830            subb    a,r2
280A EF        7831            mov     a,r7
280B 6480      7832            xrl     a,#0x80
280D 8BF0      7833            mov     b,r3
280F 63F080    7834            xrl     b,#0x80
2812 95F0      7835            subb    a,b
2814 5000      7836            jnc     L044078?
2816 020000    7837            ljmp    L044029?
2819           7838   L044078?:
2819           7839   ;        main.c:1323: pwm_left = vy_error; 
2819 90D318    7840            mov     dptr,#_Joystick_Control_vy_error_1_243
281C E0        7841            movx    a,@dptr
281D FA        7842            mov     r2,a
281E A3        7843            inc     dptr
281F E0        7844            movx    a,@dptr
2820 FB        7845            mov     r3,a
2821 905190    7846            mov     dptr,#_pwm_left
2824 EA        7847            mov     a,r2
2825 F0        7848            movx    @dptr,a
2826           7849   ;        main.c:1324: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
2826 904E40    7850            mov     dptr,#_pwm_corr
2829 E0        7851            movx    a,@dptr
282A F588      7852            mov     _Joystick_Control_sloc5_1_0,a
282C A3        7853            inc     dptr
282D E0        7854            movx    a,@dptr
282E F589      7855            mov     (_Joystick_Control_sloc5_1_0 + 1),a
2830 A3        7856            inc     dptr
2831 E0        7857            movx    a,@dptr
2832 F58A      7858            mov     (_Joystick_Control_sloc5_1_0 + 2),a
2834 A3        7859            inc     dptr
2835 E0        7860            movx    a,@dptr
2836 F58B      7861            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2838 8A82      7862            mov     dpl,r2
283A 8B83      7863            mov     dph,r3
283C C002      7864            push    ar2
283E C003      7865            push    ar3
2840 C004      7866            push    ar4
2842 C005      7867            push    ar5
2844 120000    7868            lcall   ___sint2fs
2847 AE82      7869            mov     r6,dpl
2849 AF83      7870            mov     r7,dph
284B A8F0      7871            mov     r0,b
284D F9        7872            mov     r1,a
284E C006      7873            push    ar6
2850 C007      7874            push    ar7
2852 C000      7875            push    ar0
2854 C001      7876            push    ar1
2856 858882    7877            mov     dpl,_Joystick_Control_sloc5_1_0
2859 858983    7878            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
285C 858AF0    7879            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
285F E58B      7880            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2861 120000    7881            lcall   ___fsmul
2864 AE82      7882            mov     r6,dpl
2866 AF83      7883            mov     r7,dph
2868 A8F0      7884            mov     r0,b
286A F9        7885            mov     r1,a
286B E581      7886            mov     a,sp
286D 24FC      7887            add     a,#0xfc
286F F581      7888            mov     sp,a
2871 C006      7889            push    ar6
2873 C007      7890            push    ar7
2875 C000      7891            push    ar0
2877 C001      7892            push    ar1
2879 900000    7893            mov     dptr,#0x0000
287C 75F0C8    7894            mov     b,#0xC8
287F 7442      7895            mov     a,#0x42
2881 120000    7896            lcall   ___fsmul
2884 858288    7897            mov     _Joystick_Control_sloc5_1_0,dpl
2887 858389    7898            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
288A 85F08A    7899            mov     (_Joystick_Control_sloc5_1_0 + 2),b
288D F58B      7900            mov     (_Joystick_Control_sloc5_1_0 + 3),a
288F E581      7901            mov     a,sp
2891 24FC      7902            add     a,#0xfc
2893 F581      7903            mov     sp,a
2895 D005      7904            pop     ar5
2897 D004      7905            pop     ar4
2899 D003      7906            pop     ar3
289B D002      7907            pop     ar2
289D EA        7908            mov     a,r2
289E 2C        7909            add     a,r4
289F F582      7910            mov     dpl,a
28A1 EB        7911            mov     a,r3
28A2 3D        7912            addc    a,r5
28A3 F583      7913            mov     dph,a
28A5 120000    7914            lcall   ___sint2fs
28A8 AA82      7915            mov     r2,dpl
28AA AB83      7916            mov     r3,dph
28AC AEF0      7917            mov     r6,b
28AE FF        7918            mov     r7,a
28AF C002      7919            push    ar2
28B1 C003      7920            push    ar3
28B3 C006      7921            push    ar6
28B5 C007      7922            push    ar7
28B7 858882    7923            mov     dpl,_Joystick_Control_sloc5_1_0
28BA 858983    7924            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
28BD 858AF0    7925            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
28C0 E58B      7926            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
28C2 120000    7927            lcall   ___fsdiv
28C5 AA82      7928            mov     r2,dpl
28C7 AB83      7929            mov     r3,dph
28C9 AEF0      7930            mov     r6,b
28CB FF        7931            mov     r7,a
28CC E581      7932            mov     a,sp
28CE 24FC      7933            add     a,#0xfc
28D0 F581      7934            mov     sp,a
28D2 8A82      7935            mov     dpl,r2
28D4 8B83      7936            mov     dph,r3
28D6 8EF0      7937            mov     b,r6
28D8 EF        7938            mov     a,r7
28D9 120000    7939            lcall   ___fs2uchar
28DC E582      7940            mov     a,dpl
28DE 905150    7941            mov     dptr,#_pwm_right
28E1 F0        7942            movx    @dptr,a
28E2 020000    7943            ljmp    L044030?
28E5           7944   L044029?:
28E5           7945   ;        main.c:1327: pwm_left = vx_error; 
28E5 905190    7946            mov     dptr,#_pwm_left
28E8 EC        7947            mov     a,r4
28E9 F0        7948            movx    @dptr,a
28EA           7949   ;        main.c:1328: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
28EA 904E40    7950            mov     dptr,#_pwm_corr
28ED E0        7951            movx    a,@dptr
28EE F588      7952            mov     _Joystick_Control_sloc5_1_0,a
28F0 A3        7953            inc     dptr
28F1 E0        7954            movx    a,@dptr
28F2 F589      7955            mov     (_Joystick_Control_sloc5_1_0 + 1),a
28F4 A3        7956            inc     dptr
28F5 E0        7957            movx    a,@dptr
28F6 F58A      7958            mov     (_Joystick_Control_sloc5_1_0 + 2),a
28F8 A3        7959            inc     dptr
28F9 E0        7960            movx    a,@dptr
28FA F58B      7961            mov     (_Joystick_Control_sloc5_1_0 + 3),a
28FC 8C82      7962            mov     dpl,r4
28FE 8D83      7963            mov     dph,r5
2900 C004      7964            push    ar4
2902 C005      7965            push    ar5
2904 120000    7966            lcall   ___sint2fs
2907 A882      7967            mov     r0,dpl
2909 A983      7968            mov     r1,dph
290B AAF0      7969            mov     r2,b
290D FB        7970            mov     r3,a
290E C000      7971            push    ar0
2910 C001      7972            push    ar1
2912 C002      7973            push    ar2
2914 C003      7974            push    ar3
2916 858882    7975            mov     dpl,_Joystick_Control_sloc5_1_0
2919 858983    7976            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
291C 858AF0    7977            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
291F E58B      7978            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2921 120000    7979            lcall   ___fsmul
2924 AA82      7980            mov     r2,dpl
2926 AB83      7981            mov     r3,dph
2928 AEF0      7982            mov     r6,b
292A FF        7983            mov     r7,a
292B E581      7984            mov     a,sp
292D 24FC      7985            add     a,#0xfc
292F F581      7986            mov     sp,a
2931 C002      7987            push    ar2
2933 C003      7988            push    ar3
2935 C006      7989            push    ar6
2937 C007      7990            push    ar7
2939 900000    7991            mov     dptr,#0x0000
293C 75F0C8    7992            mov     b,#0xC8
293F 7442      7993            mov     a,#0x42
2941 120000    7994            lcall   ___fsmul
2944 858288    7995            mov     _Joystick_Control_sloc5_1_0,dpl
2947 858389    7996            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
294A 85F08A    7997            mov     (_Joystick_Control_sloc5_1_0 + 2),b
294D F58B      7998            mov     (_Joystick_Control_sloc5_1_0 + 3),a
294F E581      7999            mov     a,sp
2951 24FC      8000            add     a,#0xfc
2953 F581      8001            mov     sp,a
2955 D005      8002            pop     ar5
2957 D004      8003            pop     ar4
2959 90D318    8004            mov     dptr,#_Joystick_Control_vy_error_1_243
295C E0        8005            movx    a,@dptr
295D F8        8006            mov     r0,a
295E A3        8007            inc     dptr
295F E0        8008            movx    a,@dptr
2960 F9        8009            mov     r1,a
2961 E8        8010            mov     a,r0
2962 2C        8011            add     a,r4
2963 F582      8012            mov     dpl,a
2965 E9        8013            mov     a,r1
2966 3D        8014            addc    a,r5
2967 F583      8015            mov     dph,a
2969 120000    8016            lcall   ___sint2fs
296C A882      8017            mov     r0,dpl
296E A983      8018            mov     r1,dph
2970 AAF0      8019            mov     r2,b
2972 FB        8020            mov     r3,a
2973 C000      8021            push    ar0
2975 C001      8022            push    ar1
2977 C002      8023            push    ar2
2979 C003      8024            push    ar3
297B 858882    8025            mov     dpl,_Joystick_Control_sloc5_1_0
297E 858983    8026            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2981 858AF0    8027            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2984 E58B      8028            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2986 120000    8029            lcall   ___fsdiv
2989 AA82      8030            mov     r2,dpl
298B AB83      8031            mov     r3,dph
298D AEF0      8032            mov     r6,b
298F FF        8033            mov     r7,a
2990 E581      8034            mov     a,sp
2992 24FC      8035            add     a,#0xfc
2994 F581      8036            mov     sp,a
2996 8A82      8037            mov     dpl,r2
2998 8B83      8038            mov     dph,r3
299A 8EF0      8039            mov     b,r6
299C EF        8040            mov     a,r7
299D 120000    8041            lcall   ___fs2uchar
29A0 E582      8042            mov     a,dpl
29A2 905150    8043            mov     dptr,#_pwm_right
29A5 F0        8044            movx    @dptr,a
29A6           8045   L044030?:
29A6           8046   ;        main.c:1330: curr_angle -= angle_diff * 1.4; // TUNE THIS 
29A6 C038      8047            push    _Joystick_Control_sloc4_1_0
29A8 C039      8048            push    (_Joystick_Control_sloc4_1_0 + 1)
29AA C03A      8049            push    (_Joystick_Control_sloc4_1_0 + 2)
29AC C03B      8050            push    (_Joystick_Control_sloc4_1_0 + 3)
29AE 903333    8051            mov     dptr,#0x3333
29B1 75F0B3    8052            mov     b,#0xB3
29B4 743F      8053            mov     a,#0x3F
29B6 120000    8054            lcall   ___fsmul
29B9 858288    8055            mov     _Joystick_Control_sloc5_1_0,dpl
29BC 858389    8056            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
29BF 85F08A    8057            mov     (_Joystick_Control_sloc5_1_0 + 2),b
29C2 F58B      8058            mov     (_Joystick_Control_sloc5_1_0 + 3),a
29C4 E581      8059            mov     a,sp
29C6 24FC      8060            add     a,#0xfc
29C8 F581      8061            mov     sp,a
29CA 904E00    8062            mov     dptr,#_curr_angle
29CD E0        8063            movx    a,@dptr
29CE F8        8064            mov     r0,a
29CF A3        8065            inc     dptr
29D0 E0        8066            movx    a,@dptr
29D1 F9        8067            mov     r1,a
29D2 A3        8068            inc     dptr
29D3 E0        8069            movx    a,@dptr
29D4 FA        8070            mov     r2,a
29D5 A3        8071            inc     dptr
29D6 E0        8072            movx    a,@dptr
29D7 FB        8073            mov     r3,a
29D8 C088      8074            push    _Joystick_Control_sloc5_1_0
29DA C089      8075            push    (_Joystick_Control_sloc5_1_0 + 1)
29DC C08A      8076            push    (_Joystick_Control_sloc5_1_0 + 2)
29DE C08B      8077            push    (_Joystick_Control_sloc5_1_0 + 3)
29E0 8882      8078            mov     dpl,r0
29E2 8983      8079            mov     dph,r1
29E4 8AF0      8080            mov     b,r2
29E6 EB        8081            mov     a,r3
29E7 120000    8082            lcall   ___fssub
29EA AA82      8083            mov     r2,dpl
29EC AB83      8084            mov     r3,dph
29EE AEF0      8085            mov     r6,b
29F0 FF        8086            mov     r7,a
29F1 E581      8087            mov     a,sp
29F3 24FC      8088            add     a,#0xfc
29F5 F581      8089            mov     sp,a
29F7 904E00    8090            mov     dptr,#_curr_angle
29FA EA        8091            mov     a,r2
29FB F0        8092            movx    @dptr,a
29FC A3        8093            inc     dptr
29FD EB        8094            mov     a,r3
29FE F0        8095            movx    @dptr,a
29FF A3        8096            inc     dptr
2A00 EE        8097            mov     a,r6
2A01 F0        8098            movx    @dptr,a
2A02 A3        8099            inc     dptr
2A03 EF        8100            mov     a,r7
2A04 F0        8101            movx    @dptr,a
2A05 020000    8102            ljmp    L044040?
2A08           8103   L044035?:
2A08           8104   ;        main.c:1334: if (vy*100<=vy_thres*100/2){
2A08 904F50    8105            mov     dptr,#_vy
2A0B E0        8106            movx    a,@dptr
2A0C F500      8107            mov     __mulint_PARM_2,a
2A0E A3        8108            inc     dptr
2A0F E0        8109            movx    a,@dptr
2A10 F501      8110            mov     (__mulint_PARM_2 + 1),a
2A12 900064    8111            mov     dptr,#0x0064
2A15 C004      8112            push    ar4
2A17 C005      8113            push    ar5
2A19 120000    8114            lcall   __mulint
2A1C AA82      8115            mov     r2,dpl
2A1E AB83      8116            mov     r3,dph
2A20 D005      8117            pop     ar5
2A22 D004      8118            pop     ar4
2A24 904FD0    8119            mov     dptr,#_vy_thres
2A27 E0        8120            movx    a,@dptr
2A28 F500      8121            mov     __mulint_PARM_2,a
2A2A A3        8122            inc     dptr
2A2B E0        8123            movx    a,@dptr
2A2C F501      8124            mov     (__mulint_PARM_2 + 1),a
2A2E 900064    8125            mov     dptr,#0x0064
2A31 C002      8126            push    ar2
2A33 C003      8127            push    ar3
2A35 C004      8128            push    ar4
2A37 C005      8129            push    ar5
2A39 120000    8130            lcall   __mulint
2A3C AE82      8131            mov     r6,dpl
2A3E AF83      8132            mov     r7,dph
2A40 750002    8133            mov     __divsint_PARM_2,#0x02
2A43 E4        8134            clr     a
2A44 F501      8135            mov     (__divsint_PARM_2 + 1),a
2A46 8E82      8136            mov     dpl,r6
2A48 8F83      8137            mov     dph,r7
2A4A 120000    8138            lcall   __divsint
2A4D AE82      8139            mov     r6,dpl
2A4F AF83      8140            mov     r7,dph
2A51 D005      8141            pop     ar5
2A53 D004      8142            pop     ar4
2A55 D003      8143            pop     ar3
2A57 D002      8144            pop     ar2
2A59 C3        8145            clr     c
2A5A EE        8146            mov     a,r6
2A5B 9A        8147            subb    a,r2
2A5C EF        8148            mov     a,r7
2A5D 6480      8149            xrl     a,#0x80
2A5F 8BF0      8150            mov     b,r3
2A61 63F080    8151            xrl     b,#0x80
2A64 95F0      8152            subb    a,b
2A66 5000      8153            jnc     L044079?
2A68 020000    8154            ljmp    L044032?
2A6B           8155   L044079?:
2A6B           8156   ;        main.c:1335: pwm_left = vy_error*100/(vx_error+vy_error);
2A6B 90D318    8157            mov     dptr,#_Joystick_Control_vy_error_1_243
2A6E E0        8158            movx    a,@dptr
2A6F FA        8159            mov     r2,a
2A70 A3        8160            inc     dptr
2A71 E0        8161            movx    a,@dptr
2A72 FB        8162            mov     r3,a
2A73 8A00      8163            mov     __mulint_PARM_2,r2
2A75 8B01      8164            mov     (__mulint_PARM_2 + 1),r3
2A77 900064    8165            mov     dptr,#0x0064
2A7A C002      8166            push    ar2
2A7C C003      8167            push    ar3
2A7E C004      8168            push    ar4
2A80 C005      8169            push    ar5
2A82 120000    8170            lcall   __mulint
2A85 AE82      8171            mov     r6,dpl
2A87 AF83      8172            mov     r7,dph
2A89 D005      8173            pop     ar5
2A8B D004      8174            pop     ar4
2A8D D003      8175            pop     ar3
2A8F D002      8176            pop     ar2
2A91 EA        8177            mov     a,r2
2A92 2C        8178            add     a,r4
2A93 F500      8179            mov     __divsint_PARM_2,a
2A95 EB        8180            mov     a,r3
2A96 3D        8181            addc    a,r5
2A97 F501      8182            mov     (__divsint_PARM_2 + 1),a
2A99 8E82      8183            mov     dpl,r6
2A9B 8F83      8184            mov     dph,r7
2A9D C002      8185            push    ar2
2A9F C003      8186            push    ar3
2AA1 120000    8187            lcall   __divsint
2AA4 AE82      8188            mov     r6,dpl
2AA6 D003      8189            pop     ar3
2AA8 D002      8190            pop     ar2
2AAA 905190    8191            mov     dptr,#_pwm_left
2AAD EE        8192            mov     a,r6
2AAE F0        8193            movx    @dptr,a
2AAF           8194   ;        main.c:1336: pwm_right =pwm_corr*vy_error; 
2AAF 904E40    8195            mov     dptr,#_pwm_corr
2AB2 E0        8196            movx    a,@dptr
2AB3 F588      8197            mov     _Joystick_Control_sloc5_1_0,a
2AB5 A3        8198            inc     dptr
2AB6 E0        8199            movx    a,@dptr
2AB7 F589      8200            mov     (_Joystick_Control_sloc5_1_0 + 1),a
2AB9 A3        8201            inc     dptr
2ABA E0        8202            movx    a,@dptr
2ABB F58A      8203            mov     (_Joystick_Control_sloc5_1_0 + 2),a
2ABD A3        8204            inc     dptr
2ABE E0        8205            movx    a,@dptr
2ABF F58B      8206            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2AC1 8A82      8207            mov     dpl,r2
2AC3 8B83      8208            mov     dph,r3
2AC5 120000    8209            lcall   ___sint2fs
2AC8 AA82      8210            mov     r2,dpl
2ACA AB83      8211            mov     r3,dph
2ACC AEF0      8212            mov     r6,b
2ACE FF        8213            mov     r7,a
2ACF C002      8214            push    ar2
2AD1 C003      8215            push    ar3
2AD3 C006      8216            push    ar6
2AD5 C007      8217            push    ar7
2AD7 858882    8218            mov     dpl,_Joystick_Control_sloc5_1_0
2ADA 858983    8219            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2ADD 858AF0    8220            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2AE0 E58B      8221            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2AE2 120000    8222            lcall   ___fsmul
2AE5 AA82      8223            mov     r2,dpl
2AE7 AB83      8224            mov     r3,dph
2AE9 AEF0      8225            mov     r6,b
2AEB FF        8226            mov     r7,a
2AEC E581      8227            mov     a,sp
2AEE 24FC      8228            add     a,#0xfc
2AF0 F581      8229            mov     sp,a
2AF2 8A82      8230            mov     dpl,r2
2AF4 8B83      8231            mov     dph,r3
2AF6 8EF0      8232            mov     b,r6
2AF8 EF        8233            mov     a,r7
2AF9 120000    8234            lcall   ___fs2uchar
2AFC E582      8235            mov     a,dpl
2AFE 905150    8236            mov     dptr,#_pwm_right
2B01 F0        8237            movx    @dptr,a
2B02 020000    8238            ljmp    L044033?
2B05           8239   L044032?:
2B05           8240   ;        main.c:1339: pwm_left = vx_error*100/(vx_error+vy_error);
2B05 8C00      8241            mov     __mulint_PARM_2,r4
2B07 8D01      8242            mov     (__mulint_PARM_2 + 1),r5
2B09 900064    8243            mov     dptr,#0x0064
2B0C C004      8244            push    ar4
2B0E C005      8245            push    ar5
2B10 120000    8246            lcall   __mulint
2B13 AA82      8247            mov     r2,dpl
2B15 AB83      8248            mov     r3,dph
2B17 D005      8249            pop     ar5
2B19 D004      8250            pop     ar4
2B1B 90D318    8251            mov     dptr,#_Joystick_Control_vy_error_1_243
2B1E E0        8252            movx    a,@dptr
2B1F FE        8253            mov     r6,a
2B20 A3        8254            inc     dptr
2B21 E0        8255            movx    a,@dptr
2B22 FF        8256            mov     r7,a
2B23 EE        8257            mov     a,r6
2B24 2C        8258            add     a,r4
2B25 F500      8259            mov     __divsint_PARM_2,a
2B27 EF        8260            mov     a,r7
2B28 3D        8261            addc    a,r5
2B29 F501      8262            mov     (__divsint_PARM_2 + 1),a
2B2B 8A82      8263            mov     dpl,r2
2B2D 8B83      8264            mov     dph,r3
2B2F C004      8265            push    ar4
2B31 C005      8266            push    ar5
2B33 120000    8267            lcall   __divsint
2B36 AA82      8268            mov     r2,dpl
2B38 D005      8269            pop     ar5
2B3A D004      8270            pop     ar4
2B3C 905190    8271            mov     dptr,#_pwm_left
2B3F EA        8272            mov     a,r2
2B40 F0        8273            movx    @dptr,a
2B41           8274   ;        main.c:1340: pwm_right = pwm_corr*vx_error; 
2B41 904E40    8275            mov     dptr,#_pwm_corr
2B44 E0        8276            movx    a,@dptr
2B45 FA        8277            mov     r2,a
2B46 A3        8278            inc     dptr
2B47 E0        8279            movx    a,@dptr
2B48 FB        8280            mov     r3,a
2B49 A3        8281            inc     dptr
2B4A E0        8282            movx    a,@dptr
2B4B FE        8283            mov     r6,a
2B4C A3        8284            inc     dptr
2B4D E0        8285            movx    a,@dptr
2B4E FF        8286            mov     r7,a
2B4F 8C82      8287            mov     dpl,r4
2B51 8D83      8288            mov     dph,r5
2B53 C002      8289            push    ar2
2B55 C003      8290            push    ar3
2B57 C006      8291            push    ar6
2B59 C007      8292            push    ar7
2B5B 120000    8293            lcall   ___sint2fs
2B5E AC82      8294            mov     r4,dpl
2B60 AD83      8295            mov     r5,dph
2B62 A8F0      8296            mov     r0,b
2B64 F9        8297            mov     r1,a
2B65 D007      8298            pop     ar7
2B67 D006      8299            pop     ar6
2B69 D003      8300            pop     ar3
2B6B D002      8301            pop     ar2
2B6D C004      8302            push    ar4
2B6F C005      8303            push    ar5
2B71 C000      8304            push    ar0
2B73 C001      8305            push    ar1
2B75 8A82      8306            mov     dpl,r2
2B77 8B83      8307            mov     dph,r3
2B79 8EF0      8308            mov     b,r6
2B7B EF        8309            mov     a,r7
2B7C 120000    8310            lcall   ___fsmul
2B7F AA82      8311            mov     r2,dpl
2B81 AB83      8312            mov     r3,dph
2B83 ACF0      8313            mov     r4,b
2B85 FD        8314            mov     r5,a
2B86 E581      8315            mov     a,sp
2B88 24FC      8316            add     a,#0xfc
2B8A F581      8317            mov     sp,a
2B8C 8A82      8318            mov     dpl,r2
2B8E 8B83      8319            mov     dph,r3
2B90 8CF0      8320            mov     b,r4
2B92 ED        8321            mov     a,r5
2B93 120000    8322            lcall   ___fs2uchar
2B96 E582      8323            mov     a,dpl
2B98 905150    8324            mov     dptr,#_pwm_right
2B9B F0        8325            movx    @dptr,a
2B9C           8326   L044033?:
2B9C           8327   ;        main.c:1342: curr_angle += angle_diff * 1.4; // TUNE THIS 
2B9C C038      8328            push    _Joystick_Control_sloc4_1_0
2B9E C039      8329            push    (_Joystick_Control_sloc4_1_0 + 1)
2BA0 C03A      8330            push    (_Joystick_Control_sloc4_1_0 + 2)
2BA2 C03B      8331            push    (_Joystick_Control_sloc4_1_0 + 3)
2BA4 903333    8332            mov     dptr,#0x3333
2BA7 75F0B3    8333            mov     b,#0xB3
2BAA 743F      8334            mov     a,#0x3F
2BAC 120000    8335            lcall   ___fsmul
2BAF AA82      8336            mov     r2,dpl
2BB1 AB83      8337            mov     r3,dph
2BB3 ACF0      8338            mov     r4,b
2BB5 FD        8339            mov     r5,a
2BB6 E581      8340            mov     a,sp
2BB8 24FC      8341            add     a,#0xfc
2BBA F581      8342            mov     sp,a
2BBC 904E00    8343            mov     dptr,#_curr_angle
2BBF E0        8344            movx    a,@dptr
2BC0 FE        8345            mov     r6,a
2BC1 A3        8346            inc     dptr
2BC2 E0        8347            movx    a,@dptr
2BC3 FF        8348            mov     r7,a
2BC4 A3        8349            inc     dptr
2BC5 E0        8350            movx    a,@dptr
2BC6 F8        8351            mov     r0,a
2BC7 A3        8352            inc     dptr
2BC8 E0        8353            movx    a,@dptr
2BC9 F9        8354            mov     r1,a
2BCA C002      8355            push    ar2
2BCC C003      8356            push    ar3
2BCE C004      8357            push    ar4
2BD0 C005      8358            push    ar5
2BD2 8E82      8359            mov     dpl,r6
2BD4 8F83      8360            mov     dph,r7
2BD6 88F0      8361            mov     b,r0
2BD8 E9        8362            mov     a,r1
2BD9 120000    8363            lcall   ___fsadd
2BDC AA82      8364            mov     r2,dpl
2BDE AB83      8365            mov     r3,dph
2BE0 ACF0      8366            mov     r4,b
2BE2 FD        8367            mov     r5,a
2BE3 E581      8368            mov     a,sp
2BE5 24FC      8369            add     a,#0xfc
2BE7 F581      8370            mov     sp,a
2BE9 904E00    8371            mov     dptr,#_curr_angle
2BEC EA        8372            mov     a,r2
2BED F0        8373            movx    @dptr,a
2BEE A3        8374            inc     dptr
2BEF EB        8375            mov     a,r3
2BF0 F0        8376            movx    @dptr,a
2BF1 A3        8377            inc     dptr
2BF2 EC        8378            mov     a,r4
2BF3 F0        8379            movx    @dptr,a
2BF4 A3        8380            inc     dptr
2BF5 ED        8381            mov     a,r5
2BF6 F0        8382            movx    @dptr,a
2BF7           8383   L044040?:
2BF7           8384   ;        main.c:1347: last_raw_angle = raw_angle; 
2BF7 904DC0    8385            mov     dptr,#_raw_angle
2BFA E0        8386            movx    a,@dptr
2BFB FA        8387            mov     r2,a
2BFC A3        8388            inc     dptr
2BFD E0        8389            movx    a,@dptr
2BFE FB        8390            mov     r3,a
2BFF A3        8391            inc     dptr
2C00 E0        8392            movx    a,@dptr
2C01 FC        8393            mov     r4,a
2C02 A3        8394            inc     dptr
2C03 E0        8395            movx    a,@dptr
2C04 FD        8396            mov     r5,a
2C05 904D80    8397            mov     dptr,#_last_raw_angle
2C08 EA        8398            mov     a,r2
2C09 F0        8399            movx    @dptr,a
2C0A A3        8400            inc     dptr
2C0B EB        8401            mov     a,r3
2C0C F0        8402            movx    @dptr,a
2C0D A3        8403            inc     dptr
2C0E EC        8404            mov     a,r4
2C0F F0        8405            movx    @dptr,a
2C10 A3        8406            inc     dptr
2C11 ED        8407            mov     a,r5
2C12 F0        8408            movx    @dptr,a
2C13           8409   ;        main.c:1348: return curr_angle; 
2C13 904E00    8410            mov     dptr,#_curr_angle
2C16 E0        8411            movx    a,@dptr
2C17 FA        8412            mov     r2,a
2C18 A3        8413            inc     dptr
2C19 E0        8414            movx    a,@dptr
2C1A FB        8415            mov     r3,a
2C1B A3        8416            inc     dptr
2C1C E0        8417            movx    a,@dptr
2C1D FC        8418            mov     r4,a
2C1E A3        8419            inc     dptr
2C1F E0        8420            movx    a,@dptr
2C20 8A82      8421            mov     dpl,r2
2C22 8B83      8422            mov     dph,r3
2C24 8CF0      8423            mov     b,r4
2C26 22        8424            ret
2C27           8425   ;------------------------------------------------------------
2C27           8426   ;Allocation info for local variables in function 'main'
2C27           8427   ;------------------------------------------------------------
2C27           8428   ;c                         Allocated with name '_main_c_1_266'
2C27           8429   ;angle_count               Allocated with name '_main_angle_count_1_266'
2C27           8430   ;------------------------------------------------------------
2C27           8431   ;        main.c:1352: void main (void)
2C27           8432   ;        -----------------------------------------
2C27           8433   ;         function main
2C27           8434   ;        -----------------------------------------
2C27           8435   _main:
2C27           8436   ;        main.c:1358: Init_all();
2C27 120000    8437            lcall   _Init_all
2C2A           8438   ;        main.c:1359: BMM150_Init();
2C2A 120000    8439            lcall   _BMM150_Init
2C2D           8440   ;        main.c:1360: waitms(500);
2C2D 9001F4    8441            mov     dptr,#0x01F4
2C30 120000    8442            lcall   _waitms
2C33           8443   ;        main.c:1361: UART1_Init(9600);
2C33 902580    8444            mov     dptr,#0x2580
2C36 E4        8445            clr     a
2C37 F5F0      8446            mov     b,a
2C39 120000    8447            lcall   _UART1_Init
2C3C           8448   ;        main.c:1363: ReceptionOff();
2C3C 120000    8449            lcall   _ReceptionOff
2C3F           8450   ;        main.c:1366: SendATCommand("AT+VER\r\n");
2C3F 902390    8451            mov     dptr,#__str_8
2C42 75F080    8452            mov     b,#0x80
2C45 120000    8453            lcall   _SendATCommand
2C48           8454   ;        main.c:1367: SendATCommand("AT+BAUD\r\n");
2C48 9023D0    8455            mov     dptr,#__str_9
2C4B 75F080    8456            mov     b,#0x80
2C4E 120000    8457            lcall   _SendATCommand
2C51           8458   ;        main.c:1368: SendATCommand("AT+RFID\r\n");
2C51 902410    8459            mov     dptr,#__str_10
2C54 75F080    8460            mov     b,#0x80
2C57 120000    8461            lcall   _SendATCommand
2C5A           8462   ;        main.c:1369: SendATCommand("AT+DVID\r\n");
2C5A 902450    8463            mov     dptr,#__str_11
2C5D 75F080    8464            mov     b,#0x80
2C60 120000    8465            lcall   _SendATCommand
2C63           8466   ;        main.c:1370: SendATCommand("AT+RFC002\r\n");
2C63 902490    8467            mov     dptr,#__str_12
2C66 75F080    8468            mov     b,#0x80
2C69 120000    8469            lcall   _SendATCommand
2C6C           8470   ;        main.c:1371: SendATCommand("AT+POWE\r\n");
2C6C 9024D0    8471            mov     dptr,#__str_13
2C6F 75F080    8472            mov     b,#0x80
2C72 120000    8473            lcall   _SendATCommand
2C75           8474   ;        main.c:1372: SendATCommand("AT+CLSS\r\n");
2C75 902510    8475            mov     dptr,#__str_14
2C78 75F080    8476            mov     b,#0x80
2C7B 120000    8477            lcall   _SendATCommand
2C7E           8478   ;        main.c:1373: SendATCommand("AT+DVIDEF11\r\n");  
2C7E 902550    8479            mov     dptr,#__str_15
2C81 75F080    8480            mov     b,#0x80
2C84 120000    8481            lcall   _SendATCommand
2C87           8482   ;        main.c:1376: L_bridge_1 = 0; 
2C87 C2A1      8483            clr     _P2_1
2C89           8484   ;        main.c:1377: L_bridge_2 = 0; 
2C89 C2A2      8485            clr     _P2_2
2C8B           8486   ;        main.c:1378: R_bridge_1 = 0; 
2C8B C2A4      8487            clr     _P2_4
2C8D           8488   ;        main.c:1379: R_bridge_2 = 0; 
2C8D C2A3      8489            clr     _P2_3
2C8F           8490   ;        main.c:1380: vx = 0; 
2C8F 904F90    8491            mov     dptr,#_vx
2C92 E4        8492            clr     a
2C93 F0        8493            movx    @dptr,a
2C94 A3        8494            inc     dptr
2C95 F0        8495            movx    @dptr,a
2C96           8496   ;        main.c:1381: vy = 0; 
2C96 904F50    8497            mov     dptr,#_vy
2C99 E4        8498            clr     a
2C9A F0        8499            movx    @dptr,a
2C9B A3        8500            inc     dptr
2C9C F0        8501            movx    @dptr,a
2C9D           8502   ;        main.c:1384: curr_angle = Read_angle();
2C9D 120000    8503            lcall   _Read_angle
2CA0 AA82      8504            mov     r2,dpl
2CA2 AB83      8505            mov     r3,dph
2CA4 ACF0      8506            mov     r4,b
2CA6 FD        8507            mov     r5,a
2CA7 904E00    8508            mov     dptr,#_curr_angle
2CAA EA        8509            mov     a,r2
2CAB F0        8510            movx    @dptr,a
2CAC A3        8511            inc     dptr
2CAD EB        8512            mov     a,r3
2CAE F0        8513            movx    @dptr,a
2CAF A3        8514            inc     dptr
2CB0 EC        8515            mov     a,r4
2CB1 F0        8516            movx    @dptr,a
2CB2 A3        8517            inc     dptr
2CB3 ED        8518            mov     a,r5
2CB4 F0        8519            movx    @dptr,a
2CB5           8520   ;        main.c:1387: waitms(1000);
2CB5 9003E8    8521            mov     dptr,#0x03E8
2CB8 120000    8522            lcall   _waitms
2CBB           8523   ;        main.c:1388: while(1){  
2CBB           8524   L045016?:
2CBB           8525   ;        main.c:1389: servo_base = 50; 
2CBB 905090    8526            mov     dptr,#_servo_base
2CBE 7432      8527            mov     a,#0x32
2CC0 F0        8528            movx    @dptr,a
2CC1           8529   ;        main.c:1390: servo_arm = 50; 
2CC1 905050    8530            mov     dptr,#_servo_arm
2CC4 7432      8531            mov     a,#0x32
2CC6 F0        8532            movx    @dptr,a
2CC7           8533   ;        main.c:1392: if(pick == '1'){
2CC7 904C00    8534            mov     dptr,#_pick
2CCA E0        8535            movx    a,@dptr
2CCB FA        8536            mov     r2,a
2CCC BA31D0    8537            cjne    r2,#0x31,L045002?
2CCF           8538   ;        main.c:1393: servo_pick();
2CCF 120000    8539            lcall   _servo_pick
2CD2           8540   ;        main.c:1394: waitms(1000);
2CD2 9003E8    8541            mov     dptr,#0x03E8
2CD5 120000    8542            lcall   _waitms
2CD8           8543   ;        main.c:1395: pick = '0';
2CD8 904C00    8544            mov     dptr,#_pick
2CDB 7430      8545            mov     a,#0x30
2CDD F0        8546            movx    @dptr,a
2CDE           8547   L045002?:
2CDE           8548   ;        main.c:1398: if(auto_mode){
2CDE 904C40    8549            mov     dptr,#_auto_mode
2CE1 E0        8550            movx    a,@dptr
2CE2 FA        8551            mov     r2,a
2CE3 A3        8552            inc     dptr
2CE4 E0        8553            movx    a,@dptr
2CE5 FB        8554            mov     r3,a
2CE6 4A        8555            orl     a,r2
2CE7 6000      8556            jz      L045004?
2CE9           8557   ;        main.c:1399: Auto_mode_slave();
2CE9 120000    8558            lcall   _Auto_mode_slave
2CEC           8559   ;        main.c:1400: auto_mode = 0;
2CEC 904C40    8560            mov     dptr,#_auto_mode
2CEF E4        8561            clr     a
2CF0 F0        8562            movx    @dptr,a
2CF1 A3        8563            inc     dptr
2CF2 F0        8564            movx    @dptr,a
2CF3           8565   L045004?:
2CF3           8566   ;        main.c:1403: if(RXU1()) // Something has arrived
2CF3 120000    8567            lcall   _RXU1
2CF6 5000      8568            jnc     L045016?
2CF8           8569   ;        main.c:1405: c=getchar1();
2CF8 120000    8570            lcall   _getchar1
2CFB AA82      8571            mov     r2,dpl
2CFD           8572   ;        main.c:1406: if(c=='!') // Master is sending message
2CFD BA2150    8573            cjne    r2,#0x21,L045031?
2D00 8000      8574            sjmp    L045032?
2D02           8575   L045031?:
2D02 020000    8576            ljmp    L045011?
2D05           8577   L045032?:
2D05           8578   ;        main.c:1408: getstr1(buff, sizeof(buff)-1);
2D05 756013    8579            mov     _getstr1_PARM_2,#0x13
2D08 9056D0    8580            mov     dptr,#_buff
2D0B 75F040    8581            mov     b,#0x40
2D0E 120000    8582            lcall   _getstr1
2D11           8583   ;        main.c:1409: if(strlen(buff)==11)
2D11 9056D0    8584            mov     dptr,#_buff
2D14 75F040    8585            mov     b,#0x40
2D17 120000    8586            lcall   _strlen
2D1A AB82      8587            mov     r3,dpl
2D1C AC83      8588            mov     r4,dph
2D1E BB0B10    8589            cjne    r3,#0x0B,L045033?
2D21 BC0010    8590            cjne    r4,#0x00,L045033?
2D24 8000      8591            sjmp    L045034?
2D26           8592   L045033?:
2D26 020000    8593            ljmp    L045006?
2D29           8594   L045034?:
2D29           8595   ;        main.c:1413: sscanf(buff,"%03d,%03d,%01d,%01d",&vx, &vy,&pick,&auto_mode);
2D29 7440      8596            mov     a,#_auto_mode
2D2B C0E0      8597            push    acc
2D2D 744C      8598            mov     a,#(_auto_mode >> 8)
2D2F C0E0      8599            push    acc
2D31 E4        8600            clr     a
2D32 C0E0      8601            push    acc
2D34 7400      8602            mov     a,#_pick
2D36 C0E0      8603            push    acc
2D38 744C      8604            mov     a,#(_pick >> 8)
2D3A C0E0      8605            push    acc
2D3C E4        8606            clr     a
2D3D C0E0      8607            push    acc
2D3F 7450      8608            mov     a,#_vy
2D41 C0E0      8609            push    acc
2D43 744F      8610            mov     a,#(_vy >> 8)
2D45 C0E0      8611            push    acc
2D47 E4        8612            clr     a
2D48 C0E0      8613            push    acc
2D4A 7490      8614            mov     a,#_vx
2D4C C0E0      8615            push    acc
2D4E 744F      8616            mov     a,#(_vx >> 8)
2D50 C0E0      8617            push    acc
2D52 E4        8618            clr     a
2D53 C0E0      8619            push    acc
2D55 7440      8620            mov     a,#__str_5
2D57 C0E0      8621            push    acc
2D59 7417      8622            mov     a,#(__str_5 >> 8)
2D5B C0E0      8623            push    acc
2D5D 7480      8624            mov     a,#0x80
2D5F C0E0      8625            push    acc
2D61 74D0      8626            mov     a,#_buff
2D63 C0E0      8627            push    acc
2D65 7456      8628            mov     a,#(_buff >> 8)
2D67 C0E0      8629            push    acc
2D69 7440      8630            mov     a,#0x40
2D6B C0E0      8631            push    acc
2D6D 120000    8632            lcall   _sscanf
2D70 E581      8633            mov     a,sp
2D72 24EE      8634            add     a,#0xee
2D74 F581      8635            mov     sp,a
2D76           8636   ;        main.c:1414: pick = buff[8];
2D76 904C00    8637            mov     dptr,#_pick
2D79 78D8      8638            mov     r0,#(_buff + 0x0008)
2D7B E6        8639            mov     a,@r0
2D7C F0        8640            movx    @dptr,a
2D7D           8641   ;        main.c:1416: curr_angle = Joystick_Control(&vx, &vy);
2D7D 752050    8642            mov     _Joystick_Control_PARM_2,#_vy
2D80 75214F    8643            mov     (_Joystick_Control_PARM_2 + 1),#(_vy >> 8)
2D83 752200    8644            mov     (_Joystick_Control_PARM_2 + 2),#0x00
2D86 904F90    8645            mov     dptr,#_vx
2D89 75F000    8646            mov     b,#0x00
2D8C 120000    8647            lcall   _Joystick_Control
2D8F AB82      8648            mov     r3,dpl
2D91 AC83      8649            mov     r4,dph
2D93 ADF0      8650            mov     r5,b
2D95 FE        8651            mov     r6,a
2D96 904E00    8652            mov     dptr,#_curr_angle
2D99 EB        8653            mov     a,r3
2D9A F0        8654            movx    @dptr,a
2D9B A3        8655            inc     dptr
2D9C EC        8656            mov     a,r4
2D9D F0        8657            movx    @dptr,a
2D9E A3        8658            inc     dptr
2D9F ED        8659            mov     a,r5
2DA0 F0        8660            movx    @dptr,a
2DA1 A3        8661            inc     dptr
2DA2 EE        8662            mov     a,r6
2DA3 F0        8663            movx    @dptr,a
2DA4 020000    8664            ljmp    L045016?
2DA7           8665   L045006?:
2DA7           8666   ;        main.c:1419: printf("*** BAD MESSAGE ***: %s\r\n", buff);
2DA7 74D0      8667            mov     a,#_buff
2DA9 C0E0      8668            push    acc
2DAB 7456      8669            mov     a,#(_buff >> 8)
2DAD C0E0      8670            push    acc
2DAF 7440      8671            mov     a,#0x40
2DB1 C0E0      8672            push    acc
2DB3 74D0      8673            mov     a,#__str_16
2DB5 C0E0      8674            push    acc
2DB7 7427      8675            mov     a,#(__str_16 >> 8)
2DB9 C0E0      8676            push    acc
2DBB 7480      8677            mov     a,#0x80
2DBD C0E0      8678            push    acc
2DBF 120000    8679            lcall   _printf
2DC2 E581      8680            mov     a,sp
2DC4 24FA      8681            add     a,#0xfa
2DC6 F581      8682            mov     sp,a
2DC8 020000    8683            ljmp    L045016?
2DCB           8684   L045011?:
2DCB           8685   ;        main.c:1422: else if(c=='@') // Master wants slave data
2DCB BA4010    8686            cjne    r2,#0x40,L045035?
2DCE 8000      8687            sjmp    L045036?
2DD0           8688   L045035?:
2DD0 020000    8689            ljmp    L045016?
2DD3           8690   L045036?:
2DD3           8691   ;        main.c:1424: sprintf(buff, "0,00,%04ld,%05d,%03d\n", freq100, weight, (int)curr_angle);
2DD3 904E00    8692            mov     dptr,#_curr_angle
2DD6 E0        8693            movx    a,@dptr
2DD7 FA        8694            mov     r2,a
2DD8 A3        8695            inc     dptr
2DD9 E0        8696            movx    a,@dptr
2DDA FB        8697            mov     r3,a
2DDB A3        8698            inc     dptr
2DDC E0        8699            movx    a,@dptr
2DDD FC        8700            mov     r4,a
2DDE A3        8701            inc     dptr
2DDF E0        8702            movx    a,@dptr
2DE0 8A82      8703            mov     dpl,r2
2DE2 8B83      8704            mov     dph,r3
2DE4 8CF0      8705            mov     b,r4
2DE6 120000    8706            lcall   ___fs2sint
2DE9 AA82      8707            mov     r2,dpl
2DEB AB83      8708            mov     r3,dph
2DED C002      8709            push    ar2
2DEF C003      8710            push    ar3
2DF1 904CC0    8711            mov     dptr,#_weight
2DF4 E0        8712            movx    a,@dptr
2DF5 C0E0      8713            push    acc
2DF7 A3        8714            inc     dptr
2DF8 E0        8715            movx    a,@dptr
2DF9 C0E0      8716            push    acc
2DFB 905690    8717            mov     dptr,#_freq100
2DFE E0        8718            movx    a,@dptr
2DFF C0E0      8719            push    acc
2E01 A3        8720            inc     dptr
2E02 E0        8721            movx    a,@dptr
2E03 C0E0      8722            push    acc
2E05 A3        8723            inc     dptr
2E06 E0        8724            movx    a,@dptr
2E07 C0E0      8725            push    acc
2E09 A3        8726            inc     dptr
2E0A E0        8727            movx    a,@dptr
2E0B C0E0      8728            push    acc
2E0D 7490      8729            mov     a,#__str_17
2E0F C0E0      8730            push    acc
2E11 7428      8731            mov     a,#(__str_17 >> 8)
2E13 C0E0      8732            push    acc
2E15 7480      8733            mov     a,#0x80
2E17 C0E0      8734            push    acc
2E19 74D0      8735            mov     a,#_buff
2E1B C0E0      8736            push    acc
2E1D 7456      8737            mov     a,#(_buff >> 8)
2E1F C0E0      8738            push    acc
2E21 7440      8739            mov     a,#0x40
2E23 C0E0      8740            push    acc
2E25 120000    8741            lcall   _sprintf
2E28 E581      8742            mov     a,sp
2E2A 24F2      8743            add     a,#0xf2
2E2C F581      8744            mov     sp,a
2E2E           8745   ;        main.c:1425: waitms(5); // The radio seems to need this delay...
2E2E 900005    8746            mov     dptr,#0x0005
2E31 120000    8747            lcall   _waitms
2E34           8748   ;        main.c:1426: sendstr1(buff);
2E34 9056D0    8749            mov     dptr,#_buff
2E37 75F040    8750            mov     b,#0x40
2E3A 120000    8751            lcall   _sendstr1
2E3D 020000    8752            ljmp    L045016?
2E40           8753            rseg R_CSEG
2E40           8754   
0000           8755            rseg R_XINIT
0000           8756   __xinit__pwm_counter:
0000 0000      8757            db 0x00,0x00    ; 0
0002           8758   __xinit__servo_counter:
0002 0000      8759            db 0x00,0x00    ; 0
0004           8760   __xinit__pwm_left:
0004 00        8761            db 0x00         ; 0
0005           8762   __xinit__pwm_right:
0005 00        8763            db 0x00         ; 0
0006           8764   __xinit__L_motor_dir:
0006 01        8765            db 0x01         ; 1
0007           8766   __xinit__R_motor_dir:
0007 01        8767            db 0x01         ; 1
0008           8768   __xinit__servo_base:
0008 32        8769            db 0x32         ; 50
0009           8770   __xinit__servo_arm:
0009 32        8771            db 0x32         ; 50
000A           8772   __xinit__vx_thres:
000A A100      8773            db 0xA1,0x00    ;  161
000C           8774   __xinit__vy_thres:
000C A600      8775            db 0xA6,0x00    ;  166
000E           8776   __xinit__vx:
000E 0000      8777            db 0x00,0x00    ;  0
0010           8778   __xinit__vy:
0010 0000      8779            db 0x00,0x00    ;  0
0012           8780   __xinit__fre_mea_count:
0012 0000      8781            db 0x00,0x00    ; 0
0014           8782   __xinit__weight_mea_count:
0014 0000      8783            db 0x00,0x00    ; 0
0016           8784   __xinit__seed:
0016 3930      8785            db 0x39,0x30    ; 12345
0018           8786   __xinit__pwm_corr:
0018 3333733F  8787            db 0x33,0x33,0x73,0x3F  ;  9.500000e-001
001C           8788   __xinit__curr_angle:
001C 00000000  8789            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0020           8790   __xinit__raw_angle:
0020 00000000  8791            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0024           8792   __xinit__last_raw_angle:
0024 00000000  8793            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0028           8794   __xinit__angle_diff:
0028 00000000  8795            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
002C           8796   __xinit__mea_yes:
002C 01        8797            db 0x01         ;  1
002D           8798   __xinit__weight:
002D 0000      8799            db 0x00,0x00    ; 0
002F           8800   __xinit__duration:
002F 00000000  8801            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0033           8802   __xinit__auto_mode:
0033 0000      8803            db 0x00,0x00    ;  0
0035           8804   __xinit__pick:
0035 00        8805            db 0x00         ;  0
0036           8806   
0000           8807            rseg R_CONST
0000           8808   __str_0:
0000 4572726F  8809            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
0035 0D        8810            db 0x0D
0036 0A        8811            db 0x0A
0037 00        8812            db 0x00
0038           8813   __str_1:
0038 424D4D31  8814            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
0068 0D        8815            db 0x0D
0069 0A        8816            db 0x0A
006A 00        8817            db 0x00
006B           8818   __str_2:
006B 436F6D6D  8819            db 'Command: %s'
     616E643A
     202573
0076 00        8820            db 0x00
0077           8821   __str_3:
0077 52657370  8822            db 'Response: %s'
     6F6E7365
     3A202573
0083 0D        8823            db 0x0D
0084 0A        8824            db 0x0A
0085 00        8825            db 0x00
0086           8826   __str_4:
0086 41542B44  8827            db 'AT+DVID0000'
     56494430
     303030
0091 0D        8828            db 0x0D
0092 0A        8829            db 0x0A
0093 00        8830            db 0x00
0094           8831   __str_5:
0094 25303364  8832            db '%03d,%03d,%01d,%01d'
     2C253033
     642C2530
     31642C25
     303164
00A7 00        8833            db 0x00
00A8           8834   __str_6:
00A8 25303164  8835            db '%01d,%02d,%ld,%05d,%03d'
     2C253032
     642C256C
     642C2530
     35642C25
     303364
00BF 0A        8836            db 0x0A
00C0 00        8837            db 0x00
00C1           8838   __str_7:
00C1 302C3030  8839            db '0,00,%04ld,%05d,%03d,%03d,%03d'
     2C253034
     6C642C25
     3035642C
     25303364
     2C253033
     642C2530
     3364
00DF 0A        8840            db 0x0A
00E0 00        8841            db 0x00
00E1           8842   __str_8:
00E1 41542B56  8843            db 'AT+VER'
     4552
00E7 0D        8844            db 0x0D
00E8 0A        8845            db 0x0A
00E9 00        8846            db 0x00
00EA           8847   __str_9:
00EA 41542B42  8848            db 'AT+BAUD'
     415544
00F1 0D        8849            db 0x0D
00F2 0A        8850            db 0x0A
00F3 00        8851            db 0x00
00F4           8852   __str_10:
00F4 41542B52  8853            db 'AT+RFID'
     464944
00FB 0D        8854            db 0x0D
00FC 0A        8855            db 0x0A
00FD 00        8856            db 0x00
00FE           8857   __str_11:
00FE 41542B44  8858            db 'AT+DVID'
     564944
0105 0D        8859            db 0x0D
0106 0A        8860            db 0x0A
0107 00        8861            db 0x00
0108           8862   __str_12:
0108 41542B52  8863            db 'AT+RFC002'
     46433030
     32
0111 0D        8864            db 0x0D
0112 0A        8865            db 0x0A
0113 00        8866            db 0x00
0114           8867   __str_13:
0114 41542B50  8868            db 'AT+POWE'
     4F5745
011B 0D        8869            db 0x0D
011C 0A        8870            db 0x0A
011D 00        8871            db 0x00
011E           8872   __str_14:
011E 41542B43  8873            db 'AT+CLSS'
     4C5353
0125 0D        8874            db 0x0D
0126 0A        8875            db 0x0A
0127 00        8876            db 0x00
0128           8877   __str_15:
0128 41542B44  8878            db 'AT+DVIDEF11'
     56494445
     463131
0133 0D        8879            db 0x0D
0134 0A        8880            db 0x0A
0135 00        8881            db 0x00
0136           8882   __str_16:
0136 2A2A2A20  8883            db '*** BAD MESSAGE ***: %s'
     42414420
     4D455353
     41474520
     2A2A2A3A
     202573
014D 0D        8884            db 0x0D
014E 0A        8885            db 0x0A
014F 00        8886            db 0x00
0150           8887   __str_17:
0150 302C3030  8888            db '0,00,%04ld,%05d,%03d'
     2C253034
     6C642C25
     3035642C
     25303364
0164 0A        8889            db 0x0A
0165 00        8890            db 0x00
0166           8891   
0096           8892            CSEG
0096           8893   
0096           8894   end
