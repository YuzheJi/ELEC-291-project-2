0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Mon Mar 31 17:59:07 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _check_bound_PARM_2
0000             28            public _InitPinADC_PARM_2
0000             29            public _main
0000             30            public _Joystick_Control
0000             31            public _Auto_mode_slave
0000             32            public _Read_angle
0000             33            public _get_random_90_250
0000             34            public _simple_rand
0000             35            public _Move_forward
0000             36            public _Right_angle
0000             37            public _Move_back_ms
0000             38            public _Init_all
0000             39            public _check_bound
0000             40            public _servo_pick
0000             41            public _Timer5_ISR
0000             42            public _ReadHX711
0000             43            public _ADC_at_Pin
0000             44            public _InitPinADC
0000             45            public _InitADC
0000             46            public _Set_Pin_Input
0000             47            public _Set_Pin_Output
0000             48            public _ReceptionOff
0000             49            public _SendATCommand
0000             50            public _waitms_or_RI1
0000             51            public _RXU1
0000             52            public _getstr1
0000             53            public _getchar1_with_timeout
0000             54            public _getchar1
0000             55            public _sendstr1
0000             56            public _putchar1
0000             57            public _UART1_Init
0000             58            public _BMM150_Read_Data
0000             59            public _BMM150_compensate_y
0000             60            public _BMM150_compensate_x
0000             61            public _BMM150_Init
0000             62            public _BMM150_Read_Trim_Registers
0000             63            public _SPI_write
0000             64            public _SPI_read
0000             65            public _SPI_transfer
0000             66            public _waitms
0000             67            public _Timer3us
0000             68            public __c51_external_startup
0000             69            public _weight
0000             70            public _mea_yes
0000             71            public _curr_angle
0000             72            public _pwm_corr
0000             73            public _seed
0000             74            public _weight_mea_count
0000             75            public _fre_mea_count
0000             76            public _vy
0000             77            public _vx
0000             78            public _vy_thres
0000             79            public _vx_thres
0000             80            public _servo_arm
0000             81            public _servo_base
0000             82            public _R_motor_dir
0000             83            public _L_motor_dir
0000             84            public _pwm_right
0000             85            public _pwm_left
0000             86            public _servo_counter
0000             87            public _pwm_counter
0000             88            public _dig_xyz1
0000             89            public _dig_xy2
0000             90            public _dig_xy1
0000             91            public _dig_z4
0000             92            public _dig_z3
0000             93            public _dig_z2
0000             94            public _dig_z1
0000             95            public _dig_y2
0000             96            public _dig_y1
0000             97            public _dig_x2
0000             98            public _dig_x1
0000             99            public _d2
0000            100            public _d1
0000            101            public _freq100
0000            102            public _buff
0000            103            public _Joystick_Control_PARM_2
0000            104            public _getstr1_PARM_2
0000            105            public _BMM150_Read_Data_PARM_2
0000            106            public _BMM150_compensate_y_PARM_2
0000            107            public _BMM150_compensate_x_PARM_2
0000            108            public _SPI_write_PARM_2
0000            109   ;--------------------------------------------------------
0000            110   ; Special Function Registers
0000            111   ;--------------------------------------------------------
0000            112   _ACC            DATA 0xe0
0000            113   _ADC0ASAH       DATA 0xb6
0000            114   _ADC0ASAL       DATA 0xb5
0000            115   _ADC0ASCF       DATA 0xa1
0000            116   _ADC0ASCT       DATA 0xc7
0000            117   _ADC0CF0        DATA 0xbc
0000            118   _ADC0CF1        DATA 0xb9
0000            119   _ADC0CF2        DATA 0xdf
0000            120   _ADC0CN0        DATA 0xe8
0000            121   _ADC0CN1        DATA 0xb2
0000            122   _ADC0CN2        DATA 0xb3
0000            123   _ADC0GTH        DATA 0xc4
0000            124   _ADC0GTL        DATA 0xc3
0000            125   _ADC0H          DATA 0xbe
0000            126   _ADC0L          DATA 0xbd
0000            127   _ADC0LTH        DATA 0xc6
0000            128   _ADC0LTL        DATA 0xc5
0000            129   _ADC0MX         DATA 0xbb
0000            130   _B              DATA 0xf0
0000            131   _CKCON0         DATA 0x8e
0000            132   _CKCON1         DATA 0xa6
0000            133   _CLEN0          DATA 0xc6
0000            134   _CLIE0          DATA 0xc7
0000            135   _CLIF0          DATA 0xe8
0000            136   _CLKSEL         DATA 0xa9
0000            137   _CLOUT0         DATA 0xd1
0000            138   _CLU0CF         DATA 0xb1
0000            139   _CLU0FN         DATA 0xaf
0000            140   _CLU0MX         DATA 0x84
0000            141   _CLU1CF         DATA 0xb3
0000            142   _CLU1FN         DATA 0xb2
0000            143   _CLU1MX         DATA 0x85
0000            144   _CLU2CF         DATA 0xb6
0000            145   _CLU2FN         DATA 0xb5
0000            146   _CLU2MX         DATA 0x91
0000            147   _CLU3CF         DATA 0xbf
0000            148   _CLU3FN         DATA 0xbe
0000            149   _CLU3MX         DATA 0xae
0000            150   _CMP0CN0        DATA 0x9b
0000            151   _CMP0CN1        DATA 0x99
0000            152   _CMP0MD         DATA 0x9d
0000            153   _CMP0MX         DATA 0x9f
0000            154   _CMP1CN0        DATA 0xbf
0000            155   _CMP1CN1        DATA 0xac
0000            156   _CMP1MD         DATA 0xab
0000            157   _CMP1MX         DATA 0xaa
0000            158   _CRC0CN0        DATA 0xce
0000            159   _CRC0CN1        DATA 0x86
0000            160   _CRC0CNT        DATA 0xd3
0000            161   _CRC0DAT        DATA 0xcb
0000            162   _CRC0FLIP       DATA 0xcf
0000            163   _CRC0IN         DATA 0xca
0000            164   _CRC0ST         DATA 0xd2
0000            165   _DAC0CF0        DATA 0x91
0000            166   _DAC0CF1        DATA 0x92
0000            167   _DAC0H          DATA 0x85
0000            168   _DAC0L          DATA 0x84
0000            169   _DAC1CF0        DATA 0x93
0000            170   _DAC1CF1        DATA 0x94
0000            171   _DAC1H          DATA 0x8a
0000            172   _DAC1L          DATA 0x89
0000            173   _DAC2CF0        DATA 0x95
0000            174   _DAC2CF1        DATA 0x96
0000            175   _DAC2H          DATA 0x8c
0000            176   _DAC2L          DATA 0x8b
0000            177   _DAC3CF0        DATA 0x9a
0000            178   _DAC3CF1        DATA 0x9c
0000            179   _DAC3H          DATA 0x8e
0000            180   _DAC3L          DATA 0x8d
0000            181   _DACGCF0        DATA 0x88
0000            182   _DACGCF1        DATA 0x98
0000            183   _DACGCF2        DATA 0xa2
0000            184   _DERIVID        DATA 0xad
0000            185   _DEVICEID       DATA 0xb5
0000            186   _DPH            DATA 0x83
0000            187   _DPL            DATA 0x82
0000            188   _EIE1           DATA 0xe6
0000            189   _EIE2           DATA 0xf3
0000            190   _EIP1           DATA 0xbb
0000            191   _EIP1H          DATA 0xee
0000            192   _EIP2           DATA 0xed
0000            193   _EIP2H          DATA 0xf6
0000            194   _EMI0CN         DATA 0xe7
0000            195   _FLKEY          DATA 0xb7
0000            196   _HFO0CAL        DATA 0xc7
0000            197   _HFO1CAL        DATA 0xd6
0000            198   _HFOCN          DATA 0xef
0000            199   _I2C0ADM        DATA 0xff
0000            200   _I2C0CN0        DATA 0xba
0000            201   _I2C0DIN        DATA 0xbc
0000            202   _I2C0DOUT       DATA 0xbb
0000            203   _I2C0FCN0       DATA 0xad
0000            204   _I2C0FCN1       DATA 0xab
0000            205   _I2C0FCT        DATA 0xf5
0000            206   _I2C0SLAD       DATA 0xbd
0000            207   _I2C0STAT       DATA 0xb9
0000            208   _IE             DATA 0xa8
0000            209   _IP             DATA 0xb8
0000            210   _IPH            DATA 0xf2
0000            211   _IT01CF         DATA 0xe4
0000            212   _LFO0CN         DATA 0xb1
0000            213   _P0             DATA 0x80
0000            214   _P0MASK         DATA 0xfe
0000            215   _P0MAT          DATA 0xfd
0000            216   _P0MDIN         DATA 0xf1
0000            217   _P0MDOUT        DATA 0xa4
0000            218   _P0SKIP         DATA 0xd4
0000            219   _P1             DATA 0x90
0000            220   _P1MASK         DATA 0xee
0000            221   _P1MAT          DATA 0xed
0000            222   _P1MDIN         DATA 0xf2
0000            223   _P1MDOUT        DATA 0xa5
0000            224   _P1SKIP         DATA 0xd5
0000            225   _P2             DATA 0xa0
0000            226   _P2MASK         DATA 0xfc
0000            227   _P2MAT          DATA 0xfb
0000            228   _P2MDIN         DATA 0xf3
0000            229   _P2MDOUT        DATA 0xa6
0000            230   _P2SKIP         DATA 0xcc
0000            231   _P3             DATA 0xb0
0000            232   _P3MDIN         DATA 0xf4
0000            233   _P3MDOUT        DATA 0x9c
0000            234   _PCA0CENT       DATA 0x9e
0000            235   _PCA0CLR        DATA 0x9c
0000            236   _PCA0CN0        DATA 0xd8
0000            237   _PCA0CPH0       DATA 0xfc
0000            238   _PCA0CPH1       DATA 0xea
0000            239   _PCA0CPH2       DATA 0xec
0000            240   _PCA0CPH3       DATA 0xf5
0000            241   _PCA0CPH4       DATA 0x85
0000            242   _PCA0CPH5       DATA 0xde
0000            243   _PCA0CPL0       DATA 0xfb
0000            244   _PCA0CPL1       DATA 0xe9
0000            245   _PCA0CPL2       DATA 0xeb
0000            246   _PCA0CPL3       DATA 0xf4
0000            247   _PCA0CPL4       DATA 0x84
0000            248   _PCA0CPL5       DATA 0xdd
0000            249   _PCA0CPM0       DATA 0xda
0000            250   _PCA0CPM1       DATA 0xdb
0000            251   _PCA0CPM2       DATA 0xdc
0000            252   _PCA0CPM3       DATA 0xae
0000            253   _PCA0CPM4       DATA 0xaf
0000            254   _PCA0CPM5       DATA 0xcc
0000            255   _PCA0H          DATA 0xfa
0000            256   _PCA0L          DATA 0xf9
0000            257   _PCA0MD         DATA 0xd9
0000            258   _PCA0POL        DATA 0x96
0000            259   _PCA0PWM        DATA 0xf7
0000            260   _PCON0          DATA 0x87
0000            261   _PCON1          DATA 0xcd
0000            262   _PFE0CN         DATA 0xc1
0000            263   _PRTDRV         DATA 0xf6
0000            264   _PSCTL          DATA 0x8f
0000            265   _PSTAT0         DATA 0xaa
0000            266   _PSW            DATA 0xd0
0000            267   _REF0CN         DATA 0xd1
0000            268   _REG0CN         DATA 0xc9
0000            269   _REVID          DATA 0xb6
0000            270   _RSTSRC         DATA 0xef
0000            271   _SBCON1         DATA 0x94
0000            272   _SBRLH1         DATA 0x96
0000            273   _SBRLL1         DATA 0x95
0000            274   _SBUF           DATA 0x99
0000            275   _SBUF0          DATA 0x99
0000            276   _SBUF1          DATA 0x92
0000            277   _SCON           DATA 0x98
0000            278   _SCON0          DATA 0x98
0000            279   _SCON1          DATA 0xc8
0000            280   _SFRPAGE        DATA 0xa7
0000            281   _SFRPGCN        DATA 0xbc
0000            282   _SFRSTACK       DATA 0xd7
0000            283   _SMB0ADM        DATA 0xd6
0000            284   _SMB0ADR        DATA 0xd7
0000            285   _SMB0CF         DATA 0xc1
0000            286   _SMB0CN0        DATA 0xc0
0000            287   _SMB0DAT        DATA 0xc2
0000            288   _SMB0FCN0       DATA 0xc3
0000            289   _SMB0FCN1       DATA 0xc4
0000            290   _SMB0FCT        DATA 0xef
0000            291   _SMB0RXLN       DATA 0xc5
0000            292   _SMB0TC         DATA 0xac
0000            293   _SMOD1          DATA 0x93
0000            294   _SP             DATA 0x81
0000            295   _SPI0CFG        DATA 0xa1
0000            296   _SPI0CKR        DATA 0xa2
0000            297   _SPI0CN0        DATA 0xf8
0000            298   _SPI0DAT        DATA 0xa3
0000            299   _SPI0FCN0       DATA 0x9a
0000            300   _SPI0FCN1       DATA 0x9b
0000            301   _SPI0FCT        DATA 0xf7
0000            302   _SPI0PCF        DATA 0xdf
0000            303   _TCON           DATA 0x88
0000            304   _TH0            DATA 0x8c
0000            305   _TH1            DATA 0x8d
0000            306   _TL0            DATA 0x8a
0000            307   _TL1            DATA 0x8b
0000            308   _TMOD           DATA 0x89
0000            309   _TMR2CN0        DATA 0xc8
0000            310   _TMR2CN1        DATA 0xfd
0000            311   _TMR2H          DATA 0xcf
0000            312   _TMR2L          DATA 0xce
0000            313   _TMR2RLH        DATA 0xcb
0000            314   _TMR2RLL        DATA 0xca
0000            315   _TMR3CN0        DATA 0x91
0000            316   _TMR3CN1        DATA 0xfe
0000            317   _TMR3H          DATA 0x95
0000            318   _TMR3L          DATA 0x94
0000            319   _TMR3RLH        DATA 0x93
0000            320   _TMR3RLL        DATA 0x92
0000            321   _TMR4CN0        DATA 0x98
0000            322   _TMR4CN1        DATA 0xff
0000            323   _TMR4H          DATA 0xa5
0000            324   _TMR4L          DATA 0xa4
0000            325   _TMR4RLH        DATA 0xa3
0000            326   _TMR4RLL        DATA 0xa2
0000            327   _TMR5CN0        DATA 0xc0
0000            328   _TMR5CN1        DATA 0xf1
0000            329   _TMR5H          DATA 0xd5
0000            330   _TMR5L          DATA 0xd4
0000            331   _TMR5RLH        DATA 0xd3
0000            332   _TMR5RLL        DATA 0xd2
0000            333   _UART0PCF       DATA 0xd9
0000            334   _UART1FCN0      DATA 0x9d
0000            335   _UART1FCN1      DATA 0xd8
0000            336   _UART1FCT       DATA 0xfa
0000            337   _UART1LIN       DATA 0x9e
0000            338   _UART1PCF       DATA 0xda
0000            339   _VDM0CN         DATA 0xff
0000            340   _WDTCN          DATA 0x97
0000            341   _XBR0           DATA 0xe1
0000            342   _XBR1           DATA 0xe2
0000            343   _XBR2           DATA 0xe3
0000            344   _XOSC0CN        DATA 0x86
0000            345   _DPTR           DATA 0x8382
0000            346   _TMR2RL         DATA 0xcbca
0000            347   _TMR3RL         DATA 0x9392
0000            348   _TMR4RL         DATA 0xa3a2
0000            349   _TMR5RL         DATA 0xd3d2
0000            350   _TMR0           DATA 0x8c8a
0000            351   _TMR1           DATA 0x8d8b
0000            352   _TMR2           DATA 0xcfce
0000            353   _TMR3           DATA 0x9594
0000            354   _TMR4           DATA 0xa5a4
0000            355   _TMR5           DATA 0xd5d4
0000            356   _SBRL1          DATA 0x9695
0000            357   _PCA0           DATA 0xfaf9
0000            358   _PCA0CP0        DATA 0xfcfb
0000            359   _PCA0CP1        DATA 0xeae9
0000            360   _PCA0CP2        DATA 0xeceb
0000            361   _PCA0CP3        DATA 0xf5f4
0000            362   _PCA0CP4        DATA 0x8584
0000            363   _PCA0CP5        DATA 0xdedd
0000            364   _ADC0ASA        DATA 0xb6b5
0000            365   _ADC0GT         DATA 0xc4c3
0000            366   _ADC0           DATA 0xbebd
0000            367   _ADC0LT         DATA 0xc6c5
0000            368   _DAC0           DATA 0x8584
0000            369   _DAC1           DATA 0x8a89
0000            370   _DAC2           DATA 0x8c8b
0000            371   _DAC3           DATA 0x8e8d
0000            372   ;--------------------------------------------------------
0000            373   ; special function bits
0000            374   ;--------------------------------------------------------
0000            375   _ACC_0          BIT 0xe0
0000            376   _ACC_1          BIT 0xe1
0000            377   _ACC_2          BIT 0xe2
0000            378   _ACC_3          BIT 0xe3
0000            379   _ACC_4          BIT 0xe4
0000            380   _ACC_5          BIT 0xe5
0000            381   _ACC_6          BIT 0xe6
0000            382   _ACC_7          BIT 0xe7
0000            383   _TEMPE          BIT 0xe8
0000            384   _ADGN0          BIT 0xe9
0000            385   _ADGN1          BIT 0xea
0000            386   _ADWINT         BIT 0xeb
0000            387   _ADBUSY         BIT 0xec
0000            388   _ADINT          BIT 0xed
0000            389   _IPOEN          BIT 0xee
0000            390   _ADEN           BIT 0xef
0000            391   _B_0            BIT 0xf0
0000            392   _B_1            BIT 0xf1
0000            393   _B_2            BIT 0xf2
0000            394   _B_3            BIT 0xf3
0000            395   _B_4            BIT 0xf4
0000            396   _B_5            BIT 0xf5
0000            397   _B_6            BIT 0xf6
0000            398   _B_7            BIT 0xf7
0000            399   _C0FIF          BIT 0xe8
0000            400   _C0RIF          BIT 0xe9
0000            401   _C1FIF          BIT 0xea
0000            402   _C1RIF          BIT 0xeb
0000            403   _C2FIF          BIT 0xec
0000            404   _C2RIF          BIT 0xed
0000            405   _C3FIF          BIT 0xee
0000            406   _C3RIF          BIT 0xef
0000            407   _D1SRC0         BIT 0x88
0000            408   _D1SRC1         BIT 0x89
0000            409   _D1AMEN         BIT 0x8a
0000            410   _D01REFSL       BIT 0x8b
0000            411   _D3SRC0         BIT 0x8c
0000            412   _D3SRC1         BIT 0x8d
0000            413   _D3AMEN         BIT 0x8e
0000            414   _D23REFSL       BIT 0x8f
0000            415   _D0UDIS         BIT 0x98
0000            416   _D1UDIS         BIT 0x99
0000            417   _D2UDIS         BIT 0x9a
0000            418   _D3UDIS         BIT 0x9b
0000            419   _EX0            BIT 0xa8
0000            420   _ET0            BIT 0xa9
0000            421   _EX1            BIT 0xaa
0000            422   _ET1            BIT 0xab
0000            423   _ES0            BIT 0xac
0000            424   _ET2            BIT 0xad
0000            425   _ESPI0          BIT 0xae
0000            426   _EA             BIT 0xaf
0000            427   _PX0            BIT 0xb8
0000            428   _PT0            BIT 0xb9
0000            429   _PX1            BIT 0xba
0000            430   _PT1            BIT 0xbb
0000            431   _PS0            BIT 0xbc
0000            432   _PT2            BIT 0xbd
0000            433   _PSPI0          BIT 0xbe
0000            434   _P0_0           BIT 0x80
0000            435   _P0_1           BIT 0x81
0000            436   _P0_2           BIT 0x82
0000            437   _P0_3           BIT 0x83
0000            438   _P0_4           BIT 0x84
0000            439   _P0_5           BIT 0x85
0000            440   _P0_6           BIT 0x86
0000            441   _P0_7           BIT 0x87
0000            442   _P1_0           BIT 0x90
0000            443   _P1_1           BIT 0x91
0000            444   _P1_2           BIT 0x92
0000            445   _P1_3           BIT 0x93
0000            446   _P1_4           BIT 0x94
0000            447   _P1_5           BIT 0x95
0000            448   _P1_6           BIT 0x96
0000            449   _P1_7           BIT 0x97
0000            450   _P2_0           BIT 0xa0
0000            451   _P2_1           BIT 0xa1
0000            452   _P2_2           BIT 0xa2
0000            453   _P2_3           BIT 0xa3
0000            454   _P2_4           BIT 0xa4
0000            455   _P2_5           BIT 0xa5
0000            456   _P2_6           BIT 0xa6
0000            457   _P3_0           BIT 0xb0
0000            458   _P3_1           BIT 0xb1
0000            459   _P3_2           BIT 0xb2
0000            460   _P3_3           BIT 0xb3
0000            461   _P3_4           BIT 0xb4
0000            462   _P3_7           BIT 0xb7
0000            463   _CCF0           BIT 0xd8
0000            464   _CCF1           BIT 0xd9
0000            465   _CCF2           BIT 0xda
0000            466   _CCF3           BIT 0xdb
0000            467   _CCF4           BIT 0xdc
0000            468   _CCF5           BIT 0xdd
0000            469   _CR             BIT 0xde
0000            470   _CF             BIT 0xdf
0000            471   _PARITY         BIT 0xd0
0000            472   _F1             BIT 0xd1
0000            473   _OV             BIT 0xd2
0000            474   _RS0            BIT 0xd3
0000            475   _RS1            BIT 0xd4
0000            476   _F0             BIT 0xd5
0000            477   _AC             BIT 0xd6
0000            478   _CY             BIT 0xd7
0000            479   _RI             BIT 0x98
0000            480   _TI             BIT 0x99
0000            481   _RB8            BIT 0x9a
0000            482   _TB8            BIT 0x9b
0000            483   _REN            BIT 0x9c
0000            484   _CE             BIT 0x9d
0000            485   _SMODE          BIT 0x9e
0000            486   _RI1            BIT 0xc8
0000            487   _TI1            BIT 0xc9
0000            488   _RBX1           BIT 0xca
0000            489   _TBX1           BIT 0xcb
0000            490   _REN1           BIT 0xcc
0000            491   _PERR1          BIT 0xcd
0000            492   _OVR1           BIT 0xce
0000            493   _SI             BIT 0xc0
0000            494   _ACK            BIT 0xc1
0000            495   _ARBLOST        BIT 0xc2
0000            496   _ACKRQ          BIT 0xc3
0000            497   _STO            BIT 0xc4
0000            498   _STA            BIT 0xc5
0000            499   _TXMODE         BIT 0xc6
0000            500   _MASTER         BIT 0xc7
0000            501   _SPIEN          BIT 0xf8
0000            502   _TXNF           BIT 0xf9
0000            503   _NSSMD0         BIT 0xfa
0000            504   _NSSMD1         BIT 0xfb
0000            505   _RXOVRN         BIT 0xfc
0000            506   _MODF           BIT 0xfd
0000            507   _WCOL           BIT 0xfe
0000            508   _SPIF           BIT 0xff
0000            509   _IT0            BIT 0x88
0000            510   _IE0            BIT 0x89
0000            511   _IT1            BIT 0x8a
0000            512   _IE1            BIT 0x8b
0000            513   _TR0            BIT 0x8c
0000            514   _TF0            BIT 0x8d
0000            515   _TR1            BIT 0x8e
0000            516   _TF1            BIT 0x8f
0000            517   _T2XCLK0        BIT 0xc8
0000            518   _T2XCLK1        BIT 0xc9
0000            519   _TR2            BIT 0xca
0000            520   _T2SPLIT        BIT 0xcb
0000            521   _TF2CEN         BIT 0xcc
0000            522   _TF2LEN         BIT 0xcd
0000            523   _TF2L           BIT 0xce
0000            524   _TF2H           BIT 0xcf
0000            525   _T4XCLK0        BIT 0x98
0000            526   _T4XCLK1        BIT 0x99
0000            527   _TR4            BIT 0x9a
0000            528   _T4SPLIT        BIT 0x9b
0000            529   _TF4CEN         BIT 0x9c
0000            530   _TF4LEN         BIT 0x9d
0000            531   _TF4L           BIT 0x9e
0000            532   _TF4H           BIT 0x9f
0000            533   _T5XCLK0        BIT 0xc0
0000            534   _T5XCLK1        BIT 0xc1
0000            535   _TR5            BIT 0xc2
0000            536   _T5SPLIT        BIT 0xc3
0000            537   _TF5CEN         BIT 0xc4
0000            538   _TF5LEN         BIT 0xc5
0000            539   _TF5L           BIT 0xc6
0000            540   _TF5H           BIT 0xc7
0000            541   _RIE            BIT 0xd8
0000            542   _RXTO0          BIT 0xd9
0000            543   _RXTO1          BIT 0xda
0000            544   _RFRQ           BIT 0xdb
0000            545   _TIE            BIT 0xdc
0000            546   _TXHOLD         BIT 0xdd
0000            547   _TXNF1          BIT 0xde
0000            548   _TFRQ           BIT 0xdf
0000            549   ;--------------------------------------------------------
0000            550   ; overlayable register banks
0000            551   ;--------------------------------------------------------
0000            552            rbank0 segment data overlay
0000            553   ;--------------------------------------------------------
0000            554   ; overlayable bit register bank
0000            555   ;--------------------------------------------------------
0000            556            rseg BIT_BANK
0000            557   bits:
0000            558            ds 1
0001            559            b0 equ  bits.0 
0001            560            b1 equ  bits.1 
0001            561            b2 equ  bits.2 
0001            562            b3 equ  bits.3 
0001            563            b4 equ  bits.4 
0001            564            b5 equ  bits.5 
0001            565            b6 equ  bits.6 
0001            566            b7 equ  bits.7 
0001            567   ;--------------------------------------------------------
0001            568   ; internal ram data
0001            569   ;--------------------------------------------------------
0000            570            rseg R_DSEG
0000            571   _SPI_write_PARM_2:
0000            572            ds 1
0001            573   _BMM150_compensate_x_PARM_2:
0001            574            ds 3
0004            575   _BMM150_compensate_x_sloc0_1_0:
0004            576            ds 4
0008            577   _BMM150_compensate_y_PARM_2:
0008            578            ds 3
000B            579   _BMM150_compensate_y_sloc0_1_0:
000B            580            ds 4
000F            581   _BMM150_Read_Data_PARM_2:
000F            582            ds 3
0012            583   _BMM150_Read_Data_mag_x_1_124:
0012            584            ds 3
0015            585   _getstr1_PARM_2:
0015            586            ds 1
0016            587   _Read_angle_sloc0_1_0:
0016            588            ds 4
001A            589   _Auto_mode_slave_sloc0_1_0:
001A            590            ds 2
001C            591   _Auto_mode_slave_sloc1_1_0:
001C            592            ds 4
0020            593   _Joystick_Control_PARM_2:
0020            594            ds 3
0023            595   _Joystick_Control_sloc0_1_0:
0023            596            ds 2
0025            597   _Joystick_Control_sloc1_1_0:
0025            598            ds 1
0026            599   _Joystick_Control_sloc2_1_0:
0026            600            ds 2
0028            601   _Joystick_Control_sloc3_1_0:
0028            602            ds 1
0029            603   _Joystick_Control_sloc4_1_0:
0029            604            ds 2
002B            605   _Joystick_Control_sloc5_1_0:
002B            606            ds 4
002F            607   _Joystick_Control_sloc6_1_0:
002F            608            ds 2
0031            609   _main_pick_char_1_237:
0031            610            ds 1
0032            611   ;--------------------------------------------------------
0032            612   ; overlayable items in internal ram 
0032            613   ;--------------------------------------------------------
0000            614            rseg    R_OSEG
0000            615            rseg    R_OSEG
0000            616            rseg    R_OSEG
0000            617            rseg    R_OSEG
0000            618            rseg    R_OSEG
0000            619            rseg    R_OSEG
0000            620   _InitPinADC_PARM_2:
0000            621            ds 1
0001            622            rseg    R_OSEG
0001            623            rseg    R_OSEG
0001            624   _check_bound_PARM_2:
0001            625            ds 2
0003            626   ;--------------------------------------------------------
0003            627   ; indirectly addressable internal ram data
0003            628   ;--------------------------------------------------------
0000            629            rseg R_ISEG
0000            630   _buff:
0000            631            ds 20
0014            632   ;--------------------------------------------------------
0014            633   ; absolute internal ram data
0014            634   ;--------------------------------------------------------
0000            635            DSEG
0000            636   ;--------------------------------------------------------
0000            637   ; bit data
0000            638   ;--------------------------------------------------------
0000            639            rseg R_BSEG
0000            640   ;--------------------------------------------------------
0000            641   ; paged external ram data
0000            642   ;--------------------------------------------------------
0000            643            rseg R_PSEG
0000            644   ;--------------------------------------------------------
0000            645   ; external ram data
0000            646   ;--------------------------------------------------------
0000            647            rseg R_XSEG
0000            648   _freq100:
0000            649            ds 4
0004            650   _d1:
0004            651            ds 2
0006            652   _d2:
0006            653            ds 2
0008            654   _dig_x1:
0008            655            ds 1
0009            656   _dig_x2:
0009            657            ds 1
000A            658   _dig_y1:
000A            659            ds 1
000B            660   _dig_y2:
000B            661            ds 1
000C            662   _dig_z1:
000C            663            ds 2
000E            664   _dig_z2:
000E            665            ds 2
0010            666   _dig_z3:
0010            667            ds 2
0012            668   _dig_z4:
0012            669            ds 2
0014            670   _dig_xy1:
0014            671            ds 1
0015            672   _dig_xy2:
0015            673            ds 1
0016            674   _dig_xyz1:
0016            675            ds 2
0018            676   _BMM150_Read_Trim_Registers_trim_x1y1_1_97:
0018            677            ds 2
001A            678   _BMM150_Read_Trim_Registers_trim_xyz_data_1_97:
001A            679            ds 4
001E            680   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_97:
001E            681            ds 10
0028            682   _BMM150_compensate_x_retval_1_107:
0028            683            ds 2
002A            684   _BMM150_compensate_x_process_comp_x0_1_107:
002A            685            ds 2
002C            686   _BMM150_compensate_y_retval_1_116:
002C            687            ds 2
002E            688   _BMM150_compensate_y_process_comp_y0_1_116:
002E            689            ds 2
0030            690   _BMM150_Read_Data_x_val_1_125:
0030            691            ds 2
0032            692   _BMM150_Read_Data_y_val_1_125:
0032            693            ds 2
0034            694   _BMM150_Read_Data_rhall_val_1_125:
0034            695            ds 2
0036            696   _ReadHX711_dataa_1_169:
0036            697            ds 4
003A            698   _ReadHX711_j_1_169:
003A            699            ds 1
003B            700   _Read_angle_mag_x_1_203:
003B            701            ds 2
003D            702   _Read_angle_mag_y_1_203:
003D            703            ds 2
003F            704   _Read_angle_sum_x_1_203:
003F            705            ds 4
0043            706   _Read_angle_sum_y_1_203:
0043            707            ds 4
0047            708   _Read_angle_angle_1_203:
0047            709            ds 4
004B            710   _Auto_mode_slave_command_1_205:
004B            711            ds 2
004D            712   _Auto_mode_slave_state_res_1_205:
004D            713            ds 2
004F            714   _Auto_mode_slave_dummy_1_205:
004F            715            ds 2
0051            716   _Joystick_Control_vx_error_1_214:
0051            717            ds 2
0053            718   _main_vx_1_237:
0053            719            ds 2
0055            720   _main_vy_1_237:
0055            721            ds 2
0057            722   _main_auto_mode_1_237:
0057            723            ds 2
0059            724   ;--------------------------------------------------------
0059            725   ; absolute external ram data
0059            726   ;--------------------------------------------------------
0000            727            XSEG
0000            728   ;--------------------------------------------------------
0000            729   ; external initialized ram data
0000            730   ;--------------------------------------------------------
0000            731            rseg R_IXSEG
0000            732   _pwm_counter:
0000            733            ds 2
0002            734   _servo_counter:
0002            735            ds 2
0004            736   _pwm_left:
0004            737            ds 1
0005            738   _pwm_right:
0005            739            ds 1
0006            740   _L_motor_dir:
0006            741            ds 1
0007            742   _R_motor_dir:
0007            743            ds 1
0008            744   _servo_base:
0008            745            ds 1
0009            746   _servo_arm:
0009            747            ds 1
000A            748   _vx_thres:
000A            749            ds 2
000C            750   _vy_thres:
000C            751            ds 2
000E            752   _vx:
000E            753            ds 2
0010            754   _vy:
0010            755            ds 2
0012            756   _fre_mea_count:
0012            757            ds 2
0014            758   _weight_mea_count:
0014            759            ds 2
0016            760   _seed:
0016            761            ds 2
0018            762   _pwm_corr:
0018            763            ds 4
001C            764   _curr_angle:
001C            765            ds 4
0020            766   _mea_yes:
0020            767            ds 1
0021            768   _weight:
0021            769            ds 2
0000            770            rseg R_HOME
0000            771            rseg R_GSINIT
0000            772            rseg R_CSEG
0000            773   ;--------------------------------------------------------
0000            774   ; Reset entry point and interrupt vectors
0000            775   ;--------------------------------------------------------
0000            776            CSEG at 0x0000
0000 020000     777            ljmp    _crt0
0093            778            CSEG at 0x0093
0093 020000     779            ljmp    _Timer5_ISR
0096            780   ;--------------------------------------------------------
0096            781   ; global & static initialisations
0096            782   ;--------------------------------------------------------
0000            783            rseg R_HOME
0000            784            rseg R_GSINIT
0000            785            rseg R_GSINIT
0000            786   ;--------------------------------------------------------
0000            787   ; data variables initialization
0000            788   ;--------------------------------------------------------
0000            789            rseg R_DINIT
0000            790            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            791   ;--------------------------------------------------------
0000            792   ; code
0000            793   ;--------------------------------------------------------
0000            794            rseg R_CSEG
0000            795   ;------------------------------------------------------------
0000            796   ;Allocation info for local variables in function '_c51_external_startup'
0000            797   ;------------------------------------------------------------
0000            798   ;------------------------------------------------------------
0000            799   ;        main.c:111: char _c51_external_startup (void)
0000            800   ;        -----------------------------------------
0000            801   ;         function _c51_external_startup
0000            802   ;        -----------------------------------------
0000            803   __c51_external_startup:
0000            804            using   0
0000            805   ;        main.c:114: SFRPAGE = 0x00;
0000 75A700     806            mov     _SFRPAGE,#0x00
0003            807   ;        main.c:115: WDTCN = 0xDE; //First key
0003 7597DE     808            mov     _WDTCN,#0xDE
0006            809   ;        main.c:116: WDTCN = 0xAD; //Second key
0006 7597AD     810            mov     _WDTCN,#0xAD
0009            811   ;        main.c:118: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     812            mov     _VDM0CN,#0x80
000C            813   ;        main.c:119: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     814            mov     _RSTSRC,#0x06
000F            815   ;        main.c:126: SFRPAGE = 0x10;
000F 75A710     816            mov     _SFRPAGE,#0x10
0012            817   ;        main.c:127: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     818            mov     _PFE0CN,#0x20
0015            819   ;        main.c:128: SFRPAGE = 0x00;
0015 75A700     820            mov     _SFRPAGE,#0x00
0018            821   ;        main.c:149: CLKSEL = 0x00;
0018 75A900     822            mov     _CLKSEL,#0x00
001B            823   ;        main.c:150: CLKSEL = 0x00;
001B 75A900     824            mov     _CLKSEL,#0x00
001E            825   ;        main.c:151: while ((CLKSEL & 0x80) == 0);
001E            826   L002001?:
001E E5A9       827            mov     a,_CLKSEL
0020 30E730     828            jnb     acc.7,L002001?
0023            829   ;        main.c:152: CLKSEL = 0x03;
0023 75A903     830            mov     _CLKSEL,#0x03
0026            831   ;        main.c:153: CLKSEL = 0x03;
0026 75A903     832            mov     _CLKSEL,#0x03
0029            833   ;        main.c:154: while ((CLKSEL & 0x80) == 0);
0029            834   L002004?:
0029 E5A9       835            mov     a,_CLKSEL
002B 30E7B0     836            jnb     acc.7,L002004?
002E            837   ;        main.c:160: P0MDOUT |= 0b_1100_0000;
002E 43A4C0     838            orl     _P0MDOUT,#0xC0
0031            839   ;        main.c:161: P1MDOUT |= 0b_0000_0110;
0031 43A506     840            orl     _P1MDOUT,#0x06
0034            841   ;        main.c:162: P2MDOUT |= 0b_0000_0001; // P2.0 in push-pull mode
0034 43A601     842            orl     _P2MDOUT,#0x01
0037            843   ;        main.c:163: XBR0     = 0b_0000_0011; // UART0E = 1 and SPI0E = 1               
0037 75E103     844            mov     _XBR0,#0x03
003A            845   ;        main.c:164: XBR1     = 0b_0000_0000;
003A 75E200     846            mov     _XBR1,#0x00
003D            847   ;        main.c:165: XBR2     = 0b_0100_0001; // Enable crossbar and uart 1
003D 75E341     848            mov     _XBR2,#0x41
0040            849   ;        main.c:166: P0SKIP       = 0b_0000_0111; 
0040 75D407     850            mov     _P0SKIP,#0x07
0043            851   ;        main.c:167: P1SKIP   = 0b_1111_1001;
0043 75D5F9     852            mov     _P1SKIP,#0xF9
0046            853   ;        main.c:172: SCON0 = 0x10;
0046 759810     854            mov     _SCON0,#0x10
0049            855   ;        main.c:173: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     856            mov     _TH1,#0xE6
004C            857   ;        main.c:174: TL1 = TH1;      // Init Timer1
004C 858D8B     858            mov     _TL1,_TH1
004F            859   ;        main.c:175: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     860            anl     _TMOD,#0x0F
0052            861   ;        main.c:176: TMOD |=  0x20;                       
0052 438920     862            orl     _TMOD,#0x20
0055            863   ;        main.c:177: TR1 = 1; // START Timer1
0055 D28E       864            setb    _TR1
0057            865   ;        main.c:178: TI = 1;  // Indicate TX0 ready
0057 D299       866            setb    _TI
0059            867   ;        main.c:179: P2_0=1; // 'set' pin to 1 is normal operation mode.
0059 D2A0       868            setb    _P2_0
005B            869   ;        main.c:182: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
005B 75A211     870            mov     _SPI0CKR,#0x11
005E            871   ;        main.c:183: SPI0CFG = 0b_1110_0000; // SPI mode 3
005E 75A1E0     872            mov     _SPI0CFG,#0xE0
0061            873   ;        main.c:184: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0061 75F801     874            mov     _SPI0CN0,#0x01
0064            875   ;        main.c:187: SFRPAGE=0x10;
0064 75A710     876            mov     _SFRPAGE,#0x10
0067            877   ;        main.c:188: TMR5CN0=0x00;
0067 75C000     878            mov     _TMR5CN0,#0x00
006A            879   ;        main.c:189: TMR5=0xffff;   // Set to reload immediately
006A 75D4FF     880            mov     _TMR5,#0xFF
006D 75D5FF     881            mov     (_TMR5 >> 8),#0xFF
0070            882   ;        main.c:190: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
0070 43F308     883            orl     _EIE2,#0x08
0073            884   ;        main.c:191: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0073 D2C2       885            setb    _TR5
0075            886   ;        main.c:193: EA=1;  // Enable global interrupts
0075 D2AF       887            setb    _EA
0077            888   ;        main.c:194: SFRPAGE=0x00;
0077 75A700     889            mov     _SFRPAGE,#0x00
007A            890   ;        main.c:196: return 0;
007A 758200     891            mov     dpl,#0x00
007D 22         892            ret
007E            893   ;------------------------------------------------------------
007E            894   ;Allocation info for local variables in function 'Timer3us'
007E            895   ;------------------------------------------------------------
007E            896   ;us                        Allocated to registers r2 
007E            897   ;i                         Allocated to registers r3 
007E            898   ;------------------------------------------------------------
007E            899   ;        main.c:200: void Timer3us(unsigned char us)
007E            900   ;        -----------------------------------------
007E            901   ;         function Timer3us
007E            902   ;        -----------------------------------------
007E            903   _Timer3us:
007E AA82       904            mov     r2,dpl
0080            905   ;        main.c:205: CKCON0|=0b_0100_0000;
0080 438E40     906            orl     _CKCON0,#0x40
0083            907   ;        main.c:207: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0083 7592B8     908            mov     _TMR3RL,#0xB8
0086 7593FF     909            mov     (_TMR3RL >> 8),#0xFF
0089            910   ;        main.c:208: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0089 859294     911            mov     _TMR3,_TMR3RL
008C 859395     912            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
008F            913   ;        main.c:210: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
008F 759104     914            mov     _TMR3CN0,#0x04
0092            915   ;        main.c:211: for (i = 0; i < us; i++)       // Count <us> overflows
0092 7B00       916            mov     r3,#0x00
0094            917   L003004?:
0094 C3         918            clr     c
0095 EB         919            mov     a,r3
0096 9A         920            subb    a,r2
0097 5000       921            jnc     L003007?
0099            922   ;        main.c:213: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0099            923   L003001?:
0099 E591       924            mov     a,_TMR3CN0
009B 30E7B0     925            jnb     acc.7,L003001?
009E            926   ;        main.c:214: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
009E 53917F     927            anl     _TMR3CN0,#0x7F
00A1            928   ;        main.c:211: for (i = 0; i < us; i++)       // Count <us> overflows
00A1 0B         929            inc     r3
00A2 8000       930            sjmp    L003004?
00A4            931   L003007?:
00A4            932   ;        main.c:216: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00A4 759100     933            mov     _TMR3CN0,#0x00
00A7 22         934            ret
00A8            935   ;------------------------------------------------------------
00A8            936   ;Allocation info for local variables in function 'waitms'
00A8            937   ;------------------------------------------------------------
00A8            938   ;ms                        Allocated to registers r2 r3 
00A8            939   ;j                         Allocated to registers r4 r5 
00A8            940   ;k                         Allocated to registers r6 
00A8            941   ;------------------------------------------------------------
00A8            942   ;        main.c:219: void waitms (unsigned int ms)
00A8            943   ;        -----------------------------------------
00A8            944   ;         function waitms
00A8            945   ;        -----------------------------------------
00A8            946   _waitms:
00A8 AA82       947            mov     r2,dpl
00AA AB83       948            mov     r3,dph
00AC            949   ;        main.c:223: for(j=0; j<ms; j++)
00AC 7C00       950            mov     r4,#0x00
00AE 7D00       951            mov     r5,#0x00
00B0            952   L004005?:
00B0 C3         953            clr     c
00B1 EC         954            mov     a,r4
00B2 9A         955            subb    a,r2
00B3 ED         956            mov     a,r5
00B4 9B         957            subb    a,r3
00B5 5000       958            jnc     L004009?
00B7            959   ;        main.c:224: for (k=0; k<4; k++) Timer3us(250);
00B7 7E00       960            mov     r6,#0x00
00B9            961   L004001?:
00B9 BE04F0     962            cjne    r6,#0x04,L004018?
00BC            963   L004018?:
00BC 5000       964            jnc     L004007?
00BE 7582FA     965            mov     dpl,#0xFA
00C1 C002       966            push    ar2
00C3 C003       967            push    ar3
00C5 C004       968            push    ar4
00C7 C005       969            push    ar5
00C9 C006       970            push    ar6
00CB 120000     971            lcall   _Timer3us
00CE D006       972            pop     ar6
00D0 D005       973            pop     ar5
00D2 D004       974            pop     ar4
00D4 D003       975            pop     ar3
00D6 D002       976            pop     ar2
00D8 0E         977            inc     r6
00D9 8000       978            sjmp    L004001?
00DB            979   L004007?:
00DB            980   ;        main.c:223: for(j=0; j<ms; j++)
00DB 0C         981            inc     r4
00DC BC0030     982            cjne    r4,#0x00,L004005?
00DF 0D         983            inc     r5
00E0 8000       984            sjmp    L004005?
00E2            985   L004009?:
00E2 22         986            ret
00E3            987   ;------------------------------------------------------------
00E3            988   ;Allocation info for local variables in function 'SPI_transfer'
00E3            989   ;------------------------------------------------------------
00E3            990   ;tx_data                   Allocated to registers 
00E3            991   ;------------------------------------------------------------
00E3            992   ;        main.c:227: unsigned char SPI_transfer(unsigned char tx_data)
00E3            993   ;        -----------------------------------------
00E3            994   ;         function SPI_transfer
00E3            995   ;        -----------------------------------------
00E3            996   _SPI_transfer:
00E3 8582A3     997            mov     _SPI0DAT,dpl
00E6            998   ;        main.c:230: while (!SPIF);      // Wait for transfer to complete
00E6            999   L005001?:
00E6           1000   ;        main.c:231: SPIF = 0;           // Clear SPI interrupt flag
00E6 10FFB0    1001            jbc     _SPIF,L005008?
00E9 8000      1002            sjmp    L005001?
00EB           1003   L005008?:
00EB           1004   ;        main.c:232: return SPI0DAT;     // Return received data
00EB 85A382    1005            mov     dpl,_SPI0DAT
00EE 22        1006            ret
00EF           1007   ;------------------------------------------------------------
00EF           1008   ;Allocation info for local variables in function 'SPI_read'
00EF           1009   ;------------------------------------------------------------
00EF           1010   ;reg_addr                  Allocated to registers r2 
00EF           1011   ;value                     Allocated with name '_SPI_read_value_1_93'
00EF           1012   ;------------------------------------------------------------
00EF           1013   ;        main.c:235: unsigned char SPI_read(unsigned char reg_addr)
00EF           1014   ;        -----------------------------------------
00EF           1015   ;         function SPI_read
00EF           1016   ;        -----------------------------------------
00EF           1017   _SPI_read:
00EF AA82      1018            mov     r2,dpl
00F1           1019   ;        main.c:240: reg_addr = reg_addr | 0x80;
00F1 430280    1020            orl     ar2,#0x80
00F4           1021   ;        main.c:242: CS = 0;                // Select the device
00F4 C290      1022            clr     _P1_0
00F6           1023   ;        main.c:243: SPI_transfer(reg_addr);     // Send register address
00F6 8A82      1024            mov     dpl,r2
00F8 120000    1025            lcall   _SPI_transfer
00FB           1026   ;        main.c:244: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
00FB 758200    1027            mov     dpl,#0x00
00FE 120000    1028            lcall   _SPI_transfer
0101           1029   ;        main.c:245: CS = 1;                // Deselect the device
0101 D290      1030            setb    _P1_0
0103           1031   ;        main.c:247: return value;
0103 22        1032            ret
0104           1033   ;------------------------------------------------------------
0104           1034   ;Allocation info for local variables in function 'SPI_write'
0104           1035   ;------------------------------------------------------------
0104           1036   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0104           1037   ;reg_addr                  Allocated to registers r2 
0104           1038   ;------------------------------------------------------------
0104           1039   ;        main.c:250: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0104           1040   ;        -----------------------------------------
0104           1041   ;         function SPI_write
0104           1042   ;        -----------------------------------------
0104           1043   _SPI_write:
0104 AA82      1044            mov     r2,dpl
0106           1045   ;        main.c:253: reg_addr = reg_addr & 0x7F;
0106 53027F    1046            anl     ar2,#0x7F
0109           1047   ;        main.c:255: CS = 0;                // Select device
0109 C290      1048            clr     _P1_0
010B           1049   ;        main.c:256: SPI_transfer(reg_addr);     // Send register address
010B 8A82      1050            mov     dpl,r2
010D 120000    1051            lcall   _SPI_transfer
0110           1052   ;        main.c:257: SPI_transfer(reg_value);    // Send value
0110 859082    1053            mov     dpl,_SPI_write_PARM_2
0113 120000    1054            lcall   _SPI_transfer
0116           1055   ;        main.c:258: CS = 1;                // Deselect device
0116 D290      1056            setb    _P1_0
0118 22        1057            ret
0119           1058   ;------------------------------------------------------------
0119           1059   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
0119           1060   ;------------------------------------------------------------
0119           1061   ;i                         Allocated with name '_BMM150_Read_Trim_Registers_i_1_97'
0119           1062   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_97'
0119           1063   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_97'
0119           1064   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_97'
0119           1065   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97'
0119           1066   ;------------------------------------------------------------
0119           1067   ;        main.c:261: void BMM150_Read_Trim_Registers(void)
0119           1068   ;        -----------------------------------------
0119           1069   ;         function BMM150_Read_Trim_Registers
0119           1070   ;        -----------------------------------------
0119           1071   _BMM150_Read_Trim_Registers:
0119           1072   ;        main.c:265: xdata uint8_t trim_x1y1[2] = {0};
0119 90CA10    1073            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
011C           1074   ;        main.c:266: xdata uint8_t trim_xyz_data[4] = {0};
011C E4        1075            clr     a
011D F0        1076            movx    @dptr,a
011E 90CA11    1077            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
0121 F0        1078            movx    @dptr,a
0122 90CA70    1079            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0125 F0        1080            movx    @dptr,a
0126 90CA71    1081            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0001)
0129 F0        1082            movx    @dptr,a
012A 90CA72    1083            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
012D           1084   ;        main.c:267: xdata uint8_t trim_xy1xy2[10] = {0};
012D E4        1085            clr     a
012E F0        1086            movx    @dptr,a
012F 90CA73    1087            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0132 F0        1088            movx    @dptr,a
0133 90CAD0    1089            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0136 F0        1090            movx    @dptr,a
0137 90CAD1    1091            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0001)
013A F0        1092            movx    @dptr,a
013B 90CAD2    1093            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0002)
013E E4        1094            clr     a
013F F0        1095            movx    @dptr,a
0140 90CAD3    1096            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0003)
0143 F0        1097            movx    @dptr,a
0144 90CAD4    1098            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0147 F0        1099            movx    @dptr,a
0148 90CAD5    1100            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
014B F0        1101            movx    @dptr,a
014C 90CAD6    1102            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0006)
014F E4        1103            clr     a
0150 F0        1104            movx    @dptr,a
0151 90CAD7    1105            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0007)
0154 F0        1106            movx    @dptr,a
0155 90CAD8    1107            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0158 F0        1108            movx    @dptr,a
0159 90CAD9    1109            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
015C F0        1110            movx    @dptr,a
015D           1111   ;        main.c:270: for (i=0;i<2;i++){
015D 7A00      1112            mov     r2,#0x00
015F           1113   L008001?:
015F BA0230    1114            cjne    r2,#0x02,L008024?
0162           1115   L008024?:
0162 5000      1116            jnc     L008004?
0164           1117   ;        main.c:271: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
0164 EA        1118            mov     a,r2
0165 2410      1119            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0167 FB        1120            mov     r3,a
0168 E4        1121            clr     a
0169 34CA      1122            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 >> 8)
016B FC        1123            mov     r4,a
016C 745D      1124            mov     a,#0x5D
016E 2A        1125            add     a,r2
016F F582      1126            mov     dpl,a
0171 C002      1127            push    ar2
0173 C003      1128            push    ar3
0175 C004      1129            push    ar4
0177 120000    1130            lcall   _SPI_read
017A AD82      1131            mov     r5,dpl
017C D004      1132            pop     ar4
017E D003      1133            pop     ar3
0180 D002      1134            pop     ar2
0182 8B82      1135            mov     dpl,r3
0184 8C83      1136            mov     dph,r4
0186 ED        1137            mov     a,r5
0187 F0        1138            movx    @dptr,a
0188           1139   ;        main.c:270: for (i=0;i<2;i++){
0188 0A        1140            inc     r2
0189 8000      1141            sjmp    L008001?
018B           1142   L008004?:
018B           1143   ;        main.c:273: for (i=0;i<4;i++){
018B 7A00      1144            mov     r2,#0x00
018D           1145   L008005?:
018D BA04F0    1146            cjne    r2,#0x04,L008026?
0190           1147   L008026?:
0190 5000      1148            jnc     L008008?
0192           1149   ;        main.c:274: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
0192 EA        1150            mov     a,r2
0193 2470      1151            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0195 FB        1152            mov     r3,a
0196 E4        1153            clr     a
0197 34CA      1154            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 >> 8)
0199 FC        1155            mov     r4,a
019A 7462      1156            mov     a,#0x62
019C 2A        1157            add     a,r2
019D F582      1158            mov     dpl,a
019F C002      1159            push    ar2
01A1 C003      1160            push    ar3
01A3 C004      1161            push    ar4
01A5 120000    1162            lcall   _SPI_read
01A8 AD82      1163            mov     r5,dpl
01AA D004      1164            pop     ar4
01AC D003      1165            pop     ar3
01AE D002      1166            pop     ar2
01B0 8B82      1167            mov     dpl,r3
01B2 8C83      1168            mov     dph,r4
01B4 ED        1169            mov     a,r5
01B5 F0        1170            movx    @dptr,a
01B6           1171   ;        main.c:273: for (i=0;i<4;i++){
01B6 0A        1172            inc     r2
01B7 8000      1173            sjmp    L008005?
01B9           1174   L008008?:
01B9           1175   ;        main.c:276: for (i=0;i<10;i++){
01B9 7A00      1176            mov     r2,#0x00
01BB           1177   L008009?:
01BB BA0AB0    1178            cjne    r2,#0x0A,L008028?
01BE           1179   L008028?:
01BE 5000      1180            jnc     L008012?
01C0           1181   ;        main.c:277: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
01C0 EA        1182            mov     a,r2
01C1 24D0      1183            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
01C3 FB        1184            mov     r3,a
01C4 E4        1185            clr     a
01C5 34CA      1186            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 >> 8)
01C7 FC        1187            mov     r4,a
01C8 7468      1188            mov     a,#0x68
01CA 2A        1189            add     a,r2
01CB F582      1190            mov     dpl,a
01CD C002      1191            push    ar2
01CF C003      1192            push    ar3
01D1 C004      1193            push    ar4
01D3 120000    1194            lcall   _SPI_read
01D6 AD82      1195            mov     r5,dpl
01D8 D004      1196            pop     ar4
01DA D003      1197            pop     ar3
01DC D002      1198            pop     ar2
01DE 8B82      1199            mov     dpl,r3
01E0 8C83      1200            mov     dph,r4
01E2 ED        1201            mov     a,r5
01E3 F0        1202            movx    @dptr,a
01E4           1203   ;        main.c:276: for (i=0;i<10;i++){
01E4 0A        1204            inc     r2
01E5 8000      1205            sjmp    L008009?
01E7           1206   L008012?:
01E7           1207   ;        main.c:280: dig_x1 = (int8_t) trim_x1y1[0]; 
01E7 90CA10    1208            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
01EA E0        1209            movx    a,@dptr
01EB 9052C0    1210            mov     dptr,#_dig_x1
01EE F0        1211            movx    @dptr,a
01EF           1212   ;        main.c:281: dig_y1 = (int8_t) trim_x1y1[1]; 
01EF 90CA11    1213            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
01F2 E0        1214            movx    a,@dptr
01F3 905240    1215            mov     dptr,#_dig_y1
01F6 F0        1216            movx    @dptr,a
01F7           1217   ;        main.c:282: dig_x2 = (int8_t) trim_xyz_data[2]; 
01F7 90CA72    1218            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
01FA E0        1219            movx    a,@dptr
01FB 905280    1220            mov     dptr,#_dig_x2
01FE F0        1221            movx    @dptr,a
01FF           1222   ;        main.c:283: dig_y2 = (int8_t) trim_xyz_data[3]; 
01FF 90CA73    1223            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0202 E0        1224            movx    a,@dptr
0203 905200    1225            mov     dptr,#_dig_y2
0206 F0        1226            movx    @dptr,a
0207           1227   ;        main.c:297: dig_xy1 = trim_xy1xy2[9];
0207 90CAD9    1228            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
020A E0        1229            movx    a,@dptr
020B 9050C0    1230            mov     dptr,#_dig_xy1
020E F0        1231            movx    @dptr,a
020F           1232   ;        main.c:298: dig_xy2 = (int8_t)trim_xy1xy2[8];
020F 90CAD8    1233            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0212 E0        1234            movx    a,@dptr
0213 905080    1235            mov     dptr,#_dig_xy2
0216 F0        1236            movx    @dptr,a
0217           1237   ;        main.c:300: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
0217 90CAD5    1238            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
021A E0        1239            movx    a,@dptr
021B FA        1240            mov     r2,a
021C 53027F    1241            anl     ar2,#0x7F
021F 8A03      1242            mov     ar3,r2
0221 7A00      1243            mov     r2,#0x00
0223           1244   ;        main.c:301: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
0223 90CAD4    1245            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0226 E0        1246            movx    a,@dptr
0227 FC        1247            mov     r4,a
0228 7D00      1248            mov     r5,#0x00
022A 905040    1249            mov     dptr,#_dig_xyz1
022D EC        1250            mov     a,r4
022E 4A        1251            orl     a,r2
022F F0        1252            movx    @dptr,a
0230 ED        1253            mov     a,r5
0231 4B        1254            orl     a,r3
0232 A3        1255            inc     dptr
0233 F0        1256            movx    @dptr,a
0234 22        1257            ret
0235           1258   ;------------------------------------------------------------
0235           1259   ;Allocation info for local variables in function 'BMM150_Init'
0235           1260   ;------------------------------------------------------------
0235           1261   ;chip_id                   Allocated with name '_BMM150_Init_chip_id_1_102'
0235           1262   ;------------------------------------------------------------
0235           1263   ;        main.c:305: void BMM150_Init(void)
0235           1264   ;        -----------------------------------------
0235           1265   ;         function BMM150_Init
0235           1266   ;        -----------------------------------------
0235           1267   _BMM150_Init:
0235           1268   ;        main.c:310: CS = 1; // Deselect BMM150
0235 D290      1269            setb    _P1_0
0237           1270   ;        main.c:313: waitms(10);
0237 90000A    1271            mov     dptr,#0x000A
023A 120000    1272            lcall   _waitms
023D           1273   ;        main.c:316: SPI_write(BMM150_POWER_CONTROL, 0x82);
023D 759082    1274            mov     _SPI_write_PARM_2,#0x82
0240 75824B    1275            mov     dpl,#0x4B
0243 120000    1276            lcall   _SPI_write
0246           1277   ;        main.c:317: waitms(10);  // Wait for reset to complete
0246 90000A    1278            mov     dptr,#0x000A
0249 120000    1279            lcall   _waitms
024C           1280   ;        main.c:320: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
024C 759001    1281            mov     _SPI_write_PARM_2,#0x01
024F 75824B    1282            mov     dpl,#0x4B
0252 120000    1283            lcall   _SPI_write
0255           1284   ;        main.c:321: waitms(5);
0255 900005    1285            mov     dptr,#0x0005
0258 120000    1286            lcall   _waitms
025B           1287   ;        main.c:324: chip_id = SPI_read(BMM150_CHIP_ID);
025B 758240    1288            mov     dpl,#0x40
025E 120000    1289            lcall   _SPI_read
0261 AA82      1290            mov     r2,dpl
0263           1291   ;        main.c:325: if (chip_id != BMM150_CHIP_ID_VALUE)
0263 BA3230    1292            cjne    r2,#0x32,L009011?
0266 8000      1293            sjmp    L009005?
0268           1294   L009011?:
0268           1295   ;        main.c:327: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
0268 8A03      1296            mov     ar3,r2
026A 7C00      1297            mov     r4,#0x00
026C C003      1298            push    ar3
026E C004      1299            push    ar4
0270 74B0      1300            mov     a,#__str_0
0272 C0E0      1301            push    acc
0274 74D8      1302            mov     a,#(__str_0 >> 8)
0276 C0E0      1303            push    acc
0278 7480      1304            mov     a,#0x80
027A C0E0      1305            push    acc
027C 120000    1306            lcall   _printf
027F E581      1307            mov     a,sp
0281 24FB      1308            add     a,#0xfb
0283 F581      1309            mov     sp,a
0285           1310   ;        main.c:328: while (1) {
0285           1311   L009002?:
0285           1312   ;        main.c:329: printf("Press restart to check again!\r");
0285 74B0      1313            mov     a,#__str_1
0287 C0E0      1314            push    acc
0289 74D9      1315            mov     a,#(__str_1 >> 8)
028B C0E0      1316            push    acc
028D 7480      1317            mov     a,#0x80
028F C0E0      1318            push    acc
0291 120000    1319            lcall   _printf
0294 1581      1320            dec     sp
0296 1581      1321            dec     sp
0298 1581      1322            dec     sp
029A 8000      1323            sjmp    L009002?
029C           1324   L009005?:
029C           1325   ;        main.c:333: printf("DONE! Chip ID = 0x%02X\r\n", chip_id);
029C 7B00      1326            mov     r3,#0x00
029E C002      1327            push    ar2
02A0 C003      1328            push    ar3
02A2 C002      1329            push    ar2
02A4 C003      1330            push    ar3
02A6 74F0      1331            mov     a,#__str_2
02A8 C0E0      1332            push    acc
02AA 74D9      1333            mov     a,#(__str_2 >> 8)
02AC C0E0      1334            push    acc
02AE 7480      1335            mov     a,#0x80
02B0 C0E0      1336            push    acc
02B2 120000    1337            lcall   _printf
02B5 E581      1338            mov     a,sp
02B7 24FB      1339            add     a,#0xfb
02B9 F581      1340            mov     sp,a
02BB           1341   ;        main.c:337: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
02BB 759000    1342            mov     _SPI_write_PARM_2,#0x00
02BE 75824C    1343            mov     dpl,#0x4C
02C1 120000    1344            lcall   _SPI_write
02C4           1345   ;        main.c:340: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
02C4 75907F    1346            mov     _SPI_write_PARM_2,#0x7F
02C7 758251    1347            mov     dpl,#0x51
02CA 120000    1348            lcall   _SPI_write
02CD           1349   ;        main.c:341: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
02CD 75900E    1350            mov     _SPI_write_PARM_2,#0x0E
02D0 758252    1351            mov     dpl,#0x52
02D3 120000    1352            lcall   _SPI_write
02D6           1353   ;        main.c:343: BMM150_Read_Trim_Registers();
02D6 120000    1354            lcall   _BMM150_Read_Trim_Registers
02D9           1355   ;        main.c:345: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
02D9 7430      1356            mov     a,#__str_3
02DB C0E0      1357            push    acc
02DD 74DA      1358            mov     a,#(__str_3 >> 8)
02DF C0E0      1359            push    acc
02E1 7480      1360            mov     a,#0x80
02E3 C0E0      1361            push    acc
02E5 120000    1362            lcall   _printf
02E8 E581      1363            mov     a,sp
02EA 24FB      1364            add     a,#0xfb
02EC F581      1365            mov     sp,a
02EE           1366   ;        main.c:346: return; 
02EE 22        1367            ret
02EF           1368   ;------------------------------------------------------------
02EF           1369   ;Allocation info for local variables in function 'BMM150_compensate_x'
02EF           1370   ;------------------------------------------------------------
02EF           1371   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
02EF           1372   ;mag_data_x                Allocated to registers r2 r3 r4 
02EF           1373   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
02EF           1374   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_107'
02EF           1375   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_107'
02EF           1376   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_107'
02EF           1377   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_107'
02EF           1378   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_107'
02EF           1379   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_107'
02EF           1380   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_107'
02EF           1381   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_107'
02EF           1382   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_107'
02EF           1383   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_107'
02EF           1384   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_107'
02EF           1385   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_107'
02EF           1386   ;------------------------------------------------------------
02EF           1387   ;        main.c:349: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
02EF           1388   ;        -----------------------------------------
02EF           1389   ;         function BMM150_compensate_x
02EF           1390   ;        -----------------------------------------
02EF           1391   _BMM150_compensate_x:
02EF           1392   ;        main.c:367: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
02EF ACF0      1393            mov     r4,b
02F1 120000    1394            lcall   __gptrget
02F4 FA        1395            mov     r2,a
02F5 A3        1396            inc     dptr
02F6 120000    1397            lcall   __gptrget
02F9 FB        1398            mov     r3,a
02FA BA00F0    1399            cjne    r2,#0x00,L010019?
02FD BBF0F0    1400            cjne    r3,#0xF0,L010019?
0300 020000    1401            ljmp    L010011?
0303           1402   L010019?:
0303           1403   ;        main.c:368: if (*data_rhall != 0)
0303 AC40      1404            mov     r4,_BMM150_compensate_x_PARM_2
0305 AD41      1405            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
0307 AE42      1406            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
0309 8C82      1407            mov     dpl,r4
030B 8D83      1408            mov     dph,r5
030D 8EF0      1409            mov     b,r6
030F 120000    1410            lcall   __gptrget
0312 FC        1411            mov     r4,a
0313 A3        1412            inc     dptr
0314 120000    1413            lcall   __gptrget
0317 FD        1414            mov     r5,a
0318 4C        1415            orl     a,r4
0319 6000      1416            jz      L010005?
031B           1417   ;        main.c:371: process_comp_x0 = *data_rhall;
031B 90CB90    1418            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
031E EC        1419            mov     a,r4
031F F0        1420            movx    @dptr,a
0320 A3        1421            inc     dptr
0321 ED        1422            mov     a,r5
0322 F0        1423            movx    @dptr,a
0323 8000      1424            sjmp    L010006?
0325           1425   L010005?:
0325           1426   ;        main.c:373: else if (dig_xyz1 != 0)
0325 905040    1427            mov     dptr,#_dig_xyz1
0328 E0        1428            movx    a,@dptr
0329 FC        1429            mov     r4,a
032A A3        1430            inc     dptr
032B E0        1431            movx    a,@dptr
032C FD        1432            mov     r5,a
032D 4C        1433            orl     a,r4
032E 6000      1434            jz      L010002?
0330           1435   ;        main.c:375: process_comp_x0 = dig_xyz1;
0330 90CB90    1436            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
0333 EC        1437            mov     a,r4
0334 F0        1438            movx    @dptr,a
0335 A3        1439            inc     dptr
0336 ED        1440            mov     a,r5
0337 F0        1441            movx    @dptr,a
0338 8000      1442            sjmp    L010006?
033A           1443   L010002?:
033A           1444   ;        main.c:379: process_comp_x0 = 0;
033A 90CB90    1445            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
033D E4        1446            clr     a
033E F0        1447            movx    @dptr,a
033F A3        1448            inc     dptr
0340 F0        1449            movx    @dptr,a
0341           1450   L010006?:
0341           1451   ;        main.c:381: if (process_comp_x0 != 0)
0341 90CB90    1452            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
0344 E0        1453            movx    a,@dptr
0345 FC        1454            mov     r4,a
0346 A3        1455            inc     dptr
0347 E0        1456            movx    a,@dptr
0348 FD        1457            mov     r5,a
0349 4C        1458            orl     a,r4
034A 7000      1459            jnz     L010022?
034C 020000    1460            ljmp    L010008?
034F           1461   L010022?:
034F           1462   ;        main.c:384: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
034F 905040    1463            mov     dptr,#_dig_xyz1
0352 E0        1464            movx    a,@dptr
0353 FE        1465            mov     r6,a
0354 A3        1466            inc     dptr
0355 E0        1467            movx    a,@dptr
0356 FF        1468            mov     r7,a
0357 E4        1469            clr     a
0358 F8        1470            mov     r0,a
0359 EF        1471            mov     a,r7
035A C8        1472            xch     a,r0
035B 5403      1473            anl     a,#0x03
035D A2E0      1474            mov     c,acc.0
035F C8        1475            xch     a,r0
0360 13        1476            rrc     a
0361 C8        1477            xch     a,r0
0362 13        1478            rrc     a
0363 A2E0      1479            mov     c,acc.0
0365 C8        1480            xch     a,r0
0366 13        1481            rrc     a
0367 C8        1482            xch     a,r0
0368 13        1483            rrc     a
0369 C8        1484            xch     a,r0
036A F9        1485            mov     r1,a
036B EE        1486            mov     a,r6
036C 03        1487            rr      a
036D 03        1488            rr      a
036E 54C0      1489            anl     a,#0xc0
0370 FF        1490            mov     r7,a
0371 EE        1491            mov     a,r6
0372 03        1492            rr      a
0373 03        1493            rr      a
0374 543F      1494            anl     a,#0x3f
0376 48        1495            orl     a,r0
0377 F8        1496            mov     r0,a
0378 7E00      1497            mov     r6,#0x00
037A           1498   ;        main.c:385: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
037A 8C00      1499            mov     __divslong_PARM_2,r4
037C 8D01      1500            mov     (__divslong_PARM_2 + 1),r5
037E 750200    1501            mov     (__divslong_PARM_2 + 2),#0x00
0381 750300    1502            mov     (__divslong_PARM_2 + 3),#0x00
0384 8E82      1503            mov     dpl,r6
0386 8F83      1504            mov     dph,r7
0388 88F0      1505            mov     b,r0
038A E9        1506            mov     a,r1
038B C002      1507            push    ar2
038D C003      1508            push    ar3
038F 120000    1509            lcall   __divslong
0392 AC82      1510            mov     r4,dpl
0394 E583      1511            mov     a,dph
0396 24C0      1512            add     a,#0xc0
0398 FD        1513            mov     r5,a
0399           1514   ;        main.c:387: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
0399 8C06      1515            mov     ar6,r4
039B 8D07      1516            mov     ar7,r5
039D 8EA0      1517            mov     _BMM150_compensate_x_sloc0_1_0,r6
039F EF        1518            mov     a,r7
03A0 F5A1      1519            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
03A2 33        1520            rlc     a
03A3 95E0      1521            subb    a,acc
03A5 F5A2      1522            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
03A7 F5A3      1523            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03A9 8C06      1524            mov     ar6,r4
03AB 8D07      1525            mov     ar7,r5
03AD 8E00      1526            mov     __mullong_PARM_2,r6
03AF EF        1527            mov     a,r7
03B0 F501      1528            mov     (__mullong_PARM_2 + 1),a
03B2 33        1529            rlc     a
03B3 95E0      1530            subb    a,acc
03B5 F502      1531            mov     (__mullong_PARM_2 + 2),a
03B7 F503      1532            mov     (__mullong_PARM_2 + 3),a
03B9           1533   ;        main.c:388: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
03B9 85A082    1534            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03BC 85A183    1535            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03BF 85A2F0    1536            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03C2 E5A3      1537            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03C4 C004      1538            push    ar4
03C6 C005      1539            push    ar5
03C8 120000    1540            lcall   __mullong
03CB 8582A0    1541            mov     _BMM150_compensate_x_sloc0_1_0,dpl
03CE 8583A1    1542            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
03D1 85F0A2    1543            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
03D4 F5A3      1544            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03D6 905080    1545            mov     dptr,#_dig_xy2
03D9 E0        1546            movx    a,@dptr
03DA FE        1547            mov     r6,a
03DB 33        1548            rlc     a
03DC 95E0      1549            subb    a,acc
03DE FF        1550            mov     r7,a
03DF F8        1551            mov     r0,a
03E0 F9        1552            mov     r1,a
03E1 750080    1553            mov     __divslong_PARM_2,#0x80
03E4 E4        1554            clr     a
03E5 F501      1555            mov     (__divslong_PARM_2 + 1),a
03E7 F502      1556            mov     (__divslong_PARM_2 + 2),a
03E9 F503      1557            mov     (__divslong_PARM_2 + 3),a
03EB 85A082    1558            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03EE 85A183    1559            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03F1 85A2F0    1560            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03F4 E5A3      1561            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03F6 C006      1562            push    ar6
03F8 C007      1563            push    ar7
03FA C000      1564            push    ar0
03FC C001      1565            push    ar1
03FE 120000    1566            lcall   __divslong
0401 858200    1567            mov     __mullong_PARM_2,dpl
0404 858301    1568            mov     (__mullong_PARM_2 + 1),dph
0407 85F002    1569            mov     (__mullong_PARM_2 + 2),b
040A F503      1570            mov     (__mullong_PARM_2 + 3),a
040C D001      1571            pop     ar1
040E D000      1572            pop     ar0
0410 D007      1573            pop     ar7
0412 D006      1574            pop     ar6
0414           1575   ;        main.c:389: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
0414 8E82      1576            mov     dpl,r6
0416 8F83      1577            mov     dph,r7
0418 88F0      1578            mov     b,r0
041A E9        1579            mov     a,r1
041B 120000    1580            lcall   __mullong
041E 8582A0    1581            mov     _BMM150_compensate_x_sloc0_1_0,dpl
0421 8583A1    1582            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
0424 85F0A2    1583            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
0427 F5A3      1584            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
0429 D005      1585            pop     ar5
042B D004      1586            pop     ar4
042D 9050C0    1587            mov     dptr,#_dig_xy1
0430 E0        1588            movx    a,@dptr
0431 FE        1589            mov     r6,a
0432 E4        1590            clr     a
0433 5401      1591            anl     a,#0x01
0435 A2E0      1592            mov     c,acc.0
0437 CE        1593            xch     a,r6
0438 13        1594            rrc     a
0439 CE        1595            xch     a,r6
043A 13        1596            rrc     a
043B CE        1597            xch     a,r6
043C 8E00      1598            mov     __mullong_PARM_2,r6
043E F501      1599            mov     (__mullong_PARM_2 + 1),a
0440 33        1600            rlc     a
0441 95E0      1601            subb    a,acc
0443 F502      1602            mov     (__mullong_PARM_2 + 2),a
0445 F503      1603            mov     (__mullong_PARM_2 + 3),a
0447           1604   ;        main.c:390: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
0447 ED        1605            mov     a,r5
0448 33        1606            rlc     a
0449 95E0      1607            subb    a,acc
044B FE        1608            mov     r6,a
044C           1609   ;        main.c:391: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
044C 8C82      1610            mov     dpl,r4
044E 8D83      1611            mov     dph,r5
0450 8EF0      1612            mov     b,r6
0452 120000    1613            lcall   __mullong
0455 AC82      1614            mov     r4,dpl
0457 AD83      1615            mov     r5,dph
0459 AEF0      1616            mov     r6,b
045B FF        1617            mov     r7,a
045C EC        1618            mov     a,r4
045D 25A0      1619            add     a,_BMM150_compensate_x_sloc0_1_0
045F FC        1620            mov     r4,a
0460 ED        1621            mov     a,r5
0461 35A1      1622            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
0463 FD        1623            mov     r5,a
0464 EE        1624            mov     a,r6
0465 35A2      1625            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
0467 FE        1626            mov     r6,a
0468 EF        1627            mov     a,r7
0469 35A3      1628            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
046B FF        1629            mov     r7,a
046C 750000    1630            mov     __divslong_PARM_2,#0x00
046F 750102    1631            mov     (__divslong_PARM_2 + 1),#0x02
0472 750200    1632            mov     (__divslong_PARM_2 + 2),#0x00
0475 750300    1633            mov     (__divslong_PARM_2 + 3),#0x00
0478 8C82      1634            mov     dpl,r4
047A 8D83      1635            mov     dph,r5
047C 8EF0      1636            mov     b,r6
047E EF        1637            mov     a,r7
047F 120000    1638            lcall   __divslong
0482 AC82      1639            mov     r4,dpl
0484 AD83      1640            mov     r5,dph
0486 AEF0      1641            mov     r6,b
0488 FF        1642            mov     r7,a
0489 7410      1643            mov     a,#0x10
048B 2E        1644            add     a,r6
048C FE        1645            mov     r6,a
048D E4        1646            clr     a
048E 3F        1647            addc    a,r7
048F FF        1648            mov     r7,a
0490           1649   ;        main.c:392: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
0490 905280    1650            mov     dptr,#_dig_x2
0493 E0        1651            movx    a,@dptr
0494 F8        1652            mov     r0,a
0495 33        1653            rlc     a
0496 95E0      1654            subb    a,acc
0498 F9        1655            mov     r1,a
0499 74A0      1656            mov     a,#0xA0
049B 28        1657            add     a,r0
049C F8        1658            mov     r0,a
049D E4        1659            clr     a
049E 39        1660            addc    a,r1
049F 8800      1661            mov     __mullong_PARM_2,r0
04A1 F501      1662            mov     (__mullong_PARM_2 + 1),a
04A3 33        1663            rlc     a
04A4 95E0      1664            subb    a,acc
04A6 F502      1665            mov     (__mullong_PARM_2 + 2),a
04A8 F503      1666            mov     (__mullong_PARM_2 + 3),a
04AA           1667   ;        main.c:393: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
04AA 8C82      1668            mov     dpl,r4
04AC 8D83      1669            mov     dph,r5
04AE 8EF0      1670            mov     b,r6
04B0 EF        1671            mov     a,r7
04B1 120000    1672            lcall   __mullong
04B4           1673   ;        main.c:394: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
04B4 750000    1674            mov     __divslong_PARM_2,#0x00
04B7 750110    1675            mov     (__divslong_PARM_2 + 1),#0x10
04BA 750200    1676            mov     (__divslong_PARM_2 + 2),#0x00
04BD 750300    1677            mov     (__divslong_PARM_2 + 3),#0x00
04C0 120000    1678            lcall   __divslong
04C3 858200    1679            mov     __mullong_PARM_2,dpl
04C6 858301    1680            mov     (__mullong_PARM_2 + 1),dph
04C9 85F002    1681            mov     (__mullong_PARM_2 + 2),b
04CC F503      1682            mov     (__mullong_PARM_2 + 3),a
04CE D003      1683            pop     ar3
04D0 D002      1684            pop     ar2
04D2 EB        1685            mov     a,r3
04D3 33        1686            rlc     a
04D4 95E0      1687            subb    a,acc
04D6 FC        1688            mov     r4,a
04D7           1689   ;        main.c:395: retval = ((int16_t)(process_comp_x10 / 8192));
04D7 8A82      1690            mov     dpl,r2
04D9 8B83      1691            mov     dph,r3
04DB 8CF0      1692            mov     b,r4
04DD 120000    1693            lcall   __mullong
04E0 750000    1694            mov     __divslong_PARM_2,#0x00
04E3 750120    1695            mov     (__divslong_PARM_2 + 1),#0x20
04E6 750200    1696            mov     (__divslong_PARM_2 + 2),#0x00
04E9 750300    1697            mov     (__divslong_PARM_2 + 3),#0x00
04EC 120000    1698            lcall   __divslong
04EF AA82      1699            mov     r2,dpl
04F1 AB83      1700            mov     r3,dph
04F3           1701   ;        main.c:396: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
04F3 9052C0    1702            mov     dptr,#_dig_x1
04F6 E0        1703            movx    a,@dptr
04F7 FC        1704            mov     r4,a
04F8 33        1705            rlc     a
04F9 95E0      1706            subb    a,acc
04FB C4        1707            swap    a
04FC 03        1708            rr      a
04FD 54F8      1709            anl     a,#0xf8
04FF CC        1710            xch     a,r4
0500 C4        1711            swap    a
0501 03        1712            rr      a
0502 CC        1713            xch     a,r4
0503 6C        1714            xrl     a,r4
0504 CC        1715            xch     a,r4
0505 54F8      1716            anl     a,#0xf8
0507 CC        1717            xch     a,r4
0508 6C        1718            xrl     a,r4
0509 FD        1719            mov     r5,a
050A EC        1720            mov     a,r4
050B 2A        1721            add     a,r2
050C F582      1722            mov     dpl,a
050E ED        1723            mov     a,r5
050F 3B        1724            addc    a,r3
0510 F583      1725            mov     dph,a
0512 750010    1726            mov     __divsint_PARM_2,#0x10
0515 E4        1727            clr     a
0516 F501      1728            mov     (__divsint_PARM_2 + 1),a
0518 120000    1729            lcall   __divsint
051B E582      1730            mov     a,dpl
051D 8583F0    1731            mov     b,dph
0520 90CB30    1732            mov     dptr,#_BMM150_compensate_x_retval_1_107
0523 F0        1733            movx    @dptr,a
0524 A3        1734            inc     dptr
0525 E5F0      1735            mov     a,b
0527 F0        1736            movx    @dptr,a
0528 8000      1737            sjmp    L010012?
052A           1738   L010008?:
052A           1739   ;        main.c:399: retval = BMM150_OVERFLOW_OUTPUT; 
052A 90CB30    1740            mov     dptr,#_BMM150_compensate_x_retval_1_107
052D E4        1741            clr     a
052E F0        1742            movx    @dptr,a
052F A3        1743            inc     dptr
0530 7480      1744            mov     a,#0x80
0532 F0        1745            movx    @dptr,a
0533 8000      1746            sjmp    L010012?
0535           1747   L010011?:
0535           1748   ;        main.c:403: retval = BMM150_OVERFLOW_OUTPUT; 
0535 90CB30    1749            mov     dptr,#_BMM150_compensate_x_retval_1_107
0538 E4        1750            clr     a
0539 F0        1751            movx    @dptr,a
053A A3        1752            inc     dptr
053B 7480      1753            mov     a,#0x80
053D F0        1754            movx    @dptr,a
053E           1755   L010012?:
053E           1756   ;        main.c:405: return retval; 
053E 90CB30    1757            mov     dptr,#_BMM150_compensate_x_retval_1_107
0541 E0        1758            movx    a,@dptr
0542 FA        1759            mov     r2,a
0543 A3        1760            inc     dptr
0544 E0        1761            movx    a,@dptr
0545 8A82      1762            mov     dpl,r2
0547 F583      1763            mov     dph,a
0549 22        1764            ret
054A           1765   ;------------------------------------------------------------
054A           1766   ;Allocation info for local variables in function 'BMM150_compensate_y'
054A           1767   ;------------------------------------------------------------
054A           1768   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
054A           1769   ;mag_data_y                Allocated to registers r2 r3 r4 
054A           1770   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
054A           1771   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_116'
054A           1772   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_116'
054A           1773   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_116'
054A           1774   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_116'
054A           1775   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_116'
054A           1776   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_116'
054A           1777   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_116'
054A           1778   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_116'
054A           1779   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_116'
054A           1780   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_116'
054A           1781   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_116'
054A           1782   ;------------------------------------------------------------
054A           1783   ;        main.c:408: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
054A           1784   ;        -----------------------------------------
054A           1785   ;         function BMM150_compensate_y
054A           1786   ;        -----------------------------------------
054A           1787   _BMM150_compensate_y:
054A           1788   ;        main.c:426: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
054A ACF0      1789            mov     r4,b
054C 120000    1790            lcall   __gptrget
054F FA        1791            mov     r2,a
0550 A3        1792            inc     dptr
0551 120000    1793            lcall   __gptrget
0554 FB        1794            mov     r3,a
0555 BA00A0    1795            cjne    r2,#0x00,L011019?
0558 BBF0A0    1796            cjne    r3,#0xF0,L011019?
055B 020000    1797            ljmp    L011011?
055E           1798   L011019?:
055E           1799   ;        main.c:428: if (*data_rhall != 0)
055E ACF0      1800            mov     r4,_BMM150_compensate_y_PARM_2
0560 ADF1      1801            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
0562 AEF2      1802            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
0564 8C82      1803            mov     dpl,r4
0566 8D83      1804            mov     dph,r5
0568 8EF0      1805            mov     b,r6
056A 120000    1806            lcall   __gptrget
056D FC        1807            mov     r4,a
056E A3        1808            inc     dptr
056F 120000    1809            lcall   __gptrget
0572 FD        1810            mov     r5,a
0573 4C        1811            orl     a,r4
0574 6000      1812            jz      L011005?
0576           1813   ;        main.c:431: process_comp_y0 = *data_rhall;
0576 90CC50    1814            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
0579 EC        1815            mov     a,r4
057A F0        1816            movx    @dptr,a
057B A3        1817            inc     dptr
057C ED        1818            mov     a,r5
057D F0        1819            movx    @dptr,a
057E 8000      1820            sjmp    L011006?
0580           1821   L011005?:
0580           1822   ;        main.c:433: else if (dig_xyz1 != 0)
0580 905040    1823            mov     dptr,#_dig_xyz1
0583 E0        1824            movx    a,@dptr
0584 FC        1825            mov     r4,a
0585 A3        1826            inc     dptr
0586 E0        1827            movx    a,@dptr
0587 FD        1828            mov     r5,a
0588 4C        1829            orl     a,r4
0589 6000      1830            jz      L011002?
058B           1831   ;        main.c:435: process_comp_y0 = dig_xyz1;
058B 90CC50    1832            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
058E EC        1833            mov     a,r4
058F F0        1834            movx    @dptr,a
0590 A3        1835            inc     dptr
0591 ED        1836            mov     a,r5
0592 F0        1837            movx    @dptr,a
0593 8000      1838            sjmp    L011006?
0595           1839   L011002?:
0595           1840   ;        main.c:439: process_comp_y0 = 0;
0595 90CC50    1841            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
0598 E4        1842            clr     a
0599 F0        1843            movx    @dptr,a
059A A3        1844            inc     dptr
059B F0        1845            movx    @dptr,a
059C           1846   L011006?:
059C           1847   ;        main.c:442: if (process_comp_y0 != 0)
059C 90CC50    1848            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
059F E0        1849            movx    a,@dptr
05A0 FC        1850            mov     r4,a
05A1 A3        1851            inc     dptr
05A2 E0        1852            movx    a,@dptr
05A3 FD        1853            mov     r5,a
05A4 4C        1854            orl     a,r4
05A5 7000      1855            jnz     L011022?
05A7 020000    1856            ljmp    L011008?
05AA           1857   L011022?:
05AA           1858   ;        main.c:445: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
05AA 905040    1859            mov     dptr,#_dig_xyz1
05AD E0        1860            movx    a,@dptr
05AE FE        1861            mov     r6,a
05AF A3        1862            inc     dptr
05B0 E0        1863            movx    a,@dptr
05B1 FF        1864            mov     r7,a
05B2 E4        1865            clr     a
05B3 F8        1866            mov     r0,a
05B4 EF        1867            mov     a,r7
05B5 C8        1868            xch     a,r0
05B6 5403      1869            anl     a,#0x03
05B8 A2E0      1870            mov     c,acc.0
05BA C8        1871            xch     a,r0
05BB 13        1872            rrc     a
05BC C8        1873            xch     a,r0
05BD 13        1874            rrc     a
05BE A2E0      1875            mov     c,acc.0
05C0 C8        1876            xch     a,r0
05C1 13        1877            rrc     a
05C2 C8        1878            xch     a,r0
05C3 13        1879            rrc     a
05C4 C8        1880            xch     a,r0
05C5 F9        1881            mov     r1,a
05C6 EE        1882            mov     a,r6
05C7 03        1883            rr      a
05C8 03        1884            rr      a
05C9 54C0      1885            anl     a,#0xc0
05CB FF        1886            mov     r7,a
05CC EE        1887            mov     a,r6
05CD 03        1888            rr      a
05CE 03        1889            rr      a
05CF 543F      1890            anl     a,#0x3f
05D1 48        1891            orl     a,r0
05D2 F8        1892            mov     r0,a
05D3 7E00      1893            mov     r6,#0x00
05D5 8C00      1894            mov     __divslong_PARM_2,r4
05D7 8D01      1895            mov     (__divslong_PARM_2 + 1),r5
05D9 750200    1896            mov     (__divslong_PARM_2 + 2),#0x00
05DC 750300    1897            mov     (__divslong_PARM_2 + 3),#0x00
05DF           1898   ;        main.c:446: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
05DF 8E82      1899            mov     dpl,r6
05E1 8F83      1900            mov     dph,r7
05E3 88F0      1901            mov     b,r0
05E5 E9        1902            mov     a,r1
05E6 C002      1903            push    ar2
05E8 C003      1904            push    ar3
05EA 120000    1905            lcall   __divslong
05ED AC82      1906            mov     r4,dpl
05EF E583      1907            mov     a,dph
05F1 24C0      1908            add     a,#0xc0
05F3 FD        1909            mov     r5,a
05F4           1910   ;        main.c:448: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
05F4 8C06      1911            mov     ar6,r4
05F6 8D07      1912            mov     ar7,r5
05F8 8EF0      1913            mov     _BMM150_compensate_y_sloc0_1_0,r6
05FA EF        1914            mov     a,r7
05FB F5F1      1915            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
05FD 33        1916            rlc     a
05FE 95E0      1917            subb    a,acc
0600 F5F2      1918            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
0602 F5F3      1919            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0604 8C06      1920            mov     ar6,r4
0606 8D07      1921            mov     ar7,r5
0608 8E00      1922            mov     __mullong_PARM_2,r6
060A EF        1923            mov     a,r7
060B F501      1924            mov     (__mullong_PARM_2 + 1),a
060D 33        1925            rlc     a
060E 95E0      1926            subb    a,acc
0610 F502      1927            mov     (__mullong_PARM_2 + 2),a
0612 F503      1928            mov     (__mullong_PARM_2 + 3),a
0614           1929   ;        main.c:449: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
0614 85F082    1930            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0617 85F183    1931            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
061A 85F2F0    1932            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
061D E5F3      1933            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
061F C004      1934            push    ar4
0621 C005      1935            push    ar5
0623 120000    1936            lcall   __mullong
0626 8582F0    1937            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0629 8583F1    1938            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
062C 85F0F2    1939            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
062F F5F3      1940            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0631 905080    1941            mov     dptr,#_dig_xy2
0634 E0        1942            movx    a,@dptr
0635 FE        1943            mov     r6,a
0636 33        1944            rlc     a
0637 95E0      1945            subb    a,acc
0639 FF        1946            mov     r7,a
063A F8        1947            mov     r0,a
063B F9        1948            mov     r1,a
063C 750080    1949            mov     __divslong_PARM_2,#0x80
063F E4        1950            clr     a
0640 F501      1951            mov     (__divslong_PARM_2 + 1),a
0642 F502      1952            mov     (__divslong_PARM_2 + 2),a
0644 F503      1953            mov     (__divslong_PARM_2 + 3),a
0646 85F082    1954            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0649 85F183    1955            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
064C 85F2F0    1956            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
064F E5F3      1957            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
0651 C006      1958            push    ar6
0653 C007      1959            push    ar7
0655 C000      1960            push    ar0
0657 C001      1961            push    ar1
0659 120000    1962            lcall   __divslong
065C 858200    1963            mov     __mullong_PARM_2,dpl
065F 858301    1964            mov     (__mullong_PARM_2 + 1),dph
0662 85F002    1965            mov     (__mullong_PARM_2 + 2),b
0665 F503      1966            mov     (__mullong_PARM_2 + 3),a
0667 D001      1967            pop     ar1
0669 D000      1968            pop     ar0
066B D007      1969            pop     ar7
066D D006      1970            pop     ar6
066F           1971   ;        main.c:450: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
066F 8E82      1972            mov     dpl,r6
0671 8F83      1973            mov     dph,r7
0673 88F0      1974            mov     b,r0
0675 E9        1975            mov     a,r1
0676 120000    1976            lcall   __mullong
0679 8582F0    1977            mov     _BMM150_compensate_y_sloc0_1_0,dpl
067C 8583F1    1978            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
067F 85F0F2    1979            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
0682 F5F3      1980            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0684 D005      1981            pop     ar5
0686 D004      1982            pop     ar4
0688 9050C0    1983            mov     dptr,#_dig_xy1
068B E0        1984            movx    a,@dptr
068C FE        1985            mov     r6,a
068D E4        1986            clr     a
068E 5401      1987            anl     a,#0x01
0690 A2E0      1988            mov     c,acc.0
0692 CE        1989            xch     a,r6
0693 13        1990            rrc     a
0694 CE        1991            xch     a,r6
0695 13        1992            rrc     a
0696 CE        1993            xch     a,r6
0697 8E00      1994            mov     __mullong_PARM_2,r6
0699 F501      1995            mov     (__mullong_PARM_2 + 1),a
069B 33        1996            rlc     a
069C 95E0      1997            subb    a,acc
069E F502      1998            mov     (__mullong_PARM_2 + 2),a
06A0 F503      1999            mov     (__mullong_PARM_2 + 3),a
06A2           2000   ;        main.c:451: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
06A2 ED        2001            mov     a,r5
06A3 33        2002            rlc     a
06A4 95E0      2003            subb    a,acc
06A6 FE        2004            mov     r6,a
06A7 8C82      2005            mov     dpl,r4
06A9 8D83      2006            mov     dph,r5
06AB 8EF0      2007            mov     b,r6
06AD 120000    2008            lcall   __mullong
06B0 AC82      2009            mov     r4,dpl
06B2 AD83      2010            mov     r5,dph
06B4 AEF0      2011            mov     r6,b
06B6 FF        2012            mov     r7,a
06B7 EC        2013            mov     a,r4
06B8 25F0      2014            add     a,_BMM150_compensate_y_sloc0_1_0
06BA FC        2015            mov     r4,a
06BB ED        2016            mov     a,r5
06BC 35F1      2017            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
06BE FD        2018            mov     r5,a
06BF EE        2019            mov     a,r6
06C0 35F2      2020            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
06C2 FE        2021            mov     r6,a
06C3 EF        2022            mov     a,r7
06C4 35F3      2023            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
06C6 FF        2024            mov     r7,a
06C7 750000    2025            mov     __divslong_PARM_2,#0x00
06CA 750102    2026            mov     (__divslong_PARM_2 + 1),#0x02
06CD 750200    2027            mov     (__divslong_PARM_2 + 2),#0x00
06D0 750300    2028            mov     (__divslong_PARM_2 + 3),#0x00
06D3           2029   ;        main.c:452: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
06D3 8C82      2030            mov     dpl,r4
06D5 8D83      2031            mov     dph,r5
06D7 8EF0      2032            mov     b,r6
06D9 EF        2033            mov     a,r7
06DA 120000    2034            lcall   __divslong
06DD AC82      2035            mov     r4,dpl
06DF AD83      2036            mov     r5,dph
06E1 AEF0      2037            mov     r6,b
06E3 FF        2038            mov     r7,a
06E4 905200    2039            mov     dptr,#_dig_y2
06E7 E0        2040            movx    a,@dptr
06E8 F8        2041            mov     r0,a
06E9 33        2042            rlc     a
06EA 95E0      2043            subb    a,acc
06EC F9        2044            mov     r1,a
06ED 74A0      2045            mov     a,#0xA0
06EF 28        2046            add     a,r0
06F0 F8        2047            mov     r0,a
06F1 E4        2048            clr     a
06F2 39        2049            addc    a,r1
06F3 8800      2050            mov     __mullong_PARM_2,r0
06F5 F501      2051            mov     (__mullong_PARM_2 + 1),a
06F7 33        2052            rlc     a
06F8 95E0      2053            subb    a,acc
06FA F502      2054            mov     (__mullong_PARM_2 + 2),a
06FC F503      2055            mov     (__mullong_PARM_2 + 3),a
06FE           2056   ;        main.c:453: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
06FE 7410      2057            mov     a,#0x10
0700 2E        2058            add     a,r6
0701 FE        2059            mov     r6,a
0702 E4        2060            clr     a
0703 3F        2061            addc    a,r7
0704 8C82      2062            mov     dpl,r4
0706 8D83      2063            mov     dph,r5
0708 8EF0      2064            mov     b,r6
070A 120000    2065            lcall   __mullong
070D           2066   ;        main.c:454: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
070D 750000    2067            mov     __divslong_PARM_2,#0x00
0710 750110    2068            mov     (__divslong_PARM_2 + 1),#0x10
0713 750200    2069            mov     (__divslong_PARM_2 + 2),#0x00
0716 750300    2070            mov     (__divslong_PARM_2 + 3),#0x00
0719 120000    2071            lcall   __divslong
071C 858200    2072            mov     __mullong_PARM_2,dpl
071F 858301    2073            mov     (__mullong_PARM_2 + 1),dph
0722 85F002    2074            mov     (__mullong_PARM_2 + 2),b
0725 F503      2075            mov     (__mullong_PARM_2 + 3),a
0727 D003      2076            pop     ar3
0729 D002      2077            pop     ar2
072B EB        2078            mov     a,r3
072C 33        2079            rlc     a
072D 95E0      2080            subb    a,acc
072F FC        2081            mov     r4,a
0730           2082   ;        main.c:455: retval = (int16_t)(process_comp_y9 / 8192);
0730 8A82      2083            mov     dpl,r2
0732 8B83      2084            mov     dph,r3
0734 8CF0      2085            mov     b,r4
0736 120000    2086            lcall   __mullong
0739 750000    2087            mov     __divslong_PARM_2,#0x00
073C 750120    2088            mov     (__divslong_PARM_2 + 1),#0x20
073F 750200    2089            mov     (__divslong_PARM_2 + 2),#0x00
0742 750300    2090            mov     (__divslong_PARM_2 + 3),#0x00
0745 120000    2091            lcall   __divslong
0748 AA82      2092            mov     r2,dpl
074A AB83      2093            mov     r3,dph
074C           2094   ;        main.c:456: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
074C 905240    2095            mov     dptr,#_dig_y1
074F E0        2096            movx    a,@dptr
0750 FC        2097            mov     r4,a
0751 33        2098            rlc     a
0752 95E0      2099            subb    a,acc
0754 C4        2100            swap    a
0755 03        2101            rr      a
0756 54F8      2102            anl     a,#0xf8
0758 CC        2103            xch     a,r4
0759 C4        2104            swap    a
075A 03        2105            rr      a
075B CC        2106            xch     a,r4
075C 6C        2107            xrl     a,r4
075D CC        2108            xch     a,r4
075E 54F8      2109            anl     a,#0xf8
0760 CC        2110            xch     a,r4
0761 6C        2111            xrl     a,r4
0762 FD        2112            mov     r5,a
0763 EC        2113            mov     a,r4
0764 2A        2114            add     a,r2
0765 F582      2115            mov     dpl,a
0767 ED        2116            mov     a,r5
0768 3B        2117            addc    a,r3
0769 F583      2118            mov     dph,a
076B 750010    2119            mov     __divsint_PARM_2,#0x10
076E E4        2120            clr     a
076F F501      2121            mov     (__divsint_PARM_2 + 1),a
0771 120000    2122            lcall   __divsint
0774 E582      2123            mov     a,dpl
0776 8583F0    2124            mov     b,dph
0779 90CBF0    2125            mov     dptr,#_BMM150_compensate_y_retval_1_116
077C F0        2126            movx    @dptr,a
077D A3        2127            inc     dptr
077E E5F0      2128            mov     a,b
0780 F0        2129            movx    @dptr,a
0781 8000      2130            sjmp    L011012?
0783           2131   L011008?:
0783           2132   ;        main.c:460: retval = BMM150_OVERFLOW_OUTPUT;
0783 90CBF0    2133            mov     dptr,#_BMM150_compensate_y_retval_1_116
0786 E4        2134            clr     a
0787 F0        2135            movx    @dptr,a
0788 A3        2136            inc     dptr
0789 7480      2137            mov     a,#0x80
078B F0        2138            movx    @dptr,a
078C 8000      2139            sjmp    L011012?
078E           2140   L011011?:
078E           2141   ;        main.c:466: retval = BMM150_OVERFLOW_OUTPUT;
078E 90CBF0    2142            mov     dptr,#_BMM150_compensate_y_retval_1_116
0791 E4        2143            clr     a
0792 F0        2144            movx    @dptr,a
0793 A3        2145            inc     dptr
0794 7480      2146            mov     a,#0x80
0796 F0        2147            movx    @dptr,a
0797           2148   L011012?:
0797           2149   ;        main.c:469: return retval;
0797 90CBF0    2150            mov     dptr,#_BMM150_compensate_y_retval_1_116
079A E0        2151            movx    a,@dptr
079B FA        2152            mov     r2,a
079C A3        2153            inc     dptr
079D E0        2154            movx    a,@dptr
079E 8A82      2155            mov     dpl,r2
07A0 F583      2156            mov     dph,a
07A2 22        2157            ret
07A3           2158   ;------------------------------------------------------------
07A3           2159   ;Allocation info for local variables in function 'BMM150_Read_Data'
07A3           2160   ;------------------------------------------------------------
07A3           2161   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
07A3           2162   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_124'
07A3           2163   ;raw_x_lsb                 Allocated with name '_BMM150_Read_Data_raw_x_lsb_1_125'
07A3           2164   ;raw_x_msb                 Allocated with name '_BMM150_Read_Data_raw_x_msb_1_125'
07A3           2165   ;raw_y_lsb                 Allocated with name '_BMM150_Read_Data_raw_y_lsb_1_125'
07A3           2166   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_125'
07A3           2167   ;raw_rhall_lsb             Allocated with name '_BMM150_Read_Data_raw_rhall_lsb_1_125'
07A3           2168   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_125'
07A3           2169   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_125'
07A3           2170   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_125'
07A3           2171   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_125'
07A3           2172   ;msb_data                  Allocated with name '_BMM150_Read_Data_msb_data_1_125'
07A3           2173   ;------------------------------------------------------------
07A3           2174   ;        main.c:472: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y)
07A3           2175   ;        -----------------------------------------
07A3           2176   ;         function BMM150_Read_Data
07A3           2177   ;        -----------------------------------------
07A3           2178   _BMM150_Read_Data:
07A3 858240    2179            mov     _BMM150_Read_Data_mag_x_1_124,dpl
07A6 858341    2180            mov     (_BMM150_Read_Data_mag_x_1_124 + 1),dph
07A9 85F042    2181            mov     (_BMM150_Read_Data_mag_x_1_124 + 2),b
07AC           2182   ;        main.c:479: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
07AC 758242    2183            mov     dpl,#0x42
07AF 120000    2184            lcall   _SPI_read
07B2 AD82      2185            mov     r5,dpl
07B4           2186   ;        main.c:480: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
07B4 758243    2187            mov     dpl,#0x43
07B7 C005      2188            push    ar5
07B9 120000    2189            lcall   _SPI_read
07BC AE82      2190            mov     r6,dpl
07BE           2191   ;        main.c:481: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
07BE 758244    2192            mov     dpl,#0x44
07C1 C006      2193            push    ar6
07C3 120000    2194            lcall   _SPI_read
07C6 AF82      2195            mov     r7,dpl
07C8           2196   ;        main.c:482: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
07C8 758245    2197            mov     dpl,#0x45
07CB C007      2198            push    ar7
07CD 120000    2199            lcall   _SPI_read
07D0 A882      2200            mov     r0,dpl
07D2           2201   ;        main.c:485: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
07D2 758248    2202            mov     dpl,#0x48
07D5 C000      2203            push    ar0
07D7 120000    2204            lcall   _SPI_read
07DA A982      2205            mov     r1,dpl
07DC           2206   ;        main.c:486: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
07DC 758249    2207            mov     dpl,#0x49
07DF C001      2208            push    ar1
07E1 120000    2209            lcall   _SPI_read
07E4 AA82      2210            mov     r2,dpl
07E6 D001      2211            pop     ar1
07E8 D000      2212            pop     ar0
07EA D007      2213            pop     ar7
07EC D006      2214            pop     ar6
07EE D005      2215            pop     ar5
07F0           2216   ;        main.c:490: raw_x_lsb = ((raw_x_lsb & 0b_1111_1000)) >> 3;
07F0 5305F8    2217            anl     ar5,#0xF8
07F3 ED        2218            mov     a,r5
07F4 C4        2219            swap    a
07F5 23        2220            rl      a
07F6 541F      2221            anl     a,#0x1f
07F8 FD        2222            mov     r5,a
07F9           2223   ;        main.c:491: msb_data = ((int16_t)((int8_t)raw_x_msb)) << 5; 
07F9 EE        2224            mov     a,r6
07FA 33        2225            rlc     a
07FB 95E0      2226            subb    a,acc
07FD C4        2227            swap    a
07FE 23        2228            rl      a
07FF 54E0      2229            anl     a,#0xe0
0801 CE        2230            xch     a,r6
0802 C4        2231            swap    a
0803 23        2232            rl      a
0804 CE        2233            xch     a,r6
0805 6E        2234            xrl     a,r6
0806 CE        2235            xch     a,r6
0807 54E0      2236            anl     a,#0xe0
0809 CE        2237            xch     a,r6
080A 6E        2238            xrl     a,r6
080B FB        2239            mov     r3,a
080C           2240   ;        main.c:492: x_val = (int16_t)(msb_data | raw_x_lsb);
080C 7C00      2241            mov     r4,#0x00
080E 90CCA0    2242            mov     dptr,#_BMM150_Read_Data_x_val_1_125
0811 ED        2243            mov     a,r5
0812 4E        2244            orl     a,r6
0813 F0        2245            movx    @dptr,a
0814 EC        2246            mov     a,r4
0815 4B        2247            orl     a,r3
0816 A3        2248            inc     dptr
0817 F0        2249            movx    @dptr,a
0818           2250   ;        main.c:495: raw_y_lsb = ((raw_y_lsb & 0b_1111_1000)) >> 3;
0818 5307F8    2251            anl     ar7,#0xF8
081B EF        2252            mov     a,r7
081C C4        2253            swap    a
081D 23        2254            rl      a
081E 541F      2255            anl     a,#0x1f
0820 FF        2256            mov     r7,a
0821           2257   ;        main.c:496: msb_data = ((int16_t)((int8_t)raw_y_msb)) << 5; 
0821 E8        2258            mov     a,r0
0822 33        2259            rlc     a
0823 95E0      2260            subb    a,acc
0825 C4        2261            swap    a
0826 23        2262            rl      a
0827 54E0      2263            anl     a,#0xe0
0829 C8        2264            xch     a,r0
082A C4        2265            swap    a
082B 23        2266            rl      a
082C C8        2267            xch     a,r0
082D 68        2268            xrl     a,r0
082E C8        2269            xch     a,r0
082F 54E0      2270            anl     a,#0xe0
0831 C8        2271            xch     a,r0
0832 68        2272            xrl     a,r0
0833 FB        2273            mov     r3,a
0834           2274   ;        main.c:497: y_val = (int16_t)(msb_data | raw_y_lsb);
0834 7C00      2275            mov     r4,#0x00
0836 90CCF0    2276            mov     dptr,#_BMM150_Read_Data_y_val_1_125
0839 EF        2277            mov     a,r7
083A 48        2278            orl     a,r0
083B F0        2279            movx    @dptr,a
083C EC        2280            mov     a,r4
083D 4B        2281            orl     a,r3
083E A3        2282            inc     dptr
083F F0        2283            movx    @dptr,a
0840           2284   ;        main.c:505: raw_rhall_lsb = ((raw_rhall_lsb & 0xFC) >> 2);
0840 5301FC    2285            anl     ar1,#0xFC
0843 E9        2286            mov     a,r1
0844 03        2287            rr      a
0845 03        2288            rr      a
0846 543F      2289            anl     a,#0x3f
0848 F9        2290            mov     r1,a
0849           2291   ;        main.c:506: rhall_val = (uint16_t)(((uint16_t)raw_rhall_msb << 6) | raw_rhall_lsb);
0849 E4        2292            clr     a
084A 5403      2293            anl     a,#0x03
084C A2E0      2294            mov     c,acc.0
084E CA        2295            xch     a,r2
084F 13        2296            rrc     a
0850 CA        2297            xch     a,r2
0851 13        2298            rrc     a
0852 A2E0      2299            mov     c,acc.0
0854 CA        2300            xch     a,r2
0855 13        2301            rrc     a
0856 CA        2302            xch     a,r2
0857 13        2303            rrc     a
0858 CA        2304            xch     a,r2
0859 FB        2305            mov     r3,a
085A 7C00      2306            mov     r4,#0x00
085C 90CD50    2307            mov     dptr,#_BMM150_Read_Data_rhall_val_1_125
085F E9        2308            mov     a,r1
0860 4A        2309            orl     a,r2
0861 F0        2310            movx    @dptr,a
0862 EC        2311            mov     a,r4
0863 4B        2312            orl     a,r3
0864 A3        2313            inc     dptr
0865 F0        2314            movx    @dptr,a
0866           2315   ;        main.c:509: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
0866 754050    2316            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_125
0869 7541CD    2317            mov     (_BMM150_compensate_x_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_125 >> 8)
086C 754200    2318            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x00
086F 90CCA0    2319            mov     dptr,#_BMM150_Read_Data_x_val_1_125
0872 75F000    2320            mov     b,#0x00
0875 120000    2321            lcall   _BMM150_compensate_x
0878 AA82      2322            mov     r2,dpl
087A AB83      2323            mov     r3,dph
087C 854082    2324            mov     dpl,_BMM150_Read_Data_mag_x_1_124
087F 854183    2325            mov     dph,(_BMM150_Read_Data_mag_x_1_124 + 1)
0882 8542F0    2326            mov     b,(_BMM150_Read_Data_mag_x_1_124 + 2)
0885 EA        2327            mov     a,r2
0886 120000    2328            lcall   __gptrput
0889 A3        2329            inc     dptr
088A EB        2330            mov     a,r3
088B 120000    2331            lcall   __gptrput
088E           2332   ;        main.c:510: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
088E AAA0      2333            mov     r2,_BMM150_Read_Data_PARM_2
0890 ABA1      2334            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
0892 ACA2      2335            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
0894 75F050    2336            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_125
0897 75F1CD    2337            mov     (_BMM150_compensate_y_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_125 >> 8)
089A 75F200    2338            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x00
089D 90CCF0    2339            mov     dptr,#_BMM150_Read_Data_y_val_1_125
08A0 75F000    2340            mov     b,#0x00
08A3 C002      2341            push    ar2
08A5 C003      2342            push    ar3
08A7 C004      2343            push    ar4
08A9 120000    2344            lcall   _BMM150_compensate_y
08AC AD82      2345            mov     r5,dpl
08AE AE83      2346            mov     r6,dph
08B0 D004      2347            pop     ar4
08B2 D003      2348            pop     ar3
08B4 D002      2349            pop     ar2
08B6 8A82      2350            mov     dpl,r2
08B8 8B83      2351            mov     dph,r3
08BA 8CF0      2352            mov     b,r4
08BC ED        2353            mov     a,r5
08BD 120000    2354            lcall   __gptrput
08C0 A3        2355            inc     dptr
08C1 EE        2356            mov     a,r6
08C2 020000    2357            ljmp    __gptrput
08C5           2358   ;------------------------------------------------------------
08C5           2359   ;Allocation info for local variables in function 'UART1_Init'
08C5           2360   ;------------------------------------------------------------
08C5           2361   ;baudrate                  Allocated to registers r2 r3 r4 r5 
08C5           2362   ;------------------------------------------------------------
08C5           2363   ;        main.c:516: void UART1_Init (unsigned long baudrate)
08C5           2364   ;        -----------------------------------------
08C5           2365   ;         function UART1_Init
08C5           2366   ;        -----------------------------------------
08C5           2367   _UART1_Init:
08C5 AA82      2368            mov     r2,dpl
08C7 AB83      2369            mov     r3,dph
08C9 ACF0      2370            mov     r4,b
08CB FD        2371            mov     r5,a
08CC           2372   ;        main.c:518: SFRPAGE = 0x20;
08CC 75A720    2373            mov     _SFRPAGE,#0x20
08CF           2374   ;        main.c:519: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
08CF 75930C    2375            mov     _SMOD1,#0x0C
08D2           2376   ;        main.c:520: SCON1 = 0x10;
08D2 75C810    2377            mov     _SCON1,#0x10
08D5           2378   ;        main.c:521: SBCON1 =0x00;   // disable baud rate generator
08D5 759400    2379            mov     _SBCON1,#0x00
08D8           2380   ;        main.c:522: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
08D8 8A00      2381            mov     __divulong_PARM_2,r2
08DA 8B01      2382            mov     (__divulong_PARM_2 + 1),r3
08DC 8C02      2383            mov     (__divulong_PARM_2 + 2),r4
08DE 8D03      2384            mov     (__divulong_PARM_2 + 3),r5
08E0 90A200    2385            mov     dptr,#0xA200
08E3 75F04A    2386            mov     b,#0x4A
08E6 7404      2387            mov     a,#0x04
08E8 120000    2388            lcall   __divulong
08EB AA82      2389            mov     r2,dpl
08ED AB83      2390            mov     r3,dph
08EF ACF0      2391            mov     r4,b
08F1 FD        2392            mov     r5,a
08F2 750018    2393            mov     __divulong_PARM_2,#0x18
08F5 E4        2394            clr     a
08F6 F501      2395            mov     (__divulong_PARM_2 + 1),a
08F8 F502      2396            mov     (__divulong_PARM_2 + 2),a
08FA F503      2397            mov     (__divulong_PARM_2 + 3),a
08FC 8A82      2398            mov     dpl,r2
08FE 8B83      2399            mov     dph,r3
0900 8CF0      2400            mov     b,r4
0902 ED        2401            mov     a,r5
0903 120000    2402            lcall   __divulong
0906 AA82      2403            mov     r2,dpl
0908 AB83      2404            mov     r3,dph
090A ACF0      2405            mov     r4,b
090C FD        2406            mov     r5,a
090D E4        2407            clr     a
090E C3        2408            clr     c
090F 9A        2409            subb    a,r2
0910 FA        2410            mov     r2,a
0911 E4        2411            clr     a
0912 9B        2412            subb    a,r3
0913 FB        2413            mov     r3,a
0914 7401      2414            mov     a,#0x01
0916 9C        2415            subb    a,r4
0917 E4        2416            clr     a
0918 9D        2417            subb    a,r5
0919 8A95      2418            mov     _SBRL1,r2
091B 8B96      2419            mov     (_SBRL1 >> 8),r3
091D           2420   ;        main.c:523: TI1 = 1; // indicate ready for TX
091D D2C9      2421            setb    _TI1
091F           2422   ;        main.c:524: SBCON1 |= 0x40;   // enable baud rate generator
091F 439440    2423            orl     _SBCON1,#0x40
0922           2424   ;        main.c:525: SFRPAGE = 0x00;
0922 75A700    2425            mov     _SFRPAGE,#0x00
0925 22        2426            ret
0926           2427   ;------------------------------------------------------------
0926           2428   ;Allocation info for local variables in function 'putchar1'
0926           2429   ;------------------------------------------------------------
0926           2430   ;c                         Allocated to registers r2 
0926           2431   ;------------------------------------------------------------
0926           2432   ;        main.c:528: void putchar1 (char c) 
0926           2433   ;        -----------------------------------------
0926           2434   ;         function putchar1
0926           2435   ;        -----------------------------------------
0926           2436   _putchar1:
0926 AA82      2437            mov     r2,dpl
0928           2438   ;        main.c:530: SFRPAGE = 0x20;
0928 75A720    2439            mov     _SFRPAGE,#0x20
092B           2440   ;        main.c:531: while (!TI1);
092B           2441   L014001?:
092B           2442   ;        main.c:532: TI1=0;
092B 10C9B0    2443            jbc     _TI1,L014008?
092E 8000      2444            sjmp    L014001?
0930           2445   L014008?:
0930           2446   ;        main.c:533: SBUF1 = c;
0930 8A92      2447            mov     _SBUF1,r2
0932           2448   ;        main.c:534: SFRPAGE = 0x00;
0932 75A700    2449            mov     _SFRPAGE,#0x00
0935 22        2450            ret
0936           2451   ;------------------------------------------------------------
0936           2452   ;Allocation info for local variables in function 'sendstr1'
0936           2453   ;------------------------------------------------------------
0936           2454   ;s                         Allocated to registers r2 r3 r4 
0936           2455   ;------------------------------------------------------------
0936           2456   ;        main.c:537: void sendstr1 (char * s)
0936           2457   ;        -----------------------------------------
0936           2458   ;         function sendstr1
0936           2459   ;        -----------------------------------------
0936           2460   _sendstr1:
0936 AA82      2461            mov     r2,dpl
0938 AB83      2462            mov     r3,dph
093A ACF0      2463            mov     r4,b
093C           2464   ;        main.c:539: while(*s)
093C           2465   L015001?:
093C 8A82      2466            mov     dpl,r2
093E 8B83      2467            mov     dph,r3
0940 8CF0      2468            mov     b,r4
0942 120000    2469            lcall   __gptrget
0945 FD        2470            mov     r5,a
0946 6000      2471            jz      L015004?
0948           2472   ;        main.c:541: putchar1(*s);
0948 8D82      2473            mov     dpl,r5
094A C002      2474            push    ar2
094C C003      2475            push    ar3
094E C004      2476            push    ar4
0950 120000    2477            lcall   _putchar1
0953 D004      2478            pop     ar4
0955 D003      2479            pop     ar3
0957 D002      2480            pop     ar2
0959           2481   ;        main.c:542: s++;        
0959 0A        2482            inc     r2
095A BA00F0    2483            cjne    r2,#0x00,L015001?
095D 0B        2484            inc     r3
095E 8000      2485            sjmp    L015001?
0960           2486   L015004?:
0960 22        2487            ret
0961           2488   ;------------------------------------------------------------
0961           2489   ;Allocation info for local variables in function 'getchar1'
0961           2490   ;------------------------------------------------------------
0961           2491   ;c                         Allocated with name '_getchar1_c_1_134'
0961           2492   ;------------------------------------------------------------
0961           2493   ;        main.c:546: char getchar1 (void)
0961           2494   ;        -----------------------------------------
0961           2495   ;         function getchar1
0961           2496   ;        -----------------------------------------
0961           2497   _getchar1:
0961           2498   ;        main.c:549: SFRPAGE = 0x20;
0961 75A720    2499            mov     _SFRPAGE,#0x20
0964           2500   ;        main.c:550: while (!RI1);
0964           2501   L016001?:
0964           2502   ;        main.c:551: RI1=0;
0964 10C8B0    2503            jbc     _RI1,L016008?
0967 8000      2504            sjmp    L016001?
0969           2505   L016008?:
0969           2506   ;        main.c:553: SCON1&=0b_0011_1111;
0969 53C83F    2507            anl     _SCON1,#0x3F
096C           2508   ;        main.c:554: c = SBUF1;
096C 859282    2509            mov     dpl,_SBUF1
096F           2510   ;        main.c:555: SFRPAGE = 0x00;
096F 75A700    2511            mov     _SFRPAGE,#0x00
0972           2512   ;        main.c:556: return (c);
0972 22        2513            ret
0973           2514   ;------------------------------------------------------------
0973           2515   ;Allocation info for local variables in function 'getchar1_with_timeout'
0973           2516   ;------------------------------------------------------------
0973           2517   ;c                         Allocated with name '_getchar1_with_timeout_c_1_136'
0973           2518   ;timeout                   Allocated with name '_getchar1_with_timeout_timeout_1_136'
0973           2519   ;------------------------------------------------------------
0973           2520   ;        main.c:559: char getchar1_with_timeout (void)
0973           2521   ;        -----------------------------------------
0973           2522   ;         function getchar1_with_timeout
0973           2523   ;        -----------------------------------------
0973           2524   _getchar1_with_timeout:
0973           2525   ;        main.c:563: SFRPAGE = 0x20;
0973 75A720    2526            mov     _SFRPAGE,#0x20
0976           2527   ;        main.c:565: while (!RI1)
0976 7A00      2528            mov     r2,#0x00
0978 7B00      2529            mov     r3,#0x00
097A           2530   L017003?:
097A 20C830    2531            jb      _RI1,L017005?
097D           2532   ;        main.c:567: SFRPAGE = 0x00;
097D 75A700    2533            mov     _SFRPAGE,#0x00
0980           2534   ;        main.c:568: Timer3us(20);
0980 758214    2535            mov     dpl,#0x14
0983 C002      2536            push    ar2
0985 C003      2537            push    ar3
0987 120000    2538            lcall   _Timer3us
098A D003      2539            pop     ar3
098C D002      2540            pop     ar2
098E           2541   ;        main.c:569: SFRPAGE = 0x20;
098E 75A720    2542            mov     _SFRPAGE,#0x20
0991           2543   ;        main.c:570: timeout++;
0991 0A        2544            inc     r2
0992 BA0070    2545            cjne    r2,#0x00,L017012?
0995 0B        2546            inc     r3
0996           2547   L017012?:
0996           2548   ;        main.c:571: if(timeout==25000)
0996 BAA8F0    2549            cjne    r2,#0xA8,L017003?
0999 BB61F0    2550            cjne    r3,#0x61,L017003?
099C           2551   ;        main.c:573: SFRPAGE = 0x00;
099C 75A700    2552            mov     _SFRPAGE,#0x00
099F           2553   ;        main.c:574: return ('\n'); // Timeout after half second
099F 75820A    2554            mov     dpl,#0x0A
09A2 22        2555            ret
09A3           2556   L017005?:
09A3           2557   ;        main.c:577: RI1=0;
09A3 C2C8      2558            clr     _RI1
09A5           2559   ;        main.c:579: SCON1&=0b_0011_1111;
09A5 53C83F    2560            anl     _SCON1,#0x3F
09A8           2561   ;        main.c:580: c = SBUF1;
09A8 859282    2562            mov     dpl,_SBUF1
09AB           2563   ;        main.c:581: SFRPAGE = 0x00;
09AB 75A700    2564            mov     _SFRPAGE,#0x00
09AE           2565   ;        main.c:582: return (c);
09AE 22        2566            ret
09AF           2567   ;------------------------------------------------------------
09AF           2568   ;Allocation info for local variables in function 'getstr1'
09AF           2569   ;------------------------------------------------------------
09AF           2570   ;n                         Allocated with name '_getstr1_PARM_2'
09AF           2571   ;s                         Allocated to registers r2 r3 r4 
09AF           2572   ;c                         Allocated with name '_getstr1_c_1_140'
09AF           2573   ;cnt                       Allocated with name '_getstr1_cnt_1_140'
09AF           2574   ;------------------------------------------------------------
09AF           2575   ;        main.c:585: void getstr1 (char * s, unsigned char n)
09AF           2576   ;        -----------------------------------------
09AF           2577   ;         function getstr1
09AF           2578   ;        -----------------------------------------
09AF           2579   _getstr1:
09AF AA82      2580            mov     r2,dpl
09B1 AB83      2581            mov     r3,dph
09B3 ACF0      2582            mov     r4,b
09B5           2583   ;        main.c:591: while(1)
09B5 7D00      2584            mov     r5,#0x00
09B7 8A06      2585            mov     ar6,r2
09B9 8B07      2586            mov     ar7,r3
09BB 8C00      2587            mov     ar0,r4
09BD           2588   L018007?:
09BD           2589   ;        main.c:593: c=getchar1_with_timeout();
09BD C002      2590            push    ar2
09BF C003      2591            push    ar3
09C1 C004      2592            push    ar4
09C3 C005      2593            push    ar5
09C5 C006      2594            push    ar6
09C7 C007      2595            push    ar7
09C9 C000      2596            push    ar0
09CB 120000    2597            lcall   _getchar1_with_timeout
09CE A982      2598            mov     r1,dpl
09D0 D000      2599            pop     ar0
09D2 D007      2600            pop     ar7
09D4 D006      2601            pop     ar6
09D6 D005      2602            pop     ar5
09D8 D004      2603            pop     ar4
09DA D003      2604            pop     ar3
09DC D002      2605            pop     ar2
09DE           2606   ;        main.c:594: if(c=='\n')
09DE B90AF0    2607            cjne    r1,#0x0A,L018002?
09E1           2608   ;        main.c:596: *s=0;
09E1 8A82      2609            mov     dpl,r2
09E3 8B83      2610            mov     dph,r3
09E5 8CF0      2611            mov     b,r4
09E7 E4        2612            clr     a
09E8           2613   ;        main.c:597: return;
09E8 020000    2614            ljmp    __gptrput
09EB           2615   L018002?:
09EB           2616   ;        main.c:600: if (cnt<n)
09EB C3        2617            clr     c
09EC ED        2618            mov     a,r5
09ED 9550      2619            subb    a,_getstr1_PARM_2
09EF 5000      2620            jnc     L018004?
09F1           2621   ;        main.c:602: cnt++;
09F1 0D        2622            inc     r5
09F2           2623   ;        main.c:603: *s=c;
09F2 8E82      2624            mov     dpl,r6
09F4 8F83      2625            mov     dph,r7
09F6 88F0      2626            mov     b,r0
09F8 E9        2627            mov     a,r1
09F9 120000    2628            lcall   __gptrput
09FC A3        2629            inc     dptr
09FD AE82      2630            mov     r6,dpl
09FF AF83      2631            mov     r7,dph
0A01           2632   ;        main.c:604: s++;
0A01 8E02      2633            mov     ar2,r6
0A03 8F03      2634            mov     ar3,r7
0A05 8804      2635            mov     ar4,r0
0A07 8000      2636            sjmp    L018007?
0A09           2637   L018004?:
0A09           2638   ;        main.c:608: *s=0;
0A09 8A82      2639            mov     dpl,r2
0A0B 8B83      2640            mov     dph,r3
0A0D 8CF0      2641            mov     b,r4
0A0F E4        2642            clr     a
0A10           2643   ;        main.c:609: return;
0A10 020000    2644            ljmp    __gptrput
0A13           2645   ;------------------------------------------------------------
0A13           2646   ;Allocation info for local variables in function 'RXU1'
0A13           2647   ;------------------------------------------------------------
0A13           2648   ;------------------------------------------------------------
0A13           2649   ;        main.c:615: bit RXU1 (void)
0A13           2650   ;        -----------------------------------------
0A13           2651   ;         function RXU1
0A13           2652   ;        -----------------------------------------
0A13           2653   _RXU1:
0A13           2654   ;        main.c:618: SFRPAGE = 0x20;
0A13 75A720    2655            mov     _SFRPAGE,#0x20
0A16           2656   ;        main.c:619: mybit=RI1;
0A16 A2C8      2657            mov     c,_RI1
0A18           2658   ;        main.c:620: SFRPAGE = 0x00;
0A18 75A700    2659            mov     _SFRPAGE,#0x00
0A1B           2660   ;        main.c:621: return mybit;
0A1B 22        2661            ret
0A1C           2662   ;------------------------------------------------------------
0A1C           2663   ;Allocation info for local variables in function 'waitms_or_RI1'
0A1C           2664   ;------------------------------------------------------------
0A1C           2665   ;ms                        Allocated to registers r2 r3 
0A1C           2666   ;j                         Allocated with name '_waitms_or_RI1_j_1_148'
0A1C           2667   ;k                         Allocated with name '_waitms_or_RI1_k_1_148'
0A1C           2668   ;------------------------------------------------------------
0A1C           2669   ;        main.c:624: void waitms_or_RI1 (unsigned int ms)
0A1C           2670   ;        -----------------------------------------
0A1C           2671   ;         function waitms_or_RI1
0A1C           2672   ;        -----------------------------------------
0A1C           2673   _waitms_or_RI1:
0A1C AA82      2674            mov     r2,dpl
0A1E AB83      2675            mov     r3,dph
0A20           2676   ;        main.c:628: for(j=0; j<ms; j++)
0A20 7C00      2677            mov     r4,#0x00
0A22 7D00      2678            mov     r5,#0x00
0A24           2679   L020007?:
0A24 C3        2680            clr     c
0A25 EC        2681            mov     a,r4
0A26 9A        2682            subb    a,r2
0A27 ED        2683            mov     a,r5
0A28 9B        2684            subb    a,r3
0A29 5000      2685            jnc     L020011?
0A2B           2686   ;        main.c:630: for (k=0; k<4; k++)
0A2B 7E00      2687            mov     r6,#0x00
0A2D           2688   L020003?:
0A2D BE0430    2689            cjne    r6,#0x04,L020019?
0A30           2690   L020019?:
0A30 5000      2691            jnc     L020009?
0A32           2692   ;        main.c:632: if(RXU1()) return;
0A32 C002      2693            push    ar2
0A34 C003      2694            push    ar3
0A36 C004      2695            push    ar4
0A38 C005      2696            push    ar5
0A3A C006      2697            push    ar6
0A3C 120000    2698            lcall   _RXU1
0A3F E4        2699            clr     a
0A40 33        2700            rlc     a
0A41 D006      2701            pop     ar6
0A43 D005      2702            pop     ar5
0A45 D004      2703            pop     ar4
0A47 D003      2704            pop     ar3
0A49 D002      2705            pop     ar2
0A4B 6000      2706            jz      L020002?
0A4D 22        2707            ret
0A4E           2708   L020002?:
0A4E           2709   ;        main.c:633: Timer3us(250);
0A4E 7582FA    2710            mov     dpl,#0xFA
0A51 C002      2711            push    ar2
0A53 C003      2712            push    ar3
0A55 C004      2713            push    ar4
0A57 C005      2714            push    ar5
0A59 C006      2715            push    ar6
0A5B 120000    2716            lcall   _Timer3us
0A5E D006      2717            pop     ar6
0A60 D005      2718            pop     ar5
0A62 D004      2719            pop     ar4
0A64 D003      2720            pop     ar3
0A66 D002      2721            pop     ar2
0A68           2722   ;        main.c:630: for (k=0; k<4; k++)
0A68 0E        2723            inc     r6
0A69 8000      2724            sjmp    L020003?
0A6B           2725   L020009?:
0A6B           2726   ;        main.c:628: for(j=0; j<ms; j++)
0A6B 0C        2727            inc     r4
0A6C BC0070    2728            cjne    r4,#0x00,L020007?
0A6F 0D        2729            inc     r5
0A70 8000      2730            sjmp    L020007?
0A72           2731   L020011?:
0A72 22        2732            ret
0A73           2733   ;------------------------------------------------------------
0A73           2734   ;Allocation info for local variables in function 'SendATCommand'
0A73           2735   ;------------------------------------------------------------
0A73           2736   ;s                         Allocated to registers r2 r3 r4 
0A73           2737   ;------------------------------------------------------------
0A73           2738   ;        main.c:638: void SendATCommand (char * s)
0A73           2739   ;        -----------------------------------------
0A73           2740   ;         function SendATCommand
0A73           2741   ;        -----------------------------------------
0A73           2742   _SendATCommand:
0A73 AA82      2743            mov     r2,dpl
0A75 AB83      2744            mov     r3,dph
0A77 ACF0      2745            mov     r4,b
0A79           2746   ;        main.c:640: printf("Command: %s", s);
0A79 C002      2747            push    ar2
0A7B C003      2748            push    ar3
0A7D C004      2749            push    ar4
0A7F C002      2750            push    ar2
0A81 C003      2751            push    ar3
0A83 C004      2752            push    ar4
0A85 74F0      2753            mov     a,#__str_4
0A87 C0E0      2754            push    acc
0A89 74E5      2755            mov     a,#(__str_4 >> 8)
0A8B C0E0      2756            push    acc
0A8D 7480      2757            mov     a,#0x80
0A8F C0E0      2758            push    acc
0A91 120000    2759            lcall   _printf
0A94 E581      2760            mov     a,sp
0A96 24FA      2761            add     a,#0xfa
0A98 F581      2762            mov     sp,a
0A9A           2763   ;        main.c:641: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0A9A C2A0      2764            clr     _P2_0
0A9C           2765   ;        main.c:642: waitms(5);
0A9C 900005    2766            mov     dptr,#0x0005
0A9F 120000    2767            lcall   _waitms
0AA2 D004      2768            pop     ar4
0AA4 D003      2769            pop     ar3
0AA6 D002      2770            pop     ar2
0AA8           2771   ;        main.c:643: sendstr1(s);
0AA8 8A82      2772            mov     dpl,r2
0AAA 8B83      2773            mov     dph,r3
0AAC 8CF0      2774            mov     b,r4
0AAE 120000    2775            lcall   _sendstr1
0AB1           2776   ;        main.c:644: getstr1(buff, sizeof(buff)-1);
0AB1 755013    2777            mov     _getstr1_PARM_2,#0x13
0AB4 9053C0    2778            mov     dptr,#_buff
0AB7 75F040    2779            mov     b,#0x40
0ABA 120000    2780            lcall   _getstr1
0ABD           2781   ;        main.c:645: waitms(10);
0ABD 90000A    2782            mov     dptr,#0x000A
0AC0 120000    2783            lcall   _waitms
0AC3           2784   ;        main.c:646: P2_0=1; // 'set' pin to 1 is normal operation mode.
0AC3 D2A0      2785            setb    _P2_0
0AC5           2786   ;        main.c:647: printf("Response: %s\r\n", buff);
0AC5 74C0      2787            mov     a,#_buff
0AC7 C0E0      2788            push    acc
0AC9 7453      2789            mov     a,#(_buff >> 8)
0ACB C0E0      2790            push    acc
0ACD 7440      2791            mov     a,#0x40
0ACF C0E0      2792            push    acc
0AD1 7430      2793            mov     a,#__str_5
0AD3 C0E0      2794            push    acc
0AD5 74E6      2795            mov     a,#(__str_5 >> 8)
0AD7 C0E0      2796            push    acc
0AD9 7480      2797            mov     a,#0x80
0ADB C0E0      2798            push    acc
0ADD 120000    2799            lcall   _printf
0AE0 E581      2800            mov     a,sp
0AE2 24FA      2801            add     a,#0xfa
0AE4 F581      2802            mov     sp,a
0AE6 22        2803            ret
0AE7           2804   ;------------------------------------------------------------
0AE7           2805   ;Allocation info for local variables in function 'ReceptionOff'
0AE7           2806   ;------------------------------------------------------------
0AE7           2807   ;------------------------------------------------------------
0AE7           2808   ;        main.c:650: void ReceptionOff (void)
0AE7           2809   ;        -----------------------------------------
0AE7           2810   ;         function ReceptionOff
0AE7           2811   ;        -----------------------------------------
0AE7           2812   _ReceptionOff:
0AE7           2813   ;        main.c:652: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0AE7 C2A0      2814            clr     _P2_0
0AE9           2815   ;        main.c:653: waitms(10);
0AE9 90000A    2816            mov     dptr,#0x000A
0AEC 120000    2817            lcall   _waitms
0AEF           2818   ;        main.c:654: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0AEF 90E670    2819            mov     dptr,#__str_6
0AF2 75F080    2820            mov     b,#0x80
0AF5 120000    2821            lcall   _sendstr1
0AF8           2822   ;        main.c:655: waitms(10);
0AF8 90000A    2823            mov     dptr,#0x000A
0AFB 120000    2824            lcall   _waitms
0AFE           2825   ;        main.c:657: SCON1&=0b_0011_1111;
0AFE 53C83F    2826            anl     _SCON1,#0x3F
0B01           2827   ;        main.c:658: P2_0=1; // 'set' pin to 1 is normal operation mode.
0B01 D2A0      2828            setb    _P2_0
0B03 22        2829            ret
0B04           2830   ;------------------------------------------------------------
0B04           2831   ;Allocation info for local variables in function 'Set_Pin_Output'
0B04           2832   ;------------------------------------------------------------
0B04           2833   ;pin                       Allocated to registers r2 
0B04           2834   ;mask                      Allocated to registers r3 
0B04           2835   ;------------------------------------------------------------
0B04           2836   ;        main.c:661: void Set_Pin_Output (unsigned char pin)
0B04           2837   ;        -----------------------------------------
0B04           2838   ;         function Set_Pin_Output
0B04           2839   ;        -----------------------------------------
0B04           2840   _Set_Pin_Output:
0B04 AA82      2841            mov     r2,dpl
0B06           2842   ;        main.c:665: mask=(1<<(pin&0x7));
0B06 7407      2843            mov     a,#0x07
0B08 5A        2844            anl     a,r2
0B09 F5F0      2845            mov     b,a
0B0B 05F0      2846            inc     b
0B0D 7401      2847            mov     a,#0x01
0B0F 8000      2848            sjmp    L023011?
0B11           2849   L023009?:
0B11 25E0      2850            add     a,acc
0B13           2851   L023011?:
0B13 D5F0F0    2852            djnz    b,L023009?
0B16 FB        2853            mov     r3,a
0B17           2854   ;        main.c:666: switch(pin/0x10)
0B17 EA        2855            mov     a,r2
0B18 C4        2856            swap    a
0B19 540F      2857            anl     a,#0x0f
0B1B FA        2858            mov  r2,a
0B1C 24FC      2859            add     a,#0xff - 0x03
0B1E 4000      2860            jc      L023006?
0B20 EA        2861            mov     a,r2
0B21 2A        2862            add     a,r2
0B22 2A        2863            add     a,r2
0B23 90E770    2864            mov     dptr,#L023013?
0B26 73        2865            jmp     @a+dptr
0B27           2866   L023013?:
0B27 020000    2867            ljmp    L023001?
0B2A 020000    2868            ljmp    L023002?
0B2D 020000    2869            ljmp    L023003?
0B30 020000    2870            ljmp    L023004?
0B33           2871   ;        main.c:668: case 0: P0MDOUT |= mask; break;
0B33           2872   L023001?:
0B33 EB        2873            mov     a,r3
0B34 42A4      2874            orl     _P0MDOUT,a
0B36           2875   ;        main.c:669: case 1: P1MDOUT |= mask; break;
0B36 22        2876            ret
0B37           2877   L023002?:
0B37 EB        2878            mov     a,r3
0B38 42A5      2879            orl     _P1MDOUT,a
0B3A           2880   ;        main.c:670: case 2: P2MDOUT |= mask; break; 
0B3A 22        2881            ret
0B3B           2882   L023003?:
0B3B EB        2883            mov     a,r3
0B3C 42A6      2884            orl     _P2MDOUT,a
0B3E           2885   ;        main.c:671: case 3: P3MDOUT |= mask; break; 
0B3E 22        2886            ret
0B3F           2887   L023004?:
0B3F EB        2888            mov     a,r3
0B40 429C      2889            orl     _P3MDOUT,a
0B42           2890   ;        main.c:672: }   
0B42           2891   L023006?:
0B42 22        2892            ret
0B43           2893   ;------------------------------------------------------------
0B43           2894   ;Allocation info for local variables in function 'Set_Pin_Input'
0B43           2895   ;------------------------------------------------------------
0B43           2896   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_159'
0B43           2897   ;pin                       Allocated to registers r2 
0B43           2898   ;------------------------------------------------------------
0B43           2899   ;        main.c:675: void Set_Pin_Input (unsigned char pin)
0B43           2900   ;        -----------------------------------------
0B43           2901   ;         function Set_Pin_Input
0B43           2902   ;        -----------------------------------------
0B43           2903   _Set_Pin_Input:
0B43 AA82      2904            mov     r2,dpl
0B45           2905   ;        main.c:679: mask=(1<<(pin&0x7));
0B45 7407      2906            mov     a,#0x07
0B47 5A        2907            anl     a,r2
0B48 F5F0      2908            mov     b,a
0B4A 05F0      2909            inc     b
0B4C 7401      2910            mov     a,#0x01
0B4E 8000      2911            sjmp    L024011?
0B50           2912   L024009?:
0B50 25E0      2913            add     a,acc
0B52           2914   L024011?:
0B52 D5F0F0    2915            djnz    b,L024009?
0B55           2916   ;        main.c:680: mask=~mask;
0B55 F4        2917            cpl     a
0B56 FB        2918            mov     r3,a
0B57           2919   ;        main.c:681: switch(pin/0x10)
0B57 EA        2920            mov     a,r2
0B58 C4        2921            swap    a
0B59 540F      2922            anl     a,#0x0f
0B5B FA        2923            mov  r2,a
0B5C 24FC      2924            add     a,#0xff - 0x03
0B5E 4000      2925            jc      L024006?
0B60 EA        2926            mov     a,r2
0B61 2A        2927            add     a,r2
0B62 2A        2928            add     a,r2
0B63 90E970    2929            mov     dptr,#L024013?
0B66 73        2930            jmp     @a+dptr
0B67           2931   L024013?:
0B67 020000    2932            ljmp    L024001?
0B6A 020000    2933            ljmp    L024002?
0B6D 020000    2934            ljmp    L024003?
0B70 020000    2935            ljmp    L024004?
0B73           2936   ;        main.c:683: case 0: P0MDOUT &= mask; break;
0B73           2937   L024001?:
0B73 EB        2938            mov     a,r3
0B74 52A4      2939            anl     _P0MDOUT,a
0B76           2940   ;        main.c:684: case 1: P1MDOUT &= mask; break;
0B76 22        2941            ret
0B77           2942   L024002?:
0B77 EB        2943            mov     a,r3
0B78 52A5      2944            anl     _P1MDOUT,a
0B7A           2945   ;        main.c:685: case 2: P2MDOUT &= mask; break; 
0B7A 22        2946            ret
0B7B           2947   L024003?:
0B7B EB        2948            mov     a,r3
0B7C 52A6      2949            anl     _P2MDOUT,a
0B7E           2950   ;        main.c:686: case 3: P3MDOUT &= mask; break; 
0B7E 22        2951            ret
0B7F           2952   L024004?:
0B7F EB        2953            mov     a,r3
0B80 529C      2954            anl     _P3MDOUT,a
0B82           2955   ;        main.c:687: }   
0B82           2956   L024006?:
0B82 22        2957            ret
0B83           2958   ;------------------------------------------------------------
0B83           2959   ;Allocation info for local variables in function 'InitADC'
0B83           2960   ;------------------------------------------------------------
0B83           2961   ;------------------------------------------------------------
0B83           2962   ;        main.c:690: void InitADC (void)
0B83           2963   ;        -----------------------------------------
0B83           2964   ;         function InitADC
0B83           2965   ;        -----------------------------------------
0B83           2966   _InitADC:
0B83           2967   ;        main.c:692: SFRPAGE = 0x00;
0B83 75A700    2968            mov     _SFRPAGE,#0x00
0B86           2969   ;        main.c:693: ADEN=0; // Disable ADC
0B86 C2EF      2970            clr     _ADEN
0B88           2971   ;        main.c:698: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0B88 75B280    2972            mov     _ADC0CN1,#0x80
0B8B           2973   ;        main.c:702: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0B8B 75BC20    2974            mov     _ADC0CF0,#0x20
0B8E           2975   ;        main.c:706: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
0B8E 75B91E    2976            mov     _ADC0CF1,#0x1E
0B91           2977   ;        main.c:715: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0B91 75E800    2978            mov     _ADC0CN0,#0x00
0B94           2979   ;        main.c:720: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0B94 75DF3F    2980            mov     _ADC0CF2,#0x3F
0B97           2981   ;        main.c:724: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0B97 75B300    2982            mov     _ADC0CN2,#0x00
0B9A           2983   ;        main.c:726: ADEN=1; // Enable ADC
0B9A D2EF      2984            setb    _ADEN
0B9C 22        2985            ret
0B9D           2986   ;------------------------------------------------------------
0B9D           2987   ;Allocation info for local variables in function 'InitPinADC'
0B9D           2988   ;------------------------------------------------------------
0B9D           2989   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
0B9D           2990   ;portno                    Allocated to registers r2 
0B9D           2991   ;mask                      Allocated to registers r3 
0B9D           2992   ;------------------------------------------------------------
0B9D           2993   ;        main.c:729: void InitPinADC (unsigned char portno, unsigned char pin_num)
0B9D           2994   ;        -----------------------------------------
0B9D           2995   ;         function InitPinADC
0B9D           2996   ;        -----------------------------------------
0B9D           2997   _InitPinADC:
0B9D AA82      2998            mov     r2,dpl
0B9F           2999   ;        main.c:733: mask=1<<pin_num;
0B9F 85E0F0    3000            mov     b,_InitPinADC_PARM_2
0BA2 05F0      3001            inc     b
0BA4 7401      3002            mov     a,#0x01
0BA6 8000      3003            sjmp    L026013?
0BA8           3004   L026011?:
0BA8 25E0      3005            add     a,acc
0BAA           3006   L026013?:
0BAA D5F0F0    3007            djnz    b,L026011?
0BAD FB        3008            mov     r3,a
0BAE           3009   ;        main.c:735: SFRPAGE = 0x20;
0BAE 75A720    3010            mov     _SFRPAGE,#0x20
0BB1           3011   ;        main.c:736: switch (portno)
0BB1 BA0030    3012            cjne    r2,#0x00,L026014?
0BB4 8000      3013            sjmp    L026001?
0BB6           3014   L026014?:
0BB6 BA01B0    3015            cjne    r2,#0x01,L026015?
0BB9 8000      3016            sjmp    L026002?
0BBB           3017   L026015?:
0BBB           3018   ;        main.c:738: case 0:
0BBB BA0230    3019            cjne    r2,#0x02,L026005?
0BBE 8000      3020            sjmp    L026003?
0BC0           3021   L026001?:
0BC0           3022   ;        main.c:739: P0MDIN &= (~mask); // Set pin as analog input
0BC0 EB        3023            mov     a,r3
0BC1 F4        3024            cpl     a
0BC2 FA        3025            mov     r2,a
0BC3 52F1      3026            anl     _P0MDIN,a
0BC5           3027   ;        main.c:740: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0BC5 EB        3028            mov     a,r3
0BC6 42D4      3029            orl     _P0SKIP,a
0BC8           3030   ;        main.c:741: break;
0BC8           3031   ;        main.c:742: case 1:
0BC8 8000      3032            sjmp    L026005?
0BCA           3033   L026002?:
0BCA           3034   ;        main.c:743: P1MDIN &= (~mask); // Set pin as analog input
0BCA EB        3035            mov     a,r3
0BCB F4        3036            cpl     a
0BCC FA        3037            mov     r2,a
0BCD 52F2      3038            anl     _P1MDIN,a
0BCF           3039   ;        main.c:744: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0BCF EB        3040            mov     a,r3
0BD0 42D5      3041            orl     _P1SKIP,a
0BD2           3042   ;        main.c:745: break;
0BD2           3043   ;        main.c:746: case 2:
0BD2 8000      3044            sjmp    L026005?
0BD4           3045   L026003?:
0BD4           3046   ;        main.c:747: P2MDIN &= (~mask); // Set pin as analog input
0BD4 EB        3047            mov     a,r3
0BD5 F4        3048            cpl     a
0BD6 FA        3049            mov     r2,a
0BD7 52F3      3050            anl     _P2MDIN,a
0BD9           3051   ;        main.c:748: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0BD9 EB        3052            mov     a,r3
0BDA 42CC      3053            orl     _P2SKIP,a
0BDC           3054   ;        main.c:752: }
0BDC           3055   L026005?:
0BDC           3056   ;        main.c:753: SFRPAGE = 0x00;
0BDC 75A700    3057            mov     _SFRPAGE,#0x00
0BDF 22        3058            ret
0BE0           3059   ;------------------------------------------------------------
0BE0           3060   ;Allocation info for local variables in function 'ADC_at_Pin'
0BE0           3061   ;------------------------------------------------------------
0BE0           3062   ;pin                       Allocated to registers 
0BE0           3063   ;------------------------------------------------------------
0BE0           3064   ;        main.c:756: unsigned int ADC_at_Pin(unsigned char pin)
0BE0           3065   ;        -----------------------------------------
0BE0           3066   ;         function ADC_at_Pin
0BE0           3067   ;        -----------------------------------------
0BE0           3068   _ADC_at_Pin:
0BE0 8582BB    3069            mov     _ADC0MX,dpl
0BE3           3070   ;        main.c:759: ADINT = 0;
0BE3 C2ED      3071            clr     _ADINT
0BE5           3072   ;        main.c:760: ADBUSY = 1;     // Convert voltage at the pin
0BE5 D2EC      3073            setb    _ADBUSY
0BE7           3074   ;        main.c:761: while (!ADINT); // Wait for conversion to complete
0BE7           3075   L027001?:
0BE7 30EDB0    3076            jnb     _ADINT,L027001?
0BEA           3077   ;        main.c:762: return (ADC0);
0BEA 85BD82    3078            mov     dpl,_ADC0
0BED 85BE83    3079            mov     dph,(_ADC0 >> 8)
0BF0 22        3080            ret
0BF1           3081   ;------------------------------------------------------------
0BF1           3082   ;Allocation info for local variables in function 'ReadHX711'
0BF1           3083   ;------------------------------------------------------------
0BF1           3084   ;dataa                     Allocated with name '_ReadHX711_dataa_1_169'
0BF1           3085   ;i                         Allocated with name '_ReadHX711_i_1_169'
0BF1           3086   ;ans                       Allocated with name '_ReadHX711_ans_1_169'
0BF1           3087   ;j                         Allocated with name '_ReadHX711_j_1_169'
0BF1           3088   ;------------------------------------------------------------
0BF1           3089   ;        main.c:765: int ReadHX711(void) {
0BF1           3090   ;        -----------------------------------------
0BF1           3091   ;         function ReadHX711
0BF1           3092   ;        -----------------------------------------
0BF1           3093   _ReadHX711:
0BF1           3094   ;        main.c:766: xdata unsigned long dataa = 0;
0BF1 90CDA0    3095            mov     dptr,#_ReadHX711_dataa_1_169
0BF4 E4        3096            clr     a
0BF5 F0        3097            movx    @dptr,a
0BF6 A3        3098            inc     dptr
0BF7 F0        3099            movx    @dptr,a
0BF8 A3        3100            inc     dptr
0BF9 F0        3101            movx    @dptr,a
0BFA A3        3102            inc     dptr
0BFB F0        3103            movx    @dptr,a
0BFC           3104   ;        main.c:771: PD_SCK = 0;
0BFC C2A5      3105            clr     _P2_5
0BFE           3106   ;        main.c:773: for (i = 0; i < 24; i++) {
0BFE 7A00      3107            mov     r2,#0x00
0C00           3108   L028011?:
0C00 C3        3109            clr     c
0C01 EA        3110            mov     a,r2
0C02 6480      3111            xrl     a,#0x80
0C04 9498      3112            subb    a,#0x98
0C06 4000      3113            jc      L028037?
0C08 020000    3114            ljmp    L028014?
0C0B           3115   L028037?:
0C0B           3116   ;        main.c:774: PD_SCK = 1;
0C0B D2A5      3117            setb    _P2_5
0C0D           3118   ;        main.c:775: for (j = 0; j < 4; j++);
0C0D 90CDF0    3119            mov     dptr,#_ReadHX711_j_1_169
0C10 E4        3120            clr     a
0C11 F0        3121            movx    @dptr,a
0C12           3122   L028003?:
0C12 90CDF0    3123            mov     dptr,#_ReadHX711_j_1_169
0C15 E0        3124            movx    a,@dptr
0C16 FB        3125            mov     r3,a
0C17 C3        3126            clr     c
0C18 6480      3127            xrl     a,#0x80
0C1A 9484      3128            subb    a,#0x84
0C1C 5000      3129            jnc     L028006?
0C1E 90CDF0    3130            mov     dptr,#_ReadHX711_j_1_169
0C21 E0        3131            movx    a,@dptr
0C22 2401      3132            add     a,#0x01
0C24 F0        3133            movx    @dptr,a
0C25 8000      3134            sjmp    L028003?
0C27           3135   L028006?:
0C27           3136   ;        main.c:776: dataa = dataa << 1;
0C27 90CDA0    3137            mov     dptr,#_ReadHX711_dataa_1_169
0C2A E0        3138            movx    a,@dptr
0C2B FB        3139            mov     r3,a
0C2C A3        3140            inc     dptr
0C2D E0        3141            movx    a,@dptr
0C2E FC        3142            mov     r4,a
0C2F A3        3143            inc     dptr
0C30 E0        3144            movx    a,@dptr
0C31 FD        3145            mov     r5,a
0C32 A3        3146            inc     dptr
0C33 E0        3147            movx    a,@dptr
0C34 FE        3148            mov     r6,a
0C35 EB        3149            mov     a,r3
0C36 2B        3150            add     a,r3
0C37 FB        3151            mov     r3,a
0C38 EC        3152            mov     a,r4
0C39 33        3153            rlc     a
0C3A FC        3154            mov     r4,a
0C3B ED        3155            mov     a,r5
0C3C 33        3156            rlc     a
0C3D FD        3157            mov     r5,a
0C3E EE        3158            mov     a,r6
0C3F 33        3159            rlc     a
0C40 FE        3160            mov     r6,a
0C41 90CDA0    3161            mov     dptr,#_ReadHX711_dataa_1_169
0C44 EB        3162            mov     a,r3
0C45 F0        3163            movx    @dptr,a
0C46 A3        3164            inc     dptr
0C47 EC        3165            mov     a,r4
0C48 F0        3166            movx    @dptr,a
0C49 A3        3167            inc     dptr
0C4A ED        3168            mov     a,r5
0C4B F0        3169            movx    @dptr,a
0C4C A3        3170            inc     dptr
0C4D EE        3171            mov     a,r6
0C4E F0        3172            movx    @dptr,a
0C4F           3173   ;        main.c:777: if (DOUT) {
0C4F 30A630    3174            jnb     _P2_6,L028002?
0C52           3175   ;        main.c:778: dataa |= 0x01;
0C52 90CDA0    3176            mov     dptr,#_ReadHX711_dataa_1_169
0C55 E0        3177            movx    a,@dptr
0C56 FB        3178            mov     r3,a
0C57 A3        3179            inc     dptr
0C58 E0        3180            movx    a,@dptr
0C59 FC        3181            mov     r4,a
0C5A A3        3182            inc     dptr
0C5B E0        3183            movx    a,@dptr
0C5C FD        3184            mov     r5,a
0C5D A3        3185            inc     dptr
0C5E E0        3186            movx    a,@dptr
0C5F FE        3187            mov     r6,a
0C60 90CDA0    3188            mov     dptr,#_ReadHX711_dataa_1_169
0C63 7401      3189            mov     a,#0x01
0C65 4B        3190            orl     a,r3
0C66 F0        3191            movx    @dptr,a
0C67 A3        3192            inc     dptr
0C68 EC        3193            mov     a,r4
0C69 F0        3194            movx    @dptr,a
0C6A A3        3195            inc     dptr
0C6B ED        3196            mov     a,r5
0C6C F0        3197            movx    @dptr,a
0C6D A3        3198            inc     dptr
0C6E EE        3199            mov     a,r6
0C6F F0        3200            movx    @dptr,a
0C70           3201   L028002?:
0C70           3202   ;        main.c:780: PD_SCK = 0;
0C70 C2A5      3203            clr     _P2_5
0C72           3204   ;        main.c:781: for (j = 0; j < 4; j++);
0C72 90CDF0    3205            mov     dptr,#_ReadHX711_j_1_169
0C75 E4        3206            clr     a
0C76 F0        3207            movx    @dptr,a
0C77           3208   L028007?:
0C77 90CDF0    3209            mov     dptr,#_ReadHX711_j_1_169
0C7A E0        3210            movx    a,@dptr
0C7B FB        3211            mov     r3,a
0C7C C3        3212            clr     c
0C7D 6480      3213            xrl     a,#0x80
0C7F 9484      3214            subb    a,#0x84
0C81 5000      3215            jnc     L028013?
0C83 90CDF0    3216            mov     dptr,#_ReadHX711_j_1_169
0C86 E0        3217            movx    a,@dptr
0C87 2401      3218            add     a,#0x01
0C89 F0        3219            movx    @dptr,a
0C8A 8000      3220            sjmp    L028007?
0C8C           3221   L028013?:
0C8C           3222   ;        main.c:773: for (i = 0; i < 24; i++) {
0C8C 0A        3223            inc     r2
0C8D 020000    3224            ljmp    L028011?
0C90           3225   L028014?:
0C90           3226   ;        main.c:784: PD_SCK = 1;
0C90 D2A5      3227            setb    _P2_5
0C92           3228   ;        main.c:785: for (j = 0; j < 4; j++);
0C92 90CDF0    3229            mov     dptr,#_ReadHX711_j_1_169
0C95 E4        3230            clr     a
0C96 F0        3231            movx    @dptr,a
0C97           3232   L028015?:
0C97 90CDF0    3233            mov     dptr,#_ReadHX711_j_1_169
0C9A E0        3234            movx    a,@dptr
0C9B FA        3235            mov     r2,a
0C9C C3        3236            clr     c
0C9D 6480      3237            xrl     a,#0x80
0C9F 9484      3238            subb    a,#0x84
0CA1 5000      3239            jnc     L028018?
0CA3 90CDF0    3240            mov     dptr,#_ReadHX711_j_1_169
0CA6 E0        3241            movx    a,@dptr
0CA7 2401      3242            add     a,#0x01
0CA9 F0        3243            movx    @dptr,a
0CAA 8000      3244            sjmp    L028015?
0CAC           3245   L028018?:
0CAC           3246   ;        main.c:786: PD_SCK = 0;
0CAC C2A5      3247            clr     _P2_5
0CAE           3248   ;        main.c:787: for (j = 0; j < 4; j++);
0CAE 90CDF0    3249            mov     dptr,#_ReadHX711_j_1_169
0CB1 E4        3250            clr     a
0CB2 F0        3251            movx    @dptr,a
0CB3           3252   L028019?:
0CB3 90CDF0    3253            mov     dptr,#_ReadHX711_j_1_169
0CB6 E0        3254            movx    a,@dptr
0CB7 FA        3255            mov     r2,a
0CB8 C3        3256            clr     c
0CB9 6480      3257            xrl     a,#0x80
0CBB 9484      3258            subb    a,#0x84
0CBD 5000      3259            jnc     L028022?
0CBF 90CDF0    3260            mov     dptr,#_ReadHX711_j_1_169
0CC2 E0        3261            movx    a,@dptr
0CC3 2401      3262            add     a,#0x01
0CC5 F0        3263            movx    @dptr,a
0CC6 8000      3264            sjmp    L028019?
0CC8           3265   L028022?:
0CC8           3266   ;        main.c:788: ans = (dataa % 1000000)/10;
0CC8 90CDA0    3267            mov     dptr,#_ReadHX711_dataa_1_169
0CCB E0        3268            movx    a,@dptr
0CCC FA        3269            mov     r2,a
0CCD A3        3270            inc     dptr
0CCE E0        3271            movx    a,@dptr
0CCF FB        3272            mov     r3,a
0CD0 A3        3273            inc     dptr
0CD1 E0        3274            movx    a,@dptr
0CD2 FC        3275            mov     r4,a
0CD3 A3        3276            inc     dptr
0CD4 E0        3277            movx    a,@dptr
0CD5 FD        3278            mov     r5,a
0CD6 750040    3279            mov     __modulong_PARM_2,#0x40
0CD9 750142    3280            mov     (__modulong_PARM_2 + 1),#0x42
0CDC 75020F    3281            mov     (__modulong_PARM_2 + 2),#0x0F
0CDF 750300    3282            mov     (__modulong_PARM_2 + 3),#0x00
0CE2 8A82      3283            mov     dpl,r2
0CE4 8B83      3284            mov     dph,r3
0CE6 8CF0      3285            mov     b,r4
0CE8 ED        3286            mov     a,r5
0CE9 120000    3287            lcall   __modulong
0CEC AA82      3288            mov     r2,dpl
0CEE AB83      3289            mov     r3,dph
0CF0 ACF0      3290            mov     r4,b
0CF2 FD        3291            mov     r5,a
0CF3 75000A    3292            mov     __divulong_PARM_2,#0x0A
0CF6 E4        3293            clr     a
0CF7 F501      3294            mov     (__divulong_PARM_2 + 1),a
0CF9 F502      3295            mov     (__divulong_PARM_2 + 2),a
0CFB F503      3296            mov     (__divulong_PARM_2 + 3),a
0CFD 8A82      3297            mov     dpl,r2
0CFF 8B83      3298            mov     dph,r3
0D01 8CF0      3299            mov     b,r4
0D03 ED        3300            mov     a,r5
0D04           3301   ;        main.c:789: return ans;
0D04 020000    3302            ljmp    __divulong
0D07           3303   ;------------------------------------------------------------
0D07           3304   ;Allocation info for local variables in function 'Timer5_ISR'
0D07           3305   ;------------------------------------------------------------
0D07           3306   ;------------------------------------------------------------
0D07           3307   ;        main.c:792: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0D07           3308   ;        -----------------------------------------
0D07           3309   ;         function Timer5_ISR
0D07           3310   ;        -----------------------------------------
0D07           3311   _Timer5_ISR:
0D07 C090      3312            push    bits
0D09 C0E0      3313            push    acc
0D0B C0F0      3314            push    b
0D0D C082      3315            push    dpl
0D0F C083      3316            push    dph
0D11 C002      3317            push    (0+2)
0D13 C003      3318            push    (0+3)
0D15 C004      3319            push    (0+4)
0D17 C005      3320            push    (0+5)
0D19 C006      3321            push    (0+6)
0D1B C007      3322            push    (0+7)
0D1D C000      3323            push    (0+0)
0D1F C001      3324            push    (0+1)
0D21 C0D0      3325            push    psw
0D23 75D000    3326            mov     psw,#0x00
0D26           3327   ;        main.c:794: SFRPAGE=0x10;
0D26 75A710    3328            mov     _SFRPAGE,#0x10
0D29           3329   ;        main.c:795: TF5H = 0; // Clear Timer5 interrupt flag
0D29 C2C7      3330            clr     _TF5H
0D2B           3331   ;        main.c:796: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0D2B 75D2C4    3332            mov     _TMR5RL,#0xC4
0D2E 75D3FF    3333            mov     (_TMR5RL >> 8),#0xFF
0D31           3334   ;        main.c:798: fre_mea_count++;
0D31 904D00    3335            mov     dptr,#_fre_mea_count
0D34 E0        3336            movx    a,@dptr
0D35 2401      3337            add     a,#0x01
0D37 F0        3338            movx    @dptr,a
0D38 A3        3339            inc     dptr
0D39 E0        3340            movx    a,@dptr
0D3A 3400      3341            addc    a,#0x00
0D3C F0        3342            movx    @dptr,a
0D3D           3343   ;        main.c:799: if(fre_mea_count == 1000){
0D3D 904D00    3344            mov     dptr,#_fre_mea_count
0D40 E0        3345            movx    a,@dptr
0D41 FA        3346            mov     r2,a
0D42 A3        3347            inc     dptr
0D43 E0        3348            movx    a,@dptr
0D44 FB        3349            mov     r3,a
0D45 BAE830    3350            cjne    r2,#0xE8,L029004?
0D48 BB0330    3351            cjne    r3,#0x03,L029004?
0D4B           3352   ;        main.c:800: fre_mea_count = 0;
0D4B 904D00    3353            mov     dptr,#_fre_mea_count
0D4E E4        3354            clr     a
0D4F F0        3355            movx    @dptr,a
0D50 A3        3356            inc     dptr
0D51 F0        3357            movx    @dptr,a
0D52           3358   ;        main.c:801: if(mea_yes) freq100 = get_freq();
0D52 904BB0    3359            mov     dptr,#_mea_yes
0D55 E0        3360            movx    a,@dptr
0D56 FA        3361            mov     r2,a
0D57 6000      3362            jz      L029004?
0D59 120000    3363            lcall   _get_freq
0D5C AA82      3364            mov     r2,dpl
0D5E AB83      3365            mov     r3,dph
0D60 905380    3366            mov     dptr,#_freq100
0D63 EA        3367            mov     a,r2
0D64 F0        3368            movx    @dptr,a
0D65 A3        3369            inc     dptr
0D66 EB        3370            mov     a,r3
0D67 F0        3371            movx    @dptr,a
0D68 EB        3372            mov     a,r3
0D69 33        3373            rlc     a
0D6A 95E0      3374            subb    a,acc
0D6C A3        3375            inc     dptr
0D6D F0        3376            movx    @dptr,a
0D6E A3        3377            inc     dptr
0D6F F0        3378            movx    @dptr,a
0D70           3379   L029004?:
0D70           3380   ;        main.c:804: weight_mea_count++;
0D70 904CC0    3381            mov     dptr,#_weight_mea_count
0D73 E0        3382            movx    a,@dptr
0D74 2401      3383            add     a,#0x01
0D76 F0        3384            movx    @dptr,a
0D77 A3        3385            inc     dptr
0D78 E0        3386            movx    a,@dptr
0D79 3400      3387            addc    a,#0x00
0D7B F0        3388            movx    @dptr,a
0D7C           3389   ;        main.c:805: if(weight_mea_count == 20000){
0D7C 904CC0    3390            mov     dptr,#_weight_mea_count
0D7F E0        3391            movx    a,@dptr
0D80 FA        3392            mov     r2,a
0D81 A3        3393            inc     dptr
0D82 E0        3394            movx    a,@dptr
0D83 FB        3395            mov     r3,a
0D84 BA20B0    3396            cjne    r2,#0x20,L029008?
0D87 BB4EB0    3397            cjne    r3,#0x4E,L029008?
0D8A           3398   ;        main.c:806: weight_mea_count = 0;
0D8A 904CC0    3399            mov     dptr,#_weight_mea_count
0D8D E4        3400            clr     a
0D8E F0        3401            movx    @dptr,a
0D8F A3        3402            inc     dptr
0D90 F0        3403            movx    @dptr,a
0D91           3404   ;        main.c:807: if(mea_yes) weight = ReadHX711();
0D91 904BB0    3405            mov     dptr,#_mea_yes
0D94 E0        3406            movx    a,@dptr
0D95 FA        3407            mov     r2,a
0D96 6000      3408            jz      L029008?
0D98 120000    3409            lcall   _ReadHX711
0D9B E582      3410            mov     a,dpl
0D9D 8583F0    3411            mov     b,dph
0DA0 904B70    3412            mov     dptr,#_weight
0DA3 F0        3413            movx    @dptr,a
0DA4 A3        3414            inc     dptr
0DA5 E5F0      3415            mov     a,b
0DA7 F0        3416            movx    @dptr,a
0DA8           3417   L029008?:
0DA8           3418   ;        main.c:810: pwm_counter++; 
0DA8 905000    3419            mov     dptr,#_pwm_counter
0DAB E0        3420            movx    a,@dptr
0DAC 2401      3421            add     a,#0x01
0DAE F0        3422            movx    @dptr,a
0DAF A3        3423            inc     dptr
0DB0 E0        3424            movx    a,@dptr
0DB1 3400      3425            addc    a,#0x00
0DB3 F0        3426            movx    @dptr,a
0DB4           3427   ;        main.c:811: if (pwm_counter == 100){
0DB4 905000    3428            mov     dptr,#_pwm_counter
0DB7 E0        3429            movx    a,@dptr
0DB8 FA        3430            mov     r2,a
0DB9 A3        3431            inc     dptr
0DBA E0        3432            movx    a,@dptr
0DBB FB        3433            mov     r3,a
0DBC BA64F0    3434            cjne    r2,#0x64,L029010?
0DBF BB00F0    3435            cjne    r3,#0x00,L029010?
0DC2           3436   ;        main.c:812: pwm_counter = 0; 
0DC2 905000    3437            mov     dptr,#_pwm_counter
0DC5 E4        3438            clr     a
0DC6 F0        3439            movx    @dptr,a
0DC7 A3        3440            inc     dptr
0DC8 F0        3441            movx    @dptr,a
0DC9           3442   L029010?:
0DC9           3443   ;        main.c:815: if (pwm_right > pwm_counter){
0DC9 904F40    3444            mov     dptr,#_pwm_right
0DCC E0        3445            movx    a,@dptr
0DCD FA        3446            mov     r2,a
0DCE 905000    3447            mov     dptr,#_pwm_counter
0DD1 E0        3448            movx    a,@dptr
0DD2 FB        3449            mov     r3,a
0DD3 A3        3450            inc     dptr
0DD4 E0        3451            movx    a,@dptr
0DD5 FC        3452            mov     r4,a
0DD6 7D00      3453            mov     r5,#0x00
0DD8 C3        3454            clr     c
0DD9 EB        3455            mov     a,r3
0DDA 9A        3456            subb    a,r2
0DDB EC        3457            mov     a,r4
0DDC 9D        3458            subb    a,r5
0DDD 5000      3459            jnc     L029015?
0DDF           3460   ;        main.c:816: if(L_motor_dir){
0DDF 904F00    3461            mov     dptr,#_L_motor_dir
0DE2 E0        3462            movx    a,@dptr
0DE3 FA        3463            mov     r2,a
0DE4 6000      3464            jz      L029012?
0DE6           3465   ;        main.c:817: L_bridge_1 = 1; 
0DE6 D2A1      3466            setb    _P2_1
0DE8           3467   ;        main.c:818: L_bridge_2 = 0; 
0DE8 C2A2      3468            clr     _P2_2
0DEA 8000      3469            sjmp    L029016?
0DEC           3470   L029012?:
0DEC           3471   ;        main.c:821: L_bridge_1 = 0; 
0DEC C2A1      3472            clr     _P2_1
0DEE           3473   ;        main.c:822: L_bridge_2 = 1; 
0DEE D2A2      3474            setb    _P2_2
0DF0 8000      3475            sjmp    L029016?
0DF2           3476   L029015?:
0DF2           3477   ;        main.c:826: L_bridge_1 = 0; 
0DF2 C2A1      3478            clr     _P2_1
0DF4           3479   ;        main.c:827: L_bridge_2 = 0; 
0DF4 C2A2      3480            clr     _P2_2
0DF6           3481   L029016?:
0DF6           3482   ;        main.c:829: if (pwm_left > pwm_counter){
0DF6 904F80    3483            mov     dptr,#_pwm_left
0DF9 E0        3484            movx    a,@dptr
0DFA FA        3485            mov     r2,a
0DFB 7D00      3486            mov     r5,#0x00
0DFD C3        3487            clr     c
0DFE EB        3488            mov     a,r3
0DFF 9A        3489            subb    a,r2
0E00 EC        3490            mov     a,r4
0E01 9D        3491            subb    a,r5
0E02 5000      3492            jnc     L029021?
0E04           3493   ;        main.c:830: if (R_motor_dir){
0E04 904EC0    3494            mov     dptr,#_R_motor_dir
0E07 E0        3495            movx    a,@dptr
0E08 FA        3496            mov     r2,a
0E09 6000      3497            jz      L029018?
0E0B           3498   ;        main.c:831: R_bridge_1 = 1; 
0E0B D2A4      3499            setb    _P2_4
0E0D           3500   ;        main.c:832: R_bridge_2 = 0;
0E0D C2A3      3501            clr     _P2_3
0E0F 8000      3502            sjmp    L029022?
0E11           3503   L029018?:
0E11           3504   ;        main.c:835: R_bridge_1 = 0; 
0E11 C2A4      3505            clr     _P2_4
0E13           3506   ;        main.c:836: R_bridge_2 = 1;
0E13 D2A3      3507            setb    _P2_3
0E15 8000      3508            sjmp    L029022?
0E17           3509   L029021?:
0E17           3510   ;        main.c:840: R_bridge_1 = 0; 
0E17 C2A4      3511            clr     _P2_4
0E19           3512   ;        main.c:841: R_bridge_2 = 0; 
0E19 C2A3      3513            clr     _P2_3
0E1B           3514   L029022?:
0E1B           3515   ;        main.c:844: servo_counter++;
0E1B 904FC0    3516            mov     dptr,#_servo_counter
0E1E E0        3517            movx    a,@dptr
0E1F 2401      3518            add     a,#0x01
0E21 F0        3519            movx    @dptr,a
0E22 A3        3520            inc     dptr
0E23 E0        3521            movx    a,@dptr
0E24 3400      3522            addc    a,#0x00
0E26 F0        3523            movx    @dptr,a
0E27           3524   ;        main.c:845: if(servo_counter==2000)
0E27 904FC0    3525            mov     dptr,#_servo_counter
0E2A E0        3526            movx    a,@dptr
0E2B FA        3527            mov     r2,a
0E2C A3        3528            inc     dptr
0E2D E0        3529            movx    a,@dptr
0E2E FB        3530            mov     r3,a
0E2F BAD0B0    3531            cjne    r2,#0xD0,L029024?
0E32 BB07B0    3532            cjne    r3,#0x07,L029024?
0E35           3533   ;        main.c:847: servo_counter=0;
0E35 904FC0    3534            mov     dptr,#_servo_counter
0E38 E4        3535            clr     a
0E39 F0        3536            movx    @dptr,a
0E3A A3        3537            inc     dptr
0E3B F0        3538            movx    @dptr,a
0E3C           3539   ;        main.c:848: Servo_arm=1;
0E3C D296      3540            setb    _P1_6
0E3E           3541   ;        main.c:849: Servo_base=1;
0E3E D297      3542            setb    _P1_7
0E40           3543   L029024?:
0E40           3544   ;        main.c:851: if(servo_arm==servo_counter)
0E40 904E40    3545            mov     dptr,#_servo_arm
0E43 E0        3546            movx    a,@dptr
0E44 FA        3547            mov     r2,a
0E45 904FC0    3548            mov     dptr,#_servo_counter
0E48 E0        3549            movx    a,@dptr
0E49 FB        3550            mov     r3,a
0E4A A3        3551            inc     dptr
0E4B E0        3552            movx    a,@dptr
0E4C FC        3553            mov     r4,a
0E4D 7D00      3554            mov     r5,#0x00
0E4F EA        3555            mov     a,r2
0E50 B503F0    3556            cjne    a,ar3,L029026?
0E53 ED        3557            mov     a,r5
0E54 B504F0    3558            cjne    a,ar4,L029026?
0E57           3559   ;        main.c:853: Servo_arm=0;
0E57 C296      3560            clr     _P1_6
0E59           3561   L029026?:
0E59           3562   ;        main.c:855: if(servo_base==servo_counter)
0E59 904E80    3563            mov     dptr,#_servo_base
0E5C E0        3564            movx    a,@dptr
0E5D FA        3565            mov     r2,a
0E5E 7D00      3566            mov     r5,#0x00
0E60 B50330    3567            cjne    a,ar3,L029029?
0E63 ED        3568            mov     a,r5
0E64 B50430    3569            cjne    a,ar4,L029029?
0E67           3570   ;        main.c:857: Servo_base=0;
0E67 C297      3571            clr     _P1_7
0E69           3572   L029029?:
0E69 D0D0      3573            pop     psw
0E6B D001      3574            pop     (0+1)
0E6D D000      3575            pop     (0+0)
0E6F D007      3576            pop     (0+7)
0E71 D006      3577            pop     (0+6)
0E73 D005      3578            pop     (0+5)
0E75 D004      3579            pop     (0+4)
0E77 D003      3580            pop     (0+3)
0E79 D002      3581            pop     (0+2)
0E7B D083      3582            pop     dph
0E7D D082      3583            pop     dpl
0E7F D0F0      3584            pop     b
0E81 D0E0      3585            pop     acc
0E83 D090      3586            pop     bits
0E85 32        3587            reti
0E86           3588   ;------------------------------------------------------------
0E86           3589   ;Allocation info for local variables in function 'servo_pick'
0E86           3590   ;------------------------------------------------------------
0E86           3591   ;i                         Allocated with name '_servo_pick_i_1_188'
0E86           3592   ;------------------------------------------------------------
0E86           3593   ;        main.c:861: void servo_pick(){
0E86           3594   ;        -----------------------------------------
0E86           3595   ;         function servo_pick
0E86           3596   ;        -----------------------------------------
0E86           3597   _servo_pick:
0E86           3598   ;        main.c:863: servo_arm = 1;
0E86 904E40    3599            mov     dptr,#_servo_arm
0E89 7401      3600            mov     a,#0x01
0E8B F0        3601            movx    @dptr,a
0E8C           3602   ;        main.c:865: servo_base = 250;
0E8C 904E80    3603            mov     dptr,#_servo_base
0E8F 74FA      3604            mov     a,#0xFA
0E91 F0        3605            movx    @dptr,a
0E92           3606   ;        main.c:866: waitms(200);
0E92 9000C8    3607            mov     dptr,#0x00C8
0E95 120000    3608            lcall   _waitms
0E98           3609   ;        main.c:867: servo_arm = 250;
0E98 904E40    3610            mov     dptr,#_servo_arm
0E9B 74FA      3611            mov     a,#0xFA
0E9D F0        3612            movx    @dptr,a
0E9E           3613   ;        main.c:868: Magnet = 1;
0E9E D295      3614            setb    _P1_5
0EA0           3615   ;        main.c:869: waitms(200);
0EA0 9000C8    3616            mov     dptr,#0x00C8
0EA3 120000    3617            lcall   _waitms
0EA6           3618   ;        main.c:870: for(i = 0; i<89; i++){
0EA6 7A00      3619            mov     r2,#0x00
0EA8 7B00      3620            mov     r3,#0x00
0EAA           3621   L030001?:
0EAA C3        3622            clr     c
0EAB EA        3623            mov     a,r2
0EAC 9459      3624            subb    a,#0x59
0EAE EB        3625            mov     a,r3
0EAF 6480      3626            xrl     a,#0x80
0EB1 9480      3627            subb    a,#0x80
0EB3 5000      3628            jnc     L030004?
0EB5           3629   ;        main.c:871: waitms(5);
0EB5 900005    3630            mov     dptr,#0x0005
0EB8 C002      3631            push    ar2
0EBA C003      3632            push    ar3
0EBC 120000    3633            lcall   _waitms
0EBF D003      3634            pop     ar3
0EC1 D002      3635            pop     ar2
0EC3           3636   ;        main.c:872: servo_base--;
0EC3 904E80    3637            mov     dptr,#_servo_base
0EC6 E0        3638            movx    a,@dptr
0EC7 14        3639            dec     a
0EC8 904E80    3640            mov     dptr,#_servo_base
0ECB F0        3641            movx    @dptr,a
0ECC           3642   ;        main.c:870: for(i = 0; i<89; i++){
0ECC 0A        3643            inc     r2
0ECD BA0070    3644            cjne    r2,#0x00,L030001?
0ED0 0B        3645            inc     r3
0ED1 8000      3646            sjmp    L030001?
0ED3           3647   L030004?:
0ED3           3648   ;        main.c:874: waitms(200);
0ED3 9000C8    3649            mov     dptr,#0x00C8
0ED6 120000    3650            lcall   _waitms
0ED9           3651   ;        main.c:875: for(i = 0; i<159; i++){
0ED9 7A00      3652            mov     r2,#0x00
0EDB 7B00      3653            mov     r3,#0x00
0EDD           3654   L030005?:
0EDD C3        3655            clr     c
0EDE EA        3656            mov     a,r2
0EDF 949F      3657            subb    a,#0x9F
0EE1 EB        3658            mov     a,r3
0EE2 6480      3659            xrl     a,#0x80
0EE4 9480      3660            subb    a,#0x80
0EE6 5000      3661            jnc     L030008?
0EE8           3662   ;        main.c:876: waitms(5);
0EE8 900005    3663            mov     dptr,#0x0005
0EEB C002      3664            push    ar2
0EED C003      3665            push    ar3
0EEF 120000    3666            lcall   _waitms
0EF2 D003      3667            pop     ar3
0EF4 D002      3668            pop     ar2
0EF6           3669   ;        main.c:877: servo_arm--;
0EF6 904E40    3670            mov     dptr,#_servo_arm
0EF9 E0        3671            movx    a,@dptr
0EFA 14        3672            dec     a
0EFB 904E40    3673            mov     dptr,#_servo_arm
0EFE F0        3674            movx    @dptr,a
0EFF           3675   ;        main.c:875: for(i = 0; i<159; i++){
0EFF 0A        3676            inc     r2
0F00 BA00F0    3677            cjne    r2,#0x00,L030005?
0F03 0B        3678            inc     r3
0F04 8000      3679            sjmp    L030005?
0F06           3680   L030008?:
0F06           3681   ;        main.c:879: waitms(200);
0F06 9000C8    3682            mov     dptr,#0x00C8
0F09 120000    3683            lcall   _waitms
0F0C           3684   ;        main.c:880: for(i = 0; i<65; i++){
0F0C 7A00      3685            mov     r2,#0x00
0F0E 7B00      3686            mov     r3,#0x00
0F10           3687   L030009?:
0F10 C3        3688            clr     c
0F11 EA        3689            mov     a,r2
0F12 9441      3690            subb    a,#0x41
0F14 EB        3691            mov     a,r3
0F15 6480      3692            xrl     a,#0x80
0F17 9480      3693            subb    a,#0x80
0F19 5000      3694            jnc     L030012?
0F1B           3695   ;        main.c:881: waitms(5);
0F1B 900005    3696            mov     dptr,#0x0005
0F1E C002      3697            push    ar2
0F20 C003      3698            push    ar3
0F22 120000    3699            lcall   _waitms
0F25 D003      3700            pop     ar3
0F27 D002      3701            pop     ar2
0F29           3702   ;        main.c:882: servo_base--;
0F29 904E80    3703            mov     dptr,#_servo_base
0F2C E0        3704            movx    a,@dptr
0F2D 14        3705            dec     a
0F2E 904E80    3706            mov     dptr,#_servo_base
0F31 F0        3707            movx    @dptr,a
0F32           3708   ;        main.c:880: for(i = 0; i<65; i++){
0F32 0A        3709            inc     r2
0F33 BA0070    3710            cjne    r2,#0x00,L030009?
0F36 0B        3711            inc     r3
0F37 8000      3712            sjmp    L030009?
0F39           3713   L030012?:
0F39           3714   ;        main.c:884: waitms(500);
0F39 9001F4    3715            mov     dptr,#0x01F4
0F3C 120000    3716            lcall   _waitms
0F3F           3717   ;        main.c:885: Magnet = 0;
0F3F C295      3718            clr     _P1_5
0F41           3719   ;        main.c:886: waitms(200);
0F41 9000C8    3720            mov     dptr,#0x00C8
0F44 120000    3721            lcall   _waitms
0F47           3722   ;        main.c:887: servo_arm=1;
0F47 904E40    3723            mov     dptr,#_servo_arm
0F4A 7401      3724            mov     a,#0x01
0F4C F0        3725            movx    @dptr,a
0F4D           3726   ;        main.c:888: servo_base=1;
0F4D 904E80    3727            mov     dptr,#_servo_base
0F50 7401      3728            mov     a,#0x01
0F52 F0        3729            movx    @dptr,a
0F53           3730   ;        main.c:889: return;
0F53 22        3731            ret
0F54           3732   ;------------------------------------------------------------
0F54           3733   ;Allocation info for local variables in function 'check_bound'
0F54           3734   ;------------------------------------------------------------
0F54           3735   ;d2                        Allocated with name '_check_bound_PARM_2'
0F54           3736   ;d1                        Allocated to registers r2 r3 
0F54           3737   ;------------------------------------------------------------
0F54           3738   ;        main.c:892: int check_bound(int d1, int d2){
0F54           3739   ;        -----------------------------------------
0F54           3740   ;         function check_bound
0F54           3741   ;        -----------------------------------------
0F54           3742   _check_bound:
0F54 AA82      3743            mov     r2,dpl
0F56 AB83      3744            mov     r3,dph
0F58           3745   ;        main.c:893: if(d1>12000||d2>12000)      return 1;
0F58 C3        3746            clr     c
0F59 74E0      3747            mov     a,#0xE0
0F5B 9A        3748            subb    a,r2
0F5C 74AE      3749            mov     a,#(0x2E ^ 0x80)
0F5E 8BF0      3750            mov     b,r3
0F60 63F080    3751            xrl     b,#0x80
0F63 95F0      3752            subb    a,b
0F65 4000      3753            jc      L031001?
0F67 74E0      3754            mov     a,#0xE0
0F69 9590      3755            subb    a,_check_bound_PARM_2
0F6B 74AE      3756            mov     a,#(0x2E ^ 0x80)
0F6D 8591F0    3757            mov     b,(_check_bound_PARM_2 + 1)
0F70 63F080    3758            xrl     b,#0x80
0F73 95F0      3759            subb    a,b
0F75 5000      3760            jnc     L031002?
0F77           3761   L031001?:
0F77 900001    3762            mov     dptr,#0x0001
0F7A           3763   ;        main.c:894: else return 0;
0F7A 22        3764            ret
0F7B           3765   L031002?:
0F7B 900000    3766            mov     dptr,#0x0000
0F7E 22        3767            ret
0F7F           3768   ;------------------------------------------------------------
0F7F           3769   ;Allocation info for local variables in function 'Init_all'
0F7F           3770   ;------------------------------------------------------------
0F7F           3771   ;------------------------------------------------------------
0F7F           3772   ;        main.c:897: void Init_all(){
0F7F           3773   ;        -----------------------------------------
0F7F           3774   ;         function Init_all
0F7F           3775   ;        -----------------------------------------
0F7F           3776   _Init_all:
0F7F           3777   ;        main.c:899: Set_Pin_Output(0x24);
0F7F 758224    3778            mov     dpl,#0x24
0F82 120000    3779            lcall   _Set_Pin_Output
0F85           3780   ;        main.c:900: Set_Pin_Output(0x23);
0F85 758223    3781            mov     dpl,#0x23
0F88 120000    3782            lcall   _Set_Pin_Output
0F8B           3783   ;        main.c:901: Set_Pin_Output(0x22);
0F8B 758222    3784            mov     dpl,#0x22
0F8E 120000    3785            lcall   _Set_Pin_Output
0F91           3786   ;        main.c:902: Set_Pin_Output(0x21);
0F91 758221    3787            mov     dpl,#0x21
0F94 120000    3788            lcall   _Set_Pin_Output
0F97           3789   ;        main.c:903: Set_Pin_Output(0x17);
0F97 758217    3790            mov     dpl,#0x17
0F9A 120000    3791            lcall   _Set_Pin_Output
0F9D           3792   ;        main.c:904: Set_Pin_Output(0x16);
0F9D 758216    3793            mov     dpl,#0x16
0FA0 120000    3794            lcall   _Set_Pin_Output
0FA3           3795   ;        main.c:905: Set_Pin_Output(0x15);
0FA3 758215    3796            mov     dpl,#0x15
0FA6 120000    3797            lcall   _Set_Pin_Output
0FA9           3798   ;        main.c:906: Set_Pin_Output(0x10); // CS
0FA9 758210    3799            mov     dpl,#0x10
0FAC 120000    3800            lcall   _Set_Pin_Output
0FAF           3801   ;        main.c:908: Set_Pin_Input(0x30);
0FAF 758230    3802            mov     dpl,#0x30
0FB2 120000    3803            lcall   _Set_Pin_Input
0FB5           3804   ;        main.c:909: Set_Pin_Output(0x25); // CLK for Load
0FB5 758225    3805            mov     dpl,#0x25
0FB8 120000    3806            lcall   _Set_Pin_Output
0FBB           3807   ;        main.c:910: Set_Pin_Input(0x26);
0FBB 758226    3808            mov     dpl,#0x26
0FBE 120000    3809            lcall   _Set_Pin_Input
0FC1           3810   ;        main.c:913: InitPinADC(1,3);
0FC1 75E003    3811            mov     _InitPinADC_PARM_2,#0x03
0FC4 758201    3812            mov     dpl,#0x01
0FC7 120000    3813            lcall   _InitPinADC
0FCA           3814   ;        main.c:914: InitPinADC(1,4);
0FCA 75E004    3815            mov     _InitPinADC_PARM_2,#0x04
0FCD 758201    3816            mov     dpl,#0x01
0FD0 120000    3817            lcall   _InitPinADC
0FD3           3818   ;        main.c:915: InitADC();
0FD3 120000    3819            lcall   _InitADC
0FD6           3820   ;        main.c:917: TMOD&=0b_1111_0000; 
0FD6 5389F0    3821            anl     _TMOD,#0xF0
0FD9           3822   ;        main.c:918: TMOD|=0b_0000_0001; 
0FD9 438901    3823            orl     _TMOD,#0x01
0FDC           3824   ;        main.c:919: TR0=0; 
0FDC C28C      3825            clr     _TR0
0FDE           3826   ;        main.c:921: Servo_arm=0;
0FDE C296      3827            clr     _P1_6
0FE0           3828   ;        main.c:922: Servo_base=0;
0FE0 C297      3829            clr     _P1_7
0FE2           3830   ;        main.c:923: Magnet = 0;
0FE2 C295      3831            clr     _P1_5
0FE4           3832   ;        main.c:924: PD_SCK = 0;
0FE4 C2A5      3833            clr     _P2_5
0FE6           3834   ;        main.c:925: return;
0FE6 22        3835            ret
0FE7           3836   ;------------------------------------------------------------
0FE7           3837   ;Allocation info for local variables in function 'Move_back_ms'
0FE7           3838   ;------------------------------------------------------------
0FE7           3839   ;ms                        Allocated to registers r2 r3 
0FE7           3840   ;------------------------------------------------------------
0FE7           3841   ;        main.c:928: void Move_back_ms(int ms){
0FE7           3842   ;        -----------------------------------------
0FE7           3843   ;         function Move_back_ms
0FE7           3844   ;        -----------------------------------------
0FE7           3845   _Move_back_ms:
0FE7 AA82      3846            mov     r2,dpl
0FE9 AB83      3847            mov     r3,dph
0FEB           3848   ;        main.c:930: L_motor_dir = 1;
0FEB 904F00    3849            mov     dptr,#_L_motor_dir
0FEE 7401      3850            mov     a,#0x01
0FF0 F0        3851            movx    @dptr,a
0FF1           3852   ;        main.c:931: R_motor_dir = 1;
0FF1 904EC0    3853            mov     dptr,#_R_motor_dir
0FF4 7401      3854            mov     a,#0x01
0FF6 F0        3855            movx    @dptr,a
0FF7           3856   ;        main.c:933: pwm_left = 50;
0FF7 904F80    3857            mov     dptr,#_pwm_left
0FFA 7432      3858            mov     a,#0x32
0FFC F0        3859            movx    @dptr,a
0FFD           3860   ;        main.c:934: pwm_right = 50;
0FFD 904F40    3861            mov     dptr,#_pwm_right
1000 7432      3862            mov     a,#0x32
1002 F0        3863            movx    @dptr,a
1003           3864   ;        main.c:936: waitms(ms);
1003 8A82      3865            mov     dpl,r2
1005 8B83      3866            mov     dph,r3
1007 120000    3867            lcall   _waitms
100A           3868   ;        main.c:938: L_motor_dir = 0;
100A 904F00    3869            mov     dptr,#_L_motor_dir
100D           3870   ;        main.c:939: R_motor_dir = 0;
100D           3871   ;        main.c:940: pwm_left = 0;
100D           3872   ;        main.c:941: pwm_right = 0;
100D E4        3873            clr     a
100E F0        3874            movx    @dptr,a
100F 904EC0    3875            mov     dptr,#_R_motor_dir
1012 F0        3876            movx    @dptr,a
1013 904F80    3877            mov     dptr,#_pwm_left
1016 F0        3878            movx    @dptr,a
1017 904F40    3879            mov     dptr,#_pwm_right
101A F0        3880            movx    @dptr,a
101B           3881   ;        main.c:942: return;
101B 22        3882            ret
101C           3883   ;------------------------------------------------------------
101C           3884   ;Allocation info for local variables in function 'Right_angle'
101C           3885   ;------------------------------------------------------------
101C           3886   ;angle                     Allocated to registers r2 r3 
101C           3887   ;------------------------------------------------------------
101C           3888   ;        main.c:945: void Right_angle(int angle){
101C           3889   ;        -----------------------------------------
101C           3890   ;         function Right_angle
101C           3891   ;        -----------------------------------------
101C           3892   _Right_angle:
101C AA82      3893            mov     r2,dpl
101E AB83      3894            mov     r3,dph
1020           3895   ;        main.c:947: L_motor_dir = 1;
1020 904F00    3896            mov     dptr,#_L_motor_dir
1023 7401      3897            mov     a,#0x01
1025 F0        3898            movx    @dptr,a
1026           3899   ;        main.c:948: R_motor_dir = 0;
1026 904EC0    3900            mov     dptr,#_R_motor_dir
1029 E4        3901            clr     a
102A F0        3902            movx    @dptr,a
102B           3903   ;        main.c:949: pwm_left = 80;
102B 904F80    3904            mov     dptr,#_pwm_left
102E 7450      3905            mov     a,#0x50
1030 F0        3906            movx    @dptr,a
1031           3907   ;        main.c:950: pwm_right = 80 * pwm_corr;
1031 C002      3908            push    ar2
1033 C003      3909            push    ar3
1035 904C30    3910            mov     dptr,#_pwm_corr
1038 E0        3911            movx    a,@dptr
1039 C0E0      3912            push    acc
103B A3        3913            inc     dptr
103C E0        3914            movx    a,@dptr
103D C0E0      3915            push    acc
103F A3        3916            inc     dptr
1040 E0        3917            movx    a,@dptr
1041 C0E0      3918            push    acc
1043 A3        3919            inc     dptr
1044 E0        3920            movx    a,@dptr
1045 C0E0      3921            push    acc
1047 900000    3922            mov     dptr,#0x0000
104A 75F0A0    3923            mov     b,#0xA0
104D 7442      3924            mov     a,#0x42
104F 120000    3925            lcall   ___fsmul
1052 AC82      3926            mov     r4,dpl
1054 AD83      3927            mov     r5,dph
1056 AEF0      3928            mov     r6,b
1058 FF        3929            mov     r7,a
1059 E581      3930            mov     a,sp
105B 24FC      3931            add     a,#0xfc
105D F581      3932            mov     sp,a
105F 8C82      3933            mov     dpl,r4
1061 8D83      3934            mov     dph,r5
1063 8EF0      3935            mov     b,r6
1065 EF        3936            mov     a,r7
1066 120000    3937            lcall   ___fs2uchar
1069 E582      3938            mov     a,dpl
106B D003      3939            pop     ar3
106D D002      3940            pop     ar2
106F 904F40    3941            mov     dptr,#_pwm_right
1072 F0        3942            movx    @dptr,a
1073           3943   ;        main.c:952: waitms(angle);
1073 8A82      3944            mov     dpl,r2
1075 8B83      3945            mov     dph,r3
1077 120000    3946            lcall   _waitms
107A           3947   ;        main.c:954: L_motor_dir = 0;
107A 904F00    3948            mov     dptr,#_L_motor_dir
107D           3949   ;        main.c:955: R_motor_dir = 0;
107D           3950   ;        main.c:956: pwm_left = 0;
107D           3951   ;        main.c:957: pwm_right = 0;
107D E4        3952            clr     a
107E F0        3953            movx    @dptr,a
107F 904EC0    3954            mov     dptr,#_R_motor_dir
1082 F0        3955            movx    @dptr,a
1083 904F80    3956            mov     dptr,#_pwm_left
1086 F0        3957            movx    @dptr,a
1087 904F40    3958            mov     dptr,#_pwm_right
108A F0        3959            movx    @dptr,a
108B           3960   ;        main.c:958: return;
108B 22        3961            ret
108C           3962   ;------------------------------------------------------------
108C           3963   ;Allocation info for local variables in function 'Move_forward'
108C           3964   ;------------------------------------------------------------
108C           3965   ;------------------------------------------------------------
108C           3966   ;        main.c:961: void Move_forward(){
108C           3967   ;        -----------------------------------------
108C           3968   ;         function Move_forward
108C           3969   ;        -----------------------------------------
108C           3970   _Move_forward:
108C           3971   ;        main.c:963: L_motor_dir = 0;
108C 904F00    3972            mov     dptr,#_L_motor_dir
108F           3973   ;        main.c:964: R_motor_dir = 0;
108F E4        3974            clr     a
1090 F0        3975            movx    @dptr,a
1091 904EC0    3976            mov     dptr,#_R_motor_dir
1094 F0        3977            movx    @dptr,a
1095           3978   ;        main.c:965: pwm_left = 60;
1095 904F80    3979            mov     dptr,#_pwm_left
1098 743C      3980            mov     a,#0x3C
109A F0        3981            movx    @dptr,a
109B           3982   ;        main.c:966: pwm_right = 60 * pwm_corr;
109B 904C30    3983            mov     dptr,#_pwm_corr
109E E0        3984            movx    a,@dptr
109F C0E0      3985            push    acc
10A1 A3        3986            inc     dptr
10A2 E0        3987            movx    a,@dptr
10A3 C0E0      3988            push    acc
10A5 A3        3989            inc     dptr
10A6 E0        3990            movx    a,@dptr
10A7 C0E0      3991            push    acc
10A9 A3        3992            inc     dptr
10AA E0        3993            movx    a,@dptr
10AB C0E0      3994            push    acc
10AD 900000    3995            mov     dptr,#0x0000
10B0 75F070    3996            mov     b,#0x70
10B3 7442      3997            mov     a,#0x42
10B5 120000    3998            lcall   ___fsmul
10B8 AA82      3999            mov     r2,dpl
10BA AB83      4000            mov     r3,dph
10BC ACF0      4001            mov     r4,b
10BE FD        4002            mov     r5,a
10BF E581      4003            mov     a,sp
10C1 24FC      4004            add     a,#0xfc
10C3 F581      4005            mov     sp,a
10C5 8A82      4006            mov     dpl,r2
10C7 8B83      4007            mov     dph,r3
10C9 8CF0      4008            mov     b,r4
10CB ED        4009            mov     a,r5
10CC 120000    4010            lcall   ___fs2uchar
10CF E582      4011            mov     a,dpl
10D1 904F40    4012            mov     dptr,#_pwm_right
10D4 F0        4013            movx    @dptr,a
10D5           4014   ;        main.c:967: return;
10D5 22        4015            ret
10D6           4016   ;------------------------------------------------------------
10D6           4017   ;Allocation info for local variables in function 'simple_rand'
10D6           4018   ;------------------------------------------------------------
10D6           4019   ;------------------------------------------------------------
10D6           4020   ;        main.c:970: unsigned int simple_rand() {
10D6           4021   ;        -----------------------------------------
10D6           4022   ;         function simple_rand
10D6           4023   ;        -----------------------------------------
10D6           4024   _simple_rand:
10D6           4025   ;        main.c:971: seed = (seed * 25173 + 13849) & 0xFFFF;  
10D6 904C70    4026            mov     dptr,#_seed
10D9 E0        4027            movx    a,@dptr
10DA F500      4028            mov     __mulint_PARM_2,a
10DC A3        4029            inc     dptr
10DD E0        4030            movx    a,@dptr
10DE F501      4031            mov     (__mulint_PARM_2 + 1),a
10E0 906255    4032            mov     dptr,#0x6255
10E3 120000    4033            lcall   __mulint
10E6 E582      4034            mov     a,dpl
10E8 8583F0    4035            mov     b,dph
10EB 904C70    4036            mov     dptr,#_seed
10EE 2419      4037            add     a,#0x19
10F0 F0        4038            movx    @dptr,a
10F1 7436      4039            mov     a,#0x36
10F3 35F0      4040            addc    a,b
10F5 A3        4041            inc     dptr
10F6 F0        4042            movx    @dptr,a
10F7           4043   ;        main.c:972: return seed;     
10F7 904C70    4044            mov     dptr,#_seed
10FA E0        4045            movx    a,@dptr
10FB FA        4046            mov     r2,a
10FC A3        4047            inc     dptr
10FD E0        4048            movx    a,@dptr
10FE 8A82      4049            mov     dpl,r2
1100 F583      4050            mov     dph,a
1102 22        4051            ret
1103           4052   ;------------------------------------------------------------
1103           4053   ;Allocation info for local variables in function 'get_random_90_250'
1103           4054   ;------------------------------------------------------------
1103           4055   ;------------------------------------------------------------
1103           4056   ;        main.c:975: unsigned int get_random_90_250() {
1103           4057   ;        -----------------------------------------
1103           4058   ;         function get_random_90_250
1103           4059   ;        -----------------------------------------
1103           4060   _get_random_90_250:
1103           4061   ;        main.c:976: return (simple_rand() % (250 - 85 + 1)) + 85;
1103 120000    4062            lcall   _simple_rand
1106 7500A6    4063            mov     __moduint_PARM_2,#0xA6
1109 E4        4064            clr     a
110A F501      4065            mov     (__moduint_PARM_2 + 1),a
110C 120000    4066            lcall   __moduint
110F E582      4067            mov     a,dpl
1111 8583F0    4068            mov     b,dph
1114 2455      4069            add     a,#0x55
1116 F582      4070            mov     dpl,a
1118 E4        4071            clr     a
1119 35F0      4072            addc    a,b
111B F583      4073            mov     dph,a
111D 22        4074            ret
111E           4075   ;------------------------------------------------------------
111E           4076   ;Allocation info for local variables in function 'Read_angle'
111E           4077   ;------------------------------------------------------------
111E           4078   ;sloc0                     Allocated with name '_Read_angle_sloc0_1_0'
111E           4079   ;i                         Allocated with name '_Read_angle_i_1_203'
111E           4080   ;mag_x                     Allocated with name '_Read_angle_mag_x_1_203'
111E           4081   ;mag_y                     Allocated with name '_Read_angle_mag_y_1_203'
111E           4082   ;sum_x                     Allocated with name '_Read_angle_sum_x_1_203'
111E           4083   ;sum_y                     Allocated with name '_Read_angle_sum_y_1_203'
111E           4084   ;angle                     Allocated with name '_Read_angle_angle_1_203'
111E           4085   ;------------------------------------------------------------
111E           4086   ;        main.c:979: float Read_angle(void)
111E           4087   ;        -----------------------------------------
111E           4088   ;         function Read_angle
111E           4089   ;        -----------------------------------------
111E           4090   _Read_angle:
111E           4091   ;        main.c:986: sum_x = 0.0; sum_y = 0.0;
111E 90CEE0    4092            mov     dptr,#_Read_angle_sum_x_1_203
1121 E4        4093            clr     a
1122 F0        4094            movx    @dptr,a
1123 A3        4095            inc     dptr
1124 F0        4096            movx    @dptr,a
1125 A3        4097            inc     dptr
1126 F0        4098            movx    @dptr,a
1127 A3        4099            inc     dptr
1128 F0        4100            movx    @dptr,a
1129 90CF30    4101            mov     dptr,#_Read_angle_sum_y_1_203
112C F0        4102            movx    @dptr,a
112D A3        4103            inc     dptr
112E E4        4104            clr     a
112F F0        4105            movx    @dptr,a
1130 A3        4106            inc     dptr
1131 F0        4107            movx    @dptr,a
1132 A3        4108            inc     dptr
1133 F0        4109            movx    @dptr,a
1134           4110   ;        main.c:989: for (i = 0; i < 10; i++){
1134 7A00      4111            mov     r2,#0x00
1136           4112   L038005?:
1136 BA0A40    4113            cjne    r2,#0x0A,L038016?
1139           4114   L038016?:
1139 4000      4115            jc      L038017?
113B 020000    4116            ljmp    L038008?
113E           4117   L038017?:
113E           4118   ;        main.c:990: BMM150_Read_Data(&mag_x, &mag_y);
113E 75A090    4119            mov     _BMM150_Read_Data_PARM_2,#_Read_angle_mag_y_1_203
1141 75A1CE    4120            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_Read_angle_mag_y_1_203 >> 8)
1144 75A200    4121            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
1147 90CE40    4122            mov     dptr,#_Read_angle_mag_x_1_203
114A 75F000    4123            mov     b,#0x00
114D C002      4124            push    ar2
114F 120000    4125            lcall   _BMM150_Read_Data
1152           4126   ;        main.c:991: sum_x += (float)mag_x; 
1152 90CE40    4127            mov     dptr,#_Read_angle_mag_x_1_203
1155 E0        4128            movx    a,@dptr
1156 FB        4129            mov     r3,a
1157 A3        4130            inc     dptr
1158 E0        4131            movx    a,@dptr
1159 FC        4132            mov     r4,a
115A 8B82      4133            mov     dpl,r3
115C 8C83      4134            mov     dph,r4
115E 120000    4135            lcall   ___sint2fs
1161 858290    4136            mov     _Read_angle_sloc0_1_0,dpl
1164 858391    4137            mov     (_Read_angle_sloc0_1_0 + 1),dph
1167 85F092    4138            mov     (_Read_angle_sloc0_1_0 + 2),b
116A F593      4139            mov     (_Read_angle_sloc0_1_0 + 3),a
116C 90CEE0    4140            mov     dptr,#_Read_angle_sum_x_1_203
116F E0        4141            movx    a,@dptr
1170 FF        4142            mov     r7,a
1171 A3        4143            inc     dptr
1172 E0        4144            movx    a,@dptr
1173 F8        4145            mov     r0,a
1174 A3        4146            inc     dptr
1175 E0        4147            movx    a,@dptr
1176 F9        4148            mov     r1,a
1177 A3        4149            inc     dptr
1178 E0        4150            movx    a,@dptr
1179 FB        4151            mov     r3,a
117A C090      4152            push    _Read_angle_sloc0_1_0
117C C091      4153            push    (_Read_angle_sloc0_1_0 + 1)
117E C092      4154            push    (_Read_angle_sloc0_1_0 + 2)
1180 C093      4155            push    (_Read_angle_sloc0_1_0 + 3)
1182 8F82      4156            mov     dpl,r7
1184 8883      4157            mov     dph,r0
1186 89F0      4158            mov     b,r1
1188 EB        4159            mov     a,r3
1189 120000    4160            lcall   ___fsadd
118C AB82      4161            mov     r3,dpl
118E AC83      4162            mov     r4,dph
1190 ADF0      4163            mov     r5,b
1192 FE        4164            mov     r6,a
1193 E581      4165            mov     a,sp
1195 24FC      4166            add     a,#0xfc
1197 F581      4167            mov     sp,a
1199 90CEE0    4168            mov     dptr,#_Read_angle_sum_x_1_203
119C EB        4169            mov     a,r3
119D F0        4170            movx    @dptr,a
119E A3        4171            inc     dptr
119F EC        4172            mov     a,r4
11A0 F0        4173            movx    @dptr,a
11A1 A3        4174            inc     dptr
11A2 ED        4175            mov     a,r5
11A3 F0        4176            movx    @dptr,a
11A4 A3        4177            inc     dptr
11A5 EE        4178            mov     a,r6
11A6 F0        4179            movx    @dptr,a
11A7           4180   ;        main.c:992: sum_y += (float)mag_y; 
11A7 90CE90    4181            mov     dptr,#_Read_angle_mag_y_1_203
11AA E0        4182            movx    a,@dptr
11AB FB        4183            mov     r3,a
11AC A3        4184            inc     dptr
11AD E0        4185            movx    a,@dptr
11AE FC        4186            mov     r4,a
11AF 8B82      4187            mov     dpl,r3
11B1 8C83      4188            mov     dph,r4
11B3 120000    4189            lcall   ___sint2fs
11B6 858290    4190            mov     _Read_angle_sloc0_1_0,dpl
11B9 858391    4191            mov     (_Read_angle_sloc0_1_0 + 1),dph
11BC 85F092    4192            mov     (_Read_angle_sloc0_1_0 + 2),b
11BF F593      4193            mov     (_Read_angle_sloc0_1_0 + 3),a
11C1 90CF30    4194            mov     dptr,#_Read_angle_sum_y_1_203
11C4 E0        4195            movx    a,@dptr
11C5 FF        4196            mov     r7,a
11C6 A3        4197            inc     dptr
11C7 E0        4198            movx    a,@dptr
11C8 F8        4199            mov     r0,a
11C9 A3        4200            inc     dptr
11CA E0        4201            movx    a,@dptr
11CB F9        4202            mov     r1,a
11CC A3        4203            inc     dptr
11CD E0        4204            movx    a,@dptr
11CE FB        4205            mov     r3,a
11CF C090      4206            push    _Read_angle_sloc0_1_0
11D1 C091      4207            push    (_Read_angle_sloc0_1_0 + 1)
11D3 C092      4208            push    (_Read_angle_sloc0_1_0 + 2)
11D5 C093      4209            push    (_Read_angle_sloc0_1_0 + 3)
11D7 8F82      4210            mov     dpl,r7
11D9 8883      4211            mov     dph,r0
11DB 89F0      4212            mov     b,r1
11DD EB        4213            mov     a,r3
11DE 120000    4214            lcall   ___fsadd
11E1 AB82      4215            mov     r3,dpl
11E3 AC83      4216            mov     r4,dph
11E5 ADF0      4217            mov     r5,b
11E7 FE        4218            mov     r6,a
11E8 E581      4219            mov     a,sp
11EA 24FC      4220            add     a,#0xfc
11EC F581      4221            mov     sp,a
11EE 90CF30    4222            mov     dptr,#_Read_angle_sum_y_1_203
11F1 EB        4223            mov     a,r3
11F2 F0        4224            movx    @dptr,a
11F3 A3        4225            inc     dptr
11F4 EC        4226            mov     a,r4
11F5 F0        4227            movx    @dptr,a
11F6 A3        4228            inc     dptr
11F7 ED        4229            mov     a,r5
11F8 F0        4230            movx    @dptr,a
11F9 A3        4231            inc     dptr
11FA EE        4232            mov     a,r6
11FB F0        4233            movx    @dptr,a
11FC           4234   ;        main.c:993: waitms(1);
11FC 900001    4235            mov     dptr,#0x0001
11FF 120000    4236            lcall   _waitms
1202 D002      4237            pop     ar2
1204           4238   ;        main.c:989: for (i = 0; i < 10; i++){
1204 0A        4239            inc     r2
1205 020000    4240            ljmp    L038005?
1208           4241   L038008?:
1208           4242   ;        main.c:995: angle = atan2f(sum_y/25.0, sum_x/25.0) * 180.0 / M_PI;
1208 90CF30    4243            mov     dptr,#_Read_angle_sum_y_1_203
120B E0        4244            movx    a,@dptr
120C FA        4245            mov     r2,a
120D A3        4246            inc     dptr
120E E0        4247            movx    a,@dptr
120F FB        4248            mov     r3,a
1210 A3        4249            inc     dptr
1211 E0        4250            movx    a,@dptr
1212 FC        4251            mov     r4,a
1213 A3        4252            inc     dptr
1214 E0        4253            movx    a,@dptr
1215 FD        4254            mov     r5,a
1216 E4        4255            clr     a
1217 C0E0      4256            push    acc
1219 C0E0      4257            push    acc
121B 74C8      4258            mov     a,#0xC8
121D C0E0      4259            push    acc
121F 7441      4260            mov     a,#0x41
1221 C0E0      4261            push    acc
1223 8A82      4262            mov     dpl,r2
1225 8B83      4263            mov     dph,r3
1227 8CF0      4264            mov     b,r4
1229 ED        4265            mov     a,r5
122A 120000    4266            lcall   ___fsdiv
122D AA82      4267            mov     r2,dpl
122F AB83      4268            mov     r3,dph
1231 ACF0      4269            mov     r4,b
1233 FD        4270            mov     r5,a
1234 E581      4271            mov     a,sp
1236 24FC      4272            add     a,#0xfc
1238 F581      4273            mov     sp,a
123A 90CEE0    4274            mov     dptr,#_Read_angle_sum_x_1_203
123D E0        4275            movx    a,@dptr
123E FE        4276            mov     r6,a
123F A3        4277            inc     dptr
1240 E0        4278            movx    a,@dptr
1241 FF        4279            mov     r7,a
1242 A3        4280            inc     dptr
1243 E0        4281            movx    a,@dptr
1244 F8        4282            mov     r0,a
1245 A3        4283            inc     dptr
1246 E0        4284            movx    a,@dptr
1247 F9        4285            mov     r1,a
1248 C002      4286            push    ar2
124A C003      4287            push    ar3
124C C004      4288            push    ar4
124E C005      4289            push    ar5
1250 E4        4290            clr     a
1251 C0E0      4291            push    acc
1253 C0E0      4292            push    acc
1255 74C8      4293            mov     a,#0xC8
1257 C0E0      4294            push    acc
1259 7441      4295            mov     a,#0x41
125B C0E0      4296            push    acc
125D 8E82      4297            mov     dpl,r6
125F 8F83      4298            mov     dph,r7
1261 88F0      4299            mov     b,r0
1263 E9        4300            mov     a,r1
1264 120000    4301            lcall   ___fsdiv
1267 858200    4302            mov     _atan2f_PARM_2,dpl
126A 858301    4303            mov     (_atan2f_PARM_2 + 1),dph
126D 85F002    4304            mov     (_atan2f_PARM_2 + 2),b
1270 F503      4305            mov     (_atan2f_PARM_2 + 3),a
1272 E581      4306            mov     a,sp
1274 24FC      4307            add     a,#0xfc
1276 F581      4308            mov     sp,a
1278 D005      4309            pop     ar5
127A D004      4310            pop     ar4
127C D003      4311            pop     ar3
127E D002      4312            pop     ar2
1280 8A82      4313            mov     dpl,r2
1282 8B83      4314            mov     dph,r3
1284 8CF0      4315            mov     b,r4
1286 ED        4316            mov     a,r5
1287 120000    4317            lcall   _atan2f
128A AA82      4318            mov     r2,dpl
128C AB83      4319            mov     r3,dph
128E ACF0      4320            mov     r4,b
1290 FD        4321            mov     r5,a
1291 C002      4322            push    ar2
1293 C003      4323            push    ar3
1295 C004      4324            push    ar4
1297 C005      4325            push    ar5
1299 900000    4326            mov     dptr,#0x0000
129C 75F034    4327            mov     b,#0x34
129F 7443      4328            mov     a,#0x43
12A1 120000    4329            lcall   ___fsmul
12A4 AA82      4330            mov     r2,dpl
12A6 AB83      4331            mov     r3,dph
12A8 ACF0      4332            mov     r4,b
12AA FD        4333            mov     r5,a
12AB E581      4334            mov     a,sp
12AD 24FC      4335            add     a,#0xfc
12AF F581      4336            mov     sp,a
12B1 74DB      4337            mov     a,#0xDB
12B3 C0E0      4338            push    acc
12B5 740F      4339            mov     a,#0x0F
12B7 C0E0      4340            push    acc
12B9 7449      4341            mov     a,#0x49
12BB C0E0      4342            push    acc
12BD 7440      4343            mov     a,#0x40
12BF C0E0      4344            push    acc
12C1 8A82      4345            mov     dpl,r2
12C3 8B83      4346            mov     dph,r3
12C5 8CF0      4347            mov     b,r4
12C7 ED        4348            mov     a,r5
12C8 120000    4349            lcall   ___fsdiv
12CB AA82      4350            mov     r2,dpl
12CD AB83      4351            mov     r3,dph
12CF ACF0      4352            mov     r4,b
12D1 FD        4353            mov     r5,a
12D2 E581      4354            mov     a,sp
12D4 24FC      4355            add     a,#0xfc
12D6 F581      4356            mov     sp,a
12D8 90CF80    4357            mov     dptr,#_Read_angle_angle_1_203
12DB EA        4358            mov     a,r2
12DC F0        4359            movx    @dptr,a
12DD A3        4360            inc     dptr
12DE EB        4361            mov     a,r3
12DF F0        4362            movx    @dptr,a
12E0 A3        4363            inc     dptr
12E1 EC        4364            mov     a,r4
12E2 F0        4365            movx    @dptr,a
12E3 A3        4366            inc     dptr
12E4 ED        4367            mov     a,r5
12E5 F0        4368            movx    @dptr,a
12E6           4369   ;        main.c:996: if (angle < 0.0) angle += 360.0; 
12E6 C002      4370            push    ar2
12E8 C003      4371            push    ar3
12EA C004      4372            push    ar4
12EC C005      4373            push    ar5
12EE E4        4374            clr     a
12EF C0E0      4375            push    acc
12F1 C0E0      4376            push    acc
12F3 C0E0      4377            push    acc
12F5 C0E0      4378            push    acc
12F7 8A82      4379            mov     dpl,r2
12F9 8B83      4380            mov     dph,r3
12FB 8CF0      4381            mov     b,r4
12FD ED        4382            mov     a,r5
12FE 120000    4383            lcall   ___fslt
1301 AE82      4384            mov     r6,dpl
1303 E581      4385            mov     a,sp
1305 24FC      4386            add     a,#0xfc
1307 F581      4387            mov     sp,a
1309 D005      4388            pop     ar5
130B D004      4389            pop     ar4
130D D003      4390            pop     ar3
130F D002      4391            pop     ar2
1311 EE        4392            mov     a,r6
1312 6000      4393            jz      L038002?
1314 E4        4394            clr     a
1315 C0E0      4395            push    acc
1317 C0E0      4396            push    acc
1319 74B4      4397            mov     a,#0xB4
131B C0E0      4398            push    acc
131D 7443      4399            mov     a,#0x43
131F C0E0      4400            push    acc
1321 8A82      4401            mov     dpl,r2
1323 8B83      4402            mov     dph,r3
1325 8CF0      4403            mov     b,r4
1327 ED        4404            mov     a,r5
1328 120000    4405            lcall   ___fsadd
132B AA82      4406            mov     r2,dpl
132D AB83      4407            mov     r3,dph
132F ACF0      4408            mov     r4,b
1331 FD        4409            mov     r5,a
1332 E581      4410            mov     a,sp
1334 24FC      4411            add     a,#0xfc
1336 F581      4412            mov     sp,a
1338 90CF80    4413            mov     dptr,#_Read_angle_angle_1_203
133B EA        4414            mov     a,r2
133C F0        4415            movx    @dptr,a
133D A3        4416            inc     dptr
133E EB        4417            mov     a,r3
133F F0        4418            movx    @dptr,a
1340 A3        4419            inc     dptr
1341 EC        4420            mov     a,r4
1342 F0        4421            movx    @dptr,a
1343 A3        4422            inc     dptr
1344 ED        4423            mov     a,r5
1345 F0        4424            movx    @dptr,a
1346           4425   L038002?:
1346           4426   ;        main.c:997: if (angle > 360.0) angle -= 360.0; 
1346 90CF80    4427            mov     dptr,#_Read_angle_angle_1_203
1349 E0        4428            movx    a,@dptr
134A FA        4429            mov     r2,a
134B A3        4430            inc     dptr
134C E0        4431            movx    a,@dptr
134D FB        4432            mov     r3,a
134E A3        4433            inc     dptr
134F E0        4434            movx    a,@dptr
1350 FC        4435            mov     r4,a
1351 A3        4436            inc     dptr
1352 E0        4437            movx    a,@dptr
1353 FD        4438            mov     r5,a
1354 C002      4439            push    ar2
1356 C003      4440            push    ar3
1358 C004      4441            push    ar4
135A C005      4442            push    ar5
135C E4        4443            clr     a
135D C0E0      4444            push    acc
135F C0E0      4445            push    acc
1361 74B4      4446            mov     a,#0xB4
1363 C0E0      4447            push    acc
1365 7443      4448            mov     a,#0x43
1367 C0E0      4449            push    acc
1369 8A82      4450            mov     dpl,r2
136B 8B83      4451            mov     dph,r3
136D 8CF0      4452            mov     b,r4
136F ED        4453            mov     a,r5
1370 120000    4454            lcall   ___fsgt
1373 AE82      4455            mov     r6,dpl
1375 E581      4456            mov     a,sp
1377 24FC      4457            add     a,#0xfc
1379 F581      4458            mov     sp,a
137B D005      4459            pop     ar5
137D D004      4460            pop     ar4
137F D003      4461            pop     ar3
1381 D002      4462            pop     ar2
1383 EE        4463            mov     a,r6
1384 6000      4464            jz      L038004?
1386 E4        4465            clr     a
1387 C0E0      4466            push    acc
1389 C0E0      4467            push    acc
138B 74B4      4468            mov     a,#0xB4
138D C0E0      4469            push    acc
138F 7443      4470            mov     a,#0x43
1391 C0E0      4471            push    acc
1393 8A82      4472            mov     dpl,r2
1395 8B83      4473            mov     dph,r3
1397 8CF0      4474            mov     b,r4
1399 ED        4475            mov     a,r5
139A 120000    4476            lcall   ___fssub
139D AA82      4477            mov     r2,dpl
139F AB83      4478            mov     r3,dph
13A1 ACF0      4479            mov     r4,b
13A3 FD        4480            mov     r5,a
13A4 E581      4481            mov     a,sp
13A6 24FC      4482            add     a,#0xfc
13A8 F581      4483            mov     sp,a
13AA 90CF80    4484            mov     dptr,#_Read_angle_angle_1_203
13AD EA        4485            mov     a,r2
13AE F0        4486            movx    @dptr,a
13AF A3        4487            inc     dptr
13B0 EB        4488            mov     a,r3
13B1 F0        4489            movx    @dptr,a
13B2 A3        4490            inc     dptr
13B3 EC        4491            mov     a,r4
13B4 F0        4492            movx    @dptr,a
13B5 A3        4493            inc     dptr
13B6 ED        4494            mov     a,r5
13B7 F0        4495            movx    @dptr,a
13B8           4496   L038004?:
13B8           4497   ;        main.c:998: return angle; 
13B8 90CF80    4498            mov     dptr,#_Read_angle_angle_1_203
13BB E0        4499            movx    a,@dptr
13BC FA        4500            mov     r2,a
13BD A3        4501            inc     dptr
13BE E0        4502            movx    a,@dptr
13BF FB        4503            mov     r3,a
13C0 A3        4504            inc     dptr
13C1 E0        4505            movx    a,@dptr
13C2 FC        4506            mov     r4,a
13C3 A3        4507            inc     dptr
13C4 E0        4508            movx    a,@dptr
13C5 8A82      4509            mov     dpl,r2
13C7 8B83      4510            mov     dph,r3
13C9 8CF0      4511            mov     b,r4
13CB 22        4512            ret
13CC           4513   ;------------------------------------------------------------
13CC           4514   ;Allocation info for local variables in function 'Auto_mode_slave'
13CC           4515   ;------------------------------------------------------------
13CC           4516   ;sloc0                     Allocated with name '_Auto_mode_slave_sloc0_1_0'
13CC           4517   ;sloc1                     Allocated with name '_Auto_mode_slave_sloc1_1_0'
13CC           4518   ;count                     Allocated with name '_Auto_mode_slave_count_1_205'
13CC           4519   ;command                   Allocated with name '_Auto_mode_slave_command_1_205'
13CC           4520   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_205'
13CC           4521   ;bound                     Allocated with name '_Auto_mode_slave_bound_1_205'
13CC           4522   ;c                         Allocated with name '_Auto_mode_slave_c_1_205'
13CC           4523   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_205'
13CC           4524   ;angle                     Allocated with name '_Auto_mode_slave_angle_1_205'
13CC           4525   ;------------------------------------------------------------
13CC           4526   ;        main.c:1001: void Auto_mode_slave(){
13CC           4527   ;        -----------------------------------------
13CC           4528   ;         function Auto_mode_slave
13CC           4529   ;        -----------------------------------------
13CC           4530   _Auto_mode_slave:
13CC           4531   ;        main.c:1004: xdata int state_res = 1;
13CC 90D030    4532            mov     dptr,#_Auto_mode_slave_state_res_1_205
13CF 7401      4533            mov     a,#0x01
13D1 F0        4534            movx    @dptr,a
13D2 E4        4535            clr     a
13D3 A3        4536            inc     dptr
13D4 F0        4537            movx    @dptr,a
13D5           4538   ;        main.c:1011: while(count < 20 && state_res){
13D5 E4        4539            clr     a
13D6 F5E0      4540            mov     _Auto_mode_slave_sloc0_1_0,a
13D8 F5E1      4541            mov     (_Auto_mode_slave_sloc0_1_0 + 1),a
13DA           4542   L039018?:
13DA C3        4543            clr     c
13DB E5E0      4544            mov     a,_Auto_mode_slave_sloc0_1_0
13DD 9414      4545            subb    a,#0x14
13DF E5E1      4546            mov     a,(_Auto_mode_slave_sloc0_1_0 + 1)
13E1 6480      4547            xrl     a,#0x80
13E3 9480      4548            subb    a,#0x80
13E5 4000      4549            jc      L039034?
13E7 020000    4550            ljmp    L039020?
13EA           4551   L039034?:
13EA 90D030    4552            mov     dptr,#_Auto_mode_slave_state_res_1_205
13ED E0        4553            movx    a,@dptr
13EE FC        4554            mov     r4,a
13EF A3        4555            inc     dptr
13F0 E0        4556            movx    a,@dptr
13F1 FD        4557            mov     r5,a
13F2 4C        4558            orl     a,r4
13F3 7000      4559            jnz     L039035?
13F5 020000    4560            ljmp    L039020?
13F8           4561   L039035?:
13F8           4562   ;        main.c:1013: if(RXU1()){
13F8 C004      4563            push    ar4
13FA C005      4564            push    ar5
13FC 120000    4565            lcall   _RXU1
13FF D005      4566            pop     ar5
1401 D004      4567            pop     ar4
1403 4000      4568            jc      L039036?
1405 020000    4569            ljmp    L039012?
1408           4570   L039036?:
1408           4571   ;        main.c:1014: c=getchar1();      
1408 C004      4572            push    ar4
140A C005      4573            push    ar5
140C 120000    4574            lcall   _getchar1
140F AE82      4575            mov     r6,dpl
1411 D005      4576            pop     ar5
1413 D004      4577            pop     ar4
1415           4578   ;        main.c:1015: if(c=='!'){
1415 BE2100    4579            cjne    r6,#0x21,L039037?
1418 8000      4580            sjmp    L039038?
141A           4581   L039037?:
141A 020000    4582            ljmp    L039009?
141D           4583   L039038?:
141D           4584   ;        main.c:1016: getstr1(buff, sizeof(buff)-1);
141D 755013    4585            mov     _getstr1_PARM_2,#0x13
1420 9053C0    4586            mov     dptr,#_buff
1423 75F040    4587            mov     b,#0x40
1426 120000    4588            lcall   _getstr1
1429           4589   ;        main.c:1017: if(strlen(buff)==11){
1429 9053C0    4590            mov     dptr,#_buff
142C 75F040    4591            mov     b,#0x40
142F 120000    4592            lcall   _strlen
1432 AF82      4593            mov     r7,dpl
1434 AA83      4594            mov     r2,dph
1436 BF0B00    4595            cjne    r7,#0x0B,L039039?
1439 BA0000    4596            cjne    r2,#0x00,L039039?
143C 8000      4597            sjmp    L039040?
143E           4598   L039039?:
143E 020000    4599            ljmp    L039012?
1441           4600   L039040?:
1441           4601   ;        main.c:1018: printf("master_messgae_auto_mode: %s\r\n", buff);
1441 74C0      4602            mov     a,#_buff
1443 C0E0      4603            push    acc
1445 7453      4604            mov     a,#(_buff >> 8)
1447 C0E0      4605            push    acc
1449 7440      4606            mov     a,#0x40
144B C0E0      4607            push    acc
144D 7480      4608            mov     a,#__str_7
144F C0E0      4609            push    acc
1451 740E      4610            mov     a,#(__str_7 >> 8)
1453 C0E0      4611            push    acc
1455 7480      4612            mov     a,#0x80
1457 C0E0      4613            push    acc
1459 120000    4614            lcall   _printf
145C E581      4615            mov     a,sp
145E 24FA      4616            add     a,#0xfa
1460 F581      4617            mov     sp,a
1462           4618   ;        main.c:1019: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
1462 74D0      4619            mov     a,#_Auto_mode_slave_command_1_205
1464 C0E0      4620            push    acc
1466 74CF      4621            mov     a,#(_Auto_mode_slave_command_1_205 >> 8)
1468 C0E0      4622            push    acc
146A E4        4623            clr     a
146B C0E0      4624            push    acc
146D 7480      4625            mov     a,#_Auto_mode_slave_dummy_1_205
146F C0E0      4626            push    acc
1471 74D0      4627            mov     a,#(_Auto_mode_slave_dummy_1_205 >> 8)
1473 C0E0      4628            push    acc
1475 E4        4629            clr     a
1476 C0E0      4630            push    acc
1478 7480      4631            mov     a,#_Auto_mode_slave_dummy_1_205
147A C0E0      4632            push    acc
147C 74D0      4633            mov     a,#(_Auto_mode_slave_dummy_1_205 >> 8)
147E C0E0      4634            push    acc
1480 E4        4635            clr     a
1481 C0E0      4636            push    acc
1483 7480      4637            mov     a,#_Auto_mode_slave_dummy_1_205
1485 C0E0      4638            push    acc
1487 74D0      4639            mov     a,#(_Auto_mode_slave_dummy_1_205 >> 8)
1489 C0E0      4640            push    acc
148B E4        4641            clr     a
148C C0E0      4642            push    acc
148E 74C0      4643            mov     a,#__str_8
1490 C0E0      4644            push    acc
1492 740E      4645            mov     a,#(__str_8 >> 8)
1494 C0E0      4646            push    acc
1496 7480      4647            mov     a,#0x80
1498 C0E0      4648            push    acc
149A 74C0      4649            mov     a,#_buff
149C C0E0      4650            push    acc
149E 7453      4651            mov     a,#(_buff >> 8)
14A0 C0E0      4652            push    acc
14A2 7440      4653            mov     a,#0x40
14A4 C0E0      4654            push    acc
14A6 120000    4655            lcall   _sscanf
14A9 E581      4656            mov     a,sp
14AB 24EE      4657            add     a,#0xee
14AD F581      4658            mov     sp,a
14AF           4659   ;        main.c:1020: if(command) state_res = 1;
14AF 90CFD0    4660            mov     dptr,#_Auto_mode_slave_command_1_205
14B2 E0        4661            movx    a,@dptr
14B3 FF        4662            mov     r7,a
14B4 A3        4663            inc     dptr
14B5 E0        4664            movx    a,@dptr
14B6 FA        4665            mov     r2,a
14B7 4F        4666            orl     a,r7
14B8 6000      4667            jz      L039002?
14BA 90D030    4668            mov     dptr,#_Auto_mode_slave_state_res_1_205
14BD 7401      4669            mov     a,#0x01
14BF F0        4670            movx    @dptr,a
14C0 E4        4671            clr     a
14C1 A3        4672            inc     dptr
14C2 F0        4673            movx    @dptr,a
14C3 8000      4674            sjmp    L039012?
14C5           4675   L039002?:
14C5           4676   ;        main.c:1021: else state_res = 0;
14C5 90D030    4677            mov     dptr,#_Auto_mode_slave_state_res_1_205
14C8 E4        4678            clr     a
14C9 F0        4679            movx    @dptr,a
14CA A3        4680            inc     dptr
14CB F0        4681            movx    @dptr,a
14CC 8000      4682            sjmp    L039012?
14CE           4683   L039009?:
14CE           4684   ;        main.c:1027: else if(c=='@'){
14CE BE40C0    4685            cjne    r6,#0x40,L039012?
14D1           4686   ;        main.c:1028: sprintf(buff, "%01d,%02d,%ld,%05d,%4.1f\n", state_res, count,freq100, 0, curr_angle);
14D1 904BF0    4687            mov     dptr,#_curr_angle
14D4 E0        4688            movx    a,@dptr
14D5 C0E0      4689            push    acc
14D7 A3        4690            inc     dptr
14D8 E0        4691            movx    a,@dptr
14D9 C0E0      4692            push    acc
14DB A3        4693            inc     dptr
14DC E0        4694            movx    a,@dptr
14DD C0E0      4695            push    acc
14DF A3        4696            inc     dptr
14E0 E0        4697            movx    a,@dptr
14E1 C0E0      4698            push    acc
14E3 E4        4699            clr     a
14E4 C0E0      4700            push    acc
14E6 C0E0      4701            push    acc
14E8 905380    4702            mov     dptr,#_freq100
14EB E0        4703            movx    a,@dptr
14EC C0E0      4704            push    acc
14EE A3        4705            inc     dptr
14EF E0        4706            movx    a,@dptr
14F0 C0E0      4707            push    acc
14F2 A3        4708            inc     dptr
14F3 E0        4709            movx    a,@dptr
14F4 C0E0      4710            push    acc
14F6 A3        4711            inc     dptr
14F7 E0        4712            movx    a,@dptr
14F8 C0E0      4713            push    acc
14FA C0E0      4714            push    _Auto_mode_slave_sloc0_1_0
14FC C0E1      4715            push    (_Auto_mode_slave_sloc0_1_0 + 1)
14FE C004      4716            push    ar4
1500 C005      4717            push    ar5
1502 7480      4718            mov     a,#__str_9
1504 C0E0      4719            push    acc
1506 740F      4720            mov     a,#(__str_9 >> 8)
1508 C0E0      4721            push    acc
150A 7480      4722            mov     a,#0x80
150C C0E0      4723            push    acc
150E 74C0      4724            mov     a,#_buff
1510 C0E0      4725            push    acc
1512 7453      4726            mov     a,#(_buff >> 8)
1514 C0E0      4727            push    acc
1516 7440      4728            mov     a,#0x40
1518 C0E0      4729            push    acc
151A 120000    4730            lcall   _sprintf
151D E581      4731            mov     a,sp
151F 24EC      4732            add     a,#0xec
1521 F581      4733            mov     sp,a
1523           4734   ;        main.c:1029: waitms(5); 
1523 900005    4735            mov     dptr,#0x0005
1526 120000    4736            lcall   _waitms
1529           4737   ;        main.c:1030: sendstr1(buff);
1529 9053C0    4738            mov     dptr,#_buff
152C 75F040    4739            mov     b,#0x40
152F 120000    4740            lcall   _sendstr1
1532           4741   L039012?:
1532           4742   ;        main.c:1035: Move_forward();
1532 120000    4743            lcall   _Move_forward
1535           4744   ;        main.c:1037: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
1535 758209    4745            mov     dpl,#0x09
1538 120000    4746            lcall   _ADC_at_Pin
153B E582      4747            mov     a,dpl
153D 8583F0    4748            mov     b,dph
1540 905340    4749            mov     dptr,#_d1
1543 F0        4750            movx    @dptr,a
1544 A3        4751            inc     dptr
1545 E5F0      4752            mov     a,b
1547 F0        4753            movx    @dptr,a
1548           4754   ;        main.c:1038: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
1548 75820A    4755            mov     dpl,#0x0A
154B 120000    4756            lcall   _ADC_at_Pin
154E AA82      4757            mov     r2,dpl
1550 AB83      4758            mov     r3,dph
1552 905300    4759            mov     dptr,#_d2
1555 EA        4760            mov     a,r2
1556 F0        4761            movx    @dptr,a
1557 A3        4762            inc     dptr
1558 EB        4763            mov     a,r3
1559 F0        4764            movx    @dptr,a
155A           4765   ;        main.c:1039: bound = check_bound(d1,d2);
155A 905340    4766            mov     dptr,#_d1
155D E0        4767            movx    a,@dptr
155E FC        4768            mov     r4,a
155F A3        4769            inc     dptr
1560 E0        4770            movx    a,@dptr
1561 FD        4771            mov     r5,a
1562 8A90      4772            mov     _check_bound_PARM_2,r2
1564 8B91      4773            mov     (_check_bound_PARM_2 + 1),r3
1566 8C82      4774            mov     dpl,r4
1568 8D83      4775            mov     dph,r5
156A 120000    4776            lcall   _check_bound
156D AA82      4777            mov     r2,dpl
156F AB83      4778            mov     r3,dph
1571           4779   ;        main.c:1040: printf("f:%04ld, d1:%d, d2:%d, bound_dectect: %d\r\n",freq100, d1,d2,bound);
1571 C002      4780            push    ar2
1573 C003      4781            push    ar3
1575 C002      4782            push    ar2
1577 C003      4783            push    ar3
1579 905300    4784            mov     dptr,#_d2
157C E0        4785            movx    a,@dptr
157D C0E0      4786            push    acc
157F A3        4787            inc     dptr
1580 E0        4788            movx    a,@dptr
1581 C0E0      4789            push    acc
1583 905340    4790            mov     dptr,#_d1
1586 E0        4791            movx    a,@dptr
1587 C0E0      4792            push    acc
1589 A3        4793            inc     dptr
158A E0        4794            movx    a,@dptr
158B C0E0      4795            push    acc
158D 905380    4796            mov     dptr,#_freq100
1590 E0        4797            movx    a,@dptr
1591 C0E0      4798            push    acc
1593 A3        4799            inc     dptr
1594 E0        4800            movx    a,@dptr
1595 C0E0      4801            push    acc
1597 A3        4802            inc     dptr
1598 E0        4803            movx    a,@dptr
1599 C0E0      4804            push    acc
159B A3        4805            inc     dptr
159C E0        4806            movx    a,@dptr
159D C0E0      4807            push    acc
159F 7400      4808            mov     a,#__str_10
15A1 C0E0      4809            push    acc
15A3 7410      4810            mov     a,#(__str_10 >> 8)
15A5 C0E0      4811            push    acc
15A7 7480      4812            mov     a,#0x80
15A9 C0E0      4813            push    acc
15AB 120000    4814            lcall   _printf
15AE E581      4815            mov     a,sp
15B0 24F3      4816            add     a,#0xf3
15B2 F581      4817            mov     sp,a
15B4 D003      4818            pop     ar3
15B6 D002      4819            pop     ar2
15B8           4820   ;        main.c:1042: if (freq100>=5340){
15B8 905380    4821            mov     dptr,#_freq100
15BB E0        4822            movx    a,@dptr
15BC FC        4823            mov     r4,a
15BD A3        4824            inc     dptr
15BE E0        4825            movx    a,@dptr
15BF FD        4826            mov     r5,a
15C0 A3        4827            inc     dptr
15C1 E0        4828            movx    a,@dptr
15C2 FE        4829            mov     r6,a
15C3 A3        4830            inc     dptr
15C4 E0        4831            movx    a,@dptr
15C5 FF        4832            mov     r7,a
15C6 C3        4833            clr     c
15C7 EC        4834            mov     a,r4
15C8 94DC      4835            subb    a,#0xDC
15CA ED        4836            mov     a,r5
15CB 9414      4837            subb    a,#0x14
15CD EE        4838            mov     a,r6
15CE 9400      4839            subb    a,#0x00
15D0 EF        4840            mov     a,r7
15D1 6480      4841            xrl     a,#0x80
15D3 9480      4842            subb    a,#0x80
15D5 4000      4843            jc      L039014?
15D7           4844   ;        main.c:1043: mea_yes = 0;
15D7 904BB0    4845            mov     dptr,#_mea_yes
15DA E4        4846            clr     a
15DB F0        4847            movx    @dptr,a
15DC           4848   ;        main.c:1044: Move_back_ms(300);
15DC 90012C    4849            mov     dptr,#0x012C
15DF C002      4850            push    ar2
15E1 C003      4851            push    ar3
15E3 120000    4852            lcall   _Move_back_ms
15E6           4853   ;        main.c:1045: waitms(100);
15E6 900064    4854            mov     dptr,#0x0064
15E9 120000    4855            lcall   _waitms
15EC           4856   ;        main.c:1046: servo_pick();
15EC 120000    4857            lcall   _servo_pick
15EF D003      4858            pop     ar3
15F1 D002      4859            pop     ar2
15F3           4860   ;        main.c:1047: count++;
15F3 05E0      4861            inc     _Auto_mode_slave_sloc0_1_0
15F5 E4        4862            clr     a
15F6 B5E080    4863            cjne    a,_Auto_mode_slave_sloc0_1_0,L039045?
15F9 05E1      4864            inc     (_Auto_mode_slave_sloc0_1_0 + 1)
15FB           4865   L039045?:
15FB           4866   ;        main.c:1048: waitms(100);
15FB 900064    4867            mov     dptr,#0x0064
15FE C002      4868            push    ar2
1600 C003      4869            push    ar3
1602 120000    4870            lcall   _waitms
1605           4871   ;        main.c:1049: mea_yes = 1;
1605 904BB0    4872            mov     dptr,#_mea_yes
1608 7401      4873            mov     a,#0x01
160A F0        4874            movx    @dptr,a
160B           4875   ;        main.c:1050: Move_forward();
160B 120000    4876            lcall   _Move_forward
160E D003      4877            pop     ar3
1610 D002      4878            pop     ar2
1612           4879   L039014?:
1612           4880   ;        main.c:1053: if(bound == 1){
1612 BA01C0    4881            cjne    r2,#0x01,L039046?
1615 BB00C0    4882            cjne    r3,#0x00,L039046?
1618 8000      4883            sjmp    L039047?
161A           4884   L039046?:
161A 020000    4885            ljmp    L039018?
161D           4886   L039047?:
161D           4887   ;        main.c:1054: Move_back_ms(500);
161D 9001F4    4888            mov     dptr,#0x01F4
1620 120000    4889            lcall   _Move_back_ms
1623           4890   ;        main.c:1055: waitms(100);
1623 900064    4891            mov     dptr,#0x0064
1626 120000    4892            lcall   _waitms
1629           4893   ;        main.c:1056: curr_angle = Read_angle();
1629 120000    4894            lcall   _Read_angle
162C AA82      4895            mov     r2,dpl
162E AB83      4896            mov     r3,dph
1630 ACF0      4897            mov     r4,b
1632 FD        4898            mov     r5,a
1633 904BF0    4899            mov     dptr,#_curr_angle
1636 EA        4900            mov     a,r2
1637 F0        4901            movx    @dptr,a
1638 A3        4902            inc     dptr
1639 EB        4903            mov     a,r3
163A F0        4904            movx    @dptr,a
163B A3        4905            inc     dptr
163C EC        4906            mov     a,r4
163D F0        4907            movx    @dptr,a
163E A3        4908            inc     dptr
163F ED        4909            mov     a,r5
1640 F0        4910            movx    @dptr,a
1641           4911   ;        main.c:1057: angle = get_random_90_250();
1641 120000    4912            lcall   _get_random_90_250
1644 858200    4913            mov     __mulint_PARM_2,dpl
1647 858301    4914            mov     (__mulint_PARM_2 + 1),dph
164A           4915   ;        main.c:1058: Right_angle(angle*600/90);
164A 900258    4916            mov     dptr,#0x0258
164D 120000    4917            lcall   __mulint
1650 AA82      4918            mov     r2,dpl
1652 AB83      4919            mov     r3,dph
1654 75005A    4920            mov     __divuint_PARM_2,#0x5A
1657 E4        4921            clr     a
1658 F501      4922            mov     (__divuint_PARM_2 + 1),a
165A 8A82      4923            mov     dpl,r2
165C 8B83      4924            mov     dph,r3
165E 120000    4925            lcall   __divuint
1661 120000    4926            lcall   _Right_angle
1664           4927   ;        main.c:1059: curr_angle = fabsf(curr_angle - Read_angle());
1664 120000    4928            lcall   _Read_angle
1667 858230    4929            mov     _Auto_mode_slave_sloc1_1_0,dpl
166A 858331    4930            mov     (_Auto_mode_slave_sloc1_1_0 + 1),dph
166D 85F032    4931            mov     (_Auto_mode_slave_sloc1_1_0 + 2),b
1670 F533      4932            mov     (_Auto_mode_slave_sloc1_1_0 + 3),a
1672 904BF0    4933            mov     dptr,#_curr_angle
1675 E0        4934            movx    a,@dptr
1676 FE        4935            mov     r6,a
1677 A3        4936            inc     dptr
1678 E0        4937            movx    a,@dptr
1679 FF        4938            mov     r7,a
167A A3        4939            inc     dptr
167B E0        4940            movx    a,@dptr
167C FA        4941            mov     r2,a
167D A3        4942            inc     dptr
167E E0        4943            movx    a,@dptr
167F FB        4944            mov     r3,a
1680 C030      4945            push    _Auto_mode_slave_sloc1_1_0
1682 C031      4946            push    (_Auto_mode_slave_sloc1_1_0 + 1)
1684 C032      4947            push    (_Auto_mode_slave_sloc1_1_0 + 2)
1686 C033      4948            push    (_Auto_mode_slave_sloc1_1_0 + 3)
1688 8E82      4949            mov     dpl,r6
168A 8F83      4950            mov     dph,r7
168C 8AF0      4951            mov     b,r2
168E EB        4952            mov     a,r3
168F 120000    4953            lcall   ___fssub
1692 AA82      4954            mov     r2,dpl
1694 AB83      4955            mov     r3,dph
1696 ACF0      4956            mov     r4,b
1698 FD        4957            mov     r5,a
1699 E581      4958            mov     a,sp
169B 24FC      4959            add     a,#0xfc
169D F581      4960            mov     sp,a
169F 8A82      4961            mov     dpl,r2
16A1 8B83      4962            mov     dph,r3
16A3 8CF0      4963            mov     b,r4
16A5 ED        4964            mov     a,r5
16A6 120000    4965            lcall   _fabsf
16A9 AA82      4966            mov     r2,dpl
16AB AB83      4967            mov     r3,dph
16AD ACF0      4968            mov     r4,b
16AF FD        4969            mov     r5,a
16B0 904BF0    4970            mov     dptr,#_curr_angle
16B3 EA        4971            mov     a,r2
16B4 F0        4972            movx    @dptr,a
16B5 A3        4973            inc     dptr
16B6 EB        4974            mov     a,r3
16B7 F0        4975            movx    @dptr,a
16B8 A3        4976            inc     dptr
16B9 EC        4977            mov     a,r4
16BA F0        4978            movx    @dptr,a
16BB A3        4979            inc     dptr
16BC ED        4980            mov     a,r5
16BD F0        4981            movx    @dptr,a
16BE 020000    4982            ljmp    L039018?
16C1           4983   L039020?:
16C1           4984   ;        main.c:1063: printf("Auto mode finished!\r\n");
16C1 7410      4985            mov     a,#__str_11
16C3 C0E0      4986            push    acc
16C5 7412      4987            mov     a,#(__str_11 >> 8)
16C7 C0E0      4988            push    acc
16C9 7480      4989            mov     a,#0x80
16CB C0E0      4990            push    acc
16CD 120000    4991            lcall   _printf
16D0 1581      4992            dec     sp
16D2 1581      4993            dec     sp
16D4 1581      4994            dec     sp
16D6 22        4995            ret
16D7           4996   ;------------------------------------------------------------
16D7           4997   ;Allocation info for local variables in function 'Joystick_Control'
16D7           4998   ;------------------------------------------------------------
16D7           4999   ;vy_ptr                    Allocated with name '_Joystick_Control_PARM_2'
16D7           5000   ;vx_ptr                    Allocated to registers r2 r3 r4 
16D7           5001   ;sloc0                     Allocated with name '_Joystick_Control_sloc0_1_0'
16D7           5002   ;sloc1                     Allocated with name '_Joystick_Control_sloc1_1_0'
16D7           5003   ;sloc2                     Allocated with name '_Joystick_Control_sloc2_1_0'
16D7           5004   ;sloc3                     Allocated with name '_Joystick_Control_sloc3_1_0'
16D7           5005   ;sloc4                     Allocated with name '_Joystick_Control_sloc4_1_0'
16D7           5006   ;sloc5                     Allocated with name '_Joystick_Control_sloc5_1_0'
16D7           5007   ;sloc6                     Allocated with name '_Joystick_Control_sloc6_1_0'
16D7           5008   ;vx                        Allocated with name '_Joystick_Control_vx_1_214'
16D7           5009   ;vy                        Allocated with name '_Joystick_Control_vy_1_214'
16D7           5010   ;vx_error                  Allocated with name '_Joystick_Control_vx_error_1_214'
16D7           5011   ;vy_error                  Allocated with name '_Joystick_Control_vy_error_1_214'
16D7           5012   ;vx_err                    Allocated with name '_Joystick_Control_vx_err_1_214'
16D7           5013   ;vy_err                    Allocated with name '_Joystick_Control_vy_err_1_214'
16D7           5014   ;threshold                 Allocated with name '_Joystick_Control_threshold_1_214'
16D7           5015   ;------------------------------------------------------------
16D7           5016   ;        main.c:1066: void Joystick_Control(int *vx_ptr, int *vy_ptr)
16D7           5017   ;        -----------------------------------------
16D7           5018   ;         function Joystick_Control
16D7           5019   ;        -----------------------------------------
16D7           5020   _Joystick_Control:
16D7           5021   ;        main.c:1071: vx = *vx_ptr; 
16D7 120000    5022            lcall   __gptrget
16DA F580      5023            mov     _Joystick_Control_sloc0_1_0,a
16DC A3        5024            inc     dptr
16DD 120000    5025            lcall   __gptrget
16E0 F581      5026            mov     (_Joystick_Control_sloc0_1_0 + 1),a
16E2           5027   ;        main.c:1072: vy = *vy_ptr; 
16E2 AC10      5028            mov     r4,_Joystick_Control_PARM_2
16E4 AD11      5029            mov     r5,(_Joystick_Control_PARM_2 + 1)
16E6 AE12      5030            mov     r6,(_Joystick_Control_PARM_2 + 2)
16E8 8C82      5031            mov     dpl,r4
16EA 8D83      5032            mov     dph,r5
16EC 8EF0      5033            mov     b,r6
16EE 120000    5034            lcall   __gptrget
16F1 FC        5035            mov     r4,a
16F2 A3        5036            inc     dptr
16F3 120000    5037            lcall   __gptrget
16F6 FD        5038            mov     r5,a
16F7           5039   ;        main.c:1074: vx_error = abs(vx-vx_thres)*100/vx_thres; 
16F7 904E00    5040            mov     dptr,#_vx_thres
16FA E0        5041            movx    a,@dptr
16FB FE        5042            mov     r6,a
16FC A3        5043            inc     dptr
16FD E0        5044            movx    a,@dptr
16FE FF        5045            mov     r7,a
16FF E580      5046            mov     a,_Joystick_Control_sloc0_1_0
1701 C3        5047            clr     c
1702 9E        5048            subb    a,r6
1703 F582      5049            mov     dpl,a
1705 E581      5050            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
1707 9F        5051            subb    a,r7
1708 F583      5052            mov     dph,a
170A C004      5053            push    ar4
170C C005      5054            push    ar5
170E 120000    5055            lcall   _abs
1711 858200    5056            mov     __mulint_PARM_2,dpl
1714 858301    5057            mov     (__mulint_PARM_2 + 1),dph
1717 900064    5058            mov     dptr,#0x0064
171A 120000    5059            lcall   __mulint
171D AE82      5060            mov     r6,dpl
171F AF83      5061            mov     r7,dph
1721 904E00    5062            mov     dptr,#_vx_thres
1724 E0        5063            movx    a,@dptr
1725 F500      5064            mov     __divsint_PARM_2,a
1727 A3        5065            inc     dptr
1728 E0        5066            movx    a,@dptr
1729 F501      5067            mov     (__divsint_PARM_2 + 1),a
172B 8E82      5068            mov     dpl,r6
172D 8F83      5069            mov     dph,r7
172F 120000    5070            lcall   __divsint
1732 E582      5071            mov     a,dpl
1734 8583F0    5072            mov     b,dph
1737 D005      5073            pop     ar5
1739 D004      5074            pop     ar4
173B 90D0E0    5075            mov     dptr,#_Joystick_Control_vx_error_1_214
173E F0        5076            movx    @dptr,a
173F A3        5077            inc     dptr
1740 E5F0      5078            mov     a,b
1742 F0        5079            movx    @dptr,a
1743           5080   ;        main.c:1075: vy_error = abs(vy-vy_thres)*100/vy_thres; 
1743 904DC0    5081            mov     dptr,#_vy_thres
1746 E0        5082            movx    a,@dptr
1747 FE        5083            mov     r6,a
1748 A3        5084            inc     dptr
1749 E0        5085            movx    a,@dptr
174A FF        5086            mov     r7,a
174B EC        5087            mov     a,r4
174C C3        5088            clr     c
174D 9E        5089            subb    a,r6
174E F582      5090            mov     dpl,a
1750 ED        5091            mov     a,r5
1751 9F        5092            subb    a,r7
1752 F583      5093            mov     dph,a
1754 C004      5094            push    ar4
1756 C005      5095            push    ar5
1758 120000    5096            lcall   _abs
175B 858200    5097            mov     __mulint_PARM_2,dpl
175E 858301    5098            mov     (__mulint_PARM_2 + 1),dph
1761 900064    5099            mov     dptr,#0x0064
1764 120000    5100            lcall   __mulint
1767 AE82      5101            mov     r6,dpl
1769 AF83      5102            mov     r7,dph
176B 904DC0    5103            mov     dptr,#_vy_thres
176E E0        5104            movx    a,@dptr
176F F520      5105            mov     _Joystick_Control_sloc2_1_0,a
1771 A3        5106            inc     dptr
1772 E0        5107            movx    a,@dptr
1773 F521      5108            mov     (_Joystick_Control_sloc2_1_0 + 1),a
1775 852000    5109            mov     __divsint_PARM_2,_Joystick_Control_sloc2_1_0
1778 852101    5110            mov     (__divsint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
177B           5111   ;        main.c:1076: vx_err = vx-vx_thres; 
177B 8E82      5112            mov     dpl,r6
177D 8F83      5113            mov     dph,r7
177F 120000    5114            lcall   __divsint
1782 AE82      5115            mov     r6,dpl
1784 AF83      5116            mov     r7,dph
1786 D005      5117            pop     ar5
1788 D004      5118            pop     ar4
178A 904E00    5119            mov     dptr,#_vx_thres
178D E0        5120            movx    a,@dptr
178E FA        5121            mov     r2,a
178F A3        5122            inc     dptr
1790 E0        5123            movx    a,@dptr
1791 FB        5124            mov     r3,a
1792 E580      5125            mov     a,_Joystick_Control_sloc0_1_0
1794 C3        5126            clr     c
1795 9A        5127            subb    a,r2
1796 F5C0      5128            mov     _Joystick_Control_sloc4_1_0,a
1798 E581      5129            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
179A 9B        5130            subb    a,r3
179B F5C1      5131            mov     (_Joystick_Control_sloc4_1_0 + 1),a
179D           5132   ;        main.c:1077: vy_err = vy-vy_thres; 
179D EC        5133            mov     a,r4
179E C3        5134            clr     c
179F 9520      5135            subb    a,_Joystick_Control_sloc2_1_0
17A1 F580      5136            mov     _Joystick_Control_sloc0_1_0,a
17A3 ED        5137            mov     a,r5
17A4 9521      5138            subb    a,(_Joystick_Control_sloc2_1_0 + 1)
17A6 F581      5139            mov     (_Joystick_Control_sloc0_1_0 + 1),a
17A8           5140   ;        main.c:1078: pwm_left = 0; 
17A8 904F80    5141            mov     dptr,#_pwm_left
17AB           5142   ;        main.c:1079: pwm_right = 0; 
17AB E4        5143            clr     a
17AC F0        5144            movx    @dptr,a
17AD 904F40    5145            mov     dptr,#_pwm_right
17B0 F0        5146            movx    @dptr,a
17B1           5147   ;        main.c:1081: if ((vy_error>5) && (vx_error<5)){
17B1 C3        5148            clr     c
17B2 7405      5149            mov     a,#0x05
17B4 9E        5150            subb    a,r6
17B5 E4        5151            clr     a
17B6 6480      5152            xrl     a,#0x80
17B8 8FF0      5153            mov     b,r7
17BA 63F080    5154            xrl     b,#0x80
17BD 95F0      5155            subb    a,b
17BF E4        5156            clr     a
17C0 33        5157            rlc     a
17C1 F5D0      5158            mov     _Joystick_Control_sloc1_1_0,a
17C3 7000      5159            jnz     L040056?
17C5 020000    5160            ljmp    L040005?
17C8           5161   L040056?:
17C8 90D0E0    5162            mov     dptr,#_Joystick_Control_vx_error_1_214
17CB E0        5163            movx    a,@dptr
17CC FA        5164            mov     r2,a
17CD A3        5165            inc     dptr
17CE E0        5166            movx    a,@dptr
17CF FB        5167            mov     r3,a
17D0 C3        5168            clr     c
17D1 EA        5169            mov     a,r2
17D2 9405      5170            subb    a,#0x05
17D4 EB        5171            mov     a,r3
17D5 6480      5172            xrl     a,#0x80
17D7 9480      5173            subb    a,#0x80
17D9 4000      5174            jc      L040057?
17DB 020000    5175            ljmp    L040005?
17DE           5176   L040057?:
17DE           5177   ;        main.c:1082: pwm_left = vy_error; 
17DE 904F80    5178            mov     dptr,#_pwm_left
17E1 EE        5179            mov     a,r6
17E2 F0        5180            movx    @dptr,a
17E3           5181   ;        main.c:1083: pwm_right = vy_error * pwm_corr; 
17E3 8E82      5182            mov     dpl,r6
17E5 8F83      5183            mov     dph,r7
17E7 C004      5184            push    ar4
17E9 C005      5185            push    ar5
17EB C006      5186            push    ar6
17ED C007      5187            push    ar7
17EF 120000    5188            lcall   ___sint2fs
17F2 AA82      5189            mov     r2,dpl
17F4 AB83      5190            mov     r3,dph
17F6 A8F0      5191            mov     r0,b
17F8 F9        5192            mov     r1,a
17F9 904C30    5193            mov     dptr,#_pwm_corr
17FC E0        5194            movx    a,@dptr
17FD C0E0      5195            push    acc
17FF A3        5196            inc     dptr
1800 E0        5197            movx    a,@dptr
1801 C0E0      5198            push    acc
1803 A3        5199            inc     dptr
1804 E0        5200            movx    a,@dptr
1805 C0E0      5201            push    acc
1807 A3        5202            inc     dptr
1808 E0        5203            movx    a,@dptr
1809 C0E0      5204            push    acc
180B 8A82      5205            mov     dpl,r2
180D 8B83      5206            mov     dph,r3
180F 88F0      5207            mov     b,r0
1811 E9        5208            mov     a,r1
1812 120000    5209            lcall   ___fsmul
1815 AA82      5210            mov     r2,dpl
1817 AB83      5211            mov     r3,dph
1819 A8F0      5212            mov     r0,b
181B F9        5213            mov     r1,a
181C E581      5214            mov     a,sp
181E 24FC      5215            add     a,#0xfc
1820 F581      5216            mov     sp,a
1822 8A82      5217            mov     dpl,r2
1824 8B83      5218            mov     dph,r3
1826 88F0      5219            mov     b,r0
1828 E9        5220            mov     a,r1
1829 120000    5221            lcall   ___fs2uchar
182C 858270    5222            mov     _Joystick_Control_sloc3_1_0,dpl
182F D007      5223            pop     ar7
1831 D006      5224            pop     ar6
1833 D005      5225            pop     ar5
1835 D004      5226            pop     ar4
1837 904F40    5227            mov     dptr,#_pwm_right
183A E570      5228            mov     a,_Joystick_Control_sloc3_1_0
183C F0        5229            movx    @dptr,a
183D           5230   ;        main.c:1084: if (vy_err > 0){ //move forward
183D C3        5231            clr     c
183E E4        5232            clr     a
183F 9580      5233            subb    a,_Joystick_Control_sloc0_1_0
1841 E4        5234            clr     a
1842 6480      5235            xrl     a,#0x80
1844 8581F0    5236            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
1847 63F080    5237            xrl     b,#0x80
184A 95F0      5238            subb    a,b
184C 5000      5239            jnc     L040002?
184E           5240   ;        main.c:1085: L_motor_dir = 0; 
184E 904F00    5241            mov     dptr,#_L_motor_dir
1851           5242   ;        main.c:1086: R_motor_dir = 0; 
1851 E4        5243            clr     a
1852 F0        5244            movx    @dptr,a
1853 904EC0    5245            mov     dptr,#_R_motor_dir
1856 F0        5246            movx    @dptr,a
1857 8000      5247            sjmp    L040005?
1859           5248   L040002?:
1859           5249   ;        main.c:1089: L_motor_dir = 1; 
1859 904F00    5250            mov     dptr,#_L_motor_dir
185C 7401      5251            mov     a,#0x01
185E F0        5252            movx    @dptr,a
185F           5253   ;        main.c:1090: R_motor_dir = 1; 
185F 904EC0    5254            mov     dptr,#_R_motor_dir
1862 7401      5255            mov     a,#0x01
1864 F0        5256            movx    @dptr,a
1865           5257   ;        main.c:1091: pwm_right *= 1.05;
1865 857082    5258            mov     dpl,_Joystick_Control_sloc3_1_0
1868 C004      5259            push    ar4
186A C005      5260            push    ar5
186C C006      5261            push    ar6
186E C007      5262            push    ar7
1870 120000    5263            lcall   ___uchar2fs
1873 A882      5264            mov     r0,dpl
1875 A983      5265            mov     r1,dph
1877 AAF0      5266            mov     r2,b
1879 FB        5267            mov     r3,a
187A C000      5268            push    ar0
187C C001      5269            push    ar1
187E C002      5270            push    ar2
1880 C003      5271            push    ar3
1882 906666    5272            mov     dptr,#0x6666
1885 75F086    5273            mov     b,#0x86
1888 743F      5274            mov     a,#0x3F
188A 120000    5275            lcall   ___fsmul
188D AA82      5276            mov     r2,dpl
188F AB83      5277            mov     r3,dph
1891 A8F0      5278            mov     r0,b
1893 F9        5279            mov     r1,a
1894 E581      5280            mov     a,sp
1896 24FC      5281            add     a,#0xfc
1898 F581      5282            mov     sp,a
189A 8A82      5283            mov     dpl,r2
189C 8B83      5284            mov     dph,r3
189E 88F0      5285            mov     b,r0
18A0 E9        5286            mov     a,r1
18A1 120000    5287            lcall   ___fs2uchar
18A4 E582      5288            mov     a,dpl
18A6 D007      5289            pop     ar7
18A8 D006      5290            pop     ar6
18AA D005      5291            pop     ar5
18AC D004      5292            pop     ar4
18AE 904F40    5293            mov     dptr,#_pwm_right
18B1 F0        5294            movx    @dptr,a
18B2           5295   ;        main.c:1162: return; 
18B2           5296   ;        main.c:1091: pwm_right *= 1.05;
18B2           5297   L040005?:
18B2           5298   ;        main.c:1094: if ((vx_error>5)&&(vy_error<5)){
18B2 90D0E0    5299            mov     dptr,#_Joystick_Control_vx_error_1_214
18B5 E0        5300            movx    a,@dptr
18B6 F560      5301            mov     _Joystick_Control_sloc6_1_0,a
18B8 A3        5302            inc     dptr
18B9 E0        5303            movx    a,@dptr
18BA F561      5304            mov     (_Joystick_Control_sloc6_1_0 + 1),a
18BC C3        5305            clr     c
18BD 7405      5306            mov     a,#0x05
18BF 9560      5307            subb    a,_Joystick_Control_sloc6_1_0
18C1 E4        5308            clr     a
18C2 6480      5309            xrl     a,#0x80
18C4 8561F0    5310            mov     b,(_Joystick_Control_sloc6_1_0 + 1)
18C7 63F080    5311            xrl     b,#0x80
18CA 95F0      5312            subb    a,b
18CC E4        5313            clr     a
18CD 33        5314            rlc     a
18CE F570      5315            mov     _Joystick_Control_sloc3_1_0,a
18D0 7000      5316            jnz     L040059?
18D2 020000    5317            ljmp    L040011?
18D5           5318   L040059?:
18D5 C3        5319            clr     c
18D6 EE        5320            mov     a,r6
18D7 9405      5321            subb    a,#0x05
18D9 EF        5322            mov     a,r7
18DA 6480      5323            xrl     a,#0x80
18DC 9480      5324            subb    a,#0x80
18DE 4000      5325            jc      L040060?
18E0 020000    5326            ljmp    L040011?
18E3           5327   L040060?:
18E3           5328   ;        main.c:1095: pwm_left = vx_error; 
18E3 C004      5329            push    ar4
18E5 C005      5330            push    ar5
18E7 904F80    5331            mov     dptr,#_pwm_left
18EA E560      5332            mov     a,_Joystick_Control_sloc6_1_0
18EC F0        5333            movx    @dptr,a
18ED           5334   ;        main.c:1096: pwm_right = vx_error * pwm_corr; 
18ED 856082    5335            mov     dpl,_Joystick_Control_sloc6_1_0
18F0 856183    5336            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
18F3 C006      5337            push    ar6
18F5 C007      5338            push    ar7
18F7 120000    5339            lcall   ___sint2fs
18FA AC82      5340            mov     r4,dpl
18FC AD83      5341            mov     r5,dph
18FE AAF0      5342            mov     r2,b
1900 FB        5343            mov     r3,a
1901 904C30    5344            mov     dptr,#_pwm_corr
1904 E0        5345            movx    a,@dptr
1905 C0E0      5346            push    acc
1907 A3        5347            inc     dptr
1908 E0        5348            movx    a,@dptr
1909 C0E0      5349            push    acc
190B A3        5350            inc     dptr
190C E0        5351            movx    a,@dptr
190D C0E0      5352            push    acc
190F A3        5353            inc     dptr
1910 E0        5354            movx    a,@dptr
1911 C0E0      5355            push    acc
1913 8C82      5356            mov     dpl,r4
1915 8D83      5357            mov     dph,r5
1917 8AF0      5358            mov     b,r2
1919 EB        5359            mov     a,r3
191A 120000    5360            lcall   ___fsmul
191D AA82      5361            mov     r2,dpl
191F AB83      5362            mov     r3,dph
1921 ACF0      5363            mov     r4,b
1923 FD        5364            mov     r5,a
1924 E581      5365            mov     a,sp
1926 24FC      5366            add     a,#0xfc
1928 F581      5367            mov     sp,a
192A D007      5368            pop     ar7
192C D006      5369            pop     ar6
192E 8A82      5370            mov     dpl,r2
1930 8B83      5371            mov     dph,r3
1932 8CF0      5372            mov     b,r4
1934 ED        5373            mov     a,r5
1935 C004      5374            push    ar4
1937 C005      5375            push    ar5
1939 C006      5376            push    ar6
193B C007      5377            push    ar7
193D 120000    5378            lcall   ___fs2uchar
1940 E582      5379            mov     a,dpl
1942 D007      5380            pop     ar7
1944 D006      5381            pop     ar6
1946 D005      5382            pop     ar5
1948 D004      5383            pop     ar4
194A 904F40    5384            mov     dptr,#_pwm_right
194D F0        5385            movx    @dptr,a
194E           5386   ;        main.c:1097: if (vx_err > 0){ //turn right
194E C3        5387            clr     c
194F E4        5388            clr     a
1950 95C0      5389            subb    a,_Joystick_Control_sloc4_1_0
1952 E4        5390            clr     a
1953 6480      5391            xrl     a,#0x80
1955 85C1F0    5392            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
1958 63F080    5393            xrl     b,#0x80
195B 95F0      5394            subb    a,b
195D D005      5395            pop     ar5
195F D004      5396            pop     ar4
1961 5000      5397            jnc     L040008?
1963           5398   ;        main.c:1098: L_motor_dir = 1; 
1963 904F00    5399            mov     dptr,#_L_motor_dir
1966 7401      5400            mov     a,#0x01
1968 F0        5401            movx    @dptr,a
1969           5402   ;        main.c:1099: R_motor_dir = 0; 
1969 904EC0    5403            mov     dptr,#_R_motor_dir
196C E4        5404            clr     a
196D F0        5405            movx    @dptr,a
196E 8000      5406            sjmp    L040011?
1970           5407   L040008?:
1970           5408   ;        main.c:1102: L_motor_dir = 0; 
1970 904F00    5409            mov     dptr,#_L_motor_dir
1973 E4        5410            clr     a
1974 F0        5411            movx    @dptr,a
1975           5412   ;        main.c:1103: R_motor_dir = 1; 
1975 904EC0    5413            mov     dptr,#_R_motor_dir
1978 7401      5414            mov     a,#0x01
197A F0        5415            movx    @dptr,a
197B           5416   L040011?:
197B           5417   ;        main.c:1106: if ((vx_error>5)&&(vy_error)>5){
197B E570      5418            mov     a,_Joystick_Control_sloc3_1_0
197D 7000      5419            jnz     L040062?
197F 22        5420            ret
1980           5421   L040062?:
1980 E5D0      5422            mov     a,_Joystick_Control_sloc1_1_0
1982 7000      5423            jnz     L040063?
1984 22        5424            ret
1985           5425   L040063?:
1985           5426   ;        main.c:1108: if (vy_err>0){
1985 C3        5427            clr     c
1986 E4        5428            clr     a
1987 9580      5429            subb    a,_Joystick_Control_sloc0_1_0
1989 E4        5430            clr     a
198A 6480      5431            xrl     a,#0x80
198C 8581F0    5432            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
198F 63F080    5433            xrl     b,#0x80
1992 95F0      5434            subb    a,b
1994 4000      5435            jc      L040064?
1996 020000    5436            ljmp    L040023?
1999           5437   L040064?:
1999           5438   ;        main.c:1109: L_motor_dir = 0; 
1999 904F00    5439            mov     dptr,#_L_motor_dir
199C           5440   ;        main.c:1110: R_motor_dir = 0; 
199C E4        5441            clr     a
199D F0        5442            movx    @dptr,a
199E 904EC0    5443            mov     dptr,#_R_motor_dir
19A1 F0        5444            movx    @dptr,a
19A2           5445   ;        main.c:1112: if (vx_err>0){
19A2 C3        5446            clr     c
19A3 E4        5447            clr     a
19A4 95C0      5448            subb    a,_Joystick_Control_sloc4_1_0
19A6 E4        5449            clr     a
19A7 6480      5450            xrl     a,#0x80
19A9 85C1F0    5451            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
19AC 63F080    5452            xrl     b,#0x80
19AF 95F0      5453            subb    a,b
19B1 4000      5454            jc      L040065?
19B3 020000    5455            ljmp    L040020?
19B6           5456   L040065?:
19B6           5457   ;        main.c:1113: if (vy*100<=vy_thres*100/2){
19B6 8C00      5458            mov     __mulint_PARM_2,r4
19B8 8D01      5459            mov     (__mulint_PARM_2 + 1),r5
19BA 900064    5460            mov     dptr,#0x0064
19BD C004      5461            push    ar4
19BF C005      5462            push    ar5
19C1 C006      5463            push    ar6
19C3 C007      5464            push    ar7
19C5 120000    5465            lcall   __mulint
19C8 AA82      5466            mov     r2,dpl
19CA AB83      5467            mov     r3,dph
19CC D007      5468            pop     ar7
19CE D006      5469            pop     ar6
19D0 D005      5470            pop     ar5
19D2 D004      5471            pop     ar4
19D4 852000    5472            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
19D7 852101    5473            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
19DA 900064    5474            mov     dptr,#0x0064
19DD C002      5475            push    ar2
19DF C003      5476            push    ar3
19E1 C004      5477            push    ar4
19E3 C005      5478            push    ar5
19E5 C006      5479            push    ar6
19E7 C007      5480            push    ar7
19E9 120000    5481            lcall   __mulint
19EC A882      5482            mov     r0,dpl
19EE A983      5483            mov     r1,dph
19F0 750002    5484            mov     __divsint_PARM_2,#0x02
19F3 E4        5485            clr     a
19F4 F501      5486            mov     (__divsint_PARM_2 + 1),a
19F6 8882      5487            mov     dpl,r0
19F8 8983      5488            mov     dph,r1
19FA 120000    5489            lcall   __divsint
19FD A882      5490            mov     r0,dpl
19FF A983      5491            mov     r1,dph
1A01 D007      5492            pop     ar7
1A03 D006      5493            pop     ar6
1A05 D005      5494            pop     ar5
1A07 D004      5495            pop     ar4
1A09 D003      5496            pop     ar3
1A0B D002      5497            pop     ar2
1A0D C3        5498            clr     c
1A0E E8        5499            mov     a,r0
1A0F 9A        5500            subb    a,r2
1A10 E9        5501            mov     a,r1
1A11 6480      5502            xrl     a,#0x80
1A13 8BF0      5503            mov     b,r3
1A15 63F080    5504            xrl     b,#0x80
1A18 95F0      5505            subb    a,b
1A1A 5000      5506            jnc     L040066?
1A1C 020000    5507            ljmp    L040014?
1A1F           5508   L040066?:
1A1F           5509   ;        main.c:1114: pwm_left = vy_error; 
1A1F C004      5510            push    ar4
1A21 C005      5511            push    ar5
1A23 904F80    5512            mov     dptr,#_pwm_left
1A26 EE        5513            mov     a,r6
1A27 F0        5514            movx    @dptr,a
1A28           5515   ;        main.c:1115: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
1A28 904C30    5516            mov     dptr,#_pwm_corr
1A2B E0        5517            movx    a,@dptr
1A2C F510      5518            mov     _Joystick_Control_sloc5_1_0,a
1A2E A3        5519            inc     dptr
1A2F E0        5520            movx    a,@dptr
1A30 F511      5521            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1A32 A3        5522            inc     dptr
1A33 E0        5523            movx    a,@dptr
1A34 F512      5524            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1A36 A3        5525            inc     dptr
1A37 E0        5526            movx    a,@dptr
1A38 F513      5527            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1A3A 8E82      5528            mov     dpl,r6
1A3C 8F83      5529            mov     dph,r7
1A3E C006      5530            push    ar6
1A40 C007      5531            push    ar7
1A42 120000    5532            lcall   ___sint2fs
1A45 AA82      5533            mov     r2,dpl
1A47 AB83      5534            mov     r3,dph
1A49 ACF0      5535            mov     r4,b
1A4B FD        5536            mov     r5,a
1A4C C002      5537            push    ar2
1A4E C003      5538            push    ar3
1A50 C004      5539            push    ar4
1A52 C005      5540            push    ar5
1A54 851082    5541            mov     dpl,_Joystick_Control_sloc5_1_0
1A57 851183    5542            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1A5A 8512F0    5543            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1A5D E513      5544            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1A5F 120000    5545            lcall   ___fsmul
1A62 AA82      5546            mov     r2,dpl
1A64 AB83      5547            mov     r3,dph
1A66 ACF0      5548            mov     r4,b
1A68 FD        5549            mov     r5,a
1A69 E581      5550            mov     a,sp
1A6B 24FC      5551            add     a,#0xfc
1A6D F581      5552            mov     sp,a
1A6F D007      5553            pop     ar7
1A71 D006      5554            pop     ar6
1A73 C004      5555            push    ar4
1A75 C005      5556            push    ar5
1A77 C006      5557            push    ar6
1A79 C007      5558            push    ar7
1A7B C002      5559            push    ar2
1A7D C003      5560            push    ar3
1A7F C004      5561            push    ar4
1A81 C005      5562            push    ar5
1A83 900000    5563            mov     dptr,#0x0000
1A86 75F0C8    5564            mov     b,#0xC8
1A89 7442      5565            mov     a,#0x42
1A8B 120000    5566            lcall   ___fsmul
1A8E 858210    5567            mov     _Joystick_Control_sloc5_1_0,dpl
1A91 858311    5568            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1A94 85F012    5569            mov     (_Joystick_Control_sloc5_1_0 + 2),b
1A97 F513      5570            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1A99 E581      5571            mov     a,sp
1A9B 24FC      5572            add     a,#0xfc
1A9D F581      5573            mov     sp,a
1A9F D007      5574            pop     ar7
1AA1 D006      5575            pop     ar6
1AA3 D005      5576            pop     ar5
1AA5 D004      5577            pop     ar4
1AA7 EE        5578            mov     a,r6
1AA8 2560      5579            add     a,_Joystick_Control_sloc6_1_0
1AAA F582      5580            mov     dpl,a
1AAC EF        5581            mov     a,r7
1AAD 3561      5582            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1AAF F583      5583            mov     dph,a
1AB1 C006      5584            push    ar6
1AB3 C007      5585            push    ar7
1AB5 120000    5586            lcall   ___sint2fs
1AB8 AA82      5587            mov     r2,dpl
1ABA AB83      5588            mov     r3,dph
1ABC ACF0      5589            mov     r4,b
1ABE FD        5590            mov     r5,a
1ABF C002      5591            push    ar2
1AC1 C003      5592            push    ar3
1AC3 C004      5593            push    ar4
1AC5 C005      5594            push    ar5
1AC7 851082    5595            mov     dpl,_Joystick_Control_sloc5_1_0
1ACA 851183    5596            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1ACD 8512F0    5597            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1AD0 E513      5598            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1AD2 120000    5599            lcall   ___fsdiv
1AD5 AA82      5600            mov     r2,dpl
1AD7 AB83      5601            mov     r3,dph
1AD9 ACF0      5602            mov     r4,b
1ADB FD        5603            mov     r5,a
1ADC E581      5604            mov     a,sp
1ADE 24FC      5605            add     a,#0xfc
1AE0 F581      5606            mov     sp,a
1AE2 D007      5607            pop     ar7
1AE4 D006      5608            pop     ar6
1AE6 8A82      5609            mov     dpl,r2
1AE8 8B83      5610            mov     dph,r3
1AEA 8CF0      5611            mov     b,r4
1AEC ED        5612            mov     a,r5
1AED C004      5613            push    ar4
1AEF C005      5614            push    ar5
1AF1 C006      5615            push    ar6
1AF3 C007      5616            push    ar7
1AF5 120000    5617            lcall   ___fs2uchar
1AF8 E582      5618            mov     a,dpl
1AFA D007      5619            pop     ar7
1AFC D006      5620            pop     ar6
1AFE D005      5621            pop     ar5
1B00 D004      5622            pop     ar4
1B02 904F40    5623            mov     dptr,#_pwm_right
1B05 F0        5624            movx    @dptr,a
1B06 D005      5625            pop     ar5
1B08 D004      5626            pop     ar4
1B0A 020000    5627            ljmp    L040023?
1B0D           5628   L040014?:
1B0D           5629   ;        main.c:1118: pwm_left = vx_error; 
1B0D C004      5630            push    ar4
1B0F C005      5631            push    ar5
1B11 904F80    5632            mov     dptr,#_pwm_left
1B14 E560      5633            mov     a,_Joystick_Control_sloc6_1_0
1B16 F0        5634            movx    @dptr,a
1B17           5635   ;        main.c:1119: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
1B17 904C30    5636            mov     dptr,#_pwm_corr
1B1A E0        5637            movx    a,@dptr
1B1B F510      5638            mov     _Joystick_Control_sloc5_1_0,a
1B1D A3        5639            inc     dptr
1B1E E0        5640            movx    a,@dptr
1B1F F511      5641            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1B21 A3        5642            inc     dptr
1B22 E0        5643            movx    a,@dptr
1B23 F512      5644            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1B25 A3        5645            inc     dptr
1B26 E0        5646            movx    a,@dptr
1B27 F513      5647            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1B29 856082    5648            mov     dpl,_Joystick_Control_sloc6_1_0
1B2C 856183    5649            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
1B2F C006      5650            push    ar6
1B31 C007      5651            push    ar7
1B33 120000    5652            lcall   ___sint2fs
1B36 AA82      5653            mov     r2,dpl
1B38 AB83      5654            mov     r3,dph
1B3A ACF0      5655            mov     r4,b
1B3C FD        5656            mov     r5,a
1B3D C002      5657            push    ar2
1B3F C003      5658            push    ar3
1B41 C004      5659            push    ar4
1B43 C005      5660            push    ar5
1B45 851082    5661            mov     dpl,_Joystick_Control_sloc5_1_0
1B48 851183    5662            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1B4B 8512F0    5663            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1B4E E513      5664            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1B50 120000    5665            lcall   ___fsmul
1B53 AA82      5666            mov     r2,dpl
1B55 AB83      5667            mov     r3,dph
1B57 ACF0      5668            mov     r4,b
1B59 FD        5669            mov     r5,a
1B5A E581      5670            mov     a,sp
1B5C 24FC      5671            add     a,#0xfc
1B5E F581      5672            mov     sp,a
1B60 D007      5673            pop     ar7
1B62 D006      5674            pop     ar6
1B64 C004      5675            push    ar4
1B66 C005      5676            push    ar5
1B68 C006      5677            push    ar6
1B6A C007      5678            push    ar7
1B6C C002      5679            push    ar2
1B6E C003      5680            push    ar3
1B70 C004      5681            push    ar4
1B72 C005      5682            push    ar5
1B74 900000    5683            mov     dptr,#0x0000
1B77 75F0C8    5684            mov     b,#0xC8
1B7A 7442      5685            mov     a,#0x42
1B7C 120000    5686            lcall   ___fsmul
1B7F 858210    5687            mov     _Joystick_Control_sloc5_1_0,dpl
1B82 858311    5688            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1B85 85F012    5689            mov     (_Joystick_Control_sloc5_1_0 + 2),b
1B88 F513      5690            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1B8A E581      5691            mov     a,sp
1B8C 24FC      5692            add     a,#0xfc
1B8E F581      5693            mov     sp,a
1B90 D007      5694            pop     ar7
1B92 D006      5695            pop     ar6
1B94 D005      5696            pop     ar5
1B96 D004      5697            pop     ar4
1B98 EE        5698            mov     a,r6
1B99 2560      5699            add     a,_Joystick_Control_sloc6_1_0
1B9B F582      5700            mov     dpl,a
1B9D EF        5701            mov     a,r7
1B9E 3561      5702            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1BA0 F583      5703            mov     dph,a
1BA2 C006      5704            push    ar6
1BA4 C007      5705            push    ar7
1BA6 120000    5706            lcall   ___sint2fs
1BA9 AA82      5707            mov     r2,dpl
1BAB AB83      5708            mov     r3,dph
1BAD ACF0      5709            mov     r4,b
1BAF FD        5710            mov     r5,a
1BB0 C002      5711            push    ar2
1BB2 C003      5712            push    ar3
1BB4 C004      5713            push    ar4
1BB6 C005      5714            push    ar5
1BB8 851082    5715            mov     dpl,_Joystick_Control_sloc5_1_0
1BBB 851183    5716            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1BBE 8512F0    5717            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1BC1 E513      5718            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1BC3 120000    5719            lcall   ___fsdiv
1BC6 AA82      5720            mov     r2,dpl
1BC8 AB83      5721            mov     r3,dph
1BCA ACF0      5722            mov     r4,b
1BCC FD        5723            mov     r5,a
1BCD E581      5724            mov     a,sp
1BCF 24FC      5725            add     a,#0xfc
1BD1 F581      5726            mov     sp,a
1BD3 D007      5727            pop     ar7
1BD5 D006      5728            pop     ar6
1BD7 8A82      5729            mov     dpl,r2
1BD9 8B83      5730            mov     dph,r3
1BDB 8CF0      5731            mov     b,r4
1BDD ED        5732            mov     a,r5
1BDE C004      5733            push    ar4
1BE0 C005      5734            push    ar5
1BE2 C006      5735            push    ar6
1BE4 C007      5736            push    ar7
1BE6 120000    5737            lcall   ___fs2uchar
1BE9 E582      5738            mov     a,dpl
1BEB D007      5739            pop     ar7
1BED D006      5740            pop     ar6
1BEF D005      5741            pop     ar5
1BF1 D004      5742            pop     ar4
1BF3 904F40    5743            mov     dptr,#_pwm_right
1BF6 F0        5744            movx    @dptr,a
1BF7 D005      5745            pop     ar5
1BF9 D004      5746            pop     ar4
1BFB 020000    5747            ljmp    L040023?
1BFE           5748   L040020?:
1BFE           5749   ;        main.c:1124: if (vy*100<=vy_thres*100/2){
1BFE 8C00      5750            mov     __mulint_PARM_2,r4
1C00 8D01      5751            mov     (__mulint_PARM_2 + 1),r5
1C02 900064    5752            mov     dptr,#0x0064
1C05 C004      5753            push    ar4
1C07 C005      5754            push    ar5
1C09 C006      5755            push    ar6
1C0B C007      5756            push    ar7
1C0D 120000    5757            lcall   __mulint
1C10 AA82      5758            mov     r2,dpl
1C12 AB83      5759            mov     r3,dph
1C14 D007      5760            pop     ar7
1C16 D006      5761            pop     ar6
1C18 D005      5762            pop     ar5
1C1A D004      5763            pop     ar4
1C1C 852000    5764            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
1C1F 852101    5765            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
1C22 900064    5766            mov     dptr,#0x0064
1C25 C002      5767            push    ar2
1C27 C003      5768            push    ar3
1C29 C004      5769            push    ar4
1C2B C005      5770            push    ar5
1C2D C006      5771            push    ar6
1C2F C007      5772            push    ar7
1C31 120000    5773            lcall   __mulint
1C34 A882      5774            mov     r0,dpl
1C36 A983      5775            mov     r1,dph
1C38 750002    5776            mov     __divsint_PARM_2,#0x02
1C3B E4        5777            clr     a
1C3C F501      5778            mov     (__divsint_PARM_2 + 1),a
1C3E 8882      5779            mov     dpl,r0
1C40 8983      5780            mov     dph,r1
1C42 120000    5781            lcall   __divsint
1C45 A882      5782            mov     r0,dpl
1C47 A983      5783            mov     r1,dph
1C49 D007      5784            pop     ar7
1C4B D006      5785            pop     ar6
1C4D D005      5786            pop     ar5
1C4F D004      5787            pop     ar4
1C51 D003      5788            pop     ar3
1C53 D002      5789            pop     ar2
1C55 C3        5790            clr     c
1C56 E8        5791            mov     a,r0
1C57 9A        5792            subb    a,r2
1C58 E9        5793            mov     a,r1
1C59 6480      5794            xrl     a,#0x80
1C5B 8BF0      5795            mov     b,r3
1C5D 63F080    5796            xrl     b,#0x80
1C60 95F0      5797            subb    a,b
1C62 5000      5798            jnc     L040067?
1C64 020000    5799            ljmp    L040017?
1C67           5800   L040067?:
1C67           5801   ;        main.c:1125: pwm_left = vy_error*100/(vx_error+vy_error);
1C67 C004      5802            push    ar4
1C69 C005      5803            push    ar5
1C6B 8E00      5804            mov     __mulint_PARM_2,r6
1C6D 8F01      5805            mov     (__mulint_PARM_2 + 1),r7
1C6F 900064    5806            mov     dptr,#0x0064
1C72 C004      5807            push    ar4
1C74 C005      5808            push    ar5
1C76 C006      5809            push    ar6
1C78 C007      5810            push    ar7
1C7A 120000    5811            lcall   __mulint
1C7D AA82      5812            mov     r2,dpl
1C7F AB83      5813            mov     r3,dph
1C81 D007      5814            pop     ar7
1C83 D006      5815            pop     ar6
1C85 EE        5816            mov     a,r6
1C86 2560      5817            add     a,_Joystick_Control_sloc6_1_0
1C88 F500      5818            mov     __divsint_PARM_2,a
1C8A EF        5819            mov     a,r7
1C8B 3561      5820            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1C8D F501      5821            mov     (__divsint_PARM_2 + 1),a
1C8F 8A82      5822            mov     dpl,r2
1C91 8B83      5823            mov     dph,r3
1C93 C006      5824            push    ar6
1C95 C007      5825            push    ar7
1C97 120000    5826            lcall   __divsint
1C9A AA82      5827            mov     r2,dpl
1C9C D007      5828            pop     ar7
1C9E D006      5829            pop     ar6
1CA0 D005      5830            pop     ar5
1CA2 D004      5831            pop     ar4
1CA4 904F80    5832            mov     dptr,#_pwm_left
1CA7 EA        5833            mov     a,r2
1CA8 F0        5834            movx    @dptr,a
1CA9           5835   ;        main.c:1126: pwm_right = vy_error*pwm_corr; 
1CA9 8E82      5836            mov     dpl,r6
1CAB 8F83      5837            mov     dph,r7
1CAD C006      5838            push    ar6
1CAF C007      5839            push    ar7
1CB1 120000    5840            lcall   ___sint2fs
1CB4 AA82      5841            mov     r2,dpl
1CB6 AB83      5842            mov     r3,dph
1CB8 ACF0      5843            mov     r4,b
1CBA FD        5844            mov     r5,a
1CBB 904C30    5845            mov     dptr,#_pwm_corr
1CBE E0        5846            movx    a,@dptr
1CBF C0E0      5847            push    acc
1CC1 A3        5848            inc     dptr
1CC2 E0        5849            movx    a,@dptr
1CC3 C0E0      5850            push    acc
1CC5 A3        5851            inc     dptr
1CC6 E0        5852            movx    a,@dptr
1CC7 C0E0      5853            push    acc
1CC9 A3        5854            inc     dptr
1CCA E0        5855            movx    a,@dptr
1CCB C0E0      5856            push    acc
1CCD 8A82      5857            mov     dpl,r2
1CCF 8B83      5858            mov     dph,r3
1CD1 8CF0      5859            mov     b,r4
1CD3 ED        5860            mov     a,r5
1CD4 120000    5861            lcall   ___fsmul
1CD7 AA82      5862            mov     r2,dpl
1CD9 AB83      5863            mov     r3,dph
1CDB ACF0      5864            mov     r4,b
1CDD FD        5865            mov     r5,a
1CDE E581      5866            mov     a,sp
1CE0 24FC      5867            add     a,#0xfc
1CE2 F581      5868            mov     sp,a
1CE4 D007      5869            pop     ar7
1CE6 D006      5870            pop     ar6
1CE8 8A82      5871            mov     dpl,r2
1CEA 8B83      5872            mov     dph,r3
1CEC 8CF0      5873            mov     b,r4
1CEE ED        5874            mov     a,r5
1CEF C004      5875            push    ar4
1CF1 C005      5876            push    ar5
1CF3 C006      5877            push    ar6
1CF5 C007      5878            push    ar7
1CF7 120000    5879            lcall   ___fs2uchar
1CFA E582      5880            mov     a,dpl
1CFC D007      5881            pop     ar7
1CFE D006      5882            pop     ar6
1D00 D005      5883            pop     ar5
1D02 D004      5884            pop     ar4
1D04 904F40    5885            mov     dptr,#_pwm_right
1D07 F0        5886            movx    @dptr,a
1D08 D005      5887            pop     ar5
1D0A D004      5888            pop     ar4
1D0C 020000    5889            ljmp    L040023?
1D0F           5890   L040017?:
1D0F           5891   ;        main.c:1129: pwm_left = vx_error*100/(vx_error+vy_error);
1D0F C004      5892            push    ar4
1D11 C005      5893            push    ar5
1D13 856000    5894            mov     __mulint_PARM_2,_Joystick_Control_sloc6_1_0
1D16 856101    5895            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc6_1_0 + 1)
1D19 900064    5896            mov     dptr,#0x0064
1D1C C004      5897            push    ar4
1D1E C005      5898            push    ar5
1D20 C006      5899            push    ar6
1D22 C007      5900            push    ar7
1D24 120000    5901            lcall   __mulint
1D27 AA82      5902            mov     r2,dpl
1D29 AB83      5903            mov     r3,dph
1D2B D007      5904            pop     ar7
1D2D D006      5905            pop     ar6
1D2F EE        5906            mov     a,r6
1D30 2560      5907            add     a,_Joystick_Control_sloc6_1_0
1D32 F500      5908            mov     __divsint_PARM_2,a
1D34 EF        5909            mov     a,r7
1D35 3561      5910            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1D37 F501      5911            mov     (__divsint_PARM_2 + 1),a
1D39 8A82      5912            mov     dpl,r2
1D3B 8B83      5913            mov     dph,r3
1D3D C006      5914            push    ar6
1D3F C007      5915            push    ar7
1D41 120000    5916            lcall   __divsint
1D44 AA82      5917            mov     r2,dpl
1D46 D007      5918            pop     ar7
1D48 D006      5919            pop     ar6
1D4A D005      5920            pop     ar5
1D4C D004      5921            pop     ar4
1D4E 904F80    5922            mov     dptr,#_pwm_left
1D51 EA        5923            mov     a,r2
1D52 F0        5924            movx    @dptr,a
1D53           5925   ;        main.c:1130: pwm_right = vx_error*pwm_corr; 
1D53 856082    5926            mov     dpl,_Joystick_Control_sloc6_1_0
1D56 856183    5927            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
1D59 C006      5928            push    ar6
1D5B C007      5929            push    ar7
1D5D 120000    5930            lcall   ___sint2fs
1D60 AA82      5931            mov     r2,dpl
1D62 AB83      5932            mov     r3,dph
1D64 ACF0      5933            mov     r4,b
1D66 FD        5934            mov     r5,a
1D67 904C30    5935            mov     dptr,#_pwm_corr
1D6A E0        5936            movx    a,@dptr
1D6B C0E0      5937            push    acc
1D6D A3        5938            inc     dptr
1D6E E0        5939            movx    a,@dptr
1D6F C0E0      5940            push    acc
1D71 A3        5941            inc     dptr
1D72 E0        5942            movx    a,@dptr
1D73 C0E0      5943            push    acc
1D75 A3        5944            inc     dptr
1D76 E0        5945            movx    a,@dptr
1D77 C0E0      5946            push    acc
1D79 8A82      5947            mov     dpl,r2
1D7B 8B83      5948            mov     dph,r3
1D7D 8CF0      5949            mov     b,r4
1D7F ED        5950            mov     a,r5
1D80 120000    5951            lcall   ___fsmul
1D83 AA82      5952            mov     r2,dpl
1D85 AB83      5953            mov     r3,dph
1D87 ACF0      5954            mov     r4,b
1D89 FD        5955            mov     r5,a
1D8A E581      5956            mov     a,sp
1D8C 24FC      5957            add     a,#0xfc
1D8E F581      5958            mov     sp,a
1D90 D007      5959            pop     ar7
1D92 D006      5960            pop     ar6
1D94 8A82      5961            mov     dpl,r2
1D96 8B83      5962            mov     dph,r3
1D98 8CF0      5963            mov     b,r4
1D9A ED        5964            mov     a,r5
1D9B C004      5965            push    ar4
1D9D C005      5966            push    ar5
1D9F C006      5967            push    ar6
1DA1 C007      5968            push    ar7
1DA3 120000    5969            lcall   ___fs2uchar
1DA6 E582      5970            mov     a,dpl
1DA8 D007      5971            pop     ar7
1DAA D006      5972            pop     ar6
1DAC D005      5973            pop     ar5
1DAE D004      5974            pop     ar4
1DB0 904F40    5975            mov     dptr,#_pwm_right
1DB3 F0        5976            movx    @dptr,a
1DB4           5977   ;        main.c:1162: return; 
1DB4 D005      5978            pop     ar5
1DB6 D004      5979            pop     ar4
1DB8           5980   ;        main.c:1130: pwm_right = vx_error*pwm_corr; 
1DB8           5981   L040023?:
1DB8           5982   ;        main.c:1135: if (vy_err<0){
1DB8 E581      5983            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
1DBA 20E750    5984            jb      acc.7,L040068?
1DBD 22        5985            ret
1DBE           5986   L040068?:
1DBE           5987   ;        main.c:1136: L_motor_dir = 1; 
1DBE 904F00    5988            mov     dptr,#_L_motor_dir
1DC1 7401      5989            mov     a,#0x01
1DC3 F0        5990            movx    @dptr,a
1DC4           5991   ;        main.c:1137: R_motor_dir = 1; 
1DC4 904EC0    5992            mov     dptr,#_R_motor_dir
1DC7 7401      5993            mov     a,#0x01
1DC9 F0        5994            movx    @dptr,a
1DCA           5995   ;        main.c:1139: if (vx_err>0){
1DCA C3        5996            clr     c
1DCB E4        5997            clr     a
1DCC 95C0      5998            subb    a,_Joystick_Control_sloc4_1_0
1DCE E4        5999            clr     a
1DCF 6480      6000            xrl     a,#0x80
1DD1 85C1F0    6001            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
1DD4 63F080    6002            xrl     b,#0x80
1DD7 95F0      6003            subb    a,b
1DD9 4000      6004            jc      L040069?
1DDB 020000    6005            ljmp    L040031?
1DDE           6006   L040069?:
1DDE           6007   ;        main.c:1140: if (vy*100<=vy_thres*100/2){
1DDE 8C00      6008            mov     __mulint_PARM_2,r4
1DE0 8D01      6009            mov     (__mulint_PARM_2 + 1),r5
1DE2 900064    6010            mov     dptr,#0x0064
1DE5 C006      6011            push    ar6
1DE7 C007      6012            push    ar7
1DE9 120000    6013            lcall   __mulint
1DEC AA82      6014            mov     r2,dpl
1DEE AB83      6015            mov     r3,dph
1DF0 D007      6016            pop     ar7
1DF2 D006      6017            pop     ar6
1DF4 852000    6018            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
1DF7 852101    6019            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
1DFA 900064    6020            mov     dptr,#0x0064
1DFD C002      6021            push    ar2
1DFF C003      6022            push    ar3
1E01 C006      6023            push    ar6
1E03 C007      6024            push    ar7
1E05 120000    6025            lcall   __mulint
1E08 A882      6026            mov     r0,dpl
1E0A A983      6027            mov     r1,dph
1E0C 750002    6028            mov     __divsint_PARM_2,#0x02
1E0F E4        6029            clr     a
1E10 F501      6030            mov     (__divsint_PARM_2 + 1),a
1E12 8882      6031            mov     dpl,r0
1E14 8983      6032            mov     dph,r1
1E16 120000    6033            lcall   __divsint
1E19 A882      6034            mov     r0,dpl
1E1B A983      6035            mov     r1,dph
1E1D D007      6036            pop     ar7
1E1F D006      6037            pop     ar6
1E21 D003      6038            pop     ar3
1E23 D002      6039            pop     ar2
1E25 C3        6040            clr     c
1E26 E8        6041            mov     a,r0
1E27 9A        6042            subb    a,r2
1E28 E9        6043            mov     a,r1
1E29 6480      6044            xrl     a,#0x80
1E2B 8BF0      6045            mov     b,r3
1E2D 63F080    6046            xrl     b,#0x80
1E30 95F0      6047            subb    a,b
1E32 5000      6048            jnc     L040070?
1E34 020000    6049            ljmp    L040025?
1E37           6050   L040070?:
1E37           6051   ;        main.c:1141: pwm_left = vy_error; 
1E37 904F80    6052            mov     dptr,#_pwm_left
1E3A EE        6053            mov     a,r6
1E3B F0        6054            movx    @dptr,a
1E3C           6055   ;        main.c:1142: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
1E3C 904C30    6056            mov     dptr,#_pwm_corr
1E3F E0        6057            movx    a,@dptr
1E40 F510      6058            mov     _Joystick_Control_sloc5_1_0,a
1E42 A3        6059            inc     dptr
1E43 E0        6060            movx    a,@dptr
1E44 F511      6061            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1E46 A3        6062            inc     dptr
1E47 E0        6063            movx    a,@dptr
1E48 F512      6064            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1E4A A3        6065            inc     dptr
1E4B E0        6066            movx    a,@dptr
1E4C F513      6067            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1E4E 8E82      6068            mov     dpl,r6
1E50 8F83      6069            mov     dph,r7
1E52 C006      6070            push    ar6
1E54 C007      6071            push    ar7
1E56 120000    6072            lcall   ___sint2fs
1E59 AA82      6073            mov     r2,dpl
1E5B AB83      6074            mov     r3,dph
1E5D A8F0      6075            mov     r0,b
1E5F F9        6076            mov     r1,a
1E60 C002      6077            push    ar2
1E62 C003      6078            push    ar3
1E64 C000      6079            push    ar0
1E66 C001      6080            push    ar1
1E68 851082    6081            mov     dpl,_Joystick_Control_sloc5_1_0
1E6B 851183    6082            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1E6E 8512F0    6083            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1E71 E513      6084            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1E73 120000    6085            lcall   ___fsmul
1E76 AA82      6086            mov     r2,dpl
1E78 AB83      6087            mov     r3,dph
1E7A A8F0      6088            mov     r0,b
1E7C F9        6089            mov     r1,a
1E7D E581      6090            mov     a,sp
1E7F 24FC      6091            add     a,#0xfc
1E81 F581      6092            mov     sp,a
1E83 C002      6093            push    ar2
1E85 C003      6094            push    ar3
1E87 C000      6095            push    ar0
1E89 C001      6096            push    ar1
1E8B 900000    6097            mov     dptr,#0x0000
1E8E 75F0C8    6098            mov     b,#0xC8
1E91 7442      6099            mov     a,#0x42
1E93 120000    6100            lcall   ___fsmul
1E96 858210    6101            mov     _Joystick_Control_sloc5_1_0,dpl
1E99 858311    6102            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1E9C 85F012    6103            mov     (_Joystick_Control_sloc5_1_0 + 2),b
1E9F F513      6104            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1EA1 E581      6105            mov     a,sp
1EA3 24FC      6106            add     a,#0xfc
1EA5 F581      6107            mov     sp,a
1EA7 D007      6108            pop     ar7
1EA9 D006      6109            pop     ar6
1EAB EE        6110            mov     a,r6
1EAC 2560      6111            add     a,_Joystick_Control_sloc6_1_0
1EAE F582      6112            mov     dpl,a
1EB0 EF        6113            mov     a,r7
1EB1 3561      6114            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1EB3 F583      6115            mov     dph,a
1EB5 120000    6116            lcall   ___sint2fs
1EB8 AA82      6117            mov     r2,dpl
1EBA AB83      6118            mov     r3,dph
1EBC A8F0      6119            mov     r0,b
1EBE F9        6120            mov     r1,a
1EBF C002      6121            push    ar2
1EC1 C003      6122            push    ar3
1EC3 C000      6123            push    ar0
1EC5 C001      6124            push    ar1
1EC7 851082    6125            mov     dpl,_Joystick_Control_sloc5_1_0
1ECA 851183    6126            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1ECD 8512F0    6127            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1ED0 E513      6128            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1ED2 120000    6129            lcall   ___fsdiv
1ED5 AA82      6130            mov     r2,dpl
1ED7 AB83      6131            mov     r3,dph
1ED9 A8F0      6132            mov     r0,b
1EDB F9        6133            mov     r1,a
1EDC E581      6134            mov     a,sp
1EDE 24FC      6135            add     a,#0xfc
1EE0 F581      6136            mov     sp,a
1EE2 8A82      6137            mov     dpl,r2
1EE4 8B83      6138            mov     dph,r3
1EE6 88F0      6139            mov     b,r0
1EE8 E9        6140            mov     a,r1
1EE9 120000    6141            lcall   ___fs2uchar
1EEC E582      6142            mov     a,dpl
1EEE 904F40    6143            mov     dptr,#_pwm_right
1EF1 F0        6144            movx    @dptr,a
1EF2 22        6145            ret
1EF3           6146   L040025?:
1EF3           6147   ;        main.c:1145: pwm_left = vx_error; 
1EF3 904F80    6148            mov     dptr,#_pwm_left
1EF6 E560      6149            mov     a,_Joystick_Control_sloc6_1_0
1EF8 F0        6150            movx    @dptr,a
1EF9           6151   ;        main.c:1146: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
1EF9 904C30    6152            mov     dptr,#_pwm_corr
1EFC E0        6153            movx    a,@dptr
1EFD F510      6154            mov     _Joystick_Control_sloc5_1_0,a
1EFF A3        6155            inc     dptr
1F00 E0        6156            movx    a,@dptr
1F01 F511      6157            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1F03 A3        6158            inc     dptr
1F04 E0        6159            movx    a,@dptr
1F05 F512      6160            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1F07 A3        6161            inc     dptr
1F08 E0        6162            movx    a,@dptr
1F09 F513      6163            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1F0B 856082    6164            mov     dpl,_Joystick_Control_sloc6_1_0
1F0E 856183    6165            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
1F11 C006      6166            push    ar6
1F13 C007      6167            push    ar7
1F15 120000    6168            lcall   ___sint2fs
1F18 AA82      6169            mov     r2,dpl
1F1A AB83      6170            mov     r3,dph
1F1C A8F0      6171            mov     r0,b
1F1E F9        6172            mov     r1,a
1F1F C002      6173            push    ar2
1F21 C003      6174            push    ar3
1F23 C000      6175            push    ar0
1F25 C001      6176            push    ar1
1F27 851082    6177            mov     dpl,_Joystick_Control_sloc5_1_0
1F2A 851183    6178            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1F2D 8512F0    6179            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1F30 E513      6180            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1F32 120000    6181            lcall   ___fsmul
1F35 AA82      6182            mov     r2,dpl
1F37 AB83      6183            mov     r3,dph
1F39 A8F0      6184            mov     r0,b
1F3B F9        6185            mov     r1,a
1F3C E581      6186            mov     a,sp
1F3E 24FC      6187            add     a,#0xfc
1F40 F581      6188            mov     sp,a
1F42 C002      6189            push    ar2
1F44 C003      6190            push    ar3
1F46 C000      6191            push    ar0
1F48 C001      6192            push    ar1
1F4A 900000    6193            mov     dptr,#0x0000
1F4D 75F0C8    6194            mov     b,#0xC8
1F50 7442      6195            mov     a,#0x42
1F52 120000    6196            lcall   ___fsmul
1F55 858210    6197            mov     _Joystick_Control_sloc5_1_0,dpl
1F58 858311    6198            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1F5B 85F012    6199            mov     (_Joystick_Control_sloc5_1_0 + 2),b
1F5E F513      6200            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1F60 E581      6201            mov     a,sp
1F62 24FC      6202            add     a,#0xfc
1F64 F581      6203            mov     sp,a
1F66 D007      6204            pop     ar7
1F68 D006      6205            pop     ar6
1F6A EE        6206            mov     a,r6
1F6B 2560      6207            add     a,_Joystick_Control_sloc6_1_0
1F6D F582      6208            mov     dpl,a
1F6F EF        6209            mov     a,r7
1F70 3561      6210            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1F72 F583      6211            mov     dph,a
1F74 120000    6212            lcall   ___sint2fs
1F77 AA82      6213            mov     r2,dpl
1F79 AB83      6214            mov     r3,dph
1F7B A8F0      6215            mov     r0,b
1F7D F9        6216            mov     r1,a
1F7E C002      6217            push    ar2
1F80 C003      6218            push    ar3
1F82 C000      6219            push    ar0
1F84 C001      6220            push    ar1
1F86 851082    6221            mov     dpl,_Joystick_Control_sloc5_1_0
1F89 851183    6222            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1F8C 8512F0    6223            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1F8F E513      6224            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1F91 120000    6225            lcall   ___fsdiv
1F94 AA82      6226            mov     r2,dpl
1F96 AB83      6227            mov     r3,dph
1F98 A8F0      6228            mov     r0,b
1F9A F9        6229            mov     r1,a
1F9B E581      6230            mov     a,sp
1F9D 24FC      6231            add     a,#0xfc
1F9F F581      6232            mov     sp,a
1FA1 8A82      6233            mov     dpl,r2
1FA3 8B83      6234            mov     dph,r3
1FA5 88F0      6235            mov     b,r0
1FA7 E9        6236            mov     a,r1
1FA8 120000    6237            lcall   ___fs2uchar
1FAB E582      6238            mov     a,dpl
1FAD 904F40    6239            mov     dptr,#_pwm_right
1FB0 F0        6240            movx    @dptr,a
1FB1 22        6241            ret
1FB2           6242   L040031?:
1FB2           6243   ;        main.c:1151: if (vy*100<=vy_thres*100/2){
1FB2 8C00      6244            mov     __mulint_PARM_2,r4
1FB4 8D01      6245            mov     (__mulint_PARM_2 + 1),r5
1FB6 900064    6246            mov     dptr,#0x0064
1FB9 C006      6247            push    ar6
1FBB C007      6248            push    ar7
1FBD 120000    6249            lcall   __mulint
1FC0 AA82      6250            mov     r2,dpl
1FC2 AB83      6251            mov     r3,dph
1FC4 D007      6252            pop     ar7
1FC6 D006      6253            pop     ar6
1FC8 852000    6254            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
1FCB 852101    6255            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
1FCE 900064    6256            mov     dptr,#0x0064
1FD1 C002      6257            push    ar2
1FD3 C003      6258            push    ar3
1FD5 C006      6259            push    ar6
1FD7 C007      6260            push    ar7
1FD9 120000    6261            lcall   __mulint
1FDC AC82      6262            mov     r4,dpl
1FDE AD83      6263            mov     r5,dph
1FE0 750002    6264            mov     __divsint_PARM_2,#0x02
1FE3 E4        6265            clr     a
1FE4 F501      6266            mov     (__divsint_PARM_2 + 1),a
1FE6 8C82      6267            mov     dpl,r4
1FE8 8D83      6268            mov     dph,r5
1FEA 120000    6269            lcall   __divsint
1FED AC82      6270            mov     r4,dpl
1FEF AD83      6271            mov     r5,dph
1FF1 D007      6272            pop     ar7
1FF3 D006      6273            pop     ar6
1FF5 D003      6274            pop     ar3
1FF7 D002      6275            pop     ar2
1FF9 C3        6276            clr     c
1FFA EC        6277            mov     a,r4
1FFB 9A        6278            subb    a,r2
1FFC ED        6279            mov     a,r5
1FFD 6480      6280            xrl     a,#0x80
1FFF 8BF0      6281            mov     b,r3
2001 63F080    6282            xrl     b,#0x80
2004 95F0      6283            subb    a,b
2006 5000      6284            jnc     L040071?
2008 020000    6285            ljmp    L040028?
200B           6286   L040071?:
200B           6287   ;        main.c:1152: pwm_left = vy_error*100/(vx_error+vy_error);
200B 8E00      6288            mov     __mulint_PARM_2,r6
200D 8F01      6289            mov     (__mulint_PARM_2 + 1),r7
200F 900064    6290            mov     dptr,#0x0064
2012 C006      6291            push    ar6
2014 C007      6292            push    ar7
2016 120000    6293            lcall   __mulint
2019 AA82      6294            mov     r2,dpl
201B AB83      6295            mov     r3,dph
201D D007      6296            pop     ar7
201F D006      6297            pop     ar6
2021 EE        6298            mov     a,r6
2022 2560      6299            add     a,_Joystick_Control_sloc6_1_0
2024 F500      6300            mov     __divsint_PARM_2,a
2026 EF        6301            mov     a,r7
2027 3561      6302            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
2029 F501      6303            mov     (__divsint_PARM_2 + 1),a
202B 8A82      6304            mov     dpl,r2
202D 8B83      6305            mov     dph,r3
202F C006      6306            push    ar6
2031 C007      6307            push    ar7
2033 120000    6308            lcall   __divsint
2036 AA82      6309            mov     r2,dpl
2038 D007      6310            pop     ar7
203A D006      6311            pop     ar6
203C 904F80    6312            mov     dptr,#_pwm_left
203F EA        6313            mov     a,r2
2040 F0        6314            movx    @dptr,a
2041           6315   ;        main.c:1153: pwm_right =pwm_corr*vy_error; 
2041 904C30    6316            mov     dptr,#_pwm_corr
2044 E0        6317            movx    a,@dptr
2045 F510      6318            mov     _Joystick_Control_sloc5_1_0,a
2047 A3        6319            inc     dptr
2048 E0        6320            movx    a,@dptr
2049 F511      6321            mov     (_Joystick_Control_sloc5_1_0 + 1),a
204B A3        6322            inc     dptr
204C E0        6323            movx    a,@dptr
204D F512      6324            mov     (_Joystick_Control_sloc5_1_0 + 2),a
204F A3        6325            inc     dptr
2050 E0        6326            movx    a,@dptr
2051 F513      6327            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2053 8E82      6328            mov     dpl,r6
2055 8F83      6329            mov     dph,r7
2057 120000    6330            lcall   ___sint2fs
205A A882      6331            mov     r0,dpl
205C A983      6332            mov     r1,dph
205E AAF0      6333            mov     r2,b
2060 FB        6334            mov     r3,a
2061 C000      6335            push    ar0
2063 C001      6336            push    ar1
2065 C002      6337            push    ar2
2067 C003      6338            push    ar3
2069 851082    6339            mov     dpl,_Joystick_Control_sloc5_1_0
206C 851183    6340            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
206F 8512F0    6341            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2072 E513      6342            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2074 120000    6343            lcall   ___fsmul
2077 AA82      6344            mov     r2,dpl
2079 AB83      6345            mov     r3,dph
207B ACF0      6346            mov     r4,b
207D FD        6347            mov     r5,a
207E E581      6348            mov     a,sp
2080 24FC      6349            add     a,#0xfc
2082 F581      6350            mov     sp,a
2084 8A82      6351            mov     dpl,r2
2086 8B83      6352            mov     dph,r3
2088 8CF0      6353            mov     b,r4
208A ED        6354            mov     a,r5
208B 120000    6355            lcall   ___fs2uchar
208E E582      6356            mov     a,dpl
2090 904F40    6357            mov     dptr,#_pwm_right
2093 F0        6358            movx    @dptr,a
2094 22        6359            ret
2095           6360   L040028?:
2095           6361   ;        main.c:1156: pwm_left = vx_error*100/(vx_error+vy_error);
2095 856000    6362            mov     __mulint_PARM_2,_Joystick_Control_sloc6_1_0
2098 856101    6363            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc6_1_0 + 1)
209B 900064    6364            mov     dptr,#0x0064
209E C006      6365            push    ar6
20A0 C007      6366            push    ar7
20A2 120000    6367            lcall   __mulint
20A5 AA82      6368            mov     r2,dpl
20A7 AB83      6369            mov     r3,dph
20A9 D007      6370            pop     ar7
20AB D006      6371            pop     ar6
20AD EE        6372            mov     a,r6
20AE 2560      6373            add     a,_Joystick_Control_sloc6_1_0
20B0 F500      6374            mov     __divsint_PARM_2,a
20B2 EF        6375            mov     a,r7
20B3 3561      6376            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
20B5 F501      6377            mov     (__divsint_PARM_2 + 1),a
20B7 8A82      6378            mov     dpl,r2
20B9 8B83      6379            mov     dph,r3
20BB 120000    6380            lcall   __divsint
20BE AA82      6381            mov     r2,dpl
20C0 904F80    6382            mov     dptr,#_pwm_left
20C3 EA        6383            mov     a,r2
20C4 F0        6384            movx    @dptr,a
20C5           6385   ;        main.c:1157: pwm_right = pwm_corr*vx_error; 
20C5 904C30    6386            mov     dptr,#_pwm_corr
20C8 E0        6387            movx    a,@dptr
20C9 FA        6388            mov     r2,a
20CA A3        6389            inc     dptr
20CB E0        6390            movx    a,@dptr
20CC FB        6391            mov     r3,a
20CD A3        6392            inc     dptr
20CE E0        6393            movx    a,@dptr
20CF FC        6394            mov     r4,a
20D0 A3        6395            inc     dptr
20D1 E0        6396            movx    a,@dptr
20D2 FD        6397            mov     r5,a
20D3 856082    6398            mov     dpl,_Joystick_Control_sloc6_1_0
20D6 856183    6399            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
20D9 C002      6400            push    ar2
20DB C003      6401            push    ar3
20DD C004      6402            push    ar4
20DF C005      6403            push    ar5
20E1 120000    6404            lcall   ___sint2fs
20E4 AE82      6405            mov     r6,dpl
20E6 AF83      6406            mov     r7,dph
20E8 A8F0      6407            mov     r0,b
20EA F9        6408            mov     r1,a
20EB D005      6409            pop     ar5
20ED D004      6410            pop     ar4
20EF D003      6411            pop     ar3
20F1 D002      6412            pop     ar2
20F3 C006      6413            push    ar6
20F5 C007      6414            push    ar7
20F7 C000      6415            push    ar0
20F9 C001      6416            push    ar1
20FB 8A82      6417            mov     dpl,r2
20FD 8B83      6418            mov     dph,r3
20FF 8CF0      6419            mov     b,r4
2101 ED        6420            mov     a,r5
2102 120000    6421            lcall   ___fsmul
2105 AA82      6422            mov     r2,dpl
2107 AB83      6423            mov     r3,dph
2109 ACF0      6424            mov     r4,b
210B FD        6425            mov     r5,a
210C E581      6426            mov     a,sp
210E 24FC      6427            add     a,#0xfc
2110 F581      6428            mov     sp,a
2112 8A82      6429            mov     dpl,r2
2114 8B83      6430            mov     dph,r3
2116 8CF0      6431            mov     b,r4
2118 ED        6432            mov     a,r5
2119 120000    6433            lcall   ___fs2uchar
211C E582      6434            mov     a,dpl
211E 904F40    6435            mov     dptr,#_pwm_right
2121 F0        6436            movx    @dptr,a
2122           6437   ;        main.c:1162: return; 
2122 22        6438            ret
2123           6439   ;------------------------------------------------------------
2123           6440   ;Allocation info for local variables in function 'main'
2123           6441   ;------------------------------------------------------------
2123           6442   ;pick_char                 Allocated with name '_main_pick_char_1_237'
2123           6443   ;c                         Allocated with name '_main_c_1_237'
2123           6444   ;vx                        Allocated with name '_main_vx_1_237'
2123           6445   ;vy                        Allocated with name '_main_vy_1_237'
2123           6446   ;auto_mode                 Allocated with name '_main_auto_mode_1_237'
2123           6447   ;------------------------------------------------------------
2123           6448   ;        main.c:1165: void main (void)
2123           6449   ;        -----------------------------------------
2123           6450   ;         function main
2123           6451   ;        -----------------------------------------
2123           6452   _main:
2123           6453   ;        main.c:1168: xdata int vx = 0, vy = 0; 
2123 90D120    6454            mov     dptr,#_main_vx_1_237
2126 E4        6455            clr     a
2127 F0        6456            movx    @dptr,a
2128 A3        6457            inc     dptr
2129 F0        6458            movx    @dptr,a
212A 90D160    6459            mov     dptr,#_main_vy_1_237
212D E4        6460            clr     a
212E F0        6461            movx    @dptr,a
212F A3        6462            inc     dptr
2130 F0        6463            movx    @dptr,a
2131           6464   ;        main.c:1169: xdata int auto_mode = 0;
2131 90D1B0    6465            mov     dptr,#_main_auto_mode_1_237
2134 E4        6466            clr     a
2135 F0        6467            movx    @dptr,a
2136 A3        6468            inc     dptr
2137 F0        6469            movx    @dptr,a
2138           6470   ;        main.c:1170: char pick_char = '0';
2138 75B030    6471            mov     _main_pick_char_1_237,#0x30
213B           6472   ;        main.c:1173: Init_all();
213B 120000    6473            lcall   _Init_all
213E           6474   ;        main.c:1174: BMM150_Init();
213E 120000    6475            lcall   _BMM150_Init
2141           6476   ;        main.c:1175: waitms(500);
2141 9001F4    6477            mov     dptr,#0x01F4
2144 120000    6478            lcall   _waitms
2147           6479   ;        main.c:1176: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
2147 7410      6480            mov     a,#__str_12
2149 C0E0      6481            push    acc
214B 7419      6482            mov     a,#(__str_12 >> 8)
214D C0E0      6483            push    acc
214F 7480      6484            mov     a,#0x80
2151 C0E0      6485            push    acc
2153 120000    6486            lcall   _printf
2156 1581      6487            dec     sp
2158 1581      6488            dec     sp
215A 1581      6489            dec     sp
215C           6490   ;        main.c:1177: UART1_Init(9600);
215C 902580    6491            mov     dptr,#0x2580
215F E4        6492            clr     a
2160 F5F0      6493            mov     b,a
2162 120000    6494            lcall   _UART1_Init
2165           6495   ;        main.c:1179: ReceptionOff();
2165 120000    6496            lcall   _ReceptionOff
2168           6497   ;        main.c:1182: SendATCommand("AT+VER\r\n");
2168 901950    6498            mov     dptr,#__str_13
216B 75F080    6499            mov     b,#0x80
216E 120000    6500            lcall   _SendATCommand
2171           6501   ;        main.c:1183: SendATCommand("AT+BAUD\r\n");
2171 901990    6502            mov     dptr,#__str_14
2174 75F080    6503            mov     b,#0x80
2177 120000    6504            lcall   _SendATCommand
217A           6505   ;        main.c:1184: SendATCommand("AT+RFID\r\n");
217A 9019D0    6506            mov     dptr,#__str_15
217D 75F080    6507            mov     b,#0x80
2180 120000    6508            lcall   _SendATCommand
2183           6509   ;        main.c:1185: SendATCommand("AT+DVID\r\n");
2183 901A10    6510            mov     dptr,#__str_16
2186 75F080    6511            mov     b,#0x80
2189 120000    6512            lcall   _SendATCommand
218C           6513   ;        main.c:1186: SendATCommand("AT+RFC002\r\n");
218C 901A50    6514            mov     dptr,#__str_17
218F 75F080    6515            mov     b,#0x80
2192 120000    6516            lcall   _SendATCommand
2195           6517   ;        main.c:1187: SendATCommand("AT+POWE\r\n");
2195 901A90    6518            mov     dptr,#__str_18
2198 75F080    6519            mov     b,#0x80
219B 120000    6520            lcall   _SendATCommand
219E           6521   ;        main.c:1188: SendATCommand("AT+CLSS\r\n");
219E 901AD0    6522            mov     dptr,#__str_19
21A1 75F080    6523            mov     b,#0x80
21A4 120000    6524            lcall   _SendATCommand
21A7           6525   ;        main.c:1189: SendATCommand("AT+DVIDEF11\r\n");  
21A7 901B10    6526            mov     dptr,#__str_20
21AA 75F080    6527            mov     b,#0x80
21AD 120000    6528            lcall   _SendATCommand
21B0           6529   ;        main.c:1192: L_bridge_1 = 0; 
21B0 C2A1      6530            clr     _P2_1
21B2           6531   ;        main.c:1193: L_bridge_2 = 0; 
21B2 C2A2      6532            clr     _P2_2
21B4           6533   ;        main.c:1194: R_bridge_1 = 0; 
21B4 C2A4      6534            clr     _P2_4
21B6           6535   ;        main.c:1195: R_bridge_2 = 0; 
21B6 C2A3      6536            clr     _P2_3
21B8           6537   ;        main.c:1197: while(1)
21B8           6538   L041016?:
21B8           6539   ;        main.c:1201: if(pick_char=='1'){
21B8 7431      6540            mov     a,#0x31
21BA B5B090    6541            cjne    a,_main_pick_char_1_237,L041002?
21BD           6542   ;        main.c:1202: servo_pick();
21BD 120000    6543            lcall   _servo_pick
21C0           6544   ;        main.c:1203: waitms(1000);
21C0 9003E8    6545            mov     dptr,#0x03E8
21C3 120000    6546            lcall   _waitms
21C6           6547   ;        main.c:1204: pick_char = '0';
21C6 75B030    6548            mov     _main_pick_char_1_237,#0x30
21C9           6549   L041002?:
21C9           6550   ;        main.c:1207: if(auto_mode){
21C9 90D1B0    6551            mov     dptr,#_main_auto_mode_1_237
21CC E0        6552            movx    a,@dptr
21CD FA        6553            mov     r2,a
21CE A3        6554            inc     dptr
21CF E0        6555            movx    a,@dptr
21D0 FB        6556            mov     r3,a
21D1 4A        6557            orl     a,r2
21D2 6000      6558            jz      L041004?
21D4           6559   ;        main.c:1208: Auto_mode_slave();
21D4 120000    6560            lcall   _Auto_mode_slave
21D7           6561   ;        main.c:1209: auto_mode = 0;
21D7 90D1B0    6562            mov     dptr,#_main_auto_mode_1_237
21DA E4        6563            clr     a
21DB F0        6564            movx    @dptr,a
21DC A3        6565            inc     dptr
21DD F0        6566            movx    @dptr,a
21DE           6567   L041004?:
21DE           6568   ;        main.c:1211: curr_angle = Read_angle();
21DE 120000    6569            lcall   _Read_angle
21E1 AA82      6570            mov     r2,dpl
21E3 AB83      6571            mov     r3,dph
21E5 ACF0      6572            mov     r4,b
21E7 FD        6573            mov     r5,a
21E8 904BF0    6574            mov     dptr,#_curr_angle
21EB EA        6575            mov     a,r2
21EC F0        6576            movx    @dptr,a
21ED A3        6577            inc     dptr
21EE EB        6578            mov     a,r3
21EF F0        6579            movx    @dptr,a
21F0 A3        6580            inc     dptr
21F1 EC        6581            mov     a,r4
21F2 F0        6582            movx    @dptr,a
21F3 A3        6583            inc     dptr
21F4 ED        6584            mov     a,r5
21F5 F0        6585            movx    @dptr,a
21F6           6586   ;        main.c:1212: printf("weight: %u\r\n",weight);
21F6 904B70    6587            mov     dptr,#_weight
21F9 E0        6588            movx    a,@dptr
21FA C0E0      6589            push    acc
21FC A3        6590            inc     dptr
21FD E0        6591            movx    a,@dptr
21FE C0E0      6592            push    acc
2200 7410      6593            mov     a,#__str_21
2202 C0E0      6594            push    acc
2204 741C      6595            mov     a,#(__str_21 >> 8)
2206 C0E0      6596            push    acc
2208 7480      6597            mov     a,#0x80
220A C0E0      6598            push    acc
220C 120000    6599            lcall   _printf
220F E581      6600            mov     a,sp
2211 24FB      6601            add     a,#0xfb
2213 F581      6602            mov     sp,a
2215           6603   ;        main.c:1213: if(RXU1()) // Something has arrived
2215 120000    6604            lcall   _RXU1
2218 5000      6605            jnc     L041016?
221A           6606   ;        main.c:1215: c=getchar1();
221A 120000    6607            lcall   _getchar1
221D AA82      6608            mov     r2,dpl
221F           6609   ;        main.c:1216: if(c=='!') // Master is sending message
221F BA2150    6610            cjne    r2,#0x21,L041031?
2222 8000      6611            sjmp    L041032?
2224           6612   L041031?:
2224 020000    6613            ljmp    L041011?
2227           6614   L041032?:
2227           6615   ;        main.c:1218: getstr1(buff, sizeof(buff)-1);
2227 755013    6616            mov     _getstr1_PARM_2,#0x13
222A 9053C0    6617            mov     dptr,#_buff
222D 75F040    6618            mov     b,#0x40
2230 120000    6619            lcall   _getstr1
2233           6620   ;        main.c:1219: if(strlen(buff)==11)
2233 9053C0    6621            mov     dptr,#_buff
2236 75F040    6622            mov     b,#0x40
2239 120000    6623            lcall   _strlen
223C AB82      6624            mov     r3,dpl
223E AC83      6625            mov     r4,dph
2240 BB0B10    6626            cjne    r3,#0x0B,L041033?
2243 BC0010    6627            cjne    r4,#0x00,L041033?
2246 8000      6628            sjmp    L041034?
2248           6629   L041033?:
2248 020000    6630            ljmp    L041006?
224B           6631   L041034?:
224B           6632   ;        main.c:1221: printf("Master says: %s\r\n", buff);
224B 74C0      6633            mov     a,#_buff
224D C0E0      6634            push    acc
224F 7453      6635            mov     a,#(_buff >> 8)
2251 C0E0      6636            push    acc
2253 7440      6637            mov     a,#0x40
2255 C0E0      6638            push    acc
2257 74D0      6639            mov     a,#__str_22
2259 C0E0      6640            push    acc
225B 741D      6641            mov     a,#(__str_22 >> 8)
225D C0E0      6642            push    acc
225F 7480      6643            mov     a,#0x80
2261 C0E0      6644            push    acc
2263 120000    6645            lcall   _printf
2266 E581      6646            mov     a,sp
2268 24FA      6647            add     a,#0xfa
226A F581      6648            mov     sp,a
226C           6649   ;        main.c:1222: sscanf(buff, "%03d,%03d,%c,%01d", &vx, &vy, &pick_char, &auto_mode);
226C 74B0      6650            mov     a,#_main_auto_mode_1_237
226E C0E0      6651            push    acc
2270 74D1      6652            mov     a,#(_main_auto_mode_1_237 >> 8)
2272 C0E0      6653            push    acc
2274 E4        6654            clr     a
2275 C0E0      6655            push    acc
2277 74B0      6656            mov     a,#_main_pick_char_1_237
2279 C0E0      6657            push    acc
227B 74C9      6658            mov     a,#(_main_pick_char_1_237 >> 8)
227D C0E0      6659            push    acc
227F 7440      6660            mov     a,#0x40
2281 C0E0      6661            push    acc
2283 7460      6662            mov     a,#_main_vy_1_237
2285 C0E0      6663            push    acc
2287 74D1      6664            mov     a,#(_main_vy_1_237 >> 8)
2289 C0E0      6665            push    acc
228B E4        6666            clr     a
228C C0E0      6667            push    acc
228E 7420      6668            mov     a,#_main_vx_1_237
2290 C0E0      6669            push    acc
2292 74D1      6670            mov     a,#(_main_vx_1_237 >> 8)
2294 C0E0      6671            push    acc
2296 E4        6672            clr     a
2297 C0E0      6673            push    acc
2299 7410      6674            mov     a,#__str_23
229B C0E0      6675            push    acc
229D 741E      6676            mov     a,#(__str_23 >> 8)
229F C0E0      6677            push    acc
22A1 7480      6678            mov     a,#0x80
22A3 C0E0      6679            push    acc
22A5 74C0      6680            mov     a,#_buff
22A7 C0E0      6681            push    acc
22A9 7453      6682            mov     a,#(_buff >> 8)
22AB C0E0      6683            push    acc
22AD 7440      6684            mov     a,#0x40
22AF C0E0      6685            push    acc
22B1 120000    6686            lcall   _sscanf
22B4 E581      6687            mov     a,sp
22B6 24EE      6688            add     a,#0xee
22B8 F581      6689            mov     sp,a
22BA           6690   ;        main.c:1223: printf("Joystick Received: Vx = %d, Vy = %d, Order = %c, Auto = %d\r\n", vx, vy, pick_char, auto_mode);
22BA E5B0      6691            mov     a,_main_pick_char_1_237
22BC FB        6692            mov     r3,a
22BD 33        6693            rlc     a
22BE 95E0      6694            subb    a,acc
22C0 FC        6695            mov     r4,a
22C1 90D1B0    6696            mov     dptr,#_main_auto_mode_1_237
22C4 E0        6697            movx    a,@dptr
22C5 C0E0      6698            push    acc
22C7 A3        6699            inc     dptr
22C8 E0        6700            movx    a,@dptr
22C9 C0E0      6701            push    acc
22CB C003      6702            push    ar3
22CD C004      6703            push    ar4
22CF 90D160    6704            mov     dptr,#_main_vy_1_237
22D2 E0        6705            movx    a,@dptr
22D3 C0E0      6706            push    acc
22D5 A3        6707            inc     dptr
22D6 E0        6708            movx    a,@dptr
22D7 C0E0      6709            push    acc
22D9 90D120    6710            mov     dptr,#_main_vx_1_237
22DC E0        6711            movx    a,@dptr
22DD C0E0      6712            push    acc
22DF A3        6713            inc     dptr
22E0 E0        6714            movx    a,@dptr
22E1 C0E0      6715            push    acc
22E3 7450      6716            mov     a,#__str_24
22E5 C0E0      6717            push    acc
22E7 741E      6718            mov     a,#(__str_24 >> 8)
22E9 C0E0      6719            push    acc
22EB 7480      6720            mov     a,#0x80
22ED C0E0      6721            push    acc
22EF 120000    6722            lcall   _printf
22F2 E581      6723            mov     a,sp
22F4 24F5      6724            add     a,#0xf5
22F6 F581      6725            mov     sp,a
22F8           6726   ;        main.c:1224: Joystick_Control(&vx, &vy);
22F8 751060    6727            mov     _Joystick_Control_PARM_2,#_main_vy_1_237
22FB 7511D1    6728            mov     (_Joystick_Control_PARM_2 + 1),#(_main_vy_1_237 >> 8)
22FE 751200    6729            mov     (_Joystick_Control_PARM_2 + 2),#0x00
2301 90D120    6730            mov     dptr,#_main_vx_1_237
2304 75F000    6731            mov     b,#0x00
2307 120000    6732            lcall   _Joystick_Control
230A 020000    6733            ljmp    L041016?
230D           6734   L041006?:
230D           6735   ;        main.c:1227: printf("*** BAD MESSAGE ***: %s\r\n", buff);
230D 74C0      6736            mov     a,#_buff
230F C0E0      6737            push    acc
2311 7453      6738            mov     a,#(_buff >> 8)
2313 C0E0      6739            push    acc
2315 7440      6740            mov     a,#0x40
2317 C0E0      6741            push    acc
2319 7490      6742            mov     a,#__str_25
231B C0E0      6743            push    acc
231D 741E      6744            mov     a,#(__str_25 >> 8)
231F C0E0      6745            push    acc
2321 7480      6746            mov     a,#0x80
2323 C0E0      6747            push    acc
2325 120000    6748            lcall   _printf
2328 E581      6749            mov     a,sp
232A 24FA      6750            add     a,#0xfa
232C F581      6751            mov     sp,a
232E 020000    6752            ljmp    L041016?
2331           6753   L041011?:
2331           6754   ;        main.c:1230: else if(c=='@') // Master wants slave data
2331 BA40D0    6755            cjne    r2,#0x40,L041035?
2334 8000      6756            sjmp    L041036?
2336           6757   L041035?:
2336 020000    6758            ljmp    L041016?
2339           6759   L041036?:
2339           6760   ;        main.c:1232: sprintf(buff, "0,00,%04ld,%05d,%4.1f\n", freq100, weight, curr_angle);
2339 904BF0    6761            mov     dptr,#_curr_angle
233C E0        6762            movx    a,@dptr
233D C0E0      6763            push    acc
233F A3        6764            inc     dptr
2340 E0        6765            movx    a,@dptr
2341 C0E0      6766            push    acc
2343 A3        6767            inc     dptr
2344 E0        6768            movx    a,@dptr
2345 C0E0      6769            push    acc
2347 A3        6770            inc     dptr
2348 E0        6771            movx    a,@dptr
2349 C0E0      6772            push    acc
234B 904B70    6773            mov     dptr,#_weight
234E E0        6774            movx    a,@dptr
234F C0E0      6775            push    acc
2351 A3        6776            inc     dptr
2352 E0        6777            movx    a,@dptr
2353 C0E0      6778            push    acc
2355 905380    6779            mov     dptr,#_freq100
2358 E0        6780            movx    a,@dptr
2359 C0E0      6781            push    acc
235B A3        6782            inc     dptr
235C E0        6783            movx    a,@dptr
235D C0E0      6784            push    acc
235F A3        6785            inc     dptr
2360 E0        6786            movx    a,@dptr
2361 C0E0      6787            push    acc
2363 A3        6788            inc     dptr
2364 E0        6789            movx    a,@dptr
2365 C0E0      6790            push    acc
2367 7450      6791            mov     a,#__str_26
2369 C0E0      6792            push    acc
236B 741F      6793            mov     a,#(__str_26 >> 8)
236D C0E0      6794            push    acc
236F 7480      6795            mov     a,#0x80
2371 C0E0      6796            push    acc
2373 74C0      6797            mov     a,#_buff
2375 C0E0      6798            push    acc
2377 7453      6799            mov     a,#(_buff >> 8)
2379 C0E0      6800            push    acc
237B 7440      6801            mov     a,#0x40
237D C0E0      6802            push    acc
237F 120000    6803            lcall   _sprintf
2382 E581      6804            mov     a,sp
2384 24F0      6805            add     a,#0xf0
2386 F581      6806            mov     sp,a
2388           6807   ;        main.c:1233: printf("%s\r\n",buff);
2388 74C0      6808            mov     a,#_buff
238A C0E0      6809            push    acc
238C 7453      6810            mov     a,#(_buff >> 8)
238E C0E0      6811            push    acc
2390 7440      6812            mov     a,#0x40
2392 C0E0      6813            push    acc
2394 7490      6814            mov     a,#__str_27
2396 C0E0      6815            push    acc
2398 741F      6816            mov     a,#(__str_27 >> 8)
239A C0E0      6817            push    acc
239C 7480      6818            mov     a,#0x80
239E C0E0      6819            push    acc
23A0 120000    6820            lcall   _printf
23A3 E581      6821            mov     a,sp
23A5 24FA      6822            add     a,#0xfa
23A7 F581      6823            mov     sp,a
23A9           6824   ;        main.c:1234: waitms(5); // The radio seems to need this delay...
23A9 900005    6825            mov     dptr,#0x0005
23AC 120000    6826            lcall   _waitms
23AF           6827   ;        main.c:1235: sendstr1(buff);
23AF 9053C0    6828            mov     dptr,#_buff
23B2 75F040    6829            mov     b,#0x40
23B5 120000    6830            lcall   _sendstr1
23B8 020000    6831            ljmp    L041016?
23BB           6832            rseg R_CSEG
23BB           6833   
0000           6834            rseg R_XINIT
0000           6835   __xinit__pwm_counter:
0000 0000      6836            db 0x00,0x00    ; 0
0002           6837   __xinit__servo_counter:
0002 0000      6838            db 0x00,0x00    ; 0
0004           6839   __xinit__pwm_left:
0004 00        6840            db 0x00         ; 0
0005           6841   __xinit__pwm_right:
0005 00        6842            db 0x00         ; 0
0006           6843   __xinit__L_motor_dir:
0006 01        6844            db 0x01         ; 1
0007           6845   __xinit__R_motor_dir:
0007 01        6846            db 0x01         ; 1
0008           6847   __xinit__servo_base:
0008 01        6848            db 0x01         ; 1
0009           6849   __xinit__servo_arm:
0009 01        6850            db 0x01         ; 1
000A           6851   __xinit__vx_thres:
000A A100      6852            db 0xA1,0x00    ;  161
000C           6853   __xinit__vy_thres:
000C A600      6854            db 0xA6,0x00    ;  166
000E           6855   __xinit__vx:
000E 0000      6856            db 0x00,0x00    ;  0
0010           6857   __xinit__vy:
0010 0000      6858            db 0x00,0x00    ;  0
0012           6859   __xinit__fre_mea_count:
0012 0000      6860            db 0x00,0x00    ; 0
0014           6861   __xinit__weight_mea_count:
0014 0000      6862            db 0x00,0x00    ; 0
0016           6863   __xinit__seed:
0016 3930      6864            db 0x39,0x30    ; 12345
0018           6865   __xinit__pwm_corr:
0018 3333733F  6866            db 0x33,0x33,0x73,0x3F  ;  9.500000e-001
001C           6867   __xinit__curr_angle:
001C 00000000  6868            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0020           6869   __xinit__mea_yes:
0020 01        6870            db 0x01         ;  1
0021           6871   __xinit__weight:
0021 0000      6872            db 0x00,0x00    ; 0
0023           6873   
0000           6874            rseg R_CONST
0000           6875   __str_0:
0000 4572726F  6876            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
0035 0D        6877            db 0x0D
0036 0A        6878            db 0x0A
0037 00        6879            db 0x00
0038           6880   __str_1:
0038 50726573  6881            db 'Press restart to check again!'
     73207265
     73746172
     7420746F
     20636865
     636B2061
     6761696E
     21
0055 0D        6882            db 0x0D
0056 00        6883            db 0x00
0057           6884   __str_2:
0057 444F4E45  6885            db 'DONE! Chip ID = 0x%02X'
     21204368
     69702049
     44203D20
     30782530
     3258
006D 0D        6886            db 0x0D
006E 0A        6887            db 0x0A
006F 00        6888            db 0x00
0070           6889   __str_3:
0070 424D4D31  6890            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
00A0 0D        6891            db 0x0D
00A1 0A        6892            db 0x0A
00A2 00        6893            db 0x00
00A3           6894   __str_4:
00A3 436F6D6D  6895            db 'Command: %s'
     616E643A
     202573
00AE 00        6896            db 0x00
00AF           6897   __str_5:
00AF 52657370  6898            db 'Response: %s'
     6F6E7365
     3A202573
00BB 0D        6899            db 0x0D
00BC 0A        6900            db 0x0A
00BD 00        6901            db 0x00
00BE           6902   __str_6:
00BE 41542B44  6903            db 'AT+DVID0000'
     56494430
     303030
00C9 0D        6904            db 0x0D
00CA 0A        6905            db 0x0A
00CB 00        6906            db 0x00
00CC           6907   __str_7:
00CC 6D617374  6908            db 'master_messgae_auto_mode: %s'
     65725F6D
     65737367
     61655F61
     75746F5F
     6D6F6465
     3A202573
00E8 0D        6909            db 0x0D
00E9 0A        6910            db 0x0A
00EA 00        6911            db 0x00
00EB           6912   __str_8:
00EB 25303364  6913            db '%03d,%03d,%01d,%01d'
     2C253033
     642C2530
     31642C25
     303164
00FE 00        6914            db 0x00
00FF           6915   __str_9:
00FF 25303164  6916            db '%01d,%02d,%ld,%05d,%4.1f'
     2C253032
     642C256C
     642C2530
     35642C25
     342E3166
0117 0A        6917            db 0x0A
0118 00        6918            db 0x00
0119           6919   __str_10:
0119 663A2530  6920            db 'f:%04ld, d1:%d, d2:%d, bound_dectect: %d'
     346C642C
     2064313A
     25642C20
     64323A25
     642C2062
     6F756E64
     5F646563
     74656374
     3A202564
0141 0D        6921            db 0x0D
0142 0A        6922            db 0x0A
0143 00        6923            db 0x00
0144           6924   __str_11:
0144 4175746F  6925            db 'Auto mode finished!'
     206D6F64
     65206669
     6E697368
     656421
0157 0D        6926            db 0x0D
0158 0A        6927            db 0x0A
0159 00        6928            db 0x00
015A           6929   __str_12:
015A 0D        6930            db 0x0D
015B 0A        6931            db 0x0A
015C 45464D38  6932            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
0177 0D        6933            db 0x0D
0178 0A        6934            db 0x0A
0179 00        6935            db 0x00
017A           6936   __str_13:
017A 41542B56  6937            db 'AT+VER'
     4552
0180 0D        6938            db 0x0D
0181 0A        6939            db 0x0A
0182 00        6940            db 0x00
0183           6941   __str_14:
0183 41542B42  6942            db 'AT+BAUD'
     415544
018A 0D        6943            db 0x0D
018B 0A        6944            db 0x0A
018C 00        6945            db 0x00
018D           6946   __str_15:
018D 41542B52  6947            db 'AT+RFID'
     464944
0194 0D        6948            db 0x0D
0195 0A        6949            db 0x0A
0196 00        6950            db 0x00
0197           6951   __str_16:
0197 41542B44  6952            db 'AT+DVID'
     564944
019E 0D        6953            db 0x0D
019F 0A        6954            db 0x0A
01A0 00        6955            db 0x00
01A1           6956   __str_17:
01A1 41542B52  6957            db 'AT+RFC002'
     46433030
     32
01AA 0D        6958            db 0x0D
01AB 0A        6959            db 0x0A
01AC 00        6960            db 0x00
01AD           6961   __str_18:
01AD 41542B50  6962            db 'AT+POWE'
     4F5745
01B4 0D        6963            db 0x0D
01B5 0A        6964            db 0x0A
01B6 00        6965            db 0x00
01B7           6966   __str_19:
01B7 41542B43  6967            db 'AT+CLSS'
     4C5353
01BE 0D        6968            db 0x0D
01BF 0A        6969            db 0x0A
01C0 00        6970            db 0x00
01C1           6971   __str_20:
01C1 41542B44  6972            db 'AT+DVIDEF11'
     56494445
     463131
01CC 0D        6973            db 0x0D
01CD 0A        6974            db 0x0A
01CE 00        6975            db 0x00
01CF           6976   __str_21:
01CF 77656967  6977            db 'weight: %u'
     68743A20
     2575
01D9 0D        6978            db 0x0D
01DA 0A        6979            db 0x0A
01DB 00        6980            db 0x00
01DC           6981   __str_22:
01DC 4D617374  6982            db 'Master says: %s'
     65722073
     6179733A
     202573
01EB 0D        6983            db 0x0D
01EC 0A        6984            db 0x0A
01ED 00        6985            db 0x00
01EE           6986   __str_23:
01EE 25303364  6987            db '%03d,%03d,%c,%01d'
     2C253033
     642C2563
     2C253031
     64
01FF 00        6988            db 0x00
0200           6989   __str_24:
0200 4A6F7973  6990            db 'Joystick Received: Vx = %d, Vy = %d, Order = %c, Auto = %d'
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25642C20
     5679203D
     2025642C
     204F7264
     6572203D
     2025632C
     20417574
     6F203D20
     2564
023A 0D        6991            db 0x0D
023B 0A        6992            db 0x0A
023C 00        6993            db 0x00
023D           6994   __str_25:
023D 2A2A2A20  6995            db '*** BAD MESSAGE ***: %s'
     42414420
     4D455353
     41474520
     2A2A2A3A
     202573
0254 0D        6996            db 0x0D
0255 0A        6997            db 0x0A
0256 00        6998            db 0x00
0257           6999   __str_26:
0257 302C3030  7000            db '0,00,%04ld,%05d,%4.1f'
     2C253034
     6C642C25
     3035642C
     25342E31
     66
026C 0A        7001            db 0x0A
026D 00        7002            db 0x00
026E           7003   __str_27:
026E 2573      7004            db '%s'
0270 0D        7005            db 0x0D
0271 0A        7006            db 0x0A
0272 00        7007            db 0x00
0273           7008   
0096           7009            CSEG
0096           7010   
0096           7011   end
