0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Apr 01 13:02:04 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _check_bound_PARM_2
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Joystick_Control
0000             30            public _Auto_mode_slave
0000             31            public _get_random_90_250
0000             32            public _simple_rand
0000             33            public _Move_forward
0000             34            public _Right_angle
0000             35            public _Move_back_ms
0000             36            public _Init_all
0000             37            public _check_bound
0000             38            public _servo_pick
0000             39            public _Timer5_ISR
0000             40            public _ReadHX711
0000             41            public _ADC_at_Pin
0000             42            public _InitPinADC
0000             43            public _InitADC
0000             44            public _Set_Pin_Input
0000             45            public _Set_Pin_Output
0000             46            public _ReceptionOff
0000             47            public _SendATCommand
0000             48            public _waitms_or_RI1
0000             49            public _RXU1
0000             50            public _getstr1
0000             51            public _getchar1_with_timeout
0000             52            public _getchar1
0000             53            public _sendstr1
0000             54            public _putchar1
0000             55            public _UART1_Init
0000             56            public _waitms
0000             57            public _Timer3us
0000             58            public __c51_external_startup
0000             59            public _weight
0000             60            public _mea_yes
0000             61            public _angle_diff
0000             62            public _last_raw_angle
0000             63            public _raw_angle
0000             64            public _curr_angle
0000             65            public _pwm_corr
0000             66            public _seed
0000             67            public _weight_mea_count
0000             68            public _fre_mea_count
0000             69            public _vy
0000             70            public _vx
0000             71            public _vy_thres
0000             72            public _vx_thres
0000             73            public _servo_arm
0000             74            public _servo_base
0000             75            public _R_motor_dir
0000             76            public _L_motor_dir
0000             77            public _pwm_right
0000             78            public _pwm_left
0000             79            public _servo_counter
0000             80            public _pwm_counter
0000             81            public _temp
0000             82            public _dig_xyz1
0000             83            public _dig_xy2
0000             84            public _dig_xy1
0000             85            public _dig_z4
0000             86            public _dig_z3
0000             87            public _dig_z2
0000             88            public _dig_z1
0000             89            public _dig_y2
0000             90            public _dig_y1
0000             91            public _dig_x2
0000             92            public _dig_x1
0000             93            public _d2
0000             94            public _d1
0000             95            public _freq100
0000             96            public _buff
0000             97            public _Joystick_Control_PARM_2
0000             98            public _getstr1_PARM_2
0000             99   ;--------------------------------------------------------
0000            100   ; Special Function Registers
0000            101   ;--------------------------------------------------------
0000            102   _ACC            DATA 0xe0
0000            103   _ADC0ASAH       DATA 0xb6
0000            104   _ADC0ASAL       DATA 0xb5
0000            105   _ADC0ASCF       DATA 0xa1
0000            106   _ADC0ASCT       DATA 0xc7
0000            107   _ADC0CF0        DATA 0xbc
0000            108   _ADC0CF1        DATA 0xb9
0000            109   _ADC0CF2        DATA 0xdf
0000            110   _ADC0CN0        DATA 0xe8
0000            111   _ADC0CN1        DATA 0xb2
0000            112   _ADC0CN2        DATA 0xb3
0000            113   _ADC0GTH        DATA 0xc4
0000            114   _ADC0GTL        DATA 0xc3
0000            115   _ADC0H          DATA 0xbe
0000            116   _ADC0L          DATA 0xbd
0000            117   _ADC0LTH        DATA 0xc6
0000            118   _ADC0LTL        DATA 0xc5
0000            119   _ADC0MX         DATA 0xbb
0000            120   _B              DATA 0xf0
0000            121   _CKCON0         DATA 0x8e
0000            122   _CKCON1         DATA 0xa6
0000            123   _CLEN0          DATA 0xc6
0000            124   _CLIE0          DATA 0xc7
0000            125   _CLIF0          DATA 0xe8
0000            126   _CLKSEL         DATA 0xa9
0000            127   _CLOUT0         DATA 0xd1
0000            128   _CLU0CF         DATA 0xb1
0000            129   _CLU0FN         DATA 0xaf
0000            130   _CLU0MX         DATA 0x84
0000            131   _CLU1CF         DATA 0xb3
0000            132   _CLU1FN         DATA 0xb2
0000            133   _CLU1MX         DATA 0x85
0000            134   _CLU2CF         DATA 0xb6
0000            135   _CLU2FN         DATA 0xb5
0000            136   _CLU2MX         DATA 0x91
0000            137   _CLU3CF         DATA 0xbf
0000            138   _CLU3FN         DATA 0xbe
0000            139   _CLU3MX         DATA 0xae
0000            140   _CMP0CN0        DATA 0x9b
0000            141   _CMP0CN1        DATA 0x99
0000            142   _CMP0MD         DATA 0x9d
0000            143   _CMP0MX         DATA 0x9f
0000            144   _CMP1CN0        DATA 0xbf
0000            145   _CMP1CN1        DATA 0xac
0000            146   _CMP1MD         DATA 0xab
0000            147   _CMP1MX         DATA 0xaa
0000            148   _CRC0CN0        DATA 0xce
0000            149   _CRC0CN1        DATA 0x86
0000            150   _CRC0CNT        DATA 0xd3
0000            151   _CRC0DAT        DATA 0xcb
0000            152   _CRC0FLIP       DATA 0xcf
0000            153   _CRC0IN         DATA 0xca
0000            154   _CRC0ST         DATA 0xd2
0000            155   _DAC0CF0        DATA 0x91
0000            156   _DAC0CF1        DATA 0x92
0000            157   _DAC0H          DATA 0x85
0000            158   _DAC0L          DATA 0x84
0000            159   _DAC1CF0        DATA 0x93
0000            160   _DAC1CF1        DATA 0x94
0000            161   _DAC1H          DATA 0x8a
0000            162   _DAC1L          DATA 0x89
0000            163   _DAC2CF0        DATA 0x95
0000            164   _DAC2CF1        DATA 0x96
0000            165   _DAC2H          DATA 0x8c
0000            166   _DAC2L          DATA 0x8b
0000            167   _DAC3CF0        DATA 0x9a
0000            168   _DAC3CF1        DATA 0x9c
0000            169   _DAC3H          DATA 0x8e
0000            170   _DAC3L          DATA 0x8d
0000            171   _DACGCF0        DATA 0x88
0000            172   _DACGCF1        DATA 0x98
0000            173   _DACGCF2        DATA 0xa2
0000            174   _DERIVID        DATA 0xad
0000            175   _DEVICEID       DATA 0xb5
0000            176   _DPH            DATA 0x83
0000            177   _DPL            DATA 0x82
0000            178   _EIE1           DATA 0xe6
0000            179   _EIE2           DATA 0xf3
0000            180   _EIP1           DATA 0xbb
0000            181   _EIP1H          DATA 0xee
0000            182   _EIP2           DATA 0xed
0000            183   _EIP2H          DATA 0xf6
0000            184   _EMI0CN         DATA 0xe7
0000            185   _FLKEY          DATA 0xb7
0000            186   _HFO0CAL        DATA 0xc7
0000            187   _HFO1CAL        DATA 0xd6
0000            188   _HFOCN          DATA 0xef
0000            189   _I2C0ADM        DATA 0xff
0000            190   _I2C0CN0        DATA 0xba
0000            191   _I2C0DIN        DATA 0xbc
0000            192   _I2C0DOUT       DATA 0xbb
0000            193   _I2C0FCN0       DATA 0xad
0000            194   _I2C0FCN1       DATA 0xab
0000            195   _I2C0FCT        DATA 0xf5
0000            196   _I2C0SLAD       DATA 0xbd
0000            197   _I2C0STAT       DATA 0xb9
0000            198   _IE             DATA 0xa8
0000            199   _IP             DATA 0xb8
0000            200   _IPH            DATA 0xf2
0000            201   _IT01CF         DATA 0xe4
0000            202   _LFO0CN         DATA 0xb1
0000            203   _P0             DATA 0x80
0000            204   _P0MASK         DATA 0xfe
0000            205   _P0MAT          DATA 0xfd
0000            206   _P0MDIN         DATA 0xf1
0000            207   _P0MDOUT        DATA 0xa4
0000            208   _P0SKIP         DATA 0xd4
0000            209   _P1             DATA 0x90
0000            210   _P1MASK         DATA 0xee
0000            211   _P1MAT          DATA 0xed
0000            212   _P1MDIN         DATA 0xf2
0000            213   _P1MDOUT        DATA 0xa5
0000            214   _P1SKIP         DATA 0xd5
0000            215   _P2             DATA 0xa0
0000            216   _P2MASK         DATA 0xfc
0000            217   _P2MAT          DATA 0xfb
0000            218   _P2MDIN         DATA 0xf3
0000            219   _P2MDOUT        DATA 0xa6
0000            220   _P2SKIP         DATA 0xcc
0000            221   _P3             DATA 0xb0
0000            222   _P3MDIN         DATA 0xf4
0000            223   _P3MDOUT        DATA 0x9c
0000            224   _PCA0CENT       DATA 0x9e
0000            225   _PCA0CLR        DATA 0x9c
0000            226   _PCA0CN0        DATA 0xd8
0000            227   _PCA0CPH0       DATA 0xfc
0000            228   _PCA0CPH1       DATA 0xea
0000            229   _PCA0CPH2       DATA 0xec
0000            230   _PCA0CPH3       DATA 0xf5
0000            231   _PCA0CPH4       DATA 0x85
0000            232   _PCA0CPH5       DATA 0xde
0000            233   _PCA0CPL0       DATA 0xfb
0000            234   _PCA0CPL1       DATA 0xe9
0000            235   _PCA0CPL2       DATA 0xeb
0000            236   _PCA0CPL3       DATA 0xf4
0000            237   _PCA0CPL4       DATA 0x84
0000            238   _PCA0CPL5       DATA 0xdd
0000            239   _PCA0CPM0       DATA 0xda
0000            240   _PCA0CPM1       DATA 0xdb
0000            241   _PCA0CPM2       DATA 0xdc
0000            242   _PCA0CPM3       DATA 0xae
0000            243   _PCA0CPM4       DATA 0xaf
0000            244   _PCA0CPM5       DATA 0xcc
0000            245   _PCA0H          DATA 0xfa
0000            246   _PCA0L          DATA 0xf9
0000            247   _PCA0MD         DATA 0xd9
0000            248   _PCA0POL        DATA 0x96
0000            249   _PCA0PWM        DATA 0xf7
0000            250   _PCON0          DATA 0x87
0000            251   _PCON1          DATA 0xcd
0000            252   _PFE0CN         DATA 0xc1
0000            253   _PRTDRV         DATA 0xf6
0000            254   _PSCTL          DATA 0x8f
0000            255   _PSTAT0         DATA 0xaa
0000            256   _PSW            DATA 0xd0
0000            257   _REF0CN         DATA 0xd1
0000            258   _REG0CN         DATA 0xc9
0000            259   _REVID          DATA 0xb6
0000            260   _RSTSRC         DATA 0xef
0000            261   _SBCON1         DATA 0x94
0000            262   _SBRLH1         DATA 0x96
0000            263   _SBRLL1         DATA 0x95
0000            264   _SBUF           DATA 0x99
0000            265   _SBUF0          DATA 0x99
0000            266   _SBUF1          DATA 0x92
0000            267   _SCON           DATA 0x98
0000            268   _SCON0          DATA 0x98
0000            269   _SCON1          DATA 0xc8
0000            270   _SFRPAGE        DATA 0xa7
0000            271   _SFRPGCN        DATA 0xbc
0000            272   _SFRSTACK       DATA 0xd7
0000            273   _SMB0ADM        DATA 0xd6
0000            274   _SMB0ADR        DATA 0xd7
0000            275   _SMB0CF         DATA 0xc1
0000            276   _SMB0CN0        DATA 0xc0
0000            277   _SMB0DAT        DATA 0xc2
0000            278   _SMB0FCN0       DATA 0xc3
0000            279   _SMB0FCN1       DATA 0xc4
0000            280   _SMB0FCT        DATA 0xef
0000            281   _SMB0RXLN       DATA 0xc5
0000            282   _SMB0TC         DATA 0xac
0000            283   _SMOD1          DATA 0x93
0000            284   _SP             DATA 0x81
0000            285   _SPI0CFG        DATA 0xa1
0000            286   _SPI0CKR        DATA 0xa2
0000            287   _SPI0CN0        DATA 0xf8
0000            288   _SPI0DAT        DATA 0xa3
0000            289   _SPI0FCN0       DATA 0x9a
0000            290   _SPI0FCN1       DATA 0x9b
0000            291   _SPI0FCT        DATA 0xf7
0000            292   _SPI0PCF        DATA 0xdf
0000            293   _TCON           DATA 0x88
0000            294   _TH0            DATA 0x8c
0000            295   _TH1            DATA 0x8d
0000            296   _TL0            DATA 0x8a
0000            297   _TL1            DATA 0x8b
0000            298   _TMOD           DATA 0x89
0000            299   _TMR2CN0        DATA 0xc8
0000            300   _TMR2CN1        DATA 0xfd
0000            301   _TMR2H          DATA 0xcf
0000            302   _TMR2L          DATA 0xce
0000            303   _TMR2RLH        DATA 0xcb
0000            304   _TMR2RLL        DATA 0xca
0000            305   _TMR3CN0        DATA 0x91
0000            306   _TMR3CN1        DATA 0xfe
0000            307   _TMR3H          DATA 0x95
0000            308   _TMR3L          DATA 0x94
0000            309   _TMR3RLH        DATA 0x93
0000            310   _TMR3RLL        DATA 0x92
0000            311   _TMR4CN0        DATA 0x98
0000            312   _TMR4CN1        DATA 0xff
0000            313   _TMR4H          DATA 0xa5
0000            314   _TMR4L          DATA 0xa4
0000            315   _TMR4RLH        DATA 0xa3
0000            316   _TMR4RLL        DATA 0xa2
0000            317   _TMR5CN0        DATA 0xc0
0000            318   _TMR5CN1        DATA 0xf1
0000            319   _TMR5H          DATA 0xd5
0000            320   _TMR5L          DATA 0xd4
0000            321   _TMR5RLH        DATA 0xd3
0000            322   _TMR5RLL        DATA 0xd2
0000            323   _UART0PCF       DATA 0xd9
0000            324   _UART1FCN0      DATA 0x9d
0000            325   _UART1FCN1      DATA 0xd8
0000            326   _UART1FCT       DATA 0xfa
0000            327   _UART1LIN       DATA 0x9e
0000            328   _UART1PCF       DATA 0xda
0000            329   _VDM0CN         DATA 0xff
0000            330   _WDTCN          DATA 0x97
0000            331   _XBR0           DATA 0xe1
0000            332   _XBR1           DATA 0xe2
0000            333   _XBR2           DATA 0xe3
0000            334   _XOSC0CN        DATA 0x86
0000            335   _DPTR           DATA 0x8382
0000            336   _TMR2RL         DATA 0xcbca
0000            337   _TMR3RL         DATA 0x9392
0000            338   _TMR4RL         DATA 0xa3a2
0000            339   _TMR5RL         DATA 0xd3d2
0000            340   _TMR0           DATA 0x8c8a
0000            341   _TMR1           DATA 0x8d8b
0000            342   _TMR2           DATA 0xcfce
0000            343   _TMR3           DATA 0x9594
0000            344   _TMR4           DATA 0xa5a4
0000            345   _TMR5           DATA 0xd5d4
0000            346   _SBRL1          DATA 0x9695
0000            347   _PCA0           DATA 0xfaf9
0000            348   _PCA0CP0        DATA 0xfcfb
0000            349   _PCA0CP1        DATA 0xeae9
0000            350   _PCA0CP2        DATA 0xeceb
0000            351   _PCA0CP3        DATA 0xf5f4
0000            352   _PCA0CP4        DATA 0x8584
0000            353   _PCA0CP5        DATA 0xdedd
0000            354   _ADC0ASA        DATA 0xb6b5
0000            355   _ADC0GT         DATA 0xc4c3
0000            356   _ADC0           DATA 0xbebd
0000            357   _ADC0LT         DATA 0xc6c5
0000            358   _DAC0           DATA 0x8584
0000            359   _DAC1           DATA 0x8a89
0000            360   _DAC2           DATA 0x8c8b
0000            361   _DAC3           DATA 0x8e8d
0000            362   ;--------------------------------------------------------
0000            363   ; special function bits
0000            364   ;--------------------------------------------------------
0000            365   _ACC_0          BIT 0xe0
0000            366   _ACC_1          BIT 0xe1
0000            367   _ACC_2          BIT 0xe2
0000            368   _ACC_3          BIT 0xe3
0000            369   _ACC_4          BIT 0xe4
0000            370   _ACC_5          BIT 0xe5
0000            371   _ACC_6          BIT 0xe6
0000            372   _ACC_7          BIT 0xe7
0000            373   _TEMPE          BIT 0xe8
0000            374   _ADGN0          BIT 0xe9
0000            375   _ADGN1          BIT 0xea
0000            376   _ADWINT         BIT 0xeb
0000            377   _ADBUSY         BIT 0xec
0000            378   _ADINT          BIT 0xed
0000            379   _IPOEN          BIT 0xee
0000            380   _ADEN           BIT 0xef
0000            381   _B_0            BIT 0xf0
0000            382   _B_1            BIT 0xf1
0000            383   _B_2            BIT 0xf2
0000            384   _B_3            BIT 0xf3
0000            385   _B_4            BIT 0xf4
0000            386   _B_5            BIT 0xf5
0000            387   _B_6            BIT 0xf6
0000            388   _B_7            BIT 0xf7
0000            389   _C0FIF          BIT 0xe8
0000            390   _C0RIF          BIT 0xe9
0000            391   _C1FIF          BIT 0xea
0000            392   _C1RIF          BIT 0xeb
0000            393   _C2FIF          BIT 0xec
0000            394   _C2RIF          BIT 0xed
0000            395   _C3FIF          BIT 0xee
0000            396   _C3RIF          BIT 0xef
0000            397   _D1SRC0         BIT 0x88
0000            398   _D1SRC1         BIT 0x89
0000            399   _D1AMEN         BIT 0x8a
0000            400   _D01REFSL       BIT 0x8b
0000            401   _D3SRC0         BIT 0x8c
0000            402   _D3SRC1         BIT 0x8d
0000            403   _D3AMEN         BIT 0x8e
0000            404   _D23REFSL       BIT 0x8f
0000            405   _D0UDIS         BIT 0x98
0000            406   _D1UDIS         BIT 0x99
0000            407   _D2UDIS         BIT 0x9a
0000            408   _D3UDIS         BIT 0x9b
0000            409   _EX0            BIT 0xa8
0000            410   _ET0            BIT 0xa9
0000            411   _EX1            BIT 0xaa
0000            412   _ET1            BIT 0xab
0000            413   _ES0            BIT 0xac
0000            414   _ET2            BIT 0xad
0000            415   _ESPI0          BIT 0xae
0000            416   _EA             BIT 0xaf
0000            417   _PX0            BIT 0xb8
0000            418   _PT0            BIT 0xb9
0000            419   _PX1            BIT 0xba
0000            420   _PT1            BIT 0xbb
0000            421   _PS0            BIT 0xbc
0000            422   _PT2            BIT 0xbd
0000            423   _PSPI0          BIT 0xbe
0000            424   _P0_0           BIT 0x80
0000            425   _P0_1           BIT 0x81
0000            426   _P0_2           BIT 0x82
0000            427   _P0_3           BIT 0x83
0000            428   _P0_4           BIT 0x84
0000            429   _P0_5           BIT 0x85
0000            430   _P0_6           BIT 0x86
0000            431   _P0_7           BIT 0x87
0000            432   _P1_0           BIT 0x90
0000            433   _P1_1           BIT 0x91
0000            434   _P1_2           BIT 0x92
0000            435   _P1_3           BIT 0x93
0000            436   _P1_4           BIT 0x94
0000            437   _P1_5           BIT 0x95
0000            438   _P1_6           BIT 0x96
0000            439   _P1_7           BIT 0x97
0000            440   _P2_0           BIT 0xa0
0000            441   _P2_1           BIT 0xa1
0000            442   _P2_2           BIT 0xa2
0000            443   _P2_3           BIT 0xa3
0000            444   _P2_4           BIT 0xa4
0000            445   _P2_5           BIT 0xa5
0000            446   _P2_6           BIT 0xa6
0000            447   _P3_0           BIT 0xb0
0000            448   _P3_1           BIT 0xb1
0000            449   _P3_2           BIT 0xb2
0000            450   _P3_3           BIT 0xb3
0000            451   _P3_4           BIT 0xb4
0000            452   _P3_7           BIT 0xb7
0000            453   _CCF0           BIT 0xd8
0000            454   _CCF1           BIT 0xd9
0000            455   _CCF2           BIT 0xda
0000            456   _CCF3           BIT 0xdb
0000            457   _CCF4           BIT 0xdc
0000            458   _CCF5           BIT 0xdd
0000            459   _CR             BIT 0xde
0000            460   _CF             BIT 0xdf
0000            461   _PARITY         BIT 0xd0
0000            462   _F1             BIT 0xd1
0000            463   _OV             BIT 0xd2
0000            464   _RS0            BIT 0xd3
0000            465   _RS1            BIT 0xd4
0000            466   _F0             BIT 0xd5
0000            467   _AC             BIT 0xd6
0000            468   _CY             BIT 0xd7
0000            469   _RI             BIT 0x98
0000            470   _TI             BIT 0x99
0000            471   _RB8            BIT 0x9a
0000            472   _TB8            BIT 0x9b
0000            473   _REN            BIT 0x9c
0000            474   _CE             BIT 0x9d
0000            475   _SMODE          BIT 0x9e
0000            476   _RI1            BIT 0xc8
0000            477   _TI1            BIT 0xc9
0000            478   _RBX1           BIT 0xca
0000            479   _TBX1           BIT 0xcb
0000            480   _REN1           BIT 0xcc
0000            481   _PERR1          BIT 0xcd
0000            482   _OVR1           BIT 0xce
0000            483   _SI             BIT 0xc0
0000            484   _ACK            BIT 0xc1
0000            485   _ARBLOST        BIT 0xc2
0000            486   _ACKRQ          BIT 0xc3
0000            487   _STO            BIT 0xc4
0000            488   _STA            BIT 0xc5
0000            489   _TXMODE         BIT 0xc6
0000            490   _MASTER         BIT 0xc7
0000            491   _SPIEN          BIT 0xf8
0000            492   _TXNF           BIT 0xf9
0000            493   _NSSMD0         BIT 0xfa
0000            494   _NSSMD1         BIT 0xfb
0000            495   _RXOVRN         BIT 0xfc
0000            496   _MODF           BIT 0xfd
0000            497   _WCOL           BIT 0xfe
0000            498   _SPIF           BIT 0xff
0000            499   _IT0            BIT 0x88
0000            500   _IE0            BIT 0x89
0000            501   _IT1            BIT 0x8a
0000            502   _IE1            BIT 0x8b
0000            503   _TR0            BIT 0x8c
0000            504   _TF0            BIT 0x8d
0000            505   _TR1            BIT 0x8e
0000            506   _TF1            BIT 0x8f
0000            507   _T2XCLK0        BIT 0xc8
0000            508   _T2XCLK1        BIT 0xc9
0000            509   _TR2            BIT 0xca
0000            510   _T2SPLIT        BIT 0xcb
0000            511   _TF2CEN         BIT 0xcc
0000            512   _TF2LEN         BIT 0xcd
0000            513   _TF2L           BIT 0xce
0000            514   _TF2H           BIT 0xcf
0000            515   _T4XCLK0        BIT 0x98
0000            516   _T4XCLK1        BIT 0x99
0000            517   _TR4            BIT 0x9a
0000            518   _T4SPLIT        BIT 0x9b
0000            519   _TF4CEN         BIT 0x9c
0000            520   _TF4LEN         BIT 0x9d
0000            521   _TF4L           BIT 0x9e
0000            522   _TF4H           BIT 0x9f
0000            523   _T5XCLK0        BIT 0xc0
0000            524   _T5XCLK1        BIT 0xc1
0000            525   _TR5            BIT 0xc2
0000            526   _T5SPLIT        BIT 0xc3
0000            527   _TF5CEN         BIT 0xc4
0000            528   _TF5LEN         BIT 0xc5
0000            529   _TF5L           BIT 0xc6
0000            530   _TF5H           BIT 0xc7
0000            531   _RIE            BIT 0xd8
0000            532   _RXTO0          BIT 0xd9
0000            533   _RXTO1          BIT 0xda
0000            534   _RFRQ           BIT 0xdb
0000            535   _TIE            BIT 0xdc
0000            536   _TXHOLD         BIT 0xdd
0000            537   _TXNF1          BIT 0xde
0000            538   _TFRQ           BIT 0xdf
0000            539   ;--------------------------------------------------------
0000            540   ; overlayable register banks
0000            541   ;--------------------------------------------------------
0000            542            rbank0 segment data overlay
0000            543   ;--------------------------------------------------------
0000            544   ; overlayable bit register bank
0000            545   ;--------------------------------------------------------
0000            546            rseg BIT_BANK
0000            547   bits:
0000            548            ds 1
0001            549            b0 equ  bits.0 
0001            550            b1 equ  bits.1 
0001            551            b2 equ  bits.2 
0001            552            b3 equ  bits.3 
0001            553            b4 equ  bits.4 
0001            554            b5 equ  bits.5 
0001            555            b6 equ  bits.6 
0001            556            b7 equ  bits.7 
0001            557   ;--------------------------------------------------------
0001            558   ; internal ram data
0001            559   ;--------------------------------------------------------
0000            560            rseg R_DSEG
0000            561   _getstr1_PARM_2:
0000            562            ds 1
0001            563   _Auto_mode_slave_sloc0_1_0:
0001            564            ds 2
0003            565   _Joystick_Control_PARM_2:
0003            566            ds 3
0006            567   _Joystick_Control_sloc0_1_0:
0006            568            ds 2
0008            569   _Joystick_Control_sloc1_1_0:
0008            570            ds 1
0009            571   _Joystick_Control_sloc2_1_0:
0009            572            ds 2
000B            573   _Joystick_Control_sloc3_1_0:
000B            574            ds 1
000C            575   _Joystick_Control_sloc4_1_0:
000C            576            ds 2
000E            577   _Joystick_Control_sloc5_1_0:
000E            578            ds 4
0012            579   _Joystick_Control_sloc6_1_0:
0012            580            ds 2
0014            581   _main_pick_char_1_194:
0014            582            ds 1
0015            583   ;--------------------------------------------------------
0015            584   ; overlayable items in internal ram 
0015            585   ;--------------------------------------------------------
0000            586            rseg    R_OSEG
0000            587            rseg    R_OSEG
0000            588            rseg    R_OSEG
0000            589            rseg    R_OSEG
0000            590            rseg    R_OSEG
0000            591   _InitPinADC_PARM_2:
0000            592            ds 1
0001            593            rseg    R_OSEG
0001            594            rseg    R_OSEG
0001            595   _check_bound_PARM_2:
0001            596            ds 2
0003            597   ;--------------------------------------------------------
0003            598   ; indirectly addressable internal ram data
0003            599   ;--------------------------------------------------------
0000            600            rseg R_ISEG
0000            601   _buff:
0000            602            ds 20
0014            603   ;--------------------------------------------------------
0014            604   ; absolute internal ram data
0014            605   ;--------------------------------------------------------
0000            606            DSEG
0000            607   ;--------------------------------------------------------
0000            608   ; bit data
0000            609   ;--------------------------------------------------------
0000            610            rseg R_BSEG
0000            611   ;--------------------------------------------------------
0000            612   ; paged external ram data
0000            613   ;--------------------------------------------------------
0000            614            rseg R_PSEG
0000            615   ;--------------------------------------------------------
0000            616   ; external ram data
0000            617   ;--------------------------------------------------------
0000            618            rseg R_XSEG
0000            619   _freq100:
0000            620            ds 4
0004            621   _d1:
0004            622            ds 2
0006            623   _d2:
0006            624            ds 2
0008            625   _dig_x1:
0008            626            ds 1
0009            627   _dig_x2:
0009            628            ds 1
000A            629   _dig_y1:
000A            630            ds 1
000B            631   _dig_y2:
000B            632            ds 1
000C            633   _dig_z1:
000C            634            ds 2
000E            635   _dig_z2:
000E            636            ds 2
0010            637   _dig_z3:
0010            638            ds 2
0012            639   _dig_z4:
0012            640            ds 2
0014            641   _dig_xy1:
0014            642            ds 1
0015            643   _dig_xy2:
0015            644            ds 1
0016            645   _dig_xyz1:
0016            646            ds 2
0018            647   _temp:
0018            648            ds 4
001C            649   _ReadHX711_dataa_1_133:
001C            650            ds 4
0020            651   _ReadHX711_j_1_133:
0020            652            ds 1
0021            653   _Auto_mode_slave_command_1_162:
0021            654            ds 2
0023            655   _Auto_mode_slave_state_res_1_162:
0023            656            ds 2
0025            657   _Auto_mode_slave_dummy_1_162:
0025            658            ds 2
0027            659   _Joystick_Control_vx_error_1_171:
0027            660            ds 2
0029            661   _main_vx_1_194:
0029            662            ds 2
002B            663   _main_vy_1_194:
002B            664            ds 2
002D            665   _main_auto_mode_1_194:
002D            666            ds 2
002F            667   ;--------------------------------------------------------
002F            668   ; absolute external ram data
002F            669   ;--------------------------------------------------------
0000            670            XSEG
0000            671   ;--------------------------------------------------------
0000            672   ; external initialized ram data
0000            673   ;--------------------------------------------------------
0000            674            rseg R_IXSEG
0000            675   _pwm_counter:
0000            676            ds 2
0002            677   _servo_counter:
0002            678            ds 2
0004            679   _pwm_left:
0004            680            ds 1
0005            681   _pwm_right:
0005            682            ds 1
0006            683   _L_motor_dir:
0006            684            ds 1
0007            685   _R_motor_dir:
0007            686            ds 1
0008            687   _servo_base:
0008            688            ds 1
0009            689   _servo_arm:
0009            690            ds 1
000A            691   _vx_thres:
000A            692            ds 2
000C            693   _vy_thres:
000C            694            ds 2
000E            695   _vx:
000E            696            ds 2
0010            697   _vy:
0010            698            ds 2
0012            699   _fre_mea_count:
0012            700            ds 2
0014            701   _weight_mea_count:
0014            702            ds 2
0016            703   _seed:
0016            704            ds 2
0018            705   _pwm_corr:
0018            706            ds 4
001C            707   _curr_angle:
001C            708            ds 4
0020            709   _raw_angle:
0020            710            ds 4
0024            711   _last_raw_angle:
0024            712            ds 4
0028            713   _angle_diff:
0028            714            ds 4
002C            715   _mea_yes:
002C            716            ds 1
002D            717   _weight:
002D            718            ds 2
0000            719            rseg R_HOME
0000            720            rseg R_GSINIT
0000            721            rseg R_CSEG
0000            722   ;--------------------------------------------------------
0000            723   ; Reset entry point and interrupt vectors
0000            724   ;--------------------------------------------------------
0000            725            CSEG at 0x0000
0000 020000     726            ljmp    _crt0
0093            727            CSEG at 0x0093
0093 020000     728            ljmp    _Timer5_ISR
0096            729   ;--------------------------------------------------------
0096            730   ; global & static initialisations
0096            731   ;--------------------------------------------------------
0000            732            rseg R_HOME
0000            733            rseg R_GSINIT
0000            734            rseg R_GSINIT
0000            735   ;--------------------------------------------------------
0000            736   ; data variables initialization
0000            737   ;--------------------------------------------------------
0000            738            rseg R_DINIT
0000            739            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            740   ;--------------------------------------------------------
0000            741   ; code
0000            742   ;--------------------------------------------------------
0000            743            rseg R_CSEG
0000            744   ;------------------------------------------------------------
0000            745   ;Allocation info for local variables in function '_c51_external_startup'
0000            746   ;------------------------------------------------------------
0000            747   ;------------------------------------------------------------
0000            748   ;        main.c:111: char _c51_external_startup (void)
0000            749   ;        -----------------------------------------
0000            750   ;         function _c51_external_startup
0000            751   ;        -----------------------------------------
0000            752   __c51_external_startup:
0000            753            using   0
0000            754   ;        main.c:114: SFRPAGE = 0x00;
0000 75A700     755            mov     _SFRPAGE,#0x00
0003            756   ;        main.c:115: WDTCN = 0xDE; //First key
0003 7597DE     757            mov     _WDTCN,#0xDE
0006            758   ;        main.c:116: WDTCN = 0xAD; //Second key
0006 7597AD     759            mov     _WDTCN,#0xAD
0009            760   ;        main.c:118: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     761            mov     _VDM0CN,#0x80
000C            762   ;        main.c:119: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     763            mov     _RSTSRC,#0x06
000F            764   ;        main.c:126: SFRPAGE = 0x10;
000F 75A710     765            mov     _SFRPAGE,#0x10
0012            766   ;        main.c:127: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     767            mov     _PFE0CN,#0x20
0015            768   ;        main.c:128: SFRPAGE = 0x00;
0015 75A700     769            mov     _SFRPAGE,#0x00
0018            770   ;        main.c:149: CLKSEL = 0x00;
0018 75A900     771            mov     _CLKSEL,#0x00
001B            772   ;        main.c:150: CLKSEL = 0x00;
001B 75A900     773            mov     _CLKSEL,#0x00
001E            774   ;        main.c:151: while ((CLKSEL & 0x80) == 0);
001E            775   L002001?:
001E E5A9       776            mov     a,_CLKSEL
0020 30E720     777            jnb     acc.7,L002001?
0023            778   ;        main.c:152: CLKSEL = 0x03;
0023 75A903     779            mov     _CLKSEL,#0x03
0026            780   ;        main.c:153: CLKSEL = 0x03;
0026 75A903     781            mov     _CLKSEL,#0x03
0029            782   ;        main.c:154: while ((CLKSEL & 0x80) == 0);
0029            783   L002004?:
0029 E5A9       784            mov     a,_CLKSEL
002B 30E7A0     785            jnb     acc.7,L002004?
002E            786   ;        main.c:160: P0MDOUT |= 0b_1100_0000;
002E 43A4C0     787            orl     _P0MDOUT,#0xC0
0031            788   ;        main.c:161: P1MDOUT |= 0b_0000_0110;
0031 43A506     789            orl     _P1MDOUT,#0x06
0034            790   ;        main.c:162: P2MDOUT |= 0b_0000_0001; // P2.0 in push-pull mode
0034 43A601     791            orl     _P2MDOUT,#0x01
0037            792   ;        main.c:163: XBR0     = 0b_0000_0011; // UART0E = 1 and SPI0E = 1 0b_0000_0011               
0037 75E103     793            mov     _XBR0,#0x03
003A            794   ;        main.c:164: XBR1     = 0b_0000_0000;
003A 75E200     795            mov     _XBR1,#0x00
003D            796   ;        main.c:165: XBR2     = 0b_0100_0001; // Enable crossbar and uart 1
003D 75E341     797            mov     _XBR2,#0x41
0040            798   ;        main.c:166: P0SKIP       = 0b_0000_0111; 
0040 75D407     799            mov     _P0SKIP,#0x07
0043            800   ;        main.c:167: P1SKIP   = 0b_1111_1001;
0043 75D5F9     801            mov     _P1SKIP,#0xF9
0046            802   ;        main.c:172: SCON0 = 0x10;
0046 759810     803            mov     _SCON0,#0x10
0049            804   ;        main.c:173: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     805            mov     _TH1,#0xE6
004C            806   ;        main.c:174: TL1 = TH1;      // Init Timer1
004C 858D8B     807            mov     _TL1,_TH1
004F            808   ;        main.c:175: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     809            anl     _TMOD,#0x0F
0052            810   ;        main.c:176: TMOD |=  0x20;                       
0052 438920     811            orl     _TMOD,#0x20
0055            812   ;        main.c:177: TR1 = 1; // START Timer1
0055 D28E       813            setb    _TR1
0057            814   ;        main.c:178: TI = 1;  // Indicate TX0 ready
0057 D299       815            setb    _TI
0059            816   ;        main.c:179: P2_0=1; // 'set' pin to 1 is normal operation mode.
0059 D2A0       817            setb    _P2_0
005B            818   ;        main.c:182: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
005B 75A211     819            mov     _SPI0CKR,#0x11
005E            820   ;        main.c:183: SPI0CFG = 0b_1110_0000; // SPI mode 3
005E 75A1E0     821            mov     _SPI0CFG,#0xE0
0061            822   ;        main.c:184: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0061 75F801     823            mov     _SPI0CN0,#0x01
0064            824   ;        main.c:187: SFRPAGE=0x10;
0064 75A710     825            mov     _SFRPAGE,#0x10
0067            826   ;        main.c:188: TMR5CN0=0x00;
0067 75C000     827            mov     _TMR5CN0,#0x00
006A            828   ;        main.c:189: TMR5=0xffff;   // Set to reload immediately
006A 75D4FF     829            mov     _TMR5,#0xFF
006D 75D5FF     830            mov     (_TMR5 >> 8),#0xFF
0070            831   ;        main.c:190: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
0070 43F308     832            orl     _EIE2,#0x08
0073            833   ;        main.c:191: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0073 D2C2       834            setb    _TR5
0075            835   ;        main.c:193: EA=1;  // Enable global interrupts
0075 D2AF       836            setb    _EA
0077            837   ;        main.c:194: SFRPAGE=0x00;
0077 75A700     838            mov     _SFRPAGE,#0x00
007A            839   ;        main.c:196: return 0;
007A 758200     840            mov     dpl,#0x00
007D 22         841            ret
007E            842   ;------------------------------------------------------------
007E            843   ;Allocation info for local variables in function 'Timer3us'
007E            844   ;------------------------------------------------------------
007E            845   ;us                        Allocated to registers r2 
007E            846   ;i                         Allocated to registers r3 
007E            847   ;------------------------------------------------------------
007E            848   ;        main.c:200: void Timer3us(unsigned char us)
007E            849   ;        -----------------------------------------
007E            850   ;         function Timer3us
007E            851   ;        -----------------------------------------
007E            852   _Timer3us:
007E AA82       853            mov     r2,dpl
0080            854   ;        main.c:205: CKCON0|=0b_0100_0000;
0080 438E40     855            orl     _CKCON0,#0x40
0083            856   ;        main.c:207: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0083 7592B8     857            mov     _TMR3RL,#0xB8
0086 7593FF     858            mov     (_TMR3RL >> 8),#0xFF
0089            859   ;        main.c:208: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0089 859294     860            mov     _TMR3,_TMR3RL
008C 859395     861            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
008F            862   ;        main.c:210: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
008F 759104     863            mov     _TMR3CN0,#0x04
0092            864   ;        main.c:211: for (i = 0; i < us; i++)       // Count <us> overflows
0092 7B00       865            mov     r3,#0x00
0094            866   L003004?:
0094 C3         867            clr     c
0095 EB         868            mov     a,r3
0096 9A         869            subb    a,r2
0097 5000       870            jnc     L003007?
0099            871   ;        main.c:213: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0099            872   L003001?:
0099 E591       873            mov     a,_TMR3CN0
009B 30E7A0     874            jnb     acc.7,L003001?
009E            875   ;        main.c:214: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
009E 53917F     876            anl     _TMR3CN0,#0x7F
00A1            877   ;        main.c:211: for (i = 0; i < us; i++)       // Count <us> overflows
00A1 0B         878            inc     r3
00A2 8000       879            sjmp    L003004?
00A4            880   L003007?:
00A4            881   ;        main.c:216: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00A4 759100     882            mov     _TMR3CN0,#0x00
00A7 22         883            ret
00A8            884   ;------------------------------------------------------------
00A8            885   ;Allocation info for local variables in function 'waitms'
00A8            886   ;------------------------------------------------------------
00A8            887   ;ms                        Allocated to registers r2 r3 
00A8            888   ;j                         Allocated to registers r4 r5 
00A8            889   ;k                         Allocated to registers r6 
00A8            890   ;------------------------------------------------------------
00A8            891   ;        main.c:219: void waitms (unsigned int ms)
00A8            892   ;        -----------------------------------------
00A8            893   ;         function waitms
00A8            894   ;        -----------------------------------------
00A8            895   _waitms:
00A8 AA82       896            mov     r2,dpl
00AA AB83       897            mov     r3,dph
00AC            898   ;        main.c:223: for(j=0; j<ms; j++)
00AC 7C00       899            mov     r4,#0x00
00AE 7D00       900            mov     r5,#0x00
00B0            901   L004005?:
00B0 C3         902            clr     c
00B1 EC         903            mov     a,r4
00B2 9A         904            subb    a,r2
00B3 ED         905            mov     a,r5
00B4 9B         906            subb    a,r3
00B5 5000       907            jnc     L004009?
00B7            908   ;        main.c:224: for (k=0; k<4; k++) Timer3us(250);
00B7 7E00       909            mov     r6,#0x00
00B9            910   L004001?:
00B9 BE04E0     911            cjne    r6,#0x04,L004018?
00BC            912   L004018?:
00BC 5000       913            jnc     L004007?
00BE 7582FA     914            mov     dpl,#0xFA
00C1 C002       915            push    ar2
00C3 C003       916            push    ar3
00C5 C004       917            push    ar4
00C7 C005       918            push    ar5
00C9 C006       919            push    ar6
00CB 120000     920            lcall   _Timer3us
00CE D006       921            pop     ar6
00D0 D005       922            pop     ar5
00D2 D004       923            pop     ar4
00D4 D003       924            pop     ar3
00D6 D002       925            pop     ar2
00D8 0E         926            inc     r6
00D9 8000       927            sjmp    L004001?
00DB            928   L004007?:
00DB            929   ;        main.c:223: for(j=0; j<ms; j++)
00DB 0C         930            inc     r4
00DC BC0020     931            cjne    r4,#0x00,L004005?
00DF 0D         932            inc     r5
00E0 8000       933            sjmp    L004005?
00E2            934   L004009?:
00E2 22         935            ret
00E3            936   ;------------------------------------------------------------
00E3            937   ;Allocation info for local variables in function 'UART1_Init'
00E3            938   ;------------------------------------------------------------
00E3            939   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00E3            940   ;------------------------------------------------------------
00E3            941   ;        main.c:516: void UART1_Init (unsigned long baudrate)
00E3            942   ;        -----------------------------------------
00E3            943   ;         function UART1_Init
00E3            944   ;        -----------------------------------------
00E3            945   _UART1_Init:
00E3 AA82       946            mov     r2,dpl
00E5 AB83       947            mov     r3,dph
00E7 ACF0       948            mov     r4,b
00E9 FD         949            mov     r5,a
00EA            950   ;        main.c:518: SFRPAGE = 0x20;
00EA 75A720     951            mov     _SFRPAGE,#0x20
00ED            952   ;        main.c:519: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00ED 75930C     953            mov     _SMOD1,#0x0C
00F0            954   ;        main.c:520: SCON1 = 0x10;
00F0 75C810     955            mov     _SCON1,#0x10
00F3            956   ;        main.c:521: SBCON1 =0x00;   // disable baud rate generator
00F3 759400     957            mov     _SBCON1,#0x00
00F6            958   ;        main.c:522: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00F6 8A00       959            mov     __divulong_PARM_2,r2
00F8 8B01       960            mov     (__divulong_PARM_2 + 1),r3
00FA 8C02       961            mov     (__divulong_PARM_2 + 2),r4
00FC 8D03       962            mov     (__divulong_PARM_2 + 3),r5
00FE 90A200     963            mov     dptr,#0xA200
0101 75F04A     964            mov     b,#0x4A
0104 7404       965            mov     a,#0x04
0106 120000     966            lcall   __divulong
0109 AA82       967            mov     r2,dpl
010B AB83       968            mov     r3,dph
010D ACF0       969            mov     r4,b
010F FD         970            mov     r5,a
0110 750018     971            mov     __divulong_PARM_2,#0x18
0113 E4         972            clr     a
0114 F501       973            mov     (__divulong_PARM_2 + 1),a
0116 F502       974            mov     (__divulong_PARM_2 + 2),a
0118 F503       975            mov     (__divulong_PARM_2 + 3),a
011A 8A82       976            mov     dpl,r2
011C 8B83       977            mov     dph,r3
011E 8CF0       978            mov     b,r4
0120 ED         979            mov     a,r5
0121 120000     980            lcall   __divulong
0124 AA82       981            mov     r2,dpl
0126 AB83       982            mov     r3,dph
0128 ACF0       983            mov     r4,b
012A FD         984            mov     r5,a
012B E4         985            clr     a
012C C3         986            clr     c
012D 9A         987            subb    a,r2
012E FA         988            mov     r2,a
012F E4         989            clr     a
0130 9B         990            subb    a,r3
0131 FB         991            mov     r3,a
0132 7401       992            mov     a,#0x01
0134 9C         993            subb    a,r4
0135 E4         994            clr     a
0136 9D         995            subb    a,r5
0137 8A95       996            mov     _SBRL1,r2
0139 8B96       997            mov     (_SBRL1 >> 8),r3
013B            998   ;        main.c:523: TI1 = 1; // indicate ready for TX
013B D2C9       999            setb    _TI1
013D           1000   ;        main.c:524: SBCON1 |= 0x40;   // enable baud rate generator
013D 439440    1001            orl     _SBCON1,#0x40
0140           1002   ;        main.c:525: SFRPAGE = 0x00;
0140 75A700    1003            mov     _SFRPAGE,#0x00
0143 22        1004            ret
0144           1005   ;------------------------------------------------------------
0144           1006   ;Allocation info for local variables in function 'putchar1'
0144           1007   ;------------------------------------------------------------
0144           1008   ;c                         Allocated to registers r2 
0144           1009   ;------------------------------------------------------------
0144           1010   ;        main.c:528: void putchar1 (char c) 
0144           1011   ;        -----------------------------------------
0144           1012   ;         function putchar1
0144           1013   ;        -----------------------------------------
0144           1014   _putchar1:
0144 AA82      1015            mov     r2,dpl
0146           1016   ;        main.c:530: SFRPAGE = 0x20;
0146 75A720    1017            mov     _SFRPAGE,#0x20
0149           1018   ;        main.c:531: while (!TI1);
0149           1019   L006001?:
0149           1020   ;        main.c:532: TI1=0;
0149 10C970    1021            jbc     _TI1,L006008?
014C 8000      1022            sjmp    L006001?
014E           1023   L006008?:
014E           1024   ;        main.c:533: SBUF1 = c;
014E 8A92      1025            mov     _SBUF1,r2
0150           1026   ;        main.c:534: SFRPAGE = 0x00;
0150 75A700    1027            mov     _SFRPAGE,#0x00
0153 22        1028            ret
0154           1029   ;------------------------------------------------------------
0154           1030   ;Allocation info for local variables in function 'sendstr1'
0154           1031   ;------------------------------------------------------------
0154           1032   ;s                         Allocated to registers r2 r3 r4 
0154           1033   ;------------------------------------------------------------
0154           1034   ;        main.c:537: void sendstr1 (char * s)
0154           1035   ;        -----------------------------------------
0154           1036   ;         function sendstr1
0154           1037   ;        -----------------------------------------
0154           1038   _sendstr1:
0154 AA82      1039            mov     r2,dpl
0156 AB83      1040            mov     r3,dph
0158 ACF0      1041            mov     r4,b
015A           1042   ;        main.c:539: while(*s)
015A           1043   L007001?:
015A 8A82      1044            mov     dpl,r2
015C 8B83      1045            mov     dph,r3
015E 8CF0      1046            mov     b,r4
0160 120000    1047            lcall   __gptrget
0163 FD        1048            mov     r5,a
0164 6000      1049            jz      L007004?
0166           1050   ;        main.c:541: putchar1(*s);
0166 8D82      1051            mov     dpl,r5
0168 C002      1052            push    ar2
016A C003      1053            push    ar3
016C C004      1054            push    ar4
016E 120000    1055            lcall   _putchar1
0171 D004      1056            pop     ar4
0173 D003      1057            pop     ar3
0175 D002      1058            pop     ar2
0177           1059   ;        main.c:542: s++;        
0177 0A        1060            inc     r2
0178 BA00B0    1061            cjne    r2,#0x00,L007001?
017B 0B        1062            inc     r3
017C 8000      1063            sjmp    L007001?
017E           1064   L007004?:
017E 22        1065            ret
017F           1066   ;------------------------------------------------------------
017F           1067   ;Allocation info for local variables in function 'getchar1'
017F           1068   ;------------------------------------------------------------
017F           1069   ;c                         Allocated with name '_getchar1_c_1_98'
017F           1070   ;------------------------------------------------------------
017F           1071   ;        main.c:546: char getchar1 (void)
017F           1072   ;        -----------------------------------------
017F           1073   ;         function getchar1
017F           1074   ;        -----------------------------------------
017F           1075   _getchar1:
017F           1076   ;        main.c:549: SFRPAGE = 0x20;
017F 75A720    1077            mov     _SFRPAGE,#0x20
0182           1078   ;        main.c:550: while (!RI1);
0182           1079   L008001?:
0182           1080   ;        main.c:551: RI1=0;
0182 10C8B0    1081            jbc     _RI1,L008008?
0185 8000      1082            sjmp    L008001?
0187           1083   L008008?:
0187           1084   ;        main.c:553: SCON1&=0b_0011_1111;
0187 53C83F    1085            anl     _SCON1,#0x3F
018A           1086   ;        main.c:554: c = SBUF1;
018A 859282    1087            mov     dpl,_SBUF1
018D           1088   ;        main.c:555: SFRPAGE = 0x00;
018D 75A700    1089            mov     _SFRPAGE,#0x00
0190           1090   ;        main.c:556: return (c);
0190 22        1091            ret
0191           1092   ;------------------------------------------------------------
0191           1093   ;Allocation info for local variables in function 'getchar1_with_timeout'
0191           1094   ;------------------------------------------------------------
0191           1095   ;c                         Allocated with name '_getchar1_with_timeout_c_1_100'
0191           1096   ;timeout                   Allocated with name '_getchar1_with_timeout_timeout_1_100'
0191           1097   ;------------------------------------------------------------
0191           1098   ;        main.c:559: char getchar1_with_timeout (void)
0191           1099   ;        -----------------------------------------
0191           1100   ;         function getchar1_with_timeout
0191           1101   ;        -----------------------------------------
0191           1102   _getchar1_with_timeout:
0191           1103   ;        main.c:563: SFRPAGE = 0x20;
0191 75A720    1104            mov     _SFRPAGE,#0x20
0194           1105   ;        main.c:565: while (!RI1)
0194 7A00      1106            mov     r2,#0x00
0196 7B00      1107            mov     r3,#0x00
0198           1108   L009003?:
0198 20C830    1109            jb      _RI1,L009005?
019B           1110   ;        main.c:567: SFRPAGE = 0x00;
019B 75A700    1111            mov     _SFRPAGE,#0x00
019E           1112   ;        main.c:568: Timer3us(20);
019E 758214    1113            mov     dpl,#0x14
01A1 C002      1114            push    ar2
01A3 C003      1115            push    ar3
01A5 120000    1116            lcall   _Timer3us
01A8 D003      1117            pop     ar3
01AA D002      1118            pop     ar2
01AC           1119   ;        main.c:569: SFRPAGE = 0x20;
01AC 75A720    1120            mov     _SFRPAGE,#0x20
01AF           1121   ;        main.c:570: timeout++;
01AF 0A        1122            inc     r2
01B0 BA0070    1123            cjne    r2,#0x00,L009012?
01B3 0B        1124            inc     r3
01B4           1125   L009012?:
01B4           1126   ;        main.c:571: if(timeout==25000)
01B4 BAA8F0    1127            cjne    r2,#0xA8,L009003?
01B7 BB61F0    1128            cjne    r3,#0x61,L009003?
01BA           1129   ;        main.c:573: SFRPAGE = 0x00;
01BA 75A700    1130            mov     _SFRPAGE,#0x00
01BD           1131   ;        main.c:574: return ('\n'); // Timeout after half second
01BD 75820A    1132            mov     dpl,#0x0A
01C0 22        1133            ret
01C1           1134   L009005?:
01C1           1135   ;        main.c:577: RI1=0;
01C1 C2C8      1136            clr     _RI1
01C3           1137   ;        main.c:579: SCON1&=0b_0011_1111;
01C3 53C83F    1138            anl     _SCON1,#0x3F
01C6           1139   ;        main.c:580: c = SBUF1;
01C6 859282    1140            mov     dpl,_SBUF1
01C9           1141   ;        main.c:581: SFRPAGE = 0x00;
01C9 75A700    1142            mov     _SFRPAGE,#0x00
01CC           1143   ;        main.c:582: return (c);
01CC 22        1144            ret
01CD           1145   ;------------------------------------------------------------
01CD           1146   ;Allocation info for local variables in function 'getstr1'
01CD           1147   ;------------------------------------------------------------
01CD           1148   ;n                         Allocated with name '_getstr1_PARM_2'
01CD           1149   ;s                         Allocated to registers r2 r3 r4 
01CD           1150   ;c                         Allocated with name '_getstr1_c_1_104'
01CD           1151   ;cnt                       Allocated with name '_getstr1_cnt_1_104'
01CD           1152   ;------------------------------------------------------------
01CD           1153   ;        main.c:585: void getstr1 (char * s, unsigned char n)
01CD           1154   ;        -----------------------------------------
01CD           1155   ;         function getstr1
01CD           1156   ;        -----------------------------------------
01CD           1157   _getstr1:
01CD AA82      1158            mov     r2,dpl
01CF AB83      1159            mov     r3,dph
01D1 ACF0      1160            mov     r4,b
01D3           1161   ;        main.c:591: while(1)
01D3 7D00      1162            mov     r5,#0x00
01D5 8A06      1163            mov     ar6,r2
01D7 8B07      1164            mov     ar7,r3
01D9 8C00      1165            mov     ar0,r4
01DB           1166   L010007?:
01DB           1167   ;        main.c:593: c=getchar1_with_timeout();
01DB C002      1168            push    ar2
01DD C003      1169            push    ar3
01DF C004      1170            push    ar4
01E1 C005      1171            push    ar5
01E3 C006      1172            push    ar6
01E5 C007      1173            push    ar7
01E7 C000      1174            push    ar0
01E9 120000    1175            lcall   _getchar1_with_timeout
01EC A982      1176            mov     r1,dpl
01EE D000      1177            pop     ar0
01F0 D007      1178            pop     ar7
01F2 D006      1179            pop     ar6
01F4 D005      1180            pop     ar5
01F6 D004      1181            pop     ar4
01F8 D003      1182            pop     ar3
01FA D002      1183            pop     ar2
01FC           1184   ;        main.c:594: if(c=='\n')
01FC B90AF0    1185            cjne    r1,#0x0A,L010002?
01FF           1186   ;        main.c:596: *s=0;
01FF 8A82      1187            mov     dpl,r2
0201 8B83      1188            mov     dph,r3
0203 8CF0      1189            mov     b,r4
0205 E4        1190            clr     a
0206           1191   ;        main.c:597: return;
0206 020000    1192            ljmp    __gptrput
0209           1193   L010002?:
0209           1194   ;        main.c:600: if (cnt<n)
0209 C3        1195            clr     c
020A ED        1196            mov     a,r5
020B 9540      1197            subb    a,_getstr1_PARM_2
020D 5000      1198            jnc     L010004?
020F           1199   ;        main.c:602: cnt++;
020F 0D        1200            inc     r5
0210           1201   ;        main.c:603: *s=c;
0210 8E82      1202            mov     dpl,r6
0212 8F83      1203            mov     dph,r7
0214 88F0      1204            mov     b,r0
0216 E9        1205            mov     a,r1
0217 120000    1206            lcall   __gptrput
021A A3        1207            inc     dptr
021B AE82      1208            mov     r6,dpl
021D AF83      1209            mov     r7,dph
021F           1210   ;        main.c:604: s++;
021F 8E02      1211            mov     ar2,r6
0221 8F03      1212            mov     ar3,r7
0223 8804      1213            mov     ar4,r0
0225 8000      1214            sjmp    L010007?
0227           1215   L010004?:
0227           1216   ;        main.c:608: *s=0;
0227 8A82      1217            mov     dpl,r2
0229 8B83      1218            mov     dph,r3
022B 8CF0      1219            mov     b,r4
022D E4        1220            clr     a
022E           1221   ;        main.c:609: return;
022E 020000    1222            ljmp    __gptrput
0231           1223   ;------------------------------------------------------------
0231           1224   ;Allocation info for local variables in function 'RXU1'
0231           1225   ;------------------------------------------------------------
0231           1226   ;------------------------------------------------------------
0231           1227   ;        main.c:615: bit RXU1 (void)
0231           1228   ;        -----------------------------------------
0231           1229   ;         function RXU1
0231           1230   ;        -----------------------------------------
0231           1231   _RXU1:
0231           1232   ;        main.c:618: SFRPAGE = 0x20;
0231 75A720    1233            mov     _SFRPAGE,#0x20
0234           1234   ;        main.c:619: mybit=RI1;
0234 A2C8      1235            mov     c,_RI1
0236           1236   ;        main.c:620: SFRPAGE = 0x00;
0236 75A700    1237            mov     _SFRPAGE,#0x00
0239           1238   ;        main.c:621: return mybit;
0239 22        1239            ret
023A           1240   ;------------------------------------------------------------
023A           1241   ;Allocation info for local variables in function 'waitms_or_RI1'
023A           1242   ;------------------------------------------------------------
023A           1243   ;ms                        Allocated to registers r2 r3 
023A           1244   ;j                         Allocated with name '_waitms_or_RI1_j_1_112'
023A           1245   ;k                         Allocated with name '_waitms_or_RI1_k_1_112'
023A           1246   ;------------------------------------------------------------
023A           1247   ;        main.c:624: void waitms_or_RI1 (unsigned int ms)
023A           1248   ;        -----------------------------------------
023A           1249   ;         function waitms_or_RI1
023A           1250   ;        -----------------------------------------
023A           1251   _waitms_or_RI1:
023A AA82      1252            mov     r2,dpl
023C AB83      1253            mov     r3,dph
023E           1254   ;        main.c:628: for(j=0; j<ms; j++)
023E 7C00      1255            mov     r4,#0x00
0240 7D00      1256            mov     r5,#0x00
0242           1257   L012007?:
0242 C3        1258            clr     c
0243 EC        1259            mov     a,r4
0244 9A        1260            subb    a,r2
0245 ED        1261            mov     a,r5
0246 9B        1262            subb    a,r3
0247 5000      1263            jnc     L012011?
0249           1264   ;        main.c:630: for (k=0; k<4; k++)
0249 7E00      1265            mov     r6,#0x00
024B           1266   L012003?:
024B BE0470    1267            cjne    r6,#0x04,L012019?
024E           1268   L012019?:
024E 5000      1269            jnc     L012009?
0250           1270   ;        main.c:632: if(RXU1()) return;
0250 C002      1271            push    ar2
0252 C003      1272            push    ar3
0254 C004      1273            push    ar4
0256 C005      1274            push    ar5
0258 C006      1275            push    ar6
025A 120000    1276            lcall   _RXU1
025D E4        1277            clr     a
025E 33        1278            rlc     a
025F D006      1279            pop     ar6
0261 D005      1280            pop     ar5
0263 D004      1281            pop     ar4
0265 D003      1282            pop     ar3
0267 D002      1283            pop     ar2
0269 6000      1284            jz      L012002?
026B 22        1285            ret
026C           1286   L012002?:
026C           1287   ;        main.c:633: Timer3us(250);
026C 7582FA    1288            mov     dpl,#0xFA
026F C002      1289            push    ar2
0271 C003      1290            push    ar3
0273 C004      1291            push    ar4
0275 C005      1292            push    ar5
0277 C006      1293            push    ar6
0279 120000    1294            lcall   _Timer3us
027C D006      1295            pop     ar6
027E D005      1296            pop     ar5
0280 D004      1297            pop     ar4
0282 D003      1298            pop     ar3
0284 D002      1299            pop     ar2
0286           1300   ;        main.c:630: for (k=0; k<4; k++)
0286 0E        1301            inc     r6
0287 8000      1302            sjmp    L012003?
0289           1303   L012009?:
0289           1304   ;        main.c:628: for(j=0; j<ms; j++)
0289 0C        1305            inc     r4
028A BC00B0    1306            cjne    r4,#0x00,L012007?
028D 0D        1307            inc     r5
028E 8000      1308            sjmp    L012007?
0290           1309   L012011?:
0290 22        1310            ret
0291           1311   ;------------------------------------------------------------
0291           1312   ;Allocation info for local variables in function 'SendATCommand'
0291           1313   ;------------------------------------------------------------
0291           1314   ;s                         Allocated to registers r2 r3 r4 
0291           1315   ;------------------------------------------------------------
0291           1316   ;        main.c:638: void SendATCommand (char * s)
0291           1317   ;        -----------------------------------------
0291           1318   ;         function SendATCommand
0291           1319   ;        -----------------------------------------
0291           1320   _SendATCommand:
0291 AA82      1321            mov     r2,dpl
0293 AB83      1322            mov     r3,dph
0295 ACF0      1323            mov     r4,b
0297           1324   ;        main.c:640: printf("Command: %s", s);
0297 C002      1325            push    ar2
0299 C003      1326            push    ar3
029B C004      1327            push    ar4
029D C002      1328            push    ar2
029F C003      1329            push    ar3
02A1 C004      1330            push    ar4
02A3 7430      1331            mov     a,#__str_0
02A5 C0E0      1332            push    acc
02A7 74D1      1333            mov     a,#(__str_0 >> 8)
02A9 C0E0      1334            push    acc
02AB 7480      1335            mov     a,#0x80
02AD C0E0      1336            push    acc
02AF 120000    1337            lcall   _printf
02B2 E581      1338            mov     a,sp
02B4 24FA      1339            add     a,#0xfa
02B6 F581      1340            mov     sp,a
02B8           1341   ;        main.c:641: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02B8 C2A0      1342            clr     _P2_0
02BA           1343   ;        main.c:642: waitms(5);
02BA 900005    1344            mov     dptr,#0x0005
02BD 120000    1345            lcall   _waitms
02C0 D004      1346            pop     ar4
02C2 D003      1347            pop     ar3
02C4 D002      1348            pop     ar2
02C6           1349   ;        main.c:643: sendstr1(s);
02C6 8A82      1350            mov     dpl,r2
02C8 8B83      1351            mov     dph,r3
02CA 8CF0      1352            mov     b,r4
02CC 120000    1353            lcall   _sendstr1
02CF           1354   ;        main.c:644: getstr1(buff, sizeof(buff)-1);
02CF 754013    1355            mov     _getstr1_PARM_2,#0x13
02D2 9051B0    1356            mov     dptr,#_buff
02D5 75F040    1357            mov     b,#0x40
02D8 120000    1358            lcall   _getstr1
02DB           1359   ;        main.c:645: waitms(10);
02DB 90000A    1360            mov     dptr,#0x000A
02DE 120000    1361            lcall   _waitms
02E1           1362   ;        main.c:646: P2_0=1; // 'set' pin to 1 is normal operation mode.
02E1 D2A0      1363            setb    _P2_0
02E3           1364   ;        main.c:647: printf("Response: %s\r\n", buff);
02E3 74B0      1365            mov     a,#_buff
02E5 C0E0      1366            push    acc
02E7 7451      1367            mov     a,#(_buff >> 8)
02E9 C0E0      1368            push    acc
02EB 7440      1369            mov     a,#0x40
02ED C0E0      1370            push    acc
02EF 74F0      1371            mov     a,#__str_1
02F1 C0E0      1372            push    acc
02F3 74D1      1373            mov     a,#(__str_1 >> 8)
02F5 C0E0      1374            push    acc
02F7 7480      1375            mov     a,#0x80
02F9 C0E0      1376            push    acc
02FB 120000    1377            lcall   _printf
02FE E581      1378            mov     a,sp
0300 24FA      1379            add     a,#0xfa
0302 F581      1380            mov     sp,a
0304 22        1381            ret
0305           1382   ;------------------------------------------------------------
0305           1383   ;Allocation info for local variables in function 'ReceptionOff'
0305           1384   ;------------------------------------------------------------
0305           1385   ;------------------------------------------------------------
0305           1386   ;        main.c:650: void ReceptionOff (void)
0305           1387   ;        -----------------------------------------
0305           1388   ;         function ReceptionOff
0305           1389   ;        -----------------------------------------
0305           1390   _ReceptionOff:
0305           1391   ;        main.c:652: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0305 C2A0      1392            clr     _P2_0
0307           1393   ;        main.c:653: waitms(10);
0307 90000A    1394            mov     dptr,#0x000A
030A 120000    1395            lcall   _waitms
030D           1396   ;        main.c:654: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
030D 90D230    1397            mov     dptr,#__str_2
0310 75F080    1398            mov     b,#0x80
0313 120000    1399            lcall   _sendstr1
0316           1400   ;        main.c:655: waitms(10);
0316 90000A    1401            mov     dptr,#0x000A
0319 120000    1402            lcall   _waitms
031C           1403   ;        main.c:657: SCON1&=0b_0011_1111;
031C 53C83F    1404            anl     _SCON1,#0x3F
031F           1405   ;        main.c:658: P2_0=1; // 'set' pin to 1 is normal operation mode.
031F D2A0      1406            setb    _P2_0
0321 22        1407            ret
0322           1408   ;------------------------------------------------------------
0322           1409   ;Allocation info for local variables in function 'Set_Pin_Output'
0322           1410   ;------------------------------------------------------------
0322           1411   ;pin                       Allocated to registers r2 
0322           1412   ;mask                      Allocated to registers r3 
0322           1413   ;------------------------------------------------------------
0322           1414   ;        main.c:661: void Set_Pin_Output (unsigned char pin)
0322           1415   ;        -----------------------------------------
0322           1416   ;         function Set_Pin_Output
0322           1417   ;        -----------------------------------------
0322           1418   _Set_Pin_Output:
0322 AA82      1419            mov     r2,dpl
0324           1420   ;        main.c:665: mask=(1<<(pin&0x7));
0324 7407      1421            mov     a,#0x07
0326 5A        1422            anl     a,r2
0327 F5F0      1423            mov     b,a
0329 05F0      1424            inc     b
032B 7401      1425            mov     a,#0x01
032D 8000      1426            sjmp    L015011?
032F           1427   L015009?:
032F 25E0      1428            add     a,acc
0331           1429   L015011?:
0331 D5F0B0    1430            djnz    b,L015009?
0334 FB        1431            mov     r3,a
0335           1432   ;        main.c:666: switch(pin/0x10)
0335 EA        1433            mov     a,r2
0336 C4        1434            swap    a
0337 540F      1435            anl     a,#0x0f
0339 FA        1436            mov  r2,a
033A 24FC      1437            add     a,#0xff - 0x03
033C 4000      1438            jc      L015006?
033E EA        1439            mov     a,r2
033F 2A        1440            add     a,r2
0340 2A        1441            add     a,r2
0341 90D330    1442            mov     dptr,#L015013?
0344 73        1443            jmp     @a+dptr
0345           1444   L015013?:
0345 020000    1445            ljmp    L015001?
0348 020000    1446            ljmp    L015002?
034B 020000    1447            ljmp    L015003?
034E 020000    1448            ljmp    L015004?
0351           1449   ;        main.c:668: case 0: P0MDOUT |= mask; break;
0351           1450   L015001?:
0351 EB        1451            mov     a,r3
0352 42A4      1452            orl     _P0MDOUT,a
0354           1453   ;        main.c:669: case 1: P1MDOUT |= mask; break;
0354 22        1454            ret
0355           1455   L015002?:
0355 EB        1456            mov     a,r3
0356 42A5      1457            orl     _P1MDOUT,a
0358           1458   ;        main.c:670: case 2: P2MDOUT |= mask; break; 
0358 22        1459            ret
0359           1460   L015003?:
0359 EB        1461            mov     a,r3
035A 42A6      1462            orl     _P2MDOUT,a
035C           1463   ;        main.c:671: case 3: P3MDOUT |= mask; break; 
035C 22        1464            ret
035D           1465   L015004?:
035D EB        1466            mov     a,r3
035E 429C      1467            orl     _P3MDOUT,a
0360           1468   ;        main.c:672: }   
0360           1469   L015006?:
0360 22        1470            ret
0361           1471   ;------------------------------------------------------------
0361           1472   ;Allocation info for local variables in function 'Set_Pin_Input'
0361           1473   ;------------------------------------------------------------
0361           1474   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_123'
0361           1475   ;pin                       Allocated to registers r2 
0361           1476   ;------------------------------------------------------------
0361           1477   ;        main.c:675: void Set_Pin_Input (unsigned char pin)
0361           1478   ;        -----------------------------------------
0361           1479   ;         function Set_Pin_Input
0361           1480   ;        -----------------------------------------
0361           1481   _Set_Pin_Input:
0361 AA82      1482            mov     r2,dpl
0363           1483   ;        main.c:679: mask=(1<<(pin&0x7));
0363 7407      1484            mov     a,#0x07
0365 5A        1485            anl     a,r2
0366 F5F0      1486            mov     b,a
0368 05F0      1487            inc     b
036A 7401      1488            mov     a,#0x01
036C 8000      1489            sjmp    L016011?
036E           1490   L016009?:
036E 25E0      1491            add     a,acc
0370           1492   L016011?:
0370 D5F0B0    1493            djnz    b,L016009?
0373           1494   ;        main.c:680: mask=~mask;
0373 F4        1495            cpl     a
0374 FB        1496            mov     r3,a
0375           1497   ;        main.c:681: switch(pin/0x10)
0375 EA        1498            mov     a,r2
0376 C4        1499            swap    a
0377 540F      1500            anl     a,#0x0f
0379 FA        1501            mov  r2,a
037A 24FC      1502            add     a,#0xff - 0x03
037C 4000      1503            jc      L016006?
037E EA        1504            mov     a,r2
037F 2A        1505            add     a,r2
0380 2A        1506            add     a,r2
0381 90D530    1507            mov     dptr,#L016013?
0384 73        1508            jmp     @a+dptr
0385           1509   L016013?:
0385 020000    1510            ljmp    L016001?
0388 020000    1511            ljmp    L016002?
038B 020000    1512            ljmp    L016003?
038E 020000    1513            ljmp    L016004?
0391           1514   ;        main.c:683: case 0: P0MDOUT &= mask; break;
0391           1515   L016001?:
0391 EB        1516            mov     a,r3
0392 52A4      1517            anl     _P0MDOUT,a
0394           1518   ;        main.c:684: case 1: P1MDOUT &= mask; break;
0394 22        1519            ret
0395           1520   L016002?:
0395 EB        1521            mov     a,r3
0396 52A5      1522            anl     _P1MDOUT,a
0398           1523   ;        main.c:685: case 2: P2MDOUT &= mask; break; 
0398 22        1524            ret
0399           1525   L016003?:
0399 EB        1526            mov     a,r3
039A 52A6      1527            anl     _P2MDOUT,a
039C           1528   ;        main.c:686: case 3: P3MDOUT &= mask; break; 
039C 22        1529            ret
039D           1530   L016004?:
039D EB        1531            mov     a,r3
039E 529C      1532            anl     _P3MDOUT,a
03A0           1533   ;        main.c:687: }   
03A0           1534   L016006?:
03A0 22        1535            ret
03A1           1536   ;------------------------------------------------------------
03A1           1537   ;Allocation info for local variables in function 'InitADC'
03A1           1538   ;------------------------------------------------------------
03A1           1539   ;------------------------------------------------------------
03A1           1540   ;        main.c:690: void InitADC (void)
03A1           1541   ;        -----------------------------------------
03A1           1542   ;         function InitADC
03A1           1543   ;        -----------------------------------------
03A1           1544   _InitADC:
03A1           1545   ;        main.c:692: SFRPAGE = 0x00;
03A1 75A700    1546            mov     _SFRPAGE,#0x00
03A4           1547   ;        main.c:693: ADEN=0; // Disable ADC
03A4 C2EF      1548            clr     _ADEN
03A6           1549   ;        main.c:698: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
03A6 75B280    1550            mov     _ADC0CN1,#0x80
03A9           1551   ;        main.c:702: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
03A9 75BC20    1552            mov     _ADC0CF0,#0x20
03AC           1553   ;        main.c:706: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
03AC 75B91E    1554            mov     _ADC0CF1,#0x1E
03AF           1555   ;        main.c:715: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
03AF 75E800    1556            mov     _ADC0CN0,#0x00
03B2           1557   ;        main.c:720: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03B2 75DF3F    1558            mov     _ADC0CF2,#0x3F
03B5           1559   ;        main.c:724: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03B5 75B300    1560            mov     _ADC0CN2,#0x00
03B8           1561   ;        main.c:726: ADEN=1; // Enable ADC
03B8 D2EF      1562            setb    _ADEN
03BA 22        1563            ret
03BB           1564   ;------------------------------------------------------------
03BB           1565   ;Allocation info for local variables in function 'InitPinADC'
03BB           1566   ;------------------------------------------------------------
03BB           1567   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
03BB           1568   ;portno                    Allocated to registers r2 
03BB           1569   ;mask                      Allocated to registers r3 
03BB           1570   ;------------------------------------------------------------
03BB           1571   ;        main.c:729: void InitPinADC (unsigned char portno, unsigned char pin_num)
03BB           1572   ;        -----------------------------------------
03BB           1573   ;         function InitPinADC
03BB           1574   ;        -----------------------------------------
03BB           1575   _InitPinADC:
03BB AA82      1576            mov     r2,dpl
03BD           1577   ;        main.c:733: mask=1<<pin_num;
03BD 85E0F0    1578            mov     b,_InitPinADC_PARM_2
03C0 05F0      1579            inc     b
03C2 7401      1580            mov     a,#0x01
03C4 8000      1581            sjmp    L018013?
03C6           1582   L018011?:
03C6 25E0      1583            add     a,acc
03C8           1584   L018013?:
03C8 D5F0B0    1585            djnz    b,L018011?
03CB FB        1586            mov     r3,a
03CC           1587   ;        main.c:735: SFRPAGE = 0x20;
03CC 75A720    1588            mov     _SFRPAGE,#0x20
03CF           1589   ;        main.c:736: switch (portno)
03CF BA00F0    1590            cjne    r2,#0x00,L018014?
03D2 8000      1591            sjmp    L018001?
03D4           1592   L018014?:
03D4 BA0170    1593            cjne    r2,#0x01,L018015?
03D7 8000      1594            sjmp    L018002?
03D9           1595   L018015?:
03D9           1596   ;        main.c:738: case 0:
03D9 BA02F0    1597            cjne    r2,#0x02,L018005?
03DC 8000      1598            sjmp    L018003?
03DE           1599   L018001?:
03DE           1600   ;        main.c:739: P0MDIN &= (~mask); // Set pin as analog input
03DE EB        1601            mov     a,r3
03DF F4        1602            cpl     a
03E0 FA        1603            mov     r2,a
03E1 52F1      1604            anl     _P0MDIN,a
03E3           1605   ;        main.c:740: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03E3 EB        1606            mov     a,r3
03E4 42D4      1607            orl     _P0SKIP,a
03E6           1608   ;        main.c:741: break;
03E6           1609   ;        main.c:742: case 1:
03E6 8000      1610            sjmp    L018005?
03E8           1611   L018002?:
03E8           1612   ;        main.c:743: P1MDIN &= (~mask); // Set pin as analog input
03E8 EB        1613            mov     a,r3
03E9 F4        1614            cpl     a
03EA FA        1615            mov     r2,a
03EB 52F2      1616            anl     _P1MDIN,a
03ED           1617   ;        main.c:744: P1SKIP |= mask; // Skip Crossbar decoding for this pin
03ED EB        1618            mov     a,r3
03EE 42D5      1619            orl     _P1SKIP,a
03F0           1620   ;        main.c:745: break;
03F0           1621   ;        main.c:746: case 2:
03F0 8000      1622            sjmp    L018005?
03F2           1623   L018003?:
03F2           1624   ;        main.c:747: P2MDIN &= (~mask); // Set pin as analog input
03F2 EB        1625            mov     a,r3
03F3 F4        1626            cpl     a
03F4 FA        1627            mov     r2,a
03F5 52F3      1628            anl     _P2MDIN,a
03F7           1629   ;        main.c:748: P2SKIP |= mask; // Skip Crossbar decoding for this pin
03F7 EB        1630            mov     a,r3
03F8 42CC      1631            orl     _P2SKIP,a
03FA           1632   ;        main.c:752: }
03FA           1633   L018005?:
03FA           1634   ;        main.c:753: SFRPAGE = 0x00;
03FA 75A700    1635            mov     _SFRPAGE,#0x00
03FD 22        1636            ret
03FE           1637   ;------------------------------------------------------------
03FE           1638   ;Allocation info for local variables in function 'ADC_at_Pin'
03FE           1639   ;------------------------------------------------------------
03FE           1640   ;pin                       Allocated to registers 
03FE           1641   ;------------------------------------------------------------
03FE           1642   ;        main.c:756: unsigned int ADC_at_Pin(unsigned char pin)
03FE           1643   ;        -----------------------------------------
03FE           1644   ;         function ADC_at_Pin
03FE           1645   ;        -----------------------------------------
03FE           1646   _ADC_at_Pin:
03FE 8582BB    1647            mov     _ADC0MX,dpl
0401           1648   ;        main.c:759: ADINT = 0;
0401 C2ED      1649            clr     _ADINT
0403           1650   ;        main.c:760: ADBUSY = 1;     // Convert voltage at the pin
0403 D2EC      1651            setb    _ADBUSY
0405           1652   ;        main.c:761: while (!ADINT); // Wait for conversion to complete
0405           1653   L019001?:
0405 30ED70    1654            jnb     _ADINT,L019001?
0408           1655   ;        main.c:762: return (ADC0);
0408 85BD82    1656            mov     dpl,_ADC0
040B 85BE83    1657            mov     dph,(_ADC0 >> 8)
040E 22        1658            ret
040F           1659   ;------------------------------------------------------------
040F           1660   ;Allocation info for local variables in function 'ReadHX711'
040F           1661   ;------------------------------------------------------------
040F           1662   ;dataa                     Allocated with name '_ReadHX711_dataa_1_133'
040F           1663   ;i                         Allocated with name '_ReadHX711_i_1_133'
040F           1664   ;ans                       Allocated with name '_ReadHX711_ans_1_133'
040F           1665   ;j                         Allocated with name '_ReadHX711_j_1_133'
040F           1666   ;------------------------------------------------------------
040F           1667   ;        main.c:765: int ReadHX711(void) {
040F           1668   ;        -----------------------------------------
040F           1669   ;         function ReadHX711
040F           1670   ;        -----------------------------------------
040F           1671   _ReadHX711:
040F           1672   ;        main.c:766: xdata unsigned long dataa = 0;
040F 90C520    1673            mov     dptr,#_ReadHX711_dataa_1_133
0412 E4        1674            clr     a
0413 F0        1675            movx    @dptr,a
0414 A3        1676            inc     dptr
0415 F0        1677            movx    @dptr,a
0416 A3        1678            inc     dptr
0417 F0        1679            movx    @dptr,a
0418 A3        1680            inc     dptr
0419 F0        1681            movx    @dptr,a
041A           1682   ;        main.c:771: PD_SCK = 0;
041A C2A5      1683            clr     _P2_5
041C           1684   ;        main.c:773: for (i = 0; i < 24; i++) {
041C 7A00      1685            mov     r2,#0x00
041E           1686   L020011?:
041E C3        1687            clr     c
041F EA        1688            mov     a,r2
0420 6480      1689            xrl     a,#0x80
0422 9498      1690            subb    a,#0x98
0424 4000      1691            jc      L020037?
0426 020000    1692            ljmp    L020014?
0429           1693   L020037?:
0429           1694   ;        main.c:774: PD_SCK = 1;
0429 D2A5      1695            setb    _P2_5
042B           1696   ;        main.c:775: for (j = 0; j < 4; j++);
042B 90C570    1697            mov     dptr,#_ReadHX711_j_1_133
042E E4        1698            clr     a
042F F0        1699            movx    @dptr,a
0430           1700   L020003?:
0430 90C570    1701            mov     dptr,#_ReadHX711_j_1_133
0433 E0        1702            movx    a,@dptr
0434 FB        1703            mov     r3,a
0435 C3        1704            clr     c
0436 6480      1705            xrl     a,#0x80
0438 9484      1706            subb    a,#0x84
043A 5000      1707            jnc     L020006?
043C 90C570    1708            mov     dptr,#_ReadHX711_j_1_133
043F E0        1709            movx    a,@dptr
0440 2401      1710            add     a,#0x01
0442 F0        1711            movx    @dptr,a
0443 8000      1712            sjmp    L020003?
0445           1713   L020006?:
0445           1714   ;        main.c:776: dataa = dataa << 1;
0445 90C520    1715            mov     dptr,#_ReadHX711_dataa_1_133
0448 E0        1716            movx    a,@dptr
0449 FB        1717            mov     r3,a
044A A3        1718            inc     dptr
044B E0        1719            movx    a,@dptr
044C FC        1720            mov     r4,a
044D A3        1721            inc     dptr
044E E0        1722            movx    a,@dptr
044F FD        1723            mov     r5,a
0450 A3        1724            inc     dptr
0451 E0        1725            movx    a,@dptr
0452 FE        1726            mov     r6,a
0453 EB        1727            mov     a,r3
0454 2B        1728            add     a,r3
0455 FB        1729            mov     r3,a
0456 EC        1730            mov     a,r4
0457 33        1731            rlc     a
0458 FC        1732            mov     r4,a
0459 ED        1733            mov     a,r5
045A 33        1734            rlc     a
045B FD        1735            mov     r5,a
045C EE        1736            mov     a,r6
045D 33        1737            rlc     a
045E FE        1738            mov     r6,a
045F 90C520    1739            mov     dptr,#_ReadHX711_dataa_1_133
0462 EB        1740            mov     a,r3
0463 F0        1741            movx    @dptr,a
0464 A3        1742            inc     dptr
0465 EC        1743            mov     a,r4
0466 F0        1744            movx    @dptr,a
0467 A3        1745            inc     dptr
0468 ED        1746            mov     a,r5
0469 F0        1747            movx    @dptr,a
046A A3        1748            inc     dptr
046B EE        1749            mov     a,r6
046C F0        1750            movx    @dptr,a
046D           1751   ;        main.c:777: if (DOUT) {
046D 30A6F0    1752            jnb     _P2_6,L020002?
0470           1753   ;        main.c:778: dataa |= 0x01;
0470 90C520    1754            mov     dptr,#_ReadHX711_dataa_1_133
0473 E0        1755            movx    a,@dptr
0474 FB        1756            mov     r3,a
0475 A3        1757            inc     dptr
0476 E0        1758            movx    a,@dptr
0477 FC        1759            mov     r4,a
0478 A3        1760            inc     dptr
0479 E0        1761            movx    a,@dptr
047A FD        1762            mov     r5,a
047B A3        1763            inc     dptr
047C E0        1764            movx    a,@dptr
047D FE        1765            mov     r6,a
047E 90C520    1766            mov     dptr,#_ReadHX711_dataa_1_133
0481 7401      1767            mov     a,#0x01
0483 4B        1768            orl     a,r3
0484 F0        1769            movx    @dptr,a
0485 A3        1770            inc     dptr
0486 EC        1771            mov     a,r4
0487 F0        1772            movx    @dptr,a
0488 A3        1773            inc     dptr
0489 ED        1774            mov     a,r5
048A F0        1775            movx    @dptr,a
048B A3        1776            inc     dptr
048C EE        1777            mov     a,r6
048D F0        1778            movx    @dptr,a
048E           1779   L020002?:
048E           1780   ;        main.c:780: PD_SCK = 0;
048E C2A5      1781            clr     _P2_5
0490           1782   ;        main.c:781: for (j = 0; j < 4; j++);
0490 90C570    1783            mov     dptr,#_ReadHX711_j_1_133
0493 E4        1784            clr     a
0494 F0        1785            movx    @dptr,a
0495           1786   L020007?:
0495 90C570    1787            mov     dptr,#_ReadHX711_j_1_133
0498 E0        1788            movx    a,@dptr
0499 FB        1789            mov     r3,a
049A C3        1790            clr     c
049B 6480      1791            xrl     a,#0x80
049D 9484      1792            subb    a,#0x84
049F 5000      1793            jnc     L020013?
04A1 90C570    1794            mov     dptr,#_ReadHX711_j_1_133
04A4 E0        1795            movx    a,@dptr
04A5 2401      1796            add     a,#0x01
04A7 F0        1797            movx    @dptr,a
04A8 8000      1798            sjmp    L020007?
04AA           1799   L020013?:
04AA           1800   ;        main.c:773: for (i = 0; i < 24; i++) {
04AA 0A        1801            inc     r2
04AB 020000    1802            ljmp    L020011?
04AE           1803   L020014?:
04AE           1804   ;        main.c:784: PD_SCK = 1;
04AE D2A5      1805            setb    _P2_5
04B0           1806   ;        main.c:785: for (j = 0; j < 4; j++);
04B0 90C570    1807            mov     dptr,#_ReadHX711_j_1_133
04B3 E4        1808            clr     a
04B4 F0        1809            movx    @dptr,a
04B5           1810   L020015?:
04B5 90C570    1811            mov     dptr,#_ReadHX711_j_1_133
04B8 E0        1812            movx    a,@dptr
04B9 FA        1813            mov     r2,a
04BA C3        1814            clr     c
04BB 6480      1815            xrl     a,#0x80
04BD 9484      1816            subb    a,#0x84
04BF 5000      1817            jnc     L020018?
04C1 90C570    1818            mov     dptr,#_ReadHX711_j_1_133
04C4 E0        1819            movx    a,@dptr
04C5 2401      1820            add     a,#0x01
04C7 F0        1821            movx    @dptr,a
04C8 8000      1822            sjmp    L020015?
04CA           1823   L020018?:
04CA           1824   ;        main.c:786: PD_SCK = 0;
04CA C2A5      1825            clr     _P2_5
04CC           1826   ;        main.c:787: for (j = 0; j < 4; j++);
04CC 90C570    1827            mov     dptr,#_ReadHX711_j_1_133
04CF E4        1828            clr     a
04D0 F0        1829            movx    @dptr,a
04D1           1830   L020019?:
04D1 90C570    1831            mov     dptr,#_ReadHX711_j_1_133
04D4 E0        1832            movx    a,@dptr
04D5 FA        1833            mov     r2,a
04D6 C3        1834            clr     c
04D7 6480      1835            xrl     a,#0x80
04D9 9484      1836            subb    a,#0x84
04DB 5000      1837            jnc     L020022?
04DD 90C570    1838            mov     dptr,#_ReadHX711_j_1_133
04E0 E0        1839            movx    a,@dptr
04E1 2401      1840            add     a,#0x01
04E3 F0        1841            movx    @dptr,a
04E4 8000      1842            sjmp    L020019?
04E6           1843   L020022?:
04E6           1844   ;        main.c:788: ans = (dataa % 1000000)/10;
04E6 90C520    1845            mov     dptr,#_ReadHX711_dataa_1_133
04E9 E0        1846            movx    a,@dptr
04EA FA        1847            mov     r2,a
04EB A3        1848            inc     dptr
04EC E0        1849            movx    a,@dptr
04ED FB        1850            mov     r3,a
04EE A3        1851            inc     dptr
04EF E0        1852            movx    a,@dptr
04F0 FC        1853            mov     r4,a
04F1 A3        1854            inc     dptr
04F2 E0        1855            movx    a,@dptr
04F3 FD        1856            mov     r5,a
04F4 750040    1857            mov     __modulong_PARM_2,#0x40
04F7 750142    1858            mov     (__modulong_PARM_2 + 1),#0x42
04FA 75020F    1859            mov     (__modulong_PARM_2 + 2),#0x0F
04FD 750300    1860            mov     (__modulong_PARM_2 + 3),#0x00
0500 8A82      1861            mov     dpl,r2
0502 8B83      1862            mov     dph,r3
0504 8CF0      1863            mov     b,r4
0506 ED        1864            mov     a,r5
0507 120000    1865            lcall   __modulong
050A AA82      1866            mov     r2,dpl
050C AB83      1867            mov     r3,dph
050E ACF0      1868            mov     r4,b
0510 FD        1869            mov     r5,a
0511 75000A    1870            mov     __divulong_PARM_2,#0x0A
0514 E4        1871            clr     a
0515 F501      1872            mov     (__divulong_PARM_2 + 1),a
0517 F502      1873            mov     (__divulong_PARM_2 + 2),a
0519 F503      1874            mov     (__divulong_PARM_2 + 3),a
051B 8A82      1875            mov     dpl,r2
051D 8B83      1876            mov     dph,r3
051F 8CF0      1877            mov     b,r4
0521 ED        1878            mov     a,r5
0522           1879   ;        main.c:789: return ans;
0522 020000    1880            ljmp    __divulong
0525           1881   ;------------------------------------------------------------
0525           1882   ;Allocation info for local variables in function 'Timer5_ISR'
0525           1883   ;------------------------------------------------------------
0525           1884   ;------------------------------------------------------------
0525           1885   ;        main.c:792: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0525           1886   ;        -----------------------------------------
0525           1887   ;         function Timer5_ISR
0525           1888   ;        -----------------------------------------
0525           1889   _Timer5_ISR:
0525 C040      1890            push    bits
0527 C0E0      1891            push    acc
0529 C0F0      1892            push    b
052B C082      1893            push    dpl
052D C083      1894            push    dph
052F C002      1895            push    (0+2)
0531 C003      1896            push    (0+3)
0533 C004      1897            push    (0+4)
0535 C005      1898            push    (0+5)
0537 C006      1899            push    (0+6)
0539 C007      1900            push    (0+7)
053B C000      1901            push    (0+0)
053D C001      1902            push    (0+1)
053F C0D0      1903            push    psw
0541 75D000    1904            mov     psw,#0x00
0544           1905   ;        main.c:794: SFRPAGE=0x10;
0544 75A710    1906            mov     _SFRPAGE,#0x10
0547           1907   ;        main.c:795: TF5H = 0; // Clear Timer5 interrupt flag
0547 C2C7      1908            clr     _TF5H
0549           1909   ;        main.c:796: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0549 75D2C4    1910            mov     _TMR5RL,#0xC4
054C 75D3FF    1911            mov     (_TMR5RL >> 8),#0xFF
054F           1912   ;        main.c:798: fre_mea_count++;
054F 904AB0    1913            mov     dptr,#_fre_mea_count
0552 E0        1914            movx    a,@dptr
0553 2401      1915            add     a,#0x01
0555 F0        1916            movx    @dptr,a
0556 A3        1917            inc     dptr
0557 E0        1918            movx    a,@dptr
0558 3400      1919            addc    a,#0x00
055A F0        1920            movx    @dptr,a
055B           1921   ;        main.c:799: if(fre_mea_count == 1000){
055B 904AB0    1922            mov     dptr,#_fre_mea_count
055E E0        1923            movx    a,@dptr
055F FA        1924            mov     r2,a
0560 A3        1925            inc     dptr
0561 E0        1926            movx    a,@dptr
0562 FB        1927            mov     r3,a
0563 BAE880    1928            cjne    r2,#0xE8,L021004?
0566 BB0380    1929            cjne    r3,#0x03,L021004?
0569           1930   ;        main.c:800: fre_mea_count = 0;
0569 904AB0    1931            mov     dptr,#_fre_mea_count
056C E4        1932            clr     a
056D F0        1933            movx    @dptr,a
056E A3        1934            inc     dptr
056F F0        1935            movx    @dptr,a
0570           1936   ;        main.c:801: if(mea_yes) freq100 = get_freq();
0570 9048A0    1937            mov     dptr,#_mea_yes
0573 E0        1938            movx    a,@dptr
0574 FA        1939            mov     r2,a
0575 6000      1940            jz      L021004?
0577 120000    1941            lcall   _get_freq
057A AA82      1942            mov     r2,dpl
057C AB83      1943            mov     r3,dph
057E 905170    1944            mov     dptr,#_freq100
0581 EA        1945            mov     a,r2
0582 F0        1946            movx    @dptr,a
0583 A3        1947            inc     dptr
0584 EB        1948            mov     a,r3
0585 F0        1949            movx    @dptr,a
0586 EB        1950            mov     a,r3
0587 33        1951            rlc     a
0588 95E0      1952            subb    a,acc
058A A3        1953            inc     dptr
058B F0        1954            movx    @dptr,a
058C A3        1955            inc     dptr
058D F0        1956            movx    @dptr,a
058E           1957   L021004?:
058E           1958   ;        main.c:810: pwm_counter++; 
058E 904DB0    1959            mov     dptr,#_pwm_counter
0591 E0        1960            movx    a,@dptr
0592 2401      1961            add     a,#0x01
0594 F0        1962            movx    @dptr,a
0595 A3        1963            inc     dptr
0596 E0        1964            movx    a,@dptr
0597 3400      1965            addc    a,#0x00
0599 F0        1966            movx    @dptr,a
059A           1967   ;        main.c:811: if (pwm_counter == 100){
059A 904DB0    1968            mov     dptr,#_pwm_counter
059D E0        1969            movx    a,@dptr
059E FA        1970            mov     r2,a
059F A3        1971            inc     dptr
05A0 E0        1972            movx    a,@dptr
05A1 FB        1973            mov     r3,a
05A2 BA6400    1974            cjne    r2,#0x64,L021006?
05A5 BB0000    1975            cjne    r3,#0x00,L021006?
05A8           1976   ;        main.c:812: pwm_counter = 0; 
05A8 904DB0    1977            mov     dptr,#_pwm_counter
05AB E4        1978            clr     a
05AC F0        1979            movx    @dptr,a
05AD A3        1980            inc     dptr
05AE F0        1981            movx    @dptr,a
05AF           1982   L021006?:
05AF           1983   ;        main.c:815: if (pwm_right > pwm_counter){
05AF 904CF0    1984            mov     dptr,#_pwm_right
05B2 E0        1985            movx    a,@dptr
05B3 FA        1986            mov     r2,a
05B4 904DB0    1987            mov     dptr,#_pwm_counter
05B7 E0        1988            movx    a,@dptr
05B8 FB        1989            mov     r3,a
05B9 A3        1990            inc     dptr
05BA E0        1991            movx    a,@dptr
05BB FC        1992            mov     r4,a
05BC 7D00      1993            mov     r5,#0x00
05BE C3        1994            clr     c
05BF EB        1995            mov     a,r3
05C0 9A        1996            subb    a,r2
05C1 EC        1997            mov     a,r4
05C2 9D        1998            subb    a,r5
05C3 5000      1999            jnc     L021011?
05C5           2000   ;        main.c:816: if(L_motor_dir){
05C5 904CB0    2001            mov     dptr,#_L_motor_dir
05C8 E0        2002            movx    a,@dptr
05C9 FA        2003            mov     r2,a
05CA 6000      2004            jz      L021008?
05CC           2005   ;        main.c:817: L_bridge_1 = 1; 
05CC D2A1      2006            setb    _P2_1
05CE           2007   ;        main.c:818: L_bridge_2 = 0; 
05CE C2A2      2008            clr     _P2_2
05D0 8000      2009            sjmp    L021012?
05D2           2010   L021008?:
05D2           2011   ;        main.c:821: L_bridge_1 = 0; 
05D2 C2A1      2012            clr     _P2_1
05D4           2013   ;        main.c:822: L_bridge_2 = 1; 
05D4 D2A2      2014            setb    _P2_2
05D6 8000      2015            sjmp    L021012?
05D8           2016   L021011?:
05D8           2017   ;        main.c:826: L_bridge_1 = 0; 
05D8 C2A1      2018            clr     _P2_1
05DA           2019   ;        main.c:827: L_bridge_2 = 0; 
05DA C2A2      2020            clr     _P2_2
05DC           2021   L021012?:
05DC           2022   ;        main.c:829: if (pwm_left > pwm_counter){
05DC 904D30    2023            mov     dptr,#_pwm_left
05DF E0        2024            movx    a,@dptr
05E0 FA        2025            mov     r2,a
05E1 7D00      2026            mov     r5,#0x00
05E3 C3        2027            clr     c
05E4 EB        2028            mov     a,r3
05E5 9A        2029            subb    a,r2
05E6 EC        2030            mov     a,r4
05E7 9D        2031            subb    a,r5
05E8 5000      2032            jnc     L021017?
05EA           2033   ;        main.c:830: if (R_motor_dir){
05EA 904C70    2034            mov     dptr,#_R_motor_dir
05ED E0        2035            movx    a,@dptr
05EE FA        2036            mov     r2,a
05EF 6000      2037            jz      L021014?
05F1           2038   ;        main.c:831: R_bridge_1 = 1; 
05F1 D2A4      2039            setb    _P2_4
05F3           2040   ;        main.c:832: R_bridge_2 = 0;
05F3 C2A3      2041            clr     _P2_3
05F5 8000      2042            sjmp    L021018?
05F7           2043   L021014?:
05F7           2044   ;        main.c:835: R_bridge_1 = 0; 
05F7 C2A4      2045            clr     _P2_4
05F9           2046   ;        main.c:836: R_bridge_2 = 1;
05F9 D2A3      2047            setb    _P2_3
05FB 8000      2048            sjmp    L021018?
05FD           2049   L021017?:
05FD           2050   ;        main.c:840: R_bridge_1 = 0; 
05FD C2A4      2051            clr     _P2_4
05FF           2052   ;        main.c:841: R_bridge_2 = 0; 
05FF C2A3      2053            clr     _P2_3
0601           2054   L021018?:
0601           2055   ;        main.c:844: servo_counter++;
0601 904D70    2056            mov     dptr,#_servo_counter
0604 E0        2057            movx    a,@dptr
0605 2401      2058            add     a,#0x01
0607 F0        2059            movx    @dptr,a
0608 A3        2060            inc     dptr
0609 E0        2061            movx    a,@dptr
060A 3400      2062            addc    a,#0x00
060C F0        2063            movx    @dptr,a
060D           2064   ;        main.c:845: if(servo_counter==2000)
060D 904D70    2065            mov     dptr,#_servo_counter
0610 E0        2066            movx    a,@dptr
0611 FA        2067            mov     r2,a
0612 A3        2068            inc     dptr
0613 E0        2069            movx    a,@dptr
0614 FB        2070            mov     r3,a
0615 BAD0C0    2071            cjne    r2,#0xD0,L021020?
0618 BB07C0    2072            cjne    r3,#0x07,L021020?
061B           2073   ;        main.c:847: servo_counter=0;
061B 904D70    2074            mov     dptr,#_servo_counter
061E E4        2075            clr     a
061F F0        2076            movx    @dptr,a
0620 A3        2077            inc     dptr
0621 F0        2078            movx    @dptr,a
0622           2079   ;        main.c:848: Servo_arm=1;
0622 D296      2080            setb    _P1_6
0624           2081   ;        main.c:849: Servo_base=1;
0624 D297      2082            setb    _P1_7
0626           2083   L021020?:
0626           2084   ;        main.c:851: if(servo_arm==servo_counter)
0626 904BF0    2085            mov     dptr,#_servo_arm
0629 E0        2086            movx    a,@dptr
062A FA        2087            mov     r2,a
062B 904D70    2088            mov     dptr,#_servo_counter
062E E0        2089            movx    a,@dptr
062F FB        2090            mov     r3,a
0630 A3        2091            inc     dptr
0631 E0        2092            movx    a,@dptr
0632 FC        2093            mov     r4,a
0633 7D00      2094            mov     r5,#0x00
0635 EA        2095            mov     a,r2
0636 B50300    2096            cjne    a,ar3,L021022?
0639 ED        2097            mov     a,r5
063A B50400    2098            cjne    a,ar4,L021022?
063D           2099   ;        main.c:853: Servo_arm=0;
063D C296      2100            clr     _P1_6
063F           2101   L021022?:
063F           2102   ;        main.c:855: if(servo_base==servo_counter)
063F 904C30    2103            mov     dptr,#_servo_base
0642 E0        2104            movx    a,@dptr
0643 FA        2105            mov     r2,a
0644 7D00      2106            mov     r5,#0x00
0646 B50340    2107            cjne    a,ar3,L021025?
0649 ED        2108            mov     a,r5
064A B50440    2109            cjne    a,ar4,L021025?
064D           2110   ;        main.c:857: Servo_base=0;
064D C297      2111            clr     _P1_7
064F           2112   L021025?:
064F D0D0      2113            pop     psw
0651 D001      2114            pop     (0+1)
0653 D000      2115            pop     (0+0)
0655 D007      2116            pop     (0+7)
0657 D006      2117            pop     (0+6)
0659 D005      2118            pop     (0+5)
065B D004      2119            pop     (0+4)
065D D003      2120            pop     (0+3)
065F D002      2121            pop     (0+2)
0661 D083      2122            pop     dph
0663 D082      2123            pop     dpl
0665 D0F0      2124            pop     b
0667 D0E0      2125            pop     acc
0669 D040      2126            pop     bits
066B 32        2127            reti
066C           2128   ;------------------------------------------------------------
066C           2129   ;Allocation info for local variables in function 'servo_pick'
066C           2130   ;------------------------------------------------------------
066C           2131   ;------------------------------------------------------------
066C           2132   ;        main.c:861: void servo_pick(){
066C           2133   ;        -----------------------------------------
066C           2134   ;         function servo_pick
066C           2135   ;        -----------------------------------------
066C           2136   _servo_pick:
066C           2137   ;        main.c:863: servo_arm = 1;
066C 904BF0    2138            mov     dptr,#_servo_arm
066F 7401      2139            mov     a,#0x01
0671 F0        2140            movx    @dptr,a
0672           2141   ;        main.c:865: servo_base = 250;
0672 904C30    2142            mov     dptr,#_servo_base
0675 74FA      2143            mov     a,#0xFA
0677 F0        2144            movx    @dptr,a
0678           2145   ;        main.c:866: waitms(400);
0678 900190    2146            mov     dptr,#0x0190
067B 120000    2147            lcall   _waitms
067E           2148   ;        main.c:867: servo_arm = 250;
067E 904BF0    2149            mov     dptr,#_servo_arm
0681 74FA      2150            mov     a,#0xFA
0683 F0        2151            movx    @dptr,a
0684           2152   ;        main.c:868: printf("Magnet on\r\n");
0684 7480      2153            mov     a,#__str_3
0686 C0E0      2154            push    acc
0688 74DF      2155            mov     a,#(__str_3 >> 8)
068A C0E0      2156            push    acc
068C 7480      2157            mov     a,#0x80
068E C0E0      2158            push    acc
0690 120000    2159            lcall   _printf
0693 1581      2160            dec     sp
0695 1581      2161            dec     sp
0697 1581      2162            dec     sp
0699           2163   ;        main.c:869: Magnet = 1;
0699 D295      2164            setb    _P1_5
069B           2165   ;        main.c:870: waitms(400);
069B 900190    2166            mov     dptr,#0x0190
069E 120000    2167            lcall   _waitms
06A1           2168   ;        main.c:871: printf("Magnet delay done\r\n");
06A1 74C0      2169            mov     a,#__str_4
06A3 C0E0      2170            push    acc
06A5 74DF      2171            mov     a,#(__str_4 >> 8)
06A7 C0E0      2172            push    acc
06A9 7480      2173            mov     a,#0x80
06AB C0E0      2174            push    acc
06AD 120000    2175            lcall   _printf
06B0 1581      2176            dec     sp
06B2 1581      2177            dec     sp
06B4 1581      2178            dec     sp
06B6           2179   ;        main.c:872: servo_base = 150;
06B6 904C30    2180            mov     dptr,#_servo_base
06B9 7496      2181            mov     a,#0x96
06BB F0        2182            movx    @dptr,a
06BC           2183   ;        main.c:873: waitms(400);
06BC 900190    2184            mov     dptr,#0x0190
06BF           2185   ;        main.c:889: return;
06BF 020000    2186            ljmp    _waitms
06C2           2187   ;------------------------------------------------------------
06C2           2188   ;Allocation info for local variables in function 'check_bound'
06C2           2189   ;------------------------------------------------------------
06C2           2190   ;d2                        Allocated with name '_check_bound_PARM_2'
06C2           2191   ;d1                        Allocated to registers r2 r3 
06C2           2192   ;------------------------------------------------------------
06C2           2193   ;        main.c:892: int check_bound(int d1, int d2){
06C2           2194   ;        -----------------------------------------
06C2           2195   ;         function check_bound
06C2           2196   ;        -----------------------------------------
06C2           2197   _check_bound:
06C2 AA82      2198            mov     r2,dpl
06C4 AB83      2199            mov     r3,dph
06C6           2200   ;        main.c:893: if(d1>12000||d2>12000)      return 1;
06C6 C3        2201            clr     c
06C7 74E0      2202            mov     a,#0xE0
06C9 9A        2203            subb    a,r2
06CA 74AE      2204            mov     a,#(0x2E ^ 0x80)
06CC 8BF0      2205            mov     b,r3
06CE 63F080    2206            xrl     b,#0x80
06D1 95F0      2207            subb    a,b
06D3 4000      2208            jc      L023001?
06D5 74E0      2209            mov     a,#0xE0
06D7 9590      2210            subb    a,_check_bound_PARM_2
06D9 74AE      2211            mov     a,#(0x2E ^ 0x80)
06DB 8591F0    2212            mov     b,(_check_bound_PARM_2 + 1)
06DE 63F080    2213            xrl     b,#0x80
06E1 95F0      2214            subb    a,b
06E3 5000      2215            jnc     L023002?
06E5           2216   L023001?:
06E5 900001    2217            mov     dptr,#0x0001
06E8           2218   ;        main.c:894: else return 0;
06E8 22        2219            ret
06E9           2220   L023002?:
06E9 900000    2221            mov     dptr,#0x0000
06EC 22        2222            ret
06ED           2223   ;------------------------------------------------------------
06ED           2224   ;Allocation info for local variables in function 'Init_all'
06ED           2225   ;------------------------------------------------------------
06ED           2226   ;------------------------------------------------------------
06ED           2227   ;        main.c:897: void Init_all(){
06ED           2228   ;        -----------------------------------------
06ED           2229   ;         function Init_all
06ED           2230   ;        -----------------------------------------
06ED           2231   _Init_all:
06ED           2232   ;        main.c:899: Set_Pin_Output(0x24);
06ED 758224    2233            mov     dpl,#0x24
06F0 120000    2234            lcall   _Set_Pin_Output
06F3           2235   ;        main.c:900: Set_Pin_Output(0x23);
06F3 758223    2236            mov     dpl,#0x23
06F6 120000    2237            lcall   _Set_Pin_Output
06F9           2238   ;        main.c:901: Set_Pin_Output(0x22);
06F9 758222    2239            mov     dpl,#0x22
06FC 120000    2240            lcall   _Set_Pin_Output
06FF           2241   ;        main.c:902: Set_Pin_Output(0x21);
06FF 758221    2242            mov     dpl,#0x21
0702 120000    2243            lcall   _Set_Pin_Output
0705           2244   ;        main.c:903: Set_Pin_Output(0x17);
0705 758217    2245            mov     dpl,#0x17
0708 120000    2246            lcall   _Set_Pin_Output
070B           2247   ;        main.c:904: Set_Pin_Output(0x16);
070B 758216    2248            mov     dpl,#0x16
070E 120000    2249            lcall   _Set_Pin_Output
0711           2250   ;        main.c:905: Set_Pin_Output(0x15);
0711 758215    2251            mov     dpl,#0x15
0714 120000    2252            lcall   _Set_Pin_Output
0717           2253   ;        main.c:906: Set_Pin_Output(0x10); // CS
0717 758210    2254            mov     dpl,#0x10
071A 120000    2255            lcall   _Set_Pin_Output
071D           2256   ;        main.c:908: Set_Pin_Input(0x30);
071D 758230    2257            mov     dpl,#0x30
0720 120000    2258            lcall   _Set_Pin_Input
0723           2259   ;        main.c:909: Set_Pin_Output(0x25); // CLK for Load
0723 758225    2260            mov     dpl,#0x25
0726 120000    2261            lcall   _Set_Pin_Output
0729           2262   ;        main.c:910: Set_Pin_Input(0x26);
0729 758226    2263            mov     dpl,#0x26
072C 120000    2264            lcall   _Set_Pin_Input
072F           2265   ;        main.c:913: InitPinADC(1,3);
072F 75E003    2266            mov     _InitPinADC_PARM_2,#0x03
0732 758201    2267            mov     dpl,#0x01
0735 120000    2268            lcall   _InitPinADC
0738           2269   ;        main.c:914: InitPinADC(1,4);
0738 75E004    2270            mov     _InitPinADC_PARM_2,#0x04
073B 758201    2271            mov     dpl,#0x01
073E 120000    2272            lcall   _InitPinADC
0741           2273   ;        main.c:915: InitADC();
0741 120000    2274            lcall   _InitADC
0744           2275   ;        main.c:917: TMOD&=0b_1111_0000; 
0744 5389F0    2276            anl     _TMOD,#0xF0
0747           2277   ;        main.c:918: TMOD|=0b_0000_0001; 
0747 438901    2278            orl     _TMOD,#0x01
074A           2279   ;        main.c:919: TR0=0; 
074A C28C      2280            clr     _TR0
074C           2281   ;        main.c:921: Servo_arm=0;
074C C296      2282            clr     _P1_6
074E           2283   ;        main.c:922: Servo_base=0;
074E C297      2284            clr     _P1_7
0750           2285   ;        main.c:923: Magnet = 0;
0750 C295      2286            clr     _P1_5
0752           2287   ;        main.c:924: PD_SCK = 0;
0752 C2A5      2288            clr     _P2_5
0754           2289   ;        main.c:925: return;
0754 22        2290            ret
0755           2291   ;------------------------------------------------------------
0755           2292   ;Allocation info for local variables in function 'Move_back_ms'
0755           2293   ;------------------------------------------------------------
0755           2294   ;ms                        Allocated to registers r2 r3 
0755           2295   ;------------------------------------------------------------
0755           2296   ;        main.c:928: void Move_back_ms(int ms){
0755           2297   ;        -----------------------------------------
0755           2298   ;         function Move_back_ms
0755           2299   ;        -----------------------------------------
0755           2300   _Move_back_ms:
0755 AA82      2301            mov     r2,dpl
0757 AB83      2302            mov     r3,dph
0759           2303   ;        main.c:930: L_motor_dir = 1;
0759 904CB0    2304            mov     dptr,#_L_motor_dir
075C 7401      2305            mov     a,#0x01
075E F0        2306            movx    @dptr,a
075F           2307   ;        main.c:931: R_motor_dir = 1;
075F 904C70    2308            mov     dptr,#_R_motor_dir
0762 7401      2309            mov     a,#0x01
0764 F0        2310            movx    @dptr,a
0765           2311   ;        main.c:933: pwm_left = 50;
0765 904D30    2312            mov     dptr,#_pwm_left
0768 7432      2313            mov     a,#0x32
076A F0        2314            movx    @dptr,a
076B           2315   ;        main.c:934: pwm_right = 50;
076B 904CF0    2316            mov     dptr,#_pwm_right
076E 7432      2317            mov     a,#0x32
0770 F0        2318            movx    @dptr,a
0771           2319   ;        main.c:936: waitms(ms);
0771 8A82      2320            mov     dpl,r2
0773 8B83      2321            mov     dph,r3
0775 120000    2322            lcall   _waitms
0778           2323   ;        main.c:938: L_motor_dir = 0;
0778 904CB0    2324            mov     dptr,#_L_motor_dir
077B           2325   ;        main.c:939: R_motor_dir = 0;
077B           2326   ;        main.c:940: pwm_left = 0;
077B           2327   ;        main.c:941: pwm_right = 0;
077B E4        2328            clr     a
077C F0        2329            movx    @dptr,a
077D 904C70    2330            mov     dptr,#_R_motor_dir
0780 F0        2331            movx    @dptr,a
0781 904D30    2332            mov     dptr,#_pwm_left
0784 F0        2333            movx    @dptr,a
0785 904CF0    2334            mov     dptr,#_pwm_right
0788 F0        2335            movx    @dptr,a
0789           2336   ;        main.c:942: return;
0789 22        2337            ret
078A           2338   ;------------------------------------------------------------
078A           2339   ;Allocation info for local variables in function 'Right_angle'
078A           2340   ;------------------------------------------------------------
078A           2341   ;angle                     Allocated to registers r2 r3 
078A           2342   ;------------------------------------------------------------
078A           2343   ;        main.c:945: void Right_angle(int angle){
078A           2344   ;        -----------------------------------------
078A           2345   ;         function Right_angle
078A           2346   ;        -----------------------------------------
078A           2347   _Right_angle:
078A AA82      2348            mov     r2,dpl
078C AB83      2349            mov     r3,dph
078E           2350   ;        main.c:947: L_motor_dir = 1;
078E 904CB0    2351            mov     dptr,#_L_motor_dir
0791 7401      2352            mov     a,#0x01
0793 F0        2353            movx    @dptr,a
0794           2354   ;        main.c:948: R_motor_dir = 0;
0794 904C70    2355            mov     dptr,#_R_motor_dir
0797 E4        2356            clr     a
0798 F0        2357            movx    @dptr,a
0799           2358   ;        main.c:949: pwm_left = 80;
0799 904D30    2359            mov     dptr,#_pwm_left
079C 7450      2360            mov     a,#0x50
079E F0        2361            movx    @dptr,a
079F           2362   ;        main.c:950: pwm_right = 80 * pwm_corr;
079F C002      2363            push    ar2
07A1 C003      2364            push    ar3
07A3 9049E0    2365            mov     dptr,#_pwm_corr
07A6 E0        2366            movx    a,@dptr
07A7 C0E0      2367            push    acc
07A9 A3        2368            inc     dptr
07AA E0        2369            movx    a,@dptr
07AB C0E0      2370            push    acc
07AD A3        2371            inc     dptr
07AE E0        2372            movx    a,@dptr
07AF C0E0      2373            push    acc
07B1 A3        2374            inc     dptr
07B2 E0        2375            movx    a,@dptr
07B3 C0E0      2376            push    acc
07B5 900000    2377            mov     dptr,#0x0000
07B8 75F0A0    2378            mov     b,#0xA0
07BB 7442      2379            mov     a,#0x42
07BD 120000    2380            lcall   ___fsmul
07C0 AC82      2381            mov     r4,dpl
07C2 AD83      2382            mov     r5,dph
07C4 AEF0      2383            mov     r6,b
07C6 FF        2384            mov     r7,a
07C7 E581      2385            mov     a,sp
07C9 24FC      2386            add     a,#0xfc
07CB F581      2387            mov     sp,a
07CD 8C82      2388            mov     dpl,r4
07CF 8D83      2389            mov     dph,r5
07D1 8EF0      2390            mov     b,r6
07D3 EF        2391            mov     a,r7
07D4 120000    2392            lcall   ___fs2uchar
07D7 E582      2393            mov     a,dpl
07D9 D003      2394            pop     ar3
07DB D002      2395            pop     ar2
07DD 904CF0    2396            mov     dptr,#_pwm_right
07E0 F0        2397            movx    @dptr,a
07E1           2398   ;        main.c:952: waitms(angle);
07E1 8A82      2399            mov     dpl,r2
07E3 8B83      2400            mov     dph,r3
07E5 120000    2401            lcall   _waitms
07E8           2402   ;        main.c:954: L_motor_dir = 0;
07E8 904CB0    2403            mov     dptr,#_L_motor_dir
07EB           2404   ;        main.c:955: R_motor_dir = 0;
07EB           2405   ;        main.c:956: pwm_left = 0;
07EB           2406   ;        main.c:957: pwm_right = 0;
07EB E4        2407            clr     a
07EC F0        2408            movx    @dptr,a
07ED 904C70    2409            mov     dptr,#_R_motor_dir
07F0 F0        2410            movx    @dptr,a
07F1 904D30    2411            mov     dptr,#_pwm_left
07F4 F0        2412            movx    @dptr,a
07F5 904CF0    2413            mov     dptr,#_pwm_right
07F8 F0        2414            movx    @dptr,a
07F9           2415   ;        main.c:958: return;
07F9 22        2416            ret
07FA           2417   ;------------------------------------------------------------
07FA           2418   ;Allocation info for local variables in function 'Move_forward'
07FA           2419   ;------------------------------------------------------------
07FA           2420   ;------------------------------------------------------------
07FA           2421   ;        main.c:961: void Move_forward(){
07FA           2422   ;        -----------------------------------------
07FA           2423   ;         function Move_forward
07FA           2424   ;        -----------------------------------------
07FA           2425   _Move_forward:
07FA           2426   ;        main.c:963: L_motor_dir = 0;
07FA 904CB0    2427            mov     dptr,#_L_motor_dir
07FD           2428   ;        main.c:964: R_motor_dir = 0;
07FD E4        2429            clr     a
07FE F0        2430            movx    @dptr,a
07FF 904C70    2431            mov     dptr,#_R_motor_dir
0802 F0        2432            movx    @dptr,a
0803           2433   ;        main.c:965: pwm_left = 60;
0803 904D30    2434            mov     dptr,#_pwm_left
0806 743C      2435            mov     a,#0x3C
0808 F0        2436            movx    @dptr,a
0809           2437   ;        main.c:966: pwm_right = 60 * pwm_corr;
0809 9049E0    2438            mov     dptr,#_pwm_corr
080C E0        2439            movx    a,@dptr
080D C0E0      2440            push    acc
080F A3        2441            inc     dptr
0810 E0        2442            movx    a,@dptr
0811 C0E0      2443            push    acc
0813 A3        2444            inc     dptr
0814 E0        2445            movx    a,@dptr
0815 C0E0      2446            push    acc
0817 A3        2447            inc     dptr
0818 E0        2448            movx    a,@dptr
0819 C0E0      2449            push    acc
081B 900000    2450            mov     dptr,#0x0000
081E 75F070    2451            mov     b,#0x70
0821 7442      2452            mov     a,#0x42
0823 120000    2453            lcall   ___fsmul
0826 AA82      2454            mov     r2,dpl
0828 AB83      2455            mov     r3,dph
082A ACF0      2456            mov     r4,b
082C FD        2457            mov     r5,a
082D E581      2458            mov     a,sp
082F 24FC      2459            add     a,#0xfc
0831 F581      2460            mov     sp,a
0833 8A82      2461            mov     dpl,r2
0835 8B83      2462            mov     dph,r3
0837 8CF0      2463            mov     b,r4
0839 ED        2464            mov     a,r5
083A 120000    2465            lcall   ___fs2uchar
083D E582      2466            mov     a,dpl
083F 904CF0    2467            mov     dptr,#_pwm_right
0842 F0        2468            movx    @dptr,a
0843           2469   ;        main.c:967: return;
0843 22        2470            ret
0844           2471   ;------------------------------------------------------------
0844           2472   ;Allocation info for local variables in function 'simple_rand'
0844           2473   ;------------------------------------------------------------
0844           2474   ;------------------------------------------------------------
0844           2475   ;        main.c:970: unsigned int simple_rand() {
0844           2476   ;        -----------------------------------------
0844           2477   ;         function simple_rand
0844           2478   ;        -----------------------------------------
0844           2479   _simple_rand:
0844           2480   ;        main.c:971: seed = (seed * 25173 + 13849) & 0xFFFF;  
0844 904A20    2481            mov     dptr,#_seed
0847 E0        2482            movx    a,@dptr
0848 F500      2483            mov     __mulint_PARM_2,a
084A A3        2484            inc     dptr
084B E0        2485            movx    a,@dptr
084C F501      2486            mov     (__mulint_PARM_2 + 1),a
084E 906255    2487            mov     dptr,#0x6255
0851 120000    2488            lcall   __mulint
0854 E582      2489            mov     a,dpl
0856 8583F0    2490            mov     b,dph
0859 904A20    2491            mov     dptr,#_seed
085C 2419      2492            add     a,#0x19
085E F0        2493            movx    @dptr,a
085F 7436      2494            mov     a,#0x36
0861 35F0      2495            addc    a,b
0863 A3        2496            inc     dptr
0864 F0        2497            movx    @dptr,a
0865           2498   ;        main.c:972: return seed;     
0865 904A20    2499            mov     dptr,#_seed
0868 E0        2500            movx    a,@dptr
0869 FA        2501            mov     r2,a
086A A3        2502            inc     dptr
086B E0        2503            movx    a,@dptr
086C 8A82      2504            mov     dpl,r2
086E F583      2505            mov     dph,a
0870 22        2506            ret
0871           2507   ;------------------------------------------------------------
0871           2508   ;Allocation info for local variables in function 'get_random_90_250'
0871           2509   ;------------------------------------------------------------
0871           2510   ;------------------------------------------------------------
0871           2511   ;        main.c:975: unsigned int get_random_90_250() {
0871           2512   ;        -----------------------------------------
0871           2513   ;         function get_random_90_250
0871           2514   ;        -----------------------------------------
0871           2515   _get_random_90_250:
0871           2516   ;        main.c:976: return (simple_rand() % (250 - 85 + 1)) + 85;
0871 120000    2517            lcall   _simple_rand
0874 7500A6    2518            mov     __moduint_PARM_2,#0xA6
0877 E4        2519            clr     a
0878 F501      2520            mov     (__moduint_PARM_2 + 1),a
087A 120000    2521            lcall   __moduint
087D E582      2522            mov     a,dpl
087F 8583F0    2523            mov     b,dph
0882 2455      2524            add     a,#0x55
0884 F582      2525            mov     dpl,a
0886 E4        2526            clr     a
0887 35F0      2527            addc    a,b
0889 F583      2528            mov     dph,a
088B 22        2529            ret
088C           2530   ;------------------------------------------------------------
088C           2531   ;Allocation info for local variables in function 'Auto_mode_slave'
088C           2532   ;------------------------------------------------------------
088C           2533   ;sloc0                     Allocated with name '_Auto_mode_slave_sloc0_1_0'
088C           2534   ;count                     Allocated with name '_Auto_mode_slave_count_1_162'
088C           2535   ;command                   Allocated with name '_Auto_mode_slave_command_1_162'
088C           2536   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_162'
088C           2537   ;bound                     Allocated with name '_Auto_mode_slave_bound_1_162'
088C           2538   ;c                         Allocated with name '_Auto_mode_slave_c_1_162'
088C           2539   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_162'
088C           2540   ;angle                     Allocated with name '_Auto_mode_slave_angle_1_162'
088C           2541   ;------------------------------------------------------------
088C           2542   ;        main.c:1001: void Auto_mode_slave(){
088C           2543   ;        -----------------------------------------
088C           2544   ;         function Auto_mode_slave
088C           2545   ;        -----------------------------------------
088C           2546   _Auto_mode_slave:
088C           2547   ;        main.c:1004: xdata int state_res = 1;
088C 90C620    2548            mov     dptr,#_Auto_mode_slave_state_res_1_162
088F 7401      2549            mov     a,#0x01
0891 F0        2550            movx    @dptr,a
0892 E4        2551            clr     a
0893 A3        2552            inc     dptr
0894 F0        2553            movx    @dptr,a
0895           2554   ;        main.c:1012: while(count < 20 && state_res){
0895 E4        2555            clr     a
0896 F550      2556            mov     _Auto_mode_slave_sloc0_1_0,a
0898 F551      2557            mov     (_Auto_mode_slave_sloc0_1_0 + 1),a
089A           2558   L030018?:
089A C3        2559            clr     c
089B E550      2560            mov     a,_Auto_mode_slave_sloc0_1_0
089D 9414      2561            subb    a,#0x14
089F E551      2562            mov     a,(_Auto_mode_slave_sloc0_1_0 + 1)
08A1 6480      2563            xrl     a,#0x80
08A3 9480      2564            subb    a,#0x80
08A5 4000      2565            jc      L030034?
08A7 22        2566            ret
08A8           2567   L030034?:
08A8 90C620    2568            mov     dptr,#_Auto_mode_slave_state_res_1_162
08AB E0        2569            movx    a,@dptr
08AC FC        2570            mov     r4,a
08AD A3        2571            inc     dptr
08AE E0        2572            movx    a,@dptr
08AF FD        2573            mov     r5,a
08B0 4C        2574            orl     a,r4
08B1 7000      2575            jnz     L030035?
08B3 22        2576            ret
08B4           2577   L030035?:
08B4           2578   ;        main.c:1014: if(RXU1()){
08B4 C004      2579            push    ar4
08B6 C005      2580            push    ar5
08B8 120000    2581            lcall   _RXU1
08BB D005      2582            pop     ar5
08BD D004      2583            pop     ar4
08BF 4000      2584            jc      L030036?
08C1 020000    2585            ljmp    L030012?
08C4           2586   L030036?:
08C4           2587   ;        main.c:1015: c=getchar1();      
08C4 C004      2588            push    ar4
08C6 C005      2589            push    ar5
08C8 120000    2590            lcall   _getchar1
08CB AE82      2591            mov     r6,dpl
08CD D005      2592            pop     ar5
08CF D004      2593            pop     ar4
08D1           2594   ;        main.c:1016: if(c=='!'){
08D1 BE2150    2595            cjne    r6,#0x21,L030037?
08D4 8000      2596            sjmp    L030038?
08D6           2597   L030037?:
08D6 020000    2598            ljmp    L030009?
08D9           2599   L030038?:
08D9           2600   ;        main.c:1017: getstr1(buff, sizeof(buff)-1);
08D9 754013    2601            mov     _getstr1_PARM_2,#0x13
08DC 9051B0    2602            mov     dptr,#_buff
08DF 75F040    2603            mov     b,#0x40
08E2 120000    2604            lcall   _getstr1
08E5           2605   ;        main.c:1018: if(strlen(buff)==11){
08E5 9051B0    2606            mov     dptr,#_buff
08E8 75F040    2607            mov     b,#0x40
08EB 120000    2608            lcall   _strlen
08EE AF82      2609            mov     r7,dpl
08F0 AA83      2610            mov     r2,dph
08F2 BF0B50    2611            cjne    r7,#0x0B,L030039?
08F5 BA0050    2612            cjne    r2,#0x00,L030039?
08F8 8000      2613            sjmp    L030040?
08FA           2614   L030039?:
08FA 020000    2615            ljmp    L030012?
08FD           2616   L030040?:
08FD           2617   ;        main.c:1019: printf("master_messgae_auto_mode: %s\r\n", buff);
08FD 74B0      2618            mov     a,#_buff
08FF C0E0      2619            push    acc
0901 7451      2620            mov     a,#(_buff >> 8)
0903 C0E0      2621            push    acc
0905 7440      2622            mov     a,#0x40
0907 C0E0      2623            push    acc
0909 74D0      2624            mov     a,#__str_5
090B C0E0      2625            push    acc
090D 74E4      2626            mov     a,#(__str_5 >> 8)
090F C0E0      2627            push    acc
0911 7480      2628            mov     a,#0x80
0913 C0E0      2629            push    acc
0915 120000    2630            lcall   _printf
0918 E581      2631            mov     a,sp
091A 24FA      2632            add     a,#0xfa
091C F581      2633            mov     sp,a
091E           2634   ;        main.c:1020: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
091E 74C0      2635            mov     a,#_Auto_mode_slave_command_1_162
0920 C0E0      2636            push    acc
0922 74C5      2637            mov     a,#(_Auto_mode_slave_command_1_162 >> 8)
0924 C0E0      2638            push    acc
0926 E4        2639            clr     a
0927 C0E0      2640            push    acc
0929 7470      2641            mov     a,#_Auto_mode_slave_dummy_1_162
092B C0E0      2642            push    acc
092D 74C6      2643            mov     a,#(_Auto_mode_slave_dummy_1_162 >> 8)
092F C0E0      2644            push    acc
0931 E4        2645            clr     a
0932 C0E0      2646            push    acc
0934 7470      2647            mov     a,#_Auto_mode_slave_dummy_1_162
0936 C0E0      2648            push    acc
0938 74C6      2649            mov     a,#(_Auto_mode_slave_dummy_1_162 >> 8)
093A C0E0      2650            push    acc
093C E4        2651            clr     a
093D C0E0      2652            push    acc
093F 7470      2653            mov     a,#_Auto_mode_slave_dummy_1_162
0941 C0E0      2654            push    acc
0943 74C6      2655            mov     a,#(_Auto_mode_slave_dummy_1_162 >> 8)
0945 C0E0      2656            push    acc
0947 E4        2657            clr     a
0948 C0E0      2658            push    acc
094A 7410      2659            mov     a,#__str_6
094C C0E0      2660            push    acc
094E 74E5      2661            mov     a,#(__str_6 >> 8)
0950 C0E0      2662            push    acc
0952 7480      2663            mov     a,#0x80
0954 C0E0      2664            push    acc
0956 74B0      2665            mov     a,#_buff
0958 C0E0      2666            push    acc
095A 7451      2667            mov     a,#(_buff >> 8)
095C C0E0      2668            push    acc
095E 7440      2669            mov     a,#0x40
0960 C0E0      2670            push    acc
0962 120000    2671            lcall   _sscanf
0965 E581      2672            mov     a,sp
0967 24EE      2673            add     a,#0xee
0969 F581      2674            mov     sp,a
096B           2675   ;        main.c:1021: if(command) state_res = 1;
096B 90C5C0    2676            mov     dptr,#_Auto_mode_slave_command_1_162
096E E0        2677            movx    a,@dptr
096F FF        2678            mov     r7,a
0970 A3        2679            inc     dptr
0971 E0        2680            movx    a,@dptr
0972 FA        2681            mov     r2,a
0973 4F        2682            orl     a,r7
0974 6000      2683            jz      L030002?
0976 90C620    2684            mov     dptr,#_Auto_mode_slave_state_res_1_162
0979 7401      2685            mov     a,#0x01
097B F0        2686            movx    @dptr,a
097C E4        2687            clr     a
097D A3        2688            inc     dptr
097E F0        2689            movx    @dptr,a
097F 020000    2690            ljmp    L030012?
0982           2691   L030002?:
0982           2692   ;        main.c:1022: else state_res = 0;
0982 90C620    2693            mov     dptr,#_Auto_mode_slave_state_res_1_162
0985 E4        2694            clr     a
0986 F0        2695            movx    @dptr,a
0987 A3        2696            inc     dptr
0988 F0        2697            movx    @dptr,a
0989 8000      2698            sjmp    L030012?
098B           2699   L030009?:
098B           2700   ;        main.c:1028: else if(c=='@'){
098B BE4010    2701            cjne    r6,#0x40,L030012?
098E           2702   ;        main.c:1029: sprintf(buff, "%01d,%02d,%ld,%05d,%03d\n", state_res, count,freq100, 0, (int)curr_angle);
098E 9049A0    2703            mov     dptr,#_curr_angle
0991 E0        2704            movx    a,@dptr
0992 FA        2705            mov     r2,a
0993 A3        2706            inc     dptr
0994 E0        2707            movx    a,@dptr
0995 FB        2708            mov     r3,a
0996 A3        2709            inc     dptr
0997 E0        2710            movx    a,@dptr
0998 FE        2711            mov     r6,a
0999 A3        2712            inc     dptr
099A E0        2713            movx    a,@dptr
099B 8A82      2714            mov     dpl,r2
099D 8B83      2715            mov     dph,r3
099F 8EF0      2716            mov     b,r6
09A1 C004      2717            push    ar4
09A3 C005      2718            push    ar5
09A5 120000    2719            lcall   ___fs2sint
09A8 AA82      2720            mov     r2,dpl
09AA AB83      2721            mov     r3,dph
09AC D005      2722            pop     ar5
09AE D004      2723            pop     ar4
09B0 C002      2724            push    ar2
09B2 C003      2725            push    ar3
09B4 E4        2726            clr     a
09B5 C0E0      2727            push    acc
09B7 C0E0      2728            push    acc
09B9 905170    2729            mov     dptr,#_freq100
09BC E0        2730            movx    a,@dptr
09BD C0E0      2731            push    acc
09BF A3        2732            inc     dptr
09C0 E0        2733            movx    a,@dptr
09C1 C0E0      2734            push    acc
09C3 A3        2735            inc     dptr
09C4 E0        2736            movx    a,@dptr
09C5 C0E0      2737            push    acc
09C7 A3        2738            inc     dptr
09C8 E0        2739            movx    a,@dptr
09C9 C0E0      2740            push    acc
09CB C050      2741            push    _Auto_mode_slave_sloc0_1_0
09CD C051      2742            push    (_Auto_mode_slave_sloc0_1_0 + 1)
09CF C004      2743            push    ar4
09D1 C005      2744            push    ar5
09D3 7410      2745            mov     a,#__str_7
09D5 C0E0      2746            push    acc
09D7 74E6      2747            mov     a,#(__str_7 >> 8)
09D9 C0E0      2748            push    acc
09DB 7480      2749            mov     a,#0x80
09DD C0E0      2750            push    acc
09DF 74B0      2751            mov     a,#_buff
09E1 C0E0      2752            push    acc
09E3 7451      2753            mov     a,#(_buff >> 8)
09E5 C0E0      2754            push    acc
09E7 7440      2755            mov     a,#0x40
09E9 C0E0      2756            push    acc
09EB 120000    2757            lcall   _sprintf
09EE E581      2758            mov     a,sp
09F0 24EE      2759            add     a,#0xee
09F2 F581      2760            mov     sp,a
09F4           2761   ;        main.c:1030: waitms(5); 
09F4 900005    2762            mov     dptr,#0x0005
09F7 120000    2763            lcall   _waitms
09FA           2764   ;        main.c:1031: sendstr1(buff);
09FA 9051B0    2765            mov     dptr,#_buff
09FD 75F040    2766            mov     b,#0x40
0A00 120000    2767            lcall   _sendstr1
0A03           2768   L030012?:
0A03           2769   ;        main.c:1036: Move_forward();
0A03 120000    2770            lcall   _Move_forward
0A06           2771   ;        main.c:1038: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
0A06 758209    2772            mov     dpl,#0x09
0A09 120000    2773            lcall   _ADC_at_Pin
0A0C E582      2774            mov     a,dpl
0A0E 8583F0    2775            mov     b,dph
0A11 905130    2776            mov     dptr,#_d1
0A14 F0        2777            movx    @dptr,a
0A15 A3        2778            inc     dptr
0A16 E5F0      2779            mov     a,b
0A18 F0        2780            movx    @dptr,a
0A19           2781   ;        main.c:1039: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
0A19 75820A    2782            mov     dpl,#0x0A
0A1C 120000    2783            lcall   _ADC_at_Pin
0A1F AA82      2784            mov     r2,dpl
0A21 AB83      2785            mov     r3,dph
0A23 9050F0    2786            mov     dptr,#_d2
0A26 EA        2787            mov     a,r2
0A27 F0        2788            movx    @dptr,a
0A28 A3        2789            inc     dptr
0A29 EB        2790            mov     a,r3
0A2A F0        2791            movx    @dptr,a
0A2B           2792   ;        main.c:1040: bound = check_bound(d1,d2);
0A2B 905130    2793            mov     dptr,#_d1
0A2E E0        2794            movx    a,@dptr
0A2F FC        2795            mov     r4,a
0A30 A3        2796            inc     dptr
0A31 E0        2797            movx    a,@dptr
0A32 FD        2798            mov     r5,a
0A33 8A90      2799            mov     _check_bound_PARM_2,r2
0A35 8B91      2800            mov     (_check_bound_PARM_2 + 1),r3
0A37 8C82      2801            mov     dpl,r4
0A39 8D83      2802            mov     dph,r5
0A3B 120000    2803            lcall   _check_bound
0A3E AA82      2804            mov     r2,dpl
0A40 AB83      2805            mov     r3,dph
0A42           2806   ;        main.c:1041: printf("f:%04ld, d1:%d, d2:%d, bound_dectect: %d\r\n",freq100, d1,d2,bound);
0A42 C002      2807            push    ar2
0A44 C003      2808            push    ar3
0A46 C002      2809            push    ar2
0A48 C003      2810            push    ar3
0A4A 9050F0    2811            mov     dptr,#_d2
0A4D E0        2812            movx    a,@dptr
0A4E C0E0      2813            push    acc
0A50 A3        2814            inc     dptr
0A51 E0        2815            movx    a,@dptr
0A52 C0E0      2816            push    acc
0A54 905130    2817            mov     dptr,#_d1
0A57 E0        2818            movx    a,@dptr
0A58 C0E0      2819            push    acc
0A5A A3        2820            inc     dptr
0A5B E0        2821            movx    a,@dptr
0A5C C0E0      2822            push    acc
0A5E 905170    2823            mov     dptr,#_freq100
0A61 E0        2824            movx    a,@dptr
0A62 C0E0      2825            push    acc
0A64 A3        2826            inc     dptr
0A65 E0        2827            movx    a,@dptr
0A66 C0E0      2828            push    acc
0A68 A3        2829            inc     dptr
0A69 E0        2830            movx    a,@dptr
0A6A C0E0      2831            push    acc
0A6C A3        2832            inc     dptr
0A6D E0        2833            movx    a,@dptr
0A6E C0E0      2834            push    acc
0A70 7490      2835            mov     a,#__str_8
0A72 C0E0      2836            push    acc
0A74 74E6      2837            mov     a,#(__str_8 >> 8)
0A76 C0E0      2838            push    acc
0A78 7480      2839            mov     a,#0x80
0A7A C0E0      2840            push    acc
0A7C 120000    2841            lcall   _printf
0A7F E581      2842            mov     a,sp
0A81 24F3      2843            add     a,#0xf3
0A83 F581      2844            mov     sp,a
0A85 D003      2845            pop     ar3
0A87 D002      2846            pop     ar2
0A89           2847   ;        main.c:1043: if (freq100>=5340){
0A89 905170    2848            mov     dptr,#_freq100
0A8C E0        2849            movx    a,@dptr
0A8D FC        2850            mov     r4,a
0A8E A3        2851            inc     dptr
0A8F E0        2852            movx    a,@dptr
0A90 FD        2853            mov     r5,a
0A91 A3        2854            inc     dptr
0A92 E0        2855            movx    a,@dptr
0A93 FE        2856            mov     r6,a
0A94 A3        2857            inc     dptr
0A95 E0        2858            movx    a,@dptr
0A96 FF        2859            mov     r7,a
0A97 C3        2860            clr     c
0A98 EC        2861            mov     a,r4
0A99 94DC      2862            subb    a,#0xDC
0A9B ED        2863            mov     a,r5
0A9C 9414      2864            subb    a,#0x14
0A9E EE        2865            mov     a,r6
0A9F 9400      2866            subb    a,#0x00
0AA1 EF        2867            mov     a,r7
0AA2 6480      2868            xrl     a,#0x80
0AA4 9480      2869            subb    a,#0x80
0AA6 4000      2870            jc      L030014?
0AA8           2871   ;        main.c:1044: mea_yes = 0;
0AA8 9048A0    2872            mov     dptr,#_mea_yes
0AAB E4        2873            clr     a
0AAC F0        2874            movx    @dptr,a
0AAD           2875   ;        main.c:1045: Move_back_ms(300);
0AAD 90012C    2876            mov     dptr,#0x012C
0AB0 C002      2877            push    ar2
0AB2 C003      2878            push    ar3
0AB4 120000    2879            lcall   _Move_back_ms
0AB7           2880   ;        main.c:1046: waitms(100);
0AB7 900064    2881            mov     dptr,#0x0064
0ABA 120000    2882            lcall   _waitms
0ABD           2883   ;        main.c:1047: servo_pick();
0ABD 120000    2884            lcall   _servo_pick
0AC0 D003      2885            pop     ar3
0AC2 D002      2886            pop     ar2
0AC4           2887   ;        main.c:1048: count++;
0AC4 0550      2888            inc     _Auto_mode_slave_sloc0_1_0
0AC6 E4        2889            clr     a
0AC7 B55010    2890            cjne    a,_Auto_mode_slave_sloc0_1_0,L030045?
0ACA 0551      2891            inc     (_Auto_mode_slave_sloc0_1_0 + 1)
0ACC           2892   L030045?:
0ACC           2893   ;        main.c:1049: waitms(100);
0ACC 900064    2894            mov     dptr,#0x0064
0ACF C002      2895            push    ar2
0AD1 C003      2896            push    ar3
0AD3 120000    2897            lcall   _waitms
0AD6           2898   ;        main.c:1050: mea_yes = 1;
0AD6 9048A0    2899            mov     dptr,#_mea_yes
0AD9 7401      2900            mov     a,#0x01
0ADB F0        2901            movx    @dptr,a
0ADC           2902   ;        main.c:1051: Move_forward();
0ADC 120000    2903            lcall   _Move_forward
0ADF D003      2904            pop     ar3
0AE1 D002      2905            pop     ar2
0AE3           2906   L030014?:
0AE3           2907   ;        main.c:1054: if(bound == 1){
0AE3 BA0150    2908            cjne    r2,#0x01,L030046?
0AE6 BB0050    2909            cjne    r3,#0x00,L030046?
0AE9 8000      2910            sjmp    L030047?
0AEB           2911   L030046?:
0AEB 020000    2912            ljmp    L030018?
0AEE           2913   L030047?:
0AEE           2914   ;        main.c:1055: Move_back_ms(500);
0AEE 9001F4    2915            mov     dptr,#0x01F4
0AF1 120000    2916            lcall   _Move_back_ms
0AF4           2917   ;        main.c:1056: waitms(100);
0AF4 900064    2918            mov     dptr,#0x0064
0AF7 120000    2919            lcall   _waitms
0AFA           2920   ;        main.c:1057: angle = get_random_90_250();
0AFA 120000    2921            lcall   _get_random_90_250
0AFD 858200    2922            mov     __mulint_PARM_2,dpl
0B00 858301    2923            mov     (__mulint_PARM_2 + 1),dph
0B03           2924   ;        main.c:1058: Right_angle(angle*600/90);
0B03 900258    2925            mov     dptr,#0x0258
0B06 120000    2926            lcall   __mulint
0B09 AA82      2927            mov     r2,dpl
0B0B AB83      2928            mov     r3,dph
0B0D 75005A    2929            mov     __divuint_PARM_2,#0x5A
0B10 E4        2930            clr     a
0B11 F501      2931            mov     (__divuint_PARM_2 + 1),a
0B13 8A82      2932            mov     dpl,r2
0B15 8B83      2933            mov     dph,r3
0B17 120000    2934            lcall   __divuint
0B1A 120000    2935            lcall   _Right_angle
0B1D 020000    2936            ljmp    L030018?
0B20           2937   ;------------------------------------------------------------
0B20           2938   ;Allocation info for local variables in function 'Joystick_Control'
0B20           2939   ;------------------------------------------------------------
0B20           2940   ;vy_ptr                    Allocated with name '_Joystick_Control_PARM_2'
0B20           2941   ;vx_ptr                    Allocated to registers r2 r3 r4 
0B20           2942   ;sloc0                     Allocated with name '_Joystick_Control_sloc0_1_0'
0B20           2943   ;sloc1                     Allocated with name '_Joystick_Control_sloc1_1_0'
0B20           2944   ;sloc2                     Allocated with name '_Joystick_Control_sloc2_1_0'
0B20           2945   ;sloc3                     Allocated with name '_Joystick_Control_sloc3_1_0'
0B20           2946   ;sloc4                     Allocated with name '_Joystick_Control_sloc4_1_0'
0B20           2947   ;sloc5                     Allocated with name '_Joystick_Control_sloc5_1_0'
0B20           2948   ;sloc6                     Allocated with name '_Joystick_Control_sloc6_1_0'
0B20           2949   ;vx                        Allocated with name '_Joystick_Control_vx_1_171'
0B20           2950   ;vy                        Allocated with name '_Joystick_Control_vy_1_171'
0B20           2951   ;vx_error                  Allocated with name '_Joystick_Control_vx_error_1_171'
0B20           2952   ;vy_error                  Allocated with name '_Joystick_Control_vy_error_1_171'
0B20           2953   ;vx_err                    Allocated with name '_Joystick_Control_vx_err_1_171'
0B20           2954   ;vy_err                    Allocated with name '_Joystick_Control_vy_err_1_171'
0B20           2955   ;------------------------------------------------------------
0B20           2956   ;        main.c:1066: float Joystick_Control(int *vx_ptr, int *vy_ptr)
0B20           2957   ;        -----------------------------------------
0B20           2958   ;         function Joystick_Control
0B20           2959   ;        -----------------------------------------
0B20           2960   _Joystick_Control:
0B20           2961   ;        main.c:1070: vx = *vx_ptr; 
0B20 120000    2962            lcall   __gptrget
0B23 F5A0      2963            mov     _Joystick_Control_sloc0_1_0,a
0B25 A3        2964            inc     dptr
0B26 120000    2965            lcall   __gptrget
0B29 F5A1      2966            mov     (_Joystick_Control_sloc0_1_0 + 1),a
0B2B           2967   ;        main.c:1071: vy = *vy_ptr; 
0B2B AC00      2968            mov     r4,_Joystick_Control_PARM_2
0B2D AD01      2969            mov     r5,(_Joystick_Control_PARM_2 + 1)
0B2F AE02      2970            mov     r6,(_Joystick_Control_PARM_2 + 2)
0B31 8C82      2971            mov     dpl,r4
0B33 8D83      2972            mov     dph,r5
0B35 8EF0      2973            mov     b,r6
0B37 120000    2974            lcall   __gptrget
0B3A FC        2975            mov     r4,a
0B3B A3        2976            inc     dptr
0B3C 120000    2977            lcall   __gptrget
0B3F FD        2978            mov     r5,a
0B40           2979   ;        main.c:1077: vx_error = abs(vx-vx_thres)*100/vx_thres; 
0B40 904BB0    2980            mov     dptr,#_vx_thres
0B43 E0        2981            movx    a,@dptr
0B44 FE        2982            mov     r6,a
0B45 A3        2983            inc     dptr
0B46 E0        2984            movx    a,@dptr
0B47 FF        2985            mov     r7,a
0B48 E5A0      2986            mov     a,_Joystick_Control_sloc0_1_0
0B4A C3        2987            clr     c
0B4B 9E        2988            subb    a,r6
0B4C F582      2989            mov     dpl,a
0B4E E5A1      2990            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
0B50 9F        2991            subb    a,r7
0B51 F583      2992            mov     dph,a
0B53 C004      2993            push    ar4
0B55 C005      2994            push    ar5
0B57 120000    2995            lcall   _abs
0B5A 858200    2996            mov     __mulint_PARM_2,dpl
0B5D 858301    2997            mov     (__mulint_PARM_2 + 1),dph
0B60 900064    2998            mov     dptr,#0x0064
0B63 120000    2999            lcall   __mulint
0B66 AE82      3000            mov     r6,dpl
0B68 AF83      3001            mov     r7,dph
0B6A 904BB0    3002            mov     dptr,#_vx_thres
0B6D E0        3003            movx    a,@dptr
0B6E F500      3004            mov     __divsint_PARM_2,a
0B70 A3        3005            inc     dptr
0B71 E0        3006            movx    a,@dptr
0B72 F501      3007            mov     (__divsint_PARM_2 + 1),a
0B74 8E82      3008            mov     dpl,r6
0B76 8F83      3009            mov     dph,r7
0B78 120000    3010            lcall   __divsint
0B7B E582      3011            mov     a,dpl
0B7D 8583F0    3012            mov     b,dph
0B80 D005      3013            pop     ar5
0B82 D004      3014            pop     ar4
0B84 90C6D0    3015            mov     dptr,#_Joystick_Control_vx_error_1_171
0B87 F0        3016            movx    @dptr,a
0B88 A3        3017            inc     dptr
0B89 E5F0      3018            mov     a,b
0B8B F0        3019            movx    @dptr,a
0B8C           3020   ;        main.c:1078: vy_error = abs(vy-vy_thres)*100/vy_thres; 
0B8C 904B70    3021            mov     dptr,#_vy_thres
0B8F E0        3022            movx    a,@dptr
0B90 FE        3023            mov     r6,a
0B91 A3        3024            inc     dptr
0B92 E0        3025            movx    a,@dptr
0B93 FF        3026            mov     r7,a
0B94 EC        3027            mov     a,r4
0B95 C3        3028            clr     c
0B96 9E        3029            subb    a,r6
0B97 F582      3030            mov     dpl,a
0B99 ED        3031            mov     a,r5
0B9A 9F        3032            subb    a,r7
0B9B F583      3033            mov     dph,a
0B9D C004      3034            push    ar4
0B9F C005      3035            push    ar5
0BA1 120000    3036            lcall   _abs
0BA4 858200    3037            mov     __mulint_PARM_2,dpl
0BA7 858301    3038            mov     (__mulint_PARM_2 + 1),dph
0BAA 900064    3039            mov     dptr,#0x0064
0BAD 120000    3040            lcall   __mulint
0BB0 AE82      3041            mov     r6,dpl
0BB2 AF83      3042            mov     r7,dph
0BB4 904B70    3043            mov     dptr,#_vy_thres
0BB7 E0        3044            movx    a,@dptr
0BB8 F540      3045            mov     _Joystick_Control_sloc2_1_0,a
0BBA A3        3046            inc     dptr
0BBB E0        3047            movx    a,@dptr
0BBC F541      3048            mov     (_Joystick_Control_sloc2_1_0 + 1),a
0BBE 854000    3049            mov     __divsint_PARM_2,_Joystick_Control_sloc2_1_0
0BC1 854101    3050            mov     (__divsint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
0BC4           3051   ;        main.c:1079: vx_err = vx-vx_thres; 
0BC4 8E82      3052            mov     dpl,r6
0BC6 8F83      3053            mov     dph,r7
0BC8 120000    3054            lcall   __divsint
0BCB AE82      3055            mov     r6,dpl
0BCD AF83      3056            mov     r7,dph
0BCF D005      3057            pop     ar5
0BD1 D004      3058            pop     ar4
0BD3 904BB0    3059            mov     dptr,#_vx_thres
0BD6 E0        3060            movx    a,@dptr
0BD7 FA        3061            mov     r2,a
0BD8 A3        3062            inc     dptr
0BD9 E0        3063            movx    a,@dptr
0BDA FB        3064            mov     r3,a
0BDB E5A0      3065            mov     a,_Joystick_Control_sloc0_1_0
0BDD C3        3066            clr     c
0BDE 9A        3067            subb    a,r2
0BDF F5E0      3068            mov     _Joystick_Control_sloc4_1_0,a
0BE1 E5A1      3069            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
0BE3 9B        3070            subb    a,r3
0BE4 F5E1      3071            mov     (_Joystick_Control_sloc4_1_0 + 1),a
0BE6           3072   ;        main.c:1080: vy_err = vy-vy_thres; 
0BE6 EC        3073            mov     a,r4
0BE7 C3        3074            clr     c
0BE8 9540      3075            subb    a,_Joystick_Control_sloc2_1_0
0BEA F5A0      3076            mov     _Joystick_Control_sloc0_1_0,a
0BEC ED        3077            mov     a,r5
0BED 9541      3078            subb    a,(_Joystick_Control_sloc2_1_0 + 1)
0BEF F5A1      3079            mov     (_Joystick_Control_sloc0_1_0 + 1),a
0BF1           3080   ;        main.c:1081: pwm_left = 0; 
0BF1 904D30    3081            mov     dptr,#_pwm_left
0BF4           3082   ;        main.c:1082: pwm_right = 0; 
0BF4 E4        3083            clr     a
0BF5 F0        3084            movx    @dptr,a
0BF6 904CF0    3085            mov     dptr,#_pwm_right
0BF9 F0        3086            movx    @dptr,a
0BFA           3087   ;        main.c:1084: if ((vy_error>5) && (vx_error<5)){
0BFA C3        3088            clr     c
0BFB 7405      3089            mov     a,#0x05
0BFD 9E        3090            subb    a,r6
0BFE E4        3091            clr     a
0BFF 6480      3092            xrl     a,#0x80
0C01 8FF0      3093            mov     b,r7
0C03 63F080    3094            xrl     b,#0x80
0C06 95F0      3095            subb    a,b
0C08 E4        3096            clr     a
0C09 33        3097            rlc     a
0C0A F5F0      3098            mov     _Joystick_Control_sloc1_1_0,a
0C0C 7000      3099            jnz     L031056?
0C0E 020000    3100            ljmp    L031005?
0C11           3101   L031056?:
0C11 90C6D0    3102            mov     dptr,#_Joystick_Control_vx_error_1_171
0C14 E0        3103            movx    a,@dptr
0C15 FA        3104            mov     r2,a
0C16 A3        3105            inc     dptr
0C17 E0        3106            movx    a,@dptr
0C18 FB        3107            mov     r3,a
0C19 C3        3108            clr     c
0C1A EA        3109            mov     a,r2
0C1B 9405      3110            subb    a,#0x05
0C1D EB        3111            mov     a,r3
0C1E 6480      3112            xrl     a,#0x80
0C20 9480      3113            subb    a,#0x80
0C22 4000      3114            jc      L031057?
0C24 020000    3115            ljmp    L031005?
0C27           3116   L031057?:
0C27           3117   ;        main.c:1085: pwm_left = vy_error; 
0C27 904D30    3118            mov     dptr,#_pwm_left
0C2A EE        3119            mov     a,r6
0C2B F0        3120            movx    @dptr,a
0C2C           3121   ;        main.c:1086: pwm_right = vy_error * pwm_corr; 
0C2C 8E82      3122            mov     dpl,r6
0C2E 8F83      3123            mov     dph,r7
0C30 C004      3124            push    ar4
0C32 C005      3125            push    ar5
0C34 C006      3126            push    ar6
0C36 C007      3127            push    ar7
0C38 120000    3128            lcall   ___sint2fs
0C3B AA82      3129            mov     r2,dpl
0C3D AB83      3130            mov     r3,dph
0C3F A8F0      3131            mov     r0,b
0C41 F9        3132            mov     r1,a
0C42 9049E0    3133            mov     dptr,#_pwm_corr
0C45 E0        3134            movx    a,@dptr
0C46 C0E0      3135            push    acc
0C48 A3        3136            inc     dptr
0C49 E0        3137            movx    a,@dptr
0C4A C0E0      3138            push    acc
0C4C A3        3139            inc     dptr
0C4D E0        3140            movx    a,@dptr
0C4E C0E0      3141            push    acc
0C50 A3        3142            inc     dptr
0C51 E0        3143            movx    a,@dptr
0C52 C0E0      3144            push    acc
0C54 8A82      3145            mov     dpl,r2
0C56 8B83      3146            mov     dph,r3
0C58 88F0      3147            mov     b,r0
0C5A E9        3148            mov     a,r1
0C5B 120000    3149            lcall   ___fsmul
0C5E AA82      3150            mov     r2,dpl
0C60 AB83      3151            mov     r3,dph
0C62 A8F0      3152            mov     r0,b
0C64 F9        3153            mov     r1,a
0C65 E581      3154            mov     a,sp
0C67 24FC      3155            add     a,#0xfc
0C69 F581      3156            mov     sp,a
0C6B 8A82      3157            mov     dpl,r2
0C6D 8B83      3158            mov     dph,r3
0C6F 88F0      3159            mov     b,r0
0C71 E9        3160            mov     a,r1
0C72 120000    3161            lcall   ___fs2uchar
0C75 858290    3162            mov     _Joystick_Control_sloc3_1_0,dpl
0C78 D007      3163            pop     ar7
0C7A D006      3164            pop     ar6
0C7C D005      3165            pop     ar5
0C7E D004      3166            pop     ar4
0C80 904CF0    3167            mov     dptr,#_pwm_right
0C83 E590      3168            mov     a,_Joystick_Control_sloc3_1_0
0C85 F0        3169            movx    @dptr,a
0C86           3170   ;        main.c:1087: if (vy_err > 0){ //move forward
0C86 C3        3171            clr     c
0C87 E4        3172            clr     a
0C88 95A0      3173            subb    a,_Joystick_Control_sloc0_1_0
0C8A E4        3174            clr     a
0C8B 6480      3175            xrl     a,#0x80
0C8D 85A1F0    3176            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
0C90 63F080    3177            xrl     b,#0x80
0C93 95F0      3178            subb    a,b
0C95 5000      3179            jnc     L031002?
0C97           3180   ;        main.c:1088: L_motor_dir = 0; 
0C97 904CB0    3181            mov     dptr,#_L_motor_dir
0C9A           3182   ;        main.c:1089: R_motor_dir = 0; 
0C9A E4        3183            clr     a
0C9B F0        3184            movx    @dptr,a
0C9C 904C70    3185            mov     dptr,#_R_motor_dir
0C9F F0        3186            movx    @dptr,a
0CA0 8000      3187            sjmp    L031005?
0CA2           3188   L031002?:
0CA2           3189   ;        main.c:1092: L_motor_dir = 1; 
0CA2 904CB0    3190            mov     dptr,#_L_motor_dir
0CA5 7401      3191            mov     a,#0x01
0CA7 F0        3192            movx    @dptr,a
0CA8           3193   ;        main.c:1093: R_motor_dir = 1; 
0CA8 904C70    3194            mov     dptr,#_R_motor_dir
0CAB 7401      3195            mov     a,#0x01
0CAD F0        3196            movx    @dptr,a
0CAE           3197   ;        main.c:1094: pwm_right *= 1.05;
0CAE 859082    3198            mov     dpl,_Joystick_Control_sloc3_1_0
0CB1 C004      3199            push    ar4
0CB3 C005      3200            push    ar5
0CB5 C006      3201            push    ar6
0CB7 C007      3202            push    ar7
0CB9 120000    3203            lcall   ___uchar2fs
0CBC A882      3204            mov     r0,dpl
0CBE A983      3205            mov     r1,dph
0CC0 AAF0      3206            mov     r2,b
0CC2 FB        3207            mov     r3,a
0CC3 C000      3208            push    ar0
0CC5 C001      3209            push    ar1
0CC7 C002      3210            push    ar2
0CC9 C003      3211            push    ar3
0CCB 906666    3212            mov     dptr,#0x6666
0CCE 75F086    3213            mov     b,#0x86
0CD1 743F      3214            mov     a,#0x3F
0CD3 120000    3215            lcall   ___fsmul
0CD6 AA82      3216            mov     r2,dpl
0CD8 AB83      3217            mov     r3,dph
0CDA A8F0      3218            mov     r0,b
0CDC F9        3219            mov     r1,a
0CDD E581      3220            mov     a,sp
0CDF 24FC      3221            add     a,#0xfc
0CE1 F581      3222            mov     sp,a
0CE3 8A82      3223            mov     dpl,r2
0CE5 8B83      3224            mov     dph,r3
0CE7 88F0      3225            mov     b,r0
0CE9 E9        3226            mov     a,r1
0CEA 120000    3227            lcall   ___fs2uchar
0CED E582      3228            mov     a,dpl
0CEF D007      3229            pop     ar7
0CF1 D006      3230            pop     ar6
0CF3 D005      3231            pop     ar5
0CF5 D004      3232            pop     ar4
0CF7 904CF0    3233            mov     dptr,#_pwm_right
0CFA F0        3234            movx    @dptr,a
0CFB           3235   ;        main.c:1178: return 0.0;
0CFB           3236   ;        main.c:1094: pwm_right *= 1.05;
0CFB           3237   L031005?:
0CFB           3238   ;        main.c:1097: if ((vx_error>5)&&(vy_error<5)){
0CFB 90C6D0    3239            mov     dptr,#_Joystick_Control_vx_error_1_171
0CFE E0        3240            movx    a,@dptr
0CFF F580      3241            mov     _Joystick_Control_sloc6_1_0,a
0D01 A3        3242            inc     dptr
0D02 E0        3243            movx    a,@dptr
0D03 F581      3244            mov     (_Joystick_Control_sloc6_1_0 + 1),a
0D05 C3        3245            clr     c
0D06 7405      3246            mov     a,#0x05
0D08 9580      3247            subb    a,_Joystick_Control_sloc6_1_0
0D0A E4        3248            clr     a
0D0B 6480      3249            xrl     a,#0x80
0D0D 8581F0    3250            mov     b,(_Joystick_Control_sloc6_1_0 + 1)
0D10 63F080    3251            xrl     b,#0x80
0D13 95F0      3252            subb    a,b
0D15 E4        3253            clr     a
0D16 33        3254            rlc     a
0D17 F590      3255            mov     _Joystick_Control_sloc3_1_0,a
0D19 7000      3256            jnz     L031059?
0D1B 020000    3257            ljmp    L031011?
0D1E           3258   L031059?:
0D1E C3        3259            clr     c
0D1F EE        3260            mov     a,r6
0D20 9405      3261            subb    a,#0x05
0D22 EF        3262            mov     a,r7
0D23 6480      3263            xrl     a,#0x80
0D25 9480      3264            subb    a,#0x80
0D27 4000      3265            jc      L031060?
0D29 020000    3266            ljmp    L031011?
0D2C           3267   L031060?:
0D2C           3268   ;        main.c:1098: pwm_left = vx_error; 
0D2C C004      3269            push    ar4
0D2E C005      3270            push    ar5
0D30 904D30    3271            mov     dptr,#_pwm_left
0D33 E580      3272            mov     a,_Joystick_Control_sloc6_1_0
0D35 F0        3273            movx    @dptr,a
0D36           3274   ;        main.c:1099: pwm_right = vx_error * pwm_corr; 
0D36 858082    3275            mov     dpl,_Joystick_Control_sloc6_1_0
0D39 858183    3276            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
0D3C C006      3277            push    ar6
0D3E C007      3278            push    ar7
0D40 120000    3279            lcall   ___sint2fs
0D43 AC82      3280            mov     r4,dpl
0D45 AD83      3281            mov     r5,dph
0D47 AAF0      3282            mov     r2,b
0D49 FB        3283            mov     r3,a
0D4A 9049E0    3284            mov     dptr,#_pwm_corr
0D4D E0        3285            movx    a,@dptr
0D4E C0E0      3286            push    acc
0D50 A3        3287            inc     dptr
0D51 E0        3288            movx    a,@dptr
0D52 C0E0      3289            push    acc
0D54 A3        3290            inc     dptr
0D55 E0        3291            movx    a,@dptr
0D56 C0E0      3292            push    acc
0D58 A3        3293            inc     dptr
0D59 E0        3294            movx    a,@dptr
0D5A C0E0      3295            push    acc
0D5C 8C82      3296            mov     dpl,r4
0D5E 8D83      3297            mov     dph,r5
0D60 8AF0      3298            mov     b,r2
0D62 EB        3299            mov     a,r3
0D63 120000    3300            lcall   ___fsmul
0D66 AA82      3301            mov     r2,dpl
0D68 AB83      3302            mov     r3,dph
0D6A ACF0      3303            mov     r4,b
0D6C FD        3304            mov     r5,a
0D6D E581      3305            mov     a,sp
0D6F 24FC      3306            add     a,#0xfc
0D71 F581      3307            mov     sp,a
0D73 D007      3308            pop     ar7
0D75 D006      3309            pop     ar6
0D77 8A82      3310            mov     dpl,r2
0D79 8B83      3311            mov     dph,r3
0D7B 8CF0      3312            mov     b,r4
0D7D ED        3313            mov     a,r5
0D7E C004      3314            push    ar4
0D80 C005      3315            push    ar5
0D82 C006      3316            push    ar6
0D84 C007      3317            push    ar7
0D86 120000    3318            lcall   ___fs2uchar
0D89 E582      3319            mov     a,dpl
0D8B D007      3320            pop     ar7
0D8D D006      3321            pop     ar6
0D8F D005      3322            pop     ar5
0D91 D004      3323            pop     ar4
0D93 904CF0    3324            mov     dptr,#_pwm_right
0D96 F0        3325            movx    @dptr,a
0D97           3326   ;        main.c:1100: if (vx_err > 0){ //turn right
0D97 C3        3327            clr     c
0D98 E4        3328            clr     a
0D99 95E0      3329            subb    a,_Joystick_Control_sloc4_1_0
0D9B E4        3330            clr     a
0D9C 6480      3331            xrl     a,#0x80
0D9E 85E1F0    3332            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
0DA1 63F080    3333            xrl     b,#0x80
0DA4 95F0      3334            subb    a,b
0DA6 D005      3335            pop     ar5
0DA8 D004      3336            pop     ar4
0DAA 5000      3337            jnc     L031008?
0DAC           3338   ;        main.c:1101: L_motor_dir = 1; 
0DAC 904CB0    3339            mov     dptr,#_L_motor_dir
0DAF 7401      3340            mov     a,#0x01
0DB1 F0        3341            movx    @dptr,a
0DB2           3342   ;        main.c:1102: R_motor_dir = 0;
0DB2 904C70    3343            mov     dptr,#_R_motor_dir
0DB5 E4        3344            clr     a
0DB6 F0        3345            movx    @dptr,a
0DB7 8000      3346            sjmp    L031011?
0DB9           3347   L031008?:
0DB9           3348   ;        main.c:1106: L_motor_dir = 0; 
0DB9 904CB0    3349            mov     dptr,#_L_motor_dir
0DBC E4        3350            clr     a
0DBD F0        3351            movx    @dptr,a
0DBE           3352   ;        main.c:1107: R_motor_dir = 1; 
0DBE 904C70    3353            mov     dptr,#_R_motor_dir
0DC1 7401      3354            mov     a,#0x01
0DC3 F0        3355            movx    @dptr,a
0DC4           3356   L031011?:
0DC4           3357   ;        main.c:1113: if ((vx_error>5)&&(vy_error)>5){
0DC4 E590      3358            mov     a,_Joystick_Control_sloc3_1_0
0DC6 7000      3359            jnz     L031062?
0DC8 020000    3360            ljmp    L031036?
0DCB           3361   L031062?:
0DCB E5F0      3362            mov     a,_Joystick_Control_sloc1_1_0
0DCD 7000      3363            jnz     L031063?
0DCF 020000    3364            ljmp    L031036?
0DD2           3365   L031063?:
0DD2           3366   ;        main.c:1116: if (vy_err>0){
0DD2 C3        3367            clr     c
0DD3 E4        3368            clr     a
0DD4 95A0      3369            subb    a,_Joystick_Control_sloc0_1_0
0DD6 E4        3370            clr     a
0DD7 6480      3371            xrl     a,#0x80
0DD9 85A1F0    3372            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
0DDC 63F080    3373            xrl     b,#0x80
0DDF 95F0      3374            subb    a,b
0DE1 4000      3375            jc      L031064?
0DE3 020000    3376            ljmp    L031023?
0DE6           3377   L031064?:
0DE6           3378   ;        main.c:1117: L_motor_dir = 0; 
0DE6 904CB0    3379            mov     dptr,#_L_motor_dir
0DE9           3380   ;        main.c:1118: R_motor_dir = 0; 
0DE9 E4        3381            clr     a
0DEA F0        3382            movx    @dptr,a
0DEB 904C70    3383            mov     dptr,#_R_motor_dir
0DEE F0        3384            movx    @dptr,a
0DEF           3385   ;        main.c:1120: if (vx_err>0){
0DEF C3        3386            clr     c
0DF0 E4        3387            clr     a
0DF1 95E0      3388            subb    a,_Joystick_Control_sloc4_1_0
0DF3 E4        3389            clr     a
0DF4 6480      3390            xrl     a,#0x80
0DF6 85E1F0    3391            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
0DF9 63F080    3392            xrl     b,#0x80
0DFC 95F0      3393            subb    a,b
0DFE 4000      3394            jc      L031065?
0E00 020000    3395            ljmp    L031020?
0E03           3396   L031065?:
0E03           3397   ;        main.c:1122: if (vy*100<=vy_thres*100/2){
0E03 8C00      3398            mov     __mulint_PARM_2,r4
0E05 8D01      3399            mov     (__mulint_PARM_2 + 1),r5
0E07 900064    3400            mov     dptr,#0x0064
0E0A C004      3401            push    ar4
0E0C C005      3402            push    ar5
0E0E C006      3403            push    ar6
0E10 C007      3404            push    ar7
0E12 120000    3405            lcall   __mulint
0E15 AA82      3406            mov     r2,dpl
0E17 AB83      3407            mov     r3,dph
0E19 D007      3408            pop     ar7
0E1B D006      3409            pop     ar6
0E1D D005      3410            pop     ar5
0E1F D004      3411            pop     ar4
0E21 854000    3412            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
0E24 854101    3413            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
0E27 900064    3414            mov     dptr,#0x0064
0E2A C002      3415            push    ar2
0E2C C003      3416            push    ar3
0E2E C004      3417            push    ar4
0E30 C005      3418            push    ar5
0E32 C006      3419            push    ar6
0E34 C007      3420            push    ar7
0E36 120000    3421            lcall   __mulint
0E39 A882      3422            mov     r0,dpl
0E3B A983      3423            mov     r1,dph
0E3D 750002    3424            mov     __divsint_PARM_2,#0x02
0E40 E4        3425            clr     a
0E41 F501      3426            mov     (__divsint_PARM_2 + 1),a
0E43 8882      3427            mov     dpl,r0
0E45 8983      3428            mov     dph,r1
0E47 120000    3429            lcall   __divsint
0E4A A882      3430            mov     r0,dpl
0E4C A983      3431            mov     r1,dph
0E4E D007      3432            pop     ar7
0E50 D006      3433            pop     ar6
0E52 D005      3434            pop     ar5
0E54 D004      3435            pop     ar4
0E56 D003      3436            pop     ar3
0E58 D002      3437            pop     ar2
0E5A C3        3438            clr     c
0E5B E8        3439            mov     a,r0
0E5C 9A        3440            subb    a,r2
0E5D E9        3441            mov     a,r1
0E5E 6480      3442            xrl     a,#0x80
0E60 8BF0      3443            mov     b,r3
0E62 63F080    3444            xrl     b,#0x80
0E65 95F0      3445            subb    a,b
0E67 5000      3446            jnc     L031066?
0E69 020000    3447            ljmp    L031014?
0E6C           3448   L031066?:
0E6C           3449   ;        main.c:1123: pwm_left = vy_error; 
0E6C C004      3450            push    ar4
0E6E C005      3451            push    ar5
0E70 904D30    3452            mov     dptr,#_pwm_left
0E73 EE        3453            mov     a,r6
0E74 F0        3454            movx    @dptr,a
0E75           3455   ;        main.c:1124: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
0E75 9049E0    3456            mov     dptr,#_pwm_corr
0E78 E0        3457            movx    a,@dptr
0E79 F530      3458            mov     _Joystick_Control_sloc5_1_0,a
0E7B A3        3459            inc     dptr
0E7C E0        3460            movx    a,@dptr
0E7D F531      3461            mov     (_Joystick_Control_sloc5_1_0 + 1),a
0E7F A3        3462            inc     dptr
0E80 E0        3463            movx    a,@dptr
0E81 F532      3464            mov     (_Joystick_Control_sloc5_1_0 + 2),a
0E83 A3        3465            inc     dptr
0E84 E0        3466            movx    a,@dptr
0E85 F533      3467            mov     (_Joystick_Control_sloc5_1_0 + 3),a
0E87 8E82      3468            mov     dpl,r6
0E89 8F83      3469            mov     dph,r7
0E8B C006      3470            push    ar6
0E8D C007      3471            push    ar7
0E8F 120000    3472            lcall   ___sint2fs
0E92 AA82      3473            mov     r2,dpl
0E94 AB83      3474            mov     r3,dph
0E96 ACF0      3475            mov     r4,b
0E98 FD        3476            mov     r5,a
0E99 C002      3477            push    ar2
0E9B C003      3478            push    ar3
0E9D C004      3479            push    ar4
0E9F C005      3480            push    ar5
0EA1 853082    3481            mov     dpl,_Joystick_Control_sloc5_1_0
0EA4 853183    3482            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
0EA7 8532F0    3483            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
0EAA E533      3484            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
0EAC 120000    3485            lcall   ___fsmul
0EAF AA82      3486            mov     r2,dpl
0EB1 AB83      3487            mov     r3,dph
0EB3 ACF0      3488            mov     r4,b
0EB5 FD        3489            mov     r5,a
0EB6 E581      3490            mov     a,sp
0EB8 24FC      3491            add     a,#0xfc
0EBA F581      3492            mov     sp,a
0EBC D007      3493            pop     ar7
0EBE D006      3494            pop     ar6
0EC0 C004      3495            push    ar4
0EC2 C005      3496            push    ar5
0EC4 C006      3497            push    ar6
0EC6 C007      3498            push    ar7
0EC8 C002      3499            push    ar2
0ECA C003      3500            push    ar3
0ECC C004      3501            push    ar4
0ECE C005      3502            push    ar5
0ED0 900000    3503            mov     dptr,#0x0000
0ED3 75F0C8    3504            mov     b,#0xC8
0ED6 7442      3505            mov     a,#0x42
0ED8 120000    3506            lcall   ___fsmul
0EDB 858230    3507            mov     _Joystick_Control_sloc5_1_0,dpl
0EDE 858331    3508            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
0EE1 85F032    3509            mov     (_Joystick_Control_sloc5_1_0 + 2),b
0EE4 F533      3510            mov     (_Joystick_Control_sloc5_1_0 + 3),a
0EE6 E581      3511            mov     a,sp
0EE8 24FC      3512            add     a,#0xfc
0EEA F581      3513            mov     sp,a
0EEC D007      3514            pop     ar7
0EEE D006      3515            pop     ar6
0EF0 D005      3516            pop     ar5
0EF2 D004      3517            pop     ar4
0EF4 EE        3518            mov     a,r6
0EF5 2580      3519            add     a,_Joystick_Control_sloc6_1_0
0EF7 F582      3520            mov     dpl,a
0EF9 EF        3521            mov     a,r7
0EFA 3581      3522            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
0EFC F583      3523            mov     dph,a
0EFE C006      3524            push    ar6
0F00 C007      3525            push    ar7
0F02 120000    3526            lcall   ___sint2fs
0F05 AA82      3527            mov     r2,dpl
0F07 AB83      3528            mov     r3,dph
0F09 ACF0      3529            mov     r4,b
0F0B FD        3530            mov     r5,a
0F0C C002      3531            push    ar2
0F0E C003      3532            push    ar3
0F10 C004      3533            push    ar4
0F12 C005      3534            push    ar5
0F14 853082    3535            mov     dpl,_Joystick_Control_sloc5_1_0
0F17 853183    3536            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
0F1A 8532F0    3537            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
0F1D E533      3538            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
0F1F 120000    3539            lcall   ___fsdiv
0F22 AA82      3540            mov     r2,dpl
0F24 AB83      3541            mov     r3,dph
0F26 ACF0      3542            mov     r4,b
0F28 FD        3543            mov     r5,a
0F29 E581      3544            mov     a,sp
0F2B 24FC      3545            add     a,#0xfc
0F2D F581      3546            mov     sp,a
0F2F D007      3547            pop     ar7
0F31 D006      3548            pop     ar6
0F33 8A82      3549            mov     dpl,r2
0F35 8B83      3550            mov     dph,r3
0F37 8CF0      3551            mov     b,r4
0F39 ED        3552            mov     a,r5
0F3A C004      3553            push    ar4
0F3C C005      3554            push    ar5
0F3E C006      3555            push    ar6
0F40 C007      3556            push    ar7
0F42 120000    3557            lcall   ___fs2uchar
0F45 E582      3558            mov     a,dpl
0F47 D007      3559            pop     ar7
0F49 D006      3560            pop     ar6
0F4B D005      3561            pop     ar5
0F4D D004      3562            pop     ar4
0F4F 904CF0    3563            mov     dptr,#_pwm_right
0F52 F0        3564            movx    @dptr,a
0F53 D005      3565            pop     ar5
0F55 D004      3566            pop     ar4
0F57 020000    3567            ljmp    L031023?
0F5A           3568   L031014?:
0F5A           3569   ;        main.c:1127: pwm_left = vx_error; 
0F5A C004      3570            push    ar4
0F5C C005      3571            push    ar5
0F5E 904D30    3572            mov     dptr,#_pwm_left
0F61 E580      3573            mov     a,_Joystick_Control_sloc6_1_0
0F63 F0        3574            movx    @dptr,a
0F64           3575   ;        main.c:1128: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
0F64 9049E0    3576            mov     dptr,#_pwm_corr
0F67 E0        3577            movx    a,@dptr
0F68 F530      3578            mov     _Joystick_Control_sloc5_1_0,a
0F6A A3        3579            inc     dptr
0F6B E0        3580            movx    a,@dptr
0F6C F531      3581            mov     (_Joystick_Control_sloc5_1_0 + 1),a
0F6E A3        3582            inc     dptr
0F6F E0        3583            movx    a,@dptr
0F70 F532      3584            mov     (_Joystick_Control_sloc5_1_0 + 2),a
0F72 A3        3585            inc     dptr
0F73 E0        3586            movx    a,@dptr
0F74 F533      3587            mov     (_Joystick_Control_sloc5_1_0 + 3),a
0F76 858082    3588            mov     dpl,_Joystick_Control_sloc6_1_0
0F79 858183    3589            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
0F7C C006      3590            push    ar6
0F7E C007      3591            push    ar7
0F80 120000    3592            lcall   ___sint2fs
0F83 AA82      3593            mov     r2,dpl
0F85 AB83      3594            mov     r3,dph
0F87 ACF0      3595            mov     r4,b
0F89 FD        3596            mov     r5,a
0F8A C002      3597            push    ar2
0F8C C003      3598            push    ar3
0F8E C004      3599            push    ar4
0F90 C005      3600            push    ar5
0F92 853082    3601            mov     dpl,_Joystick_Control_sloc5_1_0
0F95 853183    3602            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
0F98 8532F0    3603            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
0F9B E533      3604            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
0F9D 120000    3605            lcall   ___fsmul
0FA0 AA82      3606            mov     r2,dpl
0FA2 AB83      3607            mov     r3,dph
0FA4 ACF0      3608            mov     r4,b
0FA6 FD        3609            mov     r5,a
0FA7 E581      3610            mov     a,sp
0FA9 24FC      3611            add     a,#0xfc
0FAB F581      3612            mov     sp,a
0FAD D007      3613            pop     ar7
0FAF D006      3614            pop     ar6
0FB1 C004      3615            push    ar4
0FB3 C005      3616            push    ar5
0FB5 C006      3617            push    ar6
0FB7 C007      3618            push    ar7
0FB9 C002      3619            push    ar2
0FBB C003      3620            push    ar3
0FBD C004      3621            push    ar4
0FBF C005      3622            push    ar5
0FC1 900000    3623            mov     dptr,#0x0000
0FC4 75F0C8    3624            mov     b,#0xC8
0FC7 7442      3625            mov     a,#0x42
0FC9 120000    3626            lcall   ___fsmul
0FCC 858230    3627            mov     _Joystick_Control_sloc5_1_0,dpl
0FCF 858331    3628            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
0FD2 85F032    3629            mov     (_Joystick_Control_sloc5_1_0 + 2),b
0FD5 F533      3630            mov     (_Joystick_Control_sloc5_1_0 + 3),a
0FD7 E581      3631            mov     a,sp
0FD9 24FC      3632            add     a,#0xfc
0FDB F581      3633            mov     sp,a
0FDD D007      3634            pop     ar7
0FDF D006      3635            pop     ar6
0FE1 D005      3636            pop     ar5
0FE3 D004      3637            pop     ar4
0FE5 EE        3638            mov     a,r6
0FE6 2580      3639            add     a,_Joystick_Control_sloc6_1_0
0FE8 F582      3640            mov     dpl,a
0FEA EF        3641            mov     a,r7
0FEB 3581      3642            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
0FED F583      3643            mov     dph,a
0FEF C006      3644            push    ar6
0FF1 C007      3645            push    ar7
0FF3 120000    3646            lcall   ___sint2fs
0FF6 AA82      3647            mov     r2,dpl
0FF8 AB83      3648            mov     r3,dph
0FFA ACF0      3649            mov     r4,b
0FFC FD        3650            mov     r5,a
0FFD C002      3651            push    ar2
0FFF C003      3652            push    ar3
1001 C004      3653            push    ar4
1003 C005      3654            push    ar5
1005 853082    3655            mov     dpl,_Joystick_Control_sloc5_1_0
1008 853183    3656            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
100B 8532F0    3657            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
100E E533      3658            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1010 120000    3659            lcall   ___fsdiv
1013 AA82      3660            mov     r2,dpl
1015 AB83      3661            mov     r3,dph
1017 ACF0      3662            mov     r4,b
1019 FD        3663            mov     r5,a
101A E581      3664            mov     a,sp
101C 24FC      3665            add     a,#0xfc
101E F581      3666            mov     sp,a
1020 D007      3667            pop     ar7
1022 D006      3668            pop     ar6
1024 8A82      3669            mov     dpl,r2
1026 8B83      3670            mov     dph,r3
1028 8CF0      3671            mov     b,r4
102A ED        3672            mov     a,r5
102B C004      3673            push    ar4
102D C005      3674            push    ar5
102F C006      3675            push    ar6
1031 C007      3676            push    ar7
1033 120000    3677            lcall   ___fs2uchar
1036 E582      3678            mov     a,dpl
1038 D007      3679            pop     ar7
103A D006      3680            pop     ar6
103C D005      3681            pop     ar5
103E D004      3682            pop     ar4
1040 904CF0    3683            mov     dptr,#_pwm_right
1043 F0        3684            movx    @dptr,a
1044 D005      3685            pop     ar5
1046 D004      3686            pop     ar4
1048 020000    3687            ljmp    L031023?
104B           3688   L031020?:
104B           3689   ;        main.c:1134: if (vy*100<=vy_thres*100/2){
104B 8C00      3690            mov     __mulint_PARM_2,r4
104D 8D01      3691            mov     (__mulint_PARM_2 + 1),r5
104F 900064    3692            mov     dptr,#0x0064
1052 C004      3693            push    ar4
1054 C005      3694            push    ar5
1056 C006      3695            push    ar6
1058 C007      3696            push    ar7
105A 120000    3697            lcall   __mulint
105D AA82      3698            mov     r2,dpl
105F AB83      3699            mov     r3,dph
1061 D007      3700            pop     ar7
1063 D006      3701            pop     ar6
1065 D005      3702            pop     ar5
1067 D004      3703            pop     ar4
1069 854000    3704            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
106C 854101    3705            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
106F 900064    3706            mov     dptr,#0x0064
1072 C002      3707            push    ar2
1074 C003      3708            push    ar3
1076 C004      3709            push    ar4
1078 C005      3710            push    ar5
107A C006      3711            push    ar6
107C C007      3712            push    ar7
107E 120000    3713            lcall   __mulint
1081 A882      3714            mov     r0,dpl
1083 A983      3715            mov     r1,dph
1085 750002    3716            mov     __divsint_PARM_2,#0x02
1088 E4        3717            clr     a
1089 F501      3718            mov     (__divsint_PARM_2 + 1),a
108B 8882      3719            mov     dpl,r0
108D 8983      3720            mov     dph,r1
108F 120000    3721            lcall   __divsint
1092 A882      3722            mov     r0,dpl
1094 A983      3723            mov     r1,dph
1096 D007      3724            pop     ar7
1098 D006      3725            pop     ar6
109A D005      3726            pop     ar5
109C D004      3727            pop     ar4
109E D003      3728            pop     ar3
10A0 D002      3729            pop     ar2
10A2 C3        3730            clr     c
10A3 E8        3731            mov     a,r0
10A4 9A        3732            subb    a,r2
10A5 E9        3733            mov     a,r1
10A6 6480      3734            xrl     a,#0x80
10A8 8BF0      3735            mov     b,r3
10AA 63F080    3736            xrl     b,#0x80
10AD 95F0      3737            subb    a,b
10AF 5000      3738            jnc     L031067?
10B1 020000    3739            ljmp    L031017?
10B4           3740   L031067?:
10B4           3741   ;        main.c:1135: pwm_left = vy_error*100/(vx_error+vy_error);
10B4 C004      3742            push    ar4
10B6 C005      3743            push    ar5
10B8 8E00      3744            mov     __mulint_PARM_2,r6
10BA 8F01      3745            mov     (__mulint_PARM_2 + 1),r7
10BC 900064    3746            mov     dptr,#0x0064
10BF C004      3747            push    ar4
10C1 C005      3748            push    ar5
10C3 C006      3749            push    ar6
10C5 C007      3750            push    ar7
10C7 120000    3751            lcall   __mulint
10CA AA82      3752            mov     r2,dpl
10CC AB83      3753            mov     r3,dph
10CE D007      3754            pop     ar7
10D0 D006      3755            pop     ar6
10D2 EE        3756            mov     a,r6
10D3 2580      3757            add     a,_Joystick_Control_sloc6_1_0
10D5 F500      3758            mov     __divsint_PARM_2,a
10D7 EF        3759            mov     a,r7
10D8 3581      3760            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
10DA F501      3761            mov     (__divsint_PARM_2 + 1),a
10DC 8A82      3762            mov     dpl,r2
10DE 8B83      3763            mov     dph,r3
10E0 C006      3764            push    ar6
10E2 C007      3765            push    ar7
10E4 120000    3766            lcall   __divsint
10E7 AA82      3767            mov     r2,dpl
10E9 D007      3768            pop     ar7
10EB D006      3769            pop     ar6
10ED D005      3770            pop     ar5
10EF D004      3771            pop     ar4
10F1 904D30    3772            mov     dptr,#_pwm_left
10F4 EA        3773            mov     a,r2
10F5 F0        3774            movx    @dptr,a
10F6           3775   ;        main.c:1136: pwm_right = vy_error*pwm_corr; 
10F6 8E82      3776            mov     dpl,r6
10F8 8F83      3777            mov     dph,r7
10FA C006      3778            push    ar6
10FC C007      3779            push    ar7
10FE 120000    3780            lcall   ___sint2fs
1101 AA82      3781            mov     r2,dpl
1103 AB83      3782            mov     r3,dph
1105 ACF0      3783            mov     r4,b
1107 FD        3784            mov     r5,a
1108 9049E0    3785            mov     dptr,#_pwm_corr
110B E0        3786            movx    a,@dptr
110C C0E0      3787            push    acc
110E A3        3788            inc     dptr
110F E0        3789            movx    a,@dptr
1110 C0E0      3790            push    acc
1112 A3        3791            inc     dptr
1113 E0        3792            movx    a,@dptr
1114 C0E0      3793            push    acc
1116 A3        3794            inc     dptr
1117 E0        3795            movx    a,@dptr
1118 C0E0      3796            push    acc
111A 8A82      3797            mov     dpl,r2
111C 8B83      3798            mov     dph,r3
111E 8CF0      3799            mov     b,r4
1120 ED        3800            mov     a,r5
1121 120000    3801            lcall   ___fsmul
1124 AA82      3802            mov     r2,dpl
1126 AB83      3803            mov     r3,dph
1128 ACF0      3804            mov     r4,b
112A FD        3805            mov     r5,a
112B E581      3806            mov     a,sp
112D 24FC      3807            add     a,#0xfc
112F F581      3808            mov     sp,a
1131 D007      3809            pop     ar7
1133 D006      3810            pop     ar6
1135 8A82      3811            mov     dpl,r2
1137 8B83      3812            mov     dph,r3
1139 8CF0      3813            mov     b,r4
113B ED        3814            mov     a,r5
113C C004      3815            push    ar4
113E C005      3816            push    ar5
1140 C006      3817            push    ar6
1142 C007      3818            push    ar7
1144 120000    3819            lcall   ___fs2uchar
1147 E582      3820            mov     a,dpl
1149 D007      3821            pop     ar7
114B D006      3822            pop     ar6
114D D005      3823            pop     ar5
114F D004      3824            pop     ar4
1151 904CF0    3825            mov     dptr,#_pwm_right
1154 F0        3826            movx    @dptr,a
1155 D005      3827            pop     ar5
1157 D004      3828            pop     ar4
1159 020000    3829            ljmp    L031023?
115C           3830   L031017?:
115C           3831   ;        main.c:1139: pwm_left = vx_error*100/(vx_error+vy_error);
115C C004      3832            push    ar4
115E C005      3833            push    ar5
1160 858000    3834            mov     __mulint_PARM_2,_Joystick_Control_sloc6_1_0
1163 858101    3835            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc6_1_0 + 1)
1166 900064    3836            mov     dptr,#0x0064
1169 C004      3837            push    ar4
116B C005      3838            push    ar5
116D C006      3839            push    ar6
116F C007      3840            push    ar7
1171 120000    3841            lcall   __mulint
1174 AA82      3842            mov     r2,dpl
1176 AB83      3843            mov     r3,dph
1178 D007      3844            pop     ar7
117A D006      3845            pop     ar6
117C EE        3846            mov     a,r6
117D 2580      3847            add     a,_Joystick_Control_sloc6_1_0
117F F500      3848            mov     __divsint_PARM_2,a
1181 EF        3849            mov     a,r7
1182 3581      3850            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1184 F501      3851            mov     (__divsint_PARM_2 + 1),a
1186 8A82      3852            mov     dpl,r2
1188 8B83      3853            mov     dph,r3
118A C006      3854            push    ar6
118C C007      3855            push    ar7
118E 120000    3856            lcall   __divsint
1191 AA82      3857            mov     r2,dpl
1193 D007      3858            pop     ar7
1195 D006      3859            pop     ar6
1197 D005      3860            pop     ar5
1199 D004      3861            pop     ar4
119B 904D30    3862            mov     dptr,#_pwm_left
119E EA        3863            mov     a,r2
119F F0        3864            movx    @dptr,a
11A0           3865   ;        main.c:1140: pwm_right = vx_error*pwm_corr; 
11A0 858082    3866            mov     dpl,_Joystick_Control_sloc6_1_0
11A3 858183    3867            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
11A6 C006      3868            push    ar6
11A8 C007      3869            push    ar7
11AA 120000    3870            lcall   ___sint2fs
11AD AA82      3871            mov     r2,dpl
11AF AB83      3872            mov     r3,dph
11B1 ACF0      3873            mov     r4,b
11B3 FD        3874            mov     r5,a
11B4 9049E0    3875            mov     dptr,#_pwm_corr
11B7 E0        3876            movx    a,@dptr
11B8 C0E0      3877            push    acc
11BA A3        3878            inc     dptr
11BB E0        3879            movx    a,@dptr
11BC C0E0      3880            push    acc
11BE A3        3881            inc     dptr
11BF E0        3882            movx    a,@dptr
11C0 C0E0      3883            push    acc
11C2 A3        3884            inc     dptr
11C3 E0        3885            movx    a,@dptr
11C4 C0E0      3886            push    acc
11C6 8A82      3887            mov     dpl,r2
11C8 8B83      3888            mov     dph,r3
11CA 8CF0      3889            mov     b,r4
11CC ED        3890            mov     a,r5
11CD 120000    3891            lcall   ___fsmul
11D0 AA82      3892            mov     r2,dpl
11D2 AB83      3893            mov     r3,dph
11D4 ACF0      3894            mov     r4,b
11D6 FD        3895            mov     r5,a
11D7 E581      3896            mov     a,sp
11D9 24FC      3897            add     a,#0xfc
11DB F581      3898            mov     sp,a
11DD D007      3899            pop     ar7
11DF D006      3900            pop     ar6
11E1 8A82      3901            mov     dpl,r2
11E3 8B83      3902            mov     dph,r3
11E5 8CF0      3903            mov     b,r4
11E7 ED        3904            mov     a,r5
11E8 C004      3905            push    ar4
11EA C005      3906            push    ar5
11EC C006      3907            push    ar6
11EE C007      3908            push    ar7
11F0 120000    3909            lcall   ___fs2uchar
11F3 E582      3910            mov     a,dpl
11F5 D007      3911            pop     ar7
11F7 D006      3912            pop     ar6
11F9 D005      3913            pop     ar5
11FB D004      3914            pop     ar4
11FD 904CF0    3915            mov     dptr,#_pwm_right
1200 F0        3916            movx    @dptr,a
1201           3917   ;        main.c:1178: return 0.0;
1201 D005      3918            pop     ar5
1203 D004      3919            pop     ar4
1205           3920   ;        main.c:1140: pwm_right = vx_error*pwm_corr; 
1205           3921   L031023?:
1205           3922   ;        main.c:1146: if (vy_err<0){
1205 E5A1      3923            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
1207 20E7B0    3924            jb      acc.7,L031068?
120A 020000    3925            ljmp    L031036?
120D           3926   L031068?:
120D           3927   ;        main.c:1147: L_motor_dir = 1; 
120D 904CB0    3928            mov     dptr,#_L_motor_dir
1210 7401      3929            mov     a,#0x01
1212 F0        3930            movx    @dptr,a
1213           3931   ;        main.c:1148: R_motor_dir = 1; 
1213 904C70    3932            mov     dptr,#_R_motor_dir
1216 7401      3933            mov     a,#0x01
1218 F0        3934            movx    @dptr,a
1219           3935   ;        main.c:1150: if (vx_err>0){
1219 C3        3936            clr     c
121A E4        3937            clr     a
121B 95E0      3938            subb    a,_Joystick_Control_sloc4_1_0
121D E4        3939            clr     a
121E 6480      3940            xrl     a,#0x80
1220 85E1F0    3941            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
1223 63F080    3942            xrl     b,#0x80
1226 95F0      3943            subb    a,b
1228 4000      3944            jc      L031069?
122A 020000    3945            ljmp    L031031?
122D           3946   L031069?:
122D           3947   ;        main.c:1151: if (vy*100<=vy_thres*100/2){
122D 8C00      3948            mov     __mulint_PARM_2,r4
122F 8D01      3949            mov     (__mulint_PARM_2 + 1),r5
1231 900064    3950            mov     dptr,#0x0064
1234 C006      3951            push    ar6
1236 C007      3952            push    ar7
1238 120000    3953            lcall   __mulint
123B AA82      3954            mov     r2,dpl
123D AB83      3955            mov     r3,dph
123F D007      3956            pop     ar7
1241 D006      3957            pop     ar6
1243 854000    3958            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
1246 854101    3959            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
1249 900064    3960            mov     dptr,#0x0064
124C C002      3961            push    ar2
124E C003      3962            push    ar3
1250 C006      3963            push    ar6
1252 C007      3964            push    ar7
1254 120000    3965            lcall   __mulint
1257 A882      3966            mov     r0,dpl
1259 A983      3967            mov     r1,dph
125B 750002    3968            mov     __divsint_PARM_2,#0x02
125E E4        3969            clr     a
125F F501      3970            mov     (__divsint_PARM_2 + 1),a
1261 8882      3971            mov     dpl,r0
1263 8983      3972            mov     dph,r1
1265 120000    3973            lcall   __divsint
1268 A882      3974            mov     r0,dpl
126A A983      3975            mov     r1,dph
126C D007      3976            pop     ar7
126E D006      3977            pop     ar6
1270 D003      3978            pop     ar3
1272 D002      3979            pop     ar2
1274 C3        3980            clr     c
1275 E8        3981            mov     a,r0
1276 9A        3982            subb    a,r2
1277 E9        3983            mov     a,r1
1278 6480      3984            xrl     a,#0x80
127A 8BF0      3985            mov     b,r3
127C 63F080    3986            xrl     b,#0x80
127F 95F0      3987            subb    a,b
1281 5000      3988            jnc     L031070?
1283 020000    3989            ljmp    L031025?
1286           3990   L031070?:
1286           3991   ;        main.c:1152: pwm_left = vy_error; 
1286 904D30    3992            mov     dptr,#_pwm_left
1289 EE        3993            mov     a,r6
128A F0        3994            movx    @dptr,a
128B           3995   ;        main.c:1153: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
128B 9049E0    3996            mov     dptr,#_pwm_corr
128E E0        3997            movx    a,@dptr
128F F530      3998            mov     _Joystick_Control_sloc5_1_0,a
1291 A3        3999            inc     dptr
1292 E0        4000            movx    a,@dptr
1293 F531      4001            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1295 A3        4002            inc     dptr
1296 E0        4003            movx    a,@dptr
1297 F532      4004            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1299 A3        4005            inc     dptr
129A E0        4006            movx    a,@dptr
129B F533      4007            mov     (_Joystick_Control_sloc5_1_0 + 3),a
129D 8E82      4008            mov     dpl,r6
129F 8F83      4009            mov     dph,r7
12A1 C006      4010            push    ar6
12A3 C007      4011            push    ar7
12A5 120000    4012            lcall   ___sint2fs
12A8 AA82      4013            mov     r2,dpl
12AA AB83      4014            mov     r3,dph
12AC A8F0      4015            mov     r0,b
12AE F9        4016            mov     r1,a
12AF C002      4017            push    ar2
12B1 C003      4018            push    ar3
12B3 C000      4019            push    ar0
12B5 C001      4020            push    ar1
12B7 853082    4021            mov     dpl,_Joystick_Control_sloc5_1_0
12BA 853183    4022            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
12BD 8532F0    4023            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
12C0 E533      4024            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
12C2 120000    4025            lcall   ___fsmul
12C5 AA82      4026            mov     r2,dpl
12C7 AB83      4027            mov     r3,dph
12C9 A8F0      4028            mov     r0,b
12CB F9        4029            mov     r1,a
12CC E581      4030            mov     a,sp
12CE 24FC      4031            add     a,#0xfc
12D0 F581      4032            mov     sp,a
12D2 C002      4033            push    ar2
12D4 C003      4034            push    ar3
12D6 C000      4035            push    ar0
12D8 C001      4036            push    ar1
12DA 900000    4037            mov     dptr,#0x0000
12DD 75F0C8    4038            mov     b,#0xC8
12E0 7442      4039            mov     a,#0x42
12E2 120000    4040            lcall   ___fsmul
12E5 858230    4041            mov     _Joystick_Control_sloc5_1_0,dpl
12E8 858331    4042            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
12EB 85F032    4043            mov     (_Joystick_Control_sloc5_1_0 + 2),b
12EE F533      4044            mov     (_Joystick_Control_sloc5_1_0 + 3),a
12F0 E581      4045            mov     a,sp
12F2 24FC      4046            add     a,#0xfc
12F4 F581      4047            mov     sp,a
12F6 D007      4048            pop     ar7
12F8 D006      4049            pop     ar6
12FA EE        4050            mov     a,r6
12FB 2580      4051            add     a,_Joystick_Control_sloc6_1_0
12FD F582      4052            mov     dpl,a
12FF EF        4053            mov     a,r7
1300 3581      4054            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1302 F583      4055            mov     dph,a
1304 120000    4056            lcall   ___sint2fs
1307 AA82      4057            mov     r2,dpl
1309 AB83      4058            mov     r3,dph
130B A8F0      4059            mov     r0,b
130D F9        4060            mov     r1,a
130E C002      4061            push    ar2
1310 C003      4062            push    ar3
1312 C000      4063            push    ar0
1314 C001      4064            push    ar1
1316 853082    4065            mov     dpl,_Joystick_Control_sloc5_1_0
1319 853183    4066            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
131C 8532F0    4067            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
131F E533      4068            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1321 120000    4069            lcall   ___fsdiv
1324 AA82      4070            mov     r2,dpl
1326 AB83      4071            mov     r3,dph
1328 A8F0      4072            mov     r0,b
132A F9        4073            mov     r1,a
132B E581      4074            mov     a,sp
132D 24FC      4075            add     a,#0xfc
132F F581      4076            mov     sp,a
1331 8A82      4077            mov     dpl,r2
1333 8B83      4078            mov     dph,r3
1335 88F0      4079            mov     b,r0
1337 E9        4080            mov     a,r1
1338 120000    4081            lcall   ___fs2uchar
133B E582      4082            mov     a,dpl
133D 904CF0    4083            mov     dptr,#_pwm_right
1340 F0        4084            movx    @dptr,a
1341 020000    4085            ljmp    L031036?
1344           4086   L031025?:
1344           4087   ;        main.c:1156: pwm_left = vx_error; 
1344 904D30    4088            mov     dptr,#_pwm_left
1347 E580      4089            mov     a,_Joystick_Control_sloc6_1_0
1349 F0        4090            movx    @dptr,a
134A           4091   ;        main.c:1157: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
134A 9049E0    4092            mov     dptr,#_pwm_corr
134D E0        4093            movx    a,@dptr
134E F530      4094            mov     _Joystick_Control_sloc5_1_0,a
1350 A3        4095            inc     dptr
1351 E0        4096            movx    a,@dptr
1352 F531      4097            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1354 A3        4098            inc     dptr
1355 E0        4099            movx    a,@dptr
1356 F532      4100            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1358 A3        4101            inc     dptr
1359 E0        4102            movx    a,@dptr
135A F533      4103            mov     (_Joystick_Control_sloc5_1_0 + 3),a
135C 858082    4104            mov     dpl,_Joystick_Control_sloc6_1_0
135F 858183    4105            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
1362 C006      4106            push    ar6
1364 C007      4107            push    ar7
1366 120000    4108            lcall   ___sint2fs
1369 AA82      4109            mov     r2,dpl
136B AB83      4110            mov     r3,dph
136D A8F0      4111            mov     r0,b
136F F9        4112            mov     r1,a
1370 C002      4113            push    ar2
1372 C003      4114            push    ar3
1374 C000      4115            push    ar0
1376 C001      4116            push    ar1
1378 853082    4117            mov     dpl,_Joystick_Control_sloc5_1_0
137B 853183    4118            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
137E 8532F0    4119            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1381 E533      4120            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1383 120000    4121            lcall   ___fsmul
1386 AA82      4122            mov     r2,dpl
1388 AB83      4123            mov     r3,dph
138A A8F0      4124            mov     r0,b
138C F9        4125            mov     r1,a
138D E581      4126            mov     a,sp
138F 24FC      4127            add     a,#0xfc
1391 F581      4128            mov     sp,a
1393 C002      4129            push    ar2
1395 C003      4130            push    ar3
1397 C000      4131            push    ar0
1399 C001      4132            push    ar1
139B 900000    4133            mov     dptr,#0x0000
139E 75F0C8    4134            mov     b,#0xC8
13A1 7442      4135            mov     a,#0x42
13A3 120000    4136            lcall   ___fsmul
13A6 858230    4137            mov     _Joystick_Control_sloc5_1_0,dpl
13A9 858331    4138            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
13AC 85F032    4139            mov     (_Joystick_Control_sloc5_1_0 + 2),b
13AF F533      4140            mov     (_Joystick_Control_sloc5_1_0 + 3),a
13B1 E581      4141            mov     a,sp
13B3 24FC      4142            add     a,#0xfc
13B5 F581      4143            mov     sp,a
13B7 D007      4144            pop     ar7
13B9 D006      4145            pop     ar6
13BB EE        4146            mov     a,r6
13BC 2580      4147            add     a,_Joystick_Control_sloc6_1_0
13BE F582      4148            mov     dpl,a
13C0 EF        4149            mov     a,r7
13C1 3581      4150            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
13C3 F583      4151            mov     dph,a
13C5 120000    4152            lcall   ___sint2fs
13C8 AA82      4153            mov     r2,dpl
13CA AB83      4154            mov     r3,dph
13CC A8F0      4155            mov     r0,b
13CE F9        4156            mov     r1,a
13CF C002      4157            push    ar2
13D1 C003      4158            push    ar3
13D3 C000      4159            push    ar0
13D5 C001      4160            push    ar1
13D7 853082    4161            mov     dpl,_Joystick_Control_sloc5_1_0
13DA 853183    4162            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
13DD 8532F0    4163            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
13E0 E533      4164            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
13E2 120000    4165            lcall   ___fsdiv
13E5 AA82      4166            mov     r2,dpl
13E7 AB83      4167            mov     r3,dph
13E9 A8F0      4168            mov     r0,b
13EB F9        4169            mov     r1,a
13EC E581      4170            mov     a,sp
13EE 24FC      4171            add     a,#0xfc
13F0 F581      4172            mov     sp,a
13F2 8A82      4173            mov     dpl,r2
13F4 8B83      4174            mov     dph,r3
13F6 88F0      4175            mov     b,r0
13F8 E9        4176            mov     a,r1
13F9 120000    4177            lcall   ___fs2uchar
13FC E582      4178            mov     a,dpl
13FE 904CF0    4179            mov     dptr,#_pwm_right
1401 F0        4180            movx    @dptr,a
1402 020000    4181            ljmp    L031036?
1405           4182   L031031?:
1405           4183   ;        main.c:1163: if (vy*100<=vy_thres*100/2){
1405 8C00      4184            mov     __mulint_PARM_2,r4
1407 8D01      4185            mov     (__mulint_PARM_2 + 1),r5
1409 900064    4186            mov     dptr,#0x0064
140C C006      4187            push    ar6
140E C007      4188            push    ar7
1410 120000    4189            lcall   __mulint
1413 AA82      4190            mov     r2,dpl
1415 AB83      4191            mov     r3,dph
1417 D007      4192            pop     ar7
1419 D006      4193            pop     ar6
141B 854000    4194            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
141E 854101    4195            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
1421 900064    4196            mov     dptr,#0x0064
1424 C002      4197            push    ar2
1426 C003      4198            push    ar3
1428 C006      4199            push    ar6
142A C007      4200            push    ar7
142C 120000    4201            lcall   __mulint
142F AC82      4202            mov     r4,dpl
1431 AD83      4203            mov     r5,dph
1433 750002    4204            mov     __divsint_PARM_2,#0x02
1436 E4        4205            clr     a
1437 F501      4206            mov     (__divsint_PARM_2 + 1),a
1439 8C82      4207            mov     dpl,r4
143B 8D83      4208            mov     dph,r5
143D 120000    4209            lcall   __divsint
1440 AC82      4210            mov     r4,dpl
1442 AD83      4211            mov     r5,dph
1444 D007      4212            pop     ar7
1446 D006      4213            pop     ar6
1448 D003      4214            pop     ar3
144A D002      4215            pop     ar2
144C C3        4216            clr     c
144D EC        4217            mov     a,r4
144E 9A        4218            subb    a,r2
144F ED        4219            mov     a,r5
1450 6480      4220            xrl     a,#0x80
1452 8BF0      4221            mov     b,r3
1454 63F080    4222            xrl     b,#0x80
1457 95F0      4223            subb    a,b
1459 5000      4224            jnc     L031071?
145B 020000    4225            ljmp    L031028?
145E           4226   L031071?:
145E           4227   ;        main.c:1164: pwm_left = vy_error*100/(vx_error+vy_error);
145E 8E00      4228            mov     __mulint_PARM_2,r6
1460 8F01      4229            mov     (__mulint_PARM_2 + 1),r7
1462 900064    4230            mov     dptr,#0x0064
1465 C006      4231            push    ar6
1467 C007      4232            push    ar7
1469 120000    4233            lcall   __mulint
146C AA82      4234            mov     r2,dpl
146E AB83      4235            mov     r3,dph
1470 D007      4236            pop     ar7
1472 D006      4237            pop     ar6
1474 EE        4238            mov     a,r6
1475 2580      4239            add     a,_Joystick_Control_sloc6_1_0
1477 F500      4240            mov     __divsint_PARM_2,a
1479 EF        4241            mov     a,r7
147A 3581      4242            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
147C F501      4243            mov     (__divsint_PARM_2 + 1),a
147E 8A82      4244            mov     dpl,r2
1480 8B83      4245            mov     dph,r3
1482 C006      4246            push    ar6
1484 C007      4247            push    ar7
1486 120000    4248            lcall   __divsint
1489 AA82      4249            mov     r2,dpl
148B D007      4250            pop     ar7
148D D006      4251            pop     ar6
148F 904D30    4252            mov     dptr,#_pwm_left
1492 EA        4253            mov     a,r2
1493 F0        4254            movx    @dptr,a
1494           4255   ;        main.c:1165: pwm_right =pwm_corr*vy_error; 
1494 9049E0    4256            mov     dptr,#_pwm_corr
1497 E0        4257            movx    a,@dptr
1498 F530      4258            mov     _Joystick_Control_sloc5_1_0,a
149A A3        4259            inc     dptr
149B E0        4260            movx    a,@dptr
149C F531      4261            mov     (_Joystick_Control_sloc5_1_0 + 1),a
149E A3        4262            inc     dptr
149F E0        4263            movx    a,@dptr
14A0 F532      4264            mov     (_Joystick_Control_sloc5_1_0 + 2),a
14A2 A3        4265            inc     dptr
14A3 E0        4266            movx    a,@dptr
14A4 F533      4267            mov     (_Joystick_Control_sloc5_1_0 + 3),a
14A6 8E82      4268            mov     dpl,r6
14A8 8F83      4269            mov     dph,r7
14AA 120000    4270            lcall   ___sint2fs
14AD A882      4271            mov     r0,dpl
14AF A983      4272            mov     r1,dph
14B1 AAF0      4273            mov     r2,b
14B3 FB        4274            mov     r3,a
14B4 C000      4275            push    ar0
14B6 C001      4276            push    ar1
14B8 C002      4277            push    ar2
14BA C003      4278            push    ar3
14BC 853082    4279            mov     dpl,_Joystick_Control_sloc5_1_0
14BF 853183    4280            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
14C2 8532F0    4281            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
14C5 E533      4282            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
14C7 120000    4283            lcall   ___fsmul
14CA AA82      4284            mov     r2,dpl
14CC AB83      4285            mov     r3,dph
14CE ACF0      4286            mov     r4,b
14D0 FD        4287            mov     r5,a
14D1 E581      4288            mov     a,sp
14D3 24FC      4289            add     a,#0xfc
14D5 F581      4290            mov     sp,a
14D7 8A82      4291            mov     dpl,r2
14D9 8B83      4292            mov     dph,r3
14DB 8CF0      4293            mov     b,r4
14DD ED        4294            mov     a,r5
14DE 120000    4295            lcall   ___fs2uchar
14E1 E582      4296            mov     a,dpl
14E3 904CF0    4297            mov     dptr,#_pwm_right
14E6 F0        4298            movx    @dptr,a
14E7 020000    4299            ljmp    L031036?
14EA           4300   L031028?:
14EA           4301   ;        main.c:1168: pwm_left = vx_error*100/(vx_error+vy_error);
14EA 858000    4302            mov     __mulint_PARM_2,_Joystick_Control_sloc6_1_0
14ED 858101    4303            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc6_1_0 + 1)
14F0 900064    4304            mov     dptr,#0x0064
14F3 C006      4305            push    ar6
14F5 C007      4306            push    ar7
14F7 120000    4307            lcall   __mulint
14FA AA82      4308            mov     r2,dpl
14FC AB83      4309            mov     r3,dph
14FE D007      4310            pop     ar7
1500 D006      4311            pop     ar6
1502 EE        4312            mov     a,r6
1503 2580      4313            add     a,_Joystick_Control_sloc6_1_0
1505 F500      4314            mov     __divsint_PARM_2,a
1507 EF        4315            mov     a,r7
1508 3581      4316            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
150A F501      4317            mov     (__divsint_PARM_2 + 1),a
150C 8A82      4318            mov     dpl,r2
150E 8B83      4319            mov     dph,r3
1510 120000    4320            lcall   __divsint
1513 AA82      4321            mov     r2,dpl
1515 904D30    4322            mov     dptr,#_pwm_left
1518 EA        4323            mov     a,r2
1519 F0        4324            movx    @dptr,a
151A           4325   ;        main.c:1169: pwm_right = pwm_corr*vx_error; 
151A 9049E0    4326            mov     dptr,#_pwm_corr
151D E0        4327            movx    a,@dptr
151E FA        4328            mov     r2,a
151F A3        4329            inc     dptr
1520 E0        4330            movx    a,@dptr
1521 FB        4331            mov     r3,a
1522 A3        4332            inc     dptr
1523 E0        4333            movx    a,@dptr
1524 FC        4334            mov     r4,a
1525 A3        4335            inc     dptr
1526 E0        4336            movx    a,@dptr
1527 FD        4337            mov     r5,a
1528 858082    4338            mov     dpl,_Joystick_Control_sloc6_1_0
152B 858183    4339            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
152E C002      4340            push    ar2
1530 C003      4341            push    ar3
1532 C004      4342            push    ar4
1534 C005      4343            push    ar5
1536 120000    4344            lcall   ___sint2fs
1539 AE82      4345            mov     r6,dpl
153B AF83      4346            mov     r7,dph
153D A8F0      4347            mov     r0,b
153F F9        4348            mov     r1,a
1540 D005      4349            pop     ar5
1542 D004      4350            pop     ar4
1544 D003      4351            pop     ar3
1546 D002      4352            pop     ar2
1548 C006      4353            push    ar6
154A C007      4354            push    ar7
154C C000      4355            push    ar0
154E C001      4356            push    ar1
1550 8A82      4357            mov     dpl,r2
1552 8B83      4358            mov     dph,r3
1554 8CF0      4359            mov     b,r4
1556 ED        4360            mov     a,r5
1557 120000    4361            lcall   ___fsmul
155A AA82      4362            mov     r2,dpl
155C AB83      4363            mov     r3,dph
155E ACF0      4364            mov     r4,b
1560 FD        4365            mov     r5,a
1561 E581      4366            mov     a,sp
1563 24FC      4367            add     a,#0xfc
1565 F581      4368            mov     sp,a
1567 8A82      4369            mov     dpl,r2
1569 8B83      4370            mov     dph,r3
156B 8CF0      4371            mov     b,r4
156D ED        4372            mov     a,r5
156E 120000    4373            lcall   ___fs2uchar
1571 E582      4374            mov     a,dpl
1573 904CF0    4375            mov     dptr,#_pwm_right
1576 F0        4376            movx    @dptr,a
1577           4377   L031036?:
1577           4378   ;        main.c:1178: return 0.0;
1577 900000    4379            mov     dptr,#(0x00&0x00ff)
157A E4        4380            clr     a
157B F5F0      4381            mov     b,a
157D 22        4382            ret
157E           4383   ;------------------------------------------------------------
157E           4384   ;Allocation info for local variables in function 'main'
157E           4385   ;------------------------------------------------------------
157E           4386   ;pick_char                 Allocated with name '_main_pick_char_1_194'
157E           4387   ;c                         Allocated with name '_main_c_1_194'
157E           4388   ;vx                        Allocated with name '_main_vx_1_194'
157E           4389   ;vy                        Allocated with name '_main_vy_1_194'
157E           4390   ;auto_mode                 Allocated with name '_main_auto_mode_1_194'
157E           4391   ;angle_count               Allocated with name '_main_angle_count_1_194'
157E           4392   ;------------------------------------------------------------
157E           4393   ;        main.c:1181: void main (void)
157E           4394   ;        -----------------------------------------
157E           4395   ;         function main
157E           4396   ;        -----------------------------------------
157E           4397   _main:
157E           4398   ;        main.c:1184: xdata int vx = 0, vy = 0; 
157E 90C710    4399            mov     dptr,#_main_vx_1_194
1581 E4        4400            clr     a
1582 F0        4401            movx    @dptr,a
1583 A3        4402            inc     dptr
1584 F0        4403            movx    @dptr,a
1585 90C750    4404            mov     dptr,#_main_vy_1_194
1588 E4        4405            clr     a
1589 F0        4406            movx    @dptr,a
158A A3        4407            inc     dptr
158B F0        4408            movx    @dptr,a
158C           4409   ;        main.c:1185: xdata int auto_mode = 0;
158C 90C7A0    4410            mov     dptr,#_main_auto_mode_1_194
158F E4        4411            clr     a
1590 F0        4412            movx    @dptr,a
1591 A3        4413            inc     dptr
1592 F0        4414            movx    @dptr,a
1593           4415   ;        main.c:1186: char pick_char = '0';
1593 75D030    4416            mov     _main_pick_char_1_194,#0x30
1596           4417   ;        main.c:1190: Init_all();
1596 120000    4418            lcall   _Init_all
1599           4419   ;        main.c:1192: waitms(500);
1599 9001F4    4420            mov     dptr,#0x01F4
159C 120000    4421            lcall   _waitms
159F           4422   ;        main.c:1193: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
159F 74E0      4423            mov     a,#__str_9
15A1 C0E0      4424            push    acc
15A3 7400      4425            mov     a,#(__str_9 >> 8)
15A5 C0E0      4426            push    acc
15A7 7480      4427            mov     a,#0x80
15A9 C0E0      4428            push    acc
15AB 120000    4429            lcall   _printf
15AE 1581      4430            dec     sp
15B0 1581      4431            dec     sp
15B2 1581      4432            dec     sp
15B4           4433   ;        main.c:1194: UART1_Init(9600);
15B4 902580    4434            mov     dptr,#0x2580
15B7 E4        4435            clr     a
15B8 F5F0      4436            mov     b,a
15BA 120000    4437            lcall   _UART1_Init
15BD           4438   ;        main.c:1196: ReceptionOff();
15BD 120000    4439            lcall   _ReceptionOff
15C0           4440   ;        main.c:1199: SendATCommand("AT+VER\r\n");
15C0 900120    4441            mov     dptr,#__str_10
15C3 75F080    4442            mov     b,#0x80
15C6 120000    4443            lcall   _SendATCommand
15C9           4444   ;        main.c:1200: SendATCommand("AT+BAUD\r\n");
15C9 900160    4445            mov     dptr,#__str_11
15CC 75F080    4446            mov     b,#0x80
15CF 120000    4447            lcall   _SendATCommand
15D2           4448   ;        main.c:1201: SendATCommand("AT+RFID\r\n");
15D2 9001A0    4449            mov     dptr,#__str_12
15D5 75F080    4450            mov     b,#0x80
15D8 120000    4451            lcall   _SendATCommand
15DB           4452   ;        main.c:1202: SendATCommand("AT+DVID\r\n");
15DB 9001E0    4453            mov     dptr,#__str_13
15DE 75F080    4454            mov     b,#0x80
15E1 120000    4455            lcall   _SendATCommand
15E4           4456   ;        main.c:1203: SendATCommand("AT+RFC002\r\n");
15E4 900220    4457            mov     dptr,#__str_14
15E7 75F080    4458            mov     b,#0x80
15EA 120000    4459            lcall   _SendATCommand
15ED           4460   ;        main.c:1204: SendATCommand("AT+POWE\r\n");
15ED 900260    4461            mov     dptr,#__str_15
15F0 75F080    4462            mov     b,#0x80
15F3 120000    4463            lcall   _SendATCommand
15F6           4464   ;        main.c:1205: SendATCommand("AT+CLSS\r\n");
15F6 9002A0    4465            mov     dptr,#__str_16
15F9 75F080    4466            mov     b,#0x80
15FC 120000    4467            lcall   _SendATCommand
15FF           4468   ;        main.c:1206: SendATCommand("AT+DVIDEF11\r\n");  
15FF 9002E0    4469            mov     dptr,#__str_17
1602 75F080    4470            mov     b,#0x80
1605 120000    4471            lcall   _SendATCommand
1608           4472   ;        main.c:1209: L_bridge_1 = 0; 
1608 C2A1      4473            clr     _P2_1
160A           4474   ;        main.c:1210: L_bridge_2 = 0; 
160A C2A2      4475            clr     _P2_2
160C           4476   ;        main.c:1211: R_bridge_1 = 0; 
160C C2A4      4477            clr     _P2_4
160E           4478   ;        main.c:1212: R_bridge_2 = 0; 
160E C2A3      4479            clr     _P2_3
1610           4480   ;        main.c:1216: waitms(1000);
1610 9003E8    4481            mov     dptr,#0x03E8
1613 120000    4482            lcall   _waitms
1616           4483   ;        main.c:1217: servo_pick();
1616 120000    4484            lcall   _servo_pick
1619           4485   ;        main.c:1218: while(1)
1619           4486   L032016?:
1619           4487   ;        main.c:1224: if(pick_char=='1'){
1619 7431      4488            mov     a,#0x31
161B B5D060    4489            cjne    a,_main_pick_char_1_194,L032002?
161E           4490   ;        main.c:1225: servo_pick();
161E 120000    4491            lcall   _servo_pick
1621           4492   ;        main.c:1226: waitms(1000);
1621 9003E8    4493            mov     dptr,#0x03E8
1624 120000    4494            lcall   _waitms
1627           4495   ;        main.c:1227: pick_char = '0';
1627 75D030    4496            mov     _main_pick_char_1_194,#0x30
162A           4497   L032002?:
162A           4498   ;        main.c:1230: if(auto_mode){
162A 90C7A0    4499            mov     dptr,#_main_auto_mode_1_194
162D E0        4500            movx    a,@dptr
162E FA        4501            mov     r2,a
162F A3        4502            inc     dptr
1630 E0        4503            movx    a,@dptr
1631 FB        4504            mov     r3,a
1632 4A        4505            orl     a,r2
1633 6000      4506            jz      L032004?
1635           4507   ;        main.c:1231: Auto_mode_slave();
1635 120000    4508            lcall   _Auto_mode_slave
1638           4509   ;        main.c:1232: auto_mode = 0;
1638 90C7A0    4510            mov     dptr,#_main_auto_mode_1_194
163B E4        4511            clr     a
163C F0        4512            movx    @dptr,a
163D A3        4513            inc     dptr
163E F0        4514            movx    @dptr,a
163F           4515   L032004?:
163F           4516   ;        main.c:1235: if(RXU1()) // Something has arrived
163F 120000    4517            lcall   _RXU1
1642 5000      4518            jnc     L032016?
1644           4519   ;        main.c:1237: c=getchar1();
1644 120000    4520            lcall   _getchar1
1647 AA82      4521            mov     r2,dpl
1649           4522   ;        main.c:1238: if(c=='!') // Master is sending message
1649 BA21E0    4523            cjne    r2,#0x21,L032031?
164C 8000      4524            sjmp    L032032?
164E           4525   L032031?:
164E 020000    4526            ljmp    L032011?
1651           4527   L032032?:
1651           4528   ;        main.c:1240: getstr1(buff, sizeof(buff)-1);
1651 754013    4529            mov     _getstr1_PARM_2,#0x13
1654 9051B0    4530            mov     dptr,#_buff
1657 75F040    4531            mov     b,#0x40
165A 120000    4532            lcall   _getstr1
165D           4533   ;        main.c:1241: if(strlen(buff)==11)
165D 9051B0    4534            mov     dptr,#_buff
1660 75F040    4535            mov     b,#0x40
1663 120000    4536            lcall   _strlen
1666 AB82      4537            mov     r3,dpl
1668 AC83      4538            mov     r4,dph
166A BB0BA0    4539            cjne    r3,#0x0B,L032033?
166D BC00A0    4540            cjne    r4,#0x00,L032033?
1670 8000      4541            sjmp    L032034?
1672           4542   L032033?:
1672 020000    4543            ljmp    L032006?
1675           4544   L032034?:
1675           4545   ;        main.c:1243: printf("Master says: %s\r\n", buff);
1675 74B0      4546            mov     a,#_buff
1677 C0E0      4547            push    acc
1679 7451      4548            mov     a,#(_buff >> 8)
167B C0E0      4549            push    acc
167D 7440      4550            mov     a,#0x40
167F C0E0      4551            push    acc
1681 7460      4552            mov     a,#__str_18
1683 C0E0      4553            push    acc
1685 7405      4554            mov     a,#(__str_18 >> 8)
1687 C0E0      4555            push    acc
1689 7480      4556            mov     a,#0x80
168B C0E0      4557            push    acc
168D 120000    4558            lcall   _printf
1690 E581      4559            mov     a,sp
1692 24FA      4560            add     a,#0xfa
1694 F581      4561            mov     sp,a
1696           4562   ;        main.c:1244: sscanf(buff, "%03d,%03d,%c,%01d", &vx, &vy, &pick_char, &auto_mode);
1696 74A0      4563            mov     a,#_main_auto_mode_1_194
1698 C0E0      4564            push    acc
169A 74C7      4565            mov     a,#(_main_auto_mode_1_194 >> 8)
169C C0E0      4566            push    acc
169E E4        4567            clr     a
169F C0E0      4568            push    acc
16A1 74D0      4569            mov     a,#_main_pick_char_1_194
16A3 C0E0      4570            push    acc
16A5 74C4      4571            mov     a,#(_main_pick_char_1_194 >> 8)
16A7 C0E0      4572            push    acc
16A9 7440      4573            mov     a,#0x40
16AB C0E0      4574            push    acc
16AD 7450      4575            mov     a,#_main_vy_1_194
16AF C0E0      4576            push    acc
16B1 74C7      4577            mov     a,#(_main_vy_1_194 >> 8)
16B3 C0E0      4578            push    acc
16B5 E4        4579            clr     a
16B6 C0E0      4580            push    acc
16B8 7410      4581            mov     a,#_main_vx_1_194
16BA C0E0      4582            push    acc
16BC 74C7      4583            mov     a,#(_main_vx_1_194 >> 8)
16BE C0E0      4584            push    acc
16C0 E4        4585            clr     a
16C1 C0E0      4586            push    acc
16C3 74A0      4587            mov     a,#__str_19
16C5 C0E0      4588            push    acc
16C7 7405      4589            mov     a,#(__str_19 >> 8)
16C9 C0E0      4590            push    acc
16CB 7480      4591            mov     a,#0x80
16CD C0E0      4592            push    acc
16CF 74B0      4593            mov     a,#_buff
16D1 C0E0      4594            push    acc
16D3 7451      4595            mov     a,#(_buff >> 8)
16D5 C0E0      4596            push    acc
16D7 7440      4597            mov     a,#0x40
16D9 C0E0      4598            push    acc
16DB 120000    4599            lcall   _sscanf
16DE E581      4600            mov     a,sp
16E0 24EE      4601            add     a,#0xee
16E2 F581      4602            mov     sp,a
16E4           4603   ;        main.c:1245: printf("Joystick Received: Vx = %d, Vy = %d, Order = %c, Auto = %d\r\n", vx, vy, pick_char, auto_mode);
16E4 E5D0      4604            mov     a,_main_pick_char_1_194
16E6 FB        4605            mov     r3,a
16E7 33        4606            rlc     a
16E8 95E0      4607            subb    a,acc
16EA FC        4608            mov     r4,a
16EB 90C7A0    4609            mov     dptr,#_main_auto_mode_1_194
16EE E0        4610            movx    a,@dptr
16EF C0E0      4611            push    acc
16F1 A3        4612            inc     dptr
16F2 E0        4613            movx    a,@dptr
16F3 C0E0      4614            push    acc
16F5 C003      4615            push    ar3
16F7 C004      4616            push    ar4
16F9 90C750    4617            mov     dptr,#_main_vy_1_194
16FC E0        4618            movx    a,@dptr
16FD C0E0      4619            push    acc
16FF A3        4620            inc     dptr
1700 E0        4621            movx    a,@dptr
1701 C0E0      4622            push    acc
1703 90C710    4623            mov     dptr,#_main_vx_1_194
1706 E0        4624            movx    a,@dptr
1707 C0E0      4625            push    acc
1709 A3        4626            inc     dptr
170A E0        4627            movx    a,@dptr
170B C0E0      4628            push    acc
170D 74E0      4629            mov     a,#__str_20
170F C0E0      4630            push    acc
1711 7405      4631            mov     a,#(__str_20 >> 8)
1713 C0E0      4632            push    acc
1715 7480      4633            mov     a,#0x80
1717 C0E0      4634            push    acc
1719 120000    4635            lcall   _printf
171C E581      4636            mov     a,sp
171E 24F5      4637            add     a,#0xf5
1720 F581      4638            mov     sp,a
1722           4639   ;        main.c:1246: curr_angle = Joystick_Control(&vx, &vy);
1722 750050    4640            mov     _Joystick_Control_PARM_2,#_main_vy_1_194
1725 7501C7    4641            mov     (_Joystick_Control_PARM_2 + 1),#(_main_vy_1_194 >> 8)
1728 750200    4642            mov     (_Joystick_Control_PARM_2 + 2),#0x00
172B 90C710    4643            mov     dptr,#_main_vx_1_194
172E 75F000    4644            mov     b,#0x00
1731 120000    4645            lcall   _Joystick_Control
1734 AB82      4646            mov     r3,dpl
1736 AC83      4647            mov     r4,dph
1738 ADF0      4648            mov     r5,b
173A FE        4649            mov     r6,a
173B 9049A0    4650            mov     dptr,#_curr_angle
173E EB        4651            mov     a,r3
173F F0        4652            movx    @dptr,a
1740 A3        4653            inc     dptr
1741 EC        4654            mov     a,r4
1742 F0        4655            movx    @dptr,a
1743 A3        4656            inc     dptr
1744 ED        4657            mov     a,r5
1745 F0        4658            movx    @dptr,a
1746 A3        4659            inc     dptr
1747 EE        4660            mov     a,r6
1748 F0        4661            movx    @dptr,a
1749 020000    4662            ljmp    L032016?
174C           4663   L032006?:
174C           4664   ;        main.c:1249: printf("*** BAD MESSAGE ***: %s\r\n", buff);
174C 74B0      4665            mov     a,#_buff
174E C0E0      4666            push    acc
1750 7451      4667            mov     a,#(_buff >> 8)
1752 C0E0      4668            push    acc
1754 7440      4669            mov     a,#0x40
1756 C0E0      4670            push    acc
1758 7420      4671            mov     a,#__str_21
175A C0E0      4672            push    acc
175C 7406      4673            mov     a,#(__str_21 >> 8)
175E C0E0      4674            push    acc
1760 7480      4675            mov     a,#0x80
1762 C0E0      4676            push    acc
1764 120000    4677            lcall   _printf
1767 E581      4678            mov     a,sp
1769 24FA      4679            add     a,#0xfa
176B F581      4680            mov     sp,a
176D 020000    4681            ljmp    L032016?
1770           4682   L032011?:
1770           4683   ;        main.c:1252: else if(c=='@') // Master wants slave data
1770 BA4060    4684            cjne    r2,#0x40,L032035?
1773 8000      4685            sjmp    L032036?
1775           4686   L032035?:
1775 020000    4687            ljmp    L032016?
1778           4688   L032036?:
1778           4689   ;        main.c:1254: sprintf(buff, "0,00,%04ld,%05d,%03d\n", freq100, weight, (int)curr_angle);
1778 9049A0    4690            mov     dptr,#_curr_angle
177B E0        4691            movx    a,@dptr
177C FA        4692            mov     r2,a
177D A3        4693            inc     dptr
177E E0        4694            movx    a,@dptr
177F FB        4695            mov     r3,a
1780 A3        4696            inc     dptr
1781 E0        4697            movx    a,@dptr
1782 FC        4698            mov     r4,a
1783 A3        4699            inc     dptr
1784 E0        4700            movx    a,@dptr
1785 8A82      4701            mov     dpl,r2
1787 8B83      4702            mov     dph,r3
1789 8CF0      4703            mov     b,r4
178B 120000    4704            lcall   ___fs2sint
178E AA82      4705            mov     r2,dpl
1790 AB83      4706            mov     r3,dph
1792 C002      4707            push    ar2
1794 C003      4708            push    ar3
1796 904860    4709            mov     dptr,#_weight
1799 E0        4710            movx    a,@dptr
179A C0E0      4711            push    acc
179C A3        4712            inc     dptr
179D E0        4713            movx    a,@dptr
179E C0E0      4714            push    acc
17A0 905170    4715            mov     dptr,#_freq100
17A3 E0        4716            movx    a,@dptr
17A4 C0E0      4717            push    acc
17A6 A3        4718            inc     dptr
17A7 E0        4719            movx    a,@dptr
17A8 C0E0      4720            push    acc
17AA A3        4721            inc     dptr
17AB E0        4722            movx    a,@dptr
17AC C0E0      4723            push    acc
17AE A3        4724            inc     dptr
17AF E0        4725            movx    a,@dptr
17B0 C0E0      4726            push    acc
17B2 74E0      4727            mov     a,#__str_22
17B4 C0E0      4728            push    acc
17B6 7406      4729            mov     a,#(__str_22 >> 8)
17B8 C0E0      4730            push    acc
17BA 7480      4731            mov     a,#0x80
17BC C0E0      4732            push    acc
17BE 74B0      4733            mov     a,#_buff
17C0 C0E0      4734            push    acc
17C2 7451      4735            mov     a,#(_buff >> 8)
17C4 C0E0      4736            push    acc
17C6 7440      4737            mov     a,#0x40
17C8 C0E0      4738            push    acc
17CA 120000    4739            lcall   _sprintf
17CD E581      4740            mov     a,sp
17CF 24F2      4741            add     a,#0xf2
17D1 F581      4742            mov     sp,a
17D3           4743   ;        main.c:1255: printf("%s\r\n",buff);
17D3 74B0      4744            mov     a,#_buff
17D5 C0E0      4745            push    acc
17D7 7451      4746            mov     a,#(_buff >> 8)
17D9 C0E0      4747            push    acc
17DB 7440      4748            mov     a,#0x40
17DD C0E0      4749            push    acc
17DF 7420      4750            mov     a,#__str_23
17E1 C0E0      4751            push    acc
17E3 7407      4752            mov     a,#(__str_23 >> 8)
17E5 C0E0      4753            push    acc
17E7 7480      4754            mov     a,#0x80
17E9 C0E0      4755            push    acc
17EB 120000    4756            lcall   _printf
17EE E581      4757            mov     a,sp
17F0 24FA      4758            add     a,#0xfa
17F2 F581      4759            mov     sp,a
17F4           4760   ;        main.c:1256: waitms(5); // The radio seems to need this delay...
17F4 900005    4761            mov     dptr,#0x0005
17F7 120000    4762            lcall   _waitms
17FA           4763   ;        main.c:1257: sendstr1(buff);
17FA 9051B0    4764            mov     dptr,#_buff
17FD 75F040    4765            mov     b,#0x40
1800 120000    4766            lcall   _sendstr1
1803 020000    4767            ljmp    L032016?
1806           4768            rseg R_CSEG
1806           4769   
0000           4770            rseg R_XINIT
0000           4771   __xinit__pwm_counter:
0000 0000      4772            db 0x00,0x00    ; 0
0002           4773   __xinit__servo_counter:
0002 0000      4774            db 0x00,0x00    ; 0
0004           4775   __xinit__pwm_left:
0004 00        4776            db 0x00         ; 0
0005           4777   __xinit__pwm_right:
0005 00        4778            db 0x00         ; 0
0006           4779   __xinit__L_motor_dir:
0006 01        4780            db 0x01         ; 1
0007           4781   __xinit__R_motor_dir:
0007 01        4782            db 0x01         ; 1
0008           4783   __xinit__servo_base:
0008 01        4784            db 0x01         ; 1
0009           4785   __xinit__servo_arm:
0009 01        4786            db 0x01         ; 1
000A           4787   __xinit__vx_thres:
000A A100      4788            db 0xA1,0x00    ;  161
000C           4789   __xinit__vy_thres:
000C A600      4790            db 0xA6,0x00    ;  166
000E           4791   __xinit__vx:
000E 0000      4792            db 0x00,0x00    ;  0
0010           4793   __xinit__vy:
0010 0000      4794            db 0x00,0x00    ;  0
0012           4795   __xinit__fre_mea_count:
0012 0000      4796            db 0x00,0x00    ; 0
0014           4797   __xinit__weight_mea_count:
0014 0000      4798            db 0x00,0x00    ; 0
0016           4799   __xinit__seed:
0016 3930      4800            db 0x39,0x30    ; 12345
0018           4801   __xinit__pwm_corr:
0018 3333733F  4802            db 0x33,0x33,0x73,0x3F  ;  9.500000e-001
001C           4803   __xinit__curr_angle:
001C 00000000  4804            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0020           4805   __xinit__raw_angle:
0020 00000000  4806            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0024           4807   __xinit__last_raw_angle:
0024 00000000  4808            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0028           4809   __xinit__angle_diff:
0028 00000000  4810            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
002C           4811   __xinit__mea_yes:
002C 01        4812            db 0x01         ;  1
002D           4813   __xinit__weight:
002D 0000      4814            db 0x00,0x00    ; 0
002F           4815   
0000           4816            rseg R_CONST
0000           4817   __str_0:
0000 436F6D6D  4818            db 'Command: %s'
     616E643A
     202573
000B 00        4819            db 0x00
000C           4820   __str_1:
000C 52657370  4821            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        4822            db 0x0D
0019 0A        4823            db 0x0A
001A 00        4824            db 0x00
001B           4825   __str_2:
001B 41542B44  4826            db 'AT+DVID0000'
     56494430
     303030
0026 0D        4827            db 0x0D
0027 0A        4828            db 0x0A
0028 00        4829            db 0x00
0029           4830   __str_3:
0029 4D61676E  4831            db 'Magnet on'
     6574206F
     6E
0032 0D        4832            db 0x0D
0033 0A        4833            db 0x0A
0034 00        4834            db 0x00
0035           4835   __str_4:
0035 4D61676E  4836            db 'Magnet delay done'
     65742064
     656C6179
     20646F6E
     65
0046 0D        4837            db 0x0D
0047 0A        4838            db 0x0A
0048 00        4839            db 0x00
0049           4840   __str_5:
0049 6D617374  4841            db 'master_messgae_auto_mode: %s'
     65725F6D
     65737367
     61655F61
     75746F5F
     6D6F6465
     3A202573
0065 0D        4842            db 0x0D
0066 0A        4843            db 0x0A
0067 00        4844            db 0x00
0068           4845   __str_6:
0068 25303364  4846            db '%03d,%03d,%01d,%01d'
     2C253033
     642C2530
     31642C25
     303164
007B 00        4847            db 0x00
007C           4848   __str_7:
007C 25303164  4849            db '%01d,%02d,%ld,%05d,%03d'
     2C253032
     642C256C
     642C2530
     35642C25
     303364
0093 0A        4850            db 0x0A
0094 00        4851            db 0x00
0095           4852   __str_8:
0095 663A2530  4853            db 'f:%04ld, d1:%d, d2:%d, bound_dectect: %d'
     346C642C
     2064313A
     25642C20
     64323A25
     642C2062
     6F756E64
     5F646563
     74656374
     3A202564
00BD 0D        4854            db 0x0D
00BE 0A        4855            db 0x0A
00BF 00        4856            db 0x00
00C0           4857   __str_9:
00C0 0D        4858            db 0x0D
00C1 0A        4859            db 0x0A
00C2 45464D38  4860            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
00DD 0D        4861            db 0x0D
00DE 0A        4862            db 0x0A
00DF 00        4863            db 0x00
00E0           4864   __str_10:
00E0 41542B56  4865            db 'AT+VER'
     4552
00E6 0D        4866            db 0x0D
00E7 0A        4867            db 0x0A
00E8 00        4868            db 0x00
00E9           4869   __str_11:
00E9 41542B42  4870            db 'AT+BAUD'
     415544
00F0 0D        4871            db 0x0D
00F1 0A        4872            db 0x0A
00F2 00        4873            db 0x00
00F3           4874   __str_12:
00F3 41542B52  4875            db 'AT+RFID'
     464944
00FA 0D        4876            db 0x0D
00FB 0A        4877            db 0x0A
00FC 00        4878            db 0x00
00FD           4879   __str_13:
00FD 41542B44  4880            db 'AT+DVID'
     564944
0104 0D        4881            db 0x0D
0105 0A        4882            db 0x0A
0106 00        4883            db 0x00
0107           4884   __str_14:
0107 41542B52  4885            db 'AT+RFC002'
     46433030
     32
0110 0D        4886            db 0x0D
0111 0A        4887            db 0x0A
0112 00        4888            db 0x00
0113           4889   __str_15:
0113 41542B50  4890            db 'AT+POWE'
     4F5745
011A 0D        4891            db 0x0D
011B 0A        4892            db 0x0A
011C 00        4893            db 0x00
011D           4894   __str_16:
011D 41542B43  4895            db 'AT+CLSS'
     4C5353
0124 0D        4896            db 0x0D
0125 0A        4897            db 0x0A
0126 00        4898            db 0x00
0127           4899   __str_17:
0127 41542B44  4900            db 'AT+DVIDEF11'
     56494445
     463131
0132 0D        4901            db 0x0D
0133 0A        4902            db 0x0A
0134 00        4903            db 0x00
0135           4904   __str_18:
0135 4D617374  4905            db 'Master says: %s'
     65722073
     6179733A
     202573
0144 0D        4906            db 0x0D
0145 0A        4907            db 0x0A
0146 00        4908            db 0x00
0147           4909   __str_19:
0147 25303364  4910            db '%03d,%03d,%c,%01d'
     2C253033
     642C2563
     2C253031
     64
0158 00        4911            db 0x00
0159           4912   __str_20:
0159 4A6F7973  4913            db 'Joystick Received: Vx = %d, Vy = %d, Order = %c, Auto = %d'
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25642C20
     5679203D
     2025642C
     204F7264
     6572203D
     2025632C
     20417574
     6F203D20
     2564
0193 0D        4914            db 0x0D
0194 0A        4915            db 0x0A
0195 00        4916            db 0x00
0196           4917   __str_21:
0196 2A2A2A20  4918            db '*** BAD MESSAGE ***: %s'
     42414420
     4D455353
     41474520
     2A2A2A3A
     202573
01AD 0D        4919            db 0x0D
01AE 0A        4920            db 0x0A
01AF 00        4921            db 0x00
01B0           4922   __str_22:
01B0 302C3030  4923            db '0,00,%04ld,%05d,%03d'
     2C253034
     6C642C25
     3035642C
     25303364
01C4 0A        4924            db 0x0A
01C5 00        4925            db 0x00
01C6           4926   __str_23:
01C6 2573      4927            db '%s'
01C8 0D        4928            db 0x0D
01C9 0A        4929            db 0x0A
01CA 00        4930            db 0x00
01CB           4931   
0096           4932            CSEG
0096           4933   
0096           4934   end
