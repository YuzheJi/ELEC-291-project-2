0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Mar 27 15:47:27 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _check_bound_PARM_2
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Auto_mode_slave
0000             30            public _get_random_90_250
0000             31            public _simple_rand
0000             32            public _Move_forward
0000             33            public _Right_angle
0000             34            public _Move_back_ms
0000             35            public _Init_all
0000             36            public _check_bound
0000             37            public _servo_pick
0000             38            public _Timer5_ISR
0000             39            public _ADC_at_Pin
0000             40            public _InitPinADC
0000             41            public _InitADC
0000             42            public _Set_Pin_Input
0000             43            public _Set_Pin_Output
0000             44            public _ReceptionOff
0000             45            public _SendATCommand
0000             46            public _waitms_or_RI1
0000             47            public _RXU1
0000             48            public _getstr1
0000             49            public _getchar1_with_timeout
0000             50            public _getchar1
0000             51            public _sendstr1
0000             52            public _putchar1
0000             53            public _UART1_Init
0000             54            public _waitms
0000             55            public _Timer3us
0000             56            public __c51_external_startup
0000             57            public _buff
0000             58            public _getstr1_PARM_2
0000             59            public _pwm_corr
0000             60            public _seed
0000             61            public _d2
0000             62            public _d1
0000             63            public _fre_mea_count
0000             64            public _freq100
0000             65            public _vy
0000             66            public _vx
0000             67            public _vy_thres
0000             68            public _vx_thres
0000             69            public _servo_arm
0000             70            public _servo_base
0000             71            public _R_motor_dir
0000             72            public _L_motor_dir
0000             73            public _pwm_right
0000             74            public _pwm_left
0000             75            public _servo_counter
0000             76            public _pwm_counter
0000             77   ;--------------------------------------------------------
0000             78   ; Special Function Registers
0000             79   ;--------------------------------------------------------
0000             80   _ACC            DATA 0xe0
0000             81   _ADC0ASAH       DATA 0xb6
0000             82   _ADC0ASAL       DATA 0xb5
0000             83   _ADC0ASCF       DATA 0xa1
0000             84   _ADC0ASCT       DATA 0xc7
0000             85   _ADC0CF0        DATA 0xbc
0000             86   _ADC0CF1        DATA 0xb9
0000             87   _ADC0CF2        DATA 0xdf
0000             88   _ADC0CN0        DATA 0xe8
0000             89   _ADC0CN1        DATA 0xb2
0000             90   _ADC0CN2        DATA 0xb3
0000             91   _ADC0GTH        DATA 0xc4
0000             92   _ADC0GTL        DATA 0xc3
0000             93   _ADC0H          DATA 0xbe
0000             94   _ADC0L          DATA 0xbd
0000             95   _ADC0LTH        DATA 0xc6
0000             96   _ADC0LTL        DATA 0xc5
0000             97   _ADC0MX         DATA 0xbb
0000             98   _B              DATA 0xf0
0000             99   _CKCON0         DATA 0x8e
0000            100   _CKCON1         DATA 0xa6
0000            101   _CLEN0          DATA 0xc6
0000            102   _CLIE0          DATA 0xc7
0000            103   _CLIF0          DATA 0xe8
0000            104   _CLKSEL         DATA 0xa9
0000            105   _CLOUT0         DATA 0xd1
0000            106   _CLU0CF         DATA 0xb1
0000            107   _CLU0FN         DATA 0xaf
0000            108   _CLU0MX         DATA 0x84
0000            109   _CLU1CF         DATA 0xb3
0000            110   _CLU1FN         DATA 0xb2
0000            111   _CLU1MX         DATA 0x85
0000            112   _CLU2CF         DATA 0xb6
0000            113   _CLU2FN         DATA 0xb5
0000            114   _CLU2MX         DATA 0x91
0000            115   _CLU3CF         DATA 0xbf
0000            116   _CLU3FN         DATA 0xbe
0000            117   _CLU3MX         DATA 0xae
0000            118   _CMP0CN0        DATA 0x9b
0000            119   _CMP0CN1        DATA 0x99
0000            120   _CMP0MD         DATA 0x9d
0000            121   _CMP0MX         DATA 0x9f
0000            122   _CMP1CN0        DATA 0xbf
0000            123   _CMP1CN1        DATA 0xac
0000            124   _CMP1MD         DATA 0xab
0000            125   _CMP1MX         DATA 0xaa
0000            126   _CRC0CN0        DATA 0xce
0000            127   _CRC0CN1        DATA 0x86
0000            128   _CRC0CNT        DATA 0xd3
0000            129   _CRC0DAT        DATA 0xcb
0000            130   _CRC0FLIP       DATA 0xcf
0000            131   _CRC0IN         DATA 0xca
0000            132   _CRC0ST         DATA 0xd2
0000            133   _DAC0CF0        DATA 0x91
0000            134   _DAC0CF1        DATA 0x92
0000            135   _DAC0H          DATA 0x85
0000            136   _DAC0L          DATA 0x84
0000            137   _DAC1CF0        DATA 0x93
0000            138   _DAC1CF1        DATA 0x94
0000            139   _DAC1H          DATA 0x8a
0000            140   _DAC1L          DATA 0x89
0000            141   _DAC2CF0        DATA 0x95
0000            142   _DAC2CF1        DATA 0x96
0000            143   _DAC2H          DATA 0x8c
0000            144   _DAC2L          DATA 0x8b
0000            145   _DAC3CF0        DATA 0x9a
0000            146   _DAC3CF1        DATA 0x9c
0000            147   _DAC3H          DATA 0x8e
0000            148   _DAC3L          DATA 0x8d
0000            149   _DACGCF0        DATA 0x88
0000            150   _DACGCF1        DATA 0x98
0000            151   _DACGCF2        DATA 0xa2
0000            152   _DERIVID        DATA 0xad
0000            153   _DEVICEID       DATA 0xb5
0000            154   _DPH            DATA 0x83
0000            155   _DPL            DATA 0x82
0000            156   _EIE1           DATA 0xe6
0000            157   _EIE2           DATA 0xf3
0000            158   _EIP1           DATA 0xbb
0000            159   _EIP1H          DATA 0xee
0000            160   _EIP2           DATA 0xed
0000            161   _EIP2H          DATA 0xf6
0000            162   _EMI0CN         DATA 0xe7
0000            163   _FLKEY          DATA 0xb7
0000            164   _HFO0CAL        DATA 0xc7
0000            165   _HFO1CAL        DATA 0xd6
0000            166   _HFOCN          DATA 0xef
0000            167   _I2C0ADM        DATA 0xff
0000            168   _I2C0CN0        DATA 0xba
0000            169   _I2C0DIN        DATA 0xbc
0000            170   _I2C0DOUT       DATA 0xbb
0000            171   _I2C0FCN0       DATA 0xad
0000            172   _I2C0FCN1       DATA 0xab
0000            173   _I2C0FCT        DATA 0xf5
0000            174   _I2C0SLAD       DATA 0xbd
0000            175   _I2C0STAT       DATA 0xb9
0000            176   _IE             DATA 0xa8
0000            177   _IP             DATA 0xb8
0000            178   _IPH            DATA 0xf2
0000            179   _IT01CF         DATA 0xe4
0000            180   _LFO0CN         DATA 0xb1
0000            181   _P0             DATA 0x80
0000            182   _P0MASK         DATA 0xfe
0000            183   _P0MAT          DATA 0xfd
0000            184   _P0MDIN         DATA 0xf1
0000            185   _P0MDOUT        DATA 0xa4
0000            186   _P0SKIP         DATA 0xd4
0000            187   _P1             DATA 0x90
0000            188   _P1MASK         DATA 0xee
0000            189   _P1MAT          DATA 0xed
0000            190   _P1MDIN         DATA 0xf2
0000            191   _P1MDOUT        DATA 0xa5
0000            192   _P1SKIP         DATA 0xd5
0000            193   _P2             DATA 0xa0
0000            194   _P2MASK         DATA 0xfc
0000            195   _P2MAT          DATA 0xfb
0000            196   _P2MDIN         DATA 0xf3
0000            197   _P2MDOUT        DATA 0xa6
0000            198   _P2SKIP         DATA 0xcc
0000            199   _P3             DATA 0xb0
0000            200   _P3MDIN         DATA 0xf4
0000            201   _P3MDOUT        DATA 0x9c
0000            202   _PCA0CENT       DATA 0x9e
0000            203   _PCA0CLR        DATA 0x9c
0000            204   _PCA0CN0        DATA 0xd8
0000            205   _PCA0CPH0       DATA 0xfc
0000            206   _PCA0CPH1       DATA 0xea
0000            207   _PCA0CPH2       DATA 0xec
0000            208   _PCA0CPH3       DATA 0xf5
0000            209   _PCA0CPH4       DATA 0x85
0000            210   _PCA0CPH5       DATA 0xde
0000            211   _PCA0CPL0       DATA 0xfb
0000            212   _PCA0CPL1       DATA 0xe9
0000            213   _PCA0CPL2       DATA 0xeb
0000            214   _PCA0CPL3       DATA 0xf4
0000            215   _PCA0CPL4       DATA 0x84
0000            216   _PCA0CPL5       DATA 0xdd
0000            217   _PCA0CPM0       DATA 0xda
0000            218   _PCA0CPM1       DATA 0xdb
0000            219   _PCA0CPM2       DATA 0xdc
0000            220   _PCA0CPM3       DATA 0xae
0000            221   _PCA0CPM4       DATA 0xaf
0000            222   _PCA0CPM5       DATA 0xcc
0000            223   _PCA0H          DATA 0xfa
0000            224   _PCA0L          DATA 0xf9
0000            225   _PCA0MD         DATA 0xd9
0000            226   _PCA0POL        DATA 0x96
0000            227   _PCA0PWM        DATA 0xf7
0000            228   _PCON0          DATA 0x87
0000            229   _PCON1          DATA 0xcd
0000            230   _PFE0CN         DATA 0xc1
0000            231   _PRTDRV         DATA 0xf6
0000            232   _PSCTL          DATA 0x8f
0000            233   _PSTAT0         DATA 0xaa
0000            234   _PSW            DATA 0xd0
0000            235   _REF0CN         DATA 0xd1
0000            236   _REG0CN         DATA 0xc9
0000            237   _REVID          DATA 0xb6
0000            238   _RSTSRC         DATA 0xef
0000            239   _SBCON1         DATA 0x94
0000            240   _SBRLH1         DATA 0x96
0000            241   _SBRLL1         DATA 0x95
0000            242   _SBUF           DATA 0x99
0000            243   _SBUF0          DATA 0x99
0000            244   _SBUF1          DATA 0x92
0000            245   _SCON           DATA 0x98
0000            246   _SCON0          DATA 0x98
0000            247   _SCON1          DATA 0xc8
0000            248   _SFRPAGE        DATA 0xa7
0000            249   _SFRPGCN        DATA 0xbc
0000            250   _SFRSTACK       DATA 0xd7
0000            251   _SMB0ADM        DATA 0xd6
0000            252   _SMB0ADR        DATA 0xd7
0000            253   _SMB0CF         DATA 0xc1
0000            254   _SMB0CN0        DATA 0xc0
0000            255   _SMB0DAT        DATA 0xc2
0000            256   _SMB0FCN0       DATA 0xc3
0000            257   _SMB0FCN1       DATA 0xc4
0000            258   _SMB0FCT        DATA 0xef
0000            259   _SMB0RXLN       DATA 0xc5
0000            260   _SMB0TC         DATA 0xac
0000            261   _SMOD1          DATA 0x93
0000            262   _SP             DATA 0x81
0000            263   _SPI0CFG        DATA 0xa1
0000            264   _SPI0CKR        DATA 0xa2
0000            265   _SPI0CN0        DATA 0xf8
0000            266   _SPI0DAT        DATA 0xa3
0000            267   _SPI0FCN0       DATA 0x9a
0000            268   _SPI0FCN1       DATA 0x9b
0000            269   _SPI0FCT        DATA 0xf7
0000            270   _SPI0PCF        DATA 0xdf
0000            271   _TCON           DATA 0x88
0000            272   _TH0            DATA 0x8c
0000            273   _TH1            DATA 0x8d
0000            274   _TL0            DATA 0x8a
0000            275   _TL1            DATA 0x8b
0000            276   _TMOD           DATA 0x89
0000            277   _TMR2CN0        DATA 0xc8
0000            278   _TMR2CN1        DATA 0xfd
0000            279   _TMR2H          DATA 0xcf
0000            280   _TMR2L          DATA 0xce
0000            281   _TMR2RLH        DATA 0xcb
0000            282   _TMR2RLL        DATA 0xca
0000            283   _TMR3CN0        DATA 0x91
0000            284   _TMR3CN1        DATA 0xfe
0000            285   _TMR3H          DATA 0x95
0000            286   _TMR3L          DATA 0x94
0000            287   _TMR3RLH        DATA 0x93
0000            288   _TMR3RLL        DATA 0x92
0000            289   _TMR4CN0        DATA 0x98
0000            290   _TMR4CN1        DATA 0xff
0000            291   _TMR4H          DATA 0xa5
0000            292   _TMR4L          DATA 0xa4
0000            293   _TMR4RLH        DATA 0xa3
0000            294   _TMR4RLL        DATA 0xa2
0000            295   _TMR5CN0        DATA 0xc0
0000            296   _TMR5CN1        DATA 0xf1
0000            297   _TMR5H          DATA 0xd5
0000            298   _TMR5L          DATA 0xd4
0000            299   _TMR5RLH        DATA 0xd3
0000            300   _TMR5RLL        DATA 0xd2
0000            301   _UART0PCF       DATA 0xd9
0000            302   _UART1FCN0      DATA 0x9d
0000            303   _UART1FCN1      DATA 0xd8
0000            304   _UART1FCT       DATA 0xfa
0000            305   _UART1LIN       DATA 0x9e
0000            306   _UART1PCF       DATA 0xda
0000            307   _VDM0CN         DATA 0xff
0000            308   _WDTCN          DATA 0x97
0000            309   _XBR0           DATA 0xe1
0000            310   _XBR1           DATA 0xe2
0000            311   _XBR2           DATA 0xe3
0000            312   _XOSC0CN        DATA 0x86
0000            313   _DPTR           DATA 0x8382
0000            314   _TMR2RL         DATA 0xcbca
0000            315   _TMR3RL         DATA 0x9392
0000            316   _TMR4RL         DATA 0xa3a2
0000            317   _TMR5RL         DATA 0xd3d2
0000            318   _TMR0           DATA 0x8c8a
0000            319   _TMR1           DATA 0x8d8b
0000            320   _TMR2           DATA 0xcfce
0000            321   _TMR3           DATA 0x9594
0000            322   _TMR4           DATA 0xa5a4
0000            323   _TMR5           DATA 0xd5d4
0000            324   _SBRL1          DATA 0x9695
0000            325   _PCA0           DATA 0xfaf9
0000            326   _PCA0CP0        DATA 0xfcfb
0000            327   _PCA0CP1        DATA 0xeae9
0000            328   _PCA0CP2        DATA 0xeceb
0000            329   _PCA0CP3        DATA 0xf5f4
0000            330   _PCA0CP4        DATA 0x8584
0000            331   _PCA0CP5        DATA 0xdedd
0000            332   _ADC0ASA        DATA 0xb6b5
0000            333   _ADC0GT         DATA 0xc4c3
0000            334   _ADC0           DATA 0xbebd
0000            335   _ADC0LT         DATA 0xc6c5
0000            336   _DAC0           DATA 0x8584
0000            337   _DAC1           DATA 0x8a89
0000            338   _DAC2           DATA 0x8c8b
0000            339   _DAC3           DATA 0x8e8d
0000            340   ;--------------------------------------------------------
0000            341   ; special function bits
0000            342   ;--------------------------------------------------------
0000            343   _ACC_0          BIT 0xe0
0000            344   _ACC_1          BIT 0xe1
0000            345   _ACC_2          BIT 0xe2
0000            346   _ACC_3          BIT 0xe3
0000            347   _ACC_4          BIT 0xe4
0000            348   _ACC_5          BIT 0xe5
0000            349   _ACC_6          BIT 0xe6
0000            350   _ACC_7          BIT 0xe7
0000            351   _TEMPE          BIT 0xe8
0000            352   _ADGN0          BIT 0xe9
0000            353   _ADGN1          BIT 0xea
0000            354   _ADWINT         BIT 0xeb
0000            355   _ADBUSY         BIT 0xec
0000            356   _ADINT          BIT 0xed
0000            357   _IPOEN          BIT 0xee
0000            358   _ADEN           BIT 0xef
0000            359   _B_0            BIT 0xf0
0000            360   _B_1            BIT 0xf1
0000            361   _B_2            BIT 0xf2
0000            362   _B_3            BIT 0xf3
0000            363   _B_4            BIT 0xf4
0000            364   _B_5            BIT 0xf5
0000            365   _B_6            BIT 0xf6
0000            366   _B_7            BIT 0xf7
0000            367   _C0FIF          BIT 0xe8
0000            368   _C0RIF          BIT 0xe9
0000            369   _C1FIF          BIT 0xea
0000            370   _C1RIF          BIT 0xeb
0000            371   _C2FIF          BIT 0xec
0000            372   _C2RIF          BIT 0xed
0000            373   _C3FIF          BIT 0xee
0000            374   _C3RIF          BIT 0xef
0000            375   _D1SRC0         BIT 0x88
0000            376   _D1SRC1         BIT 0x89
0000            377   _D1AMEN         BIT 0x8a
0000            378   _D01REFSL       BIT 0x8b
0000            379   _D3SRC0         BIT 0x8c
0000            380   _D3SRC1         BIT 0x8d
0000            381   _D3AMEN         BIT 0x8e
0000            382   _D23REFSL       BIT 0x8f
0000            383   _D0UDIS         BIT 0x98
0000            384   _D1UDIS         BIT 0x99
0000            385   _D2UDIS         BIT 0x9a
0000            386   _D3UDIS         BIT 0x9b
0000            387   _EX0            BIT 0xa8
0000            388   _ET0            BIT 0xa9
0000            389   _EX1            BIT 0xaa
0000            390   _ET1            BIT 0xab
0000            391   _ES0            BIT 0xac
0000            392   _ET2            BIT 0xad
0000            393   _ESPI0          BIT 0xae
0000            394   _EA             BIT 0xaf
0000            395   _PX0            BIT 0xb8
0000            396   _PT0            BIT 0xb9
0000            397   _PX1            BIT 0xba
0000            398   _PT1            BIT 0xbb
0000            399   _PS0            BIT 0xbc
0000            400   _PT2            BIT 0xbd
0000            401   _PSPI0          BIT 0xbe
0000            402   _P0_0           BIT 0x80
0000            403   _P0_1           BIT 0x81
0000            404   _P0_2           BIT 0x82
0000            405   _P0_3           BIT 0x83
0000            406   _P0_4           BIT 0x84
0000            407   _P0_5           BIT 0x85
0000            408   _P0_6           BIT 0x86
0000            409   _P0_7           BIT 0x87
0000            410   _P1_0           BIT 0x90
0000            411   _P1_1           BIT 0x91
0000            412   _P1_2           BIT 0x92
0000            413   _P1_3           BIT 0x93
0000            414   _P1_4           BIT 0x94
0000            415   _P1_5           BIT 0x95
0000            416   _P1_6           BIT 0x96
0000            417   _P1_7           BIT 0x97
0000            418   _P2_0           BIT 0xa0
0000            419   _P2_1           BIT 0xa1
0000            420   _P2_2           BIT 0xa2
0000            421   _P2_3           BIT 0xa3
0000            422   _P2_4           BIT 0xa4
0000            423   _P2_5           BIT 0xa5
0000            424   _P2_6           BIT 0xa6
0000            425   _P3_0           BIT 0xb0
0000            426   _P3_1           BIT 0xb1
0000            427   _P3_2           BIT 0xb2
0000            428   _P3_3           BIT 0xb3
0000            429   _P3_4           BIT 0xb4
0000            430   _P3_7           BIT 0xb7
0000            431   _CCF0           BIT 0xd8
0000            432   _CCF1           BIT 0xd9
0000            433   _CCF2           BIT 0xda
0000            434   _CCF3           BIT 0xdb
0000            435   _CCF4           BIT 0xdc
0000            436   _CCF5           BIT 0xdd
0000            437   _CR             BIT 0xde
0000            438   _CF             BIT 0xdf
0000            439   _PARITY         BIT 0xd0
0000            440   _F1             BIT 0xd1
0000            441   _OV             BIT 0xd2
0000            442   _RS0            BIT 0xd3
0000            443   _RS1            BIT 0xd4
0000            444   _F0             BIT 0xd5
0000            445   _AC             BIT 0xd6
0000            446   _CY             BIT 0xd7
0000            447   _RI             BIT 0x98
0000            448   _TI             BIT 0x99
0000            449   _RB8            BIT 0x9a
0000            450   _TB8            BIT 0x9b
0000            451   _REN            BIT 0x9c
0000            452   _CE             BIT 0x9d
0000            453   _SMODE          BIT 0x9e
0000            454   _RI1            BIT 0xc8
0000            455   _TI1            BIT 0xc9
0000            456   _RBX1           BIT 0xca
0000            457   _TBX1           BIT 0xcb
0000            458   _REN1           BIT 0xcc
0000            459   _PERR1          BIT 0xcd
0000            460   _OVR1           BIT 0xce
0000            461   _SI             BIT 0xc0
0000            462   _ACK            BIT 0xc1
0000            463   _ARBLOST        BIT 0xc2
0000            464   _ACKRQ          BIT 0xc3
0000            465   _STO            BIT 0xc4
0000            466   _STA            BIT 0xc5
0000            467   _TXMODE         BIT 0xc6
0000            468   _MASTER         BIT 0xc7
0000            469   _SPIEN          BIT 0xf8
0000            470   _TXNF           BIT 0xf9
0000            471   _NSSMD0         BIT 0xfa
0000            472   _NSSMD1         BIT 0xfb
0000            473   _RXOVRN         BIT 0xfc
0000            474   _MODF           BIT 0xfd
0000            475   _WCOL           BIT 0xfe
0000            476   _SPIF           BIT 0xff
0000            477   _IT0            BIT 0x88
0000            478   _IE0            BIT 0x89
0000            479   _IT1            BIT 0x8a
0000            480   _IE1            BIT 0x8b
0000            481   _TR0            BIT 0x8c
0000            482   _TF0            BIT 0x8d
0000            483   _TR1            BIT 0x8e
0000            484   _TF1            BIT 0x8f
0000            485   _T2XCLK0        BIT 0xc8
0000            486   _T2XCLK1        BIT 0xc9
0000            487   _TR2            BIT 0xca
0000            488   _T2SPLIT        BIT 0xcb
0000            489   _TF2CEN         BIT 0xcc
0000            490   _TF2LEN         BIT 0xcd
0000            491   _TF2L           BIT 0xce
0000            492   _TF2H           BIT 0xcf
0000            493   _T4XCLK0        BIT 0x98
0000            494   _T4XCLK1        BIT 0x99
0000            495   _TR4            BIT 0x9a
0000            496   _T4SPLIT        BIT 0x9b
0000            497   _TF4CEN         BIT 0x9c
0000            498   _TF4LEN         BIT 0x9d
0000            499   _TF4L           BIT 0x9e
0000            500   _TF4H           BIT 0x9f
0000            501   _T5XCLK0        BIT 0xc0
0000            502   _T5XCLK1        BIT 0xc1
0000            503   _TR5            BIT 0xc2
0000            504   _T5SPLIT        BIT 0xc3
0000            505   _TF5CEN         BIT 0xc4
0000            506   _TF5LEN         BIT 0xc5
0000            507   _TF5L           BIT 0xc6
0000            508   _TF5H           BIT 0xc7
0000            509   _RIE            BIT 0xd8
0000            510   _RXTO0          BIT 0xd9
0000            511   _RXTO1          BIT 0xda
0000            512   _RFRQ           BIT 0xdb
0000            513   _TIE            BIT 0xdc
0000            514   _TXHOLD         BIT 0xdd
0000            515   _TXNF1          BIT 0xde
0000            516   _TFRQ           BIT 0xdf
0000            517   ;--------------------------------------------------------
0000            518   ; overlayable register banks
0000            519   ;--------------------------------------------------------
0000            520            rbank0 segment data overlay
0000            521   ;--------------------------------------------------------
0000            522   ; overlayable bit register bank
0000            523   ;--------------------------------------------------------
0000            524            rseg BIT_BANK
0000            525   bits:
0000            526            ds 1
0001            527            b0 equ  bits.0 
0001            528            b1 equ  bits.1 
0001            529            b2 equ  bits.2 
0001            530            b3 equ  bits.3 
0001            531            b4 equ  bits.4 
0001            532            b5 equ  bits.5 
0001            533            b6 equ  bits.6 
0001            534            b7 equ  bits.7 
0001            535   ;--------------------------------------------------------
0001            536   ; internal ram data
0001            537   ;--------------------------------------------------------
0000            538            rseg R_DSEG
0000            539   _pwm_counter:
0000            540            ds 2
0002            541   _servo_counter:
0002            542            ds 2
0004            543   _pwm_left:
0004            544            ds 1
0005            545   _pwm_right:
0005            546            ds 1
0006            547   _L_motor_dir:
0006            548            ds 1
0007            549   _R_motor_dir:
0007            550            ds 1
0008            551   _servo_base:
0008            552            ds 1
0009            553   _servo_arm:
0009            554            ds 1
000A            555   _vx_thres:
000A            556            ds 2
000C            557   _vy_thres:
000C            558            ds 2
000E            559   _vx:
000E            560            ds 2
0010            561   _vy:
0010            562            ds 2
0012            563   _freq100:
0012            564            ds 4
0016            565   _fre_mea_count:
0016            566            ds 2
0018            567   _d1:
0018            568            ds 2
001A            569   _d2:
001A            570            ds 2
001C            571   _seed:
001C            572            ds 2
001E            573   _pwm_corr:
001E            574            ds 4
0022            575   _getstr1_PARM_2:
0022            576            ds 1
0023            577   _Auto_mode_slave_command_1_139:
0023            578            ds 2
0025            579   _Auto_mode_slave_state_res_1_139:
0025            580            ds 2
0027            581   _Auto_mode_slave_dummy_1_139:
0027            582            ds 2
0029            583   _main_vx_error_1_148:
0029            584            ds 2
002B            585   _main_vy_error_1_148:
002B            586            ds 2
002D            587   _main_vx_err_1_148:
002D            588            ds 2
002F            589   _main_vy_err_1_148:
002F            590            ds 2
0031            591   _main_vx_1_148:
0031            592            ds 2
0033            593   _main_vy_1_148:
0033            594            ds 2
0035            595   _main_pick_1_148:
0035            596            ds 2
0037            597   _main_auto_mode_1_148:
0037            598            ds 2
0039            599   _main_sloc0_1_0:
0039            600            ds 4
003D            601   ;--------------------------------------------------------
003D            602   ; overlayable items in internal ram 
003D            603   ;--------------------------------------------------------
0000            604            rseg    R_OSEG
0000            605            rseg    R_OSEG
0000            606            rseg    R_OSEG
0000            607            rseg    R_OSEG
0000            608            rseg    R_OSEG
0000            609            rseg    R_OSEG
0000            610   _InitPinADC_PARM_2:
0000            611            ds 1
0001            612            rseg    R_OSEG
0001            613            rseg    R_OSEG
0001            614   _check_bound_PARM_2:
0001            615            ds 2
0003            616   ;--------------------------------------------------------
0003            617   ; indirectly addressable internal ram data
0003            618   ;--------------------------------------------------------
0000            619            rseg R_ISEG
0000            620   _buff:
0000            621            ds 20
0014            622   ;--------------------------------------------------------
0014            623   ; absolute internal ram data
0014            624   ;--------------------------------------------------------
0000            625            DSEG
0000            626   ;--------------------------------------------------------
0000            627   ; bit data
0000            628   ;--------------------------------------------------------
0000            629            rseg R_BSEG
0000            630   ;--------------------------------------------------------
0000            631   ; paged external ram data
0000            632   ;--------------------------------------------------------
0000            633            rseg R_PSEG
0000            634   ;--------------------------------------------------------
0000            635   ; external ram data
0000            636   ;--------------------------------------------------------
0000            637            rseg R_XSEG
0000            638   ;--------------------------------------------------------
0000            639   ; absolute external ram data
0000            640   ;--------------------------------------------------------
0000            641            XSEG
0000            642   ;--------------------------------------------------------
0000            643   ; external initialized ram data
0000            644   ;--------------------------------------------------------
0000            645            rseg R_IXSEG
0000            646            rseg R_HOME
0000            647            rseg R_GSINIT
0000            648            rseg R_CSEG
0000            649   ;--------------------------------------------------------
0000            650   ; Reset entry point and interrupt vectors
0000            651   ;--------------------------------------------------------
0000            652            CSEG at 0x0000
0000 020000     653            ljmp    _crt0
0093            654            CSEG at 0x0093
0093 020000     655            ljmp    _Timer5_ISR
0096            656   ;--------------------------------------------------------
0096            657   ; global & static initialisations
0096            658   ;--------------------------------------------------------
0000            659            rseg R_HOME
0000            660            rseg R_GSINIT
0000            661            rseg R_GSINIT
0000            662   ;--------------------------------------------------------
0000            663   ; data variables initialization
0000            664   ;--------------------------------------------------------
0000            665            rseg R_DINIT
0000            666   ;        main.c:49: unsigned int pwm_counter = 0; 
0000 E4         667            clr     a
0001 F538       668            mov     _pwm_counter,a
0003 F539       669            mov     (_pwm_counter + 1),a
0005            670   ;        main.c:50: unsigned int servo_counter = 0; 
0005 E4         671            clr     a
0006 F5F8       672            mov     _servo_counter,a
0008 F5F9       673            mov     (_servo_counter + 1),a
000A            674   ;        main.c:51: unsigned char pwm_left = 0, pwm_right = 0; 
000A 75B800     675            mov     _pwm_left,#0x00
000D            676   ;        main.c:51: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
000D 757800     677            mov     _pwm_right,#0x00
0010            678   ;        main.c:52: unsigned char servo_base = 1, servo_arm = 1; 
0010 753801     679            mov     _L_motor_dir,#0x01
0013            680   ;        main.c:52: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
0013 75F801     681            mov     _R_motor_dir,#0x01
0016            682   ;        main.c:53: unsigned char servo_base = 1, servo_arm = 1; 
0016 75B801     683            mov     _servo_base,#0x01
0019            684   ;        main.c:53: int vx_thres = 161, vy_thres = 166; 
0019 757801     685            mov     _servo_arm,#0x01
001C            686   ;        main.c:54: int vx = 0, vy = 0; 
001C 7538A1     687            mov     _vx_thres,#0xA1
001F E4         688            clr     a
0020 F539       689            mov     (_vx_thres + 1),a
0022            690   ;        main.c:54: int vx_thres = 161, vy_thres = 166; 
0022 75F8A6     691            mov     _vy_thres,#0xA6
0025 E4         692            clr     a
0026 F5F9       693            mov     (_vy_thres + 1),a
0028            694   ;        main.c:55: int vx = 0, vy = 0; 
0028 E4         695            clr     a
0029 F5B8       696            mov     _vx,a
002B F5B9       697            mov     (_vx + 1),a
002D            698   ;        main.c:55: long freq100;
002D E4         699            clr     a
002E F578       700            mov     _vy,a
0030 F579       701            mov     (_vy + 1),a
0032            702   ;        main.c:57: unsigned int fre_mea_count = 0;
0032 E4         703            clr     a
0033 F5F8       704            mov     _fre_mea_count,a
0035 F5F9       705            mov     (_fre_mea_count + 1),a
0037            706   ;        main.c:59: unsigned int seed = 12345;
0037 753839     707            mov     _seed,#0x39
003A 753930     708            mov     (_seed + 1),#0x30
003D            709   ;        main.c:60: float pwm_corr = 0.95;
003D 75F833     710            mov     _pwm_corr,#0x33
0040 75F933     711            mov     (_pwm_corr + 1),#0x33
0043 75FA73     712            mov     (_pwm_corr + 2),#0x73
0046 75FB3F     713            mov     (_pwm_corr + 3),#0x3F
0049            714            ; The linker places a 'ret' at the end of segment R_DINIT.
0049            715   ;--------------------------------------------------------
0049            716   ; code
0049            717   ;--------------------------------------------------------
0000            718            rseg R_CSEG
0000            719   ;------------------------------------------------------------
0000            720   ;Allocation info for local variables in function '_c51_external_startup'
0000            721   ;------------------------------------------------------------
0000            722   ;------------------------------------------------------------
0000            723   ;        main.c:63: char _c51_external_startup (void)
0000            724   ;        -----------------------------------------
0000            725   ;         function _c51_external_startup
0000            726   ;        -----------------------------------------
0000            727   __c51_external_startup:
0000            728            using   0
0000            729   ;        main.c:66: SFRPAGE = 0x00;
0000 75A700     730            mov     _SFRPAGE,#0x00
0003            731   ;        main.c:67: WDTCN = 0xDE; //First key
0003 7597DE     732            mov     _WDTCN,#0xDE
0006            733   ;        main.c:68: WDTCN = 0xAD; //Second key
0006 7597AD     734            mov     _WDTCN,#0xAD
0009            735   ;        main.c:70: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     736            mov     _VDM0CN,#0x80
000C            737   ;        main.c:71: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     738            mov     _RSTSRC,#0x06
000F            739   ;        main.c:78: SFRPAGE = 0x10;
000F 75A710     740            mov     _SFRPAGE,#0x10
0012            741   ;        main.c:79: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     742            mov     _PFE0CN,#0x20
0015            743   ;        main.c:80: SFRPAGE = 0x00;
0015 75A700     744            mov     _SFRPAGE,#0x00
0018            745   ;        main.c:101: CLKSEL = 0x00;
0018 75A900     746            mov     _CLKSEL,#0x00
001B            747   ;        main.c:102: CLKSEL = 0x00;
001B 75A900     748            mov     _CLKSEL,#0x00
001E            749   ;        main.c:103: while ((CLKSEL & 0x80) == 0);
001E            750   L002001?:
001E E5A9       751            mov     a,_CLKSEL
0020 30E720     752            jnb     acc.7,L002001?
0023            753   ;        main.c:104: CLKSEL = 0x03;
0023 75A903     754            mov     _CLKSEL,#0x03
0026            755   ;        main.c:105: CLKSEL = 0x03;
0026 75A903     756            mov     _CLKSEL,#0x03
0029            757   ;        main.c:106: while ((CLKSEL & 0x80) == 0);
0029            758   L002004?:
0029 E5A9       759            mov     a,_CLKSEL
002B 30E7A0     760            jnb     acc.7,L002004?
002E            761   ;        main.c:111: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     762            orl     _P0MDOUT,#0x11
0031            763   ;        main.c:112: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     764            orl     _P2MDOUT,#0x01
0034            765   ;        main.c:113: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     766            mov     _XBR0,#0x01
0037            767   ;        main.c:114: XBR1     = 0X00;
0037 75E200     768            mov     _XBR1,#0x00
003A            769   ;        main.c:115: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     770            mov     _XBR2,#0x41
003D            771   ;        main.c:121: SCON0 = 0x10;
003D 759810     772            mov     _SCON0,#0x10
0040            773   ;        main.c:122: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     774            mov     _TH1,#0xE6
0043            775   ;        main.c:123: TL1 = TH1;      // Init Timer1
0043 858D8B     776            mov     _TL1,_TH1
0046            777   ;        main.c:124: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     778            anl     _TMOD,#0x0F
0049            779   ;        main.c:125: TMOD |=  0x20;                       
0049 438920     780            orl     _TMOD,#0x20
004C            781   ;        main.c:126: TR1 = 1; // START Timer1
004C D28E       782            setb    _TR1
004E            783   ;        main.c:127: TI = 1;  // Indicate TX0 ready
004E D299       784            setb    _TI
0050            785   ;        main.c:129: P2_0=1; // 'set' pin to 1 is normal operation mode.
0050 D2A0       786            setb    _P2_0
0052            787   ;        main.c:132: SFRPAGE=0x10;
0052 75A710     788            mov     _SFRPAGE,#0x10
0055            789   ;        main.c:133: TMR5CN0=0x00;
0055 75C000     790            mov     _TMR5CN0,#0x00
0058            791   ;        main.c:134: TMR5=0xffff;   // Set to reload immediately
0058 75D4FF     792            mov     _TMR5,#0xFF
005B 75D5FF     793            mov     (_TMR5 >> 8),#0xFF
005E            794   ;        main.c:135: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
005E 43F308     795            orl     _EIE2,#0x08
0061            796   ;        main.c:136: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0061 D2C2       797            setb    _TR5
0063            798   ;        main.c:139: EA=1;  // Enable global interrupts
0063 D2AF       799            setb    _EA
0065            800   ;        main.c:140: SFRPAGE=0x00;
0065 75A700     801            mov     _SFRPAGE,#0x00
0068            802   ;        main.c:142: return 0;
0068 758200     803            mov     dpl,#0x00
006B 22         804            ret
006C            805   ;------------------------------------------------------------
006C            806   ;Allocation info for local variables in function 'Timer3us'
006C            807   ;------------------------------------------------------------
006C            808   ;us                        Allocated to registers r2 
006C            809   ;i                         Allocated to registers r3 
006C            810   ;------------------------------------------------------------
006C            811   ;        main.c:146: void Timer3us(unsigned char us)
006C            812   ;        -----------------------------------------
006C            813   ;         function Timer3us
006C            814   ;        -----------------------------------------
006C            815   _Timer3us:
006C AA82       816            mov     r2,dpl
006E            817   ;        main.c:151: CKCON0|=0b_0100_0000;
006E 438E40     818            orl     _CKCON0,#0x40
0071            819   ;        main.c:153: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0071 7592B8     820            mov     _TMR3RL,#0xB8
0074 7593FF     821            mov     (_TMR3RL >> 8),#0xFF
0077            822   ;        main.c:154: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0077 859294     823            mov     _TMR3,_TMR3RL
007A 859395     824            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007D            825   ;        main.c:156: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007D 759104     826            mov     _TMR3CN0,#0x04
0080            827   ;        main.c:157: for (i = 0; i < us; i++)       // Count <us> overflows
0080 7B00       828            mov     r3,#0x00
0082            829   L003004?:
0082 C3         830            clr     c
0083 EB         831            mov     a,r3
0084 9A         832            subb    a,r2
0085 5000       833            jnc     L003007?
0087            834   ;        main.c:159: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0087            835   L003001?:
0087 E591       836            mov     a,_TMR3CN0
0089 30E7A8     837            jnb     acc.7,L003001?
008C            838   ;        main.c:160: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008C 53917F     839            anl     _TMR3CN0,#0x7F
008F            840   ;        main.c:157: for (i = 0; i < us; i++)       // Count <us> overflows
008F 0B         841            inc     r3
0090 8000       842            sjmp    L003004?
0092            843   L003007?:
0092            844   ;        main.c:162: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0092 759100     845            mov     _TMR3CN0,#0x00
0095 22         846            ret
0096            847   ;------------------------------------------------------------
0096            848   ;Allocation info for local variables in function 'waitms'
0096            849   ;------------------------------------------------------------
0096            850   ;ms                        Allocated to registers r2 r3 
0096            851   ;j                         Allocated to registers r4 r5 
0096            852   ;k                         Allocated to registers r6 
0096            853   ;------------------------------------------------------------
0096            854   ;        main.c:165: void waitms (unsigned int ms)
0096            855   ;        -----------------------------------------
0096            856   ;         function waitms
0096            857   ;        -----------------------------------------
0096            858   _waitms:
0096 AA82       859            mov     r2,dpl
0098 AB83       860            mov     r3,dph
009A            861   ;        main.c:169: for(j=0; j<ms; j++)
009A 7C00       862            mov     r4,#0x00
009C 7D00       863            mov     r5,#0x00
009E            864   L004005?:
009E C3         865            clr     c
009F EC         866            mov     a,r4
00A0 9A         867            subb    a,r2
00A1 ED         868            mov     a,r5
00A2 9B         869            subb    a,r3
00A3 5000       870            jnc     L004009?
00A5            871   ;        main.c:170: for (k=0; k<4; k++) Timer3us(250);
00A5 7E00       872            mov     r6,#0x00
00A7            873   L004001?:
00A7 BE04E8     874            cjne    r6,#0x04,L004018?
00AA            875   L004018?:
00AA 5000       876            jnc     L004007?
00AC 7582FA     877            mov     dpl,#0xFA
00AF C002       878            push    ar2
00B1 C003       879            push    ar3
00B3 C004       880            push    ar4
00B5 C005       881            push    ar5
00B7 C006       882            push    ar6
00B9 120000     883            lcall   _Timer3us
00BC D006       884            pop     ar6
00BE D005       885            pop     ar5
00C0 D004       886            pop     ar4
00C2 D003       887            pop     ar3
00C4 D002       888            pop     ar2
00C6 0E         889            inc     r6
00C7 8000       890            sjmp    L004001?
00C9            891   L004007?:
00C9            892   ;        main.c:169: for(j=0; j<ms; j++)
00C9 0C         893            inc     r4
00CA BC0028     894            cjne    r4,#0x00,L004005?
00CD 0D         895            inc     r5
00CE 8000       896            sjmp    L004005?
00D0            897   L004009?:
00D0 22         898            ret
00D1            899   ;------------------------------------------------------------
00D1            900   ;Allocation info for local variables in function 'UART1_Init'
00D1            901   ;------------------------------------------------------------
00D1            902   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00D1            903   ;------------------------------------------------------------
00D1            904   ;        main.c:173: void UART1_Init (unsigned long baudrate)
00D1            905   ;        -----------------------------------------
00D1            906   ;         function UART1_Init
00D1            907   ;        -----------------------------------------
00D1            908   _UART1_Init:
00D1 AA82       909            mov     r2,dpl
00D3 AB83       910            mov     r3,dph
00D5 ACF0       911            mov     r4,b
00D7 FD         912            mov     r5,a
00D8            913   ;        main.c:175: SFRPAGE = 0x20;
00D8 75A720     914            mov     _SFRPAGE,#0x20
00DB            915   ;        main.c:176: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00DB 75930C     916            mov     _SMOD1,#0x0C
00DE            917   ;        main.c:177: SCON1 = 0x10;
00DE 75C810     918            mov     _SCON1,#0x10
00E1            919   ;        main.c:178: SBCON1 =0x00;   // disable baud rate generator
00E1 759400     920            mov     _SBCON1,#0x00
00E4            921   ;        main.c:179: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00E4 8A00       922            mov     __divulong_PARM_2,r2
00E6 8B01       923            mov     (__divulong_PARM_2 + 1),r3
00E8 8C02       924            mov     (__divulong_PARM_2 + 2),r4
00EA 8D03       925            mov     (__divulong_PARM_2 + 3),r5
00EC 90A200     926            mov     dptr,#0xA200
00EF 75F04A     927            mov     b,#0x4A
00F2 7404       928            mov     a,#0x04
00F4 120000     929            lcall   __divulong
00F7 AA82       930            mov     r2,dpl
00F9 AB83       931            mov     r3,dph
00FB ACF0       932            mov     r4,b
00FD FD         933            mov     r5,a
00FE 750018     934            mov     __divulong_PARM_2,#0x18
0101 E4         935            clr     a
0102 F501       936            mov     (__divulong_PARM_2 + 1),a
0104 F502       937            mov     (__divulong_PARM_2 + 2),a
0106 F503       938            mov     (__divulong_PARM_2 + 3),a
0108 8A82       939            mov     dpl,r2
010A 8B83       940            mov     dph,r3
010C 8CF0       941            mov     b,r4
010E ED         942            mov     a,r5
010F 120000     943            lcall   __divulong
0112 AA82       944            mov     r2,dpl
0114 AB83       945            mov     r3,dph
0116 ACF0       946            mov     r4,b
0118 FD         947            mov     r5,a
0119 E4         948            clr     a
011A C3         949            clr     c
011B 9A         950            subb    a,r2
011C FA         951            mov     r2,a
011D E4         952            clr     a
011E 9B         953            subb    a,r3
011F FB         954            mov     r3,a
0120 7401       955            mov     a,#0x01
0122 9C         956            subb    a,r4
0123 E4         957            clr     a
0124 9D         958            subb    a,r5
0125 8A95       959            mov     _SBRL1,r2
0127 8B96       960            mov     (_SBRL1 >> 8),r3
0129            961   ;        main.c:180: TI1 = 1; // indicate ready for TX
0129 D2C9       962            setb    _TI1
012B            963   ;        main.c:181: SBCON1 |= 0x40;   // enable baud rate generator
012B 439440     964            orl     _SBCON1,#0x40
012E            965   ;        main.c:182: SFRPAGE = 0x00;
012E 75A700     966            mov     _SFRPAGE,#0x00
0131 22         967            ret
0132            968   ;------------------------------------------------------------
0132            969   ;Allocation info for local variables in function 'putchar1'
0132            970   ;------------------------------------------------------------
0132            971   ;c                         Allocated to registers r2 
0132            972   ;------------------------------------------------------------
0132            973   ;        main.c:185: void putchar1 (char c) 
0132            974   ;        -----------------------------------------
0132            975   ;         function putchar1
0132            976   ;        -----------------------------------------
0132            977   _putchar1:
0132 AA82       978            mov     r2,dpl
0134            979   ;        main.c:187: SFRPAGE = 0x20;
0134 75A720     980            mov     _SFRPAGE,#0x20
0137            981   ;        main.c:188: while (!TI1);
0137            982   L006001?:
0137            983   ;        main.c:189: TI1=0;
0137 10C978     984            jbc     _TI1,L006008?
013A 8000       985            sjmp    L006001?
013C            986   L006008?:
013C            987   ;        main.c:190: SBUF1 = c;
013C 8A92       988            mov     _SBUF1,r2
013E            989   ;        main.c:191: SFRPAGE = 0x00;
013E 75A700     990            mov     _SFRPAGE,#0x00
0141 22         991            ret
0142            992   ;------------------------------------------------------------
0142            993   ;Allocation info for local variables in function 'sendstr1'
0142            994   ;------------------------------------------------------------
0142            995   ;s                         Allocated to registers r2 r3 r4 
0142            996   ;------------------------------------------------------------
0142            997   ;        main.c:194: void sendstr1 (char * s)
0142            998   ;        -----------------------------------------
0142            999   ;         function sendstr1
0142           1000   ;        -----------------------------------------
0142           1001   _sendstr1:
0142 AA82      1002            mov     r2,dpl
0144 AB83      1003            mov     r3,dph
0146 ACF0      1004            mov     r4,b
0148           1005   ;        main.c:196: while(*s)
0148           1006   L007001?:
0148 8A82      1007            mov     dpl,r2
014A 8B83      1008            mov     dph,r3
014C 8CF0      1009            mov     b,r4
014E 120000    1010            lcall   __gptrget
0151 FD        1011            mov     r5,a
0152 6000      1012            jz      L007004?
0154           1013   ;        main.c:198: putchar1(*s);
0154 8D82      1014            mov     dpl,r5
0156 C002      1015            push    ar2
0158 C003      1016            push    ar3
015A C004      1017            push    ar4
015C 120000    1018            lcall   _putchar1
015F D004      1019            pop     ar4
0161 D003      1020            pop     ar3
0163 D002      1021            pop     ar2
0165           1022   ;        main.c:199: s++;        
0165 0A        1023            inc     r2
0166 BA00B8    1024            cjne    r2,#0x00,L007001?
0169 0B        1025            inc     r3
016A 8000      1026            sjmp    L007001?
016C           1027   L007004?:
016C 22        1028            ret
016D           1029   ;------------------------------------------------------------
016D           1030   ;Allocation info for local variables in function 'getchar1'
016D           1031   ;------------------------------------------------------------
016D           1032   ;c                         Allocated to registers 
016D           1033   ;------------------------------------------------------------
016D           1034   ;        main.c:203: char getchar1 (void)
016D           1035   ;        -----------------------------------------
016D           1036   ;         function getchar1
016D           1037   ;        -----------------------------------------
016D           1038   _getchar1:
016D           1039   ;        main.c:206: SFRPAGE = 0x20;
016D 75A720    1040            mov     _SFRPAGE,#0x20
0170           1041   ;        main.c:207: while (!RI1);
0170           1042   L008001?:
0170           1043   ;        main.c:208: RI1=0;
0170 10C8B8    1044            jbc     _RI1,L008008?
0173 8000      1045            sjmp    L008001?
0175           1046   L008008?:
0175           1047   ;        main.c:210: SCON1&=0b_0011_1111;
0175 53C83F    1048            anl     _SCON1,#0x3F
0178           1049   ;        main.c:211: c = SBUF1;
0178 859282    1050            mov     dpl,_SBUF1
017B           1051   ;        main.c:212: SFRPAGE = 0x00;
017B 75A700    1052            mov     _SFRPAGE,#0x00
017E           1053   ;        main.c:213: return (c);
017E 22        1054            ret
017F           1055   ;------------------------------------------------------------
017F           1056   ;Allocation info for local variables in function 'getchar1_with_timeout'
017F           1057   ;------------------------------------------------------------
017F           1058   ;c                         Allocated to registers 
017F           1059   ;timeout                   Allocated to registers r2 r3 
017F           1060   ;------------------------------------------------------------
017F           1061   ;        main.c:216: char getchar1_with_timeout (void)
017F           1062   ;        -----------------------------------------
017F           1063   ;         function getchar1_with_timeout
017F           1064   ;        -----------------------------------------
017F           1065   _getchar1_with_timeout:
017F           1066   ;        main.c:220: SFRPAGE = 0x20;
017F 75A720    1067            mov     _SFRPAGE,#0x20
0182           1068   ;        main.c:222: while (!RI1)
0182 7A00      1069            mov     r2,#0x00
0184 7B00      1070            mov     r3,#0x00
0186           1071   L009003?:
0186 20C838    1072            jb      _RI1,L009005?
0189           1073   ;        main.c:224: SFRPAGE = 0x00;
0189 75A700    1074            mov     _SFRPAGE,#0x00
018C           1075   ;        main.c:225: Timer3us(20);
018C 758214    1076            mov     dpl,#0x14
018F C002      1077            push    ar2
0191 C003      1078            push    ar3
0193 120000    1079            lcall   _Timer3us
0196 D003      1080            pop     ar3
0198 D002      1081            pop     ar2
019A           1082   ;        main.c:226: SFRPAGE = 0x20;
019A 75A720    1083            mov     _SFRPAGE,#0x20
019D           1084   ;        main.c:227: timeout++;
019D 0A        1085            inc     r2
019E BA0078    1086            cjne    r2,#0x00,L009012?
01A1 0B        1087            inc     r3
01A2           1088   L009012?:
01A2           1089   ;        main.c:228: if(timeout==25000)
01A2 BAA8F8    1090            cjne    r2,#0xA8,L009003?
01A5 BB61F8    1091            cjne    r3,#0x61,L009003?
01A8           1092   ;        main.c:230: SFRPAGE = 0x00;
01A8 75A700    1093            mov     _SFRPAGE,#0x00
01AB           1094   ;        main.c:231: return ('\n'); // Timeout after half second
01AB 75820A    1095            mov     dpl,#0x0A
01AE 22        1096            ret
01AF           1097   L009005?:
01AF           1098   ;        main.c:234: RI1=0;
01AF C2C8      1099            clr     _RI1
01B1           1100   ;        main.c:236: SCON1&=0b_0011_1111;
01B1 53C83F    1101            anl     _SCON1,#0x3F
01B4           1102   ;        main.c:237: c = SBUF1;
01B4 859282    1103            mov     dpl,_SBUF1
01B7           1104   ;        main.c:238: SFRPAGE = 0x00;
01B7 75A700    1105            mov     _SFRPAGE,#0x00
01BA           1106   ;        main.c:239: return (c);
01BA 22        1107            ret
01BB           1108   ;------------------------------------------------------------
01BB           1109   ;Allocation info for local variables in function 'getstr1'
01BB           1110   ;------------------------------------------------------------
01BB           1111   ;n                         Allocated with name '_getstr1_PARM_2'
01BB           1112   ;s                         Allocated to registers r2 r3 r4 
01BB           1113   ;c                         Allocated to registers r1 
01BB           1114   ;cnt                       Allocated to registers r5 
01BB           1115   ;------------------------------------------------------------
01BB           1116   ;        main.c:242: void getstr1 (char * s, unsigned char n)
01BB           1117   ;        -----------------------------------------
01BB           1118   ;         function getstr1
01BB           1119   ;        -----------------------------------------
01BB           1120   _getstr1:
01BB AA82      1121            mov     r2,dpl
01BD AB83      1122            mov     r3,dph
01BF ACF0      1123            mov     r4,b
01C1           1124   ;        main.c:248: while(1)
01C1 7D00      1125            mov     r5,#0x00
01C3 8A06      1126            mov     ar6,r2
01C5 8B07      1127            mov     ar7,r3
01C7 8C00      1128            mov     ar0,r4
01C9           1129   L010007?:
01C9           1130   ;        main.c:250: c=getchar1_with_timeout();
01C9 C002      1131            push    ar2
01CB C003      1132            push    ar3
01CD C004      1133            push    ar4
01CF C005      1134            push    ar5
01D1 C006      1135            push    ar6
01D3 C007      1136            push    ar7
01D5 C000      1137            push    ar0
01D7 120000    1138            lcall   _getchar1_with_timeout
01DA A982      1139            mov     r1,dpl
01DC D000      1140            pop     ar0
01DE D007      1141            pop     ar7
01E0 D006      1142            pop     ar6
01E2 D005      1143            pop     ar5
01E4 D004      1144            pop     ar4
01E6 D003      1145            pop     ar3
01E8 D002      1146            pop     ar2
01EA           1147   ;        main.c:251: if(c=='\n')
01EA B90AF8    1148            cjne    r1,#0x0A,L010002?
01ED           1149   ;        main.c:253: *s=0;
01ED 8A82      1150            mov     dpl,r2
01EF 8B83      1151            mov     dph,r3
01F1 8CF0      1152            mov     b,r4
01F3 E4        1153            clr     a
01F4           1154   ;        main.c:254: return;
01F4 020000    1155            ljmp    __gptrput
01F7           1156   L010002?:
01F7           1157   ;        main.c:257: if (cnt<n)
01F7 C3        1158            clr     c
01F8 ED        1159            mov     a,r5
01F9 95B8      1160            subb    a,_getstr1_PARM_2
01FB 5000      1161            jnc     L010004?
01FD           1162   ;        main.c:259: cnt++;
01FD 0D        1163            inc     r5
01FE           1164   ;        main.c:260: *s=c;
01FE 8E82      1165            mov     dpl,r6
0200 8F83      1166            mov     dph,r7
0202 88F0      1167            mov     b,r0
0204 E9        1168            mov     a,r1
0205 120000    1169            lcall   __gptrput
0208 A3        1170            inc     dptr
0209 AE82      1171            mov     r6,dpl
020B AF83      1172            mov     r7,dph
020D           1173   ;        main.c:261: s++;
020D 8E02      1174            mov     ar2,r6
020F 8F03      1175            mov     ar3,r7
0211 8804      1176            mov     ar4,r0
0213 8000      1177            sjmp    L010007?
0215           1178   L010004?:
0215           1179   ;        main.c:265: *s=0;
0215 8A82      1180            mov     dpl,r2
0217 8B83      1181            mov     dph,r3
0219 8CF0      1182            mov     b,r4
021B E4        1183            clr     a
021C           1184   ;        main.c:266: return;
021C 020000    1185            ljmp    __gptrput
021F           1186   ;------------------------------------------------------------
021F           1187   ;Allocation info for local variables in function 'RXU1'
021F           1188   ;------------------------------------------------------------
021F           1189   ;------------------------------------------------------------
021F           1190   ;        main.c:272: bit RXU1 (void)
021F           1191   ;        -----------------------------------------
021F           1192   ;         function RXU1
021F           1193   ;        -----------------------------------------
021F           1194   _RXU1:
021F           1195   ;        main.c:275: SFRPAGE = 0x20;
021F 75A720    1196            mov     _SFRPAGE,#0x20
0222           1197   ;        main.c:276: mybit=RI1;
0222 A2C8      1198            mov     c,_RI1
0224           1199   ;        main.c:277: SFRPAGE = 0x00;
0224 75A700    1200            mov     _SFRPAGE,#0x00
0227           1201   ;        main.c:278: return mybit;
0227 22        1202            ret
0228           1203   ;------------------------------------------------------------
0228           1204   ;Allocation info for local variables in function 'waitms_or_RI1'
0228           1205   ;------------------------------------------------------------
0228           1206   ;ms                        Allocated to registers r2 r3 
0228           1207   ;j                         Allocated to registers r4 r5 
0228           1208   ;k                         Allocated to registers r6 
0228           1209   ;------------------------------------------------------------
0228           1210   ;        main.c:281: void waitms_or_RI1 (unsigned int ms)
0228           1211   ;        -----------------------------------------
0228           1212   ;         function waitms_or_RI1
0228           1213   ;        -----------------------------------------
0228           1214   _waitms_or_RI1:
0228 AA82      1215            mov     r2,dpl
022A AB83      1216            mov     r3,dph
022C           1217   ;        main.c:285: for(j=0; j<ms; j++)
022C 7C00      1218            mov     r4,#0x00
022E 7D00      1219            mov     r5,#0x00
0230           1220   L012007?:
0230 C3        1221            clr     c
0231 EC        1222            mov     a,r4
0232 9A        1223            subb    a,r2
0233 ED        1224            mov     a,r5
0234 9B        1225            subb    a,r3
0235 5000      1226            jnc     L012011?
0237           1227   ;        main.c:287: for (k=0; k<4; k++)
0237 7E00      1228            mov     r6,#0x00
0239           1229   L012003?:
0239 BE0478    1230            cjne    r6,#0x04,L012019?
023C           1231   L012019?:
023C 5000      1232            jnc     L012009?
023E           1233   ;        main.c:289: if(RXU1()) return;
023E C002      1234            push    ar2
0240 C003      1235            push    ar3
0242 C004      1236            push    ar4
0244 C005      1237            push    ar5
0246 C006      1238            push    ar6
0248 120000    1239            lcall   _RXU1
024B E4        1240            clr     a
024C 33        1241            rlc     a
024D D006      1242            pop     ar6
024F D005      1243            pop     ar5
0251 D004      1244            pop     ar4
0253 D003      1245            pop     ar3
0255 D002      1246            pop     ar2
0257 6000      1247            jz      L012002?
0259 22        1248            ret
025A           1249   L012002?:
025A           1250   ;        main.c:290: Timer3us(250);
025A 7582FA    1251            mov     dpl,#0xFA
025D C002      1252            push    ar2
025F C003      1253            push    ar3
0261 C004      1254            push    ar4
0263 C005      1255            push    ar5
0265 C006      1256            push    ar6
0267 120000    1257            lcall   _Timer3us
026A D006      1258            pop     ar6
026C D005      1259            pop     ar5
026E D004      1260            pop     ar4
0270 D003      1261            pop     ar3
0272 D002      1262            pop     ar2
0274           1263   ;        main.c:287: for (k=0; k<4; k++)
0274 0E        1264            inc     r6
0275 8000      1265            sjmp    L012003?
0277           1266   L012009?:
0277           1267   ;        main.c:285: for(j=0; j<ms; j++)
0277 0C        1268            inc     r4
0278 BC00B8    1269            cjne    r4,#0x00,L012007?
027B 0D        1270            inc     r5
027C 8000      1271            sjmp    L012007?
027E           1272   L012011?:
027E 22        1273            ret
027F           1274   ;------------------------------------------------------------
027F           1275   ;Allocation info for local variables in function 'SendATCommand'
027F           1276   ;------------------------------------------------------------
027F           1277   ;s                         Allocated to registers r2 r3 r4 
027F           1278   ;------------------------------------------------------------
027F           1279   ;        main.c:295: void SendATCommand (char * s)
027F           1280   ;        -----------------------------------------
027F           1281   ;         function SendATCommand
027F           1282   ;        -----------------------------------------
027F           1283   _SendATCommand:
027F AA82      1284            mov     r2,dpl
0281 AB83      1285            mov     r3,dph
0283 ACF0      1286            mov     r4,b
0285           1287   ;        main.c:297: printf("Command: %s", s);
0285 C002      1288            push    ar2
0287 C003      1289            push    ar3
0289 C004      1290            push    ar4
028B C002      1291            push    ar2
028D C003      1292            push    ar3
028F C004      1293            push    ar4
0291 7438      1294            mov     a,#__str_0
0293 C0E0      1295            push    acc
0295 74C8      1296            mov     a,#(__str_0 >> 8)
0297 C0E0      1297            push    acc
0299 7480      1298            mov     a,#0x80
029B C0E0      1299            push    acc
029D 120000    1300            lcall   _printf
02A0 E581      1301            mov     a,sp
02A2 24FA      1302            add     a,#0xfa
02A4 F581      1303            mov     sp,a
02A6           1304   ;        main.c:298: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02A6 C2A0      1305            clr     _P2_0
02A8           1306   ;        main.c:299: waitms(5);
02A8 900005    1307            mov     dptr,#0x0005
02AB 120000    1308            lcall   _waitms
02AE D004      1309            pop     ar4
02B0 D003      1310            pop     ar3
02B2 D002      1311            pop     ar2
02B4           1312   ;        main.c:300: sendstr1(s);
02B4 8A82      1313            mov     dpl,r2
02B6 8B83      1314            mov     dph,r3
02B8 8CF0      1315            mov     b,r4
02BA 120000    1316            lcall   _sendstr1
02BD           1317   ;        main.c:301: getstr1(buff, sizeof(buff)-1);
02BD 75B813    1318            mov     _getstr1_PARM_2,#0x13
02C0 904678    1319            mov     dptr,#_buff
02C3 75F040    1320            mov     b,#0x40
02C6 120000    1321            lcall   _getstr1
02C9           1322   ;        main.c:302: waitms(10);
02C9 90000A    1323            mov     dptr,#0x000A
02CC 120000    1324            lcall   _waitms
02CF           1325   ;        main.c:303: P2_0=1; // 'set' pin to 1 is normal operation mode.
02CF D2A0      1326            setb    _P2_0
02D1           1327   ;        main.c:304: printf("Response: %s\r\n", buff);
02D1 7478      1328            mov     a,#_buff
02D3 C0E0      1329            push    acc
02D5 7446      1330            mov     a,#(_buff >> 8)
02D7 C0E0      1331            push    acc
02D9 7440      1332            mov     a,#0x40
02DB C0E0      1333            push    acc
02DD 74F8      1334            mov     a,#__str_1
02DF C0E0      1335            push    acc
02E1 74C8      1336            mov     a,#(__str_1 >> 8)
02E3 C0E0      1337            push    acc
02E5 7480      1338            mov     a,#0x80
02E7 C0E0      1339            push    acc
02E9 120000    1340            lcall   _printf
02EC E581      1341            mov     a,sp
02EE 24FA      1342            add     a,#0xfa
02F0 F581      1343            mov     sp,a
02F2 22        1344            ret
02F3           1345   ;------------------------------------------------------------
02F3           1346   ;Allocation info for local variables in function 'ReceptionOff'
02F3           1347   ;------------------------------------------------------------
02F3           1348   ;------------------------------------------------------------
02F3           1349   ;        main.c:307: void ReceptionOff (void)
02F3           1350   ;        -----------------------------------------
02F3           1351   ;         function ReceptionOff
02F3           1352   ;        -----------------------------------------
02F3           1353   _ReceptionOff:
02F3           1354   ;        main.c:309: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02F3 C2A0      1355            clr     _P2_0
02F5           1356   ;        main.c:310: waitms(10);
02F5 90000A    1357            mov     dptr,#0x000A
02F8 120000    1358            lcall   _waitms
02FB           1359   ;        main.c:311: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
02FB 90C938    1360            mov     dptr,#__str_2
02FE 75F080    1361            mov     b,#0x80
0301 120000    1362            lcall   _sendstr1
0304           1363   ;        main.c:312: waitms(10);
0304 90000A    1364            mov     dptr,#0x000A
0307 120000    1365            lcall   _waitms
030A           1366   ;        main.c:314: SCON1&=0b_0011_1111;
030A 53C83F    1367            anl     _SCON1,#0x3F
030D           1368   ;        main.c:315: P2_0=1; // 'set' pin to 1 is normal operation mode.
030D D2A0      1369            setb    _P2_0
030F 22        1370            ret
0310           1371   ;------------------------------------------------------------
0310           1372   ;Allocation info for local variables in function 'Set_Pin_Output'
0310           1373   ;------------------------------------------------------------
0310           1374   ;pin                       Allocated to registers r2 
0310           1375   ;mask                      Allocated to registers r3 
0310           1376   ;------------------------------------------------------------
0310           1377   ;        main.c:318: void Set_Pin_Output (unsigned char pin)
0310           1378   ;        -----------------------------------------
0310           1379   ;         function Set_Pin_Output
0310           1380   ;        -----------------------------------------
0310           1381   _Set_Pin_Output:
0310 AA82      1382            mov     r2,dpl
0312           1383   ;        main.c:322: mask=(1<<(pin&0x7));
0312 7407      1384            mov     a,#0x07
0314 5A        1385            anl     a,r2
0315 F5F0      1386            mov     b,a
0317 05F0      1387            inc     b
0319 7401      1388            mov     a,#0x01
031B 8000      1389            sjmp    L015011?
031D           1390   L015009?:
031D 25E0      1391            add     a,acc
031F           1392   L015011?:
031F D5F0B8    1393            djnz    b,L015009?
0322 FB        1394            mov     r3,a
0323           1395   ;        main.c:323: switch(pin/0x10)
0323 EA        1396            mov     a,r2
0324 C4        1397            swap    a
0325 540F      1398            anl     a,#0x0f
0327 FA        1399            mov  r2,a
0328 24FC      1400            add     a,#0xff - 0x03
032A 4000      1401            jc      L015006?
032C EA        1402            mov     a,r2
032D 2A        1403            add     a,r2
032E 2A        1404            add     a,r2
032F 90CA38    1405            mov     dptr,#L015013?
0332 73        1406            jmp     @a+dptr
0333           1407   L015013?:
0333 020000    1408            ljmp    L015001?
0336 020000    1409            ljmp    L015002?
0339 020000    1410            ljmp    L015003?
033C 020000    1411            ljmp    L015004?
033F           1412   ;        main.c:325: case 0: P0MDOUT |= mask; break;
033F           1413   L015001?:
033F EB        1414            mov     a,r3
0340 42A4      1415            orl     _P0MDOUT,a
0342           1416   ;        main.c:326: case 1: P1MDOUT |= mask; break;
0342 22        1417            ret
0343           1418   L015002?:
0343 EB        1419            mov     a,r3
0344 42A5      1420            orl     _P1MDOUT,a
0346           1421   ;        main.c:327: case 2: P2MDOUT |= mask; break; 
0346 22        1422            ret
0347           1423   L015003?:
0347 EB        1424            mov     a,r3
0348 42A6      1425            orl     _P2MDOUT,a
034A           1426   ;        main.c:328: case 3: P3MDOUT |= mask; break; 
034A 22        1427            ret
034B           1428   L015004?:
034B EB        1429            mov     a,r3
034C 429C      1430            orl     _P3MDOUT,a
034E           1431   ;        main.c:329: }   
034E           1432   L015006?:
034E 22        1433            ret
034F           1434   ;------------------------------------------------------------
034F           1435   ;Allocation info for local variables in function 'Set_Pin_Input'
034F           1436   ;------------------------------------------------------------
034F           1437   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_101'
034F           1438   ;pin                       Allocated to registers r2 
034F           1439   ;------------------------------------------------------------
034F           1440   ;        main.c:332: void Set_Pin_Input (unsigned char pin)
034F           1441   ;        -----------------------------------------
034F           1442   ;         function Set_Pin_Input
034F           1443   ;        -----------------------------------------
034F           1444   _Set_Pin_Input:
034F AA82      1445            mov     r2,dpl
0351           1446   ;        main.c:336: mask=(1<<(pin&0x7));
0351 7407      1447            mov     a,#0x07
0353 5A        1448            anl     a,r2
0354 F5F0      1449            mov     b,a
0356 05F0      1450            inc     b
0358 7401      1451            mov     a,#0x01
035A 8000      1452            sjmp    L016011?
035C           1453   L016009?:
035C 25E0      1454            add     a,acc
035E           1455   L016011?:
035E D5F0B8    1456            djnz    b,L016009?
0361           1457   ;        main.c:337: mask=~mask;
0361 F4        1458            cpl     a
0362 FB        1459            mov     r3,a
0363           1460   ;        main.c:338: switch(pin/0x10)
0363 EA        1461            mov     a,r2
0364 C4        1462            swap    a
0365 540F      1463            anl     a,#0x0f
0367 FA        1464            mov  r2,a
0368 24FC      1465            add     a,#0xff - 0x03
036A 4000      1466            jc      L016006?
036C EA        1467            mov     a,r2
036D 2A        1468            add     a,r2
036E 2A        1469            add     a,r2
036F 90CC38    1470            mov     dptr,#L016013?
0372 73        1471            jmp     @a+dptr
0373           1472   L016013?:
0373 020000    1473            ljmp    L016001?
0376 020000    1474            ljmp    L016002?
0379 020000    1475            ljmp    L016003?
037C 020000    1476            ljmp    L016004?
037F           1477   ;        main.c:340: case 0: P0MDOUT &= mask; break;
037F           1478   L016001?:
037F EB        1479            mov     a,r3
0380 52A4      1480            anl     _P0MDOUT,a
0382           1481   ;        main.c:341: case 1: P1MDOUT &= mask; break;
0382 22        1482            ret
0383           1483   L016002?:
0383 EB        1484            mov     a,r3
0384 52A5      1485            anl     _P1MDOUT,a
0386           1486   ;        main.c:342: case 2: P2MDOUT &= mask; break; 
0386 22        1487            ret
0387           1488   L016003?:
0387 EB        1489            mov     a,r3
0388 52A6      1490            anl     _P2MDOUT,a
038A           1491   ;        main.c:343: case 3: P3MDOUT &= mask; break; 
038A 22        1492            ret
038B           1493   L016004?:
038B EB        1494            mov     a,r3
038C 529C      1495            anl     _P3MDOUT,a
038E           1496   ;        main.c:344: }   
038E           1497   L016006?:
038E 22        1498            ret
038F           1499   ;------------------------------------------------------------
038F           1500   ;Allocation info for local variables in function 'InitADC'
038F           1501   ;------------------------------------------------------------
038F           1502   ;------------------------------------------------------------
038F           1503   ;        main.c:347: void InitADC (void)
038F           1504   ;        -----------------------------------------
038F           1505   ;         function InitADC
038F           1506   ;        -----------------------------------------
038F           1507   _InitADC:
038F           1508   ;        main.c:349: SFRPAGE = 0x00;
038F 75A700    1509            mov     _SFRPAGE,#0x00
0392           1510   ;        main.c:350: ADEN=0; // Disable ADC
0392 C2EF      1511            clr     _ADEN
0394           1512   ;        main.c:355: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0394 75B280    1513            mov     _ADC0CN1,#0x80
0397           1514   ;        main.c:359: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0397 75BC20    1515            mov     _ADC0CF0,#0x20
039A           1516   ;        main.c:363: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
039A 75B91E    1517            mov     _ADC0CF1,#0x1E
039D           1518   ;        main.c:372: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
039D 75E800    1519            mov     _ADC0CN0,#0x00
03A0           1520   ;        main.c:377: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03A0 75DF3F    1521            mov     _ADC0CF2,#0x3F
03A3           1522   ;        main.c:381: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03A3 75B300    1523            mov     _ADC0CN2,#0x00
03A6           1524   ;        main.c:383: ADEN=1; // Enable ADC
03A6 D2EF      1525            setb    _ADEN
03A8 22        1526            ret
03A9           1527   ;------------------------------------------------------------
03A9           1528   ;Allocation info for local variables in function 'InitPinADC'
03A9           1529   ;------------------------------------------------------------
03A9           1530   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
03A9           1531   ;portno                    Allocated to registers r2 
03A9           1532   ;mask                      Allocated to registers r3 
03A9           1533   ;------------------------------------------------------------
03A9           1534   ;        main.c:386: void InitPinADC (unsigned char portno, unsigned char pin_num)
03A9           1535   ;        -----------------------------------------
03A9           1536   ;         function InitPinADC
03A9           1537   ;        -----------------------------------------
03A9           1538   _InitPinADC:
03A9 AA82      1539            mov     r2,dpl
03AB           1540   ;        main.c:390: mask=1<<pin_num;
03AB 85D8F0    1541            mov     b,_InitPinADC_PARM_2
03AE 05F0      1542            inc     b
03B0 7401      1543            mov     a,#0x01
03B2 8000      1544            sjmp    L018013?
03B4           1545   L018011?:
03B4 25E0      1546            add     a,acc
03B6           1547   L018013?:
03B6 D5F0B8    1548            djnz    b,L018011?
03B9 FB        1549            mov     r3,a
03BA           1550   ;        main.c:392: SFRPAGE = 0x20;
03BA 75A720    1551            mov     _SFRPAGE,#0x20
03BD           1552   ;        main.c:393: switch (portno)
03BD BA00F8    1553            cjne    r2,#0x00,L018014?
03C0 8000      1554            sjmp    L018001?
03C2           1555   L018014?:
03C2 BA0178    1556            cjne    r2,#0x01,L018015?
03C5 8000      1557            sjmp    L018002?
03C7           1558   L018015?:
03C7           1559   ;        main.c:395: case 0:
03C7 BA02F8    1560            cjne    r2,#0x02,L018005?
03CA 8000      1561            sjmp    L018003?
03CC           1562   L018001?:
03CC           1563   ;        main.c:396: P0MDIN &= (~mask); // Set pin as analog input
03CC EB        1564            mov     a,r3
03CD F4        1565            cpl     a
03CE FA        1566            mov     r2,a
03CF 52F1      1567            anl     _P0MDIN,a
03D1           1568   ;        main.c:397: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03D1 EB        1569            mov     a,r3
03D2 42D4      1570            orl     _P0SKIP,a
03D4           1571   ;        main.c:398: break;
03D4           1572   ;        main.c:399: case 1:
03D4 8000      1573            sjmp    L018005?
03D6           1574   L018002?:
03D6           1575   ;        main.c:400: P1MDIN &= (~mask); // Set pin as analog input
03D6 EB        1576            mov     a,r3
03D7 F4        1577            cpl     a
03D8 FA        1578            mov     r2,a
03D9 52F2      1579            anl     _P1MDIN,a
03DB           1580   ;        main.c:401: P1SKIP |= mask; // Skip Crossbar decoding for this pin
03DB EB        1581            mov     a,r3
03DC 42D5      1582            orl     _P1SKIP,a
03DE           1583   ;        main.c:402: break;
03DE           1584   ;        main.c:403: case 2:
03DE 8000      1585            sjmp    L018005?
03E0           1586   L018003?:
03E0           1587   ;        main.c:404: P2MDIN &= (~mask); // Set pin as analog input
03E0 EB        1588            mov     a,r3
03E1 F4        1589            cpl     a
03E2 FA        1590            mov     r2,a
03E3 52F3      1591            anl     _P2MDIN,a
03E5           1592   ;        main.c:405: P2SKIP |= mask; // Skip Crossbar decoding for this pin
03E5 EB        1593            mov     a,r3
03E6 42CC      1594            orl     _P2SKIP,a
03E8           1595   ;        main.c:409: }
03E8           1596   L018005?:
03E8           1597   ;        main.c:410: SFRPAGE = 0x00;
03E8 75A700    1598            mov     _SFRPAGE,#0x00
03EB 22        1599            ret
03EC           1600   ;------------------------------------------------------------
03EC           1601   ;Allocation info for local variables in function 'ADC_at_Pin'
03EC           1602   ;------------------------------------------------------------
03EC           1603   ;pin                       Allocated to registers 
03EC           1604   ;------------------------------------------------------------
03EC           1605   ;        main.c:413: unsigned int ADC_at_Pin(unsigned char pin)
03EC           1606   ;        -----------------------------------------
03EC           1607   ;         function ADC_at_Pin
03EC           1608   ;        -----------------------------------------
03EC           1609   _ADC_at_Pin:
03EC 8582BB    1610            mov     _ADC0MX,dpl
03EF           1611   ;        main.c:416: ADINT = 0;
03EF C2ED      1612            clr     _ADINT
03F1           1613   ;        main.c:417: ADBUSY = 1;     // Convert voltage at the pin
03F1 D2EC      1614            setb    _ADBUSY
03F3           1615   ;        main.c:418: while (!ADINT); // Wait for conversion to complete
03F3           1616   L019001?:
03F3 30ED78    1617            jnb     _ADINT,L019001?
03F6           1618   ;        main.c:419: return (ADC0);
03F6 85BD82    1619            mov     dpl,_ADC0
03F9 85BE83    1620            mov     dph,(_ADC0 >> 8)
03FC 22        1621            ret
03FD           1622   ;------------------------------------------------------------
03FD           1623   ;Allocation info for local variables in function 'Timer5_ISR'
03FD           1624   ;------------------------------------------------------------
03FD           1625   ;------------------------------------------------------------
03FD           1626   ;        main.c:422: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
03FD           1627   ;        -----------------------------------------
03FD           1628   ;         function Timer5_ISR
03FD           1629   ;        -----------------------------------------
03FD           1630   _Timer5_ISR:
03FD C040      1631            push    bits
03FF C0E0      1632            push    acc
0401 C0F0      1633            push    b
0403 C082      1634            push    dpl
0405 C083      1635            push    dph
0407 C002      1636            push    (0+2)
0409 C003      1637            push    (0+3)
040B C004      1638            push    (0+4)
040D C005      1639            push    (0+5)
040F C006      1640            push    (0+6)
0411 C007      1641            push    (0+7)
0413 C000      1642            push    (0+0)
0415 C001      1643            push    (0+1)
0417 C0D0      1644            push    psw
0419 75D000    1645            mov     psw,#0x00
041C           1646   ;        main.c:424: SFRPAGE=0x10;
041C 75A710    1647            mov     _SFRPAGE,#0x10
041F           1648   ;        main.c:425: TF5H = 0; // Clear Timer5 interrupt flag
041F C2C7      1649            clr     _TF5H
0421           1650   ;        main.c:426: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0421 75D2C4    1651            mov     _TMR5RL,#0xC4
0424 75D3FF    1652            mov     (_TMR5RL >> 8),#0xFF
0427           1653   ;        main.c:428: fre_mea_count++;
0427 05F8      1654            inc     _fre_mea_count
0429 E4        1655            clr     a
042A B5F800    1656            cjne    a,_fre_mea_count,L020034?
042D 05F9      1657            inc     (_fre_mea_count + 1)
042F           1658   L020034?:
042F           1659   ;        main.c:429: if(fre_mea_count == 1000){
042F 74E8      1660            mov     a,#0xE8
0431 B5F840    1661            cjne    a,_fre_mea_count,L020002?
0434 7403      1662            mov     a,#0x03
0436 B5F940    1663            cjne    a,(_fre_mea_count + 1),L020002?
0439           1664   ;        main.c:430: fre_mea_count = 0;
0439 E4        1665            clr     a
043A F5F8      1666            mov     _fre_mea_count,a
043C F5F9      1667            mov     (_fre_mea_count + 1),a
043E           1668   ;        main.c:431: freq100 = get_freq();
043E 120000    1669            lcall   _get_freq
0441 AA82      1670            mov     r2,dpl
0443 AB83      1671            mov     r3,dph
0445 8A38      1672            mov     _freq100,r2
0447 EB        1673            mov     a,r3
0448 F539      1674            mov     (_freq100 + 1),a
044A 33        1675            rlc     a
044B 95E0      1676            subb    a,acc
044D F53A      1677            mov     (_freq100 + 2),a
044F F53B      1678            mov     (_freq100 + 3),a
0451           1679   L020002?:
0451           1680   ;        main.c:435: pwm_counter++; 
0451 0538      1681            inc     _pwm_counter
0453 E4        1682            clr     a
0454 B538C0    1683            cjne    a,_pwm_counter,L020037?
0457 0539      1684            inc     (_pwm_counter + 1)
0459           1685   L020037?:
0459           1686   ;        main.c:436: if (pwm_counter == 100){
0459 7464      1687            mov     a,#0x64
045B B53800    1688            cjne    a,_pwm_counter,L020038?
045E E4        1689            clr     a
045F B53900    1690            cjne    a,(_pwm_counter + 1),L020038?
0462 8000      1691            sjmp    L020039?
0464           1692   L020038?:
0464 8000      1693            sjmp    L020004?
0466           1694   L020039?:
0466           1695   ;        main.c:437: pwm_counter = 0; 
0466 E4        1696            clr     a
0467 F538      1697            mov     _pwm_counter,a
0469 F539      1698            mov     (_pwm_counter + 1),a
046B           1699   L020004?:
046B           1700   ;        main.c:440: if (pwm_right > pwm_counter){
046B AA78      1701            mov     r2,_pwm_right
046D 7B00      1702            mov     r3,#0x00
046F C3        1703            clr     c
0470 E538      1704            mov     a,_pwm_counter
0472 9A        1705            subb    a,r2
0473 E539      1706            mov     a,(_pwm_counter + 1)
0475 9B        1707            subb    a,r3
0476 5000      1708            jnc     L020009?
0478           1709   ;        main.c:441: if(L_motor_dir){
0478 E538      1710            mov     a,_L_motor_dir
047A 6000      1711            jz      L020006?
047C           1712   ;        main.c:442: L_bridge_1 = 1; 
047C D2A1      1713            setb    _P2_1
047E           1714   ;        main.c:443: L_bridge_2 = 0; 
047E C2A2      1715            clr     _P2_2
0480 8000      1716            sjmp    L020010?
0482           1717   L020006?:
0482           1718   ;        main.c:446: L_bridge_1 = 0; 
0482 C2A1      1719            clr     _P2_1
0484           1720   ;        main.c:447: L_bridge_2 = 1; 
0484 D2A2      1721            setb    _P2_2
0486 8000      1722            sjmp    L020010?
0488           1723   L020009?:
0488           1724   ;        main.c:451: L_bridge_1 = 0; 
0488 C2A1      1725            clr     _P2_1
048A           1726   ;        main.c:452: L_bridge_2 = 0; 
048A C2A2      1727            clr     _P2_2
048C           1728   L020010?:
048C           1729   ;        main.c:454: if (pwm_left > pwm_counter){
048C AAB8      1730            mov     r2,_pwm_left
048E 7B00      1731            mov     r3,#0x00
0490 C3        1732            clr     c
0491 E538      1733            mov     a,_pwm_counter
0493 9A        1734            subb    a,r2
0494 E539      1735            mov     a,(_pwm_counter + 1)
0496 9B        1736            subb    a,r3
0497 5000      1737            jnc     L020015?
0499           1738   ;        main.c:455: if (R_motor_dir){
0499 E5F8      1739            mov     a,_R_motor_dir
049B 6000      1740            jz      L020012?
049D           1741   ;        main.c:456: R_bridge_1 = 1; 
049D D2A4      1742            setb    _P2_4
049F           1743   ;        main.c:457: R_bridge_2 = 0;
049F C2A3      1744            clr     _P2_3
04A1 8000      1745            sjmp    L020016?
04A3           1746   L020012?:
04A3           1747   ;        main.c:460: R_bridge_1 = 0; 
04A3 C2A4      1748            clr     _P2_4
04A5           1749   ;        main.c:461: R_bridge_2 = 1;
04A5 D2A3      1750            setb    _P2_3
04A7 8000      1751            sjmp    L020016?
04A9           1752   L020015?:
04A9           1753   ;        main.c:465: R_bridge_1 = 0; 
04A9 C2A4      1754            clr     _P2_4
04AB           1755   ;        main.c:466: R_bridge_2 = 0; 
04AB C2A3      1756            clr     _P2_3
04AD           1757   L020016?:
04AD           1758   ;        main.c:469: servo_counter++;
04AD 05F8      1759            inc     _servo_counter
04AF E4        1760            clr     a
04B0 B5F840    1761            cjne    a,_servo_counter,L020044?
04B3 05F9      1762            inc     (_servo_counter + 1)
04B5           1763   L020044?:
04B5           1764   ;        main.c:470: if(servo_counter==2000)
04B5 74D0      1765            mov     a,#0xD0
04B7 B5F880    1766            cjne    a,_servo_counter,L020018?
04BA 7407      1767            mov     a,#0x07
04BC B5F980    1768            cjne    a,(_servo_counter + 1),L020018?
04BF           1769   ;        main.c:472: servo_counter=0;
04BF E4        1770            clr     a
04C0 F5F8      1771            mov     _servo_counter,a
04C2 F5F9      1772            mov     (_servo_counter + 1),a
04C4           1773   ;        main.c:473: Servo_arm=1;
04C4 D296      1774            setb    _P1_6
04C6           1775   ;        main.c:474: Servo_base=1;
04C6 D297      1776            setb    _P1_7
04C8           1777   L020018?:
04C8           1778   ;        main.c:476: if(servo_arm==servo_counter)
04C8 AA78      1779            mov     r2,_servo_arm
04CA 7B00      1780            mov     r3,#0x00
04CC EA        1781            mov     a,r2
04CD B5F8C0    1782            cjne    a,_servo_counter,L020020?
04D0 EB        1783            mov     a,r3
04D1 B5F9C0    1784            cjne    a,(_servo_counter + 1),L020020?
04D4           1785   ;        main.c:478: Servo_arm=0;
04D4 C296      1786            clr     _P1_6
04D6           1787   L020020?:
04D6           1788   ;        main.c:480: if(servo_base==servo_counter)
04D6 AAB8      1789            mov     r2,_servo_base
04D8 7B00      1790            mov     r3,#0x00
04DA EA        1791            mov     a,r2
04DB B5F800    1792            cjne    a,_servo_counter,L020023?
04DE EB        1793            mov     a,r3
04DF B5F900    1794            cjne    a,(_servo_counter + 1),L020023?
04E2           1795   ;        main.c:482: Servo_base=0;
04E2 C297      1796            clr     _P1_7
04E4           1797   L020023?:
04E4 D0D0      1798            pop     psw
04E6 D001      1799            pop     (0+1)
04E8 D000      1800            pop     (0+0)
04EA D007      1801            pop     (0+7)
04EC D006      1802            pop     (0+6)
04EE D005      1803            pop     (0+5)
04F0 D004      1804            pop     (0+4)
04F2 D003      1805            pop     (0+3)
04F4 D002      1806            pop     (0+2)
04F6 D083      1807            pop     dph
04F8 D082      1808            pop     dpl
04FA D0F0      1809            pop     b
04FC D0E0      1810            pop     acc
04FE D040      1811            pop     bits
0500 32        1812            reti
0501           1813   ;------------------------------------------------------------
0501           1814   ;Allocation info for local variables in function 'servo_pick'
0501           1815   ;------------------------------------------------------------
0501           1816   ;i                         Allocated to registers r2 r3 
0501           1817   ;------------------------------------------------------------
0501           1818   ;        main.c:487: void servo_pick(){
0501           1819   ;        -----------------------------------------
0501           1820   ;         function servo_pick
0501           1821   ;        -----------------------------------------
0501           1822   _servo_pick:
0501           1823   ;        main.c:489: servo_arm = 1;
0501 757801    1824            mov     _servo_arm,#0x01
0504           1825   ;        main.c:491: servo_base = 250;
0504 75B8FA    1826            mov     _servo_base,#0xFA
0507           1827   ;        main.c:492: waitms(200);
0507 9000C8    1828            mov     dptr,#0x00C8
050A 120000    1829            lcall   _waitms
050D           1830   ;        main.c:493: servo_arm = 250;
050D 7578FA    1831            mov     _servo_arm,#0xFA
0510           1832   ;        main.c:494: Magnet = 1;
0510 D295      1833            setb    _P1_5
0512           1834   ;        main.c:495: waitms(200);
0512 9000C8    1835            mov     dptr,#0x00C8
0515 120000    1836            lcall   _waitms
0518           1837   ;        main.c:496: for(i = 0; i<89; i++){
0518 7A00      1838            mov     r2,#0x00
051A 7B00      1839            mov     r3,#0x00
051C           1840   L021001?:
051C C3        1841            clr     c
051D EA        1842            mov     a,r2
051E 9459      1843            subb    a,#0x59
0520 EB        1844            mov     a,r3
0521 6480      1845            xrl     a,#0x80
0523 9480      1846            subb    a,#0x80
0525 5000      1847            jnc     L021004?
0527           1848   ;        main.c:497: waitms(5);
0527 900005    1849            mov     dptr,#0x0005
052A C002      1850            push    ar2
052C C003      1851            push    ar3
052E 120000    1852            lcall   _waitms
0531 D003      1853            pop     ar3
0533 D002      1854            pop     ar2
0535           1855   ;        main.c:498: servo_base--;
0535 15B8      1856            dec     _servo_base
0537           1857   ;        main.c:496: for(i = 0; i<89; i++){
0537 0A        1858            inc     r2
0538 BA0040    1859            cjne    r2,#0x00,L021001?
053B 0B        1860            inc     r3
053C 8000      1861            sjmp    L021001?
053E           1862   L021004?:
053E           1863   ;        main.c:500: waitms(200);
053E 9000C8    1864            mov     dptr,#0x00C8
0541 120000    1865            lcall   _waitms
0544           1866   ;        main.c:501: for(i = 0; i<159; i++){
0544 7A00      1867            mov     r2,#0x00
0546 7B00      1868            mov     r3,#0x00
0548           1869   L021005?:
0548 C3        1870            clr     c
0549 EA        1871            mov     a,r2
054A 949F      1872            subb    a,#0x9F
054C EB        1873            mov     a,r3
054D 6480      1874            xrl     a,#0x80
054F 9480      1875            subb    a,#0x80
0551 5000      1876            jnc     L021008?
0553           1877   ;        main.c:502: waitms(5);
0553 900005    1878            mov     dptr,#0x0005
0556 C002      1879            push    ar2
0558 C003      1880            push    ar3
055A 120000    1881            lcall   _waitms
055D D003      1882            pop     ar3
055F D002      1883            pop     ar2
0561           1884   ;        main.c:503: servo_arm--;
0561 1578      1885            dec     _servo_arm
0563           1886   ;        main.c:501: for(i = 0; i<159; i++){
0563 0A        1887            inc     r2
0564 BA00C0    1888            cjne    r2,#0x00,L021005?
0567 0B        1889            inc     r3
0568 8000      1890            sjmp    L021005?
056A           1891   L021008?:
056A           1892   ;        main.c:505: waitms(200);
056A 9000C8    1893            mov     dptr,#0x00C8
056D 120000    1894            lcall   _waitms
0570           1895   ;        main.c:506: for(i = 0; i<65; i++){
0570 7A00      1896            mov     r2,#0x00
0572 7B00      1897            mov     r3,#0x00
0574           1898   L021009?:
0574 C3        1899            clr     c
0575 EA        1900            mov     a,r2
0576 9441      1901            subb    a,#0x41
0578 EB        1902            mov     a,r3
0579 6480      1903            xrl     a,#0x80
057B 9480      1904            subb    a,#0x80
057D 5000      1905            jnc     L021012?
057F           1906   ;        main.c:507: waitms(5);
057F 900005    1907            mov     dptr,#0x0005
0582 C002      1908            push    ar2
0584 C003      1909            push    ar3
0586 120000    1910            lcall   _waitms
0589 D003      1911            pop     ar3
058B D002      1912            pop     ar2
058D           1913   ;        main.c:508: servo_base--;
058D 15B8      1914            dec     _servo_base
058F           1915   ;        main.c:506: for(i = 0; i<65; i++){
058F 0A        1916            inc     r2
0590 BA0040    1917            cjne    r2,#0x00,L021009?
0593 0B        1918            inc     r3
0594 8000      1919            sjmp    L021009?
0596           1920   L021012?:
0596           1921   ;        main.c:510: waitms(500);
0596 9001F4    1922            mov     dptr,#0x01F4
0599 120000    1923            lcall   _waitms
059C           1924   ;        main.c:511: Magnet = 0;
059C C295      1925            clr     _P1_5
059E           1926   ;        main.c:512: waitms(200);
059E 9000C8    1927            mov     dptr,#0x00C8
05A1 120000    1928            lcall   _waitms
05A4           1929   ;        main.c:513: servo_arm=1;
05A4 757801    1930            mov     _servo_arm,#0x01
05A7           1931   ;        main.c:514: servo_base=1;
05A7 75B801    1932            mov     _servo_base,#0x01
05AA           1933   ;        main.c:515: return;
05AA 22        1934            ret
05AB           1935   ;------------------------------------------------------------
05AB           1936   ;Allocation info for local variables in function 'check_bound'
05AB           1937   ;------------------------------------------------------------
05AB           1938   ;d2                        Allocated with name '_check_bound_PARM_2'
05AB           1939   ;d1                        Allocated to registers r2 r3 
05AB           1940   ;------------------------------------------------------------
05AB           1941   ;        main.c:518: int check_bound(int d1, int d2){
05AB           1942   ;        -----------------------------------------
05AB           1943   ;         function check_bound
05AB           1944   ;        -----------------------------------------
05AB           1945   _check_bound:
05AB AA82      1946            mov     r2,dpl
05AD AB83      1947            mov     r3,dph
05AF           1948   ;        main.c:519: if(d1>5000||d2>12000)       return 1;
05AF C3        1949            clr     c
05B0 7488      1950            mov     a,#0x88
05B2 9A        1951            subb    a,r2
05B3 7493      1952            mov     a,#(0x13 ^ 0x80)
05B5 8BF0      1953            mov     b,r3
05B7 63F080    1954            xrl     b,#0x80
05BA 95F0      1955            subb    a,b
05BC 4000      1956            jc      L022001?
05BE 74E0      1957            mov     a,#0xE0
05C0 9588      1958            subb    a,_check_bound_PARM_2
05C2 74AE      1959            mov     a,#(0x2E ^ 0x80)
05C4 8589F0    1960            mov     b,(_check_bound_PARM_2 + 1)
05C7 63F080    1961            xrl     b,#0x80
05CA 95F0      1962            subb    a,b
05CC 5000      1963            jnc     L022002?
05CE           1964   L022001?:
05CE 900001    1965            mov     dptr,#0x0001
05D1           1966   ;        main.c:520: else return 0;
05D1 22        1967            ret
05D2           1968   L022002?:
05D2 900000    1969            mov     dptr,#0x0000
05D5 22        1970            ret
05D6           1971   ;------------------------------------------------------------
05D6           1972   ;Allocation info for local variables in function 'Init_all'
05D6           1973   ;------------------------------------------------------------
05D6           1974   ;------------------------------------------------------------
05D6           1975   ;        main.c:523: void Init_all(){
05D6           1976   ;        -----------------------------------------
05D6           1977   ;         function Init_all
05D6           1978   ;        -----------------------------------------
05D6           1979   _Init_all:
05D6           1980   ;        main.c:525: Set_Pin_Output(0x24);
05D6 758224    1981            mov     dpl,#0x24
05D9 120000    1982            lcall   _Set_Pin_Output
05DC           1983   ;        main.c:526: Set_Pin_Output(0x23);
05DC 758223    1984            mov     dpl,#0x23
05DF 120000    1985            lcall   _Set_Pin_Output
05E2           1986   ;        main.c:527: Set_Pin_Output(0x22);
05E2 758222    1987            mov     dpl,#0x22
05E5 120000    1988            lcall   _Set_Pin_Output
05E8           1989   ;        main.c:528: Set_Pin_Output(0x21);
05E8 758221    1990            mov     dpl,#0x21
05EB 120000    1991            lcall   _Set_Pin_Output
05EE           1992   ;        main.c:529: Set_Pin_Output(0x17);
05EE 758217    1993            mov     dpl,#0x17
05F1 120000    1994            lcall   _Set_Pin_Output
05F4           1995   ;        main.c:530: Set_Pin_Output(0x16);
05F4 758216    1996            mov     dpl,#0x16
05F7 120000    1997            lcall   _Set_Pin_Output
05FA           1998   ;        main.c:531: Set_Pin_Output(0x15);
05FA 758215    1999            mov     dpl,#0x15
05FD 120000    2000            lcall   _Set_Pin_Output
0600           2001   ;        main.c:532: Set_Pin_Input(0x02);
0600 758202    2002            mov     dpl,#0x02
0603 120000    2003            lcall   _Set_Pin_Input
0606           2004   ;        main.c:534: InitPinADC(1,3);
0606 75D803    2005            mov     _InitPinADC_PARM_2,#0x03
0609 758201    2006            mov     dpl,#0x01
060C 120000    2007            lcall   _InitPinADC
060F           2008   ;        main.c:535: InitPinADC(1,4);
060F 75D804    2009            mov     _InitPinADC_PARM_2,#0x04
0612 758201    2010            mov     dpl,#0x01
0615 120000    2011            lcall   _InitPinADC
0618           2012   ;        main.c:536: InitADC();
0618 120000    2013            lcall   _InitADC
061B           2014   ;        main.c:538: TMOD&=0b_1111_0000; 
061B 5389F0    2015            anl     _TMOD,#0xF0
061E           2016   ;        main.c:539: TMOD|=0b_0000_0001; 
061E 438901    2017            orl     _TMOD,#0x01
0621           2018   ;        main.c:540: TR0=0; 
0621 C28C      2019            clr     _TR0
0623           2020   ;        main.c:542: Servo_arm=0;
0623 C296      2021            clr     _P1_6
0625           2022   ;        main.c:543: Servo_base=0;
0625 C297      2023            clr     _P1_7
0627           2024   ;        main.c:544: Magnet = 0;
0627 C295      2025            clr     _P1_5
0629           2026   ;        main.c:545: return;
0629 22        2027            ret
062A           2028   ;------------------------------------------------------------
062A           2029   ;Allocation info for local variables in function 'Move_back_ms'
062A           2030   ;------------------------------------------------------------
062A           2031   ;ms                        Allocated to registers r2 r3 
062A           2032   ;------------------------------------------------------------
062A           2033   ;        main.c:548: void Move_back_ms(int ms){
062A           2034   ;        -----------------------------------------
062A           2035   ;         function Move_back_ms
062A           2036   ;        -----------------------------------------
062A           2037   _Move_back_ms:
062A AA82      2038            mov     r2,dpl
062C AB83      2039            mov     r3,dph
062E           2040   ;        main.c:550: L_motor_dir = 1;
062E 753801    2041            mov     _L_motor_dir,#0x01
0631           2042   ;        main.c:551: R_motor_dir = 1;
0631 75F801    2043            mov     _R_motor_dir,#0x01
0634           2044   ;        main.c:553: pwm_left = 50;
0634 75B832    2045            mov     _pwm_left,#0x32
0637           2046   ;        main.c:554: pwm_right = 50;
0637 757832    2047            mov     _pwm_right,#0x32
063A           2048   ;        main.c:556: waitms(ms);
063A 8A82      2049            mov     dpl,r2
063C 8B83      2050            mov     dph,r3
063E 120000    2051            lcall   _waitms
0641           2052   ;        main.c:558: L_motor_dir = 0;
0641 753800    2053            mov     _L_motor_dir,#0x00
0644           2054   ;        main.c:559: R_motor_dir = 0;
0644 75F800    2055            mov     _R_motor_dir,#0x00
0647           2056   ;        main.c:560: pwm_left = 0;
0647 75B800    2057            mov     _pwm_left,#0x00
064A           2058   ;        main.c:561: pwm_right = 0;
064A 757800    2059            mov     _pwm_right,#0x00
064D           2060   ;        main.c:562: return;
064D 22        2061            ret
064E           2062   ;------------------------------------------------------------
064E           2063   ;Allocation info for local variables in function 'Right_angle'
064E           2064   ;------------------------------------------------------------
064E           2065   ;angle                     Allocated to registers r2 r3 
064E           2066   ;------------------------------------------------------------
064E           2067   ;        main.c:565: void Right_angle(int angle){
064E           2068   ;        -----------------------------------------
064E           2069   ;         function Right_angle
064E           2070   ;        -----------------------------------------
064E           2071   _Right_angle:
064E AA82      2072            mov     r2,dpl
0650 AB83      2073            mov     r3,dph
0652           2074   ;        main.c:567: L_motor_dir = 1;
0652 753801    2075            mov     _L_motor_dir,#0x01
0655           2076   ;        main.c:568: R_motor_dir = 0;
0655 75F800    2077            mov     _R_motor_dir,#0x00
0658           2078   ;        main.c:569: pwm_left = 80;
0658 75B850    2079            mov     _pwm_left,#0x50
065B           2080   ;        main.c:570: pwm_right = 80 * pwm_corr;
065B C002      2081            push    ar2
065D C003      2082            push    ar3
065F C0F8      2083            push    _pwm_corr
0661 C0F9      2084            push    (_pwm_corr + 1)
0663 C0FA      2085            push    (_pwm_corr + 2)
0665 C0FB      2086            push    (_pwm_corr + 3)
0667 900000    2087            mov     dptr,#0x0000
066A 75F0A0    2088            mov     b,#0xA0
066D 7442      2089            mov     a,#0x42
066F 120000    2090            lcall   ___fsmul
0672 AC82      2091            mov     r4,dpl
0674 AD83      2092            mov     r5,dph
0676 AEF0      2093            mov     r6,b
0678 FF        2094            mov     r7,a
0679 E581      2095            mov     a,sp
067B 24FC      2096            add     a,#0xfc
067D F581      2097            mov     sp,a
067F 8C82      2098            mov     dpl,r4
0681 8D83      2099            mov     dph,r5
0683 8EF0      2100            mov     b,r6
0685 EF        2101            mov     a,r7
0686 120000    2102            lcall   ___fs2uchar
0689 858278    2103            mov     _pwm_right,dpl
068C D003      2104            pop     ar3
068E D002      2105            pop     ar2
0690           2106   ;        main.c:572: waitms(angle);
0690 8A82      2107            mov     dpl,r2
0692 8B83      2108            mov     dph,r3
0694 120000    2109            lcall   _waitms
0697           2110   ;        main.c:574: L_motor_dir = 0;
0697 753800    2111            mov     _L_motor_dir,#0x00
069A           2112   ;        main.c:575: R_motor_dir = 0;
069A 75F800    2113            mov     _R_motor_dir,#0x00
069D           2114   ;        main.c:576: pwm_left = 0;
069D 75B800    2115            mov     _pwm_left,#0x00
06A0           2116   ;        main.c:577: pwm_right = 0;
06A0 757800    2117            mov     _pwm_right,#0x00
06A3           2118   ;        main.c:578: return;
06A3 22        2119            ret
06A4           2120   ;------------------------------------------------------------
06A4           2121   ;Allocation info for local variables in function 'Move_forward'
06A4           2122   ;------------------------------------------------------------
06A4           2123   ;------------------------------------------------------------
06A4           2124   ;        main.c:581: void Move_forward(){
06A4           2125   ;        -----------------------------------------
06A4           2126   ;         function Move_forward
06A4           2127   ;        -----------------------------------------
06A4           2128   _Move_forward:
06A4           2129   ;        main.c:583: L_motor_dir = 0;
06A4 753800    2130            mov     _L_motor_dir,#0x00
06A7           2131   ;        main.c:584: R_motor_dir = 0;
06A7 75F800    2132            mov     _R_motor_dir,#0x00
06AA           2133   ;        main.c:585: pwm_left = 90;
06AA 75B85A    2134            mov     _pwm_left,#0x5A
06AD           2135   ;        main.c:586: pwm_right = 90 * pwm_corr;
06AD C0F8      2136            push    _pwm_corr
06AF C0F9      2137            push    (_pwm_corr + 1)
06B1 C0FA      2138            push    (_pwm_corr + 2)
06B3 C0FB      2139            push    (_pwm_corr + 3)
06B5 900000    2140            mov     dptr,#0x0000
06B8 75F0B4    2141            mov     b,#0xB4
06BB 7442      2142            mov     a,#0x42
06BD 120000    2143            lcall   ___fsmul
06C0 AA82      2144            mov     r2,dpl
06C2 AB83      2145            mov     r3,dph
06C4 ACF0      2146            mov     r4,b
06C6 FD        2147            mov     r5,a
06C7 E581      2148            mov     a,sp
06C9 24FC      2149            add     a,#0xfc
06CB F581      2150            mov     sp,a
06CD 8A82      2151            mov     dpl,r2
06CF 8B83      2152            mov     dph,r3
06D1 8CF0      2153            mov     b,r4
06D3 ED        2154            mov     a,r5
06D4 120000    2155            lcall   ___fs2uchar
06D7 858278    2156            mov     _pwm_right,dpl
06DA           2157   ;        main.c:587: return;
06DA 22        2158            ret
06DB           2159   ;------------------------------------------------------------
06DB           2160   ;Allocation info for local variables in function 'simple_rand'
06DB           2161   ;------------------------------------------------------------
06DB           2162   ;------------------------------------------------------------
06DB           2163   ;        main.c:590: unsigned int simple_rand() {
06DB           2164   ;        -----------------------------------------
06DB           2165   ;         function simple_rand
06DB           2166   ;        -----------------------------------------
06DB           2167   _simple_rand:
06DB           2168   ;        main.c:591: seed = (seed * 25173 + 13849) & 0xFFFF;  
06DB 853800    2169            mov     __mulint_PARM_2,_seed
06DE 853901    2170            mov     (__mulint_PARM_2 + 1),(_seed + 1)
06E1 906255    2171            mov     dptr,#0x6255
06E4 120000    2172            lcall   __mulint
06E7 E582      2173            mov     a,dpl
06E9 8583F0    2174            mov     b,dph
06EC 2419      2175            add     a,#0x19
06EE F538      2176            mov     _seed,a
06F0 7436      2177            mov     a,#0x36
06F2 35F0      2178            addc    a,b
06F4 F539      2179            mov     (_seed + 1),a
06F6           2180   ;        main.c:592: return seed;     
06F6 853882    2181            mov     dpl,_seed
06F9 853983    2182            mov     dph,(_seed + 1)
06FC 22        2183            ret
06FD           2184   ;------------------------------------------------------------
06FD           2185   ;Allocation info for local variables in function 'get_random_90_250'
06FD           2186   ;------------------------------------------------------------
06FD           2187   ;------------------------------------------------------------
06FD           2188   ;        main.c:595: unsigned int get_random_90_250() {
06FD           2189   ;        -----------------------------------------
06FD           2190   ;         function get_random_90_250
06FD           2191   ;        -----------------------------------------
06FD           2192   _get_random_90_250:
06FD           2193   ;        main.c:596: return (simple_rand() % (250 - 85 + 1)) + 85;
06FD 120000    2194            lcall   _simple_rand
0700 7500A6    2195            mov     __moduint_PARM_2,#0xA6
0703 E4        2196            clr     a
0704 F501      2197            mov     (__moduint_PARM_2 + 1),a
0706 120000    2198            lcall   __moduint
0709 E582      2199            mov     a,dpl
070B 8583F0    2200            mov     b,dph
070E 2455      2201            add     a,#0x55
0710 F582      2202            mov     dpl,a
0712 E4        2203            clr     a
0713 35F0      2204            addc    a,b
0715 F583      2205            mov     dph,a
0717 22        2206            ret
0718           2207   ;------------------------------------------------------------
0718           2208   ;Allocation info for local variables in function 'Auto_mode_slave'
0718           2209   ;------------------------------------------------------------
0718           2210   ;count                     Allocated to registers r4 r5 
0718           2211   ;command                   Allocated with name '_Auto_mode_slave_command_1_139'
0718           2212   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_139'
0718           2213   ;bound                     Allocated to registers r2 r3 
0718           2214   ;c                         Allocated to registers r6 
0718           2215   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_139'
0718           2216   ;angle                     Allocated to registers r2 r3 
0718           2217   ;------------------------------------------------------------
0718           2218   ;        main.c:599: void Auto_mode_slave(){
0718           2219   ;        -----------------------------------------
0718           2220   ;         function Auto_mode_slave
0718           2221   ;        -----------------------------------------
0718           2222   _Auto_mode_slave:
0718           2223   ;        main.c:602: int state_res = 1;
0718 75B001    2224            mov     _Auto_mode_slave_state_res_1_139,#0x01
071B E4        2225            clr     a
071C F5B1      2226            mov     (_Auto_mode_slave_state_res_1_139 + 1),a
071E           2227   ;        main.c:608: while(count < 20 && state_res){
071E 7C00      2228            mov     r4,#0x00
0720 7D00      2229            mov     r5,#0x00
0722           2230   L029018?:
0722 C3        2231            clr     c
0723 EC        2232            mov     a,r4
0724 9414      2233            subb    a,#0x14
0726 ED        2234            mov     a,r5
0727 6480      2235            xrl     a,#0x80
0729 9480      2236            subb    a,#0x80
072B 4000      2237            jc      L029034?
072D 020000    2238            ljmp    L029020?
0730           2239   L029034?:
0730 E5B0      2240            mov     a,_Auto_mode_slave_state_res_1_139
0732 45B1      2241            orl     a,(_Auto_mode_slave_state_res_1_139 + 1)
0734 7000      2242            jnz     L029035?
0736 020000    2243            ljmp    L029020?
0739           2244   L029035?:
0739           2245   ;        main.c:610: if(RXU1()){
0739 C004      2246            push    ar4
073B C005      2247            push    ar5
073D 120000    2248            lcall   _RXU1
0740 D005      2249            pop     ar5
0742 D004      2250            pop     ar4
0744 4000      2251            jc      L029036?
0746 020000    2252            ljmp    L029012?
0749           2253   L029036?:
0749           2254   ;        main.c:611: c=getchar1();       
0749 C004      2255            push    ar4
074B C005      2256            push    ar5
074D 120000    2257            lcall   _getchar1
0750 AE82      2258            mov     r6,dpl
0752 D005      2259            pop     ar5
0754 D004      2260            pop     ar4
0756           2261   ;        main.c:612: if(c=='!'){
0756 BE2150    2262            cjne    r6,#0x21,L029037?
0759 8000      2263            sjmp    L029038?
075B           2264   L029037?:
075B 020000    2265            ljmp    L029009?
075E           2266   L029038?:
075E           2267   ;        main.c:613: getstr1(buff, sizeof(buff)-1);
075E 75B813    2268            mov     _getstr1_PARM_2,#0x13
0761 904678    2269            mov     dptr,#_buff
0764 75F040    2270            mov     b,#0x40
0767 C004      2271            push    ar4
0769 C005      2272            push    ar5
076B 120000    2273            lcall   _getstr1
076E           2274   ;        main.c:614: if(strlen(buff)==11){
076E 904678    2275            mov     dptr,#_buff
0771 75F040    2276            mov     b,#0x40
0774 120000    2277            lcall   _strlen
0777 AF82      2278            mov     r7,dpl
0779 AA83      2279            mov     r2,dph
077B D005      2280            pop     ar5
077D D004      2281            pop     ar4
077F BF0B50    2282            cjne    r7,#0x0B,L029039?
0782 BA0050    2283            cjne    r2,#0x00,L029039?
0785 8000      2284            sjmp    L029040?
0787           2285   L029039?:
0787 020000    2286            ljmp    L029012?
078A           2287   L029040?:
078A           2288   ;        main.c:616: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
078A C004      2289            push    ar4
078C C005      2290            push    ar5
078E 7450      2291            mov     a,#_Auto_mode_slave_command_1_139
0790 C0E0      2292            push    acc
0792 74BB      2293            mov     a,#(_Auto_mode_slave_command_1_139 >> 8)
0794 C0E0      2294            push    acc
0796 7440      2295            mov     a,#0x40
0798 C0E0      2296            push    acc
079A 7400      2297            mov     a,#_Auto_mode_slave_dummy_1_139
079C C0E0      2298            push    acc
079E 74BC      2299            mov     a,#(_Auto_mode_slave_dummy_1_139 >> 8)
07A0 C0E0      2300            push    acc
07A2 7440      2301            mov     a,#0x40
07A4 C0E0      2302            push    acc
07A6 7400      2303            mov     a,#_Auto_mode_slave_dummy_1_139
07A8 C0E0      2304            push    acc
07AA 74BC      2305            mov     a,#(_Auto_mode_slave_dummy_1_139 >> 8)
07AC C0E0      2306            push    acc
07AE 7440      2307            mov     a,#0x40
07B0 C0E0      2308            push    acc
07B2 7400      2309            mov     a,#_Auto_mode_slave_dummy_1_139
07B4 C0E0      2310            push    acc
07B6 74BC      2311            mov     a,#(_Auto_mode_slave_dummy_1_139 >> 8)
07B8 C0E0      2312            push    acc
07BA 7440      2313            mov     a,#0x40
07BC C0E0      2314            push    acc
07BE 74D0      2315            mov     a,#__str_3
07C0 C0E0      2316            push    acc
07C2 74DA      2317            mov     a,#(__str_3 >> 8)
07C4 C0E0      2318            push    acc
07C6 7480      2319            mov     a,#0x80
07C8 C0E0      2320            push    acc
07CA 7478      2321            mov     a,#_buff
07CC C0E0      2322            push    acc
07CE 7446      2323            mov     a,#(_buff >> 8)
07D0 C0E0      2324            push    acc
07D2 7440      2325            mov     a,#0x40
07D4 C0E0      2326            push    acc
07D6 120000    2327            lcall   _sscanf
07D9 E581      2328            mov     a,sp
07DB 24EE      2329            add     a,#0xee
07DD F581      2330            mov     sp,a
07DF D005      2331            pop     ar5
07E1 D004      2332            pop     ar4
07E3           2333   ;        main.c:617: if(command) state_res = 1;
07E3 E550      2334            mov     a,_Auto_mode_slave_command_1_139
07E5 4551      2335            orl     a,(_Auto_mode_slave_command_1_139 + 1)
07E7 6000      2336            jz      L029002?
07E9 75B001    2337            mov     _Auto_mode_slave_state_res_1_139,#0x01
07EC E4        2338            clr     a
07ED F5B1      2339            mov     (_Auto_mode_slave_state_res_1_139 + 1),a
07EF 8000      2340            sjmp    L029012?
07F1           2341   L029002?:
07F1           2342   ;        main.c:618: else state_res = 0;
07F1 E4        2343            clr     a
07F2 F5B0      2344            mov     _Auto_mode_slave_state_res_1_139,a
07F4 F5B1      2345            mov     (_Auto_mode_slave_state_res_1_139 + 1),a
07F6 8000      2346            sjmp    L029012?
07F8           2347   L029009?:
07F8           2348   ;        main.c:624: else if(c=='@'){
07F8 BE4010    2349            cjne    r6,#0x40,L029012?
07FB           2350   ;        main.c:625: sprintf(buff, "%01d,%02d,%ld\n", state_res, count,freq100);
07FB C004      2351            push    ar4
07FD C005      2352            push    ar5
07FF C038      2353            push    _freq100
0801 C039      2354            push    (_freq100 + 1)
0803 C03A      2355            push    (_freq100 + 2)
0805 C03B      2356            push    (_freq100 + 3)
0807 C004      2357            push    ar4
0809 C005      2358            push    ar5
080B C0B0      2359            push    _Auto_mode_slave_state_res_1_139
080D C0B1      2360            push    (_Auto_mode_slave_state_res_1_139 + 1)
080F 7490      2361            mov     a,#__str_4
0811 C0E0      2362            push    acc
0813 74DB      2363            mov     a,#(__str_4 >> 8)
0815 C0E0      2364            push    acc
0817 7480      2365            mov     a,#0x80
0819 C0E0      2366            push    acc
081B 7478      2367            mov     a,#_buff
081D C0E0      2368            push    acc
081F 7446      2369            mov     a,#(_buff >> 8)
0821 C0E0      2370            push    acc
0823 7440      2371            mov     a,#0x40
0825 C0E0      2372            push    acc
0827 120000    2373            lcall   _sprintf
082A E581      2374            mov     a,sp
082C 24F2      2375            add     a,#0xf2
082E F581      2376            mov     sp,a
0830           2377   ;        main.c:626: waitms(5); 
0830 900005    2378            mov     dptr,#0x0005
0833 120000    2379            lcall   _waitms
0836           2380   ;        main.c:627: sendstr1(buff);
0836 904678    2381            mov     dptr,#_buff
0839 75F040    2382            mov     b,#0x40
083C 120000    2383            lcall   _sendstr1
083F D005      2384            pop     ar5
0841 D004      2385            pop     ar4
0843           2386   L029012?:
0843           2387   ;        main.c:632: Move_forward();
0843 C004      2388            push    ar4
0845 C005      2389            push    ar5
0847 120000    2390            lcall   _Move_forward
084A           2391   ;        main.c:634: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
084A 758209    2392            mov     dpl,#0x09
084D 120000    2393            lcall   _ADC_at_Pin
0850 8582B8    2394            mov     _d1,dpl
0853 8583B9    2395            mov     (_d1 + 1),dph
0856           2396   ;        main.c:635: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
0856 75820A    2397            mov     dpl,#0x0A
0859 120000    2398            lcall   _ADC_at_Pin
085C 858278    2399            mov     _d2,dpl
085F 858379    2400            mov     (_d2 + 1),dph
0862           2401   ;        main.c:636: bound = check_bound(d1,d2);
0862 857888    2402            mov     _check_bound_PARM_2,_d2
0865 857989    2403            mov     (_check_bound_PARM_2 + 1),(_d2 + 1)
0868 85B882    2404            mov     dpl,_d1
086B 85B983    2405            mov     dph,(_d1 + 1)
086E 120000    2406            lcall   _check_bound
0871 AA82      2407            mov     r2,dpl
0873 AB83      2408            mov     r3,dph
0875 D005      2409            pop     ar5
0877 D004      2410            pop     ar4
0879           2411   ;        main.c:637: printf("f:%04ld, d1:%d, d2:%d, bound_dectect: %d\r\n",freq100, d1,d2,bound);
0879 C002      2412            push    ar2
087B C003      2413            push    ar3
087D C004      2414            push    ar4
087F C005      2415            push    ar5
0881 C002      2416            push    ar2
0883 C003      2417            push    ar3
0885 C078      2418            push    _d2
0887 C079      2419            push    (_d2 + 1)
0889 C0B8      2420            push    _d1
088B C0B9      2421            push    (_d1 + 1)
088D C038      2422            push    _freq100
088F C039      2423            push    (_freq100 + 1)
0891 C03A      2424            push    (_freq100 + 2)
0893 C03B      2425            push    (_freq100 + 3)
0895 7410      2426            mov     a,#__str_5
0897 C0E0      2427            push    acc
0899 74DC      2428            mov     a,#(__str_5 >> 8)
089B C0E0      2429            push    acc
089D 7480      2430            mov     a,#0x80
089F C0E0      2431            push    acc
08A1 120000    2432            lcall   _printf
08A4 E581      2433            mov     a,sp
08A6 24F3      2434            add     a,#0xf3
08A8 F581      2435            mov     sp,a
08AA D005      2436            pop     ar5
08AC D004      2437            pop     ar4
08AE D003      2438            pop     ar3
08B0 D002      2439            pop     ar2
08B2           2440   ;        main.c:639: if (freq100>5400){
08B2 C3        2441            clr     c
08B3 7418      2442            mov     a,#0x18
08B5 9538      2443            subb    a,_freq100
08B7 7415      2444            mov     a,#0x15
08B9 9539      2445            subb    a,(_freq100 + 1)
08BB E4        2446            clr     a
08BC 953A      2447            subb    a,(_freq100 + 2)
08BE E4        2448            clr     a
08BF 6480      2449            xrl     a,#0x80
08C1 853BF0    2450            mov     b,(_freq100 + 3)
08C4 63F080    2451            xrl     b,#0x80
08C7 95F0      2452            subb    a,b
08C9 5000      2453            jnc     L029014?
08CB           2454   ;        main.c:640: Move_back_ms(300);
08CB 90012C    2455            mov     dptr,#0x012C
08CE C002      2456            push    ar2
08D0 C003      2457            push    ar3
08D2 C004      2458            push    ar4
08D4 C005      2459            push    ar5
08D6 120000    2460            lcall   _Move_back_ms
08D9           2461   ;        main.c:641: servo_pick();
08D9 120000    2462            lcall   _servo_pick
08DC D005      2463            pop     ar5
08DE D004      2464            pop     ar4
08E0 D003      2465            pop     ar3
08E2 D002      2466            pop     ar2
08E4           2467   ;        main.c:642: count++;
08E4 0C        2468            inc     r4
08E5 BC0090    2469            cjne    r4,#0x00,L029045?
08E8 0D        2470            inc     r5
08E9           2471   L029045?:
08E9           2472   ;        main.c:643: Move_forward();
08E9 C002      2473            push    ar2
08EB C003      2474            push    ar3
08ED C004      2475            push    ar4
08EF C005      2476            push    ar5
08F1 120000    2477            lcall   _Move_forward
08F4 D005      2478            pop     ar5
08F6 D004      2479            pop     ar4
08F8 D003      2480            pop     ar3
08FA D002      2481            pop     ar2
08FC           2482   L029014?:
08FC           2483   ;        main.c:646: if(bound == 1){
08FC BA01D0    2484            cjne    r2,#0x01,L029046?
08FF BB00D0    2485            cjne    r3,#0x00,L029046?
0902 8000      2486            sjmp    L029047?
0904           2487   L029046?:
0904 020000    2488            ljmp    L029018?
0907           2489   L029047?:
0907           2490   ;        main.c:647: angle = get_random_90_250();
0907 C004      2491            push    ar4
0909 C005      2492            push    ar5
090B 120000    2493            lcall   _get_random_90_250
090E AA82      2494            mov     r2,dpl
0910 AB83      2495            mov     r3,dph
0912 D005      2496            pop     ar5
0914 D004      2497            pop     ar4
0916           2498   ;        main.c:648: Right_angle(angle*600/90);
0916 8A00      2499            mov     __mulint_PARM_2,r2
0918 8B01      2500            mov     (__mulint_PARM_2 + 1),r3
091A 900258    2501            mov     dptr,#0x0258
091D C002      2502            push    ar2
091F C003      2503            push    ar3
0921 C004      2504            push    ar4
0923 C005      2505            push    ar5
0925 120000    2506            lcall   __mulint
0928 AE82      2507            mov     r6,dpl
092A AF83      2508            mov     r7,dph
092C 75005A    2509            mov     __divuint_PARM_2,#0x5A
092F E4        2510            clr     a
0930 F501      2511            mov     (__divuint_PARM_2 + 1),a
0932 8E82      2512            mov     dpl,r6
0934 8F83      2513            mov     dph,r7
0936 120000    2514            lcall   __divuint
0939 120000    2515            lcall   _Right_angle
093C D005      2516            pop     ar5
093E D004      2517            pop     ar4
0940 D003      2518            pop     ar3
0942 D002      2519            pop     ar2
0944           2520   ;        main.c:649: printf("Turn!!! %d\r\n", angle);
0944 C004      2521            push    ar4
0946 C005      2522            push    ar5
0948 C002      2523            push    ar2
094A C003      2524            push    ar3
094C 74E0      2525            mov     a,#__str_6
094E C0E0      2526            push    acc
0950 74DD      2527            mov     a,#(__str_6 >> 8)
0952 C0E0      2528            push    acc
0954 7480      2529            mov     a,#0x80
0956 C0E0      2530            push    acc
0958 120000    2531            lcall   _printf
095B E581      2532            mov     a,sp
095D 24FB      2533            add     a,#0xfb
095F F581      2534            mov     sp,a
0961 D005      2535            pop     ar5
0963 D004      2536            pop     ar4
0965 020000    2537            ljmp    L029018?
0968           2538   L029020?:
0968           2539   ;        main.c:653: printf("Auto mode finished!\r\n");
0968 7420      2540            mov     a,#__str_7
096A C0E0      2541            push    acc
096C 74DE      2542            mov     a,#(__str_7 >> 8)
096E C0E0      2543            push    acc
0970 7480      2544            mov     a,#0x80
0972 C0E0      2545            push    acc
0974 120000    2546            lcall   _printf
0977 1581      2547            dec     sp
0979 1581      2548            dec     sp
097B 1581      2549            dec     sp
097D 22        2550            ret
097E           2551   ;------------------------------------------------------------
097E           2552   ;Allocation info for local variables in function 'main'
097E           2553   ;------------------------------------------------------------
097E           2554   ;c                         Allocated to registers r2 
097E           2555   ;vx_error                  Allocated with name '_main_vx_error_1_148'
097E           2556   ;vy_error                  Allocated with name '_main_vy_error_1_148'
097E           2557   ;vx_err                    Allocated with name '_main_vx_err_1_148'
097E           2558   ;vy_err                    Allocated with name '_main_vy_err_1_148'
097E           2559   ;vx                        Allocated with name '_main_vx_1_148'
097E           2560   ;vy                        Allocated with name '_main_vy_1_148'
097E           2561   ;threshold                 Allocated to registers 
097E           2562   ;motor_pwm                 Allocated to registers 
097E           2563   ;pick                      Allocated with name '_main_pick_1_148'
097E           2564   ;auto_mode                 Allocated with name '_main_auto_mode_1_148'
097E           2565   ;pick_done                 Allocated to registers 
097E           2566   ;sloc0                     Allocated with name '_main_sloc0_1_0'
097E           2567   ;------------------------------------------------------------
097E           2568   ;        main.c:656: void main (void)
097E           2569   ;        -----------------------------------------
097E           2570   ;         function main
097E           2571   ;        -----------------------------------------
097E           2572   _main:
097E           2573   ;        main.c:660: int vx = 0, vy = 0; 
097E           2574   ;        main.c:663: int pick = 0;
097E           2575   ;        main.c:664: int auto_mode = 0;
097E E4        2576            clr     a
097F F580      2577            mov     _main_vx_1_148,a
0981 F581      2578            mov     (_main_vx_1_148 + 1),a
0983 F5C0      2579            mov     _main_vy_1_148,a
0985 F5C1      2580            mov     (_main_vy_1_148 + 1),a
0987 F510      2581            mov     _main_pick_1_148,a
0989 F511      2582            mov     (_main_pick_1_148 + 1),a
098B F560      2583            mov     _main_auto_mode_1_148,a
098D F561      2584            mov     (_main_auto_mode_1_148 + 1),a
098F           2585   ;        main.c:667: Init_all();
098F 120000    2586            lcall   _Init_all
0992           2587   ;        main.c:668: waitms(500);
0992 9001F4    2588            mov     dptr,#0x01F4
0995 120000    2589            lcall   _waitms
0998           2590   ;        main.c:669: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
0998 7460      2591            mov     a,#__str_8
099A C0E0      2592            push    acc
099C 74DE      2593            mov     a,#(__str_8 >> 8)
099E C0E0      2594            push    acc
09A0 7480      2595            mov     a,#0x80
09A2 C0E0      2596            push    acc
09A4 120000    2597            lcall   _printf
09A7 1581      2598            dec     sp
09A9 1581      2599            dec     sp
09AB 1581      2600            dec     sp
09AD           2601   ;        main.c:670: UART1_Init(9600);
09AD 902580    2602            mov     dptr,#0x2580
09B0 E4        2603            clr     a
09B1 F5F0      2604            mov     b,a
09B3 120000    2605            lcall   _UART1_Init
09B6           2606   ;        main.c:672: ReceptionOff();
09B6 120000    2607            lcall   _ReceptionOff
09B9           2608   ;        main.c:675: SendATCommand("AT+VER\r\n");
09B9 90DEA0    2609            mov     dptr,#__str_9
09BC 75F080    2610            mov     b,#0x80
09BF 120000    2611            lcall   _SendATCommand
09C2           2612   ;        main.c:676: SendATCommand("AT+BAUD\r\n");
09C2 90DEE0    2613            mov     dptr,#__str_10
09C5 75F080    2614            mov     b,#0x80
09C8 120000    2615            lcall   _SendATCommand
09CB           2616   ;        main.c:677: SendATCommand("AT+RFID\r\n");
09CB 90DF20    2617            mov     dptr,#__str_11
09CE 75F080    2618            mov     b,#0x80
09D1 120000    2619            lcall   _SendATCommand
09D4           2620   ;        main.c:678: SendATCommand("AT+DVID\r\n");
09D4 90DF60    2621            mov     dptr,#__str_12
09D7 75F080    2622            mov     b,#0x80
09DA 120000    2623            lcall   _SendATCommand
09DD           2624   ;        main.c:679: SendATCommand("AT+RFC002\r\n");
09DD 90DFA0    2625            mov     dptr,#__str_13
09E0 75F080    2626            mov     b,#0x80
09E3 120000    2627            lcall   _SendATCommand
09E6           2628   ;        main.c:680: SendATCommand("AT+POWE\r\n");
09E6 90DFE0    2629            mov     dptr,#__str_14
09E9 75F080    2630            mov     b,#0x80
09EC 120000    2631            lcall   _SendATCommand
09EF           2632   ;        main.c:681: SendATCommand("AT+CLSS\r\n");
09EF 90E020    2633            mov     dptr,#__str_15
09F2 75F080    2634            mov     b,#0x80
09F5 120000    2635            lcall   _SendATCommand
09F8           2636   ;        main.c:682: SendATCommand("AT+DVIDEF11\r\n");  
09F8 90E060    2637            mov     dptr,#__str_16
09FB 75F080    2638            mov     b,#0x80
09FE 120000    2639            lcall   _SendATCommand
0A01           2640   ;        main.c:685: L_bridge_1 = 0; 
0A01 C2A1      2641            clr     _P2_1
0A03           2642   ;        main.c:686: L_bridge_2 = 0; 
0A03 C2A2      2643            clr     _P2_2
0A05           2644   ;        main.c:687: R_bridge_1 = 0; 
0A05 C2A4      2645            clr     _P2_4
0A07           2646   ;        main.c:688: R_bridge_2 = 0; 
0A07 C2A3      2647            clr     _P2_3
0A09           2648   ;        main.c:690: while(1)
0A09           2649   L030053?:
0A09           2650   ;        main.c:693: if(pick==1){
0A09 7401      2651            mov     a,#0x01
0A0B B510E0    2652            cjne    a,_main_pick_1_148,L030080?
0A0E E4        2653            clr     a
0A0F B511E0    2654            cjne    a,(_main_pick_1_148 + 1),L030080?
0A12 8000      2655            sjmp    L030081?
0A14           2656   L030080?:
0A14 8000      2657            sjmp    L030002?
0A16           2658   L030081?:
0A16           2659   ;        main.c:694: servo_pick();
0A16 120000    2660            lcall   _servo_pick
0A19           2661   ;        main.c:695: waitms(1000);
0A19 9003E8    2662            mov     dptr,#0x03E8
0A1C 120000    2663            lcall   _waitms
0A1F           2664   ;        main.c:696: pick = 0;
0A1F E4        2665            clr     a
0A20 F510      2666            mov     _main_pick_1_148,a
0A22 F511      2667            mov     (_main_pick_1_148 + 1),a
0A24           2668   L030002?:
0A24           2669   ;        main.c:699: if(auto_mode){
0A24 E560      2670            mov     a,_main_auto_mode_1_148
0A26 4561      2671            orl     a,(_main_auto_mode_1_148 + 1)
0A28 6000      2672            jz      L030004?
0A2A           2673   ;        main.c:700: Auto_mode_slave();
0A2A 120000    2674            lcall   _Auto_mode_slave
0A2D           2675   ;        main.c:701: auto_mode = 0;
0A2D E4        2676            clr     a
0A2E F560      2677            mov     _main_auto_mode_1_148,a
0A30 F561      2678            mov     (_main_auto_mode_1_148 + 1),a
0A32           2679   L030004?:
0A32           2680   ;        main.c:705: if(RXU1()) // Something has arrived
0A32 120000    2681            lcall   _RXU1
0A35 5000      2682            jnc     L030053?
0A37           2683   ;        main.c:707: c=getchar1();
0A37 120000    2684            lcall   _getchar1
0A3A AA82      2685            mov     r2,dpl
0A3C           2686   ;        main.c:709: if(c=='!') // Master is sending message
0A3C BA21E0    2687            cjne    r2,#0x21,L030084?
0A3F 8000      2688            sjmp    L030085?
0A41           2689   L030084?:
0A41 020000    2690            ljmp    L030048?
0A44           2691   L030085?:
0A44           2692   ;        main.c:711: getstr1(buff, sizeof(buff)-1);
0A44 75B813    2693            mov     _getstr1_PARM_2,#0x13
0A47 904678    2694            mov     dptr,#_buff
0A4A 75F040    2695            mov     b,#0x40
0A4D 120000    2696            lcall   _getstr1
0A50           2697   ;        main.c:712: if(strlen(buff)==11)
0A50 904678    2698            mov     dptr,#_buff
0A53 75F040    2699            mov     b,#0x40
0A56 120000    2700            lcall   _strlen
0A59 AB82      2701            mov     r3,dpl
0A5B AC83      2702            mov     r4,dph
0A5D BB0BA0    2703            cjne    r3,#0x0B,L030086?
0A60 BC00A0    2704            cjne    r4,#0x00,L030086?
0A63 8000      2705            sjmp    L030087?
0A65           2706   L030086?:
0A65 020000    2707            ljmp    L030043?
0A68           2708   L030087?:
0A68           2709   ;        main.c:714: printf("Master says: %s,\r\n", buff);
0A68 7478      2710            mov     a,#_buff
0A6A C0E0      2711            push    acc
0A6C 7446      2712            mov     a,#(_buff >> 8)
0A6E C0E0      2713            push    acc
0A70 7440      2714            mov     a,#0x40
0A72 C0E0      2715            push    acc
0A74 7460      2716            mov     a,#__str_17
0A76 C0E0      2717            push    acc
0A78 74E3      2718            mov     a,#(__str_17 >> 8)
0A7A C0E0      2719            push    acc
0A7C 7480      2720            mov     a,#0x80
0A7E C0E0      2721            push    acc
0A80 120000    2722            lcall   _printf
0A83 E581      2723            mov     a,sp
0A85 24FA      2724            add     a,#0xfa
0A87 F581      2725            mov     sp,a
0A89           2726   ;        main.c:715: sscanf(buff, "%03d,%03d,%01d,%01d", &vx, &vy, &pick, &auto_mode);
0A89 7460      2727            mov     a,#_main_auto_mode_1_148
0A8B C0E0      2728            push    acc
0A8D 74BE      2729            mov     a,#(_main_auto_mode_1_148 >> 8)
0A8F C0E0      2730            push    acc
0A91 7440      2731            mov     a,#0x40
0A93 C0E0      2732            push    acc
0A95 7410      2733            mov     a,#_main_pick_1_148
0A97 C0E0      2734            push    acc
0A99 74BE      2735            mov     a,#(_main_pick_1_148 >> 8)
0A9B C0E0      2736            push    acc
0A9D 7440      2737            mov     a,#0x40
0A9F C0E0      2738            push    acc
0AA1 74C0      2739            mov     a,#_main_vy_1_148
0AA3 C0E0      2740            push    acc
0AA5 74BD      2741            mov     a,#(_main_vy_1_148 >> 8)
0AA7 C0E0      2742            push    acc
0AA9 7440      2743            mov     a,#0x40
0AAB C0E0      2744            push    acc
0AAD 7480      2745            mov     a,#_main_vx_1_148
0AAF C0E0      2746            push    acc
0AB1 74BD      2747            mov     a,#(_main_vx_1_148 >> 8)
0AB3 C0E0      2748            push    acc
0AB5 7440      2749            mov     a,#0x40
0AB7 C0E0      2750            push    acc
0AB9 74D0      2751            mov     a,#__str_3
0ABB C0E0      2752            push    acc
0ABD 74DA      2753            mov     a,#(__str_3 >> 8)
0ABF C0E0      2754            push    acc
0AC1 7480      2755            mov     a,#0x80
0AC3 C0E0      2756            push    acc
0AC5 7478      2757            mov     a,#_buff
0AC7 C0E0      2758            push    acc
0AC9 7446      2759            mov     a,#(_buff >> 8)
0ACB C0E0      2760            push    acc
0ACD 7440      2761            mov     a,#0x40
0ACF C0E0      2762            push    acc
0AD1 120000    2763            lcall   _sscanf
0AD4 E581      2764            mov     a,sp
0AD6 24EE      2765            add     a,#0xee
0AD8 F581      2766            mov     sp,a
0ADA           2767   ;        main.c:716: printf("Joystick Received: Vx = %03d, Vy = %03d, Order = %01d, Auto = %01d\r\n", vx, vy, pick, auto_mode);
0ADA C060      2768            push    _main_auto_mode_1_148
0ADC C061      2769            push    (_main_auto_mode_1_148 + 1)
0ADE C010      2770            push    _main_pick_1_148
0AE0 C011      2771            push    (_main_pick_1_148 + 1)
0AE2 C0C0      2772            push    _main_vy_1_148
0AE4 C0C1      2773            push    (_main_vy_1_148 + 1)
0AE6 C080      2774            push    _main_vx_1_148
0AE8 C081      2775            push    (_main_vx_1_148 + 1)
0AEA 74A0      2776            mov     a,#__str_18
0AEC C0E0      2777            push    acc
0AEE 74E3      2778            mov     a,#(__str_18 >> 8)
0AF0 C0E0      2779            push    acc
0AF2 7480      2780            mov     a,#0x80
0AF4 C0E0      2781            push    acc
0AF6 120000    2782            lcall   _printf
0AF9 E581      2783            mov     a,sp
0AFB 24F5      2784            add     a,#0xf5
0AFD F581      2785            mov     sp,a
0AFF           2786   ;        main.c:719: vx_error = abs(vx-vx_thres)*100/vx_thres; 
0AFF E580      2787            mov     a,_main_vx_1_148
0B01 C3        2788            clr     c
0B02 9538      2789            subb    a,_vx_thres
0B04 F582      2790            mov     dpl,a
0B06 E581      2791            mov     a,(_main_vx_1_148 + 1)
0B08 9539      2792            subb    a,(_vx_thres + 1)
0B0A F583      2793            mov     dph,a
0B0C 120000    2794            lcall   _abs
0B0F 858200    2795            mov     __mulint_PARM_2,dpl
0B12 858301    2796            mov     (__mulint_PARM_2 + 1),dph
0B15 900064    2797            mov     dptr,#0x0064
0B18 120000    2798            lcall   __mulint
0B1B 853800    2799            mov     __divsint_PARM_2,_vx_thres
0B1E 853901    2800            mov     (__divsint_PARM_2 + 1),(_vx_thres + 1)
0B21 120000    2801            lcall   __divsint
0B24 858250    2802            mov     _main_vx_error_1_148,dpl
0B27 858351    2803            mov     (_main_vx_error_1_148 + 1),dph
0B2A           2804   ;        main.c:720: vy_error = abs(vy-vy_thres)*100/vy_thres; 
0B2A E5C0      2805            mov     a,_main_vy_1_148
0B2C C3        2806            clr     c
0B2D 95F8      2807            subb    a,_vy_thres
0B2F F582      2808            mov     dpl,a
0B31 E5C1      2809            mov     a,(_main_vy_1_148 + 1)
0B33 95F9      2810            subb    a,(_vy_thres + 1)
0B35 F583      2811            mov     dph,a
0B37 120000    2812            lcall   _abs
0B3A 858200    2813            mov     __mulint_PARM_2,dpl
0B3D 858301    2814            mov     (__mulint_PARM_2 + 1),dph
0B40 900064    2815            mov     dptr,#0x0064
0B43 120000    2816            lcall   __mulint
0B46 85F800    2817            mov     __divsint_PARM_2,_vy_thres
0B49 85F901    2818            mov     (__divsint_PARM_2 + 1),(_vy_thres + 1)
0B4C 120000    2819            lcall   __divsint
0B4F 8582A0    2820            mov     _main_vy_error_1_148,dpl
0B52 8583A1    2821            mov     (_main_vy_error_1_148 + 1),dph
0B55           2822   ;        main.c:721: vx_err = vx-vx_thres; 
0B55 E580      2823            mov     a,_main_vx_1_148
0B57 C3        2824            clr     c
0B58 9538      2825            subb    a,_vx_thres
0B5A F5F0      2826            mov     _main_vx_err_1_148,a
0B5C E581      2827            mov     a,(_main_vx_1_148 + 1)
0B5E 9539      2828            subb    a,(_vx_thres + 1)
0B60 F5F1      2829            mov     (_main_vx_err_1_148 + 1),a
0B62           2830   ;        main.c:722: vy_err = vy-vy_thres; 
0B62 E5C0      2831            mov     a,_main_vy_1_148
0B64 C3        2832            clr     c
0B65 95F8      2833            subb    a,_vy_thres
0B67 F540      2834            mov     _main_vy_err_1_148,a
0B69 E5C1      2835            mov     a,(_main_vy_1_148 + 1)
0B6B 95F9      2836            subb    a,(_vy_thres + 1)
0B6D F541      2837            mov     (_main_vy_err_1_148 + 1),a
0B6F           2838   ;        main.c:723: pwm_left = 0; 
0B6F 75B800    2839            mov     _pwm_left,#0x00
0B72           2840   ;        main.c:724: pwm_right = 0; 
0B72 757800    2841            mov     _pwm_right,#0x00
0B75           2842   ;        main.c:726: if ((vy_error>5) && (vx_error<5)){
0B75 C3        2843            clr     c
0B76 7405      2844            mov     a,#0x05
0B78 95A0      2845            subb    a,_main_vy_error_1_148
0B7A E4        2846            clr     a
0B7B 6480      2847            xrl     a,#0x80
0B7D 85A1F0    2848            mov     b,(_main_vy_error_1_148 + 1)
0B80 63F080    2849            xrl     b,#0x80
0B83 95F0      2850            subb    a,b
0B85 E4        2851            clr     a
0B86 33        2852            rlc     a
0B87 FF        2853            mov     r7,a
0B88 7000      2854            jnz     L030088?
0B8A 020000    2855            ljmp    L030009?
0B8D           2856   L030088?:
0B8D C3        2857            clr     c
0B8E E550      2858            mov     a,_main_vx_error_1_148
0B90 9405      2859            subb    a,#0x05
0B92 E551      2860            mov     a,(_main_vx_error_1_148 + 1)
0B94 6480      2861            xrl     a,#0x80
0B96 9480      2862            subb    a,#0x80
0B98 4000      2863            jc      L030089?
0B9A 020000    2864            ljmp    L030009?
0B9D           2865   L030089?:
0B9D           2866   ;        main.c:727: pwm_left = vy_error; 
0B9D 85A0B8    2867            mov     _pwm_left,_main_vy_error_1_148
0BA0           2868   ;        main.c:728: pwm_right = vy_error * pwm_corr; 
0BA0 85A082    2869            mov     dpl,_main_vy_error_1_148
0BA3 85A183    2870            mov     dph,(_main_vy_error_1_148 + 1)
0BA6 C007      2871            push    ar7
0BA8 120000    2872            lcall   ___sint2fs
0BAB AD82      2873            mov     r5,dpl
0BAD AE83      2874            mov     r6,dph
0BAF ABF0      2875            mov     r3,b
0BB1 FC        2876            mov     r4,a
0BB2 C0F8      2877            push    _pwm_corr
0BB4 C0F9      2878            push    (_pwm_corr + 1)
0BB6 C0FA      2879            push    (_pwm_corr + 2)
0BB8 C0FB      2880            push    (_pwm_corr + 3)
0BBA 8D82      2881            mov     dpl,r5
0BBC 8E83      2882            mov     dph,r6
0BBE 8BF0      2883            mov     b,r3
0BC0 EC        2884            mov     a,r4
0BC1 120000    2885            lcall   ___fsmul
0BC4 AB82      2886            mov     r3,dpl
0BC6 AC83      2887            mov     r4,dph
0BC8 ADF0      2888            mov     r5,b
0BCA FE        2889            mov     r6,a
0BCB E581      2890            mov     a,sp
0BCD 24FC      2891            add     a,#0xfc
0BCF F581      2892            mov     sp,a
0BD1 8B82      2893            mov     dpl,r3
0BD3 8C83      2894            mov     dph,r4
0BD5 8DF0      2895            mov     b,r5
0BD7 EE        2896            mov     a,r6
0BD8 120000    2897            lcall   ___fs2uchar
0BDB 858278    2898            mov     _pwm_right,dpl
0BDE D007      2899            pop     ar7
0BE0           2900   ;        main.c:729: if (vy_err > 0){ //move forward
0BE0 C3        2901            clr     c
0BE1 E4        2902            clr     a
0BE2 9540      2903            subb    a,_main_vy_err_1_148
0BE4 E4        2904            clr     a
0BE5 6480      2905            xrl     a,#0x80
0BE7 8541F0    2906            mov     b,(_main_vy_err_1_148 + 1)
0BEA 63F080    2907            xrl     b,#0x80
0BED 95F0      2908            subb    a,b
0BEF 5000      2909            jnc     L030006?
0BF1           2910   ;        main.c:730: L_motor_dir = 0; 
0BF1 753800    2911            mov     _L_motor_dir,#0x00
0BF4           2912   ;        main.c:731: R_motor_dir = 0; 
0BF4 75F800    2913            mov     _R_motor_dir,#0x00
0BF7 8000      2914            sjmp    L030009?
0BF9           2915   L030006?:
0BF9           2916   ;        main.c:734: L_motor_dir = 1; 
0BF9 753801    2917            mov     _L_motor_dir,#0x01
0BFC           2918   ;        main.c:735: R_motor_dir = 1; 
0BFC 75F801    2919            mov     _R_motor_dir,#0x01
0BFF           2920   ;        main.c:736: pwm_right *= 1.05;
0BFF 857882    2921            mov     dpl,_pwm_right
0C02 C007      2922            push    ar7
0C04 120000    2923            lcall   ___uchar2fs
0C07 AB82      2924            mov     r3,dpl
0C09 AC83      2925            mov     r4,dph
0C0B ADF0      2926            mov     r5,b
0C0D FE        2927            mov     r6,a
0C0E C003      2928            push    ar3
0C10 C004      2929            push    ar4
0C12 C005      2930            push    ar5
0C14 C006      2931            push    ar6
0C16 906666    2932            mov     dptr,#0x6666
0C19 75F086    2933            mov     b,#0x86
0C1C 743F      2934            mov     a,#0x3F
0C1E 120000    2935            lcall   ___fsmul
0C21 AB82      2936            mov     r3,dpl
0C23 AC83      2937            mov     r4,dph
0C25 ADF0      2938            mov     r5,b
0C27 FE        2939            mov     r6,a
0C28 E581      2940            mov     a,sp
0C2A 24FC      2941            add     a,#0xfc
0C2C F581      2942            mov     sp,a
0C2E 8B82      2943            mov     dpl,r3
0C30 8C83      2944            mov     dph,r4
0C32 8DF0      2945            mov     b,r5
0C34 EE        2946            mov     a,r6
0C35 120000    2947            lcall   ___fs2uchar
0C38 858278    2948            mov     _pwm_right,dpl
0C3B D007      2949            pop     ar7
0C3D           2950   L030009?:
0C3D           2951   ;        main.c:739: if ((vx_error>5)&&(vy_error<5)){
0C3D C3        2952            clr     c
0C3E 7405      2953            mov     a,#0x05
0C40 9550      2954            subb    a,_main_vx_error_1_148
0C42 E4        2955            clr     a
0C43 6480      2956            xrl     a,#0x80
0C45 8551F0    2957            mov     b,(_main_vx_error_1_148 + 1)
0C48 63F080    2958            xrl     b,#0x80
0C4B 95F0      2959            subb    a,b
0C4D E4        2960            clr     a
0C4E 33        2961            rlc     a
0C4F FB        2962            mov     r3,a
0C50 6000      2963            jz      L030015?
0C52 C3        2964            clr     c
0C53 E5A0      2965            mov     a,_main_vy_error_1_148
0C55 9405      2966            subb    a,#0x05
0C57 E5A1      2967            mov     a,(_main_vy_error_1_148 + 1)
0C59 6480      2968            xrl     a,#0x80
0C5B 9480      2969            subb    a,#0x80
0C5D 5000      2970            jnc     L030015?
0C5F           2971   ;        main.c:740: pwm_left = vx_error; 
0C5F C003      2972            push    ar3
0C61 8550B8    2973            mov     _pwm_left,_main_vx_error_1_148
0C64           2974   ;        main.c:741: pwm_right = vx_error * pwm_corr; 
0C64 855082    2975            mov     dpl,_main_vx_error_1_148
0C67 855183    2976            mov     dph,(_main_vx_error_1_148 + 1)
0C6A C007      2977            push    ar7
0C6C 120000    2978            lcall   ___sint2fs
0C6F AC82      2979            mov     r4,dpl
0C71 AD83      2980            mov     r5,dph
0C73 AEF0      2981            mov     r6,b
0C75 FB        2982            mov     r3,a
0C76 C0F8      2983            push    _pwm_corr
0C78 C0F9      2984            push    (_pwm_corr + 1)
0C7A C0FA      2985            push    (_pwm_corr + 2)
0C7C C0FB      2986            push    (_pwm_corr + 3)
0C7E 8C82      2987            mov     dpl,r4
0C80 8D83      2988            mov     dph,r5
0C82 8EF0      2989            mov     b,r6
0C84 EB        2990            mov     a,r3
0C85 120000    2991            lcall   ___fsmul
0C88 AB82      2992            mov     r3,dpl
0C8A AC83      2993            mov     r4,dph
0C8C ADF0      2994            mov     r5,b
0C8E FE        2995            mov     r6,a
0C8F E581      2996            mov     a,sp
0C91 24FC      2997            add     a,#0xfc
0C93 F581      2998            mov     sp,a
0C95 D007      2999            pop     ar7
0C97 8B82      3000            mov     dpl,r3
0C99 8C83      3001            mov     dph,r4
0C9B 8DF0      3002            mov     b,r5
0C9D EE        3003            mov     a,r6
0C9E C003      3004            push    ar3
0CA0 C007      3005            push    ar7
0CA2 120000    3006            lcall   ___fs2uchar
0CA5 858278    3007            mov     _pwm_right,dpl
0CA8 D007      3008            pop     ar7
0CAA D003      3009            pop     ar3
0CAC           3010   ;        main.c:742: if (vx_err > 0){ //turn right
0CAC C3        3011            clr     c
0CAD E4        3012            clr     a
0CAE 95F0      3013            subb    a,_main_vx_err_1_148
0CB0 E4        3014            clr     a
0CB1 6480      3015            xrl     a,#0x80
0CB3 85F1F0    3016            mov     b,(_main_vx_err_1_148 + 1)
0CB6 63F080    3017            xrl     b,#0x80
0CB9 95F0      3018            subb    a,b
0CBB D003      3019            pop     ar3
0CBD 5000      3020            jnc     L030012?
0CBF           3021   ;        main.c:743: L_motor_dir = 1; 
0CBF 753801    3022            mov     _L_motor_dir,#0x01
0CC2           3023   ;        main.c:744: R_motor_dir = 0; 
0CC2 75F800    3024            mov     _R_motor_dir,#0x00
0CC5 8000      3025            sjmp    L030015?
0CC7           3026   L030012?:
0CC7           3027   ;        main.c:747: L_motor_dir = 0; 
0CC7 753800    3028            mov     _L_motor_dir,#0x00
0CCA           3029   ;        main.c:748: R_motor_dir = 1; 
0CCA 75F801    3030            mov     _R_motor_dir,#0x01
0CCD           3031   L030015?:
0CCD           3032   ;        main.c:751: if ((vx_error>5)&&(vy_error)>5){
0CCD EB        3033            mov     a,r3
0CCE 7000      3034            jnz     L030094?
0CD0 020000    3035            ljmp    L030053?
0CD3           3036   L030094?:
0CD3 EF        3037            mov     a,r7
0CD4 7000      3038            jnz     L030095?
0CD6 020000    3039            ljmp    L030053?
0CD9           3040   L030095?:
0CD9           3041   ;        main.c:753: if (vy_err>0){
0CD9 C3        3042            clr     c
0CDA E4        3043            clr     a
0CDB 9540      3044            subb    a,_main_vy_err_1_148
0CDD E4        3045            clr     a
0CDE 6480      3046            xrl     a,#0x80
0CE0 8541F0    3047            mov     b,(_main_vy_err_1_148 + 1)
0CE3 63F080    3048            xrl     b,#0x80
0CE6 95F0      3049            subb    a,b
0CE8 4000      3050            jc      L030096?
0CEA 020000    3051            ljmp    L030027?
0CED           3052   L030096?:
0CED           3053   ;        main.c:754: L_motor_dir = 0; 
0CED 753800    3054            mov     _L_motor_dir,#0x00
0CF0           3055   ;        main.c:755: R_motor_dir = 0; 
0CF0 75F800    3056            mov     _R_motor_dir,#0x00
0CF3           3057   ;        main.c:757: if (vx_err>0){
0CF3 C3        3058            clr     c
0CF4 E4        3059            clr     a
0CF5 95F0      3060            subb    a,_main_vx_err_1_148
0CF7 E4        3061            clr     a
0CF8 6480      3062            xrl     a,#0x80
0CFA 85F1F0    3063            mov     b,(_main_vx_err_1_148 + 1)
0CFD 63F080    3064            xrl     b,#0x80
0D00 95F0      3065            subb    a,b
0D02 4000      3066            jc      L030097?
0D04 020000    3067            ljmp    L030024?
0D07           3068   L030097?:
0D07           3069   ;        main.c:758: if (vy*100<=vy_thres*100/2){
0D07 85C000    3070            mov     __mulint_PARM_2,_main_vy_1_148
0D0A 85C101    3071            mov     (__mulint_PARM_2 + 1),(_main_vy_1_148 + 1)
0D0D 900064    3072            mov     dptr,#0x0064
0D10 120000    3073            lcall   __mulint
0D13 AB82      3074            mov     r3,dpl
0D15 AC83      3075            mov     r4,dph
0D17 85F800    3076            mov     __mulint_PARM_2,_vy_thres
0D1A 85F901    3077            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0D1D 900064    3078            mov     dptr,#0x0064
0D20 C003      3079            push    ar3
0D22 C004      3080            push    ar4
0D24 120000    3081            lcall   __mulint
0D27 AD82      3082            mov     r5,dpl
0D29 AE83      3083            mov     r6,dph
0D2B 750002    3084            mov     __divsint_PARM_2,#0x02
0D2E E4        3085            clr     a
0D2F F501      3086            mov     (__divsint_PARM_2 + 1),a
0D31 8D82      3087            mov     dpl,r5
0D33 8E83      3088            mov     dph,r6
0D35 120000    3089            lcall   __divsint
0D38 AD82      3090            mov     r5,dpl
0D3A AE83      3091            mov     r6,dph
0D3C D004      3092            pop     ar4
0D3E D003      3093            pop     ar3
0D40 C3        3094            clr     c
0D41 ED        3095            mov     a,r5
0D42 9B        3096            subb    a,r3
0D43 EE        3097            mov     a,r6
0D44 6480      3098            xrl     a,#0x80
0D46 8CF0      3099            mov     b,r4
0D48 63F080    3100            xrl     b,#0x80
0D4B 95F0      3101            subb    a,b
0D4D 5000      3102            jnc     L030098?
0D4F 020000    3103            ljmp    L030018?
0D52           3104   L030098?:
0D52           3105   ;        main.c:759: pwm_left = vy_error; 
0D52 85A0B8    3106            mov     _pwm_left,_main_vy_error_1_148
0D55           3107   ;        main.c:760: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
0D55 85A082    3108            mov     dpl,_main_vy_error_1_148
0D58 85A183    3109            mov     dph,(_main_vy_error_1_148 + 1)
0D5B 120000    3110            lcall   ___sint2fs
0D5E AB82      3111            mov     r3,dpl
0D60 AC83      3112            mov     r4,dph
0D62 ADF0      3113            mov     r5,b
0D64 FE        3114            mov     r6,a
0D65 C003      3115            push    ar3
0D67 C004      3116            push    ar4
0D69 C005      3117            push    ar5
0D6B C006      3118            push    ar6
0D6D 85F882    3119            mov     dpl,_pwm_corr
0D70 85F983    3120            mov     dph,(_pwm_corr + 1)
0D73 85FAF0    3121            mov     b,(_pwm_corr + 2)
0D76 E5FB      3122            mov     a,(_pwm_corr + 3)
0D78 120000    3123            lcall   ___fsmul
0D7B AB82      3124            mov     r3,dpl
0D7D AC83      3125            mov     r4,dph
0D7F ADF0      3126            mov     r5,b
0D81 FE        3127            mov     r6,a
0D82 E581      3128            mov     a,sp
0D84 24FC      3129            add     a,#0xfc
0D86 F581      3130            mov     sp,a
0D88 C003      3131            push    ar3
0D8A C004      3132            push    ar4
0D8C C005      3133            push    ar5
0D8E C006      3134            push    ar6
0D90 900000    3135            mov     dptr,#0x0000
0D93 75F0C8    3136            mov     b,#0xC8
0D96 7442      3137            mov     a,#0x42
0D98 120000    3138            lcall   ___fsmul
0D9B 8582A0    3139            mov     _main_sloc0_1_0,dpl
0D9E 8583A1    3140            mov     (_main_sloc0_1_0 + 1),dph
0DA1 85F0A2    3141            mov     (_main_sloc0_1_0 + 2),b
0DA4 F5A3      3142            mov     (_main_sloc0_1_0 + 3),a
0DA6 E581      3143            mov     a,sp
0DA8 24FC      3144            add     a,#0xfc
0DAA F581      3145            mov     sp,a
0DAC E5A0      3146            mov     a,_main_vy_error_1_148
0DAE 2550      3147            add     a,_main_vx_error_1_148
0DB0 F582      3148            mov     dpl,a
0DB2 E5A1      3149            mov     a,(_main_vy_error_1_148 + 1)
0DB4 3551      3150            addc    a,(_main_vx_error_1_148 + 1)
0DB6 F583      3151            mov     dph,a
0DB8 120000    3152            lcall   ___sint2fs
0DBB AF82      3153            mov     r7,dpl
0DBD AB83      3154            mov     r3,dph
0DBF ACF0      3155            mov     r4,b
0DC1 FD        3156            mov     r5,a
0DC2 C007      3157            push    ar7
0DC4 C003      3158            push    ar3
0DC6 C004      3159            push    ar4
0DC8 C005      3160            push    ar5
0DCA 85A082    3161            mov     dpl,_main_sloc0_1_0
0DCD 85A183    3162            mov     dph,(_main_sloc0_1_0 + 1)
0DD0 85A2F0    3163            mov     b,(_main_sloc0_1_0 + 2)
0DD3 E5A3      3164            mov     a,(_main_sloc0_1_0 + 3)
0DD5 120000    3165            lcall   ___fsdiv
0DD8 AB82      3166            mov     r3,dpl
0DDA AC83      3167            mov     r4,dph
0DDC ADF0      3168            mov     r5,b
0DDE FE        3169            mov     r6,a
0DDF E581      3170            mov     a,sp
0DE1 24FC      3171            add     a,#0xfc
0DE3 F581      3172            mov     sp,a
0DE5 8B82      3173            mov     dpl,r3
0DE7 8C83      3174            mov     dph,r4
0DE9 8DF0      3175            mov     b,r5
0DEB EE        3176            mov     a,r6
0DEC 120000    3177            lcall   ___fs2uchar
0DEF 858278    3178            mov     _pwm_right,dpl
0DF2 020000    3179            ljmp    L030027?
0DF5           3180   L030018?:
0DF5           3181   ;        main.c:763: pwm_left = vx_error; 
0DF5 8550B8    3182            mov     _pwm_left,_main_vx_error_1_148
0DF8           3183   ;        main.c:764: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
0DF8 855082    3184            mov     dpl,_main_vx_error_1_148
0DFB 855183    3185            mov     dph,(_main_vx_error_1_148 + 1)
0DFE 120000    3186            lcall   ___sint2fs
0E01 AB82      3187            mov     r3,dpl
0E03 AC83      3188            mov     r4,dph
0E05 ADF0      3189            mov     r5,b
0E07 FE        3190            mov     r6,a
0E08 C003      3191            push    ar3
0E0A C004      3192            push    ar4
0E0C C005      3193            push    ar5
0E0E C006      3194            push    ar6
0E10 85F882    3195            mov     dpl,_pwm_corr
0E13 85F983    3196            mov     dph,(_pwm_corr + 1)
0E16 85FAF0    3197            mov     b,(_pwm_corr + 2)
0E19 E5FB      3198            mov     a,(_pwm_corr + 3)
0E1B 120000    3199            lcall   ___fsmul
0E1E AB82      3200            mov     r3,dpl
0E20 AC83      3201            mov     r4,dph
0E22 ADF0      3202            mov     r5,b
0E24 FE        3203            mov     r6,a
0E25 E581      3204            mov     a,sp
0E27 24FC      3205            add     a,#0xfc
0E29 F581      3206            mov     sp,a
0E2B C003      3207            push    ar3
0E2D C004      3208            push    ar4
0E2F C005      3209            push    ar5
0E31 C006      3210            push    ar6
0E33 900000    3211            mov     dptr,#0x0000
0E36 75F0C8    3212            mov     b,#0xC8
0E39 7442      3213            mov     a,#0x42
0E3B 120000    3214            lcall   ___fsmul
0E3E 8582A0    3215            mov     _main_sloc0_1_0,dpl
0E41 8583A1    3216            mov     (_main_sloc0_1_0 + 1),dph
0E44 85F0A2    3217            mov     (_main_sloc0_1_0 + 2),b
0E47 F5A3      3218            mov     (_main_sloc0_1_0 + 3),a
0E49 E581      3219            mov     a,sp
0E4B 24FC      3220            add     a,#0xfc
0E4D F581      3221            mov     sp,a
0E4F E5A0      3222            mov     a,_main_vy_error_1_148
0E51 2550      3223            add     a,_main_vx_error_1_148
0E53 F582      3224            mov     dpl,a
0E55 E5A1      3225            mov     a,(_main_vy_error_1_148 + 1)
0E57 3551      3226            addc    a,(_main_vx_error_1_148 + 1)
0E59 F583      3227            mov     dph,a
0E5B 120000    3228            lcall   ___sint2fs
0E5E AF82      3229            mov     r7,dpl
0E60 AB83      3230            mov     r3,dph
0E62 ACF0      3231            mov     r4,b
0E64 FD        3232            mov     r5,a
0E65 C007      3233            push    ar7
0E67 C003      3234            push    ar3
0E69 C004      3235            push    ar4
0E6B C005      3236            push    ar5
0E6D 85A082    3237            mov     dpl,_main_sloc0_1_0
0E70 85A183    3238            mov     dph,(_main_sloc0_1_0 + 1)
0E73 85A2F0    3239            mov     b,(_main_sloc0_1_0 + 2)
0E76 E5A3      3240            mov     a,(_main_sloc0_1_0 + 3)
0E78 120000    3241            lcall   ___fsdiv
0E7B AB82      3242            mov     r3,dpl
0E7D AC83      3243            mov     r4,dph
0E7F ADF0      3244            mov     r5,b
0E81 FE        3245            mov     r6,a
0E82 E581      3246            mov     a,sp
0E84 24FC      3247            add     a,#0xfc
0E86 F581      3248            mov     sp,a
0E88 8B82      3249            mov     dpl,r3
0E8A 8C83      3250            mov     dph,r4
0E8C 8DF0      3251            mov     b,r5
0E8E EE        3252            mov     a,r6
0E8F 120000    3253            lcall   ___fs2uchar
0E92 858278    3254            mov     _pwm_right,dpl
0E95 020000    3255            ljmp    L030027?
0E98           3256   L030024?:
0E98           3257   ;        main.c:769: if (vy*100<=vy_thres*100/2){
0E98 85C000    3258            mov     __mulint_PARM_2,_main_vy_1_148
0E9B 85C101    3259            mov     (__mulint_PARM_2 + 1),(_main_vy_1_148 + 1)
0E9E 900064    3260            mov     dptr,#0x0064
0EA1 120000    3261            lcall   __mulint
0EA4 AB82      3262            mov     r3,dpl
0EA6 AC83      3263            mov     r4,dph
0EA8 85F800    3264            mov     __mulint_PARM_2,_vy_thres
0EAB 85F901    3265            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0EAE 900064    3266            mov     dptr,#0x0064
0EB1 C003      3267            push    ar3
0EB3 C004      3268            push    ar4
0EB5 120000    3269            lcall   __mulint
0EB8 AD82      3270            mov     r5,dpl
0EBA AE83      3271            mov     r6,dph
0EBC 750002    3272            mov     __divsint_PARM_2,#0x02
0EBF E4        3273            clr     a
0EC0 F501      3274            mov     (__divsint_PARM_2 + 1),a
0EC2 8D82      3275            mov     dpl,r5
0EC4 8E83      3276            mov     dph,r6
0EC6 120000    3277            lcall   __divsint
0EC9 AD82      3278            mov     r5,dpl
0ECB AE83      3279            mov     r6,dph
0ECD D004      3280            pop     ar4
0ECF D003      3281            pop     ar3
0ED1 C3        3282            clr     c
0ED2 ED        3283            mov     a,r5
0ED3 9B        3284            subb    a,r3
0ED4 EE        3285            mov     a,r6
0ED5 6480      3286            xrl     a,#0x80
0ED7 8CF0      3287            mov     b,r4
0ED9 63F080    3288            xrl     b,#0x80
0EDC 95F0      3289            subb    a,b
0EDE 4000      3290            jc      L030021?
0EE0           3291   ;        main.c:770: pwm_left = vy_error*100/(vx_error+vy_error);
0EE0 85A000    3292            mov     __mulint_PARM_2,_main_vy_error_1_148
0EE3 85A101    3293            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_148 + 1)
0EE6 900064    3294            mov     dptr,#0x0064
0EE9 120000    3295            lcall   __mulint
0EEC AB82      3296            mov     r3,dpl
0EEE AC83      3297            mov     r4,dph
0EF0 E5A0      3298            mov     a,_main_vy_error_1_148
0EF2 2550      3299            add     a,_main_vx_error_1_148
0EF4 F500      3300            mov     __divsint_PARM_2,a
0EF6 E5A1      3301            mov     a,(_main_vy_error_1_148 + 1)
0EF8 3551      3302            addc    a,(_main_vx_error_1_148 + 1)
0EFA F501      3303            mov     (__divsint_PARM_2 + 1),a
0EFC 8B82      3304            mov     dpl,r3
0EFE 8C83      3305            mov     dph,r4
0F00 120000    3306            lcall   __divsint
0F03 AB82      3307            mov     r3,dpl
0F05 8BB8      3308            mov     _pwm_left,r3
0F07           3309   ;        main.c:771: pwm_right = vy_error*pwm_corr; 
0F07 85A082    3310            mov     dpl,_main_vy_error_1_148
0F0A 85A183    3311            mov     dph,(_main_vy_error_1_148 + 1)
0F0D 120000    3312            lcall   ___sint2fs
0F10 AB82      3313            mov     r3,dpl
0F12 AC83      3314            mov     r4,dph
0F14 ADF0      3315            mov     r5,b
0F16 FE        3316            mov     r6,a
0F17 C0F8      3317            push    _pwm_corr
0F19 C0F9      3318            push    (_pwm_corr + 1)
0F1B C0FA      3319            push    (_pwm_corr + 2)
0F1D C0FB      3320            push    (_pwm_corr + 3)
0F1F 8B82      3321            mov     dpl,r3
0F21 8C83      3322            mov     dph,r4
0F23 8DF0      3323            mov     b,r5
0F25 EE        3324            mov     a,r6
0F26 120000    3325            lcall   ___fsmul
0F29 AB82      3326            mov     r3,dpl
0F2B AC83      3327            mov     r4,dph
0F2D ADF0      3328            mov     r5,b
0F2F FE        3329            mov     r6,a
0F30 E581      3330            mov     a,sp
0F32 24FC      3331            add     a,#0xfc
0F34 F581      3332            mov     sp,a
0F36 8B82      3333            mov     dpl,r3
0F38 8C83      3334            mov     dph,r4
0F3A 8DF0      3335            mov     b,r5
0F3C EE        3336            mov     a,r6
0F3D 120000    3337            lcall   ___fs2uchar
0F40 858278    3338            mov     _pwm_right,dpl
0F43 8000      3339            sjmp    L030027?
0F45           3340   L030021?:
0F45           3341   ;        main.c:774: pwm_left = vx_error*100/(vx_error+vy_error);
0F45 855000    3342            mov     __mulint_PARM_2,_main_vx_error_1_148
0F48 855101    3343            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_148 + 1)
0F4B 900064    3344            mov     dptr,#0x0064
0F4E 120000    3345            lcall   __mulint
0F51 AB82      3346            mov     r3,dpl
0F53 AC83      3347            mov     r4,dph
0F55 E5A0      3348            mov     a,_main_vy_error_1_148
0F57 2550      3349            add     a,_main_vx_error_1_148
0F59 F500      3350            mov     __divsint_PARM_2,a
0F5B E5A1      3351            mov     a,(_main_vy_error_1_148 + 1)
0F5D 3551      3352            addc    a,(_main_vx_error_1_148 + 1)
0F5F F501      3353            mov     (__divsint_PARM_2 + 1),a
0F61 8B82      3354            mov     dpl,r3
0F63 8C83      3355            mov     dph,r4
0F65 120000    3356            lcall   __divsint
0F68 AB82      3357            mov     r3,dpl
0F6A 8BB8      3358            mov     _pwm_left,r3
0F6C           3359   ;        main.c:775: pwm_right = vx_error*pwm_corr; 
0F6C 855082    3360            mov     dpl,_main_vx_error_1_148
0F6F 855183    3361            mov     dph,(_main_vx_error_1_148 + 1)
0F72 120000    3362            lcall   ___sint2fs
0F75 AB82      3363            mov     r3,dpl
0F77 AC83      3364            mov     r4,dph
0F79 ADF0      3365            mov     r5,b
0F7B FE        3366            mov     r6,a
0F7C C0F8      3367            push    _pwm_corr
0F7E C0F9      3368            push    (_pwm_corr + 1)
0F80 C0FA      3369            push    (_pwm_corr + 2)
0F82 C0FB      3370            push    (_pwm_corr + 3)
0F84 8B82      3371            mov     dpl,r3
0F86 8C83      3372            mov     dph,r4
0F88 8DF0      3373            mov     b,r5
0F8A EE        3374            mov     a,r6
0F8B 120000    3375            lcall   ___fsmul
0F8E AB82      3376            mov     r3,dpl
0F90 AC83      3377            mov     r4,dph
0F92 ADF0      3378            mov     r5,b
0F94 FE        3379            mov     r6,a
0F95 E581      3380            mov     a,sp
0F97 24FC      3381            add     a,#0xfc
0F99 F581      3382            mov     sp,a
0F9B 8B82      3383            mov     dpl,r3
0F9D 8C83      3384            mov     dph,r4
0F9F 8DF0      3385            mov     b,r5
0FA1 EE        3386            mov     a,r6
0FA2 120000    3387            lcall   ___fs2uchar
0FA5 858278    3388            mov     _pwm_right,dpl
0FA8           3389   L030027?:
0FA8           3390   ;        main.c:780: if (vy_err<0){
0FA8 E541      3391            mov     a,(_main_vy_err_1_148 + 1)
0FAA 20E730    3392            jb      acc.7,L030100?
0FAD 020000    3393            ljmp    L030053?
0FB0           3394   L030100?:
0FB0           3395   ;        main.c:781: L_motor_dir = 1; 
0FB0 753801    3396            mov     _L_motor_dir,#0x01
0FB3           3397   ;        main.c:782: R_motor_dir = 1; 
0FB3 75F801    3398            mov     _R_motor_dir,#0x01
0FB6           3399   ;        main.c:784: if (vx_err>0){
0FB6 C3        3400            clr     c
0FB7 E4        3401            clr     a
0FB8 95F0      3402            subb    a,_main_vx_err_1_148
0FBA E4        3403            clr     a
0FBB 6480      3404            xrl     a,#0x80
0FBD 85F1F0    3405            mov     b,(_main_vx_err_1_148 + 1)
0FC0 63F080    3406            xrl     b,#0x80
0FC3 95F0      3407            subb    a,b
0FC5 4000      3408            jc      L030101?
0FC7 020000    3409            ljmp    L030035?
0FCA           3410   L030101?:
0FCA           3411   ;        main.c:785: if (vy*100<=vy_thres*100/2){
0FCA 85C000    3412            mov     __mulint_PARM_2,_main_vy_1_148
0FCD 85C101    3413            mov     (__mulint_PARM_2 + 1),(_main_vy_1_148 + 1)
0FD0 900064    3414            mov     dptr,#0x0064
0FD3 120000    3415            lcall   __mulint
0FD6 AB82      3416            mov     r3,dpl
0FD8 AC83      3417            mov     r4,dph
0FDA 85F800    3418            mov     __mulint_PARM_2,_vy_thres
0FDD 85F901    3419            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0FE0 900064    3420            mov     dptr,#0x0064
0FE3 C003      3421            push    ar3
0FE5 C004      3422            push    ar4
0FE7 120000    3423            lcall   __mulint
0FEA AD82      3424            mov     r5,dpl
0FEC AE83      3425            mov     r6,dph
0FEE 750002    3426            mov     __divsint_PARM_2,#0x02
0FF1 E4        3427            clr     a
0FF2 F501      3428            mov     (__divsint_PARM_2 + 1),a
0FF4 8D82      3429            mov     dpl,r5
0FF6 8E83      3430            mov     dph,r6
0FF8 120000    3431            lcall   __divsint
0FFB AD82      3432            mov     r5,dpl
0FFD AE83      3433            mov     r6,dph
0FFF D004      3434            pop     ar4
1001 D003      3435            pop     ar3
1003 C3        3436            clr     c
1004 ED        3437            mov     a,r5
1005 9B        3438            subb    a,r3
1006 EE        3439            mov     a,r6
1007 6480      3440            xrl     a,#0x80
1009 8CF0      3441            mov     b,r4
100B 63F080    3442            xrl     b,#0x80
100E 95F0      3443            subb    a,b
1010 5000      3444            jnc     L030102?
1012 020000    3445            ljmp    L030029?
1015           3446   L030102?:
1015           3447   ;        main.c:786: pwm_left = vy_error; 
1015 85A0B8    3448            mov     _pwm_left,_main_vy_error_1_148
1018           3449   ;        main.c:787: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
1018 85A082    3450            mov     dpl,_main_vy_error_1_148
101B 85A183    3451            mov     dph,(_main_vy_error_1_148 + 1)
101E 120000    3452            lcall   ___sint2fs
1021 AB82      3453            mov     r3,dpl
1023 AC83      3454            mov     r4,dph
1025 ADF0      3455            mov     r5,b
1027 FE        3456            mov     r6,a
1028 C003      3457            push    ar3
102A C004      3458            push    ar4
102C C005      3459            push    ar5
102E C006      3460            push    ar6
1030 85F882    3461            mov     dpl,_pwm_corr
1033 85F983    3462            mov     dph,(_pwm_corr + 1)
1036 85FAF0    3463            mov     b,(_pwm_corr + 2)
1039 E5FB      3464            mov     a,(_pwm_corr + 3)
103B 120000    3465            lcall   ___fsmul
103E AB82      3466            mov     r3,dpl
1040 AC83      3467            mov     r4,dph
1042 ADF0      3468            mov     r5,b
1044 FE        3469            mov     r6,a
1045 E581      3470            mov     a,sp
1047 24FC      3471            add     a,#0xfc
1049 F581      3472            mov     sp,a
104B C003      3473            push    ar3
104D C004      3474            push    ar4
104F C005      3475            push    ar5
1051 C006      3476            push    ar6
1053 900000    3477            mov     dptr,#0x0000
1056 75F0C8    3478            mov     b,#0xC8
1059 7442      3479            mov     a,#0x42
105B 120000    3480            lcall   ___fsmul
105E 8582A0    3481            mov     _main_sloc0_1_0,dpl
1061 8583A1    3482            mov     (_main_sloc0_1_0 + 1),dph
1064 85F0A2    3483            mov     (_main_sloc0_1_0 + 2),b
1067 F5A3      3484            mov     (_main_sloc0_1_0 + 3),a
1069 E581      3485            mov     a,sp
106B 24FC      3486            add     a,#0xfc
106D F581      3487            mov     sp,a
106F E5A0      3488            mov     a,_main_vy_error_1_148
1071 2550      3489            add     a,_main_vx_error_1_148
1073 F582      3490            mov     dpl,a
1075 E5A1      3491            mov     a,(_main_vy_error_1_148 + 1)
1077 3551      3492            addc    a,(_main_vx_error_1_148 + 1)
1079 F583      3493            mov     dph,a
107B 120000    3494            lcall   ___sint2fs
107E AF82      3495            mov     r7,dpl
1080 AB83      3496            mov     r3,dph
1082 ACF0      3497            mov     r4,b
1084 FD        3498            mov     r5,a
1085 C007      3499            push    ar7
1087 C003      3500            push    ar3
1089 C004      3501            push    ar4
108B C005      3502            push    ar5
108D 85A082    3503            mov     dpl,_main_sloc0_1_0
1090 85A183    3504            mov     dph,(_main_sloc0_1_0 + 1)
1093 85A2F0    3505            mov     b,(_main_sloc0_1_0 + 2)
1096 E5A3      3506            mov     a,(_main_sloc0_1_0 + 3)
1098 120000    3507            lcall   ___fsdiv
109B AB82      3508            mov     r3,dpl
109D AC83      3509            mov     r4,dph
109F ADF0      3510            mov     r5,b
10A1 FE        3511            mov     r6,a
10A2 E581      3512            mov     a,sp
10A4 24FC      3513            add     a,#0xfc
10A6 F581      3514            mov     sp,a
10A8 8B82      3515            mov     dpl,r3
10AA 8C83      3516            mov     dph,r4
10AC 8DF0      3517            mov     b,r5
10AE EE        3518            mov     a,r6
10AF 120000    3519            lcall   ___fs2uchar
10B2 858278    3520            mov     _pwm_right,dpl
10B5 020000    3521            ljmp    L030053?
10B8           3522   L030029?:
10B8           3523   ;        main.c:790: pwm_left = vx_error; 
10B8 8550B8    3524            mov     _pwm_left,_main_vx_error_1_148
10BB           3525   ;        main.c:791: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
10BB 855082    3526            mov     dpl,_main_vx_error_1_148
10BE 855183    3527            mov     dph,(_main_vx_error_1_148 + 1)
10C1 120000    3528            lcall   ___sint2fs
10C4 AB82      3529            mov     r3,dpl
10C6 AC83      3530            mov     r4,dph
10C8 ADF0      3531            mov     r5,b
10CA FE        3532            mov     r6,a
10CB C003      3533            push    ar3
10CD C004      3534            push    ar4
10CF C005      3535            push    ar5
10D1 C006      3536            push    ar6
10D3 85F882    3537            mov     dpl,_pwm_corr
10D6 85F983    3538            mov     dph,(_pwm_corr + 1)
10D9 85FAF0    3539            mov     b,(_pwm_corr + 2)
10DC E5FB      3540            mov     a,(_pwm_corr + 3)
10DE 120000    3541            lcall   ___fsmul
10E1 AB82      3542            mov     r3,dpl
10E3 AC83      3543            mov     r4,dph
10E5 ADF0      3544            mov     r5,b
10E7 FE        3545            mov     r6,a
10E8 E581      3546            mov     a,sp
10EA 24FC      3547            add     a,#0xfc
10EC F581      3548            mov     sp,a
10EE C003      3549            push    ar3
10F0 C004      3550            push    ar4
10F2 C005      3551            push    ar5
10F4 C006      3552            push    ar6
10F6 900000    3553            mov     dptr,#0x0000
10F9 75F0C8    3554            mov     b,#0xC8
10FC 7442      3555            mov     a,#0x42
10FE 120000    3556            lcall   ___fsmul
1101 8582A0    3557            mov     _main_sloc0_1_0,dpl
1104 8583A1    3558            mov     (_main_sloc0_1_0 + 1),dph
1107 85F0A2    3559            mov     (_main_sloc0_1_0 + 2),b
110A F5A3      3560            mov     (_main_sloc0_1_0 + 3),a
110C E581      3561            mov     a,sp
110E 24FC      3562            add     a,#0xfc
1110 F581      3563            mov     sp,a
1112 E5A0      3564            mov     a,_main_vy_error_1_148
1114 2550      3565            add     a,_main_vx_error_1_148
1116 F582      3566            mov     dpl,a
1118 E5A1      3567            mov     a,(_main_vy_error_1_148 + 1)
111A 3551      3568            addc    a,(_main_vx_error_1_148 + 1)
111C F583      3569            mov     dph,a
111E 120000    3570            lcall   ___sint2fs
1121 AF82      3571            mov     r7,dpl
1123 AB83      3572            mov     r3,dph
1125 ACF0      3573            mov     r4,b
1127 FD        3574            mov     r5,a
1128 C007      3575            push    ar7
112A C003      3576            push    ar3
112C C004      3577            push    ar4
112E C005      3578            push    ar5
1130 85A082    3579            mov     dpl,_main_sloc0_1_0
1133 85A183    3580            mov     dph,(_main_sloc0_1_0 + 1)
1136 85A2F0    3581            mov     b,(_main_sloc0_1_0 + 2)
1139 E5A3      3582            mov     a,(_main_sloc0_1_0 + 3)
113B 120000    3583            lcall   ___fsdiv
113E AB82      3584            mov     r3,dpl
1140 AC83      3585            mov     r4,dph
1142 ADF0      3586            mov     r5,b
1144 FE        3587            mov     r6,a
1145 E581      3588            mov     a,sp
1147 24FC      3589            add     a,#0xfc
1149 F581      3590            mov     sp,a
114B 8B82      3591            mov     dpl,r3
114D 8C83      3592            mov     dph,r4
114F 8DF0      3593            mov     b,r5
1151 EE        3594            mov     a,r6
1152 120000    3595            lcall   ___fs2uchar
1155 858278    3596            mov     _pwm_right,dpl
1158 020000    3597            ljmp    L030053?
115B           3598   L030035?:
115B           3599   ;        main.c:796: if (vy*100<=vy_thres*100/2){
115B 85C000    3600            mov     __mulint_PARM_2,_main_vy_1_148
115E 85C101    3601            mov     (__mulint_PARM_2 + 1),(_main_vy_1_148 + 1)
1161 900064    3602            mov     dptr,#0x0064
1164 120000    3603            lcall   __mulint
1167 AB82      3604            mov     r3,dpl
1169 AC83      3605            mov     r4,dph
116B 85F800    3606            mov     __mulint_PARM_2,_vy_thres
116E 85F901    3607            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
1171 900064    3608            mov     dptr,#0x0064
1174 C003      3609            push    ar3
1176 C004      3610            push    ar4
1178 120000    3611            lcall   __mulint
117B AD82      3612            mov     r5,dpl
117D AE83      3613            mov     r6,dph
117F 750002    3614            mov     __divsint_PARM_2,#0x02
1182 E4        3615            clr     a
1183 F501      3616            mov     (__divsint_PARM_2 + 1),a
1185 8D82      3617            mov     dpl,r5
1187 8E83      3618            mov     dph,r6
1189 120000    3619            lcall   __divsint
118C AD82      3620            mov     r5,dpl
118E AE83      3621            mov     r6,dph
1190 D004      3622            pop     ar4
1192 D003      3623            pop     ar3
1194 C3        3624            clr     c
1195 ED        3625            mov     a,r5
1196 9B        3626            subb    a,r3
1197 EE        3627            mov     a,r6
1198 6480      3628            xrl     a,#0x80
119A 8CF0      3629            mov     b,r4
119C 63F080    3630            xrl     b,#0x80
119F 95F0      3631            subb    a,b
11A1 4000      3632            jc      L030032?
11A3           3633   ;        main.c:797: pwm_left = vy_error*100/(vx_error+vy_error);
11A3 85A000    3634            mov     __mulint_PARM_2,_main_vy_error_1_148
11A6 85A101    3635            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_148 + 1)
11A9 900064    3636            mov     dptr,#0x0064
11AC 120000    3637            lcall   __mulint
11AF AB82      3638            mov     r3,dpl
11B1 AC83      3639            mov     r4,dph
11B3 E5A0      3640            mov     a,_main_vy_error_1_148
11B5 2550      3641            add     a,_main_vx_error_1_148
11B7 F500      3642            mov     __divsint_PARM_2,a
11B9 E5A1      3643            mov     a,(_main_vy_error_1_148 + 1)
11BB 3551      3644            addc    a,(_main_vx_error_1_148 + 1)
11BD F501      3645            mov     (__divsint_PARM_2 + 1),a
11BF 8B82      3646            mov     dpl,r3
11C1 8C83      3647            mov     dph,r4
11C3 120000    3648            lcall   __divsint
11C6 AB82      3649            mov     r3,dpl
11C8 8BB8      3650            mov     _pwm_left,r3
11CA           3651   ;        main.c:798: pwm_right =pwm_corr*vy_error; 
11CA 85A082    3652            mov     dpl,_main_vy_error_1_148
11CD 85A183    3653            mov     dph,(_main_vy_error_1_148 + 1)
11D0 120000    3654            lcall   ___sint2fs
11D3 AB82      3655            mov     r3,dpl
11D5 AC83      3656            mov     r4,dph
11D7 ADF0      3657            mov     r5,b
11D9 FE        3658            mov     r6,a
11DA C003      3659            push    ar3
11DC C004      3660            push    ar4
11DE C005      3661            push    ar5
11E0 C006      3662            push    ar6
11E2 85F882    3663            mov     dpl,_pwm_corr
11E5 85F983    3664            mov     dph,(_pwm_corr + 1)
11E8 85FAF0    3665            mov     b,(_pwm_corr + 2)
11EB E5FB      3666            mov     a,(_pwm_corr + 3)
11ED 120000    3667            lcall   ___fsmul
11F0 AB82      3668            mov     r3,dpl
11F2 AC83      3669            mov     r4,dph
11F4 ADF0      3670            mov     r5,b
11F6 FE        3671            mov     r6,a
11F7 E581      3672            mov     a,sp
11F9 24FC      3673            add     a,#0xfc
11FB F581      3674            mov     sp,a
11FD 8B82      3675            mov     dpl,r3
11FF 8C83      3676            mov     dph,r4
1201 8DF0      3677            mov     b,r5
1203 EE        3678            mov     a,r6
1204 120000    3679            lcall   ___fs2uchar
1207 858278    3680            mov     _pwm_right,dpl
120A 020000    3681            ljmp    L030053?
120D           3682   L030032?:
120D           3683   ;        main.c:801: pwm_left = vx_error*100/(vx_error+vy_error);
120D 855000    3684            mov     __mulint_PARM_2,_main_vx_error_1_148
1210 855101    3685            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_148 + 1)
1213 900064    3686            mov     dptr,#0x0064
1216 120000    3687            lcall   __mulint
1219 AB82      3688            mov     r3,dpl
121B AC83      3689            mov     r4,dph
121D E5A0      3690            mov     a,_main_vy_error_1_148
121F 2550      3691            add     a,_main_vx_error_1_148
1221 F500      3692            mov     __divsint_PARM_2,a
1223 E5A1      3693            mov     a,(_main_vy_error_1_148 + 1)
1225 3551      3694            addc    a,(_main_vx_error_1_148 + 1)
1227 F501      3695            mov     (__divsint_PARM_2 + 1),a
1229 8B82      3696            mov     dpl,r3
122B 8C83      3697            mov     dph,r4
122D 120000    3698            lcall   __divsint
1230 AB82      3699            mov     r3,dpl
1232 8BB8      3700            mov     _pwm_left,r3
1234           3701   ;        main.c:802: pwm_right = pwm_corr*vx_error; 
1234 855082    3702            mov     dpl,_main_vx_error_1_148
1237 855183    3703            mov     dph,(_main_vx_error_1_148 + 1)
123A 120000    3704            lcall   ___sint2fs
123D AB82      3705            mov     r3,dpl
123F AC83      3706            mov     r4,dph
1241 ADF0      3707            mov     r5,b
1243 FE        3708            mov     r6,a
1244 C003      3709            push    ar3
1246 C004      3710            push    ar4
1248 C005      3711            push    ar5
124A C006      3712            push    ar6
124C 85F882    3713            mov     dpl,_pwm_corr
124F 85F983    3714            mov     dph,(_pwm_corr + 1)
1252 85FAF0    3715            mov     b,(_pwm_corr + 2)
1255 E5FB      3716            mov     a,(_pwm_corr + 3)
1257 120000    3717            lcall   ___fsmul
125A AB82      3718            mov     r3,dpl
125C AC83      3719            mov     r4,dph
125E ADF0      3720            mov     r5,b
1260 FE        3721            mov     r6,a
1261 E581      3722            mov     a,sp
1263 24FC      3723            add     a,#0xfc
1265 F581      3724            mov     sp,a
1267 8B82      3725            mov     dpl,r3
1269 8C83      3726            mov     dph,r4
126B 8DF0      3727            mov     b,r5
126D EE        3728            mov     a,r6
126E 120000    3729            lcall   ___fs2uchar
1271 858278    3730            mov     _pwm_right,dpl
1274 020000    3731            ljmp    L030053?
1277           3732   L030043?:
1277           3733   ;        main.c:809: printf("*** BAD MESSAGE ***: %s\r\n", buff);
1277 7478      3734            mov     a,#_buff
1279 C0E0      3735            push    acc
127B 7446      3736            mov     a,#(_buff >> 8)
127D C0E0      3737            push    acc
127F 7440      3738            mov     a,#0x40
1281 C0E0      3739            push    acc
1283 74B0      3740            mov     a,#__str_19
1285 C0E0      3741            push    acc
1287 74EA      3742            mov     a,#(__str_19 >> 8)
1289 C0E0      3743            push    acc
128B 7480      3744            mov     a,#0x80
128D C0E0      3745            push    acc
128F 120000    3746            lcall   _printf
1292 E581      3747            mov     a,sp
1294 24FA      3748            add     a,#0xfa
1296 F581      3749            mov     sp,a
1298 020000    3750            ljmp    L030053?
129B           3751   L030048?:
129B           3752   ;        main.c:812: else if(c=='@') // Master wants slave data
129B BA40F0    3753            cjne    r2,#0x40,L030104?
129E 8000      3754            sjmp    L030105?
12A0           3755   L030104?:
12A0 020000    3756            ljmp    L030053?
12A3           3757   L030105?:
12A3           3758   ;        main.c:814: sprintf(buff, "0,00,%04ld\n", freq100);
12A3 C038      3759            push    _freq100
12A5 C039      3760            push    (_freq100 + 1)
12A7 C03A      3761            push    (_freq100 + 2)
12A9 C03B      3762            push    (_freq100 + 3)
12AB 7470      3763            mov     a,#__str_20
12AD C0E0      3764            push    acc
12AF 74EB      3765            mov     a,#(__str_20 >> 8)
12B1 C0E0      3766            push    acc
12B3 7480      3767            mov     a,#0x80
12B5 C0E0      3768            push    acc
12B7 7478      3769            mov     a,#_buff
12B9 C0E0      3770            push    acc
12BB 7446      3771            mov     a,#(_buff >> 8)
12BD C0E0      3772            push    acc
12BF 7440      3773            mov     a,#0x40
12C1 C0E0      3774            push    acc
12C3 120000    3775            lcall   _sprintf
12C6 E581      3776            mov     a,sp
12C8 24F6      3777            add     a,#0xf6
12CA F581      3778            mov     sp,a
12CC           3779   ;        main.c:815: waitms(5); // The radio seems to need this delay...
12CC 900005    3780            mov     dptr,#0x0005
12CF 120000    3781            lcall   _waitms
12D2           3782   ;        main.c:816: sendstr1(buff);
12D2 904678    3783            mov     dptr,#_buff
12D5 75F040    3784            mov     b,#0x40
12D8 120000    3785            lcall   _sendstr1
12DB 020000    3786            ljmp    L030053?
12DE           3787            rseg R_CSEG
12DE           3788   
0000           3789            rseg R_XINIT
0000           3790   
0000           3791            rseg R_CONST
0000           3792   __str_0:
0000 436F6D6D  3793            db 'Command: %s'
     616E643A
     202573
000B 00        3794            db 0x00
000C           3795   __str_1:
000C 52657370  3796            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        3797            db 0x0D
0019 0A        3798            db 0x0A
001A 00        3799            db 0x00
001B           3800   __str_2:
001B 41542B44  3801            db 'AT+DVID0000'
     56494430
     303030
0026 0D        3802            db 0x0D
0027 0A        3803            db 0x0A
0028 00        3804            db 0x00
0029           3805   __str_3:
0029 25303364  3806            db '%03d,%03d,%01d,%01d'
     2C253033
     642C2530
     31642C25
     303164
003C 00        3807            db 0x00
003D           3808   __str_4:
003D 25303164  3809            db '%01d,%02d,%ld'
     2C253032
     642C256C
     64
004A 0A        3810            db 0x0A
004B 00        3811            db 0x00
004C           3812   __str_5:
004C 663A2530  3813            db 'f:%04ld, d1:%d, d2:%d, bound_dectect: %d'
     346C642C
     2064313A
     25642C20
     64323A25
     642C2062
     6F756E64
     5F646563
     74656374
     3A202564
0074 0D        3814            db 0x0D
0075 0A        3815            db 0x0A
0076 00        3816            db 0x00
0077           3817   __str_6:
0077 5475726E  3818            db 'Turn!!! %d'
     21212120
     2564
0081 0D        3819            db 0x0D
0082 0A        3820            db 0x0A
0083 00        3821            db 0x00
0084           3822   __str_7:
0084 4175746F  3823            db 'Auto mode finished!'
     206D6F64
     65206669
     6E697368
     656421
0097 0D        3824            db 0x0D
0098 0A        3825            db 0x0A
0099 00        3826            db 0x00
009A           3827   __str_8:
009A 0D        3828            db 0x0D
009B 0A        3829            db 0x0A
009C 45464D38  3830            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
00B7 0D        3831            db 0x0D
00B8 0A        3832            db 0x0A
00B9 00        3833            db 0x00
00BA           3834   __str_9:
00BA 41542B56  3835            db 'AT+VER'
     4552
00C0 0D        3836            db 0x0D
00C1 0A        3837            db 0x0A
00C2 00        3838            db 0x00
00C3           3839   __str_10:
00C3 41542B42  3840            db 'AT+BAUD'
     415544
00CA 0D        3841            db 0x0D
00CB 0A        3842            db 0x0A
00CC 00        3843            db 0x00
00CD           3844   __str_11:
00CD 41542B52  3845            db 'AT+RFID'
     464944
00D4 0D        3846            db 0x0D
00D5 0A        3847            db 0x0A
00D6 00        3848            db 0x00
00D7           3849   __str_12:
00D7 41542B44  3850            db 'AT+DVID'
     564944
00DE 0D        3851            db 0x0D
00DF 0A        3852            db 0x0A
00E0 00        3853            db 0x00
00E1           3854   __str_13:
00E1 41542B52  3855            db 'AT+RFC002'
     46433030
     32
00EA 0D        3856            db 0x0D
00EB 0A        3857            db 0x0A
00EC 00        3858            db 0x00
00ED           3859   __str_14:
00ED 41542B50  3860            db 'AT+POWE'
     4F5745
00F4 0D        3861            db 0x0D
00F5 0A        3862            db 0x0A
00F6 00        3863            db 0x00
00F7           3864   __str_15:
00F7 41542B43  3865            db 'AT+CLSS'
     4C5353
00FE 0D        3866            db 0x0D
00FF 0A        3867            db 0x0A
0100 00        3868            db 0x00
0101           3869   __str_16:
0101 41542B44  3870            db 'AT+DVIDEF11'
     56494445
     463131
010C 0D        3871            db 0x0D
010D 0A        3872            db 0x0A
010E 00        3873            db 0x00
010F           3874   __str_17:
010F 4D617374  3875            db 'Master says: %s,'
     65722073
     6179733A
     2025732C
011F 0D        3876            db 0x0D
0120 0A        3877            db 0x0A
0121 00        3878            db 0x00
0122           3879   __str_18:
0122 4A6F7973  3880            db 'Joystick Received: Vx = %03d, Vy = %03d, Order = %01d, Auto '
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25303364
     2C205679
     203D2025
     3033642C
     204F7264
     6572203D
     20253031
     642C2041
     75746F20
015E 3D202530  3881            db '= %01d'
     3164
0164 0D        3882            db 0x0D
0165 0A        3883            db 0x0A
0166 00        3884            db 0x00
0167           3885   __str_19:
0167 2A2A2A20  3886            db '*** BAD MESSAGE ***: %s'
     42414420
     4D455353
     41474520
     2A2A2A3A
     202573
017E 0D        3887            db 0x0D
017F 0A        3888            db 0x0A
0180 00        3889            db 0x00
0181           3890   __str_20:
0181 302C3030  3891            db '0,00,%04ld'
     2C253034
     6C64
018B 0A        3892            db 0x0A
018C 00        3893            db 0x00
018D           3894   
0096           3895            CSEG
0096           3896   
0096           3897   end
