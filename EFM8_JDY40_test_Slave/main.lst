0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Apr 03 05:06:09 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _check_bound_PARM_2
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Joystick_Control
0000             30            public _Auto_mode_slave
0000             31            public _Read_angle
0000             32            public _get_random_90_250
0000             33            public _simple_rand
0000             34            public _Move_forward
0000             35            public _Right_angle
0000             36            public _Move_back_ms
0000             37            public _Init_all
0000             38            public _check_bound
0000             39            public _servo_moveaway
0000             40            public _Move_forward_ms
0000             41            public _servo_push
0000             42            public _servo_pick
0000             43            public _Timer5_ISR
0000             44            public _ReadHX711
0000             45            public _ADC_at_Pin
0000             46            public _InitPinADC
0000             47            public _InitADC
0000             48            public _Set_Pin_Input
0000             49            public _Set_Pin_Output
0000             50            public _measure_distance
0000             51            public _ReceptionOff
0000             52            public _SendATCommand
0000             53            public _waitms_or_RI1
0000             54            public _RXU1
0000             55            public _getstr1
0000             56            public _getchar1_with_timeout
0000             57            public _getchar1
0000             58            public _sendstr1
0000             59            public _putchar1
0000             60            public _UART1_Init
0000             61            public _BMM150_Read_Data
0000             62            public _BMM150_compensate_y
0000             63            public _BMM150_compensate_x
0000             64            public _BMM150_Init
0000             65            public _BMM150_Read_Trim_Registers
0000             66            public _SPI_write
0000             67            public _SPI_read
0000             68            public _SPI_transfer
0000             69            public _waitms
0000             70            public _Timer3us
0000             71            public __c51_external_startup
0000             72            public _pick
0000             73            public _auto_mode
0000             74            public _duration
0000             75            public _weight
0000             76            public _mea_yes
0000             77            public _angle_diff
0000             78            public _last_raw_angle
0000             79            public _raw_angle
0000             80            public _curr_angle
0000             81            public _pwm_corr
0000             82            public _seed
0000             83            public _weight_mea_count
0000             84            public _fre_mea_count
0000             85            public _vy
0000             86            public _vx
0000             87            public _vy_thres
0000             88            public _vx_thres
0000             89            public _servo_arm
0000             90            public _servo_base
0000             91            public _R_motor_dir
0000             92            public _L_motor_dir
0000             93            public _pwm_right
0000             94            public _pwm_left
0000             95            public _servo_counter
0000             96            public _pwm_counter
0000             97            public _i
0000             98            public _i_loo
0000             99            public _overflow_count
0000            100            public _distance
0000            101            public _dig_xyz1
0000            102            public _dig_xy2
0000            103            public _dig_xy1
0000            104            public _dig_z4
0000            105            public _dig_z3
0000            106            public _dig_z2
0000            107            public _dig_z1
0000            108            public _dig_y2
0000            109            public _dig_y1
0000            110            public _dig_x2
0000            111            public _dig_x1
0000            112            public _d2
0000            113            public _d1
0000            114            public _freq100
0000            115            public _buff
0000            116            public _Joystick_Control_PARM_2
0000            117            public _getstr1_PARM_2
0000            118            public _BMM150_Read_Data_PARM_2
0000            119            public _BMM150_compensate_y_PARM_2
0000            120            public _BMM150_compensate_x_PARM_2
0000            121            public _SPI_write_PARM_2
0000            122   ;--------------------------------------------------------
0000            123   ; Special Function Registers
0000            124   ;--------------------------------------------------------
0000            125   _ACC            DATA 0xe0
0000            126   _ADC0ASAH       DATA 0xb6
0000            127   _ADC0ASAL       DATA 0xb5
0000            128   _ADC0ASCF       DATA 0xa1
0000            129   _ADC0ASCT       DATA 0xc7
0000            130   _ADC0CF0        DATA 0xbc
0000            131   _ADC0CF1        DATA 0xb9
0000            132   _ADC0CF2        DATA 0xdf
0000            133   _ADC0CN0        DATA 0xe8
0000            134   _ADC0CN1        DATA 0xb2
0000            135   _ADC0CN2        DATA 0xb3
0000            136   _ADC0GTH        DATA 0xc4
0000            137   _ADC0GTL        DATA 0xc3
0000            138   _ADC0H          DATA 0xbe
0000            139   _ADC0L          DATA 0xbd
0000            140   _ADC0LTH        DATA 0xc6
0000            141   _ADC0LTL        DATA 0xc5
0000            142   _ADC0MX         DATA 0xbb
0000            143   _B              DATA 0xf0
0000            144   _CKCON0         DATA 0x8e
0000            145   _CKCON1         DATA 0xa6
0000            146   _CLEN0          DATA 0xc6
0000            147   _CLIE0          DATA 0xc7
0000            148   _CLIF0          DATA 0xe8
0000            149   _CLKSEL         DATA 0xa9
0000            150   _CLOUT0         DATA 0xd1
0000            151   _CLU0CF         DATA 0xb1
0000            152   _CLU0FN         DATA 0xaf
0000            153   _CLU0MX         DATA 0x84
0000            154   _CLU1CF         DATA 0xb3
0000            155   _CLU1FN         DATA 0xb2
0000            156   _CLU1MX         DATA 0x85
0000            157   _CLU2CF         DATA 0xb6
0000            158   _CLU2FN         DATA 0xb5
0000            159   _CLU2MX         DATA 0x91
0000            160   _CLU3CF         DATA 0xbf
0000            161   _CLU3FN         DATA 0xbe
0000            162   _CLU3MX         DATA 0xae
0000            163   _CMP0CN0        DATA 0x9b
0000            164   _CMP0CN1        DATA 0x99
0000            165   _CMP0MD         DATA 0x9d
0000            166   _CMP0MX         DATA 0x9f
0000            167   _CMP1CN0        DATA 0xbf
0000            168   _CMP1CN1        DATA 0xac
0000            169   _CMP1MD         DATA 0xab
0000            170   _CMP1MX         DATA 0xaa
0000            171   _CRC0CN0        DATA 0xce
0000            172   _CRC0CN1        DATA 0x86
0000            173   _CRC0CNT        DATA 0xd3
0000            174   _CRC0DAT        DATA 0xcb
0000            175   _CRC0FLIP       DATA 0xcf
0000            176   _CRC0IN         DATA 0xca
0000            177   _CRC0ST         DATA 0xd2
0000            178   _DAC0CF0        DATA 0x91
0000            179   _DAC0CF1        DATA 0x92
0000            180   _DAC0H          DATA 0x85
0000            181   _DAC0L          DATA 0x84
0000            182   _DAC1CF0        DATA 0x93
0000            183   _DAC1CF1        DATA 0x94
0000            184   _DAC1H          DATA 0x8a
0000            185   _DAC1L          DATA 0x89
0000            186   _DAC2CF0        DATA 0x95
0000            187   _DAC2CF1        DATA 0x96
0000            188   _DAC2H          DATA 0x8c
0000            189   _DAC2L          DATA 0x8b
0000            190   _DAC3CF0        DATA 0x9a
0000            191   _DAC3CF1        DATA 0x9c
0000            192   _DAC3H          DATA 0x8e
0000            193   _DAC3L          DATA 0x8d
0000            194   _DACGCF0        DATA 0x88
0000            195   _DACGCF1        DATA 0x98
0000            196   _DACGCF2        DATA 0xa2
0000            197   _DERIVID        DATA 0xad
0000            198   _DEVICEID       DATA 0xb5
0000            199   _DPH            DATA 0x83
0000            200   _DPL            DATA 0x82
0000            201   _EIE1           DATA 0xe6
0000            202   _EIE2           DATA 0xf3
0000            203   _EIP1           DATA 0xbb
0000            204   _EIP1H          DATA 0xee
0000            205   _EIP2           DATA 0xed
0000            206   _EIP2H          DATA 0xf6
0000            207   _EMI0CN         DATA 0xe7
0000            208   _FLKEY          DATA 0xb7
0000            209   _HFO0CAL        DATA 0xc7
0000            210   _HFO1CAL        DATA 0xd6
0000            211   _HFOCN          DATA 0xef
0000            212   _I2C0ADM        DATA 0xff
0000            213   _I2C0CN0        DATA 0xba
0000            214   _I2C0DIN        DATA 0xbc
0000            215   _I2C0DOUT       DATA 0xbb
0000            216   _I2C0FCN0       DATA 0xad
0000            217   _I2C0FCN1       DATA 0xab
0000            218   _I2C0FCT        DATA 0xf5
0000            219   _I2C0SLAD       DATA 0xbd
0000            220   _I2C0STAT       DATA 0xb9
0000            221   _IE             DATA 0xa8
0000            222   _IP             DATA 0xb8
0000            223   _IPH            DATA 0xf2
0000            224   _IT01CF         DATA 0xe4
0000            225   _LFO0CN         DATA 0xb1
0000            226   _P0             DATA 0x80
0000            227   _P0MASK         DATA 0xfe
0000            228   _P0MAT          DATA 0xfd
0000            229   _P0MDIN         DATA 0xf1
0000            230   _P0MDOUT        DATA 0xa4
0000            231   _P0SKIP         DATA 0xd4
0000            232   _P1             DATA 0x90
0000            233   _P1MASK         DATA 0xee
0000            234   _P1MAT          DATA 0xed
0000            235   _P1MDIN         DATA 0xf2
0000            236   _P1MDOUT        DATA 0xa5
0000            237   _P1SKIP         DATA 0xd5
0000            238   _P2             DATA 0xa0
0000            239   _P2MASK         DATA 0xfc
0000            240   _P2MAT          DATA 0xfb
0000            241   _P2MDIN         DATA 0xf3
0000            242   _P2MDOUT        DATA 0xa6
0000            243   _P2SKIP         DATA 0xcc
0000            244   _P3             DATA 0xb0
0000            245   _P3MDIN         DATA 0xf4
0000            246   _P3MDOUT        DATA 0x9c
0000            247   _PCA0CENT       DATA 0x9e
0000            248   _PCA0CLR        DATA 0x9c
0000            249   _PCA0CN0        DATA 0xd8
0000            250   _PCA0CPH0       DATA 0xfc
0000            251   _PCA0CPH1       DATA 0xea
0000            252   _PCA0CPH2       DATA 0xec
0000            253   _PCA0CPH3       DATA 0xf5
0000            254   _PCA0CPH4       DATA 0x85
0000            255   _PCA0CPH5       DATA 0xde
0000            256   _PCA0CPL0       DATA 0xfb
0000            257   _PCA0CPL1       DATA 0xe9
0000            258   _PCA0CPL2       DATA 0xeb
0000            259   _PCA0CPL3       DATA 0xf4
0000            260   _PCA0CPL4       DATA 0x84
0000            261   _PCA0CPL5       DATA 0xdd
0000            262   _PCA0CPM0       DATA 0xda
0000            263   _PCA0CPM1       DATA 0xdb
0000            264   _PCA0CPM2       DATA 0xdc
0000            265   _PCA0CPM3       DATA 0xae
0000            266   _PCA0CPM4       DATA 0xaf
0000            267   _PCA0CPM5       DATA 0xcc
0000            268   _PCA0H          DATA 0xfa
0000            269   _PCA0L          DATA 0xf9
0000            270   _PCA0MD         DATA 0xd9
0000            271   _PCA0POL        DATA 0x96
0000            272   _PCA0PWM        DATA 0xf7
0000            273   _PCON0          DATA 0x87
0000            274   _PCON1          DATA 0xcd
0000            275   _PFE0CN         DATA 0xc1
0000            276   _PRTDRV         DATA 0xf6
0000            277   _PSCTL          DATA 0x8f
0000            278   _PSTAT0         DATA 0xaa
0000            279   _PSW            DATA 0xd0
0000            280   _REF0CN         DATA 0xd1
0000            281   _REG0CN         DATA 0xc9
0000            282   _REVID          DATA 0xb6
0000            283   _RSTSRC         DATA 0xef
0000            284   _SBCON1         DATA 0x94
0000            285   _SBRLH1         DATA 0x96
0000            286   _SBRLL1         DATA 0x95
0000            287   _SBUF           DATA 0x99
0000            288   _SBUF0          DATA 0x99
0000            289   _SBUF1          DATA 0x92
0000            290   _SCON           DATA 0x98
0000            291   _SCON0          DATA 0x98
0000            292   _SCON1          DATA 0xc8
0000            293   _SFRPAGE        DATA 0xa7
0000            294   _SFRPGCN        DATA 0xbc
0000            295   _SFRSTACK       DATA 0xd7
0000            296   _SMB0ADM        DATA 0xd6
0000            297   _SMB0ADR        DATA 0xd7
0000            298   _SMB0CF         DATA 0xc1
0000            299   _SMB0CN0        DATA 0xc0
0000            300   _SMB0DAT        DATA 0xc2
0000            301   _SMB0FCN0       DATA 0xc3
0000            302   _SMB0FCN1       DATA 0xc4
0000            303   _SMB0FCT        DATA 0xef
0000            304   _SMB0RXLN       DATA 0xc5
0000            305   _SMB0TC         DATA 0xac
0000            306   _SMOD1          DATA 0x93
0000            307   _SP             DATA 0x81
0000            308   _SPI0CFG        DATA 0xa1
0000            309   _SPI0CKR        DATA 0xa2
0000            310   _SPI0CN0        DATA 0xf8
0000            311   _SPI0DAT        DATA 0xa3
0000            312   _SPI0FCN0       DATA 0x9a
0000            313   _SPI0FCN1       DATA 0x9b
0000            314   _SPI0FCT        DATA 0xf7
0000            315   _SPI0PCF        DATA 0xdf
0000            316   _TCON           DATA 0x88
0000            317   _TH0            DATA 0x8c
0000            318   _TH1            DATA 0x8d
0000            319   _TL0            DATA 0x8a
0000            320   _TL1            DATA 0x8b
0000            321   _TMOD           DATA 0x89
0000            322   _TMR2CN0        DATA 0xc8
0000            323   _TMR2CN1        DATA 0xfd
0000            324   _TMR2H          DATA 0xcf
0000            325   _TMR2L          DATA 0xce
0000            326   _TMR2RLH        DATA 0xcb
0000            327   _TMR2RLL        DATA 0xca
0000            328   _TMR3CN0        DATA 0x91
0000            329   _TMR3CN1        DATA 0xfe
0000            330   _TMR3H          DATA 0x95
0000            331   _TMR3L          DATA 0x94
0000            332   _TMR3RLH        DATA 0x93
0000            333   _TMR3RLL        DATA 0x92
0000            334   _TMR4CN0        DATA 0x98
0000            335   _TMR4CN1        DATA 0xff
0000            336   _TMR4H          DATA 0xa5
0000            337   _TMR4L          DATA 0xa4
0000            338   _TMR4RLH        DATA 0xa3
0000            339   _TMR4RLL        DATA 0xa2
0000            340   _TMR5CN0        DATA 0xc0
0000            341   _TMR5CN1        DATA 0xf1
0000            342   _TMR5H          DATA 0xd5
0000            343   _TMR5L          DATA 0xd4
0000            344   _TMR5RLH        DATA 0xd3
0000            345   _TMR5RLL        DATA 0xd2
0000            346   _UART0PCF       DATA 0xd9
0000            347   _UART1FCN0      DATA 0x9d
0000            348   _UART1FCN1      DATA 0xd8
0000            349   _UART1FCT       DATA 0xfa
0000            350   _UART1LIN       DATA 0x9e
0000            351   _UART1PCF       DATA 0xda
0000            352   _VDM0CN         DATA 0xff
0000            353   _WDTCN          DATA 0x97
0000            354   _XBR0           DATA 0xe1
0000            355   _XBR1           DATA 0xe2
0000            356   _XBR2           DATA 0xe3
0000            357   _XOSC0CN        DATA 0x86
0000            358   _DPTR           DATA 0x8382
0000            359   _TMR2RL         DATA 0xcbca
0000            360   _TMR3RL         DATA 0x9392
0000            361   _TMR4RL         DATA 0xa3a2
0000            362   _TMR5RL         DATA 0xd3d2
0000            363   _TMR0           DATA 0x8c8a
0000            364   _TMR1           DATA 0x8d8b
0000            365   _TMR2           DATA 0xcfce
0000            366   _TMR3           DATA 0x9594
0000            367   _TMR4           DATA 0xa5a4
0000            368   _TMR5           DATA 0xd5d4
0000            369   _SBRL1          DATA 0x9695
0000            370   _PCA0           DATA 0xfaf9
0000            371   _PCA0CP0        DATA 0xfcfb
0000            372   _PCA0CP1        DATA 0xeae9
0000            373   _PCA0CP2        DATA 0xeceb
0000            374   _PCA0CP3        DATA 0xf5f4
0000            375   _PCA0CP4        DATA 0x8584
0000            376   _PCA0CP5        DATA 0xdedd
0000            377   _ADC0ASA        DATA 0xb6b5
0000            378   _ADC0GT         DATA 0xc4c3
0000            379   _ADC0           DATA 0xbebd
0000            380   _ADC0LT         DATA 0xc6c5
0000            381   _DAC0           DATA 0x8584
0000            382   _DAC1           DATA 0x8a89
0000            383   _DAC2           DATA 0x8c8b
0000            384   _DAC3           DATA 0x8e8d
0000            385   ;--------------------------------------------------------
0000            386   ; special function bits
0000            387   ;--------------------------------------------------------
0000            388   _ACC_0          BIT 0xe0
0000            389   _ACC_1          BIT 0xe1
0000            390   _ACC_2          BIT 0xe2
0000            391   _ACC_3          BIT 0xe3
0000            392   _ACC_4          BIT 0xe4
0000            393   _ACC_5          BIT 0xe5
0000            394   _ACC_6          BIT 0xe6
0000            395   _ACC_7          BIT 0xe7
0000            396   _TEMPE          BIT 0xe8
0000            397   _ADGN0          BIT 0xe9
0000            398   _ADGN1          BIT 0xea
0000            399   _ADWINT         BIT 0xeb
0000            400   _ADBUSY         BIT 0xec
0000            401   _ADINT          BIT 0xed
0000            402   _IPOEN          BIT 0xee
0000            403   _ADEN           BIT 0xef
0000            404   _B_0            BIT 0xf0
0000            405   _B_1            BIT 0xf1
0000            406   _B_2            BIT 0xf2
0000            407   _B_3            BIT 0xf3
0000            408   _B_4            BIT 0xf4
0000            409   _B_5            BIT 0xf5
0000            410   _B_6            BIT 0xf6
0000            411   _B_7            BIT 0xf7
0000            412   _C0FIF          BIT 0xe8
0000            413   _C0RIF          BIT 0xe9
0000            414   _C1FIF          BIT 0xea
0000            415   _C1RIF          BIT 0xeb
0000            416   _C2FIF          BIT 0xec
0000            417   _C2RIF          BIT 0xed
0000            418   _C3FIF          BIT 0xee
0000            419   _C3RIF          BIT 0xef
0000            420   _D1SRC0         BIT 0x88
0000            421   _D1SRC1         BIT 0x89
0000            422   _D1AMEN         BIT 0x8a
0000            423   _D01REFSL       BIT 0x8b
0000            424   _D3SRC0         BIT 0x8c
0000            425   _D3SRC1         BIT 0x8d
0000            426   _D3AMEN         BIT 0x8e
0000            427   _D23REFSL       BIT 0x8f
0000            428   _D0UDIS         BIT 0x98
0000            429   _D1UDIS         BIT 0x99
0000            430   _D2UDIS         BIT 0x9a
0000            431   _D3UDIS         BIT 0x9b
0000            432   _EX0            BIT 0xa8
0000            433   _ET0            BIT 0xa9
0000            434   _EX1            BIT 0xaa
0000            435   _ET1            BIT 0xab
0000            436   _ES0            BIT 0xac
0000            437   _ET2            BIT 0xad
0000            438   _ESPI0          BIT 0xae
0000            439   _EA             BIT 0xaf
0000            440   _PX0            BIT 0xb8
0000            441   _PT0            BIT 0xb9
0000            442   _PX1            BIT 0xba
0000            443   _PT1            BIT 0xbb
0000            444   _PS0            BIT 0xbc
0000            445   _PT2            BIT 0xbd
0000            446   _PSPI0          BIT 0xbe
0000            447   _P0_0           BIT 0x80
0000            448   _P0_1           BIT 0x81
0000            449   _P0_2           BIT 0x82
0000            450   _P0_3           BIT 0x83
0000            451   _P0_4           BIT 0x84
0000            452   _P0_5           BIT 0x85
0000            453   _P0_6           BIT 0x86
0000            454   _P0_7           BIT 0x87
0000            455   _P1_0           BIT 0x90
0000            456   _P1_1           BIT 0x91
0000            457   _P1_2           BIT 0x92
0000            458   _P1_3           BIT 0x93
0000            459   _P1_4           BIT 0x94
0000            460   _P1_5           BIT 0x95
0000            461   _P1_6           BIT 0x96
0000            462   _P1_7           BIT 0x97
0000            463   _P2_0           BIT 0xa0
0000            464   _P2_1           BIT 0xa1
0000            465   _P2_2           BIT 0xa2
0000            466   _P2_3           BIT 0xa3
0000            467   _P2_4           BIT 0xa4
0000            468   _P2_5           BIT 0xa5
0000            469   _P2_6           BIT 0xa6
0000            470   _P3_0           BIT 0xb0
0000            471   _P3_1           BIT 0xb1
0000            472   _P3_2           BIT 0xb2
0000            473   _P3_3           BIT 0xb3
0000            474   _P3_4           BIT 0xb4
0000            475   _P3_7           BIT 0xb7
0000            476   _CCF0           BIT 0xd8
0000            477   _CCF1           BIT 0xd9
0000            478   _CCF2           BIT 0xda
0000            479   _CCF3           BIT 0xdb
0000            480   _CCF4           BIT 0xdc
0000            481   _CCF5           BIT 0xdd
0000            482   _CR             BIT 0xde
0000            483   _CF             BIT 0xdf
0000            484   _PARITY         BIT 0xd0
0000            485   _F1             BIT 0xd1
0000            486   _OV             BIT 0xd2
0000            487   _RS0            BIT 0xd3
0000            488   _RS1            BIT 0xd4
0000            489   _F0             BIT 0xd5
0000            490   _AC             BIT 0xd6
0000            491   _CY             BIT 0xd7
0000            492   _RI             BIT 0x98
0000            493   _TI             BIT 0x99
0000            494   _RB8            BIT 0x9a
0000            495   _TB8            BIT 0x9b
0000            496   _REN            BIT 0x9c
0000            497   _CE             BIT 0x9d
0000            498   _SMODE          BIT 0x9e
0000            499   _RI1            BIT 0xc8
0000            500   _TI1            BIT 0xc9
0000            501   _RBX1           BIT 0xca
0000            502   _TBX1           BIT 0xcb
0000            503   _REN1           BIT 0xcc
0000            504   _PERR1          BIT 0xcd
0000            505   _OVR1           BIT 0xce
0000            506   _SI             BIT 0xc0
0000            507   _ACK            BIT 0xc1
0000            508   _ARBLOST        BIT 0xc2
0000            509   _ACKRQ          BIT 0xc3
0000            510   _STO            BIT 0xc4
0000            511   _STA            BIT 0xc5
0000            512   _TXMODE         BIT 0xc6
0000            513   _MASTER         BIT 0xc7
0000            514   _SPIEN          BIT 0xf8
0000            515   _TXNF           BIT 0xf9
0000            516   _NSSMD0         BIT 0xfa
0000            517   _NSSMD1         BIT 0xfb
0000            518   _RXOVRN         BIT 0xfc
0000            519   _MODF           BIT 0xfd
0000            520   _WCOL           BIT 0xfe
0000            521   _SPIF           BIT 0xff
0000            522   _IT0            BIT 0x88
0000            523   _IE0            BIT 0x89
0000            524   _IT1            BIT 0x8a
0000            525   _IE1            BIT 0x8b
0000            526   _TR0            BIT 0x8c
0000            527   _TF0            BIT 0x8d
0000            528   _TR1            BIT 0x8e
0000            529   _TF1            BIT 0x8f
0000            530   _T2XCLK0        BIT 0xc8
0000            531   _T2XCLK1        BIT 0xc9
0000            532   _TR2            BIT 0xca
0000            533   _T2SPLIT        BIT 0xcb
0000            534   _TF2CEN         BIT 0xcc
0000            535   _TF2LEN         BIT 0xcd
0000            536   _TF2L           BIT 0xce
0000            537   _TF2H           BIT 0xcf
0000            538   _T4XCLK0        BIT 0x98
0000            539   _T4XCLK1        BIT 0x99
0000            540   _TR4            BIT 0x9a
0000            541   _T4SPLIT        BIT 0x9b
0000            542   _TF4CEN         BIT 0x9c
0000            543   _TF4LEN         BIT 0x9d
0000            544   _TF4L           BIT 0x9e
0000            545   _TF4H           BIT 0x9f
0000            546   _T5XCLK0        BIT 0xc0
0000            547   _T5XCLK1        BIT 0xc1
0000            548   _TR5            BIT 0xc2
0000            549   _T5SPLIT        BIT 0xc3
0000            550   _TF5CEN         BIT 0xc4
0000            551   _TF5LEN         BIT 0xc5
0000            552   _TF5L           BIT 0xc6
0000            553   _TF5H           BIT 0xc7
0000            554   _RIE            BIT 0xd8
0000            555   _RXTO0          BIT 0xd9
0000            556   _RXTO1          BIT 0xda
0000            557   _RFRQ           BIT 0xdb
0000            558   _TIE            BIT 0xdc
0000            559   _TXHOLD         BIT 0xdd
0000            560   _TXNF1          BIT 0xde
0000            561   _TFRQ           BIT 0xdf
0000            562   ;--------------------------------------------------------
0000            563   ; overlayable register banks
0000            564   ;--------------------------------------------------------
0000            565            rbank0 segment data overlay
0000            566   ;--------------------------------------------------------
0000            567   ; overlayable bit register bank
0000            568   ;--------------------------------------------------------
0000            569            rseg BIT_BANK
0000            570   bits:
0000            571            ds 1
0001            572            b0 equ  bits.0 
0001            573            b1 equ  bits.1 
0001            574            b2 equ  bits.2 
0001            575            b3 equ  bits.3 
0001            576            b4 equ  bits.4 
0001            577            b5 equ  bits.5 
0001            578            b6 equ  bits.6 
0001            579            b7 equ  bits.7 
0001            580   ;--------------------------------------------------------
0001            581   ; internal ram data
0001            582   ;--------------------------------------------------------
0000            583            rseg R_DSEG
0000            584   _SPI_write_PARM_2:
0000            585            ds 1
0001            586   _BMM150_compensate_x_PARM_2:
0001            587            ds 3
0004            588   _BMM150_compensate_x_sloc0_1_0:
0004            589            ds 4
0008            590   _BMM150_compensate_y_PARM_2:
0008            591            ds 3
000B            592   _BMM150_compensate_y_sloc0_1_0:
000B            593            ds 4
000F            594   _BMM150_Read_Data_PARM_2:
000F            595            ds 3
0012            596   _BMM150_Read_Data_mag_x_1_123:
0012            597            ds 3
0015            598   _getstr1_PARM_2:
0015            599            ds 1
0016            600   _Auto_mode_slave_sloc0_1_0:
0016            601            ds 2
0018            602   _Joystick_Control_PARM_2:
0018            603            ds 3
001B            604   _Joystick_Control_sloc0_1_0:
001B            605            ds 2
001D            606   _Joystick_Control_sloc1_1_0:
001D            607            ds 1
001E            608   _Joystick_Control_sloc2_1_0:
001E            609            ds 1
001F            610   _Joystick_Control_sloc3_1_0:
001F            611            ds 4
0023            612   _Joystick_Control_sloc4_1_0:
0023            613            ds 4
0027            614   _Joystick_Control_sloc5_1_0:
0027            615            ds 4
002B            616   ;--------------------------------------------------------
002B            617   ; overlayable items in internal ram 
002B            618   ;--------------------------------------------------------
0000            619            rseg    R_OSEG
0000            620            rseg    R_OSEG
0000            621            rseg    R_OSEG
0000            622            rseg    R_OSEG
0000            623            rseg    R_OSEG
0000            624            rseg    R_OSEG
0000            625   _InitPinADC_PARM_2:
0000            626            ds 1
0001            627            rseg    R_OSEG
0001            628            rseg    R_OSEG
0001            629   _check_bound_PARM_2:
0001            630            ds 2
0003            631   ;--------------------------------------------------------
0003            632   ; indirectly addressable internal ram data
0003            633   ;--------------------------------------------------------
0000            634            rseg R_ISEG
0000            635   _buff:
0000            636            ds 20
0014            637   ;--------------------------------------------------------
0014            638   ; absolute internal ram data
0014            639   ;--------------------------------------------------------
0000            640            DSEG
0000            641   ;--------------------------------------------------------
0000            642   ; bit data
0000            643   ;--------------------------------------------------------
0000            644            rseg R_BSEG
0000            645   ;--------------------------------------------------------
0000            646   ; paged external ram data
0000            647   ;--------------------------------------------------------
0000            648            rseg R_PSEG
0000            649   ;--------------------------------------------------------
0000            650   ; external ram data
0000            651   ;--------------------------------------------------------
0000            652            rseg R_XSEG
0000            653   _freq100:
0000            654            ds 4
0004            655   _d1:
0004            656            ds 2
0006            657   _d2:
0006            658            ds 2
0008            659   _dig_x1:
0008            660            ds 1
0009            661   _dig_x2:
0009            662            ds 1
000A            663   _dig_y1:
000A            664            ds 1
000B            665   _dig_y2:
000B            666            ds 1
000C            667   _dig_z1:
000C            668            ds 2
000E            669   _dig_z2:
000E            670            ds 2
0010            671   _dig_z3:
0010            672            ds 2
0012            673   _dig_z4:
0012            674            ds 2
0014            675   _dig_xy1:
0014            676            ds 1
0015            677   _dig_xy2:
0015            678            ds 1
0016            679   _dig_xyz1:
0016            680            ds 2
0018            681   _distance:
0018            682            ds 2
001A            683   _overflow_count:
001A            684            ds 1
001B            685   _i_loo:
001B            686            ds 2
001D            687   _i:
001D            688            ds 2
001F            689   _BMM150_Read_Trim_Registers_trim_x1y1_1_97:
001F            690            ds 2
0021            691   _BMM150_Read_Trim_Registers_trim_xyz_data_1_97:
0021            692            ds 4
0025            693   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_97:
0025            694            ds 10
002F            695   _BMM150_compensate_x_retval_1_106:
002F            696            ds 2
0031            697   _BMM150_compensate_x_process_comp_x0_1_106:
0031            698            ds 2
0033            699   _BMM150_compensate_y_retval_1_115:
0033            700            ds 2
0035            701   _BMM150_compensate_y_process_comp_y0_1_115:
0035            702            ds 2
0037            703   _BMM150_Read_Data_x_val_1_124:
0037            704            ds 2
0039            705   _BMM150_Read_Data_y_val_1_124:
0039            706            ds 2
003B            707   _BMM150_Read_Data_rhall_val_1_124:
003B            708            ds 2
003D            709   _ReadHX711_dataa_1_174:
003D            710            ds 4
0041            711   _ReadHX711_j_1_174:
0041            712            ds 1
0042            713   _Read_angle_mag_x_1_229:
0042            714            ds 2
0044            715   _Read_angle_mag_y_1_229:
0044            716            ds 2
0046            717   _Read_angle_sum_x_1_229:
0046            718            ds 4
004A            719   _Read_angle_sum_y_1_229:
004A            720            ds 4
004E            721   _Read_angle_angle_1_229:
004E            722            ds 4
0052            723   _Auto_mode_slave_command_1_231:
0052            724            ds 2
0054            725   _Auto_mode_slave_state_res_1_231:
0054            726            ds 2
0056            727   _Auto_mode_slave_dummy_1_231:
0056            728            ds 2
0058            729   _Joystick_Control_vx_error_1_244:
0058            730            ds 2
005A            731   _Joystick_Control_vy_error_1_244:
005A            732            ds 2
005C            733   _Joystick_Control_vx_err_1_244:
005C            734            ds 2
005E            735   _Joystick_Control_vy_err_1_244:
005E            736            ds 2
0060            737   ;--------------------------------------------------------
0060            738   ; absolute external ram data
0060            739   ;--------------------------------------------------------
0000            740            XSEG
0000            741   ;--------------------------------------------------------
0000            742   ; external initialized ram data
0000            743   ;--------------------------------------------------------
0000            744            rseg R_IXSEG
0000            745   _pwm_counter:
0000            746            ds 2
0002            747   _servo_counter:
0002            748            ds 2
0004            749   _pwm_left:
0004            750            ds 1
0005            751   _pwm_right:
0005            752            ds 1
0006            753   _L_motor_dir:
0006            754            ds 1
0007            755   _R_motor_dir:
0007            756            ds 1
0008            757   _servo_base:
0008            758            ds 1
0009            759   _servo_arm:
0009            760            ds 1
000A            761   _vx_thres:
000A            762            ds 2
000C            763   _vy_thres:
000C            764            ds 2
000E            765   _vx:
000E            766            ds 2
0010            767   _vy:
0010            768            ds 2
0012            769   _fre_mea_count:
0012            770            ds 2
0014            771   _weight_mea_count:
0014            772            ds 2
0016            773   _seed:
0016            774            ds 2
0018            775   _pwm_corr:
0018            776            ds 4
001C            777   _curr_angle:
001C            778            ds 4
0020            779   _raw_angle:
0020            780            ds 4
0024            781   _last_raw_angle:
0024            782            ds 4
0028            783   _angle_diff:
0028            784            ds 4
002C            785   _mea_yes:
002C            786            ds 1
002D            787   _weight:
002D            788            ds 2
002F            789   _duration:
002F            790            ds 4
0033            791   _auto_mode:
0033            792            ds 2
0035            793   _pick:
0035            794            ds 1
0000            795            rseg R_HOME
0000            796            rseg R_GSINIT
0000            797            rseg R_CSEG
0000            798   ;--------------------------------------------------------
0000            799   ; Reset entry point and interrupt vectors
0000            800   ;--------------------------------------------------------
0000            801            CSEG at 0x0000
0000 020000     802            ljmp    _crt0
0093            803            CSEG at 0x0093
0093 020000     804            ljmp    _Timer5_ISR
0096            805   ;--------------------------------------------------------
0096            806   ; global & static initialisations
0096            807   ;--------------------------------------------------------
0000            808            rseg R_HOME
0000            809            rseg R_GSINIT
0000            810            rseg R_GSINIT
0000            811   ;--------------------------------------------------------
0000            812   ; data variables initialization
0000            813   ;--------------------------------------------------------
0000            814            rseg R_DINIT
0000            815            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            816   ;--------------------------------------------------------
0000            817   ; code
0000            818   ;--------------------------------------------------------
0000            819            rseg R_CSEG
0000            820   ;------------------------------------------------------------
0000            821   ;Allocation info for local variables in function '_c51_external_startup'
0000            822   ;------------------------------------------------------------
0000            823   ;------------------------------------------------------------
0000            824   ;        main.c:120: char _c51_external_startup (void)
0000            825   ;        -----------------------------------------
0000            826   ;         function _c51_external_startup
0000            827   ;        -----------------------------------------
0000            828   __c51_external_startup:
0000            829            using   0
0000            830   ;        main.c:123: SFRPAGE = 0x00;
0000 75A700     831            mov     _SFRPAGE,#0x00
0003            832   ;        main.c:124: WDTCN = 0xDE; //First key
0003 7597DE     833            mov     _WDTCN,#0xDE
0006            834   ;        main.c:125: WDTCN = 0xAD; //Second key
0006 7597AD     835            mov     _WDTCN,#0xAD
0009            836   ;        main.c:127: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     837            mov     _VDM0CN,#0x80
000C            838   ;        main.c:128: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     839            mov     _RSTSRC,#0x06
000F            840   ;        main.c:135: SFRPAGE = 0x10;
000F 75A710     841            mov     _SFRPAGE,#0x10
0012            842   ;        main.c:136: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     843            mov     _PFE0CN,#0x20
0015            844   ;        main.c:137: SFRPAGE = 0x00;
0015 75A700     845            mov     _SFRPAGE,#0x00
0018            846   ;        main.c:158: CLKSEL = 0x00;
0018 75A900     847            mov     _CLKSEL,#0x00
001B            848   ;        main.c:159: CLKSEL = 0x00;
001B 75A900     849            mov     _CLKSEL,#0x00
001E            850   ;        main.c:160: while ((CLKSEL & 0x80) == 0);
001E            851   L002001?:
001E E5A9       852            mov     a,_CLKSEL
0020 30E738     853            jnb     acc.7,L002001?
0023            854   ;        main.c:161: CLKSEL = 0x03;
0023 75A903     855            mov     _CLKSEL,#0x03
0026            856   ;        main.c:162: CLKSEL = 0x03;
0026 75A903     857            mov     _CLKSEL,#0x03
0029            858   ;        main.c:163: while ((CLKSEL & 0x80) == 0);
0029            859   L002004?:
0029 E5A9       860            mov     a,_CLKSEL
002B 30E7B8     861            jnb     acc.7,L002004?
002E            862   ;        main.c:169: P0MDOUT |= 0b_1100_0000;
002E 43A4C0     863            orl     _P0MDOUT,#0xC0
0031            864   ;        main.c:170: P1MDOUT |= 0b_0000_0110;
0031 43A506     865            orl     _P1MDOUT,#0x06
0034            866   ;        main.c:171: P2MDOUT |= 0b_0000_0001; // P2.0 in push-pull mode
0034 43A601     867            orl     _P2MDOUT,#0x01
0037            868   ;        main.c:172: XBR0     = 0b_0000_0011; // UART0E = 1 and SPI0E = 1 0b_0000_0011               
0037 75E103     869            mov     _XBR0,#0x03
003A            870   ;        main.c:173: XBR1     = 0b_0000_0000;
003A 75E200     871            mov     _XBR1,#0x00
003D            872   ;        main.c:174: XBR2     = 0b_0100_0001; // Enable crossbar and uart 1
003D 75E341     873            mov     _XBR2,#0x41
0040            874   ;        main.c:175: P0SKIP       = 0b_0000_0111; 
0040 75D407     875            mov     _P0SKIP,#0x07
0043            876   ;        main.c:176: P1SKIP   = 0b_1111_1001;
0043 75D5F9     877            mov     _P1SKIP,#0xF9
0046            878   ;        main.c:181: SCON0 = 0x10;
0046 759810     879            mov     _SCON0,#0x10
0049            880   ;        main.c:182: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     881            mov     _TH1,#0xE6
004C            882   ;        main.c:183: TL1 = TH1;      // Init Timer1
004C 858D8B     883            mov     _TL1,_TH1
004F            884   ;        main.c:184: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     885            anl     _TMOD,#0x0F
0052            886   ;        main.c:185: TMOD |=  0x20;                       
0052 438920     887            orl     _TMOD,#0x20
0055            888   ;        main.c:186: TR1 = 1; // START Timer1
0055 D28E       889            setb    _TR1
0057            890   ;        main.c:187: TI = 1;  // Indicate TX0 ready
0057 D299       891            setb    _TI
0059            892   ;        main.c:188: P2_0=1; // 'set' pin to 1 is normal operation mode.
0059 D2A0       893            setb    _P2_0
005B            894   ;        main.c:191: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
005B 75A211     895            mov     _SPI0CKR,#0x11
005E            896   ;        main.c:192: SPI0CFG = 0b_1110_0000; // SPI mode 3
005E 75A1E0     897            mov     _SPI0CFG,#0xE0
0061            898   ;        main.c:193: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0061 75F801     899            mov     _SPI0CN0,#0x01
0064            900   ;        main.c:196: SFRPAGE=0x10;
0064 75A710     901            mov     _SFRPAGE,#0x10
0067            902   ;        main.c:197: TMR5CN0=0x00;
0067 75C000     903            mov     _TMR5CN0,#0x00
006A            904   ;        main.c:198: TMR5=0xffff;   // Set to reload immediately
006A 75D4FF     905            mov     _TMR5,#0xFF
006D 75D5FF     906            mov     (_TMR5 >> 8),#0xFF
0070            907   ;        main.c:199: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
0070 43F308     908            orl     _EIE2,#0x08
0073            909   ;        main.c:200: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0073 D2C2       910            setb    _TR5
0075            911   ;        main.c:202: EA=1;  // Enable global interrupts
0075 D2AF       912            setb    _EA
0077            913   ;        main.c:203: SFRPAGE=0x00;
0077 75A700     914            mov     _SFRPAGE,#0x00
007A            915   ;        main.c:205: return 0;
007A 758200     916            mov     dpl,#0x00
007D 22         917            ret
007E            918   ;------------------------------------------------------------
007E            919   ;Allocation info for local variables in function 'Timer3us'
007E            920   ;------------------------------------------------------------
007E            921   ;us                        Allocated to registers r2 
007E            922   ;i                         Allocated to registers r3 
007E            923   ;------------------------------------------------------------
007E            924   ;        main.c:209: void Timer3us(unsigned char us)
007E            925   ;        -----------------------------------------
007E            926   ;         function Timer3us
007E            927   ;        -----------------------------------------
007E            928   _Timer3us:
007E AA82       929            mov     r2,dpl
0080            930   ;        main.c:214: CKCON0|=0b_0100_0000;
0080 438E40     931            orl     _CKCON0,#0x40
0083            932   ;        main.c:216: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0083 7592B8     933            mov     _TMR3RL,#0xB8
0086 7593FF     934            mov     (_TMR3RL >> 8),#0xFF
0089            935   ;        main.c:217: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0089 859294     936            mov     _TMR3,_TMR3RL
008C 859395     937            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
008F            938   ;        main.c:219: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
008F 759104     939            mov     _TMR3CN0,#0x04
0092            940   ;        main.c:220: for (i = 0; i < us; i++)       // Count <us> overflows
0092 7B00       941            mov     r3,#0x00
0094            942   L003004?:
0094 C3         943            clr     c
0095 EB         944            mov     a,r3
0096 9A         945            subb    a,r2
0097 5000       946            jnc     L003007?
0099            947   ;        main.c:222: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0099            948   L003001?:
0099 E591       949            mov     a,_TMR3CN0
009B 30E7B8     950            jnb     acc.7,L003001?
009E            951   ;        main.c:223: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
009E 53917F     952            anl     _TMR3CN0,#0x7F
00A1            953   ;        main.c:220: for (i = 0; i < us; i++)       // Count <us> overflows
00A1 0B         954            inc     r3
00A2 8000       955            sjmp    L003004?
00A4            956   L003007?:
00A4            957   ;        main.c:225: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00A4 759100     958            mov     _TMR3CN0,#0x00
00A7 22         959            ret
00A8            960   ;------------------------------------------------------------
00A8            961   ;Allocation info for local variables in function 'waitms'
00A8            962   ;------------------------------------------------------------
00A8            963   ;ms                        Allocated to registers r2 r3 
00A8            964   ;j                         Allocated to registers r4 r5 
00A8            965   ;k                         Allocated to registers r6 
00A8            966   ;------------------------------------------------------------
00A8            967   ;        main.c:228: void waitms (unsigned int ms)
00A8            968   ;        -----------------------------------------
00A8            969   ;         function waitms
00A8            970   ;        -----------------------------------------
00A8            971   _waitms:
00A8 AA82       972            mov     r2,dpl
00AA AB83       973            mov     r3,dph
00AC            974   ;        main.c:232: for(j=0; j<ms; j++)
00AC 7C00       975            mov     r4,#0x00
00AE 7D00       976            mov     r5,#0x00
00B0            977   L004005?:
00B0 C3         978            clr     c
00B1 EC         979            mov     a,r4
00B2 9A         980            subb    a,r2
00B3 ED         981            mov     a,r5
00B4 9B         982            subb    a,r3
00B5 5000       983            jnc     L004009?
00B7            984   ;        main.c:233: for (k=0; k<4; k++) Timer3us(250);
00B7 7E00       985            mov     r6,#0x00
00B9            986   L004001?:
00B9 BE04F8     987            cjne    r6,#0x04,L004018?
00BC            988   L004018?:
00BC 5000       989            jnc     L004007?
00BE 7582FA     990            mov     dpl,#0xFA
00C1 C002       991            push    ar2
00C3 C003       992            push    ar3
00C5 C004       993            push    ar4
00C7 C005       994            push    ar5
00C9 C006       995            push    ar6
00CB 120000     996            lcall   _Timer3us
00CE D006       997            pop     ar6
00D0 D005       998            pop     ar5
00D2 D004       999            pop     ar4
00D4 D003      1000            pop     ar3
00D6 D002      1001            pop     ar2
00D8 0E        1002            inc     r6
00D9 8000      1003            sjmp    L004001?
00DB           1004   L004007?:
00DB           1005   ;        main.c:232: for(j=0; j<ms; j++)
00DB 0C        1006            inc     r4
00DC BC0038    1007            cjne    r4,#0x00,L004005?
00DF 0D        1008            inc     r5
00E0 8000      1009            sjmp    L004005?
00E2           1010   L004009?:
00E2 22        1011            ret
00E3           1012   ;------------------------------------------------------------
00E3           1013   ;Allocation info for local variables in function 'SPI_transfer'
00E3           1014   ;------------------------------------------------------------
00E3           1015   ;tx_data                   Allocated to registers 
00E3           1016   ;------------------------------------------------------------
00E3           1017   ;        main.c:236: unsigned char SPI_transfer(unsigned char tx_data)
00E3           1018   ;        -----------------------------------------
00E3           1019   ;         function SPI_transfer
00E3           1020   ;        -----------------------------------------
00E3           1021   _SPI_transfer:
00E3 8582A3    1022            mov     _SPI0DAT,dpl
00E6           1023   ;        main.c:239: while (!SPIF);      // Wait for transfer to complete
00E6           1024   L005001?:
00E6           1025   ;        main.c:240: SPIF = 0;           // Clear SPI interrupt flag
00E6 10FFB8    1026            jbc     _SPIF,L005008?
00E9 8000      1027            sjmp    L005001?
00EB           1028   L005008?:
00EB           1029   ;        main.c:241: return SPI0DAT;     // Return received data
00EB 85A382    1030            mov     dpl,_SPI0DAT
00EE 22        1031            ret
00EF           1032   ;------------------------------------------------------------
00EF           1033   ;Allocation info for local variables in function 'SPI_read'
00EF           1034   ;------------------------------------------------------------
00EF           1035   ;reg_addr                  Allocated to registers r2 
00EF           1036   ;value                     Allocated with name '_SPI_read_value_1_93'
00EF           1037   ;------------------------------------------------------------
00EF           1038   ;        main.c:244: unsigned char SPI_read(unsigned char reg_addr)
00EF           1039   ;        -----------------------------------------
00EF           1040   ;         function SPI_read
00EF           1041   ;        -----------------------------------------
00EF           1042   _SPI_read:
00EF AA82      1043            mov     r2,dpl
00F1           1044   ;        main.c:249: reg_addr = reg_addr | 0x80;
00F1 430280    1045            orl     ar2,#0x80
00F4           1046   ;        main.c:251: CS = 0;                // Select the device
00F4 C290      1047            clr     _P1_0
00F6           1048   ;        main.c:252: SPI_transfer(reg_addr);     // Send register address
00F6 8A82      1049            mov     dpl,r2
00F8 120000    1050            lcall   _SPI_transfer
00FB           1051   ;        main.c:253: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
00FB 758200    1052            mov     dpl,#0x00
00FE 120000    1053            lcall   _SPI_transfer
0101           1054   ;        main.c:254: CS = 1;                // Deselect the device
0101 D290      1055            setb    _P1_0
0103           1056   ;        main.c:256: return value;
0103 22        1057            ret
0104           1058   ;------------------------------------------------------------
0104           1059   ;Allocation info for local variables in function 'SPI_write'
0104           1060   ;------------------------------------------------------------
0104           1061   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0104           1062   ;reg_addr                  Allocated to registers r2 
0104           1063   ;------------------------------------------------------------
0104           1064   ;        main.c:259: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0104           1065   ;        -----------------------------------------
0104           1066   ;         function SPI_write
0104           1067   ;        -----------------------------------------
0104           1068   _SPI_write:
0104 AA82      1069            mov     r2,dpl
0106           1070   ;        main.c:262: reg_addr = reg_addr & 0x7F;
0106 53027F    1071            anl     ar2,#0x7F
0109           1072   ;        main.c:264: CS = 0;                // Select device
0109 C290      1073            clr     _P1_0
010B           1074   ;        main.c:265: SPI_transfer(reg_addr);     // Send register address
010B 8A82      1075            mov     dpl,r2
010D 120000    1076            lcall   _SPI_transfer
0110           1077   ;        main.c:266: SPI_transfer(reg_value);    // Send value
0110 85A082    1078            mov     dpl,_SPI_write_PARM_2
0113 120000    1079            lcall   _SPI_transfer
0116           1080   ;        main.c:267: CS = 1;                // Deselect device
0116 D290      1081            setb    _P1_0
0118 22        1082            ret
0119           1083   ;------------------------------------------------------------
0119           1084   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
0119           1085   ;------------------------------------------------------------
0119           1086   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_97'
0119           1087   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_97'
0119           1088   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_97'
0119           1089   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97'
0119           1090   ;------------------------------------------------------------
0119           1091   ;        main.c:270: void BMM150_Read_Trim_Registers(void)
0119           1092   ;        -----------------------------------------
0119           1093   ;         function BMM150_Read_Trim_Registers
0119           1094   ;        -----------------------------------------
0119           1095   _BMM150_Read_Trim_Registers:
0119           1096   ;        main.c:274: xdata uint8_t trim_x1y1[2] = {0};
0119 90CBE8    1097            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
011C           1098   ;        main.c:275: xdata uint8_t trim_xyz_data[4] = {0};
011C E4        1099            clr     a
011D F0        1100            movx    @dptr,a
011E 90CBE9    1101            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
0121 F0        1102            movx    @dptr,a
0122 90CC48    1103            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0125 F0        1104            movx    @dptr,a
0126 90CC49    1105            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0001)
0129 F0        1106            movx    @dptr,a
012A 90CC4A    1107            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
012D           1108   ;        main.c:276: xdata uint8_t trim_xy1xy2[10] = {0};
012D E4        1109            clr     a
012E F0        1110            movx    @dptr,a
012F 90CC4B    1111            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0132 F0        1112            movx    @dptr,a
0133 90CCA8    1113            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0136 F0        1114            movx    @dptr,a
0137 90CCA9    1115            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0001)
013A F0        1116            movx    @dptr,a
013B 90CCAA    1117            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0002)
013E E4        1118            clr     a
013F F0        1119            movx    @dptr,a
0140 90CCAB    1120            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0003)
0143 F0        1121            movx    @dptr,a
0144 90CCAC    1122            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0147 F0        1123            movx    @dptr,a
0148 90CCAD    1124            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
014B F0        1125            movx    @dptr,a
014C 90CCAE    1126            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0006)
014F E4        1127            clr     a
0150 F0        1128            movx    @dptr,a
0151 90CCAF    1129            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0007)
0154 F0        1130            movx    @dptr,a
0155 90CCB0    1131            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0158 F0        1132            movx    @dptr,a
0159 90CCB1    1133            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
015C F0        1134            movx    @dptr,a
015D           1135   ;        main.c:279: for (i=0;i<2;i++){
015D 905250    1136            mov     dptr,#_i
0160 E4        1137            clr     a
0161 F0        1138            movx    @dptr,a
0162 A3        1139            inc     dptr
0163 F0        1140            movx    @dptr,a
0164           1141   L008001?:
0164 905250    1142            mov     dptr,#_i
0167 E0        1143            movx    a,@dptr
0168 FA        1144            mov     r2,a
0169 A3        1145            inc     dptr
016A E0        1146            movx    a,@dptr
016B FB        1147            mov     r3,a
016C C3        1148            clr     c
016D EA        1149            mov     a,r2
016E 9402      1150            subb    a,#0x02
0170 EB        1151            mov     a,r3
0171 9400      1152            subb    a,#0x00
0173 5000      1153            jnc     L008004?
0175           1154   ;        main.c:280: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
0175 EA        1155            mov     a,r2
0176 24E8      1156            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0178 FC        1157            mov     r4,a
0179 EB        1158            mov     a,r3
017A 34CB      1159            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 >> 8)
017C FD        1160            mov     r5,a
017D 745D      1161            mov     a,#0x5D
017F 2A        1162            add     a,r2
0180 F582      1163            mov     dpl,a
0182 C004      1164            push    ar4
0184 C005      1165            push    ar5
0186 120000    1166            lcall   _SPI_read
0189 AA82      1167            mov     r2,dpl
018B D005      1168            pop     ar5
018D D004      1169            pop     ar4
018F 8C82      1170            mov     dpl,r4
0191 8D83      1171            mov     dph,r5
0193 EA        1172            mov     a,r2
0194 F0        1173            movx    @dptr,a
0195           1174   ;        main.c:279: for (i=0;i<2;i++){
0195 905250    1175            mov     dptr,#_i
0198 E0        1176            movx    a,@dptr
0199 2401      1177            add     a,#0x01
019B F0        1178            movx    @dptr,a
019C A3        1179            inc     dptr
019D E0        1180            movx    a,@dptr
019E 3400      1181            addc    a,#0x00
01A0 F0        1182            movx    @dptr,a
01A1 8000      1183            sjmp    L008001?
01A3           1184   L008004?:
01A3           1185   ;        main.c:282: for (i=0;i<4;i++){
01A3 905250    1186            mov     dptr,#_i
01A6 E4        1187            clr     a
01A7 F0        1188            movx    @dptr,a
01A8 A3        1189            inc     dptr
01A9 F0        1190            movx    @dptr,a
01AA           1191   L008005?:
01AA 905250    1192            mov     dptr,#_i
01AD E0        1193            movx    a,@dptr
01AE FA        1194            mov     r2,a
01AF A3        1195            inc     dptr
01B0 E0        1196            movx    a,@dptr
01B1 FB        1197            mov     r3,a
01B2 C3        1198            clr     c
01B3 EA        1199            mov     a,r2
01B4 9404      1200            subb    a,#0x04
01B6 EB        1201            mov     a,r3
01B7 9400      1202            subb    a,#0x00
01B9 5000      1203            jnc     L008008?
01BB           1204   ;        main.c:283: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
01BB EA        1205            mov     a,r2
01BC 2448      1206            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
01BE FC        1207            mov     r4,a
01BF EB        1208            mov     a,r3
01C0 34CC      1209            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 >> 8)
01C2 FD        1210            mov     r5,a
01C3 7462      1211            mov     a,#0x62
01C5 2A        1212            add     a,r2
01C6 F582      1213            mov     dpl,a
01C8 C004      1214            push    ar4
01CA C005      1215            push    ar5
01CC 120000    1216            lcall   _SPI_read
01CF AA82      1217            mov     r2,dpl
01D1 D005      1218            pop     ar5
01D3 D004      1219            pop     ar4
01D5 8C82      1220            mov     dpl,r4
01D7 8D83      1221            mov     dph,r5
01D9 EA        1222            mov     a,r2
01DA F0        1223            movx    @dptr,a
01DB           1224   ;        main.c:282: for (i=0;i<4;i++){
01DB 905250    1225            mov     dptr,#_i
01DE E0        1226            movx    a,@dptr
01DF 2401      1227            add     a,#0x01
01E1 F0        1228            movx    @dptr,a
01E2 A3        1229            inc     dptr
01E3 E0        1230            movx    a,@dptr
01E4 3400      1231            addc    a,#0x00
01E6 F0        1232            movx    @dptr,a
01E7 8000      1233            sjmp    L008005?
01E9           1234   L008008?:
01E9           1235   ;        main.c:285: for (i=0;i<10;i++){
01E9 905250    1236            mov     dptr,#_i
01EC E4        1237            clr     a
01ED F0        1238            movx    @dptr,a
01EE A3        1239            inc     dptr
01EF F0        1240            movx    @dptr,a
01F0           1241   L008009?:
01F0 905250    1242            mov     dptr,#_i
01F3 E0        1243            movx    a,@dptr
01F4 FA        1244            mov     r2,a
01F5 A3        1245            inc     dptr
01F6 E0        1246            movx    a,@dptr
01F7 FB        1247            mov     r3,a
01F8 C3        1248            clr     c
01F9 EA        1249            mov     a,r2
01FA 940A      1250            subb    a,#0x0A
01FC EB        1251            mov     a,r3
01FD 9400      1252            subb    a,#0x00
01FF 5000      1253            jnc     L008012?
0201           1254   ;        main.c:286: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
0201 EA        1255            mov     a,r2
0202 24A8      1256            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0204 FC        1257            mov     r4,a
0205 EB        1258            mov     a,r3
0206 34CC      1259            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 >> 8)
0208 FD        1260            mov     r5,a
0209 7468      1261            mov     a,#0x68
020B 2A        1262            add     a,r2
020C F582      1263            mov     dpl,a
020E C004      1264            push    ar4
0210 C005      1265            push    ar5
0212 120000    1266            lcall   _SPI_read
0215 AA82      1267            mov     r2,dpl
0217 D005      1268            pop     ar5
0219 D004      1269            pop     ar4
021B 8C82      1270            mov     dpl,r4
021D 8D83      1271            mov     dph,r5
021F EA        1272            mov     a,r2
0220 F0        1273            movx    @dptr,a
0221           1274   ;        main.c:285: for (i=0;i<10;i++){
0221 905250    1275            mov     dptr,#_i
0224 E0        1276            movx    a,@dptr
0225 2401      1277            add     a,#0x01
0227 F0        1278            movx    @dptr,a
0228 A3        1279            inc     dptr
0229 E0        1280            movx    a,@dptr
022A 3400      1281            addc    a,#0x00
022C F0        1282            movx    @dptr,a
022D 8000      1283            sjmp    L008009?
022F           1284   L008012?:
022F           1285   ;        main.c:289: dig_x1 = (int8_t) trim_x1y1[0]; 
022F 90CBE8    1286            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0232 E0        1287            movx    a,@dptr
0233 9055D0    1288            mov     dptr,#_dig_x1
0236 F0        1289            movx    @dptr,a
0237           1290   ;        main.c:290: dig_y1 = (int8_t) trim_x1y1[1]; 
0237 90CBE9    1291            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
023A E0        1292            movx    a,@dptr
023B 905550    1293            mov     dptr,#_dig_y1
023E F0        1294            movx    @dptr,a
023F           1295   ;        main.c:291: dig_x2 = (int8_t) trim_xyz_data[2]; 
023F 90CC4A    1296            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
0242 E0        1297            movx    a,@dptr
0243 905590    1298            mov     dptr,#_dig_x2
0246 F0        1299            movx    @dptr,a
0247           1300   ;        main.c:292: dig_y2 = (int8_t) trim_xyz_data[3]; 
0247 90CC4B    1301            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
024A E0        1302            movx    a,@dptr
024B 905510    1303            mov     dptr,#_dig_y2
024E F0        1304            movx    @dptr,a
024F           1305   ;        main.c:306: dig_xy1 = trim_xy1xy2[9];
024F 90CCB1    1306            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
0252 E0        1307            movx    a,@dptr
0253 9053D0    1308            mov     dptr,#_dig_xy1
0256 F0        1309            movx    @dptr,a
0257           1310   ;        main.c:307: dig_xy2 = (int8_t)trim_xy1xy2[8];
0257 90CCB0    1311            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
025A E0        1312            movx    a,@dptr
025B 905390    1313            mov     dptr,#_dig_xy2
025E F0        1314            movx    @dptr,a
025F           1315   ;        main.c:309: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
025F 90CCAD    1316            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
0262 E0        1317            movx    a,@dptr
0263 FA        1318            mov     r2,a
0264 53027F    1319            anl     ar2,#0x7F
0267 8A03      1320            mov     ar3,r2
0269 7A00      1321            mov     r2,#0x00
026B           1322   ;        main.c:310: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
026B 90CCAC    1323            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
026E E0        1324            movx    a,@dptr
026F FC        1325            mov     r4,a
0270 7D00      1326            mov     r5,#0x00
0272 905350    1327            mov     dptr,#_dig_xyz1
0275 EC        1328            mov     a,r4
0276 4A        1329            orl     a,r2
0277 F0        1330            movx    @dptr,a
0278 ED        1331            mov     a,r5
0279 4B        1332            orl     a,r3
027A A3        1333            inc     dptr
027B F0        1334            movx    @dptr,a
027C 22        1335            ret
027D           1336   ;------------------------------------------------------------
027D           1337   ;Allocation info for local variables in function 'BMM150_Init'
027D           1338   ;------------------------------------------------------------
027D           1339   ;chip_id                   Allocated with name '_BMM150_Init_chip_id_1_102'
027D           1340   ;------------------------------------------------------------
027D           1341   ;        main.c:314: void BMM150_Init(void)
027D           1342   ;        -----------------------------------------
027D           1343   ;         function BMM150_Init
027D           1344   ;        -----------------------------------------
027D           1345   _BMM150_Init:
027D           1346   ;        main.c:319: CS = 1; // Deselect BMM150
027D D290      1347            setb    _P1_0
027F           1348   ;        main.c:322: waitms(10);
027F 90000A    1349            mov     dptr,#0x000A
0282 120000    1350            lcall   _waitms
0285           1351   ;        main.c:325: SPI_write(BMM150_POWER_CONTROL, 0x82);
0285 75A082    1352            mov     _SPI_write_PARM_2,#0x82
0288 75824B    1353            mov     dpl,#0x4B
028B 120000    1354            lcall   _SPI_write
028E           1355   ;        main.c:326: waitms(10);  // Wait for reset to complete
028E 90000A    1356            mov     dptr,#0x000A
0291 120000    1357            lcall   _waitms
0294           1358   ;        main.c:329: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
0294 75A001    1359            mov     _SPI_write_PARM_2,#0x01
0297 75824B    1360            mov     dpl,#0x4B
029A 120000    1361            lcall   _SPI_write
029D           1362   ;        main.c:330: waitms(5);
029D 900005    1363            mov     dptr,#0x0005
02A0 120000    1364            lcall   _waitms
02A3           1365   ;        main.c:333: chip_id = SPI_read(BMM150_CHIP_ID);
02A3 758240    1366            mov     dpl,#0x40
02A6 120000    1367            lcall   _SPI_read
02A9 AA82      1368            mov     r2,dpl
02AB           1369   ;        main.c:334: if (chip_id != BMM150_CHIP_ID_VALUE)
02AB BA3278    1370            cjne    r2,#0x32,L009006?
02AE 8000      1371            sjmp    L009002?
02B0           1372   L009006?:
02B0           1373   ;        main.c:336: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
02B0 8A03      1374            mov     ar3,r2
02B2 7C00      1375            mov     r4,#0x00
02B4 C002      1376            push    ar2
02B6 C003      1377            push    ar3
02B8 C004      1378            push    ar4
02BA 74F8      1379            mov     a,#__str_0
02BC C0E0      1380            push    acc
02BE 74D9      1381            mov     a,#(__str_0 >> 8)
02C0 C0E0      1382            push    acc
02C2 7480      1383            mov     a,#0x80
02C4 C0E0      1384            push    acc
02C6 120000    1385            lcall   _printf
02C9 E581      1386            mov     a,sp
02CB 24FB      1387            add     a,#0xfb
02CD F581      1388            mov     sp,a
02CF D002      1389            pop     ar2
02D1           1390   L009002?:
02D1           1391   ;        main.c:346: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
02D1 75A000    1392            mov     _SPI_write_PARM_2,#0x00
02D4 75824C    1393            mov     dpl,#0x4C
02D7 C002      1394            push    ar2
02D9 120000    1395            lcall   _SPI_write
02DC           1396   ;        main.c:349: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
02DC 75A07F    1397            mov     _SPI_write_PARM_2,#0x7F
02DF 758251    1398            mov     dpl,#0x51
02E2 120000    1399            lcall   _SPI_write
02E5           1400   ;        main.c:350: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
02E5 75A00E    1401            mov     _SPI_write_PARM_2,#0x0E
02E8 758252    1402            mov     dpl,#0x52
02EB 120000    1403            lcall   _SPI_write
02EE           1404   ;        main.c:352: BMM150_Read_Trim_Registers();
02EE 120000    1405            lcall   _BMM150_Read_Trim_Registers
02F1           1406   ;        main.c:354: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
02F1 7B00      1407            mov     r3,#0x00
02F3 C003      1408            push    ar3
02F5 74B8      1409            mov     a,#__str_1
02F7 C0E0      1410            push    acc
02F9 74DA      1411            mov     a,#(__str_1 >> 8)
02FB C0E0      1412            push    acc
02FD 7480      1413            mov     a,#0x80
02FF C0E0      1414            push    acc
0301 120000    1415            lcall   _printf
0304 E581      1416            mov     a,sp
0306 24FB      1417            add     a,#0xfb
0308 F581      1418            mov     sp,a
030A           1419   ;        main.c:355: return; 
030A 22        1420            ret
030B           1421   ;------------------------------------------------------------
030B           1422   ;Allocation info for local variables in function 'BMM150_compensate_x'
030B           1423   ;------------------------------------------------------------
030B           1424   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
030B           1425   ;mag_data_x                Allocated to registers r2 r3 r4 
030B           1426   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
030B           1427   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_106'
030B           1428   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_106'
030B           1429   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_106'
030B           1430   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_106'
030B           1431   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_106'
030B           1432   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_106'
030B           1433   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_106'
030B           1434   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_106'
030B           1435   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_106'
030B           1436   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_106'
030B           1437   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_106'
030B           1438   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_106'
030B           1439   ;------------------------------------------------------------
030B           1440   ;        main.c:358: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
030B           1441   ;        -----------------------------------------
030B           1442   ;         function BMM150_compensate_x
030B           1443   ;        -----------------------------------------
030B           1444   _BMM150_compensate_x:
030B           1445   ;        main.c:376: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
030B ACF0      1446            mov     r4,b
030D 120000    1447            lcall   __gptrget
0310 FA        1448            mov     r2,a
0311 A3        1449            inc     dptr
0312 120000    1450            lcall   __gptrget
0315 FB        1451            mov     r3,a
0316 BA0078    1452            cjne    r2,#0x00,L010019?
0319 BBF078    1453            cjne    r3,#0xF0,L010019?
031C 020000    1454            ljmp    L010011?
031F           1455   L010019?:
031F           1456   ;        main.c:377: if (*data_rhall != 0)
031F AC50      1457            mov     r4,_BMM150_compensate_x_PARM_2
0321 AD51      1458            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
0323 AE52      1459            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
0325 8C82      1460            mov     dpl,r4
0327 8D83      1461            mov     dph,r5
0329 8EF0      1462            mov     b,r6
032B 120000    1463            lcall   __gptrget
032E FC        1464            mov     r4,a
032F A3        1465            inc     dptr
0330 120000    1466            lcall   __gptrget
0333 FD        1467            mov     r5,a
0334 4C        1468            orl     a,r4
0335 6000      1469            jz      L010005?
0337           1470   ;        main.c:380: process_comp_x0 = *data_rhall;
0337 90CD68    1471            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
033A EC        1472            mov     a,r4
033B F0        1473            movx    @dptr,a
033C A3        1474            inc     dptr
033D ED        1475            mov     a,r5
033E F0        1476            movx    @dptr,a
033F 8000      1477            sjmp    L010006?
0341           1478   L010005?:
0341           1479   ;        main.c:382: else if (dig_xyz1 != 0)
0341 905350    1480            mov     dptr,#_dig_xyz1
0344 E0        1481            movx    a,@dptr
0345 FC        1482            mov     r4,a
0346 A3        1483            inc     dptr
0347 E0        1484            movx    a,@dptr
0348 FD        1485            mov     r5,a
0349 4C        1486            orl     a,r4
034A 6000      1487            jz      L010002?
034C           1488   ;        main.c:384: process_comp_x0 = dig_xyz1;
034C 90CD68    1489            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
034F EC        1490            mov     a,r4
0350 F0        1491            movx    @dptr,a
0351 A3        1492            inc     dptr
0352 ED        1493            mov     a,r5
0353 F0        1494            movx    @dptr,a
0354 8000      1495            sjmp    L010006?
0356           1496   L010002?:
0356           1497   ;        main.c:388: process_comp_x0 = 0;
0356 90CD68    1498            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0359 E4        1499            clr     a
035A F0        1500            movx    @dptr,a
035B A3        1501            inc     dptr
035C F0        1502            movx    @dptr,a
035D           1503   L010006?:
035D           1504   ;        main.c:390: if (process_comp_x0 != 0)
035D 90CD68    1505            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0360 E0        1506            movx    a,@dptr
0361 FC        1507            mov     r4,a
0362 A3        1508            inc     dptr
0363 E0        1509            movx    a,@dptr
0364 FD        1510            mov     r5,a
0365 4C        1511            orl     a,r4
0366 7000      1512            jnz     L010022?
0368 020000    1513            ljmp    L010008?
036B           1514   L010022?:
036B           1515   ;        main.c:393: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
036B 905350    1516            mov     dptr,#_dig_xyz1
036E E0        1517            movx    a,@dptr
036F FE        1518            mov     r6,a
0370 A3        1519            inc     dptr
0371 E0        1520            movx    a,@dptr
0372 FF        1521            mov     r7,a
0373 E4        1522            clr     a
0374 F8        1523            mov     r0,a
0375 EF        1524            mov     a,r7
0376 C8        1525            xch     a,r0
0377 5403      1526            anl     a,#0x03
0379 A2E0      1527            mov     c,acc.0
037B C8        1528            xch     a,r0
037C 13        1529            rrc     a
037D C8        1530            xch     a,r0
037E 13        1531            rrc     a
037F A2E0      1532            mov     c,acc.0
0381 C8        1533            xch     a,r0
0382 13        1534            rrc     a
0383 C8        1535            xch     a,r0
0384 13        1536            rrc     a
0385 C8        1537            xch     a,r0
0386 F9        1538            mov     r1,a
0387 EE        1539            mov     a,r6
0388 03        1540            rr      a
0389 03        1541            rr      a
038A 54C0      1542            anl     a,#0xc0
038C FF        1543            mov     r7,a
038D EE        1544            mov     a,r6
038E 03        1545            rr      a
038F 03        1546            rr      a
0390 543F      1547            anl     a,#0x3f
0392 48        1548            orl     a,r0
0393 F8        1549            mov     r0,a
0394 7E00      1550            mov     r6,#0x00
0396           1551   ;        main.c:394: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
0396 8C00      1552            mov     __divslong_PARM_2,r4
0398 8D01      1553            mov     (__divslong_PARM_2 + 1),r5
039A 750200    1554            mov     (__divslong_PARM_2 + 2),#0x00
039D 750300    1555            mov     (__divslong_PARM_2 + 3),#0x00
03A0 8E82      1556            mov     dpl,r6
03A2 8F83      1557            mov     dph,r7
03A4 88F0      1558            mov     b,r0
03A6 E9        1559            mov     a,r1
03A7 C002      1560            push    ar2
03A9 C003      1561            push    ar3
03AB 120000    1562            lcall   __divslong
03AE AC82      1563            mov     r4,dpl
03B0 E583      1564            mov     a,dph
03B2 24C0      1565            add     a,#0xc0
03B4 FD        1566            mov     r5,a
03B5           1567   ;        main.c:396: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
03B5 8C06      1568            mov     ar6,r4
03B7 8D07      1569            mov     ar7,r5
03B9 8EB8      1570            mov     _BMM150_compensate_x_sloc0_1_0,r6
03BB EF        1571            mov     a,r7
03BC F5B9      1572            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
03BE 33        1573            rlc     a
03BF 95E0      1574            subb    a,acc
03C1 F5BA      1575            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
03C3 F5BB      1576            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03C5 8C06      1577            mov     ar6,r4
03C7 8D07      1578            mov     ar7,r5
03C9 8E00      1579            mov     __mullong_PARM_2,r6
03CB EF        1580            mov     a,r7
03CC F501      1581            mov     (__mullong_PARM_2 + 1),a
03CE 33        1582            rlc     a
03CF 95E0      1583            subb    a,acc
03D1 F502      1584            mov     (__mullong_PARM_2 + 2),a
03D3 F503      1585            mov     (__mullong_PARM_2 + 3),a
03D5           1586   ;        main.c:397: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
03D5 85B882    1587            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03D8 85B983    1588            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03DB 85BAF0    1589            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03DE E5BB      1590            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03E0 C004      1591            push    ar4
03E2 C005      1592            push    ar5
03E4 120000    1593            lcall   __mullong
03E7 8582B8    1594            mov     _BMM150_compensate_x_sloc0_1_0,dpl
03EA 8583B9    1595            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
03ED 85F0BA    1596            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
03F0 F5BB      1597            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03F2 905390    1598            mov     dptr,#_dig_xy2
03F5 E0        1599            movx    a,@dptr
03F6 FE        1600            mov     r6,a
03F7 33        1601            rlc     a
03F8 95E0      1602            subb    a,acc
03FA FF        1603            mov     r7,a
03FB F8        1604            mov     r0,a
03FC F9        1605            mov     r1,a
03FD 750080    1606            mov     __divslong_PARM_2,#0x80
0400 E4        1607            clr     a
0401 F501      1608            mov     (__divslong_PARM_2 + 1),a
0403 F502      1609            mov     (__divslong_PARM_2 + 2),a
0405 F503      1610            mov     (__divslong_PARM_2 + 3),a
0407 85B882    1611            mov     dpl,_BMM150_compensate_x_sloc0_1_0
040A 85B983    1612            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
040D 85BAF0    1613            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
0410 E5BB      1614            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0412 C006      1615            push    ar6
0414 C007      1616            push    ar7
0416 C000      1617            push    ar0
0418 C001      1618            push    ar1
041A 120000    1619            lcall   __divslong
041D 858200    1620            mov     __mullong_PARM_2,dpl
0420 858301    1621            mov     (__mullong_PARM_2 + 1),dph
0423 85F002    1622            mov     (__mullong_PARM_2 + 2),b
0426 F503      1623            mov     (__mullong_PARM_2 + 3),a
0428 D001      1624            pop     ar1
042A D000      1625            pop     ar0
042C D007      1626            pop     ar7
042E D006      1627            pop     ar6
0430           1628   ;        main.c:398: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
0430 8E82      1629            mov     dpl,r6
0432 8F83      1630            mov     dph,r7
0434 88F0      1631            mov     b,r0
0436 E9        1632            mov     a,r1
0437 120000    1633            lcall   __mullong
043A 8582B8    1634            mov     _BMM150_compensate_x_sloc0_1_0,dpl
043D 8583B9    1635            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
0440 85F0BA    1636            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
0443 F5BB      1637            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
0445 D005      1638            pop     ar5
0447 D004      1639            pop     ar4
0449 9053D0    1640            mov     dptr,#_dig_xy1
044C E0        1641            movx    a,@dptr
044D FE        1642            mov     r6,a
044E E4        1643            clr     a
044F 5401      1644            anl     a,#0x01
0451 A2E0      1645            mov     c,acc.0
0453 CE        1646            xch     a,r6
0454 13        1647            rrc     a
0455 CE        1648            xch     a,r6
0456 13        1649            rrc     a
0457 CE        1650            xch     a,r6
0458 8E00      1651            mov     __mullong_PARM_2,r6
045A F501      1652            mov     (__mullong_PARM_2 + 1),a
045C 33        1653            rlc     a
045D 95E0      1654            subb    a,acc
045F F502      1655            mov     (__mullong_PARM_2 + 2),a
0461 F503      1656            mov     (__mullong_PARM_2 + 3),a
0463           1657   ;        main.c:399: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
0463 ED        1658            mov     a,r5
0464 33        1659            rlc     a
0465 95E0      1660            subb    a,acc
0467 FE        1661            mov     r6,a
0468           1662   ;        main.c:400: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
0468 8C82      1663            mov     dpl,r4
046A 8D83      1664            mov     dph,r5
046C 8EF0      1665            mov     b,r6
046E 120000    1666            lcall   __mullong
0471 AC82      1667            mov     r4,dpl
0473 AD83      1668            mov     r5,dph
0475 AEF0      1669            mov     r6,b
0477 FF        1670            mov     r7,a
0478 EC        1671            mov     a,r4
0479 25B8      1672            add     a,_BMM150_compensate_x_sloc0_1_0
047B FC        1673            mov     r4,a
047C ED        1674            mov     a,r5
047D 35B9      1675            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
047F FD        1676            mov     r5,a
0480 EE        1677            mov     a,r6
0481 35BA      1678            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
0483 FE        1679            mov     r6,a
0484 EF        1680            mov     a,r7
0485 35BB      1681            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0487 FF        1682            mov     r7,a
0488 750000    1683            mov     __divslong_PARM_2,#0x00
048B 750102    1684            mov     (__divslong_PARM_2 + 1),#0x02
048E 750200    1685            mov     (__divslong_PARM_2 + 2),#0x00
0491 750300    1686            mov     (__divslong_PARM_2 + 3),#0x00
0494 8C82      1687            mov     dpl,r4
0496 8D83      1688            mov     dph,r5
0498 8EF0      1689            mov     b,r6
049A EF        1690            mov     a,r7
049B 120000    1691            lcall   __divslong
049E AC82      1692            mov     r4,dpl
04A0 AD83      1693            mov     r5,dph
04A2 AEF0      1694            mov     r6,b
04A4 FF        1695            mov     r7,a
04A5 7410      1696            mov     a,#0x10
04A7 2E        1697            add     a,r6
04A8 FE        1698            mov     r6,a
04A9 E4        1699            clr     a
04AA 3F        1700            addc    a,r7
04AB FF        1701            mov     r7,a
04AC           1702   ;        main.c:401: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
04AC 905590    1703            mov     dptr,#_dig_x2
04AF E0        1704            movx    a,@dptr
04B0 F8        1705            mov     r0,a
04B1 33        1706            rlc     a
04B2 95E0      1707            subb    a,acc
04B4 F9        1708            mov     r1,a
04B5 74A0      1709            mov     a,#0xA0
04B7 28        1710            add     a,r0
04B8 F8        1711            mov     r0,a
04B9 E4        1712            clr     a
04BA 39        1713            addc    a,r1
04BB 8800      1714            mov     __mullong_PARM_2,r0
04BD F501      1715            mov     (__mullong_PARM_2 + 1),a
04BF 33        1716            rlc     a
04C0 95E0      1717            subb    a,acc
04C2 F502      1718            mov     (__mullong_PARM_2 + 2),a
04C4 F503      1719            mov     (__mullong_PARM_2 + 3),a
04C6           1720   ;        main.c:402: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
04C6 8C82      1721            mov     dpl,r4
04C8 8D83      1722            mov     dph,r5
04CA 8EF0      1723            mov     b,r6
04CC EF        1724            mov     a,r7
04CD 120000    1725            lcall   __mullong
04D0           1726   ;        main.c:403: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
04D0 750000    1727            mov     __divslong_PARM_2,#0x00
04D3 750110    1728            mov     (__divslong_PARM_2 + 1),#0x10
04D6 750200    1729            mov     (__divslong_PARM_2 + 2),#0x00
04D9 750300    1730            mov     (__divslong_PARM_2 + 3),#0x00
04DC 120000    1731            lcall   __divslong
04DF 858200    1732            mov     __mullong_PARM_2,dpl
04E2 858301    1733            mov     (__mullong_PARM_2 + 1),dph
04E5 85F002    1734            mov     (__mullong_PARM_2 + 2),b
04E8 F503      1735            mov     (__mullong_PARM_2 + 3),a
04EA D003      1736            pop     ar3
04EC D002      1737            pop     ar2
04EE EB        1738            mov     a,r3
04EF 33        1739            rlc     a
04F0 95E0      1740            subb    a,acc
04F2 FC        1741            mov     r4,a
04F3           1742   ;        main.c:404: retval = ((int16_t)(process_comp_x10 / 8192));
04F3 8A82      1743            mov     dpl,r2
04F5 8B83      1744            mov     dph,r3
04F7 8CF0      1745            mov     b,r4
04F9 120000    1746            lcall   __mullong
04FC 750000    1747            mov     __divslong_PARM_2,#0x00
04FF 750120    1748            mov     (__divslong_PARM_2 + 1),#0x20
0502 750200    1749            mov     (__divslong_PARM_2 + 2),#0x00
0505 750300    1750            mov     (__divslong_PARM_2 + 3),#0x00
0508 120000    1751            lcall   __divslong
050B AA82      1752            mov     r2,dpl
050D AB83      1753            mov     r3,dph
050F           1754   ;        main.c:405: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
050F 9055D0    1755            mov     dptr,#_dig_x1
0512 E0        1756            movx    a,@dptr
0513 FC        1757            mov     r4,a
0514 33        1758            rlc     a
0515 95E0      1759            subb    a,acc
0517 C4        1760            swap    a
0518 03        1761            rr      a
0519 54F8      1762            anl     a,#0xf8
051B CC        1763            xch     a,r4
051C C4        1764            swap    a
051D 03        1765            rr      a
051E CC        1766            xch     a,r4
051F 6C        1767            xrl     a,r4
0520 CC        1768            xch     a,r4
0521 54F8      1769            anl     a,#0xf8
0523 CC        1770            xch     a,r4
0524 6C        1771            xrl     a,r4
0525 FD        1772            mov     r5,a
0526 EC        1773            mov     a,r4
0527 2A        1774            add     a,r2
0528 F582      1775            mov     dpl,a
052A ED        1776            mov     a,r5
052B 3B        1777            addc    a,r3
052C F583      1778            mov     dph,a
052E 750010    1779            mov     __divsint_PARM_2,#0x10
0531 E4        1780            clr     a
0532 F501      1781            mov     (__divsint_PARM_2 + 1),a
0534 120000    1782            lcall   __divsint
0537 E582      1783            mov     a,dpl
0539 8583F0    1784            mov     b,dph
053C 90CD08    1785            mov     dptr,#_BMM150_compensate_x_retval_1_106
053F F0        1786            movx    @dptr,a
0540 A3        1787            inc     dptr
0541 E5F0      1788            mov     a,b
0543 F0        1789            movx    @dptr,a
0544 8000      1790            sjmp    L010012?
0546           1791   L010008?:
0546           1792   ;        main.c:408: retval = BMM150_OVERFLOW_OUTPUT; 
0546 90CD08    1793            mov     dptr,#_BMM150_compensate_x_retval_1_106
0549 E4        1794            clr     a
054A F0        1795            movx    @dptr,a
054B A3        1796            inc     dptr
054C 7480      1797            mov     a,#0x80
054E F0        1798            movx    @dptr,a
054F 8000      1799            sjmp    L010012?
0551           1800   L010011?:
0551           1801   ;        main.c:412: retval = BMM150_OVERFLOW_OUTPUT; 
0551 90CD08    1802            mov     dptr,#_BMM150_compensate_x_retval_1_106
0554 E4        1803            clr     a
0555 F0        1804            movx    @dptr,a
0556 A3        1805            inc     dptr
0557 7480      1806            mov     a,#0x80
0559 F0        1807            movx    @dptr,a
055A           1808   L010012?:
055A           1809   ;        main.c:414: return retval; 
055A 90CD08    1810            mov     dptr,#_BMM150_compensate_x_retval_1_106
055D E0        1811            movx    a,@dptr
055E FA        1812            mov     r2,a
055F A3        1813            inc     dptr
0560 E0        1814            movx    a,@dptr
0561 8A82      1815            mov     dpl,r2
0563 F583      1816            mov     dph,a
0565 22        1817            ret
0566           1818   ;------------------------------------------------------------
0566           1819   ;Allocation info for local variables in function 'BMM150_compensate_y'
0566           1820   ;------------------------------------------------------------
0566           1821   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
0566           1822   ;mag_data_y                Allocated to registers r2 r3 r4 
0566           1823   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
0566           1824   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_115'
0566           1825   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_115'
0566           1826   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_115'
0566           1827   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_115'
0566           1828   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_115'
0566           1829   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_115'
0566           1830   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_115'
0566           1831   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_115'
0566           1832   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_115'
0566           1833   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_115'
0566           1834   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_115'
0566           1835   ;------------------------------------------------------------
0566           1836   ;        main.c:417: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
0566           1837   ;        -----------------------------------------
0566           1838   ;         function BMM150_compensate_y
0566           1839   ;        -----------------------------------------
0566           1840   _BMM150_compensate_y:
0566           1841   ;        main.c:435: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
0566 ACF0      1842            mov     r4,b
0568 120000    1843            lcall   __gptrget
056B FA        1844            mov     r2,a
056C A3        1845            inc     dptr
056D 120000    1846            lcall   __gptrget
0570 FB        1847            mov     r3,a
0571 BA0028    1848            cjne    r2,#0x00,L011019?
0574 BBF028    1849            cjne    r3,#0xF0,L011019?
0577 020000    1850            ljmp    L011011?
057A           1851   L011019?:
057A           1852   ;        main.c:437: if (*data_rhall != 0)
057A AC00      1853            mov     r4,_BMM150_compensate_y_PARM_2
057C AD01      1854            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
057E AE02      1855            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
0580 8C82      1856            mov     dpl,r4
0582 8D83      1857            mov     dph,r5
0584 8EF0      1858            mov     b,r6
0586 120000    1859            lcall   __gptrget
0589 FC        1860            mov     r4,a
058A A3        1861            inc     dptr
058B 120000    1862            lcall   __gptrget
058E FD        1863            mov     r5,a
058F 4C        1864            orl     a,r4
0590 6000      1865            jz      L011005?
0592           1866   ;        main.c:440: process_comp_y0 = *data_rhall;
0592 90CE28    1867            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
0595 EC        1868            mov     a,r4
0596 F0        1869            movx    @dptr,a
0597 A3        1870            inc     dptr
0598 ED        1871            mov     a,r5
0599 F0        1872            movx    @dptr,a
059A 8000      1873            sjmp    L011006?
059C           1874   L011005?:
059C           1875   ;        main.c:442: else if (dig_xyz1 != 0)
059C 905350    1876            mov     dptr,#_dig_xyz1
059F E0        1877            movx    a,@dptr
05A0 FC        1878            mov     r4,a
05A1 A3        1879            inc     dptr
05A2 E0        1880            movx    a,@dptr
05A3 FD        1881            mov     r5,a
05A4 4C        1882            orl     a,r4
05A5 6000      1883            jz      L011002?
05A7           1884   ;        main.c:444: process_comp_y0 = dig_xyz1;
05A7 90CE28    1885            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
05AA EC        1886            mov     a,r4
05AB F0        1887            movx    @dptr,a
05AC A3        1888            inc     dptr
05AD ED        1889            mov     a,r5
05AE F0        1890            movx    @dptr,a
05AF 8000      1891            sjmp    L011006?
05B1           1892   L011002?:
05B1           1893   ;        main.c:448: process_comp_y0 = 0;
05B1 90CE28    1894            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
05B4 E4        1895            clr     a
05B5 F0        1896            movx    @dptr,a
05B6 A3        1897            inc     dptr
05B7 F0        1898            movx    @dptr,a
05B8           1899   L011006?:
05B8           1900   ;        main.c:451: if (process_comp_y0 != 0)
05B8 90CE28    1901            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
05BB E0        1902            movx    a,@dptr
05BC FC        1903            mov     r4,a
05BD A3        1904            inc     dptr
05BE E0        1905            movx    a,@dptr
05BF FD        1906            mov     r5,a
05C0 4C        1907            orl     a,r4
05C1 7000      1908            jnz     L011022?
05C3 020000    1909            ljmp    L011008?
05C6           1910   L011022?:
05C6           1911   ;        main.c:454: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
05C6 905350    1912            mov     dptr,#_dig_xyz1
05C9 E0        1913            movx    a,@dptr
05CA FE        1914            mov     r6,a
05CB A3        1915            inc     dptr
05CC E0        1916            movx    a,@dptr
05CD FF        1917            mov     r7,a
05CE E4        1918            clr     a
05CF F8        1919            mov     r0,a
05D0 EF        1920            mov     a,r7
05D1 C8        1921            xch     a,r0
05D2 5403      1922            anl     a,#0x03
05D4 A2E0      1923            mov     c,acc.0
05D6 C8        1924            xch     a,r0
05D7 13        1925            rrc     a
05D8 C8        1926            xch     a,r0
05D9 13        1927            rrc     a
05DA A2E0      1928            mov     c,acc.0
05DC C8        1929            xch     a,r0
05DD 13        1930            rrc     a
05DE C8        1931            xch     a,r0
05DF 13        1932            rrc     a
05E0 C8        1933            xch     a,r0
05E1 F9        1934            mov     r1,a
05E2 EE        1935            mov     a,r6
05E3 03        1936            rr      a
05E4 03        1937            rr      a
05E5 54C0      1938            anl     a,#0xc0
05E7 FF        1939            mov     r7,a
05E8 EE        1940            mov     a,r6
05E9 03        1941            rr      a
05EA 03        1942            rr      a
05EB 543F      1943            anl     a,#0x3f
05ED 48        1944            orl     a,r0
05EE F8        1945            mov     r0,a
05EF 7E00      1946            mov     r6,#0x00
05F1 8C00      1947            mov     __divslong_PARM_2,r4
05F3 8D01      1948            mov     (__divslong_PARM_2 + 1),r5
05F5 750200    1949            mov     (__divslong_PARM_2 + 2),#0x00
05F8 750300    1950            mov     (__divslong_PARM_2 + 3),#0x00
05FB           1951   ;        main.c:455: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
05FB 8E82      1952            mov     dpl,r6
05FD 8F83      1953            mov     dph,r7
05FF 88F0      1954            mov     b,r0
0601 E9        1955            mov     a,r1
0602 C002      1956            push    ar2
0604 C003      1957            push    ar3
0606 120000    1958            lcall   __divslong
0609 AC82      1959            mov     r4,dpl
060B E583      1960            mov     a,dph
060D 24C0      1961            add     a,#0xc0
060F FD        1962            mov     r5,a
0610           1963   ;        main.c:457: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
0610 8C06      1964            mov     ar6,r4
0612 8D07      1965            mov     ar7,r5
0614 8E08      1966            mov     _BMM150_compensate_y_sloc0_1_0,r6
0616 EF        1967            mov     a,r7
0617 F509      1968            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
0619 33        1969            rlc     a
061A 95E0      1970            subb    a,acc
061C F50A      1971            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
061E F50B      1972            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0620 8C06      1973            mov     ar6,r4
0622 8D07      1974            mov     ar7,r5
0624 8E00      1975            mov     __mullong_PARM_2,r6
0626 EF        1976            mov     a,r7
0627 F501      1977            mov     (__mullong_PARM_2 + 1),a
0629 33        1978            rlc     a
062A 95E0      1979            subb    a,acc
062C F502      1980            mov     (__mullong_PARM_2 + 2),a
062E F503      1981            mov     (__mullong_PARM_2 + 3),a
0630           1982   ;        main.c:458: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
0630 850882    1983            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0633 850983    1984            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0636 850AF0    1985            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
0639 E50B      1986            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
063B C004      1987            push    ar4
063D C005      1988            push    ar5
063F 120000    1989            lcall   __mullong
0642 858208    1990            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0645 858309    1991            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
0648 85F00A    1992            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
064B F50B      1993            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
064D 905390    1994            mov     dptr,#_dig_xy2
0650 E0        1995            movx    a,@dptr
0651 FE        1996            mov     r6,a
0652 33        1997            rlc     a
0653 95E0      1998            subb    a,acc
0655 FF        1999            mov     r7,a
0656 F8        2000            mov     r0,a
0657 F9        2001            mov     r1,a
0658 750080    2002            mov     __divslong_PARM_2,#0x80
065B E4        2003            clr     a
065C F501      2004            mov     (__divslong_PARM_2 + 1),a
065E F502      2005            mov     (__divslong_PARM_2 + 2),a
0660 F503      2006            mov     (__divslong_PARM_2 + 3),a
0662 850882    2007            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0665 850983    2008            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0668 850AF0    2009            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
066B E50B      2010            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
066D C006      2011            push    ar6
066F C007      2012            push    ar7
0671 C000      2013            push    ar0
0673 C001      2014            push    ar1
0675 120000    2015            lcall   __divslong
0678 858200    2016            mov     __mullong_PARM_2,dpl
067B 858301    2017            mov     (__mullong_PARM_2 + 1),dph
067E 85F002    2018            mov     (__mullong_PARM_2 + 2),b
0681 F503      2019            mov     (__mullong_PARM_2 + 3),a
0683 D001      2020            pop     ar1
0685 D000      2021            pop     ar0
0687 D007      2022            pop     ar7
0689 D006      2023            pop     ar6
068B           2024   ;        main.c:459: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
068B 8E82      2025            mov     dpl,r6
068D 8F83      2026            mov     dph,r7
068F 88F0      2027            mov     b,r0
0691 E9        2028            mov     a,r1
0692 120000    2029            lcall   __mullong
0695 858208    2030            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0698 858309    2031            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
069B 85F00A    2032            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
069E F50B      2033            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
06A0 D005      2034            pop     ar5
06A2 D004      2035            pop     ar4
06A4 9053D0    2036            mov     dptr,#_dig_xy1
06A7 E0        2037            movx    a,@dptr
06A8 FE        2038            mov     r6,a
06A9 E4        2039            clr     a
06AA 5401      2040            anl     a,#0x01
06AC A2E0      2041            mov     c,acc.0
06AE CE        2042            xch     a,r6
06AF 13        2043            rrc     a
06B0 CE        2044            xch     a,r6
06B1 13        2045            rrc     a
06B2 CE        2046            xch     a,r6
06B3 8E00      2047            mov     __mullong_PARM_2,r6
06B5 F501      2048            mov     (__mullong_PARM_2 + 1),a
06B7 33        2049            rlc     a
06B8 95E0      2050            subb    a,acc
06BA F502      2051            mov     (__mullong_PARM_2 + 2),a
06BC F503      2052            mov     (__mullong_PARM_2 + 3),a
06BE           2053   ;        main.c:460: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
06BE ED        2054            mov     a,r5
06BF 33        2055            rlc     a
06C0 95E0      2056            subb    a,acc
06C2 FE        2057            mov     r6,a
06C3 8C82      2058            mov     dpl,r4
06C5 8D83      2059            mov     dph,r5
06C7 8EF0      2060            mov     b,r6
06C9 120000    2061            lcall   __mullong
06CC AC82      2062            mov     r4,dpl
06CE AD83      2063            mov     r5,dph
06D0 AEF0      2064            mov     r6,b
06D2 FF        2065            mov     r7,a
06D3 EC        2066            mov     a,r4
06D4 2508      2067            add     a,_BMM150_compensate_y_sloc0_1_0
06D6 FC        2068            mov     r4,a
06D7 ED        2069            mov     a,r5
06D8 3509      2070            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
06DA FD        2071            mov     r5,a
06DB EE        2072            mov     a,r6
06DC 350A      2073            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
06DE FE        2074            mov     r6,a
06DF EF        2075            mov     a,r7
06E0 350B      2076            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
06E2 FF        2077            mov     r7,a
06E3 750000    2078            mov     __divslong_PARM_2,#0x00
06E6 750102    2079            mov     (__divslong_PARM_2 + 1),#0x02
06E9 750200    2080            mov     (__divslong_PARM_2 + 2),#0x00
06EC 750300    2081            mov     (__divslong_PARM_2 + 3),#0x00
06EF           2082   ;        main.c:461: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
06EF 8C82      2083            mov     dpl,r4
06F1 8D83      2084            mov     dph,r5
06F3 8EF0      2085            mov     b,r6
06F5 EF        2086            mov     a,r7
06F6 120000    2087            lcall   __divslong
06F9 AC82      2088            mov     r4,dpl
06FB AD83      2089            mov     r5,dph
06FD AEF0      2090            mov     r6,b
06FF FF        2091            mov     r7,a
0700 905510    2092            mov     dptr,#_dig_y2
0703 E0        2093            movx    a,@dptr
0704 F8        2094            mov     r0,a
0705 33        2095            rlc     a
0706 95E0      2096            subb    a,acc
0708 F9        2097            mov     r1,a
0709 74A0      2098            mov     a,#0xA0
070B 28        2099            add     a,r0
070C F8        2100            mov     r0,a
070D E4        2101            clr     a
070E 39        2102            addc    a,r1
070F 8800      2103            mov     __mullong_PARM_2,r0
0711 F501      2104            mov     (__mullong_PARM_2 + 1),a
0713 33        2105            rlc     a
0714 95E0      2106            subb    a,acc
0716 F502      2107            mov     (__mullong_PARM_2 + 2),a
0718 F503      2108            mov     (__mullong_PARM_2 + 3),a
071A           2109   ;        main.c:462: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
071A 7410      2110            mov     a,#0x10
071C 2E        2111            add     a,r6
071D FE        2112            mov     r6,a
071E E4        2113            clr     a
071F 3F        2114            addc    a,r7
0720 8C82      2115            mov     dpl,r4
0722 8D83      2116            mov     dph,r5
0724 8EF0      2117            mov     b,r6
0726 120000    2118            lcall   __mullong
0729           2119   ;        main.c:463: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
0729 750000    2120            mov     __divslong_PARM_2,#0x00
072C 750110    2121            mov     (__divslong_PARM_2 + 1),#0x10
072F 750200    2122            mov     (__divslong_PARM_2 + 2),#0x00
0732 750300    2123            mov     (__divslong_PARM_2 + 3),#0x00
0735 120000    2124            lcall   __divslong
0738 858200    2125            mov     __mullong_PARM_2,dpl
073B 858301    2126            mov     (__mullong_PARM_2 + 1),dph
073E 85F002    2127            mov     (__mullong_PARM_2 + 2),b
0741 F503      2128            mov     (__mullong_PARM_2 + 3),a
0743 D003      2129            pop     ar3
0745 D002      2130            pop     ar2
0747 EB        2131            mov     a,r3
0748 33        2132            rlc     a
0749 95E0      2133            subb    a,acc
074B FC        2134            mov     r4,a
074C           2135   ;        main.c:464: retval = (int16_t)(process_comp_y9 / 8192);
074C 8A82      2136            mov     dpl,r2
074E 8B83      2137            mov     dph,r3
0750 8CF0      2138            mov     b,r4
0752 120000    2139            lcall   __mullong
0755 750000    2140            mov     __divslong_PARM_2,#0x00
0758 750120    2141            mov     (__divslong_PARM_2 + 1),#0x20
075B 750200    2142            mov     (__divslong_PARM_2 + 2),#0x00
075E 750300    2143            mov     (__divslong_PARM_2 + 3),#0x00
0761 120000    2144            lcall   __divslong
0764 AA82      2145            mov     r2,dpl
0766 AB83      2146            mov     r3,dph
0768           2147   ;        main.c:465: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
0768 905550    2148            mov     dptr,#_dig_y1
076B E0        2149            movx    a,@dptr
076C FC        2150            mov     r4,a
076D 33        2151            rlc     a
076E 95E0      2152            subb    a,acc
0770 C4        2153            swap    a
0771 03        2154            rr      a
0772 54F8      2155            anl     a,#0xf8
0774 CC        2156            xch     a,r4
0775 C4        2157            swap    a
0776 03        2158            rr      a
0777 CC        2159            xch     a,r4
0778 6C        2160            xrl     a,r4
0779 CC        2161            xch     a,r4
077A 54F8      2162            anl     a,#0xf8
077C CC        2163            xch     a,r4
077D 6C        2164            xrl     a,r4
077E FD        2165            mov     r5,a
077F EC        2166            mov     a,r4
0780 2A        2167            add     a,r2
0781 F582      2168            mov     dpl,a
0783 ED        2169            mov     a,r5
0784 3B        2170            addc    a,r3
0785 F583      2171            mov     dph,a
0787 750010    2172            mov     __divsint_PARM_2,#0x10
078A E4        2173            clr     a
078B F501      2174            mov     (__divsint_PARM_2 + 1),a
078D 120000    2175            lcall   __divsint
0790 E582      2176            mov     a,dpl
0792 8583F0    2177            mov     b,dph
0795 90CDC8    2178            mov     dptr,#_BMM150_compensate_y_retval_1_115
0798 F0        2179            movx    @dptr,a
0799 A3        2180            inc     dptr
079A E5F0      2181            mov     a,b
079C F0        2182            movx    @dptr,a
079D 8000      2183            sjmp    L011012?
079F           2184   L011008?:
079F           2185   ;        main.c:469: retval = BMM150_OVERFLOW_OUTPUT;
079F 90CDC8    2186            mov     dptr,#_BMM150_compensate_y_retval_1_115
07A2 E4        2187            clr     a
07A3 F0        2188            movx    @dptr,a
07A4 A3        2189            inc     dptr
07A5 7480      2190            mov     a,#0x80
07A7 F0        2191            movx    @dptr,a
07A8 8000      2192            sjmp    L011012?
07AA           2193   L011011?:
07AA           2194   ;        main.c:475: retval = BMM150_OVERFLOW_OUTPUT;
07AA 90CDC8    2195            mov     dptr,#_BMM150_compensate_y_retval_1_115
07AD E4        2196            clr     a
07AE F0        2197            movx    @dptr,a
07AF A3        2198            inc     dptr
07B0 7480      2199            mov     a,#0x80
07B2 F0        2200            movx    @dptr,a
07B3           2201   L011012?:
07B3           2202   ;        main.c:478: return retval;
07B3 90CDC8    2203            mov     dptr,#_BMM150_compensate_y_retval_1_115
07B6 E0        2204            movx    a,@dptr
07B7 FA        2205            mov     r2,a
07B8 A3        2206            inc     dptr
07B9 E0        2207            movx    a,@dptr
07BA 8A82      2208            mov     dpl,r2
07BC F583      2209            mov     dph,a
07BE 22        2210            ret
07BF           2211   ;------------------------------------------------------------
07BF           2212   ;Allocation info for local variables in function 'BMM150_Read_Data'
07BF           2213   ;------------------------------------------------------------
07BF           2214   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
07BF           2215   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_123'
07BF           2216   ;raw_x_lsb                 Allocated with name '_BMM150_Read_Data_raw_x_lsb_1_124'
07BF           2217   ;raw_x_msb                 Allocated with name '_BMM150_Read_Data_raw_x_msb_1_124'
07BF           2218   ;raw_y_lsb                 Allocated with name '_BMM150_Read_Data_raw_y_lsb_1_124'
07BF           2219   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_124'
07BF           2220   ;raw_rhall_lsb             Allocated with name '_BMM150_Read_Data_raw_rhall_lsb_1_124'
07BF           2221   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_124'
07BF           2222   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_124'
07BF           2223   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_124'
07BF           2224   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_124'
07BF           2225   ;msb_data                  Allocated with name '_BMM150_Read_Data_msb_data_1_124'
07BF           2226   ;------------------------------------------------------------
07BF           2227   ;        main.c:481: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y)
07BF           2228   ;        -----------------------------------------
07BF           2229   ;         function BMM150_Read_Data
07BF           2230   ;        -----------------------------------------
07BF           2231   _BMM150_Read_Data:
07BF 858258    2232            mov     _BMM150_Read_Data_mag_x_1_123,dpl
07C2 858359    2233            mov     (_BMM150_Read_Data_mag_x_1_123 + 1),dph
07C5 85F05A    2234            mov     (_BMM150_Read_Data_mag_x_1_123 + 2),b
07C8           2235   ;        main.c:488: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
07C8 758242    2236            mov     dpl,#0x42
07CB 120000    2237            lcall   _SPI_read
07CE AD82      2238            mov     r5,dpl
07D0           2239   ;        main.c:489: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
07D0 758243    2240            mov     dpl,#0x43
07D3 C005      2241            push    ar5
07D5 120000    2242            lcall   _SPI_read
07D8 AE82      2243            mov     r6,dpl
07DA           2244   ;        main.c:490: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
07DA 758244    2245            mov     dpl,#0x44
07DD C006      2246            push    ar6
07DF 120000    2247            lcall   _SPI_read
07E2 AF82      2248            mov     r7,dpl
07E4           2249   ;        main.c:491: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
07E4 758245    2250            mov     dpl,#0x45
07E7 C007      2251            push    ar7
07E9 120000    2252            lcall   _SPI_read
07EC A882      2253            mov     r0,dpl
07EE           2254   ;        main.c:494: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
07EE 758248    2255            mov     dpl,#0x48
07F1 C000      2256            push    ar0
07F3 120000    2257            lcall   _SPI_read
07F6 A982      2258            mov     r1,dpl
07F8           2259   ;        main.c:495: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
07F8 758249    2260            mov     dpl,#0x49
07FB C001      2261            push    ar1
07FD 120000    2262            lcall   _SPI_read
0800 AA82      2263            mov     r2,dpl
0802 D001      2264            pop     ar1
0804 D000      2265            pop     ar0
0806 D007      2266            pop     ar7
0808 D006      2267            pop     ar6
080A D005      2268            pop     ar5
080C           2269   ;        main.c:499: raw_x_lsb = ((raw_x_lsb & 0b_1111_1000)) >> 3;
080C 5305F8    2270            anl     ar5,#0xF8
080F ED        2271            mov     a,r5
0810 C4        2272            swap    a
0811 23        2273            rl      a
0812 541F      2274            anl     a,#0x1f
0814 FD        2275            mov     r5,a
0815           2276   ;        main.c:500: msb_data = ((int16_t)((int8_t)raw_x_msb)) << 5; 
0815 EE        2277            mov     a,r6
0816 33        2278            rlc     a
0817 95E0      2279            subb    a,acc
0819 C4        2280            swap    a
081A 23        2281            rl      a
081B 54E0      2282            anl     a,#0xe0
081D CE        2283            xch     a,r6
081E C4        2284            swap    a
081F 23        2285            rl      a
0820 CE        2286            xch     a,r6
0821 6E        2287            xrl     a,r6
0822 CE        2288            xch     a,r6
0823 54E0      2289            anl     a,#0xe0
0825 CE        2290            xch     a,r6
0826 6E        2291            xrl     a,r6
0827 FB        2292            mov     r3,a
0828           2293   ;        main.c:501: x_val = (int16_t)(msb_data | raw_x_lsb);
0828 7C00      2294            mov     r4,#0x00
082A 90CE78    2295            mov     dptr,#_BMM150_Read_Data_x_val_1_124
082D ED        2296            mov     a,r5
082E 4E        2297            orl     a,r6
082F F0        2298            movx    @dptr,a
0830 EC        2299            mov     a,r4
0831 4B        2300            orl     a,r3
0832 A3        2301            inc     dptr
0833 F0        2302            movx    @dptr,a
0834           2303   ;        main.c:504: raw_y_lsb = ((raw_y_lsb & 0b_1111_1000)) >> 3;
0834 5307F8    2304            anl     ar7,#0xF8
0837 EF        2305            mov     a,r7
0838 C4        2306            swap    a
0839 23        2307            rl      a
083A 541F      2308            anl     a,#0x1f
083C FF        2309            mov     r7,a
083D           2310   ;        main.c:505: msb_data = ((int16_t)((int8_t)raw_y_msb)) << 5; 
083D E8        2311            mov     a,r0
083E 33        2312            rlc     a
083F 95E0      2313            subb    a,acc
0841 C4        2314            swap    a
0842 23        2315            rl      a
0843 54E0      2316            anl     a,#0xe0
0845 C8        2317            xch     a,r0
0846 C4        2318            swap    a
0847 23        2319            rl      a
0848 C8        2320            xch     a,r0
0849 68        2321            xrl     a,r0
084A C8        2322            xch     a,r0
084B 54E0      2323            anl     a,#0xe0
084D C8        2324            xch     a,r0
084E 68        2325            xrl     a,r0
084F FB        2326            mov     r3,a
0850           2327   ;        main.c:506: y_val = (int16_t)(msb_data | raw_y_lsb);
0850 7C00      2328            mov     r4,#0x00
0852 90CEC8    2329            mov     dptr,#_BMM150_Read_Data_y_val_1_124
0855 EF        2330            mov     a,r7
0856 48        2331            orl     a,r0
0857 F0        2332            movx    @dptr,a
0858 EC        2333            mov     a,r4
0859 4B        2334            orl     a,r3
085A A3        2335            inc     dptr
085B F0        2336            movx    @dptr,a
085C           2337   ;        main.c:514: raw_rhall_lsb = ((raw_rhall_lsb & 0xFC) >> 2);
085C 5301FC    2338            anl     ar1,#0xFC
085F E9        2339            mov     a,r1
0860 03        2340            rr      a
0861 03        2341            rr      a
0862 543F      2342            anl     a,#0x3f
0864 F9        2343            mov     r1,a
0865           2344   ;        main.c:515: rhall_val = (uint16_t)(((uint16_t)raw_rhall_msb << 6) | raw_rhall_lsb);
0865 E4        2345            clr     a
0866 5403      2346            anl     a,#0x03
0868 A2E0      2347            mov     c,acc.0
086A CA        2348            xch     a,r2
086B 13        2349            rrc     a
086C CA        2350            xch     a,r2
086D 13        2351            rrc     a
086E A2E0      2352            mov     c,acc.0
0870 CA        2353            xch     a,r2
0871 13        2354            rrc     a
0872 CA        2355            xch     a,r2
0873 13        2356            rrc     a
0874 CA        2357            xch     a,r2
0875 FB        2358            mov     r3,a
0876 7C00      2359            mov     r4,#0x00
0878 90CF28    2360            mov     dptr,#_BMM150_Read_Data_rhall_val_1_124
087B E9        2361            mov     a,r1
087C 4A        2362            orl     a,r2
087D F0        2363            movx    @dptr,a
087E EC        2364            mov     a,r4
087F 4B        2365            orl     a,r3
0880 A3        2366            inc     dptr
0881 F0        2367            movx    @dptr,a
0882           2368   ;        main.c:518: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
0882 755028    2369            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_124
0885 7551CF    2370            mov     (_BMM150_compensate_x_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_124 >> 8)
0888 755200    2371            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x00
088B 90CE78    2372            mov     dptr,#_BMM150_Read_Data_x_val_1_124
088E 75F000    2373            mov     b,#0x00
0891 120000    2374            lcall   _BMM150_compensate_x
0894 AA82      2375            mov     r2,dpl
0896 AB83      2376            mov     r3,dph
0898 855882    2377            mov     dpl,_BMM150_Read_Data_mag_x_1_123
089B 855983    2378            mov     dph,(_BMM150_Read_Data_mag_x_1_123 + 1)
089E 855AF0    2379            mov     b,(_BMM150_Read_Data_mag_x_1_123 + 2)
08A1 EA        2380            mov     a,r2
08A2 120000    2381            lcall   __gptrput
08A5 A3        2382            inc     dptr
08A6 EB        2383            mov     a,r3
08A7 120000    2384            lcall   __gptrput
08AA           2385   ;        main.c:519: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
08AA AAB0      2386            mov     r2,_BMM150_Read_Data_PARM_2
08AC ABB1      2387            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
08AE ACB2      2388            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
08B0 750028    2389            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_124
08B3 7501CF    2390            mov     (_BMM150_compensate_y_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_124 >> 8)
08B6 750200    2391            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x00
08B9 90CEC8    2392            mov     dptr,#_BMM150_Read_Data_y_val_1_124
08BC 75F000    2393            mov     b,#0x00
08BF C002      2394            push    ar2
08C1 C003      2395            push    ar3
08C3 C004      2396            push    ar4
08C5 120000    2397            lcall   _BMM150_compensate_y
08C8 AD82      2398            mov     r5,dpl
08CA AE83      2399            mov     r6,dph
08CC D004      2400            pop     ar4
08CE D003      2401            pop     ar3
08D0 D002      2402            pop     ar2
08D2 8A82      2403            mov     dpl,r2
08D4 8B83      2404            mov     dph,r3
08D6 8CF0      2405            mov     b,r4
08D8 ED        2406            mov     a,r5
08D9 120000    2407            lcall   __gptrput
08DC A3        2408            inc     dptr
08DD EE        2409            mov     a,r6
08DE 020000    2410            ljmp    __gptrput
08E1           2411   ;------------------------------------------------------------
08E1           2412   ;Allocation info for local variables in function 'UART1_Init'
08E1           2413   ;------------------------------------------------------------
08E1           2414   ;baudrate                  Allocated to registers r2 r3 r4 r5 
08E1           2415   ;------------------------------------------------------------
08E1           2416   ;        main.c:525: void UART1_Init (unsigned long baudrate)
08E1           2417   ;        -----------------------------------------
08E1           2418   ;         function UART1_Init
08E1           2419   ;        -----------------------------------------
08E1           2420   _UART1_Init:
08E1 AA82      2421            mov     r2,dpl
08E3 AB83      2422            mov     r3,dph
08E5 ACF0      2423            mov     r4,b
08E7 FD        2424            mov     r5,a
08E8           2425   ;        main.c:527: SFRPAGE = 0x20;
08E8 75A720    2426            mov     _SFRPAGE,#0x20
08EB           2427   ;        main.c:528: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
08EB 75930C    2428            mov     _SMOD1,#0x0C
08EE           2429   ;        main.c:529: SCON1 = 0x10;
08EE 75C810    2430            mov     _SCON1,#0x10
08F1           2431   ;        main.c:530: SBCON1 =0x00;   // disable baud rate generator
08F1 759400    2432            mov     _SBCON1,#0x00
08F4           2433   ;        main.c:531: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
08F4 8A00      2434            mov     __divulong_PARM_2,r2
08F6 8B01      2435            mov     (__divulong_PARM_2 + 1),r3
08F8 8C02      2436            mov     (__divulong_PARM_2 + 2),r4
08FA 8D03      2437            mov     (__divulong_PARM_2 + 3),r5
08FC 90A200    2438            mov     dptr,#0xA200
08FF 75F04A    2439            mov     b,#0x4A
0902 7404      2440            mov     a,#0x04
0904 120000    2441            lcall   __divulong
0907 AA82      2442            mov     r2,dpl
0909 AB83      2443            mov     r3,dph
090B ACF0      2444            mov     r4,b
090D FD        2445            mov     r5,a
090E 750018    2446            mov     __divulong_PARM_2,#0x18
0911 E4        2447            clr     a
0912 F501      2448            mov     (__divulong_PARM_2 + 1),a
0914 F502      2449            mov     (__divulong_PARM_2 + 2),a
0916 F503      2450            mov     (__divulong_PARM_2 + 3),a
0918 8A82      2451            mov     dpl,r2
091A 8B83      2452            mov     dph,r3
091C 8CF0      2453            mov     b,r4
091E ED        2454            mov     a,r5
091F 120000    2455            lcall   __divulong
0922 AA82      2456            mov     r2,dpl
0924 AB83      2457            mov     r3,dph
0926 ACF0      2458            mov     r4,b
0928 FD        2459            mov     r5,a
0929 E4        2460            clr     a
092A C3        2461            clr     c
092B 9A        2462            subb    a,r2
092C FA        2463            mov     r2,a
092D E4        2464            clr     a
092E 9B        2465            subb    a,r3
092F FB        2466            mov     r3,a
0930 7401      2467            mov     a,#0x01
0932 9C        2468            subb    a,r4
0933 E4        2469            clr     a
0934 9D        2470            subb    a,r5
0935 8A95      2471            mov     _SBRL1,r2
0937 8B96      2472            mov     (_SBRL1 >> 8),r3
0939           2473   ;        main.c:532: TI1 = 1; // indicate ready for TX
0939 D2C9      2474            setb    _TI1
093B           2475   ;        main.c:533: SBCON1 |= 0x40;   // enable baud rate generator
093B 439440    2476            orl     _SBCON1,#0x40
093E           2477   ;        main.c:534: SFRPAGE = 0x00;
093E 75A700    2478            mov     _SFRPAGE,#0x00
0941 22        2479            ret
0942           2480   ;------------------------------------------------------------
0942           2481   ;Allocation info for local variables in function 'putchar1'
0942           2482   ;------------------------------------------------------------
0942           2483   ;c                         Allocated to registers r2 
0942           2484   ;------------------------------------------------------------
0942           2485   ;        main.c:537: void putchar1 (char c) 
0942           2486   ;        -----------------------------------------
0942           2487   ;         function putchar1
0942           2488   ;        -----------------------------------------
0942           2489   _putchar1:
0942 AA82      2490            mov     r2,dpl
0944           2491   ;        main.c:539: SFRPAGE = 0x20;
0944 75A720    2492            mov     _SFRPAGE,#0x20
0947           2493   ;        main.c:540: while (!TI1);
0947           2494   L014001?:
0947           2495   ;        main.c:541: TI1=0;
0947 10C938    2496            jbc     _TI1,L014008?
094A 8000      2497            sjmp    L014001?
094C           2498   L014008?:
094C           2499   ;        main.c:542: SBUF1 = c;
094C 8A92      2500            mov     _SBUF1,r2
094E           2501   ;        main.c:543: SFRPAGE = 0x00;
094E 75A700    2502            mov     _SFRPAGE,#0x00
0951 22        2503            ret
0952           2504   ;------------------------------------------------------------
0952           2505   ;Allocation info for local variables in function 'sendstr1'
0952           2506   ;------------------------------------------------------------
0952           2507   ;s                         Allocated to registers r2 r3 r4 
0952           2508   ;------------------------------------------------------------
0952           2509   ;        main.c:546: void sendstr1 (char * s)
0952           2510   ;        -----------------------------------------
0952           2511   ;         function sendstr1
0952           2512   ;        -----------------------------------------
0952           2513   _sendstr1:
0952 AA82      2514            mov     r2,dpl
0954 AB83      2515            mov     r3,dph
0956 ACF0      2516            mov     r4,b
0958           2517   ;        main.c:548: while(*s)
0958           2518   L015001?:
0958 8A82      2519            mov     dpl,r2
095A 8B83      2520            mov     dph,r3
095C 8CF0      2521            mov     b,r4
095E 120000    2522            lcall   __gptrget
0961 FD        2523            mov     r5,a
0962 6000      2524            jz      L015004?
0964           2525   ;        main.c:550: putchar1(*s);
0964 8D82      2526            mov     dpl,r5
0966 C002      2527            push    ar2
0968 C003      2528            push    ar3
096A C004      2529            push    ar4
096C 120000    2530            lcall   _putchar1
096F D004      2531            pop     ar4
0971 D003      2532            pop     ar3
0973 D002      2533            pop     ar2
0975           2534   ;        main.c:551: s++;        
0975 0A        2535            inc     r2
0976 BA0078    2536            cjne    r2,#0x00,L015001?
0979 0B        2537            inc     r3
097A 8000      2538            sjmp    L015001?
097C           2539   L015004?:
097C 22        2540            ret
097D           2541   ;------------------------------------------------------------
097D           2542   ;Allocation info for local variables in function 'getchar1'
097D           2543   ;------------------------------------------------------------
097D           2544   ;c                         Allocated with name '_getchar1_c_1_133'
097D           2545   ;------------------------------------------------------------
097D           2546   ;        main.c:555: char getchar1 (void)
097D           2547   ;        -----------------------------------------
097D           2548   ;         function getchar1
097D           2549   ;        -----------------------------------------
097D           2550   _getchar1:
097D           2551   ;        main.c:558: SFRPAGE = 0x20;
097D 75A720    2552            mov     _SFRPAGE,#0x20
0980           2553   ;        main.c:559: while (!RI1);
0980           2554   L016001?:
0980           2555   ;        main.c:560: RI1=0;
0980 10C838    2556            jbc     _RI1,L016008?
0983 8000      2557            sjmp    L016001?
0985           2558   L016008?:
0985           2559   ;        main.c:562: SCON1&=0b_0011_1111;
0985 53C83F    2560            anl     _SCON1,#0x3F
0988           2561   ;        main.c:563: c = SBUF1;
0988 859282    2562            mov     dpl,_SBUF1
098B           2563   ;        main.c:564: SFRPAGE = 0x00;
098B 75A700    2564            mov     _SFRPAGE,#0x00
098E           2565   ;        main.c:565: return (c);
098E 22        2566            ret
098F           2567   ;------------------------------------------------------------
098F           2568   ;Allocation info for local variables in function 'getchar1_with_timeout'
098F           2569   ;------------------------------------------------------------
098F           2570   ;c                         Allocated with name '_getchar1_with_timeout_c_1_135'
098F           2571   ;timeout                   Allocated with name '_getchar1_with_timeout_timeout_1_135'
098F           2572   ;------------------------------------------------------------
098F           2573   ;        main.c:568: char getchar1_with_timeout (void)
098F           2574   ;        -----------------------------------------
098F           2575   ;         function getchar1_with_timeout
098F           2576   ;        -----------------------------------------
098F           2577   _getchar1_with_timeout:
098F           2578   ;        main.c:572: SFRPAGE = 0x20;
098F 75A720    2579            mov     _SFRPAGE,#0x20
0992           2580   ;        main.c:574: while (!RI1)
0992 7A00      2581            mov     r2,#0x00
0994 7B00      2582            mov     r3,#0x00
0996           2583   L017003?:
0996 20C8B8    2584            jb      _RI1,L017005?
0999           2585   ;        main.c:576: SFRPAGE = 0x00;
0999 75A700    2586            mov     _SFRPAGE,#0x00
099C           2587   ;        main.c:577: Timer3us(20);
099C 758214    2588            mov     dpl,#0x14
099F C002      2589            push    ar2
09A1 C003      2590            push    ar3
09A3 120000    2591            lcall   _Timer3us
09A6 D003      2592            pop     ar3
09A8 D002      2593            pop     ar2
09AA           2594   ;        main.c:578: SFRPAGE = 0x20;
09AA 75A720    2595            mov     _SFRPAGE,#0x20
09AD           2596   ;        main.c:579: timeout++;
09AD 0A        2597            inc     r2
09AE BA00F8    2598            cjne    r2,#0x00,L017012?
09B1 0B        2599            inc     r3
09B2           2600   L017012?:
09B2           2601   ;        main.c:580: if(timeout==25000)
09B2 BAA878    2602            cjne    r2,#0xA8,L017003?
09B5 BB6178    2603            cjne    r3,#0x61,L017003?
09B8           2604   ;        main.c:582: SFRPAGE = 0x00;
09B8 75A700    2605            mov     _SFRPAGE,#0x00
09BB           2606   ;        main.c:583: return ('\n'); // Timeout after half second
09BB 75820A    2607            mov     dpl,#0x0A
09BE 22        2608            ret
09BF           2609   L017005?:
09BF           2610   ;        main.c:586: RI1=0;
09BF C2C8      2611            clr     _RI1
09C1           2612   ;        main.c:588: SCON1&=0b_0011_1111;
09C1 53C83F    2613            anl     _SCON1,#0x3F
09C4           2614   ;        main.c:589: c = SBUF1;
09C4 859282    2615            mov     dpl,_SBUF1
09C7           2616   ;        main.c:590: SFRPAGE = 0x00;
09C7 75A700    2617            mov     _SFRPAGE,#0x00
09CA           2618   ;        main.c:591: return (c);
09CA 22        2619            ret
09CB           2620   ;------------------------------------------------------------
09CB           2621   ;Allocation info for local variables in function 'getstr1'
09CB           2622   ;------------------------------------------------------------
09CB           2623   ;n                         Allocated with name '_getstr1_PARM_2'
09CB           2624   ;s                         Allocated to registers r2 r3 r4 
09CB           2625   ;c                         Allocated with name '_getstr1_c_1_139'
09CB           2626   ;cnt                       Allocated with name '_getstr1_cnt_1_139'
09CB           2627   ;------------------------------------------------------------
09CB           2628   ;        main.c:594: void getstr1 (char * s, unsigned char n)
09CB           2629   ;        -----------------------------------------
09CB           2630   ;         function getstr1
09CB           2631   ;        -----------------------------------------
09CB           2632   _getstr1:
09CB AA82      2633            mov     r2,dpl
09CD AB83      2634            mov     r3,dph
09CF ACF0      2635            mov     r4,b
09D1           2636   ;        main.c:600: while(1)
09D1 7D00      2637            mov     r5,#0x00
09D3 8A06      2638            mov     ar6,r2
09D5 8B07      2639            mov     ar7,r3
09D7 8C00      2640            mov     ar0,r4
09D9           2641   L018007?:
09D9           2642   ;        main.c:602: c=getchar1_with_timeout();
09D9 C002      2643            push    ar2
09DB C003      2644            push    ar3
09DD C004      2645            push    ar4
09DF C005      2646            push    ar5
09E1 C006      2647            push    ar6
09E3 C007      2648            push    ar7
09E5 C000      2649            push    ar0
09E7 120000    2650            lcall   _getchar1_with_timeout
09EA A982      2651            mov     r1,dpl
09EC D000      2652            pop     ar0
09EE D007      2653            pop     ar7
09F0 D006      2654            pop     ar6
09F2 D005      2655            pop     ar5
09F4 D004      2656            pop     ar4
09F6 D003      2657            pop     ar3
09F8 D002      2658            pop     ar2
09FA           2659   ;        main.c:603: if(c=='\n')
09FA B90A78    2660            cjne    r1,#0x0A,L018002?
09FD           2661   ;        main.c:605: *s=0;
09FD 8A82      2662            mov     dpl,r2
09FF 8B83      2663            mov     dph,r3
0A01 8CF0      2664            mov     b,r4
0A03 E4        2665            clr     a
0A04           2666   ;        main.c:606: return;
0A04 020000    2667            ljmp    __gptrput
0A07           2668   L018002?:
0A07           2669   ;        main.c:609: if (cnt<n)
0A07 C3        2670            clr     c
0A08 ED        2671            mov     a,r5
0A09 9560      2672            subb    a,_getstr1_PARM_2
0A0B 5000      2673            jnc     L018004?
0A0D           2674   ;        main.c:611: cnt++;
0A0D 0D        2675            inc     r5
0A0E           2676   ;        main.c:612: *s=c;
0A0E 8E82      2677            mov     dpl,r6
0A10 8F83      2678            mov     dph,r7
0A12 88F0      2679            mov     b,r0
0A14 E9        2680            mov     a,r1
0A15 120000    2681            lcall   __gptrput
0A18 A3        2682            inc     dptr
0A19 AE82      2683            mov     r6,dpl
0A1B AF83      2684            mov     r7,dph
0A1D           2685   ;        main.c:613: s++;
0A1D 8E02      2686            mov     ar2,r6
0A1F 8F03      2687            mov     ar3,r7
0A21 8804      2688            mov     ar4,r0
0A23 8000      2689            sjmp    L018007?
0A25           2690   L018004?:
0A25           2691   ;        main.c:617: *s=0;
0A25 8A82      2692            mov     dpl,r2
0A27 8B83      2693            mov     dph,r3
0A29 8CF0      2694            mov     b,r4
0A2B E4        2695            clr     a
0A2C           2696   ;        main.c:618: return;
0A2C 020000    2697            ljmp    __gptrput
0A2F           2698   ;------------------------------------------------------------
0A2F           2699   ;Allocation info for local variables in function 'RXU1'
0A2F           2700   ;------------------------------------------------------------
0A2F           2701   ;------------------------------------------------------------
0A2F           2702   ;        main.c:624: bit RXU1 (void)
0A2F           2703   ;        -----------------------------------------
0A2F           2704   ;         function RXU1
0A2F           2705   ;        -----------------------------------------
0A2F           2706   _RXU1:
0A2F           2707   ;        main.c:627: SFRPAGE = 0x20;
0A2F 75A720    2708            mov     _SFRPAGE,#0x20
0A32           2709   ;        main.c:628: mybit=RI1;
0A32 A2C8      2710            mov     c,_RI1
0A34           2711   ;        main.c:629: SFRPAGE = 0x00;
0A34 75A700    2712            mov     _SFRPAGE,#0x00
0A37           2713   ;        main.c:630: return mybit;
0A37 22        2714            ret
0A38           2715   ;------------------------------------------------------------
0A38           2716   ;Allocation info for local variables in function 'waitms_or_RI1'
0A38           2717   ;------------------------------------------------------------
0A38           2718   ;ms                        Allocated to registers r2 r3 
0A38           2719   ;j                         Allocated with name '_waitms_or_RI1_j_1_147'
0A38           2720   ;k                         Allocated with name '_waitms_or_RI1_k_1_147'
0A38           2721   ;------------------------------------------------------------
0A38           2722   ;        main.c:633: void waitms_or_RI1 (unsigned int ms)
0A38           2723   ;        -----------------------------------------
0A38           2724   ;         function waitms_or_RI1
0A38           2725   ;        -----------------------------------------
0A38           2726   _waitms_or_RI1:
0A38 AA82      2727            mov     r2,dpl
0A3A AB83      2728            mov     r3,dph
0A3C           2729   ;        main.c:637: for(j=0; j<ms; j++)
0A3C 7C00      2730            mov     r4,#0x00
0A3E 7D00      2731            mov     r5,#0x00
0A40           2732   L020007?:
0A40 C3        2733            clr     c
0A41 EC        2734            mov     a,r4
0A42 9A        2735            subb    a,r2
0A43 ED        2736            mov     a,r5
0A44 9B        2737            subb    a,r3
0A45 5000      2738            jnc     L020011?
0A47           2739   ;        main.c:639: for (k=0; k<4; k++)
0A47 7E00      2740            mov     r6,#0x00
0A49           2741   L020003?:
0A49 BE04B8    2742            cjne    r6,#0x04,L020019?
0A4C           2743   L020019?:
0A4C 5000      2744            jnc     L020009?
0A4E           2745   ;        main.c:641: if(RXU1()) return;
0A4E C002      2746            push    ar2
0A50 C003      2747            push    ar3
0A52 C004      2748            push    ar4
0A54 C005      2749            push    ar5
0A56 C006      2750            push    ar6
0A58 120000    2751            lcall   _RXU1
0A5B E4        2752            clr     a
0A5C 33        2753            rlc     a
0A5D D006      2754            pop     ar6
0A5F D005      2755            pop     ar5
0A61 D004      2756            pop     ar4
0A63 D003      2757            pop     ar3
0A65 D002      2758            pop     ar2
0A67 6000      2759            jz      L020002?
0A69 22        2760            ret
0A6A           2761   L020002?:
0A6A           2762   ;        main.c:642: Timer3us(250);
0A6A 7582FA    2763            mov     dpl,#0xFA
0A6D C002      2764            push    ar2
0A6F C003      2765            push    ar3
0A71 C004      2766            push    ar4
0A73 C005      2767            push    ar5
0A75 C006      2768            push    ar6
0A77 120000    2769            lcall   _Timer3us
0A7A D006      2770            pop     ar6
0A7C D005      2771            pop     ar5
0A7E D004      2772            pop     ar4
0A80 D003      2773            pop     ar3
0A82 D002      2774            pop     ar2
0A84           2775   ;        main.c:639: for (k=0; k<4; k++)
0A84 0E        2776            inc     r6
0A85 8000      2777            sjmp    L020003?
0A87           2778   L020009?:
0A87           2779   ;        main.c:637: for(j=0; j<ms; j++)
0A87 0C        2780            inc     r4
0A88 BC00F8    2781            cjne    r4,#0x00,L020007?
0A8B 0D        2782            inc     r5
0A8C 8000      2783            sjmp    L020007?
0A8E           2784   L020011?:
0A8E 22        2785            ret
0A8F           2786   ;------------------------------------------------------------
0A8F           2787   ;Allocation info for local variables in function 'SendATCommand'
0A8F           2788   ;------------------------------------------------------------
0A8F           2789   ;s                         Allocated to registers r2 r3 r4 
0A8F           2790   ;------------------------------------------------------------
0A8F           2791   ;        main.c:647: void SendATCommand (char * s)
0A8F           2792   ;        -----------------------------------------
0A8F           2793   ;         function SendATCommand
0A8F           2794   ;        -----------------------------------------
0A8F           2795   _SendATCommand:
0A8F AA82      2796            mov     r2,dpl
0A91 AB83      2797            mov     r3,dph
0A93 ACF0      2798            mov     r4,b
0A95           2799   ;        main.c:649: printf("Command: %s", s);
0A95 C002      2800            push    ar2
0A97 C003      2801            push    ar3
0A99 C004      2802            push    ar4
0A9B C002      2803            push    ar2
0A9D C003      2804            push    ar3
0A9F C004      2805            push    ar4
0AA1 7478      2806            mov     a,#__str_2
0AA3 C0E0      2807            push    acc
0AA5 74E6      2808            mov     a,#(__str_2 >> 8)
0AA7 C0E0      2809            push    acc
0AA9 7480      2810            mov     a,#0x80
0AAB C0E0      2811            push    acc
0AAD 120000    2812            lcall   _printf
0AB0 E581      2813            mov     a,sp
0AB2 24FA      2814            add     a,#0xfa
0AB4 F581      2815            mov     sp,a
0AB6           2816   ;        main.c:650: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0AB6 C2A0      2817            clr     _P2_0
0AB8           2818   ;        main.c:651: waitms(5);
0AB8 900005    2819            mov     dptr,#0x0005
0ABB 120000    2820            lcall   _waitms
0ABE D004      2821            pop     ar4
0AC0 D003      2822            pop     ar3
0AC2 D002      2823            pop     ar2
0AC4           2824   ;        main.c:652: sendstr1(s);
0AC4 8A82      2825            mov     dpl,r2
0AC6 8B83      2826            mov     dph,r3
0AC8 8CF0      2827            mov     b,r4
0ACA 120000    2828            lcall   _sendstr1
0ACD           2829   ;        main.c:653: getstr1(buff, sizeof(buff)-1);
0ACD 756013    2830            mov     _getstr1_PARM_2,#0x13
0AD0 9056D0    2831            mov     dptr,#_buff
0AD3 75F040    2832            mov     b,#0x40
0AD6 120000    2833            lcall   _getstr1
0AD9           2834   ;        main.c:654: waitms(10);
0AD9 90000A    2835            mov     dptr,#0x000A
0ADC 120000    2836            lcall   _waitms
0ADF           2837   ;        main.c:655: P2_0=1; // 'set' pin to 1 is normal operation mode.
0ADF D2A0      2838            setb    _P2_0
0AE1           2839   ;        main.c:656: printf("Response: %s\r\n", buff);
0AE1 74D0      2840            mov     a,#_buff
0AE3 C0E0      2841            push    acc
0AE5 7456      2842            mov     a,#(_buff >> 8)
0AE7 C0E0      2843            push    acc
0AE9 7440      2844            mov     a,#0x40
0AEB C0E0      2845            push    acc
0AED 74B8      2846            mov     a,#__str_3
0AEF C0E0      2847            push    acc
0AF1 74E6      2848            mov     a,#(__str_3 >> 8)
0AF3 C0E0      2849            push    acc
0AF5 7480      2850            mov     a,#0x80
0AF7 C0E0      2851            push    acc
0AF9 120000    2852            lcall   _printf
0AFC E581      2853            mov     a,sp
0AFE 24FA      2854            add     a,#0xfa
0B00 F581      2855            mov     sp,a
0B02 22        2856            ret
0B03           2857   ;------------------------------------------------------------
0B03           2858   ;Allocation info for local variables in function 'ReceptionOff'
0B03           2859   ;------------------------------------------------------------
0B03           2860   ;------------------------------------------------------------
0B03           2861   ;        main.c:659: void ReceptionOff (void)
0B03           2862   ;        -----------------------------------------
0B03           2863   ;         function ReceptionOff
0B03           2864   ;        -----------------------------------------
0B03           2865   _ReceptionOff:
0B03           2866   ;        main.c:661: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0B03 C2A0      2867            clr     _P2_0
0B05           2868   ;        main.c:662: waitms(10);
0B05 90000A    2869            mov     dptr,#0x000A
0B08 120000    2870            lcall   _waitms
0B0B           2871   ;        main.c:663: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0B0B 90E6F8    2872            mov     dptr,#__str_4
0B0E 75F080    2873            mov     b,#0x80
0B11 120000    2874            lcall   _sendstr1
0B14           2875   ;        main.c:664: waitms(10);
0B14 90000A    2876            mov     dptr,#0x000A
0B17 120000    2877            lcall   _waitms
0B1A           2878   ;        main.c:666: SCON1&=0b_0011_1111;
0B1A 53C83F    2879            anl     _SCON1,#0x3F
0B1D           2880   ;        main.c:667: P2_0=1; // 'set' pin to 1 is normal operation mode.
0B1D D2A0      2881            setb    _P2_0
0B1F 22        2882            ret
0B20           2883   ;------------------------------------------------------------
0B20           2884   ;Allocation info for local variables in function 'measure_distance'
0B20           2885   ;------------------------------------------------------------
0B20           2886   ;------------------------------------------------------------
0B20           2887   ;        main.c:670: int measure_distance(void)
0B20           2888   ;        -----------------------------------------
0B20           2889   ;         function measure_distance
0B20           2890   ;        -----------------------------------------
0B20           2891   _measure_distance:
0B20           2892   ;        main.c:674: TL0 = 0; 
0B20 758A00    2893            mov     _TL0,#0x00
0B23           2894   ;        main.c:675: TH0 = 0; 
0B23 758C00    2895            mov     _TH0,#0x00
0B26           2896   ;        main.c:676: TF0 = 0; 
0B26 C28D      2897            clr     _TF0
0B28           2898   ;        main.c:677: overflow_count = 0;
0B28 9052D0    2899            mov     dptr,#_overflow_count
0B2B           2900   ;        main.c:678: duration = 0;
0B2B E4        2901            clr     a
0B2C F0        2902            movx    @dptr,a
0B2D 904C80    2903            mov     dptr,#_duration
0B30 F0        2904            movx    @dptr,a
0B31 A3        2905            inc     dptr
0B32 E4        2906            clr     a
0B33 F0        2907            movx    @dptr,a
0B34 A3        2908            inc     dptr
0B35 F0        2909            movx    @dptr,a
0B36 A3        2910            inc     dptr
0B37 F0        2911            movx    @dptr,a
0B38           2912   ;        main.c:680: TRIG_PIN = 1; 
0B38 D280      2913            setb    _P0_0
0B3A           2914   ;        main.c:681: for(i = 0; i < 40; i++);
0B3A 905250    2915            mov     dptr,#_i
0B3D 7428      2916            mov     a,#0x28
0B3F F0        2917            movx    @dptr,a
0B40 E4        2918            clr     a
0B41 A3        2919            inc     dptr
0B42 F0        2920            movx    @dptr,a
0B43           2921   L023016?:
0B43 905250    2922            mov     dptr,#_i
0B46 E0        2923            movx    a,@dptr
0B47 FA        2924            mov     r2,a
0B48 A3        2925            inc     dptr
0B49 E0        2926            movx    a,@dptr
0B4A FB        2927            mov     r3,a
0B4B 1A        2928            dec     r2
0B4C BAFF78    2929            cjne    r2,#0xff,L023029?
0B4F 1B        2930            dec     r3
0B50           2931   L023029?:
0B50 905250    2932            mov     dptr,#_i
0B53 EA        2933            mov     a,r2
0B54 F0        2934            movx    @dptr,a
0B55 A3        2935            inc     dptr
0B56 EB        2936            mov     a,r3
0B57 F0        2937            movx    @dptr,a
0B58 905250    2938            mov     dptr,#_i
0B5B E0        2939            movx    a,@dptr
0B5C FA        2940            mov     r2,a
0B5D A3        2941            inc     dptr
0B5E E0        2942            movx    a,@dptr
0B5F FB        2943            mov     r3,a
0B60 4A        2944            orl     a,r2
0B61 7000      2945            jnz     L023016?
0B63 905250    2946            mov     dptr,#_i
0B66 7428      2947            mov     a,#0x28
0B68 F0        2948            movx    @dptr,a
0B69 E4        2949            clr     a
0B6A A3        2950            inc     dptr
0B6B F0        2951            movx    @dptr,a
0B6C           2952   ;        main.c:682: TRIG_PIN = 0; 
0B6C C280      2953            clr     _P0_0
0B6E           2954   ;        main.c:684: while (ECHO_PIN != 0){
0B6E           2955   L023003?:
0B6E 30B1F8    2956            jnb     _P3_1,L023006?
0B71           2957   ;        main.c:685: i++;
0B71 905250    2958            mov     dptr,#_i
0B74 E0        2959            movx    a,@dptr
0B75 2401      2960            add     a,#0x01
0B77 F0        2961            movx    @dptr,a
0B78 A3        2962            inc     dptr
0B79 E0        2963            movx    a,@dptr
0B7A 3400      2964            addc    a,#0x00
0B7C F0        2965            movx    @dptr,a
0B7D           2966   ;        main.c:686: if (i > 3000){
0B7D 905250    2967            mov     dptr,#_i
0B80 E0        2968            movx    a,@dptr
0B81 FA        2969            mov     r2,a
0B82 A3        2970            inc     dptr
0B83 E0        2971            movx    a,@dptr
0B84 FB        2972            mov     r3,a
0B85 C3        2973            clr     c
0B86 74B8      2974            mov     a,#0xB8
0B88 9A        2975            subb    a,r2
0B89 740B      2976            mov     a,#0x0B
0B8B 9B        2977            subb    a,r3
0B8C 5000      2978            jnc     L023003?
0B8E           2979   ;        main.c:688: return -1;
0B8E 90FFFF    2980            mov     dptr,#0xFFFF
0B91 22        2981            ret
0B92           2982   ;        main.c:691: while (ECHO_PIN != 1);
0B92           2983   L023006?:
0B92 30B1F8    2984            jnb     _P3_1,L023006?
0B95           2985   ;        main.c:692: TR0 = 1; 
0B95 D28C      2986            setb    _TR0
0B97           2987   ;        main.c:693: while (ECHO_PIN == 1)
0B97           2988   L023011?:
0B97 30B178    2989            jnb     _P3_1,L023013?
0B9A           2990   ;        main.c:695: if (TF0 == 1){
0B9A           2991   ;        main.c:696: TF0 = 0; 
0B9A 108DB8    2992            jbc     _TF0,L023035?
0B9D 8000      2993            sjmp    L023011?
0B9F           2994   L023035?:
0B9F           2995   ;        main.c:697: overflow_count++;
0B9F 9052D0    2996            mov     dptr,#_overflow_count
0BA2 E0        2997            movx    a,@dptr
0BA3 2401      2998            add     a,#0x01
0BA5 F0        2999            movx    @dptr,a
0BA6 8000      3000            sjmp    L023011?
0BA8           3001   L023013?:
0BA8           3002   ;        main.c:701: TR0 = 0; 
0BA8 C28C      3003            clr     _TR0
0BAA           3004   ;        main.c:702: duration = (overflow_count*65536.0 + TH0*256.0 + TL0) * (12.0/SYSCLK);
0BAA 9052D0    3005            mov     dptr,#_overflow_count
0BAD E0        3006            movx    a,@dptr
0BAE F582      3007            mov     dpl,a
0BB0 120000    3008            lcall   ___uchar2fs
0BB3 AA82      3009            mov     r2,dpl
0BB5 AB83      3010            mov     r3,dph
0BB7 ACF0      3011            mov     r4,b
0BB9 FD        3012            mov     r5,a
0BBA C002      3013            push    ar2
0BBC C003      3014            push    ar3
0BBE C004      3015            push    ar4
0BC0 C005      3016            push    ar5
0BC2 900000    3017            mov     dptr,#0x0000
0BC5 75F080    3018            mov     b,#0x80
0BC8 7447      3019            mov     a,#0x47
0BCA 120000    3020            lcall   ___fsmul
0BCD AA82      3021            mov     r2,dpl
0BCF AB83      3022            mov     r3,dph
0BD1 ACF0      3023            mov     r4,b
0BD3 FD        3024            mov     r5,a
0BD4 E581      3025            mov     a,sp
0BD6 24FC      3026            add     a,#0xfc
0BD8 F581      3027            mov     sp,a
0BDA 858C82    3028            mov     dpl,_TH0
0BDD C002      3029            push    ar2
0BDF C003      3030            push    ar3
0BE1 C004      3031            push    ar4
0BE3 C005      3032            push    ar5
0BE5 120000    3033            lcall   ___uchar2fs
0BE8 AE82      3034            mov     r6,dpl
0BEA AF83      3035            mov     r7,dph
0BEC A8F0      3036            mov     r0,b
0BEE F9        3037            mov     r1,a
0BEF C006      3038            push    ar6
0BF1 C007      3039            push    ar7
0BF3 C000      3040            push    ar0
0BF5 C001      3041            push    ar1
0BF7 900000    3042            mov     dptr,#0x0000
0BFA 75F080    3043            mov     b,#0x80
0BFD 7443      3044            mov     a,#0x43
0BFF 120000    3045            lcall   ___fsmul
0C02 AE82      3046            mov     r6,dpl
0C04 AF83      3047            mov     r7,dph
0C06 A8F0      3048            mov     r0,b
0C08 F9        3049            mov     r1,a
0C09 E581      3050            mov     a,sp
0C0B 24FC      3051            add     a,#0xfc
0C0D F581      3052            mov     sp,a
0C0F D005      3053            pop     ar5
0C11 D004      3054            pop     ar4
0C13 D003      3055            pop     ar3
0C15 D002      3056            pop     ar2
0C17 C006      3057            push    ar6
0C19 C007      3058            push    ar7
0C1B C000      3059            push    ar0
0C1D C001      3060            push    ar1
0C1F 8A82      3061            mov     dpl,r2
0C21 8B83      3062            mov     dph,r3
0C23 8CF0      3063            mov     b,r4
0C25 ED        3064            mov     a,r5
0C26 120000    3065            lcall   ___fsadd
0C29 AA82      3066            mov     r2,dpl
0C2B AB83      3067            mov     r3,dph
0C2D ACF0      3068            mov     r4,b
0C2F FD        3069            mov     r5,a
0C30 E581      3070            mov     a,sp
0C32 24FC      3071            add     a,#0xfc
0C34 F581      3072            mov     sp,a
0C36 AE8A      3073            mov     r6,_TL0
0C38 7F00      3074            mov     r7,#0x00
0C3A 8E82      3075            mov     dpl,r6
0C3C 8F83      3076            mov     dph,r7
0C3E C002      3077            push    ar2
0C40 C003      3078            push    ar3
0C42 C004      3079            push    ar4
0C44 C005      3080            push    ar5
0C46 120000    3081            lcall   ___sint2fs
0C49 AE82      3082            mov     r6,dpl
0C4B AF83      3083            mov     r7,dph
0C4D A8F0      3084            mov     r0,b
0C4F F9        3085            mov     r1,a
0C50 D005      3086            pop     ar5
0C52 D004      3087            pop     ar4
0C54 D003      3088            pop     ar3
0C56 D002      3089            pop     ar2
0C58 C006      3090            push    ar6
0C5A C007      3091            push    ar7
0C5C C000      3092            push    ar0
0C5E C001      3093            push    ar1
0C60 8A82      3094            mov     dpl,r2
0C62 8B83      3095            mov     dph,r3
0C64 8CF0      3096            mov     b,r4
0C66 ED        3097            mov     a,r5
0C67 120000    3098            lcall   ___fsadd
0C6A AA82      3099            mov     r2,dpl
0C6C AB83      3100            mov     r3,dph
0C6E ACF0      3101            mov     r4,b
0C70 FD        3102            mov     r5,a
0C71 E581      3103            mov     a,sp
0C73 24FC      3104            add     a,#0xfc
0C75 F581      3105            mov     sp,a
0C77 C002      3106            push    ar2
0C79 C003      3107            push    ar3
0C7B C004      3108            push    ar4
0C7D C005      3109            push    ar5
0C7F 90F4FC    3110            mov     dptr,#0xF4FC
0C82 75F032    3111            mov     b,#0x32
0C85 7434      3112            mov     a,#0x34
0C87 120000    3113            lcall   ___fsmul
0C8A AA82      3114            mov     r2,dpl
0C8C AB83      3115            mov     r3,dph
0C8E ACF0      3116            mov     r4,b
0C90 FD        3117            mov     r5,a
0C91 E581      3118            mov     a,sp
0C93 24FC      3119            add     a,#0xfc
0C95 F581      3120            mov     sp,a
0C97 904C80    3121            mov     dptr,#_duration
0C9A EA        3122            mov     a,r2
0C9B F0        3123            movx    @dptr,a
0C9C A3        3124            inc     dptr
0C9D EB        3125            mov     a,r3
0C9E F0        3126            movx    @dptr,a
0C9F A3        3127            inc     dptr
0CA0 EC        3128            mov     a,r4
0CA1 F0        3129            movx    @dptr,a
0CA2 A3        3130            inc     dptr
0CA3 ED        3131            mov     a,r5
0CA4 F0        3132            movx    @dptr,a
0CA5           3133   ;        main.c:704: distance = 100 * (340.0 * duration * 100.0 / 2.0); // distance in cm
0CA5 C002      3134            push    ar2
0CA7 C003      3135            push    ar3
0CA9 C004      3136            push    ar4
0CAB C005      3137            push    ar5
0CAD 90D000    3138            mov     dptr,#0xD000
0CB0 75F004    3139            mov     b,#0x04
0CB3 7447      3140            mov     a,#0x47
0CB5 120000    3141            lcall   ___fsmul
0CB8 AA82      3142            mov     r2,dpl
0CBA AB83      3143            mov     r3,dph
0CBC ACF0      3144            mov     r4,b
0CBE FD        3145            mov     r5,a
0CBF E581      3146            mov     a,sp
0CC1 24FC      3147            add     a,#0xfc
0CC3 F581      3148            mov     sp,a
0CC5 E4        3149            clr     a
0CC6 C0E0      3150            push    acc
0CC8 C0E0      3151            push    acc
0CCA C0E0      3152            push    acc
0CCC 7440      3153            mov     a,#0x40
0CCE C0E0      3154            push    acc
0CD0 8A82      3155            mov     dpl,r2
0CD2 8B83      3156            mov     dph,r3
0CD4 8CF0      3157            mov     b,r4
0CD6 ED        3158            mov     a,r5
0CD7 120000    3159            lcall   ___fsdiv
0CDA AA82      3160            mov     r2,dpl
0CDC AB83      3161            mov     r3,dph
0CDE ACF0      3162            mov     r4,b
0CE0 FD        3163            mov     r5,a
0CE1 E581      3164            mov     a,sp
0CE3 24FC      3165            add     a,#0xfc
0CE5 F581      3166            mov     sp,a
0CE7 C002      3167            push    ar2
0CE9 C003      3168            push    ar3
0CEB C004      3169            push    ar4
0CED C005      3170            push    ar5
0CEF 900000    3171            mov     dptr,#0x0000
0CF2 75F0C8    3172            mov     b,#0xC8
0CF5 7442      3173            mov     a,#0x42
0CF7 120000    3174            lcall   ___fsmul
0CFA AA82      3175            mov     r2,dpl
0CFC AB83      3176            mov     r3,dph
0CFE ACF0      3177            mov     r4,b
0D00 FD        3178            mov     r5,a
0D01 E581      3179            mov     a,sp
0D03 24FC      3180            add     a,#0xfc
0D05 F581      3181            mov     sp,a
0D07 8A82      3182            mov     dpl,r2
0D09 8B83      3183            mov     dph,r3
0D0B 8CF0      3184            mov     b,r4
0D0D ED        3185            mov     a,r5
0D0E 120000    3186            lcall   ___fs2sint
0D11 AA82      3187            mov     r2,dpl
0D13 AB83      3188            mov     r3,dph
0D15 905310    3189            mov     dptr,#_distance
0D18 EA        3190            mov     a,r2
0D19 F0        3191            movx    @dptr,a
0D1A A3        3192            inc     dptr
0D1B EB        3193            mov     a,r3
0D1C F0        3194            movx    @dptr,a
0D1D           3195   ;        main.c:706: return distance; 
0D1D 8A82      3196            mov     dpl,r2
0D1F 8B83      3197            mov     dph,r3
0D21 22        3198            ret
0D22           3199   ;------------------------------------------------------------
0D22           3200   ;Allocation info for local variables in function 'Set_Pin_Output'
0D22           3201   ;------------------------------------------------------------
0D22           3202   ;pin                       Allocated to registers r2 
0D22           3203   ;mask                      Allocated to registers r3 
0D22           3204   ;------------------------------------------------------------
0D22           3205   ;        main.c:709: void Set_Pin_Output (unsigned char pin)
0D22           3206   ;        -----------------------------------------
0D22           3207   ;         function Set_Pin_Output
0D22           3208   ;        -----------------------------------------
0D22           3209   _Set_Pin_Output:
0D22 AA82      3210            mov     r2,dpl
0D24           3211   ;        main.c:713: mask=(1<<(pin&0x7));
0D24 7407      3212            mov     a,#0x07
0D26 5A        3213            anl     a,r2
0D27 F5F0      3214            mov     b,a
0D29 05F0      3215            inc     b
0D2B 7401      3216            mov     a,#0x01
0D2D 8000      3217            sjmp    L024011?
0D2F           3218   L024009?:
0D2F 25E0      3219            add     a,acc
0D31           3220   L024011?:
0D31 D5F0B8    3221            djnz    b,L024009?
0D34 FB        3222            mov     r3,a
0D35           3223   ;        main.c:714: switch(pin/0x10)
0D35 EA        3224            mov     a,r2
0D36 C4        3225            swap    a
0D37 540F      3226            anl     a,#0x0f
0D39 FA        3227            mov  r2,a
0D3A 24FC      3228            add     a,#0xff - 0x03
0D3C 4000      3229            jc      L024006?
0D3E EA        3230            mov     a,r2
0D3F 2A        3231            add     a,r2
0D40 2A        3232            add     a,r2
0D41 90EB38    3233            mov     dptr,#L024013?
0D44 73        3234            jmp     @a+dptr
0D45           3235   L024013?:
0D45 020000    3236            ljmp    L024001?
0D48 020000    3237            ljmp    L024002?
0D4B 020000    3238            ljmp    L024003?
0D4E 020000    3239            ljmp    L024004?
0D51           3240   ;        main.c:716: case 0: P0MDOUT |= mask; break;
0D51           3241   L024001?:
0D51 EB        3242            mov     a,r3
0D52 42A4      3243            orl     _P0MDOUT,a
0D54           3244   ;        main.c:717: case 1: P1MDOUT |= mask; break;
0D54 22        3245            ret
0D55           3246   L024002?:
0D55 EB        3247            mov     a,r3
0D56 42A5      3248            orl     _P1MDOUT,a
0D58           3249   ;        main.c:718: case 2: P2MDOUT |= mask; break; 
0D58 22        3250            ret
0D59           3251   L024003?:
0D59 EB        3252            mov     a,r3
0D5A 42A6      3253            orl     _P2MDOUT,a
0D5C           3254   ;        main.c:719: case 3: P3MDOUT |= mask; break; 
0D5C 22        3255            ret
0D5D           3256   L024004?:
0D5D EB        3257            mov     a,r3
0D5E 429C      3258            orl     _P3MDOUT,a
0D60           3259   ;        main.c:720: }   
0D60           3260   L024006?:
0D60 22        3261            ret
0D61           3262   ;------------------------------------------------------------
0D61           3263   ;Allocation info for local variables in function 'Set_Pin_Input'
0D61           3264   ;------------------------------------------------------------
0D61           3265   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_164'
0D61           3266   ;pin                       Allocated to registers r2 
0D61           3267   ;------------------------------------------------------------
0D61           3268   ;        main.c:723: void Set_Pin_Input (unsigned char pin)
0D61           3269   ;        -----------------------------------------
0D61           3270   ;         function Set_Pin_Input
0D61           3271   ;        -----------------------------------------
0D61           3272   _Set_Pin_Input:
0D61 AA82      3273            mov     r2,dpl
0D63           3274   ;        main.c:727: mask=(1<<(pin&0x7));
0D63 7407      3275            mov     a,#0x07
0D65 5A        3276            anl     a,r2
0D66 F5F0      3277            mov     b,a
0D68 05F0      3278            inc     b
0D6A 7401      3279            mov     a,#0x01
0D6C 8000      3280            sjmp    L025011?
0D6E           3281   L025009?:
0D6E 25E0      3282            add     a,acc
0D70           3283   L025011?:
0D70 D5F0B8    3284            djnz    b,L025009?
0D73           3285   ;        main.c:728: mask=~mask;
0D73 F4        3286            cpl     a
0D74 FB        3287            mov     r3,a
0D75           3288   ;        main.c:729: switch(pin/0x10)
0D75 EA        3289            mov     a,r2
0D76 C4        3290            swap    a
0D77 540F      3291            anl     a,#0x0f
0D79 FA        3292            mov  r2,a
0D7A 24FC      3293            add     a,#0xff - 0x03
0D7C 4000      3294            jc      L025006?
0D7E EA        3295            mov     a,r2
0D7F 2A        3296            add     a,r2
0D80 2A        3297            add     a,r2
0D81 90ED38    3298            mov     dptr,#L025013?
0D84 73        3299            jmp     @a+dptr
0D85           3300   L025013?:
0D85 020000    3301            ljmp    L025001?
0D88 020000    3302            ljmp    L025002?
0D8B 020000    3303            ljmp    L025003?
0D8E 020000    3304            ljmp    L025004?
0D91           3305   ;        main.c:731: case 0: P0MDOUT &= mask; break;
0D91           3306   L025001?:
0D91 EB        3307            mov     a,r3
0D92 52A4      3308            anl     _P0MDOUT,a
0D94           3309   ;        main.c:732: case 1: P1MDOUT &= mask; break;
0D94 22        3310            ret
0D95           3311   L025002?:
0D95 EB        3312            mov     a,r3
0D96 52A5      3313            anl     _P1MDOUT,a
0D98           3314   ;        main.c:733: case 2: P2MDOUT &= mask; break; 
0D98 22        3315            ret
0D99           3316   L025003?:
0D99 EB        3317            mov     a,r3
0D9A 52A6      3318            anl     _P2MDOUT,a
0D9C           3319   ;        main.c:734: case 3: P3MDOUT &= mask; break; 
0D9C 22        3320            ret
0D9D           3321   L025004?:
0D9D EB        3322            mov     a,r3
0D9E 529C      3323            anl     _P3MDOUT,a
0DA0           3324   ;        main.c:735: }   
0DA0           3325   L025006?:
0DA0 22        3326            ret
0DA1           3327   ;------------------------------------------------------------
0DA1           3328   ;Allocation info for local variables in function 'InitADC'
0DA1           3329   ;------------------------------------------------------------
0DA1           3330   ;------------------------------------------------------------
0DA1           3331   ;        main.c:738: void InitADC (void)
0DA1           3332   ;        -----------------------------------------
0DA1           3333   ;         function InitADC
0DA1           3334   ;        -----------------------------------------
0DA1           3335   _InitADC:
0DA1           3336   ;        main.c:740: SFRPAGE = 0x00;
0DA1 75A700    3337            mov     _SFRPAGE,#0x00
0DA4           3338   ;        main.c:741: ADEN=0; // Disable ADC
0DA4 C2EF      3339            clr     _ADEN
0DA6           3340   ;        main.c:746: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0DA6 75B280    3341            mov     _ADC0CN1,#0x80
0DA9           3342   ;        main.c:750: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0DA9 75BC20    3343            mov     _ADC0CF0,#0x20
0DAC           3344   ;        main.c:754: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
0DAC 75B91E    3345            mov     _ADC0CF1,#0x1E
0DAF           3346   ;        main.c:763: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0DAF 75E800    3347            mov     _ADC0CN0,#0x00
0DB2           3348   ;        main.c:768: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0DB2 75DF3F    3349            mov     _ADC0CF2,#0x3F
0DB5           3350   ;        main.c:772: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0DB5 75B300    3351            mov     _ADC0CN2,#0x00
0DB8           3352   ;        main.c:774: ADEN=1; // Enable ADC
0DB8 D2EF      3353            setb    _ADEN
0DBA 22        3354            ret
0DBB           3355   ;------------------------------------------------------------
0DBB           3356   ;Allocation info for local variables in function 'InitPinADC'
0DBB           3357   ;------------------------------------------------------------
0DBB           3358   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
0DBB           3359   ;portno                    Allocated to registers r2 
0DBB           3360   ;mask                      Allocated to registers r3 
0DBB           3361   ;------------------------------------------------------------
0DBB           3362   ;        main.c:777: void InitPinADC (unsigned char portno, unsigned char pin_num)
0DBB           3363   ;        -----------------------------------------
0DBB           3364   ;         function InitPinADC
0DBB           3365   ;        -----------------------------------------
0DBB           3366   _InitPinADC:
0DBB AA82      3367            mov     r2,dpl
0DBD           3368   ;        main.c:781: mask=1<<pin_num;
0DBD 85E0F0    3369            mov     b,_InitPinADC_PARM_2
0DC0 05F0      3370            inc     b
0DC2 7401      3371            mov     a,#0x01
0DC4 8000      3372            sjmp    L027013?
0DC6           3373   L027011?:
0DC6 25E0      3374            add     a,acc
0DC8           3375   L027013?:
0DC8 D5F0B8    3376            djnz    b,L027011?
0DCB FB        3377            mov     r3,a
0DCC           3378   ;        main.c:783: SFRPAGE = 0x20;
0DCC 75A720    3379            mov     _SFRPAGE,#0x20
0DCF           3380   ;        main.c:784: switch (portno)
0DCF BA00F8    3381            cjne    r2,#0x00,L027014?
0DD2 8000      3382            sjmp    L027001?
0DD4           3383   L027014?:
0DD4 BA0178    3384            cjne    r2,#0x01,L027015?
0DD7 8000      3385            sjmp    L027002?
0DD9           3386   L027015?:
0DD9           3387   ;        main.c:786: case 0:
0DD9 BA0260    3388            cjne    r2,#0x02,L027005?
0DDC 8000      3389            sjmp    L027003?
0DDE           3390   L027001?:
0DDE           3391   ;        main.c:787: P0MDIN &= (~mask); // Set pin as analog input
0DDE EB        3392            mov     a,r3
0DDF F4        3393            cpl     a
0DE0 FA        3394            mov     r2,a
0DE1 52F1      3395            anl     _P0MDIN,a
0DE3           3396   ;        main.c:788: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0DE3 EB        3397            mov     a,r3
0DE4 42D4      3398            orl     _P0SKIP,a
0DE6           3399   ;        main.c:789: break;
0DE6           3400   ;        main.c:790: case 1:
0DE6 8000      3401            sjmp    L027005?
0DE8           3402   L027002?:
0DE8           3403   ;        main.c:791: P1MDIN &= (~mask); // Set pin as analog input
0DE8 EB        3404            mov     a,r3
0DE9 F4        3405            cpl     a
0DEA FA        3406            mov     r2,a
0DEB 52F2      3407            anl     _P1MDIN,a
0DED           3408   ;        main.c:792: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0DED EB        3409            mov     a,r3
0DEE 42D5      3410            orl     _P1SKIP,a
0DF0           3411   ;        main.c:793: break;
0DF0           3412   ;        main.c:794: case 2:
0DF0 8000      3413            sjmp    L027005?
0DF2           3414   L027003?:
0DF2           3415   ;        main.c:795: P2MDIN &= (~mask); // Set pin as analog input
0DF2 EB        3416            mov     a,r3
0DF3 F4        3417            cpl     a
0DF4 FA        3418            mov     r2,a
0DF5 52F3      3419            anl     _P2MDIN,a
0DF7           3420   ;        main.c:796: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0DF7 EB        3421            mov     a,r3
0DF8 42CC      3422            orl     _P2SKIP,a
0DFA           3423   ;        main.c:800: }
0DFA           3424   L027005?:
0DFA           3425   ;        main.c:801: SFRPAGE = 0x00;
0DFA 75A700    3426            mov     _SFRPAGE,#0x00
0DFD 22        3427            ret
0DFE           3428   ;------------------------------------------------------------
0DFE           3429   ;Allocation info for local variables in function 'ADC_at_Pin'
0DFE           3430   ;------------------------------------------------------------
0DFE           3431   ;pin                       Allocated to registers 
0DFE           3432   ;------------------------------------------------------------
0DFE           3433   ;        main.c:804: unsigned int ADC_at_Pin(unsigned char pin)
0DFE           3434   ;        -----------------------------------------
0DFE           3435   ;         function ADC_at_Pin
0DFE           3436   ;        -----------------------------------------
0DFE           3437   _ADC_at_Pin:
0DFE 8582BB    3438            mov     _ADC0MX,dpl
0E01           3439   ;        main.c:807: ADINT = 0;
0E01 C2ED      3440            clr     _ADINT
0E03           3441   ;        main.c:808: ADBUSY = 1;     // Convert voltage at the pin
0E03 D2EC      3442            setb    _ADBUSY
0E05           3443   ;        main.c:809: while (!ADINT); // Wait for conversion to complete
0E05           3444   L028001?:
0E05 30EDE0    3445            jnb     _ADINT,L028001?
0E08           3446   ;        main.c:810: return (ADC0);
0E08 85BD82    3447            mov     dpl,_ADC0
0E0B 85BE83    3448            mov     dph,(_ADC0 >> 8)
0E0E 22        3449            ret
0E0F           3450   ;------------------------------------------------------------
0E0F           3451   ;Allocation info for local variables in function 'ReadHX711'
0E0F           3452   ;------------------------------------------------------------
0E0F           3453   ;dataa                     Allocated with name '_ReadHX711_dataa_1_174'
0E0F           3454   ;ans                       Allocated with name '_ReadHX711_ans_1_174'
0E0F           3455   ;j                         Allocated with name '_ReadHX711_j_1_174'
0E0F           3456   ;------------------------------------------------------------
0E0F           3457   ;        main.c:813: int ReadHX711(void) {
0E0F           3458   ;        -----------------------------------------
0E0F           3459   ;         function ReadHX711
0E0F           3460   ;        -----------------------------------------
0E0F           3461   _ReadHX711:
0E0F           3462   ;        main.c:814: xdata unsigned long dataa = 0;
0E0F 90CF78    3463            mov     dptr,#_ReadHX711_dataa_1_174
0E12 E4        3464            clr     a
0E13 F0        3465            movx    @dptr,a
0E14 A3        3466            inc     dptr
0E15 F0        3467            movx    @dptr,a
0E16 A3        3468            inc     dptr
0E17 F0        3469            movx    @dptr,a
0E18 A3        3470            inc     dptr
0E19 F0        3471            movx    @dptr,a
0E1A           3472   ;        main.c:819: PD_SCK = 0;
0E1A C2A5      3473            clr     _P2_5
0E1C           3474   ;        main.c:821: for (i = 0; i < 24; i++) {
0E1C 905250    3475            mov     dptr,#_i
0E1F E4        3476            clr     a
0E20 F0        3477            movx    @dptr,a
0E21 A3        3478            inc     dptr
0E22 F0        3479            movx    @dptr,a
0E23           3480   L029011?:
0E23 905250    3481            mov     dptr,#_i
0E26 E0        3482            movx    a,@dptr
0E27 FA        3483            mov     r2,a
0E28 A3        3484            inc     dptr
0E29 E0        3485            movx    a,@dptr
0E2A FB        3486            mov     r3,a
0E2B C3        3487            clr     c
0E2C EA        3488            mov     a,r2
0E2D 9418      3489            subb    a,#0x18
0E2F EB        3490            mov     a,r3
0E30 9400      3491            subb    a,#0x00
0E32 4000      3492            jc      L029036?
0E34 020000    3493            ljmp    L029014?
0E37           3494   L029036?:
0E37           3495   ;        main.c:822: PD_SCK = 1;
0E37 D2A5      3496            setb    _P2_5
0E39           3497   ;        main.c:823: for (j = 0; j < 4; j++);
0E39 90CFC8    3498            mov     dptr,#_ReadHX711_j_1_174
0E3C E4        3499            clr     a
0E3D F0        3500            movx    @dptr,a
0E3E           3501   L029003?:
0E3E 90CFC8    3502            mov     dptr,#_ReadHX711_j_1_174
0E41 E0        3503            movx    a,@dptr
0E42 FA        3504            mov     r2,a
0E43 C3        3505            clr     c
0E44 6480      3506            xrl     a,#0x80
0E46 9484      3507            subb    a,#0x84
0E48 5000      3508            jnc     L029006?
0E4A 90CFC8    3509            mov     dptr,#_ReadHX711_j_1_174
0E4D E0        3510            movx    a,@dptr
0E4E 2401      3511            add     a,#0x01
0E50 F0        3512            movx    @dptr,a
0E51 8000      3513            sjmp    L029003?
0E53           3514   L029006?:
0E53           3515   ;        main.c:824: dataa = dataa << 1;
0E53 90CF78    3516            mov     dptr,#_ReadHX711_dataa_1_174
0E56 E0        3517            movx    a,@dptr
0E57 FA        3518            mov     r2,a
0E58 A3        3519            inc     dptr
0E59 E0        3520            movx    a,@dptr
0E5A FB        3521            mov     r3,a
0E5B A3        3522            inc     dptr
0E5C E0        3523            movx    a,@dptr
0E5D FC        3524            mov     r4,a
0E5E A3        3525            inc     dptr
0E5F E0        3526            movx    a,@dptr
0E60 FD        3527            mov     r5,a
0E61 EA        3528            mov     a,r2
0E62 2A        3529            add     a,r2
0E63 FA        3530            mov     r2,a
0E64 EB        3531            mov     a,r3
0E65 33        3532            rlc     a
0E66 FB        3533            mov     r3,a
0E67 EC        3534            mov     a,r4
0E68 33        3535            rlc     a
0E69 FC        3536            mov     r4,a
0E6A ED        3537            mov     a,r5
0E6B 33        3538            rlc     a
0E6C FD        3539            mov     r5,a
0E6D 90CF78    3540            mov     dptr,#_ReadHX711_dataa_1_174
0E70 EA        3541            mov     a,r2
0E71 F0        3542            movx    @dptr,a
0E72 A3        3543            inc     dptr
0E73 EB        3544            mov     a,r3
0E74 F0        3545            movx    @dptr,a
0E75 A3        3546            inc     dptr
0E76 EC        3547            mov     a,r4
0E77 F0        3548            movx    @dptr,a
0E78 A3        3549            inc     dptr
0E79 ED        3550            mov     a,r5
0E7A F0        3551            movx    @dptr,a
0E7B           3552   ;        main.c:825: if (DOUT) {
0E7B 30A660    3553            jnb     _P2_6,L029002?
0E7E           3554   ;        main.c:826: dataa |= 0x01;
0E7E 90CF78    3555            mov     dptr,#_ReadHX711_dataa_1_174
0E81 E0        3556            movx    a,@dptr
0E82 FA        3557            mov     r2,a
0E83 A3        3558            inc     dptr
0E84 E0        3559            movx    a,@dptr
0E85 FB        3560            mov     r3,a
0E86 A3        3561            inc     dptr
0E87 E0        3562            movx    a,@dptr
0E88 FC        3563            mov     r4,a
0E89 A3        3564            inc     dptr
0E8A E0        3565            movx    a,@dptr
0E8B FD        3566            mov     r5,a
0E8C 90CF78    3567            mov     dptr,#_ReadHX711_dataa_1_174
0E8F 7401      3568            mov     a,#0x01
0E91 4A        3569            orl     a,r2
0E92 F0        3570            movx    @dptr,a
0E93 A3        3571            inc     dptr
0E94 EB        3572            mov     a,r3
0E95 F0        3573            movx    @dptr,a
0E96 A3        3574            inc     dptr
0E97 EC        3575            mov     a,r4
0E98 F0        3576            movx    @dptr,a
0E99 A3        3577            inc     dptr
0E9A ED        3578            mov     a,r5
0E9B F0        3579            movx    @dptr,a
0E9C           3580   L029002?:
0E9C           3581   ;        main.c:828: PD_SCK = 0;
0E9C C2A5      3582            clr     _P2_5
0E9E           3583   ;        main.c:829: for (j = 0; j < 4; j++);
0E9E 90CFC8    3584            mov     dptr,#_ReadHX711_j_1_174
0EA1 E4        3585            clr     a
0EA2 F0        3586            movx    @dptr,a
0EA3           3587   L029007?:
0EA3 90CFC8    3588            mov     dptr,#_ReadHX711_j_1_174
0EA6 E0        3589            movx    a,@dptr
0EA7 FA        3590            mov     r2,a
0EA8 C3        3591            clr     c
0EA9 6480      3592            xrl     a,#0x80
0EAB 9484      3593            subb    a,#0x84
0EAD 5000      3594            jnc     L029013?
0EAF 90CFC8    3595            mov     dptr,#_ReadHX711_j_1_174
0EB2 E0        3596            movx    a,@dptr
0EB3 2401      3597            add     a,#0x01
0EB5 F0        3598            movx    @dptr,a
0EB6 8000      3599            sjmp    L029007?
0EB8           3600   L029013?:
0EB8           3601   ;        main.c:821: for (i = 0; i < 24; i++) {
0EB8 905250    3602            mov     dptr,#_i
0EBB E0        3603            movx    a,@dptr
0EBC 2401      3604            add     a,#0x01
0EBE F0        3605            movx    @dptr,a
0EBF A3        3606            inc     dptr
0EC0 E0        3607            movx    a,@dptr
0EC1 3400      3608            addc    a,#0x00
0EC3 F0        3609            movx    @dptr,a
0EC4 020000    3610            ljmp    L029011?
0EC7           3611   L029014?:
0EC7           3612   ;        main.c:832: PD_SCK = 1;
0EC7 D2A5      3613            setb    _P2_5
0EC9           3614   ;        main.c:833: for (j = 0; j < 4; j++);
0EC9 90CFC8    3615            mov     dptr,#_ReadHX711_j_1_174
0ECC E4        3616            clr     a
0ECD F0        3617            movx    @dptr,a
0ECE           3618   L029015?:
0ECE 90CFC8    3619            mov     dptr,#_ReadHX711_j_1_174
0ED1 E0        3620            movx    a,@dptr
0ED2 FA        3621            mov     r2,a
0ED3 C3        3622            clr     c
0ED4 6480      3623            xrl     a,#0x80
0ED6 9484      3624            subb    a,#0x84
0ED8 5000      3625            jnc     L029018?
0EDA 90CFC8    3626            mov     dptr,#_ReadHX711_j_1_174
0EDD E0        3627            movx    a,@dptr
0EDE 2401      3628            add     a,#0x01
0EE0 F0        3629            movx    @dptr,a
0EE1 8000      3630            sjmp    L029015?
0EE3           3631   L029018?:
0EE3           3632   ;        main.c:834: PD_SCK = 0;
0EE3 C2A5      3633            clr     _P2_5
0EE5           3634   ;        main.c:835: for (j = 0; j < 4; j++);
0EE5 90CFC8    3635            mov     dptr,#_ReadHX711_j_1_174
0EE8 E4        3636            clr     a
0EE9 F0        3637            movx    @dptr,a
0EEA           3638   L029019?:
0EEA 90CFC8    3639            mov     dptr,#_ReadHX711_j_1_174
0EED E0        3640            movx    a,@dptr
0EEE FA        3641            mov     r2,a
0EEF C3        3642            clr     c
0EF0 6480      3643            xrl     a,#0x80
0EF2 9484      3644            subb    a,#0x84
0EF4 5000      3645            jnc     L029022?
0EF6 90CFC8    3646            mov     dptr,#_ReadHX711_j_1_174
0EF9 E0        3647            movx    a,@dptr
0EFA 2401      3648            add     a,#0x01
0EFC F0        3649            movx    @dptr,a
0EFD 8000      3650            sjmp    L029019?
0EFF           3651   L029022?:
0EFF           3652   ;        main.c:836: ans = (dataa % 1000000)/10;
0EFF 90CF78    3653            mov     dptr,#_ReadHX711_dataa_1_174
0F02 E0        3654            movx    a,@dptr
0F03 FA        3655            mov     r2,a
0F04 A3        3656            inc     dptr
0F05 E0        3657            movx    a,@dptr
0F06 FB        3658            mov     r3,a
0F07 A3        3659            inc     dptr
0F08 E0        3660            movx    a,@dptr
0F09 FC        3661            mov     r4,a
0F0A A3        3662            inc     dptr
0F0B E0        3663            movx    a,@dptr
0F0C FD        3664            mov     r5,a
0F0D 750040    3665            mov     __modulong_PARM_2,#0x40
0F10 750142    3666            mov     (__modulong_PARM_2 + 1),#0x42
0F13 75020F    3667            mov     (__modulong_PARM_2 + 2),#0x0F
0F16 750300    3668            mov     (__modulong_PARM_2 + 3),#0x00
0F19 8A82      3669            mov     dpl,r2
0F1B 8B83      3670            mov     dph,r3
0F1D 8CF0      3671            mov     b,r4
0F1F ED        3672            mov     a,r5
0F20 120000    3673            lcall   __modulong
0F23 AA82      3674            mov     r2,dpl
0F25 AB83      3675            mov     r3,dph
0F27 ACF0      3676            mov     r4,b
0F29 FD        3677            mov     r5,a
0F2A 75000A    3678            mov     __divulong_PARM_2,#0x0A
0F2D E4        3679            clr     a
0F2E F501      3680            mov     (__divulong_PARM_2 + 1),a
0F30 F502      3681            mov     (__divulong_PARM_2 + 2),a
0F32 F503      3682            mov     (__divulong_PARM_2 + 3),a
0F34 8A82      3683            mov     dpl,r2
0F36 8B83      3684            mov     dph,r3
0F38 8CF0      3685            mov     b,r4
0F3A ED        3686            mov     a,r5
0F3B           3687   ;        main.c:837: return ans;
0F3B 020000    3688            ljmp    __divulong
0F3E           3689   ;------------------------------------------------------------
0F3E           3690   ;Allocation info for local variables in function 'Timer5_ISR'
0F3E           3691   ;------------------------------------------------------------
0F3E           3692   ;------------------------------------------------------------
0F3E           3693   ;        main.c:840: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0F3E           3694   ;        -----------------------------------------
0F3E           3695   ;         function Timer5_ISR
0F3E           3696   ;        -----------------------------------------
0F3E           3697   _Timer5_ISR:
0F3E C0A8      3698            push    bits
0F40 C0E0      3699            push    acc
0F42 C0F0      3700            push    b
0F44 C082      3701            push    dpl
0F46 C083      3702            push    dph
0F48 C002      3703            push    (0+2)
0F4A C003      3704            push    (0+3)
0F4C C004      3705            push    (0+4)
0F4E C005      3706            push    (0+5)
0F50 C006      3707            push    (0+6)
0F52 C007      3708            push    (0+7)
0F54 C000      3709            push    (0+0)
0F56 C001      3710            push    (0+1)
0F58 C0D0      3711            push    psw
0F5A 75D000    3712            mov     psw,#0x00
0F5D           3713   ;        main.c:842: SFRPAGE=0x10;
0F5D 75A710    3714            mov     _SFRPAGE,#0x10
0F60           3715   ;        main.c:843: TF5H = 0; // Clear Timer5 interrupt flag
0F60 C2C7      3716            clr     _TF5H
0F62           3717   ;        main.c:844: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0F62 75D2C4    3718            mov     _TMR5RL,#0xC4
0F65 75D3FF    3719            mov     (_TMR5RL >> 8),#0xFF
0F68           3720   ;        main.c:846: fre_mea_count++;
0F68 904F10    3721            mov     dptr,#_fre_mea_count
0F6B E0        3722            movx    a,@dptr
0F6C 2401      3723            add     a,#0x01
0F6E F0        3724            movx    @dptr,a
0F6F A3        3725            inc     dptr
0F70 E0        3726            movx    a,@dptr
0F71 3400      3727            addc    a,#0x00
0F73 F0        3728            movx    @dptr,a
0F74           3729   ;        main.c:847: if(fre_mea_count == 1000){
0F74 904F10    3730            mov     dptr,#_fre_mea_count
0F77 E0        3731            movx    a,@dptr
0F78 FA        3732            mov     r2,a
0F79 A3        3733            inc     dptr
0F7A E0        3734            movx    a,@dptr
0F7B FB        3735            mov     r3,a
0F7C BAE8F0    3736            cjne    r2,#0xE8,L030004?
0F7F BB03F0    3737            cjne    r3,#0x03,L030004?
0F82           3738   ;        main.c:848: fre_mea_count = 0;
0F82 904F10    3739            mov     dptr,#_fre_mea_count
0F85 E4        3740            clr     a
0F86 F0        3741            movx    @dptr,a
0F87 A3        3742            inc     dptr
0F88 F0        3743            movx    @dptr,a
0F89           3744   ;        main.c:849: if(mea_yes){
0F89 904D00    3745            mov     dptr,#_mea_yes
0F8C E0        3746            movx    a,@dptr
0F8D FA        3747            mov     r2,a
0F8E 6000      3748            jz      L030004?
0F90           3749   ;        main.c:850: freq100 = get_freq();
0F90 120000    3750            lcall   _get_freq
0F93 AA82      3751            mov     r2,dpl
0F95 AB83      3752            mov     r3,dph
0F97 905690    3753            mov     dptr,#_freq100
0F9A EA        3754            mov     a,r2
0F9B F0        3755            movx    @dptr,a
0F9C A3        3756            inc     dptr
0F9D EB        3757            mov     a,r3
0F9E F0        3758            movx    @dptr,a
0F9F EB        3759            mov     a,r3
0FA0 33        3760            rlc     a
0FA1 95E0      3761            subb    a,acc
0FA3 A3        3762            inc     dptr
0FA4 F0        3763            movx    @dptr,a
0FA5 A3        3764            inc     dptr
0FA6 F0        3765            movx    @dptr,a
0FA7           3766   L030004?:
0FA7           3767   ;        main.c:854: weight_mea_count++;
0FA7 904ED0    3768            mov     dptr,#_weight_mea_count
0FAA E0        3769            movx    a,@dptr
0FAB 2401      3770            add     a,#0x01
0FAD F0        3771            movx    @dptr,a
0FAE A3        3772            inc     dptr
0FAF E0        3773            movx    a,@dptr
0FB0 3400      3774            addc    a,#0x00
0FB2 F0        3775            movx    @dptr,a
0FB3           3776   ;        main.c:855: if(weight_mea_count == 20000){
0FB3 904ED0    3777            mov     dptr,#_weight_mea_count
0FB6 E0        3778            movx    a,@dptr
0FB7 FA        3779            mov     r2,a
0FB8 A3        3780            inc     dptr
0FB9 E0        3781            movx    a,@dptr
0FBA FB        3782            mov     r3,a
0FBB BA2070    3783            cjne    r2,#0x20,L030010?
0FBE BB4E70    3784            cjne    r3,#0x4E,L030010?
0FC1           3785   ;        main.c:856: weight_mea_count = 0;
0FC1 904ED0    3786            mov     dptr,#_weight_mea_count
0FC4 E4        3787            clr     a
0FC5 F0        3788            movx    @dptr,a
0FC6 A3        3789            inc     dptr
0FC7 F0        3790            movx    @dptr,a
0FC8           3791   ;        main.c:857: if(mea_yes) distance = measure_distance();
0FC8 904D00    3792            mov     dptr,#_mea_yes
0FCB E0        3793            movx    a,@dptr
0FCC FA        3794            mov     r2,a
0FCD 6000      3795            jz      L030006?
0FCF 120000    3796            lcall   _measure_distance
0FD2 E582      3797            mov     a,dpl
0FD4 8583F0    3798            mov     b,dph
0FD7 905310    3799            mov     dptr,#_distance
0FDA F0        3800            movx    @dptr,a
0FDB A3        3801            inc     dptr
0FDC E5F0      3802            mov     a,b
0FDE F0        3803            movx    @dptr,a
0FDF           3804   L030006?:
0FDF           3805   ;        main.c:858: if(mea_yes) weight = ReadHX711();
0FDF 904D00    3806            mov     dptr,#_mea_yes
0FE2 E0        3807            movx    a,@dptr
0FE3 FA        3808            mov     r2,a
0FE4 6000      3809            jz      L030010?
0FE6 120000    3810            lcall   _ReadHX711
0FE9 E582      3811            mov     a,dpl
0FEB 8583F0    3812            mov     b,dph
0FEE 904CC0    3813            mov     dptr,#_weight
0FF1 F0        3814            movx    @dptr,a
0FF2 A3        3815            inc     dptr
0FF3 E5F0      3816            mov     a,b
0FF5 F0        3817            movx    @dptr,a
0FF6           3818   L030010?:
0FF6           3819   ;        main.c:861: pwm_counter++; 
0FF6 905210    3820            mov     dptr,#_pwm_counter
0FF9 E0        3821            movx    a,@dptr
0FFA 2401      3822            add     a,#0x01
0FFC F0        3823            movx    @dptr,a
0FFD A3        3824            inc     dptr
0FFE E0        3825            movx    a,@dptr
0FFF 3400      3826            addc    a,#0x00
1001 F0        3827            movx    @dptr,a
1002           3828   ;        main.c:862: if (pwm_counter == 100){
1002 905210    3829            mov     dptr,#_pwm_counter
1005 E0        3830            movx    a,@dptr
1006 FA        3831            mov     r2,a
1007 A3        3832            inc     dptr
1008 E0        3833            movx    a,@dptr
1009 FB        3834            mov     r3,a
100A BA64F0    3835            cjne    r2,#0x64,L030012?
100D BB00F0    3836            cjne    r3,#0x00,L030012?
1010           3837   ;        main.c:863: pwm_counter = 0; 
1010 905210    3838            mov     dptr,#_pwm_counter
1013 E4        3839            clr     a
1014 F0        3840            movx    @dptr,a
1015 A3        3841            inc     dptr
1016 F0        3842            movx    @dptr,a
1017           3843   L030012?:
1017           3844   ;        main.c:866: if (pwm_right > pwm_counter){
1017 905150    3845            mov     dptr,#_pwm_right
101A E0        3846            movx    a,@dptr
101B FA        3847            mov     r2,a
101C 905210    3848            mov     dptr,#_pwm_counter
101F E0        3849            movx    a,@dptr
1020 FB        3850            mov     r3,a
1021 A3        3851            inc     dptr
1022 E0        3852            movx    a,@dptr
1023 FC        3853            mov     r4,a
1024 7D00      3854            mov     r5,#0x00
1026 C3        3855            clr     c
1027 EB        3856            mov     a,r3
1028 9A        3857            subb    a,r2
1029 EC        3858            mov     a,r4
102A 9D        3859            subb    a,r5
102B 5000      3860            jnc     L030017?
102D           3861   ;        main.c:867: if(L_motor_dir){
102D 905110    3862            mov     dptr,#_L_motor_dir
1030 E0        3863            movx    a,@dptr
1031 FA        3864            mov     r2,a
1032 6000      3865            jz      L030014?
1034           3866   ;        main.c:868: L_bridge_1 = 1; 
1034 D2A1      3867            setb    _P2_1
1036           3868   ;        main.c:869: L_bridge_2 = 0; 
1036 C2A2      3869            clr     _P2_2
1038 8000      3870            sjmp    L030018?
103A           3871   L030014?:
103A           3872   ;        main.c:872: L_bridge_1 = 0; 
103A C2A1      3873            clr     _P2_1
103C           3874   ;        main.c:873: L_bridge_2 = 1; 
103C D2A2      3875            setb    _P2_2
103E 8000      3876            sjmp    L030018?
1040           3877   L030017?:
1040           3878   ;        main.c:877: L_bridge_1 = 0; 
1040 C2A1      3879            clr     _P2_1
1042           3880   ;        main.c:878: L_bridge_2 = 0; 
1042 C2A2      3881            clr     _P2_2
1044           3882   L030018?:
1044           3883   ;        main.c:880: if (pwm_left > pwm_counter){
1044 905190    3884            mov     dptr,#_pwm_left
1047 E0        3885            movx    a,@dptr
1048 FA        3886            mov     r2,a
1049 7D00      3887            mov     r5,#0x00
104B C3        3888            clr     c
104C EB        3889            mov     a,r3
104D 9A        3890            subb    a,r2
104E EC        3891            mov     a,r4
104F 9D        3892            subb    a,r5
1050 5000      3893            jnc     L030023?
1052           3894   ;        main.c:881: if (R_motor_dir){
1052 9050D0    3895            mov     dptr,#_R_motor_dir
1055 E0        3896            movx    a,@dptr
1056 FA        3897            mov     r2,a
1057 6000      3898            jz      L030020?
1059           3899   ;        main.c:882: R_bridge_1 = 1; 
1059 D2A4      3900            setb    _P2_4
105B           3901   ;        main.c:883: R_bridge_2 = 0;
105B C2A3      3902            clr     _P2_3
105D 8000      3903            sjmp    L030024?
105F           3904   L030020?:
105F           3905   ;        main.c:886: R_bridge_1 = 0; 
105F C2A4      3906            clr     _P2_4
1061           3907   ;        main.c:887: R_bridge_2 = 1;
1061 D2A3      3908            setb    _P2_3
1063 8000      3909            sjmp    L030024?
1065           3910   L030023?:
1065           3911   ;        main.c:891: R_bridge_1 = 0; 
1065 C2A4      3912            clr     _P2_4
1067           3913   ;        main.c:892: R_bridge_2 = 0; 
1067 C2A3      3914            clr     _P2_3
1069           3915   L030024?:
1069           3916   ;        main.c:895: servo_counter++;
1069 9051D0    3917            mov     dptr,#_servo_counter
106C E0        3918            movx    a,@dptr
106D 2401      3919            add     a,#0x01
106F F0        3920            movx    @dptr,a
1070 A3        3921            inc     dptr
1071 E0        3922            movx    a,@dptr
1072 3400      3923            addc    a,#0x00
1074 F0        3924            movx    @dptr,a
1075           3925   ;        main.c:896: if(servo_counter==2000)
1075 9051D0    3926            mov     dptr,#_servo_counter
1078 E0        3927            movx    a,@dptr
1079 FA        3928            mov     r2,a
107A A3        3929            inc     dptr
107B E0        3930            movx    a,@dptr
107C FB        3931            mov     r3,a
107D BAD0B0    3932            cjne    r2,#0xD0,L030026?
1080 BB07B0    3933            cjne    r3,#0x07,L030026?
1083           3934   ;        main.c:898: servo_counter=0;
1083 9051D0    3935            mov     dptr,#_servo_counter
1086 E4        3936            clr     a
1087 F0        3937            movx    @dptr,a
1088 A3        3938            inc     dptr
1089 F0        3939            movx    @dptr,a
108A           3940   ;        main.c:899: Servo_arm=1;
108A D296      3941            setb    _P1_6
108C           3942   ;        main.c:900: Servo_base=1;
108C D297      3943            setb    _P1_7
108E           3944   L030026?:
108E           3945   ;        main.c:902: if(servo_arm>=servo_counter)
108E 905050    3946            mov     dptr,#_servo_arm
1091 E0        3947            movx    a,@dptr
1092 FA        3948            mov     r2,a
1093 9051D0    3949            mov     dptr,#_servo_counter
1096 E0        3950            movx    a,@dptr
1097 FB        3951            mov     r3,a
1098 A3        3952            inc     dptr
1099 E0        3953            movx    a,@dptr
109A FC        3954            mov     r4,a
109B 7D00      3955            mov     r5,#0x00
109D C3        3956            clr     c
109E EA        3957            mov     a,r2
109F 9B        3958            subb    a,r3
10A0 ED        3959            mov     a,r5
10A1 9C        3960            subb    a,r4
10A2 4000      3961            jc      L030028?
10A4           3962   ;        main.c:904: Servo_arm = 1;
10A4 D296      3963            setb    _P1_6
10A6 8000      3964            sjmp    L030029?
10A8           3965   L030028?:
10A8           3966   ;        main.c:908: Servo_arm = 0; 
10A8 C296      3967            clr     _P1_6
10AA           3968   L030029?:
10AA           3969   ;        main.c:910: if(servo_base>=servo_counter)
10AA 905090    3970            mov     dptr,#_servo_base
10AD E0        3971            movx    a,@dptr
10AE FA        3972            mov     r2,a
10AF 7D00      3973            mov     r5,#0x00
10B1 C3        3974            clr     c
10B2 EA        3975            mov     a,r2
10B3 9B        3976            subb    a,r3
10B4 ED        3977            mov     a,r5
10B5 9C        3978            subb    a,r4
10B6 4000      3979            jc      L030031?
10B8           3980   ;        main.c:912: Servo_base = 1;
10B8 D297      3981            setb    _P1_7
10BA 8000      3982            sjmp    L030033?
10BC           3983   L030031?:
10BC           3984   ;        main.c:916: Servo_base = 0; 
10BC C297      3985            clr     _P1_7
10BE           3986   L030033?:
10BE D0D0      3987            pop     psw
10C0 D001      3988            pop     (0+1)
10C2 D000      3989            pop     (0+0)
10C4 D007      3990            pop     (0+7)
10C6 D006      3991            pop     (0+6)
10C8 D005      3992            pop     (0+5)
10CA D004      3993            pop     (0+4)
10CC D003      3994            pop     (0+3)
10CE D002      3995            pop     (0+2)
10D0 D083      3996            pop     dph
10D2 D082      3997            pop     dpl
10D4 D0F0      3998            pop     b
10D6 D0E0      3999            pop     acc
10D8 D0A8      4000            pop     bits
10DA 32        4001            reti
10DB           4002   ;------------------------------------------------------------
10DB           4003   ;Allocation info for local variables in function 'servo_pick'
10DB           4004   ;------------------------------------------------------------
10DB           4005   ;------------------------------------------------------------
10DB           4006   ;        main.c:920: void servo_pick(){
10DB           4007   ;        -----------------------------------------
10DB           4008   ;         function servo_pick
10DB           4009   ;        -----------------------------------------
10DB           4010   _servo_pick:
10DB           4011   ;        main.c:921: servo_arm = 50;
10DB 905050    4012            mov     dptr,#_servo_arm
10DE 7432      4013            mov     a,#0x32
10E0 F0        4014            movx    @dptr,a
10E1           4015   ;        main.c:922: servo_base = 50;
10E1 905090    4016            mov     dptr,#_servo_base
10E4 7432      4017            mov     a,#0x32
10E6 F0        4018            movx    @dptr,a
10E7           4019   ;        main.c:923: waitms(500);
10E7 9001F4    4020            mov     dptr,#0x01F4
10EA 120000    4021            lcall   _waitms
10ED           4022   ;        main.c:924: for (i_loo=50; i_loo <= 210; i_loo+=20)
10ED 905290    4023            mov     dptr,#_i_loo
10F0 7432      4024            mov     a,#0x32
10F2 F0        4025            movx    @dptr,a
10F3 E4        4026            clr     a
10F4 A3        4027            inc     dptr
10F5 F0        4028            movx    @dptr,a
10F6           4029   L031001?:
10F6 905290    4030            mov     dptr,#_i_loo
10F9 E0        4031            movx    a,@dptr
10FA FA        4032            mov     r2,a
10FB A3        4033            inc     dptr
10FC E0        4034            movx    a,@dptr
10FD FB        4035            mov     r3,a
10FE C3        4036            clr     c
10FF 74D2      4037            mov     a,#0xD2
1101 9A        4038            subb    a,r2
1102 E4        4039            clr     a
1103 6480      4040            xrl     a,#0x80
1105 8BF0      4041            mov     b,r3
1107 63F080    4042            xrl     b,#0x80
110A 95F0      4043            subb    a,b
110C 4000      4044            jc      L031004?
110E           4045   ;        main.c:926: servo_base = i_loo; 
110E 905090    4046            mov     dptr,#_servo_base
1111 EA        4047            mov     a,r2
1112 F0        4048            movx    @dptr,a
1113           4049   ;        main.c:927: waitms(25);
1113 900019    4050            mov     dptr,#0x0019
1116 120000    4051            lcall   _waitms
1119           4052   ;        main.c:924: for (i_loo=50; i_loo <= 210; i_loo+=20)
1119 905290    4053            mov     dptr,#_i_loo
111C E0        4054            movx    a,@dptr
111D FA        4055            mov     r2,a
111E A3        4056            inc     dptr
111F E0        4057            movx    a,@dptr
1120 FB        4058            mov     r3,a
1121 905290    4059            mov     dptr,#_i_loo
1124 7414      4060            mov     a,#0x14
1126 2A        4061            add     a,r2
1127 F0        4062            movx    @dptr,a
1128 E4        4063            clr     a
1129 3B        4064            addc    a,r3
112A A3        4065            inc     dptr
112B F0        4066            movx    @dptr,a
112C 8000      4067            sjmp    L031001?
112E           4068   L031004?:
112E           4069   ;        main.c:929: waitms(500);
112E 9001F4    4070            mov     dptr,#0x01F4
1131 120000    4071            lcall   _waitms
1134           4072   ;        main.c:930: for(i_loo = 50; i_loo <= 250; i_loo+=20)
1134 905290    4073            mov     dptr,#_i_loo
1137 7432      4074            mov     a,#0x32
1139 F0        4075            movx    @dptr,a
113A E4        4076            clr     a
113B A3        4077            inc     dptr
113C F0        4078            movx    @dptr,a
113D           4079   L031005?:
113D 905290    4080            mov     dptr,#_i_loo
1140 E0        4081            movx    a,@dptr
1141 FA        4082            mov     r2,a
1142 A3        4083            inc     dptr
1143 E0        4084            movx    a,@dptr
1144 FB        4085            mov     r3,a
1145 C3        4086            clr     c
1146 74FA      4087            mov     a,#0xFA
1148 9A        4088            subb    a,r2
1149 E4        4089            clr     a
114A 6480      4090            xrl     a,#0x80
114C 8BF0      4091            mov     b,r3
114E 63F080    4092            xrl     b,#0x80
1151 95F0      4093            subb    a,b
1153 4000      4094            jc      L031008?
1155           4095   ;        main.c:932: servo_arm = i_loo; 
1155 905050    4096            mov     dptr,#_servo_arm
1158 EA        4097            mov     a,r2
1159 F0        4098            movx    @dptr,a
115A           4099   ;        main.c:933: waitms(25);
115A 900019    4100            mov     dptr,#0x0019
115D 120000    4101            lcall   _waitms
1160           4102   ;        main.c:930: for(i_loo = 50; i_loo <= 250; i_loo+=20)
1160 905290    4103            mov     dptr,#_i_loo
1163 E0        4104            movx    a,@dptr
1164 FA        4105            mov     r2,a
1165 A3        4106            inc     dptr
1166 E0        4107            movx    a,@dptr
1167 FB        4108            mov     r3,a
1168 905290    4109            mov     dptr,#_i_loo
116B 7414      4110            mov     a,#0x14
116D 2A        4111            add     a,r2
116E F0        4112            movx    @dptr,a
116F E4        4113            clr     a
1170 3B        4114            addc    a,r3
1171 A3        4115            inc     dptr
1172 F0        4116            movx    @dptr,a
1173 8000      4117            sjmp    L031005?
1175           4118   L031008?:
1175           4119   ;        main.c:935: Magnet = 1; 
1175 D295      4120            setb    _P1_5
1177           4121   ;        main.c:936: waitms(500);
1177 9001F4    4122            mov     dptr,#0x01F4
117A 120000    4123            lcall   _waitms
117D           4124   ;        main.c:937: for(i_loo = 200; i_loo >= 110; i_loo-=10){
117D 905290    4125            mov     dptr,#_i_loo
1180 74C8      4126            mov     a,#0xC8
1182 F0        4127            movx    @dptr,a
1183 E4        4128            clr     a
1184 A3        4129            inc     dptr
1185 F0        4130            movx    @dptr,a
1186           4131   L031009?:
1186 905290    4132            mov     dptr,#_i_loo
1189 E0        4133            movx    a,@dptr
118A FA        4134            mov     r2,a
118B A3        4135            inc     dptr
118C E0        4136            movx    a,@dptr
118D FB        4137            mov     r3,a
118E C3        4138            clr     c
118F EA        4139            mov     a,r2
1190 946E      4140            subb    a,#0x6E
1192 EB        4141            mov     a,r3
1193 6480      4142            xrl     a,#0x80
1195 9480      4143            subb    a,#0x80
1197 4000      4144            jc      L031012?
1199           4145   ;        main.c:938: waitms(25);
1199 900019    4146            mov     dptr,#0x0019
119C 120000    4147            lcall   _waitms
119F           4148   ;        main.c:939: servo_base = i_loo;
119F 905290    4149            mov     dptr,#_i_loo
11A2 E0        4150            movx    a,@dptr
11A3 FA        4151            mov     r2,a
11A4 A3        4152            inc     dptr
11A5 E0        4153            movx    a,@dptr
11A6 FB        4154            mov     r3,a
11A7 905090    4155            mov     dptr,#_servo_base
11AA EA        4156            mov     a,r2
11AB F0        4157            movx    @dptr,a
11AC           4158   ;        main.c:937: for(i_loo = 200; i_loo >= 110; i_loo-=10){
11AC EA        4159            mov     a,r2
11AD 24F6      4160            add     a,#0xf6
11AF FA        4161            mov     r2,a
11B0 EB        4162            mov     a,r3
11B1 34FF      4163            addc    a,#0xff
11B3 FB        4164            mov     r3,a
11B4 905290    4165            mov     dptr,#_i_loo
11B7 EA        4166            mov     a,r2
11B8 F0        4167            movx    @dptr,a
11B9 A3        4168            inc     dptr
11BA EB        4169            mov     a,r3
11BB F0        4170            movx    @dptr,a
11BC 8000      4171            sjmp    L031009?
11BE           4172   L031012?:
11BE           4173   ;        main.c:941: Magnet = 1; 
11BE D295      4174            setb    _P1_5
11C0           4175   ;        main.c:942: waitms(500);
11C0 9001F4    4176            mov     dptr,#0x01F4
11C3 120000    4177            lcall   _waitms
11C6           4178   ;        main.c:943: for(i_loo = 110; i_loo <= 200; i_loo+=10){
11C6 905290    4179            mov     dptr,#_i_loo
11C9 746E      4180            mov     a,#0x6E
11CB F0        4181            movx    @dptr,a
11CC E4        4182            clr     a
11CD A3        4183            inc     dptr
11CE F0        4184            movx    @dptr,a
11CF           4185   L031013?:
11CF 905290    4186            mov     dptr,#_i_loo
11D2 E0        4187            movx    a,@dptr
11D3 FA        4188            mov     r2,a
11D4 A3        4189            inc     dptr
11D5 E0        4190            movx    a,@dptr
11D6 FB        4191            mov     r3,a
11D7 C3        4192            clr     c
11D8 74C8      4193            mov     a,#0xC8
11DA 9A        4194            subb    a,r2
11DB E4        4195            clr     a
11DC 6480      4196            xrl     a,#0x80
11DE 8BF0      4197            mov     b,r3
11E0 63F080    4198            xrl     b,#0x80
11E3 95F0      4199            subb    a,b
11E5 4000      4200            jc      L031016?
11E7           4201   ;        main.c:944: waitms(25);
11E7 900019    4202            mov     dptr,#0x0019
11EA 120000    4203            lcall   _waitms
11ED           4204   ;        main.c:945: servo_base = i_loo;
11ED 905290    4205            mov     dptr,#_i_loo
11F0 E0        4206            movx    a,@dptr
11F1 FA        4207            mov     r2,a
11F2 A3        4208            inc     dptr
11F3 E0        4209            movx    a,@dptr
11F4 FB        4210            mov     r3,a
11F5 905090    4211            mov     dptr,#_servo_base
11F8 EA        4212            mov     a,r2
11F9 F0        4213            movx    @dptr,a
11FA           4214   ;        main.c:943: for(i_loo = 110; i_loo <= 200; i_loo+=10){
11FA 905290    4215            mov     dptr,#_i_loo
11FD 740A      4216            mov     a,#0x0A
11FF 2A        4217            add     a,r2
1200 F0        4218            movx    @dptr,a
1201 E4        4219            clr     a
1202 3B        4220            addc    a,r3
1203 A3        4221            inc     dptr
1204 F0        4222            movx    @dptr,a
1205 8000      4223            sjmp    L031013?
1207           4224   L031016?:
1207           4225   ;        main.c:947: Magnet = 1; 
1207 D295      4226            setb    _P1_5
1209           4227   ;        main.c:948: waitms(500);
1209 9001F4    4228            mov     dptr,#0x01F4
120C 120000    4229            lcall   _waitms
120F           4230   ;        main.c:949: for(i_loo = 240; i_loo >= 80; i_loo-=10){
120F 905290    4231            mov     dptr,#_i_loo
1212 74F0      4232            mov     a,#0xF0
1214 F0        4233            movx    @dptr,a
1215 E4        4234            clr     a
1216 A3        4235            inc     dptr
1217 F0        4236            movx    @dptr,a
1218           4237   L031017?:
1218 905290    4238            mov     dptr,#_i_loo
121B E0        4239            movx    a,@dptr
121C FA        4240            mov     r2,a
121D A3        4241            inc     dptr
121E E0        4242            movx    a,@dptr
121F FB        4243            mov     r3,a
1220 C3        4244            clr     c
1221 EA        4245            mov     a,r2
1222 9450      4246            subb    a,#0x50
1224 EB        4247            mov     a,r3
1225 6480      4248            xrl     a,#0x80
1227 9480      4249            subb    a,#0x80
1229 4000      4250            jc      L031020?
122B           4251   ;        main.c:950: waitms(25);
122B 900019    4252            mov     dptr,#0x0019
122E 120000    4253            lcall   _waitms
1231           4254   ;        main.c:951: servo_arm = i_loo;
1231 905290    4255            mov     dptr,#_i_loo
1234 E0        4256            movx    a,@dptr
1235 FA        4257            mov     r2,a
1236 A3        4258            inc     dptr
1237 E0        4259            movx    a,@dptr
1238 FB        4260            mov     r3,a
1239 905050    4261            mov     dptr,#_servo_arm
123C EA        4262            mov     a,r2
123D F0        4263            movx    @dptr,a
123E           4264   ;        main.c:952: Magnet = 1; 
123E D295      4265            setb    _P1_5
1240           4266   ;        main.c:949: for(i_loo = 240; i_loo >= 80; i_loo-=10){
1240 EA        4267            mov     a,r2
1241 24F6      4268            add     a,#0xf6
1243 FA        4269            mov     r2,a
1244 EB        4270            mov     a,r3
1245 34FF      4271            addc    a,#0xff
1247 FB        4272            mov     r3,a
1248 905290    4273            mov     dptr,#_i_loo
124B EA        4274            mov     a,r2
124C F0        4275            movx    @dptr,a
124D A3        4276            inc     dptr
124E EB        4277            mov     a,r3
124F F0        4278            movx    @dptr,a
1250 8000      4279            sjmp    L031017?
1252           4280   L031020?:
1252           4281   ;        main.c:954: Magnet = 1; 
1252 D295      4282            setb    _P1_5
1254           4283   ;        main.c:955: waitms(500);
1254 9001F4    4284            mov     dptr,#0x01F4
1257 120000    4285            lcall   _waitms
125A           4286   ;        main.c:956: for(i_loo = 200; i_loo >= 80; i_loo-=10){
125A 905290    4287            mov     dptr,#_i_loo
125D 74C8      4288            mov     a,#0xC8
125F F0        4289            movx    @dptr,a
1260 E4        4290            clr     a
1261 A3        4291            inc     dptr
1262 F0        4292            movx    @dptr,a
1263           4293   L031021?:
1263 905290    4294            mov     dptr,#_i_loo
1266 E0        4295            movx    a,@dptr
1267 FA        4296            mov     r2,a
1268 A3        4297            inc     dptr
1269 E0        4298            movx    a,@dptr
126A FB        4299            mov     r3,a
126B C3        4300            clr     c
126C EA        4301            mov     a,r2
126D 9450      4302            subb    a,#0x50
126F EB        4303            mov     a,r3
1270 6480      4304            xrl     a,#0x80
1272 9480      4305            subb    a,#0x80
1274 4000      4306            jc      L031024?
1276           4307   ;        main.c:957: waitms(25);
1276 900019    4308            mov     dptr,#0x0019
1279 120000    4309            lcall   _waitms
127C           4310   ;        main.c:958: servo_base = i_loo;
127C 905290    4311            mov     dptr,#_i_loo
127F E0        4312            movx    a,@dptr
1280 FA        4313            mov     r2,a
1281 A3        4314            inc     dptr
1282 E0        4315            movx    a,@dptr
1283 FB        4316            mov     r3,a
1284 905090    4317            mov     dptr,#_servo_base
1287 EA        4318            mov     a,r2
1288 F0        4319            movx    @dptr,a
1289           4320   ;        main.c:959: Magnet = 1; 
1289 D295      4321            setb    _P1_5
128B           4322   ;        main.c:956: for(i_loo = 200; i_loo >= 80; i_loo-=10){
128B EA        4323            mov     a,r2
128C 24F6      4324            add     a,#0xf6
128E FA        4325            mov     r2,a
128F EB        4326            mov     a,r3
1290 34FF      4327            addc    a,#0xff
1292 FB        4328            mov     r3,a
1293 905290    4329            mov     dptr,#_i_loo
1296 EA        4330            mov     a,r2
1297 F0        4331            movx    @dptr,a
1298 A3        4332            inc     dptr
1299 EB        4333            mov     a,r3
129A F0        4334            movx    @dptr,a
129B 8000      4335            sjmp    L031021?
129D           4336   L031024?:
129D           4337   ;        main.c:961: Magnet = 1; 
129D D295      4338            setb    _P1_5
129F           4339   ;        main.c:962: waitms(500);
129F 9001F4    4340            mov     dptr,#0x01F4
12A2 120000    4341            lcall   _waitms
12A5           4342   ;        main.c:963: for(i_loo = 90; i_loo <= 100; i_loo+=10){
12A5 905290    4343            mov     dptr,#_i_loo
12A8 745A      4344            mov     a,#0x5A
12AA F0        4345            movx    @dptr,a
12AB E4        4346            clr     a
12AC A3        4347            inc     dptr
12AD F0        4348            movx    @dptr,a
12AE           4349   L031025?:
12AE 905290    4350            mov     dptr,#_i_loo
12B1 E0        4351            movx    a,@dptr
12B2 FA        4352            mov     r2,a
12B3 A3        4353            inc     dptr
12B4 E0        4354            movx    a,@dptr
12B5 FB        4355            mov     r3,a
12B6 C3        4356            clr     c
12B7 7464      4357            mov     a,#0x64
12B9 9A        4358            subb    a,r2
12BA E4        4359            clr     a
12BB 6480      4360            xrl     a,#0x80
12BD 8BF0      4361            mov     b,r3
12BF 63F080    4362            xrl     b,#0x80
12C2 95F0      4363            subb    a,b
12C4 4000      4364            jc      L031028?
12C6           4365   ;        main.c:964: waitms(25);
12C6 900019    4366            mov     dptr,#0x0019
12C9 120000    4367            lcall   _waitms
12CC           4368   ;        main.c:965: servo_arm = i_loo;
12CC 905290    4369            mov     dptr,#_i_loo
12CF E0        4370            movx    a,@dptr
12D0 FA        4371            mov     r2,a
12D1 A3        4372            inc     dptr
12D2 E0        4373            movx    a,@dptr
12D3 FB        4374            mov     r3,a
12D4 905050    4375            mov     dptr,#_servo_arm
12D7 EA        4376            mov     a,r2
12D8 F0        4377            movx    @dptr,a
12D9           4378   ;        main.c:966: Magnet = 1; 
12D9 D295      4379            setb    _P1_5
12DB           4380   ;        main.c:963: for(i_loo = 90; i_loo <= 100; i_loo+=10){
12DB 905290    4381            mov     dptr,#_i_loo
12DE 740A      4382            mov     a,#0x0A
12E0 2A        4383            add     a,r2
12E1 F0        4384            movx    @dptr,a
12E2 E4        4385            clr     a
12E3 3B        4386            addc    a,r3
12E4 A3        4387            inc     dptr
12E5 F0        4388            movx    @dptr,a
12E6 8000      4389            sjmp    L031025?
12E8           4390   L031028?:
12E8           4391   ;        main.c:968: waitms(500);
12E8 9001F4    4392            mov     dptr,#0x01F4
12EB 120000    4393            lcall   _waitms
12EE           4394   ;        main.c:969: Magnet = 0;
12EE C295      4395            clr     _P1_5
12F0           4396   ;        main.c:970: waitms(500);
12F0 9001F4    4397            mov     dptr,#0x01F4
12F3 120000    4398            lcall   _waitms
12F6           4399   ;        main.c:971: for (i_loo = 100; i_loo >=50 ; i_loo-=10){
12F6 905290    4400            mov     dptr,#_i_loo
12F9 7464      4401            mov     a,#0x64
12FB F0        4402            movx    @dptr,a
12FC E4        4403            clr     a
12FD A3        4404            inc     dptr
12FE F0        4405            movx    @dptr,a
12FF           4406   L031029?:
12FF 905290    4407            mov     dptr,#_i_loo
1302 E0        4408            movx    a,@dptr
1303 FA        4409            mov     r2,a
1304 A3        4410            inc     dptr
1305 E0        4411            movx    a,@dptr
1306 FB        4412            mov     r3,a
1307 C3        4413            clr     c
1308 EA        4414            mov     a,r2
1309 9432      4415            subb    a,#0x32
130B EB        4416            mov     a,r3
130C 6480      4417            xrl     a,#0x80
130E 9480      4418            subb    a,#0x80
1310 4000      4419            jc      L031032?
1312           4420   ;        main.c:972: servo_arm = i_loo; 
1312 905050    4421            mov     dptr,#_servo_arm
1315 EA        4422            mov     a,r2
1316 F0        4423            movx    @dptr,a
1317           4424   ;        main.c:973: waitms(25);
1317 900019    4425            mov     dptr,#0x0019
131A 120000    4426            lcall   _waitms
131D           4427   ;        main.c:971: for (i_loo = 100; i_loo >=50 ; i_loo-=10){
131D 905290    4428            mov     dptr,#_i_loo
1320 E0        4429            movx    a,@dptr
1321 FA        4430            mov     r2,a
1322 A3        4431            inc     dptr
1323 E0        4432            movx    a,@dptr
1324 FB        4433            mov     r3,a
1325 EA        4434            mov     a,r2
1326 24F6      4435            add     a,#0xf6
1328 FA        4436            mov     r2,a
1329 EB        4437            mov     a,r3
132A 34FF      4438            addc    a,#0xff
132C FB        4439            mov     r3,a
132D 905290    4440            mov     dptr,#_i_loo
1330 EA        4441            mov     a,r2
1331 F0        4442            movx    @dptr,a
1332 A3        4443            inc     dptr
1333 EB        4444            mov     a,r3
1334 F0        4445            movx    @dptr,a
1335 8000      4446            sjmp    L031029?
1337           4447   L031032?:
1337           4448   ;        main.c:975: waitms(500);
1337 9001F4    4449            mov     dptr,#0x01F4
133A 120000    4450            lcall   _waitms
133D           4451   ;        main.c:976: for (i_loo = 80; i_loo >= 50; i_loo-=10){
133D 905290    4452            mov     dptr,#_i_loo
1340 7450      4453            mov     a,#0x50
1342 F0        4454            movx    @dptr,a
1343 E4        4455            clr     a
1344 A3        4456            inc     dptr
1345 F0        4457            movx    @dptr,a
1346           4458   L031033?:
1346 905290    4459            mov     dptr,#_i_loo
1349 E0        4460            movx    a,@dptr
134A FA        4461            mov     r2,a
134B A3        4462            inc     dptr
134C E0        4463            movx    a,@dptr
134D FB        4464            mov     r3,a
134E C3        4465            clr     c
134F EA        4466            mov     a,r2
1350 9432      4467            subb    a,#0x32
1352 EB        4468            mov     a,r3
1353 6480      4469            xrl     a,#0x80
1355 9480      4470            subb    a,#0x80
1357 4000      4471            jc      L031036?
1359           4472   ;        main.c:977: servo_base = i_loo; 
1359 905090    4473            mov     dptr,#_servo_base
135C EA        4474            mov     a,r2
135D F0        4475            movx    @dptr,a
135E           4476   ;        main.c:978: waitms(25);
135E 900019    4477            mov     dptr,#0x0019
1361 120000    4478            lcall   _waitms
1364           4479   ;        main.c:976: for (i_loo = 80; i_loo >= 50; i_loo-=10){
1364 905290    4480            mov     dptr,#_i_loo
1367 E0        4481            movx    a,@dptr
1368 FA        4482            mov     r2,a
1369 A3        4483            inc     dptr
136A E0        4484            movx    a,@dptr
136B FB        4485            mov     r3,a
136C EA        4486            mov     a,r2
136D 24F6      4487            add     a,#0xf6
136F FA        4488            mov     r2,a
1370 EB        4489            mov     a,r3
1371 34FF      4490            addc    a,#0xff
1373 FB        4491            mov     r3,a
1374 905290    4492            mov     dptr,#_i_loo
1377 EA        4493            mov     a,r2
1378 F0        4494            movx    @dptr,a
1379 A3        4495            inc     dptr
137A EB        4496            mov     a,r3
137B F0        4497            movx    @dptr,a
137C 8000      4498            sjmp    L031033?
137E           4499   L031036?:
137E           4500   ;        main.c:980: return;
137E 22        4501            ret
137F           4502   ;------------------------------------------------------------
137F           4503   ;Allocation info for local variables in function 'servo_push'
137F           4504   ;------------------------------------------------------------
137F           4505   ;------------------------------------------------------------
137F           4506   ;        main.c:983: void servo_push(void)
137F           4507   ;        -----------------------------------------
137F           4508   ;         function servo_push
137F           4509   ;        -----------------------------------------
137F           4510   _servo_push:
137F           4511   ;        main.c:985: servo_arm = 50;
137F 905050    4512            mov     dptr,#_servo_arm
1382 7432      4513            mov     a,#0x32
1384 F0        4514            movx    @dptr,a
1385           4515   ;        main.c:986: servo_base = 50;
1385 905090    4516            mov     dptr,#_servo_base
1388 7432      4517            mov     a,#0x32
138A F0        4518            movx    @dptr,a
138B           4519   ;        main.c:987: waitms(500);
138B 9001F4    4520            mov     dptr,#0x01F4
138E 120000    4521            lcall   _waitms
1391           4522   ;        main.c:988: for (i_loo=50; i_loo <= 130; i_loo+=10)
1391 905290    4523            mov     dptr,#_i_loo
1394 7432      4524            mov     a,#0x32
1396 F0        4525            movx    @dptr,a
1397 E4        4526            clr     a
1398 A3        4527            inc     dptr
1399 F0        4528            movx    @dptr,a
139A           4529   L032001?:
139A 905290    4530            mov     dptr,#_i_loo
139D E0        4531            movx    a,@dptr
139E FA        4532            mov     r2,a
139F A3        4533            inc     dptr
13A0 E0        4534            movx    a,@dptr
13A1 FB        4535            mov     r3,a
13A2 C3        4536            clr     c
13A3 7482      4537            mov     a,#0x82
13A5 9A        4538            subb    a,r2
13A6 E4        4539            clr     a
13A7 6480      4540            xrl     a,#0x80
13A9 8BF0      4541            mov     b,r3
13AB 63F080    4542            xrl     b,#0x80
13AE 95F0      4543            subb    a,b
13B0 4000      4544            jc      L032004?
13B2           4545   ;        main.c:990: servo_base = i_loo; 
13B2 905090    4546            mov     dptr,#_servo_base
13B5 EA        4547            mov     a,r2
13B6 F0        4548            movx    @dptr,a
13B7           4549   ;        main.c:991: waitms(25);
13B7 900019    4550            mov     dptr,#0x0019
13BA 120000    4551            lcall   _waitms
13BD           4552   ;        main.c:988: for (i_loo=50; i_loo <= 130; i_loo+=10)
13BD 905290    4553            mov     dptr,#_i_loo
13C0 E0        4554            movx    a,@dptr
13C1 FA        4555            mov     r2,a
13C2 A3        4556            inc     dptr
13C3 E0        4557            movx    a,@dptr
13C4 FB        4558            mov     r3,a
13C5 905290    4559            mov     dptr,#_i_loo
13C8 740A      4560            mov     a,#0x0A
13CA 2A        4561            add     a,r2
13CB F0        4562            movx    @dptr,a
13CC E4        4563            clr     a
13CD 3B        4564            addc    a,r3
13CE A3        4565            inc     dptr
13CF F0        4566            movx    @dptr,a
13D0 8000      4567            sjmp    L032001?
13D2           4568   L032004?:
13D2           4569   ;        main.c:993: waitms(200);
13D2 9000C8    4570            mov     dptr,#0x00C8
13D5 120000    4571            lcall   _waitms
13D8           4572   ;        main.c:994: for (i_loo=50; i_loo <= 130; i_loo+=10)
13D8 905290    4573            mov     dptr,#_i_loo
13DB 7432      4574            mov     a,#0x32
13DD F0        4575            movx    @dptr,a
13DE E4        4576            clr     a
13DF A3        4577            inc     dptr
13E0 F0        4578            movx    @dptr,a
13E1           4579   L032005?:
13E1 905290    4580            mov     dptr,#_i_loo
13E4 E0        4581            movx    a,@dptr
13E5 FA        4582            mov     r2,a
13E6 A3        4583            inc     dptr
13E7 E0        4584            movx    a,@dptr
13E8 FB        4585            mov     r3,a
13E9 C3        4586            clr     c
13EA 7482      4587            mov     a,#0x82
13EC 9A        4588            subb    a,r2
13ED E4        4589            clr     a
13EE 6480      4590            xrl     a,#0x80
13F0 8BF0      4591            mov     b,r3
13F2 63F080    4592            xrl     b,#0x80
13F5 95F0      4593            subb    a,b
13F7 4000      4594            jc      L032008?
13F9           4595   ;        main.c:996: servo_arm = i_loo; 
13F9 905050    4596            mov     dptr,#_servo_arm
13FC EA        4597            mov     a,r2
13FD F0        4598            movx    @dptr,a
13FE           4599   ;        main.c:997: waitms(25);
13FE 900019    4600            mov     dptr,#0x0019
1401 120000    4601            lcall   _waitms
1404           4602   ;        main.c:994: for (i_loo=50; i_loo <= 130; i_loo+=10)
1404 905290    4603            mov     dptr,#_i_loo
1407 E0        4604            movx    a,@dptr
1408 FA        4605            mov     r2,a
1409 A3        4606            inc     dptr
140A E0        4607            movx    a,@dptr
140B FB        4608            mov     r3,a
140C 905290    4609            mov     dptr,#_i_loo
140F 740A      4610            mov     a,#0x0A
1411 2A        4611            add     a,r2
1412 F0        4612            movx    @dptr,a
1413 E4        4613            clr     a
1414 3B        4614            addc    a,r3
1415 A3        4615            inc     dptr
1416 F0        4616            movx    @dptr,a
1417 8000      4617            sjmp    L032005?
1419           4618   L032008?:
1419           4619   ;        main.c:999: waitms(200);
1419 9000C8    4620            mov     dptr,#0x00C8
141C 120000    4621            lcall   _waitms
141F           4622   ;        main.c:1000: for (i_loo=130; i_loo <= 250; i_loo+=10)
141F 905290    4623            mov     dptr,#_i_loo
1422 7482      4624            mov     a,#0x82
1424 F0        4625            movx    @dptr,a
1425 E4        4626            clr     a
1426 A3        4627            inc     dptr
1427 F0        4628            movx    @dptr,a
1428           4629   L032009?:
1428 905290    4630            mov     dptr,#_i_loo
142B E0        4631            movx    a,@dptr
142C FA        4632            mov     r2,a
142D A3        4633            inc     dptr
142E E0        4634            movx    a,@dptr
142F FB        4635            mov     r3,a
1430 C3        4636            clr     c
1431 74FA      4637            mov     a,#0xFA
1433 9A        4638            subb    a,r2
1434 E4        4639            clr     a
1435 6480      4640            xrl     a,#0x80
1437 8BF0      4641            mov     b,r3
1439 63F080    4642            xrl     b,#0x80
143C 95F0      4643            subb    a,b
143E 4000      4644            jc      L032012?
1440           4645   ;        main.c:1002: servo_base = i_loo; 
1440 905090    4646            mov     dptr,#_servo_base
1443 EA        4647            mov     a,r2
1444 F0        4648            movx    @dptr,a
1445           4649   ;        main.c:1003: waitms(25);
1445 900019    4650            mov     dptr,#0x0019
1448 120000    4651            lcall   _waitms
144B           4652   ;        main.c:1000: for (i_loo=130; i_loo <= 250; i_loo+=10)
144B 905290    4653            mov     dptr,#_i_loo
144E E0        4654            movx    a,@dptr
144F FA        4655            mov     r2,a
1450 A3        4656            inc     dptr
1451 E0        4657            movx    a,@dptr
1452 FB        4658            mov     r3,a
1453 905290    4659            mov     dptr,#_i_loo
1456 740A      4660            mov     a,#0x0A
1458 2A        4661            add     a,r2
1459 F0        4662            movx    @dptr,a
145A E4        4663            clr     a
145B 3B        4664            addc    a,r3
145C A3        4665            inc     dptr
145D F0        4666            movx    @dptr,a
145E 8000      4667            sjmp    L032009?
1460           4668   L032012?:
1460           4669   ;        main.c:1005: waitms(200);
1460 9000C8    4670            mov     dptr,#0x00C8
1463 120000    4671            lcall   _waitms
1466           4672   ;        main.c:1006: for (i_loo=250; i_loo >= 150; i_loo-=10)
1466 905290    4673            mov     dptr,#_i_loo
1469 74FA      4674            mov     a,#0xFA
146B F0        4675            movx    @dptr,a
146C E4        4676            clr     a
146D A3        4677            inc     dptr
146E F0        4678            movx    @dptr,a
146F           4679   L032013?:
146F 905290    4680            mov     dptr,#_i_loo
1472 E0        4681            movx    a,@dptr
1473 FA        4682            mov     r2,a
1474 A3        4683            inc     dptr
1475 E0        4684            movx    a,@dptr
1476 FB        4685            mov     r3,a
1477 C3        4686            clr     c
1478 EA        4687            mov     a,r2
1479 9496      4688            subb    a,#0x96
147B EB        4689            mov     a,r3
147C 6480      4690            xrl     a,#0x80
147E 9480      4691            subb    a,#0x80
1480 4000      4692            jc      L032016?
1482           4693   ;        main.c:1008: servo_base = i_loo; 
1482 905090    4694            mov     dptr,#_servo_base
1485 EA        4695            mov     a,r2
1486 F0        4696            movx    @dptr,a
1487           4697   ;        main.c:1009: waitms(25);
1487 900019    4698            mov     dptr,#0x0019
148A 120000    4699            lcall   _waitms
148D           4700   ;        main.c:1006: for (i_loo=250; i_loo >= 150; i_loo-=10)
148D 905290    4701            mov     dptr,#_i_loo
1490 E0        4702            movx    a,@dptr
1491 FA        4703            mov     r2,a
1492 A3        4704            inc     dptr
1493 E0        4705            movx    a,@dptr
1494 FB        4706            mov     r3,a
1495 EA        4707            mov     a,r2
1496 24F6      4708            add     a,#0xf6
1498 FA        4709            mov     r2,a
1499 EB        4710            mov     a,r3
149A 34FF      4711            addc    a,#0xff
149C FB        4712            mov     r3,a
149D 905290    4713            mov     dptr,#_i_loo
14A0 EA        4714            mov     a,r2
14A1 F0        4715            movx    @dptr,a
14A2 A3        4716            inc     dptr
14A3 EB        4717            mov     a,r3
14A4 F0        4718            movx    @dptr,a
14A5 8000      4719            sjmp    L032013?
14A7           4720   L032016?:
14A7           4721   ;        main.c:1011: waitms(200);
14A7 9000C8    4722            mov     dptr,#0x00C8
14AA 120000    4723            lcall   _waitms
14AD           4724   ;        main.c:1012: for (i_loo=130; i_loo >= 50; i_loo-=10)
14AD 905290    4725            mov     dptr,#_i_loo
14B0 7482      4726            mov     a,#0x82
14B2 F0        4727            movx    @dptr,a
14B3 E4        4728            clr     a
14B4 A3        4729            inc     dptr
14B5 F0        4730            movx    @dptr,a
14B6           4731   L032017?:
14B6 905290    4732            mov     dptr,#_i_loo
14B9 E0        4733            movx    a,@dptr
14BA FA        4734            mov     r2,a
14BB A3        4735            inc     dptr
14BC E0        4736            movx    a,@dptr
14BD FB        4737            mov     r3,a
14BE C3        4738            clr     c
14BF EA        4739            mov     a,r2
14C0 9432      4740            subb    a,#0x32
14C2 EB        4741            mov     a,r3
14C3 6480      4742            xrl     a,#0x80
14C5 9480      4743            subb    a,#0x80
14C7 4000      4744            jc      L032020?
14C9           4745   ;        main.c:1014: servo_arm = i_loo; 
14C9 905050    4746            mov     dptr,#_servo_arm
14CC EA        4747            mov     a,r2
14CD F0        4748            movx    @dptr,a
14CE           4749   ;        main.c:1015: waitms(25);
14CE 900019    4750            mov     dptr,#0x0019
14D1 120000    4751            lcall   _waitms
14D4           4752   ;        main.c:1012: for (i_loo=130; i_loo >= 50; i_loo-=10)
14D4 905290    4753            mov     dptr,#_i_loo
14D7 E0        4754            movx    a,@dptr
14D8 FA        4755            mov     r2,a
14D9 A3        4756            inc     dptr
14DA E0        4757            movx    a,@dptr
14DB FB        4758            mov     r3,a
14DC EA        4759            mov     a,r2
14DD 24F6      4760            add     a,#0xf6
14DF FA        4761            mov     r2,a
14E0 EB        4762            mov     a,r3
14E1 34FF      4763            addc    a,#0xff
14E3 FB        4764            mov     r3,a
14E4 905290    4765            mov     dptr,#_i_loo
14E7 EA        4766            mov     a,r2
14E8 F0        4767            movx    @dptr,a
14E9 A3        4768            inc     dptr
14EA EB        4769            mov     a,r3
14EB F0        4770            movx    @dptr,a
14EC 8000      4771            sjmp    L032017?
14EE           4772   L032020?:
14EE           4773   ;        main.c:1017: waitms(200);
14EE 9000C8    4774            mov     dptr,#0x00C8
14F1 120000    4775            lcall   _waitms
14F4           4776   ;        main.c:1018: for (i_loo=150; i_loo >= 50; i_loo-=10)
14F4 905290    4777            mov     dptr,#_i_loo
14F7 7496      4778            mov     a,#0x96
14F9 F0        4779            movx    @dptr,a
14FA E4        4780            clr     a
14FB A3        4781            inc     dptr
14FC F0        4782            movx    @dptr,a
14FD           4783   L032021?:
14FD 905290    4784            mov     dptr,#_i_loo
1500 E0        4785            movx    a,@dptr
1501 FA        4786            mov     r2,a
1502 A3        4787            inc     dptr
1503 E0        4788            movx    a,@dptr
1504 FB        4789            mov     r3,a
1505 C3        4790            clr     c
1506 EA        4791            mov     a,r2
1507 9432      4792            subb    a,#0x32
1509 EB        4793            mov     a,r3
150A 6480      4794            xrl     a,#0x80
150C 9480      4795            subb    a,#0x80
150E 4000      4796            jc      L032024?
1510           4797   ;        main.c:1020: servo_base = i_loo; 
1510 905090    4798            mov     dptr,#_servo_base
1513 EA        4799            mov     a,r2
1514 F0        4800            movx    @dptr,a
1515           4801   ;        main.c:1021: waitms(25);
1515 900019    4802            mov     dptr,#0x0019
1518 120000    4803            lcall   _waitms
151B           4804   ;        main.c:1018: for (i_loo=150; i_loo >= 50; i_loo-=10)
151B 905290    4805            mov     dptr,#_i_loo
151E E0        4806            movx    a,@dptr
151F FA        4807            mov     r2,a
1520 A3        4808            inc     dptr
1521 E0        4809            movx    a,@dptr
1522 FB        4810            mov     r3,a
1523 EA        4811            mov     a,r2
1524 24F6      4812            add     a,#0xf6
1526 FA        4813            mov     r2,a
1527 EB        4814            mov     a,r3
1528 34FF      4815            addc    a,#0xff
152A FB        4816            mov     r3,a
152B 905290    4817            mov     dptr,#_i_loo
152E EA        4818            mov     a,r2
152F F0        4819            movx    @dptr,a
1530 A3        4820            inc     dptr
1531 EB        4821            mov     a,r3
1532 F0        4822            movx    @dptr,a
1533 8000      4823            sjmp    L032021?
1535           4824   L032024?:
1535           4825   ;        main.c:1023: waitms(200);
1535 9000C8    4826            mov     dptr,#0x00C8
1538           4827   ;        main.c:1024: return; 
1538 020000    4828            ljmp    _waitms
153B           4829   ;------------------------------------------------------------
153B           4830   ;Allocation info for local variables in function 'Move_forward_ms'
153B           4831   ;------------------------------------------------------------
153B           4832   ;ms                        Allocated to registers r2 r3 
153B           4833   ;------------------------------------------------------------
153B           4834   ;        main.c:1027: void Move_forward_ms(int ms){
153B           4835   ;        -----------------------------------------
153B           4836   ;         function Move_forward_ms
153B           4837   ;        -----------------------------------------
153B           4838   _Move_forward_ms:
153B AA82      4839            mov     r2,dpl
153D AB83      4840            mov     r3,dph
153F           4841   ;        main.c:1029: L_motor_dir = 0;
153F 905110    4842            mov     dptr,#_L_motor_dir
1542           4843   ;        main.c:1030: R_motor_dir = 0;
1542 E4        4844            clr     a
1543 F0        4845            movx    @dptr,a
1544 9050D0    4846            mov     dptr,#_R_motor_dir
1547 F0        4847            movx    @dptr,a
1548           4848   ;        main.c:1032: pwm_left = 50;
1548 905190    4849            mov     dptr,#_pwm_left
154B 7432      4850            mov     a,#0x32
154D F0        4851            movx    @dptr,a
154E           4852   ;        main.c:1033: pwm_right = 50;
154E 905150    4853            mov     dptr,#_pwm_right
1551 7432      4854            mov     a,#0x32
1553 F0        4855            movx    @dptr,a
1554           4856   ;        main.c:1035: waitms(ms);
1554 8A82      4857            mov     dpl,r2
1556 8B83      4858            mov     dph,r3
1558 120000    4859            lcall   _waitms
155B           4860   ;        main.c:1037: L_motor_dir = 0;
155B 905110    4861            mov     dptr,#_L_motor_dir
155E           4862   ;        main.c:1038: R_motor_dir = 0;
155E           4863   ;        main.c:1039: pwm_left = 0;
155E           4864   ;        main.c:1040: pwm_right = 0;
155E E4        4865            clr     a
155F F0        4866            movx    @dptr,a
1560 9050D0    4867            mov     dptr,#_R_motor_dir
1563 F0        4868            movx    @dptr,a
1564 905190    4869            mov     dptr,#_pwm_left
1567 F0        4870            movx    @dptr,a
1568 905150    4871            mov     dptr,#_pwm_right
156B F0        4872            movx    @dptr,a
156C           4873   ;        main.c:1041: return;
156C 22        4874            ret
156D           4875   ;------------------------------------------------------------
156D           4876   ;Allocation info for local variables in function 'servo_moveaway'
156D           4877   ;------------------------------------------------------------
156D           4878   ;------------------------------------------------------------
156D           4879   ;        main.c:1044: void servo_moveaway(void)
156D           4880   ;        -----------------------------------------
156D           4881   ;         function servo_moveaway
156D           4882   ;        -----------------------------------------
156D           4883   _servo_moveaway:
156D           4884   ;        main.c:1045: {  pwm_left = 0;
156D 905190    4885            mov     dptr,#_pwm_left
1570           4886   ;        main.c:1046: pwm_right = 0;
1570 E4        4887            clr     a
1571 F0        4888            movx    @dptr,a
1572 905150    4889            mov     dptr,#_pwm_right
1575 F0        4890            movx    @dptr,a
1576           4891   ;        main.c:1047: waitms(200);
1576 9000C8    4892            mov     dptr,#0x00C8
1579 120000    4893            lcall   _waitms
157C           4894   ;        main.c:1048: Move_forward_ms(200);
157C 9000C8    4895            mov     dptr,#0x00C8
157F 120000    4896            lcall   _Move_forward_ms
1582           4897   ;        main.c:1049: servo_push();
1582 120000    4898            lcall   _servo_push
1585           4899   ;        main.c:1050: waitms(100);
1585 900064    4900            mov     dptr,#0x0064
1588 120000    4901            lcall   _waitms
158B           4902   ;        main.c:1051: Move_forward_ms(500);
158B 9001F4    4903            mov     dptr,#0x01F4
158E 120000    4904            lcall   _Move_forward_ms
1591           4905   ;        main.c:1052: servo_push();
1591           4906   ;        main.c:1053: return; 
1591 020000    4907            ljmp    _servo_push
1594           4908   ;------------------------------------------------------------
1594           4909   ;Allocation info for local variables in function 'check_bound'
1594           4910   ;------------------------------------------------------------
1594           4911   ;d2                        Allocated with name '_check_bound_PARM_2'
1594           4912   ;d1                        Allocated to registers r2 r3 
1594           4913   ;------------------------------------------------------------
1594           4914   ;        main.c:1056: int check_bound(int d1, int d2){
1594           4915   ;        -----------------------------------------
1594           4916   ;         function check_bound
1594           4917   ;        -----------------------------------------
1594           4918   _check_bound:
1594 AA82      4919            mov     r2,dpl
1596 AB83      4920            mov     r3,dph
1598           4921   ;        main.c:1057: if(d1>10000||d2>10000)     return 1;
1598 C3        4922            clr     c
1599 7410      4923            mov     a,#0x10
159B 9A        4924            subb    a,r2
159C 74A7      4925            mov     a,#(0x27 ^ 0x80)
159E 8BF0      4926            mov     b,r3
15A0 63F080    4927            xrl     b,#0x80
15A3 95F0      4928            subb    a,b
15A5 4000      4929            jc      L035001?
15A7 7410      4930            mov     a,#0x10
15A9 9590      4931            subb    a,_check_bound_PARM_2
15AB 74A7      4932            mov     a,#(0x27 ^ 0x80)
15AD 8591F0    4933            mov     b,(_check_bound_PARM_2 + 1)
15B0 63F080    4934            xrl     b,#0x80
15B3 95F0      4935            subb    a,b
15B5 5000      4936            jnc     L035002?
15B7           4937   L035001?:
15B7 900001    4938            mov     dptr,#0x0001
15BA           4939   ;        main.c:1058: else return 0;
15BA 22        4940            ret
15BB           4941   L035002?:
15BB 900000    4942            mov     dptr,#0x0000
15BE 22        4943            ret
15BF           4944   ;------------------------------------------------------------
15BF           4945   ;Allocation info for local variables in function 'Init_all'
15BF           4946   ;------------------------------------------------------------
15BF           4947   ;------------------------------------------------------------
15BF           4948   ;        main.c:1061: void Init_all(){
15BF           4949   ;        -----------------------------------------
15BF           4950   ;         function Init_all
15BF           4951   ;        -----------------------------------------
15BF           4952   _Init_all:
15BF           4953   ;        main.c:1063: Set_Pin_Output(0x24);
15BF 758224    4954            mov     dpl,#0x24
15C2 120000    4955            lcall   _Set_Pin_Output
15C5           4956   ;        main.c:1064: Set_Pin_Output(0x23);
15C5 758223    4957            mov     dpl,#0x23
15C8 120000    4958            lcall   _Set_Pin_Output
15CB           4959   ;        main.c:1065: Set_Pin_Output(0x22);
15CB 758222    4960            mov     dpl,#0x22
15CE 120000    4961            lcall   _Set_Pin_Output
15D1           4962   ;        main.c:1066: Set_Pin_Output(0x21);
15D1 758221    4963            mov     dpl,#0x21
15D4 120000    4964            lcall   _Set_Pin_Output
15D7           4965   ;        main.c:1067: Set_Pin_Output(0x17);
15D7 758217    4966            mov     dpl,#0x17
15DA 120000    4967            lcall   _Set_Pin_Output
15DD           4968   ;        main.c:1068: Set_Pin_Output(0x16);
15DD 758216    4969            mov     dpl,#0x16
15E0 120000    4970            lcall   _Set_Pin_Output
15E3           4971   ;        main.c:1069: Set_Pin_Output(0x15);
15E3 758215    4972            mov     dpl,#0x15
15E6 120000    4973            lcall   _Set_Pin_Output
15E9           4974   ;        main.c:1070: Set_Pin_Output(0x10); // CS
15E9 758210    4975            mov     dpl,#0x10
15EC 120000    4976            lcall   _Set_Pin_Output
15EF           4977   ;        main.c:1072: Set_Pin_Input(0x30);
15EF 758230    4978            mov     dpl,#0x30
15F2 120000    4979            lcall   _Set_Pin_Input
15F5           4980   ;        main.c:1073: Set_Pin_Output(0x25); // CLK for Load
15F5 758225    4981            mov     dpl,#0x25
15F8 120000    4982            lcall   _Set_Pin_Output
15FB           4983   ;        main.c:1074: Set_Pin_Input(0x26);
15FB 758226    4984            mov     dpl,#0x26
15FE 120000    4985            lcall   _Set_Pin_Input
1601           4986   ;        main.c:1076: Set_Pin_Input(0x31);   //ECHO pin
1601 758231    4987            mov     dpl,#0x31
1604 120000    4988            lcall   _Set_Pin_Input
1607           4989   ;        main.c:1077: Set_Pin_Output(0x00);  // TRIGGER pin
1607 758200    4990            mov     dpl,#0x00
160A 120000    4991            lcall   _Set_Pin_Output
160D           4992   ;        main.c:1079: InitPinADC(1,3);
160D 75E003    4993            mov     _InitPinADC_PARM_2,#0x03
1610 758201    4994            mov     dpl,#0x01
1613 120000    4995            lcall   _InitPinADC
1616           4996   ;        main.c:1080: InitPinADC(1,4);
1616 75E004    4997            mov     _InitPinADC_PARM_2,#0x04
1619 758201    4998            mov     dpl,#0x01
161C 120000    4999            lcall   _InitPinADC
161F           5000   ;        main.c:1081: InitADC();
161F 120000    5001            lcall   _InitADC
1622           5002   ;        main.c:1083: TMOD&=0b_1111_0000; 
1622 5389F0    5003            anl     _TMOD,#0xF0
1625           5004   ;        main.c:1084: TMOD|=0b_0000_0001; 
1625 438901    5005            orl     _TMOD,#0x01
1628           5006   ;        main.c:1085: TR0=0; 
1628 C28C      5007            clr     _TR0
162A           5008   ;        main.c:1087: Servo_arm=0;
162A C296      5009            clr     _P1_6
162C           5010   ;        main.c:1088: Servo_base=0;
162C C297      5011            clr     _P1_7
162E           5012   ;        main.c:1089: Magnet = 0;
162E C295      5013            clr     _P1_5
1630           5014   ;        main.c:1090: PD_SCK = 0;
1630 C2A5      5015            clr     _P2_5
1632           5016   ;        main.c:1091: return;
1632 22        5017            ret
1633           5018   ;------------------------------------------------------------
1633           5019   ;Allocation info for local variables in function 'Move_back_ms'
1633           5020   ;------------------------------------------------------------
1633           5021   ;ms                        Allocated to registers r2 r3 
1633           5022   ;------------------------------------------------------------
1633           5023   ;        main.c:1094: void Move_back_ms(int ms){
1633           5024   ;        -----------------------------------------
1633           5025   ;         function Move_back_ms
1633           5026   ;        -----------------------------------------
1633           5027   _Move_back_ms:
1633 AA82      5028            mov     r2,dpl
1635 AB83      5029            mov     r3,dph
1637           5030   ;        main.c:1096: L_motor_dir = 1;
1637 905110    5031            mov     dptr,#_L_motor_dir
163A 7401      5032            mov     a,#0x01
163C F0        5033            movx    @dptr,a
163D           5034   ;        main.c:1097: R_motor_dir = 1;
163D 9050D0    5035            mov     dptr,#_R_motor_dir
1640 7401      5036            mov     a,#0x01
1642 F0        5037            movx    @dptr,a
1643           5038   ;        main.c:1099: pwm_left = 80;
1643 905190    5039            mov     dptr,#_pwm_left
1646 7450      5040            mov     a,#0x50
1648 F0        5041            movx    @dptr,a
1649           5042   ;        main.c:1100: pwm_right = 80*pwm_corr;
1649 C002      5043            push    ar2
164B C003      5044            push    ar3
164D 904E40    5045            mov     dptr,#_pwm_corr
1650 E0        5046            movx    a,@dptr
1651 C0E0      5047            push    acc
1653 A3        5048            inc     dptr
1654 E0        5049            movx    a,@dptr
1655 C0E0      5050            push    acc
1657 A3        5051            inc     dptr
1658 E0        5052            movx    a,@dptr
1659 C0E0      5053            push    acc
165B A3        5054            inc     dptr
165C E0        5055            movx    a,@dptr
165D C0E0      5056            push    acc
165F 900000    5057            mov     dptr,#0x0000
1662 75F0A0    5058            mov     b,#0xA0
1665 7442      5059            mov     a,#0x42
1667 120000    5060            lcall   ___fsmul
166A AC82      5061            mov     r4,dpl
166C AD83      5062            mov     r5,dph
166E AEF0      5063            mov     r6,b
1670 FF        5064            mov     r7,a
1671 E581      5065            mov     a,sp
1673 24FC      5066            add     a,#0xfc
1675 F581      5067            mov     sp,a
1677 8C82      5068            mov     dpl,r4
1679 8D83      5069            mov     dph,r5
167B 8EF0      5070            mov     b,r6
167D EF        5071            mov     a,r7
167E 120000    5072            lcall   ___fs2uchar
1681 E582      5073            mov     a,dpl
1683 D003      5074            pop     ar3
1685 D002      5075            pop     ar2
1687 905150    5076            mov     dptr,#_pwm_right
168A F0        5077            movx    @dptr,a
168B           5078   ;        main.c:1102: waitms(ms);
168B 8A82      5079            mov     dpl,r2
168D 8B83      5080            mov     dph,r3
168F 120000    5081            lcall   _waitms
1692           5082   ;        main.c:1104: L_motor_dir = 0;
1692 905110    5083            mov     dptr,#_L_motor_dir
1695           5084   ;        main.c:1105: R_motor_dir = 0;
1695           5085   ;        main.c:1106: pwm_left = 0;
1695           5086   ;        main.c:1107: pwm_right = 0;
1695 E4        5087            clr     a
1696 F0        5088            movx    @dptr,a
1697 9050D0    5089            mov     dptr,#_R_motor_dir
169A F0        5090            movx    @dptr,a
169B 905190    5091            mov     dptr,#_pwm_left
169E F0        5092            movx    @dptr,a
169F 905150    5093            mov     dptr,#_pwm_right
16A2 F0        5094            movx    @dptr,a
16A3           5095   ;        main.c:1108: return;
16A3 22        5096            ret
16A4           5097   ;------------------------------------------------------------
16A4           5098   ;Allocation info for local variables in function 'Right_angle'
16A4           5099   ;------------------------------------------------------------
16A4           5100   ;angle                     Allocated to registers r2 r3 
16A4           5101   ;------------------------------------------------------------
16A4           5102   ;        main.c:1112: void Right_angle(int angle){
16A4           5103   ;        -----------------------------------------
16A4           5104   ;         function Right_angle
16A4           5105   ;        -----------------------------------------
16A4           5106   _Right_angle:
16A4 AA82      5107            mov     r2,dpl
16A6 AB83      5108            mov     r3,dph
16A8           5109   ;        main.c:1114: L_motor_dir = 1;
16A8 905110    5110            mov     dptr,#_L_motor_dir
16AB 7401      5111            mov     a,#0x01
16AD F0        5112            movx    @dptr,a
16AE           5113   ;        main.c:1115: R_motor_dir = 0;
16AE 9050D0    5114            mov     dptr,#_R_motor_dir
16B1 E4        5115            clr     a
16B2 F0        5116            movx    @dptr,a
16B3           5117   ;        main.c:1116: pwm_left = 80;
16B3 905190    5118            mov     dptr,#_pwm_left
16B6 7450      5119            mov     a,#0x50
16B8 F0        5120            movx    @dptr,a
16B9           5121   ;        main.c:1117: pwm_right = 80 * pwm_corr;
16B9 C002      5122            push    ar2
16BB C003      5123            push    ar3
16BD 904E40    5124            mov     dptr,#_pwm_corr
16C0 E0        5125            movx    a,@dptr
16C1 C0E0      5126            push    acc
16C3 A3        5127            inc     dptr
16C4 E0        5128            movx    a,@dptr
16C5 C0E0      5129            push    acc
16C7 A3        5130            inc     dptr
16C8 E0        5131            movx    a,@dptr
16C9 C0E0      5132            push    acc
16CB A3        5133            inc     dptr
16CC E0        5134            movx    a,@dptr
16CD C0E0      5135            push    acc
16CF 900000    5136            mov     dptr,#0x0000
16D2 75F0A0    5137            mov     b,#0xA0
16D5 7442      5138            mov     a,#0x42
16D7 120000    5139            lcall   ___fsmul
16DA AC82      5140            mov     r4,dpl
16DC AD83      5141            mov     r5,dph
16DE AEF0      5142            mov     r6,b
16E0 FF        5143            mov     r7,a
16E1 E581      5144            mov     a,sp
16E3 24FC      5145            add     a,#0xfc
16E5 F581      5146            mov     sp,a
16E7 8C82      5147            mov     dpl,r4
16E9 8D83      5148            mov     dph,r5
16EB 8EF0      5149            mov     b,r6
16ED EF        5150            mov     a,r7
16EE 120000    5151            lcall   ___fs2uchar
16F1 E582      5152            mov     a,dpl
16F3 D003      5153            pop     ar3
16F5 D002      5154            pop     ar2
16F7 905150    5155            mov     dptr,#_pwm_right
16FA F0        5156            movx    @dptr,a
16FB           5157   ;        main.c:1119: waitms(angle);
16FB 8A82      5158            mov     dpl,r2
16FD 8B83      5159            mov     dph,r3
16FF 120000    5160            lcall   _waitms
1702           5161   ;        main.c:1121: L_motor_dir = 0;
1702 905110    5162            mov     dptr,#_L_motor_dir
1705           5163   ;        main.c:1122: R_motor_dir = 0;
1705           5164   ;        main.c:1123: pwm_left = 0;
1705           5165   ;        main.c:1124: pwm_right = 0;
1705 E4        5166            clr     a
1706 F0        5167            movx    @dptr,a
1707 9050D0    5168            mov     dptr,#_R_motor_dir
170A F0        5169            movx    @dptr,a
170B 905190    5170            mov     dptr,#_pwm_left
170E F0        5171            movx    @dptr,a
170F 905150    5172            mov     dptr,#_pwm_right
1712 F0        5173            movx    @dptr,a
1713           5174   ;        main.c:1125: return;
1713 22        5175            ret
1714           5176   ;------------------------------------------------------------
1714           5177   ;Allocation info for local variables in function 'Move_forward'
1714           5178   ;------------------------------------------------------------
1714           5179   ;------------------------------------------------------------
1714           5180   ;        main.c:1128: void Move_forward(){
1714           5181   ;        -----------------------------------------
1714           5182   ;         function Move_forward
1714           5183   ;        -----------------------------------------
1714           5184   _Move_forward:
1714           5185   ;        main.c:1130: L_motor_dir = 0;
1714 905110    5186            mov     dptr,#_L_motor_dir
1717           5187   ;        main.c:1131: R_motor_dir = 0;
1717 E4        5188            clr     a
1718 F0        5189            movx    @dptr,a
1719 9050D0    5190            mov     dptr,#_R_motor_dir
171C F0        5191            movx    @dptr,a
171D           5192   ;        main.c:1132: pwm_left = 60;
171D 905190    5193            mov     dptr,#_pwm_left
1720 743C      5194            mov     a,#0x3C
1722 F0        5195            movx    @dptr,a
1723           5196   ;        main.c:1133: pwm_right = 60 * pwm_corr;
1723 904E40    5197            mov     dptr,#_pwm_corr
1726 E0        5198            movx    a,@dptr
1727 C0E0      5199            push    acc
1729 A3        5200            inc     dptr
172A E0        5201            movx    a,@dptr
172B C0E0      5202            push    acc
172D A3        5203            inc     dptr
172E E0        5204            movx    a,@dptr
172F C0E0      5205            push    acc
1731 A3        5206            inc     dptr
1732 E0        5207            movx    a,@dptr
1733 C0E0      5208            push    acc
1735 900000    5209            mov     dptr,#0x0000
1738 75F070    5210            mov     b,#0x70
173B 7442      5211            mov     a,#0x42
173D 120000    5212            lcall   ___fsmul
1740 AA82      5213            mov     r2,dpl
1742 AB83      5214            mov     r3,dph
1744 ACF0      5215            mov     r4,b
1746 FD        5216            mov     r5,a
1747 E581      5217            mov     a,sp
1749 24FC      5218            add     a,#0xfc
174B F581      5219            mov     sp,a
174D 8A82      5220            mov     dpl,r2
174F 8B83      5221            mov     dph,r3
1751 8CF0      5222            mov     b,r4
1753 ED        5223            mov     a,r5
1754 120000    5224            lcall   ___fs2uchar
1757 E582      5225            mov     a,dpl
1759 905150    5226            mov     dptr,#_pwm_right
175C F0        5227            movx    @dptr,a
175D           5228   ;        main.c:1134: return;
175D 22        5229            ret
175E           5230   ;------------------------------------------------------------
175E           5231   ;Allocation info for local variables in function 'simple_rand'
175E           5232   ;------------------------------------------------------------
175E           5233   ;------------------------------------------------------------
175E           5234   ;        main.c:1137: unsigned int simple_rand() {
175E           5235   ;        -----------------------------------------
175E           5236   ;         function simple_rand
175E           5237   ;        -----------------------------------------
175E           5238   _simple_rand:
175E           5239   ;        main.c:1138: seed = (seed * 25173 + 13849) & 0xFFFF;  
175E 904E80    5240            mov     dptr,#_seed
1761 E0        5241            movx    a,@dptr
1762 F500      5242            mov     __mulint_PARM_2,a
1764 A3        5243            inc     dptr
1765 E0        5244            movx    a,@dptr
1766 F501      5245            mov     (__mulint_PARM_2 + 1),a
1768 906255    5246            mov     dptr,#0x6255
176B 120000    5247            lcall   __mulint
176E E582      5248            mov     a,dpl
1770 8583F0    5249            mov     b,dph
1773 904E80    5250            mov     dptr,#_seed
1776 2419      5251            add     a,#0x19
1778 F0        5252            movx    @dptr,a
1779 7436      5253            mov     a,#0x36
177B 35F0      5254            addc    a,b
177D A3        5255            inc     dptr
177E F0        5256            movx    @dptr,a
177F           5257   ;        main.c:1139: return seed;     
177F 904E80    5258            mov     dptr,#_seed
1782 E0        5259            movx    a,@dptr
1783 FA        5260            mov     r2,a
1784 A3        5261            inc     dptr
1785 E0        5262            movx    a,@dptr
1786 8A82      5263            mov     dpl,r2
1788 F583      5264            mov     dph,a
178A 22        5265            ret
178B           5266   ;------------------------------------------------------------
178B           5267   ;Allocation info for local variables in function 'get_random_90_250'
178B           5268   ;------------------------------------------------------------
178B           5269   ;------------------------------------------------------------
178B           5270   ;        main.c:1142: unsigned int get_random_90_250() {
178B           5271   ;        -----------------------------------------
178B           5272   ;         function get_random_90_250
178B           5273   ;        -----------------------------------------
178B           5274   _get_random_90_250:
178B           5275   ;        main.c:1143: return (simple_rand() % (250 - 85 + 1)) + 90;
178B 120000    5276            lcall   _simple_rand
178E 7500A6    5277            mov     __moduint_PARM_2,#0xA6
1791 E4        5278            clr     a
1792 F501      5279            mov     (__moduint_PARM_2 + 1),a
1794 120000    5280            lcall   __moduint
1797 E582      5281            mov     a,dpl
1799 8583F0    5282            mov     b,dph
179C 245A      5283            add     a,#0x5A
179E F582      5284            mov     dpl,a
17A0 E4        5285            clr     a
17A1 35F0      5286            addc    a,b
17A3 F583      5287            mov     dph,a
17A5 22        5288            ret
17A6           5289   ;------------------------------------------------------------
17A6           5290   ;Allocation info for local variables in function 'Read_angle'
17A6           5291   ;------------------------------------------------------------
17A6           5292   ;mag_x                     Allocated with name '_Read_angle_mag_x_1_229'
17A6           5293   ;mag_y                     Allocated with name '_Read_angle_mag_y_1_229'
17A6           5294   ;sum_x                     Allocated with name '_Read_angle_sum_x_1_229'
17A6           5295   ;sum_y                     Allocated with name '_Read_angle_sum_y_1_229'
17A6           5296   ;angle                     Allocated with name '_Read_angle_angle_1_229'
17A6           5297   ;------------------------------------------------------------
17A6           5298   ;        main.c:1146: float Read_angle(void)
17A6           5299   ;        -----------------------------------------
17A6           5300   ;         function Read_angle
17A6           5301   ;        -----------------------------------------
17A6           5302   _Read_angle:
17A6           5303   ;        main.c:1153: sum_x = 0.0; sum_y = 0.0;
17A6 90D0B8    5304            mov     dptr,#_Read_angle_sum_x_1_229
17A9 E4        5305            clr     a
17AA F0        5306            movx    @dptr,a
17AB A3        5307            inc     dptr
17AC F0        5308            movx    @dptr,a
17AD A3        5309            inc     dptr
17AE F0        5310            movx    @dptr,a
17AF A3        5311            inc     dptr
17B0 F0        5312            movx    @dptr,a
17B1 90D108    5313            mov     dptr,#_Read_angle_sum_y_1_229
17B4 F0        5314            movx    @dptr,a
17B5 A3        5315            inc     dptr
17B6           5316   ;        main.c:1156: for (i = 0; i < 10; i++){
17B6 E4        5317            clr     a
17B7 F0        5318            movx    @dptr,a
17B8 A3        5319            inc     dptr
17B9 F0        5320            movx    @dptr,a
17BA A3        5321            inc     dptr
17BB F0        5322            movx    @dptr,a
17BC 905250    5323            mov     dptr,#_i
17BF F0        5324            movx    @dptr,a
17C0 A3        5325            inc     dptr
17C1 F0        5326            movx    @dptr,a
17C2           5327   L042005?:
17C2 905250    5328            mov     dptr,#_i
17C5 E0        5329            movx    a,@dptr
17C6 FA        5330            mov     r2,a
17C7 A3        5331            inc     dptr
17C8 E0        5332            movx    a,@dptr
17C9 FB        5333            mov     r3,a
17CA C3        5334            clr     c
17CB EA        5335            mov     a,r2
17CC 940A      5336            subb    a,#0x0A
17CE EB        5337            mov     a,r3
17CF 9400      5338            subb    a,#0x00
17D1 4000      5339            jc      L042015?
17D3 020000    5340            ljmp    L042008?
17D6           5341   L042015?:
17D6           5342   ;        main.c:1157: BMM150_Read_Data(&mag_x, &mag_y);
17D6 75B068    5343            mov     _BMM150_Read_Data_PARM_2,#_Read_angle_mag_y_1_229
17D9 75B1D0    5344            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_Read_angle_mag_y_1_229 >> 8)
17DC 75B200    5345            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
17DF 90D018    5346            mov     dptr,#_Read_angle_mag_x_1_229
17E2 75F000    5347            mov     b,#0x00
17E5 120000    5348            lcall   _BMM150_Read_Data
17E8           5349   ;        main.c:1158: sum_x += (float)mag_x; 
17E8 90D018    5350            mov     dptr,#_Read_angle_mag_x_1_229
17EB E0        5351            movx    a,@dptr
17EC FA        5352            mov     r2,a
17ED A3        5353            inc     dptr
17EE E0        5354            movx    a,@dptr
17EF FB        5355            mov     r3,a
17F0 8A82      5356            mov     dpl,r2
17F2 8B83      5357            mov     dph,r3
17F4 120000    5358            lcall   ___sint2fs
17F7 AA82      5359            mov     r2,dpl
17F9 AB83      5360            mov     r3,dph
17FB ACF0      5361            mov     r4,b
17FD FD        5362            mov     r5,a
17FE 90D0B8    5363            mov     dptr,#_Read_angle_sum_x_1_229
1801 E0        5364            movx    a,@dptr
1802 FE        5365            mov     r6,a
1803 A3        5366            inc     dptr
1804 E0        5367            movx    a,@dptr
1805 FF        5368            mov     r7,a
1806 A3        5369            inc     dptr
1807 E0        5370            movx    a,@dptr
1808 F8        5371            mov     r0,a
1809 A3        5372            inc     dptr
180A E0        5373            movx    a,@dptr
180B F9        5374            mov     r1,a
180C C002      5375            push    ar2
180E C003      5376            push    ar3
1810 C004      5377            push    ar4
1812 C005      5378            push    ar5
1814 8E82      5379            mov     dpl,r6
1816 8F83      5380            mov     dph,r7
1818 88F0      5381            mov     b,r0
181A E9        5382            mov     a,r1
181B 120000    5383            lcall   ___fsadd
181E AA82      5384            mov     r2,dpl
1820 AB83      5385            mov     r3,dph
1822 ACF0      5386            mov     r4,b
1824 FD        5387            mov     r5,a
1825 E581      5388            mov     a,sp
1827 24FC      5389            add     a,#0xfc
1829 F581      5390            mov     sp,a
182B 90D0B8    5391            mov     dptr,#_Read_angle_sum_x_1_229
182E EA        5392            mov     a,r2
182F F0        5393            movx    @dptr,a
1830 A3        5394            inc     dptr
1831 EB        5395            mov     a,r3
1832 F0        5396            movx    @dptr,a
1833 A3        5397            inc     dptr
1834 EC        5398            mov     a,r4
1835 F0        5399            movx    @dptr,a
1836 A3        5400            inc     dptr
1837 ED        5401            mov     a,r5
1838 F0        5402            movx    @dptr,a
1839           5403   ;        main.c:1159: sum_y += (float)mag_y; 
1839 90D068    5404            mov     dptr,#_Read_angle_mag_y_1_229
183C E0        5405            movx    a,@dptr
183D FA        5406            mov     r2,a
183E A3        5407            inc     dptr
183F E0        5408            movx    a,@dptr
1840 FB        5409            mov     r3,a
1841 8A82      5410            mov     dpl,r2
1843 8B83      5411            mov     dph,r3
1845 120000    5412            lcall   ___sint2fs
1848 AA82      5413            mov     r2,dpl
184A AB83      5414            mov     r3,dph
184C ACF0      5415            mov     r4,b
184E FD        5416            mov     r5,a
184F 90D108    5417            mov     dptr,#_Read_angle_sum_y_1_229
1852 E0        5418            movx    a,@dptr
1853 FE        5419            mov     r6,a
1854 A3        5420            inc     dptr
1855 E0        5421            movx    a,@dptr
1856 FF        5422            mov     r7,a
1857 A3        5423            inc     dptr
1858 E0        5424            movx    a,@dptr
1859 F8        5425            mov     r0,a
185A A3        5426            inc     dptr
185B E0        5427            movx    a,@dptr
185C F9        5428            mov     r1,a
185D C002      5429            push    ar2
185F C003      5430            push    ar3
1861 C004      5431            push    ar4
1863 C005      5432            push    ar5
1865 8E82      5433            mov     dpl,r6
1867 8F83      5434            mov     dph,r7
1869 88F0      5435            mov     b,r0
186B E9        5436            mov     a,r1
186C 120000    5437            lcall   ___fsadd
186F AA82      5438            mov     r2,dpl
1871 AB83      5439            mov     r3,dph
1873 ACF0      5440            mov     r4,b
1875 FD        5441            mov     r5,a
1876 E581      5442            mov     a,sp
1878 24FC      5443            add     a,#0xfc
187A F581      5444            mov     sp,a
187C 90D108    5445            mov     dptr,#_Read_angle_sum_y_1_229
187F EA        5446            mov     a,r2
1880 F0        5447            movx    @dptr,a
1881 A3        5448            inc     dptr
1882 EB        5449            mov     a,r3
1883 F0        5450            movx    @dptr,a
1884 A3        5451            inc     dptr
1885 EC        5452            mov     a,r4
1886 F0        5453            movx    @dptr,a
1887 A3        5454            inc     dptr
1888 ED        5455            mov     a,r5
1889 F0        5456            movx    @dptr,a
188A           5457   ;        main.c:1160: Timer3us(1);
188A 758201    5458            mov     dpl,#0x01
188D 120000    5459            lcall   _Timer3us
1890           5460   ;        main.c:1156: for (i = 0; i < 10; i++){
1890 905250    5461            mov     dptr,#_i
1893 E0        5462            movx    a,@dptr
1894 2401      5463            add     a,#0x01
1896 F0        5464            movx    @dptr,a
1897 A3        5465            inc     dptr
1898 E0        5466            movx    a,@dptr
1899 3400      5467            addc    a,#0x00
189B F0        5468            movx    @dptr,a
189C 020000    5469            ljmp    L042005?
189F           5470   L042008?:
189F           5471   ;        main.c:1162: angle = atan2f(sum_y, sum_x) * 180.0 / M_PI;
189F 90D108    5472            mov     dptr,#_Read_angle_sum_y_1_229
18A2 E0        5473            movx    a,@dptr
18A3 FA        5474            mov     r2,a
18A4 A3        5475            inc     dptr
18A5 E0        5476            movx    a,@dptr
18A6 FB        5477            mov     r3,a
18A7 A3        5478            inc     dptr
18A8 E0        5479            movx    a,@dptr
18A9 FC        5480            mov     r4,a
18AA A3        5481            inc     dptr
18AB E0        5482            movx    a,@dptr
18AC FD        5483            mov     r5,a
18AD 90D0B8    5484            mov     dptr,#_Read_angle_sum_x_1_229
18B0 E0        5485            movx    a,@dptr
18B1 F500      5486            mov     _atan2f_PARM_2,a
18B3 A3        5487            inc     dptr
18B4 E0        5488            movx    a,@dptr
18B5 F501      5489            mov     (_atan2f_PARM_2 + 1),a
18B7 A3        5490            inc     dptr
18B8 E0        5491            movx    a,@dptr
18B9 F502      5492            mov     (_atan2f_PARM_2 + 2),a
18BB A3        5493            inc     dptr
18BC E0        5494            movx    a,@dptr
18BD F503      5495            mov     (_atan2f_PARM_2 + 3),a
18BF 8A82      5496            mov     dpl,r2
18C1 8B83      5497            mov     dph,r3
18C3 8CF0      5498            mov     b,r4
18C5 ED        5499            mov     a,r5
18C6 120000    5500            lcall   _atan2f
18C9 AA82      5501            mov     r2,dpl
18CB AB83      5502            mov     r3,dph
18CD ACF0      5503            mov     r4,b
18CF FD        5504            mov     r5,a
18D0 C002      5505            push    ar2
18D2 C003      5506            push    ar3
18D4 C004      5507            push    ar4
18D6 C005      5508            push    ar5
18D8 900000    5509            mov     dptr,#0x0000
18DB 75F034    5510            mov     b,#0x34
18DE 7443      5511            mov     a,#0x43
18E0 120000    5512            lcall   ___fsmul
18E3 AA82      5513            mov     r2,dpl
18E5 AB83      5514            mov     r3,dph
18E7 ACF0      5515            mov     r4,b
18E9 FD        5516            mov     r5,a
18EA E581      5517            mov     a,sp
18EC 24FC      5518            add     a,#0xfc
18EE F581      5519            mov     sp,a
18F0 74DB      5520            mov     a,#0xDB
18F2 C0E0      5521            push    acc
18F4 740F      5522            mov     a,#0x0F
18F6 C0E0      5523            push    acc
18F8 7449      5524            mov     a,#0x49
18FA C0E0      5525            push    acc
18FC 7440      5526            mov     a,#0x40
18FE C0E0      5527            push    acc
1900 8A82      5528            mov     dpl,r2
1902 8B83      5529            mov     dph,r3
1904 8CF0      5530            mov     b,r4
1906 ED        5531            mov     a,r5
1907 120000    5532            lcall   ___fsdiv
190A AA82      5533            mov     r2,dpl
190C AB83      5534            mov     r3,dph
190E ACF0      5535            mov     r4,b
1910 FD        5536            mov     r5,a
1911 E581      5537            mov     a,sp
1913 24FC      5538            add     a,#0xfc
1915 F581      5539            mov     sp,a
1917 90D158    5540            mov     dptr,#_Read_angle_angle_1_229
191A EA        5541            mov     a,r2
191B F0        5542            movx    @dptr,a
191C A3        5543            inc     dptr
191D EB        5544            mov     a,r3
191E F0        5545            movx    @dptr,a
191F A3        5546            inc     dptr
1920 EC        5547            mov     a,r4
1921 F0        5548            movx    @dptr,a
1922 A3        5549            inc     dptr
1923 ED        5550            mov     a,r5
1924 F0        5551            movx    @dptr,a
1925           5552   ;        main.c:1163: if (angle < 0.0) angle += 360.0; 
1925 C002      5553            push    ar2
1927 C003      5554            push    ar3
1929 C004      5555            push    ar4
192B C005      5556            push    ar5
192D E4        5557            clr     a
192E C0E0      5558            push    acc
1930 C0E0      5559            push    acc
1932 C0E0      5560            push    acc
1934 C0E0      5561            push    acc
1936 8A82      5562            mov     dpl,r2
1938 8B83      5563            mov     dph,r3
193A 8CF0      5564            mov     b,r4
193C ED        5565            mov     a,r5
193D 120000    5566            lcall   ___fslt
1940 AE82      5567            mov     r6,dpl
1942 E581      5568            mov     a,sp
1944 24FC      5569            add     a,#0xfc
1946 F581      5570            mov     sp,a
1948 D005      5571            pop     ar5
194A D004      5572            pop     ar4
194C D003      5573            pop     ar3
194E D002      5574            pop     ar2
1950 EE        5575            mov     a,r6
1951 6000      5576            jz      L042002?
1953 E4        5577            clr     a
1954 C0E0      5578            push    acc
1956 C0E0      5579            push    acc
1958 74B4      5580            mov     a,#0xB4
195A C0E0      5581            push    acc
195C 7443      5582            mov     a,#0x43
195E C0E0      5583            push    acc
1960 8A82      5584            mov     dpl,r2
1962 8B83      5585            mov     dph,r3
1964 8CF0      5586            mov     b,r4
1966 ED        5587            mov     a,r5
1967 120000    5588            lcall   ___fsadd
196A AA82      5589            mov     r2,dpl
196C AB83      5590            mov     r3,dph
196E ACF0      5591            mov     r4,b
1970 FD        5592            mov     r5,a
1971 E581      5593            mov     a,sp
1973 24FC      5594            add     a,#0xfc
1975 F581      5595            mov     sp,a
1977 90D158    5596            mov     dptr,#_Read_angle_angle_1_229
197A EA        5597            mov     a,r2
197B F0        5598            movx    @dptr,a
197C A3        5599            inc     dptr
197D EB        5600            mov     a,r3
197E F0        5601            movx    @dptr,a
197F A3        5602            inc     dptr
1980 EC        5603            mov     a,r4
1981 F0        5604            movx    @dptr,a
1982 A3        5605            inc     dptr
1983 ED        5606            mov     a,r5
1984 F0        5607            movx    @dptr,a
1985           5608   L042002?:
1985           5609   ;        main.c:1164: if (angle > 360.0) angle -= 360.0; 
1985 90D158    5610            mov     dptr,#_Read_angle_angle_1_229
1988 E0        5611            movx    a,@dptr
1989 FA        5612            mov     r2,a
198A A3        5613            inc     dptr
198B E0        5614            movx    a,@dptr
198C FB        5615            mov     r3,a
198D A3        5616            inc     dptr
198E E0        5617            movx    a,@dptr
198F FC        5618            mov     r4,a
1990 A3        5619            inc     dptr
1991 E0        5620            movx    a,@dptr
1992 FD        5621            mov     r5,a
1993 C002      5622            push    ar2
1995 C003      5623            push    ar3
1997 C004      5624            push    ar4
1999 C005      5625            push    ar5
199B E4        5626            clr     a
199C C0E0      5627            push    acc
199E C0E0      5628            push    acc
19A0 74B4      5629            mov     a,#0xB4
19A2 C0E0      5630            push    acc
19A4 7443      5631            mov     a,#0x43
19A6 C0E0      5632            push    acc
19A8 8A82      5633            mov     dpl,r2
19AA 8B83      5634            mov     dph,r3
19AC 8CF0      5635            mov     b,r4
19AE ED        5636            mov     a,r5
19AF 120000    5637            lcall   ___fsgt
19B2 AE82      5638            mov     r6,dpl
19B4 E581      5639            mov     a,sp
19B6 24FC      5640            add     a,#0xfc
19B8 F581      5641            mov     sp,a
19BA D005      5642            pop     ar5
19BC D004      5643            pop     ar4
19BE D003      5644            pop     ar3
19C0 D002      5645            pop     ar2
19C2 EE        5646            mov     a,r6
19C3 6000      5647            jz      L042004?
19C5 E4        5648            clr     a
19C6 C0E0      5649            push    acc
19C8 C0E0      5650            push    acc
19CA 74B4      5651            mov     a,#0xB4
19CC C0E0      5652            push    acc
19CE 7443      5653            mov     a,#0x43
19D0 C0E0      5654            push    acc
19D2 8A82      5655            mov     dpl,r2
19D4 8B83      5656            mov     dph,r3
19D6 8CF0      5657            mov     b,r4
19D8 ED        5658            mov     a,r5
19D9 120000    5659            lcall   ___fssub
19DC AA82      5660            mov     r2,dpl
19DE AB83      5661            mov     r3,dph
19E0 ACF0      5662            mov     r4,b
19E2 FD        5663            mov     r5,a
19E3 E581      5664            mov     a,sp
19E5 24FC      5665            add     a,#0xfc
19E7 F581      5666            mov     sp,a
19E9 90D158    5667            mov     dptr,#_Read_angle_angle_1_229
19EC EA        5668            mov     a,r2
19ED F0        5669            movx    @dptr,a
19EE A3        5670            inc     dptr
19EF EB        5671            mov     a,r3
19F0 F0        5672            movx    @dptr,a
19F1 A3        5673            inc     dptr
19F2 EC        5674            mov     a,r4
19F3 F0        5675            movx    @dptr,a
19F4 A3        5676            inc     dptr
19F5 ED        5677            mov     a,r5
19F6 F0        5678            movx    @dptr,a
19F7           5679   L042004?:
19F7           5680   ;        main.c:1165: return angle; 
19F7 90D158    5681            mov     dptr,#_Read_angle_angle_1_229
19FA E0        5682            movx    a,@dptr
19FB FA        5683            mov     r2,a
19FC A3        5684            inc     dptr
19FD E0        5685            movx    a,@dptr
19FE FB        5686            mov     r3,a
19FF A3        5687            inc     dptr
1A00 E0        5688            movx    a,@dptr
1A01 FC        5689            mov     r4,a
1A02 A3        5690            inc     dptr
1A03 E0        5691            movx    a,@dptr
1A04 8A82      5692            mov     dpl,r2
1A06 8B83      5693            mov     dph,r3
1A08 8CF0      5694            mov     b,r4
1A0A 22        5695            ret
1A0B           5696   ;------------------------------------------------------------
1A0B           5697   ;Allocation info for local variables in function 'Auto_mode_slave'
1A0B           5698   ;------------------------------------------------------------
1A0B           5699   ;sloc0                     Allocated with name '_Auto_mode_slave_sloc0_1_0'
1A0B           5700   ;count                     Allocated with name '_Auto_mode_slave_count_1_231'
1A0B           5701   ;command                   Allocated with name '_Auto_mode_slave_command_1_231'
1A0B           5702   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_231'
1A0B           5703   ;bound                     Allocated with name '_Auto_mode_slave_bound_1_231'
1A0B           5704   ;c                         Allocated with name '_Auto_mode_slave_c_1_231'
1A0B           5705   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_231'
1A0B           5706   ;angle                     Allocated with name '_Auto_mode_slave_angle_1_231'
1A0B           5707   ;------------------------------------------------------------
1A0B           5708   ;        main.c:1168: void Auto_mode_slave(){
1A0B           5709   ;        -----------------------------------------
1A0B           5710   ;         function Auto_mode_slave
1A0B           5711   ;        -----------------------------------------
1A0B           5712   _Auto_mode_slave:
1A0B           5713   ;        main.c:1171: xdata int state_res = 1;
1A0B 90D208    5714            mov     dptr,#_Auto_mode_slave_state_res_1_231
1A0E 7401      5715            mov     a,#0x01
1A10 F0        5716            movx    @dptr,a
1A11 E4        5717            clr     a
1A12 A3        5718            inc     dptr
1A13 F0        5719            movx    @dptr,a
1A14           5720   ;        main.c:1177: curr_angle = Read_angle();
1A14 120000    5721            lcall   _Read_angle
1A17 AA82      5722            mov     r2,dpl
1A19 AB83      5723            mov     r3,dph
1A1B ACF0      5724            mov     r4,b
1A1D FD        5725            mov     r5,a
1A1E 904E00    5726            mov     dptr,#_curr_angle
1A21 EA        5727            mov     a,r2
1A22 F0        5728            movx    @dptr,a
1A23 A3        5729            inc     dptr
1A24 EB        5730            mov     a,r3
1A25 F0        5731            movx    @dptr,a
1A26 A3        5732            inc     dptr
1A27 EC        5733            mov     a,r4
1A28 F0        5734            movx    @dptr,a
1A29 A3        5735            inc     dptr
1A2A ED        5736            mov     a,r5
1A2B F0        5737            movx    @dptr,a
1A2C           5738   ;        main.c:1179: while(count < 5 && state_res){
1A2C E4        5739            clr     a
1A2D F5A8      5740            mov     _Auto_mode_slave_sloc0_1_0,a
1A2F F5A9      5741            mov     (_Auto_mode_slave_sloc0_1_0 + 1),a
1A31           5742   L043020?:
1A31 C3        5743            clr     c
1A32 E5A8      5744            mov     a,_Auto_mode_slave_sloc0_1_0
1A34 9405      5745            subb    a,#0x05
1A36 E5A9      5746            mov     a,(_Auto_mode_slave_sloc0_1_0 + 1)
1A38 6480      5747            xrl     a,#0x80
1A3A 9480      5748            subb    a,#0x80
1A3C 4000      5749            jc      L043049?
1A3E 020000    5750            ljmp    L043022?
1A41           5751   L043049?:
1A41 90D208    5752            mov     dptr,#_Auto_mode_slave_state_res_1_231
1A44 E0        5753            movx    a,@dptr
1A45 FC        5754            mov     r4,a
1A46 A3        5755            inc     dptr
1A47 E0        5756            movx    a,@dptr
1A48 FD        5757            mov     r5,a
1A49 4C        5758            orl     a,r4
1A4A 7000      5759            jnz     L043050?
1A4C 020000    5760            ljmp    L043022?
1A4F           5761   L043050?:
1A4F           5762   ;        main.c:1181: if(RXU1()){
1A4F C004      5763            push    ar4
1A51 C005      5764            push    ar5
1A53 120000    5765            lcall   _RXU1
1A56 D005      5766            pop     ar5
1A58 D004      5767            pop     ar4
1A5A 4000      5768            jc      L043051?
1A5C 020000    5769            ljmp    L043012?
1A5F           5770   L043051?:
1A5F           5771   ;        main.c:1182: c=getchar1();      
1A5F C004      5772            push    ar4
1A61 C005      5773            push    ar5
1A63 120000    5774            lcall   _getchar1
1A66 AE82      5775            mov     r6,dpl
1A68 D005      5776            pop     ar5
1A6A D004      5777            pop     ar4
1A6C           5778   ;        main.c:1183: if(c=='!'){
1A6C BE2140    5779            cjne    r6,#0x21,L043052?
1A6F 8000      5780            sjmp    L043053?
1A71           5781   L043052?:
1A71 020000    5782            ljmp    L043009?
1A74           5783   L043053?:
1A74           5784   ;        main.c:1184: getstr1(buff, sizeof(buff)-1);
1A74 756013    5785            mov     _getstr1_PARM_2,#0x13
1A77 9056D0    5786            mov     dptr,#_buff
1A7A 75F040    5787            mov     b,#0x40
1A7D 120000    5788            lcall   _getstr1
1A80           5789   ;        main.c:1185: if(strlen(buff)==11){
1A80 9056D0    5790            mov     dptr,#_buff
1A83 75F040    5791            mov     b,#0x40
1A86 120000    5792            lcall   _strlen
1A89 AF82      5793            mov     r7,dpl
1A8B AA83      5794            mov     r2,dph
1A8D BF0B40    5795            cjne    r7,#0x0B,L043054?
1A90 BA0040    5796            cjne    r2,#0x00,L043054?
1A93 8000      5797            sjmp    L043055?
1A95           5798   L043054?:
1A95 020000    5799            ljmp    L043012?
1A98           5800   L043055?:
1A98           5801   ;        main.c:1187: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
1A98 74A8      5802            mov     a,#_Auto_mode_slave_command_1_231
1A9A C0E0      5803            push    acc
1A9C 74D1      5804            mov     a,#(_Auto_mode_slave_command_1_231 >> 8)
1A9E C0E0      5805            push    acc
1AA0 E4        5806            clr     a
1AA1 C0E0      5807            push    acc
1AA3 7458      5808            mov     a,#_Auto_mode_slave_dummy_1_231
1AA5 C0E0      5809            push    acc
1AA7 74D2      5810            mov     a,#(_Auto_mode_slave_dummy_1_231 >> 8)
1AA9 C0E0      5811            push    acc
1AAB E4        5812            clr     a
1AAC C0E0      5813            push    acc
1AAE 7458      5814            mov     a,#_Auto_mode_slave_dummy_1_231
1AB0 C0E0      5815            push    acc
1AB2 74D2      5816            mov     a,#(_Auto_mode_slave_dummy_1_231 >> 8)
1AB4 C0E0      5817            push    acc
1AB6 E4        5818            clr     a
1AB7 C0E0      5819            push    acc
1AB9 7458      5820            mov     a,#_Auto_mode_slave_dummy_1_231
1ABB C0E0      5821            push    acc
1ABD 74D2      5822            mov     a,#(_Auto_mode_slave_dummy_1_231 >> 8)
1ABF C0E0      5823            push    acc
1AC1 E4        5824            clr     a
1AC2 C0E0      5825            push    acc
1AC4 74C0      5826            mov     a,#__str_5
1AC6 C0E0      5827            push    acc
1AC8 7417      5828            mov     a,#(__str_5 >> 8)
1ACA C0E0      5829            push    acc
1ACC 7480      5830            mov     a,#0x80
1ACE C0E0      5831            push    acc
1AD0 74D0      5832            mov     a,#_buff
1AD2 C0E0      5833            push    acc
1AD4 7456      5834            mov     a,#(_buff >> 8)
1AD6 C0E0      5835            push    acc
1AD8 7440      5836            mov     a,#0x40
1ADA C0E0      5837            push    acc
1ADC 120000    5838            lcall   _sscanf
1ADF E581      5839            mov     a,sp
1AE1 24EE      5840            add     a,#0xee
1AE3 F581      5841            mov     sp,a
1AE5           5842   ;        main.c:1188: if(command) state_res = 1;
1AE5 90D1A8    5843            mov     dptr,#_Auto_mode_slave_command_1_231
1AE8 E0        5844            movx    a,@dptr
1AE9 FF        5845            mov     r7,a
1AEA A3        5846            inc     dptr
1AEB E0        5847            movx    a,@dptr
1AEC FA        5848            mov     r2,a
1AED 4F        5849            orl     a,r7
1AEE 6000      5850            jz      L043002?
1AF0 90D208    5851            mov     dptr,#_Auto_mode_slave_state_res_1_231
1AF3 7401      5852            mov     a,#0x01
1AF5 F0        5853            movx    @dptr,a
1AF6 E4        5854            clr     a
1AF7 A3        5855            inc     dptr
1AF8 F0        5856            movx    @dptr,a
1AF9 020000    5857            ljmp    L043012?
1AFC           5858   L043002?:
1AFC           5859   ;        main.c:1189: else state_res = 0;
1AFC 90D208    5860            mov     dptr,#_Auto_mode_slave_state_res_1_231
1AFF E4        5861            clr     a
1B00 F0        5862            movx    @dptr,a
1B01 A3        5863            inc     dptr
1B02 F0        5864            movx    @dptr,a
1B03 8000      5865            sjmp    L043012?
1B05           5866   L043009?:
1B05           5867   ;        main.c:1192: else if(c=='@'){
1B05 BE4000    5868            cjne    r6,#0x40,L043012?
1B08           5869   ;        main.c:1193: sprintf(buff, "%01d,%02d,%ld,%05d,%03d\n", state_res, count,freq100, 0, (int)curr_angle);
1B08 904E00    5870            mov     dptr,#_curr_angle
1B0B E0        5871            movx    a,@dptr
1B0C FA        5872            mov     r2,a
1B0D A3        5873            inc     dptr
1B0E E0        5874            movx    a,@dptr
1B0F FB        5875            mov     r3,a
1B10 A3        5876            inc     dptr
1B11 E0        5877            movx    a,@dptr
1B12 FE        5878            mov     r6,a
1B13 A3        5879            inc     dptr
1B14 E0        5880            movx    a,@dptr
1B15 8A82      5881            mov     dpl,r2
1B17 8B83      5882            mov     dph,r3
1B19 8EF0      5883            mov     b,r6
1B1B C004      5884            push    ar4
1B1D C005      5885            push    ar5
1B1F 120000    5886            lcall   ___fs2sint
1B22 AA82      5887            mov     r2,dpl
1B24 AB83      5888            mov     r3,dph
1B26 D005      5889            pop     ar5
1B28 D004      5890            pop     ar4
1B2A C002      5891            push    ar2
1B2C C003      5892            push    ar3
1B2E E4        5893            clr     a
1B2F C0E0      5894            push    acc
1B31 C0E0      5895            push    acc
1B33 905690    5896            mov     dptr,#_freq100
1B36 E0        5897            movx    a,@dptr
1B37 C0E0      5898            push    acc
1B39 A3        5899            inc     dptr
1B3A E0        5900            movx    a,@dptr
1B3B C0E0      5901            push    acc
1B3D A3        5902            inc     dptr
1B3E E0        5903            movx    a,@dptr
1B3F C0E0      5904            push    acc
1B41 A3        5905            inc     dptr
1B42 E0        5906            movx    a,@dptr
1B43 C0E0      5907            push    acc
1B45 C0A8      5908            push    _Auto_mode_slave_sloc0_1_0
1B47 C0A9      5909            push    (_Auto_mode_slave_sloc0_1_0 + 1)
1B49 C004      5910            push    ar4
1B4B C005      5911            push    ar5
1B4D 7480      5912            mov     a,#__str_6
1B4F C0E0      5913            push    acc
1B51 7418      5914            mov     a,#(__str_6 >> 8)
1B53 C0E0      5915            push    acc
1B55 7480      5916            mov     a,#0x80
1B57 C0E0      5917            push    acc
1B59 74D0      5918            mov     a,#_buff
1B5B C0E0      5919            push    acc
1B5D 7456      5920            mov     a,#(_buff >> 8)
1B5F C0E0      5921            push    acc
1B61 7440      5922            mov     a,#0x40
1B63 C0E0      5923            push    acc
1B65 120000    5924            lcall   _sprintf
1B68 E581      5925            mov     a,sp
1B6A 24EE      5926            add     a,#0xee
1B6C F581      5927            mov     sp,a
1B6E           5928   ;        main.c:1194: waitms(5); 
1B6E 900005    5929            mov     dptr,#0x0005
1B71 120000    5930            lcall   _waitms
1B74           5931   ;        main.c:1195: sendstr1(buff);
1B74 9056D0    5932            mov     dptr,#_buff
1B77 75F040    5933            mov     b,#0x40
1B7A 120000    5934            lcall   _sendstr1
1B7D           5935   L043012?:
1B7D           5936   ;        main.c:1199: Move_forward();
1B7D 120000    5937            lcall   _Move_forward
1B80           5938   ;        main.c:1201: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
1B80 758209    5939            mov     dpl,#0x09
1B83 120000    5940            lcall   _ADC_at_Pin
1B86 E582      5941            mov     a,dpl
1B88 8583F0    5942            mov     b,dph
1B8B 905650    5943            mov     dptr,#_d1
1B8E F0        5944            movx    @dptr,a
1B8F A3        5945            inc     dptr
1B90 E5F0      5946            mov     a,b
1B92 F0        5947            movx    @dptr,a
1B93           5948   ;        main.c:1202: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
1B93 75820A    5949            mov     dpl,#0x0A
1B96 120000    5950            lcall   _ADC_at_Pin
1B99 AA82      5951            mov     r2,dpl
1B9B AB83      5952            mov     r3,dph
1B9D 905610    5953            mov     dptr,#_d2
1BA0 EA        5954            mov     a,r2
1BA1 F0        5955            movx    @dptr,a
1BA2 A3        5956            inc     dptr
1BA3 EB        5957            mov     a,r3
1BA4 F0        5958            movx    @dptr,a
1BA5           5959   ;        main.c:1203: bound = check_bound(d1,d2);
1BA5 905650    5960            mov     dptr,#_d1
1BA8 E0        5961            movx    a,@dptr
1BA9 FC        5962            mov     r4,a
1BAA A3        5963            inc     dptr
1BAB E0        5964            movx    a,@dptr
1BAC FD        5965            mov     r5,a
1BAD 8A90      5966            mov     _check_bound_PARM_2,r2
1BAF 8B91      5967            mov     (_check_bound_PARM_2 + 1),r3
1BB1 8C82      5968            mov     dpl,r4
1BB3 8D83      5969            mov     dph,r5
1BB5 120000    5970            lcall   _check_bound
1BB8 AA82      5971            mov     r2,dpl
1BBA AB83      5972            mov     r3,dph
1BBC           5973   ;        main.c:1206: if (freq100>=5360){
1BBC 905690    5974            mov     dptr,#_freq100
1BBF E0        5975            movx    a,@dptr
1BC0 FC        5976            mov     r4,a
1BC1 A3        5977            inc     dptr
1BC2 E0        5978            movx    a,@dptr
1BC3 FD        5979            mov     r5,a
1BC4 A3        5980            inc     dptr
1BC5 E0        5981            movx    a,@dptr
1BC6 FE        5982            mov     r6,a
1BC7 A3        5983            inc     dptr
1BC8 E0        5984            movx    a,@dptr
1BC9 FF        5985            mov     r7,a
1BCA C3        5986            clr     c
1BCB EC        5987            mov     a,r4
1BCC 94F0      5988            subb    a,#0xF0
1BCE ED        5989            mov     a,r5
1BCF 9414      5990            subb    a,#0x14
1BD1 EE        5991            mov     a,r6
1BD2 9400      5992            subb    a,#0x00
1BD4 EF        5993            mov     a,r7
1BD5 6480      5994            xrl     a,#0x80
1BD7 9480      5995            subb    a,#0x80
1BD9 4000      5996            jc      L043014?
1BDB           5997   ;        main.c:1207: mea_yes = 0;
1BDB 904D00    5998            mov     dptr,#_mea_yes
1BDE E4        5999            clr     a
1BDF F0        6000            movx    @dptr,a
1BE0           6001   ;        main.c:1208: Move_back_ms(100);
1BE0 900064    6002            mov     dptr,#0x0064
1BE3 C002      6003            push    ar2
1BE5 C003      6004            push    ar3
1BE7 120000    6005            lcall   _Move_back_ms
1BEA           6006   ;        main.c:1209: waitms(100);
1BEA 900064    6007            mov     dptr,#0x0064
1BED 120000    6008            lcall   _waitms
1BF0           6009   ;        main.c:1210: servo_pick();
1BF0 120000    6010            lcall   _servo_pick
1BF3 D003      6011            pop     ar3
1BF5 D002      6012            pop     ar2
1BF7           6013   ;        main.c:1211: count++;
1BF7 05A8      6014            inc     _Auto_mode_slave_sloc0_1_0
1BF9 E4        6015            clr     a
1BFA B5A840    6016            cjne    a,_Auto_mode_slave_sloc0_1_0,L043060?
1BFD 05A9      6017            inc     (_Auto_mode_slave_sloc0_1_0 + 1)
1BFF           6018   L043060?:
1BFF           6019   ;        main.c:1212: waitms(100);
1BFF 900064    6020            mov     dptr,#0x0064
1C02 C002      6021            push    ar2
1C04 C003      6022            push    ar3
1C06 120000    6023            lcall   _waitms
1C09           6024   ;        main.c:1213: mea_yes = 1;
1C09 904D00    6025            mov     dptr,#_mea_yes
1C0C 7401      6026            mov     a,#0x01
1C0E F0        6027            movx    @dptr,a
1C0F           6028   ;        main.c:1214: Move_forward();
1C0F 120000    6029            lcall   _Move_forward
1C12 D003      6030            pop     ar3
1C14 D002      6031            pop     ar2
1C16           6032   L043014?:
1C16           6033   ;        main.c:1217: if (distance < 600){
1C16 905310    6034            mov     dptr,#_distance
1C19 E0        6035            movx    a,@dptr
1C1A FC        6036            mov     r4,a
1C1B A3        6037            inc     dptr
1C1C E0        6038            movx    a,@dptr
1C1D FD        6039            mov     r5,a
1C1E C3        6040            clr     c
1C1F EC        6041            mov     a,r4
1C20 9458      6042            subb    a,#0x58
1C22 ED        6043            mov     a,r5
1C23 6480      6044            xrl     a,#0x80
1C25 9482      6045            subb    a,#0x82
1C27 5000      6046            jnc     L043016?
1C29           6047   ;        main.c:1218: servo_moveaway();
1C29 C002      6048            push    ar2
1C2B C003      6049            push    ar3
1C2D 120000    6050            lcall   _servo_moveaway
1C30 D003      6051            pop     ar3
1C32 D002      6052            pop     ar2
1C34           6053   L043016?:
1C34           6054   ;        main.c:1221: if(bound == 1){
1C34 BA01C0    6055            cjne    r2,#0x01,L043062?
1C37 BB00C0    6056            cjne    r3,#0x00,L043062?
1C3A 8000      6057            sjmp    L043063?
1C3C           6058   L043062?:
1C3C 020000    6059            ljmp    L043020?
1C3F           6060   L043063?:
1C3F           6061   ;        main.c:1222: Move_back_ms(400);
1C3F 900190    6062            mov     dptr,#0x0190
1C42 120000    6063            lcall   _Move_back_ms
1C45           6064   ;        main.c:1223: waitms(100);
1C45 900064    6065            mov     dptr,#0x0064
1C48 120000    6066            lcall   _waitms
1C4B           6067   ;        main.c:1224: angle = get_random_90_250();
1C4B 120000    6068            lcall   _get_random_90_250
1C4E 858200    6069            mov     __mulint_PARM_2,dpl
1C51 858301    6070            mov     (__mulint_PARM_2 + 1),dph
1C54           6071   ;        main.c:1225: Right_angle(angle*600/90);
1C54 900258    6072            mov     dptr,#0x0258
1C57 120000    6073            lcall   __mulint
1C5A AA82      6074            mov     r2,dpl
1C5C AB83      6075            mov     r3,dph
1C5E 75005A    6076            mov     __divuint_PARM_2,#0x5A
1C61 E4        6077            clr     a
1C62 F501      6078            mov     (__divuint_PARM_2 + 1),a
1C64 8A82      6079            mov     dpl,r2
1C66 8B83      6080            mov     dph,r3
1C68 120000    6081            lcall   __divuint
1C6B 120000    6082            lcall   _Right_angle
1C6E           6083   ;        main.c:1226: curr_angle = Read_angle() * 1.2;
1C6E 120000    6084            lcall   _Read_angle
1C71 AA82      6085            mov     r2,dpl
1C73 AB83      6086            mov     r3,dph
1C75 ACF0      6087            mov     r4,b
1C77 FD        6088            mov     r5,a
1C78 C002      6089            push    ar2
1C7A C003      6090            push    ar3
1C7C C004      6091            push    ar4
1C7E C005      6092            push    ar5
1C80 90999A    6093            mov     dptr,#0x999A
1C83 75F099    6094            mov     b,#0x99
1C86 743F      6095            mov     a,#0x3F
1C88 120000    6096            lcall   ___fsmul
1C8B AA82      6097            mov     r2,dpl
1C8D AB83      6098            mov     r3,dph
1C8F ACF0      6099            mov     r4,b
1C91 FD        6100            mov     r5,a
1C92 E581      6101            mov     a,sp
1C94 24FC      6102            add     a,#0xfc
1C96 F581      6103            mov     sp,a
1C98 904E00    6104            mov     dptr,#_curr_angle
1C9B EA        6105            mov     a,r2
1C9C F0        6106            movx    @dptr,a
1C9D A3        6107            inc     dptr
1C9E EB        6108            mov     a,r3
1C9F F0        6109            movx    @dptr,a
1CA0 A3        6110            inc     dptr
1CA1 EC        6111            mov     a,r4
1CA2 F0        6112            movx    @dptr,a
1CA3 A3        6113            inc     dptr
1CA4 ED        6114            mov     a,r5
1CA5 F0        6115            movx    @dptr,a
1CA6 020000    6116            ljmp    L043020?
1CA9           6117   L043022?:
1CA9           6118   ;        main.c:1229: dummy = 0;
1CA9 90D258    6119            mov     dptr,#_Auto_mode_slave_dummy_1_231
1CAC E4        6120            clr     a
1CAD F0        6121            movx    @dptr,a
1CAE A3        6122            inc     dptr
1CAF F0        6123            movx    @dptr,a
1CB0           6124   ;        main.c:1230: while(1){
1CB0           6125   L043030?:
1CB0           6126   ;        main.c:1231: if(RXU1()) {
1CB0 120000    6127            lcall   _RXU1
1CB3 5000      6128            jnc     L043030?
1CB5           6129   ;        main.c:1232: c=getchar1();
1CB5 120000    6130            lcall   _getchar1
1CB8 AA82      6131            mov     r2,dpl
1CBA           6132   ;        main.c:1233: if(c=='@') // Master wants slave data
1CBA BA40D0    6133            cjne    r2,#0x40,L043030?
1CBD           6134   ;        main.c:1235: sprintf(buff, "0,00,%04ld,%05d,%03d,%03d,%03d\n", freq100, weight, (int)curr_angle);
1CBD 904E00    6135            mov     dptr,#_curr_angle
1CC0 E0        6136            movx    a,@dptr
1CC1 FA        6137            mov     r2,a
1CC2 A3        6138            inc     dptr
1CC3 E0        6139            movx    a,@dptr
1CC4 FB        6140            mov     r3,a
1CC5 A3        6141            inc     dptr
1CC6 E0        6142            movx    a,@dptr
1CC7 FC        6143            mov     r4,a
1CC8 A3        6144            inc     dptr
1CC9 E0        6145            movx    a,@dptr
1CCA 8A82      6146            mov     dpl,r2
1CCC 8B83      6147            mov     dph,r3
1CCE 8CF0      6148            mov     b,r4
1CD0 120000    6149            lcall   ___fs2sint
1CD3 AA82      6150            mov     r2,dpl
1CD5 AB83      6151            mov     r3,dph
1CD7 C002      6152            push    ar2
1CD9 C003      6153            push    ar3
1CDB 904CC0    6154            mov     dptr,#_weight
1CDE E0        6155            movx    a,@dptr
1CDF C0E0      6156            push    acc
1CE1 A3        6157            inc     dptr
1CE2 E0        6158            movx    a,@dptr
1CE3 C0E0      6159            push    acc
1CE5 905690    6160            mov     dptr,#_freq100
1CE8 E0        6161            movx    a,@dptr
1CE9 C0E0      6162            push    acc
1CEB A3        6163            inc     dptr
1CEC E0        6164            movx    a,@dptr
1CED C0E0      6165            push    acc
1CEF A3        6166            inc     dptr
1CF0 E0        6167            movx    a,@dptr
1CF1 C0E0      6168            push    acc
1CF3 A3        6169            inc     dptr
1CF4 E0        6170            movx    a,@dptr
1CF5 C0E0      6171            push    acc
1CF7 7410      6172            mov     a,#__str_7
1CF9 C0E0      6173            push    acc
1CFB 741B      6174            mov     a,#(__str_7 >> 8)
1CFD C0E0      6175            push    acc
1CFF 7480      6176            mov     a,#0x80
1D01 C0E0      6177            push    acc
1D03 74D0      6178            mov     a,#_buff
1D05 C0E0      6179            push    acc
1D07 7456      6180            mov     a,#(_buff >> 8)
1D09 C0E0      6181            push    acc
1D0B 7440      6182            mov     a,#0x40
1D0D C0E0      6183            push    acc
1D0F 120000    6184            lcall   _sprintf
1D12 E581      6185            mov     a,sp
1D14 24F2      6186            add     a,#0xf2
1D16 F581      6187            mov     sp,a
1D18           6188   ;        main.c:1236: dummy++;
1D18 90D258    6189            mov     dptr,#_Auto_mode_slave_dummy_1_231
1D1B 7401      6190            mov     a,#0x01
1D1D F0        6191            movx    @dptr,a
1D1E E4        6192            clr     a
1D1F A3        6193            inc     dptr
1D20 F0        6194            movx    @dptr,a
1D21           6195   ;        main.c:1237: waitms(5); 
1D21 900005    6196            mov     dptr,#0x0005
1D24 120000    6197            lcall   _waitms
1D27           6198   ;        main.c:1238: sendstr1(buff);
1D27 9056D0    6199            mov     dptr,#_buff
1D2A 75F040    6200            mov     b,#0x40
1D2D 120000    6201            lcall   _sendstr1
1D30           6202   ;        main.c:1239: if(dummy = 30) break;
1D30 90D258    6203            mov     dptr,#_Auto_mode_slave_dummy_1_231
1D33 741E      6204            mov     a,#0x1E
1D35 F0        6205            movx    @dptr,a
1D36 E4        6206            clr     a
1D37 A3        6207            inc     dptr
1D38 F0        6208            movx    @dptr,a
1D39 22        6209            ret
1D3A           6210   ;------------------------------------------------------------
1D3A           6211   ;Allocation info for local variables in function 'Joystick_Control'
1D3A           6212   ;------------------------------------------------------------
1D3A           6213   ;vy_ptr                    Allocated with name '_Joystick_Control_PARM_2'
1D3A           6214   ;vx_ptr                    Allocated to registers r2 r3 r4 
1D3A           6215   ;sloc0                     Allocated with name '_Joystick_Control_sloc0_1_0'
1D3A           6216   ;sloc1                     Allocated with name '_Joystick_Control_sloc1_1_0'
1D3A           6217   ;sloc2                     Allocated with name '_Joystick_Control_sloc2_1_0'
1D3A           6218   ;sloc3                     Allocated with name '_Joystick_Control_sloc3_1_0'
1D3A           6219   ;sloc4                     Allocated with name '_Joystick_Control_sloc4_1_0'
1D3A           6220   ;sloc5                     Allocated with name '_Joystick_Control_sloc5_1_0'
1D3A           6221   ;vx_error                  Allocated with name '_Joystick_Control_vx_error_1_244'
1D3A           6222   ;vy_error                  Allocated with name '_Joystick_Control_vy_error_1_244'
1D3A           6223   ;vx_err                    Allocated with name '_Joystick_Control_vx_err_1_244'
1D3A           6224   ;vy_err                    Allocated with name '_Joystick_Control_vy_err_1_244'
1D3A           6225   ;------------------------------------------------------------
1D3A           6226   ;        main.c:1245: float Joystick_Control(int *vx_ptr, int *vy_ptr)
1D3A           6227   ;        -----------------------------------------
1D3A           6228   ;         function Joystick_Control
1D3A           6229   ;        -----------------------------------------
1D3A           6230   _Joystick_Control:
1D3A           6231   ;        main.c:1249: vx = *vx_ptr; 
1D3A 120000    6232            lcall   __gptrget
1D3D FA        6233            mov     r2,a
1D3E A3        6234            inc     dptr
1D3F 120000    6235            lcall   __gptrget
1D42 FB        6236            mov     r3,a
1D43 904F90    6237            mov     dptr,#_vx
1D46 EA        6238            mov     a,r2
1D47 F0        6239            movx    @dptr,a
1D48 A3        6240            inc     dptr
1D49 EB        6241            mov     a,r3
1D4A F0        6242            movx    @dptr,a
1D4B           6243   ;        main.c:1250: vy = *vy_ptr; 
1D4B AA20      6244            mov     r2,_Joystick_Control_PARM_2
1D4D AB21      6245            mov     r3,(_Joystick_Control_PARM_2 + 1)
1D4F AC22      6246            mov     r4,(_Joystick_Control_PARM_2 + 2)
1D51 8A82      6247            mov     dpl,r2
1D53 8B83      6248            mov     dph,r3
1D55 8CF0      6249            mov     b,r4
1D57 120000    6250            lcall   __gptrget
1D5A FA        6251            mov     r2,a
1D5B A3        6252            inc     dptr
1D5C 120000    6253            lcall   __gptrget
1D5F FB        6254            mov     r3,a
1D60 904F50    6255            mov     dptr,#_vy
1D63 EA        6256            mov     a,r2
1D64 F0        6257            movx    @dptr,a
1D65 A3        6258            inc     dptr
1D66 EB        6259            mov     a,r3
1D67 F0        6260            movx    @dptr,a
1D68           6261   ;        main.c:1253: raw_angle = Read_angle();
1D68 120000    6262            lcall   _Read_angle
1D6B AA82      6263            mov     r2,dpl
1D6D AB83      6264            mov     r3,dph
1D6F ACF0      6265            mov     r4,b
1D71 FD        6266            mov     r5,a
1D72 904DC0    6267            mov     dptr,#_raw_angle
1D75 EA        6268            mov     a,r2
1D76 F0        6269            movx    @dptr,a
1D77 A3        6270            inc     dptr
1D78 EB        6271            mov     a,r3
1D79 F0        6272            movx    @dptr,a
1D7A A3        6273            inc     dptr
1D7B EC        6274            mov     a,r4
1D7C F0        6275            movx    @dptr,a
1D7D A3        6276            inc     dptr
1D7E ED        6277            mov     a,r5
1D7F F0        6278            movx    @dptr,a
1D80           6279   ;        main.c:1256: vx_error = abs(vx-vx_thres)*100/vx_thres; 
1D80 905010    6280            mov     dptr,#_vx_thres
1D83 E0        6281            movx    a,@dptr
1D84 FA        6282            mov     r2,a
1D85 A3        6283            inc     dptr
1D86 E0        6284            movx    a,@dptr
1D87 FB        6285            mov     r3,a
1D88 904F90    6286            mov     dptr,#_vx
1D8B E0        6287            movx    a,@dptr
1D8C FC        6288            mov     r4,a
1D8D A3        6289            inc     dptr
1D8E E0        6290            movx    a,@dptr
1D8F FD        6291            mov     r5,a
1D90 EC        6292            mov     a,r4
1D91 C3        6293            clr     c
1D92 9A        6294            subb    a,r2
1D93 F582      6295            mov     dpl,a
1D95 ED        6296            mov     a,r5
1D96 9B        6297            subb    a,r3
1D97 F583      6298            mov     dph,a
1D99 120000    6299            lcall   _abs
1D9C 858200    6300            mov     __mulint_PARM_2,dpl
1D9F 858301    6301            mov     (__mulint_PARM_2 + 1),dph
1DA2 900064    6302            mov     dptr,#0x0064
1DA5 120000    6303            lcall   __mulint
1DA8 AA82      6304            mov     r2,dpl
1DAA AB83      6305            mov     r3,dph
1DAC 905010    6306            mov     dptr,#_vx_thres
1DAF E0        6307            movx    a,@dptr
1DB0 F500      6308            mov     __divsint_PARM_2,a
1DB2 A3        6309            inc     dptr
1DB3 E0        6310            movx    a,@dptr
1DB4 F501      6311            mov     (__divsint_PARM_2 + 1),a
1DB6 8A82      6312            mov     dpl,r2
1DB8 8B83      6313            mov     dph,r3
1DBA 120000    6314            lcall   __divsint
1DBD E582      6315            mov     a,dpl
1DBF 8583F0    6316            mov     b,dph
1DC2 90D2B8    6317            mov     dptr,#_Joystick_Control_vx_error_1_244
1DC5 F0        6318            movx    @dptr,a
1DC6 A3        6319            inc     dptr
1DC7 E5F0      6320            mov     a,b
1DC9 F0        6321            movx    @dptr,a
1DCA           6322   ;        main.c:1257: vy_error = abs(vy-vy_thres)*100/vy_thres; 
1DCA 904FD0    6323            mov     dptr,#_vy_thres
1DCD E0        6324            movx    a,@dptr
1DCE FA        6325            mov     r2,a
1DCF A3        6326            inc     dptr
1DD0 E0        6327            movx    a,@dptr
1DD1 FB        6328            mov     r3,a
1DD2 904F50    6329            mov     dptr,#_vy
1DD5 E0        6330            movx    a,@dptr
1DD6 FC        6331            mov     r4,a
1DD7 A3        6332            inc     dptr
1DD8 E0        6333            movx    a,@dptr
1DD9 FD        6334            mov     r5,a
1DDA EC        6335            mov     a,r4
1DDB C3        6336            clr     c
1DDC 9A        6337            subb    a,r2
1DDD F582      6338            mov     dpl,a
1DDF ED        6339            mov     a,r5
1DE0 9B        6340            subb    a,r3
1DE1 F583      6341            mov     dph,a
1DE3 120000    6342            lcall   _abs
1DE6 858200    6343            mov     __mulint_PARM_2,dpl
1DE9 858301    6344            mov     (__mulint_PARM_2 + 1),dph
1DEC 900064    6345            mov     dptr,#0x0064
1DEF 120000    6346            lcall   __mulint
1DF2 AA82      6347            mov     r2,dpl
1DF4 AB83      6348            mov     r3,dph
1DF6 904FD0    6349            mov     dptr,#_vy_thres
1DF9 E0        6350            movx    a,@dptr
1DFA FC        6351            mov     r4,a
1DFB A3        6352            inc     dptr
1DFC E0        6353            movx    a,@dptr
1DFD FD        6354            mov     r5,a
1DFE 8C00      6355            mov     __divsint_PARM_2,r4
1E00 8D01      6356            mov     (__divsint_PARM_2 + 1),r5
1E02 8A82      6357            mov     dpl,r2
1E04 8B83      6358            mov     dph,r3
1E06 C004      6359            push    ar4
1E08 C005      6360            push    ar5
1E0A 120000    6361            lcall   __divsint
1E0D AA82      6362            mov     r2,dpl
1E0F AB83      6363            mov     r3,dph
1E11 D005      6364            pop     ar5
1E13 D004      6365            pop     ar4
1E15 90D318    6366            mov     dptr,#_Joystick_Control_vy_error_1_244
1E18 EA        6367            mov     a,r2
1E19 F0        6368            movx    @dptr,a
1E1A A3        6369            inc     dptr
1E1B EB        6370            mov     a,r3
1E1C F0        6371            movx    @dptr,a
1E1D           6372   ;        main.c:1258: vx_err = vx-vx_thres; 
1E1D 905010    6373            mov     dptr,#_vx_thres
1E20 E0        6374            movx    a,@dptr
1E21 FE        6375            mov     r6,a
1E22 A3        6376            inc     dptr
1E23 E0        6377            movx    a,@dptr
1E24 FF        6378            mov     r7,a
1E25 904F90    6379            mov     dptr,#_vx
1E28 E0        6380            movx    a,@dptr
1E29 F8        6381            mov     r0,a
1E2A A3        6382            inc     dptr
1E2B E0        6383            movx    a,@dptr
1E2C F9        6384            mov     r1,a
1E2D E8        6385            mov     a,r0
1E2E C3        6386            clr     c
1E2F 9E        6387            subb    a,r6
1E30 FE        6388            mov     r6,a
1E31 E9        6389            mov     a,r1
1E32 9F        6390            subb    a,r7
1E33 FF        6391            mov     r7,a
1E34 90D368    6392            mov     dptr,#_Joystick_Control_vx_err_1_244
1E37 EE        6393            mov     a,r6
1E38 F0        6394            movx    @dptr,a
1E39 A3        6395            inc     dptr
1E3A EF        6396            mov     a,r7
1E3B F0        6397            movx    @dptr,a
1E3C           6398   ;        main.c:1259: vy_err = vy-vy_thres; 
1E3C 904F50    6399            mov     dptr,#_vy
1E3F E0        6400            movx    a,@dptr
1E40 F8        6401            mov     r0,a
1E41 A3        6402            inc     dptr
1E42 E0        6403            movx    a,@dptr
1E43 F9        6404            mov     r1,a
1E44 E8        6405            mov     a,r0
1E45 C3        6406            clr     c
1E46 9C        6407            subb    a,r4
1E47 F5F8      6408            mov     _Joystick_Control_sloc0_1_0,a
1E49 E9        6409            mov     a,r1
1E4A 9D        6410            subb    a,r5
1E4B F5F9      6411            mov     (_Joystick_Control_sloc0_1_0 + 1),a
1E4D 90D3B8    6412            mov     dptr,#_Joystick_Control_vy_err_1_244
1E50 E5F8      6413            mov     a,_Joystick_Control_sloc0_1_0
1E52 F0        6414            movx    @dptr,a
1E53 A3        6415            inc     dptr
1E54 E5F9      6416            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
1E56 F0        6417            movx    @dptr,a
1E57           6418   ;        main.c:1260: pwm_left = 0; 
1E57 905190    6419            mov     dptr,#_pwm_left
1E5A           6420   ;        main.c:1261: pwm_right = 0; 
1E5A E4        6421            clr     a
1E5B F0        6422            movx    @dptr,a
1E5C 905150    6423            mov     dptr,#_pwm_right
1E5F F0        6424            movx    @dptr,a
1E60           6425   ;        main.c:1263: if ((vy_error>5) && (vx_error<5)){
1E60 C3        6426            clr     c
1E61 7405      6427            mov     a,#0x05
1E63 9A        6428            subb    a,r2
1E64 E4        6429            clr     a
1E65 6480      6430            xrl     a,#0x80
1E67 8BF0      6431            mov     b,r3
1E69 63F080    6432            xrl     b,#0x80
1E6C 95F0      6433            subb    a,b
1E6E E4        6434            clr     a
1E6F 33        6435            rlc     a
1E70 F598      6436            mov     _Joystick_Control_sloc2_1_0,a
1E72 7000      6437            jnz     L044062?
1E74 020000    6438            ljmp    L044005?
1E77           6439   L044062?:
1E77 90D2B8    6440            mov     dptr,#_Joystick_Control_vx_error_1_244
1E7A E0        6441            movx    a,@dptr
1E7B F9        6442            mov     r1,a
1E7C A3        6443            inc     dptr
1E7D E0        6444            movx    a,@dptr
1E7E F8        6445            mov     r0,a
1E7F C3        6446            clr     c
1E80 E9        6447            mov     a,r1
1E81 9405      6448            subb    a,#0x05
1E83 E8        6449            mov     a,r0
1E84 6480      6450            xrl     a,#0x80
1E86 9480      6451            subb    a,#0x80
1E88 4000      6452            jc      L044063?
1E8A 020000    6453            ljmp    L044005?
1E8D           6454   L044063?:
1E8D           6455   ;        main.c:1264: pwm_left = vy_error; 
1E8D 905190    6456            mov     dptr,#_pwm_left
1E90 EA        6457            mov     a,r2
1E91 F0        6458            movx    @dptr,a
1E92           6459   ;        main.c:1265: pwm_right = vy_error * pwm_corr; 
1E92 8A82      6460            mov     dpl,r2
1E94 8B83      6461            mov     dph,r3
1E96 C002      6462            push    ar2
1E98 C003      6463            push    ar3
1E9A C006      6464            push    ar6
1E9C C007      6465            push    ar7
1E9E 120000    6466            lcall   ___sint2fs
1EA1 A982      6467            mov     r1,dpl
1EA3 A883      6468            mov     r0,dph
1EA5 ACF0      6469            mov     r4,b
1EA7 FD        6470            mov     r5,a
1EA8 904E40    6471            mov     dptr,#_pwm_corr
1EAB E0        6472            movx    a,@dptr
1EAC C0E0      6473            push    acc
1EAE A3        6474            inc     dptr
1EAF E0        6475            movx    a,@dptr
1EB0 C0E0      6476            push    acc
1EB2 A3        6477            inc     dptr
1EB3 E0        6478            movx    a,@dptr
1EB4 C0E0      6479            push    acc
1EB6 A3        6480            inc     dptr
1EB7 E0        6481            movx    a,@dptr
1EB8 C0E0      6482            push    acc
1EBA 8982      6483            mov     dpl,r1
1EBC 8883      6484            mov     dph,r0
1EBE 8CF0      6485            mov     b,r4
1EC0 ED        6486            mov     a,r5
1EC1 120000    6487            lcall   ___fsmul
1EC4 AC82      6488            mov     r4,dpl
1EC6 AD83      6489            mov     r5,dph
1EC8 A8F0      6490            mov     r0,b
1ECA F9        6491            mov     r1,a
1ECB E581      6492            mov     a,sp
1ECD 24FC      6493            add     a,#0xfc
1ECF F581      6494            mov     sp,a
1ED1 8C82      6495            mov     dpl,r4
1ED3 8D83      6496            mov     dph,r5
1ED5 88F0      6497            mov     b,r0
1ED7 E9        6498            mov     a,r1
1ED8 120000    6499            lcall   ___fs2uchar
1EDB 858248    6500            mov     _Joystick_Control_sloc1_1_0,dpl
1EDE D007      6501            pop     ar7
1EE0 D006      6502            pop     ar6
1EE2 D003      6503            pop     ar3
1EE4 D002      6504            pop     ar2
1EE6 905150    6505            mov     dptr,#_pwm_right
1EE9 E548      6506            mov     a,_Joystick_Control_sloc1_1_0
1EEB F0        6507            movx    @dptr,a
1EEC           6508   ;        main.c:1266: if (vy_err > 0){ //move forward
1EEC C3        6509            clr     c
1EED E4        6510            clr     a
1EEE 95F8      6511            subb    a,_Joystick_Control_sloc0_1_0
1EF0 E4        6512            clr     a
1EF1 6480      6513            xrl     a,#0x80
1EF3 85F9F0    6514            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
1EF6 63F080    6515            xrl     b,#0x80
1EF9 95F0      6516            subb    a,b
1EFB 5000      6517            jnc     L044002?
1EFD           6518   ;        main.c:1267: L_motor_dir = 0; 
1EFD 905110    6519            mov     dptr,#_L_motor_dir
1F00           6520   ;        main.c:1268: R_motor_dir = 0; 
1F00 E4        6521            clr     a
1F01 F0        6522            movx    @dptr,a
1F02 9050D0    6523            mov     dptr,#_R_motor_dir
1F05 F0        6524            movx    @dptr,a
1F06 8000      6525            sjmp    L044005?
1F08           6526   L044002?:
1F08           6527   ;        main.c:1271: L_motor_dir = 1; 
1F08 905110    6528            mov     dptr,#_L_motor_dir
1F0B 7401      6529            mov     a,#0x01
1F0D F0        6530            movx    @dptr,a
1F0E           6531   ;        main.c:1272: R_motor_dir = 1; 
1F0E 9050D0    6532            mov     dptr,#_R_motor_dir
1F11 7401      6533            mov     a,#0x01
1F13 F0        6534            movx    @dptr,a
1F14           6535   ;        main.c:1273: pwm_right *= 1.05;
1F14 854882    6536            mov     dpl,_Joystick_Control_sloc1_1_0
1F17 C002      6537            push    ar2
1F19 C003      6538            push    ar3
1F1B C006      6539            push    ar6
1F1D C007      6540            push    ar7
1F1F 120000    6541            lcall   ___uchar2fs
1F22 AC82      6542            mov     r4,dpl
1F24 AD83      6543            mov     r5,dph
1F26 A9F0      6544            mov     r1,b
1F28 F8        6545            mov     r0,a
1F29 C004      6546            push    ar4
1F2B C005      6547            push    ar5
1F2D C001      6548            push    ar1
1F2F C000      6549            push    ar0
1F31 906666    6550            mov     dptr,#0x6666
1F34 75F086    6551            mov     b,#0x86
1F37 743F      6552            mov     a,#0x3F
1F39 120000    6553            lcall   ___fsmul
1F3C AC82      6554            mov     r4,dpl
1F3E AD83      6555            mov     r5,dph
1F40 A8F0      6556            mov     r0,b
1F42 F9        6557            mov     r1,a
1F43 E581      6558            mov     a,sp
1F45 24FC      6559            add     a,#0xfc
1F47 F581      6560            mov     sp,a
1F49 8C82      6561            mov     dpl,r4
1F4B 8D83      6562            mov     dph,r5
1F4D 88F0      6563            mov     b,r0
1F4F E9        6564            mov     a,r1
1F50 120000    6565            lcall   ___fs2uchar
1F53 E582      6566            mov     a,dpl
1F55 D007      6567            pop     ar7
1F57 D006      6568            pop     ar6
1F59 D003      6569            pop     ar3
1F5B D002      6570            pop     ar2
1F5D 905150    6571            mov     dptr,#_pwm_right
1F60 F0        6572            movx    @dptr,a
1F61           6573   ;        main.c:1356: return curr_angle; 
1F61           6574   ;        main.c:1273: pwm_right *= 1.05;
1F61           6575   L044005?:
1F61           6576   ;        main.c:1276: if ((vx_error>5)&&(vy_error<5)){
1F61 90D2B8    6577            mov     dptr,#_Joystick_Control_vx_error_1_244
1F64 E0        6578            movx    a,@dptr
1F65 FC        6579            mov     r4,a
1F66 A3        6580            inc     dptr
1F67 E0        6581            movx    a,@dptr
1F68 FD        6582            mov     r5,a
1F69 C3        6583            clr     c
1F6A 7405      6584            mov     a,#0x05
1F6C 9C        6585            subb    a,r4
1F6D E4        6586            clr     a
1F6E 6480      6587            xrl     a,#0x80
1F70 8DF0      6588            mov     b,r5
1F72 63F080    6589            xrl     b,#0x80
1F75 95F0      6590            subb    a,b
1F77 E4        6591            clr     a
1F78 33        6592            rlc     a
1F79 F9        6593            mov     r1,a
1F7A 7000      6594            jnz     L044065?
1F7C 020000    6595            ljmp    L044015?
1F7F           6596   L044065?:
1F7F C3        6597            clr     c
1F80 EA        6598            mov     a,r2
1F81 9405      6599            subb    a,#0x05
1F83 EB        6600            mov     a,r3
1F84 6480      6601            xrl     a,#0x80
1F86 9480      6602            subb    a,#0x80
1F88 4000      6603            jc      L044066?
1F8A 020000    6604            ljmp    L044015?
1F8D           6605   L044066?:
1F8D           6606   ;        main.c:1277: pwm_left = vx_error; 
1F8D C001      6607            push    ar1
1F8F 905190    6608            mov     dptr,#_pwm_left
1F92 EC        6609            mov     a,r4
1F93 F0        6610            movx    @dptr,a
1F94           6611   ;        main.c:1278: pwm_right = vx_error * pwm_corr; 
1F94 8C82      6612            mov     dpl,r4
1F96 8D83      6613            mov     dph,r5
1F98 C004      6614            push    ar4
1F9A C005      6615            push    ar5
1F9C C006      6616            push    ar6
1F9E C007      6617            push    ar7
1FA0 120000    6618            lcall   ___sint2fs
1FA3 AA82      6619            mov     r2,dpl
1FA5 AB83      6620            mov     r3,dph
1FA7 A9F0      6621            mov     r1,b
1FA9 F8        6622            mov     r0,a
1FAA 904E40    6623            mov     dptr,#_pwm_corr
1FAD E0        6624            movx    a,@dptr
1FAE C0E0      6625            push    acc
1FB0 A3        6626            inc     dptr
1FB1 E0        6627            movx    a,@dptr
1FB2 C0E0      6628            push    acc
1FB4 A3        6629            inc     dptr
1FB5 E0        6630            movx    a,@dptr
1FB6 C0E0      6631            push    acc
1FB8 A3        6632            inc     dptr
1FB9 E0        6633            movx    a,@dptr
1FBA C0E0      6634            push    acc
1FBC 8A82      6635            mov     dpl,r2
1FBE 8B83      6636            mov     dph,r3
1FC0 89F0      6637            mov     b,r1
1FC2 E8        6638            mov     a,r0
1FC3 120000    6639            lcall   ___fsmul
1FC6 AA82      6640            mov     r2,dpl
1FC8 AB83      6641            mov     r3,dph
1FCA A8F0      6642            mov     r0,b
1FCC F9        6643            mov     r1,a
1FCD E581      6644            mov     a,sp
1FCF 24FC      6645            add     a,#0xfc
1FD1 F581      6646            mov     sp,a
1FD3 8A82      6647            mov     dpl,r2
1FD5 8B83      6648            mov     dph,r3
1FD7 88F0      6649            mov     b,r0
1FD9 E9        6650            mov     a,r1
1FDA C001      6651            push    ar1
1FDC 120000    6652            lcall   ___fs2uchar
1FDF E582      6653            mov     a,dpl
1FE1 D001      6654            pop     ar1
1FE3 D007      6655            pop     ar7
1FE5 D006      6656            pop     ar6
1FE7 D005      6657            pop     ar5
1FE9 D004      6658            pop     ar4
1FEB 905150    6659            mov     dptr,#_pwm_right
1FEE F0        6660            movx    @dptr,a
1FEF           6661   ;        main.c:1279: if (vx_err > 0){ //turn right
1FEF C3        6662            clr     c
1FF0 E4        6663            clr     a
1FF1 9E        6664            subb    a,r6
1FF2 E4        6665            clr     a
1FF3 6480      6666            xrl     a,#0x80
1FF5 8FF0      6667            mov     b,r7
1FF7 63F080    6668            xrl     b,#0x80
1FFA 95F0      6669            subb    a,b
1FFC D001      6670            pop     ar1
1FFE 4000      6671            jc      L044067?
2000 020000    6672            ljmp    L044008?
2003           6673   L044067?:
2003           6674   ;        main.c:1280: L_motor_dir = 1; 
2003 C001      6675            push    ar1
2005 905110    6676            mov     dptr,#_L_motor_dir
2008 7401      6677            mov     a,#0x01
200A F0        6678            movx    @dptr,a
200B           6679   ;        main.c:1281: R_motor_dir = 0;
200B 9050D0    6680            mov     dptr,#_R_motor_dir
200E E4        6681            clr     a
200F F0        6682            movx    @dptr,a
2010           6683   ;        main.c:1282: curr_angle += angle_diff * 1.45; // TUNE THIS
2010 C004      6684            push    ar4
2012 C005      6685            push    ar5
2014 C001      6686            push    ar1
2016 904D40    6687            mov     dptr,#_angle_diff
2019 E0        6688            movx    a,@dptr
201A C0E0      6689            push    acc
201C A3        6690            inc     dptr
201D E0        6691            movx    a,@dptr
201E C0E0      6692            push    acc
2020 A3        6693            inc     dptr
2021 E0        6694            movx    a,@dptr
2022 C0E0      6695            push    acc
2024 A3        6696            inc     dptr
2025 E0        6697            movx    a,@dptr
2026 C0E0      6698            push    acc
2028 90999A    6699            mov     dptr,#0x999A
202B 75F0B9    6700            mov     b,#0xB9
202E 743F      6701            mov     a,#0x3F
2030 120000    6702            lcall   ___fsmul
2033 8582E8    6703            mov     _Joystick_Control_sloc3_1_0,dpl
2036 8583E9    6704            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
2039 85F0EA    6705            mov     (_Joystick_Control_sloc3_1_0 + 2),b
203C F5EB      6706            mov     (_Joystick_Control_sloc3_1_0 + 3),a
203E E581      6707            mov     a,sp
2040 24FC      6708            add     a,#0xfc
2042 F581      6709            mov     sp,a
2044 D001      6710            pop     ar1
2046 904E00    6711            mov     dptr,#_curr_angle
2049 E0        6712            movx    a,@dptr
204A F8        6713            mov     r0,a
204B A3        6714            inc     dptr
204C E0        6715            movx    a,@dptr
204D F9        6716            mov     r1,a
204E A3        6717            inc     dptr
204F E0        6718            movx    a,@dptr
2050 FA        6719            mov     r2,a
2051 A3        6720            inc     dptr
2052 E0        6721            movx    a,@dptr
2053 FB        6722            mov     r3,a
2054 C001      6723            push    ar1
2056 C0E8      6724            push    _Joystick_Control_sloc3_1_0
2058 C0E9      6725            push    (_Joystick_Control_sloc3_1_0 + 1)
205A C0EA      6726            push    (_Joystick_Control_sloc3_1_0 + 2)
205C C0EB      6727            push    (_Joystick_Control_sloc3_1_0 + 3)
205E 8882      6728            mov     dpl,r0
2060 8983      6729            mov     dph,r1
2062 8AF0      6730            mov     b,r2
2064 EB        6731            mov     a,r3
2065 120000    6732            lcall   ___fsadd
2068 AA82      6733            mov     r2,dpl
206A AB83      6734            mov     r3,dph
206C AEF0      6735            mov     r6,b
206E FF        6736            mov     r7,a
206F E581      6737            mov     a,sp
2071 24FC      6738            add     a,#0xfc
2073 F581      6739            mov     sp,a
2075 D001      6740            pop     ar1
2077 D005      6741            pop     ar5
2079 D004      6742            pop     ar4
207B 904E00    6743            mov     dptr,#_curr_angle
207E EA        6744            mov     a,r2
207F F0        6745            movx    @dptr,a
2080 A3        6746            inc     dptr
2081 EB        6747            mov     a,r3
2082 F0        6748            movx    @dptr,a
2083 A3        6749            inc     dptr
2084 EE        6750            mov     a,r6
2085 F0        6751            movx    @dptr,a
2086 A3        6752            inc     dptr
2087 EF        6753            mov     a,r7
2088 F0        6754            movx    @dptr,a
2089 D001      6755            pop     ar1
208B 020000    6756            ljmp    L044009?
208E           6757   L044008?:
208E           6758   ;        main.c:1285: L_motor_dir = 0; 
208E C001      6759            push    ar1
2090 905110    6760            mov     dptr,#_L_motor_dir
2093 E4        6761            clr     a
2094 F0        6762            movx    @dptr,a
2095           6763   ;        main.c:1286: R_motor_dir = 1; 
2095 9050D0    6764            mov     dptr,#_R_motor_dir
2098 7401      6765            mov     a,#0x01
209A F0        6766            movx    @dptr,a
209B           6767   ;        main.c:1287: curr_angle -= angle_diff * 1.4; // TUNE THIS
209B C004      6768            push    ar4
209D C005      6769            push    ar5
209F C001      6770            push    ar1
20A1 904D40    6771            mov     dptr,#_angle_diff
20A4 E0        6772            movx    a,@dptr
20A5 C0E0      6773            push    acc
20A7 A3        6774            inc     dptr
20A8 E0        6775            movx    a,@dptr
20A9 C0E0      6776            push    acc
20AB A3        6777            inc     dptr
20AC E0        6778            movx    a,@dptr
20AD C0E0      6779            push    acc
20AF A3        6780            inc     dptr
20B0 E0        6781            movx    a,@dptr
20B1 C0E0      6782            push    acc
20B3 903333    6783            mov     dptr,#0x3333
20B6 75F0B3    6784            mov     b,#0xB3
20B9 743F      6785            mov     a,#0x3F
20BB 120000    6786            lcall   ___fsmul
20BE 8582E8    6787            mov     _Joystick_Control_sloc3_1_0,dpl
20C1 8583E9    6788            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
20C4 85F0EA    6789            mov     (_Joystick_Control_sloc3_1_0 + 2),b
20C7 F5EB      6790            mov     (_Joystick_Control_sloc3_1_0 + 3),a
20C9 E581      6791            mov     a,sp
20CB 24FC      6792            add     a,#0xfc
20CD F581      6793            mov     sp,a
20CF D001      6794            pop     ar1
20D1 904E00    6795            mov     dptr,#_curr_angle
20D4 E0        6796            movx    a,@dptr
20D5 F8        6797            mov     r0,a
20D6 A3        6798            inc     dptr
20D7 E0        6799            movx    a,@dptr
20D8 F9        6800            mov     r1,a
20D9 A3        6801            inc     dptr
20DA E0        6802            movx    a,@dptr
20DB FA        6803            mov     r2,a
20DC A3        6804            inc     dptr
20DD E0        6805            movx    a,@dptr
20DE FB        6806            mov     r3,a
20DF C001      6807            push    ar1
20E1 C0E8      6808            push    _Joystick_Control_sloc3_1_0
20E3 C0E9      6809            push    (_Joystick_Control_sloc3_1_0 + 1)
20E5 C0EA      6810            push    (_Joystick_Control_sloc3_1_0 + 2)
20E7 C0EB      6811            push    (_Joystick_Control_sloc3_1_0 + 3)
20E9 8882      6812            mov     dpl,r0
20EB 8983      6813            mov     dph,r1
20ED 8AF0      6814            mov     b,r2
20EF EB        6815            mov     a,r3
20F0 120000    6816            lcall   ___fssub
20F3 AA82      6817            mov     r2,dpl
20F5 AB83      6818            mov     r3,dph
20F7 AEF0      6819            mov     r6,b
20F9 FF        6820            mov     r7,a
20FA E581      6821            mov     a,sp
20FC 24FC      6822            add     a,#0xfc
20FE F581      6823            mov     sp,a
2100 D001      6824            pop     ar1
2102 D005      6825            pop     ar5
2104 D004      6826            pop     ar4
2106 904E00    6827            mov     dptr,#_curr_angle
2109 EA        6828            mov     a,r2
210A F0        6829            movx    @dptr,a
210B A3        6830            inc     dptr
210C EB        6831            mov     a,r3
210D F0        6832            movx    @dptr,a
210E A3        6833            inc     dptr
210F EE        6834            mov     a,r6
2110 F0        6835            movx    @dptr,a
2111 A3        6836            inc     dptr
2112 EF        6837            mov     a,r7
2113 F0        6838            movx    @dptr,a
2114           6839   ;        main.c:1356: return curr_angle; 
2114 D001      6840            pop     ar1
2116           6841   ;        main.c:1287: curr_angle -= angle_diff * 1.4; // TUNE THIS
2116           6842   L044009?:
2116           6843   ;        main.c:1289: if (curr_angle > 360.0) curr_angle -= 360.0; 
2116 904E00    6844            mov     dptr,#_curr_angle
2119 E0        6845            movx    a,@dptr
211A FA        6846            mov     r2,a
211B A3        6847            inc     dptr
211C E0        6848            movx    a,@dptr
211D FB        6849            mov     r3,a
211E A3        6850            inc     dptr
211F E0        6851            movx    a,@dptr
2120 FE        6852            mov     r6,a
2121 A3        6853            inc     dptr
2122 E0        6854            movx    a,@dptr
2123 FF        6855            mov     r7,a
2124 C002      6856            push    ar2
2126 C003      6857            push    ar3
2128 C004      6858            push    ar4
212A C005      6859            push    ar5
212C C006      6860            push    ar6
212E C007      6861            push    ar7
2130 C001      6862            push    ar1
2132 E4        6863            clr     a
2133 C0E0      6864            push    acc
2135 C0E0      6865            push    acc
2137 74B4      6866            mov     a,#0xB4
2139 C0E0      6867            push    acc
213B 7443      6868            mov     a,#0x43
213D C0E0      6869            push    acc
213F 8A82      6870            mov     dpl,r2
2141 8B83      6871            mov     dph,r3
2143 8EF0      6872            mov     b,r6
2145 EF        6873            mov     a,r7
2146 120000    6874            lcall   ___fsgt
2149 A882      6875            mov     r0,dpl
214B E581      6876            mov     a,sp
214D 24FC      6877            add     a,#0xfc
214F F581      6878            mov     sp,a
2151 D001      6879            pop     ar1
2153 D007      6880            pop     ar7
2155 D006      6881            pop     ar6
2157 D005      6882            pop     ar5
2159 D004      6883            pop     ar4
215B D003      6884            pop     ar3
215D D002      6885            pop     ar2
215F E8        6886            mov     a,r0
2160 6000      6887            jz      L044011?
2162 C004      6888            push    ar4
2164 C005      6889            push    ar5
2166 C001      6890            push    ar1
2168 E4        6891            clr     a
2169 C0E0      6892            push    acc
216B C0E0      6893            push    acc
216D 74B4      6894            mov     a,#0xB4
216F C0E0      6895            push    acc
2171 7443      6896            mov     a,#0x43
2173 C0E0      6897            push    acc
2175 8A82      6898            mov     dpl,r2
2177 8B83      6899            mov     dph,r3
2179 8EF0      6900            mov     b,r6
217B EF        6901            mov     a,r7
217C 120000    6902            lcall   ___fssub
217F AA82      6903            mov     r2,dpl
2181 AB83      6904            mov     r3,dph
2183 AEF0      6905            mov     r6,b
2185 FF        6906            mov     r7,a
2186 E581      6907            mov     a,sp
2188 24FC      6908            add     a,#0xfc
218A F581      6909            mov     sp,a
218C D001      6910            pop     ar1
218E D005      6911            pop     ar5
2190 D004      6912            pop     ar4
2192 904E00    6913            mov     dptr,#_curr_angle
2195 EA        6914            mov     a,r2
2196 F0        6915            movx    @dptr,a
2197 A3        6916            inc     dptr
2198 EB        6917            mov     a,r3
2199 F0        6918            movx    @dptr,a
219A A3        6919            inc     dptr
219B EE        6920            mov     a,r6
219C F0        6921            movx    @dptr,a
219D A3        6922            inc     dptr
219E EF        6923            mov     a,r7
219F F0        6924            movx    @dptr,a
21A0           6925   L044011?:
21A0           6926   ;        main.c:1290: if (curr_angle < 0.0) curr_angle += 360.0; 
21A0 904E00    6927            mov     dptr,#_curr_angle
21A3 E0        6928            movx    a,@dptr
21A4 FA        6929            mov     r2,a
21A5 A3        6930            inc     dptr
21A6 E0        6931            movx    a,@dptr
21A7 FB        6932            mov     r3,a
21A8 A3        6933            inc     dptr
21A9 E0        6934            movx    a,@dptr
21AA FE        6935            mov     r6,a
21AB A3        6936            inc     dptr
21AC E0        6937            movx    a,@dptr
21AD FF        6938            mov     r7,a
21AE C002      6939            push    ar2
21B0 C003      6940            push    ar3
21B2 C004      6941            push    ar4
21B4 C005      6942            push    ar5
21B6 C006      6943            push    ar6
21B8 C007      6944            push    ar7
21BA C001      6945            push    ar1
21BC E4        6946            clr     a
21BD C0E0      6947            push    acc
21BF C0E0      6948            push    acc
21C1 C0E0      6949            push    acc
21C3 C0E0      6950            push    acc
21C5 8A82      6951            mov     dpl,r2
21C7 8B83      6952            mov     dph,r3
21C9 8EF0      6953            mov     b,r6
21CB EF        6954            mov     a,r7
21CC 120000    6955            lcall   ___fslt
21CF A882      6956            mov     r0,dpl
21D1 E581      6957            mov     a,sp
21D3 24FC      6958            add     a,#0xfc
21D5 F581      6959            mov     sp,a
21D7 D001      6960            pop     ar1
21D9 D007      6961            pop     ar7
21DB D006      6962            pop     ar6
21DD D005      6963            pop     ar5
21DF D004      6964            pop     ar4
21E1 D003      6965            pop     ar3
21E3 D002      6966            pop     ar2
21E5 E8        6967            mov     a,r0
21E6 6000      6968            jz      L044015?
21E8 C004      6969            push    ar4
21EA C005      6970            push    ar5
21EC C001      6971            push    ar1
21EE E4        6972            clr     a
21EF C0E0      6973            push    acc
21F1 C0E0      6974            push    acc
21F3 74B4      6975            mov     a,#0xB4
21F5 C0E0      6976            push    acc
21F7 7443      6977            mov     a,#0x43
21F9 C0E0      6978            push    acc
21FB 8A82      6979            mov     dpl,r2
21FD 8B83      6980            mov     dph,r3
21FF 8EF0      6981            mov     b,r6
2201 EF        6982            mov     a,r7
2202 120000    6983            lcall   ___fsadd
2205 AA82      6984            mov     r2,dpl
2207 AB83      6985            mov     r3,dph
2209 AEF0      6986            mov     r6,b
220B FF        6987            mov     r7,a
220C E581      6988            mov     a,sp
220E 24FC      6989            add     a,#0xfc
2210 F581      6990            mov     sp,a
2212 D001      6991            pop     ar1
2214 D005      6992            pop     ar5
2216 D004      6993            pop     ar4
2218 904E00    6994            mov     dptr,#_curr_angle
221B EA        6995            mov     a,r2
221C F0        6996            movx    @dptr,a
221D A3        6997            inc     dptr
221E EB        6998            mov     a,r3
221F F0        6999            movx    @dptr,a
2220 A3        7000            inc     dptr
2221 EE        7001            mov     a,r6
2222 F0        7002            movx    @dptr,a
2223 A3        7003            inc     dptr
2224 EF        7004            mov     a,r7
2225 F0        7005            movx    @dptr,a
2226           7006   L044015?:
2226           7007   ;        main.c:1292: if ((vx_error>5)&&(vy_error)>5){
2226 E9        7008            mov     a,r1
2227 7000      7009            jnz     L044070?
2229 020000    7010            ljmp    L044040?
222C           7011   L044070?:
222C E598      7012            mov     a,_Joystick_Control_sloc2_1_0
222E 7000      7013            jnz     L044071?
2230 020000    7014            ljmp    L044040?
2233           7015   L044071?:
2233           7016   ;        main.c:1294: angle_diff = fabsf(raw_angle - last_raw_angle);
2233 904DC0    7017            mov     dptr,#_raw_angle
2236 E0        7018            movx    a,@dptr
2237 FA        7019            mov     r2,a
2238 A3        7020            inc     dptr
2239 E0        7021            movx    a,@dptr
223A FB        7022            mov     r3,a
223B A3        7023            inc     dptr
223C E0        7024            movx    a,@dptr
223D FE        7025            mov     r6,a
223E A3        7026            inc     dptr
223F E0        7027            movx    a,@dptr
2240 FF        7028            mov     r7,a
2241 C004      7029            push    ar4
2243 C005      7030            push    ar5
2245 904D80    7031            mov     dptr,#_last_raw_angle
2248 E0        7032            movx    a,@dptr
2249 C0E0      7033            push    acc
224B A3        7034            inc     dptr
224C E0        7035            movx    a,@dptr
224D C0E0      7036            push    acc
224F A3        7037            inc     dptr
2250 E0        7038            movx    a,@dptr
2251 C0E0      7039            push    acc
2253 A3        7040            inc     dptr
2254 E0        7041            movx    a,@dptr
2255 C0E0      7042            push    acc
2257 8A82      7043            mov     dpl,r2
2259 8B83      7044            mov     dph,r3
225B 8EF0      7045            mov     b,r6
225D EF        7046            mov     a,r7
225E 120000    7047            lcall   ___fssub
2261 AA82      7048            mov     r2,dpl
2263 AB83      7049            mov     r3,dph
2265 AEF0      7050            mov     r6,b
2267 FF        7051            mov     r7,a
2268 E581      7052            mov     a,sp
226A 24FC      7053            add     a,#0xfc
226C F581      7054            mov     sp,a
226E 8A82      7055            mov     dpl,r2
2270 8B83      7056            mov     dph,r3
2272 8EF0      7057            mov     b,r6
2274 EF        7058            mov     a,r7
2275 120000    7059            lcall   _fabsf
2278 858238    7060            mov     _Joystick_Control_sloc4_1_0,dpl
227B 858339    7061            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
227E 85F03A    7062            mov     (_Joystick_Control_sloc4_1_0 + 2),b
2281 F53B      7063            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2283 D005      7064            pop     ar5
2285 D004      7065            pop     ar4
2287 904D40    7066            mov     dptr,#_angle_diff
228A E538      7067            mov     a,_Joystick_Control_sloc4_1_0
228C F0        7068            movx    @dptr,a
228D A3        7069            inc     dptr
228E E539      7070            mov     a,(_Joystick_Control_sloc4_1_0 + 1)
2290 F0        7071            movx    @dptr,a
2291 A3        7072            inc     dptr
2292 E53A      7073            mov     a,(_Joystick_Control_sloc4_1_0 + 2)
2294 F0        7074            movx    @dptr,a
2295 A3        7075            inc     dptr
2296 E53B      7076            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
2298 F0        7077            movx    @dptr,a
2299           7078   ;        main.c:1295: if (vy_err>0){
2299 90D3B8    7079            mov     dptr,#_Joystick_Control_vy_err_1_244
229C E0        7080            movx    a,@dptr
229D F8        7081            mov     r0,a
229E A3        7082            inc     dptr
229F E0        7083            movx    a,@dptr
22A0 F9        7084            mov     r1,a
22A1 C3        7085            clr     c
22A2 E4        7086            clr     a
22A3 98        7087            subb    a,r0
22A4 E4        7088            clr     a
22A5 6480      7089            xrl     a,#0x80
22A7 89F0      7090            mov     b,r1
22A9 63F080    7091            xrl     b,#0x80
22AC 95F0      7092            subb    a,b
22AE 4000      7093            jc      L044072?
22B0 020000    7094            ljmp    L044027?
22B3           7095   L044072?:
22B3           7096   ;        main.c:1296: L_motor_dir = 0; 
22B3 C000      7097            push    ar0
22B5 C001      7098            push    ar1
22B7 905110    7099            mov     dptr,#_L_motor_dir
22BA           7100   ;        main.c:1297: R_motor_dir = 0; 
22BA E4        7101            clr     a
22BB F0        7102            movx    @dptr,a
22BC 9050D0    7103            mov     dptr,#_R_motor_dir
22BF F0        7104            movx    @dptr,a
22C0           7105   ;        main.c:1299: if (vx_err>0){
22C0 90D368    7106            mov     dptr,#_Joystick_Control_vx_err_1_244
22C3 E0        7107            movx    a,@dptr
22C4 F8        7108            mov     r0,a
22C5 A3        7109            inc     dptr
22C6 E0        7110            movx    a,@dptr
22C7 F9        7111            mov     r1,a
22C8 C3        7112            clr     c
22C9 E4        7113            clr     a
22CA 98        7114            subb    a,r0
22CB E4        7115            clr     a
22CC 6480      7116            xrl     a,#0x80
22CE 89F0      7117            mov     b,r1
22D0 63F080    7118            xrl     b,#0x80
22D3 95F0      7119            subb    a,b
22D5 D001      7120            pop     ar1
22D7 D000      7121            pop     ar0
22D9 4000      7122            jc      L044073?
22DB 020000    7123            ljmp    L044024?
22DE           7124   L044073?:
22DE           7125   ;        main.c:1301: if (vy*100<=vy_thres*100/2){
22DE C000      7126            push    ar0
22E0 C001      7127            push    ar1
22E2 904F50    7128            mov     dptr,#_vy
22E5 E0        7129            movx    a,@dptr
22E6 F500      7130            mov     __mulint_PARM_2,a
22E8 A3        7131            inc     dptr
22E9 E0        7132            movx    a,@dptr
22EA F501      7133            mov     (__mulint_PARM_2 + 1),a
22EC 900064    7134            mov     dptr,#0x0064
22EF C004      7135            push    ar4
22F1 C005      7136            push    ar5
22F3 C000      7137            push    ar0
22F5 C001      7138            push    ar1
22F7 120000    7139            lcall   __mulint
22FA 8582E8    7140            mov     _Joystick_Control_sloc3_1_0,dpl
22FD 8583E9    7141            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
2300 D001      7142            pop     ar1
2302 D000      7143            pop     ar0
2304 904FD0    7144            mov     dptr,#_vy_thres
2307 E0        7145            movx    a,@dptr
2308 F500      7146            mov     __mulint_PARM_2,a
230A A3        7147            inc     dptr
230B E0        7148            movx    a,@dptr
230C F501      7149            mov     (__mulint_PARM_2 + 1),a
230E 900064    7150            mov     dptr,#0x0064
2311 120000    7151            lcall   __mulint
2314 A882      7152            mov     r0,dpl
2316 A983      7153            mov     r1,dph
2318 750002    7154            mov     __divsint_PARM_2,#0x02
231B E4        7155            clr     a
231C F501      7156            mov     (__divsint_PARM_2 + 1),a
231E 8882      7157            mov     dpl,r0
2320 8983      7158            mov     dph,r1
2322 120000    7159            lcall   __divsint
2325 A882      7160            mov     r0,dpl
2327 A983      7161            mov     r1,dph
2329 D005      7162            pop     ar5
232B D004      7163            pop     ar4
232D C3        7164            clr     c
232E E8        7165            mov     a,r0
232F 95E8      7166            subb    a,_Joystick_Control_sloc3_1_0
2331 E9        7167            mov     a,r1
2332 6480      7168            xrl     a,#0x80
2334 85E9F0    7169            mov     b,(_Joystick_Control_sloc3_1_0 + 1)
2337 63F080    7170            xrl     b,#0x80
233A 95F0      7171            subb    a,b
233C D001      7172            pop     ar1
233E D000      7173            pop     ar0
2340 5000      7174            jnc     L044074?
2342 020000    7175            ljmp    L044018?
2345           7176   L044074?:
2345           7177   ;        main.c:1302: pwm_left = vy_error; 
2345 C000      7178            push    ar0
2347 C001      7179            push    ar1
2349 90D318    7180            mov     dptr,#_Joystick_Control_vy_error_1_244
234C E0        7181            movx    a,@dptr
234D F5E8      7182            mov     _Joystick_Control_sloc3_1_0,a
234F A3        7183            inc     dptr
2350 E0        7184            movx    a,@dptr
2351 F5E9      7185            mov     (_Joystick_Control_sloc3_1_0 + 1),a
2353 905190    7186            mov     dptr,#_pwm_left
2356 E5E8      7187            mov     a,_Joystick_Control_sloc3_1_0
2358 F0        7188            movx    @dptr,a
2359           7189   ;        main.c:1303: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
2359 904E40    7190            mov     dptr,#_pwm_corr
235C E0        7191            movx    a,@dptr
235D F588      7192            mov     _Joystick_Control_sloc5_1_0,a
235F A3        7193            inc     dptr
2360 E0        7194            movx    a,@dptr
2361 F589      7195            mov     (_Joystick_Control_sloc5_1_0 + 1),a
2363 A3        7196            inc     dptr
2364 E0        7197            movx    a,@dptr
2365 F58A      7198            mov     (_Joystick_Control_sloc5_1_0 + 2),a
2367 A3        7199            inc     dptr
2368 E0        7200            movx    a,@dptr
2369 F58B      7201            mov     (_Joystick_Control_sloc5_1_0 + 3),a
236B 85E882    7202            mov     dpl,_Joystick_Control_sloc3_1_0
236E 85E983    7203            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
2371 C004      7204            push    ar4
2373 C005      7205            push    ar5
2375 C000      7206            push    ar0
2377 C001      7207            push    ar1
2379 120000    7208            lcall   ___sint2fs
237C AE82      7209            mov     r6,dpl
237E AF83      7210            mov     r7,dph
2380 AAF0      7211            mov     r2,b
2382 FB        7212            mov     r3,a
2383 C006      7213            push    ar6
2385 C007      7214            push    ar7
2387 C002      7215            push    ar2
2389 C003      7216            push    ar3
238B 858882    7217            mov     dpl,_Joystick_Control_sloc5_1_0
238E 858983    7218            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2391 858AF0    7219            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2394 E58B      7220            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2396 120000    7221            lcall   ___fsmul
2399 AA82      7222            mov     r2,dpl
239B AB83      7223            mov     r3,dph
239D AEF0      7224            mov     r6,b
239F FF        7225            mov     r7,a
23A0 E581      7226            mov     a,sp
23A2 24FC      7227            add     a,#0xfc
23A4 F581      7228            mov     sp,a
23A6 C002      7229            push    ar2
23A8 C003      7230            push    ar3
23AA C006      7231            push    ar6
23AC C007      7232            push    ar7
23AE 900000    7233            mov     dptr,#0x0000
23B1 75F0C8    7234            mov     b,#0xC8
23B4 7442      7235            mov     a,#0x42
23B6 120000    7236            lcall   ___fsmul
23B9 858288    7237            mov     _Joystick_Control_sloc5_1_0,dpl
23BC 858389    7238            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
23BF 85F08A    7239            mov     (_Joystick_Control_sloc5_1_0 + 2),b
23C2 F58B      7240            mov     (_Joystick_Control_sloc5_1_0 + 3),a
23C4 E581      7241            mov     a,sp
23C6 24FC      7242            add     a,#0xfc
23C8 F581      7243            mov     sp,a
23CA D001      7244            pop     ar1
23CC D000      7245            pop     ar0
23CE D005      7246            pop     ar5
23D0 D004      7247            pop     ar4
23D2 E5E8      7248            mov     a,_Joystick_Control_sloc3_1_0
23D4 2C        7249            add     a,r4
23D5 F582      7250            mov     dpl,a
23D7 E5E9      7251            mov     a,(_Joystick_Control_sloc3_1_0 + 1)
23D9 3D        7252            addc    a,r5
23DA F583      7253            mov     dph,a
23DC C004      7254            push    ar4
23DE C005      7255            push    ar5
23E0 120000    7256            lcall   ___sint2fs
23E3 A882      7257            mov     r0,dpl
23E5 A983      7258            mov     r1,dph
23E7 AAF0      7259            mov     r2,b
23E9 FB        7260            mov     r3,a
23EA C000      7261            push    ar0
23EC C001      7262            push    ar1
23EE C000      7263            push    ar0
23F0 C001      7264            push    ar1
23F2 C002      7265            push    ar2
23F4 C003      7266            push    ar3
23F6 858882    7267            mov     dpl,_Joystick_Control_sloc5_1_0
23F9 858983    7268            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
23FC 858AF0    7269            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
23FF E58B      7270            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2401 120000    7271            lcall   ___fsdiv
2404 AA82      7272            mov     r2,dpl
2406 AB83      7273            mov     r3,dph
2408 AEF0      7274            mov     r6,b
240A FF        7275            mov     r7,a
240B E581      7276            mov     a,sp
240D 24FC      7277            add     a,#0xfc
240F F581      7278            mov     sp,a
2411 8A82      7279            mov     dpl,r2
2413 8B83      7280            mov     dph,r3
2415 8EF0      7281            mov     b,r6
2417 EF        7282            mov     a,r7
2418 120000    7283            lcall   ___fs2uchar
241B E582      7284            mov     a,dpl
241D D001      7285            pop     ar1
241F D000      7286            pop     ar0
2421 D005      7287            pop     ar5
2423 D004      7288            pop     ar4
2425 905150    7289            mov     dptr,#_pwm_right
2428 F0        7290            movx    @dptr,a
2429 D001      7291            pop     ar1
242B D000      7292            pop     ar0
242D 020000    7293            ljmp    L044019?
2430           7294   L044018?:
2430           7295   ;        main.c:1306: pwm_left = vx_error; 
2430 C000      7296            push    ar0
2432 C001      7297            push    ar1
2434 905190    7298            mov     dptr,#_pwm_left
2437 EC        7299            mov     a,r4
2438 F0        7300            movx    @dptr,a
2439           7301   ;        main.c:1307: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
2439 904E40    7302            mov     dptr,#_pwm_corr
243C E0        7303            movx    a,@dptr
243D F588      7304            mov     _Joystick_Control_sloc5_1_0,a
243F A3        7305            inc     dptr
2440 E0        7306            movx    a,@dptr
2441 F589      7307            mov     (_Joystick_Control_sloc5_1_0 + 1),a
2443 A3        7308            inc     dptr
2444 E0        7309            movx    a,@dptr
2445 F58A      7310            mov     (_Joystick_Control_sloc5_1_0 + 2),a
2447 A3        7311            inc     dptr
2448 E0        7312            movx    a,@dptr
2449 F58B      7313            mov     (_Joystick_Control_sloc5_1_0 + 3),a
244B 8C82      7314            mov     dpl,r4
244D 8D83      7315            mov     dph,r5
244F C004      7316            push    ar4
2451 C005      7317            push    ar5
2453 120000    7318            lcall   ___sint2fs
2456 A882      7319            mov     r0,dpl
2458 A983      7320            mov     r1,dph
245A AAF0      7321            mov     r2,b
245C FB        7322            mov     r3,a
245D C000      7323            push    ar0
245F C001      7324            push    ar1
2461 C000      7325            push    ar0
2463 C001      7326            push    ar1
2465 C002      7327            push    ar2
2467 C003      7328            push    ar3
2469 858882    7329            mov     dpl,_Joystick_Control_sloc5_1_0
246C 858983    7330            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
246F 858AF0    7331            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2472 E58B      7332            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2474 120000    7333            lcall   ___fsmul
2477 AA82      7334            mov     r2,dpl
2479 AB83      7335            mov     r3,dph
247B AEF0      7336            mov     r6,b
247D FF        7337            mov     r7,a
247E E581      7338            mov     a,sp
2480 24FC      7339            add     a,#0xfc
2482 F581      7340            mov     sp,a
2484 C002      7341            push    ar2
2486 C003      7342            push    ar3
2488 C006      7343            push    ar6
248A C007      7344            push    ar7
248C 900000    7345            mov     dptr,#0x0000
248F 75F0C8    7346            mov     b,#0xC8
2492 7442      7347            mov     a,#0x42
2494 120000    7348            lcall   ___fsmul
2497 858288    7349            mov     _Joystick_Control_sloc5_1_0,dpl
249A 858389    7350            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
249D 85F08A    7351            mov     (_Joystick_Control_sloc5_1_0 + 2),b
24A0 F58B      7352            mov     (_Joystick_Control_sloc5_1_0 + 3),a
24A2 E581      7353            mov     a,sp
24A4 24FC      7354            add     a,#0xfc
24A6 F581      7355            mov     sp,a
24A8 D001      7356            pop     ar1
24AA D000      7357            pop     ar0
24AC D005      7358            pop     ar5
24AE D004      7359            pop     ar4
24B0 90D318    7360            mov     dptr,#_Joystick_Control_vy_error_1_244
24B3 E0        7361            movx    a,@dptr
24B4 F8        7362            mov     r0,a
24B5 A3        7363            inc     dptr
24B6 E0        7364            movx    a,@dptr
24B7 F9        7365            mov     r1,a
24B8 E8        7366            mov     a,r0
24B9 2C        7367            add     a,r4
24BA F582      7368            mov     dpl,a
24BC E9        7369            mov     a,r1
24BD 3D        7370            addc    a,r5
24BE F583      7371            mov     dph,a
24C0 C004      7372            push    ar4
24C2 C005      7373            push    ar5
24C4 120000    7374            lcall   ___sint2fs
24C7 A882      7375            mov     r0,dpl
24C9 A983      7376            mov     r1,dph
24CB AAF0      7377            mov     r2,b
24CD FB        7378            mov     r3,a
24CE C000      7379            push    ar0
24D0 C001      7380            push    ar1
24D2 C000      7381            push    ar0
24D4 C001      7382            push    ar1
24D6 C002      7383            push    ar2
24D8 C003      7384            push    ar3
24DA 858882    7385            mov     dpl,_Joystick_Control_sloc5_1_0
24DD 858983    7386            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
24E0 858AF0    7387            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
24E3 E58B      7388            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
24E5 120000    7389            lcall   ___fsdiv
24E8 AA82      7390            mov     r2,dpl
24EA AB83      7391            mov     r3,dph
24EC AEF0      7392            mov     r6,b
24EE FF        7393            mov     r7,a
24EF E581      7394            mov     a,sp
24F1 24FC      7395            add     a,#0xfc
24F3 F581      7396            mov     sp,a
24F5 8A82      7397            mov     dpl,r2
24F7 8B83      7398            mov     dph,r3
24F9 8EF0      7399            mov     b,r6
24FB EF        7400            mov     a,r7
24FC 120000    7401            lcall   ___fs2uchar
24FF E582      7402            mov     a,dpl
2501 D001      7403            pop     ar1
2503 D000      7404            pop     ar0
2505 D005      7405            pop     ar5
2507 D004      7406            pop     ar4
2509 905150    7407            mov     dptr,#_pwm_right
250C F0        7408            movx    @dptr,a
250D           7409   ;        main.c:1356: return curr_angle; 
250D D001      7410            pop     ar1
250F D000      7411            pop     ar0
2511           7412   ;        main.c:1307: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
2511           7413   L044019?:
2511           7414   ;        main.c:1309: curr_angle += angle_diff * 1.5; // TUNE THIS 
2511 C000      7415            push    ar0
2513 C001      7416            push    ar1
2515 C004      7417            push    ar4
2517 C005      7418            push    ar5
2519 C000      7419            push    ar0
251B C001      7420            push    ar1
251D C038      7421            push    _Joystick_Control_sloc4_1_0
251F C039      7422            push    (_Joystick_Control_sloc4_1_0 + 1)
2521 C03A      7423            push    (_Joystick_Control_sloc4_1_0 + 2)
2523 C03B      7424            push    (_Joystick_Control_sloc4_1_0 + 3)
2525 900000    7425            mov     dptr,#0x0000
2528 75F0C0    7426            mov     b,#0xC0
252B 743F      7427            mov     a,#0x3F
252D 120000    7428            lcall   ___fsmul
2530 858288    7429            mov     _Joystick_Control_sloc5_1_0,dpl
2533 858389    7430            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
2536 85F08A    7431            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2539 F58B      7432            mov     (_Joystick_Control_sloc5_1_0 + 3),a
253B E581      7433            mov     a,sp
253D 24FC      7434            add     a,#0xfc
253F F581      7435            mov     sp,a
2541 D001      7436            pop     ar1
2543 D000      7437            pop     ar0
2545 904E00    7438            mov     dptr,#_curr_angle
2548 E0        7439            movx    a,@dptr
2549 F8        7440            mov     r0,a
254A A3        7441            inc     dptr
254B E0        7442            movx    a,@dptr
254C F9        7443            mov     r1,a
254D A3        7444            inc     dptr
254E E0        7445            movx    a,@dptr
254F FA        7446            mov     r2,a
2550 A3        7447            inc     dptr
2551 E0        7448            movx    a,@dptr
2552 FB        7449            mov     r3,a
2553 C000      7450            push    ar0
2555 C001      7451            push    ar1
2557 C088      7452            push    _Joystick_Control_sloc5_1_0
2559 C089      7453            push    (_Joystick_Control_sloc5_1_0 + 1)
255B C08A      7454            push    (_Joystick_Control_sloc5_1_0 + 2)
255D C08B      7455            push    (_Joystick_Control_sloc5_1_0 + 3)
255F 8882      7456            mov     dpl,r0
2561 8983      7457            mov     dph,r1
2563 8AF0      7458            mov     b,r2
2565 EB        7459            mov     a,r3
2566 120000    7460            lcall   ___fsadd
2569 AA82      7461            mov     r2,dpl
256B AB83      7462            mov     r3,dph
256D AEF0      7463            mov     r6,b
256F FF        7464            mov     r7,a
2570 E581      7465            mov     a,sp
2572 24FC      7466            add     a,#0xfc
2574 F581      7467            mov     sp,a
2576 D001      7468            pop     ar1
2578 D000      7469            pop     ar0
257A D005      7470            pop     ar5
257C D004      7471            pop     ar4
257E 904E00    7472            mov     dptr,#_curr_angle
2581 EA        7473            mov     a,r2
2582 F0        7474            movx    @dptr,a
2583 A3        7475            inc     dptr
2584 EB        7476            mov     a,r3
2585 F0        7477            movx    @dptr,a
2586 A3        7478            inc     dptr
2587 EE        7479            mov     a,r6
2588 F0        7480            movx    @dptr,a
2589 A3        7481            inc     dptr
258A EF        7482            mov     a,r7
258B F0        7483            movx    @dptr,a
258C D001      7484            pop     ar1
258E D000      7485            pop     ar0
2590 020000    7486            ljmp    L044027?
2593           7487   L044024?:
2593           7488   ;        main.c:1313: if (vy*100<=vy_thres*100/2){
2593 904F50    7489            mov     dptr,#_vy
2596 E0        7490            movx    a,@dptr
2597 F500      7491            mov     __mulint_PARM_2,a
2599 A3        7492            inc     dptr
259A E0        7493            movx    a,@dptr
259B F501      7494            mov     (__mulint_PARM_2 + 1),a
259D 900064    7495            mov     dptr,#0x0064
25A0 C004      7496            push    ar4
25A2 C005      7497            push    ar5
25A4 C000      7498            push    ar0
25A6 C001      7499            push    ar1
25A8 120000    7500            lcall   __mulint
25AB AA82      7501            mov     r2,dpl
25AD AB83      7502            mov     r3,dph
25AF D001      7503            pop     ar1
25B1 D000      7504            pop     ar0
25B3 D005      7505            pop     ar5
25B5 D004      7506            pop     ar4
25B7 904FD0    7507            mov     dptr,#_vy_thres
25BA E0        7508            movx    a,@dptr
25BB F500      7509            mov     __mulint_PARM_2,a
25BD A3        7510            inc     dptr
25BE E0        7511            movx    a,@dptr
25BF F501      7512            mov     (__mulint_PARM_2 + 1),a
25C1 900064    7513            mov     dptr,#0x0064
25C4 C002      7514            push    ar2
25C6 C003      7515            push    ar3
25C8 C004      7516            push    ar4
25CA C005      7517            push    ar5
25CC C000      7518            push    ar0
25CE C001      7519            push    ar1
25D0 120000    7520            lcall   __mulint
25D3 AE82      7521            mov     r6,dpl
25D5 AF83      7522            mov     r7,dph
25D7 750002    7523            mov     __divsint_PARM_2,#0x02
25DA E4        7524            clr     a
25DB F501      7525            mov     (__divsint_PARM_2 + 1),a
25DD 8E82      7526            mov     dpl,r6
25DF 8F83      7527            mov     dph,r7
25E1 120000    7528            lcall   __divsint
25E4 AE82      7529            mov     r6,dpl
25E6 AF83      7530            mov     r7,dph
25E8 D001      7531            pop     ar1
25EA D000      7532            pop     ar0
25EC D005      7533            pop     ar5
25EE D004      7534            pop     ar4
25F0 D003      7535            pop     ar3
25F2 D002      7536            pop     ar2
25F4 C3        7537            clr     c
25F5 EE        7538            mov     a,r6
25F6 9A        7539            subb    a,r2
25F7 EF        7540            mov     a,r7
25F8 6480      7541            xrl     a,#0x80
25FA 8BF0      7542            mov     b,r3
25FC 63F080    7543            xrl     b,#0x80
25FF 95F0      7544            subb    a,b
2601 5000      7545            jnc     L044075?
2603 020000    7546            ljmp    L044021?
2606           7547   L044075?:
2606           7548   ;        main.c:1314: pwm_left = vy_error*100/(vx_error+vy_error);
2606 90D318    7549            mov     dptr,#_Joystick_Control_vy_error_1_244
2609 E0        7550            movx    a,@dptr
260A FA        7551            mov     r2,a
260B A3        7552            inc     dptr
260C E0        7553            movx    a,@dptr
260D FB        7554            mov     r3,a
260E 8A00      7555            mov     __mulint_PARM_2,r2
2610 8B01      7556            mov     (__mulint_PARM_2 + 1),r3
2612 900064    7557            mov     dptr,#0x0064
2615 C002      7558            push    ar2
2617 C003      7559            push    ar3
2619 C004      7560            push    ar4
261B C005      7561            push    ar5
261D C000      7562            push    ar0
261F C001      7563            push    ar1
2621 120000    7564            lcall   __mulint
2624 AE82      7565            mov     r6,dpl
2626 AF83      7566            mov     r7,dph
2628 D001      7567            pop     ar1
262A D000      7568            pop     ar0
262C D005      7569            pop     ar5
262E D004      7570            pop     ar4
2630 D003      7571            pop     ar3
2632 D002      7572            pop     ar2
2634 EA        7573            mov     a,r2
2635 2C        7574            add     a,r4
2636 F500      7575            mov     __divsint_PARM_2,a
2638 EB        7576            mov     a,r3
2639 3D        7577            addc    a,r5
263A F501      7578            mov     (__divsint_PARM_2 + 1),a
263C 8E82      7579            mov     dpl,r6
263E 8F83      7580            mov     dph,r7
2640 C002      7581            push    ar2
2642 C003      7582            push    ar3
2644 C004      7583            push    ar4
2646 C005      7584            push    ar5
2648 C000      7585            push    ar0
264A C001      7586            push    ar1
264C 120000    7587            lcall   __divsint
264F AE82      7588            mov     r6,dpl
2651 D001      7589            pop     ar1
2653 D000      7590            pop     ar0
2655 D005      7591            pop     ar5
2657 D004      7592            pop     ar4
2659 D003      7593            pop     ar3
265B D002      7594            pop     ar2
265D 905190    7595            mov     dptr,#_pwm_left
2660 EE        7596            mov     a,r6
2661 F0        7597            movx    @dptr,a
2662           7598   ;        main.c:1315: pwm_right = vy_error*pwm_corr; 
2662 8A82      7599            mov     dpl,r2
2664 8B83      7600            mov     dph,r3
2666 C004      7601            push    ar4
2668 C005      7602            push    ar5
266A C000      7603            push    ar0
266C C001      7604            push    ar1
266E 120000    7605            lcall   ___sint2fs
2671 AA82      7606            mov     r2,dpl
2673 AB83      7607            mov     r3,dph
2675 AEF0      7608            mov     r6,b
2677 FF        7609            mov     r7,a
2678 904E40    7610            mov     dptr,#_pwm_corr
267B E0        7611            movx    a,@dptr
267C C0E0      7612            push    acc
267E A3        7613            inc     dptr
267F E0        7614            movx    a,@dptr
2680 C0E0      7615            push    acc
2682 A3        7616            inc     dptr
2683 E0        7617            movx    a,@dptr
2684 C0E0      7618            push    acc
2686 A3        7619            inc     dptr
2687 E0        7620            movx    a,@dptr
2688 C0E0      7621            push    acc
268A 8A82      7622            mov     dpl,r2
268C 8B83      7623            mov     dph,r3
268E 8EF0      7624            mov     b,r6
2690 EF        7625            mov     a,r7
2691 120000    7626            lcall   ___fsmul
2694 AA82      7627            mov     r2,dpl
2696 AB83      7628            mov     r3,dph
2698 AEF0      7629            mov     r6,b
269A FF        7630            mov     r7,a
269B E581      7631            mov     a,sp
269D 24FC      7632            add     a,#0xfc
269F F581      7633            mov     sp,a
26A1 8A82      7634            mov     dpl,r2
26A3 8B83      7635            mov     dph,r3
26A5 8EF0      7636            mov     b,r6
26A7 EF        7637            mov     a,r7
26A8 120000    7638            lcall   ___fs2uchar
26AB E582      7639            mov     a,dpl
26AD D001      7640            pop     ar1
26AF D000      7641            pop     ar0
26B1 D005      7642            pop     ar5
26B3 D004      7643            pop     ar4
26B5 905150    7644            mov     dptr,#_pwm_right
26B8 F0        7645            movx    @dptr,a
26B9 020000    7646            ljmp    L044022?
26BC           7647   L044021?:
26BC           7648   ;        main.c:1318: pwm_left = vx_error*100/(vx_error+vy_error);
26BC 8C00      7649            mov     __mulint_PARM_2,r4
26BE 8D01      7650            mov     (__mulint_PARM_2 + 1),r5
26C0 900064    7651            mov     dptr,#0x0064
26C3 C004      7652            push    ar4
26C5 C005      7653            push    ar5
26C7 C000      7654            push    ar0
26C9 C001      7655            push    ar1
26CB 120000    7656            lcall   __mulint
26CE AA82      7657            mov     r2,dpl
26D0 AB83      7658            mov     r3,dph
26D2 D001      7659            pop     ar1
26D4 D000      7660            pop     ar0
26D6 D005      7661            pop     ar5
26D8 D004      7662            pop     ar4
26DA 90D318    7663            mov     dptr,#_Joystick_Control_vy_error_1_244
26DD E0        7664            movx    a,@dptr
26DE FE        7665            mov     r6,a
26DF A3        7666            inc     dptr
26E0 E0        7667            movx    a,@dptr
26E1 FF        7668            mov     r7,a
26E2 EE        7669            mov     a,r6
26E3 2C        7670            add     a,r4
26E4 F500      7671            mov     __divsint_PARM_2,a
26E6 EF        7672            mov     a,r7
26E7 3D        7673            addc    a,r5
26E8 F501      7674            mov     (__divsint_PARM_2 + 1),a
26EA 8A82      7675            mov     dpl,r2
26EC 8B83      7676            mov     dph,r3
26EE C004      7677            push    ar4
26F0 C005      7678            push    ar5
26F2 C000      7679            push    ar0
26F4 C001      7680            push    ar1
26F6 120000    7681            lcall   __divsint
26F9 AA82      7682            mov     r2,dpl
26FB D001      7683            pop     ar1
26FD D000      7684            pop     ar0
26FF D005      7685            pop     ar5
2701 D004      7686            pop     ar4
2703 905190    7687            mov     dptr,#_pwm_left
2706 EA        7688            mov     a,r2
2707 F0        7689            movx    @dptr,a
2708           7690   ;        main.c:1319: pwm_right = vx_error*pwm_corr; 
2708 8C82      7691            mov     dpl,r4
270A 8D83      7692            mov     dph,r5
270C C004      7693            push    ar4
270E C005      7694            push    ar5
2710 C000      7695            push    ar0
2712 C001      7696            push    ar1
2714 120000    7697            lcall   ___sint2fs
2717 AA82      7698            mov     r2,dpl
2719 AB83      7699            mov     r3,dph
271B AEF0      7700            mov     r6,b
271D FF        7701            mov     r7,a
271E 904E40    7702            mov     dptr,#_pwm_corr
2721 E0        7703            movx    a,@dptr
2722 C0E0      7704            push    acc
2724 A3        7705            inc     dptr
2725 E0        7706            movx    a,@dptr
2726 C0E0      7707            push    acc
2728 A3        7708            inc     dptr
2729 E0        7709            movx    a,@dptr
272A C0E0      7710            push    acc
272C A3        7711            inc     dptr
272D E0        7712            movx    a,@dptr
272E C0E0      7713            push    acc
2730 8A82      7714            mov     dpl,r2
2732 8B83      7715            mov     dph,r3
2734 8EF0      7716            mov     b,r6
2736 EF        7717            mov     a,r7
2737 120000    7718            lcall   ___fsmul
273A AA82      7719            mov     r2,dpl
273C AB83      7720            mov     r3,dph
273E AEF0      7721            mov     r6,b
2740 FF        7722            mov     r7,a
2741 E581      7723            mov     a,sp
2743 24FC      7724            add     a,#0xfc
2745 F581      7725            mov     sp,a
2747 8A82      7726            mov     dpl,r2
2749 8B83      7727            mov     dph,r3
274B 8EF0      7728            mov     b,r6
274D EF        7729            mov     a,r7
274E 120000    7730            lcall   ___fs2uchar
2751 E582      7731            mov     a,dpl
2753 D001      7732            pop     ar1
2755 D000      7733            pop     ar0
2757 D005      7734            pop     ar5
2759 D004      7735            pop     ar4
275B 905150    7736            mov     dptr,#_pwm_right
275E F0        7737            movx    @dptr,a
275F           7738   L044022?:
275F           7739   ;        main.c:1321: curr_angle -= angle_diff * 1.5; // TUNE THIS 
275F C000      7740            push    ar0
2761 C001      7741            push    ar1
2763 C004      7742            push    ar4
2765 C005      7743            push    ar5
2767 C000      7744            push    ar0
2769 C001      7745            push    ar1
276B C038      7746            push    _Joystick_Control_sloc4_1_0
276D C039      7747            push    (_Joystick_Control_sloc4_1_0 + 1)
276F C03A      7748            push    (_Joystick_Control_sloc4_1_0 + 2)
2771 C03B      7749            push    (_Joystick_Control_sloc4_1_0 + 3)
2773 900000    7750            mov     dptr,#0x0000
2776 75F0C0    7751            mov     b,#0xC0
2779 743F      7752            mov     a,#0x3F
277B 120000    7753            lcall   ___fsmul
277E 858288    7754            mov     _Joystick_Control_sloc5_1_0,dpl
2781 858389    7755            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
2784 85F08A    7756            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2787 F58B      7757            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2789 E581      7758            mov     a,sp
278B 24FC      7759            add     a,#0xfc
278D F581      7760            mov     sp,a
278F D001      7761            pop     ar1
2791 D000      7762            pop     ar0
2793 904E00    7763            mov     dptr,#_curr_angle
2796 E0        7764            movx    a,@dptr
2797 F8        7765            mov     r0,a
2798 A3        7766            inc     dptr
2799 E0        7767            movx    a,@dptr
279A F9        7768            mov     r1,a
279B A3        7769            inc     dptr
279C E0        7770            movx    a,@dptr
279D FA        7771            mov     r2,a
279E A3        7772            inc     dptr
279F E0        7773            movx    a,@dptr
27A0 FB        7774            mov     r3,a
27A1 C000      7775            push    ar0
27A3 C001      7776            push    ar1
27A5 C088      7777            push    _Joystick_Control_sloc5_1_0
27A7 C089      7778            push    (_Joystick_Control_sloc5_1_0 + 1)
27A9 C08A      7779            push    (_Joystick_Control_sloc5_1_0 + 2)
27AB C08B      7780            push    (_Joystick_Control_sloc5_1_0 + 3)
27AD 8882      7781            mov     dpl,r0
27AF 8983      7782            mov     dph,r1
27B1 8AF0      7783            mov     b,r2
27B3 EB        7784            mov     a,r3
27B4 120000    7785            lcall   ___fssub
27B7 AA82      7786            mov     r2,dpl
27B9 AB83      7787            mov     r3,dph
27BB AEF0      7788            mov     r6,b
27BD FF        7789            mov     r7,a
27BE E581      7790            mov     a,sp
27C0 24FC      7791            add     a,#0xfc
27C2 F581      7792            mov     sp,a
27C4 D001      7793            pop     ar1
27C6 D000      7794            pop     ar0
27C8 D005      7795            pop     ar5
27CA D004      7796            pop     ar4
27CC 904E00    7797            mov     dptr,#_curr_angle
27CF EA        7798            mov     a,r2
27D0 F0        7799            movx    @dptr,a
27D1 A3        7800            inc     dptr
27D2 EB        7801            mov     a,r3
27D3 F0        7802            movx    @dptr,a
27D4 A3        7803            inc     dptr
27D5 EE        7804            mov     a,r6
27D6 F0        7805            movx    @dptr,a
27D7 A3        7806            inc     dptr
27D8 EF        7807            mov     a,r7
27D9 F0        7808            movx    @dptr,a
27DA           7809   ;        main.c:1356: return curr_angle; 
27DA D001      7810            pop     ar1
27DC D000      7811            pop     ar0
27DE           7812   ;        main.c:1321: curr_angle -= angle_diff * 1.5; // TUNE THIS 
27DE           7813   L044027?:
27DE           7814   ;        main.c:1325: if (vy_err<0){
27DE E9        7815            mov     a,r1
27DF 20E7D0    7816            jb      acc.7,L044076?
27E2 020000    7817            ljmp    L044040?
27E5           7818   L044076?:
27E5           7819   ;        main.c:1326: L_motor_dir = 1; 
27E5 905110    7820            mov     dptr,#_L_motor_dir
27E8 7401      7821            mov     a,#0x01
27EA F0        7822            movx    @dptr,a
27EB           7823   ;        main.c:1327: R_motor_dir = 1; 
27EB 9050D0    7824            mov     dptr,#_R_motor_dir
27EE 7401      7825            mov     a,#0x01
27F0 F0        7826            movx    @dptr,a
27F1           7827   ;        main.c:1329: if (vx_err>0){
27F1 90D368    7828            mov     dptr,#_Joystick_Control_vx_err_1_244
27F4 E0        7829            movx    a,@dptr
27F5 FA        7830            mov     r2,a
27F6 A3        7831            inc     dptr
27F7 E0        7832            movx    a,@dptr
27F8 FB        7833            mov     r3,a
27F9 C3        7834            clr     c
27FA E4        7835            clr     a
27FB 9A        7836            subb    a,r2
27FC E4        7837            clr     a
27FD 6480      7838            xrl     a,#0x80
27FF 8BF0      7839            mov     b,r3
2801 63F080    7840            xrl     b,#0x80
2804 95F0      7841            subb    a,b
2806 4000      7842            jc      L044077?
2808 020000    7843            ljmp    L044035?
280B           7844   L044077?:
280B           7845   ;        main.c:1330: if (vy*100<=vy_thres*100/2){
280B 904F50    7846            mov     dptr,#_vy
280E E0        7847            movx    a,@dptr
280F F500      7848            mov     __mulint_PARM_2,a
2811 A3        7849            inc     dptr
2812 E0        7850            movx    a,@dptr
2813 F501      7851            mov     (__mulint_PARM_2 + 1),a
2815 900064    7852            mov     dptr,#0x0064
2818 C004      7853            push    ar4
281A C005      7854            push    ar5
281C 120000    7855            lcall   __mulint
281F AA82      7856            mov     r2,dpl
2821 AB83      7857            mov     r3,dph
2823 D005      7858            pop     ar5
2825 D004      7859            pop     ar4
2827 904FD0    7860            mov     dptr,#_vy_thres
282A E0        7861            movx    a,@dptr
282B F500      7862            mov     __mulint_PARM_2,a
282D A3        7863            inc     dptr
282E E0        7864            movx    a,@dptr
282F F501      7865            mov     (__mulint_PARM_2 + 1),a
2831 900064    7866            mov     dptr,#0x0064
2834 C002      7867            push    ar2
2836 C003      7868            push    ar3
2838 C004      7869            push    ar4
283A C005      7870            push    ar5
283C 120000    7871            lcall   __mulint
283F AE82      7872            mov     r6,dpl
2841 AF83      7873            mov     r7,dph
2843 750002    7874            mov     __divsint_PARM_2,#0x02
2846 E4        7875            clr     a
2847 F501      7876            mov     (__divsint_PARM_2 + 1),a
2849 8E82      7877            mov     dpl,r6
284B 8F83      7878            mov     dph,r7
284D 120000    7879            lcall   __divsint
2850 AE82      7880            mov     r6,dpl
2852 AF83      7881            mov     r7,dph
2854 D005      7882            pop     ar5
2856 D004      7883            pop     ar4
2858 D003      7884            pop     ar3
285A D002      7885            pop     ar2
285C C3        7886            clr     c
285D EE        7887            mov     a,r6
285E 9A        7888            subb    a,r2
285F EF        7889            mov     a,r7
2860 6480      7890            xrl     a,#0x80
2862 8BF0      7891            mov     b,r3
2864 63F080    7892            xrl     b,#0x80
2867 95F0      7893            subb    a,b
2869 5000      7894            jnc     L044078?
286B 020000    7895            ljmp    L044029?
286E           7896   L044078?:
286E           7897   ;        main.c:1331: pwm_left = vy_error; 
286E 90D318    7898            mov     dptr,#_Joystick_Control_vy_error_1_244
2871 E0        7899            movx    a,@dptr
2872 FA        7900            mov     r2,a
2873 A3        7901            inc     dptr
2874 E0        7902            movx    a,@dptr
2875 FB        7903            mov     r3,a
2876 905190    7904            mov     dptr,#_pwm_left
2879 EA        7905            mov     a,r2
287A F0        7906            movx    @dptr,a
287B           7907   ;        main.c:1332: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
287B 904E40    7908            mov     dptr,#_pwm_corr
287E E0        7909            movx    a,@dptr
287F F588      7910            mov     _Joystick_Control_sloc5_1_0,a
2881 A3        7911            inc     dptr
2882 E0        7912            movx    a,@dptr
2883 F589      7913            mov     (_Joystick_Control_sloc5_1_0 + 1),a
2885 A3        7914            inc     dptr
2886 E0        7915            movx    a,@dptr
2887 F58A      7916            mov     (_Joystick_Control_sloc5_1_0 + 2),a
2889 A3        7917            inc     dptr
288A E0        7918            movx    a,@dptr
288B F58B      7919            mov     (_Joystick_Control_sloc5_1_0 + 3),a
288D 8A82      7920            mov     dpl,r2
288F 8B83      7921            mov     dph,r3
2891 C002      7922            push    ar2
2893 C003      7923            push    ar3
2895 C004      7924            push    ar4
2897 C005      7925            push    ar5
2899 120000    7926            lcall   ___sint2fs
289C AE82      7927            mov     r6,dpl
289E AF83      7928            mov     r7,dph
28A0 A8F0      7929            mov     r0,b
28A2 F9        7930            mov     r1,a
28A3 C006      7931            push    ar6
28A5 C007      7932            push    ar7
28A7 C000      7933            push    ar0
28A9 C001      7934            push    ar1
28AB 858882    7935            mov     dpl,_Joystick_Control_sloc5_1_0
28AE 858983    7936            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
28B1 858AF0    7937            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
28B4 E58B      7938            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
28B6 120000    7939            lcall   ___fsmul
28B9 AE82      7940            mov     r6,dpl
28BB AF83      7941            mov     r7,dph
28BD A8F0      7942            mov     r0,b
28BF F9        7943            mov     r1,a
28C0 E581      7944            mov     a,sp
28C2 24FC      7945            add     a,#0xfc
28C4 F581      7946            mov     sp,a
28C6 C006      7947            push    ar6
28C8 C007      7948            push    ar7
28CA C000      7949            push    ar0
28CC C001      7950            push    ar1
28CE 900000    7951            mov     dptr,#0x0000
28D1 75F0C8    7952            mov     b,#0xC8
28D4 7442      7953            mov     a,#0x42
28D6 120000    7954            lcall   ___fsmul
28D9 858288    7955            mov     _Joystick_Control_sloc5_1_0,dpl
28DC 858389    7956            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
28DF 85F08A    7957            mov     (_Joystick_Control_sloc5_1_0 + 2),b
28E2 F58B      7958            mov     (_Joystick_Control_sloc5_1_0 + 3),a
28E4 E581      7959            mov     a,sp
28E6 24FC      7960            add     a,#0xfc
28E8 F581      7961            mov     sp,a
28EA D005      7962            pop     ar5
28EC D004      7963            pop     ar4
28EE D003      7964            pop     ar3
28F0 D002      7965            pop     ar2
28F2 EA        7966            mov     a,r2
28F3 2C        7967            add     a,r4
28F4 F582      7968            mov     dpl,a
28F6 EB        7969            mov     a,r3
28F7 3D        7970            addc    a,r5
28F8 F583      7971            mov     dph,a
28FA 120000    7972            lcall   ___sint2fs
28FD AA82      7973            mov     r2,dpl
28FF AB83      7974            mov     r3,dph
2901 AEF0      7975            mov     r6,b
2903 FF        7976            mov     r7,a
2904 C002      7977            push    ar2
2906 C003      7978            push    ar3
2908 C006      7979            push    ar6
290A C007      7980            push    ar7
290C 858882    7981            mov     dpl,_Joystick_Control_sloc5_1_0
290F 858983    7982            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2912 858AF0    7983            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2915 E58B      7984            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2917 120000    7985            lcall   ___fsdiv
291A AA82      7986            mov     r2,dpl
291C AB83      7987            mov     r3,dph
291E AEF0      7988            mov     r6,b
2920 FF        7989            mov     r7,a
2921 E581      7990            mov     a,sp
2923 24FC      7991            add     a,#0xfc
2925 F581      7992            mov     sp,a
2927 8A82      7993            mov     dpl,r2
2929 8B83      7994            mov     dph,r3
292B 8EF0      7995            mov     b,r6
292D EF        7996            mov     a,r7
292E 120000    7997            lcall   ___fs2uchar
2931 E582      7998            mov     a,dpl
2933 905150    7999            mov     dptr,#_pwm_right
2936 F0        8000            movx    @dptr,a
2937 020000    8001            ljmp    L044030?
293A           8002   L044029?:
293A           8003   ;        main.c:1335: pwm_left = vx_error; 
293A 905190    8004            mov     dptr,#_pwm_left
293D EC        8005            mov     a,r4
293E F0        8006            movx    @dptr,a
293F           8007   ;        main.c:1336: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
293F 904E40    8008            mov     dptr,#_pwm_corr
2942 E0        8009            movx    a,@dptr
2943 F588      8010            mov     _Joystick_Control_sloc5_1_0,a
2945 A3        8011            inc     dptr
2946 E0        8012            movx    a,@dptr
2947 F589      8013            mov     (_Joystick_Control_sloc5_1_0 + 1),a
2949 A3        8014            inc     dptr
294A E0        8015            movx    a,@dptr
294B F58A      8016            mov     (_Joystick_Control_sloc5_1_0 + 2),a
294D A3        8017            inc     dptr
294E E0        8018            movx    a,@dptr
294F F58B      8019            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2951 8C82      8020            mov     dpl,r4
2953 8D83      8021            mov     dph,r5
2955 C004      8022            push    ar4
2957 C005      8023            push    ar5
2959 120000    8024            lcall   ___sint2fs
295C A882      8025            mov     r0,dpl
295E A983      8026            mov     r1,dph
2960 AAF0      8027            mov     r2,b
2962 FB        8028            mov     r3,a
2963 C000      8029            push    ar0
2965 C001      8030            push    ar1
2967 C002      8031            push    ar2
2969 C003      8032            push    ar3
296B 858882    8033            mov     dpl,_Joystick_Control_sloc5_1_0
296E 858983    8034            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2971 858AF0    8035            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2974 E58B      8036            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2976 120000    8037            lcall   ___fsmul
2979 AA82      8038            mov     r2,dpl
297B AB83      8039            mov     r3,dph
297D AEF0      8040            mov     r6,b
297F FF        8041            mov     r7,a
2980 E581      8042            mov     a,sp
2982 24FC      8043            add     a,#0xfc
2984 F581      8044            mov     sp,a
2986 C002      8045            push    ar2
2988 C003      8046            push    ar3
298A C006      8047            push    ar6
298C C007      8048            push    ar7
298E 900000    8049            mov     dptr,#0x0000
2991 75F0C8    8050            mov     b,#0xC8
2994 7442      8051            mov     a,#0x42
2996 120000    8052            lcall   ___fsmul
2999 858288    8053            mov     _Joystick_Control_sloc5_1_0,dpl
299C 858389    8054            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
299F 85F08A    8055            mov     (_Joystick_Control_sloc5_1_0 + 2),b
29A2 F58B      8056            mov     (_Joystick_Control_sloc5_1_0 + 3),a
29A4 E581      8057            mov     a,sp
29A6 24FC      8058            add     a,#0xfc
29A8 F581      8059            mov     sp,a
29AA D005      8060            pop     ar5
29AC D004      8061            pop     ar4
29AE 90D318    8062            mov     dptr,#_Joystick_Control_vy_error_1_244
29B1 E0        8063            movx    a,@dptr
29B2 F8        8064            mov     r0,a
29B3 A3        8065            inc     dptr
29B4 E0        8066            movx    a,@dptr
29B5 F9        8067            mov     r1,a
29B6 E8        8068            mov     a,r0
29B7 2C        8069            add     a,r4
29B8 F582      8070            mov     dpl,a
29BA E9        8071            mov     a,r1
29BB 3D        8072            addc    a,r5
29BC F583      8073            mov     dph,a
29BE 120000    8074            lcall   ___sint2fs
29C1 A882      8075            mov     r0,dpl
29C3 A983      8076            mov     r1,dph
29C5 AAF0      8077            mov     r2,b
29C7 FB        8078            mov     r3,a
29C8 C000      8079            push    ar0
29CA C001      8080            push    ar1
29CC C002      8081            push    ar2
29CE C003      8082            push    ar3
29D0 858882    8083            mov     dpl,_Joystick_Control_sloc5_1_0
29D3 858983    8084            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
29D6 858AF0    8085            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
29D9 E58B      8086            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
29DB 120000    8087            lcall   ___fsdiv
29DE AA82      8088            mov     r2,dpl
29E0 AB83      8089            mov     r3,dph
29E2 AEF0      8090            mov     r6,b
29E4 FF        8091            mov     r7,a
29E5 E581      8092            mov     a,sp
29E7 24FC      8093            add     a,#0xfc
29E9 F581      8094            mov     sp,a
29EB 8A82      8095            mov     dpl,r2
29ED 8B83      8096            mov     dph,r3
29EF 8EF0      8097            mov     b,r6
29F1 EF        8098            mov     a,r7
29F2 120000    8099            lcall   ___fs2uchar
29F5 E582      8100            mov     a,dpl
29F7 905150    8101            mov     dptr,#_pwm_right
29FA F0        8102            movx    @dptr,a
29FB           8103   L044030?:
29FB           8104   ;        main.c:1338: curr_angle -= angle_diff * 1.4; // TUNE THIS 
29FB C038      8105            push    _Joystick_Control_sloc4_1_0
29FD C039      8106            push    (_Joystick_Control_sloc4_1_0 + 1)
29FF C03A      8107            push    (_Joystick_Control_sloc4_1_0 + 2)
2A01 C03B      8108            push    (_Joystick_Control_sloc4_1_0 + 3)
2A03 903333    8109            mov     dptr,#0x3333
2A06 75F0B3    8110            mov     b,#0xB3
2A09 743F      8111            mov     a,#0x3F
2A0B 120000    8112            lcall   ___fsmul
2A0E 858288    8113            mov     _Joystick_Control_sloc5_1_0,dpl
2A11 858389    8114            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
2A14 85F08A    8115            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2A17 F58B      8116            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2A19 E581      8117            mov     a,sp
2A1B 24FC      8118            add     a,#0xfc
2A1D F581      8119            mov     sp,a
2A1F 904E00    8120            mov     dptr,#_curr_angle
2A22 E0        8121            movx    a,@dptr
2A23 F8        8122            mov     r0,a
2A24 A3        8123            inc     dptr
2A25 E0        8124            movx    a,@dptr
2A26 F9        8125            mov     r1,a
2A27 A3        8126            inc     dptr
2A28 E0        8127            movx    a,@dptr
2A29 FA        8128            mov     r2,a
2A2A A3        8129            inc     dptr
2A2B E0        8130            movx    a,@dptr
2A2C FB        8131            mov     r3,a
2A2D C088      8132            push    _Joystick_Control_sloc5_1_0
2A2F C089      8133            push    (_Joystick_Control_sloc5_1_0 + 1)
2A31 C08A      8134            push    (_Joystick_Control_sloc5_1_0 + 2)
2A33 C08B      8135            push    (_Joystick_Control_sloc5_1_0 + 3)
2A35 8882      8136            mov     dpl,r0
2A37 8983      8137            mov     dph,r1
2A39 8AF0      8138            mov     b,r2
2A3B EB        8139            mov     a,r3
2A3C 120000    8140            lcall   ___fssub
2A3F AA82      8141            mov     r2,dpl
2A41 AB83      8142            mov     r3,dph
2A43 AEF0      8143            mov     r6,b
2A45 FF        8144            mov     r7,a
2A46 E581      8145            mov     a,sp
2A48 24FC      8146            add     a,#0xfc
2A4A F581      8147            mov     sp,a
2A4C 904E00    8148            mov     dptr,#_curr_angle
2A4F EA        8149            mov     a,r2
2A50 F0        8150            movx    @dptr,a
2A51 A3        8151            inc     dptr
2A52 EB        8152            mov     a,r3
2A53 F0        8153            movx    @dptr,a
2A54 A3        8154            inc     dptr
2A55 EE        8155            mov     a,r6
2A56 F0        8156            movx    @dptr,a
2A57 A3        8157            inc     dptr
2A58 EF        8158            mov     a,r7
2A59 F0        8159            movx    @dptr,a
2A5A 020000    8160            ljmp    L044040?
2A5D           8161   L044035?:
2A5D           8162   ;        main.c:1342: if (vy*100<=vy_thres*100/2){
2A5D 904F50    8163            mov     dptr,#_vy
2A60 E0        8164            movx    a,@dptr
2A61 F500      8165            mov     __mulint_PARM_2,a
2A63 A3        8166            inc     dptr
2A64 E0        8167            movx    a,@dptr
2A65 F501      8168            mov     (__mulint_PARM_2 + 1),a
2A67 900064    8169            mov     dptr,#0x0064
2A6A C004      8170            push    ar4
2A6C C005      8171            push    ar5
2A6E 120000    8172            lcall   __mulint
2A71 AA82      8173            mov     r2,dpl
2A73 AB83      8174            mov     r3,dph
2A75 D005      8175            pop     ar5
2A77 D004      8176            pop     ar4
2A79 904FD0    8177            mov     dptr,#_vy_thres
2A7C E0        8178            movx    a,@dptr
2A7D F500      8179            mov     __mulint_PARM_2,a
2A7F A3        8180            inc     dptr
2A80 E0        8181            movx    a,@dptr
2A81 F501      8182            mov     (__mulint_PARM_2 + 1),a
2A83 900064    8183            mov     dptr,#0x0064
2A86 C002      8184            push    ar2
2A88 C003      8185            push    ar3
2A8A C004      8186            push    ar4
2A8C C005      8187            push    ar5
2A8E 120000    8188            lcall   __mulint
2A91 AE82      8189            mov     r6,dpl
2A93 AF83      8190            mov     r7,dph
2A95 750002    8191            mov     __divsint_PARM_2,#0x02
2A98 E4        8192            clr     a
2A99 F501      8193            mov     (__divsint_PARM_2 + 1),a
2A9B 8E82      8194            mov     dpl,r6
2A9D 8F83      8195            mov     dph,r7
2A9F 120000    8196            lcall   __divsint
2AA2 AE82      8197            mov     r6,dpl
2AA4 AF83      8198            mov     r7,dph
2AA6 D005      8199            pop     ar5
2AA8 D004      8200            pop     ar4
2AAA D003      8201            pop     ar3
2AAC D002      8202            pop     ar2
2AAE C3        8203            clr     c
2AAF EE        8204            mov     a,r6
2AB0 9A        8205            subb    a,r2
2AB1 EF        8206            mov     a,r7
2AB2 6480      8207            xrl     a,#0x80
2AB4 8BF0      8208            mov     b,r3
2AB6 63F080    8209            xrl     b,#0x80
2AB9 95F0      8210            subb    a,b
2ABB 5000      8211            jnc     L044079?
2ABD 020000    8212            ljmp    L044032?
2AC0           8213   L044079?:
2AC0           8214   ;        main.c:1343: pwm_left = vy_error*100/(vx_error+vy_error);
2AC0 90D318    8215            mov     dptr,#_Joystick_Control_vy_error_1_244
2AC3 E0        8216            movx    a,@dptr
2AC4 FA        8217            mov     r2,a
2AC5 A3        8218            inc     dptr
2AC6 E0        8219            movx    a,@dptr
2AC7 FB        8220            mov     r3,a
2AC8 8A00      8221            mov     __mulint_PARM_2,r2
2ACA 8B01      8222            mov     (__mulint_PARM_2 + 1),r3
2ACC 900064    8223            mov     dptr,#0x0064
2ACF C002      8224            push    ar2
2AD1 C003      8225            push    ar3
2AD3 C004      8226            push    ar4
2AD5 C005      8227            push    ar5
2AD7 120000    8228            lcall   __mulint
2ADA AE82      8229            mov     r6,dpl
2ADC AF83      8230            mov     r7,dph
2ADE D005      8231            pop     ar5
2AE0 D004      8232            pop     ar4
2AE2 D003      8233            pop     ar3
2AE4 D002      8234            pop     ar2
2AE6 EA        8235            mov     a,r2
2AE7 2C        8236            add     a,r4
2AE8 F500      8237            mov     __divsint_PARM_2,a
2AEA EB        8238            mov     a,r3
2AEB 3D        8239            addc    a,r5
2AEC F501      8240            mov     (__divsint_PARM_2 + 1),a
2AEE 8E82      8241            mov     dpl,r6
2AF0 8F83      8242            mov     dph,r7
2AF2 C002      8243            push    ar2
2AF4 C003      8244            push    ar3
2AF6 120000    8245            lcall   __divsint
2AF9 AE82      8246            mov     r6,dpl
2AFB D003      8247            pop     ar3
2AFD D002      8248            pop     ar2
2AFF 905190    8249            mov     dptr,#_pwm_left
2B02 EE        8250            mov     a,r6
2B03 F0        8251            movx    @dptr,a
2B04           8252   ;        main.c:1344: pwm_right =pwm_corr*vy_error; 
2B04 904E40    8253            mov     dptr,#_pwm_corr
2B07 E0        8254            movx    a,@dptr
2B08 F588      8255            mov     _Joystick_Control_sloc5_1_0,a
2B0A A3        8256            inc     dptr
2B0B E0        8257            movx    a,@dptr
2B0C F589      8258            mov     (_Joystick_Control_sloc5_1_0 + 1),a
2B0E A3        8259            inc     dptr
2B0F E0        8260            movx    a,@dptr
2B10 F58A      8261            mov     (_Joystick_Control_sloc5_1_0 + 2),a
2B12 A3        8262            inc     dptr
2B13 E0        8263            movx    a,@dptr
2B14 F58B      8264            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2B16 8A82      8265            mov     dpl,r2
2B18 8B83      8266            mov     dph,r3
2B1A 120000    8267            lcall   ___sint2fs
2B1D AA82      8268            mov     r2,dpl
2B1F AB83      8269            mov     r3,dph
2B21 AEF0      8270            mov     r6,b
2B23 FF        8271            mov     r7,a
2B24 C002      8272            push    ar2
2B26 C003      8273            push    ar3
2B28 C006      8274            push    ar6
2B2A C007      8275            push    ar7
2B2C 858882    8276            mov     dpl,_Joystick_Control_sloc5_1_0
2B2F 858983    8277            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2B32 858AF0    8278            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2B35 E58B      8279            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2B37 120000    8280            lcall   ___fsmul
2B3A AA82      8281            mov     r2,dpl
2B3C AB83      8282            mov     r3,dph
2B3E AEF0      8283            mov     r6,b
2B40 FF        8284            mov     r7,a
2B41 E581      8285            mov     a,sp
2B43 24FC      8286            add     a,#0xfc
2B45 F581      8287            mov     sp,a
2B47 8A82      8288            mov     dpl,r2
2B49 8B83      8289            mov     dph,r3
2B4B 8EF0      8290            mov     b,r6
2B4D EF        8291            mov     a,r7
2B4E 120000    8292            lcall   ___fs2uchar
2B51 E582      8293            mov     a,dpl
2B53 905150    8294            mov     dptr,#_pwm_right
2B56 F0        8295            movx    @dptr,a
2B57 020000    8296            ljmp    L044033?
2B5A           8297   L044032?:
2B5A           8298   ;        main.c:1347: pwm_left = vx_error*100/(vx_error+vy_error);
2B5A 8C00      8299            mov     __mulint_PARM_2,r4
2B5C 8D01      8300            mov     (__mulint_PARM_2 + 1),r5
2B5E 900064    8301            mov     dptr,#0x0064
2B61 C004      8302            push    ar4
2B63 C005      8303            push    ar5
2B65 120000    8304            lcall   __mulint
2B68 AA82      8305            mov     r2,dpl
2B6A AB83      8306            mov     r3,dph
2B6C D005      8307            pop     ar5
2B6E D004      8308            pop     ar4
2B70 90D318    8309            mov     dptr,#_Joystick_Control_vy_error_1_244
2B73 E0        8310            movx    a,@dptr
2B74 FE        8311            mov     r6,a
2B75 A3        8312            inc     dptr
2B76 E0        8313            movx    a,@dptr
2B77 FF        8314            mov     r7,a
2B78 EE        8315            mov     a,r6
2B79 2C        8316            add     a,r4
2B7A F500      8317            mov     __divsint_PARM_2,a
2B7C EF        8318            mov     a,r7
2B7D 3D        8319            addc    a,r5
2B7E F501      8320            mov     (__divsint_PARM_2 + 1),a
2B80 8A82      8321            mov     dpl,r2
2B82 8B83      8322            mov     dph,r3
2B84 C004      8323            push    ar4
2B86 C005      8324            push    ar5
2B88 120000    8325            lcall   __divsint
2B8B AA82      8326            mov     r2,dpl
2B8D D005      8327            pop     ar5
2B8F D004      8328            pop     ar4
2B91 905190    8329            mov     dptr,#_pwm_left
2B94 EA        8330            mov     a,r2
2B95 F0        8331            movx    @dptr,a
2B96           8332   ;        main.c:1348: pwm_right = pwm_corr*vx_error; 
2B96 904E40    8333            mov     dptr,#_pwm_corr
2B99 E0        8334            movx    a,@dptr
2B9A FA        8335            mov     r2,a
2B9B A3        8336            inc     dptr
2B9C E0        8337            movx    a,@dptr
2B9D FB        8338            mov     r3,a
2B9E A3        8339            inc     dptr
2B9F E0        8340            movx    a,@dptr
2BA0 FE        8341            mov     r6,a
2BA1 A3        8342            inc     dptr
2BA2 E0        8343            movx    a,@dptr
2BA3 FF        8344            mov     r7,a
2BA4 8C82      8345            mov     dpl,r4
2BA6 8D83      8346            mov     dph,r5
2BA8 C002      8347            push    ar2
2BAA C003      8348            push    ar3
2BAC C006      8349            push    ar6
2BAE C007      8350            push    ar7
2BB0 120000    8351            lcall   ___sint2fs
2BB3 AC82      8352            mov     r4,dpl
2BB5 AD83      8353            mov     r5,dph
2BB7 A8F0      8354            mov     r0,b
2BB9 F9        8355            mov     r1,a
2BBA D007      8356            pop     ar7
2BBC D006      8357            pop     ar6
2BBE D003      8358            pop     ar3
2BC0 D002      8359            pop     ar2
2BC2 C004      8360            push    ar4
2BC4 C005      8361            push    ar5
2BC6 C000      8362            push    ar0
2BC8 C001      8363            push    ar1
2BCA 8A82      8364            mov     dpl,r2
2BCC 8B83      8365            mov     dph,r3
2BCE 8EF0      8366            mov     b,r6
2BD0 EF        8367            mov     a,r7
2BD1 120000    8368            lcall   ___fsmul
2BD4 AA82      8369            mov     r2,dpl
2BD6 AB83      8370            mov     r3,dph
2BD8 ACF0      8371            mov     r4,b
2BDA FD        8372            mov     r5,a
2BDB E581      8373            mov     a,sp
2BDD 24FC      8374            add     a,#0xfc
2BDF F581      8375            mov     sp,a
2BE1 8A82      8376            mov     dpl,r2
2BE3 8B83      8377            mov     dph,r3
2BE5 8CF0      8378            mov     b,r4
2BE7 ED        8379            mov     a,r5
2BE8 120000    8380            lcall   ___fs2uchar
2BEB E582      8381            mov     a,dpl
2BED 905150    8382            mov     dptr,#_pwm_right
2BF0 F0        8383            movx    @dptr,a
2BF1           8384   L044033?:
2BF1           8385   ;        main.c:1350: curr_angle += angle_diff * 1.4; // TUNE THIS 
2BF1 C038      8386            push    _Joystick_Control_sloc4_1_0
2BF3 C039      8387            push    (_Joystick_Control_sloc4_1_0 + 1)
2BF5 C03A      8388            push    (_Joystick_Control_sloc4_1_0 + 2)
2BF7 C03B      8389            push    (_Joystick_Control_sloc4_1_0 + 3)
2BF9 903333    8390            mov     dptr,#0x3333
2BFC 75F0B3    8391            mov     b,#0xB3
2BFF 743F      8392            mov     a,#0x3F
2C01 120000    8393            lcall   ___fsmul
2C04 AA82      8394            mov     r2,dpl
2C06 AB83      8395            mov     r3,dph
2C08 ACF0      8396            mov     r4,b
2C0A FD        8397            mov     r5,a
2C0B E581      8398            mov     a,sp
2C0D 24FC      8399            add     a,#0xfc
2C0F F581      8400            mov     sp,a
2C11 904E00    8401            mov     dptr,#_curr_angle
2C14 E0        8402            movx    a,@dptr
2C15 FE        8403            mov     r6,a
2C16 A3        8404            inc     dptr
2C17 E0        8405            movx    a,@dptr
2C18 FF        8406            mov     r7,a
2C19 A3        8407            inc     dptr
2C1A E0        8408            movx    a,@dptr
2C1B F8        8409            mov     r0,a
2C1C A3        8410            inc     dptr
2C1D E0        8411            movx    a,@dptr
2C1E F9        8412            mov     r1,a
2C1F C002      8413            push    ar2
2C21 C003      8414            push    ar3
2C23 C004      8415            push    ar4
2C25 C005      8416            push    ar5
2C27 8E82      8417            mov     dpl,r6
2C29 8F83      8418            mov     dph,r7
2C2B 88F0      8419            mov     b,r0
2C2D E9        8420            mov     a,r1
2C2E 120000    8421            lcall   ___fsadd
2C31 AA82      8422            mov     r2,dpl
2C33 AB83      8423            mov     r3,dph
2C35 ACF0      8424            mov     r4,b
2C37 FD        8425            mov     r5,a
2C38 E581      8426            mov     a,sp
2C3A 24FC      8427            add     a,#0xfc
2C3C F581      8428            mov     sp,a
2C3E 904E00    8429            mov     dptr,#_curr_angle
2C41 EA        8430            mov     a,r2
2C42 F0        8431            movx    @dptr,a
2C43 A3        8432            inc     dptr
2C44 EB        8433            mov     a,r3
2C45 F0        8434            movx    @dptr,a
2C46 A3        8435            inc     dptr
2C47 EC        8436            mov     a,r4
2C48 F0        8437            movx    @dptr,a
2C49 A3        8438            inc     dptr
2C4A ED        8439            mov     a,r5
2C4B F0        8440            movx    @dptr,a
2C4C           8441   L044040?:
2C4C           8442   ;        main.c:1355: last_raw_angle = raw_angle; 
2C4C 904DC0    8443            mov     dptr,#_raw_angle
2C4F E0        8444            movx    a,@dptr
2C50 FA        8445            mov     r2,a
2C51 A3        8446            inc     dptr
2C52 E0        8447            movx    a,@dptr
2C53 FB        8448            mov     r3,a
2C54 A3        8449            inc     dptr
2C55 E0        8450            movx    a,@dptr
2C56 FC        8451            mov     r4,a
2C57 A3        8452            inc     dptr
2C58 E0        8453            movx    a,@dptr
2C59 FD        8454            mov     r5,a
2C5A 904D80    8455            mov     dptr,#_last_raw_angle
2C5D EA        8456            mov     a,r2
2C5E F0        8457            movx    @dptr,a
2C5F A3        8458            inc     dptr
2C60 EB        8459            mov     a,r3
2C61 F0        8460            movx    @dptr,a
2C62 A3        8461            inc     dptr
2C63 EC        8462            mov     a,r4
2C64 F0        8463            movx    @dptr,a
2C65 A3        8464            inc     dptr
2C66 ED        8465            mov     a,r5
2C67 F0        8466            movx    @dptr,a
2C68           8467   ;        main.c:1356: return curr_angle; 
2C68 904E00    8468            mov     dptr,#_curr_angle
2C6B E0        8469            movx    a,@dptr
2C6C FA        8470            mov     r2,a
2C6D A3        8471            inc     dptr
2C6E E0        8472            movx    a,@dptr
2C6F FB        8473            mov     r3,a
2C70 A3        8474            inc     dptr
2C71 E0        8475            movx    a,@dptr
2C72 FC        8476            mov     r4,a
2C73 A3        8477            inc     dptr
2C74 E0        8478            movx    a,@dptr
2C75 8A82      8479            mov     dpl,r2
2C77 8B83      8480            mov     dph,r3
2C79 8CF0      8481            mov     b,r4
2C7B 22        8482            ret
2C7C           8483   ;------------------------------------------------------------
2C7C           8484   ;Allocation info for local variables in function 'main'
2C7C           8485   ;------------------------------------------------------------
2C7C           8486   ;c                         Allocated with name '_main_c_1_267'
2C7C           8487   ;angle_count               Allocated with name '_main_angle_count_1_267'
2C7C           8488   ;------------------------------------------------------------
2C7C           8489   ;        main.c:1360: void main (void)
2C7C           8490   ;        -----------------------------------------
2C7C           8491   ;         function main
2C7C           8492   ;        -----------------------------------------
2C7C           8493   _main:
2C7C           8494   ;        main.c:1366: Init_all();
2C7C 120000    8495            lcall   _Init_all
2C7F           8496   ;        main.c:1367: BMM150_Init();
2C7F 120000    8497            lcall   _BMM150_Init
2C82           8498   ;        main.c:1368: waitms(500);
2C82 9001F4    8499            mov     dptr,#0x01F4
2C85 120000    8500            lcall   _waitms
2C88           8501   ;        main.c:1369: UART1_Init(9600);
2C88 902580    8502            mov     dptr,#0x2580
2C8B E4        8503            clr     a
2C8C F5F0      8504            mov     b,a
2C8E 120000    8505            lcall   _UART1_Init
2C91           8506   ;        main.c:1371: ReceptionOff();
2C91 120000    8507            lcall   _ReceptionOff
2C94           8508   ;        main.c:1374: SendATCommand("AT+VER\r\n");
2C94 902410    8509            mov     dptr,#__str_8
2C97 75F080    8510            mov     b,#0x80
2C9A 120000    8511            lcall   _SendATCommand
2C9D           8512   ;        main.c:1375: SendATCommand("AT+BAUD\r\n");
2C9D 902450    8513            mov     dptr,#__str_9
2CA0 75F080    8514            mov     b,#0x80
2CA3 120000    8515            lcall   _SendATCommand
2CA6           8516   ;        main.c:1376: SendATCommand("AT+RFID\r\n");
2CA6 902490    8517            mov     dptr,#__str_10
2CA9 75F080    8518            mov     b,#0x80
2CAC 120000    8519            lcall   _SendATCommand
2CAF           8520   ;        main.c:1377: SendATCommand("AT+DVID\r\n");
2CAF 9024D0    8521            mov     dptr,#__str_11
2CB2 75F080    8522            mov     b,#0x80
2CB5 120000    8523            lcall   _SendATCommand
2CB8           8524   ;        main.c:1378: SendATCommand("AT+RFC002\r\n");
2CB8 902510    8525            mov     dptr,#__str_12
2CBB 75F080    8526            mov     b,#0x80
2CBE 120000    8527            lcall   _SendATCommand
2CC1           8528   ;        main.c:1379: SendATCommand("AT+POWE\r\n");
2CC1 902550    8529            mov     dptr,#__str_13
2CC4 75F080    8530            mov     b,#0x80
2CC7 120000    8531            lcall   _SendATCommand
2CCA           8532   ;        main.c:1380: SendATCommand("AT+CLSS\r\n");
2CCA 902590    8533            mov     dptr,#__str_14
2CCD 75F080    8534            mov     b,#0x80
2CD0 120000    8535            lcall   _SendATCommand
2CD3           8536   ;        main.c:1381: SendATCommand("AT+DVIDEF11\r\n");  
2CD3 9025D0    8537            mov     dptr,#__str_15
2CD6 75F080    8538            mov     b,#0x80
2CD9 120000    8539            lcall   _SendATCommand
2CDC           8540   ;        main.c:1384: L_bridge_1 = 0; 
2CDC C2A1      8541            clr     _P2_1
2CDE           8542   ;        main.c:1385: L_bridge_2 = 0; 
2CDE C2A2      8543            clr     _P2_2
2CE0           8544   ;        main.c:1386: R_bridge_1 = 0; 
2CE0 C2A4      8545            clr     _P2_4
2CE2           8546   ;        main.c:1387: R_bridge_2 = 0; 
2CE2 C2A3      8547            clr     _P2_3
2CE4           8548   ;        main.c:1388: vx = 0; 
2CE4 904F90    8549            mov     dptr,#_vx
2CE7 E4        8550            clr     a
2CE8 F0        8551            movx    @dptr,a
2CE9 A3        8552            inc     dptr
2CEA F0        8553            movx    @dptr,a
2CEB           8554   ;        main.c:1389: vy = 0; 
2CEB 904F50    8555            mov     dptr,#_vy
2CEE E4        8556            clr     a
2CEF F0        8557            movx    @dptr,a
2CF0 A3        8558            inc     dptr
2CF1 F0        8559            movx    @dptr,a
2CF2           8560   ;        main.c:1392: curr_angle = Read_angle();
2CF2 120000    8561            lcall   _Read_angle
2CF5 AA82      8562            mov     r2,dpl
2CF7 AB83      8563            mov     r3,dph
2CF9 ACF0      8564            mov     r4,b
2CFB FD        8565            mov     r5,a
2CFC 904E00    8566            mov     dptr,#_curr_angle
2CFF EA        8567            mov     a,r2
2D00 F0        8568            movx    @dptr,a
2D01 A3        8569            inc     dptr
2D02 EB        8570            mov     a,r3
2D03 F0        8571            movx    @dptr,a
2D04 A3        8572            inc     dptr
2D05 EC        8573            mov     a,r4
2D06 F0        8574            movx    @dptr,a
2D07 A3        8575            inc     dptr
2D08 ED        8576            mov     a,r5
2D09 F0        8577            movx    @dptr,a
2D0A           8578   ;        main.c:1395: waitms(1000);
2D0A 9003E8    8579            mov     dptr,#0x03E8
2D0D 120000    8580            lcall   _waitms
2D10           8581   ;        main.c:1396: while(1){  
2D10           8582   L045016?:
2D10           8583   ;        main.c:1400: if(pick=='1'){
2D10 904C00    8584            mov     dptr,#_pick
2D13 E0        8585            movx    a,@dptr
2D14 FA        8586            mov     r2,a
2D15 BA3150    8587            cjne    r2,#0x31,L045002?
2D18           8588   ;        main.c:1401: servo_pick();
2D18 120000    8589            lcall   _servo_pick
2D1B           8590   ;        main.c:1402: waitms(1000);
2D1B 9003E8    8591            mov     dptr,#0x03E8
2D1E 120000    8592            lcall   _waitms
2D21           8593   ;        main.c:1403: pick = 0;
2D21 904C00    8594            mov     dptr,#_pick
2D24 E4        8595            clr     a
2D25 F0        8596            movx    @dptr,a
2D26           8597   L045002?:
2D26           8598   ;        main.c:1406: if(auto_mode){
2D26 904C40    8599            mov     dptr,#_auto_mode
2D29 E0        8600            movx    a,@dptr
2D2A FA        8601            mov     r2,a
2D2B A3        8602            inc     dptr
2D2C E0        8603            movx    a,@dptr
2D2D FB        8604            mov     r3,a
2D2E 4A        8605            orl     a,r2
2D2F 6000      8606            jz      L045004?
2D31           8607   ;        main.c:1407: Auto_mode_slave();
2D31 120000    8608            lcall   _Auto_mode_slave
2D34           8609   ;        main.c:1408: auto_mode = 0;
2D34 904C40    8610            mov     dptr,#_auto_mode
2D37 E4        8611            clr     a
2D38 F0        8612            movx    @dptr,a
2D39 A3        8613            inc     dptr
2D3A F0        8614            movx    @dptr,a
2D3B           8615   L045004?:
2D3B           8616   ;        main.c:1411: if(RXU1()) // Something has arrived
2D3B 120000    8617            lcall   _RXU1
2D3E 5000      8618            jnc     L045016?
2D40           8619   ;        main.c:1413: c=getchar1();
2D40 120000    8620            lcall   _getchar1
2D43 AA82      8621            mov     r2,dpl
2D45           8622   ;        main.c:1414: if(c=='!') // Master is sending message
2D45 BA21D0    8623            cjne    r2,#0x21,L045031?
2D48 8000      8624            sjmp    L045032?
2D4A           8625   L045031?:
2D4A 020000    8626            ljmp    L045011?
2D4D           8627   L045032?:
2D4D           8628   ;        main.c:1416: getstr1(buff, sizeof(buff)-1);
2D4D 756013    8629            mov     _getstr1_PARM_2,#0x13
2D50 9056D0    8630            mov     dptr,#_buff
2D53 75F040    8631            mov     b,#0x40
2D56 120000    8632            lcall   _getstr1
2D59           8633   ;        main.c:1417: if(strlen(buff)==11)
2D59 9056D0    8634            mov     dptr,#_buff
2D5C 75F040    8635            mov     b,#0x40
2D5F 120000    8636            lcall   _strlen
2D62 AB82      8637            mov     r3,dpl
2D64 AC83      8638            mov     r4,dph
2D66 BB0B90    8639            cjne    r3,#0x0B,L045033?
2D69 BC0090    8640            cjne    r4,#0x00,L045033?
2D6C 8000      8641            sjmp    L045034?
2D6E           8642   L045033?:
2D6E 020000    8643            ljmp    L045006?
2D71           8644   L045034?:
2D71           8645   ;        main.c:1421: sscanf(buff,"%03d,%03d,%01d,%01d",&vx, &vy,&pick,&auto_mode);
2D71 7440      8646            mov     a,#_auto_mode
2D73 C0E0      8647            push    acc
2D75 744C      8648            mov     a,#(_auto_mode >> 8)
2D77 C0E0      8649            push    acc
2D79 E4        8650            clr     a
2D7A C0E0      8651            push    acc
2D7C 7400      8652            mov     a,#_pick
2D7E C0E0      8653            push    acc
2D80 744C      8654            mov     a,#(_pick >> 8)
2D82 C0E0      8655            push    acc
2D84 E4        8656            clr     a
2D85 C0E0      8657            push    acc
2D87 7450      8658            mov     a,#_vy
2D89 C0E0      8659            push    acc
2D8B 744F      8660            mov     a,#(_vy >> 8)
2D8D C0E0      8661            push    acc
2D8F E4        8662            clr     a
2D90 C0E0      8663            push    acc
2D92 7490      8664            mov     a,#_vx
2D94 C0E0      8665            push    acc
2D96 744F      8666            mov     a,#(_vx >> 8)
2D98 C0E0      8667            push    acc
2D9A E4        8668            clr     a
2D9B C0E0      8669            push    acc
2D9D 74C0      8670            mov     a,#__str_5
2D9F C0E0      8671            push    acc
2DA1 7417      8672            mov     a,#(__str_5 >> 8)
2DA3 C0E0      8673            push    acc
2DA5 7480      8674            mov     a,#0x80
2DA7 C0E0      8675            push    acc
2DA9 74D0      8676            mov     a,#_buff
2DAB C0E0      8677            push    acc
2DAD 7456      8678            mov     a,#(_buff >> 8)
2DAF C0E0      8679            push    acc
2DB1 7440      8680            mov     a,#0x40
2DB3 C0E0      8681            push    acc
2DB5 120000    8682            lcall   _sscanf
2DB8 E581      8683            mov     a,sp
2DBA 24EE      8684            add     a,#0xee
2DBC F581      8685            mov     sp,a
2DBE           8686   ;        main.c:1422: pick = buff[8];
2DBE 904C00    8687            mov     dptr,#_pick
2DC1 78D8      8688            mov     r0,#(_buff + 0x0008)
2DC3 E6        8689            mov     a,@r0
2DC4 F0        8690            movx    @dptr,a
2DC5           8691   ;        main.c:1424: curr_angle = Joystick_Control(&vx, &vy);
2DC5 752050    8692            mov     _Joystick_Control_PARM_2,#_vy
2DC8 75214F    8693            mov     (_Joystick_Control_PARM_2 + 1),#(_vy >> 8)
2DCB 752200    8694            mov     (_Joystick_Control_PARM_2 + 2),#0x00
2DCE 904F90    8695            mov     dptr,#_vx
2DD1 75F000    8696            mov     b,#0x00
2DD4 120000    8697            lcall   _Joystick_Control
2DD7 AB82      8698            mov     r3,dpl
2DD9 AC83      8699            mov     r4,dph
2DDB ADF0      8700            mov     r5,b
2DDD FE        8701            mov     r6,a
2DDE 904E00    8702            mov     dptr,#_curr_angle
2DE1 EB        8703            mov     a,r3
2DE2 F0        8704            movx    @dptr,a
2DE3 A3        8705            inc     dptr
2DE4 EC        8706            mov     a,r4
2DE5 F0        8707            movx    @dptr,a
2DE6 A3        8708            inc     dptr
2DE7 ED        8709            mov     a,r5
2DE8 F0        8710            movx    @dptr,a
2DE9 A3        8711            inc     dptr
2DEA EE        8712            mov     a,r6
2DEB F0        8713            movx    @dptr,a
2DEC 020000    8714            ljmp    L045016?
2DEF           8715   L045006?:
2DEF           8716   ;        main.c:1427: printf("*** BAD MESSAGE ***: %s\r\n", buff);
2DEF 74D0      8717            mov     a,#_buff
2DF1 C0E0      8718            push    acc
2DF3 7456      8719            mov     a,#(_buff >> 8)
2DF5 C0E0      8720            push    acc
2DF7 7440      8721            mov     a,#0x40
2DF9 C0E0      8722            push    acc
2DFB 7450      8723            mov     a,#__str_16
2DFD C0E0      8724            push    acc
2DFF 7428      8725            mov     a,#(__str_16 >> 8)
2E01 C0E0      8726            push    acc
2E03 7480      8727            mov     a,#0x80
2E05 C0E0      8728            push    acc
2E07 120000    8729            lcall   _printf
2E0A E581      8730            mov     a,sp
2E0C 24FA      8731            add     a,#0xfa
2E0E F581      8732            mov     sp,a
2E10 020000    8733            ljmp    L045016?
2E13           8734   L045011?:
2E13           8735   ;        main.c:1430: else if(c=='@') // Master wants slave data
2E13 BA4090    8736            cjne    r2,#0x40,L045035?
2E16 8000      8737            sjmp    L045036?
2E18           8738   L045035?:
2E18 020000    8739            ljmp    L045016?
2E1B           8740   L045036?:
2E1B           8741   ;        main.c:1432: sprintf(buff, "0,00,%04ld,%05d,%03d\n", freq100, weight, (int)curr_angle);
2E1B 904E00    8742            mov     dptr,#_curr_angle
2E1E E0        8743            movx    a,@dptr
2E1F FA        8744            mov     r2,a
2E20 A3        8745            inc     dptr
2E21 E0        8746            movx    a,@dptr
2E22 FB        8747            mov     r3,a
2E23 A3        8748            inc     dptr
2E24 E0        8749            movx    a,@dptr
2E25 FC        8750            mov     r4,a
2E26 A3        8751            inc     dptr
2E27 E0        8752            movx    a,@dptr
2E28 8A82      8753            mov     dpl,r2
2E2A 8B83      8754            mov     dph,r3
2E2C 8CF0      8755            mov     b,r4
2E2E 120000    8756            lcall   ___fs2sint
2E31 AA82      8757            mov     r2,dpl
2E33 AB83      8758            mov     r3,dph
2E35 C002      8759            push    ar2
2E37 C003      8760            push    ar3
2E39 904CC0    8761            mov     dptr,#_weight
2E3C E0        8762            movx    a,@dptr
2E3D C0E0      8763            push    acc
2E3F A3        8764            inc     dptr
2E40 E0        8765            movx    a,@dptr
2E41 C0E0      8766            push    acc
2E43 905690    8767            mov     dptr,#_freq100
2E46 E0        8768            movx    a,@dptr
2E47 C0E0      8769            push    acc
2E49 A3        8770            inc     dptr
2E4A E0        8771            movx    a,@dptr
2E4B C0E0      8772            push    acc
2E4D A3        8773            inc     dptr
2E4E E0        8774            movx    a,@dptr
2E4F C0E0      8775            push    acc
2E51 A3        8776            inc     dptr
2E52 E0        8777            movx    a,@dptr
2E53 C0E0      8778            push    acc
2E55 7410      8779            mov     a,#__str_17
2E57 C0E0      8780            push    acc
2E59 7429      8781            mov     a,#(__str_17 >> 8)
2E5B C0E0      8782            push    acc
2E5D 7480      8783            mov     a,#0x80
2E5F C0E0      8784            push    acc
2E61 74D0      8785            mov     a,#_buff
2E63 C0E0      8786            push    acc
2E65 7456      8787            mov     a,#(_buff >> 8)
2E67 C0E0      8788            push    acc
2E69 7440      8789            mov     a,#0x40
2E6B C0E0      8790            push    acc
2E6D 120000    8791            lcall   _sprintf
2E70 E581      8792            mov     a,sp
2E72 24F2      8793            add     a,#0xf2
2E74 F581      8794            mov     sp,a
2E76           8795   ;        main.c:1433: waitms(5); // The radio seems to need this delay...
2E76 900005    8796            mov     dptr,#0x0005
2E79 120000    8797            lcall   _waitms
2E7C           8798   ;        main.c:1434: sendstr1(buff);
2E7C 9056D0    8799            mov     dptr,#_buff
2E7F 75F040    8800            mov     b,#0x40
2E82 120000    8801            lcall   _sendstr1
2E85 020000    8802            ljmp    L045016?
2E88           8803            rseg R_CSEG
2E88           8804   
0000           8805            rseg R_XINIT
0000           8806   __xinit__pwm_counter:
0000 0000      8807            db 0x00,0x00    ; 0
0002           8808   __xinit__servo_counter:
0002 0000      8809            db 0x00,0x00    ; 0
0004           8810   __xinit__pwm_left:
0004 00        8811            db 0x00         ; 0
0005           8812   __xinit__pwm_right:
0005 00        8813            db 0x00         ; 0
0006           8814   __xinit__L_motor_dir:
0006 01        8815            db 0x01         ; 1
0007           8816   __xinit__R_motor_dir:
0007 01        8817            db 0x01         ; 1
0008           8818   __xinit__servo_base:
0008 32        8819            db 0x32         ; 50
0009           8820   __xinit__servo_arm:
0009 32        8821            db 0x32         ; 50
000A           8822   __xinit__vx_thres:
000A A100      8823            db 0xA1,0x00    ;  161
000C           8824   __xinit__vy_thres:
000C A600      8825            db 0xA6,0x00    ;  166
000E           8826   __xinit__vx:
000E 0000      8827            db 0x00,0x00    ;  0
0010           8828   __xinit__vy:
0010 0000      8829            db 0x00,0x00    ;  0
0012           8830   __xinit__fre_mea_count:
0012 0000      8831            db 0x00,0x00    ; 0
0014           8832   __xinit__weight_mea_count:
0014 0000      8833            db 0x00,0x00    ; 0
0016           8834   __xinit__seed:
0016 3930      8835            db 0x39,0x30    ; 12345
0018           8836   __xinit__pwm_corr:
0018 3333733F  8837            db 0x33,0x33,0x73,0x3F  ;  9.500000e-001
001C           8838   __xinit__curr_angle:
001C 00000000  8839            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0020           8840   __xinit__raw_angle:
0020 00000000  8841            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0024           8842   __xinit__last_raw_angle:
0024 00000000  8843            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0028           8844   __xinit__angle_diff:
0028 00000000  8845            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
002C           8846   __xinit__mea_yes:
002C 01        8847            db 0x01         ;  1
002D           8848   __xinit__weight:
002D 0000      8849            db 0x00,0x00    ; 0
002F           8850   __xinit__duration:
002F 00000000  8851            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0033           8852   __xinit__auto_mode:
0033 0000      8853            db 0x00,0x00    ;  0
0035           8854   __xinit__pick:
0035 00        8855            db 0x00         ;  0
0036           8856   
0000           8857            rseg R_CONST
0000           8858   __str_0:
0000 4572726F  8859            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
0035 0D        8860            db 0x0D
0036 0A        8861            db 0x0A
0037 00        8862            db 0x00
0038           8863   __str_1:
0038 424D4D31  8864            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
0068 0D        8865            db 0x0D
0069 0A        8866            db 0x0A
006A 00        8867            db 0x00
006B           8868   __str_2:
006B 436F6D6D  8869            db 'Command: %s'
     616E643A
     202573
0076 00        8870            db 0x00
0077           8871   __str_3:
0077 52657370  8872            db 'Response: %s'
     6F6E7365
     3A202573
0083 0D        8873            db 0x0D
0084 0A        8874            db 0x0A
0085 00        8875            db 0x00
0086           8876   __str_4:
0086 41542B44  8877            db 'AT+DVID0000'
     56494430
     303030
0091 0D        8878            db 0x0D
0092 0A        8879            db 0x0A
0093 00        8880            db 0x00
0094           8881   __str_5:
0094 25303364  8882            db '%03d,%03d,%01d,%01d'
     2C253033
     642C2530
     31642C25
     303164
00A7 00        8883            db 0x00
00A8           8884   __str_6:
00A8 25303164  8885            db '%01d,%02d,%ld,%05d,%03d'
     2C253032
     642C256C
     642C2530
     35642C25
     303364
00BF 0A        8886            db 0x0A
00C0 00        8887            db 0x00
00C1           8888   __str_7:
00C1 302C3030  8889            db '0,00,%04ld,%05d,%03d,%03d,%03d'
     2C253034
     6C642C25
     3035642C
     25303364
     2C253033
     642C2530
     3364
00DF 0A        8890            db 0x0A
00E0 00        8891            db 0x00
00E1           8892   __str_8:
00E1 41542B56  8893            db 'AT+VER'
     4552
00E7 0D        8894            db 0x0D
00E8 0A        8895            db 0x0A
00E9 00        8896            db 0x00
00EA           8897   __str_9:
00EA 41542B42  8898            db 'AT+BAUD'
     415544
00F1 0D        8899            db 0x0D
00F2 0A        8900            db 0x0A
00F3 00        8901            db 0x00
00F4           8902   __str_10:
00F4 41542B52  8903            db 'AT+RFID'
     464944
00FB 0D        8904            db 0x0D
00FC 0A        8905            db 0x0A
00FD 00        8906            db 0x00
00FE           8907   __str_11:
00FE 41542B44  8908            db 'AT+DVID'
     564944
0105 0D        8909            db 0x0D
0106 0A        8910            db 0x0A
0107 00        8911            db 0x00
0108           8912   __str_12:
0108 41542B52  8913            db 'AT+RFC002'
     46433030
     32
0111 0D        8914            db 0x0D
0112 0A        8915            db 0x0A
0113 00        8916            db 0x00
0114           8917   __str_13:
0114 41542B50  8918            db 'AT+POWE'
     4F5745
011B 0D        8919            db 0x0D
011C 0A        8920            db 0x0A
011D 00        8921            db 0x00
011E           8922   __str_14:
011E 41542B43  8923            db 'AT+CLSS'
     4C5353
0125 0D        8924            db 0x0D
0126 0A        8925            db 0x0A
0127 00        8926            db 0x00
0128           8927   __str_15:
0128 41542B44  8928            db 'AT+DVIDEF11'
     56494445
     463131
0133 0D        8929            db 0x0D
0134 0A        8930            db 0x0A
0135 00        8931            db 0x00
0136           8932   __str_16:
0136 2A2A2A20  8933            db '*** BAD MESSAGE ***: %s'
     42414420
     4D455353
     41474520
     2A2A2A3A
     202573
014D 0D        8934            db 0x0D
014E 0A        8935            db 0x0A
014F 00        8936            db 0x00
0150           8937   __str_17:
0150 302C3030  8938            db '0,00,%04ld,%05d,%03d'
     2C253034
     6C642C25
     3035642C
     25303364
0164 0A        8939            db 0x0A
0165 00        8940            db 0x00
0166           8941   
0096           8942            CSEG
0096           8943   
0096           8944   end
