0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Apr 02 23:02:59 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _check_bound_PARM_2
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Joystick_Control
0000             30            public _Auto_mode_slave
0000             31            public _Read_angle
0000             32            public _get_random_90_250
0000             33            public _simple_rand
0000             34            public _Move_forward
0000             35            public _Right_angle
0000             36            public _Move_back_ms
0000             37            public _Init_all
0000             38            public _check_bound
0000             39            public _servo_moveaway
0000             40            public _Move_forward_ms
0000             41            public _servo_push
0000             42            public _servo_pick
0000             43            public _Timer5_ISR
0000             44            public _ReadHX711
0000             45            public _ADC_at_Pin
0000             46            public _InitPinADC
0000             47            public _InitADC
0000             48            public _Set_Pin_Input
0000             49            public _Set_Pin_Output
0000             50            public _measure_distance
0000             51            public _ReceptionOff
0000             52            public _SendATCommand
0000             53            public _waitms_or_RI1
0000             54            public _RXU1
0000             55            public _getstr1
0000             56            public _getchar1_with_timeout
0000             57            public _getchar1
0000             58            public _sendstr1
0000             59            public _putchar1
0000             60            public _UART1_Init
0000             61            public _BMM150_Read_Data
0000             62            public _BMM150_compensate_y
0000             63            public _BMM150_compensate_x
0000             64            public _BMM150_Init
0000             65            public _BMM150_Read_Trim_Registers
0000             66            public _SPI_write
0000             67            public _SPI_read
0000             68            public _SPI_transfer
0000             69            public _waitms
0000             70            public _Timer3us
0000             71            public __c51_external_startup
0000             72            public _duration
0000             73            public _weight
0000             74            public _mea_yes
0000             75            public _angle_diff
0000             76            public _last_raw_angle
0000             77            public _raw_angle
0000             78            public _curr_angle
0000             79            public _pwm_corr
0000             80            public _seed
0000             81            public _weight_mea_count
0000             82            public _fre_mea_count
0000             83            public _vy
0000             84            public _vx
0000             85            public _vy_thres
0000             86            public _vx_thres
0000             87            public _servo_arm
0000             88            public _servo_base
0000             89            public _R_motor_dir
0000             90            public _L_motor_dir
0000             91            public _pwm_right
0000             92            public _pwm_left
0000             93            public _servo_counter
0000             94            public _pwm_counter
0000             95            public _i
0000             96            public _i_loo
0000             97            public _overflow_count
0000             98            public _distance
0000             99            public _temp
0000            100            public _dig_xyz1
0000            101            public _dig_xy2
0000            102            public _dig_xy1
0000            103            public _dig_z4
0000            104            public _dig_z3
0000            105            public _dig_z2
0000            106            public _dig_z1
0000            107            public _dig_y2
0000            108            public _dig_y1
0000            109            public _dig_x2
0000            110            public _dig_x1
0000            111            public _d2
0000            112            public _d1
0000            113            public _freq100
0000            114            public _buff
0000            115            public _Joystick_Control_PARM_2
0000            116            public _getstr1_PARM_2
0000            117            public _BMM150_Read_Data_PARM_2
0000            118            public _BMM150_compensate_y_PARM_2
0000            119            public _BMM150_compensate_x_PARM_2
0000            120            public _SPI_write_PARM_2
0000            121   ;--------------------------------------------------------
0000            122   ; Special Function Registers
0000            123   ;--------------------------------------------------------
0000            124   _ACC            DATA 0xe0
0000            125   _ADC0ASAH       DATA 0xb6
0000            126   _ADC0ASAL       DATA 0xb5
0000            127   _ADC0ASCF       DATA 0xa1
0000            128   _ADC0ASCT       DATA 0xc7
0000            129   _ADC0CF0        DATA 0xbc
0000            130   _ADC0CF1        DATA 0xb9
0000            131   _ADC0CF2        DATA 0xdf
0000            132   _ADC0CN0        DATA 0xe8
0000            133   _ADC0CN1        DATA 0xb2
0000            134   _ADC0CN2        DATA 0xb3
0000            135   _ADC0GTH        DATA 0xc4
0000            136   _ADC0GTL        DATA 0xc3
0000            137   _ADC0H          DATA 0xbe
0000            138   _ADC0L          DATA 0xbd
0000            139   _ADC0LTH        DATA 0xc6
0000            140   _ADC0LTL        DATA 0xc5
0000            141   _ADC0MX         DATA 0xbb
0000            142   _B              DATA 0xf0
0000            143   _CKCON0         DATA 0x8e
0000            144   _CKCON1         DATA 0xa6
0000            145   _CLEN0          DATA 0xc6
0000            146   _CLIE0          DATA 0xc7
0000            147   _CLIF0          DATA 0xe8
0000            148   _CLKSEL         DATA 0xa9
0000            149   _CLOUT0         DATA 0xd1
0000            150   _CLU0CF         DATA 0xb1
0000            151   _CLU0FN         DATA 0xaf
0000            152   _CLU0MX         DATA 0x84
0000            153   _CLU1CF         DATA 0xb3
0000            154   _CLU1FN         DATA 0xb2
0000            155   _CLU1MX         DATA 0x85
0000            156   _CLU2CF         DATA 0xb6
0000            157   _CLU2FN         DATA 0xb5
0000            158   _CLU2MX         DATA 0x91
0000            159   _CLU3CF         DATA 0xbf
0000            160   _CLU3FN         DATA 0xbe
0000            161   _CLU3MX         DATA 0xae
0000            162   _CMP0CN0        DATA 0x9b
0000            163   _CMP0CN1        DATA 0x99
0000            164   _CMP0MD         DATA 0x9d
0000            165   _CMP0MX         DATA 0x9f
0000            166   _CMP1CN0        DATA 0xbf
0000            167   _CMP1CN1        DATA 0xac
0000            168   _CMP1MD         DATA 0xab
0000            169   _CMP1MX         DATA 0xaa
0000            170   _CRC0CN0        DATA 0xce
0000            171   _CRC0CN1        DATA 0x86
0000            172   _CRC0CNT        DATA 0xd3
0000            173   _CRC0DAT        DATA 0xcb
0000            174   _CRC0FLIP       DATA 0xcf
0000            175   _CRC0IN         DATA 0xca
0000            176   _CRC0ST         DATA 0xd2
0000            177   _DAC0CF0        DATA 0x91
0000            178   _DAC0CF1        DATA 0x92
0000            179   _DAC0H          DATA 0x85
0000            180   _DAC0L          DATA 0x84
0000            181   _DAC1CF0        DATA 0x93
0000            182   _DAC1CF1        DATA 0x94
0000            183   _DAC1H          DATA 0x8a
0000            184   _DAC1L          DATA 0x89
0000            185   _DAC2CF0        DATA 0x95
0000            186   _DAC2CF1        DATA 0x96
0000            187   _DAC2H          DATA 0x8c
0000            188   _DAC2L          DATA 0x8b
0000            189   _DAC3CF0        DATA 0x9a
0000            190   _DAC3CF1        DATA 0x9c
0000            191   _DAC3H          DATA 0x8e
0000            192   _DAC3L          DATA 0x8d
0000            193   _DACGCF0        DATA 0x88
0000            194   _DACGCF1        DATA 0x98
0000            195   _DACGCF2        DATA 0xa2
0000            196   _DERIVID        DATA 0xad
0000            197   _DEVICEID       DATA 0xb5
0000            198   _DPH            DATA 0x83
0000            199   _DPL            DATA 0x82
0000            200   _EIE1           DATA 0xe6
0000            201   _EIE2           DATA 0xf3
0000            202   _EIP1           DATA 0xbb
0000            203   _EIP1H          DATA 0xee
0000            204   _EIP2           DATA 0xed
0000            205   _EIP2H          DATA 0xf6
0000            206   _EMI0CN         DATA 0xe7
0000            207   _FLKEY          DATA 0xb7
0000            208   _HFO0CAL        DATA 0xc7
0000            209   _HFO1CAL        DATA 0xd6
0000            210   _HFOCN          DATA 0xef
0000            211   _I2C0ADM        DATA 0xff
0000            212   _I2C0CN0        DATA 0xba
0000            213   _I2C0DIN        DATA 0xbc
0000            214   _I2C0DOUT       DATA 0xbb
0000            215   _I2C0FCN0       DATA 0xad
0000            216   _I2C0FCN1       DATA 0xab
0000            217   _I2C0FCT        DATA 0xf5
0000            218   _I2C0SLAD       DATA 0xbd
0000            219   _I2C0STAT       DATA 0xb9
0000            220   _IE             DATA 0xa8
0000            221   _IP             DATA 0xb8
0000            222   _IPH            DATA 0xf2
0000            223   _IT01CF         DATA 0xe4
0000            224   _LFO0CN         DATA 0xb1
0000            225   _P0             DATA 0x80
0000            226   _P0MASK         DATA 0xfe
0000            227   _P0MAT          DATA 0xfd
0000            228   _P0MDIN         DATA 0xf1
0000            229   _P0MDOUT        DATA 0xa4
0000            230   _P0SKIP         DATA 0xd4
0000            231   _P1             DATA 0x90
0000            232   _P1MASK         DATA 0xee
0000            233   _P1MAT          DATA 0xed
0000            234   _P1MDIN         DATA 0xf2
0000            235   _P1MDOUT        DATA 0xa5
0000            236   _P1SKIP         DATA 0xd5
0000            237   _P2             DATA 0xa0
0000            238   _P2MASK         DATA 0xfc
0000            239   _P2MAT          DATA 0xfb
0000            240   _P2MDIN         DATA 0xf3
0000            241   _P2MDOUT        DATA 0xa6
0000            242   _P2SKIP         DATA 0xcc
0000            243   _P3             DATA 0xb0
0000            244   _P3MDIN         DATA 0xf4
0000            245   _P3MDOUT        DATA 0x9c
0000            246   _PCA0CENT       DATA 0x9e
0000            247   _PCA0CLR        DATA 0x9c
0000            248   _PCA0CN0        DATA 0xd8
0000            249   _PCA0CPH0       DATA 0xfc
0000            250   _PCA0CPH1       DATA 0xea
0000            251   _PCA0CPH2       DATA 0xec
0000            252   _PCA0CPH3       DATA 0xf5
0000            253   _PCA0CPH4       DATA 0x85
0000            254   _PCA0CPH5       DATA 0xde
0000            255   _PCA0CPL0       DATA 0xfb
0000            256   _PCA0CPL1       DATA 0xe9
0000            257   _PCA0CPL2       DATA 0xeb
0000            258   _PCA0CPL3       DATA 0xf4
0000            259   _PCA0CPL4       DATA 0x84
0000            260   _PCA0CPL5       DATA 0xdd
0000            261   _PCA0CPM0       DATA 0xda
0000            262   _PCA0CPM1       DATA 0xdb
0000            263   _PCA0CPM2       DATA 0xdc
0000            264   _PCA0CPM3       DATA 0xae
0000            265   _PCA0CPM4       DATA 0xaf
0000            266   _PCA0CPM5       DATA 0xcc
0000            267   _PCA0H          DATA 0xfa
0000            268   _PCA0L          DATA 0xf9
0000            269   _PCA0MD         DATA 0xd9
0000            270   _PCA0POL        DATA 0x96
0000            271   _PCA0PWM        DATA 0xf7
0000            272   _PCON0          DATA 0x87
0000            273   _PCON1          DATA 0xcd
0000            274   _PFE0CN         DATA 0xc1
0000            275   _PRTDRV         DATA 0xf6
0000            276   _PSCTL          DATA 0x8f
0000            277   _PSTAT0         DATA 0xaa
0000            278   _PSW            DATA 0xd0
0000            279   _REF0CN         DATA 0xd1
0000            280   _REG0CN         DATA 0xc9
0000            281   _REVID          DATA 0xb6
0000            282   _RSTSRC         DATA 0xef
0000            283   _SBCON1         DATA 0x94
0000            284   _SBRLH1         DATA 0x96
0000            285   _SBRLL1         DATA 0x95
0000            286   _SBUF           DATA 0x99
0000            287   _SBUF0          DATA 0x99
0000            288   _SBUF1          DATA 0x92
0000            289   _SCON           DATA 0x98
0000            290   _SCON0          DATA 0x98
0000            291   _SCON1          DATA 0xc8
0000            292   _SFRPAGE        DATA 0xa7
0000            293   _SFRPGCN        DATA 0xbc
0000            294   _SFRSTACK       DATA 0xd7
0000            295   _SMB0ADM        DATA 0xd6
0000            296   _SMB0ADR        DATA 0xd7
0000            297   _SMB0CF         DATA 0xc1
0000            298   _SMB0CN0        DATA 0xc0
0000            299   _SMB0DAT        DATA 0xc2
0000            300   _SMB0FCN0       DATA 0xc3
0000            301   _SMB0FCN1       DATA 0xc4
0000            302   _SMB0FCT        DATA 0xef
0000            303   _SMB0RXLN       DATA 0xc5
0000            304   _SMB0TC         DATA 0xac
0000            305   _SMOD1          DATA 0x93
0000            306   _SP             DATA 0x81
0000            307   _SPI0CFG        DATA 0xa1
0000            308   _SPI0CKR        DATA 0xa2
0000            309   _SPI0CN0        DATA 0xf8
0000            310   _SPI0DAT        DATA 0xa3
0000            311   _SPI0FCN0       DATA 0x9a
0000            312   _SPI0FCN1       DATA 0x9b
0000            313   _SPI0FCT        DATA 0xf7
0000            314   _SPI0PCF        DATA 0xdf
0000            315   _TCON           DATA 0x88
0000            316   _TH0            DATA 0x8c
0000            317   _TH1            DATA 0x8d
0000            318   _TL0            DATA 0x8a
0000            319   _TL1            DATA 0x8b
0000            320   _TMOD           DATA 0x89
0000            321   _TMR2CN0        DATA 0xc8
0000            322   _TMR2CN1        DATA 0xfd
0000            323   _TMR2H          DATA 0xcf
0000            324   _TMR2L          DATA 0xce
0000            325   _TMR2RLH        DATA 0xcb
0000            326   _TMR2RLL        DATA 0xca
0000            327   _TMR3CN0        DATA 0x91
0000            328   _TMR3CN1        DATA 0xfe
0000            329   _TMR3H          DATA 0x95
0000            330   _TMR3L          DATA 0x94
0000            331   _TMR3RLH        DATA 0x93
0000            332   _TMR3RLL        DATA 0x92
0000            333   _TMR4CN0        DATA 0x98
0000            334   _TMR4CN1        DATA 0xff
0000            335   _TMR4H          DATA 0xa5
0000            336   _TMR4L          DATA 0xa4
0000            337   _TMR4RLH        DATA 0xa3
0000            338   _TMR4RLL        DATA 0xa2
0000            339   _TMR5CN0        DATA 0xc0
0000            340   _TMR5CN1        DATA 0xf1
0000            341   _TMR5H          DATA 0xd5
0000            342   _TMR5L          DATA 0xd4
0000            343   _TMR5RLH        DATA 0xd3
0000            344   _TMR5RLL        DATA 0xd2
0000            345   _UART0PCF       DATA 0xd9
0000            346   _UART1FCN0      DATA 0x9d
0000            347   _UART1FCN1      DATA 0xd8
0000            348   _UART1FCT       DATA 0xfa
0000            349   _UART1LIN       DATA 0x9e
0000            350   _UART1PCF       DATA 0xda
0000            351   _VDM0CN         DATA 0xff
0000            352   _WDTCN          DATA 0x97
0000            353   _XBR0           DATA 0xe1
0000            354   _XBR1           DATA 0xe2
0000            355   _XBR2           DATA 0xe3
0000            356   _XOSC0CN        DATA 0x86
0000            357   _DPTR           DATA 0x8382
0000            358   _TMR2RL         DATA 0xcbca
0000            359   _TMR3RL         DATA 0x9392
0000            360   _TMR4RL         DATA 0xa3a2
0000            361   _TMR5RL         DATA 0xd3d2
0000            362   _TMR0           DATA 0x8c8a
0000            363   _TMR1           DATA 0x8d8b
0000            364   _TMR2           DATA 0xcfce
0000            365   _TMR3           DATA 0x9594
0000            366   _TMR4           DATA 0xa5a4
0000            367   _TMR5           DATA 0xd5d4
0000            368   _SBRL1          DATA 0x9695
0000            369   _PCA0           DATA 0xfaf9
0000            370   _PCA0CP0        DATA 0xfcfb
0000            371   _PCA0CP1        DATA 0xeae9
0000            372   _PCA0CP2        DATA 0xeceb
0000            373   _PCA0CP3        DATA 0xf5f4
0000            374   _PCA0CP4        DATA 0x8584
0000            375   _PCA0CP5        DATA 0xdedd
0000            376   _ADC0ASA        DATA 0xb6b5
0000            377   _ADC0GT         DATA 0xc4c3
0000            378   _ADC0           DATA 0xbebd
0000            379   _ADC0LT         DATA 0xc6c5
0000            380   _DAC0           DATA 0x8584
0000            381   _DAC1           DATA 0x8a89
0000            382   _DAC2           DATA 0x8c8b
0000            383   _DAC3           DATA 0x8e8d
0000            384   ;--------------------------------------------------------
0000            385   ; special function bits
0000            386   ;--------------------------------------------------------
0000            387   _ACC_0          BIT 0xe0
0000            388   _ACC_1          BIT 0xe1
0000            389   _ACC_2          BIT 0xe2
0000            390   _ACC_3          BIT 0xe3
0000            391   _ACC_4          BIT 0xe4
0000            392   _ACC_5          BIT 0xe5
0000            393   _ACC_6          BIT 0xe6
0000            394   _ACC_7          BIT 0xe7
0000            395   _TEMPE          BIT 0xe8
0000            396   _ADGN0          BIT 0xe9
0000            397   _ADGN1          BIT 0xea
0000            398   _ADWINT         BIT 0xeb
0000            399   _ADBUSY         BIT 0xec
0000            400   _ADINT          BIT 0xed
0000            401   _IPOEN          BIT 0xee
0000            402   _ADEN           BIT 0xef
0000            403   _B_0            BIT 0xf0
0000            404   _B_1            BIT 0xf1
0000            405   _B_2            BIT 0xf2
0000            406   _B_3            BIT 0xf3
0000            407   _B_4            BIT 0xf4
0000            408   _B_5            BIT 0xf5
0000            409   _B_6            BIT 0xf6
0000            410   _B_7            BIT 0xf7
0000            411   _C0FIF          BIT 0xe8
0000            412   _C0RIF          BIT 0xe9
0000            413   _C1FIF          BIT 0xea
0000            414   _C1RIF          BIT 0xeb
0000            415   _C2FIF          BIT 0xec
0000            416   _C2RIF          BIT 0xed
0000            417   _C3FIF          BIT 0xee
0000            418   _C3RIF          BIT 0xef
0000            419   _D1SRC0         BIT 0x88
0000            420   _D1SRC1         BIT 0x89
0000            421   _D1AMEN         BIT 0x8a
0000            422   _D01REFSL       BIT 0x8b
0000            423   _D3SRC0         BIT 0x8c
0000            424   _D3SRC1         BIT 0x8d
0000            425   _D3AMEN         BIT 0x8e
0000            426   _D23REFSL       BIT 0x8f
0000            427   _D0UDIS         BIT 0x98
0000            428   _D1UDIS         BIT 0x99
0000            429   _D2UDIS         BIT 0x9a
0000            430   _D3UDIS         BIT 0x9b
0000            431   _EX0            BIT 0xa8
0000            432   _ET0            BIT 0xa9
0000            433   _EX1            BIT 0xaa
0000            434   _ET1            BIT 0xab
0000            435   _ES0            BIT 0xac
0000            436   _ET2            BIT 0xad
0000            437   _ESPI0          BIT 0xae
0000            438   _EA             BIT 0xaf
0000            439   _PX0            BIT 0xb8
0000            440   _PT0            BIT 0xb9
0000            441   _PX1            BIT 0xba
0000            442   _PT1            BIT 0xbb
0000            443   _PS0            BIT 0xbc
0000            444   _PT2            BIT 0xbd
0000            445   _PSPI0          BIT 0xbe
0000            446   _P0_0           BIT 0x80
0000            447   _P0_1           BIT 0x81
0000            448   _P0_2           BIT 0x82
0000            449   _P0_3           BIT 0x83
0000            450   _P0_4           BIT 0x84
0000            451   _P0_5           BIT 0x85
0000            452   _P0_6           BIT 0x86
0000            453   _P0_7           BIT 0x87
0000            454   _P1_0           BIT 0x90
0000            455   _P1_1           BIT 0x91
0000            456   _P1_2           BIT 0x92
0000            457   _P1_3           BIT 0x93
0000            458   _P1_4           BIT 0x94
0000            459   _P1_5           BIT 0x95
0000            460   _P1_6           BIT 0x96
0000            461   _P1_7           BIT 0x97
0000            462   _P2_0           BIT 0xa0
0000            463   _P2_1           BIT 0xa1
0000            464   _P2_2           BIT 0xa2
0000            465   _P2_3           BIT 0xa3
0000            466   _P2_4           BIT 0xa4
0000            467   _P2_5           BIT 0xa5
0000            468   _P2_6           BIT 0xa6
0000            469   _P3_0           BIT 0xb0
0000            470   _P3_1           BIT 0xb1
0000            471   _P3_2           BIT 0xb2
0000            472   _P3_3           BIT 0xb3
0000            473   _P3_4           BIT 0xb4
0000            474   _P3_7           BIT 0xb7
0000            475   _CCF0           BIT 0xd8
0000            476   _CCF1           BIT 0xd9
0000            477   _CCF2           BIT 0xda
0000            478   _CCF3           BIT 0xdb
0000            479   _CCF4           BIT 0xdc
0000            480   _CCF5           BIT 0xdd
0000            481   _CR             BIT 0xde
0000            482   _CF             BIT 0xdf
0000            483   _PARITY         BIT 0xd0
0000            484   _F1             BIT 0xd1
0000            485   _OV             BIT 0xd2
0000            486   _RS0            BIT 0xd3
0000            487   _RS1            BIT 0xd4
0000            488   _F0             BIT 0xd5
0000            489   _AC             BIT 0xd6
0000            490   _CY             BIT 0xd7
0000            491   _RI             BIT 0x98
0000            492   _TI             BIT 0x99
0000            493   _RB8            BIT 0x9a
0000            494   _TB8            BIT 0x9b
0000            495   _REN            BIT 0x9c
0000            496   _CE             BIT 0x9d
0000            497   _SMODE          BIT 0x9e
0000            498   _RI1            BIT 0xc8
0000            499   _TI1            BIT 0xc9
0000            500   _RBX1           BIT 0xca
0000            501   _TBX1           BIT 0xcb
0000            502   _REN1           BIT 0xcc
0000            503   _PERR1          BIT 0xcd
0000            504   _OVR1           BIT 0xce
0000            505   _SI             BIT 0xc0
0000            506   _ACK            BIT 0xc1
0000            507   _ARBLOST        BIT 0xc2
0000            508   _ACKRQ          BIT 0xc3
0000            509   _STO            BIT 0xc4
0000            510   _STA            BIT 0xc5
0000            511   _TXMODE         BIT 0xc6
0000            512   _MASTER         BIT 0xc7
0000            513   _SPIEN          BIT 0xf8
0000            514   _TXNF           BIT 0xf9
0000            515   _NSSMD0         BIT 0xfa
0000            516   _NSSMD1         BIT 0xfb
0000            517   _RXOVRN         BIT 0xfc
0000            518   _MODF           BIT 0xfd
0000            519   _WCOL           BIT 0xfe
0000            520   _SPIF           BIT 0xff
0000            521   _IT0            BIT 0x88
0000            522   _IE0            BIT 0x89
0000            523   _IT1            BIT 0x8a
0000            524   _IE1            BIT 0x8b
0000            525   _TR0            BIT 0x8c
0000            526   _TF0            BIT 0x8d
0000            527   _TR1            BIT 0x8e
0000            528   _TF1            BIT 0x8f
0000            529   _T2XCLK0        BIT 0xc8
0000            530   _T2XCLK1        BIT 0xc9
0000            531   _TR2            BIT 0xca
0000            532   _T2SPLIT        BIT 0xcb
0000            533   _TF2CEN         BIT 0xcc
0000            534   _TF2LEN         BIT 0xcd
0000            535   _TF2L           BIT 0xce
0000            536   _TF2H           BIT 0xcf
0000            537   _T4XCLK0        BIT 0x98
0000            538   _T4XCLK1        BIT 0x99
0000            539   _TR4            BIT 0x9a
0000            540   _T4SPLIT        BIT 0x9b
0000            541   _TF4CEN         BIT 0x9c
0000            542   _TF4LEN         BIT 0x9d
0000            543   _TF4L           BIT 0x9e
0000            544   _TF4H           BIT 0x9f
0000            545   _T5XCLK0        BIT 0xc0
0000            546   _T5XCLK1        BIT 0xc1
0000            547   _TR5            BIT 0xc2
0000            548   _T5SPLIT        BIT 0xc3
0000            549   _TF5CEN         BIT 0xc4
0000            550   _TF5LEN         BIT 0xc5
0000            551   _TF5L           BIT 0xc6
0000            552   _TF5H           BIT 0xc7
0000            553   _RIE            BIT 0xd8
0000            554   _RXTO0          BIT 0xd9
0000            555   _RXTO1          BIT 0xda
0000            556   _RFRQ           BIT 0xdb
0000            557   _TIE            BIT 0xdc
0000            558   _TXHOLD         BIT 0xdd
0000            559   _TXNF1          BIT 0xde
0000            560   _TFRQ           BIT 0xdf
0000            561   ;--------------------------------------------------------
0000            562   ; overlayable register banks
0000            563   ;--------------------------------------------------------
0000            564            rbank0 segment data overlay
0000            565   ;--------------------------------------------------------
0000            566   ; overlayable bit register bank
0000            567   ;--------------------------------------------------------
0000            568            rseg BIT_BANK
0000            569   bits:
0000            570            ds 1
0001            571            b0 equ  bits.0 
0001            572            b1 equ  bits.1 
0001            573            b2 equ  bits.2 
0001            574            b3 equ  bits.3 
0001            575            b4 equ  bits.4 
0001            576            b5 equ  bits.5 
0001            577            b6 equ  bits.6 
0001            578            b7 equ  bits.7 
0001            579   ;--------------------------------------------------------
0001            580   ; internal ram data
0001            581   ;--------------------------------------------------------
0000            582            rseg R_DSEG
0000            583   _SPI_write_PARM_2:
0000            584            ds 1
0001            585   _BMM150_compensate_x_PARM_2:
0001            586            ds 3
0004            587   _BMM150_compensate_x_sloc0_1_0:
0004            588            ds 4
0008            589   _BMM150_compensate_y_PARM_2:
0008            590            ds 3
000B            591   _BMM150_compensate_y_sloc0_1_0:
000B            592            ds 4
000F            593   _BMM150_Read_Data_PARM_2:
000F            594            ds 3
0012            595   _BMM150_Read_Data_mag_x_1_123:
0012            596            ds 3
0015            597   _getstr1_PARM_2:
0015            598            ds 1
0016            599   _Auto_mode_slave_sloc0_1_0:
0016            600            ds 2
0018            601   _Joystick_Control_PARM_2:
0018            602            ds 3
001B            603   _Joystick_Control_sloc0_1_0:
001B            604            ds 2
001D            605   _Joystick_Control_sloc1_1_0:
001D            606            ds 1
001E            607   _Joystick_Control_sloc2_1_0:
001E            608            ds 1
001F            609   _Joystick_Control_sloc3_1_0:
001F            610            ds 4
0023            611   _Joystick_Control_sloc4_1_0:
0023            612            ds 4
0027            613   _Joystick_Control_sloc5_1_0:
0027            614            ds 4
002B            615   ;--------------------------------------------------------
002B            616   ; overlayable items in internal ram 
002B            617   ;--------------------------------------------------------
0000            618            rseg    R_OSEG
0000            619            rseg    R_OSEG
0000            620            rseg    R_OSEG
0000            621            rseg    R_OSEG
0000            622            rseg    R_OSEG
0000            623            rseg    R_OSEG
0000            624   _InitPinADC_PARM_2:
0000            625            ds 1
0001            626            rseg    R_OSEG
0001            627            rseg    R_OSEG
0001            628   _check_bound_PARM_2:
0001            629            ds 2
0003            630   ;--------------------------------------------------------
0003            631   ; indirectly addressable internal ram data
0003            632   ;--------------------------------------------------------
0000            633            rseg R_ISEG
0000            634   _buff:
0000            635            ds 20
0014            636   ;--------------------------------------------------------
0014            637   ; absolute internal ram data
0014            638   ;--------------------------------------------------------
0000            639            DSEG
0000            640   ;--------------------------------------------------------
0000            641   ; bit data
0000            642   ;--------------------------------------------------------
0000            643            rseg R_BSEG
0000            644   ;--------------------------------------------------------
0000            645   ; paged external ram data
0000            646   ;--------------------------------------------------------
0000            647            rseg R_PSEG
0000            648   ;--------------------------------------------------------
0000            649   ; external ram data
0000            650   ;--------------------------------------------------------
0000            651            rseg R_XSEG
0000            652   _freq100:
0000            653            ds 4
0004            654   _d1:
0004            655            ds 2
0006            656   _d2:
0006            657            ds 2
0008            658   _dig_x1:
0008            659            ds 1
0009            660   _dig_x2:
0009            661            ds 1
000A            662   _dig_y1:
000A            663            ds 1
000B            664   _dig_y2:
000B            665            ds 1
000C            666   _dig_z1:
000C            667            ds 2
000E            668   _dig_z2:
000E            669            ds 2
0010            670   _dig_z3:
0010            671            ds 2
0012            672   _dig_z4:
0012            673            ds 2
0014            674   _dig_xy1:
0014            675            ds 1
0015            676   _dig_xy2:
0015            677            ds 1
0016            678   _dig_xyz1:
0016            679            ds 2
0018            680   _temp:
0018            681            ds 4
001C            682   _distance:
001C            683            ds 2
001E            684   _overflow_count:
001E            685            ds 1
001F            686   _i_loo:
001F            687            ds 2
0021            688   _i:
0021            689            ds 2
0023            690   _BMM150_Read_Trim_Registers_trim_x1y1_1_97:
0023            691            ds 2
0025            692   _BMM150_Read_Trim_Registers_trim_xyz_data_1_97:
0025            693            ds 4
0029            694   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_97:
0029            695            ds 10
0033            696   _BMM150_compensate_x_retval_1_106:
0033            697            ds 2
0035            698   _BMM150_compensate_x_process_comp_x0_1_106:
0035            699            ds 2
0037            700   _BMM150_compensate_y_retval_1_115:
0037            701            ds 2
0039            702   _BMM150_compensate_y_process_comp_y0_1_115:
0039            703            ds 2
003B            704   _BMM150_Read_Data_x_val_1_124:
003B            705            ds 2
003D            706   _BMM150_Read_Data_y_val_1_124:
003D            707            ds 2
003F            708   _BMM150_Read_Data_rhall_val_1_124:
003F            709            ds 2
0041            710   _ReadHX711_dataa_1_174:
0041            711            ds 4
0045            712   _ReadHX711_j_1_174:
0045            713            ds 1
0046            714   _Read_angle_mag_x_1_228:
0046            715            ds 2
0048            716   _Read_angle_mag_y_1_228:
0048            717            ds 2
004A            718   _Read_angle_sum_x_1_228:
004A            719            ds 4
004E            720   _Read_angle_sum_y_1_228:
004E            721            ds 4
0052            722   _Read_angle_angle_1_228:
0052            723            ds 4
0056            724   _Auto_mode_slave_command_1_230:
0056            725            ds 2
0058            726   _Auto_mode_slave_state_res_1_230:
0058            727            ds 2
005A            728   _Auto_mode_slave_dummy_1_230:
005A            729            ds 2
005C            730   _Joystick_Control_vx_error_1_242:
005C            731            ds 2
005E            732   _Joystick_Control_vy_error_1_242:
005E            733            ds 2
0060            734   _Joystick_Control_vx_err_1_242:
0060            735            ds 2
0062            736   _Joystick_Control_vy_err_1_242:
0062            737            ds 2
0064            738   _main_auto_mode_1_265:
0064            739            ds 2
0066            740   _main_pick_char_1_265:
0066            741            ds 1
0067            742   ;--------------------------------------------------------
0067            743   ; absolute external ram data
0067            744   ;--------------------------------------------------------
0000            745            XSEG
0000            746   ;--------------------------------------------------------
0000            747   ; external initialized ram data
0000            748   ;--------------------------------------------------------
0000            749            rseg R_IXSEG
0000            750   _pwm_counter:
0000            751            ds 2
0002            752   _servo_counter:
0002            753            ds 2
0004            754   _pwm_left:
0004            755            ds 1
0005            756   _pwm_right:
0005            757            ds 1
0006            758   _L_motor_dir:
0006            759            ds 1
0007            760   _R_motor_dir:
0007            761            ds 1
0008            762   _servo_base:
0008            763            ds 1
0009            764   _servo_arm:
0009            765            ds 1
000A            766   _vx_thres:
000A            767            ds 2
000C            768   _vy_thres:
000C            769            ds 2
000E            770   _vx:
000E            771            ds 2
0010            772   _vy:
0010            773            ds 2
0012            774   _fre_mea_count:
0012            775            ds 2
0014            776   _weight_mea_count:
0014            777            ds 2
0016            778   _seed:
0016            779            ds 2
0018            780   _pwm_corr:
0018            781            ds 4
001C            782   _curr_angle:
001C            783            ds 4
0020            784   _raw_angle:
0020            785            ds 4
0024            786   _last_raw_angle:
0024            787            ds 4
0028            788   _angle_diff:
0028            789            ds 4
002C            790   _mea_yes:
002C            791            ds 1
002D            792   _weight:
002D            793            ds 2
002F            794   _duration:
002F            795            ds 4
0000            796            rseg R_HOME
0000            797            rseg R_GSINIT
0000            798            rseg R_CSEG
0000            799   ;--------------------------------------------------------
0000            800   ; Reset entry point and interrupt vectors
0000            801   ;--------------------------------------------------------
0000            802            CSEG at 0x0000
0000 020000     803            ljmp    _crt0
0093            804            CSEG at 0x0093
0093 020000     805            ljmp    _Timer5_ISR
0096            806   ;--------------------------------------------------------
0096            807   ; global & static initialisations
0096            808   ;--------------------------------------------------------
0000            809            rseg R_HOME
0000            810            rseg R_GSINIT
0000            811            rseg R_GSINIT
0000            812   ;--------------------------------------------------------
0000            813   ; data variables initialization
0000            814   ;--------------------------------------------------------
0000            815            rseg R_DINIT
0000            816            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            817   ;--------------------------------------------------------
0000            818   ; code
0000            819   ;--------------------------------------------------------
0000            820            rseg R_CSEG
0000            821   ;------------------------------------------------------------
0000            822   ;Allocation info for local variables in function '_c51_external_startup'
0000            823   ;------------------------------------------------------------
0000            824   ;------------------------------------------------------------
0000            825   ;        main.c:118: char _c51_external_startup (void)
0000            826   ;        -----------------------------------------
0000            827   ;         function _c51_external_startup
0000            828   ;        -----------------------------------------
0000            829   __c51_external_startup:
0000            830            using   0
0000            831   ;        main.c:121: SFRPAGE = 0x00;
0000 75A700     832            mov     _SFRPAGE,#0x00
0003            833   ;        main.c:122: WDTCN = 0xDE; //First key
0003 7597DE     834            mov     _WDTCN,#0xDE
0006            835   ;        main.c:123: WDTCN = 0xAD; //Second key
0006 7597AD     836            mov     _WDTCN,#0xAD
0009            837   ;        main.c:125: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     838            mov     _VDM0CN,#0x80
000C            839   ;        main.c:126: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     840            mov     _RSTSRC,#0x06
000F            841   ;        main.c:133: SFRPAGE = 0x10;
000F 75A710     842            mov     _SFRPAGE,#0x10
0012            843   ;        main.c:134: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     844            mov     _PFE0CN,#0x20
0015            845   ;        main.c:135: SFRPAGE = 0x00;
0015 75A700     846            mov     _SFRPAGE,#0x00
0018            847   ;        main.c:156: CLKSEL = 0x00;
0018 75A900     848            mov     _CLKSEL,#0x00
001B            849   ;        main.c:157: CLKSEL = 0x00;
001B 75A900     850            mov     _CLKSEL,#0x00
001E            851   ;        main.c:158: while ((CLKSEL & 0x80) == 0);
001E            852   L002001?:
001E E5A9       853            mov     a,_CLKSEL
0020 30E720     854            jnb     acc.7,L002001?
0023            855   ;        main.c:159: CLKSEL = 0x03;
0023 75A903     856            mov     _CLKSEL,#0x03
0026            857   ;        main.c:160: CLKSEL = 0x03;
0026 75A903     858            mov     _CLKSEL,#0x03
0029            859   ;        main.c:161: while ((CLKSEL & 0x80) == 0);
0029            860   L002004?:
0029 E5A9       861            mov     a,_CLKSEL
002B 30E7A0     862            jnb     acc.7,L002004?
002E            863   ;        main.c:167: P0MDOUT |= 0b_1100_0000;
002E 43A4C0     864            orl     _P0MDOUT,#0xC0
0031            865   ;        main.c:168: P1MDOUT |= 0b_0000_0110;
0031 43A506     866            orl     _P1MDOUT,#0x06
0034            867   ;        main.c:169: P2MDOUT |= 0b_0000_0001; // P2.0 in push-pull mode
0034 43A601     868            orl     _P2MDOUT,#0x01
0037            869   ;        main.c:170: XBR0     = 0b_0000_0011; // UART0E = 1 and SPI0E = 1 0b_0000_0011               
0037 75E103     870            mov     _XBR0,#0x03
003A            871   ;        main.c:171: XBR1     = 0b_0000_0000;
003A 75E200     872            mov     _XBR1,#0x00
003D            873   ;        main.c:172: XBR2     = 0b_0100_0001; // Enable crossbar and uart 1
003D 75E341     874            mov     _XBR2,#0x41
0040            875   ;        main.c:173: P0SKIP       = 0b_0000_0111; 
0040 75D407     876            mov     _P0SKIP,#0x07
0043            877   ;        main.c:174: P1SKIP   = 0b_1111_1001;
0043 75D5F9     878            mov     _P1SKIP,#0xF9
0046            879   ;        main.c:179: SCON0 = 0x10;
0046 759810     880            mov     _SCON0,#0x10
0049            881   ;        main.c:180: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     882            mov     _TH1,#0xE6
004C            883   ;        main.c:181: TL1 = TH1;      // Init Timer1
004C 858D8B     884            mov     _TL1,_TH1
004F            885   ;        main.c:182: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     886            anl     _TMOD,#0x0F
0052            887   ;        main.c:183: TMOD |=  0x20;                       
0052 438920     888            orl     _TMOD,#0x20
0055            889   ;        main.c:184: TR1 = 1; // START Timer1
0055 D28E       890            setb    _TR1
0057            891   ;        main.c:185: TI = 1;  // Indicate TX0 ready
0057 D299       892            setb    _TI
0059            893   ;        main.c:186: P2_0=1; // 'set' pin to 1 is normal operation mode.
0059 D2A0       894            setb    _P2_0
005B            895   ;        main.c:189: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
005B 75A211     896            mov     _SPI0CKR,#0x11
005E            897   ;        main.c:190: SPI0CFG = 0b_1110_0000; // SPI mode 3
005E 75A1E0     898            mov     _SPI0CFG,#0xE0
0061            899   ;        main.c:191: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0061 75F801     900            mov     _SPI0CN0,#0x01
0064            901   ;        main.c:194: SFRPAGE=0x10;
0064 75A710     902            mov     _SFRPAGE,#0x10
0067            903   ;        main.c:195: TMR5CN0=0x00;
0067 75C000     904            mov     _TMR5CN0,#0x00
006A            905   ;        main.c:196: TMR5=0xffff;   // Set to reload immediately
006A 75D4FF     906            mov     _TMR5,#0xFF
006D 75D5FF     907            mov     (_TMR5 >> 8),#0xFF
0070            908   ;        main.c:197: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
0070 43F308     909            orl     _EIE2,#0x08
0073            910   ;        main.c:198: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0073 D2C2       911            setb    _TR5
0075            912   ;        main.c:200: EA=1;  // Enable global interrupts
0075 D2AF       913            setb    _EA
0077            914   ;        main.c:201: SFRPAGE=0x00;
0077 75A700     915            mov     _SFRPAGE,#0x00
007A            916   ;        main.c:203: return 0;
007A 758200     917            mov     dpl,#0x00
007D 22         918            ret
007E            919   ;------------------------------------------------------------
007E            920   ;Allocation info for local variables in function 'Timer3us'
007E            921   ;------------------------------------------------------------
007E            922   ;us                        Allocated to registers r2 
007E            923   ;i                         Allocated to registers r3 
007E            924   ;------------------------------------------------------------
007E            925   ;        main.c:207: void Timer3us(unsigned char us)
007E            926   ;        -----------------------------------------
007E            927   ;         function Timer3us
007E            928   ;        -----------------------------------------
007E            929   _Timer3us:
007E AA82       930            mov     r2,dpl
0080            931   ;        main.c:212: CKCON0|=0b_0100_0000;
0080 438E40     932            orl     _CKCON0,#0x40
0083            933   ;        main.c:214: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0083 7592B8     934            mov     _TMR3RL,#0xB8
0086 7593FF     935            mov     (_TMR3RL >> 8),#0xFF
0089            936   ;        main.c:215: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0089 859294     937            mov     _TMR3,_TMR3RL
008C 859395     938            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
008F            939   ;        main.c:217: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
008F 759104     940            mov     _TMR3CN0,#0x04
0092            941   ;        main.c:218: for (i = 0; i < us; i++)       // Count <us> overflows
0092 7B00       942            mov     r3,#0x00
0094            943   L003004?:
0094 C3         944            clr     c
0095 EB         945            mov     a,r3
0096 9A         946            subb    a,r2
0097 5000       947            jnc     L003007?
0099            948   ;        main.c:220: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0099            949   L003001?:
0099 E591       950            mov     a,_TMR3CN0
009B 30E7A0     951            jnb     acc.7,L003001?
009E            952   ;        main.c:221: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
009E 53917F     953            anl     _TMR3CN0,#0x7F
00A1            954   ;        main.c:218: for (i = 0; i < us; i++)       // Count <us> overflows
00A1 0B         955            inc     r3
00A2 8000       956            sjmp    L003004?
00A4            957   L003007?:
00A4            958   ;        main.c:223: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00A4 759100     959            mov     _TMR3CN0,#0x00
00A7 22         960            ret
00A8            961   ;------------------------------------------------------------
00A8            962   ;Allocation info for local variables in function 'waitms'
00A8            963   ;------------------------------------------------------------
00A8            964   ;ms                        Allocated to registers r2 r3 
00A8            965   ;j                         Allocated to registers r4 r5 
00A8            966   ;k                         Allocated to registers r6 
00A8            967   ;------------------------------------------------------------
00A8            968   ;        main.c:226: void waitms (unsigned int ms)
00A8            969   ;        -----------------------------------------
00A8            970   ;         function waitms
00A8            971   ;        -----------------------------------------
00A8            972   _waitms:
00A8 AA82       973            mov     r2,dpl
00AA AB83       974            mov     r3,dph
00AC            975   ;        main.c:230: for(j=0; j<ms; j++)
00AC 7C00       976            mov     r4,#0x00
00AE 7D00       977            mov     r5,#0x00
00B0            978   L004005?:
00B0 C3         979            clr     c
00B1 EC         980            mov     a,r4
00B2 9A         981            subb    a,r2
00B3 ED         982            mov     a,r5
00B4 9B         983            subb    a,r3
00B5 5000       984            jnc     L004009?
00B7            985   ;        main.c:231: for (k=0; k<4; k++) Timer3us(250);
00B7 7E00       986            mov     r6,#0x00
00B9            987   L004001?:
00B9 BE04E0     988            cjne    r6,#0x04,L004018?
00BC            989   L004018?:
00BC 5000       990            jnc     L004007?
00BE 7582FA     991            mov     dpl,#0xFA
00C1 C002       992            push    ar2
00C3 C003       993            push    ar3
00C5 C004       994            push    ar4
00C7 C005       995            push    ar5
00C9 C006       996            push    ar6
00CB 120000     997            lcall   _Timer3us
00CE D006       998            pop     ar6
00D0 D005       999            pop     ar5
00D2 D004      1000            pop     ar4
00D4 D003      1001            pop     ar3
00D6 D002      1002            pop     ar2
00D8 0E        1003            inc     r6
00D9 8000      1004            sjmp    L004001?
00DB           1005   L004007?:
00DB           1006   ;        main.c:230: for(j=0; j<ms; j++)
00DB 0C        1007            inc     r4
00DC BC0020    1008            cjne    r4,#0x00,L004005?
00DF 0D        1009            inc     r5
00E0 8000      1010            sjmp    L004005?
00E2           1011   L004009?:
00E2 22        1012            ret
00E3           1013   ;------------------------------------------------------------
00E3           1014   ;Allocation info for local variables in function 'SPI_transfer'
00E3           1015   ;------------------------------------------------------------
00E3           1016   ;tx_data                   Allocated to registers 
00E3           1017   ;------------------------------------------------------------
00E3           1018   ;        main.c:234: unsigned char SPI_transfer(unsigned char tx_data)
00E3           1019   ;        -----------------------------------------
00E3           1020   ;         function SPI_transfer
00E3           1021   ;        -----------------------------------------
00E3           1022   _SPI_transfer:
00E3 8582A3    1023            mov     _SPI0DAT,dpl
00E6           1024   ;        main.c:237: while (!SPIF);      // Wait for transfer to complete
00E6           1025   L005001?:
00E6           1026   ;        main.c:238: SPIF = 0;           // Clear SPI interrupt flag
00E6 10FFA0    1027            jbc     _SPIF,L005008?
00E9 8000      1028            sjmp    L005001?
00EB           1029   L005008?:
00EB           1030   ;        main.c:239: return SPI0DAT;     // Return received data
00EB 85A382    1031            mov     dpl,_SPI0DAT
00EE 22        1032            ret
00EF           1033   ;------------------------------------------------------------
00EF           1034   ;Allocation info for local variables in function 'SPI_read'
00EF           1035   ;------------------------------------------------------------
00EF           1036   ;reg_addr                  Allocated to registers r2 
00EF           1037   ;value                     Allocated with name '_SPI_read_value_1_93'
00EF           1038   ;------------------------------------------------------------
00EF           1039   ;        main.c:242: unsigned char SPI_read(unsigned char reg_addr)
00EF           1040   ;        -----------------------------------------
00EF           1041   ;         function SPI_read
00EF           1042   ;        -----------------------------------------
00EF           1043   _SPI_read:
00EF AA82      1044            mov     r2,dpl
00F1           1045   ;        main.c:247: reg_addr = reg_addr | 0x80;
00F1 430280    1046            orl     ar2,#0x80
00F4           1047   ;        main.c:249: CS = 0;                // Select the device
00F4 C290      1048            clr     _P1_0
00F6           1049   ;        main.c:250: SPI_transfer(reg_addr);     // Send register address
00F6 8A82      1050            mov     dpl,r2
00F8 120000    1051            lcall   _SPI_transfer
00FB           1052   ;        main.c:251: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
00FB 758200    1053            mov     dpl,#0x00
00FE 120000    1054            lcall   _SPI_transfer
0101           1055   ;        main.c:252: CS = 1;                // Deselect the device
0101 D290      1056            setb    _P1_0
0103           1057   ;        main.c:254: return value;
0103 22        1058            ret
0104           1059   ;------------------------------------------------------------
0104           1060   ;Allocation info for local variables in function 'SPI_write'
0104           1061   ;------------------------------------------------------------
0104           1062   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0104           1063   ;reg_addr                  Allocated to registers r2 
0104           1064   ;------------------------------------------------------------
0104           1065   ;        main.c:257: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0104           1066   ;        -----------------------------------------
0104           1067   ;         function SPI_write
0104           1068   ;        -----------------------------------------
0104           1069   _SPI_write:
0104 AA82      1070            mov     r2,dpl
0106           1071   ;        main.c:260: reg_addr = reg_addr & 0x7F;
0106 53027F    1072            anl     ar2,#0x7F
0109           1073   ;        main.c:262: CS = 0;                // Select device
0109 C290      1074            clr     _P1_0
010B           1075   ;        main.c:263: SPI_transfer(reg_addr);     // Send register address
010B 8A82      1076            mov     dpl,r2
010D 120000    1077            lcall   _SPI_transfer
0110           1078   ;        main.c:264: SPI_transfer(reg_value);    // Send value
0110 85F082    1079            mov     dpl,_SPI_write_PARM_2
0113 120000    1080            lcall   _SPI_transfer
0116           1081   ;        main.c:265: CS = 1;                // Deselect device
0116 D290      1082            setb    _P1_0
0118 22        1083            ret
0119           1084   ;------------------------------------------------------------
0119           1085   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
0119           1086   ;------------------------------------------------------------
0119           1087   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_97'
0119           1088   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_97'
0119           1089   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_97'
0119           1090   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97'
0119           1091   ;------------------------------------------------------------
0119           1092   ;        main.c:268: void BMM150_Read_Trim_Registers(void)
0119           1093   ;        -----------------------------------------
0119           1094   ;         function BMM150_Read_Trim_Registers
0119           1095   ;        -----------------------------------------
0119           1096   _BMM150_Read_Trim_Registers:
0119           1097   ;        main.c:272: xdata uint8_t trim_x1y1[2] = {0};
0119 90CC30    1098            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
011C           1099   ;        main.c:273: xdata uint8_t trim_xyz_data[4] = {0};
011C E4        1100            clr     a
011D F0        1101            movx    @dptr,a
011E 90CC31    1102            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
0121 F0        1103            movx    @dptr,a
0122 90CC90    1104            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0125 F0        1105            movx    @dptr,a
0126 90CC91    1106            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0001)
0129 F0        1107            movx    @dptr,a
012A 90CC92    1108            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
012D           1109   ;        main.c:274: xdata uint8_t trim_xy1xy2[10] = {0};
012D E4        1110            clr     a
012E F0        1111            movx    @dptr,a
012F 90CC93    1112            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0132 F0        1113            movx    @dptr,a
0133 90CCF0    1114            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0136 F0        1115            movx    @dptr,a
0137 90CCF1    1116            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0001)
013A F0        1117            movx    @dptr,a
013B 90CCF2    1118            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0002)
013E E4        1119            clr     a
013F F0        1120            movx    @dptr,a
0140 90CCF3    1121            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0003)
0143 F0        1122            movx    @dptr,a
0144 90CCF4    1123            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0147 F0        1124            movx    @dptr,a
0148 90CCF5    1125            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
014B F0        1126            movx    @dptr,a
014C 90CCF6    1127            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0006)
014F E4        1128            clr     a
0150 F0        1129            movx    @dptr,a
0151 90CCF7    1130            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0007)
0154 F0        1131            movx    @dptr,a
0155 90CCF8    1132            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0158 F0        1133            movx    @dptr,a
0159 90CCF9    1134            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
015C F0        1135            movx    @dptr,a
015D           1136   ;        main.c:277: for (i=0;i<2;i++){
015D 905260    1137            mov     dptr,#_i
0160 E4        1138            clr     a
0161 F0        1139            movx    @dptr,a
0162 A3        1140            inc     dptr
0163 F0        1141            movx    @dptr,a
0164           1142   L008001?:
0164 905260    1143            mov     dptr,#_i
0167 E0        1144            movx    a,@dptr
0168 FA        1145            mov     r2,a
0169 A3        1146            inc     dptr
016A E0        1147            movx    a,@dptr
016B FB        1148            mov     r3,a
016C C3        1149            clr     c
016D EA        1150            mov     a,r2
016E 9402      1151            subb    a,#0x02
0170 EB        1152            mov     a,r3
0171 9400      1153            subb    a,#0x00
0173 5000      1154            jnc     L008004?
0175           1155   ;        main.c:278: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
0175 EA        1156            mov     a,r2
0176 2430      1157            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0178 FC        1158            mov     r4,a
0179 EB        1159            mov     a,r3
017A 34CC      1160            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 >> 8)
017C FD        1161            mov     r5,a
017D 745D      1162            mov     a,#0x5D
017F 2A        1163            add     a,r2
0180 F582      1164            mov     dpl,a
0182 C004      1165            push    ar4
0184 C005      1166            push    ar5
0186 120000    1167            lcall   _SPI_read
0189 AA82      1168            mov     r2,dpl
018B D005      1169            pop     ar5
018D D004      1170            pop     ar4
018F 8C82      1171            mov     dpl,r4
0191 8D83      1172            mov     dph,r5
0193 EA        1173            mov     a,r2
0194 F0        1174            movx    @dptr,a
0195           1175   ;        main.c:277: for (i=0;i<2;i++){
0195 905260    1176            mov     dptr,#_i
0198 E0        1177            movx    a,@dptr
0199 2401      1178            add     a,#0x01
019B F0        1179            movx    @dptr,a
019C A3        1180            inc     dptr
019D E0        1181            movx    a,@dptr
019E 3400      1182            addc    a,#0x00
01A0 F0        1183            movx    @dptr,a
01A1 8000      1184            sjmp    L008001?
01A3           1185   L008004?:
01A3           1186   ;        main.c:280: for (i=0;i<4;i++){
01A3 905260    1187            mov     dptr,#_i
01A6 E4        1188            clr     a
01A7 F0        1189            movx    @dptr,a
01A8 A3        1190            inc     dptr
01A9 F0        1191            movx    @dptr,a
01AA           1192   L008005?:
01AA 905260    1193            mov     dptr,#_i
01AD E0        1194            movx    a,@dptr
01AE FA        1195            mov     r2,a
01AF A3        1196            inc     dptr
01B0 E0        1197            movx    a,@dptr
01B1 FB        1198            mov     r3,a
01B2 C3        1199            clr     c
01B3 EA        1200            mov     a,r2
01B4 9404      1201            subb    a,#0x04
01B6 EB        1202            mov     a,r3
01B7 9400      1203            subb    a,#0x00
01B9 5000      1204            jnc     L008008?
01BB           1205   ;        main.c:281: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
01BB EA        1206            mov     a,r2
01BC 2490      1207            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
01BE FC        1208            mov     r4,a
01BF EB        1209            mov     a,r3
01C0 34CC      1210            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 >> 8)
01C2 FD        1211            mov     r5,a
01C3 7462      1212            mov     a,#0x62
01C5 2A        1213            add     a,r2
01C6 F582      1214            mov     dpl,a
01C8 C004      1215            push    ar4
01CA C005      1216            push    ar5
01CC 120000    1217            lcall   _SPI_read
01CF AA82      1218            mov     r2,dpl
01D1 D005      1219            pop     ar5
01D3 D004      1220            pop     ar4
01D5 8C82      1221            mov     dpl,r4
01D7 8D83      1222            mov     dph,r5
01D9 EA        1223            mov     a,r2
01DA F0        1224            movx    @dptr,a
01DB           1225   ;        main.c:280: for (i=0;i<4;i++){
01DB 905260    1226            mov     dptr,#_i
01DE E0        1227            movx    a,@dptr
01DF 2401      1228            add     a,#0x01
01E1 F0        1229            movx    @dptr,a
01E2 A3        1230            inc     dptr
01E3 E0        1231            movx    a,@dptr
01E4 3400      1232            addc    a,#0x00
01E6 F0        1233            movx    @dptr,a
01E7 8000      1234            sjmp    L008005?
01E9           1235   L008008?:
01E9           1236   ;        main.c:283: for (i=0;i<10;i++){
01E9 905260    1237            mov     dptr,#_i
01EC E4        1238            clr     a
01ED F0        1239            movx    @dptr,a
01EE A3        1240            inc     dptr
01EF F0        1241            movx    @dptr,a
01F0           1242   L008009?:
01F0 905260    1243            mov     dptr,#_i
01F3 E0        1244            movx    a,@dptr
01F4 FA        1245            mov     r2,a
01F5 A3        1246            inc     dptr
01F6 E0        1247            movx    a,@dptr
01F7 FB        1248            mov     r3,a
01F8 C3        1249            clr     c
01F9 EA        1250            mov     a,r2
01FA 940A      1251            subb    a,#0x0A
01FC EB        1252            mov     a,r3
01FD 9400      1253            subb    a,#0x00
01FF 5000      1254            jnc     L008012?
0201           1255   ;        main.c:284: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
0201 EA        1256            mov     a,r2
0202 24F0      1257            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0204 FC        1258            mov     r4,a
0205 EB        1259            mov     a,r3
0206 34CC      1260            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 >> 8)
0208 FD        1261            mov     r5,a
0209 7468      1262            mov     a,#0x68
020B 2A        1263            add     a,r2
020C F582      1264            mov     dpl,a
020E C004      1265            push    ar4
0210 C005      1266            push    ar5
0212 120000    1267            lcall   _SPI_read
0215 AA82      1268            mov     r2,dpl
0217 D005      1269            pop     ar5
0219 D004      1270            pop     ar4
021B 8C82      1271            mov     dpl,r4
021D 8D83      1272            mov     dph,r5
021F EA        1273            mov     a,r2
0220 F0        1274            movx    @dptr,a
0221           1275   ;        main.c:283: for (i=0;i<10;i++){
0221 905260    1276            mov     dptr,#_i
0224 E0        1277            movx    a,@dptr
0225 2401      1278            add     a,#0x01
0227 F0        1279            movx    @dptr,a
0228 A3        1280            inc     dptr
0229 E0        1281            movx    a,@dptr
022A 3400      1282            addc    a,#0x00
022C F0        1283            movx    @dptr,a
022D 8000      1284            sjmp    L008009?
022F           1285   L008012?:
022F           1286   ;        main.c:287: dig_x1 = (int8_t) trim_x1y1[0]; 
022F 90CC30    1287            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0232 E0        1288            movx    a,@dptr
0233 905620    1289            mov     dptr,#_dig_x1
0236 F0        1290            movx    @dptr,a
0237           1291   ;        main.c:288: dig_y1 = (int8_t) trim_x1y1[1]; 
0237 90CC31    1292            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
023A E0        1293            movx    a,@dptr
023B 9055A0    1294            mov     dptr,#_dig_y1
023E F0        1295            movx    @dptr,a
023F           1296   ;        main.c:289: dig_x2 = (int8_t) trim_xyz_data[2]; 
023F 90CC92    1297            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
0242 E0        1298            movx    a,@dptr
0243 9055E0    1299            mov     dptr,#_dig_x2
0246 F0        1300            movx    @dptr,a
0247           1301   ;        main.c:290: dig_y2 = (int8_t) trim_xyz_data[3]; 
0247 90CC93    1302            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
024A E0        1303            movx    a,@dptr
024B 905560    1304            mov     dptr,#_dig_y2
024E F0        1305            movx    @dptr,a
024F           1306   ;        main.c:304: dig_xy1 = trim_xy1xy2[9];
024F 90CCF9    1307            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
0252 E0        1308            movx    a,@dptr
0253 905420    1309            mov     dptr,#_dig_xy1
0256 F0        1310            movx    @dptr,a
0257           1311   ;        main.c:305: dig_xy2 = (int8_t)trim_xy1xy2[8];
0257 90CCF8    1312            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
025A E0        1313            movx    a,@dptr
025B 9053E0    1314            mov     dptr,#_dig_xy2
025E F0        1315            movx    @dptr,a
025F           1316   ;        main.c:307: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
025F 90CCF5    1317            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
0262 E0        1318            movx    a,@dptr
0263 FA        1319            mov     r2,a
0264 53027F    1320            anl     ar2,#0x7F
0267 8A03      1321            mov     ar3,r2
0269 7A00      1322            mov     r2,#0x00
026B           1323   ;        main.c:308: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
026B 90CCF4    1324            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
026E E0        1325            movx    a,@dptr
026F FC        1326            mov     r4,a
0270 7D00      1327            mov     r5,#0x00
0272 9053A0    1328            mov     dptr,#_dig_xyz1
0275 EC        1329            mov     a,r4
0276 4A        1330            orl     a,r2
0277 F0        1331            movx    @dptr,a
0278 ED        1332            mov     a,r5
0279 4B        1333            orl     a,r3
027A A3        1334            inc     dptr
027B F0        1335            movx    @dptr,a
027C 22        1336            ret
027D           1337   ;------------------------------------------------------------
027D           1338   ;Allocation info for local variables in function 'BMM150_Init'
027D           1339   ;------------------------------------------------------------
027D           1340   ;chip_id                   Allocated with name '_BMM150_Init_chip_id_1_102'
027D           1341   ;------------------------------------------------------------
027D           1342   ;        main.c:312: void BMM150_Init(void)
027D           1343   ;        -----------------------------------------
027D           1344   ;         function BMM150_Init
027D           1345   ;        -----------------------------------------
027D           1346   _BMM150_Init:
027D           1347   ;        main.c:317: CS = 1; // Deselect BMM150
027D D290      1348            setb    _P1_0
027F           1349   ;        main.c:320: waitms(10);
027F 90000A    1350            mov     dptr,#0x000A
0282 120000    1351            lcall   _waitms
0285           1352   ;        main.c:323: SPI_write(BMM150_POWER_CONTROL, 0x82);
0285 75F082    1353            mov     _SPI_write_PARM_2,#0x82
0288 75824B    1354            mov     dpl,#0x4B
028B 120000    1355            lcall   _SPI_write
028E           1356   ;        main.c:324: waitms(10);  // Wait for reset to complete
028E 90000A    1357            mov     dptr,#0x000A
0291 120000    1358            lcall   _waitms
0294           1359   ;        main.c:327: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
0294 75F001    1360            mov     _SPI_write_PARM_2,#0x01
0297 75824B    1361            mov     dpl,#0x4B
029A 120000    1362            lcall   _SPI_write
029D           1363   ;        main.c:328: waitms(5);
029D 900005    1364            mov     dptr,#0x0005
02A0 120000    1365            lcall   _waitms
02A3           1366   ;        main.c:331: chip_id = SPI_read(BMM150_CHIP_ID);
02A3 758240    1367            mov     dpl,#0x40
02A6 120000    1368            lcall   _SPI_read
02A9 AA82      1369            mov     r2,dpl
02AB           1370   ;        main.c:332: if (chip_id != BMM150_CHIP_ID_VALUE)
02AB BA3260    1371            cjne    r2,#0x32,L009006?
02AE 8000      1372            sjmp    L009002?
02B0           1373   L009006?:
02B0           1374   ;        main.c:334: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
02B0 8A03      1375            mov     ar3,r2
02B2 7C00      1376            mov     r4,#0x00
02B4 C002      1377            push    ar2
02B6 C003      1378            push    ar3
02B8 C004      1379            push    ar4
02BA 74E0      1380            mov     a,#__str_0
02BC C0E0      1381            push    acc
02BE 74DA      1382            mov     a,#(__str_0 >> 8)
02C0 C0E0      1383            push    acc
02C2 7480      1384            mov     a,#0x80
02C4 C0E0      1385            push    acc
02C6 120000    1386            lcall   _printf
02C9 E581      1387            mov     a,sp
02CB 24FB      1388            add     a,#0xfb
02CD F581      1389            mov     sp,a
02CF D002      1390            pop     ar2
02D1           1391   L009002?:
02D1           1392   ;        main.c:344: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
02D1 75F000    1393            mov     _SPI_write_PARM_2,#0x00
02D4 75824C    1394            mov     dpl,#0x4C
02D7 C002      1395            push    ar2
02D9 120000    1396            lcall   _SPI_write
02DC           1397   ;        main.c:347: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
02DC 75F07F    1398            mov     _SPI_write_PARM_2,#0x7F
02DF 758251    1399            mov     dpl,#0x51
02E2 120000    1400            lcall   _SPI_write
02E5           1401   ;        main.c:348: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
02E5 75F00E    1402            mov     _SPI_write_PARM_2,#0x0E
02E8 758252    1403            mov     dpl,#0x52
02EB 120000    1404            lcall   _SPI_write
02EE           1405   ;        main.c:350: BMM150_Read_Trim_Registers();
02EE 120000    1406            lcall   _BMM150_Read_Trim_Registers
02F1           1407   ;        main.c:352: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
02F1 7B00      1408            mov     r3,#0x00
02F3 C003      1409            push    ar3
02F5 74A0      1410            mov     a,#__str_1
02F7 C0E0      1411            push    acc
02F9 74DB      1412            mov     a,#(__str_1 >> 8)
02FB C0E0      1413            push    acc
02FD 7480      1414            mov     a,#0x80
02FF C0E0      1415            push    acc
0301 120000    1416            lcall   _printf
0304 E581      1417            mov     a,sp
0306 24FB      1418            add     a,#0xfb
0308 F581      1419            mov     sp,a
030A           1420   ;        main.c:353: return; 
030A 22        1421            ret
030B           1422   ;------------------------------------------------------------
030B           1423   ;Allocation info for local variables in function 'BMM150_compensate_x'
030B           1424   ;------------------------------------------------------------
030B           1425   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
030B           1426   ;mag_data_x                Allocated to registers r2 r3 r4 
030B           1427   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
030B           1428   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_106'
030B           1429   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_106'
030B           1430   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_106'
030B           1431   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_106'
030B           1432   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_106'
030B           1433   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_106'
030B           1434   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_106'
030B           1435   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_106'
030B           1436   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_106'
030B           1437   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_106'
030B           1438   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_106'
030B           1439   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_106'
030B           1440   ;------------------------------------------------------------
030B           1441   ;        main.c:356: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
030B           1442   ;        -----------------------------------------
030B           1443   ;         function BMM150_compensate_x
030B           1444   ;        -----------------------------------------
030B           1445   _BMM150_compensate_x:
030B           1446   ;        main.c:374: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
030B ACF0      1447            mov     r4,b
030D 120000    1448            lcall   __gptrget
0310 FA        1449            mov     r2,a
0311 A3        1450            inc     dptr
0312 120000    1451            lcall   __gptrget
0315 FB        1452            mov     r3,a
0316 BA0060    1453            cjne    r2,#0x00,L010019?
0319 BBF060    1454            cjne    r3,#0xF0,L010019?
031C 020000    1455            ljmp    L010011?
031F           1456   L010019?:
031F           1457   ;        main.c:375: if (*data_rhall != 0)
031F ACA0      1458            mov     r4,_BMM150_compensate_x_PARM_2
0321 ADA1      1459            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
0323 AEA2      1460            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
0325 8C82      1461            mov     dpl,r4
0327 8D83      1462            mov     dph,r5
0329 8EF0      1463            mov     b,r6
032B 120000    1464            lcall   __gptrget
032E FC        1465            mov     r4,a
032F A3        1466            inc     dptr
0330 120000    1467            lcall   __gptrget
0333 FD        1468            mov     r5,a
0334 4C        1469            orl     a,r4
0335 6000      1470            jz      L010005?
0337           1471   ;        main.c:378: process_comp_x0 = *data_rhall;
0337 90CDB0    1472            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
033A EC        1473            mov     a,r4
033B F0        1474            movx    @dptr,a
033C A3        1475            inc     dptr
033D ED        1476            mov     a,r5
033E F0        1477            movx    @dptr,a
033F 8000      1478            sjmp    L010006?
0341           1479   L010005?:
0341           1480   ;        main.c:380: else if (dig_xyz1 != 0)
0341 9053A0    1481            mov     dptr,#_dig_xyz1
0344 E0        1482            movx    a,@dptr
0345 FC        1483            mov     r4,a
0346 A3        1484            inc     dptr
0347 E0        1485            movx    a,@dptr
0348 FD        1486            mov     r5,a
0349 4C        1487            orl     a,r4
034A 6000      1488            jz      L010002?
034C           1489   ;        main.c:382: process_comp_x0 = dig_xyz1;
034C 90CDB0    1490            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
034F EC        1491            mov     a,r4
0350 F0        1492            movx    @dptr,a
0351 A3        1493            inc     dptr
0352 ED        1494            mov     a,r5
0353 F0        1495            movx    @dptr,a
0354 8000      1496            sjmp    L010006?
0356           1497   L010002?:
0356           1498   ;        main.c:386: process_comp_x0 = 0;
0356 90CDB0    1499            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0359 E4        1500            clr     a
035A F0        1501            movx    @dptr,a
035B A3        1502            inc     dptr
035C F0        1503            movx    @dptr,a
035D           1504   L010006?:
035D           1505   ;        main.c:388: if (process_comp_x0 != 0)
035D 90CDB0    1506            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0360 E0        1507            movx    a,@dptr
0361 FC        1508            mov     r4,a
0362 A3        1509            inc     dptr
0363 E0        1510            movx    a,@dptr
0364 FD        1511            mov     r5,a
0365 4C        1512            orl     a,r4
0366 7000      1513            jnz     L010022?
0368 020000    1514            ljmp    L010008?
036B           1515   L010022?:
036B           1516   ;        main.c:391: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
036B 9053A0    1517            mov     dptr,#_dig_xyz1
036E E0        1518            movx    a,@dptr
036F FE        1519            mov     r6,a
0370 A3        1520            inc     dptr
0371 E0        1521            movx    a,@dptr
0372 FF        1522            mov     r7,a
0373 E4        1523            clr     a
0374 F8        1524            mov     r0,a
0375 EF        1525            mov     a,r7
0376 C8        1526            xch     a,r0
0377 5403      1527            anl     a,#0x03
0379 A2E0      1528            mov     c,acc.0
037B C8        1529            xch     a,r0
037C 13        1530            rrc     a
037D C8        1531            xch     a,r0
037E 13        1532            rrc     a
037F A2E0      1533            mov     c,acc.0
0381 C8        1534            xch     a,r0
0382 13        1535            rrc     a
0383 C8        1536            xch     a,r0
0384 13        1537            rrc     a
0385 C8        1538            xch     a,r0
0386 F9        1539            mov     r1,a
0387 EE        1540            mov     a,r6
0388 03        1541            rr      a
0389 03        1542            rr      a
038A 54C0      1543            anl     a,#0xc0
038C FF        1544            mov     r7,a
038D EE        1545            mov     a,r6
038E 03        1546            rr      a
038F 03        1547            rr      a
0390 543F      1548            anl     a,#0x3f
0392 48        1549            orl     a,r0
0393 F8        1550            mov     r0,a
0394 7E00      1551            mov     r6,#0x00
0396           1552   ;        main.c:392: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
0396 8C00      1553            mov     __divslong_PARM_2,r4
0398 8D01      1554            mov     (__divslong_PARM_2 + 1),r5
039A 750200    1555            mov     (__divslong_PARM_2 + 2),#0x00
039D 750300    1556            mov     (__divslong_PARM_2 + 3),#0x00
03A0 8E82      1557            mov     dpl,r6
03A2 8F83      1558            mov     dph,r7
03A4 88F0      1559            mov     b,r0
03A6 E9        1560            mov     a,r1
03A7 C002      1561            push    ar2
03A9 C003      1562            push    ar3
03AB 120000    1563            lcall   __divslong
03AE AC82      1564            mov     r4,dpl
03B0 E583      1565            mov     a,dph
03B2 24C0      1566            add     a,#0xc0
03B4 FD        1567            mov     r5,a
03B5           1568   ;        main.c:394: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
03B5 8C06      1569            mov     ar6,r4
03B7 8D07      1570            mov     ar7,r5
03B9 8E00      1571            mov     _BMM150_compensate_x_sloc0_1_0,r6
03BB EF        1572            mov     a,r7
03BC F501      1573            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
03BE 33        1574            rlc     a
03BF 95E0      1575            subb    a,acc
03C1 F502      1576            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
03C3 F503      1577            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03C5 8C06      1578            mov     ar6,r4
03C7 8D07      1579            mov     ar7,r5
03C9 8E00      1580            mov     __mullong_PARM_2,r6
03CB EF        1581            mov     a,r7
03CC F501      1582            mov     (__mullong_PARM_2 + 1),a
03CE 33        1583            rlc     a
03CF 95E0      1584            subb    a,acc
03D1 F502      1585            mov     (__mullong_PARM_2 + 2),a
03D3 F503      1586            mov     (__mullong_PARM_2 + 3),a
03D5           1587   ;        main.c:395: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
03D5 850082    1588            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03D8 850183    1589            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03DB 8502F0    1590            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03DE E503      1591            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03E0 C004      1592            push    ar4
03E2 C005      1593            push    ar5
03E4 120000    1594            lcall   __mullong
03E7 858200    1595            mov     _BMM150_compensate_x_sloc0_1_0,dpl
03EA 858301    1596            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
03ED 85F002    1597            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
03F0 F503      1598            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03F2 9053E0    1599            mov     dptr,#_dig_xy2
03F5 E0        1600            movx    a,@dptr
03F6 FE        1601            mov     r6,a
03F7 33        1602            rlc     a
03F8 95E0      1603            subb    a,acc
03FA FF        1604            mov     r7,a
03FB F8        1605            mov     r0,a
03FC F9        1606            mov     r1,a
03FD 750080    1607            mov     __divslong_PARM_2,#0x80
0400 E4        1608            clr     a
0401 F501      1609            mov     (__divslong_PARM_2 + 1),a
0403 F502      1610            mov     (__divslong_PARM_2 + 2),a
0405 F503      1611            mov     (__divslong_PARM_2 + 3),a
0407 850082    1612            mov     dpl,_BMM150_compensate_x_sloc0_1_0
040A 850183    1613            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
040D 8502F0    1614            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
0410 E503      1615            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0412 C006      1616            push    ar6
0414 C007      1617            push    ar7
0416 C000      1618            push    ar0
0418 C001      1619            push    ar1
041A 120000    1620            lcall   __divslong
041D 858200    1621            mov     __mullong_PARM_2,dpl
0420 858301    1622            mov     (__mullong_PARM_2 + 1),dph
0423 85F002    1623            mov     (__mullong_PARM_2 + 2),b
0426 F503      1624            mov     (__mullong_PARM_2 + 3),a
0428 D001      1625            pop     ar1
042A D000      1626            pop     ar0
042C D007      1627            pop     ar7
042E D006      1628            pop     ar6
0430           1629   ;        main.c:396: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
0430 8E82      1630            mov     dpl,r6
0432 8F83      1631            mov     dph,r7
0434 88F0      1632            mov     b,r0
0436 E9        1633            mov     a,r1
0437 120000    1634            lcall   __mullong
043A 858200    1635            mov     _BMM150_compensate_x_sloc0_1_0,dpl
043D 858301    1636            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
0440 85F002    1637            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
0443 F503      1638            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
0445 D005      1639            pop     ar5
0447 D004      1640            pop     ar4
0449 905420    1641            mov     dptr,#_dig_xy1
044C E0        1642            movx    a,@dptr
044D FE        1643            mov     r6,a
044E E4        1644            clr     a
044F 5401      1645            anl     a,#0x01
0451 A2E0      1646            mov     c,acc.0
0453 CE        1647            xch     a,r6
0454 13        1648            rrc     a
0455 CE        1649            xch     a,r6
0456 13        1650            rrc     a
0457 CE        1651            xch     a,r6
0458 8E00      1652            mov     __mullong_PARM_2,r6
045A F501      1653            mov     (__mullong_PARM_2 + 1),a
045C 33        1654            rlc     a
045D 95E0      1655            subb    a,acc
045F F502      1656            mov     (__mullong_PARM_2 + 2),a
0461 F503      1657            mov     (__mullong_PARM_2 + 3),a
0463           1658   ;        main.c:397: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
0463 ED        1659            mov     a,r5
0464 33        1660            rlc     a
0465 95E0      1661            subb    a,acc
0467 FE        1662            mov     r6,a
0468           1663   ;        main.c:398: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
0468 8C82      1664            mov     dpl,r4
046A 8D83      1665            mov     dph,r5
046C 8EF0      1666            mov     b,r6
046E 120000    1667            lcall   __mullong
0471 AC82      1668            mov     r4,dpl
0473 AD83      1669            mov     r5,dph
0475 AEF0      1670            mov     r6,b
0477 FF        1671            mov     r7,a
0478 EC        1672            mov     a,r4
0479 2500      1673            add     a,_BMM150_compensate_x_sloc0_1_0
047B FC        1674            mov     r4,a
047C ED        1675            mov     a,r5
047D 3501      1676            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
047F FD        1677            mov     r5,a
0480 EE        1678            mov     a,r6
0481 3502      1679            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
0483 FE        1680            mov     r6,a
0484 EF        1681            mov     a,r7
0485 3503      1682            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0487 FF        1683            mov     r7,a
0488 750000    1684            mov     __divslong_PARM_2,#0x00
048B 750102    1685            mov     (__divslong_PARM_2 + 1),#0x02
048E 750200    1686            mov     (__divslong_PARM_2 + 2),#0x00
0491 750300    1687            mov     (__divslong_PARM_2 + 3),#0x00
0494 8C82      1688            mov     dpl,r4
0496 8D83      1689            mov     dph,r5
0498 8EF0      1690            mov     b,r6
049A EF        1691            mov     a,r7
049B 120000    1692            lcall   __divslong
049E AC82      1693            mov     r4,dpl
04A0 AD83      1694            mov     r5,dph
04A2 AEF0      1695            mov     r6,b
04A4 FF        1696            mov     r7,a
04A5 7410      1697            mov     a,#0x10
04A7 2E        1698            add     a,r6
04A8 FE        1699            mov     r6,a
04A9 E4        1700            clr     a
04AA 3F        1701            addc    a,r7
04AB FF        1702            mov     r7,a
04AC           1703   ;        main.c:399: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
04AC 9055E0    1704            mov     dptr,#_dig_x2
04AF E0        1705            movx    a,@dptr
04B0 F8        1706            mov     r0,a
04B1 33        1707            rlc     a
04B2 95E0      1708            subb    a,acc
04B4 F9        1709            mov     r1,a
04B5 74A0      1710            mov     a,#0xA0
04B7 28        1711            add     a,r0
04B8 F8        1712            mov     r0,a
04B9 E4        1713            clr     a
04BA 39        1714            addc    a,r1
04BB 8800      1715            mov     __mullong_PARM_2,r0
04BD F501      1716            mov     (__mullong_PARM_2 + 1),a
04BF 33        1717            rlc     a
04C0 95E0      1718            subb    a,acc
04C2 F502      1719            mov     (__mullong_PARM_2 + 2),a
04C4 F503      1720            mov     (__mullong_PARM_2 + 3),a
04C6           1721   ;        main.c:400: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
04C6 8C82      1722            mov     dpl,r4
04C8 8D83      1723            mov     dph,r5
04CA 8EF0      1724            mov     b,r6
04CC EF        1725            mov     a,r7
04CD 120000    1726            lcall   __mullong
04D0           1727   ;        main.c:401: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
04D0 750000    1728            mov     __divslong_PARM_2,#0x00
04D3 750110    1729            mov     (__divslong_PARM_2 + 1),#0x10
04D6 750200    1730            mov     (__divslong_PARM_2 + 2),#0x00
04D9 750300    1731            mov     (__divslong_PARM_2 + 3),#0x00
04DC 120000    1732            lcall   __divslong
04DF 858200    1733            mov     __mullong_PARM_2,dpl
04E2 858301    1734            mov     (__mullong_PARM_2 + 1),dph
04E5 85F002    1735            mov     (__mullong_PARM_2 + 2),b
04E8 F503      1736            mov     (__mullong_PARM_2 + 3),a
04EA D003      1737            pop     ar3
04EC D002      1738            pop     ar2
04EE EB        1739            mov     a,r3
04EF 33        1740            rlc     a
04F0 95E0      1741            subb    a,acc
04F2 FC        1742            mov     r4,a
04F3           1743   ;        main.c:402: retval = ((int16_t)(process_comp_x10 / 8192));
04F3 8A82      1744            mov     dpl,r2
04F5 8B83      1745            mov     dph,r3
04F7 8CF0      1746            mov     b,r4
04F9 120000    1747            lcall   __mullong
04FC 750000    1748            mov     __divslong_PARM_2,#0x00
04FF 750120    1749            mov     (__divslong_PARM_2 + 1),#0x20
0502 750200    1750            mov     (__divslong_PARM_2 + 2),#0x00
0505 750300    1751            mov     (__divslong_PARM_2 + 3),#0x00
0508 120000    1752            lcall   __divslong
050B AA82      1753            mov     r2,dpl
050D AB83      1754            mov     r3,dph
050F           1755   ;        main.c:403: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
050F 905620    1756            mov     dptr,#_dig_x1
0512 E0        1757            movx    a,@dptr
0513 FC        1758            mov     r4,a
0514 33        1759            rlc     a
0515 95E0      1760            subb    a,acc
0517 C4        1761            swap    a
0518 03        1762            rr      a
0519 54F8      1763            anl     a,#0xf8
051B CC        1764            xch     a,r4
051C C4        1765            swap    a
051D 03        1766            rr      a
051E CC        1767            xch     a,r4
051F 6C        1768            xrl     a,r4
0520 CC        1769            xch     a,r4
0521 54F8      1770            anl     a,#0xf8
0523 CC        1771            xch     a,r4
0524 6C        1772            xrl     a,r4
0525 FD        1773            mov     r5,a
0526 EC        1774            mov     a,r4
0527 2A        1775            add     a,r2
0528 F582      1776            mov     dpl,a
052A ED        1777            mov     a,r5
052B 3B        1778            addc    a,r3
052C F583      1779            mov     dph,a
052E 750010    1780            mov     __divsint_PARM_2,#0x10
0531 E4        1781            clr     a
0532 F501      1782            mov     (__divsint_PARM_2 + 1),a
0534 120000    1783            lcall   __divsint
0537 E582      1784            mov     a,dpl
0539 8583F0    1785            mov     b,dph
053C 90CD50    1786            mov     dptr,#_BMM150_compensate_x_retval_1_106
053F F0        1787            movx    @dptr,a
0540 A3        1788            inc     dptr
0541 E5F0      1789            mov     a,b
0543 F0        1790            movx    @dptr,a
0544 8000      1791            sjmp    L010012?
0546           1792   L010008?:
0546           1793   ;        main.c:406: retval = BMM150_OVERFLOW_OUTPUT; 
0546 90CD50    1794            mov     dptr,#_BMM150_compensate_x_retval_1_106
0549 E4        1795            clr     a
054A F0        1796            movx    @dptr,a
054B A3        1797            inc     dptr
054C 7480      1798            mov     a,#0x80
054E F0        1799            movx    @dptr,a
054F 8000      1800            sjmp    L010012?
0551           1801   L010011?:
0551           1802   ;        main.c:410: retval = BMM150_OVERFLOW_OUTPUT; 
0551 90CD50    1803            mov     dptr,#_BMM150_compensate_x_retval_1_106
0554 E4        1804            clr     a
0555 F0        1805            movx    @dptr,a
0556 A3        1806            inc     dptr
0557 7480      1807            mov     a,#0x80
0559 F0        1808            movx    @dptr,a
055A           1809   L010012?:
055A           1810   ;        main.c:412: return retval; 
055A 90CD50    1811            mov     dptr,#_BMM150_compensate_x_retval_1_106
055D E0        1812            movx    a,@dptr
055E FA        1813            mov     r2,a
055F A3        1814            inc     dptr
0560 E0        1815            movx    a,@dptr
0561 8A82      1816            mov     dpl,r2
0563 F583      1817            mov     dph,a
0565 22        1818            ret
0566           1819   ;------------------------------------------------------------
0566           1820   ;Allocation info for local variables in function 'BMM150_compensate_y'
0566           1821   ;------------------------------------------------------------
0566           1822   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
0566           1823   ;mag_data_y                Allocated to registers r2 r3 r4 
0566           1824   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
0566           1825   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_115'
0566           1826   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_115'
0566           1827   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_115'
0566           1828   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_115'
0566           1829   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_115'
0566           1830   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_115'
0566           1831   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_115'
0566           1832   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_115'
0566           1833   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_115'
0566           1834   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_115'
0566           1835   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_115'
0566           1836   ;------------------------------------------------------------
0566           1837   ;        main.c:415: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
0566           1838   ;        -----------------------------------------
0566           1839   ;         function BMM150_compensate_y
0566           1840   ;        -----------------------------------------
0566           1841   _BMM150_compensate_y:
0566           1842   ;        main.c:433: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
0566 ACF0      1843            mov     r4,b
0568 120000    1844            lcall   __gptrget
056B FA        1845            mov     r2,a
056C A3        1846            inc     dptr
056D 120000    1847            lcall   __gptrget
0570 FB        1848            mov     r3,a
0571 BA0010    1849            cjne    r2,#0x00,L011019?
0574 BBF010    1850            cjne    r3,#0xF0,L011019?
0577 020000    1851            ljmp    L011011?
057A           1852   L011019?:
057A           1853   ;        main.c:435: if (*data_rhall != 0)
057A AC50      1854            mov     r4,_BMM150_compensate_y_PARM_2
057C AD51      1855            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
057E AE52      1856            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
0580 8C82      1857            mov     dpl,r4
0582 8D83      1858            mov     dph,r5
0584 8EF0      1859            mov     b,r6
0586 120000    1860            lcall   __gptrget
0589 FC        1861            mov     r4,a
058A A3        1862            inc     dptr
058B 120000    1863            lcall   __gptrget
058E FD        1864            mov     r5,a
058F 4C        1865            orl     a,r4
0590 6000      1866            jz      L011005?
0592           1867   ;        main.c:438: process_comp_y0 = *data_rhall;
0592 90CE70    1868            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
0595 EC        1869            mov     a,r4
0596 F0        1870            movx    @dptr,a
0597 A3        1871            inc     dptr
0598 ED        1872            mov     a,r5
0599 F0        1873            movx    @dptr,a
059A 8000      1874            sjmp    L011006?
059C           1875   L011005?:
059C           1876   ;        main.c:440: else if (dig_xyz1 != 0)
059C 9053A0    1877            mov     dptr,#_dig_xyz1
059F E0        1878            movx    a,@dptr
05A0 FC        1879            mov     r4,a
05A1 A3        1880            inc     dptr
05A2 E0        1881            movx    a,@dptr
05A3 FD        1882            mov     r5,a
05A4 4C        1883            orl     a,r4
05A5 6000      1884            jz      L011002?
05A7           1885   ;        main.c:442: process_comp_y0 = dig_xyz1;
05A7 90CE70    1886            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
05AA EC        1887            mov     a,r4
05AB F0        1888            movx    @dptr,a
05AC A3        1889            inc     dptr
05AD ED        1890            mov     a,r5
05AE F0        1891            movx    @dptr,a
05AF 8000      1892            sjmp    L011006?
05B1           1893   L011002?:
05B1           1894   ;        main.c:446: process_comp_y0 = 0;
05B1 90CE70    1895            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
05B4 E4        1896            clr     a
05B5 F0        1897            movx    @dptr,a
05B6 A3        1898            inc     dptr
05B7 F0        1899            movx    @dptr,a
05B8           1900   L011006?:
05B8           1901   ;        main.c:449: if (process_comp_y0 != 0)
05B8 90CE70    1902            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
05BB E0        1903            movx    a,@dptr
05BC FC        1904            mov     r4,a
05BD A3        1905            inc     dptr
05BE E0        1906            movx    a,@dptr
05BF FD        1907            mov     r5,a
05C0 4C        1908            orl     a,r4
05C1 7000      1909            jnz     L011022?
05C3 020000    1910            ljmp    L011008?
05C6           1911   L011022?:
05C6           1912   ;        main.c:452: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
05C6 9053A0    1913            mov     dptr,#_dig_xyz1
05C9 E0        1914            movx    a,@dptr
05CA FE        1915            mov     r6,a
05CB A3        1916            inc     dptr
05CC E0        1917            movx    a,@dptr
05CD FF        1918            mov     r7,a
05CE E4        1919            clr     a
05CF F8        1920            mov     r0,a
05D0 EF        1921            mov     a,r7
05D1 C8        1922            xch     a,r0
05D2 5403      1923            anl     a,#0x03
05D4 A2E0      1924            mov     c,acc.0
05D6 C8        1925            xch     a,r0
05D7 13        1926            rrc     a
05D8 C8        1927            xch     a,r0
05D9 13        1928            rrc     a
05DA A2E0      1929            mov     c,acc.0
05DC C8        1930            xch     a,r0
05DD 13        1931            rrc     a
05DE C8        1932            xch     a,r0
05DF 13        1933            rrc     a
05E0 C8        1934            xch     a,r0
05E1 F9        1935            mov     r1,a
05E2 EE        1936            mov     a,r6
05E3 03        1937            rr      a
05E4 03        1938            rr      a
05E5 54C0      1939            anl     a,#0xc0
05E7 FF        1940            mov     r7,a
05E8 EE        1941            mov     a,r6
05E9 03        1942            rr      a
05EA 03        1943            rr      a
05EB 543F      1944            anl     a,#0x3f
05ED 48        1945            orl     a,r0
05EE F8        1946            mov     r0,a
05EF 7E00      1947            mov     r6,#0x00
05F1 8C00      1948            mov     __divslong_PARM_2,r4
05F3 8D01      1949            mov     (__divslong_PARM_2 + 1),r5
05F5 750200    1950            mov     (__divslong_PARM_2 + 2),#0x00
05F8 750300    1951            mov     (__divslong_PARM_2 + 3),#0x00
05FB           1952   ;        main.c:453: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
05FB 8E82      1953            mov     dpl,r6
05FD 8F83      1954            mov     dph,r7
05FF 88F0      1955            mov     b,r0
0601 E9        1956            mov     a,r1
0602 C002      1957            push    ar2
0604 C003      1958            push    ar3
0606 120000    1959            lcall   __divslong
0609 AC82      1960            mov     r4,dpl
060B E583      1961            mov     a,dph
060D 24C0      1962            add     a,#0xc0
060F FD        1963            mov     r5,a
0610           1964   ;        main.c:455: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
0610 8C06      1965            mov     ar6,r4
0612 8D07      1966            mov     ar7,r5
0614 8E50      1967            mov     _BMM150_compensate_y_sloc0_1_0,r6
0616 EF        1968            mov     a,r7
0617 F551      1969            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
0619 33        1970            rlc     a
061A 95E0      1971            subb    a,acc
061C F552      1972            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
061E F553      1973            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0620 8C06      1974            mov     ar6,r4
0622 8D07      1975            mov     ar7,r5
0624 8E00      1976            mov     __mullong_PARM_2,r6
0626 EF        1977            mov     a,r7
0627 F501      1978            mov     (__mullong_PARM_2 + 1),a
0629 33        1979            rlc     a
062A 95E0      1980            subb    a,acc
062C F502      1981            mov     (__mullong_PARM_2 + 2),a
062E F503      1982            mov     (__mullong_PARM_2 + 3),a
0630           1983   ;        main.c:456: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
0630 855082    1984            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0633 855183    1985            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0636 8552F0    1986            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
0639 E553      1987            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
063B C004      1988            push    ar4
063D C005      1989            push    ar5
063F 120000    1990            lcall   __mullong
0642 858250    1991            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0645 858351    1992            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
0648 85F052    1993            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
064B F553      1994            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
064D 9053E0    1995            mov     dptr,#_dig_xy2
0650 E0        1996            movx    a,@dptr
0651 FE        1997            mov     r6,a
0652 33        1998            rlc     a
0653 95E0      1999            subb    a,acc
0655 FF        2000            mov     r7,a
0656 F8        2001            mov     r0,a
0657 F9        2002            mov     r1,a
0658 750080    2003            mov     __divslong_PARM_2,#0x80
065B E4        2004            clr     a
065C F501      2005            mov     (__divslong_PARM_2 + 1),a
065E F502      2006            mov     (__divslong_PARM_2 + 2),a
0660 F503      2007            mov     (__divslong_PARM_2 + 3),a
0662 855082    2008            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0665 855183    2009            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0668 8552F0    2010            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
066B E553      2011            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
066D C006      2012            push    ar6
066F C007      2013            push    ar7
0671 C000      2014            push    ar0
0673 C001      2015            push    ar1
0675 120000    2016            lcall   __divslong
0678 858200    2017            mov     __mullong_PARM_2,dpl
067B 858301    2018            mov     (__mullong_PARM_2 + 1),dph
067E 85F002    2019            mov     (__mullong_PARM_2 + 2),b
0681 F503      2020            mov     (__mullong_PARM_2 + 3),a
0683 D001      2021            pop     ar1
0685 D000      2022            pop     ar0
0687 D007      2023            pop     ar7
0689 D006      2024            pop     ar6
068B           2025   ;        main.c:457: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
068B 8E82      2026            mov     dpl,r6
068D 8F83      2027            mov     dph,r7
068F 88F0      2028            mov     b,r0
0691 E9        2029            mov     a,r1
0692 120000    2030            lcall   __mullong
0695 858250    2031            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0698 858351    2032            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
069B 85F052    2033            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
069E F553      2034            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
06A0 D005      2035            pop     ar5
06A2 D004      2036            pop     ar4
06A4 905420    2037            mov     dptr,#_dig_xy1
06A7 E0        2038            movx    a,@dptr
06A8 FE        2039            mov     r6,a
06A9 E4        2040            clr     a
06AA 5401      2041            anl     a,#0x01
06AC A2E0      2042            mov     c,acc.0
06AE CE        2043            xch     a,r6
06AF 13        2044            rrc     a
06B0 CE        2045            xch     a,r6
06B1 13        2046            rrc     a
06B2 CE        2047            xch     a,r6
06B3 8E00      2048            mov     __mullong_PARM_2,r6
06B5 F501      2049            mov     (__mullong_PARM_2 + 1),a
06B7 33        2050            rlc     a
06B8 95E0      2051            subb    a,acc
06BA F502      2052            mov     (__mullong_PARM_2 + 2),a
06BC F503      2053            mov     (__mullong_PARM_2 + 3),a
06BE           2054   ;        main.c:458: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
06BE ED        2055            mov     a,r5
06BF 33        2056            rlc     a
06C0 95E0      2057            subb    a,acc
06C2 FE        2058            mov     r6,a
06C3 8C82      2059            mov     dpl,r4
06C5 8D83      2060            mov     dph,r5
06C7 8EF0      2061            mov     b,r6
06C9 120000    2062            lcall   __mullong
06CC AC82      2063            mov     r4,dpl
06CE AD83      2064            mov     r5,dph
06D0 AEF0      2065            mov     r6,b
06D2 FF        2066            mov     r7,a
06D3 EC        2067            mov     a,r4
06D4 2550      2068            add     a,_BMM150_compensate_y_sloc0_1_0
06D6 FC        2069            mov     r4,a
06D7 ED        2070            mov     a,r5
06D8 3551      2071            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
06DA FD        2072            mov     r5,a
06DB EE        2073            mov     a,r6
06DC 3552      2074            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
06DE FE        2075            mov     r6,a
06DF EF        2076            mov     a,r7
06E0 3553      2077            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
06E2 FF        2078            mov     r7,a
06E3 750000    2079            mov     __divslong_PARM_2,#0x00
06E6 750102    2080            mov     (__divslong_PARM_2 + 1),#0x02
06E9 750200    2081            mov     (__divslong_PARM_2 + 2),#0x00
06EC 750300    2082            mov     (__divslong_PARM_2 + 3),#0x00
06EF           2083   ;        main.c:459: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
06EF 8C82      2084            mov     dpl,r4
06F1 8D83      2085            mov     dph,r5
06F3 8EF0      2086            mov     b,r6
06F5 EF        2087            mov     a,r7
06F6 120000    2088            lcall   __divslong
06F9 AC82      2089            mov     r4,dpl
06FB AD83      2090            mov     r5,dph
06FD AEF0      2091            mov     r6,b
06FF FF        2092            mov     r7,a
0700 905560    2093            mov     dptr,#_dig_y2
0703 E0        2094            movx    a,@dptr
0704 F8        2095            mov     r0,a
0705 33        2096            rlc     a
0706 95E0      2097            subb    a,acc
0708 F9        2098            mov     r1,a
0709 74A0      2099            mov     a,#0xA0
070B 28        2100            add     a,r0
070C F8        2101            mov     r0,a
070D E4        2102            clr     a
070E 39        2103            addc    a,r1
070F 8800      2104            mov     __mullong_PARM_2,r0
0711 F501      2105            mov     (__mullong_PARM_2 + 1),a
0713 33        2106            rlc     a
0714 95E0      2107            subb    a,acc
0716 F502      2108            mov     (__mullong_PARM_2 + 2),a
0718 F503      2109            mov     (__mullong_PARM_2 + 3),a
071A           2110   ;        main.c:460: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
071A 7410      2111            mov     a,#0x10
071C 2E        2112            add     a,r6
071D FE        2113            mov     r6,a
071E E4        2114            clr     a
071F 3F        2115            addc    a,r7
0720 8C82      2116            mov     dpl,r4
0722 8D83      2117            mov     dph,r5
0724 8EF0      2118            mov     b,r6
0726 120000    2119            lcall   __mullong
0729           2120   ;        main.c:461: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
0729 750000    2121            mov     __divslong_PARM_2,#0x00
072C 750110    2122            mov     (__divslong_PARM_2 + 1),#0x10
072F 750200    2123            mov     (__divslong_PARM_2 + 2),#0x00
0732 750300    2124            mov     (__divslong_PARM_2 + 3),#0x00
0735 120000    2125            lcall   __divslong
0738 858200    2126            mov     __mullong_PARM_2,dpl
073B 858301    2127            mov     (__mullong_PARM_2 + 1),dph
073E 85F002    2128            mov     (__mullong_PARM_2 + 2),b
0741 F503      2129            mov     (__mullong_PARM_2 + 3),a
0743 D003      2130            pop     ar3
0745 D002      2131            pop     ar2
0747 EB        2132            mov     a,r3
0748 33        2133            rlc     a
0749 95E0      2134            subb    a,acc
074B FC        2135            mov     r4,a
074C           2136   ;        main.c:462: retval = (int16_t)(process_comp_y9 / 8192);
074C 8A82      2137            mov     dpl,r2
074E 8B83      2138            mov     dph,r3
0750 8CF0      2139            mov     b,r4
0752 120000    2140            lcall   __mullong
0755 750000    2141            mov     __divslong_PARM_2,#0x00
0758 750120    2142            mov     (__divslong_PARM_2 + 1),#0x20
075B 750200    2143            mov     (__divslong_PARM_2 + 2),#0x00
075E 750300    2144            mov     (__divslong_PARM_2 + 3),#0x00
0761 120000    2145            lcall   __divslong
0764 AA82      2146            mov     r2,dpl
0766 AB83      2147            mov     r3,dph
0768           2148   ;        main.c:463: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
0768 9055A0    2149            mov     dptr,#_dig_y1
076B E0        2150            movx    a,@dptr
076C FC        2151            mov     r4,a
076D 33        2152            rlc     a
076E 95E0      2153            subb    a,acc
0770 C4        2154            swap    a
0771 03        2155            rr      a
0772 54F8      2156            anl     a,#0xf8
0774 CC        2157            xch     a,r4
0775 C4        2158            swap    a
0776 03        2159            rr      a
0777 CC        2160            xch     a,r4
0778 6C        2161            xrl     a,r4
0779 CC        2162            xch     a,r4
077A 54F8      2163            anl     a,#0xf8
077C CC        2164            xch     a,r4
077D 6C        2165            xrl     a,r4
077E FD        2166            mov     r5,a
077F EC        2167            mov     a,r4
0780 2A        2168            add     a,r2
0781 F582      2169            mov     dpl,a
0783 ED        2170            mov     a,r5
0784 3B        2171            addc    a,r3
0785 F583      2172            mov     dph,a
0787 750010    2173            mov     __divsint_PARM_2,#0x10
078A E4        2174            clr     a
078B F501      2175            mov     (__divsint_PARM_2 + 1),a
078D 120000    2176            lcall   __divsint
0790 E582      2177            mov     a,dpl
0792 8583F0    2178            mov     b,dph
0795 90CE10    2179            mov     dptr,#_BMM150_compensate_y_retval_1_115
0798 F0        2180            movx    @dptr,a
0799 A3        2181            inc     dptr
079A E5F0      2182            mov     a,b
079C F0        2183            movx    @dptr,a
079D 8000      2184            sjmp    L011012?
079F           2185   L011008?:
079F           2186   ;        main.c:467: retval = BMM150_OVERFLOW_OUTPUT;
079F 90CE10    2187            mov     dptr,#_BMM150_compensate_y_retval_1_115
07A2 E4        2188            clr     a
07A3 F0        2189            movx    @dptr,a
07A4 A3        2190            inc     dptr
07A5 7480      2191            mov     a,#0x80
07A7 F0        2192            movx    @dptr,a
07A8 8000      2193            sjmp    L011012?
07AA           2194   L011011?:
07AA           2195   ;        main.c:473: retval = BMM150_OVERFLOW_OUTPUT;
07AA 90CE10    2196            mov     dptr,#_BMM150_compensate_y_retval_1_115
07AD E4        2197            clr     a
07AE F0        2198            movx    @dptr,a
07AF A3        2199            inc     dptr
07B0 7480      2200            mov     a,#0x80
07B2 F0        2201            movx    @dptr,a
07B3           2202   L011012?:
07B3           2203   ;        main.c:476: return retval;
07B3 90CE10    2204            mov     dptr,#_BMM150_compensate_y_retval_1_115
07B6 E0        2205            movx    a,@dptr
07B7 FA        2206            mov     r2,a
07B8 A3        2207            inc     dptr
07B9 E0        2208            movx    a,@dptr
07BA 8A82      2209            mov     dpl,r2
07BC F583      2210            mov     dph,a
07BE 22        2211            ret
07BF           2212   ;------------------------------------------------------------
07BF           2213   ;Allocation info for local variables in function 'BMM150_Read_Data'
07BF           2214   ;------------------------------------------------------------
07BF           2215   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
07BF           2216   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_123'
07BF           2217   ;raw_x_lsb                 Allocated with name '_BMM150_Read_Data_raw_x_lsb_1_124'
07BF           2218   ;raw_x_msb                 Allocated with name '_BMM150_Read_Data_raw_x_msb_1_124'
07BF           2219   ;raw_y_lsb                 Allocated with name '_BMM150_Read_Data_raw_y_lsb_1_124'
07BF           2220   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_124'
07BF           2221   ;raw_rhall_lsb             Allocated with name '_BMM150_Read_Data_raw_rhall_lsb_1_124'
07BF           2222   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_124'
07BF           2223   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_124'
07BF           2224   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_124'
07BF           2225   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_124'
07BF           2226   ;msb_data                  Allocated with name '_BMM150_Read_Data_msb_data_1_124'
07BF           2227   ;------------------------------------------------------------
07BF           2228   ;        main.c:479: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y)
07BF           2229   ;        -----------------------------------------
07BF           2230   ;         function BMM150_Read_Data
07BF           2231   ;        -----------------------------------------
07BF           2232   _BMM150_Read_Data:
07BF 8582A0    2233            mov     _BMM150_Read_Data_mag_x_1_123,dpl
07C2 8583A1    2234            mov     (_BMM150_Read_Data_mag_x_1_123 + 1),dph
07C5 85F0A2    2235            mov     (_BMM150_Read_Data_mag_x_1_123 + 2),b
07C8           2236   ;        main.c:486: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
07C8 758242    2237            mov     dpl,#0x42
07CB 120000    2238            lcall   _SPI_read
07CE AD82      2239            mov     r5,dpl
07D0           2240   ;        main.c:487: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
07D0 758243    2241            mov     dpl,#0x43
07D3 C005      2242            push    ar5
07D5 120000    2243            lcall   _SPI_read
07D8 AE82      2244            mov     r6,dpl
07DA           2245   ;        main.c:488: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
07DA 758244    2246            mov     dpl,#0x44
07DD C006      2247            push    ar6
07DF 120000    2248            lcall   _SPI_read
07E2 AF82      2249            mov     r7,dpl
07E4           2250   ;        main.c:489: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
07E4 758245    2251            mov     dpl,#0x45
07E7 C007      2252            push    ar7
07E9 120000    2253            lcall   _SPI_read
07EC A882      2254            mov     r0,dpl
07EE           2255   ;        main.c:492: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
07EE 758248    2256            mov     dpl,#0x48
07F1 C000      2257            push    ar0
07F3 120000    2258            lcall   _SPI_read
07F6 A982      2259            mov     r1,dpl
07F8           2260   ;        main.c:493: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
07F8 758249    2261            mov     dpl,#0x49
07FB C001      2262            push    ar1
07FD 120000    2263            lcall   _SPI_read
0800 AA82      2264            mov     r2,dpl
0802 D001      2265            pop     ar1
0804 D000      2266            pop     ar0
0806 D007      2267            pop     ar7
0808 D006      2268            pop     ar6
080A D005      2269            pop     ar5
080C           2270   ;        main.c:497: raw_x_lsb = ((raw_x_lsb & 0b_1111_1000)) >> 3;
080C 5305F8    2271            anl     ar5,#0xF8
080F ED        2272            mov     a,r5
0810 C4        2273            swap    a
0811 23        2274            rl      a
0812 541F      2275            anl     a,#0x1f
0814 FD        2276            mov     r5,a
0815           2277   ;        main.c:498: msb_data = ((int16_t)((int8_t)raw_x_msb)) << 5; 
0815 EE        2278            mov     a,r6
0816 33        2279            rlc     a
0817 95E0      2280            subb    a,acc
0819 C4        2281            swap    a
081A 23        2282            rl      a
081B 54E0      2283            anl     a,#0xe0
081D CE        2284            xch     a,r6
081E C4        2285            swap    a
081F 23        2286            rl      a
0820 CE        2287            xch     a,r6
0821 6E        2288            xrl     a,r6
0822 CE        2289            xch     a,r6
0823 54E0      2290            anl     a,#0xe0
0825 CE        2291            xch     a,r6
0826 6E        2292            xrl     a,r6
0827 FB        2293            mov     r3,a
0828           2294   ;        main.c:499: x_val = (int16_t)(msb_data | raw_x_lsb);
0828 7C00      2295            mov     r4,#0x00
082A 90CEC0    2296            mov     dptr,#_BMM150_Read_Data_x_val_1_124
082D ED        2297            mov     a,r5
082E 4E        2298            orl     a,r6
082F F0        2299            movx    @dptr,a
0830 EC        2300            mov     a,r4
0831 4B        2301            orl     a,r3
0832 A3        2302            inc     dptr
0833 F0        2303            movx    @dptr,a
0834           2304   ;        main.c:502: raw_y_lsb = ((raw_y_lsb & 0b_1111_1000)) >> 3;
0834 5307F8    2305            anl     ar7,#0xF8
0837 EF        2306            mov     a,r7
0838 C4        2307            swap    a
0839 23        2308            rl      a
083A 541F      2309            anl     a,#0x1f
083C FF        2310            mov     r7,a
083D           2311   ;        main.c:503: msb_data = ((int16_t)((int8_t)raw_y_msb)) << 5; 
083D E8        2312            mov     a,r0
083E 33        2313            rlc     a
083F 95E0      2314            subb    a,acc
0841 C4        2315            swap    a
0842 23        2316            rl      a
0843 54E0      2317            anl     a,#0xe0
0845 C8        2318            xch     a,r0
0846 C4        2319            swap    a
0847 23        2320            rl      a
0848 C8        2321            xch     a,r0
0849 68        2322            xrl     a,r0
084A C8        2323            xch     a,r0
084B 54E0      2324            anl     a,#0xe0
084D C8        2325            xch     a,r0
084E 68        2326            xrl     a,r0
084F FB        2327            mov     r3,a
0850           2328   ;        main.c:504: y_val = (int16_t)(msb_data | raw_y_lsb);
0850 7C00      2329            mov     r4,#0x00
0852 90CF10    2330            mov     dptr,#_BMM150_Read_Data_y_val_1_124
0855 EF        2331            mov     a,r7
0856 48        2332            orl     a,r0
0857 F0        2333            movx    @dptr,a
0858 EC        2334            mov     a,r4
0859 4B        2335            orl     a,r3
085A A3        2336            inc     dptr
085B F0        2337            movx    @dptr,a
085C           2338   ;        main.c:512: raw_rhall_lsb = ((raw_rhall_lsb & 0xFC) >> 2);
085C 5301FC    2339            anl     ar1,#0xFC
085F E9        2340            mov     a,r1
0860 03        2341            rr      a
0861 03        2342            rr      a
0862 543F      2343            anl     a,#0x3f
0864 F9        2344            mov     r1,a
0865           2345   ;        main.c:513: rhall_val = (uint16_t)(((uint16_t)raw_rhall_msb << 6) | raw_rhall_lsb);
0865 E4        2346            clr     a
0866 5403      2347            anl     a,#0x03
0868 A2E0      2348            mov     c,acc.0
086A CA        2349            xch     a,r2
086B 13        2350            rrc     a
086C CA        2351            xch     a,r2
086D 13        2352            rrc     a
086E A2E0      2353            mov     c,acc.0
0870 CA        2354            xch     a,r2
0871 13        2355            rrc     a
0872 CA        2356            xch     a,r2
0873 13        2357            rrc     a
0874 CA        2358            xch     a,r2
0875 FB        2359            mov     r3,a
0876 7C00      2360            mov     r4,#0x00
0878 90CF70    2361            mov     dptr,#_BMM150_Read_Data_rhall_val_1_124
087B E9        2362            mov     a,r1
087C 4A        2363            orl     a,r2
087D F0        2364            movx    @dptr,a
087E EC        2365            mov     a,r4
087F 4B        2366            orl     a,r3
0880 A3        2367            inc     dptr
0881 F0        2368            movx    @dptr,a
0882           2369   ;        main.c:516: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
0882 75A070    2370            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_124
0885 75A1CF    2371            mov     (_BMM150_compensate_x_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_124 >> 8)
0888 75A200    2372            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x00
088B 90CEC0    2373            mov     dptr,#_BMM150_Read_Data_x_val_1_124
088E 75F000    2374            mov     b,#0x00
0891 120000    2375            lcall   _BMM150_compensate_x
0894 AA82      2376            mov     r2,dpl
0896 AB83      2377            mov     r3,dph
0898 85A082    2378            mov     dpl,_BMM150_Read_Data_mag_x_1_123
089B 85A183    2379            mov     dph,(_BMM150_Read_Data_mag_x_1_123 + 1)
089E 85A2F0    2380            mov     b,(_BMM150_Read_Data_mag_x_1_123 + 2)
08A1 EA        2381            mov     a,r2
08A2 120000    2382            lcall   __gptrput
08A5 A3        2383            inc     dptr
08A6 EB        2384            mov     a,r3
08A7 120000    2385            lcall   __gptrput
08AA           2386   ;        main.c:517: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
08AA AA00      2387            mov     r2,_BMM150_Read_Data_PARM_2
08AC AB01      2388            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
08AE AC02      2389            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
08B0 755070    2390            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_124
08B3 7551CF    2391            mov     (_BMM150_compensate_y_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_124 >> 8)
08B6 755200    2392            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x00
08B9 90CF10    2393            mov     dptr,#_BMM150_Read_Data_y_val_1_124
08BC 75F000    2394            mov     b,#0x00
08BF C002      2395            push    ar2
08C1 C003      2396            push    ar3
08C3 C004      2397            push    ar4
08C5 120000    2398            lcall   _BMM150_compensate_y
08C8 AD82      2399            mov     r5,dpl
08CA AE83      2400            mov     r6,dph
08CC D004      2401            pop     ar4
08CE D003      2402            pop     ar3
08D0 D002      2403            pop     ar2
08D2 8A82      2404            mov     dpl,r2
08D4 8B83      2405            mov     dph,r3
08D6 8CF0      2406            mov     b,r4
08D8 ED        2407            mov     a,r5
08D9 120000    2408            lcall   __gptrput
08DC A3        2409            inc     dptr
08DD EE        2410            mov     a,r6
08DE 020000    2411            ljmp    __gptrput
08E1           2412   ;------------------------------------------------------------
08E1           2413   ;Allocation info for local variables in function 'UART1_Init'
08E1           2414   ;------------------------------------------------------------
08E1           2415   ;baudrate                  Allocated to registers r2 r3 r4 r5 
08E1           2416   ;------------------------------------------------------------
08E1           2417   ;        main.c:523: void UART1_Init (unsigned long baudrate)
08E1           2418   ;        -----------------------------------------
08E1           2419   ;         function UART1_Init
08E1           2420   ;        -----------------------------------------
08E1           2421   _UART1_Init:
08E1 AA82      2422            mov     r2,dpl
08E3 AB83      2423            mov     r3,dph
08E5 ACF0      2424            mov     r4,b
08E7 FD        2425            mov     r5,a
08E8           2426   ;        main.c:525: SFRPAGE = 0x20;
08E8 75A720    2427            mov     _SFRPAGE,#0x20
08EB           2428   ;        main.c:526: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
08EB 75930C    2429            mov     _SMOD1,#0x0C
08EE           2430   ;        main.c:527: SCON1 = 0x10;
08EE 75C810    2431            mov     _SCON1,#0x10
08F1           2432   ;        main.c:528: SBCON1 =0x00;   // disable baud rate generator
08F1 759400    2433            mov     _SBCON1,#0x00
08F4           2434   ;        main.c:529: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
08F4 8A00      2435            mov     __divulong_PARM_2,r2
08F6 8B01      2436            mov     (__divulong_PARM_2 + 1),r3
08F8 8C02      2437            mov     (__divulong_PARM_2 + 2),r4
08FA 8D03      2438            mov     (__divulong_PARM_2 + 3),r5
08FC 90A200    2439            mov     dptr,#0xA200
08FF 75F04A    2440            mov     b,#0x4A
0902 7404      2441            mov     a,#0x04
0904 120000    2442            lcall   __divulong
0907 AA82      2443            mov     r2,dpl
0909 AB83      2444            mov     r3,dph
090B ACF0      2445            mov     r4,b
090D FD        2446            mov     r5,a
090E 750018    2447            mov     __divulong_PARM_2,#0x18
0911 E4        2448            clr     a
0912 F501      2449            mov     (__divulong_PARM_2 + 1),a
0914 F502      2450            mov     (__divulong_PARM_2 + 2),a
0916 F503      2451            mov     (__divulong_PARM_2 + 3),a
0918 8A82      2452            mov     dpl,r2
091A 8B83      2453            mov     dph,r3
091C 8CF0      2454            mov     b,r4
091E ED        2455            mov     a,r5
091F 120000    2456            lcall   __divulong
0922 AA82      2457            mov     r2,dpl
0924 AB83      2458            mov     r3,dph
0926 ACF0      2459            mov     r4,b
0928 FD        2460            mov     r5,a
0929 E4        2461            clr     a
092A C3        2462            clr     c
092B 9A        2463            subb    a,r2
092C FA        2464            mov     r2,a
092D E4        2465            clr     a
092E 9B        2466            subb    a,r3
092F FB        2467            mov     r3,a
0930 7401      2468            mov     a,#0x01
0932 9C        2469            subb    a,r4
0933 E4        2470            clr     a
0934 9D        2471            subb    a,r5
0935 8A95      2472            mov     _SBRL1,r2
0937 8B96      2473            mov     (_SBRL1 >> 8),r3
0939           2474   ;        main.c:530: TI1 = 1; // indicate ready for TX
0939 D2C9      2475            setb    _TI1
093B           2476   ;        main.c:531: SBCON1 |= 0x40;   // enable baud rate generator
093B 439440    2477            orl     _SBCON1,#0x40
093E           2478   ;        main.c:532: SFRPAGE = 0x00;
093E 75A700    2479            mov     _SFRPAGE,#0x00
0941 22        2480            ret
0942           2481   ;------------------------------------------------------------
0942           2482   ;Allocation info for local variables in function 'putchar1'
0942           2483   ;------------------------------------------------------------
0942           2484   ;c                         Allocated to registers r2 
0942           2485   ;------------------------------------------------------------
0942           2486   ;        main.c:535: void putchar1 (char c) 
0942           2487   ;        -----------------------------------------
0942           2488   ;         function putchar1
0942           2489   ;        -----------------------------------------
0942           2490   _putchar1:
0942 AA82      2491            mov     r2,dpl
0944           2492   ;        main.c:537: SFRPAGE = 0x20;
0944 75A720    2493            mov     _SFRPAGE,#0x20
0947           2494   ;        main.c:538: while (!TI1);
0947           2495   L014001?:
0947           2496   ;        main.c:539: TI1=0;
0947 10C920    2497            jbc     _TI1,L014008?
094A 8000      2498            sjmp    L014001?
094C           2499   L014008?:
094C           2500   ;        main.c:540: SBUF1 = c;
094C 8A92      2501            mov     _SBUF1,r2
094E           2502   ;        main.c:541: SFRPAGE = 0x00;
094E 75A700    2503            mov     _SFRPAGE,#0x00
0951 22        2504            ret
0952           2505   ;------------------------------------------------------------
0952           2506   ;Allocation info for local variables in function 'sendstr1'
0952           2507   ;------------------------------------------------------------
0952           2508   ;s                         Allocated to registers r2 r3 r4 
0952           2509   ;------------------------------------------------------------
0952           2510   ;        main.c:544: void sendstr1 (char * s)
0952           2511   ;        -----------------------------------------
0952           2512   ;         function sendstr1
0952           2513   ;        -----------------------------------------
0952           2514   _sendstr1:
0952 AA82      2515            mov     r2,dpl
0954 AB83      2516            mov     r3,dph
0956 ACF0      2517            mov     r4,b
0958           2518   ;        main.c:546: while(*s)
0958           2519   L015001?:
0958 8A82      2520            mov     dpl,r2
095A 8B83      2521            mov     dph,r3
095C 8CF0      2522            mov     b,r4
095E 120000    2523            lcall   __gptrget
0961 FD        2524            mov     r5,a
0962 6000      2525            jz      L015004?
0964           2526   ;        main.c:548: putchar1(*s);
0964 8D82      2527            mov     dpl,r5
0966 C002      2528            push    ar2
0968 C003      2529            push    ar3
096A C004      2530            push    ar4
096C 120000    2531            lcall   _putchar1
096F D004      2532            pop     ar4
0971 D003      2533            pop     ar3
0973 D002      2534            pop     ar2
0975           2535   ;        main.c:549: s++;        
0975 0A        2536            inc     r2
0976 BA0060    2537            cjne    r2,#0x00,L015001?
0979 0B        2538            inc     r3
097A 8000      2539            sjmp    L015001?
097C           2540   L015004?:
097C 22        2541            ret
097D           2542   ;------------------------------------------------------------
097D           2543   ;Allocation info for local variables in function 'getchar1'
097D           2544   ;------------------------------------------------------------
097D           2545   ;c                         Allocated with name '_getchar1_c_1_133'
097D           2546   ;------------------------------------------------------------
097D           2547   ;        main.c:553: char getchar1 (void)
097D           2548   ;        -----------------------------------------
097D           2549   ;         function getchar1
097D           2550   ;        -----------------------------------------
097D           2551   _getchar1:
097D           2552   ;        main.c:556: SFRPAGE = 0x20;
097D 75A720    2553            mov     _SFRPAGE,#0x20
0980           2554   ;        main.c:557: while (!RI1);
0980           2555   L016001?:
0980           2556   ;        main.c:558: RI1=0;
0980 10C820    2557            jbc     _RI1,L016008?
0983 8000      2558            sjmp    L016001?
0985           2559   L016008?:
0985           2560   ;        main.c:560: SCON1&=0b_0011_1111;
0985 53C83F    2561            anl     _SCON1,#0x3F
0988           2562   ;        main.c:561: c = SBUF1;
0988 859282    2563            mov     dpl,_SBUF1
098B           2564   ;        main.c:562: SFRPAGE = 0x00;
098B 75A700    2565            mov     _SFRPAGE,#0x00
098E           2566   ;        main.c:563: return (c);
098E 22        2567            ret
098F           2568   ;------------------------------------------------------------
098F           2569   ;Allocation info for local variables in function 'getchar1_with_timeout'
098F           2570   ;------------------------------------------------------------
098F           2571   ;c                         Allocated with name '_getchar1_with_timeout_c_1_135'
098F           2572   ;timeout                   Allocated with name '_getchar1_with_timeout_timeout_1_135'
098F           2573   ;------------------------------------------------------------
098F           2574   ;        main.c:566: char getchar1_with_timeout (void)
098F           2575   ;        -----------------------------------------
098F           2576   ;         function getchar1_with_timeout
098F           2577   ;        -----------------------------------------
098F           2578   _getchar1_with_timeout:
098F           2579   ;        main.c:570: SFRPAGE = 0x20;
098F 75A720    2580            mov     _SFRPAGE,#0x20
0992           2581   ;        main.c:572: while (!RI1)
0992 7A00      2582            mov     r2,#0x00
0994 7B00      2583            mov     r3,#0x00
0996           2584   L017003?:
0996 20C8A0    2585            jb      _RI1,L017005?
0999           2586   ;        main.c:574: SFRPAGE = 0x00;
0999 75A700    2587            mov     _SFRPAGE,#0x00
099C           2588   ;        main.c:575: Timer3us(20);
099C 758214    2589            mov     dpl,#0x14
099F C002      2590            push    ar2
09A1 C003      2591            push    ar3
09A3 120000    2592            lcall   _Timer3us
09A6 D003      2593            pop     ar3
09A8 D002      2594            pop     ar2
09AA           2595   ;        main.c:576: SFRPAGE = 0x20;
09AA 75A720    2596            mov     _SFRPAGE,#0x20
09AD           2597   ;        main.c:577: timeout++;
09AD 0A        2598            inc     r2
09AE BA00E0    2599            cjne    r2,#0x00,L017012?
09B1 0B        2600            inc     r3
09B2           2601   L017012?:
09B2           2602   ;        main.c:578: if(timeout==25000)
09B2 BAA860    2603            cjne    r2,#0xA8,L017003?
09B5 BB6160    2604            cjne    r3,#0x61,L017003?
09B8           2605   ;        main.c:580: SFRPAGE = 0x00;
09B8 75A700    2606            mov     _SFRPAGE,#0x00
09BB           2607   ;        main.c:581: return ('\n'); // Timeout after half second
09BB 75820A    2608            mov     dpl,#0x0A
09BE 22        2609            ret
09BF           2610   L017005?:
09BF           2611   ;        main.c:584: RI1=0;
09BF C2C8      2612            clr     _RI1
09C1           2613   ;        main.c:586: SCON1&=0b_0011_1111;
09C1 53C83F    2614            anl     _SCON1,#0x3F
09C4           2615   ;        main.c:587: c = SBUF1;
09C4 859282    2616            mov     dpl,_SBUF1
09C7           2617   ;        main.c:588: SFRPAGE = 0x00;
09C7 75A700    2618            mov     _SFRPAGE,#0x00
09CA           2619   ;        main.c:589: return (c);
09CA 22        2620            ret
09CB           2621   ;------------------------------------------------------------
09CB           2622   ;Allocation info for local variables in function 'getstr1'
09CB           2623   ;------------------------------------------------------------
09CB           2624   ;n                         Allocated with name '_getstr1_PARM_2'
09CB           2625   ;s                         Allocated to registers r2 r3 r4 
09CB           2626   ;c                         Allocated with name '_getstr1_c_1_139'
09CB           2627   ;cnt                       Allocated with name '_getstr1_cnt_1_139'
09CB           2628   ;------------------------------------------------------------
09CB           2629   ;        main.c:592: void getstr1 (char * s, unsigned char n)
09CB           2630   ;        -----------------------------------------
09CB           2631   ;         function getstr1
09CB           2632   ;        -----------------------------------------
09CB           2633   _getstr1:
09CB AA82      2634            mov     r2,dpl
09CD AB83      2635            mov     r3,dph
09CF ACF0      2636            mov     r4,b
09D1           2637   ;        main.c:598: while(1)
09D1 7D00      2638            mov     r5,#0x00
09D3 8A06      2639            mov     ar6,r2
09D5 8B07      2640            mov     ar7,r3
09D7 8C00      2641            mov     ar0,r4
09D9           2642   L018007?:
09D9           2643   ;        main.c:600: c=getchar1_with_timeout();
09D9 C002      2644            push    ar2
09DB C003      2645            push    ar3
09DD C004      2646            push    ar4
09DF C005      2647            push    ar5
09E1 C006      2648            push    ar6
09E3 C007      2649            push    ar7
09E5 C000      2650            push    ar0
09E7 120000    2651            lcall   _getchar1_with_timeout
09EA A982      2652            mov     r1,dpl
09EC D000      2653            pop     ar0
09EE D007      2654            pop     ar7
09F0 D006      2655            pop     ar6
09F2 D005      2656            pop     ar5
09F4 D004      2657            pop     ar4
09F6 D003      2658            pop     ar3
09F8 D002      2659            pop     ar2
09FA           2660   ;        main.c:601: if(c=='\n')
09FA B90A60    2661            cjne    r1,#0x0A,L018002?
09FD           2662   ;        main.c:603: *s=0;
09FD 8A82      2663            mov     dpl,r2
09FF 8B83      2664            mov     dph,r3
0A01 8CF0      2665            mov     b,r4
0A03 E4        2666            clr     a
0A04           2667   ;        main.c:604: return;
0A04 020000    2668            ljmp    __gptrput
0A07           2669   L018002?:
0A07           2670   ;        main.c:607: if (cnt<n)
0A07 C3        2671            clr     c
0A08 ED        2672            mov     a,r5
0A09 95B0      2673            subb    a,_getstr1_PARM_2
0A0B 5000      2674            jnc     L018004?
0A0D           2675   ;        main.c:609: cnt++;
0A0D 0D        2676            inc     r5
0A0E           2677   ;        main.c:610: *s=c;
0A0E 8E82      2678            mov     dpl,r6
0A10 8F83      2679            mov     dph,r7
0A12 88F0      2680            mov     b,r0
0A14 E9        2681            mov     a,r1
0A15 120000    2682            lcall   __gptrput
0A18 A3        2683            inc     dptr
0A19 AE82      2684            mov     r6,dpl
0A1B AF83      2685            mov     r7,dph
0A1D           2686   ;        main.c:611: s++;
0A1D 8E02      2687            mov     ar2,r6
0A1F 8F03      2688            mov     ar3,r7
0A21 8804      2689            mov     ar4,r0
0A23 8000      2690            sjmp    L018007?
0A25           2691   L018004?:
0A25           2692   ;        main.c:615: *s=0;
0A25 8A82      2693            mov     dpl,r2
0A27 8B83      2694            mov     dph,r3
0A29 8CF0      2695            mov     b,r4
0A2B E4        2696            clr     a
0A2C           2697   ;        main.c:616: return;
0A2C 020000    2698            ljmp    __gptrput
0A2F           2699   ;------------------------------------------------------------
0A2F           2700   ;Allocation info for local variables in function 'RXU1'
0A2F           2701   ;------------------------------------------------------------
0A2F           2702   ;------------------------------------------------------------
0A2F           2703   ;        main.c:622: bit RXU1 (void)
0A2F           2704   ;        -----------------------------------------
0A2F           2705   ;         function RXU1
0A2F           2706   ;        -----------------------------------------
0A2F           2707   _RXU1:
0A2F           2708   ;        main.c:625: SFRPAGE = 0x20;
0A2F 75A720    2709            mov     _SFRPAGE,#0x20
0A32           2710   ;        main.c:626: mybit=RI1;
0A32 A2C8      2711            mov     c,_RI1
0A34           2712   ;        main.c:627: SFRPAGE = 0x00;
0A34 75A700    2713            mov     _SFRPAGE,#0x00
0A37           2714   ;        main.c:628: return mybit;
0A37 22        2715            ret
0A38           2716   ;------------------------------------------------------------
0A38           2717   ;Allocation info for local variables in function 'waitms_or_RI1'
0A38           2718   ;------------------------------------------------------------
0A38           2719   ;ms                        Allocated to registers r2 r3 
0A38           2720   ;j                         Allocated with name '_waitms_or_RI1_j_1_147'
0A38           2721   ;k                         Allocated with name '_waitms_or_RI1_k_1_147'
0A38           2722   ;------------------------------------------------------------
0A38           2723   ;        main.c:631: void waitms_or_RI1 (unsigned int ms)
0A38           2724   ;        -----------------------------------------
0A38           2725   ;         function waitms_or_RI1
0A38           2726   ;        -----------------------------------------
0A38           2727   _waitms_or_RI1:
0A38 AA82      2728            mov     r2,dpl
0A3A AB83      2729            mov     r3,dph
0A3C           2730   ;        main.c:635: for(j=0; j<ms; j++)
0A3C 7C00      2731            mov     r4,#0x00
0A3E 7D00      2732            mov     r5,#0x00
0A40           2733   L020007?:
0A40 C3        2734            clr     c
0A41 EC        2735            mov     a,r4
0A42 9A        2736            subb    a,r2
0A43 ED        2737            mov     a,r5
0A44 9B        2738            subb    a,r3
0A45 5000      2739            jnc     L020011?
0A47           2740   ;        main.c:637: for (k=0; k<4; k++)
0A47 7E00      2741            mov     r6,#0x00
0A49           2742   L020003?:
0A49 BE04A0    2743            cjne    r6,#0x04,L020019?
0A4C           2744   L020019?:
0A4C 5000      2745            jnc     L020009?
0A4E           2746   ;        main.c:639: if(RXU1()) return;
0A4E C002      2747            push    ar2
0A50 C003      2748            push    ar3
0A52 C004      2749            push    ar4
0A54 C005      2750            push    ar5
0A56 C006      2751            push    ar6
0A58 120000    2752            lcall   _RXU1
0A5B E4        2753            clr     a
0A5C 33        2754            rlc     a
0A5D D006      2755            pop     ar6
0A5F D005      2756            pop     ar5
0A61 D004      2757            pop     ar4
0A63 D003      2758            pop     ar3
0A65 D002      2759            pop     ar2
0A67 6000      2760            jz      L020002?
0A69 22        2761            ret
0A6A           2762   L020002?:
0A6A           2763   ;        main.c:640: Timer3us(250);
0A6A 7582FA    2764            mov     dpl,#0xFA
0A6D C002      2765            push    ar2
0A6F C003      2766            push    ar3
0A71 C004      2767            push    ar4
0A73 C005      2768            push    ar5
0A75 C006      2769            push    ar6
0A77 120000    2770            lcall   _Timer3us
0A7A D006      2771            pop     ar6
0A7C D005      2772            pop     ar5
0A7E D004      2773            pop     ar4
0A80 D003      2774            pop     ar3
0A82 D002      2775            pop     ar2
0A84           2776   ;        main.c:637: for (k=0; k<4; k++)
0A84 0E        2777            inc     r6
0A85 8000      2778            sjmp    L020003?
0A87           2779   L020009?:
0A87           2780   ;        main.c:635: for(j=0; j<ms; j++)
0A87 0C        2781            inc     r4
0A88 BC00E0    2782            cjne    r4,#0x00,L020007?
0A8B 0D        2783            inc     r5
0A8C 8000      2784            sjmp    L020007?
0A8E           2785   L020011?:
0A8E 22        2786            ret
0A8F           2787   ;------------------------------------------------------------
0A8F           2788   ;Allocation info for local variables in function 'SendATCommand'
0A8F           2789   ;------------------------------------------------------------
0A8F           2790   ;s                         Allocated to registers r2 r3 r4 
0A8F           2791   ;------------------------------------------------------------
0A8F           2792   ;        main.c:645: void SendATCommand (char * s)
0A8F           2793   ;        -----------------------------------------
0A8F           2794   ;         function SendATCommand
0A8F           2795   ;        -----------------------------------------
0A8F           2796   _SendATCommand:
0A8F AA82      2797            mov     r2,dpl
0A91 AB83      2798            mov     r3,dph
0A93 ACF0      2799            mov     r4,b
0A95           2800   ;        main.c:647: printf("Command: %s", s);
0A95 C002      2801            push    ar2
0A97 C003      2802            push    ar3
0A99 C004      2803            push    ar4
0A9B C002      2804            push    ar2
0A9D C003      2805            push    ar3
0A9F C004      2806            push    ar4
0AA1 7460      2807            mov     a,#__str_2
0AA3 C0E0      2808            push    acc
0AA5 74E7      2809            mov     a,#(__str_2 >> 8)
0AA7 C0E0      2810            push    acc
0AA9 7480      2811            mov     a,#0x80
0AAB C0E0      2812            push    acc
0AAD 120000    2813            lcall   _printf
0AB0 E581      2814            mov     a,sp
0AB2 24FA      2815            add     a,#0xfa
0AB4 F581      2816            mov     sp,a
0AB6           2817   ;        main.c:648: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0AB6 C2A0      2818            clr     _P2_0
0AB8           2819   ;        main.c:649: waitms(5);
0AB8 900005    2820            mov     dptr,#0x0005
0ABB 120000    2821            lcall   _waitms
0ABE D004      2822            pop     ar4
0AC0 D003      2823            pop     ar3
0AC2 D002      2824            pop     ar2
0AC4           2825   ;        main.c:650: sendstr1(s);
0AC4 8A82      2826            mov     dpl,r2
0AC6 8B83      2827            mov     dph,r3
0AC8 8CF0      2828            mov     b,r4
0ACA 120000    2829            lcall   _sendstr1
0ACD           2830   ;        main.c:651: getstr1(buff, sizeof(buff)-1);
0ACD 75B013    2831            mov     _getstr1_PARM_2,#0x13
0AD0 905720    2832            mov     dptr,#_buff
0AD3 75F040    2833            mov     b,#0x40
0AD6 120000    2834            lcall   _getstr1
0AD9           2835   ;        main.c:652: waitms(10);
0AD9 90000A    2836            mov     dptr,#0x000A
0ADC 120000    2837            lcall   _waitms
0ADF           2838   ;        main.c:653: P2_0=1; // 'set' pin to 1 is normal operation mode.
0ADF D2A0      2839            setb    _P2_0
0AE1           2840   ;        main.c:654: printf("Response: %s\r\n", buff);
0AE1 7420      2841            mov     a,#_buff
0AE3 C0E0      2842            push    acc
0AE5 7457      2843            mov     a,#(_buff >> 8)
0AE7 C0E0      2844            push    acc
0AE9 7440      2845            mov     a,#0x40
0AEB C0E0      2846            push    acc
0AED 74A0      2847            mov     a,#__str_3
0AEF C0E0      2848            push    acc
0AF1 74E7      2849            mov     a,#(__str_3 >> 8)
0AF3 C0E0      2850            push    acc
0AF5 7480      2851            mov     a,#0x80
0AF7 C0E0      2852            push    acc
0AF9 120000    2853            lcall   _printf
0AFC E581      2854            mov     a,sp
0AFE 24FA      2855            add     a,#0xfa
0B00 F581      2856            mov     sp,a
0B02 22        2857            ret
0B03           2858   ;------------------------------------------------------------
0B03           2859   ;Allocation info for local variables in function 'ReceptionOff'
0B03           2860   ;------------------------------------------------------------
0B03           2861   ;------------------------------------------------------------
0B03           2862   ;        main.c:657: void ReceptionOff (void)
0B03           2863   ;        -----------------------------------------
0B03           2864   ;         function ReceptionOff
0B03           2865   ;        -----------------------------------------
0B03           2866   _ReceptionOff:
0B03           2867   ;        main.c:659: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0B03 C2A0      2868            clr     _P2_0
0B05           2869   ;        main.c:660: waitms(10);
0B05 90000A    2870            mov     dptr,#0x000A
0B08 120000    2871            lcall   _waitms
0B0B           2872   ;        main.c:661: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0B0B 90E7E0    2873            mov     dptr,#__str_4
0B0E 75F080    2874            mov     b,#0x80
0B11 120000    2875            lcall   _sendstr1
0B14           2876   ;        main.c:662: waitms(10);
0B14 90000A    2877            mov     dptr,#0x000A
0B17 120000    2878            lcall   _waitms
0B1A           2879   ;        main.c:664: SCON1&=0b_0011_1111;
0B1A 53C83F    2880            anl     _SCON1,#0x3F
0B1D           2881   ;        main.c:665: P2_0=1; // 'set' pin to 1 is normal operation mode.
0B1D D2A0      2882            setb    _P2_0
0B1F 22        2883            ret
0B20           2884   ;------------------------------------------------------------
0B20           2885   ;Allocation info for local variables in function 'measure_distance'
0B20           2886   ;------------------------------------------------------------
0B20           2887   ;------------------------------------------------------------
0B20           2888   ;        main.c:668: int measure_distance(void)
0B20           2889   ;        -----------------------------------------
0B20           2890   ;         function measure_distance
0B20           2891   ;        -----------------------------------------
0B20           2892   _measure_distance:
0B20           2893   ;        main.c:672: TL0 = 0; 
0B20 758A00    2894            mov     _TL0,#0x00
0B23           2895   ;        main.c:673: TH0 = 0; 
0B23 758C00    2896            mov     _TH0,#0x00
0B26           2897   ;        main.c:674: TF0 = 0; 
0B26 C28D      2898            clr     _TF0
0B28           2899   ;        main.c:675: overflow_count = 0;
0B28 9052E0    2900            mov     dptr,#_overflow_count
0B2B           2901   ;        main.c:676: duration = 0;
0B2B E4        2902            clr     a
0B2C F0        2903            movx    @dptr,a
0B2D 904C90    2904            mov     dptr,#_duration
0B30 F0        2905            movx    @dptr,a
0B31 A3        2906            inc     dptr
0B32 E4        2907            clr     a
0B33 F0        2908            movx    @dptr,a
0B34 A3        2909            inc     dptr
0B35 F0        2910            movx    @dptr,a
0B36 A3        2911            inc     dptr
0B37 F0        2912            movx    @dptr,a
0B38           2913   ;        main.c:678: TRIG_PIN = 1; 
0B38 D280      2914            setb    _P0_0
0B3A           2915   ;        main.c:679: for(i = 0; i < 40; i++);
0B3A 905260    2916            mov     dptr,#_i
0B3D 7428      2917            mov     a,#0x28
0B3F F0        2918            movx    @dptr,a
0B40 E4        2919            clr     a
0B41 A3        2920            inc     dptr
0B42 F0        2921            movx    @dptr,a
0B43           2922   L023016?:
0B43 905260    2923            mov     dptr,#_i
0B46 E0        2924            movx    a,@dptr
0B47 FA        2925            mov     r2,a
0B48 A3        2926            inc     dptr
0B49 E0        2927            movx    a,@dptr
0B4A FB        2928            mov     r3,a
0B4B 1A        2929            dec     r2
0B4C BAFF60    2930            cjne    r2,#0xff,L023029?
0B4F 1B        2931            dec     r3
0B50           2932   L023029?:
0B50 905260    2933            mov     dptr,#_i
0B53 EA        2934            mov     a,r2
0B54 F0        2935            movx    @dptr,a
0B55 A3        2936            inc     dptr
0B56 EB        2937            mov     a,r3
0B57 F0        2938            movx    @dptr,a
0B58 905260    2939            mov     dptr,#_i
0B5B E0        2940            movx    a,@dptr
0B5C FA        2941            mov     r2,a
0B5D A3        2942            inc     dptr
0B5E E0        2943            movx    a,@dptr
0B5F FB        2944            mov     r3,a
0B60 4A        2945            orl     a,r2
0B61 7000      2946            jnz     L023016?
0B63 905260    2947            mov     dptr,#_i
0B66 7428      2948            mov     a,#0x28
0B68 F0        2949            movx    @dptr,a
0B69 E4        2950            clr     a
0B6A A3        2951            inc     dptr
0B6B F0        2952            movx    @dptr,a
0B6C           2953   ;        main.c:680: TRIG_PIN = 0; 
0B6C C280      2954            clr     _P0_0
0B6E           2955   ;        main.c:682: while (ECHO_PIN != 0){
0B6E           2956   L023003?:
0B6E 30B1E0    2957            jnb     _P3_1,L023006?
0B71           2958   ;        main.c:683: i++;
0B71 905260    2959            mov     dptr,#_i
0B74 E0        2960            movx    a,@dptr
0B75 2401      2961            add     a,#0x01
0B77 F0        2962            movx    @dptr,a
0B78 A3        2963            inc     dptr
0B79 E0        2964            movx    a,@dptr
0B7A 3400      2965            addc    a,#0x00
0B7C F0        2966            movx    @dptr,a
0B7D           2967   ;        main.c:684: if (i > 3000){
0B7D 905260    2968            mov     dptr,#_i
0B80 E0        2969            movx    a,@dptr
0B81 FA        2970            mov     r2,a
0B82 A3        2971            inc     dptr
0B83 E0        2972            movx    a,@dptr
0B84 FB        2973            mov     r3,a
0B85 C3        2974            clr     c
0B86 74B8      2975            mov     a,#0xB8
0B88 9A        2976            subb    a,r2
0B89 740B      2977            mov     a,#0x0B
0B8B 9B        2978            subb    a,r3
0B8C 5000      2979            jnc     L023003?
0B8E           2980   ;        main.c:686: return -1;
0B8E 90FFFF    2981            mov     dptr,#0xFFFF
0B91 22        2982            ret
0B92           2983   ;        main.c:689: while (ECHO_PIN != 1);
0B92           2984   L023006?:
0B92 30B1E0    2985            jnb     _P3_1,L023006?
0B95           2986   ;        main.c:690: TR0 = 1; 
0B95 D28C      2987            setb    _TR0
0B97           2988   ;        main.c:691: while (ECHO_PIN == 1)
0B97           2989   L023011?:
0B97 30B160    2990            jnb     _P3_1,L023013?
0B9A           2991   ;        main.c:693: if (TF0 == 1){
0B9A           2992   ;        main.c:694: TF0 = 0; 
0B9A 108DA0    2993            jbc     _TF0,L023035?
0B9D 8000      2994            sjmp    L023011?
0B9F           2995   L023035?:
0B9F           2996   ;        main.c:695: overflow_count++;
0B9F 9052E0    2997            mov     dptr,#_overflow_count
0BA2 E0        2998            movx    a,@dptr
0BA3 2401      2999            add     a,#0x01
0BA5 F0        3000            movx    @dptr,a
0BA6 8000      3001            sjmp    L023011?
0BA8           3002   L023013?:
0BA8           3003   ;        main.c:699: TR0 = 0; 
0BA8 C28C      3004            clr     _TR0
0BAA           3005   ;        main.c:700: duration = (overflow_count*65536.0 + TH0*256.0 + TL0) * (12.0/SYSCLK);
0BAA 9052E0    3006            mov     dptr,#_overflow_count
0BAD E0        3007            movx    a,@dptr
0BAE F582      3008            mov     dpl,a
0BB0 120000    3009            lcall   ___uchar2fs
0BB3 AA82      3010            mov     r2,dpl
0BB5 AB83      3011            mov     r3,dph
0BB7 ACF0      3012            mov     r4,b
0BB9 FD        3013            mov     r5,a
0BBA C002      3014            push    ar2
0BBC C003      3015            push    ar3
0BBE C004      3016            push    ar4
0BC0 C005      3017            push    ar5
0BC2 900000    3018            mov     dptr,#0x0000
0BC5 75F080    3019            mov     b,#0x80
0BC8 7447      3020            mov     a,#0x47
0BCA 120000    3021            lcall   ___fsmul
0BCD AA82      3022            mov     r2,dpl
0BCF AB83      3023            mov     r3,dph
0BD1 ACF0      3024            mov     r4,b
0BD3 FD        3025            mov     r5,a
0BD4 E581      3026            mov     a,sp
0BD6 24FC      3027            add     a,#0xfc
0BD8 F581      3028            mov     sp,a
0BDA 858C82    3029            mov     dpl,_TH0
0BDD C002      3030            push    ar2
0BDF C003      3031            push    ar3
0BE1 C004      3032            push    ar4
0BE3 C005      3033            push    ar5
0BE5 120000    3034            lcall   ___uchar2fs
0BE8 AE82      3035            mov     r6,dpl
0BEA AF83      3036            mov     r7,dph
0BEC A8F0      3037            mov     r0,b
0BEE F9        3038            mov     r1,a
0BEF C006      3039            push    ar6
0BF1 C007      3040            push    ar7
0BF3 C000      3041            push    ar0
0BF5 C001      3042            push    ar1
0BF7 900000    3043            mov     dptr,#0x0000
0BFA 75F080    3044            mov     b,#0x80
0BFD 7443      3045            mov     a,#0x43
0BFF 120000    3046            lcall   ___fsmul
0C02 AE82      3047            mov     r6,dpl
0C04 AF83      3048            mov     r7,dph
0C06 A8F0      3049            mov     r0,b
0C08 F9        3050            mov     r1,a
0C09 E581      3051            mov     a,sp
0C0B 24FC      3052            add     a,#0xfc
0C0D F581      3053            mov     sp,a
0C0F D005      3054            pop     ar5
0C11 D004      3055            pop     ar4
0C13 D003      3056            pop     ar3
0C15 D002      3057            pop     ar2
0C17 C006      3058            push    ar6
0C19 C007      3059            push    ar7
0C1B C000      3060            push    ar0
0C1D C001      3061            push    ar1
0C1F 8A82      3062            mov     dpl,r2
0C21 8B83      3063            mov     dph,r3
0C23 8CF0      3064            mov     b,r4
0C25 ED        3065            mov     a,r5
0C26 120000    3066            lcall   ___fsadd
0C29 AA82      3067            mov     r2,dpl
0C2B AB83      3068            mov     r3,dph
0C2D ACF0      3069            mov     r4,b
0C2F FD        3070            mov     r5,a
0C30 E581      3071            mov     a,sp
0C32 24FC      3072            add     a,#0xfc
0C34 F581      3073            mov     sp,a
0C36 AE8A      3074            mov     r6,_TL0
0C38 7F00      3075            mov     r7,#0x00
0C3A 8E82      3076            mov     dpl,r6
0C3C 8F83      3077            mov     dph,r7
0C3E C002      3078            push    ar2
0C40 C003      3079            push    ar3
0C42 C004      3080            push    ar4
0C44 C005      3081            push    ar5
0C46 120000    3082            lcall   ___sint2fs
0C49 AE82      3083            mov     r6,dpl
0C4B AF83      3084            mov     r7,dph
0C4D A8F0      3085            mov     r0,b
0C4F F9        3086            mov     r1,a
0C50 D005      3087            pop     ar5
0C52 D004      3088            pop     ar4
0C54 D003      3089            pop     ar3
0C56 D002      3090            pop     ar2
0C58 C006      3091            push    ar6
0C5A C007      3092            push    ar7
0C5C C000      3093            push    ar0
0C5E C001      3094            push    ar1
0C60 8A82      3095            mov     dpl,r2
0C62 8B83      3096            mov     dph,r3
0C64 8CF0      3097            mov     b,r4
0C66 ED        3098            mov     a,r5
0C67 120000    3099            lcall   ___fsadd
0C6A AA82      3100            mov     r2,dpl
0C6C AB83      3101            mov     r3,dph
0C6E ACF0      3102            mov     r4,b
0C70 FD        3103            mov     r5,a
0C71 E581      3104            mov     a,sp
0C73 24FC      3105            add     a,#0xfc
0C75 F581      3106            mov     sp,a
0C77 C002      3107            push    ar2
0C79 C003      3108            push    ar3
0C7B C004      3109            push    ar4
0C7D C005      3110            push    ar5
0C7F 90F4FC    3111            mov     dptr,#0xF4FC
0C82 75F032    3112            mov     b,#0x32
0C85 7434      3113            mov     a,#0x34
0C87 120000    3114            lcall   ___fsmul
0C8A AA82      3115            mov     r2,dpl
0C8C AB83      3116            mov     r3,dph
0C8E ACF0      3117            mov     r4,b
0C90 FD        3118            mov     r5,a
0C91 E581      3119            mov     a,sp
0C93 24FC      3120            add     a,#0xfc
0C95 F581      3121            mov     sp,a
0C97 904C90    3122            mov     dptr,#_duration
0C9A EA        3123            mov     a,r2
0C9B F0        3124            movx    @dptr,a
0C9C A3        3125            inc     dptr
0C9D EB        3126            mov     a,r3
0C9E F0        3127            movx    @dptr,a
0C9F A3        3128            inc     dptr
0CA0 EC        3129            mov     a,r4
0CA1 F0        3130            movx    @dptr,a
0CA2 A3        3131            inc     dptr
0CA3 ED        3132            mov     a,r5
0CA4 F0        3133            movx    @dptr,a
0CA5           3134   ;        main.c:702: distance = 100 * (340.0 * duration * 100.0 / 2.0); // distance in cm
0CA5 C002      3135            push    ar2
0CA7 C003      3136            push    ar3
0CA9 C004      3137            push    ar4
0CAB C005      3138            push    ar5
0CAD 90D000    3139            mov     dptr,#0xD000
0CB0 75F004    3140            mov     b,#0x04
0CB3 7447      3141            mov     a,#0x47
0CB5 120000    3142            lcall   ___fsmul
0CB8 AA82      3143            mov     r2,dpl
0CBA AB83      3144            mov     r3,dph
0CBC ACF0      3145            mov     r4,b
0CBE FD        3146            mov     r5,a
0CBF E581      3147            mov     a,sp
0CC1 24FC      3148            add     a,#0xfc
0CC3 F581      3149            mov     sp,a
0CC5 E4        3150            clr     a
0CC6 C0E0      3151            push    acc
0CC8 C0E0      3152            push    acc
0CCA C0E0      3153            push    acc
0CCC 7440      3154            mov     a,#0x40
0CCE C0E0      3155            push    acc
0CD0 8A82      3156            mov     dpl,r2
0CD2 8B83      3157            mov     dph,r3
0CD4 8CF0      3158            mov     b,r4
0CD6 ED        3159            mov     a,r5
0CD7 120000    3160            lcall   ___fsdiv
0CDA AA82      3161            mov     r2,dpl
0CDC AB83      3162            mov     r3,dph
0CDE ACF0      3163            mov     r4,b
0CE0 FD        3164            mov     r5,a
0CE1 E581      3165            mov     a,sp
0CE3 24FC      3166            add     a,#0xfc
0CE5 F581      3167            mov     sp,a
0CE7 C002      3168            push    ar2
0CE9 C003      3169            push    ar3
0CEB C004      3170            push    ar4
0CED C005      3171            push    ar5
0CEF 900000    3172            mov     dptr,#0x0000
0CF2 75F0C8    3173            mov     b,#0xC8
0CF5 7442      3174            mov     a,#0x42
0CF7 120000    3175            lcall   ___fsmul
0CFA AA82      3176            mov     r2,dpl
0CFC AB83      3177            mov     r3,dph
0CFE ACF0      3178            mov     r4,b
0D00 FD        3179            mov     r5,a
0D01 E581      3180            mov     a,sp
0D03 24FC      3181            add     a,#0xfc
0D05 F581      3182            mov     sp,a
0D07 8A82      3183            mov     dpl,r2
0D09 8B83      3184            mov     dph,r3
0D0B 8CF0      3185            mov     b,r4
0D0D ED        3186            mov     a,r5
0D0E 120000    3187            lcall   ___fs2sint
0D11 AA82      3188            mov     r2,dpl
0D13 AB83      3189            mov     r3,dph
0D15 905320    3190            mov     dptr,#_distance
0D18 EA        3191            mov     a,r2
0D19 F0        3192            movx    @dptr,a
0D1A A3        3193            inc     dptr
0D1B EB        3194            mov     a,r3
0D1C F0        3195            movx    @dptr,a
0D1D           3196   ;        main.c:704: return distance; 
0D1D 8A82      3197            mov     dpl,r2
0D1F 8B83      3198            mov     dph,r3
0D21 22        3199            ret
0D22           3200   ;------------------------------------------------------------
0D22           3201   ;Allocation info for local variables in function 'Set_Pin_Output'
0D22           3202   ;------------------------------------------------------------
0D22           3203   ;pin                       Allocated to registers r2 
0D22           3204   ;mask                      Allocated to registers r3 
0D22           3205   ;------------------------------------------------------------
0D22           3206   ;        main.c:707: void Set_Pin_Output (unsigned char pin)
0D22           3207   ;        -----------------------------------------
0D22           3208   ;         function Set_Pin_Output
0D22           3209   ;        -----------------------------------------
0D22           3210   _Set_Pin_Output:
0D22 AA82      3211            mov     r2,dpl
0D24           3212   ;        main.c:711: mask=(1<<(pin&0x7));
0D24 7407      3213            mov     a,#0x07
0D26 5A        3214            anl     a,r2
0D27 F5F0      3215            mov     b,a
0D29 05F0      3216            inc     b
0D2B 7401      3217            mov     a,#0x01
0D2D 8000      3218            sjmp    L024011?
0D2F           3219   L024009?:
0D2F 25E0      3220            add     a,acc
0D31           3221   L024011?:
0D31 D5F0A0    3222            djnz    b,L024009?
0D34 FB        3223            mov     r3,a
0D35           3224   ;        main.c:712: switch(pin/0x10)
0D35 EA        3225            mov     a,r2
0D36 C4        3226            swap    a
0D37 540F      3227            anl     a,#0x0f
0D39 FA        3228            mov  r2,a
0D3A 24FC      3229            add     a,#0xff - 0x03
0D3C 4000      3230            jc      L024006?
0D3E EA        3231            mov     a,r2
0D3F 2A        3232            add     a,r2
0D40 2A        3233            add     a,r2
0D41 90EC20    3234            mov     dptr,#L024013?
0D44 73        3235            jmp     @a+dptr
0D45           3236   L024013?:
0D45 020000    3237            ljmp    L024001?
0D48 020000    3238            ljmp    L024002?
0D4B 020000    3239            ljmp    L024003?
0D4E 020000    3240            ljmp    L024004?
0D51           3241   ;        main.c:714: case 0: P0MDOUT |= mask; break;
0D51           3242   L024001?:
0D51 EB        3243            mov     a,r3
0D52 42A4      3244            orl     _P0MDOUT,a
0D54           3245   ;        main.c:715: case 1: P1MDOUT |= mask; break;
0D54 22        3246            ret
0D55           3247   L024002?:
0D55 EB        3248            mov     a,r3
0D56 42A5      3249            orl     _P1MDOUT,a
0D58           3250   ;        main.c:716: case 2: P2MDOUT |= mask; break; 
0D58 22        3251            ret
0D59           3252   L024003?:
0D59 EB        3253            mov     a,r3
0D5A 42A6      3254            orl     _P2MDOUT,a
0D5C           3255   ;        main.c:717: case 3: P3MDOUT |= mask; break; 
0D5C 22        3256            ret
0D5D           3257   L024004?:
0D5D EB        3258            mov     a,r3
0D5E 429C      3259            orl     _P3MDOUT,a
0D60           3260   ;        main.c:718: }   
0D60           3261   L024006?:
0D60 22        3262            ret
0D61           3263   ;------------------------------------------------------------
0D61           3264   ;Allocation info for local variables in function 'Set_Pin_Input'
0D61           3265   ;------------------------------------------------------------
0D61           3266   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_164'
0D61           3267   ;pin                       Allocated to registers r2 
0D61           3268   ;------------------------------------------------------------
0D61           3269   ;        main.c:721: void Set_Pin_Input (unsigned char pin)
0D61           3270   ;        -----------------------------------------
0D61           3271   ;         function Set_Pin_Input
0D61           3272   ;        -----------------------------------------
0D61           3273   _Set_Pin_Input:
0D61 AA82      3274            mov     r2,dpl
0D63           3275   ;        main.c:725: mask=(1<<(pin&0x7));
0D63 7407      3276            mov     a,#0x07
0D65 5A        3277            anl     a,r2
0D66 F5F0      3278            mov     b,a
0D68 05F0      3279            inc     b
0D6A 7401      3280            mov     a,#0x01
0D6C 8000      3281            sjmp    L025011?
0D6E           3282   L025009?:
0D6E 25E0      3283            add     a,acc
0D70           3284   L025011?:
0D70 D5F0A0    3285            djnz    b,L025009?
0D73           3286   ;        main.c:726: mask=~mask;
0D73 F4        3287            cpl     a
0D74 FB        3288            mov     r3,a
0D75           3289   ;        main.c:727: switch(pin/0x10)
0D75 EA        3290            mov     a,r2
0D76 C4        3291            swap    a
0D77 540F      3292            anl     a,#0x0f
0D79 FA        3293            mov  r2,a
0D7A 24FC      3294            add     a,#0xff - 0x03
0D7C 4000      3295            jc      L025006?
0D7E EA        3296            mov     a,r2
0D7F 2A        3297            add     a,r2
0D80 2A        3298            add     a,r2
0D81 90EE20    3299            mov     dptr,#L025013?
0D84 73        3300            jmp     @a+dptr
0D85           3301   L025013?:
0D85 020000    3302            ljmp    L025001?
0D88 020000    3303            ljmp    L025002?
0D8B 020000    3304            ljmp    L025003?
0D8E 020000    3305            ljmp    L025004?
0D91           3306   ;        main.c:729: case 0: P0MDOUT &= mask; break;
0D91           3307   L025001?:
0D91 EB        3308            mov     a,r3
0D92 52A4      3309            anl     _P0MDOUT,a
0D94           3310   ;        main.c:730: case 1: P1MDOUT &= mask; break;
0D94 22        3311            ret
0D95           3312   L025002?:
0D95 EB        3313            mov     a,r3
0D96 52A5      3314            anl     _P1MDOUT,a
0D98           3315   ;        main.c:731: case 2: P2MDOUT &= mask; break; 
0D98 22        3316            ret
0D99           3317   L025003?:
0D99 EB        3318            mov     a,r3
0D9A 52A6      3319            anl     _P2MDOUT,a
0D9C           3320   ;        main.c:732: case 3: P3MDOUT &= mask; break; 
0D9C 22        3321            ret
0D9D           3322   L025004?:
0D9D EB        3323            mov     a,r3
0D9E 529C      3324            anl     _P3MDOUT,a
0DA0           3325   ;        main.c:733: }   
0DA0           3326   L025006?:
0DA0 22        3327            ret
0DA1           3328   ;------------------------------------------------------------
0DA1           3329   ;Allocation info for local variables in function 'InitADC'
0DA1           3330   ;------------------------------------------------------------
0DA1           3331   ;------------------------------------------------------------
0DA1           3332   ;        main.c:736: void InitADC (void)
0DA1           3333   ;        -----------------------------------------
0DA1           3334   ;         function InitADC
0DA1           3335   ;        -----------------------------------------
0DA1           3336   _InitADC:
0DA1           3337   ;        main.c:738: SFRPAGE = 0x00;
0DA1 75A700    3338            mov     _SFRPAGE,#0x00
0DA4           3339   ;        main.c:739: ADEN=0; // Disable ADC
0DA4 C2EF      3340            clr     _ADEN
0DA6           3341   ;        main.c:744: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0DA6 75B280    3342            mov     _ADC0CN1,#0x80
0DA9           3343   ;        main.c:748: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0DA9 75BC20    3344            mov     _ADC0CF0,#0x20
0DAC           3345   ;        main.c:752: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
0DAC 75B91E    3346            mov     _ADC0CF1,#0x1E
0DAF           3347   ;        main.c:761: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0DAF 75E800    3348            mov     _ADC0CN0,#0x00
0DB2           3349   ;        main.c:766: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0DB2 75DF3F    3350            mov     _ADC0CF2,#0x3F
0DB5           3351   ;        main.c:770: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0DB5 75B300    3352            mov     _ADC0CN2,#0x00
0DB8           3353   ;        main.c:772: ADEN=1; // Enable ADC
0DB8 D2EF      3354            setb    _ADEN
0DBA 22        3355            ret
0DBB           3356   ;------------------------------------------------------------
0DBB           3357   ;Allocation info for local variables in function 'InitPinADC'
0DBB           3358   ;------------------------------------------------------------
0DBB           3359   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
0DBB           3360   ;portno                    Allocated to registers r2 
0DBB           3361   ;mask                      Allocated to registers r3 
0DBB           3362   ;------------------------------------------------------------
0DBB           3363   ;        main.c:775: void InitPinADC (unsigned char portno, unsigned char pin_num)
0DBB           3364   ;        -----------------------------------------
0DBB           3365   ;         function InitPinADC
0DBB           3366   ;        -----------------------------------------
0DBB           3367   _InitPinADC:
0DBB AA82      3368            mov     r2,dpl
0DBD           3369   ;        main.c:779: mask=1<<pin_num;
0DBD 85E0F0    3370            mov     b,_InitPinADC_PARM_2
0DC0 05F0      3371            inc     b
0DC2 7401      3372            mov     a,#0x01
0DC4 8000      3373            sjmp    L027013?
0DC6           3374   L027011?:
0DC6 25E0      3375            add     a,acc
0DC8           3376   L027013?:
0DC8 D5F0A0    3377            djnz    b,L027011?
0DCB FB        3378            mov     r3,a
0DCC           3379   ;        main.c:781: SFRPAGE = 0x20;
0DCC 75A720    3380            mov     _SFRPAGE,#0x20
0DCF           3381   ;        main.c:782: switch (portno)
0DCF BA0048    3382            cjne    r2,#0x00,L027014?
0DD2 8000      3383            sjmp    L027001?
0DD4           3384   L027014?:
0DD4 BA01C8    3385            cjne    r2,#0x01,L027015?
0DD7 8000      3386            sjmp    L027002?
0DD9           3387   L027015?:
0DD9           3388   ;        main.c:784: case 0:
0DD9 BA0248    3389            cjne    r2,#0x02,L027005?
0DDC 8000      3390            sjmp    L027003?
0DDE           3391   L027001?:
0DDE           3392   ;        main.c:785: P0MDIN &= (~mask); // Set pin as analog input
0DDE EB        3393            mov     a,r3
0DDF F4        3394            cpl     a
0DE0 FA        3395            mov     r2,a
0DE1 52F1      3396            anl     _P0MDIN,a
0DE3           3397   ;        main.c:786: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0DE3 EB        3398            mov     a,r3
0DE4 42D4      3399            orl     _P0SKIP,a
0DE6           3400   ;        main.c:787: break;
0DE6           3401   ;        main.c:788: case 1:
0DE6 8000      3402            sjmp    L027005?
0DE8           3403   L027002?:
0DE8           3404   ;        main.c:789: P1MDIN &= (~mask); // Set pin as analog input
0DE8 EB        3405            mov     a,r3
0DE9 F4        3406            cpl     a
0DEA FA        3407            mov     r2,a
0DEB 52F2      3408            anl     _P1MDIN,a
0DED           3409   ;        main.c:790: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0DED EB        3410            mov     a,r3
0DEE 42D5      3411            orl     _P1SKIP,a
0DF0           3412   ;        main.c:791: break;
0DF0           3413   ;        main.c:792: case 2:
0DF0 8000      3414            sjmp    L027005?
0DF2           3415   L027003?:
0DF2           3416   ;        main.c:793: P2MDIN &= (~mask); // Set pin as analog input
0DF2 EB        3417            mov     a,r3
0DF3 F4        3418            cpl     a
0DF4 FA        3419            mov     r2,a
0DF5 52F3      3420            anl     _P2MDIN,a
0DF7           3421   ;        main.c:794: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0DF7 EB        3422            mov     a,r3
0DF8 42CC      3423            orl     _P2SKIP,a
0DFA           3424   ;        main.c:798: }
0DFA           3425   L027005?:
0DFA           3426   ;        main.c:799: SFRPAGE = 0x00;
0DFA 75A700    3427            mov     _SFRPAGE,#0x00
0DFD 22        3428            ret
0DFE           3429   ;------------------------------------------------------------
0DFE           3430   ;Allocation info for local variables in function 'ADC_at_Pin'
0DFE           3431   ;------------------------------------------------------------
0DFE           3432   ;pin                       Allocated to registers 
0DFE           3433   ;------------------------------------------------------------
0DFE           3434   ;        main.c:802: unsigned int ADC_at_Pin(unsigned char pin)
0DFE           3435   ;        -----------------------------------------
0DFE           3436   ;         function ADC_at_Pin
0DFE           3437   ;        -----------------------------------------
0DFE           3438   _ADC_at_Pin:
0DFE 8582BB    3439            mov     _ADC0MX,dpl
0E01           3440   ;        main.c:805: ADINT = 0;
0E01 C2ED      3441            clr     _ADINT
0E03           3442   ;        main.c:806: ADBUSY = 1;     // Convert voltage at the pin
0E03 D2EC      3443            setb    _ADBUSY
0E05           3444   ;        main.c:807: while (!ADINT); // Wait for conversion to complete
0E05           3445   L028001?:
0E05 30EDC8    3446            jnb     _ADINT,L028001?
0E08           3447   ;        main.c:808: return (ADC0);
0E08 85BD82    3448            mov     dpl,_ADC0
0E0B 85BE83    3449            mov     dph,(_ADC0 >> 8)
0E0E 22        3450            ret
0E0F           3451   ;------------------------------------------------------------
0E0F           3452   ;Allocation info for local variables in function 'ReadHX711'
0E0F           3453   ;------------------------------------------------------------
0E0F           3454   ;dataa                     Allocated with name '_ReadHX711_dataa_1_174'
0E0F           3455   ;ans                       Allocated with name '_ReadHX711_ans_1_174'
0E0F           3456   ;j                         Allocated with name '_ReadHX711_j_1_174'
0E0F           3457   ;------------------------------------------------------------
0E0F           3458   ;        main.c:811: int ReadHX711(void) {
0E0F           3459   ;        -----------------------------------------
0E0F           3460   ;         function ReadHX711
0E0F           3461   ;        -----------------------------------------
0E0F           3462   _ReadHX711:
0E0F           3463   ;        main.c:812: xdata unsigned long dataa = 0;
0E0F 90CFC0    3464            mov     dptr,#_ReadHX711_dataa_1_174
0E12 E4        3465            clr     a
0E13 F0        3466            movx    @dptr,a
0E14 A3        3467            inc     dptr
0E15 F0        3468            movx    @dptr,a
0E16 A3        3469            inc     dptr
0E17 F0        3470            movx    @dptr,a
0E18 A3        3471            inc     dptr
0E19 F0        3472            movx    @dptr,a
0E1A           3473   ;        main.c:817: PD_SCK = 0;
0E1A C2A5      3474            clr     _P2_5
0E1C           3475   ;        main.c:819: for (i = 0; i < 24; i++) {
0E1C 905260    3476            mov     dptr,#_i
0E1F E4        3477            clr     a
0E20 F0        3478            movx    @dptr,a
0E21 A3        3479            inc     dptr
0E22 F0        3480            movx    @dptr,a
0E23           3481   L029011?:
0E23 905260    3482            mov     dptr,#_i
0E26 E0        3483            movx    a,@dptr
0E27 FA        3484            mov     r2,a
0E28 A3        3485            inc     dptr
0E29 E0        3486            movx    a,@dptr
0E2A FB        3487            mov     r3,a
0E2B C3        3488            clr     c
0E2C EA        3489            mov     a,r2
0E2D 9418      3490            subb    a,#0x18
0E2F EB        3491            mov     a,r3
0E30 9400      3492            subb    a,#0x00
0E32 4000      3493            jc      L029036?
0E34 020000    3494            ljmp    L029014?
0E37           3495   L029036?:
0E37           3496   ;        main.c:820: PD_SCK = 1;
0E37 D2A5      3497            setb    _P2_5
0E39           3498   ;        main.c:821: for (j = 0; j < 4; j++);
0E39 90D010    3499            mov     dptr,#_ReadHX711_j_1_174
0E3C E4        3500            clr     a
0E3D F0        3501            movx    @dptr,a
0E3E           3502   L029003?:
0E3E 90D010    3503            mov     dptr,#_ReadHX711_j_1_174
0E41 E0        3504            movx    a,@dptr
0E42 FA        3505            mov     r2,a
0E43 C3        3506            clr     c
0E44 6480      3507            xrl     a,#0x80
0E46 9484      3508            subb    a,#0x84
0E48 5000      3509            jnc     L029006?
0E4A 90D010    3510            mov     dptr,#_ReadHX711_j_1_174
0E4D E0        3511            movx    a,@dptr
0E4E 2401      3512            add     a,#0x01
0E50 F0        3513            movx    @dptr,a
0E51 8000      3514            sjmp    L029003?
0E53           3515   L029006?:
0E53           3516   ;        main.c:822: dataa = dataa << 1;
0E53 90CFC0    3517            mov     dptr,#_ReadHX711_dataa_1_174
0E56 E0        3518            movx    a,@dptr
0E57 FA        3519            mov     r2,a
0E58 A3        3520            inc     dptr
0E59 E0        3521            movx    a,@dptr
0E5A FB        3522            mov     r3,a
0E5B A3        3523            inc     dptr
0E5C E0        3524            movx    a,@dptr
0E5D FC        3525            mov     r4,a
0E5E A3        3526            inc     dptr
0E5F E0        3527            movx    a,@dptr
0E60 FD        3528            mov     r5,a
0E61 EA        3529            mov     a,r2
0E62 2A        3530            add     a,r2
0E63 FA        3531            mov     r2,a
0E64 EB        3532            mov     a,r3
0E65 33        3533            rlc     a
0E66 FB        3534            mov     r3,a
0E67 EC        3535            mov     a,r4
0E68 33        3536            rlc     a
0E69 FC        3537            mov     r4,a
0E6A ED        3538            mov     a,r5
0E6B 33        3539            rlc     a
0E6C FD        3540            mov     r5,a
0E6D 90CFC0    3541            mov     dptr,#_ReadHX711_dataa_1_174
0E70 EA        3542            mov     a,r2
0E71 F0        3543            movx    @dptr,a
0E72 A3        3544            inc     dptr
0E73 EB        3545            mov     a,r3
0E74 F0        3546            movx    @dptr,a
0E75 A3        3547            inc     dptr
0E76 EC        3548            mov     a,r4
0E77 F0        3549            movx    @dptr,a
0E78 A3        3550            inc     dptr
0E79 ED        3551            mov     a,r5
0E7A F0        3552            movx    @dptr,a
0E7B           3553   ;        main.c:823: if (DOUT) {
0E7B 30A648    3554            jnb     _P2_6,L029002?
0E7E           3555   ;        main.c:824: dataa |= 0x01;
0E7E 90CFC0    3556            mov     dptr,#_ReadHX711_dataa_1_174
0E81 E0        3557            movx    a,@dptr
0E82 FA        3558            mov     r2,a
0E83 A3        3559            inc     dptr
0E84 E0        3560            movx    a,@dptr
0E85 FB        3561            mov     r3,a
0E86 A3        3562            inc     dptr
0E87 E0        3563            movx    a,@dptr
0E88 FC        3564            mov     r4,a
0E89 A3        3565            inc     dptr
0E8A E0        3566            movx    a,@dptr
0E8B FD        3567            mov     r5,a
0E8C 90CFC0    3568            mov     dptr,#_ReadHX711_dataa_1_174
0E8F 7401      3569            mov     a,#0x01
0E91 4A        3570            orl     a,r2
0E92 F0        3571            movx    @dptr,a
0E93 A3        3572            inc     dptr
0E94 EB        3573            mov     a,r3
0E95 F0        3574            movx    @dptr,a
0E96 A3        3575            inc     dptr
0E97 EC        3576            mov     a,r4
0E98 F0        3577            movx    @dptr,a
0E99 A3        3578            inc     dptr
0E9A ED        3579            mov     a,r5
0E9B F0        3580            movx    @dptr,a
0E9C           3581   L029002?:
0E9C           3582   ;        main.c:826: PD_SCK = 0;
0E9C C2A5      3583            clr     _P2_5
0E9E           3584   ;        main.c:827: for (j = 0; j < 4; j++);
0E9E 90D010    3585            mov     dptr,#_ReadHX711_j_1_174
0EA1 E4        3586            clr     a
0EA2 F0        3587            movx    @dptr,a
0EA3           3588   L029007?:
0EA3 90D010    3589            mov     dptr,#_ReadHX711_j_1_174
0EA6 E0        3590            movx    a,@dptr
0EA7 FA        3591            mov     r2,a
0EA8 C3        3592            clr     c
0EA9 6480      3593            xrl     a,#0x80
0EAB 9484      3594            subb    a,#0x84
0EAD 5000      3595            jnc     L029013?
0EAF 90D010    3596            mov     dptr,#_ReadHX711_j_1_174
0EB2 E0        3597            movx    a,@dptr
0EB3 2401      3598            add     a,#0x01
0EB5 F0        3599            movx    @dptr,a
0EB6 8000      3600            sjmp    L029007?
0EB8           3601   L029013?:
0EB8           3602   ;        main.c:819: for (i = 0; i < 24; i++) {
0EB8 905260    3603            mov     dptr,#_i
0EBB E0        3604            movx    a,@dptr
0EBC 2401      3605            add     a,#0x01
0EBE F0        3606            movx    @dptr,a
0EBF A3        3607            inc     dptr
0EC0 E0        3608            movx    a,@dptr
0EC1 3400      3609            addc    a,#0x00
0EC3 F0        3610            movx    @dptr,a
0EC4 020000    3611            ljmp    L029011?
0EC7           3612   L029014?:
0EC7           3613   ;        main.c:830: PD_SCK = 1;
0EC7 D2A5      3614            setb    _P2_5
0EC9           3615   ;        main.c:831: for (j = 0; j < 4; j++);
0EC9 90D010    3616            mov     dptr,#_ReadHX711_j_1_174
0ECC E4        3617            clr     a
0ECD F0        3618            movx    @dptr,a
0ECE           3619   L029015?:
0ECE 90D010    3620            mov     dptr,#_ReadHX711_j_1_174
0ED1 E0        3621            movx    a,@dptr
0ED2 FA        3622            mov     r2,a
0ED3 C3        3623            clr     c
0ED4 6480      3624            xrl     a,#0x80
0ED6 9484      3625            subb    a,#0x84
0ED8 5000      3626            jnc     L029018?
0EDA 90D010    3627            mov     dptr,#_ReadHX711_j_1_174
0EDD E0        3628            movx    a,@dptr
0EDE 2401      3629            add     a,#0x01
0EE0 F0        3630            movx    @dptr,a
0EE1 8000      3631            sjmp    L029015?
0EE3           3632   L029018?:
0EE3           3633   ;        main.c:832: PD_SCK = 0;
0EE3 C2A5      3634            clr     _P2_5
0EE5           3635   ;        main.c:833: for (j = 0; j < 4; j++);
0EE5 90D010    3636            mov     dptr,#_ReadHX711_j_1_174
0EE8 E4        3637            clr     a
0EE9 F0        3638            movx    @dptr,a
0EEA           3639   L029019?:
0EEA 90D010    3640            mov     dptr,#_ReadHX711_j_1_174
0EED E0        3641            movx    a,@dptr
0EEE FA        3642            mov     r2,a
0EEF C3        3643            clr     c
0EF0 6480      3644            xrl     a,#0x80
0EF2 9484      3645            subb    a,#0x84
0EF4 5000      3646            jnc     L029022?
0EF6 90D010    3647            mov     dptr,#_ReadHX711_j_1_174
0EF9 E0        3648            movx    a,@dptr
0EFA 2401      3649            add     a,#0x01
0EFC F0        3650            movx    @dptr,a
0EFD 8000      3651            sjmp    L029019?
0EFF           3652   L029022?:
0EFF           3653   ;        main.c:834: ans = (dataa % 1000000)/10;
0EFF 90CFC0    3654            mov     dptr,#_ReadHX711_dataa_1_174
0F02 E0        3655            movx    a,@dptr
0F03 FA        3656            mov     r2,a
0F04 A3        3657            inc     dptr
0F05 E0        3658            movx    a,@dptr
0F06 FB        3659            mov     r3,a
0F07 A3        3660            inc     dptr
0F08 E0        3661            movx    a,@dptr
0F09 FC        3662            mov     r4,a
0F0A A3        3663            inc     dptr
0F0B E0        3664            movx    a,@dptr
0F0C FD        3665            mov     r5,a
0F0D 750040    3666            mov     __modulong_PARM_2,#0x40
0F10 750142    3667            mov     (__modulong_PARM_2 + 1),#0x42
0F13 75020F    3668            mov     (__modulong_PARM_2 + 2),#0x0F
0F16 750300    3669            mov     (__modulong_PARM_2 + 3),#0x00
0F19 8A82      3670            mov     dpl,r2
0F1B 8B83      3671            mov     dph,r3
0F1D 8CF0      3672            mov     b,r4
0F1F ED        3673            mov     a,r5
0F20 120000    3674            lcall   __modulong
0F23 AA82      3675            mov     r2,dpl
0F25 AB83      3676            mov     r3,dph
0F27 ACF0      3677            mov     r4,b
0F29 FD        3678            mov     r5,a
0F2A 75000A    3679            mov     __divulong_PARM_2,#0x0A
0F2D E4        3680            clr     a
0F2E F501      3681            mov     (__divulong_PARM_2 + 1),a
0F30 F502      3682            mov     (__divulong_PARM_2 + 2),a
0F32 F503      3683            mov     (__divulong_PARM_2 + 3),a
0F34 8A82      3684            mov     dpl,r2
0F36 8B83      3685            mov     dph,r3
0F38 8CF0      3686            mov     b,r4
0F3A ED        3687            mov     a,r5
0F3B           3688   ;        main.c:835: return ans;
0F3B 020000    3689            ljmp    __divulong
0F3E           3690   ;------------------------------------------------------------
0F3E           3691   ;Allocation info for local variables in function 'Timer5_ISR'
0F3E           3692   ;------------------------------------------------------------
0F3E           3693   ;------------------------------------------------------------
0F3E           3694   ;        main.c:838: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0F3E           3695   ;        -----------------------------------------
0F3E           3696   ;         function Timer5_ISR
0F3E           3697   ;        -----------------------------------------
0F3E           3698   _Timer5_ISR:
0F3E C0F0      3699            push    bits
0F40 C0E0      3700            push    acc
0F42 C0F0      3701            push    b
0F44 C082      3702            push    dpl
0F46 C083      3703            push    dph
0F48 C002      3704            push    (0+2)
0F4A C003      3705            push    (0+3)
0F4C C004      3706            push    (0+4)
0F4E C005      3707            push    (0+5)
0F50 C006      3708            push    (0+6)
0F52 C007      3709            push    (0+7)
0F54 C000      3710            push    (0+0)
0F56 C001      3711            push    (0+1)
0F58 C0D0      3712            push    psw
0F5A 75D000    3713            mov     psw,#0x00
0F5D           3714   ;        main.c:840: SFRPAGE=0x10;
0F5D 75A710    3715            mov     _SFRPAGE,#0x10
0F60           3716   ;        main.c:841: TF5H = 0; // Clear Timer5 interrupt flag
0F60 C2C7      3717            clr     _TF5H
0F62           3718   ;        main.c:842: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0F62 75D2C4    3719            mov     _TMR5RL,#0xC4
0F65 75D3FF    3720            mov     (_TMR5RL >> 8),#0xFF
0F68           3721   ;        main.c:844: fre_mea_count++;
0F68 904F20    3722            mov     dptr,#_fre_mea_count
0F6B E0        3723            movx    a,@dptr
0F6C 2401      3724            add     a,#0x01
0F6E F0        3725            movx    @dptr,a
0F6F A3        3726            inc     dptr
0F70 E0        3727            movx    a,@dptr
0F71 3400      3728            addc    a,#0x00
0F73 F0        3729            movx    @dptr,a
0F74           3730   ;        main.c:845: if(fre_mea_count == 1000){
0F74 904F20    3731            mov     dptr,#_fre_mea_count
0F77 E0        3732            movx    a,@dptr
0F78 FA        3733            mov     r2,a
0F79 A3        3734            inc     dptr
0F7A E0        3735            movx    a,@dptr
0F7B FB        3736            mov     r3,a
0F7C BAE8D8    3737            cjne    r2,#0xE8,L030004?
0F7F BB03D8    3738            cjne    r3,#0x03,L030004?
0F82           3739   ;        main.c:846: fre_mea_count = 0;
0F82 904F20    3740            mov     dptr,#_fre_mea_count
0F85 E4        3741            clr     a
0F86 F0        3742            movx    @dptr,a
0F87 A3        3743            inc     dptr
0F88 F0        3744            movx    @dptr,a
0F89           3745   ;        main.c:847: if(mea_yes){
0F89 904D10    3746            mov     dptr,#_mea_yes
0F8C E0        3747            movx    a,@dptr
0F8D FA        3748            mov     r2,a
0F8E 6000      3749            jz      L030004?
0F90           3750   ;        main.c:848: freq100 = get_freq();
0F90 120000    3751            lcall   _get_freq
0F93 AA82      3752            mov     r2,dpl
0F95 AB83      3753            mov     r3,dph
0F97 9056E0    3754            mov     dptr,#_freq100
0F9A EA        3755            mov     a,r2
0F9B F0        3756            movx    @dptr,a
0F9C A3        3757            inc     dptr
0F9D EB        3758            mov     a,r3
0F9E F0        3759            movx    @dptr,a
0F9F EB        3760            mov     a,r3
0FA0 33        3761            rlc     a
0FA1 95E0      3762            subb    a,acc
0FA3 A3        3763            inc     dptr
0FA4 F0        3764            movx    @dptr,a
0FA5 A3        3765            inc     dptr
0FA6 F0        3766            movx    @dptr,a
0FA7           3767   L030004?:
0FA7           3768   ;        main.c:852: weight_mea_count++;
0FA7 904EE0    3769            mov     dptr,#_weight_mea_count
0FAA E0        3770            movx    a,@dptr
0FAB 2401      3771            add     a,#0x01
0FAD F0        3772            movx    @dptr,a
0FAE A3        3773            inc     dptr
0FAF E0        3774            movx    a,@dptr
0FB0 3400      3775            addc    a,#0x00
0FB2 F0        3776            movx    @dptr,a
0FB3           3777   ;        main.c:853: if(weight_mea_count == 20000){
0FB3 904EE0    3778            mov     dptr,#_weight_mea_count
0FB6 E0        3779            movx    a,@dptr
0FB7 FA        3780            mov     r2,a
0FB8 A3        3781            inc     dptr
0FB9 E0        3782            movx    a,@dptr
0FBA FB        3783            mov     r3,a
0FBB BA2058    3784            cjne    r2,#0x20,L030010?
0FBE BB4E58    3785            cjne    r3,#0x4E,L030010?
0FC1           3786   ;        main.c:854: weight_mea_count = 0;
0FC1 904EE0    3787            mov     dptr,#_weight_mea_count
0FC4 E4        3788            clr     a
0FC5 F0        3789            movx    @dptr,a
0FC6 A3        3790            inc     dptr
0FC7 F0        3791            movx    @dptr,a
0FC8           3792   ;        main.c:855: if(mea_yes) distance = measure_distance();
0FC8 904D10    3793            mov     dptr,#_mea_yes
0FCB E0        3794            movx    a,@dptr
0FCC FA        3795            mov     r2,a
0FCD 6000      3796            jz      L030006?
0FCF 120000    3797            lcall   _measure_distance
0FD2 E582      3798            mov     a,dpl
0FD4 8583F0    3799            mov     b,dph
0FD7 905320    3800            mov     dptr,#_distance
0FDA F0        3801            movx    @dptr,a
0FDB A3        3802            inc     dptr
0FDC E5F0      3803            mov     a,b
0FDE F0        3804            movx    @dptr,a
0FDF           3805   L030006?:
0FDF           3806   ;        main.c:856: if(mea_yes) weight = ReadHX711();
0FDF 904D10    3807            mov     dptr,#_mea_yes
0FE2 E0        3808            movx    a,@dptr
0FE3 FA        3809            mov     r2,a
0FE4 6000      3810            jz      L030010?
0FE6 120000    3811            lcall   _ReadHX711
0FE9 E582      3812            mov     a,dpl
0FEB 8583F0    3813            mov     b,dph
0FEE 904CD0    3814            mov     dptr,#_weight
0FF1 F0        3815            movx    @dptr,a
0FF2 A3        3816            inc     dptr
0FF3 E5F0      3817            mov     a,b
0FF5 F0        3818            movx    @dptr,a
0FF6           3819   L030010?:
0FF6           3820   ;        main.c:859: pwm_counter++; 
0FF6 905220    3821            mov     dptr,#_pwm_counter
0FF9 E0        3822            movx    a,@dptr
0FFA 2401      3823            add     a,#0x01
0FFC F0        3824            movx    @dptr,a
0FFD A3        3825            inc     dptr
0FFE E0        3826            movx    a,@dptr
0FFF 3400      3827            addc    a,#0x00
1001 F0        3828            movx    @dptr,a
1002           3829   ;        main.c:860: if (pwm_counter == 100){
1002 905220    3830            mov     dptr,#_pwm_counter
1005 E0        3831            movx    a,@dptr
1006 FA        3832            mov     r2,a
1007 A3        3833            inc     dptr
1008 E0        3834            movx    a,@dptr
1009 FB        3835            mov     r3,a
100A BA64D8    3836            cjne    r2,#0x64,L030012?
100D BB00D8    3837            cjne    r3,#0x00,L030012?
1010           3838   ;        main.c:861: pwm_counter = 0; 
1010 905220    3839            mov     dptr,#_pwm_counter
1013 E4        3840            clr     a
1014 F0        3841            movx    @dptr,a
1015 A3        3842            inc     dptr
1016 F0        3843            movx    @dptr,a
1017           3844   L030012?:
1017           3845   ;        main.c:864: if (pwm_right > pwm_counter){
1017 905160    3846            mov     dptr,#_pwm_right
101A E0        3847            movx    a,@dptr
101B FA        3848            mov     r2,a
101C 905220    3849            mov     dptr,#_pwm_counter
101F E0        3850            movx    a,@dptr
1020 FB        3851            mov     r3,a
1021 A3        3852            inc     dptr
1022 E0        3853            movx    a,@dptr
1023 FC        3854            mov     r4,a
1024 7D00      3855            mov     r5,#0x00
1026 C3        3856            clr     c
1027 EB        3857            mov     a,r3
1028 9A        3858            subb    a,r2
1029 EC        3859            mov     a,r4
102A 9D        3860            subb    a,r5
102B 5000      3861            jnc     L030017?
102D           3862   ;        main.c:865: if(L_motor_dir){
102D 905120    3863            mov     dptr,#_L_motor_dir
1030 E0        3864            movx    a,@dptr
1031 FA        3865            mov     r2,a
1032 6000      3866            jz      L030014?
1034           3867   ;        main.c:866: L_bridge_1 = 1; 
1034 D2A1      3868            setb    _P2_1
1036           3869   ;        main.c:867: L_bridge_2 = 0; 
1036 C2A2      3870            clr     _P2_2
1038 8000      3871            sjmp    L030018?
103A           3872   L030014?:
103A           3873   ;        main.c:870: L_bridge_1 = 0; 
103A C2A1      3874            clr     _P2_1
103C           3875   ;        main.c:871: L_bridge_2 = 1; 
103C D2A2      3876            setb    _P2_2
103E 8000      3877            sjmp    L030018?
1040           3878   L030017?:
1040           3879   ;        main.c:875: L_bridge_1 = 0; 
1040 C2A1      3880            clr     _P2_1
1042           3881   ;        main.c:876: L_bridge_2 = 0; 
1042 C2A2      3882            clr     _P2_2
1044           3883   L030018?:
1044           3884   ;        main.c:878: if (pwm_left > pwm_counter){
1044 9051A0    3885            mov     dptr,#_pwm_left
1047 E0        3886            movx    a,@dptr
1048 FA        3887            mov     r2,a
1049 7D00      3888            mov     r5,#0x00
104B C3        3889            clr     c
104C EB        3890            mov     a,r3
104D 9A        3891            subb    a,r2
104E EC        3892            mov     a,r4
104F 9D        3893            subb    a,r5
1050 5000      3894            jnc     L030023?
1052           3895   ;        main.c:879: if (R_motor_dir){
1052 9050E0    3896            mov     dptr,#_R_motor_dir
1055 E0        3897            movx    a,@dptr
1056 FA        3898            mov     r2,a
1057 6000      3899            jz      L030020?
1059           3900   ;        main.c:880: R_bridge_1 = 1; 
1059 D2A4      3901            setb    _P2_4
105B           3902   ;        main.c:881: R_bridge_2 = 0;
105B C2A3      3903            clr     _P2_3
105D 8000      3904            sjmp    L030024?
105F           3905   L030020?:
105F           3906   ;        main.c:884: R_bridge_1 = 0; 
105F C2A4      3907            clr     _P2_4
1061           3908   ;        main.c:885: R_bridge_2 = 1;
1061 D2A3      3909            setb    _P2_3
1063 8000      3910            sjmp    L030024?
1065           3911   L030023?:
1065           3912   ;        main.c:889: R_bridge_1 = 0; 
1065 C2A4      3913            clr     _P2_4
1067           3914   ;        main.c:890: R_bridge_2 = 0; 
1067 C2A3      3915            clr     _P2_3
1069           3916   L030024?:
1069           3917   ;        main.c:893: servo_counter++;
1069 9051E0    3918            mov     dptr,#_servo_counter
106C E0        3919            movx    a,@dptr
106D 2401      3920            add     a,#0x01
106F F0        3921            movx    @dptr,a
1070 A3        3922            inc     dptr
1071 E0        3923            movx    a,@dptr
1072 3400      3924            addc    a,#0x00
1074 F0        3925            movx    @dptr,a
1075           3926   ;        main.c:894: if(servo_counter==2000)
1075 9051E0    3927            mov     dptr,#_servo_counter
1078 E0        3928            movx    a,@dptr
1079 FA        3929            mov     r2,a
107A A3        3930            inc     dptr
107B E0        3931            movx    a,@dptr
107C FB        3932            mov     r3,a
107D BAD098    3933            cjne    r2,#0xD0,L030026?
1080 BB0798    3934            cjne    r3,#0x07,L030026?
1083           3935   ;        main.c:896: servo_counter=0;
1083 9051E0    3936            mov     dptr,#_servo_counter
1086 E4        3937            clr     a
1087 F0        3938            movx    @dptr,a
1088 A3        3939            inc     dptr
1089 F0        3940            movx    @dptr,a
108A           3941   ;        main.c:897: Servo_arm=1;
108A D296      3942            setb    _P1_6
108C           3943   ;        main.c:898: Servo_base=1;
108C D297      3944            setb    _P1_7
108E           3945   L030026?:
108E           3946   ;        main.c:900: if(servo_arm>=servo_counter)
108E 905060    3947            mov     dptr,#_servo_arm
1091 E0        3948            movx    a,@dptr
1092 FA        3949            mov     r2,a
1093 9051E0    3950            mov     dptr,#_servo_counter
1096 E0        3951            movx    a,@dptr
1097 FB        3952            mov     r3,a
1098 A3        3953            inc     dptr
1099 E0        3954            movx    a,@dptr
109A FC        3955            mov     r4,a
109B 7D00      3956            mov     r5,#0x00
109D C3        3957            clr     c
109E EA        3958            mov     a,r2
109F 9B        3959            subb    a,r3
10A0 ED        3960            mov     a,r5
10A1 9C        3961            subb    a,r4
10A2 4000      3962            jc      L030028?
10A4           3963   ;        main.c:902: Servo_arm = 1;
10A4 D296      3964            setb    _P1_6
10A6 8000      3965            sjmp    L030029?
10A8           3966   L030028?:
10A8           3967   ;        main.c:906: Servo_arm = 0; 
10A8 C296      3968            clr     _P1_6
10AA           3969   L030029?:
10AA           3970   ;        main.c:908: if(servo_base>=servo_counter)
10AA 9050A0    3971            mov     dptr,#_servo_base
10AD E0        3972            movx    a,@dptr
10AE FA        3973            mov     r2,a
10AF 7D00      3974            mov     r5,#0x00
10B1 C3        3975            clr     c
10B2 EA        3976            mov     a,r2
10B3 9B        3977            subb    a,r3
10B4 ED        3978            mov     a,r5
10B5 9C        3979            subb    a,r4
10B6 4000      3980            jc      L030031?
10B8           3981   ;        main.c:910: Servo_base = 1;
10B8 D297      3982            setb    _P1_7
10BA 8000      3983            sjmp    L030033?
10BC           3984   L030031?:
10BC           3985   ;        main.c:914: Servo_base = 0; 
10BC C297      3986            clr     _P1_7
10BE           3987   L030033?:
10BE D0D0      3988            pop     psw
10C0 D001      3989            pop     (0+1)
10C2 D000      3990            pop     (0+0)
10C4 D007      3991            pop     (0+7)
10C6 D006      3992            pop     (0+6)
10C8 D005      3993            pop     (0+5)
10CA D004      3994            pop     (0+4)
10CC D003      3995            pop     (0+3)
10CE D002      3996            pop     (0+2)
10D0 D083      3997            pop     dph
10D2 D082      3998            pop     dpl
10D4 D0F0      3999            pop     b
10D6 D0E0      4000            pop     acc
10D8 D0F0      4001            pop     bits
10DA 32        4002            reti
10DB           4003   ;------------------------------------------------------------
10DB           4004   ;Allocation info for local variables in function 'servo_pick'
10DB           4005   ;------------------------------------------------------------
10DB           4006   ;------------------------------------------------------------
10DB           4007   ;        main.c:918: void servo_pick(){
10DB           4008   ;        -----------------------------------------
10DB           4009   ;         function servo_pick
10DB           4010   ;        -----------------------------------------
10DB           4011   _servo_pick:
10DB           4012   ;        main.c:919: servo_arm = 50;
10DB 905060    4013            mov     dptr,#_servo_arm
10DE 7432      4014            mov     a,#0x32
10E0 F0        4015            movx    @dptr,a
10E1           4016   ;        main.c:920: servo_base = 50;
10E1 9050A0    4017            mov     dptr,#_servo_base
10E4 7432      4018            mov     a,#0x32
10E6 F0        4019            movx    @dptr,a
10E7           4020   ;        main.c:921: waitms(500);
10E7 9001F4    4021            mov     dptr,#0x01F4
10EA 120000    4022            lcall   _waitms
10ED           4023   ;        main.c:922: for (i_loo=50; i_loo <= 210; i_loo+=20)
10ED 9052A0    4024            mov     dptr,#_i_loo
10F0 7432      4025            mov     a,#0x32
10F2 F0        4026            movx    @dptr,a
10F3 E4        4027            clr     a
10F4 A3        4028            inc     dptr
10F5 F0        4029            movx    @dptr,a
10F6           4030   L031001?:
10F6 9052A0    4031            mov     dptr,#_i_loo
10F9 E0        4032            movx    a,@dptr
10FA FA        4033            mov     r2,a
10FB A3        4034            inc     dptr
10FC E0        4035            movx    a,@dptr
10FD FB        4036            mov     r3,a
10FE C3        4037            clr     c
10FF 74D2      4038            mov     a,#0xD2
1101 9A        4039            subb    a,r2
1102 E4        4040            clr     a
1103 6480      4041            xrl     a,#0x80
1105 8BF0      4042            mov     b,r3
1107 63F080    4043            xrl     b,#0x80
110A 95F0      4044            subb    a,b
110C 4000      4045            jc      L031004?
110E           4046   ;        main.c:924: servo_base = i_loo; 
110E 9050A0    4047            mov     dptr,#_servo_base
1111 EA        4048            mov     a,r2
1112 F0        4049            movx    @dptr,a
1113           4050   ;        main.c:925: waitms(25);
1113 900019    4051            mov     dptr,#0x0019
1116 120000    4052            lcall   _waitms
1119           4053   ;        main.c:922: for (i_loo=50; i_loo <= 210; i_loo+=20)
1119 9052A0    4054            mov     dptr,#_i_loo
111C E0        4055            movx    a,@dptr
111D FA        4056            mov     r2,a
111E A3        4057            inc     dptr
111F E0        4058            movx    a,@dptr
1120 FB        4059            mov     r3,a
1121 9052A0    4060            mov     dptr,#_i_loo
1124 7414      4061            mov     a,#0x14
1126 2A        4062            add     a,r2
1127 F0        4063            movx    @dptr,a
1128 E4        4064            clr     a
1129 3B        4065            addc    a,r3
112A A3        4066            inc     dptr
112B F0        4067            movx    @dptr,a
112C 8000      4068            sjmp    L031001?
112E           4069   L031004?:
112E           4070   ;        main.c:927: waitms(500);
112E 9001F4    4071            mov     dptr,#0x01F4
1131 120000    4072            lcall   _waitms
1134           4073   ;        main.c:928: for(i_loo = 50; i_loo <= 250; i_loo+=20)
1134 9052A0    4074            mov     dptr,#_i_loo
1137 7432      4075            mov     a,#0x32
1139 F0        4076            movx    @dptr,a
113A E4        4077            clr     a
113B A3        4078            inc     dptr
113C F0        4079            movx    @dptr,a
113D           4080   L031005?:
113D 9052A0    4081            mov     dptr,#_i_loo
1140 E0        4082            movx    a,@dptr
1141 FA        4083            mov     r2,a
1142 A3        4084            inc     dptr
1143 E0        4085            movx    a,@dptr
1144 FB        4086            mov     r3,a
1145 C3        4087            clr     c
1146 74FA      4088            mov     a,#0xFA
1148 9A        4089            subb    a,r2
1149 E4        4090            clr     a
114A 6480      4091            xrl     a,#0x80
114C 8BF0      4092            mov     b,r3
114E 63F080    4093            xrl     b,#0x80
1151 95F0      4094            subb    a,b
1153 4000      4095            jc      L031008?
1155           4096   ;        main.c:930: servo_arm = i_loo; 
1155 905060    4097            mov     dptr,#_servo_arm
1158 EA        4098            mov     a,r2
1159 F0        4099            movx    @dptr,a
115A           4100   ;        main.c:931: waitms(25);
115A 900019    4101            mov     dptr,#0x0019
115D 120000    4102            lcall   _waitms
1160           4103   ;        main.c:928: for(i_loo = 50; i_loo <= 250; i_loo+=20)
1160 9052A0    4104            mov     dptr,#_i_loo
1163 E0        4105            movx    a,@dptr
1164 FA        4106            mov     r2,a
1165 A3        4107            inc     dptr
1166 E0        4108            movx    a,@dptr
1167 FB        4109            mov     r3,a
1168 9052A0    4110            mov     dptr,#_i_loo
116B 7414      4111            mov     a,#0x14
116D 2A        4112            add     a,r2
116E F0        4113            movx    @dptr,a
116F E4        4114            clr     a
1170 3B        4115            addc    a,r3
1171 A3        4116            inc     dptr
1172 F0        4117            movx    @dptr,a
1173 8000      4118            sjmp    L031005?
1175           4119   L031008?:
1175           4120   ;        main.c:934: Magnet = 1; 
1175 D295      4121            setb    _P1_5
1177           4122   ;        main.c:935: waitms(500);
1177 9001F4    4123            mov     dptr,#0x01F4
117A 120000    4124            lcall   _waitms
117D           4125   ;        main.c:936: for(i_loo = 200; i_loo >= 90; i_loo-=10){
117D 9052A0    4126            mov     dptr,#_i_loo
1180 74C8      4127            mov     a,#0xC8
1182 F0        4128            movx    @dptr,a
1183 E4        4129            clr     a
1184 A3        4130            inc     dptr
1185 F0        4131            movx    @dptr,a
1186           4132   L031009?:
1186 9052A0    4133            mov     dptr,#_i_loo
1189 E0        4134            movx    a,@dptr
118A FA        4135            mov     r2,a
118B A3        4136            inc     dptr
118C E0        4137            movx    a,@dptr
118D FB        4138            mov     r3,a
118E C3        4139            clr     c
118F EA        4140            mov     a,r2
1190 945A      4141            subb    a,#0x5A
1192 EB        4142            mov     a,r3
1193 6480      4143            xrl     a,#0x80
1195 9480      4144            subb    a,#0x80
1197 4000      4145            jc      L031012?
1199           4146   ;        main.c:937: waitms(25);
1199 900019    4147            mov     dptr,#0x0019
119C 120000    4148            lcall   _waitms
119F           4149   ;        main.c:938: servo_base = i_loo;
119F 9052A0    4150            mov     dptr,#_i_loo
11A2 E0        4151            movx    a,@dptr
11A3 FA        4152            mov     r2,a
11A4 A3        4153            inc     dptr
11A5 E0        4154            movx    a,@dptr
11A6 FB        4155            mov     r3,a
11A7 9050A0    4156            mov     dptr,#_servo_base
11AA EA        4157            mov     a,r2
11AB F0        4158            movx    @dptr,a
11AC           4159   ;        main.c:936: for(i_loo = 200; i_loo >= 90; i_loo-=10){
11AC EA        4160            mov     a,r2
11AD 24F6      4161            add     a,#0xf6
11AF FA        4162            mov     r2,a
11B0 EB        4163            mov     a,r3
11B1 34FF      4164            addc    a,#0xff
11B3 FB        4165            mov     r3,a
11B4 9052A0    4166            mov     dptr,#_i_loo
11B7 EA        4167            mov     a,r2
11B8 F0        4168            movx    @dptr,a
11B9 A3        4169            inc     dptr
11BA EB        4170            mov     a,r3
11BB F0        4171            movx    @dptr,a
11BC 8000      4172            sjmp    L031009?
11BE           4173   L031012?:
11BE           4174   ;        main.c:940: waitms(500);
11BE 9001F4    4175            mov     dptr,#0x01F4
11C1 120000    4176            lcall   _waitms
11C4           4177   ;        main.c:941: for(i_loo = 90; i_loo <= 200; i_loo+=10){
11C4 9052A0    4178            mov     dptr,#_i_loo
11C7 745A      4179            mov     a,#0x5A
11C9 F0        4180            movx    @dptr,a
11CA E4        4181            clr     a
11CB A3        4182            inc     dptr
11CC F0        4183            movx    @dptr,a
11CD           4184   L031013?:
11CD 9052A0    4185            mov     dptr,#_i_loo
11D0 E0        4186            movx    a,@dptr
11D1 FA        4187            mov     r2,a
11D2 A3        4188            inc     dptr
11D3 E0        4189            movx    a,@dptr
11D4 FB        4190            mov     r3,a
11D5 C3        4191            clr     c
11D6 74C8      4192            mov     a,#0xC8
11D8 9A        4193            subb    a,r2
11D9 E4        4194            clr     a
11DA 6480      4195            xrl     a,#0x80
11DC 8BF0      4196            mov     b,r3
11DE 63F080    4197            xrl     b,#0x80
11E1 95F0      4198            subb    a,b
11E3 4000      4199            jc      L031016?
11E5           4200   ;        main.c:942: waitms(25);
11E5 900019    4201            mov     dptr,#0x0019
11E8 120000    4202            lcall   _waitms
11EB           4203   ;        main.c:943: servo_base = i_loo;
11EB 9052A0    4204            mov     dptr,#_i_loo
11EE E0        4205            movx    a,@dptr
11EF FA        4206            mov     r2,a
11F0 A3        4207            inc     dptr
11F1 E0        4208            movx    a,@dptr
11F2 FB        4209            mov     r3,a
11F3 9050A0    4210            mov     dptr,#_servo_base
11F6 EA        4211            mov     a,r2
11F7 F0        4212            movx    @dptr,a
11F8           4213   ;        main.c:941: for(i_loo = 90; i_loo <= 200; i_loo+=10){
11F8 9052A0    4214            mov     dptr,#_i_loo
11FB 740A      4215            mov     a,#0x0A
11FD 2A        4216            add     a,r2
11FE F0        4217            movx    @dptr,a
11FF E4        4218            clr     a
1200 3B        4219            addc    a,r3
1201 A3        4220            inc     dptr
1202 F0        4221            movx    @dptr,a
1203 8000      4222            sjmp    L031013?
1205           4223   L031016?:
1205           4224   ;        main.c:945: waitms(500);
1205 9001F4    4225            mov     dptr,#0x01F4
1208 120000    4226            lcall   _waitms
120B           4227   ;        main.c:946: for(i_loo = 240; i_loo >= 100; i_loo-= 5){
120B 9052A0    4228            mov     dptr,#_i_loo
120E 74F0      4229            mov     a,#0xF0
1210 F0        4230            movx    @dptr,a
1211 E4        4231            clr     a
1212 A3        4232            inc     dptr
1213 F0        4233            movx    @dptr,a
1214           4234   L031017?:
1214 9052A0    4235            mov     dptr,#_i_loo
1217 E0        4236            movx    a,@dptr
1218 FA        4237            mov     r2,a
1219 A3        4238            inc     dptr
121A E0        4239            movx    a,@dptr
121B FB        4240            mov     r3,a
121C C3        4241            clr     c
121D EA        4242            mov     a,r2
121E 9464      4243            subb    a,#0x64
1220 EB        4244            mov     a,r3
1221 6480      4245            xrl     a,#0x80
1223 9480      4246            subb    a,#0x80
1225 4000      4247            jc      L031020?
1227           4248   ;        main.c:947: waitms(25);
1227 900019    4249            mov     dptr,#0x0019
122A 120000    4250            lcall   _waitms
122D           4251   ;        main.c:948: servo_arm = i_loo;
122D 9052A0    4252            mov     dptr,#_i_loo
1230 E0        4253            movx    a,@dptr
1231 FA        4254            mov     r2,a
1232 A3        4255            inc     dptr
1233 E0        4256            movx    a,@dptr
1234 FB        4257            mov     r3,a
1235 905060    4258            mov     dptr,#_servo_arm
1238 EA        4259            mov     a,r2
1239 F0        4260            movx    @dptr,a
123A           4261   ;        main.c:946: for(i_loo = 240; i_loo >= 100; i_loo-= 5){
123A EA        4262            mov     a,r2
123B 24FB      4263            add     a,#0xfb
123D FA        4264            mov     r2,a
123E EB        4265            mov     a,r3
123F 34FF      4266            addc    a,#0xff
1241 FB        4267            mov     r3,a
1242 9052A0    4268            mov     dptr,#_i_loo
1245 EA        4269            mov     a,r2
1246 F0        4270            movx    @dptr,a
1247 A3        4271            inc     dptr
1248 EB        4272            mov     a,r3
1249 F0        4273            movx    @dptr,a
124A 8000      4274            sjmp    L031017?
124C           4275   L031020?:
124C           4276   ;        main.c:950: waitms(500);
124C 9001F4    4277            mov     dptr,#0x01F4
124F 120000    4278            lcall   _waitms
1252           4279   ;        main.c:951: for(i_loo = 200; i_loo >= 80; i_loo-=5){
1252 9052A0    4280            mov     dptr,#_i_loo
1255 74C8      4281            mov     a,#0xC8
1257 F0        4282            movx    @dptr,a
1258 E4        4283            clr     a
1259 A3        4284            inc     dptr
125A F0        4285            movx    @dptr,a
125B           4286   L031021?:
125B 9052A0    4287            mov     dptr,#_i_loo
125E E0        4288            movx    a,@dptr
125F FA        4289            mov     r2,a
1260 A3        4290            inc     dptr
1261 E0        4291            movx    a,@dptr
1262 FB        4292            mov     r3,a
1263 C3        4293            clr     c
1264 EA        4294            mov     a,r2
1265 9450      4295            subb    a,#0x50
1267 EB        4296            mov     a,r3
1268 6480      4297            xrl     a,#0x80
126A 9480      4298            subb    a,#0x80
126C 4000      4299            jc      L031024?
126E           4300   ;        main.c:952: waitms(25);
126E 900019    4301            mov     dptr,#0x0019
1271 120000    4302            lcall   _waitms
1274           4303   ;        main.c:953: servo_base = i_loo;
1274 9052A0    4304            mov     dptr,#_i_loo
1277 E0        4305            movx    a,@dptr
1278 FA        4306            mov     r2,a
1279 A3        4307            inc     dptr
127A E0        4308            movx    a,@dptr
127B FB        4309            mov     r3,a
127C 9050A0    4310            mov     dptr,#_servo_base
127F EA        4311            mov     a,r2
1280 F0        4312            movx    @dptr,a
1281           4313   ;        main.c:951: for(i_loo = 200; i_loo >= 80; i_loo-=5){
1281 EA        4314            mov     a,r2
1282 24FB      4315            add     a,#0xfb
1284 FA        4316            mov     r2,a
1285 EB        4317            mov     a,r3
1286 34FF      4318            addc    a,#0xff
1288 FB        4319            mov     r3,a
1289 9052A0    4320            mov     dptr,#_i_loo
128C EA        4321            mov     a,r2
128D F0        4322            movx    @dptr,a
128E A3        4323            inc     dptr
128F EB        4324            mov     a,r3
1290 F0        4325            movx    @dptr,a
1291 8000      4326            sjmp    L031021?
1293           4327   L031024?:
1293           4328   ;        main.c:955: waitms(500);
1293 9001F4    4329            mov     dptr,#0x01F4
1296 120000    4330            lcall   _waitms
1299           4331   ;        main.c:956: Magnet = 0;
1299 C295      4332            clr     _P1_5
129B           4333   ;        main.c:957: waitms(500);
129B 9001F4    4334            mov     dptr,#0x01F4
129E 120000    4335            lcall   _waitms
12A1           4336   ;        main.c:958: for (i_loo = 100; i_loo >=40 ; i_loo-=10){
12A1 9052A0    4337            mov     dptr,#_i_loo
12A4 7464      4338            mov     a,#0x64
12A6 F0        4339            movx    @dptr,a
12A7 E4        4340            clr     a
12A8 A3        4341            inc     dptr
12A9 F0        4342            movx    @dptr,a
12AA           4343   L031025?:
12AA 9052A0    4344            mov     dptr,#_i_loo
12AD E0        4345            movx    a,@dptr
12AE FA        4346            mov     r2,a
12AF A3        4347            inc     dptr
12B0 E0        4348            movx    a,@dptr
12B1 FB        4349            mov     r3,a
12B2 C3        4350            clr     c
12B3 EA        4351            mov     a,r2
12B4 9428      4352            subb    a,#0x28
12B6 EB        4353            mov     a,r3
12B7 6480      4354            xrl     a,#0x80
12B9 9480      4355            subb    a,#0x80
12BB 4000      4356            jc      L031028?
12BD           4357   ;        main.c:959: servo_arm = i_loo; 
12BD 905060    4358            mov     dptr,#_servo_arm
12C0 EA        4359            mov     a,r2
12C1 F0        4360            movx    @dptr,a
12C2           4361   ;        main.c:960: waitms(25);
12C2 900019    4362            mov     dptr,#0x0019
12C5 120000    4363            lcall   _waitms
12C8           4364   ;        main.c:958: for (i_loo = 100; i_loo >=40 ; i_loo-=10){
12C8 9052A0    4365            mov     dptr,#_i_loo
12CB E0        4366            movx    a,@dptr
12CC FA        4367            mov     r2,a
12CD A3        4368            inc     dptr
12CE E0        4369            movx    a,@dptr
12CF FB        4370            mov     r3,a
12D0 EA        4371            mov     a,r2
12D1 24F6      4372            add     a,#0xf6
12D3 FA        4373            mov     r2,a
12D4 EB        4374            mov     a,r3
12D5 34FF      4375            addc    a,#0xff
12D7 FB        4376            mov     r3,a
12D8 9052A0    4377            mov     dptr,#_i_loo
12DB EA        4378            mov     a,r2
12DC F0        4379            movx    @dptr,a
12DD A3        4380            inc     dptr
12DE EB        4381            mov     a,r3
12DF F0        4382            movx    @dptr,a
12E0 8000      4383            sjmp    L031025?
12E2           4384   L031028?:
12E2           4385   ;        main.c:962: waitms(500);
12E2 9001F4    4386            mov     dptr,#0x01F4
12E5 120000    4387            lcall   _waitms
12E8           4388   ;        main.c:963: for (i_loo = 80; i_loo >= 40; i_loo-=10){
12E8 9052A0    4389            mov     dptr,#_i_loo
12EB 7450      4390            mov     a,#0x50
12ED F0        4391            movx    @dptr,a
12EE E4        4392            clr     a
12EF A3        4393            inc     dptr
12F0 F0        4394            movx    @dptr,a
12F1           4395   L031029?:
12F1 9052A0    4396            mov     dptr,#_i_loo
12F4 E0        4397            movx    a,@dptr
12F5 FA        4398            mov     r2,a
12F6 A3        4399            inc     dptr
12F7 E0        4400            movx    a,@dptr
12F8 FB        4401            mov     r3,a
12F9 C3        4402            clr     c
12FA EA        4403            mov     a,r2
12FB 9428      4404            subb    a,#0x28
12FD EB        4405            mov     a,r3
12FE 6480      4406            xrl     a,#0x80
1300 9480      4407            subb    a,#0x80
1302 4000      4408            jc      L031032?
1304           4409   ;        main.c:964: servo_base = i_loo; 
1304 9050A0    4410            mov     dptr,#_servo_base
1307 EA        4411            mov     a,r2
1308 F0        4412            movx    @dptr,a
1309           4413   ;        main.c:965: waitms(25);
1309 900019    4414            mov     dptr,#0x0019
130C 120000    4415            lcall   _waitms
130F           4416   ;        main.c:963: for (i_loo = 80; i_loo >= 40; i_loo-=10){
130F 9052A0    4417            mov     dptr,#_i_loo
1312 E0        4418            movx    a,@dptr
1313 FA        4419            mov     r2,a
1314 A3        4420            inc     dptr
1315 E0        4421            movx    a,@dptr
1316 FB        4422            mov     r3,a
1317 EA        4423            mov     a,r2
1318 24F6      4424            add     a,#0xf6
131A FA        4425            mov     r2,a
131B EB        4426            mov     a,r3
131C 34FF      4427            addc    a,#0xff
131E FB        4428            mov     r3,a
131F 9052A0    4429            mov     dptr,#_i_loo
1322 EA        4430            mov     a,r2
1323 F0        4431            movx    @dptr,a
1324 A3        4432            inc     dptr
1325 EB        4433            mov     a,r3
1326 F0        4434            movx    @dptr,a
1327 8000      4435            sjmp    L031029?
1329           4436   L031032?:
1329           4437   ;        main.c:967: return;
1329 22        4438            ret
132A           4439   ;------------------------------------------------------------
132A           4440   ;Allocation info for local variables in function 'servo_push'
132A           4441   ;------------------------------------------------------------
132A           4442   ;------------------------------------------------------------
132A           4443   ;        main.c:970: void servo_push(void)
132A           4444   ;        -----------------------------------------
132A           4445   ;         function servo_push
132A           4446   ;        -----------------------------------------
132A           4447   _servo_push:
132A           4448   ;        main.c:972: servo_arm = 50;
132A 905060    4449            mov     dptr,#_servo_arm
132D 7432      4450            mov     a,#0x32
132F F0        4451            movx    @dptr,a
1330           4452   ;        main.c:973: servo_base = 50;
1330 9050A0    4453            mov     dptr,#_servo_base
1333 7432      4454            mov     a,#0x32
1335 F0        4455            movx    @dptr,a
1336           4456   ;        main.c:974: waitms(500);
1336 9001F4    4457            mov     dptr,#0x01F4
1339 120000    4458            lcall   _waitms
133C           4459   ;        main.c:975: for (i_loo=50; i_loo <= 150; i_loo+=10)
133C 9052A0    4460            mov     dptr,#_i_loo
133F 7432      4461            mov     a,#0x32
1341 F0        4462            movx    @dptr,a
1342 E4        4463            clr     a
1343 A3        4464            inc     dptr
1344 F0        4465            movx    @dptr,a
1345           4466   L032001?:
1345 9052A0    4467            mov     dptr,#_i_loo
1348 E0        4468            movx    a,@dptr
1349 FA        4469            mov     r2,a
134A A3        4470            inc     dptr
134B E0        4471            movx    a,@dptr
134C FB        4472            mov     r3,a
134D C3        4473            clr     c
134E 7496      4474            mov     a,#0x96
1350 9A        4475            subb    a,r2
1351 E4        4476            clr     a
1352 6480      4477            xrl     a,#0x80
1354 8BF0      4478            mov     b,r3
1356 63F080    4479            xrl     b,#0x80
1359 95F0      4480            subb    a,b
135B 4000      4481            jc      L032004?
135D           4482   ;        main.c:977: servo_base = i_loo; 
135D 9050A0    4483            mov     dptr,#_servo_base
1360 EA        4484            mov     a,r2
1361 F0        4485            movx    @dptr,a
1362           4486   ;        main.c:978: waitms(25);
1362 900019    4487            mov     dptr,#0x0019
1365 120000    4488            lcall   _waitms
1368           4489   ;        main.c:975: for (i_loo=50; i_loo <= 150; i_loo+=10)
1368 9052A0    4490            mov     dptr,#_i_loo
136B E0        4491            movx    a,@dptr
136C FA        4492            mov     r2,a
136D A3        4493            inc     dptr
136E E0        4494            movx    a,@dptr
136F FB        4495            mov     r3,a
1370 9052A0    4496            mov     dptr,#_i_loo
1373 740A      4497            mov     a,#0x0A
1375 2A        4498            add     a,r2
1376 F0        4499            movx    @dptr,a
1377 E4        4500            clr     a
1378 3B        4501            addc    a,r3
1379 A3        4502            inc     dptr
137A F0        4503            movx    @dptr,a
137B 8000      4504            sjmp    L032001?
137D           4505   L032004?:
137D           4506   ;        main.c:980: waitms(200);
137D 9000C8    4507            mov     dptr,#0x00C8
1380 120000    4508            lcall   _waitms
1383           4509   ;        main.c:981: for (i_loo=50; i_loo <= 150; i_loo+=10)
1383 9052A0    4510            mov     dptr,#_i_loo
1386 7432      4511            mov     a,#0x32
1388 F0        4512            movx    @dptr,a
1389 E4        4513            clr     a
138A A3        4514            inc     dptr
138B F0        4515            movx    @dptr,a
138C           4516   L032005?:
138C 9052A0    4517            mov     dptr,#_i_loo
138F E0        4518            movx    a,@dptr
1390 FA        4519            mov     r2,a
1391 A3        4520            inc     dptr
1392 E0        4521            movx    a,@dptr
1393 FB        4522            mov     r3,a
1394 C3        4523            clr     c
1395 7496      4524            mov     a,#0x96
1397 9A        4525            subb    a,r2
1398 E4        4526            clr     a
1399 6480      4527            xrl     a,#0x80
139B 8BF0      4528            mov     b,r3
139D 63F080    4529            xrl     b,#0x80
13A0 95F0      4530            subb    a,b
13A2 4000      4531            jc      L032008?
13A4           4532   ;        main.c:983: servo_arm = i_loo; 
13A4 905060    4533            mov     dptr,#_servo_arm
13A7 EA        4534            mov     a,r2
13A8 F0        4535            movx    @dptr,a
13A9           4536   ;        main.c:984: waitms(25);
13A9 900019    4537            mov     dptr,#0x0019
13AC 120000    4538            lcall   _waitms
13AF           4539   ;        main.c:981: for (i_loo=50; i_loo <= 150; i_loo+=10)
13AF 9052A0    4540            mov     dptr,#_i_loo
13B2 E0        4541            movx    a,@dptr
13B3 FA        4542            mov     r2,a
13B4 A3        4543            inc     dptr
13B5 E0        4544            movx    a,@dptr
13B6 FB        4545            mov     r3,a
13B7 9052A0    4546            mov     dptr,#_i_loo
13BA 740A      4547            mov     a,#0x0A
13BC 2A        4548            add     a,r2
13BD F0        4549            movx    @dptr,a
13BE E4        4550            clr     a
13BF 3B        4551            addc    a,r3
13C0 A3        4552            inc     dptr
13C1 F0        4553            movx    @dptr,a
13C2 8000      4554            sjmp    L032005?
13C4           4555   L032008?:
13C4           4556   ;        main.c:986: waitms(200);
13C4 9000C8    4557            mov     dptr,#0x00C8
13C7 120000    4558            lcall   _waitms
13CA           4559   ;        main.c:987: for (i_loo=150; i_loo <= 250; i_loo+=10)
13CA 9052A0    4560            mov     dptr,#_i_loo
13CD 7496      4561            mov     a,#0x96
13CF F0        4562            movx    @dptr,a
13D0 E4        4563            clr     a
13D1 A3        4564            inc     dptr
13D2 F0        4565            movx    @dptr,a
13D3           4566   L032009?:
13D3 9052A0    4567            mov     dptr,#_i_loo
13D6 E0        4568            movx    a,@dptr
13D7 FA        4569            mov     r2,a
13D8 A3        4570            inc     dptr
13D9 E0        4571            movx    a,@dptr
13DA FB        4572            mov     r3,a
13DB C3        4573            clr     c
13DC 74FA      4574            mov     a,#0xFA
13DE 9A        4575            subb    a,r2
13DF E4        4576            clr     a
13E0 6480      4577            xrl     a,#0x80
13E2 8BF0      4578            mov     b,r3
13E4 63F080    4579            xrl     b,#0x80
13E7 95F0      4580            subb    a,b
13E9 4000      4581            jc      L032012?
13EB           4582   ;        main.c:989: servo_base = i_loo; 
13EB 9050A0    4583            mov     dptr,#_servo_base
13EE EA        4584            mov     a,r2
13EF F0        4585            movx    @dptr,a
13F0           4586   ;        main.c:990: waitms(25);
13F0 900019    4587            mov     dptr,#0x0019
13F3 120000    4588            lcall   _waitms
13F6           4589   ;        main.c:987: for (i_loo=150; i_loo <= 250; i_loo+=10)
13F6 9052A0    4590            mov     dptr,#_i_loo
13F9 E0        4591            movx    a,@dptr
13FA FA        4592            mov     r2,a
13FB A3        4593            inc     dptr
13FC E0        4594            movx    a,@dptr
13FD FB        4595            mov     r3,a
13FE 9052A0    4596            mov     dptr,#_i_loo
1401 740A      4597            mov     a,#0x0A
1403 2A        4598            add     a,r2
1404 F0        4599            movx    @dptr,a
1405 E4        4600            clr     a
1406 3B        4601            addc    a,r3
1407 A3        4602            inc     dptr
1408 F0        4603            movx    @dptr,a
1409 8000      4604            sjmp    L032009?
140B           4605   L032012?:
140B           4606   ;        main.c:992: waitms(200);
140B 9000C8    4607            mov     dptr,#0x00C8
140E 120000    4608            lcall   _waitms
1411           4609   ;        main.c:993: for (i_loo=250; i_loo >= 150; i_loo-=10)
1411 9052A0    4610            mov     dptr,#_i_loo
1414 74FA      4611            mov     a,#0xFA
1416 F0        4612            movx    @dptr,a
1417 E4        4613            clr     a
1418 A3        4614            inc     dptr
1419 F0        4615            movx    @dptr,a
141A           4616   L032013?:
141A 9052A0    4617            mov     dptr,#_i_loo
141D E0        4618            movx    a,@dptr
141E FA        4619            mov     r2,a
141F A3        4620            inc     dptr
1420 E0        4621            movx    a,@dptr
1421 FB        4622            mov     r3,a
1422 C3        4623            clr     c
1423 EA        4624            mov     a,r2
1424 9496      4625            subb    a,#0x96
1426 EB        4626            mov     a,r3
1427 6480      4627            xrl     a,#0x80
1429 9480      4628            subb    a,#0x80
142B 4000      4629            jc      L032016?
142D           4630   ;        main.c:995: servo_base = i_loo; 
142D 9050A0    4631            mov     dptr,#_servo_base
1430 EA        4632            mov     a,r2
1431 F0        4633            movx    @dptr,a
1432           4634   ;        main.c:996: waitms(25);
1432 900019    4635            mov     dptr,#0x0019
1435 120000    4636            lcall   _waitms
1438           4637   ;        main.c:993: for (i_loo=250; i_loo >= 150; i_loo-=10)
1438 9052A0    4638            mov     dptr,#_i_loo
143B E0        4639            movx    a,@dptr
143C FA        4640            mov     r2,a
143D A3        4641            inc     dptr
143E E0        4642            movx    a,@dptr
143F FB        4643            mov     r3,a
1440 EA        4644            mov     a,r2
1441 24F6      4645            add     a,#0xf6
1443 FA        4646            mov     r2,a
1444 EB        4647            mov     a,r3
1445 34FF      4648            addc    a,#0xff
1447 FB        4649            mov     r3,a
1448 9052A0    4650            mov     dptr,#_i_loo
144B EA        4651            mov     a,r2
144C F0        4652            movx    @dptr,a
144D A3        4653            inc     dptr
144E EB        4654            mov     a,r3
144F F0        4655            movx    @dptr,a
1450 8000      4656            sjmp    L032013?
1452           4657   L032016?:
1452           4658   ;        main.c:998: waitms(200);
1452 9000C8    4659            mov     dptr,#0x00C8
1455 120000    4660            lcall   _waitms
1458           4661   ;        main.c:999: for (i_loo=150; i_loo >= 50; i_loo-=10)
1458 9052A0    4662            mov     dptr,#_i_loo
145B 7496      4663            mov     a,#0x96
145D F0        4664            movx    @dptr,a
145E E4        4665            clr     a
145F A3        4666            inc     dptr
1460 F0        4667            movx    @dptr,a
1461           4668   L032017?:
1461 9052A0    4669            mov     dptr,#_i_loo
1464 E0        4670            movx    a,@dptr
1465 FA        4671            mov     r2,a
1466 A3        4672            inc     dptr
1467 E0        4673            movx    a,@dptr
1468 FB        4674            mov     r3,a
1469 C3        4675            clr     c
146A EA        4676            mov     a,r2
146B 9432      4677            subb    a,#0x32
146D EB        4678            mov     a,r3
146E 6480      4679            xrl     a,#0x80
1470 9480      4680            subb    a,#0x80
1472 4000      4681            jc      L032020?
1474           4682   ;        main.c:1001: servo_arm = i_loo; 
1474 905060    4683            mov     dptr,#_servo_arm
1477 EA        4684            mov     a,r2
1478 F0        4685            movx    @dptr,a
1479           4686   ;        main.c:1002: waitms(25);
1479 900019    4687            mov     dptr,#0x0019
147C 120000    4688            lcall   _waitms
147F           4689   ;        main.c:999: for (i_loo=150; i_loo >= 50; i_loo-=10)
147F 9052A0    4690            mov     dptr,#_i_loo
1482 E0        4691            movx    a,@dptr
1483 FA        4692            mov     r2,a
1484 A3        4693            inc     dptr
1485 E0        4694            movx    a,@dptr
1486 FB        4695            mov     r3,a
1487 EA        4696            mov     a,r2
1488 24F6      4697            add     a,#0xf6
148A FA        4698            mov     r2,a
148B EB        4699            mov     a,r3
148C 34FF      4700            addc    a,#0xff
148E FB        4701            mov     r3,a
148F 9052A0    4702            mov     dptr,#_i_loo
1492 EA        4703            mov     a,r2
1493 F0        4704            movx    @dptr,a
1494 A3        4705            inc     dptr
1495 EB        4706            mov     a,r3
1496 F0        4707            movx    @dptr,a
1497 8000      4708            sjmp    L032017?
1499           4709   L032020?:
1499           4710   ;        main.c:1004: waitms(200);
1499 9000C8    4711            mov     dptr,#0x00C8
149C 120000    4712            lcall   _waitms
149F           4713   ;        main.c:1005: for (i_loo=150; i_loo >= 50; i_loo-=10)
149F 9052A0    4714            mov     dptr,#_i_loo
14A2 7496      4715            mov     a,#0x96
14A4 F0        4716            movx    @dptr,a
14A5 E4        4717            clr     a
14A6 A3        4718            inc     dptr
14A7 F0        4719            movx    @dptr,a
14A8           4720   L032021?:
14A8 9052A0    4721            mov     dptr,#_i_loo
14AB E0        4722            movx    a,@dptr
14AC FA        4723            mov     r2,a
14AD A3        4724            inc     dptr
14AE E0        4725            movx    a,@dptr
14AF FB        4726            mov     r3,a
14B0 C3        4727            clr     c
14B1 EA        4728            mov     a,r2
14B2 9432      4729            subb    a,#0x32
14B4 EB        4730            mov     a,r3
14B5 6480      4731            xrl     a,#0x80
14B7 9480      4732            subb    a,#0x80
14B9 4000      4733            jc      L032024?
14BB           4734   ;        main.c:1007: servo_base = i_loo; 
14BB 9050A0    4735            mov     dptr,#_servo_base
14BE EA        4736            mov     a,r2
14BF F0        4737            movx    @dptr,a
14C0           4738   ;        main.c:1008: waitms(25);
14C0 900019    4739            mov     dptr,#0x0019
14C3 120000    4740            lcall   _waitms
14C6           4741   ;        main.c:1005: for (i_loo=150; i_loo >= 50; i_loo-=10)
14C6 9052A0    4742            mov     dptr,#_i_loo
14C9 E0        4743            movx    a,@dptr
14CA FA        4744            mov     r2,a
14CB A3        4745            inc     dptr
14CC E0        4746            movx    a,@dptr
14CD FB        4747            mov     r3,a
14CE EA        4748            mov     a,r2
14CF 24F6      4749            add     a,#0xf6
14D1 FA        4750            mov     r2,a
14D2 EB        4751            mov     a,r3
14D3 34FF      4752            addc    a,#0xff
14D5 FB        4753            mov     r3,a
14D6 9052A0    4754            mov     dptr,#_i_loo
14D9 EA        4755            mov     a,r2
14DA F0        4756            movx    @dptr,a
14DB A3        4757            inc     dptr
14DC EB        4758            mov     a,r3
14DD F0        4759            movx    @dptr,a
14DE 8000      4760            sjmp    L032021?
14E0           4761   L032024?:
14E0           4762   ;        main.c:1010: waitms(200);
14E0 9000C8    4763            mov     dptr,#0x00C8
14E3           4764   ;        main.c:1011: return; 
14E3 020000    4765            ljmp    _waitms
14E6           4766   ;------------------------------------------------------------
14E6           4767   ;Allocation info for local variables in function 'Move_forward_ms'
14E6           4768   ;------------------------------------------------------------
14E6           4769   ;ms                        Allocated to registers r2 r3 
14E6           4770   ;------------------------------------------------------------
14E6           4771   ;        main.c:1014: void Move_forward_ms(int ms){
14E6           4772   ;        -----------------------------------------
14E6           4773   ;         function Move_forward_ms
14E6           4774   ;        -----------------------------------------
14E6           4775   _Move_forward_ms:
14E6 AA82      4776            mov     r2,dpl
14E8 AB83      4777            mov     r3,dph
14EA           4778   ;        main.c:1016: L_motor_dir = 0;
14EA 905120    4779            mov     dptr,#_L_motor_dir
14ED           4780   ;        main.c:1017: R_motor_dir = 0;
14ED E4        4781            clr     a
14EE F0        4782            movx    @dptr,a
14EF 9050E0    4783            mov     dptr,#_R_motor_dir
14F2 F0        4784            movx    @dptr,a
14F3           4785   ;        main.c:1019: pwm_left = 50;
14F3 9051A0    4786            mov     dptr,#_pwm_left
14F6 7432      4787            mov     a,#0x32
14F8 F0        4788            movx    @dptr,a
14F9           4789   ;        main.c:1020: pwm_right = 50;
14F9 905160    4790            mov     dptr,#_pwm_right
14FC 7432      4791            mov     a,#0x32
14FE F0        4792            movx    @dptr,a
14FF           4793   ;        main.c:1022: waitms(ms);
14FF 8A82      4794            mov     dpl,r2
1501 8B83      4795            mov     dph,r3
1503 120000    4796            lcall   _waitms
1506           4797   ;        main.c:1024: L_motor_dir = 0;
1506 905120    4798            mov     dptr,#_L_motor_dir
1509           4799   ;        main.c:1025: R_motor_dir = 0;
1509           4800   ;        main.c:1026: pwm_left = 0;
1509           4801   ;        main.c:1027: pwm_right = 0;
1509 E4        4802            clr     a
150A F0        4803            movx    @dptr,a
150B 9050E0    4804            mov     dptr,#_R_motor_dir
150E F0        4805            movx    @dptr,a
150F 9051A0    4806            mov     dptr,#_pwm_left
1512 F0        4807            movx    @dptr,a
1513 905160    4808            mov     dptr,#_pwm_right
1516 F0        4809            movx    @dptr,a
1517           4810   ;        main.c:1028: return;
1517 22        4811            ret
1518           4812   ;------------------------------------------------------------
1518           4813   ;Allocation info for local variables in function 'servo_moveaway'
1518           4814   ;------------------------------------------------------------
1518           4815   ;------------------------------------------------------------
1518           4816   ;        main.c:1031: void servo_moveaway(void)
1518           4817   ;        -----------------------------------------
1518           4818   ;         function servo_moveaway
1518           4819   ;        -----------------------------------------
1518           4820   _servo_moveaway:
1518           4821   ;        main.c:1033: servo_push();
1518 120000    4822            lcall   _servo_push
151B           4823   ;        main.c:1034: waitms(100);
151B 900064    4824            mov     dptr,#0x0064
151E 120000    4825            lcall   _waitms
1521           4826   ;        main.c:1035: Move_forward_ms(500);
1521 9001F4    4827            mov     dptr,#0x01F4
1524 120000    4828            lcall   _Move_forward_ms
1527           4829   ;        main.c:1036: servo_push();
1527           4830   ;        main.c:1037: return; 
1527 020000    4831            ljmp    _servo_push
152A           4832   ;------------------------------------------------------------
152A           4833   ;Allocation info for local variables in function 'check_bound'
152A           4834   ;------------------------------------------------------------
152A           4835   ;d2                        Allocated with name '_check_bound_PARM_2'
152A           4836   ;d1                        Allocated to registers r2 r3 
152A           4837   ;------------------------------------------------------------
152A           4838   ;        main.c:1040: int check_bound(int d1, int d2){
152A           4839   ;        -----------------------------------------
152A           4840   ;         function check_bound
152A           4841   ;        -----------------------------------------
152A           4842   _check_bound:
152A AA82      4843            mov     r2,dpl
152C AB83      4844            mov     r3,dph
152E           4845   ;        main.c:1041: if(d1>10000||d2>10000)     return 1;
152E C3        4846            clr     c
152F 7410      4847            mov     a,#0x10
1531 9A        4848            subb    a,r2
1532 74A7      4849            mov     a,#(0x27 ^ 0x80)
1534 8BF0      4850            mov     b,r3
1536 63F080    4851            xrl     b,#0x80
1539 95F0      4852            subb    a,b
153B 4000      4853            jc      L035001?
153D 7410      4854            mov     a,#0x10
153F 9590      4855            subb    a,_check_bound_PARM_2
1541 74A7      4856            mov     a,#(0x27 ^ 0x80)
1543 8591F0    4857            mov     b,(_check_bound_PARM_2 + 1)
1546 63F080    4858            xrl     b,#0x80
1549 95F0      4859            subb    a,b
154B 5000      4860            jnc     L035002?
154D           4861   L035001?:
154D 900001    4862            mov     dptr,#0x0001
1550           4863   ;        main.c:1042: else return 0;
1550 22        4864            ret
1551           4865   L035002?:
1551 900000    4866            mov     dptr,#0x0000
1554 22        4867            ret
1555           4868   ;------------------------------------------------------------
1555           4869   ;Allocation info for local variables in function 'Init_all'
1555           4870   ;------------------------------------------------------------
1555           4871   ;------------------------------------------------------------
1555           4872   ;        main.c:1045: void Init_all(){
1555           4873   ;        -----------------------------------------
1555           4874   ;         function Init_all
1555           4875   ;        -----------------------------------------
1555           4876   _Init_all:
1555           4877   ;        main.c:1047: Set_Pin_Output(0x24);
1555 758224    4878            mov     dpl,#0x24
1558 120000    4879            lcall   _Set_Pin_Output
155B           4880   ;        main.c:1048: Set_Pin_Output(0x23);
155B 758223    4881            mov     dpl,#0x23
155E 120000    4882            lcall   _Set_Pin_Output
1561           4883   ;        main.c:1049: Set_Pin_Output(0x22);
1561 758222    4884            mov     dpl,#0x22
1564 120000    4885            lcall   _Set_Pin_Output
1567           4886   ;        main.c:1050: Set_Pin_Output(0x21);
1567 758221    4887            mov     dpl,#0x21
156A 120000    4888            lcall   _Set_Pin_Output
156D           4889   ;        main.c:1051: Set_Pin_Output(0x17);
156D 758217    4890            mov     dpl,#0x17
1570 120000    4891            lcall   _Set_Pin_Output
1573           4892   ;        main.c:1052: Set_Pin_Output(0x16);
1573 758216    4893            mov     dpl,#0x16
1576 120000    4894            lcall   _Set_Pin_Output
1579           4895   ;        main.c:1053: Set_Pin_Output(0x15);
1579 758215    4896            mov     dpl,#0x15
157C 120000    4897            lcall   _Set_Pin_Output
157F           4898   ;        main.c:1054: Set_Pin_Output(0x10); // CS
157F 758210    4899            mov     dpl,#0x10
1582 120000    4900            lcall   _Set_Pin_Output
1585           4901   ;        main.c:1056: Set_Pin_Input(0x30);
1585 758230    4902            mov     dpl,#0x30
1588 120000    4903            lcall   _Set_Pin_Input
158B           4904   ;        main.c:1057: Set_Pin_Output(0x25); // CLK for Load
158B 758225    4905            mov     dpl,#0x25
158E 120000    4906            lcall   _Set_Pin_Output
1591           4907   ;        main.c:1058: Set_Pin_Input(0x26);
1591 758226    4908            mov     dpl,#0x26
1594 120000    4909            lcall   _Set_Pin_Input
1597           4910   ;        main.c:1060: Set_Pin_Input(0x31);   //ECHO pin
1597 758231    4911            mov     dpl,#0x31
159A 120000    4912            lcall   _Set_Pin_Input
159D           4913   ;        main.c:1061: Set_Pin_Output(0x00);  // TRIGGER pin
159D 758200    4914            mov     dpl,#0x00
15A0 120000    4915            lcall   _Set_Pin_Output
15A3           4916   ;        main.c:1063: InitPinADC(1,3);
15A3 75E003    4917            mov     _InitPinADC_PARM_2,#0x03
15A6 758201    4918            mov     dpl,#0x01
15A9 120000    4919            lcall   _InitPinADC
15AC           4920   ;        main.c:1064: InitPinADC(1,4);
15AC 75E004    4921            mov     _InitPinADC_PARM_2,#0x04
15AF 758201    4922            mov     dpl,#0x01
15B2 120000    4923            lcall   _InitPinADC
15B5           4924   ;        main.c:1065: InitADC();
15B5 120000    4925            lcall   _InitADC
15B8           4926   ;        main.c:1067: TMOD&=0b_1111_0000; 
15B8 5389F0    4927            anl     _TMOD,#0xF0
15BB           4928   ;        main.c:1068: TMOD|=0b_0000_0001; 
15BB 438901    4929            orl     _TMOD,#0x01
15BE           4930   ;        main.c:1069: TR0=0; 
15BE C28C      4931            clr     _TR0
15C0           4932   ;        main.c:1071: Servo_arm=0;
15C0 C296      4933            clr     _P1_6
15C2           4934   ;        main.c:1072: Servo_base=0;
15C2 C297      4935            clr     _P1_7
15C4           4936   ;        main.c:1073: Magnet = 0;
15C4 C295      4937            clr     _P1_5
15C6           4938   ;        main.c:1074: PD_SCK = 0;
15C6 C2A5      4939            clr     _P2_5
15C8           4940   ;        main.c:1075: return;
15C8 22        4941            ret
15C9           4942   ;------------------------------------------------------------
15C9           4943   ;Allocation info for local variables in function 'Move_back_ms'
15C9           4944   ;------------------------------------------------------------
15C9           4945   ;ms                        Allocated to registers r2 r3 
15C9           4946   ;------------------------------------------------------------
15C9           4947   ;        main.c:1078: void Move_back_ms(int ms){
15C9           4948   ;        -----------------------------------------
15C9           4949   ;         function Move_back_ms
15C9           4950   ;        -----------------------------------------
15C9           4951   _Move_back_ms:
15C9 AA82      4952            mov     r2,dpl
15CB AB83      4953            mov     r3,dph
15CD           4954   ;        main.c:1080: L_motor_dir = 1;
15CD 905120    4955            mov     dptr,#_L_motor_dir
15D0 7401      4956            mov     a,#0x01
15D2 F0        4957            movx    @dptr,a
15D3           4958   ;        main.c:1081: R_motor_dir = 1;
15D3 9050E0    4959            mov     dptr,#_R_motor_dir
15D6 7401      4960            mov     a,#0x01
15D8 F0        4961            movx    @dptr,a
15D9           4962   ;        main.c:1083: pwm_left = 80;
15D9 9051A0    4963            mov     dptr,#_pwm_left
15DC 7450      4964            mov     a,#0x50
15DE F0        4965            movx    @dptr,a
15DF           4966   ;        main.c:1084: pwm_right = 80*pwm_corr;
15DF C002      4967            push    ar2
15E1 C003      4968            push    ar3
15E3 904E50    4969            mov     dptr,#_pwm_corr
15E6 E0        4970            movx    a,@dptr
15E7 C0E0      4971            push    acc
15E9 A3        4972            inc     dptr
15EA E0        4973            movx    a,@dptr
15EB C0E0      4974            push    acc
15ED A3        4975            inc     dptr
15EE E0        4976            movx    a,@dptr
15EF C0E0      4977            push    acc
15F1 A3        4978            inc     dptr
15F2 E0        4979            movx    a,@dptr
15F3 C0E0      4980            push    acc
15F5 900000    4981            mov     dptr,#0x0000
15F8 75F0A0    4982            mov     b,#0xA0
15FB 7442      4983            mov     a,#0x42
15FD 120000    4984            lcall   ___fsmul
1600 AC82      4985            mov     r4,dpl
1602 AD83      4986            mov     r5,dph
1604 AEF0      4987            mov     r6,b
1606 FF        4988            mov     r7,a
1607 E581      4989            mov     a,sp
1609 24FC      4990            add     a,#0xfc
160B F581      4991            mov     sp,a
160D 8C82      4992            mov     dpl,r4
160F 8D83      4993            mov     dph,r5
1611 8EF0      4994            mov     b,r6
1613 EF        4995            mov     a,r7
1614 120000    4996            lcall   ___fs2uchar
1617 E582      4997            mov     a,dpl
1619 D003      4998            pop     ar3
161B D002      4999            pop     ar2
161D 905160    5000            mov     dptr,#_pwm_right
1620 F0        5001            movx    @dptr,a
1621           5002   ;        main.c:1086: waitms(ms);
1621 8A82      5003            mov     dpl,r2
1623 8B83      5004            mov     dph,r3
1625 120000    5005            lcall   _waitms
1628           5006   ;        main.c:1088: L_motor_dir = 0;
1628 905120    5007            mov     dptr,#_L_motor_dir
162B           5008   ;        main.c:1089: R_motor_dir = 0;
162B           5009   ;        main.c:1090: pwm_left = 0;
162B           5010   ;        main.c:1091: pwm_right = 0;
162B E4        5011            clr     a
162C F0        5012            movx    @dptr,a
162D 9050E0    5013            mov     dptr,#_R_motor_dir
1630 F0        5014            movx    @dptr,a
1631 9051A0    5015            mov     dptr,#_pwm_left
1634 F0        5016            movx    @dptr,a
1635 905160    5017            mov     dptr,#_pwm_right
1638 F0        5018            movx    @dptr,a
1639           5019   ;        main.c:1092: return;
1639 22        5020            ret
163A           5021   ;------------------------------------------------------------
163A           5022   ;Allocation info for local variables in function 'Right_angle'
163A           5023   ;------------------------------------------------------------
163A           5024   ;angle                     Allocated to registers r2 r3 
163A           5025   ;------------------------------------------------------------
163A           5026   ;        main.c:1096: void Right_angle(int angle){
163A           5027   ;        -----------------------------------------
163A           5028   ;         function Right_angle
163A           5029   ;        -----------------------------------------
163A           5030   _Right_angle:
163A AA82      5031            mov     r2,dpl
163C AB83      5032            mov     r3,dph
163E           5033   ;        main.c:1098: L_motor_dir = 1;
163E 905120    5034            mov     dptr,#_L_motor_dir
1641 7401      5035            mov     a,#0x01
1643 F0        5036            movx    @dptr,a
1644           5037   ;        main.c:1099: R_motor_dir = 0;
1644 9050E0    5038            mov     dptr,#_R_motor_dir
1647 E4        5039            clr     a
1648 F0        5040            movx    @dptr,a
1649           5041   ;        main.c:1100: pwm_left = 80;
1649 9051A0    5042            mov     dptr,#_pwm_left
164C 7450      5043            mov     a,#0x50
164E F0        5044            movx    @dptr,a
164F           5045   ;        main.c:1101: pwm_right = 80 * pwm_corr;
164F C002      5046            push    ar2
1651 C003      5047            push    ar3
1653 904E50    5048            mov     dptr,#_pwm_corr
1656 E0        5049            movx    a,@dptr
1657 C0E0      5050            push    acc
1659 A3        5051            inc     dptr
165A E0        5052            movx    a,@dptr
165B C0E0      5053            push    acc
165D A3        5054            inc     dptr
165E E0        5055            movx    a,@dptr
165F C0E0      5056            push    acc
1661 A3        5057            inc     dptr
1662 E0        5058            movx    a,@dptr
1663 C0E0      5059            push    acc
1665 900000    5060            mov     dptr,#0x0000
1668 75F0A0    5061            mov     b,#0xA0
166B 7442      5062            mov     a,#0x42
166D 120000    5063            lcall   ___fsmul
1670 AC82      5064            mov     r4,dpl
1672 AD83      5065            mov     r5,dph
1674 AEF0      5066            mov     r6,b
1676 FF        5067            mov     r7,a
1677 E581      5068            mov     a,sp
1679 24FC      5069            add     a,#0xfc
167B F581      5070            mov     sp,a
167D 8C82      5071            mov     dpl,r4
167F 8D83      5072            mov     dph,r5
1681 8EF0      5073            mov     b,r6
1683 EF        5074            mov     a,r7
1684 120000    5075            lcall   ___fs2uchar
1687 E582      5076            mov     a,dpl
1689 D003      5077            pop     ar3
168B D002      5078            pop     ar2
168D 905160    5079            mov     dptr,#_pwm_right
1690 F0        5080            movx    @dptr,a
1691           5081   ;        main.c:1103: waitms(angle);
1691 8A82      5082            mov     dpl,r2
1693 8B83      5083            mov     dph,r3
1695 120000    5084            lcall   _waitms
1698           5085   ;        main.c:1105: L_motor_dir = 0;
1698 905120    5086            mov     dptr,#_L_motor_dir
169B           5087   ;        main.c:1106: R_motor_dir = 0;
169B           5088   ;        main.c:1107: pwm_left = 0;
169B           5089   ;        main.c:1108: pwm_right = 0;
169B E4        5090            clr     a
169C F0        5091            movx    @dptr,a
169D 9050E0    5092            mov     dptr,#_R_motor_dir
16A0 F0        5093            movx    @dptr,a
16A1 9051A0    5094            mov     dptr,#_pwm_left
16A4 F0        5095            movx    @dptr,a
16A5 905160    5096            mov     dptr,#_pwm_right
16A8 F0        5097            movx    @dptr,a
16A9           5098   ;        main.c:1109: return;
16A9 22        5099            ret
16AA           5100   ;------------------------------------------------------------
16AA           5101   ;Allocation info for local variables in function 'Move_forward'
16AA           5102   ;------------------------------------------------------------
16AA           5103   ;------------------------------------------------------------
16AA           5104   ;        main.c:1112: void Move_forward(){
16AA           5105   ;        -----------------------------------------
16AA           5106   ;         function Move_forward
16AA           5107   ;        -----------------------------------------
16AA           5108   _Move_forward:
16AA           5109   ;        main.c:1114: L_motor_dir = 0;
16AA 905120    5110            mov     dptr,#_L_motor_dir
16AD           5111   ;        main.c:1115: R_motor_dir = 0;
16AD E4        5112            clr     a
16AE F0        5113            movx    @dptr,a
16AF 9050E0    5114            mov     dptr,#_R_motor_dir
16B2 F0        5115            movx    @dptr,a
16B3           5116   ;        main.c:1116: pwm_left = 60;
16B3 9051A0    5117            mov     dptr,#_pwm_left
16B6 743C      5118            mov     a,#0x3C
16B8 F0        5119            movx    @dptr,a
16B9           5120   ;        main.c:1117: pwm_right = 60 * pwm_corr;
16B9 904E50    5121            mov     dptr,#_pwm_corr
16BC E0        5122            movx    a,@dptr
16BD C0E0      5123            push    acc
16BF A3        5124            inc     dptr
16C0 E0        5125            movx    a,@dptr
16C1 C0E0      5126            push    acc
16C3 A3        5127            inc     dptr
16C4 E0        5128            movx    a,@dptr
16C5 C0E0      5129            push    acc
16C7 A3        5130            inc     dptr
16C8 E0        5131            movx    a,@dptr
16C9 C0E0      5132            push    acc
16CB 900000    5133            mov     dptr,#0x0000
16CE 75F070    5134            mov     b,#0x70
16D1 7442      5135            mov     a,#0x42
16D3 120000    5136            lcall   ___fsmul
16D6 AA82      5137            mov     r2,dpl
16D8 AB83      5138            mov     r3,dph
16DA ACF0      5139            mov     r4,b
16DC FD        5140            mov     r5,a
16DD E581      5141            mov     a,sp
16DF 24FC      5142            add     a,#0xfc
16E1 F581      5143            mov     sp,a
16E3 8A82      5144            mov     dpl,r2
16E5 8B83      5145            mov     dph,r3
16E7 8CF0      5146            mov     b,r4
16E9 ED        5147            mov     a,r5
16EA 120000    5148            lcall   ___fs2uchar
16ED E582      5149            mov     a,dpl
16EF 905160    5150            mov     dptr,#_pwm_right
16F2 F0        5151            movx    @dptr,a
16F3           5152   ;        main.c:1118: return;
16F3 22        5153            ret
16F4           5154   ;------------------------------------------------------------
16F4           5155   ;Allocation info for local variables in function 'simple_rand'
16F4           5156   ;------------------------------------------------------------
16F4           5157   ;------------------------------------------------------------
16F4           5158   ;        main.c:1121: unsigned int simple_rand() {
16F4           5159   ;        -----------------------------------------
16F4           5160   ;         function simple_rand
16F4           5161   ;        -----------------------------------------
16F4           5162   _simple_rand:
16F4           5163   ;        main.c:1122: seed = (seed * 25173 + 13849) & 0xFFFF;  
16F4 904E90    5164            mov     dptr,#_seed
16F7 E0        5165            movx    a,@dptr
16F8 F500      5166            mov     __mulint_PARM_2,a
16FA A3        5167            inc     dptr
16FB E0        5168            movx    a,@dptr
16FC F501      5169            mov     (__mulint_PARM_2 + 1),a
16FE 906255    5170            mov     dptr,#0x6255
1701 120000    5171            lcall   __mulint
1704 E582      5172            mov     a,dpl
1706 8583F0    5173            mov     b,dph
1709 904E90    5174            mov     dptr,#_seed
170C 2419      5175            add     a,#0x19
170E F0        5176            movx    @dptr,a
170F 7436      5177            mov     a,#0x36
1711 35F0      5178            addc    a,b
1713 A3        5179            inc     dptr
1714 F0        5180            movx    @dptr,a
1715           5181   ;        main.c:1123: return seed;     
1715 904E90    5182            mov     dptr,#_seed
1718 E0        5183            movx    a,@dptr
1719 FA        5184            mov     r2,a
171A A3        5185            inc     dptr
171B E0        5186            movx    a,@dptr
171C 8A82      5187            mov     dpl,r2
171E F583      5188            mov     dph,a
1720 22        5189            ret
1721           5190   ;------------------------------------------------------------
1721           5191   ;Allocation info for local variables in function 'get_random_90_250'
1721           5192   ;------------------------------------------------------------
1721           5193   ;------------------------------------------------------------
1721           5194   ;        main.c:1126: unsigned int get_random_90_250() {
1721           5195   ;        -----------------------------------------
1721           5196   ;         function get_random_90_250
1721           5197   ;        -----------------------------------------
1721           5198   _get_random_90_250:
1721           5199   ;        main.c:1127: return (simple_rand() % (250 - 85 + 1)) + 90;
1721 120000    5200            lcall   _simple_rand
1724 7500A6    5201            mov     __moduint_PARM_2,#0xA6
1727 E4        5202            clr     a
1728 F501      5203            mov     (__moduint_PARM_2 + 1),a
172A 120000    5204            lcall   __moduint
172D E582      5205            mov     a,dpl
172F 8583F0    5206            mov     b,dph
1732 245A      5207            add     a,#0x5A
1734 F582      5208            mov     dpl,a
1736 E4        5209            clr     a
1737 35F0      5210            addc    a,b
1739 F583      5211            mov     dph,a
173B 22        5212            ret
173C           5213   ;------------------------------------------------------------
173C           5214   ;Allocation info for local variables in function 'Read_angle'
173C           5215   ;------------------------------------------------------------
173C           5216   ;mag_x                     Allocated with name '_Read_angle_mag_x_1_228'
173C           5217   ;mag_y                     Allocated with name '_Read_angle_mag_y_1_228'
173C           5218   ;sum_x                     Allocated with name '_Read_angle_sum_x_1_228'
173C           5219   ;sum_y                     Allocated with name '_Read_angle_sum_y_1_228'
173C           5220   ;angle                     Allocated with name '_Read_angle_angle_1_228'
173C           5221   ;------------------------------------------------------------
173C           5222   ;        main.c:1130: float Read_angle(void)
173C           5223   ;        -----------------------------------------
173C           5224   ;         function Read_angle
173C           5225   ;        -----------------------------------------
173C           5226   _Read_angle:
173C           5227   ;        main.c:1137: sum_x = 0.0; sum_y = 0.0;
173C 90D100    5228            mov     dptr,#_Read_angle_sum_x_1_228
173F E4        5229            clr     a
1740 F0        5230            movx    @dptr,a
1741 A3        5231            inc     dptr
1742 F0        5232            movx    @dptr,a
1743 A3        5233            inc     dptr
1744 F0        5234            movx    @dptr,a
1745 A3        5235            inc     dptr
1746 F0        5236            movx    @dptr,a
1747 90D150    5237            mov     dptr,#_Read_angle_sum_y_1_228
174A F0        5238            movx    @dptr,a
174B A3        5239            inc     dptr
174C           5240   ;        main.c:1140: for (i = 0; i < 10; i++){
174C E4        5241            clr     a
174D F0        5242            movx    @dptr,a
174E A3        5243            inc     dptr
174F F0        5244            movx    @dptr,a
1750 A3        5245            inc     dptr
1751 F0        5246            movx    @dptr,a
1752 905260    5247            mov     dptr,#_i
1755 F0        5248            movx    @dptr,a
1756 A3        5249            inc     dptr
1757 F0        5250            movx    @dptr,a
1758           5251   L042005?:
1758 905260    5252            mov     dptr,#_i
175B E0        5253            movx    a,@dptr
175C FA        5254            mov     r2,a
175D A3        5255            inc     dptr
175E E0        5256            movx    a,@dptr
175F FB        5257            mov     r3,a
1760 C3        5258            clr     c
1761 EA        5259            mov     a,r2
1762 940A      5260            subb    a,#0x0A
1764 EB        5261            mov     a,r3
1765 9400      5262            subb    a,#0x00
1767 4000      5263            jc      L042015?
1769 020000    5264            ljmp    L042008?
176C           5265   L042015?:
176C           5266   ;        main.c:1141: BMM150_Read_Data(&mag_x, &mag_y);
176C 7500B0    5267            mov     _BMM150_Read_Data_PARM_2,#_Read_angle_mag_y_1_228
176F 7501D0    5268            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_Read_angle_mag_y_1_228 >> 8)
1772 750200    5269            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
1775 90D060    5270            mov     dptr,#_Read_angle_mag_x_1_228
1778 75F000    5271            mov     b,#0x00
177B 120000    5272            lcall   _BMM150_Read_Data
177E           5273   ;        main.c:1142: sum_x += (float)mag_x; 
177E 90D060    5274            mov     dptr,#_Read_angle_mag_x_1_228
1781 E0        5275            movx    a,@dptr
1782 FA        5276            mov     r2,a
1783 A3        5277            inc     dptr
1784 E0        5278            movx    a,@dptr
1785 FB        5279            mov     r3,a
1786 8A82      5280            mov     dpl,r2
1788 8B83      5281            mov     dph,r3
178A 120000    5282            lcall   ___sint2fs
178D AA82      5283            mov     r2,dpl
178F AB83      5284            mov     r3,dph
1791 ACF0      5285            mov     r4,b
1793 FD        5286            mov     r5,a
1794 90D100    5287            mov     dptr,#_Read_angle_sum_x_1_228
1797 E0        5288            movx    a,@dptr
1798 FE        5289            mov     r6,a
1799 A3        5290            inc     dptr
179A E0        5291            movx    a,@dptr
179B FF        5292            mov     r7,a
179C A3        5293            inc     dptr
179D E0        5294            movx    a,@dptr
179E F8        5295            mov     r0,a
179F A3        5296            inc     dptr
17A0 E0        5297            movx    a,@dptr
17A1 F9        5298            mov     r1,a
17A2 C002      5299            push    ar2
17A4 C003      5300            push    ar3
17A6 C004      5301            push    ar4
17A8 C005      5302            push    ar5
17AA 8E82      5303            mov     dpl,r6
17AC 8F83      5304            mov     dph,r7
17AE 88F0      5305            mov     b,r0
17B0 E9        5306            mov     a,r1
17B1 120000    5307            lcall   ___fsadd
17B4 AA82      5308            mov     r2,dpl
17B6 AB83      5309            mov     r3,dph
17B8 ACF0      5310            mov     r4,b
17BA FD        5311            mov     r5,a
17BB E581      5312            mov     a,sp
17BD 24FC      5313            add     a,#0xfc
17BF F581      5314            mov     sp,a
17C1 90D100    5315            mov     dptr,#_Read_angle_sum_x_1_228
17C4 EA        5316            mov     a,r2
17C5 F0        5317            movx    @dptr,a
17C6 A3        5318            inc     dptr
17C7 EB        5319            mov     a,r3
17C8 F0        5320            movx    @dptr,a
17C9 A3        5321            inc     dptr
17CA EC        5322            mov     a,r4
17CB F0        5323            movx    @dptr,a
17CC A3        5324            inc     dptr
17CD ED        5325            mov     a,r5
17CE F0        5326            movx    @dptr,a
17CF           5327   ;        main.c:1143: sum_y += (float)mag_y; 
17CF 90D0B0    5328            mov     dptr,#_Read_angle_mag_y_1_228
17D2 E0        5329            movx    a,@dptr
17D3 FA        5330            mov     r2,a
17D4 A3        5331            inc     dptr
17D5 E0        5332            movx    a,@dptr
17D6 FB        5333            mov     r3,a
17D7 8A82      5334            mov     dpl,r2
17D9 8B83      5335            mov     dph,r3
17DB 120000    5336            lcall   ___sint2fs
17DE AA82      5337            mov     r2,dpl
17E0 AB83      5338            mov     r3,dph
17E2 ACF0      5339            mov     r4,b
17E4 FD        5340            mov     r5,a
17E5 90D150    5341            mov     dptr,#_Read_angle_sum_y_1_228
17E8 E0        5342            movx    a,@dptr
17E9 FE        5343            mov     r6,a
17EA A3        5344            inc     dptr
17EB E0        5345            movx    a,@dptr
17EC FF        5346            mov     r7,a
17ED A3        5347            inc     dptr
17EE E0        5348            movx    a,@dptr
17EF F8        5349            mov     r0,a
17F0 A3        5350            inc     dptr
17F1 E0        5351            movx    a,@dptr
17F2 F9        5352            mov     r1,a
17F3 C002      5353            push    ar2
17F5 C003      5354            push    ar3
17F7 C004      5355            push    ar4
17F9 C005      5356            push    ar5
17FB 8E82      5357            mov     dpl,r6
17FD 8F83      5358            mov     dph,r7
17FF 88F0      5359            mov     b,r0
1801 E9        5360            mov     a,r1
1802 120000    5361            lcall   ___fsadd
1805 AA82      5362            mov     r2,dpl
1807 AB83      5363            mov     r3,dph
1809 ACF0      5364            mov     r4,b
180B FD        5365            mov     r5,a
180C E581      5366            mov     a,sp
180E 24FC      5367            add     a,#0xfc
1810 F581      5368            mov     sp,a
1812 90D150    5369            mov     dptr,#_Read_angle_sum_y_1_228
1815 EA        5370            mov     a,r2
1816 F0        5371            movx    @dptr,a
1817 A3        5372            inc     dptr
1818 EB        5373            mov     a,r3
1819 F0        5374            movx    @dptr,a
181A A3        5375            inc     dptr
181B EC        5376            mov     a,r4
181C F0        5377            movx    @dptr,a
181D A3        5378            inc     dptr
181E ED        5379            mov     a,r5
181F F0        5380            movx    @dptr,a
1820           5381   ;        main.c:1144: Timer3us(1);
1820 758201    5382            mov     dpl,#0x01
1823 120000    5383            lcall   _Timer3us
1826           5384   ;        main.c:1140: for (i = 0; i < 10; i++){
1826 905260    5385            mov     dptr,#_i
1829 E0        5386            movx    a,@dptr
182A 2401      5387            add     a,#0x01
182C F0        5388            movx    @dptr,a
182D A3        5389            inc     dptr
182E E0        5390            movx    a,@dptr
182F 3400      5391            addc    a,#0x00
1831 F0        5392            movx    @dptr,a
1832 020000    5393            ljmp    L042005?
1835           5394   L042008?:
1835           5395   ;        main.c:1146: angle = atan2f(sum_y, sum_x) * 180.0 / M_PI;
1835 90D150    5396            mov     dptr,#_Read_angle_sum_y_1_228
1838 E0        5397            movx    a,@dptr
1839 FA        5398            mov     r2,a
183A A3        5399            inc     dptr
183B E0        5400            movx    a,@dptr
183C FB        5401            mov     r3,a
183D A3        5402            inc     dptr
183E E0        5403            movx    a,@dptr
183F FC        5404            mov     r4,a
1840 A3        5405            inc     dptr
1841 E0        5406            movx    a,@dptr
1842 FD        5407            mov     r5,a
1843 90D100    5408            mov     dptr,#_Read_angle_sum_x_1_228
1846 E0        5409            movx    a,@dptr
1847 F500      5410            mov     _atan2f_PARM_2,a
1849 A3        5411            inc     dptr
184A E0        5412            movx    a,@dptr
184B F501      5413            mov     (_atan2f_PARM_2 + 1),a
184D A3        5414            inc     dptr
184E E0        5415            movx    a,@dptr
184F F502      5416            mov     (_atan2f_PARM_2 + 2),a
1851 A3        5417            inc     dptr
1852 E0        5418            movx    a,@dptr
1853 F503      5419            mov     (_atan2f_PARM_2 + 3),a
1855 8A82      5420            mov     dpl,r2
1857 8B83      5421            mov     dph,r3
1859 8CF0      5422            mov     b,r4
185B ED        5423            mov     a,r5
185C 120000    5424            lcall   _atan2f
185F AA82      5425            mov     r2,dpl
1861 AB83      5426            mov     r3,dph
1863 ACF0      5427            mov     r4,b
1865 FD        5428            mov     r5,a
1866 C002      5429            push    ar2
1868 C003      5430            push    ar3
186A C004      5431            push    ar4
186C C005      5432            push    ar5
186E 900000    5433            mov     dptr,#0x0000
1871 75F034    5434            mov     b,#0x34
1874 7443      5435            mov     a,#0x43
1876 120000    5436            lcall   ___fsmul
1879 AA82      5437            mov     r2,dpl
187B AB83      5438            mov     r3,dph
187D ACF0      5439            mov     r4,b
187F FD        5440            mov     r5,a
1880 E581      5441            mov     a,sp
1882 24FC      5442            add     a,#0xfc
1884 F581      5443            mov     sp,a
1886 74DB      5444            mov     a,#0xDB
1888 C0E0      5445            push    acc
188A 740F      5446            mov     a,#0x0F
188C C0E0      5447            push    acc
188E 7449      5448            mov     a,#0x49
1890 C0E0      5449            push    acc
1892 7440      5450            mov     a,#0x40
1894 C0E0      5451            push    acc
1896 8A82      5452            mov     dpl,r2
1898 8B83      5453            mov     dph,r3
189A 8CF0      5454            mov     b,r4
189C ED        5455            mov     a,r5
189D 120000    5456            lcall   ___fsdiv
18A0 AA82      5457            mov     r2,dpl
18A2 AB83      5458            mov     r3,dph
18A4 ACF0      5459            mov     r4,b
18A6 FD        5460            mov     r5,a
18A7 E581      5461            mov     a,sp
18A9 24FC      5462            add     a,#0xfc
18AB F581      5463            mov     sp,a
18AD 90D1A0    5464            mov     dptr,#_Read_angle_angle_1_228
18B0 EA        5465            mov     a,r2
18B1 F0        5466            movx    @dptr,a
18B2 A3        5467            inc     dptr
18B3 EB        5468            mov     a,r3
18B4 F0        5469            movx    @dptr,a
18B5 A3        5470            inc     dptr
18B6 EC        5471            mov     a,r4
18B7 F0        5472            movx    @dptr,a
18B8 A3        5473            inc     dptr
18B9 ED        5474            mov     a,r5
18BA F0        5475            movx    @dptr,a
18BB           5476   ;        main.c:1147: if (angle < 0.0) angle += 360.0; 
18BB C002      5477            push    ar2
18BD C003      5478            push    ar3
18BF C004      5479            push    ar4
18C1 C005      5480            push    ar5
18C3 E4        5481            clr     a
18C4 C0E0      5482            push    acc
18C6 C0E0      5483            push    acc
18C8 C0E0      5484            push    acc
18CA C0E0      5485            push    acc
18CC 8A82      5486            mov     dpl,r2
18CE 8B83      5487            mov     dph,r3
18D0 8CF0      5488            mov     b,r4
18D2 ED        5489            mov     a,r5
18D3 120000    5490            lcall   ___fslt
18D6 AE82      5491            mov     r6,dpl
18D8 E581      5492            mov     a,sp
18DA 24FC      5493            add     a,#0xfc
18DC F581      5494            mov     sp,a
18DE D005      5495            pop     ar5
18E0 D004      5496            pop     ar4
18E2 D003      5497            pop     ar3
18E4 D002      5498            pop     ar2
18E6 EE        5499            mov     a,r6
18E7 6000      5500            jz      L042002?
18E9 E4        5501            clr     a
18EA C0E0      5502            push    acc
18EC C0E0      5503            push    acc
18EE 74B4      5504            mov     a,#0xB4
18F0 C0E0      5505            push    acc
18F2 7443      5506            mov     a,#0x43
18F4 C0E0      5507            push    acc
18F6 8A82      5508            mov     dpl,r2
18F8 8B83      5509            mov     dph,r3
18FA 8CF0      5510            mov     b,r4
18FC ED        5511            mov     a,r5
18FD 120000    5512            lcall   ___fsadd
1900 AA82      5513            mov     r2,dpl
1902 AB83      5514            mov     r3,dph
1904 ACF0      5515            mov     r4,b
1906 FD        5516            mov     r5,a
1907 E581      5517            mov     a,sp
1909 24FC      5518            add     a,#0xfc
190B F581      5519            mov     sp,a
190D 90D1A0    5520            mov     dptr,#_Read_angle_angle_1_228
1910 EA        5521            mov     a,r2
1911 F0        5522            movx    @dptr,a
1912 A3        5523            inc     dptr
1913 EB        5524            mov     a,r3
1914 F0        5525            movx    @dptr,a
1915 A3        5526            inc     dptr
1916 EC        5527            mov     a,r4
1917 F0        5528            movx    @dptr,a
1918 A3        5529            inc     dptr
1919 ED        5530            mov     a,r5
191A F0        5531            movx    @dptr,a
191B           5532   L042002?:
191B           5533   ;        main.c:1148: if (angle > 360.0) angle -= 360.0; 
191B 90D1A0    5534            mov     dptr,#_Read_angle_angle_1_228
191E E0        5535            movx    a,@dptr
191F FA        5536            mov     r2,a
1920 A3        5537            inc     dptr
1921 E0        5538            movx    a,@dptr
1922 FB        5539            mov     r3,a
1923 A3        5540            inc     dptr
1924 E0        5541            movx    a,@dptr
1925 FC        5542            mov     r4,a
1926 A3        5543            inc     dptr
1927 E0        5544            movx    a,@dptr
1928 FD        5545            mov     r5,a
1929 C002      5546            push    ar2
192B C003      5547            push    ar3
192D C004      5548            push    ar4
192F C005      5549            push    ar5
1931 E4        5550            clr     a
1932 C0E0      5551            push    acc
1934 C0E0      5552            push    acc
1936 74B4      5553            mov     a,#0xB4
1938 C0E0      5554            push    acc
193A 7443      5555            mov     a,#0x43
193C C0E0      5556            push    acc
193E 8A82      5557            mov     dpl,r2
1940 8B83      5558            mov     dph,r3
1942 8CF0      5559            mov     b,r4
1944 ED        5560            mov     a,r5
1945 120000    5561            lcall   ___fsgt
1948 AE82      5562            mov     r6,dpl
194A E581      5563            mov     a,sp
194C 24FC      5564            add     a,#0xfc
194E F581      5565            mov     sp,a
1950 D005      5566            pop     ar5
1952 D004      5567            pop     ar4
1954 D003      5568            pop     ar3
1956 D002      5569            pop     ar2
1958 EE        5570            mov     a,r6
1959 6000      5571            jz      L042004?
195B E4        5572            clr     a
195C C0E0      5573            push    acc
195E C0E0      5574            push    acc
1960 74B4      5575            mov     a,#0xB4
1962 C0E0      5576            push    acc
1964 7443      5577            mov     a,#0x43
1966 C0E0      5578            push    acc
1968 8A82      5579            mov     dpl,r2
196A 8B83      5580            mov     dph,r3
196C 8CF0      5581            mov     b,r4
196E ED        5582            mov     a,r5
196F 120000    5583            lcall   ___fssub
1972 AA82      5584            mov     r2,dpl
1974 AB83      5585            mov     r3,dph
1976 ACF0      5586            mov     r4,b
1978 FD        5587            mov     r5,a
1979 E581      5588            mov     a,sp
197B 24FC      5589            add     a,#0xfc
197D F581      5590            mov     sp,a
197F 90D1A0    5591            mov     dptr,#_Read_angle_angle_1_228
1982 EA        5592            mov     a,r2
1983 F0        5593            movx    @dptr,a
1984 A3        5594            inc     dptr
1985 EB        5595            mov     a,r3
1986 F0        5596            movx    @dptr,a
1987 A3        5597            inc     dptr
1988 EC        5598            mov     a,r4
1989 F0        5599            movx    @dptr,a
198A A3        5600            inc     dptr
198B ED        5601            mov     a,r5
198C F0        5602            movx    @dptr,a
198D           5603   L042004?:
198D           5604   ;        main.c:1149: return angle; 
198D 90D1A0    5605            mov     dptr,#_Read_angle_angle_1_228
1990 E0        5606            movx    a,@dptr
1991 FA        5607            mov     r2,a
1992 A3        5608            inc     dptr
1993 E0        5609            movx    a,@dptr
1994 FB        5610            mov     r3,a
1995 A3        5611            inc     dptr
1996 E0        5612            movx    a,@dptr
1997 FC        5613            mov     r4,a
1998 A3        5614            inc     dptr
1999 E0        5615            movx    a,@dptr
199A 8A82      5616            mov     dpl,r2
199C 8B83      5617            mov     dph,r3
199E 8CF0      5618            mov     b,r4
19A0 22        5619            ret
19A1           5620   ;------------------------------------------------------------
19A1           5621   ;Allocation info for local variables in function 'Auto_mode_slave'
19A1           5622   ;------------------------------------------------------------
19A1           5623   ;sloc0                     Allocated with name '_Auto_mode_slave_sloc0_1_0'
19A1           5624   ;count                     Allocated with name '_Auto_mode_slave_count_1_230'
19A1           5625   ;command                   Allocated with name '_Auto_mode_slave_command_1_230'
19A1           5626   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_230'
19A1           5627   ;bound                     Allocated with name '_Auto_mode_slave_bound_1_230'
19A1           5628   ;c                         Allocated with name '_Auto_mode_slave_c_1_230'
19A1           5629   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_230'
19A1           5630   ;angle                     Allocated with name '_Auto_mode_slave_angle_1_230'
19A1           5631   ;------------------------------------------------------------
19A1           5632   ;        main.c:1152: void Auto_mode_slave(){
19A1           5633   ;        -----------------------------------------
19A1           5634   ;         function Auto_mode_slave
19A1           5635   ;        -----------------------------------------
19A1           5636   _Auto_mode_slave:
19A1           5637   ;        main.c:1155: xdata int state_res = 1;
19A1 90D250    5638            mov     dptr,#_Auto_mode_slave_state_res_1_230
19A4 7401      5639            mov     a,#0x01
19A6 F0        5640            movx    @dptr,a
19A7 E4        5641            clr     a
19A8 A3        5642            inc     dptr
19A9 F0        5643            movx    @dptr,a
19AA           5644   ;        main.c:1161: curr_angle = Read_angle();
19AA 120000    5645            lcall   _Read_angle
19AD AA82      5646            mov     r2,dpl
19AF AB83      5647            mov     r3,dph
19B1 ACF0      5648            mov     r4,b
19B3 FD        5649            mov     r5,a
19B4 904E10    5650            mov     dptr,#_curr_angle
19B7 EA        5651            mov     a,r2
19B8 F0        5652            movx    @dptr,a
19B9 A3        5653            inc     dptr
19BA EB        5654            mov     a,r3
19BB F0        5655            movx    @dptr,a
19BC A3        5656            inc     dptr
19BD EC        5657            mov     a,r4
19BE F0        5658            movx    @dptr,a
19BF A3        5659            inc     dptr
19C0 ED        5660            mov     a,r5
19C1 F0        5661            movx    @dptr,a
19C2           5662   ;        main.c:1163: while(count < 5 && state_res){
19C2 E4        5663            clr     a
19C3 F5F0      5664            mov     _Auto_mode_slave_sloc0_1_0,a
19C5 F5F1      5665            mov     (_Auto_mode_slave_sloc0_1_0 + 1),a
19C7           5666   L043020?:
19C7 C3        5667            clr     c
19C8 E5F0      5668            mov     a,_Auto_mode_slave_sloc0_1_0
19CA 9405      5669            subb    a,#0x05
19CC E5F1      5670            mov     a,(_Auto_mode_slave_sloc0_1_0 + 1)
19CE 6480      5671            xrl     a,#0x80
19D0 9480      5672            subb    a,#0x80
19D2 4000      5673            jc      L043049?
19D4 020000    5674            ljmp    L043022?
19D7           5675   L043049?:
19D7 90D250    5676            mov     dptr,#_Auto_mode_slave_state_res_1_230
19DA E0        5677            movx    a,@dptr
19DB FC        5678            mov     r4,a
19DC A3        5679            inc     dptr
19DD E0        5680            movx    a,@dptr
19DE FD        5681            mov     r5,a
19DF 4C        5682            orl     a,r4
19E0 7000      5683            jnz     L043050?
19E2 020000    5684            ljmp    L043022?
19E5           5685   L043050?:
19E5           5686   ;        main.c:1165: if(RXU1()){
19E5 C004      5687            push    ar4
19E7 C005      5688            push    ar5
19E9 120000    5689            lcall   _RXU1
19EC D005      5690            pop     ar5
19EE D004      5691            pop     ar4
19F0 4000      5692            jc      L043051?
19F2 020000    5693            ljmp    L043012?
19F5           5694   L043051?:
19F5           5695   ;        main.c:1166: c=getchar1();      
19F5 C004      5696            push    ar4
19F7 C005      5697            push    ar5
19F9 120000    5698            lcall   _getchar1
19FC AE82      5699            mov     r6,dpl
19FE D005      5700            pop     ar5
1A00 D004      5701            pop     ar4
1A02           5702   ;        main.c:1167: if(c=='!'){
1A02 BE21A8    5703            cjne    r6,#0x21,L043052?
1A05 8000      5704            sjmp    L043053?
1A07           5705   L043052?:
1A07 020000    5706            ljmp    L043009?
1A0A           5707   L043053?:
1A0A           5708   ;        main.c:1168: getstr1(buff, sizeof(buff)-1);
1A0A 75B013    5709            mov     _getstr1_PARM_2,#0x13
1A0D 905720    5710            mov     dptr,#_buff
1A10 75F040    5711            mov     b,#0x40
1A13 120000    5712            lcall   _getstr1
1A16           5713   ;        main.c:1169: if(strlen(buff)==11){
1A16 905720    5714            mov     dptr,#_buff
1A19 75F040    5715            mov     b,#0x40
1A1C 120000    5716            lcall   _strlen
1A1F AF82      5717            mov     r7,dpl
1A21 AA83      5718            mov     r2,dph
1A23 BF0BA8    5719            cjne    r7,#0x0B,L043054?
1A26 BA00A8    5720            cjne    r2,#0x00,L043054?
1A29 8000      5721            sjmp    L043055?
1A2B           5722   L043054?:
1A2B 020000    5723            ljmp    L043012?
1A2E           5724   L043055?:
1A2E           5725   ;        main.c:1171: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
1A2E 74F0      5726            mov     a,#_Auto_mode_slave_command_1_230
1A30 C0E0      5727            push    acc
1A32 74D1      5728            mov     a,#(_Auto_mode_slave_command_1_230 >> 8)
1A34 C0E0      5729            push    acc
1A36 E4        5730            clr     a
1A37 C0E0      5731            push    acc
1A39 74A0      5732            mov     a,#_Auto_mode_slave_dummy_1_230
1A3B C0E0      5733            push    acc
1A3D 74D2      5734            mov     a,#(_Auto_mode_slave_dummy_1_230 >> 8)
1A3F C0E0      5735            push    acc
1A41 E4        5736            clr     a
1A42 C0E0      5737            push    acc
1A44 74A0      5738            mov     a,#_Auto_mode_slave_dummy_1_230
1A46 C0E0      5739            push    acc
1A48 74D2      5740            mov     a,#(_Auto_mode_slave_dummy_1_230 >> 8)
1A4A C0E0      5741            push    acc
1A4C E4        5742            clr     a
1A4D C0E0      5743            push    acc
1A4F 74A0      5744            mov     a,#_Auto_mode_slave_dummy_1_230
1A51 C0E0      5745            push    acc
1A53 74D2      5746            mov     a,#(_Auto_mode_slave_dummy_1_230 >> 8)
1A55 C0E0      5747            push    acc
1A57 E4        5748            clr     a
1A58 C0E0      5749            push    acc
1A5A 7428      5750            mov     a,#__str_5
1A5C C0E0      5751            push    acc
1A5E 7418      5752            mov     a,#(__str_5 >> 8)
1A60 C0E0      5753            push    acc
1A62 7480      5754            mov     a,#0x80
1A64 C0E0      5755            push    acc
1A66 7420      5756            mov     a,#_buff
1A68 C0E0      5757            push    acc
1A6A 7457      5758            mov     a,#(_buff >> 8)
1A6C C0E0      5759            push    acc
1A6E 7440      5760            mov     a,#0x40
1A70 C0E0      5761            push    acc
1A72 120000    5762            lcall   _sscanf
1A75 E581      5763            mov     a,sp
1A77 24EE      5764            add     a,#0xee
1A79 F581      5765            mov     sp,a
1A7B           5766   ;        main.c:1172: if(command) state_res = 1;
1A7B 90D1F0    5767            mov     dptr,#_Auto_mode_slave_command_1_230
1A7E E0        5768            movx    a,@dptr
1A7F FF        5769            mov     r7,a
1A80 A3        5770            inc     dptr
1A81 E0        5771            movx    a,@dptr
1A82 FA        5772            mov     r2,a
1A83 4F        5773            orl     a,r7
1A84 6000      5774            jz      L043002?
1A86 90D250    5775            mov     dptr,#_Auto_mode_slave_state_res_1_230
1A89 7401      5776            mov     a,#0x01
1A8B F0        5777            movx    @dptr,a
1A8C E4        5778            clr     a
1A8D A3        5779            inc     dptr
1A8E F0        5780            movx    @dptr,a
1A8F 020000    5781            ljmp    L043012?
1A92           5782   L043002?:
1A92           5783   ;        main.c:1173: else state_res = 0;
1A92 90D250    5784            mov     dptr,#_Auto_mode_slave_state_res_1_230
1A95 E4        5785            clr     a
1A96 F0        5786            movx    @dptr,a
1A97 A3        5787            inc     dptr
1A98 F0        5788            movx    @dptr,a
1A99 8000      5789            sjmp    L043012?
1A9B           5790   L043009?:
1A9B           5791   ;        main.c:1176: else if(c=='@'){
1A9B BE4068    5792            cjne    r6,#0x40,L043012?
1A9E           5793   ;        main.c:1177: sprintf(buff, "%01d,%02d,%ld,%05d,%03d\n", state_res, count,freq100, 0, (int)curr_angle);
1A9E 904E10    5794            mov     dptr,#_curr_angle
1AA1 E0        5795            movx    a,@dptr
1AA2 FA        5796            mov     r2,a
1AA3 A3        5797            inc     dptr
1AA4 E0        5798            movx    a,@dptr
1AA5 FB        5799            mov     r3,a
1AA6 A3        5800            inc     dptr
1AA7 E0        5801            movx    a,@dptr
1AA8 FE        5802            mov     r6,a
1AA9 A3        5803            inc     dptr
1AAA E0        5804            movx    a,@dptr
1AAB 8A82      5805            mov     dpl,r2
1AAD 8B83      5806            mov     dph,r3
1AAF 8EF0      5807            mov     b,r6
1AB1 C004      5808            push    ar4
1AB3 C005      5809            push    ar5
1AB5 120000    5810            lcall   ___fs2sint
1AB8 AA82      5811            mov     r2,dpl
1ABA AB83      5812            mov     r3,dph
1ABC D005      5813            pop     ar5
1ABE D004      5814            pop     ar4
1AC0 C002      5815            push    ar2
1AC2 C003      5816            push    ar3
1AC4 E4        5817            clr     a
1AC5 C0E0      5818            push    acc
1AC7 C0E0      5819            push    acc
1AC9 9056E0    5820            mov     dptr,#_freq100
1ACC E0        5821            movx    a,@dptr
1ACD C0E0      5822            push    acc
1ACF A3        5823            inc     dptr
1AD0 E0        5824            movx    a,@dptr
1AD1 C0E0      5825            push    acc
1AD3 A3        5826            inc     dptr
1AD4 E0        5827            movx    a,@dptr
1AD5 C0E0      5828            push    acc
1AD7 A3        5829            inc     dptr
1AD8 E0        5830            movx    a,@dptr
1AD9 C0E0      5831            push    acc
1ADB C0F0      5832            push    _Auto_mode_slave_sloc0_1_0
1ADD C0F1      5833            push    (_Auto_mode_slave_sloc0_1_0 + 1)
1ADF C004      5834            push    ar4
1AE1 C005      5835            push    ar5
1AE3 74E8      5836            mov     a,#__str_6
1AE5 C0E0      5837            push    acc
1AE7 7418      5838            mov     a,#(__str_6 >> 8)
1AE9 C0E0      5839            push    acc
1AEB 7480      5840            mov     a,#0x80
1AED C0E0      5841            push    acc
1AEF 7420      5842            mov     a,#_buff
1AF1 C0E0      5843            push    acc
1AF3 7457      5844            mov     a,#(_buff >> 8)
1AF5 C0E0      5845            push    acc
1AF7 7440      5846            mov     a,#0x40
1AF9 C0E0      5847            push    acc
1AFB 120000    5848            lcall   _sprintf
1AFE E581      5849            mov     a,sp
1B00 24EE      5850            add     a,#0xee
1B02 F581      5851            mov     sp,a
1B04           5852   ;        main.c:1178: waitms(5); 
1B04 900005    5853            mov     dptr,#0x0005
1B07 120000    5854            lcall   _waitms
1B0A           5855   ;        main.c:1179: sendstr1(buff);
1B0A 905720    5856            mov     dptr,#_buff
1B0D 75F040    5857            mov     b,#0x40
1B10 120000    5858            lcall   _sendstr1
1B13           5859   L043012?:
1B13           5860   ;        main.c:1183: Move_forward();
1B13 120000    5861            lcall   _Move_forward
1B16           5862   ;        main.c:1185: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
1B16 758209    5863            mov     dpl,#0x09
1B19 120000    5864            lcall   _ADC_at_Pin
1B1C E582      5865            mov     a,dpl
1B1E 8583F0    5866            mov     b,dph
1B21 9056A0    5867            mov     dptr,#_d1
1B24 F0        5868            movx    @dptr,a
1B25 A3        5869            inc     dptr
1B26 E5F0      5870            mov     a,b
1B28 F0        5871            movx    @dptr,a
1B29           5872   ;        main.c:1186: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
1B29 75820A    5873            mov     dpl,#0x0A
1B2C 120000    5874            lcall   _ADC_at_Pin
1B2F AA82      5875            mov     r2,dpl
1B31 AB83      5876            mov     r3,dph
1B33 905660    5877            mov     dptr,#_d2
1B36 EA        5878            mov     a,r2
1B37 F0        5879            movx    @dptr,a
1B38 A3        5880            inc     dptr
1B39 EB        5881            mov     a,r3
1B3A F0        5882            movx    @dptr,a
1B3B           5883   ;        main.c:1187: bound = check_bound(d1,d2);
1B3B 9056A0    5884            mov     dptr,#_d1
1B3E E0        5885            movx    a,@dptr
1B3F FC        5886            mov     r4,a
1B40 A3        5887            inc     dptr
1B41 E0        5888            movx    a,@dptr
1B42 FD        5889            mov     r5,a
1B43 8A90      5890            mov     _check_bound_PARM_2,r2
1B45 8B91      5891            mov     (_check_bound_PARM_2 + 1),r3
1B47 8C82      5892            mov     dpl,r4
1B49 8D83      5893            mov     dph,r5
1B4B 120000    5894            lcall   _check_bound
1B4E AA82      5895            mov     r2,dpl
1B50 AB83      5896            mov     r3,dph
1B52           5897   ;        main.c:1190: if (freq100>=5360){
1B52 9056E0    5898            mov     dptr,#_freq100
1B55 E0        5899            movx    a,@dptr
1B56 FC        5900            mov     r4,a
1B57 A3        5901            inc     dptr
1B58 E0        5902            movx    a,@dptr
1B59 FD        5903            mov     r5,a
1B5A A3        5904            inc     dptr
1B5B E0        5905            movx    a,@dptr
1B5C FE        5906            mov     r6,a
1B5D A3        5907            inc     dptr
1B5E E0        5908            movx    a,@dptr
1B5F FF        5909            mov     r7,a
1B60 C3        5910            clr     c
1B61 EC        5911            mov     a,r4
1B62 94F0      5912            subb    a,#0xF0
1B64 ED        5913            mov     a,r5
1B65 9414      5914            subb    a,#0x14
1B67 EE        5915            mov     a,r6
1B68 9400      5916            subb    a,#0x00
1B6A EF        5917            mov     a,r7
1B6B 6480      5918            xrl     a,#0x80
1B6D 9480      5919            subb    a,#0x80
1B6F 4000      5920            jc      L043014?
1B71           5921   ;        main.c:1191: mea_yes = 0;
1B71 904D10    5922            mov     dptr,#_mea_yes
1B74 E4        5923            clr     a
1B75 F0        5924            movx    @dptr,a
1B76           5925   ;        main.c:1192: Move_back_ms(300);
1B76 90012C    5926            mov     dptr,#0x012C
1B79 C002      5927            push    ar2
1B7B C003      5928            push    ar3
1B7D 120000    5929            lcall   _Move_back_ms
1B80           5930   ;        main.c:1193: waitms(100);
1B80 900064    5931            mov     dptr,#0x0064
1B83 120000    5932            lcall   _waitms
1B86           5933   ;        main.c:1194: servo_pick();
1B86 120000    5934            lcall   _servo_pick
1B89 D003      5935            pop     ar3
1B8B D002      5936            pop     ar2
1B8D           5937   ;        main.c:1195: count++;
1B8D 05F0      5938            inc     _Auto_mode_slave_sloc0_1_0
1B8F E4        5939            clr     a
1B90 B5F0A8    5940            cjne    a,_Auto_mode_slave_sloc0_1_0,L043060?
1B93 05F1      5941            inc     (_Auto_mode_slave_sloc0_1_0 + 1)
1B95           5942   L043060?:
1B95           5943   ;        main.c:1196: waitms(100);
1B95 900064    5944            mov     dptr,#0x0064
1B98 C002      5945            push    ar2
1B9A C003      5946            push    ar3
1B9C 120000    5947            lcall   _waitms
1B9F           5948   ;        main.c:1197: mea_yes = 1;
1B9F 904D10    5949            mov     dptr,#_mea_yes
1BA2 7401      5950            mov     a,#0x01
1BA4 F0        5951            movx    @dptr,a
1BA5           5952   ;        main.c:1198: Move_forward();
1BA5 120000    5953            lcall   _Move_forward
1BA8 D003      5954            pop     ar3
1BAA D002      5955            pop     ar2
1BAC           5956   L043014?:
1BAC           5957   ;        main.c:1201: if (distance < 500) servo_moveaway();
1BAC 905320    5958            mov     dptr,#_distance
1BAF E0        5959            movx    a,@dptr
1BB0 FC        5960            mov     r4,a
1BB1 A3        5961            inc     dptr
1BB2 E0        5962            movx    a,@dptr
1BB3 FD        5963            mov     r5,a
1BB4 C3        5964            clr     c
1BB5 EC        5965            mov     a,r4
1BB6 94F4      5966            subb    a,#0xF4
1BB8 ED        5967            mov     a,r5
1BB9 6480      5968            xrl     a,#0x80
1BBB 9481      5969            subb    a,#0x81
1BBD 5000      5970            jnc     L043016?
1BBF C002      5971            push    ar2
1BC1 C003      5972            push    ar3
1BC3 120000    5973            lcall   _servo_moveaway
1BC6 D003      5974            pop     ar3
1BC8 D002      5975            pop     ar2
1BCA           5976   L043016?:
1BCA           5977   ;        main.c:1203: if(bound == 1){
1BCA BA0128    5978            cjne    r2,#0x01,L043062?
1BCD BB0028    5979            cjne    r3,#0x00,L043062?
1BD0 8000      5980            sjmp    L043063?
1BD2           5981   L043062?:
1BD2 020000    5982            ljmp    L043020?
1BD5           5983   L043063?:
1BD5           5984   ;        main.c:1204: Move_back_ms(500);
1BD5 9001F4    5985            mov     dptr,#0x01F4
1BD8 120000    5986            lcall   _Move_back_ms
1BDB           5987   ;        main.c:1205: waitms(100);
1BDB 900064    5988            mov     dptr,#0x0064
1BDE 120000    5989            lcall   _waitms
1BE1           5990   ;        main.c:1206: angle = get_random_90_250();
1BE1 120000    5991            lcall   _get_random_90_250
1BE4 858200    5992            mov     __mulint_PARM_2,dpl
1BE7 858301    5993            mov     (__mulint_PARM_2 + 1),dph
1BEA           5994   ;        main.c:1207: Right_angle(angle*600/90);
1BEA 900258    5995            mov     dptr,#0x0258
1BED 120000    5996            lcall   __mulint
1BF0 AA82      5997            mov     r2,dpl
1BF2 AB83      5998            mov     r3,dph
1BF4 75005A    5999            mov     __divuint_PARM_2,#0x5A
1BF7 E4        6000            clr     a
1BF8 F501      6001            mov     (__divuint_PARM_2 + 1),a
1BFA 8A82      6002            mov     dpl,r2
1BFC 8B83      6003            mov     dph,r3
1BFE 120000    6004            lcall   __divuint
1C01 120000    6005            lcall   _Right_angle
1C04           6006   ;        main.c:1208: curr_angle = Read_angle() * 1.2;
1C04 120000    6007            lcall   _Read_angle
1C07 AA82      6008            mov     r2,dpl
1C09 AB83      6009            mov     r3,dph
1C0B ACF0      6010            mov     r4,b
1C0D FD        6011            mov     r5,a
1C0E C002      6012            push    ar2
1C10 C003      6013            push    ar3
1C12 C004      6014            push    ar4
1C14 C005      6015            push    ar5
1C16 90999A    6016            mov     dptr,#0x999A
1C19 75F099    6017            mov     b,#0x99
1C1C 743F      6018            mov     a,#0x3F
1C1E 120000    6019            lcall   ___fsmul
1C21 AA82      6020            mov     r2,dpl
1C23 AB83      6021            mov     r3,dph
1C25 ACF0      6022            mov     r4,b
1C27 FD        6023            mov     r5,a
1C28 E581      6024            mov     a,sp
1C2A 24FC      6025            add     a,#0xfc
1C2C F581      6026            mov     sp,a
1C2E 904E10    6027            mov     dptr,#_curr_angle
1C31 EA        6028            mov     a,r2
1C32 F0        6029            movx    @dptr,a
1C33 A3        6030            inc     dptr
1C34 EB        6031            mov     a,r3
1C35 F0        6032            movx    @dptr,a
1C36 A3        6033            inc     dptr
1C37 EC        6034            mov     a,r4
1C38 F0        6035            movx    @dptr,a
1C39 A3        6036            inc     dptr
1C3A ED        6037            mov     a,r5
1C3B F0        6038            movx    @dptr,a
1C3C 020000    6039            ljmp    L043020?
1C3F           6040   L043022?:
1C3F           6041   ;        main.c:1211: dummy = 0;
1C3F 90D2A0    6042            mov     dptr,#_Auto_mode_slave_dummy_1_230
1C42 E4        6043            clr     a
1C43 F0        6044            movx    @dptr,a
1C44 A3        6045            inc     dptr
1C45 F0        6046            movx    @dptr,a
1C46           6047   ;        main.c:1212: while(1){
1C46           6048   L043030?:
1C46           6049   ;        main.c:1213: if(RXU1()) {
1C46 120000    6050            lcall   _RXU1
1C49 5000      6051            jnc     L043030?
1C4B           6052   ;        main.c:1214: c=getchar1();
1C4B 120000    6053            lcall   _getchar1
1C4E AA82      6054            mov     r2,dpl
1C50           6055   ;        main.c:1215: if(c=='@') // Master wants slave data
1C50 BA4038    6056            cjne    r2,#0x40,L043030?
1C53           6057   ;        main.c:1217: sprintf(buff, "0,00,%04ld,%05d,%03d,%03d,%03d\n", freq100, weight, (int)curr_angle);
1C53 904E10    6058            mov     dptr,#_curr_angle
1C56 E0        6059            movx    a,@dptr
1C57 FA        6060            mov     r2,a
1C58 A3        6061            inc     dptr
1C59 E0        6062            movx    a,@dptr
1C5A FB        6063            mov     r3,a
1C5B A3        6064            inc     dptr
1C5C E0        6065            movx    a,@dptr
1C5D FC        6066            mov     r4,a
1C5E A3        6067            inc     dptr
1C5F E0        6068            movx    a,@dptr
1C60 8A82      6069            mov     dpl,r2
1C62 8B83      6070            mov     dph,r3
1C64 8CF0      6071            mov     b,r4
1C66 120000    6072            lcall   ___fs2sint
1C69 AA82      6073            mov     r2,dpl
1C6B AB83      6074            mov     r3,dph
1C6D C002      6075            push    ar2
1C6F C003      6076            push    ar3
1C71 904CD0    6077            mov     dptr,#_weight
1C74 E0        6078            movx    a,@dptr
1C75 C0E0      6079            push    acc
1C77 A3        6080            inc     dptr
1C78 E0        6081            movx    a,@dptr
1C79 C0E0      6082            push    acc
1C7B 9056E0    6083            mov     dptr,#_freq100
1C7E E0        6084            movx    a,@dptr
1C7F C0E0      6085            push    acc
1C81 A3        6086            inc     dptr
1C82 E0        6087            movx    a,@dptr
1C83 C0E0      6088            push    acc
1C85 A3        6089            inc     dptr
1C86 E0        6090            movx    a,@dptr
1C87 C0E0      6091            push    acc
1C89 A3        6092            inc     dptr
1C8A E0        6093            movx    a,@dptr
1C8B C0E0      6094            push    acc
1C8D 7478      6095            mov     a,#__str_7
1C8F C0E0      6096            push    acc
1C91 741B      6097            mov     a,#(__str_7 >> 8)
1C93 C0E0      6098            push    acc
1C95 7480      6099            mov     a,#0x80
1C97 C0E0      6100            push    acc
1C99 7420      6101            mov     a,#_buff
1C9B C0E0      6102            push    acc
1C9D 7457      6103            mov     a,#(_buff >> 8)
1C9F C0E0      6104            push    acc
1CA1 7440      6105            mov     a,#0x40
1CA3 C0E0      6106            push    acc
1CA5 120000    6107            lcall   _sprintf
1CA8 E581      6108            mov     a,sp
1CAA 24F2      6109            add     a,#0xf2
1CAC F581      6110            mov     sp,a
1CAE           6111   ;        main.c:1218: dummy++;
1CAE 90D2A0    6112            mov     dptr,#_Auto_mode_slave_dummy_1_230
1CB1 7401      6113            mov     a,#0x01
1CB3 F0        6114            movx    @dptr,a
1CB4 E4        6115            clr     a
1CB5 A3        6116            inc     dptr
1CB6 F0        6117            movx    @dptr,a
1CB7           6118   ;        main.c:1219: waitms(5); 
1CB7 900005    6119            mov     dptr,#0x0005
1CBA 120000    6120            lcall   _waitms
1CBD           6121   ;        main.c:1220: sendstr1(buff);
1CBD 905720    6122            mov     dptr,#_buff
1CC0 75F040    6123            mov     b,#0x40
1CC3 120000    6124            lcall   _sendstr1
1CC6           6125   ;        main.c:1221: if(dummy = 30) break;
1CC6 90D2A0    6126            mov     dptr,#_Auto_mode_slave_dummy_1_230
1CC9 741E      6127            mov     a,#0x1E
1CCB F0        6128            movx    @dptr,a
1CCC E4        6129            clr     a
1CCD A3        6130            inc     dptr
1CCE F0        6131            movx    @dptr,a
1CCF 22        6132            ret
1CD0           6133   ;------------------------------------------------------------
1CD0           6134   ;Allocation info for local variables in function 'Joystick_Control'
1CD0           6135   ;------------------------------------------------------------
1CD0           6136   ;vy_ptr                    Allocated with name '_Joystick_Control_PARM_2'
1CD0           6137   ;vx_ptr                    Allocated to registers r2 r3 r4 
1CD0           6138   ;sloc0                     Allocated with name '_Joystick_Control_sloc0_1_0'
1CD0           6139   ;sloc1                     Allocated with name '_Joystick_Control_sloc1_1_0'
1CD0           6140   ;sloc2                     Allocated with name '_Joystick_Control_sloc2_1_0'
1CD0           6141   ;sloc3                     Allocated with name '_Joystick_Control_sloc3_1_0'
1CD0           6142   ;sloc4                     Allocated with name '_Joystick_Control_sloc4_1_0'
1CD0           6143   ;sloc5                     Allocated with name '_Joystick_Control_sloc5_1_0'
1CD0           6144   ;vx_error                  Allocated with name '_Joystick_Control_vx_error_1_242'
1CD0           6145   ;vy_error                  Allocated with name '_Joystick_Control_vy_error_1_242'
1CD0           6146   ;vx_err                    Allocated with name '_Joystick_Control_vx_err_1_242'
1CD0           6147   ;vy_err                    Allocated with name '_Joystick_Control_vy_err_1_242'
1CD0           6148   ;------------------------------------------------------------
1CD0           6149   ;        main.c:1227: float Joystick_Control(int *vx_ptr, int *vy_ptr)
1CD0           6150   ;        -----------------------------------------
1CD0           6151   ;         function Joystick_Control
1CD0           6152   ;        -----------------------------------------
1CD0           6153   _Joystick_Control:
1CD0           6154   ;        main.c:1231: vx = *vx_ptr; 
1CD0 120000    6155            lcall   __gptrget
1CD3 FA        6156            mov     r2,a
1CD4 A3        6157            inc     dptr
1CD5 120000    6158            lcall   __gptrget
1CD8 FB        6159            mov     r3,a
1CD9 904FA0    6160            mov     dptr,#_vx
1CDC EA        6161            mov     a,r2
1CDD F0        6162            movx    @dptr,a
1CDE A3        6163            inc     dptr
1CDF EB        6164            mov     a,r3
1CE0 F0        6165            movx    @dptr,a
1CE1           6166   ;        main.c:1232: vy = *vy_ptr; 
1CE1 AA70      6167            mov     r2,_Joystick_Control_PARM_2
1CE3 AB71      6168            mov     r3,(_Joystick_Control_PARM_2 + 1)
1CE5 AC72      6169            mov     r4,(_Joystick_Control_PARM_2 + 2)
1CE7 8A82      6170            mov     dpl,r2
1CE9 8B83      6171            mov     dph,r3
1CEB 8CF0      6172            mov     b,r4
1CED 120000    6173            lcall   __gptrget
1CF0 FA        6174            mov     r2,a
1CF1 A3        6175            inc     dptr
1CF2 120000    6176            lcall   __gptrget
1CF5 FB        6177            mov     r3,a
1CF6 904F60    6178            mov     dptr,#_vy
1CF9 EA        6179            mov     a,r2
1CFA F0        6180            movx    @dptr,a
1CFB A3        6181            inc     dptr
1CFC EB        6182            mov     a,r3
1CFD F0        6183            movx    @dptr,a
1CFE           6184   ;        main.c:1235: raw_angle = Read_angle();
1CFE 120000    6185            lcall   _Read_angle
1D01 AA82      6186            mov     r2,dpl
1D03 AB83      6187            mov     r3,dph
1D05 ACF0      6188            mov     r4,b
1D07 FD        6189            mov     r5,a
1D08 904DD0    6190            mov     dptr,#_raw_angle
1D0B EA        6191            mov     a,r2
1D0C F0        6192            movx    @dptr,a
1D0D A3        6193            inc     dptr
1D0E EB        6194            mov     a,r3
1D0F F0        6195            movx    @dptr,a
1D10 A3        6196            inc     dptr
1D11 EC        6197            mov     a,r4
1D12 F0        6198            movx    @dptr,a
1D13 A3        6199            inc     dptr
1D14 ED        6200            mov     a,r5
1D15 F0        6201            movx    @dptr,a
1D16           6202   ;        main.c:1238: vx_error = abs(vx-vx_thres)*100/vx_thres; 
1D16 905020    6203            mov     dptr,#_vx_thres
1D19 E0        6204            movx    a,@dptr
1D1A FA        6205            mov     r2,a
1D1B A3        6206            inc     dptr
1D1C E0        6207            movx    a,@dptr
1D1D FB        6208            mov     r3,a
1D1E 904FA0    6209            mov     dptr,#_vx
1D21 E0        6210            movx    a,@dptr
1D22 FC        6211            mov     r4,a
1D23 A3        6212            inc     dptr
1D24 E0        6213            movx    a,@dptr
1D25 FD        6214            mov     r5,a
1D26 EC        6215            mov     a,r4
1D27 C3        6216            clr     c
1D28 9A        6217            subb    a,r2
1D29 F582      6218            mov     dpl,a
1D2B ED        6219            mov     a,r5
1D2C 9B        6220            subb    a,r3
1D2D F583      6221            mov     dph,a
1D2F 120000    6222            lcall   _abs
1D32 858200    6223            mov     __mulint_PARM_2,dpl
1D35 858301    6224            mov     (__mulint_PARM_2 + 1),dph
1D38 900064    6225            mov     dptr,#0x0064
1D3B 120000    6226            lcall   __mulint
1D3E AA82      6227            mov     r2,dpl
1D40 AB83      6228            mov     r3,dph
1D42 905020    6229            mov     dptr,#_vx_thres
1D45 E0        6230            movx    a,@dptr
1D46 F500      6231            mov     __divsint_PARM_2,a
1D48 A3        6232            inc     dptr
1D49 E0        6233            movx    a,@dptr
1D4A F501      6234            mov     (__divsint_PARM_2 + 1),a
1D4C 8A82      6235            mov     dpl,r2
1D4E 8B83      6236            mov     dph,r3
1D50 120000    6237            lcall   __divsint
1D53 E582      6238            mov     a,dpl
1D55 8583F0    6239            mov     b,dph
1D58 90D300    6240            mov     dptr,#_Joystick_Control_vx_error_1_242
1D5B F0        6241            movx    @dptr,a
1D5C A3        6242            inc     dptr
1D5D E5F0      6243            mov     a,b
1D5F F0        6244            movx    @dptr,a
1D60           6245   ;        main.c:1239: vy_error = abs(vy-vy_thres)*100/vy_thres; 
1D60 904FE0    6246            mov     dptr,#_vy_thres
1D63 E0        6247            movx    a,@dptr
1D64 FA        6248            mov     r2,a
1D65 A3        6249            inc     dptr
1D66 E0        6250            movx    a,@dptr
1D67 FB        6251            mov     r3,a
1D68 904F60    6252            mov     dptr,#_vy
1D6B E0        6253            movx    a,@dptr
1D6C FC        6254            mov     r4,a
1D6D A3        6255            inc     dptr
1D6E E0        6256            movx    a,@dptr
1D6F FD        6257            mov     r5,a
1D70 EC        6258            mov     a,r4
1D71 C3        6259            clr     c
1D72 9A        6260            subb    a,r2
1D73 F582      6261            mov     dpl,a
1D75 ED        6262            mov     a,r5
1D76 9B        6263            subb    a,r3
1D77 F583      6264            mov     dph,a
1D79 120000    6265            lcall   _abs
1D7C 858200    6266            mov     __mulint_PARM_2,dpl
1D7F 858301    6267            mov     (__mulint_PARM_2 + 1),dph
1D82 900064    6268            mov     dptr,#0x0064
1D85 120000    6269            lcall   __mulint
1D88 AA82      6270            mov     r2,dpl
1D8A AB83      6271            mov     r3,dph
1D8C 904FE0    6272            mov     dptr,#_vy_thres
1D8F E0        6273            movx    a,@dptr
1D90 FC        6274            mov     r4,a
1D91 A3        6275            inc     dptr
1D92 E0        6276            movx    a,@dptr
1D93 FD        6277            mov     r5,a
1D94 8C00      6278            mov     __divsint_PARM_2,r4
1D96 8D01      6279            mov     (__divsint_PARM_2 + 1),r5
1D98 8A82      6280            mov     dpl,r2
1D9A 8B83      6281            mov     dph,r3
1D9C C004      6282            push    ar4
1D9E C005      6283            push    ar5
1DA0 120000    6284            lcall   __divsint
1DA3 AA82      6285            mov     r2,dpl
1DA5 AB83      6286            mov     r3,dph
1DA7 D005      6287            pop     ar5
1DA9 D004      6288            pop     ar4
1DAB 90D360    6289            mov     dptr,#_Joystick_Control_vy_error_1_242
1DAE EA        6290            mov     a,r2
1DAF F0        6291            movx    @dptr,a
1DB0 A3        6292            inc     dptr
1DB1 EB        6293            mov     a,r3
1DB2 F0        6294            movx    @dptr,a
1DB3           6295   ;        main.c:1240: vx_err = vx-vx_thres; 
1DB3 905020    6296            mov     dptr,#_vx_thres
1DB6 E0        6297            movx    a,@dptr
1DB7 FE        6298            mov     r6,a
1DB8 A3        6299            inc     dptr
1DB9 E0        6300            movx    a,@dptr
1DBA FF        6301            mov     r7,a
1DBB 904FA0    6302            mov     dptr,#_vx
1DBE E0        6303            movx    a,@dptr
1DBF F8        6304            mov     r0,a
1DC0 A3        6305            inc     dptr
1DC1 E0        6306            movx    a,@dptr
1DC2 F9        6307            mov     r1,a
1DC3 E8        6308            mov     a,r0
1DC4 C3        6309            clr     c
1DC5 9E        6310            subb    a,r6
1DC6 FE        6311            mov     r6,a
1DC7 E9        6312            mov     a,r1
1DC8 9F        6313            subb    a,r7
1DC9 FF        6314            mov     r7,a
1DCA 90D3B0    6315            mov     dptr,#_Joystick_Control_vx_err_1_242
1DCD EE        6316            mov     a,r6
1DCE F0        6317            movx    @dptr,a
1DCF A3        6318            inc     dptr
1DD0 EF        6319            mov     a,r7
1DD1 F0        6320            movx    @dptr,a
1DD2           6321   ;        main.c:1241: vy_err = vy-vy_thres; 
1DD2 904F60    6322            mov     dptr,#_vy
1DD5 E0        6323            movx    a,@dptr
1DD6 F8        6324            mov     r0,a
1DD7 A3        6325            inc     dptr
1DD8 E0        6326            movx    a,@dptr
1DD9 F9        6327            mov     r1,a
1DDA E8        6328            mov     a,r0
1DDB C3        6329            clr     c
1DDC 9C        6330            subb    a,r4
1DDD F540      6331            mov     _Joystick_Control_sloc0_1_0,a
1DDF E9        6332            mov     a,r1
1DE0 9D        6333            subb    a,r5
1DE1 F541      6334            mov     (_Joystick_Control_sloc0_1_0 + 1),a
1DE3 90D400    6335            mov     dptr,#_Joystick_Control_vy_err_1_242
1DE6 E540      6336            mov     a,_Joystick_Control_sloc0_1_0
1DE8 F0        6337            movx    @dptr,a
1DE9 A3        6338            inc     dptr
1DEA E541      6339            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
1DEC F0        6340            movx    @dptr,a
1DED           6341   ;        main.c:1242: pwm_left = 0; 
1DED 9051A0    6342            mov     dptr,#_pwm_left
1DF0           6343   ;        main.c:1243: pwm_right = 0; 
1DF0 E4        6344            clr     a
1DF1 F0        6345            movx    @dptr,a
1DF2 905160    6346            mov     dptr,#_pwm_right
1DF5 F0        6347            movx    @dptr,a
1DF6           6348   ;        main.c:1245: if ((vy_error>5) && (vx_error<5)){
1DF6 C3        6349            clr     c
1DF7 7405      6350            mov     a,#0x05
1DF9 9A        6351            subb    a,r2
1DFA E4        6352            clr     a
1DFB 6480      6353            xrl     a,#0x80
1DFD 8BF0      6354            mov     b,r3
1DFF 63F080    6355            xrl     b,#0x80
1E02 95F0      6356            subb    a,b
1E04 E4        6357            clr     a
1E05 33        6358            rlc     a
1E06 F5E0      6359            mov     _Joystick_Control_sloc2_1_0,a
1E08 7000      6360            jnz     L044062?
1E0A 020000    6361            ljmp    L044005?
1E0D           6362   L044062?:
1E0D 90D300    6363            mov     dptr,#_Joystick_Control_vx_error_1_242
1E10 E0        6364            movx    a,@dptr
1E11 F9        6365            mov     r1,a
1E12 A3        6366            inc     dptr
1E13 E0        6367            movx    a,@dptr
1E14 F8        6368            mov     r0,a
1E15 C3        6369            clr     c
1E16 E9        6370            mov     a,r1
1E17 9405      6371            subb    a,#0x05
1E19 E8        6372            mov     a,r0
1E1A 6480      6373            xrl     a,#0x80
1E1C 9480      6374            subb    a,#0x80
1E1E 4000      6375            jc      L044063?
1E20 020000    6376            ljmp    L044005?
1E23           6377   L044063?:
1E23           6378   ;        main.c:1246: pwm_left = vy_error; 
1E23 9051A0    6379            mov     dptr,#_pwm_left
1E26 EA        6380            mov     a,r2
1E27 F0        6381            movx    @dptr,a
1E28           6382   ;        main.c:1247: pwm_right = vy_error * pwm_corr; 
1E28 8A82      6383            mov     dpl,r2
1E2A 8B83      6384            mov     dph,r3
1E2C C002      6385            push    ar2
1E2E C003      6386            push    ar3
1E30 C006      6387            push    ar6
1E32 C007      6388            push    ar7
1E34 120000    6389            lcall   ___sint2fs
1E37 A982      6390            mov     r1,dpl
1E39 A883      6391            mov     r0,dph
1E3B ACF0      6392            mov     r4,b
1E3D FD        6393            mov     r5,a
1E3E 904E50    6394            mov     dptr,#_pwm_corr
1E41 E0        6395            movx    a,@dptr
1E42 C0E0      6396            push    acc
1E44 A3        6397            inc     dptr
1E45 E0        6398            movx    a,@dptr
1E46 C0E0      6399            push    acc
1E48 A3        6400            inc     dptr
1E49 E0        6401            movx    a,@dptr
1E4A C0E0      6402            push    acc
1E4C A3        6403            inc     dptr
1E4D E0        6404            movx    a,@dptr
1E4E C0E0      6405            push    acc
1E50 8982      6406            mov     dpl,r1
1E52 8883      6407            mov     dph,r0
1E54 8CF0      6408            mov     b,r4
1E56 ED        6409            mov     a,r5
1E57 120000    6410            lcall   ___fsmul
1E5A AC82      6411            mov     r4,dpl
1E5C AD83      6412            mov     r5,dph
1E5E A8F0      6413            mov     r0,b
1E60 F9        6414            mov     r1,a
1E61 E581      6415            mov     a,sp
1E63 24FC      6416            add     a,#0xfc
1E65 F581      6417            mov     sp,a
1E67 8C82      6418            mov     dpl,r4
1E69 8D83      6419            mov     dph,r5
1E6B 88F0      6420            mov     b,r0
1E6D E9        6421            mov     a,r1
1E6E 120000    6422            lcall   ___fs2uchar
1E71 858290    6423            mov     _Joystick_Control_sloc1_1_0,dpl
1E74 D007      6424            pop     ar7
1E76 D006      6425            pop     ar6
1E78 D003      6426            pop     ar3
1E7A D002      6427            pop     ar2
1E7C 905160    6428            mov     dptr,#_pwm_right
1E7F E590      6429            mov     a,_Joystick_Control_sloc1_1_0
1E81 F0        6430            movx    @dptr,a
1E82           6431   ;        main.c:1248: if (vy_err > 0){ //move forward
1E82 C3        6432            clr     c
1E83 E4        6433            clr     a
1E84 9540      6434            subb    a,_Joystick_Control_sloc0_1_0
1E86 E4        6435            clr     a
1E87 6480      6436            xrl     a,#0x80
1E89 8541F0    6437            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
1E8C 63F080    6438            xrl     b,#0x80
1E8F 95F0      6439            subb    a,b
1E91 5000      6440            jnc     L044002?
1E93           6441   ;        main.c:1249: L_motor_dir = 0; 
1E93 905120    6442            mov     dptr,#_L_motor_dir
1E96           6443   ;        main.c:1250: R_motor_dir = 0; 
1E96 E4        6444            clr     a
1E97 F0        6445            movx    @dptr,a
1E98 9050E0    6446            mov     dptr,#_R_motor_dir
1E9B F0        6447            movx    @dptr,a
1E9C 8000      6448            sjmp    L044005?
1E9E           6449   L044002?:
1E9E           6450   ;        main.c:1253: L_motor_dir = 1; 
1E9E 905120    6451            mov     dptr,#_L_motor_dir
1EA1 7401      6452            mov     a,#0x01
1EA3 F0        6453            movx    @dptr,a
1EA4           6454   ;        main.c:1254: R_motor_dir = 1; 
1EA4 9050E0    6455            mov     dptr,#_R_motor_dir
1EA7 7401      6456            mov     a,#0x01
1EA9 F0        6457            movx    @dptr,a
1EAA           6458   ;        main.c:1255: pwm_right *= 1.05;
1EAA 859082    6459            mov     dpl,_Joystick_Control_sloc1_1_0
1EAD C002      6460            push    ar2
1EAF C003      6461            push    ar3
1EB1 C006      6462            push    ar6
1EB3 C007      6463            push    ar7
1EB5 120000    6464            lcall   ___uchar2fs
1EB8 AC82      6465            mov     r4,dpl
1EBA AD83      6466            mov     r5,dph
1EBC A9F0      6467            mov     r1,b
1EBE F8        6468            mov     r0,a
1EBF C004      6469            push    ar4
1EC1 C005      6470            push    ar5
1EC3 C001      6471            push    ar1
1EC5 C000      6472            push    ar0
1EC7 906666    6473            mov     dptr,#0x6666
1ECA 75F086    6474            mov     b,#0x86
1ECD 743F      6475            mov     a,#0x3F
1ECF 120000    6476            lcall   ___fsmul
1ED2 AC82      6477            mov     r4,dpl
1ED4 AD83      6478            mov     r5,dph
1ED6 A8F0      6479            mov     r0,b
1ED8 F9        6480            mov     r1,a
1ED9 E581      6481            mov     a,sp
1EDB 24FC      6482            add     a,#0xfc
1EDD F581      6483            mov     sp,a
1EDF 8C82      6484            mov     dpl,r4
1EE1 8D83      6485            mov     dph,r5
1EE3 88F0      6486            mov     b,r0
1EE5 E9        6487            mov     a,r1
1EE6 120000    6488            lcall   ___fs2uchar
1EE9 E582      6489            mov     a,dpl
1EEB D007      6490            pop     ar7
1EED D006      6491            pop     ar6
1EEF D003      6492            pop     ar3
1EF1 D002      6493            pop     ar2
1EF3 905160    6494            mov     dptr,#_pwm_right
1EF6 F0        6495            movx    @dptr,a
1EF7           6496   ;        main.c:1338: return curr_angle; 
1EF7           6497   ;        main.c:1255: pwm_right *= 1.05;
1EF7           6498   L044005?:
1EF7           6499   ;        main.c:1258: if ((vx_error>5)&&(vy_error<5)){
1EF7 90D300    6500            mov     dptr,#_Joystick_Control_vx_error_1_242
1EFA E0        6501            movx    a,@dptr
1EFB FC        6502            mov     r4,a
1EFC A3        6503            inc     dptr
1EFD E0        6504            movx    a,@dptr
1EFE FD        6505            mov     r5,a
1EFF C3        6506            clr     c
1F00 7405      6507            mov     a,#0x05
1F02 9C        6508            subb    a,r4
1F03 E4        6509            clr     a
1F04 6480      6510            xrl     a,#0x80
1F06 8DF0      6511            mov     b,r5
1F08 63F080    6512            xrl     b,#0x80
1F0B 95F0      6513            subb    a,b
1F0D E4        6514            clr     a
1F0E 33        6515            rlc     a
1F0F F9        6516            mov     r1,a
1F10 7000      6517            jnz     L044065?
1F12 020000    6518            ljmp    L044015?
1F15           6519   L044065?:
1F15 C3        6520            clr     c
1F16 EA        6521            mov     a,r2
1F17 9405      6522            subb    a,#0x05
1F19 EB        6523            mov     a,r3
1F1A 6480      6524            xrl     a,#0x80
1F1C 9480      6525            subb    a,#0x80
1F1E 4000      6526            jc      L044066?
1F20 020000    6527            ljmp    L044015?
1F23           6528   L044066?:
1F23           6529   ;        main.c:1259: pwm_left = vx_error; 
1F23 C001      6530            push    ar1
1F25 9051A0    6531            mov     dptr,#_pwm_left
1F28 EC        6532            mov     a,r4
1F29 F0        6533            movx    @dptr,a
1F2A           6534   ;        main.c:1260: pwm_right = vx_error * pwm_corr; 
1F2A 8C82      6535            mov     dpl,r4
1F2C 8D83      6536            mov     dph,r5
1F2E C004      6537            push    ar4
1F30 C005      6538            push    ar5
1F32 C006      6539            push    ar6
1F34 C007      6540            push    ar7
1F36 120000    6541            lcall   ___sint2fs
1F39 AA82      6542            mov     r2,dpl
1F3B AB83      6543            mov     r3,dph
1F3D A9F0      6544            mov     r1,b
1F3F F8        6545            mov     r0,a
1F40 904E50    6546            mov     dptr,#_pwm_corr
1F43 E0        6547            movx    a,@dptr
1F44 C0E0      6548            push    acc
1F46 A3        6549            inc     dptr
1F47 E0        6550            movx    a,@dptr
1F48 C0E0      6551            push    acc
1F4A A3        6552            inc     dptr
1F4B E0        6553            movx    a,@dptr
1F4C C0E0      6554            push    acc
1F4E A3        6555            inc     dptr
1F4F E0        6556            movx    a,@dptr
1F50 C0E0      6557            push    acc
1F52 8A82      6558            mov     dpl,r2
1F54 8B83      6559            mov     dph,r3
1F56 89F0      6560            mov     b,r1
1F58 E8        6561            mov     a,r0
1F59 120000    6562            lcall   ___fsmul
1F5C AA82      6563            mov     r2,dpl
1F5E AB83      6564            mov     r3,dph
1F60 A8F0      6565            mov     r0,b
1F62 F9        6566            mov     r1,a
1F63 E581      6567            mov     a,sp
1F65 24FC      6568            add     a,#0xfc
1F67 F581      6569            mov     sp,a
1F69 8A82      6570            mov     dpl,r2
1F6B 8B83      6571            mov     dph,r3
1F6D 88F0      6572            mov     b,r0
1F6F E9        6573            mov     a,r1
1F70 C001      6574            push    ar1
1F72 120000    6575            lcall   ___fs2uchar
1F75 E582      6576            mov     a,dpl
1F77 D001      6577            pop     ar1
1F79 D007      6578            pop     ar7
1F7B D006      6579            pop     ar6
1F7D D005      6580            pop     ar5
1F7F D004      6581            pop     ar4
1F81 905160    6582            mov     dptr,#_pwm_right
1F84 F0        6583            movx    @dptr,a
1F85           6584   ;        main.c:1261: if (vx_err > 0){ //turn right
1F85 C3        6585            clr     c
1F86 E4        6586            clr     a
1F87 9E        6587            subb    a,r6
1F88 E4        6588            clr     a
1F89 6480      6589            xrl     a,#0x80
1F8B 8FF0      6590            mov     b,r7
1F8D 63F080    6591            xrl     b,#0x80
1F90 95F0      6592            subb    a,b
1F92 D001      6593            pop     ar1
1F94 4000      6594            jc      L044067?
1F96 020000    6595            ljmp    L044008?
1F99           6596   L044067?:
1F99           6597   ;        main.c:1262: L_motor_dir = 1; 
1F99 C001      6598            push    ar1
1F9B 905120    6599            mov     dptr,#_L_motor_dir
1F9E 7401      6600            mov     a,#0x01
1FA0 F0        6601            movx    @dptr,a
1FA1           6602   ;        main.c:1263: R_motor_dir = 0;
1FA1 9050E0    6603            mov     dptr,#_R_motor_dir
1FA4 E4        6604            clr     a
1FA5 F0        6605            movx    @dptr,a
1FA6           6606   ;        main.c:1264: curr_angle += angle_diff * 1.45; // TUNE THIS
1FA6 C004      6607            push    ar4
1FA8 C005      6608            push    ar5
1FAA C001      6609            push    ar1
1FAC 904D50    6610            mov     dptr,#_angle_diff
1FAF E0        6611            movx    a,@dptr
1FB0 C0E0      6612            push    acc
1FB2 A3        6613            inc     dptr
1FB3 E0        6614            movx    a,@dptr
1FB4 C0E0      6615            push    acc
1FB6 A3        6616            inc     dptr
1FB7 E0        6617            movx    a,@dptr
1FB8 C0E0      6618            push    acc
1FBA A3        6619            inc     dptr
1FBB E0        6620            movx    a,@dptr
1FBC C0E0      6621            push    acc
1FBE 90999A    6622            mov     dptr,#0x999A
1FC1 75F0B9    6623            mov     b,#0xB9
1FC4 743F      6624            mov     a,#0x3F
1FC6 120000    6625            lcall   ___fsmul
1FC9 858230    6626            mov     _Joystick_Control_sloc3_1_0,dpl
1FCC 858331    6627            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
1FCF 85F032    6628            mov     (_Joystick_Control_sloc3_1_0 + 2),b
1FD2 F533      6629            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1FD4 E581      6630            mov     a,sp
1FD6 24FC      6631            add     a,#0xfc
1FD8 F581      6632            mov     sp,a
1FDA D001      6633            pop     ar1
1FDC 904E10    6634            mov     dptr,#_curr_angle
1FDF E0        6635            movx    a,@dptr
1FE0 F8        6636            mov     r0,a
1FE1 A3        6637            inc     dptr
1FE2 E0        6638            movx    a,@dptr
1FE3 F9        6639            mov     r1,a
1FE4 A3        6640            inc     dptr
1FE5 E0        6641            movx    a,@dptr
1FE6 FA        6642            mov     r2,a
1FE7 A3        6643            inc     dptr
1FE8 E0        6644            movx    a,@dptr
1FE9 FB        6645            mov     r3,a
1FEA C001      6646            push    ar1
1FEC C030      6647            push    _Joystick_Control_sloc3_1_0
1FEE C031      6648            push    (_Joystick_Control_sloc3_1_0 + 1)
1FF0 C032      6649            push    (_Joystick_Control_sloc3_1_0 + 2)
1FF2 C033      6650            push    (_Joystick_Control_sloc3_1_0 + 3)
1FF4 8882      6651            mov     dpl,r0
1FF6 8983      6652            mov     dph,r1
1FF8 8AF0      6653            mov     b,r2
1FFA EB        6654            mov     a,r3
1FFB 120000    6655            lcall   ___fsadd
1FFE AA82      6656            mov     r2,dpl
2000 AB83      6657            mov     r3,dph
2002 AEF0      6658            mov     r6,b
2004 FF        6659            mov     r7,a
2005 E581      6660            mov     a,sp
2007 24FC      6661            add     a,#0xfc
2009 F581      6662            mov     sp,a
200B D001      6663            pop     ar1
200D D005      6664            pop     ar5
200F D004      6665            pop     ar4
2011 904E10    6666            mov     dptr,#_curr_angle
2014 EA        6667            mov     a,r2
2015 F0        6668            movx    @dptr,a
2016 A3        6669            inc     dptr
2017 EB        6670            mov     a,r3
2018 F0        6671            movx    @dptr,a
2019 A3        6672            inc     dptr
201A EE        6673            mov     a,r6
201B F0        6674            movx    @dptr,a
201C A3        6675            inc     dptr
201D EF        6676            mov     a,r7
201E F0        6677            movx    @dptr,a
201F D001      6678            pop     ar1
2021 020000    6679            ljmp    L044009?
2024           6680   L044008?:
2024           6681   ;        main.c:1267: L_motor_dir = 0; 
2024 C001      6682            push    ar1
2026 905120    6683            mov     dptr,#_L_motor_dir
2029 E4        6684            clr     a
202A F0        6685            movx    @dptr,a
202B           6686   ;        main.c:1268: R_motor_dir = 1; 
202B 9050E0    6687            mov     dptr,#_R_motor_dir
202E 7401      6688            mov     a,#0x01
2030 F0        6689            movx    @dptr,a
2031           6690   ;        main.c:1269: curr_angle -= angle_diff * 1.4; // TUNE THIS
2031 C004      6691            push    ar4
2033 C005      6692            push    ar5
2035 C001      6693            push    ar1
2037 904D50    6694            mov     dptr,#_angle_diff
203A E0        6695            movx    a,@dptr
203B C0E0      6696            push    acc
203D A3        6697            inc     dptr
203E E0        6698            movx    a,@dptr
203F C0E0      6699            push    acc
2041 A3        6700            inc     dptr
2042 E0        6701            movx    a,@dptr
2043 C0E0      6702            push    acc
2045 A3        6703            inc     dptr
2046 E0        6704            movx    a,@dptr
2047 C0E0      6705            push    acc
2049 903333    6706            mov     dptr,#0x3333
204C 75F0B3    6707            mov     b,#0xB3
204F 743F      6708            mov     a,#0x3F
2051 120000    6709            lcall   ___fsmul
2054 858230    6710            mov     _Joystick_Control_sloc3_1_0,dpl
2057 858331    6711            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
205A 85F032    6712            mov     (_Joystick_Control_sloc3_1_0 + 2),b
205D F533      6713            mov     (_Joystick_Control_sloc3_1_0 + 3),a
205F E581      6714            mov     a,sp
2061 24FC      6715            add     a,#0xfc
2063 F581      6716            mov     sp,a
2065 D001      6717            pop     ar1
2067 904E10    6718            mov     dptr,#_curr_angle
206A E0        6719            movx    a,@dptr
206B F8        6720            mov     r0,a
206C A3        6721            inc     dptr
206D E0        6722            movx    a,@dptr
206E F9        6723            mov     r1,a
206F A3        6724            inc     dptr
2070 E0        6725            movx    a,@dptr
2071 FA        6726            mov     r2,a
2072 A3        6727            inc     dptr
2073 E0        6728            movx    a,@dptr
2074 FB        6729            mov     r3,a
2075 C001      6730            push    ar1
2077 C030      6731            push    _Joystick_Control_sloc3_1_0
2079 C031      6732            push    (_Joystick_Control_sloc3_1_0 + 1)
207B C032      6733            push    (_Joystick_Control_sloc3_1_0 + 2)
207D C033      6734            push    (_Joystick_Control_sloc3_1_0 + 3)
207F 8882      6735            mov     dpl,r0
2081 8983      6736            mov     dph,r1
2083 8AF0      6737            mov     b,r2
2085 EB        6738            mov     a,r3
2086 120000    6739            lcall   ___fssub
2089 AA82      6740            mov     r2,dpl
208B AB83      6741            mov     r3,dph
208D AEF0      6742            mov     r6,b
208F FF        6743            mov     r7,a
2090 E581      6744            mov     a,sp
2092 24FC      6745            add     a,#0xfc
2094 F581      6746            mov     sp,a
2096 D001      6747            pop     ar1
2098 D005      6748            pop     ar5
209A D004      6749            pop     ar4
209C 904E10    6750            mov     dptr,#_curr_angle
209F EA        6751            mov     a,r2
20A0 F0        6752            movx    @dptr,a
20A1 A3        6753            inc     dptr
20A2 EB        6754            mov     a,r3
20A3 F0        6755            movx    @dptr,a
20A4 A3        6756            inc     dptr
20A5 EE        6757            mov     a,r6
20A6 F0        6758            movx    @dptr,a
20A7 A3        6759            inc     dptr
20A8 EF        6760            mov     a,r7
20A9 F0        6761            movx    @dptr,a
20AA           6762   ;        main.c:1338: return curr_angle; 
20AA D001      6763            pop     ar1
20AC           6764   ;        main.c:1269: curr_angle -= angle_diff * 1.4; // TUNE THIS
20AC           6765   L044009?:
20AC           6766   ;        main.c:1271: if (curr_angle > 360.0) curr_angle -= 360.0; 
20AC 904E10    6767            mov     dptr,#_curr_angle
20AF E0        6768            movx    a,@dptr
20B0 FA        6769            mov     r2,a
20B1 A3        6770            inc     dptr
20B2 E0        6771            movx    a,@dptr
20B3 FB        6772            mov     r3,a
20B4 A3        6773            inc     dptr
20B5 E0        6774            movx    a,@dptr
20B6 FE        6775            mov     r6,a
20B7 A3        6776            inc     dptr
20B8 E0        6777            movx    a,@dptr
20B9 FF        6778            mov     r7,a
20BA C002      6779            push    ar2
20BC C003      6780            push    ar3
20BE C004      6781            push    ar4
20C0 C005      6782            push    ar5
20C2 C006      6783            push    ar6
20C4 C007      6784            push    ar7
20C6 C001      6785            push    ar1
20C8 E4        6786            clr     a
20C9 C0E0      6787            push    acc
20CB C0E0      6788            push    acc
20CD 74B4      6789            mov     a,#0xB4
20CF C0E0      6790            push    acc
20D1 7443      6791            mov     a,#0x43
20D3 C0E0      6792            push    acc
20D5 8A82      6793            mov     dpl,r2
20D7 8B83      6794            mov     dph,r3
20D9 8EF0      6795            mov     b,r6
20DB EF        6796            mov     a,r7
20DC 120000    6797            lcall   ___fsgt
20DF A882      6798            mov     r0,dpl
20E1 E581      6799            mov     a,sp
20E3 24FC      6800            add     a,#0xfc
20E5 F581      6801            mov     sp,a
20E7 D001      6802            pop     ar1
20E9 D007      6803            pop     ar7
20EB D006      6804            pop     ar6
20ED D005      6805            pop     ar5
20EF D004      6806            pop     ar4
20F1 D003      6807            pop     ar3
20F3 D002      6808            pop     ar2
20F5 E8        6809            mov     a,r0
20F6 6000      6810            jz      L044011?
20F8 C004      6811            push    ar4
20FA C005      6812            push    ar5
20FC C001      6813            push    ar1
20FE E4        6814            clr     a
20FF C0E0      6815            push    acc
2101 C0E0      6816            push    acc
2103 74B4      6817            mov     a,#0xB4
2105 C0E0      6818            push    acc
2107 7443      6819            mov     a,#0x43
2109 C0E0      6820            push    acc
210B 8A82      6821            mov     dpl,r2
210D 8B83      6822            mov     dph,r3
210F 8EF0      6823            mov     b,r6
2111 EF        6824            mov     a,r7
2112 120000    6825            lcall   ___fssub
2115 AA82      6826            mov     r2,dpl
2117 AB83      6827            mov     r3,dph
2119 AEF0      6828            mov     r6,b
211B FF        6829            mov     r7,a
211C E581      6830            mov     a,sp
211E 24FC      6831            add     a,#0xfc
2120 F581      6832            mov     sp,a
2122 D001      6833            pop     ar1
2124 D005      6834            pop     ar5
2126 D004      6835            pop     ar4
2128 904E10    6836            mov     dptr,#_curr_angle
212B EA        6837            mov     a,r2
212C F0        6838            movx    @dptr,a
212D A3        6839            inc     dptr
212E EB        6840            mov     a,r3
212F F0        6841            movx    @dptr,a
2130 A3        6842            inc     dptr
2131 EE        6843            mov     a,r6
2132 F0        6844            movx    @dptr,a
2133 A3        6845            inc     dptr
2134 EF        6846            mov     a,r7
2135 F0        6847            movx    @dptr,a
2136           6848   L044011?:
2136           6849   ;        main.c:1272: if (curr_angle < 0.0) curr_angle += 360.0; 
2136 904E10    6850            mov     dptr,#_curr_angle
2139 E0        6851            movx    a,@dptr
213A FA        6852            mov     r2,a
213B A3        6853            inc     dptr
213C E0        6854            movx    a,@dptr
213D FB        6855            mov     r3,a
213E A3        6856            inc     dptr
213F E0        6857            movx    a,@dptr
2140 FE        6858            mov     r6,a
2141 A3        6859            inc     dptr
2142 E0        6860            movx    a,@dptr
2143 FF        6861            mov     r7,a
2144 C002      6862            push    ar2
2146 C003      6863            push    ar3
2148 C004      6864            push    ar4
214A C005      6865            push    ar5
214C C006      6866            push    ar6
214E C007      6867            push    ar7
2150 C001      6868            push    ar1
2152 E4        6869            clr     a
2153 C0E0      6870            push    acc
2155 C0E0      6871            push    acc
2157 C0E0      6872            push    acc
2159 C0E0      6873            push    acc
215B 8A82      6874            mov     dpl,r2
215D 8B83      6875            mov     dph,r3
215F 8EF0      6876            mov     b,r6
2161 EF        6877            mov     a,r7
2162 120000    6878            lcall   ___fslt
2165 A882      6879            mov     r0,dpl
2167 E581      6880            mov     a,sp
2169 24FC      6881            add     a,#0xfc
216B F581      6882            mov     sp,a
216D D001      6883            pop     ar1
216F D007      6884            pop     ar7
2171 D006      6885            pop     ar6
2173 D005      6886            pop     ar5
2175 D004      6887            pop     ar4
2177 D003      6888            pop     ar3
2179 D002      6889            pop     ar2
217B E8        6890            mov     a,r0
217C 6000      6891            jz      L044015?
217E C004      6892            push    ar4
2180 C005      6893            push    ar5
2182 C001      6894            push    ar1
2184 E4        6895            clr     a
2185 C0E0      6896            push    acc
2187 C0E0      6897            push    acc
2189 74B4      6898            mov     a,#0xB4
218B C0E0      6899            push    acc
218D 7443      6900            mov     a,#0x43
218F C0E0      6901            push    acc
2191 8A82      6902            mov     dpl,r2
2193 8B83      6903            mov     dph,r3
2195 8EF0      6904            mov     b,r6
2197 EF        6905            mov     a,r7
2198 120000    6906            lcall   ___fsadd
219B AA82      6907            mov     r2,dpl
219D AB83      6908            mov     r3,dph
219F AEF0      6909            mov     r6,b
21A1 FF        6910            mov     r7,a
21A2 E581      6911            mov     a,sp
21A4 24FC      6912            add     a,#0xfc
21A6 F581      6913            mov     sp,a
21A8 D001      6914            pop     ar1
21AA D005      6915            pop     ar5
21AC D004      6916            pop     ar4
21AE 904E10    6917            mov     dptr,#_curr_angle
21B1 EA        6918            mov     a,r2
21B2 F0        6919            movx    @dptr,a
21B3 A3        6920            inc     dptr
21B4 EB        6921            mov     a,r3
21B5 F0        6922            movx    @dptr,a
21B6 A3        6923            inc     dptr
21B7 EE        6924            mov     a,r6
21B8 F0        6925            movx    @dptr,a
21B9 A3        6926            inc     dptr
21BA EF        6927            mov     a,r7
21BB F0        6928            movx    @dptr,a
21BC           6929   L044015?:
21BC           6930   ;        main.c:1274: if ((vx_error>5)&&(vy_error)>5){
21BC E9        6931            mov     a,r1
21BD 7000      6932            jnz     L044070?
21BF 020000    6933            ljmp    L044040?
21C2           6934   L044070?:
21C2 E5E0      6935            mov     a,_Joystick_Control_sloc2_1_0
21C4 7000      6936            jnz     L044071?
21C6 020000    6937            ljmp    L044040?
21C9           6938   L044071?:
21C9           6939   ;        main.c:1276: angle_diff = fabsf(raw_angle - last_raw_angle);
21C9 904DD0    6940            mov     dptr,#_raw_angle
21CC E0        6941            movx    a,@dptr
21CD FA        6942            mov     r2,a
21CE A3        6943            inc     dptr
21CF E0        6944            movx    a,@dptr
21D0 FB        6945            mov     r3,a
21D1 A3        6946            inc     dptr
21D2 E0        6947            movx    a,@dptr
21D3 FE        6948            mov     r6,a
21D4 A3        6949            inc     dptr
21D5 E0        6950            movx    a,@dptr
21D6 FF        6951            mov     r7,a
21D7 C004      6952            push    ar4
21D9 C005      6953            push    ar5
21DB 904D90    6954            mov     dptr,#_last_raw_angle
21DE E0        6955            movx    a,@dptr
21DF C0E0      6956            push    acc
21E1 A3        6957            inc     dptr
21E2 E0        6958            movx    a,@dptr
21E3 C0E0      6959            push    acc
21E5 A3        6960            inc     dptr
21E6 E0        6961            movx    a,@dptr
21E7 C0E0      6962            push    acc
21E9 A3        6963            inc     dptr
21EA E0        6964            movx    a,@dptr
21EB C0E0      6965            push    acc
21ED 8A82      6966            mov     dpl,r2
21EF 8B83      6967            mov     dph,r3
21F1 8EF0      6968            mov     b,r6
21F3 EF        6969            mov     a,r7
21F4 120000    6970            lcall   ___fssub
21F7 AA82      6971            mov     r2,dpl
21F9 AB83      6972            mov     r3,dph
21FB AEF0      6973            mov     r6,b
21FD FF        6974            mov     r7,a
21FE E581      6975            mov     a,sp
2200 24FC      6976            add     a,#0xfc
2202 F581      6977            mov     sp,a
2204 8A82      6978            mov     dpl,r2
2206 8B83      6979            mov     dph,r3
2208 8EF0      6980            mov     b,r6
220A EF        6981            mov     a,r7
220B 120000    6982            lcall   _fabsf
220E 858280    6983            mov     _Joystick_Control_sloc4_1_0,dpl
2211 858381    6984            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
2214 85F082    6985            mov     (_Joystick_Control_sloc4_1_0 + 2),b
2217 F583      6986            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2219 D005      6987            pop     ar5
221B D004      6988            pop     ar4
221D 904D50    6989            mov     dptr,#_angle_diff
2220 E580      6990            mov     a,_Joystick_Control_sloc4_1_0
2222 F0        6991            movx    @dptr,a
2223 A3        6992            inc     dptr
2224 E581      6993            mov     a,(_Joystick_Control_sloc4_1_0 + 1)
2226 F0        6994            movx    @dptr,a
2227 A3        6995            inc     dptr
2228 E582      6996            mov     a,(_Joystick_Control_sloc4_1_0 + 2)
222A F0        6997            movx    @dptr,a
222B A3        6998            inc     dptr
222C E583      6999            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
222E F0        7000            movx    @dptr,a
222F           7001   ;        main.c:1277: if (vy_err>0){
222F 90D400    7002            mov     dptr,#_Joystick_Control_vy_err_1_242
2232 E0        7003            movx    a,@dptr
2233 F8        7004            mov     r0,a
2234 A3        7005            inc     dptr
2235 E0        7006            movx    a,@dptr
2236 F9        7007            mov     r1,a
2237 C3        7008            clr     c
2238 E4        7009            clr     a
2239 98        7010            subb    a,r0
223A E4        7011            clr     a
223B 6480      7012            xrl     a,#0x80
223D 89F0      7013            mov     b,r1
223F 63F080    7014            xrl     b,#0x80
2242 95F0      7015            subb    a,b
2244 4000      7016            jc      L044072?
2246 020000    7017            ljmp    L044027?
2249           7018   L044072?:
2249           7019   ;        main.c:1278: L_motor_dir = 0; 
2249 C000      7020            push    ar0
224B C001      7021            push    ar1
224D 905120    7022            mov     dptr,#_L_motor_dir
2250           7023   ;        main.c:1279: R_motor_dir = 0; 
2250 E4        7024            clr     a
2251 F0        7025            movx    @dptr,a
2252 9050E0    7026            mov     dptr,#_R_motor_dir
2255 F0        7027            movx    @dptr,a
2256           7028   ;        main.c:1281: if (vx_err>0){
2256 90D3B0    7029            mov     dptr,#_Joystick_Control_vx_err_1_242
2259 E0        7030            movx    a,@dptr
225A F8        7031            mov     r0,a
225B A3        7032            inc     dptr
225C E0        7033            movx    a,@dptr
225D F9        7034            mov     r1,a
225E C3        7035            clr     c
225F E4        7036            clr     a
2260 98        7037            subb    a,r0
2261 E4        7038            clr     a
2262 6480      7039            xrl     a,#0x80
2264 89F0      7040            mov     b,r1
2266 63F080    7041            xrl     b,#0x80
2269 95F0      7042            subb    a,b
226B D001      7043            pop     ar1
226D D000      7044            pop     ar0
226F 4000      7045            jc      L044073?
2271 020000    7046            ljmp    L044024?
2274           7047   L044073?:
2274           7048   ;        main.c:1283: if (vy*100<=vy_thres*100/2){
2274 C000      7049            push    ar0
2276 C001      7050            push    ar1
2278 904F60    7051            mov     dptr,#_vy
227B E0        7052            movx    a,@dptr
227C F500      7053            mov     __mulint_PARM_2,a
227E A3        7054            inc     dptr
227F E0        7055            movx    a,@dptr
2280 F501      7056            mov     (__mulint_PARM_2 + 1),a
2282 900064    7057            mov     dptr,#0x0064
2285 C004      7058            push    ar4
2287 C005      7059            push    ar5
2289 C000      7060            push    ar0
228B C001      7061            push    ar1
228D 120000    7062            lcall   __mulint
2290 858230    7063            mov     _Joystick_Control_sloc3_1_0,dpl
2293 858331    7064            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
2296 D001      7065            pop     ar1
2298 D000      7066            pop     ar0
229A 904FE0    7067            mov     dptr,#_vy_thres
229D E0        7068            movx    a,@dptr
229E F500      7069            mov     __mulint_PARM_2,a
22A0 A3        7070            inc     dptr
22A1 E0        7071            movx    a,@dptr
22A2 F501      7072            mov     (__mulint_PARM_2 + 1),a
22A4 900064    7073            mov     dptr,#0x0064
22A7 120000    7074            lcall   __mulint
22AA A882      7075            mov     r0,dpl
22AC A983      7076            mov     r1,dph
22AE 750002    7077            mov     __divsint_PARM_2,#0x02
22B1 E4        7078            clr     a
22B2 F501      7079            mov     (__divsint_PARM_2 + 1),a
22B4 8882      7080            mov     dpl,r0
22B6 8983      7081            mov     dph,r1
22B8 120000    7082            lcall   __divsint
22BB A882      7083            mov     r0,dpl
22BD A983      7084            mov     r1,dph
22BF D005      7085            pop     ar5
22C1 D004      7086            pop     ar4
22C3 C3        7087            clr     c
22C4 E8        7088            mov     a,r0
22C5 9530      7089            subb    a,_Joystick_Control_sloc3_1_0
22C7 E9        7090            mov     a,r1
22C8 6480      7091            xrl     a,#0x80
22CA 8531F0    7092            mov     b,(_Joystick_Control_sloc3_1_0 + 1)
22CD 63F080    7093            xrl     b,#0x80
22D0 95F0      7094            subb    a,b
22D2 D001      7095            pop     ar1
22D4 D000      7096            pop     ar0
22D6 5000      7097            jnc     L044074?
22D8 020000    7098            ljmp    L044018?
22DB           7099   L044074?:
22DB           7100   ;        main.c:1284: pwm_left = vy_error; 
22DB C000      7101            push    ar0
22DD C001      7102            push    ar1
22DF 90D360    7103            mov     dptr,#_Joystick_Control_vy_error_1_242
22E2 E0        7104            movx    a,@dptr
22E3 F530      7105            mov     _Joystick_Control_sloc3_1_0,a
22E5 A3        7106            inc     dptr
22E6 E0        7107            movx    a,@dptr
22E7 F531      7108            mov     (_Joystick_Control_sloc3_1_0 + 1),a
22E9 9051A0    7109            mov     dptr,#_pwm_left
22EC E530      7110            mov     a,_Joystick_Control_sloc3_1_0
22EE F0        7111            movx    @dptr,a
22EF           7112   ;        main.c:1285: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
22EF 904E50    7113            mov     dptr,#_pwm_corr
22F2 E0        7114            movx    a,@dptr
22F3 F5D0      7115            mov     _Joystick_Control_sloc5_1_0,a
22F5 A3        7116            inc     dptr
22F6 E0        7117            movx    a,@dptr
22F7 F5D1      7118            mov     (_Joystick_Control_sloc5_1_0 + 1),a
22F9 A3        7119            inc     dptr
22FA E0        7120            movx    a,@dptr
22FB F5D2      7121            mov     (_Joystick_Control_sloc5_1_0 + 2),a
22FD A3        7122            inc     dptr
22FE E0        7123            movx    a,@dptr
22FF F5D3      7124            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2301 853082    7125            mov     dpl,_Joystick_Control_sloc3_1_0
2304 853183    7126            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
2307 C004      7127            push    ar4
2309 C005      7128            push    ar5
230B C000      7129            push    ar0
230D C001      7130            push    ar1
230F 120000    7131            lcall   ___sint2fs
2312 AE82      7132            mov     r6,dpl
2314 AF83      7133            mov     r7,dph
2316 AAF0      7134            mov     r2,b
2318 FB        7135            mov     r3,a
2319 C006      7136            push    ar6
231B C007      7137            push    ar7
231D C002      7138            push    ar2
231F C003      7139            push    ar3
2321 85D082    7140            mov     dpl,_Joystick_Control_sloc5_1_0
2324 85D183    7141            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2327 85D2F0    7142            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
232A E5D3      7143            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
232C 120000    7144            lcall   ___fsmul
232F AA82      7145            mov     r2,dpl
2331 AB83      7146            mov     r3,dph
2333 AEF0      7147            mov     r6,b
2335 FF        7148            mov     r7,a
2336 E581      7149            mov     a,sp
2338 24FC      7150            add     a,#0xfc
233A F581      7151            mov     sp,a
233C C002      7152            push    ar2
233E C003      7153            push    ar3
2340 C006      7154            push    ar6
2342 C007      7155            push    ar7
2344 900000    7156            mov     dptr,#0x0000
2347 75F0C8    7157            mov     b,#0xC8
234A 7442      7158            mov     a,#0x42
234C 120000    7159            lcall   ___fsmul
234F 8582D0    7160            mov     _Joystick_Control_sloc5_1_0,dpl
2352 8583D1    7161            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
2355 85F0D2    7162            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2358 F5D3      7163            mov     (_Joystick_Control_sloc5_1_0 + 3),a
235A E581      7164            mov     a,sp
235C 24FC      7165            add     a,#0xfc
235E F581      7166            mov     sp,a
2360 D001      7167            pop     ar1
2362 D000      7168            pop     ar0
2364 D005      7169            pop     ar5
2366 D004      7170            pop     ar4
2368 E530      7171            mov     a,_Joystick_Control_sloc3_1_0
236A 2C        7172            add     a,r4
236B F582      7173            mov     dpl,a
236D E531      7174            mov     a,(_Joystick_Control_sloc3_1_0 + 1)
236F 3D        7175            addc    a,r5
2370 F583      7176            mov     dph,a
2372 C004      7177            push    ar4
2374 C005      7178            push    ar5
2376 120000    7179            lcall   ___sint2fs
2379 A882      7180            mov     r0,dpl
237B A983      7181            mov     r1,dph
237D AAF0      7182            mov     r2,b
237F FB        7183            mov     r3,a
2380 C000      7184            push    ar0
2382 C001      7185            push    ar1
2384 C000      7186            push    ar0
2386 C001      7187            push    ar1
2388 C002      7188            push    ar2
238A C003      7189            push    ar3
238C 85D082    7190            mov     dpl,_Joystick_Control_sloc5_1_0
238F 85D183    7191            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2392 85D2F0    7192            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2395 E5D3      7193            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2397 120000    7194            lcall   ___fsdiv
239A AA82      7195            mov     r2,dpl
239C AB83      7196            mov     r3,dph
239E AEF0      7197            mov     r6,b
23A0 FF        7198            mov     r7,a
23A1 E581      7199            mov     a,sp
23A3 24FC      7200            add     a,#0xfc
23A5 F581      7201            mov     sp,a
23A7 8A82      7202            mov     dpl,r2
23A9 8B83      7203            mov     dph,r3
23AB 8EF0      7204            mov     b,r6
23AD EF        7205            mov     a,r7
23AE 120000    7206            lcall   ___fs2uchar
23B1 E582      7207            mov     a,dpl
23B3 D001      7208            pop     ar1
23B5 D000      7209            pop     ar0
23B7 D005      7210            pop     ar5
23B9 D004      7211            pop     ar4
23BB 905160    7212            mov     dptr,#_pwm_right
23BE F0        7213            movx    @dptr,a
23BF D001      7214            pop     ar1
23C1 D000      7215            pop     ar0
23C3 020000    7216            ljmp    L044019?
23C6           7217   L044018?:
23C6           7218   ;        main.c:1288: pwm_left = vx_error; 
23C6 C000      7219            push    ar0
23C8 C001      7220            push    ar1
23CA 9051A0    7221            mov     dptr,#_pwm_left
23CD EC        7222            mov     a,r4
23CE F0        7223            movx    @dptr,a
23CF           7224   ;        main.c:1289: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
23CF 904E50    7225            mov     dptr,#_pwm_corr
23D2 E0        7226            movx    a,@dptr
23D3 F5D0      7227            mov     _Joystick_Control_sloc5_1_0,a
23D5 A3        7228            inc     dptr
23D6 E0        7229            movx    a,@dptr
23D7 F5D1      7230            mov     (_Joystick_Control_sloc5_1_0 + 1),a
23D9 A3        7231            inc     dptr
23DA E0        7232            movx    a,@dptr
23DB F5D2      7233            mov     (_Joystick_Control_sloc5_1_0 + 2),a
23DD A3        7234            inc     dptr
23DE E0        7235            movx    a,@dptr
23DF F5D3      7236            mov     (_Joystick_Control_sloc5_1_0 + 3),a
23E1 8C82      7237            mov     dpl,r4
23E3 8D83      7238            mov     dph,r5
23E5 C004      7239            push    ar4
23E7 C005      7240            push    ar5
23E9 120000    7241            lcall   ___sint2fs
23EC A882      7242            mov     r0,dpl
23EE A983      7243            mov     r1,dph
23F0 AAF0      7244            mov     r2,b
23F2 FB        7245            mov     r3,a
23F3 C000      7246            push    ar0
23F5 C001      7247            push    ar1
23F7 C000      7248            push    ar0
23F9 C001      7249            push    ar1
23FB C002      7250            push    ar2
23FD C003      7251            push    ar3
23FF 85D082    7252            mov     dpl,_Joystick_Control_sloc5_1_0
2402 85D183    7253            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2405 85D2F0    7254            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2408 E5D3      7255            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
240A 120000    7256            lcall   ___fsmul
240D AA82      7257            mov     r2,dpl
240F AB83      7258            mov     r3,dph
2411 AEF0      7259            mov     r6,b
2413 FF        7260            mov     r7,a
2414 E581      7261            mov     a,sp
2416 24FC      7262            add     a,#0xfc
2418 F581      7263            mov     sp,a
241A C002      7264            push    ar2
241C C003      7265            push    ar3
241E C006      7266            push    ar6
2420 C007      7267            push    ar7
2422 900000    7268            mov     dptr,#0x0000
2425 75F0C8    7269            mov     b,#0xC8
2428 7442      7270            mov     a,#0x42
242A 120000    7271            lcall   ___fsmul
242D 8582D0    7272            mov     _Joystick_Control_sloc5_1_0,dpl
2430 8583D1    7273            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
2433 85F0D2    7274            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2436 F5D3      7275            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2438 E581      7276            mov     a,sp
243A 24FC      7277            add     a,#0xfc
243C F581      7278            mov     sp,a
243E D001      7279            pop     ar1
2440 D000      7280            pop     ar0
2442 D005      7281            pop     ar5
2444 D004      7282            pop     ar4
2446 90D360    7283            mov     dptr,#_Joystick_Control_vy_error_1_242
2449 E0        7284            movx    a,@dptr
244A F8        7285            mov     r0,a
244B A3        7286            inc     dptr
244C E0        7287            movx    a,@dptr
244D F9        7288            mov     r1,a
244E E8        7289            mov     a,r0
244F 2C        7290            add     a,r4
2450 F582      7291            mov     dpl,a
2452 E9        7292            mov     a,r1
2453 3D        7293            addc    a,r5
2454 F583      7294            mov     dph,a
2456 C004      7295            push    ar4
2458 C005      7296            push    ar5
245A 120000    7297            lcall   ___sint2fs
245D A882      7298            mov     r0,dpl
245F A983      7299            mov     r1,dph
2461 AAF0      7300            mov     r2,b
2463 FB        7301            mov     r3,a
2464 C000      7302            push    ar0
2466 C001      7303            push    ar1
2468 C000      7304            push    ar0
246A C001      7305            push    ar1
246C C002      7306            push    ar2
246E C003      7307            push    ar3
2470 85D082    7308            mov     dpl,_Joystick_Control_sloc5_1_0
2473 85D183    7309            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2476 85D2F0    7310            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2479 E5D3      7311            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
247B 120000    7312            lcall   ___fsdiv
247E AA82      7313            mov     r2,dpl
2480 AB83      7314            mov     r3,dph
2482 AEF0      7315            mov     r6,b
2484 FF        7316            mov     r7,a
2485 E581      7317            mov     a,sp
2487 24FC      7318            add     a,#0xfc
2489 F581      7319            mov     sp,a
248B 8A82      7320            mov     dpl,r2
248D 8B83      7321            mov     dph,r3
248F 8EF0      7322            mov     b,r6
2491 EF        7323            mov     a,r7
2492 120000    7324            lcall   ___fs2uchar
2495 E582      7325            mov     a,dpl
2497 D001      7326            pop     ar1
2499 D000      7327            pop     ar0
249B D005      7328            pop     ar5
249D D004      7329            pop     ar4
249F 905160    7330            mov     dptr,#_pwm_right
24A2 F0        7331            movx    @dptr,a
24A3           7332   ;        main.c:1338: return curr_angle; 
24A3 D001      7333            pop     ar1
24A5 D000      7334            pop     ar0
24A7           7335   ;        main.c:1289: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
24A7           7336   L044019?:
24A7           7337   ;        main.c:1291: curr_angle += angle_diff * 1.5; // TUNE THIS 
24A7 C000      7338            push    ar0
24A9 C001      7339            push    ar1
24AB C004      7340            push    ar4
24AD C005      7341            push    ar5
24AF C000      7342            push    ar0
24B1 C001      7343            push    ar1
24B3 C080      7344            push    _Joystick_Control_sloc4_1_0
24B5 C081      7345            push    (_Joystick_Control_sloc4_1_0 + 1)
24B7 C082      7346            push    (_Joystick_Control_sloc4_1_0 + 2)
24B9 C083      7347            push    (_Joystick_Control_sloc4_1_0 + 3)
24BB 900000    7348            mov     dptr,#0x0000
24BE 75F0C0    7349            mov     b,#0xC0
24C1 743F      7350            mov     a,#0x3F
24C3 120000    7351            lcall   ___fsmul
24C6 8582D0    7352            mov     _Joystick_Control_sloc5_1_0,dpl
24C9 8583D1    7353            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
24CC 85F0D2    7354            mov     (_Joystick_Control_sloc5_1_0 + 2),b
24CF F5D3      7355            mov     (_Joystick_Control_sloc5_1_0 + 3),a
24D1 E581      7356            mov     a,sp
24D3 24FC      7357            add     a,#0xfc
24D5 F581      7358            mov     sp,a
24D7 D001      7359            pop     ar1
24D9 D000      7360            pop     ar0
24DB 904E10    7361            mov     dptr,#_curr_angle
24DE E0        7362            movx    a,@dptr
24DF F8        7363            mov     r0,a
24E0 A3        7364            inc     dptr
24E1 E0        7365            movx    a,@dptr
24E2 F9        7366            mov     r1,a
24E3 A3        7367            inc     dptr
24E4 E0        7368            movx    a,@dptr
24E5 FA        7369            mov     r2,a
24E6 A3        7370            inc     dptr
24E7 E0        7371            movx    a,@dptr
24E8 FB        7372            mov     r3,a
24E9 C000      7373            push    ar0
24EB C001      7374            push    ar1
24ED C0D0      7375            push    _Joystick_Control_sloc5_1_0
24EF C0D1      7376            push    (_Joystick_Control_sloc5_1_0 + 1)
24F1 C0D2      7377            push    (_Joystick_Control_sloc5_1_0 + 2)
24F3 C0D3      7378            push    (_Joystick_Control_sloc5_1_0 + 3)
24F5 8882      7379            mov     dpl,r0
24F7 8983      7380            mov     dph,r1
24F9 8AF0      7381            mov     b,r2
24FB EB        7382            mov     a,r3
24FC 120000    7383            lcall   ___fsadd
24FF AA82      7384            mov     r2,dpl
2501 AB83      7385            mov     r3,dph
2503 AEF0      7386            mov     r6,b
2505 FF        7387            mov     r7,a
2506 E581      7388            mov     a,sp
2508 24FC      7389            add     a,#0xfc
250A F581      7390            mov     sp,a
250C D001      7391            pop     ar1
250E D000      7392            pop     ar0
2510 D005      7393            pop     ar5
2512 D004      7394            pop     ar4
2514 904E10    7395            mov     dptr,#_curr_angle
2517 EA        7396            mov     a,r2
2518 F0        7397            movx    @dptr,a
2519 A3        7398            inc     dptr
251A EB        7399            mov     a,r3
251B F0        7400            movx    @dptr,a
251C A3        7401            inc     dptr
251D EE        7402            mov     a,r6
251E F0        7403            movx    @dptr,a
251F A3        7404            inc     dptr
2520 EF        7405            mov     a,r7
2521 F0        7406            movx    @dptr,a
2522 D001      7407            pop     ar1
2524 D000      7408            pop     ar0
2526 020000    7409            ljmp    L044027?
2529           7410   L044024?:
2529           7411   ;        main.c:1295: if (vy*100<=vy_thres*100/2){
2529 904F60    7412            mov     dptr,#_vy
252C E0        7413            movx    a,@dptr
252D F500      7414            mov     __mulint_PARM_2,a
252F A3        7415            inc     dptr
2530 E0        7416            movx    a,@dptr
2531 F501      7417            mov     (__mulint_PARM_2 + 1),a
2533 900064    7418            mov     dptr,#0x0064
2536 C004      7419            push    ar4
2538 C005      7420            push    ar5
253A C000      7421            push    ar0
253C C001      7422            push    ar1
253E 120000    7423            lcall   __mulint
2541 AA82      7424            mov     r2,dpl
2543 AB83      7425            mov     r3,dph
2545 D001      7426            pop     ar1
2547 D000      7427            pop     ar0
2549 D005      7428            pop     ar5
254B D004      7429            pop     ar4
254D 904FE0    7430            mov     dptr,#_vy_thres
2550 E0        7431            movx    a,@dptr
2551 F500      7432            mov     __mulint_PARM_2,a
2553 A3        7433            inc     dptr
2554 E0        7434            movx    a,@dptr
2555 F501      7435            mov     (__mulint_PARM_2 + 1),a
2557 900064    7436            mov     dptr,#0x0064
255A C002      7437            push    ar2
255C C003      7438            push    ar3
255E C004      7439            push    ar4
2560 C005      7440            push    ar5
2562 C000      7441            push    ar0
2564 C001      7442            push    ar1
2566 120000    7443            lcall   __mulint
2569 AE82      7444            mov     r6,dpl
256B AF83      7445            mov     r7,dph
256D 750002    7446            mov     __divsint_PARM_2,#0x02
2570 E4        7447            clr     a
2571 F501      7448            mov     (__divsint_PARM_2 + 1),a
2573 8E82      7449            mov     dpl,r6
2575 8F83      7450            mov     dph,r7
2577 120000    7451            lcall   __divsint
257A AE82      7452            mov     r6,dpl
257C AF83      7453            mov     r7,dph
257E D001      7454            pop     ar1
2580 D000      7455            pop     ar0
2582 D005      7456            pop     ar5
2584 D004      7457            pop     ar4
2586 D003      7458            pop     ar3
2588 D002      7459            pop     ar2
258A C3        7460            clr     c
258B EE        7461            mov     a,r6
258C 9A        7462            subb    a,r2
258D EF        7463            mov     a,r7
258E 6480      7464            xrl     a,#0x80
2590 8BF0      7465            mov     b,r3
2592 63F080    7466            xrl     b,#0x80
2595 95F0      7467            subb    a,b
2597 5000      7468            jnc     L044075?
2599 020000    7469            ljmp    L044021?
259C           7470   L044075?:
259C           7471   ;        main.c:1296: pwm_left = vy_error*100/(vx_error+vy_error);
259C 90D360    7472            mov     dptr,#_Joystick_Control_vy_error_1_242
259F E0        7473            movx    a,@dptr
25A0 FA        7474            mov     r2,a
25A1 A3        7475            inc     dptr
25A2 E0        7476            movx    a,@dptr
25A3 FB        7477            mov     r3,a
25A4 8A00      7478            mov     __mulint_PARM_2,r2
25A6 8B01      7479            mov     (__mulint_PARM_2 + 1),r3
25A8 900064    7480            mov     dptr,#0x0064
25AB C002      7481            push    ar2
25AD C003      7482            push    ar3
25AF C004      7483            push    ar4
25B1 C005      7484            push    ar5
25B3 C000      7485            push    ar0
25B5 C001      7486            push    ar1
25B7 120000    7487            lcall   __mulint
25BA AE82      7488            mov     r6,dpl
25BC AF83      7489            mov     r7,dph
25BE D001      7490            pop     ar1
25C0 D000      7491            pop     ar0
25C2 D005      7492            pop     ar5
25C4 D004      7493            pop     ar4
25C6 D003      7494            pop     ar3
25C8 D002      7495            pop     ar2
25CA EA        7496            mov     a,r2
25CB 2C        7497            add     a,r4
25CC F500      7498            mov     __divsint_PARM_2,a
25CE EB        7499            mov     a,r3
25CF 3D        7500            addc    a,r5
25D0 F501      7501            mov     (__divsint_PARM_2 + 1),a
25D2 8E82      7502            mov     dpl,r6
25D4 8F83      7503            mov     dph,r7
25D6 C002      7504            push    ar2
25D8 C003      7505            push    ar3
25DA C004      7506            push    ar4
25DC C005      7507            push    ar5
25DE C000      7508            push    ar0
25E0 C001      7509            push    ar1
25E2 120000    7510            lcall   __divsint
25E5 AE82      7511            mov     r6,dpl
25E7 D001      7512            pop     ar1
25E9 D000      7513            pop     ar0
25EB D005      7514            pop     ar5
25ED D004      7515            pop     ar4
25EF D003      7516            pop     ar3
25F1 D002      7517            pop     ar2
25F3 9051A0    7518            mov     dptr,#_pwm_left
25F6 EE        7519            mov     a,r6
25F7 F0        7520            movx    @dptr,a
25F8           7521   ;        main.c:1297: pwm_right = vy_error*pwm_corr; 
25F8 8A82      7522            mov     dpl,r2
25FA 8B83      7523            mov     dph,r3
25FC C004      7524            push    ar4
25FE C005      7525            push    ar5
2600 C000      7526            push    ar0
2602 C001      7527            push    ar1
2604 120000    7528            lcall   ___sint2fs
2607 AA82      7529            mov     r2,dpl
2609 AB83      7530            mov     r3,dph
260B AEF0      7531            mov     r6,b
260D FF        7532            mov     r7,a
260E 904E50    7533            mov     dptr,#_pwm_corr
2611 E0        7534            movx    a,@dptr
2612 C0E0      7535            push    acc
2614 A3        7536            inc     dptr
2615 E0        7537            movx    a,@dptr
2616 C0E0      7538            push    acc
2618 A3        7539            inc     dptr
2619 E0        7540            movx    a,@dptr
261A C0E0      7541            push    acc
261C A3        7542            inc     dptr
261D E0        7543            movx    a,@dptr
261E C0E0      7544            push    acc
2620 8A82      7545            mov     dpl,r2
2622 8B83      7546            mov     dph,r3
2624 8EF0      7547            mov     b,r6
2626 EF        7548            mov     a,r7
2627 120000    7549            lcall   ___fsmul
262A AA82      7550            mov     r2,dpl
262C AB83      7551            mov     r3,dph
262E AEF0      7552            mov     r6,b
2630 FF        7553            mov     r7,a
2631 E581      7554            mov     a,sp
2633 24FC      7555            add     a,#0xfc
2635 F581      7556            mov     sp,a
2637 8A82      7557            mov     dpl,r2
2639 8B83      7558            mov     dph,r3
263B 8EF0      7559            mov     b,r6
263D EF        7560            mov     a,r7
263E 120000    7561            lcall   ___fs2uchar
2641 E582      7562            mov     a,dpl
2643 D001      7563            pop     ar1
2645 D000      7564            pop     ar0
2647 D005      7565            pop     ar5
2649 D004      7566            pop     ar4
264B 905160    7567            mov     dptr,#_pwm_right
264E F0        7568            movx    @dptr,a
264F 020000    7569            ljmp    L044022?
2652           7570   L044021?:
2652           7571   ;        main.c:1300: pwm_left = vx_error*100/(vx_error+vy_error);
2652 8C00      7572            mov     __mulint_PARM_2,r4
2654 8D01      7573            mov     (__mulint_PARM_2 + 1),r5
2656 900064    7574            mov     dptr,#0x0064
2659 C004      7575            push    ar4
265B C005      7576            push    ar5
265D C000      7577            push    ar0
265F C001      7578            push    ar1
2661 120000    7579            lcall   __mulint
2664 AA82      7580            mov     r2,dpl
2666 AB83      7581            mov     r3,dph
2668 D001      7582            pop     ar1
266A D000      7583            pop     ar0
266C D005      7584            pop     ar5
266E D004      7585            pop     ar4
2670 90D360    7586            mov     dptr,#_Joystick_Control_vy_error_1_242
2673 E0        7587            movx    a,@dptr
2674 FE        7588            mov     r6,a
2675 A3        7589            inc     dptr
2676 E0        7590            movx    a,@dptr
2677 FF        7591            mov     r7,a
2678 EE        7592            mov     a,r6
2679 2C        7593            add     a,r4
267A F500      7594            mov     __divsint_PARM_2,a
267C EF        7595            mov     a,r7
267D 3D        7596            addc    a,r5
267E F501      7597            mov     (__divsint_PARM_2 + 1),a
2680 8A82      7598            mov     dpl,r2
2682 8B83      7599            mov     dph,r3
2684 C004      7600            push    ar4
2686 C005      7601            push    ar5
2688 C000      7602            push    ar0
268A C001      7603            push    ar1
268C 120000    7604            lcall   __divsint
268F AA82      7605            mov     r2,dpl
2691 D001      7606            pop     ar1
2693 D000      7607            pop     ar0
2695 D005      7608            pop     ar5
2697 D004      7609            pop     ar4
2699 9051A0    7610            mov     dptr,#_pwm_left
269C EA        7611            mov     a,r2
269D F0        7612            movx    @dptr,a
269E           7613   ;        main.c:1301: pwm_right = vx_error*pwm_corr; 
269E 8C82      7614            mov     dpl,r4
26A0 8D83      7615            mov     dph,r5
26A2 C004      7616            push    ar4
26A4 C005      7617            push    ar5
26A6 C000      7618            push    ar0
26A8 C001      7619            push    ar1
26AA 120000    7620            lcall   ___sint2fs
26AD AA82      7621            mov     r2,dpl
26AF AB83      7622            mov     r3,dph
26B1 AEF0      7623            mov     r6,b
26B3 FF        7624            mov     r7,a
26B4 904E50    7625            mov     dptr,#_pwm_corr
26B7 E0        7626            movx    a,@dptr
26B8 C0E0      7627            push    acc
26BA A3        7628            inc     dptr
26BB E0        7629            movx    a,@dptr
26BC C0E0      7630            push    acc
26BE A3        7631            inc     dptr
26BF E0        7632            movx    a,@dptr
26C0 C0E0      7633            push    acc
26C2 A3        7634            inc     dptr
26C3 E0        7635            movx    a,@dptr
26C4 C0E0      7636            push    acc
26C6 8A82      7637            mov     dpl,r2
26C8 8B83      7638            mov     dph,r3
26CA 8EF0      7639            mov     b,r6
26CC EF        7640            mov     a,r7
26CD 120000    7641            lcall   ___fsmul
26D0 AA82      7642            mov     r2,dpl
26D2 AB83      7643            mov     r3,dph
26D4 AEF0      7644            mov     r6,b
26D6 FF        7645            mov     r7,a
26D7 E581      7646            mov     a,sp
26D9 24FC      7647            add     a,#0xfc
26DB F581      7648            mov     sp,a
26DD 8A82      7649            mov     dpl,r2
26DF 8B83      7650            mov     dph,r3
26E1 8EF0      7651            mov     b,r6
26E3 EF        7652            mov     a,r7
26E4 120000    7653            lcall   ___fs2uchar
26E7 E582      7654            mov     a,dpl
26E9 D001      7655            pop     ar1
26EB D000      7656            pop     ar0
26ED D005      7657            pop     ar5
26EF D004      7658            pop     ar4
26F1 905160    7659            mov     dptr,#_pwm_right
26F4 F0        7660            movx    @dptr,a
26F5           7661   L044022?:
26F5           7662   ;        main.c:1303: curr_angle -= angle_diff * 1.5; // TUNE THIS 
26F5 C000      7663            push    ar0
26F7 C001      7664            push    ar1
26F9 C004      7665            push    ar4
26FB C005      7666            push    ar5
26FD C000      7667            push    ar0
26FF C001      7668            push    ar1
2701 C080      7669            push    _Joystick_Control_sloc4_1_0
2703 C081      7670            push    (_Joystick_Control_sloc4_1_0 + 1)
2705 C082      7671            push    (_Joystick_Control_sloc4_1_0 + 2)
2707 C083      7672            push    (_Joystick_Control_sloc4_1_0 + 3)
2709 900000    7673            mov     dptr,#0x0000
270C 75F0C0    7674            mov     b,#0xC0
270F 743F      7675            mov     a,#0x3F
2711 120000    7676            lcall   ___fsmul
2714 8582D0    7677            mov     _Joystick_Control_sloc5_1_0,dpl
2717 8583D1    7678            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
271A 85F0D2    7679            mov     (_Joystick_Control_sloc5_1_0 + 2),b
271D F5D3      7680            mov     (_Joystick_Control_sloc5_1_0 + 3),a
271F E581      7681            mov     a,sp
2721 24FC      7682            add     a,#0xfc
2723 F581      7683            mov     sp,a
2725 D001      7684            pop     ar1
2727 D000      7685            pop     ar0
2729 904E10    7686            mov     dptr,#_curr_angle
272C E0        7687            movx    a,@dptr
272D F8        7688            mov     r0,a
272E A3        7689            inc     dptr
272F E0        7690            movx    a,@dptr
2730 F9        7691            mov     r1,a
2731 A3        7692            inc     dptr
2732 E0        7693            movx    a,@dptr
2733 FA        7694            mov     r2,a
2734 A3        7695            inc     dptr
2735 E0        7696            movx    a,@dptr
2736 FB        7697            mov     r3,a
2737 C000      7698            push    ar0
2739 C001      7699            push    ar1
273B C0D0      7700            push    _Joystick_Control_sloc5_1_0
273D C0D1      7701            push    (_Joystick_Control_sloc5_1_0 + 1)
273F C0D2      7702            push    (_Joystick_Control_sloc5_1_0 + 2)
2741 C0D3      7703            push    (_Joystick_Control_sloc5_1_0 + 3)
2743 8882      7704            mov     dpl,r0
2745 8983      7705            mov     dph,r1
2747 8AF0      7706            mov     b,r2
2749 EB        7707            mov     a,r3
274A 120000    7708            lcall   ___fssub
274D AA82      7709            mov     r2,dpl
274F AB83      7710            mov     r3,dph
2751 AEF0      7711            mov     r6,b
2753 FF        7712            mov     r7,a
2754 E581      7713            mov     a,sp
2756 24FC      7714            add     a,#0xfc
2758 F581      7715            mov     sp,a
275A D001      7716            pop     ar1
275C D000      7717            pop     ar0
275E D005      7718            pop     ar5
2760 D004      7719            pop     ar4
2762 904E10    7720            mov     dptr,#_curr_angle
2765 EA        7721            mov     a,r2
2766 F0        7722            movx    @dptr,a
2767 A3        7723            inc     dptr
2768 EB        7724            mov     a,r3
2769 F0        7725            movx    @dptr,a
276A A3        7726            inc     dptr
276B EE        7727            mov     a,r6
276C F0        7728            movx    @dptr,a
276D A3        7729            inc     dptr
276E EF        7730            mov     a,r7
276F F0        7731            movx    @dptr,a
2770           7732   ;        main.c:1338: return curr_angle; 
2770 D001      7733            pop     ar1
2772 D000      7734            pop     ar0
2774           7735   ;        main.c:1303: curr_angle -= angle_diff * 1.5; // TUNE THIS 
2774           7736   L044027?:
2774           7737   ;        main.c:1307: if (vy_err<0){
2774 E9        7738            mov     a,r1
2775 20E740    7739            jb      acc.7,L044076?
2778 020000    7740            ljmp    L044040?
277B           7741   L044076?:
277B           7742   ;        main.c:1308: L_motor_dir = 1; 
277B 905120    7743            mov     dptr,#_L_motor_dir
277E 7401      7744            mov     a,#0x01
2780 F0        7745            movx    @dptr,a
2781           7746   ;        main.c:1309: R_motor_dir = 1; 
2781 9050E0    7747            mov     dptr,#_R_motor_dir
2784 7401      7748            mov     a,#0x01
2786 F0        7749            movx    @dptr,a
2787           7750   ;        main.c:1311: if (vx_err>0){
2787 90D3B0    7751            mov     dptr,#_Joystick_Control_vx_err_1_242
278A E0        7752            movx    a,@dptr
278B FA        7753            mov     r2,a
278C A3        7754            inc     dptr
278D E0        7755            movx    a,@dptr
278E FB        7756            mov     r3,a
278F C3        7757            clr     c
2790 E4        7758            clr     a
2791 9A        7759            subb    a,r2
2792 E4        7760            clr     a
2793 6480      7761            xrl     a,#0x80
2795 8BF0      7762            mov     b,r3
2797 63F080    7763            xrl     b,#0x80
279A 95F0      7764            subb    a,b
279C 4000      7765            jc      L044077?
279E 020000    7766            ljmp    L044035?
27A1           7767   L044077?:
27A1           7768   ;        main.c:1312: if (vy*100<=vy_thres*100/2){
27A1 904F60    7769            mov     dptr,#_vy
27A4 E0        7770            movx    a,@dptr
27A5 F500      7771            mov     __mulint_PARM_2,a
27A7 A3        7772            inc     dptr
27A8 E0        7773            movx    a,@dptr
27A9 F501      7774            mov     (__mulint_PARM_2 + 1),a
27AB 900064    7775            mov     dptr,#0x0064
27AE C004      7776            push    ar4
27B0 C005      7777            push    ar5
27B2 120000    7778            lcall   __mulint
27B5 AA82      7779            mov     r2,dpl
27B7 AB83      7780            mov     r3,dph
27B9 D005      7781            pop     ar5
27BB D004      7782            pop     ar4
27BD 904FE0    7783            mov     dptr,#_vy_thres
27C0 E0        7784            movx    a,@dptr
27C1 F500      7785            mov     __mulint_PARM_2,a
27C3 A3        7786            inc     dptr
27C4 E0        7787            movx    a,@dptr
27C5 F501      7788            mov     (__mulint_PARM_2 + 1),a
27C7 900064    7789            mov     dptr,#0x0064
27CA C002      7790            push    ar2
27CC C003      7791            push    ar3
27CE C004      7792            push    ar4
27D0 C005      7793            push    ar5
27D2 120000    7794            lcall   __mulint
27D5 AE82      7795            mov     r6,dpl
27D7 AF83      7796            mov     r7,dph
27D9 750002    7797            mov     __divsint_PARM_2,#0x02
27DC E4        7798            clr     a
27DD F501      7799            mov     (__divsint_PARM_2 + 1),a
27DF 8E82      7800            mov     dpl,r6
27E1 8F83      7801            mov     dph,r7
27E3 120000    7802            lcall   __divsint
27E6 AE82      7803            mov     r6,dpl
27E8 AF83      7804            mov     r7,dph
27EA D005      7805            pop     ar5
27EC D004      7806            pop     ar4
27EE D003      7807            pop     ar3
27F0 D002      7808            pop     ar2
27F2 C3        7809            clr     c
27F3 EE        7810            mov     a,r6
27F4 9A        7811            subb    a,r2
27F5 EF        7812            mov     a,r7
27F6 6480      7813            xrl     a,#0x80
27F8 8BF0      7814            mov     b,r3
27FA 63F080    7815            xrl     b,#0x80
27FD 95F0      7816            subb    a,b
27FF 5000      7817            jnc     L044078?
2801 020000    7818            ljmp    L044029?
2804           7819   L044078?:
2804           7820   ;        main.c:1313: pwm_left = vy_error; 
2804 90D360    7821            mov     dptr,#_Joystick_Control_vy_error_1_242
2807 E0        7822            movx    a,@dptr
2808 FA        7823            mov     r2,a
2809 A3        7824            inc     dptr
280A E0        7825            movx    a,@dptr
280B FB        7826            mov     r3,a
280C 9051A0    7827            mov     dptr,#_pwm_left
280F EA        7828            mov     a,r2
2810 F0        7829            movx    @dptr,a
2811           7830   ;        main.c:1314: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
2811 904E50    7831            mov     dptr,#_pwm_corr
2814 E0        7832            movx    a,@dptr
2815 F5D0      7833            mov     _Joystick_Control_sloc5_1_0,a
2817 A3        7834            inc     dptr
2818 E0        7835            movx    a,@dptr
2819 F5D1      7836            mov     (_Joystick_Control_sloc5_1_0 + 1),a
281B A3        7837            inc     dptr
281C E0        7838            movx    a,@dptr
281D F5D2      7839            mov     (_Joystick_Control_sloc5_1_0 + 2),a
281F A3        7840            inc     dptr
2820 E0        7841            movx    a,@dptr
2821 F5D3      7842            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2823 8A82      7843            mov     dpl,r2
2825 8B83      7844            mov     dph,r3
2827 C002      7845            push    ar2
2829 C003      7846            push    ar3
282B C004      7847            push    ar4
282D C005      7848            push    ar5
282F 120000    7849            lcall   ___sint2fs
2832 AE82      7850            mov     r6,dpl
2834 AF83      7851            mov     r7,dph
2836 A8F0      7852            mov     r0,b
2838 F9        7853            mov     r1,a
2839 C006      7854            push    ar6
283B C007      7855            push    ar7
283D C000      7856            push    ar0
283F C001      7857            push    ar1
2841 85D082    7858            mov     dpl,_Joystick_Control_sloc5_1_0
2844 85D183    7859            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2847 85D2F0    7860            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
284A E5D3      7861            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
284C 120000    7862            lcall   ___fsmul
284F AE82      7863            mov     r6,dpl
2851 AF83      7864            mov     r7,dph
2853 A8F0      7865            mov     r0,b
2855 F9        7866            mov     r1,a
2856 E581      7867            mov     a,sp
2858 24FC      7868            add     a,#0xfc
285A F581      7869            mov     sp,a
285C C006      7870            push    ar6
285E C007      7871            push    ar7
2860 C000      7872            push    ar0
2862 C001      7873            push    ar1
2864 900000    7874            mov     dptr,#0x0000
2867 75F0C8    7875            mov     b,#0xC8
286A 7442      7876            mov     a,#0x42
286C 120000    7877            lcall   ___fsmul
286F 8582D0    7878            mov     _Joystick_Control_sloc5_1_0,dpl
2872 8583D1    7879            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
2875 85F0D2    7880            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2878 F5D3      7881            mov     (_Joystick_Control_sloc5_1_0 + 3),a
287A E581      7882            mov     a,sp
287C 24FC      7883            add     a,#0xfc
287E F581      7884            mov     sp,a
2880 D005      7885            pop     ar5
2882 D004      7886            pop     ar4
2884 D003      7887            pop     ar3
2886 D002      7888            pop     ar2
2888 EA        7889            mov     a,r2
2889 2C        7890            add     a,r4
288A F582      7891            mov     dpl,a
288C EB        7892            mov     a,r3
288D 3D        7893            addc    a,r5
288E F583      7894            mov     dph,a
2890 120000    7895            lcall   ___sint2fs
2893 AA82      7896            mov     r2,dpl
2895 AB83      7897            mov     r3,dph
2897 AEF0      7898            mov     r6,b
2899 FF        7899            mov     r7,a
289A C002      7900            push    ar2
289C C003      7901            push    ar3
289E C006      7902            push    ar6
28A0 C007      7903            push    ar7
28A2 85D082    7904            mov     dpl,_Joystick_Control_sloc5_1_0
28A5 85D183    7905            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
28A8 85D2F0    7906            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
28AB E5D3      7907            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
28AD 120000    7908            lcall   ___fsdiv
28B0 AA82      7909            mov     r2,dpl
28B2 AB83      7910            mov     r3,dph
28B4 AEF0      7911            mov     r6,b
28B6 FF        7912            mov     r7,a
28B7 E581      7913            mov     a,sp
28B9 24FC      7914            add     a,#0xfc
28BB F581      7915            mov     sp,a
28BD 8A82      7916            mov     dpl,r2
28BF 8B83      7917            mov     dph,r3
28C1 8EF0      7918            mov     b,r6
28C3 EF        7919            mov     a,r7
28C4 120000    7920            lcall   ___fs2uchar
28C7 E582      7921            mov     a,dpl
28C9 905160    7922            mov     dptr,#_pwm_right
28CC F0        7923            movx    @dptr,a
28CD 020000    7924            ljmp    L044030?
28D0           7925   L044029?:
28D0           7926   ;        main.c:1317: pwm_left = vx_error; 
28D0 9051A0    7927            mov     dptr,#_pwm_left
28D3 EC        7928            mov     a,r4
28D4 F0        7929            movx    @dptr,a
28D5           7930   ;        main.c:1318: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
28D5 904E50    7931            mov     dptr,#_pwm_corr
28D8 E0        7932            movx    a,@dptr
28D9 F5D0      7933            mov     _Joystick_Control_sloc5_1_0,a
28DB A3        7934            inc     dptr
28DC E0        7935            movx    a,@dptr
28DD F5D1      7936            mov     (_Joystick_Control_sloc5_1_0 + 1),a
28DF A3        7937            inc     dptr
28E0 E0        7938            movx    a,@dptr
28E1 F5D2      7939            mov     (_Joystick_Control_sloc5_1_0 + 2),a
28E3 A3        7940            inc     dptr
28E4 E0        7941            movx    a,@dptr
28E5 F5D3      7942            mov     (_Joystick_Control_sloc5_1_0 + 3),a
28E7 8C82      7943            mov     dpl,r4
28E9 8D83      7944            mov     dph,r5
28EB C004      7945            push    ar4
28ED C005      7946            push    ar5
28EF 120000    7947            lcall   ___sint2fs
28F2 A882      7948            mov     r0,dpl
28F4 A983      7949            mov     r1,dph
28F6 AAF0      7950            mov     r2,b
28F8 FB        7951            mov     r3,a
28F9 C000      7952            push    ar0
28FB C001      7953            push    ar1
28FD C002      7954            push    ar2
28FF C003      7955            push    ar3
2901 85D082    7956            mov     dpl,_Joystick_Control_sloc5_1_0
2904 85D183    7957            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2907 85D2F0    7958            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
290A E5D3      7959            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
290C 120000    7960            lcall   ___fsmul
290F AA82      7961            mov     r2,dpl
2911 AB83      7962            mov     r3,dph
2913 AEF0      7963            mov     r6,b
2915 FF        7964            mov     r7,a
2916 E581      7965            mov     a,sp
2918 24FC      7966            add     a,#0xfc
291A F581      7967            mov     sp,a
291C C002      7968            push    ar2
291E C003      7969            push    ar3
2920 C006      7970            push    ar6
2922 C007      7971            push    ar7
2924 900000    7972            mov     dptr,#0x0000
2927 75F0C8    7973            mov     b,#0xC8
292A 7442      7974            mov     a,#0x42
292C 120000    7975            lcall   ___fsmul
292F 8582D0    7976            mov     _Joystick_Control_sloc5_1_0,dpl
2932 8583D1    7977            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
2935 85F0D2    7978            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2938 F5D3      7979            mov     (_Joystick_Control_sloc5_1_0 + 3),a
293A E581      7980            mov     a,sp
293C 24FC      7981            add     a,#0xfc
293E F581      7982            mov     sp,a
2940 D005      7983            pop     ar5
2942 D004      7984            pop     ar4
2944 90D360    7985            mov     dptr,#_Joystick_Control_vy_error_1_242
2947 E0        7986            movx    a,@dptr
2948 F8        7987            mov     r0,a
2949 A3        7988            inc     dptr
294A E0        7989            movx    a,@dptr
294B F9        7990            mov     r1,a
294C E8        7991            mov     a,r0
294D 2C        7992            add     a,r4
294E F582      7993            mov     dpl,a
2950 E9        7994            mov     a,r1
2951 3D        7995            addc    a,r5
2952 F583      7996            mov     dph,a
2954 120000    7997            lcall   ___sint2fs
2957 A882      7998            mov     r0,dpl
2959 A983      7999            mov     r1,dph
295B AAF0      8000            mov     r2,b
295D FB        8001            mov     r3,a
295E C000      8002            push    ar0
2960 C001      8003            push    ar1
2962 C002      8004            push    ar2
2964 C003      8005            push    ar3
2966 85D082    8006            mov     dpl,_Joystick_Control_sloc5_1_0
2969 85D183    8007            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
296C 85D2F0    8008            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
296F E5D3      8009            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2971 120000    8010            lcall   ___fsdiv
2974 AA82      8011            mov     r2,dpl
2976 AB83      8012            mov     r3,dph
2978 AEF0      8013            mov     r6,b
297A FF        8014            mov     r7,a
297B E581      8015            mov     a,sp
297D 24FC      8016            add     a,#0xfc
297F F581      8017            mov     sp,a
2981 8A82      8018            mov     dpl,r2
2983 8B83      8019            mov     dph,r3
2985 8EF0      8020            mov     b,r6
2987 EF        8021            mov     a,r7
2988 120000    8022            lcall   ___fs2uchar
298B E582      8023            mov     a,dpl
298D 905160    8024            mov     dptr,#_pwm_right
2990 F0        8025            movx    @dptr,a
2991           8026   L044030?:
2991           8027   ;        main.c:1320: curr_angle -= angle_diff * 1.4; // TUNE THIS 
2991 C080      8028            push    _Joystick_Control_sloc4_1_0
2993 C081      8029            push    (_Joystick_Control_sloc4_1_0 + 1)
2995 C082      8030            push    (_Joystick_Control_sloc4_1_0 + 2)
2997 C083      8031            push    (_Joystick_Control_sloc4_1_0 + 3)
2999 903333    8032            mov     dptr,#0x3333
299C 75F0B3    8033            mov     b,#0xB3
299F 743F      8034            mov     a,#0x3F
29A1 120000    8035            lcall   ___fsmul
29A4 8582D0    8036            mov     _Joystick_Control_sloc5_1_0,dpl
29A7 8583D1    8037            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
29AA 85F0D2    8038            mov     (_Joystick_Control_sloc5_1_0 + 2),b
29AD F5D3      8039            mov     (_Joystick_Control_sloc5_1_0 + 3),a
29AF E581      8040            mov     a,sp
29B1 24FC      8041            add     a,#0xfc
29B3 F581      8042            mov     sp,a
29B5 904E10    8043            mov     dptr,#_curr_angle
29B8 E0        8044            movx    a,@dptr
29B9 F8        8045            mov     r0,a
29BA A3        8046            inc     dptr
29BB E0        8047            movx    a,@dptr
29BC F9        8048            mov     r1,a
29BD A3        8049            inc     dptr
29BE E0        8050            movx    a,@dptr
29BF FA        8051            mov     r2,a
29C0 A3        8052            inc     dptr
29C1 E0        8053            movx    a,@dptr
29C2 FB        8054            mov     r3,a
29C3 C0D0      8055            push    _Joystick_Control_sloc5_1_0
29C5 C0D1      8056            push    (_Joystick_Control_sloc5_1_0 + 1)
29C7 C0D2      8057            push    (_Joystick_Control_sloc5_1_0 + 2)
29C9 C0D3      8058            push    (_Joystick_Control_sloc5_1_0 + 3)
29CB 8882      8059            mov     dpl,r0
29CD 8983      8060            mov     dph,r1
29CF 8AF0      8061            mov     b,r2
29D1 EB        8062            mov     a,r3
29D2 120000    8063            lcall   ___fssub
29D5 AA82      8064            mov     r2,dpl
29D7 AB83      8065            mov     r3,dph
29D9 AEF0      8066            mov     r6,b
29DB FF        8067            mov     r7,a
29DC E581      8068            mov     a,sp
29DE 24FC      8069            add     a,#0xfc
29E0 F581      8070            mov     sp,a
29E2 904E10    8071            mov     dptr,#_curr_angle
29E5 EA        8072            mov     a,r2
29E6 F0        8073            movx    @dptr,a
29E7 A3        8074            inc     dptr
29E8 EB        8075            mov     a,r3
29E9 F0        8076            movx    @dptr,a
29EA A3        8077            inc     dptr
29EB EE        8078            mov     a,r6
29EC F0        8079            movx    @dptr,a
29ED A3        8080            inc     dptr
29EE EF        8081            mov     a,r7
29EF F0        8082            movx    @dptr,a
29F0 020000    8083            ljmp    L044040?
29F3           8084   L044035?:
29F3           8085   ;        main.c:1324: if (vy*100<=vy_thres*100/2){
29F3 904F60    8086            mov     dptr,#_vy
29F6 E0        8087            movx    a,@dptr
29F7 F500      8088            mov     __mulint_PARM_2,a
29F9 A3        8089            inc     dptr
29FA E0        8090            movx    a,@dptr
29FB F501      8091            mov     (__mulint_PARM_2 + 1),a
29FD 900064    8092            mov     dptr,#0x0064
2A00 C004      8093            push    ar4
2A02 C005      8094            push    ar5
2A04 120000    8095            lcall   __mulint
2A07 AA82      8096            mov     r2,dpl
2A09 AB83      8097            mov     r3,dph
2A0B D005      8098            pop     ar5
2A0D D004      8099            pop     ar4
2A0F 904FE0    8100            mov     dptr,#_vy_thres
2A12 E0        8101            movx    a,@dptr
2A13 F500      8102            mov     __mulint_PARM_2,a
2A15 A3        8103            inc     dptr
2A16 E0        8104            movx    a,@dptr
2A17 F501      8105            mov     (__mulint_PARM_2 + 1),a
2A19 900064    8106            mov     dptr,#0x0064
2A1C C002      8107            push    ar2
2A1E C003      8108            push    ar3
2A20 C004      8109            push    ar4
2A22 C005      8110            push    ar5
2A24 120000    8111            lcall   __mulint
2A27 AE82      8112            mov     r6,dpl
2A29 AF83      8113            mov     r7,dph
2A2B 750002    8114            mov     __divsint_PARM_2,#0x02
2A2E E4        8115            clr     a
2A2F F501      8116            mov     (__divsint_PARM_2 + 1),a
2A31 8E82      8117            mov     dpl,r6
2A33 8F83      8118            mov     dph,r7
2A35 120000    8119            lcall   __divsint
2A38 AE82      8120            mov     r6,dpl
2A3A AF83      8121            mov     r7,dph
2A3C D005      8122            pop     ar5
2A3E D004      8123            pop     ar4
2A40 D003      8124            pop     ar3
2A42 D002      8125            pop     ar2
2A44 C3        8126            clr     c
2A45 EE        8127            mov     a,r6
2A46 9A        8128            subb    a,r2
2A47 EF        8129            mov     a,r7
2A48 6480      8130            xrl     a,#0x80
2A4A 8BF0      8131            mov     b,r3
2A4C 63F080    8132            xrl     b,#0x80
2A4F 95F0      8133            subb    a,b
2A51 5000      8134            jnc     L044079?
2A53 020000    8135            ljmp    L044032?
2A56           8136   L044079?:
2A56           8137   ;        main.c:1325: pwm_left = vy_error*100/(vx_error+vy_error);
2A56 90D360    8138            mov     dptr,#_Joystick_Control_vy_error_1_242
2A59 E0        8139            movx    a,@dptr
2A5A FA        8140            mov     r2,a
2A5B A3        8141            inc     dptr
2A5C E0        8142            movx    a,@dptr
2A5D FB        8143            mov     r3,a
2A5E 8A00      8144            mov     __mulint_PARM_2,r2
2A60 8B01      8145            mov     (__mulint_PARM_2 + 1),r3
2A62 900064    8146            mov     dptr,#0x0064
2A65 C002      8147            push    ar2
2A67 C003      8148            push    ar3
2A69 C004      8149            push    ar4
2A6B C005      8150            push    ar5
2A6D 120000    8151            lcall   __mulint
2A70 AE82      8152            mov     r6,dpl
2A72 AF83      8153            mov     r7,dph
2A74 D005      8154            pop     ar5
2A76 D004      8155            pop     ar4
2A78 D003      8156            pop     ar3
2A7A D002      8157            pop     ar2
2A7C EA        8158            mov     a,r2
2A7D 2C        8159            add     a,r4
2A7E F500      8160            mov     __divsint_PARM_2,a
2A80 EB        8161            mov     a,r3
2A81 3D        8162            addc    a,r5
2A82 F501      8163            mov     (__divsint_PARM_2 + 1),a
2A84 8E82      8164            mov     dpl,r6
2A86 8F83      8165            mov     dph,r7
2A88 C002      8166            push    ar2
2A8A C003      8167            push    ar3
2A8C 120000    8168            lcall   __divsint
2A8F AE82      8169            mov     r6,dpl
2A91 D003      8170            pop     ar3
2A93 D002      8171            pop     ar2
2A95 9051A0    8172            mov     dptr,#_pwm_left
2A98 EE        8173            mov     a,r6
2A99 F0        8174            movx    @dptr,a
2A9A           8175   ;        main.c:1326: pwm_right =pwm_corr*vy_error; 
2A9A 904E50    8176            mov     dptr,#_pwm_corr
2A9D E0        8177            movx    a,@dptr
2A9E F5D0      8178            mov     _Joystick_Control_sloc5_1_0,a
2AA0 A3        8179            inc     dptr
2AA1 E0        8180            movx    a,@dptr
2AA2 F5D1      8181            mov     (_Joystick_Control_sloc5_1_0 + 1),a
2AA4 A3        8182            inc     dptr
2AA5 E0        8183            movx    a,@dptr
2AA6 F5D2      8184            mov     (_Joystick_Control_sloc5_1_0 + 2),a
2AA8 A3        8185            inc     dptr
2AA9 E0        8186            movx    a,@dptr
2AAA F5D3      8187            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2AAC 8A82      8188            mov     dpl,r2
2AAE 8B83      8189            mov     dph,r3
2AB0 120000    8190            lcall   ___sint2fs
2AB3 AA82      8191            mov     r2,dpl
2AB5 AB83      8192            mov     r3,dph
2AB7 AEF0      8193            mov     r6,b
2AB9 FF        8194            mov     r7,a
2ABA C002      8195            push    ar2
2ABC C003      8196            push    ar3
2ABE C006      8197            push    ar6
2AC0 C007      8198            push    ar7
2AC2 85D082    8199            mov     dpl,_Joystick_Control_sloc5_1_0
2AC5 85D183    8200            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2AC8 85D2F0    8201            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2ACB E5D3      8202            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2ACD 120000    8203            lcall   ___fsmul
2AD0 AA82      8204            mov     r2,dpl
2AD2 AB83      8205            mov     r3,dph
2AD4 AEF0      8206            mov     r6,b
2AD6 FF        8207            mov     r7,a
2AD7 E581      8208            mov     a,sp
2AD9 24FC      8209            add     a,#0xfc
2ADB F581      8210            mov     sp,a
2ADD 8A82      8211            mov     dpl,r2
2ADF 8B83      8212            mov     dph,r3
2AE1 8EF0      8213            mov     b,r6
2AE3 EF        8214            mov     a,r7
2AE4 120000    8215            lcall   ___fs2uchar
2AE7 E582      8216            mov     a,dpl
2AE9 905160    8217            mov     dptr,#_pwm_right
2AEC F0        8218            movx    @dptr,a
2AED 020000    8219            ljmp    L044033?
2AF0           8220   L044032?:
2AF0           8221   ;        main.c:1329: pwm_left = vx_error*100/(vx_error+vy_error);
2AF0 8C00      8222            mov     __mulint_PARM_2,r4
2AF2 8D01      8223            mov     (__mulint_PARM_2 + 1),r5
2AF4 900064    8224            mov     dptr,#0x0064
2AF7 C004      8225            push    ar4
2AF9 C005      8226            push    ar5
2AFB 120000    8227            lcall   __mulint
2AFE AA82      8228            mov     r2,dpl
2B00 AB83      8229            mov     r3,dph
2B02 D005      8230            pop     ar5
2B04 D004      8231            pop     ar4
2B06 90D360    8232            mov     dptr,#_Joystick_Control_vy_error_1_242
2B09 E0        8233            movx    a,@dptr
2B0A FE        8234            mov     r6,a
2B0B A3        8235            inc     dptr
2B0C E0        8236            movx    a,@dptr
2B0D FF        8237            mov     r7,a
2B0E EE        8238            mov     a,r6
2B0F 2C        8239            add     a,r4
2B10 F500      8240            mov     __divsint_PARM_2,a
2B12 EF        8241            mov     a,r7
2B13 3D        8242            addc    a,r5
2B14 F501      8243            mov     (__divsint_PARM_2 + 1),a
2B16 8A82      8244            mov     dpl,r2
2B18 8B83      8245            mov     dph,r3
2B1A C004      8246            push    ar4
2B1C C005      8247            push    ar5
2B1E 120000    8248            lcall   __divsint
2B21 AA82      8249            mov     r2,dpl
2B23 D005      8250            pop     ar5
2B25 D004      8251            pop     ar4
2B27 9051A0    8252            mov     dptr,#_pwm_left
2B2A EA        8253            mov     a,r2
2B2B F0        8254            movx    @dptr,a
2B2C           8255   ;        main.c:1330: pwm_right = pwm_corr*vx_error; 
2B2C 904E50    8256            mov     dptr,#_pwm_corr
2B2F E0        8257            movx    a,@dptr
2B30 FA        8258            mov     r2,a
2B31 A3        8259            inc     dptr
2B32 E0        8260            movx    a,@dptr
2B33 FB        8261            mov     r3,a
2B34 A3        8262            inc     dptr
2B35 E0        8263            movx    a,@dptr
2B36 FE        8264            mov     r6,a
2B37 A3        8265            inc     dptr
2B38 E0        8266            movx    a,@dptr
2B39 FF        8267            mov     r7,a
2B3A 8C82      8268            mov     dpl,r4
2B3C 8D83      8269            mov     dph,r5
2B3E C002      8270            push    ar2
2B40 C003      8271            push    ar3
2B42 C006      8272            push    ar6
2B44 C007      8273            push    ar7
2B46 120000    8274            lcall   ___sint2fs
2B49 AC82      8275            mov     r4,dpl
2B4B AD83      8276            mov     r5,dph
2B4D A8F0      8277            mov     r0,b
2B4F F9        8278            mov     r1,a
2B50 D007      8279            pop     ar7
2B52 D006      8280            pop     ar6
2B54 D003      8281            pop     ar3
2B56 D002      8282            pop     ar2
2B58 C004      8283            push    ar4
2B5A C005      8284            push    ar5
2B5C C000      8285            push    ar0
2B5E C001      8286            push    ar1
2B60 8A82      8287            mov     dpl,r2
2B62 8B83      8288            mov     dph,r3
2B64 8EF0      8289            mov     b,r6
2B66 EF        8290            mov     a,r7
2B67 120000    8291            lcall   ___fsmul
2B6A AA82      8292            mov     r2,dpl
2B6C AB83      8293            mov     r3,dph
2B6E ACF0      8294            mov     r4,b
2B70 FD        8295            mov     r5,a
2B71 E581      8296            mov     a,sp
2B73 24FC      8297            add     a,#0xfc
2B75 F581      8298            mov     sp,a
2B77 8A82      8299            mov     dpl,r2
2B79 8B83      8300            mov     dph,r3
2B7B 8CF0      8301            mov     b,r4
2B7D ED        8302            mov     a,r5
2B7E 120000    8303            lcall   ___fs2uchar
2B81 E582      8304            mov     a,dpl
2B83 905160    8305            mov     dptr,#_pwm_right
2B86 F0        8306            movx    @dptr,a
2B87           8307   L044033?:
2B87           8308   ;        main.c:1332: curr_angle += angle_diff * 1.4; // TUNE THIS 
2B87 C080      8309            push    _Joystick_Control_sloc4_1_0
2B89 C081      8310            push    (_Joystick_Control_sloc4_1_0 + 1)
2B8B C082      8311            push    (_Joystick_Control_sloc4_1_0 + 2)
2B8D C083      8312            push    (_Joystick_Control_sloc4_1_0 + 3)
2B8F 903333    8313            mov     dptr,#0x3333
2B92 75F0B3    8314            mov     b,#0xB3
2B95 743F      8315            mov     a,#0x3F
2B97 120000    8316            lcall   ___fsmul
2B9A AA82      8317            mov     r2,dpl
2B9C AB83      8318            mov     r3,dph
2B9E ACF0      8319            mov     r4,b
2BA0 FD        8320            mov     r5,a
2BA1 E581      8321            mov     a,sp
2BA3 24FC      8322            add     a,#0xfc
2BA5 F581      8323            mov     sp,a
2BA7 904E10    8324            mov     dptr,#_curr_angle
2BAA E0        8325            movx    a,@dptr
2BAB FE        8326            mov     r6,a
2BAC A3        8327            inc     dptr
2BAD E0        8328            movx    a,@dptr
2BAE FF        8329            mov     r7,a
2BAF A3        8330            inc     dptr
2BB0 E0        8331            movx    a,@dptr
2BB1 F8        8332            mov     r0,a
2BB2 A3        8333            inc     dptr
2BB3 E0        8334            movx    a,@dptr
2BB4 F9        8335            mov     r1,a
2BB5 C002      8336            push    ar2
2BB7 C003      8337            push    ar3
2BB9 C004      8338            push    ar4
2BBB C005      8339            push    ar5
2BBD 8E82      8340            mov     dpl,r6
2BBF 8F83      8341            mov     dph,r7
2BC1 88F0      8342            mov     b,r0
2BC3 E9        8343            mov     a,r1
2BC4 120000    8344            lcall   ___fsadd
2BC7 AA82      8345            mov     r2,dpl
2BC9 AB83      8346            mov     r3,dph
2BCB ACF0      8347            mov     r4,b
2BCD FD        8348            mov     r5,a
2BCE E581      8349            mov     a,sp
2BD0 24FC      8350            add     a,#0xfc
2BD2 F581      8351            mov     sp,a
2BD4 904E10    8352            mov     dptr,#_curr_angle
2BD7 EA        8353            mov     a,r2
2BD8 F0        8354            movx    @dptr,a
2BD9 A3        8355            inc     dptr
2BDA EB        8356            mov     a,r3
2BDB F0        8357            movx    @dptr,a
2BDC A3        8358            inc     dptr
2BDD EC        8359            mov     a,r4
2BDE F0        8360            movx    @dptr,a
2BDF A3        8361            inc     dptr
2BE0 ED        8362            mov     a,r5
2BE1 F0        8363            movx    @dptr,a
2BE2           8364   L044040?:
2BE2           8365   ;        main.c:1337: last_raw_angle = raw_angle; 
2BE2 904DD0    8366            mov     dptr,#_raw_angle
2BE5 E0        8367            movx    a,@dptr
2BE6 FA        8368            mov     r2,a
2BE7 A3        8369            inc     dptr
2BE8 E0        8370            movx    a,@dptr
2BE9 FB        8371            mov     r3,a
2BEA A3        8372            inc     dptr
2BEB E0        8373            movx    a,@dptr
2BEC FC        8374            mov     r4,a
2BED A3        8375            inc     dptr
2BEE E0        8376            movx    a,@dptr
2BEF FD        8377            mov     r5,a
2BF0 904D90    8378            mov     dptr,#_last_raw_angle
2BF3 EA        8379            mov     a,r2
2BF4 F0        8380            movx    @dptr,a
2BF5 A3        8381            inc     dptr
2BF6 EB        8382            mov     a,r3
2BF7 F0        8383            movx    @dptr,a
2BF8 A3        8384            inc     dptr
2BF9 EC        8385            mov     a,r4
2BFA F0        8386            movx    @dptr,a
2BFB A3        8387            inc     dptr
2BFC ED        8388            mov     a,r5
2BFD F0        8389            movx    @dptr,a
2BFE           8390   ;        main.c:1338: return curr_angle; 
2BFE 904E10    8391            mov     dptr,#_curr_angle
2C01 E0        8392            movx    a,@dptr
2C02 FA        8393            mov     r2,a
2C03 A3        8394            inc     dptr
2C04 E0        8395            movx    a,@dptr
2C05 FB        8396            mov     r3,a
2C06 A3        8397            inc     dptr
2C07 E0        8398            movx    a,@dptr
2C08 FC        8399            mov     r4,a
2C09 A3        8400            inc     dptr
2C0A E0        8401            movx    a,@dptr
2C0B 8A82      8402            mov     dpl,r2
2C0D 8B83      8403            mov     dph,r3
2C0F 8CF0      8404            mov     b,r4
2C11 22        8405            ret
2C12           8406   ;------------------------------------------------------------
2C12           8407   ;Allocation info for local variables in function 'main'
2C12           8408   ;------------------------------------------------------------
2C12           8409   ;c                         Allocated with name '_main_c_1_265'
2C12           8410   ;auto_mode                 Allocated with name '_main_auto_mode_1_265'
2C12           8411   ;pick_char                 Allocated with name '_main_pick_char_1_265'
2C12           8412   ;angle_count               Allocated with name '_main_angle_count_1_265'
2C12           8413   ;------------------------------------------------------------
2C12           8414   ;        main.c:1341: void main (void)
2C12           8415   ;        -----------------------------------------
2C12           8416   ;         function main
2C12           8417   ;        -----------------------------------------
2C12           8418   _main:
2C12           8419   ;        main.c:1344: xdata int auto_mode = 0;
2C12 90D450    8420            mov     dptr,#_main_auto_mode_1_265
2C15 E4        8421            clr     a
2C16 F0        8422            movx    @dptr,a
2C17 A3        8423            inc     dptr
2C18 F0        8424            movx    @dptr,a
2C19           8425   ;        main.c:1345: xdata char pick_char = '0';
2C19 90D4A0    8426            mov     dptr,#_main_pick_char_1_265
2C1C 7430      8427            mov     a,#0x30
2C1E F0        8428            movx    @dptr,a
2C1F           8429   ;        main.c:1348: Init_all();
2C1F 120000    8430            lcall   _Init_all
2C22           8431   ;        main.c:1349: BMM150_Init();
2C22 120000    8432            lcall   _BMM150_Init
2C25           8433   ;        main.c:1350: waitms(500);
2C25 9001F4    8434            mov     dptr,#0x01F4
2C28 120000    8435            lcall   _waitms
2C2B           8436   ;        main.c:1351: UART1_Init(9600);
2C2B 902580    8437            mov     dptr,#0x2580
2C2E E4        8438            clr     a
2C2F F5F0      8439            mov     b,a
2C31 120000    8440            lcall   _UART1_Init
2C34           8441   ;        main.c:1353: ReceptionOff();
2C34 120000    8442            lcall   _ReceptionOff
2C37           8443   ;        main.c:1356: SendATCommand("AT+VER\r\n");
2C37 902480    8444            mov     dptr,#__str_8
2C3A 75F080    8445            mov     b,#0x80
2C3D 120000    8446            lcall   _SendATCommand
2C40           8447   ;        main.c:1357: SendATCommand("AT+BAUD\r\n");
2C40 9024C0    8448            mov     dptr,#__str_9
2C43 75F080    8449            mov     b,#0x80
2C46 120000    8450            lcall   _SendATCommand
2C49           8451   ;        main.c:1358: SendATCommand("AT+RFID\r\n");
2C49 902500    8452            mov     dptr,#__str_10
2C4C 75F080    8453            mov     b,#0x80
2C4F 120000    8454            lcall   _SendATCommand
2C52           8455   ;        main.c:1359: SendATCommand("AT+DVID\r\n");
2C52 902540    8456            mov     dptr,#__str_11
2C55 75F080    8457            mov     b,#0x80
2C58 120000    8458            lcall   _SendATCommand
2C5B           8459   ;        main.c:1360: SendATCommand("AT+RFC002\r\n");
2C5B 902580    8460            mov     dptr,#__str_12
2C5E 75F080    8461            mov     b,#0x80
2C61 120000    8462            lcall   _SendATCommand
2C64           8463   ;        main.c:1361: SendATCommand("AT+POWE\r\n");
2C64 9025C0    8464            mov     dptr,#__str_13
2C67 75F080    8465            mov     b,#0x80
2C6A 120000    8466            lcall   _SendATCommand
2C6D           8467   ;        main.c:1362: SendATCommand("AT+CLSS\r\n");
2C6D 902600    8468            mov     dptr,#__str_14
2C70 75F080    8469            mov     b,#0x80
2C73 120000    8470            lcall   _SendATCommand
2C76           8471   ;        main.c:1363: SendATCommand("AT+DVIDEF11\r\n");  
2C76 902640    8472            mov     dptr,#__str_15
2C79 75F080    8473            mov     b,#0x80
2C7C 120000    8474            lcall   _SendATCommand
2C7F           8475   ;        main.c:1366: L_bridge_1 = 0; 
2C7F C2A1      8476            clr     _P2_1
2C81           8477   ;        main.c:1367: L_bridge_2 = 0; 
2C81 C2A2      8478            clr     _P2_2
2C83           8479   ;        main.c:1368: R_bridge_1 = 0; 
2C83 C2A4      8480            clr     _P2_4
2C85           8481   ;        main.c:1369: R_bridge_2 = 0; 
2C85 C2A3      8482            clr     _P2_3
2C87           8483   ;        main.c:1370: vx = 0; 
2C87 904FA0    8484            mov     dptr,#_vx
2C8A E4        8485            clr     a
2C8B F0        8486            movx    @dptr,a
2C8C A3        8487            inc     dptr
2C8D F0        8488            movx    @dptr,a
2C8E           8489   ;        main.c:1371: vy = 0; 
2C8E 904F60    8490            mov     dptr,#_vy
2C91 E4        8491            clr     a
2C92 F0        8492            movx    @dptr,a
2C93 A3        8493            inc     dptr
2C94 F0        8494            movx    @dptr,a
2C95           8495   ;        main.c:1374: curr_angle = Read_angle();
2C95 120000    8496            lcall   _Read_angle
2C98 AA82      8497            mov     r2,dpl
2C9A AB83      8498            mov     r3,dph
2C9C ACF0      8499            mov     r4,b
2C9E FD        8500            mov     r5,a
2C9F 904E10    8501            mov     dptr,#_curr_angle
2CA2 EA        8502            mov     a,r2
2CA3 F0        8503            movx    @dptr,a
2CA4 A3        8504            inc     dptr
2CA5 EB        8505            mov     a,r3
2CA6 F0        8506            movx    @dptr,a
2CA7 A3        8507            inc     dptr
2CA8 EC        8508            mov     a,r4
2CA9 F0        8509            movx    @dptr,a
2CAA A3        8510            inc     dptr
2CAB ED        8511            mov     a,r5
2CAC F0        8512            movx    @dptr,a
2CAD           8513   ;        main.c:1377: waitms(1000);
2CAD 9003E8    8514            mov     dptr,#0x03E8
2CB0 120000    8515            lcall   _waitms
2CB3           8516   ;        main.c:1378: while(1){  
2CB3           8517   L045016?:
2CB3           8518   ;        main.c:1380: temp = Read_angle();
2CB3 120000    8519            lcall   _Read_angle
2CB6 AA82      8520            mov     r2,dpl
2CB8 AB83      8521            mov     r3,dph
2CBA ACF0      8522            mov     r4,b
2CBC FD        8523            mov     r5,a
2CBD 905360    8524            mov     dptr,#_temp
2CC0 EA        8525            mov     a,r2
2CC1 F0        8526            movx    @dptr,a
2CC2 A3        8527            inc     dptr
2CC3 EB        8528            mov     a,r3
2CC4 F0        8529            movx    @dptr,a
2CC5 A3        8530            inc     dptr
2CC6 EC        8531            mov     a,r4
2CC7 F0        8532            movx    @dptr,a
2CC8 A3        8533            inc     dptr
2CC9 ED        8534            mov     a,r5
2CCA F0        8535            movx    @dptr,a
2CCB           8536   ;        main.c:1381: printf("distance: %d\r\n", distance);
2CCB 905320    8537            mov     dptr,#_distance
2CCE E0        8538            movx    a,@dptr
2CCF C0E0      8539            push    acc
2CD1 A3        8540            inc     dptr
2CD2 E0        8541            movx    a,@dptr
2CD3 C0E0      8542            push    acc
2CD5 74C0      8543            mov     a,#__str_16
2CD7 C0E0      8544            push    acc
2CD9 7426      8545            mov     a,#(__str_16 >> 8)
2CDB C0E0      8546            push    acc
2CDD 7480      8547            mov     a,#0x80
2CDF C0E0      8548            push    acc
2CE1 120000    8549            lcall   _printf
2CE4 E581      8550            mov     a,sp
2CE6 24FB      8551            add     a,#0xfb
2CE8 F581      8552            mov     sp,a
2CEA           8553   ;        main.c:1383: if(pick_char=='1'){
2CEA 90D4A0    8554            mov     dptr,#_main_pick_char_1_265
2CED E0        8555            movx    a,@dptr
2CEE FA        8556            mov     r2,a
2CEF BA3100    8557            cjne    r2,#0x31,L045002?
2CF2           8558   ;        main.c:1384: servo_pick();
2CF2 120000    8559            lcall   _servo_pick
2CF5           8560   ;        main.c:1385: waitms(1000);
2CF5 9003E8    8561            mov     dptr,#0x03E8
2CF8 120000    8562            lcall   _waitms
2CFB           8563   ;        main.c:1386: pick_char = '0';
2CFB 90D4A0    8564            mov     dptr,#_main_pick_char_1_265
2CFE 7430      8565            mov     a,#0x30
2D00 F0        8566            movx    @dptr,a
2D01           8567   L045002?:
2D01           8568   ;        main.c:1389: if(auto_mode){
2D01 90D450    8569            mov     dptr,#_main_auto_mode_1_265
2D04 E0        8570            movx    a,@dptr
2D05 FA        8571            mov     r2,a
2D06 A3        8572            inc     dptr
2D07 E0        8573            movx    a,@dptr
2D08 FB        8574            mov     r3,a
2D09 4A        8575            orl     a,r2
2D0A 6000      8576            jz      L045004?
2D0C           8577   ;        main.c:1390: Auto_mode_slave();
2D0C 120000    8578            lcall   _Auto_mode_slave
2D0F           8579   ;        main.c:1391: auto_mode = 0;
2D0F 90D450    8580            mov     dptr,#_main_auto_mode_1_265
2D12 E4        8581            clr     a
2D13 F0        8582            movx    @dptr,a
2D14 A3        8583            inc     dptr
2D15 F0        8584            movx    @dptr,a
2D16           8585   L045004?:
2D16           8586   ;        main.c:1394: if(RXU1()) // Something has arrived
2D16 120000    8587            lcall   _RXU1
2D19 5000      8588            jnc     L045016?
2D1B           8589   ;        main.c:1396: c=getchar1();
2D1B 120000    8590            lcall   _getchar1
2D1E AA82      8591            mov     r2,dpl
2D20           8592   ;        main.c:1397: if(c=='!') // Master is sending message
2D20 BA2180    8593            cjne    r2,#0x21,L045031?
2D23 8000      8594            sjmp    L045032?
2D25           8595   L045031?:
2D25 020000    8596            ljmp    L045011?
2D28           8597   L045032?:
2D28           8598   ;        main.c:1399: getstr1(buff, sizeof(buff)-1);
2D28 75B013    8599            mov     _getstr1_PARM_2,#0x13
2D2B 905720    8600            mov     dptr,#_buff
2D2E 75F040    8601            mov     b,#0x40
2D31 120000    8602            lcall   _getstr1
2D34           8603   ;        main.c:1400: if(strlen(buff)==11)
2D34 905720    8604            mov     dptr,#_buff
2D37 75F040    8605            mov     b,#0x40
2D3A 120000    8606            lcall   _strlen
2D3D AB82      8607            mov     r3,dpl
2D3F AC83      8608            mov     r4,dph
2D41 BB0B40    8609            cjne    r3,#0x0B,L045033?
2D44 BC0040    8610            cjne    r4,#0x00,L045033?
2D47 8000      8611            sjmp    L045034?
2D49           8612   L045033?:
2D49 020000    8613            ljmp    L045006?
2D4C           8614   L045034?:
2D4C           8615   ;        main.c:1402: printf("Master says: %s\r\n", buff);
2D4C 7420      8616            mov     a,#_buff
2D4E C0E0      8617            push    acc
2D50 7457      8618            mov     a,#(_buff >> 8)
2D52 C0E0      8619            push    acc
2D54 7440      8620            mov     a,#0x40
2D56 C0E0      8621            push    acc
2D58 7400      8622            mov     a,#__str_17
2D5A C0E0      8623            push    acc
2D5C 7429      8624            mov     a,#(__str_17 >> 8)
2D5E C0E0      8625            push    acc
2D60 7480      8626            mov     a,#0x80
2D62 C0E0      8627            push    acc
2D64 120000    8628            lcall   _printf
2D67 E581      8629            mov     a,sp
2D69 24FA      8630            add     a,#0xfa
2D6B F581      8631            mov     sp,a
2D6D           8632   ;        main.c:1403: sscanf(buff, "%03d,%03d,%c,%01d", &vx, &vy, &pick_char, &auto_mode);
2D6D 7450      8633            mov     a,#_main_auto_mode_1_265
2D6F C0E0      8634            push    acc
2D71 74D4      8635            mov     a,#(_main_auto_mode_1_265 >> 8)
2D73 C0E0      8636            push    acc
2D75 E4        8637            clr     a
2D76 C0E0      8638            push    acc
2D78 74A0      8639            mov     a,#_main_pick_char_1_265
2D7A C0E0      8640            push    acc
2D7C 74D4      8641            mov     a,#(_main_pick_char_1_265 >> 8)
2D7E C0E0      8642            push    acc
2D80 E4        8643            clr     a
2D81 C0E0      8644            push    acc
2D83 7460      8645            mov     a,#_vy
2D85 C0E0      8646            push    acc
2D87 744F      8647            mov     a,#(_vy >> 8)
2D89 C0E0      8648            push    acc
2D8B E4        8649            clr     a
2D8C C0E0      8650            push    acc
2D8E 74A0      8651            mov     a,#_vx
2D90 C0E0      8652            push    acc
2D92 744F      8653            mov     a,#(_vx >> 8)
2D94 C0E0      8654            push    acc
2D96 E4        8655            clr     a
2D97 C0E0      8656            push    acc
2D99 7440      8657            mov     a,#__str_18
2D9B C0E0      8658            push    acc
2D9D 7429      8659            mov     a,#(__str_18 >> 8)
2D9F C0E0      8660            push    acc
2DA1 7480      8661            mov     a,#0x80
2DA3 C0E0      8662            push    acc
2DA5 7420      8663            mov     a,#_buff
2DA7 C0E0      8664            push    acc
2DA9 7457      8665            mov     a,#(_buff >> 8)
2DAB C0E0      8666            push    acc
2DAD 7440      8667            mov     a,#0x40
2DAF C0E0      8668            push    acc
2DB1 120000    8669            lcall   _sscanf
2DB4 E581      8670            mov     a,sp
2DB6 24EE      8671            add     a,#0xee
2DB8 F581      8672            mov     sp,a
2DBA           8673   ;        main.c:1405: curr_angle = Joystick_Control(&vx, &vy);
2DBA 757060    8674            mov     _Joystick_Control_PARM_2,#_vy
2DBD 75714F    8675            mov     (_Joystick_Control_PARM_2 + 1),#(_vy >> 8)
2DC0 757200    8676            mov     (_Joystick_Control_PARM_2 + 2),#0x00
2DC3 904FA0    8677            mov     dptr,#_vx
2DC6 75F000    8678            mov     b,#0x00
2DC9 120000    8679            lcall   _Joystick_Control
2DCC AB82      8680            mov     r3,dpl
2DCE AC83      8681            mov     r4,dph
2DD0 ADF0      8682            mov     r5,b
2DD2 FE        8683            mov     r6,a
2DD3 904E10    8684            mov     dptr,#_curr_angle
2DD6 EB        8685            mov     a,r3
2DD7 F0        8686            movx    @dptr,a
2DD8 A3        8687            inc     dptr
2DD9 EC        8688            mov     a,r4
2DDA F0        8689            movx    @dptr,a
2DDB A3        8690            inc     dptr
2DDC ED        8691            mov     a,r5
2DDD F0        8692            movx    @dptr,a
2DDE A3        8693            inc     dptr
2DDF EE        8694            mov     a,r6
2DE0 F0        8695            movx    @dptr,a
2DE1 020000    8696            ljmp    L045016?
2DE4           8697   L045006?:
2DE4           8698   ;        main.c:1408: printf("*** BAD MESSAGE ***: %s\r\n", buff);
2DE4 7420      8699            mov     a,#_buff
2DE6 C0E0      8700            push    acc
2DE8 7457      8701            mov     a,#(_buff >> 8)
2DEA C0E0      8702            push    acc
2DEC 7440      8703            mov     a,#0x40
2DEE C0E0      8704            push    acc
2DF0 7480      8705            mov     a,#__str_19
2DF2 C0E0      8706            push    acc
2DF4 7429      8707            mov     a,#(__str_19 >> 8)
2DF6 C0E0      8708            push    acc
2DF8 7480      8709            mov     a,#0x80
2DFA C0E0      8710            push    acc
2DFC 120000    8711            lcall   _printf
2DFF E581      8712            mov     a,sp
2E01 24FA      8713            add     a,#0xfa
2E03 F581      8714            mov     sp,a
2E05 020000    8715            ljmp    L045016?
2E08           8716   L045011?:
2E08           8717   ;        main.c:1411: else if(c=='@') // Master wants slave data
2E08 BA40C0    8718            cjne    r2,#0x40,L045035?
2E0B 8000      8719            sjmp    L045036?
2E0D           8720   L045035?:
2E0D 020000    8721            ljmp    L045016?
2E10           8722   L045036?:
2E10           8723   ;        main.c:1413: sprintf(buff, "0,00,%04ld,%05d,%03d\n", freq100, weight, (int)curr_angle);
2E10 904E10    8724            mov     dptr,#_curr_angle
2E13 E0        8725            movx    a,@dptr
2E14 FA        8726            mov     r2,a
2E15 A3        8727            inc     dptr
2E16 E0        8728            movx    a,@dptr
2E17 FB        8729            mov     r3,a
2E18 A3        8730            inc     dptr
2E19 E0        8731            movx    a,@dptr
2E1A FC        8732            mov     r4,a
2E1B A3        8733            inc     dptr
2E1C E0        8734            movx    a,@dptr
2E1D 8A82      8735            mov     dpl,r2
2E1F 8B83      8736            mov     dph,r3
2E21 8CF0      8737            mov     b,r4
2E23 120000    8738            lcall   ___fs2sint
2E26 AA82      8739            mov     r2,dpl
2E28 AB83      8740            mov     r3,dph
2E2A C002      8741            push    ar2
2E2C C003      8742            push    ar3
2E2E 904CD0    8743            mov     dptr,#_weight
2E31 E0        8744            movx    a,@dptr
2E32 C0E0      8745            push    acc
2E34 A3        8746            inc     dptr
2E35 E0        8747            movx    a,@dptr
2E36 C0E0      8748            push    acc
2E38 9056E0    8749            mov     dptr,#_freq100
2E3B E0        8750            movx    a,@dptr
2E3C C0E0      8751            push    acc
2E3E A3        8752            inc     dptr
2E3F E0        8753            movx    a,@dptr
2E40 C0E0      8754            push    acc
2E42 A3        8755            inc     dptr
2E43 E0        8756            movx    a,@dptr
2E44 C0E0      8757            push    acc
2E46 A3        8758            inc     dptr
2E47 E0        8759            movx    a,@dptr
2E48 C0E0      8760            push    acc
2E4A 7440      8761            mov     a,#__str_20
2E4C C0E0      8762            push    acc
2E4E 742A      8763            mov     a,#(__str_20 >> 8)
2E50 C0E0      8764            push    acc
2E52 7480      8765            mov     a,#0x80
2E54 C0E0      8766            push    acc
2E56 7420      8767            mov     a,#_buff
2E58 C0E0      8768            push    acc
2E5A 7457      8769            mov     a,#(_buff >> 8)
2E5C C0E0      8770            push    acc
2E5E 7440      8771            mov     a,#0x40
2E60 C0E0      8772            push    acc
2E62 120000    8773            lcall   _sprintf
2E65 E581      8774            mov     a,sp
2E67 24F2      8775            add     a,#0xf2
2E69 F581      8776            mov     sp,a
2E6B           8777   ;        main.c:1414: waitms(5); // The radio seems to need this delay...
2E6B 900005    8778            mov     dptr,#0x0005
2E6E 120000    8779            lcall   _waitms
2E71           8780   ;        main.c:1415: sendstr1(buff);
2E71 905720    8781            mov     dptr,#_buff
2E74 75F040    8782            mov     b,#0x40
2E77 120000    8783            lcall   _sendstr1
2E7A 020000    8784            ljmp    L045016?
2E7D           8785            rseg R_CSEG
2E7D           8786   
0000           8787            rseg R_XINIT
0000           8788   __xinit__pwm_counter:
0000 0000      8789            db 0x00,0x00    ; 0
0002           8790   __xinit__servo_counter:
0002 0000      8791            db 0x00,0x00    ; 0
0004           8792   __xinit__pwm_left:
0004 00        8793            db 0x00         ; 0
0005           8794   __xinit__pwm_right:
0005 00        8795            db 0x00         ; 0
0006           8796   __xinit__L_motor_dir:
0006 01        8797            db 0x01         ; 1
0007           8798   __xinit__R_motor_dir:
0007 01        8799            db 0x01         ; 1
0008           8800   __xinit__servo_base:
0008 32        8801            db 0x32         ; 50
0009           8802   __xinit__servo_arm:
0009 32        8803            db 0x32         ; 50
000A           8804   __xinit__vx_thres:
000A A100      8805            db 0xA1,0x00    ;  161
000C           8806   __xinit__vy_thres:
000C A600      8807            db 0xA6,0x00    ;  166
000E           8808   __xinit__vx:
000E 0000      8809            db 0x00,0x00    ;  0
0010           8810   __xinit__vy:
0010 0000      8811            db 0x00,0x00    ;  0
0012           8812   __xinit__fre_mea_count:
0012 0000      8813            db 0x00,0x00    ; 0
0014           8814   __xinit__weight_mea_count:
0014 0000      8815            db 0x00,0x00    ; 0
0016           8816   __xinit__seed:
0016 3930      8817            db 0x39,0x30    ; 12345
0018           8818   __xinit__pwm_corr:
0018 3333733F  8819            db 0x33,0x33,0x73,0x3F  ;  9.500000e-001
001C           8820   __xinit__curr_angle:
001C 00000000  8821            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0020           8822   __xinit__raw_angle:
0020 00000000  8823            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0024           8824   __xinit__last_raw_angle:
0024 00000000  8825            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0028           8826   __xinit__angle_diff:
0028 00000000  8827            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
002C           8828   __xinit__mea_yes:
002C 01        8829            db 0x01         ;  1
002D           8830   __xinit__weight:
002D 0000      8831            db 0x00,0x00    ; 0
002F           8832   __xinit__duration:
002F 00000000  8833            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0033           8834   
0000           8835            rseg R_CONST
0000           8836   __str_0:
0000 4572726F  8837            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
0035 0D        8838            db 0x0D
0036 0A        8839            db 0x0A
0037 00        8840            db 0x00
0038           8841   __str_1:
0038 424D4D31  8842            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
0068 0D        8843            db 0x0D
0069 0A        8844            db 0x0A
006A 00        8845            db 0x00
006B           8846   __str_2:
006B 436F6D6D  8847            db 'Command: %s'
     616E643A
     202573
0076 00        8848            db 0x00
0077           8849   __str_3:
0077 52657370  8850            db 'Response: %s'
     6F6E7365
     3A202573
0083 0D        8851            db 0x0D
0084 0A        8852            db 0x0A
0085 00        8853            db 0x00
0086           8854   __str_4:
0086 41542B44  8855            db 'AT+DVID0000'
     56494430
     303030
0091 0D        8856            db 0x0D
0092 0A        8857            db 0x0A
0093 00        8858            db 0x00
0094           8859   __str_5:
0094 25303364  8860            db '%03d,%03d,%01d,%01d'
     2C253033
     642C2530
     31642C25
     303164
00A7 00        8861            db 0x00
00A8           8862   __str_6:
00A8 25303164  8863            db '%01d,%02d,%ld,%05d,%03d'
     2C253032
     642C256C
     642C2530
     35642C25
     303364
00BF 0A        8864            db 0x0A
00C0 00        8865            db 0x00
00C1           8866   __str_7:
00C1 302C3030  8867            db '0,00,%04ld,%05d,%03d,%03d,%03d'
     2C253034
     6C642C25
     3035642C
     25303364
     2C253033
     642C2530
     3364
00DF 0A        8868            db 0x0A
00E0 00        8869            db 0x00
00E1           8870   __str_8:
00E1 41542B56  8871            db 'AT+VER'
     4552
00E7 0D        8872            db 0x0D
00E8 0A        8873            db 0x0A
00E9 00        8874            db 0x00
00EA           8875   __str_9:
00EA 41542B42  8876            db 'AT+BAUD'
     415544
00F1 0D        8877            db 0x0D
00F2 0A        8878            db 0x0A
00F3 00        8879            db 0x00
00F4           8880   __str_10:
00F4 41542B52  8881            db 'AT+RFID'
     464944
00FB 0D        8882            db 0x0D
00FC 0A        8883            db 0x0A
00FD 00        8884            db 0x00
00FE           8885   __str_11:
00FE 41542B44  8886            db 'AT+DVID'
     564944
0105 0D        8887            db 0x0D
0106 0A        8888            db 0x0A
0107 00        8889            db 0x00
0108           8890   __str_12:
0108 41542B52  8891            db 'AT+RFC002'
     46433030
     32
0111 0D        8892            db 0x0D
0112 0A        8893            db 0x0A
0113 00        8894            db 0x00
0114           8895   __str_13:
0114 41542B50  8896            db 'AT+POWE'
     4F5745
011B 0D        8897            db 0x0D
011C 0A        8898            db 0x0A
011D 00        8899            db 0x00
011E           8900   __str_14:
011E 41542B43  8901            db 'AT+CLSS'
     4C5353
0125 0D        8902            db 0x0D
0126 0A        8903            db 0x0A
0127 00        8904            db 0x00
0128           8905   __str_15:
0128 41542B44  8906            db 'AT+DVIDEF11'
     56494445
     463131
0133 0D        8907            db 0x0D
0134 0A        8908            db 0x0A
0135 00        8909            db 0x00
0136           8910   __str_16:
0136 64697374  8911            db 'distance: %d'
     616E6365
     3A202564
0142 0D        8912            db 0x0D
0143 0A        8913            db 0x0A
0144 00        8914            db 0x00
0145           8915   __str_17:
0145 4D617374  8916            db 'Master says: %s'
     65722073
     6179733A
     202573
0154 0D        8917            db 0x0D
0155 0A        8918            db 0x0A
0156 00        8919            db 0x00
0157           8920   __str_18:
0157 25303364  8921            db '%03d,%03d,%c,%01d'
     2C253033
     642C2563
     2C253031
     64
0168 00        8922            db 0x00
0169           8923   __str_19:
0169 2A2A2A20  8924            db '*** BAD MESSAGE ***: %s'
     42414420
     4D455353
     41474520
     2A2A2A3A
     202573
0180 0D        8925            db 0x0D
0181 0A        8926            db 0x0A
0182 00        8927            db 0x00
0183           8928   __str_20:
0183 302C3030  8929            db '0,00,%04ld,%05d,%03d'
     2C253034
     6C642C25
     3035642C
     25303364
0197 0A        8930            db 0x0A
0198 00        8931            db 0x00
0199           8932   
0096           8933            CSEG
0096           8934   
0096           8935   end
