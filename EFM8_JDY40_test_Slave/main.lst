0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Apr 03 13:36:22 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _check_bound_PARM_2
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Joystick_Control
0000             30            public _Auto_mode_slave
0000             31            public _Read_angle
0000             32            public _get_random_90_250
0000             33            public _simple_rand
0000             34            public _Move_forward
0000             35            public _Right_angle
0000             36            public _Move_back_ms
0000             37            public _Init_all
0000             38            public _check_bound
0000             39            public _servo_moveaway
0000             40            public _Move_forward_ms
0000             41            public _servo_push
0000             42            public _servo_pick
0000             43            public _Timer5_ISR
0000             44            public _ReadHX711
0000             45            public _ADC_at_Pin
0000             46            public _InitPinADC
0000             47            public _InitADC
0000             48            public _Set_Pin_Input
0000             49            public _Set_Pin_Output
0000             50            public _measure_distance
0000             51            public _ReceptionOff
0000             52            public _SendATCommand
0000             53            public _waitms_or_RI1
0000             54            public _RXU1
0000             55            public _getstr1
0000             56            public _getchar1_with_timeout
0000             57            public _getchar1
0000             58            public _sendstr1
0000             59            public _putchar1
0000             60            public _UART1_Init
0000             61            public _BMM150_Read_Data
0000             62            public _BMM150_compensate_y
0000             63            public _BMM150_compensate_x
0000             64            public _BMM150_Init
0000             65            public _BMM150_Read_Trim_Registers
0000             66            public _SPI_write
0000             67            public _SPI_read
0000             68            public _SPI_transfer
0000             69            public _waitms
0000             70            public _Timer3us
0000             71            public __c51_external_startup
0000             72            public _pick
0000             73            public _auto_mode
0000             74            public _distance
0000             75            public _duration
0000             76            public _weight
0000             77            public _mea_yes
0000             78            public _angle_diff
0000             79            public _last_raw_angle
0000             80            public _raw_angle
0000             81            public _curr_angle
0000             82            public _pwm_corr
0000             83            public _seed
0000             84            public _weight_mea_count
0000             85            public _fre_mea_count
0000             86            public _vy
0000             87            public _vx
0000             88            public _vy_thres
0000             89            public _vx_thres
0000             90            public _servo_arm
0000             91            public _servo_base
0000             92            public _R_motor_dir
0000             93            public _L_motor_dir
0000             94            public _pwm_right
0000             95            public _pwm_left
0000             96            public _servo_counter
0000             97            public _pwm_counter
0000             98            public _i
0000             99            public _i_loo
0000            100            public _overflow_count
0000            101            public _dig_xyz1
0000            102            public _dig_xy2
0000            103            public _dig_xy1
0000            104            public _dig_z4
0000            105            public _dig_z3
0000            106            public _dig_z2
0000            107            public _dig_z1
0000            108            public _dig_y2
0000            109            public _dig_y1
0000            110            public _dig_x2
0000            111            public _dig_x1
0000            112            public _d2
0000            113            public _d1
0000            114            public _freq100
0000            115            public _buff
0000            116            public _Joystick_Control_PARM_2
0000            117            public _getstr1_PARM_2
0000            118            public _BMM150_Read_Data_PARM_2
0000            119            public _BMM150_compensate_y_PARM_2
0000            120            public _BMM150_compensate_x_PARM_2
0000            121            public _SPI_write_PARM_2
0000            122   ;--------------------------------------------------------
0000            123   ; Special Function Registers
0000            124   ;--------------------------------------------------------
0000            125   _ACC            DATA 0xe0
0000            126   _ADC0ASAH       DATA 0xb6
0000            127   _ADC0ASAL       DATA 0xb5
0000            128   _ADC0ASCF       DATA 0xa1
0000            129   _ADC0ASCT       DATA 0xc7
0000            130   _ADC0CF0        DATA 0xbc
0000            131   _ADC0CF1        DATA 0xb9
0000            132   _ADC0CF2        DATA 0xdf
0000            133   _ADC0CN0        DATA 0xe8
0000            134   _ADC0CN1        DATA 0xb2
0000            135   _ADC0CN2        DATA 0xb3
0000            136   _ADC0GTH        DATA 0xc4
0000            137   _ADC0GTL        DATA 0xc3
0000            138   _ADC0H          DATA 0xbe
0000            139   _ADC0L          DATA 0xbd
0000            140   _ADC0LTH        DATA 0xc6
0000            141   _ADC0LTL        DATA 0xc5
0000            142   _ADC0MX         DATA 0xbb
0000            143   _B              DATA 0xf0
0000            144   _CKCON0         DATA 0x8e
0000            145   _CKCON1         DATA 0xa6
0000            146   _CLEN0          DATA 0xc6
0000            147   _CLIE0          DATA 0xc7
0000            148   _CLIF0          DATA 0xe8
0000            149   _CLKSEL         DATA 0xa9
0000            150   _CLOUT0         DATA 0xd1
0000            151   _CLU0CF         DATA 0xb1
0000            152   _CLU0FN         DATA 0xaf
0000            153   _CLU0MX         DATA 0x84
0000            154   _CLU1CF         DATA 0xb3
0000            155   _CLU1FN         DATA 0xb2
0000            156   _CLU1MX         DATA 0x85
0000            157   _CLU2CF         DATA 0xb6
0000            158   _CLU2FN         DATA 0xb5
0000            159   _CLU2MX         DATA 0x91
0000            160   _CLU3CF         DATA 0xbf
0000            161   _CLU3FN         DATA 0xbe
0000            162   _CLU3MX         DATA 0xae
0000            163   _CMP0CN0        DATA 0x9b
0000            164   _CMP0CN1        DATA 0x99
0000            165   _CMP0MD         DATA 0x9d
0000            166   _CMP0MX         DATA 0x9f
0000            167   _CMP1CN0        DATA 0xbf
0000            168   _CMP1CN1        DATA 0xac
0000            169   _CMP1MD         DATA 0xab
0000            170   _CMP1MX         DATA 0xaa
0000            171   _CRC0CN0        DATA 0xce
0000            172   _CRC0CN1        DATA 0x86
0000            173   _CRC0CNT        DATA 0xd3
0000            174   _CRC0DAT        DATA 0xcb
0000            175   _CRC0FLIP       DATA 0xcf
0000            176   _CRC0IN         DATA 0xca
0000            177   _CRC0ST         DATA 0xd2
0000            178   _DAC0CF0        DATA 0x91
0000            179   _DAC0CF1        DATA 0x92
0000            180   _DAC0H          DATA 0x85
0000            181   _DAC0L          DATA 0x84
0000            182   _DAC1CF0        DATA 0x93
0000            183   _DAC1CF1        DATA 0x94
0000            184   _DAC1H          DATA 0x8a
0000            185   _DAC1L          DATA 0x89
0000            186   _DAC2CF0        DATA 0x95
0000            187   _DAC2CF1        DATA 0x96
0000            188   _DAC2H          DATA 0x8c
0000            189   _DAC2L          DATA 0x8b
0000            190   _DAC3CF0        DATA 0x9a
0000            191   _DAC3CF1        DATA 0x9c
0000            192   _DAC3H          DATA 0x8e
0000            193   _DAC3L          DATA 0x8d
0000            194   _DACGCF0        DATA 0x88
0000            195   _DACGCF1        DATA 0x98
0000            196   _DACGCF2        DATA 0xa2
0000            197   _DERIVID        DATA 0xad
0000            198   _DEVICEID       DATA 0xb5
0000            199   _DPH            DATA 0x83
0000            200   _DPL            DATA 0x82
0000            201   _EIE1           DATA 0xe6
0000            202   _EIE2           DATA 0xf3
0000            203   _EIP1           DATA 0xbb
0000            204   _EIP1H          DATA 0xee
0000            205   _EIP2           DATA 0xed
0000            206   _EIP2H          DATA 0xf6
0000            207   _EMI0CN         DATA 0xe7
0000            208   _FLKEY          DATA 0xb7
0000            209   _HFO0CAL        DATA 0xc7
0000            210   _HFO1CAL        DATA 0xd6
0000            211   _HFOCN          DATA 0xef
0000            212   _I2C0ADM        DATA 0xff
0000            213   _I2C0CN0        DATA 0xba
0000            214   _I2C0DIN        DATA 0xbc
0000            215   _I2C0DOUT       DATA 0xbb
0000            216   _I2C0FCN0       DATA 0xad
0000            217   _I2C0FCN1       DATA 0xab
0000            218   _I2C0FCT        DATA 0xf5
0000            219   _I2C0SLAD       DATA 0xbd
0000            220   _I2C0STAT       DATA 0xb9
0000            221   _IE             DATA 0xa8
0000            222   _IP             DATA 0xb8
0000            223   _IPH            DATA 0xf2
0000            224   _IT01CF         DATA 0xe4
0000            225   _LFO0CN         DATA 0xb1
0000            226   _P0             DATA 0x80
0000            227   _P0MASK         DATA 0xfe
0000            228   _P0MAT          DATA 0xfd
0000            229   _P0MDIN         DATA 0xf1
0000            230   _P0MDOUT        DATA 0xa4
0000            231   _P0SKIP         DATA 0xd4
0000            232   _P1             DATA 0x90
0000            233   _P1MASK         DATA 0xee
0000            234   _P1MAT          DATA 0xed
0000            235   _P1MDIN         DATA 0xf2
0000            236   _P1MDOUT        DATA 0xa5
0000            237   _P1SKIP         DATA 0xd5
0000            238   _P2             DATA 0xa0
0000            239   _P2MASK         DATA 0xfc
0000            240   _P2MAT          DATA 0xfb
0000            241   _P2MDIN         DATA 0xf3
0000            242   _P2MDOUT        DATA 0xa6
0000            243   _P2SKIP         DATA 0xcc
0000            244   _P3             DATA 0xb0
0000            245   _P3MDIN         DATA 0xf4
0000            246   _P3MDOUT        DATA 0x9c
0000            247   _PCA0CENT       DATA 0x9e
0000            248   _PCA0CLR        DATA 0x9c
0000            249   _PCA0CN0        DATA 0xd8
0000            250   _PCA0CPH0       DATA 0xfc
0000            251   _PCA0CPH1       DATA 0xea
0000            252   _PCA0CPH2       DATA 0xec
0000            253   _PCA0CPH3       DATA 0xf5
0000            254   _PCA0CPH4       DATA 0x85
0000            255   _PCA0CPH5       DATA 0xde
0000            256   _PCA0CPL0       DATA 0xfb
0000            257   _PCA0CPL1       DATA 0xe9
0000            258   _PCA0CPL2       DATA 0xeb
0000            259   _PCA0CPL3       DATA 0xf4
0000            260   _PCA0CPL4       DATA 0x84
0000            261   _PCA0CPL5       DATA 0xdd
0000            262   _PCA0CPM0       DATA 0xda
0000            263   _PCA0CPM1       DATA 0xdb
0000            264   _PCA0CPM2       DATA 0xdc
0000            265   _PCA0CPM3       DATA 0xae
0000            266   _PCA0CPM4       DATA 0xaf
0000            267   _PCA0CPM5       DATA 0xcc
0000            268   _PCA0H          DATA 0xfa
0000            269   _PCA0L          DATA 0xf9
0000            270   _PCA0MD         DATA 0xd9
0000            271   _PCA0POL        DATA 0x96
0000            272   _PCA0PWM        DATA 0xf7
0000            273   _PCON0          DATA 0x87
0000            274   _PCON1          DATA 0xcd
0000            275   _PFE0CN         DATA 0xc1
0000            276   _PRTDRV         DATA 0xf6
0000            277   _PSCTL          DATA 0x8f
0000            278   _PSTAT0         DATA 0xaa
0000            279   _PSW            DATA 0xd0
0000            280   _REF0CN         DATA 0xd1
0000            281   _REG0CN         DATA 0xc9
0000            282   _REVID          DATA 0xb6
0000            283   _RSTSRC         DATA 0xef
0000            284   _SBCON1         DATA 0x94
0000            285   _SBRLH1         DATA 0x96
0000            286   _SBRLL1         DATA 0x95
0000            287   _SBUF           DATA 0x99
0000            288   _SBUF0          DATA 0x99
0000            289   _SBUF1          DATA 0x92
0000            290   _SCON           DATA 0x98
0000            291   _SCON0          DATA 0x98
0000            292   _SCON1          DATA 0xc8
0000            293   _SFRPAGE        DATA 0xa7
0000            294   _SFRPGCN        DATA 0xbc
0000            295   _SFRSTACK       DATA 0xd7
0000            296   _SMB0ADM        DATA 0xd6
0000            297   _SMB0ADR        DATA 0xd7
0000            298   _SMB0CF         DATA 0xc1
0000            299   _SMB0CN0        DATA 0xc0
0000            300   _SMB0DAT        DATA 0xc2
0000            301   _SMB0FCN0       DATA 0xc3
0000            302   _SMB0FCN1       DATA 0xc4
0000            303   _SMB0FCT        DATA 0xef
0000            304   _SMB0RXLN       DATA 0xc5
0000            305   _SMB0TC         DATA 0xac
0000            306   _SMOD1          DATA 0x93
0000            307   _SP             DATA 0x81
0000            308   _SPI0CFG        DATA 0xa1
0000            309   _SPI0CKR        DATA 0xa2
0000            310   _SPI0CN0        DATA 0xf8
0000            311   _SPI0DAT        DATA 0xa3
0000            312   _SPI0FCN0       DATA 0x9a
0000            313   _SPI0FCN1       DATA 0x9b
0000            314   _SPI0FCT        DATA 0xf7
0000            315   _SPI0PCF        DATA 0xdf
0000            316   _TCON           DATA 0x88
0000            317   _TH0            DATA 0x8c
0000            318   _TH1            DATA 0x8d
0000            319   _TL0            DATA 0x8a
0000            320   _TL1            DATA 0x8b
0000            321   _TMOD           DATA 0x89
0000            322   _TMR2CN0        DATA 0xc8
0000            323   _TMR2CN1        DATA 0xfd
0000            324   _TMR2H          DATA 0xcf
0000            325   _TMR2L          DATA 0xce
0000            326   _TMR2RLH        DATA 0xcb
0000            327   _TMR2RLL        DATA 0xca
0000            328   _TMR3CN0        DATA 0x91
0000            329   _TMR3CN1        DATA 0xfe
0000            330   _TMR3H          DATA 0x95
0000            331   _TMR3L          DATA 0x94
0000            332   _TMR3RLH        DATA 0x93
0000            333   _TMR3RLL        DATA 0x92
0000            334   _TMR4CN0        DATA 0x98
0000            335   _TMR4CN1        DATA 0xff
0000            336   _TMR4H          DATA 0xa5
0000            337   _TMR4L          DATA 0xa4
0000            338   _TMR4RLH        DATA 0xa3
0000            339   _TMR4RLL        DATA 0xa2
0000            340   _TMR5CN0        DATA 0xc0
0000            341   _TMR5CN1        DATA 0xf1
0000            342   _TMR5H          DATA 0xd5
0000            343   _TMR5L          DATA 0xd4
0000            344   _TMR5RLH        DATA 0xd3
0000            345   _TMR5RLL        DATA 0xd2
0000            346   _UART0PCF       DATA 0xd9
0000            347   _UART1FCN0      DATA 0x9d
0000            348   _UART1FCN1      DATA 0xd8
0000            349   _UART1FCT       DATA 0xfa
0000            350   _UART1LIN       DATA 0x9e
0000            351   _UART1PCF       DATA 0xda
0000            352   _VDM0CN         DATA 0xff
0000            353   _WDTCN          DATA 0x97
0000            354   _XBR0           DATA 0xe1
0000            355   _XBR1           DATA 0xe2
0000            356   _XBR2           DATA 0xe3
0000            357   _XOSC0CN        DATA 0x86
0000            358   _DPTR           DATA 0x8382
0000            359   _TMR2RL         DATA 0xcbca
0000            360   _TMR3RL         DATA 0x9392
0000            361   _TMR4RL         DATA 0xa3a2
0000            362   _TMR5RL         DATA 0xd3d2
0000            363   _TMR0           DATA 0x8c8a
0000            364   _TMR1           DATA 0x8d8b
0000            365   _TMR2           DATA 0xcfce
0000            366   _TMR3           DATA 0x9594
0000            367   _TMR4           DATA 0xa5a4
0000            368   _TMR5           DATA 0xd5d4
0000            369   _SBRL1          DATA 0x9695
0000            370   _PCA0           DATA 0xfaf9
0000            371   _PCA0CP0        DATA 0xfcfb
0000            372   _PCA0CP1        DATA 0xeae9
0000            373   _PCA0CP2        DATA 0xeceb
0000            374   _PCA0CP3        DATA 0xf5f4
0000            375   _PCA0CP4        DATA 0x8584
0000            376   _PCA0CP5        DATA 0xdedd
0000            377   _ADC0ASA        DATA 0xb6b5
0000            378   _ADC0GT         DATA 0xc4c3
0000            379   _ADC0           DATA 0xbebd
0000            380   _ADC0LT         DATA 0xc6c5
0000            381   _DAC0           DATA 0x8584
0000            382   _DAC1           DATA 0x8a89
0000            383   _DAC2           DATA 0x8c8b
0000            384   _DAC3           DATA 0x8e8d
0000            385   ;--------------------------------------------------------
0000            386   ; special function bits
0000            387   ;--------------------------------------------------------
0000            388   _ACC_0          BIT 0xe0
0000            389   _ACC_1          BIT 0xe1
0000            390   _ACC_2          BIT 0xe2
0000            391   _ACC_3          BIT 0xe3
0000            392   _ACC_4          BIT 0xe4
0000            393   _ACC_5          BIT 0xe5
0000            394   _ACC_6          BIT 0xe6
0000            395   _ACC_7          BIT 0xe7
0000            396   _TEMPE          BIT 0xe8
0000            397   _ADGN0          BIT 0xe9
0000            398   _ADGN1          BIT 0xea
0000            399   _ADWINT         BIT 0xeb
0000            400   _ADBUSY         BIT 0xec
0000            401   _ADINT          BIT 0xed
0000            402   _IPOEN          BIT 0xee
0000            403   _ADEN           BIT 0xef
0000            404   _B_0            BIT 0xf0
0000            405   _B_1            BIT 0xf1
0000            406   _B_2            BIT 0xf2
0000            407   _B_3            BIT 0xf3
0000            408   _B_4            BIT 0xf4
0000            409   _B_5            BIT 0xf5
0000            410   _B_6            BIT 0xf6
0000            411   _B_7            BIT 0xf7
0000            412   _C0FIF          BIT 0xe8
0000            413   _C0RIF          BIT 0xe9
0000            414   _C1FIF          BIT 0xea
0000            415   _C1RIF          BIT 0xeb
0000            416   _C2FIF          BIT 0xec
0000            417   _C2RIF          BIT 0xed
0000            418   _C3FIF          BIT 0xee
0000            419   _C3RIF          BIT 0xef
0000            420   _D1SRC0         BIT 0x88
0000            421   _D1SRC1         BIT 0x89
0000            422   _D1AMEN         BIT 0x8a
0000            423   _D01REFSL       BIT 0x8b
0000            424   _D3SRC0         BIT 0x8c
0000            425   _D3SRC1         BIT 0x8d
0000            426   _D3AMEN         BIT 0x8e
0000            427   _D23REFSL       BIT 0x8f
0000            428   _D0UDIS         BIT 0x98
0000            429   _D1UDIS         BIT 0x99
0000            430   _D2UDIS         BIT 0x9a
0000            431   _D3UDIS         BIT 0x9b
0000            432   _EX0            BIT 0xa8
0000            433   _ET0            BIT 0xa9
0000            434   _EX1            BIT 0xaa
0000            435   _ET1            BIT 0xab
0000            436   _ES0            BIT 0xac
0000            437   _ET2            BIT 0xad
0000            438   _ESPI0          BIT 0xae
0000            439   _EA             BIT 0xaf
0000            440   _PX0            BIT 0xb8
0000            441   _PT0            BIT 0xb9
0000            442   _PX1            BIT 0xba
0000            443   _PT1            BIT 0xbb
0000            444   _PS0            BIT 0xbc
0000            445   _PT2            BIT 0xbd
0000            446   _PSPI0          BIT 0xbe
0000            447   _P0_0           BIT 0x80
0000            448   _P0_1           BIT 0x81
0000            449   _P0_2           BIT 0x82
0000            450   _P0_3           BIT 0x83
0000            451   _P0_4           BIT 0x84
0000            452   _P0_5           BIT 0x85
0000            453   _P0_6           BIT 0x86
0000            454   _P0_7           BIT 0x87
0000            455   _P1_0           BIT 0x90
0000            456   _P1_1           BIT 0x91
0000            457   _P1_2           BIT 0x92
0000            458   _P1_3           BIT 0x93
0000            459   _P1_4           BIT 0x94
0000            460   _P1_5           BIT 0x95
0000            461   _P1_6           BIT 0x96
0000            462   _P1_7           BIT 0x97
0000            463   _P2_0           BIT 0xa0
0000            464   _P2_1           BIT 0xa1
0000            465   _P2_2           BIT 0xa2
0000            466   _P2_3           BIT 0xa3
0000            467   _P2_4           BIT 0xa4
0000            468   _P2_5           BIT 0xa5
0000            469   _P2_6           BIT 0xa6
0000            470   _P3_0           BIT 0xb0
0000            471   _P3_1           BIT 0xb1
0000            472   _P3_2           BIT 0xb2
0000            473   _P3_3           BIT 0xb3
0000            474   _P3_4           BIT 0xb4
0000            475   _P3_7           BIT 0xb7
0000            476   _CCF0           BIT 0xd8
0000            477   _CCF1           BIT 0xd9
0000            478   _CCF2           BIT 0xda
0000            479   _CCF3           BIT 0xdb
0000            480   _CCF4           BIT 0xdc
0000            481   _CCF5           BIT 0xdd
0000            482   _CR             BIT 0xde
0000            483   _CF             BIT 0xdf
0000            484   _PARITY         BIT 0xd0
0000            485   _F1             BIT 0xd1
0000            486   _OV             BIT 0xd2
0000            487   _RS0            BIT 0xd3
0000            488   _RS1            BIT 0xd4
0000            489   _F0             BIT 0xd5
0000            490   _AC             BIT 0xd6
0000            491   _CY             BIT 0xd7
0000            492   _RI             BIT 0x98
0000            493   _TI             BIT 0x99
0000            494   _RB8            BIT 0x9a
0000            495   _TB8            BIT 0x9b
0000            496   _REN            BIT 0x9c
0000            497   _CE             BIT 0x9d
0000            498   _SMODE          BIT 0x9e
0000            499   _RI1            BIT 0xc8
0000            500   _TI1            BIT 0xc9
0000            501   _RBX1           BIT 0xca
0000            502   _TBX1           BIT 0xcb
0000            503   _REN1           BIT 0xcc
0000            504   _PERR1          BIT 0xcd
0000            505   _OVR1           BIT 0xce
0000            506   _SI             BIT 0xc0
0000            507   _ACK            BIT 0xc1
0000            508   _ARBLOST        BIT 0xc2
0000            509   _ACKRQ          BIT 0xc3
0000            510   _STO            BIT 0xc4
0000            511   _STA            BIT 0xc5
0000            512   _TXMODE         BIT 0xc6
0000            513   _MASTER         BIT 0xc7
0000            514   _SPIEN          BIT 0xf8
0000            515   _TXNF           BIT 0xf9
0000            516   _NSSMD0         BIT 0xfa
0000            517   _NSSMD1         BIT 0xfb
0000            518   _RXOVRN         BIT 0xfc
0000            519   _MODF           BIT 0xfd
0000            520   _WCOL           BIT 0xfe
0000            521   _SPIF           BIT 0xff
0000            522   _IT0            BIT 0x88
0000            523   _IE0            BIT 0x89
0000            524   _IT1            BIT 0x8a
0000            525   _IE1            BIT 0x8b
0000            526   _TR0            BIT 0x8c
0000            527   _TF0            BIT 0x8d
0000            528   _TR1            BIT 0x8e
0000            529   _TF1            BIT 0x8f
0000            530   _T2XCLK0        BIT 0xc8
0000            531   _T2XCLK1        BIT 0xc9
0000            532   _TR2            BIT 0xca
0000            533   _T2SPLIT        BIT 0xcb
0000            534   _TF2CEN         BIT 0xcc
0000            535   _TF2LEN         BIT 0xcd
0000            536   _TF2L           BIT 0xce
0000            537   _TF2H           BIT 0xcf
0000            538   _T4XCLK0        BIT 0x98
0000            539   _T4XCLK1        BIT 0x99
0000            540   _TR4            BIT 0x9a
0000            541   _T4SPLIT        BIT 0x9b
0000            542   _TF4CEN         BIT 0x9c
0000            543   _TF4LEN         BIT 0x9d
0000            544   _TF4L           BIT 0x9e
0000            545   _TF4H           BIT 0x9f
0000            546   _T5XCLK0        BIT 0xc0
0000            547   _T5XCLK1        BIT 0xc1
0000            548   _TR5            BIT 0xc2
0000            549   _T5SPLIT        BIT 0xc3
0000            550   _TF5CEN         BIT 0xc4
0000            551   _TF5LEN         BIT 0xc5
0000            552   _TF5L           BIT 0xc6
0000            553   _TF5H           BIT 0xc7
0000            554   _RIE            BIT 0xd8
0000            555   _RXTO0          BIT 0xd9
0000            556   _RXTO1          BIT 0xda
0000            557   _RFRQ           BIT 0xdb
0000            558   _TIE            BIT 0xdc
0000            559   _TXHOLD         BIT 0xdd
0000            560   _TXNF1          BIT 0xde
0000            561   _TFRQ           BIT 0xdf
0000            562   ;--------------------------------------------------------
0000            563   ; overlayable register banks
0000            564   ;--------------------------------------------------------
0000            565            rbank0 segment data overlay
0000            566   ;--------------------------------------------------------
0000            567   ; overlayable bit register bank
0000            568   ;--------------------------------------------------------
0000            569            rseg BIT_BANK
0000            570   bits:
0000            571            ds 1
0001            572            b0 equ  bits.0 
0001            573            b1 equ  bits.1 
0001            574            b2 equ  bits.2 
0001            575            b3 equ  bits.3 
0001            576            b4 equ  bits.4 
0001            577            b5 equ  bits.5 
0001            578            b6 equ  bits.6 
0001            579            b7 equ  bits.7 
0001            580   ;--------------------------------------------------------
0001            581   ; internal ram data
0001            582   ;--------------------------------------------------------
0000            583            rseg R_DSEG
0000            584   _SPI_write_PARM_2:
0000            585            ds 1
0001            586   _BMM150_compensate_x_PARM_2:
0001            587            ds 3
0004            588   _BMM150_compensate_x_sloc0_1_0:
0004            589            ds 4
0008            590   _BMM150_compensate_y_PARM_2:
0008            591            ds 3
000B            592   _BMM150_compensate_y_sloc0_1_0:
000B            593            ds 4
000F            594   _BMM150_Read_Data_PARM_2:
000F            595            ds 3
0012            596   _BMM150_Read_Data_mag_x_1_123:
0012            597            ds 3
0015            598   _getstr1_PARM_2:
0015            599            ds 1
0016            600   _Auto_mode_slave_sloc0_1_0:
0016            601            ds 2
0018            602   _Auto_mode_slave_sloc1_1_0:
0018            603            ds 2
001A            604   _Auto_mode_slave_sloc2_1_0:
001A            605            ds 2
001C            606   _Auto_mode_slave_sloc3_1_0:
001C            607            ds 4
0020            608   _Joystick_Control_PARM_2:
0020            609            ds 3
0023            610   _Joystick_Control_sloc0_1_0:
0023            611            ds 2
0025            612   _Joystick_Control_sloc1_1_0:
0025            613            ds 1
0026            614   _Joystick_Control_sloc2_1_0:
0026            615            ds 1
0027            616   _Joystick_Control_sloc3_1_0:
0027            617            ds 4
002B            618   _Joystick_Control_sloc4_1_0:
002B            619            ds 4
002F            620   _Joystick_Control_sloc5_1_0:
002F            621            ds 4
0033            622   _main_sloc0_1_0:
0033            623            ds 2
0035            624   ;--------------------------------------------------------
0035            625   ; overlayable items in internal ram 
0035            626   ;--------------------------------------------------------
0000            627            rseg    R_OSEG
0000            628            rseg    R_OSEG
0000            629            rseg    R_OSEG
0000            630            rseg    R_OSEG
0000            631            rseg    R_OSEG
0000            632            rseg    R_OSEG
0000            633   _InitPinADC_PARM_2:
0000            634            ds 1
0001            635            rseg    R_OSEG
0001            636            rseg    R_OSEG
0001            637   _check_bound_PARM_2:
0001            638            ds 2
0003            639   ;--------------------------------------------------------
0003            640   ; indirectly addressable internal ram data
0003            641   ;--------------------------------------------------------
0000            642            rseg R_ISEG
0000            643   _buff:
0000            644            ds 20
0014            645   ;--------------------------------------------------------
0014            646   ; absolute internal ram data
0014            647   ;--------------------------------------------------------
0000            648            DSEG
0000            649   ;--------------------------------------------------------
0000            650   ; bit data
0000            651   ;--------------------------------------------------------
0000            652            rseg R_BSEG
0000            653   ;--------------------------------------------------------
0000            654   ; paged external ram data
0000            655   ;--------------------------------------------------------
0000            656            rseg R_PSEG
0000            657   ;--------------------------------------------------------
0000            658   ; external ram data
0000            659   ;--------------------------------------------------------
0000            660            rseg R_XSEG
0000            661   _freq100:
0000            662            ds 4
0004            663   _d1:
0004            664            ds 2
0006            665   _d2:
0006            666            ds 2
0008            667   _dig_x1:
0008            668            ds 1
0009            669   _dig_x2:
0009            670            ds 1
000A            671   _dig_y1:
000A            672            ds 1
000B            673   _dig_y2:
000B            674            ds 1
000C            675   _dig_z1:
000C            676            ds 2
000E            677   _dig_z2:
000E            678            ds 2
0010            679   _dig_z3:
0010            680            ds 2
0012            681   _dig_z4:
0012            682            ds 2
0014            683   _dig_xy1:
0014            684            ds 1
0015            685   _dig_xy2:
0015            686            ds 1
0016            687   _dig_xyz1:
0016            688            ds 2
0018            689   _overflow_count:
0018            690            ds 1
0019            691   _i_loo:
0019            692            ds 2
001B            693   _i:
001B            694            ds 2
001D            695   _BMM150_Read_Trim_Registers_trim_x1y1_1_97:
001D            696            ds 2
001F            697   _BMM150_Read_Trim_Registers_trim_xyz_data_1_97:
001F            698            ds 4
0023            699   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_97:
0023            700            ds 10
002D            701   _BMM150_compensate_x_retval_1_106:
002D            702            ds 2
002F            703   _BMM150_compensate_x_process_comp_x0_1_106:
002F            704            ds 2
0031            705   _BMM150_compensate_y_retval_1_115:
0031            706            ds 2
0033            707   _BMM150_compensate_y_process_comp_y0_1_115:
0033            708            ds 2
0035            709   _BMM150_Read_Data_x_val_1_124:
0035            710            ds 2
0037            711   _BMM150_Read_Data_y_val_1_124:
0037            712            ds 2
0039            713   _BMM150_Read_Data_rhall_val_1_124:
0039            714            ds 2
003B            715   _ReadHX711_dataa_1_177:
003B            716            ds 4
003F            717   _ReadHX711_j_1_177:
003F            718            ds 1
0040            719   _Read_angle_mag_x_1_231:
0040            720            ds 2
0042            721   _Read_angle_mag_y_1_231:
0042            722            ds 2
0044            723   _Read_angle_sum_x_1_231:
0044            724            ds 4
0048            725   _Read_angle_sum_y_1_231:
0048            726            ds 4
004C            727   _Read_angle_angle_1_231:
004C            728            ds 4
0050            729   _Auto_mode_slave_command_1_233:
0050            730            ds 2
0052            731   _Auto_mode_slave_state_res_1_233:
0052            732            ds 2
0054            733   _Auto_mode_slave_dummy_1_233:
0054            734            ds 2
0056            735   _Joystick_Control_vx_error_1_246:
0056            736            ds 2
0058            737   _Joystick_Control_vy_error_1_246:
0058            738            ds 2
005A            739   _Joystick_Control_vx_err_1_246:
005A            740            ds 2
005C            741   _Joystick_Control_vy_err_1_246:
005C            742            ds 2
005E            743   ;--------------------------------------------------------
005E            744   ; absolute external ram data
005E            745   ;--------------------------------------------------------
0000            746            XSEG
0000            747   ;--------------------------------------------------------
0000            748   ; external initialized ram data
0000            749   ;--------------------------------------------------------
0000            750            rseg R_IXSEG
0000            751   _pwm_counter:
0000            752            ds 2
0002            753   _servo_counter:
0002            754            ds 2
0004            755   _pwm_left:
0004            756            ds 1
0005            757   _pwm_right:
0005            758            ds 1
0006            759   _L_motor_dir:
0006            760            ds 1
0007            761   _R_motor_dir:
0007            762            ds 1
0008            763   _servo_base:
0008            764            ds 1
0009            765   _servo_arm:
0009            766            ds 1
000A            767   _vx_thres:
000A            768            ds 2
000C            769   _vy_thres:
000C            770            ds 2
000E            771   _vx:
000E            772            ds 2
0010            773   _vy:
0010            774            ds 2
0012            775   _fre_mea_count:
0012            776            ds 2
0014            777   _weight_mea_count:
0014            778            ds 2
0016            779   _seed:
0016            780            ds 2
0018            781   _pwm_corr:
0018            782            ds 4
001C            783   _curr_angle:
001C            784            ds 4
0020            785   _raw_angle:
0020            786            ds 4
0024            787   _last_raw_angle:
0024            788            ds 4
0028            789   _angle_diff:
0028            790            ds 4
002C            791   _mea_yes:
002C            792            ds 1
002D            793   _weight:
002D            794            ds 2
002F            795   _duration:
002F            796            ds 4
0033            797   _distance:
0033            798            ds 2
0035            799   _auto_mode:
0035            800            ds 2
0037            801   _pick:
0037            802            ds 1
0000            803            rseg R_HOME
0000            804            rseg R_GSINIT
0000            805            rseg R_CSEG
0000            806   ;--------------------------------------------------------
0000            807   ; Reset entry point and interrupt vectors
0000            808   ;--------------------------------------------------------
0000            809            CSEG at 0x0000
0000 020000     810            ljmp    _crt0
0093            811            CSEG at 0x0093
0093 020000     812            ljmp    _Timer5_ISR
0096            813   ;--------------------------------------------------------
0096            814   ; global & static initialisations
0096            815   ;--------------------------------------------------------
0000            816            rseg R_HOME
0000            817            rseg R_GSINIT
0000            818            rseg R_GSINIT
0000            819   ;--------------------------------------------------------
0000            820   ; data variables initialization
0000            821   ;--------------------------------------------------------
0000            822            rseg R_DINIT
0000            823            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            824   ;--------------------------------------------------------
0000            825   ; code
0000            826   ;--------------------------------------------------------
0000            827            rseg R_CSEG
0000            828   ;------------------------------------------------------------
0000            829   ;Allocation info for local variables in function '_c51_external_startup'
0000            830   ;------------------------------------------------------------
0000            831   ;------------------------------------------------------------
0000            832   ;        main.c:120: char _c51_external_startup (void)
0000            833   ;        -----------------------------------------
0000            834   ;         function _c51_external_startup
0000            835   ;        -----------------------------------------
0000            836   __c51_external_startup:
0000            837            using   0
0000            838   ;        main.c:123: SFRPAGE = 0x00;
0000 75A700     839            mov     _SFRPAGE,#0x00
0003            840   ;        main.c:124: WDTCN = 0xDE; //First key
0003 7597DE     841            mov     _WDTCN,#0xDE
0006            842   ;        main.c:125: WDTCN = 0xAD; //Second key
0006 7597AD     843            mov     _WDTCN,#0xAD
0009            844   ;        main.c:127: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     845            mov     _VDM0CN,#0x80
000C            846   ;        main.c:128: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     847            mov     _RSTSRC,#0x06
000F            848   ;        main.c:135: SFRPAGE = 0x10;
000F 75A710     849            mov     _SFRPAGE,#0x10
0012            850   ;        main.c:136: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     851            mov     _PFE0CN,#0x20
0015            852   ;        main.c:137: SFRPAGE = 0x00;
0015 75A700     853            mov     _SFRPAGE,#0x00
0018            854   ;        main.c:158: CLKSEL = 0x00;
0018 75A900     855            mov     _CLKSEL,#0x00
001B            856   ;        main.c:159: CLKSEL = 0x00;
001B 75A900     857            mov     _CLKSEL,#0x00
001E            858   ;        main.c:160: while ((CLKSEL & 0x80) == 0);
001E            859   L002001?:
001E E5A9       860            mov     a,_CLKSEL
0020 30E7F8     861            jnb     acc.7,L002001?
0023            862   ;        main.c:161: CLKSEL = 0x03;
0023 75A903     863            mov     _CLKSEL,#0x03
0026            864   ;        main.c:162: CLKSEL = 0x03;
0026 75A903     865            mov     _CLKSEL,#0x03
0029            866   ;        main.c:163: while ((CLKSEL & 0x80) == 0);
0029            867   L002004?:
0029 E5A9       868            mov     a,_CLKSEL
002B 30E778     869            jnb     acc.7,L002004?
002E            870   ;        main.c:169: P0MDOUT |= 0b_1100_0000;
002E 43A4C0     871            orl     _P0MDOUT,#0xC0
0031            872   ;        main.c:170: P1MDOUT |= 0b_0000_0110;
0031 43A506     873            orl     _P1MDOUT,#0x06
0034            874   ;        main.c:171: P2MDOUT |= 0b_0000_0001; // P2.0 in push-pull mode
0034 43A601     875            orl     _P2MDOUT,#0x01
0037            876   ;        main.c:172: XBR0     = 0b_0000_0011; // UART0E = 1 and SPI0E = 1 0b_0000_0011               
0037 75E103     877            mov     _XBR0,#0x03
003A            878   ;        main.c:173: XBR1     = 0b_0000_0000;
003A 75E200     879            mov     _XBR1,#0x00
003D            880   ;        main.c:174: XBR2     = 0b_0100_0001; // Enable crossbar and uart 1
003D 75E341     881            mov     _XBR2,#0x41
0040            882   ;        main.c:175: P0SKIP       = 0b_0000_0111; 
0040 75D407     883            mov     _P0SKIP,#0x07
0043            884   ;        main.c:176: P1SKIP   = 0b_1111_1001;
0043 75D5F9     885            mov     _P1SKIP,#0xF9
0046            886   ;        main.c:181: SCON0 = 0x10;
0046 759810     887            mov     _SCON0,#0x10
0049            888   ;        main.c:182: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     889            mov     _TH1,#0xE6
004C            890   ;        main.c:183: TL1 = TH1;      // Init Timer1
004C 858D8B     891            mov     _TL1,_TH1
004F            892   ;        main.c:184: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     893            anl     _TMOD,#0x0F
0052            894   ;        main.c:185: TMOD |=  0x20;                       
0052 438920     895            orl     _TMOD,#0x20
0055            896   ;        main.c:186: TR1 = 1; // START Timer1
0055 D28E       897            setb    _TR1
0057            898   ;        main.c:187: TI = 1;  // Indicate TX0 ready
0057 D299       899            setb    _TI
0059            900   ;        main.c:188: P2_0=1; // 'set' pin to 1 is normal operation mode.
0059 D2A0       901            setb    _P2_0
005B            902   ;        main.c:191: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
005B 75A211     903            mov     _SPI0CKR,#0x11
005E            904   ;        main.c:192: SPI0CFG = 0b_1110_0000; // SPI mode 3
005E 75A1E0     905            mov     _SPI0CFG,#0xE0
0061            906   ;        main.c:193: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0061 75F801     907            mov     _SPI0CN0,#0x01
0064            908   ;        main.c:196: SFRPAGE=0x10;
0064 75A710     909            mov     _SFRPAGE,#0x10
0067            910   ;        main.c:197: TMR5CN0=0x00;
0067 75C000     911            mov     _TMR5CN0,#0x00
006A            912   ;        main.c:198: TMR5=0xffff;   // Set to reload immediately
006A 75D4FF     913            mov     _TMR5,#0xFF
006D 75D5FF     914            mov     (_TMR5 >> 8),#0xFF
0070            915   ;        main.c:199: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
0070 43F308     916            orl     _EIE2,#0x08
0073            917   ;        main.c:200: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0073 D2C2       918            setb    _TR5
0075            919   ;        main.c:202: EA=1;  // Enable global interrupts
0075 D2AF       920            setb    _EA
0077            921   ;        main.c:203: SFRPAGE=0x00;
0077 75A700     922            mov     _SFRPAGE,#0x00
007A            923   ;        main.c:205: return 0;
007A 758200     924            mov     dpl,#0x00
007D 22         925            ret
007E            926   ;------------------------------------------------------------
007E            927   ;Allocation info for local variables in function 'Timer3us'
007E            928   ;------------------------------------------------------------
007E            929   ;us                        Allocated to registers r2 
007E            930   ;i                         Allocated to registers r3 
007E            931   ;------------------------------------------------------------
007E            932   ;        main.c:209: void Timer3us(unsigned char us)
007E            933   ;        -----------------------------------------
007E            934   ;         function Timer3us
007E            935   ;        -----------------------------------------
007E            936   _Timer3us:
007E AA82       937            mov     r2,dpl
0080            938   ;        main.c:214: CKCON0|=0b_0100_0000;
0080 438E40     939            orl     _CKCON0,#0x40
0083            940   ;        main.c:216: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0083 7592B8     941            mov     _TMR3RL,#0xB8
0086 7593FF     942            mov     (_TMR3RL >> 8),#0xFF
0089            943   ;        main.c:217: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0089 859294     944            mov     _TMR3,_TMR3RL
008C 859395     945            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
008F            946   ;        main.c:219: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
008F 759104     947            mov     _TMR3CN0,#0x04
0092            948   ;        main.c:220: for (i = 0; i < us; i++)       // Count <us> overflows
0092 7B00       949            mov     r3,#0x00
0094            950   L003004?:
0094 C3         951            clr     c
0095 EB         952            mov     a,r3
0096 9A         953            subb    a,r2
0097 5000       954            jnc     L003007?
0099            955   ;        main.c:222: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0099            956   L003001?:
0099 E591       957            mov     a,_TMR3CN0
009B 30E778     958            jnb     acc.7,L003001?
009E            959   ;        main.c:223: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
009E 53917F     960            anl     _TMR3CN0,#0x7F
00A1            961   ;        main.c:220: for (i = 0; i < us; i++)       // Count <us> overflows
00A1 0B         962            inc     r3
00A2 8000       963            sjmp    L003004?
00A4            964   L003007?:
00A4            965   ;        main.c:225: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00A4 759100     966            mov     _TMR3CN0,#0x00
00A7 22         967            ret
00A8            968   ;------------------------------------------------------------
00A8            969   ;Allocation info for local variables in function 'waitms'
00A8            970   ;------------------------------------------------------------
00A8            971   ;ms                        Allocated to registers r2 r3 
00A8            972   ;j                         Allocated to registers r4 r5 
00A8            973   ;k                         Allocated to registers r6 
00A8            974   ;------------------------------------------------------------
00A8            975   ;        main.c:228: void waitms (unsigned int ms)
00A8            976   ;        -----------------------------------------
00A8            977   ;         function waitms
00A8            978   ;        -----------------------------------------
00A8            979   _waitms:
00A8 AA82       980            mov     r2,dpl
00AA AB83       981            mov     r3,dph
00AC            982   ;        main.c:232: for(j=0; j<ms; j++)
00AC 7C00       983            mov     r4,#0x00
00AE 7D00       984            mov     r5,#0x00
00B0            985   L004005?:
00B0 C3         986            clr     c
00B1 EC         987            mov     a,r4
00B2 9A         988            subb    a,r2
00B3 ED         989            mov     a,r5
00B4 9B         990            subb    a,r3
00B5 5000       991            jnc     L004009?
00B7            992   ;        main.c:233: for (k=0; k<4; k++) Timer3us(250);
00B7 7E00       993            mov     r6,#0x00
00B9            994   L004001?:
00B9 BE04B8     995            cjne    r6,#0x04,L004018?
00BC            996   L004018?:
00BC 5000       997            jnc     L004007?
00BE 7582FA     998            mov     dpl,#0xFA
00C1 C002       999            push    ar2
00C3 C003      1000            push    ar3
00C5 C004      1001            push    ar4
00C7 C005      1002            push    ar5
00C9 C006      1003            push    ar6
00CB 120000    1004            lcall   _Timer3us
00CE D006      1005            pop     ar6
00D0 D005      1006            pop     ar5
00D2 D004      1007            pop     ar4
00D4 D003      1008            pop     ar3
00D6 D002      1009            pop     ar2
00D8 0E        1010            inc     r6
00D9 8000      1011            sjmp    L004001?
00DB           1012   L004007?:
00DB           1013   ;        main.c:232: for(j=0; j<ms; j++)
00DB 0C        1014            inc     r4
00DC BC00F8    1015            cjne    r4,#0x00,L004005?
00DF 0D        1016            inc     r5
00E0 8000      1017            sjmp    L004005?
00E2           1018   L004009?:
00E2 22        1019            ret
00E3           1020   ;------------------------------------------------------------
00E3           1021   ;Allocation info for local variables in function 'SPI_transfer'
00E3           1022   ;------------------------------------------------------------
00E3           1023   ;tx_data                   Allocated to registers 
00E3           1024   ;------------------------------------------------------------
00E3           1025   ;        main.c:236: unsigned char SPI_transfer(unsigned char tx_data)
00E3           1026   ;        -----------------------------------------
00E3           1027   ;         function SPI_transfer
00E3           1028   ;        -----------------------------------------
00E3           1029   _SPI_transfer:
00E3 8582A3    1030            mov     _SPI0DAT,dpl
00E6           1031   ;        main.c:239: while (!SPIF);      // Wait for transfer to complete
00E6           1032   L005001?:
00E6           1033   ;        main.c:240: SPIF = 0;           // Clear SPI interrupt flag
00E6 10FF78    1034            jbc     _SPIF,L005008?
00E9 8000      1035            sjmp    L005001?
00EB           1036   L005008?:
00EB           1037   ;        main.c:241: return SPI0DAT;     // Return received data
00EB 85A382    1038            mov     dpl,_SPI0DAT
00EE 22        1039            ret
00EF           1040   ;------------------------------------------------------------
00EF           1041   ;Allocation info for local variables in function 'SPI_read'
00EF           1042   ;------------------------------------------------------------
00EF           1043   ;reg_addr                  Allocated to registers r2 
00EF           1044   ;value                     Allocated with name '_SPI_read_value_1_93'
00EF           1045   ;------------------------------------------------------------
00EF           1046   ;        main.c:244: unsigned char SPI_read(unsigned char reg_addr)
00EF           1047   ;        -----------------------------------------
00EF           1048   ;         function SPI_read
00EF           1049   ;        -----------------------------------------
00EF           1050   _SPI_read:
00EF AA82      1051            mov     r2,dpl
00F1           1052   ;        main.c:249: reg_addr = reg_addr | 0x80;
00F1 430280    1053            orl     ar2,#0x80
00F4           1054   ;        main.c:251: CS = 0;                // Select the device
00F4 C290      1055            clr     _P1_0
00F6           1056   ;        main.c:252: SPI_transfer(reg_addr);     // Send register address
00F6 8A82      1057            mov     dpl,r2
00F8 120000    1058            lcall   _SPI_transfer
00FB           1059   ;        main.c:253: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
00FB 758200    1060            mov     dpl,#0x00
00FE 120000    1061            lcall   _SPI_transfer
0101           1062   ;        main.c:254: CS = 1;                // Deselect the device
0101 D290      1063            setb    _P1_0
0103           1064   ;        main.c:256: return value;
0103 22        1065            ret
0104           1066   ;------------------------------------------------------------
0104           1067   ;Allocation info for local variables in function 'SPI_write'
0104           1068   ;------------------------------------------------------------
0104           1069   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0104           1070   ;reg_addr                  Allocated to registers r2 
0104           1071   ;------------------------------------------------------------
0104           1072   ;        main.c:259: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0104           1073   ;        -----------------------------------------
0104           1074   ;         function SPI_write
0104           1075   ;        -----------------------------------------
0104           1076   _SPI_write:
0104 AA82      1077            mov     r2,dpl
0106           1078   ;        main.c:262: reg_addr = reg_addr & 0x7F;
0106 53027F    1079            anl     ar2,#0x7F
0109           1080   ;        main.c:264: CS = 0;                // Select device
0109 C290      1081            clr     _P1_0
010B           1082   ;        main.c:265: SPI_transfer(reg_addr);     // Send register address
010B 8A82      1083            mov     dpl,r2
010D 120000    1084            lcall   _SPI_transfer
0110           1085   ;        main.c:266: SPI_transfer(reg_value);    // Send value
0110 853082    1086            mov     dpl,_SPI_write_PARM_2
0113 120000    1087            lcall   _SPI_transfer
0116           1088   ;        main.c:267: CS = 1;                // Deselect device
0116 D290      1089            setb    _P1_0
0118 22        1090            ret
0119           1091   ;------------------------------------------------------------
0119           1092   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
0119           1093   ;------------------------------------------------------------
0119           1094   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_97'
0119           1095   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_97'
0119           1096   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_97'
0119           1097   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97'
0119           1098   ;------------------------------------------------------------
0119           1099   ;        main.c:270: void BMM150_Read_Trim_Registers(void)
0119           1100   ;        -----------------------------------------
0119           1101   ;         function BMM150_Read_Trim_Registers
0119           1102   ;        -----------------------------------------
0119           1103   _BMM150_Read_Trim_Registers:
0119           1104   ;        main.c:274: xdata uint8_t trim_x1y1[2] = {0};
0119 90CDA0    1105            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
011C           1106   ;        main.c:275: xdata uint8_t trim_xyz_data[4] = {0};
011C E4        1107            clr     a
011D F0        1108            movx    @dptr,a
011E 90CDA1    1109            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
0121 F0        1110            movx    @dptr,a
0122 90CE00    1111            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0125 F0        1112            movx    @dptr,a
0126 90CE01    1113            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0001)
0129 F0        1114            movx    @dptr,a
012A 90CE02    1115            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
012D           1116   ;        main.c:276: xdata uint8_t trim_xy1xy2[10] = {0};
012D E4        1117            clr     a
012E F0        1118            movx    @dptr,a
012F 90CE03    1119            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0132 F0        1120            movx    @dptr,a
0133 90CE60    1121            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0136 F0        1122            movx    @dptr,a
0137 90CE61    1123            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0001)
013A F0        1124            movx    @dptr,a
013B 90CE62    1125            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0002)
013E E4        1126            clr     a
013F F0        1127            movx    @dptr,a
0140 90CE63    1128            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0003)
0143 F0        1129            movx    @dptr,a
0144 90CE64    1130            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0147 F0        1131            movx    @dptr,a
0148 90CE65    1132            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
014B F0        1133            movx    @dptr,a
014C 90CE66    1134            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0006)
014F E4        1135            clr     a
0150 F0        1136            movx    @dptr,a
0151 90CE67    1137            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0007)
0154 F0        1138            movx    @dptr,a
0155 90CE68    1139            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0158 F0        1140            movx    @dptr,a
0159 90CE69    1141            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
015C F0        1142            movx    @dptr,a
015D           1143   ;        main.c:279: for (i=0;i<2;i++){
015D 905320    1144            mov     dptr,#_i
0160 E4        1145            clr     a
0161 F0        1146            movx    @dptr,a
0162 A3        1147            inc     dptr
0163 F0        1148            movx    @dptr,a
0164           1149   L008001?:
0164 905320    1150            mov     dptr,#_i
0167 E0        1151            movx    a,@dptr
0168 FA        1152            mov     r2,a
0169 A3        1153            inc     dptr
016A E0        1154            movx    a,@dptr
016B FB        1155            mov     r3,a
016C C3        1156            clr     c
016D EA        1157            mov     a,r2
016E 9402      1158            subb    a,#0x02
0170 EB        1159            mov     a,r3
0171 9400      1160            subb    a,#0x00
0173 5000      1161            jnc     L008004?
0175           1162   ;        main.c:280: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
0175 EA        1163            mov     a,r2
0176 24A0      1164            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0178 FC        1165            mov     r4,a
0179 EB        1166            mov     a,r3
017A 34CD      1167            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 >> 8)
017C FD        1168            mov     r5,a
017D 745D      1169            mov     a,#0x5D
017F 2A        1170            add     a,r2
0180 F582      1171            mov     dpl,a
0182 C004      1172            push    ar4
0184 C005      1173            push    ar5
0186 120000    1174            lcall   _SPI_read
0189 AA82      1175            mov     r2,dpl
018B D005      1176            pop     ar5
018D D004      1177            pop     ar4
018F 8C82      1178            mov     dpl,r4
0191 8D83      1179            mov     dph,r5
0193 EA        1180            mov     a,r2
0194 F0        1181            movx    @dptr,a
0195           1182   ;        main.c:279: for (i=0;i<2;i++){
0195 905320    1183            mov     dptr,#_i
0198 E0        1184            movx    a,@dptr
0199 2401      1185            add     a,#0x01
019B F0        1186            movx    @dptr,a
019C A3        1187            inc     dptr
019D E0        1188            movx    a,@dptr
019E 3400      1189            addc    a,#0x00
01A0 F0        1190            movx    @dptr,a
01A1 8000      1191            sjmp    L008001?
01A3           1192   L008004?:
01A3           1193   ;        main.c:282: for (i=0;i<4;i++){
01A3 905320    1194            mov     dptr,#_i
01A6 E4        1195            clr     a
01A7 F0        1196            movx    @dptr,a
01A8 A3        1197            inc     dptr
01A9 F0        1198            movx    @dptr,a
01AA           1199   L008005?:
01AA 905320    1200            mov     dptr,#_i
01AD E0        1201            movx    a,@dptr
01AE FA        1202            mov     r2,a
01AF A3        1203            inc     dptr
01B0 E0        1204            movx    a,@dptr
01B1 FB        1205            mov     r3,a
01B2 C3        1206            clr     c
01B3 EA        1207            mov     a,r2
01B4 9404      1208            subb    a,#0x04
01B6 EB        1209            mov     a,r3
01B7 9400      1210            subb    a,#0x00
01B9 5000      1211            jnc     L008008?
01BB           1212   ;        main.c:283: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
01BB EA        1213            mov     a,r2
01BC 2400      1214            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
01BE FC        1215            mov     r4,a
01BF EB        1216            mov     a,r3
01C0 34CE      1217            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 >> 8)
01C2 FD        1218            mov     r5,a
01C3 7462      1219            mov     a,#0x62
01C5 2A        1220            add     a,r2
01C6 F582      1221            mov     dpl,a
01C8 C004      1222            push    ar4
01CA C005      1223            push    ar5
01CC 120000    1224            lcall   _SPI_read
01CF AA82      1225            mov     r2,dpl
01D1 D005      1226            pop     ar5
01D3 D004      1227            pop     ar4
01D5 8C82      1228            mov     dpl,r4
01D7 8D83      1229            mov     dph,r5
01D9 EA        1230            mov     a,r2
01DA F0        1231            movx    @dptr,a
01DB           1232   ;        main.c:282: for (i=0;i<4;i++){
01DB 905320    1233            mov     dptr,#_i
01DE E0        1234            movx    a,@dptr
01DF 2401      1235            add     a,#0x01
01E1 F0        1236            movx    @dptr,a
01E2 A3        1237            inc     dptr
01E3 E0        1238            movx    a,@dptr
01E4 3400      1239            addc    a,#0x00
01E6 F0        1240            movx    @dptr,a
01E7 8000      1241            sjmp    L008005?
01E9           1242   L008008?:
01E9           1243   ;        main.c:285: for (i=0;i<10;i++){
01E9 905320    1244            mov     dptr,#_i
01EC E4        1245            clr     a
01ED F0        1246            movx    @dptr,a
01EE A3        1247            inc     dptr
01EF F0        1248            movx    @dptr,a
01F0           1249   L008009?:
01F0 905320    1250            mov     dptr,#_i
01F3 E0        1251            movx    a,@dptr
01F4 FA        1252            mov     r2,a
01F5 A3        1253            inc     dptr
01F6 E0        1254            movx    a,@dptr
01F7 FB        1255            mov     r3,a
01F8 C3        1256            clr     c
01F9 EA        1257            mov     a,r2
01FA 940A      1258            subb    a,#0x0A
01FC EB        1259            mov     a,r3
01FD 9400      1260            subb    a,#0x00
01FF 5000      1261            jnc     L008012?
0201           1262   ;        main.c:286: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
0201 EA        1263            mov     a,r2
0202 2460      1264            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0204 FC        1265            mov     r4,a
0205 EB        1266            mov     a,r3
0206 34CE      1267            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 >> 8)
0208 FD        1268            mov     r5,a
0209 7468      1269            mov     a,#0x68
020B 2A        1270            add     a,r2
020C F582      1271            mov     dpl,a
020E C004      1272            push    ar4
0210 C005      1273            push    ar5
0212 120000    1274            lcall   _SPI_read
0215 AA82      1275            mov     r2,dpl
0217 D005      1276            pop     ar5
0219 D004      1277            pop     ar4
021B 8C82      1278            mov     dpl,r4
021D 8D83      1279            mov     dph,r5
021F EA        1280            mov     a,r2
0220 F0        1281            movx    @dptr,a
0221           1282   ;        main.c:285: for (i=0;i<10;i++){
0221 905320    1283            mov     dptr,#_i
0224 E0        1284            movx    a,@dptr
0225 2401      1285            add     a,#0x01
0227 F0        1286            movx    @dptr,a
0228 A3        1287            inc     dptr
0229 E0        1288            movx    a,@dptr
022A 3400      1289            addc    a,#0x00
022C F0        1290            movx    @dptr,a
022D 8000      1291            sjmp    L008009?
022F           1292   L008012?:
022F           1293   ;        main.c:289: dig_x1 = (int8_t) trim_x1y1[0]; 
022F 90CDA0    1294            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0232 E0        1295            movx    a,@dptr
0233 905660    1296            mov     dptr,#_dig_x1
0236 F0        1297            movx    @dptr,a
0237           1298   ;        main.c:290: dig_y1 = (int8_t) trim_x1y1[1]; 
0237 90CDA1    1299            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
023A E0        1300            movx    a,@dptr
023B 9055E0    1301            mov     dptr,#_dig_y1
023E F0        1302            movx    @dptr,a
023F           1303   ;        main.c:291: dig_x2 = (int8_t) trim_xyz_data[2]; 
023F 90CE02    1304            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
0242 E0        1305            movx    a,@dptr
0243 905620    1306            mov     dptr,#_dig_x2
0246 F0        1307            movx    @dptr,a
0247           1308   ;        main.c:292: dig_y2 = (int8_t) trim_xyz_data[3]; 
0247 90CE03    1309            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
024A E0        1310            movx    a,@dptr
024B 9055A0    1311            mov     dptr,#_dig_y2
024E F0        1312            movx    @dptr,a
024F           1313   ;        main.c:306: dig_xy1 = trim_xy1xy2[9];
024F 90CE69    1314            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
0252 E0        1315            movx    a,@dptr
0253 905460    1316            mov     dptr,#_dig_xy1
0256 F0        1317            movx    @dptr,a
0257           1318   ;        main.c:307: dig_xy2 = (int8_t)trim_xy1xy2[8];
0257 90CE68    1319            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
025A E0        1320            movx    a,@dptr
025B 905420    1321            mov     dptr,#_dig_xy2
025E F0        1322            movx    @dptr,a
025F           1323   ;        main.c:309: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
025F 90CE65    1324            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
0262 E0        1325            movx    a,@dptr
0263 FA        1326            mov     r2,a
0264 53027F    1327            anl     ar2,#0x7F
0267 8A03      1328            mov     ar3,r2
0269 7A00      1329            mov     r2,#0x00
026B           1330   ;        main.c:310: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
026B 90CE64    1331            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
026E E0        1332            movx    a,@dptr
026F FC        1333            mov     r4,a
0270 7D00      1334            mov     r5,#0x00
0272 9053E0    1335            mov     dptr,#_dig_xyz1
0275 EC        1336            mov     a,r4
0276 4A        1337            orl     a,r2
0277 F0        1338            movx    @dptr,a
0278 ED        1339            mov     a,r5
0279 4B        1340            orl     a,r3
027A A3        1341            inc     dptr
027B F0        1342            movx    @dptr,a
027C 22        1343            ret
027D           1344   ;------------------------------------------------------------
027D           1345   ;Allocation info for local variables in function 'BMM150_Init'
027D           1346   ;------------------------------------------------------------
027D           1347   ;chip_id                   Allocated with name '_BMM150_Init_chip_id_1_102'
027D           1348   ;------------------------------------------------------------
027D           1349   ;        main.c:314: void BMM150_Init(void)
027D           1350   ;        -----------------------------------------
027D           1351   ;         function BMM150_Init
027D           1352   ;        -----------------------------------------
027D           1353   _BMM150_Init:
027D           1354   ;        main.c:319: CS = 1; // Deselect BMM150
027D D290      1355            setb    _P1_0
027F           1356   ;        main.c:322: waitms(10);
027F 90000A    1357            mov     dptr,#0x000A
0282 120000    1358            lcall   _waitms
0285           1359   ;        main.c:325: SPI_write(BMM150_POWER_CONTROL, 0x82);
0285 753082    1360            mov     _SPI_write_PARM_2,#0x82
0288 75824B    1361            mov     dpl,#0x4B
028B 120000    1362            lcall   _SPI_write
028E           1363   ;        main.c:326: waitms(10);  // Wait for reset to complete
028E 90000A    1364            mov     dptr,#0x000A
0291 120000    1365            lcall   _waitms
0294           1366   ;        main.c:329: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
0294 753001    1367            mov     _SPI_write_PARM_2,#0x01
0297 75824B    1368            mov     dpl,#0x4B
029A 120000    1369            lcall   _SPI_write
029D           1370   ;        main.c:330: waitms(5);
029D 900005    1371            mov     dptr,#0x0005
02A0 120000    1372            lcall   _waitms
02A3           1373   ;        main.c:333: chip_id = SPI_read(BMM150_CHIP_ID);
02A3 758240    1374            mov     dpl,#0x40
02A6 120000    1375            lcall   _SPI_read
02A9 AA82      1376            mov     r2,dpl
02AB           1377   ;        main.c:334: if (chip_id != BMM150_CHIP_ID_VALUE)
02AB BA3238    1378            cjne    r2,#0x32,L009006?
02AE 8000      1379            sjmp    L009002?
02B0           1380   L009006?:
02B0           1381   ;        main.c:336: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
02B0 8A03      1382            mov     ar3,r2
02B2 7C00      1383            mov     r4,#0x00
02B4 C002      1384            push    ar2
02B6 C003      1385            push    ar3
02B8 C004      1386            push    ar4
02BA 74B8      1387            mov     a,#__str_0
02BC C0E0      1388            push    acc
02BE 74DB      1389            mov     a,#(__str_0 >> 8)
02C0 C0E0      1390            push    acc
02C2 7480      1391            mov     a,#0x80
02C4 C0E0      1392            push    acc
02C6 120000    1393            lcall   _printf
02C9 E581      1394            mov     a,sp
02CB 24FB      1395            add     a,#0xfb
02CD F581      1396            mov     sp,a
02CF D002      1397            pop     ar2
02D1           1398   L009002?:
02D1           1399   ;        main.c:346: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
02D1 753000    1400            mov     _SPI_write_PARM_2,#0x00
02D4 75824C    1401            mov     dpl,#0x4C
02D7 C002      1402            push    ar2
02D9 120000    1403            lcall   _SPI_write
02DC           1404   ;        main.c:349: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
02DC 75307F    1405            mov     _SPI_write_PARM_2,#0x7F
02DF 758251    1406            mov     dpl,#0x51
02E2 120000    1407            lcall   _SPI_write
02E5           1408   ;        main.c:350: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
02E5 75300E    1409            mov     _SPI_write_PARM_2,#0x0E
02E8 758252    1410            mov     dpl,#0x52
02EB 120000    1411            lcall   _SPI_write
02EE           1412   ;        main.c:352: BMM150_Read_Trim_Registers();
02EE 120000    1413            lcall   _BMM150_Read_Trim_Registers
02F1           1414   ;        main.c:354: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
02F1 7B00      1415            mov     r3,#0x00
02F3 C003      1416            push    ar3
02F5 7478      1417            mov     a,#__str_1
02F7 C0E0      1418            push    acc
02F9 74DC      1419            mov     a,#(__str_1 >> 8)
02FB C0E0      1420            push    acc
02FD 7480      1421            mov     a,#0x80
02FF C0E0      1422            push    acc
0301 120000    1423            lcall   _printf
0304 E581      1424            mov     a,sp
0306 24FB      1425            add     a,#0xfb
0308 F581      1426            mov     sp,a
030A           1427   ;        main.c:355: return; 
030A 22        1428            ret
030B           1429   ;------------------------------------------------------------
030B           1430   ;Allocation info for local variables in function 'BMM150_compensate_x'
030B           1431   ;------------------------------------------------------------
030B           1432   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
030B           1433   ;mag_data_x                Allocated to registers r2 r3 r4 
030B           1434   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
030B           1435   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_106'
030B           1436   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_106'
030B           1437   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_106'
030B           1438   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_106'
030B           1439   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_106'
030B           1440   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_106'
030B           1441   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_106'
030B           1442   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_106'
030B           1443   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_106'
030B           1444   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_106'
030B           1445   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_106'
030B           1446   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_106'
030B           1447   ;------------------------------------------------------------
030B           1448   ;        main.c:358: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
030B           1449   ;        -----------------------------------------
030B           1450   ;         function BMM150_compensate_x
030B           1451   ;        -----------------------------------------
030B           1452   _BMM150_compensate_x:
030B           1453   ;        main.c:376: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
030B ACF0      1454            mov     r4,b
030D 120000    1455            lcall   __gptrget
0310 FA        1456            mov     r2,a
0311 A3        1457            inc     dptr
0312 120000    1458            lcall   __gptrget
0315 FB        1459            mov     r3,a
0316 BA0038    1460            cjne    r2,#0x00,L010019?
0319 BBF038    1461            cjne    r3,#0xF0,L010019?
031C 020000    1462            ljmp    L010011?
031F           1463   L010019?:
031F           1464   ;        main.c:377: if (*data_rhall != 0)
031F ACE0      1465            mov     r4,_BMM150_compensate_x_PARM_2
0321 ADE1      1466            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
0323 AEE2      1467            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
0325 8C82      1468            mov     dpl,r4
0327 8D83      1469            mov     dph,r5
0329 8EF0      1470            mov     b,r6
032B 120000    1471            lcall   __gptrget
032E FC        1472            mov     r4,a
032F A3        1473            inc     dptr
0330 120000    1474            lcall   __gptrget
0333 FD        1475            mov     r5,a
0334 4C        1476            orl     a,r4
0335 6000      1477            jz      L010005?
0337           1478   ;        main.c:380: process_comp_x0 = *data_rhall;
0337 90CF20    1479            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
033A EC        1480            mov     a,r4
033B F0        1481            movx    @dptr,a
033C A3        1482            inc     dptr
033D ED        1483            mov     a,r5
033E F0        1484            movx    @dptr,a
033F 8000      1485            sjmp    L010006?
0341           1486   L010005?:
0341           1487   ;        main.c:382: else if (dig_xyz1 != 0)
0341 9053E0    1488            mov     dptr,#_dig_xyz1
0344 E0        1489            movx    a,@dptr
0345 FC        1490            mov     r4,a
0346 A3        1491            inc     dptr
0347 E0        1492            movx    a,@dptr
0348 FD        1493            mov     r5,a
0349 4C        1494            orl     a,r4
034A 6000      1495            jz      L010002?
034C           1496   ;        main.c:384: process_comp_x0 = dig_xyz1;
034C 90CF20    1497            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
034F EC        1498            mov     a,r4
0350 F0        1499            movx    @dptr,a
0351 A3        1500            inc     dptr
0352 ED        1501            mov     a,r5
0353 F0        1502            movx    @dptr,a
0354 8000      1503            sjmp    L010006?
0356           1504   L010002?:
0356           1505   ;        main.c:388: process_comp_x0 = 0;
0356 90CF20    1506            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0359 E4        1507            clr     a
035A F0        1508            movx    @dptr,a
035B A3        1509            inc     dptr
035C F0        1510            movx    @dptr,a
035D           1511   L010006?:
035D           1512   ;        main.c:390: if (process_comp_x0 != 0)
035D 90CF20    1513            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0360 E0        1514            movx    a,@dptr
0361 FC        1515            mov     r4,a
0362 A3        1516            inc     dptr
0363 E0        1517            movx    a,@dptr
0364 FD        1518            mov     r5,a
0365 4C        1519            orl     a,r4
0366 7000      1520            jnz     L010022?
0368 020000    1521            ljmp    L010008?
036B           1522   L010022?:
036B           1523   ;        main.c:393: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
036B 9053E0    1524            mov     dptr,#_dig_xyz1
036E E0        1525            movx    a,@dptr
036F FE        1526            mov     r6,a
0370 A3        1527            inc     dptr
0371 E0        1528            movx    a,@dptr
0372 FF        1529            mov     r7,a
0373 E4        1530            clr     a
0374 F8        1531            mov     r0,a
0375 EF        1532            mov     a,r7
0376 C8        1533            xch     a,r0
0377 5403      1534            anl     a,#0x03
0379 A2E0      1535            mov     c,acc.0
037B C8        1536            xch     a,r0
037C 13        1537            rrc     a
037D C8        1538            xch     a,r0
037E 13        1539            rrc     a
037F A2E0      1540            mov     c,acc.0
0381 C8        1541            xch     a,r0
0382 13        1542            rrc     a
0383 C8        1543            xch     a,r0
0384 13        1544            rrc     a
0385 C8        1545            xch     a,r0
0386 F9        1546            mov     r1,a
0387 EE        1547            mov     a,r6
0388 03        1548            rr      a
0389 03        1549            rr      a
038A 54C0      1550            anl     a,#0xc0
038C FF        1551            mov     r7,a
038D EE        1552            mov     a,r6
038E 03        1553            rr      a
038F 03        1554            rr      a
0390 543F      1555            anl     a,#0x3f
0392 48        1556            orl     a,r0
0393 F8        1557            mov     r0,a
0394 7E00      1558            mov     r6,#0x00
0396           1559   ;        main.c:394: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
0396 8C00      1560            mov     __divslong_PARM_2,r4
0398 8D01      1561            mov     (__divslong_PARM_2 + 1),r5
039A 750200    1562            mov     (__divslong_PARM_2 + 2),#0x00
039D 750300    1563            mov     (__divslong_PARM_2 + 3),#0x00
03A0 8E82      1564            mov     dpl,r6
03A2 8F83      1565            mov     dph,r7
03A4 88F0      1566            mov     b,r0
03A6 E9        1567            mov     a,r1
03A7 C002      1568            push    ar2
03A9 C003      1569            push    ar3
03AB 120000    1570            lcall   __divslong
03AE AC82      1571            mov     r4,dpl
03B0 E583      1572            mov     a,dph
03B2 24C0      1573            add     a,#0xc0
03B4 FD        1574            mov     r5,a
03B5           1575   ;        main.c:396: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
03B5 8C06      1576            mov     ar6,r4
03B7 8D07      1577            mov     ar7,r5
03B9 8E40      1578            mov     _BMM150_compensate_x_sloc0_1_0,r6
03BB EF        1579            mov     a,r7
03BC F541      1580            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
03BE 33        1581            rlc     a
03BF 95E0      1582            subb    a,acc
03C1 F542      1583            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
03C3 F543      1584            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03C5 8C06      1585            mov     ar6,r4
03C7 8D07      1586            mov     ar7,r5
03C9 8E00      1587            mov     __mullong_PARM_2,r6
03CB EF        1588            mov     a,r7
03CC F501      1589            mov     (__mullong_PARM_2 + 1),a
03CE 33        1590            rlc     a
03CF 95E0      1591            subb    a,acc
03D1 F502      1592            mov     (__mullong_PARM_2 + 2),a
03D3 F503      1593            mov     (__mullong_PARM_2 + 3),a
03D5           1594   ;        main.c:397: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
03D5 854082    1595            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03D8 854183    1596            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03DB 8542F0    1597            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03DE E543      1598            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03E0 C004      1599            push    ar4
03E2 C005      1600            push    ar5
03E4 120000    1601            lcall   __mullong
03E7 858240    1602            mov     _BMM150_compensate_x_sloc0_1_0,dpl
03EA 858341    1603            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
03ED 85F042    1604            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
03F0 F543      1605            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03F2 905420    1606            mov     dptr,#_dig_xy2
03F5 E0        1607            movx    a,@dptr
03F6 FE        1608            mov     r6,a
03F7 33        1609            rlc     a
03F8 95E0      1610            subb    a,acc
03FA FF        1611            mov     r7,a
03FB F8        1612            mov     r0,a
03FC F9        1613            mov     r1,a
03FD 750080    1614            mov     __divslong_PARM_2,#0x80
0400 E4        1615            clr     a
0401 F501      1616            mov     (__divslong_PARM_2 + 1),a
0403 F502      1617            mov     (__divslong_PARM_2 + 2),a
0405 F503      1618            mov     (__divslong_PARM_2 + 3),a
0407 854082    1619            mov     dpl,_BMM150_compensate_x_sloc0_1_0
040A 854183    1620            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
040D 8542F0    1621            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
0410 E543      1622            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0412 C006      1623            push    ar6
0414 C007      1624            push    ar7
0416 C000      1625            push    ar0
0418 C001      1626            push    ar1
041A 120000    1627            lcall   __divslong
041D 858200    1628            mov     __mullong_PARM_2,dpl
0420 858301    1629            mov     (__mullong_PARM_2 + 1),dph
0423 85F002    1630            mov     (__mullong_PARM_2 + 2),b
0426 F503      1631            mov     (__mullong_PARM_2 + 3),a
0428 D001      1632            pop     ar1
042A D000      1633            pop     ar0
042C D007      1634            pop     ar7
042E D006      1635            pop     ar6
0430           1636   ;        main.c:398: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
0430 8E82      1637            mov     dpl,r6
0432 8F83      1638            mov     dph,r7
0434 88F0      1639            mov     b,r0
0436 E9        1640            mov     a,r1
0437 120000    1641            lcall   __mullong
043A 858240    1642            mov     _BMM150_compensate_x_sloc0_1_0,dpl
043D 858341    1643            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
0440 85F042    1644            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
0443 F543      1645            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
0445 D005      1646            pop     ar5
0447 D004      1647            pop     ar4
0449 905460    1648            mov     dptr,#_dig_xy1
044C E0        1649            movx    a,@dptr
044D FE        1650            mov     r6,a
044E E4        1651            clr     a
044F 5401      1652            anl     a,#0x01
0451 A2E0      1653            mov     c,acc.0
0453 CE        1654            xch     a,r6
0454 13        1655            rrc     a
0455 CE        1656            xch     a,r6
0456 13        1657            rrc     a
0457 CE        1658            xch     a,r6
0458 8E00      1659            mov     __mullong_PARM_2,r6
045A F501      1660            mov     (__mullong_PARM_2 + 1),a
045C 33        1661            rlc     a
045D 95E0      1662            subb    a,acc
045F F502      1663            mov     (__mullong_PARM_2 + 2),a
0461 F503      1664            mov     (__mullong_PARM_2 + 3),a
0463           1665   ;        main.c:399: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
0463 ED        1666            mov     a,r5
0464 33        1667            rlc     a
0465 95E0      1668            subb    a,acc
0467 FE        1669            mov     r6,a
0468           1670   ;        main.c:400: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
0468 8C82      1671            mov     dpl,r4
046A 8D83      1672            mov     dph,r5
046C 8EF0      1673            mov     b,r6
046E 120000    1674            lcall   __mullong
0471 AC82      1675            mov     r4,dpl
0473 AD83      1676            mov     r5,dph
0475 AEF0      1677            mov     r6,b
0477 FF        1678            mov     r7,a
0478 EC        1679            mov     a,r4
0479 2540      1680            add     a,_BMM150_compensate_x_sloc0_1_0
047B FC        1681            mov     r4,a
047C ED        1682            mov     a,r5
047D 3541      1683            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
047F FD        1684            mov     r5,a
0480 EE        1685            mov     a,r6
0481 3542      1686            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
0483 FE        1687            mov     r6,a
0484 EF        1688            mov     a,r7
0485 3543      1689            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0487 FF        1690            mov     r7,a
0488 750000    1691            mov     __divslong_PARM_2,#0x00
048B 750102    1692            mov     (__divslong_PARM_2 + 1),#0x02
048E 750200    1693            mov     (__divslong_PARM_2 + 2),#0x00
0491 750300    1694            mov     (__divslong_PARM_2 + 3),#0x00
0494 8C82      1695            mov     dpl,r4
0496 8D83      1696            mov     dph,r5
0498 8EF0      1697            mov     b,r6
049A EF        1698            mov     a,r7
049B 120000    1699            lcall   __divslong
049E AC82      1700            mov     r4,dpl
04A0 AD83      1701            mov     r5,dph
04A2 AEF0      1702            mov     r6,b
04A4 FF        1703            mov     r7,a
04A5 7410      1704            mov     a,#0x10
04A7 2E        1705            add     a,r6
04A8 FE        1706            mov     r6,a
04A9 E4        1707            clr     a
04AA 3F        1708            addc    a,r7
04AB FF        1709            mov     r7,a
04AC           1710   ;        main.c:401: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
04AC 905620    1711            mov     dptr,#_dig_x2
04AF E0        1712            movx    a,@dptr
04B0 F8        1713            mov     r0,a
04B1 33        1714            rlc     a
04B2 95E0      1715            subb    a,acc
04B4 F9        1716            mov     r1,a
04B5 74A0      1717            mov     a,#0xA0
04B7 28        1718            add     a,r0
04B8 F8        1719            mov     r0,a
04B9 E4        1720            clr     a
04BA 39        1721            addc    a,r1
04BB 8800      1722            mov     __mullong_PARM_2,r0
04BD F501      1723            mov     (__mullong_PARM_2 + 1),a
04BF 33        1724            rlc     a
04C0 95E0      1725            subb    a,acc
04C2 F502      1726            mov     (__mullong_PARM_2 + 2),a
04C4 F503      1727            mov     (__mullong_PARM_2 + 3),a
04C6           1728   ;        main.c:402: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
04C6 8C82      1729            mov     dpl,r4
04C8 8D83      1730            mov     dph,r5
04CA 8EF0      1731            mov     b,r6
04CC EF        1732            mov     a,r7
04CD 120000    1733            lcall   __mullong
04D0           1734   ;        main.c:403: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
04D0 750000    1735            mov     __divslong_PARM_2,#0x00
04D3 750110    1736            mov     (__divslong_PARM_2 + 1),#0x10
04D6 750200    1737            mov     (__divslong_PARM_2 + 2),#0x00
04D9 750300    1738            mov     (__divslong_PARM_2 + 3),#0x00
04DC 120000    1739            lcall   __divslong
04DF 858200    1740            mov     __mullong_PARM_2,dpl
04E2 858301    1741            mov     (__mullong_PARM_2 + 1),dph
04E5 85F002    1742            mov     (__mullong_PARM_2 + 2),b
04E8 F503      1743            mov     (__mullong_PARM_2 + 3),a
04EA D003      1744            pop     ar3
04EC D002      1745            pop     ar2
04EE EB        1746            mov     a,r3
04EF 33        1747            rlc     a
04F0 95E0      1748            subb    a,acc
04F2 FC        1749            mov     r4,a
04F3           1750   ;        main.c:404: retval = ((int16_t)(process_comp_x10 / 8192));
04F3 8A82      1751            mov     dpl,r2
04F5 8B83      1752            mov     dph,r3
04F7 8CF0      1753            mov     b,r4
04F9 120000    1754            lcall   __mullong
04FC 750000    1755            mov     __divslong_PARM_2,#0x00
04FF 750120    1756            mov     (__divslong_PARM_2 + 1),#0x20
0502 750200    1757            mov     (__divslong_PARM_2 + 2),#0x00
0505 750300    1758            mov     (__divslong_PARM_2 + 3),#0x00
0508 120000    1759            lcall   __divslong
050B AA82      1760            mov     r2,dpl
050D AB83      1761            mov     r3,dph
050F           1762   ;        main.c:405: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
050F 905660    1763            mov     dptr,#_dig_x1
0512 E0        1764            movx    a,@dptr
0513 FC        1765            mov     r4,a
0514 33        1766            rlc     a
0515 95E0      1767            subb    a,acc
0517 C4        1768            swap    a
0518 03        1769            rr      a
0519 54F8      1770            anl     a,#0xf8
051B CC        1771            xch     a,r4
051C C4        1772            swap    a
051D 03        1773            rr      a
051E CC        1774            xch     a,r4
051F 6C        1775            xrl     a,r4
0520 CC        1776            xch     a,r4
0521 54F8      1777            anl     a,#0xf8
0523 CC        1778            xch     a,r4
0524 6C        1779            xrl     a,r4
0525 FD        1780            mov     r5,a
0526 EC        1781            mov     a,r4
0527 2A        1782            add     a,r2
0528 F582      1783            mov     dpl,a
052A ED        1784            mov     a,r5
052B 3B        1785            addc    a,r3
052C F583      1786            mov     dph,a
052E 750010    1787            mov     __divsint_PARM_2,#0x10
0531 E4        1788            clr     a
0532 F501      1789            mov     (__divsint_PARM_2 + 1),a
0534 120000    1790            lcall   __divsint
0537 E582      1791            mov     a,dpl
0539 8583F0    1792            mov     b,dph
053C 90CEC0    1793            mov     dptr,#_BMM150_compensate_x_retval_1_106
053F F0        1794            movx    @dptr,a
0540 A3        1795            inc     dptr
0541 E5F0      1796            mov     a,b
0543 F0        1797            movx    @dptr,a
0544 8000      1798            sjmp    L010012?
0546           1799   L010008?:
0546           1800   ;        main.c:408: retval = BMM150_OVERFLOW_OUTPUT; 
0546 90CEC0    1801            mov     dptr,#_BMM150_compensate_x_retval_1_106
0549 E4        1802            clr     a
054A F0        1803            movx    @dptr,a
054B A3        1804            inc     dptr
054C 7480      1805            mov     a,#0x80
054E F0        1806            movx    @dptr,a
054F 8000      1807            sjmp    L010012?
0551           1808   L010011?:
0551           1809   ;        main.c:412: retval = BMM150_OVERFLOW_OUTPUT; 
0551 90CEC0    1810            mov     dptr,#_BMM150_compensate_x_retval_1_106
0554 E4        1811            clr     a
0555 F0        1812            movx    @dptr,a
0556 A3        1813            inc     dptr
0557 7480      1814            mov     a,#0x80
0559 F0        1815            movx    @dptr,a
055A           1816   L010012?:
055A           1817   ;        main.c:414: return retval; 
055A 90CEC0    1818            mov     dptr,#_BMM150_compensate_x_retval_1_106
055D E0        1819            movx    a,@dptr
055E FA        1820            mov     r2,a
055F A3        1821            inc     dptr
0560 E0        1822            movx    a,@dptr
0561 8A82      1823            mov     dpl,r2
0563 F583      1824            mov     dph,a
0565 22        1825            ret
0566           1826   ;------------------------------------------------------------
0566           1827   ;Allocation info for local variables in function 'BMM150_compensate_y'
0566           1828   ;------------------------------------------------------------
0566           1829   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
0566           1830   ;mag_data_y                Allocated to registers r2 r3 r4 
0566           1831   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
0566           1832   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_115'
0566           1833   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_115'
0566           1834   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_115'
0566           1835   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_115'
0566           1836   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_115'
0566           1837   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_115'
0566           1838   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_115'
0566           1839   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_115'
0566           1840   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_115'
0566           1841   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_115'
0566           1842   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_115'
0566           1843   ;------------------------------------------------------------
0566           1844   ;        main.c:417: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
0566           1845   ;        -----------------------------------------
0566           1846   ;         function BMM150_compensate_y
0566           1847   ;        -----------------------------------------
0566           1848   _BMM150_compensate_y:
0566           1849   ;        main.c:435: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
0566 ACF0      1850            mov     r4,b
0568 120000    1851            lcall   __gptrget
056B FA        1852            mov     r2,a
056C A3        1853            inc     dptr
056D 120000    1854            lcall   __gptrget
0570 FB        1855            mov     r3,a
0571 BA00E8    1856            cjne    r2,#0x00,L011019?
0574 BBF0E8    1857            cjne    r3,#0xF0,L011019?
0577 020000    1858            ljmp    L011011?
057A           1859   L011019?:
057A           1860   ;        main.c:437: if (*data_rhall != 0)
057A AC90      1861            mov     r4,_BMM150_compensate_y_PARM_2
057C AD91      1862            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
057E AE92      1863            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
0580 8C82      1864            mov     dpl,r4
0582 8D83      1865            mov     dph,r5
0584 8EF0      1866            mov     b,r6
0586 120000    1867            lcall   __gptrget
0589 FC        1868            mov     r4,a
058A A3        1869            inc     dptr
058B 120000    1870            lcall   __gptrget
058E FD        1871            mov     r5,a
058F 4C        1872            orl     a,r4
0590 6000      1873            jz      L011005?
0592           1874   ;        main.c:440: process_comp_y0 = *data_rhall;
0592 90CFE8    1875            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
0595 EC        1876            mov     a,r4
0596 F0        1877            movx    @dptr,a
0597 A3        1878            inc     dptr
0598 ED        1879            mov     a,r5
0599 F0        1880            movx    @dptr,a
059A 8000      1881            sjmp    L011006?
059C           1882   L011005?:
059C           1883   ;        main.c:442: else if (dig_xyz1 != 0)
059C 9053E0    1884            mov     dptr,#_dig_xyz1
059F E0        1885            movx    a,@dptr
05A0 FC        1886            mov     r4,a
05A1 A3        1887            inc     dptr
05A2 E0        1888            movx    a,@dptr
05A3 FD        1889            mov     r5,a
05A4 4C        1890            orl     a,r4
05A5 6000      1891            jz      L011002?
05A7           1892   ;        main.c:444: process_comp_y0 = dig_xyz1;
05A7 90CFE8    1893            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
05AA EC        1894            mov     a,r4
05AB F0        1895            movx    @dptr,a
05AC A3        1896            inc     dptr
05AD ED        1897            mov     a,r5
05AE F0        1898            movx    @dptr,a
05AF 8000      1899            sjmp    L011006?
05B1           1900   L011002?:
05B1           1901   ;        main.c:448: process_comp_y0 = 0;
05B1 90CFE8    1902            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
05B4 E4        1903            clr     a
05B5 F0        1904            movx    @dptr,a
05B6 A3        1905            inc     dptr
05B7 F0        1906            movx    @dptr,a
05B8           1907   L011006?:
05B8           1908   ;        main.c:451: if (process_comp_y0 != 0)
05B8 90CFE8    1909            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
05BB E0        1910            movx    a,@dptr
05BC FC        1911            mov     r4,a
05BD A3        1912            inc     dptr
05BE E0        1913            movx    a,@dptr
05BF FD        1914            mov     r5,a
05C0 4C        1915            orl     a,r4
05C1 7000      1916            jnz     L011022?
05C3 020000    1917            ljmp    L011008?
05C6           1918   L011022?:
05C6           1919   ;        main.c:454: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
05C6 9053E0    1920            mov     dptr,#_dig_xyz1
05C9 E0        1921            movx    a,@dptr
05CA FE        1922            mov     r6,a
05CB A3        1923            inc     dptr
05CC E0        1924            movx    a,@dptr
05CD FF        1925            mov     r7,a
05CE E4        1926            clr     a
05CF F8        1927            mov     r0,a
05D0 EF        1928            mov     a,r7
05D1 C8        1929            xch     a,r0
05D2 5403      1930            anl     a,#0x03
05D4 A2E0      1931            mov     c,acc.0
05D6 C8        1932            xch     a,r0
05D7 13        1933            rrc     a
05D8 C8        1934            xch     a,r0
05D9 13        1935            rrc     a
05DA A2E0      1936            mov     c,acc.0
05DC C8        1937            xch     a,r0
05DD 13        1938            rrc     a
05DE C8        1939            xch     a,r0
05DF 13        1940            rrc     a
05E0 C8        1941            xch     a,r0
05E1 F9        1942            mov     r1,a
05E2 EE        1943            mov     a,r6
05E3 03        1944            rr      a
05E4 03        1945            rr      a
05E5 54C0      1946            anl     a,#0xc0
05E7 FF        1947            mov     r7,a
05E8 EE        1948            mov     a,r6
05E9 03        1949            rr      a
05EA 03        1950            rr      a
05EB 543F      1951            anl     a,#0x3f
05ED 48        1952            orl     a,r0
05EE F8        1953            mov     r0,a
05EF 7E00      1954            mov     r6,#0x00
05F1 8C00      1955            mov     __divslong_PARM_2,r4
05F3 8D01      1956            mov     (__divslong_PARM_2 + 1),r5
05F5 750200    1957            mov     (__divslong_PARM_2 + 2),#0x00
05F8 750300    1958            mov     (__divslong_PARM_2 + 3),#0x00
05FB           1959   ;        main.c:455: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
05FB 8E82      1960            mov     dpl,r6
05FD 8F83      1961            mov     dph,r7
05FF 88F0      1962            mov     b,r0
0601 E9        1963            mov     a,r1
0602 C002      1964            push    ar2
0604 C003      1965            push    ar3
0606 120000    1966            lcall   __divslong
0609 AC82      1967            mov     r4,dpl
060B E583      1968            mov     a,dph
060D 24C0      1969            add     a,#0xc0
060F FD        1970            mov     r5,a
0610           1971   ;        main.c:457: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
0610 8C06      1972            mov     ar6,r4
0612 8D07      1973            mov     ar7,r5
0614 8E90      1974            mov     _BMM150_compensate_y_sloc0_1_0,r6
0616 EF        1975            mov     a,r7
0617 F591      1976            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
0619 33        1977            rlc     a
061A 95E0      1978            subb    a,acc
061C F592      1979            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
061E F593      1980            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0620 8C06      1981            mov     ar6,r4
0622 8D07      1982            mov     ar7,r5
0624 8E00      1983            mov     __mullong_PARM_2,r6
0626 EF        1984            mov     a,r7
0627 F501      1985            mov     (__mullong_PARM_2 + 1),a
0629 33        1986            rlc     a
062A 95E0      1987            subb    a,acc
062C F502      1988            mov     (__mullong_PARM_2 + 2),a
062E F503      1989            mov     (__mullong_PARM_2 + 3),a
0630           1990   ;        main.c:458: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
0630 859082    1991            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0633 859183    1992            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0636 8592F0    1993            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
0639 E593      1994            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
063B C004      1995            push    ar4
063D C005      1996            push    ar5
063F 120000    1997            lcall   __mullong
0642 858290    1998            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0645 858391    1999            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
0648 85F092    2000            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
064B F593      2001            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
064D 905420    2002            mov     dptr,#_dig_xy2
0650 E0        2003            movx    a,@dptr
0651 FE        2004            mov     r6,a
0652 33        2005            rlc     a
0653 95E0      2006            subb    a,acc
0655 FF        2007            mov     r7,a
0656 F8        2008            mov     r0,a
0657 F9        2009            mov     r1,a
0658 750080    2010            mov     __divslong_PARM_2,#0x80
065B E4        2011            clr     a
065C F501      2012            mov     (__divslong_PARM_2 + 1),a
065E F502      2013            mov     (__divslong_PARM_2 + 2),a
0660 F503      2014            mov     (__divslong_PARM_2 + 3),a
0662 859082    2015            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0665 859183    2016            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0668 8592F0    2017            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
066B E593      2018            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
066D C006      2019            push    ar6
066F C007      2020            push    ar7
0671 C000      2021            push    ar0
0673 C001      2022            push    ar1
0675 120000    2023            lcall   __divslong
0678 858200    2024            mov     __mullong_PARM_2,dpl
067B 858301    2025            mov     (__mullong_PARM_2 + 1),dph
067E 85F002    2026            mov     (__mullong_PARM_2 + 2),b
0681 F503      2027            mov     (__mullong_PARM_2 + 3),a
0683 D001      2028            pop     ar1
0685 D000      2029            pop     ar0
0687 D007      2030            pop     ar7
0689 D006      2031            pop     ar6
068B           2032   ;        main.c:459: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
068B 8E82      2033            mov     dpl,r6
068D 8F83      2034            mov     dph,r7
068F 88F0      2035            mov     b,r0
0691 E9        2036            mov     a,r1
0692 120000    2037            lcall   __mullong
0695 858290    2038            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0698 858391    2039            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
069B 85F092    2040            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
069E F593      2041            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
06A0 D005      2042            pop     ar5
06A2 D004      2043            pop     ar4
06A4 905460    2044            mov     dptr,#_dig_xy1
06A7 E0        2045            movx    a,@dptr
06A8 FE        2046            mov     r6,a
06A9 E4        2047            clr     a
06AA 5401      2048            anl     a,#0x01
06AC A2E0      2049            mov     c,acc.0
06AE CE        2050            xch     a,r6
06AF 13        2051            rrc     a
06B0 CE        2052            xch     a,r6
06B1 13        2053            rrc     a
06B2 CE        2054            xch     a,r6
06B3 8E00      2055            mov     __mullong_PARM_2,r6
06B5 F501      2056            mov     (__mullong_PARM_2 + 1),a
06B7 33        2057            rlc     a
06B8 95E0      2058            subb    a,acc
06BA F502      2059            mov     (__mullong_PARM_2 + 2),a
06BC F503      2060            mov     (__mullong_PARM_2 + 3),a
06BE           2061   ;        main.c:460: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
06BE ED        2062            mov     a,r5
06BF 33        2063            rlc     a
06C0 95E0      2064            subb    a,acc
06C2 FE        2065            mov     r6,a
06C3 8C82      2066            mov     dpl,r4
06C5 8D83      2067            mov     dph,r5
06C7 8EF0      2068            mov     b,r6
06C9 120000    2069            lcall   __mullong
06CC AC82      2070            mov     r4,dpl
06CE AD83      2071            mov     r5,dph
06D0 AEF0      2072            mov     r6,b
06D2 FF        2073            mov     r7,a
06D3 EC        2074            mov     a,r4
06D4 2590      2075            add     a,_BMM150_compensate_y_sloc0_1_0
06D6 FC        2076            mov     r4,a
06D7 ED        2077            mov     a,r5
06D8 3591      2078            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
06DA FD        2079            mov     r5,a
06DB EE        2080            mov     a,r6
06DC 3592      2081            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
06DE FE        2082            mov     r6,a
06DF EF        2083            mov     a,r7
06E0 3593      2084            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
06E2 FF        2085            mov     r7,a
06E3 750000    2086            mov     __divslong_PARM_2,#0x00
06E6 750102    2087            mov     (__divslong_PARM_2 + 1),#0x02
06E9 750200    2088            mov     (__divslong_PARM_2 + 2),#0x00
06EC 750300    2089            mov     (__divslong_PARM_2 + 3),#0x00
06EF           2090   ;        main.c:461: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
06EF 8C82      2091            mov     dpl,r4
06F1 8D83      2092            mov     dph,r5
06F3 8EF0      2093            mov     b,r6
06F5 EF        2094            mov     a,r7
06F6 120000    2095            lcall   __divslong
06F9 AC82      2096            mov     r4,dpl
06FB AD83      2097            mov     r5,dph
06FD AEF0      2098            mov     r6,b
06FF FF        2099            mov     r7,a
0700 9055A0    2100            mov     dptr,#_dig_y2
0703 E0        2101            movx    a,@dptr
0704 F8        2102            mov     r0,a
0705 33        2103            rlc     a
0706 95E0      2104            subb    a,acc
0708 F9        2105            mov     r1,a
0709 74A0      2106            mov     a,#0xA0
070B 28        2107            add     a,r0
070C F8        2108            mov     r0,a
070D E4        2109            clr     a
070E 39        2110            addc    a,r1
070F 8800      2111            mov     __mullong_PARM_2,r0
0711 F501      2112            mov     (__mullong_PARM_2 + 1),a
0713 33        2113            rlc     a
0714 95E0      2114            subb    a,acc
0716 F502      2115            mov     (__mullong_PARM_2 + 2),a
0718 F503      2116            mov     (__mullong_PARM_2 + 3),a
071A           2117   ;        main.c:462: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
071A 7410      2118            mov     a,#0x10
071C 2E        2119            add     a,r6
071D FE        2120            mov     r6,a
071E E4        2121            clr     a
071F 3F        2122            addc    a,r7
0720 8C82      2123            mov     dpl,r4
0722 8D83      2124            mov     dph,r5
0724 8EF0      2125            mov     b,r6
0726 120000    2126            lcall   __mullong
0729           2127   ;        main.c:463: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
0729 750000    2128            mov     __divslong_PARM_2,#0x00
072C 750110    2129            mov     (__divslong_PARM_2 + 1),#0x10
072F 750200    2130            mov     (__divslong_PARM_2 + 2),#0x00
0732 750300    2131            mov     (__divslong_PARM_2 + 3),#0x00
0735 120000    2132            lcall   __divslong
0738 858200    2133            mov     __mullong_PARM_2,dpl
073B 858301    2134            mov     (__mullong_PARM_2 + 1),dph
073E 85F002    2135            mov     (__mullong_PARM_2 + 2),b
0741 F503      2136            mov     (__mullong_PARM_2 + 3),a
0743 D003      2137            pop     ar3
0745 D002      2138            pop     ar2
0747 EB        2139            mov     a,r3
0748 33        2140            rlc     a
0749 95E0      2141            subb    a,acc
074B FC        2142            mov     r4,a
074C           2143   ;        main.c:464: retval = (int16_t)(process_comp_y9 / 8192);
074C 8A82      2144            mov     dpl,r2
074E 8B83      2145            mov     dph,r3
0750 8CF0      2146            mov     b,r4
0752 120000    2147            lcall   __mullong
0755 750000    2148            mov     __divslong_PARM_2,#0x00
0758 750120    2149            mov     (__divslong_PARM_2 + 1),#0x20
075B 750200    2150            mov     (__divslong_PARM_2 + 2),#0x00
075E 750300    2151            mov     (__divslong_PARM_2 + 3),#0x00
0761 120000    2152            lcall   __divslong
0764 AA82      2153            mov     r2,dpl
0766 AB83      2154            mov     r3,dph
0768           2155   ;        main.c:465: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
0768 9055E0    2156            mov     dptr,#_dig_y1
076B E0        2157            movx    a,@dptr
076C FC        2158            mov     r4,a
076D 33        2159            rlc     a
076E 95E0      2160            subb    a,acc
0770 C4        2161            swap    a
0771 03        2162            rr      a
0772 54F8      2163            anl     a,#0xf8
0774 CC        2164            xch     a,r4
0775 C4        2165            swap    a
0776 03        2166            rr      a
0777 CC        2167            xch     a,r4
0778 6C        2168            xrl     a,r4
0779 CC        2169            xch     a,r4
077A 54F8      2170            anl     a,#0xf8
077C CC        2171            xch     a,r4
077D 6C        2172            xrl     a,r4
077E FD        2173            mov     r5,a
077F EC        2174            mov     a,r4
0780 2A        2175            add     a,r2
0781 F582      2176            mov     dpl,a
0783 ED        2177            mov     a,r5
0784 3B        2178            addc    a,r3
0785 F583      2179            mov     dph,a
0787 750010    2180            mov     __divsint_PARM_2,#0x10
078A E4        2181            clr     a
078B F501      2182            mov     (__divsint_PARM_2 + 1),a
078D 120000    2183            lcall   __divsint
0790 E582      2184            mov     a,dpl
0792 8583F0    2185            mov     b,dph
0795 90CF80    2186            mov     dptr,#_BMM150_compensate_y_retval_1_115
0798 F0        2187            movx    @dptr,a
0799 A3        2188            inc     dptr
079A E5F0      2189            mov     a,b
079C F0        2190            movx    @dptr,a
079D 8000      2191            sjmp    L011012?
079F           2192   L011008?:
079F           2193   ;        main.c:469: retval = BMM150_OVERFLOW_OUTPUT;
079F 90CF80    2194            mov     dptr,#_BMM150_compensate_y_retval_1_115
07A2 E4        2195            clr     a
07A3 F0        2196            movx    @dptr,a
07A4 A3        2197            inc     dptr
07A5 7480      2198            mov     a,#0x80
07A7 F0        2199            movx    @dptr,a
07A8 8000      2200            sjmp    L011012?
07AA           2201   L011011?:
07AA           2202   ;        main.c:475: retval = BMM150_OVERFLOW_OUTPUT;
07AA 90CF80    2203            mov     dptr,#_BMM150_compensate_y_retval_1_115
07AD E4        2204            clr     a
07AE F0        2205            movx    @dptr,a
07AF A3        2206            inc     dptr
07B0 7480      2207            mov     a,#0x80
07B2 F0        2208            movx    @dptr,a
07B3           2209   L011012?:
07B3           2210   ;        main.c:478: return retval;
07B3 90CF80    2211            mov     dptr,#_BMM150_compensate_y_retval_1_115
07B6 E0        2212            movx    a,@dptr
07B7 FA        2213            mov     r2,a
07B8 A3        2214            inc     dptr
07B9 E0        2215            movx    a,@dptr
07BA 8A82      2216            mov     dpl,r2
07BC F583      2217            mov     dph,a
07BE 22        2218            ret
07BF           2219   ;------------------------------------------------------------
07BF           2220   ;Allocation info for local variables in function 'BMM150_Read_Data'
07BF           2221   ;------------------------------------------------------------
07BF           2222   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
07BF           2223   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_123'
07BF           2224   ;raw_x_lsb                 Allocated with name '_BMM150_Read_Data_raw_x_lsb_1_124'
07BF           2225   ;raw_x_msb                 Allocated with name '_BMM150_Read_Data_raw_x_msb_1_124'
07BF           2226   ;raw_y_lsb                 Allocated with name '_BMM150_Read_Data_raw_y_lsb_1_124'
07BF           2227   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_124'
07BF           2228   ;raw_rhall_lsb             Allocated with name '_BMM150_Read_Data_raw_rhall_lsb_1_124'
07BF           2229   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_124'
07BF           2230   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_124'
07BF           2231   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_124'
07BF           2232   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_124'
07BF           2233   ;msb_data                  Allocated with name '_BMM150_Read_Data_msb_data_1_124'
07BF           2234   ;------------------------------------------------------------
07BF           2235   ;        main.c:481: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y)
07BF           2236   ;        -----------------------------------------
07BF           2237   ;         function BMM150_Read_Data
07BF           2238   ;        -----------------------------------------
07BF           2239   _BMM150_Read_Data:
07BF 8582E0    2240            mov     _BMM150_Read_Data_mag_x_1_123,dpl
07C2 8583E1    2241            mov     (_BMM150_Read_Data_mag_x_1_123 + 1),dph
07C5 85F0E2    2242            mov     (_BMM150_Read_Data_mag_x_1_123 + 2),b
07C8           2243   ;        main.c:488: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
07C8 758242    2244            mov     dpl,#0x42
07CB 120000    2245            lcall   _SPI_read
07CE AD82      2246            mov     r5,dpl
07D0           2247   ;        main.c:489: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
07D0 758243    2248            mov     dpl,#0x43
07D3 C005      2249            push    ar5
07D5 120000    2250            lcall   _SPI_read
07D8 AE82      2251            mov     r6,dpl
07DA           2252   ;        main.c:490: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
07DA 758244    2253            mov     dpl,#0x44
07DD C006      2254            push    ar6
07DF 120000    2255            lcall   _SPI_read
07E2 AF82      2256            mov     r7,dpl
07E4           2257   ;        main.c:491: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
07E4 758245    2258            mov     dpl,#0x45
07E7 C007      2259            push    ar7
07E9 120000    2260            lcall   _SPI_read
07EC A882      2261            mov     r0,dpl
07EE           2262   ;        main.c:494: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
07EE 758248    2263            mov     dpl,#0x48
07F1 C000      2264            push    ar0
07F3 120000    2265            lcall   _SPI_read
07F6 A982      2266            mov     r1,dpl
07F8           2267   ;        main.c:495: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
07F8 758249    2268            mov     dpl,#0x49
07FB C001      2269            push    ar1
07FD 120000    2270            lcall   _SPI_read
0800 AA82      2271            mov     r2,dpl
0802 D001      2272            pop     ar1
0804 D000      2273            pop     ar0
0806 D007      2274            pop     ar7
0808 D006      2275            pop     ar6
080A D005      2276            pop     ar5
080C           2277   ;        main.c:499: raw_x_lsb = ((raw_x_lsb & 0b_1111_1000)) >> 3;
080C 5305F8    2278            anl     ar5,#0xF8
080F ED        2279            mov     a,r5
0810 C4        2280            swap    a
0811 23        2281            rl      a
0812 541F      2282            anl     a,#0x1f
0814 FD        2283            mov     r5,a
0815           2284   ;        main.c:500: msb_data = ((int16_t)((int8_t)raw_x_msb)) << 5; 
0815 EE        2285            mov     a,r6
0816 33        2286            rlc     a
0817 95E0      2287            subb    a,acc
0819 C4        2288            swap    a
081A 23        2289            rl      a
081B 54E0      2290            anl     a,#0xe0
081D CE        2291            xch     a,r6
081E C4        2292            swap    a
081F 23        2293            rl      a
0820 CE        2294            xch     a,r6
0821 6E        2295            xrl     a,r6
0822 CE        2296            xch     a,r6
0823 54E0      2297            anl     a,#0xe0
0825 CE        2298            xch     a,r6
0826 6E        2299            xrl     a,r6
0827 FB        2300            mov     r3,a
0828           2301   ;        main.c:501: x_val = (int16_t)(msb_data | raw_x_lsb);
0828 7C00      2302            mov     r4,#0x00
082A 90D038    2303            mov     dptr,#_BMM150_Read_Data_x_val_1_124
082D ED        2304            mov     a,r5
082E 4E        2305            orl     a,r6
082F F0        2306            movx    @dptr,a
0830 EC        2307            mov     a,r4
0831 4B        2308            orl     a,r3
0832 A3        2309            inc     dptr
0833 F0        2310            movx    @dptr,a
0834           2311   ;        main.c:504: raw_y_lsb = ((raw_y_lsb & 0b_1111_1000)) >> 3;
0834 5307F8    2312            anl     ar7,#0xF8
0837 EF        2313            mov     a,r7
0838 C4        2314            swap    a
0839 23        2315            rl      a
083A 541F      2316            anl     a,#0x1f
083C FF        2317            mov     r7,a
083D           2318   ;        main.c:505: msb_data = ((int16_t)((int8_t)raw_y_msb)) << 5; 
083D E8        2319            mov     a,r0
083E 33        2320            rlc     a
083F 95E0      2321            subb    a,acc
0841 C4        2322            swap    a
0842 23        2323            rl      a
0843 54E0      2324            anl     a,#0xe0
0845 C8        2325            xch     a,r0
0846 C4        2326            swap    a
0847 23        2327            rl      a
0848 C8        2328            xch     a,r0
0849 68        2329            xrl     a,r0
084A C8        2330            xch     a,r0
084B 54E0      2331            anl     a,#0xe0
084D C8        2332            xch     a,r0
084E 68        2333            xrl     a,r0
084F FB        2334            mov     r3,a
0850           2335   ;        main.c:506: y_val = (int16_t)(msb_data | raw_y_lsb);
0850 7C00      2336            mov     r4,#0x00
0852 90D088    2337            mov     dptr,#_BMM150_Read_Data_y_val_1_124
0855 EF        2338            mov     a,r7
0856 48        2339            orl     a,r0
0857 F0        2340            movx    @dptr,a
0858 EC        2341            mov     a,r4
0859 4B        2342            orl     a,r3
085A A3        2343            inc     dptr
085B F0        2344            movx    @dptr,a
085C           2345   ;        main.c:514: raw_rhall_lsb = ((raw_rhall_lsb & 0xFC) >> 2);
085C 5301FC    2346            anl     ar1,#0xFC
085F E9        2347            mov     a,r1
0860 03        2348            rr      a
0861 03        2349            rr      a
0862 543F      2350            anl     a,#0x3f
0864 F9        2351            mov     r1,a
0865           2352   ;        main.c:515: rhall_val = (uint16_t)(((uint16_t)raw_rhall_msb << 6) | raw_rhall_lsb);
0865 E4        2353            clr     a
0866 5403      2354            anl     a,#0x03
0868 A2E0      2355            mov     c,acc.0
086A CA        2356            xch     a,r2
086B 13        2357            rrc     a
086C CA        2358            xch     a,r2
086D 13        2359            rrc     a
086E A2E0      2360            mov     c,acc.0
0870 CA        2361            xch     a,r2
0871 13        2362            rrc     a
0872 CA        2363            xch     a,r2
0873 13        2364            rrc     a
0874 CA        2365            xch     a,r2
0875 FB        2366            mov     r3,a
0876 7C00      2367            mov     r4,#0x00
0878 90D0E8    2368            mov     dptr,#_BMM150_Read_Data_rhall_val_1_124
087B E9        2369            mov     a,r1
087C 4A        2370            orl     a,r2
087D F0        2371            movx    @dptr,a
087E EC        2372            mov     a,r4
087F 4B        2373            orl     a,r3
0880 A3        2374            inc     dptr
0881 F0        2375            movx    @dptr,a
0882           2376   ;        main.c:518: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
0882 75E0E8    2377            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_124
0885 75E1D0    2378            mov     (_BMM150_compensate_x_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_124 >> 8)
0888 75E200    2379            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x00
088B 90D038    2380            mov     dptr,#_BMM150_Read_Data_x_val_1_124
088E 75F000    2381            mov     b,#0x00
0891 120000    2382            lcall   _BMM150_compensate_x
0894 AA82      2383            mov     r2,dpl
0896 AB83      2384            mov     r3,dph
0898 85E082    2385            mov     dpl,_BMM150_Read_Data_mag_x_1_123
089B 85E183    2386            mov     dph,(_BMM150_Read_Data_mag_x_1_123 + 1)
089E 85E2F0    2387            mov     b,(_BMM150_Read_Data_mag_x_1_123 + 2)
08A1 EA        2388            mov     a,r2
08A2 120000    2389            lcall   __gptrput
08A5 A3        2390            inc     dptr
08A6 EB        2391            mov     a,r3
08A7 120000    2392            lcall   __gptrput
08AA           2393   ;        main.c:519: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
08AA AA40      2394            mov     r2,_BMM150_Read_Data_PARM_2
08AC AB41      2395            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
08AE AC42      2396            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
08B0 7590E8    2397            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_124
08B3 7591D0    2398            mov     (_BMM150_compensate_y_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_124 >> 8)
08B6 759200    2399            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x00
08B9 90D088    2400            mov     dptr,#_BMM150_Read_Data_y_val_1_124
08BC 75F000    2401            mov     b,#0x00
08BF C002      2402            push    ar2
08C1 C003      2403            push    ar3
08C3 C004      2404            push    ar4
08C5 120000    2405            lcall   _BMM150_compensate_y
08C8 AD82      2406            mov     r5,dpl
08CA AE83      2407            mov     r6,dph
08CC D004      2408            pop     ar4
08CE D003      2409            pop     ar3
08D0 D002      2410            pop     ar2
08D2 8A82      2411            mov     dpl,r2
08D4 8B83      2412            mov     dph,r3
08D6 8CF0      2413            mov     b,r4
08D8 ED        2414            mov     a,r5
08D9 120000    2415            lcall   __gptrput
08DC A3        2416            inc     dptr
08DD EE        2417            mov     a,r6
08DE 020000    2418            ljmp    __gptrput
08E1           2419   ;------------------------------------------------------------
08E1           2420   ;Allocation info for local variables in function 'UART1_Init'
08E1           2421   ;------------------------------------------------------------
08E1           2422   ;baudrate                  Allocated to registers r2 r3 r4 r5 
08E1           2423   ;------------------------------------------------------------
08E1           2424   ;        main.c:525: void UART1_Init (unsigned long baudrate)
08E1           2425   ;        -----------------------------------------
08E1           2426   ;         function UART1_Init
08E1           2427   ;        -----------------------------------------
08E1           2428   _UART1_Init:
08E1 AA82      2429            mov     r2,dpl
08E3 AB83      2430            mov     r3,dph
08E5 ACF0      2431            mov     r4,b
08E7 FD        2432            mov     r5,a
08E8           2433   ;        main.c:527: SFRPAGE = 0x20;
08E8 75A720    2434            mov     _SFRPAGE,#0x20
08EB           2435   ;        main.c:528: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
08EB 75930C    2436            mov     _SMOD1,#0x0C
08EE           2437   ;        main.c:529: SCON1 = 0x10;
08EE 75C810    2438            mov     _SCON1,#0x10
08F1           2439   ;        main.c:530: SBCON1 =0x00;   // disable baud rate generator
08F1 759400    2440            mov     _SBCON1,#0x00
08F4           2441   ;        main.c:531: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
08F4 8A00      2442            mov     __divulong_PARM_2,r2
08F6 8B01      2443            mov     (__divulong_PARM_2 + 1),r3
08F8 8C02      2444            mov     (__divulong_PARM_2 + 2),r4
08FA 8D03      2445            mov     (__divulong_PARM_2 + 3),r5
08FC 90A200    2446            mov     dptr,#0xA200
08FF 75F04A    2447            mov     b,#0x4A
0902 7404      2448            mov     a,#0x04
0904 120000    2449            lcall   __divulong
0907 AA82      2450            mov     r2,dpl
0909 AB83      2451            mov     r3,dph
090B ACF0      2452            mov     r4,b
090D FD        2453            mov     r5,a
090E 750018    2454            mov     __divulong_PARM_2,#0x18
0911 E4        2455            clr     a
0912 F501      2456            mov     (__divulong_PARM_2 + 1),a
0914 F502      2457            mov     (__divulong_PARM_2 + 2),a
0916 F503      2458            mov     (__divulong_PARM_2 + 3),a
0918 8A82      2459            mov     dpl,r2
091A 8B83      2460            mov     dph,r3
091C 8CF0      2461            mov     b,r4
091E ED        2462            mov     a,r5
091F 120000    2463            lcall   __divulong
0922 AA82      2464            mov     r2,dpl
0924 AB83      2465            mov     r3,dph
0926 ACF0      2466            mov     r4,b
0928 FD        2467            mov     r5,a
0929 E4        2468            clr     a
092A C3        2469            clr     c
092B 9A        2470            subb    a,r2
092C FA        2471            mov     r2,a
092D E4        2472            clr     a
092E 9B        2473            subb    a,r3
092F FB        2474            mov     r3,a
0930 7401      2475            mov     a,#0x01
0932 9C        2476            subb    a,r4
0933 E4        2477            clr     a
0934 9D        2478            subb    a,r5
0935 8A95      2479            mov     _SBRL1,r2
0937 8B96      2480            mov     (_SBRL1 >> 8),r3
0939           2481   ;        main.c:532: TI1 = 1; // indicate ready for TX
0939 D2C9      2482            setb    _TI1
093B           2483   ;        main.c:533: SBCON1 |= 0x40;   // enable baud rate generator
093B 439440    2484            orl     _SBCON1,#0x40
093E           2485   ;        main.c:534: SFRPAGE = 0x00;
093E 75A700    2486            mov     _SFRPAGE,#0x00
0941 22        2487            ret
0942           2488   ;------------------------------------------------------------
0942           2489   ;Allocation info for local variables in function 'putchar1'
0942           2490   ;------------------------------------------------------------
0942           2491   ;c                         Allocated to registers r2 
0942           2492   ;------------------------------------------------------------
0942           2493   ;        main.c:537: void putchar1 (char c) 
0942           2494   ;        -----------------------------------------
0942           2495   ;         function putchar1
0942           2496   ;        -----------------------------------------
0942           2497   _putchar1:
0942 AA82      2498            mov     r2,dpl
0944           2499   ;        main.c:539: SFRPAGE = 0x20;
0944 75A720    2500            mov     _SFRPAGE,#0x20
0947           2501   ;        main.c:540: while (!TI1);
0947           2502   L014001?:
0947           2503   ;        main.c:541: TI1=0;
0947 10C9F8    2504            jbc     _TI1,L014008?
094A 8000      2505            sjmp    L014001?
094C           2506   L014008?:
094C           2507   ;        main.c:542: SBUF1 = c;
094C 8A92      2508            mov     _SBUF1,r2
094E           2509   ;        main.c:543: SFRPAGE = 0x00;
094E 75A700    2510            mov     _SFRPAGE,#0x00
0951 22        2511            ret
0952           2512   ;------------------------------------------------------------
0952           2513   ;Allocation info for local variables in function 'sendstr1'
0952           2514   ;------------------------------------------------------------
0952           2515   ;s                         Allocated to registers r2 r3 r4 
0952           2516   ;------------------------------------------------------------
0952           2517   ;        main.c:546: void sendstr1 (char * s)
0952           2518   ;        -----------------------------------------
0952           2519   ;         function sendstr1
0952           2520   ;        -----------------------------------------
0952           2521   _sendstr1:
0952 AA82      2522            mov     r2,dpl
0954 AB83      2523            mov     r3,dph
0956 ACF0      2524            mov     r4,b
0958           2525   ;        main.c:548: while(*s)
0958           2526   L015001?:
0958 8A82      2527            mov     dpl,r2
095A 8B83      2528            mov     dph,r3
095C 8CF0      2529            mov     b,r4
095E 120000    2530            lcall   __gptrget
0961 FD        2531            mov     r5,a
0962 6000      2532            jz      L015004?
0964           2533   ;        main.c:550: putchar1(*s);
0964 8D82      2534            mov     dpl,r5
0966 C002      2535            push    ar2
0968 C003      2536            push    ar3
096A C004      2537            push    ar4
096C 120000    2538            lcall   _putchar1
096F D004      2539            pop     ar4
0971 D003      2540            pop     ar3
0973 D002      2541            pop     ar2
0975           2542   ;        main.c:551: s++;        
0975 0A        2543            inc     r2
0976 BA0038    2544            cjne    r2,#0x00,L015001?
0979 0B        2545            inc     r3
097A 8000      2546            sjmp    L015001?
097C           2547   L015004?:
097C 22        2548            ret
097D           2549   ;------------------------------------------------------------
097D           2550   ;Allocation info for local variables in function 'getchar1'
097D           2551   ;------------------------------------------------------------
097D           2552   ;c                         Allocated with name '_getchar1_c_1_133'
097D           2553   ;------------------------------------------------------------
097D           2554   ;        main.c:555: char getchar1 (void)
097D           2555   ;        -----------------------------------------
097D           2556   ;         function getchar1
097D           2557   ;        -----------------------------------------
097D           2558   _getchar1:
097D           2559   ;        main.c:558: SFRPAGE = 0x20;
097D 75A720    2560            mov     _SFRPAGE,#0x20
0980           2561   ;        main.c:559: while (!RI1);
0980           2562   L016001?:
0980           2563   ;        main.c:560: RI1=0;
0980 10C8F8    2564            jbc     _RI1,L016008?
0983 8000      2565            sjmp    L016001?
0985           2566   L016008?:
0985           2567   ;        main.c:562: SCON1&=0b_0011_1111;
0985 53C83F    2568            anl     _SCON1,#0x3F
0988           2569   ;        main.c:563: c = SBUF1;
0988 859282    2570            mov     dpl,_SBUF1
098B           2571   ;        main.c:564: SFRPAGE = 0x00;
098B 75A700    2572            mov     _SFRPAGE,#0x00
098E           2573   ;        main.c:565: return (c);
098E 22        2574            ret
098F           2575   ;------------------------------------------------------------
098F           2576   ;Allocation info for local variables in function 'getchar1_with_timeout'
098F           2577   ;------------------------------------------------------------
098F           2578   ;c                         Allocated with name '_getchar1_with_timeout_c_1_135'
098F           2579   ;timeout                   Allocated with name '_getchar1_with_timeout_timeout_1_135'
098F           2580   ;------------------------------------------------------------
098F           2581   ;        main.c:568: char getchar1_with_timeout (void)
098F           2582   ;        -----------------------------------------
098F           2583   ;         function getchar1_with_timeout
098F           2584   ;        -----------------------------------------
098F           2585   _getchar1_with_timeout:
098F           2586   ;        main.c:572: SFRPAGE = 0x20;
098F 75A720    2587            mov     _SFRPAGE,#0x20
0992           2588   ;        main.c:574: while (!RI1)
0992 7A00      2589            mov     r2,#0x00
0994 7B00      2590            mov     r3,#0x00
0996           2591   L017003?:
0996 20C878    2592            jb      _RI1,L017005?
0999           2593   ;        main.c:576: SFRPAGE = 0x00;
0999 75A700    2594            mov     _SFRPAGE,#0x00
099C           2595   ;        main.c:577: Timer3us(20);
099C 758214    2596            mov     dpl,#0x14
099F C002      2597            push    ar2
09A1 C003      2598            push    ar3
09A3 120000    2599            lcall   _Timer3us
09A6 D003      2600            pop     ar3
09A8 D002      2601            pop     ar2
09AA           2602   ;        main.c:578: SFRPAGE = 0x20;
09AA 75A720    2603            mov     _SFRPAGE,#0x20
09AD           2604   ;        main.c:579: timeout++;
09AD 0A        2605            inc     r2
09AE BA00B8    2606            cjne    r2,#0x00,L017012?
09B1 0B        2607            inc     r3
09B2           2608   L017012?:
09B2           2609   ;        main.c:580: if(timeout==25000)
09B2 BAA838    2610            cjne    r2,#0xA8,L017003?
09B5 BB6138    2611            cjne    r3,#0x61,L017003?
09B8           2612   ;        main.c:582: SFRPAGE = 0x00;
09B8 75A700    2613            mov     _SFRPAGE,#0x00
09BB           2614   ;        main.c:583: return ('\n'); // Timeout after half second
09BB 75820A    2615            mov     dpl,#0x0A
09BE 22        2616            ret
09BF           2617   L017005?:
09BF           2618   ;        main.c:586: RI1=0;
09BF C2C8      2619            clr     _RI1
09C1           2620   ;        main.c:588: SCON1&=0b_0011_1111;
09C1 53C83F    2621            anl     _SCON1,#0x3F
09C4           2622   ;        main.c:589: c = SBUF1;
09C4 859282    2623            mov     dpl,_SBUF1
09C7           2624   ;        main.c:590: SFRPAGE = 0x00;
09C7 75A700    2625            mov     _SFRPAGE,#0x00
09CA           2626   ;        main.c:591: return (c);
09CA 22        2627            ret
09CB           2628   ;------------------------------------------------------------
09CB           2629   ;Allocation info for local variables in function 'getstr1'
09CB           2630   ;------------------------------------------------------------
09CB           2631   ;n                         Allocated with name '_getstr1_PARM_2'
09CB           2632   ;s                         Allocated to registers r2 r3 r4 
09CB           2633   ;c                         Allocated with name '_getstr1_c_1_139'
09CB           2634   ;cnt                       Allocated with name '_getstr1_cnt_1_139'
09CB           2635   ;------------------------------------------------------------
09CB           2636   ;        main.c:594: void getstr1 (char * s, unsigned char n)
09CB           2637   ;        -----------------------------------------
09CB           2638   ;         function getstr1
09CB           2639   ;        -----------------------------------------
09CB           2640   _getstr1:
09CB AA82      2641            mov     r2,dpl
09CD AB83      2642            mov     r3,dph
09CF ACF0      2643            mov     r4,b
09D1           2644   ;        main.c:600: while(1)
09D1 7D00      2645            mov     r5,#0x00
09D3 8A06      2646            mov     ar6,r2
09D5 8B07      2647            mov     ar7,r3
09D7 8C00      2648            mov     ar0,r4
09D9           2649   L018007?:
09D9           2650   ;        main.c:602: c=getchar1_with_timeout();
09D9 C002      2651            push    ar2
09DB C003      2652            push    ar3
09DD C004      2653            push    ar4
09DF C005      2654            push    ar5
09E1 C006      2655            push    ar6
09E3 C007      2656            push    ar7
09E5 C000      2657            push    ar0
09E7 120000    2658            lcall   _getchar1_with_timeout
09EA A982      2659            mov     r1,dpl
09EC D000      2660            pop     ar0
09EE D007      2661            pop     ar7
09F0 D006      2662            pop     ar6
09F2 D005      2663            pop     ar5
09F4 D004      2664            pop     ar4
09F6 D003      2665            pop     ar3
09F8 D002      2666            pop     ar2
09FA           2667   ;        main.c:603: if(c=='\n')
09FA B90A38    2668            cjne    r1,#0x0A,L018002?
09FD           2669   ;        main.c:605: *s=0;
09FD 8A82      2670            mov     dpl,r2
09FF 8B83      2671            mov     dph,r3
0A01 8CF0      2672            mov     b,r4
0A03 E4        2673            clr     a
0A04           2674   ;        main.c:606: return;
0A04 020000    2675            ljmp    __gptrput
0A07           2676   L018002?:
0A07           2677   ;        main.c:609: if (cnt<n)
0A07 C3        2678            clr     c
0A08 ED        2679            mov     a,r5
0A09 95F0      2680            subb    a,_getstr1_PARM_2
0A0B 5000      2681            jnc     L018004?
0A0D           2682   ;        main.c:611: cnt++;
0A0D 0D        2683            inc     r5
0A0E           2684   ;        main.c:612: *s=c;
0A0E 8E82      2685            mov     dpl,r6
0A10 8F83      2686            mov     dph,r7
0A12 88F0      2687            mov     b,r0
0A14 E9        2688            mov     a,r1
0A15 120000    2689            lcall   __gptrput
0A18 A3        2690            inc     dptr
0A19 AE82      2691            mov     r6,dpl
0A1B AF83      2692            mov     r7,dph
0A1D           2693   ;        main.c:613: s++;
0A1D 8E02      2694            mov     ar2,r6
0A1F 8F03      2695            mov     ar3,r7
0A21 8804      2696            mov     ar4,r0
0A23 8000      2697            sjmp    L018007?
0A25           2698   L018004?:
0A25           2699   ;        main.c:617: *s=0;
0A25 8A82      2700            mov     dpl,r2
0A27 8B83      2701            mov     dph,r3
0A29 8CF0      2702            mov     b,r4
0A2B E4        2703            clr     a
0A2C           2704   ;        main.c:618: return;
0A2C 020000    2705            ljmp    __gptrput
0A2F           2706   ;------------------------------------------------------------
0A2F           2707   ;Allocation info for local variables in function 'RXU1'
0A2F           2708   ;------------------------------------------------------------
0A2F           2709   ;------------------------------------------------------------
0A2F           2710   ;        main.c:624: bit RXU1 (void)
0A2F           2711   ;        -----------------------------------------
0A2F           2712   ;         function RXU1
0A2F           2713   ;        -----------------------------------------
0A2F           2714   _RXU1:
0A2F           2715   ;        main.c:627: SFRPAGE = 0x20;
0A2F 75A720    2716            mov     _SFRPAGE,#0x20
0A32           2717   ;        main.c:628: mybit=RI1;
0A32 A2C8      2718            mov     c,_RI1
0A34           2719   ;        main.c:629: SFRPAGE = 0x00;
0A34 75A700    2720            mov     _SFRPAGE,#0x00
0A37           2721   ;        main.c:630: return mybit;
0A37 22        2722            ret
0A38           2723   ;------------------------------------------------------------
0A38           2724   ;Allocation info for local variables in function 'waitms_or_RI1'
0A38           2725   ;------------------------------------------------------------
0A38           2726   ;ms                        Allocated to registers r2 r3 
0A38           2727   ;j                         Allocated with name '_waitms_or_RI1_j_1_147'
0A38           2728   ;k                         Allocated with name '_waitms_or_RI1_k_1_147'
0A38           2729   ;------------------------------------------------------------
0A38           2730   ;        main.c:633: void waitms_or_RI1 (unsigned int ms)
0A38           2731   ;        -----------------------------------------
0A38           2732   ;         function waitms_or_RI1
0A38           2733   ;        -----------------------------------------
0A38           2734   _waitms_or_RI1:
0A38 AA82      2735            mov     r2,dpl
0A3A AB83      2736            mov     r3,dph
0A3C           2737   ;        main.c:637: for(j=0; j<ms; j++)
0A3C 7C00      2738            mov     r4,#0x00
0A3E 7D00      2739            mov     r5,#0x00
0A40           2740   L020007?:
0A40 C3        2741            clr     c
0A41 EC        2742            mov     a,r4
0A42 9A        2743            subb    a,r2
0A43 ED        2744            mov     a,r5
0A44 9B        2745            subb    a,r3
0A45 5000      2746            jnc     L020011?
0A47           2747   ;        main.c:639: for (k=0; k<4; k++)
0A47 7E00      2748            mov     r6,#0x00
0A49           2749   L020003?:
0A49 BE0478    2750            cjne    r6,#0x04,L020019?
0A4C           2751   L020019?:
0A4C 5000      2752            jnc     L020009?
0A4E           2753   ;        main.c:641: if(RXU1()) return;
0A4E C002      2754            push    ar2
0A50 C003      2755            push    ar3
0A52 C004      2756            push    ar4
0A54 C005      2757            push    ar5
0A56 C006      2758            push    ar6
0A58 120000    2759            lcall   _RXU1
0A5B E4        2760            clr     a
0A5C 33        2761            rlc     a
0A5D D006      2762            pop     ar6
0A5F D005      2763            pop     ar5
0A61 D004      2764            pop     ar4
0A63 D003      2765            pop     ar3
0A65 D002      2766            pop     ar2
0A67 6000      2767            jz      L020002?
0A69 22        2768            ret
0A6A           2769   L020002?:
0A6A           2770   ;        main.c:642: Timer3us(250);
0A6A 7582FA    2771            mov     dpl,#0xFA
0A6D C002      2772            push    ar2
0A6F C003      2773            push    ar3
0A71 C004      2774            push    ar4
0A73 C005      2775            push    ar5
0A75 C006      2776            push    ar6
0A77 120000    2777            lcall   _Timer3us
0A7A D006      2778            pop     ar6
0A7C D005      2779            pop     ar5
0A7E D004      2780            pop     ar4
0A80 D003      2781            pop     ar3
0A82 D002      2782            pop     ar2
0A84           2783   ;        main.c:639: for (k=0; k<4; k++)
0A84 0E        2784            inc     r6
0A85 8000      2785            sjmp    L020003?
0A87           2786   L020009?:
0A87           2787   ;        main.c:637: for(j=0; j<ms; j++)
0A87 0C        2788            inc     r4
0A88 BC00B8    2789            cjne    r4,#0x00,L020007?
0A8B 0D        2790            inc     r5
0A8C 8000      2791            sjmp    L020007?
0A8E           2792   L020011?:
0A8E 22        2793            ret
0A8F           2794   ;------------------------------------------------------------
0A8F           2795   ;Allocation info for local variables in function 'SendATCommand'
0A8F           2796   ;------------------------------------------------------------
0A8F           2797   ;s                         Allocated to registers r2 r3 r4 
0A8F           2798   ;------------------------------------------------------------
0A8F           2799   ;        main.c:647: void SendATCommand (char * s)
0A8F           2800   ;        -----------------------------------------
0A8F           2801   ;         function SendATCommand
0A8F           2802   ;        -----------------------------------------
0A8F           2803   _SendATCommand:
0A8F AA82      2804            mov     r2,dpl
0A91 AB83      2805            mov     r3,dph
0A93 ACF0      2806            mov     r4,b
0A95           2807   ;        main.c:649: printf("Command: %s", s);
0A95 C002      2808            push    ar2
0A97 C003      2809            push    ar3
0A99 C004      2810            push    ar4
0A9B C002      2811            push    ar2
0A9D C003      2812            push    ar3
0A9F C004      2813            push    ar4
0AA1 7438      2814            mov     a,#__str_2
0AA3 C0E0      2815            push    acc
0AA5 74E8      2816            mov     a,#(__str_2 >> 8)
0AA7 C0E0      2817            push    acc
0AA9 7480      2818            mov     a,#0x80
0AAB C0E0      2819            push    acc
0AAD 120000    2820            lcall   _printf
0AB0 E581      2821            mov     a,sp
0AB2 24FA      2822            add     a,#0xfa
0AB4 F581      2823            mov     sp,a
0AB6           2824   ;        main.c:650: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0AB6 C2A0      2825            clr     _P2_0
0AB8           2826   ;        main.c:651: waitms(5);
0AB8 900005    2827            mov     dptr,#0x0005
0ABB 120000    2828            lcall   _waitms
0ABE D004      2829            pop     ar4
0AC0 D003      2830            pop     ar3
0AC2 D002      2831            pop     ar2
0AC4           2832   ;        main.c:652: sendstr1(s);
0AC4 8A82      2833            mov     dpl,r2
0AC6 8B83      2834            mov     dph,r3
0AC8 8CF0      2835            mov     b,r4
0ACA 120000    2836            lcall   _sendstr1
0ACD           2837   ;        main.c:653: getstr1(buff, sizeof(buff)-1);
0ACD 75F013    2838            mov     _getstr1_PARM_2,#0x13
0AD0 905760    2839            mov     dptr,#_buff
0AD3 75F040    2840            mov     b,#0x40
0AD6 120000    2841            lcall   _getstr1
0AD9           2842   ;        main.c:654: waitms(10);
0AD9 90000A    2843            mov     dptr,#0x000A
0ADC 120000    2844            lcall   _waitms
0ADF           2845   ;        main.c:655: P2_0=1; // 'set' pin to 1 is normal operation mode.
0ADF D2A0      2846            setb    _P2_0
0AE1           2847   ;        main.c:656: printf("Response: %s\r\n", buff);
0AE1 7460      2848            mov     a,#_buff
0AE3 C0E0      2849            push    acc
0AE5 7457      2850            mov     a,#(_buff >> 8)
0AE7 C0E0      2851            push    acc
0AE9 7440      2852            mov     a,#0x40
0AEB C0E0      2853            push    acc
0AED 7478      2854            mov     a,#__str_3
0AEF C0E0      2855            push    acc
0AF1 74E8      2856            mov     a,#(__str_3 >> 8)
0AF3 C0E0      2857            push    acc
0AF5 7480      2858            mov     a,#0x80
0AF7 C0E0      2859            push    acc
0AF9 120000    2860            lcall   _printf
0AFC E581      2861            mov     a,sp
0AFE 24FA      2862            add     a,#0xfa
0B00 F581      2863            mov     sp,a
0B02 22        2864            ret
0B03           2865   ;------------------------------------------------------------
0B03           2866   ;Allocation info for local variables in function 'ReceptionOff'
0B03           2867   ;------------------------------------------------------------
0B03           2868   ;------------------------------------------------------------
0B03           2869   ;        main.c:659: void ReceptionOff (void)
0B03           2870   ;        -----------------------------------------
0B03           2871   ;         function ReceptionOff
0B03           2872   ;        -----------------------------------------
0B03           2873   _ReceptionOff:
0B03           2874   ;        main.c:661: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0B03 C2A0      2875            clr     _P2_0
0B05           2876   ;        main.c:662: waitms(10);
0B05 90000A    2877            mov     dptr,#0x000A
0B08 120000    2878            lcall   _waitms
0B0B           2879   ;        main.c:663: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0B0B 90E8B8    2880            mov     dptr,#__str_4
0B0E 75F080    2881            mov     b,#0x80
0B11 120000    2882            lcall   _sendstr1
0B14           2883   ;        main.c:664: waitms(10);
0B14 90000A    2884            mov     dptr,#0x000A
0B17 120000    2885            lcall   _waitms
0B1A           2886   ;        main.c:666: SCON1&=0b_0011_1111;
0B1A 53C83F    2887            anl     _SCON1,#0x3F
0B1D           2888   ;        main.c:667: P2_0=1; // 'set' pin to 1 is normal operation mode.
0B1D D2A0      2889            setb    _P2_0
0B1F 22        2890            ret
0B20           2891   ;------------------------------------------------------------
0B20           2892   ;Allocation info for local variables in function 'measure_distance'
0B20           2893   ;------------------------------------------------------------
0B20           2894   ;------------------------------------------------------------
0B20           2895   ;        main.c:670: int measure_distance(void)
0B20           2896   ;        -----------------------------------------
0B20           2897   ;         function measure_distance
0B20           2898   ;        -----------------------------------------
0B20           2899   _measure_distance:
0B20           2900   ;        main.c:674: TL0 = 0; 
0B20 758A00    2901            mov     _TL0,#0x00
0B23           2902   ;        main.c:675: TH0 = 0; 
0B23 758C00    2903            mov     _TH0,#0x00
0B26           2904   ;        main.c:676: TF0 = 0; 
0B26 C28D      2905            clr     _TF0
0B28           2906   ;        main.c:677: duration = 0;
0B28 904D50    2907            mov     dptr,#_duration
0B2B E4        2908            clr     a
0B2C F0        2909            movx    @dptr,a
0B2D A3        2910            inc     dptr
0B2E F0        2911            movx    @dptr,a
0B2F A3        2912            inc     dptr
0B30 F0        2913            movx    @dptr,a
0B31 A3        2914            inc     dptr
0B32 F0        2915            movx    @dptr,a
0B33           2916   ;        main.c:679: TRIG_PIN = 1; 
0B33 D280      2917            setb    _P0_0
0B35           2918   ;        main.c:680: for(i = 0; i < 40; i++);
0B35 905320    2919            mov     dptr,#_i
0B38 7428      2920            mov     a,#0x28
0B3A F0        2921            movx    @dptr,a
0B3B E4        2922            clr     a
0B3C A3        2923            inc     dptr
0B3D F0        2924            movx    @dptr,a
0B3E           2925   L023016?:
0B3E 905320    2926            mov     dptr,#_i
0B41 E0        2927            movx    a,@dptr
0B42 FA        2928            mov     r2,a
0B43 A3        2929            inc     dptr
0B44 E0        2930            movx    a,@dptr
0B45 FB        2931            mov     r3,a
0B46 1A        2932            dec     r2
0B47 BAFF38    2933            cjne    r2,#0xff,L023029?
0B4A 1B        2934            dec     r3
0B4B           2935   L023029?:
0B4B 905320    2936            mov     dptr,#_i
0B4E EA        2937            mov     a,r2
0B4F F0        2938            movx    @dptr,a
0B50 A3        2939            inc     dptr
0B51 EB        2940            mov     a,r3
0B52 F0        2941            movx    @dptr,a
0B53 905320    2942            mov     dptr,#_i
0B56 E0        2943            movx    a,@dptr
0B57 FA        2944            mov     r2,a
0B58 A3        2945            inc     dptr
0B59 E0        2946            movx    a,@dptr
0B5A FB        2947            mov     r3,a
0B5B 4A        2948            orl     a,r2
0B5C 7000      2949            jnz     L023016?
0B5E           2950   ;        main.c:681: TRIG_PIN = 0; 
0B5E C280      2951            clr     _P0_0
0B60           2952   ;        main.c:683: i=0;
0B60 905320    2953            mov     dptr,#_i
0B63 E4        2954            clr     a
0B64 F0        2955            movx    @dptr,a
0B65 A3        2956            inc     dptr
0B66 F0        2957            movx    @dptr,a
0B67           2958   ;        main.c:684: while (ECHO_PIN != 0){
0B67           2959   L023001?:
0B67 30B1B8    2960            jnb     _P3_1,L023003?
0B6A           2961   ;        main.c:685: i++;
0B6A 905320    2962            mov     dptr,#_i
0B6D E0        2963            movx    a,@dptr
0B6E 2401      2964            add     a,#0x01
0B70 F0        2965            movx    @dptr,a
0B71 A3        2966            inc     dptr
0B72 E0        2967            movx    a,@dptr
0B73 3400      2968            addc    a,#0x00
0B75 F0        2969            movx    @dptr,a
0B76           2970   ;        main.c:686: if (i > 200){
0B76 8000      2971            sjmp    L023001?
0B78           2972   L023003?:
0B78           2973   ;        main.c:690: i=0;
0B78 905320    2974            mov     dptr,#_i
0B7B E4        2975            clr     a
0B7C F0        2976            movx    @dptr,a
0B7D A3        2977            inc     dptr
0B7E F0        2978            movx    @dptr,a
0B7F           2979   ;        main.c:691: while (ECHO_PIN != 1){
0B7F           2980   L023004?:
0B7F 20B138    2981            jb      _P3_1,L023006?
0B82           2982   ;        main.c:692: i++;
0B82 905320    2983            mov     dptr,#_i
0B85 E0        2984            movx    a,@dptr
0B86 2401      2985            add     a,#0x01
0B88 F0        2986            movx    @dptr,a
0B89 A3        2987            inc     dptr
0B8A E0        2988            movx    a,@dptr
0B8B 3400      2989            addc    a,#0x00
0B8D F0        2990            movx    @dptr,a
0B8E           2991   ;        main.c:693: if (i > 300){
0B8E 8000      2992            sjmp    L023004?
0B90           2993   L023006?:
0B90           2994   ;        main.c:697: TR0 = 1; 
0B90 D28C      2995            setb    _TR0
0B92           2996   ;        main.c:698: while (ECHO_PIN == 1)
0B92           2997   L023011?:
0B92 30B1B8    2998            jnb     _P3_1,L023013?
0B95           2999   ;        main.c:700: if (TF0 == 1){
0B95           3000   ;        main.c:701: TF0 = 0; 
0B95 108DF8    3001            jbc     _TF0,L023034?
0B98 8000      3002            sjmp    L023008?
0B9A           3003   L023034?:
0B9A           3004   L023008?:
0B9A           3005   ;        main.c:703: if(TH0 > 200){
0B9A E58C      3006            mov     a,_TH0
0B9C 2437      3007            add     a,#0xff - 0xC8
0B9E 5000      3008            jnc     L023011?
0BA0           3009   ;        main.c:704: return -3;
0BA0 90FFFD    3010            mov     dptr,#0xFFFD
0BA3 22        3011            ret
0BA4           3012   L023013?:
0BA4           3013   ;        main.c:709: TR0 = 0; 
0BA4 C28C      3014            clr     _TR0
0BA6           3015   ;        main.c:710: duration = (TH0*256.0 + TL0) * (12.0/SYSCLK);
0BA6 858C82    3016            mov     dpl,_TH0
0BA9 120000    3017            lcall   ___uchar2fs
0BAC AA82      3018            mov     r2,dpl
0BAE AB83      3019            mov     r3,dph
0BB0 ACF0      3020            mov     r4,b
0BB2 FD        3021            mov     r5,a
0BB3 C002      3022            push    ar2
0BB5 C003      3023            push    ar3
0BB7 C004      3024            push    ar4
0BB9 C005      3025            push    ar5
0BBB 900000    3026            mov     dptr,#0x0000
0BBE 75F080    3027            mov     b,#0x80
0BC1 7443      3028            mov     a,#0x43
0BC3 120000    3029            lcall   ___fsmul
0BC6 AA82      3030            mov     r2,dpl
0BC8 AB83      3031            mov     r3,dph
0BCA ACF0      3032            mov     r4,b
0BCC FD        3033            mov     r5,a
0BCD E581      3034            mov     a,sp
0BCF 24FC      3035            add     a,#0xfc
0BD1 F581      3036            mov     sp,a
0BD3 AE8A      3037            mov     r6,_TL0
0BD5 7F00      3038            mov     r7,#0x00
0BD7 8E82      3039            mov     dpl,r6
0BD9 8F83      3040            mov     dph,r7
0BDB C002      3041            push    ar2
0BDD C003      3042            push    ar3
0BDF C004      3043            push    ar4
0BE1 C005      3044            push    ar5
0BE3 120000    3045            lcall   ___sint2fs
0BE6 AE82      3046            mov     r6,dpl
0BE8 AF83      3047            mov     r7,dph
0BEA A8F0      3048            mov     r0,b
0BEC F9        3049            mov     r1,a
0BED D005      3050            pop     ar5
0BEF D004      3051            pop     ar4
0BF1 D003      3052            pop     ar3
0BF3 D002      3053            pop     ar2
0BF5 C006      3054            push    ar6
0BF7 C007      3055            push    ar7
0BF9 C000      3056            push    ar0
0BFB C001      3057            push    ar1
0BFD 8A82      3058            mov     dpl,r2
0BFF 8B83      3059            mov     dph,r3
0C01 8CF0      3060            mov     b,r4
0C03 ED        3061            mov     a,r5
0C04 120000    3062            lcall   ___fsadd
0C07 AA82      3063            mov     r2,dpl
0C09 AB83      3064            mov     r3,dph
0C0B ACF0      3065            mov     r4,b
0C0D FD        3066            mov     r5,a
0C0E E581      3067            mov     a,sp
0C10 24FC      3068            add     a,#0xfc
0C12 F581      3069            mov     sp,a
0C14 C002      3070            push    ar2
0C16 C003      3071            push    ar3
0C18 C004      3072            push    ar4
0C1A C005      3073            push    ar5
0C1C 90F4FC    3074            mov     dptr,#0xF4FC
0C1F 75F032    3075            mov     b,#0x32
0C22 7434      3076            mov     a,#0x34
0C24 120000    3077            lcall   ___fsmul
0C27 AA82      3078            mov     r2,dpl
0C29 AB83      3079            mov     r3,dph
0C2B ACF0      3080            mov     r4,b
0C2D FD        3081            mov     r5,a
0C2E E581      3082            mov     a,sp
0C30 24FC      3083            add     a,#0xfc
0C32 F581      3084            mov     sp,a
0C34 904D50    3085            mov     dptr,#_duration
0C37 EA        3086            mov     a,r2
0C38 F0        3087            movx    @dptr,a
0C39 A3        3088            inc     dptr
0C3A EB        3089            mov     a,r3
0C3B F0        3090            movx    @dptr,a
0C3C A3        3091            inc     dptr
0C3D EC        3092            mov     a,r4
0C3E F0        3093            movx    @dptr,a
0C3F A3        3094            inc     dptr
0C40 ED        3095            mov     a,r5
0C41 F0        3096            movx    @dptr,a
0C42           3097   ;        main.c:712: distance = 100 * (340.0 * duration * 100.0 / 2.0); // distance in cm
0C42 C002      3098            push    ar2
0C44 C003      3099            push    ar3
0C46 C004      3100            push    ar4
0C48 C005      3101            push    ar5
0C4A 90D000    3102            mov     dptr,#0xD000
0C4D 75F004    3103            mov     b,#0x04
0C50 7447      3104            mov     a,#0x47
0C52 120000    3105            lcall   ___fsmul
0C55 AA82      3106            mov     r2,dpl
0C57 AB83      3107            mov     r3,dph
0C59 ACF0      3108            mov     r4,b
0C5B FD        3109            mov     r5,a
0C5C E581      3110            mov     a,sp
0C5E 24FC      3111            add     a,#0xfc
0C60 F581      3112            mov     sp,a
0C62 E4        3113            clr     a
0C63 C0E0      3114            push    acc
0C65 C0E0      3115            push    acc
0C67 C0E0      3116            push    acc
0C69 7440      3117            mov     a,#0x40
0C6B C0E0      3118            push    acc
0C6D 8A82      3119            mov     dpl,r2
0C6F 8B83      3120            mov     dph,r3
0C71 8CF0      3121            mov     b,r4
0C73 ED        3122            mov     a,r5
0C74 120000    3123            lcall   ___fsdiv
0C77 AA82      3124            mov     r2,dpl
0C79 AB83      3125            mov     r3,dph
0C7B ACF0      3126            mov     r4,b
0C7D FD        3127            mov     r5,a
0C7E E581      3128            mov     a,sp
0C80 24FC      3129            add     a,#0xfc
0C82 F581      3130            mov     sp,a
0C84 C002      3131            push    ar2
0C86 C003      3132            push    ar3
0C88 C004      3133            push    ar4
0C8A C005      3134            push    ar5
0C8C 900000    3135            mov     dptr,#0x0000
0C8F 75F0C8    3136            mov     b,#0xC8
0C92 7442      3137            mov     a,#0x42
0C94 120000    3138            lcall   ___fsmul
0C97 AA82      3139            mov     r2,dpl
0C99 AB83      3140            mov     r3,dph
0C9B ACF0      3141            mov     r4,b
0C9D FD        3142            mov     r5,a
0C9E E581      3143            mov     a,sp
0CA0 24FC      3144            add     a,#0xfc
0CA2 F581      3145            mov     sp,a
0CA4 8A82      3146            mov     dpl,r2
0CA6 8B83      3147            mov     dph,r3
0CA8 8CF0      3148            mov     b,r4
0CAA ED        3149            mov     a,r5
0CAB 120000    3150            lcall   ___fs2sint
0CAE AA82      3151            mov     r2,dpl
0CB0 AB83      3152            mov     r3,dph
0CB2 904D10    3153            mov     dptr,#_distance
0CB5 EA        3154            mov     a,r2
0CB6 F0        3155            movx    @dptr,a
0CB7 A3        3156            inc     dptr
0CB8 EB        3157            mov     a,r3
0CB9 F0        3158            movx    @dptr,a
0CBA           3159   ;        main.c:714: return distance; 
0CBA 8A82      3160            mov     dpl,r2
0CBC 8B83      3161            mov     dph,r3
0CBE 22        3162            ret
0CBF           3163   ;------------------------------------------------------------
0CBF           3164   ;Allocation info for local variables in function 'Set_Pin_Output'
0CBF           3165   ;------------------------------------------------------------
0CBF           3166   ;pin                       Allocated to registers r2 
0CBF           3167   ;mask                      Allocated to registers r3 
0CBF           3168   ;------------------------------------------------------------
0CBF           3169   ;        main.c:717: void Set_Pin_Output (unsigned char pin)
0CBF           3170   ;        -----------------------------------------
0CBF           3171   ;         function Set_Pin_Output
0CBF           3172   ;        -----------------------------------------
0CBF           3173   _Set_Pin_Output:
0CBF AA82      3174            mov     r2,dpl
0CC1           3175   ;        main.c:721: mask=(1<<(pin&0x7));
0CC1 7407      3176            mov     a,#0x07
0CC3 5A        3177            anl     a,r2
0CC4 F5F0      3178            mov     b,a
0CC6 05F0      3179            inc     b
0CC8 7401      3180            mov     a,#0x01
0CCA 8000      3181            sjmp    L024011?
0CCC           3182   L024009?:
0CCC 25E0      3183            add     a,acc
0CCE           3184   L024011?:
0CCE D5F038    3185            djnz    b,L024009?
0CD1 FB        3186            mov     r3,a
0CD2           3187   ;        main.c:722: switch(pin/0x10)
0CD2 EA        3188            mov     a,r2
0CD3 C4        3189            swap    a
0CD4 540F      3190            anl     a,#0x0f
0CD6 FA        3191            mov  r2,a
0CD7 24FC      3192            add     a,#0xff - 0x03
0CD9 4000      3193            jc      L024006?
0CDB EA        3194            mov     a,r2
0CDC 2A        3195            add     a,r2
0CDD 2A        3196            add     a,r2
0CDE 90EDB8    3197            mov     dptr,#L024013?
0CE1 73        3198            jmp     @a+dptr
0CE2           3199   L024013?:
0CE2 020000    3200            ljmp    L024001?
0CE5 020000    3201            ljmp    L024002?
0CE8 020000    3202            ljmp    L024003?
0CEB 020000    3203            ljmp    L024004?
0CEE           3204   ;        main.c:724: case 0: P0MDOUT |= mask; break;
0CEE           3205   L024001?:
0CEE EB        3206            mov     a,r3
0CEF 42A4      3207            orl     _P0MDOUT,a
0CF1           3208   ;        main.c:725: case 1: P1MDOUT |= mask; break;
0CF1 22        3209            ret
0CF2           3210   L024002?:
0CF2 EB        3211            mov     a,r3
0CF3 42A5      3212            orl     _P1MDOUT,a
0CF5           3213   ;        main.c:726: case 2: P2MDOUT |= mask; break; 
0CF5 22        3214            ret
0CF6           3215   L024003?:
0CF6 EB        3216            mov     a,r3
0CF7 42A6      3217            orl     _P2MDOUT,a
0CF9           3218   ;        main.c:727: case 3: P3MDOUT |= mask; break; 
0CF9 22        3219            ret
0CFA           3220   L024004?:
0CFA EB        3221            mov     a,r3
0CFB 429C      3222            orl     _P3MDOUT,a
0CFD           3223   ;        main.c:728: }   
0CFD           3224   L024006?:
0CFD 22        3225            ret
0CFE           3226   ;------------------------------------------------------------
0CFE           3227   ;Allocation info for local variables in function 'Set_Pin_Input'
0CFE           3228   ;------------------------------------------------------------
0CFE           3229   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_167'
0CFE           3230   ;pin                       Allocated to registers r2 
0CFE           3231   ;------------------------------------------------------------
0CFE           3232   ;        main.c:731: void Set_Pin_Input (unsigned char pin)
0CFE           3233   ;        -----------------------------------------
0CFE           3234   ;         function Set_Pin_Input
0CFE           3235   ;        -----------------------------------------
0CFE           3236   _Set_Pin_Input:
0CFE AA82      3237            mov     r2,dpl
0D00           3238   ;        main.c:735: mask=(1<<(pin&0x7));
0D00 7407      3239            mov     a,#0x07
0D02 5A        3240            anl     a,r2
0D03 F5F0      3241            mov     b,a
0D05 05F0      3242            inc     b
0D07 7401      3243            mov     a,#0x01
0D09 8000      3244            sjmp    L025011?
0D0B           3245   L025009?:
0D0B 25E0      3246            add     a,acc
0D0D           3247   L025011?:
0D0D D5F038    3248            djnz    b,L025009?
0D10           3249   ;        main.c:736: mask=~mask;
0D10 F4        3250            cpl     a
0D11 FB        3251            mov     r3,a
0D12           3252   ;        main.c:737: switch(pin/0x10)
0D12 EA        3253            mov     a,r2
0D13 C4        3254            swap    a
0D14 540F      3255            anl     a,#0x0f
0D16 FA        3256            mov  r2,a
0D17 24FC      3257            add     a,#0xff - 0x03
0D19 4000      3258            jc      L025006?
0D1B EA        3259            mov     a,r2
0D1C 2A        3260            add     a,r2
0D1D 2A        3261            add     a,r2
0D1E 90EFB8    3262            mov     dptr,#L025013?
0D21 73        3263            jmp     @a+dptr
0D22           3264   L025013?:
0D22 020000    3265            ljmp    L025001?
0D25 020000    3266            ljmp    L025002?
0D28 020000    3267            ljmp    L025003?
0D2B 020000    3268            ljmp    L025004?
0D2E           3269   ;        main.c:739: case 0: P0MDOUT &= mask; break;
0D2E           3270   L025001?:
0D2E EB        3271            mov     a,r3
0D2F 52A4      3272            anl     _P0MDOUT,a
0D31           3273   ;        main.c:740: case 1: P1MDOUT &= mask; break;
0D31 22        3274            ret
0D32           3275   L025002?:
0D32 EB        3276            mov     a,r3
0D33 52A5      3277            anl     _P1MDOUT,a
0D35           3278   ;        main.c:741: case 2: P2MDOUT &= mask; break; 
0D35 22        3279            ret
0D36           3280   L025003?:
0D36 EB        3281            mov     a,r3
0D37 52A6      3282            anl     _P2MDOUT,a
0D39           3283   ;        main.c:742: case 3: P3MDOUT &= mask; break; 
0D39 22        3284            ret
0D3A           3285   L025004?:
0D3A EB        3286            mov     a,r3
0D3B 529C      3287            anl     _P3MDOUT,a
0D3D           3288   ;        main.c:743: }   
0D3D           3289   L025006?:
0D3D 22        3290            ret
0D3E           3291   ;------------------------------------------------------------
0D3E           3292   ;Allocation info for local variables in function 'InitADC'
0D3E           3293   ;------------------------------------------------------------
0D3E           3294   ;------------------------------------------------------------
0D3E           3295   ;        main.c:746: void InitADC (void)
0D3E           3296   ;        -----------------------------------------
0D3E           3297   ;         function InitADC
0D3E           3298   ;        -----------------------------------------
0D3E           3299   _InitADC:
0D3E           3300   ;        main.c:748: SFRPAGE = 0x00;
0D3E 75A700    3301            mov     _SFRPAGE,#0x00
0D41           3302   ;        main.c:749: ADEN=0; // Disable ADC
0D41 C2EF      3303            clr     _ADEN
0D43           3304   ;        main.c:754: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0D43 75B280    3305            mov     _ADC0CN1,#0x80
0D46           3306   ;        main.c:758: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0D46 75BC20    3307            mov     _ADC0CF0,#0x20
0D49           3308   ;        main.c:762: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
0D49 75B91E    3309            mov     _ADC0CF1,#0x1E
0D4C           3310   ;        main.c:771: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0D4C 75E800    3311            mov     _ADC0CN0,#0x00
0D4F           3312   ;        main.c:776: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0D4F 75DF3F    3313            mov     _ADC0CF2,#0x3F
0D52           3314   ;        main.c:780: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0D52 75B300    3315            mov     _ADC0CN2,#0x00
0D55           3316   ;        main.c:782: ADEN=1; // Enable ADC
0D55 D2EF      3317            setb    _ADEN
0D57 22        3318            ret
0D58           3319   ;------------------------------------------------------------
0D58           3320   ;Allocation info for local variables in function 'InitPinADC'
0D58           3321   ;------------------------------------------------------------
0D58           3322   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
0D58           3323   ;portno                    Allocated to registers r2 
0D58           3324   ;mask                      Allocated to registers r3 
0D58           3325   ;------------------------------------------------------------
0D58           3326   ;        main.c:785: void InitPinADC (unsigned char portno, unsigned char pin_num)
0D58           3327   ;        -----------------------------------------
0D58           3328   ;         function InitPinADC
0D58           3329   ;        -----------------------------------------
0D58           3330   _InitPinADC:
0D58 AA82      3331            mov     r2,dpl
0D5A           3332   ;        main.c:789: mask=1<<pin_num;
0D5A 85E0F0    3333            mov     b,_InitPinADC_PARM_2
0D5D 05F0      3334            inc     b
0D5F 7401      3335            mov     a,#0x01
0D61 8000      3336            sjmp    L027013?
0D63           3337   L027011?:
0D63 25E0      3338            add     a,acc
0D65           3339   L027013?:
0D65 D5F0A0    3340            djnz    b,L027011?
0D68 FB        3341            mov     r3,a
0D69           3342   ;        main.c:791: SFRPAGE = 0x20;
0D69 75A720    3343            mov     _SFRPAGE,#0x20
0D6C           3344   ;        main.c:792: switch (portno)
0D6C BA00E0    3345            cjne    r2,#0x00,L027014?
0D6F 8000      3346            sjmp    L027001?
0D71           3347   L027014?:
0D71 BA0160    3348            cjne    r2,#0x01,L027015?
0D74 8000      3349            sjmp    L027002?
0D76           3350   L027015?:
0D76           3351   ;        main.c:794: case 0:
0D76 BA02E0    3352            cjne    r2,#0x02,L027005?
0D79 8000      3353            sjmp    L027003?
0D7B           3354   L027001?:
0D7B           3355   ;        main.c:795: P0MDIN &= (~mask); // Set pin as analog input
0D7B EB        3356            mov     a,r3
0D7C F4        3357            cpl     a
0D7D FA        3358            mov     r2,a
0D7E 52F1      3359            anl     _P0MDIN,a
0D80           3360   ;        main.c:796: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0D80 EB        3361            mov     a,r3
0D81 42D4      3362            orl     _P0SKIP,a
0D83           3363   ;        main.c:797: break;
0D83           3364   ;        main.c:798: case 1:
0D83 8000      3365            sjmp    L027005?
0D85           3366   L027002?:
0D85           3367   ;        main.c:799: P1MDIN &= (~mask); // Set pin as analog input
0D85 EB        3368            mov     a,r3
0D86 F4        3369            cpl     a
0D87 FA        3370            mov     r2,a
0D88 52F2      3371            anl     _P1MDIN,a
0D8A           3372   ;        main.c:800: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0D8A EB        3373            mov     a,r3
0D8B 42D5      3374            orl     _P1SKIP,a
0D8D           3375   ;        main.c:801: break;
0D8D           3376   ;        main.c:802: case 2:
0D8D 8000      3377            sjmp    L027005?
0D8F           3378   L027003?:
0D8F           3379   ;        main.c:803: P2MDIN &= (~mask); // Set pin as analog input
0D8F EB        3380            mov     a,r3
0D90 F4        3381            cpl     a
0D91 FA        3382            mov     r2,a
0D92 52F3      3383            anl     _P2MDIN,a
0D94           3384   ;        main.c:804: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0D94 EB        3385            mov     a,r3
0D95 42CC      3386            orl     _P2SKIP,a
0D97           3387   ;        main.c:808: }
0D97           3388   L027005?:
0D97           3389   ;        main.c:809: SFRPAGE = 0x00;
0D97 75A700    3390            mov     _SFRPAGE,#0x00
0D9A 22        3391            ret
0D9B           3392   ;------------------------------------------------------------
0D9B           3393   ;Allocation info for local variables in function 'ADC_at_Pin'
0D9B           3394   ;------------------------------------------------------------
0D9B           3395   ;pin                       Allocated to registers 
0D9B           3396   ;------------------------------------------------------------
0D9B           3397   ;        main.c:812: unsigned int ADC_at_Pin(unsigned char pin)
0D9B           3398   ;        -----------------------------------------
0D9B           3399   ;         function ADC_at_Pin
0D9B           3400   ;        -----------------------------------------
0D9B           3401   _ADC_at_Pin:
0D9B 8582BB    3402            mov     _ADC0MX,dpl
0D9E           3403   ;        main.c:815: ADINT = 0;
0D9E C2ED      3404            clr     _ADINT
0DA0           3405   ;        main.c:816: ADBUSY = 1;     // Convert voltage at the pin
0DA0 D2EC      3406            setb    _ADBUSY
0DA2           3407   ;        main.c:817: while (!ADINT); // Wait for conversion to complete
0DA2           3408   L028001?:
0DA2 30ED60    3409            jnb     _ADINT,L028001?
0DA5           3410   ;        main.c:818: return (ADC0);
0DA5 85BD82    3411            mov     dpl,_ADC0
0DA8 85BE83    3412            mov     dph,(_ADC0 >> 8)
0DAB 22        3413            ret
0DAC           3414   ;------------------------------------------------------------
0DAC           3415   ;Allocation info for local variables in function 'ReadHX711'
0DAC           3416   ;------------------------------------------------------------
0DAC           3417   ;dataa                     Allocated with name '_ReadHX711_dataa_1_177'
0DAC           3418   ;ans                       Allocated with name '_ReadHX711_ans_1_177'
0DAC           3419   ;j                         Allocated with name '_ReadHX711_j_1_177'
0DAC           3420   ;------------------------------------------------------------
0DAC           3421   ;        main.c:821: int ReadHX711(void) {
0DAC           3422   ;        -----------------------------------------
0DAC           3423   ;         function ReadHX711
0DAC           3424   ;        -----------------------------------------
0DAC           3425   _ReadHX711:
0DAC           3426   ;        main.c:822: xdata unsigned long dataa = 0;
0DAC 90D138    3427            mov     dptr,#_ReadHX711_dataa_1_177
0DAF E4        3428            clr     a
0DB0 F0        3429            movx    @dptr,a
0DB1 A3        3430            inc     dptr
0DB2 F0        3431            movx    @dptr,a
0DB3 A3        3432            inc     dptr
0DB4 F0        3433            movx    @dptr,a
0DB5 A3        3434            inc     dptr
0DB6 F0        3435            movx    @dptr,a
0DB7           3436   ;        main.c:827: PD_SCK = 0;
0DB7 C2A5      3437            clr     _P2_5
0DB9           3438   ;        main.c:829: for (i = 0; i < 24; i++) {
0DB9 905320    3439            mov     dptr,#_i
0DBC E4        3440            clr     a
0DBD F0        3441            movx    @dptr,a
0DBE A3        3442            inc     dptr
0DBF F0        3443            movx    @dptr,a
0DC0           3444   L029011?:
0DC0 905320    3445            mov     dptr,#_i
0DC3 E0        3446            movx    a,@dptr
0DC4 FA        3447            mov     r2,a
0DC5 A3        3448            inc     dptr
0DC6 E0        3449            movx    a,@dptr
0DC7 FB        3450            mov     r3,a
0DC8 C3        3451            clr     c
0DC9 EA        3452            mov     a,r2
0DCA 9418      3453            subb    a,#0x18
0DCC EB        3454            mov     a,r3
0DCD 9400      3455            subb    a,#0x00
0DCF 4000      3456            jc      L029036?
0DD1 020000    3457            ljmp    L029014?
0DD4           3458   L029036?:
0DD4           3459   ;        main.c:830: PD_SCK = 1;
0DD4 D2A5      3460            setb    _P2_5
0DD6           3461   ;        main.c:831: for (j = 0; j < 4; j++);
0DD6 90D188    3462            mov     dptr,#_ReadHX711_j_1_177
0DD9 E4        3463            clr     a
0DDA F0        3464            movx    @dptr,a
0DDB           3465   L029003?:
0DDB 90D188    3466            mov     dptr,#_ReadHX711_j_1_177
0DDE E0        3467            movx    a,@dptr
0DDF FA        3468            mov     r2,a
0DE0 C3        3469            clr     c
0DE1 6480      3470            xrl     a,#0x80
0DE3 9484      3471            subb    a,#0x84
0DE5 5000      3472            jnc     L029006?
0DE7 90D188    3473            mov     dptr,#_ReadHX711_j_1_177
0DEA E0        3474            movx    a,@dptr
0DEB 2401      3475            add     a,#0x01
0DED F0        3476            movx    @dptr,a
0DEE 8000      3477            sjmp    L029003?
0DF0           3478   L029006?:
0DF0           3479   ;        main.c:832: dataa = dataa << 1;
0DF0 90D138    3480            mov     dptr,#_ReadHX711_dataa_1_177
0DF3 E0        3481            movx    a,@dptr
0DF4 FA        3482            mov     r2,a
0DF5 A3        3483            inc     dptr
0DF6 E0        3484            movx    a,@dptr
0DF7 FB        3485            mov     r3,a
0DF8 A3        3486            inc     dptr
0DF9 E0        3487            movx    a,@dptr
0DFA FC        3488            mov     r4,a
0DFB A3        3489            inc     dptr
0DFC E0        3490            movx    a,@dptr
0DFD FD        3491            mov     r5,a
0DFE EA        3492            mov     a,r2
0DFF 2A        3493            add     a,r2
0E00 FA        3494            mov     r2,a
0E01 EB        3495            mov     a,r3
0E02 33        3496            rlc     a
0E03 FB        3497            mov     r3,a
0E04 EC        3498            mov     a,r4
0E05 33        3499            rlc     a
0E06 FC        3500            mov     r4,a
0E07 ED        3501            mov     a,r5
0E08 33        3502            rlc     a
0E09 FD        3503            mov     r5,a
0E0A 90D138    3504            mov     dptr,#_ReadHX711_dataa_1_177
0E0D EA        3505            mov     a,r2
0E0E F0        3506            movx    @dptr,a
0E0F A3        3507            inc     dptr
0E10 EB        3508            mov     a,r3
0E11 F0        3509            movx    @dptr,a
0E12 A3        3510            inc     dptr
0E13 EC        3511            mov     a,r4
0E14 F0        3512            movx    @dptr,a
0E15 A3        3513            inc     dptr
0E16 ED        3514            mov     a,r5
0E17 F0        3515            movx    @dptr,a
0E18           3516   ;        main.c:833: if (DOUT) {
0E18 30A6E0    3517            jnb     _P2_6,L029002?
0E1B           3518   ;        main.c:834: dataa |= 0x01;
0E1B 90D138    3519            mov     dptr,#_ReadHX711_dataa_1_177
0E1E E0        3520            movx    a,@dptr
0E1F FA        3521            mov     r2,a
0E20 A3        3522            inc     dptr
0E21 E0        3523            movx    a,@dptr
0E22 FB        3524            mov     r3,a
0E23 A3        3525            inc     dptr
0E24 E0        3526            movx    a,@dptr
0E25 FC        3527            mov     r4,a
0E26 A3        3528            inc     dptr
0E27 E0        3529            movx    a,@dptr
0E28 FD        3530            mov     r5,a
0E29 90D138    3531            mov     dptr,#_ReadHX711_dataa_1_177
0E2C 7401      3532            mov     a,#0x01
0E2E 4A        3533            orl     a,r2
0E2F F0        3534            movx    @dptr,a
0E30 A3        3535            inc     dptr
0E31 EB        3536            mov     a,r3
0E32 F0        3537            movx    @dptr,a
0E33 A3        3538            inc     dptr
0E34 EC        3539            mov     a,r4
0E35 F0        3540            movx    @dptr,a
0E36 A3        3541            inc     dptr
0E37 ED        3542            mov     a,r5
0E38 F0        3543            movx    @dptr,a
0E39           3544   L029002?:
0E39           3545   ;        main.c:836: PD_SCK = 0;
0E39 C2A5      3546            clr     _P2_5
0E3B           3547   ;        main.c:837: for (j = 0; j < 4; j++);
0E3B 90D188    3548            mov     dptr,#_ReadHX711_j_1_177
0E3E E4        3549            clr     a
0E3F F0        3550            movx    @dptr,a
0E40           3551   L029007?:
0E40 90D188    3552            mov     dptr,#_ReadHX711_j_1_177
0E43 E0        3553            movx    a,@dptr
0E44 FA        3554            mov     r2,a
0E45 C3        3555            clr     c
0E46 6480      3556            xrl     a,#0x80
0E48 9484      3557            subb    a,#0x84
0E4A 5000      3558            jnc     L029013?
0E4C 90D188    3559            mov     dptr,#_ReadHX711_j_1_177
0E4F E0        3560            movx    a,@dptr
0E50 2401      3561            add     a,#0x01
0E52 F0        3562            movx    @dptr,a
0E53 8000      3563            sjmp    L029007?
0E55           3564   L029013?:
0E55           3565   ;        main.c:829: for (i = 0; i < 24; i++) {
0E55 905320    3566            mov     dptr,#_i
0E58 E0        3567            movx    a,@dptr
0E59 2401      3568            add     a,#0x01
0E5B F0        3569            movx    @dptr,a
0E5C A3        3570            inc     dptr
0E5D E0        3571            movx    a,@dptr
0E5E 3400      3572            addc    a,#0x00
0E60 F0        3573            movx    @dptr,a
0E61 020000    3574            ljmp    L029011?
0E64           3575   L029014?:
0E64           3576   ;        main.c:840: PD_SCK = 1;
0E64 D2A5      3577            setb    _P2_5
0E66           3578   ;        main.c:841: for (j = 0; j < 4; j++);
0E66 90D188    3579            mov     dptr,#_ReadHX711_j_1_177
0E69 E4        3580            clr     a
0E6A F0        3581            movx    @dptr,a
0E6B           3582   L029015?:
0E6B 90D188    3583            mov     dptr,#_ReadHX711_j_1_177
0E6E E0        3584            movx    a,@dptr
0E6F FA        3585            mov     r2,a
0E70 C3        3586            clr     c
0E71 6480      3587            xrl     a,#0x80
0E73 9484      3588            subb    a,#0x84
0E75 5000      3589            jnc     L029018?
0E77 90D188    3590            mov     dptr,#_ReadHX711_j_1_177
0E7A E0        3591            movx    a,@dptr
0E7B 2401      3592            add     a,#0x01
0E7D F0        3593            movx    @dptr,a
0E7E 8000      3594            sjmp    L029015?
0E80           3595   L029018?:
0E80           3596   ;        main.c:842: PD_SCK = 0;
0E80 C2A5      3597            clr     _P2_5
0E82           3598   ;        main.c:843: for (j = 0; j < 4; j++);
0E82 90D188    3599            mov     dptr,#_ReadHX711_j_1_177
0E85 E4        3600            clr     a
0E86 F0        3601            movx    @dptr,a
0E87           3602   L029019?:
0E87 90D188    3603            mov     dptr,#_ReadHX711_j_1_177
0E8A E0        3604            movx    a,@dptr
0E8B FA        3605            mov     r2,a
0E8C C3        3606            clr     c
0E8D 6480      3607            xrl     a,#0x80
0E8F 9484      3608            subb    a,#0x84
0E91 5000      3609            jnc     L029022?
0E93 90D188    3610            mov     dptr,#_ReadHX711_j_1_177
0E96 E0        3611            movx    a,@dptr
0E97 2401      3612            add     a,#0x01
0E99 F0        3613            movx    @dptr,a
0E9A 8000      3614            sjmp    L029019?
0E9C           3615   L029022?:
0E9C           3616   ;        main.c:844: ans = (dataa % 1000000)/10;
0E9C 90D138    3617            mov     dptr,#_ReadHX711_dataa_1_177
0E9F E0        3618            movx    a,@dptr
0EA0 FA        3619            mov     r2,a
0EA1 A3        3620            inc     dptr
0EA2 E0        3621            movx    a,@dptr
0EA3 FB        3622            mov     r3,a
0EA4 A3        3623            inc     dptr
0EA5 E0        3624            movx    a,@dptr
0EA6 FC        3625            mov     r4,a
0EA7 A3        3626            inc     dptr
0EA8 E0        3627            movx    a,@dptr
0EA9 FD        3628            mov     r5,a
0EAA 750040    3629            mov     __modulong_PARM_2,#0x40
0EAD 750142    3630            mov     (__modulong_PARM_2 + 1),#0x42
0EB0 75020F    3631            mov     (__modulong_PARM_2 + 2),#0x0F
0EB3 750300    3632            mov     (__modulong_PARM_2 + 3),#0x00
0EB6 8A82      3633            mov     dpl,r2
0EB8 8B83      3634            mov     dph,r3
0EBA 8CF0      3635            mov     b,r4
0EBC ED        3636            mov     a,r5
0EBD 120000    3637            lcall   __modulong
0EC0 AA82      3638            mov     r2,dpl
0EC2 AB83      3639            mov     r3,dph
0EC4 ACF0      3640            mov     r4,b
0EC6 FD        3641            mov     r5,a
0EC7 75000A    3642            mov     __divulong_PARM_2,#0x0A
0ECA E4        3643            clr     a
0ECB F501      3644            mov     (__divulong_PARM_2 + 1),a
0ECD F502      3645            mov     (__divulong_PARM_2 + 2),a
0ECF F503      3646            mov     (__divulong_PARM_2 + 3),a
0ED1 8A82      3647            mov     dpl,r2
0ED3 8B83      3648            mov     dph,r3
0ED5 8CF0      3649            mov     b,r4
0ED7 ED        3650            mov     a,r5
0ED8           3651   ;        main.c:845: return ans;
0ED8 020000    3652            ljmp    __divulong
0EDB           3653   ;------------------------------------------------------------
0EDB           3654   ;Allocation info for local variables in function 'Timer5_ISR'
0EDB           3655   ;------------------------------------------------------------
0EDB           3656   ;------------------------------------------------------------
0EDB           3657   ;        main.c:848: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0EDB           3658   ;        -----------------------------------------
0EDB           3659   ;         function Timer5_ISR
0EDB           3660   ;        -----------------------------------------
0EDB           3661   _Timer5_ISR:
0EDB C030      3662            push    bits
0EDD C0E0      3663            push    acc
0EDF C0F0      3664            push    b
0EE1 C082      3665            push    dpl
0EE3 C083      3666            push    dph
0EE5 C002      3667            push    (0+2)
0EE7 C003      3668            push    (0+3)
0EE9 C004      3669            push    (0+4)
0EEB C005      3670            push    (0+5)
0EED C006      3671            push    (0+6)
0EEF C007      3672            push    (0+7)
0EF1 C000      3673            push    (0+0)
0EF3 C001      3674            push    (0+1)
0EF5 C0D0      3675            push    psw
0EF7 75D000    3676            mov     psw,#0x00
0EFA           3677   ;        main.c:850: SFRPAGE=0x10;
0EFA 75A710    3678            mov     _SFRPAGE,#0x10
0EFD           3679   ;        main.c:851: TF5H = 0; // Clear Timer5 interrupt flag
0EFD C2C7      3680            clr     _TF5H
0EFF           3681   ;        main.c:852: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0EFF 75D2C4    3682            mov     _TMR5RL,#0xC4
0F02 75D3FF    3683            mov     (_TMR5RL >> 8),#0xFF
0F05           3684   ;        main.c:854: fre_mea_count++;
0F05 904FE0    3685            mov     dptr,#_fre_mea_count
0F08 E0        3686            movx    a,@dptr
0F09 2401      3687            add     a,#0x01
0F0B F0        3688            movx    @dptr,a
0F0C A3        3689            inc     dptr
0F0D E0        3690            movx    a,@dptr
0F0E 3400      3691            addc    a,#0x00
0F10 F0        3692            movx    @dptr,a
0F11           3693   ;        main.c:855: if(fre_mea_count == 1000){
0F11 904FE0    3694            mov     dptr,#_fre_mea_count
0F14 E0        3695            movx    a,@dptr
0F15 FA        3696            mov     r2,a
0F16 A3        3697            inc     dptr
0F17 E0        3698            movx    a,@dptr
0F18 FB        3699            mov     r3,a
0F19 BAE870    3700            cjne    r2,#0xE8,L030004?
0F1C BB0370    3701            cjne    r3,#0x03,L030004?
0F1F           3702   ;        main.c:856: fre_mea_count = 0;
0F1F 904FE0    3703            mov     dptr,#_fre_mea_count
0F22 E4        3704            clr     a
0F23 F0        3705            movx    @dptr,a
0F24 A3        3706            inc     dptr
0F25 F0        3707            movx    @dptr,a
0F26           3708   ;        main.c:857: if(mea_yes){
0F26 904DD0    3709            mov     dptr,#_mea_yes
0F29 E0        3710            movx    a,@dptr
0F2A FA        3711            mov     r2,a
0F2B 6000      3712            jz      L030004?
0F2D           3713   ;        main.c:858: freq100 = get_freq();
0F2D 120000    3714            lcall   _get_freq
0F30 AA82      3715            mov     r2,dpl
0F32 AB83      3716            mov     r3,dph
0F34 905720    3717            mov     dptr,#_freq100
0F37 EA        3718            mov     a,r2
0F38 F0        3719            movx    @dptr,a
0F39 A3        3720            inc     dptr
0F3A EB        3721            mov     a,r3
0F3B F0        3722            movx    @dptr,a
0F3C EB        3723            mov     a,r3
0F3D 33        3724            rlc     a
0F3E 95E0      3725            subb    a,acc
0F40 A3        3726            inc     dptr
0F41 F0        3727            movx    @dptr,a
0F42 A3        3728            inc     dptr
0F43 F0        3729            movx    @dptr,a
0F44           3730   L030004?:
0F44           3731   ;        main.c:862: weight_mea_count++;
0F44 904FA0    3732            mov     dptr,#_weight_mea_count
0F47 E0        3733            movx    a,@dptr
0F48 2401      3734            add     a,#0x01
0F4A F0        3735            movx    @dptr,a
0F4B A3        3736            inc     dptr
0F4C E0        3737            movx    a,@dptr
0F4D 3400      3738            addc    a,#0x00
0F4F F0        3739            movx    @dptr,a
0F50           3740   ;        main.c:863: if(weight_mea_count == 20000){
0F50 904FA0    3741            mov     dptr,#_weight_mea_count
0F53 E0        3742            movx    a,@dptr
0F54 FA        3743            mov     r2,a
0F55 A3        3744            inc     dptr
0F56 E0        3745            movx    a,@dptr
0F57 FB        3746            mov     r3,a
0F58 BA20F0    3747            cjne    r2,#0x20,L030010?
0F5B BB4EF0    3748            cjne    r3,#0x4E,L030010?
0F5E           3749   ;        main.c:864: weight_mea_count = 0;
0F5E 904FA0    3750            mov     dptr,#_weight_mea_count
0F61 E4        3751            clr     a
0F62 F0        3752            movx    @dptr,a
0F63 A3        3753            inc     dptr
0F64 F0        3754            movx    @dptr,a
0F65           3755   ;        main.c:865: if(mea_yes) distance = measure_distance();
0F65 904DD0    3756            mov     dptr,#_mea_yes
0F68 E0        3757            movx    a,@dptr
0F69 FA        3758            mov     r2,a
0F6A 6000      3759            jz      L030006?
0F6C 120000    3760            lcall   _measure_distance
0F6F E582      3761            mov     a,dpl
0F71 8583F0    3762            mov     b,dph
0F74 904D10    3763            mov     dptr,#_distance
0F77 F0        3764            movx    @dptr,a
0F78 A3        3765            inc     dptr
0F79 E5F0      3766            mov     a,b
0F7B F0        3767            movx    @dptr,a
0F7C           3768   L030006?:
0F7C           3769   ;        main.c:866: if(mea_yes) weight = ReadHX711();
0F7C 904DD0    3770            mov     dptr,#_mea_yes
0F7F E0        3771            movx    a,@dptr
0F80 FA        3772            mov     r2,a
0F81 6000      3773            jz      L030010?
0F83 120000    3774            lcall   _ReadHX711
0F86 E582      3775            mov     a,dpl
0F88 8583F0    3776            mov     b,dph
0F8B 904D90    3777            mov     dptr,#_weight
0F8E F0        3778            movx    @dptr,a
0F8F A3        3779            inc     dptr
0F90 E5F0      3780            mov     a,b
0F92 F0        3781            movx    @dptr,a
0F93           3782   L030010?:
0F93           3783   ;        main.c:869: pwm_counter++; 
0F93 9052E0    3784            mov     dptr,#_pwm_counter
0F96 E0        3785            movx    a,@dptr
0F97 2401      3786            add     a,#0x01
0F99 F0        3787            movx    @dptr,a
0F9A A3        3788            inc     dptr
0F9B E0        3789            movx    a,@dptr
0F9C 3400      3790            addc    a,#0x00
0F9E F0        3791            movx    @dptr,a
0F9F           3792   ;        main.c:870: if (pwm_counter == 100){
0F9F 9052E0    3793            mov     dptr,#_pwm_counter
0FA2 E0        3794            movx    a,@dptr
0FA3 FA        3795            mov     r2,a
0FA4 A3        3796            inc     dptr
0FA5 E0        3797            movx    a,@dptr
0FA6 FB        3798            mov     r3,a
0FA7 BA6470    3799            cjne    r2,#0x64,L030012?
0FAA BB0070    3800            cjne    r3,#0x00,L030012?
0FAD           3801   ;        main.c:871: pwm_counter = 0; 
0FAD 9052E0    3802            mov     dptr,#_pwm_counter
0FB0 E4        3803            clr     a
0FB1 F0        3804            movx    @dptr,a
0FB2 A3        3805            inc     dptr
0FB3 F0        3806            movx    @dptr,a
0FB4           3807   L030012?:
0FB4           3808   ;        main.c:874: if (pwm_right > pwm_counter){
0FB4 905220    3809            mov     dptr,#_pwm_right
0FB7 E0        3810            movx    a,@dptr
0FB8 FA        3811            mov     r2,a
0FB9 9052E0    3812            mov     dptr,#_pwm_counter
0FBC E0        3813            movx    a,@dptr
0FBD FB        3814            mov     r3,a
0FBE A3        3815            inc     dptr
0FBF E0        3816            movx    a,@dptr
0FC0 FC        3817            mov     r4,a
0FC1 7D00      3818            mov     r5,#0x00
0FC3 C3        3819            clr     c
0FC4 EB        3820            mov     a,r3
0FC5 9A        3821            subb    a,r2
0FC6 EC        3822            mov     a,r4
0FC7 9D        3823            subb    a,r5
0FC8 5000      3824            jnc     L030017?
0FCA           3825   ;        main.c:875: if(L_motor_dir){
0FCA 9051E0    3826            mov     dptr,#_L_motor_dir
0FCD E0        3827            movx    a,@dptr
0FCE FA        3828            mov     r2,a
0FCF 6000      3829            jz      L030014?
0FD1           3830   ;        main.c:876: L_bridge_1 = 1; 
0FD1 D2A1      3831            setb    _P2_1
0FD3           3832   ;        main.c:877: L_bridge_2 = 0; 
0FD3 C2A2      3833            clr     _P2_2
0FD5 8000      3834            sjmp    L030018?
0FD7           3835   L030014?:
0FD7           3836   ;        main.c:880: L_bridge_1 = 0; 
0FD7 C2A1      3837            clr     _P2_1
0FD9           3838   ;        main.c:881: L_bridge_2 = 1; 
0FD9 D2A2      3839            setb    _P2_2
0FDB 8000      3840            sjmp    L030018?
0FDD           3841   L030017?:
0FDD           3842   ;        main.c:885: L_bridge_1 = 0; 
0FDD C2A1      3843            clr     _P2_1
0FDF           3844   ;        main.c:886: L_bridge_2 = 0; 
0FDF C2A2      3845            clr     _P2_2
0FE1           3846   L030018?:
0FE1           3847   ;        main.c:888: if (pwm_left > pwm_counter){
0FE1 905260    3848            mov     dptr,#_pwm_left
0FE4 E0        3849            movx    a,@dptr
0FE5 FA        3850            mov     r2,a
0FE6 7D00      3851            mov     r5,#0x00
0FE8 C3        3852            clr     c
0FE9 EB        3853            mov     a,r3
0FEA 9A        3854            subb    a,r2
0FEB EC        3855            mov     a,r4
0FEC 9D        3856            subb    a,r5
0FED 5000      3857            jnc     L030023?
0FEF           3858   ;        main.c:889: if (R_motor_dir){
0FEF 9051A0    3859            mov     dptr,#_R_motor_dir
0FF2 E0        3860            movx    a,@dptr
0FF3 FA        3861            mov     r2,a
0FF4 6000      3862            jz      L030020?
0FF6           3863   ;        main.c:890: R_bridge_1 = 1; 
0FF6 D2A4      3864            setb    _P2_4
0FF8           3865   ;        main.c:891: R_bridge_2 = 0;
0FF8 C2A3      3866            clr     _P2_3
0FFA 8000      3867            sjmp    L030024?
0FFC           3868   L030020?:
0FFC           3869   ;        main.c:894: R_bridge_1 = 0; 
0FFC C2A4      3870            clr     _P2_4
0FFE           3871   ;        main.c:895: R_bridge_2 = 1;
0FFE D2A3      3872            setb    _P2_3
1000 8000      3873            sjmp    L030024?
1002           3874   L030023?:
1002           3875   ;        main.c:899: R_bridge_1 = 0; 
1002 C2A4      3876            clr     _P2_4
1004           3877   ;        main.c:900: R_bridge_2 = 0; 
1004 C2A3      3878            clr     _P2_3
1006           3879   L030024?:
1006           3880   ;        main.c:903: servo_counter++;
1006 9052A0    3881            mov     dptr,#_servo_counter
1009 E0        3882            movx    a,@dptr
100A 2401      3883            add     a,#0x01
100C F0        3884            movx    @dptr,a
100D A3        3885            inc     dptr
100E E0        3886            movx    a,@dptr
100F 3400      3887            addc    a,#0x00
1011 F0        3888            movx    @dptr,a
1012           3889   ;        main.c:904: if(servo_counter==2000)
1012 9052A0    3890            mov     dptr,#_servo_counter
1015 E0        3891            movx    a,@dptr
1016 FA        3892            mov     r2,a
1017 A3        3893            inc     dptr
1018 E0        3894            movx    a,@dptr
1019 FB        3895            mov     r3,a
101A BAD030    3896            cjne    r2,#0xD0,L030026?
101D BB0730    3897            cjne    r3,#0x07,L030026?
1020           3898   ;        main.c:906: servo_counter=0;
1020 9052A0    3899            mov     dptr,#_servo_counter
1023 E4        3900            clr     a
1024 F0        3901            movx    @dptr,a
1025 A3        3902            inc     dptr
1026 F0        3903            movx    @dptr,a
1027           3904   ;        main.c:907: Servo_arm=1;
1027 D296      3905            setb    _P1_6
1029           3906   ;        main.c:908: Servo_base=1;
1029 D297      3907            setb    _P1_7
102B           3908   L030026?:
102B           3909   ;        main.c:910: if(servo_arm>=servo_counter)
102B 905120    3910            mov     dptr,#_servo_arm
102E E0        3911            movx    a,@dptr
102F FA        3912            mov     r2,a
1030 9052A0    3913            mov     dptr,#_servo_counter
1033 E0        3914            movx    a,@dptr
1034 FB        3915            mov     r3,a
1035 A3        3916            inc     dptr
1036 E0        3917            movx    a,@dptr
1037 FC        3918            mov     r4,a
1038 7D00      3919            mov     r5,#0x00
103A C3        3920            clr     c
103B EA        3921            mov     a,r2
103C 9B        3922            subb    a,r3
103D ED        3923            mov     a,r5
103E 9C        3924            subb    a,r4
103F 4000      3925            jc      L030028?
1041           3926   ;        main.c:912: Servo_arm = 1;
1041 D296      3927            setb    _P1_6
1043 8000      3928            sjmp    L030029?
1045           3929   L030028?:
1045           3930   ;        main.c:916: Servo_arm = 0; 
1045 C296      3931            clr     _P1_6
1047           3932   L030029?:
1047           3933   ;        main.c:918: if(servo_base>=servo_counter)
1047 905160    3934            mov     dptr,#_servo_base
104A E0        3935            movx    a,@dptr
104B FA        3936            mov     r2,a
104C 7D00      3937            mov     r5,#0x00
104E C3        3938            clr     c
104F EA        3939            mov     a,r2
1050 9B        3940            subb    a,r3
1051 ED        3941            mov     a,r5
1052 9C        3942            subb    a,r4
1053 4000      3943            jc      L030031?
1055           3944   ;        main.c:920: Servo_base = 1;
1055 D297      3945            setb    _P1_7
1057 8000      3946            sjmp    L030033?
1059           3947   L030031?:
1059           3948   ;        main.c:924: Servo_base = 0; 
1059 C297      3949            clr     _P1_7
105B           3950   L030033?:
105B D0D0      3951            pop     psw
105D D001      3952            pop     (0+1)
105F D000      3953            pop     (0+0)
1061 D007      3954            pop     (0+7)
1063 D006      3955            pop     (0+6)
1065 D005      3956            pop     (0+5)
1067 D004      3957            pop     (0+4)
1069 D003      3958            pop     (0+3)
106B D002      3959            pop     (0+2)
106D D083      3960            pop     dph
106F D082      3961            pop     dpl
1071 D0F0      3962            pop     b
1073 D0E0      3963            pop     acc
1075 D030      3964            pop     bits
1077 32        3965            reti
1078           3966   ;------------------------------------------------------------
1078           3967   ;Allocation info for local variables in function 'servo_pick'
1078           3968   ;------------------------------------------------------------
1078           3969   ;------------------------------------------------------------
1078           3970   ;        main.c:928: void servo_pick(){
1078           3971   ;        -----------------------------------------
1078           3972   ;         function servo_pick
1078           3973   ;        -----------------------------------------
1078           3974   _servo_pick:
1078           3975   ;        main.c:929: servo_arm = 50;
1078 905120    3976            mov     dptr,#_servo_arm
107B 7432      3977            mov     a,#0x32
107D F0        3978            movx    @dptr,a
107E           3979   ;        main.c:930: servo_base = 50;
107E 905160    3980            mov     dptr,#_servo_base
1081 7432      3981            mov     a,#0x32
1083 F0        3982            movx    @dptr,a
1084           3983   ;        main.c:931: waitms(500);
1084 9001F4    3984            mov     dptr,#0x01F4
1087 120000    3985            lcall   _waitms
108A           3986   ;        main.c:932: for (i_loo=50; i_loo <= 210; i_loo+=20)
108A 905360    3987            mov     dptr,#_i_loo
108D 7432      3988            mov     a,#0x32
108F F0        3989            movx    @dptr,a
1090 E4        3990            clr     a
1091 A3        3991            inc     dptr
1092 F0        3992            movx    @dptr,a
1093           3993   L031001?:
1093 905360    3994            mov     dptr,#_i_loo
1096 E0        3995            movx    a,@dptr
1097 FA        3996            mov     r2,a
1098 A3        3997            inc     dptr
1099 E0        3998            movx    a,@dptr
109A FB        3999            mov     r3,a
109B C3        4000            clr     c
109C 74D2      4001            mov     a,#0xD2
109E 9A        4002            subb    a,r2
109F E4        4003            clr     a
10A0 6480      4004            xrl     a,#0x80
10A2 8BF0      4005            mov     b,r3
10A4 63F080    4006            xrl     b,#0x80
10A7 95F0      4007            subb    a,b
10A9 4000      4008            jc      L031004?
10AB           4009   ;        main.c:934: servo_base = i_loo; 
10AB 905160    4010            mov     dptr,#_servo_base
10AE EA        4011            mov     a,r2
10AF F0        4012            movx    @dptr,a
10B0           4013   ;        main.c:935: waitms(25);
10B0 900019    4014            mov     dptr,#0x0019
10B3 120000    4015            lcall   _waitms
10B6           4016   ;        main.c:932: for (i_loo=50; i_loo <= 210; i_loo+=20)
10B6 905360    4017            mov     dptr,#_i_loo
10B9 E0        4018            movx    a,@dptr
10BA FA        4019            mov     r2,a
10BB A3        4020            inc     dptr
10BC E0        4021            movx    a,@dptr
10BD FB        4022            mov     r3,a
10BE 905360    4023            mov     dptr,#_i_loo
10C1 7414      4024            mov     a,#0x14
10C3 2A        4025            add     a,r2
10C4 F0        4026            movx    @dptr,a
10C5 E4        4027            clr     a
10C6 3B        4028            addc    a,r3
10C7 A3        4029            inc     dptr
10C8 F0        4030            movx    @dptr,a
10C9 8000      4031            sjmp    L031001?
10CB           4032   L031004?:
10CB           4033   ;        main.c:937: waitms(500);
10CB 9001F4    4034            mov     dptr,#0x01F4
10CE 120000    4035            lcall   _waitms
10D1           4036   ;        main.c:938: for(i_loo = 50; i_loo <= 250; i_loo+=20)
10D1 905360    4037            mov     dptr,#_i_loo
10D4 7432      4038            mov     a,#0x32
10D6 F0        4039            movx    @dptr,a
10D7 E4        4040            clr     a
10D8 A3        4041            inc     dptr
10D9 F0        4042            movx    @dptr,a
10DA           4043   L031005?:
10DA 905360    4044            mov     dptr,#_i_loo
10DD E0        4045            movx    a,@dptr
10DE FA        4046            mov     r2,a
10DF A3        4047            inc     dptr
10E0 E0        4048            movx    a,@dptr
10E1 FB        4049            mov     r3,a
10E2 C3        4050            clr     c
10E3 74FA      4051            mov     a,#0xFA
10E5 9A        4052            subb    a,r2
10E6 E4        4053            clr     a
10E7 6480      4054            xrl     a,#0x80
10E9 8BF0      4055            mov     b,r3
10EB 63F080    4056            xrl     b,#0x80
10EE 95F0      4057            subb    a,b
10F0 4000      4058            jc      L031008?
10F2           4059   ;        main.c:940: servo_arm = i_loo; 
10F2 905120    4060            mov     dptr,#_servo_arm
10F5 EA        4061            mov     a,r2
10F6 F0        4062            movx    @dptr,a
10F7           4063   ;        main.c:941: waitms(25);
10F7 900019    4064            mov     dptr,#0x0019
10FA 120000    4065            lcall   _waitms
10FD           4066   ;        main.c:938: for(i_loo = 50; i_loo <= 250; i_loo+=20)
10FD 905360    4067            mov     dptr,#_i_loo
1100 E0        4068            movx    a,@dptr
1101 FA        4069            mov     r2,a
1102 A3        4070            inc     dptr
1103 E0        4071            movx    a,@dptr
1104 FB        4072            mov     r3,a
1105 905360    4073            mov     dptr,#_i_loo
1108 7414      4074            mov     a,#0x14
110A 2A        4075            add     a,r2
110B F0        4076            movx    @dptr,a
110C E4        4077            clr     a
110D 3B        4078            addc    a,r3
110E A3        4079            inc     dptr
110F F0        4080            movx    @dptr,a
1110 8000      4081            sjmp    L031005?
1112           4082   L031008?:
1112           4083   ;        main.c:943: Magnet = 1; 
1112 D295      4084            setb    _P1_5
1114           4085   ;        main.c:944: waitms(500);
1114 9001F4    4086            mov     dptr,#0x01F4
1117 120000    4087            lcall   _waitms
111A           4088   ;        main.c:945: for(i_loo = 200; i_loo >= 100; i_loo-=10){
111A 905360    4089            mov     dptr,#_i_loo
111D 74C8      4090            mov     a,#0xC8
111F F0        4091            movx    @dptr,a
1120 E4        4092            clr     a
1121 A3        4093            inc     dptr
1122 F0        4094            movx    @dptr,a
1123           4095   L031009?:
1123 905360    4096            mov     dptr,#_i_loo
1126 E0        4097            movx    a,@dptr
1127 FA        4098            mov     r2,a
1128 A3        4099            inc     dptr
1129 E0        4100            movx    a,@dptr
112A FB        4101            mov     r3,a
112B C3        4102            clr     c
112C EA        4103            mov     a,r2
112D 9464      4104            subb    a,#0x64
112F EB        4105            mov     a,r3
1130 6480      4106            xrl     a,#0x80
1132 9480      4107            subb    a,#0x80
1134 4000      4108            jc      L031012?
1136           4109   ;        main.c:946: waitms(25);
1136 900019    4110            mov     dptr,#0x0019
1139 120000    4111            lcall   _waitms
113C           4112   ;        main.c:947: servo_base = i_loo;
113C 905360    4113            mov     dptr,#_i_loo
113F E0        4114            movx    a,@dptr
1140 FA        4115            mov     r2,a
1141 A3        4116            inc     dptr
1142 E0        4117            movx    a,@dptr
1143 FB        4118            mov     r3,a
1144 905160    4119            mov     dptr,#_servo_base
1147 EA        4120            mov     a,r2
1148 F0        4121            movx    @dptr,a
1149           4122   ;        main.c:945: for(i_loo = 200; i_loo >= 100; i_loo-=10){
1149 EA        4123            mov     a,r2
114A 24F6      4124            add     a,#0xf6
114C FA        4125            mov     r2,a
114D EB        4126            mov     a,r3
114E 34FF      4127            addc    a,#0xff
1150 FB        4128            mov     r3,a
1151 905360    4129            mov     dptr,#_i_loo
1154 EA        4130            mov     a,r2
1155 F0        4131            movx    @dptr,a
1156 A3        4132            inc     dptr
1157 EB        4133            mov     a,r3
1158 F0        4134            movx    @dptr,a
1159 8000      4135            sjmp    L031009?
115B           4136   L031012?:
115B           4137   ;        main.c:949: Magnet = 1; 
115B D295      4138            setb    _P1_5
115D           4139   ;        main.c:950: waitms(500);
115D 9001F4    4140            mov     dptr,#0x01F4
1160 120000    4141            lcall   _waitms
1163           4142   ;        main.c:951: for(i_loo = 100; i_loo <= 200; i_loo+=10){
1163 905360    4143            mov     dptr,#_i_loo
1166 7464      4144            mov     a,#0x64
1168 F0        4145            movx    @dptr,a
1169 E4        4146            clr     a
116A A3        4147            inc     dptr
116B F0        4148            movx    @dptr,a
116C           4149   L031013?:
116C 905360    4150            mov     dptr,#_i_loo
116F E0        4151            movx    a,@dptr
1170 FA        4152            mov     r2,a
1171 A3        4153            inc     dptr
1172 E0        4154            movx    a,@dptr
1173 FB        4155            mov     r3,a
1174 C3        4156            clr     c
1175 74C8      4157            mov     a,#0xC8
1177 9A        4158            subb    a,r2
1178 E4        4159            clr     a
1179 6480      4160            xrl     a,#0x80
117B 8BF0      4161            mov     b,r3
117D 63F080    4162            xrl     b,#0x80
1180 95F0      4163            subb    a,b
1182 4000      4164            jc      L031016?
1184           4165   ;        main.c:952: waitms(25);
1184 900019    4166            mov     dptr,#0x0019
1187 120000    4167            lcall   _waitms
118A           4168   ;        main.c:953: servo_base = i_loo;
118A 905360    4169            mov     dptr,#_i_loo
118D E0        4170            movx    a,@dptr
118E FA        4171            mov     r2,a
118F A3        4172            inc     dptr
1190 E0        4173            movx    a,@dptr
1191 FB        4174            mov     r3,a
1192 905160    4175            mov     dptr,#_servo_base
1195 EA        4176            mov     a,r2
1196 F0        4177            movx    @dptr,a
1197           4178   ;        main.c:951: for(i_loo = 100; i_loo <= 200; i_loo+=10){
1197 905360    4179            mov     dptr,#_i_loo
119A 740A      4180            mov     a,#0x0A
119C 2A        4181            add     a,r2
119D F0        4182            movx    @dptr,a
119E E4        4183            clr     a
119F 3B        4184            addc    a,r3
11A0 A3        4185            inc     dptr
11A1 F0        4186            movx    @dptr,a
11A2 8000      4187            sjmp    L031013?
11A4           4188   L031016?:
11A4           4189   ;        main.c:955: Magnet = 1; 
11A4 D295      4190            setb    _P1_5
11A6           4191   ;        main.c:956: waitms(500);
11A6 9001F4    4192            mov     dptr,#0x01F4
11A9 120000    4193            lcall   _waitms
11AC           4194   ;        main.c:957: for(i_loo = 240; i_loo >= 100; i_loo-=10){
11AC 905360    4195            mov     dptr,#_i_loo
11AF 74F0      4196            mov     a,#0xF0
11B1 F0        4197            movx    @dptr,a
11B2 E4        4198            clr     a
11B3 A3        4199            inc     dptr
11B4 F0        4200            movx    @dptr,a
11B5           4201   L031017?:
11B5 905360    4202            mov     dptr,#_i_loo
11B8 E0        4203            movx    a,@dptr
11B9 FA        4204            mov     r2,a
11BA A3        4205            inc     dptr
11BB E0        4206            movx    a,@dptr
11BC FB        4207            mov     r3,a
11BD C3        4208            clr     c
11BE EA        4209            mov     a,r2
11BF 9464      4210            subb    a,#0x64
11C1 EB        4211            mov     a,r3
11C2 6480      4212            xrl     a,#0x80
11C4 9480      4213            subb    a,#0x80
11C6 4000      4214            jc      L031020?
11C8           4215   ;        main.c:958: waitms(25);
11C8 900019    4216            mov     dptr,#0x0019
11CB 120000    4217            lcall   _waitms
11CE           4218   ;        main.c:959: servo_arm = i_loo;
11CE 905360    4219            mov     dptr,#_i_loo
11D1 E0        4220            movx    a,@dptr
11D2 FA        4221            mov     r2,a
11D3 A3        4222            inc     dptr
11D4 E0        4223            movx    a,@dptr
11D5 FB        4224            mov     r3,a
11D6 905120    4225            mov     dptr,#_servo_arm
11D9 EA        4226            mov     a,r2
11DA F0        4227            movx    @dptr,a
11DB           4228   ;        main.c:957: for(i_loo = 240; i_loo >= 100; i_loo-=10){
11DB EA        4229            mov     a,r2
11DC 24F6      4230            add     a,#0xf6
11DE FA        4231            mov     r2,a
11DF EB        4232            mov     a,r3
11E0 34FF      4233            addc    a,#0xff
11E2 FB        4234            mov     r3,a
11E3 905360    4235            mov     dptr,#_i_loo
11E6 EA        4236            mov     a,r2
11E7 F0        4237            movx    @dptr,a
11E8 A3        4238            inc     dptr
11E9 EB        4239            mov     a,r3
11EA F0        4240            movx    @dptr,a
11EB 8000      4241            sjmp    L031017?
11ED           4242   L031020?:
11ED           4243   ;        main.c:961: Magnet = 1; 
11ED D295      4244            setb    _P1_5
11EF           4245   ;        main.c:962: waitms(500);
11EF 9001F4    4246            mov     dptr,#0x01F4
11F2 120000    4247            lcall   _waitms
11F5           4248   ;        main.c:963: for(i_loo = 200; i_loo >= 90; i_loo-=10){
11F5 905360    4249            mov     dptr,#_i_loo
11F8 74C8      4250            mov     a,#0xC8
11FA F0        4251            movx    @dptr,a
11FB E4        4252            clr     a
11FC A3        4253            inc     dptr
11FD F0        4254            movx    @dptr,a
11FE           4255   L031021?:
11FE 905360    4256            mov     dptr,#_i_loo
1201 E0        4257            movx    a,@dptr
1202 FA        4258            mov     r2,a
1203 A3        4259            inc     dptr
1204 E0        4260            movx    a,@dptr
1205 FB        4261            mov     r3,a
1206 C3        4262            clr     c
1207 EA        4263            mov     a,r2
1208 945A      4264            subb    a,#0x5A
120A EB        4265            mov     a,r3
120B 6480      4266            xrl     a,#0x80
120D 9480      4267            subb    a,#0x80
120F 4000      4268            jc      L031024?
1211           4269   ;        main.c:964: waitms(25);
1211 900019    4270            mov     dptr,#0x0019
1214 120000    4271            lcall   _waitms
1217           4272   ;        main.c:965: servo_base = i_loo;
1217 905360    4273            mov     dptr,#_i_loo
121A E0        4274            movx    a,@dptr
121B FA        4275            mov     r2,a
121C A3        4276            inc     dptr
121D E0        4277            movx    a,@dptr
121E FB        4278            mov     r3,a
121F 905160    4279            mov     dptr,#_servo_base
1222 EA        4280            mov     a,r2
1223 F0        4281            movx    @dptr,a
1224           4282   ;        main.c:966: Magnet = 1; 
1224 D295      4283            setb    _P1_5
1226           4284   ;        main.c:963: for(i_loo = 200; i_loo >= 90; i_loo-=10){
1226 EA        4285            mov     a,r2
1227 24F6      4286            add     a,#0xf6
1229 FA        4287            mov     r2,a
122A EB        4288            mov     a,r3
122B 34FF      4289            addc    a,#0xff
122D FB        4290            mov     r3,a
122E 905360    4291            mov     dptr,#_i_loo
1231 EA        4292            mov     a,r2
1232 F0        4293            movx    @dptr,a
1233 A3        4294            inc     dptr
1234 EB        4295            mov     a,r3
1235 F0        4296            movx    @dptr,a
1236 8000      4297            sjmp    L031021?
1238           4298   L031024?:
1238           4299   ;        main.c:968: Magnet = 1; 
1238 D295      4300            setb    _P1_5
123A           4301   ;        main.c:969: waitms(500);
123A 9001F4    4302            mov     dptr,#0x01F4
123D 120000    4303            lcall   _waitms
1240           4304   ;        main.c:970: Magnet = 0;
1240 C295      4305            clr     _P1_5
1242           4306   ;        main.c:971: waitms(500);
1242 9001F4    4307            mov     dptr,#0x01F4
1245 120000    4308            lcall   _waitms
1248           4309   ;        main.c:972: for (i_loo = 100; i_loo >=50 ; i_loo-=10){
1248 905360    4310            mov     dptr,#_i_loo
124B 7464      4311            mov     a,#0x64
124D F0        4312            movx    @dptr,a
124E E4        4313            clr     a
124F A3        4314            inc     dptr
1250 F0        4315            movx    @dptr,a
1251           4316   L031025?:
1251 905360    4317            mov     dptr,#_i_loo
1254 E0        4318            movx    a,@dptr
1255 FA        4319            mov     r2,a
1256 A3        4320            inc     dptr
1257 E0        4321            movx    a,@dptr
1258 FB        4322            mov     r3,a
1259 C3        4323            clr     c
125A EA        4324            mov     a,r2
125B 9432      4325            subb    a,#0x32
125D EB        4326            mov     a,r3
125E 6480      4327            xrl     a,#0x80
1260 9480      4328            subb    a,#0x80
1262 4000      4329            jc      L031028?
1264           4330   ;        main.c:973: servo_arm = i_loo; 
1264 905120    4331            mov     dptr,#_servo_arm
1267 EA        4332            mov     a,r2
1268 F0        4333            movx    @dptr,a
1269           4334   ;        main.c:974: waitms(25);
1269 900019    4335            mov     dptr,#0x0019
126C 120000    4336            lcall   _waitms
126F           4337   ;        main.c:972: for (i_loo = 100; i_loo >=50 ; i_loo-=10){
126F 905360    4338            mov     dptr,#_i_loo
1272 E0        4339            movx    a,@dptr
1273 FA        4340            mov     r2,a
1274 A3        4341            inc     dptr
1275 E0        4342            movx    a,@dptr
1276 FB        4343            mov     r3,a
1277 EA        4344            mov     a,r2
1278 24F6      4345            add     a,#0xf6
127A FA        4346            mov     r2,a
127B EB        4347            mov     a,r3
127C 34FF      4348            addc    a,#0xff
127E FB        4349            mov     r3,a
127F 905360    4350            mov     dptr,#_i_loo
1282 EA        4351            mov     a,r2
1283 F0        4352            movx    @dptr,a
1284 A3        4353            inc     dptr
1285 EB        4354            mov     a,r3
1286 F0        4355            movx    @dptr,a
1287 8000      4356            sjmp    L031025?
1289           4357   L031028?:
1289           4358   ;        main.c:976: waitms(500);
1289 9001F4    4359            mov     dptr,#0x01F4
128C 120000    4360            lcall   _waitms
128F           4361   ;        main.c:977: for (i_loo = 90; i_loo >= 50; i_loo-=10){
128F 905360    4362            mov     dptr,#_i_loo
1292 745A      4363            mov     a,#0x5A
1294 F0        4364            movx    @dptr,a
1295 E4        4365            clr     a
1296 A3        4366            inc     dptr
1297 F0        4367            movx    @dptr,a
1298           4368   L031029?:
1298 905360    4369            mov     dptr,#_i_loo
129B E0        4370            movx    a,@dptr
129C FA        4371            mov     r2,a
129D A3        4372            inc     dptr
129E E0        4373            movx    a,@dptr
129F FB        4374            mov     r3,a
12A0 C3        4375            clr     c
12A1 EA        4376            mov     a,r2
12A2 9432      4377            subb    a,#0x32
12A4 EB        4378            mov     a,r3
12A5 6480      4379            xrl     a,#0x80
12A7 9480      4380            subb    a,#0x80
12A9 4000      4381            jc      L031032?
12AB           4382   ;        main.c:978: servo_base = i_loo; 
12AB 905160    4383            mov     dptr,#_servo_base
12AE EA        4384            mov     a,r2
12AF F0        4385            movx    @dptr,a
12B0           4386   ;        main.c:979: waitms(25);
12B0 900019    4387            mov     dptr,#0x0019
12B3 120000    4388            lcall   _waitms
12B6           4389   ;        main.c:977: for (i_loo = 90; i_loo >= 50; i_loo-=10){
12B6 905360    4390            mov     dptr,#_i_loo
12B9 E0        4391            movx    a,@dptr
12BA FA        4392            mov     r2,a
12BB A3        4393            inc     dptr
12BC E0        4394            movx    a,@dptr
12BD FB        4395            mov     r3,a
12BE EA        4396            mov     a,r2
12BF 24F6      4397            add     a,#0xf6
12C1 FA        4398            mov     r2,a
12C2 EB        4399            mov     a,r3
12C3 34FF      4400            addc    a,#0xff
12C5 FB        4401            mov     r3,a
12C6 905360    4402            mov     dptr,#_i_loo
12C9 EA        4403            mov     a,r2
12CA F0        4404            movx    @dptr,a
12CB A3        4405            inc     dptr
12CC EB        4406            mov     a,r3
12CD F0        4407            movx    @dptr,a
12CE 8000      4408            sjmp    L031029?
12D0           4409   L031032?:
12D0           4410   ;        main.c:981: return;
12D0 22        4411            ret
12D1           4412   ;------------------------------------------------------------
12D1           4413   ;Allocation info for local variables in function 'servo_push'
12D1           4414   ;------------------------------------------------------------
12D1           4415   ;------------------------------------------------------------
12D1           4416   ;        main.c:984: void servo_push(void)
12D1           4417   ;        -----------------------------------------
12D1           4418   ;         function servo_push
12D1           4419   ;        -----------------------------------------
12D1           4420   _servo_push:
12D1           4421   ;        main.c:986: servo_arm = 50;
12D1 905120    4422            mov     dptr,#_servo_arm
12D4 7432      4423            mov     a,#0x32
12D6 F0        4424            movx    @dptr,a
12D7           4425   ;        main.c:987: servo_base = 50;
12D7 905160    4426            mov     dptr,#_servo_base
12DA 7432      4427            mov     a,#0x32
12DC F0        4428            movx    @dptr,a
12DD           4429   ;        main.c:988: waitms(500);
12DD 9001F4    4430            mov     dptr,#0x01F4
12E0 120000    4431            lcall   _waitms
12E3           4432   ;        main.c:989: for (i_loo=50; i_loo <= 130; i_loo+=10)
12E3 905360    4433            mov     dptr,#_i_loo
12E6 7432      4434            mov     a,#0x32
12E8 F0        4435            movx    @dptr,a
12E9 E4        4436            clr     a
12EA A3        4437            inc     dptr
12EB F0        4438            movx    @dptr,a
12EC           4439   L032001?:
12EC 905360    4440            mov     dptr,#_i_loo
12EF E0        4441            movx    a,@dptr
12F0 FA        4442            mov     r2,a
12F1 A3        4443            inc     dptr
12F2 E0        4444            movx    a,@dptr
12F3 FB        4445            mov     r3,a
12F4 C3        4446            clr     c
12F5 7482      4447            mov     a,#0x82
12F7 9A        4448            subb    a,r2
12F8 E4        4449            clr     a
12F9 6480      4450            xrl     a,#0x80
12FB 8BF0      4451            mov     b,r3
12FD 63F080    4452            xrl     b,#0x80
1300 95F0      4453            subb    a,b
1302 4000      4454            jc      L032004?
1304           4455   ;        main.c:991: servo_base = i_loo; 
1304 905160    4456            mov     dptr,#_servo_base
1307 EA        4457            mov     a,r2
1308 F0        4458            movx    @dptr,a
1309           4459   ;        main.c:992: waitms(25);
1309 900019    4460            mov     dptr,#0x0019
130C 120000    4461            lcall   _waitms
130F           4462   ;        main.c:989: for (i_loo=50; i_loo <= 130; i_loo+=10)
130F 905360    4463            mov     dptr,#_i_loo
1312 E0        4464            movx    a,@dptr
1313 FA        4465            mov     r2,a
1314 A3        4466            inc     dptr
1315 E0        4467            movx    a,@dptr
1316 FB        4468            mov     r3,a
1317 905360    4469            mov     dptr,#_i_loo
131A 740A      4470            mov     a,#0x0A
131C 2A        4471            add     a,r2
131D F0        4472            movx    @dptr,a
131E E4        4473            clr     a
131F 3B        4474            addc    a,r3
1320 A3        4475            inc     dptr
1321 F0        4476            movx    @dptr,a
1322 8000      4477            sjmp    L032001?
1324           4478   L032004?:
1324           4479   ;        main.c:994: waitms(200);
1324 9000C8    4480            mov     dptr,#0x00C8
1327 120000    4481            lcall   _waitms
132A           4482   ;        main.c:995: for (i_loo=50; i_loo <= 130; i_loo+=10)
132A 905360    4483            mov     dptr,#_i_loo
132D 7432      4484            mov     a,#0x32
132F F0        4485            movx    @dptr,a
1330 E4        4486            clr     a
1331 A3        4487            inc     dptr
1332 F0        4488            movx    @dptr,a
1333           4489   L032005?:
1333 905360    4490            mov     dptr,#_i_loo
1336 E0        4491            movx    a,@dptr
1337 FA        4492            mov     r2,a
1338 A3        4493            inc     dptr
1339 E0        4494            movx    a,@dptr
133A FB        4495            mov     r3,a
133B C3        4496            clr     c
133C 7482      4497            mov     a,#0x82
133E 9A        4498            subb    a,r2
133F E4        4499            clr     a
1340 6480      4500            xrl     a,#0x80
1342 8BF0      4501            mov     b,r3
1344 63F080    4502            xrl     b,#0x80
1347 95F0      4503            subb    a,b
1349 4000      4504            jc      L032008?
134B           4505   ;        main.c:997: servo_arm = i_loo; 
134B 905120    4506            mov     dptr,#_servo_arm
134E EA        4507            mov     a,r2
134F F0        4508            movx    @dptr,a
1350           4509   ;        main.c:998: waitms(25);
1350 900019    4510            mov     dptr,#0x0019
1353 120000    4511            lcall   _waitms
1356           4512   ;        main.c:995: for (i_loo=50; i_loo <= 130; i_loo+=10)
1356 905360    4513            mov     dptr,#_i_loo
1359 E0        4514            movx    a,@dptr
135A FA        4515            mov     r2,a
135B A3        4516            inc     dptr
135C E0        4517            movx    a,@dptr
135D FB        4518            mov     r3,a
135E 905360    4519            mov     dptr,#_i_loo
1361 740A      4520            mov     a,#0x0A
1363 2A        4521            add     a,r2
1364 F0        4522            movx    @dptr,a
1365 E4        4523            clr     a
1366 3B        4524            addc    a,r3
1367 A3        4525            inc     dptr
1368 F0        4526            movx    @dptr,a
1369 8000      4527            sjmp    L032005?
136B           4528   L032008?:
136B           4529   ;        main.c:1000: waitms(200);
136B 9000C8    4530            mov     dptr,#0x00C8
136E 120000    4531            lcall   _waitms
1371           4532   ;        main.c:1001: for (i_loo=130; i_loo <= 250; i_loo+=10)
1371 905360    4533            mov     dptr,#_i_loo
1374 7482      4534            mov     a,#0x82
1376 F0        4535            movx    @dptr,a
1377 E4        4536            clr     a
1378 A3        4537            inc     dptr
1379 F0        4538            movx    @dptr,a
137A           4539   L032009?:
137A 905360    4540            mov     dptr,#_i_loo
137D E0        4541            movx    a,@dptr
137E FA        4542            mov     r2,a
137F A3        4543            inc     dptr
1380 E0        4544            movx    a,@dptr
1381 FB        4545            mov     r3,a
1382 C3        4546            clr     c
1383 74FA      4547            mov     a,#0xFA
1385 9A        4548            subb    a,r2
1386 E4        4549            clr     a
1387 6480      4550            xrl     a,#0x80
1389 8BF0      4551            mov     b,r3
138B 63F080    4552            xrl     b,#0x80
138E 95F0      4553            subb    a,b
1390 4000      4554            jc      L032012?
1392           4555   ;        main.c:1003: servo_base = i_loo; 
1392 905160    4556            mov     dptr,#_servo_base
1395 EA        4557            mov     a,r2
1396 F0        4558            movx    @dptr,a
1397           4559   ;        main.c:1004: waitms(25);
1397 900019    4560            mov     dptr,#0x0019
139A 120000    4561            lcall   _waitms
139D           4562   ;        main.c:1001: for (i_loo=130; i_loo <= 250; i_loo+=10)
139D 905360    4563            mov     dptr,#_i_loo
13A0 E0        4564            movx    a,@dptr
13A1 FA        4565            mov     r2,a
13A2 A3        4566            inc     dptr
13A3 E0        4567            movx    a,@dptr
13A4 FB        4568            mov     r3,a
13A5 905360    4569            mov     dptr,#_i_loo
13A8 740A      4570            mov     a,#0x0A
13AA 2A        4571            add     a,r2
13AB F0        4572            movx    @dptr,a
13AC E4        4573            clr     a
13AD 3B        4574            addc    a,r3
13AE A3        4575            inc     dptr
13AF F0        4576            movx    @dptr,a
13B0 8000      4577            sjmp    L032009?
13B2           4578   L032012?:
13B2           4579   ;        main.c:1006: waitms(200);
13B2 9000C8    4580            mov     dptr,#0x00C8
13B5 120000    4581            lcall   _waitms
13B8           4582   ;        main.c:1007: for (i_loo=250; i_loo >= 150; i_loo-=10)
13B8 905360    4583            mov     dptr,#_i_loo
13BB 74FA      4584            mov     a,#0xFA
13BD F0        4585            movx    @dptr,a
13BE E4        4586            clr     a
13BF A3        4587            inc     dptr
13C0 F0        4588            movx    @dptr,a
13C1           4589   L032013?:
13C1 905360    4590            mov     dptr,#_i_loo
13C4 E0        4591            movx    a,@dptr
13C5 FA        4592            mov     r2,a
13C6 A3        4593            inc     dptr
13C7 E0        4594            movx    a,@dptr
13C8 FB        4595            mov     r3,a
13C9 C3        4596            clr     c
13CA EA        4597            mov     a,r2
13CB 9496      4598            subb    a,#0x96
13CD EB        4599            mov     a,r3
13CE 6480      4600            xrl     a,#0x80
13D0 9480      4601            subb    a,#0x80
13D2 4000      4602            jc      L032016?
13D4           4603   ;        main.c:1009: servo_base = i_loo; 
13D4 905160    4604            mov     dptr,#_servo_base
13D7 EA        4605            mov     a,r2
13D8 F0        4606            movx    @dptr,a
13D9           4607   ;        main.c:1010: waitms(25);
13D9 900019    4608            mov     dptr,#0x0019
13DC 120000    4609            lcall   _waitms
13DF           4610   ;        main.c:1007: for (i_loo=250; i_loo >= 150; i_loo-=10)
13DF 905360    4611            mov     dptr,#_i_loo
13E2 E0        4612            movx    a,@dptr
13E3 FA        4613            mov     r2,a
13E4 A3        4614            inc     dptr
13E5 E0        4615            movx    a,@dptr
13E6 FB        4616            mov     r3,a
13E7 EA        4617            mov     a,r2
13E8 24F6      4618            add     a,#0xf6
13EA FA        4619            mov     r2,a
13EB EB        4620            mov     a,r3
13EC 34FF      4621            addc    a,#0xff
13EE FB        4622            mov     r3,a
13EF 905360    4623            mov     dptr,#_i_loo
13F2 EA        4624            mov     a,r2
13F3 F0        4625            movx    @dptr,a
13F4 A3        4626            inc     dptr
13F5 EB        4627            mov     a,r3
13F6 F0        4628            movx    @dptr,a
13F7 8000      4629            sjmp    L032013?
13F9           4630   L032016?:
13F9           4631   ;        main.c:1012: waitms(200);
13F9 9000C8    4632            mov     dptr,#0x00C8
13FC 120000    4633            lcall   _waitms
13FF           4634   ;        main.c:1013: for (i_loo=130; i_loo >= 50; i_loo-=10)
13FF 905360    4635            mov     dptr,#_i_loo
1402 7482      4636            mov     a,#0x82
1404 F0        4637            movx    @dptr,a
1405 E4        4638            clr     a
1406 A3        4639            inc     dptr
1407 F0        4640            movx    @dptr,a
1408           4641   L032017?:
1408 905360    4642            mov     dptr,#_i_loo
140B E0        4643            movx    a,@dptr
140C FA        4644            mov     r2,a
140D A3        4645            inc     dptr
140E E0        4646            movx    a,@dptr
140F FB        4647            mov     r3,a
1410 C3        4648            clr     c
1411 EA        4649            mov     a,r2
1412 9432      4650            subb    a,#0x32
1414 EB        4651            mov     a,r3
1415 6480      4652            xrl     a,#0x80
1417 9480      4653            subb    a,#0x80
1419 4000      4654            jc      L032020?
141B           4655   ;        main.c:1015: servo_arm = i_loo; 
141B 905120    4656            mov     dptr,#_servo_arm
141E EA        4657            mov     a,r2
141F F0        4658            movx    @dptr,a
1420           4659   ;        main.c:1016: waitms(25);
1420 900019    4660            mov     dptr,#0x0019
1423 120000    4661            lcall   _waitms
1426           4662   ;        main.c:1013: for (i_loo=130; i_loo >= 50; i_loo-=10)
1426 905360    4663            mov     dptr,#_i_loo
1429 E0        4664            movx    a,@dptr
142A FA        4665            mov     r2,a
142B A3        4666            inc     dptr
142C E0        4667            movx    a,@dptr
142D FB        4668            mov     r3,a
142E EA        4669            mov     a,r2
142F 24F6      4670            add     a,#0xf6
1431 FA        4671            mov     r2,a
1432 EB        4672            mov     a,r3
1433 34FF      4673            addc    a,#0xff
1435 FB        4674            mov     r3,a
1436 905360    4675            mov     dptr,#_i_loo
1439 EA        4676            mov     a,r2
143A F0        4677            movx    @dptr,a
143B A3        4678            inc     dptr
143C EB        4679            mov     a,r3
143D F0        4680            movx    @dptr,a
143E 8000      4681            sjmp    L032017?
1440           4682   L032020?:
1440           4683   ;        main.c:1018: waitms(200);
1440 9000C8    4684            mov     dptr,#0x00C8
1443 120000    4685            lcall   _waitms
1446           4686   ;        main.c:1019: for (i_loo=150; i_loo >= 50; i_loo-=10)
1446 905360    4687            mov     dptr,#_i_loo
1449 7496      4688            mov     a,#0x96
144B F0        4689            movx    @dptr,a
144C E4        4690            clr     a
144D A3        4691            inc     dptr
144E F0        4692            movx    @dptr,a
144F           4693   L032021?:
144F 905360    4694            mov     dptr,#_i_loo
1452 E0        4695            movx    a,@dptr
1453 FA        4696            mov     r2,a
1454 A3        4697            inc     dptr
1455 E0        4698            movx    a,@dptr
1456 FB        4699            mov     r3,a
1457 C3        4700            clr     c
1458 EA        4701            mov     a,r2
1459 9432      4702            subb    a,#0x32
145B EB        4703            mov     a,r3
145C 6480      4704            xrl     a,#0x80
145E 9480      4705            subb    a,#0x80
1460 4000      4706            jc      L032024?
1462           4707   ;        main.c:1021: servo_base = i_loo; 
1462 905160    4708            mov     dptr,#_servo_base
1465 EA        4709            mov     a,r2
1466 F0        4710            movx    @dptr,a
1467           4711   ;        main.c:1022: waitms(25);
1467 900019    4712            mov     dptr,#0x0019
146A 120000    4713            lcall   _waitms
146D           4714   ;        main.c:1019: for (i_loo=150; i_loo >= 50; i_loo-=10)
146D 905360    4715            mov     dptr,#_i_loo
1470 E0        4716            movx    a,@dptr
1471 FA        4717            mov     r2,a
1472 A3        4718            inc     dptr
1473 E0        4719            movx    a,@dptr
1474 FB        4720            mov     r3,a
1475 EA        4721            mov     a,r2
1476 24F6      4722            add     a,#0xf6
1478 FA        4723            mov     r2,a
1479 EB        4724            mov     a,r3
147A 34FF      4725            addc    a,#0xff
147C FB        4726            mov     r3,a
147D 905360    4727            mov     dptr,#_i_loo
1480 EA        4728            mov     a,r2
1481 F0        4729            movx    @dptr,a
1482 A3        4730            inc     dptr
1483 EB        4731            mov     a,r3
1484 F0        4732            movx    @dptr,a
1485 8000      4733            sjmp    L032021?
1487           4734   L032024?:
1487           4735   ;        main.c:1024: waitms(200);
1487 9000C8    4736            mov     dptr,#0x00C8
148A           4737   ;        main.c:1025: return; 
148A 020000    4738            ljmp    _waitms
148D           4739   ;------------------------------------------------------------
148D           4740   ;Allocation info for local variables in function 'Move_forward_ms'
148D           4741   ;------------------------------------------------------------
148D           4742   ;ms                        Allocated to registers r2 r3 
148D           4743   ;------------------------------------------------------------
148D           4744   ;        main.c:1028: void Move_forward_ms(int ms){
148D           4745   ;        -----------------------------------------
148D           4746   ;         function Move_forward_ms
148D           4747   ;        -----------------------------------------
148D           4748   _Move_forward_ms:
148D AA82      4749            mov     r2,dpl
148F AB83      4750            mov     r3,dph
1491           4751   ;        main.c:1030: L_motor_dir = 0;
1491 9051E0    4752            mov     dptr,#_L_motor_dir
1494           4753   ;        main.c:1031: R_motor_dir = 0;
1494 E4        4754            clr     a
1495 F0        4755            movx    @dptr,a
1496 9051A0    4756            mov     dptr,#_R_motor_dir
1499 F0        4757            movx    @dptr,a
149A           4758   ;        main.c:1033: pwm_left = 50;
149A 905260    4759            mov     dptr,#_pwm_left
149D 7432      4760            mov     a,#0x32
149F F0        4761            movx    @dptr,a
14A0           4762   ;        main.c:1034: pwm_right = 50;
14A0 905220    4763            mov     dptr,#_pwm_right
14A3 7432      4764            mov     a,#0x32
14A5 F0        4765            movx    @dptr,a
14A6           4766   ;        main.c:1036: waitms(ms);
14A6 8A82      4767            mov     dpl,r2
14A8 8B83      4768            mov     dph,r3
14AA 120000    4769            lcall   _waitms
14AD           4770   ;        main.c:1038: L_motor_dir = 0;
14AD 9051E0    4771            mov     dptr,#_L_motor_dir
14B0           4772   ;        main.c:1039: R_motor_dir = 0;
14B0           4773   ;        main.c:1040: pwm_left = 0;
14B0           4774   ;        main.c:1041: pwm_right = 0;
14B0 E4        4775            clr     a
14B1 F0        4776            movx    @dptr,a
14B2 9051A0    4777            mov     dptr,#_R_motor_dir
14B5 F0        4778            movx    @dptr,a
14B6 905260    4779            mov     dptr,#_pwm_left
14B9 F0        4780            movx    @dptr,a
14BA 905220    4781            mov     dptr,#_pwm_right
14BD F0        4782            movx    @dptr,a
14BE           4783   ;        main.c:1042: return;
14BE 22        4784            ret
14BF           4785   ;------------------------------------------------------------
14BF           4786   ;Allocation info for local variables in function 'servo_moveaway'
14BF           4787   ;------------------------------------------------------------
14BF           4788   ;------------------------------------------------------------
14BF           4789   ;        main.c:1045: void servo_moveaway(void)
14BF           4790   ;        -----------------------------------------
14BF           4791   ;         function servo_moveaway
14BF           4792   ;        -----------------------------------------
14BF           4793   _servo_moveaway:
14BF           4794   ;        main.c:1046: {  pwm_left = 0;
14BF 905260    4795            mov     dptr,#_pwm_left
14C2           4796   ;        main.c:1047: pwm_right = 0;
14C2 E4        4797            clr     a
14C3 F0        4798            movx    @dptr,a
14C4 905220    4799            mov     dptr,#_pwm_right
14C7 F0        4800            movx    @dptr,a
14C8           4801   ;        main.c:1048: servo_push();
14C8 120000    4802            lcall   _servo_push
14CB           4803   ;        main.c:1049: waitms(100);
14CB 900064    4804            mov     dptr,#0x0064
14CE 120000    4805            lcall   _waitms
14D1           4806   ;        main.c:1050: Move_forward_ms(500);
14D1 9001F4    4807            mov     dptr,#0x01F4
14D4 120000    4808            lcall   _Move_forward_ms
14D7           4809   ;        main.c:1051: servo_push();
14D7           4810   ;        main.c:1052: return; 
14D7 020000    4811            ljmp    _servo_push
14DA           4812   ;------------------------------------------------------------
14DA           4813   ;Allocation info for local variables in function 'check_bound'
14DA           4814   ;------------------------------------------------------------
14DA           4815   ;d2                        Allocated with name '_check_bound_PARM_2'
14DA           4816   ;d1                        Allocated to registers r2 r3 
14DA           4817   ;------------------------------------------------------------
14DA           4818   ;        main.c:1055: int check_bound(int d1, int d2){
14DA           4819   ;        -----------------------------------------
14DA           4820   ;         function check_bound
14DA           4821   ;        -----------------------------------------
14DA           4822   _check_bound:
14DA AA82      4823            mov     r2,dpl
14DC AB83      4824            mov     r3,dph
14DE           4825   ;        main.c:1056: if(d1>10000||d2>10000)     return 1;
14DE C3        4826            clr     c
14DF 7410      4827            mov     a,#0x10
14E1 9A        4828            subb    a,r2
14E2 74A7      4829            mov     a,#(0x27 ^ 0x80)
14E4 8BF0      4830            mov     b,r3
14E6 63F080    4831            xrl     b,#0x80
14E9 95F0      4832            subb    a,b
14EB 4000      4833            jc      L035001?
14ED 7410      4834            mov     a,#0x10
14EF 9590      4835            subb    a,_check_bound_PARM_2
14F1 74A7      4836            mov     a,#(0x27 ^ 0x80)
14F3 8591F0    4837            mov     b,(_check_bound_PARM_2 + 1)
14F6 63F080    4838            xrl     b,#0x80
14F9 95F0      4839            subb    a,b
14FB 5000      4840            jnc     L035002?
14FD           4841   L035001?:
14FD 900001    4842            mov     dptr,#0x0001
1500           4843   ;        main.c:1057: else return 0;
1500 22        4844            ret
1501           4845   L035002?:
1501 900000    4846            mov     dptr,#0x0000
1504 22        4847            ret
1505           4848   ;------------------------------------------------------------
1505           4849   ;Allocation info for local variables in function 'Init_all'
1505           4850   ;------------------------------------------------------------
1505           4851   ;------------------------------------------------------------
1505           4852   ;        main.c:1060: void Init_all(){
1505           4853   ;        -----------------------------------------
1505           4854   ;         function Init_all
1505           4855   ;        -----------------------------------------
1505           4856   _Init_all:
1505           4857   ;        main.c:1062: Set_Pin_Output(0x24);
1505 758224    4858            mov     dpl,#0x24
1508 120000    4859            lcall   _Set_Pin_Output
150B           4860   ;        main.c:1063: Set_Pin_Output(0x23);
150B 758223    4861            mov     dpl,#0x23
150E 120000    4862            lcall   _Set_Pin_Output
1511           4863   ;        main.c:1064: Set_Pin_Output(0x22);
1511 758222    4864            mov     dpl,#0x22
1514 120000    4865            lcall   _Set_Pin_Output
1517           4866   ;        main.c:1065: Set_Pin_Output(0x21);
1517 758221    4867            mov     dpl,#0x21
151A 120000    4868            lcall   _Set_Pin_Output
151D           4869   ;        main.c:1066: Set_Pin_Output(0x17);
151D 758217    4870            mov     dpl,#0x17
1520 120000    4871            lcall   _Set_Pin_Output
1523           4872   ;        main.c:1067: Set_Pin_Output(0x16);
1523 758216    4873            mov     dpl,#0x16
1526 120000    4874            lcall   _Set_Pin_Output
1529           4875   ;        main.c:1068: Set_Pin_Output(0x15);
1529 758215    4876            mov     dpl,#0x15
152C 120000    4877            lcall   _Set_Pin_Output
152F           4878   ;        main.c:1069: Set_Pin_Output(0x10); // CS
152F 758210    4879            mov     dpl,#0x10
1532 120000    4880            lcall   _Set_Pin_Output
1535           4881   ;        main.c:1071: Set_Pin_Input(0x30);
1535 758230    4882            mov     dpl,#0x30
1538 120000    4883            lcall   _Set_Pin_Input
153B           4884   ;        main.c:1072: Set_Pin_Output(0x25); // CLK for Load
153B 758225    4885            mov     dpl,#0x25
153E 120000    4886            lcall   _Set_Pin_Output
1541           4887   ;        main.c:1073: Set_Pin_Input(0x26);
1541 758226    4888            mov     dpl,#0x26
1544 120000    4889            lcall   _Set_Pin_Input
1547           4890   ;        main.c:1075: Set_Pin_Input(0x31);   //ECHO pin
1547 758231    4891            mov     dpl,#0x31
154A 120000    4892            lcall   _Set_Pin_Input
154D           4893   ;        main.c:1076: Set_Pin_Output(0x00);  // TRIGGER pin
154D 758200    4894            mov     dpl,#0x00
1550 120000    4895            lcall   _Set_Pin_Output
1553           4896   ;        main.c:1078: InitPinADC(1,3);
1553 75E003    4897            mov     _InitPinADC_PARM_2,#0x03
1556 758201    4898            mov     dpl,#0x01
1559 120000    4899            lcall   _InitPinADC
155C           4900   ;        main.c:1079: InitPinADC(1,4);
155C 75E004    4901            mov     _InitPinADC_PARM_2,#0x04
155F 758201    4902            mov     dpl,#0x01
1562 120000    4903            lcall   _InitPinADC
1565           4904   ;        main.c:1080: InitADC();
1565 120000    4905            lcall   _InitADC
1568           4906   ;        main.c:1082: TMOD&=0b_1111_0000; 
1568 5389F0    4907            anl     _TMOD,#0xF0
156B           4908   ;        main.c:1083: TMOD|=0b_0000_0001; 
156B 438901    4909            orl     _TMOD,#0x01
156E           4910   ;        main.c:1084: TR0=0; 
156E C28C      4911            clr     _TR0
1570           4912   ;        main.c:1086: Servo_arm=0;
1570 C296      4913            clr     _P1_6
1572           4914   ;        main.c:1087: Servo_base=0;
1572 C297      4915            clr     _P1_7
1574           4916   ;        main.c:1088: Magnet = 0;
1574 C295      4917            clr     _P1_5
1576           4918   ;        main.c:1089: PD_SCK = 0;
1576 C2A5      4919            clr     _P2_5
1578           4920   ;        main.c:1090: return;
1578 22        4921            ret
1579           4922   ;------------------------------------------------------------
1579           4923   ;Allocation info for local variables in function 'Move_back_ms'
1579           4924   ;------------------------------------------------------------
1579           4925   ;ms                        Allocated to registers r2 r3 
1579           4926   ;------------------------------------------------------------
1579           4927   ;        main.c:1093: void Move_back_ms(int ms){
1579           4928   ;        -----------------------------------------
1579           4929   ;         function Move_back_ms
1579           4930   ;        -----------------------------------------
1579           4931   _Move_back_ms:
1579 AA82      4932            mov     r2,dpl
157B AB83      4933            mov     r3,dph
157D           4934   ;        main.c:1095: L_motor_dir = 1;
157D 9051E0    4935            mov     dptr,#_L_motor_dir
1580 7401      4936            mov     a,#0x01
1582 F0        4937            movx    @dptr,a
1583           4938   ;        main.c:1096: R_motor_dir = 1;
1583 9051A0    4939            mov     dptr,#_R_motor_dir
1586 7401      4940            mov     a,#0x01
1588 F0        4941            movx    @dptr,a
1589           4942   ;        main.c:1098: pwm_left = 80;
1589 905260    4943            mov     dptr,#_pwm_left
158C 7450      4944            mov     a,#0x50
158E F0        4945            movx    @dptr,a
158F           4946   ;        main.c:1099: pwm_right = 80*pwm_corr;
158F C002      4947            push    ar2
1591 C003      4948            push    ar3
1593 904F10    4949            mov     dptr,#_pwm_corr
1596 E0        4950            movx    a,@dptr
1597 C0E0      4951            push    acc
1599 A3        4952            inc     dptr
159A E0        4953            movx    a,@dptr
159B C0E0      4954            push    acc
159D A3        4955            inc     dptr
159E E0        4956            movx    a,@dptr
159F C0E0      4957            push    acc
15A1 A3        4958            inc     dptr
15A2 E0        4959            movx    a,@dptr
15A3 C0E0      4960            push    acc
15A5 900000    4961            mov     dptr,#0x0000
15A8 75F0A0    4962            mov     b,#0xA0
15AB 7442      4963            mov     a,#0x42
15AD 120000    4964            lcall   ___fsmul
15B0 AC82      4965            mov     r4,dpl
15B2 AD83      4966            mov     r5,dph
15B4 AEF0      4967            mov     r6,b
15B6 FF        4968            mov     r7,a
15B7 E581      4969            mov     a,sp
15B9 24FC      4970            add     a,#0xfc
15BB F581      4971            mov     sp,a
15BD 8C82      4972            mov     dpl,r4
15BF 8D83      4973            mov     dph,r5
15C1 8EF0      4974            mov     b,r6
15C3 EF        4975            mov     a,r7
15C4 120000    4976            lcall   ___fs2uchar
15C7 E582      4977            mov     a,dpl
15C9 D003      4978            pop     ar3
15CB D002      4979            pop     ar2
15CD 905220    4980            mov     dptr,#_pwm_right
15D0 F0        4981            movx    @dptr,a
15D1           4982   ;        main.c:1101: waitms(ms);
15D1 8A82      4983            mov     dpl,r2
15D3 8B83      4984            mov     dph,r3
15D5 120000    4985            lcall   _waitms
15D8           4986   ;        main.c:1103: L_motor_dir = 0;
15D8 9051E0    4987            mov     dptr,#_L_motor_dir
15DB           4988   ;        main.c:1104: R_motor_dir = 0;
15DB           4989   ;        main.c:1105: pwm_left = 0;
15DB           4990   ;        main.c:1106: pwm_right = 0;
15DB E4        4991            clr     a
15DC F0        4992            movx    @dptr,a
15DD 9051A0    4993            mov     dptr,#_R_motor_dir
15E0 F0        4994            movx    @dptr,a
15E1 905260    4995            mov     dptr,#_pwm_left
15E4 F0        4996            movx    @dptr,a
15E5 905220    4997            mov     dptr,#_pwm_right
15E8 F0        4998            movx    @dptr,a
15E9           4999   ;        main.c:1107: return;
15E9 22        5000            ret
15EA           5001   ;------------------------------------------------------------
15EA           5002   ;Allocation info for local variables in function 'Right_angle'
15EA           5003   ;------------------------------------------------------------
15EA           5004   ;angle                     Allocated to registers r2 r3 
15EA           5005   ;------------------------------------------------------------
15EA           5006   ;        main.c:1111: void Right_angle(int angle){
15EA           5007   ;        -----------------------------------------
15EA           5008   ;         function Right_angle
15EA           5009   ;        -----------------------------------------
15EA           5010   _Right_angle:
15EA AA82      5011            mov     r2,dpl
15EC AB83      5012            mov     r3,dph
15EE           5013   ;        main.c:1113: L_motor_dir = 1;
15EE 9051E0    5014            mov     dptr,#_L_motor_dir
15F1 7401      5015            mov     a,#0x01
15F3 F0        5016            movx    @dptr,a
15F4           5017   ;        main.c:1114: R_motor_dir = 0;
15F4 9051A0    5018            mov     dptr,#_R_motor_dir
15F7 E4        5019            clr     a
15F8 F0        5020            movx    @dptr,a
15F9           5021   ;        main.c:1115: pwm_left = 80;
15F9 905260    5022            mov     dptr,#_pwm_left
15FC 7450      5023            mov     a,#0x50
15FE F0        5024            movx    @dptr,a
15FF           5025   ;        main.c:1116: pwm_right = 80 * pwm_corr;
15FF C002      5026            push    ar2
1601 C003      5027            push    ar3
1603 904F10    5028            mov     dptr,#_pwm_corr
1606 E0        5029            movx    a,@dptr
1607 C0E0      5030            push    acc
1609 A3        5031            inc     dptr
160A E0        5032            movx    a,@dptr
160B C0E0      5033            push    acc
160D A3        5034            inc     dptr
160E E0        5035            movx    a,@dptr
160F C0E0      5036            push    acc
1611 A3        5037            inc     dptr
1612 E0        5038            movx    a,@dptr
1613 C0E0      5039            push    acc
1615 900000    5040            mov     dptr,#0x0000
1618 75F0A0    5041            mov     b,#0xA0
161B 7442      5042            mov     a,#0x42
161D 120000    5043            lcall   ___fsmul
1620 AC82      5044            mov     r4,dpl
1622 AD83      5045            mov     r5,dph
1624 AEF0      5046            mov     r6,b
1626 FF        5047            mov     r7,a
1627 E581      5048            mov     a,sp
1629 24FC      5049            add     a,#0xfc
162B F581      5050            mov     sp,a
162D 8C82      5051            mov     dpl,r4
162F 8D83      5052            mov     dph,r5
1631 8EF0      5053            mov     b,r6
1633 EF        5054            mov     a,r7
1634 120000    5055            lcall   ___fs2uchar
1637 E582      5056            mov     a,dpl
1639 D003      5057            pop     ar3
163B D002      5058            pop     ar2
163D 905220    5059            mov     dptr,#_pwm_right
1640 F0        5060            movx    @dptr,a
1641           5061   ;        main.c:1118: waitms(angle);
1641 8A82      5062            mov     dpl,r2
1643 8B83      5063            mov     dph,r3
1645 120000    5064            lcall   _waitms
1648           5065   ;        main.c:1120: L_motor_dir = 0;
1648 9051E0    5066            mov     dptr,#_L_motor_dir
164B           5067   ;        main.c:1121: R_motor_dir = 0;
164B           5068   ;        main.c:1122: pwm_left = 0;
164B           5069   ;        main.c:1123: pwm_right = 0;
164B E4        5070            clr     a
164C F0        5071            movx    @dptr,a
164D 9051A0    5072            mov     dptr,#_R_motor_dir
1650 F0        5073            movx    @dptr,a
1651 905260    5074            mov     dptr,#_pwm_left
1654 F0        5075            movx    @dptr,a
1655 905220    5076            mov     dptr,#_pwm_right
1658 F0        5077            movx    @dptr,a
1659           5078   ;        main.c:1124: return;
1659 22        5079            ret
165A           5080   ;------------------------------------------------------------
165A           5081   ;Allocation info for local variables in function 'Move_forward'
165A           5082   ;------------------------------------------------------------
165A           5083   ;------------------------------------------------------------
165A           5084   ;        main.c:1127: void Move_forward(){
165A           5085   ;        -----------------------------------------
165A           5086   ;         function Move_forward
165A           5087   ;        -----------------------------------------
165A           5088   _Move_forward:
165A           5089   ;        main.c:1129: L_motor_dir = 0;
165A 9051E0    5090            mov     dptr,#_L_motor_dir
165D           5091   ;        main.c:1130: R_motor_dir = 0;
165D E4        5092            clr     a
165E F0        5093            movx    @dptr,a
165F 9051A0    5094            mov     dptr,#_R_motor_dir
1662 F0        5095            movx    @dptr,a
1663           5096   ;        main.c:1131: pwm_left = 60;
1663 905260    5097            mov     dptr,#_pwm_left
1666 743C      5098            mov     a,#0x3C
1668 F0        5099            movx    @dptr,a
1669           5100   ;        main.c:1132: pwm_right = 60 * pwm_corr;
1669 904F10    5101            mov     dptr,#_pwm_corr
166C E0        5102            movx    a,@dptr
166D C0E0      5103            push    acc
166F A3        5104            inc     dptr
1670 E0        5105            movx    a,@dptr
1671 C0E0      5106            push    acc
1673 A3        5107            inc     dptr
1674 E0        5108            movx    a,@dptr
1675 C0E0      5109            push    acc
1677 A3        5110            inc     dptr
1678 E0        5111            movx    a,@dptr
1679 C0E0      5112            push    acc
167B 900000    5113            mov     dptr,#0x0000
167E 75F070    5114            mov     b,#0x70
1681 7442      5115            mov     a,#0x42
1683 120000    5116            lcall   ___fsmul
1686 AA82      5117            mov     r2,dpl
1688 AB83      5118            mov     r3,dph
168A ACF0      5119            mov     r4,b
168C FD        5120            mov     r5,a
168D E581      5121            mov     a,sp
168F 24FC      5122            add     a,#0xfc
1691 F581      5123            mov     sp,a
1693 8A82      5124            mov     dpl,r2
1695 8B83      5125            mov     dph,r3
1697 8CF0      5126            mov     b,r4
1699 ED        5127            mov     a,r5
169A 120000    5128            lcall   ___fs2uchar
169D E582      5129            mov     a,dpl
169F 905220    5130            mov     dptr,#_pwm_right
16A2 F0        5131            movx    @dptr,a
16A3           5132   ;        main.c:1133: return;
16A3 22        5133            ret
16A4           5134   ;------------------------------------------------------------
16A4           5135   ;Allocation info for local variables in function 'simple_rand'
16A4           5136   ;------------------------------------------------------------
16A4           5137   ;------------------------------------------------------------
16A4           5138   ;        main.c:1136: unsigned int simple_rand() {
16A4           5139   ;        -----------------------------------------
16A4           5140   ;         function simple_rand
16A4           5141   ;        -----------------------------------------
16A4           5142   _simple_rand:
16A4           5143   ;        main.c:1137: seed = (seed * 25173 + 13849) & 0xFFFF;  
16A4 904F50    5144            mov     dptr,#_seed
16A7 E0        5145            movx    a,@dptr
16A8 F500      5146            mov     __mulint_PARM_2,a
16AA A3        5147            inc     dptr
16AB E0        5148            movx    a,@dptr
16AC F501      5149            mov     (__mulint_PARM_2 + 1),a
16AE 906255    5150            mov     dptr,#0x6255
16B1 120000    5151            lcall   __mulint
16B4 E582      5152            mov     a,dpl
16B6 8583F0    5153            mov     b,dph
16B9 904F50    5154            mov     dptr,#_seed
16BC 2419      5155            add     a,#0x19
16BE F0        5156            movx    @dptr,a
16BF 7436      5157            mov     a,#0x36
16C1 35F0      5158            addc    a,b
16C3 A3        5159            inc     dptr
16C4 F0        5160            movx    @dptr,a
16C5           5161   ;        main.c:1138: return seed;     
16C5 904F50    5162            mov     dptr,#_seed
16C8 E0        5163            movx    a,@dptr
16C9 FA        5164            mov     r2,a
16CA A3        5165            inc     dptr
16CB E0        5166            movx    a,@dptr
16CC 8A82      5167            mov     dpl,r2
16CE F583      5168            mov     dph,a
16D0 22        5169            ret
16D1           5170   ;------------------------------------------------------------
16D1           5171   ;Allocation info for local variables in function 'get_random_90_250'
16D1           5172   ;------------------------------------------------------------
16D1           5173   ;------------------------------------------------------------
16D1           5174   ;        main.c:1141: unsigned int get_random_90_250() {
16D1           5175   ;        -----------------------------------------
16D1           5176   ;         function get_random_90_250
16D1           5177   ;        -----------------------------------------
16D1           5178   _get_random_90_250:
16D1           5179   ;        main.c:1142: return (simple_rand() % (250 - 85 + 1)) + 90;
16D1 120000    5180            lcall   _simple_rand
16D4 7500A6    5181            mov     __moduint_PARM_2,#0xA6
16D7 E4        5182            clr     a
16D8 F501      5183            mov     (__moduint_PARM_2 + 1),a
16DA 120000    5184            lcall   __moduint
16DD E582      5185            mov     a,dpl
16DF 8583F0    5186            mov     b,dph
16E2 245A      5187            add     a,#0x5A
16E4 F582      5188            mov     dpl,a
16E6 E4        5189            clr     a
16E7 35F0      5190            addc    a,b
16E9 F583      5191            mov     dph,a
16EB 22        5192            ret
16EC           5193   ;------------------------------------------------------------
16EC           5194   ;Allocation info for local variables in function 'Read_angle'
16EC           5195   ;------------------------------------------------------------
16EC           5196   ;mag_x                     Allocated with name '_Read_angle_mag_x_1_231'
16EC           5197   ;mag_y                     Allocated with name '_Read_angle_mag_y_1_231'
16EC           5198   ;sum_x                     Allocated with name '_Read_angle_sum_x_1_231'
16EC           5199   ;sum_y                     Allocated with name '_Read_angle_sum_y_1_231'
16EC           5200   ;angle                     Allocated with name '_Read_angle_angle_1_231'
16EC           5201   ;------------------------------------------------------------
16EC           5202   ;        main.c:1145: float Read_angle(void)
16EC           5203   ;        -----------------------------------------
16EC           5204   ;         function Read_angle
16EC           5205   ;        -----------------------------------------
16EC           5206   _Read_angle:
16EC           5207   ;        main.c:1152: sum_x = 0.0; sum_y = 0.0;
16EC 90D278    5208            mov     dptr,#_Read_angle_sum_x_1_231
16EF E4        5209            clr     a
16F0 F0        5210            movx    @dptr,a
16F1 A3        5211            inc     dptr
16F2 F0        5212            movx    @dptr,a
16F3 A3        5213            inc     dptr
16F4 F0        5214            movx    @dptr,a
16F5 A3        5215            inc     dptr
16F6 F0        5216            movx    @dptr,a
16F7 90D2C8    5217            mov     dptr,#_Read_angle_sum_y_1_231
16FA F0        5218            movx    @dptr,a
16FB A3        5219            inc     dptr
16FC           5220   ;        main.c:1155: for (i = 0; i < 10; i++){
16FC E4        5221            clr     a
16FD F0        5222            movx    @dptr,a
16FE A3        5223            inc     dptr
16FF F0        5224            movx    @dptr,a
1700 A3        5225            inc     dptr
1701 F0        5226            movx    @dptr,a
1702 905320    5227            mov     dptr,#_i
1705 F0        5228            movx    @dptr,a
1706 A3        5229            inc     dptr
1707 F0        5230            movx    @dptr,a
1708           5231   L042005?:
1708 905320    5232            mov     dptr,#_i
170B E0        5233            movx    a,@dptr
170C FA        5234            mov     r2,a
170D A3        5235            inc     dptr
170E E0        5236            movx    a,@dptr
170F FB        5237            mov     r3,a
1710 C3        5238            clr     c
1711 EA        5239            mov     a,r2
1712 940A      5240            subb    a,#0x0A
1714 EB        5241            mov     a,r3
1715 9400      5242            subb    a,#0x00
1717 4000      5243            jc      L042015?
1719 020000    5244            ljmp    L042008?
171C           5245   L042015?:
171C           5246   ;        main.c:1156: BMM150_Read_Data(&mag_x, &mag_y);
171C 754028    5247            mov     _BMM150_Read_Data_PARM_2,#_Read_angle_mag_y_1_231
171F 7541D2    5248            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_Read_angle_mag_y_1_231 >> 8)
1722 754200    5249            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
1725 90D1D8    5250            mov     dptr,#_Read_angle_mag_x_1_231
1728 75F000    5251            mov     b,#0x00
172B 120000    5252            lcall   _BMM150_Read_Data
172E           5253   ;        main.c:1157: sum_x += (float)mag_x; 
172E 90D1D8    5254            mov     dptr,#_Read_angle_mag_x_1_231
1731 E0        5255            movx    a,@dptr
1732 FA        5256            mov     r2,a
1733 A3        5257            inc     dptr
1734 E0        5258            movx    a,@dptr
1735 FB        5259            mov     r3,a
1736 8A82      5260            mov     dpl,r2
1738 8B83      5261            mov     dph,r3
173A 120000    5262            lcall   ___sint2fs
173D AA82      5263            mov     r2,dpl
173F AB83      5264            mov     r3,dph
1741 ACF0      5265            mov     r4,b
1743 FD        5266            mov     r5,a
1744 90D278    5267            mov     dptr,#_Read_angle_sum_x_1_231
1747 E0        5268            movx    a,@dptr
1748 FE        5269            mov     r6,a
1749 A3        5270            inc     dptr
174A E0        5271            movx    a,@dptr
174B FF        5272            mov     r7,a
174C A3        5273            inc     dptr
174D E0        5274            movx    a,@dptr
174E F8        5275            mov     r0,a
174F A3        5276            inc     dptr
1750 E0        5277            movx    a,@dptr
1751 F9        5278            mov     r1,a
1752 C002      5279            push    ar2
1754 C003      5280            push    ar3
1756 C004      5281            push    ar4
1758 C005      5282            push    ar5
175A 8E82      5283            mov     dpl,r6
175C 8F83      5284            mov     dph,r7
175E 88F0      5285            mov     b,r0
1760 E9        5286            mov     a,r1
1761 120000    5287            lcall   ___fsadd
1764 AA82      5288            mov     r2,dpl
1766 AB83      5289            mov     r3,dph
1768 ACF0      5290            mov     r4,b
176A FD        5291            mov     r5,a
176B E581      5292            mov     a,sp
176D 24FC      5293            add     a,#0xfc
176F F581      5294            mov     sp,a
1771 90D278    5295            mov     dptr,#_Read_angle_sum_x_1_231
1774 EA        5296            mov     a,r2
1775 F0        5297            movx    @dptr,a
1776 A3        5298            inc     dptr
1777 EB        5299            mov     a,r3
1778 F0        5300            movx    @dptr,a
1779 A3        5301            inc     dptr
177A EC        5302            mov     a,r4
177B F0        5303            movx    @dptr,a
177C A3        5304            inc     dptr
177D ED        5305            mov     a,r5
177E F0        5306            movx    @dptr,a
177F           5307   ;        main.c:1158: sum_y += (float)mag_y; 
177F 90D228    5308            mov     dptr,#_Read_angle_mag_y_1_231
1782 E0        5309            movx    a,@dptr
1783 FA        5310            mov     r2,a
1784 A3        5311            inc     dptr
1785 E0        5312            movx    a,@dptr
1786 FB        5313            mov     r3,a
1787 8A82      5314            mov     dpl,r2
1789 8B83      5315            mov     dph,r3
178B 120000    5316            lcall   ___sint2fs
178E AA82      5317            mov     r2,dpl
1790 AB83      5318            mov     r3,dph
1792 ACF0      5319            mov     r4,b
1794 FD        5320            mov     r5,a
1795 90D2C8    5321            mov     dptr,#_Read_angle_sum_y_1_231
1798 E0        5322            movx    a,@dptr
1799 FE        5323            mov     r6,a
179A A3        5324            inc     dptr
179B E0        5325            movx    a,@dptr
179C FF        5326            mov     r7,a
179D A3        5327            inc     dptr
179E E0        5328            movx    a,@dptr
179F F8        5329            mov     r0,a
17A0 A3        5330            inc     dptr
17A1 E0        5331            movx    a,@dptr
17A2 F9        5332            mov     r1,a
17A3 C002      5333            push    ar2
17A5 C003      5334            push    ar3
17A7 C004      5335            push    ar4
17A9 C005      5336            push    ar5
17AB 8E82      5337            mov     dpl,r6
17AD 8F83      5338            mov     dph,r7
17AF 88F0      5339            mov     b,r0
17B1 E9        5340            mov     a,r1
17B2 120000    5341            lcall   ___fsadd
17B5 AA82      5342            mov     r2,dpl
17B7 AB83      5343            mov     r3,dph
17B9 ACF0      5344            mov     r4,b
17BB FD        5345            mov     r5,a
17BC E581      5346            mov     a,sp
17BE 24FC      5347            add     a,#0xfc
17C0 F581      5348            mov     sp,a
17C2 90D2C8    5349            mov     dptr,#_Read_angle_sum_y_1_231
17C5 EA        5350            mov     a,r2
17C6 F0        5351            movx    @dptr,a
17C7 A3        5352            inc     dptr
17C8 EB        5353            mov     a,r3
17C9 F0        5354            movx    @dptr,a
17CA A3        5355            inc     dptr
17CB EC        5356            mov     a,r4
17CC F0        5357            movx    @dptr,a
17CD A3        5358            inc     dptr
17CE ED        5359            mov     a,r5
17CF F0        5360            movx    @dptr,a
17D0           5361   ;        main.c:1159: Timer3us(1);
17D0 758201    5362            mov     dpl,#0x01
17D3 120000    5363            lcall   _Timer3us
17D6           5364   ;        main.c:1155: for (i = 0; i < 10; i++){
17D6 905320    5365            mov     dptr,#_i
17D9 E0        5366            movx    a,@dptr
17DA 2401      5367            add     a,#0x01
17DC F0        5368            movx    @dptr,a
17DD A3        5369            inc     dptr
17DE E0        5370            movx    a,@dptr
17DF 3400      5371            addc    a,#0x00
17E1 F0        5372            movx    @dptr,a
17E2 020000    5373            ljmp    L042005?
17E5           5374   L042008?:
17E5           5375   ;        main.c:1161: angle = atan2f(sum_y, sum_x) * 180.0 / M_PI;
17E5 90D2C8    5376            mov     dptr,#_Read_angle_sum_y_1_231
17E8 E0        5377            movx    a,@dptr
17E9 FA        5378            mov     r2,a
17EA A3        5379            inc     dptr
17EB E0        5380            movx    a,@dptr
17EC FB        5381            mov     r3,a
17ED A3        5382            inc     dptr
17EE E0        5383            movx    a,@dptr
17EF FC        5384            mov     r4,a
17F0 A3        5385            inc     dptr
17F1 E0        5386            movx    a,@dptr
17F2 FD        5387            mov     r5,a
17F3 90D278    5388            mov     dptr,#_Read_angle_sum_x_1_231
17F6 E0        5389            movx    a,@dptr
17F7 F500      5390            mov     _atan2f_PARM_2,a
17F9 A3        5391            inc     dptr
17FA E0        5392            movx    a,@dptr
17FB F501      5393            mov     (_atan2f_PARM_2 + 1),a
17FD A3        5394            inc     dptr
17FE E0        5395            movx    a,@dptr
17FF F502      5396            mov     (_atan2f_PARM_2 + 2),a
1801 A3        5397            inc     dptr
1802 E0        5398            movx    a,@dptr
1803 F503      5399            mov     (_atan2f_PARM_2 + 3),a
1805 8A82      5400            mov     dpl,r2
1807 8B83      5401            mov     dph,r3
1809 8CF0      5402            mov     b,r4
180B ED        5403            mov     a,r5
180C 120000    5404            lcall   _atan2f
180F AA82      5405            mov     r2,dpl
1811 AB83      5406            mov     r3,dph
1813 ACF0      5407            mov     r4,b
1815 FD        5408            mov     r5,a
1816 C002      5409            push    ar2
1818 C003      5410            push    ar3
181A C004      5411            push    ar4
181C C005      5412            push    ar5
181E 900000    5413            mov     dptr,#0x0000
1821 75F034    5414            mov     b,#0x34
1824 7443      5415            mov     a,#0x43
1826 120000    5416            lcall   ___fsmul
1829 AA82      5417            mov     r2,dpl
182B AB83      5418            mov     r3,dph
182D ACF0      5419            mov     r4,b
182F FD        5420            mov     r5,a
1830 E581      5421            mov     a,sp
1832 24FC      5422            add     a,#0xfc
1834 F581      5423            mov     sp,a
1836 74DB      5424            mov     a,#0xDB
1838 C0E0      5425            push    acc
183A 740F      5426            mov     a,#0x0F
183C C0E0      5427            push    acc
183E 7449      5428            mov     a,#0x49
1840 C0E0      5429            push    acc
1842 7440      5430            mov     a,#0x40
1844 C0E0      5431            push    acc
1846 8A82      5432            mov     dpl,r2
1848 8B83      5433            mov     dph,r3
184A 8CF0      5434            mov     b,r4
184C ED        5435            mov     a,r5
184D 120000    5436            lcall   ___fsdiv
1850 AA82      5437            mov     r2,dpl
1852 AB83      5438            mov     r3,dph
1854 ACF0      5439            mov     r4,b
1856 FD        5440            mov     r5,a
1857 E581      5441            mov     a,sp
1859 24FC      5442            add     a,#0xfc
185B F581      5443            mov     sp,a
185D 90D318    5444            mov     dptr,#_Read_angle_angle_1_231
1860 EA        5445            mov     a,r2
1861 F0        5446            movx    @dptr,a
1862 A3        5447            inc     dptr
1863 EB        5448            mov     a,r3
1864 F0        5449            movx    @dptr,a
1865 A3        5450            inc     dptr
1866 EC        5451            mov     a,r4
1867 F0        5452            movx    @dptr,a
1868 A3        5453            inc     dptr
1869 ED        5454            mov     a,r5
186A F0        5455            movx    @dptr,a
186B           5456   ;        main.c:1162: if (angle < 0.0) angle += 360.0; 
186B C002      5457            push    ar2
186D C003      5458            push    ar3
186F C004      5459            push    ar4
1871 C005      5460            push    ar5
1873 E4        5461            clr     a
1874 C0E0      5462            push    acc
1876 C0E0      5463            push    acc
1878 C0E0      5464            push    acc
187A C0E0      5465            push    acc
187C 8A82      5466            mov     dpl,r2
187E 8B83      5467            mov     dph,r3
1880 8CF0      5468            mov     b,r4
1882 ED        5469            mov     a,r5
1883 120000    5470            lcall   ___fslt
1886 AE82      5471            mov     r6,dpl
1888 E581      5472            mov     a,sp
188A 24FC      5473            add     a,#0xfc
188C F581      5474            mov     sp,a
188E D005      5475            pop     ar5
1890 D004      5476            pop     ar4
1892 D003      5477            pop     ar3
1894 D002      5478            pop     ar2
1896 EE        5479            mov     a,r6
1897 6000      5480            jz      L042002?
1899 E4        5481            clr     a
189A C0E0      5482            push    acc
189C C0E0      5483            push    acc
189E 74B4      5484            mov     a,#0xB4
18A0 C0E0      5485            push    acc
18A2 7443      5486            mov     a,#0x43
18A4 C0E0      5487            push    acc
18A6 8A82      5488            mov     dpl,r2
18A8 8B83      5489            mov     dph,r3
18AA 8CF0      5490            mov     b,r4
18AC ED        5491            mov     a,r5
18AD 120000    5492            lcall   ___fsadd
18B0 AA82      5493            mov     r2,dpl
18B2 AB83      5494            mov     r3,dph
18B4 ACF0      5495            mov     r4,b
18B6 FD        5496            mov     r5,a
18B7 E581      5497            mov     a,sp
18B9 24FC      5498            add     a,#0xfc
18BB F581      5499            mov     sp,a
18BD 90D318    5500            mov     dptr,#_Read_angle_angle_1_231
18C0 EA        5501            mov     a,r2
18C1 F0        5502            movx    @dptr,a
18C2 A3        5503            inc     dptr
18C3 EB        5504            mov     a,r3
18C4 F0        5505            movx    @dptr,a
18C5 A3        5506            inc     dptr
18C6 EC        5507            mov     a,r4
18C7 F0        5508            movx    @dptr,a
18C8 A3        5509            inc     dptr
18C9 ED        5510            mov     a,r5
18CA F0        5511            movx    @dptr,a
18CB           5512   L042002?:
18CB           5513   ;        main.c:1163: if (angle > 360.0) angle -= 360.0; 
18CB 90D318    5514            mov     dptr,#_Read_angle_angle_1_231
18CE E0        5515            movx    a,@dptr
18CF FA        5516            mov     r2,a
18D0 A3        5517            inc     dptr
18D1 E0        5518            movx    a,@dptr
18D2 FB        5519            mov     r3,a
18D3 A3        5520            inc     dptr
18D4 E0        5521            movx    a,@dptr
18D5 FC        5522            mov     r4,a
18D6 A3        5523            inc     dptr
18D7 E0        5524            movx    a,@dptr
18D8 FD        5525            mov     r5,a
18D9 C002      5526            push    ar2
18DB C003      5527            push    ar3
18DD C004      5528            push    ar4
18DF C005      5529            push    ar5
18E1 E4        5530            clr     a
18E2 C0E0      5531            push    acc
18E4 C0E0      5532            push    acc
18E6 74B4      5533            mov     a,#0xB4
18E8 C0E0      5534            push    acc
18EA 7443      5535            mov     a,#0x43
18EC C0E0      5536            push    acc
18EE 8A82      5537            mov     dpl,r2
18F0 8B83      5538            mov     dph,r3
18F2 8CF0      5539            mov     b,r4
18F4 ED        5540            mov     a,r5
18F5 120000    5541            lcall   ___fsgt
18F8 AE82      5542            mov     r6,dpl
18FA E581      5543            mov     a,sp
18FC 24FC      5544            add     a,#0xfc
18FE F581      5545            mov     sp,a
1900 D005      5546            pop     ar5
1902 D004      5547            pop     ar4
1904 D003      5548            pop     ar3
1906 D002      5549            pop     ar2
1908 EE        5550            mov     a,r6
1909 6000      5551            jz      L042004?
190B E4        5552            clr     a
190C C0E0      5553            push    acc
190E C0E0      5554            push    acc
1910 74B4      5555            mov     a,#0xB4
1912 C0E0      5556            push    acc
1914 7443      5557            mov     a,#0x43
1916 C0E0      5558            push    acc
1918 8A82      5559            mov     dpl,r2
191A 8B83      5560            mov     dph,r3
191C 8CF0      5561            mov     b,r4
191E ED        5562            mov     a,r5
191F 120000    5563            lcall   ___fssub
1922 AA82      5564            mov     r2,dpl
1924 AB83      5565            mov     r3,dph
1926 ACF0      5566            mov     r4,b
1928 FD        5567            mov     r5,a
1929 E581      5568            mov     a,sp
192B 24FC      5569            add     a,#0xfc
192D F581      5570            mov     sp,a
192F 90D318    5571            mov     dptr,#_Read_angle_angle_1_231
1932 EA        5572            mov     a,r2
1933 F0        5573            movx    @dptr,a
1934 A3        5574            inc     dptr
1935 EB        5575            mov     a,r3
1936 F0        5576            movx    @dptr,a
1937 A3        5577            inc     dptr
1938 EC        5578            mov     a,r4
1939 F0        5579            movx    @dptr,a
193A A3        5580            inc     dptr
193B ED        5581            mov     a,r5
193C F0        5582            movx    @dptr,a
193D           5583   L042004?:
193D           5584   ;        main.c:1164: return angle; 
193D 90D318    5585            mov     dptr,#_Read_angle_angle_1_231
1940 E0        5586            movx    a,@dptr
1941 FA        5587            mov     r2,a
1942 A3        5588            inc     dptr
1943 E0        5589            movx    a,@dptr
1944 FB        5590            mov     r3,a
1945 A3        5591            inc     dptr
1946 E0        5592            movx    a,@dptr
1947 FC        5593            mov     r4,a
1948 A3        5594            inc     dptr
1949 E0        5595            movx    a,@dptr
194A 8A82      5596            mov     dpl,r2
194C 8B83      5597            mov     dph,r3
194E 8CF0      5598            mov     b,r4
1950 22        5599            ret
1951           5600   ;------------------------------------------------------------
1951           5601   ;Allocation info for local variables in function 'Auto_mode_slave'
1951           5602   ;------------------------------------------------------------
1951           5603   ;sloc0                     Allocated with name '_Auto_mode_slave_sloc0_1_0'
1951           5604   ;sloc1                     Allocated with name '_Auto_mode_slave_sloc1_1_0'
1951           5605   ;sloc2                     Allocated with name '_Auto_mode_slave_sloc2_1_0'
1951           5606   ;sloc3                     Allocated with name '_Auto_mode_slave_sloc3_1_0'
1951           5607   ;count                     Allocated with name '_Auto_mode_slave_count_1_233'
1951           5608   ;command                   Allocated with name '_Auto_mode_slave_command_1_233'
1951           5609   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_233'
1951           5610   ;bound                     Allocated with name '_Auto_mode_slave_bound_1_233'
1951           5611   ;c                         Allocated with name '_Auto_mode_slave_c_1_233'
1951           5612   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_233'
1951           5613   ;angle                     Allocated with name '_Auto_mode_slave_angle_1_233'
1951           5614   ;------------------------------------------------------------
1951           5615   ;        main.c:1167: void Auto_mode_slave(){
1951           5616   ;        -----------------------------------------
1951           5617   ;         function Auto_mode_slave
1951           5618   ;        -----------------------------------------
1951           5619   _Auto_mode_slave:
1951           5620   ;        main.c:1170: xdata int state_res = 1;
1951 90D3C8    5621            mov     dptr,#_Auto_mode_slave_state_res_1_233
1954 7401      5622            mov     a,#0x01
1956 F0        5623            movx    @dptr,a
1957 E4        5624            clr     a
1958 A3        5625            inc     dptr
1959 F0        5626            movx    @dptr,a
195A           5627   ;        main.c:1178: while(count < 20 && state_res){
195A E4        5628            clr     a
195B F530      5629            mov     _Auto_mode_slave_sloc0_1_0,a
195D F531      5630            mov     (_Auto_mode_slave_sloc0_1_0 + 1),a
195F           5631   L043026?:
195F C3        5632            clr     c
1960 E530      5633            mov     a,_Auto_mode_slave_sloc0_1_0
1962 9414      5634            subb    a,#0x14
1964 E531      5635            mov     a,(_Auto_mode_slave_sloc0_1_0 + 1)
1966 6480      5636            xrl     a,#0x80
1968 9480      5637            subb    a,#0x80
196A 4000      5638            jc      L043059?
196C 020000    5639            ljmp    L043028?
196F           5640   L043059?:
196F 90D3C8    5641            mov     dptr,#_Auto_mode_slave_state_res_1_233
1972 E0        5642            movx    a,@dptr
1973 FC        5643            mov     r4,a
1974 A3        5644            inc     dptr
1975 E0        5645            movx    a,@dptr
1976 FD        5646            mov     r5,a
1977 4C        5647            orl     a,r4
1978 7000      5648            jnz     L043060?
197A 020000    5649            ljmp    L043028?
197D           5650   L043060?:
197D           5651   ;        main.c:1180: if(RXU1()){
197D C004      5652            push    ar4
197F C005      5653            push    ar5
1981 120000    5654            lcall   _RXU1
1984 D005      5655            pop     ar5
1986 D004      5656            pop     ar4
1988 4000      5657            jc      L043061?
198A 020000    5658            ljmp    L043012?
198D           5659   L043061?:
198D           5660   ;        main.c:1181: c=getchar1();      
198D C004      5661            push    ar4
198F C005      5662            push    ar5
1991 120000    5663            lcall   _getchar1
1994 AE82      5664            mov     r6,dpl
1996 D005      5665            pop     ar5
1998 D004      5666            pop     ar4
199A           5667   ;        main.c:1182: if(c=='!'){
199A BE2140    5668            cjne    r6,#0x21,L043062?
199D 8000      5669            sjmp    L043063?
199F           5670   L043062?:
199F 020000    5671            ljmp    L043009?
19A2           5672   L043063?:
19A2           5673   ;        main.c:1183: getstr1(buff, sizeof(buff)-1);
19A2 75F013    5674            mov     _getstr1_PARM_2,#0x13
19A5 905760    5675            mov     dptr,#_buff
19A8 75F040    5676            mov     b,#0x40
19AB 120000    5677            lcall   _getstr1
19AE           5678   ;        main.c:1184: if(strlen(buff)==11){
19AE 905760    5679            mov     dptr,#_buff
19B1 75F040    5680            mov     b,#0x40
19B4 120000    5681            lcall   _strlen
19B7 AF82      5682            mov     r7,dpl
19B9 AA83      5683            mov     r2,dph
19BB BF0B40    5684            cjne    r7,#0x0B,L043064?
19BE BA0040    5685            cjne    r2,#0x00,L043064?
19C1 8000      5686            sjmp    L043065?
19C3           5687   L043064?:
19C3 020000    5688            ljmp    L043012?
19C6           5689   L043065?:
19C6           5690   ;        main.c:1186: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
19C6 7468      5691            mov     a,#_Auto_mode_slave_command_1_233
19C8 C0E0      5692            push    acc
19CA 74D3      5693            mov     a,#(_Auto_mode_slave_command_1_233 >> 8)
19CC C0E0      5694            push    acc
19CE E4        5695            clr     a
19CF C0E0      5696            push    acc
19D1 7418      5697            mov     a,#_Auto_mode_slave_dummy_1_233
19D3 C0E0      5698            push    acc
19D5 74D4      5699            mov     a,#(_Auto_mode_slave_dummy_1_233 >> 8)
19D7 C0E0      5700            push    acc
19D9 E4        5701            clr     a
19DA C0E0      5702            push    acc
19DC 7418      5703            mov     a,#_Auto_mode_slave_dummy_1_233
19DE C0E0      5704            push    acc
19E0 74D4      5705            mov     a,#(_Auto_mode_slave_dummy_1_233 >> 8)
19E2 C0E0      5706            push    acc
19E4 E4        5707            clr     a
19E5 C0E0      5708            push    acc
19E7 7418      5709            mov     a,#_Auto_mode_slave_dummy_1_233
19E9 C0E0      5710            push    acc
19EB 74D4      5711            mov     a,#(_Auto_mode_slave_dummy_1_233 >> 8)
19ED C0E0      5712            push    acc
19EF E4        5713            clr     a
19F0 C0E0      5714            push    acc
19F2 74C0      5715            mov     a,#__str_5
19F4 C0E0      5716            push    acc
19F6 7419      5717            mov     a,#(__str_5 >> 8)
19F8 C0E0      5718            push    acc
19FA 7480      5719            mov     a,#0x80
19FC C0E0      5720            push    acc
19FE 7460      5721            mov     a,#_buff
1A00 C0E0      5722            push    acc
1A02 7457      5723            mov     a,#(_buff >> 8)
1A04 C0E0      5724            push    acc
1A06 7440      5725            mov     a,#0x40
1A08 C0E0      5726            push    acc
1A0A 120000    5727            lcall   _sscanf
1A0D E581      5728            mov     a,sp
1A0F 24EE      5729            add     a,#0xee
1A11 F581      5730            mov     sp,a
1A13           5731   ;        main.c:1187: if(command) state_res = 1;
1A13 90D368    5732            mov     dptr,#_Auto_mode_slave_command_1_233
1A16 E0        5733            movx    a,@dptr
1A17 FF        5734            mov     r7,a
1A18 A3        5735            inc     dptr
1A19 E0        5736            movx    a,@dptr
1A1A FA        5737            mov     r2,a
1A1B 4F        5738            orl     a,r7
1A1C 6000      5739            jz      L043002?
1A1E 90D3C8    5740            mov     dptr,#_Auto_mode_slave_state_res_1_233
1A21 7401      5741            mov     a,#0x01
1A23 F0        5742            movx    @dptr,a
1A24 E4        5743            clr     a
1A25 A3        5744            inc     dptr
1A26 F0        5745            movx    @dptr,a
1A27 020000    5746            ljmp    L043012?
1A2A           5747   L043002?:
1A2A           5748   ;        main.c:1188: else state_res = 0;
1A2A 90D3C8    5749            mov     dptr,#_Auto_mode_slave_state_res_1_233
1A2D E4        5750            clr     a
1A2E F0        5751            movx    @dptr,a
1A2F A3        5752            inc     dptr
1A30 F0        5753            movx    @dptr,a
1A31 020000    5754            ljmp    L043012?
1A34           5755   L043009?:
1A34           5756   ;        main.c:1191: else if(c=='@'){
1A34 BE4080    5757            cjne    r6,#0x40,L043067?
1A37 8000      5758            sjmp    L043068?
1A39           5759   L043067?:
1A39 020000    5760            ljmp    L043012?
1A3C           5761   L043068?:
1A3C           5762   ;        main.c:1192: sprintf(buff, "%01d,%02d,%ld,%05d,%03d,%03d,%03d\n", state_res, count,freq100, weight, (int)curr_angle,pwm_left,pwm_right);
1A3C 905220    5763            mov     dptr,#_pwm_right
1A3F E0        5764            movx    a,@dptr
1A40 FA        5765            mov     r2,a
1A41 8AD0      5766            mov     _Auto_mode_slave_sloc2_1_0,r2
1A43 75D100    5767            mov     (_Auto_mode_slave_sloc2_1_0 + 1),#0x00
1A46 905260    5768            mov     dptr,#_pwm_left
1A49 E0        5769            movx    a,@dptr
1A4A FE        5770            mov     r6,a
1A4B 8E80      5771            mov     _Auto_mode_slave_sloc1_1_0,r6
1A4D 758100    5772            mov     (_Auto_mode_slave_sloc1_1_0 + 1),#0x00
1A50 904ED0    5773            mov     dptr,#_curr_angle
1A53 E0        5774            movx    a,@dptr
1A54 FE        5775            mov     r6,a
1A55 A3        5776            inc     dptr
1A56 E0        5777            movx    a,@dptr
1A57 FF        5778            mov     r7,a
1A58 A3        5779            inc     dptr
1A59 E0        5780            movx    a,@dptr
1A5A FA        5781            mov     r2,a
1A5B A3        5782            inc     dptr
1A5C E0        5783            movx    a,@dptr
1A5D 8E82      5784            mov     dpl,r6
1A5F 8F83      5785            mov     dph,r7
1A61 8AF0      5786            mov     b,r2
1A63 C004      5787            push    ar4
1A65 C005      5788            push    ar5
1A67 120000    5789            lcall   ___fs2sint
1A6A AA82      5790            mov     r2,dpl
1A6C AB83      5791            mov     r3,dph
1A6E D005      5792            pop     ar5
1A70 D004      5793            pop     ar4
1A72 C0D0      5794            push    _Auto_mode_slave_sloc2_1_0
1A74 C0D1      5795            push    (_Auto_mode_slave_sloc2_1_0 + 1)
1A76 C080      5796            push    _Auto_mode_slave_sloc1_1_0
1A78 C081      5797            push    (_Auto_mode_slave_sloc1_1_0 + 1)
1A7A C002      5798            push    ar2
1A7C C003      5799            push    ar3
1A7E 904D90    5800            mov     dptr,#_weight
1A81 E0        5801            movx    a,@dptr
1A82 C0E0      5802            push    acc
1A84 A3        5803            inc     dptr
1A85 E0        5804            movx    a,@dptr
1A86 C0E0      5805            push    acc
1A88 905720    5806            mov     dptr,#_freq100
1A8B E0        5807            movx    a,@dptr
1A8C C0E0      5808            push    acc
1A8E A3        5809            inc     dptr
1A8F E0        5810            movx    a,@dptr
1A90 C0E0      5811            push    acc
1A92 A3        5812            inc     dptr
1A93 E0        5813            movx    a,@dptr
1A94 C0E0      5814            push    acc
1A96 A3        5815            inc     dptr
1A97 E0        5816            movx    a,@dptr
1A98 C0E0      5817            push    acc
1A9A C030      5818            push    _Auto_mode_slave_sloc0_1_0
1A9C C031      5819            push    (_Auto_mode_slave_sloc0_1_0 + 1)
1A9E C004      5820            push    ar4
1AA0 C005      5821            push    ar5
1AA2 7400      5822            mov     a,#__str_6
1AA4 C0E0      5823            push    acc
1AA6 741B      5824            mov     a,#(__str_6 >> 8)
1AA8 C0E0      5825            push    acc
1AAA 7480      5826            mov     a,#0x80
1AAC C0E0      5827            push    acc
1AAE 7460      5828            mov     a,#_buff
1AB0 C0E0      5829            push    acc
1AB2 7457      5830            mov     a,#(_buff >> 8)
1AB4 C0E0      5831            push    acc
1AB6 7440      5832            mov     a,#0x40
1AB8 C0E0      5833            push    acc
1ABA 120000    5834            lcall   _sprintf
1ABD E581      5835            mov     a,sp
1ABF 24EA      5836            add     a,#0xea
1AC1 F581      5837            mov     sp,a
1AC3           5838   ;        main.c:1193: printf("%s\r\n",buff);
1AC3 7460      5839            mov     a,#_buff
1AC5 C0E0      5840            push    acc
1AC7 7457      5841            mov     a,#(_buff >> 8)
1AC9 C0E0      5842            push    acc
1ACB 7440      5843            mov     a,#0x40
1ACD C0E0      5844            push    acc
1ACF 7480      5845            mov     a,#__str_7
1AD1 C0E0      5846            push    acc
1AD3 741B      5847            mov     a,#(__str_7 >> 8)
1AD5 C0E0      5848            push    acc
1AD7 7480      5849            mov     a,#0x80
1AD9 C0E0      5850            push    acc
1ADB 120000    5851            lcall   _printf
1ADE E581      5852            mov     a,sp
1AE0 24FA      5853            add     a,#0xfa
1AE2 F581      5854            mov     sp,a
1AE4           5855   ;        main.c:1194: waitms(5); 
1AE4 900005    5856            mov     dptr,#0x0005
1AE7 120000    5857            lcall   _waitms
1AEA           5858   ;        main.c:1195: sendstr1(buff);
1AEA 905760    5859            mov     dptr,#_buff
1AED 75F040    5860            mov     b,#0x40
1AF0 120000    5861            lcall   _sendstr1
1AF3           5862   L043012?:
1AF3           5863   ;        main.c:1199: Move_forward();
1AF3 120000    5864            lcall   _Move_forward
1AF6           5865   ;        main.c:1200: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
1AF6 758209    5866            mov     dpl,#0x09
1AF9 120000    5867            lcall   _ADC_at_Pin
1AFC E582      5868            mov     a,dpl
1AFE 8583F0    5869            mov     b,dph
1B01 9056E0    5870            mov     dptr,#_d1
1B04 F0        5871            movx    @dptr,a
1B05 A3        5872            inc     dptr
1B06 E5F0      5873            mov     a,b
1B08 F0        5874            movx    @dptr,a
1B09           5875   ;        main.c:1201: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
1B09 75820A    5876            mov     dpl,#0x0A
1B0C 120000    5877            lcall   _ADC_at_Pin
1B0F AA82      5878            mov     r2,dpl
1B11 AB83      5879            mov     r3,dph
1B13 9056A0    5880            mov     dptr,#_d2
1B16 EA        5881            mov     a,r2
1B17 F0        5882            movx    @dptr,a
1B18 A3        5883            inc     dptr
1B19 EB        5884            mov     a,r3
1B1A F0        5885            movx    @dptr,a
1B1B           5886   ;        main.c:1202: bound = check_bound(d1,d2);
1B1B 9056E0    5887            mov     dptr,#_d1
1B1E E0        5888            movx    a,@dptr
1B1F FC        5889            mov     r4,a
1B20 A3        5890            inc     dptr
1B21 E0        5891            movx    a,@dptr
1B22 FD        5892            mov     r5,a
1B23 8A90      5893            mov     _check_bound_PARM_2,r2
1B25 8B91      5894            mov     (_check_bound_PARM_2 + 1),r3
1B27 8C82      5895            mov     dpl,r4
1B29 8D83      5896            mov     dph,r5
1B2B 120000    5897            lcall   _check_bound
1B2E AA82      5898            mov     r2,dpl
1B30 AB83      5899            mov     r3,dph
1B32           5900   ;        main.c:1203: printf("f:%04ld, d1:%d, d2:%d, bound_dectect: %d, distance: %d\r\n",freq100, d1,d2,bound,distance);
1B32 C002      5901            push    ar2
1B34 C003      5902            push    ar3
1B36 904D10    5903            mov     dptr,#_distance
1B39 E0        5904            movx    a,@dptr
1B3A C0E0      5905            push    acc
1B3C A3        5906            inc     dptr
1B3D E0        5907            movx    a,@dptr
1B3E C0E0      5908            push    acc
1B40 C002      5909            push    ar2
1B42 C003      5910            push    ar3
1B44 9056A0    5911            mov     dptr,#_d2
1B47 E0        5912            movx    a,@dptr
1B48 C0E0      5913            push    acc
1B4A A3        5914            inc     dptr
1B4B E0        5915            movx    a,@dptr
1B4C C0E0      5916            push    acc
1B4E 9056E0    5917            mov     dptr,#_d1
1B51 E0        5918            movx    a,@dptr
1B52 C0E0      5919            push    acc
1B54 A3        5920            inc     dptr
1B55 E0        5921            movx    a,@dptr
1B56 C0E0      5922            push    acc
1B58 905720    5923            mov     dptr,#_freq100
1B5B E0        5924            movx    a,@dptr
1B5C C0E0      5925            push    acc
1B5E A3        5926            inc     dptr
1B5F E0        5927            movx    a,@dptr
1B60 C0E0      5928            push    acc
1B62 A3        5929            inc     dptr
1B63 E0        5930            movx    a,@dptr
1B64 C0E0      5931            push    acc
1B66 A3        5932            inc     dptr
1B67 E0        5933            movx    a,@dptr
1B68 C0E0      5934            push    acc
1B6A 74C0      5935            mov     a,#__str_8
1B6C C0E0      5936            push    acc
1B6E 741B      5937            mov     a,#(__str_8 >> 8)
1B70 C0E0      5938            push    acc
1B72 7480      5939            mov     a,#0x80
1B74 C0E0      5940            push    acc
1B76 120000    5941            lcall   _printf
1B79 E581      5942            mov     a,sp
1B7B 24F1      5943            add     a,#0xf1
1B7D F581      5944            mov     sp,a
1B7F D003      5945            pop     ar3
1B81 D002      5946            pop     ar2
1B83           5947   ;        main.c:1205: if (freq100>=5355){
1B83 905720    5948            mov     dptr,#_freq100
1B86 E0        5949            movx    a,@dptr
1B87 FC        5950            mov     r4,a
1B88 A3        5951            inc     dptr
1B89 E0        5952            movx    a,@dptr
1B8A FD        5953            mov     r5,a
1B8B A3        5954            inc     dptr
1B8C E0        5955            movx    a,@dptr
1B8D FE        5956            mov     r6,a
1B8E A3        5957            inc     dptr
1B8F E0        5958            movx    a,@dptr
1B90 FF        5959            mov     r7,a
1B91 C3        5960            clr     c
1B92 EC        5961            mov     a,r4
1B93 94EB      5962            subb    a,#0xEB
1B95 ED        5963            mov     a,r5
1B96 9414      5964            subb    a,#0x14
1B98 EE        5965            mov     a,r6
1B99 9400      5966            subb    a,#0x00
1B9B EF        5967            mov     a,r7
1B9C 6480      5968            xrl     a,#0x80
1B9E 9480      5969            subb    a,#0x80
1BA0 4000      5970            jc      L043014?
1BA2           5971   ;        main.c:1206: mea_yes = 0;
1BA2 904DD0    5972            mov     dptr,#_mea_yes
1BA5 E4        5973            clr     a
1BA6 F0        5974            movx    @dptr,a
1BA7           5975   ;        main.c:1207: Move_back_ms(100);
1BA7 900064    5976            mov     dptr,#0x0064
1BAA C002      5977            push    ar2
1BAC C003      5978            push    ar3
1BAE 120000    5979            lcall   _Move_back_ms
1BB1           5980   ;        main.c:1208: waitms(100);
1BB1 900064    5981            mov     dptr,#0x0064
1BB4 120000    5982            lcall   _waitms
1BB7           5983   ;        main.c:1209: servo_pick();
1BB7 120000    5984            lcall   _servo_pick
1BBA D003      5985            pop     ar3
1BBC D002      5986            pop     ar2
1BBE           5987   ;        main.c:1210: count++;
1BBE 0530      5988            inc     _Auto_mode_slave_sloc0_1_0
1BC0 E4        5989            clr     a
1BC1 B53040    5990            cjne    a,_Auto_mode_slave_sloc0_1_0,L043070?
1BC4 0531      5991            inc     (_Auto_mode_slave_sloc0_1_0 + 1)
1BC6           5992   L043070?:
1BC6           5993   ;        main.c:1211: waitms(100);
1BC6 900064    5994            mov     dptr,#0x0064
1BC9 C002      5995            push    ar2
1BCB C003      5996            push    ar3
1BCD 120000    5997            lcall   _waitms
1BD0           5998   ;        main.c:1212: mea_yes = 1;
1BD0 904DD0    5999            mov     dptr,#_mea_yes
1BD3 7401      6000            mov     a,#0x01
1BD5 F0        6001            movx    @dptr,a
1BD6           6002   ;        main.c:1213: Move_forward();
1BD6 120000    6003            lcall   _Move_forward
1BD9 D003      6004            pop     ar3
1BDB D002      6005            pop     ar2
1BDD           6006   L043014?:
1BDD           6007   ;        main.c:1216: if (distance < 400 && distance > 0){
1BDD 904D10    6008            mov     dptr,#_distance
1BE0 E0        6009            movx    a,@dptr
1BE1 FC        6010            mov     r4,a
1BE2 A3        6011            inc     dptr
1BE3 E0        6012            movx    a,@dptr
1BE4 FD        6013            mov     r5,a
1BE5 C3        6014            clr     c
1BE6 EC        6015            mov     a,r4
1BE7 9490      6016            subb    a,#0x90
1BE9 ED        6017            mov     a,r5
1BEA 6480      6018            xrl     a,#0x80
1BEC 9481      6019            subb    a,#0x81
1BEE 5000      6020            jnc     L043016?
1BF0 C3        6021            clr     c
1BF1 E4        6022            clr     a
1BF2 9C        6023            subb    a,r4
1BF3 E4        6024            clr     a
1BF4 6480      6025            xrl     a,#0x80
1BF6 8DF0      6026            mov     b,r5
1BF8 63F080    6027            xrl     b,#0x80
1BFB 95F0      6028            subb    a,b
1BFD 5000      6029            jnc     L043016?
1BFF           6030   ;        main.c:1217: servo_moveaway();
1BFF C002      6031            push    ar2
1C01 C003      6032            push    ar3
1C03 120000    6033            lcall   _servo_moveaway
1C06 D003      6034            pop     ar3
1C08 D002      6035            pop     ar2
1C0A           6036   L043016?:
1C0A           6037   ;        main.c:1220: if(bound == 1){
1C0A BA01C0    6038            cjne    r2,#0x01,L043073?
1C0D BB00C0    6039            cjne    r3,#0x00,L043073?
1C10 8000      6040            sjmp    L043074?
1C12           6041   L043073?:
1C12 020000    6042            ljmp    L043026?
1C15           6043   L043074?:
1C15           6044   ;        main.c:1221: Move_back_ms(400);
1C15 900190    6045            mov     dptr,#0x0190
1C18 120000    6046            lcall   _Move_back_ms
1C1B           6047   ;        main.c:1222: waitms(100);
1C1B 900064    6048            mov     dptr,#0x0064
1C1E 120000    6049            lcall   _waitms
1C21           6050   ;        main.c:1223: angle = get_random_90_250();
1C21 120000    6051            lcall   _get_random_90_250
1C24 AA82      6052            mov     r2,dpl
1C26 AB83      6053            mov     r3,dph
1C28           6054   ;        main.c:1224: Right_angle(angle*600/90);
1C28 8A00      6055            mov     __mulint_PARM_2,r2
1C2A 8B01      6056            mov     (__mulint_PARM_2 + 1),r3
1C2C 900258    6057            mov     dptr,#0x0258
1C2F C002      6058            push    ar2
1C31 C003      6059            push    ar3
1C33 120000    6060            lcall   __mulint
1C36 AC82      6061            mov     r4,dpl
1C38 AD83      6062            mov     r5,dph
1C3A 75005A    6063            mov     __divuint_PARM_2,#0x5A
1C3D E4        6064            clr     a
1C3E F501      6065            mov     (__divuint_PARM_2 + 1),a
1C40 8C82      6066            mov     dpl,r4
1C42 8D83      6067            mov     dph,r5
1C44 120000    6068            lcall   __divuint
1C47 120000    6069            lcall   _Right_angle
1C4A D003      6070            pop     ar3
1C4C D002      6071            pop     ar2
1C4E           6072   ;        main.c:1226: curr_angle += angle; 
1C4E 904ED0    6073            mov     dptr,#_curr_angle
1C51 E0        6074            movx    a,@dptr
1C52 F520      6075            mov     _Auto_mode_slave_sloc3_1_0,a
1C54 A3        6076            inc     dptr
1C55 E0        6077            movx    a,@dptr
1C56 F521      6078            mov     (_Auto_mode_slave_sloc3_1_0 + 1),a
1C58 A3        6079            inc     dptr
1C59 E0        6080            movx    a,@dptr
1C5A F522      6081            mov     (_Auto_mode_slave_sloc3_1_0 + 2),a
1C5C A3        6082            inc     dptr
1C5D E0        6083            movx    a,@dptr
1C5E F523      6084            mov     (_Auto_mode_slave_sloc3_1_0 + 3),a
1C60 8A82      6085            mov     dpl,r2
1C62 8B83      6086            mov     dph,r3
1C64 120000    6087            lcall   ___uint2fs
1C67 AA82      6088            mov     r2,dpl
1C69 AB83      6089            mov     r3,dph
1C6B ACF0      6090            mov     r4,b
1C6D FD        6091            mov     r5,a
1C6E C002      6092            push    ar2
1C70 C003      6093            push    ar3
1C72 C004      6094            push    ar4
1C74 C005      6095            push    ar5
1C76 852082    6096            mov     dpl,_Auto_mode_slave_sloc3_1_0
1C79 852183    6097            mov     dph,(_Auto_mode_slave_sloc3_1_0 + 1)
1C7C 8522F0    6098            mov     b,(_Auto_mode_slave_sloc3_1_0 + 2)
1C7F E523      6099            mov     a,(_Auto_mode_slave_sloc3_1_0 + 3)
1C81 120000    6100            lcall   ___fsadd
1C84 AA82      6101            mov     r2,dpl
1C86 AB83      6102            mov     r3,dph
1C88 ACF0      6103            mov     r4,b
1C8A FD        6104            mov     r5,a
1C8B E581      6105            mov     a,sp
1C8D 24FC      6106            add     a,#0xfc
1C8F F581      6107            mov     sp,a
1C91 904ED0    6108            mov     dptr,#_curr_angle
1C94 EA        6109            mov     a,r2
1C95 F0        6110            movx    @dptr,a
1C96 A3        6111            inc     dptr
1C97 EB        6112            mov     a,r3
1C98 F0        6113            movx    @dptr,a
1C99 A3        6114            inc     dptr
1C9A EC        6115            mov     a,r4
1C9B F0        6116            movx    @dptr,a
1C9C A3        6117            inc     dptr
1C9D ED        6118            mov     a,r5
1C9E F0        6119            movx    @dptr,a
1C9F           6120   ;        main.c:1227: if (curr_angle > 360.0) curr_angle -= 360.0; 
1C9F 904ED0    6121            mov     dptr,#_curr_angle
1CA2 E0        6122            movx    a,@dptr
1CA3 FA        6123            mov     r2,a
1CA4 A3        6124            inc     dptr
1CA5 E0        6125            movx    a,@dptr
1CA6 FB        6126            mov     r3,a
1CA7 A3        6127            inc     dptr
1CA8 E0        6128            movx    a,@dptr
1CA9 FC        6129            mov     r4,a
1CAA A3        6130            inc     dptr
1CAB E0        6131            movx    a,@dptr
1CAC FD        6132            mov     r5,a
1CAD C002      6133            push    ar2
1CAF C003      6134            push    ar3
1CB1 C004      6135            push    ar4
1CB3 C005      6136            push    ar5
1CB5 E4        6137            clr     a
1CB6 C0E0      6138            push    acc
1CB8 C0E0      6139            push    acc
1CBA 74B4      6140            mov     a,#0xB4
1CBC C0E0      6141            push    acc
1CBE 7443      6142            mov     a,#0x43
1CC0 C0E0      6143            push    acc
1CC2 8A82      6144            mov     dpl,r2
1CC4 8B83      6145            mov     dph,r3
1CC6 8CF0      6146            mov     b,r4
1CC8 ED        6147            mov     a,r5
1CC9 120000    6148            lcall   ___fsgt
1CCC AE82      6149            mov     r6,dpl
1CCE E581      6150            mov     a,sp
1CD0 24FC      6151            add     a,#0xfc
1CD2 F581      6152            mov     sp,a
1CD4 D005      6153            pop     ar5
1CD6 D004      6154            pop     ar4
1CD8 D003      6155            pop     ar3
1CDA D002      6156            pop     ar2
1CDC EE        6157            mov     a,r6
1CDD 6000      6158            jz      L043021?
1CDF E4        6159            clr     a
1CE0 C0E0      6160            push    acc
1CE2 C0E0      6161            push    acc
1CE4 74B4      6162            mov     a,#0xB4
1CE6 C0E0      6163            push    acc
1CE8 7443      6164            mov     a,#0x43
1CEA C0E0      6165            push    acc
1CEC 8A82      6166            mov     dpl,r2
1CEE 8B83      6167            mov     dph,r3
1CF0 8CF0      6168            mov     b,r4
1CF2 ED        6169            mov     a,r5
1CF3 120000    6170            lcall   ___fssub
1CF6 858220    6171            mov     _Auto_mode_slave_sloc3_1_0,dpl
1CF9 858321    6172            mov     (_Auto_mode_slave_sloc3_1_0 + 1),dph
1CFC 85F022    6173            mov     (_Auto_mode_slave_sloc3_1_0 + 2),b
1CFF F523      6174            mov     (_Auto_mode_slave_sloc3_1_0 + 3),a
1D01 E581      6175            mov     a,sp
1D03 24FC      6176            add     a,#0xfc
1D05 F581      6177            mov     sp,a
1D07 904ED0    6178            mov     dptr,#_curr_angle
1D0A E520      6179            mov     a,_Auto_mode_slave_sloc3_1_0
1D0C F0        6180            movx    @dptr,a
1D0D A3        6181            inc     dptr
1D0E E521      6182            mov     a,(_Auto_mode_slave_sloc3_1_0 + 1)
1D10 F0        6183            movx    @dptr,a
1D11 A3        6184            inc     dptr
1D12 E522      6185            mov     a,(_Auto_mode_slave_sloc3_1_0 + 2)
1D14 F0        6186            movx    @dptr,a
1D15 A3        6187            inc     dptr
1D16 E523      6188            mov     a,(_Auto_mode_slave_sloc3_1_0 + 3)
1D18 F0        6189            movx    @dptr,a
1D19 8000      6190            sjmp    L043022?
1D1B           6191   L043021?:
1D1B           6192   ;        main.c:1228: else if (curr_angle < 0.0) curr_angle += 360.0; 
1D1B C002      6193            push    ar2
1D1D C003      6194            push    ar3
1D1F C004      6195            push    ar4
1D21 C005      6196            push    ar5
1D23 E4        6197            clr     a
1D24 C0E0      6198            push    acc
1D26 C0E0      6199            push    acc
1D28 C0E0      6200            push    acc
1D2A C0E0      6201            push    acc
1D2C 8A82      6202            mov     dpl,r2
1D2E 8B83      6203            mov     dph,r3
1D30 8CF0      6204            mov     b,r4
1D32 ED        6205            mov     a,r5
1D33 120000    6206            lcall   ___fslt
1D36 AE82      6207            mov     r6,dpl
1D38 E581      6208            mov     a,sp
1D3A 24FC      6209            add     a,#0xfc
1D3C F581      6210            mov     sp,a
1D3E D005      6211            pop     ar5
1D40 D004      6212            pop     ar4
1D42 D003      6213            pop     ar3
1D44 D002      6214            pop     ar2
1D46 EE        6215            mov     a,r6
1D47 6000      6216            jz      L043022?
1D49 E4        6217            clr     a
1D4A C0E0      6218            push    acc
1D4C C0E0      6219            push    acc
1D4E 74B4      6220            mov     a,#0xB4
1D50 C0E0      6221            push    acc
1D52 7443      6222            mov     a,#0x43
1D54 C0E0      6223            push    acc
1D56 8A82      6224            mov     dpl,r2
1D58 8B83      6225            mov     dph,r3
1D5A 8CF0      6226            mov     b,r4
1D5C ED        6227            mov     a,r5
1D5D 120000    6228            lcall   ___fsadd
1D60 AA82      6229            mov     r2,dpl
1D62 AB83      6230            mov     r3,dph
1D64 ACF0      6231            mov     r4,b
1D66 FD        6232            mov     r5,a
1D67 E581      6233            mov     a,sp
1D69 24FC      6234            add     a,#0xfc
1D6B F581      6235            mov     sp,a
1D6D 904ED0    6236            mov     dptr,#_curr_angle
1D70 EA        6237            mov     a,r2
1D71 F0        6238            movx    @dptr,a
1D72 A3        6239            inc     dptr
1D73 EB        6240            mov     a,r3
1D74 F0        6241            movx    @dptr,a
1D75 A3        6242            inc     dptr
1D76 EC        6243            mov     a,r4
1D77 F0        6244            movx    @dptr,a
1D78 A3        6245            inc     dptr
1D79 ED        6246            mov     a,r5
1D7A F0        6247            movx    @dptr,a
1D7B           6248   L043022?:
1D7B           6249   ;        main.c:1229: printf("current angle: %03d\r\n", (int)curr_angle);
1D7B 904ED0    6250            mov     dptr,#_curr_angle
1D7E E0        6251            movx    a,@dptr
1D7F FA        6252            mov     r2,a
1D80 A3        6253            inc     dptr
1D81 E0        6254            movx    a,@dptr
1D82 FB        6255            mov     r3,a
1D83 A3        6256            inc     dptr
1D84 E0        6257            movx    a,@dptr
1D85 FC        6258            mov     r4,a
1D86 A3        6259            inc     dptr
1D87 E0        6260            movx    a,@dptr
1D88 8A82      6261            mov     dpl,r2
1D8A 8B83      6262            mov     dph,r3
1D8C 8CF0      6263            mov     b,r4
1D8E 120000    6264            lcall   ___fs2sint
1D91 AA82      6265            mov     r2,dpl
1D93 AB83      6266            mov     r3,dph
1D95 C002      6267            push    ar2
1D97 C003      6268            push    ar3
1D99 7490      6269            mov     a,#__str_9
1D9B C0E0      6270            push    acc
1D9D 741E      6271            mov     a,#(__str_9 >> 8)
1D9F C0E0      6272            push    acc
1DA1 7480      6273            mov     a,#0x80
1DA3 C0E0      6274            push    acc
1DA5 120000    6275            lcall   _printf
1DA8 E581      6276            mov     a,sp
1DAA 24FB      6277            add     a,#0xfb
1DAC F581      6278            mov     sp,a
1DAE 020000    6279            ljmp    L043026?
1DB1           6280   L043028?:
1DB1           6281   ;        main.c:1234: dummy = 0;
1DB1 90D418    6282            mov     dptr,#_Auto_mode_slave_dummy_1_233
1DB4 E4        6283            clr     a
1DB5 F0        6284            movx    @dptr,a
1DB6 A3        6285            inc     dptr
1DB7 F0        6286            movx    @dptr,a
1DB8           6287   ;        main.c:1235: while(1){          
1DB8 7A00      6288            mov     r2,#0x00
1DBA 7B00      6289            mov     r3,#0x00
1DBC           6290   L043036?:
1DBC           6291   ;        main.c:1237: if(RXU1()){
1DBC C002      6292            push    ar2
1DBE C003      6293            push    ar3
1DC0 120000    6294            lcall   _RXU1
1DC3 D003      6295            pop     ar3
1DC5 D002      6296            pop     ar2
1DC7 4000      6297            jc      L043077?
1DC9 020000    6298            ljmp    L043032?
1DCC           6299   L043077?:
1DCC           6300   ;        main.c:1238: c=getchar1();      
1DCC C002      6301            push    ar2
1DCE C003      6302            push    ar3
1DD0 120000    6303            lcall   _getchar1
1DD3 AC82      6304            mov     r4,dpl
1DD5 D003      6305            pop     ar3
1DD7 D002      6306            pop     ar2
1DD9           6307   ;        main.c:1239: if(c=='@'){
1DD9 BC4090    6308            cjne    r4,#0x40,L043078?
1DDC 8000      6309            sjmp    L043079?
1DDE           6310   L043078?:
1DDE 020000    6311            ljmp    L043032?
1DE1           6312   L043079?:
1DE1           6313   ;        main.c:1240: dummy++;
1DE1 0A        6314            inc     r2
1DE2 BA0010    6315            cjne    r2,#0x00,L043080?
1DE5 0B        6316            inc     r3
1DE6           6317   L043080?:
1DE6 90D418    6318            mov     dptr,#_Auto_mode_slave_dummy_1_233
1DE9 EA        6319            mov     a,r2
1DEA F0        6320            movx    @dptr,a
1DEB A3        6321            inc     dptr
1DEC EB        6322            mov     a,r3
1DED F0        6323            movx    @dptr,a
1DEE           6324   ;        main.c:1241: sprintf(buff, "%01d,20,%ld,%05d,%03d,%03d,%03d\n", state_res,freq100, weight, (int)curr_angle,pwm_left,pwm_right);
1DEE 905220    6325            mov     dptr,#_pwm_right
1DF1 E0        6326            movx    a,@dptr
1DF2 FC        6327            mov     r4,a
1DF3 8CD0      6328            mov     _Auto_mode_slave_sloc2_1_0,r4
1DF5 75D100    6329            mov     (_Auto_mode_slave_sloc2_1_0 + 1),#0x00
1DF8 905260    6330            mov     dptr,#_pwm_left
1DFB E0        6331            movx    a,@dptr
1DFC FE        6332            mov     r6,a
1DFD 8E20      6333            mov     _Auto_mode_slave_sloc3_1_0,r6
1DFF 752100    6334            mov     (_Auto_mode_slave_sloc3_1_0 + 1),#0x00
1E02 904ED0    6335            mov     dptr,#_curr_angle
1E05 E0        6336            movx    a,@dptr
1E06 FE        6337            mov     r6,a
1E07 A3        6338            inc     dptr
1E08 E0        6339            movx    a,@dptr
1E09 FF        6340            mov     r7,a
1E0A A3        6341            inc     dptr
1E0B E0        6342            movx    a,@dptr
1E0C FC        6343            mov     r4,a
1E0D A3        6344            inc     dptr
1E0E E0        6345            movx    a,@dptr
1E0F 8E82      6346            mov     dpl,r6
1E11 8F83      6347            mov     dph,r7
1E13 8CF0      6348            mov     b,r4
1E15 C002      6349            push    ar2
1E17 C003      6350            push    ar3
1E19 120000    6351            lcall   ___fs2sint
1E1C AC82      6352            mov     r4,dpl
1E1E AD83      6353            mov     r5,dph
1E20 C0D0      6354            push    _Auto_mode_slave_sloc2_1_0
1E22 C0D1      6355            push    (_Auto_mode_slave_sloc2_1_0 + 1)
1E24 C020      6356            push    _Auto_mode_slave_sloc3_1_0
1E26 C021      6357            push    (_Auto_mode_slave_sloc3_1_0 + 1)
1E28 C004      6358            push    ar4
1E2A C005      6359            push    ar5
1E2C 904D90    6360            mov     dptr,#_weight
1E2F E0        6361            movx    a,@dptr
1E30 C0E0      6362            push    acc
1E32 A3        6363            inc     dptr
1E33 E0        6364            movx    a,@dptr
1E34 C0E0      6365            push    acc
1E36 905720    6366            mov     dptr,#_freq100
1E39 E0        6367            movx    a,@dptr
1E3A C0E0      6368            push    acc
1E3C A3        6369            inc     dptr
1E3D E0        6370            movx    a,@dptr
1E3E C0E0      6371            push    acc
1E40 A3        6372            inc     dptr
1E41 E0        6373            movx    a,@dptr
1E42 C0E0      6374            push    acc
1E44 A3        6375            inc     dptr
1E45 E0        6376            movx    a,@dptr
1E46 C0E0      6377            push    acc
1E48 90D3C8    6378            mov     dptr,#_Auto_mode_slave_state_res_1_233
1E4B E0        6379            movx    a,@dptr
1E4C C0E0      6380            push    acc
1E4E A3        6381            inc     dptr
1E4F E0        6382            movx    a,@dptr
1E50 C0E0      6383            push    acc
1E52 7450      6384            mov     a,#__str_10
1E54 C0E0      6385            push    acc
1E56 7420      6386            mov     a,#(__str_10 >> 8)
1E58 C0E0      6387            push    acc
1E5A 7480      6388            mov     a,#0x80
1E5C C0E0      6389            push    acc
1E5E 7460      6390            mov     a,#_buff
1E60 C0E0      6391            push    acc
1E62 7457      6392            mov     a,#(_buff >> 8)
1E64 C0E0      6393            push    acc
1E66 7440      6394            mov     a,#0x40
1E68 C0E0      6395            push    acc
1E6A 120000    6396            lcall   _sprintf
1E6D E581      6397            mov     a,sp
1E6F 24EC      6398            add     a,#0xec
1E71 F581      6399            mov     sp,a
1E73           6400   ;        main.c:1242: printf("%s\r\n",buff);
1E73 7460      6401            mov     a,#_buff
1E75 C0E0      6402            push    acc
1E77 7457      6403            mov     a,#(_buff >> 8)
1E79 C0E0      6404            push    acc
1E7B 7440      6405            mov     a,#0x40
1E7D C0E0      6406            push    acc
1E7F 7480      6407            mov     a,#__str_7
1E81 C0E0      6408            push    acc
1E83 741B      6409            mov     a,#(__str_7 >> 8)
1E85 C0E0      6410            push    acc
1E87 7480      6411            mov     a,#0x80
1E89 C0E0      6412            push    acc
1E8B 120000    6413            lcall   _printf
1E8E E581      6414            mov     a,sp
1E90 24FA      6415            add     a,#0xfa
1E92 F581      6416            mov     sp,a
1E94           6417   ;        main.c:1243: waitms(5); 
1E94 900005    6418            mov     dptr,#0x0005
1E97 120000    6419            lcall   _waitms
1E9A           6420   ;        main.c:1244: sendstr1(buff);
1E9A 905760    6421            mov     dptr,#_buff
1E9D 75F040    6422            mov     b,#0x40
1EA0 120000    6423            lcall   _sendstr1
1EA3 D003      6424            pop     ar3
1EA5 D002      6425            pop     ar2
1EA7           6426   L043032?:
1EA7           6427   ;        main.c:1247: if(dummy==5)break;
1EA7 BA0590    6428            cjne    r2,#0x05,L043081?
1EAA BB0090    6429            cjne    r3,#0x00,L043081?
1EAD 8000      6430            sjmp    L043082?
1EAF           6431   L043081?:
1EAF 020000    6432            ljmp    L043036?
1EB2           6433   L043082?:
1EB2 90D418    6434            mov     dptr,#_Auto_mode_slave_dummy_1_233
1EB5 EA        6435            mov     a,r2
1EB6 F0        6436            movx    @dptr,a
1EB7 A3        6437            inc     dptr
1EB8 EB        6438            mov     a,r3
1EB9 F0        6439            movx    @dptr,a
1EBA 22        6440            ret
1EBB           6441   ;------------------------------------------------------------
1EBB           6442   ;Allocation info for local variables in function 'Joystick_Control'
1EBB           6443   ;------------------------------------------------------------
1EBB           6444   ;vy_ptr                    Allocated with name '_Joystick_Control_PARM_2'
1EBB           6445   ;vx_ptr                    Allocated to registers r2 r3 r4 
1EBB           6446   ;sloc0                     Allocated with name '_Joystick_Control_sloc0_1_0'
1EBB           6447   ;sloc1                     Allocated with name '_Joystick_Control_sloc1_1_0'
1EBB           6448   ;sloc2                     Allocated with name '_Joystick_Control_sloc2_1_0'
1EBB           6449   ;sloc3                     Allocated with name '_Joystick_Control_sloc3_1_0'
1EBB           6450   ;sloc4                     Allocated with name '_Joystick_Control_sloc4_1_0'
1EBB           6451   ;sloc5                     Allocated with name '_Joystick_Control_sloc5_1_0'
1EBB           6452   ;vx_error                  Allocated with name '_Joystick_Control_vx_error_1_246'
1EBB           6453   ;vy_error                  Allocated with name '_Joystick_Control_vy_error_1_246'
1EBB           6454   ;vx_err                    Allocated with name '_Joystick_Control_vx_err_1_246'
1EBB           6455   ;vy_err                    Allocated with name '_Joystick_Control_vy_err_1_246'
1EBB           6456   ;------------------------------------------------------------
1EBB           6457   ;        main.c:1252: float Joystick_Control(int *vx_ptr, int *vy_ptr)
1EBB           6458   ;        -----------------------------------------
1EBB           6459   ;         function Joystick_Control
1EBB           6460   ;        -----------------------------------------
1EBB           6461   _Joystick_Control:
1EBB           6462   ;        main.c:1256: vx = *vx_ptr; 
1EBB 120000    6463            lcall   __gptrget
1EBE FA        6464            mov     r2,a
1EBF A3        6465            inc     dptr
1EC0 120000    6466            lcall   __gptrget
1EC3 FB        6467            mov     r3,a
1EC4 905060    6468            mov     dptr,#_vx
1EC7 EA        6469            mov     a,r2
1EC8 F0        6470            movx    @dptr,a
1EC9 A3        6471            inc     dptr
1ECA EB        6472            mov     a,r3
1ECB F0        6473            movx    @dptr,a
1ECC           6474   ;        main.c:1257: vy = *vy_ptr; 
1ECC AAB0      6475            mov     r2,_Joystick_Control_PARM_2
1ECE ABB1      6476            mov     r3,(_Joystick_Control_PARM_2 + 1)
1ED0 ACB2      6477            mov     r4,(_Joystick_Control_PARM_2 + 2)
1ED2 8A82      6478            mov     dpl,r2
1ED4 8B83      6479            mov     dph,r3
1ED6 8CF0      6480            mov     b,r4
1ED8 120000    6481            lcall   __gptrget
1EDB FA        6482            mov     r2,a
1EDC A3        6483            inc     dptr
1EDD 120000    6484            lcall   __gptrget
1EE0 FB        6485            mov     r3,a
1EE1 905020    6486            mov     dptr,#_vy
1EE4 EA        6487            mov     a,r2
1EE5 F0        6488            movx    @dptr,a
1EE6 A3        6489            inc     dptr
1EE7 EB        6490            mov     a,r3
1EE8 F0        6491            movx    @dptr,a
1EE9           6492   ;        main.c:1260: raw_angle = Read_angle();
1EE9 120000    6493            lcall   _Read_angle
1EEC AA82      6494            mov     r2,dpl
1EEE AB83      6495            mov     r3,dph
1EF0 ACF0      6496            mov     r4,b
1EF2 FD        6497            mov     r5,a
1EF3 904E90    6498            mov     dptr,#_raw_angle
1EF6 EA        6499            mov     a,r2
1EF7 F0        6500            movx    @dptr,a
1EF8 A3        6501            inc     dptr
1EF9 EB        6502            mov     a,r3
1EFA F0        6503            movx    @dptr,a
1EFB A3        6504            inc     dptr
1EFC EC        6505            mov     a,r4
1EFD F0        6506            movx    @dptr,a
1EFE A3        6507            inc     dptr
1EFF ED        6508            mov     a,r5
1F00 F0        6509            movx    @dptr,a
1F01           6510   ;        main.c:1263: vx_error = abs(vx-vx_thres)*100/vx_thres; 
1F01 9050E0    6511            mov     dptr,#_vx_thres
1F04 E0        6512            movx    a,@dptr
1F05 FA        6513            mov     r2,a
1F06 A3        6514            inc     dptr
1F07 E0        6515            movx    a,@dptr
1F08 FB        6516            mov     r3,a
1F09 905060    6517            mov     dptr,#_vx
1F0C E0        6518            movx    a,@dptr
1F0D FC        6519            mov     r4,a
1F0E A3        6520            inc     dptr
1F0F E0        6521            movx    a,@dptr
1F10 FD        6522            mov     r5,a
1F11 EC        6523            mov     a,r4
1F12 C3        6524            clr     c
1F13 9A        6525            subb    a,r2
1F14 F582      6526            mov     dpl,a
1F16 ED        6527            mov     a,r5
1F17 9B        6528            subb    a,r3
1F18 F583      6529            mov     dph,a
1F1A 120000    6530            lcall   _abs
1F1D 858200    6531            mov     __mulint_PARM_2,dpl
1F20 858301    6532            mov     (__mulint_PARM_2 + 1),dph
1F23 900064    6533            mov     dptr,#0x0064
1F26 120000    6534            lcall   __mulint
1F29 AA82      6535            mov     r2,dpl
1F2B AB83      6536            mov     r3,dph
1F2D 9050E0    6537            mov     dptr,#_vx_thres
1F30 E0        6538            movx    a,@dptr
1F31 F500      6539            mov     __divsint_PARM_2,a
1F33 A3        6540            inc     dptr
1F34 E0        6541            movx    a,@dptr
1F35 F501      6542            mov     (__divsint_PARM_2 + 1),a
1F37 8A82      6543            mov     dpl,r2
1F39 8B83      6544            mov     dph,r3
1F3B 120000    6545            lcall   __divsint
1F3E E582      6546            mov     a,dpl
1F40 8583F0    6547            mov     b,dph
1F43 90D478    6548            mov     dptr,#_Joystick_Control_vx_error_1_246
1F46 F0        6549            movx    @dptr,a
1F47 A3        6550            inc     dptr
1F48 E5F0      6551            mov     a,b
1F4A F0        6552            movx    @dptr,a
1F4B           6553   ;        main.c:1264: vy_error = abs(vy-vy_thres)*100/vy_thres; 
1F4B 9050A0    6554            mov     dptr,#_vy_thres
1F4E E0        6555            movx    a,@dptr
1F4F FA        6556            mov     r2,a
1F50 A3        6557            inc     dptr
1F51 E0        6558            movx    a,@dptr
1F52 FB        6559            mov     r3,a
1F53 905020    6560            mov     dptr,#_vy
1F56 E0        6561            movx    a,@dptr
1F57 FC        6562            mov     r4,a
1F58 A3        6563            inc     dptr
1F59 E0        6564            movx    a,@dptr
1F5A FD        6565            mov     r5,a
1F5B EC        6566            mov     a,r4
1F5C C3        6567            clr     c
1F5D 9A        6568            subb    a,r2
1F5E F582      6569            mov     dpl,a
1F60 ED        6570            mov     a,r5
1F61 9B        6571            subb    a,r3
1F62 F583      6572            mov     dph,a
1F64 120000    6573            lcall   _abs
1F67 858200    6574            mov     __mulint_PARM_2,dpl
1F6A 858301    6575            mov     (__mulint_PARM_2 + 1),dph
1F6D 900064    6576            mov     dptr,#0x0064
1F70 120000    6577            lcall   __mulint
1F73 AA82      6578            mov     r2,dpl
1F75 AB83      6579            mov     r3,dph
1F77 9050A0    6580            mov     dptr,#_vy_thres
1F7A E0        6581            movx    a,@dptr
1F7B FC        6582            mov     r4,a
1F7C A3        6583            inc     dptr
1F7D E0        6584            movx    a,@dptr
1F7E FD        6585            mov     r5,a
1F7F 8C00      6586            mov     __divsint_PARM_2,r4
1F81 8D01      6587            mov     (__divsint_PARM_2 + 1),r5
1F83 8A82      6588            mov     dpl,r2
1F85 8B83      6589            mov     dph,r3
1F87 C004      6590            push    ar4
1F89 C005      6591            push    ar5
1F8B 120000    6592            lcall   __divsint
1F8E AA82      6593            mov     r2,dpl
1F90 AB83      6594            mov     r3,dph
1F92 D005      6595            pop     ar5
1F94 D004      6596            pop     ar4
1F96 90D4D8    6597            mov     dptr,#_Joystick_Control_vy_error_1_246
1F99 EA        6598            mov     a,r2
1F9A F0        6599            movx    @dptr,a
1F9B A3        6600            inc     dptr
1F9C EB        6601            mov     a,r3
1F9D F0        6602            movx    @dptr,a
1F9E           6603   ;        main.c:1265: vx_err = vx-vx_thres; 
1F9E 9050E0    6604            mov     dptr,#_vx_thres
1FA1 E0        6605            movx    a,@dptr
1FA2 FE        6606            mov     r6,a
1FA3 A3        6607            inc     dptr
1FA4 E0        6608            movx    a,@dptr
1FA5 FF        6609            mov     r7,a
1FA6 905060    6610            mov     dptr,#_vx
1FA9 E0        6611            movx    a,@dptr
1FAA F8        6612            mov     r0,a
1FAB A3        6613            inc     dptr
1FAC E0        6614            movx    a,@dptr
1FAD F9        6615            mov     r1,a
1FAE E8        6616            mov     a,r0
1FAF C3        6617            clr     c
1FB0 9E        6618            subb    a,r6
1FB1 FE        6619            mov     r6,a
1FB2 E9        6620            mov     a,r1
1FB3 9F        6621            subb    a,r7
1FB4 FF        6622            mov     r7,a
1FB5 90D528    6623            mov     dptr,#_Joystick_Control_vx_err_1_246
1FB8 EE        6624            mov     a,r6
1FB9 F0        6625            movx    @dptr,a
1FBA A3        6626            inc     dptr
1FBB EF        6627            mov     a,r7
1FBC F0        6628            movx    @dptr,a
1FBD           6629   ;        main.c:1266: vy_err = vy-vy_thres; 
1FBD 905020    6630            mov     dptr,#_vy
1FC0 E0        6631            movx    a,@dptr
1FC1 F8        6632            mov     r0,a
1FC2 A3        6633            inc     dptr
1FC3 E0        6634            movx    a,@dptr
1FC4 F9        6635            mov     r1,a
1FC5 E8        6636            mov     a,r0
1FC6 C3        6637            clr     c
1FC7 9C        6638            subb    a,r4
1FC8 F570      6639            mov     _Joystick_Control_sloc0_1_0,a
1FCA E9        6640            mov     a,r1
1FCB 9D        6641            subb    a,r5
1FCC F571      6642            mov     (_Joystick_Control_sloc0_1_0 + 1),a
1FCE 90D578    6643            mov     dptr,#_Joystick_Control_vy_err_1_246
1FD1 E570      6644            mov     a,_Joystick_Control_sloc0_1_0
1FD3 F0        6645            movx    @dptr,a
1FD4 A3        6646            inc     dptr
1FD5 E571      6647            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
1FD7 F0        6648            movx    @dptr,a
1FD8           6649   ;        main.c:1267: pwm_left = 0; 
1FD8 905260    6650            mov     dptr,#_pwm_left
1FDB           6651   ;        main.c:1268: pwm_right = 0; 
1FDB E4        6652            clr     a
1FDC F0        6653            movx    @dptr,a
1FDD 905220    6654            mov     dptr,#_pwm_right
1FE0 F0        6655            movx    @dptr,a
1FE1           6656   ;        main.c:1270: if ((vy_error>5) && (vx_error<5)){
1FE1 C3        6657            clr     c
1FE2 7405      6658            mov     a,#0x05
1FE4 9A        6659            subb    a,r2
1FE5 E4        6660            clr     a
1FE6 6480      6661            xrl     a,#0x80
1FE8 8BF0      6662            mov     b,r3
1FEA 63F080    6663            xrl     b,#0x80
1FED 95F0      6664            subb    a,b
1FEF E4        6665            clr     a
1FF0 33        6666            rlc     a
1FF1 F510      6667            mov     _Joystick_Control_sloc2_1_0,a
1FF3 7000      6668            jnz     L044062?
1FF5 020000    6669            ljmp    L044005?
1FF8           6670   L044062?:
1FF8 90D478    6671            mov     dptr,#_Joystick_Control_vx_error_1_246
1FFB E0        6672            movx    a,@dptr
1FFC F9        6673            mov     r1,a
1FFD A3        6674            inc     dptr
1FFE E0        6675            movx    a,@dptr
1FFF F8        6676            mov     r0,a
2000 C3        6677            clr     c
2001 E9        6678            mov     a,r1
2002 9405      6679            subb    a,#0x05
2004 E8        6680            mov     a,r0
2005 6480      6681            xrl     a,#0x80
2007 9480      6682            subb    a,#0x80
2009 4000      6683            jc      L044063?
200B 020000    6684            ljmp    L044005?
200E           6685   L044063?:
200E           6686   ;        main.c:1271: pwm_left = vy_error; 
200E 905260    6687            mov     dptr,#_pwm_left
2011 EA        6688            mov     a,r2
2012 F0        6689            movx    @dptr,a
2013           6690   ;        main.c:1272: pwm_right = vy_error * pwm_corr; 
2013 8A82      6691            mov     dpl,r2
2015 8B83      6692            mov     dph,r3
2017 C002      6693            push    ar2
2019 C003      6694            push    ar3
201B C006      6695            push    ar6
201D C007      6696            push    ar7
201F 120000    6697            lcall   ___sint2fs
2022 A982      6698            mov     r1,dpl
2024 A883      6699            mov     r0,dph
2026 ACF0      6700            mov     r4,b
2028 FD        6701            mov     r5,a
2029 904F10    6702            mov     dptr,#_pwm_corr
202C E0        6703            movx    a,@dptr
202D C0E0      6704            push    acc
202F A3        6705            inc     dptr
2030 E0        6706            movx    a,@dptr
2031 C0E0      6707            push    acc
2033 A3        6708            inc     dptr
2034 E0        6709            movx    a,@dptr
2035 C0E0      6710            push    acc
2037 A3        6711            inc     dptr
2038 E0        6712            movx    a,@dptr
2039 C0E0      6713            push    acc
203B 8982      6714            mov     dpl,r1
203D 8883      6715            mov     dph,r0
203F 8CF0      6716            mov     b,r4
2041 ED        6717            mov     a,r5
2042 120000    6718            lcall   ___fsmul
2045 AC82      6719            mov     r4,dpl
2047 AD83      6720            mov     r5,dph
2049 A8F0      6721            mov     r0,b
204B F9        6722            mov     r1,a
204C E581      6723            mov     a,sp
204E 24FC      6724            add     a,#0xfc
2050 F581      6725            mov     sp,a
2052 8C82      6726            mov     dpl,r4
2054 8D83      6727            mov     dph,r5
2056 88F0      6728            mov     b,r0
2058 E9        6729            mov     a,r1
2059 120000    6730            lcall   ___fs2uchar
205C 8582C0    6731            mov     _Joystick_Control_sloc1_1_0,dpl
205F D007      6732            pop     ar7
2061 D006      6733            pop     ar6
2063 D003      6734            pop     ar3
2065 D002      6735            pop     ar2
2067 905220    6736            mov     dptr,#_pwm_right
206A E5C0      6737            mov     a,_Joystick_Control_sloc1_1_0
206C F0        6738            movx    @dptr,a
206D           6739   ;        main.c:1273: if (vy_err > 0){ //move forward
206D C3        6740            clr     c
206E E4        6741            clr     a
206F 9570      6742            subb    a,_Joystick_Control_sloc0_1_0
2071 E4        6743            clr     a
2072 6480      6744            xrl     a,#0x80
2074 8571F0    6745            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
2077 63F080    6746            xrl     b,#0x80
207A 95F0      6747            subb    a,b
207C 5000      6748            jnc     L044002?
207E           6749   ;        main.c:1274: L_motor_dir = 0; 
207E 9051E0    6750            mov     dptr,#_L_motor_dir
2081           6751   ;        main.c:1275: R_motor_dir = 0; 
2081 E4        6752            clr     a
2082 F0        6753            movx    @dptr,a
2083 9051A0    6754            mov     dptr,#_R_motor_dir
2086 F0        6755            movx    @dptr,a
2087 8000      6756            sjmp    L044005?
2089           6757   L044002?:
2089           6758   ;        main.c:1278: L_motor_dir = 1; 
2089 9051E0    6759            mov     dptr,#_L_motor_dir
208C 7401      6760            mov     a,#0x01
208E F0        6761            movx    @dptr,a
208F           6762   ;        main.c:1279: R_motor_dir = 1; 
208F 9051A0    6763            mov     dptr,#_R_motor_dir
2092 7401      6764            mov     a,#0x01
2094 F0        6765            movx    @dptr,a
2095           6766   ;        main.c:1280: pwm_right *= 1.05;
2095 85C082    6767            mov     dpl,_Joystick_Control_sloc1_1_0
2098 C002      6768            push    ar2
209A C003      6769            push    ar3
209C C006      6770            push    ar6
209E C007      6771            push    ar7
20A0 120000    6772            lcall   ___uchar2fs
20A3 AC82      6773            mov     r4,dpl
20A5 AD83      6774            mov     r5,dph
20A7 A9F0      6775            mov     r1,b
20A9 F8        6776            mov     r0,a
20AA C004      6777            push    ar4
20AC C005      6778            push    ar5
20AE C001      6779            push    ar1
20B0 C000      6780            push    ar0
20B2 906666    6781            mov     dptr,#0x6666
20B5 75F086    6782            mov     b,#0x86
20B8 743F      6783            mov     a,#0x3F
20BA 120000    6784            lcall   ___fsmul
20BD AC82      6785            mov     r4,dpl
20BF AD83      6786            mov     r5,dph
20C1 A8F0      6787            mov     r0,b
20C3 F9        6788            mov     r1,a
20C4 E581      6789            mov     a,sp
20C6 24FC      6790            add     a,#0xfc
20C8 F581      6791            mov     sp,a
20CA 8C82      6792            mov     dpl,r4
20CC 8D83      6793            mov     dph,r5
20CE 88F0      6794            mov     b,r0
20D0 E9        6795            mov     a,r1
20D1 120000    6796            lcall   ___fs2uchar
20D4 E582      6797            mov     a,dpl
20D6 D007      6798            pop     ar7
20D8 D006      6799            pop     ar6
20DA D003      6800            pop     ar3
20DC D002      6801            pop     ar2
20DE 905220    6802            mov     dptr,#_pwm_right
20E1 F0        6803            movx    @dptr,a
20E2           6804   ;        main.c:1364: return curr_angle; 
20E2           6805   ;        main.c:1280: pwm_right *= 1.05;
20E2           6806   L044005?:
20E2           6807   ;        main.c:1283: if ((vx_error>5)&&(vy_error<5)){
20E2 90D478    6808            mov     dptr,#_Joystick_Control_vx_error_1_246
20E5 E0        6809            movx    a,@dptr
20E6 FC        6810            mov     r4,a
20E7 A3        6811            inc     dptr
20E8 E0        6812            movx    a,@dptr
20E9 FD        6813            mov     r5,a
20EA C3        6814            clr     c
20EB 7405      6815            mov     a,#0x05
20ED 9C        6816            subb    a,r4
20EE E4        6817            clr     a
20EF 6480      6818            xrl     a,#0x80
20F1 8DF0      6819            mov     b,r5
20F3 63F080    6820            xrl     b,#0x80
20F6 95F0      6821            subb    a,b
20F8 E4        6822            clr     a
20F9 33        6823            rlc     a
20FA F9        6824            mov     r1,a
20FB 7000      6825            jnz     L044065?
20FD 020000    6826            ljmp    L044015?
2100           6827   L044065?:
2100 C3        6828            clr     c
2101 EA        6829            mov     a,r2
2102 9405      6830            subb    a,#0x05
2104 EB        6831            mov     a,r3
2105 6480      6832            xrl     a,#0x80
2107 9480      6833            subb    a,#0x80
2109 4000      6834            jc      L044066?
210B 020000    6835            ljmp    L044015?
210E           6836   L044066?:
210E           6837   ;        main.c:1285: pwm_left = vx_error; 
210E C001      6838            push    ar1
2110 905260    6839            mov     dptr,#_pwm_left
2113 EC        6840            mov     a,r4
2114 F0        6841            movx    @dptr,a
2115           6842   ;        main.c:1286: pwm_right = vx_error * pwm_corr; 
2115 8C82      6843            mov     dpl,r4
2117 8D83      6844            mov     dph,r5
2119 C004      6845            push    ar4
211B C005      6846            push    ar5
211D C006      6847            push    ar6
211F C007      6848            push    ar7
2121 120000    6849            lcall   ___sint2fs
2124 AA82      6850            mov     r2,dpl
2126 AB83      6851            mov     r3,dph
2128 A9F0      6852            mov     r1,b
212A F8        6853            mov     r0,a
212B 904F10    6854            mov     dptr,#_pwm_corr
212E E0        6855            movx    a,@dptr
212F C0E0      6856            push    acc
2131 A3        6857            inc     dptr
2132 E0        6858            movx    a,@dptr
2133 C0E0      6859            push    acc
2135 A3        6860            inc     dptr
2136 E0        6861            movx    a,@dptr
2137 C0E0      6862            push    acc
2139 A3        6863            inc     dptr
213A E0        6864            movx    a,@dptr
213B C0E0      6865            push    acc
213D 8A82      6866            mov     dpl,r2
213F 8B83      6867            mov     dph,r3
2141 89F0      6868            mov     b,r1
2143 E8        6869            mov     a,r0
2144 120000    6870            lcall   ___fsmul
2147 AA82      6871            mov     r2,dpl
2149 AB83      6872            mov     r3,dph
214B A8F0      6873            mov     r0,b
214D F9        6874            mov     r1,a
214E E581      6875            mov     a,sp
2150 24FC      6876            add     a,#0xfc
2152 F581      6877            mov     sp,a
2154 8A82      6878            mov     dpl,r2
2156 8B83      6879            mov     dph,r3
2158 88F0      6880            mov     b,r0
215A E9        6881            mov     a,r1
215B C001      6882            push    ar1
215D 120000    6883            lcall   ___fs2uchar
2160 E582      6884            mov     a,dpl
2162 D001      6885            pop     ar1
2164 D007      6886            pop     ar7
2166 D006      6887            pop     ar6
2168 D005      6888            pop     ar5
216A D004      6889            pop     ar4
216C 905220    6890            mov     dptr,#_pwm_right
216F F0        6891            movx    @dptr,a
2170           6892   ;        main.c:1287: if (vx_err > 0){ //turn right
2170 C3        6893            clr     c
2171 E4        6894            clr     a
2172 9E        6895            subb    a,r6
2173 E4        6896            clr     a
2174 6480      6897            xrl     a,#0x80
2176 8FF0      6898            mov     b,r7
2178 63F080    6899            xrl     b,#0x80
217B 95F0      6900            subb    a,b
217D D001      6901            pop     ar1
217F 4000      6902            jc      L044067?
2181 020000    6903            ljmp    L044008?
2184           6904   L044067?:
2184           6905   ;        main.c:1288: L_motor_dir = 1; 
2184 C001      6906            push    ar1
2186 9051E0    6907            mov     dptr,#_L_motor_dir
2189 7401      6908            mov     a,#0x01
218B F0        6909            movx    @dptr,a
218C           6910   ;        main.c:1289: R_motor_dir = 0;
218C 9051A0    6911            mov     dptr,#_R_motor_dir
218F E4        6912            clr     a
2190 F0        6913            movx    @dptr,a
2191           6914   ;        main.c:1290: curr_angle += angle_diff * 1.45; // TUNE THIS
2191 C004      6915            push    ar4
2193 C005      6916            push    ar5
2195 C001      6917            push    ar1
2197 904E10    6918            mov     dptr,#_angle_diff
219A E0        6919            movx    a,@dptr
219B C0E0      6920            push    acc
219D A3        6921            inc     dptr
219E E0        6922            movx    a,@dptr
219F C0E0      6923            push    acc
21A1 A3        6924            inc     dptr
21A2 E0        6925            movx    a,@dptr
21A3 C0E0      6926            push    acc
21A5 A3        6927            inc     dptr
21A6 E0        6928            movx    a,@dptr
21A7 C0E0      6929            push    acc
21A9 90999A    6930            mov     dptr,#0x999A
21AC 75F0B9    6931            mov     b,#0xB9
21AF 743F      6932            mov     a,#0x3F
21B1 120000    6933            lcall   ___fsmul
21B4 858260    6934            mov     _Joystick_Control_sloc3_1_0,dpl
21B7 858361    6935            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
21BA 85F062    6936            mov     (_Joystick_Control_sloc3_1_0 + 2),b
21BD F563      6937            mov     (_Joystick_Control_sloc3_1_0 + 3),a
21BF E581      6938            mov     a,sp
21C1 24FC      6939            add     a,#0xfc
21C3 F581      6940            mov     sp,a
21C5 D001      6941            pop     ar1
21C7 904ED0    6942            mov     dptr,#_curr_angle
21CA E0        6943            movx    a,@dptr
21CB F8        6944            mov     r0,a
21CC A3        6945            inc     dptr
21CD E0        6946            movx    a,@dptr
21CE F9        6947            mov     r1,a
21CF A3        6948            inc     dptr
21D0 E0        6949            movx    a,@dptr
21D1 FA        6950            mov     r2,a
21D2 A3        6951            inc     dptr
21D3 E0        6952            movx    a,@dptr
21D4 FB        6953            mov     r3,a
21D5 C001      6954            push    ar1
21D7 C060      6955            push    _Joystick_Control_sloc3_1_0
21D9 C061      6956            push    (_Joystick_Control_sloc3_1_0 + 1)
21DB C062      6957            push    (_Joystick_Control_sloc3_1_0 + 2)
21DD C063      6958            push    (_Joystick_Control_sloc3_1_0 + 3)
21DF 8882      6959            mov     dpl,r0
21E1 8983      6960            mov     dph,r1
21E3 8AF0      6961            mov     b,r2
21E5 EB        6962            mov     a,r3
21E6 120000    6963            lcall   ___fsadd
21E9 AA82      6964            mov     r2,dpl
21EB AB83      6965            mov     r3,dph
21ED AEF0      6966            mov     r6,b
21EF FF        6967            mov     r7,a
21F0 E581      6968            mov     a,sp
21F2 24FC      6969            add     a,#0xfc
21F4 F581      6970            mov     sp,a
21F6 D001      6971            pop     ar1
21F8 D005      6972            pop     ar5
21FA D004      6973            pop     ar4
21FC 904ED0    6974            mov     dptr,#_curr_angle
21FF EA        6975            mov     a,r2
2200 F0        6976            movx    @dptr,a
2201 A3        6977            inc     dptr
2202 EB        6978            mov     a,r3
2203 F0        6979            movx    @dptr,a
2204 A3        6980            inc     dptr
2205 EE        6981            mov     a,r6
2206 F0        6982            movx    @dptr,a
2207 A3        6983            inc     dptr
2208 EF        6984            mov     a,r7
2209 F0        6985            movx    @dptr,a
220A D001      6986            pop     ar1
220C 020000    6987            ljmp    L044009?
220F           6988   L044008?:
220F           6989   ;        main.c:1293: L_motor_dir = 0; 
220F C001      6990            push    ar1
2211 9051E0    6991            mov     dptr,#_L_motor_dir
2214 E4        6992            clr     a
2215 F0        6993            movx    @dptr,a
2216           6994   ;        main.c:1294: R_motor_dir = 1; 
2216 9051A0    6995            mov     dptr,#_R_motor_dir
2219 7401      6996            mov     a,#0x01
221B F0        6997            movx    @dptr,a
221C           6998   ;        main.c:1295: curr_angle -= angle_diff * 1.4; // TUNE THIS
221C C004      6999            push    ar4
221E C005      7000            push    ar5
2220 C001      7001            push    ar1
2222 904E10    7002            mov     dptr,#_angle_diff
2225 E0        7003            movx    a,@dptr
2226 C0E0      7004            push    acc
2228 A3        7005            inc     dptr
2229 E0        7006            movx    a,@dptr
222A C0E0      7007            push    acc
222C A3        7008            inc     dptr
222D E0        7009            movx    a,@dptr
222E C0E0      7010            push    acc
2230 A3        7011            inc     dptr
2231 E0        7012            movx    a,@dptr
2232 C0E0      7013            push    acc
2234 903333    7014            mov     dptr,#0x3333
2237 75F0B3    7015            mov     b,#0xB3
223A 743F      7016            mov     a,#0x3F
223C 120000    7017            lcall   ___fsmul
223F 858260    7018            mov     _Joystick_Control_sloc3_1_0,dpl
2242 858361    7019            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
2245 85F062    7020            mov     (_Joystick_Control_sloc3_1_0 + 2),b
2248 F563      7021            mov     (_Joystick_Control_sloc3_1_0 + 3),a
224A E581      7022            mov     a,sp
224C 24FC      7023            add     a,#0xfc
224E F581      7024            mov     sp,a
2250 D001      7025            pop     ar1
2252 904ED0    7026            mov     dptr,#_curr_angle
2255 E0        7027            movx    a,@dptr
2256 F8        7028            mov     r0,a
2257 A3        7029            inc     dptr
2258 E0        7030            movx    a,@dptr
2259 F9        7031            mov     r1,a
225A A3        7032            inc     dptr
225B E0        7033            movx    a,@dptr
225C FA        7034            mov     r2,a
225D A3        7035            inc     dptr
225E E0        7036            movx    a,@dptr
225F FB        7037            mov     r3,a
2260 C001      7038            push    ar1
2262 C060      7039            push    _Joystick_Control_sloc3_1_0
2264 C061      7040            push    (_Joystick_Control_sloc3_1_0 + 1)
2266 C062      7041            push    (_Joystick_Control_sloc3_1_0 + 2)
2268 C063      7042            push    (_Joystick_Control_sloc3_1_0 + 3)
226A 8882      7043            mov     dpl,r0
226C 8983      7044            mov     dph,r1
226E 8AF0      7045            mov     b,r2
2270 EB        7046            mov     a,r3
2271 120000    7047            lcall   ___fssub
2274 AA82      7048            mov     r2,dpl
2276 AB83      7049            mov     r3,dph
2278 AEF0      7050            mov     r6,b
227A FF        7051            mov     r7,a
227B E581      7052            mov     a,sp
227D 24FC      7053            add     a,#0xfc
227F F581      7054            mov     sp,a
2281 D001      7055            pop     ar1
2283 D005      7056            pop     ar5
2285 D004      7057            pop     ar4
2287 904ED0    7058            mov     dptr,#_curr_angle
228A EA        7059            mov     a,r2
228B F0        7060            movx    @dptr,a
228C A3        7061            inc     dptr
228D EB        7062            mov     a,r3
228E F0        7063            movx    @dptr,a
228F A3        7064            inc     dptr
2290 EE        7065            mov     a,r6
2291 F0        7066            movx    @dptr,a
2292 A3        7067            inc     dptr
2293 EF        7068            mov     a,r7
2294 F0        7069            movx    @dptr,a
2295           7070   ;        main.c:1364: return curr_angle; 
2295 D001      7071            pop     ar1
2297           7072   ;        main.c:1295: curr_angle -= angle_diff * 1.4; // TUNE THIS
2297           7073   L044009?:
2297           7074   ;        main.c:1297: if (curr_angle > 360.0) curr_angle -= 360.0; 
2297 904ED0    7075            mov     dptr,#_curr_angle
229A E0        7076            movx    a,@dptr
229B FA        7077            mov     r2,a
229C A3        7078            inc     dptr
229D E0        7079            movx    a,@dptr
229E FB        7080            mov     r3,a
229F A3        7081            inc     dptr
22A0 E0        7082            movx    a,@dptr
22A1 FE        7083            mov     r6,a
22A2 A3        7084            inc     dptr
22A3 E0        7085            movx    a,@dptr
22A4 FF        7086            mov     r7,a
22A5 C002      7087            push    ar2
22A7 C003      7088            push    ar3
22A9 C004      7089            push    ar4
22AB C005      7090            push    ar5
22AD C006      7091            push    ar6
22AF C007      7092            push    ar7
22B1 C001      7093            push    ar1
22B3 E4        7094            clr     a
22B4 C0E0      7095            push    acc
22B6 C0E0      7096            push    acc
22B8 74B4      7097            mov     a,#0xB4
22BA C0E0      7098            push    acc
22BC 7443      7099            mov     a,#0x43
22BE C0E0      7100            push    acc
22C0 8A82      7101            mov     dpl,r2
22C2 8B83      7102            mov     dph,r3
22C4 8EF0      7103            mov     b,r6
22C6 EF        7104            mov     a,r7
22C7 120000    7105            lcall   ___fsgt
22CA A882      7106            mov     r0,dpl
22CC E581      7107            mov     a,sp
22CE 24FC      7108            add     a,#0xfc
22D0 F581      7109            mov     sp,a
22D2 D001      7110            pop     ar1
22D4 D007      7111            pop     ar7
22D6 D006      7112            pop     ar6
22D8 D005      7113            pop     ar5
22DA D004      7114            pop     ar4
22DC D003      7115            pop     ar3
22DE D002      7116            pop     ar2
22E0 E8        7117            mov     a,r0
22E1 6000      7118            jz      L044011?
22E3 C004      7119            push    ar4
22E5 C005      7120            push    ar5
22E7 C001      7121            push    ar1
22E9 E4        7122            clr     a
22EA C0E0      7123            push    acc
22EC C0E0      7124            push    acc
22EE 74B4      7125            mov     a,#0xB4
22F0 C0E0      7126            push    acc
22F2 7443      7127            mov     a,#0x43
22F4 C0E0      7128            push    acc
22F6 8A82      7129            mov     dpl,r2
22F8 8B83      7130            mov     dph,r3
22FA 8EF0      7131            mov     b,r6
22FC EF        7132            mov     a,r7
22FD 120000    7133            lcall   ___fssub
2300 AA82      7134            mov     r2,dpl
2302 AB83      7135            mov     r3,dph
2304 AEF0      7136            mov     r6,b
2306 FF        7137            mov     r7,a
2307 E581      7138            mov     a,sp
2309 24FC      7139            add     a,#0xfc
230B F581      7140            mov     sp,a
230D D001      7141            pop     ar1
230F D005      7142            pop     ar5
2311 D004      7143            pop     ar4
2313 904ED0    7144            mov     dptr,#_curr_angle
2316 EA        7145            mov     a,r2
2317 F0        7146            movx    @dptr,a
2318 A3        7147            inc     dptr
2319 EB        7148            mov     a,r3
231A F0        7149            movx    @dptr,a
231B A3        7150            inc     dptr
231C EE        7151            mov     a,r6
231D F0        7152            movx    @dptr,a
231E A3        7153            inc     dptr
231F EF        7154            mov     a,r7
2320 F0        7155            movx    @dptr,a
2321           7156   L044011?:
2321           7157   ;        main.c:1298: if (curr_angle < 0.0) curr_angle += 360.0; 
2321 904ED0    7158            mov     dptr,#_curr_angle
2324 E0        7159            movx    a,@dptr
2325 FA        7160            mov     r2,a
2326 A3        7161            inc     dptr
2327 E0        7162            movx    a,@dptr
2328 FB        7163            mov     r3,a
2329 A3        7164            inc     dptr
232A E0        7165            movx    a,@dptr
232B FE        7166            mov     r6,a
232C A3        7167            inc     dptr
232D E0        7168            movx    a,@dptr
232E FF        7169            mov     r7,a
232F C002      7170            push    ar2
2331 C003      7171            push    ar3
2333 C004      7172            push    ar4
2335 C005      7173            push    ar5
2337 C006      7174            push    ar6
2339 C007      7175            push    ar7
233B C001      7176            push    ar1
233D E4        7177            clr     a
233E C0E0      7178            push    acc
2340 C0E0      7179            push    acc
2342 C0E0      7180            push    acc
2344 C0E0      7181            push    acc
2346 8A82      7182            mov     dpl,r2
2348 8B83      7183            mov     dph,r3
234A 8EF0      7184            mov     b,r6
234C EF        7185            mov     a,r7
234D 120000    7186            lcall   ___fslt
2350 A882      7187            mov     r0,dpl
2352 E581      7188            mov     a,sp
2354 24FC      7189            add     a,#0xfc
2356 F581      7190            mov     sp,a
2358 D001      7191            pop     ar1
235A D007      7192            pop     ar7
235C D006      7193            pop     ar6
235E D005      7194            pop     ar5
2360 D004      7195            pop     ar4
2362 D003      7196            pop     ar3
2364 D002      7197            pop     ar2
2366 E8        7198            mov     a,r0
2367 6000      7199            jz      L044015?
2369 C004      7200            push    ar4
236B C005      7201            push    ar5
236D C001      7202            push    ar1
236F E4        7203            clr     a
2370 C0E0      7204            push    acc
2372 C0E0      7205            push    acc
2374 74B4      7206            mov     a,#0xB4
2376 C0E0      7207            push    acc
2378 7443      7208            mov     a,#0x43
237A C0E0      7209            push    acc
237C 8A82      7210            mov     dpl,r2
237E 8B83      7211            mov     dph,r3
2380 8EF0      7212            mov     b,r6
2382 EF        7213            mov     a,r7
2383 120000    7214            lcall   ___fsadd
2386 AA82      7215            mov     r2,dpl
2388 AB83      7216            mov     r3,dph
238A AEF0      7217            mov     r6,b
238C FF        7218            mov     r7,a
238D E581      7219            mov     a,sp
238F 24FC      7220            add     a,#0xfc
2391 F581      7221            mov     sp,a
2393 D001      7222            pop     ar1
2395 D005      7223            pop     ar5
2397 D004      7224            pop     ar4
2399 904ED0    7225            mov     dptr,#_curr_angle
239C EA        7226            mov     a,r2
239D F0        7227            movx    @dptr,a
239E A3        7228            inc     dptr
239F EB        7229            mov     a,r3
23A0 F0        7230            movx    @dptr,a
23A1 A3        7231            inc     dptr
23A2 EE        7232            mov     a,r6
23A3 F0        7233            movx    @dptr,a
23A4 A3        7234            inc     dptr
23A5 EF        7235            mov     a,r7
23A6 F0        7236            movx    @dptr,a
23A7           7237   L044015?:
23A7           7238   ;        main.c:1300: if ((vx_error>5)&&(vy_error)>5){
23A7 E9        7239            mov     a,r1
23A8 7000      7240            jnz     L044070?
23AA 020000    7241            ljmp    L044040?
23AD           7242   L044070?:
23AD E510      7243            mov     a,_Joystick_Control_sloc2_1_0
23AF 7000      7244            jnz     L044071?
23B1 020000    7245            ljmp    L044040?
23B4           7246   L044071?:
23B4           7247   ;        main.c:1302: angle_diff = fabsf(raw_angle - last_raw_angle);
23B4 904E90    7248            mov     dptr,#_raw_angle
23B7 E0        7249            movx    a,@dptr
23B8 FA        7250            mov     r2,a
23B9 A3        7251            inc     dptr
23BA E0        7252            movx    a,@dptr
23BB FB        7253            mov     r3,a
23BC A3        7254            inc     dptr
23BD E0        7255            movx    a,@dptr
23BE FE        7256            mov     r6,a
23BF A3        7257            inc     dptr
23C0 E0        7258            movx    a,@dptr
23C1 FF        7259            mov     r7,a
23C2 C004      7260            push    ar4
23C4 C005      7261            push    ar5
23C6 904E50    7262            mov     dptr,#_last_raw_angle
23C9 E0        7263            movx    a,@dptr
23CA C0E0      7264            push    acc
23CC A3        7265            inc     dptr
23CD E0        7266            movx    a,@dptr
23CE C0E0      7267            push    acc
23D0 A3        7268            inc     dptr
23D1 E0        7269            movx    a,@dptr
23D2 C0E0      7270            push    acc
23D4 A3        7271            inc     dptr
23D5 E0        7272            movx    a,@dptr
23D6 C0E0      7273            push    acc
23D8 8A82      7274            mov     dpl,r2
23DA 8B83      7275            mov     dph,r3
23DC 8EF0      7276            mov     b,r6
23DE EF        7277            mov     a,r7
23DF 120000    7278            lcall   ___fssub
23E2 AA82      7279            mov     r2,dpl
23E4 AB83      7280            mov     r3,dph
23E6 AEF0      7281            mov     r6,b
23E8 FF        7282            mov     r7,a
23E9 E581      7283            mov     a,sp
23EB 24FC      7284            add     a,#0xfc
23ED F581      7285            mov     sp,a
23EF 8A82      7286            mov     dpl,r2
23F1 8B83      7287            mov     dph,r3
23F3 8EF0      7288            mov     b,r6
23F5 EF        7289            mov     a,r7
23F6 120000    7290            lcall   _fabsf
23F9 8582B0    7291            mov     _Joystick_Control_sloc4_1_0,dpl
23FC 8583B1    7292            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
23FF 85F0B2    7293            mov     (_Joystick_Control_sloc4_1_0 + 2),b
2402 F5B3      7294            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2404 D005      7295            pop     ar5
2406 D004      7296            pop     ar4
2408 904E10    7297            mov     dptr,#_angle_diff
240B E5B0      7298            mov     a,_Joystick_Control_sloc4_1_0
240D F0        7299            movx    @dptr,a
240E A3        7300            inc     dptr
240F E5B1      7301            mov     a,(_Joystick_Control_sloc4_1_0 + 1)
2411 F0        7302            movx    @dptr,a
2412 A3        7303            inc     dptr
2413 E5B2      7304            mov     a,(_Joystick_Control_sloc4_1_0 + 2)
2415 F0        7305            movx    @dptr,a
2416 A3        7306            inc     dptr
2417 E5B3      7307            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
2419 F0        7308            movx    @dptr,a
241A           7309   ;        main.c:1303: if (vy_err>0){
241A 90D578    7310            mov     dptr,#_Joystick_Control_vy_err_1_246
241D E0        7311            movx    a,@dptr
241E F8        7312            mov     r0,a
241F A3        7313            inc     dptr
2420 E0        7314            movx    a,@dptr
2421 F9        7315            mov     r1,a
2422 C3        7316            clr     c
2423 E4        7317            clr     a
2424 98        7318            subb    a,r0
2425 E4        7319            clr     a
2426 6480      7320            xrl     a,#0x80
2428 89F0      7321            mov     b,r1
242A 63F080    7322            xrl     b,#0x80
242D 95F0      7323            subb    a,b
242F 4000      7324            jc      L044072?
2431 020000    7325            ljmp    L044027?
2434           7326   L044072?:
2434           7327   ;        main.c:1304: L_motor_dir = 0; 
2434 C000      7328            push    ar0
2436 C001      7329            push    ar1
2438 9051E0    7330            mov     dptr,#_L_motor_dir
243B           7331   ;        main.c:1305: R_motor_dir = 0; 
243B E4        7332            clr     a
243C F0        7333            movx    @dptr,a
243D 9051A0    7334            mov     dptr,#_R_motor_dir
2440 F0        7335            movx    @dptr,a
2441           7336   ;        main.c:1307: if (vx_err>0){
2441 90D528    7337            mov     dptr,#_Joystick_Control_vx_err_1_246
2444 E0        7338            movx    a,@dptr
2445 F8        7339            mov     r0,a
2446 A3        7340            inc     dptr
2447 E0        7341            movx    a,@dptr
2448 F9        7342            mov     r1,a
2449 C3        7343            clr     c
244A E4        7344            clr     a
244B 98        7345            subb    a,r0
244C E4        7346            clr     a
244D 6480      7347            xrl     a,#0x80
244F 89F0      7348            mov     b,r1
2451 63F080    7349            xrl     b,#0x80
2454 95F0      7350            subb    a,b
2456 D001      7351            pop     ar1
2458 D000      7352            pop     ar0
245A 4000      7353            jc      L044073?
245C 020000    7354            ljmp    L044024?
245F           7355   L044073?:
245F           7356   ;        main.c:1309: if (vy*100<=vy_thres*100/2){
245F C000      7357            push    ar0
2461 C001      7358            push    ar1
2463 905020    7359            mov     dptr,#_vy
2466 E0        7360            movx    a,@dptr
2467 F500      7361            mov     __mulint_PARM_2,a
2469 A3        7362            inc     dptr
246A E0        7363            movx    a,@dptr
246B F501      7364            mov     (__mulint_PARM_2 + 1),a
246D 900064    7365            mov     dptr,#0x0064
2470 C004      7366            push    ar4
2472 C005      7367            push    ar5
2474 C000      7368            push    ar0
2476 C001      7369            push    ar1
2478 120000    7370            lcall   __mulint
247B 858260    7371            mov     _Joystick_Control_sloc3_1_0,dpl
247E 858361    7372            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
2481 D001      7373            pop     ar1
2483 D000      7374            pop     ar0
2485 9050A0    7375            mov     dptr,#_vy_thres
2488 E0        7376            movx    a,@dptr
2489 F500      7377            mov     __mulint_PARM_2,a
248B A3        7378            inc     dptr
248C E0        7379            movx    a,@dptr
248D F501      7380            mov     (__mulint_PARM_2 + 1),a
248F 900064    7381            mov     dptr,#0x0064
2492 120000    7382            lcall   __mulint
2495 A882      7383            mov     r0,dpl
2497 A983      7384            mov     r1,dph
2499 750002    7385            mov     __divsint_PARM_2,#0x02
249C E4        7386            clr     a
249D F501      7387            mov     (__divsint_PARM_2 + 1),a
249F 8882      7388            mov     dpl,r0
24A1 8983      7389            mov     dph,r1
24A3 120000    7390            lcall   __divsint
24A6 A882      7391            mov     r0,dpl
24A8 A983      7392            mov     r1,dph
24AA D005      7393            pop     ar5
24AC D004      7394            pop     ar4
24AE C3        7395            clr     c
24AF E8        7396            mov     a,r0
24B0 9560      7397            subb    a,_Joystick_Control_sloc3_1_0
24B2 E9        7398            mov     a,r1
24B3 6480      7399            xrl     a,#0x80
24B5 8561F0    7400            mov     b,(_Joystick_Control_sloc3_1_0 + 1)
24B8 63F080    7401            xrl     b,#0x80
24BB 95F0      7402            subb    a,b
24BD D001      7403            pop     ar1
24BF D000      7404            pop     ar0
24C1 5000      7405            jnc     L044074?
24C3 020000    7406            ljmp    L044018?
24C6           7407   L044074?:
24C6           7408   ;        main.c:1310: pwm_left = vy_error; 
24C6 C000      7409            push    ar0
24C8 C001      7410            push    ar1
24CA 90D4D8    7411            mov     dptr,#_Joystick_Control_vy_error_1_246
24CD E0        7412            movx    a,@dptr
24CE F560      7413            mov     _Joystick_Control_sloc3_1_0,a
24D0 A3        7414            inc     dptr
24D1 E0        7415            movx    a,@dptr
24D2 F561      7416            mov     (_Joystick_Control_sloc3_1_0 + 1),a
24D4 905260    7417            mov     dptr,#_pwm_left
24D7 E560      7418            mov     a,_Joystick_Control_sloc3_1_0
24D9 F0        7419            movx    @dptr,a
24DA           7420   ;        main.c:1311: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
24DA 904F10    7421            mov     dptr,#_pwm_corr
24DD E0        7422            movx    a,@dptr
24DE F500      7423            mov     _Joystick_Control_sloc5_1_0,a
24E0 A3        7424            inc     dptr
24E1 E0        7425            movx    a,@dptr
24E2 F501      7426            mov     (_Joystick_Control_sloc5_1_0 + 1),a
24E4 A3        7427            inc     dptr
24E5 E0        7428            movx    a,@dptr
24E6 F502      7429            mov     (_Joystick_Control_sloc5_1_0 + 2),a
24E8 A3        7430            inc     dptr
24E9 E0        7431            movx    a,@dptr
24EA F503      7432            mov     (_Joystick_Control_sloc5_1_0 + 3),a
24EC 856082    7433            mov     dpl,_Joystick_Control_sloc3_1_0
24EF 856183    7434            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
24F2 C004      7435            push    ar4
24F4 C005      7436            push    ar5
24F6 C000      7437            push    ar0
24F8 C001      7438            push    ar1
24FA 120000    7439            lcall   ___sint2fs
24FD AE82      7440            mov     r6,dpl
24FF AF83      7441            mov     r7,dph
2501 AAF0      7442            mov     r2,b
2503 FB        7443            mov     r3,a
2504 C006      7444            push    ar6
2506 C007      7445            push    ar7
2508 C002      7446            push    ar2
250A C003      7447            push    ar3
250C 850082    7448            mov     dpl,_Joystick_Control_sloc5_1_0
250F 850183    7449            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2512 8502F0    7450            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2515 E503      7451            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2517 120000    7452            lcall   ___fsmul
251A AA82      7453            mov     r2,dpl
251C AB83      7454            mov     r3,dph
251E AEF0      7455            mov     r6,b
2520 FF        7456            mov     r7,a
2521 E581      7457            mov     a,sp
2523 24FC      7458            add     a,#0xfc
2525 F581      7459            mov     sp,a
2527 C002      7460            push    ar2
2529 C003      7461            push    ar3
252B C006      7462            push    ar6
252D C007      7463            push    ar7
252F 900000    7464            mov     dptr,#0x0000
2532 75F0C8    7465            mov     b,#0xC8
2535 7442      7466            mov     a,#0x42
2537 120000    7467            lcall   ___fsmul
253A 858200    7468            mov     _Joystick_Control_sloc5_1_0,dpl
253D 858301    7469            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
2540 85F002    7470            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2543 F503      7471            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2545 E581      7472            mov     a,sp
2547 24FC      7473            add     a,#0xfc
2549 F581      7474            mov     sp,a
254B D001      7475            pop     ar1
254D D000      7476            pop     ar0
254F D005      7477            pop     ar5
2551 D004      7478            pop     ar4
2553 E560      7479            mov     a,_Joystick_Control_sloc3_1_0
2555 2C        7480            add     a,r4
2556 F582      7481            mov     dpl,a
2558 E561      7482            mov     a,(_Joystick_Control_sloc3_1_0 + 1)
255A 3D        7483            addc    a,r5
255B F583      7484            mov     dph,a
255D C004      7485            push    ar4
255F C005      7486            push    ar5
2561 120000    7487            lcall   ___sint2fs
2564 A882      7488            mov     r0,dpl
2566 A983      7489            mov     r1,dph
2568 AAF0      7490            mov     r2,b
256A FB        7491            mov     r3,a
256B C000      7492            push    ar0
256D C001      7493            push    ar1
256F C000      7494            push    ar0
2571 C001      7495            push    ar1
2573 C002      7496            push    ar2
2575 C003      7497            push    ar3
2577 850082    7498            mov     dpl,_Joystick_Control_sloc5_1_0
257A 850183    7499            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
257D 8502F0    7500            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2580 E503      7501            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2582 120000    7502            lcall   ___fsdiv
2585 AA82      7503            mov     r2,dpl
2587 AB83      7504            mov     r3,dph
2589 AEF0      7505            mov     r6,b
258B FF        7506            mov     r7,a
258C E581      7507            mov     a,sp
258E 24FC      7508            add     a,#0xfc
2590 F581      7509            mov     sp,a
2592 8A82      7510            mov     dpl,r2
2594 8B83      7511            mov     dph,r3
2596 8EF0      7512            mov     b,r6
2598 EF        7513            mov     a,r7
2599 120000    7514            lcall   ___fs2uchar
259C E582      7515            mov     a,dpl
259E D001      7516            pop     ar1
25A0 D000      7517            pop     ar0
25A2 D005      7518            pop     ar5
25A4 D004      7519            pop     ar4
25A6 905220    7520            mov     dptr,#_pwm_right
25A9 F0        7521            movx    @dptr,a
25AA D001      7522            pop     ar1
25AC D000      7523            pop     ar0
25AE 020000    7524            ljmp    L044019?
25B1           7525   L044018?:
25B1           7526   ;        main.c:1314: pwm_left = vx_error; 
25B1 C000      7527            push    ar0
25B3 C001      7528            push    ar1
25B5 905260    7529            mov     dptr,#_pwm_left
25B8 EC        7530            mov     a,r4
25B9 F0        7531            movx    @dptr,a
25BA           7532   ;        main.c:1315: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
25BA 904F10    7533            mov     dptr,#_pwm_corr
25BD E0        7534            movx    a,@dptr
25BE F500      7535            mov     _Joystick_Control_sloc5_1_0,a
25C0 A3        7536            inc     dptr
25C1 E0        7537            movx    a,@dptr
25C2 F501      7538            mov     (_Joystick_Control_sloc5_1_0 + 1),a
25C4 A3        7539            inc     dptr
25C5 E0        7540            movx    a,@dptr
25C6 F502      7541            mov     (_Joystick_Control_sloc5_1_0 + 2),a
25C8 A3        7542            inc     dptr
25C9 E0        7543            movx    a,@dptr
25CA F503      7544            mov     (_Joystick_Control_sloc5_1_0 + 3),a
25CC 8C82      7545            mov     dpl,r4
25CE 8D83      7546            mov     dph,r5
25D0 C004      7547            push    ar4
25D2 C005      7548            push    ar5
25D4 120000    7549            lcall   ___sint2fs
25D7 A882      7550            mov     r0,dpl
25D9 A983      7551            mov     r1,dph
25DB AAF0      7552            mov     r2,b
25DD FB        7553            mov     r3,a
25DE C000      7554            push    ar0
25E0 C001      7555            push    ar1
25E2 C000      7556            push    ar0
25E4 C001      7557            push    ar1
25E6 C002      7558            push    ar2
25E8 C003      7559            push    ar3
25EA 850082    7560            mov     dpl,_Joystick_Control_sloc5_1_0
25ED 850183    7561            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
25F0 8502F0    7562            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
25F3 E503      7563            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
25F5 120000    7564            lcall   ___fsmul
25F8 AA82      7565            mov     r2,dpl
25FA AB83      7566            mov     r3,dph
25FC AEF0      7567            mov     r6,b
25FE FF        7568            mov     r7,a
25FF E581      7569            mov     a,sp
2601 24FC      7570            add     a,#0xfc
2603 F581      7571            mov     sp,a
2605 C002      7572            push    ar2
2607 C003      7573            push    ar3
2609 C006      7574            push    ar6
260B C007      7575            push    ar7
260D 900000    7576            mov     dptr,#0x0000
2610 75F0C8    7577            mov     b,#0xC8
2613 7442      7578            mov     a,#0x42
2615 120000    7579            lcall   ___fsmul
2618 858200    7580            mov     _Joystick_Control_sloc5_1_0,dpl
261B 858301    7581            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
261E 85F002    7582            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2621 F503      7583            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2623 E581      7584            mov     a,sp
2625 24FC      7585            add     a,#0xfc
2627 F581      7586            mov     sp,a
2629 D001      7587            pop     ar1
262B D000      7588            pop     ar0
262D D005      7589            pop     ar5
262F D004      7590            pop     ar4
2631 90D4D8    7591            mov     dptr,#_Joystick_Control_vy_error_1_246
2634 E0        7592            movx    a,@dptr
2635 F8        7593            mov     r0,a
2636 A3        7594            inc     dptr
2637 E0        7595            movx    a,@dptr
2638 F9        7596            mov     r1,a
2639 E8        7597            mov     a,r0
263A 2C        7598            add     a,r4
263B F582      7599            mov     dpl,a
263D E9        7600            mov     a,r1
263E 3D        7601            addc    a,r5
263F F583      7602            mov     dph,a
2641 C004      7603            push    ar4
2643 C005      7604            push    ar5
2645 120000    7605            lcall   ___sint2fs
2648 A882      7606            mov     r0,dpl
264A A983      7607            mov     r1,dph
264C AAF0      7608            mov     r2,b
264E FB        7609            mov     r3,a
264F C000      7610            push    ar0
2651 C001      7611            push    ar1
2653 C000      7612            push    ar0
2655 C001      7613            push    ar1
2657 C002      7614            push    ar2
2659 C003      7615            push    ar3
265B 850082    7616            mov     dpl,_Joystick_Control_sloc5_1_0
265E 850183    7617            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2661 8502F0    7618            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2664 E503      7619            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2666 120000    7620            lcall   ___fsdiv
2669 AA82      7621            mov     r2,dpl
266B AB83      7622            mov     r3,dph
266D AEF0      7623            mov     r6,b
266F FF        7624            mov     r7,a
2670 E581      7625            mov     a,sp
2672 24FC      7626            add     a,#0xfc
2674 F581      7627            mov     sp,a
2676 8A82      7628            mov     dpl,r2
2678 8B83      7629            mov     dph,r3
267A 8EF0      7630            mov     b,r6
267C EF        7631            mov     a,r7
267D 120000    7632            lcall   ___fs2uchar
2680 E582      7633            mov     a,dpl
2682 D001      7634            pop     ar1
2684 D000      7635            pop     ar0
2686 D005      7636            pop     ar5
2688 D004      7637            pop     ar4
268A 905220    7638            mov     dptr,#_pwm_right
268D F0        7639            movx    @dptr,a
268E           7640   ;        main.c:1364: return curr_angle; 
268E D001      7641            pop     ar1
2690 D000      7642            pop     ar0
2692           7643   ;        main.c:1315: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
2692           7644   L044019?:
2692           7645   ;        main.c:1317: curr_angle += angle_diff * 1.5; // TUNE THIS 
2692 C000      7646            push    ar0
2694 C001      7647            push    ar1
2696 C004      7648            push    ar4
2698 C005      7649            push    ar5
269A C000      7650            push    ar0
269C C001      7651            push    ar1
269E C0B0      7652            push    _Joystick_Control_sloc4_1_0
26A0 C0B1      7653            push    (_Joystick_Control_sloc4_1_0 + 1)
26A2 C0B2      7654            push    (_Joystick_Control_sloc4_1_0 + 2)
26A4 C0B3      7655            push    (_Joystick_Control_sloc4_1_0 + 3)
26A6 900000    7656            mov     dptr,#0x0000
26A9 75F0C0    7657            mov     b,#0xC0
26AC 743F      7658            mov     a,#0x3F
26AE 120000    7659            lcall   ___fsmul
26B1 858200    7660            mov     _Joystick_Control_sloc5_1_0,dpl
26B4 858301    7661            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
26B7 85F002    7662            mov     (_Joystick_Control_sloc5_1_0 + 2),b
26BA F503      7663            mov     (_Joystick_Control_sloc5_1_0 + 3),a
26BC E581      7664            mov     a,sp
26BE 24FC      7665            add     a,#0xfc
26C0 F581      7666            mov     sp,a
26C2 D001      7667            pop     ar1
26C4 D000      7668            pop     ar0
26C6 904ED0    7669            mov     dptr,#_curr_angle
26C9 E0        7670            movx    a,@dptr
26CA F8        7671            mov     r0,a
26CB A3        7672            inc     dptr
26CC E0        7673            movx    a,@dptr
26CD F9        7674            mov     r1,a
26CE A3        7675            inc     dptr
26CF E0        7676            movx    a,@dptr
26D0 FA        7677            mov     r2,a
26D1 A3        7678            inc     dptr
26D2 E0        7679            movx    a,@dptr
26D3 FB        7680            mov     r3,a
26D4 C000      7681            push    ar0
26D6 C001      7682            push    ar1
26D8 C000      7683            push    _Joystick_Control_sloc5_1_0
26DA C001      7684            push    (_Joystick_Control_sloc5_1_0 + 1)
26DC C002      7685            push    (_Joystick_Control_sloc5_1_0 + 2)
26DE C003      7686            push    (_Joystick_Control_sloc5_1_0 + 3)
26E0 8882      7687            mov     dpl,r0
26E2 8983      7688            mov     dph,r1
26E4 8AF0      7689            mov     b,r2
26E6 EB        7690            mov     a,r3
26E7 120000    7691            lcall   ___fsadd
26EA AA82      7692            mov     r2,dpl
26EC AB83      7693            mov     r3,dph
26EE AEF0      7694            mov     r6,b
26F0 FF        7695            mov     r7,a
26F1 E581      7696            mov     a,sp
26F3 24FC      7697            add     a,#0xfc
26F5 F581      7698            mov     sp,a
26F7 D001      7699            pop     ar1
26F9 D000      7700            pop     ar0
26FB D005      7701            pop     ar5
26FD D004      7702            pop     ar4
26FF 904ED0    7703            mov     dptr,#_curr_angle
2702 EA        7704            mov     a,r2
2703 F0        7705            movx    @dptr,a
2704 A3        7706            inc     dptr
2705 EB        7707            mov     a,r3
2706 F0        7708            movx    @dptr,a
2707 A3        7709            inc     dptr
2708 EE        7710            mov     a,r6
2709 F0        7711            movx    @dptr,a
270A A3        7712            inc     dptr
270B EF        7713            mov     a,r7
270C F0        7714            movx    @dptr,a
270D D001      7715            pop     ar1
270F D000      7716            pop     ar0
2711 020000    7717            ljmp    L044027?
2714           7718   L044024?:
2714           7719   ;        main.c:1321: if (vy*100<=vy_thres*100/2){
2714 905020    7720            mov     dptr,#_vy
2717 E0        7721            movx    a,@dptr
2718 F500      7722            mov     __mulint_PARM_2,a
271A A3        7723            inc     dptr
271B E0        7724            movx    a,@dptr
271C F501      7725            mov     (__mulint_PARM_2 + 1),a
271E 900064    7726            mov     dptr,#0x0064
2721 C004      7727            push    ar4
2723 C005      7728            push    ar5
2725 C000      7729            push    ar0
2727 C001      7730            push    ar1
2729 120000    7731            lcall   __mulint
272C AA82      7732            mov     r2,dpl
272E AB83      7733            mov     r3,dph
2730 D001      7734            pop     ar1
2732 D000      7735            pop     ar0
2734 D005      7736            pop     ar5
2736 D004      7737            pop     ar4
2738 9050A0    7738            mov     dptr,#_vy_thres
273B E0        7739            movx    a,@dptr
273C F500      7740            mov     __mulint_PARM_2,a
273E A3        7741            inc     dptr
273F E0        7742            movx    a,@dptr
2740 F501      7743            mov     (__mulint_PARM_2 + 1),a
2742 900064    7744            mov     dptr,#0x0064
2745 C002      7745            push    ar2
2747 C003      7746            push    ar3
2749 C004      7747            push    ar4
274B C005      7748            push    ar5
274D C000      7749            push    ar0
274F C001      7750            push    ar1
2751 120000    7751            lcall   __mulint
2754 AE82      7752            mov     r6,dpl
2756 AF83      7753            mov     r7,dph
2758 750002    7754            mov     __divsint_PARM_2,#0x02
275B E4        7755            clr     a
275C F501      7756            mov     (__divsint_PARM_2 + 1),a
275E 8E82      7757            mov     dpl,r6
2760 8F83      7758            mov     dph,r7
2762 120000    7759            lcall   __divsint
2765 AE82      7760            mov     r6,dpl
2767 AF83      7761            mov     r7,dph
2769 D001      7762            pop     ar1
276B D000      7763            pop     ar0
276D D005      7764            pop     ar5
276F D004      7765            pop     ar4
2771 D003      7766            pop     ar3
2773 D002      7767            pop     ar2
2775 C3        7768            clr     c
2776 EE        7769            mov     a,r6
2777 9A        7770            subb    a,r2
2778 EF        7771            mov     a,r7
2779 6480      7772            xrl     a,#0x80
277B 8BF0      7773            mov     b,r3
277D 63F080    7774            xrl     b,#0x80
2780 95F0      7775            subb    a,b
2782 5000      7776            jnc     L044075?
2784 020000    7777            ljmp    L044021?
2787           7778   L044075?:
2787           7779   ;        main.c:1322: pwm_left = vy_error*100/(vx_error+vy_error);
2787 90D4D8    7780            mov     dptr,#_Joystick_Control_vy_error_1_246
278A E0        7781            movx    a,@dptr
278B FA        7782            mov     r2,a
278C A3        7783            inc     dptr
278D E0        7784            movx    a,@dptr
278E FB        7785            mov     r3,a
278F 8A00      7786            mov     __mulint_PARM_2,r2
2791 8B01      7787            mov     (__mulint_PARM_2 + 1),r3
2793 900064    7788            mov     dptr,#0x0064
2796 C002      7789            push    ar2
2798 C003      7790            push    ar3
279A C004      7791            push    ar4
279C C005      7792            push    ar5
279E C000      7793            push    ar0
27A0 C001      7794            push    ar1
27A2 120000    7795            lcall   __mulint
27A5 AE82      7796            mov     r6,dpl
27A7 AF83      7797            mov     r7,dph
27A9 D001      7798            pop     ar1
27AB D000      7799            pop     ar0
27AD D005      7800            pop     ar5
27AF D004      7801            pop     ar4
27B1 D003      7802            pop     ar3
27B3 D002      7803            pop     ar2
27B5 EA        7804            mov     a,r2
27B6 2C        7805            add     a,r4
27B7 F500      7806            mov     __divsint_PARM_2,a
27B9 EB        7807            mov     a,r3
27BA 3D        7808            addc    a,r5
27BB F501      7809            mov     (__divsint_PARM_2 + 1),a
27BD 8E82      7810            mov     dpl,r6
27BF 8F83      7811            mov     dph,r7
27C1 C002      7812            push    ar2
27C3 C003      7813            push    ar3
27C5 C004      7814            push    ar4
27C7 C005      7815            push    ar5
27C9 C000      7816            push    ar0
27CB C001      7817            push    ar1
27CD 120000    7818            lcall   __divsint
27D0 AE82      7819            mov     r6,dpl
27D2 D001      7820            pop     ar1
27D4 D000      7821            pop     ar0
27D6 D005      7822            pop     ar5
27D8 D004      7823            pop     ar4
27DA D003      7824            pop     ar3
27DC D002      7825            pop     ar2
27DE 905260    7826            mov     dptr,#_pwm_left
27E1 EE        7827            mov     a,r6
27E2 F0        7828            movx    @dptr,a
27E3           7829   ;        main.c:1323: pwm_right = vy_error*pwm_corr; 
27E3 8A82      7830            mov     dpl,r2
27E5 8B83      7831            mov     dph,r3
27E7 C004      7832            push    ar4
27E9 C005      7833            push    ar5
27EB C000      7834            push    ar0
27ED C001      7835            push    ar1
27EF 120000    7836            lcall   ___sint2fs
27F2 AA82      7837            mov     r2,dpl
27F4 AB83      7838            mov     r3,dph
27F6 AEF0      7839            mov     r6,b
27F8 FF        7840            mov     r7,a
27F9 904F10    7841            mov     dptr,#_pwm_corr
27FC E0        7842            movx    a,@dptr
27FD C0E0      7843            push    acc
27FF A3        7844            inc     dptr
2800 E0        7845            movx    a,@dptr
2801 C0E0      7846            push    acc
2803 A3        7847            inc     dptr
2804 E0        7848            movx    a,@dptr
2805 C0E0      7849            push    acc
2807 A3        7850            inc     dptr
2808 E0        7851            movx    a,@dptr
2809 C0E0      7852            push    acc
280B 8A82      7853            mov     dpl,r2
280D 8B83      7854            mov     dph,r3
280F 8EF0      7855            mov     b,r6
2811 EF        7856            mov     a,r7
2812 120000    7857            lcall   ___fsmul
2815 AA82      7858            mov     r2,dpl
2817 AB83      7859            mov     r3,dph
2819 AEF0      7860            mov     r6,b
281B FF        7861            mov     r7,a
281C E581      7862            mov     a,sp
281E 24FC      7863            add     a,#0xfc
2820 F581      7864            mov     sp,a
2822 8A82      7865            mov     dpl,r2
2824 8B83      7866            mov     dph,r3
2826 8EF0      7867            mov     b,r6
2828 EF        7868            mov     a,r7
2829 120000    7869            lcall   ___fs2uchar
282C E582      7870            mov     a,dpl
282E D001      7871            pop     ar1
2830 D000      7872            pop     ar0
2832 D005      7873            pop     ar5
2834 D004      7874            pop     ar4
2836 905220    7875            mov     dptr,#_pwm_right
2839 F0        7876            movx    @dptr,a
283A 020000    7877            ljmp    L044022?
283D           7878   L044021?:
283D           7879   ;        main.c:1326: pwm_left = vx_error*100/(vx_error+vy_error);
283D 8C00      7880            mov     __mulint_PARM_2,r4
283F 8D01      7881            mov     (__mulint_PARM_2 + 1),r5
2841 900064    7882            mov     dptr,#0x0064
2844 C004      7883            push    ar4
2846 C005      7884            push    ar5
2848 C000      7885            push    ar0
284A C001      7886            push    ar1
284C 120000    7887            lcall   __mulint
284F AA82      7888            mov     r2,dpl
2851 AB83      7889            mov     r3,dph
2853 D001      7890            pop     ar1
2855 D000      7891            pop     ar0
2857 D005      7892            pop     ar5
2859 D004      7893            pop     ar4
285B 90D4D8    7894            mov     dptr,#_Joystick_Control_vy_error_1_246
285E E0        7895            movx    a,@dptr
285F FE        7896            mov     r6,a
2860 A3        7897            inc     dptr
2861 E0        7898            movx    a,@dptr
2862 FF        7899            mov     r7,a
2863 EE        7900            mov     a,r6
2864 2C        7901            add     a,r4
2865 F500      7902            mov     __divsint_PARM_2,a
2867 EF        7903            mov     a,r7
2868 3D        7904            addc    a,r5
2869 F501      7905            mov     (__divsint_PARM_2 + 1),a
286B 8A82      7906            mov     dpl,r2
286D 8B83      7907            mov     dph,r3
286F C004      7908            push    ar4
2871 C005      7909            push    ar5
2873 C000      7910            push    ar0
2875 C001      7911            push    ar1
2877 120000    7912            lcall   __divsint
287A AA82      7913            mov     r2,dpl
287C D001      7914            pop     ar1
287E D000      7915            pop     ar0
2880 D005      7916            pop     ar5
2882 D004      7917            pop     ar4
2884 905260    7918            mov     dptr,#_pwm_left
2887 EA        7919            mov     a,r2
2888 F0        7920            movx    @dptr,a
2889           7921   ;        main.c:1327: pwm_right = vx_error*pwm_corr; 
2889 8C82      7922            mov     dpl,r4
288B 8D83      7923            mov     dph,r5
288D C004      7924            push    ar4
288F C005      7925            push    ar5
2891 C000      7926            push    ar0
2893 C001      7927            push    ar1
2895 120000    7928            lcall   ___sint2fs
2898 AA82      7929            mov     r2,dpl
289A AB83      7930            mov     r3,dph
289C AEF0      7931            mov     r6,b
289E FF        7932            mov     r7,a
289F 904F10    7933            mov     dptr,#_pwm_corr
28A2 E0        7934            movx    a,@dptr
28A3 C0E0      7935            push    acc
28A5 A3        7936            inc     dptr
28A6 E0        7937            movx    a,@dptr
28A7 C0E0      7938            push    acc
28A9 A3        7939            inc     dptr
28AA E0        7940            movx    a,@dptr
28AB C0E0      7941            push    acc
28AD A3        7942            inc     dptr
28AE E0        7943            movx    a,@dptr
28AF C0E0      7944            push    acc
28B1 8A82      7945            mov     dpl,r2
28B3 8B83      7946            mov     dph,r3
28B5 8EF0      7947            mov     b,r6
28B7 EF        7948            mov     a,r7
28B8 120000    7949            lcall   ___fsmul
28BB AA82      7950            mov     r2,dpl
28BD AB83      7951            mov     r3,dph
28BF AEF0      7952            mov     r6,b
28C1 FF        7953            mov     r7,a
28C2 E581      7954            mov     a,sp
28C4 24FC      7955            add     a,#0xfc
28C6 F581      7956            mov     sp,a
28C8 8A82      7957            mov     dpl,r2
28CA 8B83      7958            mov     dph,r3
28CC 8EF0      7959            mov     b,r6
28CE EF        7960            mov     a,r7
28CF 120000    7961            lcall   ___fs2uchar
28D2 E582      7962            mov     a,dpl
28D4 D001      7963            pop     ar1
28D6 D000      7964            pop     ar0
28D8 D005      7965            pop     ar5
28DA D004      7966            pop     ar4
28DC 905220    7967            mov     dptr,#_pwm_right
28DF F0        7968            movx    @dptr,a
28E0           7969   L044022?:
28E0           7970   ;        main.c:1329: curr_angle -= angle_diff * 1.5; // TUNE THIS 
28E0 C000      7971            push    ar0
28E2 C001      7972            push    ar1
28E4 C004      7973            push    ar4
28E6 C005      7974            push    ar5
28E8 C000      7975            push    ar0
28EA C001      7976            push    ar1
28EC C0B0      7977            push    _Joystick_Control_sloc4_1_0
28EE C0B1      7978            push    (_Joystick_Control_sloc4_1_0 + 1)
28F0 C0B2      7979            push    (_Joystick_Control_sloc4_1_0 + 2)
28F2 C0B3      7980            push    (_Joystick_Control_sloc4_1_0 + 3)
28F4 900000    7981            mov     dptr,#0x0000
28F7 75F0C0    7982            mov     b,#0xC0
28FA 743F      7983            mov     a,#0x3F
28FC 120000    7984            lcall   ___fsmul
28FF 858200    7985            mov     _Joystick_Control_sloc5_1_0,dpl
2902 858301    7986            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
2905 85F002    7987            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2908 F503      7988            mov     (_Joystick_Control_sloc5_1_0 + 3),a
290A E581      7989            mov     a,sp
290C 24FC      7990            add     a,#0xfc
290E F581      7991            mov     sp,a
2910 D001      7992            pop     ar1
2912 D000      7993            pop     ar0
2914 904ED0    7994            mov     dptr,#_curr_angle
2917 E0        7995            movx    a,@dptr
2918 F8        7996            mov     r0,a
2919 A3        7997            inc     dptr
291A E0        7998            movx    a,@dptr
291B F9        7999            mov     r1,a
291C A3        8000            inc     dptr
291D E0        8001            movx    a,@dptr
291E FA        8002            mov     r2,a
291F A3        8003            inc     dptr
2920 E0        8004            movx    a,@dptr
2921 FB        8005            mov     r3,a
2922 C000      8006            push    ar0
2924 C001      8007            push    ar1
2926 C000      8008            push    _Joystick_Control_sloc5_1_0
2928 C001      8009            push    (_Joystick_Control_sloc5_1_0 + 1)
292A C002      8010            push    (_Joystick_Control_sloc5_1_0 + 2)
292C C003      8011            push    (_Joystick_Control_sloc5_1_0 + 3)
292E 8882      8012            mov     dpl,r0
2930 8983      8013            mov     dph,r1
2932 8AF0      8014            mov     b,r2
2934 EB        8015            mov     a,r3
2935 120000    8016            lcall   ___fssub
2938 AA82      8017            mov     r2,dpl
293A AB83      8018            mov     r3,dph
293C AEF0      8019            mov     r6,b
293E FF        8020            mov     r7,a
293F E581      8021            mov     a,sp
2941 24FC      8022            add     a,#0xfc
2943 F581      8023            mov     sp,a
2945 D001      8024            pop     ar1
2947 D000      8025            pop     ar0
2949 D005      8026            pop     ar5
294B D004      8027            pop     ar4
294D 904ED0    8028            mov     dptr,#_curr_angle
2950 EA        8029            mov     a,r2
2951 F0        8030            movx    @dptr,a
2952 A3        8031            inc     dptr
2953 EB        8032            mov     a,r3
2954 F0        8033            movx    @dptr,a
2955 A3        8034            inc     dptr
2956 EE        8035            mov     a,r6
2957 F0        8036            movx    @dptr,a
2958 A3        8037            inc     dptr
2959 EF        8038            mov     a,r7
295A F0        8039            movx    @dptr,a
295B           8040   ;        main.c:1364: return curr_angle; 
295B D001      8041            pop     ar1
295D D000      8042            pop     ar0
295F           8043   ;        main.c:1329: curr_angle -= angle_diff * 1.5; // TUNE THIS 
295F           8044   L044027?:
295F           8045   ;        main.c:1333: if (vy_err<0){
295F E9        8046            mov     a,r1
2960 20E790    8047            jb      acc.7,L044076?
2963 020000    8048            ljmp    L044040?
2966           8049   L044076?:
2966           8050   ;        main.c:1334: L_motor_dir = 1; 
2966 9051E0    8051            mov     dptr,#_L_motor_dir
2969 7401      8052            mov     a,#0x01
296B F0        8053            movx    @dptr,a
296C           8054   ;        main.c:1335: R_motor_dir = 1; 
296C 9051A0    8055            mov     dptr,#_R_motor_dir
296F 7401      8056            mov     a,#0x01
2971 F0        8057            movx    @dptr,a
2972           8058   ;        main.c:1337: if (vx_err>0){
2972 90D528    8059            mov     dptr,#_Joystick_Control_vx_err_1_246
2975 E0        8060            movx    a,@dptr
2976 FA        8061            mov     r2,a
2977 A3        8062            inc     dptr
2978 E0        8063            movx    a,@dptr
2979 FB        8064            mov     r3,a
297A C3        8065            clr     c
297B E4        8066            clr     a
297C 9A        8067            subb    a,r2
297D E4        8068            clr     a
297E 6480      8069            xrl     a,#0x80
2980 8BF0      8070            mov     b,r3
2982 63F080    8071            xrl     b,#0x80
2985 95F0      8072            subb    a,b
2987 4000      8073            jc      L044077?
2989 020000    8074            ljmp    L044035?
298C           8075   L044077?:
298C           8076   ;        main.c:1338: if (vy*100<=vy_thres*100/2){
298C 905020    8077            mov     dptr,#_vy
298F E0        8078            movx    a,@dptr
2990 F500      8079            mov     __mulint_PARM_2,a
2992 A3        8080            inc     dptr
2993 E0        8081            movx    a,@dptr
2994 F501      8082            mov     (__mulint_PARM_2 + 1),a
2996 900064    8083            mov     dptr,#0x0064
2999 C004      8084            push    ar4
299B C005      8085            push    ar5
299D 120000    8086            lcall   __mulint
29A0 AA82      8087            mov     r2,dpl
29A2 AB83      8088            mov     r3,dph
29A4 D005      8089            pop     ar5
29A6 D004      8090            pop     ar4
29A8 9050A0    8091            mov     dptr,#_vy_thres
29AB E0        8092            movx    a,@dptr
29AC F500      8093            mov     __mulint_PARM_2,a
29AE A3        8094            inc     dptr
29AF E0        8095            movx    a,@dptr
29B0 F501      8096            mov     (__mulint_PARM_2 + 1),a
29B2 900064    8097            mov     dptr,#0x0064
29B5 C002      8098            push    ar2
29B7 C003      8099            push    ar3
29B9 C004      8100            push    ar4
29BB C005      8101            push    ar5
29BD 120000    8102            lcall   __mulint
29C0 AE82      8103            mov     r6,dpl
29C2 AF83      8104            mov     r7,dph
29C4 750002    8105            mov     __divsint_PARM_2,#0x02
29C7 E4        8106            clr     a
29C8 F501      8107            mov     (__divsint_PARM_2 + 1),a
29CA 8E82      8108            mov     dpl,r6
29CC 8F83      8109            mov     dph,r7
29CE 120000    8110            lcall   __divsint
29D1 AE82      8111            mov     r6,dpl
29D3 AF83      8112            mov     r7,dph
29D5 D005      8113            pop     ar5
29D7 D004      8114            pop     ar4
29D9 D003      8115            pop     ar3
29DB D002      8116            pop     ar2
29DD C3        8117            clr     c
29DE EE        8118            mov     a,r6
29DF 9A        8119            subb    a,r2
29E0 EF        8120            mov     a,r7
29E1 6480      8121            xrl     a,#0x80
29E3 8BF0      8122            mov     b,r3
29E5 63F080    8123            xrl     b,#0x80
29E8 95F0      8124            subb    a,b
29EA 5000      8125            jnc     L044078?
29EC 020000    8126            ljmp    L044029?
29EF           8127   L044078?:
29EF           8128   ;        main.c:1339: pwm_left = vy_error; 
29EF 90D4D8    8129            mov     dptr,#_Joystick_Control_vy_error_1_246
29F2 E0        8130            movx    a,@dptr
29F3 FA        8131            mov     r2,a
29F4 A3        8132            inc     dptr
29F5 E0        8133            movx    a,@dptr
29F6 FB        8134            mov     r3,a
29F7 905260    8135            mov     dptr,#_pwm_left
29FA EA        8136            mov     a,r2
29FB F0        8137            movx    @dptr,a
29FC           8138   ;        main.c:1340: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
29FC 904F10    8139            mov     dptr,#_pwm_corr
29FF E0        8140            movx    a,@dptr
2A00 F500      8141            mov     _Joystick_Control_sloc5_1_0,a
2A02 A3        8142            inc     dptr
2A03 E0        8143            movx    a,@dptr
2A04 F501      8144            mov     (_Joystick_Control_sloc5_1_0 + 1),a
2A06 A3        8145            inc     dptr
2A07 E0        8146            movx    a,@dptr
2A08 F502      8147            mov     (_Joystick_Control_sloc5_1_0 + 2),a
2A0A A3        8148            inc     dptr
2A0B E0        8149            movx    a,@dptr
2A0C F503      8150            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2A0E 8A82      8151            mov     dpl,r2
2A10 8B83      8152            mov     dph,r3
2A12 C002      8153            push    ar2
2A14 C003      8154            push    ar3
2A16 C004      8155            push    ar4
2A18 C005      8156            push    ar5
2A1A 120000    8157            lcall   ___sint2fs
2A1D AE82      8158            mov     r6,dpl
2A1F AF83      8159            mov     r7,dph
2A21 A8F0      8160            mov     r0,b
2A23 F9        8161            mov     r1,a
2A24 C006      8162            push    ar6
2A26 C007      8163            push    ar7
2A28 C000      8164            push    ar0
2A2A C001      8165            push    ar1
2A2C 850082    8166            mov     dpl,_Joystick_Control_sloc5_1_0
2A2F 850183    8167            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2A32 8502F0    8168            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2A35 E503      8169            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2A37 120000    8170            lcall   ___fsmul
2A3A AE82      8171            mov     r6,dpl
2A3C AF83      8172            mov     r7,dph
2A3E A8F0      8173            mov     r0,b
2A40 F9        8174            mov     r1,a
2A41 E581      8175            mov     a,sp
2A43 24FC      8176            add     a,#0xfc
2A45 F581      8177            mov     sp,a
2A47 C006      8178            push    ar6
2A49 C007      8179            push    ar7
2A4B C000      8180            push    ar0
2A4D C001      8181            push    ar1
2A4F 900000    8182            mov     dptr,#0x0000
2A52 75F0C8    8183            mov     b,#0xC8
2A55 7442      8184            mov     a,#0x42
2A57 120000    8185            lcall   ___fsmul
2A5A 858200    8186            mov     _Joystick_Control_sloc5_1_0,dpl
2A5D 858301    8187            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
2A60 85F002    8188            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2A63 F503      8189            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2A65 E581      8190            mov     a,sp
2A67 24FC      8191            add     a,#0xfc
2A69 F581      8192            mov     sp,a
2A6B D005      8193            pop     ar5
2A6D D004      8194            pop     ar4
2A6F D003      8195            pop     ar3
2A71 D002      8196            pop     ar2
2A73 EA        8197            mov     a,r2
2A74 2C        8198            add     a,r4
2A75 F582      8199            mov     dpl,a
2A77 EB        8200            mov     a,r3
2A78 3D        8201            addc    a,r5
2A79 F583      8202            mov     dph,a
2A7B 120000    8203            lcall   ___sint2fs
2A7E AA82      8204            mov     r2,dpl
2A80 AB83      8205            mov     r3,dph
2A82 AEF0      8206            mov     r6,b
2A84 FF        8207            mov     r7,a
2A85 C002      8208            push    ar2
2A87 C003      8209            push    ar3
2A89 C006      8210            push    ar6
2A8B C007      8211            push    ar7
2A8D 850082    8212            mov     dpl,_Joystick_Control_sloc5_1_0
2A90 850183    8213            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2A93 8502F0    8214            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2A96 E503      8215            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2A98 120000    8216            lcall   ___fsdiv
2A9B AA82      8217            mov     r2,dpl
2A9D AB83      8218            mov     r3,dph
2A9F AEF0      8219            mov     r6,b
2AA1 FF        8220            mov     r7,a
2AA2 E581      8221            mov     a,sp
2AA4 24FC      8222            add     a,#0xfc
2AA6 F581      8223            mov     sp,a
2AA8 8A82      8224            mov     dpl,r2
2AAA 8B83      8225            mov     dph,r3
2AAC 8EF0      8226            mov     b,r6
2AAE EF        8227            mov     a,r7
2AAF 120000    8228            lcall   ___fs2uchar
2AB2 E582      8229            mov     a,dpl
2AB4 905220    8230            mov     dptr,#_pwm_right
2AB7 F0        8231            movx    @dptr,a
2AB8 020000    8232            ljmp    L044030?
2ABB           8233   L044029?:
2ABB           8234   ;        main.c:1343: pwm_left = vx_error; 
2ABB 905260    8235            mov     dptr,#_pwm_left
2ABE EC        8236            mov     a,r4
2ABF F0        8237            movx    @dptr,a
2AC0           8238   ;        main.c:1344: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
2AC0 904F10    8239            mov     dptr,#_pwm_corr
2AC3 E0        8240            movx    a,@dptr
2AC4 F500      8241            mov     _Joystick_Control_sloc5_1_0,a
2AC6 A3        8242            inc     dptr
2AC7 E0        8243            movx    a,@dptr
2AC8 F501      8244            mov     (_Joystick_Control_sloc5_1_0 + 1),a
2ACA A3        8245            inc     dptr
2ACB E0        8246            movx    a,@dptr
2ACC F502      8247            mov     (_Joystick_Control_sloc5_1_0 + 2),a
2ACE A3        8248            inc     dptr
2ACF E0        8249            movx    a,@dptr
2AD0 F503      8250            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2AD2 8C82      8251            mov     dpl,r4
2AD4 8D83      8252            mov     dph,r5
2AD6 C004      8253            push    ar4
2AD8 C005      8254            push    ar5
2ADA 120000    8255            lcall   ___sint2fs
2ADD A882      8256            mov     r0,dpl
2ADF A983      8257            mov     r1,dph
2AE1 AAF0      8258            mov     r2,b
2AE3 FB        8259            mov     r3,a
2AE4 C000      8260            push    ar0
2AE6 C001      8261            push    ar1
2AE8 C002      8262            push    ar2
2AEA C003      8263            push    ar3
2AEC 850082    8264            mov     dpl,_Joystick_Control_sloc5_1_0
2AEF 850183    8265            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2AF2 8502F0    8266            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2AF5 E503      8267            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2AF7 120000    8268            lcall   ___fsmul
2AFA AA82      8269            mov     r2,dpl
2AFC AB83      8270            mov     r3,dph
2AFE AEF0      8271            mov     r6,b
2B00 FF        8272            mov     r7,a
2B01 E581      8273            mov     a,sp
2B03 24FC      8274            add     a,#0xfc
2B05 F581      8275            mov     sp,a
2B07 C002      8276            push    ar2
2B09 C003      8277            push    ar3
2B0B C006      8278            push    ar6
2B0D C007      8279            push    ar7
2B0F 900000    8280            mov     dptr,#0x0000
2B12 75F0C8    8281            mov     b,#0xC8
2B15 7442      8282            mov     a,#0x42
2B17 120000    8283            lcall   ___fsmul
2B1A 858200    8284            mov     _Joystick_Control_sloc5_1_0,dpl
2B1D 858301    8285            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
2B20 85F002    8286            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2B23 F503      8287            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2B25 E581      8288            mov     a,sp
2B27 24FC      8289            add     a,#0xfc
2B29 F581      8290            mov     sp,a
2B2B D005      8291            pop     ar5
2B2D D004      8292            pop     ar4
2B2F 90D4D8    8293            mov     dptr,#_Joystick_Control_vy_error_1_246
2B32 E0        8294            movx    a,@dptr
2B33 F8        8295            mov     r0,a
2B34 A3        8296            inc     dptr
2B35 E0        8297            movx    a,@dptr
2B36 F9        8298            mov     r1,a
2B37 E8        8299            mov     a,r0
2B38 2C        8300            add     a,r4
2B39 F582      8301            mov     dpl,a
2B3B E9        8302            mov     a,r1
2B3C 3D        8303            addc    a,r5
2B3D F583      8304            mov     dph,a
2B3F 120000    8305            lcall   ___sint2fs
2B42 A882      8306            mov     r0,dpl
2B44 A983      8307            mov     r1,dph
2B46 AAF0      8308            mov     r2,b
2B48 FB        8309            mov     r3,a
2B49 C000      8310            push    ar0
2B4B C001      8311            push    ar1
2B4D C002      8312            push    ar2
2B4F C003      8313            push    ar3
2B51 850082    8314            mov     dpl,_Joystick_Control_sloc5_1_0
2B54 850183    8315            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2B57 8502F0    8316            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2B5A E503      8317            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2B5C 120000    8318            lcall   ___fsdiv
2B5F AA82      8319            mov     r2,dpl
2B61 AB83      8320            mov     r3,dph
2B63 AEF0      8321            mov     r6,b
2B65 FF        8322            mov     r7,a
2B66 E581      8323            mov     a,sp
2B68 24FC      8324            add     a,#0xfc
2B6A F581      8325            mov     sp,a
2B6C 8A82      8326            mov     dpl,r2
2B6E 8B83      8327            mov     dph,r3
2B70 8EF0      8328            mov     b,r6
2B72 EF        8329            mov     a,r7
2B73 120000    8330            lcall   ___fs2uchar
2B76 E582      8331            mov     a,dpl
2B78 905220    8332            mov     dptr,#_pwm_right
2B7B F0        8333            movx    @dptr,a
2B7C           8334   L044030?:
2B7C           8335   ;        main.c:1346: curr_angle -= angle_diff * 1.4; // TUNE THIS 
2B7C C0B0      8336            push    _Joystick_Control_sloc4_1_0
2B7E C0B1      8337            push    (_Joystick_Control_sloc4_1_0 + 1)
2B80 C0B2      8338            push    (_Joystick_Control_sloc4_1_0 + 2)
2B82 C0B3      8339            push    (_Joystick_Control_sloc4_1_0 + 3)
2B84 903333    8340            mov     dptr,#0x3333
2B87 75F0B3    8341            mov     b,#0xB3
2B8A 743F      8342            mov     a,#0x3F
2B8C 120000    8343            lcall   ___fsmul
2B8F 858200    8344            mov     _Joystick_Control_sloc5_1_0,dpl
2B92 858301    8345            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
2B95 85F002    8346            mov     (_Joystick_Control_sloc5_1_0 + 2),b
2B98 F503      8347            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2B9A E581      8348            mov     a,sp
2B9C 24FC      8349            add     a,#0xfc
2B9E F581      8350            mov     sp,a
2BA0 904ED0    8351            mov     dptr,#_curr_angle
2BA3 E0        8352            movx    a,@dptr
2BA4 F8        8353            mov     r0,a
2BA5 A3        8354            inc     dptr
2BA6 E0        8355            movx    a,@dptr
2BA7 F9        8356            mov     r1,a
2BA8 A3        8357            inc     dptr
2BA9 E0        8358            movx    a,@dptr
2BAA FA        8359            mov     r2,a
2BAB A3        8360            inc     dptr
2BAC E0        8361            movx    a,@dptr
2BAD FB        8362            mov     r3,a
2BAE C000      8363            push    _Joystick_Control_sloc5_1_0
2BB0 C001      8364            push    (_Joystick_Control_sloc5_1_0 + 1)
2BB2 C002      8365            push    (_Joystick_Control_sloc5_1_0 + 2)
2BB4 C003      8366            push    (_Joystick_Control_sloc5_1_0 + 3)
2BB6 8882      8367            mov     dpl,r0
2BB8 8983      8368            mov     dph,r1
2BBA 8AF0      8369            mov     b,r2
2BBC EB        8370            mov     a,r3
2BBD 120000    8371            lcall   ___fssub
2BC0 AA82      8372            mov     r2,dpl
2BC2 AB83      8373            mov     r3,dph
2BC4 AEF0      8374            mov     r6,b
2BC6 FF        8375            mov     r7,a
2BC7 E581      8376            mov     a,sp
2BC9 24FC      8377            add     a,#0xfc
2BCB F581      8378            mov     sp,a
2BCD 904ED0    8379            mov     dptr,#_curr_angle
2BD0 EA        8380            mov     a,r2
2BD1 F0        8381            movx    @dptr,a
2BD2 A3        8382            inc     dptr
2BD3 EB        8383            mov     a,r3
2BD4 F0        8384            movx    @dptr,a
2BD5 A3        8385            inc     dptr
2BD6 EE        8386            mov     a,r6
2BD7 F0        8387            movx    @dptr,a
2BD8 A3        8388            inc     dptr
2BD9 EF        8389            mov     a,r7
2BDA F0        8390            movx    @dptr,a
2BDB 020000    8391            ljmp    L044040?
2BDE           8392   L044035?:
2BDE           8393   ;        main.c:1350: if (vy*100<=vy_thres*100/2){
2BDE 905020    8394            mov     dptr,#_vy
2BE1 E0        8395            movx    a,@dptr
2BE2 F500      8396            mov     __mulint_PARM_2,a
2BE4 A3        8397            inc     dptr
2BE5 E0        8398            movx    a,@dptr
2BE6 F501      8399            mov     (__mulint_PARM_2 + 1),a
2BE8 900064    8400            mov     dptr,#0x0064
2BEB C004      8401            push    ar4
2BED C005      8402            push    ar5
2BEF 120000    8403            lcall   __mulint
2BF2 AA82      8404            mov     r2,dpl
2BF4 AB83      8405            mov     r3,dph
2BF6 D005      8406            pop     ar5
2BF8 D004      8407            pop     ar4
2BFA 9050A0    8408            mov     dptr,#_vy_thres
2BFD E0        8409            movx    a,@dptr
2BFE F500      8410            mov     __mulint_PARM_2,a
2C00 A3        8411            inc     dptr
2C01 E0        8412            movx    a,@dptr
2C02 F501      8413            mov     (__mulint_PARM_2 + 1),a
2C04 900064    8414            mov     dptr,#0x0064
2C07 C002      8415            push    ar2
2C09 C003      8416            push    ar3
2C0B C004      8417            push    ar4
2C0D C005      8418            push    ar5
2C0F 120000    8419            lcall   __mulint
2C12 AE82      8420            mov     r6,dpl
2C14 AF83      8421            mov     r7,dph
2C16 750002    8422            mov     __divsint_PARM_2,#0x02
2C19 E4        8423            clr     a
2C1A F501      8424            mov     (__divsint_PARM_2 + 1),a
2C1C 8E82      8425            mov     dpl,r6
2C1E 8F83      8426            mov     dph,r7
2C20 120000    8427            lcall   __divsint
2C23 AE82      8428            mov     r6,dpl
2C25 AF83      8429            mov     r7,dph
2C27 D005      8430            pop     ar5
2C29 D004      8431            pop     ar4
2C2B D003      8432            pop     ar3
2C2D D002      8433            pop     ar2
2C2F C3        8434            clr     c
2C30 EE        8435            mov     a,r6
2C31 9A        8436            subb    a,r2
2C32 EF        8437            mov     a,r7
2C33 6480      8438            xrl     a,#0x80
2C35 8BF0      8439            mov     b,r3
2C37 63F080    8440            xrl     b,#0x80
2C3A 95F0      8441            subb    a,b
2C3C 5000      8442            jnc     L044079?
2C3E 020000    8443            ljmp    L044032?
2C41           8444   L044079?:
2C41           8445   ;        main.c:1351: pwm_left = vy_error*100/(vx_error+vy_error);
2C41 90D4D8    8446            mov     dptr,#_Joystick_Control_vy_error_1_246
2C44 E0        8447            movx    a,@dptr
2C45 FA        8448            mov     r2,a
2C46 A3        8449            inc     dptr
2C47 E0        8450            movx    a,@dptr
2C48 FB        8451            mov     r3,a
2C49 8A00      8452            mov     __mulint_PARM_2,r2
2C4B 8B01      8453            mov     (__mulint_PARM_2 + 1),r3
2C4D 900064    8454            mov     dptr,#0x0064
2C50 C002      8455            push    ar2
2C52 C003      8456            push    ar3
2C54 C004      8457            push    ar4
2C56 C005      8458            push    ar5
2C58 120000    8459            lcall   __mulint
2C5B AE82      8460            mov     r6,dpl
2C5D AF83      8461            mov     r7,dph
2C5F D005      8462            pop     ar5
2C61 D004      8463            pop     ar4
2C63 D003      8464            pop     ar3
2C65 D002      8465            pop     ar2
2C67 EA        8466            mov     a,r2
2C68 2C        8467            add     a,r4
2C69 F500      8468            mov     __divsint_PARM_2,a
2C6B EB        8469            mov     a,r3
2C6C 3D        8470            addc    a,r5
2C6D F501      8471            mov     (__divsint_PARM_2 + 1),a
2C6F 8E82      8472            mov     dpl,r6
2C71 8F83      8473            mov     dph,r7
2C73 C002      8474            push    ar2
2C75 C003      8475            push    ar3
2C77 120000    8476            lcall   __divsint
2C7A AE82      8477            mov     r6,dpl
2C7C D003      8478            pop     ar3
2C7E D002      8479            pop     ar2
2C80 905260    8480            mov     dptr,#_pwm_left
2C83 EE        8481            mov     a,r6
2C84 F0        8482            movx    @dptr,a
2C85           8483   ;        main.c:1352: pwm_right =pwm_corr*vy_error; 
2C85 904F10    8484            mov     dptr,#_pwm_corr
2C88 E0        8485            movx    a,@dptr
2C89 F500      8486            mov     _Joystick_Control_sloc5_1_0,a
2C8B A3        8487            inc     dptr
2C8C E0        8488            movx    a,@dptr
2C8D F501      8489            mov     (_Joystick_Control_sloc5_1_0 + 1),a
2C8F A3        8490            inc     dptr
2C90 E0        8491            movx    a,@dptr
2C91 F502      8492            mov     (_Joystick_Control_sloc5_1_0 + 2),a
2C93 A3        8493            inc     dptr
2C94 E0        8494            movx    a,@dptr
2C95 F503      8495            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2C97 8A82      8496            mov     dpl,r2
2C99 8B83      8497            mov     dph,r3
2C9B 120000    8498            lcall   ___sint2fs
2C9E AA82      8499            mov     r2,dpl
2CA0 AB83      8500            mov     r3,dph
2CA2 AEF0      8501            mov     r6,b
2CA4 FF        8502            mov     r7,a
2CA5 C002      8503            push    ar2
2CA7 C003      8504            push    ar3
2CA9 C006      8505            push    ar6
2CAB C007      8506            push    ar7
2CAD 850082    8507            mov     dpl,_Joystick_Control_sloc5_1_0
2CB0 850183    8508            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
2CB3 8502F0    8509            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2CB6 E503      8510            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2CB8 120000    8511            lcall   ___fsmul
2CBB AA82      8512            mov     r2,dpl
2CBD AB83      8513            mov     r3,dph
2CBF AEF0      8514            mov     r6,b
2CC1 FF        8515            mov     r7,a
2CC2 E581      8516            mov     a,sp
2CC4 24FC      8517            add     a,#0xfc
2CC6 F581      8518            mov     sp,a
2CC8 8A82      8519            mov     dpl,r2
2CCA 8B83      8520            mov     dph,r3
2CCC 8EF0      8521            mov     b,r6
2CCE EF        8522            mov     a,r7
2CCF 120000    8523            lcall   ___fs2uchar
2CD2 E582      8524            mov     a,dpl
2CD4 905220    8525            mov     dptr,#_pwm_right
2CD7 F0        8526            movx    @dptr,a
2CD8 020000    8527            ljmp    L044033?
2CDB           8528   L044032?:
2CDB           8529   ;        main.c:1355: pwm_left = vx_error*100/(vx_error+vy_error);
2CDB 8C00      8530            mov     __mulint_PARM_2,r4
2CDD 8D01      8531            mov     (__mulint_PARM_2 + 1),r5
2CDF 900064    8532            mov     dptr,#0x0064
2CE2 C004      8533            push    ar4
2CE4 C005      8534            push    ar5
2CE6 120000    8535            lcall   __mulint
2CE9 AA82      8536            mov     r2,dpl
2CEB AB83      8537            mov     r3,dph
2CED D005      8538            pop     ar5
2CEF D004      8539            pop     ar4
2CF1 90D4D8    8540            mov     dptr,#_Joystick_Control_vy_error_1_246
2CF4 E0        8541            movx    a,@dptr
2CF5 FE        8542            mov     r6,a
2CF6 A3        8543            inc     dptr
2CF7 E0        8544            movx    a,@dptr
2CF8 FF        8545            mov     r7,a
2CF9 EE        8546            mov     a,r6
2CFA 2C        8547            add     a,r4
2CFB F500      8548            mov     __divsint_PARM_2,a
2CFD EF        8549            mov     a,r7
2CFE 3D        8550            addc    a,r5
2CFF F501      8551            mov     (__divsint_PARM_2 + 1),a
2D01 8A82      8552            mov     dpl,r2
2D03 8B83      8553            mov     dph,r3
2D05 C004      8554            push    ar4
2D07 C005      8555            push    ar5
2D09 120000    8556            lcall   __divsint
2D0C AA82      8557            mov     r2,dpl
2D0E D005      8558            pop     ar5
2D10 D004      8559            pop     ar4
2D12 905260    8560            mov     dptr,#_pwm_left
2D15 EA        8561            mov     a,r2
2D16 F0        8562            movx    @dptr,a
2D17           8563   ;        main.c:1356: pwm_right = pwm_corr*vx_error; 
2D17 904F10    8564            mov     dptr,#_pwm_corr
2D1A E0        8565            movx    a,@dptr
2D1B FA        8566            mov     r2,a
2D1C A3        8567            inc     dptr
2D1D E0        8568            movx    a,@dptr
2D1E FB        8569            mov     r3,a
2D1F A3        8570            inc     dptr
2D20 E0        8571            movx    a,@dptr
2D21 FE        8572            mov     r6,a
2D22 A3        8573            inc     dptr
2D23 E0        8574            movx    a,@dptr
2D24 FF        8575            mov     r7,a
2D25 8C82      8576            mov     dpl,r4
2D27 8D83      8577            mov     dph,r5
2D29 C002      8578            push    ar2
2D2B C003      8579            push    ar3
2D2D C006      8580            push    ar6
2D2F C007      8581            push    ar7
2D31 120000    8582            lcall   ___sint2fs
2D34 AC82      8583            mov     r4,dpl
2D36 AD83      8584            mov     r5,dph
2D38 A8F0      8585            mov     r0,b
2D3A F9        8586            mov     r1,a
2D3B D007      8587            pop     ar7
2D3D D006      8588            pop     ar6
2D3F D003      8589            pop     ar3
2D41 D002      8590            pop     ar2
2D43 C004      8591            push    ar4
2D45 C005      8592            push    ar5
2D47 C000      8593            push    ar0
2D49 C001      8594            push    ar1
2D4B 8A82      8595            mov     dpl,r2
2D4D 8B83      8596            mov     dph,r3
2D4F 8EF0      8597            mov     b,r6
2D51 EF        8598            mov     a,r7
2D52 120000    8599            lcall   ___fsmul
2D55 AA82      8600            mov     r2,dpl
2D57 AB83      8601            mov     r3,dph
2D59 ACF0      8602            mov     r4,b
2D5B FD        8603            mov     r5,a
2D5C E581      8604            mov     a,sp
2D5E 24FC      8605            add     a,#0xfc
2D60 F581      8606            mov     sp,a
2D62 8A82      8607            mov     dpl,r2
2D64 8B83      8608            mov     dph,r3
2D66 8CF0      8609            mov     b,r4
2D68 ED        8610            mov     a,r5
2D69 120000    8611            lcall   ___fs2uchar
2D6C E582      8612            mov     a,dpl
2D6E 905220    8613            mov     dptr,#_pwm_right
2D71 F0        8614            movx    @dptr,a
2D72           8615   L044033?:
2D72           8616   ;        main.c:1358: curr_angle += angle_diff * 1.4; // TUNE THIS 
2D72 C0B0      8617            push    _Joystick_Control_sloc4_1_0
2D74 C0B1      8618            push    (_Joystick_Control_sloc4_1_0 + 1)
2D76 C0B2      8619            push    (_Joystick_Control_sloc4_1_0 + 2)
2D78 C0B3      8620            push    (_Joystick_Control_sloc4_1_0 + 3)
2D7A 903333    8621            mov     dptr,#0x3333
2D7D 75F0B3    8622            mov     b,#0xB3
2D80 743F      8623            mov     a,#0x3F
2D82 120000    8624            lcall   ___fsmul
2D85 AA82      8625            mov     r2,dpl
2D87 AB83      8626            mov     r3,dph
2D89 ACF0      8627            mov     r4,b
2D8B FD        8628            mov     r5,a
2D8C E581      8629            mov     a,sp
2D8E 24FC      8630            add     a,#0xfc
2D90 F581      8631            mov     sp,a
2D92 904ED0    8632            mov     dptr,#_curr_angle
2D95 E0        8633            movx    a,@dptr
2D96 FE        8634            mov     r6,a
2D97 A3        8635            inc     dptr
2D98 E0        8636            movx    a,@dptr
2D99 FF        8637            mov     r7,a
2D9A A3        8638            inc     dptr
2D9B E0        8639            movx    a,@dptr
2D9C F8        8640            mov     r0,a
2D9D A3        8641            inc     dptr
2D9E E0        8642            movx    a,@dptr
2D9F F9        8643            mov     r1,a
2DA0 C002      8644            push    ar2
2DA2 C003      8645            push    ar3
2DA4 C004      8646            push    ar4
2DA6 C005      8647            push    ar5
2DA8 8E82      8648            mov     dpl,r6
2DAA 8F83      8649            mov     dph,r7
2DAC 88F0      8650            mov     b,r0
2DAE E9        8651            mov     a,r1
2DAF 120000    8652            lcall   ___fsadd
2DB2 AA82      8653            mov     r2,dpl
2DB4 AB83      8654            mov     r3,dph
2DB6 ACF0      8655            mov     r4,b
2DB8 FD        8656            mov     r5,a
2DB9 E581      8657            mov     a,sp
2DBB 24FC      8658            add     a,#0xfc
2DBD F581      8659            mov     sp,a
2DBF 904ED0    8660            mov     dptr,#_curr_angle
2DC2 EA        8661            mov     a,r2
2DC3 F0        8662            movx    @dptr,a
2DC4 A3        8663            inc     dptr
2DC5 EB        8664            mov     a,r3
2DC6 F0        8665            movx    @dptr,a
2DC7 A3        8666            inc     dptr
2DC8 EC        8667            mov     a,r4
2DC9 F0        8668            movx    @dptr,a
2DCA A3        8669            inc     dptr
2DCB ED        8670            mov     a,r5
2DCC F0        8671            movx    @dptr,a
2DCD           8672   L044040?:
2DCD           8673   ;        main.c:1363: last_raw_angle = raw_angle; 
2DCD 904E90    8674            mov     dptr,#_raw_angle
2DD0 E0        8675            movx    a,@dptr
2DD1 FA        8676            mov     r2,a
2DD2 A3        8677            inc     dptr
2DD3 E0        8678            movx    a,@dptr
2DD4 FB        8679            mov     r3,a
2DD5 A3        8680            inc     dptr
2DD6 E0        8681            movx    a,@dptr
2DD7 FC        8682            mov     r4,a
2DD8 A3        8683            inc     dptr
2DD9 E0        8684            movx    a,@dptr
2DDA FD        8685            mov     r5,a
2DDB 904E50    8686            mov     dptr,#_last_raw_angle
2DDE EA        8687            mov     a,r2
2DDF F0        8688            movx    @dptr,a
2DE0 A3        8689            inc     dptr
2DE1 EB        8690            mov     a,r3
2DE2 F0        8691            movx    @dptr,a
2DE3 A3        8692            inc     dptr
2DE4 EC        8693            mov     a,r4
2DE5 F0        8694            movx    @dptr,a
2DE6 A3        8695            inc     dptr
2DE7 ED        8696            mov     a,r5
2DE8 F0        8697            movx    @dptr,a
2DE9           8698   ;        main.c:1364: return curr_angle; 
2DE9 904ED0    8699            mov     dptr,#_curr_angle
2DEC E0        8700            movx    a,@dptr
2DED FA        8701            mov     r2,a
2DEE A3        8702            inc     dptr
2DEF E0        8703            movx    a,@dptr
2DF0 FB        8704            mov     r3,a
2DF1 A3        8705            inc     dptr
2DF2 E0        8706            movx    a,@dptr
2DF3 FC        8707            mov     r4,a
2DF4 A3        8708            inc     dptr
2DF5 E0        8709            movx    a,@dptr
2DF6 8A82      8710            mov     dpl,r2
2DF8 8B83      8711            mov     dph,r3
2DFA 8CF0      8712            mov     b,r4
2DFC 22        8713            ret
2DFD           8714   ;------------------------------------------------------------
2DFD           8715   ;Allocation info for local variables in function 'main'
2DFD           8716   ;------------------------------------------------------------
2DFD           8717   ;sloc0                     Allocated with name '_main_sloc0_1_0'
2DFD           8718   ;c                         Allocated with name '_main_c_1_269'
2DFD           8719   ;angle_count               Allocated with name '_main_angle_count_1_269'
2DFD           8720   ;------------------------------------------------------------
2DFD           8721   ;        main.c:1368: void main (void)
2DFD           8722   ;        -----------------------------------------
2DFD           8723   ;         function main
2DFD           8724   ;        -----------------------------------------
2DFD           8725   _main:
2DFD           8726   ;        main.c:1374: Init_all();
2DFD 120000    8727            lcall   _Init_all
2E00           8728   ;        main.c:1375: BMM150_Init();
2E00 120000    8729            lcall   _BMM150_Init
2E03           8730   ;        main.c:1376: waitms(500);
2E03 9001F4    8731            mov     dptr,#0x01F4
2E06 120000    8732            lcall   _waitms
2E09           8733   ;        main.c:1377: UART1_Init(9600);
2E09 902580    8734            mov     dptr,#0x2580
2E0C E4        8735            clr     a
2E0D F5F0      8736            mov     b,a
2E0F 120000    8737            lcall   _UART1_Init
2E12           8738   ;        main.c:1379: ReceptionOff();
2E12 120000    8739            lcall   _ReceptionOff
2E15           8740   ;        main.c:1382: SendATCommand("AT+VER\r\n");
2E15 9029D0    8741            mov     dptr,#__str_11
2E18 75F080    8742            mov     b,#0x80
2E1B 120000    8743            lcall   _SendATCommand
2E1E           8744   ;        main.c:1383: SendATCommand("AT+BAUD\r\n");
2E1E 902A10    8745            mov     dptr,#__str_12
2E21 75F080    8746            mov     b,#0x80
2E24 120000    8747            lcall   _SendATCommand
2E27           8748   ;        main.c:1384: SendATCommand("AT+RFID\r\n");
2E27 902A50    8749            mov     dptr,#__str_13
2E2A 75F080    8750            mov     b,#0x80
2E2D 120000    8751            lcall   _SendATCommand
2E30           8752   ;        main.c:1385: SendATCommand("AT+DVID\r\n");
2E30 902A90    8753            mov     dptr,#__str_14
2E33 75F080    8754            mov     b,#0x80
2E36 120000    8755            lcall   _SendATCommand
2E39           8756   ;        main.c:1386: SendATCommand("AT+RFC002\r\n");
2E39 902AD0    8757            mov     dptr,#__str_15
2E3C 75F080    8758            mov     b,#0x80
2E3F 120000    8759            lcall   _SendATCommand
2E42           8760   ;        main.c:1387: SendATCommand("AT+POWE\r\n");
2E42 902B10    8761            mov     dptr,#__str_16
2E45 75F080    8762            mov     b,#0x80
2E48 120000    8763            lcall   _SendATCommand
2E4B           8764   ;        main.c:1388: SendATCommand("AT+CLSS\r\n");
2E4B 902B50    8765            mov     dptr,#__str_17
2E4E 75F080    8766            mov     b,#0x80
2E51 120000    8767            lcall   _SendATCommand
2E54           8768   ;        main.c:1389: SendATCommand("AT+DVIDEF11\r\n");  
2E54 902B90    8769            mov     dptr,#__str_18
2E57 75F080    8770            mov     b,#0x80
2E5A 120000    8771            lcall   _SendATCommand
2E5D           8772   ;        main.c:1392: L_bridge_1 = 0; 
2E5D C2A1      8773            clr     _P2_1
2E5F           8774   ;        main.c:1393: L_bridge_2 = 0; 
2E5F C2A2      8775            clr     _P2_2
2E61           8776   ;        main.c:1394: R_bridge_1 = 0; 
2E61 C2A4      8777            clr     _P2_4
2E63           8778   ;        main.c:1395: R_bridge_2 = 0; 
2E63 C2A3      8779            clr     _P2_3
2E65           8780   ;        main.c:1396: vx = 0; 
2E65 905060    8781            mov     dptr,#_vx
2E68 E4        8782            clr     a
2E69 F0        8783            movx    @dptr,a
2E6A A3        8784            inc     dptr
2E6B F0        8785            movx    @dptr,a
2E6C           8786   ;        main.c:1397: vy = 0; 
2E6C 905020    8787            mov     dptr,#_vy
2E6F E4        8788            clr     a
2E70 F0        8789            movx    @dptr,a
2E71 A3        8790            inc     dptr
2E72 F0        8791            movx    @dptr,a
2E73           8792   ;        main.c:1400: curr_angle = Read_angle();
2E73 120000    8793            lcall   _Read_angle
2E76 AA82      8794            mov     r2,dpl
2E78 AB83      8795            mov     r3,dph
2E7A ACF0      8796            mov     r4,b
2E7C FD        8797            mov     r5,a
2E7D 904ED0    8798            mov     dptr,#_curr_angle
2E80 EA        8799            mov     a,r2
2E81 F0        8800            movx    @dptr,a
2E82 A3        8801            inc     dptr
2E83 EB        8802            mov     a,r3
2E84 F0        8803            movx    @dptr,a
2E85 A3        8804            inc     dptr
2E86 EC        8805            mov     a,r4
2E87 F0        8806            movx    @dptr,a
2E88 A3        8807            inc     dptr
2E89 ED        8808            mov     a,r5
2E8A F0        8809            movx    @dptr,a
2E8B           8810   ;        main.c:1401: while(1){  
2E8B           8811   L045016?:
2E8B           8812   ;        main.c:1403: if(pick == '1'){
2E8B 904C90    8813            mov     dptr,#_pick
2E8E E0        8814            movx    a,@dptr
2E8F FA        8815            mov     r2,a
2E90 BA3110    8816            cjne    r2,#0x31,L045002?
2E93           8817   ;        main.c:1404: servo_pick();
2E93 120000    8818            lcall   _servo_pick
2E96           8819   ;        main.c:1405: waitms(1000);
2E96 9003E8    8820            mov     dptr,#0x03E8
2E99 120000    8821            lcall   _waitms
2E9C           8822   ;        main.c:1406: pick = '0';
2E9C 904C90    8823            mov     dptr,#_pick
2E9F 7430      8824            mov     a,#0x30
2EA1 F0        8825            movx    @dptr,a
2EA2           8826   L045002?:
2EA2           8827   ;        main.c:1409: if(auto_mode){
2EA2 904CD0    8828            mov     dptr,#_auto_mode
2EA5 E0        8829            movx    a,@dptr
2EA6 FA        8830            mov     r2,a
2EA7 A3        8831            inc     dptr
2EA8 E0        8832            movx    a,@dptr
2EA9 FB        8833            mov     r3,a
2EAA 4A        8834            orl     a,r2
2EAB 6000      8835            jz      L045004?
2EAD           8836   ;        main.c:1410: Auto_mode_slave();
2EAD 120000    8837            lcall   _Auto_mode_slave
2EB0           8838   ;        main.c:1411: auto_mode = 0;
2EB0 904CD0    8839            mov     dptr,#_auto_mode
2EB3 E4        8840            clr     a
2EB4 F0        8841            movx    @dptr,a
2EB5 A3        8842            inc     dptr
2EB6 F0        8843            movx    @dptr,a
2EB7           8844   L045004?:
2EB7           8845   ;        main.c:1414: if(RXU1()) // Something has arrived
2EB7 120000    8846            lcall   _RXU1
2EBA 5000      8847            jnc     L045016?
2EBC           8848   ;        main.c:1416: c=getchar1();
2EBC 120000    8849            lcall   _getchar1
2EBF AA82      8850            mov     r2,dpl
2EC1           8851   ;        main.c:1417: if(c=='!') // Master is sending message
2EC1 BA2190    8852            cjne    r2,#0x21,L045031?
2EC4 8000      8853            sjmp    L045032?
2EC6           8854   L045031?:
2EC6 020000    8855            ljmp    L045011?
2EC9           8856   L045032?:
2EC9           8857   ;        main.c:1419: getstr1(buff, sizeof(buff)-1);
2EC9 75F013    8858            mov     _getstr1_PARM_2,#0x13
2ECC 905760    8859            mov     dptr,#_buff
2ECF 75F040    8860            mov     b,#0x40
2ED2 120000    8861            lcall   _getstr1
2ED5           8862   ;        main.c:1420: if(strlen(buff)==11)
2ED5 905760    8863            mov     dptr,#_buff
2ED8 75F040    8864            mov     b,#0x40
2EDB 120000    8865            lcall   _strlen
2EDE AB82      8866            mov     r3,dpl
2EE0 AC83      8867            mov     r4,dph
2EE2 BB0B50    8868            cjne    r3,#0x0B,L045033?
2EE5 BC0050    8869            cjne    r4,#0x00,L045033?
2EE8 8000      8870            sjmp    L045034?
2EEA           8871   L045033?:
2EEA 020000    8872            ljmp    L045006?
2EED           8873   L045034?:
2EED           8874   ;        main.c:1424: sscanf(buff,"%03d,%03d,%01d,%01d",&vx, &vy,&pick,&auto_mode);
2EED 74D0      8875            mov     a,#_auto_mode
2EEF C0E0      8876            push    acc
2EF1 744C      8877            mov     a,#(_auto_mode >> 8)
2EF3 C0E0      8878            push    acc
2EF5 E4        8879            clr     a
2EF6 C0E0      8880            push    acc
2EF8 7490      8881            mov     a,#_pick
2EFA C0E0      8882            push    acc
2EFC 744C      8883            mov     a,#(_pick >> 8)
2EFE C0E0      8884            push    acc
2F00 E4        8885            clr     a
2F01 C0E0      8886            push    acc
2F03 7420      8887            mov     a,#_vy
2F05 C0E0      8888            push    acc
2F07 7450      8889            mov     a,#(_vy >> 8)
2F09 C0E0      8890            push    acc
2F0B E4        8891            clr     a
2F0C C0E0      8892            push    acc
2F0E 7460      8893            mov     a,#_vx
2F10 C0E0      8894            push    acc
2F12 7450      8895            mov     a,#(_vx >> 8)
2F14 C0E0      8896            push    acc
2F16 E4        8897            clr     a
2F17 C0E0      8898            push    acc
2F19 74C0      8899            mov     a,#__str_5
2F1B C0E0      8900            push    acc
2F1D 7419      8901            mov     a,#(__str_5 >> 8)
2F1F C0E0      8902            push    acc
2F21 7480      8903            mov     a,#0x80
2F23 C0E0      8904            push    acc
2F25 7460      8905            mov     a,#_buff
2F27 C0E0      8906            push    acc
2F29 7457      8907            mov     a,#(_buff >> 8)
2F2B C0E0      8908            push    acc
2F2D 7440      8909            mov     a,#0x40
2F2F C0E0      8910            push    acc
2F31 120000    8911            lcall   _sscanf
2F34 E581      8912            mov     a,sp
2F36 24EE      8913            add     a,#0xee
2F38 F581      8914            mov     sp,a
2F3A           8915   ;        main.c:1425: pick = buff[8];
2F3A 7868      8916            mov     r0,#(_buff + 0x0008)
2F3C 8603      8917            mov     ar3,@r0
2F3E 904C90    8918            mov     dptr,#_pick
2F41 EB        8919            mov     a,r3
2F42 F0        8920            movx    @dptr,a
2F43           8921   ;        main.c:1426: printf("Joystick Received: Vx = %d, Vy = %d, Order = %c, Auto = %d\r\n", vx, vy, pick, auto_mode);
2F43 EB        8922            mov     a,r3
2F44 33        8923            rlc     a
2F45 95E0      8924            subb    a,acc
2F47 FC        8925            mov     r4,a
2F48 904CD0    8926            mov     dptr,#_auto_mode
2F4B E0        8927            movx    a,@dptr
2F4C C0E0      8928            push    acc
2F4E A3        8929            inc     dptr
2F4F E0        8930            movx    a,@dptr
2F50 C0E0      8931            push    acc
2F52 C003      8932            push    ar3
2F54 C004      8933            push    ar4
2F56 905020    8934            mov     dptr,#_vy
2F59 E0        8935            movx    a,@dptr
2F5A C0E0      8936            push    acc
2F5C A3        8937            inc     dptr
2F5D E0        8938            movx    a,@dptr
2F5E C0E0      8939            push    acc
2F60 905060    8940            mov     dptr,#_vx
2F63 E0        8941            movx    a,@dptr
2F64 C0E0      8942            push    acc
2F66 A3        8943            inc     dptr
2F67 E0        8944            movx    a,@dptr
2F68 C0E0      8945            push    acc
2F6A 7410      8946            mov     a,#__str_19
2F6C C0E0      8947            push    acc
2F6E 742E      8948            mov     a,#(__str_19 >> 8)
2F70 C0E0      8949            push    acc
2F72 7480      8950            mov     a,#0x80
2F74 C0E0      8951            push    acc
2F76 120000    8952            lcall   _printf
2F79 E581      8953            mov     a,sp
2F7B 24F5      8954            add     a,#0xf5
2F7D F581      8955            mov     sp,a
2F7F           8956   ;        main.c:1427: curr_angle = Joystick_Control(&vx, &vy);
2F7F 75B020    8957            mov     _Joystick_Control_PARM_2,#_vy
2F82 75B150    8958            mov     (_Joystick_Control_PARM_2 + 1),#(_vy >> 8)
2F85 75B200    8959            mov     (_Joystick_Control_PARM_2 + 2),#0x00
2F88 905060    8960            mov     dptr,#_vx
2F8B 75F000    8961            mov     b,#0x00
2F8E 120000    8962            lcall   _Joystick_Control
2F91 AB82      8963            mov     r3,dpl
2F93 AC83      8964            mov     r4,dph
2F95 ADF0      8965            mov     r5,b
2F97 FE        8966            mov     r6,a
2F98 904ED0    8967            mov     dptr,#_curr_angle
2F9B EB        8968            mov     a,r3
2F9C F0        8969            movx    @dptr,a
2F9D A3        8970            inc     dptr
2F9E EC        8971            mov     a,r4
2F9F F0        8972            movx    @dptr,a
2FA0 A3        8973            inc     dptr
2FA1 ED        8974            mov     a,r5
2FA2 F0        8975            movx    @dptr,a
2FA3 A3        8976            inc     dptr
2FA4 EE        8977            mov     a,r6
2FA5 F0        8978            movx    @dptr,a
2FA6 020000    8979            ljmp    L045016?
2FA9           8980   L045006?:
2FA9           8981   ;        main.c:1430: printf("*** BAD MESSAGE ***: %s\r\n", buff);
2FA9 7460      8982            mov     a,#_buff
2FAB C0E0      8983            push    acc
2FAD 7457      8984            mov     a,#(_buff >> 8)
2FAF C0E0      8985            push    acc
2FB1 7440      8986            mov     a,#0x40
2FB3 C0E0      8987            push    acc
2FB5 7450      8988            mov     a,#__str_20
2FB7 C0E0      8989            push    acc
2FB9 742E      8990            mov     a,#(__str_20 >> 8)
2FBB C0E0      8991            push    acc
2FBD 7480      8992            mov     a,#0x80
2FBF C0E0      8993            push    acc
2FC1 120000    8994            lcall   _printf
2FC4 E581      8995            mov     a,sp
2FC6 24FA      8996            add     a,#0xfa
2FC8 F581      8997            mov     sp,a
2FCA 020000    8998            ljmp    L045016?
2FCD           8999   L045011?:
2FCD           9000   ;        main.c:1433: else if(c=='@') // Master wants slave data
2FCD BA4090    9001            cjne    r2,#0x40,L045035?
2FD0 8000      9002            sjmp    L045036?
2FD2           9003   L045035?:
2FD2 020000    9004            ljmp    L045016?
2FD5           9005   L045036?:
2FD5           9006   ;        main.c:1435: sprintf(buff, "0,00,%04ld,%05d,%03d,%03d,%03d\n", freq100, weight, (int)Read_angle(),pwm_left,pwm_right);
2FD5 905220    9007            mov     dptr,#_pwm_right
2FD8 E0        9008            movx    a,@dptr
2FD9 FA        9009            mov     r2,a
2FDA 7B00      9010            mov     r3,#0x00
2FDC 905260    9011            mov     dptr,#_pwm_left
2FDF E0        9012            movx    a,@dptr
2FE0 FC        9013            mov     r4,a
2FE1 8C40      9014            mov     _main_sloc0_1_0,r4
2FE3 754100    9015            mov     (_main_sloc0_1_0 + 1),#0x00
2FE6 C002      9016            push    ar2
2FE8 C003      9017            push    ar3
2FEA 120000    9018            lcall   _Read_angle
2FED 120000    9019            lcall   ___fs2sint
2FF0 AC82      9020            mov     r4,dpl
2FF2 AD83      9021            mov     r5,dph
2FF4 C040      9022            push    _main_sloc0_1_0
2FF6 C041      9023            push    (_main_sloc0_1_0 + 1)
2FF8 C004      9024            push    ar4
2FFA C005      9025            push    ar5
2FFC 904D90    9026            mov     dptr,#_weight
2FFF E0        9027            movx    a,@dptr
3000 C0E0      9028            push    acc
3002 A3        9029            inc     dptr
3003 E0        9030            movx    a,@dptr
3004 C0E0      9031            push    acc
3006 905720    9032            mov     dptr,#_freq100
3009 E0        9033            movx    a,@dptr
300A C0E0      9034            push    acc
300C A3        9035            inc     dptr
300D E0        9036            movx    a,@dptr
300E C0E0      9037            push    acc
3010 A3        9038            inc     dptr
3011 E0        9039            movx    a,@dptr
3012 C0E0      9040            push    acc
3014 A3        9041            inc     dptr
3015 E0        9042            movx    a,@dptr
3016 C0E0      9043            push    acc
3018 7410      9044            mov     a,#__str_21
301A C0E0      9045            push    acc
301C 742F      9046            mov     a,#(__str_21 >> 8)
301E C0E0      9047            push    acc
3020 7480      9048            mov     a,#0x80
3022 C0E0      9049            push    acc
3024 7460      9050            mov     a,#_buff
3026 C0E0      9051            push    acc
3028 7457      9052            mov     a,#(_buff >> 8)
302A C0E0      9053            push    acc
302C 7440      9054            mov     a,#0x40
302E C0E0      9055            push    acc
3030 120000    9056            lcall   _sprintf
3033 E581      9057            mov     a,sp
3035 24EE      9058            add     a,#0xee
3037 F581      9059            mov     sp,a
3039           9060   ;        main.c:1436: printf("%s\r\n",buff);
3039 7460      9061            mov     a,#_buff
303B C0E0      9062            push    acc
303D 7457      9063            mov     a,#(_buff >> 8)
303F C0E0      9064            push    acc
3041 7440      9065            mov     a,#0x40
3043 C0E0      9066            push    acc
3045 7480      9067            mov     a,#__str_7
3047 C0E0      9068            push    acc
3049 741B      9069            mov     a,#(__str_7 >> 8)
304B C0E0      9070            push    acc
304D 7480      9071            mov     a,#0x80
304F C0E0      9072            push    acc
3051 120000    9073            lcall   _printf
3054 E581      9074            mov     a,sp
3056 24FA      9075            add     a,#0xfa
3058 F581      9076            mov     sp,a
305A           9077   ;        main.c:1437: waitms(5); // The radio seems to need this delay...
305A 900005    9078            mov     dptr,#0x0005
305D 120000    9079            lcall   _waitms
3060           9080   ;        main.c:1438: sendstr1(buff);
3060 905760    9081            mov     dptr,#_buff
3063 75F040    9082            mov     b,#0x40
3066 120000    9083            lcall   _sendstr1
3069 020000    9084            ljmp    L045016?
306C           9085            rseg R_CSEG
306C           9086   
0000           9087            rseg R_XINIT
0000           9088   __xinit__pwm_counter:
0000 0000      9089            db 0x00,0x00    ; 0
0002           9090   __xinit__servo_counter:
0002 0000      9091            db 0x00,0x00    ; 0
0004           9092   __xinit__pwm_left:
0004 00        9093            db 0x00         ; 0
0005           9094   __xinit__pwm_right:
0005 00        9095            db 0x00         ; 0
0006           9096   __xinit__L_motor_dir:
0006 01        9097            db 0x01         ; 1
0007           9098   __xinit__R_motor_dir:
0007 01        9099            db 0x01         ; 1
0008           9100   __xinit__servo_base:
0008 32        9101            db 0x32         ; 50
0009           9102   __xinit__servo_arm:
0009 32        9103            db 0x32         ; 50
000A           9104   __xinit__vx_thres:
000A A100      9105            db 0xA1,0x00    ;  161
000C           9106   __xinit__vy_thres:
000C A600      9107            db 0xA6,0x00    ;  166
000E           9108   __xinit__vx:
000E 0000      9109            db 0x00,0x00    ;  0
0010           9110   __xinit__vy:
0010 0000      9111            db 0x00,0x00    ;  0
0012           9112   __xinit__fre_mea_count:
0012 0000      9113            db 0x00,0x00    ; 0
0014           9114   __xinit__weight_mea_count:
0014 0000      9115            db 0x00,0x00    ; 0
0016           9116   __xinit__seed:
0016 3930      9117            db 0x39,0x30    ; 12345
0018           9118   __xinit__pwm_corr:
0018 3333733F  9119            db 0x33,0x33,0x73,0x3F  ;  9.500000e-001
001C           9120   __xinit__curr_angle:
001C 00000000  9121            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0020           9122   __xinit__raw_angle:
0020 00000000  9123            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0024           9124   __xinit__last_raw_angle:
0024 00000000  9125            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0028           9126   __xinit__angle_diff:
0028 00000000  9127            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
002C           9128   __xinit__mea_yes:
002C 01        9129            db 0x01         ;  1
002D           9130   __xinit__weight:
002D 0000      9131            db 0x00,0x00    ; 0
002F           9132   __xinit__duration:
002F 00000000  9133            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0033           9134   __xinit__distance:
0033 1027      9135            db 0x10,0x27    ;  10000
0035           9136   __xinit__auto_mode:
0035 0000      9137            db 0x00,0x00    ;  0
0037           9138   __xinit__pick:
0037 00        9139            db 0x00         ;  0
0038           9140   
0000           9141            rseg R_CONST
0000           9142   __str_0:
0000 4572726F  9143            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
0035 0D        9144            db 0x0D
0036 0A        9145            db 0x0A
0037 00        9146            db 0x00
0038           9147   __str_1:
0038 424D4D31  9148            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
0068 0D        9149            db 0x0D
0069 0A        9150            db 0x0A
006A 00        9151            db 0x00
006B           9152   __str_2:
006B 436F6D6D  9153            db 'Command: %s'
     616E643A
     202573
0076 00        9154            db 0x00
0077           9155   __str_3:
0077 52657370  9156            db 'Response: %s'
     6F6E7365
     3A202573
0083 0D        9157            db 0x0D
0084 0A        9158            db 0x0A
0085 00        9159            db 0x00
0086           9160   __str_4:
0086 41542B44  9161            db 'AT+DVID0000'
     56494430
     303030
0091 0D        9162            db 0x0D
0092 0A        9163            db 0x0A
0093 00        9164            db 0x00
0094           9165   __str_5:
0094 25303364  9166            db '%03d,%03d,%01d,%01d'
     2C253033
     642C2530
     31642C25
     303164
00A7 00        9167            db 0x00
00A8           9168   __str_6:
00A8 25303164  9169            db '%01d,%02d,%ld,%05d,%03d,%03d,%03d'
     2C253032
     642C256C
     642C2530
     35642C25
     3033642C
     25303364
     2C253033
     64
00C9 0A        9170            db 0x0A
00CA 00        9171            db 0x00
00CB           9172   __str_7:
00CB 2573      9173            db '%s'
00CD 0D        9174            db 0x0D
00CE 0A        9175            db 0x0A
00CF 00        9176            db 0x00
00D0           9177   __str_8:
00D0 663A2530  9178            db 'f:%04ld, d1:%d, d2:%d, bound_dectect: %d, distance: %d'
     346C642C
     2064313A
     25642C20
     64323A25
     642C2062
     6F756E64
     5F646563
     74656374
     3A202564
     2C206469
     7374616E
     63653A20
     2564
0106 0D        9179            db 0x0D
0107 0A        9180            db 0x0A
0108 00        9181            db 0x00
0109           9182   __str_9:
0109 63757272  9183            db 'current angle: %03d'
     656E7420
     616E676C
     653A2025
     303364
011C 0D        9184            db 0x0D
011D 0A        9185            db 0x0A
011E 00        9186            db 0x00
011F           9187   __str_10:
011F 25303164  9188            db '%01d,20,%ld,%05d,%03d,%03d,%03d'
     2C32302C
     256C642C
     25303564
     2C253033
     642C2530
     33642C25
     303364
013E 0A        9189            db 0x0A
013F 00        9190            db 0x00
0140           9191   __str_11:
0140 41542B56  9192            db 'AT+VER'
     4552
0146 0D        9193            db 0x0D
0147 0A        9194            db 0x0A
0148 00        9195            db 0x00
0149           9196   __str_12:
0149 41542B42  9197            db 'AT+BAUD'
     415544
0150 0D        9198            db 0x0D
0151 0A        9199            db 0x0A
0152 00        9200            db 0x00
0153           9201   __str_13:
0153 41542B52  9202            db 'AT+RFID'
     464944
015A 0D        9203            db 0x0D
015B 0A        9204            db 0x0A
015C 00        9205            db 0x00
015D           9206   __str_14:
015D 41542B44  9207            db 'AT+DVID'
     564944
0164 0D        9208            db 0x0D
0165 0A        9209            db 0x0A
0166 00        9210            db 0x00
0167           9211   __str_15:
0167 41542B52  9212            db 'AT+RFC002'
     46433030
     32
0170 0D        9213            db 0x0D
0171 0A        9214            db 0x0A
0172 00        9215            db 0x00
0173           9216   __str_16:
0173 41542B50  9217            db 'AT+POWE'
     4F5745
017A 0D        9218            db 0x0D
017B 0A        9219            db 0x0A
017C 00        9220            db 0x00
017D           9221   __str_17:
017D 41542B43  9222            db 'AT+CLSS'
     4C5353
0184 0D        9223            db 0x0D
0185 0A        9224            db 0x0A
0186 00        9225            db 0x00
0187           9226   __str_18:
0187 41542B44  9227            db 'AT+DVIDEF11'
     56494445
     463131
0192 0D        9228            db 0x0D
0193 0A        9229            db 0x0A
0194 00        9230            db 0x00
0195           9231   __str_19:
0195 4A6F7973  9232            db 'Joystick Received: Vx = %d, Vy = %d, Order = %c, Auto = %d'
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25642C20
     5679203D
     2025642C
     204F7264
     6572203D
     2025632C
     20417574
     6F203D20
     2564
01CF 0D        9233            db 0x0D
01D0 0A        9234            db 0x0A
01D1 00        9235            db 0x00
01D2           9236   __str_20:
01D2 2A2A2A20  9237            db '*** BAD MESSAGE ***: %s'
     42414420
     4D455353
     41474520
     2A2A2A3A
     202573
01E9 0D        9238            db 0x0D
01EA 0A        9239            db 0x0A
01EB 00        9240            db 0x00
01EC           9241   __str_21:
01EC 302C3030  9242            db '0,00,%04ld,%05d,%03d,%03d,%03d'
     2C253034
     6C642C25
     3035642C
     25303364
     2C253033
     642C2530
     3364
020A 0A        9243            db 0x0A
020B 00        9244            db 0x00
020C           9245   
0096           9246            CSEG
0096           9247   
0096           9248   end
