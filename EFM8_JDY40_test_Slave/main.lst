0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Mar 26 14:39:59 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _check_bound_PARM_2
0000             28            public _InitPinADC_PARM_2
0000             29            public _main
0000             30            public _Auto_mode_slave
0000             31            public _Init_all
0000             32            public _check_bound
0000             33            public _servo_pick
0000             34            public _Timer5_ISR
0000             35            public _ADC_at_Pin
0000             36            public _InitPinADC
0000             37            public _InitADC
0000             38            public _Set_Pin_Input
0000             39            public _Set_Pin_Output
0000             40            public _ReceptionOff
0000             41            public _SendATCommand
0000             42            public _waitms_or_RI1
0000             43            public _RXU1
0000             44            public _getstr1
0000             45            public _getchar1_with_timeout
0000             46            public _getchar1
0000             47            public _sendstr1
0000             48            public _putchar1
0000             49            public _UART1_Init
0000             50            public _waitms
0000             51            public _Timer3us
0000             52            public __c51_external_startup
0000             53            public _buff
0000             54            public _getstr1_PARM_2
0000             55            public _d2
0000             56            public _d1
0000             57            public _fre_mea_count
0000             58            public _freq100
0000             59            public _vy
0000             60            public _vx
0000             61            public _vy_thres
0000             62            public _vx_thres
0000             63            public _servo_arm
0000             64            public _servo_base
0000             65            public _R_motor_dir
0000             66            public _L_motor_dir
0000             67            public _pwm_right
0000             68            public _pwm_left
0000             69            public _servo_counter
0000             70            public _pwm_counter
0000             71   ;--------------------------------------------------------
0000             72   ; Special Function Registers
0000             73   ;--------------------------------------------------------
0000             74   _ACC            DATA 0xe0
0000             75   _ADC0ASAH       DATA 0xb6
0000             76   _ADC0ASAL       DATA 0xb5
0000             77   _ADC0ASCF       DATA 0xa1
0000             78   _ADC0ASCT       DATA 0xc7
0000             79   _ADC0CF0        DATA 0xbc
0000             80   _ADC0CF1        DATA 0xb9
0000             81   _ADC0CF2        DATA 0xdf
0000             82   _ADC0CN0        DATA 0xe8
0000             83   _ADC0CN1        DATA 0xb2
0000             84   _ADC0CN2        DATA 0xb3
0000             85   _ADC0GTH        DATA 0xc4
0000             86   _ADC0GTL        DATA 0xc3
0000             87   _ADC0H          DATA 0xbe
0000             88   _ADC0L          DATA 0xbd
0000             89   _ADC0LTH        DATA 0xc6
0000             90   _ADC0LTL        DATA 0xc5
0000             91   _ADC0MX         DATA 0xbb
0000             92   _B              DATA 0xf0
0000             93   _CKCON0         DATA 0x8e
0000             94   _CKCON1         DATA 0xa6
0000             95   _CLEN0          DATA 0xc6
0000             96   _CLIE0          DATA 0xc7
0000             97   _CLIF0          DATA 0xe8
0000             98   _CLKSEL         DATA 0xa9
0000             99   _CLOUT0         DATA 0xd1
0000            100   _CLU0CF         DATA 0xb1
0000            101   _CLU0FN         DATA 0xaf
0000            102   _CLU0MX         DATA 0x84
0000            103   _CLU1CF         DATA 0xb3
0000            104   _CLU1FN         DATA 0xb2
0000            105   _CLU1MX         DATA 0x85
0000            106   _CLU2CF         DATA 0xb6
0000            107   _CLU2FN         DATA 0xb5
0000            108   _CLU2MX         DATA 0x91
0000            109   _CLU3CF         DATA 0xbf
0000            110   _CLU3FN         DATA 0xbe
0000            111   _CLU3MX         DATA 0xae
0000            112   _CMP0CN0        DATA 0x9b
0000            113   _CMP0CN1        DATA 0x99
0000            114   _CMP0MD         DATA 0x9d
0000            115   _CMP0MX         DATA 0x9f
0000            116   _CMP1CN0        DATA 0xbf
0000            117   _CMP1CN1        DATA 0xac
0000            118   _CMP1MD         DATA 0xab
0000            119   _CMP1MX         DATA 0xaa
0000            120   _CRC0CN0        DATA 0xce
0000            121   _CRC0CN1        DATA 0x86
0000            122   _CRC0CNT        DATA 0xd3
0000            123   _CRC0DAT        DATA 0xcb
0000            124   _CRC0FLIP       DATA 0xcf
0000            125   _CRC0IN         DATA 0xca
0000            126   _CRC0ST         DATA 0xd2
0000            127   _DAC0CF0        DATA 0x91
0000            128   _DAC0CF1        DATA 0x92
0000            129   _DAC0H          DATA 0x85
0000            130   _DAC0L          DATA 0x84
0000            131   _DAC1CF0        DATA 0x93
0000            132   _DAC1CF1        DATA 0x94
0000            133   _DAC1H          DATA 0x8a
0000            134   _DAC1L          DATA 0x89
0000            135   _DAC2CF0        DATA 0x95
0000            136   _DAC2CF1        DATA 0x96
0000            137   _DAC2H          DATA 0x8c
0000            138   _DAC2L          DATA 0x8b
0000            139   _DAC3CF0        DATA 0x9a
0000            140   _DAC3CF1        DATA 0x9c
0000            141   _DAC3H          DATA 0x8e
0000            142   _DAC3L          DATA 0x8d
0000            143   _DACGCF0        DATA 0x88
0000            144   _DACGCF1        DATA 0x98
0000            145   _DACGCF2        DATA 0xa2
0000            146   _DERIVID        DATA 0xad
0000            147   _DEVICEID       DATA 0xb5
0000            148   _DPH            DATA 0x83
0000            149   _DPL            DATA 0x82
0000            150   _EIE1           DATA 0xe6
0000            151   _EIE2           DATA 0xf3
0000            152   _EIP1           DATA 0xbb
0000            153   _EIP1H          DATA 0xee
0000            154   _EIP2           DATA 0xed
0000            155   _EIP2H          DATA 0xf6
0000            156   _EMI0CN         DATA 0xe7
0000            157   _FLKEY          DATA 0xb7
0000            158   _HFO0CAL        DATA 0xc7
0000            159   _HFO1CAL        DATA 0xd6
0000            160   _HFOCN          DATA 0xef
0000            161   _I2C0ADM        DATA 0xff
0000            162   _I2C0CN0        DATA 0xba
0000            163   _I2C0DIN        DATA 0xbc
0000            164   _I2C0DOUT       DATA 0xbb
0000            165   _I2C0FCN0       DATA 0xad
0000            166   _I2C0FCN1       DATA 0xab
0000            167   _I2C0FCT        DATA 0xf5
0000            168   _I2C0SLAD       DATA 0xbd
0000            169   _I2C0STAT       DATA 0xb9
0000            170   _IE             DATA 0xa8
0000            171   _IP             DATA 0xb8
0000            172   _IPH            DATA 0xf2
0000            173   _IT01CF         DATA 0xe4
0000            174   _LFO0CN         DATA 0xb1
0000            175   _P0             DATA 0x80
0000            176   _P0MASK         DATA 0xfe
0000            177   _P0MAT          DATA 0xfd
0000            178   _P0MDIN         DATA 0xf1
0000            179   _P0MDOUT        DATA 0xa4
0000            180   _P0SKIP         DATA 0xd4
0000            181   _P1             DATA 0x90
0000            182   _P1MASK         DATA 0xee
0000            183   _P1MAT          DATA 0xed
0000            184   _P1MDIN         DATA 0xf2
0000            185   _P1MDOUT        DATA 0xa5
0000            186   _P1SKIP         DATA 0xd5
0000            187   _P2             DATA 0xa0
0000            188   _P2MASK         DATA 0xfc
0000            189   _P2MAT          DATA 0xfb
0000            190   _P2MDIN         DATA 0xf3
0000            191   _P2MDOUT        DATA 0xa6
0000            192   _P2SKIP         DATA 0xcc
0000            193   _P3             DATA 0xb0
0000            194   _P3MDIN         DATA 0xf4
0000            195   _P3MDOUT        DATA 0x9c
0000            196   _PCA0CENT       DATA 0x9e
0000            197   _PCA0CLR        DATA 0x9c
0000            198   _PCA0CN0        DATA 0xd8
0000            199   _PCA0CPH0       DATA 0xfc
0000            200   _PCA0CPH1       DATA 0xea
0000            201   _PCA0CPH2       DATA 0xec
0000            202   _PCA0CPH3       DATA 0xf5
0000            203   _PCA0CPH4       DATA 0x85
0000            204   _PCA0CPH5       DATA 0xde
0000            205   _PCA0CPL0       DATA 0xfb
0000            206   _PCA0CPL1       DATA 0xe9
0000            207   _PCA0CPL2       DATA 0xeb
0000            208   _PCA0CPL3       DATA 0xf4
0000            209   _PCA0CPL4       DATA 0x84
0000            210   _PCA0CPL5       DATA 0xdd
0000            211   _PCA0CPM0       DATA 0xda
0000            212   _PCA0CPM1       DATA 0xdb
0000            213   _PCA0CPM2       DATA 0xdc
0000            214   _PCA0CPM3       DATA 0xae
0000            215   _PCA0CPM4       DATA 0xaf
0000            216   _PCA0CPM5       DATA 0xcc
0000            217   _PCA0H          DATA 0xfa
0000            218   _PCA0L          DATA 0xf9
0000            219   _PCA0MD         DATA 0xd9
0000            220   _PCA0POL        DATA 0x96
0000            221   _PCA0PWM        DATA 0xf7
0000            222   _PCON0          DATA 0x87
0000            223   _PCON1          DATA 0xcd
0000            224   _PFE0CN         DATA 0xc1
0000            225   _PRTDRV         DATA 0xf6
0000            226   _PSCTL          DATA 0x8f
0000            227   _PSTAT0         DATA 0xaa
0000            228   _PSW            DATA 0xd0
0000            229   _REF0CN         DATA 0xd1
0000            230   _REG0CN         DATA 0xc9
0000            231   _REVID          DATA 0xb6
0000            232   _RSTSRC         DATA 0xef
0000            233   _SBCON1         DATA 0x94
0000            234   _SBRLH1         DATA 0x96
0000            235   _SBRLL1         DATA 0x95
0000            236   _SBUF           DATA 0x99
0000            237   _SBUF0          DATA 0x99
0000            238   _SBUF1          DATA 0x92
0000            239   _SCON           DATA 0x98
0000            240   _SCON0          DATA 0x98
0000            241   _SCON1          DATA 0xc8
0000            242   _SFRPAGE        DATA 0xa7
0000            243   _SFRPGCN        DATA 0xbc
0000            244   _SFRSTACK       DATA 0xd7
0000            245   _SMB0ADM        DATA 0xd6
0000            246   _SMB0ADR        DATA 0xd7
0000            247   _SMB0CF         DATA 0xc1
0000            248   _SMB0CN0        DATA 0xc0
0000            249   _SMB0DAT        DATA 0xc2
0000            250   _SMB0FCN0       DATA 0xc3
0000            251   _SMB0FCN1       DATA 0xc4
0000            252   _SMB0FCT        DATA 0xef
0000            253   _SMB0RXLN       DATA 0xc5
0000            254   _SMB0TC         DATA 0xac
0000            255   _SMOD1          DATA 0x93
0000            256   _SP             DATA 0x81
0000            257   _SPI0CFG        DATA 0xa1
0000            258   _SPI0CKR        DATA 0xa2
0000            259   _SPI0CN0        DATA 0xf8
0000            260   _SPI0DAT        DATA 0xa3
0000            261   _SPI0FCN0       DATA 0x9a
0000            262   _SPI0FCN1       DATA 0x9b
0000            263   _SPI0FCT        DATA 0xf7
0000            264   _SPI0PCF        DATA 0xdf
0000            265   _TCON           DATA 0x88
0000            266   _TH0            DATA 0x8c
0000            267   _TH1            DATA 0x8d
0000            268   _TL0            DATA 0x8a
0000            269   _TL1            DATA 0x8b
0000            270   _TMOD           DATA 0x89
0000            271   _TMR2CN0        DATA 0xc8
0000            272   _TMR2CN1        DATA 0xfd
0000            273   _TMR2H          DATA 0xcf
0000            274   _TMR2L          DATA 0xce
0000            275   _TMR2RLH        DATA 0xcb
0000            276   _TMR2RLL        DATA 0xca
0000            277   _TMR3CN0        DATA 0x91
0000            278   _TMR3CN1        DATA 0xfe
0000            279   _TMR3H          DATA 0x95
0000            280   _TMR3L          DATA 0x94
0000            281   _TMR3RLH        DATA 0x93
0000            282   _TMR3RLL        DATA 0x92
0000            283   _TMR4CN0        DATA 0x98
0000            284   _TMR4CN1        DATA 0xff
0000            285   _TMR4H          DATA 0xa5
0000            286   _TMR4L          DATA 0xa4
0000            287   _TMR4RLH        DATA 0xa3
0000            288   _TMR4RLL        DATA 0xa2
0000            289   _TMR5CN0        DATA 0xc0
0000            290   _TMR5CN1        DATA 0xf1
0000            291   _TMR5H          DATA 0xd5
0000            292   _TMR5L          DATA 0xd4
0000            293   _TMR5RLH        DATA 0xd3
0000            294   _TMR5RLL        DATA 0xd2
0000            295   _UART0PCF       DATA 0xd9
0000            296   _UART1FCN0      DATA 0x9d
0000            297   _UART1FCN1      DATA 0xd8
0000            298   _UART1FCT       DATA 0xfa
0000            299   _UART1LIN       DATA 0x9e
0000            300   _UART1PCF       DATA 0xda
0000            301   _VDM0CN         DATA 0xff
0000            302   _WDTCN          DATA 0x97
0000            303   _XBR0           DATA 0xe1
0000            304   _XBR1           DATA 0xe2
0000            305   _XBR2           DATA 0xe3
0000            306   _XOSC0CN        DATA 0x86
0000            307   _DPTR           DATA 0x8382
0000            308   _TMR2RL         DATA 0xcbca
0000            309   _TMR3RL         DATA 0x9392
0000            310   _TMR4RL         DATA 0xa3a2
0000            311   _TMR5RL         DATA 0xd3d2
0000            312   _TMR0           DATA 0x8c8a
0000            313   _TMR1           DATA 0x8d8b
0000            314   _TMR2           DATA 0xcfce
0000            315   _TMR3           DATA 0x9594
0000            316   _TMR4           DATA 0xa5a4
0000            317   _TMR5           DATA 0xd5d4
0000            318   _SBRL1          DATA 0x9695
0000            319   _PCA0           DATA 0xfaf9
0000            320   _PCA0CP0        DATA 0xfcfb
0000            321   _PCA0CP1        DATA 0xeae9
0000            322   _PCA0CP2        DATA 0xeceb
0000            323   _PCA0CP3        DATA 0xf5f4
0000            324   _PCA0CP4        DATA 0x8584
0000            325   _PCA0CP5        DATA 0xdedd
0000            326   _ADC0ASA        DATA 0xb6b5
0000            327   _ADC0GT         DATA 0xc4c3
0000            328   _ADC0           DATA 0xbebd
0000            329   _ADC0LT         DATA 0xc6c5
0000            330   _DAC0           DATA 0x8584
0000            331   _DAC1           DATA 0x8a89
0000            332   _DAC2           DATA 0x8c8b
0000            333   _DAC3           DATA 0x8e8d
0000            334   ;--------------------------------------------------------
0000            335   ; special function bits
0000            336   ;--------------------------------------------------------
0000            337   _ACC_0          BIT 0xe0
0000            338   _ACC_1          BIT 0xe1
0000            339   _ACC_2          BIT 0xe2
0000            340   _ACC_3          BIT 0xe3
0000            341   _ACC_4          BIT 0xe4
0000            342   _ACC_5          BIT 0xe5
0000            343   _ACC_6          BIT 0xe6
0000            344   _ACC_7          BIT 0xe7
0000            345   _TEMPE          BIT 0xe8
0000            346   _ADGN0          BIT 0xe9
0000            347   _ADGN1          BIT 0xea
0000            348   _ADWINT         BIT 0xeb
0000            349   _ADBUSY         BIT 0xec
0000            350   _ADINT          BIT 0xed
0000            351   _IPOEN          BIT 0xee
0000            352   _ADEN           BIT 0xef
0000            353   _B_0            BIT 0xf0
0000            354   _B_1            BIT 0xf1
0000            355   _B_2            BIT 0xf2
0000            356   _B_3            BIT 0xf3
0000            357   _B_4            BIT 0xf4
0000            358   _B_5            BIT 0xf5
0000            359   _B_6            BIT 0xf6
0000            360   _B_7            BIT 0xf7
0000            361   _C0FIF          BIT 0xe8
0000            362   _C0RIF          BIT 0xe9
0000            363   _C1FIF          BIT 0xea
0000            364   _C1RIF          BIT 0xeb
0000            365   _C2FIF          BIT 0xec
0000            366   _C2RIF          BIT 0xed
0000            367   _C3FIF          BIT 0xee
0000            368   _C3RIF          BIT 0xef
0000            369   _D1SRC0         BIT 0x88
0000            370   _D1SRC1         BIT 0x89
0000            371   _D1AMEN         BIT 0x8a
0000            372   _D01REFSL       BIT 0x8b
0000            373   _D3SRC0         BIT 0x8c
0000            374   _D3SRC1         BIT 0x8d
0000            375   _D3AMEN         BIT 0x8e
0000            376   _D23REFSL       BIT 0x8f
0000            377   _D0UDIS         BIT 0x98
0000            378   _D1UDIS         BIT 0x99
0000            379   _D2UDIS         BIT 0x9a
0000            380   _D3UDIS         BIT 0x9b
0000            381   _EX0            BIT 0xa8
0000            382   _ET0            BIT 0xa9
0000            383   _EX1            BIT 0xaa
0000            384   _ET1            BIT 0xab
0000            385   _ES0            BIT 0xac
0000            386   _ET2            BIT 0xad
0000            387   _ESPI0          BIT 0xae
0000            388   _EA             BIT 0xaf
0000            389   _PX0            BIT 0xb8
0000            390   _PT0            BIT 0xb9
0000            391   _PX1            BIT 0xba
0000            392   _PT1            BIT 0xbb
0000            393   _PS0            BIT 0xbc
0000            394   _PT2            BIT 0xbd
0000            395   _PSPI0          BIT 0xbe
0000            396   _P0_0           BIT 0x80
0000            397   _P0_1           BIT 0x81
0000            398   _P0_2           BIT 0x82
0000            399   _P0_3           BIT 0x83
0000            400   _P0_4           BIT 0x84
0000            401   _P0_5           BIT 0x85
0000            402   _P0_6           BIT 0x86
0000            403   _P0_7           BIT 0x87
0000            404   _P1_0           BIT 0x90
0000            405   _P1_1           BIT 0x91
0000            406   _P1_2           BIT 0x92
0000            407   _P1_3           BIT 0x93
0000            408   _P1_4           BIT 0x94
0000            409   _P1_5           BIT 0x95
0000            410   _P1_6           BIT 0x96
0000            411   _P1_7           BIT 0x97
0000            412   _P2_0           BIT 0xa0
0000            413   _P2_1           BIT 0xa1
0000            414   _P2_2           BIT 0xa2
0000            415   _P2_3           BIT 0xa3
0000            416   _P2_4           BIT 0xa4
0000            417   _P2_5           BIT 0xa5
0000            418   _P2_6           BIT 0xa6
0000            419   _P3_0           BIT 0xb0
0000            420   _P3_1           BIT 0xb1
0000            421   _P3_2           BIT 0xb2
0000            422   _P3_3           BIT 0xb3
0000            423   _P3_4           BIT 0xb4
0000            424   _P3_7           BIT 0xb7
0000            425   _CCF0           BIT 0xd8
0000            426   _CCF1           BIT 0xd9
0000            427   _CCF2           BIT 0xda
0000            428   _CCF3           BIT 0xdb
0000            429   _CCF4           BIT 0xdc
0000            430   _CCF5           BIT 0xdd
0000            431   _CR             BIT 0xde
0000            432   _CF             BIT 0xdf
0000            433   _PARITY         BIT 0xd0
0000            434   _F1             BIT 0xd1
0000            435   _OV             BIT 0xd2
0000            436   _RS0            BIT 0xd3
0000            437   _RS1            BIT 0xd4
0000            438   _F0             BIT 0xd5
0000            439   _AC             BIT 0xd6
0000            440   _CY             BIT 0xd7
0000            441   _RI             BIT 0x98
0000            442   _TI             BIT 0x99
0000            443   _RB8            BIT 0x9a
0000            444   _TB8            BIT 0x9b
0000            445   _REN            BIT 0x9c
0000            446   _CE             BIT 0x9d
0000            447   _SMODE          BIT 0x9e
0000            448   _RI1            BIT 0xc8
0000            449   _TI1            BIT 0xc9
0000            450   _RBX1           BIT 0xca
0000            451   _TBX1           BIT 0xcb
0000            452   _REN1           BIT 0xcc
0000            453   _PERR1          BIT 0xcd
0000            454   _OVR1           BIT 0xce
0000            455   _SI             BIT 0xc0
0000            456   _ACK            BIT 0xc1
0000            457   _ARBLOST        BIT 0xc2
0000            458   _ACKRQ          BIT 0xc3
0000            459   _STO            BIT 0xc4
0000            460   _STA            BIT 0xc5
0000            461   _TXMODE         BIT 0xc6
0000            462   _MASTER         BIT 0xc7
0000            463   _SPIEN          BIT 0xf8
0000            464   _TXNF           BIT 0xf9
0000            465   _NSSMD0         BIT 0xfa
0000            466   _NSSMD1         BIT 0xfb
0000            467   _RXOVRN         BIT 0xfc
0000            468   _MODF           BIT 0xfd
0000            469   _WCOL           BIT 0xfe
0000            470   _SPIF           BIT 0xff
0000            471   _IT0            BIT 0x88
0000            472   _IE0            BIT 0x89
0000            473   _IT1            BIT 0x8a
0000            474   _IE1            BIT 0x8b
0000            475   _TR0            BIT 0x8c
0000            476   _TF0            BIT 0x8d
0000            477   _TR1            BIT 0x8e
0000            478   _TF1            BIT 0x8f
0000            479   _T2XCLK0        BIT 0xc8
0000            480   _T2XCLK1        BIT 0xc9
0000            481   _TR2            BIT 0xca
0000            482   _T2SPLIT        BIT 0xcb
0000            483   _TF2CEN         BIT 0xcc
0000            484   _TF2LEN         BIT 0xcd
0000            485   _TF2L           BIT 0xce
0000            486   _TF2H           BIT 0xcf
0000            487   _T4XCLK0        BIT 0x98
0000            488   _T4XCLK1        BIT 0x99
0000            489   _TR4            BIT 0x9a
0000            490   _T4SPLIT        BIT 0x9b
0000            491   _TF4CEN         BIT 0x9c
0000            492   _TF4LEN         BIT 0x9d
0000            493   _TF4L           BIT 0x9e
0000            494   _TF4H           BIT 0x9f
0000            495   _T5XCLK0        BIT 0xc0
0000            496   _T5XCLK1        BIT 0xc1
0000            497   _TR5            BIT 0xc2
0000            498   _T5SPLIT        BIT 0xc3
0000            499   _TF5CEN         BIT 0xc4
0000            500   _TF5LEN         BIT 0xc5
0000            501   _TF5L           BIT 0xc6
0000            502   _TF5H           BIT 0xc7
0000            503   _RIE            BIT 0xd8
0000            504   _RXTO0          BIT 0xd9
0000            505   _RXTO1          BIT 0xda
0000            506   _RFRQ           BIT 0xdb
0000            507   _TIE            BIT 0xdc
0000            508   _TXHOLD         BIT 0xdd
0000            509   _TXNF1          BIT 0xde
0000            510   _TFRQ           BIT 0xdf
0000            511   ;--------------------------------------------------------
0000            512   ; overlayable register banks
0000            513   ;--------------------------------------------------------
0000            514            rbank0 segment data overlay
0000            515   ;--------------------------------------------------------
0000            516   ; overlayable bit register bank
0000            517   ;--------------------------------------------------------
0000            518            rseg BIT_BANK
0000            519   bits:
0000            520            ds 1
0001            521            b0 equ  bits.0 
0001            522            b1 equ  bits.1 
0001            523            b2 equ  bits.2 
0001            524            b3 equ  bits.3 
0001            525            b4 equ  bits.4 
0001            526            b5 equ  bits.5 
0001            527            b6 equ  bits.6 
0001            528            b7 equ  bits.7 
0001            529   ;--------------------------------------------------------
0001            530   ; internal ram data
0001            531   ;--------------------------------------------------------
0000            532            rseg R_DSEG
0000            533   _pwm_counter:
0000            534            ds 2
0002            535   _servo_counter:
0002            536            ds 2
0004            537   _pwm_left:
0004            538            ds 1
0005            539   _pwm_right:
0005            540            ds 1
0006            541   _L_motor_dir:
0006            542            ds 1
0007            543   _R_motor_dir:
0007            544            ds 1
0008            545   _servo_base:
0008            546            ds 1
0009            547   _servo_arm:
0009            548            ds 1
000A            549   _vx_thres:
000A            550            ds 2
000C            551   _vy_thres:
000C            552            ds 2
000E            553   _vx:
000E            554            ds 2
0010            555   _vy:
0010            556            ds 2
0012            557   _freq100:
0012            558            ds 4
0016            559   _fre_mea_count:
0016            560            ds 2
0018            561   _d1:
0018            562            ds 2
001A            563   _d2:
001A            564            ds 2
001C            565   _getstr1_PARM_2:
001C            566            ds 1
001D            567   _main_vx_error_1_142:
001D            568            ds 2
001F            569   _main_vy_error_1_142:
001F            570            ds 2
0021            571   _main_vx_err_1_142:
0021            572            ds 2
0023            573   _main_vy_err_1_142:
0023            574            ds 2
0025            575   _main_vx_1_142:
0025            576            ds 2
0027            577   _main_vy_1_142:
0027            578            ds 2
0029            579   _main_pick_1_142:
0029            580            ds 2
002B            581   _main_auto_mode_1_142:
002B            582            ds 2
002D            583   ;--------------------------------------------------------
002D            584   ; overlayable items in internal ram 
002D            585   ;--------------------------------------------------------
0000            586            rseg    R_OSEG
0000            587            rseg    R_OSEG
0000            588            rseg    R_OSEG
0000            589            rseg    R_OSEG
0000            590            rseg    R_OSEG
0000            591            rseg    R_OSEG
0000            592   _InitPinADC_PARM_2:
0000            593            ds 1
0001            594            rseg    R_OSEG
0001            595            rseg    R_OSEG
0001            596   _check_bound_PARM_2:
0001            597            ds 2
0003            598   ;--------------------------------------------------------
0003            599   ; indirectly addressable internal ram data
0003            600   ;--------------------------------------------------------
0000            601            rseg R_ISEG
0000            602   _buff:
0000            603            ds 20
0014            604   ;--------------------------------------------------------
0014            605   ; absolute internal ram data
0014            606   ;--------------------------------------------------------
0000            607            DSEG
0000            608   ;--------------------------------------------------------
0000            609   ; bit data
0000            610   ;--------------------------------------------------------
0000            611            rseg R_BSEG
0000            612   ;--------------------------------------------------------
0000            613   ; paged external ram data
0000            614   ;--------------------------------------------------------
0000            615            rseg R_PSEG
0000            616   ;--------------------------------------------------------
0000            617   ; external ram data
0000            618   ;--------------------------------------------------------
0000            619            rseg R_XSEG
0000            620   ;--------------------------------------------------------
0000            621   ; absolute external ram data
0000            622   ;--------------------------------------------------------
0000            623            XSEG
0000            624   ;--------------------------------------------------------
0000            625   ; external initialized ram data
0000            626   ;--------------------------------------------------------
0000            627            rseg R_IXSEG
0000            628            rseg R_HOME
0000            629            rseg R_GSINIT
0000            630            rseg R_CSEG
0000            631   ;--------------------------------------------------------
0000            632   ; Reset entry point and interrupt vectors
0000            633   ;--------------------------------------------------------
0000            634            CSEG at 0x0000
0000 020000     635            ljmp    _crt0
0093            636            CSEG at 0x0093
0093 020000     637            ljmp    _Timer5_ISR
0096            638   ;--------------------------------------------------------
0096            639   ; global & static initialisations
0096            640   ;--------------------------------------------------------
0000            641            rseg R_HOME
0000            642            rseg R_GSINIT
0000            643            rseg R_GSINIT
0000            644   ;--------------------------------------------------------
0000            645   ; data variables initialization
0000            646   ;--------------------------------------------------------
0000            647            rseg R_DINIT
0000            648   ;        main.c:51: unsigned int pwm_counter = 0; 
0000 E4         649            clr     a
0001 F598       650            mov     _pwm_counter,a
0003 F599       651            mov     (_pwm_counter + 1),a
0005            652   ;        main.c:52: unsigned int servo_counter = 0; 
0005 E4         653            clr     a
0006 F558       654            mov     _servo_counter,a
0008 F559       655            mov     (_servo_counter + 1),a
000A            656   ;        main.c:53: unsigned char pwm_left = 0, pwm_right = 0; 
000A 751800     657            mov     _pwm_left,#0x00
000D            658   ;        main.c:53: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
000D 75D800     659            mov     _pwm_right,#0x00
0010            660   ;        main.c:54: unsigned char servo_base = 1, servo_arm = 1; 
0010 759801     661            mov     _L_motor_dir,#0x01
0013            662   ;        main.c:54: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
0013 755801     663            mov     _R_motor_dir,#0x01
0016            664   ;        main.c:55: unsigned char servo_base = 1, servo_arm = 1; 
0016 751801     665            mov     _servo_base,#0x01
0019            666   ;        main.c:55: int vx_thres = 161, vy_thres = 166; 
0019 75D801     667            mov     _servo_arm,#0x01
001C            668   ;        main.c:56: int vx = 0, vy = 0; 
001C 7598A1     669            mov     _vx_thres,#0xA1
001F E4         670            clr     a
0020 F599       671            mov     (_vx_thres + 1),a
0022            672   ;        main.c:56: int vx_thres = 161, vy_thres = 166; 
0022 7558A6     673            mov     _vy_thres,#0xA6
0025 E4         674            clr     a
0026 F559       675            mov     (_vy_thres + 1),a
0028            676   ;        main.c:57: int vx = 0, vy = 0; 
0028 E4         677            clr     a
0029 F518       678            mov     _vx,a
002B F519       679            mov     (_vx + 1),a
002D            680   ;        main.c:57: long freq100;
002D E4         681            clr     a
002E F5D8       682            mov     _vy,a
0030 F5D9       683            mov     (_vy + 1),a
0032            684   ;        main.c:59: unsigned int fre_mea_count = 0;
0032 E4         685            clr     a
0033 F558       686            mov     _fre_mea_count,a
0035 F559       687            mov     (_fre_mea_count + 1),a
0037            688            ; The linker places a 'ret' at the end of segment R_DINIT.
0037            689   ;--------------------------------------------------------
0037            690   ; code
0037            691   ;--------------------------------------------------------
0000            692            rseg R_CSEG
0000            693   ;------------------------------------------------------------
0000            694   ;Allocation info for local variables in function '_c51_external_startup'
0000            695   ;------------------------------------------------------------
0000            696   ;------------------------------------------------------------
0000            697   ;        main.c:63: char _c51_external_startup (void)
0000            698   ;        -----------------------------------------
0000            699   ;         function _c51_external_startup
0000            700   ;        -----------------------------------------
0000            701   __c51_external_startup:
0000            702            using   0
0000            703   ;        main.c:66: SFRPAGE = 0x00;
0000 75A700     704            mov     _SFRPAGE,#0x00
0003            705   ;        main.c:67: WDTCN = 0xDE; //First key
0003 7597DE     706            mov     _WDTCN,#0xDE
0006            707   ;        main.c:68: WDTCN = 0xAD; //Second key
0006 7597AD     708            mov     _WDTCN,#0xAD
0009            709   ;        main.c:70: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     710            mov     _VDM0CN,#0x80
000C            711   ;        main.c:71: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     712            mov     _RSTSRC,#0x06
000F            713   ;        main.c:78: SFRPAGE = 0x10;
000F 75A710     714            mov     _SFRPAGE,#0x10
0012            715   ;        main.c:79: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     716            mov     _PFE0CN,#0x20
0015            717   ;        main.c:80: SFRPAGE = 0x00;
0015 75A700     718            mov     _SFRPAGE,#0x00
0018            719   ;        main.c:101: CLKSEL = 0x00;
0018 75A900     720            mov     _CLKSEL,#0x00
001B            721   ;        main.c:102: CLKSEL = 0x00;
001B 75A900     722            mov     _CLKSEL,#0x00
001E            723   ;        main.c:103: while ((CLKSEL & 0x80) == 0);
001E            724   L002001?:
001E E5A9       725            mov     a,_CLKSEL
0020 30E738     726            jnb     acc.7,L002001?
0023            727   ;        main.c:104: CLKSEL = 0x03;
0023 75A903     728            mov     _CLKSEL,#0x03
0026            729   ;        main.c:105: CLKSEL = 0x03;
0026 75A903     730            mov     _CLKSEL,#0x03
0029            731   ;        main.c:106: while ((CLKSEL & 0x80) == 0);
0029            732   L002004?:
0029 E5A9       733            mov     a,_CLKSEL
002B 30E7B8     734            jnb     acc.7,L002004?
002E            735   ;        main.c:111: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     736            orl     _P0MDOUT,#0x11
0031            737   ;        main.c:112: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     738            orl     _P2MDOUT,#0x01
0034            739   ;        main.c:113: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     740            mov     _XBR0,#0x01
0037            741   ;        main.c:114: XBR1     = 0X00;
0037 75E200     742            mov     _XBR1,#0x00
003A            743   ;        main.c:115: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     744            mov     _XBR2,#0x41
003D            745   ;        main.c:121: SCON0 = 0x10;
003D 759810     746            mov     _SCON0,#0x10
0040            747   ;        main.c:122: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     748            mov     _TH1,#0xE6
0043            749   ;        main.c:123: TL1 = TH1;      // Init Timer1
0043 858D8B     750            mov     _TL1,_TH1
0046            751   ;        main.c:124: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     752            anl     _TMOD,#0x0F
0049            753   ;        main.c:125: TMOD |=  0x20;                       
0049 438920     754            orl     _TMOD,#0x20
004C            755   ;        main.c:126: TR1 = 1; // START Timer1
004C D28E       756            setb    _TR1
004E            757   ;        main.c:127: TI = 1;  // Indicate TX0 ready
004E D299       758            setb    _TI
0050            759   ;        main.c:129: P2_0=1; // 'set' pin to 1 is normal operation mode.
0050 D2A0       760            setb    _P2_0
0052            761   ;        main.c:132: SFRPAGE=0x10;
0052 75A710     762            mov     _SFRPAGE,#0x10
0055            763   ;        main.c:133: TMR5CN0=0x00;
0055 75C000     764            mov     _TMR5CN0,#0x00
0058            765   ;        main.c:134: TMR5=0xffff;   // Set to reload immediately
0058 75D4FF     766            mov     _TMR5,#0xFF
005B 75D5FF     767            mov     (_TMR5 >> 8),#0xFF
005E            768   ;        main.c:135: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
005E 43F308     769            orl     _EIE2,#0x08
0061            770   ;        main.c:136: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0061 D2C2       771            setb    _TR5
0063            772   ;        main.c:139: EA=1;  // Enable global interrupts
0063 D2AF       773            setb    _EA
0065            774   ;        main.c:140: SFRPAGE=0x00;
0065 75A700     775            mov     _SFRPAGE,#0x00
0068            776   ;        main.c:142: return 0;
0068 758200     777            mov     dpl,#0x00
006B 22         778            ret
006C            779   ;------------------------------------------------------------
006C            780   ;Allocation info for local variables in function 'Timer3us'
006C            781   ;------------------------------------------------------------
006C            782   ;us                        Allocated to registers r2 
006C            783   ;i                         Allocated to registers r3 
006C            784   ;------------------------------------------------------------
006C            785   ;        main.c:146: void Timer3us(unsigned char us)
006C            786   ;        -----------------------------------------
006C            787   ;         function Timer3us
006C            788   ;        -----------------------------------------
006C            789   _Timer3us:
006C AA82       790            mov     r2,dpl
006E            791   ;        main.c:151: CKCON0|=0b_0100_0000;
006E 438E40     792            orl     _CKCON0,#0x40
0071            793   ;        main.c:153: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0071 7592B8     794            mov     _TMR3RL,#0xB8
0074 7593FF     795            mov     (_TMR3RL >> 8),#0xFF
0077            796   ;        main.c:154: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0077 859294     797            mov     _TMR3,_TMR3RL
007A 859395     798            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007D            799   ;        main.c:156: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007D 759104     800            mov     _TMR3CN0,#0x04
0080            801   ;        main.c:157: for (i = 0; i < us; i++)       // Count <us> overflows
0080 7B00       802            mov     r3,#0x00
0082            803   L003004?:
0082 C3         804            clr     c
0083 EB         805            mov     a,r3
0084 9A         806            subb    a,r2
0085 5000       807            jnc     L003007?
0087            808   ;        main.c:159: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0087            809   L003001?:
0087 E591       810            mov     a,_TMR3CN0
0089 30E7B8     811            jnb     acc.7,L003001?
008C            812   ;        main.c:160: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008C 53917F     813            anl     _TMR3CN0,#0x7F
008F            814   ;        main.c:157: for (i = 0; i < us; i++)       // Count <us> overflows
008F 0B         815            inc     r3
0090 8000       816            sjmp    L003004?
0092            817   L003007?:
0092            818   ;        main.c:162: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0092 759100     819            mov     _TMR3CN0,#0x00
0095 22         820            ret
0096            821   ;------------------------------------------------------------
0096            822   ;Allocation info for local variables in function 'waitms'
0096            823   ;------------------------------------------------------------
0096            824   ;ms                        Allocated to registers r2 r3 
0096            825   ;j                         Allocated to registers r4 r5 
0096            826   ;k                         Allocated to registers r6 
0096            827   ;------------------------------------------------------------
0096            828   ;        main.c:165: void waitms (unsigned int ms)
0096            829   ;        -----------------------------------------
0096            830   ;         function waitms
0096            831   ;        -----------------------------------------
0096            832   _waitms:
0096 AA82       833            mov     r2,dpl
0098 AB83       834            mov     r3,dph
009A            835   ;        main.c:169: for(j=0; j<ms; j++)
009A 7C00       836            mov     r4,#0x00
009C 7D00       837            mov     r5,#0x00
009E            838   L004005?:
009E C3         839            clr     c
009F EC         840            mov     a,r4
00A0 9A         841            subb    a,r2
00A1 ED         842            mov     a,r5
00A2 9B         843            subb    a,r3
00A3 5000       844            jnc     L004009?
00A5            845   ;        main.c:170: for (k=0; k<4; k++) Timer3us(250);
00A5 7E00       846            mov     r6,#0x00
00A7            847   L004001?:
00A7 BE04F8     848            cjne    r6,#0x04,L004018?
00AA            849   L004018?:
00AA 5000       850            jnc     L004007?
00AC 7582FA     851            mov     dpl,#0xFA
00AF C002       852            push    ar2
00B1 C003       853            push    ar3
00B3 C004       854            push    ar4
00B5 C005       855            push    ar5
00B7 C006       856            push    ar6
00B9 120000     857            lcall   _Timer3us
00BC D006       858            pop     ar6
00BE D005       859            pop     ar5
00C0 D004       860            pop     ar4
00C2 D003       861            pop     ar3
00C4 D002       862            pop     ar2
00C6 0E         863            inc     r6
00C7 8000       864            sjmp    L004001?
00C9            865   L004007?:
00C9            866   ;        main.c:169: for(j=0; j<ms; j++)
00C9 0C         867            inc     r4
00CA BC0038     868            cjne    r4,#0x00,L004005?
00CD 0D         869            inc     r5
00CE 8000       870            sjmp    L004005?
00D0            871   L004009?:
00D0 22         872            ret
00D1            873   ;------------------------------------------------------------
00D1            874   ;Allocation info for local variables in function 'UART1_Init'
00D1            875   ;------------------------------------------------------------
00D1            876   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00D1            877   ;------------------------------------------------------------
00D1            878   ;        main.c:173: void UART1_Init (unsigned long baudrate)
00D1            879   ;        -----------------------------------------
00D1            880   ;         function UART1_Init
00D1            881   ;        -----------------------------------------
00D1            882   _UART1_Init:
00D1 AA82       883            mov     r2,dpl
00D3 AB83       884            mov     r3,dph
00D5 ACF0       885            mov     r4,b
00D7 FD         886            mov     r5,a
00D8            887   ;        main.c:175: SFRPAGE = 0x20;
00D8 75A720     888            mov     _SFRPAGE,#0x20
00DB            889   ;        main.c:176: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00DB 75930C     890            mov     _SMOD1,#0x0C
00DE            891   ;        main.c:177: SCON1 = 0x10;
00DE 75C810     892            mov     _SCON1,#0x10
00E1            893   ;        main.c:178: SBCON1 =0x00;   // disable baud rate generator
00E1 759400     894            mov     _SBCON1,#0x00
00E4            895   ;        main.c:179: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00E4 8A00       896            mov     __divulong_PARM_2,r2
00E6 8B01       897            mov     (__divulong_PARM_2 + 1),r3
00E8 8C02       898            mov     (__divulong_PARM_2 + 2),r4
00EA 8D03       899            mov     (__divulong_PARM_2 + 3),r5
00EC 90A200     900            mov     dptr,#0xA200
00EF 75F04A     901            mov     b,#0x4A
00F2 7404       902            mov     a,#0x04
00F4 120000     903            lcall   __divulong
00F7 AA82       904            mov     r2,dpl
00F9 AB83       905            mov     r3,dph
00FB ACF0       906            mov     r4,b
00FD FD         907            mov     r5,a
00FE 750018     908            mov     __divulong_PARM_2,#0x18
0101 E4         909            clr     a
0102 F501       910            mov     (__divulong_PARM_2 + 1),a
0104 F502       911            mov     (__divulong_PARM_2 + 2),a
0106 F503       912            mov     (__divulong_PARM_2 + 3),a
0108 8A82       913            mov     dpl,r2
010A 8B83       914            mov     dph,r3
010C 8CF0       915            mov     b,r4
010E ED         916            mov     a,r5
010F 120000     917            lcall   __divulong
0112 AA82       918            mov     r2,dpl
0114 AB83       919            mov     r3,dph
0116 ACF0       920            mov     r4,b
0118 FD         921            mov     r5,a
0119 E4         922            clr     a
011A C3         923            clr     c
011B 9A         924            subb    a,r2
011C FA         925            mov     r2,a
011D E4         926            clr     a
011E 9B         927            subb    a,r3
011F FB         928            mov     r3,a
0120 7401       929            mov     a,#0x01
0122 9C         930            subb    a,r4
0123 E4         931            clr     a
0124 9D         932            subb    a,r5
0125 8A95       933            mov     _SBRL1,r2
0127 8B96       934            mov     (_SBRL1 >> 8),r3
0129            935   ;        main.c:180: TI1 = 1; // indicate ready for TX
0129 D2C9       936            setb    _TI1
012B            937   ;        main.c:181: SBCON1 |= 0x40;   // enable baud rate generator
012B 439440     938            orl     _SBCON1,#0x40
012E            939   ;        main.c:182: SFRPAGE = 0x00;
012E 75A700     940            mov     _SFRPAGE,#0x00
0131 22         941            ret
0132            942   ;------------------------------------------------------------
0132            943   ;Allocation info for local variables in function 'putchar1'
0132            944   ;------------------------------------------------------------
0132            945   ;c                         Allocated to registers r2 
0132            946   ;------------------------------------------------------------
0132            947   ;        main.c:185: void putchar1 (char c) 
0132            948   ;        -----------------------------------------
0132            949   ;         function putchar1
0132            950   ;        -----------------------------------------
0132            951   _putchar1:
0132 AA82       952            mov     r2,dpl
0134            953   ;        main.c:187: SFRPAGE = 0x20;
0134 75A720     954            mov     _SFRPAGE,#0x20
0137            955   ;        main.c:188: while (!TI1);
0137            956   L006001?:
0137            957   ;        main.c:189: TI1=0;
0137 10C988     958            jbc     _TI1,L006008?
013A 8000       959            sjmp    L006001?
013C            960   L006008?:
013C            961   ;        main.c:190: SBUF1 = c;
013C 8A92       962            mov     _SBUF1,r2
013E            963   ;        main.c:191: SFRPAGE = 0x00;
013E 75A700     964            mov     _SFRPAGE,#0x00
0141 22         965            ret
0142            966   ;------------------------------------------------------------
0142            967   ;Allocation info for local variables in function 'sendstr1'
0142            968   ;------------------------------------------------------------
0142            969   ;s                         Allocated to registers r2 r3 r4 
0142            970   ;------------------------------------------------------------
0142            971   ;        main.c:194: void sendstr1 (char * s)
0142            972   ;        -----------------------------------------
0142            973   ;         function sendstr1
0142            974   ;        -----------------------------------------
0142            975   _sendstr1:
0142 AA82       976            mov     r2,dpl
0144 AB83       977            mov     r3,dph
0146 ACF0       978            mov     r4,b
0148            979   ;        main.c:196: while(*s)
0148            980   L007001?:
0148 8A82       981            mov     dpl,r2
014A 8B83       982            mov     dph,r3
014C 8CF0       983            mov     b,r4
014E 120000     984            lcall   __gptrget
0151 FD         985            mov     r5,a
0152 6000       986            jz      L007004?
0154            987   ;        main.c:198: putchar1(*s);
0154 8D82       988            mov     dpl,r5
0156 C002       989            push    ar2
0158 C003       990            push    ar3
015A C004       991            push    ar4
015C 120000     992            lcall   _putchar1
015F D004       993            pop     ar4
0161 D003       994            pop     ar3
0163 D002       995            pop     ar2
0165            996   ;        main.c:199: s++;        
0165 0A         997            inc     r2
0166 BA00C8     998            cjne    r2,#0x00,L007001?
0169 0B         999            inc     r3
016A 8000      1000            sjmp    L007001?
016C           1001   L007004?:
016C 22        1002            ret
016D           1003   ;------------------------------------------------------------
016D           1004   ;Allocation info for local variables in function 'getchar1'
016D           1005   ;------------------------------------------------------------
016D           1006   ;c                         Allocated to registers 
016D           1007   ;------------------------------------------------------------
016D           1008   ;        main.c:203: char getchar1 (void)
016D           1009   ;        -----------------------------------------
016D           1010   ;         function getchar1
016D           1011   ;        -----------------------------------------
016D           1012   _getchar1:
016D           1013   ;        main.c:206: SFRPAGE = 0x20;
016D 75A720    1014            mov     _SFRPAGE,#0x20
0170           1015   ;        main.c:207: while (!RI1);
0170           1016   L008001?:
0170           1017   ;        main.c:208: RI1=0;
0170 10C8C8    1018            jbc     _RI1,L008008?
0173 8000      1019            sjmp    L008001?
0175           1020   L008008?:
0175           1021   ;        main.c:210: SCON1&=0b_0011_1111;
0175 53C83F    1022            anl     _SCON1,#0x3F
0178           1023   ;        main.c:211: c = SBUF1;
0178 859282    1024            mov     dpl,_SBUF1
017B           1025   ;        main.c:212: SFRPAGE = 0x00;
017B 75A700    1026            mov     _SFRPAGE,#0x00
017E           1027   ;        main.c:213: return (c);
017E 22        1028            ret
017F           1029   ;------------------------------------------------------------
017F           1030   ;Allocation info for local variables in function 'getchar1_with_timeout'
017F           1031   ;------------------------------------------------------------
017F           1032   ;c                         Allocated to registers 
017F           1033   ;timeout                   Allocated to registers r2 r3 
017F           1034   ;------------------------------------------------------------
017F           1035   ;        main.c:216: char getchar1_with_timeout (void)
017F           1036   ;        -----------------------------------------
017F           1037   ;         function getchar1_with_timeout
017F           1038   ;        -----------------------------------------
017F           1039   _getchar1_with_timeout:
017F           1040   ;        main.c:220: SFRPAGE = 0x20;
017F 75A720    1041            mov     _SFRPAGE,#0x20
0182           1042   ;        main.c:222: while (!RI1)
0182 7A00      1043            mov     r2,#0x00
0184 7B00      1044            mov     r3,#0x00
0186           1045   L009003?:
0186 20C848    1046            jb      _RI1,L009005?
0189           1047   ;        main.c:224: SFRPAGE = 0x00;
0189 75A700    1048            mov     _SFRPAGE,#0x00
018C           1049   ;        main.c:225: Timer3us(20);
018C 758214    1050            mov     dpl,#0x14
018F C002      1051            push    ar2
0191 C003      1052            push    ar3
0193 120000    1053            lcall   _Timer3us
0196 D003      1054            pop     ar3
0198 D002      1055            pop     ar2
019A           1056   ;        main.c:226: SFRPAGE = 0x20;
019A 75A720    1057            mov     _SFRPAGE,#0x20
019D           1058   ;        main.c:227: timeout++;
019D 0A        1059            inc     r2
019E BA0088    1060            cjne    r2,#0x00,L009012?
01A1 0B        1061            inc     r3
01A2           1062   L009012?:
01A2           1063   ;        main.c:228: if(timeout==25000)
01A2 BAA808    1064            cjne    r2,#0xA8,L009003?
01A5 BB6108    1065            cjne    r3,#0x61,L009003?
01A8           1066   ;        main.c:230: SFRPAGE = 0x00;
01A8 75A700    1067            mov     _SFRPAGE,#0x00
01AB           1068   ;        main.c:231: return ('\n'); // Timeout after half second
01AB 75820A    1069            mov     dpl,#0x0A
01AE 22        1070            ret
01AF           1071   L009005?:
01AF           1072   ;        main.c:234: RI1=0;
01AF C2C8      1073            clr     _RI1
01B1           1074   ;        main.c:236: SCON1&=0b_0011_1111;
01B1 53C83F    1075            anl     _SCON1,#0x3F
01B4           1076   ;        main.c:237: c = SBUF1;
01B4 859282    1077            mov     dpl,_SBUF1
01B7           1078   ;        main.c:238: SFRPAGE = 0x00;
01B7 75A700    1079            mov     _SFRPAGE,#0x00
01BA           1080   ;        main.c:239: return (c);
01BA 22        1081            ret
01BB           1082   ;------------------------------------------------------------
01BB           1083   ;Allocation info for local variables in function 'getstr1'
01BB           1084   ;------------------------------------------------------------
01BB           1085   ;n                         Allocated with name '_getstr1_PARM_2'
01BB           1086   ;s                         Allocated to registers r2 r3 r4 
01BB           1087   ;c                         Allocated to registers r1 
01BB           1088   ;cnt                       Allocated to registers r5 
01BB           1089   ;------------------------------------------------------------
01BB           1090   ;        main.c:242: void getstr1 (char * s, unsigned char n)
01BB           1091   ;        -----------------------------------------
01BB           1092   ;         function getstr1
01BB           1093   ;        -----------------------------------------
01BB           1094   _getstr1:
01BB AA82      1095            mov     r2,dpl
01BD AB83      1096            mov     r3,dph
01BF ACF0      1097            mov     r4,b
01C1           1098   ;        main.c:248: while(1)
01C1 7D00      1099            mov     r5,#0x00
01C3 8A06      1100            mov     ar6,r2
01C5 8B07      1101            mov     ar7,r3
01C7 8C00      1102            mov     ar0,r4
01C9           1103   L010007?:
01C9           1104   ;        main.c:250: c=getchar1_with_timeout();
01C9 C002      1105            push    ar2
01CB C003      1106            push    ar3
01CD C004      1107            push    ar4
01CF C005      1108            push    ar5
01D1 C006      1109            push    ar6
01D3 C007      1110            push    ar7
01D5 C000      1111            push    ar0
01D7 120000    1112            lcall   _getchar1_with_timeout
01DA A982      1113            mov     r1,dpl
01DC D000      1114            pop     ar0
01DE D007      1115            pop     ar7
01E0 D006      1116            pop     ar6
01E2 D005      1117            pop     ar5
01E4 D004      1118            pop     ar4
01E6 D003      1119            pop     ar3
01E8 D002      1120            pop     ar2
01EA           1121   ;        main.c:251: if(c=='\n')
01EA B90A08    1122            cjne    r1,#0x0A,L010002?
01ED           1123   ;        main.c:253: *s=0;
01ED 8A82      1124            mov     dpl,r2
01EF 8B83      1125            mov     dph,r3
01F1 8CF0      1126            mov     b,r4
01F3 E4        1127            clr     a
01F4           1128   ;        main.c:254: return;
01F4 020000    1129            ljmp    __gptrput
01F7           1130   L010002?:
01F7           1131   ;        main.c:257: if (cnt<n)
01F7 C3        1132            clr     c
01F8 ED        1133            mov     a,r5
01F9 9598      1134            subb    a,_getstr1_PARM_2
01FB 5000      1135            jnc     L010004?
01FD           1136   ;        main.c:259: cnt++;
01FD 0D        1137            inc     r5
01FE           1138   ;        main.c:260: *s=c;
01FE 8E82      1139            mov     dpl,r6
0200 8F83      1140            mov     dph,r7
0202 88F0      1141            mov     b,r0
0204 E9        1142            mov     a,r1
0205 120000    1143            lcall   __gptrput
0208 A3        1144            inc     dptr
0209 AE82      1145            mov     r6,dpl
020B AF83      1146            mov     r7,dph
020D           1147   ;        main.c:261: s++;
020D 8E02      1148            mov     ar2,r6
020F 8F03      1149            mov     ar3,r7
0211 8804      1150            mov     ar4,r0
0213 8000      1151            sjmp    L010007?
0215           1152   L010004?:
0215           1153   ;        main.c:265: *s=0;
0215 8A82      1154            mov     dpl,r2
0217 8B83      1155            mov     dph,r3
0219 8CF0      1156            mov     b,r4
021B E4        1157            clr     a
021C           1158   ;        main.c:266: return;
021C 020000    1159            ljmp    __gptrput
021F           1160   ;------------------------------------------------------------
021F           1161   ;Allocation info for local variables in function 'RXU1'
021F           1162   ;------------------------------------------------------------
021F           1163   ;------------------------------------------------------------
021F           1164   ;        main.c:272: bit RXU1 (void)
021F           1165   ;        -----------------------------------------
021F           1166   ;         function RXU1
021F           1167   ;        -----------------------------------------
021F           1168   _RXU1:
021F           1169   ;        main.c:275: SFRPAGE = 0x20;
021F 75A720    1170            mov     _SFRPAGE,#0x20
0222           1171   ;        main.c:276: mybit=RI1;
0222 A2C8      1172            mov     c,_RI1
0224           1173   ;        main.c:277: SFRPAGE = 0x00;
0224 75A700    1174            mov     _SFRPAGE,#0x00
0227           1175   ;        main.c:278: return mybit;
0227 22        1176            ret
0228           1177   ;------------------------------------------------------------
0228           1178   ;Allocation info for local variables in function 'waitms_or_RI1'
0228           1179   ;------------------------------------------------------------
0228           1180   ;ms                        Allocated to registers r2 r3 
0228           1181   ;j                         Allocated to registers r4 r5 
0228           1182   ;k                         Allocated to registers r6 
0228           1183   ;------------------------------------------------------------
0228           1184   ;        main.c:281: void waitms_or_RI1 (unsigned int ms)
0228           1185   ;        -----------------------------------------
0228           1186   ;         function waitms_or_RI1
0228           1187   ;        -----------------------------------------
0228           1188   _waitms_or_RI1:
0228 AA82      1189            mov     r2,dpl
022A AB83      1190            mov     r3,dph
022C           1191   ;        main.c:285: for(j=0; j<ms; j++)
022C 7C00      1192            mov     r4,#0x00
022E 7D00      1193            mov     r5,#0x00
0230           1194   L012007?:
0230 C3        1195            clr     c
0231 EC        1196            mov     a,r4
0232 9A        1197            subb    a,r2
0233 ED        1198            mov     a,r5
0234 9B        1199            subb    a,r3
0235 5000      1200            jnc     L012011?
0237           1201   ;        main.c:287: for (k=0; k<4; k++)
0237 7E00      1202            mov     r6,#0x00
0239           1203   L012003?:
0239 BE0488    1204            cjne    r6,#0x04,L012019?
023C           1205   L012019?:
023C 5000      1206            jnc     L012009?
023E           1207   ;        main.c:289: if(RXU1()) return;
023E C002      1208            push    ar2
0240 C003      1209            push    ar3
0242 C004      1210            push    ar4
0244 C005      1211            push    ar5
0246 C006      1212            push    ar6
0248 120000    1213            lcall   _RXU1
024B E4        1214            clr     a
024C 33        1215            rlc     a
024D D006      1216            pop     ar6
024F D005      1217            pop     ar5
0251 D004      1218            pop     ar4
0253 D003      1219            pop     ar3
0255 D002      1220            pop     ar2
0257 6000      1221            jz      L012002?
0259 22        1222            ret
025A           1223   L012002?:
025A           1224   ;        main.c:290: Timer3us(250);
025A 7582FA    1225            mov     dpl,#0xFA
025D C002      1226            push    ar2
025F C003      1227            push    ar3
0261 C004      1228            push    ar4
0263 C005      1229            push    ar5
0265 C006      1230            push    ar6
0267 120000    1231            lcall   _Timer3us
026A D006      1232            pop     ar6
026C D005      1233            pop     ar5
026E D004      1234            pop     ar4
0270 D003      1235            pop     ar3
0272 D002      1236            pop     ar2
0274           1237   ;        main.c:287: for (k=0; k<4; k++)
0274 0E        1238            inc     r6
0275 8000      1239            sjmp    L012003?
0277           1240   L012009?:
0277           1241   ;        main.c:285: for(j=0; j<ms; j++)
0277 0C        1242            inc     r4
0278 BC00C8    1243            cjne    r4,#0x00,L012007?
027B 0D        1244            inc     r5
027C 8000      1245            sjmp    L012007?
027E           1246   L012011?:
027E 22        1247            ret
027F           1248   ;------------------------------------------------------------
027F           1249   ;Allocation info for local variables in function 'SendATCommand'
027F           1250   ;------------------------------------------------------------
027F           1251   ;s                         Allocated to registers r2 r3 r4 
027F           1252   ;------------------------------------------------------------
027F           1253   ;        main.c:295: void SendATCommand (char * s)
027F           1254   ;        -----------------------------------------
027F           1255   ;         function SendATCommand
027F           1256   ;        -----------------------------------------
027F           1257   _SendATCommand:
027F AA82      1258            mov     r2,dpl
0281 AB83      1259            mov     r3,dph
0283 ACF0      1260            mov     r4,b
0285           1261   ;        main.c:297: printf("Command: %s", s);
0285 C002      1262            push    ar2
0287 C003      1263            push    ar3
0289 C004      1264            push    ar4
028B C002      1265            push    ar2
028D C003      1266            push    ar3
028F C004      1267            push    ar4
0291 7448      1268            mov     a,#__str_0
0293 C0E0      1269            push    acc
0295 74C5      1270            mov     a,#(__str_0 >> 8)
0297 C0E0      1271            push    acc
0299 7480      1272            mov     a,#0x80
029B C0E0      1273            push    acc
029D 120000    1274            lcall   _printf
02A0 E581      1275            mov     a,sp
02A2 24FA      1276            add     a,#0xfa
02A4 F581      1277            mov     sp,a
02A6           1278   ;        main.c:298: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02A6 C2A0      1279            clr     _P2_0
02A8           1280   ;        main.c:299: waitms(5);
02A8 900005    1281            mov     dptr,#0x0005
02AB 120000    1282            lcall   _waitms
02AE D004      1283            pop     ar4
02B0 D003      1284            pop     ar3
02B2 D002      1285            pop     ar2
02B4           1286   ;        main.c:300: sendstr1(s);
02B4 8A82      1287            mov     dpl,r2
02B6 8B83      1288            mov     dph,r3
02B8 8CF0      1289            mov     b,r4
02BA 120000    1290            lcall   _sendstr1
02BD           1291   ;        main.c:301: getstr1(buff, sizeof(buff)-1);
02BD 759813    1292            mov     _getstr1_PARM_2,#0x13
02C0 904558    1293            mov     dptr,#_buff
02C3 75F040    1294            mov     b,#0x40
02C6 120000    1295            lcall   _getstr1
02C9           1296   ;        main.c:302: waitms(10);
02C9 90000A    1297            mov     dptr,#0x000A
02CC 120000    1298            lcall   _waitms
02CF           1299   ;        main.c:303: P2_0=1; // 'set' pin to 1 is normal operation mode.
02CF D2A0      1300            setb    _P2_0
02D1           1301   ;        main.c:304: printf("Response: %s\r\n", buff);
02D1 7458      1302            mov     a,#_buff
02D3 C0E0      1303            push    acc
02D5 7445      1304            mov     a,#(_buff >> 8)
02D7 C0E0      1305            push    acc
02D9 7440      1306            mov     a,#0x40
02DB C0E0      1307            push    acc
02DD 7408      1308            mov     a,#__str_1
02DF C0E0      1309            push    acc
02E1 74C6      1310            mov     a,#(__str_1 >> 8)
02E3 C0E0      1311            push    acc
02E5 7480      1312            mov     a,#0x80
02E7 C0E0      1313            push    acc
02E9 120000    1314            lcall   _printf
02EC E581      1315            mov     a,sp
02EE 24FA      1316            add     a,#0xfa
02F0 F581      1317            mov     sp,a
02F2 22        1318            ret
02F3           1319   ;------------------------------------------------------------
02F3           1320   ;Allocation info for local variables in function 'ReceptionOff'
02F3           1321   ;------------------------------------------------------------
02F3           1322   ;------------------------------------------------------------
02F3           1323   ;        main.c:307: void ReceptionOff (void)
02F3           1324   ;        -----------------------------------------
02F3           1325   ;         function ReceptionOff
02F3           1326   ;        -----------------------------------------
02F3           1327   _ReceptionOff:
02F3           1328   ;        main.c:309: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02F3 C2A0      1329            clr     _P2_0
02F5           1330   ;        main.c:310: waitms(10);
02F5 90000A    1331            mov     dptr,#0x000A
02F8 120000    1332            lcall   _waitms
02FB           1333   ;        main.c:311: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
02FB 90C648    1334            mov     dptr,#__str_2
02FE 75F080    1335            mov     b,#0x80
0301 120000    1336            lcall   _sendstr1
0304           1337   ;        main.c:312: waitms(10);
0304 90000A    1338            mov     dptr,#0x000A
0307 120000    1339            lcall   _waitms
030A           1340   ;        main.c:314: SCON1&=0b_0011_1111;
030A 53C83F    1341            anl     _SCON1,#0x3F
030D           1342   ;        main.c:315: P2_0=1; // 'set' pin to 1 is normal operation mode.
030D D2A0      1343            setb    _P2_0
030F 22        1344            ret
0310           1345   ;------------------------------------------------------------
0310           1346   ;Allocation info for local variables in function 'Set_Pin_Output'
0310           1347   ;------------------------------------------------------------
0310           1348   ;pin                       Allocated to registers r2 
0310           1349   ;mask                      Allocated to registers r3 
0310           1350   ;------------------------------------------------------------
0310           1351   ;        main.c:318: void Set_Pin_Output (unsigned char pin)
0310           1352   ;        -----------------------------------------
0310           1353   ;         function Set_Pin_Output
0310           1354   ;        -----------------------------------------
0310           1355   _Set_Pin_Output:
0310 AA82      1356            mov     r2,dpl
0312           1357   ;        main.c:322: mask=(1<<(pin&0x7));
0312 7407      1358            mov     a,#0x07
0314 5A        1359            anl     a,r2
0315 F5F0      1360            mov     b,a
0317 05F0      1361            inc     b
0319 7401      1362            mov     a,#0x01
031B 8000      1363            sjmp    L015011?
031D           1364   L015009?:
031D 25E0      1365            add     a,acc
031F           1366   L015011?:
031F D5F0C8    1367            djnz    b,L015009?
0322 FB        1368            mov     r3,a
0323           1369   ;        main.c:323: switch(pin/0x10)
0323 EA        1370            mov     a,r2
0324 C4        1371            swap    a
0325 540F      1372            anl     a,#0x0f
0327 FA        1373            mov  r2,a
0328 24FC      1374            add     a,#0xff - 0x03
032A 4000      1375            jc      L015006?
032C EA        1376            mov     a,r2
032D 2A        1377            add     a,r2
032E 2A        1378            add     a,r2
032F 90C748    1379            mov     dptr,#L015013?
0332 73        1380            jmp     @a+dptr
0333           1381   L015013?:
0333 020000    1382            ljmp    L015001?
0336 020000    1383            ljmp    L015002?
0339 020000    1384            ljmp    L015003?
033C 020000    1385            ljmp    L015004?
033F           1386   ;        main.c:325: case 0: P0MDOUT |= mask; break;
033F           1387   L015001?:
033F EB        1388            mov     a,r3
0340 42A4      1389            orl     _P0MDOUT,a
0342           1390   ;        main.c:326: case 1: P1MDOUT |= mask; break;
0342 22        1391            ret
0343           1392   L015002?:
0343 EB        1393            mov     a,r3
0344 42A5      1394            orl     _P1MDOUT,a
0346           1395   ;        main.c:327: case 2: P2MDOUT |= mask; break; 
0346 22        1396            ret
0347           1397   L015003?:
0347 EB        1398            mov     a,r3
0348 42A6      1399            orl     _P2MDOUT,a
034A           1400   ;        main.c:328: case 3: P3MDOUT |= mask; break; 
034A 22        1401            ret
034B           1402   L015004?:
034B EB        1403            mov     a,r3
034C 429C      1404            orl     _P3MDOUT,a
034E           1405   ;        main.c:329: }   
034E           1406   L015006?:
034E 22        1407            ret
034F           1408   ;------------------------------------------------------------
034F           1409   ;Allocation info for local variables in function 'Set_Pin_Input'
034F           1410   ;------------------------------------------------------------
034F           1411   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_101'
034F           1412   ;pin                       Allocated to registers r2 
034F           1413   ;------------------------------------------------------------
034F           1414   ;        main.c:332: void Set_Pin_Input (unsigned char pin)
034F           1415   ;        -----------------------------------------
034F           1416   ;         function Set_Pin_Input
034F           1417   ;        -----------------------------------------
034F           1418   _Set_Pin_Input:
034F AA82      1419            mov     r2,dpl
0351           1420   ;        main.c:336: mask=(1<<(pin&0x7));
0351 7407      1421            mov     a,#0x07
0353 5A        1422            anl     a,r2
0354 F5F0      1423            mov     b,a
0356 05F0      1424            inc     b
0358 7401      1425            mov     a,#0x01
035A 8000      1426            sjmp    L016011?
035C           1427   L016009?:
035C 25E0      1428            add     a,acc
035E           1429   L016011?:
035E D5F0C8    1430            djnz    b,L016009?
0361           1431   ;        main.c:337: mask=~mask;
0361 F4        1432            cpl     a
0362 FB        1433            mov     r3,a
0363           1434   ;        main.c:338: switch(pin/0x10)
0363 EA        1435            mov     a,r2
0364 C4        1436            swap    a
0365 540F      1437            anl     a,#0x0f
0367 FA        1438            mov  r2,a
0368 24FC      1439            add     a,#0xff - 0x03
036A 4000      1440            jc      L016006?
036C EA        1441            mov     a,r2
036D 2A        1442            add     a,r2
036E 2A        1443            add     a,r2
036F 90C948    1444            mov     dptr,#L016013?
0372 73        1445            jmp     @a+dptr
0373           1446   L016013?:
0373 020000    1447            ljmp    L016001?
0376 020000    1448            ljmp    L016002?
0379 020000    1449            ljmp    L016003?
037C 020000    1450            ljmp    L016004?
037F           1451   ;        main.c:340: case 0: P0MDOUT &= mask; break;
037F           1452   L016001?:
037F EB        1453            mov     a,r3
0380 52A4      1454            anl     _P0MDOUT,a
0382           1455   ;        main.c:341: case 1: P1MDOUT &= mask; break;
0382 22        1456            ret
0383           1457   L016002?:
0383 EB        1458            mov     a,r3
0384 52A5      1459            anl     _P1MDOUT,a
0386           1460   ;        main.c:342: case 2: P2MDOUT &= mask; break; 
0386 22        1461            ret
0387           1462   L016003?:
0387 EB        1463            mov     a,r3
0388 52A6      1464            anl     _P2MDOUT,a
038A           1465   ;        main.c:343: case 3: P3MDOUT &= mask; break; 
038A 22        1466            ret
038B           1467   L016004?:
038B EB        1468            mov     a,r3
038C 529C      1469            anl     _P3MDOUT,a
038E           1470   ;        main.c:344: }   
038E           1471   L016006?:
038E 22        1472            ret
038F           1473   ;------------------------------------------------------------
038F           1474   ;Allocation info for local variables in function 'InitADC'
038F           1475   ;------------------------------------------------------------
038F           1476   ;------------------------------------------------------------
038F           1477   ;        main.c:347: void InitADC (void)
038F           1478   ;        -----------------------------------------
038F           1479   ;         function InitADC
038F           1480   ;        -----------------------------------------
038F           1481   _InitADC:
038F           1482   ;        main.c:349: SFRPAGE = 0x00;
038F 75A700    1483            mov     _SFRPAGE,#0x00
0392           1484   ;        main.c:350: ADEN=0; // Disable ADC
0392 C2EF      1485            clr     _ADEN
0394           1486   ;        main.c:355: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0394 75B280    1487            mov     _ADC0CN1,#0x80
0397           1488   ;        main.c:359: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0397 75BC20    1489            mov     _ADC0CF0,#0x20
039A           1490   ;        main.c:363: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
039A 75B91E    1491            mov     _ADC0CF1,#0x1E
039D           1492   ;        main.c:372: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
039D 75E800    1493            mov     _ADC0CN0,#0x00
03A0           1494   ;        main.c:377: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03A0 75DF3F    1495            mov     _ADC0CF2,#0x3F
03A3           1496   ;        main.c:381: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03A3 75B300    1497            mov     _ADC0CN2,#0x00
03A6           1498   ;        main.c:383: ADEN=1; // Enable ADC
03A6 D2EF      1499            setb    _ADEN
03A8 22        1500            ret
03A9           1501   ;------------------------------------------------------------
03A9           1502   ;Allocation info for local variables in function 'InitPinADC'
03A9           1503   ;------------------------------------------------------------
03A9           1504   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
03A9           1505   ;portno                    Allocated to registers r2 
03A9           1506   ;mask                      Allocated to registers r3 
03A9           1507   ;------------------------------------------------------------
03A9           1508   ;        main.c:386: void InitPinADC (unsigned char portno, unsigned char pin_num)
03A9           1509   ;        -----------------------------------------
03A9           1510   ;         function InitPinADC
03A9           1511   ;        -----------------------------------------
03A9           1512   _InitPinADC:
03A9 AA82      1513            mov     r2,dpl
03AB           1514   ;        main.c:390: mask=1<<pin_num;
03AB 85E0F0    1515            mov     b,_InitPinADC_PARM_2
03AE 05F0      1516            inc     b
03B0 7401      1517            mov     a,#0x01
03B2 8000      1518            sjmp    L018013?
03B4           1519   L018011?:
03B4 25E0      1520            add     a,acc
03B6           1521   L018013?:
03B6 D5F0C8    1522            djnz    b,L018011?
03B9 FB        1523            mov     r3,a
03BA           1524   ;        main.c:392: SFRPAGE = 0x20;
03BA 75A720    1525            mov     _SFRPAGE,#0x20
03BD           1526   ;        main.c:393: switch (portno)
03BD BA0008    1527            cjne    r2,#0x00,L018014?
03C0 8000      1528            sjmp    L018001?
03C2           1529   L018014?:
03C2 BA0188    1530            cjne    r2,#0x01,L018015?
03C5 8000      1531            sjmp    L018002?
03C7           1532   L018015?:
03C7           1533   ;        main.c:395: case 0:
03C7 BA0208    1534            cjne    r2,#0x02,L018005?
03CA 8000      1535            sjmp    L018003?
03CC           1536   L018001?:
03CC           1537   ;        main.c:396: P0MDIN &= (~mask); // Set pin as analog input
03CC EB        1538            mov     a,r3
03CD F4        1539            cpl     a
03CE FA        1540            mov     r2,a
03CF 52F1      1541            anl     _P0MDIN,a
03D1           1542   ;        main.c:397: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03D1 EB        1543            mov     a,r3
03D2 42D4      1544            orl     _P0SKIP,a
03D4           1545   ;        main.c:398: break;
03D4           1546   ;        main.c:399: case 1:
03D4 8000      1547            sjmp    L018005?
03D6           1548   L018002?:
03D6           1549   ;        main.c:400: P1MDIN &= (~mask); // Set pin as analog input
03D6 EB        1550            mov     a,r3
03D7 F4        1551            cpl     a
03D8 FA        1552            mov     r2,a
03D9 52F2      1553            anl     _P1MDIN,a
03DB           1554   ;        main.c:401: P1SKIP |= mask; // Skip Crossbar decoding for this pin
03DB EB        1555            mov     a,r3
03DC 42D5      1556            orl     _P1SKIP,a
03DE           1557   ;        main.c:402: break;
03DE           1558   ;        main.c:403: case 2:
03DE 8000      1559            sjmp    L018005?
03E0           1560   L018003?:
03E0           1561   ;        main.c:404: P2MDIN &= (~mask); // Set pin as analog input
03E0 EB        1562            mov     a,r3
03E1 F4        1563            cpl     a
03E2 FA        1564            mov     r2,a
03E3 52F3      1565            anl     _P2MDIN,a
03E5           1566   ;        main.c:405: P2SKIP |= mask; // Skip Crossbar decoding for this pin
03E5 EB        1567            mov     a,r3
03E6 42CC      1568            orl     _P2SKIP,a
03E8           1569   ;        main.c:409: }
03E8           1570   L018005?:
03E8           1571   ;        main.c:410: SFRPAGE = 0x00;
03E8 75A700    1572            mov     _SFRPAGE,#0x00
03EB 22        1573            ret
03EC           1574   ;------------------------------------------------------------
03EC           1575   ;Allocation info for local variables in function 'ADC_at_Pin'
03EC           1576   ;------------------------------------------------------------
03EC           1577   ;pin                       Allocated to registers 
03EC           1578   ;------------------------------------------------------------
03EC           1579   ;        main.c:413: unsigned int ADC_at_Pin(unsigned char pin)
03EC           1580   ;        -----------------------------------------
03EC           1581   ;         function ADC_at_Pin
03EC           1582   ;        -----------------------------------------
03EC           1583   _ADC_at_Pin:
03EC 8582BB    1584            mov     _ADC0MX,dpl
03EF           1585   ;        main.c:416: ADINT = 0;
03EF C2ED      1586            clr     _ADINT
03F1           1587   ;        main.c:417: ADBUSY = 1;     // Convert voltage at the pin
03F1 D2EC      1588            setb    _ADBUSY
03F3           1589   ;        main.c:418: while (!ADINT); // Wait for conversion to complete
03F3           1590   L019001?:
03F3 30ED88    1591            jnb     _ADINT,L019001?
03F6           1592   ;        main.c:419: return (ADC0);
03F6 85BD82    1593            mov     dpl,_ADC0
03F9 85BE83    1594            mov     dph,(_ADC0 >> 8)
03FC 22        1595            ret
03FD           1596   ;------------------------------------------------------------
03FD           1597   ;Allocation info for local variables in function 'Timer5_ISR'
03FD           1598   ;------------------------------------------------------------
03FD           1599   ;------------------------------------------------------------
03FD           1600   ;        main.c:422: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
03FD           1601   ;        -----------------------------------------
03FD           1602   ;         function Timer5_ISR
03FD           1603   ;        -----------------------------------------
03FD           1604   _Timer5_ISR:
03FD C098      1605            push    bits
03FF C0E0      1606            push    acc
0401 C0F0      1607            push    b
0403 C082      1608            push    dpl
0405 C083      1609            push    dph
0407 C002      1610            push    (0+2)
0409 C003      1611            push    (0+3)
040B C004      1612            push    (0+4)
040D C005      1613            push    (0+5)
040F C006      1614            push    (0+6)
0411 C007      1615            push    (0+7)
0413 C000      1616            push    (0+0)
0415 C001      1617            push    (0+1)
0417 C0D0      1618            push    psw
0419 75D000    1619            mov     psw,#0x00
041C           1620   ;        main.c:424: SFRPAGE=0x10;
041C 75A710    1621            mov     _SFRPAGE,#0x10
041F           1622   ;        main.c:425: TF5H = 0; // Clear Timer5 interrupt flag
041F C2C7      1623            clr     _TF5H
0421           1624   ;        main.c:426: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0421 75D2C4    1625            mov     _TMR5RL,#0xC4
0424 75D3FF    1626            mov     (_TMR5RL >> 8),#0xFF
0427           1627   ;        main.c:428: fre_mea_count++;
0427 0558      1628            inc     _fre_mea_count
0429 E4        1629            clr     a
042A B55808    1630            cjne    a,_fre_mea_count,L020034?
042D 0559      1631            inc     (_fre_mea_count + 1)
042F           1632   L020034?:
042F           1633   ;        main.c:429: if(fre_mea_count == 1000){
042F 74E8      1634            mov     a,#0xE8
0431 B55848    1635            cjne    a,_fre_mea_count,L020002?
0434 7403      1636            mov     a,#0x03
0436 B55948    1637            cjne    a,(_fre_mea_count + 1),L020002?
0439           1638   ;        main.c:430: fre_mea_count = 0;
0439 E4        1639            clr     a
043A F558      1640            mov     _fre_mea_count,a
043C F559      1641            mov     (_fre_mea_count + 1),a
043E           1642   ;        main.c:431: freq100 = get_freq();
043E 120000    1643            lcall   _get_freq
0441 AA82      1644            mov     r2,dpl
0443 AB83      1645            mov     r3,dph
0445 8A98      1646            mov     _freq100,r2
0447 EB        1647            mov     a,r3
0448 F599      1648            mov     (_freq100 + 1),a
044A 33        1649            rlc     a
044B 95E0      1650            subb    a,acc
044D F59A      1651            mov     (_freq100 + 2),a
044F F59B      1652            mov     (_freq100 + 3),a
0451           1653   L020002?:
0451           1654   ;        main.c:435: pwm_counter++; 
0451 0598      1655            inc     _pwm_counter
0453 E4        1656            clr     a
0454 B598C8    1657            cjne    a,_pwm_counter,L020037?
0457 0599      1658            inc     (_pwm_counter + 1)
0459           1659   L020037?:
0459           1660   ;        main.c:436: if (pwm_counter == 100){
0459 7464      1661            mov     a,#0x64
045B B59808    1662            cjne    a,_pwm_counter,L020038?
045E E4        1663            clr     a
045F B59908    1664            cjne    a,(_pwm_counter + 1),L020038?
0462 8000      1665            sjmp    L020039?
0464           1666   L020038?:
0464 8000      1667            sjmp    L020004?
0466           1668   L020039?:
0466           1669   ;        main.c:437: pwm_counter = 0; 
0466 E4        1670            clr     a
0467 F598      1671            mov     _pwm_counter,a
0469 F599      1672            mov     (_pwm_counter + 1),a
046B           1673   L020004?:
046B           1674   ;        main.c:440: if (pwm_right > pwm_counter){
046B AAD8      1675            mov     r2,_pwm_right
046D 7B00      1676            mov     r3,#0x00
046F C3        1677            clr     c
0470 E598      1678            mov     a,_pwm_counter
0472 9A        1679            subb    a,r2
0473 E599      1680            mov     a,(_pwm_counter + 1)
0475 9B        1681            subb    a,r3
0476 5000      1682            jnc     L020009?
0478           1683   ;        main.c:441: if(L_motor_dir){
0478 E598      1684            mov     a,_L_motor_dir
047A 6000      1685            jz      L020006?
047C           1686   ;        main.c:442: L_bridge_1 = 1; 
047C D2A1      1687            setb    _P2_1
047E           1688   ;        main.c:443: L_bridge_2 = 0; 
047E C2A2      1689            clr     _P2_2
0480 8000      1690            sjmp    L020010?
0482           1691   L020006?:
0482           1692   ;        main.c:446: L_bridge_1 = 0; 
0482 C2A1      1693            clr     _P2_1
0484           1694   ;        main.c:447: L_bridge_2 = 1; 
0484 D2A2      1695            setb    _P2_2
0486 8000      1696            sjmp    L020010?
0488           1697   L020009?:
0488           1698   ;        main.c:451: L_bridge_1 = 0; 
0488 C2A1      1699            clr     _P2_1
048A           1700   ;        main.c:452: L_bridge_2 = 0; 
048A C2A2      1701            clr     _P2_2
048C           1702   L020010?:
048C           1703   ;        main.c:454: if (pwm_left > pwm_counter){
048C AA18      1704            mov     r2,_pwm_left
048E 7B00      1705            mov     r3,#0x00
0490 C3        1706            clr     c
0491 E598      1707            mov     a,_pwm_counter
0493 9A        1708            subb    a,r2
0494 E599      1709            mov     a,(_pwm_counter + 1)
0496 9B        1710            subb    a,r3
0497 5000      1711            jnc     L020015?
0499           1712   ;        main.c:455: if (R_motor_dir){
0499 E558      1713            mov     a,_R_motor_dir
049B 6000      1714            jz      L020012?
049D           1715   ;        main.c:456: R_bridge_1 = 1; 
049D D2A4      1716            setb    _P2_4
049F           1717   ;        main.c:457: R_bridge_2 = 0;
049F C2A3      1718            clr     _P2_3
04A1 8000      1719            sjmp    L020016?
04A3           1720   L020012?:
04A3           1721   ;        main.c:460: R_bridge_1 = 0; 
04A3 C2A4      1722            clr     _P2_4
04A5           1723   ;        main.c:461: R_bridge_2 = 1;
04A5 D2A3      1724            setb    _P2_3
04A7 8000      1725            sjmp    L020016?
04A9           1726   L020015?:
04A9           1727   ;        main.c:465: R_bridge_1 = 0; 
04A9 C2A4      1728            clr     _P2_4
04AB           1729   ;        main.c:466: R_bridge_2 = 0; 
04AB C2A3      1730            clr     _P2_3
04AD           1731   L020016?:
04AD           1732   ;        main.c:469: servo_counter++;
04AD 0558      1733            inc     _servo_counter
04AF E4        1734            clr     a
04B0 B55848    1735            cjne    a,_servo_counter,L020044?
04B3 0559      1736            inc     (_servo_counter + 1)
04B5           1737   L020044?:
04B5           1738   ;        main.c:470: if(servo_counter==2000)
04B5 74D0      1739            mov     a,#0xD0
04B7 B55888    1740            cjne    a,_servo_counter,L020018?
04BA 7407      1741            mov     a,#0x07
04BC B55988    1742            cjne    a,(_servo_counter + 1),L020018?
04BF           1743   ;        main.c:472: servo_counter=0;
04BF E4        1744            clr     a
04C0 F558      1745            mov     _servo_counter,a
04C2 F559      1746            mov     (_servo_counter + 1),a
04C4           1747   ;        main.c:473: Servo_arm=1;
04C4 D296      1748            setb    _P1_6
04C6           1749   ;        main.c:474: Servo_base=1;
04C6 D297      1750            setb    _P1_7
04C8           1751   L020018?:
04C8           1752   ;        main.c:476: if(servo_arm==servo_counter)
04C8 AAD8      1753            mov     r2,_servo_arm
04CA 7B00      1754            mov     r3,#0x00
04CC EA        1755            mov     a,r2
04CD B558C8    1756            cjne    a,_servo_counter,L020020?
04D0 EB        1757            mov     a,r3
04D1 B559C8    1758            cjne    a,(_servo_counter + 1),L020020?
04D4           1759   ;        main.c:478: Servo_arm=0;
04D4 C296      1760            clr     _P1_6
04D6           1761   L020020?:
04D6           1762   ;        main.c:480: if(servo_base==servo_counter)
04D6 AA18      1763            mov     r2,_servo_base
04D8 7B00      1764            mov     r3,#0x00
04DA EA        1765            mov     a,r2
04DB B55808    1766            cjne    a,_servo_counter,L020023?
04DE EB        1767            mov     a,r3
04DF B55908    1768            cjne    a,(_servo_counter + 1),L020023?
04E2           1769   ;        main.c:482: Servo_base=0;
04E2 C297      1770            clr     _P1_7
04E4           1771   L020023?:
04E4 D0D0      1772            pop     psw
04E6 D001      1773            pop     (0+1)
04E8 D000      1774            pop     (0+0)
04EA D007      1775            pop     (0+7)
04EC D006      1776            pop     (0+6)
04EE D005      1777            pop     (0+5)
04F0 D004      1778            pop     (0+4)
04F2 D003      1779            pop     (0+3)
04F4 D002      1780            pop     (0+2)
04F6 D083      1781            pop     dph
04F8 D082      1782            pop     dpl
04FA D0F0      1783            pop     b
04FC D0E0      1784            pop     acc
04FE D098      1785            pop     bits
0500 32        1786            reti
0501           1787   ;------------------------------------------------------------
0501           1788   ;Allocation info for local variables in function 'servo_pick'
0501           1789   ;------------------------------------------------------------
0501           1790   ;i                         Allocated to registers r2 r3 
0501           1791   ;------------------------------------------------------------
0501           1792   ;        main.c:487: void servo_pick(){
0501           1793   ;        -----------------------------------------
0501           1794   ;         function servo_pick
0501           1795   ;        -----------------------------------------
0501           1796   _servo_pick:
0501           1797   ;        main.c:489: servo_arm = 1;
0501 75D801    1798            mov     _servo_arm,#0x01
0504           1799   ;        main.c:491: servo_base = 250;
0504 7518FA    1800            mov     _servo_base,#0xFA
0507           1801   ;        main.c:492: waitms(200);
0507 9000C8    1802            mov     dptr,#0x00C8
050A 120000    1803            lcall   _waitms
050D           1804   ;        main.c:493: servo_arm = 250;
050D 75D8FA    1805            mov     _servo_arm,#0xFA
0510           1806   ;        main.c:494: Magnet = 1;
0510 D295      1807            setb    _P1_5
0512           1808   ;        main.c:495: waitms(200);
0512 9000C8    1809            mov     dptr,#0x00C8
0515 120000    1810            lcall   _waitms
0518           1811   ;        main.c:496: for(i = 0; i<109; i++){
0518 7A00      1812            mov     r2,#0x00
051A 7B00      1813            mov     r3,#0x00
051C           1814   L021001?:
051C C3        1815            clr     c
051D EA        1816            mov     a,r2
051E 946D      1817            subb    a,#0x6D
0520 EB        1818            mov     a,r3
0521 6480      1819            xrl     a,#0x80
0523 9480      1820            subb    a,#0x80
0525 5000      1821            jnc     L021004?
0527           1822   ;        main.c:497: waitms(5);
0527 900005    1823            mov     dptr,#0x0005
052A C002      1824            push    ar2
052C C003      1825            push    ar3
052E 120000    1826            lcall   _waitms
0531 D003      1827            pop     ar3
0533 D002      1828            pop     ar2
0535           1829   ;        main.c:498: servo_base--;
0535 1518      1830            dec     _servo_base
0537           1831   ;        main.c:496: for(i = 0; i<109; i++){
0537 0A        1832            inc     r2
0538 BA0048    1833            cjne    r2,#0x00,L021001?
053B 0B        1834            inc     r3
053C 8000      1835            sjmp    L021001?
053E           1836   L021004?:
053E           1837   ;        main.c:500: waitms(200);
053E 9000C8    1838            mov     dptr,#0x00C8
0541 120000    1839            lcall   _waitms
0544           1840   ;        main.c:501: for(i = 0; i<159; i++){
0544 7A00      1841            mov     r2,#0x00
0546 7B00      1842            mov     r3,#0x00
0548           1843   L021005?:
0548 C3        1844            clr     c
0549 EA        1845            mov     a,r2
054A 949F      1846            subb    a,#0x9F
054C EB        1847            mov     a,r3
054D 6480      1848            xrl     a,#0x80
054F 9480      1849            subb    a,#0x80
0551 5000      1850            jnc     L021008?
0553           1851   ;        main.c:502: waitms(5);
0553 900005    1852            mov     dptr,#0x0005
0556 C002      1853            push    ar2
0558 C003      1854            push    ar3
055A 120000    1855            lcall   _waitms
055D D003      1856            pop     ar3
055F D002      1857            pop     ar2
0561           1858   ;        main.c:503: servo_arm--;
0561 15D8      1859            dec     _servo_arm
0563           1860   ;        main.c:501: for(i = 0; i<159; i++){
0563 0A        1861            inc     r2
0564 BA00C8    1862            cjne    r2,#0x00,L021005?
0567 0B        1863            inc     r3
0568 8000      1864            sjmp    L021005?
056A           1865   L021008?:
056A           1866   ;        main.c:505: waitms(200);
056A 9000C8    1867            mov     dptr,#0x00C8
056D 120000    1868            lcall   _waitms
0570           1869   ;        main.c:506: for(i = 0; i<45; i++){
0570 7A00      1870            mov     r2,#0x00
0572 7B00      1871            mov     r3,#0x00
0574           1872   L021009?:
0574 C3        1873            clr     c
0575 EA        1874            mov     a,r2
0576 942D      1875            subb    a,#0x2D
0578 EB        1876            mov     a,r3
0579 6480      1877            xrl     a,#0x80
057B 9480      1878            subb    a,#0x80
057D 5000      1879            jnc     L021012?
057F           1880   ;        main.c:507: waitms(5);
057F 900005    1881            mov     dptr,#0x0005
0582 C002      1882            push    ar2
0584 C003      1883            push    ar3
0586 120000    1884            lcall   _waitms
0589 D003      1885            pop     ar3
058B D002      1886            pop     ar2
058D           1887   ;        main.c:508: servo_base--;
058D 1518      1888            dec     _servo_base
058F           1889   ;        main.c:506: for(i = 0; i<45; i++){
058F 0A        1890            inc     r2
0590 BA0048    1891            cjne    r2,#0x00,L021009?
0593 0B        1892            inc     r3
0594 8000      1893            sjmp    L021009?
0596           1894   L021012?:
0596           1895   ;        main.c:510: waitms(500);
0596 9001F4    1896            mov     dptr,#0x01F4
0599 120000    1897            lcall   _waitms
059C           1898   ;        main.c:511: Magnet = 0;
059C C295      1899            clr     _P1_5
059E           1900   ;        main.c:512: waitms(200);
059E 9000C8    1901            mov     dptr,#0x00C8
05A1 120000    1902            lcall   _waitms
05A4           1903   ;        main.c:513: servo_arm=1;
05A4 75D801    1904            mov     _servo_arm,#0x01
05A7           1905   ;        main.c:514: servo_base=1;
05A7 751801    1906            mov     _servo_base,#0x01
05AA           1907   ;        main.c:515: return;
05AA 22        1908            ret
05AB           1909   ;------------------------------------------------------------
05AB           1910   ;Allocation info for local variables in function 'check_bound'
05AB           1911   ;------------------------------------------------------------
05AB           1912   ;d2                        Allocated with name '_check_bound_PARM_2'
05AB           1913   ;d1                        Allocated to registers r2 r3 
05AB           1914   ;------------------------------------------------------------
05AB           1915   ;        main.c:518: int check_bound(int d1, int d2){
05AB           1916   ;        -----------------------------------------
05AB           1917   ;         function check_bound
05AB           1918   ;        -----------------------------------------
05AB           1919   _check_bound:
05AB AA82      1920            mov     r2,dpl
05AD AB83      1921            mov     r3,dph
05AF           1922   ;        main.c:519: if(d1>14000||d2>14000)      return 1;
05AF C3        1923            clr     c
05B0 74B0      1924            mov     a,#0xB0
05B2 9A        1925            subb    a,r2
05B3 74B6      1926            mov     a,#(0x36 ^ 0x80)
05B5 8BF0      1927            mov     b,r3
05B7 63F080    1928            xrl     b,#0x80
05BA 95F0      1929            subb    a,b
05BC 4000      1930            jc      L022001?
05BE 74B0      1931            mov     a,#0xB0
05C0 9590      1932            subb    a,_check_bound_PARM_2
05C2 74B6      1933            mov     a,#(0x36 ^ 0x80)
05C4 8591F0    1934            mov     b,(_check_bound_PARM_2 + 1)
05C7 63F080    1935            xrl     b,#0x80
05CA 95F0      1936            subb    a,b
05CC 5000      1937            jnc     L022002?
05CE           1938   L022001?:
05CE 900001    1939            mov     dptr,#0x0001
05D1           1940   ;        main.c:520: else return 0;
05D1 22        1941            ret
05D2           1942   L022002?:
05D2 900000    1943            mov     dptr,#0x0000
05D5 22        1944            ret
05D6           1945   ;------------------------------------------------------------
05D6           1946   ;Allocation info for local variables in function 'Init_all'
05D6           1947   ;------------------------------------------------------------
05D6           1948   ;------------------------------------------------------------
05D6           1949   ;        main.c:523: void Init_all(){
05D6           1950   ;        -----------------------------------------
05D6           1951   ;         function Init_all
05D6           1952   ;        -----------------------------------------
05D6           1953   _Init_all:
05D6           1954   ;        main.c:525: Set_Pin_Output(0x24);
05D6 758224    1955            mov     dpl,#0x24
05D9 120000    1956            lcall   _Set_Pin_Output
05DC           1957   ;        main.c:526: Set_Pin_Output(0x23);
05DC 758223    1958            mov     dpl,#0x23
05DF 120000    1959            lcall   _Set_Pin_Output
05E2           1960   ;        main.c:527: Set_Pin_Output(0x22);
05E2 758222    1961            mov     dpl,#0x22
05E5 120000    1962            lcall   _Set_Pin_Output
05E8           1963   ;        main.c:528: Set_Pin_Output(0x21);
05E8 758221    1964            mov     dpl,#0x21
05EB 120000    1965            lcall   _Set_Pin_Output
05EE           1966   ;        main.c:529: Set_Pin_Output(0x17);
05EE 758217    1967            mov     dpl,#0x17
05F1 120000    1968            lcall   _Set_Pin_Output
05F4           1969   ;        main.c:530: Set_Pin_Output(0x16);
05F4 758216    1970            mov     dpl,#0x16
05F7 120000    1971            lcall   _Set_Pin_Output
05FA           1972   ;        main.c:531: Set_Pin_Output(0x15);
05FA 758215    1973            mov     dpl,#0x15
05FD 120000    1974            lcall   _Set_Pin_Output
0600           1975   ;        main.c:532: Set_Pin_Input(0x02);
0600 758202    1976            mov     dpl,#0x02
0603 120000    1977            lcall   _Set_Pin_Input
0606           1978   ;        main.c:534: InitPinADC(1,3);
0606 75E003    1979            mov     _InitPinADC_PARM_2,#0x03
0609 758201    1980            mov     dpl,#0x01
060C 120000    1981            lcall   _InitPinADC
060F           1982   ;        main.c:535: InitPinADC(1,4);
060F 75E004    1983            mov     _InitPinADC_PARM_2,#0x04
0612 758201    1984            mov     dpl,#0x01
0615 120000    1985            lcall   _InitPinADC
0618           1986   ;        main.c:536: InitADC();
0618 120000    1987            lcall   _InitADC
061B           1988   ;        main.c:538: TMOD&=0b_1111_0000; 
061B 5389F0    1989            anl     _TMOD,#0xF0
061E           1990   ;        main.c:539: TMOD|=0b_0000_0001; 
061E 438901    1991            orl     _TMOD,#0x01
0621           1992   ;        main.c:540: TR0=0; 
0621 C28C      1993            clr     _TR0
0623           1994   ;        main.c:542: Servo_arm=0;
0623 C296      1995            clr     _P1_6
0625           1996   ;        main.c:543: Servo_base=0;
0625 C297      1997            clr     _P1_7
0627           1998   ;        main.c:544: Magnet = 0;
0627 C295      1999            clr     _P1_5
0629           2000   ;        main.c:545: return;
0629 22        2001            ret
062A           2002   ;------------------------------------------------------------
062A           2003   ;Allocation info for local variables in function 'Auto_mode_slave'
062A           2004   ;------------------------------------------------------------
062A           2005   ;count                     Allocated to registers r2 r3 
062A           2006   ;c                         Allocated to registers r4 
062A           2007   ;------------------------------------------------------------
062A           2008   ;        main.c:548: void Auto_mode_slave(){
062A           2009   ;        -----------------------------------------
062A           2010   ;         function Auto_mode_slave
062A           2011   ;        -----------------------------------------
062A           2012   _Auto_mode_slave:
062A           2013   ;        main.c:552: printf("auto mode\r\n");
062A 7448      2014            mov     a,#__str_3
062C C0E0      2015            push    acc
062E 74D3      2016            mov     a,#(__str_3 >> 8)
0630 C0E0      2017            push    acc
0632 7480      2018            mov     a,#0x80
0634 C0E0      2019            push    acc
0636 120000    2020            lcall   _printf
0639 1581      2021            dec     sp
063B 1581      2022            dec     sp
063D 1581      2023            dec     sp
063F           2024   ;        main.c:553: while(count < 20){
063F 7A00      2025            mov     r2,#0x00
0641 7B00      2026            mov     r3,#0x00
0643           2027   L024014?:
0643 C3        2028            clr     c
0644 EA        2029            mov     a,r2
0645 9414      2030            subb    a,#0x14
0647 EB        2031            mov     a,r3
0648 6480      2032            xrl     a,#0x80
064A 9480      2033            subb    a,#0x80
064C 4000      2034            jc      L024027?
064E 22        2035            ret
064F           2036   L024027?:
064F           2037   ;        main.c:554: printf("automode freq: %f\r\n",freq100/100.0);
064F 859882    2038            mov     dpl,_freq100
0652 859983    2039            mov     dph,(_freq100 + 1)
0655 859AF0    2040            mov     b,(_freq100 + 2)
0658 E59B      2041            mov     a,(_freq100 + 3)
065A C002      2042            push    ar2
065C C003      2043            push    ar3
065E 120000    2044            lcall   ___slong2fs
0661 AC82      2045            mov     r4,dpl
0663 AD83      2046            mov     r5,dph
0665 AEF0      2047            mov     r6,b
0667 FF        2048            mov     r7,a
0668 E4        2049            clr     a
0669 C0E0      2050            push    acc
066B C0E0      2051            push    acc
066D 74C8      2052            mov     a,#0xC8
066F C0E0      2053            push    acc
0671 7442      2054            mov     a,#0x42
0673 C0E0      2055            push    acc
0675 8C82      2056            mov     dpl,r4
0677 8D83      2057            mov     dph,r5
0679 8EF0      2058            mov     b,r6
067B EF        2059            mov     a,r7
067C 120000    2060            lcall   ___fsdiv
067F AC82      2061            mov     r4,dpl
0681 AD83      2062            mov     r5,dph
0683 AEF0      2063            mov     r6,b
0685 FF        2064            mov     r7,a
0686 E581      2065            mov     a,sp
0688 24FC      2066            add     a,#0xfc
068A F581      2067            mov     sp,a
068C C004      2068            push    ar4
068E C005      2069            push    ar5
0690 C006      2070            push    ar6
0692 C007      2071            push    ar7
0694 7488      2072            mov     a,#__str_4
0696 C0E0      2073            push    acc
0698 74D4      2074            mov     a,#(__str_4 >> 8)
069A C0E0      2075            push    acc
069C 7480      2076            mov     a,#0x80
069E C0E0      2077            push    acc
06A0 120000    2078            lcall   _printf
06A3 E581      2079            mov     a,sp
06A5 24F9      2080            add     a,#0xf9
06A7 F581      2081            mov     sp,a
06A9           2082   ;        main.c:555: if(RXU1()){
06A9 120000    2083            lcall   _RXU1
06AC D003      2084            pop     ar3
06AE D002      2085            pop     ar2
06B0 4000      2086            jc      L024028?
06B2 020000    2087            ljmp    L024011?
06B5           2088   L024028?:
06B5           2089   ;        main.c:556: c=getchar1();       
06B5 C002      2090            push    ar2
06B7 C003      2091            push    ar3
06B9 120000    2092            lcall   _getchar1
06BC AC82      2093            mov     r4,dpl
06BE D003      2094            pop     ar3
06C0 D002      2095            pop     ar2
06C2           2096   ;        main.c:557: if(c=='!'){
06C2 BC2148    2097            cjne    r4,#0x21,L024029?
06C5 8000      2098            sjmp    L024030?
06C7           2099   L024029?:
06C7 020000    2100            ljmp    L024008?
06CA           2101   L024030?:
06CA           2102   ;        main.c:558: getstr1(buff, sizeof(buff)-1);
06CA 759813    2103            mov     _getstr1_PARM_2,#0x13
06CD 904558    2104            mov     dptr,#_buff
06D0 75F040    2105            mov     b,#0x40
06D3 C002      2106            push    ar2
06D5 C003      2107            push    ar3
06D7 120000    2108            lcall   _getstr1
06DA           2109   ;        main.c:559: if(strlen(buff)==11){
06DA 904558    2110            mov     dptr,#_buff
06DD 75F040    2111            mov     b,#0x40
06E0 120000    2112            lcall   _strlen
06E3 AD82      2113            mov     r5,dpl
06E5 AE83      2114            mov     r6,dph
06E7 D003      2115            pop     ar3
06E9 D002      2116            pop     ar2
06EB BD0B48    2117            cjne    r5,#0x0B,L024002?
06EE BE0048    2118            cjne    r6,#0x00,L024002?
06F1           2119   ;        main.c:560: printf("master_messgae_auto_mode: %s\r\n", buff);
06F1 C002      2120            push    ar2
06F3 C003      2121            push    ar3
06F5 7458      2122            mov     a,#_buff
06F7 C0E0      2123            push    acc
06F9 7445      2124            mov     a,#(_buff >> 8)
06FB C0E0      2125            push    acc
06FD 7440      2126            mov     a,#0x40
06FF C0E0      2127            push    acc
0701 7488      2128            mov     a,#__str_5
0703 C0E0      2129            push    acc
0705 74D6      2130            mov     a,#(__str_5 >> 8)
0707 C0E0      2131            push    acc
0709 7480      2132            mov     a,#0x80
070B C0E0      2133            push    acc
070D 120000    2134            lcall   _printf
0710 E581      2135            mov     a,sp
0712 24FA      2136            add     a,#0xfa
0714 F581      2137            mov     sp,a
0716 D003      2138            pop     ar3
0718 D002      2139            pop     ar2
071A 020000    2140            ljmp    L024011?
071D           2141   L024002?:
071D           2142   ;        main.c:563: printf("bad_message_auto_mode: %s\r\n", buff);
071D C002      2143            push    ar2
071F C003      2144            push    ar3
0721 7458      2145            mov     a,#_buff
0723 C0E0      2146            push    acc
0725 7445      2147            mov     a,#(_buff >> 8)
0727 C0E0      2148            push    acc
0729 7440      2149            mov     a,#0x40
072B C0E0      2150            push    acc
072D 74C8      2151            mov     a,#__str_6
072F C0E0      2152            push    acc
0731 74D6      2153            mov     a,#(__str_6 >> 8)
0733 C0E0      2154            push    acc
0735 7480      2155            mov     a,#0x80
0737 C0E0      2156            push    acc
0739 120000    2157            lcall   _printf
073C E581      2158            mov     a,sp
073E 24FA      2159            add     a,#0xfa
0740 F581      2160            mov     sp,a
0742 D003      2161            pop     ar3
0744 D002      2162            pop     ar2
0746 8000      2163            sjmp    L024011?
0748           2164   L024008?:
0748           2165   ;        main.c:566: else if(c=='@'){
0748 BC4008    2166            cjne    r4,#0x40,L024005?
074B           2167   ;        main.c:567: sprintf(buff, "1,%02d\n", count);
074B C002      2168            push    ar2
074D C003      2169            push    ar3
074F C002      2170            push    ar2
0751 C003      2171            push    ar3
0753 7448      2172            mov     a,#__str_7
0755 C0E0      2173            push    acc
0757 74D7      2174            mov     a,#(__str_7 >> 8)
0759 C0E0      2175            push    acc
075B 7480      2176            mov     a,#0x80
075D C0E0      2177            push    acc
075F 7458      2178            mov     a,#_buff
0761 C0E0      2179            push    acc
0763 7445      2180            mov     a,#(_buff >> 8)
0765 C0E0      2181            push    acc
0767 7440      2182            mov     a,#0x40
0769 C0E0      2183            push    acc
076B 120000    2184            lcall   _sprintf
076E E581      2185            mov     a,sp
0770 24F8      2186            add     a,#0xf8
0772 F581      2187            mov     sp,a
0774           2188   ;        main.c:568: waitms(5); 
0774 900005    2189            mov     dptr,#0x0005
0777 120000    2190            lcall   _waitms
077A           2191   ;        main.c:569: sendstr1(buff);
077A 904558    2192            mov     dptr,#_buff
077D 75F040    2193            mov     b,#0x40
0780 120000    2194            lcall   _sendstr1
0783 D003      2195            pop     ar3
0785 D002      2196            pop     ar2
0787 8000      2197            sjmp    L024011?
0789           2198   L024005?:
0789           2199   ;        main.c:572: printf("no message\r\n");
0789 C002      2200            push    ar2
078B C003      2201            push    ar3
078D 74C8      2202            mov     a,#__str_8
078F C0E0      2203            push    acc
0791 74D7      2204            mov     a,#(__str_8 >> 8)
0793 C0E0      2205            push    acc
0795 7480      2206            mov     a,#0x80
0797 C0E0      2207            push    acc
0799 120000    2208            lcall   _printf
079C 1581      2209            dec     sp
079E 1581      2210            dec     sp
07A0 1581      2211            dec     sp
07A2 D003      2212            pop     ar3
07A4 D002      2213            pop     ar2
07A6           2214   L024011?:
07A6           2215   ;        main.c:575: if (freq100>5350){
07A6 C3        2216            clr     c
07A7 74E6      2217            mov     a,#0xE6
07A9 9598      2218            subb    a,_freq100
07AB 7414      2219            mov     a,#0x14
07AD 9599      2220            subb    a,(_freq100 + 1)
07AF E4        2221            clr     a
07B0 959A      2222            subb    a,(_freq100 + 2)
07B2 E4        2223            clr     a
07B3 6480      2224            xrl     a,#0x80
07B5 859BF0    2225            mov     b,(_freq100 + 3)
07B8 63F080    2226            xrl     b,#0x80
07BB 95F0      2227            subb    a,b
07BD 4000      2228            jc      L024035?
07BF 020000    2229            ljmp    L024014?
07C2           2230   L024035?:
07C2           2231   ;        main.c:576: servo_pick();
07C2 C002      2232            push    ar2
07C4 C003      2233            push    ar3
07C6 120000    2234            lcall   _servo_pick
07C9 D003      2235            pop     ar3
07CB D002      2236            pop     ar2
07CD           2237   ;        main.c:577: count++;
07CD 0A        2238            inc     r2
07CE BA0048    2239            cjne    r2,#0x00,L024036?
07D1 0B        2240            inc     r3
07D2           2241   L024036?:
07D2 020000    2242            ljmp    L024014?
07D5           2243   ;------------------------------------------------------------
07D5           2244   ;Allocation info for local variables in function 'main'
07D5           2245   ;------------------------------------------------------------
07D5           2246   ;c                         Allocated to registers r2 
07D5           2247   ;vx_error                  Allocated with name '_main_vx_error_1_142'
07D5           2248   ;vy_error                  Allocated with name '_main_vy_error_1_142'
07D5           2249   ;vx_err                    Allocated with name '_main_vx_err_1_142'
07D5           2250   ;vy_err                    Allocated with name '_main_vy_err_1_142'
07D5           2251   ;vx                        Allocated with name '_main_vx_1_142'
07D5           2252   ;vy                        Allocated with name '_main_vy_1_142'
07D5           2253   ;threshold                 Allocated to registers 
07D5           2254   ;motor_pwm                 Allocated to registers 
07D5           2255   ;pick                      Allocated with name '_main_pick_1_142'
07D5           2256   ;auto_mode                 Allocated with name '_main_auto_mode_1_142'
07D5           2257   ;pick_done                 Allocated to registers 
07D5           2258   ;bound_flag                Allocated to registers 
07D5           2259   ;------------------------------------------------------------
07D5           2260   ;        main.c:582: void main (void)
07D5           2261   ;        -----------------------------------------
07D5           2262   ;         function main
07D5           2263   ;        -----------------------------------------
07D5           2264   _main:
07D5           2265   ;        main.c:586: int vx = 0, vy = 0; 
07D5           2266   ;        main.c:589: int pick = 0;
07D5 E4        2267            clr     a
07D6 F5D8      2268            mov     _main_vx_1_142,a
07D8 F5D9      2269            mov     (_main_vx_1_142 + 1),a
07DA F518      2270            mov     _main_vy_1_142,a
07DC F519      2271            mov     (_main_vy_1_142 + 1),a
07DE F568      2272            mov     _main_pick_1_142,a
07E0 F569      2273            mov     (_main_pick_1_142 + 1),a
07E2           2274   ;        main.c:590: int auto_mode = 1;
07E2 75B801    2275            mov     _main_auto_mode_1_142,#0x01
07E5 E4        2276            clr     a
07E6 F5B9      2277            mov     (_main_auto_mode_1_142 + 1),a
07E8           2278   ;        main.c:594: Init_all();
07E8 120000    2279            lcall   _Init_all
07EB           2280   ;        main.c:595: waitms(500);
07EB 9001F4    2281            mov     dptr,#0x01F4
07EE 120000    2282            lcall   _waitms
07F1           2283   ;        main.c:596: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
07F1 7488      2284            mov     a,#__str_9
07F3 C0E0      2285            push    acc
07F5 74D8      2286            mov     a,#(__str_9 >> 8)
07F7 C0E0      2287            push    acc
07F9 7480      2288            mov     a,#0x80
07FB C0E0      2289            push    acc
07FD 120000    2290            lcall   _printf
0800 1581      2291            dec     sp
0802 1581      2292            dec     sp
0804 1581      2293            dec     sp
0806           2294   ;        main.c:597: UART1_Init(9600);
0806 902580    2295            mov     dptr,#0x2580
0809 E4        2296            clr     a
080A F5F0      2297            mov     b,a
080C 120000    2298            lcall   _UART1_Init
080F           2299   ;        main.c:599: ReceptionOff();
080F 120000    2300            lcall   _ReceptionOff
0812           2301   ;        main.c:602: SendATCommand("AT+VER\r\n");
0812 90D8C8    2302            mov     dptr,#__str_10
0815 75F080    2303            mov     b,#0x80
0818 120000    2304            lcall   _SendATCommand
081B           2305   ;        main.c:603: SendATCommand("AT+BAUD\r\n");
081B 90D908    2306            mov     dptr,#__str_11
081E 75F080    2307            mov     b,#0x80
0821 120000    2308            lcall   _SendATCommand
0824           2309   ;        main.c:604: SendATCommand("AT+RFID\r\n");
0824 90D948    2310            mov     dptr,#__str_12
0827 75F080    2311            mov     b,#0x80
082A 120000    2312            lcall   _SendATCommand
082D           2313   ;        main.c:605: SendATCommand("AT+DVID\r\n");
082D 90D988    2314            mov     dptr,#__str_13
0830 75F080    2315            mov     b,#0x80
0833 120000    2316            lcall   _SendATCommand
0836           2317   ;        main.c:606: SendATCommand("AT+RFC002\r\n");
0836 90D9C8    2318            mov     dptr,#__str_14
0839 75F080    2319            mov     b,#0x80
083C 120000    2320            lcall   _SendATCommand
083F           2321   ;        main.c:607: SendATCommand("AT+POWE\r\n");
083F 90DA08    2322            mov     dptr,#__str_15
0842 75F080    2323            mov     b,#0x80
0845 120000    2324            lcall   _SendATCommand
0848           2325   ;        main.c:608: SendATCommand("AT+CLSS\r\n");
0848 90DA48    2326            mov     dptr,#__str_16
084B 75F080    2327            mov     b,#0x80
084E 120000    2328            lcall   _SendATCommand
0851           2329   ;        main.c:609: SendATCommand("AT+DVIDEFEF\r\n");  
0851 90DA88    2330            mov     dptr,#__str_17
0854 75F080    2331            mov     b,#0x80
0857 120000    2332            lcall   _SendATCommand
085A           2333   ;        main.c:612: L_bridge_1 = 0; 
085A C2A1      2334            clr     _P2_1
085C           2335   ;        main.c:613: L_bridge_2 = 0; 
085C C2A2      2336            clr     _P2_2
085E           2337   ;        main.c:614: R_bridge_1 = 0; 
085E C2A4      2338            clr     _P2_4
0860           2339   ;        main.c:615: R_bridge_2 = 0; 
0860 C2A3      2340            clr     _P2_3
0862           2341   ;        main.c:617: while(1)
0862           2342   L025053?:
0862           2343   ;        main.c:620: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
0862 758209    2344            mov     dpl,#0x09
0865 120000    2345            lcall   _ADC_at_Pin
0868 858218    2346            mov     _d1,dpl
086B 858319    2347            mov     (_d1 + 1),dph
086E           2348   ;        main.c:621: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
086E 75820A    2349            mov     dpl,#0x0A
0871 120000    2350            lcall   _ADC_at_Pin
0874 8582D8    2351            mov     _d2,dpl
0877 8583D9    2352            mov     (_d2 + 1),dph
087A           2353   ;        main.c:622: bound_flag = check_bound(d1,d2);
087A 85D890    2354            mov     _check_bound_PARM_2,_d2
087D 85D991    2355            mov     (_check_bound_PARM_2 + 1),(_d2 + 1)
0880 851882    2356            mov     dpl,_d1
0883 851983    2357            mov     dph,(_d1 + 1)
0886 120000    2358            lcall   _check_bound
0889           2359   ;        main.c:626: if(pick==1){
0889 7401      2360            mov     a,#0x01
088B B56808    2361            cjne    a,_main_pick_1_142,L025080?
088E E4        2362            clr     a
088F B56908    2363            cjne    a,(_main_pick_1_142 + 1),L025080?
0892 8000      2364            sjmp    L025081?
0894           2365   L025080?:
0894 8000      2366            sjmp    L025002?
0896           2367   L025081?:
0896           2368   ;        main.c:627: servo_pick();
0896 120000    2369            lcall   _servo_pick
0899           2370   ;        main.c:628: pick = 0;
0899 E4        2371            clr     a
089A F568      2372            mov     _main_pick_1_142,a
089C F569      2373            mov     (_main_pick_1_142 + 1),a
089E           2374   L025002?:
089E           2375   ;        main.c:631: if(auto_mode){
089E E5B8      2376            mov     a,_main_auto_mode_1_142
08A0 45B9      2377            orl     a,(_main_auto_mode_1_142 + 1)
08A2 6000      2378            jz      L025004?
08A4           2379   ;        main.c:632: Auto_mode_slave();
08A4 120000    2380            lcall   _Auto_mode_slave
08A7           2381   L025004?:
08A7           2382   ;        main.c:636: if(RXU1()) // Something has arrived
08A7 120000    2383            lcall   _RXU1
08AA 5000      2384            jnc     L025053?
08AC           2385   ;        main.c:638: c=getchar1();
08AC 120000    2386            lcall   _getchar1
08AF AA82      2387            mov     r2,dpl
08B1           2388   ;        main.c:640: if(c=='!') // Master is sending message
08B1 BA2108    2389            cjne    r2,#0x21,L025084?
08B4 8000      2390            sjmp    L025085?
08B6           2391   L025084?:
08B6 020000    2392            ljmp    L025048?
08B9           2393   L025085?:
08B9           2394   ;        main.c:642: getstr1(buff, sizeof(buff)-1);
08B9 759813    2395            mov     _getstr1_PARM_2,#0x13
08BC 904558    2396            mov     dptr,#_buff
08BF 75F040    2397            mov     b,#0x40
08C2 120000    2398            lcall   _getstr1
08C5           2399   ;        main.c:643: if(strlen(buff)==11)
08C5 904558    2400            mov     dptr,#_buff
08C8 75F040    2401            mov     b,#0x40
08CB 120000    2402            lcall   _strlen
08CE AB82      2403            mov     r3,dpl
08D0 AC83      2404            mov     r4,dph
08D2 BB0BC8    2405            cjne    r3,#0x0B,L025086?
08D5 BC00C8    2406            cjne    r4,#0x00,L025086?
08D8 8000      2407            sjmp    L025087?
08DA           2408   L025086?:
08DA 020000    2409            ljmp    L025043?
08DD           2410   L025087?:
08DD           2411   ;        main.c:645: printf("Master says: %s\r\n", buff);
08DD 7458      2412            mov     a,#_buff
08DF C0E0      2413            push    acc
08E1 7445      2414            mov     a,#(_buff >> 8)
08E3 C0E0      2415            push    acc
08E5 7440      2416            mov     a,#0x40
08E7 C0E0      2417            push    acc
08E9 7488      2418            mov     a,#__str_18
08EB C0E0      2419            push    acc
08ED 74DD      2420            mov     a,#(__str_18 >> 8)
08EF C0E0      2421            push    acc
08F1 7480      2422            mov     a,#0x80
08F3 C0E0      2423            push    acc
08F5 120000    2424            lcall   _printf
08F8 E581      2425            mov     a,sp
08FA 24FA      2426            add     a,#0xfa
08FC F581      2427            mov     sp,a
08FE           2428   ;        main.c:646: sscanf(buff, "%03d,%03d,%01d,%d01", &vx, &vy, &pick, &auto_mode);
08FE 74B8      2429            mov     a,#_main_auto_mode_1_142
0900 C0E0      2430            push    acc
0902 74BB      2431            mov     a,#(_main_auto_mode_1_142 >> 8)
0904 C0E0      2432            push    acc
0906 7440      2433            mov     a,#0x40
0908 C0E0      2434            push    acc
090A 7468      2435            mov     a,#_main_pick_1_142
090C C0E0      2436            push    acc
090E 74BB      2437            mov     a,#(_main_pick_1_142 >> 8)
0910 C0E0      2438            push    acc
0912 7440      2439            mov     a,#0x40
0914 C0E0      2440            push    acc
0916 7418      2441            mov     a,#_main_vy_1_142
0918 C0E0      2442            push    acc
091A 74BB      2443            mov     a,#(_main_vy_1_142 >> 8)
091C C0E0      2444            push    acc
091E 7440      2445            mov     a,#0x40
0920 C0E0      2446            push    acc
0922 74D8      2447            mov     a,#_main_vx_1_142
0924 C0E0      2448            push    acc
0926 74BA      2449            mov     a,#(_main_vx_1_142 >> 8)
0928 C0E0      2450            push    acc
092A 7440      2451            mov     a,#0x40
092C C0E0      2452            push    acc
092E 74C8      2453            mov     a,#__str_19
0930 C0E0      2454            push    acc
0932 74DD      2455            mov     a,#(__str_19 >> 8)
0934 C0E0      2456            push    acc
0936 7480      2457            mov     a,#0x80
0938 C0E0      2458            push    acc
093A 7458      2459            mov     a,#_buff
093C C0E0      2460            push    acc
093E 7445      2461            mov     a,#(_buff >> 8)
0940 C0E0      2462            push    acc
0942 7440      2463            mov     a,#0x40
0944 C0E0      2464            push    acc
0946 120000    2465            lcall   _sscanf
0949 E581      2466            mov     a,sp
094B 24EE      2467            add     a,#0xee
094D F581      2468            mov     sp,a
094F           2469   ;        main.c:647: printf("Joystick Received: Vx = %03d, Vy = %03d, Order = %01d, Auto = %01d\r\n", vx, vy, pick, auto_mode);
094F C0B8      2470            push    _main_auto_mode_1_142
0951 C0B9      2471            push    (_main_auto_mode_1_142 + 1)
0953 C068      2472            push    _main_pick_1_142
0955 C069      2473            push    (_main_pick_1_142 + 1)
0957 C018      2474            push    _main_vy_1_142
0959 C019      2475            push    (_main_vy_1_142 + 1)
095B C0D8      2476            push    _main_vx_1_142
095D C0D9      2477            push    (_main_vx_1_142 + 1)
095F 7448      2478            mov     a,#__str_20
0961 C0E0      2479            push    acc
0963 74DE      2480            mov     a,#(__str_20 >> 8)
0965 C0E0      2481            push    acc
0967 7480      2482            mov     a,#0x80
0969 C0E0      2483            push    acc
096B 120000    2484            lcall   _printf
096E E581      2485            mov     a,sp
0970 24F5      2486            add     a,#0xf5
0972 F581      2487            mov     sp,a
0974           2488   ;        main.c:650: vx_error = abs(vx-vx_thres)*100/vx_thres; 
0974 E5D8      2489            mov     a,_main_vx_1_142
0976 C3        2490            clr     c
0977 9598      2491            subb    a,_vx_thres
0979 F582      2492            mov     dpl,a
097B E5D9      2493            mov     a,(_main_vx_1_142 + 1)
097D 9599      2494            subb    a,(_vx_thres + 1)
097F F583      2495            mov     dph,a
0981 120000    2496            lcall   _abs
0984 858200    2497            mov     __mulint_PARM_2,dpl
0987 858301    2498            mov     (__mulint_PARM_2 + 1),dph
098A 900064    2499            mov     dptr,#0x0064
098D 120000    2500            lcall   __mulint
0990 859800    2501            mov     __divsint_PARM_2,_vx_thres
0993 859901    2502            mov     (__divsint_PARM_2 + 1),(_vx_thres + 1)
0996 120000    2503            lcall   __divsint
0999 8582A8    2504            mov     _main_vx_error_1_142,dpl
099C 8583A9    2505            mov     (_main_vx_error_1_142 + 1),dph
099F           2506   ;        main.c:651: vy_error = abs(vy-vy_thres)*100/vy_thres; 
099F E518      2507            mov     a,_main_vy_1_142
09A1 C3        2508            clr     c
09A2 9558      2509            subb    a,_vy_thres
09A4 F582      2510            mov     dpl,a
09A6 E519      2511            mov     a,(_main_vy_1_142 + 1)
09A8 9559      2512            subb    a,(_vy_thres + 1)
09AA F583      2513            mov     dph,a
09AC 120000    2514            lcall   _abs
09AF 858200    2515            mov     __mulint_PARM_2,dpl
09B2 858301    2516            mov     (__mulint_PARM_2 + 1),dph
09B5 900064    2517            mov     dptr,#0x0064
09B8 120000    2518            lcall   __mulint
09BB 855800    2519            mov     __divsint_PARM_2,_vy_thres
09BE 855901    2520            mov     (__divsint_PARM_2 + 1),(_vy_thres + 1)
09C1 120000    2521            lcall   __divsint
09C4 8582F8    2522            mov     _main_vy_error_1_142,dpl
09C7 8583F9    2523            mov     (_main_vy_error_1_142 + 1),dph
09CA           2524   ;        main.c:652: vx_err = vx-vx_thres; 
09CA E5D8      2525            mov     a,_main_vx_1_142
09CC C3        2526            clr     c
09CD 9598      2527            subb    a,_vx_thres
09CF F548      2528            mov     _main_vx_err_1_142,a
09D1 E5D9      2529            mov     a,(_main_vx_1_142 + 1)
09D3 9599      2530            subb    a,(_vx_thres + 1)
09D5 F549      2531            mov     (_main_vx_err_1_142 + 1),a
09D7           2532   ;        main.c:653: vy_err = vy-vy_thres; 
09D7 E518      2533            mov     a,_main_vy_1_142
09D9 C3        2534            clr     c
09DA 9558      2535            subb    a,_vy_thres
09DC F598      2536            mov     _main_vy_err_1_142,a
09DE E519      2537            mov     a,(_main_vy_1_142 + 1)
09E0 9559      2538            subb    a,(_vy_thres + 1)
09E2 F599      2539            mov     (_main_vy_err_1_142 + 1),a
09E4           2540   ;        main.c:654: pwm_left = 0; 
09E4 751800    2541            mov     _pwm_left,#0x00
09E7           2542   ;        main.c:655: pwm_right = 0; 
09E7 75D800    2543            mov     _pwm_right,#0x00
09EA           2544   ;        main.c:657: if ((vy_error>5) && (vx_error<5)){
09EA C3        2545            clr     c
09EB 7405      2546            mov     a,#0x05
09ED 95F8      2547            subb    a,_main_vy_error_1_142
09EF E4        2548            clr     a
09F0 6480      2549            xrl     a,#0x80
09F2 85F9F0    2550            mov     b,(_main_vy_error_1_142 + 1)
09F5 63F080    2551            xrl     b,#0x80
09F8 95F0      2552            subb    a,b
09FA E4        2553            clr     a
09FB 33        2554            rlc     a
09FC FF        2555            mov     r7,a
09FD 6000      2556            jz      L025009?
09FF C3        2557            clr     c
0A00 E5A8      2558            mov     a,_main_vx_error_1_142
0A02 9405      2559            subb    a,#0x05
0A04 E5A9      2560            mov     a,(_main_vx_error_1_142 + 1)
0A06 6480      2561            xrl     a,#0x80
0A08 9480      2562            subb    a,#0x80
0A0A 5000      2563            jnc     L025009?
0A0C           2564   ;        main.c:658: pwm_left = vy_error; 
0A0C ADF8      2565            mov     r5,_main_vy_error_1_142
0A0E 8D18      2566            mov     _pwm_left,r5
0A10           2567   ;        main.c:659: pwm_right = vy_error; 
0A10 8DD8      2568            mov     _pwm_right,r5
0A12           2569   ;        main.c:660: if (vy_err > 0){ //move forward
0A12 C3        2570            clr     c
0A13 E4        2571            clr     a
0A14 9598      2572            subb    a,_main_vy_err_1_142
0A16 E4        2573            clr     a
0A17 6480      2574            xrl     a,#0x80
0A19 8599F0    2575            mov     b,(_main_vy_err_1_142 + 1)
0A1C 63F080    2576            xrl     b,#0x80
0A1F 95F0      2577            subb    a,b
0A21 5000      2578            jnc     L025006?
0A23           2579   ;        main.c:661: L_motor_dir = 0; 
0A23 759800    2580            mov     _L_motor_dir,#0x00
0A26           2581   ;        main.c:662: R_motor_dir = 0; 
0A26 755800    2582            mov     _R_motor_dir,#0x00
0A29 8000      2583            sjmp    L025009?
0A2B           2584   L025006?:
0A2B           2585   ;        main.c:665: L_motor_dir = 1; 
0A2B 759801    2586            mov     _L_motor_dir,#0x01
0A2E           2587   ;        main.c:666: R_motor_dir = 1; 
0A2E 755801    2588            mov     _R_motor_dir,#0x01
0A31           2589   L025009?:
0A31           2590   ;        main.c:669: if ((vx_error>5)&&(vy_error<5)){
0A31 C3        2591            clr     c
0A32 7405      2592            mov     a,#0x05
0A34 95A8      2593            subb    a,_main_vx_error_1_142
0A36 E4        2594            clr     a
0A37 6480      2595            xrl     a,#0x80
0A39 85A9F0    2596            mov     b,(_main_vx_error_1_142 + 1)
0A3C 63F080    2597            xrl     b,#0x80
0A3F 95F0      2598            subb    a,b
0A41 E4        2599            clr     a
0A42 33        2600            rlc     a
0A43 FD        2601            mov     r5,a
0A44 6000      2602            jz      L025015?
0A46 C3        2603            clr     c
0A47 E5F8      2604            mov     a,_main_vy_error_1_142
0A49 9405      2605            subb    a,#0x05
0A4B E5F9      2606            mov     a,(_main_vy_error_1_142 + 1)
0A4D 6480      2607            xrl     a,#0x80
0A4F 9480      2608            subb    a,#0x80
0A51 5000      2609            jnc     L025015?
0A53           2610   ;        main.c:670: pwm_left = vx_error; 
0A53 AEA8      2611            mov     r6,_main_vx_error_1_142
0A55 8E18      2612            mov     _pwm_left,r6
0A57           2613   ;        main.c:671: pwm_right = vx_error; 
0A57 8ED8      2614            mov     _pwm_right,r6
0A59           2615   ;        main.c:672: if (vx_err > 0){ //turn right
0A59 C3        2616            clr     c
0A5A E4        2617            clr     a
0A5B 9548      2618            subb    a,_main_vx_err_1_142
0A5D E4        2619            clr     a
0A5E 6480      2620            xrl     a,#0x80
0A60 8549F0    2621            mov     b,(_main_vx_err_1_142 + 1)
0A63 63F080    2622            xrl     b,#0x80
0A66 95F0      2623            subb    a,b
0A68 5000      2624            jnc     L025012?
0A6A           2625   ;        main.c:673: L_motor_dir = 1; 
0A6A 759801    2626            mov     _L_motor_dir,#0x01
0A6D           2627   ;        main.c:674: R_motor_dir = 0; 
0A6D 755800    2628            mov     _R_motor_dir,#0x00
0A70 8000      2629            sjmp    L025015?
0A72           2630   L025012?:
0A72           2631   ;        main.c:677: L_motor_dir = 0; 
0A72 759800    2632            mov     _L_motor_dir,#0x00
0A75           2633   ;        main.c:678: R_motor_dir = 1; 
0A75 755801    2634            mov     _R_motor_dir,#0x01
0A78           2635   L025015?:
0A78           2636   ;        main.c:681: if ((vx_error>5)&&(vy_error)>5){
0A78 ED        2637            mov     a,r5
0A79 7000      2638            jnz     L025094?
0A7B 020000    2639            ljmp    L025053?
0A7E           2640   L025094?:
0A7E EF        2641            mov     a,r7
0A7F 7000      2642            jnz     L025095?
0A81 020000    2643            ljmp    L025053?
0A84           2644   L025095?:
0A84           2645   ;        main.c:683: if (vy_err>0){
0A84 C3        2646            clr     c
0A85 E4        2647            clr     a
0A86 9598      2648            subb    a,_main_vy_err_1_142
0A88 E4        2649            clr     a
0A89 6480      2650            xrl     a,#0x80
0A8B 8599F0    2651            mov     b,(_main_vy_err_1_142 + 1)
0A8E 63F080    2652            xrl     b,#0x80
0A91 95F0      2653            subb    a,b
0A93 4000      2654            jc      L025096?
0A95 020000    2655            ljmp    L025027?
0A98           2656   L025096?:
0A98           2657   ;        main.c:684: L_motor_dir = 0; 
0A98 759800    2658            mov     _L_motor_dir,#0x00
0A9B           2659   ;        main.c:685: R_motor_dir = 0; 
0A9B 755800    2660            mov     _R_motor_dir,#0x00
0A9E           2661   ;        main.c:687: if (vx_err>0){
0A9E C3        2662            clr     c
0A9F E4        2663            clr     a
0AA0 9548      2664            subb    a,_main_vx_err_1_142
0AA2 E4        2665            clr     a
0AA3 6480      2666            xrl     a,#0x80
0AA5 8549F0    2667            mov     b,(_main_vx_err_1_142 + 1)
0AA8 63F080    2668            xrl     b,#0x80
0AAB 95F0      2669            subb    a,b
0AAD 4000      2670            jc      L025097?
0AAF 020000    2671            ljmp    L025024?
0AB2           2672   L025097?:
0AB2           2673   ;        main.c:688: if (vy*100<=vy_thres*100/2){
0AB2 851800    2674            mov     __mulint_PARM_2,_main_vy_1_142
0AB5 851901    2675            mov     (__mulint_PARM_2 + 1),(_main_vy_1_142 + 1)
0AB8 900064    2676            mov     dptr,#0x0064
0ABB 120000    2677            lcall   __mulint
0ABE AD82      2678            mov     r5,dpl
0AC0 AE83      2679            mov     r6,dph
0AC2 855800    2680            mov     __mulint_PARM_2,_vy_thres
0AC5 855901    2681            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0AC8 900064    2682            mov     dptr,#0x0064
0ACB C005      2683            push    ar5
0ACD C006      2684            push    ar6
0ACF 120000    2685            lcall   __mulint
0AD2 AF82      2686            mov     r7,dpl
0AD4 AB83      2687            mov     r3,dph
0AD6 750002    2688            mov     __divsint_PARM_2,#0x02
0AD9 E4        2689            clr     a
0ADA F501      2690            mov     (__divsint_PARM_2 + 1),a
0ADC 8F82      2691            mov     dpl,r7
0ADE 8B83      2692            mov     dph,r3
0AE0 120000    2693            lcall   __divsint
0AE3 AB82      2694            mov     r3,dpl
0AE5 AC83      2695            mov     r4,dph
0AE7 D006      2696            pop     ar6
0AE9 D005      2697            pop     ar5
0AEB C3        2698            clr     c
0AEC EB        2699            mov     a,r3
0AED 9D        2700            subb    a,r5
0AEE EC        2701            mov     a,r4
0AEF 6480      2702            xrl     a,#0x80
0AF1 8EF0      2703            mov     b,r6
0AF3 63F080    2704            xrl     b,#0x80
0AF6 95F0      2705            subb    a,b
0AF8 4000      2706            jc      L025018?
0AFA           2707   ;        main.c:689: pwm_left = vy_error; 
0AFA 85F818    2708            mov     _pwm_left,_main_vy_error_1_142
0AFD           2709   ;        main.c:690: pwm_right = vy_error*100/(vx_error+vy_error);
0AFD 85F800    2710            mov     __mulint_PARM_2,_main_vy_error_1_142
0B00 85F901    2711            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_142 + 1)
0B03 900064    2712            mov     dptr,#0x0064
0B06 120000    2713            lcall   __mulint
0B09 AB82      2714            mov     r3,dpl
0B0B AC83      2715            mov     r4,dph
0B0D E5F8      2716            mov     a,_main_vy_error_1_142
0B0F 25A8      2717            add     a,_main_vx_error_1_142
0B11 F500      2718            mov     __divsint_PARM_2,a
0B13 E5F9      2719            mov     a,(_main_vy_error_1_142 + 1)
0B15 35A9      2720            addc    a,(_main_vx_error_1_142 + 1)
0B17 F501      2721            mov     (__divsint_PARM_2 + 1),a
0B19 8B82      2722            mov     dpl,r3
0B1B 8C83      2723            mov     dph,r4
0B1D 120000    2724            lcall   __divsint
0B20 AB82      2725            mov     r3,dpl
0B22 AC83      2726            mov     r4,dph
0B24 8BD8      2727            mov     _pwm_right,r3
0B26 020000    2728            ljmp    L025027?
0B29           2729   L025018?:
0B29           2730   ;        main.c:693: pwm_left = vx_error; 
0B29 85A818    2731            mov     _pwm_left,_main_vx_error_1_142
0B2C           2732   ;        main.c:694: pwm_right = vx_error*100/(vx_error+vy_error);
0B2C 85A800    2733            mov     __mulint_PARM_2,_main_vx_error_1_142
0B2F 85A901    2734            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_142 + 1)
0B32 900064    2735            mov     dptr,#0x0064
0B35 120000    2736            lcall   __mulint
0B38 AB82      2737            mov     r3,dpl
0B3A AC83      2738            mov     r4,dph
0B3C E5F8      2739            mov     a,_main_vy_error_1_142
0B3E 25A8      2740            add     a,_main_vx_error_1_142
0B40 F500      2741            mov     __divsint_PARM_2,a
0B42 E5F9      2742            mov     a,(_main_vy_error_1_142 + 1)
0B44 35A9      2743            addc    a,(_main_vx_error_1_142 + 1)
0B46 F501      2744            mov     (__divsint_PARM_2 + 1),a
0B48 8B82      2745            mov     dpl,r3
0B4A 8C83      2746            mov     dph,r4
0B4C 120000    2747            lcall   __divsint
0B4F AB82      2748            mov     r3,dpl
0B51 AC83      2749            mov     r4,dph
0B53 8BD8      2750            mov     _pwm_right,r3
0B55 020000    2751            ljmp    L025027?
0B58           2752   L025024?:
0B58           2753   ;        main.c:699: if (vy*100<=vy_thres*100/2){
0B58 851800    2754            mov     __mulint_PARM_2,_main_vy_1_142
0B5B 851901    2755            mov     (__mulint_PARM_2 + 1),(_main_vy_1_142 + 1)
0B5E 900064    2756            mov     dptr,#0x0064
0B61 120000    2757            lcall   __mulint
0B64 AB82      2758            mov     r3,dpl
0B66 AC83      2759            mov     r4,dph
0B68 855800    2760            mov     __mulint_PARM_2,_vy_thres
0B6B 855901    2761            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0B6E 900064    2762            mov     dptr,#0x0064
0B71 C003      2763            push    ar3
0B73 C004      2764            push    ar4
0B75 120000    2765            lcall   __mulint
0B78 AD82      2766            mov     r5,dpl
0B7A AE83      2767            mov     r6,dph
0B7C 750002    2768            mov     __divsint_PARM_2,#0x02
0B7F E4        2769            clr     a
0B80 F501      2770            mov     (__divsint_PARM_2 + 1),a
0B82 8D82      2771            mov     dpl,r5
0B84 8E83      2772            mov     dph,r6
0B86 120000    2773            lcall   __divsint
0B89 AD82      2774            mov     r5,dpl
0B8B AE83      2775            mov     r6,dph
0B8D D004      2776            pop     ar4
0B8F D003      2777            pop     ar3
0B91 C3        2778            clr     c
0B92 ED        2779            mov     a,r5
0B93 9B        2780            subb    a,r3
0B94 EE        2781            mov     a,r6
0B95 6480      2782            xrl     a,#0x80
0B97 8CF0      2783            mov     b,r4
0B99 63F080    2784            xrl     b,#0x80
0B9C 95F0      2785            subb    a,b
0B9E 4000      2786            jc      L025021?
0BA0           2787   ;        main.c:700: pwm_left = vy_error*100/(vx_error+vy_error);
0BA0 85F800    2788            mov     __mulint_PARM_2,_main_vy_error_1_142
0BA3 85F901    2789            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_142 + 1)
0BA6 900064    2790            mov     dptr,#0x0064
0BA9 120000    2791            lcall   __mulint
0BAC AB82      2792            mov     r3,dpl
0BAE AC83      2793            mov     r4,dph
0BB0 E5F8      2794            mov     a,_main_vy_error_1_142
0BB2 25A8      2795            add     a,_main_vx_error_1_142
0BB4 F500      2796            mov     __divsint_PARM_2,a
0BB6 E5F9      2797            mov     a,(_main_vy_error_1_142 + 1)
0BB8 35A9      2798            addc    a,(_main_vx_error_1_142 + 1)
0BBA F501      2799            mov     (__divsint_PARM_2 + 1),a
0BBC 8B82      2800            mov     dpl,r3
0BBE 8C83      2801            mov     dph,r4
0BC0 120000    2802            lcall   __divsint
0BC3 AB82      2803            mov     r3,dpl
0BC5 AC83      2804            mov     r4,dph
0BC7 8B18      2805            mov     _pwm_left,r3
0BC9           2806   ;        main.c:701: pwm_right = vy_error; 
0BC9 85F8D8    2807            mov     _pwm_right,_main_vy_error_1_142
0BCC 8000      2808            sjmp    L025027?
0BCE           2809   L025021?:
0BCE           2810   ;        main.c:704: pwm_left = vx_error*100/(vx_error+vy_error);
0BCE 85A800    2811            mov     __mulint_PARM_2,_main_vx_error_1_142
0BD1 85A901    2812            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_142 + 1)
0BD4 900064    2813            mov     dptr,#0x0064
0BD7 120000    2814            lcall   __mulint
0BDA AB82      2815            mov     r3,dpl
0BDC AC83      2816            mov     r4,dph
0BDE E5F8      2817            mov     a,_main_vy_error_1_142
0BE0 25A8      2818            add     a,_main_vx_error_1_142
0BE2 F500      2819            mov     __divsint_PARM_2,a
0BE4 E5F9      2820            mov     a,(_main_vy_error_1_142 + 1)
0BE6 35A9      2821            addc    a,(_main_vx_error_1_142 + 1)
0BE8 F501      2822            mov     (__divsint_PARM_2 + 1),a
0BEA 8B82      2823            mov     dpl,r3
0BEC 8C83      2824            mov     dph,r4
0BEE 120000    2825            lcall   __divsint
0BF1 AB82      2826            mov     r3,dpl
0BF3 AC83      2827            mov     r4,dph
0BF5 8B18      2828            mov     _pwm_left,r3
0BF7           2829   ;        main.c:705: pwm_right = vx_error; 
0BF7 85A8D8    2830            mov     _pwm_right,_main_vx_error_1_142
0BFA           2831   L025027?:
0BFA           2832   ;        main.c:710: if (vy_err<0){
0BFA E599      2833            mov     a,(_main_vy_err_1_142 + 1)
0BFC 20E7D8    2834            jb      acc.7,L025100?
0BFF 020000    2835            ljmp    L025053?
0C02           2836   L025100?:
0C02           2837   ;        main.c:711: L_motor_dir = 1; 
0C02 759801    2838            mov     _L_motor_dir,#0x01
0C05           2839   ;        main.c:712: R_motor_dir = 1; 
0C05 755801    2840            mov     _R_motor_dir,#0x01
0C08           2841   ;        main.c:714: if (vx_err>0){
0C08 C3        2842            clr     c
0C09 E4        2843            clr     a
0C0A 9548      2844            subb    a,_main_vx_err_1_142
0C0C E4        2845            clr     a
0C0D 6480      2846            xrl     a,#0x80
0C0F 8549F0    2847            mov     b,(_main_vx_err_1_142 + 1)
0C12 63F080    2848            xrl     b,#0x80
0C15 95F0      2849            subb    a,b
0C17 4000      2850            jc      L025101?
0C19 020000    2851            ljmp    L025035?
0C1C           2852   L025101?:
0C1C           2853   ;        main.c:715: if (vy*100<=vy_thres*100/2){
0C1C 851800    2854            mov     __mulint_PARM_2,_main_vy_1_142
0C1F 851901    2855            mov     (__mulint_PARM_2 + 1),(_main_vy_1_142 + 1)
0C22 900064    2856            mov     dptr,#0x0064
0C25 120000    2857            lcall   __mulint
0C28 AB82      2858            mov     r3,dpl
0C2A AC83      2859            mov     r4,dph
0C2C 855800    2860            mov     __mulint_PARM_2,_vy_thres
0C2F 855901    2861            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0C32 900064    2862            mov     dptr,#0x0064
0C35 C003      2863            push    ar3
0C37 C004      2864            push    ar4
0C39 120000    2865            lcall   __mulint
0C3C AD82      2866            mov     r5,dpl
0C3E AE83      2867            mov     r6,dph
0C40 750002    2868            mov     __divsint_PARM_2,#0x02
0C43 E4        2869            clr     a
0C44 F501      2870            mov     (__divsint_PARM_2 + 1),a
0C46 8D82      2871            mov     dpl,r5
0C48 8E83      2872            mov     dph,r6
0C4A 120000    2873            lcall   __divsint
0C4D AD82      2874            mov     r5,dpl
0C4F AE83      2875            mov     r6,dph
0C51 D004      2876            pop     ar4
0C53 D003      2877            pop     ar3
0C55 C3        2878            clr     c
0C56 ED        2879            mov     a,r5
0C57 9B        2880            subb    a,r3
0C58 EE        2881            mov     a,r6
0C59 6480      2882            xrl     a,#0x80
0C5B 8CF0      2883            mov     b,r4
0C5D 63F080    2884            xrl     b,#0x80
0C60 95F0      2885            subb    a,b
0C62 4000      2886            jc      L025029?
0C64           2887   ;        main.c:716: pwm_left = vy_error; 
0C64 85F818    2888            mov     _pwm_left,_main_vy_error_1_142
0C67           2889   ;        main.c:717: pwm_right = vy_error*100/(vx_error+vy_error);
0C67 85F800    2890            mov     __mulint_PARM_2,_main_vy_error_1_142
0C6A 85F901    2891            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_142 + 1)
0C6D 900064    2892            mov     dptr,#0x0064
0C70 120000    2893            lcall   __mulint
0C73 AB82      2894            mov     r3,dpl
0C75 AC83      2895            mov     r4,dph
0C77 E5F8      2896            mov     a,_main_vy_error_1_142
0C79 25A8      2897            add     a,_main_vx_error_1_142
0C7B F500      2898            mov     __divsint_PARM_2,a
0C7D E5F9      2899            mov     a,(_main_vy_error_1_142 + 1)
0C7F 35A9      2900            addc    a,(_main_vx_error_1_142 + 1)
0C81 F501      2901            mov     (__divsint_PARM_2 + 1),a
0C83 8B82      2902            mov     dpl,r3
0C85 8C83      2903            mov     dph,r4
0C87 120000    2904            lcall   __divsint
0C8A AB82      2905            mov     r3,dpl
0C8C AC83      2906            mov     r4,dph
0C8E 8BD8      2907            mov     _pwm_right,r3
0C90 020000    2908            ljmp    L025053?
0C93           2909   L025029?:
0C93           2910   ;        main.c:720: pwm_left = vx_error; 
0C93 85A818    2911            mov     _pwm_left,_main_vx_error_1_142
0C96           2912   ;        main.c:721: pwm_right = vx_error*100/(vx_error+vy_error);
0C96 85A800    2913            mov     __mulint_PARM_2,_main_vx_error_1_142
0C99 85A901    2914            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_142 + 1)
0C9C 900064    2915            mov     dptr,#0x0064
0C9F 120000    2916            lcall   __mulint
0CA2 AB82      2917            mov     r3,dpl
0CA4 AC83      2918            mov     r4,dph
0CA6 E5F8      2919            mov     a,_main_vy_error_1_142
0CA8 25A8      2920            add     a,_main_vx_error_1_142
0CAA F500      2921            mov     __divsint_PARM_2,a
0CAC E5F9      2922            mov     a,(_main_vy_error_1_142 + 1)
0CAE 35A9      2923            addc    a,(_main_vx_error_1_142 + 1)
0CB0 F501      2924            mov     (__divsint_PARM_2 + 1),a
0CB2 8B82      2925            mov     dpl,r3
0CB4 8C83      2926            mov     dph,r4
0CB6 120000    2927            lcall   __divsint
0CB9 AB82      2928            mov     r3,dpl
0CBB AC83      2929            mov     r4,dph
0CBD 8BD8      2930            mov     _pwm_right,r3
0CBF 020000    2931            ljmp    L025053?
0CC2           2932   L025035?:
0CC2           2933   ;        main.c:726: if (vy*100<=vy_thres*100/2){
0CC2 851800    2934            mov     __mulint_PARM_2,_main_vy_1_142
0CC5 851901    2935            mov     (__mulint_PARM_2 + 1),(_main_vy_1_142 + 1)
0CC8 900064    2936            mov     dptr,#0x0064
0CCB 120000    2937            lcall   __mulint
0CCE AB82      2938            mov     r3,dpl
0CD0 AC83      2939            mov     r4,dph
0CD2 855800    2940            mov     __mulint_PARM_2,_vy_thres
0CD5 855901    2941            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0CD8 900064    2942            mov     dptr,#0x0064
0CDB C003      2943            push    ar3
0CDD C004      2944            push    ar4
0CDF 120000    2945            lcall   __mulint
0CE2 AD82      2946            mov     r5,dpl
0CE4 AE83      2947            mov     r6,dph
0CE6 750002    2948            mov     __divsint_PARM_2,#0x02
0CE9 E4        2949            clr     a
0CEA F501      2950            mov     (__divsint_PARM_2 + 1),a
0CEC 8D82      2951            mov     dpl,r5
0CEE 8E83      2952            mov     dph,r6
0CF0 120000    2953            lcall   __divsint
0CF3 AD82      2954            mov     r5,dpl
0CF5 AE83      2955            mov     r6,dph
0CF7 D004      2956            pop     ar4
0CF9 D003      2957            pop     ar3
0CFB C3        2958            clr     c
0CFC ED        2959            mov     a,r5
0CFD 9B        2960            subb    a,r3
0CFE EE        2961            mov     a,r6
0CFF 6480      2962            xrl     a,#0x80
0D01 8CF0      2963            mov     b,r4
0D03 63F080    2964            xrl     b,#0x80
0D06 95F0      2965            subb    a,b
0D08 4000      2966            jc      L025032?
0D0A           2967   ;        main.c:727: pwm_left = vy_error*100/(vx_error+vy_error);
0D0A 85F800    2968            mov     __mulint_PARM_2,_main_vy_error_1_142
0D0D 85F901    2969            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_142 + 1)
0D10 900064    2970            mov     dptr,#0x0064
0D13 120000    2971            lcall   __mulint
0D16 AB82      2972            mov     r3,dpl
0D18 AC83      2973            mov     r4,dph
0D1A E5F8      2974            mov     a,_main_vy_error_1_142
0D1C 25A8      2975            add     a,_main_vx_error_1_142
0D1E F500      2976            mov     __divsint_PARM_2,a
0D20 E5F9      2977            mov     a,(_main_vy_error_1_142 + 1)
0D22 35A9      2978            addc    a,(_main_vx_error_1_142 + 1)
0D24 F501      2979            mov     (__divsint_PARM_2 + 1),a
0D26 8B82      2980            mov     dpl,r3
0D28 8C83      2981            mov     dph,r4
0D2A 120000    2982            lcall   __divsint
0D2D AB82      2983            mov     r3,dpl
0D2F AC83      2984            mov     r4,dph
0D31 8B18      2985            mov     _pwm_left,r3
0D33           2986   ;        main.c:728: pwm_right = vy_error; 
0D33 85F8D8    2987            mov     _pwm_right,_main_vy_error_1_142
0D36 020000    2988            ljmp    L025053?
0D39           2989   L025032?:
0D39           2990   ;        main.c:731: pwm_left = vx_error*100/(vx_error+vy_error);
0D39 85A800    2991            mov     __mulint_PARM_2,_main_vx_error_1_142
0D3C 85A901    2992            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_142 + 1)
0D3F 900064    2993            mov     dptr,#0x0064
0D42 120000    2994            lcall   __mulint
0D45 AB82      2995            mov     r3,dpl
0D47 AC83      2996            mov     r4,dph
0D49 E5F8      2997            mov     a,_main_vy_error_1_142
0D4B 25A8      2998            add     a,_main_vx_error_1_142
0D4D F500      2999            mov     __divsint_PARM_2,a
0D4F E5F9      3000            mov     a,(_main_vy_error_1_142 + 1)
0D51 35A9      3001            addc    a,(_main_vx_error_1_142 + 1)
0D53 F501      3002            mov     (__divsint_PARM_2 + 1),a
0D55 8B82      3003            mov     dpl,r3
0D57 8C83      3004            mov     dph,r4
0D59 120000    3005            lcall   __divsint
0D5C AB82      3006            mov     r3,dpl
0D5E AC83      3007            mov     r4,dph
0D60 8B18      3008            mov     _pwm_left,r3
0D62           3009   ;        main.c:732: pwm_right = vx_error; 
0D62 85A8D8    3010            mov     _pwm_right,_main_vx_error_1_142
0D65 020000    3011            ljmp    L025053?
0D68           3012   L025043?:
0D68           3013   ;        main.c:740: printf("*** BAD MESSAGE ***(%d): %s\r\n", buff,strlen(buff));
0D68 904558    3014            mov     dptr,#_buff
0D6B 75F040    3015            mov     b,#0x40
0D6E 120000    3016            lcall   _strlen
0D71 AB82      3017            mov     r3,dpl
0D73 AC83      3018            mov     r4,dph
0D75 C003      3019            push    ar3
0D77 C004      3020            push    ar4
0D79 7458      3021            mov     a,#_buff
0D7B C0E0      3022            push    acc
0D7D 7445      3023            mov     a,#(_buff >> 8)
0D7F C0E0      3024            push    acc
0D81 7440      3025            mov     a,#0x40
0D83 C0E0      3026            push    acc
0D85 7418      3027            mov     a,#__str_21
0D87 C0E0      3028            push    acc
0D89 74E4      3029            mov     a,#(__str_21 >> 8)
0D8B C0E0      3030            push    acc
0D8D 7480      3031            mov     a,#0x80
0D8F C0E0      3032            push    acc
0D91 120000    3033            lcall   _printf
0D94 E581      3034            mov     a,sp
0D96 24F8      3035            add     a,#0xf8
0D98 F581      3036            mov     sp,a
0D9A 020000    3037            ljmp    L025053?
0D9D           3038   L025048?:
0D9D           3039   ;        main.c:743: else if(c=='@') // Master wants slave data
0D9D BA4058    3040            cjne    r2,#0x40,L025104?
0DA0 8000      3041            sjmp    L025105?
0DA2           3042   L025104?:
0DA2 020000    3043            ljmp    L025053?
0DA5           3044   L025105?:
0DA5           3045   ;        main.c:745: sprintf(buff, "%04ld\n", freq100);
0DA5 C098      3046            push    _freq100
0DA7 C099      3047            push    (_freq100 + 1)
0DA9 C09A      3048            push    (_freq100 + 2)
0DAB C09B      3049            push    (_freq100 + 3)
0DAD 74D8      3050            mov     a,#__str_22
0DAF C0E0      3051            push    acc
0DB1 74E4      3052            mov     a,#(__str_22 >> 8)
0DB3 C0E0      3053            push    acc
0DB5 7480      3054            mov     a,#0x80
0DB7 C0E0      3055            push    acc
0DB9 7458      3056            mov     a,#_buff
0DBB C0E0      3057            push    acc
0DBD 7445      3058            mov     a,#(_buff >> 8)
0DBF C0E0      3059            push    acc
0DC1 7440      3060            mov     a,#0x40
0DC3 C0E0      3061            push    acc
0DC5 120000    3062            lcall   _sprintf
0DC8 E581      3063            mov     a,sp
0DCA 24F6      3064            add     a,#0xf6
0DCC F581      3065            mov     sp,a
0DCE           3066   ;        main.c:746: waitms(5); // The radio seems to need this delay...
0DCE 900005    3067            mov     dptr,#0x0005
0DD1 120000    3068            lcall   _waitms
0DD4           3069   ;        main.c:747: sendstr1(buff);
0DD4 904558    3070            mov     dptr,#_buff
0DD7 75F040    3071            mov     b,#0x40
0DDA 120000    3072            lcall   _sendstr1
0DDD 020000    3073            ljmp    L025053?
0DE0           3074            rseg R_CSEG
0DE0           3075   
0000           3076            rseg R_XINIT
0000           3077   
0000           3078            rseg R_CONST
0000           3079   __str_0:
0000 436F6D6D  3080            db 'Command: %s'
     616E643A
     202573
000B 00        3081            db 0x00
000C           3082   __str_1:
000C 52657370  3083            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        3084            db 0x0D
0019 0A        3085            db 0x0A
001A 00        3086            db 0x00
001B           3087   __str_2:
001B 41542B44  3088            db 'AT+DVID0000'
     56494430
     303030
0026 0D        3089            db 0x0D
0027 0A        3090            db 0x0A
0028 00        3091            db 0x00
0029           3092   __str_3:
0029 6175746F  3093            db 'auto mode'
     206D6F64
     65
0032 0D        3094            db 0x0D
0033 0A        3095            db 0x0A
0034 00        3096            db 0x00
0035           3097   __str_4:
0035 6175746F  3098            db 'automode freq: %f'
     6D6F6465
     20667265
     713A2025
     66
0046 0D        3099            db 0x0D
0047 0A        3100            db 0x0A
0048 00        3101            db 0x00
0049           3102   __str_5:
0049 6D617374  3103            db 'master_messgae_auto_mode: %s'
     65725F6D
     65737367
     61655F61
     75746F5F
     6D6F6465
     3A202573
0065 0D        3104            db 0x0D
0066 0A        3105            db 0x0A
0067 00        3106            db 0x00
0068           3107   __str_6:
0068 6261645F  3108            db 'bad_message_auto_mode: %s'
     6D657373
     6167655F
     6175746F
     5F6D6F64
     653A2025
     73
0081 0D        3109            db 0x0D
0082 0A        3110            db 0x0A
0083 00        3111            db 0x00
0084           3112   __str_7:
0084 312C2530  3113            db '1,%02d'
     3264
008A 0A        3114            db 0x0A
008B 00        3115            db 0x00
008C           3116   __str_8:
008C 6E6F206D  3117            db 'no message'
     65737361
     6765
0096 0D        3118            db 0x0D
0097 0A        3119            db 0x0A
0098 00        3120            db 0x00
0099           3121   __str_9:
0099 0D        3122            db 0x0D
009A 0A        3123            db 0x0A
009B 45464D38  3124            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
00B6 0D        3125            db 0x0D
00B7 0A        3126            db 0x0A
00B8 00        3127            db 0x00
00B9           3128   __str_10:
00B9 41542B56  3129            db 'AT+VER'
     4552
00BF 0D        3130            db 0x0D
00C0 0A        3131            db 0x0A
00C1 00        3132            db 0x00
00C2           3133   __str_11:
00C2 41542B42  3134            db 'AT+BAUD'
     415544
00C9 0D        3135            db 0x0D
00CA 0A        3136            db 0x0A
00CB 00        3137            db 0x00
00CC           3138   __str_12:
00CC 41542B52  3139            db 'AT+RFID'
     464944
00D3 0D        3140            db 0x0D
00D4 0A        3141            db 0x0A
00D5 00        3142            db 0x00
00D6           3143   __str_13:
00D6 41542B44  3144            db 'AT+DVID'
     564944
00DD 0D        3145            db 0x0D
00DE 0A        3146            db 0x0A
00DF 00        3147            db 0x00
00E0           3148   __str_14:
00E0 41542B52  3149            db 'AT+RFC002'
     46433030
     32
00E9 0D        3150            db 0x0D
00EA 0A        3151            db 0x0A
00EB 00        3152            db 0x00
00EC           3153   __str_15:
00EC 41542B50  3154            db 'AT+POWE'
     4F5745
00F3 0D        3155            db 0x0D
00F4 0A        3156            db 0x0A
00F5 00        3157            db 0x00
00F6           3158   __str_16:
00F6 41542B43  3159            db 'AT+CLSS'
     4C5353
00FD 0D        3160            db 0x0D
00FE 0A        3161            db 0x0A
00FF 00        3162            db 0x00
0100           3163   __str_17:
0100 41542B44  3164            db 'AT+DVIDEFEF'
     56494445
     464546
010B 0D        3165            db 0x0D
010C 0A        3166            db 0x0A
010D 00        3167            db 0x00
010E           3168   __str_18:
010E 4D617374  3169            db 'Master says: %s'
     65722073
     6179733A
     202573
011D 0D        3170            db 0x0D
011E 0A        3171            db 0x0A
011F 00        3172            db 0x00
0120           3173   __str_19:
0120 25303364  3174            db '%03d,%03d,%01d,%d01'
     2C253033
     642C2530
     31642C25
     643031
0133 00        3175            db 0x00
0134           3176   __str_20:
0134 4A6F7973  3177            db 'Joystick Received: Vx = %03d, Vy = %03d, Order = %01d, Auto '
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25303364
     2C205679
     203D2025
     3033642C
     204F7264
     6572203D
     20253031
     642C2041
     75746F20
0170 3D202530  3178            db '= %01d'
     3164
0176 0D        3179            db 0x0D
0177 0A        3180            db 0x0A
0178 00        3181            db 0x00
0179           3182   __str_21:
0179 2A2A2A20  3183            db '*** BAD MESSAGE ***(%d): %s'
     42414420
     4D455353
     41474520
     2A2A2A28
     2564293A
     202573
0194 0D        3184            db 0x0D
0195 0A        3185            db 0x0A
0196 00        3186            db 0x00
0197           3187   __str_22:
0197 2530346C  3188            db '%04ld'
     64
019C 0A        3189            db 0x0A
019D 00        3190            db 0x00
019E           3191   
0096           3192            CSEG
0096           3193   
0096           3194   end
