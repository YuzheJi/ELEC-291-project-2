0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Apr 02 20:55:19 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _check_bound_PARM_2
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Joystick_Control
0000             30            public _Auto_mode_slave
0000             31            public _Read_angle
0000             32            public _get_random_90_250
0000             33            public _simple_rand
0000             34            public _Move_forward
0000             35            public _Right_angle
0000             36            public _Move_back_ms
0000             37            public _Init_all
0000             38            public _check_bound
0000             39            public _servo_moveaway
0000             40            public _Move_forward_ms
0000             41            public _servo_push
0000             42            public _servo_pick
0000             43            public _Timer5_ISR
0000             44            public _ReadHX711
0000             45            public _ADC_at_Pin
0000             46            public _InitPinADC
0000             47            public _InitADC
0000             48            public _Set_Pin_Input
0000             49            public _Set_Pin_Output
0000             50            public _measure_distance
0000             51            public _ReceptionOff
0000             52            public _SendATCommand
0000             53            public _waitms_or_RI1
0000             54            public _RXU1
0000             55            public _getstr1
0000             56            public _getchar1_with_timeout
0000             57            public _getchar1
0000             58            public _sendstr1
0000             59            public _putchar1
0000             60            public _UART1_Init
0000             61            public _BMM150_Read_Data
0000             62            public _BMM150_compensate_y
0000             63            public _BMM150_compensate_x
0000             64            public _BMM150_Init
0000             65            public _BMM150_Read_Trim_Registers
0000             66            public _SPI_write
0000             67            public _SPI_read
0000             68            public _SPI_transfer
0000             69            public _waitms
0000             70            public _Timer3us
0000             71            public __c51_external_startup
0000             72            public _duration
0000             73            public _weight
0000             74            public _mea_yes
0000             75            public _angle_diff
0000             76            public _last_raw_angle
0000             77            public _raw_angle
0000             78            public _curr_angle
0000             79            public _pwm_corr
0000             80            public _seed
0000             81            public _weight_mea_count
0000             82            public _fre_mea_count
0000             83            public _vy
0000             84            public _vx
0000             85            public _vy_thres
0000             86            public _vx_thres
0000             87            public _servo_arm
0000             88            public _servo_base
0000             89            public _R_motor_dir
0000             90            public _L_motor_dir
0000             91            public _pwm_right
0000             92            public _pwm_left
0000             93            public _servo_counter
0000             94            public _pwm_counter
0000             95            public _i_loo
0000             96            public _overflow_count
0000             97            public _distance
0000             98            public _temp
0000             99            public _dig_xyz1
0000            100            public _dig_xy2
0000            101            public _dig_xy1
0000            102            public _dig_z4
0000            103            public _dig_z3
0000            104            public _dig_z2
0000            105            public _dig_z1
0000            106            public _dig_y2
0000            107            public _dig_y1
0000            108            public _dig_x2
0000            109            public _dig_x1
0000            110            public _d2
0000            111            public _d1
0000            112            public _freq100
0000            113            public _buff
0000            114            public _Joystick_Control_PARM_2
0000            115            public _getstr1_PARM_2
0000            116            public _BMM150_Read_Data_PARM_2
0000            117            public _BMM150_compensate_y_PARM_2
0000            118            public _BMM150_compensate_x_PARM_2
0000            119            public _SPI_write_PARM_2
0000            120   ;--------------------------------------------------------
0000            121   ; Special Function Registers
0000            122   ;--------------------------------------------------------
0000            123   _ACC            DATA 0xe0
0000            124   _ADC0ASAH       DATA 0xb6
0000            125   _ADC0ASAL       DATA 0xb5
0000            126   _ADC0ASCF       DATA 0xa1
0000            127   _ADC0ASCT       DATA 0xc7
0000            128   _ADC0CF0        DATA 0xbc
0000            129   _ADC0CF1        DATA 0xb9
0000            130   _ADC0CF2        DATA 0xdf
0000            131   _ADC0CN0        DATA 0xe8
0000            132   _ADC0CN1        DATA 0xb2
0000            133   _ADC0CN2        DATA 0xb3
0000            134   _ADC0GTH        DATA 0xc4
0000            135   _ADC0GTL        DATA 0xc3
0000            136   _ADC0H          DATA 0xbe
0000            137   _ADC0L          DATA 0xbd
0000            138   _ADC0LTH        DATA 0xc6
0000            139   _ADC0LTL        DATA 0xc5
0000            140   _ADC0MX         DATA 0xbb
0000            141   _B              DATA 0xf0
0000            142   _CKCON0         DATA 0x8e
0000            143   _CKCON1         DATA 0xa6
0000            144   _CLEN0          DATA 0xc6
0000            145   _CLIE0          DATA 0xc7
0000            146   _CLIF0          DATA 0xe8
0000            147   _CLKSEL         DATA 0xa9
0000            148   _CLOUT0         DATA 0xd1
0000            149   _CLU0CF         DATA 0xb1
0000            150   _CLU0FN         DATA 0xaf
0000            151   _CLU0MX         DATA 0x84
0000            152   _CLU1CF         DATA 0xb3
0000            153   _CLU1FN         DATA 0xb2
0000            154   _CLU1MX         DATA 0x85
0000            155   _CLU2CF         DATA 0xb6
0000            156   _CLU2FN         DATA 0xb5
0000            157   _CLU2MX         DATA 0x91
0000            158   _CLU3CF         DATA 0xbf
0000            159   _CLU3FN         DATA 0xbe
0000            160   _CLU3MX         DATA 0xae
0000            161   _CMP0CN0        DATA 0x9b
0000            162   _CMP0CN1        DATA 0x99
0000            163   _CMP0MD         DATA 0x9d
0000            164   _CMP0MX         DATA 0x9f
0000            165   _CMP1CN0        DATA 0xbf
0000            166   _CMP1CN1        DATA 0xac
0000            167   _CMP1MD         DATA 0xab
0000            168   _CMP1MX         DATA 0xaa
0000            169   _CRC0CN0        DATA 0xce
0000            170   _CRC0CN1        DATA 0x86
0000            171   _CRC0CNT        DATA 0xd3
0000            172   _CRC0DAT        DATA 0xcb
0000            173   _CRC0FLIP       DATA 0xcf
0000            174   _CRC0IN         DATA 0xca
0000            175   _CRC0ST         DATA 0xd2
0000            176   _DAC0CF0        DATA 0x91
0000            177   _DAC0CF1        DATA 0x92
0000            178   _DAC0H          DATA 0x85
0000            179   _DAC0L          DATA 0x84
0000            180   _DAC1CF0        DATA 0x93
0000            181   _DAC1CF1        DATA 0x94
0000            182   _DAC1H          DATA 0x8a
0000            183   _DAC1L          DATA 0x89
0000            184   _DAC2CF0        DATA 0x95
0000            185   _DAC2CF1        DATA 0x96
0000            186   _DAC2H          DATA 0x8c
0000            187   _DAC2L          DATA 0x8b
0000            188   _DAC3CF0        DATA 0x9a
0000            189   _DAC3CF1        DATA 0x9c
0000            190   _DAC3H          DATA 0x8e
0000            191   _DAC3L          DATA 0x8d
0000            192   _DACGCF0        DATA 0x88
0000            193   _DACGCF1        DATA 0x98
0000            194   _DACGCF2        DATA 0xa2
0000            195   _DERIVID        DATA 0xad
0000            196   _DEVICEID       DATA 0xb5
0000            197   _DPH            DATA 0x83
0000            198   _DPL            DATA 0x82
0000            199   _EIE1           DATA 0xe6
0000            200   _EIE2           DATA 0xf3
0000            201   _EIP1           DATA 0xbb
0000            202   _EIP1H          DATA 0xee
0000            203   _EIP2           DATA 0xed
0000            204   _EIP2H          DATA 0xf6
0000            205   _EMI0CN         DATA 0xe7
0000            206   _FLKEY          DATA 0xb7
0000            207   _HFO0CAL        DATA 0xc7
0000            208   _HFO1CAL        DATA 0xd6
0000            209   _HFOCN          DATA 0xef
0000            210   _I2C0ADM        DATA 0xff
0000            211   _I2C0CN0        DATA 0xba
0000            212   _I2C0DIN        DATA 0xbc
0000            213   _I2C0DOUT       DATA 0xbb
0000            214   _I2C0FCN0       DATA 0xad
0000            215   _I2C0FCN1       DATA 0xab
0000            216   _I2C0FCT        DATA 0xf5
0000            217   _I2C0SLAD       DATA 0xbd
0000            218   _I2C0STAT       DATA 0xb9
0000            219   _IE             DATA 0xa8
0000            220   _IP             DATA 0xb8
0000            221   _IPH            DATA 0xf2
0000            222   _IT01CF         DATA 0xe4
0000            223   _LFO0CN         DATA 0xb1
0000            224   _P0             DATA 0x80
0000            225   _P0MASK         DATA 0xfe
0000            226   _P0MAT          DATA 0xfd
0000            227   _P0MDIN         DATA 0xf1
0000            228   _P0MDOUT        DATA 0xa4
0000            229   _P0SKIP         DATA 0xd4
0000            230   _P1             DATA 0x90
0000            231   _P1MASK         DATA 0xee
0000            232   _P1MAT          DATA 0xed
0000            233   _P1MDIN         DATA 0xf2
0000            234   _P1MDOUT        DATA 0xa5
0000            235   _P1SKIP         DATA 0xd5
0000            236   _P2             DATA 0xa0
0000            237   _P2MASK         DATA 0xfc
0000            238   _P2MAT          DATA 0xfb
0000            239   _P2MDIN         DATA 0xf3
0000            240   _P2MDOUT        DATA 0xa6
0000            241   _P2SKIP         DATA 0xcc
0000            242   _P3             DATA 0xb0
0000            243   _P3MDIN         DATA 0xf4
0000            244   _P3MDOUT        DATA 0x9c
0000            245   _PCA0CENT       DATA 0x9e
0000            246   _PCA0CLR        DATA 0x9c
0000            247   _PCA0CN0        DATA 0xd8
0000            248   _PCA0CPH0       DATA 0xfc
0000            249   _PCA0CPH1       DATA 0xea
0000            250   _PCA0CPH2       DATA 0xec
0000            251   _PCA0CPH3       DATA 0xf5
0000            252   _PCA0CPH4       DATA 0x85
0000            253   _PCA0CPH5       DATA 0xde
0000            254   _PCA0CPL0       DATA 0xfb
0000            255   _PCA0CPL1       DATA 0xe9
0000            256   _PCA0CPL2       DATA 0xeb
0000            257   _PCA0CPL3       DATA 0xf4
0000            258   _PCA0CPL4       DATA 0x84
0000            259   _PCA0CPL5       DATA 0xdd
0000            260   _PCA0CPM0       DATA 0xda
0000            261   _PCA0CPM1       DATA 0xdb
0000            262   _PCA0CPM2       DATA 0xdc
0000            263   _PCA0CPM3       DATA 0xae
0000            264   _PCA0CPM4       DATA 0xaf
0000            265   _PCA0CPM5       DATA 0xcc
0000            266   _PCA0H          DATA 0xfa
0000            267   _PCA0L          DATA 0xf9
0000            268   _PCA0MD         DATA 0xd9
0000            269   _PCA0POL        DATA 0x96
0000            270   _PCA0PWM        DATA 0xf7
0000            271   _PCON0          DATA 0x87
0000            272   _PCON1          DATA 0xcd
0000            273   _PFE0CN         DATA 0xc1
0000            274   _PRTDRV         DATA 0xf6
0000            275   _PSCTL          DATA 0x8f
0000            276   _PSTAT0         DATA 0xaa
0000            277   _PSW            DATA 0xd0
0000            278   _REF0CN         DATA 0xd1
0000            279   _REG0CN         DATA 0xc9
0000            280   _REVID          DATA 0xb6
0000            281   _RSTSRC         DATA 0xef
0000            282   _SBCON1         DATA 0x94
0000            283   _SBRLH1         DATA 0x96
0000            284   _SBRLL1         DATA 0x95
0000            285   _SBUF           DATA 0x99
0000            286   _SBUF0          DATA 0x99
0000            287   _SBUF1          DATA 0x92
0000            288   _SCON           DATA 0x98
0000            289   _SCON0          DATA 0x98
0000            290   _SCON1          DATA 0xc8
0000            291   _SFRPAGE        DATA 0xa7
0000            292   _SFRPGCN        DATA 0xbc
0000            293   _SFRSTACK       DATA 0xd7
0000            294   _SMB0ADM        DATA 0xd6
0000            295   _SMB0ADR        DATA 0xd7
0000            296   _SMB0CF         DATA 0xc1
0000            297   _SMB0CN0        DATA 0xc0
0000            298   _SMB0DAT        DATA 0xc2
0000            299   _SMB0FCN0       DATA 0xc3
0000            300   _SMB0FCN1       DATA 0xc4
0000            301   _SMB0FCT        DATA 0xef
0000            302   _SMB0RXLN       DATA 0xc5
0000            303   _SMB0TC         DATA 0xac
0000            304   _SMOD1          DATA 0x93
0000            305   _SP             DATA 0x81
0000            306   _SPI0CFG        DATA 0xa1
0000            307   _SPI0CKR        DATA 0xa2
0000            308   _SPI0CN0        DATA 0xf8
0000            309   _SPI0DAT        DATA 0xa3
0000            310   _SPI0FCN0       DATA 0x9a
0000            311   _SPI0FCN1       DATA 0x9b
0000            312   _SPI0FCT        DATA 0xf7
0000            313   _SPI0PCF        DATA 0xdf
0000            314   _TCON           DATA 0x88
0000            315   _TH0            DATA 0x8c
0000            316   _TH1            DATA 0x8d
0000            317   _TL0            DATA 0x8a
0000            318   _TL1            DATA 0x8b
0000            319   _TMOD           DATA 0x89
0000            320   _TMR2CN0        DATA 0xc8
0000            321   _TMR2CN1        DATA 0xfd
0000            322   _TMR2H          DATA 0xcf
0000            323   _TMR2L          DATA 0xce
0000            324   _TMR2RLH        DATA 0xcb
0000            325   _TMR2RLL        DATA 0xca
0000            326   _TMR3CN0        DATA 0x91
0000            327   _TMR3CN1        DATA 0xfe
0000            328   _TMR3H          DATA 0x95
0000            329   _TMR3L          DATA 0x94
0000            330   _TMR3RLH        DATA 0x93
0000            331   _TMR3RLL        DATA 0x92
0000            332   _TMR4CN0        DATA 0x98
0000            333   _TMR4CN1        DATA 0xff
0000            334   _TMR4H          DATA 0xa5
0000            335   _TMR4L          DATA 0xa4
0000            336   _TMR4RLH        DATA 0xa3
0000            337   _TMR4RLL        DATA 0xa2
0000            338   _TMR5CN0        DATA 0xc0
0000            339   _TMR5CN1        DATA 0xf1
0000            340   _TMR5H          DATA 0xd5
0000            341   _TMR5L          DATA 0xd4
0000            342   _TMR5RLH        DATA 0xd3
0000            343   _TMR5RLL        DATA 0xd2
0000            344   _UART0PCF       DATA 0xd9
0000            345   _UART1FCN0      DATA 0x9d
0000            346   _UART1FCN1      DATA 0xd8
0000            347   _UART1FCT       DATA 0xfa
0000            348   _UART1LIN       DATA 0x9e
0000            349   _UART1PCF       DATA 0xda
0000            350   _VDM0CN         DATA 0xff
0000            351   _WDTCN          DATA 0x97
0000            352   _XBR0           DATA 0xe1
0000            353   _XBR1           DATA 0xe2
0000            354   _XBR2           DATA 0xe3
0000            355   _XOSC0CN        DATA 0x86
0000            356   _DPTR           DATA 0x8382
0000            357   _TMR2RL         DATA 0xcbca
0000            358   _TMR3RL         DATA 0x9392
0000            359   _TMR4RL         DATA 0xa3a2
0000            360   _TMR5RL         DATA 0xd3d2
0000            361   _TMR0           DATA 0x8c8a
0000            362   _TMR1           DATA 0x8d8b
0000            363   _TMR2           DATA 0xcfce
0000            364   _TMR3           DATA 0x9594
0000            365   _TMR4           DATA 0xa5a4
0000            366   _TMR5           DATA 0xd5d4
0000            367   _SBRL1          DATA 0x9695
0000            368   _PCA0           DATA 0xfaf9
0000            369   _PCA0CP0        DATA 0xfcfb
0000            370   _PCA0CP1        DATA 0xeae9
0000            371   _PCA0CP2        DATA 0xeceb
0000            372   _PCA0CP3        DATA 0xf5f4
0000            373   _PCA0CP4        DATA 0x8584
0000            374   _PCA0CP5        DATA 0xdedd
0000            375   _ADC0ASA        DATA 0xb6b5
0000            376   _ADC0GT         DATA 0xc4c3
0000            377   _ADC0           DATA 0xbebd
0000            378   _ADC0LT         DATA 0xc6c5
0000            379   _DAC0           DATA 0x8584
0000            380   _DAC1           DATA 0x8a89
0000            381   _DAC2           DATA 0x8c8b
0000            382   _DAC3           DATA 0x8e8d
0000            383   ;--------------------------------------------------------
0000            384   ; special function bits
0000            385   ;--------------------------------------------------------
0000            386   _ACC_0          BIT 0xe0
0000            387   _ACC_1          BIT 0xe1
0000            388   _ACC_2          BIT 0xe2
0000            389   _ACC_3          BIT 0xe3
0000            390   _ACC_4          BIT 0xe4
0000            391   _ACC_5          BIT 0xe5
0000            392   _ACC_6          BIT 0xe6
0000            393   _ACC_7          BIT 0xe7
0000            394   _TEMPE          BIT 0xe8
0000            395   _ADGN0          BIT 0xe9
0000            396   _ADGN1          BIT 0xea
0000            397   _ADWINT         BIT 0xeb
0000            398   _ADBUSY         BIT 0xec
0000            399   _ADINT          BIT 0xed
0000            400   _IPOEN          BIT 0xee
0000            401   _ADEN           BIT 0xef
0000            402   _B_0            BIT 0xf0
0000            403   _B_1            BIT 0xf1
0000            404   _B_2            BIT 0xf2
0000            405   _B_3            BIT 0xf3
0000            406   _B_4            BIT 0xf4
0000            407   _B_5            BIT 0xf5
0000            408   _B_6            BIT 0xf6
0000            409   _B_7            BIT 0xf7
0000            410   _C0FIF          BIT 0xe8
0000            411   _C0RIF          BIT 0xe9
0000            412   _C1FIF          BIT 0xea
0000            413   _C1RIF          BIT 0xeb
0000            414   _C2FIF          BIT 0xec
0000            415   _C2RIF          BIT 0xed
0000            416   _C3FIF          BIT 0xee
0000            417   _C3RIF          BIT 0xef
0000            418   _D1SRC0         BIT 0x88
0000            419   _D1SRC1         BIT 0x89
0000            420   _D1AMEN         BIT 0x8a
0000            421   _D01REFSL       BIT 0x8b
0000            422   _D3SRC0         BIT 0x8c
0000            423   _D3SRC1         BIT 0x8d
0000            424   _D3AMEN         BIT 0x8e
0000            425   _D23REFSL       BIT 0x8f
0000            426   _D0UDIS         BIT 0x98
0000            427   _D1UDIS         BIT 0x99
0000            428   _D2UDIS         BIT 0x9a
0000            429   _D3UDIS         BIT 0x9b
0000            430   _EX0            BIT 0xa8
0000            431   _ET0            BIT 0xa9
0000            432   _EX1            BIT 0xaa
0000            433   _ET1            BIT 0xab
0000            434   _ES0            BIT 0xac
0000            435   _ET2            BIT 0xad
0000            436   _ESPI0          BIT 0xae
0000            437   _EA             BIT 0xaf
0000            438   _PX0            BIT 0xb8
0000            439   _PT0            BIT 0xb9
0000            440   _PX1            BIT 0xba
0000            441   _PT1            BIT 0xbb
0000            442   _PS0            BIT 0xbc
0000            443   _PT2            BIT 0xbd
0000            444   _PSPI0          BIT 0xbe
0000            445   _P0_0           BIT 0x80
0000            446   _P0_1           BIT 0x81
0000            447   _P0_2           BIT 0x82
0000            448   _P0_3           BIT 0x83
0000            449   _P0_4           BIT 0x84
0000            450   _P0_5           BIT 0x85
0000            451   _P0_6           BIT 0x86
0000            452   _P0_7           BIT 0x87
0000            453   _P1_0           BIT 0x90
0000            454   _P1_1           BIT 0x91
0000            455   _P1_2           BIT 0x92
0000            456   _P1_3           BIT 0x93
0000            457   _P1_4           BIT 0x94
0000            458   _P1_5           BIT 0x95
0000            459   _P1_6           BIT 0x96
0000            460   _P1_7           BIT 0x97
0000            461   _P2_0           BIT 0xa0
0000            462   _P2_1           BIT 0xa1
0000            463   _P2_2           BIT 0xa2
0000            464   _P2_3           BIT 0xa3
0000            465   _P2_4           BIT 0xa4
0000            466   _P2_5           BIT 0xa5
0000            467   _P2_6           BIT 0xa6
0000            468   _P3_0           BIT 0xb0
0000            469   _P3_1           BIT 0xb1
0000            470   _P3_2           BIT 0xb2
0000            471   _P3_3           BIT 0xb3
0000            472   _P3_4           BIT 0xb4
0000            473   _P3_7           BIT 0xb7
0000            474   _CCF0           BIT 0xd8
0000            475   _CCF1           BIT 0xd9
0000            476   _CCF2           BIT 0xda
0000            477   _CCF3           BIT 0xdb
0000            478   _CCF4           BIT 0xdc
0000            479   _CCF5           BIT 0xdd
0000            480   _CR             BIT 0xde
0000            481   _CF             BIT 0xdf
0000            482   _PARITY         BIT 0xd0
0000            483   _F1             BIT 0xd1
0000            484   _OV             BIT 0xd2
0000            485   _RS0            BIT 0xd3
0000            486   _RS1            BIT 0xd4
0000            487   _F0             BIT 0xd5
0000            488   _AC             BIT 0xd6
0000            489   _CY             BIT 0xd7
0000            490   _RI             BIT 0x98
0000            491   _TI             BIT 0x99
0000            492   _RB8            BIT 0x9a
0000            493   _TB8            BIT 0x9b
0000            494   _REN            BIT 0x9c
0000            495   _CE             BIT 0x9d
0000            496   _SMODE          BIT 0x9e
0000            497   _RI1            BIT 0xc8
0000            498   _TI1            BIT 0xc9
0000            499   _RBX1           BIT 0xca
0000            500   _TBX1           BIT 0xcb
0000            501   _REN1           BIT 0xcc
0000            502   _PERR1          BIT 0xcd
0000            503   _OVR1           BIT 0xce
0000            504   _SI             BIT 0xc0
0000            505   _ACK            BIT 0xc1
0000            506   _ARBLOST        BIT 0xc2
0000            507   _ACKRQ          BIT 0xc3
0000            508   _STO            BIT 0xc4
0000            509   _STA            BIT 0xc5
0000            510   _TXMODE         BIT 0xc6
0000            511   _MASTER         BIT 0xc7
0000            512   _SPIEN          BIT 0xf8
0000            513   _TXNF           BIT 0xf9
0000            514   _NSSMD0         BIT 0xfa
0000            515   _NSSMD1         BIT 0xfb
0000            516   _RXOVRN         BIT 0xfc
0000            517   _MODF           BIT 0xfd
0000            518   _WCOL           BIT 0xfe
0000            519   _SPIF           BIT 0xff
0000            520   _IT0            BIT 0x88
0000            521   _IE0            BIT 0x89
0000            522   _IT1            BIT 0x8a
0000            523   _IE1            BIT 0x8b
0000            524   _TR0            BIT 0x8c
0000            525   _TF0            BIT 0x8d
0000            526   _TR1            BIT 0x8e
0000            527   _TF1            BIT 0x8f
0000            528   _T2XCLK0        BIT 0xc8
0000            529   _T2XCLK1        BIT 0xc9
0000            530   _TR2            BIT 0xca
0000            531   _T2SPLIT        BIT 0xcb
0000            532   _TF2CEN         BIT 0xcc
0000            533   _TF2LEN         BIT 0xcd
0000            534   _TF2L           BIT 0xce
0000            535   _TF2H           BIT 0xcf
0000            536   _T4XCLK0        BIT 0x98
0000            537   _T4XCLK1        BIT 0x99
0000            538   _TR4            BIT 0x9a
0000            539   _T4SPLIT        BIT 0x9b
0000            540   _TF4CEN         BIT 0x9c
0000            541   _TF4LEN         BIT 0x9d
0000            542   _TF4L           BIT 0x9e
0000            543   _TF4H           BIT 0x9f
0000            544   _T5XCLK0        BIT 0xc0
0000            545   _T5XCLK1        BIT 0xc1
0000            546   _TR5            BIT 0xc2
0000            547   _T5SPLIT        BIT 0xc3
0000            548   _TF5CEN         BIT 0xc4
0000            549   _TF5LEN         BIT 0xc5
0000            550   _TF5L           BIT 0xc6
0000            551   _TF5H           BIT 0xc7
0000            552   _RIE            BIT 0xd8
0000            553   _RXTO0          BIT 0xd9
0000            554   _RXTO1          BIT 0xda
0000            555   _RFRQ           BIT 0xdb
0000            556   _TIE            BIT 0xdc
0000            557   _TXHOLD         BIT 0xdd
0000            558   _TXNF1          BIT 0xde
0000            559   _TFRQ           BIT 0xdf
0000            560   ;--------------------------------------------------------
0000            561   ; overlayable register banks
0000            562   ;--------------------------------------------------------
0000            563            rbank0 segment data overlay
0000            564   ;--------------------------------------------------------
0000            565   ; overlayable bit register bank
0000            566   ;--------------------------------------------------------
0000            567            rseg BIT_BANK
0000            568   bits:
0000            569            ds 1
0001            570            b0 equ  bits.0 
0001            571            b1 equ  bits.1 
0001            572            b2 equ  bits.2 
0001            573            b3 equ  bits.3 
0001            574            b4 equ  bits.4 
0001            575            b5 equ  bits.5 
0001            576            b6 equ  bits.6 
0001            577            b7 equ  bits.7 
0001            578   ;--------------------------------------------------------
0001            579   ; internal ram data
0001            580   ;--------------------------------------------------------
0000            581            rseg R_DSEG
0000            582   _SPI_write_PARM_2:
0000            583            ds 1
0001            584   _BMM150_compensate_x_PARM_2:
0001            585            ds 3
0004            586   _BMM150_compensate_x_sloc0_1_0:
0004            587            ds 4
0008            588   _BMM150_compensate_y_PARM_2:
0008            589            ds 3
000B            590   _BMM150_compensate_y_sloc0_1_0:
000B            591            ds 4
000F            592   _BMM150_Read_Data_PARM_2:
000F            593            ds 3
0012            594   _BMM150_Read_Data_mag_x_1_123:
0012            595            ds 3
0015            596   _getstr1_PARM_2:
0015            597            ds 1
0016            598   _Read_angle_sloc0_1_0:
0016            599            ds 4
001A            600   _Auto_mode_slave_sloc0_1_0:
001A            601            ds 2
001C            602   _Joystick_Control_PARM_2:
001C            603            ds 3
001F            604   _Joystick_Control_sloc0_1_0:
001F            605            ds 2
0021            606   _Joystick_Control_sloc1_1_0:
0021            607            ds 2
0023            608   _Joystick_Control_sloc2_1_0:
0023            609            ds 1
0024            610   _Joystick_Control_sloc3_1_0:
0024            611            ds 4
0028            612   _Joystick_Control_sloc4_1_0:
0028            613            ds 4
002C            614   _Joystick_Control_sloc5_1_0:
002C            615            ds 4
0030            616   ;--------------------------------------------------------
0030            617   ; overlayable items in internal ram 
0030            618   ;--------------------------------------------------------
0000            619            rseg    R_OSEG
0000            620            rseg    R_OSEG
0000            621            rseg    R_OSEG
0000            622            rseg    R_OSEG
0000            623            rseg    R_OSEG
0000            624            rseg    R_OSEG
0000            625   _InitPinADC_PARM_2:
0000            626            ds 1
0001            627            rseg    R_OSEG
0001            628            rseg    R_OSEG
0001            629   _check_bound_PARM_2:
0001            630            ds 2
0003            631   ;--------------------------------------------------------
0003            632   ; indirectly addressable internal ram data
0003            633   ;--------------------------------------------------------
0000            634            rseg R_ISEG
0000            635   _buff:
0000            636            ds 20
0014            637   ;--------------------------------------------------------
0014            638   ; absolute internal ram data
0014            639   ;--------------------------------------------------------
0000            640            DSEG
0000            641   ;--------------------------------------------------------
0000            642   ; bit data
0000            643   ;--------------------------------------------------------
0000            644            rseg R_BSEG
0000            645   ;--------------------------------------------------------
0000            646   ; paged external ram data
0000            647   ;--------------------------------------------------------
0000            648            rseg R_PSEG
0000            649   ;--------------------------------------------------------
0000            650   ; external ram data
0000            651   ;--------------------------------------------------------
0000            652            rseg R_XSEG
0000            653   _freq100:
0000            654            ds 4
0004            655   _d1:
0004            656            ds 2
0006            657   _d2:
0006            658            ds 2
0008            659   _dig_x1:
0008            660            ds 1
0009            661   _dig_x2:
0009            662            ds 1
000A            663   _dig_y1:
000A            664            ds 1
000B            665   _dig_y2:
000B            666            ds 1
000C            667   _dig_z1:
000C            668            ds 2
000E            669   _dig_z2:
000E            670            ds 2
0010            671   _dig_z3:
0010            672            ds 2
0012            673   _dig_z4:
0012            674            ds 2
0014            675   _dig_xy1:
0014            676            ds 1
0015            677   _dig_xy2:
0015            678            ds 1
0016            679   _dig_xyz1:
0016            680            ds 2
0018            681   _temp:
0018            682            ds 4
001C            683   _distance:
001C            684            ds 2
001E            685   _overflow_count:
001E            686            ds 1
001F            687   _i_loo:
001F            688            ds 2
0021            689   _BMM150_Read_Trim_Registers_trim_x1y1_1_97:
0021            690            ds 2
0023            691   _BMM150_Read_Trim_Registers_trim_xyz_data_1_97:
0023            692            ds 4
0027            693   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_97:
0027            694            ds 10
0031            695   _BMM150_compensate_x_retval_1_106:
0031            696            ds 2
0033            697   _BMM150_compensate_x_process_comp_x0_1_106:
0033            698            ds 2
0035            699   _BMM150_compensate_y_retval_1_115:
0035            700            ds 2
0037            701   _BMM150_compensate_y_process_comp_y0_1_115:
0037            702            ds 2
0039            703   _BMM150_Read_Data_x_val_1_124:
0039            704            ds 2
003B            705   _BMM150_Read_Data_y_val_1_124:
003B            706            ds 2
003D            707   _BMM150_Read_Data_rhall_val_1_124:
003D            708            ds 2
003F            709   _ReadHX711_dataa_1_174:
003F            710            ds 4
0043            711   _ReadHX711_j_1_174:
0043            712            ds 1
0044            713   _Read_angle_mag_x_1_228:
0044            714            ds 2
0046            715   _Read_angle_mag_y_1_228:
0046            716            ds 2
0048            717   _Read_angle_sum_x_1_228:
0048            718            ds 4
004C            719   _Read_angle_sum_y_1_228:
004C            720            ds 4
0050            721   _Read_angle_angle_1_228:
0050            722            ds 4
0054            723   _Auto_mode_slave_command_1_230:
0054            724            ds 2
0056            725   _Auto_mode_slave_state_res_1_230:
0056            726            ds 2
0058            727   _Auto_mode_slave_dummy_1_230:
0058            728            ds 2
005A            729   _Joystick_Control_vx_error_1_242:
005A            730            ds 2
005C            731   _Joystick_Control_vy_error_1_242:
005C            732            ds 2
005E            733   _Joystick_Control_vx_err_1_242:
005E            734            ds 2
0060            735   _Joystick_Control_vy_err_1_242:
0060            736            ds 2
0062            737   _main_vx_1_265:
0062            738            ds 2
0064            739   _main_vy_1_265:
0064            740            ds 2
0066            741   _main_auto_mode_1_265:
0066            742            ds 2
0068            743   _main_pick_char_1_265:
0068            744            ds 1
0069            745   ;--------------------------------------------------------
0069            746   ; absolute external ram data
0069            747   ;--------------------------------------------------------
0000            748            XSEG
0000            749   ;--------------------------------------------------------
0000            750   ; external initialized ram data
0000            751   ;--------------------------------------------------------
0000            752            rseg R_IXSEG
0000            753   _pwm_counter:
0000            754            ds 2
0002            755   _servo_counter:
0002            756            ds 2
0004            757   _pwm_left:
0004            758            ds 1
0005            759   _pwm_right:
0005            760            ds 1
0006            761   _L_motor_dir:
0006            762            ds 1
0007            763   _R_motor_dir:
0007            764            ds 1
0008            765   _servo_base:
0008            766            ds 1
0009            767   _servo_arm:
0009            768            ds 1
000A            769   _vx_thres:
000A            770            ds 2
000C            771   _vy_thres:
000C            772            ds 2
000E            773   _vx:
000E            774            ds 2
0010            775   _vy:
0010            776            ds 2
0012            777   _fre_mea_count:
0012            778            ds 2
0014            779   _weight_mea_count:
0014            780            ds 2
0016            781   _seed:
0016            782            ds 2
0018            783   _pwm_corr:
0018            784            ds 4
001C            785   _curr_angle:
001C            786            ds 4
0020            787   _raw_angle:
0020            788            ds 4
0024            789   _last_raw_angle:
0024            790            ds 4
0028            791   _angle_diff:
0028            792            ds 4
002C            793   _mea_yes:
002C            794            ds 1
002D            795   _weight:
002D            796            ds 2
002F            797   _duration:
002F            798            ds 4
0000            799            rseg R_HOME
0000            800            rseg R_GSINIT
0000            801            rseg R_CSEG
0000            802   ;--------------------------------------------------------
0000            803   ; Reset entry point and interrupt vectors
0000            804   ;--------------------------------------------------------
0000            805            CSEG at 0x0000
0000 020000     806            ljmp    _crt0
0093            807            CSEG at 0x0093
0093 020000     808            ljmp    _Timer5_ISR
0096            809   ;--------------------------------------------------------
0096            810   ; global & static initialisations
0096            811   ;--------------------------------------------------------
0000            812            rseg R_HOME
0000            813            rseg R_GSINIT
0000            814            rseg R_GSINIT
0000            815   ;--------------------------------------------------------
0000            816   ; data variables initialization
0000            817   ;--------------------------------------------------------
0000            818            rseg R_DINIT
0000            819            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            820   ;--------------------------------------------------------
0000            821   ; code
0000            822   ;--------------------------------------------------------
0000            823            rseg R_CSEG
0000            824   ;------------------------------------------------------------
0000            825   ;Allocation info for local variables in function '_c51_external_startup'
0000            826   ;------------------------------------------------------------
0000            827   ;------------------------------------------------------------
0000            828   ;        main.c:118: char _c51_external_startup (void)
0000            829   ;        -----------------------------------------
0000            830   ;         function _c51_external_startup
0000            831   ;        -----------------------------------------
0000            832   __c51_external_startup:
0000            833            using   0
0000            834   ;        main.c:121: SFRPAGE = 0x00;
0000 75A700     835            mov     _SFRPAGE,#0x00
0003            836   ;        main.c:122: WDTCN = 0xDE; //First key
0003 7597DE     837            mov     _WDTCN,#0xDE
0006            838   ;        main.c:123: WDTCN = 0xAD; //Second key
0006 7597AD     839            mov     _WDTCN,#0xAD
0009            840   ;        main.c:125: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     841            mov     _VDM0CN,#0x80
000C            842   ;        main.c:126: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     843            mov     _RSTSRC,#0x06
000F            844   ;        main.c:133: SFRPAGE = 0x10;
000F 75A710     845            mov     _SFRPAGE,#0x10
0012            846   ;        main.c:134: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     847            mov     _PFE0CN,#0x20
0015            848   ;        main.c:135: SFRPAGE = 0x00;
0015 75A700     849            mov     _SFRPAGE,#0x00
0018            850   ;        main.c:156: CLKSEL = 0x00;
0018 75A900     851            mov     _CLKSEL,#0x00
001B            852   ;        main.c:157: CLKSEL = 0x00;
001B 75A900     853            mov     _CLKSEL,#0x00
001E            854   ;        main.c:158: while ((CLKSEL & 0x80) == 0);
001E            855   L002001?:
001E E5A9       856            mov     a,_CLKSEL
0020 30E7B0     857            jnb     acc.7,L002001?
0023            858   ;        main.c:159: CLKSEL = 0x03;
0023 75A903     859            mov     _CLKSEL,#0x03
0026            860   ;        main.c:160: CLKSEL = 0x03;
0026 75A903     861            mov     _CLKSEL,#0x03
0029            862   ;        main.c:161: while ((CLKSEL & 0x80) == 0);
0029            863   L002004?:
0029 E5A9       864            mov     a,_CLKSEL
002B 30E730     865            jnb     acc.7,L002004?
002E            866   ;        main.c:167: P0MDOUT |= 0b_1100_0000;
002E 43A4C0     867            orl     _P0MDOUT,#0xC0
0031            868   ;        main.c:168: P1MDOUT |= 0b_0000_0110;
0031 43A506     869            orl     _P1MDOUT,#0x06
0034            870   ;        main.c:169: P2MDOUT |= 0b_0000_0001; // P2.0 in push-pull mode
0034 43A601     871            orl     _P2MDOUT,#0x01
0037            872   ;        main.c:170: XBR0     = 0b_0000_0011; // UART0E = 1 and SPI0E = 1 0b_0000_0011               
0037 75E103     873            mov     _XBR0,#0x03
003A            874   ;        main.c:171: XBR1     = 0b_0000_0000;
003A 75E200     875            mov     _XBR1,#0x00
003D            876   ;        main.c:172: XBR2     = 0b_0100_0001; // Enable crossbar and uart 1
003D 75E341     877            mov     _XBR2,#0x41
0040            878   ;        main.c:173: P0SKIP       = 0b_0000_0111; 
0040 75D407     879            mov     _P0SKIP,#0x07
0043            880   ;        main.c:174: P1SKIP   = 0b_1111_1001;
0043 75D5F9     881            mov     _P1SKIP,#0xF9
0046            882   ;        main.c:179: SCON0 = 0x10;
0046 759810     883            mov     _SCON0,#0x10
0049            884   ;        main.c:180: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     885            mov     _TH1,#0xE6
004C            886   ;        main.c:181: TL1 = TH1;      // Init Timer1
004C 858D8B     887            mov     _TL1,_TH1
004F            888   ;        main.c:182: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     889            anl     _TMOD,#0x0F
0052            890   ;        main.c:183: TMOD |=  0x20;                       
0052 438920     891            orl     _TMOD,#0x20
0055            892   ;        main.c:184: TR1 = 1; // START Timer1
0055 D28E       893            setb    _TR1
0057            894   ;        main.c:185: TI = 1;  // Indicate TX0 ready
0057 D299       895            setb    _TI
0059            896   ;        main.c:186: P2_0=1; // 'set' pin to 1 is normal operation mode.
0059 D2A0       897            setb    _P2_0
005B            898   ;        main.c:189: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
005B 75A211     899            mov     _SPI0CKR,#0x11
005E            900   ;        main.c:190: SPI0CFG = 0b_1110_0000; // SPI mode 3
005E 75A1E0     901            mov     _SPI0CFG,#0xE0
0061            902   ;        main.c:191: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0061 75F801     903            mov     _SPI0CN0,#0x01
0064            904   ;        main.c:194: SFRPAGE=0x10;
0064 75A710     905            mov     _SFRPAGE,#0x10
0067            906   ;        main.c:195: TMR5CN0=0x00;
0067 75C000     907            mov     _TMR5CN0,#0x00
006A            908   ;        main.c:196: TMR5=0xffff;   // Set to reload immediately
006A 75D4FF     909            mov     _TMR5,#0xFF
006D 75D5FF     910            mov     (_TMR5 >> 8),#0xFF
0070            911   ;        main.c:197: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
0070 43F308     912            orl     _EIE2,#0x08
0073            913   ;        main.c:198: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0073 D2C2       914            setb    _TR5
0075            915   ;        main.c:200: EA=1;  // Enable global interrupts
0075 D2AF       916            setb    _EA
0077            917   ;        main.c:201: SFRPAGE=0x00;
0077 75A700     918            mov     _SFRPAGE,#0x00
007A            919   ;        main.c:203: return 0;
007A 758200     920            mov     dpl,#0x00
007D 22         921            ret
007E            922   ;------------------------------------------------------------
007E            923   ;Allocation info for local variables in function 'Timer3us'
007E            924   ;------------------------------------------------------------
007E            925   ;us                        Allocated to registers r2 
007E            926   ;i                         Allocated to registers r3 
007E            927   ;------------------------------------------------------------
007E            928   ;        main.c:207: void Timer3us(unsigned char us)
007E            929   ;        -----------------------------------------
007E            930   ;         function Timer3us
007E            931   ;        -----------------------------------------
007E            932   _Timer3us:
007E AA82       933            mov     r2,dpl
0080            934   ;        main.c:212: CKCON0|=0b_0100_0000;
0080 438E40     935            orl     _CKCON0,#0x40
0083            936   ;        main.c:214: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0083 7592B8     937            mov     _TMR3RL,#0xB8
0086 7593FF     938            mov     (_TMR3RL >> 8),#0xFF
0089            939   ;        main.c:215: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0089 859294     940            mov     _TMR3,_TMR3RL
008C 859395     941            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
008F            942   ;        main.c:217: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
008F 759104     943            mov     _TMR3CN0,#0x04
0092            944   ;        main.c:218: for (i = 0; i < us; i++)       // Count <us> overflows
0092 7B00       945            mov     r3,#0x00
0094            946   L003004?:
0094 C3         947            clr     c
0095 EB         948            mov     a,r3
0096 9A         949            subb    a,r2
0097 5000       950            jnc     L003007?
0099            951   ;        main.c:220: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0099            952   L003001?:
0099 E591       953            mov     a,_TMR3CN0
009B 30E730     954            jnb     acc.7,L003001?
009E            955   ;        main.c:221: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
009E 53917F     956            anl     _TMR3CN0,#0x7F
00A1            957   ;        main.c:218: for (i = 0; i < us; i++)       // Count <us> overflows
00A1 0B         958            inc     r3
00A2 8000       959            sjmp    L003004?
00A4            960   L003007?:
00A4            961   ;        main.c:223: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00A4 759100     962            mov     _TMR3CN0,#0x00
00A7 22         963            ret
00A8            964   ;------------------------------------------------------------
00A8            965   ;Allocation info for local variables in function 'waitms'
00A8            966   ;------------------------------------------------------------
00A8            967   ;ms                        Allocated to registers r2 r3 
00A8            968   ;j                         Allocated to registers r4 r5 
00A8            969   ;k                         Allocated to registers r6 
00A8            970   ;------------------------------------------------------------
00A8            971   ;        main.c:226: void waitms (unsigned int ms)
00A8            972   ;        -----------------------------------------
00A8            973   ;         function waitms
00A8            974   ;        -----------------------------------------
00A8            975   _waitms:
00A8 AA82       976            mov     r2,dpl
00AA AB83       977            mov     r3,dph
00AC            978   ;        main.c:230: for(j=0; j<ms; j++)
00AC 7C00       979            mov     r4,#0x00
00AE 7D00       980            mov     r5,#0x00
00B0            981   L004005?:
00B0 C3         982            clr     c
00B1 EC         983            mov     a,r4
00B2 9A         984            subb    a,r2
00B3 ED         985            mov     a,r5
00B4 9B         986            subb    a,r3
00B5 5000       987            jnc     L004009?
00B7            988   ;        main.c:231: for (k=0; k<4; k++) Timer3us(250);
00B7 7E00       989            mov     r6,#0x00
00B9            990   L004001?:
00B9 BE0470     991            cjne    r6,#0x04,L004018?
00BC            992   L004018?:
00BC 5000       993            jnc     L004007?
00BE 7582FA     994            mov     dpl,#0xFA
00C1 C002       995            push    ar2
00C3 C003       996            push    ar3
00C5 C004       997            push    ar4
00C7 C005       998            push    ar5
00C9 C006       999            push    ar6
00CB 120000    1000            lcall   _Timer3us
00CE D006      1001            pop     ar6
00D0 D005      1002            pop     ar5
00D2 D004      1003            pop     ar4
00D4 D003      1004            pop     ar3
00D6 D002      1005            pop     ar2
00D8 0E        1006            inc     r6
00D9 8000      1007            sjmp    L004001?
00DB           1008   L004007?:
00DB           1009   ;        main.c:230: for(j=0; j<ms; j++)
00DB 0C        1010            inc     r4
00DC BC00B0    1011            cjne    r4,#0x00,L004005?
00DF 0D        1012            inc     r5
00E0 8000      1013            sjmp    L004005?
00E2           1014   L004009?:
00E2 22        1015            ret
00E3           1016   ;------------------------------------------------------------
00E3           1017   ;Allocation info for local variables in function 'SPI_transfer'
00E3           1018   ;------------------------------------------------------------
00E3           1019   ;tx_data                   Allocated to registers 
00E3           1020   ;------------------------------------------------------------
00E3           1021   ;        main.c:234: unsigned char SPI_transfer(unsigned char tx_data)
00E3           1022   ;        -----------------------------------------
00E3           1023   ;         function SPI_transfer
00E3           1024   ;        -----------------------------------------
00E3           1025   _SPI_transfer:
00E3 8582A3    1026            mov     _SPI0DAT,dpl
00E6           1027   ;        main.c:237: while (!SPIF);      // Wait for transfer to complete
00E6           1028   L005001?:
00E6           1029   ;        main.c:238: SPIF = 0;           // Clear SPI interrupt flag
00E6 10FF30    1030            jbc     _SPIF,L005008?
00E9 8000      1031            sjmp    L005001?
00EB           1032   L005008?:
00EB           1033   ;        main.c:239: return SPI0DAT;     // Return received data
00EB 85A382    1034            mov     dpl,_SPI0DAT
00EE 22        1035            ret
00EF           1036   ;------------------------------------------------------------
00EF           1037   ;Allocation info for local variables in function 'SPI_read'
00EF           1038   ;------------------------------------------------------------
00EF           1039   ;reg_addr                  Allocated to registers r2 
00EF           1040   ;value                     Allocated with name '_SPI_read_value_1_93'
00EF           1041   ;------------------------------------------------------------
00EF           1042   ;        main.c:242: unsigned char SPI_read(unsigned char reg_addr)
00EF           1043   ;        -----------------------------------------
00EF           1044   ;         function SPI_read
00EF           1045   ;        -----------------------------------------
00EF           1046   _SPI_read:
00EF AA82      1047            mov     r2,dpl
00F1           1048   ;        main.c:247: reg_addr = reg_addr | 0x80;
00F1 430280    1049            orl     ar2,#0x80
00F4           1050   ;        main.c:249: CS = 0;                // Select the device
00F4 C290      1051            clr     _P1_0
00F6           1052   ;        main.c:250: SPI_transfer(reg_addr);     // Send register address
00F6 8A82      1053            mov     dpl,r2
00F8 120000    1054            lcall   _SPI_transfer
00FB           1055   ;        main.c:251: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
00FB 758200    1056            mov     dpl,#0x00
00FE 120000    1057            lcall   _SPI_transfer
0101           1058   ;        main.c:252: CS = 1;                // Deselect the device
0101 D290      1059            setb    _P1_0
0103           1060   ;        main.c:254: return value;
0103 22        1061            ret
0104           1062   ;------------------------------------------------------------
0104           1063   ;Allocation info for local variables in function 'SPI_write'
0104           1064   ;------------------------------------------------------------
0104           1065   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0104           1066   ;reg_addr                  Allocated to registers r2 
0104           1067   ;------------------------------------------------------------
0104           1068   ;        main.c:257: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0104           1069   ;        -----------------------------------------
0104           1070   ;         function SPI_write
0104           1071   ;        -----------------------------------------
0104           1072   _SPI_write:
0104 AA82      1073            mov     r2,dpl
0106           1074   ;        main.c:260: reg_addr = reg_addr & 0x7F;
0106 53027F    1075            anl     ar2,#0x7F
0109           1076   ;        main.c:262: CS = 0;                // Select device
0109 C290      1077            clr     _P1_0
010B           1078   ;        main.c:263: SPI_transfer(reg_addr);     // Send register address
010B 8A82      1079            mov     dpl,r2
010D 120000    1080            lcall   _SPI_transfer
0110           1081   ;        main.c:264: SPI_transfer(reg_value);    // Send value
0110 85B082    1082            mov     dpl,_SPI_write_PARM_2
0113 120000    1083            lcall   _SPI_transfer
0116           1084   ;        main.c:265: CS = 1;                // Deselect device
0116 D290      1085            setb    _P1_0
0118 22        1086            ret
0119           1087   ;------------------------------------------------------------
0119           1088   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
0119           1089   ;------------------------------------------------------------
0119           1090   ;i                         Allocated with name '_BMM150_Read_Trim_Registers_i_1_97'
0119           1091   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_97'
0119           1092   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_97'
0119           1093   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_97'
0119           1094   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97'
0119           1095   ;------------------------------------------------------------
0119           1096   ;        main.c:268: void BMM150_Read_Trim_Registers(void)
0119           1097   ;        -----------------------------------------
0119           1098   ;         function BMM150_Read_Trim_Registers
0119           1099   ;        -----------------------------------------
0119           1100   _BMM150_Read_Trim_Registers:
0119           1101   ;        main.c:272: xdata uint8_t trim_x1y1[2] = {0};
0119 90CC40    1102            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
011C           1103   ;        main.c:273: xdata uint8_t trim_xyz_data[4] = {0};
011C E4        1104            clr     a
011D F0        1105            movx    @dptr,a
011E 90CC41    1106            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
0121 F0        1107            movx    @dptr,a
0122 90CCA0    1108            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0125 F0        1109            movx    @dptr,a
0126 90CCA1    1110            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0001)
0129 F0        1111            movx    @dptr,a
012A 90CCA2    1112            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
012D           1113   ;        main.c:274: xdata uint8_t trim_xy1xy2[10] = {0};
012D E4        1114            clr     a
012E F0        1115            movx    @dptr,a
012F 90CCA3    1116            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0132 F0        1117            movx    @dptr,a
0133 90CD00    1118            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0136 F0        1119            movx    @dptr,a
0137 90CD01    1120            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0001)
013A F0        1121            movx    @dptr,a
013B 90CD02    1122            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0002)
013E E4        1123            clr     a
013F F0        1124            movx    @dptr,a
0140 90CD03    1125            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0003)
0143 F0        1126            movx    @dptr,a
0144 90CD04    1127            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0147 F0        1128            movx    @dptr,a
0148 90CD05    1129            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
014B F0        1130            movx    @dptr,a
014C 90CD06    1131            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0006)
014F E4        1132            clr     a
0150 F0        1133            movx    @dptr,a
0151 90CD07    1134            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0007)
0154 F0        1135            movx    @dptr,a
0155 90CD08    1136            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0158 F0        1137            movx    @dptr,a
0159 90CD09    1138            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
015C F0        1139            movx    @dptr,a
015D           1140   ;        main.c:277: for (i=0;i<2;i++){
015D 7A00      1141            mov     r2,#0x00
015F           1142   L008001?:
015F BA02B0    1143            cjne    r2,#0x02,L008024?
0162           1144   L008024?:
0162 5000      1145            jnc     L008004?
0164           1146   ;        main.c:278: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
0164 EA        1147            mov     a,r2
0165 2440      1148            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0167 FB        1149            mov     r3,a
0168 E4        1150            clr     a
0169 34CC      1151            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 >> 8)
016B FC        1152            mov     r4,a
016C 745D      1153            mov     a,#0x5D
016E 2A        1154            add     a,r2
016F F582      1155            mov     dpl,a
0171 C002      1156            push    ar2
0173 C003      1157            push    ar3
0175 C004      1158            push    ar4
0177 120000    1159            lcall   _SPI_read
017A AD82      1160            mov     r5,dpl
017C D004      1161            pop     ar4
017E D003      1162            pop     ar3
0180 D002      1163            pop     ar2
0182 8B82      1164            mov     dpl,r3
0184 8C83      1165            mov     dph,r4
0186 ED        1166            mov     a,r5
0187 F0        1167            movx    @dptr,a
0188           1168   ;        main.c:277: for (i=0;i<2;i++){
0188 0A        1169            inc     r2
0189 8000      1170            sjmp    L008001?
018B           1171   L008004?:
018B           1172   ;        main.c:280: for (i=0;i<4;i++){
018B 7A00      1173            mov     r2,#0x00
018D           1174   L008005?:
018D BA0470    1175            cjne    r2,#0x04,L008026?
0190           1176   L008026?:
0190 5000      1177            jnc     L008008?
0192           1178   ;        main.c:281: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
0192 EA        1179            mov     a,r2
0193 24A0      1180            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0195 FB        1181            mov     r3,a
0196 E4        1182            clr     a
0197 34CC      1183            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 >> 8)
0199 FC        1184            mov     r4,a
019A 7462      1185            mov     a,#0x62
019C 2A        1186            add     a,r2
019D F582      1187            mov     dpl,a
019F C002      1188            push    ar2
01A1 C003      1189            push    ar3
01A3 C004      1190            push    ar4
01A5 120000    1191            lcall   _SPI_read
01A8 AD82      1192            mov     r5,dpl
01AA D004      1193            pop     ar4
01AC D003      1194            pop     ar3
01AE D002      1195            pop     ar2
01B0 8B82      1196            mov     dpl,r3
01B2 8C83      1197            mov     dph,r4
01B4 ED        1198            mov     a,r5
01B5 F0        1199            movx    @dptr,a
01B6           1200   ;        main.c:280: for (i=0;i<4;i++){
01B6 0A        1201            inc     r2
01B7 8000      1202            sjmp    L008005?
01B9           1203   L008008?:
01B9           1204   ;        main.c:283: for (i=0;i<10;i++){
01B9 7A00      1205            mov     r2,#0x00
01BB           1206   L008009?:
01BB BA0A30    1207            cjne    r2,#0x0A,L008028?
01BE           1208   L008028?:
01BE 5000      1209            jnc     L008012?
01C0           1210   ;        main.c:284: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
01C0 EA        1211            mov     a,r2
01C1 2400      1212            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
01C3 FB        1213            mov     r3,a
01C4 E4        1214            clr     a
01C5 34CD      1215            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 >> 8)
01C7 FC        1216            mov     r4,a
01C8 7468      1217            mov     a,#0x68
01CA 2A        1218            add     a,r2
01CB F582      1219            mov     dpl,a
01CD C002      1220            push    ar2
01CF C003      1221            push    ar3
01D1 C004      1222            push    ar4
01D3 120000    1223            lcall   _SPI_read
01D6 AD82      1224            mov     r5,dpl
01D8 D004      1225            pop     ar4
01DA D003      1226            pop     ar3
01DC D002      1227            pop     ar2
01DE 8B82      1228            mov     dpl,r3
01E0 8C83      1229            mov     dph,r4
01E2 ED        1230            mov     a,r5
01E3 F0        1231            movx    @dptr,a
01E4           1232   ;        main.c:283: for (i=0;i<10;i++){
01E4 0A        1233            inc     r2
01E5 8000      1234            sjmp    L008009?
01E7           1235   L008012?:
01E7           1236   ;        main.c:287: dig_x1 = (int8_t) trim_x1y1[0]; 
01E7 90CC40    1237            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
01EA E0        1238            movx    a,@dptr
01EB 9055E0    1239            mov     dptr,#_dig_x1
01EE F0        1240            movx    @dptr,a
01EF           1241   ;        main.c:288: dig_y1 = (int8_t) trim_x1y1[1]; 
01EF 90CC41    1242            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
01F2 E0        1243            movx    a,@dptr
01F3 905560    1244            mov     dptr,#_dig_y1
01F6 F0        1245            movx    @dptr,a
01F7           1246   ;        main.c:289: dig_x2 = (int8_t) trim_xyz_data[2]; 
01F7 90CCA2    1247            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
01FA E0        1248            movx    a,@dptr
01FB 9055A0    1249            mov     dptr,#_dig_x2
01FE F0        1250            movx    @dptr,a
01FF           1251   ;        main.c:290: dig_y2 = (int8_t) trim_xyz_data[3]; 
01FF 90CCA3    1252            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0202 E0        1253            movx    a,@dptr
0203 905520    1254            mov     dptr,#_dig_y2
0206 F0        1255            movx    @dptr,a
0207           1256   ;        main.c:304: dig_xy1 = trim_xy1xy2[9];
0207 90CD09    1257            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
020A E0        1258            movx    a,@dptr
020B 9053E0    1259            mov     dptr,#_dig_xy1
020E F0        1260            movx    @dptr,a
020F           1261   ;        main.c:305: dig_xy2 = (int8_t)trim_xy1xy2[8];
020F 90CD08    1262            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0212 E0        1263            movx    a,@dptr
0213 9053A0    1264            mov     dptr,#_dig_xy2
0216 F0        1265            movx    @dptr,a
0217           1266   ;        main.c:307: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
0217 90CD05    1267            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
021A E0        1268            movx    a,@dptr
021B FA        1269            mov     r2,a
021C 53027F    1270            anl     ar2,#0x7F
021F 8A03      1271            mov     ar3,r2
0221 7A00      1272            mov     r2,#0x00
0223           1273   ;        main.c:308: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
0223 90CD04    1274            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0226 E0        1275            movx    a,@dptr
0227 FC        1276            mov     r4,a
0228 7D00      1277            mov     r5,#0x00
022A 905360    1278            mov     dptr,#_dig_xyz1
022D EC        1279            mov     a,r4
022E 4A        1280            orl     a,r2
022F F0        1281            movx    @dptr,a
0230 ED        1282            mov     a,r5
0231 4B        1283            orl     a,r3
0232 A3        1284            inc     dptr
0233 F0        1285            movx    @dptr,a
0234 22        1286            ret
0235           1287   ;------------------------------------------------------------
0235           1288   ;Allocation info for local variables in function 'BMM150_Init'
0235           1289   ;------------------------------------------------------------
0235           1290   ;chip_id                   Allocated with name '_BMM150_Init_chip_id_1_102'
0235           1291   ;------------------------------------------------------------
0235           1292   ;        main.c:312: void BMM150_Init(void)
0235           1293   ;        -----------------------------------------
0235           1294   ;         function BMM150_Init
0235           1295   ;        -----------------------------------------
0235           1296   _BMM150_Init:
0235           1297   ;        main.c:317: CS = 1; // Deselect BMM150
0235 D290      1298            setb    _P1_0
0237           1299   ;        main.c:320: waitms(10);
0237 90000A    1300            mov     dptr,#0x000A
023A 120000    1301            lcall   _waitms
023D           1302   ;        main.c:323: SPI_write(BMM150_POWER_CONTROL, 0x82);
023D 75B082    1303            mov     _SPI_write_PARM_2,#0x82
0240 75824B    1304            mov     dpl,#0x4B
0243 120000    1305            lcall   _SPI_write
0246           1306   ;        main.c:324: waitms(10);  // Wait for reset to complete
0246 90000A    1307            mov     dptr,#0x000A
0249 120000    1308            lcall   _waitms
024C           1309   ;        main.c:327: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
024C 75B001    1310            mov     _SPI_write_PARM_2,#0x01
024F 75824B    1311            mov     dpl,#0x4B
0252 120000    1312            lcall   _SPI_write
0255           1313   ;        main.c:328: waitms(5);
0255 900005    1314            mov     dptr,#0x0005
0258 120000    1315            lcall   _waitms
025B           1316   ;        main.c:331: chip_id = SPI_read(BMM150_CHIP_ID);
025B 758240    1317            mov     dpl,#0x40
025E 120000    1318            lcall   _SPI_read
0261 AA82      1319            mov     r2,dpl
0263           1320   ;        main.c:332: if (chip_id != BMM150_CHIP_ID_VALUE)
0263 BA32B0    1321            cjne    r2,#0x32,L009006?
0266 8000      1322            sjmp    L009002?
0268           1323   L009006?:
0268           1324   ;        main.c:334: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
0268 8A03      1325            mov     ar3,r2
026A 7C00      1326            mov     r4,#0x00
026C C002      1327            push    ar2
026E C003      1328            push    ar3
0270 C004      1329            push    ar4
0272 7430      1330            mov     a,#__str_0
0274 C0E0      1331            push    acc
0276 74DC      1332            mov     a,#(__str_0 >> 8)
0278 C0E0      1333            push    acc
027A 7480      1334            mov     a,#0x80
027C C0E0      1335            push    acc
027E 120000    1336            lcall   _printf
0281 E581      1337            mov     a,sp
0283 24FB      1338            add     a,#0xfb
0285 F581      1339            mov     sp,a
0287 D002      1340            pop     ar2
0289           1341   L009002?:
0289           1342   ;        main.c:344: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
0289 75B000    1343            mov     _SPI_write_PARM_2,#0x00
028C 75824C    1344            mov     dpl,#0x4C
028F C002      1345            push    ar2
0291 120000    1346            lcall   _SPI_write
0294           1347   ;        main.c:347: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
0294 75B07F    1348            mov     _SPI_write_PARM_2,#0x7F
0297 758251    1349            mov     dpl,#0x51
029A 120000    1350            lcall   _SPI_write
029D           1351   ;        main.c:348: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
029D 75B00E    1352            mov     _SPI_write_PARM_2,#0x0E
02A0 758252    1353            mov     dpl,#0x52
02A3 120000    1354            lcall   _SPI_write
02A6           1355   ;        main.c:350: BMM150_Read_Trim_Registers();
02A6 120000    1356            lcall   _BMM150_Read_Trim_Registers
02A9           1357   ;        main.c:352: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
02A9 7B00      1358            mov     r3,#0x00
02AB C003      1359            push    ar3
02AD 74F0      1360            mov     a,#__str_1
02AF C0E0      1361            push    acc
02B1 74DC      1362            mov     a,#(__str_1 >> 8)
02B3 C0E0      1363            push    acc
02B5 7480      1364            mov     a,#0x80
02B7 C0E0      1365            push    acc
02B9 120000    1366            lcall   _printf
02BC E581      1367            mov     a,sp
02BE 24FB      1368            add     a,#0xfb
02C0 F581      1369            mov     sp,a
02C2           1370   ;        main.c:353: return; 
02C2 22        1371            ret
02C3           1372   ;------------------------------------------------------------
02C3           1373   ;Allocation info for local variables in function 'BMM150_compensate_x'
02C3           1374   ;------------------------------------------------------------
02C3           1375   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
02C3           1376   ;mag_data_x                Allocated to registers r2 r3 r4 
02C3           1377   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
02C3           1378   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_106'
02C3           1379   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_106'
02C3           1380   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_106'
02C3           1381   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_106'
02C3           1382   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_106'
02C3           1383   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_106'
02C3           1384   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_106'
02C3           1385   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_106'
02C3           1386   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_106'
02C3           1387   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_106'
02C3           1388   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_106'
02C3           1389   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_106'
02C3           1390   ;------------------------------------------------------------
02C3           1391   ;        main.c:356: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
02C3           1392   ;        -----------------------------------------
02C3           1393   ;         function BMM150_compensate_x
02C3           1394   ;        -----------------------------------------
02C3           1395   _BMM150_compensate_x:
02C3           1396   ;        main.c:374: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
02C3 ACF0      1397            mov     r4,b
02C5 120000    1398            lcall   __gptrget
02C8 FA        1399            mov     r2,a
02C9 A3        1400            inc     dptr
02CA 120000    1401            lcall   __gptrget
02CD FB        1402            mov     r3,a
02CE BA00B0    1403            cjne    r2,#0x00,L010019?
02D1 BBF0B0    1404            cjne    r3,#0xF0,L010019?
02D4 020000    1405            ljmp    L010011?
02D7           1406   L010019?:
02D7           1407   ;        main.c:375: if (*data_rhall != 0)
02D7 AC60      1408            mov     r4,_BMM150_compensate_x_PARM_2
02D9 AD61      1409            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
02DB AE62      1410            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
02DD 8C82      1411            mov     dpl,r4
02DF 8D83      1412            mov     dph,r5
02E1 8EF0      1413            mov     b,r6
02E3 120000    1414            lcall   __gptrget
02E6 FC        1415            mov     r4,a
02E7 A3        1416            inc     dptr
02E8 120000    1417            lcall   __gptrget
02EB FD        1418            mov     r5,a
02EC 4C        1419            orl     a,r4
02ED 6000      1420            jz      L010005?
02EF           1421   ;        main.c:378: process_comp_x0 = *data_rhall;
02EF 90CDC0    1422            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
02F2 EC        1423            mov     a,r4
02F3 F0        1424            movx    @dptr,a
02F4 A3        1425            inc     dptr
02F5 ED        1426            mov     a,r5
02F6 F0        1427            movx    @dptr,a
02F7 8000      1428            sjmp    L010006?
02F9           1429   L010005?:
02F9           1430   ;        main.c:380: else if (dig_xyz1 != 0)
02F9 905360    1431            mov     dptr,#_dig_xyz1
02FC E0        1432            movx    a,@dptr
02FD FC        1433            mov     r4,a
02FE A3        1434            inc     dptr
02FF E0        1435            movx    a,@dptr
0300 FD        1436            mov     r5,a
0301 4C        1437            orl     a,r4
0302 6000      1438            jz      L010002?
0304           1439   ;        main.c:382: process_comp_x0 = dig_xyz1;
0304 90CDC0    1440            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0307 EC        1441            mov     a,r4
0308 F0        1442            movx    @dptr,a
0309 A3        1443            inc     dptr
030A ED        1444            mov     a,r5
030B F0        1445            movx    @dptr,a
030C 8000      1446            sjmp    L010006?
030E           1447   L010002?:
030E           1448   ;        main.c:386: process_comp_x0 = 0;
030E 90CDC0    1449            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0311 E4        1450            clr     a
0312 F0        1451            movx    @dptr,a
0313 A3        1452            inc     dptr
0314 F0        1453            movx    @dptr,a
0315           1454   L010006?:
0315           1455   ;        main.c:388: if (process_comp_x0 != 0)
0315 90CDC0    1456            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_106
0318 E0        1457            movx    a,@dptr
0319 FC        1458            mov     r4,a
031A A3        1459            inc     dptr
031B E0        1460            movx    a,@dptr
031C FD        1461            mov     r5,a
031D 4C        1462            orl     a,r4
031E 7000      1463            jnz     L010022?
0320 020000    1464            ljmp    L010008?
0323           1465   L010022?:
0323           1466   ;        main.c:391: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
0323 905360    1467            mov     dptr,#_dig_xyz1
0326 E0        1468            movx    a,@dptr
0327 FE        1469            mov     r6,a
0328 A3        1470            inc     dptr
0329 E0        1471            movx    a,@dptr
032A FF        1472            mov     r7,a
032B E4        1473            clr     a
032C F8        1474            mov     r0,a
032D EF        1475            mov     a,r7
032E C8        1476            xch     a,r0
032F 5403      1477            anl     a,#0x03
0331 A2E0      1478            mov     c,acc.0
0333 C8        1479            xch     a,r0
0334 13        1480            rrc     a
0335 C8        1481            xch     a,r0
0336 13        1482            rrc     a
0337 A2E0      1483            mov     c,acc.0
0339 C8        1484            xch     a,r0
033A 13        1485            rrc     a
033B C8        1486            xch     a,r0
033C 13        1487            rrc     a
033D C8        1488            xch     a,r0
033E F9        1489            mov     r1,a
033F EE        1490            mov     a,r6
0340 03        1491            rr      a
0341 03        1492            rr      a
0342 54C0      1493            anl     a,#0xc0
0344 FF        1494            mov     r7,a
0345 EE        1495            mov     a,r6
0346 03        1496            rr      a
0347 03        1497            rr      a
0348 543F      1498            anl     a,#0x3f
034A 48        1499            orl     a,r0
034B F8        1500            mov     r0,a
034C 7E00      1501            mov     r6,#0x00
034E           1502   ;        main.c:392: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
034E 8C00      1503            mov     __divslong_PARM_2,r4
0350 8D01      1504            mov     (__divslong_PARM_2 + 1),r5
0352 750200    1505            mov     (__divslong_PARM_2 + 2),#0x00
0355 750300    1506            mov     (__divslong_PARM_2 + 3),#0x00
0358 8E82      1507            mov     dpl,r6
035A 8F83      1508            mov     dph,r7
035C 88F0      1509            mov     b,r0
035E E9        1510            mov     a,r1
035F C002      1511            push    ar2
0361 C003      1512            push    ar3
0363 120000    1513            lcall   __divslong
0366 AC82      1514            mov     r4,dpl
0368 E583      1515            mov     a,dph
036A 24C0      1516            add     a,#0xc0
036C FD        1517            mov     r5,a
036D           1518   ;        main.c:394: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
036D 8C06      1519            mov     ar6,r4
036F 8D07      1520            mov     ar7,r5
0371 8EC0      1521            mov     _BMM150_compensate_x_sloc0_1_0,r6
0373 EF        1522            mov     a,r7
0374 F5C1      1523            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
0376 33        1524            rlc     a
0377 95E0      1525            subb    a,acc
0379 F5C2      1526            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
037B F5C3      1527            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
037D 8C06      1528            mov     ar6,r4
037F 8D07      1529            mov     ar7,r5
0381 8E00      1530            mov     __mullong_PARM_2,r6
0383 EF        1531            mov     a,r7
0384 F501      1532            mov     (__mullong_PARM_2 + 1),a
0386 33        1533            rlc     a
0387 95E0      1534            subb    a,acc
0389 F502      1535            mov     (__mullong_PARM_2 + 2),a
038B F503      1536            mov     (__mullong_PARM_2 + 3),a
038D           1537   ;        main.c:395: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
038D 85C082    1538            mov     dpl,_BMM150_compensate_x_sloc0_1_0
0390 85C183    1539            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
0393 85C2F0    1540            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
0396 E5C3      1541            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0398 C004      1542            push    ar4
039A C005      1543            push    ar5
039C 120000    1544            lcall   __mullong
039F 8582C0    1545            mov     _BMM150_compensate_x_sloc0_1_0,dpl
03A2 8583C1    1546            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
03A5 85F0C2    1547            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
03A8 F5C3      1548            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03AA 9053A0    1549            mov     dptr,#_dig_xy2
03AD E0        1550            movx    a,@dptr
03AE FE        1551            mov     r6,a
03AF 33        1552            rlc     a
03B0 95E0      1553            subb    a,acc
03B2 FF        1554            mov     r7,a
03B3 F8        1555            mov     r0,a
03B4 F9        1556            mov     r1,a
03B5 750080    1557            mov     __divslong_PARM_2,#0x80
03B8 E4        1558            clr     a
03B9 F501      1559            mov     (__divslong_PARM_2 + 1),a
03BB F502      1560            mov     (__divslong_PARM_2 + 2),a
03BD F503      1561            mov     (__divslong_PARM_2 + 3),a
03BF 85C082    1562            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03C2 85C183    1563            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03C5 85C2F0    1564            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03C8 E5C3      1565            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03CA C006      1566            push    ar6
03CC C007      1567            push    ar7
03CE C000      1568            push    ar0
03D0 C001      1569            push    ar1
03D2 120000    1570            lcall   __divslong
03D5 858200    1571            mov     __mullong_PARM_2,dpl
03D8 858301    1572            mov     (__mullong_PARM_2 + 1),dph
03DB 85F002    1573            mov     (__mullong_PARM_2 + 2),b
03DE F503      1574            mov     (__mullong_PARM_2 + 3),a
03E0 D001      1575            pop     ar1
03E2 D000      1576            pop     ar0
03E4 D007      1577            pop     ar7
03E6 D006      1578            pop     ar6
03E8           1579   ;        main.c:396: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
03E8 8E82      1580            mov     dpl,r6
03EA 8F83      1581            mov     dph,r7
03EC 88F0      1582            mov     b,r0
03EE E9        1583            mov     a,r1
03EF 120000    1584            lcall   __mullong
03F2 8582C0    1585            mov     _BMM150_compensate_x_sloc0_1_0,dpl
03F5 8583C1    1586            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
03F8 85F0C2    1587            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
03FB F5C3      1588            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03FD D005      1589            pop     ar5
03FF D004      1590            pop     ar4
0401 9053E0    1591            mov     dptr,#_dig_xy1
0404 E0        1592            movx    a,@dptr
0405 FE        1593            mov     r6,a
0406 E4        1594            clr     a
0407 5401      1595            anl     a,#0x01
0409 A2E0      1596            mov     c,acc.0
040B CE        1597            xch     a,r6
040C 13        1598            rrc     a
040D CE        1599            xch     a,r6
040E 13        1600            rrc     a
040F CE        1601            xch     a,r6
0410 8E00      1602            mov     __mullong_PARM_2,r6
0412 F501      1603            mov     (__mullong_PARM_2 + 1),a
0414 33        1604            rlc     a
0415 95E0      1605            subb    a,acc
0417 F502      1606            mov     (__mullong_PARM_2 + 2),a
0419 F503      1607            mov     (__mullong_PARM_2 + 3),a
041B           1608   ;        main.c:397: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
041B ED        1609            mov     a,r5
041C 33        1610            rlc     a
041D 95E0      1611            subb    a,acc
041F FE        1612            mov     r6,a
0420           1613   ;        main.c:398: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
0420 8C82      1614            mov     dpl,r4
0422 8D83      1615            mov     dph,r5
0424 8EF0      1616            mov     b,r6
0426 120000    1617            lcall   __mullong
0429 AC82      1618            mov     r4,dpl
042B AD83      1619            mov     r5,dph
042D AEF0      1620            mov     r6,b
042F FF        1621            mov     r7,a
0430 EC        1622            mov     a,r4
0431 25C0      1623            add     a,_BMM150_compensate_x_sloc0_1_0
0433 FC        1624            mov     r4,a
0434 ED        1625            mov     a,r5
0435 35C1      1626            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
0437 FD        1627            mov     r5,a
0438 EE        1628            mov     a,r6
0439 35C2      1629            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
043B FE        1630            mov     r6,a
043C EF        1631            mov     a,r7
043D 35C3      1632            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
043F FF        1633            mov     r7,a
0440 750000    1634            mov     __divslong_PARM_2,#0x00
0443 750102    1635            mov     (__divslong_PARM_2 + 1),#0x02
0446 750200    1636            mov     (__divslong_PARM_2 + 2),#0x00
0449 750300    1637            mov     (__divslong_PARM_2 + 3),#0x00
044C 8C82      1638            mov     dpl,r4
044E 8D83      1639            mov     dph,r5
0450 8EF0      1640            mov     b,r6
0452 EF        1641            mov     a,r7
0453 120000    1642            lcall   __divslong
0456 AC82      1643            mov     r4,dpl
0458 AD83      1644            mov     r5,dph
045A AEF0      1645            mov     r6,b
045C FF        1646            mov     r7,a
045D 7410      1647            mov     a,#0x10
045F 2E        1648            add     a,r6
0460 FE        1649            mov     r6,a
0461 E4        1650            clr     a
0462 3F        1651            addc    a,r7
0463 FF        1652            mov     r7,a
0464           1653   ;        main.c:399: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
0464 9055A0    1654            mov     dptr,#_dig_x2
0467 E0        1655            movx    a,@dptr
0468 F8        1656            mov     r0,a
0469 33        1657            rlc     a
046A 95E0      1658            subb    a,acc
046C F9        1659            mov     r1,a
046D 74A0      1660            mov     a,#0xA0
046F 28        1661            add     a,r0
0470 F8        1662            mov     r0,a
0471 E4        1663            clr     a
0472 39        1664            addc    a,r1
0473 8800      1665            mov     __mullong_PARM_2,r0
0475 F501      1666            mov     (__mullong_PARM_2 + 1),a
0477 33        1667            rlc     a
0478 95E0      1668            subb    a,acc
047A F502      1669            mov     (__mullong_PARM_2 + 2),a
047C F503      1670            mov     (__mullong_PARM_2 + 3),a
047E           1671   ;        main.c:400: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
047E 8C82      1672            mov     dpl,r4
0480 8D83      1673            mov     dph,r5
0482 8EF0      1674            mov     b,r6
0484 EF        1675            mov     a,r7
0485 120000    1676            lcall   __mullong
0488           1677   ;        main.c:401: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
0488 750000    1678            mov     __divslong_PARM_2,#0x00
048B 750110    1679            mov     (__divslong_PARM_2 + 1),#0x10
048E 750200    1680            mov     (__divslong_PARM_2 + 2),#0x00
0491 750300    1681            mov     (__divslong_PARM_2 + 3),#0x00
0494 120000    1682            lcall   __divslong
0497 858200    1683            mov     __mullong_PARM_2,dpl
049A 858301    1684            mov     (__mullong_PARM_2 + 1),dph
049D 85F002    1685            mov     (__mullong_PARM_2 + 2),b
04A0 F503      1686            mov     (__mullong_PARM_2 + 3),a
04A2 D003      1687            pop     ar3
04A4 D002      1688            pop     ar2
04A6 EB        1689            mov     a,r3
04A7 33        1690            rlc     a
04A8 95E0      1691            subb    a,acc
04AA FC        1692            mov     r4,a
04AB           1693   ;        main.c:402: retval = ((int16_t)(process_comp_x10 / 8192));
04AB 8A82      1694            mov     dpl,r2
04AD 8B83      1695            mov     dph,r3
04AF 8CF0      1696            mov     b,r4
04B1 120000    1697            lcall   __mullong
04B4 750000    1698            mov     __divslong_PARM_2,#0x00
04B7 750120    1699            mov     (__divslong_PARM_2 + 1),#0x20
04BA 750200    1700            mov     (__divslong_PARM_2 + 2),#0x00
04BD 750300    1701            mov     (__divslong_PARM_2 + 3),#0x00
04C0 120000    1702            lcall   __divslong
04C3 AA82      1703            mov     r2,dpl
04C5 AB83      1704            mov     r3,dph
04C7           1705   ;        main.c:403: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
04C7 9055E0    1706            mov     dptr,#_dig_x1
04CA E0        1707            movx    a,@dptr
04CB FC        1708            mov     r4,a
04CC 33        1709            rlc     a
04CD 95E0      1710            subb    a,acc
04CF C4        1711            swap    a
04D0 03        1712            rr      a
04D1 54F8      1713            anl     a,#0xf8
04D3 CC        1714            xch     a,r4
04D4 C4        1715            swap    a
04D5 03        1716            rr      a
04D6 CC        1717            xch     a,r4
04D7 6C        1718            xrl     a,r4
04D8 CC        1719            xch     a,r4
04D9 54F8      1720            anl     a,#0xf8
04DB CC        1721            xch     a,r4
04DC 6C        1722            xrl     a,r4
04DD FD        1723            mov     r5,a
04DE EC        1724            mov     a,r4
04DF 2A        1725            add     a,r2
04E0 F582      1726            mov     dpl,a
04E2 ED        1727            mov     a,r5
04E3 3B        1728            addc    a,r3
04E4 F583      1729            mov     dph,a
04E6 750010    1730            mov     __divsint_PARM_2,#0x10
04E9 E4        1731            clr     a
04EA F501      1732            mov     (__divsint_PARM_2 + 1),a
04EC 120000    1733            lcall   __divsint
04EF E582      1734            mov     a,dpl
04F1 8583F0    1735            mov     b,dph
04F4 90CD60    1736            mov     dptr,#_BMM150_compensate_x_retval_1_106
04F7 F0        1737            movx    @dptr,a
04F8 A3        1738            inc     dptr
04F9 E5F0      1739            mov     a,b
04FB F0        1740            movx    @dptr,a
04FC 8000      1741            sjmp    L010012?
04FE           1742   L010008?:
04FE           1743   ;        main.c:406: retval = BMM150_OVERFLOW_OUTPUT; 
04FE 90CD60    1744            mov     dptr,#_BMM150_compensate_x_retval_1_106
0501 E4        1745            clr     a
0502 F0        1746            movx    @dptr,a
0503 A3        1747            inc     dptr
0504 7480      1748            mov     a,#0x80
0506 F0        1749            movx    @dptr,a
0507 8000      1750            sjmp    L010012?
0509           1751   L010011?:
0509           1752   ;        main.c:410: retval = BMM150_OVERFLOW_OUTPUT; 
0509 90CD60    1753            mov     dptr,#_BMM150_compensate_x_retval_1_106
050C E4        1754            clr     a
050D F0        1755            movx    @dptr,a
050E A3        1756            inc     dptr
050F 7480      1757            mov     a,#0x80
0511 F0        1758            movx    @dptr,a
0512           1759   L010012?:
0512           1760   ;        main.c:412: return retval; 
0512 90CD60    1761            mov     dptr,#_BMM150_compensate_x_retval_1_106
0515 E0        1762            movx    a,@dptr
0516 FA        1763            mov     r2,a
0517 A3        1764            inc     dptr
0518 E0        1765            movx    a,@dptr
0519 8A82      1766            mov     dpl,r2
051B F583      1767            mov     dph,a
051D 22        1768            ret
051E           1769   ;------------------------------------------------------------
051E           1770   ;Allocation info for local variables in function 'BMM150_compensate_y'
051E           1771   ;------------------------------------------------------------
051E           1772   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
051E           1773   ;mag_data_y                Allocated to registers r2 r3 r4 
051E           1774   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
051E           1775   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_115'
051E           1776   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_115'
051E           1777   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_115'
051E           1778   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_115'
051E           1779   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_115'
051E           1780   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_115'
051E           1781   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_115'
051E           1782   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_115'
051E           1783   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_115'
051E           1784   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_115'
051E           1785   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_115'
051E           1786   ;------------------------------------------------------------
051E           1787   ;        main.c:415: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
051E           1788   ;        -----------------------------------------
051E           1789   ;         function BMM150_compensate_y
051E           1790   ;        -----------------------------------------
051E           1791   _BMM150_compensate_y:
051E           1792   ;        main.c:433: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
051E ACF0      1793            mov     r4,b
0520 120000    1794            lcall   __gptrget
0523 FA        1795            mov     r2,a
0524 A3        1796            inc     dptr
0525 120000    1797            lcall   __gptrget
0528 FB        1798            mov     r3,a
0529 BA0060    1799            cjne    r2,#0x00,L011019?
052C BBF060    1800            cjne    r3,#0xF0,L011019?
052F 020000    1801            ljmp    L011011?
0532           1802   L011019?:
0532           1803   ;        main.c:435: if (*data_rhall != 0)
0532 AC10      1804            mov     r4,_BMM150_compensate_y_PARM_2
0534 AD11      1805            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
0536 AE12      1806            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
0538 8C82      1807            mov     dpl,r4
053A 8D83      1808            mov     dph,r5
053C 8EF0      1809            mov     b,r6
053E 120000    1810            lcall   __gptrget
0541 FC        1811            mov     r4,a
0542 A3        1812            inc     dptr
0543 120000    1813            lcall   __gptrget
0546 FD        1814            mov     r5,a
0547 4C        1815            orl     a,r4
0548 6000      1816            jz      L011005?
054A           1817   ;        main.c:438: process_comp_y0 = *data_rhall;
054A 90CE80    1818            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
054D EC        1819            mov     a,r4
054E F0        1820            movx    @dptr,a
054F A3        1821            inc     dptr
0550 ED        1822            mov     a,r5
0551 F0        1823            movx    @dptr,a
0552 8000      1824            sjmp    L011006?
0554           1825   L011005?:
0554           1826   ;        main.c:440: else if (dig_xyz1 != 0)
0554 905360    1827            mov     dptr,#_dig_xyz1
0557 E0        1828            movx    a,@dptr
0558 FC        1829            mov     r4,a
0559 A3        1830            inc     dptr
055A E0        1831            movx    a,@dptr
055B FD        1832            mov     r5,a
055C 4C        1833            orl     a,r4
055D 6000      1834            jz      L011002?
055F           1835   ;        main.c:442: process_comp_y0 = dig_xyz1;
055F 90CE80    1836            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
0562 EC        1837            mov     a,r4
0563 F0        1838            movx    @dptr,a
0564 A3        1839            inc     dptr
0565 ED        1840            mov     a,r5
0566 F0        1841            movx    @dptr,a
0567 8000      1842            sjmp    L011006?
0569           1843   L011002?:
0569           1844   ;        main.c:446: process_comp_y0 = 0;
0569 90CE80    1845            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
056C E4        1846            clr     a
056D F0        1847            movx    @dptr,a
056E A3        1848            inc     dptr
056F F0        1849            movx    @dptr,a
0570           1850   L011006?:
0570           1851   ;        main.c:449: if (process_comp_y0 != 0)
0570 90CE80    1852            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_115
0573 E0        1853            movx    a,@dptr
0574 FC        1854            mov     r4,a
0575 A3        1855            inc     dptr
0576 E0        1856            movx    a,@dptr
0577 FD        1857            mov     r5,a
0578 4C        1858            orl     a,r4
0579 7000      1859            jnz     L011022?
057B 020000    1860            ljmp    L011008?
057E           1861   L011022?:
057E           1862   ;        main.c:452: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
057E 905360    1863            mov     dptr,#_dig_xyz1
0581 E0        1864            movx    a,@dptr
0582 FE        1865            mov     r6,a
0583 A3        1866            inc     dptr
0584 E0        1867            movx    a,@dptr
0585 FF        1868            mov     r7,a
0586 E4        1869            clr     a
0587 F8        1870            mov     r0,a
0588 EF        1871            mov     a,r7
0589 C8        1872            xch     a,r0
058A 5403      1873            anl     a,#0x03
058C A2E0      1874            mov     c,acc.0
058E C8        1875            xch     a,r0
058F 13        1876            rrc     a
0590 C8        1877            xch     a,r0
0591 13        1878            rrc     a
0592 A2E0      1879            mov     c,acc.0
0594 C8        1880            xch     a,r0
0595 13        1881            rrc     a
0596 C8        1882            xch     a,r0
0597 13        1883            rrc     a
0598 C8        1884            xch     a,r0
0599 F9        1885            mov     r1,a
059A EE        1886            mov     a,r6
059B 03        1887            rr      a
059C 03        1888            rr      a
059D 54C0      1889            anl     a,#0xc0
059F FF        1890            mov     r7,a
05A0 EE        1891            mov     a,r6
05A1 03        1892            rr      a
05A2 03        1893            rr      a
05A3 543F      1894            anl     a,#0x3f
05A5 48        1895            orl     a,r0
05A6 F8        1896            mov     r0,a
05A7 7E00      1897            mov     r6,#0x00
05A9 8C00      1898            mov     __divslong_PARM_2,r4
05AB 8D01      1899            mov     (__divslong_PARM_2 + 1),r5
05AD 750200    1900            mov     (__divslong_PARM_2 + 2),#0x00
05B0 750300    1901            mov     (__divslong_PARM_2 + 3),#0x00
05B3           1902   ;        main.c:453: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
05B3 8E82      1903            mov     dpl,r6
05B5 8F83      1904            mov     dph,r7
05B7 88F0      1905            mov     b,r0
05B9 E9        1906            mov     a,r1
05BA C002      1907            push    ar2
05BC C003      1908            push    ar3
05BE 120000    1909            lcall   __divslong
05C1 AC82      1910            mov     r4,dpl
05C3 E583      1911            mov     a,dph
05C5 24C0      1912            add     a,#0xc0
05C7 FD        1913            mov     r5,a
05C8           1914   ;        main.c:455: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
05C8 8C06      1915            mov     ar6,r4
05CA 8D07      1916            mov     ar7,r5
05CC 8E10      1917            mov     _BMM150_compensate_y_sloc0_1_0,r6
05CE EF        1918            mov     a,r7
05CF F511      1919            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
05D1 33        1920            rlc     a
05D2 95E0      1921            subb    a,acc
05D4 F512      1922            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
05D6 F513      1923            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
05D8 8C06      1924            mov     ar6,r4
05DA 8D07      1925            mov     ar7,r5
05DC 8E00      1926            mov     __mullong_PARM_2,r6
05DE EF        1927            mov     a,r7
05DF F501      1928            mov     (__mullong_PARM_2 + 1),a
05E1 33        1929            rlc     a
05E2 95E0      1930            subb    a,acc
05E4 F502      1931            mov     (__mullong_PARM_2 + 2),a
05E6 F503      1932            mov     (__mullong_PARM_2 + 3),a
05E8           1933   ;        main.c:456: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
05E8 851082    1934            mov     dpl,_BMM150_compensate_y_sloc0_1_0
05EB 851183    1935            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
05EE 8512F0    1936            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
05F1 E513      1937            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
05F3 C004      1938            push    ar4
05F5 C005      1939            push    ar5
05F7 120000    1940            lcall   __mullong
05FA 858210    1941            mov     _BMM150_compensate_y_sloc0_1_0,dpl
05FD 858311    1942            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
0600 85F012    1943            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
0603 F513      1944            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0605 9053A0    1945            mov     dptr,#_dig_xy2
0608 E0        1946            movx    a,@dptr
0609 FE        1947            mov     r6,a
060A 33        1948            rlc     a
060B 95E0      1949            subb    a,acc
060D FF        1950            mov     r7,a
060E F8        1951            mov     r0,a
060F F9        1952            mov     r1,a
0610 750080    1953            mov     __divslong_PARM_2,#0x80
0613 E4        1954            clr     a
0614 F501      1955            mov     (__divslong_PARM_2 + 1),a
0616 F502      1956            mov     (__divslong_PARM_2 + 2),a
0618 F503      1957            mov     (__divslong_PARM_2 + 3),a
061A 851082    1958            mov     dpl,_BMM150_compensate_y_sloc0_1_0
061D 851183    1959            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0620 8512F0    1960            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
0623 E513      1961            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
0625 C006      1962            push    ar6
0627 C007      1963            push    ar7
0629 C000      1964            push    ar0
062B C001      1965            push    ar1
062D 120000    1966            lcall   __divslong
0630 858200    1967            mov     __mullong_PARM_2,dpl
0633 858301    1968            mov     (__mullong_PARM_2 + 1),dph
0636 85F002    1969            mov     (__mullong_PARM_2 + 2),b
0639 F503      1970            mov     (__mullong_PARM_2 + 3),a
063B D001      1971            pop     ar1
063D D000      1972            pop     ar0
063F D007      1973            pop     ar7
0641 D006      1974            pop     ar6
0643           1975   ;        main.c:457: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
0643 8E82      1976            mov     dpl,r6
0645 8F83      1977            mov     dph,r7
0647 88F0      1978            mov     b,r0
0649 E9        1979            mov     a,r1
064A 120000    1980            lcall   __mullong
064D 858210    1981            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0650 858311    1982            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
0653 85F012    1983            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
0656 F513      1984            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0658 D005      1985            pop     ar5
065A D004      1986            pop     ar4
065C 9053E0    1987            mov     dptr,#_dig_xy1
065F E0        1988            movx    a,@dptr
0660 FE        1989            mov     r6,a
0661 E4        1990            clr     a
0662 5401      1991            anl     a,#0x01
0664 A2E0      1992            mov     c,acc.0
0666 CE        1993            xch     a,r6
0667 13        1994            rrc     a
0668 CE        1995            xch     a,r6
0669 13        1996            rrc     a
066A CE        1997            xch     a,r6
066B 8E00      1998            mov     __mullong_PARM_2,r6
066D F501      1999            mov     (__mullong_PARM_2 + 1),a
066F 33        2000            rlc     a
0670 95E0      2001            subb    a,acc
0672 F502      2002            mov     (__mullong_PARM_2 + 2),a
0674 F503      2003            mov     (__mullong_PARM_2 + 3),a
0676           2004   ;        main.c:458: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
0676 ED        2005            mov     a,r5
0677 33        2006            rlc     a
0678 95E0      2007            subb    a,acc
067A FE        2008            mov     r6,a
067B 8C82      2009            mov     dpl,r4
067D 8D83      2010            mov     dph,r5
067F 8EF0      2011            mov     b,r6
0681 120000    2012            lcall   __mullong
0684 AC82      2013            mov     r4,dpl
0686 AD83      2014            mov     r5,dph
0688 AEF0      2015            mov     r6,b
068A FF        2016            mov     r7,a
068B EC        2017            mov     a,r4
068C 2510      2018            add     a,_BMM150_compensate_y_sloc0_1_0
068E FC        2019            mov     r4,a
068F ED        2020            mov     a,r5
0690 3511      2021            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
0692 FD        2022            mov     r5,a
0693 EE        2023            mov     a,r6
0694 3512      2024            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
0696 FE        2025            mov     r6,a
0697 EF        2026            mov     a,r7
0698 3513      2027            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
069A FF        2028            mov     r7,a
069B 750000    2029            mov     __divslong_PARM_2,#0x00
069E 750102    2030            mov     (__divslong_PARM_2 + 1),#0x02
06A1 750200    2031            mov     (__divslong_PARM_2 + 2),#0x00
06A4 750300    2032            mov     (__divslong_PARM_2 + 3),#0x00
06A7           2033   ;        main.c:459: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
06A7 8C82      2034            mov     dpl,r4
06A9 8D83      2035            mov     dph,r5
06AB 8EF0      2036            mov     b,r6
06AD EF        2037            mov     a,r7
06AE 120000    2038            lcall   __divslong
06B1 AC82      2039            mov     r4,dpl
06B3 AD83      2040            mov     r5,dph
06B5 AEF0      2041            mov     r6,b
06B7 FF        2042            mov     r7,a
06B8 905520    2043            mov     dptr,#_dig_y2
06BB E0        2044            movx    a,@dptr
06BC F8        2045            mov     r0,a
06BD 33        2046            rlc     a
06BE 95E0      2047            subb    a,acc
06C0 F9        2048            mov     r1,a
06C1 74A0      2049            mov     a,#0xA0
06C3 28        2050            add     a,r0
06C4 F8        2051            mov     r0,a
06C5 E4        2052            clr     a
06C6 39        2053            addc    a,r1
06C7 8800      2054            mov     __mullong_PARM_2,r0
06C9 F501      2055            mov     (__mullong_PARM_2 + 1),a
06CB 33        2056            rlc     a
06CC 95E0      2057            subb    a,acc
06CE F502      2058            mov     (__mullong_PARM_2 + 2),a
06D0 F503      2059            mov     (__mullong_PARM_2 + 3),a
06D2           2060   ;        main.c:460: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
06D2 7410      2061            mov     a,#0x10
06D4 2E        2062            add     a,r6
06D5 FE        2063            mov     r6,a
06D6 E4        2064            clr     a
06D7 3F        2065            addc    a,r7
06D8 8C82      2066            mov     dpl,r4
06DA 8D83      2067            mov     dph,r5
06DC 8EF0      2068            mov     b,r6
06DE 120000    2069            lcall   __mullong
06E1           2070   ;        main.c:461: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
06E1 750000    2071            mov     __divslong_PARM_2,#0x00
06E4 750110    2072            mov     (__divslong_PARM_2 + 1),#0x10
06E7 750200    2073            mov     (__divslong_PARM_2 + 2),#0x00
06EA 750300    2074            mov     (__divslong_PARM_2 + 3),#0x00
06ED 120000    2075            lcall   __divslong
06F0 858200    2076            mov     __mullong_PARM_2,dpl
06F3 858301    2077            mov     (__mullong_PARM_2 + 1),dph
06F6 85F002    2078            mov     (__mullong_PARM_2 + 2),b
06F9 F503      2079            mov     (__mullong_PARM_2 + 3),a
06FB D003      2080            pop     ar3
06FD D002      2081            pop     ar2
06FF EB        2082            mov     a,r3
0700 33        2083            rlc     a
0701 95E0      2084            subb    a,acc
0703 FC        2085            mov     r4,a
0704           2086   ;        main.c:462: retval = (int16_t)(process_comp_y9 / 8192);
0704 8A82      2087            mov     dpl,r2
0706 8B83      2088            mov     dph,r3
0708 8CF0      2089            mov     b,r4
070A 120000    2090            lcall   __mullong
070D 750000    2091            mov     __divslong_PARM_2,#0x00
0710 750120    2092            mov     (__divslong_PARM_2 + 1),#0x20
0713 750200    2093            mov     (__divslong_PARM_2 + 2),#0x00
0716 750300    2094            mov     (__divslong_PARM_2 + 3),#0x00
0719 120000    2095            lcall   __divslong
071C AA82      2096            mov     r2,dpl
071E AB83      2097            mov     r3,dph
0720           2098   ;        main.c:463: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
0720 905560    2099            mov     dptr,#_dig_y1
0723 E0        2100            movx    a,@dptr
0724 FC        2101            mov     r4,a
0725 33        2102            rlc     a
0726 95E0      2103            subb    a,acc
0728 C4        2104            swap    a
0729 03        2105            rr      a
072A 54F8      2106            anl     a,#0xf8
072C CC        2107            xch     a,r4
072D C4        2108            swap    a
072E 03        2109            rr      a
072F CC        2110            xch     a,r4
0730 6C        2111            xrl     a,r4
0731 CC        2112            xch     a,r4
0732 54F8      2113            anl     a,#0xf8
0734 CC        2114            xch     a,r4
0735 6C        2115            xrl     a,r4
0736 FD        2116            mov     r5,a
0737 EC        2117            mov     a,r4
0738 2A        2118            add     a,r2
0739 F582      2119            mov     dpl,a
073B ED        2120            mov     a,r5
073C 3B        2121            addc    a,r3
073D F583      2122            mov     dph,a
073F 750010    2123            mov     __divsint_PARM_2,#0x10
0742 E4        2124            clr     a
0743 F501      2125            mov     (__divsint_PARM_2 + 1),a
0745 120000    2126            lcall   __divsint
0748 E582      2127            mov     a,dpl
074A 8583F0    2128            mov     b,dph
074D 90CE20    2129            mov     dptr,#_BMM150_compensate_y_retval_1_115
0750 F0        2130            movx    @dptr,a
0751 A3        2131            inc     dptr
0752 E5F0      2132            mov     a,b
0754 F0        2133            movx    @dptr,a
0755 8000      2134            sjmp    L011012?
0757           2135   L011008?:
0757           2136   ;        main.c:467: retval = BMM150_OVERFLOW_OUTPUT;
0757 90CE20    2137            mov     dptr,#_BMM150_compensate_y_retval_1_115
075A E4        2138            clr     a
075B F0        2139            movx    @dptr,a
075C A3        2140            inc     dptr
075D 7480      2141            mov     a,#0x80
075F F0        2142            movx    @dptr,a
0760 8000      2143            sjmp    L011012?
0762           2144   L011011?:
0762           2145   ;        main.c:473: retval = BMM150_OVERFLOW_OUTPUT;
0762 90CE20    2146            mov     dptr,#_BMM150_compensate_y_retval_1_115
0765 E4        2147            clr     a
0766 F0        2148            movx    @dptr,a
0767 A3        2149            inc     dptr
0768 7480      2150            mov     a,#0x80
076A F0        2151            movx    @dptr,a
076B           2152   L011012?:
076B           2153   ;        main.c:476: return retval;
076B 90CE20    2154            mov     dptr,#_BMM150_compensate_y_retval_1_115
076E E0        2155            movx    a,@dptr
076F FA        2156            mov     r2,a
0770 A3        2157            inc     dptr
0771 E0        2158            movx    a,@dptr
0772 8A82      2159            mov     dpl,r2
0774 F583      2160            mov     dph,a
0776 22        2161            ret
0777           2162   ;------------------------------------------------------------
0777           2163   ;Allocation info for local variables in function 'BMM150_Read_Data'
0777           2164   ;------------------------------------------------------------
0777           2165   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
0777           2166   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_123'
0777           2167   ;raw_x_lsb                 Allocated with name '_BMM150_Read_Data_raw_x_lsb_1_124'
0777           2168   ;raw_x_msb                 Allocated with name '_BMM150_Read_Data_raw_x_msb_1_124'
0777           2169   ;raw_y_lsb                 Allocated with name '_BMM150_Read_Data_raw_y_lsb_1_124'
0777           2170   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_124'
0777           2171   ;raw_rhall_lsb             Allocated with name '_BMM150_Read_Data_raw_rhall_lsb_1_124'
0777           2172   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_124'
0777           2173   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_124'
0777           2174   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_124'
0777           2175   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_124'
0777           2176   ;msb_data                  Allocated with name '_BMM150_Read_Data_msb_data_1_124'
0777           2177   ;------------------------------------------------------------
0777           2178   ;        main.c:479: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y)
0777           2179   ;        -----------------------------------------
0777           2180   ;         function BMM150_Read_Data
0777           2181   ;        -----------------------------------------
0777           2182   _BMM150_Read_Data:
0777 858260    2183            mov     _BMM150_Read_Data_mag_x_1_123,dpl
077A 858361    2184            mov     (_BMM150_Read_Data_mag_x_1_123 + 1),dph
077D 85F062    2185            mov     (_BMM150_Read_Data_mag_x_1_123 + 2),b
0780           2186   ;        main.c:486: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
0780 758242    2187            mov     dpl,#0x42
0783 120000    2188            lcall   _SPI_read
0786 AD82      2189            mov     r5,dpl
0788           2190   ;        main.c:487: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
0788 758243    2191            mov     dpl,#0x43
078B C005      2192            push    ar5
078D 120000    2193            lcall   _SPI_read
0790 AE82      2194            mov     r6,dpl
0792           2195   ;        main.c:488: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
0792 758244    2196            mov     dpl,#0x44
0795 C006      2197            push    ar6
0797 120000    2198            lcall   _SPI_read
079A AF82      2199            mov     r7,dpl
079C           2200   ;        main.c:489: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
079C 758245    2201            mov     dpl,#0x45
079F C007      2202            push    ar7
07A1 120000    2203            lcall   _SPI_read
07A4 A882      2204            mov     r0,dpl
07A6           2205   ;        main.c:492: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
07A6 758248    2206            mov     dpl,#0x48
07A9 C000      2207            push    ar0
07AB 120000    2208            lcall   _SPI_read
07AE A982      2209            mov     r1,dpl
07B0           2210   ;        main.c:493: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
07B0 758249    2211            mov     dpl,#0x49
07B3 C001      2212            push    ar1
07B5 120000    2213            lcall   _SPI_read
07B8 AA82      2214            mov     r2,dpl
07BA D001      2215            pop     ar1
07BC D000      2216            pop     ar0
07BE D007      2217            pop     ar7
07C0 D006      2218            pop     ar6
07C2 D005      2219            pop     ar5
07C4           2220   ;        main.c:497: raw_x_lsb = ((raw_x_lsb & 0b_1111_1000)) >> 3;
07C4 5305F8    2221            anl     ar5,#0xF8
07C7 ED        2222            mov     a,r5
07C8 C4        2223            swap    a
07C9 23        2224            rl      a
07CA 541F      2225            anl     a,#0x1f
07CC FD        2226            mov     r5,a
07CD           2227   ;        main.c:498: msb_data = ((int16_t)((int8_t)raw_x_msb)) << 5; 
07CD EE        2228            mov     a,r6
07CE 33        2229            rlc     a
07CF 95E0      2230            subb    a,acc
07D1 C4        2231            swap    a
07D2 23        2232            rl      a
07D3 54E0      2233            anl     a,#0xe0
07D5 CE        2234            xch     a,r6
07D6 C4        2235            swap    a
07D7 23        2236            rl      a
07D8 CE        2237            xch     a,r6
07D9 6E        2238            xrl     a,r6
07DA CE        2239            xch     a,r6
07DB 54E0      2240            anl     a,#0xe0
07DD CE        2241            xch     a,r6
07DE 6E        2242            xrl     a,r6
07DF FB        2243            mov     r3,a
07E0           2244   ;        main.c:499: x_val = (int16_t)(msb_data | raw_x_lsb);
07E0 7C00      2245            mov     r4,#0x00
07E2 90CED0    2246            mov     dptr,#_BMM150_Read_Data_x_val_1_124
07E5 ED        2247            mov     a,r5
07E6 4E        2248            orl     a,r6
07E7 F0        2249            movx    @dptr,a
07E8 EC        2250            mov     a,r4
07E9 4B        2251            orl     a,r3
07EA A3        2252            inc     dptr
07EB F0        2253            movx    @dptr,a
07EC           2254   ;        main.c:502: raw_y_lsb = ((raw_y_lsb & 0b_1111_1000)) >> 3;
07EC 5307F8    2255            anl     ar7,#0xF8
07EF EF        2256            mov     a,r7
07F0 C4        2257            swap    a
07F1 23        2258            rl      a
07F2 541F      2259            anl     a,#0x1f
07F4 FF        2260            mov     r7,a
07F5           2261   ;        main.c:503: msb_data = ((int16_t)((int8_t)raw_y_msb)) << 5; 
07F5 E8        2262            mov     a,r0
07F6 33        2263            rlc     a
07F7 95E0      2264            subb    a,acc
07F9 C4        2265            swap    a
07FA 23        2266            rl      a
07FB 54E0      2267            anl     a,#0xe0
07FD C8        2268            xch     a,r0
07FE C4        2269            swap    a
07FF 23        2270            rl      a
0800 C8        2271            xch     a,r0
0801 68        2272            xrl     a,r0
0802 C8        2273            xch     a,r0
0803 54E0      2274            anl     a,#0xe0
0805 C8        2275            xch     a,r0
0806 68        2276            xrl     a,r0
0807 FB        2277            mov     r3,a
0808           2278   ;        main.c:504: y_val = (int16_t)(msb_data | raw_y_lsb);
0808 7C00      2279            mov     r4,#0x00
080A 90CF20    2280            mov     dptr,#_BMM150_Read_Data_y_val_1_124
080D EF        2281            mov     a,r7
080E 48        2282            orl     a,r0
080F F0        2283            movx    @dptr,a
0810 EC        2284            mov     a,r4
0811 4B        2285            orl     a,r3
0812 A3        2286            inc     dptr
0813 F0        2287            movx    @dptr,a
0814           2288   ;        main.c:512: raw_rhall_lsb = ((raw_rhall_lsb & 0xFC) >> 2);
0814 5301FC    2289            anl     ar1,#0xFC
0817 E9        2290            mov     a,r1
0818 03        2291            rr      a
0819 03        2292            rr      a
081A 543F      2293            anl     a,#0x3f
081C F9        2294            mov     r1,a
081D           2295   ;        main.c:513: rhall_val = (uint16_t)(((uint16_t)raw_rhall_msb << 6) | raw_rhall_lsb);
081D E4        2296            clr     a
081E 5403      2297            anl     a,#0x03
0820 A2E0      2298            mov     c,acc.0
0822 CA        2299            xch     a,r2
0823 13        2300            rrc     a
0824 CA        2301            xch     a,r2
0825 13        2302            rrc     a
0826 A2E0      2303            mov     c,acc.0
0828 CA        2304            xch     a,r2
0829 13        2305            rrc     a
082A CA        2306            xch     a,r2
082B 13        2307            rrc     a
082C CA        2308            xch     a,r2
082D FB        2309            mov     r3,a
082E 7C00      2310            mov     r4,#0x00
0830 90CF80    2311            mov     dptr,#_BMM150_Read_Data_rhall_val_1_124
0833 E9        2312            mov     a,r1
0834 4A        2313            orl     a,r2
0835 F0        2314            movx    @dptr,a
0836 EC        2315            mov     a,r4
0837 4B        2316            orl     a,r3
0838 A3        2317            inc     dptr
0839 F0        2318            movx    @dptr,a
083A           2319   ;        main.c:516: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
083A 756080    2320            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_124
083D 7561CF    2321            mov     (_BMM150_compensate_x_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_124 >> 8)
0840 756200    2322            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x00
0843 90CED0    2323            mov     dptr,#_BMM150_Read_Data_x_val_1_124
0846 75F000    2324            mov     b,#0x00
0849 120000    2325            lcall   _BMM150_compensate_x
084C AA82      2326            mov     r2,dpl
084E AB83      2327            mov     r3,dph
0850 856082    2328            mov     dpl,_BMM150_Read_Data_mag_x_1_123
0853 856183    2329            mov     dph,(_BMM150_Read_Data_mag_x_1_123 + 1)
0856 8562F0    2330            mov     b,(_BMM150_Read_Data_mag_x_1_123 + 2)
0859 EA        2331            mov     a,r2
085A 120000    2332            lcall   __gptrput
085D A3        2333            inc     dptr
085E EB        2334            mov     a,r3
085F 120000    2335            lcall   __gptrput
0862           2336   ;        main.c:517: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
0862 AAC0      2337            mov     r2,_BMM150_Read_Data_PARM_2
0864 ABC1      2338            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
0866 ACC2      2339            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
0868 751080    2340            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_124
086B 7511CF    2341            mov     (_BMM150_compensate_y_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_124 >> 8)
086E 751200    2342            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x00
0871 90CF20    2343            mov     dptr,#_BMM150_Read_Data_y_val_1_124
0874 75F000    2344            mov     b,#0x00
0877 C002      2345            push    ar2
0879 C003      2346            push    ar3
087B C004      2347            push    ar4
087D 120000    2348            lcall   _BMM150_compensate_y
0880 AD82      2349            mov     r5,dpl
0882 AE83      2350            mov     r6,dph
0884 D004      2351            pop     ar4
0886 D003      2352            pop     ar3
0888 D002      2353            pop     ar2
088A 8A82      2354            mov     dpl,r2
088C 8B83      2355            mov     dph,r3
088E 8CF0      2356            mov     b,r4
0890 ED        2357            mov     a,r5
0891 120000    2358            lcall   __gptrput
0894 A3        2359            inc     dptr
0895 EE        2360            mov     a,r6
0896 020000    2361            ljmp    __gptrput
0899           2362   ;------------------------------------------------------------
0899           2363   ;Allocation info for local variables in function 'UART1_Init'
0899           2364   ;------------------------------------------------------------
0899           2365   ;baudrate                  Allocated to registers r2 r3 r4 r5 
0899           2366   ;------------------------------------------------------------
0899           2367   ;        main.c:523: void UART1_Init (unsigned long baudrate)
0899           2368   ;        -----------------------------------------
0899           2369   ;         function UART1_Init
0899           2370   ;        -----------------------------------------
0899           2371   _UART1_Init:
0899 AA82      2372            mov     r2,dpl
089B AB83      2373            mov     r3,dph
089D ACF0      2374            mov     r4,b
089F FD        2375            mov     r5,a
08A0           2376   ;        main.c:525: SFRPAGE = 0x20;
08A0 75A720    2377            mov     _SFRPAGE,#0x20
08A3           2378   ;        main.c:526: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
08A3 75930C    2379            mov     _SMOD1,#0x0C
08A6           2380   ;        main.c:527: SCON1 = 0x10;
08A6 75C810    2381            mov     _SCON1,#0x10
08A9           2382   ;        main.c:528: SBCON1 =0x00;   // disable baud rate generator
08A9 759400    2383            mov     _SBCON1,#0x00
08AC           2384   ;        main.c:529: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
08AC 8A00      2385            mov     __divulong_PARM_2,r2
08AE 8B01      2386            mov     (__divulong_PARM_2 + 1),r3
08B0 8C02      2387            mov     (__divulong_PARM_2 + 2),r4
08B2 8D03      2388            mov     (__divulong_PARM_2 + 3),r5
08B4 90A200    2389            mov     dptr,#0xA200
08B7 75F04A    2390            mov     b,#0x4A
08BA 7404      2391            mov     a,#0x04
08BC 120000    2392            lcall   __divulong
08BF AA82      2393            mov     r2,dpl
08C1 AB83      2394            mov     r3,dph
08C3 ACF0      2395            mov     r4,b
08C5 FD        2396            mov     r5,a
08C6 750018    2397            mov     __divulong_PARM_2,#0x18
08C9 E4        2398            clr     a
08CA F501      2399            mov     (__divulong_PARM_2 + 1),a
08CC F502      2400            mov     (__divulong_PARM_2 + 2),a
08CE F503      2401            mov     (__divulong_PARM_2 + 3),a
08D0 8A82      2402            mov     dpl,r2
08D2 8B83      2403            mov     dph,r3
08D4 8CF0      2404            mov     b,r4
08D6 ED        2405            mov     a,r5
08D7 120000    2406            lcall   __divulong
08DA AA82      2407            mov     r2,dpl
08DC AB83      2408            mov     r3,dph
08DE ACF0      2409            mov     r4,b
08E0 FD        2410            mov     r5,a
08E1 E4        2411            clr     a
08E2 C3        2412            clr     c
08E3 9A        2413            subb    a,r2
08E4 FA        2414            mov     r2,a
08E5 E4        2415            clr     a
08E6 9B        2416            subb    a,r3
08E7 FB        2417            mov     r3,a
08E8 7401      2418            mov     a,#0x01
08EA 9C        2419            subb    a,r4
08EB E4        2420            clr     a
08EC 9D        2421            subb    a,r5
08ED 8A95      2422            mov     _SBRL1,r2
08EF 8B96      2423            mov     (_SBRL1 >> 8),r3
08F1           2424   ;        main.c:530: TI1 = 1; // indicate ready for TX
08F1 D2C9      2425            setb    _TI1
08F3           2426   ;        main.c:531: SBCON1 |= 0x40;   // enable baud rate generator
08F3 439440    2427            orl     _SBCON1,#0x40
08F6           2428   ;        main.c:532: SFRPAGE = 0x00;
08F6 75A700    2429            mov     _SFRPAGE,#0x00
08F9 22        2430            ret
08FA           2431   ;------------------------------------------------------------
08FA           2432   ;Allocation info for local variables in function 'putchar1'
08FA           2433   ;------------------------------------------------------------
08FA           2434   ;c                         Allocated to registers r2 
08FA           2435   ;------------------------------------------------------------
08FA           2436   ;        main.c:535: void putchar1 (char c) 
08FA           2437   ;        -----------------------------------------
08FA           2438   ;         function putchar1
08FA           2439   ;        -----------------------------------------
08FA           2440   _putchar1:
08FA AA82      2441            mov     r2,dpl
08FC           2442   ;        main.c:537: SFRPAGE = 0x20;
08FC 75A720    2443            mov     _SFRPAGE,#0x20
08FF           2444   ;        main.c:538: while (!TI1);
08FF           2445   L014001?:
08FF           2446   ;        main.c:539: TI1=0;
08FF 10C970    2447            jbc     _TI1,L014008?
0902 8000      2448            sjmp    L014001?
0904           2449   L014008?:
0904           2450   ;        main.c:540: SBUF1 = c;
0904 8A92      2451            mov     _SBUF1,r2
0906           2452   ;        main.c:541: SFRPAGE = 0x00;
0906 75A700    2453            mov     _SFRPAGE,#0x00
0909 22        2454            ret
090A           2455   ;------------------------------------------------------------
090A           2456   ;Allocation info for local variables in function 'sendstr1'
090A           2457   ;------------------------------------------------------------
090A           2458   ;s                         Allocated to registers r2 r3 r4 
090A           2459   ;------------------------------------------------------------
090A           2460   ;        main.c:544: void sendstr1 (char * s)
090A           2461   ;        -----------------------------------------
090A           2462   ;         function sendstr1
090A           2463   ;        -----------------------------------------
090A           2464   _sendstr1:
090A AA82      2465            mov     r2,dpl
090C AB83      2466            mov     r3,dph
090E ACF0      2467            mov     r4,b
0910           2468   ;        main.c:546: while(*s)
0910           2469   L015001?:
0910 8A82      2470            mov     dpl,r2
0912 8B83      2471            mov     dph,r3
0914 8CF0      2472            mov     b,r4
0916 120000    2473            lcall   __gptrget
0919 FD        2474            mov     r5,a
091A 6000      2475            jz      L015004?
091C           2476   ;        main.c:548: putchar1(*s);
091C 8D82      2477            mov     dpl,r5
091E C002      2478            push    ar2
0920 C003      2479            push    ar3
0922 C004      2480            push    ar4
0924 120000    2481            lcall   _putchar1
0927 D004      2482            pop     ar4
0929 D003      2483            pop     ar3
092B D002      2484            pop     ar2
092D           2485   ;        main.c:549: s++;        
092D 0A        2486            inc     r2
092E BA00B0    2487            cjne    r2,#0x00,L015001?
0931 0B        2488            inc     r3
0932 8000      2489            sjmp    L015001?
0934           2490   L015004?:
0934 22        2491            ret
0935           2492   ;------------------------------------------------------------
0935           2493   ;Allocation info for local variables in function 'getchar1'
0935           2494   ;------------------------------------------------------------
0935           2495   ;c                         Allocated with name '_getchar1_c_1_133'
0935           2496   ;------------------------------------------------------------
0935           2497   ;        main.c:553: char getchar1 (void)
0935           2498   ;        -----------------------------------------
0935           2499   ;         function getchar1
0935           2500   ;        -----------------------------------------
0935           2501   _getchar1:
0935           2502   ;        main.c:556: SFRPAGE = 0x20;
0935 75A720    2503            mov     _SFRPAGE,#0x20
0938           2504   ;        main.c:557: while (!RI1);
0938           2505   L016001?:
0938           2506   ;        main.c:558: RI1=0;
0938 10C870    2507            jbc     _RI1,L016008?
093B 8000      2508            sjmp    L016001?
093D           2509   L016008?:
093D           2510   ;        main.c:560: SCON1&=0b_0011_1111;
093D 53C83F    2511            anl     _SCON1,#0x3F
0940           2512   ;        main.c:561: c = SBUF1;
0940 859282    2513            mov     dpl,_SBUF1
0943           2514   ;        main.c:562: SFRPAGE = 0x00;
0943 75A700    2515            mov     _SFRPAGE,#0x00
0946           2516   ;        main.c:563: return (c);
0946 22        2517            ret
0947           2518   ;------------------------------------------------------------
0947           2519   ;Allocation info for local variables in function 'getchar1_with_timeout'
0947           2520   ;------------------------------------------------------------
0947           2521   ;c                         Allocated with name '_getchar1_with_timeout_c_1_135'
0947           2522   ;timeout                   Allocated with name '_getchar1_with_timeout_timeout_1_135'
0947           2523   ;------------------------------------------------------------
0947           2524   ;        main.c:566: char getchar1_with_timeout (void)
0947           2525   ;        -----------------------------------------
0947           2526   ;         function getchar1_with_timeout
0947           2527   ;        -----------------------------------------
0947           2528   _getchar1_with_timeout:
0947           2529   ;        main.c:570: SFRPAGE = 0x20;
0947 75A720    2530            mov     _SFRPAGE,#0x20
094A           2531   ;        main.c:572: while (!RI1)
094A 7A00      2532            mov     r2,#0x00
094C 7B00      2533            mov     r3,#0x00
094E           2534   L017003?:
094E 20C8F0    2535            jb      _RI1,L017005?
0951           2536   ;        main.c:574: SFRPAGE = 0x00;
0951 75A700    2537            mov     _SFRPAGE,#0x00
0954           2538   ;        main.c:575: Timer3us(20);
0954 758214    2539            mov     dpl,#0x14
0957 C002      2540            push    ar2
0959 C003      2541            push    ar3
095B 120000    2542            lcall   _Timer3us
095E D003      2543            pop     ar3
0960 D002      2544            pop     ar2
0962           2545   ;        main.c:576: SFRPAGE = 0x20;
0962 75A720    2546            mov     _SFRPAGE,#0x20
0965           2547   ;        main.c:577: timeout++;
0965 0A        2548            inc     r2
0966 BA0030    2549            cjne    r2,#0x00,L017012?
0969 0B        2550            inc     r3
096A           2551   L017012?:
096A           2552   ;        main.c:578: if(timeout==25000)
096A BAA8B0    2553            cjne    r2,#0xA8,L017003?
096D BB61B0    2554            cjne    r3,#0x61,L017003?
0970           2555   ;        main.c:580: SFRPAGE = 0x00;
0970 75A700    2556            mov     _SFRPAGE,#0x00
0973           2557   ;        main.c:581: return ('\n'); // Timeout after half second
0973 75820A    2558            mov     dpl,#0x0A
0976 22        2559            ret
0977           2560   L017005?:
0977           2561   ;        main.c:584: RI1=0;
0977 C2C8      2562            clr     _RI1
0979           2563   ;        main.c:586: SCON1&=0b_0011_1111;
0979 53C83F    2564            anl     _SCON1,#0x3F
097C           2565   ;        main.c:587: c = SBUF1;
097C 859282    2566            mov     dpl,_SBUF1
097F           2567   ;        main.c:588: SFRPAGE = 0x00;
097F 75A700    2568            mov     _SFRPAGE,#0x00
0982           2569   ;        main.c:589: return (c);
0982 22        2570            ret
0983           2571   ;------------------------------------------------------------
0983           2572   ;Allocation info for local variables in function 'getstr1'
0983           2573   ;------------------------------------------------------------
0983           2574   ;n                         Allocated with name '_getstr1_PARM_2'
0983           2575   ;s                         Allocated to registers r2 r3 r4 
0983           2576   ;c                         Allocated with name '_getstr1_c_1_139'
0983           2577   ;cnt                       Allocated with name '_getstr1_cnt_1_139'
0983           2578   ;------------------------------------------------------------
0983           2579   ;        main.c:592: void getstr1 (char * s, unsigned char n)
0983           2580   ;        -----------------------------------------
0983           2581   ;         function getstr1
0983           2582   ;        -----------------------------------------
0983           2583   _getstr1:
0983 AA82      2584            mov     r2,dpl
0985 AB83      2585            mov     r3,dph
0987 ACF0      2586            mov     r4,b
0989           2587   ;        main.c:598: while(1)
0989 7D00      2588            mov     r5,#0x00
098B 8A06      2589            mov     ar6,r2
098D 8B07      2590            mov     ar7,r3
098F 8C00      2591            mov     ar0,r4
0991           2592   L018007?:
0991           2593   ;        main.c:600: c=getchar1_with_timeout();
0991 C002      2594            push    ar2
0993 C003      2595            push    ar3
0995 C004      2596            push    ar4
0997 C005      2597            push    ar5
0999 C006      2598            push    ar6
099B C007      2599            push    ar7
099D C000      2600            push    ar0
099F 120000    2601            lcall   _getchar1_with_timeout
09A2 A982      2602            mov     r1,dpl
09A4 D000      2603            pop     ar0
09A6 D007      2604            pop     ar7
09A8 D006      2605            pop     ar6
09AA D005      2606            pop     ar5
09AC D004      2607            pop     ar4
09AE D003      2608            pop     ar3
09B0 D002      2609            pop     ar2
09B2           2610   ;        main.c:601: if(c=='\n')
09B2 B90AB0    2611            cjne    r1,#0x0A,L018002?
09B5           2612   ;        main.c:603: *s=0;
09B5 8A82      2613            mov     dpl,r2
09B7 8B83      2614            mov     dph,r3
09B9 8CF0      2615            mov     b,r4
09BB E4        2616            clr     a
09BC           2617   ;        main.c:604: return;
09BC 020000    2618            ljmp    __gptrput
09BF           2619   L018002?:
09BF           2620   ;        main.c:607: if (cnt<n)
09BF C3        2621            clr     c
09C0 ED        2622            mov     a,r5
09C1 9570      2623            subb    a,_getstr1_PARM_2
09C3 5000      2624            jnc     L018004?
09C5           2625   ;        main.c:609: cnt++;
09C5 0D        2626            inc     r5
09C6           2627   ;        main.c:610: *s=c;
09C6 8E82      2628            mov     dpl,r6
09C8 8F83      2629            mov     dph,r7
09CA 88F0      2630            mov     b,r0
09CC E9        2631            mov     a,r1
09CD 120000    2632            lcall   __gptrput
09D0 A3        2633            inc     dptr
09D1 AE82      2634            mov     r6,dpl
09D3 AF83      2635            mov     r7,dph
09D5           2636   ;        main.c:611: s++;
09D5 8E02      2637            mov     ar2,r6
09D7 8F03      2638            mov     ar3,r7
09D9 8804      2639            mov     ar4,r0
09DB 8000      2640            sjmp    L018007?
09DD           2641   L018004?:
09DD           2642   ;        main.c:615: *s=0;
09DD 8A82      2643            mov     dpl,r2
09DF 8B83      2644            mov     dph,r3
09E1 8CF0      2645            mov     b,r4
09E3 E4        2646            clr     a
09E4           2647   ;        main.c:616: return;
09E4 020000    2648            ljmp    __gptrput
09E7           2649   ;------------------------------------------------------------
09E7           2650   ;Allocation info for local variables in function 'RXU1'
09E7           2651   ;------------------------------------------------------------
09E7           2652   ;------------------------------------------------------------
09E7           2653   ;        main.c:622: bit RXU1 (void)
09E7           2654   ;        -----------------------------------------
09E7           2655   ;         function RXU1
09E7           2656   ;        -----------------------------------------
09E7           2657   _RXU1:
09E7           2658   ;        main.c:625: SFRPAGE = 0x20;
09E7 75A720    2659            mov     _SFRPAGE,#0x20
09EA           2660   ;        main.c:626: mybit=RI1;
09EA A2C8      2661            mov     c,_RI1
09EC           2662   ;        main.c:627: SFRPAGE = 0x00;
09EC 75A700    2663            mov     _SFRPAGE,#0x00
09EF           2664   ;        main.c:628: return mybit;
09EF 22        2665            ret
09F0           2666   ;------------------------------------------------------------
09F0           2667   ;Allocation info for local variables in function 'waitms_or_RI1'
09F0           2668   ;------------------------------------------------------------
09F0           2669   ;ms                        Allocated to registers r2 r3 
09F0           2670   ;j                         Allocated with name '_waitms_or_RI1_j_1_147'
09F0           2671   ;k                         Allocated with name '_waitms_or_RI1_k_1_147'
09F0           2672   ;------------------------------------------------------------
09F0           2673   ;        main.c:631: void waitms_or_RI1 (unsigned int ms)
09F0           2674   ;        -----------------------------------------
09F0           2675   ;         function waitms_or_RI1
09F0           2676   ;        -----------------------------------------
09F0           2677   _waitms_or_RI1:
09F0 AA82      2678            mov     r2,dpl
09F2 AB83      2679            mov     r3,dph
09F4           2680   ;        main.c:635: for(j=0; j<ms; j++)
09F4 7C00      2681            mov     r4,#0x00
09F6 7D00      2682            mov     r5,#0x00
09F8           2683   L020007?:
09F8 C3        2684            clr     c
09F9 EC        2685            mov     a,r4
09FA 9A        2686            subb    a,r2
09FB ED        2687            mov     a,r5
09FC 9B        2688            subb    a,r3
09FD 5000      2689            jnc     L020011?
09FF           2690   ;        main.c:637: for (k=0; k<4; k++)
09FF 7E00      2691            mov     r6,#0x00
0A01           2692   L020003?:
0A01 BE04F0    2693            cjne    r6,#0x04,L020019?
0A04           2694   L020019?:
0A04 5000      2695            jnc     L020009?
0A06           2696   ;        main.c:639: if(RXU1()) return;
0A06 C002      2697            push    ar2
0A08 C003      2698            push    ar3
0A0A C004      2699            push    ar4
0A0C C005      2700            push    ar5
0A0E C006      2701            push    ar6
0A10 120000    2702            lcall   _RXU1
0A13 E4        2703            clr     a
0A14 33        2704            rlc     a
0A15 D006      2705            pop     ar6
0A17 D005      2706            pop     ar5
0A19 D004      2707            pop     ar4
0A1B D003      2708            pop     ar3
0A1D D002      2709            pop     ar2
0A1F 6000      2710            jz      L020002?
0A21 22        2711            ret
0A22           2712   L020002?:
0A22           2713   ;        main.c:640: Timer3us(250);
0A22 7582FA    2714            mov     dpl,#0xFA
0A25 C002      2715            push    ar2
0A27 C003      2716            push    ar3
0A29 C004      2717            push    ar4
0A2B C005      2718            push    ar5
0A2D C006      2719            push    ar6
0A2F 120000    2720            lcall   _Timer3us
0A32 D006      2721            pop     ar6
0A34 D005      2722            pop     ar5
0A36 D004      2723            pop     ar4
0A38 D003      2724            pop     ar3
0A3A D002      2725            pop     ar2
0A3C           2726   ;        main.c:637: for (k=0; k<4; k++)
0A3C 0E        2727            inc     r6
0A3D 8000      2728            sjmp    L020003?
0A3F           2729   L020009?:
0A3F           2730   ;        main.c:635: for(j=0; j<ms; j++)
0A3F 0C        2731            inc     r4
0A40 BC0030    2732            cjne    r4,#0x00,L020007?
0A43 0D        2733            inc     r5
0A44 8000      2734            sjmp    L020007?
0A46           2735   L020011?:
0A46 22        2736            ret
0A47           2737   ;------------------------------------------------------------
0A47           2738   ;Allocation info for local variables in function 'SendATCommand'
0A47           2739   ;------------------------------------------------------------
0A47           2740   ;s                         Allocated to registers r2 r3 r4 
0A47           2741   ;------------------------------------------------------------
0A47           2742   ;        main.c:645: void SendATCommand (char * s)
0A47           2743   ;        -----------------------------------------
0A47           2744   ;         function SendATCommand
0A47           2745   ;        -----------------------------------------
0A47           2746   _SendATCommand:
0A47 AA82      2747            mov     r2,dpl
0A49 AB83      2748            mov     r3,dph
0A4B ACF0      2749            mov     r4,b
0A4D           2750   ;        main.c:647: printf("Command: %s", s);
0A4D C002      2751            push    ar2
0A4F C003      2752            push    ar3
0A51 C004      2753            push    ar4
0A53 C002      2754            push    ar2
0A55 C003      2755            push    ar3
0A57 C004      2756            push    ar4
0A59 74B0      2757            mov     a,#__str_2
0A5B C0E0      2758            push    acc
0A5D 74E8      2759            mov     a,#(__str_2 >> 8)
0A5F C0E0      2760            push    acc
0A61 7480      2761            mov     a,#0x80
0A63 C0E0      2762            push    acc
0A65 120000    2763            lcall   _printf
0A68 E581      2764            mov     a,sp
0A6A 24FA      2765            add     a,#0xfa
0A6C F581      2766            mov     sp,a
0A6E           2767   ;        main.c:648: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0A6E C2A0      2768            clr     _P2_0
0A70           2769   ;        main.c:649: waitms(5);
0A70 900005    2770            mov     dptr,#0x0005
0A73 120000    2771            lcall   _waitms
0A76 D004      2772            pop     ar4
0A78 D003      2773            pop     ar3
0A7A D002      2774            pop     ar2
0A7C           2775   ;        main.c:650: sendstr1(s);
0A7C 8A82      2776            mov     dpl,r2
0A7E 8B83      2777            mov     dph,r3
0A80 8CF0      2778            mov     b,r4
0A82 120000    2779            lcall   _sendstr1
0A85           2780   ;        main.c:651: getstr1(buff, sizeof(buff)-1);
0A85 757013    2781            mov     _getstr1_PARM_2,#0x13
0A88 9056E0    2782            mov     dptr,#_buff
0A8B 75F040    2783            mov     b,#0x40
0A8E 120000    2784            lcall   _getstr1
0A91           2785   ;        main.c:652: waitms(10);
0A91 90000A    2786            mov     dptr,#0x000A
0A94 120000    2787            lcall   _waitms
0A97           2788   ;        main.c:653: P2_0=1; // 'set' pin to 1 is normal operation mode.
0A97 D2A0      2789            setb    _P2_0
0A99           2790   ;        main.c:654: printf("Response: %s\r\n", buff);
0A99 74E0      2791            mov     a,#_buff
0A9B C0E0      2792            push    acc
0A9D 7456      2793            mov     a,#(_buff >> 8)
0A9F C0E0      2794            push    acc
0AA1 7440      2795            mov     a,#0x40
0AA3 C0E0      2796            push    acc
0AA5 74F0      2797            mov     a,#__str_3
0AA7 C0E0      2798            push    acc
0AA9 74E8      2799            mov     a,#(__str_3 >> 8)
0AAB C0E0      2800            push    acc
0AAD 7480      2801            mov     a,#0x80
0AAF C0E0      2802            push    acc
0AB1 120000    2803            lcall   _printf
0AB4 E581      2804            mov     a,sp
0AB6 24FA      2805            add     a,#0xfa
0AB8 F581      2806            mov     sp,a
0ABA 22        2807            ret
0ABB           2808   ;------------------------------------------------------------
0ABB           2809   ;Allocation info for local variables in function 'ReceptionOff'
0ABB           2810   ;------------------------------------------------------------
0ABB           2811   ;------------------------------------------------------------
0ABB           2812   ;        main.c:657: void ReceptionOff (void)
0ABB           2813   ;        -----------------------------------------
0ABB           2814   ;         function ReceptionOff
0ABB           2815   ;        -----------------------------------------
0ABB           2816   _ReceptionOff:
0ABB           2817   ;        main.c:659: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0ABB C2A0      2818            clr     _P2_0
0ABD           2819   ;        main.c:660: waitms(10);
0ABD 90000A    2820            mov     dptr,#0x000A
0AC0 120000    2821            lcall   _waitms
0AC3           2822   ;        main.c:661: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0AC3 90E930    2823            mov     dptr,#__str_4
0AC6 75F080    2824            mov     b,#0x80
0AC9 120000    2825            lcall   _sendstr1
0ACC           2826   ;        main.c:662: waitms(10);
0ACC 90000A    2827            mov     dptr,#0x000A
0ACF 120000    2828            lcall   _waitms
0AD2           2829   ;        main.c:664: SCON1&=0b_0011_1111;
0AD2 53C83F    2830            anl     _SCON1,#0x3F
0AD5           2831   ;        main.c:665: P2_0=1; // 'set' pin to 1 is normal operation mode.
0AD5 D2A0      2832            setb    _P2_0
0AD7 22        2833            ret
0AD8           2834   ;------------------------------------------------------------
0AD8           2835   ;Allocation info for local variables in function 'measure_distance'
0AD8           2836   ;------------------------------------------------------------
0AD8           2837   ;answer                    Allocated with name '_measure_distance_answer_1_155'
0AD8           2838   ;i                         Allocated with name '_measure_distance_i_1_155'
0AD8           2839   ;------------------------------------------------------------
0AD8           2840   ;        main.c:668: int measure_distance(void)
0AD8           2841   ;        -----------------------------------------
0AD8           2842   ;         function measure_distance
0AD8           2843   ;        -----------------------------------------
0AD8           2844   _measure_distance:
0AD8           2845   ;        main.c:672: TL0 = 0; 
0AD8 758A00    2846            mov     _TL0,#0x00
0ADB           2847   ;        main.c:673: TH0 = 0; 
0ADB 758C00    2848            mov     _TH0,#0x00
0ADE           2849   ;        main.c:674: TF0 = 0; 
0ADE C28D      2850            clr     _TF0
0AE0           2851   ;        main.c:675: overflow_count = 0;
0AE0 9052A0    2852            mov     dptr,#_overflow_count
0AE3           2853   ;        main.c:676: duration = 0;
0AE3 E4        2854            clr     a
0AE4 F0        2855            movx    @dptr,a
0AE5 904C90    2856            mov     dptr,#_duration
0AE8 F0        2857            movx    @dptr,a
0AE9 A3        2858            inc     dptr
0AEA E4        2859            clr     a
0AEB F0        2860            movx    @dptr,a
0AEC A3        2861            inc     dptr
0AED F0        2862            movx    @dptr,a
0AEE A3        2863            inc     dptr
0AEF F0        2864            movx    @dptr,a
0AF0           2865   ;        main.c:678: TRIG_PIN = 1; 
0AF0 D280      2866            setb    _P0_0
0AF2           2867   ;        main.c:679: for(i = 0; i < 40; i++);
0AF2 7A28      2868            mov     r2,#0x28
0AF4 7B00      2869            mov     r3,#0x00
0AF6           2870   L023016?:
0AF6 1A        2871            dec     r2
0AF7 BAFFB0    2872            cjne    r2,#0xff,L023030?
0AFA 1B        2873            dec     r3
0AFB           2874   L023030?:
0AFB EA        2875            mov     a,r2
0AFC 4B        2876            orl     a,r3
0AFD 7000      2877            jnz     L023016?
0AFF           2878   ;        main.c:680: TRIG_PIN = 0; 
0AFF C280      2879            clr     _P0_0
0B01           2880   ;        main.c:682: while (ECHO_PIN != 0){
0B01 7A28      2881            mov     r2,#0x28
0B03 7B00      2882            mov     r3,#0x00
0B05           2883   L023003?:
0B05 30B130    2884            jnb     _P3_1,L023006?
0B08           2885   ;        main.c:683: i++;
0B08 0A        2886            inc     r2
0B09 BA0070    2887            cjne    r2,#0x00,L023033?
0B0C 0B        2888            inc     r3
0B0D           2889   L023033?:
0B0D           2890   ;        main.c:684: if (i > 3000){
0B0D C3        2891            clr     c
0B0E 74B8      2892            mov     a,#0xB8
0B10 9A        2893            subb    a,r2
0B11 740B      2894            mov     a,#0x0B
0B13 9B        2895            subb    a,r3
0B14 5000      2896            jnc     L023003?
0B16           2897   ;        main.c:685: printf("Time out\r\n");
0B16 74B0      2898            mov     a,#__str_5
0B18 C0E0      2899            push    acc
0B1A 74EA      2900            mov     a,#(__str_5 >> 8)
0B1C C0E0      2901            push    acc
0B1E 7480      2902            mov     a,#0x80
0B20 C0E0      2903            push    acc
0B22 120000    2904            lcall   _printf
0B25 1581      2905            dec     sp
0B27 1581      2906            dec     sp
0B29 1581      2907            dec     sp
0B2B           2908   ;        main.c:686: return -1;
0B2B 90FFFF    2909            mov     dptr,#0xFFFF
0B2E 22        2910            ret
0B2F           2911   ;        main.c:689: while (ECHO_PIN != 1);
0B2F           2912   L023006?:
0B2F 30B130    2913            jnb     _P3_1,L023006?
0B32           2914   ;        main.c:690: TR0 = 1; 
0B32 D28C      2915            setb    _TR0
0B34           2916   ;        main.c:691: while (ECHO_PIN == 1)
0B34           2917   L023011?:
0B34 30B130    2918            jnb     _P3_1,L023013?
0B37           2919   ;        main.c:693: if (TF0 == 1){
0B37           2920   ;        main.c:694: TF0 = 0; 
0B37 108D70    2921            jbc     _TF0,L023037?
0B3A 8000      2922            sjmp    L023011?
0B3C           2923   L023037?:
0B3C           2924   ;        main.c:695: overflow_count++;
0B3C 9052A0    2925            mov     dptr,#_overflow_count
0B3F E0        2926            movx    a,@dptr
0B40 2401      2927            add     a,#0x01
0B42 F0        2928            movx    @dptr,a
0B43 8000      2929            sjmp    L023011?
0B45           2930   L023013?:
0B45           2931   ;        main.c:699: TR0 = 0; 
0B45 C28C      2932            clr     _TR0
0B47           2933   ;        main.c:700: duration = (overflow_count*65536.0 + TH0*256.0 + TL0) * (12.0/SYSCLK);
0B47 9052A0    2934            mov     dptr,#_overflow_count
0B4A E0        2935            movx    a,@dptr
0B4B F582      2936            mov     dpl,a
0B4D 120000    2937            lcall   ___uchar2fs
0B50 AA82      2938            mov     r2,dpl
0B52 AB83      2939            mov     r3,dph
0B54 ACF0      2940            mov     r4,b
0B56 FD        2941            mov     r5,a
0B57 C002      2942            push    ar2
0B59 C003      2943            push    ar3
0B5B C004      2944            push    ar4
0B5D C005      2945            push    ar5
0B5F 900000    2946            mov     dptr,#0x0000
0B62 75F080    2947            mov     b,#0x80
0B65 7447      2948            mov     a,#0x47
0B67 120000    2949            lcall   ___fsmul
0B6A AA82      2950            mov     r2,dpl
0B6C AB83      2951            mov     r3,dph
0B6E ACF0      2952            mov     r4,b
0B70 FD        2953            mov     r5,a
0B71 E581      2954            mov     a,sp
0B73 24FC      2955            add     a,#0xfc
0B75 F581      2956            mov     sp,a
0B77 858C82    2957            mov     dpl,_TH0
0B7A C002      2958            push    ar2
0B7C C003      2959            push    ar3
0B7E C004      2960            push    ar4
0B80 C005      2961            push    ar5
0B82 120000    2962            lcall   ___uchar2fs
0B85 AE82      2963            mov     r6,dpl
0B87 AF83      2964            mov     r7,dph
0B89 A8F0      2965            mov     r0,b
0B8B F9        2966            mov     r1,a
0B8C C006      2967            push    ar6
0B8E C007      2968            push    ar7
0B90 C000      2969            push    ar0
0B92 C001      2970            push    ar1
0B94 900000    2971            mov     dptr,#0x0000
0B97 75F080    2972            mov     b,#0x80
0B9A 7443      2973            mov     a,#0x43
0B9C 120000    2974            lcall   ___fsmul
0B9F AE82      2975            mov     r6,dpl
0BA1 AF83      2976            mov     r7,dph
0BA3 A8F0      2977            mov     r0,b
0BA5 F9        2978            mov     r1,a
0BA6 E581      2979            mov     a,sp
0BA8 24FC      2980            add     a,#0xfc
0BAA F581      2981            mov     sp,a
0BAC D005      2982            pop     ar5
0BAE D004      2983            pop     ar4
0BB0 D003      2984            pop     ar3
0BB2 D002      2985            pop     ar2
0BB4 C006      2986            push    ar6
0BB6 C007      2987            push    ar7
0BB8 C000      2988            push    ar0
0BBA C001      2989            push    ar1
0BBC 8A82      2990            mov     dpl,r2
0BBE 8B83      2991            mov     dph,r3
0BC0 8CF0      2992            mov     b,r4
0BC2 ED        2993            mov     a,r5
0BC3 120000    2994            lcall   ___fsadd
0BC6 AA82      2995            mov     r2,dpl
0BC8 AB83      2996            mov     r3,dph
0BCA ACF0      2997            mov     r4,b
0BCC FD        2998            mov     r5,a
0BCD E581      2999            mov     a,sp
0BCF 24FC      3000            add     a,#0xfc
0BD1 F581      3001            mov     sp,a
0BD3 AE8A      3002            mov     r6,_TL0
0BD5 7F00      3003            mov     r7,#0x00
0BD7 8E82      3004            mov     dpl,r6
0BD9 8F83      3005            mov     dph,r7
0BDB C002      3006            push    ar2
0BDD C003      3007            push    ar3
0BDF C004      3008            push    ar4
0BE1 C005      3009            push    ar5
0BE3 120000    3010            lcall   ___sint2fs
0BE6 AE82      3011            mov     r6,dpl
0BE8 AF83      3012            mov     r7,dph
0BEA A8F0      3013            mov     r0,b
0BEC F9        3014            mov     r1,a
0BED D005      3015            pop     ar5
0BEF D004      3016            pop     ar4
0BF1 D003      3017            pop     ar3
0BF3 D002      3018            pop     ar2
0BF5 C006      3019            push    ar6
0BF7 C007      3020            push    ar7
0BF9 C000      3021            push    ar0
0BFB C001      3022            push    ar1
0BFD 8A82      3023            mov     dpl,r2
0BFF 8B83      3024            mov     dph,r3
0C01 8CF0      3025            mov     b,r4
0C03 ED        3026            mov     a,r5
0C04 120000    3027            lcall   ___fsadd
0C07 AA82      3028            mov     r2,dpl
0C09 AB83      3029            mov     r3,dph
0C0B ACF0      3030            mov     r4,b
0C0D FD        3031            mov     r5,a
0C0E E581      3032            mov     a,sp
0C10 24FC      3033            add     a,#0xfc
0C12 F581      3034            mov     sp,a
0C14 C002      3035            push    ar2
0C16 C003      3036            push    ar3
0C18 C004      3037            push    ar4
0C1A C005      3038            push    ar5
0C1C 90F4FC    3039            mov     dptr,#0xF4FC
0C1F 75F032    3040            mov     b,#0x32
0C22 7434      3041            mov     a,#0x34
0C24 120000    3042            lcall   ___fsmul
0C27 AA82      3043            mov     r2,dpl
0C29 AB83      3044            mov     r3,dph
0C2B ACF0      3045            mov     r4,b
0C2D FD        3046            mov     r5,a
0C2E E581      3047            mov     a,sp
0C30 24FC      3048            add     a,#0xfc
0C32 F581      3049            mov     sp,a
0C34 904C90    3050            mov     dptr,#_duration
0C37 EA        3051            mov     a,r2
0C38 F0        3052            movx    @dptr,a
0C39 A3        3053            inc     dptr
0C3A EB        3054            mov     a,r3
0C3B F0        3055            movx    @dptr,a
0C3C A3        3056            inc     dptr
0C3D EC        3057            mov     a,r4
0C3E F0        3058            movx    @dptr,a
0C3F A3        3059            inc     dptr
0C40 ED        3060            mov     a,r5
0C41 F0        3061            movx    @dptr,a
0C42           3062   ;        main.c:702: answer = 100 * (340.0 * duration * 100.0 / 2.0); // distance in cm
0C42 C002      3063            push    ar2
0C44 C003      3064            push    ar3
0C46 C004      3065            push    ar4
0C48 C005      3066            push    ar5
0C4A 90D000    3067            mov     dptr,#0xD000
0C4D 75F004    3068            mov     b,#0x04
0C50 7447      3069            mov     a,#0x47
0C52 120000    3070            lcall   ___fsmul
0C55 AA82      3071            mov     r2,dpl
0C57 AB83      3072            mov     r3,dph
0C59 ACF0      3073            mov     r4,b
0C5B FD        3074            mov     r5,a
0C5C E581      3075            mov     a,sp
0C5E 24FC      3076            add     a,#0xfc
0C60 F581      3077            mov     sp,a
0C62 E4        3078            clr     a
0C63 C0E0      3079            push    acc
0C65 C0E0      3080            push    acc
0C67 C0E0      3081            push    acc
0C69 7440      3082            mov     a,#0x40
0C6B C0E0      3083            push    acc
0C6D 8A82      3084            mov     dpl,r2
0C6F 8B83      3085            mov     dph,r3
0C71 8CF0      3086            mov     b,r4
0C73 ED        3087            mov     a,r5
0C74 120000    3088            lcall   ___fsdiv
0C77 AA82      3089            mov     r2,dpl
0C79 AB83      3090            mov     r3,dph
0C7B ACF0      3091            mov     r4,b
0C7D FD        3092            mov     r5,a
0C7E E581      3093            mov     a,sp
0C80 24FC      3094            add     a,#0xfc
0C82 F581      3095            mov     sp,a
0C84 C002      3096            push    ar2
0C86 C003      3097            push    ar3
0C88 C004      3098            push    ar4
0C8A C005      3099            push    ar5
0C8C 900000    3100            mov     dptr,#0x0000
0C8F 75F0C8    3101            mov     b,#0xC8
0C92 7442      3102            mov     a,#0x42
0C94 120000    3103            lcall   ___fsmul
0C97 AA82      3104            mov     r2,dpl
0C99 AB83      3105            mov     r3,dph
0C9B ACF0      3106            mov     r4,b
0C9D FD        3107            mov     r5,a
0C9E E581      3108            mov     a,sp
0CA0 24FC      3109            add     a,#0xfc
0CA2 F581      3110            mov     sp,a
0CA4 8A82      3111            mov     dpl,r2
0CA6 8B83      3112            mov     dph,r3
0CA8 8CF0      3113            mov     b,r4
0CAA ED        3114            mov     a,r5
0CAB           3115   ;        main.c:704: return answer; 
0CAB 020000    3116            ljmp    ___fs2sint
0CAE           3117   ;------------------------------------------------------------
0CAE           3118   ;Allocation info for local variables in function 'Set_Pin_Output'
0CAE           3119   ;------------------------------------------------------------
0CAE           3120   ;pin                       Allocated to registers r2 
0CAE           3121   ;mask                      Allocated to registers r3 
0CAE           3122   ;------------------------------------------------------------
0CAE           3123   ;        main.c:707: void Set_Pin_Output (unsigned char pin)
0CAE           3124   ;        -----------------------------------------
0CAE           3125   ;         function Set_Pin_Output
0CAE           3126   ;        -----------------------------------------
0CAE           3127   _Set_Pin_Output:
0CAE AA82      3128            mov     r2,dpl
0CB0           3129   ;        main.c:711: mask=(1<<(pin&0x7));
0CB0 7407      3130            mov     a,#0x07
0CB2 5A        3131            anl     a,r2
0CB3 F5F0      3132            mov     b,a
0CB5 05F0      3133            inc     b
0CB7 7401      3134            mov     a,#0x01
0CB9 8000      3135            sjmp    L024011?
0CBB           3136   L024009?:
0CBB 25E0      3137            add     a,acc
0CBD           3138   L024011?:
0CBD D5F070    3139            djnz    b,L024009?
0CC0 FB        3140            mov     r3,a
0CC1           3141   ;        main.c:712: switch(pin/0x10)
0CC1 EA        3142            mov     a,r2
0CC2 C4        3143            swap    a
0CC3 540F      3144            anl     a,#0x0f
0CC5 FA        3145            mov  r2,a
0CC6 24FC      3146            add     a,#0xff - 0x03
0CC8 4000      3147            jc      L024006?
0CCA EA        3148            mov     a,r2
0CCB 2A        3149            add     a,r2
0CCC 2A        3150            add     a,r2
0CCD 90EDF0    3151            mov     dptr,#L024013?
0CD0 73        3152            jmp     @a+dptr
0CD1           3153   L024013?:
0CD1 020000    3154            ljmp    L024001?
0CD4 020000    3155            ljmp    L024002?
0CD7 020000    3156            ljmp    L024003?
0CDA 020000    3157            ljmp    L024004?
0CDD           3158   ;        main.c:714: case 0: P0MDOUT |= mask; break;
0CDD           3159   L024001?:
0CDD EB        3160            mov     a,r3
0CDE 42A4      3161            orl     _P0MDOUT,a
0CE0           3162   ;        main.c:715: case 1: P1MDOUT |= mask; break;
0CE0 22        3163            ret
0CE1           3164   L024002?:
0CE1 EB        3165            mov     a,r3
0CE2 42A5      3166            orl     _P1MDOUT,a
0CE4           3167   ;        main.c:716: case 2: P2MDOUT |= mask; break; 
0CE4 22        3168            ret
0CE5           3169   L024003?:
0CE5 EB        3170            mov     a,r3
0CE6 42A6      3171            orl     _P2MDOUT,a
0CE8           3172   ;        main.c:717: case 3: P3MDOUT |= mask; break; 
0CE8 22        3173            ret
0CE9           3174   L024004?:
0CE9 EB        3175            mov     a,r3
0CEA 429C      3176            orl     _P3MDOUT,a
0CEC           3177   ;        main.c:718: }   
0CEC           3178   L024006?:
0CEC 22        3179            ret
0CED           3180   ;------------------------------------------------------------
0CED           3181   ;Allocation info for local variables in function 'Set_Pin_Input'
0CED           3182   ;------------------------------------------------------------
0CED           3183   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_164'
0CED           3184   ;pin                       Allocated to registers r2 
0CED           3185   ;------------------------------------------------------------
0CED           3186   ;        main.c:721: void Set_Pin_Input (unsigned char pin)
0CED           3187   ;        -----------------------------------------
0CED           3188   ;         function Set_Pin_Input
0CED           3189   ;        -----------------------------------------
0CED           3190   _Set_Pin_Input:
0CED AA82      3191            mov     r2,dpl
0CEF           3192   ;        main.c:725: mask=(1<<(pin&0x7));
0CEF 7407      3193            mov     a,#0x07
0CF1 5A        3194            anl     a,r2
0CF2 F5F0      3195            mov     b,a
0CF4 05F0      3196            inc     b
0CF6 7401      3197            mov     a,#0x01
0CF8 8000      3198            sjmp    L025011?
0CFA           3199   L025009?:
0CFA 25E0      3200            add     a,acc
0CFC           3201   L025011?:
0CFC D5F070    3202            djnz    b,L025009?
0CFF           3203   ;        main.c:726: mask=~mask;
0CFF F4        3204            cpl     a
0D00 FB        3205            mov     r3,a
0D01           3206   ;        main.c:727: switch(pin/0x10)
0D01 EA        3207            mov     a,r2
0D02 C4        3208            swap    a
0D03 540F      3209            anl     a,#0x0f
0D05 FA        3210            mov  r2,a
0D06 24FC      3211            add     a,#0xff - 0x03
0D08 4000      3212            jc      L025006?
0D0A EA        3213            mov     a,r2
0D0B 2A        3214            add     a,r2
0D0C 2A        3215            add     a,r2
0D0D 900060    3216            mov     dptr,#L025013?
0D10 73        3217            jmp     @a+dptr
0D11           3218   L025013?:
0D11 020000    3219            ljmp    L025001?
0D14 020000    3220            ljmp    L025002?
0D17 020000    3221            ljmp    L025003?
0D1A 020000    3222            ljmp    L025004?
0D1D           3223   ;        main.c:729: case 0: P0MDOUT &= mask; break;
0D1D           3224   L025001?:
0D1D EB        3225            mov     a,r3
0D1E 52A4      3226            anl     _P0MDOUT,a
0D20           3227   ;        main.c:730: case 1: P1MDOUT &= mask; break;
0D20 22        3228            ret
0D21           3229   L025002?:
0D21 EB        3230            mov     a,r3
0D22 52A5      3231            anl     _P1MDOUT,a
0D24           3232   ;        main.c:731: case 2: P2MDOUT &= mask; break; 
0D24 22        3233            ret
0D25           3234   L025003?:
0D25 EB        3235            mov     a,r3
0D26 52A6      3236            anl     _P2MDOUT,a
0D28           3237   ;        main.c:732: case 3: P3MDOUT &= mask; break; 
0D28 22        3238            ret
0D29           3239   L025004?:
0D29 EB        3240            mov     a,r3
0D2A 529C      3241            anl     _P3MDOUT,a
0D2C           3242   ;        main.c:733: }   
0D2C           3243   L025006?:
0D2C 22        3244            ret
0D2D           3245   ;------------------------------------------------------------
0D2D           3246   ;Allocation info for local variables in function 'InitADC'
0D2D           3247   ;------------------------------------------------------------
0D2D           3248   ;------------------------------------------------------------
0D2D           3249   ;        main.c:736: void InitADC (void)
0D2D           3250   ;        -----------------------------------------
0D2D           3251   ;         function InitADC
0D2D           3252   ;        -----------------------------------------
0D2D           3253   _InitADC:
0D2D           3254   ;        main.c:738: SFRPAGE = 0x00;
0D2D 75A700    3255            mov     _SFRPAGE,#0x00
0D30           3256   ;        main.c:739: ADEN=0; // Disable ADC
0D30 C2EF      3257            clr     _ADEN
0D32           3258   ;        main.c:744: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0D32 75B280    3259            mov     _ADC0CN1,#0x80
0D35           3260   ;        main.c:748: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0D35 75BC20    3261            mov     _ADC0CF0,#0x20
0D38           3262   ;        main.c:752: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
0D38 75B91E    3263            mov     _ADC0CF1,#0x1E
0D3B           3264   ;        main.c:761: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0D3B 75E800    3265            mov     _ADC0CN0,#0x00
0D3E           3266   ;        main.c:766: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0D3E 75DF3F    3267            mov     _ADC0CF2,#0x3F
0D41           3268   ;        main.c:770: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0D41 75B300    3269            mov     _ADC0CN2,#0x00
0D44           3270   ;        main.c:772: ADEN=1; // Enable ADC
0D44 D2EF      3271            setb    _ADEN
0D46 22        3272            ret
0D47           3273   ;------------------------------------------------------------
0D47           3274   ;Allocation info for local variables in function 'InitPinADC'
0D47           3275   ;------------------------------------------------------------
0D47           3276   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
0D47           3277   ;portno                    Allocated to registers r2 
0D47           3278   ;mask                      Allocated to registers r3 
0D47           3279   ;------------------------------------------------------------
0D47           3280   ;        main.c:775: void InitPinADC (unsigned char portno, unsigned char pin_num)
0D47           3281   ;        -----------------------------------------
0D47           3282   ;         function InitPinADC
0D47           3283   ;        -----------------------------------------
0D47           3284   _InitPinADC:
0D47 AA82      3285            mov     r2,dpl
0D49           3286   ;        main.c:779: mask=1<<pin_num;
0D49 85E0F0    3287            mov     b,_InitPinADC_PARM_2
0D4C 05F0      3288            inc     b
0D4E 7401      3289            mov     a,#0x01
0D50 8000      3290            sjmp    L027013?
0D52           3291   L027011?:
0D52 25E0      3292            add     a,acc
0D54           3293   L027013?:
0D54 D5F0E0    3294            djnz    b,L027011?
0D57 FB        3295            mov     r3,a
0D58           3296   ;        main.c:781: SFRPAGE = 0x20;
0D58 75A720    3297            mov     _SFRPAGE,#0x20
0D5B           3298   ;        main.c:782: switch (portno)
0D5B BA0020    3299            cjne    r2,#0x00,L027014?
0D5E 8000      3300            sjmp    L027001?
0D60           3301   L027014?:
0D60 BA01A0    3302            cjne    r2,#0x01,L027015?
0D63 8000      3303            sjmp    L027002?
0D65           3304   L027015?:
0D65           3305   ;        main.c:784: case 0:
0D65 BA0220    3306            cjne    r2,#0x02,L027005?
0D68 8000      3307            sjmp    L027003?
0D6A           3308   L027001?:
0D6A           3309   ;        main.c:785: P0MDIN &= (~mask); // Set pin as analog input
0D6A EB        3310            mov     a,r3
0D6B F4        3311            cpl     a
0D6C FA        3312            mov     r2,a
0D6D 52F1      3313            anl     _P0MDIN,a
0D6F           3314   ;        main.c:786: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0D6F EB        3315            mov     a,r3
0D70 42D4      3316            orl     _P0SKIP,a
0D72           3317   ;        main.c:787: break;
0D72           3318   ;        main.c:788: case 1:
0D72 8000      3319            sjmp    L027005?
0D74           3320   L027002?:
0D74           3321   ;        main.c:789: P1MDIN &= (~mask); // Set pin as analog input
0D74 EB        3322            mov     a,r3
0D75 F4        3323            cpl     a
0D76 FA        3324            mov     r2,a
0D77 52F2      3325            anl     _P1MDIN,a
0D79           3326   ;        main.c:790: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0D79 EB        3327            mov     a,r3
0D7A 42D5      3328            orl     _P1SKIP,a
0D7C           3329   ;        main.c:791: break;
0D7C           3330   ;        main.c:792: case 2:
0D7C 8000      3331            sjmp    L027005?
0D7E           3332   L027003?:
0D7E           3333   ;        main.c:793: P2MDIN &= (~mask); // Set pin as analog input
0D7E EB        3334            mov     a,r3
0D7F F4        3335            cpl     a
0D80 FA        3336            mov     r2,a
0D81 52F3      3337            anl     _P2MDIN,a
0D83           3338   ;        main.c:794: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0D83 EB        3339            mov     a,r3
0D84 42CC      3340            orl     _P2SKIP,a
0D86           3341   ;        main.c:798: }
0D86           3342   L027005?:
0D86           3343   ;        main.c:799: SFRPAGE = 0x00;
0D86 75A700    3344            mov     _SFRPAGE,#0x00
0D89 22        3345            ret
0D8A           3346   ;------------------------------------------------------------
0D8A           3347   ;Allocation info for local variables in function 'ADC_at_Pin'
0D8A           3348   ;------------------------------------------------------------
0D8A           3349   ;pin                       Allocated to registers 
0D8A           3350   ;------------------------------------------------------------
0D8A           3351   ;        main.c:802: unsigned int ADC_at_Pin(unsigned char pin)
0D8A           3352   ;        -----------------------------------------
0D8A           3353   ;         function ADC_at_Pin
0D8A           3354   ;        -----------------------------------------
0D8A           3355   _ADC_at_Pin:
0D8A 8582BB    3356            mov     _ADC0MX,dpl
0D8D           3357   ;        main.c:805: ADINT = 0;
0D8D C2ED      3358            clr     _ADINT
0D8F           3359   ;        main.c:806: ADBUSY = 1;     // Convert voltage at the pin
0D8F D2EC      3360            setb    _ADBUSY
0D91           3361   ;        main.c:807: while (!ADINT); // Wait for conversion to complete
0D91           3362   L028001?:
0D91 30EDA0    3363            jnb     _ADINT,L028001?
0D94           3364   ;        main.c:808: return (ADC0);
0D94 85BD82    3365            mov     dpl,_ADC0
0D97 85BE83    3366            mov     dph,(_ADC0 >> 8)
0D9A 22        3367            ret
0D9B           3368   ;------------------------------------------------------------
0D9B           3369   ;Allocation info for local variables in function 'ReadHX711'
0D9B           3370   ;------------------------------------------------------------
0D9B           3371   ;dataa                     Allocated with name '_ReadHX711_dataa_1_174'
0D9B           3372   ;i                         Allocated with name '_ReadHX711_i_1_174'
0D9B           3373   ;ans                       Allocated with name '_ReadHX711_ans_1_174'
0D9B           3374   ;j                         Allocated with name '_ReadHX711_j_1_174'
0D9B           3375   ;------------------------------------------------------------
0D9B           3376   ;        main.c:811: int ReadHX711(void) {
0D9B           3377   ;        -----------------------------------------
0D9B           3378   ;         function ReadHX711
0D9B           3379   ;        -----------------------------------------
0D9B           3380   _ReadHX711:
0D9B           3381   ;        main.c:812: xdata unsigned long dataa = 0;
0D9B 90CFD0    3382            mov     dptr,#_ReadHX711_dataa_1_174
0D9E E4        3383            clr     a
0D9F F0        3384            movx    @dptr,a
0DA0 A3        3385            inc     dptr
0DA1 F0        3386            movx    @dptr,a
0DA2 A3        3387            inc     dptr
0DA3 F0        3388            movx    @dptr,a
0DA4 A3        3389            inc     dptr
0DA5 F0        3390            movx    @dptr,a
0DA6           3391   ;        main.c:817: PD_SCK = 0;
0DA6 C2A5      3392            clr     _P2_5
0DA8           3393   ;        main.c:819: for (i = 0; i < 24; i++) {
0DA8 7A00      3394            mov     r2,#0x00
0DAA           3395   L029011?:
0DAA C3        3396            clr     c
0DAB EA        3397            mov     a,r2
0DAC 6480      3398            xrl     a,#0x80
0DAE 9498      3399            subb    a,#0x98
0DB0 4000      3400            jc      L029037?
0DB2 020000    3401            ljmp    L029014?
0DB5           3402   L029037?:
0DB5           3403   ;        main.c:820: PD_SCK = 1;
0DB5 D2A5      3404            setb    _P2_5
0DB7           3405   ;        main.c:821: for (j = 0; j < 4; j++);
0DB7 90D020    3406            mov     dptr,#_ReadHX711_j_1_174
0DBA E4        3407            clr     a
0DBB F0        3408            movx    @dptr,a
0DBC           3409   L029003?:
0DBC 90D020    3410            mov     dptr,#_ReadHX711_j_1_174
0DBF E0        3411            movx    a,@dptr
0DC0 FB        3412            mov     r3,a
0DC1 C3        3413            clr     c
0DC2 6480      3414            xrl     a,#0x80
0DC4 9484      3415            subb    a,#0x84
0DC6 5000      3416            jnc     L029006?
0DC8 90D020    3417            mov     dptr,#_ReadHX711_j_1_174
0DCB E0        3418            movx    a,@dptr
0DCC 2401      3419            add     a,#0x01
0DCE F0        3420            movx    @dptr,a
0DCF 8000      3421            sjmp    L029003?
0DD1           3422   L029006?:
0DD1           3423   ;        main.c:822: dataa = dataa << 1;
0DD1 90CFD0    3424            mov     dptr,#_ReadHX711_dataa_1_174
0DD4 E0        3425            movx    a,@dptr
0DD5 FB        3426            mov     r3,a
0DD6 A3        3427            inc     dptr
0DD7 E0        3428            movx    a,@dptr
0DD8 FC        3429            mov     r4,a
0DD9 A3        3430            inc     dptr
0DDA E0        3431            movx    a,@dptr
0DDB FD        3432            mov     r5,a
0DDC A3        3433            inc     dptr
0DDD E0        3434            movx    a,@dptr
0DDE FE        3435            mov     r6,a
0DDF EB        3436            mov     a,r3
0DE0 2B        3437            add     a,r3
0DE1 FB        3438            mov     r3,a
0DE2 EC        3439            mov     a,r4
0DE3 33        3440            rlc     a
0DE4 FC        3441            mov     r4,a
0DE5 ED        3442            mov     a,r5
0DE6 33        3443            rlc     a
0DE7 FD        3444            mov     r5,a
0DE8 EE        3445            mov     a,r6
0DE9 33        3446            rlc     a
0DEA FE        3447            mov     r6,a
0DEB 90CFD0    3448            mov     dptr,#_ReadHX711_dataa_1_174
0DEE EB        3449            mov     a,r3
0DEF F0        3450            movx    @dptr,a
0DF0 A3        3451            inc     dptr
0DF1 EC        3452            mov     a,r4
0DF2 F0        3453            movx    @dptr,a
0DF3 A3        3454            inc     dptr
0DF4 ED        3455            mov     a,r5
0DF5 F0        3456            movx    @dptr,a
0DF6 A3        3457            inc     dptr
0DF7 EE        3458            mov     a,r6
0DF8 F0        3459            movx    @dptr,a
0DF9           3460   ;        main.c:823: if (DOUT) {
0DF9 30A620    3461            jnb     _P2_6,L029002?
0DFC           3462   ;        main.c:824: dataa |= 0x01;
0DFC 90CFD0    3463            mov     dptr,#_ReadHX711_dataa_1_174
0DFF E0        3464            movx    a,@dptr
0E00 FB        3465            mov     r3,a
0E01 A3        3466            inc     dptr
0E02 E0        3467            movx    a,@dptr
0E03 FC        3468            mov     r4,a
0E04 A3        3469            inc     dptr
0E05 E0        3470            movx    a,@dptr
0E06 FD        3471            mov     r5,a
0E07 A3        3472            inc     dptr
0E08 E0        3473            movx    a,@dptr
0E09 FE        3474            mov     r6,a
0E0A 90CFD0    3475            mov     dptr,#_ReadHX711_dataa_1_174
0E0D 7401      3476            mov     a,#0x01
0E0F 4B        3477            orl     a,r3
0E10 F0        3478            movx    @dptr,a
0E11 A3        3479            inc     dptr
0E12 EC        3480            mov     a,r4
0E13 F0        3481            movx    @dptr,a
0E14 A3        3482            inc     dptr
0E15 ED        3483            mov     a,r5
0E16 F0        3484            movx    @dptr,a
0E17 A3        3485            inc     dptr
0E18 EE        3486            mov     a,r6
0E19 F0        3487            movx    @dptr,a
0E1A           3488   L029002?:
0E1A           3489   ;        main.c:826: PD_SCK = 0;
0E1A C2A5      3490            clr     _P2_5
0E1C           3491   ;        main.c:827: for (j = 0; j < 4; j++);
0E1C 90D020    3492            mov     dptr,#_ReadHX711_j_1_174
0E1F E4        3493            clr     a
0E20 F0        3494            movx    @dptr,a
0E21           3495   L029007?:
0E21 90D020    3496            mov     dptr,#_ReadHX711_j_1_174
0E24 E0        3497            movx    a,@dptr
0E25 FB        3498            mov     r3,a
0E26 C3        3499            clr     c
0E27 6480      3500            xrl     a,#0x80
0E29 9484      3501            subb    a,#0x84
0E2B 5000      3502            jnc     L029013?
0E2D 90D020    3503            mov     dptr,#_ReadHX711_j_1_174
0E30 E0        3504            movx    a,@dptr
0E31 2401      3505            add     a,#0x01
0E33 F0        3506            movx    @dptr,a
0E34 8000      3507            sjmp    L029007?
0E36           3508   L029013?:
0E36           3509   ;        main.c:819: for (i = 0; i < 24; i++) {
0E36 0A        3510            inc     r2
0E37 020000    3511            ljmp    L029011?
0E3A           3512   L029014?:
0E3A           3513   ;        main.c:830: PD_SCK = 1;
0E3A D2A5      3514            setb    _P2_5
0E3C           3515   ;        main.c:831: for (j = 0; j < 4; j++);
0E3C 90D020    3516            mov     dptr,#_ReadHX711_j_1_174
0E3F E4        3517            clr     a
0E40 F0        3518            movx    @dptr,a
0E41           3519   L029015?:
0E41 90D020    3520            mov     dptr,#_ReadHX711_j_1_174
0E44 E0        3521            movx    a,@dptr
0E45 FA        3522            mov     r2,a
0E46 C3        3523            clr     c
0E47 6480      3524            xrl     a,#0x80
0E49 9484      3525            subb    a,#0x84
0E4B 5000      3526            jnc     L029018?
0E4D 90D020    3527            mov     dptr,#_ReadHX711_j_1_174
0E50 E0        3528            movx    a,@dptr
0E51 2401      3529            add     a,#0x01
0E53 F0        3530            movx    @dptr,a
0E54 8000      3531            sjmp    L029015?
0E56           3532   L029018?:
0E56           3533   ;        main.c:832: PD_SCK = 0;
0E56 C2A5      3534            clr     _P2_5
0E58           3535   ;        main.c:833: for (j = 0; j < 4; j++);
0E58 90D020    3536            mov     dptr,#_ReadHX711_j_1_174
0E5B E4        3537            clr     a
0E5C F0        3538            movx    @dptr,a
0E5D           3539   L029019?:
0E5D 90D020    3540            mov     dptr,#_ReadHX711_j_1_174
0E60 E0        3541            movx    a,@dptr
0E61 FA        3542            mov     r2,a
0E62 C3        3543            clr     c
0E63 6480      3544            xrl     a,#0x80
0E65 9484      3545            subb    a,#0x84
0E67 5000      3546            jnc     L029022?
0E69 90D020    3547            mov     dptr,#_ReadHX711_j_1_174
0E6C E0        3548            movx    a,@dptr
0E6D 2401      3549            add     a,#0x01
0E6F F0        3550            movx    @dptr,a
0E70 8000      3551            sjmp    L029019?
0E72           3552   L029022?:
0E72           3553   ;        main.c:834: ans = (dataa % 1000000)/10;
0E72 90CFD0    3554            mov     dptr,#_ReadHX711_dataa_1_174
0E75 E0        3555            movx    a,@dptr
0E76 FA        3556            mov     r2,a
0E77 A3        3557            inc     dptr
0E78 E0        3558            movx    a,@dptr
0E79 FB        3559            mov     r3,a
0E7A A3        3560            inc     dptr
0E7B E0        3561            movx    a,@dptr
0E7C FC        3562            mov     r4,a
0E7D A3        3563            inc     dptr
0E7E E0        3564            movx    a,@dptr
0E7F FD        3565            mov     r5,a
0E80 750040    3566            mov     __modulong_PARM_2,#0x40
0E83 750142    3567            mov     (__modulong_PARM_2 + 1),#0x42
0E86 75020F    3568            mov     (__modulong_PARM_2 + 2),#0x0F
0E89 750300    3569            mov     (__modulong_PARM_2 + 3),#0x00
0E8C 8A82      3570            mov     dpl,r2
0E8E 8B83      3571            mov     dph,r3
0E90 8CF0      3572            mov     b,r4
0E92 ED        3573            mov     a,r5
0E93 120000    3574            lcall   __modulong
0E96 AA82      3575            mov     r2,dpl
0E98 AB83      3576            mov     r3,dph
0E9A ACF0      3577            mov     r4,b
0E9C FD        3578            mov     r5,a
0E9D 75000A    3579            mov     __divulong_PARM_2,#0x0A
0EA0 E4        3580            clr     a
0EA1 F501      3581            mov     (__divulong_PARM_2 + 1),a
0EA3 F502      3582            mov     (__divulong_PARM_2 + 2),a
0EA5 F503      3583            mov     (__divulong_PARM_2 + 3),a
0EA7 8A82      3584            mov     dpl,r2
0EA9 8B83      3585            mov     dph,r3
0EAB 8CF0      3586            mov     b,r4
0EAD ED        3587            mov     a,r5
0EAE           3588   ;        main.c:835: return ans;
0EAE 020000    3589            ljmp    __divulong
0EB1           3590   ;------------------------------------------------------------
0EB1           3591   ;Allocation info for local variables in function 'Timer5_ISR'
0EB1           3592   ;------------------------------------------------------------
0EB1           3593   ;------------------------------------------------------------
0EB1           3594   ;        main.c:838: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0EB1           3595   ;        -----------------------------------------
0EB1           3596   ;         function Timer5_ISR
0EB1           3597   ;        -----------------------------------------
0EB1           3598   _Timer5_ISR:
0EB1 C0B0      3599            push    bits
0EB3 C0E0      3600            push    acc
0EB5 C0F0      3601            push    b
0EB7 C082      3602            push    dpl
0EB9 C083      3603            push    dph
0EBB C002      3604            push    (0+2)
0EBD C003      3605            push    (0+3)
0EBF C004      3606            push    (0+4)
0EC1 C005      3607            push    (0+5)
0EC3 C006      3608            push    (0+6)
0EC5 C007      3609            push    (0+7)
0EC7 C000      3610            push    (0+0)
0EC9 C001      3611            push    (0+1)
0ECB C0D0      3612            push    psw
0ECD 75D000    3613            mov     psw,#0x00
0ED0           3614   ;        main.c:840: SFRPAGE=0x10;
0ED0 75A710    3615            mov     _SFRPAGE,#0x10
0ED3           3616   ;        main.c:841: TF5H = 0; // Clear Timer5 interrupt flag
0ED3 C2C7      3617            clr     _TF5H
0ED5           3618   ;        main.c:842: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0ED5 75D2C4    3619            mov     _TMR5RL,#0xC4
0ED8 75D3FF    3620            mov     (_TMR5RL >> 8),#0xFF
0EDB           3621   ;        main.c:844: fre_mea_count++;
0EDB 904F20    3622            mov     dptr,#_fre_mea_count
0EDE E0        3623            movx    a,@dptr
0EDF 2401      3624            add     a,#0x01
0EE1 F0        3625            movx    @dptr,a
0EE2 A3        3626            inc     dptr
0EE3 E0        3627            movx    a,@dptr
0EE4 3400      3628            addc    a,#0x00
0EE6 F0        3629            movx    @dptr,a
0EE7           3630   ;        main.c:845: if(fre_mea_count == 1000){
0EE7 904F20    3631            mov     dptr,#_fre_mea_count
0EEA E0        3632            movx    a,@dptr
0EEB FA        3633            mov     r2,a
0EEC A3        3634            inc     dptr
0EED E0        3635            movx    a,@dptr
0EEE FB        3636            mov     r3,a
0EEF BAE8B0    3637            cjne    r2,#0xE8,L030004?
0EF2 BB03B0    3638            cjne    r3,#0x03,L030004?
0EF5           3639   ;        main.c:846: fre_mea_count = 0;
0EF5 904F20    3640            mov     dptr,#_fre_mea_count
0EF8 E4        3641            clr     a
0EF9 F0        3642            movx    @dptr,a
0EFA A3        3643            inc     dptr
0EFB F0        3644            movx    @dptr,a
0EFC           3645   ;        main.c:847: if(mea_yes){
0EFC 904D10    3646            mov     dptr,#_mea_yes
0EFF E0        3647            movx    a,@dptr
0F00 FA        3648            mov     r2,a
0F01 6000      3649            jz      L030004?
0F03           3650   ;        main.c:848: freq100 = get_freq();
0F03 120000    3651            lcall   _get_freq
0F06 AA82      3652            mov     r2,dpl
0F08 AB83      3653            mov     r3,dph
0F0A 9056A0    3654            mov     dptr,#_freq100
0F0D EA        3655            mov     a,r2
0F0E F0        3656            movx    @dptr,a
0F0F A3        3657            inc     dptr
0F10 EB        3658            mov     a,r3
0F11 F0        3659            movx    @dptr,a
0F12 EB        3660            mov     a,r3
0F13 33        3661            rlc     a
0F14 95E0      3662            subb    a,acc
0F16 A3        3663            inc     dptr
0F17 F0        3664            movx    @dptr,a
0F18 A3        3665            inc     dptr
0F19 F0        3666            movx    @dptr,a
0F1A           3667   L030004?:
0F1A           3668   ;        main.c:853: weight_mea_count++;
0F1A 904EE0    3669            mov     dptr,#_weight_mea_count
0F1D E0        3670            movx    a,@dptr
0F1E 2401      3671            add     a,#0x01
0F20 F0        3672            movx    @dptr,a
0F21 A3        3673            inc     dptr
0F22 E0        3674            movx    a,@dptr
0F23 3400      3675            addc    a,#0x00
0F25 F0        3676            movx    @dptr,a
0F26           3677   ;        main.c:854: if(weight_mea_count == 20000){
0F26 904EE0    3678            mov     dptr,#_weight_mea_count
0F29 E0        3679            movx    a,@dptr
0F2A FA        3680            mov     r2,a
0F2B A3        3681            inc     dptr
0F2C E0        3682            movx    a,@dptr
0F2D FB        3683            mov     r3,a
0F2E BA2030    3684            cjne    r2,#0x20,L030008?
0F31 BB4E30    3685            cjne    r3,#0x4E,L030008?
0F34           3686   ;        main.c:855: weight_mea_count = 0;
0F34 904EE0    3687            mov     dptr,#_weight_mea_count
0F37 E4        3688            clr     a
0F38 F0        3689            movx    @dptr,a
0F39 A3        3690            inc     dptr
0F3A F0        3691            movx    @dptr,a
0F3B           3692   ;        main.c:856: distance = measure_distance();
0F3B 120000    3693            lcall   _measure_distance
0F3E E582      3694            mov     a,dpl
0F40 8583F0    3695            mov     b,dph
0F43 9052E0    3696            mov     dptr,#_distance
0F46 F0        3697            movx    @dptr,a
0F47 A3        3698            inc     dptr
0F48 E5F0      3699            mov     a,b
0F4A F0        3700            movx    @dptr,a
0F4B           3701   ;        main.c:857: if(mea_yes) weight = ReadHX711();
0F4B 904D10    3702            mov     dptr,#_mea_yes
0F4E E0        3703            movx    a,@dptr
0F4F FA        3704            mov     r2,a
0F50 6000      3705            jz      L030008?
0F52 120000    3706            lcall   _ReadHX711
0F55 E582      3707            mov     a,dpl
0F57 8583F0    3708            mov     b,dph
0F5A 904CD0    3709            mov     dptr,#_weight
0F5D F0        3710            movx    @dptr,a
0F5E A3        3711            inc     dptr
0F5F E5F0      3712            mov     a,b
0F61 F0        3713            movx    @dptr,a
0F62           3714   L030008?:
0F62           3715   ;        main.c:860: pwm_counter++; 
0F62 905220    3716            mov     dptr,#_pwm_counter
0F65 E0        3717            movx    a,@dptr
0F66 2401      3718            add     a,#0x01
0F68 F0        3719            movx    @dptr,a
0F69 A3        3720            inc     dptr
0F6A E0        3721            movx    a,@dptr
0F6B 3400      3722            addc    a,#0x00
0F6D F0        3723            movx    @dptr,a
0F6E           3724   ;        main.c:861: if (pwm_counter == 100){
0F6E 905220    3725            mov     dptr,#_pwm_counter
0F71 E0        3726            movx    a,@dptr
0F72 FA        3727            mov     r2,a
0F73 A3        3728            inc     dptr
0F74 E0        3729            movx    a,@dptr
0F75 FB        3730            mov     r3,a
0F76 BA6470    3731            cjne    r2,#0x64,L030010?
0F79 BB0070    3732            cjne    r3,#0x00,L030010?
0F7C           3733   ;        main.c:862: pwm_counter = 0; 
0F7C 905220    3734            mov     dptr,#_pwm_counter
0F7F E4        3735            clr     a
0F80 F0        3736            movx    @dptr,a
0F81 A3        3737            inc     dptr
0F82 F0        3738            movx    @dptr,a
0F83           3739   L030010?:
0F83           3740   ;        main.c:865: if (pwm_right > pwm_counter){
0F83 905160    3741            mov     dptr,#_pwm_right
0F86 E0        3742            movx    a,@dptr
0F87 FA        3743            mov     r2,a
0F88 905220    3744            mov     dptr,#_pwm_counter
0F8B E0        3745            movx    a,@dptr
0F8C FB        3746            mov     r3,a
0F8D A3        3747            inc     dptr
0F8E E0        3748            movx    a,@dptr
0F8F FC        3749            mov     r4,a
0F90 7D00      3750            mov     r5,#0x00
0F92 C3        3751            clr     c
0F93 EB        3752            mov     a,r3
0F94 9A        3753            subb    a,r2
0F95 EC        3754            mov     a,r4
0F96 9D        3755            subb    a,r5
0F97 5000      3756            jnc     L030015?
0F99           3757   ;        main.c:866: if(L_motor_dir){
0F99 905120    3758            mov     dptr,#_L_motor_dir
0F9C E0        3759            movx    a,@dptr
0F9D FA        3760            mov     r2,a
0F9E 6000      3761            jz      L030012?
0FA0           3762   ;        main.c:867: L_bridge_1 = 1; 
0FA0 D2A1      3763            setb    _P2_1
0FA2           3764   ;        main.c:868: L_bridge_2 = 0; 
0FA2 C2A2      3765            clr     _P2_2
0FA4 8000      3766            sjmp    L030016?
0FA6           3767   L030012?:
0FA6           3768   ;        main.c:871: L_bridge_1 = 0; 
0FA6 C2A1      3769            clr     _P2_1
0FA8           3770   ;        main.c:872: L_bridge_2 = 1; 
0FA8 D2A2      3771            setb    _P2_2
0FAA 8000      3772            sjmp    L030016?
0FAC           3773   L030015?:
0FAC           3774   ;        main.c:876: L_bridge_1 = 0; 
0FAC C2A1      3775            clr     _P2_1
0FAE           3776   ;        main.c:877: L_bridge_2 = 0; 
0FAE C2A2      3777            clr     _P2_2
0FB0           3778   L030016?:
0FB0           3779   ;        main.c:879: if (pwm_left > pwm_counter){
0FB0 9051A0    3780            mov     dptr,#_pwm_left
0FB3 E0        3781            movx    a,@dptr
0FB4 FA        3782            mov     r2,a
0FB5 7D00      3783            mov     r5,#0x00
0FB7 C3        3784            clr     c
0FB8 EB        3785            mov     a,r3
0FB9 9A        3786            subb    a,r2
0FBA EC        3787            mov     a,r4
0FBB 9D        3788            subb    a,r5
0FBC 5000      3789            jnc     L030021?
0FBE           3790   ;        main.c:880: if (R_motor_dir){
0FBE 9050E0    3791            mov     dptr,#_R_motor_dir
0FC1 E0        3792            movx    a,@dptr
0FC2 FA        3793            mov     r2,a
0FC3 6000      3794            jz      L030018?
0FC5           3795   ;        main.c:881: R_bridge_1 = 1; 
0FC5 D2A4      3796            setb    _P2_4
0FC7           3797   ;        main.c:882: R_bridge_2 = 0;
0FC7 C2A3      3798            clr     _P2_3
0FC9 8000      3799            sjmp    L030022?
0FCB           3800   L030018?:
0FCB           3801   ;        main.c:885: R_bridge_1 = 0; 
0FCB C2A4      3802            clr     _P2_4
0FCD           3803   ;        main.c:886: R_bridge_2 = 1;
0FCD D2A3      3804            setb    _P2_3
0FCF 8000      3805            sjmp    L030022?
0FD1           3806   L030021?:
0FD1           3807   ;        main.c:890: R_bridge_1 = 0; 
0FD1 C2A4      3808            clr     _P2_4
0FD3           3809   ;        main.c:891: R_bridge_2 = 0; 
0FD3 C2A3      3810            clr     _P2_3
0FD5           3811   L030022?:
0FD5           3812   ;        main.c:894: servo_counter++;
0FD5 9051E0    3813            mov     dptr,#_servo_counter
0FD8 E0        3814            movx    a,@dptr
0FD9 2401      3815            add     a,#0x01
0FDB F0        3816            movx    @dptr,a
0FDC A3        3817            inc     dptr
0FDD E0        3818            movx    a,@dptr
0FDE 3400      3819            addc    a,#0x00
0FE0 F0        3820            movx    @dptr,a
0FE1           3821   ;        main.c:895: if(servo_counter==2000)
0FE1 9051E0    3822            mov     dptr,#_servo_counter
0FE4 E0        3823            movx    a,@dptr
0FE5 FA        3824            mov     r2,a
0FE6 A3        3825            inc     dptr
0FE7 E0        3826            movx    a,@dptr
0FE8 FB        3827            mov     r3,a
0FE9 BAD030    3828            cjne    r2,#0xD0,L030024?
0FEC BB0730    3829            cjne    r3,#0x07,L030024?
0FEF           3830   ;        main.c:897: servo_counter=0;
0FEF 9051E0    3831            mov     dptr,#_servo_counter
0FF2 E4        3832            clr     a
0FF3 F0        3833            movx    @dptr,a
0FF4 A3        3834            inc     dptr
0FF5 F0        3835            movx    @dptr,a
0FF6           3836   ;        main.c:898: Servo_arm=1;
0FF6 D296      3837            setb    _P1_6
0FF8           3838   ;        main.c:899: Servo_base=1;
0FF8 D297      3839            setb    _P1_7
0FFA           3840   L030024?:
0FFA           3841   ;        main.c:901: if(servo_arm>=servo_counter)
0FFA 905060    3842            mov     dptr,#_servo_arm
0FFD E0        3843            movx    a,@dptr
0FFE FA        3844            mov     r2,a
0FFF 9051E0    3845            mov     dptr,#_servo_counter
1002 E0        3846            movx    a,@dptr
1003 FB        3847            mov     r3,a
1004 A3        3848            inc     dptr
1005 E0        3849            movx    a,@dptr
1006 FC        3850            mov     r4,a
1007 7D00      3851            mov     r5,#0x00
1009 C3        3852            clr     c
100A EA        3853            mov     a,r2
100B 9B        3854            subb    a,r3
100C ED        3855            mov     a,r5
100D 9C        3856            subb    a,r4
100E 4000      3857            jc      L030026?
1010           3858   ;        main.c:903: Servo_arm = 1;
1010 D296      3859            setb    _P1_6
1012 8000      3860            sjmp    L030027?
1014           3861   L030026?:
1014           3862   ;        main.c:907: Servo_arm = 0; 
1014 C296      3863            clr     _P1_6
1016           3864   L030027?:
1016           3865   ;        main.c:909: if(servo_base>=servo_counter)
1016 9050A0    3866            mov     dptr,#_servo_base
1019 E0        3867            movx    a,@dptr
101A FA        3868            mov     r2,a
101B 7D00      3869            mov     r5,#0x00
101D C3        3870            clr     c
101E EA        3871            mov     a,r2
101F 9B        3872            subb    a,r3
1020 ED        3873            mov     a,r5
1021 9C        3874            subb    a,r4
1022 4000      3875            jc      L030029?
1024           3876   ;        main.c:911: Servo_base = 1;
1024 D297      3877            setb    _P1_7
1026 8000      3878            sjmp    L030031?
1028           3879   L030029?:
1028           3880   ;        main.c:915: Servo_base = 0; 
1028 C297      3881            clr     _P1_7
102A           3882   L030031?:
102A D0D0      3883            pop     psw
102C D001      3884            pop     (0+1)
102E D000      3885            pop     (0+0)
1030 D007      3886            pop     (0+7)
1032 D006      3887            pop     (0+6)
1034 D005      3888            pop     (0+5)
1036 D004      3889            pop     (0+4)
1038 D003      3890            pop     (0+3)
103A D002      3891            pop     (0+2)
103C D083      3892            pop     dph
103E D082      3893            pop     dpl
1040 D0F0      3894            pop     b
1042 D0E0      3895            pop     acc
1044 D0B0      3896            pop     bits
1046 32        3897            reti
1047           3898   ;------------------------------------------------------------
1047           3899   ;Allocation info for local variables in function 'servo_pick'
1047           3900   ;------------------------------------------------------------
1047           3901   ;------------------------------------------------------------
1047           3902   ;        main.c:919: void servo_pick(){
1047           3903   ;        -----------------------------------------
1047           3904   ;         function servo_pick
1047           3905   ;        -----------------------------------------
1047           3906   _servo_pick:
1047           3907   ;        main.c:920: servo_arm = 50;
1047 905060    3908            mov     dptr,#_servo_arm
104A 7432      3909            mov     a,#0x32
104C F0        3910            movx    @dptr,a
104D           3911   ;        main.c:921: servo_base = 50;
104D 9050A0    3912            mov     dptr,#_servo_base
1050 7432      3913            mov     a,#0x32
1052 F0        3914            movx    @dptr,a
1053           3915   ;        main.c:922: waitms(500);
1053 9001F4    3916            mov     dptr,#0x01F4
1056 120000    3917            lcall   _waitms
1059           3918   ;        main.c:923: for (i_loo=50; i_loo <= 210; i_loo+=20)
1059 905260    3919            mov     dptr,#_i_loo
105C 7432      3920            mov     a,#0x32
105E F0        3921            movx    @dptr,a
105F E4        3922            clr     a
1060 A3        3923            inc     dptr
1061 F0        3924            movx    @dptr,a
1062           3925   L031001?:
1062 905260    3926            mov     dptr,#_i_loo
1065 E0        3927            movx    a,@dptr
1066 FA        3928            mov     r2,a
1067 A3        3929            inc     dptr
1068 E0        3930            movx    a,@dptr
1069 FB        3931            mov     r3,a
106A C3        3932            clr     c
106B 74D2      3933            mov     a,#0xD2
106D 9A        3934            subb    a,r2
106E E4        3935            clr     a
106F 6480      3936            xrl     a,#0x80
1071 8BF0      3937            mov     b,r3
1073 63F080    3938            xrl     b,#0x80
1076 95F0      3939            subb    a,b
1078 4000      3940            jc      L031004?
107A           3941   ;        main.c:925: servo_base = i_loo; 
107A 9050A0    3942            mov     dptr,#_servo_base
107D EA        3943            mov     a,r2
107E F0        3944            movx    @dptr,a
107F           3945   ;        main.c:926: waitms(25);
107F 900019    3946            mov     dptr,#0x0019
1082 120000    3947            lcall   _waitms
1085           3948   ;        main.c:923: for (i_loo=50; i_loo <= 210; i_loo+=20)
1085 905260    3949            mov     dptr,#_i_loo
1088 E0        3950            movx    a,@dptr
1089 FA        3951            mov     r2,a
108A A3        3952            inc     dptr
108B E0        3953            movx    a,@dptr
108C FB        3954            mov     r3,a
108D 905260    3955            mov     dptr,#_i_loo
1090 7414      3956            mov     a,#0x14
1092 2A        3957            add     a,r2
1093 F0        3958            movx    @dptr,a
1094 E4        3959            clr     a
1095 3B        3960            addc    a,r3
1096 A3        3961            inc     dptr
1097 F0        3962            movx    @dptr,a
1098 8000      3963            sjmp    L031001?
109A           3964   L031004?:
109A           3965   ;        main.c:928: waitms(500);
109A 9001F4    3966            mov     dptr,#0x01F4
109D 120000    3967            lcall   _waitms
10A0           3968   ;        main.c:929: for(i_loo = 50; i_loo <= 250; i_loo+=20)
10A0 905260    3969            mov     dptr,#_i_loo
10A3 7432      3970            mov     a,#0x32
10A5 F0        3971            movx    @dptr,a
10A6 E4        3972            clr     a
10A7 A3        3973            inc     dptr
10A8 F0        3974            movx    @dptr,a
10A9           3975   L031005?:
10A9 905260    3976            mov     dptr,#_i_loo
10AC E0        3977            movx    a,@dptr
10AD FA        3978            mov     r2,a
10AE A3        3979            inc     dptr
10AF E0        3980            movx    a,@dptr
10B0 FB        3981            mov     r3,a
10B1 C3        3982            clr     c
10B2 74FA      3983            mov     a,#0xFA
10B4 9A        3984            subb    a,r2
10B5 E4        3985            clr     a
10B6 6480      3986            xrl     a,#0x80
10B8 8BF0      3987            mov     b,r3
10BA 63F080    3988            xrl     b,#0x80
10BD 95F0      3989            subb    a,b
10BF 4000      3990            jc      L031008?
10C1           3991   ;        main.c:931: servo_arm = i_loo; 
10C1 905060    3992            mov     dptr,#_servo_arm
10C4 EA        3993            mov     a,r2
10C5 F0        3994            movx    @dptr,a
10C6           3995   ;        main.c:932: waitms(25);
10C6 900019    3996            mov     dptr,#0x0019
10C9 120000    3997            lcall   _waitms
10CC           3998   ;        main.c:929: for(i_loo = 50; i_loo <= 250; i_loo+=20)
10CC 905260    3999            mov     dptr,#_i_loo
10CF E0        4000            movx    a,@dptr
10D0 FA        4001            mov     r2,a
10D1 A3        4002            inc     dptr
10D2 E0        4003            movx    a,@dptr
10D3 FB        4004            mov     r3,a
10D4 905260    4005            mov     dptr,#_i_loo
10D7 7414      4006            mov     a,#0x14
10D9 2A        4007            add     a,r2
10DA F0        4008            movx    @dptr,a
10DB E4        4009            clr     a
10DC 3B        4010            addc    a,r3
10DD A3        4011            inc     dptr
10DE F0        4012            movx    @dptr,a
10DF 8000      4013            sjmp    L031005?
10E1           4014   L031008?:
10E1           4015   ;        main.c:935: Magnet = 1; 
10E1 D295      4016            setb    _P1_5
10E3           4017   ;        main.c:936: waitms(500);
10E3 9001F4    4018            mov     dptr,#0x01F4
10E6 120000    4019            lcall   _waitms
10E9           4020   ;        main.c:937: for(i_loo = 200; i_loo >= 90; i_loo-=10){
10E9 905260    4021            mov     dptr,#_i_loo
10EC 74C8      4022            mov     a,#0xC8
10EE F0        4023            movx    @dptr,a
10EF E4        4024            clr     a
10F0 A3        4025            inc     dptr
10F1 F0        4026            movx    @dptr,a
10F2           4027   L031009?:
10F2 905260    4028            mov     dptr,#_i_loo
10F5 E0        4029            movx    a,@dptr
10F6 FA        4030            mov     r2,a
10F7 A3        4031            inc     dptr
10F8 E0        4032            movx    a,@dptr
10F9 FB        4033            mov     r3,a
10FA C3        4034            clr     c
10FB EA        4035            mov     a,r2
10FC 945A      4036            subb    a,#0x5A
10FE EB        4037            mov     a,r3
10FF 6480      4038            xrl     a,#0x80
1101 9480      4039            subb    a,#0x80
1103 4000      4040            jc      L031012?
1105           4041   ;        main.c:938: waitms(25);
1105 900019    4042            mov     dptr,#0x0019
1108 120000    4043            lcall   _waitms
110B           4044   ;        main.c:939: servo_base = i_loo;
110B 905260    4045            mov     dptr,#_i_loo
110E E0        4046            movx    a,@dptr
110F FA        4047            mov     r2,a
1110 A3        4048            inc     dptr
1111 E0        4049            movx    a,@dptr
1112 FB        4050            mov     r3,a
1113 9050A0    4051            mov     dptr,#_servo_base
1116 EA        4052            mov     a,r2
1117 F0        4053            movx    @dptr,a
1118           4054   ;        main.c:937: for(i_loo = 200; i_loo >= 90; i_loo-=10){
1118 EA        4055            mov     a,r2
1119 24F6      4056            add     a,#0xf6
111B FA        4057            mov     r2,a
111C EB        4058            mov     a,r3
111D 34FF      4059            addc    a,#0xff
111F FB        4060            mov     r3,a
1120 905260    4061            mov     dptr,#_i_loo
1123 EA        4062            mov     a,r2
1124 F0        4063            movx    @dptr,a
1125 A3        4064            inc     dptr
1126 EB        4065            mov     a,r3
1127 F0        4066            movx    @dptr,a
1128 8000      4067            sjmp    L031009?
112A           4068   L031012?:
112A           4069   ;        main.c:941: waitms(500);
112A 9001F4    4070            mov     dptr,#0x01F4
112D 120000    4071            lcall   _waitms
1130           4072   ;        main.c:942: for(i_loo = 90; i_loo <= 200; i_loo+=10){
1130 905260    4073            mov     dptr,#_i_loo
1133 745A      4074            mov     a,#0x5A
1135 F0        4075            movx    @dptr,a
1136 E4        4076            clr     a
1137 A3        4077            inc     dptr
1138 F0        4078            movx    @dptr,a
1139           4079   L031013?:
1139 905260    4080            mov     dptr,#_i_loo
113C E0        4081            movx    a,@dptr
113D FA        4082            mov     r2,a
113E A3        4083            inc     dptr
113F E0        4084            movx    a,@dptr
1140 FB        4085            mov     r3,a
1141 C3        4086            clr     c
1142 74C8      4087            mov     a,#0xC8
1144 9A        4088            subb    a,r2
1145 E4        4089            clr     a
1146 6480      4090            xrl     a,#0x80
1148 8BF0      4091            mov     b,r3
114A 63F080    4092            xrl     b,#0x80
114D 95F0      4093            subb    a,b
114F 4000      4094            jc      L031016?
1151           4095   ;        main.c:943: waitms(25);
1151 900019    4096            mov     dptr,#0x0019
1154 120000    4097            lcall   _waitms
1157           4098   ;        main.c:944: servo_base = i_loo;
1157 905260    4099            mov     dptr,#_i_loo
115A E0        4100            movx    a,@dptr
115B FA        4101            mov     r2,a
115C A3        4102            inc     dptr
115D E0        4103            movx    a,@dptr
115E FB        4104            mov     r3,a
115F 9050A0    4105            mov     dptr,#_servo_base
1162 EA        4106            mov     a,r2
1163 F0        4107            movx    @dptr,a
1164           4108   ;        main.c:942: for(i_loo = 90; i_loo <= 200; i_loo+=10){
1164 905260    4109            mov     dptr,#_i_loo
1167 740A      4110            mov     a,#0x0A
1169 2A        4111            add     a,r2
116A F0        4112            movx    @dptr,a
116B E4        4113            clr     a
116C 3B        4114            addc    a,r3
116D A3        4115            inc     dptr
116E F0        4116            movx    @dptr,a
116F 8000      4117            sjmp    L031013?
1171           4118   L031016?:
1171           4119   ;        main.c:946: waitms(500);
1171 9001F4    4120            mov     dptr,#0x01F4
1174 120000    4121            lcall   _waitms
1177           4122   ;        main.c:947: for(i_loo = 240; i_loo >= 100; i_loo-= 5){
1177 905260    4123            mov     dptr,#_i_loo
117A 74F0      4124            mov     a,#0xF0
117C F0        4125            movx    @dptr,a
117D E4        4126            clr     a
117E A3        4127            inc     dptr
117F F0        4128            movx    @dptr,a
1180           4129   L031017?:
1180 905260    4130            mov     dptr,#_i_loo
1183 E0        4131            movx    a,@dptr
1184 FA        4132            mov     r2,a
1185 A3        4133            inc     dptr
1186 E0        4134            movx    a,@dptr
1187 FB        4135            mov     r3,a
1188 C3        4136            clr     c
1189 EA        4137            mov     a,r2
118A 9464      4138            subb    a,#0x64
118C EB        4139            mov     a,r3
118D 6480      4140            xrl     a,#0x80
118F 9480      4141            subb    a,#0x80
1191 4000      4142            jc      L031020?
1193           4143   ;        main.c:948: waitms(25);
1193 900019    4144            mov     dptr,#0x0019
1196 120000    4145            lcall   _waitms
1199           4146   ;        main.c:949: servo_arm = i_loo;
1199 905260    4147            mov     dptr,#_i_loo
119C E0        4148            movx    a,@dptr
119D FA        4149            mov     r2,a
119E A3        4150            inc     dptr
119F E0        4151            movx    a,@dptr
11A0 FB        4152            mov     r3,a
11A1 905060    4153            mov     dptr,#_servo_arm
11A4 EA        4154            mov     a,r2
11A5 F0        4155            movx    @dptr,a
11A6           4156   ;        main.c:947: for(i_loo = 240; i_loo >= 100; i_loo-= 5){
11A6 EA        4157            mov     a,r2
11A7 24FB      4158            add     a,#0xfb
11A9 FA        4159            mov     r2,a
11AA EB        4160            mov     a,r3
11AB 34FF      4161            addc    a,#0xff
11AD FB        4162            mov     r3,a
11AE 905260    4163            mov     dptr,#_i_loo
11B1 EA        4164            mov     a,r2
11B2 F0        4165            movx    @dptr,a
11B3 A3        4166            inc     dptr
11B4 EB        4167            mov     a,r3
11B5 F0        4168            movx    @dptr,a
11B6 8000      4169            sjmp    L031017?
11B8           4170   L031020?:
11B8           4171   ;        main.c:951: waitms(500);
11B8 9001F4    4172            mov     dptr,#0x01F4
11BB 120000    4173            lcall   _waitms
11BE           4174   ;        main.c:952: for(i_loo = 200; i_loo >= 80; i_loo-=5){
11BE 905260    4175            mov     dptr,#_i_loo
11C1 74C8      4176            mov     a,#0xC8
11C3 F0        4177            movx    @dptr,a
11C4 E4        4178            clr     a
11C5 A3        4179            inc     dptr
11C6 F0        4180            movx    @dptr,a
11C7           4181   L031021?:
11C7 905260    4182            mov     dptr,#_i_loo
11CA E0        4183            movx    a,@dptr
11CB FA        4184            mov     r2,a
11CC A3        4185            inc     dptr
11CD E0        4186            movx    a,@dptr
11CE FB        4187            mov     r3,a
11CF C3        4188            clr     c
11D0 EA        4189            mov     a,r2
11D1 9450      4190            subb    a,#0x50
11D3 EB        4191            mov     a,r3
11D4 6480      4192            xrl     a,#0x80
11D6 9480      4193            subb    a,#0x80
11D8 4000      4194            jc      L031024?
11DA           4195   ;        main.c:953: waitms(25);
11DA 900019    4196            mov     dptr,#0x0019
11DD 120000    4197            lcall   _waitms
11E0           4198   ;        main.c:954: servo_base = i_loo;
11E0 905260    4199            mov     dptr,#_i_loo
11E3 E0        4200            movx    a,@dptr
11E4 FA        4201            mov     r2,a
11E5 A3        4202            inc     dptr
11E6 E0        4203            movx    a,@dptr
11E7 FB        4204            mov     r3,a
11E8 9050A0    4205            mov     dptr,#_servo_base
11EB EA        4206            mov     a,r2
11EC F0        4207            movx    @dptr,a
11ED           4208   ;        main.c:952: for(i_loo = 200; i_loo >= 80; i_loo-=5){
11ED EA        4209            mov     a,r2
11EE 24FB      4210            add     a,#0xfb
11F0 FA        4211            mov     r2,a
11F1 EB        4212            mov     a,r3
11F2 34FF      4213            addc    a,#0xff
11F4 FB        4214            mov     r3,a
11F5 905260    4215            mov     dptr,#_i_loo
11F8 EA        4216            mov     a,r2
11F9 F0        4217            movx    @dptr,a
11FA A3        4218            inc     dptr
11FB EB        4219            mov     a,r3
11FC F0        4220            movx    @dptr,a
11FD 8000      4221            sjmp    L031021?
11FF           4222   L031024?:
11FF           4223   ;        main.c:956: waitms(500);
11FF 9001F4    4224            mov     dptr,#0x01F4
1202 120000    4225            lcall   _waitms
1205           4226   ;        main.c:957: Magnet = 0;
1205 C295      4227            clr     _P1_5
1207           4228   ;        main.c:958: waitms(500);
1207 9001F4    4229            mov     dptr,#0x01F4
120A 120000    4230            lcall   _waitms
120D           4231   ;        main.c:959: for (i_loo = 100; i_loo >=40 ; i_loo-=10){
120D 905260    4232            mov     dptr,#_i_loo
1210 7464      4233            mov     a,#0x64
1212 F0        4234            movx    @dptr,a
1213 E4        4235            clr     a
1214 A3        4236            inc     dptr
1215 F0        4237            movx    @dptr,a
1216           4238   L031025?:
1216 905260    4239            mov     dptr,#_i_loo
1219 E0        4240            movx    a,@dptr
121A FA        4241            mov     r2,a
121B A3        4242            inc     dptr
121C E0        4243            movx    a,@dptr
121D FB        4244            mov     r3,a
121E C3        4245            clr     c
121F EA        4246            mov     a,r2
1220 9428      4247            subb    a,#0x28
1222 EB        4248            mov     a,r3
1223 6480      4249            xrl     a,#0x80
1225 9480      4250            subb    a,#0x80
1227 4000      4251            jc      L031028?
1229           4252   ;        main.c:960: servo_arm = i_loo; 
1229 905060    4253            mov     dptr,#_servo_arm
122C EA        4254            mov     a,r2
122D F0        4255            movx    @dptr,a
122E           4256   ;        main.c:961: waitms(25);
122E 900019    4257            mov     dptr,#0x0019
1231 120000    4258            lcall   _waitms
1234           4259   ;        main.c:959: for (i_loo = 100; i_loo >=40 ; i_loo-=10){
1234 905260    4260            mov     dptr,#_i_loo
1237 E0        4261            movx    a,@dptr
1238 FA        4262            mov     r2,a
1239 A3        4263            inc     dptr
123A E0        4264            movx    a,@dptr
123B FB        4265            mov     r3,a
123C EA        4266            mov     a,r2
123D 24F6      4267            add     a,#0xf6
123F FA        4268            mov     r2,a
1240 EB        4269            mov     a,r3
1241 34FF      4270            addc    a,#0xff
1243 FB        4271            mov     r3,a
1244 905260    4272            mov     dptr,#_i_loo
1247 EA        4273            mov     a,r2
1248 F0        4274            movx    @dptr,a
1249 A3        4275            inc     dptr
124A EB        4276            mov     a,r3
124B F0        4277            movx    @dptr,a
124C 8000      4278            sjmp    L031025?
124E           4279   L031028?:
124E           4280   ;        main.c:963: waitms(500);
124E 9001F4    4281            mov     dptr,#0x01F4
1251 120000    4282            lcall   _waitms
1254           4283   ;        main.c:964: for (i_loo = 80; i_loo >= 40; i_loo-=10){
1254 905260    4284            mov     dptr,#_i_loo
1257 7450      4285            mov     a,#0x50
1259 F0        4286            movx    @dptr,a
125A E4        4287            clr     a
125B A3        4288            inc     dptr
125C F0        4289            movx    @dptr,a
125D           4290   L031029?:
125D 905260    4291            mov     dptr,#_i_loo
1260 E0        4292            movx    a,@dptr
1261 FA        4293            mov     r2,a
1262 A3        4294            inc     dptr
1263 E0        4295            movx    a,@dptr
1264 FB        4296            mov     r3,a
1265 C3        4297            clr     c
1266 EA        4298            mov     a,r2
1267 9428      4299            subb    a,#0x28
1269 EB        4300            mov     a,r3
126A 6480      4301            xrl     a,#0x80
126C 9480      4302            subb    a,#0x80
126E 4000      4303            jc      L031032?
1270           4304   ;        main.c:965: servo_base = i_loo; 
1270 9050A0    4305            mov     dptr,#_servo_base
1273 EA        4306            mov     a,r2
1274 F0        4307            movx    @dptr,a
1275           4308   ;        main.c:966: waitms(25);
1275 900019    4309            mov     dptr,#0x0019
1278 120000    4310            lcall   _waitms
127B           4311   ;        main.c:964: for (i_loo = 80; i_loo >= 40; i_loo-=10){
127B 905260    4312            mov     dptr,#_i_loo
127E E0        4313            movx    a,@dptr
127F FA        4314            mov     r2,a
1280 A3        4315            inc     dptr
1281 E0        4316            movx    a,@dptr
1282 FB        4317            mov     r3,a
1283 EA        4318            mov     a,r2
1284 24F6      4319            add     a,#0xf6
1286 FA        4320            mov     r2,a
1287 EB        4321            mov     a,r3
1288 34FF      4322            addc    a,#0xff
128A FB        4323            mov     r3,a
128B 905260    4324            mov     dptr,#_i_loo
128E EA        4325            mov     a,r2
128F F0        4326            movx    @dptr,a
1290 A3        4327            inc     dptr
1291 EB        4328            mov     a,r3
1292 F0        4329            movx    @dptr,a
1293 8000      4330            sjmp    L031029?
1295           4331   L031032?:
1295           4332   ;        main.c:968: return;
1295 22        4333            ret
1296           4334   ;------------------------------------------------------------
1296           4335   ;Allocation info for local variables in function 'servo_push'
1296           4336   ;------------------------------------------------------------
1296           4337   ;------------------------------------------------------------
1296           4338   ;        main.c:971: void servo_push(void)
1296           4339   ;        -----------------------------------------
1296           4340   ;         function servo_push
1296           4341   ;        -----------------------------------------
1296           4342   _servo_push:
1296           4343   ;        main.c:973: servo_arm = 50;
1296 905060    4344            mov     dptr,#_servo_arm
1299 7432      4345            mov     a,#0x32
129B F0        4346            movx    @dptr,a
129C           4347   ;        main.c:974: servo_base = 50;
129C 9050A0    4348            mov     dptr,#_servo_base
129F 7432      4349            mov     a,#0x32
12A1 F0        4350            movx    @dptr,a
12A2           4351   ;        main.c:975: waitms(500);
12A2 9001F4    4352            mov     dptr,#0x01F4
12A5 120000    4353            lcall   _waitms
12A8           4354   ;        main.c:976: for (i_loo=50; i_loo <= 150; i_loo+=10)
12A8 905260    4355            mov     dptr,#_i_loo
12AB 7432      4356            mov     a,#0x32
12AD F0        4357            movx    @dptr,a
12AE E4        4358            clr     a
12AF A3        4359            inc     dptr
12B0 F0        4360            movx    @dptr,a
12B1           4361   L032001?:
12B1 905260    4362            mov     dptr,#_i_loo
12B4 E0        4363            movx    a,@dptr
12B5 FA        4364            mov     r2,a
12B6 A3        4365            inc     dptr
12B7 E0        4366            movx    a,@dptr
12B8 FB        4367            mov     r3,a
12B9 C3        4368            clr     c
12BA 7496      4369            mov     a,#0x96
12BC 9A        4370            subb    a,r2
12BD E4        4371            clr     a
12BE 6480      4372            xrl     a,#0x80
12C0 8BF0      4373            mov     b,r3
12C2 63F080    4374            xrl     b,#0x80
12C5 95F0      4375            subb    a,b
12C7 4000      4376            jc      L032004?
12C9           4377   ;        main.c:978: servo_base = i_loo; 
12C9 9050A0    4378            mov     dptr,#_servo_base
12CC EA        4379            mov     a,r2
12CD F0        4380            movx    @dptr,a
12CE           4381   ;        main.c:979: waitms(25);
12CE 900019    4382            mov     dptr,#0x0019
12D1 120000    4383            lcall   _waitms
12D4           4384   ;        main.c:976: for (i_loo=50; i_loo <= 150; i_loo+=10)
12D4 905260    4385            mov     dptr,#_i_loo
12D7 E0        4386            movx    a,@dptr
12D8 FA        4387            mov     r2,a
12D9 A3        4388            inc     dptr
12DA E0        4389            movx    a,@dptr
12DB FB        4390            mov     r3,a
12DC 905260    4391            mov     dptr,#_i_loo
12DF 740A      4392            mov     a,#0x0A
12E1 2A        4393            add     a,r2
12E2 F0        4394            movx    @dptr,a
12E3 E4        4395            clr     a
12E4 3B        4396            addc    a,r3
12E5 A3        4397            inc     dptr
12E6 F0        4398            movx    @dptr,a
12E7 8000      4399            sjmp    L032001?
12E9           4400   L032004?:
12E9           4401   ;        main.c:981: waitms(200);
12E9 9000C8    4402            mov     dptr,#0x00C8
12EC 120000    4403            lcall   _waitms
12EF           4404   ;        main.c:982: for (i_loo=50; i_loo <= 150; i_loo+=10)
12EF 905260    4405            mov     dptr,#_i_loo
12F2 7432      4406            mov     a,#0x32
12F4 F0        4407            movx    @dptr,a
12F5 E4        4408            clr     a
12F6 A3        4409            inc     dptr
12F7 F0        4410            movx    @dptr,a
12F8           4411   L032005?:
12F8 905260    4412            mov     dptr,#_i_loo
12FB E0        4413            movx    a,@dptr
12FC FA        4414            mov     r2,a
12FD A3        4415            inc     dptr
12FE E0        4416            movx    a,@dptr
12FF FB        4417            mov     r3,a
1300 C3        4418            clr     c
1301 7496      4419            mov     a,#0x96
1303 9A        4420            subb    a,r2
1304 E4        4421            clr     a
1305 6480      4422            xrl     a,#0x80
1307 8BF0      4423            mov     b,r3
1309 63F080    4424            xrl     b,#0x80
130C 95F0      4425            subb    a,b
130E 4000      4426            jc      L032008?
1310           4427   ;        main.c:984: servo_arm = i_loo; 
1310 905060    4428            mov     dptr,#_servo_arm
1313 EA        4429            mov     a,r2
1314 F0        4430            movx    @dptr,a
1315           4431   ;        main.c:985: waitms(25);
1315 900019    4432            mov     dptr,#0x0019
1318 120000    4433            lcall   _waitms
131B           4434   ;        main.c:982: for (i_loo=50; i_loo <= 150; i_loo+=10)
131B 905260    4435            mov     dptr,#_i_loo
131E E0        4436            movx    a,@dptr
131F FA        4437            mov     r2,a
1320 A3        4438            inc     dptr
1321 E0        4439            movx    a,@dptr
1322 FB        4440            mov     r3,a
1323 905260    4441            mov     dptr,#_i_loo
1326 740A      4442            mov     a,#0x0A
1328 2A        4443            add     a,r2
1329 F0        4444            movx    @dptr,a
132A E4        4445            clr     a
132B 3B        4446            addc    a,r3
132C A3        4447            inc     dptr
132D F0        4448            movx    @dptr,a
132E 8000      4449            sjmp    L032005?
1330           4450   L032008?:
1330           4451   ;        main.c:987: waitms(200);
1330 9000C8    4452            mov     dptr,#0x00C8
1333 120000    4453            lcall   _waitms
1336           4454   ;        main.c:988: for (i_loo=150; i_loo <= 250; i_loo+=10)
1336 905260    4455            mov     dptr,#_i_loo
1339 7496      4456            mov     a,#0x96
133B F0        4457            movx    @dptr,a
133C E4        4458            clr     a
133D A3        4459            inc     dptr
133E F0        4460            movx    @dptr,a
133F           4461   L032009?:
133F 905260    4462            mov     dptr,#_i_loo
1342 E0        4463            movx    a,@dptr
1343 FA        4464            mov     r2,a
1344 A3        4465            inc     dptr
1345 E0        4466            movx    a,@dptr
1346 FB        4467            mov     r3,a
1347 C3        4468            clr     c
1348 74FA      4469            mov     a,#0xFA
134A 9A        4470            subb    a,r2
134B E4        4471            clr     a
134C 6480      4472            xrl     a,#0x80
134E 8BF0      4473            mov     b,r3
1350 63F080    4474            xrl     b,#0x80
1353 95F0      4475            subb    a,b
1355 4000      4476            jc      L032012?
1357           4477   ;        main.c:990: servo_base = i_loo; 
1357 9050A0    4478            mov     dptr,#_servo_base
135A EA        4479            mov     a,r2
135B F0        4480            movx    @dptr,a
135C           4481   ;        main.c:991: waitms(25);
135C 900019    4482            mov     dptr,#0x0019
135F 120000    4483            lcall   _waitms
1362           4484   ;        main.c:988: for (i_loo=150; i_loo <= 250; i_loo+=10)
1362 905260    4485            mov     dptr,#_i_loo
1365 E0        4486            movx    a,@dptr
1366 FA        4487            mov     r2,a
1367 A3        4488            inc     dptr
1368 E0        4489            movx    a,@dptr
1369 FB        4490            mov     r3,a
136A 905260    4491            mov     dptr,#_i_loo
136D 740A      4492            mov     a,#0x0A
136F 2A        4493            add     a,r2
1370 F0        4494            movx    @dptr,a
1371 E4        4495            clr     a
1372 3B        4496            addc    a,r3
1373 A3        4497            inc     dptr
1374 F0        4498            movx    @dptr,a
1375 8000      4499            sjmp    L032009?
1377           4500   L032012?:
1377           4501   ;        main.c:993: waitms(200);
1377 9000C8    4502            mov     dptr,#0x00C8
137A 120000    4503            lcall   _waitms
137D           4504   ;        main.c:994: for (i_loo=250; i_loo >= 150; i_loo-=10)
137D 905260    4505            mov     dptr,#_i_loo
1380 74FA      4506            mov     a,#0xFA
1382 F0        4507            movx    @dptr,a
1383 E4        4508            clr     a
1384 A3        4509            inc     dptr
1385 F0        4510            movx    @dptr,a
1386           4511   L032013?:
1386 905260    4512            mov     dptr,#_i_loo
1389 E0        4513            movx    a,@dptr
138A FA        4514            mov     r2,a
138B A3        4515            inc     dptr
138C E0        4516            movx    a,@dptr
138D FB        4517            mov     r3,a
138E C3        4518            clr     c
138F EA        4519            mov     a,r2
1390 9496      4520            subb    a,#0x96
1392 EB        4521            mov     a,r3
1393 6480      4522            xrl     a,#0x80
1395 9480      4523            subb    a,#0x80
1397 4000      4524            jc      L032016?
1399           4525   ;        main.c:996: servo_base = i_loo; 
1399 9050A0    4526            mov     dptr,#_servo_base
139C EA        4527            mov     a,r2
139D F0        4528            movx    @dptr,a
139E           4529   ;        main.c:997: waitms(25);
139E 900019    4530            mov     dptr,#0x0019
13A1 120000    4531            lcall   _waitms
13A4           4532   ;        main.c:994: for (i_loo=250; i_loo >= 150; i_loo-=10)
13A4 905260    4533            mov     dptr,#_i_loo
13A7 E0        4534            movx    a,@dptr
13A8 FA        4535            mov     r2,a
13A9 A3        4536            inc     dptr
13AA E0        4537            movx    a,@dptr
13AB FB        4538            mov     r3,a
13AC EA        4539            mov     a,r2
13AD 24F6      4540            add     a,#0xf6
13AF FA        4541            mov     r2,a
13B0 EB        4542            mov     a,r3
13B1 34FF      4543            addc    a,#0xff
13B3 FB        4544            mov     r3,a
13B4 905260    4545            mov     dptr,#_i_loo
13B7 EA        4546            mov     a,r2
13B8 F0        4547            movx    @dptr,a
13B9 A3        4548            inc     dptr
13BA EB        4549            mov     a,r3
13BB F0        4550            movx    @dptr,a
13BC 8000      4551            sjmp    L032013?
13BE           4552   L032016?:
13BE           4553   ;        main.c:999: waitms(200);
13BE 9000C8    4554            mov     dptr,#0x00C8
13C1 120000    4555            lcall   _waitms
13C4           4556   ;        main.c:1000: for (i_loo=150; i_loo >= 50; i_loo-=10)
13C4 905260    4557            mov     dptr,#_i_loo
13C7 7496      4558            mov     a,#0x96
13C9 F0        4559            movx    @dptr,a
13CA E4        4560            clr     a
13CB A3        4561            inc     dptr
13CC F0        4562            movx    @dptr,a
13CD           4563   L032017?:
13CD 905260    4564            mov     dptr,#_i_loo
13D0 E0        4565            movx    a,@dptr
13D1 FA        4566            mov     r2,a
13D2 A3        4567            inc     dptr
13D3 E0        4568            movx    a,@dptr
13D4 FB        4569            mov     r3,a
13D5 C3        4570            clr     c
13D6 EA        4571            mov     a,r2
13D7 9432      4572            subb    a,#0x32
13D9 EB        4573            mov     a,r3
13DA 6480      4574            xrl     a,#0x80
13DC 9480      4575            subb    a,#0x80
13DE 4000      4576            jc      L032020?
13E0           4577   ;        main.c:1002: servo_arm = i_loo; 
13E0 905060    4578            mov     dptr,#_servo_arm
13E3 EA        4579            mov     a,r2
13E4 F0        4580            movx    @dptr,a
13E5           4581   ;        main.c:1003: waitms(25);
13E5 900019    4582            mov     dptr,#0x0019
13E8 120000    4583            lcall   _waitms
13EB           4584   ;        main.c:1000: for (i_loo=150; i_loo >= 50; i_loo-=10)
13EB 905260    4585            mov     dptr,#_i_loo
13EE E0        4586            movx    a,@dptr
13EF FA        4587            mov     r2,a
13F0 A3        4588            inc     dptr
13F1 E0        4589            movx    a,@dptr
13F2 FB        4590            mov     r3,a
13F3 EA        4591            mov     a,r2
13F4 24F6      4592            add     a,#0xf6
13F6 FA        4593            mov     r2,a
13F7 EB        4594            mov     a,r3
13F8 34FF      4595            addc    a,#0xff
13FA FB        4596            mov     r3,a
13FB 905260    4597            mov     dptr,#_i_loo
13FE EA        4598            mov     a,r2
13FF F0        4599            movx    @dptr,a
1400 A3        4600            inc     dptr
1401 EB        4601            mov     a,r3
1402 F0        4602            movx    @dptr,a
1403 8000      4603            sjmp    L032017?
1405           4604   L032020?:
1405           4605   ;        main.c:1005: waitms(200);
1405 9000C8    4606            mov     dptr,#0x00C8
1408 120000    4607            lcall   _waitms
140B           4608   ;        main.c:1006: for (i_loo=150; i_loo >= 50; i_loo-=10)
140B 905260    4609            mov     dptr,#_i_loo
140E 7496      4610            mov     a,#0x96
1410 F0        4611            movx    @dptr,a
1411 E4        4612            clr     a
1412 A3        4613            inc     dptr
1413 F0        4614            movx    @dptr,a
1414           4615   L032021?:
1414 905260    4616            mov     dptr,#_i_loo
1417 E0        4617            movx    a,@dptr
1418 FA        4618            mov     r2,a
1419 A3        4619            inc     dptr
141A E0        4620            movx    a,@dptr
141B FB        4621            mov     r3,a
141C C3        4622            clr     c
141D EA        4623            mov     a,r2
141E 9432      4624            subb    a,#0x32
1420 EB        4625            mov     a,r3
1421 6480      4626            xrl     a,#0x80
1423 9480      4627            subb    a,#0x80
1425 4000      4628            jc      L032024?
1427           4629   ;        main.c:1008: servo_base = i_loo; 
1427 9050A0    4630            mov     dptr,#_servo_base
142A EA        4631            mov     a,r2
142B F0        4632            movx    @dptr,a
142C           4633   ;        main.c:1009: waitms(25);
142C 900019    4634            mov     dptr,#0x0019
142F 120000    4635            lcall   _waitms
1432           4636   ;        main.c:1006: for (i_loo=150; i_loo >= 50; i_loo-=10)
1432 905260    4637            mov     dptr,#_i_loo
1435 E0        4638            movx    a,@dptr
1436 FA        4639            mov     r2,a
1437 A3        4640            inc     dptr
1438 E0        4641            movx    a,@dptr
1439 FB        4642            mov     r3,a
143A EA        4643            mov     a,r2
143B 24F6      4644            add     a,#0xf6
143D FA        4645            mov     r2,a
143E EB        4646            mov     a,r3
143F 34FF      4647            addc    a,#0xff
1441 FB        4648            mov     r3,a
1442 905260    4649            mov     dptr,#_i_loo
1445 EA        4650            mov     a,r2
1446 F0        4651            movx    @dptr,a
1447 A3        4652            inc     dptr
1448 EB        4653            mov     a,r3
1449 F0        4654            movx    @dptr,a
144A 8000      4655            sjmp    L032021?
144C           4656   L032024?:
144C           4657   ;        main.c:1011: waitms(200);
144C 9000C8    4658            mov     dptr,#0x00C8
144F           4659   ;        main.c:1012: return; 
144F 020000    4660            ljmp    _waitms
1452           4661   ;------------------------------------------------------------
1452           4662   ;Allocation info for local variables in function 'Move_forward_ms'
1452           4663   ;------------------------------------------------------------
1452           4664   ;ms                        Allocated to registers r2 r3 
1452           4665   ;------------------------------------------------------------
1452           4666   ;        main.c:1015: void Move_forward_ms(int ms){
1452           4667   ;        -----------------------------------------
1452           4668   ;         function Move_forward_ms
1452           4669   ;        -----------------------------------------
1452           4670   _Move_forward_ms:
1452 AA82      4671            mov     r2,dpl
1454 AB83      4672            mov     r3,dph
1456           4673   ;        main.c:1017: L_motor_dir = 0;
1456 905120    4674            mov     dptr,#_L_motor_dir
1459           4675   ;        main.c:1018: R_motor_dir = 0;
1459 E4        4676            clr     a
145A F0        4677            movx    @dptr,a
145B 9050E0    4678            mov     dptr,#_R_motor_dir
145E F0        4679            movx    @dptr,a
145F           4680   ;        main.c:1020: pwm_left = 50;
145F 9051A0    4681            mov     dptr,#_pwm_left
1462 7432      4682            mov     a,#0x32
1464 F0        4683            movx    @dptr,a
1465           4684   ;        main.c:1021: pwm_right = 50;
1465 905160    4685            mov     dptr,#_pwm_right
1468 7432      4686            mov     a,#0x32
146A F0        4687            movx    @dptr,a
146B           4688   ;        main.c:1023: waitms(ms);
146B 8A82      4689            mov     dpl,r2
146D 8B83      4690            mov     dph,r3
146F 120000    4691            lcall   _waitms
1472           4692   ;        main.c:1025: L_motor_dir = 0;
1472 905120    4693            mov     dptr,#_L_motor_dir
1475           4694   ;        main.c:1026: R_motor_dir = 0;
1475           4695   ;        main.c:1027: pwm_left = 0;
1475           4696   ;        main.c:1028: pwm_right = 0;
1475 E4        4697            clr     a
1476 F0        4698            movx    @dptr,a
1477 9050E0    4699            mov     dptr,#_R_motor_dir
147A F0        4700            movx    @dptr,a
147B 9051A0    4701            mov     dptr,#_pwm_left
147E F0        4702            movx    @dptr,a
147F 905160    4703            mov     dptr,#_pwm_right
1482 F0        4704            movx    @dptr,a
1483           4705   ;        main.c:1029: return;
1483 22        4706            ret
1484           4707   ;------------------------------------------------------------
1484           4708   ;Allocation info for local variables in function 'servo_moveaway'
1484           4709   ;------------------------------------------------------------
1484           4710   ;------------------------------------------------------------
1484           4711   ;        main.c:1032: void servo_moveaway(void)
1484           4712   ;        -----------------------------------------
1484           4713   ;         function servo_moveaway
1484           4714   ;        -----------------------------------------
1484           4715   _servo_moveaway:
1484           4716   ;        main.c:1034: servo_push();
1484 120000    4717            lcall   _servo_push
1487           4718   ;        main.c:1035: waitms(100);
1487 900064    4719            mov     dptr,#0x0064
148A 120000    4720            lcall   _waitms
148D           4721   ;        main.c:1036: Move_forward_ms(500);
148D 9001F4    4722            mov     dptr,#0x01F4
1490 120000    4723            lcall   _Move_forward_ms
1493           4724   ;        main.c:1037: servo_push();
1493           4725   ;        main.c:1038: return; 
1493 020000    4726            ljmp    _servo_push
1496           4727   ;------------------------------------------------------------
1496           4728   ;Allocation info for local variables in function 'check_bound'
1496           4729   ;------------------------------------------------------------
1496           4730   ;d2                        Allocated with name '_check_bound_PARM_2'
1496           4731   ;d1                        Allocated to registers r2 r3 
1496           4732   ;------------------------------------------------------------
1496           4733   ;        main.c:1041: int check_bound(int d1, int d2){
1496           4734   ;        -----------------------------------------
1496           4735   ;         function check_bound
1496           4736   ;        -----------------------------------------
1496           4737   _check_bound:
1496 AA82      4738            mov     r2,dpl
1498 AB83      4739            mov     r3,dph
149A           4740   ;        main.c:1042: if(d1>10000||d2>10000)     return 1;
149A C3        4741            clr     c
149B 7410      4742            mov     a,#0x10
149D 9A        4743            subb    a,r2
149E 74A7      4744            mov     a,#(0x27 ^ 0x80)
14A0 8BF0      4745            mov     b,r3
14A2 63F080    4746            xrl     b,#0x80
14A5 95F0      4747            subb    a,b
14A7 4000      4748            jc      L035001?
14A9 7410      4749            mov     a,#0x10
14AB 9590      4750            subb    a,_check_bound_PARM_2
14AD 74A7      4751            mov     a,#(0x27 ^ 0x80)
14AF 8591F0    4752            mov     b,(_check_bound_PARM_2 + 1)
14B2 63F080    4753            xrl     b,#0x80
14B5 95F0      4754            subb    a,b
14B7 5000      4755            jnc     L035002?
14B9           4756   L035001?:
14B9 900001    4757            mov     dptr,#0x0001
14BC           4758   ;        main.c:1043: else return 0;
14BC 22        4759            ret
14BD           4760   L035002?:
14BD 900000    4761            mov     dptr,#0x0000
14C0 22        4762            ret
14C1           4763   ;------------------------------------------------------------
14C1           4764   ;Allocation info for local variables in function 'Init_all'
14C1           4765   ;------------------------------------------------------------
14C1           4766   ;------------------------------------------------------------
14C1           4767   ;        main.c:1046: void Init_all(){
14C1           4768   ;        -----------------------------------------
14C1           4769   ;         function Init_all
14C1           4770   ;        -----------------------------------------
14C1           4771   _Init_all:
14C1           4772   ;        main.c:1048: Set_Pin_Output(0x24);
14C1 758224    4773            mov     dpl,#0x24
14C4 120000    4774            lcall   _Set_Pin_Output
14C7           4775   ;        main.c:1049: Set_Pin_Output(0x23);
14C7 758223    4776            mov     dpl,#0x23
14CA 120000    4777            lcall   _Set_Pin_Output
14CD           4778   ;        main.c:1050: Set_Pin_Output(0x22);
14CD 758222    4779            mov     dpl,#0x22
14D0 120000    4780            lcall   _Set_Pin_Output
14D3           4781   ;        main.c:1051: Set_Pin_Output(0x21);
14D3 758221    4782            mov     dpl,#0x21
14D6 120000    4783            lcall   _Set_Pin_Output
14D9           4784   ;        main.c:1052: Set_Pin_Output(0x17);
14D9 758217    4785            mov     dpl,#0x17
14DC 120000    4786            lcall   _Set_Pin_Output
14DF           4787   ;        main.c:1053: Set_Pin_Output(0x16);
14DF 758216    4788            mov     dpl,#0x16
14E2 120000    4789            lcall   _Set_Pin_Output
14E5           4790   ;        main.c:1054: Set_Pin_Output(0x15);
14E5 758215    4791            mov     dpl,#0x15
14E8 120000    4792            lcall   _Set_Pin_Output
14EB           4793   ;        main.c:1055: Set_Pin_Output(0x10); // CS
14EB 758210    4794            mov     dpl,#0x10
14EE 120000    4795            lcall   _Set_Pin_Output
14F1           4796   ;        main.c:1057: Set_Pin_Input(0x30);
14F1 758230    4797            mov     dpl,#0x30
14F4 120000    4798            lcall   _Set_Pin_Input
14F7           4799   ;        main.c:1058: Set_Pin_Output(0x25); // CLK for Load
14F7 758225    4800            mov     dpl,#0x25
14FA 120000    4801            lcall   _Set_Pin_Output
14FD           4802   ;        main.c:1059: Set_Pin_Input(0x26);
14FD 758226    4803            mov     dpl,#0x26
1500 120000    4804            lcall   _Set_Pin_Input
1503           4805   ;        main.c:1061: Set_Pin_Input(0x31);   //ECHO pin
1503 758231    4806            mov     dpl,#0x31
1506 120000    4807            lcall   _Set_Pin_Input
1509           4808   ;        main.c:1062: Set_Pin_Output(0x00);  // TRIGGER pin
1509 758200    4809            mov     dpl,#0x00
150C 120000    4810            lcall   _Set_Pin_Output
150F           4811   ;        main.c:1064: InitPinADC(1,3);
150F 75E003    4812            mov     _InitPinADC_PARM_2,#0x03
1512 758201    4813            mov     dpl,#0x01
1515 120000    4814            lcall   _InitPinADC
1518           4815   ;        main.c:1065: InitPinADC(1,4);
1518 75E004    4816            mov     _InitPinADC_PARM_2,#0x04
151B 758201    4817            mov     dpl,#0x01
151E 120000    4818            lcall   _InitPinADC
1521           4819   ;        main.c:1066: InitADC();
1521 120000    4820            lcall   _InitADC
1524           4821   ;        main.c:1068: TMOD&=0b_1111_0000; 
1524 5389F0    4822            anl     _TMOD,#0xF0
1527           4823   ;        main.c:1069: TMOD|=0b_0000_0001; 
1527 438901    4824            orl     _TMOD,#0x01
152A           4825   ;        main.c:1070: TR0=0; 
152A C28C      4826            clr     _TR0
152C           4827   ;        main.c:1072: Servo_arm=0;
152C C296      4828            clr     _P1_6
152E           4829   ;        main.c:1073: Servo_base=0;
152E C297      4830            clr     _P1_7
1530           4831   ;        main.c:1074: Magnet = 0;
1530 C295      4832            clr     _P1_5
1532           4833   ;        main.c:1075: PD_SCK = 0;
1532 C2A5      4834            clr     _P2_5
1534           4835   ;        main.c:1076: return;
1534 22        4836            ret
1535           4837   ;------------------------------------------------------------
1535           4838   ;Allocation info for local variables in function 'Move_back_ms'
1535           4839   ;------------------------------------------------------------
1535           4840   ;ms                        Allocated to registers r2 r3 
1535           4841   ;------------------------------------------------------------
1535           4842   ;        main.c:1079: void Move_back_ms(int ms){
1535           4843   ;        -----------------------------------------
1535           4844   ;         function Move_back_ms
1535           4845   ;        -----------------------------------------
1535           4846   _Move_back_ms:
1535 AA82      4847            mov     r2,dpl
1537 AB83      4848            mov     r3,dph
1539           4849   ;        main.c:1081: L_motor_dir = 1;
1539 905120    4850            mov     dptr,#_L_motor_dir
153C 7401      4851            mov     a,#0x01
153E F0        4852            movx    @dptr,a
153F           4853   ;        main.c:1082: R_motor_dir = 1;
153F 9050E0    4854            mov     dptr,#_R_motor_dir
1542 7401      4855            mov     a,#0x01
1544 F0        4856            movx    @dptr,a
1545           4857   ;        main.c:1084: pwm_left = 80;
1545 9051A0    4858            mov     dptr,#_pwm_left
1548 7450      4859            mov     a,#0x50
154A F0        4860            movx    @dptr,a
154B           4861   ;        main.c:1085: pwm_right = 80*pwm_corr;
154B C002      4862            push    ar2
154D C003      4863            push    ar3
154F 904E50    4864            mov     dptr,#_pwm_corr
1552 E0        4865            movx    a,@dptr
1553 C0E0      4866            push    acc
1555 A3        4867            inc     dptr
1556 E0        4868            movx    a,@dptr
1557 C0E0      4869            push    acc
1559 A3        4870            inc     dptr
155A E0        4871            movx    a,@dptr
155B C0E0      4872            push    acc
155D A3        4873            inc     dptr
155E E0        4874            movx    a,@dptr
155F C0E0      4875            push    acc
1561 900000    4876            mov     dptr,#0x0000
1564 75F0A0    4877            mov     b,#0xA0
1567 7442      4878            mov     a,#0x42
1569 120000    4879            lcall   ___fsmul
156C AC82      4880            mov     r4,dpl
156E AD83      4881            mov     r5,dph
1570 AEF0      4882            mov     r6,b
1572 FF        4883            mov     r7,a
1573 E581      4884            mov     a,sp
1575 24FC      4885            add     a,#0xfc
1577 F581      4886            mov     sp,a
1579 8C82      4887            mov     dpl,r4
157B 8D83      4888            mov     dph,r5
157D 8EF0      4889            mov     b,r6
157F EF        4890            mov     a,r7
1580 120000    4891            lcall   ___fs2uchar
1583 E582      4892            mov     a,dpl
1585 D003      4893            pop     ar3
1587 D002      4894            pop     ar2
1589 905160    4895            mov     dptr,#_pwm_right
158C F0        4896            movx    @dptr,a
158D           4897   ;        main.c:1087: waitms(ms);
158D 8A82      4898            mov     dpl,r2
158F 8B83      4899            mov     dph,r3
1591 120000    4900            lcall   _waitms
1594           4901   ;        main.c:1089: L_motor_dir = 0;
1594 905120    4902            mov     dptr,#_L_motor_dir
1597           4903   ;        main.c:1090: R_motor_dir = 0;
1597           4904   ;        main.c:1091: pwm_left = 0;
1597           4905   ;        main.c:1092: pwm_right = 0;
1597 E4        4906            clr     a
1598 F0        4907            movx    @dptr,a
1599 9050E0    4908            mov     dptr,#_R_motor_dir
159C F0        4909            movx    @dptr,a
159D 9051A0    4910            mov     dptr,#_pwm_left
15A0 F0        4911            movx    @dptr,a
15A1 905160    4912            mov     dptr,#_pwm_right
15A4 F0        4913            movx    @dptr,a
15A5           4914   ;        main.c:1093: return;
15A5 22        4915            ret
15A6           4916   ;------------------------------------------------------------
15A6           4917   ;Allocation info for local variables in function 'Right_angle'
15A6           4918   ;------------------------------------------------------------
15A6           4919   ;angle                     Allocated to registers r2 r3 
15A6           4920   ;------------------------------------------------------------
15A6           4921   ;        main.c:1097: void Right_angle(int angle){
15A6           4922   ;        -----------------------------------------
15A6           4923   ;         function Right_angle
15A6           4924   ;        -----------------------------------------
15A6           4925   _Right_angle:
15A6 AA82      4926            mov     r2,dpl
15A8 AB83      4927            mov     r3,dph
15AA           4928   ;        main.c:1099: L_motor_dir = 1;
15AA 905120    4929            mov     dptr,#_L_motor_dir
15AD 7401      4930            mov     a,#0x01
15AF F0        4931            movx    @dptr,a
15B0           4932   ;        main.c:1100: R_motor_dir = 0;
15B0 9050E0    4933            mov     dptr,#_R_motor_dir
15B3 E4        4934            clr     a
15B4 F0        4935            movx    @dptr,a
15B5           4936   ;        main.c:1101: pwm_left = 80;
15B5 9051A0    4937            mov     dptr,#_pwm_left
15B8 7450      4938            mov     a,#0x50
15BA F0        4939            movx    @dptr,a
15BB           4940   ;        main.c:1102: pwm_right = 80 * pwm_corr;
15BB C002      4941            push    ar2
15BD C003      4942            push    ar3
15BF 904E50    4943            mov     dptr,#_pwm_corr
15C2 E0        4944            movx    a,@dptr
15C3 C0E0      4945            push    acc
15C5 A3        4946            inc     dptr
15C6 E0        4947            movx    a,@dptr
15C7 C0E0      4948            push    acc
15C9 A3        4949            inc     dptr
15CA E0        4950            movx    a,@dptr
15CB C0E0      4951            push    acc
15CD A3        4952            inc     dptr
15CE E0        4953            movx    a,@dptr
15CF C0E0      4954            push    acc
15D1 900000    4955            mov     dptr,#0x0000
15D4 75F0A0    4956            mov     b,#0xA0
15D7 7442      4957            mov     a,#0x42
15D9 120000    4958            lcall   ___fsmul
15DC AC82      4959            mov     r4,dpl
15DE AD83      4960            mov     r5,dph
15E0 AEF0      4961            mov     r6,b
15E2 FF        4962            mov     r7,a
15E3 E581      4963            mov     a,sp
15E5 24FC      4964            add     a,#0xfc
15E7 F581      4965            mov     sp,a
15E9 8C82      4966            mov     dpl,r4
15EB 8D83      4967            mov     dph,r5
15ED 8EF0      4968            mov     b,r6
15EF EF        4969            mov     a,r7
15F0 120000    4970            lcall   ___fs2uchar
15F3 E582      4971            mov     a,dpl
15F5 D003      4972            pop     ar3
15F7 D002      4973            pop     ar2
15F9 905160    4974            mov     dptr,#_pwm_right
15FC F0        4975            movx    @dptr,a
15FD           4976   ;        main.c:1104: waitms(angle);
15FD 8A82      4977            mov     dpl,r2
15FF 8B83      4978            mov     dph,r3
1601 120000    4979            lcall   _waitms
1604           4980   ;        main.c:1106: L_motor_dir = 0;
1604 905120    4981            mov     dptr,#_L_motor_dir
1607           4982   ;        main.c:1107: R_motor_dir = 0;
1607           4983   ;        main.c:1108: pwm_left = 0;
1607           4984   ;        main.c:1109: pwm_right = 0;
1607 E4        4985            clr     a
1608 F0        4986            movx    @dptr,a
1609 9050E0    4987            mov     dptr,#_R_motor_dir
160C F0        4988            movx    @dptr,a
160D 9051A0    4989            mov     dptr,#_pwm_left
1610 F0        4990            movx    @dptr,a
1611 905160    4991            mov     dptr,#_pwm_right
1614 F0        4992            movx    @dptr,a
1615           4993   ;        main.c:1110: return;
1615 22        4994            ret
1616           4995   ;------------------------------------------------------------
1616           4996   ;Allocation info for local variables in function 'Move_forward'
1616           4997   ;------------------------------------------------------------
1616           4998   ;------------------------------------------------------------
1616           4999   ;        main.c:1113: void Move_forward(){
1616           5000   ;        -----------------------------------------
1616           5001   ;         function Move_forward
1616           5002   ;        -----------------------------------------
1616           5003   _Move_forward:
1616           5004   ;        main.c:1115: L_motor_dir = 0;
1616 905120    5005            mov     dptr,#_L_motor_dir
1619           5006   ;        main.c:1116: R_motor_dir = 0;
1619 E4        5007            clr     a
161A F0        5008            movx    @dptr,a
161B 9050E0    5009            mov     dptr,#_R_motor_dir
161E F0        5010            movx    @dptr,a
161F           5011   ;        main.c:1117: pwm_left = 60;
161F 9051A0    5012            mov     dptr,#_pwm_left
1622 743C      5013            mov     a,#0x3C
1624 F0        5014            movx    @dptr,a
1625           5015   ;        main.c:1118: pwm_right = 60 * pwm_corr;
1625 904E50    5016            mov     dptr,#_pwm_corr
1628 E0        5017            movx    a,@dptr
1629 C0E0      5018            push    acc
162B A3        5019            inc     dptr
162C E0        5020            movx    a,@dptr
162D C0E0      5021            push    acc
162F A3        5022            inc     dptr
1630 E0        5023            movx    a,@dptr
1631 C0E0      5024            push    acc
1633 A3        5025            inc     dptr
1634 E0        5026            movx    a,@dptr
1635 C0E0      5027            push    acc
1637 900000    5028            mov     dptr,#0x0000
163A 75F070    5029            mov     b,#0x70
163D 7442      5030            mov     a,#0x42
163F 120000    5031            lcall   ___fsmul
1642 AA82      5032            mov     r2,dpl
1644 AB83      5033            mov     r3,dph
1646 ACF0      5034            mov     r4,b
1648 FD        5035            mov     r5,a
1649 E581      5036            mov     a,sp
164B 24FC      5037            add     a,#0xfc
164D F581      5038            mov     sp,a
164F 8A82      5039            mov     dpl,r2
1651 8B83      5040            mov     dph,r3
1653 8CF0      5041            mov     b,r4
1655 ED        5042            mov     a,r5
1656 120000    5043            lcall   ___fs2uchar
1659 E582      5044            mov     a,dpl
165B 905160    5045            mov     dptr,#_pwm_right
165E F0        5046            movx    @dptr,a
165F           5047   ;        main.c:1119: return;
165F 22        5048            ret
1660           5049   ;------------------------------------------------------------
1660           5050   ;Allocation info for local variables in function 'simple_rand'
1660           5051   ;------------------------------------------------------------
1660           5052   ;------------------------------------------------------------
1660           5053   ;        main.c:1122: unsigned int simple_rand() {
1660           5054   ;        -----------------------------------------
1660           5055   ;         function simple_rand
1660           5056   ;        -----------------------------------------
1660           5057   _simple_rand:
1660           5058   ;        main.c:1123: seed = (seed * 25173 + 13849) & 0xFFFF;  
1660 904E90    5059            mov     dptr,#_seed
1663 E0        5060            movx    a,@dptr
1664 F500      5061            mov     __mulint_PARM_2,a
1666 A3        5062            inc     dptr
1667 E0        5063            movx    a,@dptr
1668 F501      5064            mov     (__mulint_PARM_2 + 1),a
166A 906255    5065            mov     dptr,#0x6255
166D 120000    5066            lcall   __mulint
1670 E582      5067            mov     a,dpl
1672 8583F0    5068            mov     b,dph
1675 904E90    5069            mov     dptr,#_seed
1678 2419      5070            add     a,#0x19
167A F0        5071            movx    @dptr,a
167B 7436      5072            mov     a,#0x36
167D 35F0      5073            addc    a,b
167F A3        5074            inc     dptr
1680 F0        5075            movx    @dptr,a
1681           5076   ;        main.c:1124: return seed;     
1681 904E90    5077            mov     dptr,#_seed
1684 E0        5078            movx    a,@dptr
1685 FA        5079            mov     r2,a
1686 A3        5080            inc     dptr
1687 E0        5081            movx    a,@dptr
1688 8A82      5082            mov     dpl,r2
168A F583      5083            mov     dph,a
168C 22        5084            ret
168D           5085   ;------------------------------------------------------------
168D           5086   ;Allocation info for local variables in function 'get_random_90_250'
168D           5087   ;------------------------------------------------------------
168D           5088   ;------------------------------------------------------------
168D           5089   ;        main.c:1127: unsigned int get_random_90_250() {
168D           5090   ;        -----------------------------------------
168D           5091   ;         function get_random_90_250
168D           5092   ;        -----------------------------------------
168D           5093   _get_random_90_250:
168D           5094   ;        main.c:1128: return (simple_rand() % (250 - 85 + 1)) + 90;
168D 120000    5095            lcall   _simple_rand
1690 7500A6    5096            mov     __moduint_PARM_2,#0xA6
1693 E4        5097            clr     a
1694 F501      5098            mov     (__moduint_PARM_2 + 1),a
1696 120000    5099            lcall   __moduint
1699 E582      5100            mov     a,dpl
169B 8583F0    5101            mov     b,dph
169E 245A      5102            add     a,#0x5A
16A0 F582      5103            mov     dpl,a
16A2 E4        5104            clr     a
16A3 35F0      5105            addc    a,b
16A5 F583      5106            mov     dph,a
16A7 22        5107            ret
16A8           5108   ;------------------------------------------------------------
16A8           5109   ;Allocation info for local variables in function 'Read_angle'
16A8           5110   ;------------------------------------------------------------
16A8           5111   ;sloc0                     Allocated with name '_Read_angle_sloc0_1_0'
16A8           5112   ;i                         Allocated with name '_Read_angle_i_1_228'
16A8           5113   ;mag_x                     Allocated with name '_Read_angle_mag_x_1_228'
16A8           5114   ;mag_y                     Allocated with name '_Read_angle_mag_y_1_228'
16A8           5115   ;sum_x                     Allocated with name '_Read_angle_sum_x_1_228'
16A8           5116   ;sum_y                     Allocated with name '_Read_angle_sum_y_1_228'
16A8           5117   ;angle                     Allocated with name '_Read_angle_angle_1_228'
16A8           5118   ;------------------------------------------------------------
16A8           5119   ;        main.c:1131: float Read_angle(void)
16A8           5120   ;        -----------------------------------------
16A8           5121   ;         function Read_angle
16A8           5122   ;        -----------------------------------------
16A8           5123   _Read_angle:
16A8           5124   ;        main.c:1138: sum_x = 0.0; sum_y = 0.0;
16A8 90D110    5125            mov     dptr,#_Read_angle_sum_x_1_228
16AB E4        5126            clr     a
16AC F0        5127            movx    @dptr,a
16AD A3        5128            inc     dptr
16AE F0        5129            movx    @dptr,a
16AF A3        5130            inc     dptr
16B0 F0        5131            movx    @dptr,a
16B1 A3        5132            inc     dptr
16B2 F0        5133            movx    @dptr,a
16B3 90D160    5134            mov     dptr,#_Read_angle_sum_y_1_228
16B6 F0        5135            movx    @dptr,a
16B7 A3        5136            inc     dptr
16B8 E4        5137            clr     a
16B9 F0        5138            movx    @dptr,a
16BA A3        5139            inc     dptr
16BB F0        5140            movx    @dptr,a
16BC A3        5141            inc     dptr
16BD F0        5142            movx    @dptr,a
16BE           5143   ;        main.c:1141: for (i = 0; i < 10; i++){
16BE 7A00      5144            mov     r2,#0x00
16C0           5145   L042005?:
16C0 BA0A80    5146            cjne    r2,#0x0A,L042016?
16C3           5147   L042016?:
16C3 4000      5148            jc      L042017?
16C5 020000    5149            ljmp    L042008?
16C8           5150   L042017?:
16C8           5151   ;        main.c:1142: BMM150_Read_Data(&mag_x, &mag_y);
16C8 75C0C0    5152            mov     _BMM150_Read_Data_PARM_2,#_Read_angle_mag_y_1_228
16CB 75C1D0    5153            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_Read_angle_mag_y_1_228 >> 8)
16CE 75C200    5154            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
16D1 90D070    5155            mov     dptr,#_Read_angle_mag_x_1_228
16D4 75F000    5156            mov     b,#0x00
16D7 C002      5157            push    ar2
16D9 120000    5158            lcall   _BMM150_Read_Data
16DC           5159   ;        main.c:1143: sum_x += (float)mag_x; 
16DC 90D070    5160            mov     dptr,#_Read_angle_mag_x_1_228
16DF E0        5161            movx    a,@dptr
16E0 FB        5162            mov     r3,a
16E1 A3        5163            inc     dptr
16E2 E0        5164            movx    a,@dptr
16E3 FC        5165            mov     r4,a
16E4 8B82      5166            mov     dpl,r3
16E6 8C83      5167            mov     dph,r4
16E8 120000    5168            lcall   ___sint2fs
16EB 8582B0    5169            mov     _Read_angle_sloc0_1_0,dpl
16EE 8583B1    5170            mov     (_Read_angle_sloc0_1_0 + 1),dph
16F1 85F0B2    5171            mov     (_Read_angle_sloc0_1_0 + 2),b
16F4 F5B3      5172            mov     (_Read_angle_sloc0_1_0 + 3),a
16F6 90D110    5173            mov     dptr,#_Read_angle_sum_x_1_228
16F9 E0        5174            movx    a,@dptr
16FA FF        5175            mov     r7,a
16FB A3        5176            inc     dptr
16FC E0        5177            movx    a,@dptr
16FD F8        5178            mov     r0,a
16FE A3        5179            inc     dptr
16FF E0        5180            movx    a,@dptr
1700 F9        5181            mov     r1,a
1701 A3        5182            inc     dptr
1702 E0        5183            movx    a,@dptr
1703 FB        5184            mov     r3,a
1704 C0B0      5185            push    _Read_angle_sloc0_1_0
1706 C0B1      5186            push    (_Read_angle_sloc0_1_0 + 1)
1708 C0B2      5187            push    (_Read_angle_sloc0_1_0 + 2)
170A C0B3      5188            push    (_Read_angle_sloc0_1_0 + 3)
170C 8F82      5189            mov     dpl,r7
170E 8883      5190            mov     dph,r0
1710 89F0      5191            mov     b,r1
1712 EB        5192            mov     a,r3
1713 120000    5193            lcall   ___fsadd
1716 AB82      5194            mov     r3,dpl
1718 AC83      5195            mov     r4,dph
171A ADF0      5196            mov     r5,b
171C FE        5197            mov     r6,a
171D E581      5198            mov     a,sp
171F 24FC      5199            add     a,#0xfc
1721 F581      5200            mov     sp,a
1723 90D110    5201            mov     dptr,#_Read_angle_sum_x_1_228
1726 EB        5202            mov     a,r3
1727 F0        5203            movx    @dptr,a
1728 A3        5204            inc     dptr
1729 EC        5205            mov     a,r4
172A F0        5206            movx    @dptr,a
172B A3        5207            inc     dptr
172C ED        5208            mov     a,r5
172D F0        5209            movx    @dptr,a
172E A3        5210            inc     dptr
172F EE        5211            mov     a,r6
1730 F0        5212            movx    @dptr,a
1731           5213   ;        main.c:1144: sum_y += (float)mag_y; 
1731 90D0C0    5214            mov     dptr,#_Read_angle_mag_y_1_228
1734 E0        5215            movx    a,@dptr
1735 FB        5216            mov     r3,a
1736 A3        5217            inc     dptr
1737 E0        5218            movx    a,@dptr
1738 FC        5219            mov     r4,a
1739 8B82      5220            mov     dpl,r3
173B 8C83      5221            mov     dph,r4
173D 120000    5222            lcall   ___sint2fs
1740 8582B0    5223            mov     _Read_angle_sloc0_1_0,dpl
1743 8583B1    5224            mov     (_Read_angle_sloc0_1_0 + 1),dph
1746 85F0B2    5225            mov     (_Read_angle_sloc0_1_0 + 2),b
1749 F5B3      5226            mov     (_Read_angle_sloc0_1_0 + 3),a
174B 90D160    5227            mov     dptr,#_Read_angle_sum_y_1_228
174E E0        5228            movx    a,@dptr
174F FF        5229            mov     r7,a
1750 A3        5230            inc     dptr
1751 E0        5231            movx    a,@dptr
1752 F8        5232            mov     r0,a
1753 A3        5233            inc     dptr
1754 E0        5234            movx    a,@dptr
1755 F9        5235            mov     r1,a
1756 A3        5236            inc     dptr
1757 E0        5237            movx    a,@dptr
1758 FB        5238            mov     r3,a
1759 C0B0      5239            push    _Read_angle_sloc0_1_0
175B C0B1      5240            push    (_Read_angle_sloc0_1_0 + 1)
175D C0B2      5241            push    (_Read_angle_sloc0_1_0 + 2)
175F C0B3      5242            push    (_Read_angle_sloc0_1_0 + 3)
1761 8F82      5243            mov     dpl,r7
1763 8883      5244            mov     dph,r0
1765 89F0      5245            mov     b,r1
1767 EB        5246            mov     a,r3
1768 120000    5247            lcall   ___fsadd
176B AB82      5248            mov     r3,dpl
176D AC83      5249            mov     r4,dph
176F ADF0      5250            mov     r5,b
1771 FE        5251            mov     r6,a
1772 E581      5252            mov     a,sp
1774 24FC      5253            add     a,#0xfc
1776 F581      5254            mov     sp,a
1778 90D160    5255            mov     dptr,#_Read_angle_sum_y_1_228
177B EB        5256            mov     a,r3
177C F0        5257            movx    @dptr,a
177D A3        5258            inc     dptr
177E EC        5259            mov     a,r4
177F F0        5260            movx    @dptr,a
1780 A3        5261            inc     dptr
1781 ED        5262            mov     a,r5
1782 F0        5263            movx    @dptr,a
1783 A3        5264            inc     dptr
1784 EE        5265            mov     a,r6
1785 F0        5266            movx    @dptr,a
1786           5267   ;        main.c:1145: Timer3us(1);
1786 758201    5268            mov     dpl,#0x01
1789 120000    5269            lcall   _Timer3us
178C D002      5270            pop     ar2
178E           5271   ;        main.c:1141: for (i = 0; i < 10; i++){
178E 0A        5272            inc     r2
178F 020000    5273            ljmp    L042005?
1792           5274   L042008?:
1792           5275   ;        main.c:1147: angle = atan2f(sum_y, sum_x) * 180.0 / M_PI;
1792 90D160    5276            mov     dptr,#_Read_angle_sum_y_1_228
1795 E0        5277            movx    a,@dptr
1796 FA        5278            mov     r2,a
1797 A3        5279            inc     dptr
1798 E0        5280            movx    a,@dptr
1799 FB        5281            mov     r3,a
179A A3        5282            inc     dptr
179B E0        5283            movx    a,@dptr
179C FC        5284            mov     r4,a
179D A3        5285            inc     dptr
179E E0        5286            movx    a,@dptr
179F FD        5287            mov     r5,a
17A0 90D110    5288            mov     dptr,#_Read_angle_sum_x_1_228
17A3 E0        5289            movx    a,@dptr
17A4 F500      5290            mov     _atan2f_PARM_2,a
17A6 A3        5291            inc     dptr
17A7 E0        5292            movx    a,@dptr
17A8 F501      5293            mov     (_atan2f_PARM_2 + 1),a
17AA A3        5294            inc     dptr
17AB E0        5295            movx    a,@dptr
17AC F502      5296            mov     (_atan2f_PARM_2 + 2),a
17AE A3        5297            inc     dptr
17AF E0        5298            movx    a,@dptr
17B0 F503      5299            mov     (_atan2f_PARM_2 + 3),a
17B2 8A82      5300            mov     dpl,r2
17B4 8B83      5301            mov     dph,r3
17B6 8CF0      5302            mov     b,r4
17B8 ED        5303            mov     a,r5
17B9 120000    5304            lcall   _atan2f
17BC AA82      5305            mov     r2,dpl
17BE AB83      5306            mov     r3,dph
17C0 ACF0      5307            mov     r4,b
17C2 FD        5308            mov     r5,a
17C3 C002      5309            push    ar2
17C5 C003      5310            push    ar3
17C7 C004      5311            push    ar4
17C9 C005      5312            push    ar5
17CB 900000    5313            mov     dptr,#0x0000
17CE 75F034    5314            mov     b,#0x34
17D1 7443      5315            mov     a,#0x43
17D3 120000    5316            lcall   ___fsmul
17D6 AA82      5317            mov     r2,dpl
17D8 AB83      5318            mov     r3,dph
17DA ACF0      5319            mov     r4,b
17DC FD        5320            mov     r5,a
17DD E581      5321            mov     a,sp
17DF 24FC      5322            add     a,#0xfc
17E1 F581      5323            mov     sp,a
17E3 74DB      5324            mov     a,#0xDB
17E5 C0E0      5325            push    acc
17E7 740F      5326            mov     a,#0x0F
17E9 C0E0      5327            push    acc
17EB 7449      5328            mov     a,#0x49
17ED C0E0      5329            push    acc
17EF 7440      5330            mov     a,#0x40
17F1 C0E0      5331            push    acc
17F3 8A82      5332            mov     dpl,r2
17F5 8B83      5333            mov     dph,r3
17F7 8CF0      5334            mov     b,r4
17F9 ED        5335            mov     a,r5
17FA 120000    5336            lcall   ___fsdiv
17FD AA82      5337            mov     r2,dpl
17FF AB83      5338            mov     r3,dph
1801 ACF0      5339            mov     r4,b
1803 FD        5340            mov     r5,a
1804 E581      5341            mov     a,sp
1806 24FC      5342            add     a,#0xfc
1808 F581      5343            mov     sp,a
180A 90D1B0    5344            mov     dptr,#_Read_angle_angle_1_228
180D EA        5345            mov     a,r2
180E F0        5346            movx    @dptr,a
180F A3        5347            inc     dptr
1810 EB        5348            mov     a,r3
1811 F0        5349            movx    @dptr,a
1812 A3        5350            inc     dptr
1813 EC        5351            mov     a,r4
1814 F0        5352            movx    @dptr,a
1815 A3        5353            inc     dptr
1816 ED        5354            mov     a,r5
1817 F0        5355            movx    @dptr,a
1818           5356   ;        main.c:1148: if (angle < 0.0) angle += 360.0; 
1818 C002      5357            push    ar2
181A C003      5358            push    ar3
181C C004      5359            push    ar4
181E C005      5360            push    ar5
1820 E4        5361            clr     a
1821 C0E0      5362            push    acc
1823 C0E0      5363            push    acc
1825 C0E0      5364            push    acc
1827 C0E0      5365            push    acc
1829 8A82      5366            mov     dpl,r2
182B 8B83      5367            mov     dph,r3
182D 8CF0      5368            mov     b,r4
182F ED        5369            mov     a,r5
1830 120000    5370            lcall   ___fslt
1833 AE82      5371            mov     r6,dpl
1835 E581      5372            mov     a,sp
1837 24FC      5373            add     a,#0xfc
1839 F581      5374            mov     sp,a
183B D005      5375            pop     ar5
183D D004      5376            pop     ar4
183F D003      5377            pop     ar3
1841 D002      5378            pop     ar2
1843 EE        5379            mov     a,r6
1844 6000      5380            jz      L042002?
1846 E4        5381            clr     a
1847 C0E0      5382            push    acc
1849 C0E0      5383            push    acc
184B 74B4      5384            mov     a,#0xB4
184D C0E0      5385            push    acc
184F 7443      5386            mov     a,#0x43
1851 C0E0      5387            push    acc
1853 8A82      5388            mov     dpl,r2
1855 8B83      5389            mov     dph,r3
1857 8CF0      5390            mov     b,r4
1859 ED        5391            mov     a,r5
185A 120000    5392            lcall   ___fsadd
185D AA82      5393            mov     r2,dpl
185F AB83      5394            mov     r3,dph
1861 ACF0      5395            mov     r4,b
1863 FD        5396            mov     r5,a
1864 E581      5397            mov     a,sp
1866 24FC      5398            add     a,#0xfc
1868 F581      5399            mov     sp,a
186A 90D1B0    5400            mov     dptr,#_Read_angle_angle_1_228
186D EA        5401            mov     a,r2
186E F0        5402            movx    @dptr,a
186F A3        5403            inc     dptr
1870 EB        5404            mov     a,r3
1871 F0        5405            movx    @dptr,a
1872 A3        5406            inc     dptr
1873 EC        5407            mov     a,r4
1874 F0        5408            movx    @dptr,a
1875 A3        5409            inc     dptr
1876 ED        5410            mov     a,r5
1877 F0        5411            movx    @dptr,a
1878           5412   L042002?:
1878           5413   ;        main.c:1149: if (angle > 360.0) angle -= 360.0; 
1878 90D1B0    5414            mov     dptr,#_Read_angle_angle_1_228
187B E0        5415            movx    a,@dptr
187C FA        5416            mov     r2,a
187D A3        5417            inc     dptr
187E E0        5418            movx    a,@dptr
187F FB        5419            mov     r3,a
1880 A3        5420            inc     dptr
1881 E0        5421            movx    a,@dptr
1882 FC        5422            mov     r4,a
1883 A3        5423            inc     dptr
1884 E0        5424            movx    a,@dptr
1885 FD        5425            mov     r5,a
1886 C002      5426            push    ar2
1888 C003      5427            push    ar3
188A C004      5428            push    ar4
188C C005      5429            push    ar5
188E E4        5430            clr     a
188F C0E0      5431            push    acc
1891 C0E0      5432            push    acc
1893 74B4      5433            mov     a,#0xB4
1895 C0E0      5434            push    acc
1897 7443      5435            mov     a,#0x43
1899 C0E0      5436            push    acc
189B 8A82      5437            mov     dpl,r2
189D 8B83      5438            mov     dph,r3
189F 8CF0      5439            mov     b,r4
18A1 ED        5440            mov     a,r5
18A2 120000    5441            lcall   ___fsgt
18A5 AE82      5442            mov     r6,dpl
18A7 E581      5443            mov     a,sp
18A9 24FC      5444            add     a,#0xfc
18AB F581      5445            mov     sp,a
18AD D005      5446            pop     ar5
18AF D004      5447            pop     ar4
18B1 D003      5448            pop     ar3
18B3 D002      5449            pop     ar2
18B5 EE        5450            mov     a,r6
18B6 6000      5451            jz      L042004?
18B8 E4        5452            clr     a
18B9 C0E0      5453            push    acc
18BB C0E0      5454            push    acc
18BD 74B4      5455            mov     a,#0xB4
18BF C0E0      5456            push    acc
18C1 7443      5457            mov     a,#0x43
18C3 C0E0      5458            push    acc
18C5 8A82      5459            mov     dpl,r2
18C7 8B83      5460            mov     dph,r3
18C9 8CF0      5461            mov     b,r4
18CB ED        5462            mov     a,r5
18CC 120000    5463            lcall   ___fssub
18CF AA82      5464            mov     r2,dpl
18D1 AB83      5465            mov     r3,dph
18D3 ACF0      5466            mov     r4,b
18D5 FD        5467            mov     r5,a
18D6 E581      5468            mov     a,sp
18D8 24FC      5469            add     a,#0xfc
18DA F581      5470            mov     sp,a
18DC 90D1B0    5471            mov     dptr,#_Read_angle_angle_1_228
18DF EA        5472            mov     a,r2
18E0 F0        5473            movx    @dptr,a
18E1 A3        5474            inc     dptr
18E2 EB        5475            mov     a,r3
18E3 F0        5476            movx    @dptr,a
18E4 A3        5477            inc     dptr
18E5 EC        5478            mov     a,r4
18E6 F0        5479            movx    @dptr,a
18E7 A3        5480            inc     dptr
18E8 ED        5481            mov     a,r5
18E9 F0        5482            movx    @dptr,a
18EA           5483   L042004?:
18EA           5484   ;        main.c:1150: return angle; 
18EA 90D1B0    5485            mov     dptr,#_Read_angle_angle_1_228
18ED E0        5486            movx    a,@dptr
18EE FA        5487            mov     r2,a
18EF A3        5488            inc     dptr
18F0 E0        5489            movx    a,@dptr
18F1 FB        5490            mov     r3,a
18F2 A3        5491            inc     dptr
18F3 E0        5492            movx    a,@dptr
18F4 FC        5493            mov     r4,a
18F5 A3        5494            inc     dptr
18F6 E0        5495            movx    a,@dptr
18F7 8A82      5496            mov     dpl,r2
18F9 8B83      5497            mov     dph,r3
18FB 8CF0      5498            mov     b,r4
18FD 22        5499            ret
18FE           5500   ;------------------------------------------------------------
18FE           5501   ;Allocation info for local variables in function 'Auto_mode_slave'
18FE           5502   ;------------------------------------------------------------
18FE           5503   ;sloc0                     Allocated with name '_Auto_mode_slave_sloc0_1_0'
18FE           5504   ;count                     Allocated with name '_Auto_mode_slave_count_1_230'
18FE           5505   ;command                   Allocated with name '_Auto_mode_slave_command_1_230'
18FE           5506   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_230'
18FE           5507   ;bound                     Allocated with name '_Auto_mode_slave_bound_1_230'
18FE           5508   ;c                         Allocated with name '_Auto_mode_slave_c_1_230'
18FE           5509   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_230'
18FE           5510   ;angle                     Allocated with name '_Auto_mode_slave_angle_1_230'
18FE           5511   ;------------------------------------------------------------
18FE           5512   ;        main.c:1153: void Auto_mode_slave(){
18FE           5513   ;        -----------------------------------------
18FE           5514   ;         function Auto_mode_slave
18FE           5515   ;        -----------------------------------------
18FE           5516   _Auto_mode_slave:
18FE           5517   ;        main.c:1156: xdata int state_res = 1;
18FE 90D260    5518            mov     dptr,#_Auto_mode_slave_state_res_1_230
1901 7401      5519            mov     a,#0x01
1903 F0        5520            movx    @dptr,a
1904 E4        5521            clr     a
1905 A3        5522            inc     dptr
1906 F0        5523            movx    @dptr,a
1907           5524   ;        main.c:1162: curr_angle = Read_angle();
1907 120000    5525            lcall   _Read_angle
190A AA82      5526            mov     r2,dpl
190C AB83      5527            mov     r3,dph
190E ACF0      5528            mov     r4,b
1910 FD        5529            mov     r5,a
1911 904E10    5530            mov     dptr,#_curr_angle
1914 EA        5531            mov     a,r2
1915 F0        5532            movx    @dptr,a
1916 A3        5533            inc     dptr
1917 EB        5534            mov     a,r3
1918 F0        5535            movx    @dptr,a
1919 A3        5536            inc     dptr
191A EC        5537            mov     a,r4
191B F0        5538            movx    @dptr,a
191C A3        5539            inc     dptr
191D ED        5540            mov     a,r5
191E F0        5541            movx    @dptr,a
191F           5542   ;        main.c:1164: while(count < 5 && state_res){
191F E4        5543            clr     a
1920 F500      5544            mov     _Auto_mode_slave_sloc0_1_0,a
1922 F501      5545            mov     (_Auto_mode_slave_sloc0_1_0 + 1),a
1924           5546   L043018?:
1924 C3        5547            clr     c
1925 E500      5548            mov     a,_Auto_mode_slave_sloc0_1_0
1927 9405      5549            subb    a,#0x05
1929 E501      5550            mov     a,(_Auto_mode_slave_sloc0_1_0 + 1)
192B 6480      5551            xrl     a,#0x80
192D 9480      5552            subb    a,#0x80
192F 4000      5553            jc      L043046?
1931 020000    5554            ljmp    L043020?
1934           5555   L043046?:
1934 90D260    5556            mov     dptr,#_Auto_mode_slave_state_res_1_230
1937 E0        5557            movx    a,@dptr
1938 FC        5558            mov     r4,a
1939 A3        5559            inc     dptr
193A E0        5560            movx    a,@dptr
193B FD        5561            mov     r5,a
193C 4C        5562            orl     a,r4
193D 7000      5563            jnz     L043047?
193F 020000    5564            ljmp    L043020?
1942           5565   L043047?:
1942           5566   ;        main.c:1166: if(RXU1()){
1942 C004      5567            push    ar4
1944 C005      5568            push    ar5
1946 120000    5569            lcall   _RXU1
1949 D005      5570            pop     ar5
194B D004      5571            pop     ar4
194D 4000      5572            jc      L043048?
194F 020000    5573            ljmp    L043012?
1952           5574   L043048?:
1952           5575   ;        main.c:1167: c=getchar1();      
1952 C004      5576            push    ar4
1954 C005      5577            push    ar5
1956 120000    5578            lcall   _getchar1
1959 AE82      5579            mov     r6,dpl
195B D005      5580            pop     ar5
195D D004      5581            pop     ar4
195F           5582   ;        main.c:1168: if(c=='!'){
195F BE2180    5583            cjne    r6,#0x21,L043049?
1962 8000      5584            sjmp    L043050?
1964           5585   L043049?:
1964 020000    5586            ljmp    L043009?
1967           5587   L043050?:
1967           5588   ;        main.c:1169: getstr1(buff, sizeof(buff)-1);
1967 757013    5589            mov     _getstr1_PARM_2,#0x13
196A 9056E0    5590            mov     dptr,#_buff
196D 75F040    5591            mov     b,#0x40
1970 120000    5592            lcall   _getstr1
1973           5593   ;        main.c:1170: if(strlen(buff)==11){
1973 9056E0    5594            mov     dptr,#_buff
1976 75F040    5595            mov     b,#0x40
1979 120000    5596            lcall   _strlen
197C AF82      5597            mov     r7,dpl
197E AA83      5598            mov     r2,dph
1980 BF0B80    5599            cjne    r7,#0x0B,L043051?
1983 BA0080    5600            cjne    r2,#0x00,L043051?
1986 8000      5601            sjmp    L043052?
1988           5602   L043051?:
1988 020000    5603            ljmp    L043012?
198B           5604   L043052?:
198B           5605   ;        main.c:1171: printf("master_messgae_auto_mode: %s\r\n", buff);
198B 74E0      5606            mov     a,#_buff
198D C0E0      5607            push    acc
198F 7456      5608            mov     a,#(_buff >> 8)
1991 C0E0      5609            push    acc
1993 7440      5610            mov     a,#0x40
1995 C0E0      5611            push    acc
1997 7400      5612            mov     a,#__str_6
1999 C0E0      5613            push    acc
199B 741A      5614            mov     a,#(__str_6 >> 8)
199D C0E0      5615            push    acc
199F 7480      5616            mov     a,#0x80
19A1 C0E0      5617            push    acc
19A3 120000    5618            lcall   _printf
19A6 E581      5619            mov     a,sp
19A8 24FA      5620            add     a,#0xfa
19AA F581      5621            mov     sp,a
19AC           5622   ;        main.c:1172: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
19AC 7400      5623            mov     a,#_Auto_mode_slave_command_1_230
19AE C0E0      5624            push    acc
19B0 74D2      5625            mov     a,#(_Auto_mode_slave_command_1_230 >> 8)
19B2 C0E0      5626            push    acc
19B4 E4        5627            clr     a
19B5 C0E0      5628            push    acc
19B7 74B0      5629            mov     a,#_Auto_mode_slave_dummy_1_230
19B9 C0E0      5630            push    acc
19BB 74D2      5631            mov     a,#(_Auto_mode_slave_dummy_1_230 >> 8)
19BD C0E0      5632            push    acc
19BF E4        5633            clr     a
19C0 C0E0      5634            push    acc
19C2 74B0      5635            mov     a,#_Auto_mode_slave_dummy_1_230
19C4 C0E0      5636            push    acc
19C6 74D2      5637            mov     a,#(_Auto_mode_slave_dummy_1_230 >> 8)
19C8 C0E0      5638            push    acc
19CA E4        5639            clr     a
19CB C0E0      5640            push    acc
19CD 74B0      5641            mov     a,#_Auto_mode_slave_dummy_1_230
19CF C0E0      5642            push    acc
19D1 74D2      5643            mov     a,#(_Auto_mode_slave_dummy_1_230 >> 8)
19D3 C0E0      5644            push    acc
19D5 E4        5645            clr     a
19D6 C0E0      5646            push    acc
19D8 7440      5647            mov     a,#__str_7
19DA C0E0      5648            push    acc
19DC 741A      5649            mov     a,#(__str_7 >> 8)
19DE C0E0      5650            push    acc
19E0 7480      5651            mov     a,#0x80
19E2 C0E0      5652            push    acc
19E4 74E0      5653            mov     a,#_buff
19E6 C0E0      5654            push    acc
19E8 7456      5655            mov     a,#(_buff >> 8)
19EA C0E0      5656            push    acc
19EC 7440      5657            mov     a,#0x40
19EE C0E0      5658            push    acc
19F0 120000    5659            lcall   _sscanf
19F3 E581      5660            mov     a,sp
19F5 24EE      5661            add     a,#0xee
19F7 F581      5662            mov     sp,a
19F9           5663   ;        main.c:1173: if(command) state_res = 1;
19F9 90D200    5664            mov     dptr,#_Auto_mode_slave_command_1_230
19FC E0        5665            movx    a,@dptr
19FD FF        5666            mov     r7,a
19FE A3        5667            inc     dptr
19FF E0        5668            movx    a,@dptr
1A00 FA        5669            mov     r2,a
1A01 4F        5670            orl     a,r7
1A02 6000      5671            jz      L043002?
1A04 90D260    5672            mov     dptr,#_Auto_mode_slave_state_res_1_230
1A07 7401      5673            mov     a,#0x01
1A09 F0        5674            movx    @dptr,a
1A0A E4        5675            clr     a
1A0B A3        5676            inc     dptr
1A0C F0        5677            movx    @dptr,a
1A0D 020000    5678            ljmp    L043012?
1A10           5679   L043002?:
1A10           5680   ;        main.c:1174: else state_res = 0;
1A10 90D260    5681            mov     dptr,#_Auto_mode_slave_state_res_1_230
1A13 E4        5682            clr     a
1A14 F0        5683            movx    @dptr,a
1A15 A3        5684            inc     dptr
1A16 F0        5685            movx    @dptr,a
1A17 8000      5686            sjmp    L043012?
1A19           5687   L043009?:
1A19           5688   ;        main.c:1177: else if(c=='@'){
1A19 BE4040    5689            cjne    r6,#0x40,L043012?
1A1C           5690   ;        main.c:1178: sprintf(buff, "%01d,%02d,%ld,%05d,%03d\n", state_res, count,freq100, 0, (int)curr_angle);
1A1C 904E10    5691            mov     dptr,#_curr_angle
1A1F E0        5692            movx    a,@dptr
1A20 FA        5693            mov     r2,a
1A21 A3        5694            inc     dptr
1A22 E0        5695            movx    a,@dptr
1A23 FB        5696            mov     r3,a
1A24 A3        5697            inc     dptr
1A25 E0        5698            movx    a,@dptr
1A26 FE        5699            mov     r6,a
1A27 A3        5700            inc     dptr
1A28 E0        5701            movx    a,@dptr
1A29 8A82      5702            mov     dpl,r2
1A2B 8B83      5703            mov     dph,r3
1A2D 8EF0      5704            mov     b,r6
1A2F C004      5705            push    ar4
1A31 C005      5706            push    ar5
1A33 120000    5707            lcall   ___fs2sint
1A36 AA82      5708            mov     r2,dpl
1A38 AB83      5709            mov     r3,dph
1A3A D005      5710            pop     ar5
1A3C D004      5711            pop     ar4
1A3E C002      5712            push    ar2
1A40 C003      5713            push    ar3
1A42 E4        5714            clr     a
1A43 C0E0      5715            push    acc
1A45 C0E0      5716            push    acc
1A47 9056A0    5717            mov     dptr,#_freq100
1A4A E0        5718            movx    a,@dptr
1A4B C0E0      5719            push    acc
1A4D A3        5720            inc     dptr
1A4E E0        5721            movx    a,@dptr
1A4F C0E0      5722            push    acc
1A51 A3        5723            inc     dptr
1A52 E0        5724            movx    a,@dptr
1A53 C0E0      5725            push    acc
1A55 A3        5726            inc     dptr
1A56 E0        5727            movx    a,@dptr
1A57 C0E0      5728            push    acc
1A59 C000      5729            push    _Auto_mode_slave_sloc0_1_0
1A5B C001      5730            push    (_Auto_mode_slave_sloc0_1_0 + 1)
1A5D C004      5731            push    ar4
1A5F C005      5732            push    ar5
1A61 7400      5733            mov     a,#__str_8
1A63 C0E0      5734            push    acc
1A65 741B      5735            mov     a,#(__str_8 >> 8)
1A67 C0E0      5736            push    acc
1A69 7480      5737            mov     a,#0x80
1A6B C0E0      5738            push    acc
1A6D 74E0      5739            mov     a,#_buff
1A6F C0E0      5740            push    acc
1A71 7456      5741            mov     a,#(_buff >> 8)
1A73 C0E0      5742            push    acc
1A75 7440      5743            mov     a,#0x40
1A77 C0E0      5744            push    acc
1A79 120000    5745            lcall   _sprintf
1A7C E581      5746            mov     a,sp
1A7E 24EE      5747            add     a,#0xee
1A80 F581      5748            mov     sp,a
1A82           5749   ;        main.c:1179: waitms(5); 
1A82 900005    5750            mov     dptr,#0x0005
1A85 120000    5751            lcall   _waitms
1A88           5752   ;        main.c:1180: sendstr1(buff);
1A88 9056E0    5753            mov     dptr,#_buff
1A8B 75F040    5754            mov     b,#0x40
1A8E 120000    5755            lcall   _sendstr1
1A91           5756   L043012?:
1A91           5757   ;        main.c:1184: Move_forward();
1A91 120000    5758            lcall   _Move_forward
1A94           5759   ;        main.c:1186: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
1A94 758209    5760            mov     dpl,#0x09
1A97 120000    5761            lcall   _ADC_at_Pin
1A9A E582      5762            mov     a,dpl
1A9C 8583F0    5763            mov     b,dph
1A9F 905660    5764            mov     dptr,#_d1
1AA2 F0        5765            movx    @dptr,a
1AA3 A3        5766            inc     dptr
1AA4 E5F0      5767            mov     a,b
1AA6 F0        5768            movx    @dptr,a
1AA7           5769   ;        main.c:1187: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
1AA7 75820A    5770            mov     dpl,#0x0A
1AAA 120000    5771            lcall   _ADC_at_Pin
1AAD AA82      5772            mov     r2,dpl
1AAF AB83      5773            mov     r3,dph
1AB1 905620    5774            mov     dptr,#_d2
1AB4 EA        5775            mov     a,r2
1AB5 F0        5776            movx    @dptr,a
1AB6 A3        5777            inc     dptr
1AB7 EB        5778            mov     a,r3
1AB8 F0        5779            movx    @dptr,a
1AB9           5780   ;        main.c:1188: bound = check_bound(d1,d2);
1AB9 905660    5781            mov     dptr,#_d1
1ABC E0        5782            movx    a,@dptr
1ABD FC        5783            mov     r4,a
1ABE A3        5784            inc     dptr
1ABF E0        5785            movx    a,@dptr
1AC0 FD        5786            mov     r5,a
1AC1 8A90      5787            mov     _check_bound_PARM_2,r2
1AC3 8B91      5788            mov     (_check_bound_PARM_2 + 1),r3
1AC5 8C82      5789            mov     dpl,r4
1AC7 8D83      5790            mov     dph,r5
1AC9 120000    5791            lcall   _check_bound
1ACC AA82      5792            mov     r2,dpl
1ACE AB83      5793            mov     r3,dph
1AD0           5794   ;        main.c:1189: printf("f:%04ld, d1:%d, d2:%d, bound_dectect: %d\r\n",freq100, d1,d2,bound);
1AD0 C002      5795            push    ar2
1AD2 C003      5796            push    ar3
1AD4 C002      5797            push    ar2
1AD6 C003      5798            push    ar3
1AD8 905620    5799            mov     dptr,#_d2
1ADB E0        5800            movx    a,@dptr
1ADC C0E0      5801            push    acc
1ADE A3        5802            inc     dptr
1ADF E0        5803            movx    a,@dptr
1AE0 C0E0      5804            push    acc
1AE2 905660    5805            mov     dptr,#_d1
1AE5 E0        5806            movx    a,@dptr
1AE6 C0E0      5807            push    acc
1AE8 A3        5808            inc     dptr
1AE9 E0        5809            movx    a,@dptr
1AEA C0E0      5810            push    acc
1AEC 9056A0    5811            mov     dptr,#_freq100
1AEF E0        5812            movx    a,@dptr
1AF0 C0E0      5813            push    acc
1AF2 A3        5814            inc     dptr
1AF3 E0        5815            movx    a,@dptr
1AF4 C0E0      5816            push    acc
1AF6 A3        5817            inc     dptr
1AF7 E0        5818            movx    a,@dptr
1AF8 C0E0      5819            push    acc
1AFA A3        5820            inc     dptr
1AFB E0        5821            movx    a,@dptr
1AFC C0E0      5822            push    acc
1AFE 7480      5823            mov     a,#__str_9
1B00 C0E0      5824            push    acc
1B02 741B      5825            mov     a,#(__str_9 >> 8)
1B04 C0E0      5826            push    acc
1B06 7480      5827            mov     a,#0x80
1B08 C0E0      5828            push    acc
1B0A 120000    5829            lcall   _printf
1B0D E581      5830            mov     a,sp
1B0F 24F3      5831            add     a,#0xf3
1B11 F581      5832            mov     sp,a
1B13 D003      5833            pop     ar3
1B15 D002      5834            pop     ar2
1B17           5835   ;        main.c:1191: if (freq100>=5360){
1B17 9056A0    5836            mov     dptr,#_freq100
1B1A E0        5837            movx    a,@dptr
1B1B FC        5838            mov     r4,a
1B1C A3        5839            inc     dptr
1B1D E0        5840            movx    a,@dptr
1B1E FD        5841            mov     r5,a
1B1F A3        5842            inc     dptr
1B20 E0        5843            movx    a,@dptr
1B21 FE        5844            mov     r6,a
1B22 A3        5845            inc     dptr
1B23 E0        5846            movx    a,@dptr
1B24 FF        5847            mov     r7,a
1B25 C3        5848            clr     c
1B26 EC        5849            mov     a,r4
1B27 94F0      5850            subb    a,#0xF0
1B29 ED        5851            mov     a,r5
1B2A 9414      5852            subb    a,#0x14
1B2C EE        5853            mov     a,r6
1B2D 9400      5854            subb    a,#0x00
1B2F EF        5855            mov     a,r7
1B30 6480      5856            xrl     a,#0x80
1B32 9480      5857            subb    a,#0x80
1B34 4000      5858            jc      L043014?
1B36           5859   ;        main.c:1192: mea_yes = 0;
1B36 904D10    5860            mov     dptr,#_mea_yes
1B39 E4        5861            clr     a
1B3A F0        5862            movx    @dptr,a
1B3B           5863   ;        main.c:1193: Move_back_ms(300);
1B3B 90012C    5864            mov     dptr,#0x012C
1B3E C002      5865            push    ar2
1B40 C003      5866            push    ar3
1B42 120000    5867            lcall   _Move_back_ms
1B45           5868   ;        main.c:1194: waitms(100);
1B45 900064    5869            mov     dptr,#0x0064
1B48 120000    5870            lcall   _waitms
1B4B           5871   ;        main.c:1195: servo_pick();
1B4B 120000    5872            lcall   _servo_pick
1B4E D003      5873            pop     ar3
1B50 D002      5874            pop     ar2
1B52           5875   ;        main.c:1196: count++;
1B52 0500      5876            inc     _Auto_mode_slave_sloc0_1_0
1B54 E4        5877            clr     a
1B55 B50000    5878            cjne    a,_Auto_mode_slave_sloc0_1_0,L043057?
1B58 0501      5879            inc     (_Auto_mode_slave_sloc0_1_0 + 1)
1B5A           5880   L043057?:
1B5A           5881   ;        main.c:1197: waitms(100);
1B5A 900064    5882            mov     dptr,#0x0064
1B5D C002      5883            push    ar2
1B5F C003      5884            push    ar3
1B61 120000    5885            lcall   _waitms
1B64           5886   ;        main.c:1198: mea_yes = 1;
1B64 904D10    5887            mov     dptr,#_mea_yes
1B67 7401      5888            mov     a,#0x01
1B69 F0        5889            movx    @dptr,a
1B6A           5890   ;        main.c:1199: Move_forward();
1B6A 120000    5891            lcall   _Move_forward
1B6D D003      5892            pop     ar3
1B6F D002      5893            pop     ar2
1B71           5894   L043014?:
1B71           5895   ;        main.c:1202: if(bound == 1){
1B71 BA0140    5896            cjne    r2,#0x01,L043058?
1B74 BB0040    5897            cjne    r3,#0x00,L043058?
1B77 8000      5898            sjmp    L043059?
1B79           5899   L043058?:
1B79 020000    5900            ljmp    L043018?
1B7C           5901   L043059?:
1B7C           5902   ;        main.c:1203: Move_back_ms(500);
1B7C 9001F4    5903            mov     dptr,#0x01F4
1B7F 120000    5904            lcall   _Move_back_ms
1B82           5905   ;        main.c:1204: waitms(100);
1B82 900064    5906            mov     dptr,#0x0064
1B85 120000    5907            lcall   _waitms
1B88           5908   ;        main.c:1205: angle = get_random_90_250();
1B88 120000    5909            lcall   _get_random_90_250
1B8B 858200    5910            mov     __mulint_PARM_2,dpl
1B8E 858301    5911            mov     (__mulint_PARM_2 + 1),dph
1B91           5912   ;        main.c:1206: Right_angle(angle*600/90);
1B91 900258    5913            mov     dptr,#0x0258
1B94 120000    5914            lcall   __mulint
1B97 AA82      5915            mov     r2,dpl
1B99 AB83      5916            mov     r3,dph
1B9B 75005A    5917            mov     __divuint_PARM_2,#0x5A
1B9E E4        5918            clr     a
1B9F F501      5919            mov     (__divuint_PARM_2 + 1),a
1BA1 8A82      5920            mov     dpl,r2
1BA3 8B83      5921            mov     dph,r3
1BA5 120000    5922            lcall   __divuint
1BA8 120000    5923            lcall   _Right_angle
1BAB           5924   ;        main.c:1207: curr_angle = Read_angle() * 1.2;
1BAB 120000    5925            lcall   _Read_angle
1BAE AA82      5926            mov     r2,dpl
1BB0 AB83      5927            mov     r3,dph
1BB2 ACF0      5928            mov     r4,b
1BB4 FD        5929            mov     r5,a
1BB5 C002      5930            push    ar2
1BB7 C003      5931            push    ar3
1BB9 C004      5932            push    ar4
1BBB C005      5933            push    ar5
1BBD 90999A    5934            mov     dptr,#0x999A
1BC0 75F099    5935            mov     b,#0x99
1BC3 743F      5936            mov     a,#0x3F
1BC5 120000    5937            lcall   ___fsmul
1BC8 AA82      5938            mov     r2,dpl
1BCA AB83      5939            mov     r3,dph
1BCC ACF0      5940            mov     r4,b
1BCE FD        5941            mov     r5,a
1BCF E581      5942            mov     a,sp
1BD1 24FC      5943            add     a,#0xfc
1BD3 F581      5944            mov     sp,a
1BD5 904E10    5945            mov     dptr,#_curr_angle
1BD8 EA        5946            mov     a,r2
1BD9 F0        5947            movx    @dptr,a
1BDA A3        5948            inc     dptr
1BDB EB        5949            mov     a,r3
1BDC F0        5950            movx    @dptr,a
1BDD A3        5951            inc     dptr
1BDE EC        5952            mov     a,r4
1BDF F0        5953            movx    @dptr,a
1BE0 A3        5954            inc     dptr
1BE1 ED        5955            mov     a,r5
1BE2 F0        5956            movx    @dptr,a
1BE3 020000    5957            ljmp    L043018?
1BE6           5958   L043020?:
1BE6           5959   ;        main.c:1210: dummy = 0;
1BE6 90D2B0    5960            mov     dptr,#_Auto_mode_slave_dummy_1_230
1BE9 E4        5961            clr     a
1BEA F0        5962            movx    @dptr,a
1BEB A3        5963            inc     dptr
1BEC F0        5964            movx    @dptr,a
1BED           5965   ;        main.c:1211: while(1){
1BED           5966   L043028?:
1BED           5967   ;        main.c:1212: if(RXU1()) {
1BED 120000    5968            lcall   _RXU1
1BF0 5000      5969            jnc     L043028?
1BF2           5970   ;        main.c:1213: c=getchar1();
1BF2 120000    5971            lcall   _getchar1
1BF5 AA82      5972            mov     r2,dpl
1BF7           5973   ;        main.c:1214: if(c=='@') // Master wants slave data
1BF7 BA4050    5974            cjne    r2,#0x40,L043028?
1BFA           5975   ;        main.c:1216: sprintf(buff, "0,00,%04ld,%05d,%03d\n", freq100, weight, (int)curr_angle);
1BFA 904E10    5976            mov     dptr,#_curr_angle
1BFD E0        5977            movx    a,@dptr
1BFE FA        5978            mov     r2,a
1BFF A3        5979            inc     dptr
1C00 E0        5980            movx    a,@dptr
1C01 FB        5981            mov     r3,a
1C02 A3        5982            inc     dptr
1C03 E0        5983            movx    a,@dptr
1C04 FC        5984            mov     r4,a
1C05 A3        5985            inc     dptr
1C06 E0        5986            movx    a,@dptr
1C07 8A82      5987            mov     dpl,r2
1C09 8B83      5988            mov     dph,r3
1C0B 8CF0      5989            mov     b,r4
1C0D 120000    5990            lcall   ___fs2sint
1C10 AA82      5991            mov     r2,dpl
1C12 AB83      5992            mov     r3,dph
1C14 C002      5993            push    ar2
1C16 C003      5994            push    ar3
1C18 904CD0    5995            mov     dptr,#_weight
1C1B E0        5996            movx    a,@dptr
1C1C C0E0      5997            push    acc
1C1E A3        5998            inc     dptr
1C1F E0        5999            movx    a,@dptr
1C20 C0E0      6000            push    acc
1C22 9056A0    6001            mov     dptr,#_freq100
1C25 E0        6002            movx    a,@dptr
1C26 C0E0      6003            push    acc
1C28 A3        6004            inc     dptr
1C29 E0        6005            movx    a,@dptr
1C2A C0E0      6006            push    acc
1C2C A3        6007            inc     dptr
1C2D E0        6008            movx    a,@dptr
1C2E C0E0      6009            push    acc
1C30 A3        6010            inc     dptr
1C31 E0        6011            movx    a,@dptr
1C32 C0E0      6012            push    acc
1C34 7490      6013            mov     a,#__str_10
1C36 C0E0      6014            push    acc
1C38 741D      6015            mov     a,#(__str_10 >> 8)
1C3A C0E0      6016            push    acc
1C3C 7480      6017            mov     a,#0x80
1C3E C0E0      6018            push    acc
1C40 74E0      6019            mov     a,#_buff
1C42 C0E0      6020            push    acc
1C44 7456      6021            mov     a,#(_buff >> 8)
1C46 C0E0      6022            push    acc
1C48 7440      6023            mov     a,#0x40
1C4A C0E0      6024            push    acc
1C4C 120000    6025            lcall   _sprintf
1C4F E581      6026            mov     a,sp
1C51 24F2      6027            add     a,#0xf2
1C53 F581      6028            mov     sp,a
1C55           6029   ;        main.c:1217: dummy++;
1C55 90D2B0    6030            mov     dptr,#_Auto_mode_slave_dummy_1_230
1C58 7401      6031            mov     a,#0x01
1C5A F0        6032            movx    @dptr,a
1C5B E4        6033            clr     a
1C5C A3        6034            inc     dptr
1C5D F0        6035            movx    @dptr,a
1C5E           6036   ;        main.c:1218: waitms(5); 
1C5E 900005    6037            mov     dptr,#0x0005
1C61 120000    6038            lcall   _waitms
1C64           6039   ;        main.c:1219: sendstr1(buff);
1C64 9056E0    6040            mov     dptr,#_buff
1C67 75F040    6041            mov     b,#0x40
1C6A 120000    6042            lcall   _sendstr1
1C6D           6043   ;        main.c:1220: if(dummy = 30) break;
1C6D 90D2B0    6044            mov     dptr,#_Auto_mode_slave_dummy_1_230
1C70 741E      6045            mov     a,#0x1E
1C72 F0        6046            movx    @dptr,a
1C73 E4        6047            clr     a
1C74 A3        6048            inc     dptr
1C75 F0        6049            movx    @dptr,a
1C76 22        6050            ret
1C77           6051   ;------------------------------------------------------------
1C77           6052   ;Allocation info for local variables in function 'Joystick_Control'
1C77           6053   ;------------------------------------------------------------
1C77           6054   ;vy_ptr                    Allocated with name '_Joystick_Control_PARM_2'
1C77           6055   ;vx_ptr                    Allocated to registers r2 r3 r4 
1C77           6056   ;sloc0                     Allocated with name '_Joystick_Control_sloc0_1_0'
1C77           6057   ;sloc1                     Allocated with name '_Joystick_Control_sloc1_1_0'
1C77           6058   ;sloc2                     Allocated with name '_Joystick_Control_sloc2_1_0'
1C77           6059   ;sloc3                     Allocated with name '_Joystick_Control_sloc3_1_0'
1C77           6060   ;sloc4                     Allocated with name '_Joystick_Control_sloc4_1_0'
1C77           6061   ;sloc5                     Allocated with name '_Joystick_Control_sloc5_1_0'
1C77           6062   ;vx                        Allocated with name '_Joystick_Control_vx_1_242'
1C77           6063   ;vy                        Allocated with name '_Joystick_Control_vy_1_242'
1C77           6064   ;vx_error                  Allocated with name '_Joystick_Control_vx_error_1_242'
1C77           6065   ;vy_error                  Allocated with name '_Joystick_Control_vy_error_1_242'
1C77           6066   ;vx_err                    Allocated with name '_Joystick_Control_vx_err_1_242'
1C77           6067   ;vy_err                    Allocated with name '_Joystick_Control_vy_err_1_242'
1C77           6068   ;------------------------------------------------------------
1C77           6069   ;        main.c:1226: float Joystick_Control(int *vx_ptr, int *vy_ptr)
1C77           6070   ;        -----------------------------------------
1C77           6071   ;         function Joystick_Control
1C77           6072   ;        -----------------------------------------
1C77           6073   _Joystick_Control:
1C77           6074   ;        main.c:1230: vx = *vx_ptr; 
1C77 120000    6075            lcall   __gptrget
1C7A FA        6076            mov     r2,a
1C7B A3        6077            inc     dptr
1C7C 120000    6078            lcall   __gptrget
1C7F FB        6079            mov     r3,a
1C80           6080   ;        main.c:1231: vy = *vy_ptr; 
1C80 AC30      6081            mov     r4,_Joystick_Control_PARM_2
1C82 AD31      6082            mov     r5,(_Joystick_Control_PARM_2 + 1)
1C84 AE32      6083            mov     r6,(_Joystick_Control_PARM_2 + 2)
1C86 8C82      6084            mov     dpl,r4
1C88 8D83      6085            mov     dph,r5
1C8A 8EF0      6086            mov     b,r6
1C8C 120000    6087            lcall   __gptrget
1C8F FC        6088            mov     r4,a
1C90 A3        6089            inc     dptr
1C91 120000    6090            lcall   __gptrget
1C94 FD        6091            mov     r5,a
1C95           6092   ;        main.c:1234: raw_angle = Read_angle();
1C95 C002      6093            push    ar2
1C97 C003      6094            push    ar3
1C99 C004      6095            push    ar4
1C9B C005      6096            push    ar5
1C9D 120000    6097            lcall   _Read_angle
1CA0 AE82      6098            mov     r6,dpl
1CA2 AF83      6099            mov     r7,dph
1CA4 A8F0      6100            mov     r0,b
1CA6 F9        6101            mov     r1,a
1CA7 D005      6102            pop     ar5
1CA9 D004      6103            pop     ar4
1CAB D003      6104            pop     ar3
1CAD D002      6105            pop     ar2
1CAF 904DD0    6106            mov     dptr,#_raw_angle
1CB2 EE        6107            mov     a,r6
1CB3 F0        6108            movx    @dptr,a
1CB4 A3        6109            inc     dptr
1CB5 EF        6110            mov     a,r7
1CB6 F0        6111            movx    @dptr,a
1CB7 A3        6112            inc     dptr
1CB8 E8        6113            mov     a,r0
1CB9 F0        6114            movx    @dptr,a
1CBA A3        6115            inc     dptr
1CBB E9        6116            mov     a,r1
1CBC F0        6117            movx    @dptr,a
1CBD           6118   ;        main.c:1237: vx_error = abs(vx-vx_thres)*100/vx_thres; 
1CBD 905020    6119            mov     dptr,#_vx_thres
1CC0 E0        6120            movx    a,@dptr
1CC1 FE        6121            mov     r6,a
1CC2 A3        6122            inc     dptr
1CC3 E0        6123            movx    a,@dptr
1CC4 FF        6124            mov     r7,a
1CC5 EA        6125            mov     a,r2
1CC6 C3        6126            clr     c
1CC7 9E        6127            subb    a,r6
1CC8 F582      6128            mov     dpl,a
1CCA EB        6129            mov     a,r3
1CCB 9F        6130            subb    a,r7
1CCC F583      6131            mov     dph,a
1CCE C002      6132            push    ar2
1CD0 C003      6133            push    ar3
1CD2 C004      6134            push    ar4
1CD4 C005      6135            push    ar5
1CD6 120000    6136            lcall   _abs
1CD9 858200    6137            mov     __mulint_PARM_2,dpl
1CDC 858301    6138            mov     (__mulint_PARM_2 + 1),dph
1CDF 900064    6139            mov     dptr,#0x0064
1CE2 120000    6140            lcall   __mulint
1CE5 AE82      6141            mov     r6,dpl
1CE7 AF83      6142            mov     r7,dph
1CE9 905020    6143            mov     dptr,#_vx_thres
1CEC E0        6144            movx    a,@dptr
1CED F500      6145            mov     __divsint_PARM_2,a
1CEF A3        6146            inc     dptr
1CF0 E0        6147            movx    a,@dptr
1CF1 F501      6148            mov     (__divsint_PARM_2 + 1),a
1CF3 8E82      6149            mov     dpl,r6
1CF5 8F83      6150            mov     dph,r7
1CF7 120000    6151            lcall   __divsint
1CFA E582      6152            mov     a,dpl
1CFC 8583F0    6153            mov     b,dph
1CFF D005      6154            pop     ar5
1D01 D004      6155            pop     ar4
1D03 90D310    6156            mov     dptr,#_Joystick_Control_vx_error_1_242
1D06 F0        6157            movx    @dptr,a
1D07 A3        6158            inc     dptr
1D08 E5F0      6159            mov     a,b
1D0A F0        6160            movx    @dptr,a
1D0B           6161   ;        main.c:1238: vy_error = abs(vy-vy_thres)*100/vy_thres; 
1D0B 904FE0    6162            mov     dptr,#_vy_thres
1D0E E0        6163            movx    a,@dptr
1D0F FE        6164            mov     r6,a
1D10 A3        6165            inc     dptr
1D11 E0        6166            movx    a,@dptr
1D12 FF        6167            mov     r7,a
1D13 EC        6168            mov     a,r4
1D14 C3        6169            clr     c
1D15 9E        6170            subb    a,r6
1D16 F582      6171            mov     dpl,a
1D18 ED        6172            mov     a,r5
1D19 9F        6173            subb    a,r7
1D1A F583      6174            mov     dph,a
1D1C C004      6175            push    ar4
1D1E C005      6176            push    ar5
1D20 120000    6177            lcall   _abs
1D23 858200    6178            mov     __mulint_PARM_2,dpl
1D26 858301    6179            mov     (__mulint_PARM_2 + 1),dph
1D29 900064    6180            mov     dptr,#0x0064
1D2C 120000    6181            lcall   __mulint
1D2F AE82      6182            mov     r6,dpl
1D31 AF83      6183            mov     r7,dph
1D33 904FE0    6184            mov     dptr,#_vy_thres
1D36 E0        6185            movx    a,@dptr
1D37 F550      6186            mov     _Joystick_Control_sloc0_1_0,a
1D39 A3        6187            inc     dptr
1D3A E0        6188            movx    a,@dptr
1D3B F551      6189            mov     (_Joystick_Control_sloc0_1_0 + 1),a
1D3D 855000    6190            mov     __divsint_PARM_2,_Joystick_Control_sloc0_1_0
1D40 855101    6191            mov     (__divsint_PARM_2 + 1),(_Joystick_Control_sloc0_1_0 + 1)
1D43 8E82      6192            mov     dpl,r6
1D45 8F83      6193            mov     dph,r7
1D47 120000    6194            lcall   __divsint
1D4A AE82      6195            mov     r6,dpl
1D4C AF83      6196            mov     r7,dph
1D4E D005      6197            pop     ar5
1D50 D004      6198            pop     ar4
1D52 D003      6199            pop     ar3
1D54 D002      6200            pop     ar2
1D56 90D370    6201            mov     dptr,#_Joystick_Control_vy_error_1_242
1D59 EE        6202            mov     a,r6
1D5A F0        6203            movx    @dptr,a
1D5B A3        6204            inc     dptr
1D5C EF        6205            mov     a,r7
1D5D F0        6206            movx    @dptr,a
1D5E           6207   ;        main.c:1239: vx_err = vx-vx_thres; 
1D5E 905020    6208            mov     dptr,#_vx_thres
1D61 E0        6209            movx    a,@dptr
1D62 F8        6210            mov     r0,a
1D63 A3        6211            inc     dptr
1D64 E0        6212            movx    a,@dptr
1D65 F9        6213            mov     r1,a
1D66 EA        6214            mov     a,r2
1D67 C3        6215            clr     c
1D68 98        6216            subb    a,r0
1D69 FA        6217            mov     r2,a
1D6A EB        6218            mov     a,r3
1D6B 99        6219            subb    a,r1
1D6C FB        6220            mov     r3,a
1D6D 90D3C0    6221            mov     dptr,#_Joystick_Control_vx_err_1_242
1D70 EA        6222            mov     a,r2
1D71 F0        6223            movx    @dptr,a
1D72 A3        6224            inc     dptr
1D73 EB        6225            mov     a,r3
1D74 F0        6226            movx    @dptr,a
1D75           6227   ;        main.c:1240: vy_err = vy-vy_thres; 
1D75 EC        6228            mov     a,r4
1D76 C3        6229            clr     c
1D77 9550      6230            subb    a,_Joystick_Control_sloc0_1_0
1D79 F5A0      6231            mov     _Joystick_Control_sloc1_1_0,a
1D7B ED        6232            mov     a,r5
1D7C 9551      6233            subb    a,(_Joystick_Control_sloc0_1_0 + 1)
1D7E F5A1      6234            mov     (_Joystick_Control_sloc1_1_0 + 1),a
1D80 90D410    6235            mov     dptr,#_Joystick_Control_vy_err_1_242
1D83 E5A0      6236            mov     a,_Joystick_Control_sloc1_1_0
1D85 F0        6237            movx    @dptr,a
1D86 A3        6238            inc     dptr
1D87 E5A1      6239            mov     a,(_Joystick_Control_sloc1_1_0 + 1)
1D89 F0        6240            movx    @dptr,a
1D8A           6241   ;        main.c:1241: pwm_left = 0; 
1D8A 9051A0    6242            mov     dptr,#_pwm_left
1D8D           6243   ;        main.c:1242: pwm_right = 0; 
1D8D E4        6244            clr     a
1D8E F0        6245            movx    @dptr,a
1D8F 905160    6246            mov     dptr,#_pwm_right
1D92 F0        6247            movx    @dptr,a
1D93           6248   ;        main.c:1244: if ((vy_error>5) && (vx_error<5)){
1D93 C3        6249            clr     c
1D94 7405      6250            mov     a,#0x05
1D96 9E        6251            subb    a,r6
1D97 E4        6252            clr     a
1D98 6480      6253            xrl     a,#0x80
1D9A 8FF0      6254            mov     b,r7
1D9C 63F080    6255            xrl     b,#0x80
1D9F 95F0      6256            subb    a,b
1DA1 E4        6257            clr     a
1DA2 33        6258            rlc     a
1DA3 F550      6259            mov     _Joystick_Control_sloc0_1_0,a
1DA5 7000      6260            jnz     L044062?
1DA7 020000    6261            ljmp    L044005?
1DAA           6262   L044062?:
1DAA 90D310    6263            mov     dptr,#_Joystick_Control_vx_error_1_242
1DAD E0        6264            movx    a,@dptr
1DAE F8        6265            mov     r0,a
1DAF A3        6266            inc     dptr
1DB0 E0        6267            movx    a,@dptr
1DB1 F9        6268            mov     r1,a
1DB2 C3        6269            clr     c
1DB3 E8        6270            mov     a,r0
1DB4 9405      6271            subb    a,#0x05
1DB6 E9        6272            mov     a,r1
1DB7 6480      6273            xrl     a,#0x80
1DB9 9480      6274            subb    a,#0x80
1DBB 4000      6275            jc      L044063?
1DBD 020000    6276            ljmp    L044005?
1DC0           6277   L044063?:
1DC0           6278   ;        main.c:1245: pwm_left = vy_error; 
1DC0 C002      6279            push    ar2
1DC2 C003      6280            push    ar3
1DC4 9051A0    6281            mov     dptr,#_pwm_left
1DC7 EE        6282            mov     a,r6
1DC8 F0        6283            movx    @dptr,a
1DC9           6284   ;        main.c:1246: pwm_right = vy_error * pwm_corr; 
1DC9 8E82      6285            mov     dpl,r6
1DCB 8F83      6286            mov     dph,r7
1DCD C004      6287            push    ar4
1DCF C005      6288            push    ar5
1DD1 C006      6289            push    ar6
1DD3 C007      6290            push    ar7
1DD5 120000    6291            lcall   ___sint2fs
1DD8 AA82      6292            mov     r2,dpl
1DDA AB83      6293            mov     r3,dph
1DDC A8F0      6294            mov     r0,b
1DDE F9        6295            mov     r1,a
1DDF 904E50    6296            mov     dptr,#_pwm_corr
1DE2 E0        6297            movx    a,@dptr
1DE3 C0E0      6298            push    acc
1DE5 A3        6299            inc     dptr
1DE6 E0        6300            movx    a,@dptr
1DE7 C0E0      6301            push    acc
1DE9 A3        6302            inc     dptr
1DEA E0        6303            movx    a,@dptr
1DEB C0E0      6304            push    acc
1DED A3        6305            inc     dptr
1DEE E0        6306            movx    a,@dptr
1DEF C0E0      6307            push    acc
1DF1 8A82      6308            mov     dpl,r2
1DF3 8B83      6309            mov     dph,r3
1DF5 88F0      6310            mov     b,r0
1DF7 E9        6311            mov     a,r1
1DF8 120000    6312            lcall   ___fsmul
1DFB AA82      6313            mov     r2,dpl
1DFD AB83      6314            mov     r3,dph
1DFF A8F0      6315            mov     r0,b
1E01 F9        6316            mov     r1,a
1E02 E581      6317            mov     a,sp
1E04 24FC      6318            add     a,#0xfc
1E06 F581      6319            mov     sp,a
1E08 D007      6320            pop     ar7
1E0A D006      6321            pop     ar6
1E0C D005      6322            pop     ar5
1E0E D004      6323            pop     ar4
1E10 8A82      6324            mov     dpl,r2
1E12 8B83      6325            mov     dph,r3
1E14 88F0      6326            mov     b,r0
1E16 E9        6327            mov     a,r1
1E17 C002      6328            push    ar2
1E19 C003      6329            push    ar3
1E1B C004      6330            push    ar4
1E1D C005      6331            push    ar5
1E1F C006      6332            push    ar6
1E21 C007      6333            push    ar7
1E23 120000    6334            lcall   ___fs2uchar
1E26 8582F0    6335            mov     _Joystick_Control_sloc2_1_0,dpl
1E29 D007      6336            pop     ar7
1E2B D006      6337            pop     ar6
1E2D D005      6338            pop     ar5
1E2F D004      6339            pop     ar4
1E31 D003      6340            pop     ar3
1E33 D002      6341            pop     ar2
1E35 905160    6342            mov     dptr,#_pwm_right
1E38 E5F0      6343            mov     a,_Joystick_Control_sloc2_1_0
1E3A F0        6344            movx    @dptr,a
1E3B           6345   ;        main.c:1247: if (vy_err > 0){ //move forward
1E3B C3        6346            clr     c
1E3C E4        6347            clr     a
1E3D 95A0      6348            subb    a,_Joystick_Control_sloc1_1_0
1E3F E4        6349            clr     a
1E40 6480      6350            xrl     a,#0x80
1E42 85A1F0    6351            mov     b,(_Joystick_Control_sloc1_1_0 + 1)
1E45 63F080    6352            xrl     b,#0x80
1E48 95F0      6353            subb    a,b
1E4A D003      6354            pop     ar3
1E4C D002      6355            pop     ar2
1E4E 5000      6356            jnc     L044002?
1E50           6357   ;        main.c:1248: L_motor_dir = 0; 
1E50 905120    6358            mov     dptr,#_L_motor_dir
1E53           6359   ;        main.c:1249: R_motor_dir = 0; 
1E53 E4        6360            clr     a
1E54 F0        6361            movx    @dptr,a
1E55 9050E0    6362            mov     dptr,#_R_motor_dir
1E58 F0        6363            movx    @dptr,a
1E59 8000      6364            sjmp    L044005?
1E5B           6365   L044002?:
1E5B           6366   ;        main.c:1252: L_motor_dir = 1; 
1E5B C002      6367            push    ar2
1E5D C003      6368            push    ar3
1E5F 905120    6369            mov     dptr,#_L_motor_dir
1E62 7401      6370            mov     a,#0x01
1E64 F0        6371            movx    @dptr,a
1E65           6372   ;        main.c:1253: R_motor_dir = 1; 
1E65 9050E0    6373            mov     dptr,#_R_motor_dir
1E68 7401      6374            mov     a,#0x01
1E6A F0        6375            movx    @dptr,a
1E6B           6376   ;        main.c:1254: pwm_right *= 1.05;
1E6B 85F082    6377            mov     dpl,_Joystick_Control_sloc2_1_0
1E6E C004      6378            push    ar4
1E70 C005      6379            push    ar5
1E72 C006      6380            push    ar6
1E74 C007      6381            push    ar7
1E76 120000    6382            lcall   ___uchar2fs
1E79 A882      6383            mov     r0,dpl
1E7B A983      6384            mov     r1,dph
1E7D AAF0      6385            mov     r2,b
1E7F FB        6386            mov     r3,a
1E80 C000      6387            push    ar0
1E82 C001      6388            push    ar1
1E84 C002      6389            push    ar2
1E86 C003      6390            push    ar3
1E88 906666    6391            mov     dptr,#0x6666
1E8B 75F086    6392            mov     b,#0x86
1E8E 743F      6393            mov     a,#0x3F
1E90 120000    6394            lcall   ___fsmul
1E93 AA82      6395            mov     r2,dpl
1E95 AB83      6396            mov     r3,dph
1E97 A8F0      6397            mov     r0,b
1E99 F9        6398            mov     r1,a
1E9A E581      6399            mov     a,sp
1E9C 24FC      6400            add     a,#0xfc
1E9E F581      6401            mov     sp,a
1EA0 D007      6402            pop     ar7
1EA2 D006      6403            pop     ar6
1EA4 D005      6404            pop     ar5
1EA6 D004      6405            pop     ar4
1EA8 8A82      6406            mov     dpl,r2
1EAA 8B83      6407            mov     dph,r3
1EAC 88F0      6408            mov     b,r0
1EAE E9        6409            mov     a,r1
1EAF C002      6410            push    ar2
1EB1 C003      6411            push    ar3
1EB3 C004      6412            push    ar4
1EB5 C005      6413            push    ar5
1EB7 C006      6414            push    ar6
1EB9 C007      6415            push    ar7
1EBB 120000    6416            lcall   ___fs2uchar
1EBE E582      6417            mov     a,dpl
1EC0 D007      6418            pop     ar7
1EC2 D006      6419            pop     ar6
1EC4 D005      6420            pop     ar5
1EC6 D004      6421            pop     ar4
1EC8 D003      6422            pop     ar3
1ECA D002      6423            pop     ar2
1ECC 905160    6424            mov     dptr,#_pwm_right
1ECF F0        6425            movx    @dptr,a
1ED0           6426   ;        main.c:1337: return curr_angle; 
1ED0 D003      6427            pop     ar3
1ED2 D002      6428            pop     ar2
1ED4           6429   ;        main.c:1254: pwm_right *= 1.05;
1ED4           6430   L044005?:
1ED4           6431   ;        main.c:1257: if ((vx_error>5)&&(vy_error<5)){
1ED4 90D310    6432            mov     dptr,#_Joystick_Control_vx_error_1_242
1ED7 E0        6433            movx    a,@dptr
1ED8 F8        6434            mov     r0,a
1ED9 A3        6435            inc     dptr
1EDA E0        6436            movx    a,@dptr
1EDB F9        6437            mov     r1,a
1EDC C3        6438            clr     c
1EDD 7405      6439            mov     a,#0x05
1EDF 98        6440            subb    a,r0
1EE0 E4        6441            clr     a
1EE1 6480      6442            xrl     a,#0x80
1EE3 89F0      6443            mov     b,r1
1EE5 63F080    6444            xrl     b,#0x80
1EE8 95F0      6445            subb    a,b
1EEA E4        6446            clr     a
1EEB 33        6447            rlc     a
1EEC F5F0      6448            mov     _Joystick_Control_sloc2_1_0,a
1EEE 7000      6449            jnz     L044065?
1EF0 020000    6450            ljmp    L044015?
1EF3           6451   L044065?:
1EF3 C3        6452            clr     c
1EF4 EE        6453            mov     a,r6
1EF5 9405      6454            subb    a,#0x05
1EF7 EF        6455            mov     a,r7
1EF8 6480      6456            xrl     a,#0x80
1EFA 9480      6457            subb    a,#0x80
1EFC 4000      6458            jc      L044066?
1EFE 020000    6459            ljmp    L044015?
1F01           6460   L044066?:
1F01           6461   ;        main.c:1258: pwm_left = vx_error; 
1F01 C004      6462            push    ar4
1F03 C005      6463            push    ar5
1F05 9051A0    6464            mov     dptr,#_pwm_left
1F08 E8        6465            mov     a,r0
1F09 F0        6466            movx    @dptr,a
1F0A           6467   ;        main.c:1259: pwm_right = vx_error * pwm_corr; 
1F0A 8882      6468            mov     dpl,r0
1F0C 8983      6469            mov     dph,r1
1F0E C002      6470            push    ar2
1F10 C003      6471            push    ar3
1F12 C000      6472            push    ar0
1F14 C001      6473            push    ar1
1F16 120000    6474            lcall   ___sint2fs
1F19 AE82      6475            mov     r6,dpl
1F1B AF83      6476            mov     r7,dph
1F1D ACF0      6477            mov     r4,b
1F1F FD        6478            mov     r5,a
1F20 904E50    6479            mov     dptr,#_pwm_corr
1F23 E0        6480            movx    a,@dptr
1F24 C0E0      6481            push    acc
1F26 A3        6482            inc     dptr
1F27 E0        6483            movx    a,@dptr
1F28 C0E0      6484            push    acc
1F2A A3        6485            inc     dptr
1F2B E0        6486            movx    a,@dptr
1F2C C0E0      6487            push    acc
1F2E A3        6488            inc     dptr
1F2F E0        6489            movx    a,@dptr
1F30 C0E0      6490            push    acc
1F32 8E82      6491            mov     dpl,r6
1F34 8F83      6492            mov     dph,r7
1F36 8CF0      6493            mov     b,r4
1F38 ED        6494            mov     a,r5
1F39 120000    6495            lcall   ___fsmul
1F3C AC82      6496            mov     r4,dpl
1F3E AD83      6497            mov     r5,dph
1F40 AEF0      6498            mov     r6,b
1F42 FF        6499            mov     r7,a
1F43 E581      6500            mov     a,sp
1F45 24FC      6501            add     a,#0xfc
1F47 F581      6502            mov     sp,a
1F49 D001      6503            pop     ar1
1F4B D000      6504            pop     ar0
1F4D 8C82      6505            mov     dpl,r4
1F4F 8D83      6506            mov     dph,r5
1F51 8EF0      6507            mov     b,r6
1F53 EF        6508            mov     a,r7
1F54 C004      6509            push    ar4
1F56 C005      6510            push    ar5
1F58 C000      6511            push    ar0
1F5A C001      6512            push    ar1
1F5C 120000    6513            lcall   ___fs2uchar
1F5F E582      6514            mov     a,dpl
1F61 D001      6515            pop     ar1
1F63 D000      6516            pop     ar0
1F65 D005      6517            pop     ar5
1F67 D004      6518            pop     ar4
1F69 D003      6519            pop     ar3
1F6B D002      6520            pop     ar2
1F6D 905160    6521            mov     dptr,#_pwm_right
1F70 F0        6522            movx    @dptr,a
1F71           6523   ;        main.c:1260: if (vx_err > 0){ //turn right
1F71 C3        6524            clr     c
1F72 E4        6525            clr     a
1F73 9A        6526            subb    a,r2
1F74 E4        6527            clr     a
1F75 6480      6528            xrl     a,#0x80
1F77 8BF0      6529            mov     b,r3
1F79 63F080    6530            xrl     b,#0x80
1F7C 95F0      6531            subb    a,b
1F7E D005      6532            pop     ar5
1F80 D004      6533            pop     ar4
1F82 4000      6534            jc      L044067?
1F84 020000    6535            ljmp    L044008?
1F87           6536   L044067?:
1F87           6537   ;        main.c:1261: L_motor_dir = 1; 
1F87 C004      6538            push    ar4
1F89 C005      6539            push    ar5
1F8B 905120    6540            mov     dptr,#_L_motor_dir
1F8E 7401      6541            mov     a,#0x01
1F90 F0        6542            movx    @dptr,a
1F91           6543   ;        main.c:1262: R_motor_dir = 0;
1F91 9050E0    6544            mov     dptr,#_R_motor_dir
1F94 E4        6545            clr     a
1F95 F0        6546            movx    @dptr,a
1F96           6547   ;        main.c:1263: curr_angle += angle_diff * 1.45; // TUNE THIS
1F96 C004      6548            push    ar4
1F98 C005      6549            push    ar5
1F9A C000      6550            push    ar0
1F9C C001      6551            push    ar1
1F9E 904D50    6552            mov     dptr,#_angle_diff
1FA1 E0        6553            movx    a,@dptr
1FA2 C0E0      6554            push    acc
1FA4 A3        6555            inc     dptr
1FA5 E0        6556            movx    a,@dptr
1FA6 C0E0      6557            push    acc
1FA8 A3        6558            inc     dptr
1FA9 E0        6559            movx    a,@dptr
1FAA C0E0      6560            push    acc
1FAC A3        6561            inc     dptr
1FAD E0        6562            movx    a,@dptr
1FAE C0E0      6563            push    acc
1FB0 90999A    6564            mov     dptr,#0x999A
1FB3 75F0B9    6565            mov     b,#0xB9
1FB6 743F      6566            mov     a,#0x3F
1FB8 120000    6567            lcall   ___fsmul
1FBB 858240    6568            mov     _Joystick_Control_sloc3_1_0,dpl
1FBE 858341    6569            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
1FC1 85F042    6570            mov     (_Joystick_Control_sloc3_1_0 + 2),b
1FC4 F543      6571            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1FC6 E581      6572            mov     a,sp
1FC8 24FC      6573            add     a,#0xfc
1FCA F581      6574            mov     sp,a
1FCC D001      6575            pop     ar1
1FCE D000      6576            pop     ar0
1FD0 D005      6577            pop     ar5
1FD2 D004      6578            pop     ar4
1FD4 904E10    6579            mov     dptr,#_curr_angle
1FD7 E0        6580            movx    a,@dptr
1FD8 FC        6581            mov     r4,a
1FD9 A3        6582            inc     dptr
1FDA E0        6583            movx    a,@dptr
1FDB FD        6584            mov     r5,a
1FDC A3        6585            inc     dptr
1FDD E0        6586            movx    a,@dptr
1FDE FA        6587            mov     r2,a
1FDF A3        6588            inc     dptr
1FE0 E0        6589            movx    a,@dptr
1FE1 FB        6590            mov     r3,a
1FE2 C000      6591            push    ar0
1FE4 C001      6592            push    ar1
1FE6 C040      6593            push    _Joystick_Control_sloc3_1_0
1FE8 C041      6594            push    (_Joystick_Control_sloc3_1_0 + 1)
1FEA C042      6595            push    (_Joystick_Control_sloc3_1_0 + 2)
1FEC C043      6596            push    (_Joystick_Control_sloc3_1_0 + 3)
1FEE 8C82      6597            mov     dpl,r4
1FF0 8D83      6598            mov     dph,r5
1FF2 8AF0      6599            mov     b,r2
1FF4 EB        6600            mov     a,r3
1FF5 120000    6601            lcall   ___fsadd
1FF8 AA82      6602            mov     r2,dpl
1FFA AB83      6603            mov     r3,dph
1FFC ACF0      6604            mov     r4,b
1FFE FD        6605            mov     r5,a
1FFF E581      6606            mov     a,sp
2001 24FC      6607            add     a,#0xfc
2003 F581      6608            mov     sp,a
2005 D001      6609            pop     ar1
2007 D000      6610            pop     ar0
2009 904E10    6611            mov     dptr,#_curr_angle
200C EA        6612            mov     a,r2
200D F0        6613            movx    @dptr,a
200E A3        6614            inc     dptr
200F EB        6615            mov     a,r3
2010 F0        6616            movx    @dptr,a
2011 A3        6617            inc     dptr
2012 EC        6618            mov     a,r4
2013 F0        6619            movx    @dptr,a
2014 A3        6620            inc     dptr
2015 ED        6621            mov     a,r5
2016 F0        6622            movx    @dptr,a
2017 D005      6623            pop     ar5
2019 D004      6624            pop     ar4
201B 020000    6625            ljmp    L044009?
201E           6626   L044008?:
201E           6627   ;        main.c:1266: L_motor_dir = 0; 
201E C004      6628            push    ar4
2020 C005      6629            push    ar5
2022 905120    6630            mov     dptr,#_L_motor_dir
2025 E4        6631            clr     a
2026 F0        6632            movx    @dptr,a
2027           6633   ;        main.c:1267: R_motor_dir = 1; 
2027 9050E0    6634            mov     dptr,#_R_motor_dir
202A 7401      6635            mov     a,#0x01
202C F0        6636            movx    @dptr,a
202D           6637   ;        main.c:1268: curr_angle -= angle_diff * 1.4; // TUNE THIS
202D C004      6638            push    ar4
202F C005      6639            push    ar5
2031 C000      6640            push    ar0
2033 C001      6641            push    ar1
2035 904D50    6642            mov     dptr,#_angle_diff
2038 E0        6643            movx    a,@dptr
2039 C0E0      6644            push    acc
203B A3        6645            inc     dptr
203C E0        6646            movx    a,@dptr
203D C0E0      6647            push    acc
203F A3        6648            inc     dptr
2040 E0        6649            movx    a,@dptr
2041 C0E0      6650            push    acc
2043 A3        6651            inc     dptr
2044 E0        6652            movx    a,@dptr
2045 C0E0      6653            push    acc
2047 903333    6654            mov     dptr,#0x3333
204A 75F0B3    6655            mov     b,#0xB3
204D 743F      6656            mov     a,#0x3F
204F 120000    6657            lcall   ___fsmul
2052 858240    6658            mov     _Joystick_Control_sloc3_1_0,dpl
2055 858341    6659            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
2058 85F042    6660            mov     (_Joystick_Control_sloc3_1_0 + 2),b
205B F543      6661            mov     (_Joystick_Control_sloc3_1_0 + 3),a
205D E581      6662            mov     a,sp
205F 24FC      6663            add     a,#0xfc
2061 F581      6664            mov     sp,a
2063 D001      6665            pop     ar1
2065 D000      6666            pop     ar0
2067 D005      6667            pop     ar5
2069 D004      6668            pop     ar4
206B 904E10    6669            mov     dptr,#_curr_angle
206E E0        6670            movx    a,@dptr
206F FC        6671            mov     r4,a
2070 A3        6672            inc     dptr
2071 E0        6673            movx    a,@dptr
2072 FD        6674            mov     r5,a
2073 A3        6675            inc     dptr
2074 E0        6676            movx    a,@dptr
2075 FA        6677            mov     r2,a
2076 A3        6678            inc     dptr
2077 E0        6679            movx    a,@dptr
2078 FB        6680            mov     r3,a
2079 C000      6681            push    ar0
207B C001      6682            push    ar1
207D C040      6683            push    _Joystick_Control_sloc3_1_0
207F C041      6684            push    (_Joystick_Control_sloc3_1_0 + 1)
2081 C042      6685            push    (_Joystick_Control_sloc3_1_0 + 2)
2083 C043      6686            push    (_Joystick_Control_sloc3_1_0 + 3)
2085 8C82      6687            mov     dpl,r4
2087 8D83      6688            mov     dph,r5
2089 8AF0      6689            mov     b,r2
208B EB        6690            mov     a,r3
208C 120000    6691            lcall   ___fssub
208F AA82      6692            mov     r2,dpl
2091 AB83      6693            mov     r3,dph
2093 ACF0      6694            mov     r4,b
2095 FD        6695            mov     r5,a
2096 E581      6696            mov     a,sp
2098 24FC      6697            add     a,#0xfc
209A F581      6698            mov     sp,a
209C D001      6699            pop     ar1
209E D000      6700            pop     ar0
20A0 904E10    6701            mov     dptr,#_curr_angle
20A3 EA        6702            mov     a,r2
20A4 F0        6703            movx    @dptr,a
20A5 A3        6704            inc     dptr
20A6 EB        6705            mov     a,r3
20A7 F0        6706            movx    @dptr,a
20A8 A3        6707            inc     dptr
20A9 EC        6708            mov     a,r4
20AA F0        6709            movx    @dptr,a
20AB A3        6710            inc     dptr
20AC ED        6711            mov     a,r5
20AD F0        6712            movx    @dptr,a
20AE           6713   ;        main.c:1337: return curr_angle; 
20AE D005      6714            pop     ar5
20B0 D004      6715            pop     ar4
20B2           6716   ;        main.c:1268: curr_angle -= angle_diff * 1.4; // TUNE THIS
20B2           6717   L044009?:
20B2           6718   ;        main.c:1270: if (curr_angle > 360.0) curr_angle -= 360.0; 
20B2 904E10    6719            mov     dptr,#_curr_angle
20B5 E0        6720            movx    a,@dptr
20B6 F540      6721            mov     _Joystick_Control_sloc3_1_0,a
20B8 A3        6722            inc     dptr
20B9 E0        6723            movx    a,@dptr
20BA F541      6724            mov     (_Joystick_Control_sloc3_1_0 + 1),a
20BC A3        6725            inc     dptr
20BD E0        6726            movx    a,@dptr
20BE F542      6727            mov     (_Joystick_Control_sloc3_1_0 + 2),a
20C0 A3        6728            inc     dptr
20C1 E0        6729            movx    a,@dptr
20C2 F543      6730            mov     (_Joystick_Control_sloc3_1_0 + 3),a
20C4 C004      6731            push    ar4
20C6 C005      6732            push    ar5
20C8 C000      6733            push    ar0
20CA C001      6734            push    ar1
20CC E4        6735            clr     a
20CD C0E0      6736            push    acc
20CF C0E0      6737            push    acc
20D1 74B4      6738            mov     a,#0xB4
20D3 C0E0      6739            push    acc
20D5 7443      6740            mov     a,#0x43
20D7 C0E0      6741            push    acc
20D9 854082    6742            mov     dpl,_Joystick_Control_sloc3_1_0
20DC 854183    6743            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
20DF 8542F0    6744            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
20E2 E543      6745            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
20E4 120000    6746            lcall   ___fsgt
20E7 AA82      6747            mov     r2,dpl
20E9 E581      6748            mov     a,sp
20EB 24FC      6749            add     a,#0xfc
20ED F581      6750            mov     sp,a
20EF D001      6751            pop     ar1
20F1 D000      6752            pop     ar0
20F3 D005      6753            pop     ar5
20F5 D004      6754            pop     ar4
20F7 EA        6755            mov     a,r2
20F8 6000      6756            jz      L044011?
20FA C004      6757            push    ar4
20FC C005      6758            push    ar5
20FE C000      6759            push    ar0
2100 C001      6760            push    ar1
2102 E4        6761            clr     a
2103 C0E0      6762            push    acc
2105 C0E0      6763            push    acc
2107 74B4      6764            mov     a,#0xB4
2109 C0E0      6765            push    acc
210B 7443      6766            mov     a,#0x43
210D C0E0      6767            push    acc
210F 854082    6768            mov     dpl,_Joystick_Control_sloc3_1_0
2112 854183    6769            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
2115 8542F0    6770            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
2118 E543      6771            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
211A 120000    6772            lcall   ___fssub
211D AA82      6773            mov     r2,dpl
211F AB83      6774            mov     r3,dph
2121 AEF0      6775            mov     r6,b
2123 FF        6776            mov     r7,a
2124 E581      6777            mov     a,sp
2126 24FC      6778            add     a,#0xfc
2128 F581      6779            mov     sp,a
212A D001      6780            pop     ar1
212C D000      6781            pop     ar0
212E D005      6782            pop     ar5
2130 D004      6783            pop     ar4
2132 904E10    6784            mov     dptr,#_curr_angle
2135 EA        6785            mov     a,r2
2136 F0        6786            movx    @dptr,a
2137 A3        6787            inc     dptr
2138 EB        6788            mov     a,r3
2139 F0        6789            movx    @dptr,a
213A A3        6790            inc     dptr
213B EE        6791            mov     a,r6
213C F0        6792            movx    @dptr,a
213D A3        6793            inc     dptr
213E EF        6794            mov     a,r7
213F F0        6795            movx    @dptr,a
2140           6796   L044011?:
2140           6797   ;        main.c:1271: if (curr_angle < 0.0) curr_angle += 360.0; 
2140 904E10    6798            mov     dptr,#_curr_angle
2143 E0        6799            movx    a,@dptr
2144 F540      6800            mov     _Joystick_Control_sloc3_1_0,a
2146 A3        6801            inc     dptr
2147 E0        6802            movx    a,@dptr
2148 F541      6803            mov     (_Joystick_Control_sloc3_1_0 + 1),a
214A A3        6804            inc     dptr
214B E0        6805            movx    a,@dptr
214C F542      6806            mov     (_Joystick_Control_sloc3_1_0 + 2),a
214E A3        6807            inc     dptr
214F E0        6808            movx    a,@dptr
2150 F543      6809            mov     (_Joystick_Control_sloc3_1_0 + 3),a
2152 C004      6810            push    ar4
2154 C005      6811            push    ar5
2156 C000      6812            push    ar0
2158 C001      6813            push    ar1
215A E4        6814            clr     a
215B C0E0      6815            push    acc
215D C0E0      6816            push    acc
215F C0E0      6817            push    acc
2161 C0E0      6818            push    acc
2163 854082    6819            mov     dpl,_Joystick_Control_sloc3_1_0
2166 854183    6820            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
2169 8542F0    6821            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
216C E543      6822            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
216E 120000    6823            lcall   ___fslt
2171 AA82      6824            mov     r2,dpl
2173 E581      6825            mov     a,sp
2175 24FC      6826            add     a,#0xfc
2177 F581      6827            mov     sp,a
2179 D001      6828            pop     ar1
217B D000      6829            pop     ar0
217D D005      6830            pop     ar5
217F D004      6831            pop     ar4
2181 EA        6832            mov     a,r2
2182 6000      6833            jz      L044015?
2184 C004      6834            push    ar4
2186 C005      6835            push    ar5
2188 C000      6836            push    ar0
218A C001      6837            push    ar1
218C E4        6838            clr     a
218D C0E0      6839            push    acc
218F C0E0      6840            push    acc
2191 74B4      6841            mov     a,#0xB4
2193 C0E0      6842            push    acc
2195 7443      6843            mov     a,#0x43
2197 C0E0      6844            push    acc
2199 854082    6845            mov     dpl,_Joystick_Control_sloc3_1_0
219C 854183    6846            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
219F 8542F0    6847            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
21A2 E543      6848            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
21A4 120000    6849            lcall   ___fsadd
21A7 AA82      6850            mov     r2,dpl
21A9 AB83      6851            mov     r3,dph
21AB AEF0      6852            mov     r6,b
21AD FF        6853            mov     r7,a
21AE E581      6854            mov     a,sp
21B0 24FC      6855            add     a,#0xfc
21B2 F581      6856            mov     sp,a
21B4 D001      6857            pop     ar1
21B6 D000      6858            pop     ar0
21B8 D005      6859            pop     ar5
21BA D004      6860            pop     ar4
21BC 904E10    6861            mov     dptr,#_curr_angle
21BF EA        6862            mov     a,r2
21C0 F0        6863            movx    @dptr,a
21C1 A3        6864            inc     dptr
21C2 EB        6865            mov     a,r3
21C3 F0        6866            movx    @dptr,a
21C4 A3        6867            inc     dptr
21C5 EE        6868            mov     a,r6
21C6 F0        6869            movx    @dptr,a
21C7 A3        6870            inc     dptr
21C8 EF        6871            mov     a,r7
21C9 F0        6872            movx    @dptr,a
21CA           6873   L044015?:
21CA           6874   ;        main.c:1273: if ((vx_error>5)&&(vy_error)>5){
21CA E5F0      6875            mov     a,_Joystick_Control_sloc2_1_0
21CC 7000      6876            jnz     L044070?
21CE 020000    6877            ljmp    L044040?
21D1           6878   L044070?:
21D1 E550      6879            mov     a,_Joystick_Control_sloc0_1_0
21D3 7000      6880            jnz     L044071?
21D5 020000    6881            ljmp    L044040?
21D8           6882   L044071?:
21D8           6883   ;        main.c:1275: angle_diff = fabsf(raw_angle - last_raw_angle);
21D8 904DD0    6884            mov     dptr,#_raw_angle
21DB E0        6885            movx    a,@dptr
21DC FA        6886            mov     r2,a
21DD A3        6887            inc     dptr
21DE E0        6888            movx    a,@dptr
21DF FB        6889            mov     r3,a
21E0 A3        6890            inc     dptr
21E1 E0        6891            movx    a,@dptr
21E2 FE        6892            mov     r6,a
21E3 A3        6893            inc     dptr
21E4 E0        6894            movx    a,@dptr
21E5 FF        6895            mov     r7,a
21E6 C004      6896            push    ar4
21E8 C005      6897            push    ar5
21EA C000      6898            push    ar0
21EC C001      6899            push    ar1
21EE 904D90    6900            mov     dptr,#_last_raw_angle
21F1 E0        6901            movx    a,@dptr
21F2 C0E0      6902            push    acc
21F4 A3        6903            inc     dptr
21F5 E0        6904            movx    a,@dptr
21F6 C0E0      6905            push    acc
21F8 A3        6906            inc     dptr
21F9 E0        6907            movx    a,@dptr
21FA C0E0      6908            push    acc
21FC A3        6909            inc     dptr
21FD E0        6910            movx    a,@dptr
21FE C0E0      6911            push    acc
2200 8A82      6912            mov     dpl,r2
2202 8B83      6913            mov     dph,r3
2204 8EF0      6914            mov     b,r6
2206 EF        6915            mov     a,r7
2207 120000    6916            lcall   ___fssub
220A AA82      6917            mov     r2,dpl
220C AB83      6918            mov     r3,dph
220E AEF0      6919            mov     r6,b
2210 FF        6920            mov     r7,a
2211 E581      6921            mov     a,sp
2213 24FC      6922            add     a,#0xfc
2215 F581      6923            mov     sp,a
2217 8A82      6924            mov     dpl,r2
2219 8B83      6925            mov     dph,r3
221B 8EF0      6926            mov     b,r6
221D EF        6927            mov     a,r7
221E 120000    6928            lcall   _fabsf
2221 8582E0    6929            mov     _Joystick_Control_sloc5_1_0,dpl
2224 8583E1    6930            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
2227 85F0E2    6931            mov     (_Joystick_Control_sloc5_1_0 + 2),b
222A F5E3      6932            mov     (_Joystick_Control_sloc5_1_0 + 3),a
222C D001      6933            pop     ar1
222E D000      6934            pop     ar0
2230 D005      6935            pop     ar5
2232 D004      6936            pop     ar4
2234 904D50    6937            mov     dptr,#_angle_diff
2237 E5E0      6938            mov     a,_Joystick_Control_sloc5_1_0
2239 F0        6939            movx    @dptr,a
223A A3        6940            inc     dptr
223B E5E1      6941            mov     a,(_Joystick_Control_sloc5_1_0 + 1)
223D F0        6942            movx    @dptr,a
223E A3        6943            inc     dptr
223F E5E2      6944            mov     a,(_Joystick_Control_sloc5_1_0 + 2)
2241 F0        6945            movx    @dptr,a
2242 A3        6946            inc     dptr
2243 E5E3      6947            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2245 F0        6948            movx    @dptr,a
2246           6949   ;        main.c:1276: if (vy_err>0){
2246 90D410    6950            mov     dptr,#_Joystick_Control_vy_err_1_242
2249 E0        6951            movx    a,@dptr
224A F540      6952            mov     _Joystick_Control_sloc3_1_0,a
224C A3        6953            inc     dptr
224D E0        6954            movx    a,@dptr
224E F541      6955            mov     (_Joystick_Control_sloc3_1_0 + 1),a
2250 C3        6956            clr     c
2251 E4        6957            clr     a
2252 9540      6958            subb    a,_Joystick_Control_sloc3_1_0
2254 E4        6959            clr     a
2255 6480      6960            xrl     a,#0x80
2257 8541F0    6961            mov     b,(_Joystick_Control_sloc3_1_0 + 1)
225A 63F080    6962            xrl     b,#0x80
225D 95F0      6963            subb    a,b
225F 4000      6964            jc      L044072?
2261 020000    6965            ljmp    L044027?
2264           6966   L044072?:
2264           6967   ;        main.c:1277: L_motor_dir = 0; 
2264 905120    6968            mov     dptr,#_L_motor_dir
2267           6969   ;        main.c:1278: R_motor_dir = 0; 
2267 E4        6970            clr     a
2268 F0        6971            movx    @dptr,a
2269 9050E0    6972            mov     dptr,#_R_motor_dir
226C F0        6973            movx    @dptr,a
226D           6974   ;        main.c:1280: if (vx_err>0){
226D 90D3C0    6975            mov     dptr,#_Joystick_Control_vx_err_1_242
2270 E0        6976            movx    a,@dptr
2271 FA        6977            mov     r2,a
2272 A3        6978            inc     dptr
2273 E0        6979            movx    a,@dptr
2274 FB        6980            mov     r3,a
2275 C3        6981            clr     c
2276 E4        6982            clr     a
2277 9A        6983            subb    a,r2
2278 E4        6984            clr     a
2279 6480      6985            xrl     a,#0x80
227B 8BF0      6986            mov     b,r3
227D 63F080    6987            xrl     b,#0x80
2280 95F0      6988            subb    a,b
2282 4000      6989            jc      L044073?
2284 020000    6990            ljmp    L044024?
2287           6991   L044073?:
2287           6992   ;        main.c:1282: if (vy*100<=vy_thres*100/2){
2287 8C00      6993            mov     __mulint_PARM_2,r4
2289 8D01      6994            mov     (__mulint_PARM_2 + 1),r5
228B 900064    6995            mov     dptr,#0x0064
228E C004      6996            push    ar4
2290 C005      6997            push    ar5
2292 C000      6998            push    ar0
2294 C001      6999            push    ar1
2296 120000    7000            lcall   __mulint
2299 AA82      7001            mov     r2,dpl
229B AB83      7002            mov     r3,dph
229D D001      7003            pop     ar1
229F D000      7004            pop     ar0
22A1 D005      7005            pop     ar5
22A3 D004      7006            pop     ar4
22A5 904FE0    7007            mov     dptr,#_vy_thres
22A8 E0        7008            movx    a,@dptr
22A9 F500      7009            mov     __mulint_PARM_2,a
22AB A3        7010            inc     dptr
22AC E0        7011            movx    a,@dptr
22AD F501      7012            mov     (__mulint_PARM_2 + 1),a
22AF 900064    7013            mov     dptr,#0x0064
22B2 C002      7014            push    ar2
22B4 C003      7015            push    ar3
22B6 C004      7016            push    ar4
22B8 C005      7017            push    ar5
22BA C000      7018            push    ar0
22BC C001      7019            push    ar1
22BE 120000    7020            lcall   __mulint
22C1 AE82      7021            mov     r6,dpl
22C3 AF83      7022            mov     r7,dph
22C5 750002    7023            mov     __divsint_PARM_2,#0x02
22C8 E4        7024            clr     a
22C9 F501      7025            mov     (__divsint_PARM_2 + 1),a
22CB 8E82      7026            mov     dpl,r6
22CD 8F83      7027            mov     dph,r7
22CF 120000    7028            lcall   __divsint
22D2 AE82      7029            mov     r6,dpl
22D4 AF83      7030            mov     r7,dph
22D6 D001      7031            pop     ar1
22D8 D000      7032            pop     ar0
22DA D005      7033            pop     ar5
22DC D004      7034            pop     ar4
22DE D003      7035            pop     ar3
22E0 D002      7036            pop     ar2
22E2 C3        7037            clr     c
22E3 EE        7038            mov     a,r6
22E4 9A        7039            subb    a,r2
22E5 EF        7040            mov     a,r7
22E6 6480      7041            xrl     a,#0x80
22E8 8BF0      7042            mov     b,r3
22EA 63F080    7043            xrl     b,#0x80
22ED 95F0      7044            subb    a,b
22EF 5000      7045            jnc     L044074?
22F1 020000    7046            ljmp    L044018?
22F4           7047   L044074?:
22F4           7048   ;        main.c:1283: pwm_left = vy_error; 
22F4 90D370    7049            mov     dptr,#_Joystick_Control_vy_error_1_242
22F7 E0        7050            movx    a,@dptr
22F8 F5A0      7051            mov     _Joystick_Control_sloc1_1_0,a
22FA A3        7052            inc     dptr
22FB E0        7053            movx    a,@dptr
22FC F5A1      7054            mov     (_Joystick_Control_sloc1_1_0 + 1),a
22FE 9051A0    7055            mov     dptr,#_pwm_left
2301 E5A0      7056            mov     a,_Joystick_Control_sloc1_1_0
2303 F0        7057            movx    @dptr,a
2304           7058   ;        main.c:1284: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
2304 904E50    7059            mov     dptr,#_pwm_corr
2307 E0        7060            movx    a,@dptr
2308 F590      7061            mov     _Joystick_Control_sloc4_1_0,a
230A A3        7062            inc     dptr
230B E0        7063            movx    a,@dptr
230C F591      7064            mov     (_Joystick_Control_sloc4_1_0 + 1),a
230E A3        7065            inc     dptr
230F E0        7066            movx    a,@dptr
2310 F592      7067            mov     (_Joystick_Control_sloc4_1_0 + 2),a
2312 A3        7068            inc     dptr
2313 E0        7069            movx    a,@dptr
2314 F593      7070            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2316 85A082    7071            mov     dpl,_Joystick_Control_sloc1_1_0
2319 85A183    7072            mov     dph,(_Joystick_Control_sloc1_1_0 + 1)
231C C004      7073            push    ar4
231E C005      7074            push    ar5
2320 C000      7075            push    ar0
2322 C001      7076            push    ar1
2324 120000    7077            lcall   ___sint2fs
2327 AA82      7078            mov     r2,dpl
2329 AB83      7079            mov     r3,dph
232B AEF0      7080            mov     r6,b
232D FF        7081            mov     r7,a
232E C002      7082            push    ar2
2330 C003      7083            push    ar3
2332 C006      7084            push    ar6
2334 C007      7085            push    ar7
2336 859082    7086            mov     dpl,_Joystick_Control_sloc4_1_0
2339 859183    7087            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
233C 8592F0    7088            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
233F E593      7089            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
2341 120000    7090            lcall   ___fsmul
2344 AA82      7091            mov     r2,dpl
2346 AB83      7092            mov     r3,dph
2348 AEF0      7093            mov     r6,b
234A FF        7094            mov     r7,a
234B E581      7095            mov     a,sp
234D 24FC      7096            add     a,#0xfc
234F F581      7097            mov     sp,a
2351 C002      7098            push    ar2
2353 C003      7099            push    ar3
2355 C006      7100            push    ar6
2357 C007      7101            push    ar7
2359 900000    7102            mov     dptr,#0x0000
235C 75F0C8    7103            mov     b,#0xC8
235F 7442      7104            mov     a,#0x42
2361 120000    7105            lcall   ___fsmul
2364 858290    7106            mov     _Joystick_Control_sloc4_1_0,dpl
2367 858391    7107            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
236A 85F092    7108            mov     (_Joystick_Control_sloc4_1_0 + 2),b
236D F593      7109            mov     (_Joystick_Control_sloc4_1_0 + 3),a
236F E581      7110            mov     a,sp
2371 24FC      7111            add     a,#0xfc
2373 F581      7112            mov     sp,a
2375 D001      7113            pop     ar1
2377 D000      7114            pop     ar0
2379 E5A0      7115            mov     a,_Joystick_Control_sloc1_1_0
237B 28        7116            add     a,r0
237C F582      7117            mov     dpl,a
237E E5A1      7118            mov     a,(_Joystick_Control_sloc1_1_0 + 1)
2380 39        7119            addc    a,r1
2381 F583      7120            mov     dph,a
2383 C000      7121            push    ar0
2385 C001      7122            push    ar1
2387 120000    7123            lcall   ___sint2fs
238A AA82      7124            mov     r2,dpl
238C AB83      7125            mov     r3,dph
238E AEF0      7126            mov     r6,b
2390 FF        7127            mov     r7,a
2391 C002      7128            push    ar2
2393 C003      7129            push    ar3
2395 C006      7130            push    ar6
2397 C007      7131            push    ar7
2399 859082    7132            mov     dpl,_Joystick_Control_sloc4_1_0
239C 859183    7133            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
239F 8592F0    7134            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
23A2 E593      7135            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
23A4 120000    7136            lcall   ___fsdiv
23A7 AA82      7137            mov     r2,dpl
23A9 AB83      7138            mov     r3,dph
23AB AEF0      7139            mov     r6,b
23AD FF        7140            mov     r7,a
23AE E581      7141            mov     a,sp
23B0 24FC      7142            add     a,#0xfc
23B2 F581      7143            mov     sp,a
23B4 8A82      7144            mov     dpl,r2
23B6 8B83      7145            mov     dph,r3
23B8 8EF0      7146            mov     b,r6
23BA EF        7147            mov     a,r7
23BB 120000    7148            lcall   ___fs2uchar
23BE E582      7149            mov     a,dpl
23C0 D001      7150            pop     ar1
23C2 D000      7151            pop     ar0
23C4 D005      7152            pop     ar5
23C6 D004      7153            pop     ar4
23C8 905160    7154            mov     dptr,#_pwm_right
23CB F0        7155            movx    @dptr,a
23CC 020000    7156            ljmp    L044019?
23CF           7157   L044018?:
23CF           7158   ;        main.c:1287: pwm_left = vx_error; 
23CF 9051A0    7159            mov     dptr,#_pwm_left
23D2 E8        7160            mov     a,r0
23D3 F0        7161            movx    @dptr,a
23D4           7162   ;        main.c:1288: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
23D4 904E50    7163            mov     dptr,#_pwm_corr
23D7 E0        7164            movx    a,@dptr
23D8 F590      7165            mov     _Joystick_Control_sloc4_1_0,a
23DA A3        7166            inc     dptr
23DB E0        7167            movx    a,@dptr
23DC F591      7168            mov     (_Joystick_Control_sloc4_1_0 + 1),a
23DE A3        7169            inc     dptr
23DF E0        7170            movx    a,@dptr
23E0 F592      7171            mov     (_Joystick_Control_sloc4_1_0 + 2),a
23E2 A3        7172            inc     dptr
23E3 E0        7173            movx    a,@dptr
23E4 F593      7174            mov     (_Joystick_Control_sloc4_1_0 + 3),a
23E6 8882      7175            mov     dpl,r0
23E8 8983      7176            mov     dph,r1
23EA C004      7177            push    ar4
23EC C005      7178            push    ar5
23EE C000      7179            push    ar0
23F0 C001      7180            push    ar1
23F2 120000    7181            lcall   ___sint2fs
23F5 AA82      7182            mov     r2,dpl
23F7 AB83      7183            mov     r3,dph
23F9 AEF0      7184            mov     r6,b
23FB FF        7185            mov     r7,a
23FC C002      7186            push    ar2
23FE C003      7187            push    ar3
2400 C006      7188            push    ar6
2402 C007      7189            push    ar7
2404 859082    7190            mov     dpl,_Joystick_Control_sloc4_1_0
2407 859183    7191            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
240A 8592F0    7192            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
240D E593      7193            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
240F 120000    7194            lcall   ___fsmul
2412 AA82      7195            mov     r2,dpl
2414 AB83      7196            mov     r3,dph
2416 AEF0      7197            mov     r6,b
2418 FF        7198            mov     r7,a
2419 E581      7199            mov     a,sp
241B 24FC      7200            add     a,#0xfc
241D F581      7201            mov     sp,a
241F C002      7202            push    ar2
2421 C003      7203            push    ar3
2423 C006      7204            push    ar6
2425 C007      7205            push    ar7
2427 900000    7206            mov     dptr,#0x0000
242A 75F0C8    7207            mov     b,#0xC8
242D 7442      7208            mov     a,#0x42
242F 120000    7209            lcall   ___fsmul
2432 858290    7210            mov     _Joystick_Control_sloc4_1_0,dpl
2435 858391    7211            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
2438 85F092    7212            mov     (_Joystick_Control_sloc4_1_0 + 2),b
243B F593      7213            mov     (_Joystick_Control_sloc4_1_0 + 3),a
243D E581      7214            mov     a,sp
243F 24FC      7215            add     a,#0xfc
2441 F581      7216            mov     sp,a
2443 D001      7217            pop     ar1
2445 D000      7218            pop     ar0
2447 90D370    7219            mov     dptr,#_Joystick_Control_vy_error_1_242
244A E0        7220            movx    a,@dptr
244B FA        7221            mov     r2,a
244C A3        7222            inc     dptr
244D E0        7223            movx    a,@dptr
244E FB        7224            mov     r3,a
244F EA        7225            mov     a,r2
2450 28        7226            add     a,r0
2451 F582      7227            mov     dpl,a
2453 EB        7228            mov     a,r3
2454 39        7229            addc    a,r1
2455 F583      7230            mov     dph,a
2457 C000      7231            push    ar0
2459 C001      7232            push    ar1
245B 120000    7233            lcall   ___sint2fs
245E AA82      7234            mov     r2,dpl
2460 AB83      7235            mov     r3,dph
2462 AEF0      7236            mov     r6,b
2464 FF        7237            mov     r7,a
2465 C002      7238            push    ar2
2467 C003      7239            push    ar3
2469 C006      7240            push    ar6
246B C007      7241            push    ar7
246D 859082    7242            mov     dpl,_Joystick_Control_sloc4_1_0
2470 859183    7243            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
2473 8592F0    7244            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
2476 E593      7245            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
2478 120000    7246            lcall   ___fsdiv
247B AA82      7247            mov     r2,dpl
247D AB83      7248            mov     r3,dph
247F AEF0      7249            mov     r6,b
2481 FF        7250            mov     r7,a
2482 E581      7251            mov     a,sp
2484 24FC      7252            add     a,#0xfc
2486 F581      7253            mov     sp,a
2488 8A82      7254            mov     dpl,r2
248A 8B83      7255            mov     dph,r3
248C 8EF0      7256            mov     b,r6
248E EF        7257            mov     a,r7
248F 120000    7258            lcall   ___fs2uchar
2492 E582      7259            mov     a,dpl
2494 D001      7260            pop     ar1
2496 D000      7261            pop     ar0
2498 D005      7262            pop     ar5
249A D004      7263            pop     ar4
249C 905160    7264            mov     dptr,#_pwm_right
249F F0        7265            movx    @dptr,a
24A0           7266   ;        main.c:1337: return curr_angle; 
24A0           7267   ;        main.c:1288: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
24A0           7268   L044019?:
24A0           7269   ;        main.c:1290: curr_angle += angle_diff * 1.5; // TUNE THIS 
24A0 C004      7270            push    ar4
24A2 C005      7271            push    ar5
24A4 C004      7272            push    ar4
24A6 C005      7273            push    ar5
24A8 C000      7274            push    ar0
24AA C001      7275            push    ar1
24AC C0E0      7276            push    _Joystick_Control_sloc5_1_0
24AE C0E1      7277            push    (_Joystick_Control_sloc5_1_0 + 1)
24B0 C0E2      7278            push    (_Joystick_Control_sloc5_1_0 + 2)
24B2 C0E3      7279            push    (_Joystick_Control_sloc5_1_0 + 3)
24B4 900000    7280            mov     dptr,#0x0000
24B7 75F0C0    7281            mov     b,#0xC0
24BA 743F      7282            mov     a,#0x3F
24BC 120000    7283            lcall   ___fsmul
24BF 858290    7284            mov     _Joystick_Control_sloc4_1_0,dpl
24C2 858391    7285            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
24C5 85F092    7286            mov     (_Joystick_Control_sloc4_1_0 + 2),b
24C8 F593      7287            mov     (_Joystick_Control_sloc4_1_0 + 3),a
24CA E581      7288            mov     a,sp
24CC 24FC      7289            add     a,#0xfc
24CE F581      7290            mov     sp,a
24D0 D001      7291            pop     ar1
24D2 D000      7292            pop     ar0
24D4 D005      7293            pop     ar5
24D6 D004      7294            pop     ar4
24D8 904E10    7295            mov     dptr,#_curr_angle
24DB E0        7296            movx    a,@dptr
24DC FE        7297            mov     r6,a
24DD A3        7298            inc     dptr
24DE E0        7299            movx    a,@dptr
24DF FF        7300            mov     r7,a
24E0 A3        7301            inc     dptr
24E1 E0        7302            movx    a,@dptr
24E2 FA        7303            mov     r2,a
24E3 A3        7304            inc     dptr
24E4 E0        7305            movx    a,@dptr
24E5 FB        7306            mov     r3,a
24E6 C000      7307            push    ar0
24E8 C001      7308            push    ar1
24EA C090      7309            push    _Joystick_Control_sloc4_1_0
24EC C091      7310            push    (_Joystick_Control_sloc4_1_0 + 1)
24EE C092      7311            push    (_Joystick_Control_sloc4_1_0 + 2)
24F0 C093      7312            push    (_Joystick_Control_sloc4_1_0 + 3)
24F2 8E82      7313            mov     dpl,r6
24F4 8F83      7314            mov     dph,r7
24F6 8AF0      7315            mov     b,r2
24F8 EB        7316            mov     a,r3
24F9 120000    7317            lcall   ___fsadd
24FC AA82      7318            mov     r2,dpl
24FE AB83      7319            mov     r3,dph
2500 ACF0      7320            mov     r4,b
2502 FD        7321            mov     r5,a
2503 E581      7322            mov     a,sp
2505 24FC      7323            add     a,#0xfc
2507 F581      7324            mov     sp,a
2509 D001      7325            pop     ar1
250B D000      7326            pop     ar0
250D 904E10    7327            mov     dptr,#_curr_angle
2510 EA        7328            mov     a,r2
2511 F0        7329            movx    @dptr,a
2512 A3        7330            inc     dptr
2513 EB        7331            mov     a,r3
2514 F0        7332            movx    @dptr,a
2515 A3        7333            inc     dptr
2516 EC        7334            mov     a,r4
2517 F0        7335            movx    @dptr,a
2518 A3        7336            inc     dptr
2519 ED        7337            mov     a,r5
251A F0        7338            movx    @dptr,a
251B D005      7339            pop     ar5
251D D004      7340            pop     ar4
251F 020000    7341            ljmp    L044027?
2522           7342   L044024?:
2522           7343   ;        main.c:1294: if (vy*100<=vy_thres*100/2){
2522 8C00      7344            mov     __mulint_PARM_2,r4
2524 8D01      7345            mov     (__mulint_PARM_2 + 1),r5
2526 900064    7346            mov     dptr,#0x0064
2529 C004      7347            push    ar4
252B C005      7348            push    ar5
252D C000      7349            push    ar0
252F C001      7350            push    ar1
2531 120000    7351            lcall   __mulint
2534 AA82      7352            mov     r2,dpl
2536 AB83      7353            mov     r3,dph
2538 D001      7354            pop     ar1
253A D000      7355            pop     ar0
253C D005      7356            pop     ar5
253E D004      7357            pop     ar4
2540 904FE0    7358            mov     dptr,#_vy_thres
2543 E0        7359            movx    a,@dptr
2544 F500      7360            mov     __mulint_PARM_2,a
2546 A3        7361            inc     dptr
2547 E0        7362            movx    a,@dptr
2548 F501      7363            mov     (__mulint_PARM_2 + 1),a
254A 900064    7364            mov     dptr,#0x0064
254D C002      7365            push    ar2
254F C003      7366            push    ar3
2551 C004      7367            push    ar4
2553 C005      7368            push    ar5
2555 C000      7369            push    ar0
2557 C001      7370            push    ar1
2559 120000    7371            lcall   __mulint
255C AE82      7372            mov     r6,dpl
255E AF83      7373            mov     r7,dph
2560 750002    7374            mov     __divsint_PARM_2,#0x02
2563 E4        7375            clr     a
2564 F501      7376            mov     (__divsint_PARM_2 + 1),a
2566 8E82      7377            mov     dpl,r6
2568 8F83      7378            mov     dph,r7
256A 120000    7379            lcall   __divsint
256D AE82      7380            mov     r6,dpl
256F AF83      7381            mov     r7,dph
2571 D001      7382            pop     ar1
2573 D000      7383            pop     ar0
2575 D005      7384            pop     ar5
2577 D004      7385            pop     ar4
2579 D003      7386            pop     ar3
257B D002      7387            pop     ar2
257D C3        7388            clr     c
257E EE        7389            mov     a,r6
257F 9A        7390            subb    a,r2
2580 EF        7391            mov     a,r7
2581 6480      7392            xrl     a,#0x80
2583 8BF0      7393            mov     b,r3
2585 63F080    7394            xrl     b,#0x80
2588 95F0      7395            subb    a,b
258A 5000      7396            jnc     L044075?
258C 020000    7397            ljmp    L044021?
258F           7398   L044075?:
258F           7399   ;        main.c:1295: pwm_left = vy_error*100/(vx_error+vy_error);
258F 90D370    7400            mov     dptr,#_Joystick_Control_vy_error_1_242
2592 E0        7401            movx    a,@dptr
2593 FA        7402            mov     r2,a
2594 A3        7403            inc     dptr
2595 E0        7404            movx    a,@dptr
2596 FB        7405            mov     r3,a
2597 8A00      7406            mov     __mulint_PARM_2,r2
2599 8B01      7407            mov     (__mulint_PARM_2 + 1),r3
259B 900064    7408            mov     dptr,#0x0064
259E C002      7409            push    ar2
25A0 C003      7410            push    ar3
25A2 C004      7411            push    ar4
25A4 C005      7412            push    ar5
25A6 C000      7413            push    ar0
25A8 C001      7414            push    ar1
25AA 120000    7415            lcall   __mulint
25AD AE82      7416            mov     r6,dpl
25AF AF83      7417            mov     r7,dph
25B1 D001      7418            pop     ar1
25B3 D000      7419            pop     ar0
25B5 D005      7420            pop     ar5
25B7 D004      7421            pop     ar4
25B9 D003      7422            pop     ar3
25BB D002      7423            pop     ar2
25BD EA        7424            mov     a,r2
25BE 28        7425            add     a,r0
25BF F500      7426            mov     __divsint_PARM_2,a
25C1 EB        7427            mov     a,r3
25C2 39        7428            addc    a,r1
25C3 F501      7429            mov     (__divsint_PARM_2 + 1),a
25C5 8E82      7430            mov     dpl,r6
25C7 8F83      7431            mov     dph,r7
25C9 C002      7432            push    ar2
25CB C003      7433            push    ar3
25CD C004      7434            push    ar4
25CF C005      7435            push    ar5
25D1 C000      7436            push    ar0
25D3 C001      7437            push    ar1
25D5 120000    7438            lcall   __divsint
25D8 AE82      7439            mov     r6,dpl
25DA D001      7440            pop     ar1
25DC D000      7441            pop     ar0
25DE D005      7442            pop     ar5
25E0 D004      7443            pop     ar4
25E2 D003      7444            pop     ar3
25E4 D002      7445            pop     ar2
25E6 9051A0    7446            mov     dptr,#_pwm_left
25E9 EE        7447            mov     a,r6
25EA F0        7448            movx    @dptr,a
25EB           7449   ;        main.c:1296: pwm_right = vy_error*pwm_corr; 
25EB 8A82      7450            mov     dpl,r2
25ED 8B83      7451            mov     dph,r3
25EF C004      7452            push    ar4
25F1 C005      7453            push    ar5
25F3 C000      7454            push    ar0
25F5 C001      7455            push    ar1
25F7 120000    7456            lcall   ___sint2fs
25FA AA82      7457            mov     r2,dpl
25FC AB83      7458            mov     r3,dph
25FE AEF0      7459            mov     r6,b
2600 FF        7460            mov     r7,a
2601 904E50    7461            mov     dptr,#_pwm_corr
2604 E0        7462            movx    a,@dptr
2605 C0E0      7463            push    acc
2607 A3        7464            inc     dptr
2608 E0        7465            movx    a,@dptr
2609 C0E0      7466            push    acc
260B A3        7467            inc     dptr
260C E0        7468            movx    a,@dptr
260D C0E0      7469            push    acc
260F A3        7470            inc     dptr
2610 E0        7471            movx    a,@dptr
2611 C0E0      7472            push    acc
2613 8A82      7473            mov     dpl,r2
2615 8B83      7474            mov     dph,r3
2617 8EF0      7475            mov     b,r6
2619 EF        7476            mov     a,r7
261A 120000    7477            lcall   ___fsmul
261D AA82      7478            mov     r2,dpl
261F AB83      7479            mov     r3,dph
2621 AEF0      7480            mov     r6,b
2623 FF        7481            mov     r7,a
2624 E581      7482            mov     a,sp
2626 24FC      7483            add     a,#0xfc
2628 F581      7484            mov     sp,a
262A 8A82      7485            mov     dpl,r2
262C 8B83      7486            mov     dph,r3
262E 8EF0      7487            mov     b,r6
2630 EF        7488            mov     a,r7
2631 120000    7489            lcall   ___fs2uchar
2634 E582      7490            mov     a,dpl
2636 D001      7491            pop     ar1
2638 D000      7492            pop     ar0
263A D005      7493            pop     ar5
263C D004      7494            pop     ar4
263E 905160    7495            mov     dptr,#_pwm_right
2641 F0        7496            movx    @dptr,a
2642 020000    7497            ljmp    L044022?
2645           7498   L044021?:
2645           7499   ;        main.c:1299: pwm_left = vx_error*100/(vx_error+vy_error);
2645 8800      7500            mov     __mulint_PARM_2,r0
2647 8901      7501            mov     (__mulint_PARM_2 + 1),r1
2649 900064    7502            mov     dptr,#0x0064
264C C004      7503            push    ar4
264E C005      7504            push    ar5
2650 C000      7505            push    ar0
2652 C001      7506            push    ar1
2654 120000    7507            lcall   __mulint
2657 AA82      7508            mov     r2,dpl
2659 AB83      7509            mov     r3,dph
265B D001      7510            pop     ar1
265D D000      7511            pop     ar0
265F 90D370    7512            mov     dptr,#_Joystick_Control_vy_error_1_242
2662 E0        7513            movx    a,@dptr
2663 FE        7514            mov     r6,a
2664 A3        7515            inc     dptr
2665 E0        7516            movx    a,@dptr
2666 FF        7517            mov     r7,a
2667 EE        7518            mov     a,r6
2668 28        7519            add     a,r0
2669 F500      7520            mov     __divsint_PARM_2,a
266B EF        7521            mov     a,r7
266C 39        7522            addc    a,r1
266D F501      7523            mov     (__divsint_PARM_2 + 1),a
266F 8A82      7524            mov     dpl,r2
2671 8B83      7525            mov     dph,r3
2673 C000      7526            push    ar0
2675 C001      7527            push    ar1
2677 120000    7528            lcall   __divsint
267A AA82      7529            mov     r2,dpl
267C D001      7530            pop     ar1
267E D000      7531            pop     ar0
2680 9051A0    7532            mov     dptr,#_pwm_left
2683 EA        7533            mov     a,r2
2684 F0        7534            movx    @dptr,a
2685           7535   ;        main.c:1300: pwm_right = vx_error*pwm_corr; 
2685 8882      7536            mov     dpl,r0
2687 8983      7537            mov     dph,r1
2689 C000      7538            push    ar0
268B C001      7539            push    ar1
268D 120000    7540            lcall   ___sint2fs
2690 AA82      7541            mov     r2,dpl
2692 AB83      7542            mov     r3,dph
2694 AEF0      7543            mov     r6,b
2696 FF        7544            mov     r7,a
2697 904E50    7545            mov     dptr,#_pwm_corr
269A E0        7546            movx    a,@dptr
269B C0E0      7547            push    acc
269D A3        7548            inc     dptr
269E E0        7549            movx    a,@dptr
269F C0E0      7550            push    acc
26A1 A3        7551            inc     dptr
26A2 E0        7552            movx    a,@dptr
26A3 C0E0      7553            push    acc
26A5 A3        7554            inc     dptr
26A6 E0        7555            movx    a,@dptr
26A7 C0E0      7556            push    acc
26A9 8A82      7557            mov     dpl,r2
26AB 8B83      7558            mov     dph,r3
26AD 8EF0      7559            mov     b,r6
26AF EF        7560            mov     a,r7
26B0 120000    7561            lcall   ___fsmul
26B3 AA82      7562            mov     r2,dpl
26B5 AB83      7563            mov     r3,dph
26B7 AEF0      7564            mov     r6,b
26B9 FF        7565            mov     r7,a
26BA E581      7566            mov     a,sp
26BC 24FC      7567            add     a,#0xfc
26BE F581      7568            mov     sp,a
26C0 8A82      7569            mov     dpl,r2
26C2 8B83      7570            mov     dph,r3
26C4 8EF0      7571            mov     b,r6
26C6 EF        7572            mov     a,r7
26C7 120000    7573            lcall   ___fs2uchar
26CA E582      7574            mov     a,dpl
26CC D001      7575            pop     ar1
26CE D000      7576            pop     ar0
26D0 D005      7577            pop     ar5
26D2 D004      7578            pop     ar4
26D4 905160    7579            mov     dptr,#_pwm_right
26D7 F0        7580            movx    @dptr,a
26D8           7581   L044022?:
26D8           7582   ;        main.c:1302: curr_angle -= angle_diff * 1.5; // TUNE THIS 
26D8 C004      7583            push    ar4
26DA C005      7584            push    ar5
26DC C004      7585            push    ar4
26DE C005      7586            push    ar5
26E0 C000      7587            push    ar0
26E2 C001      7588            push    ar1
26E4 C0E0      7589            push    _Joystick_Control_sloc5_1_0
26E6 C0E1      7590            push    (_Joystick_Control_sloc5_1_0 + 1)
26E8 C0E2      7591            push    (_Joystick_Control_sloc5_1_0 + 2)
26EA C0E3      7592            push    (_Joystick_Control_sloc5_1_0 + 3)
26EC 900000    7593            mov     dptr,#0x0000
26EF 75F0C0    7594            mov     b,#0xC0
26F2 743F      7595            mov     a,#0x3F
26F4 120000    7596            lcall   ___fsmul
26F7 858290    7597            mov     _Joystick_Control_sloc4_1_0,dpl
26FA 858391    7598            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
26FD 85F092    7599            mov     (_Joystick_Control_sloc4_1_0 + 2),b
2700 F593      7600            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2702 E581      7601            mov     a,sp
2704 24FC      7602            add     a,#0xfc
2706 F581      7603            mov     sp,a
2708 D001      7604            pop     ar1
270A D000      7605            pop     ar0
270C D005      7606            pop     ar5
270E D004      7607            pop     ar4
2710 904E10    7608            mov     dptr,#_curr_angle
2713 E0        7609            movx    a,@dptr
2714 FC        7610            mov     r4,a
2715 A3        7611            inc     dptr
2716 E0        7612            movx    a,@dptr
2717 FD        7613            mov     r5,a
2718 A3        7614            inc     dptr
2719 E0        7615            movx    a,@dptr
271A FA        7616            mov     r2,a
271B A3        7617            inc     dptr
271C E0        7618            movx    a,@dptr
271D FB        7619            mov     r3,a
271E C000      7620            push    ar0
2720 C001      7621            push    ar1
2722 C090      7622            push    _Joystick_Control_sloc4_1_0
2724 C091      7623            push    (_Joystick_Control_sloc4_1_0 + 1)
2726 C092      7624            push    (_Joystick_Control_sloc4_1_0 + 2)
2728 C093      7625            push    (_Joystick_Control_sloc4_1_0 + 3)
272A 8C82      7626            mov     dpl,r4
272C 8D83      7627            mov     dph,r5
272E 8AF0      7628            mov     b,r2
2730 EB        7629            mov     a,r3
2731 120000    7630            lcall   ___fssub
2734 AA82      7631            mov     r2,dpl
2736 AB83      7632            mov     r3,dph
2738 ACF0      7633            mov     r4,b
273A FD        7634            mov     r5,a
273B E581      7635            mov     a,sp
273D 24FC      7636            add     a,#0xfc
273F F581      7637            mov     sp,a
2741 D001      7638            pop     ar1
2743 D000      7639            pop     ar0
2745 904E10    7640            mov     dptr,#_curr_angle
2748 EA        7641            mov     a,r2
2749 F0        7642            movx    @dptr,a
274A A3        7643            inc     dptr
274B EB        7644            mov     a,r3
274C F0        7645            movx    @dptr,a
274D A3        7646            inc     dptr
274E EC        7647            mov     a,r4
274F F0        7648            movx    @dptr,a
2750 A3        7649            inc     dptr
2751 ED        7650            mov     a,r5
2752 F0        7651            movx    @dptr,a
2753           7652   ;        main.c:1337: return curr_angle; 
2753 D005      7653            pop     ar5
2755 D004      7654            pop     ar4
2757           7655   ;        main.c:1302: curr_angle -= angle_diff * 1.5; // TUNE THIS 
2757           7656   L044027?:
2757           7657   ;        main.c:1306: if (vy_err<0){
2757 E541      7658            mov     a,(_Joystick_Control_sloc3_1_0 + 1)
2759 20E750    7659            jb      acc.7,L044076?
275C 020000    7660            ljmp    L044040?
275F           7661   L044076?:
275F           7662   ;        main.c:1307: L_motor_dir = 1; 
275F 905120    7663            mov     dptr,#_L_motor_dir
2762 7401      7664            mov     a,#0x01
2764 F0        7665            movx    @dptr,a
2765           7666   ;        main.c:1308: R_motor_dir = 1; 
2765 9050E0    7667            mov     dptr,#_R_motor_dir
2768 7401      7668            mov     a,#0x01
276A F0        7669            movx    @dptr,a
276B           7670   ;        main.c:1310: if (vx_err>0){
276B 90D3C0    7671            mov     dptr,#_Joystick_Control_vx_err_1_242
276E E0        7672            movx    a,@dptr
276F FA        7673            mov     r2,a
2770 A3        7674            inc     dptr
2771 E0        7675            movx    a,@dptr
2772 FB        7676            mov     r3,a
2773 C3        7677            clr     c
2774 E4        7678            clr     a
2775 9A        7679            subb    a,r2
2776 E4        7680            clr     a
2777 6480      7681            xrl     a,#0x80
2779 8BF0      7682            mov     b,r3
277B 63F080    7683            xrl     b,#0x80
277E 95F0      7684            subb    a,b
2780 4000      7685            jc      L044077?
2782 020000    7686            ljmp    L044035?
2785           7687   L044077?:
2785           7688   ;        main.c:1311: if (vy*100<=vy_thres*100/2){
2785 8C00      7689            mov     __mulint_PARM_2,r4
2787 8D01      7690            mov     (__mulint_PARM_2 + 1),r5
2789 900064    7691            mov     dptr,#0x0064
278C C000      7692            push    ar0
278E C001      7693            push    ar1
2790 120000    7694            lcall   __mulint
2793 AA82      7695            mov     r2,dpl
2795 AB83      7696            mov     r3,dph
2797 D001      7697            pop     ar1
2799 D000      7698            pop     ar0
279B 904FE0    7699            mov     dptr,#_vy_thres
279E E0        7700            movx    a,@dptr
279F F500      7701            mov     __mulint_PARM_2,a
27A1 A3        7702            inc     dptr
27A2 E0        7703            movx    a,@dptr
27A3 F501      7704            mov     (__mulint_PARM_2 + 1),a
27A5 900064    7705            mov     dptr,#0x0064
27A8 C002      7706            push    ar2
27AA C003      7707            push    ar3
27AC C000      7708            push    ar0
27AE C001      7709            push    ar1
27B0 120000    7710            lcall   __mulint
27B3 AE82      7711            mov     r6,dpl
27B5 AF83      7712            mov     r7,dph
27B7 750002    7713            mov     __divsint_PARM_2,#0x02
27BA E4        7714            clr     a
27BB F501      7715            mov     (__divsint_PARM_2 + 1),a
27BD 8E82      7716            mov     dpl,r6
27BF 8F83      7717            mov     dph,r7
27C1 120000    7718            lcall   __divsint
27C4 AE82      7719            mov     r6,dpl
27C6 AF83      7720            mov     r7,dph
27C8 D001      7721            pop     ar1
27CA D000      7722            pop     ar0
27CC D003      7723            pop     ar3
27CE D002      7724            pop     ar2
27D0 C3        7725            clr     c
27D1 EE        7726            mov     a,r6
27D2 9A        7727            subb    a,r2
27D3 EF        7728            mov     a,r7
27D4 6480      7729            xrl     a,#0x80
27D6 8BF0      7730            mov     b,r3
27D8 63F080    7731            xrl     b,#0x80
27DB 95F0      7732            subb    a,b
27DD 5000      7733            jnc     L044078?
27DF 020000    7734            ljmp    L044029?
27E2           7735   L044078?:
27E2           7736   ;        main.c:1312: pwm_left = vy_error; 
27E2 90D370    7737            mov     dptr,#_Joystick_Control_vy_error_1_242
27E5 E0        7738            movx    a,@dptr
27E6 F590      7739            mov     _Joystick_Control_sloc4_1_0,a
27E8 A3        7740            inc     dptr
27E9 E0        7741            movx    a,@dptr
27EA F591      7742            mov     (_Joystick_Control_sloc4_1_0 + 1),a
27EC 9051A0    7743            mov     dptr,#_pwm_left
27EF E590      7744            mov     a,_Joystick_Control_sloc4_1_0
27F1 F0        7745            movx    @dptr,a
27F2           7746   ;        main.c:1313: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
27F2 904E50    7747            mov     dptr,#_pwm_corr
27F5 E0        7748            movx    a,@dptr
27F6 F540      7749            mov     _Joystick_Control_sloc3_1_0,a
27F8 A3        7750            inc     dptr
27F9 E0        7751            movx    a,@dptr
27FA F541      7752            mov     (_Joystick_Control_sloc3_1_0 + 1),a
27FC A3        7753            inc     dptr
27FD E0        7754            movx    a,@dptr
27FE F542      7755            mov     (_Joystick_Control_sloc3_1_0 + 2),a
2800 A3        7756            inc     dptr
2801 E0        7757            movx    a,@dptr
2802 F543      7758            mov     (_Joystick_Control_sloc3_1_0 + 3),a
2804 859082    7759            mov     dpl,_Joystick_Control_sloc4_1_0
2807 859183    7760            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
280A C000      7761            push    ar0
280C C001      7762            push    ar1
280E 120000    7763            lcall   ___sint2fs
2811 AA82      7764            mov     r2,dpl
2813 AB83      7765            mov     r3,dph
2815 AEF0      7766            mov     r6,b
2817 FF        7767            mov     r7,a
2818 C002      7768            push    ar2
281A C003      7769            push    ar3
281C C006      7770            push    ar6
281E C007      7771            push    ar7
2820 854082    7772            mov     dpl,_Joystick_Control_sloc3_1_0
2823 854183    7773            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
2826 8542F0    7774            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
2829 E543      7775            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
282B 120000    7776            lcall   ___fsmul
282E AA82      7777            mov     r2,dpl
2830 AB83      7778            mov     r3,dph
2832 AEF0      7779            mov     r6,b
2834 FF        7780            mov     r7,a
2835 E581      7781            mov     a,sp
2837 24FC      7782            add     a,#0xfc
2839 F581      7783            mov     sp,a
283B C002      7784            push    ar2
283D C003      7785            push    ar3
283F C006      7786            push    ar6
2841 C007      7787            push    ar7
2843 900000    7788            mov     dptr,#0x0000
2846 75F0C8    7789            mov     b,#0xC8
2849 7442      7790            mov     a,#0x42
284B 120000    7791            lcall   ___fsmul
284E 858240    7792            mov     _Joystick_Control_sloc3_1_0,dpl
2851 858341    7793            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
2854 85F042    7794            mov     (_Joystick_Control_sloc3_1_0 + 2),b
2857 F543      7795            mov     (_Joystick_Control_sloc3_1_0 + 3),a
2859 E581      7796            mov     a,sp
285B 24FC      7797            add     a,#0xfc
285D F581      7798            mov     sp,a
285F D001      7799            pop     ar1
2861 D000      7800            pop     ar0
2863 E590      7801            mov     a,_Joystick_Control_sloc4_1_0
2865 28        7802            add     a,r0
2866 F582      7803            mov     dpl,a
2868 E591      7804            mov     a,(_Joystick_Control_sloc4_1_0 + 1)
286A 39        7805            addc    a,r1
286B F583      7806            mov     dph,a
286D 120000    7807            lcall   ___sint2fs
2870 AA82      7808            mov     r2,dpl
2872 AB83      7809            mov     r3,dph
2874 AEF0      7810            mov     r6,b
2876 FF        7811            mov     r7,a
2877 C002      7812            push    ar2
2879 C003      7813            push    ar3
287B C006      7814            push    ar6
287D C007      7815            push    ar7
287F 854082    7816            mov     dpl,_Joystick_Control_sloc3_1_0
2882 854183    7817            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
2885 8542F0    7818            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
2888 E543      7819            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
288A 120000    7820            lcall   ___fsdiv
288D AA82      7821            mov     r2,dpl
288F AB83      7822            mov     r3,dph
2891 AEF0      7823            mov     r6,b
2893 FF        7824            mov     r7,a
2894 E581      7825            mov     a,sp
2896 24FC      7826            add     a,#0xfc
2898 F581      7827            mov     sp,a
289A 8A82      7828            mov     dpl,r2
289C 8B83      7829            mov     dph,r3
289E 8EF0      7830            mov     b,r6
28A0 EF        7831            mov     a,r7
28A1 120000    7832            lcall   ___fs2uchar
28A4 E582      7833            mov     a,dpl
28A6 905160    7834            mov     dptr,#_pwm_right
28A9 F0        7835            movx    @dptr,a
28AA 020000    7836            ljmp    L044030?
28AD           7837   L044029?:
28AD           7838   ;        main.c:1316: pwm_left = vx_error; 
28AD 9051A0    7839            mov     dptr,#_pwm_left
28B0 E8        7840            mov     a,r0
28B1 F0        7841            movx    @dptr,a
28B2           7842   ;        main.c:1317: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
28B2 904E50    7843            mov     dptr,#_pwm_corr
28B5 E0        7844            movx    a,@dptr
28B6 F590      7845            mov     _Joystick_Control_sloc4_1_0,a
28B8 A3        7846            inc     dptr
28B9 E0        7847            movx    a,@dptr
28BA F591      7848            mov     (_Joystick_Control_sloc4_1_0 + 1),a
28BC A3        7849            inc     dptr
28BD E0        7850            movx    a,@dptr
28BE F592      7851            mov     (_Joystick_Control_sloc4_1_0 + 2),a
28C0 A3        7852            inc     dptr
28C1 E0        7853            movx    a,@dptr
28C2 F593      7854            mov     (_Joystick_Control_sloc4_1_0 + 3),a
28C4 8882      7855            mov     dpl,r0
28C6 8983      7856            mov     dph,r1
28C8 C000      7857            push    ar0
28CA C001      7858            push    ar1
28CC 120000    7859            lcall   ___sint2fs
28CF AA82      7860            mov     r2,dpl
28D1 AB83      7861            mov     r3,dph
28D3 AEF0      7862            mov     r6,b
28D5 FF        7863            mov     r7,a
28D6 C002      7864            push    ar2
28D8 C003      7865            push    ar3
28DA C006      7866            push    ar6
28DC C007      7867            push    ar7
28DE 859082    7868            mov     dpl,_Joystick_Control_sloc4_1_0
28E1 859183    7869            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
28E4 8592F0    7870            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
28E7 E593      7871            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
28E9 120000    7872            lcall   ___fsmul
28EC AA82      7873            mov     r2,dpl
28EE AB83      7874            mov     r3,dph
28F0 AEF0      7875            mov     r6,b
28F2 FF        7876            mov     r7,a
28F3 E581      7877            mov     a,sp
28F5 24FC      7878            add     a,#0xfc
28F7 F581      7879            mov     sp,a
28F9 C002      7880            push    ar2
28FB C003      7881            push    ar3
28FD C006      7882            push    ar6
28FF C007      7883            push    ar7
2901 900000    7884            mov     dptr,#0x0000
2904 75F0C8    7885            mov     b,#0xC8
2907 7442      7886            mov     a,#0x42
2909 120000    7887            lcall   ___fsmul
290C 858290    7888            mov     _Joystick_Control_sloc4_1_0,dpl
290F 858391    7889            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
2912 85F092    7890            mov     (_Joystick_Control_sloc4_1_0 + 2),b
2915 F593      7891            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2917 E581      7892            mov     a,sp
2919 24FC      7893            add     a,#0xfc
291B F581      7894            mov     sp,a
291D D001      7895            pop     ar1
291F D000      7896            pop     ar0
2921 90D370    7897            mov     dptr,#_Joystick_Control_vy_error_1_242
2924 E0        7898            movx    a,@dptr
2925 FA        7899            mov     r2,a
2926 A3        7900            inc     dptr
2927 E0        7901            movx    a,@dptr
2928 FB        7902            mov     r3,a
2929 EA        7903            mov     a,r2
292A 28        7904            add     a,r0
292B F582      7905            mov     dpl,a
292D EB        7906            mov     a,r3
292E 39        7907            addc    a,r1
292F F583      7908            mov     dph,a
2931 120000    7909            lcall   ___sint2fs
2934 AA82      7910            mov     r2,dpl
2936 AB83      7911            mov     r3,dph
2938 AEF0      7912            mov     r6,b
293A FF        7913            mov     r7,a
293B C002      7914            push    ar2
293D C003      7915            push    ar3
293F C006      7916            push    ar6
2941 C007      7917            push    ar7
2943 859082    7918            mov     dpl,_Joystick_Control_sloc4_1_0
2946 859183    7919            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
2949 8592F0    7920            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
294C E593      7921            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
294E 120000    7922            lcall   ___fsdiv
2951 AA82      7923            mov     r2,dpl
2953 AB83      7924            mov     r3,dph
2955 AEF0      7925            mov     r6,b
2957 FF        7926            mov     r7,a
2958 E581      7927            mov     a,sp
295A 24FC      7928            add     a,#0xfc
295C F581      7929            mov     sp,a
295E 8A82      7930            mov     dpl,r2
2960 8B83      7931            mov     dph,r3
2962 8EF0      7932            mov     b,r6
2964 EF        7933            mov     a,r7
2965 120000    7934            lcall   ___fs2uchar
2968 E582      7935            mov     a,dpl
296A 905160    7936            mov     dptr,#_pwm_right
296D F0        7937            movx    @dptr,a
296E           7938   L044030?:
296E           7939   ;        main.c:1319: curr_angle -= angle_diff * 1.4; // TUNE THIS 
296E C0E0      7940            push    _Joystick_Control_sloc5_1_0
2970 C0E1      7941            push    (_Joystick_Control_sloc5_1_0 + 1)
2972 C0E2      7942            push    (_Joystick_Control_sloc5_1_0 + 2)
2974 C0E3      7943            push    (_Joystick_Control_sloc5_1_0 + 3)
2976 903333    7944            mov     dptr,#0x3333
2979 75F0B3    7945            mov     b,#0xB3
297C 743F      7946            mov     a,#0x3F
297E 120000    7947            lcall   ___fsmul
2981 858290    7948            mov     _Joystick_Control_sloc4_1_0,dpl
2984 858391    7949            mov     (_Joystick_Control_sloc4_1_0 + 1),dph
2987 85F092    7950            mov     (_Joystick_Control_sloc4_1_0 + 2),b
298A F593      7951            mov     (_Joystick_Control_sloc4_1_0 + 3),a
298C E581      7952            mov     a,sp
298E 24FC      7953            add     a,#0xfc
2990 F581      7954            mov     sp,a
2992 904E10    7955            mov     dptr,#_curr_angle
2995 E0        7956            movx    a,@dptr
2996 FA        7957            mov     r2,a
2997 A3        7958            inc     dptr
2998 E0        7959            movx    a,@dptr
2999 FB        7960            mov     r3,a
299A A3        7961            inc     dptr
299B E0        7962            movx    a,@dptr
299C FE        7963            mov     r6,a
299D A3        7964            inc     dptr
299E E0        7965            movx    a,@dptr
299F FF        7966            mov     r7,a
29A0 C090      7967            push    _Joystick_Control_sloc4_1_0
29A2 C091      7968            push    (_Joystick_Control_sloc4_1_0 + 1)
29A4 C092      7969            push    (_Joystick_Control_sloc4_1_0 + 2)
29A6 C093      7970            push    (_Joystick_Control_sloc4_1_0 + 3)
29A8 8A82      7971            mov     dpl,r2
29AA 8B83      7972            mov     dph,r3
29AC 8EF0      7973            mov     b,r6
29AE EF        7974            mov     a,r7
29AF 120000    7975            lcall   ___fssub
29B2 AA82      7976            mov     r2,dpl
29B4 AB83      7977            mov     r3,dph
29B6 AEF0      7978            mov     r6,b
29B8 FF        7979            mov     r7,a
29B9 E581      7980            mov     a,sp
29BB 24FC      7981            add     a,#0xfc
29BD F581      7982            mov     sp,a
29BF 904E10    7983            mov     dptr,#_curr_angle
29C2 EA        7984            mov     a,r2
29C3 F0        7985            movx    @dptr,a
29C4 A3        7986            inc     dptr
29C5 EB        7987            mov     a,r3
29C6 F0        7988            movx    @dptr,a
29C7 A3        7989            inc     dptr
29C8 EE        7990            mov     a,r6
29C9 F0        7991            movx    @dptr,a
29CA A3        7992            inc     dptr
29CB EF        7993            mov     a,r7
29CC F0        7994            movx    @dptr,a
29CD 020000    7995            ljmp    L044040?
29D0           7996   L044035?:
29D0           7997   ;        main.c:1323: if (vy*100<=vy_thres*100/2){
29D0 8C00      7998            mov     __mulint_PARM_2,r4
29D2 8D01      7999            mov     (__mulint_PARM_2 + 1),r5
29D4 900064    8000            mov     dptr,#0x0064
29D7 C000      8001            push    ar0
29D9 C001      8002            push    ar1
29DB 120000    8003            lcall   __mulint
29DE AA82      8004            mov     r2,dpl
29E0 AB83      8005            mov     r3,dph
29E2 D001      8006            pop     ar1
29E4 D000      8007            pop     ar0
29E6 904FE0    8008            mov     dptr,#_vy_thres
29E9 E0        8009            movx    a,@dptr
29EA F500      8010            mov     __mulint_PARM_2,a
29EC A3        8011            inc     dptr
29ED E0        8012            movx    a,@dptr
29EE F501      8013            mov     (__mulint_PARM_2 + 1),a
29F0 900064    8014            mov     dptr,#0x0064
29F3 C002      8015            push    ar2
29F5 C003      8016            push    ar3
29F7 C000      8017            push    ar0
29F9 C001      8018            push    ar1
29FB 120000    8019            lcall   __mulint
29FE AC82      8020            mov     r4,dpl
2A00 AD83      8021            mov     r5,dph
2A02 750002    8022            mov     __divsint_PARM_2,#0x02
2A05 E4        8023            clr     a
2A06 F501      8024            mov     (__divsint_PARM_2 + 1),a
2A08 8C82      8025            mov     dpl,r4
2A0A 8D83      8026            mov     dph,r5
2A0C 120000    8027            lcall   __divsint
2A0F AC82      8028            mov     r4,dpl
2A11 AD83      8029            mov     r5,dph
2A13 D001      8030            pop     ar1
2A15 D000      8031            pop     ar0
2A17 D003      8032            pop     ar3
2A19 D002      8033            pop     ar2
2A1B C3        8034            clr     c
2A1C EC        8035            mov     a,r4
2A1D 9A        8036            subb    a,r2
2A1E ED        8037            mov     a,r5
2A1F 6480      8038            xrl     a,#0x80
2A21 8BF0      8039            mov     b,r3
2A23 63F080    8040            xrl     b,#0x80
2A26 95F0      8041            subb    a,b
2A28 5000      8042            jnc     L044079?
2A2A 020000    8043            ljmp    L044032?
2A2D           8044   L044079?:
2A2D           8045   ;        main.c:1324: pwm_left = vy_error*100/(vx_error+vy_error);
2A2D 90D370    8046            mov     dptr,#_Joystick_Control_vy_error_1_242
2A30 E0        8047            movx    a,@dptr
2A31 FA        8048            mov     r2,a
2A32 A3        8049            inc     dptr
2A33 E0        8050            movx    a,@dptr
2A34 FB        8051            mov     r3,a
2A35 8A00      8052            mov     __mulint_PARM_2,r2
2A37 8B01      8053            mov     (__mulint_PARM_2 + 1),r3
2A39 900064    8054            mov     dptr,#0x0064
2A3C C002      8055            push    ar2
2A3E C003      8056            push    ar3
2A40 C000      8057            push    ar0
2A42 C001      8058            push    ar1
2A44 120000    8059            lcall   __mulint
2A47 AC82      8060            mov     r4,dpl
2A49 AD83      8061            mov     r5,dph
2A4B D001      8062            pop     ar1
2A4D D000      8063            pop     ar0
2A4F D003      8064            pop     ar3
2A51 D002      8065            pop     ar2
2A53 EA        8066            mov     a,r2
2A54 28        8067            add     a,r0
2A55 F500      8068            mov     __divsint_PARM_2,a
2A57 EB        8069            mov     a,r3
2A58 39        8070            addc    a,r1
2A59 F501      8071            mov     (__divsint_PARM_2 + 1),a
2A5B 8C82      8072            mov     dpl,r4
2A5D 8D83      8073            mov     dph,r5
2A5F C002      8074            push    ar2
2A61 C003      8075            push    ar3
2A63 120000    8076            lcall   __divsint
2A66 AC82      8077            mov     r4,dpl
2A68 D003      8078            pop     ar3
2A6A D002      8079            pop     ar2
2A6C 9051A0    8080            mov     dptr,#_pwm_left
2A6F EC        8081            mov     a,r4
2A70 F0        8082            movx    @dptr,a
2A71           8083   ;        main.c:1325: pwm_right =pwm_corr*vy_error; 
2A71 904E50    8084            mov     dptr,#_pwm_corr
2A74 E0        8085            movx    a,@dptr
2A75 F590      8086            mov     _Joystick_Control_sloc4_1_0,a
2A77 A3        8087            inc     dptr
2A78 E0        8088            movx    a,@dptr
2A79 F591      8089            mov     (_Joystick_Control_sloc4_1_0 + 1),a
2A7B A3        8090            inc     dptr
2A7C E0        8091            movx    a,@dptr
2A7D F592      8092            mov     (_Joystick_Control_sloc4_1_0 + 2),a
2A7F A3        8093            inc     dptr
2A80 E0        8094            movx    a,@dptr
2A81 F593      8095            mov     (_Joystick_Control_sloc4_1_0 + 3),a
2A83 8A82      8096            mov     dpl,r2
2A85 8B83      8097            mov     dph,r3
2A87 120000    8098            lcall   ___sint2fs
2A8A AA82      8099            mov     r2,dpl
2A8C AB83      8100            mov     r3,dph
2A8E ACF0      8101            mov     r4,b
2A90 FD        8102            mov     r5,a
2A91 C002      8103            push    ar2
2A93 C003      8104            push    ar3
2A95 C004      8105            push    ar4
2A97 C005      8106            push    ar5
2A99 859082    8107            mov     dpl,_Joystick_Control_sloc4_1_0
2A9C 859183    8108            mov     dph,(_Joystick_Control_sloc4_1_0 + 1)
2A9F 8592F0    8109            mov     b,(_Joystick_Control_sloc4_1_0 + 2)
2AA2 E593      8110            mov     a,(_Joystick_Control_sloc4_1_0 + 3)
2AA4 120000    8111            lcall   ___fsmul
2AA7 AA82      8112            mov     r2,dpl
2AA9 AB83      8113            mov     r3,dph
2AAB ACF0      8114            mov     r4,b
2AAD FD        8115            mov     r5,a
2AAE E581      8116            mov     a,sp
2AB0 24FC      8117            add     a,#0xfc
2AB2 F581      8118            mov     sp,a
2AB4 8A82      8119            mov     dpl,r2
2AB6 8B83      8120            mov     dph,r3
2AB8 8CF0      8121            mov     b,r4
2ABA ED        8122            mov     a,r5
2ABB 120000    8123            lcall   ___fs2uchar
2ABE E582      8124            mov     a,dpl
2AC0 905160    8125            mov     dptr,#_pwm_right
2AC3 F0        8126            movx    @dptr,a
2AC4 020000    8127            ljmp    L044033?
2AC7           8128   L044032?:
2AC7           8129   ;        main.c:1328: pwm_left = vx_error*100/(vx_error+vy_error);
2AC7 8800      8130            mov     __mulint_PARM_2,r0
2AC9 8901      8131            mov     (__mulint_PARM_2 + 1),r1
2ACB 900064    8132            mov     dptr,#0x0064
2ACE C000      8133            push    ar0
2AD0 C001      8134            push    ar1
2AD2 120000    8135            lcall   __mulint
2AD5 AA82      8136            mov     r2,dpl
2AD7 AB83      8137            mov     r3,dph
2AD9 D001      8138            pop     ar1
2ADB D000      8139            pop     ar0
2ADD 90D370    8140            mov     dptr,#_Joystick_Control_vy_error_1_242
2AE0 E0        8141            movx    a,@dptr
2AE1 FC        8142            mov     r4,a
2AE2 A3        8143            inc     dptr
2AE3 E0        8144            movx    a,@dptr
2AE4 FD        8145            mov     r5,a
2AE5 EC        8146            mov     a,r4
2AE6 28        8147            add     a,r0
2AE7 F500      8148            mov     __divsint_PARM_2,a
2AE9 ED        8149            mov     a,r5
2AEA 39        8150            addc    a,r1
2AEB F501      8151            mov     (__divsint_PARM_2 + 1),a
2AED 8A82      8152            mov     dpl,r2
2AEF 8B83      8153            mov     dph,r3
2AF1 C000      8154            push    ar0
2AF3 C001      8155            push    ar1
2AF5 120000    8156            lcall   __divsint
2AF8 AA82      8157            mov     r2,dpl
2AFA D001      8158            pop     ar1
2AFC D000      8159            pop     ar0
2AFE 9051A0    8160            mov     dptr,#_pwm_left
2B01 EA        8161            mov     a,r2
2B02 F0        8162            movx    @dptr,a
2B03           8163   ;        main.c:1329: pwm_right = pwm_corr*vx_error; 
2B03 904E50    8164            mov     dptr,#_pwm_corr
2B06 E0        8165            movx    a,@dptr
2B07 FA        8166            mov     r2,a
2B08 A3        8167            inc     dptr
2B09 E0        8168            movx    a,@dptr
2B0A FB        8169            mov     r3,a
2B0B A3        8170            inc     dptr
2B0C E0        8171            movx    a,@dptr
2B0D FC        8172            mov     r4,a
2B0E A3        8173            inc     dptr
2B0F E0        8174            movx    a,@dptr
2B10 FD        8175            mov     r5,a
2B11 8882      8176            mov     dpl,r0
2B13 8983      8177            mov     dph,r1
2B15 C002      8178            push    ar2
2B17 C003      8179            push    ar3
2B19 C004      8180            push    ar4
2B1B C005      8181            push    ar5
2B1D 120000    8182            lcall   ___sint2fs
2B20 AE82      8183            mov     r6,dpl
2B22 AF83      8184            mov     r7,dph
2B24 A8F0      8185            mov     r0,b
2B26 F9        8186            mov     r1,a
2B27 D005      8187            pop     ar5
2B29 D004      8188            pop     ar4
2B2B D003      8189            pop     ar3
2B2D D002      8190            pop     ar2
2B2F C006      8191            push    ar6
2B31 C007      8192            push    ar7
2B33 C000      8193            push    ar0
2B35 C001      8194            push    ar1
2B37 8A82      8195            mov     dpl,r2
2B39 8B83      8196            mov     dph,r3
2B3B 8CF0      8197            mov     b,r4
2B3D ED        8198            mov     a,r5
2B3E 120000    8199            lcall   ___fsmul
2B41 AA82      8200            mov     r2,dpl
2B43 AB83      8201            mov     r3,dph
2B45 ACF0      8202            mov     r4,b
2B47 FD        8203            mov     r5,a
2B48 E581      8204            mov     a,sp
2B4A 24FC      8205            add     a,#0xfc
2B4C F581      8206            mov     sp,a
2B4E 8A82      8207            mov     dpl,r2
2B50 8B83      8208            mov     dph,r3
2B52 8CF0      8209            mov     b,r4
2B54 ED        8210            mov     a,r5
2B55 120000    8211            lcall   ___fs2uchar
2B58 E582      8212            mov     a,dpl
2B5A 905160    8213            mov     dptr,#_pwm_right
2B5D F0        8214            movx    @dptr,a
2B5E           8215   L044033?:
2B5E           8216   ;        main.c:1331: curr_angle += angle_diff * 1.4; // TUNE THIS 
2B5E C0E0      8217            push    _Joystick_Control_sloc5_1_0
2B60 C0E1      8218            push    (_Joystick_Control_sloc5_1_0 + 1)
2B62 C0E2      8219            push    (_Joystick_Control_sloc5_1_0 + 2)
2B64 C0E3      8220            push    (_Joystick_Control_sloc5_1_0 + 3)
2B66 903333    8221            mov     dptr,#0x3333
2B69 75F0B3    8222            mov     b,#0xB3
2B6C 743F      8223            mov     a,#0x3F
2B6E 120000    8224            lcall   ___fsmul
2B71 AA82      8225            mov     r2,dpl
2B73 AB83      8226            mov     r3,dph
2B75 ACF0      8227            mov     r4,b
2B77 FD        8228            mov     r5,a
2B78 E581      8229            mov     a,sp
2B7A 24FC      8230            add     a,#0xfc
2B7C F581      8231            mov     sp,a
2B7E 904E10    8232            mov     dptr,#_curr_angle
2B81 E0        8233            movx    a,@dptr
2B82 FE        8234            mov     r6,a
2B83 A3        8235            inc     dptr
2B84 E0        8236            movx    a,@dptr
2B85 FF        8237            mov     r7,a
2B86 A3        8238            inc     dptr
2B87 E0        8239            movx    a,@dptr
2B88 F8        8240            mov     r0,a
2B89 A3        8241            inc     dptr
2B8A E0        8242            movx    a,@dptr
2B8B F9        8243            mov     r1,a
2B8C C002      8244            push    ar2
2B8E C003      8245            push    ar3
2B90 C004      8246            push    ar4
2B92 C005      8247            push    ar5
2B94 8E82      8248            mov     dpl,r6
2B96 8F83      8249            mov     dph,r7
2B98 88F0      8250            mov     b,r0
2B9A E9        8251            mov     a,r1
2B9B 120000    8252            lcall   ___fsadd
2B9E AA82      8253            mov     r2,dpl
2BA0 AB83      8254            mov     r3,dph
2BA2 ACF0      8255            mov     r4,b
2BA4 FD        8256            mov     r5,a
2BA5 E581      8257            mov     a,sp
2BA7 24FC      8258            add     a,#0xfc
2BA9 F581      8259            mov     sp,a
2BAB 904E10    8260            mov     dptr,#_curr_angle
2BAE EA        8261            mov     a,r2
2BAF F0        8262            movx    @dptr,a
2BB0 A3        8263            inc     dptr
2BB1 EB        8264            mov     a,r3
2BB2 F0        8265            movx    @dptr,a
2BB3 A3        8266            inc     dptr
2BB4 EC        8267            mov     a,r4
2BB5 F0        8268            movx    @dptr,a
2BB6 A3        8269            inc     dptr
2BB7 ED        8270            mov     a,r5
2BB8 F0        8271            movx    @dptr,a
2BB9           8272   L044040?:
2BB9           8273   ;        main.c:1336: last_raw_angle = raw_angle; 
2BB9 904DD0    8274            mov     dptr,#_raw_angle
2BBC E0        8275            movx    a,@dptr
2BBD FA        8276            mov     r2,a
2BBE A3        8277            inc     dptr
2BBF E0        8278            movx    a,@dptr
2BC0 FB        8279            mov     r3,a
2BC1 A3        8280            inc     dptr
2BC2 E0        8281            movx    a,@dptr
2BC3 FC        8282            mov     r4,a
2BC4 A3        8283            inc     dptr
2BC5 E0        8284            movx    a,@dptr
2BC6 FD        8285            mov     r5,a
2BC7 904D90    8286            mov     dptr,#_last_raw_angle
2BCA EA        8287            mov     a,r2
2BCB F0        8288            movx    @dptr,a
2BCC A3        8289            inc     dptr
2BCD EB        8290            mov     a,r3
2BCE F0        8291            movx    @dptr,a
2BCF A3        8292            inc     dptr
2BD0 EC        8293            mov     a,r4
2BD1 F0        8294            movx    @dptr,a
2BD2 A3        8295            inc     dptr
2BD3 ED        8296            mov     a,r5
2BD4 F0        8297            movx    @dptr,a
2BD5           8298   ;        main.c:1337: return curr_angle; 
2BD5 904E10    8299            mov     dptr,#_curr_angle
2BD8 E0        8300            movx    a,@dptr
2BD9 FA        8301            mov     r2,a
2BDA A3        8302            inc     dptr
2BDB E0        8303            movx    a,@dptr
2BDC FB        8304            mov     r3,a
2BDD A3        8305            inc     dptr
2BDE E0        8306            movx    a,@dptr
2BDF FC        8307            mov     r4,a
2BE0 A3        8308            inc     dptr
2BE1 E0        8309            movx    a,@dptr
2BE2 8A82      8310            mov     dpl,r2
2BE4 8B83      8311            mov     dph,r3
2BE6 8CF0      8312            mov     b,r4
2BE8 22        8313            ret
2BE9           8314   ;------------------------------------------------------------
2BE9           8315   ;Allocation info for local variables in function 'main'
2BE9           8316   ;------------------------------------------------------------
2BE9           8317   ;c                         Allocated with name '_main_c_1_265'
2BE9           8318   ;vx                        Allocated with name '_main_vx_1_265'
2BE9           8319   ;vy                        Allocated with name '_main_vy_1_265'
2BE9           8320   ;auto_mode                 Allocated with name '_main_auto_mode_1_265'
2BE9           8321   ;pick_char                 Allocated with name '_main_pick_char_1_265'
2BE9           8322   ;angle_count               Allocated with name '_main_angle_count_1_265'
2BE9           8323   ;------------------------------------------------------------
2BE9           8324   ;        main.c:1340: void main (void)
2BE9           8325   ;        -----------------------------------------
2BE9           8326   ;         function main
2BE9           8327   ;        -----------------------------------------
2BE9           8328   _main:
2BE9           8329   ;        main.c:1343: xdata int vx = 0, vy = 0; 
2BE9 90D450    8330            mov     dptr,#_main_vx_1_265
2BEC E4        8331            clr     a
2BED F0        8332            movx    @dptr,a
2BEE A3        8333            inc     dptr
2BEF F0        8334            movx    @dptr,a
2BF0 90D490    8335            mov     dptr,#_main_vy_1_265
2BF3 E4        8336            clr     a
2BF4 F0        8337            movx    @dptr,a
2BF5 A3        8338            inc     dptr
2BF6 F0        8339            movx    @dptr,a
2BF7           8340   ;        main.c:1344: xdata int auto_mode = 0;
2BF7 90D4E0    8341            mov     dptr,#_main_auto_mode_1_265
2BFA E4        8342            clr     a
2BFB F0        8343            movx    @dptr,a
2BFC A3        8344            inc     dptr
2BFD F0        8345            movx    @dptr,a
2BFE           8346   ;        main.c:1345: xdata char pick_char = '0';
2BFE 90D530    8347            mov     dptr,#_main_pick_char_1_265
2C01 7430      8348            mov     a,#0x30
2C03 F0        8349            movx    @dptr,a
2C04           8350   ;        main.c:1348: Init_all();
2C04 120000    8351            lcall   _Init_all
2C07           8352   ;        main.c:1349: BMM150_Init();
2C07 120000    8353            lcall   _BMM150_Init
2C0A           8354   ;        main.c:1350: waitms(500);
2C0A 9001F4    8355            mov     dptr,#0x01F4
2C0D 120000    8356            lcall   _waitms
2C10           8357   ;        main.c:1351: UART1_Init(9600);
2C10 902580    8358            mov     dptr,#0x2580
2C13 E4        8359            clr     a
2C14 F5F0      8360            mov     b,a
2C16 120000    8361            lcall   _UART1_Init
2C19           8362   ;        main.c:1353: ReceptionOff();
2C19 120000    8363            lcall   _ReceptionOff
2C1C           8364   ;        main.c:1356: SendATCommand("AT+VER\r\n");
2C1C 902690    8365            mov     dptr,#__str_11
2C1F 75F080    8366            mov     b,#0x80
2C22 120000    8367            lcall   _SendATCommand
2C25           8368   ;        main.c:1357: SendATCommand("AT+BAUD\r\n");
2C25 9026D0    8369            mov     dptr,#__str_12
2C28 75F080    8370            mov     b,#0x80
2C2B 120000    8371            lcall   _SendATCommand
2C2E           8372   ;        main.c:1358: SendATCommand("AT+RFID\r\n");
2C2E 902710    8373            mov     dptr,#__str_13
2C31 75F080    8374            mov     b,#0x80
2C34 120000    8375            lcall   _SendATCommand
2C37           8376   ;        main.c:1359: SendATCommand("AT+DVID\r\n");
2C37 902750    8377            mov     dptr,#__str_14
2C3A 75F080    8378            mov     b,#0x80
2C3D 120000    8379            lcall   _SendATCommand
2C40           8380   ;        main.c:1360: SendATCommand("AT+RFC002\r\n");
2C40 902790    8381            mov     dptr,#__str_15
2C43 75F080    8382            mov     b,#0x80
2C46 120000    8383            lcall   _SendATCommand
2C49           8384   ;        main.c:1361: SendATCommand("AT+POWE\r\n");
2C49 9027D0    8385            mov     dptr,#__str_16
2C4C 75F080    8386            mov     b,#0x80
2C4F 120000    8387            lcall   _SendATCommand
2C52           8388   ;        main.c:1362: SendATCommand("AT+CLSS\r\n");
2C52 902810    8389            mov     dptr,#__str_17
2C55 75F080    8390            mov     b,#0x80
2C58 120000    8391            lcall   _SendATCommand
2C5B           8392   ;        main.c:1363: SendATCommand("AT+DVIDEF11\r\n");  
2C5B 902850    8393            mov     dptr,#__str_18
2C5E 75F080    8394            mov     b,#0x80
2C61 120000    8395            lcall   _SendATCommand
2C64           8396   ;        main.c:1366: L_bridge_1 = 0; 
2C64 C2A1      8397            clr     _P2_1
2C66           8398   ;        main.c:1367: L_bridge_2 = 0; 
2C66 C2A2      8399            clr     _P2_2
2C68           8400   ;        main.c:1368: R_bridge_1 = 0; 
2C68 C2A4      8401            clr     _P2_4
2C6A           8402   ;        main.c:1369: R_bridge_2 = 0; 
2C6A C2A3      8403            clr     _P2_3
2C6C           8404   ;        main.c:1372: curr_angle = Read_angle();
2C6C 120000    8405            lcall   _Read_angle
2C6F AA82      8406            mov     r2,dpl
2C71 AB83      8407            mov     r3,dph
2C73 ACF0      8408            mov     r4,b
2C75 FD        8409            mov     r5,a
2C76 904E10    8410            mov     dptr,#_curr_angle
2C79 EA        8411            mov     a,r2
2C7A F0        8412            movx    @dptr,a
2C7B A3        8413            inc     dptr
2C7C EB        8414            mov     a,r3
2C7D F0        8415            movx    @dptr,a
2C7E A3        8416            inc     dptr
2C7F EC        8417            mov     a,r4
2C80 F0        8418            movx    @dptr,a
2C81 A3        8419            inc     dptr
2C82 ED        8420            mov     a,r5
2C83 F0        8421            movx    @dptr,a
2C84           8422   ;        main.c:1373: servo_moveaway();
2C84 120000    8423            lcall   _servo_moveaway
2C87           8424   ;        main.c:1374: waitms(1000);
2C87 9003E8    8425            mov     dptr,#0x03E8
2C8A 120000    8426            lcall   _waitms
2C8D           8427   ;        main.c:1375: while(1){  
2C8D           8428   L045018?:
2C8D           8429   ;        main.c:1377: temp = Read_angle();
2C8D 120000    8430            lcall   _Read_angle
2C90 AA82      8431            mov     r2,dpl
2C92 AB83      8432            mov     r3,dph
2C94 ACF0      8433            mov     r4,b
2C96 FD        8434            mov     r5,a
2C97 905320    8435            mov     dptr,#_temp
2C9A EA        8436            mov     a,r2
2C9B F0        8437            movx    @dptr,a
2C9C A3        8438            inc     dptr
2C9D EB        8439            mov     a,r3
2C9E F0        8440            movx    @dptr,a
2C9F A3        8441            inc     dptr
2CA0 EC        8442            mov     a,r4
2CA1 F0        8443            movx    @dptr,a
2CA2 A3        8444            inc     dptr
2CA3 ED        8445            mov     a,r5
2CA4 F0        8446            movx    @dptr,a
2CA5           8447   ;        main.c:1379: if (distance < 500) 
2CA5 9052E0    8448            mov     dptr,#_distance
2CA8 E0        8449            movx    a,@dptr
2CA9 FA        8450            mov     r2,a
2CAA A3        8451            inc     dptr
2CAB E0        8452            movx    a,@dptr
2CAC FB        8453            mov     r3,a
2CAD C3        8454            clr     c
2CAE EA        8455            mov     a,r2
2CAF 94F4      8456            subb    a,#0xF4
2CB1 EB        8457            mov     a,r3
2CB2 6480      8458            xrl     a,#0x80
2CB4 9481      8459            subb    a,#0x81
2CB6 5000      8460            jnc     L045004?
2CB8           8461   ;        main.c:1381: if(pick_char=='1'){
2CB8 90D530    8462            mov     dptr,#_main_pick_char_1_265
2CBB E0        8463            movx    a,@dptr
2CBC FA        8464            mov     r2,a
2CBD BA31D0    8465            cjne    r2,#0x31,L045004?
2CC0           8466   ;        main.c:1382: servo_pick();
2CC0 120000    8467            lcall   _servo_pick
2CC3           8468   ;        main.c:1383: waitms(1000);
2CC3 9003E8    8469            mov     dptr,#0x03E8
2CC6 120000    8470            lcall   _waitms
2CC9           8471   ;        main.c:1384: pick_char = '0';
2CC9 90D530    8472            mov     dptr,#_main_pick_char_1_265
2CCC 7430      8473            mov     a,#0x30
2CCE F0        8474            movx    @dptr,a
2CCF           8475   L045004?:
2CCF           8476   ;        main.c:1387: if(auto_mode){
2CCF 90D4E0    8477            mov     dptr,#_main_auto_mode_1_265
2CD2 E0        8478            movx    a,@dptr
2CD3 FA        8479            mov     r2,a
2CD4 A3        8480            inc     dptr
2CD5 E0        8481            movx    a,@dptr
2CD6 FB        8482            mov     r3,a
2CD7 4A        8483            orl     a,r2
2CD8 6000      8484            jz      L045006?
2CDA           8485   ;        main.c:1388: Auto_mode_slave();
2CDA 120000    8486            lcall   _Auto_mode_slave
2CDD           8487   ;        main.c:1389: auto_mode = 0;
2CDD 90D4E0    8488            mov     dptr,#_main_auto_mode_1_265
2CE0 E4        8489            clr     a
2CE1 F0        8490            movx    @dptr,a
2CE2 A3        8491            inc     dptr
2CE3 F0        8492            movx    @dptr,a
2CE4           8493   L045006?:
2CE4           8494   ;        main.c:1391: if(RXU1()) // Something has arrived
2CE4 120000    8495            lcall   _RXU1
2CE7 5000      8496            jnc     L045018?
2CE9           8497   ;        main.c:1393: c=getchar1();
2CE9 120000    8498            lcall   _getchar1
2CEC AA82      8499            mov     r2,dpl
2CEE           8500   ;        main.c:1394: if(c=='!') // Master is sending message
2CEE BA2150    8501            cjne    r2,#0x21,L045035?
2CF1 8000      8502            sjmp    L045036?
2CF3           8503   L045035?:
2CF3 020000    8504            ljmp    L045013?
2CF6           8505   L045036?:
2CF6           8506   ;        main.c:1396: getstr1(buff, sizeof(buff)-1);
2CF6 757013    8507            mov     _getstr1_PARM_2,#0x13
2CF9 9056E0    8508            mov     dptr,#_buff
2CFC 75F040    8509            mov     b,#0x40
2CFF 120000    8510            lcall   _getstr1
2D02           8511   ;        main.c:1397: if(strlen(buff)==11)
2D02 9056E0    8512            mov     dptr,#_buff
2D05 75F040    8513            mov     b,#0x40
2D08 120000    8514            lcall   _strlen
2D0B AB82      8515            mov     r3,dpl
2D0D AC83      8516            mov     r4,dph
2D0F BB0B10    8517            cjne    r3,#0x0B,L045037?
2D12 BC0010    8518            cjne    r4,#0x00,L045037?
2D15 8000      8519            sjmp    L045038?
2D17           8520   L045037?:
2D17 020000    8521            ljmp    L045008?
2D1A           8522   L045038?:
2D1A           8523   ;        main.c:1399: printf("Master says: %s\r\n", buff);
2D1A 74E0      8524            mov     a,#_buff
2D1C C0E0      8525            push    acc
2D1E 7456      8526            mov     a,#(_buff >> 8)
2D20 C0E0      8527            push    acc
2D22 7440      8528            mov     a,#0x40
2D24 C0E0      8529            push    acc
2D26 74D0      8530            mov     a,#__str_19
2D28 C0E0      8531            push    acc
2D2A 742A      8532            mov     a,#(__str_19 >> 8)
2D2C C0E0      8533            push    acc
2D2E 7480      8534            mov     a,#0x80
2D30 C0E0      8535            push    acc
2D32 120000    8536            lcall   _printf
2D35 E581      8537            mov     a,sp
2D37 24FA      8538            add     a,#0xfa
2D39 F581      8539            mov     sp,a
2D3B           8540   ;        main.c:1400: sscanf(buff, "%03d,%03d,%c,%01d", &vx, &vy, &pick_char, &auto_mode);
2D3B 74E0      8541            mov     a,#_main_auto_mode_1_265
2D3D C0E0      8542            push    acc
2D3F 74D4      8543            mov     a,#(_main_auto_mode_1_265 >> 8)
2D41 C0E0      8544            push    acc
2D43 E4        8545            clr     a
2D44 C0E0      8546            push    acc
2D46 7430      8547            mov     a,#_main_pick_char_1_265
2D48 C0E0      8548            push    acc
2D4A 74D5      8549            mov     a,#(_main_pick_char_1_265 >> 8)
2D4C C0E0      8550            push    acc
2D4E E4        8551            clr     a
2D4F C0E0      8552            push    acc
2D51 7490      8553            mov     a,#_main_vy_1_265
2D53 C0E0      8554            push    acc
2D55 74D4      8555            mov     a,#(_main_vy_1_265 >> 8)
2D57 C0E0      8556            push    acc
2D59 E4        8557            clr     a
2D5A C0E0      8558            push    acc
2D5C 7450      8559            mov     a,#_main_vx_1_265
2D5E C0E0      8560            push    acc
2D60 74D4      8561            mov     a,#(_main_vx_1_265 >> 8)
2D62 C0E0      8562            push    acc
2D64 E4        8563            clr     a
2D65 C0E0      8564            push    acc
2D67 7410      8565            mov     a,#__str_20
2D69 C0E0      8566            push    acc
2D6B 742B      8567            mov     a,#(__str_20 >> 8)
2D6D C0E0      8568            push    acc
2D6F 7480      8569            mov     a,#0x80
2D71 C0E0      8570            push    acc
2D73 74E0      8571            mov     a,#_buff
2D75 C0E0      8572            push    acc
2D77 7456      8573            mov     a,#(_buff >> 8)
2D79 C0E0      8574            push    acc
2D7B 7440      8575            mov     a,#0x40
2D7D C0E0      8576            push    acc
2D7F 120000    8577            lcall   _sscanf
2D82 E581      8578            mov     a,sp
2D84 24EE      8579            add     a,#0xee
2D86 F581      8580            mov     sp,a
2D88           8581   ;        main.c:1402: curr_angle = Joystick_Control(&vx, &vy);
2D88 753090    8582            mov     _Joystick_Control_PARM_2,#_main_vy_1_265
2D8B 7531D4    8583            mov     (_Joystick_Control_PARM_2 + 1),#(_main_vy_1_265 >> 8)
2D8E 753200    8584            mov     (_Joystick_Control_PARM_2 + 2),#0x00
2D91 90D450    8585            mov     dptr,#_main_vx_1_265
2D94 75F000    8586            mov     b,#0x00
2D97 120000    8587            lcall   _Joystick_Control
2D9A AB82      8588            mov     r3,dpl
2D9C AC83      8589            mov     r4,dph
2D9E ADF0      8590            mov     r5,b
2DA0 FE        8591            mov     r6,a
2DA1 904E10    8592            mov     dptr,#_curr_angle
2DA4 EB        8593            mov     a,r3
2DA5 F0        8594            movx    @dptr,a
2DA6 A3        8595            inc     dptr
2DA7 EC        8596            mov     a,r4
2DA8 F0        8597            movx    @dptr,a
2DA9 A3        8598            inc     dptr
2DAA ED        8599            mov     a,r5
2DAB F0        8600            movx    @dptr,a
2DAC A3        8601            inc     dptr
2DAD EE        8602            mov     a,r6
2DAE F0        8603            movx    @dptr,a
2DAF 020000    8604            ljmp    L045018?
2DB2           8605   L045008?:
2DB2           8606   ;        main.c:1405: printf("*** BAD MESSAGE ***: %s\r\n", buff);
2DB2 74E0      8607            mov     a,#_buff
2DB4 C0E0      8608            push    acc
2DB6 7456      8609            mov     a,#(_buff >> 8)
2DB8 C0E0      8610            push    acc
2DBA 7440      8611            mov     a,#0x40
2DBC C0E0      8612            push    acc
2DBE 7450      8613            mov     a,#__str_21
2DC0 C0E0      8614            push    acc
2DC2 742B      8615            mov     a,#(__str_21 >> 8)
2DC4 C0E0      8616            push    acc
2DC6 7480      8617            mov     a,#0x80
2DC8 C0E0      8618            push    acc
2DCA 120000    8619            lcall   _printf
2DCD E581      8620            mov     a,sp
2DCF 24FA      8621            add     a,#0xfa
2DD1 F581      8622            mov     sp,a
2DD3 020000    8623            ljmp    L045018?
2DD6           8624   L045013?:
2DD6           8625   ;        main.c:1408: else if(c=='@') // Master wants slave data
2DD6 BA4090    8626            cjne    r2,#0x40,L045039?
2DD9 8000      8627            sjmp    L045040?
2DDB           8628   L045039?:
2DDB 020000    8629            ljmp    L045018?
2DDE           8630   L045040?:
2DDE           8631   ;        main.c:1410: sprintf(buff, "0,00,%04ld,%05d,%03d\n", freq100, weight, (int)curr_angle);
2DDE 904E10    8632            mov     dptr,#_curr_angle
2DE1 E0        8633            movx    a,@dptr
2DE2 FA        8634            mov     r2,a
2DE3 A3        8635            inc     dptr
2DE4 E0        8636            movx    a,@dptr
2DE5 FB        8637            mov     r3,a
2DE6 A3        8638            inc     dptr
2DE7 E0        8639            movx    a,@dptr
2DE8 FC        8640            mov     r4,a
2DE9 A3        8641            inc     dptr
2DEA E0        8642            movx    a,@dptr
2DEB 8A82      8643            mov     dpl,r2
2DED 8B83      8644            mov     dph,r3
2DEF 8CF0      8645            mov     b,r4
2DF1 120000    8646            lcall   ___fs2sint
2DF4 AA82      8647            mov     r2,dpl
2DF6 AB83      8648            mov     r3,dph
2DF8 C002      8649            push    ar2
2DFA C003      8650            push    ar3
2DFC 904CD0    8651            mov     dptr,#_weight
2DFF E0        8652            movx    a,@dptr
2E00 C0E0      8653            push    acc
2E02 A3        8654            inc     dptr
2E03 E0        8655            movx    a,@dptr
2E04 C0E0      8656            push    acc
2E06 9056A0    8657            mov     dptr,#_freq100
2E09 E0        8658            movx    a,@dptr
2E0A C0E0      8659            push    acc
2E0C A3        8660            inc     dptr
2E0D E0        8661            movx    a,@dptr
2E0E C0E0      8662            push    acc
2E10 A3        8663            inc     dptr
2E11 E0        8664            movx    a,@dptr
2E12 C0E0      8665            push    acc
2E14 A3        8666            inc     dptr
2E15 E0        8667            movx    a,@dptr
2E16 C0E0      8668            push    acc
2E18 7490      8669            mov     a,#__str_10
2E1A C0E0      8670            push    acc
2E1C 741D      8671            mov     a,#(__str_10 >> 8)
2E1E C0E0      8672            push    acc
2E20 7480      8673            mov     a,#0x80
2E22 C0E0      8674            push    acc
2E24 74E0      8675            mov     a,#_buff
2E26 C0E0      8676            push    acc
2E28 7456      8677            mov     a,#(_buff >> 8)
2E2A C0E0      8678            push    acc
2E2C 7440      8679            mov     a,#0x40
2E2E C0E0      8680            push    acc
2E30 120000    8681            lcall   _sprintf
2E33 E581      8682            mov     a,sp
2E35 24F2      8683            add     a,#0xf2
2E37 F581      8684            mov     sp,a
2E39           8685   ;        main.c:1411: waitms(5); // The radio seems to need this delay...
2E39 900005    8686            mov     dptr,#0x0005
2E3C 120000    8687            lcall   _waitms
2E3F           8688   ;        main.c:1412: sendstr1(buff);
2E3F 9056E0    8689            mov     dptr,#_buff
2E42 75F040    8690            mov     b,#0x40
2E45 120000    8691            lcall   _sendstr1
2E48 020000    8692            ljmp    L045018?
2E4B           8693            rseg R_CSEG
2E4B           8694   
0000           8695            rseg R_XINIT
0000           8696   __xinit__pwm_counter:
0000 0000      8697            db 0x00,0x00    ; 0
0002           8698   __xinit__servo_counter:
0002 0000      8699            db 0x00,0x00    ; 0
0004           8700   __xinit__pwm_left:
0004 00        8701            db 0x00         ; 0
0005           8702   __xinit__pwm_right:
0005 00        8703            db 0x00         ; 0
0006           8704   __xinit__L_motor_dir:
0006 01        8705            db 0x01         ; 1
0007           8706   __xinit__R_motor_dir:
0007 01        8707            db 0x01         ; 1
0008           8708   __xinit__servo_base:
0008 32        8709            db 0x32         ; 50
0009           8710   __xinit__servo_arm:
0009 32        8711            db 0x32         ; 50
000A           8712   __xinit__vx_thres:
000A A100      8713            db 0xA1,0x00    ;  161
000C           8714   __xinit__vy_thres:
000C A600      8715            db 0xA6,0x00    ;  166
000E           8716   __xinit__vx:
000E 0000      8717            db 0x00,0x00    ;  0
0010           8718   __xinit__vy:
0010 0000      8719            db 0x00,0x00    ;  0
0012           8720   __xinit__fre_mea_count:
0012 0000      8721            db 0x00,0x00    ; 0
0014           8722   __xinit__weight_mea_count:
0014 0000      8723            db 0x00,0x00    ; 0
0016           8724   __xinit__seed:
0016 3930      8725            db 0x39,0x30    ; 12345
0018           8726   __xinit__pwm_corr:
0018 3333733F  8727            db 0x33,0x33,0x73,0x3F  ;  9.500000e-001
001C           8728   __xinit__curr_angle:
001C 00000000  8729            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0020           8730   __xinit__raw_angle:
0020 00000000  8731            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0024           8732   __xinit__last_raw_angle:
0024 00000000  8733            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0028           8734   __xinit__angle_diff:
0028 00000000  8735            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
002C           8736   __xinit__mea_yes:
002C 01        8737            db 0x01         ;  1
002D           8738   __xinit__weight:
002D 0000      8739            db 0x00,0x00    ; 0
002F           8740   __xinit__duration:
002F 00000000  8741            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0033           8742   
0000           8743            rseg R_CONST
0000           8744   __str_0:
0000 4572726F  8745            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
0035 0D        8746            db 0x0D
0036 0A        8747            db 0x0A
0037 00        8748            db 0x00
0038           8749   __str_1:
0038 424D4D31  8750            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
0068 0D        8751            db 0x0D
0069 0A        8752            db 0x0A
006A 00        8753            db 0x00
006B           8754   __str_2:
006B 436F6D6D  8755            db 'Command: %s'
     616E643A
     202573
0076 00        8756            db 0x00
0077           8757   __str_3:
0077 52657370  8758            db 'Response: %s'
     6F6E7365
     3A202573
0083 0D        8759            db 0x0D
0084 0A        8760            db 0x0A
0085 00        8761            db 0x00
0086           8762   __str_4:
0086 41542B44  8763            db 'AT+DVID0000'
     56494430
     303030
0091 0D        8764            db 0x0D
0092 0A        8765            db 0x0A
0093 00        8766            db 0x00
0094           8767   __str_5:
0094 54696D65  8768            db 'Time out'
     206F7574
009C 0D        8769            db 0x0D
009D 0A        8770            db 0x0A
009E 00        8771            db 0x00
009F           8772   __str_6:
009F 6D617374  8773            db 'master_messgae_auto_mode: %s'
     65725F6D
     65737367
     61655F61
     75746F5F
     6D6F6465
     3A202573
00BB 0D        8774            db 0x0D
00BC 0A        8775            db 0x0A
00BD 00        8776            db 0x00
00BE           8777   __str_7:
00BE 25303364  8778            db '%03d,%03d,%01d,%01d'
     2C253033
     642C2530
     31642C25
     303164
00D1 00        8779            db 0x00
00D2           8780   __str_8:
00D2 25303164  8781            db '%01d,%02d,%ld,%05d,%03d'
     2C253032
     642C256C
     642C2530
     35642C25
     303364
00E9 0A        8782            db 0x0A
00EA 00        8783            db 0x00
00EB           8784   __str_9:
00EB 663A2530  8785            db 'f:%04ld, d1:%d, d2:%d, bound_dectect: %d'
     346C642C
     2064313A
     25642C20
     64323A25
     642C2062
     6F756E64
     5F646563
     74656374
     3A202564
0113 0D        8786            db 0x0D
0114 0A        8787            db 0x0A
0115 00        8788            db 0x00
0116           8789   __str_10:
0116 302C3030  8790            db '0,00,%04ld,%05d,%03d'
     2C253034
     6C642C25
     3035642C
     25303364
012A 0A        8791            db 0x0A
012B 00        8792            db 0x00
012C           8793   __str_11:
012C 41542B56  8794            db 'AT+VER'
     4552
0132 0D        8795            db 0x0D
0133 0A        8796            db 0x0A
0134 00        8797            db 0x00
0135           8798   __str_12:
0135 41542B42  8799            db 'AT+BAUD'
     415544
013C 0D        8800            db 0x0D
013D 0A        8801            db 0x0A
013E 00        8802            db 0x00
013F           8803   __str_13:
013F 41542B52  8804            db 'AT+RFID'
     464944
0146 0D        8805            db 0x0D
0147 0A        8806            db 0x0A
0148 00        8807            db 0x00
0149           8808   __str_14:
0149 41542B44  8809            db 'AT+DVID'
     564944
0150 0D        8810            db 0x0D
0151 0A        8811            db 0x0A
0152 00        8812            db 0x00
0153           8813   __str_15:
0153 41542B52  8814            db 'AT+RFC002'
     46433030
     32
015C 0D        8815            db 0x0D
015D 0A        8816            db 0x0A
015E 00        8817            db 0x00
015F           8818   __str_16:
015F 41542B50  8819            db 'AT+POWE'
     4F5745
0166 0D        8820            db 0x0D
0167 0A        8821            db 0x0A
0168 00        8822            db 0x00
0169           8823   __str_17:
0169 41542B43  8824            db 'AT+CLSS'
     4C5353
0170 0D        8825            db 0x0D
0171 0A        8826            db 0x0A
0172 00        8827            db 0x00
0173           8828   __str_18:
0173 41542B44  8829            db 'AT+DVIDEF11'
     56494445
     463131
017E 0D        8830            db 0x0D
017F 0A        8831            db 0x0A
0180 00        8832            db 0x00
0181           8833   __str_19:
0181 4D617374  8834            db 'Master says: %s'
     65722073
     6179733A
     202573
0190 0D        8835            db 0x0D
0191 0A        8836            db 0x0A
0192 00        8837            db 0x00
0193           8838   __str_20:
0193 25303364  8839            db '%03d,%03d,%c,%01d'
     2C253033
     642C2563
     2C253031
     64
01A4 00        8840            db 0x00
01A5           8841   __str_21:
01A5 2A2A2A20  8842            db '*** BAD MESSAGE ***: %s'
     42414420
     4D455353
     41474520
     2A2A2A3A
     202573
01BC 0D        8843            db 0x0D
01BD 0A        8844            db 0x0A
01BE 00        8845            db 0x00
01BF           8846   
0096           8847            CSEG
0096           8848   
0096           8849   end
