0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Apr 01 14:33:08 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _check_bound_PARM_2
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Joystick_Control
0000             30            public _Auto_mode_slave
0000             31            public _get_random_90_250
0000             32            public _simple_rand
0000             33            public _Move_forward
0000             34            public _Right_angle
0000             35            public _Move_back_ms
0000             36            public _Init_all
0000             37            public _check_bound
0000             38            public _servo_pick
0000             39            public _Timer5_ISR
0000             40            public _ReadHX711
0000             41            public _ADC_at_Pin
0000             42            public _InitPinADC
0000             43            public _InitADC
0000             44            public _Set_Pin_Input
0000             45            public _Set_Pin_Output
0000             46            public _ReceptionOff
0000             47            public _SendATCommand
0000             48            public _waitms_or_RI1
0000             49            public _RXU1
0000             50            public _getstr1
0000             51            public _getchar1_with_timeout
0000             52            public _getchar1
0000             53            public _sendstr1
0000             54            public _putchar1
0000             55            public _UART1_Init
0000             56            public _waitms
0000             57            public _Timer3us
0000             58            public __c51_external_startup
0000             59            public _weight
0000             60            public _mea_yes
0000             61            public _angle_diff
0000             62            public _last_raw_angle
0000             63            public _raw_angle
0000             64            public _curr_angle
0000             65            public _pwm_corr
0000             66            public _seed
0000             67            public _weight_mea_count
0000             68            public _fre_mea_count
0000             69            public _vy
0000             70            public _vx
0000             71            public _vy_thres
0000             72            public _vx_thres
0000             73            public _servo_arm
0000             74            public _servo_base
0000             75            public _R_motor_dir
0000             76            public _L_motor_dir
0000             77            public _pwm_right
0000             78            public _pwm_left
0000             79            public _servo_counter
0000             80            public _pwm_counter
0000             81            public _temp
0000             82            public _dig_xyz1
0000             83            public _dig_xy2
0000             84            public _dig_xy1
0000             85            public _dig_z4
0000             86            public _dig_z3
0000             87            public _dig_z2
0000             88            public _dig_z1
0000             89            public _dig_y2
0000             90            public _dig_y1
0000             91            public _dig_x2
0000             92            public _dig_x1
0000             93            public _d2
0000             94            public _d1
0000             95            public _freq100
0000             96            public _buff
0000             97            public _Joystick_Control_PARM_2
0000             98            public _getstr1_PARM_2
0000             99   ;--------------------------------------------------------
0000            100   ; Special Function Registers
0000            101   ;--------------------------------------------------------
0000            102   _ACC            DATA 0xe0
0000            103   _ADC0ASAH       DATA 0xb6
0000            104   _ADC0ASAL       DATA 0xb5
0000            105   _ADC0ASCF       DATA 0xa1
0000            106   _ADC0ASCT       DATA 0xc7
0000            107   _ADC0CF0        DATA 0xbc
0000            108   _ADC0CF1        DATA 0xb9
0000            109   _ADC0CF2        DATA 0xdf
0000            110   _ADC0CN0        DATA 0xe8
0000            111   _ADC0CN1        DATA 0xb2
0000            112   _ADC0CN2        DATA 0xb3
0000            113   _ADC0GTH        DATA 0xc4
0000            114   _ADC0GTL        DATA 0xc3
0000            115   _ADC0H          DATA 0xbe
0000            116   _ADC0L          DATA 0xbd
0000            117   _ADC0LTH        DATA 0xc6
0000            118   _ADC0LTL        DATA 0xc5
0000            119   _ADC0MX         DATA 0xbb
0000            120   _B              DATA 0xf0
0000            121   _CKCON0         DATA 0x8e
0000            122   _CKCON1         DATA 0xa6
0000            123   _CLEN0          DATA 0xc6
0000            124   _CLIE0          DATA 0xc7
0000            125   _CLIF0          DATA 0xe8
0000            126   _CLKSEL         DATA 0xa9
0000            127   _CLOUT0         DATA 0xd1
0000            128   _CLU0CF         DATA 0xb1
0000            129   _CLU0FN         DATA 0xaf
0000            130   _CLU0MX         DATA 0x84
0000            131   _CLU1CF         DATA 0xb3
0000            132   _CLU1FN         DATA 0xb2
0000            133   _CLU1MX         DATA 0x85
0000            134   _CLU2CF         DATA 0xb6
0000            135   _CLU2FN         DATA 0xb5
0000            136   _CLU2MX         DATA 0x91
0000            137   _CLU3CF         DATA 0xbf
0000            138   _CLU3FN         DATA 0xbe
0000            139   _CLU3MX         DATA 0xae
0000            140   _CMP0CN0        DATA 0x9b
0000            141   _CMP0CN1        DATA 0x99
0000            142   _CMP0MD         DATA 0x9d
0000            143   _CMP0MX         DATA 0x9f
0000            144   _CMP1CN0        DATA 0xbf
0000            145   _CMP1CN1        DATA 0xac
0000            146   _CMP1MD         DATA 0xab
0000            147   _CMP1MX         DATA 0xaa
0000            148   _CRC0CN0        DATA 0xce
0000            149   _CRC0CN1        DATA 0x86
0000            150   _CRC0CNT        DATA 0xd3
0000            151   _CRC0DAT        DATA 0xcb
0000            152   _CRC0FLIP       DATA 0xcf
0000            153   _CRC0IN         DATA 0xca
0000            154   _CRC0ST         DATA 0xd2
0000            155   _DAC0CF0        DATA 0x91
0000            156   _DAC0CF1        DATA 0x92
0000            157   _DAC0H          DATA 0x85
0000            158   _DAC0L          DATA 0x84
0000            159   _DAC1CF0        DATA 0x93
0000            160   _DAC1CF1        DATA 0x94
0000            161   _DAC1H          DATA 0x8a
0000            162   _DAC1L          DATA 0x89
0000            163   _DAC2CF0        DATA 0x95
0000            164   _DAC2CF1        DATA 0x96
0000            165   _DAC2H          DATA 0x8c
0000            166   _DAC2L          DATA 0x8b
0000            167   _DAC3CF0        DATA 0x9a
0000            168   _DAC3CF1        DATA 0x9c
0000            169   _DAC3H          DATA 0x8e
0000            170   _DAC3L          DATA 0x8d
0000            171   _DACGCF0        DATA 0x88
0000            172   _DACGCF1        DATA 0x98
0000            173   _DACGCF2        DATA 0xa2
0000            174   _DERIVID        DATA 0xad
0000            175   _DEVICEID       DATA 0xb5
0000            176   _DPH            DATA 0x83
0000            177   _DPL            DATA 0x82
0000            178   _EIE1           DATA 0xe6
0000            179   _EIE2           DATA 0xf3
0000            180   _EIP1           DATA 0xbb
0000            181   _EIP1H          DATA 0xee
0000            182   _EIP2           DATA 0xed
0000            183   _EIP2H          DATA 0xf6
0000            184   _EMI0CN         DATA 0xe7
0000            185   _FLKEY          DATA 0xb7
0000            186   _HFO0CAL        DATA 0xc7
0000            187   _HFO1CAL        DATA 0xd6
0000            188   _HFOCN          DATA 0xef
0000            189   _I2C0ADM        DATA 0xff
0000            190   _I2C0CN0        DATA 0xba
0000            191   _I2C0DIN        DATA 0xbc
0000            192   _I2C0DOUT       DATA 0xbb
0000            193   _I2C0FCN0       DATA 0xad
0000            194   _I2C0FCN1       DATA 0xab
0000            195   _I2C0FCT        DATA 0xf5
0000            196   _I2C0SLAD       DATA 0xbd
0000            197   _I2C0STAT       DATA 0xb9
0000            198   _IE             DATA 0xa8
0000            199   _IP             DATA 0xb8
0000            200   _IPH            DATA 0xf2
0000            201   _IT01CF         DATA 0xe4
0000            202   _LFO0CN         DATA 0xb1
0000            203   _P0             DATA 0x80
0000            204   _P0MASK         DATA 0xfe
0000            205   _P0MAT          DATA 0xfd
0000            206   _P0MDIN         DATA 0xf1
0000            207   _P0MDOUT        DATA 0xa4
0000            208   _P0SKIP         DATA 0xd4
0000            209   _P1             DATA 0x90
0000            210   _P1MASK         DATA 0xee
0000            211   _P1MAT          DATA 0xed
0000            212   _P1MDIN         DATA 0xf2
0000            213   _P1MDOUT        DATA 0xa5
0000            214   _P1SKIP         DATA 0xd5
0000            215   _P2             DATA 0xa0
0000            216   _P2MASK         DATA 0xfc
0000            217   _P2MAT          DATA 0xfb
0000            218   _P2MDIN         DATA 0xf3
0000            219   _P2MDOUT        DATA 0xa6
0000            220   _P2SKIP         DATA 0xcc
0000            221   _P3             DATA 0xb0
0000            222   _P3MDIN         DATA 0xf4
0000            223   _P3MDOUT        DATA 0x9c
0000            224   _PCA0CENT       DATA 0x9e
0000            225   _PCA0CLR        DATA 0x9c
0000            226   _PCA0CN0        DATA 0xd8
0000            227   _PCA0CPH0       DATA 0xfc
0000            228   _PCA0CPH1       DATA 0xea
0000            229   _PCA0CPH2       DATA 0xec
0000            230   _PCA0CPH3       DATA 0xf5
0000            231   _PCA0CPH4       DATA 0x85
0000            232   _PCA0CPH5       DATA 0xde
0000            233   _PCA0CPL0       DATA 0xfb
0000            234   _PCA0CPL1       DATA 0xe9
0000            235   _PCA0CPL2       DATA 0xeb
0000            236   _PCA0CPL3       DATA 0xf4
0000            237   _PCA0CPL4       DATA 0x84
0000            238   _PCA0CPL5       DATA 0xdd
0000            239   _PCA0CPM0       DATA 0xda
0000            240   _PCA0CPM1       DATA 0xdb
0000            241   _PCA0CPM2       DATA 0xdc
0000            242   _PCA0CPM3       DATA 0xae
0000            243   _PCA0CPM4       DATA 0xaf
0000            244   _PCA0CPM5       DATA 0xcc
0000            245   _PCA0H          DATA 0xfa
0000            246   _PCA0L          DATA 0xf9
0000            247   _PCA0MD         DATA 0xd9
0000            248   _PCA0POL        DATA 0x96
0000            249   _PCA0PWM        DATA 0xf7
0000            250   _PCON0          DATA 0x87
0000            251   _PCON1          DATA 0xcd
0000            252   _PFE0CN         DATA 0xc1
0000            253   _PRTDRV         DATA 0xf6
0000            254   _PSCTL          DATA 0x8f
0000            255   _PSTAT0         DATA 0xaa
0000            256   _PSW            DATA 0xd0
0000            257   _REF0CN         DATA 0xd1
0000            258   _REG0CN         DATA 0xc9
0000            259   _REVID          DATA 0xb6
0000            260   _RSTSRC         DATA 0xef
0000            261   _SBCON1         DATA 0x94
0000            262   _SBRLH1         DATA 0x96
0000            263   _SBRLL1         DATA 0x95
0000            264   _SBUF           DATA 0x99
0000            265   _SBUF0          DATA 0x99
0000            266   _SBUF1          DATA 0x92
0000            267   _SCON           DATA 0x98
0000            268   _SCON0          DATA 0x98
0000            269   _SCON1          DATA 0xc8
0000            270   _SFRPAGE        DATA 0xa7
0000            271   _SFRPGCN        DATA 0xbc
0000            272   _SFRSTACK       DATA 0xd7
0000            273   _SMB0ADM        DATA 0xd6
0000            274   _SMB0ADR        DATA 0xd7
0000            275   _SMB0CF         DATA 0xc1
0000            276   _SMB0CN0        DATA 0xc0
0000            277   _SMB0DAT        DATA 0xc2
0000            278   _SMB0FCN0       DATA 0xc3
0000            279   _SMB0FCN1       DATA 0xc4
0000            280   _SMB0FCT        DATA 0xef
0000            281   _SMB0RXLN       DATA 0xc5
0000            282   _SMB0TC         DATA 0xac
0000            283   _SMOD1          DATA 0x93
0000            284   _SP             DATA 0x81
0000            285   _SPI0CFG        DATA 0xa1
0000            286   _SPI0CKR        DATA 0xa2
0000            287   _SPI0CN0        DATA 0xf8
0000            288   _SPI0DAT        DATA 0xa3
0000            289   _SPI0FCN0       DATA 0x9a
0000            290   _SPI0FCN1       DATA 0x9b
0000            291   _SPI0FCT        DATA 0xf7
0000            292   _SPI0PCF        DATA 0xdf
0000            293   _TCON           DATA 0x88
0000            294   _TH0            DATA 0x8c
0000            295   _TH1            DATA 0x8d
0000            296   _TL0            DATA 0x8a
0000            297   _TL1            DATA 0x8b
0000            298   _TMOD           DATA 0x89
0000            299   _TMR2CN0        DATA 0xc8
0000            300   _TMR2CN1        DATA 0xfd
0000            301   _TMR2H          DATA 0xcf
0000            302   _TMR2L          DATA 0xce
0000            303   _TMR2RLH        DATA 0xcb
0000            304   _TMR2RLL        DATA 0xca
0000            305   _TMR3CN0        DATA 0x91
0000            306   _TMR3CN1        DATA 0xfe
0000            307   _TMR3H          DATA 0x95
0000            308   _TMR3L          DATA 0x94
0000            309   _TMR3RLH        DATA 0x93
0000            310   _TMR3RLL        DATA 0x92
0000            311   _TMR4CN0        DATA 0x98
0000            312   _TMR4CN1        DATA 0xff
0000            313   _TMR4H          DATA 0xa5
0000            314   _TMR4L          DATA 0xa4
0000            315   _TMR4RLH        DATA 0xa3
0000            316   _TMR4RLL        DATA 0xa2
0000            317   _TMR5CN0        DATA 0xc0
0000            318   _TMR5CN1        DATA 0xf1
0000            319   _TMR5H          DATA 0xd5
0000            320   _TMR5L          DATA 0xd4
0000            321   _TMR5RLH        DATA 0xd3
0000            322   _TMR5RLL        DATA 0xd2
0000            323   _UART0PCF       DATA 0xd9
0000            324   _UART1FCN0      DATA 0x9d
0000            325   _UART1FCN1      DATA 0xd8
0000            326   _UART1FCT       DATA 0xfa
0000            327   _UART1LIN       DATA 0x9e
0000            328   _UART1PCF       DATA 0xda
0000            329   _VDM0CN         DATA 0xff
0000            330   _WDTCN          DATA 0x97
0000            331   _XBR0           DATA 0xe1
0000            332   _XBR1           DATA 0xe2
0000            333   _XBR2           DATA 0xe3
0000            334   _XOSC0CN        DATA 0x86
0000            335   _DPTR           DATA 0x8382
0000            336   _TMR2RL         DATA 0xcbca
0000            337   _TMR3RL         DATA 0x9392
0000            338   _TMR4RL         DATA 0xa3a2
0000            339   _TMR5RL         DATA 0xd3d2
0000            340   _TMR0           DATA 0x8c8a
0000            341   _TMR1           DATA 0x8d8b
0000            342   _TMR2           DATA 0xcfce
0000            343   _TMR3           DATA 0x9594
0000            344   _TMR4           DATA 0xa5a4
0000            345   _TMR5           DATA 0xd5d4
0000            346   _SBRL1          DATA 0x9695
0000            347   _PCA0           DATA 0xfaf9
0000            348   _PCA0CP0        DATA 0xfcfb
0000            349   _PCA0CP1        DATA 0xeae9
0000            350   _PCA0CP2        DATA 0xeceb
0000            351   _PCA0CP3        DATA 0xf5f4
0000            352   _PCA0CP4        DATA 0x8584
0000            353   _PCA0CP5        DATA 0xdedd
0000            354   _ADC0ASA        DATA 0xb6b5
0000            355   _ADC0GT         DATA 0xc4c3
0000            356   _ADC0           DATA 0xbebd
0000            357   _ADC0LT         DATA 0xc6c5
0000            358   _DAC0           DATA 0x8584
0000            359   _DAC1           DATA 0x8a89
0000            360   _DAC2           DATA 0x8c8b
0000            361   _DAC3           DATA 0x8e8d
0000            362   ;--------------------------------------------------------
0000            363   ; special function bits
0000            364   ;--------------------------------------------------------
0000            365   _ACC_0          BIT 0xe0
0000            366   _ACC_1          BIT 0xe1
0000            367   _ACC_2          BIT 0xe2
0000            368   _ACC_3          BIT 0xe3
0000            369   _ACC_4          BIT 0xe4
0000            370   _ACC_5          BIT 0xe5
0000            371   _ACC_6          BIT 0xe6
0000            372   _ACC_7          BIT 0xe7
0000            373   _TEMPE          BIT 0xe8
0000            374   _ADGN0          BIT 0xe9
0000            375   _ADGN1          BIT 0xea
0000            376   _ADWINT         BIT 0xeb
0000            377   _ADBUSY         BIT 0xec
0000            378   _ADINT          BIT 0xed
0000            379   _IPOEN          BIT 0xee
0000            380   _ADEN           BIT 0xef
0000            381   _B_0            BIT 0xf0
0000            382   _B_1            BIT 0xf1
0000            383   _B_2            BIT 0xf2
0000            384   _B_3            BIT 0xf3
0000            385   _B_4            BIT 0xf4
0000            386   _B_5            BIT 0xf5
0000            387   _B_6            BIT 0xf6
0000            388   _B_7            BIT 0xf7
0000            389   _C0FIF          BIT 0xe8
0000            390   _C0RIF          BIT 0xe9
0000            391   _C1FIF          BIT 0xea
0000            392   _C1RIF          BIT 0xeb
0000            393   _C2FIF          BIT 0xec
0000            394   _C2RIF          BIT 0xed
0000            395   _C3FIF          BIT 0xee
0000            396   _C3RIF          BIT 0xef
0000            397   _D1SRC0         BIT 0x88
0000            398   _D1SRC1         BIT 0x89
0000            399   _D1AMEN         BIT 0x8a
0000            400   _D01REFSL       BIT 0x8b
0000            401   _D3SRC0         BIT 0x8c
0000            402   _D3SRC1         BIT 0x8d
0000            403   _D3AMEN         BIT 0x8e
0000            404   _D23REFSL       BIT 0x8f
0000            405   _D0UDIS         BIT 0x98
0000            406   _D1UDIS         BIT 0x99
0000            407   _D2UDIS         BIT 0x9a
0000            408   _D3UDIS         BIT 0x9b
0000            409   _EX0            BIT 0xa8
0000            410   _ET0            BIT 0xa9
0000            411   _EX1            BIT 0xaa
0000            412   _ET1            BIT 0xab
0000            413   _ES0            BIT 0xac
0000            414   _ET2            BIT 0xad
0000            415   _ESPI0          BIT 0xae
0000            416   _EA             BIT 0xaf
0000            417   _PX0            BIT 0xb8
0000            418   _PT0            BIT 0xb9
0000            419   _PX1            BIT 0xba
0000            420   _PT1            BIT 0xbb
0000            421   _PS0            BIT 0xbc
0000            422   _PT2            BIT 0xbd
0000            423   _PSPI0          BIT 0xbe
0000            424   _P0_0           BIT 0x80
0000            425   _P0_1           BIT 0x81
0000            426   _P0_2           BIT 0x82
0000            427   _P0_3           BIT 0x83
0000            428   _P0_4           BIT 0x84
0000            429   _P0_5           BIT 0x85
0000            430   _P0_6           BIT 0x86
0000            431   _P0_7           BIT 0x87
0000            432   _P1_0           BIT 0x90
0000            433   _P1_1           BIT 0x91
0000            434   _P1_2           BIT 0x92
0000            435   _P1_3           BIT 0x93
0000            436   _P1_4           BIT 0x94
0000            437   _P1_5           BIT 0x95
0000            438   _P1_6           BIT 0x96
0000            439   _P1_7           BIT 0x97
0000            440   _P2_0           BIT 0xa0
0000            441   _P2_1           BIT 0xa1
0000            442   _P2_2           BIT 0xa2
0000            443   _P2_3           BIT 0xa3
0000            444   _P2_4           BIT 0xa4
0000            445   _P2_5           BIT 0xa5
0000            446   _P2_6           BIT 0xa6
0000            447   _P3_0           BIT 0xb0
0000            448   _P3_1           BIT 0xb1
0000            449   _P3_2           BIT 0xb2
0000            450   _P3_3           BIT 0xb3
0000            451   _P3_4           BIT 0xb4
0000            452   _P3_7           BIT 0xb7
0000            453   _CCF0           BIT 0xd8
0000            454   _CCF1           BIT 0xd9
0000            455   _CCF2           BIT 0xda
0000            456   _CCF3           BIT 0xdb
0000            457   _CCF4           BIT 0xdc
0000            458   _CCF5           BIT 0xdd
0000            459   _CR             BIT 0xde
0000            460   _CF             BIT 0xdf
0000            461   _PARITY         BIT 0xd0
0000            462   _F1             BIT 0xd1
0000            463   _OV             BIT 0xd2
0000            464   _RS0            BIT 0xd3
0000            465   _RS1            BIT 0xd4
0000            466   _F0             BIT 0xd5
0000            467   _AC             BIT 0xd6
0000            468   _CY             BIT 0xd7
0000            469   _RI             BIT 0x98
0000            470   _TI             BIT 0x99
0000            471   _RB8            BIT 0x9a
0000            472   _TB8            BIT 0x9b
0000            473   _REN            BIT 0x9c
0000            474   _CE             BIT 0x9d
0000            475   _SMODE          BIT 0x9e
0000            476   _RI1            BIT 0xc8
0000            477   _TI1            BIT 0xc9
0000            478   _RBX1           BIT 0xca
0000            479   _TBX1           BIT 0xcb
0000            480   _REN1           BIT 0xcc
0000            481   _PERR1          BIT 0xcd
0000            482   _OVR1           BIT 0xce
0000            483   _SI             BIT 0xc0
0000            484   _ACK            BIT 0xc1
0000            485   _ARBLOST        BIT 0xc2
0000            486   _ACKRQ          BIT 0xc3
0000            487   _STO            BIT 0xc4
0000            488   _STA            BIT 0xc5
0000            489   _TXMODE         BIT 0xc6
0000            490   _MASTER         BIT 0xc7
0000            491   _SPIEN          BIT 0xf8
0000            492   _TXNF           BIT 0xf9
0000            493   _NSSMD0         BIT 0xfa
0000            494   _NSSMD1         BIT 0xfb
0000            495   _RXOVRN         BIT 0xfc
0000            496   _MODF           BIT 0xfd
0000            497   _WCOL           BIT 0xfe
0000            498   _SPIF           BIT 0xff
0000            499   _IT0            BIT 0x88
0000            500   _IE0            BIT 0x89
0000            501   _IT1            BIT 0x8a
0000            502   _IE1            BIT 0x8b
0000            503   _TR0            BIT 0x8c
0000            504   _TF0            BIT 0x8d
0000            505   _TR1            BIT 0x8e
0000            506   _TF1            BIT 0x8f
0000            507   _T2XCLK0        BIT 0xc8
0000            508   _T2XCLK1        BIT 0xc9
0000            509   _TR2            BIT 0xca
0000            510   _T2SPLIT        BIT 0xcb
0000            511   _TF2CEN         BIT 0xcc
0000            512   _TF2LEN         BIT 0xcd
0000            513   _TF2L           BIT 0xce
0000            514   _TF2H           BIT 0xcf
0000            515   _T4XCLK0        BIT 0x98
0000            516   _T4XCLK1        BIT 0x99
0000            517   _TR4            BIT 0x9a
0000            518   _T4SPLIT        BIT 0x9b
0000            519   _TF4CEN         BIT 0x9c
0000            520   _TF4LEN         BIT 0x9d
0000            521   _TF4L           BIT 0x9e
0000            522   _TF4H           BIT 0x9f
0000            523   _T5XCLK0        BIT 0xc0
0000            524   _T5XCLK1        BIT 0xc1
0000            525   _TR5            BIT 0xc2
0000            526   _T5SPLIT        BIT 0xc3
0000            527   _TF5CEN         BIT 0xc4
0000            528   _TF5LEN         BIT 0xc5
0000            529   _TF5L           BIT 0xc6
0000            530   _TF5H           BIT 0xc7
0000            531   _RIE            BIT 0xd8
0000            532   _RXTO0          BIT 0xd9
0000            533   _RXTO1          BIT 0xda
0000            534   _RFRQ           BIT 0xdb
0000            535   _TIE            BIT 0xdc
0000            536   _TXHOLD         BIT 0xdd
0000            537   _TXNF1          BIT 0xde
0000            538   _TFRQ           BIT 0xdf
0000            539   ;--------------------------------------------------------
0000            540   ; overlayable register banks
0000            541   ;--------------------------------------------------------
0000            542            rbank0 segment data overlay
0000            543   ;--------------------------------------------------------
0000            544   ; overlayable bit register bank
0000            545   ;--------------------------------------------------------
0000            546            rseg BIT_BANK
0000            547   bits:
0000            548            ds 1
0001            549            b0 equ  bits.0 
0001            550            b1 equ  bits.1 
0001            551            b2 equ  bits.2 
0001            552            b3 equ  bits.3 
0001            553            b4 equ  bits.4 
0001            554            b5 equ  bits.5 
0001            555            b6 equ  bits.6 
0001            556            b7 equ  bits.7 
0001            557   ;--------------------------------------------------------
0001            558   ; internal ram data
0001            559   ;--------------------------------------------------------
0000            560            rseg R_DSEG
0000            561   _getstr1_PARM_2:
0000            562            ds 1
0001            563   _Auto_mode_slave_sloc0_1_0:
0001            564            ds 2
0003            565   _Joystick_Control_PARM_2:
0003            566            ds 3
0006            567   _Joystick_Control_sloc0_1_0:
0006            568            ds 2
0008            569   _Joystick_Control_sloc1_1_0:
0008            570            ds 1
0009            571   _Joystick_Control_sloc2_1_0:
0009            572            ds 2
000B            573   _Joystick_Control_sloc3_1_0:
000B            574            ds 1
000C            575   _Joystick_Control_sloc4_1_0:
000C            576            ds 2
000E            577   _Joystick_Control_sloc5_1_0:
000E            578            ds 4
0012            579   _Joystick_Control_sloc6_1_0:
0012            580            ds 2
0014            581   _main_pick_char_1_196:
0014            582            ds 1
0015            583   ;--------------------------------------------------------
0015            584   ; overlayable items in internal ram 
0015            585   ;--------------------------------------------------------
0000            586            rseg    R_OSEG
0000            587            rseg    R_OSEG
0000            588            rseg    R_OSEG
0000            589            rseg    R_OSEG
0000            590            rseg    R_OSEG
0000            591   _InitPinADC_PARM_2:
0000            592            ds 1
0001            593            rseg    R_OSEG
0001            594            rseg    R_OSEG
0001            595   _check_bound_PARM_2:
0001            596            ds 2
0003            597   ;--------------------------------------------------------
0003            598   ; indirectly addressable internal ram data
0003            599   ;--------------------------------------------------------
0000            600            rseg R_ISEG
0000            601   _buff:
0000            602            ds 20
0014            603   ;--------------------------------------------------------
0014            604   ; absolute internal ram data
0014            605   ;--------------------------------------------------------
0000            606            DSEG
0000            607   ;--------------------------------------------------------
0000            608   ; bit data
0000            609   ;--------------------------------------------------------
0000            610            rseg R_BSEG
0000            611   ;--------------------------------------------------------
0000            612   ; paged external ram data
0000            613   ;--------------------------------------------------------
0000            614            rseg R_PSEG
0000            615   ;--------------------------------------------------------
0000            616   ; external ram data
0000            617   ;--------------------------------------------------------
0000            618            rseg R_XSEG
0000            619   _freq100:
0000            620            ds 4
0004            621   _d1:
0004            622            ds 2
0006            623   _d2:
0006            624            ds 2
0008            625   _dig_x1:
0008            626            ds 1
0009            627   _dig_x2:
0009            628            ds 1
000A            629   _dig_y1:
000A            630            ds 1
000B            631   _dig_y2:
000B            632            ds 1
000C            633   _dig_z1:
000C            634            ds 2
000E            635   _dig_z2:
000E            636            ds 2
0010            637   _dig_z3:
0010            638            ds 2
0012            639   _dig_z4:
0012            640            ds 2
0014            641   _dig_xy1:
0014            642            ds 1
0015            643   _dig_xy2:
0015            644            ds 1
0016            645   _dig_xyz1:
0016            646            ds 2
0018            647   _temp:
0018            648            ds 4
001C            649   _ReadHX711_dataa_1_133:
001C            650            ds 4
0020            651   _ReadHX711_j_1_133:
0020            652            ds 1
0021            653   _Auto_mode_slave_command_1_164:
0021            654            ds 2
0023            655   _Auto_mode_slave_state_res_1_164:
0023            656            ds 2
0025            657   _Auto_mode_slave_dummy_1_164:
0025            658            ds 2
0027            659   _Joystick_Control_vx_error_1_173:
0027            660            ds 2
0029            661   _main_vx_1_196:
0029            662            ds 2
002B            663   _main_vy_1_196:
002B            664            ds 2
002D            665   _main_auto_mode_1_196:
002D            666            ds 2
002F            667   ;--------------------------------------------------------
002F            668   ; absolute external ram data
002F            669   ;--------------------------------------------------------
0000            670            XSEG
0000            671   ;--------------------------------------------------------
0000            672   ; external initialized ram data
0000            673   ;--------------------------------------------------------
0000            674            rseg R_IXSEG
0000            675   _pwm_counter:
0000            676            ds 2
0002            677   _servo_counter:
0002            678            ds 2
0004            679   _pwm_left:
0004            680            ds 1
0005            681   _pwm_right:
0005            682            ds 1
0006            683   _L_motor_dir:
0006            684            ds 1
0007            685   _R_motor_dir:
0007            686            ds 1
0008            687   _servo_base:
0008            688            ds 1
0009            689   _servo_arm:
0009            690            ds 1
000A            691   _vx_thres:
000A            692            ds 2
000C            693   _vy_thres:
000C            694            ds 2
000E            695   _vx:
000E            696            ds 2
0010            697   _vy:
0010            698            ds 2
0012            699   _fre_mea_count:
0012            700            ds 2
0014            701   _weight_mea_count:
0014            702            ds 2
0016            703   _seed:
0016            704            ds 2
0018            705   _pwm_corr:
0018            706            ds 4
001C            707   _curr_angle:
001C            708            ds 4
0020            709   _raw_angle:
0020            710            ds 4
0024            711   _last_raw_angle:
0024            712            ds 4
0028            713   _angle_diff:
0028            714            ds 4
002C            715   _mea_yes:
002C            716            ds 1
002D            717   _weight:
002D            718            ds 2
0000            719            rseg R_HOME
0000            720            rseg R_GSINIT
0000            721            rseg R_CSEG
0000            722   ;--------------------------------------------------------
0000            723   ; Reset entry point and interrupt vectors
0000            724   ;--------------------------------------------------------
0000            725            CSEG at 0x0000
0000 020000     726            ljmp    _crt0
0093            727            CSEG at 0x0093
0093 020000     728            ljmp    _Timer5_ISR
0096            729   ;--------------------------------------------------------
0096            730   ; global & static initialisations
0096            731   ;--------------------------------------------------------
0000            732            rseg R_HOME
0000            733            rseg R_GSINIT
0000            734            rseg R_GSINIT
0000            735   ;--------------------------------------------------------
0000            736   ; data variables initialization
0000            737   ;--------------------------------------------------------
0000            738            rseg R_DINIT
0000            739            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            740   ;--------------------------------------------------------
0000            741   ; code
0000            742   ;--------------------------------------------------------
0000            743            rseg R_CSEG
0000            744   ;------------------------------------------------------------
0000            745   ;Allocation info for local variables in function '_c51_external_startup'
0000            746   ;------------------------------------------------------------
0000            747   ;------------------------------------------------------------
0000            748   ;        main.c:111: char _c51_external_startup (void)
0000            749   ;        -----------------------------------------
0000            750   ;         function _c51_external_startup
0000            751   ;        -----------------------------------------
0000            752   __c51_external_startup:
0000            753            using   0
0000            754   ;        main.c:114: SFRPAGE = 0x00;
0000 75A700     755            mov     _SFRPAGE,#0x00
0003            756   ;        main.c:115: WDTCN = 0xDE; //First key
0003 7597DE     757            mov     _WDTCN,#0xDE
0006            758   ;        main.c:116: WDTCN = 0xAD; //Second key
0006 7597AD     759            mov     _WDTCN,#0xAD
0009            760   ;        main.c:118: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     761            mov     _VDM0CN,#0x80
000C            762   ;        main.c:119: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     763            mov     _RSTSRC,#0x06
000F            764   ;        main.c:126: SFRPAGE = 0x10;
000F 75A710     765            mov     _SFRPAGE,#0x10
0012            766   ;        main.c:127: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     767            mov     _PFE0CN,#0x20
0015            768   ;        main.c:128: SFRPAGE = 0x00;
0015 75A700     769            mov     _SFRPAGE,#0x00
0018            770   ;        main.c:149: CLKSEL = 0x00;
0018 75A900     771            mov     _CLKSEL,#0x00
001B            772   ;        main.c:150: CLKSEL = 0x00;
001B 75A900     773            mov     _CLKSEL,#0x00
001E            774   ;        main.c:151: while ((CLKSEL & 0x80) == 0);
001E            775   L002001?:
001E E5A9       776            mov     a,_CLKSEL
0020 30E7B0     777            jnb     acc.7,L002001?
0023            778   ;        main.c:152: CLKSEL = 0x03;
0023 75A903     779            mov     _CLKSEL,#0x03
0026            780   ;        main.c:153: CLKSEL = 0x03;
0026 75A903     781            mov     _CLKSEL,#0x03
0029            782   ;        main.c:154: while ((CLKSEL & 0x80) == 0);
0029            783   L002004?:
0029 E5A9       784            mov     a,_CLKSEL
002B 30E730     785            jnb     acc.7,L002004?
002E            786   ;        main.c:160: P0MDOUT |= 0b_1100_0000;
002E 43A4C0     787            orl     _P0MDOUT,#0xC0
0031            788   ;        main.c:161: P1MDOUT |= 0b_0000_0110;
0031 43A506     789            orl     _P1MDOUT,#0x06
0034            790   ;        main.c:162: P2MDOUT |= 0b_0000_0001; // P2.0 in push-pull mode
0034 43A601     791            orl     _P2MDOUT,#0x01
0037            792   ;        main.c:163: XBR0     = 0b_0000_0011; // UART0E = 1 and SPI0E = 1 0b_0000_0011               
0037 75E103     793            mov     _XBR0,#0x03
003A            794   ;        main.c:164: XBR1     = 0b_0000_0000;
003A 75E200     795            mov     _XBR1,#0x00
003D            796   ;        main.c:165: XBR2     = 0b_0100_0001; // Enable crossbar and uart 1
003D 75E341     797            mov     _XBR2,#0x41
0040            798   ;        main.c:166: P0SKIP       = 0b_0000_0111; 
0040 75D407     799            mov     _P0SKIP,#0x07
0043            800   ;        main.c:167: P1SKIP   = 0b_1111_1001;
0043 75D5F9     801            mov     _P1SKIP,#0xF9
0046            802   ;        main.c:172: SCON0 = 0x10;
0046 759810     803            mov     _SCON0,#0x10
0049            804   ;        main.c:173: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     805            mov     _TH1,#0xE6
004C            806   ;        main.c:174: TL1 = TH1;      // Init Timer1
004C 858D8B     807            mov     _TL1,_TH1
004F            808   ;        main.c:175: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     809            anl     _TMOD,#0x0F
0052            810   ;        main.c:176: TMOD |=  0x20;                       
0052 438920     811            orl     _TMOD,#0x20
0055            812   ;        main.c:177: TR1 = 1; // START Timer1
0055 D28E       813            setb    _TR1
0057            814   ;        main.c:178: TI = 1;  // Indicate TX0 ready
0057 D299       815            setb    _TI
0059            816   ;        main.c:179: P2_0=1; // 'set' pin to 1 is normal operation mode.
0059 D2A0       817            setb    _P2_0
005B            818   ;        main.c:182: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
005B 75A211     819            mov     _SPI0CKR,#0x11
005E            820   ;        main.c:183: SPI0CFG = 0b_1110_0000; // SPI mode 3
005E 75A1E0     821            mov     _SPI0CFG,#0xE0
0061            822   ;        main.c:184: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0061 75F801     823            mov     _SPI0CN0,#0x01
0064            824   ;        main.c:187: SFRPAGE=0x10;
0064 75A710     825            mov     _SFRPAGE,#0x10
0067            826   ;        main.c:188: TMR5CN0=0x00;
0067 75C000     827            mov     _TMR5CN0,#0x00
006A            828   ;        main.c:189: TMR5=0xffff;   // Set to reload immediately
006A 75D4FF     829            mov     _TMR5,#0xFF
006D 75D5FF     830            mov     (_TMR5 >> 8),#0xFF
0070            831   ;        main.c:190: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
0070 43F308     832            orl     _EIE2,#0x08
0073            833   ;        main.c:191: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0073 D2C2       834            setb    _TR5
0075            835   ;        main.c:193: EA=1;  // Enable global interrupts
0075 D2AF       836            setb    _EA
0077            837   ;        main.c:194: SFRPAGE=0x00;
0077 75A700     838            mov     _SFRPAGE,#0x00
007A            839   ;        main.c:196: return 0;
007A 758200     840            mov     dpl,#0x00
007D 22         841            ret
007E            842   ;------------------------------------------------------------
007E            843   ;Allocation info for local variables in function 'Timer3us'
007E            844   ;------------------------------------------------------------
007E            845   ;us                        Allocated to registers r2 
007E            846   ;i                         Allocated to registers r3 
007E            847   ;------------------------------------------------------------
007E            848   ;        main.c:200: void Timer3us(unsigned char us)
007E            849   ;        -----------------------------------------
007E            850   ;         function Timer3us
007E            851   ;        -----------------------------------------
007E            852   _Timer3us:
007E AA82       853            mov     r2,dpl
0080            854   ;        main.c:205: CKCON0|=0b_0100_0000;
0080 438E40     855            orl     _CKCON0,#0x40
0083            856   ;        main.c:207: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0083 7592B8     857            mov     _TMR3RL,#0xB8
0086 7593FF     858            mov     (_TMR3RL >> 8),#0xFF
0089            859   ;        main.c:208: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0089 859294     860            mov     _TMR3,_TMR3RL
008C 859395     861            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
008F            862   ;        main.c:210: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
008F 759104     863            mov     _TMR3CN0,#0x04
0092            864   ;        main.c:211: for (i = 0; i < us; i++)       // Count <us> overflows
0092 7B00       865            mov     r3,#0x00
0094            866   L003004?:
0094 C3         867            clr     c
0095 EB         868            mov     a,r3
0096 9A         869            subb    a,r2
0097 5000       870            jnc     L003007?
0099            871   ;        main.c:213: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0099            872   L003001?:
0099 E591       873            mov     a,_TMR3CN0
009B 30E730     874            jnb     acc.7,L003001?
009E            875   ;        main.c:214: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
009E 53917F     876            anl     _TMR3CN0,#0x7F
00A1            877   ;        main.c:211: for (i = 0; i < us; i++)       // Count <us> overflows
00A1 0B         878            inc     r3
00A2 8000       879            sjmp    L003004?
00A4            880   L003007?:
00A4            881   ;        main.c:216: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00A4 759100     882            mov     _TMR3CN0,#0x00
00A7 22         883            ret
00A8            884   ;------------------------------------------------------------
00A8            885   ;Allocation info for local variables in function 'waitms'
00A8            886   ;------------------------------------------------------------
00A8            887   ;ms                        Allocated to registers r2 r3 
00A8            888   ;j                         Allocated to registers r4 r5 
00A8            889   ;k                         Allocated to registers r6 
00A8            890   ;------------------------------------------------------------
00A8            891   ;        main.c:219: void waitms (unsigned int ms)
00A8            892   ;        -----------------------------------------
00A8            893   ;         function waitms
00A8            894   ;        -----------------------------------------
00A8            895   _waitms:
00A8 AA82       896            mov     r2,dpl
00AA AB83       897            mov     r3,dph
00AC            898   ;        main.c:223: for(j=0; j<ms; j++)
00AC 7C00       899            mov     r4,#0x00
00AE 7D00       900            mov     r5,#0x00
00B0            901   L004005?:
00B0 C3         902            clr     c
00B1 EC         903            mov     a,r4
00B2 9A         904            subb    a,r2
00B3 ED         905            mov     a,r5
00B4 9B         906            subb    a,r3
00B5 5000       907            jnc     L004009?
00B7            908   ;        main.c:224: for (k=0; k<4; k++) Timer3us(250);
00B7 7E00       909            mov     r6,#0x00
00B9            910   L004001?:
00B9 BE0470     911            cjne    r6,#0x04,L004018?
00BC            912   L004018?:
00BC 5000       913            jnc     L004007?
00BE 7582FA     914            mov     dpl,#0xFA
00C1 C002       915            push    ar2
00C3 C003       916            push    ar3
00C5 C004       917            push    ar4
00C7 C005       918            push    ar5
00C9 C006       919            push    ar6
00CB 120000     920            lcall   _Timer3us
00CE D006       921            pop     ar6
00D0 D005       922            pop     ar5
00D2 D004       923            pop     ar4
00D4 D003       924            pop     ar3
00D6 D002       925            pop     ar2
00D8 0E         926            inc     r6
00D9 8000       927            sjmp    L004001?
00DB            928   L004007?:
00DB            929   ;        main.c:223: for(j=0; j<ms; j++)
00DB 0C         930            inc     r4
00DC BC00B0     931            cjne    r4,#0x00,L004005?
00DF 0D         932            inc     r5
00E0 8000       933            sjmp    L004005?
00E2            934   L004009?:
00E2 22         935            ret
00E3            936   ;------------------------------------------------------------
00E3            937   ;Allocation info for local variables in function 'UART1_Init'
00E3            938   ;------------------------------------------------------------
00E3            939   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00E3            940   ;------------------------------------------------------------
00E3            941   ;        main.c:516: void UART1_Init (unsigned long baudrate)
00E3            942   ;        -----------------------------------------
00E3            943   ;         function UART1_Init
00E3            944   ;        -----------------------------------------
00E3            945   _UART1_Init:
00E3 AA82       946            mov     r2,dpl
00E5 AB83       947            mov     r3,dph
00E7 ACF0       948            mov     r4,b
00E9 FD         949            mov     r5,a
00EA            950   ;        main.c:518: SFRPAGE = 0x20;
00EA 75A720     951            mov     _SFRPAGE,#0x20
00ED            952   ;        main.c:519: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00ED 75930C     953            mov     _SMOD1,#0x0C
00F0            954   ;        main.c:520: SCON1 = 0x10;
00F0 75C810     955            mov     _SCON1,#0x10
00F3            956   ;        main.c:521: SBCON1 =0x00;   // disable baud rate generator
00F3 759400     957            mov     _SBCON1,#0x00
00F6            958   ;        main.c:522: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00F6 8A00       959            mov     __divulong_PARM_2,r2
00F8 8B01       960            mov     (__divulong_PARM_2 + 1),r3
00FA 8C02       961            mov     (__divulong_PARM_2 + 2),r4
00FC 8D03       962            mov     (__divulong_PARM_2 + 3),r5
00FE 90A200     963            mov     dptr,#0xA200
0101 75F04A     964            mov     b,#0x4A
0104 7404       965            mov     a,#0x04
0106 120000     966            lcall   __divulong
0109 AA82       967            mov     r2,dpl
010B AB83       968            mov     r3,dph
010D ACF0       969            mov     r4,b
010F FD         970            mov     r5,a
0110 750018     971            mov     __divulong_PARM_2,#0x18
0113 E4         972            clr     a
0114 F501       973            mov     (__divulong_PARM_2 + 1),a
0116 F502       974            mov     (__divulong_PARM_2 + 2),a
0118 F503       975            mov     (__divulong_PARM_2 + 3),a
011A 8A82       976            mov     dpl,r2
011C 8B83       977            mov     dph,r3
011E 8CF0       978            mov     b,r4
0120 ED         979            mov     a,r5
0121 120000     980            lcall   __divulong
0124 AA82       981            mov     r2,dpl
0126 AB83       982            mov     r3,dph
0128 ACF0       983            mov     r4,b
012A FD         984            mov     r5,a
012B E4         985            clr     a
012C C3         986            clr     c
012D 9A         987            subb    a,r2
012E FA         988            mov     r2,a
012F E4         989            clr     a
0130 9B         990            subb    a,r3
0131 FB         991            mov     r3,a
0132 7401       992            mov     a,#0x01
0134 9C         993            subb    a,r4
0135 E4         994            clr     a
0136 9D         995            subb    a,r5
0137 8A95       996            mov     _SBRL1,r2
0139 8B96       997            mov     (_SBRL1 >> 8),r3
013B            998   ;        main.c:523: TI1 = 1; // indicate ready for TX
013B D2C9       999            setb    _TI1
013D           1000   ;        main.c:524: SBCON1 |= 0x40;   // enable baud rate generator
013D 439440    1001            orl     _SBCON1,#0x40
0140           1002   ;        main.c:525: SFRPAGE = 0x00;
0140 75A700    1003            mov     _SFRPAGE,#0x00
0143 22        1004            ret
0144           1005   ;------------------------------------------------------------
0144           1006   ;Allocation info for local variables in function 'putchar1'
0144           1007   ;------------------------------------------------------------
0144           1008   ;c                         Allocated to registers r2 
0144           1009   ;------------------------------------------------------------
0144           1010   ;        main.c:528: void putchar1 (char c) 
0144           1011   ;        -----------------------------------------
0144           1012   ;         function putchar1
0144           1013   ;        -----------------------------------------
0144           1014   _putchar1:
0144 AA82      1015            mov     r2,dpl
0146           1016   ;        main.c:530: SFRPAGE = 0x20;
0146 75A720    1017            mov     _SFRPAGE,#0x20
0149           1018   ;        main.c:531: while (!TI1);
0149           1019   L006001?:
0149           1020   ;        main.c:532: TI1=0;
0149 10C900    1021            jbc     _TI1,L006008?
014C 8000      1022            sjmp    L006001?
014E           1023   L006008?:
014E           1024   ;        main.c:533: SBUF1 = c;
014E 8A92      1025            mov     _SBUF1,r2
0150           1026   ;        main.c:534: SFRPAGE = 0x00;
0150 75A700    1027            mov     _SFRPAGE,#0x00
0153 22        1028            ret
0154           1029   ;------------------------------------------------------------
0154           1030   ;Allocation info for local variables in function 'sendstr1'
0154           1031   ;------------------------------------------------------------
0154           1032   ;s                         Allocated to registers r2 r3 r4 
0154           1033   ;------------------------------------------------------------
0154           1034   ;        main.c:537: void sendstr1 (char * s)
0154           1035   ;        -----------------------------------------
0154           1036   ;         function sendstr1
0154           1037   ;        -----------------------------------------
0154           1038   _sendstr1:
0154 AA82      1039            mov     r2,dpl
0156 AB83      1040            mov     r3,dph
0158 ACF0      1041            mov     r4,b
015A           1042   ;        main.c:539: while(*s)
015A           1043   L007001?:
015A 8A82      1044            mov     dpl,r2
015C 8B83      1045            mov     dph,r3
015E 8CF0      1046            mov     b,r4
0160 120000    1047            lcall   __gptrget
0163 FD        1048            mov     r5,a
0164 6000      1049            jz      L007004?
0166           1050   ;        main.c:541: putchar1(*s);
0166 8D82      1051            mov     dpl,r5
0168 C002      1052            push    ar2
016A C003      1053            push    ar3
016C C004      1054            push    ar4
016E 120000    1055            lcall   _putchar1
0171 D004      1056            pop     ar4
0173 D003      1057            pop     ar3
0175 D002      1058            pop     ar2
0177           1059   ;        main.c:542: s++;        
0177 0A        1060            inc     r2
0178 BA0040    1061            cjne    r2,#0x00,L007001?
017B 0B        1062            inc     r3
017C 8000      1063            sjmp    L007001?
017E           1064   L007004?:
017E 22        1065            ret
017F           1066   ;------------------------------------------------------------
017F           1067   ;Allocation info for local variables in function 'getchar1'
017F           1068   ;------------------------------------------------------------
017F           1069   ;c                         Allocated with name '_getchar1_c_1_98'
017F           1070   ;------------------------------------------------------------
017F           1071   ;        main.c:546: char getchar1 (void)
017F           1072   ;        -----------------------------------------
017F           1073   ;         function getchar1
017F           1074   ;        -----------------------------------------
017F           1075   _getchar1:
017F           1076   ;        main.c:549: SFRPAGE = 0x20;
017F 75A720    1077            mov     _SFRPAGE,#0x20
0182           1078   ;        main.c:550: while (!RI1);
0182           1079   L008001?:
0182           1080   ;        main.c:551: RI1=0;
0182 10C840    1081            jbc     _RI1,L008008?
0185 8000      1082            sjmp    L008001?
0187           1083   L008008?:
0187           1084   ;        main.c:553: SCON1&=0b_0011_1111;
0187 53C83F    1085            anl     _SCON1,#0x3F
018A           1086   ;        main.c:554: c = SBUF1;
018A 859282    1087            mov     dpl,_SBUF1
018D           1088   ;        main.c:555: SFRPAGE = 0x00;
018D 75A700    1089            mov     _SFRPAGE,#0x00
0190           1090   ;        main.c:556: return (c);
0190 22        1091            ret
0191           1092   ;------------------------------------------------------------
0191           1093   ;Allocation info for local variables in function 'getchar1_with_timeout'
0191           1094   ;------------------------------------------------------------
0191           1095   ;c                         Allocated with name '_getchar1_with_timeout_c_1_100'
0191           1096   ;timeout                   Allocated with name '_getchar1_with_timeout_timeout_1_100'
0191           1097   ;------------------------------------------------------------
0191           1098   ;        main.c:559: char getchar1_with_timeout (void)
0191           1099   ;        -----------------------------------------
0191           1100   ;         function getchar1_with_timeout
0191           1101   ;        -----------------------------------------
0191           1102   _getchar1_with_timeout:
0191           1103   ;        main.c:563: SFRPAGE = 0x20;
0191 75A720    1104            mov     _SFRPAGE,#0x20
0194           1105   ;        main.c:565: while (!RI1)
0194 7A00      1106            mov     r2,#0x00
0196 7B00      1107            mov     r3,#0x00
0198           1108   L009003?:
0198 20C8C0    1109            jb      _RI1,L009005?
019B           1110   ;        main.c:567: SFRPAGE = 0x00;
019B 75A700    1111            mov     _SFRPAGE,#0x00
019E           1112   ;        main.c:568: Timer3us(20);
019E 758214    1113            mov     dpl,#0x14
01A1 C002      1114            push    ar2
01A3 C003      1115            push    ar3
01A5 120000    1116            lcall   _Timer3us
01A8 D003      1117            pop     ar3
01AA D002      1118            pop     ar2
01AC           1119   ;        main.c:569: SFRPAGE = 0x20;
01AC 75A720    1120            mov     _SFRPAGE,#0x20
01AF           1121   ;        main.c:570: timeout++;
01AF 0A        1122            inc     r2
01B0 BA0000    1123            cjne    r2,#0x00,L009012?
01B3 0B        1124            inc     r3
01B4           1125   L009012?:
01B4           1126   ;        main.c:571: if(timeout==25000)
01B4 BAA880    1127            cjne    r2,#0xA8,L009003?
01B7 BB6180    1128            cjne    r3,#0x61,L009003?
01BA           1129   ;        main.c:573: SFRPAGE = 0x00;
01BA 75A700    1130            mov     _SFRPAGE,#0x00
01BD           1131   ;        main.c:574: return ('\n'); // Timeout after half second
01BD 75820A    1132            mov     dpl,#0x0A
01C0 22        1133            ret
01C1           1134   L009005?:
01C1           1135   ;        main.c:577: RI1=0;
01C1 C2C8      1136            clr     _RI1
01C3           1137   ;        main.c:579: SCON1&=0b_0011_1111;
01C3 53C83F    1138            anl     _SCON1,#0x3F
01C6           1139   ;        main.c:580: c = SBUF1;
01C6 859282    1140            mov     dpl,_SBUF1
01C9           1141   ;        main.c:581: SFRPAGE = 0x00;
01C9 75A700    1142            mov     _SFRPAGE,#0x00
01CC           1143   ;        main.c:582: return (c);
01CC 22        1144            ret
01CD           1145   ;------------------------------------------------------------
01CD           1146   ;Allocation info for local variables in function 'getstr1'
01CD           1147   ;------------------------------------------------------------
01CD           1148   ;n                         Allocated with name '_getstr1_PARM_2'
01CD           1149   ;s                         Allocated to registers r2 r3 r4 
01CD           1150   ;c                         Allocated with name '_getstr1_c_1_104'
01CD           1151   ;cnt                       Allocated with name '_getstr1_cnt_1_104'
01CD           1152   ;------------------------------------------------------------
01CD           1153   ;        main.c:585: void getstr1 (char * s, unsigned char n)
01CD           1154   ;        -----------------------------------------
01CD           1155   ;         function getstr1
01CD           1156   ;        -----------------------------------------
01CD           1157   _getstr1:
01CD AA82      1158            mov     r2,dpl
01CF AB83      1159            mov     r3,dph
01D1 ACF0      1160            mov     r4,b
01D3           1161   ;        main.c:591: while(1)
01D3 7D00      1162            mov     r5,#0x00
01D5 8A06      1163            mov     ar6,r2
01D7 8B07      1164            mov     ar7,r3
01D9 8C00      1165            mov     ar0,r4
01DB           1166   L010007?:
01DB           1167   ;        main.c:593: c=getchar1_with_timeout();
01DB C002      1168            push    ar2
01DD C003      1169            push    ar3
01DF C004      1170            push    ar4
01E1 C005      1171            push    ar5
01E3 C006      1172            push    ar6
01E5 C007      1173            push    ar7
01E7 C000      1174            push    ar0
01E9 120000    1175            lcall   _getchar1_with_timeout
01EC A982      1176            mov     r1,dpl
01EE D000      1177            pop     ar0
01F0 D007      1178            pop     ar7
01F2 D006      1179            pop     ar6
01F4 D005      1180            pop     ar5
01F6 D004      1181            pop     ar4
01F8 D003      1182            pop     ar3
01FA D002      1183            pop     ar2
01FC           1184   ;        main.c:594: if(c=='\n')
01FC B90A80    1185            cjne    r1,#0x0A,L010002?
01FF           1186   ;        main.c:596: *s=0;
01FF 8A82      1187            mov     dpl,r2
0201 8B83      1188            mov     dph,r3
0203 8CF0      1189            mov     b,r4
0205 E4        1190            clr     a
0206           1191   ;        main.c:597: return;
0206 020000    1192            ljmp    __gptrput
0209           1193   L010002?:
0209           1194   ;        main.c:600: if (cnt<n)
0209 C3        1195            clr     c
020A ED        1196            mov     a,r5
020B 95D0      1197            subb    a,_getstr1_PARM_2
020D 5000      1198            jnc     L010004?
020F           1199   ;        main.c:602: cnt++;
020F 0D        1200            inc     r5
0210           1201   ;        main.c:603: *s=c;
0210 8E82      1202            mov     dpl,r6
0212 8F83      1203            mov     dph,r7
0214 88F0      1204            mov     b,r0
0216 E9        1205            mov     a,r1
0217 120000    1206            lcall   __gptrput
021A A3        1207            inc     dptr
021B AE82      1208            mov     r6,dpl
021D AF83      1209            mov     r7,dph
021F           1210   ;        main.c:604: s++;
021F 8E02      1211            mov     ar2,r6
0221 8F03      1212            mov     ar3,r7
0223 8804      1213            mov     ar4,r0
0225 8000      1214            sjmp    L010007?
0227           1215   L010004?:
0227           1216   ;        main.c:608: *s=0;
0227 8A82      1217            mov     dpl,r2
0229 8B83      1218            mov     dph,r3
022B 8CF0      1219            mov     b,r4
022D E4        1220            clr     a
022E           1221   ;        main.c:609: return;
022E 020000    1222            ljmp    __gptrput
0231           1223   ;------------------------------------------------------------
0231           1224   ;Allocation info for local variables in function 'RXU1'
0231           1225   ;------------------------------------------------------------
0231           1226   ;------------------------------------------------------------
0231           1227   ;        main.c:615: bit RXU1 (void)
0231           1228   ;        -----------------------------------------
0231           1229   ;         function RXU1
0231           1230   ;        -----------------------------------------
0231           1231   _RXU1:
0231           1232   ;        main.c:618: SFRPAGE = 0x20;
0231 75A720    1233            mov     _SFRPAGE,#0x20
0234           1234   ;        main.c:619: mybit=RI1;
0234 A2C8      1235            mov     c,_RI1
0236           1236   ;        main.c:620: SFRPAGE = 0x00;
0236 75A700    1237            mov     _SFRPAGE,#0x00
0239           1238   ;        main.c:621: return mybit;
0239 22        1239            ret
023A           1240   ;------------------------------------------------------------
023A           1241   ;Allocation info for local variables in function 'waitms_or_RI1'
023A           1242   ;------------------------------------------------------------
023A           1243   ;ms                        Allocated to registers r2 r3 
023A           1244   ;j                         Allocated with name '_waitms_or_RI1_j_1_112'
023A           1245   ;k                         Allocated with name '_waitms_or_RI1_k_1_112'
023A           1246   ;------------------------------------------------------------
023A           1247   ;        main.c:624: void waitms_or_RI1 (unsigned int ms)
023A           1248   ;        -----------------------------------------
023A           1249   ;         function waitms_or_RI1
023A           1250   ;        -----------------------------------------
023A           1251   _waitms_or_RI1:
023A AA82      1252            mov     r2,dpl
023C AB83      1253            mov     r3,dph
023E           1254   ;        main.c:628: for(j=0; j<ms; j++)
023E 7C00      1255            mov     r4,#0x00
0240 7D00      1256            mov     r5,#0x00
0242           1257   L012007?:
0242 C3        1258            clr     c
0243 EC        1259            mov     a,r4
0244 9A        1260            subb    a,r2
0245 ED        1261            mov     a,r5
0246 9B        1262            subb    a,r3
0247 5000      1263            jnc     L012011?
0249           1264   ;        main.c:630: for (k=0; k<4; k++)
0249 7E00      1265            mov     r6,#0x00
024B           1266   L012003?:
024B BE0400    1267            cjne    r6,#0x04,L012019?
024E           1268   L012019?:
024E 5000      1269            jnc     L012009?
0250           1270   ;        main.c:632: if(RXU1()) return;
0250 C002      1271            push    ar2
0252 C003      1272            push    ar3
0254 C004      1273            push    ar4
0256 C005      1274            push    ar5
0258 C006      1275            push    ar6
025A 120000    1276            lcall   _RXU1
025D E4        1277            clr     a
025E 33        1278            rlc     a
025F D006      1279            pop     ar6
0261 D005      1280            pop     ar5
0263 D004      1281            pop     ar4
0265 D003      1282            pop     ar3
0267 D002      1283            pop     ar2
0269 6000      1284            jz      L012002?
026B 22        1285            ret
026C           1286   L012002?:
026C           1287   ;        main.c:633: Timer3us(250);
026C 7582FA    1288            mov     dpl,#0xFA
026F C002      1289            push    ar2
0271 C003      1290            push    ar3
0273 C004      1291            push    ar4
0275 C005      1292            push    ar5
0277 C006      1293            push    ar6
0279 120000    1294            lcall   _Timer3us
027C D006      1295            pop     ar6
027E D005      1296            pop     ar5
0280 D004      1297            pop     ar4
0282 D003      1298            pop     ar3
0284 D002      1299            pop     ar2
0286           1300   ;        main.c:630: for (k=0; k<4; k++)
0286 0E        1301            inc     r6
0287 8000      1302            sjmp    L012003?
0289           1303   L012009?:
0289           1304   ;        main.c:628: for(j=0; j<ms; j++)
0289 0C        1305            inc     r4
028A BC0040    1306            cjne    r4,#0x00,L012007?
028D 0D        1307            inc     r5
028E 8000      1308            sjmp    L012007?
0290           1309   L012011?:
0290 22        1310            ret
0291           1311   ;------------------------------------------------------------
0291           1312   ;Allocation info for local variables in function 'SendATCommand'
0291           1313   ;------------------------------------------------------------
0291           1314   ;s                         Allocated to registers r2 r3 r4 
0291           1315   ;------------------------------------------------------------
0291           1316   ;        main.c:638: void SendATCommand (char * s)
0291           1317   ;        -----------------------------------------
0291           1318   ;         function SendATCommand
0291           1319   ;        -----------------------------------------
0291           1320   _SendATCommand:
0291 AA82      1321            mov     r2,dpl
0293 AB83      1322            mov     r3,dph
0295 ACF0      1323            mov     r4,b
0297           1324   ;        main.c:640: printf("Command: %s", s);
0297 C002      1325            push    ar2
0299 C003      1326            push    ar3
029B C004      1327            push    ar4
029D C002      1328            push    ar2
029F C003      1329            push    ar3
02A1 C004      1330            push    ar4
02A3 74C0      1331            mov     a,#__str_0
02A5 C0E0      1332            push    acc
02A7 74D1      1333            mov     a,#(__str_0 >> 8)
02A9 C0E0      1334            push    acc
02AB 7480      1335            mov     a,#0x80
02AD C0E0      1336            push    acc
02AF 120000    1337            lcall   _printf
02B2 E581      1338            mov     a,sp
02B4 24FA      1339            add     a,#0xfa
02B6 F581      1340            mov     sp,a
02B8           1341   ;        main.c:641: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02B8 C2A0      1342            clr     _P2_0
02BA           1343   ;        main.c:642: waitms(5);
02BA 900005    1344            mov     dptr,#0x0005
02BD 120000    1345            lcall   _waitms
02C0 D004      1346            pop     ar4
02C2 D003      1347            pop     ar3
02C4 D002      1348            pop     ar2
02C6           1349   ;        main.c:643: sendstr1(s);
02C6 8A82      1350            mov     dpl,r2
02C8 8B83      1351            mov     dph,r3
02CA 8CF0      1352            mov     b,r4
02CC 120000    1353            lcall   _sendstr1
02CF           1354   ;        main.c:644: getstr1(buff, sizeof(buff)-1);
02CF 75D013    1355            mov     _getstr1_PARM_2,#0x13
02D2 905240    1356            mov     dptr,#_buff
02D5 75F040    1357            mov     b,#0x40
02D8 120000    1358            lcall   _getstr1
02DB           1359   ;        main.c:645: waitms(10);
02DB 90000A    1360            mov     dptr,#0x000A
02DE 120000    1361            lcall   _waitms
02E1           1362   ;        main.c:646: P2_0=1; // 'set' pin to 1 is normal operation mode.
02E1 D2A0      1363            setb    _P2_0
02E3           1364   ;        main.c:647: printf("Response: %s\r\n", buff);
02E3 7440      1365            mov     a,#_buff
02E5 C0E0      1366            push    acc
02E7 7452      1367            mov     a,#(_buff >> 8)
02E9 C0E0      1368            push    acc
02EB 7440      1369            mov     a,#0x40
02ED C0E0      1370            push    acc
02EF 7480      1371            mov     a,#__str_1
02F1 C0E0      1372            push    acc
02F3 74D2      1373            mov     a,#(__str_1 >> 8)
02F5 C0E0      1374            push    acc
02F7 7480      1375            mov     a,#0x80
02F9 C0E0      1376            push    acc
02FB 120000    1377            lcall   _printf
02FE E581      1378            mov     a,sp
0300 24FA      1379            add     a,#0xfa
0302 F581      1380            mov     sp,a
0304 22        1381            ret
0305           1382   ;------------------------------------------------------------
0305           1383   ;Allocation info for local variables in function 'ReceptionOff'
0305           1384   ;------------------------------------------------------------
0305           1385   ;------------------------------------------------------------
0305           1386   ;        main.c:650: void ReceptionOff (void)
0305           1387   ;        -----------------------------------------
0305           1388   ;         function ReceptionOff
0305           1389   ;        -----------------------------------------
0305           1390   _ReceptionOff:
0305           1391   ;        main.c:652: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0305 C2A0      1392            clr     _P2_0
0307           1393   ;        main.c:653: waitms(10);
0307 90000A    1394            mov     dptr,#0x000A
030A 120000    1395            lcall   _waitms
030D           1396   ;        main.c:654: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
030D 90D2C0    1397            mov     dptr,#__str_2
0310 75F080    1398            mov     b,#0x80
0313 120000    1399            lcall   _sendstr1
0316           1400   ;        main.c:655: waitms(10);
0316 90000A    1401            mov     dptr,#0x000A
0319 120000    1402            lcall   _waitms
031C           1403   ;        main.c:657: SCON1&=0b_0011_1111;
031C 53C83F    1404            anl     _SCON1,#0x3F
031F           1405   ;        main.c:658: P2_0=1; // 'set' pin to 1 is normal operation mode.
031F D2A0      1406            setb    _P2_0
0321 22        1407            ret
0322           1408   ;------------------------------------------------------------
0322           1409   ;Allocation info for local variables in function 'Set_Pin_Output'
0322           1410   ;------------------------------------------------------------
0322           1411   ;pin                       Allocated to registers r2 
0322           1412   ;mask                      Allocated to registers r3 
0322           1413   ;------------------------------------------------------------
0322           1414   ;        main.c:661: void Set_Pin_Output (unsigned char pin)
0322           1415   ;        -----------------------------------------
0322           1416   ;         function Set_Pin_Output
0322           1417   ;        -----------------------------------------
0322           1418   _Set_Pin_Output:
0322 AA82      1419            mov     r2,dpl
0324           1420   ;        main.c:665: mask=(1<<(pin&0x7));
0324 7407      1421            mov     a,#0x07
0326 5A        1422            anl     a,r2
0327 F5F0      1423            mov     b,a
0329 05F0      1424            inc     b
032B 7401      1425            mov     a,#0x01
032D 8000      1426            sjmp    L015011?
032F           1427   L015009?:
032F 25E0      1428            add     a,acc
0331           1429   L015011?:
0331 D5F040    1430            djnz    b,L015009?
0334 FB        1431            mov     r3,a
0335           1432   ;        main.c:666: switch(pin/0x10)
0335 EA        1433            mov     a,r2
0336 C4        1434            swap    a
0337 540F      1435            anl     a,#0x0f
0339 FA        1436            mov  r2,a
033A 24FC      1437            add     a,#0xff - 0x03
033C 4000      1438            jc      L015006?
033E EA        1439            mov     a,r2
033F 2A        1440            add     a,r2
0340 2A        1441            add     a,r2
0341 90D3C0    1442            mov     dptr,#L015013?
0344 73        1443            jmp     @a+dptr
0345           1444   L015013?:
0345 020000    1445            ljmp    L015001?
0348 020000    1446            ljmp    L015002?
034B 020000    1447            ljmp    L015003?
034E 020000    1448            ljmp    L015004?
0351           1449   ;        main.c:668: case 0: P0MDOUT |= mask; break;
0351           1450   L015001?:
0351 EB        1451            mov     a,r3
0352 42A4      1452            orl     _P0MDOUT,a
0354           1453   ;        main.c:669: case 1: P1MDOUT |= mask; break;
0354 22        1454            ret
0355           1455   L015002?:
0355 EB        1456            mov     a,r3
0356 42A5      1457            orl     _P1MDOUT,a
0358           1458   ;        main.c:670: case 2: P2MDOUT |= mask; break; 
0358 22        1459            ret
0359           1460   L015003?:
0359 EB        1461            mov     a,r3
035A 42A6      1462            orl     _P2MDOUT,a
035C           1463   ;        main.c:671: case 3: P3MDOUT |= mask; break; 
035C 22        1464            ret
035D           1465   L015004?:
035D EB        1466            mov     a,r3
035E 429C      1467            orl     _P3MDOUT,a
0360           1468   ;        main.c:672: }   
0360           1469   L015006?:
0360 22        1470            ret
0361           1471   ;------------------------------------------------------------
0361           1472   ;Allocation info for local variables in function 'Set_Pin_Input'
0361           1473   ;------------------------------------------------------------
0361           1474   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_123'
0361           1475   ;pin                       Allocated to registers r2 
0361           1476   ;------------------------------------------------------------
0361           1477   ;        main.c:675: void Set_Pin_Input (unsigned char pin)
0361           1478   ;        -----------------------------------------
0361           1479   ;         function Set_Pin_Input
0361           1480   ;        -----------------------------------------
0361           1481   _Set_Pin_Input:
0361 AA82      1482            mov     r2,dpl
0363           1483   ;        main.c:679: mask=(1<<(pin&0x7));
0363 7407      1484            mov     a,#0x07
0365 5A        1485            anl     a,r2
0366 F5F0      1486            mov     b,a
0368 05F0      1487            inc     b
036A 7401      1488            mov     a,#0x01
036C 8000      1489            sjmp    L016011?
036E           1490   L016009?:
036E 25E0      1491            add     a,acc
0370           1492   L016011?:
0370 D5F040    1493            djnz    b,L016009?
0373           1494   ;        main.c:680: mask=~mask;
0373 F4        1495            cpl     a
0374 FB        1496            mov     r3,a
0375           1497   ;        main.c:681: switch(pin/0x10)
0375 EA        1498            mov     a,r2
0376 C4        1499            swap    a
0377 540F      1500            anl     a,#0x0f
0379 FA        1501            mov  r2,a
037A 24FC      1502            add     a,#0xff - 0x03
037C 4000      1503            jc      L016006?
037E EA        1504            mov     a,r2
037F 2A        1505            add     a,r2
0380 2A        1506            add     a,r2
0381 90D5C0    1507            mov     dptr,#L016013?
0384 73        1508            jmp     @a+dptr
0385           1509   L016013?:
0385 020000    1510            ljmp    L016001?
0388 020000    1511            ljmp    L016002?
038B 020000    1512            ljmp    L016003?
038E 020000    1513            ljmp    L016004?
0391           1514   ;        main.c:683: case 0: P0MDOUT &= mask; break;
0391           1515   L016001?:
0391 EB        1516            mov     a,r3
0392 52A4      1517            anl     _P0MDOUT,a
0394           1518   ;        main.c:684: case 1: P1MDOUT &= mask; break;
0394 22        1519            ret
0395           1520   L016002?:
0395 EB        1521            mov     a,r3
0396 52A5      1522            anl     _P1MDOUT,a
0398           1523   ;        main.c:685: case 2: P2MDOUT &= mask; break; 
0398 22        1524            ret
0399           1525   L016003?:
0399 EB        1526            mov     a,r3
039A 52A6      1527            anl     _P2MDOUT,a
039C           1528   ;        main.c:686: case 3: P3MDOUT &= mask; break; 
039C 22        1529            ret
039D           1530   L016004?:
039D EB        1531            mov     a,r3
039E 529C      1532            anl     _P3MDOUT,a
03A0           1533   ;        main.c:687: }   
03A0           1534   L016006?:
03A0 22        1535            ret
03A1           1536   ;------------------------------------------------------------
03A1           1537   ;Allocation info for local variables in function 'InitADC'
03A1           1538   ;------------------------------------------------------------
03A1           1539   ;------------------------------------------------------------
03A1           1540   ;        main.c:690: void InitADC (void)
03A1           1541   ;        -----------------------------------------
03A1           1542   ;         function InitADC
03A1           1543   ;        -----------------------------------------
03A1           1544   _InitADC:
03A1           1545   ;        main.c:692: SFRPAGE = 0x00;
03A1 75A700    1546            mov     _SFRPAGE,#0x00
03A4           1547   ;        main.c:693: ADEN=0; // Disable ADC
03A4 C2EF      1548            clr     _ADEN
03A6           1549   ;        main.c:698: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
03A6 75B280    1550            mov     _ADC0CN1,#0x80
03A9           1551   ;        main.c:702: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
03A9 75BC20    1552            mov     _ADC0CF0,#0x20
03AC           1553   ;        main.c:706: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
03AC 75B91E    1554            mov     _ADC0CF1,#0x1E
03AF           1555   ;        main.c:715: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
03AF 75E800    1556            mov     _ADC0CN0,#0x00
03B2           1557   ;        main.c:720: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03B2 75DF3F    1558            mov     _ADC0CF2,#0x3F
03B5           1559   ;        main.c:724: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03B5 75B300    1560            mov     _ADC0CN2,#0x00
03B8           1561   ;        main.c:726: ADEN=1; // Enable ADC
03B8 D2EF      1562            setb    _ADEN
03BA 22        1563            ret
03BB           1564   ;------------------------------------------------------------
03BB           1565   ;Allocation info for local variables in function 'InitPinADC'
03BB           1566   ;------------------------------------------------------------
03BB           1567   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
03BB           1568   ;portno                    Allocated to registers r2 
03BB           1569   ;mask                      Allocated to registers r3 
03BB           1570   ;------------------------------------------------------------
03BB           1571   ;        main.c:729: void InitPinADC (unsigned char portno, unsigned char pin_num)
03BB           1572   ;        -----------------------------------------
03BB           1573   ;         function InitPinADC
03BB           1574   ;        -----------------------------------------
03BB           1575   _InitPinADC:
03BB AA82      1576            mov     r2,dpl
03BD           1577   ;        main.c:733: mask=1<<pin_num;
03BD 85E0F0    1578            mov     b,_InitPinADC_PARM_2
03C0 05F0      1579            inc     b
03C2 7401      1580            mov     a,#0x01
03C4 8000      1581            sjmp    L018013?
03C6           1582   L018011?:
03C6 25E0      1583            add     a,acc
03C8           1584   L018013?:
03C8 D5F040    1585            djnz    b,L018011?
03CB FB        1586            mov     r3,a
03CC           1587   ;        main.c:735: SFRPAGE = 0x20;
03CC 75A720    1588            mov     _SFRPAGE,#0x20
03CF           1589   ;        main.c:736: switch (portno)
03CF BA0080    1590            cjne    r2,#0x00,L018014?
03D2 8000      1591            sjmp    L018001?
03D4           1592   L018014?:
03D4 BA0100    1593            cjne    r2,#0x01,L018015?
03D7 8000      1594            sjmp    L018002?
03D9           1595   L018015?:
03D9           1596   ;        main.c:738: case 0:
03D9 BA0280    1597            cjne    r2,#0x02,L018005?
03DC 8000      1598            sjmp    L018003?
03DE           1599   L018001?:
03DE           1600   ;        main.c:739: P0MDIN &= (~mask); // Set pin as analog input
03DE EB        1601            mov     a,r3
03DF F4        1602            cpl     a
03E0 FA        1603            mov     r2,a
03E1 52F1      1604            anl     _P0MDIN,a
03E3           1605   ;        main.c:740: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03E3 EB        1606            mov     a,r3
03E4 42D4      1607            orl     _P0SKIP,a
03E6           1608   ;        main.c:741: break;
03E6           1609   ;        main.c:742: case 1:
03E6 8000      1610            sjmp    L018005?
03E8           1611   L018002?:
03E8           1612   ;        main.c:743: P1MDIN &= (~mask); // Set pin as analog input
03E8 EB        1613            mov     a,r3
03E9 F4        1614            cpl     a
03EA FA        1615            mov     r2,a
03EB 52F2      1616            anl     _P1MDIN,a
03ED           1617   ;        main.c:744: P1SKIP |= mask; // Skip Crossbar decoding for this pin
03ED EB        1618            mov     a,r3
03EE 42D5      1619            orl     _P1SKIP,a
03F0           1620   ;        main.c:745: break;
03F0           1621   ;        main.c:746: case 2:
03F0 8000      1622            sjmp    L018005?
03F2           1623   L018003?:
03F2           1624   ;        main.c:747: P2MDIN &= (~mask); // Set pin as analog input
03F2 EB        1625            mov     a,r3
03F3 F4        1626            cpl     a
03F4 FA        1627            mov     r2,a
03F5 52F3      1628            anl     _P2MDIN,a
03F7           1629   ;        main.c:748: P2SKIP |= mask; // Skip Crossbar decoding for this pin
03F7 EB        1630            mov     a,r3
03F8 42CC      1631            orl     _P2SKIP,a
03FA           1632   ;        main.c:752: }
03FA           1633   L018005?:
03FA           1634   ;        main.c:753: SFRPAGE = 0x00;
03FA 75A700    1635            mov     _SFRPAGE,#0x00
03FD 22        1636            ret
03FE           1637   ;------------------------------------------------------------
03FE           1638   ;Allocation info for local variables in function 'ADC_at_Pin'
03FE           1639   ;------------------------------------------------------------
03FE           1640   ;pin                       Allocated to registers 
03FE           1641   ;------------------------------------------------------------
03FE           1642   ;        main.c:756: unsigned int ADC_at_Pin(unsigned char pin)
03FE           1643   ;        -----------------------------------------
03FE           1644   ;         function ADC_at_Pin
03FE           1645   ;        -----------------------------------------
03FE           1646   _ADC_at_Pin:
03FE 8582BB    1647            mov     _ADC0MX,dpl
0401           1648   ;        main.c:759: ADINT = 0;
0401 C2ED      1649            clr     _ADINT
0403           1650   ;        main.c:760: ADBUSY = 1;     // Convert voltage at the pin
0403 D2EC      1651            setb    _ADBUSY
0405           1652   ;        main.c:761: while (!ADINT); // Wait for conversion to complete
0405           1653   L019001?:
0405 30ED00    1654            jnb     _ADINT,L019001?
0408           1655   ;        main.c:762: return (ADC0);
0408 85BD82    1656            mov     dpl,_ADC0
040B 85BE83    1657            mov     dph,(_ADC0 >> 8)
040E 22        1658            ret
040F           1659   ;------------------------------------------------------------
040F           1660   ;Allocation info for local variables in function 'ReadHX711'
040F           1661   ;------------------------------------------------------------
040F           1662   ;dataa                     Allocated with name '_ReadHX711_dataa_1_133'
040F           1663   ;i                         Allocated with name '_ReadHX711_i_1_133'
040F           1664   ;ans                       Allocated with name '_ReadHX711_ans_1_133'
040F           1665   ;j                         Allocated with name '_ReadHX711_j_1_133'
040F           1666   ;------------------------------------------------------------
040F           1667   ;        main.c:765: int ReadHX711(void) {
040F           1668   ;        -----------------------------------------
040F           1669   ;         function ReadHX711
040F           1670   ;        -----------------------------------------
040F           1671   _ReadHX711:
040F           1672   ;        main.c:766: xdata unsigned long dataa = 0;
040F 90C5B0    1673            mov     dptr,#_ReadHX711_dataa_1_133
0412 E4        1674            clr     a
0413 F0        1675            movx    @dptr,a
0414 A3        1676            inc     dptr
0415 F0        1677            movx    @dptr,a
0416 A3        1678            inc     dptr
0417 F0        1679            movx    @dptr,a
0418 A3        1680            inc     dptr
0419 F0        1681            movx    @dptr,a
041A           1682   ;        main.c:771: PD_SCK = 0;
041A C2A5      1683            clr     _P2_5
041C           1684   ;        main.c:773: for (i = 0; i < 24; i++) {
041C 7A00      1685            mov     r2,#0x00
041E           1686   L020011?:
041E C3        1687            clr     c
041F EA        1688            mov     a,r2
0420 6480      1689            xrl     a,#0x80
0422 9498      1690            subb    a,#0x98
0424 4000      1691            jc      L020037?
0426 020000    1692            ljmp    L020014?
0429           1693   L020037?:
0429           1694   ;        main.c:774: PD_SCK = 1;
0429 D2A5      1695            setb    _P2_5
042B           1696   ;        main.c:775: for (j = 0; j < 4; j++);
042B 90C600    1697            mov     dptr,#_ReadHX711_j_1_133
042E E4        1698            clr     a
042F F0        1699            movx    @dptr,a
0430           1700   L020003?:
0430 90C600    1701            mov     dptr,#_ReadHX711_j_1_133
0433 E0        1702            movx    a,@dptr
0434 FB        1703            mov     r3,a
0435 C3        1704            clr     c
0436 6480      1705            xrl     a,#0x80
0438 9484      1706            subb    a,#0x84
043A 5000      1707            jnc     L020006?
043C 90C600    1708            mov     dptr,#_ReadHX711_j_1_133
043F E0        1709            movx    a,@dptr
0440 2401      1710            add     a,#0x01
0442 F0        1711            movx    @dptr,a
0443 8000      1712            sjmp    L020003?
0445           1713   L020006?:
0445           1714   ;        main.c:776: dataa = dataa << 1;
0445 90C5B0    1715            mov     dptr,#_ReadHX711_dataa_1_133
0448 E0        1716            movx    a,@dptr
0449 FB        1717            mov     r3,a
044A A3        1718            inc     dptr
044B E0        1719            movx    a,@dptr
044C FC        1720            mov     r4,a
044D A3        1721            inc     dptr
044E E0        1722            movx    a,@dptr
044F FD        1723            mov     r5,a
0450 A3        1724            inc     dptr
0451 E0        1725            movx    a,@dptr
0452 FE        1726            mov     r6,a
0453 EB        1727            mov     a,r3
0454 2B        1728            add     a,r3
0455 FB        1729            mov     r3,a
0456 EC        1730            mov     a,r4
0457 33        1731            rlc     a
0458 FC        1732            mov     r4,a
0459 ED        1733            mov     a,r5
045A 33        1734            rlc     a
045B FD        1735            mov     r5,a
045C EE        1736            mov     a,r6
045D 33        1737            rlc     a
045E FE        1738            mov     r6,a
045F 90C5B0    1739            mov     dptr,#_ReadHX711_dataa_1_133
0462 EB        1740            mov     a,r3
0463 F0        1741            movx    @dptr,a
0464 A3        1742            inc     dptr
0465 EC        1743            mov     a,r4
0466 F0        1744            movx    @dptr,a
0467 A3        1745            inc     dptr
0468 ED        1746            mov     a,r5
0469 F0        1747            movx    @dptr,a
046A A3        1748            inc     dptr
046B EE        1749            mov     a,r6
046C F0        1750            movx    @dptr,a
046D           1751   ;        main.c:777: if (DOUT) {
046D 30A680    1752            jnb     _P2_6,L020002?
0470           1753   ;        main.c:778: dataa |= 0x01;
0470 90C5B0    1754            mov     dptr,#_ReadHX711_dataa_1_133
0473 E0        1755            movx    a,@dptr
0474 FB        1756            mov     r3,a
0475 A3        1757            inc     dptr
0476 E0        1758            movx    a,@dptr
0477 FC        1759            mov     r4,a
0478 A3        1760            inc     dptr
0479 E0        1761            movx    a,@dptr
047A FD        1762            mov     r5,a
047B A3        1763            inc     dptr
047C E0        1764            movx    a,@dptr
047D FE        1765            mov     r6,a
047E 90C5B0    1766            mov     dptr,#_ReadHX711_dataa_1_133
0481 7401      1767            mov     a,#0x01
0483 4B        1768            orl     a,r3
0484 F0        1769            movx    @dptr,a
0485 A3        1770            inc     dptr
0486 EC        1771            mov     a,r4
0487 F0        1772            movx    @dptr,a
0488 A3        1773            inc     dptr
0489 ED        1774            mov     a,r5
048A F0        1775            movx    @dptr,a
048B A3        1776            inc     dptr
048C EE        1777            mov     a,r6
048D F0        1778            movx    @dptr,a
048E           1779   L020002?:
048E           1780   ;        main.c:780: PD_SCK = 0;
048E C2A5      1781            clr     _P2_5
0490           1782   ;        main.c:781: for (j = 0; j < 4; j++);
0490 90C600    1783            mov     dptr,#_ReadHX711_j_1_133
0493 E4        1784            clr     a
0494 F0        1785            movx    @dptr,a
0495           1786   L020007?:
0495 90C600    1787            mov     dptr,#_ReadHX711_j_1_133
0498 E0        1788            movx    a,@dptr
0499 FB        1789            mov     r3,a
049A C3        1790            clr     c
049B 6480      1791            xrl     a,#0x80
049D 9484      1792            subb    a,#0x84
049F 5000      1793            jnc     L020013?
04A1 90C600    1794            mov     dptr,#_ReadHX711_j_1_133
04A4 E0        1795            movx    a,@dptr
04A5 2401      1796            add     a,#0x01
04A7 F0        1797            movx    @dptr,a
04A8 8000      1798            sjmp    L020007?
04AA           1799   L020013?:
04AA           1800   ;        main.c:773: for (i = 0; i < 24; i++) {
04AA 0A        1801            inc     r2
04AB 020000    1802            ljmp    L020011?
04AE           1803   L020014?:
04AE           1804   ;        main.c:784: PD_SCK = 1;
04AE D2A5      1805            setb    _P2_5
04B0           1806   ;        main.c:785: for (j = 0; j < 4; j++);
04B0 90C600    1807            mov     dptr,#_ReadHX711_j_1_133
04B3 E4        1808            clr     a
04B4 F0        1809            movx    @dptr,a
04B5           1810   L020015?:
04B5 90C600    1811            mov     dptr,#_ReadHX711_j_1_133
04B8 E0        1812            movx    a,@dptr
04B9 FA        1813            mov     r2,a
04BA C3        1814            clr     c
04BB 6480      1815            xrl     a,#0x80
04BD 9484      1816            subb    a,#0x84
04BF 5000      1817            jnc     L020018?
04C1 90C600    1818            mov     dptr,#_ReadHX711_j_1_133
04C4 E0        1819            movx    a,@dptr
04C5 2401      1820            add     a,#0x01
04C7 F0        1821            movx    @dptr,a
04C8 8000      1822            sjmp    L020015?
04CA           1823   L020018?:
04CA           1824   ;        main.c:786: PD_SCK = 0;
04CA C2A5      1825            clr     _P2_5
04CC           1826   ;        main.c:787: for (j = 0; j < 4; j++);
04CC 90C600    1827            mov     dptr,#_ReadHX711_j_1_133
04CF E4        1828            clr     a
04D0 F0        1829            movx    @dptr,a
04D1           1830   L020019?:
04D1 90C600    1831            mov     dptr,#_ReadHX711_j_1_133
04D4 E0        1832            movx    a,@dptr
04D5 FA        1833            mov     r2,a
04D6 C3        1834            clr     c
04D7 6480      1835            xrl     a,#0x80
04D9 9484      1836            subb    a,#0x84
04DB 5000      1837            jnc     L020022?
04DD 90C600    1838            mov     dptr,#_ReadHX711_j_1_133
04E0 E0        1839            movx    a,@dptr
04E1 2401      1840            add     a,#0x01
04E3 F0        1841            movx    @dptr,a
04E4 8000      1842            sjmp    L020019?
04E6           1843   L020022?:
04E6           1844   ;        main.c:788: ans = (dataa % 1000000)/10;
04E6 90C5B0    1845            mov     dptr,#_ReadHX711_dataa_1_133
04E9 E0        1846            movx    a,@dptr
04EA FA        1847            mov     r2,a
04EB A3        1848            inc     dptr
04EC E0        1849            movx    a,@dptr
04ED FB        1850            mov     r3,a
04EE A3        1851            inc     dptr
04EF E0        1852            movx    a,@dptr
04F0 FC        1853            mov     r4,a
04F1 A3        1854            inc     dptr
04F2 E0        1855            movx    a,@dptr
04F3 FD        1856            mov     r5,a
04F4 750040    1857            mov     __modulong_PARM_2,#0x40
04F7 750142    1858            mov     (__modulong_PARM_2 + 1),#0x42
04FA 75020F    1859            mov     (__modulong_PARM_2 + 2),#0x0F
04FD 750300    1860            mov     (__modulong_PARM_2 + 3),#0x00
0500 8A82      1861            mov     dpl,r2
0502 8B83      1862            mov     dph,r3
0504 8CF0      1863            mov     b,r4
0506 ED        1864            mov     a,r5
0507 120000    1865            lcall   __modulong
050A AA82      1866            mov     r2,dpl
050C AB83      1867            mov     r3,dph
050E ACF0      1868            mov     r4,b
0510 FD        1869            mov     r5,a
0511 75000A    1870            mov     __divulong_PARM_2,#0x0A
0514 E4        1871            clr     a
0515 F501      1872            mov     (__divulong_PARM_2 + 1),a
0517 F502      1873            mov     (__divulong_PARM_2 + 2),a
0519 F503      1874            mov     (__divulong_PARM_2 + 3),a
051B 8A82      1875            mov     dpl,r2
051D 8B83      1876            mov     dph,r3
051F 8CF0      1877            mov     b,r4
0521 ED        1878            mov     a,r5
0522           1879   ;        main.c:789: return ans;
0522 020000    1880            ljmp    __divulong
0525           1881   ;------------------------------------------------------------
0525           1882   ;Allocation info for local variables in function 'Timer5_ISR'
0525           1883   ;------------------------------------------------------------
0525           1884   ;------------------------------------------------------------
0525           1885   ;        main.c:792: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0525           1886   ;        -----------------------------------------
0525           1887   ;         function Timer5_ISR
0525           1888   ;        -----------------------------------------
0525           1889   _Timer5_ISR:
0525 C0D0      1890            push    bits
0527 C0E0      1891            push    acc
0529 C0F0      1892            push    b
052B C082      1893            push    dpl
052D C083      1894            push    dph
052F C002      1895            push    (0+2)
0531 C003      1896            push    (0+3)
0533 C004      1897            push    (0+4)
0535 C005      1898            push    (0+5)
0537 C006      1899            push    (0+6)
0539 C007      1900            push    (0+7)
053B C000      1901            push    (0+0)
053D C001      1902            push    (0+1)
053F C0D0      1903            push    psw
0541 75D000    1904            mov     psw,#0x00
0544           1905   ;        main.c:794: SFRPAGE=0x10;
0544 75A710    1906            mov     _SFRPAGE,#0x10
0547           1907   ;        main.c:795: TF5H = 0; // Clear Timer5 interrupt flag
0547 C2C7      1908            clr     _TF5H
0549           1909   ;        main.c:796: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0549 75D2C4    1910            mov     _TMR5RL,#0xC4
054C 75D3FF    1911            mov     (_TMR5RL >> 8),#0xFF
054F           1912   ;        main.c:798: fre_mea_count++;
054F 904B40    1913            mov     dptr,#_fre_mea_count
0552 E0        1914            movx    a,@dptr
0553 2401      1915            add     a,#0x01
0555 F0        1916            movx    @dptr,a
0556 A3        1917            inc     dptr
0557 E0        1918            movx    a,@dptr
0558 3400      1919            addc    a,#0x00
055A F0        1920            movx    @dptr,a
055B           1921   ;        main.c:799: if(fre_mea_count == 1000){
055B 904B40    1922            mov     dptr,#_fre_mea_count
055E E0        1923            movx    a,@dptr
055F FA        1924            mov     r2,a
0560 A3        1925            inc     dptr
0561 E0        1926            movx    a,@dptr
0562 FB        1927            mov     r3,a
0563 BAE810    1928            cjne    r2,#0xE8,L021004?
0566 BB0310    1929            cjne    r3,#0x03,L021004?
0569           1930   ;        main.c:800: fre_mea_count = 0;
0569 904B40    1931            mov     dptr,#_fre_mea_count
056C E4        1932            clr     a
056D F0        1933            movx    @dptr,a
056E A3        1934            inc     dptr
056F F0        1935            movx    @dptr,a
0570           1936   ;        main.c:801: if(mea_yes) freq100 = get_freq();
0570 904930    1937            mov     dptr,#_mea_yes
0573 E0        1938            movx    a,@dptr
0574 FA        1939            mov     r2,a
0575 6000      1940            jz      L021004?
0577 120000    1941            lcall   _get_freq
057A AA82      1942            mov     r2,dpl
057C AB83      1943            mov     r3,dph
057E 905200    1944            mov     dptr,#_freq100
0581 EA        1945            mov     a,r2
0582 F0        1946            movx    @dptr,a
0583 A3        1947            inc     dptr
0584 EB        1948            mov     a,r3
0585 F0        1949            movx    @dptr,a
0586 EB        1950            mov     a,r3
0587 33        1951            rlc     a
0588 95E0      1952            subb    a,acc
058A A3        1953            inc     dptr
058B F0        1954            movx    @dptr,a
058C A3        1955            inc     dptr
058D F0        1956            movx    @dptr,a
058E           1957   L021004?:
058E           1958   ;        main.c:810: pwm_counter++; 
058E 904E40    1959            mov     dptr,#_pwm_counter
0591 E0        1960            movx    a,@dptr
0592 2401      1961            add     a,#0x01
0594 F0        1962            movx    @dptr,a
0595 A3        1963            inc     dptr
0596 E0        1964            movx    a,@dptr
0597 3400      1965            addc    a,#0x00
0599 F0        1966            movx    @dptr,a
059A           1967   ;        main.c:811: if (pwm_counter == 100){
059A 904E40    1968            mov     dptr,#_pwm_counter
059D E0        1969            movx    a,@dptr
059E FA        1970            mov     r2,a
059F A3        1971            inc     dptr
05A0 E0        1972            movx    a,@dptr
05A1 FB        1973            mov     r3,a
05A2 BA6490    1974            cjne    r2,#0x64,L021006?
05A5 BB0090    1975            cjne    r3,#0x00,L021006?
05A8           1976   ;        main.c:812: pwm_counter = 0; 
05A8 904E40    1977            mov     dptr,#_pwm_counter
05AB E4        1978            clr     a
05AC F0        1979            movx    @dptr,a
05AD A3        1980            inc     dptr
05AE F0        1981            movx    @dptr,a
05AF           1982   L021006?:
05AF           1983   ;        main.c:815: if (pwm_right > pwm_counter){
05AF 904D80    1984            mov     dptr,#_pwm_right
05B2 E0        1985            movx    a,@dptr
05B3 FA        1986            mov     r2,a
05B4 904E40    1987            mov     dptr,#_pwm_counter
05B7 E0        1988            movx    a,@dptr
05B8 FB        1989            mov     r3,a
05B9 A3        1990            inc     dptr
05BA E0        1991            movx    a,@dptr
05BB FC        1992            mov     r4,a
05BC 7D00      1993            mov     r5,#0x00
05BE C3        1994            clr     c
05BF EB        1995            mov     a,r3
05C0 9A        1996            subb    a,r2
05C1 EC        1997            mov     a,r4
05C2 9D        1998            subb    a,r5
05C3 5000      1999            jnc     L021011?
05C5           2000   ;        main.c:816: if(L_motor_dir){
05C5 904D40    2001            mov     dptr,#_L_motor_dir
05C8 E0        2002            movx    a,@dptr
05C9 FA        2003            mov     r2,a
05CA 6000      2004            jz      L021008?
05CC           2005   ;        main.c:817: L_bridge_1 = 1; 
05CC D2A1      2006            setb    _P2_1
05CE           2007   ;        main.c:818: L_bridge_2 = 0; 
05CE C2A2      2008            clr     _P2_2
05D0 8000      2009            sjmp    L021012?
05D2           2010   L021008?:
05D2           2011   ;        main.c:821: L_bridge_1 = 0; 
05D2 C2A1      2012            clr     _P2_1
05D4           2013   ;        main.c:822: L_bridge_2 = 1; 
05D4 D2A2      2014            setb    _P2_2
05D6 8000      2015            sjmp    L021012?
05D8           2016   L021011?:
05D8           2017   ;        main.c:826: L_bridge_1 = 0; 
05D8 C2A1      2018            clr     _P2_1
05DA           2019   ;        main.c:827: L_bridge_2 = 0; 
05DA C2A2      2020            clr     _P2_2
05DC           2021   L021012?:
05DC           2022   ;        main.c:829: if (pwm_left > pwm_counter){
05DC 904DC0    2023            mov     dptr,#_pwm_left
05DF E0        2024            movx    a,@dptr
05E0 FA        2025            mov     r2,a
05E1 7D00      2026            mov     r5,#0x00
05E3 C3        2027            clr     c
05E4 EB        2028            mov     a,r3
05E5 9A        2029            subb    a,r2
05E6 EC        2030            mov     a,r4
05E7 9D        2031            subb    a,r5
05E8 5000      2032            jnc     L021017?
05EA           2033   ;        main.c:830: if (R_motor_dir){
05EA 904D00    2034            mov     dptr,#_R_motor_dir
05ED E0        2035            movx    a,@dptr
05EE FA        2036            mov     r2,a
05EF 6000      2037            jz      L021014?
05F1           2038   ;        main.c:831: R_bridge_1 = 1; 
05F1 D2A4      2039            setb    _P2_4
05F3           2040   ;        main.c:832: R_bridge_2 = 0;
05F3 C2A3      2041            clr     _P2_3
05F5 8000      2042            sjmp    L021018?
05F7           2043   L021014?:
05F7           2044   ;        main.c:835: R_bridge_1 = 0; 
05F7 C2A4      2045            clr     _P2_4
05F9           2046   ;        main.c:836: R_bridge_2 = 1;
05F9 D2A3      2047            setb    _P2_3
05FB 8000      2048            sjmp    L021018?
05FD           2049   L021017?:
05FD           2050   ;        main.c:840: R_bridge_1 = 0; 
05FD C2A4      2051            clr     _P2_4
05FF           2052   ;        main.c:841: R_bridge_2 = 0; 
05FF C2A3      2053            clr     _P2_3
0601           2054   L021018?:
0601           2055   ;        main.c:844: servo_counter++;
0601 904E00    2056            mov     dptr,#_servo_counter
0604 E0        2057            movx    a,@dptr
0605 2401      2058            add     a,#0x01
0607 F0        2059            movx    @dptr,a
0608 A3        2060            inc     dptr
0609 E0        2061            movx    a,@dptr
060A 3400      2062            addc    a,#0x00
060C F0        2063            movx    @dptr,a
060D           2064   ;        main.c:845: if(servo_counter==2000)
060D 904E00    2065            mov     dptr,#_servo_counter
0610 E0        2066            movx    a,@dptr
0611 FA        2067            mov     r2,a
0612 A3        2068            inc     dptr
0613 E0        2069            movx    a,@dptr
0614 FB        2070            mov     r3,a
0615 BAD050    2071            cjne    r2,#0xD0,L021020?
0618 BB0750    2072            cjne    r3,#0x07,L021020?
061B           2073   ;        main.c:847: servo_counter=0;
061B 904E00    2074            mov     dptr,#_servo_counter
061E E4        2075            clr     a
061F F0        2076            movx    @dptr,a
0620 A3        2077            inc     dptr
0621 F0        2078            movx    @dptr,a
0622           2079   ;        main.c:848: Servo_arm=1;
0622 D296      2080            setb    _P1_6
0624           2081   ;        main.c:849: Servo_base=1;
0624 D297      2082            setb    _P1_7
0626           2083   L021020?:
0626           2084   ;        main.c:851: if(servo_arm>=servo_counter)
0626 904C80    2085            mov     dptr,#_servo_arm
0629 E0        2086            movx    a,@dptr
062A FA        2087            mov     r2,a
062B 904E00    2088            mov     dptr,#_servo_counter
062E E0        2089            movx    a,@dptr
062F FB        2090            mov     r3,a
0630 A3        2091            inc     dptr
0631 E0        2092            movx    a,@dptr
0632 FC        2093            mov     r4,a
0633 7D00      2094            mov     r5,#0x00
0635 C3        2095            clr     c
0636 EA        2096            mov     a,r2
0637 9B        2097            subb    a,r3
0638 ED        2098            mov     a,r5
0639 9C        2099            subb    a,r4
063A 4000      2100            jc      L021022?
063C           2101   ;        main.c:853: Servo_arm = 1;
063C D296      2102            setb    _P1_6
063E 8000      2103            sjmp    L021023?
0640           2104   L021022?:
0640           2105   ;        main.c:857: Servo_arm = 0; 
0640 C296      2106            clr     _P1_6
0642           2107   L021023?:
0642           2108   ;        main.c:859: if(servo_base>=servo_counter)
0642 904CC0    2109            mov     dptr,#_servo_base
0645 E0        2110            movx    a,@dptr
0646 FA        2111            mov     r2,a
0647 7D00      2112            mov     r5,#0x00
0649 C3        2113            clr     c
064A EA        2114            mov     a,r2
064B 9B        2115            subb    a,r3
064C ED        2116            mov     a,r5
064D 9C        2117            subb    a,r4
064E 4000      2118            jc      L021025?
0650           2119   ;        main.c:861: Servo_base = 1;
0650 D297      2120            setb    _P1_7
0652 8000      2121            sjmp    L021027?
0654           2122   L021025?:
0654           2123   ;        main.c:865: Servo_base = 0; 
0654 C297      2124            clr     _P1_7
0656           2125   L021027?:
0656 D0D0      2126            pop     psw
0658 D001      2127            pop     (0+1)
065A D000      2128            pop     (0+0)
065C D007      2129            pop     (0+7)
065E D006      2130            pop     (0+6)
0660 D005      2131            pop     (0+5)
0662 D004      2132            pop     (0+4)
0664 D003      2133            pop     (0+3)
0666 D002      2134            pop     (0+2)
0668 D083      2135            pop     dph
066A D082      2136            pop     dpl
066C D0F0      2137            pop     b
066E D0E0      2138            pop     acc
0670 D0D0      2139            pop     bits
0672 32        2140            reti
0673           2141   ;------------------------------------------------------------
0673           2142   ;Allocation info for local variables in function 'servo_pick'
0673           2143   ;------------------------------------------------------------
0673           2144   ;------------------------------------------------------------
0673           2145   ;        main.c:869: void servo_pick(){
0673           2146   ;        -----------------------------------------
0673           2147   ;         function servo_pick
0673           2148   ;        -----------------------------------------
0673           2149   _servo_pick:
0673           2150   ;        main.c:871: printf("Initiailizing angle\r\n");
0673 7490      2151            mov     a,#__str_3
0675 C0E0      2152            push    acc
0677 74E0      2153            mov     a,#(__str_3 >> 8)
0679 C0E0      2154            push    acc
067B 7480      2155            mov     a,#0x80
067D C0E0      2156            push    acc
067F 120000    2157            lcall   _printf
0682 1581      2158            dec     sp
0684 1581      2159            dec     sp
0686 1581      2160            dec     sp
0688           2161   ;        main.c:872: servo_arm = 100;
0688 904C80    2162            mov     dptr,#_servo_arm
068B 7464      2163            mov     a,#0x64
068D F0        2164            movx    @dptr,a
068E           2165   ;        main.c:873: servo_base = 100;
068E 904CC0    2166            mov     dptr,#_servo_base
0691 7464      2167            mov     a,#0x64
0693 F0        2168            movx    @dptr,a
0694           2169   ;        main.c:874: waitms(500);
0694 9001F4    2170            mov     dptr,#0x01F4
0697 120000    2171            lcall   _waitms
069A           2172   ;        main.c:875: printf("Turning servo base \r\n");
069A 74D0      2173            mov     a,#__str_4
069C C0E0      2174            push    acc
069E 74E0      2175            mov     a,#(__str_4 >> 8)
06A0 C0E0      2176            push    acc
06A2 7480      2177            mov     a,#0x80
06A4 C0E0      2178            push    acc
06A6 120000    2179            lcall   _printf
06A9 1581      2180            dec     sp
06AB 1581      2181            dec     sp
06AD 1581      2182            dec     sp
06AF           2183   ;        main.c:876: servo_base = 250;
06AF 904CC0    2184            mov     dptr,#_servo_base
06B2 74FA      2185            mov     a,#0xFA
06B4 F0        2186            movx    @dptr,a
06B5           2187   ;        main.c:877: waitms(400);
06B5 900190    2188            mov     dptr,#0x0190
06B8 120000    2189            lcall   _waitms
06BB           2190   ;        main.c:878: printf("Turning servo arm \r\n");
06BB 7410      2191            mov     a,#__str_5
06BD C0E0      2192            push    acc
06BF 74E1      2193            mov     a,#(__str_5 >> 8)
06C1 C0E0      2194            push    acc
06C3 7480      2195            mov     a,#0x80
06C5 C0E0      2196            push    acc
06C7 120000    2197            lcall   _printf
06CA 1581      2198            dec     sp
06CC 1581      2199            dec     sp
06CE 1581      2200            dec     sp
06D0           2201   ;        main.c:879: servo_arm = 250;
06D0 904C80    2202            mov     dptr,#_servo_arm
06D3 74FA      2203            mov     a,#0xFA
06D5 F0        2204            movx    @dptr,a
06D6           2205   ;        main.c:880: printf("Magnet on\r\n");
06D6 7450      2206            mov     a,#__str_6
06D8 C0E0      2207            push    acc
06DA 74E1      2208            mov     a,#(__str_6 >> 8)
06DC C0E0      2209            push    acc
06DE 7480      2210            mov     a,#0x80
06E0 C0E0      2211            push    acc
06E2 120000    2212            lcall   _printf
06E5 1581      2213            dec     sp
06E7 1581      2214            dec     sp
06E9 1581      2215            dec     sp
06EB           2216   ;        main.c:881: Magnet = 1;
06EB D295      2217            setb    _P1_5
06ED           2218   ;        main.c:882: waitms(400);
06ED 900190    2219            mov     dptr,#0x0190
06F0 120000    2220            lcall   _waitms
06F3           2221   ;        main.c:883: printf("Magnet delay done, moving servo base again\r\n");
06F3 7490      2222            mov     a,#__str_7
06F5 C0E0      2223            push    acc
06F7 74E1      2224            mov     a,#(__str_7 >> 8)
06F9 C0E0      2225            push    acc
06FB 7480      2226            mov     a,#0x80
06FD C0E0      2227            push    acc
06FF 120000    2228            lcall   _printf
0702 1581      2229            dec     sp
0704 1581      2230            dec     sp
0706 1581      2231            dec     sp
0708           2232   ;        main.c:884: servo_base = 200;
0708 904CC0    2233            mov     dptr,#_servo_base
070B 74C8      2234            mov     a,#0xC8
070D F0        2235            movx    @dptr,a
070E           2236   ;        main.c:885: waitms(400);
070E 900190    2237            mov     dptr,#0x0190
0711 120000    2238            lcall   _waitms
0714           2239   ;        main.c:886: servo_arm = 100; 
0714 904C80    2240            mov     dptr,#_servo_arm
0717 7464      2241            mov     a,#0x64
0719 F0        2242            movx    @dptr,a
071A           2243   ;        main.c:887: waitms(200);
071A 9000C8    2244            mov     dptr,#0x00C8
071D           2245   ;        main.c:921: return;
071D 020000    2246            ljmp    _waitms
0720           2247   ;------------------------------------------------------------
0720           2248   ;Allocation info for local variables in function 'check_bound'
0720           2249   ;------------------------------------------------------------
0720           2250   ;d2                        Allocated with name '_check_bound_PARM_2'
0720           2251   ;d1                        Allocated to registers r2 r3 
0720           2252   ;------------------------------------------------------------
0720           2253   ;        main.c:924: int check_bound(int d1, int d2){
0720           2254   ;        -----------------------------------------
0720           2255   ;         function check_bound
0720           2256   ;        -----------------------------------------
0720           2257   _check_bound:
0720 AA82      2258            mov     r2,dpl
0722 AB83      2259            mov     r3,dph
0724           2260   ;        main.c:925: if(d1>12000||d2>12000)      return 1;
0724 C3        2261            clr     c
0725 74E0      2262            mov     a,#0xE0
0727 9A        2263            subb    a,r2
0728 74AE      2264            mov     a,#(0x2E ^ 0x80)
072A 8BF0      2265            mov     b,r3
072C 63F080    2266            xrl     b,#0x80
072F 95F0      2267            subb    a,b
0731 4000      2268            jc      L023001?
0733 74E0      2269            mov     a,#0xE0
0735 9590      2270            subb    a,_check_bound_PARM_2
0737 74AE      2271            mov     a,#(0x2E ^ 0x80)
0739 8591F0    2272            mov     b,(_check_bound_PARM_2 + 1)
073C 63F080    2273            xrl     b,#0x80
073F 95F0      2274            subb    a,b
0741 5000      2275            jnc     L023002?
0743           2276   L023001?:
0743 900001    2277            mov     dptr,#0x0001
0746           2278   ;        main.c:926: else return 0;
0746 22        2279            ret
0747           2280   L023002?:
0747 900000    2281            mov     dptr,#0x0000
074A 22        2282            ret
074B           2283   ;------------------------------------------------------------
074B           2284   ;Allocation info for local variables in function 'Init_all'
074B           2285   ;------------------------------------------------------------
074B           2286   ;------------------------------------------------------------
074B           2287   ;        main.c:929: void Init_all(){
074B           2288   ;        -----------------------------------------
074B           2289   ;         function Init_all
074B           2290   ;        -----------------------------------------
074B           2291   _Init_all:
074B           2292   ;        main.c:931: Set_Pin_Output(0x24);
074B 758224    2293            mov     dpl,#0x24
074E 120000    2294            lcall   _Set_Pin_Output
0751           2295   ;        main.c:932: Set_Pin_Output(0x23);
0751 758223    2296            mov     dpl,#0x23
0754 120000    2297            lcall   _Set_Pin_Output
0757           2298   ;        main.c:933: Set_Pin_Output(0x22);
0757 758222    2299            mov     dpl,#0x22
075A 120000    2300            lcall   _Set_Pin_Output
075D           2301   ;        main.c:934: Set_Pin_Output(0x21);
075D 758221    2302            mov     dpl,#0x21
0760 120000    2303            lcall   _Set_Pin_Output
0763           2304   ;        main.c:935: Set_Pin_Output(0x17);
0763 758217    2305            mov     dpl,#0x17
0766 120000    2306            lcall   _Set_Pin_Output
0769           2307   ;        main.c:936: Set_Pin_Output(0x16);
0769 758216    2308            mov     dpl,#0x16
076C 120000    2309            lcall   _Set_Pin_Output
076F           2310   ;        main.c:937: Set_Pin_Output(0x15);
076F 758215    2311            mov     dpl,#0x15
0772 120000    2312            lcall   _Set_Pin_Output
0775           2313   ;        main.c:938: Set_Pin_Output(0x10); // CS
0775 758210    2314            mov     dpl,#0x10
0778 120000    2315            lcall   _Set_Pin_Output
077B           2316   ;        main.c:940: Set_Pin_Input(0x30);
077B 758230    2317            mov     dpl,#0x30
077E 120000    2318            lcall   _Set_Pin_Input
0781           2319   ;        main.c:941: Set_Pin_Output(0x25); // CLK for Load
0781 758225    2320            mov     dpl,#0x25
0784 120000    2321            lcall   _Set_Pin_Output
0787           2322   ;        main.c:942: Set_Pin_Input(0x26);
0787 758226    2323            mov     dpl,#0x26
078A 120000    2324            lcall   _Set_Pin_Input
078D           2325   ;        main.c:945: InitPinADC(1,3);
078D 75E003    2326            mov     _InitPinADC_PARM_2,#0x03
0790 758201    2327            mov     dpl,#0x01
0793 120000    2328            lcall   _InitPinADC
0796           2329   ;        main.c:946: InitPinADC(1,4);
0796 75E004    2330            mov     _InitPinADC_PARM_2,#0x04
0799 758201    2331            mov     dpl,#0x01
079C 120000    2332            lcall   _InitPinADC
079F           2333   ;        main.c:947: InitADC();
079F 120000    2334            lcall   _InitADC
07A2           2335   ;        main.c:949: TMOD&=0b_1111_0000; 
07A2 5389F0    2336            anl     _TMOD,#0xF0
07A5           2337   ;        main.c:950: TMOD|=0b_0000_0001; 
07A5 438901    2338            orl     _TMOD,#0x01
07A8           2339   ;        main.c:951: TR0=0; 
07A8 C28C      2340            clr     _TR0
07AA           2341   ;        main.c:953: Servo_arm=0;
07AA C296      2342            clr     _P1_6
07AC           2343   ;        main.c:954: Servo_base=0;
07AC C297      2344            clr     _P1_7
07AE           2345   ;        main.c:955: Magnet = 0;
07AE C295      2346            clr     _P1_5
07B0           2347   ;        main.c:956: PD_SCK = 0;
07B0 C2A5      2348            clr     _P2_5
07B2           2349   ;        main.c:957: return;
07B2 22        2350            ret
07B3           2351   ;------------------------------------------------------------
07B3           2352   ;Allocation info for local variables in function 'Move_back_ms'
07B3           2353   ;------------------------------------------------------------
07B3           2354   ;ms                        Allocated to registers r2 r3 
07B3           2355   ;------------------------------------------------------------
07B3           2356   ;        main.c:960: void Move_back_ms(int ms){
07B3           2357   ;        -----------------------------------------
07B3           2358   ;         function Move_back_ms
07B3           2359   ;        -----------------------------------------
07B3           2360   _Move_back_ms:
07B3 AA82      2361            mov     r2,dpl
07B5 AB83      2362            mov     r3,dph
07B7           2363   ;        main.c:962: L_motor_dir = 1;
07B7 904D40    2364            mov     dptr,#_L_motor_dir
07BA 7401      2365            mov     a,#0x01
07BC F0        2366            movx    @dptr,a
07BD           2367   ;        main.c:963: R_motor_dir = 1;
07BD 904D00    2368            mov     dptr,#_R_motor_dir
07C0 7401      2369            mov     a,#0x01
07C2 F0        2370            movx    @dptr,a
07C3           2371   ;        main.c:965: pwm_left = 50;
07C3 904DC0    2372            mov     dptr,#_pwm_left
07C6 7432      2373            mov     a,#0x32
07C8 F0        2374            movx    @dptr,a
07C9           2375   ;        main.c:966: pwm_right = 50;
07C9 904D80    2376            mov     dptr,#_pwm_right
07CC 7432      2377            mov     a,#0x32
07CE F0        2378            movx    @dptr,a
07CF           2379   ;        main.c:968: waitms(ms);
07CF 8A82      2380            mov     dpl,r2
07D1 8B83      2381            mov     dph,r3
07D3 120000    2382            lcall   _waitms
07D6           2383   ;        main.c:970: L_motor_dir = 0;
07D6 904D40    2384            mov     dptr,#_L_motor_dir
07D9           2385   ;        main.c:971: R_motor_dir = 0;
07D9           2386   ;        main.c:972: pwm_left = 0;
07D9           2387   ;        main.c:973: pwm_right = 0;
07D9 E4        2388            clr     a
07DA F0        2389            movx    @dptr,a
07DB 904D00    2390            mov     dptr,#_R_motor_dir
07DE F0        2391            movx    @dptr,a
07DF 904DC0    2392            mov     dptr,#_pwm_left
07E2 F0        2393            movx    @dptr,a
07E3 904D80    2394            mov     dptr,#_pwm_right
07E6 F0        2395            movx    @dptr,a
07E7           2396   ;        main.c:974: return;
07E7 22        2397            ret
07E8           2398   ;------------------------------------------------------------
07E8           2399   ;Allocation info for local variables in function 'Right_angle'
07E8           2400   ;------------------------------------------------------------
07E8           2401   ;angle                     Allocated to registers r2 r3 
07E8           2402   ;------------------------------------------------------------
07E8           2403   ;        main.c:977: void Right_angle(int angle){
07E8           2404   ;        -----------------------------------------
07E8           2405   ;         function Right_angle
07E8           2406   ;        -----------------------------------------
07E8           2407   _Right_angle:
07E8 AA82      2408            mov     r2,dpl
07EA AB83      2409            mov     r3,dph
07EC           2410   ;        main.c:979: L_motor_dir = 1;
07EC 904D40    2411            mov     dptr,#_L_motor_dir
07EF 7401      2412            mov     a,#0x01
07F1 F0        2413            movx    @dptr,a
07F2           2414   ;        main.c:980: R_motor_dir = 0;
07F2 904D00    2415            mov     dptr,#_R_motor_dir
07F5 E4        2416            clr     a
07F6 F0        2417            movx    @dptr,a
07F7           2418   ;        main.c:981: pwm_left = 80;
07F7 904DC0    2419            mov     dptr,#_pwm_left
07FA 7450      2420            mov     a,#0x50
07FC F0        2421            movx    @dptr,a
07FD           2422   ;        main.c:982: pwm_right = 80 * pwm_corr;
07FD C002      2423            push    ar2
07FF C003      2424            push    ar3
0801 904A70    2425            mov     dptr,#_pwm_corr
0804 E0        2426            movx    a,@dptr
0805 C0E0      2427            push    acc
0807 A3        2428            inc     dptr
0808 E0        2429            movx    a,@dptr
0809 C0E0      2430            push    acc
080B A3        2431            inc     dptr
080C E0        2432            movx    a,@dptr
080D C0E0      2433            push    acc
080F A3        2434            inc     dptr
0810 E0        2435            movx    a,@dptr
0811 C0E0      2436            push    acc
0813 900000    2437            mov     dptr,#0x0000
0816 75F0A0    2438            mov     b,#0xA0
0819 7442      2439            mov     a,#0x42
081B 120000    2440            lcall   ___fsmul
081E AC82      2441            mov     r4,dpl
0820 AD83      2442            mov     r5,dph
0822 AEF0      2443            mov     r6,b
0824 FF        2444            mov     r7,a
0825 E581      2445            mov     a,sp
0827 24FC      2446            add     a,#0xfc
0829 F581      2447            mov     sp,a
082B 8C82      2448            mov     dpl,r4
082D 8D83      2449            mov     dph,r5
082F 8EF0      2450            mov     b,r6
0831 EF        2451            mov     a,r7
0832 120000    2452            lcall   ___fs2uchar
0835 E582      2453            mov     a,dpl
0837 D003      2454            pop     ar3
0839 D002      2455            pop     ar2
083B 904D80    2456            mov     dptr,#_pwm_right
083E F0        2457            movx    @dptr,a
083F           2458   ;        main.c:984: waitms(angle);
083F 8A82      2459            mov     dpl,r2
0841 8B83      2460            mov     dph,r3
0843 120000    2461            lcall   _waitms
0846           2462   ;        main.c:986: L_motor_dir = 0;
0846 904D40    2463            mov     dptr,#_L_motor_dir
0849           2464   ;        main.c:987: R_motor_dir = 0;
0849           2465   ;        main.c:988: pwm_left = 0;
0849           2466   ;        main.c:989: pwm_right = 0;
0849 E4        2467            clr     a
084A F0        2468            movx    @dptr,a
084B 904D00    2469            mov     dptr,#_R_motor_dir
084E F0        2470            movx    @dptr,a
084F 904DC0    2471            mov     dptr,#_pwm_left
0852 F0        2472            movx    @dptr,a
0853 904D80    2473            mov     dptr,#_pwm_right
0856 F0        2474            movx    @dptr,a
0857           2475   ;        main.c:990: return;
0857 22        2476            ret
0858           2477   ;------------------------------------------------------------
0858           2478   ;Allocation info for local variables in function 'Move_forward'
0858           2479   ;------------------------------------------------------------
0858           2480   ;------------------------------------------------------------
0858           2481   ;        main.c:993: void Move_forward(){
0858           2482   ;        -----------------------------------------
0858           2483   ;         function Move_forward
0858           2484   ;        -----------------------------------------
0858           2485   _Move_forward:
0858           2486   ;        main.c:995: L_motor_dir = 0;
0858 904D40    2487            mov     dptr,#_L_motor_dir
085B           2488   ;        main.c:996: R_motor_dir = 0;
085B E4        2489            clr     a
085C F0        2490            movx    @dptr,a
085D 904D00    2491            mov     dptr,#_R_motor_dir
0860 F0        2492            movx    @dptr,a
0861           2493   ;        main.c:997: pwm_left = 60;
0861 904DC0    2494            mov     dptr,#_pwm_left
0864 743C      2495            mov     a,#0x3C
0866 F0        2496            movx    @dptr,a
0867           2497   ;        main.c:998: pwm_right = 60 * pwm_corr;
0867 904A70    2498            mov     dptr,#_pwm_corr
086A E0        2499            movx    a,@dptr
086B C0E0      2500            push    acc
086D A3        2501            inc     dptr
086E E0        2502            movx    a,@dptr
086F C0E0      2503            push    acc
0871 A3        2504            inc     dptr
0872 E0        2505            movx    a,@dptr
0873 C0E0      2506            push    acc
0875 A3        2507            inc     dptr
0876 E0        2508            movx    a,@dptr
0877 C0E0      2509            push    acc
0879 900000    2510            mov     dptr,#0x0000
087C 75F070    2511            mov     b,#0x70
087F 7442      2512            mov     a,#0x42
0881 120000    2513            lcall   ___fsmul
0884 AA82      2514            mov     r2,dpl
0886 AB83      2515            mov     r3,dph
0888 ACF0      2516            mov     r4,b
088A FD        2517            mov     r5,a
088B E581      2518            mov     a,sp
088D 24FC      2519            add     a,#0xfc
088F F581      2520            mov     sp,a
0891 8A82      2521            mov     dpl,r2
0893 8B83      2522            mov     dph,r3
0895 8CF0      2523            mov     b,r4
0897 ED        2524            mov     a,r5
0898 120000    2525            lcall   ___fs2uchar
089B E582      2526            mov     a,dpl
089D 904D80    2527            mov     dptr,#_pwm_right
08A0 F0        2528            movx    @dptr,a
08A1           2529   ;        main.c:999: return;
08A1 22        2530            ret
08A2           2531   ;------------------------------------------------------------
08A2           2532   ;Allocation info for local variables in function 'simple_rand'
08A2           2533   ;------------------------------------------------------------
08A2           2534   ;------------------------------------------------------------
08A2           2535   ;        main.c:1002: unsigned int simple_rand() {
08A2           2536   ;        -----------------------------------------
08A2           2537   ;         function simple_rand
08A2           2538   ;        -----------------------------------------
08A2           2539   _simple_rand:
08A2           2540   ;        main.c:1003: seed = (seed * 25173 + 13849) & 0xFFFF;  
08A2 904AB0    2541            mov     dptr,#_seed
08A5 E0        2542            movx    a,@dptr
08A6 F500      2543            mov     __mulint_PARM_2,a
08A8 A3        2544            inc     dptr
08A9 E0        2545            movx    a,@dptr
08AA F501      2546            mov     (__mulint_PARM_2 + 1),a
08AC 906255    2547            mov     dptr,#0x6255
08AF 120000    2548            lcall   __mulint
08B2 E582      2549            mov     a,dpl
08B4 8583F0    2550            mov     b,dph
08B7 904AB0    2551            mov     dptr,#_seed
08BA 2419      2552            add     a,#0x19
08BC F0        2553            movx    @dptr,a
08BD 7436      2554            mov     a,#0x36
08BF 35F0      2555            addc    a,b
08C1 A3        2556            inc     dptr
08C2 F0        2557            movx    @dptr,a
08C3           2558   ;        main.c:1004: return seed;     
08C3 904AB0    2559            mov     dptr,#_seed
08C6 E0        2560            movx    a,@dptr
08C7 FA        2561            mov     r2,a
08C8 A3        2562            inc     dptr
08C9 E0        2563            movx    a,@dptr
08CA 8A82      2564            mov     dpl,r2
08CC F583      2565            mov     dph,a
08CE 22        2566            ret
08CF           2567   ;------------------------------------------------------------
08CF           2568   ;Allocation info for local variables in function 'get_random_90_250'
08CF           2569   ;------------------------------------------------------------
08CF           2570   ;------------------------------------------------------------
08CF           2571   ;        main.c:1007: unsigned int get_random_90_250() {
08CF           2572   ;        -----------------------------------------
08CF           2573   ;         function get_random_90_250
08CF           2574   ;        -----------------------------------------
08CF           2575   _get_random_90_250:
08CF           2576   ;        main.c:1008: return (simple_rand() % (250 - 85 + 1)) + 85;
08CF 120000    2577            lcall   _simple_rand
08D2 7500A6    2578            mov     __moduint_PARM_2,#0xA6
08D5 E4        2579            clr     a
08D6 F501      2580            mov     (__moduint_PARM_2 + 1),a
08D8 120000    2581            lcall   __moduint
08DB E582      2582            mov     a,dpl
08DD 8583F0    2583            mov     b,dph
08E0 2455      2584            add     a,#0x55
08E2 F582      2585            mov     dpl,a
08E4 E4        2586            clr     a
08E5 35F0      2587            addc    a,b
08E7 F583      2588            mov     dph,a
08E9 22        2589            ret
08EA           2590   ;------------------------------------------------------------
08EA           2591   ;Allocation info for local variables in function 'Auto_mode_slave'
08EA           2592   ;------------------------------------------------------------
08EA           2593   ;sloc0                     Allocated with name '_Auto_mode_slave_sloc0_1_0'
08EA           2594   ;count                     Allocated with name '_Auto_mode_slave_count_1_164'
08EA           2595   ;command                   Allocated with name '_Auto_mode_slave_command_1_164'
08EA           2596   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_164'
08EA           2597   ;bound                     Allocated with name '_Auto_mode_slave_bound_1_164'
08EA           2598   ;c                         Allocated with name '_Auto_mode_slave_c_1_164'
08EA           2599   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_164'
08EA           2600   ;angle                     Allocated with name '_Auto_mode_slave_angle_1_164'
08EA           2601   ;------------------------------------------------------------
08EA           2602   ;        main.c:1033: void Auto_mode_slave(){
08EA           2603   ;        -----------------------------------------
08EA           2604   ;         function Auto_mode_slave
08EA           2605   ;        -----------------------------------------
08EA           2606   _Auto_mode_slave:
08EA           2607   ;        main.c:1036: xdata int state_res = 1;
08EA 90C6B0    2608            mov     dptr,#_Auto_mode_slave_state_res_1_164
08ED 7401      2609            mov     a,#0x01
08EF F0        2610            movx    @dptr,a
08F0 E4        2611            clr     a
08F1 A3        2612            inc     dptr
08F2 F0        2613            movx    @dptr,a
08F3           2614   ;        main.c:1044: while(count < 20 && state_res){
08F3 E4        2615            clr     a
08F4 F5E0      2616            mov     _Auto_mode_slave_sloc0_1_0,a
08F6 F5E1      2617            mov     (_Auto_mode_slave_sloc0_1_0 + 1),a
08F8           2618   L030018?:
08F8 C3        2619            clr     c
08F9 E5E0      2620            mov     a,_Auto_mode_slave_sloc0_1_0
08FB 9414      2621            subb    a,#0x14
08FD E5E1      2622            mov     a,(_Auto_mode_slave_sloc0_1_0 + 1)
08FF 6480      2623            xrl     a,#0x80
0901 9480      2624            subb    a,#0x80
0903 4000      2625            jc      L030034?
0905 22        2626            ret
0906           2627   L030034?:
0906 90C6B0    2628            mov     dptr,#_Auto_mode_slave_state_res_1_164
0909 E0        2629            movx    a,@dptr
090A FC        2630            mov     r4,a
090B A3        2631            inc     dptr
090C E0        2632            movx    a,@dptr
090D FD        2633            mov     r5,a
090E 4C        2634            orl     a,r4
090F 7000      2635            jnz     L030035?
0911 22        2636            ret
0912           2637   L030035?:
0912           2638   ;        main.c:1046: if(RXU1()){
0912 C004      2639            push    ar4
0914 C005      2640            push    ar5
0916 120000    2641            lcall   _RXU1
0919 D005      2642            pop     ar5
091B D004      2643            pop     ar4
091D 4000      2644            jc      L030036?
091F 020000    2645            ljmp    L030012?
0922           2646   L030036?:
0922           2647   ;        main.c:1047: c=getchar1();      
0922 C004      2648            push    ar4
0924 C005      2649            push    ar5
0926 120000    2650            lcall   _getchar1
0929 AE82      2651            mov     r6,dpl
092B D005      2652            pop     ar5
092D D004      2653            pop     ar4
092F           2654   ;        main.c:1048: if(c=='!'){
092F BE2120    2655            cjne    r6,#0x21,L030037?
0932 8000      2656            sjmp    L030038?
0934           2657   L030037?:
0934 020000    2658            ljmp    L030009?
0937           2659   L030038?:
0937           2660   ;        main.c:1049: getstr1(buff, sizeof(buff)-1);
0937 75D013    2661            mov     _getstr1_PARM_2,#0x13
093A 905240    2662            mov     dptr,#_buff
093D 75F040    2663            mov     b,#0x40
0940 120000    2664            lcall   _getstr1
0943           2665   ;        main.c:1050: if(strlen(buff)==11){
0943 905240    2666            mov     dptr,#_buff
0946 75F040    2667            mov     b,#0x40
0949 120000    2668            lcall   _strlen
094C AF82      2669            mov     r7,dpl
094E AA83      2670            mov     r2,dph
0950 BF0B20    2671            cjne    r7,#0x0B,L030039?
0953 BA0020    2672            cjne    r2,#0x00,L030039?
0956 8000      2673            sjmp    L030040?
0958           2674   L030039?:
0958 020000    2675            ljmp    L030012?
095B           2676   L030040?:
095B           2677   ;        main.c:1051: printf("master_messgae_auto_mode: %s\r\n", buff);
095B 7440      2678            mov     a,#_buff
095D C0E0      2679            push    acc
095F 7452      2680            mov     a,#(_buff >> 8)
0961 C0E0      2681            push    acc
0963 7440      2682            mov     a,#0x40
0965 C0E0      2683            push    acc
0967 74A0      2684            mov     a,#__str_8
0969 C0E0      2685            push    acc
096B 74E6      2686            mov     a,#(__str_8 >> 8)
096D C0E0      2687            push    acc
096F 7480      2688            mov     a,#0x80
0971 C0E0      2689            push    acc
0973 120000    2690            lcall   _printf
0976 E581      2691            mov     a,sp
0978 24FA      2692            add     a,#0xfa
097A F581      2693            mov     sp,a
097C           2694   ;        main.c:1052: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
097C 7450      2695            mov     a,#_Auto_mode_slave_command_1_164
097E C0E0      2696            push    acc
0980 74C6      2697            mov     a,#(_Auto_mode_slave_command_1_164 >> 8)
0982 C0E0      2698            push    acc
0984 E4        2699            clr     a
0985 C0E0      2700            push    acc
0987 7400      2701            mov     a,#_Auto_mode_slave_dummy_1_164
0989 C0E0      2702            push    acc
098B 74C7      2703            mov     a,#(_Auto_mode_slave_dummy_1_164 >> 8)
098D C0E0      2704            push    acc
098F E4        2705            clr     a
0990 C0E0      2706            push    acc
0992 7400      2707            mov     a,#_Auto_mode_slave_dummy_1_164
0994 C0E0      2708            push    acc
0996 74C7      2709            mov     a,#(_Auto_mode_slave_dummy_1_164 >> 8)
0998 C0E0      2710            push    acc
099A E4        2711            clr     a
099B C0E0      2712            push    acc
099D 7400      2713            mov     a,#_Auto_mode_slave_dummy_1_164
099F C0E0      2714            push    acc
09A1 74C7      2715            mov     a,#(_Auto_mode_slave_dummy_1_164 >> 8)
09A3 C0E0      2716            push    acc
09A5 E4        2717            clr     a
09A6 C0E0      2718            push    acc
09A8 74E0      2719            mov     a,#__str_9
09AA C0E0      2720            push    acc
09AC 74E6      2721            mov     a,#(__str_9 >> 8)
09AE C0E0      2722            push    acc
09B0 7480      2723            mov     a,#0x80
09B2 C0E0      2724            push    acc
09B4 7440      2725            mov     a,#_buff
09B6 C0E0      2726            push    acc
09B8 7452      2727            mov     a,#(_buff >> 8)
09BA C0E0      2728            push    acc
09BC 7440      2729            mov     a,#0x40
09BE C0E0      2730            push    acc
09C0 120000    2731            lcall   _sscanf
09C3 E581      2732            mov     a,sp
09C5 24EE      2733            add     a,#0xee
09C7 F581      2734            mov     sp,a
09C9           2735   ;        main.c:1053: if(command) state_res = 1;
09C9 90C650    2736            mov     dptr,#_Auto_mode_slave_command_1_164
09CC E0        2737            movx    a,@dptr
09CD FF        2738            mov     r7,a
09CE A3        2739            inc     dptr
09CF E0        2740            movx    a,@dptr
09D0 FA        2741            mov     r2,a
09D1 4F        2742            orl     a,r7
09D2 6000      2743            jz      L030002?
09D4 90C6B0    2744            mov     dptr,#_Auto_mode_slave_state_res_1_164
09D7 7401      2745            mov     a,#0x01
09D9 F0        2746            movx    @dptr,a
09DA E4        2747            clr     a
09DB A3        2748            inc     dptr
09DC F0        2749            movx    @dptr,a
09DD 020000    2750            ljmp    L030012?
09E0           2751   L030002?:
09E0           2752   ;        main.c:1054: else state_res = 0;
09E0 90C6B0    2753            mov     dptr,#_Auto_mode_slave_state_res_1_164
09E3 E4        2754            clr     a
09E4 F0        2755            movx    @dptr,a
09E5 A3        2756            inc     dptr
09E6 F0        2757            movx    @dptr,a
09E7 8000      2758            sjmp    L030012?
09E9           2759   L030009?:
09E9           2760   ;        main.c:1060: else if(c=='@'){
09E9 BE40E0    2761            cjne    r6,#0x40,L030012?
09EC           2762   ;        main.c:1061: sprintf(buff, "%01d,%02d,%ld,%05d,%03d\n", state_res, count,freq100, 0, (int)curr_angle);
09EC 904A30    2763            mov     dptr,#_curr_angle
09EF E0        2764            movx    a,@dptr
09F0 FA        2765            mov     r2,a
09F1 A3        2766            inc     dptr
09F2 E0        2767            movx    a,@dptr
09F3 FB        2768            mov     r3,a
09F4 A3        2769            inc     dptr
09F5 E0        2770            movx    a,@dptr
09F6 FE        2771            mov     r6,a
09F7 A3        2772            inc     dptr
09F8 E0        2773            movx    a,@dptr
09F9 8A82      2774            mov     dpl,r2
09FB 8B83      2775            mov     dph,r3
09FD 8EF0      2776            mov     b,r6
09FF C004      2777            push    ar4
0A01 C005      2778            push    ar5
0A03 120000    2779            lcall   ___fs2sint
0A06 AA82      2780            mov     r2,dpl
0A08 AB83      2781            mov     r3,dph
0A0A D005      2782            pop     ar5
0A0C D004      2783            pop     ar4
0A0E C002      2784            push    ar2
0A10 C003      2785            push    ar3
0A12 E4        2786            clr     a
0A13 C0E0      2787            push    acc
0A15 C0E0      2788            push    acc
0A17 905200    2789            mov     dptr,#_freq100
0A1A E0        2790            movx    a,@dptr
0A1B C0E0      2791            push    acc
0A1D A3        2792            inc     dptr
0A1E E0        2793            movx    a,@dptr
0A1F C0E0      2794            push    acc
0A21 A3        2795            inc     dptr
0A22 E0        2796            movx    a,@dptr
0A23 C0E0      2797            push    acc
0A25 A3        2798            inc     dptr
0A26 E0        2799            movx    a,@dptr
0A27 C0E0      2800            push    acc
0A29 C0E0      2801            push    _Auto_mode_slave_sloc0_1_0
0A2B C0E1      2802            push    (_Auto_mode_slave_sloc0_1_0 + 1)
0A2D C004      2803            push    ar4
0A2F C005      2804            push    ar5
0A31 74E0      2805            mov     a,#__str_10
0A33 C0E0      2806            push    acc
0A35 74E7      2807            mov     a,#(__str_10 >> 8)
0A37 C0E0      2808            push    acc
0A39 7480      2809            mov     a,#0x80
0A3B C0E0      2810            push    acc
0A3D 7440      2811            mov     a,#_buff
0A3F C0E0      2812            push    acc
0A41 7452      2813            mov     a,#(_buff >> 8)
0A43 C0E0      2814            push    acc
0A45 7440      2815            mov     a,#0x40
0A47 C0E0      2816            push    acc
0A49 120000    2817            lcall   _sprintf
0A4C E581      2818            mov     a,sp
0A4E 24EE      2819            add     a,#0xee
0A50 F581      2820            mov     sp,a
0A52           2821   ;        main.c:1062: waitms(5); 
0A52 900005    2822            mov     dptr,#0x0005
0A55 120000    2823            lcall   _waitms
0A58           2824   ;        main.c:1063: sendstr1(buff);
0A58 905240    2825            mov     dptr,#_buff
0A5B 75F040    2826            mov     b,#0x40
0A5E 120000    2827            lcall   _sendstr1
0A61           2828   L030012?:
0A61           2829   ;        main.c:1068: Move_forward();
0A61 120000    2830            lcall   _Move_forward
0A64           2831   ;        main.c:1070: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
0A64 758209    2832            mov     dpl,#0x09
0A67 120000    2833            lcall   _ADC_at_Pin
0A6A E582      2834            mov     a,dpl
0A6C 8583F0    2835            mov     b,dph
0A6F 9051C0    2836            mov     dptr,#_d1
0A72 F0        2837            movx    @dptr,a
0A73 A3        2838            inc     dptr
0A74 E5F0      2839            mov     a,b
0A76 F0        2840            movx    @dptr,a
0A77           2841   ;        main.c:1071: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
0A77 75820A    2842            mov     dpl,#0x0A
0A7A 120000    2843            lcall   _ADC_at_Pin
0A7D AA82      2844            mov     r2,dpl
0A7F AB83      2845            mov     r3,dph
0A81 905180    2846            mov     dptr,#_d2
0A84 EA        2847            mov     a,r2
0A85 F0        2848            movx    @dptr,a
0A86 A3        2849            inc     dptr
0A87 EB        2850            mov     a,r3
0A88 F0        2851            movx    @dptr,a
0A89           2852   ;        main.c:1072: bound = check_bound(d1,d2);
0A89 9051C0    2853            mov     dptr,#_d1
0A8C E0        2854            movx    a,@dptr
0A8D FC        2855            mov     r4,a
0A8E A3        2856            inc     dptr
0A8F E0        2857            movx    a,@dptr
0A90 FD        2858            mov     r5,a
0A91 8A90      2859            mov     _check_bound_PARM_2,r2
0A93 8B91      2860            mov     (_check_bound_PARM_2 + 1),r3
0A95 8C82      2861            mov     dpl,r4
0A97 8D83      2862            mov     dph,r5
0A99 120000    2863            lcall   _check_bound
0A9C AA82      2864            mov     r2,dpl
0A9E AB83      2865            mov     r3,dph
0AA0           2866   ;        main.c:1073: printf("f:%04ld, d1:%d, d2:%d, bound_dectect: %d\r\n",freq100, d1,d2,bound);
0AA0 C002      2867            push    ar2
0AA2 C003      2868            push    ar3
0AA4 C002      2869            push    ar2
0AA6 C003      2870            push    ar3
0AA8 905180    2871            mov     dptr,#_d2
0AAB E0        2872            movx    a,@dptr
0AAC C0E0      2873            push    acc
0AAE A3        2874            inc     dptr
0AAF E0        2875            movx    a,@dptr
0AB0 C0E0      2876            push    acc
0AB2 9051C0    2877            mov     dptr,#_d1
0AB5 E0        2878            movx    a,@dptr
0AB6 C0E0      2879            push    acc
0AB8 A3        2880            inc     dptr
0AB9 E0        2881            movx    a,@dptr
0ABA C0E0      2882            push    acc
0ABC 905200    2883            mov     dptr,#_freq100
0ABF E0        2884            movx    a,@dptr
0AC0 C0E0      2885            push    acc
0AC2 A3        2886            inc     dptr
0AC3 E0        2887            movx    a,@dptr
0AC4 C0E0      2888            push    acc
0AC6 A3        2889            inc     dptr
0AC7 E0        2890            movx    a,@dptr
0AC8 C0E0      2891            push    acc
0ACA A3        2892            inc     dptr
0ACB E0        2893            movx    a,@dptr
0ACC C0E0      2894            push    acc
0ACE 7460      2895            mov     a,#__str_11
0AD0 C0E0      2896            push    acc
0AD2 74E8      2897            mov     a,#(__str_11 >> 8)
0AD4 C0E0      2898            push    acc
0AD6 7480      2899            mov     a,#0x80
0AD8 C0E0      2900            push    acc
0ADA 120000    2901            lcall   _printf
0ADD E581      2902            mov     a,sp
0ADF 24F3      2903            add     a,#0xf3
0AE1 F581      2904            mov     sp,a
0AE3 D003      2905            pop     ar3
0AE5 D002      2906            pop     ar2
0AE7           2907   ;        main.c:1075: if (freq100>=5340){
0AE7 905200    2908            mov     dptr,#_freq100
0AEA E0        2909            movx    a,@dptr
0AEB FC        2910            mov     r4,a
0AEC A3        2911            inc     dptr
0AED E0        2912            movx    a,@dptr
0AEE FD        2913            mov     r5,a
0AEF A3        2914            inc     dptr
0AF0 E0        2915            movx    a,@dptr
0AF1 FE        2916            mov     r6,a
0AF2 A3        2917            inc     dptr
0AF3 E0        2918            movx    a,@dptr
0AF4 FF        2919            mov     r7,a
0AF5 C3        2920            clr     c
0AF6 EC        2921            mov     a,r4
0AF7 94DC      2922            subb    a,#0xDC
0AF9 ED        2923            mov     a,r5
0AFA 9414      2924            subb    a,#0x14
0AFC EE        2925            mov     a,r6
0AFD 9400      2926            subb    a,#0x00
0AFF EF        2927            mov     a,r7
0B00 6480      2928            xrl     a,#0x80
0B02 9480      2929            subb    a,#0x80
0B04 4000      2930            jc      L030014?
0B06           2931   ;        main.c:1076: mea_yes = 0;
0B06 904930    2932            mov     dptr,#_mea_yes
0B09 E4        2933            clr     a
0B0A F0        2934            movx    @dptr,a
0B0B           2935   ;        main.c:1077: Move_back_ms(300);
0B0B 90012C    2936            mov     dptr,#0x012C
0B0E C002      2937            push    ar2
0B10 C003      2938            push    ar3
0B12 120000    2939            lcall   _Move_back_ms
0B15           2940   ;        main.c:1078: waitms(100);
0B15 900064    2941            mov     dptr,#0x0064
0B18 120000    2942            lcall   _waitms
0B1B           2943   ;        main.c:1079: servo_pick();
0B1B 120000    2944            lcall   _servo_pick
0B1E D003      2945            pop     ar3
0B20 D002      2946            pop     ar2
0B22           2947   ;        main.c:1080: count++;
0B22 05E0      2948            inc     _Auto_mode_slave_sloc0_1_0
0B24 E4        2949            clr     a
0B25 B5E0E0    2950            cjne    a,_Auto_mode_slave_sloc0_1_0,L030045?
0B28 05E1      2951            inc     (_Auto_mode_slave_sloc0_1_0 + 1)
0B2A           2952   L030045?:
0B2A           2953   ;        main.c:1081: waitms(100);
0B2A 900064    2954            mov     dptr,#0x0064
0B2D C002      2955            push    ar2
0B2F C003      2956            push    ar3
0B31 120000    2957            lcall   _waitms
0B34           2958   ;        main.c:1082: mea_yes = 1;
0B34 904930    2959            mov     dptr,#_mea_yes
0B37 7401      2960            mov     a,#0x01
0B39 F0        2961            movx    @dptr,a
0B3A           2962   ;        main.c:1083: Move_forward();
0B3A 120000    2963            lcall   _Move_forward
0B3D D003      2964            pop     ar3
0B3F D002      2965            pop     ar2
0B41           2966   L030014?:
0B41           2967   ;        main.c:1086: if(bound == 1){
0B41 BA0120    2968            cjne    r2,#0x01,L030046?
0B44 BB0020    2969            cjne    r3,#0x00,L030046?
0B47 8000      2970            sjmp    L030047?
0B49           2971   L030046?:
0B49 020000    2972            ljmp    L030018?
0B4C           2973   L030047?:
0B4C           2974   ;        main.c:1087: Move_back_ms(500);
0B4C 9001F4    2975            mov     dptr,#0x01F4
0B4F 120000    2976            lcall   _Move_back_ms
0B52           2977   ;        main.c:1088: waitms(100);
0B52 900064    2978            mov     dptr,#0x0064
0B55 120000    2979            lcall   _waitms
0B58           2980   ;        main.c:1089: angle = get_random_90_250();
0B58 120000    2981            lcall   _get_random_90_250
0B5B 858200    2982            mov     __mulint_PARM_2,dpl
0B5E 858301    2983            mov     (__mulint_PARM_2 + 1),dph
0B61           2984   ;        main.c:1090: Right_angle(angle*600/90);
0B61 900258    2985            mov     dptr,#0x0258
0B64 120000    2986            lcall   __mulint
0B67 AA82      2987            mov     r2,dpl
0B69 AB83      2988            mov     r3,dph
0B6B 75005A    2989            mov     __divuint_PARM_2,#0x5A
0B6E E4        2990            clr     a
0B6F F501      2991            mov     (__divuint_PARM_2 + 1),a
0B71 8A82      2992            mov     dpl,r2
0B73 8B83      2993            mov     dph,r3
0B75 120000    2994            lcall   __divuint
0B78 120000    2995            lcall   _Right_angle
0B7B 020000    2996            ljmp    L030018?
0B7E           2997   ;------------------------------------------------------------
0B7E           2998   ;Allocation info for local variables in function 'Joystick_Control'
0B7E           2999   ;------------------------------------------------------------
0B7E           3000   ;vy_ptr                    Allocated with name '_Joystick_Control_PARM_2'
0B7E           3001   ;vx_ptr                    Allocated to registers r2 r3 r4 
0B7E           3002   ;sloc0                     Allocated with name '_Joystick_Control_sloc0_1_0'
0B7E           3003   ;sloc1                     Allocated with name '_Joystick_Control_sloc1_1_0'
0B7E           3004   ;sloc2                     Allocated with name '_Joystick_Control_sloc2_1_0'
0B7E           3005   ;sloc3                     Allocated with name '_Joystick_Control_sloc3_1_0'
0B7E           3006   ;sloc4                     Allocated with name '_Joystick_Control_sloc4_1_0'
0B7E           3007   ;sloc5                     Allocated with name '_Joystick_Control_sloc5_1_0'
0B7E           3008   ;sloc6                     Allocated with name '_Joystick_Control_sloc6_1_0'
0B7E           3009   ;vx                        Allocated with name '_Joystick_Control_vx_1_173'
0B7E           3010   ;vy                        Allocated with name '_Joystick_Control_vy_1_173'
0B7E           3011   ;vx_error                  Allocated with name '_Joystick_Control_vx_error_1_173'
0B7E           3012   ;vy_error                  Allocated with name '_Joystick_Control_vy_error_1_173'
0B7E           3013   ;vx_err                    Allocated with name '_Joystick_Control_vx_err_1_173'
0B7E           3014   ;vy_err                    Allocated with name '_Joystick_Control_vy_err_1_173'
0B7E           3015   ;------------------------------------------------------------
0B7E           3016   ;        main.c:1098: float Joystick_Control(int *vx_ptr, int *vy_ptr)
0B7E           3017   ;        -----------------------------------------
0B7E           3018   ;         function Joystick_Control
0B7E           3019   ;        -----------------------------------------
0B7E           3020   _Joystick_Control:
0B7E           3021   ;        main.c:1102: vx = *vx_ptr; 
0B7E 120000    3022            lcall   __gptrget
0B81 F530      3023            mov     _Joystick_Control_sloc0_1_0,a
0B83 A3        3024            inc     dptr
0B84 120000    3025            lcall   __gptrget
0B87 F531      3026            mov     (_Joystick_Control_sloc0_1_0 + 1),a
0B89           3027   ;        main.c:1103: vy = *vy_ptr; 
0B89 AC90      3028            mov     r4,_Joystick_Control_PARM_2
0B8B AD91      3029            mov     r5,(_Joystick_Control_PARM_2 + 1)
0B8D AE92      3030            mov     r6,(_Joystick_Control_PARM_2 + 2)
0B8F 8C82      3031            mov     dpl,r4
0B91 8D83      3032            mov     dph,r5
0B93 8EF0      3033            mov     b,r6
0B95 120000    3034            lcall   __gptrget
0B98 FC        3035            mov     r4,a
0B99 A3        3036            inc     dptr
0B9A 120000    3037            lcall   __gptrget
0B9D FD        3038            mov     r5,a
0B9E           3039   ;        main.c:1109: vx_error = abs(vx-vx_thres)*100/vx_thres; 
0B9E 904C40    3040            mov     dptr,#_vx_thres
0BA1 E0        3041            movx    a,@dptr
0BA2 FE        3042            mov     r6,a
0BA3 A3        3043            inc     dptr
0BA4 E0        3044            movx    a,@dptr
0BA5 FF        3045            mov     r7,a
0BA6 E530      3046            mov     a,_Joystick_Control_sloc0_1_0
0BA8 C3        3047            clr     c
0BA9 9E        3048            subb    a,r6
0BAA F582      3049            mov     dpl,a
0BAC E531      3050            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
0BAE 9F        3051            subb    a,r7
0BAF F583      3052            mov     dph,a
0BB1 C004      3053            push    ar4
0BB3 C005      3054            push    ar5
0BB5 120000    3055            lcall   _abs
0BB8 858200    3056            mov     __mulint_PARM_2,dpl
0BBB 858301    3057            mov     (__mulint_PARM_2 + 1),dph
0BBE 900064    3058            mov     dptr,#0x0064
0BC1 120000    3059            lcall   __mulint
0BC4 AE82      3060            mov     r6,dpl
0BC6 AF83      3061            mov     r7,dph
0BC8 904C40    3062            mov     dptr,#_vx_thres
0BCB E0        3063            movx    a,@dptr
0BCC F500      3064            mov     __divsint_PARM_2,a
0BCE A3        3065            inc     dptr
0BCF E0        3066            movx    a,@dptr
0BD0 F501      3067            mov     (__divsint_PARM_2 + 1),a
0BD2 8E82      3068            mov     dpl,r6
0BD4 8F83      3069            mov     dph,r7
0BD6 120000    3070            lcall   __divsint
0BD9 E582      3071            mov     a,dpl
0BDB 8583F0    3072            mov     b,dph
0BDE D005      3073            pop     ar5
0BE0 D004      3074            pop     ar4
0BE2 90C760    3075            mov     dptr,#_Joystick_Control_vx_error_1_173
0BE5 F0        3076            movx    @dptr,a
0BE6 A3        3077            inc     dptr
0BE7 E5F0      3078            mov     a,b
0BE9 F0        3079            movx    @dptr,a
0BEA           3080   ;        main.c:1110: vy_error = abs(vy-vy_thres)*100/vy_thres; 
0BEA 904C00    3081            mov     dptr,#_vy_thres
0BED E0        3082            movx    a,@dptr
0BEE FE        3083            mov     r6,a
0BEF A3        3084            inc     dptr
0BF0 E0        3085            movx    a,@dptr
0BF1 FF        3086            mov     r7,a
0BF2 EC        3087            mov     a,r4
0BF3 C3        3088            clr     c
0BF4 9E        3089            subb    a,r6
0BF5 F582      3090            mov     dpl,a
0BF7 ED        3091            mov     a,r5
0BF8 9F        3092            subb    a,r7
0BF9 F583      3093            mov     dph,a
0BFB C004      3094            push    ar4
0BFD C005      3095            push    ar5
0BFF 120000    3096            lcall   _abs
0C02 858200    3097            mov     __mulint_PARM_2,dpl
0C05 858301    3098            mov     (__mulint_PARM_2 + 1),dph
0C08 900064    3099            mov     dptr,#0x0064
0C0B 120000    3100            lcall   __mulint
0C0E AE82      3101            mov     r6,dpl
0C10 AF83      3102            mov     r7,dph
0C12 904C00    3103            mov     dptr,#_vy_thres
0C15 E0        3104            movx    a,@dptr
0C16 F5D0      3105            mov     _Joystick_Control_sloc2_1_0,a
0C18 A3        3106            inc     dptr
0C19 E0        3107            movx    a,@dptr
0C1A F5D1      3108            mov     (_Joystick_Control_sloc2_1_0 + 1),a
0C1C 85D000    3109            mov     __divsint_PARM_2,_Joystick_Control_sloc2_1_0
0C1F 85D101    3110            mov     (__divsint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
0C22           3111   ;        main.c:1111: vx_err = vx-vx_thres; 
0C22 8E82      3112            mov     dpl,r6
0C24 8F83      3113            mov     dph,r7
0C26 120000    3114            lcall   __divsint
0C29 AE82      3115            mov     r6,dpl
0C2B AF83      3116            mov     r7,dph
0C2D D005      3117            pop     ar5
0C2F D004      3118            pop     ar4
0C31 904C40    3119            mov     dptr,#_vx_thres
0C34 E0        3120            movx    a,@dptr
0C35 FA        3121            mov     r2,a
0C36 A3        3122            inc     dptr
0C37 E0        3123            movx    a,@dptr
0C38 FB        3124            mov     r3,a
0C39 E530      3125            mov     a,_Joystick_Control_sloc0_1_0
0C3B C3        3126            clr     c
0C3C 9A        3127            subb    a,r2
0C3D F570      3128            mov     _Joystick_Control_sloc4_1_0,a
0C3F E531      3129            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
0C41 9B        3130            subb    a,r3
0C42 F571      3131            mov     (_Joystick_Control_sloc4_1_0 + 1),a
0C44           3132   ;        main.c:1112: vy_err = vy-vy_thres; 
0C44 EC        3133            mov     a,r4
0C45 C3        3134            clr     c
0C46 95D0      3135            subb    a,_Joystick_Control_sloc2_1_0
0C48 F530      3136            mov     _Joystick_Control_sloc0_1_0,a
0C4A ED        3137            mov     a,r5
0C4B 95D1      3138            subb    a,(_Joystick_Control_sloc2_1_0 + 1)
0C4D F531      3139            mov     (_Joystick_Control_sloc0_1_0 + 1),a
0C4F           3140   ;        main.c:1113: pwm_left = 0; 
0C4F 904DC0    3141            mov     dptr,#_pwm_left
0C52           3142   ;        main.c:1114: pwm_right = 0; 
0C52 E4        3143            clr     a
0C53 F0        3144            movx    @dptr,a
0C54 904D80    3145            mov     dptr,#_pwm_right
0C57 F0        3146            movx    @dptr,a
0C58           3147   ;        main.c:1116: if ((vy_error>5) && (vx_error<5)){
0C58 C3        3148            clr     c
0C59 7405      3149            mov     a,#0x05
0C5B 9E        3150            subb    a,r6
0C5C E4        3151            clr     a
0C5D 6480      3152            xrl     a,#0x80
0C5F 8FF0      3153            mov     b,r7
0C61 63F080    3154            xrl     b,#0x80
0C64 95F0      3155            subb    a,b
0C66 E4        3156            clr     a
0C67 33        3157            rlc     a
0C68 F580      3158            mov     _Joystick_Control_sloc1_1_0,a
0C6A 7000      3159            jnz     L031056?
0C6C 020000    3160            ljmp    L031005?
0C6F           3161   L031056?:
0C6F 90C760    3162            mov     dptr,#_Joystick_Control_vx_error_1_173
0C72 E0        3163            movx    a,@dptr
0C73 FA        3164            mov     r2,a
0C74 A3        3165            inc     dptr
0C75 E0        3166            movx    a,@dptr
0C76 FB        3167            mov     r3,a
0C77 C3        3168            clr     c
0C78 EA        3169            mov     a,r2
0C79 9405      3170            subb    a,#0x05
0C7B EB        3171            mov     a,r3
0C7C 6480      3172            xrl     a,#0x80
0C7E 9480      3173            subb    a,#0x80
0C80 4000      3174            jc      L031057?
0C82 020000    3175            ljmp    L031005?
0C85           3176   L031057?:
0C85           3177   ;        main.c:1117: pwm_left = vy_error; 
0C85 904DC0    3178            mov     dptr,#_pwm_left
0C88 EE        3179            mov     a,r6
0C89 F0        3180            movx    @dptr,a
0C8A           3181   ;        main.c:1118: pwm_right = vy_error * pwm_corr; 
0C8A 8E82      3182            mov     dpl,r6
0C8C 8F83      3183            mov     dph,r7
0C8E C004      3184            push    ar4
0C90 C005      3185            push    ar5
0C92 C006      3186            push    ar6
0C94 C007      3187            push    ar7
0C96 120000    3188            lcall   ___sint2fs
0C99 AA82      3189            mov     r2,dpl
0C9B AB83      3190            mov     r3,dph
0C9D A8F0      3191            mov     r0,b
0C9F F9        3192            mov     r1,a
0CA0 904A70    3193            mov     dptr,#_pwm_corr
0CA3 E0        3194            movx    a,@dptr
0CA4 C0E0      3195            push    acc
0CA6 A3        3196            inc     dptr
0CA7 E0        3197            movx    a,@dptr
0CA8 C0E0      3198            push    acc
0CAA A3        3199            inc     dptr
0CAB E0        3200            movx    a,@dptr
0CAC C0E0      3201            push    acc
0CAE A3        3202            inc     dptr
0CAF E0        3203            movx    a,@dptr
0CB0 C0E0      3204            push    acc
0CB2 8A82      3205            mov     dpl,r2
0CB4 8B83      3206            mov     dph,r3
0CB6 88F0      3207            mov     b,r0
0CB8 E9        3208            mov     a,r1
0CB9 120000    3209            lcall   ___fsmul
0CBC AA82      3210            mov     r2,dpl
0CBE AB83      3211            mov     r3,dph
0CC0 A8F0      3212            mov     r0,b
0CC2 F9        3213            mov     r1,a
0CC3 E581      3214            mov     a,sp
0CC5 24FC      3215            add     a,#0xfc
0CC7 F581      3216            mov     sp,a
0CC9 8A82      3217            mov     dpl,r2
0CCB 8B83      3218            mov     dph,r3
0CCD 88F0      3219            mov     b,r0
0CCF E9        3220            mov     a,r1
0CD0 120000    3221            lcall   ___fs2uchar
0CD3 858220    3222            mov     _Joystick_Control_sloc3_1_0,dpl
0CD6 D007      3223            pop     ar7
0CD8 D006      3224            pop     ar6
0CDA D005      3225            pop     ar5
0CDC D004      3226            pop     ar4
0CDE 904D80    3227            mov     dptr,#_pwm_right
0CE1 E520      3228            mov     a,_Joystick_Control_sloc3_1_0
0CE3 F0        3229            movx    @dptr,a
0CE4           3230   ;        main.c:1119: if (vy_err > 0){ //move forward
0CE4 C3        3231            clr     c
0CE5 E4        3232            clr     a
0CE6 9530      3233            subb    a,_Joystick_Control_sloc0_1_0
0CE8 E4        3234            clr     a
0CE9 6480      3235            xrl     a,#0x80
0CEB 8531F0    3236            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
0CEE 63F080    3237            xrl     b,#0x80
0CF1 95F0      3238            subb    a,b
0CF3 5000      3239            jnc     L031002?
0CF5           3240   ;        main.c:1120: L_motor_dir = 0; 
0CF5 904D40    3241            mov     dptr,#_L_motor_dir
0CF8           3242   ;        main.c:1121: R_motor_dir = 0; 
0CF8 E4        3243            clr     a
0CF9 F0        3244            movx    @dptr,a
0CFA 904D00    3245            mov     dptr,#_R_motor_dir
0CFD F0        3246            movx    @dptr,a
0CFE 8000      3247            sjmp    L031005?
0D00           3248   L031002?:
0D00           3249   ;        main.c:1124: L_motor_dir = 1; 
0D00 904D40    3250            mov     dptr,#_L_motor_dir
0D03 7401      3251            mov     a,#0x01
0D05 F0        3252            movx    @dptr,a
0D06           3253   ;        main.c:1125: R_motor_dir = 1; 
0D06 904D00    3254            mov     dptr,#_R_motor_dir
0D09 7401      3255            mov     a,#0x01
0D0B F0        3256            movx    @dptr,a
0D0C           3257   ;        main.c:1126: pwm_right *= 1.05;
0D0C 852082    3258            mov     dpl,_Joystick_Control_sloc3_1_0
0D0F C004      3259            push    ar4
0D11 C005      3260            push    ar5
0D13 C006      3261            push    ar6
0D15 C007      3262            push    ar7
0D17 120000    3263            lcall   ___uchar2fs
0D1A A882      3264            mov     r0,dpl
0D1C A983      3265            mov     r1,dph
0D1E AAF0      3266            mov     r2,b
0D20 FB        3267            mov     r3,a
0D21 C000      3268            push    ar0
0D23 C001      3269            push    ar1
0D25 C002      3270            push    ar2
0D27 C003      3271            push    ar3
0D29 906666    3272            mov     dptr,#0x6666
0D2C 75F086    3273            mov     b,#0x86
0D2F 743F      3274            mov     a,#0x3F
0D31 120000    3275            lcall   ___fsmul
0D34 AA82      3276            mov     r2,dpl
0D36 AB83      3277            mov     r3,dph
0D38 A8F0      3278            mov     r0,b
0D3A F9        3279            mov     r1,a
0D3B E581      3280            mov     a,sp
0D3D 24FC      3281            add     a,#0xfc
0D3F F581      3282            mov     sp,a
0D41 8A82      3283            mov     dpl,r2
0D43 8B83      3284            mov     dph,r3
0D45 88F0      3285            mov     b,r0
0D47 E9        3286            mov     a,r1
0D48 120000    3287            lcall   ___fs2uchar
0D4B E582      3288            mov     a,dpl
0D4D D007      3289            pop     ar7
0D4F D006      3290            pop     ar6
0D51 D005      3291            pop     ar5
0D53 D004      3292            pop     ar4
0D55 904D80    3293            mov     dptr,#_pwm_right
0D58 F0        3294            movx    @dptr,a
0D59           3295   ;        main.c:1210: return 0.0;
0D59           3296   ;        main.c:1126: pwm_right *= 1.05;
0D59           3297   L031005?:
0D59           3298   ;        main.c:1129: if ((vx_error>5)&&(vy_error<5)){
0D59 90C760    3299            mov     dptr,#_Joystick_Control_vx_error_1_173
0D5C E0        3300            movx    a,@dptr
0D5D F510      3301            mov     _Joystick_Control_sloc6_1_0,a
0D5F A3        3302            inc     dptr
0D60 E0        3303            movx    a,@dptr
0D61 F511      3304            mov     (_Joystick_Control_sloc6_1_0 + 1),a
0D63 C3        3305            clr     c
0D64 7405      3306            mov     a,#0x05
0D66 9510      3307            subb    a,_Joystick_Control_sloc6_1_0
0D68 E4        3308            clr     a
0D69 6480      3309            xrl     a,#0x80
0D6B 8511F0    3310            mov     b,(_Joystick_Control_sloc6_1_0 + 1)
0D6E 63F080    3311            xrl     b,#0x80
0D71 95F0      3312            subb    a,b
0D73 E4        3313            clr     a
0D74 33        3314            rlc     a
0D75 F520      3315            mov     _Joystick_Control_sloc3_1_0,a
0D77 7000      3316            jnz     L031059?
0D79 020000    3317            ljmp    L031011?
0D7C           3318   L031059?:
0D7C C3        3319            clr     c
0D7D EE        3320            mov     a,r6
0D7E 9405      3321            subb    a,#0x05
0D80 EF        3322            mov     a,r7
0D81 6480      3323            xrl     a,#0x80
0D83 9480      3324            subb    a,#0x80
0D85 4000      3325            jc      L031060?
0D87 020000    3326            ljmp    L031011?
0D8A           3327   L031060?:
0D8A           3328   ;        main.c:1130: pwm_left = vx_error; 
0D8A C004      3329            push    ar4
0D8C C005      3330            push    ar5
0D8E 904DC0    3331            mov     dptr,#_pwm_left
0D91 E510      3332            mov     a,_Joystick_Control_sloc6_1_0
0D93 F0        3333            movx    @dptr,a
0D94           3334   ;        main.c:1131: pwm_right = vx_error * pwm_corr; 
0D94 851082    3335            mov     dpl,_Joystick_Control_sloc6_1_0
0D97 851183    3336            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
0D9A C006      3337            push    ar6
0D9C C007      3338            push    ar7
0D9E 120000    3339            lcall   ___sint2fs
0DA1 AC82      3340            mov     r4,dpl
0DA3 AD83      3341            mov     r5,dph
0DA5 AAF0      3342            mov     r2,b
0DA7 FB        3343            mov     r3,a
0DA8 904A70    3344            mov     dptr,#_pwm_corr
0DAB E0        3345            movx    a,@dptr
0DAC C0E0      3346            push    acc
0DAE A3        3347            inc     dptr
0DAF E0        3348            movx    a,@dptr
0DB0 C0E0      3349            push    acc
0DB2 A3        3350            inc     dptr
0DB3 E0        3351            movx    a,@dptr
0DB4 C0E0      3352            push    acc
0DB6 A3        3353            inc     dptr
0DB7 E0        3354            movx    a,@dptr
0DB8 C0E0      3355            push    acc
0DBA 8C82      3356            mov     dpl,r4
0DBC 8D83      3357            mov     dph,r5
0DBE 8AF0      3358            mov     b,r2
0DC0 EB        3359            mov     a,r3
0DC1 120000    3360            lcall   ___fsmul
0DC4 AA82      3361            mov     r2,dpl
0DC6 AB83      3362            mov     r3,dph
0DC8 ACF0      3363            mov     r4,b
0DCA FD        3364            mov     r5,a
0DCB E581      3365            mov     a,sp
0DCD 24FC      3366            add     a,#0xfc
0DCF F581      3367            mov     sp,a
0DD1 D007      3368            pop     ar7
0DD3 D006      3369            pop     ar6
0DD5 8A82      3370            mov     dpl,r2
0DD7 8B83      3371            mov     dph,r3
0DD9 8CF0      3372            mov     b,r4
0DDB ED        3373            mov     a,r5
0DDC C004      3374            push    ar4
0DDE C005      3375            push    ar5
0DE0 C006      3376            push    ar6
0DE2 C007      3377            push    ar7
0DE4 120000    3378            lcall   ___fs2uchar
0DE7 E582      3379            mov     a,dpl
0DE9 D007      3380            pop     ar7
0DEB D006      3381            pop     ar6
0DED D005      3382            pop     ar5
0DEF D004      3383            pop     ar4
0DF1 904D80    3384            mov     dptr,#_pwm_right
0DF4 F0        3385            movx    @dptr,a
0DF5           3386   ;        main.c:1132: if (vx_err > 0){ //turn right
0DF5 C3        3387            clr     c
0DF6 E4        3388            clr     a
0DF7 9570      3389            subb    a,_Joystick_Control_sloc4_1_0
0DF9 E4        3390            clr     a
0DFA 6480      3391            xrl     a,#0x80
0DFC 8571F0    3392            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
0DFF 63F080    3393            xrl     b,#0x80
0E02 95F0      3394            subb    a,b
0E04 D005      3395            pop     ar5
0E06 D004      3396            pop     ar4
0E08 5000      3397            jnc     L031008?
0E0A           3398   ;        main.c:1133: L_motor_dir = 1; 
0E0A 904D40    3399            mov     dptr,#_L_motor_dir
0E0D 7401      3400            mov     a,#0x01
0E0F F0        3401            movx    @dptr,a
0E10           3402   ;        main.c:1134: R_motor_dir = 0;
0E10 904D00    3403            mov     dptr,#_R_motor_dir
0E13 E4        3404            clr     a
0E14 F0        3405            movx    @dptr,a
0E15 8000      3406            sjmp    L031011?
0E17           3407   L031008?:
0E17           3408   ;        main.c:1138: L_motor_dir = 0; 
0E17 904D40    3409            mov     dptr,#_L_motor_dir
0E1A E4        3410            clr     a
0E1B F0        3411            movx    @dptr,a
0E1C           3412   ;        main.c:1139: R_motor_dir = 1; 
0E1C 904D00    3413            mov     dptr,#_R_motor_dir
0E1F 7401      3414            mov     a,#0x01
0E21 F0        3415            movx    @dptr,a
0E22           3416   L031011?:
0E22           3417   ;        main.c:1145: if ((vx_error>5)&&(vy_error)>5){
0E22 E520      3418            mov     a,_Joystick_Control_sloc3_1_0
0E24 7000      3419            jnz     L031062?
0E26 020000    3420            ljmp    L031036?
0E29           3421   L031062?:
0E29 E580      3422            mov     a,_Joystick_Control_sloc1_1_0
0E2B 7000      3423            jnz     L031063?
0E2D 020000    3424            ljmp    L031036?
0E30           3425   L031063?:
0E30           3426   ;        main.c:1148: if (vy_err>0){
0E30 C3        3427            clr     c
0E31 E4        3428            clr     a
0E32 9530      3429            subb    a,_Joystick_Control_sloc0_1_0
0E34 E4        3430            clr     a
0E35 6480      3431            xrl     a,#0x80
0E37 8531F0    3432            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
0E3A 63F080    3433            xrl     b,#0x80
0E3D 95F0      3434            subb    a,b
0E3F 4000      3435            jc      L031064?
0E41 020000    3436            ljmp    L031023?
0E44           3437   L031064?:
0E44           3438   ;        main.c:1149: L_motor_dir = 0; 
0E44 904D40    3439            mov     dptr,#_L_motor_dir
0E47           3440   ;        main.c:1150: R_motor_dir = 0; 
0E47 E4        3441            clr     a
0E48 F0        3442            movx    @dptr,a
0E49 904D00    3443            mov     dptr,#_R_motor_dir
0E4C F0        3444            movx    @dptr,a
0E4D           3445   ;        main.c:1152: if (vx_err>0){
0E4D C3        3446            clr     c
0E4E E4        3447            clr     a
0E4F 9570      3448            subb    a,_Joystick_Control_sloc4_1_0
0E51 E4        3449            clr     a
0E52 6480      3450            xrl     a,#0x80
0E54 8571F0    3451            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
0E57 63F080    3452            xrl     b,#0x80
0E5A 95F0      3453            subb    a,b
0E5C 4000      3454            jc      L031065?
0E5E 020000    3455            ljmp    L031020?
0E61           3456   L031065?:
0E61           3457   ;        main.c:1154: if (vy*100<=vy_thres*100/2){
0E61 8C00      3458            mov     __mulint_PARM_2,r4
0E63 8D01      3459            mov     (__mulint_PARM_2 + 1),r5
0E65 900064    3460            mov     dptr,#0x0064
0E68 C004      3461            push    ar4
0E6A C005      3462            push    ar5
0E6C C006      3463            push    ar6
0E6E C007      3464            push    ar7
0E70 120000    3465            lcall   __mulint
0E73 AA82      3466            mov     r2,dpl
0E75 AB83      3467            mov     r3,dph
0E77 D007      3468            pop     ar7
0E79 D006      3469            pop     ar6
0E7B D005      3470            pop     ar5
0E7D D004      3471            pop     ar4
0E7F 85D000    3472            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
0E82 85D101    3473            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
0E85 900064    3474            mov     dptr,#0x0064
0E88 C002      3475            push    ar2
0E8A C003      3476            push    ar3
0E8C C004      3477            push    ar4
0E8E C005      3478            push    ar5
0E90 C006      3479            push    ar6
0E92 C007      3480            push    ar7
0E94 120000    3481            lcall   __mulint
0E97 A882      3482            mov     r0,dpl
0E99 A983      3483            mov     r1,dph
0E9B 750002    3484            mov     __divsint_PARM_2,#0x02
0E9E E4        3485            clr     a
0E9F F501      3486            mov     (__divsint_PARM_2 + 1),a
0EA1 8882      3487            mov     dpl,r0
0EA3 8983      3488            mov     dph,r1
0EA5 120000    3489            lcall   __divsint
0EA8 A882      3490            mov     r0,dpl
0EAA A983      3491            mov     r1,dph
0EAC D007      3492            pop     ar7
0EAE D006      3493            pop     ar6
0EB0 D005      3494            pop     ar5
0EB2 D004      3495            pop     ar4
0EB4 D003      3496            pop     ar3
0EB6 D002      3497            pop     ar2
0EB8 C3        3498            clr     c
0EB9 E8        3499            mov     a,r0
0EBA 9A        3500            subb    a,r2
0EBB E9        3501            mov     a,r1
0EBC 6480      3502            xrl     a,#0x80
0EBE 8BF0      3503            mov     b,r3
0EC0 63F080    3504            xrl     b,#0x80
0EC3 95F0      3505            subb    a,b
0EC5 5000      3506            jnc     L031066?
0EC7 020000    3507            ljmp    L031014?
0ECA           3508   L031066?:
0ECA           3509   ;        main.c:1155: pwm_left = vy_error; 
0ECA C004      3510            push    ar4
0ECC C005      3511            push    ar5
0ECE 904DC0    3512            mov     dptr,#_pwm_left
0ED1 EE        3513            mov     a,r6
0ED2 F0        3514            movx    @dptr,a
0ED3           3515   ;        main.c:1156: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
0ED3 904A70    3516            mov     dptr,#_pwm_corr
0ED6 E0        3517            movx    a,@dptr
0ED7 F5C0      3518            mov     _Joystick_Control_sloc5_1_0,a
0ED9 A3        3519            inc     dptr
0EDA E0        3520            movx    a,@dptr
0EDB F5C1      3521            mov     (_Joystick_Control_sloc5_1_0 + 1),a
0EDD A3        3522            inc     dptr
0EDE E0        3523            movx    a,@dptr
0EDF F5C2      3524            mov     (_Joystick_Control_sloc5_1_0 + 2),a
0EE1 A3        3525            inc     dptr
0EE2 E0        3526            movx    a,@dptr
0EE3 F5C3      3527            mov     (_Joystick_Control_sloc5_1_0 + 3),a
0EE5 8E82      3528            mov     dpl,r6
0EE7 8F83      3529            mov     dph,r7
0EE9 C006      3530            push    ar6
0EEB C007      3531            push    ar7
0EED 120000    3532            lcall   ___sint2fs
0EF0 AA82      3533            mov     r2,dpl
0EF2 AB83      3534            mov     r3,dph
0EF4 ACF0      3535            mov     r4,b
0EF6 FD        3536            mov     r5,a
0EF7 C002      3537            push    ar2
0EF9 C003      3538            push    ar3
0EFB C004      3539            push    ar4
0EFD C005      3540            push    ar5
0EFF 85C082    3541            mov     dpl,_Joystick_Control_sloc5_1_0
0F02 85C183    3542            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
0F05 85C2F0    3543            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
0F08 E5C3      3544            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
0F0A 120000    3545            lcall   ___fsmul
0F0D AA82      3546            mov     r2,dpl
0F0F AB83      3547            mov     r3,dph
0F11 ACF0      3548            mov     r4,b
0F13 FD        3549            mov     r5,a
0F14 E581      3550            mov     a,sp
0F16 24FC      3551            add     a,#0xfc
0F18 F581      3552            mov     sp,a
0F1A D007      3553            pop     ar7
0F1C D006      3554            pop     ar6
0F1E C004      3555            push    ar4
0F20 C005      3556            push    ar5
0F22 C006      3557            push    ar6
0F24 C007      3558            push    ar7
0F26 C002      3559            push    ar2
0F28 C003      3560            push    ar3
0F2A C004      3561            push    ar4
0F2C C005      3562            push    ar5
0F2E 900000    3563            mov     dptr,#0x0000
0F31 75F0C8    3564            mov     b,#0xC8
0F34 7442      3565            mov     a,#0x42
0F36 120000    3566            lcall   ___fsmul
0F39 8582C0    3567            mov     _Joystick_Control_sloc5_1_0,dpl
0F3C 8583C1    3568            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
0F3F 85F0C2    3569            mov     (_Joystick_Control_sloc5_1_0 + 2),b
0F42 F5C3      3570            mov     (_Joystick_Control_sloc5_1_0 + 3),a
0F44 E581      3571            mov     a,sp
0F46 24FC      3572            add     a,#0xfc
0F48 F581      3573            mov     sp,a
0F4A D007      3574            pop     ar7
0F4C D006      3575            pop     ar6
0F4E D005      3576            pop     ar5
0F50 D004      3577            pop     ar4
0F52 EE        3578            mov     a,r6
0F53 2510      3579            add     a,_Joystick_Control_sloc6_1_0
0F55 F582      3580            mov     dpl,a
0F57 EF        3581            mov     a,r7
0F58 3511      3582            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
0F5A F583      3583            mov     dph,a
0F5C C006      3584            push    ar6
0F5E C007      3585            push    ar7
0F60 120000    3586            lcall   ___sint2fs
0F63 AA82      3587            mov     r2,dpl
0F65 AB83      3588            mov     r3,dph
0F67 ACF0      3589            mov     r4,b
0F69 FD        3590            mov     r5,a
0F6A C002      3591            push    ar2
0F6C C003      3592            push    ar3
0F6E C004      3593            push    ar4
0F70 C005      3594            push    ar5
0F72 85C082    3595            mov     dpl,_Joystick_Control_sloc5_1_0
0F75 85C183    3596            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
0F78 85C2F0    3597            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
0F7B E5C3      3598            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
0F7D 120000    3599            lcall   ___fsdiv
0F80 AA82      3600            mov     r2,dpl
0F82 AB83      3601            mov     r3,dph
0F84 ACF0      3602            mov     r4,b
0F86 FD        3603            mov     r5,a
0F87 E581      3604            mov     a,sp
0F89 24FC      3605            add     a,#0xfc
0F8B F581      3606            mov     sp,a
0F8D D007      3607            pop     ar7
0F8F D006      3608            pop     ar6
0F91 8A82      3609            mov     dpl,r2
0F93 8B83      3610            mov     dph,r3
0F95 8CF0      3611            mov     b,r4
0F97 ED        3612            mov     a,r5
0F98 C004      3613            push    ar4
0F9A C005      3614            push    ar5
0F9C C006      3615            push    ar6
0F9E C007      3616            push    ar7
0FA0 120000    3617            lcall   ___fs2uchar
0FA3 E582      3618            mov     a,dpl
0FA5 D007      3619            pop     ar7
0FA7 D006      3620            pop     ar6
0FA9 D005      3621            pop     ar5
0FAB D004      3622            pop     ar4
0FAD 904D80    3623            mov     dptr,#_pwm_right
0FB0 F0        3624            movx    @dptr,a
0FB1 D005      3625            pop     ar5
0FB3 D004      3626            pop     ar4
0FB5 020000    3627            ljmp    L031023?
0FB8           3628   L031014?:
0FB8           3629   ;        main.c:1159: pwm_left = vx_error; 
0FB8 C004      3630            push    ar4
0FBA C005      3631            push    ar5
0FBC 904DC0    3632            mov     dptr,#_pwm_left
0FBF E510      3633            mov     a,_Joystick_Control_sloc6_1_0
0FC1 F0        3634            movx    @dptr,a
0FC2           3635   ;        main.c:1160: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
0FC2 904A70    3636            mov     dptr,#_pwm_corr
0FC5 E0        3637            movx    a,@dptr
0FC6 F5C0      3638            mov     _Joystick_Control_sloc5_1_0,a
0FC8 A3        3639            inc     dptr
0FC9 E0        3640            movx    a,@dptr
0FCA F5C1      3641            mov     (_Joystick_Control_sloc5_1_0 + 1),a
0FCC A3        3642            inc     dptr
0FCD E0        3643            movx    a,@dptr
0FCE F5C2      3644            mov     (_Joystick_Control_sloc5_1_0 + 2),a
0FD0 A3        3645            inc     dptr
0FD1 E0        3646            movx    a,@dptr
0FD2 F5C3      3647            mov     (_Joystick_Control_sloc5_1_0 + 3),a
0FD4 851082    3648            mov     dpl,_Joystick_Control_sloc6_1_0
0FD7 851183    3649            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
0FDA C006      3650            push    ar6
0FDC C007      3651            push    ar7
0FDE 120000    3652            lcall   ___sint2fs
0FE1 AA82      3653            mov     r2,dpl
0FE3 AB83      3654            mov     r3,dph
0FE5 ACF0      3655            mov     r4,b
0FE7 FD        3656            mov     r5,a
0FE8 C002      3657            push    ar2
0FEA C003      3658            push    ar3
0FEC C004      3659            push    ar4
0FEE C005      3660            push    ar5
0FF0 85C082    3661            mov     dpl,_Joystick_Control_sloc5_1_0
0FF3 85C183    3662            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
0FF6 85C2F0    3663            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
0FF9 E5C3      3664            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
0FFB 120000    3665            lcall   ___fsmul
0FFE AA82      3666            mov     r2,dpl
1000 AB83      3667            mov     r3,dph
1002 ACF0      3668            mov     r4,b
1004 FD        3669            mov     r5,a
1005 E581      3670            mov     a,sp
1007 24FC      3671            add     a,#0xfc
1009 F581      3672            mov     sp,a
100B D007      3673            pop     ar7
100D D006      3674            pop     ar6
100F C004      3675            push    ar4
1011 C005      3676            push    ar5
1013 C006      3677            push    ar6
1015 C007      3678            push    ar7
1017 C002      3679            push    ar2
1019 C003      3680            push    ar3
101B C004      3681            push    ar4
101D C005      3682            push    ar5
101F 900000    3683            mov     dptr,#0x0000
1022 75F0C8    3684            mov     b,#0xC8
1025 7442      3685            mov     a,#0x42
1027 120000    3686            lcall   ___fsmul
102A 8582C0    3687            mov     _Joystick_Control_sloc5_1_0,dpl
102D 8583C1    3688            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1030 85F0C2    3689            mov     (_Joystick_Control_sloc5_1_0 + 2),b
1033 F5C3      3690            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1035 E581      3691            mov     a,sp
1037 24FC      3692            add     a,#0xfc
1039 F581      3693            mov     sp,a
103B D007      3694            pop     ar7
103D D006      3695            pop     ar6
103F D005      3696            pop     ar5
1041 D004      3697            pop     ar4
1043 EE        3698            mov     a,r6
1044 2510      3699            add     a,_Joystick_Control_sloc6_1_0
1046 F582      3700            mov     dpl,a
1048 EF        3701            mov     a,r7
1049 3511      3702            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
104B F583      3703            mov     dph,a
104D C006      3704            push    ar6
104F C007      3705            push    ar7
1051 120000    3706            lcall   ___sint2fs
1054 AA82      3707            mov     r2,dpl
1056 AB83      3708            mov     r3,dph
1058 ACF0      3709            mov     r4,b
105A FD        3710            mov     r5,a
105B C002      3711            push    ar2
105D C003      3712            push    ar3
105F C004      3713            push    ar4
1061 C005      3714            push    ar5
1063 85C082    3715            mov     dpl,_Joystick_Control_sloc5_1_0
1066 85C183    3716            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1069 85C2F0    3717            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
106C E5C3      3718            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
106E 120000    3719            lcall   ___fsdiv
1071 AA82      3720            mov     r2,dpl
1073 AB83      3721            mov     r3,dph
1075 ACF0      3722            mov     r4,b
1077 FD        3723            mov     r5,a
1078 E581      3724            mov     a,sp
107A 24FC      3725            add     a,#0xfc
107C F581      3726            mov     sp,a
107E D007      3727            pop     ar7
1080 D006      3728            pop     ar6
1082 8A82      3729            mov     dpl,r2
1084 8B83      3730            mov     dph,r3
1086 8CF0      3731            mov     b,r4
1088 ED        3732            mov     a,r5
1089 C004      3733            push    ar4
108B C005      3734            push    ar5
108D C006      3735            push    ar6
108F C007      3736            push    ar7
1091 120000    3737            lcall   ___fs2uchar
1094 E582      3738            mov     a,dpl
1096 D007      3739            pop     ar7
1098 D006      3740            pop     ar6
109A D005      3741            pop     ar5
109C D004      3742            pop     ar4
109E 904D80    3743            mov     dptr,#_pwm_right
10A1 F0        3744            movx    @dptr,a
10A2 D005      3745            pop     ar5
10A4 D004      3746            pop     ar4
10A6 020000    3747            ljmp    L031023?
10A9           3748   L031020?:
10A9           3749   ;        main.c:1166: if (vy*100<=vy_thres*100/2){
10A9 8C00      3750            mov     __mulint_PARM_2,r4
10AB 8D01      3751            mov     (__mulint_PARM_2 + 1),r5
10AD 900064    3752            mov     dptr,#0x0064
10B0 C004      3753            push    ar4
10B2 C005      3754            push    ar5
10B4 C006      3755            push    ar6
10B6 C007      3756            push    ar7
10B8 120000    3757            lcall   __mulint
10BB AA82      3758            mov     r2,dpl
10BD AB83      3759            mov     r3,dph
10BF D007      3760            pop     ar7
10C1 D006      3761            pop     ar6
10C3 D005      3762            pop     ar5
10C5 D004      3763            pop     ar4
10C7 85D000    3764            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
10CA 85D101    3765            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
10CD 900064    3766            mov     dptr,#0x0064
10D0 C002      3767            push    ar2
10D2 C003      3768            push    ar3
10D4 C004      3769            push    ar4
10D6 C005      3770            push    ar5
10D8 C006      3771            push    ar6
10DA C007      3772            push    ar7
10DC 120000    3773            lcall   __mulint
10DF A882      3774            mov     r0,dpl
10E1 A983      3775            mov     r1,dph
10E3 750002    3776            mov     __divsint_PARM_2,#0x02
10E6 E4        3777            clr     a
10E7 F501      3778            mov     (__divsint_PARM_2 + 1),a
10E9 8882      3779            mov     dpl,r0
10EB 8983      3780            mov     dph,r1
10ED 120000    3781            lcall   __divsint
10F0 A882      3782            mov     r0,dpl
10F2 A983      3783            mov     r1,dph
10F4 D007      3784            pop     ar7
10F6 D006      3785            pop     ar6
10F8 D005      3786            pop     ar5
10FA D004      3787            pop     ar4
10FC D003      3788            pop     ar3
10FE D002      3789            pop     ar2
1100 C3        3790            clr     c
1101 E8        3791            mov     a,r0
1102 9A        3792            subb    a,r2
1103 E9        3793            mov     a,r1
1104 6480      3794            xrl     a,#0x80
1106 8BF0      3795            mov     b,r3
1108 63F080    3796            xrl     b,#0x80
110B 95F0      3797            subb    a,b
110D 5000      3798            jnc     L031067?
110F 020000    3799            ljmp    L031017?
1112           3800   L031067?:
1112           3801   ;        main.c:1167: pwm_left = vy_error*100/(vx_error+vy_error);
1112 C004      3802            push    ar4
1114 C005      3803            push    ar5
1116 8E00      3804            mov     __mulint_PARM_2,r6
1118 8F01      3805            mov     (__mulint_PARM_2 + 1),r7
111A 900064    3806            mov     dptr,#0x0064
111D C004      3807            push    ar4
111F C005      3808            push    ar5
1121 C006      3809            push    ar6
1123 C007      3810            push    ar7
1125 120000    3811            lcall   __mulint
1128 AA82      3812            mov     r2,dpl
112A AB83      3813            mov     r3,dph
112C D007      3814            pop     ar7
112E D006      3815            pop     ar6
1130 EE        3816            mov     a,r6
1131 2510      3817            add     a,_Joystick_Control_sloc6_1_0
1133 F500      3818            mov     __divsint_PARM_2,a
1135 EF        3819            mov     a,r7
1136 3511      3820            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1138 F501      3821            mov     (__divsint_PARM_2 + 1),a
113A 8A82      3822            mov     dpl,r2
113C 8B83      3823            mov     dph,r3
113E C006      3824            push    ar6
1140 C007      3825            push    ar7
1142 120000    3826            lcall   __divsint
1145 AA82      3827            mov     r2,dpl
1147 D007      3828            pop     ar7
1149 D006      3829            pop     ar6
114B D005      3830            pop     ar5
114D D004      3831            pop     ar4
114F 904DC0    3832            mov     dptr,#_pwm_left
1152 EA        3833            mov     a,r2
1153 F0        3834            movx    @dptr,a
1154           3835   ;        main.c:1168: pwm_right = vy_error*pwm_corr; 
1154 8E82      3836            mov     dpl,r6
1156 8F83      3837            mov     dph,r7
1158 C006      3838            push    ar6
115A C007      3839            push    ar7
115C 120000    3840            lcall   ___sint2fs
115F AA82      3841            mov     r2,dpl
1161 AB83      3842            mov     r3,dph
1163 ACF0      3843            mov     r4,b
1165 FD        3844            mov     r5,a
1166 904A70    3845            mov     dptr,#_pwm_corr
1169 E0        3846            movx    a,@dptr
116A C0E0      3847            push    acc
116C A3        3848            inc     dptr
116D E0        3849            movx    a,@dptr
116E C0E0      3850            push    acc
1170 A3        3851            inc     dptr
1171 E0        3852            movx    a,@dptr
1172 C0E0      3853            push    acc
1174 A3        3854            inc     dptr
1175 E0        3855            movx    a,@dptr
1176 C0E0      3856            push    acc
1178 8A82      3857            mov     dpl,r2
117A 8B83      3858            mov     dph,r3
117C 8CF0      3859            mov     b,r4
117E ED        3860            mov     a,r5
117F 120000    3861            lcall   ___fsmul
1182 AA82      3862            mov     r2,dpl
1184 AB83      3863            mov     r3,dph
1186 ACF0      3864            mov     r4,b
1188 FD        3865            mov     r5,a
1189 E581      3866            mov     a,sp
118B 24FC      3867            add     a,#0xfc
118D F581      3868            mov     sp,a
118F D007      3869            pop     ar7
1191 D006      3870            pop     ar6
1193 8A82      3871            mov     dpl,r2
1195 8B83      3872            mov     dph,r3
1197 8CF0      3873            mov     b,r4
1199 ED        3874            mov     a,r5
119A C004      3875            push    ar4
119C C005      3876            push    ar5
119E C006      3877            push    ar6
11A0 C007      3878            push    ar7
11A2 120000    3879            lcall   ___fs2uchar
11A5 E582      3880            mov     a,dpl
11A7 D007      3881            pop     ar7
11A9 D006      3882            pop     ar6
11AB D005      3883            pop     ar5
11AD D004      3884            pop     ar4
11AF 904D80    3885            mov     dptr,#_pwm_right
11B2 F0        3886            movx    @dptr,a
11B3 D005      3887            pop     ar5
11B5 D004      3888            pop     ar4
11B7 020000    3889            ljmp    L031023?
11BA           3890   L031017?:
11BA           3891   ;        main.c:1171: pwm_left = vx_error*100/(vx_error+vy_error);
11BA C004      3892            push    ar4
11BC C005      3893            push    ar5
11BE 851000    3894            mov     __mulint_PARM_2,_Joystick_Control_sloc6_1_0
11C1 851101    3895            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc6_1_0 + 1)
11C4 900064    3896            mov     dptr,#0x0064
11C7 C004      3897            push    ar4
11C9 C005      3898            push    ar5
11CB C006      3899            push    ar6
11CD C007      3900            push    ar7
11CF 120000    3901            lcall   __mulint
11D2 AA82      3902            mov     r2,dpl
11D4 AB83      3903            mov     r3,dph
11D6 D007      3904            pop     ar7
11D8 D006      3905            pop     ar6
11DA EE        3906            mov     a,r6
11DB 2510      3907            add     a,_Joystick_Control_sloc6_1_0
11DD F500      3908            mov     __divsint_PARM_2,a
11DF EF        3909            mov     a,r7
11E0 3511      3910            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
11E2 F501      3911            mov     (__divsint_PARM_2 + 1),a
11E4 8A82      3912            mov     dpl,r2
11E6 8B83      3913            mov     dph,r3
11E8 C006      3914            push    ar6
11EA C007      3915            push    ar7
11EC 120000    3916            lcall   __divsint
11EF AA82      3917            mov     r2,dpl
11F1 D007      3918            pop     ar7
11F3 D006      3919            pop     ar6
11F5 D005      3920            pop     ar5
11F7 D004      3921            pop     ar4
11F9 904DC0    3922            mov     dptr,#_pwm_left
11FC EA        3923            mov     a,r2
11FD F0        3924            movx    @dptr,a
11FE           3925   ;        main.c:1172: pwm_right = vx_error*pwm_corr; 
11FE 851082    3926            mov     dpl,_Joystick_Control_sloc6_1_0
1201 851183    3927            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
1204 C006      3928            push    ar6
1206 C007      3929            push    ar7
1208 120000    3930            lcall   ___sint2fs
120B AA82      3931            mov     r2,dpl
120D AB83      3932            mov     r3,dph
120F ACF0      3933            mov     r4,b
1211 FD        3934            mov     r5,a
1212 904A70    3935            mov     dptr,#_pwm_corr
1215 E0        3936            movx    a,@dptr
1216 C0E0      3937            push    acc
1218 A3        3938            inc     dptr
1219 E0        3939            movx    a,@dptr
121A C0E0      3940            push    acc
121C A3        3941            inc     dptr
121D E0        3942            movx    a,@dptr
121E C0E0      3943            push    acc
1220 A3        3944            inc     dptr
1221 E0        3945            movx    a,@dptr
1222 C0E0      3946            push    acc
1224 8A82      3947            mov     dpl,r2
1226 8B83      3948            mov     dph,r3
1228 8CF0      3949            mov     b,r4
122A ED        3950            mov     a,r5
122B 120000    3951            lcall   ___fsmul
122E AA82      3952            mov     r2,dpl
1230 AB83      3953            mov     r3,dph
1232 ACF0      3954            mov     r4,b
1234 FD        3955            mov     r5,a
1235 E581      3956            mov     a,sp
1237 24FC      3957            add     a,#0xfc
1239 F581      3958            mov     sp,a
123B D007      3959            pop     ar7
123D D006      3960            pop     ar6
123F 8A82      3961            mov     dpl,r2
1241 8B83      3962            mov     dph,r3
1243 8CF0      3963            mov     b,r4
1245 ED        3964            mov     a,r5
1246 C004      3965            push    ar4
1248 C005      3966            push    ar5
124A C006      3967            push    ar6
124C C007      3968            push    ar7
124E 120000    3969            lcall   ___fs2uchar
1251 E582      3970            mov     a,dpl
1253 D007      3971            pop     ar7
1255 D006      3972            pop     ar6
1257 D005      3973            pop     ar5
1259 D004      3974            pop     ar4
125B 904D80    3975            mov     dptr,#_pwm_right
125E F0        3976            movx    @dptr,a
125F           3977   ;        main.c:1210: return 0.0;
125F D005      3978            pop     ar5
1261 D004      3979            pop     ar4
1263           3980   ;        main.c:1172: pwm_right = vx_error*pwm_corr; 
1263           3981   L031023?:
1263           3982   ;        main.c:1178: if (vy_err<0){
1263 E531      3983            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
1265 20E7E0    3984            jb      acc.7,L031068?
1268 020000    3985            ljmp    L031036?
126B           3986   L031068?:
126B           3987   ;        main.c:1179: L_motor_dir = 1; 
126B 904D40    3988            mov     dptr,#_L_motor_dir
126E 7401      3989            mov     a,#0x01
1270 F0        3990            movx    @dptr,a
1271           3991   ;        main.c:1180: R_motor_dir = 1; 
1271 904D00    3992            mov     dptr,#_R_motor_dir
1274 7401      3993            mov     a,#0x01
1276 F0        3994            movx    @dptr,a
1277           3995   ;        main.c:1182: if (vx_err>0){
1277 C3        3996            clr     c
1278 E4        3997            clr     a
1279 9570      3998            subb    a,_Joystick_Control_sloc4_1_0
127B E4        3999            clr     a
127C 6480      4000            xrl     a,#0x80
127E 8571F0    4001            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
1281 63F080    4002            xrl     b,#0x80
1284 95F0      4003            subb    a,b
1286 4000      4004            jc      L031069?
1288 020000    4005            ljmp    L031031?
128B           4006   L031069?:
128B           4007   ;        main.c:1183: if (vy*100<=vy_thres*100/2){
128B 8C00      4008            mov     __mulint_PARM_2,r4
128D 8D01      4009            mov     (__mulint_PARM_2 + 1),r5
128F 900064    4010            mov     dptr,#0x0064
1292 C006      4011            push    ar6
1294 C007      4012            push    ar7
1296 120000    4013            lcall   __mulint
1299 AA82      4014            mov     r2,dpl
129B AB83      4015            mov     r3,dph
129D D007      4016            pop     ar7
129F D006      4017            pop     ar6
12A1 85D000    4018            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
12A4 85D101    4019            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
12A7 900064    4020            mov     dptr,#0x0064
12AA C002      4021            push    ar2
12AC C003      4022            push    ar3
12AE C006      4023            push    ar6
12B0 C007      4024            push    ar7
12B2 120000    4025            lcall   __mulint
12B5 A882      4026            mov     r0,dpl
12B7 A983      4027            mov     r1,dph
12B9 750002    4028            mov     __divsint_PARM_2,#0x02
12BC E4        4029            clr     a
12BD F501      4030            mov     (__divsint_PARM_2 + 1),a
12BF 8882      4031            mov     dpl,r0
12C1 8983      4032            mov     dph,r1
12C3 120000    4033            lcall   __divsint
12C6 A882      4034            mov     r0,dpl
12C8 A983      4035            mov     r1,dph
12CA D007      4036            pop     ar7
12CC D006      4037            pop     ar6
12CE D003      4038            pop     ar3
12D0 D002      4039            pop     ar2
12D2 C3        4040            clr     c
12D3 E8        4041            mov     a,r0
12D4 9A        4042            subb    a,r2
12D5 E9        4043            mov     a,r1
12D6 6480      4044            xrl     a,#0x80
12D8 8BF0      4045            mov     b,r3
12DA 63F080    4046            xrl     b,#0x80
12DD 95F0      4047            subb    a,b
12DF 5000      4048            jnc     L031070?
12E1 020000    4049            ljmp    L031025?
12E4           4050   L031070?:
12E4           4051   ;        main.c:1184: pwm_left = vy_error; 
12E4 904DC0    4052            mov     dptr,#_pwm_left
12E7 EE        4053            mov     a,r6
12E8 F0        4054            movx    @dptr,a
12E9           4055   ;        main.c:1185: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
12E9 904A70    4056            mov     dptr,#_pwm_corr
12EC E0        4057            movx    a,@dptr
12ED F5C0      4058            mov     _Joystick_Control_sloc5_1_0,a
12EF A3        4059            inc     dptr
12F0 E0        4060            movx    a,@dptr
12F1 F5C1      4061            mov     (_Joystick_Control_sloc5_1_0 + 1),a
12F3 A3        4062            inc     dptr
12F4 E0        4063            movx    a,@dptr
12F5 F5C2      4064            mov     (_Joystick_Control_sloc5_1_0 + 2),a
12F7 A3        4065            inc     dptr
12F8 E0        4066            movx    a,@dptr
12F9 F5C3      4067            mov     (_Joystick_Control_sloc5_1_0 + 3),a
12FB 8E82      4068            mov     dpl,r6
12FD 8F83      4069            mov     dph,r7
12FF C006      4070            push    ar6
1301 C007      4071            push    ar7
1303 120000    4072            lcall   ___sint2fs
1306 AA82      4073            mov     r2,dpl
1308 AB83      4074            mov     r3,dph
130A A8F0      4075            mov     r0,b
130C F9        4076            mov     r1,a
130D C002      4077            push    ar2
130F C003      4078            push    ar3
1311 C000      4079            push    ar0
1313 C001      4080            push    ar1
1315 85C082    4081            mov     dpl,_Joystick_Control_sloc5_1_0
1318 85C183    4082            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
131B 85C2F0    4083            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
131E E5C3      4084            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1320 120000    4085            lcall   ___fsmul
1323 AA82      4086            mov     r2,dpl
1325 AB83      4087            mov     r3,dph
1327 A8F0      4088            mov     r0,b
1329 F9        4089            mov     r1,a
132A E581      4090            mov     a,sp
132C 24FC      4091            add     a,#0xfc
132E F581      4092            mov     sp,a
1330 C002      4093            push    ar2
1332 C003      4094            push    ar3
1334 C000      4095            push    ar0
1336 C001      4096            push    ar1
1338 900000    4097            mov     dptr,#0x0000
133B 75F0C8    4098            mov     b,#0xC8
133E 7442      4099            mov     a,#0x42
1340 120000    4100            lcall   ___fsmul
1343 8582C0    4101            mov     _Joystick_Control_sloc5_1_0,dpl
1346 8583C1    4102            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1349 85F0C2    4103            mov     (_Joystick_Control_sloc5_1_0 + 2),b
134C F5C3      4104            mov     (_Joystick_Control_sloc5_1_0 + 3),a
134E E581      4105            mov     a,sp
1350 24FC      4106            add     a,#0xfc
1352 F581      4107            mov     sp,a
1354 D007      4108            pop     ar7
1356 D006      4109            pop     ar6
1358 EE        4110            mov     a,r6
1359 2510      4111            add     a,_Joystick_Control_sloc6_1_0
135B F582      4112            mov     dpl,a
135D EF        4113            mov     a,r7
135E 3511      4114            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1360 F583      4115            mov     dph,a
1362 120000    4116            lcall   ___sint2fs
1365 AA82      4117            mov     r2,dpl
1367 AB83      4118            mov     r3,dph
1369 A8F0      4119            mov     r0,b
136B F9        4120            mov     r1,a
136C C002      4121            push    ar2
136E C003      4122            push    ar3
1370 C000      4123            push    ar0
1372 C001      4124            push    ar1
1374 85C082    4125            mov     dpl,_Joystick_Control_sloc5_1_0
1377 85C183    4126            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
137A 85C2F0    4127            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
137D E5C3      4128            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
137F 120000    4129            lcall   ___fsdiv
1382 AA82      4130            mov     r2,dpl
1384 AB83      4131            mov     r3,dph
1386 A8F0      4132            mov     r0,b
1388 F9        4133            mov     r1,a
1389 E581      4134            mov     a,sp
138B 24FC      4135            add     a,#0xfc
138D F581      4136            mov     sp,a
138F 8A82      4137            mov     dpl,r2
1391 8B83      4138            mov     dph,r3
1393 88F0      4139            mov     b,r0
1395 E9        4140            mov     a,r1
1396 120000    4141            lcall   ___fs2uchar
1399 E582      4142            mov     a,dpl
139B 904D80    4143            mov     dptr,#_pwm_right
139E F0        4144            movx    @dptr,a
139F 020000    4145            ljmp    L031036?
13A2           4146   L031025?:
13A2           4147   ;        main.c:1188: pwm_left = vx_error; 
13A2 904DC0    4148            mov     dptr,#_pwm_left
13A5 E510      4149            mov     a,_Joystick_Control_sloc6_1_0
13A7 F0        4150            movx    @dptr,a
13A8           4151   ;        main.c:1189: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
13A8 904A70    4152            mov     dptr,#_pwm_corr
13AB E0        4153            movx    a,@dptr
13AC F5C0      4154            mov     _Joystick_Control_sloc5_1_0,a
13AE A3        4155            inc     dptr
13AF E0        4156            movx    a,@dptr
13B0 F5C1      4157            mov     (_Joystick_Control_sloc5_1_0 + 1),a
13B2 A3        4158            inc     dptr
13B3 E0        4159            movx    a,@dptr
13B4 F5C2      4160            mov     (_Joystick_Control_sloc5_1_0 + 2),a
13B6 A3        4161            inc     dptr
13B7 E0        4162            movx    a,@dptr
13B8 F5C3      4163            mov     (_Joystick_Control_sloc5_1_0 + 3),a
13BA 851082    4164            mov     dpl,_Joystick_Control_sloc6_1_0
13BD 851183    4165            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
13C0 C006      4166            push    ar6
13C2 C007      4167            push    ar7
13C4 120000    4168            lcall   ___sint2fs
13C7 AA82      4169            mov     r2,dpl
13C9 AB83      4170            mov     r3,dph
13CB A8F0      4171            mov     r0,b
13CD F9        4172            mov     r1,a
13CE C002      4173            push    ar2
13D0 C003      4174            push    ar3
13D2 C000      4175            push    ar0
13D4 C001      4176            push    ar1
13D6 85C082    4177            mov     dpl,_Joystick_Control_sloc5_1_0
13D9 85C183    4178            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
13DC 85C2F0    4179            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
13DF E5C3      4180            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
13E1 120000    4181            lcall   ___fsmul
13E4 AA82      4182            mov     r2,dpl
13E6 AB83      4183            mov     r3,dph
13E8 A8F0      4184            mov     r0,b
13EA F9        4185            mov     r1,a
13EB E581      4186            mov     a,sp
13ED 24FC      4187            add     a,#0xfc
13EF F581      4188            mov     sp,a
13F1 C002      4189            push    ar2
13F3 C003      4190            push    ar3
13F5 C000      4191            push    ar0
13F7 C001      4192            push    ar1
13F9 900000    4193            mov     dptr,#0x0000
13FC 75F0C8    4194            mov     b,#0xC8
13FF 7442      4195            mov     a,#0x42
1401 120000    4196            lcall   ___fsmul
1404 8582C0    4197            mov     _Joystick_Control_sloc5_1_0,dpl
1407 8583C1    4198            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
140A 85F0C2    4199            mov     (_Joystick_Control_sloc5_1_0 + 2),b
140D F5C3      4200            mov     (_Joystick_Control_sloc5_1_0 + 3),a
140F E581      4201            mov     a,sp
1411 24FC      4202            add     a,#0xfc
1413 F581      4203            mov     sp,a
1415 D007      4204            pop     ar7
1417 D006      4205            pop     ar6
1419 EE        4206            mov     a,r6
141A 2510      4207            add     a,_Joystick_Control_sloc6_1_0
141C F582      4208            mov     dpl,a
141E EF        4209            mov     a,r7
141F 3511      4210            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1421 F583      4211            mov     dph,a
1423 120000    4212            lcall   ___sint2fs
1426 AA82      4213            mov     r2,dpl
1428 AB83      4214            mov     r3,dph
142A A8F0      4215            mov     r0,b
142C F9        4216            mov     r1,a
142D C002      4217            push    ar2
142F C003      4218            push    ar3
1431 C000      4219            push    ar0
1433 C001      4220            push    ar1
1435 85C082    4221            mov     dpl,_Joystick_Control_sloc5_1_0
1438 85C183    4222            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
143B 85C2F0    4223            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
143E E5C3      4224            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1440 120000    4225            lcall   ___fsdiv
1443 AA82      4226            mov     r2,dpl
1445 AB83      4227            mov     r3,dph
1447 A8F0      4228            mov     r0,b
1449 F9        4229            mov     r1,a
144A E581      4230            mov     a,sp
144C 24FC      4231            add     a,#0xfc
144E F581      4232            mov     sp,a
1450 8A82      4233            mov     dpl,r2
1452 8B83      4234            mov     dph,r3
1454 88F0      4235            mov     b,r0
1456 E9        4236            mov     a,r1
1457 120000    4237            lcall   ___fs2uchar
145A E582      4238            mov     a,dpl
145C 904D80    4239            mov     dptr,#_pwm_right
145F F0        4240            movx    @dptr,a
1460 020000    4241            ljmp    L031036?
1463           4242   L031031?:
1463           4243   ;        main.c:1195: if (vy*100<=vy_thres*100/2){
1463 8C00      4244            mov     __mulint_PARM_2,r4
1465 8D01      4245            mov     (__mulint_PARM_2 + 1),r5
1467 900064    4246            mov     dptr,#0x0064
146A C006      4247            push    ar6
146C C007      4248            push    ar7
146E 120000    4249            lcall   __mulint
1471 AA82      4250            mov     r2,dpl
1473 AB83      4251            mov     r3,dph
1475 D007      4252            pop     ar7
1477 D006      4253            pop     ar6
1479 85D000    4254            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
147C 85D101    4255            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
147F 900064    4256            mov     dptr,#0x0064
1482 C002      4257            push    ar2
1484 C003      4258            push    ar3
1486 C006      4259            push    ar6
1488 C007      4260            push    ar7
148A 120000    4261            lcall   __mulint
148D AC82      4262            mov     r4,dpl
148F AD83      4263            mov     r5,dph
1491 750002    4264            mov     __divsint_PARM_2,#0x02
1494 E4        4265            clr     a
1495 F501      4266            mov     (__divsint_PARM_2 + 1),a
1497 8C82      4267            mov     dpl,r4
1499 8D83      4268            mov     dph,r5
149B 120000    4269            lcall   __divsint
149E AC82      4270            mov     r4,dpl
14A0 AD83      4271            mov     r5,dph
14A2 D007      4272            pop     ar7
14A4 D006      4273            pop     ar6
14A6 D003      4274            pop     ar3
14A8 D002      4275            pop     ar2
14AA C3        4276            clr     c
14AB EC        4277            mov     a,r4
14AC 9A        4278            subb    a,r2
14AD ED        4279            mov     a,r5
14AE 6480      4280            xrl     a,#0x80
14B0 8BF0      4281            mov     b,r3
14B2 63F080    4282            xrl     b,#0x80
14B5 95F0      4283            subb    a,b
14B7 5000      4284            jnc     L031071?
14B9 020000    4285            ljmp    L031028?
14BC           4286   L031071?:
14BC           4287   ;        main.c:1196: pwm_left = vy_error*100/(vx_error+vy_error);
14BC 8E00      4288            mov     __mulint_PARM_2,r6
14BE 8F01      4289            mov     (__mulint_PARM_2 + 1),r7
14C0 900064    4290            mov     dptr,#0x0064
14C3 C006      4291            push    ar6
14C5 C007      4292            push    ar7
14C7 120000    4293            lcall   __mulint
14CA AA82      4294            mov     r2,dpl
14CC AB83      4295            mov     r3,dph
14CE D007      4296            pop     ar7
14D0 D006      4297            pop     ar6
14D2 EE        4298            mov     a,r6
14D3 2510      4299            add     a,_Joystick_Control_sloc6_1_0
14D5 F500      4300            mov     __divsint_PARM_2,a
14D7 EF        4301            mov     a,r7
14D8 3511      4302            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
14DA F501      4303            mov     (__divsint_PARM_2 + 1),a
14DC 8A82      4304            mov     dpl,r2
14DE 8B83      4305            mov     dph,r3
14E0 C006      4306            push    ar6
14E2 C007      4307            push    ar7
14E4 120000    4308            lcall   __divsint
14E7 AA82      4309            mov     r2,dpl
14E9 D007      4310            pop     ar7
14EB D006      4311            pop     ar6
14ED 904DC0    4312            mov     dptr,#_pwm_left
14F0 EA        4313            mov     a,r2
14F1 F0        4314            movx    @dptr,a
14F2           4315   ;        main.c:1197: pwm_right =pwm_corr*vy_error; 
14F2 904A70    4316            mov     dptr,#_pwm_corr
14F5 E0        4317            movx    a,@dptr
14F6 F5C0      4318            mov     _Joystick_Control_sloc5_1_0,a
14F8 A3        4319            inc     dptr
14F9 E0        4320            movx    a,@dptr
14FA F5C1      4321            mov     (_Joystick_Control_sloc5_1_0 + 1),a
14FC A3        4322            inc     dptr
14FD E0        4323            movx    a,@dptr
14FE F5C2      4324            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1500 A3        4325            inc     dptr
1501 E0        4326            movx    a,@dptr
1502 F5C3      4327            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1504 8E82      4328            mov     dpl,r6
1506 8F83      4329            mov     dph,r7
1508 120000    4330            lcall   ___sint2fs
150B A882      4331            mov     r0,dpl
150D A983      4332            mov     r1,dph
150F AAF0      4333            mov     r2,b
1511 FB        4334            mov     r3,a
1512 C000      4335            push    ar0
1514 C001      4336            push    ar1
1516 C002      4337            push    ar2
1518 C003      4338            push    ar3
151A 85C082    4339            mov     dpl,_Joystick_Control_sloc5_1_0
151D 85C183    4340            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1520 85C2F0    4341            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1523 E5C3      4342            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1525 120000    4343            lcall   ___fsmul
1528 AA82      4344            mov     r2,dpl
152A AB83      4345            mov     r3,dph
152C ACF0      4346            mov     r4,b
152E FD        4347            mov     r5,a
152F E581      4348            mov     a,sp
1531 24FC      4349            add     a,#0xfc
1533 F581      4350            mov     sp,a
1535 8A82      4351            mov     dpl,r2
1537 8B83      4352            mov     dph,r3
1539 8CF0      4353            mov     b,r4
153B ED        4354            mov     a,r5
153C 120000    4355            lcall   ___fs2uchar
153F E582      4356            mov     a,dpl
1541 904D80    4357            mov     dptr,#_pwm_right
1544 F0        4358            movx    @dptr,a
1545 020000    4359            ljmp    L031036?
1548           4360   L031028?:
1548           4361   ;        main.c:1200: pwm_left = vx_error*100/(vx_error+vy_error);
1548 851000    4362            mov     __mulint_PARM_2,_Joystick_Control_sloc6_1_0
154B 851101    4363            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc6_1_0 + 1)
154E 900064    4364            mov     dptr,#0x0064
1551 C006      4365            push    ar6
1553 C007      4366            push    ar7
1555 120000    4367            lcall   __mulint
1558 AA82      4368            mov     r2,dpl
155A AB83      4369            mov     r3,dph
155C D007      4370            pop     ar7
155E D006      4371            pop     ar6
1560 EE        4372            mov     a,r6
1561 2510      4373            add     a,_Joystick_Control_sloc6_1_0
1563 F500      4374            mov     __divsint_PARM_2,a
1565 EF        4375            mov     a,r7
1566 3511      4376            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1568 F501      4377            mov     (__divsint_PARM_2 + 1),a
156A 8A82      4378            mov     dpl,r2
156C 8B83      4379            mov     dph,r3
156E 120000    4380            lcall   __divsint
1571 AA82      4381            mov     r2,dpl
1573 904DC0    4382            mov     dptr,#_pwm_left
1576 EA        4383            mov     a,r2
1577 F0        4384            movx    @dptr,a
1578           4385   ;        main.c:1201: pwm_right = pwm_corr*vx_error; 
1578 904A70    4386            mov     dptr,#_pwm_corr
157B E0        4387            movx    a,@dptr
157C FA        4388            mov     r2,a
157D A3        4389            inc     dptr
157E E0        4390            movx    a,@dptr
157F FB        4391            mov     r3,a
1580 A3        4392            inc     dptr
1581 E0        4393            movx    a,@dptr
1582 FC        4394            mov     r4,a
1583 A3        4395            inc     dptr
1584 E0        4396            movx    a,@dptr
1585 FD        4397            mov     r5,a
1586 851082    4398            mov     dpl,_Joystick_Control_sloc6_1_0
1589 851183    4399            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
158C C002      4400            push    ar2
158E C003      4401            push    ar3
1590 C004      4402            push    ar4
1592 C005      4403            push    ar5
1594 120000    4404            lcall   ___sint2fs
1597 AE82      4405            mov     r6,dpl
1599 AF83      4406            mov     r7,dph
159B A8F0      4407            mov     r0,b
159D F9        4408            mov     r1,a
159E D005      4409            pop     ar5
15A0 D004      4410            pop     ar4
15A2 D003      4411            pop     ar3
15A4 D002      4412            pop     ar2
15A6 C006      4413            push    ar6
15A8 C007      4414            push    ar7
15AA C000      4415            push    ar0
15AC C001      4416            push    ar1
15AE 8A82      4417            mov     dpl,r2
15B0 8B83      4418            mov     dph,r3
15B2 8CF0      4419            mov     b,r4
15B4 ED        4420            mov     a,r5
15B5 120000    4421            lcall   ___fsmul
15B8 AA82      4422            mov     r2,dpl
15BA AB83      4423            mov     r3,dph
15BC ACF0      4424            mov     r4,b
15BE FD        4425            mov     r5,a
15BF E581      4426            mov     a,sp
15C1 24FC      4427            add     a,#0xfc
15C3 F581      4428            mov     sp,a
15C5 8A82      4429            mov     dpl,r2
15C7 8B83      4430            mov     dph,r3
15C9 8CF0      4431            mov     b,r4
15CB ED        4432            mov     a,r5
15CC 120000    4433            lcall   ___fs2uchar
15CF E582      4434            mov     a,dpl
15D1 904D80    4435            mov     dptr,#_pwm_right
15D4 F0        4436            movx    @dptr,a
15D5           4437   L031036?:
15D5           4438   ;        main.c:1210: return 0.0;
15D5 900000    4439            mov     dptr,#(0x00&0x00ff)
15D8 E4        4440            clr     a
15D9 F5F0      4441            mov     b,a
15DB 22        4442            ret
15DC           4443   ;------------------------------------------------------------
15DC           4444   ;Allocation info for local variables in function 'main'
15DC           4445   ;------------------------------------------------------------
15DC           4446   ;pick_char                 Allocated with name '_main_pick_char_1_196'
15DC           4447   ;c                         Allocated with name '_main_c_1_196'
15DC           4448   ;vx                        Allocated with name '_main_vx_1_196'
15DC           4449   ;vy                        Allocated with name '_main_vy_1_196'
15DC           4450   ;auto_mode                 Allocated with name '_main_auto_mode_1_196'
15DC           4451   ;angle_count               Allocated with name '_main_angle_count_1_196'
15DC           4452   ;------------------------------------------------------------
15DC           4453   ;        main.c:1213: void main (void)
15DC           4454   ;        -----------------------------------------
15DC           4455   ;         function main
15DC           4456   ;        -----------------------------------------
15DC           4457   _main:
15DC           4458   ;        main.c:1216: xdata int vx = 0, vy = 0; 
15DC 90C7A0    4459            mov     dptr,#_main_vx_1_196
15DF E4        4460            clr     a
15E0 F0        4461            movx    @dptr,a
15E1 A3        4462            inc     dptr
15E2 F0        4463            movx    @dptr,a
15E3 90C7E0    4464            mov     dptr,#_main_vy_1_196
15E6 E4        4465            clr     a
15E7 F0        4466            movx    @dptr,a
15E8 A3        4467            inc     dptr
15E9 F0        4468            movx    @dptr,a
15EA           4469   ;        main.c:1217: xdata int auto_mode = 0;
15EA 90C830    4470            mov     dptr,#_main_auto_mode_1_196
15ED E4        4471            clr     a
15EE F0        4472            movx    @dptr,a
15EF A3        4473            inc     dptr
15F0 F0        4474            movx    @dptr,a
15F1           4475   ;        main.c:1218: char pick_char = '0';
15F1 756030    4476            mov     _main_pick_char_1_196,#0x30
15F4           4477   ;        main.c:1222: Init_all();
15F4 120000    4478            lcall   _Init_all
15F7           4479   ;        main.c:1224: waitms(500);
15F7 9001F4    4480            mov     dptr,#0x01F4
15FA 120000    4481            lcall   _waitms
15FD           4482   ;        main.c:1225: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
15FD 74A0      4483            mov     a,#__str_12
15FF C0E0      4484            push    acc
1601 7402      4485            mov     a,#(__str_12 >> 8)
1603 C0E0      4486            push    acc
1605 7480      4487            mov     a,#0x80
1607 C0E0      4488            push    acc
1609 120000    4489            lcall   _printf
160C 1581      4490            dec     sp
160E 1581      4491            dec     sp
1610 1581      4492            dec     sp
1612           4493   ;        main.c:1226: UART1_Init(9600);
1612 902580    4494            mov     dptr,#0x2580
1615 E4        4495            clr     a
1616 F5F0      4496            mov     b,a
1618 120000    4497            lcall   _UART1_Init
161B           4498   ;        main.c:1228: ReceptionOff();
161B 120000    4499            lcall   _ReceptionOff
161E           4500   ;        main.c:1231: SendATCommand("AT+VER\r\n");
161E 9002E0    4501            mov     dptr,#__str_13
1621 75F080    4502            mov     b,#0x80
1624 120000    4503            lcall   _SendATCommand
1627           4504   ;        main.c:1232: SendATCommand("AT+BAUD\r\n");
1627 900320    4505            mov     dptr,#__str_14
162A 75F080    4506            mov     b,#0x80
162D 120000    4507            lcall   _SendATCommand
1630           4508   ;        main.c:1233: SendATCommand("AT+RFID\r\n");
1630 900360    4509            mov     dptr,#__str_15
1633 75F080    4510            mov     b,#0x80
1636 120000    4511            lcall   _SendATCommand
1639           4512   ;        main.c:1234: SendATCommand("AT+DVID\r\n");
1639 9003A0    4513            mov     dptr,#__str_16
163C 75F080    4514            mov     b,#0x80
163F 120000    4515            lcall   _SendATCommand
1642           4516   ;        main.c:1235: SendATCommand("AT+RFC002\r\n");
1642 9003E0    4517            mov     dptr,#__str_17
1645 75F080    4518            mov     b,#0x80
1648 120000    4519            lcall   _SendATCommand
164B           4520   ;        main.c:1236: SendATCommand("AT+POWE\r\n");
164B 900420    4521            mov     dptr,#__str_18
164E 75F080    4522            mov     b,#0x80
1651 120000    4523            lcall   _SendATCommand
1654           4524   ;        main.c:1237: SendATCommand("AT+CLSS\r\n");
1654 900460    4525            mov     dptr,#__str_19
1657 75F080    4526            mov     b,#0x80
165A 120000    4527            lcall   _SendATCommand
165D           4528   ;        main.c:1238: SendATCommand("AT+DVIDEF11\r\n");  
165D 9004A0    4529            mov     dptr,#__str_20
1660 75F080    4530            mov     b,#0x80
1663 120000    4531            lcall   _SendATCommand
1666           4532   ;        main.c:1241: L_bridge_1 = 0; 
1666 C2A1      4533            clr     _P2_1
1668           4534   ;        main.c:1242: L_bridge_2 = 0; 
1668 C2A2      4535            clr     _P2_2
166A           4536   ;        main.c:1243: R_bridge_1 = 0; 
166A C2A4      4537            clr     _P2_4
166C           4538   ;        main.c:1244: R_bridge_2 = 0; 
166C C2A3      4539            clr     _P2_3
166E           4540   ;        main.c:1248: waitms(1000);
166E 9003E8    4541            mov     dptr,#0x03E8
1671 120000    4542            lcall   _waitms
1674           4543   ;        main.c:1249: servo_pick();
1674 120000    4544            lcall   _servo_pick
1677           4545   ;        main.c:1250: while(1)
1677           4546   L032016?:
1677           4547   ;        main.c:1252: servo_base = 100;
1677 904CC0    4548            mov     dptr,#_servo_base
167A 7464      4549            mov     a,#0x64
167C F0        4550            movx    @dptr,a
167D           4551   ;        main.c:1257: if(pick_char=='1'){
167D 7431      4552            mov     a,#0x31
167F B56020    4553            cjne    a,_main_pick_char_1_196,L032002?
1682           4554   ;        main.c:1258: servo_pick();
1682 120000    4555            lcall   _servo_pick
1685           4556   ;        main.c:1259: waitms(1000);
1685 9003E8    4557            mov     dptr,#0x03E8
1688 120000    4558            lcall   _waitms
168B           4559   ;        main.c:1260: pick_char = '0';
168B 756030    4560            mov     _main_pick_char_1_196,#0x30
168E           4561   L032002?:
168E           4562   ;        main.c:1263: if(auto_mode){
168E 90C830    4563            mov     dptr,#_main_auto_mode_1_196
1691 E0        4564            movx    a,@dptr
1692 FA        4565            mov     r2,a
1693 A3        4566            inc     dptr
1694 E0        4567            movx    a,@dptr
1695 FB        4568            mov     r3,a
1696 4A        4569            orl     a,r2
1697 6000      4570            jz      L032004?
1699           4571   ;        main.c:1264: Auto_mode_slave();
1699 120000    4572            lcall   _Auto_mode_slave
169C           4573   ;        main.c:1265: auto_mode = 0;
169C 90C830    4574            mov     dptr,#_main_auto_mode_1_196
169F E4        4575            clr     a
16A0 F0        4576            movx    @dptr,a
16A1 A3        4577            inc     dptr
16A2 F0        4578            movx    @dptr,a
16A3           4579   L032004?:
16A3           4580   ;        main.c:1268: if(RXU1()) // Something has arrived
16A3 120000    4581            lcall   _RXU1
16A6 5000      4582            jnc     L032016?
16A8           4583   ;        main.c:1270: c=getchar1();
16A8 120000    4584            lcall   _getchar1
16AB AA82      4585            mov     r2,dpl
16AD           4586   ;        main.c:1271: if(c=='!') // Master is sending message
16AD BA21A0    4587            cjne    r2,#0x21,L032031?
16B0 8000      4588            sjmp    L032032?
16B2           4589   L032031?:
16B2 020000    4590            ljmp    L032011?
16B5           4591   L032032?:
16B5           4592   ;        main.c:1273: getstr1(buff, sizeof(buff)-1);
16B5 75D013    4593            mov     _getstr1_PARM_2,#0x13
16B8 905240    4594            mov     dptr,#_buff
16BB 75F040    4595            mov     b,#0x40
16BE 120000    4596            lcall   _getstr1
16C1           4597   ;        main.c:1274: if(strlen(buff)==11)
16C1 905240    4598            mov     dptr,#_buff
16C4 75F040    4599            mov     b,#0x40
16C7 120000    4600            lcall   _strlen
16CA AB82      4601            mov     r3,dpl
16CC AC83      4602            mov     r4,dph
16CE BB0B60    4603            cjne    r3,#0x0B,L032033?
16D1 BC0060    4604            cjne    r4,#0x00,L032033?
16D4 8000      4605            sjmp    L032034?
16D6           4606   L032033?:
16D6 020000    4607            ljmp    L032006?
16D9           4608   L032034?:
16D9           4609   ;        main.c:1276: printf("Master says: %s\r\n", buff);
16D9 7440      4610            mov     a,#_buff
16DB C0E0      4611            push    acc
16DD 7452      4612            mov     a,#(_buff >> 8)
16DF C0E0      4613            push    acc
16E1 7440      4614            mov     a,#0x40
16E3 C0E0      4615            push    acc
16E5 7420      4616            mov     a,#__str_21
16E7 C0E0      4617            push    acc
16E9 7407      4618            mov     a,#(__str_21 >> 8)
16EB C0E0      4619            push    acc
16ED 7480      4620            mov     a,#0x80
16EF C0E0      4621            push    acc
16F1 120000    4622            lcall   _printf
16F4 E581      4623            mov     a,sp
16F6 24FA      4624            add     a,#0xfa
16F8 F581      4625            mov     sp,a
16FA           4626   ;        main.c:1277: sscanf(buff, "%03d,%03d,%c,%01d", &vx, &vy, &pick_char, &auto_mode);
16FA 7430      4627            mov     a,#_main_auto_mode_1_196
16FC C0E0      4628            push    acc
16FE 74C8      4629            mov     a,#(_main_auto_mode_1_196 >> 8)
1700 C0E0      4630            push    acc
1702 E4        4631            clr     a
1703 C0E0      4632            push    acc
1705 7460      4633            mov     a,#_main_pick_char_1_196
1707 C0E0      4634            push    acc
1709 74C5      4635            mov     a,#(_main_pick_char_1_196 >> 8)
170B C0E0      4636            push    acc
170D 7440      4637            mov     a,#0x40
170F C0E0      4638            push    acc
1711 74E0      4639            mov     a,#_main_vy_1_196
1713 C0E0      4640            push    acc
1715 74C7      4641            mov     a,#(_main_vy_1_196 >> 8)
1717 C0E0      4642            push    acc
1719 E4        4643            clr     a
171A C0E0      4644            push    acc
171C 74A0      4645            mov     a,#_main_vx_1_196
171E C0E0      4646            push    acc
1720 74C7      4647            mov     a,#(_main_vx_1_196 >> 8)
1722 C0E0      4648            push    acc
1724 E4        4649            clr     a
1725 C0E0      4650            push    acc
1727 7460      4651            mov     a,#__str_22
1729 C0E0      4652            push    acc
172B 7407      4653            mov     a,#(__str_22 >> 8)
172D C0E0      4654            push    acc
172F 7480      4655            mov     a,#0x80
1731 C0E0      4656            push    acc
1733 7440      4657            mov     a,#_buff
1735 C0E0      4658            push    acc
1737 7452      4659            mov     a,#(_buff >> 8)
1739 C0E0      4660            push    acc
173B 7440      4661            mov     a,#0x40
173D C0E0      4662            push    acc
173F 120000    4663            lcall   _sscanf
1742 E581      4664            mov     a,sp
1744 24EE      4665            add     a,#0xee
1746 F581      4666            mov     sp,a
1748           4667   ;        main.c:1278: printf("Joystick Received: Vx = %d, Vy = %d, Order = %c, Auto = %d\r\n", vx, vy, pick_char, auto_mode);
1748 E560      4668            mov     a,_main_pick_char_1_196
174A FB        4669            mov     r3,a
174B 33        4670            rlc     a
174C 95E0      4671            subb    a,acc
174E FC        4672            mov     r4,a
174F 90C830    4673            mov     dptr,#_main_auto_mode_1_196
1752 E0        4674            movx    a,@dptr
1753 C0E0      4675            push    acc
1755 A3        4676            inc     dptr
1756 E0        4677            movx    a,@dptr
1757 C0E0      4678            push    acc
1759 C003      4679            push    ar3
175B C004      4680            push    ar4
175D 90C7E0    4681            mov     dptr,#_main_vy_1_196
1760 E0        4682            movx    a,@dptr
1761 C0E0      4683            push    acc
1763 A3        4684            inc     dptr
1764 E0        4685            movx    a,@dptr
1765 C0E0      4686            push    acc
1767 90C7A0    4687            mov     dptr,#_main_vx_1_196
176A E0        4688            movx    a,@dptr
176B C0E0      4689            push    acc
176D A3        4690            inc     dptr
176E E0        4691            movx    a,@dptr
176F C0E0      4692            push    acc
1771 74A0      4693            mov     a,#__str_23
1773 C0E0      4694            push    acc
1775 7407      4695            mov     a,#(__str_23 >> 8)
1777 C0E0      4696            push    acc
1779 7480      4697            mov     a,#0x80
177B C0E0      4698            push    acc
177D 120000    4699            lcall   _printf
1780 E581      4700            mov     a,sp
1782 24F5      4701            add     a,#0xf5
1784 F581      4702            mov     sp,a
1786           4703   ;        main.c:1279: curr_angle = Joystick_Control(&vx, &vy);
1786 7590E0    4704            mov     _Joystick_Control_PARM_2,#_main_vy_1_196
1789 7591C7    4705            mov     (_Joystick_Control_PARM_2 + 1),#(_main_vy_1_196 >> 8)
178C 759200    4706            mov     (_Joystick_Control_PARM_2 + 2),#0x00
178F 90C7A0    4707            mov     dptr,#_main_vx_1_196
1792 75F000    4708            mov     b,#0x00
1795 120000    4709            lcall   _Joystick_Control
1798 AB82      4710            mov     r3,dpl
179A AC83      4711            mov     r4,dph
179C ADF0      4712            mov     r5,b
179E FE        4713            mov     r6,a
179F 904A30    4714            mov     dptr,#_curr_angle
17A2 EB        4715            mov     a,r3
17A3 F0        4716            movx    @dptr,a
17A4 A3        4717            inc     dptr
17A5 EC        4718            mov     a,r4
17A6 F0        4719            movx    @dptr,a
17A7 A3        4720            inc     dptr
17A8 ED        4721            mov     a,r5
17A9 F0        4722            movx    @dptr,a
17AA A3        4723            inc     dptr
17AB EE        4724            mov     a,r6
17AC F0        4725            movx    @dptr,a
17AD 020000    4726            ljmp    L032016?
17B0           4727   L032006?:
17B0           4728   ;        main.c:1282: printf("*** BAD MESSAGE ***: %s\r\n", buff);
17B0 7440      4729            mov     a,#_buff
17B2 C0E0      4730            push    acc
17B4 7452      4731            mov     a,#(_buff >> 8)
17B6 C0E0      4732            push    acc
17B8 7440      4733            mov     a,#0x40
17BA C0E0      4734            push    acc
17BC 74E0      4735            mov     a,#__str_24
17BE C0E0      4736            push    acc
17C0 7407      4737            mov     a,#(__str_24 >> 8)
17C2 C0E0      4738            push    acc
17C4 7480      4739            mov     a,#0x80
17C6 C0E0      4740            push    acc
17C8 120000    4741            lcall   _printf
17CB E581      4742            mov     a,sp
17CD 24FA      4743            add     a,#0xfa
17CF F581      4744            mov     sp,a
17D1 020000    4745            ljmp    L032016?
17D4           4746   L032011?:
17D4           4747   ;        main.c:1285: else if(c=='@') // Master wants slave data
17D4 BA4020    4748            cjne    r2,#0x40,L032035?
17D7 8000      4749            sjmp    L032036?
17D9           4750   L032035?:
17D9 020000    4751            ljmp    L032016?
17DC           4752   L032036?:
17DC           4753   ;        main.c:1287: sprintf(buff, "0,00,%04ld,%05d,%03d\n", freq100, weight, (int)curr_angle);
17DC 904A30    4754            mov     dptr,#_curr_angle
17DF E0        4755            movx    a,@dptr
17E0 FA        4756            mov     r2,a
17E1 A3        4757            inc     dptr
17E2 E0        4758            movx    a,@dptr
17E3 FB        4759            mov     r3,a
17E4 A3        4760            inc     dptr
17E5 E0        4761            movx    a,@dptr
17E6 FC        4762            mov     r4,a
17E7 A3        4763            inc     dptr
17E8 E0        4764            movx    a,@dptr
17E9 8A82      4765            mov     dpl,r2
17EB 8B83      4766            mov     dph,r3
17ED 8CF0      4767            mov     b,r4
17EF 120000    4768            lcall   ___fs2sint
17F2 AA82      4769            mov     r2,dpl
17F4 AB83      4770            mov     r3,dph
17F6 C002      4771            push    ar2
17F8 C003      4772            push    ar3
17FA 9048F0    4773            mov     dptr,#_weight
17FD E0        4774            movx    a,@dptr
17FE C0E0      4775            push    acc
1800 A3        4776            inc     dptr
1801 E0        4777            movx    a,@dptr
1802 C0E0      4778            push    acc
1804 905200    4779            mov     dptr,#_freq100
1807 E0        4780            movx    a,@dptr
1808 C0E0      4781            push    acc
180A A3        4782            inc     dptr
180B E0        4783            movx    a,@dptr
180C C0E0      4784            push    acc
180E A3        4785            inc     dptr
180F E0        4786            movx    a,@dptr
1810 C0E0      4787            push    acc
1812 A3        4788            inc     dptr
1813 E0        4789            movx    a,@dptr
1814 C0E0      4790            push    acc
1816 74A0      4791            mov     a,#__str_25
1818 C0E0      4792            push    acc
181A 7408      4793            mov     a,#(__str_25 >> 8)
181C C0E0      4794            push    acc
181E 7480      4795            mov     a,#0x80
1820 C0E0      4796            push    acc
1822 7440      4797            mov     a,#_buff
1824 C0E0      4798            push    acc
1826 7452      4799            mov     a,#(_buff >> 8)
1828 C0E0      4800            push    acc
182A 7440      4801            mov     a,#0x40
182C C0E0      4802            push    acc
182E 120000    4803            lcall   _sprintf
1831 E581      4804            mov     a,sp
1833 24F2      4805            add     a,#0xf2
1835 F581      4806            mov     sp,a
1837           4807   ;        main.c:1288: printf("%s\r\n",buff);
1837 7440      4808            mov     a,#_buff
1839 C0E0      4809            push    acc
183B 7452      4810            mov     a,#(_buff >> 8)
183D C0E0      4811            push    acc
183F 7440      4812            mov     a,#0x40
1841 C0E0      4813            push    acc
1843 74E0      4814            mov     a,#__str_26
1845 C0E0      4815            push    acc
1847 7408      4816            mov     a,#(__str_26 >> 8)
1849 C0E0      4817            push    acc
184B 7480      4818            mov     a,#0x80
184D C0E0      4819            push    acc
184F 120000    4820            lcall   _printf
1852 E581      4821            mov     a,sp
1854 24FA      4822            add     a,#0xfa
1856 F581      4823            mov     sp,a
1858           4824   ;        main.c:1289: waitms(5); // The radio seems to need this delay...
1858 900005    4825            mov     dptr,#0x0005
185B 120000    4826            lcall   _waitms
185E           4827   ;        main.c:1290: sendstr1(buff);
185E 905240    4828            mov     dptr,#_buff
1861 75F040    4829            mov     b,#0x40
1864 120000    4830            lcall   _sendstr1
1867 020000    4831            ljmp    L032016?
186A           4832            rseg R_CSEG
186A           4833   
0000           4834            rseg R_XINIT
0000           4835   __xinit__pwm_counter:
0000 0000      4836            db 0x00,0x00    ; 0
0002           4837   __xinit__servo_counter:
0002 0000      4838            db 0x00,0x00    ; 0
0004           4839   __xinit__pwm_left:
0004 00        4840            db 0x00         ; 0
0005           4841   __xinit__pwm_right:
0005 00        4842            db 0x00         ; 0
0006           4843   __xinit__L_motor_dir:
0006 01        4844            db 0x01         ; 1
0007           4845   __xinit__R_motor_dir:
0007 01        4846            db 0x01         ; 1
0008           4847   __xinit__servo_base:
0008 64        4848            db 0x64         ; 100
0009           4849   __xinit__servo_arm:
0009 02        4850            db 0x02         ; 2
000A           4851   __xinit__vx_thres:
000A A100      4852            db 0xA1,0x00    ;  161
000C           4853   __xinit__vy_thres:
000C A600      4854            db 0xA6,0x00    ;  166
000E           4855   __xinit__vx:
000E 0000      4856            db 0x00,0x00    ;  0
0010           4857   __xinit__vy:
0010 0000      4858            db 0x00,0x00    ;  0
0012           4859   __xinit__fre_mea_count:
0012 0000      4860            db 0x00,0x00    ; 0
0014           4861   __xinit__weight_mea_count:
0014 0000      4862            db 0x00,0x00    ; 0
0016           4863   __xinit__seed:
0016 3930      4864            db 0x39,0x30    ; 12345
0018           4865   __xinit__pwm_corr:
0018 3333733F  4866            db 0x33,0x33,0x73,0x3F  ;  9.500000e-001
001C           4867   __xinit__curr_angle:
001C 00000000  4868            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0020           4869   __xinit__raw_angle:
0020 00000000  4870            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0024           4871   __xinit__last_raw_angle:
0024 00000000  4872            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0028           4873   __xinit__angle_diff:
0028 00000000  4874            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
002C           4875   __xinit__mea_yes:
002C 01        4876            db 0x01         ;  1
002D           4877   __xinit__weight:
002D 0000      4878            db 0x00,0x00    ; 0
002F           4879   
0000           4880            rseg R_CONST
0000           4881   __str_0:
0000 436F6D6D  4882            db 'Command: %s'
     616E643A
     202573
000B 00        4883            db 0x00
000C           4884   __str_1:
000C 52657370  4885            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        4886            db 0x0D
0019 0A        4887            db 0x0A
001A 00        4888            db 0x00
001B           4889   __str_2:
001B 41542B44  4890            db 'AT+DVID0000'
     56494430
     303030
0026 0D        4891            db 0x0D
0027 0A        4892            db 0x0A
0028 00        4893            db 0x00
0029           4894   __str_3:
0029 496E6974  4895            db 'Initiailizing angle'
     6961696C
     697A696E
     6720616E
     676C65
003C 0D        4896            db 0x0D
003D 0A        4897            db 0x0A
003E 00        4898            db 0x00
003F           4899   __str_4:
003F 5475726E  4900            db 'Turning servo base '
     696E6720
     73657276
     6F206261
     736520
0052 0D        4901            db 0x0D
0053 0A        4902            db 0x0A
0054 00        4903            db 0x00
0055           4904   __str_5:
0055 5475726E  4905            db 'Turning servo arm '
     696E6720
     73657276
     6F206172
     6D20
0067 0D        4906            db 0x0D
0068 0A        4907            db 0x0A
0069 00        4908            db 0x00
006A           4909   __str_6:
006A 4D61676E  4910            db 'Magnet on'
     6574206F
     6E
0073 0D        4911            db 0x0D
0074 0A        4912            db 0x0A
0075 00        4913            db 0x00
0076           4914   __str_7:
0076 4D61676E  4915            db 'Magnet delay done, moving servo base again'
     65742064
     656C6179
     20646F6E
     652C206D
     6F76696E
     67207365
     72766F20
     62617365
     20616761
     696E
00A0 0D        4916            db 0x0D
00A1 0A        4917            db 0x0A
00A2 00        4918            db 0x00
00A3           4919   __str_8:
00A3 6D617374  4920            db 'master_messgae_auto_mode: %s'
     65725F6D
     65737367
     61655F61
     75746F5F
     6D6F6465
     3A202573
00BF 0D        4921            db 0x0D
00C0 0A        4922            db 0x0A
00C1 00        4923            db 0x00
00C2           4924   __str_9:
00C2 25303364  4925            db '%03d,%03d,%01d,%01d'
     2C253033
     642C2530
     31642C25
     303164
00D5 00        4926            db 0x00
00D6           4927   __str_10:
00D6 25303164  4928            db '%01d,%02d,%ld,%05d,%03d'
     2C253032
     642C256C
     642C2530
     35642C25
     303364
00ED 0A        4929            db 0x0A
00EE 00        4930            db 0x00
00EF           4931   __str_11:
00EF 663A2530  4932            db 'f:%04ld, d1:%d, d2:%d, bound_dectect: %d'
     346C642C
     2064313A
     25642C20
     64323A25
     642C2062
     6F756E64
     5F646563
     74656374
     3A202564
0117 0D        4933            db 0x0D
0118 0A        4934            db 0x0A
0119 00        4935            db 0x00
011A           4936   __str_12:
011A 0D        4937            db 0x0D
011B 0A        4938            db 0x0A
011C 45464D38  4939            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
0137 0D        4940            db 0x0D
0138 0A        4941            db 0x0A
0139 00        4942            db 0x00
013A           4943   __str_13:
013A 41542B56  4944            db 'AT+VER'
     4552
0140 0D        4945            db 0x0D
0141 0A        4946            db 0x0A
0142 00        4947            db 0x00
0143           4948   __str_14:
0143 41542B42  4949            db 'AT+BAUD'
     415544
014A 0D        4950            db 0x0D
014B 0A        4951            db 0x0A
014C 00        4952            db 0x00
014D           4953   __str_15:
014D 41542B52  4954            db 'AT+RFID'
     464944
0154 0D        4955            db 0x0D
0155 0A        4956            db 0x0A
0156 00        4957            db 0x00
0157           4958   __str_16:
0157 41542B44  4959            db 'AT+DVID'
     564944
015E 0D        4960            db 0x0D
015F 0A        4961            db 0x0A
0160 00        4962            db 0x00
0161           4963   __str_17:
0161 41542B52  4964            db 'AT+RFC002'
     46433030
     32
016A 0D        4965            db 0x0D
016B 0A        4966            db 0x0A
016C 00        4967            db 0x00
016D           4968   __str_18:
016D 41542B50  4969            db 'AT+POWE'
     4F5745
0174 0D        4970            db 0x0D
0175 0A        4971            db 0x0A
0176 00        4972            db 0x00
0177           4973   __str_19:
0177 41542B43  4974            db 'AT+CLSS'
     4C5353
017E 0D        4975            db 0x0D
017F 0A        4976            db 0x0A
0180 00        4977            db 0x00
0181           4978   __str_20:
0181 41542B44  4979            db 'AT+DVIDEF11'
     56494445
     463131
018C 0D        4980            db 0x0D
018D 0A        4981            db 0x0A
018E 00        4982            db 0x00
018F           4983   __str_21:
018F 4D617374  4984            db 'Master says: %s'
     65722073
     6179733A
     202573
019E 0D        4985            db 0x0D
019F 0A        4986            db 0x0A
01A0 00        4987            db 0x00
01A1           4988   __str_22:
01A1 25303364  4989            db '%03d,%03d,%c,%01d'
     2C253033
     642C2563
     2C253031
     64
01B2 00        4990            db 0x00
01B3           4991   __str_23:
01B3 4A6F7973  4992            db 'Joystick Received: Vx = %d, Vy = %d, Order = %c, Auto = %d'
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25642C20
     5679203D
     2025642C
     204F7264
     6572203D
     2025632C
     20417574
     6F203D20
     2564
01ED 0D        4993            db 0x0D
01EE 0A        4994            db 0x0A
01EF 00        4995            db 0x00
01F0           4996   __str_24:
01F0 2A2A2A20  4997            db '*** BAD MESSAGE ***: %s'
     42414420
     4D455353
     41474520
     2A2A2A3A
     202573
0207 0D        4998            db 0x0D
0208 0A        4999            db 0x0A
0209 00        5000            db 0x00
020A           5001   __str_25:
020A 302C3030  5002            db '0,00,%04ld,%05d,%03d'
     2C253034
     6C642C25
     3035642C
     25303364
021E 0A        5003            db 0x0A
021F 00        5004            db 0x00
0220           5005   __str_26:
0220 2573      5006            db '%s'
0222 0D        5007            db 0x0D
0223 0A        5008            db 0x0A
0224 00        5009            db 0x00
0225           5010   
0096           5011            CSEG
0096           5012   
0096           5013   end
