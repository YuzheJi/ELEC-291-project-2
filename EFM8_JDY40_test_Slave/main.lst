0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Mar 25 15:29:53 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _check_bound_PARM_2
0000             28            public _InitPinADC_PARM_2
0000             29            public _main
0000             30            public _Init_all
0000             31            public _check_bound
0000             32            public _servo_pick
0000             33            public _Timer5_ISR
0000             34            public _ADC_at_Pin
0000             35            public _InitPinADC
0000             36            public _InitADC
0000             37            public _Set_Pin_Input
0000             38            public _Set_Pin_Output
0000             39            public _ReceptionOff
0000             40            public _SendATCommand
0000             41            public _waitms_or_RI1
0000             42            public _RXU1
0000             43            public _getstr1
0000             44            public _getchar1_with_timeout
0000             45            public _getchar1
0000             46            public _sendstr1
0000             47            public _putchar1
0000             48            public _UART1_Init
0000             49            public _waitms
0000             50            public _Timer3us
0000             51            public __c51_external_startup
0000             52            public _buff
0000             53            public _getstr1_PARM_2
0000             54            public _d2
0000             55            public _d1
0000             56            public _fre_mea_count
0000             57            public _freq100
0000             58            public _vy
0000             59            public _vx
0000             60            public _vy_thres
0000             61            public _vx_thres
0000             62            public _servo_arm
0000             63            public _servo_base
0000             64            public _R_motor_dir
0000             65            public _L_motor_dir
0000             66            public _pwm_right
0000             67            public _pwm_left
0000             68            public _servo_counter
0000             69            public _pwm_counter
0000             70   ;--------------------------------------------------------
0000             71   ; Special Function Registers
0000             72   ;--------------------------------------------------------
0000             73   _ACC            DATA 0xe0
0000             74   _ADC0ASAH       DATA 0xb6
0000             75   _ADC0ASAL       DATA 0xb5
0000             76   _ADC0ASCF       DATA 0xa1
0000             77   _ADC0ASCT       DATA 0xc7
0000             78   _ADC0CF0        DATA 0xbc
0000             79   _ADC0CF1        DATA 0xb9
0000             80   _ADC0CF2        DATA 0xdf
0000             81   _ADC0CN0        DATA 0xe8
0000             82   _ADC0CN1        DATA 0xb2
0000             83   _ADC0CN2        DATA 0xb3
0000             84   _ADC0GTH        DATA 0xc4
0000             85   _ADC0GTL        DATA 0xc3
0000             86   _ADC0H          DATA 0xbe
0000             87   _ADC0L          DATA 0xbd
0000             88   _ADC0LTH        DATA 0xc6
0000             89   _ADC0LTL        DATA 0xc5
0000             90   _ADC0MX         DATA 0xbb
0000             91   _B              DATA 0xf0
0000             92   _CKCON0         DATA 0x8e
0000             93   _CKCON1         DATA 0xa6
0000             94   _CLEN0          DATA 0xc6
0000             95   _CLIE0          DATA 0xc7
0000             96   _CLIF0          DATA 0xe8
0000             97   _CLKSEL         DATA 0xa9
0000             98   _CLOUT0         DATA 0xd1
0000             99   _CLU0CF         DATA 0xb1
0000            100   _CLU0FN         DATA 0xaf
0000            101   _CLU0MX         DATA 0x84
0000            102   _CLU1CF         DATA 0xb3
0000            103   _CLU1FN         DATA 0xb2
0000            104   _CLU1MX         DATA 0x85
0000            105   _CLU2CF         DATA 0xb6
0000            106   _CLU2FN         DATA 0xb5
0000            107   _CLU2MX         DATA 0x91
0000            108   _CLU3CF         DATA 0xbf
0000            109   _CLU3FN         DATA 0xbe
0000            110   _CLU3MX         DATA 0xae
0000            111   _CMP0CN0        DATA 0x9b
0000            112   _CMP0CN1        DATA 0x99
0000            113   _CMP0MD         DATA 0x9d
0000            114   _CMP0MX         DATA 0x9f
0000            115   _CMP1CN0        DATA 0xbf
0000            116   _CMP1CN1        DATA 0xac
0000            117   _CMP1MD         DATA 0xab
0000            118   _CMP1MX         DATA 0xaa
0000            119   _CRC0CN0        DATA 0xce
0000            120   _CRC0CN1        DATA 0x86
0000            121   _CRC0CNT        DATA 0xd3
0000            122   _CRC0DAT        DATA 0xcb
0000            123   _CRC0FLIP       DATA 0xcf
0000            124   _CRC0IN         DATA 0xca
0000            125   _CRC0ST         DATA 0xd2
0000            126   _DAC0CF0        DATA 0x91
0000            127   _DAC0CF1        DATA 0x92
0000            128   _DAC0H          DATA 0x85
0000            129   _DAC0L          DATA 0x84
0000            130   _DAC1CF0        DATA 0x93
0000            131   _DAC1CF1        DATA 0x94
0000            132   _DAC1H          DATA 0x8a
0000            133   _DAC1L          DATA 0x89
0000            134   _DAC2CF0        DATA 0x95
0000            135   _DAC2CF1        DATA 0x96
0000            136   _DAC2H          DATA 0x8c
0000            137   _DAC2L          DATA 0x8b
0000            138   _DAC3CF0        DATA 0x9a
0000            139   _DAC3CF1        DATA 0x9c
0000            140   _DAC3H          DATA 0x8e
0000            141   _DAC3L          DATA 0x8d
0000            142   _DACGCF0        DATA 0x88
0000            143   _DACGCF1        DATA 0x98
0000            144   _DACGCF2        DATA 0xa2
0000            145   _DERIVID        DATA 0xad
0000            146   _DEVICEID       DATA 0xb5
0000            147   _DPH            DATA 0x83
0000            148   _DPL            DATA 0x82
0000            149   _EIE1           DATA 0xe6
0000            150   _EIE2           DATA 0xf3
0000            151   _EIP1           DATA 0xbb
0000            152   _EIP1H          DATA 0xee
0000            153   _EIP2           DATA 0xed
0000            154   _EIP2H          DATA 0xf6
0000            155   _EMI0CN         DATA 0xe7
0000            156   _FLKEY          DATA 0xb7
0000            157   _HFO0CAL        DATA 0xc7
0000            158   _HFO1CAL        DATA 0xd6
0000            159   _HFOCN          DATA 0xef
0000            160   _I2C0ADM        DATA 0xff
0000            161   _I2C0CN0        DATA 0xba
0000            162   _I2C0DIN        DATA 0xbc
0000            163   _I2C0DOUT       DATA 0xbb
0000            164   _I2C0FCN0       DATA 0xad
0000            165   _I2C0FCN1       DATA 0xab
0000            166   _I2C0FCT        DATA 0xf5
0000            167   _I2C0SLAD       DATA 0xbd
0000            168   _I2C0STAT       DATA 0xb9
0000            169   _IE             DATA 0xa8
0000            170   _IP             DATA 0xb8
0000            171   _IPH            DATA 0xf2
0000            172   _IT01CF         DATA 0xe4
0000            173   _LFO0CN         DATA 0xb1
0000            174   _P0             DATA 0x80
0000            175   _P0MASK         DATA 0xfe
0000            176   _P0MAT          DATA 0xfd
0000            177   _P0MDIN         DATA 0xf1
0000            178   _P0MDOUT        DATA 0xa4
0000            179   _P0SKIP         DATA 0xd4
0000            180   _P1             DATA 0x90
0000            181   _P1MASK         DATA 0xee
0000            182   _P1MAT          DATA 0xed
0000            183   _P1MDIN         DATA 0xf2
0000            184   _P1MDOUT        DATA 0xa5
0000            185   _P1SKIP         DATA 0xd5
0000            186   _P2             DATA 0xa0
0000            187   _P2MASK         DATA 0xfc
0000            188   _P2MAT          DATA 0xfb
0000            189   _P2MDIN         DATA 0xf3
0000            190   _P2MDOUT        DATA 0xa6
0000            191   _P2SKIP         DATA 0xcc
0000            192   _P3             DATA 0xb0
0000            193   _P3MDIN         DATA 0xf4
0000            194   _P3MDOUT        DATA 0x9c
0000            195   _PCA0CENT       DATA 0x9e
0000            196   _PCA0CLR        DATA 0x9c
0000            197   _PCA0CN0        DATA 0xd8
0000            198   _PCA0CPH0       DATA 0xfc
0000            199   _PCA0CPH1       DATA 0xea
0000            200   _PCA0CPH2       DATA 0xec
0000            201   _PCA0CPH3       DATA 0xf5
0000            202   _PCA0CPH4       DATA 0x85
0000            203   _PCA0CPH5       DATA 0xde
0000            204   _PCA0CPL0       DATA 0xfb
0000            205   _PCA0CPL1       DATA 0xe9
0000            206   _PCA0CPL2       DATA 0xeb
0000            207   _PCA0CPL3       DATA 0xf4
0000            208   _PCA0CPL4       DATA 0x84
0000            209   _PCA0CPL5       DATA 0xdd
0000            210   _PCA0CPM0       DATA 0xda
0000            211   _PCA0CPM1       DATA 0xdb
0000            212   _PCA0CPM2       DATA 0xdc
0000            213   _PCA0CPM3       DATA 0xae
0000            214   _PCA0CPM4       DATA 0xaf
0000            215   _PCA0CPM5       DATA 0xcc
0000            216   _PCA0H          DATA 0xfa
0000            217   _PCA0L          DATA 0xf9
0000            218   _PCA0MD         DATA 0xd9
0000            219   _PCA0POL        DATA 0x96
0000            220   _PCA0PWM        DATA 0xf7
0000            221   _PCON0          DATA 0x87
0000            222   _PCON1          DATA 0xcd
0000            223   _PFE0CN         DATA 0xc1
0000            224   _PRTDRV         DATA 0xf6
0000            225   _PSCTL          DATA 0x8f
0000            226   _PSTAT0         DATA 0xaa
0000            227   _PSW            DATA 0xd0
0000            228   _REF0CN         DATA 0xd1
0000            229   _REG0CN         DATA 0xc9
0000            230   _REVID          DATA 0xb6
0000            231   _RSTSRC         DATA 0xef
0000            232   _SBCON1         DATA 0x94
0000            233   _SBRLH1         DATA 0x96
0000            234   _SBRLL1         DATA 0x95
0000            235   _SBUF           DATA 0x99
0000            236   _SBUF0          DATA 0x99
0000            237   _SBUF1          DATA 0x92
0000            238   _SCON           DATA 0x98
0000            239   _SCON0          DATA 0x98
0000            240   _SCON1          DATA 0xc8
0000            241   _SFRPAGE        DATA 0xa7
0000            242   _SFRPGCN        DATA 0xbc
0000            243   _SFRSTACK       DATA 0xd7
0000            244   _SMB0ADM        DATA 0xd6
0000            245   _SMB0ADR        DATA 0xd7
0000            246   _SMB0CF         DATA 0xc1
0000            247   _SMB0CN0        DATA 0xc0
0000            248   _SMB0DAT        DATA 0xc2
0000            249   _SMB0FCN0       DATA 0xc3
0000            250   _SMB0FCN1       DATA 0xc4
0000            251   _SMB0FCT        DATA 0xef
0000            252   _SMB0RXLN       DATA 0xc5
0000            253   _SMB0TC         DATA 0xac
0000            254   _SMOD1          DATA 0x93
0000            255   _SP             DATA 0x81
0000            256   _SPI0CFG        DATA 0xa1
0000            257   _SPI0CKR        DATA 0xa2
0000            258   _SPI0CN0        DATA 0xf8
0000            259   _SPI0DAT        DATA 0xa3
0000            260   _SPI0FCN0       DATA 0x9a
0000            261   _SPI0FCN1       DATA 0x9b
0000            262   _SPI0FCT        DATA 0xf7
0000            263   _SPI0PCF        DATA 0xdf
0000            264   _TCON           DATA 0x88
0000            265   _TH0            DATA 0x8c
0000            266   _TH1            DATA 0x8d
0000            267   _TL0            DATA 0x8a
0000            268   _TL1            DATA 0x8b
0000            269   _TMOD           DATA 0x89
0000            270   _TMR2CN0        DATA 0xc8
0000            271   _TMR2CN1        DATA 0xfd
0000            272   _TMR2H          DATA 0xcf
0000            273   _TMR2L          DATA 0xce
0000            274   _TMR2RLH        DATA 0xcb
0000            275   _TMR2RLL        DATA 0xca
0000            276   _TMR3CN0        DATA 0x91
0000            277   _TMR3CN1        DATA 0xfe
0000            278   _TMR3H          DATA 0x95
0000            279   _TMR3L          DATA 0x94
0000            280   _TMR3RLH        DATA 0x93
0000            281   _TMR3RLL        DATA 0x92
0000            282   _TMR4CN0        DATA 0x98
0000            283   _TMR4CN1        DATA 0xff
0000            284   _TMR4H          DATA 0xa5
0000            285   _TMR4L          DATA 0xa4
0000            286   _TMR4RLH        DATA 0xa3
0000            287   _TMR4RLL        DATA 0xa2
0000            288   _TMR5CN0        DATA 0xc0
0000            289   _TMR5CN1        DATA 0xf1
0000            290   _TMR5H          DATA 0xd5
0000            291   _TMR5L          DATA 0xd4
0000            292   _TMR5RLH        DATA 0xd3
0000            293   _TMR5RLL        DATA 0xd2
0000            294   _UART0PCF       DATA 0xd9
0000            295   _UART1FCN0      DATA 0x9d
0000            296   _UART1FCN1      DATA 0xd8
0000            297   _UART1FCT       DATA 0xfa
0000            298   _UART1LIN       DATA 0x9e
0000            299   _UART1PCF       DATA 0xda
0000            300   _VDM0CN         DATA 0xff
0000            301   _WDTCN          DATA 0x97
0000            302   _XBR0           DATA 0xe1
0000            303   _XBR1           DATA 0xe2
0000            304   _XBR2           DATA 0xe3
0000            305   _XOSC0CN        DATA 0x86
0000            306   _DPTR           DATA 0x8382
0000            307   _TMR2RL         DATA 0xcbca
0000            308   _TMR3RL         DATA 0x9392
0000            309   _TMR4RL         DATA 0xa3a2
0000            310   _TMR5RL         DATA 0xd3d2
0000            311   _TMR0           DATA 0x8c8a
0000            312   _TMR1           DATA 0x8d8b
0000            313   _TMR2           DATA 0xcfce
0000            314   _TMR3           DATA 0x9594
0000            315   _TMR4           DATA 0xa5a4
0000            316   _TMR5           DATA 0xd5d4
0000            317   _SBRL1          DATA 0x9695
0000            318   _PCA0           DATA 0xfaf9
0000            319   _PCA0CP0        DATA 0xfcfb
0000            320   _PCA0CP1        DATA 0xeae9
0000            321   _PCA0CP2        DATA 0xeceb
0000            322   _PCA0CP3        DATA 0xf5f4
0000            323   _PCA0CP4        DATA 0x8584
0000            324   _PCA0CP5        DATA 0xdedd
0000            325   _ADC0ASA        DATA 0xb6b5
0000            326   _ADC0GT         DATA 0xc4c3
0000            327   _ADC0           DATA 0xbebd
0000            328   _ADC0LT         DATA 0xc6c5
0000            329   _DAC0           DATA 0x8584
0000            330   _DAC1           DATA 0x8a89
0000            331   _DAC2           DATA 0x8c8b
0000            332   _DAC3           DATA 0x8e8d
0000            333   ;--------------------------------------------------------
0000            334   ; special function bits
0000            335   ;--------------------------------------------------------
0000            336   _ACC_0          BIT 0xe0
0000            337   _ACC_1          BIT 0xe1
0000            338   _ACC_2          BIT 0xe2
0000            339   _ACC_3          BIT 0xe3
0000            340   _ACC_4          BIT 0xe4
0000            341   _ACC_5          BIT 0xe5
0000            342   _ACC_6          BIT 0xe6
0000            343   _ACC_7          BIT 0xe7
0000            344   _TEMPE          BIT 0xe8
0000            345   _ADGN0          BIT 0xe9
0000            346   _ADGN1          BIT 0xea
0000            347   _ADWINT         BIT 0xeb
0000            348   _ADBUSY         BIT 0xec
0000            349   _ADINT          BIT 0xed
0000            350   _IPOEN          BIT 0xee
0000            351   _ADEN           BIT 0xef
0000            352   _B_0            BIT 0xf0
0000            353   _B_1            BIT 0xf1
0000            354   _B_2            BIT 0xf2
0000            355   _B_3            BIT 0xf3
0000            356   _B_4            BIT 0xf4
0000            357   _B_5            BIT 0xf5
0000            358   _B_6            BIT 0xf6
0000            359   _B_7            BIT 0xf7
0000            360   _C0FIF          BIT 0xe8
0000            361   _C0RIF          BIT 0xe9
0000            362   _C1FIF          BIT 0xea
0000            363   _C1RIF          BIT 0xeb
0000            364   _C2FIF          BIT 0xec
0000            365   _C2RIF          BIT 0xed
0000            366   _C3FIF          BIT 0xee
0000            367   _C3RIF          BIT 0xef
0000            368   _D1SRC0         BIT 0x88
0000            369   _D1SRC1         BIT 0x89
0000            370   _D1AMEN         BIT 0x8a
0000            371   _D01REFSL       BIT 0x8b
0000            372   _D3SRC0         BIT 0x8c
0000            373   _D3SRC1         BIT 0x8d
0000            374   _D3AMEN         BIT 0x8e
0000            375   _D23REFSL       BIT 0x8f
0000            376   _D0UDIS         BIT 0x98
0000            377   _D1UDIS         BIT 0x99
0000            378   _D2UDIS         BIT 0x9a
0000            379   _D3UDIS         BIT 0x9b
0000            380   _EX0            BIT 0xa8
0000            381   _ET0            BIT 0xa9
0000            382   _EX1            BIT 0xaa
0000            383   _ET1            BIT 0xab
0000            384   _ES0            BIT 0xac
0000            385   _ET2            BIT 0xad
0000            386   _ESPI0          BIT 0xae
0000            387   _EA             BIT 0xaf
0000            388   _PX0            BIT 0xb8
0000            389   _PT0            BIT 0xb9
0000            390   _PX1            BIT 0xba
0000            391   _PT1            BIT 0xbb
0000            392   _PS0            BIT 0xbc
0000            393   _PT2            BIT 0xbd
0000            394   _PSPI0          BIT 0xbe
0000            395   _P0_0           BIT 0x80
0000            396   _P0_1           BIT 0x81
0000            397   _P0_2           BIT 0x82
0000            398   _P0_3           BIT 0x83
0000            399   _P0_4           BIT 0x84
0000            400   _P0_5           BIT 0x85
0000            401   _P0_6           BIT 0x86
0000            402   _P0_7           BIT 0x87
0000            403   _P1_0           BIT 0x90
0000            404   _P1_1           BIT 0x91
0000            405   _P1_2           BIT 0x92
0000            406   _P1_3           BIT 0x93
0000            407   _P1_4           BIT 0x94
0000            408   _P1_5           BIT 0x95
0000            409   _P1_6           BIT 0x96
0000            410   _P1_7           BIT 0x97
0000            411   _P2_0           BIT 0xa0
0000            412   _P2_1           BIT 0xa1
0000            413   _P2_2           BIT 0xa2
0000            414   _P2_3           BIT 0xa3
0000            415   _P2_4           BIT 0xa4
0000            416   _P2_5           BIT 0xa5
0000            417   _P2_6           BIT 0xa6
0000            418   _P3_0           BIT 0xb0
0000            419   _P3_1           BIT 0xb1
0000            420   _P3_2           BIT 0xb2
0000            421   _P3_3           BIT 0xb3
0000            422   _P3_4           BIT 0xb4
0000            423   _P3_7           BIT 0xb7
0000            424   _CCF0           BIT 0xd8
0000            425   _CCF1           BIT 0xd9
0000            426   _CCF2           BIT 0xda
0000            427   _CCF3           BIT 0xdb
0000            428   _CCF4           BIT 0xdc
0000            429   _CCF5           BIT 0xdd
0000            430   _CR             BIT 0xde
0000            431   _CF             BIT 0xdf
0000            432   _PARITY         BIT 0xd0
0000            433   _F1             BIT 0xd1
0000            434   _OV             BIT 0xd2
0000            435   _RS0            BIT 0xd3
0000            436   _RS1            BIT 0xd4
0000            437   _F0             BIT 0xd5
0000            438   _AC             BIT 0xd6
0000            439   _CY             BIT 0xd7
0000            440   _RI             BIT 0x98
0000            441   _TI             BIT 0x99
0000            442   _RB8            BIT 0x9a
0000            443   _TB8            BIT 0x9b
0000            444   _REN            BIT 0x9c
0000            445   _CE             BIT 0x9d
0000            446   _SMODE          BIT 0x9e
0000            447   _RI1            BIT 0xc8
0000            448   _TI1            BIT 0xc9
0000            449   _RBX1           BIT 0xca
0000            450   _TBX1           BIT 0xcb
0000            451   _REN1           BIT 0xcc
0000            452   _PERR1          BIT 0xcd
0000            453   _OVR1           BIT 0xce
0000            454   _SI             BIT 0xc0
0000            455   _ACK            BIT 0xc1
0000            456   _ARBLOST        BIT 0xc2
0000            457   _ACKRQ          BIT 0xc3
0000            458   _STO            BIT 0xc4
0000            459   _STA            BIT 0xc5
0000            460   _TXMODE         BIT 0xc6
0000            461   _MASTER         BIT 0xc7
0000            462   _SPIEN          BIT 0xf8
0000            463   _TXNF           BIT 0xf9
0000            464   _NSSMD0         BIT 0xfa
0000            465   _NSSMD1         BIT 0xfb
0000            466   _RXOVRN         BIT 0xfc
0000            467   _MODF           BIT 0xfd
0000            468   _WCOL           BIT 0xfe
0000            469   _SPIF           BIT 0xff
0000            470   _IT0            BIT 0x88
0000            471   _IE0            BIT 0x89
0000            472   _IT1            BIT 0x8a
0000            473   _IE1            BIT 0x8b
0000            474   _TR0            BIT 0x8c
0000            475   _TF0            BIT 0x8d
0000            476   _TR1            BIT 0x8e
0000            477   _TF1            BIT 0x8f
0000            478   _T2XCLK0        BIT 0xc8
0000            479   _T2XCLK1        BIT 0xc9
0000            480   _TR2            BIT 0xca
0000            481   _T2SPLIT        BIT 0xcb
0000            482   _TF2CEN         BIT 0xcc
0000            483   _TF2LEN         BIT 0xcd
0000            484   _TF2L           BIT 0xce
0000            485   _TF2H           BIT 0xcf
0000            486   _T4XCLK0        BIT 0x98
0000            487   _T4XCLK1        BIT 0x99
0000            488   _TR4            BIT 0x9a
0000            489   _T4SPLIT        BIT 0x9b
0000            490   _TF4CEN         BIT 0x9c
0000            491   _TF4LEN         BIT 0x9d
0000            492   _TF4L           BIT 0x9e
0000            493   _TF4H           BIT 0x9f
0000            494   _T5XCLK0        BIT 0xc0
0000            495   _T5XCLK1        BIT 0xc1
0000            496   _TR5            BIT 0xc2
0000            497   _T5SPLIT        BIT 0xc3
0000            498   _TF5CEN         BIT 0xc4
0000            499   _TF5LEN         BIT 0xc5
0000            500   _TF5L           BIT 0xc6
0000            501   _TF5H           BIT 0xc7
0000            502   _RIE            BIT 0xd8
0000            503   _RXTO0          BIT 0xd9
0000            504   _RXTO1          BIT 0xda
0000            505   _RFRQ           BIT 0xdb
0000            506   _TIE            BIT 0xdc
0000            507   _TXHOLD         BIT 0xdd
0000            508   _TXNF1          BIT 0xde
0000            509   _TFRQ           BIT 0xdf
0000            510   ;--------------------------------------------------------
0000            511   ; overlayable register banks
0000            512   ;--------------------------------------------------------
0000            513            rbank0 segment data overlay
0000            514   ;--------------------------------------------------------
0000            515   ; overlayable bit register bank
0000            516   ;--------------------------------------------------------
0000            517            rseg BIT_BANK
0000            518   bits:
0000            519            ds 1
0001            520            b0 equ  bits.0 
0001            521            b1 equ  bits.1 
0001            522            b2 equ  bits.2 
0001            523            b3 equ  bits.3 
0001            524            b4 equ  bits.4 
0001            525            b5 equ  bits.5 
0001            526            b6 equ  bits.6 
0001            527            b7 equ  bits.7 
0001            528   ;--------------------------------------------------------
0001            529   ; internal ram data
0001            530   ;--------------------------------------------------------
0000            531            rseg R_DSEG
0000            532   _pwm_counter:
0000            533            ds 2
0002            534   _servo_counter:
0002            535            ds 2
0004            536   _pwm_left:
0004            537            ds 1
0005            538   _pwm_right:
0005            539            ds 1
0006            540   _L_motor_dir:
0006            541            ds 1
0007            542   _R_motor_dir:
0007            543            ds 1
0008            544   _servo_base:
0008            545            ds 1
0009            546   _servo_arm:
0009            547            ds 1
000A            548   _vx_thres:
000A            549            ds 2
000C            550   _vy_thres:
000C            551            ds 2
000E            552   _vx:
000E            553            ds 2
0010            554   _vy:
0010            555            ds 2
0012            556   _freq100:
0012            557            ds 2
0014            558   _fre_mea_count:
0014            559            ds 2
0016            560   _d1:
0016            561            ds 2
0018            562   _d2:
0018            563            ds 2
001A            564   _getstr1_PARM_2:
001A            565            ds 1
001B            566   _main_vx_error_1_133:
001B            567            ds 2
001D            568   _main_vy_error_1_133:
001D            569            ds 2
001F            570   _main_vx_err_1_133:
001F            571            ds 2
0021            572   _main_vy_err_1_133:
0021            573            ds 2
0023            574   _main_vx_1_133:
0023            575            ds 2
0025            576   _main_vy_1_133:
0025            577            ds 2
0027            578   _main_pick_1_133:
0027            579            ds 2
0029            580   ;--------------------------------------------------------
0029            581   ; overlayable items in internal ram 
0029            582   ;--------------------------------------------------------
0000            583            rseg    R_OSEG
0000            584            rseg    R_OSEG
0000            585            rseg    R_OSEG
0000            586            rseg    R_OSEG
0000            587            rseg    R_OSEG
0000            588            rseg    R_OSEG
0000            589   _InitPinADC_PARM_2:
0000            590            ds 1
0001            591            rseg    R_OSEG
0001            592            rseg    R_OSEG
0001            593   _check_bound_PARM_2:
0001            594            ds 2
0003            595   ;--------------------------------------------------------
0003            596   ; indirectly addressable internal ram data
0003            597   ;--------------------------------------------------------
0000            598            rseg R_ISEG
0000            599   _buff:
0000            600            ds 20
0014            601   ;--------------------------------------------------------
0014            602   ; absolute internal ram data
0014            603   ;--------------------------------------------------------
0000            604            DSEG
0000            605   ;--------------------------------------------------------
0000            606   ; bit data
0000            607   ;--------------------------------------------------------
0000            608            rseg R_BSEG
0000            609   ;--------------------------------------------------------
0000            610   ; paged external ram data
0000            611   ;--------------------------------------------------------
0000            612            rseg R_PSEG
0000            613   ;--------------------------------------------------------
0000            614   ; external ram data
0000            615   ;--------------------------------------------------------
0000            616            rseg R_XSEG
0000            617   ;--------------------------------------------------------
0000            618   ; absolute external ram data
0000            619   ;--------------------------------------------------------
0000            620            XSEG
0000            621   ;--------------------------------------------------------
0000            622   ; external initialized ram data
0000            623   ;--------------------------------------------------------
0000            624            rseg R_IXSEG
0000            625            rseg R_HOME
0000            626            rseg R_GSINIT
0000            627            rseg R_CSEG
0000            628   ;--------------------------------------------------------
0000            629   ; Reset entry point and interrupt vectors
0000            630   ;--------------------------------------------------------
0000            631            CSEG at 0x0000
0000 020000     632            ljmp    _crt0
0093            633            CSEG at 0x0093
0093 020000     634            ljmp    _Timer5_ISR
0096            635   ;--------------------------------------------------------
0096            636   ; global & static initialisations
0096            637   ;--------------------------------------------------------
0000            638            rseg R_HOME
0000            639            rseg R_GSINIT
0000            640            rseg R_GSINIT
0000            641   ;--------------------------------------------------------
0000            642   ; data variables initialization
0000            643   ;--------------------------------------------------------
0000            644            rseg R_DINIT
0000            645   ;        main.c:51: unsigned int pwm_counter = 0; 
0000 E4         646            clr     a
0001 F548       647            mov     _pwm_counter,a
0003 F549       648            mov     (_pwm_counter + 1),a
0005            649   ;        main.c:52: unsigned int servo_counter = 0; 
0005 E4         650            clr     a
0006 F508       651            mov     _servo_counter,a
0008 F509       652            mov     (_servo_counter + 1),a
000A            653   ;        main.c:53: unsigned char pwm_left = 0, pwm_right = 0; 
000A 75C800     654            mov     _pwm_left,#0x00
000D            655   ;        main.c:53: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
000D 758800     656            mov     _pwm_right,#0x00
0010            657   ;        main.c:54: unsigned char servo_base = 1, servo_arm = 1; 
0010 754801     658            mov     _L_motor_dir,#0x01
0013            659   ;        main.c:54: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
0013 750801     660            mov     _R_motor_dir,#0x01
0016            661   ;        main.c:55: unsigned char servo_base = 1, servo_arm = 1; 
0016 75C801     662            mov     _servo_base,#0x01
0019            663   ;        main.c:55: int vx_thres = 161, vy_thres = 166; 
0019 758801     664            mov     _servo_arm,#0x01
001C            665   ;        main.c:56: int vx = 0, vy = 0; 
001C 7548A1     666            mov     _vx_thres,#0xA1
001F E4         667            clr     a
0020 F549       668            mov     (_vx_thres + 1),a
0022            669   ;        main.c:56: int vx_thres = 161, vy_thres = 166; 
0022 7508A6     670            mov     _vy_thres,#0xA6
0025 E4         671            clr     a
0026 F509       672            mov     (_vy_thres + 1),a
0028            673   ;        main.c:57: int vx = 0, vy = 0; 
0028 E4         674            clr     a
0029 F5C8       675            mov     _vx,a
002B F5C9       676            mov     (_vx + 1),a
002D            677   ;        main.c:57: int freq100;
002D E4         678            clr     a
002E F588       679            mov     _vy,a
0030 F589       680            mov     (_vy + 1),a
0032            681   ;        main.c:59: unsigned int fre_mea_count = 0;
0032 E4         682            clr     a
0033 F508       683            mov     _fre_mea_count,a
0035 F509       684            mov     (_fre_mea_count + 1),a
0037            685            ; The linker places a 'ret' at the end of segment R_DINIT.
0037            686   ;--------------------------------------------------------
0037            687   ; code
0037            688   ;--------------------------------------------------------
0000            689            rseg R_CSEG
0000            690   ;------------------------------------------------------------
0000            691   ;Allocation info for local variables in function '_c51_external_startup'
0000            692   ;------------------------------------------------------------
0000            693   ;------------------------------------------------------------
0000            694   ;        main.c:63: char _c51_external_startup (void)
0000            695   ;        -----------------------------------------
0000            696   ;         function _c51_external_startup
0000            697   ;        -----------------------------------------
0000            698   __c51_external_startup:
0000            699            using   0
0000            700   ;        main.c:66: SFRPAGE = 0x00;
0000 75A700     701            mov     _SFRPAGE,#0x00
0003            702   ;        main.c:67: WDTCN = 0xDE; //First key
0003 7597DE     703            mov     _WDTCN,#0xDE
0006            704   ;        main.c:68: WDTCN = 0xAD; //Second key
0006 7597AD     705            mov     _WDTCN,#0xAD
0009            706   ;        main.c:70: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     707            mov     _VDM0CN,#0x80
000C            708   ;        main.c:71: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     709            mov     _RSTSRC,#0x06
000F            710   ;        main.c:78: SFRPAGE = 0x10;
000F 75A710     711            mov     _SFRPAGE,#0x10
0012            712   ;        main.c:79: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     713            mov     _PFE0CN,#0x20
0015            714   ;        main.c:80: SFRPAGE = 0x00;
0015 75A700     715            mov     _SFRPAGE,#0x00
0018            716   ;        main.c:101: CLKSEL = 0x00;
0018 75A900     717            mov     _CLKSEL,#0x00
001B            718   ;        main.c:102: CLKSEL = 0x00;
001B 75A900     719            mov     _CLKSEL,#0x00
001E            720   ;        main.c:103: while ((CLKSEL & 0x80) == 0);
001E            721   L002001?:
001E E5A9       722            mov     a,_CLKSEL
0020 30E798     723            jnb     acc.7,L002001?
0023            724   ;        main.c:104: CLKSEL = 0x03;
0023 75A903     725            mov     _CLKSEL,#0x03
0026            726   ;        main.c:105: CLKSEL = 0x03;
0026 75A903     727            mov     _CLKSEL,#0x03
0029            728   ;        main.c:106: while ((CLKSEL & 0x80) == 0);
0029            729   L002004?:
0029 E5A9       730            mov     a,_CLKSEL
002B 30E718     731            jnb     acc.7,L002004?
002E            732   ;        main.c:111: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     733            orl     _P0MDOUT,#0x11
0031            734   ;        main.c:112: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     735            orl     _P2MDOUT,#0x01
0034            736   ;        main.c:113: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     737            mov     _XBR0,#0x01
0037            738   ;        main.c:114: XBR1     = 0X00;
0037 75E200     739            mov     _XBR1,#0x00
003A            740   ;        main.c:115: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     741            mov     _XBR2,#0x41
003D            742   ;        main.c:121: SCON0 = 0x10;
003D 759810     743            mov     _SCON0,#0x10
0040            744   ;        main.c:122: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     745            mov     _TH1,#0xE6
0043            746   ;        main.c:123: TL1 = TH1;      // Init Timer1
0043 858D8B     747            mov     _TL1,_TH1
0046            748   ;        main.c:124: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     749            anl     _TMOD,#0x0F
0049            750   ;        main.c:125: TMOD |=  0x20;                       
0049 438920     751            orl     _TMOD,#0x20
004C            752   ;        main.c:126: TR1 = 1; // START Timer1
004C D28E       753            setb    _TR1
004E            754   ;        main.c:127: TI = 1;  // Indicate TX0 ready
004E D299       755            setb    _TI
0050            756   ;        main.c:129: P2_0=1; // 'set' pin to 1 is normal operation mode.
0050 D2A0       757            setb    _P2_0
0052            758   ;        main.c:132: SFRPAGE=0x10;
0052 75A710     759            mov     _SFRPAGE,#0x10
0055            760   ;        main.c:133: TMR5CN0=0x00;
0055 75C000     761            mov     _TMR5CN0,#0x00
0058            762   ;        main.c:134: TMR5=0xffff;   // Set to reload immediately
0058 75D4FF     763            mov     _TMR5,#0xFF
005B 75D5FF     764            mov     (_TMR5 >> 8),#0xFF
005E            765   ;        main.c:135: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
005E 43F308     766            orl     _EIE2,#0x08
0061            767   ;        main.c:136: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0061 D2C2       768            setb    _TR5
0063            769   ;        main.c:139: EA=1;  // Enable global interrupts
0063 D2AF       770            setb    _EA
0065            771   ;        main.c:140: SFRPAGE=0x00;
0065 75A700     772            mov     _SFRPAGE,#0x00
0068            773   ;        main.c:142: return 0;
0068 758200     774            mov     dpl,#0x00
006B 22         775            ret
006C            776   ;------------------------------------------------------------
006C            777   ;Allocation info for local variables in function 'Timer3us'
006C            778   ;------------------------------------------------------------
006C            779   ;us                        Allocated to registers r2 
006C            780   ;i                         Allocated to registers r3 
006C            781   ;------------------------------------------------------------
006C            782   ;        main.c:146: void Timer3us(unsigned char us)
006C            783   ;        -----------------------------------------
006C            784   ;         function Timer3us
006C            785   ;        -----------------------------------------
006C            786   _Timer3us:
006C AA82       787            mov     r2,dpl
006E            788   ;        main.c:151: CKCON0|=0b_0100_0000;
006E 438E40     789            orl     _CKCON0,#0x40
0071            790   ;        main.c:153: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0071 7592B8     791            mov     _TMR3RL,#0xB8
0074 7593FF     792            mov     (_TMR3RL >> 8),#0xFF
0077            793   ;        main.c:154: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0077 859294     794            mov     _TMR3,_TMR3RL
007A 859395     795            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007D            796   ;        main.c:156: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007D 759104     797            mov     _TMR3CN0,#0x04
0080            798   ;        main.c:157: for (i = 0; i < us; i++)       // Count <us> overflows
0080 7B00       799            mov     r3,#0x00
0082            800   L003004?:
0082 C3         801            clr     c
0083 EB         802            mov     a,r3
0084 9A         803            subb    a,r2
0085 5000       804            jnc     L003007?
0087            805   ;        main.c:159: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0087            806   L003001?:
0087 E591       807            mov     a,_TMR3CN0
0089 30E718     808            jnb     acc.7,L003001?
008C            809   ;        main.c:160: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008C 53917F     810            anl     _TMR3CN0,#0x7F
008F            811   ;        main.c:157: for (i = 0; i < us; i++)       // Count <us> overflows
008F 0B         812            inc     r3
0090 8000       813            sjmp    L003004?
0092            814   L003007?:
0092            815   ;        main.c:162: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0092 759100     816            mov     _TMR3CN0,#0x00
0095 22         817            ret
0096            818   ;------------------------------------------------------------
0096            819   ;Allocation info for local variables in function 'waitms'
0096            820   ;------------------------------------------------------------
0096            821   ;ms                        Allocated to registers r2 r3 
0096            822   ;j                         Allocated to registers r4 r5 
0096            823   ;k                         Allocated to registers r6 
0096            824   ;------------------------------------------------------------
0096            825   ;        main.c:165: void waitms (unsigned int ms)
0096            826   ;        -----------------------------------------
0096            827   ;         function waitms
0096            828   ;        -----------------------------------------
0096            829   _waitms:
0096 AA82       830            mov     r2,dpl
0098 AB83       831            mov     r3,dph
009A            832   ;        main.c:169: for(j=0; j<ms; j++)
009A 7C00       833            mov     r4,#0x00
009C 7D00       834            mov     r5,#0x00
009E            835   L004005?:
009E C3         836            clr     c
009F EC         837            mov     a,r4
00A0 9A         838            subb    a,r2
00A1 ED         839            mov     a,r5
00A2 9B         840            subb    a,r3
00A3 5000       841            jnc     L004009?
00A5            842   ;        main.c:170: for (k=0; k<4; k++) Timer3us(250);
00A5 7E00       843            mov     r6,#0x00
00A7            844   L004001?:
00A7 BE0458     845            cjne    r6,#0x04,L004018?
00AA            846   L004018?:
00AA 5000       847            jnc     L004007?
00AC 7582FA     848            mov     dpl,#0xFA
00AF C002       849            push    ar2
00B1 C003       850            push    ar3
00B3 C004       851            push    ar4
00B5 C005       852            push    ar5
00B7 C006       853            push    ar6
00B9 120000     854            lcall   _Timer3us
00BC D006       855            pop     ar6
00BE D005       856            pop     ar5
00C0 D004       857            pop     ar4
00C2 D003       858            pop     ar3
00C4 D002       859            pop     ar2
00C6 0E         860            inc     r6
00C7 8000       861            sjmp    L004001?
00C9            862   L004007?:
00C9            863   ;        main.c:169: for(j=0; j<ms; j++)
00C9 0C         864            inc     r4
00CA BC0098     865            cjne    r4,#0x00,L004005?
00CD 0D         866            inc     r5
00CE 8000       867            sjmp    L004005?
00D0            868   L004009?:
00D0 22         869            ret
00D1            870   ;------------------------------------------------------------
00D1            871   ;Allocation info for local variables in function 'UART1_Init'
00D1            872   ;------------------------------------------------------------
00D1            873   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00D1            874   ;------------------------------------------------------------
00D1            875   ;        main.c:173: void UART1_Init (unsigned long baudrate)
00D1            876   ;        -----------------------------------------
00D1            877   ;         function UART1_Init
00D1            878   ;        -----------------------------------------
00D1            879   _UART1_Init:
00D1 AA82       880            mov     r2,dpl
00D3 AB83       881            mov     r3,dph
00D5 ACF0       882            mov     r4,b
00D7 FD         883            mov     r5,a
00D8            884   ;        main.c:175: SFRPAGE = 0x20;
00D8 75A720     885            mov     _SFRPAGE,#0x20
00DB            886   ;        main.c:176: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00DB 75930C     887            mov     _SMOD1,#0x0C
00DE            888   ;        main.c:177: SCON1 = 0x10;
00DE 75C810     889            mov     _SCON1,#0x10
00E1            890   ;        main.c:178: SBCON1 =0x00;   // disable baud rate generator
00E1 759400     891            mov     _SBCON1,#0x00
00E4            892   ;        main.c:179: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00E4 8A00       893            mov     __divulong_PARM_2,r2
00E6 8B01       894            mov     (__divulong_PARM_2 + 1),r3
00E8 8C02       895            mov     (__divulong_PARM_2 + 2),r4
00EA 8D03       896            mov     (__divulong_PARM_2 + 3),r5
00EC 90A200     897            mov     dptr,#0xA200
00EF 75F04A     898            mov     b,#0x4A
00F2 7404       899            mov     a,#0x04
00F4 120000     900            lcall   __divulong
00F7 AA82       901            mov     r2,dpl
00F9 AB83       902            mov     r3,dph
00FB ACF0       903            mov     r4,b
00FD FD         904            mov     r5,a
00FE 750018     905            mov     __divulong_PARM_2,#0x18
0101 E4         906            clr     a
0102 F501       907            mov     (__divulong_PARM_2 + 1),a
0104 F502       908            mov     (__divulong_PARM_2 + 2),a
0106 F503       909            mov     (__divulong_PARM_2 + 3),a
0108 8A82       910            mov     dpl,r2
010A 8B83       911            mov     dph,r3
010C 8CF0       912            mov     b,r4
010E ED         913            mov     a,r5
010F 120000     914            lcall   __divulong
0112 AA82       915            mov     r2,dpl
0114 AB83       916            mov     r3,dph
0116 ACF0       917            mov     r4,b
0118 FD         918            mov     r5,a
0119 E4         919            clr     a
011A C3         920            clr     c
011B 9A         921            subb    a,r2
011C FA         922            mov     r2,a
011D E4         923            clr     a
011E 9B         924            subb    a,r3
011F FB         925            mov     r3,a
0120 7401       926            mov     a,#0x01
0122 9C         927            subb    a,r4
0123 E4         928            clr     a
0124 9D         929            subb    a,r5
0125 8A95       930            mov     _SBRL1,r2
0127 8B96       931            mov     (_SBRL1 >> 8),r3
0129            932   ;        main.c:180: TI1 = 1; // indicate ready for TX
0129 D2C9       933            setb    _TI1
012B            934   ;        main.c:181: SBCON1 |= 0x40;   // enable baud rate generator
012B 439440     935            orl     _SBCON1,#0x40
012E            936   ;        main.c:182: SFRPAGE = 0x00;
012E 75A700     937            mov     _SFRPAGE,#0x00
0131 22         938            ret
0132            939   ;------------------------------------------------------------
0132            940   ;Allocation info for local variables in function 'putchar1'
0132            941   ;------------------------------------------------------------
0132            942   ;c                         Allocated to registers r2 
0132            943   ;------------------------------------------------------------
0132            944   ;        main.c:185: void putchar1 (char c) 
0132            945   ;        -----------------------------------------
0132            946   ;         function putchar1
0132            947   ;        -----------------------------------------
0132            948   _putchar1:
0132 AA82       949            mov     r2,dpl
0134            950   ;        main.c:187: SFRPAGE = 0x20;
0134 75A720     951            mov     _SFRPAGE,#0x20
0137            952   ;        main.c:188: while (!TI1);
0137            953   L006001?:
0137            954   ;        main.c:189: TI1=0;
0137 10C9E8     955            jbc     _TI1,L006008?
013A 8000       956            sjmp    L006001?
013C            957   L006008?:
013C            958   ;        main.c:190: SBUF1 = c;
013C 8A92       959            mov     _SBUF1,r2
013E            960   ;        main.c:191: SFRPAGE = 0x00;
013E 75A700     961            mov     _SFRPAGE,#0x00
0141 22         962            ret
0142            963   ;------------------------------------------------------------
0142            964   ;Allocation info for local variables in function 'sendstr1'
0142            965   ;------------------------------------------------------------
0142            966   ;s                         Allocated to registers r2 r3 r4 
0142            967   ;------------------------------------------------------------
0142            968   ;        main.c:194: void sendstr1 (char * s)
0142            969   ;        -----------------------------------------
0142            970   ;         function sendstr1
0142            971   ;        -----------------------------------------
0142            972   _sendstr1:
0142 AA82       973            mov     r2,dpl
0144 AB83       974            mov     r3,dph
0146 ACF0       975            mov     r4,b
0148            976   ;        main.c:196: while(*s)
0148            977   L007001?:
0148 8A82       978            mov     dpl,r2
014A 8B83       979            mov     dph,r3
014C 8CF0       980            mov     b,r4
014E 120000     981            lcall   __gptrget
0151 FD         982            mov     r5,a
0152 6000       983            jz      L007004?
0154            984   ;        main.c:198: putchar1(*s);
0154 8D82       985            mov     dpl,r5
0156 C002       986            push    ar2
0158 C003       987            push    ar3
015A C004       988            push    ar4
015C 120000     989            lcall   _putchar1
015F D004       990            pop     ar4
0161 D003       991            pop     ar3
0163 D002       992            pop     ar2
0165            993   ;        main.c:199: s++;        
0165 0A         994            inc     r2
0166 BA0028     995            cjne    r2,#0x00,L007001?
0169 0B         996            inc     r3
016A 8000       997            sjmp    L007001?
016C            998   L007004?:
016C 22         999            ret
016D           1000   ;------------------------------------------------------------
016D           1001   ;Allocation info for local variables in function 'getchar1'
016D           1002   ;------------------------------------------------------------
016D           1003   ;c                         Allocated to registers 
016D           1004   ;------------------------------------------------------------
016D           1005   ;        main.c:203: char getchar1 (void)
016D           1006   ;        -----------------------------------------
016D           1007   ;         function getchar1
016D           1008   ;        -----------------------------------------
016D           1009   _getchar1:
016D           1010   ;        main.c:206: SFRPAGE = 0x20;
016D 75A720    1011            mov     _SFRPAGE,#0x20
0170           1012   ;        main.c:207: while (!RI1);
0170           1013   L008001?:
0170           1014   ;        main.c:208: RI1=0;
0170 10C828    1015            jbc     _RI1,L008008?
0173 8000      1016            sjmp    L008001?
0175           1017   L008008?:
0175           1018   ;        main.c:210: SCON1&=0b_0011_1111;
0175 53C83F    1019            anl     _SCON1,#0x3F
0178           1020   ;        main.c:211: c = SBUF1;
0178 859282    1021            mov     dpl,_SBUF1
017B           1022   ;        main.c:212: SFRPAGE = 0x00;
017B 75A700    1023            mov     _SFRPAGE,#0x00
017E           1024   ;        main.c:213: return (c);
017E 22        1025            ret
017F           1026   ;------------------------------------------------------------
017F           1027   ;Allocation info for local variables in function 'getchar1_with_timeout'
017F           1028   ;------------------------------------------------------------
017F           1029   ;c                         Allocated to registers 
017F           1030   ;timeout                   Allocated to registers r2 r3 
017F           1031   ;------------------------------------------------------------
017F           1032   ;        main.c:216: char getchar1_with_timeout (void)
017F           1033   ;        -----------------------------------------
017F           1034   ;         function getchar1_with_timeout
017F           1035   ;        -----------------------------------------
017F           1036   _getchar1_with_timeout:
017F           1037   ;        main.c:220: SFRPAGE = 0x20;
017F 75A720    1038            mov     _SFRPAGE,#0x20
0182           1039   ;        main.c:222: while (!RI1)
0182 7A00      1040            mov     r2,#0x00
0184 7B00      1041            mov     r3,#0x00
0186           1042   L009003?:
0186 20C8A8    1043            jb      _RI1,L009005?
0189           1044   ;        main.c:224: SFRPAGE = 0x00;
0189 75A700    1045            mov     _SFRPAGE,#0x00
018C           1046   ;        main.c:225: Timer3us(20);
018C 758214    1047            mov     dpl,#0x14
018F C002      1048            push    ar2
0191 C003      1049            push    ar3
0193 120000    1050            lcall   _Timer3us
0196 D003      1051            pop     ar3
0198 D002      1052            pop     ar2
019A           1053   ;        main.c:226: SFRPAGE = 0x20;
019A 75A720    1054            mov     _SFRPAGE,#0x20
019D           1055   ;        main.c:227: timeout++;
019D 0A        1056            inc     r2
019E BA00E8    1057            cjne    r2,#0x00,L009012?
01A1 0B        1058            inc     r3
01A2           1059   L009012?:
01A2           1060   ;        main.c:228: if(timeout==25000)
01A2 BAA868    1061            cjne    r2,#0xA8,L009003?
01A5 BB6168    1062            cjne    r3,#0x61,L009003?
01A8           1063   ;        main.c:230: SFRPAGE = 0x00;
01A8 75A700    1064            mov     _SFRPAGE,#0x00
01AB           1065   ;        main.c:231: return ('\n'); // Timeout after half second
01AB 75820A    1066            mov     dpl,#0x0A
01AE 22        1067            ret
01AF           1068   L009005?:
01AF           1069   ;        main.c:234: RI1=0;
01AF C2C8      1070            clr     _RI1
01B1           1071   ;        main.c:236: SCON1&=0b_0011_1111;
01B1 53C83F    1072            anl     _SCON1,#0x3F
01B4           1073   ;        main.c:237: c = SBUF1;
01B4 859282    1074            mov     dpl,_SBUF1
01B7           1075   ;        main.c:238: SFRPAGE = 0x00;
01B7 75A700    1076            mov     _SFRPAGE,#0x00
01BA           1077   ;        main.c:239: return (c);
01BA 22        1078            ret
01BB           1079   ;------------------------------------------------------------
01BB           1080   ;Allocation info for local variables in function 'getstr1'
01BB           1081   ;------------------------------------------------------------
01BB           1082   ;n                         Allocated with name '_getstr1_PARM_2'
01BB           1083   ;s                         Allocated to registers r2 r3 r4 
01BB           1084   ;c                         Allocated to registers r1 
01BB           1085   ;cnt                       Allocated to registers r5 
01BB           1086   ;------------------------------------------------------------
01BB           1087   ;        main.c:242: void getstr1 (char * s, unsigned char n)
01BB           1088   ;        -----------------------------------------
01BB           1089   ;         function getstr1
01BB           1090   ;        -----------------------------------------
01BB           1091   _getstr1:
01BB AA82      1092            mov     r2,dpl
01BD AB83      1093            mov     r3,dph
01BF ACF0      1094            mov     r4,b
01C1           1095   ;        main.c:248: while(1)
01C1 7D00      1096            mov     r5,#0x00
01C3 8A06      1097            mov     ar6,r2
01C5 8B07      1098            mov     ar7,r3
01C7 8C00      1099            mov     ar0,r4
01C9           1100   L010007?:
01C9           1101   ;        main.c:250: c=getchar1_with_timeout();
01C9 C002      1102            push    ar2
01CB C003      1103            push    ar3
01CD C004      1104            push    ar4
01CF C005      1105            push    ar5
01D1 C006      1106            push    ar6
01D3 C007      1107            push    ar7
01D5 C000      1108            push    ar0
01D7 120000    1109            lcall   _getchar1_with_timeout
01DA A982      1110            mov     r1,dpl
01DC D000      1111            pop     ar0
01DE D007      1112            pop     ar7
01E0 D006      1113            pop     ar6
01E2 D005      1114            pop     ar5
01E4 D004      1115            pop     ar4
01E6 D003      1116            pop     ar3
01E8 D002      1117            pop     ar2
01EA           1118   ;        main.c:251: if(c=='\n')
01EA B90A68    1119            cjne    r1,#0x0A,L010002?
01ED           1120   ;        main.c:253: *s=0;
01ED 8A82      1121            mov     dpl,r2
01EF 8B83      1122            mov     dph,r3
01F1 8CF0      1123            mov     b,r4
01F3 E4        1124            clr     a
01F4           1125   ;        main.c:254: return;
01F4 020000    1126            ljmp    __gptrput
01F7           1127   L010002?:
01F7           1128   ;        main.c:257: if (cnt<n)
01F7 C3        1129            clr     c
01F8 ED        1130            mov     a,r5
01F9 9548      1131            subb    a,_getstr1_PARM_2
01FB 5000      1132            jnc     L010004?
01FD           1133   ;        main.c:259: cnt++;
01FD 0D        1134            inc     r5
01FE           1135   ;        main.c:260: *s=c;
01FE 8E82      1136            mov     dpl,r6
0200 8F83      1137            mov     dph,r7
0202 88F0      1138            mov     b,r0
0204 E9        1139            mov     a,r1
0205 120000    1140            lcall   __gptrput
0208 A3        1141            inc     dptr
0209 AE82      1142            mov     r6,dpl
020B AF83      1143            mov     r7,dph
020D           1144   ;        main.c:261: s++;
020D 8E02      1145            mov     ar2,r6
020F 8F03      1146            mov     ar3,r7
0211 8804      1147            mov     ar4,r0
0213 8000      1148            sjmp    L010007?
0215           1149   L010004?:
0215           1150   ;        main.c:265: *s=0;
0215 8A82      1151            mov     dpl,r2
0217 8B83      1152            mov     dph,r3
0219 8CF0      1153            mov     b,r4
021B E4        1154            clr     a
021C           1155   ;        main.c:266: return;
021C 020000    1156            ljmp    __gptrput
021F           1157   ;------------------------------------------------------------
021F           1158   ;Allocation info for local variables in function 'RXU1'
021F           1159   ;------------------------------------------------------------
021F           1160   ;------------------------------------------------------------
021F           1161   ;        main.c:272: bit RXU1 (void)
021F           1162   ;        -----------------------------------------
021F           1163   ;         function RXU1
021F           1164   ;        -----------------------------------------
021F           1165   _RXU1:
021F           1166   ;        main.c:275: SFRPAGE = 0x20;
021F 75A720    1167            mov     _SFRPAGE,#0x20
0222           1168   ;        main.c:276: mybit=RI1;
0222 A2C8      1169            mov     c,_RI1
0224           1170   ;        main.c:277: SFRPAGE = 0x00;
0224 75A700    1171            mov     _SFRPAGE,#0x00
0227           1172   ;        main.c:278: return mybit;
0227 22        1173            ret
0228           1174   ;------------------------------------------------------------
0228           1175   ;Allocation info for local variables in function 'waitms_or_RI1'
0228           1176   ;------------------------------------------------------------
0228           1177   ;ms                        Allocated to registers r2 r3 
0228           1178   ;j                         Allocated to registers r4 r5 
0228           1179   ;k                         Allocated to registers r6 
0228           1180   ;------------------------------------------------------------
0228           1181   ;        main.c:281: void waitms_or_RI1 (unsigned int ms)
0228           1182   ;        -----------------------------------------
0228           1183   ;         function waitms_or_RI1
0228           1184   ;        -----------------------------------------
0228           1185   _waitms_or_RI1:
0228 AA82      1186            mov     r2,dpl
022A AB83      1187            mov     r3,dph
022C           1188   ;        main.c:285: for(j=0; j<ms; j++)
022C 7C00      1189            mov     r4,#0x00
022E 7D00      1190            mov     r5,#0x00
0230           1191   L012007?:
0230 C3        1192            clr     c
0231 EC        1193            mov     a,r4
0232 9A        1194            subb    a,r2
0233 ED        1195            mov     a,r5
0234 9B        1196            subb    a,r3
0235 5000      1197            jnc     L012011?
0237           1198   ;        main.c:287: for (k=0; k<4; k++)
0237 7E00      1199            mov     r6,#0x00
0239           1200   L012003?:
0239 BE04E8    1201            cjne    r6,#0x04,L012019?
023C           1202   L012019?:
023C 5000      1203            jnc     L012009?
023E           1204   ;        main.c:289: if(RXU1()) return;
023E C002      1205            push    ar2
0240 C003      1206            push    ar3
0242 C004      1207            push    ar4
0244 C005      1208            push    ar5
0246 C006      1209            push    ar6
0248 120000    1210            lcall   _RXU1
024B E4        1211            clr     a
024C 33        1212            rlc     a
024D D006      1213            pop     ar6
024F D005      1214            pop     ar5
0251 D004      1215            pop     ar4
0253 D003      1216            pop     ar3
0255 D002      1217            pop     ar2
0257 6000      1218            jz      L012002?
0259 22        1219            ret
025A           1220   L012002?:
025A           1221   ;        main.c:290: Timer3us(250);
025A 7582FA    1222            mov     dpl,#0xFA
025D C002      1223            push    ar2
025F C003      1224            push    ar3
0261 C004      1225            push    ar4
0263 C005      1226            push    ar5
0265 C006      1227            push    ar6
0267 120000    1228            lcall   _Timer3us
026A D006      1229            pop     ar6
026C D005      1230            pop     ar5
026E D004      1231            pop     ar4
0270 D003      1232            pop     ar3
0272 D002      1233            pop     ar2
0274           1234   ;        main.c:287: for (k=0; k<4; k++)
0274 0E        1235            inc     r6
0275 8000      1236            sjmp    L012003?
0277           1237   L012009?:
0277           1238   ;        main.c:285: for(j=0; j<ms; j++)
0277 0C        1239            inc     r4
0278 BC0028    1240            cjne    r4,#0x00,L012007?
027B 0D        1241            inc     r5
027C 8000      1242            sjmp    L012007?
027E           1243   L012011?:
027E 22        1244            ret
027F           1245   ;------------------------------------------------------------
027F           1246   ;Allocation info for local variables in function 'SendATCommand'
027F           1247   ;------------------------------------------------------------
027F           1248   ;s                         Allocated to registers r2 r3 r4 
027F           1249   ;------------------------------------------------------------
027F           1250   ;        main.c:295: void SendATCommand (char * s)
027F           1251   ;        -----------------------------------------
027F           1252   ;         function SendATCommand
027F           1253   ;        -----------------------------------------
027F           1254   _SendATCommand:
027F AA82      1255            mov     r2,dpl
0281 AB83      1256            mov     r3,dph
0283 ACF0      1257            mov     r4,b
0285           1258   ;        main.c:297: printf("Command: %s", s);
0285 C002      1259            push    ar2
0287 C003      1260            push    ar3
0289 C004      1261            push    ar4
028B C002      1262            push    ar2
028D C003      1263            push    ar3
028F C004      1264            push    ar4
0291 74A8      1265            mov     a,#__str_0
0293 C0E0      1266            push    acc
0295 74C4      1267            mov     a,#(__str_0 >> 8)
0297 C0E0      1268            push    acc
0299 7480      1269            mov     a,#0x80
029B C0E0      1270            push    acc
029D 120000    1271            lcall   _printf
02A0 E581      1272            mov     a,sp
02A2 24FA      1273            add     a,#0xfa
02A4 F581      1274            mov     sp,a
02A6           1275   ;        main.c:298: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02A6 C2A0      1276            clr     _P2_0
02A8           1277   ;        main.c:299: waitms(5);
02A8 900005    1278            mov     dptr,#0x0005
02AB 120000    1279            lcall   _waitms
02AE D004      1280            pop     ar4
02B0 D003      1281            pop     ar3
02B2 D002      1282            pop     ar2
02B4           1283   ;        main.c:300: sendstr1(s);
02B4 8A82      1284            mov     dpl,r2
02B6 8B83      1285            mov     dph,r3
02B8 8CF0      1286            mov     b,r4
02BA 120000    1287            lcall   _sendstr1
02BD           1288   ;        main.c:301: getstr1(buff, sizeof(buff)-1);
02BD 754813    1289            mov     _getstr1_PARM_2,#0x13
02C0 904508    1290            mov     dptr,#_buff
02C3 75F040    1291            mov     b,#0x40
02C6 120000    1292            lcall   _getstr1
02C9           1293   ;        main.c:302: waitms(10);
02C9 90000A    1294            mov     dptr,#0x000A
02CC 120000    1295            lcall   _waitms
02CF           1296   ;        main.c:303: P2_0=1; // 'set' pin to 1 is normal operation mode.
02CF D2A0      1297            setb    _P2_0
02D1           1298   ;        main.c:304: printf("Response: %s\r\n", buff);
02D1 7408      1299            mov     a,#_buff
02D3 C0E0      1300            push    acc
02D5 7445      1301            mov     a,#(_buff >> 8)
02D7 C0E0      1302            push    acc
02D9 7440      1303            mov     a,#0x40
02DB C0E0      1304            push    acc
02DD 7468      1305            mov     a,#__str_1
02DF C0E0      1306            push    acc
02E1 74C5      1307            mov     a,#(__str_1 >> 8)
02E3 C0E0      1308            push    acc
02E5 7480      1309            mov     a,#0x80
02E7 C0E0      1310            push    acc
02E9 120000    1311            lcall   _printf
02EC E581      1312            mov     a,sp
02EE 24FA      1313            add     a,#0xfa
02F0 F581      1314            mov     sp,a
02F2 22        1315            ret
02F3           1316   ;------------------------------------------------------------
02F3           1317   ;Allocation info for local variables in function 'ReceptionOff'
02F3           1318   ;------------------------------------------------------------
02F3           1319   ;------------------------------------------------------------
02F3           1320   ;        main.c:307: void ReceptionOff (void)
02F3           1321   ;        -----------------------------------------
02F3           1322   ;         function ReceptionOff
02F3           1323   ;        -----------------------------------------
02F3           1324   _ReceptionOff:
02F3           1325   ;        main.c:309: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02F3 C2A0      1326            clr     _P2_0
02F5           1327   ;        main.c:310: waitms(10);
02F5 90000A    1328            mov     dptr,#0x000A
02F8 120000    1329            lcall   _waitms
02FB           1330   ;        main.c:311: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
02FB 90C5A8    1331            mov     dptr,#__str_2
02FE 75F080    1332            mov     b,#0x80
0301 120000    1333            lcall   _sendstr1
0304           1334   ;        main.c:312: waitms(10);
0304 90000A    1335            mov     dptr,#0x000A
0307 120000    1336            lcall   _waitms
030A           1337   ;        main.c:314: SCON1&=0b_0011_1111;
030A 53C83F    1338            anl     _SCON1,#0x3F
030D           1339   ;        main.c:315: P2_0=1; // 'set' pin to 1 is normal operation mode.
030D D2A0      1340            setb    _P2_0
030F 22        1341            ret
0310           1342   ;------------------------------------------------------------
0310           1343   ;Allocation info for local variables in function 'Set_Pin_Output'
0310           1344   ;------------------------------------------------------------
0310           1345   ;pin                       Allocated to registers r2 
0310           1346   ;mask                      Allocated to registers r3 
0310           1347   ;------------------------------------------------------------
0310           1348   ;        main.c:318: void Set_Pin_Output (unsigned char pin)
0310           1349   ;        -----------------------------------------
0310           1350   ;         function Set_Pin_Output
0310           1351   ;        -----------------------------------------
0310           1352   _Set_Pin_Output:
0310 AA82      1353            mov     r2,dpl
0312           1354   ;        main.c:322: mask=(1<<(pin&0x7));
0312 7407      1355            mov     a,#0x07
0314 5A        1356            anl     a,r2
0315 F5F0      1357            mov     b,a
0317 05F0      1358            inc     b
0319 7401      1359            mov     a,#0x01
031B 8000      1360            sjmp    L015011?
031D           1361   L015009?:
031D 25E0      1362            add     a,acc
031F           1363   L015011?:
031F D5F028    1364            djnz    b,L015009?
0322 FB        1365            mov     r3,a
0323           1366   ;        main.c:323: switch(pin/0x10)
0323 EA        1367            mov     a,r2
0324 C4        1368            swap    a
0325 540F      1369            anl     a,#0x0f
0327 FA        1370            mov  r2,a
0328 24FC      1371            add     a,#0xff - 0x03
032A 4000      1372            jc      L015006?
032C EA        1373            mov     a,r2
032D 2A        1374            add     a,r2
032E 2A        1375            add     a,r2
032F 90C6A8    1376            mov     dptr,#L015013?
0332 73        1377            jmp     @a+dptr
0333           1378   L015013?:
0333 020000    1379            ljmp    L015001?
0336 020000    1380            ljmp    L015002?
0339 020000    1381            ljmp    L015003?
033C 020000    1382            ljmp    L015004?
033F           1383   ;        main.c:325: case 0: P0MDOUT |= mask; break;
033F           1384   L015001?:
033F EB        1385            mov     a,r3
0340 42A4      1386            orl     _P0MDOUT,a
0342           1387   ;        main.c:326: case 1: P1MDOUT |= mask; break;
0342 22        1388            ret
0343           1389   L015002?:
0343 EB        1390            mov     a,r3
0344 42A5      1391            orl     _P1MDOUT,a
0346           1392   ;        main.c:327: case 2: P2MDOUT |= mask; break; 
0346 22        1393            ret
0347           1394   L015003?:
0347 EB        1395            mov     a,r3
0348 42A6      1396            orl     _P2MDOUT,a
034A           1397   ;        main.c:328: case 3: P3MDOUT |= mask; break; 
034A 22        1398            ret
034B           1399   L015004?:
034B EB        1400            mov     a,r3
034C 429C      1401            orl     _P3MDOUT,a
034E           1402   ;        main.c:329: }   
034E           1403   L015006?:
034E 22        1404            ret
034F           1405   ;------------------------------------------------------------
034F           1406   ;Allocation info for local variables in function 'Set_Pin_Input'
034F           1407   ;------------------------------------------------------------
034F           1408   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_101'
034F           1409   ;pin                       Allocated to registers r2 
034F           1410   ;------------------------------------------------------------
034F           1411   ;        main.c:332: void Set_Pin_Input (unsigned char pin)
034F           1412   ;        -----------------------------------------
034F           1413   ;         function Set_Pin_Input
034F           1414   ;        -----------------------------------------
034F           1415   _Set_Pin_Input:
034F AA82      1416            mov     r2,dpl
0351           1417   ;        main.c:336: mask=(1<<(pin&0x7));
0351 7407      1418            mov     a,#0x07
0353 5A        1419            anl     a,r2
0354 F5F0      1420            mov     b,a
0356 05F0      1421            inc     b
0358 7401      1422            mov     a,#0x01
035A 8000      1423            sjmp    L016011?
035C           1424   L016009?:
035C 25E0      1425            add     a,acc
035E           1426   L016011?:
035E D5F028    1427            djnz    b,L016009?
0361           1428   ;        main.c:337: mask=~mask;
0361 F4        1429            cpl     a
0362 FB        1430            mov     r3,a
0363           1431   ;        main.c:338: switch(pin/0x10)
0363 EA        1432            mov     a,r2
0364 C4        1433            swap    a
0365 540F      1434            anl     a,#0x0f
0367 FA        1435            mov  r2,a
0368 24FC      1436            add     a,#0xff - 0x03
036A 4000      1437            jc      L016006?
036C EA        1438            mov     a,r2
036D 2A        1439            add     a,r2
036E 2A        1440            add     a,r2
036F 90C8A8    1441            mov     dptr,#L016013?
0372 73        1442            jmp     @a+dptr
0373           1443   L016013?:
0373 020000    1444            ljmp    L016001?
0376 020000    1445            ljmp    L016002?
0379 020000    1446            ljmp    L016003?
037C 020000    1447            ljmp    L016004?
037F           1448   ;        main.c:340: case 0: P0MDOUT &= mask; break;
037F           1449   L016001?:
037F EB        1450            mov     a,r3
0380 52A4      1451            anl     _P0MDOUT,a
0382           1452   ;        main.c:341: case 1: P1MDOUT &= mask; break;
0382 22        1453            ret
0383           1454   L016002?:
0383 EB        1455            mov     a,r3
0384 52A5      1456            anl     _P1MDOUT,a
0386           1457   ;        main.c:342: case 2: P2MDOUT &= mask; break; 
0386 22        1458            ret
0387           1459   L016003?:
0387 EB        1460            mov     a,r3
0388 52A6      1461            anl     _P2MDOUT,a
038A           1462   ;        main.c:343: case 3: P3MDOUT &= mask; break; 
038A 22        1463            ret
038B           1464   L016004?:
038B EB        1465            mov     a,r3
038C 529C      1466            anl     _P3MDOUT,a
038E           1467   ;        main.c:344: }   
038E           1468   L016006?:
038E 22        1469            ret
038F           1470   ;------------------------------------------------------------
038F           1471   ;Allocation info for local variables in function 'InitADC'
038F           1472   ;------------------------------------------------------------
038F           1473   ;------------------------------------------------------------
038F           1474   ;        main.c:347: void InitADC (void)
038F           1475   ;        -----------------------------------------
038F           1476   ;         function InitADC
038F           1477   ;        -----------------------------------------
038F           1478   _InitADC:
038F           1479   ;        main.c:349: SFRPAGE = 0x00;
038F 75A700    1480            mov     _SFRPAGE,#0x00
0392           1481   ;        main.c:350: ADEN=0; // Disable ADC
0392 C2EF      1482            clr     _ADEN
0394           1483   ;        main.c:355: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0394 75B280    1484            mov     _ADC0CN1,#0x80
0397           1485   ;        main.c:359: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0397 75BC20    1486            mov     _ADC0CF0,#0x20
039A           1487   ;        main.c:363: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
039A 75B91E    1488            mov     _ADC0CF1,#0x1E
039D           1489   ;        main.c:372: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
039D 75E800    1490            mov     _ADC0CN0,#0x00
03A0           1491   ;        main.c:377: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03A0 75DF3F    1492            mov     _ADC0CF2,#0x3F
03A3           1493   ;        main.c:381: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03A3 75B300    1494            mov     _ADC0CN2,#0x00
03A6           1495   ;        main.c:383: ADEN=1; // Enable ADC
03A6 D2EF      1496            setb    _ADEN
03A8 22        1497            ret
03A9           1498   ;------------------------------------------------------------
03A9           1499   ;Allocation info for local variables in function 'InitPinADC'
03A9           1500   ;------------------------------------------------------------
03A9           1501   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
03A9           1502   ;portno                    Allocated to registers r2 
03A9           1503   ;mask                      Allocated to registers r3 
03A9           1504   ;------------------------------------------------------------
03A9           1505   ;        main.c:386: void InitPinADC (unsigned char portno, unsigned char pin_num)
03A9           1506   ;        -----------------------------------------
03A9           1507   ;         function InitPinADC
03A9           1508   ;        -----------------------------------------
03A9           1509   _InitPinADC:
03A9 AA82      1510            mov     r2,dpl
03AB           1511   ;        main.c:390: mask=1<<pin_num;
03AB 85E0F0    1512            mov     b,_InitPinADC_PARM_2
03AE 05F0      1513            inc     b
03B0 7401      1514            mov     a,#0x01
03B2 8000      1515            sjmp    L018013?
03B4           1516   L018011?:
03B4 25E0      1517            add     a,acc
03B6           1518   L018013?:
03B6 D5F028    1519            djnz    b,L018011?
03B9 FB        1520            mov     r3,a
03BA           1521   ;        main.c:392: SFRPAGE = 0x20;
03BA 75A720    1522            mov     _SFRPAGE,#0x20
03BD           1523   ;        main.c:393: switch (portno)
03BD BA0068    1524            cjne    r2,#0x00,L018014?
03C0 8000      1525            sjmp    L018001?
03C2           1526   L018014?:
03C2 BA01E8    1527            cjne    r2,#0x01,L018015?
03C5 8000      1528            sjmp    L018002?
03C7           1529   L018015?:
03C7           1530   ;        main.c:395: case 0:
03C7 BA0268    1531            cjne    r2,#0x02,L018005?
03CA 8000      1532            sjmp    L018003?
03CC           1533   L018001?:
03CC           1534   ;        main.c:396: P0MDIN &= (~mask); // Set pin as analog input
03CC EB        1535            mov     a,r3
03CD F4        1536            cpl     a
03CE FA        1537            mov     r2,a
03CF 52F1      1538            anl     _P0MDIN,a
03D1           1539   ;        main.c:397: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03D1 EB        1540            mov     a,r3
03D2 42D4      1541            orl     _P0SKIP,a
03D4           1542   ;        main.c:398: break;
03D4           1543   ;        main.c:399: case 1:
03D4 8000      1544            sjmp    L018005?
03D6           1545   L018002?:
03D6           1546   ;        main.c:400: P1MDIN &= (~mask); // Set pin as analog input
03D6 EB        1547            mov     a,r3
03D7 F4        1548            cpl     a
03D8 FA        1549            mov     r2,a
03D9 52F2      1550            anl     _P1MDIN,a
03DB           1551   ;        main.c:401: P1SKIP |= mask; // Skip Crossbar decoding for this pin
03DB EB        1552            mov     a,r3
03DC 42D5      1553            orl     _P1SKIP,a
03DE           1554   ;        main.c:402: break;
03DE           1555   ;        main.c:403: case 2:
03DE 8000      1556            sjmp    L018005?
03E0           1557   L018003?:
03E0           1558   ;        main.c:404: P2MDIN &= (~mask); // Set pin as analog input
03E0 EB        1559            mov     a,r3
03E1 F4        1560            cpl     a
03E2 FA        1561            mov     r2,a
03E3 52F3      1562            anl     _P2MDIN,a
03E5           1563   ;        main.c:405: P2SKIP |= mask; // Skip Crossbar decoding for this pin
03E5 EB        1564            mov     a,r3
03E6 42CC      1565            orl     _P2SKIP,a
03E8           1566   ;        main.c:409: }
03E8           1567   L018005?:
03E8           1568   ;        main.c:410: SFRPAGE = 0x00;
03E8 75A700    1569            mov     _SFRPAGE,#0x00
03EB 22        1570            ret
03EC           1571   ;------------------------------------------------------------
03EC           1572   ;Allocation info for local variables in function 'ADC_at_Pin'
03EC           1573   ;------------------------------------------------------------
03EC           1574   ;pin                       Allocated to registers 
03EC           1575   ;------------------------------------------------------------
03EC           1576   ;        main.c:413: unsigned int ADC_at_Pin(unsigned char pin)
03EC           1577   ;        -----------------------------------------
03EC           1578   ;         function ADC_at_Pin
03EC           1579   ;        -----------------------------------------
03EC           1580   _ADC_at_Pin:
03EC 8582BB    1581            mov     _ADC0MX,dpl
03EF           1582   ;        main.c:416: ADINT = 0;
03EF C2ED      1583            clr     _ADINT
03F1           1584   ;        main.c:417: ADBUSY = 1;     // Convert voltage at the pin
03F1 D2EC      1585            setb    _ADBUSY
03F3           1586   ;        main.c:418: while (!ADINT); // Wait for conversion to complete
03F3           1587   L019001?:
03F3 30EDE8    1588            jnb     _ADINT,L019001?
03F6           1589   ;        main.c:419: return (ADC0);
03F6 85BD82    1590            mov     dpl,_ADC0
03F9 85BE83    1591            mov     dph,(_ADC0 >> 8)
03FC 22        1592            ret
03FD           1593   ;------------------------------------------------------------
03FD           1594   ;Allocation info for local variables in function 'Timer5_ISR'
03FD           1595   ;------------------------------------------------------------
03FD           1596   ;------------------------------------------------------------
03FD           1597   ;        main.c:422: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
03FD           1598   ;        -----------------------------------------
03FD           1599   ;         function Timer5_ISR
03FD           1600   ;        -----------------------------------------
03FD           1601   _Timer5_ISR:
03FD C048      1602            push    bits
03FF C0E0      1603            push    acc
0401 C0F0      1604            push    b
0403 C082      1605            push    dpl
0405 C083      1606            push    dph
0407 C002      1607            push    (0+2)
0409 C003      1608            push    (0+3)
040B C004      1609            push    (0+4)
040D C005      1610            push    (0+5)
040F C006      1611            push    (0+6)
0411 C007      1612            push    (0+7)
0413 C000      1613            push    (0+0)
0415 C001      1614            push    (0+1)
0417 C0D0      1615            push    psw
0419 75D000    1616            mov     psw,#0x00
041C           1617   ;        main.c:424: SFRPAGE=0x10;
041C 75A710    1618            mov     _SFRPAGE,#0x10
041F           1619   ;        main.c:425: TF5H = 0; // Clear Timer5 interrupt flag
041F C2C7      1620            clr     _TF5H
0421           1621   ;        main.c:426: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0421 75D2C4    1622            mov     _TMR5RL,#0xC4
0424 75D3FF    1623            mov     (_TMR5RL >> 8),#0xFF
0427           1624   ;        main.c:428: fre_mea_count++;
0427 0508      1625            inc     _fre_mea_count
0429 E4        1626            clr     a
042A B50868    1627            cjne    a,_fre_mea_count,L020034?
042D 0509      1628            inc     (_fre_mea_count + 1)
042F           1629   L020034?:
042F           1630   ;        main.c:429: if(fre_mea_count == 1000){
042F 74E8      1631            mov     a,#0xE8
0431 B508A8    1632            cjne    a,_fre_mea_count,L020002?
0434 7403      1633            mov     a,#0x03
0436 B509A8    1634            cjne    a,(_fre_mea_count + 1),L020002?
0439           1635   ;        main.c:430: fre_mea_count = 0;
0439 E4        1636            clr     a
043A F508      1637            mov     _fre_mea_count,a
043C F509      1638            mov     (_fre_mea_count + 1),a
043E           1639   ;        main.c:431: freq100 = get_freq();
043E 120000    1640            lcall   _get_freq
0441 858248    1641            mov     _freq100,dpl
0444 858349    1642            mov     (_freq100 + 1),dph
0447           1643   L020002?:
0447           1644   ;        main.c:435: pwm_counter++; 
0447 0548      1645            inc     _pwm_counter
0449 E4        1646            clr     a
044A B54828    1647            cjne    a,_pwm_counter,L020037?
044D 0549      1648            inc     (_pwm_counter + 1)
044F           1649   L020037?:
044F           1650   ;        main.c:436: if (pwm_counter == 100){
044F 7464      1651            mov     a,#0x64
0451 B54868    1652            cjne    a,_pwm_counter,L020038?
0454 E4        1653            clr     a
0455 B54968    1654            cjne    a,(_pwm_counter + 1),L020038?
0458 8000      1655            sjmp    L020039?
045A           1656   L020038?:
045A 8000      1657            sjmp    L020004?
045C           1658   L020039?:
045C           1659   ;        main.c:437: pwm_counter = 0; 
045C E4        1660            clr     a
045D F548      1661            mov     _pwm_counter,a
045F F549      1662            mov     (_pwm_counter + 1),a
0461           1663   L020004?:
0461           1664   ;        main.c:440: if (pwm_right > pwm_counter){
0461 AA88      1665            mov     r2,_pwm_right
0463 7B00      1666            mov     r3,#0x00
0465 C3        1667            clr     c
0466 E548      1668            mov     a,_pwm_counter
0468 9A        1669            subb    a,r2
0469 E549      1670            mov     a,(_pwm_counter + 1)
046B 9B        1671            subb    a,r3
046C 5000      1672            jnc     L020009?
046E           1673   ;        main.c:441: if(L_motor_dir){
046E E548      1674            mov     a,_L_motor_dir
0470 6000      1675            jz      L020006?
0472           1676   ;        main.c:442: L_bridge_1 = 1; 
0472 D2A1      1677            setb    _P2_1
0474           1678   ;        main.c:443: L_bridge_2 = 0; 
0474 C2A2      1679            clr     _P2_2
0476 8000      1680            sjmp    L020010?
0478           1681   L020006?:
0478           1682   ;        main.c:446: L_bridge_1 = 0; 
0478 C2A1      1683            clr     _P2_1
047A           1684   ;        main.c:447: L_bridge_2 = 1; 
047A D2A2      1685            setb    _P2_2
047C 8000      1686            sjmp    L020010?
047E           1687   L020009?:
047E           1688   ;        main.c:451: L_bridge_1 = 0; 
047E C2A1      1689            clr     _P2_1
0480           1690   ;        main.c:452: L_bridge_2 = 0; 
0480 C2A2      1691            clr     _P2_2
0482           1692   L020010?:
0482           1693   ;        main.c:454: if (pwm_left > pwm_counter){
0482 AAC8      1694            mov     r2,_pwm_left
0484 7B00      1695            mov     r3,#0x00
0486 C3        1696            clr     c
0487 E548      1697            mov     a,_pwm_counter
0489 9A        1698            subb    a,r2
048A E549      1699            mov     a,(_pwm_counter + 1)
048C 9B        1700            subb    a,r3
048D 5000      1701            jnc     L020015?
048F           1702   ;        main.c:455: if (R_motor_dir){
048F E508      1703            mov     a,_R_motor_dir
0491 6000      1704            jz      L020012?
0493           1705   ;        main.c:456: R_bridge_1 = 1; 
0493 D2A4      1706            setb    _P2_4
0495           1707   ;        main.c:457: R_bridge_2 = 0;
0495 C2A3      1708            clr     _P2_3
0497 8000      1709            sjmp    L020016?
0499           1710   L020012?:
0499           1711   ;        main.c:460: R_bridge_1 = 0; 
0499 C2A4      1712            clr     _P2_4
049B           1713   ;        main.c:461: R_bridge_2 = 1;
049B D2A3      1714            setb    _P2_3
049D 8000      1715            sjmp    L020016?
049F           1716   L020015?:
049F           1717   ;        main.c:465: R_bridge_1 = 0; 
049F C2A4      1718            clr     _P2_4
04A1           1719   ;        main.c:466: R_bridge_2 = 0; 
04A1 C2A3      1720            clr     _P2_3
04A3           1721   L020016?:
04A3           1722   ;        main.c:469: servo_counter++;
04A3 0508      1723            inc     _servo_counter
04A5 E4        1724            clr     a
04A6 B508A8    1725            cjne    a,_servo_counter,L020044?
04A9 0509      1726            inc     (_servo_counter + 1)
04AB           1727   L020044?:
04AB           1728   ;        main.c:470: if(servo_counter==2000)
04AB 74D0      1729            mov     a,#0xD0
04AD B508E8    1730            cjne    a,_servo_counter,L020018?
04B0 7407      1731            mov     a,#0x07
04B2 B509E8    1732            cjne    a,(_servo_counter + 1),L020018?
04B5           1733   ;        main.c:472: servo_counter=0;
04B5 E4        1734            clr     a
04B6 F508      1735            mov     _servo_counter,a
04B8 F509      1736            mov     (_servo_counter + 1),a
04BA           1737   ;        main.c:473: Servo_arm=1;
04BA D296      1738            setb    _P1_6
04BC           1739   ;        main.c:474: Servo_base=1;
04BC D297      1740            setb    _P1_7
04BE           1741   L020018?:
04BE           1742   ;        main.c:476: if(servo_arm==servo_counter)
04BE AA88      1743            mov     r2,_servo_arm
04C0 7B00      1744            mov     r3,#0x00
04C2 EA        1745            mov     a,r2
04C3 B50828    1746            cjne    a,_servo_counter,L020020?
04C6 EB        1747            mov     a,r3
04C7 B50928    1748            cjne    a,(_servo_counter + 1),L020020?
04CA           1749   ;        main.c:478: Servo_arm=0;
04CA C296      1750            clr     _P1_6
04CC           1751   L020020?:
04CC           1752   ;        main.c:480: if(servo_base==servo_counter)
04CC AAC8      1753            mov     r2,_servo_base
04CE 7B00      1754            mov     r3,#0x00
04D0 EA        1755            mov     a,r2
04D1 B50868    1756            cjne    a,_servo_counter,L020023?
04D4 EB        1757            mov     a,r3
04D5 B50968    1758            cjne    a,(_servo_counter + 1),L020023?
04D8           1759   ;        main.c:482: Servo_base=0;
04D8 C297      1760            clr     _P1_7
04DA           1761   L020023?:
04DA D0D0      1762            pop     psw
04DC D001      1763            pop     (0+1)
04DE D000      1764            pop     (0+0)
04E0 D007      1765            pop     (0+7)
04E2 D006      1766            pop     (0+6)
04E4 D005      1767            pop     (0+5)
04E6 D004      1768            pop     (0+4)
04E8 D003      1769            pop     (0+3)
04EA D002      1770            pop     (0+2)
04EC D083      1771            pop     dph
04EE D082      1772            pop     dpl
04F0 D0F0      1773            pop     b
04F2 D0E0      1774            pop     acc
04F4 D048      1775            pop     bits
04F6 32        1776            reti
04F7           1777   ;------------------------------------------------------------
04F7           1778   ;Allocation info for local variables in function 'servo_pick'
04F7           1779   ;------------------------------------------------------------
04F7           1780   ;i                         Allocated to registers r2 r3 
04F7           1781   ;------------------------------------------------------------
04F7           1782   ;        main.c:487: void servo_pick(){
04F7           1783   ;        -----------------------------------------
04F7           1784   ;         function servo_pick
04F7           1785   ;        -----------------------------------------
04F7           1786   _servo_pick:
04F7           1787   ;        main.c:489: servo_arm = 1;
04F7 758801    1788            mov     _servo_arm,#0x01
04FA           1789   ;        main.c:491: servo_base = 250;
04FA 75C8FA    1790            mov     _servo_base,#0xFA
04FD           1791   ;        main.c:492: waitms(200);
04FD 9000C8    1792            mov     dptr,#0x00C8
0500 120000    1793            lcall   _waitms
0503           1794   ;        main.c:493: servo_arm = 250;
0503 7588FA    1795            mov     _servo_arm,#0xFA
0506           1796   ;        main.c:494: Magnet = 1;
0506 D295      1797            setb    _P1_5
0508           1798   ;        main.c:495: waitms(200);
0508 9000C8    1799            mov     dptr,#0x00C8
050B 120000    1800            lcall   _waitms
050E           1801   ;        main.c:496: for(i = 0; i<109; i++){
050E 7A00      1802            mov     r2,#0x00
0510 7B00      1803            mov     r3,#0x00
0512           1804   L021001?:
0512 C3        1805            clr     c
0513 EA        1806            mov     a,r2
0514 946D      1807            subb    a,#0x6D
0516 EB        1808            mov     a,r3
0517 6480      1809            xrl     a,#0x80
0519 9480      1810            subb    a,#0x80
051B 5000      1811            jnc     L021004?
051D           1812   ;        main.c:497: waitms(5);
051D 900005    1813            mov     dptr,#0x0005
0520 C002      1814            push    ar2
0522 C003      1815            push    ar3
0524 120000    1816            lcall   _waitms
0527 D003      1817            pop     ar3
0529 D002      1818            pop     ar2
052B           1819   ;        main.c:498: servo_base--;
052B 15C8      1820            dec     _servo_base
052D           1821   ;        main.c:496: for(i = 0; i<109; i++){
052D 0A        1822            inc     r2
052E BA00A8    1823            cjne    r2,#0x00,L021001?
0531 0B        1824            inc     r3
0532 8000      1825            sjmp    L021001?
0534           1826   L021004?:
0534           1827   ;        main.c:500: waitms(200);
0534 9000C8    1828            mov     dptr,#0x00C8
0537 120000    1829            lcall   _waitms
053A           1830   ;        main.c:501: for(i = 0; i<159; i++){
053A 7A00      1831            mov     r2,#0x00
053C 7B00      1832            mov     r3,#0x00
053E           1833   L021005?:
053E C3        1834            clr     c
053F EA        1835            mov     a,r2
0540 949F      1836            subb    a,#0x9F
0542 EB        1837            mov     a,r3
0543 6480      1838            xrl     a,#0x80
0545 9480      1839            subb    a,#0x80
0547 5000      1840            jnc     L021008?
0549           1841   ;        main.c:502: waitms(5);
0549 900005    1842            mov     dptr,#0x0005
054C C002      1843            push    ar2
054E C003      1844            push    ar3
0550 120000    1845            lcall   _waitms
0553 D003      1846            pop     ar3
0555 D002      1847            pop     ar2
0557           1848   ;        main.c:503: servo_arm--;
0557 1588      1849            dec     _servo_arm
0559           1850   ;        main.c:501: for(i = 0; i<159; i++){
0559 0A        1851            inc     r2
055A BA0028    1852            cjne    r2,#0x00,L021005?
055D 0B        1853            inc     r3
055E 8000      1854            sjmp    L021005?
0560           1855   L021008?:
0560           1856   ;        main.c:505: waitms(200);
0560 9000C8    1857            mov     dptr,#0x00C8
0563 120000    1858            lcall   _waitms
0566           1859   ;        main.c:506: for(i = 0; i<45; i++){
0566 7A00      1860            mov     r2,#0x00
0568 7B00      1861            mov     r3,#0x00
056A           1862   L021009?:
056A C3        1863            clr     c
056B EA        1864            mov     a,r2
056C 942D      1865            subb    a,#0x2D
056E EB        1866            mov     a,r3
056F 6480      1867            xrl     a,#0x80
0571 9480      1868            subb    a,#0x80
0573 5000      1869            jnc     L021012?
0575           1870   ;        main.c:507: waitms(5);
0575 900005    1871            mov     dptr,#0x0005
0578 C002      1872            push    ar2
057A C003      1873            push    ar3
057C 120000    1874            lcall   _waitms
057F D003      1875            pop     ar3
0581 D002      1876            pop     ar2
0583           1877   ;        main.c:508: servo_base--;
0583 15C8      1878            dec     _servo_base
0585           1879   ;        main.c:506: for(i = 0; i<45; i++){
0585 0A        1880            inc     r2
0586 BA00A8    1881            cjne    r2,#0x00,L021009?
0589 0B        1882            inc     r3
058A 8000      1883            sjmp    L021009?
058C           1884   L021012?:
058C           1885   ;        main.c:510: waitms(500);
058C 9001F4    1886            mov     dptr,#0x01F4
058F 120000    1887            lcall   _waitms
0592           1888   ;        main.c:511: Magnet = 0;
0592 C295      1889            clr     _P1_5
0594           1890   ;        main.c:512: waitms(200);
0594 9000C8    1891            mov     dptr,#0x00C8
0597 120000    1892            lcall   _waitms
059A           1893   ;        main.c:513: servo_arm=1;
059A 758801    1894            mov     _servo_arm,#0x01
059D           1895   ;        main.c:514: servo_base=1;
059D 75C801    1896            mov     _servo_base,#0x01
05A0           1897   ;        main.c:515: return;
05A0 22        1898            ret
05A1           1899   ;------------------------------------------------------------
05A1           1900   ;Allocation info for local variables in function 'check_bound'
05A1           1901   ;------------------------------------------------------------
05A1           1902   ;d2                        Allocated with name '_check_bound_PARM_2'
05A1           1903   ;d1                        Allocated to registers r2 r3 
05A1           1904   ;------------------------------------------------------------
05A1           1905   ;        main.c:518: int check_bound(int d1, int d2){
05A1           1906   ;        -----------------------------------------
05A1           1907   ;         function check_bound
05A1           1908   ;        -----------------------------------------
05A1           1909   _check_bound:
05A1 AA82      1910            mov     r2,dpl
05A3 AB83      1911            mov     r3,dph
05A5           1912   ;        main.c:519: if(d1>14000||d2>14000)      return 1;
05A5 C3        1913            clr     c
05A6 74B0      1914            mov     a,#0xB0
05A8 9A        1915            subb    a,r2
05A9 74B6      1916            mov     a,#(0x36 ^ 0x80)
05AB 8BF0      1917            mov     b,r3
05AD 63F080    1918            xrl     b,#0x80
05B0 95F0      1919            subb    a,b
05B2 4000      1920            jc      L022001?
05B4 74B0      1921            mov     a,#0xB0
05B6 9590      1922            subb    a,_check_bound_PARM_2
05B8 74B6      1923            mov     a,#(0x36 ^ 0x80)
05BA 8591F0    1924            mov     b,(_check_bound_PARM_2 + 1)
05BD 63F080    1925            xrl     b,#0x80
05C0 95F0      1926            subb    a,b
05C2 5000      1927            jnc     L022002?
05C4           1928   L022001?:
05C4 900001    1929            mov     dptr,#0x0001
05C7           1930   ;        main.c:520: else return 0;
05C7 22        1931            ret
05C8           1932   L022002?:
05C8 900000    1933            mov     dptr,#0x0000
05CB 22        1934            ret
05CC           1935   ;------------------------------------------------------------
05CC           1936   ;Allocation info for local variables in function 'Init_all'
05CC           1937   ;------------------------------------------------------------
05CC           1938   ;------------------------------------------------------------
05CC           1939   ;        main.c:523: void Init_all(){
05CC           1940   ;        -----------------------------------------
05CC           1941   ;         function Init_all
05CC           1942   ;        -----------------------------------------
05CC           1943   _Init_all:
05CC           1944   ;        main.c:525: Set_Pin_Output(0x24);
05CC 758224    1945            mov     dpl,#0x24
05CF 120000    1946            lcall   _Set_Pin_Output
05D2           1947   ;        main.c:526: Set_Pin_Output(0x23);
05D2 758223    1948            mov     dpl,#0x23
05D5 120000    1949            lcall   _Set_Pin_Output
05D8           1950   ;        main.c:527: Set_Pin_Output(0x22);
05D8 758222    1951            mov     dpl,#0x22
05DB 120000    1952            lcall   _Set_Pin_Output
05DE           1953   ;        main.c:528: Set_Pin_Output(0x21);
05DE 758221    1954            mov     dpl,#0x21
05E1 120000    1955            lcall   _Set_Pin_Output
05E4           1956   ;        main.c:529: Set_Pin_Output(0x17);
05E4 758217    1957            mov     dpl,#0x17
05E7 120000    1958            lcall   _Set_Pin_Output
05EA           1959   ;        main.c:530: Set_Pin_Output(0x16);
05EA 758216    1960            mov     dpl,#0x16
05ED 120000    1961            lcall   _Set_Pin_Output
05F0           1962   ;        main.c:531: Set_Pin_Output(0x15);
05F0 758215    1963            mov     dpl,#0x15
05F3 120000    1964            lcall   _Set_Pin_Output
05F6           1965   ;        main.c:532: Set_Pin_Input(0x02);
05F6 758202    1966            mov     dpl,#0x02
05F9 120000    1967            lcall   _Set_Pin_Input
05FC           1968   ;        main.c:534: InitPinADC(1,3);
05FC 75E003    1969            mov     _InitPinADC_PARM_2,#0x03
05FF 758201    1970            mov     dpl,#0x01
0602 120000    1971            lcall   _InitPinADC
0605           1972   ;        main.c:535: InitPinADC(1,4);
0605 75E004    1973            mov     _InitPinADC_PARM_2,#0x04
0608 758201    1974            mov     dpl,#0x01
060B 120000    1975            lcall   _InitPinADC
060E           1976   ;        main.c:536: InitADC();
060E 120000    1977            lcall   _InitADC
0611           1978   ;        main.c:538: TMOD&=0b_1111_0000; 
0611 5389F0    1979            anl     _TMOD,#0xF0
0614           1980   ;        main.c:539: TMOD|=0b_0000_0001; 
0614 438901    1981            orl     _TMOD,#0x01
0617           1982   ;        main.c:540: TR0=0; 
0617 C28C      1983            clr     _TR0
0619           1984   ;        main.c:542: Servo_arm=0;
0619 C296      1985            clr     _P1_6
061B           1986   ;        main.c:543: Servo_base=0;
061B C297      1987            clr     _P1_7
061D           1988   ;        main.c:544: Magnet = 0;
061D C295      1989            clr     _P1_5
061F           1990   ;        main.c:545: return;
061F 22        1991            ret
0620           1992   ;------------------------------------------------------------
0620           1993   ;Allocation info for local variables in function 'main'
0620           1994   ;------------------------------------------------------------
0620           1995   ;cnt                       Allocated to registers 
0620           1996   ;c                         Allocated to registers r2 
0620           1997   ;vx_error                  Allocated with name '_main_vx_error_1_133'
0620           1998   ;vy_error                  Allocated with name '_main_vy_error_1_133'
0620           1999   ;vx_err                    Allocated with name '_main_vx_err_1_133'
0620           2000   ;vy_err                    Allocated with name '_main_vy_err_1_133'
0620           2001   ;vx                        Allocated with name '_main_vx_1_133'
0620           2002   ;vy                        Allocated with name '_main_vy_1_133'
0620           2003   ;threshold                 Allocated to registers 
0620           2004   ;motor_pwm                 Allocated to registers 
0620           2005   ;pick                      Allocated with name '_main_pick_1_133'
0620           2006   ;pick_done                 Allocated to registers 
0620           2007   ;bound_flag                Allocated to registers r2 r3 
0620           2008   ;------------------------------------------------------------
0620           2009   ;        main.c:548: void main (void)
0620           2010   ;        -----------------------------------------
0620           2011   ;         function main
0620           2012   ;        -----------------------------------------
0620           2013   _main:
0620           2014   ;        main.c:553: int vx = 0, vy = 0; 
0620 E4        2015            clr     a
0621 F588      2016            mov     _main_vx_1_133,a
0623 F589      2017            mov     (_main_vx_1_133 + 1),a
0625 F5C8      2018            mov     _main_vy_1_133,a
0627 F5C9      2019            mov     (_main_vy_1_133 + 1),a
0629           2020   ;        main.c:560: Init_all();
0629 120000    2021            lcall   _Init_all
062C           2022   ;        main.c:561: waitms(500);
062C 9001F4    2023            mov     dptr,#0x01F4
062F 120000    2024            lcall   _waitms
0632           2025   ;        main.c:562: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
0632 74A8      2026            mov     a,#__str_3
0634 C0E0      2027            push    acc
0636 74D2      2028            mov     a,#(__str_3 >> 8)
0638 C0E0      2029            push    acc
063A 7480      2030            mov     a,#0x80
063C C0E0      2031            push    acc
063E 120000    2032            lcall   _printf
0641 1581      2033            dec     sp
0643 1581      2034            dec     sp
0645 1581      2035            dec     sp
0647           2036   ;        main.c:563: UART1_Init(9600);
0647 902580    2037            mov     dptr,#0x2580
064A E4        2038            clr     a
064B F5F0      2039            mov     b,a
064D 120000    2040            lcall   _UART1_Init
0650           2041   ;        main.c:565: ReceptionOff();
0650 120000    2042            lcall   _ReceptionOff
0653           2043   ;        main.c:568: SendATCommand("AT+VER\r\n");
0653 90D2E8    2044            mov     dptr,#__str_4
0656 75F080    2045            mov     b,#0x80
0659 120000    2046            lcall   _SendATCommand
065C           2047   ;        main.c:569: SendATCommand("AT+BAUD\r\n");
065C 90D328    2048            mov     dptr,#__str_5
065F 75F080    2049            mov     b,#0x80
0662 120000    2050            lcall   _SendATCommand
0665           2051   ;        main.c:570: SendATCommand("AT+RFID\r\n");
0665 90D368    2052            mov     dptr,#__str_6
0668 75F080    2053            mov     b,#0x80
066B 120000    2054            lcall   _SendATCommand
066E           2055   ;        main.c:571: SendATCommand("AT+DVID\r\n");
066E 90D3A8    2056            mov     dptr,#__str_7
0671 75F080    2057            mov     b,#0x80
0674 120000    2058            lcall   _SendATCommand
0677           2059   ;        main.c:572: SendATCommand("AT+RFC002\r\n");
0677 90D3E8    2060            mov     dptr,#__str_8
067A 75F080    2061            mov     b,#0x80
067D 120000    2062            lcall   _SendATCommand
0680           2063   ;        main.c:573: SendATCommand("AT+POWE\r\n");
0680 90D428    2064            mov     dptr,#__str_9
0683 75F080    2065            mov     b,#0x80
0686 120000    2066            lcall   _SendATCommand
0689           2067   ;        main.c:574: SendATCommand("AT+CLSS\r\n");
0689 90D468    2068            mov     dptr,#__str_10
068C 75F080    2069            mov     b,#0x80
068F 120000    2070            lcall   _SendATCommand
0692           2071   ;        main.c:575: SendATCommand("AT+DVIDEFEF\r\n");  
0692 90D4A8    2072            mov     dptr,#__str_11
0695 75F080    2073            mov     b,#0x80
0698 120000    2074            lcall   _SendATCommand
069B           2075   ;        main.c:578: L_bridge_1 = 0; 
069B C2A1      2076            clr     _P2_1
069D           2077   ;        main.c:579: L_bridge_2 = 0; 
069D C2A2      2078            clr     _P2_2
069F           2079   ;        main.c:580: R_bridge_1 = 0; 
069F C2A4      2080            clr     _P2_4
06A1           2081   ;        main.c:581: R_bridge_2 = 0; 
06A1 C2A3      2082            clr     _P2_3
06A3           2083   ;        main.c:584: while(1)
06A3 E4        2084            clr     a
06A4           2085   L024051?:
06A4           2086   ;        main.c:587: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
06A4 758209    2087            mov     dpl,#0x09
06A7 120000    2088            lcall   _ADC_at_Pin
06AA 8582C8    2089            mov     _d1,dpl
06AD 8583C9    2090            mov     (_d1 + 1),dph
06B0           2091   ;        main.c:588: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
06B0 75820A    2092            mov     dpl,#0x0A
06B3 120000    2093            lcall   _ADC_at_Pin
06B6 858288    2094            mov     _d2,dpl
06B9 858389    2095            mov     (_d2 + 1),dph
06BC           2096   ;        main.c:589: bound_flag = check_bound(d1,d2);
06BC 858890    2097            mov     _check_bound_PARM_2,_d2
06BF 858991    2098            mov     (_check_bound_PARM_2 + 1),(_d2 + 1)
06C2 85C882    2099            mov     dpl,_d1
06C5 85C983    2100            mov     dph,(_d1 + 1)
06C8 120000    2101            lcall   _check_bound
06CB AA82      2102            mov     r2,dpl
06CD AB83      2103            mov     r3,dph
06CF           2104   ;        main.c:591: printf("freq: %f, bound_flag: %d\r\n\r", freq100/100.0,bound_flag);
06CF 854882    2105            mov     dpl,_freq100
06D2 854983    2106            mov     dph,(_freq100 + 1)
06D5 C002      2107            push    ar2
06D7 C003      2108            push    ar3
06D9 120000    2109            lcall   ___sint2fs
06DC AC82      2110            mov     r4,dpl
06DE AD83      2111            mov     r5,dph
06E0 AEF0      2112            mov     r6,b
06E2 FF        2113            mov     r7,a
06E3 E4        2114            clr     a
06E4 C0E0      2115            push    acc
06E6 C0E0      2116            push    acc
06E8 74C8      2117            mov     a,#0xC8
06EA C0E0      2118            push    acc
06EC 7442      2119            mov     a,#0x42
06EE C0E0      2120            push    acc
06F0 8C82      2121            mov     dpl,r4
06F2 8D83      2122            mov     dph,r5
06F4 8EF0      2123            mov     b,r6
06F6 EF        2124            mov     a,r7
06F7 120000    2125            lcall   ___fsdiv
06FA AC82      2126            mov     r4,dpl
06FC AD83      2127            mov     r5,dph
06FE AEF0      2128            mov     r6,b
0700 FF        2129            mov     r7,a
0701 E581      2130            mov     a,sp
0703 24FC      2131            add     a,#0xfc
0705 F581      2132            mov     sp,a
0707 C004      2133            push    ar4
0709 C005      2134            push    ar5
070B C006      2135            push    ar6
070D C007      2136            push    ar7
070F 74A8      2137            mov     a,#__str_12
0711 C0E0      2138            push    acc
0713 74D5      2139            mov     a,#(__str_12 >> 8)
0715 C0E0      2140            push    acc
0717 7480      2141            mov     a,#0x80
0719 C0E0      2142            push    acc
071B 120000    2143            lcall   _printf
071E E581      2144            mov     a,sp
0720 24F7      2145            add     a,#0xf7
0722 F581      2146            mov     sp,a
0724           2147   ;        main.c:594: if(RXU1()) // Something has arrived
0724 120000    2148            lcall   _RXU1
0727 4000      2149            jc      L024077?
0729 020000    2150            ljmp    L024051?
072C           2151   L024077?:
072C           2152   ;        main.c:596: c=getchar1();
072C 120000    2153            lcall   _getchar1
072F AA82      2154            mov     r2,dpl
0731           2155   ;        main.c:598: if(c=='!') // Master is sending message
0731 BA2128    2156            cjne    r2,#0x21,L024078?
0734 8000      2157            sjmp    L024079?
0736           2158   L024078?:
0736 020000    2159            ljmp    L024046?
0739           2160   L024079?:
0739           2161   ;        main.c:600: getstr1(buff, sizeof(buff)-1);
0739 754813    2162            mov     _getstr1_PARM_2,#0x13
073C 904508    2163            mov     dptr,#_buff
073F 75F040    2164            mov     b,#0x40
0742 120000    2165            lcall   _getstr1
0745           2166   ;        main.c:601: if(strlen(buff)==9)
0745 904508    2167            mov     dptr,#_buff
0748 75F040    2168            mov     b,#0x40
074B 120000    2169            lcall   _strlen
074E AB82      2170            mov     r3,dpl
0750 AC83      2171            mov     r4,dph
0752 BB0928    2172            cjne    r3,#0x09,L024080?
0755 BC0028    2173            cjne    r4,#0x00,L024080?
0758 8000      2174            sjmp    L024081?
075A           2175   L024080?:
075A 020000    2176            ljmp    L024041?
075D           2177   L024081?:
075D           2178   ;        main.c:603: printf("Master says: %s\r\n", buff);
075D 7408      2179            mov     a,#_buff
075F C0E0      2180            push    acc
0761 7445      2181            mov     a,#(_buff >> 8)
0763 C0E0      2182            push    acc
0765 7440      2183            mov     a,#0x40
0767 C0E0      2184            push    acc
0769 74E8      2185            mov     a,#__str_13
076B C0E0      2186            push    acc
076D 74D7      2187            mov     a,#(__str_13 >> 8)
076F C0E0      2188            push    acc
0771 7480      2189            mov     a,#0x80
0773 C0E0      2190            push    acc
0775 120000    2191            lcall   _printf
0778 E581      2192            mov     a,sp
077A 24FA      2193            add     a,#0xfa
077C F581      2194            mov     sp,a
077E           2195   ;        main.c:605: sscanf(buff, "%03d,%03d,%01d", &vx, &vy, &pick);
077E 7418      2196            mov     a,#_main_pick_1_133
0780 C0E0      2197            push    acc
0782 74BB      2198            mov     a,#(_main_pick_1_133 >> 8)
0784 C0E0      2199            push    acc
0786 7440      2200            mov     a,#0x40
0788 C0E0      2201            push    acc
078A 74C8      2202            mov     a,#_main_vy_1_133
078C C0E0      2203            push    acc
078E 74BA      2204            mov     a,#(_main_vy_1_133 >> 8)
0790 C0E0      2205            push    acc
0792 7440      2206            mov     a,#0x40
0794 C0E0      2207            push    acc
0796 7488      2208            mov     a,#_main_vx_1_133
0798 C0E0      2209            push    acc
079A 74BA      2210            mov     a,#(_main_vx_1_133 >> 8)
079C C0E0      2211            push    acc
079E 7440      2212            mov     a,#0x40
07A0 C0E0      2213            push    acc
07A2 7428      2214            mov     a,#__str_14
07A4 C0E0      2215            push    acc
07A6 74D8      2216            mov     a,#(__str_14 >> 8)
07A8 C0E0      2217            push    acc
07AA 7480      2218            mov     a,#0x80
07AC C0E0      2219            push    acc
07AE 7408      2220            mov     a,#_buff
07B0 C0E0      2221            push    acc
07B2 7445      2222            mov     a,#(_buff >> 8)
07B4 C0E0      2223            push    acc
07B6 7440      2224            mov     a,#0x40
07B8 C0E0      2225            push    acc
07BA 120000    2226            lcall   _sscanf
07BD E581      2227            mov     a,sp
07BF 24F1      2228            add     a,#0xf1
07C1 F581      2229            mov     sp,a
07C3           2230   ;        main.c:607: printf("Joystick Received: Vx = %03d, Vy = %03d, Order = %01d\r\n", vx, vy, pick);
07C3 C018      2231            push    _main_pick_1_133
07C5 C019      2232            push    (_main_pick_1_133 + 1)
07C7 C0C8      2233            push    _main_vy_1_133
07C9 C0C9      2234            push    (_main_vy_1_133 + 1)
07CB C088      2235            push    _main_vx_1_133
07CD C089      2236            push    (_main_vx_1_133 + 1)
07CF 74A8      2237            mov     a,#__str_15
07D1 C0E0      2238            push    acc
07D3 74D8      2239            mov     a,#(__str_15 >> 8)
07D5 C0E0      2240            push    acc
07D7 7480      2241            mov     a,#0x80
07D9 C0E0      2242            push    acc
07DB 120000    2243            lcall   _printf
07DE E581      2244            mov     a,sp
07E0 24F7      2245            add     a,#0xf7
07E2 F581      2246            mov     sp,a
07E4           2247   ;        main.c:609: if(pick==1){
07E4 7401      2248            mov     a,#0x01
07E6 B518E8    2249            cjne    a,_main_pick_1_133,L024082?
07E9 E4        2250            clr     a
07EA B519E8    2251            cjne    a,(_main_pick_1_133 + 1),L024082?
07ED 8000      2252            sjmp    L024083?
07EF           2253   L024082?:
07EF 8000      2254            sjmp    L024002?
07F1           2255   L024083?:
07F1           2256   ;        main.c:610: servo_pick();
07F1 120000    2257            lcall   _servo_pick
07F4           2258   ;        main.c:611: pick = 0;
07F4 E4        2259            clr     a
07F5 F518      2260            mov     _main_pick_1_133,a
07F7 F519      2261            mov     (_main_pick_1_133 + 1),a
07F9           2262   L024002?:
07F9           2263   ;        main.c:615: vx_error = abs(vx-vx_thres)*100/vx_thres; 
07F9 E588      2264            mov     a,_main_vx_1_133
07FB C3        2265            clr     c
07FC 9548      2266            subb    a,_vx_thres
07FE F582      2267            mov     dpl,a
0800 E589      2268            mov     a,(_main_vx_1_133 + 1)
0802 9549      2269            subb    a,(_vx_thres + 1)
0804 F583      2270            mov     dph,a
0806 120000    2271            lcall   _abs
0809 858200    2272            mov     __mulint_PARM_2,dpl
080C 858301    2273            mov     (__mulint_PARM_2 + 1),dph
080F 900064    2274            mov     dptr,#0x0064
0812 120000    2275            lcall   __mulint
0815 854800    2276            mov     __divsint_PARM_2,_vx_thres
0818 854901    2277            mov     (__divsint_PARM_2 + 1),(_vx_thres + 1)
081B 120000    2278            lcall   __divsint
081E 858258    2279            mov     _main_vx_error_1_133,dpl
0821 858359    2280            mov     (_main_vx_error_1_133 + 1),dph
0824           2281   ;        main.c:616: vy_error = abs(vy-vy_thres)*100/vy_thres; 
0824 E5C8      2282            mov     a,_main_vy_1_133
0826 C3        2283            clr     c
0827 9508      2284            subb    a,_vy_thres
0829 F582      2285            mov     dpl,a
082B E5C9      2286            mov     a,(_main_vy_1_133 + 1)
082D 9509      2287            subb    a,(_vy_thres + 1)
082F F583      2288            mov     dph,a
0831 120000    2289            lcall   _abs
0834 858200    2290            mov     __mulint_PARM_2,dpl
0837 858301    2291            mov     (__mulint_PARM_2 + 1),dph
083A 900064    2292            mov     dptr,#0x0064
083D 120000    2293            lcall   __mulint
0840 850800    2294            mov     __divsint_PARM_2,_vy_thres
0843 850901    2295            mov     (__divsint_PARM_2 + 1),(_vy_thres + 1)
0846 120000    2296            lcall   __divsint
0849 8582A8    2297            mov     _main_vy_error_1_133,dpl
084C 8583A9    2298            mov     (_main_vy_error_1_133 + 1),dph
084F           2299   ;        main.c:617: vx_err = vx-vx_thres; 
084F E588      2300            mov     a,_main_vx_1_133
0851 C3        2301            clr     c
0852 9548      2302            subb    a,_vx_thres
0854 F5F8      2303            mov     _main_vx_err_1_133,a
0856 E589      2304            mov     a,(_main_vx_1_133 + 1)
0858 9549      2305            subb    a,(_vx_thres + 1)
085A F5F9      2306            mov     (_main_vx_err_1_133 + 1),a
085C           2307   ;        main.c:618: vy_err = vy-vy_thres; 
085C E5C8      2308            mov     a,_main_vy_1_133
085E C3        2309            clr     c
085F 9508      2310            subb    a,_vy_thres
0861 F548      2311            mov     _main_vy_err_1_133,a
0863 E5C9      2312            mov     a,(_main_vy_1_133 + 1)
0865 9509      2313            subb    a,(_vy_thres + 1)
0867 F549      2314            mov     (_main_vy_err_1_133 + 1),a
0869           2315   ;        main.c:619: pwm_left = 0; 
0869 75C800    2316            mov     _pwm_left,#0x00
086C           2317   ;        main.c:620: pwm_right = 0; 
086C 758800    2318            mov     _pwm_right,#0x00
086F           2319   ;        main.c:622: if ((vy_error>5) && (vx_error<5)){
086F C3        2320            clr     c
0870 7405      2321            mov     a,#0x05
0872 95A8      2322            subb    a,_main_vy_error_1_133
0874 E4        2323            clr     a
0875 6480      2324            xrl     a,#0x80
0877 85A9F0    2325            mov     b,(_main_vy_error_1_133 + 1)
087A 63F080    2326            xrl     b,#0x80
087D 95F0      2327            subb    a,b
087F E4        2328            clr     a
0880 33        2329            rlc     a
0881 FF        2330            mov     r7,a
0882 6000      2331            jz      L024007?
0884 C3        2332            clr     c
0885 E558      2333            mov     a,_main_vx_error_1_133
0887 9405      2334            subb    a,#0x05
0889 E559      2335            mov     a,(_main_vx_error_1_133 + 1)
088B 6480      2336            xrl     a,#0x80
088D 9480      2337            subb    a,#0x80
088F 5000      2338            jnc     L024007?
0891           2339   ;        main.c:623: pwm_left = vy_error; 
0891 ADA8      2340            mov     r5,_main_vy_error_1_133
0893 8DC8      2341            mov     _pwm_left,r5
0895           2342   ;        main.c:624: pwm_right = vy_error; 
0895 8D88      2343            mov     _pwm_right,r5
0897           2344   ;        main.c:625: if (vy_err > 0){ //move forward
0897 C3        2345            clr     c
0898 E4        2346            clr     a
0899 9548      2347            subb    a,_main_vy_err_1_133
089B E4        2348            clr     a
089C 6480      2349            xrl     a,#0x80
089E 8549F0    2350            mov     b,(_main_vy_err_1_133 + 1)
08A1 63F080    2351            xrl     b,#0x80
08A4 95F0      2352            subb    a,b
08A6 5000      2353            jnc     L024004?
08A8           2354   ;        main.c:626: L_motor_dir = 0; 
08A8 754800    2355            mov     _L_motor_dir,#0x00
08AB           2356   ;        main.c:627: R_motor_dir = 0; 
08AB 750800    2357            mov     _R_motor_dir,#0x00
08AE 8000      2358            sjmp    L024007?
08B0           2359   L024004?:
08B0           2360   ;        main.c:630: L_motor_dir = 1; 
08B0 754801    2361            mov     _L_motor_dir,#0x01
08B3           2362   ;        main.c:631: R_motor_dir = 1; 
08B3 750801    2363            mov     _R_motor_dir,#0x01
08B6           2364   L024007?:
08B6           2365   ;        main.c:634: if ((vx_error>5)&&(vy_error<5)){
08B6 C3        2366            clr     c
08B7 7405      2367            mov     a,#0x05
08B9 9558      2368            subb    a,_main_vx_error_1_133
08BB E4        2369            clr     a
08BC 6480      2370            xrl     a,#0x80
08BE 8559F0    2371            mov     b,(_main_vx_error_1_133 + 1)
08C1 63F080    2372            xrl     b,#0x80
08C4 95F0      2373            subb    a,b
08C6 E4        2374            clr     a
08C7 33        2375            rlc     a
08C8 FD        2376            mov     r5,a
08C9 6000      2377            jz      L024013?
08CB C3        2378            clr     c
08CC E5A8      2379            mov     a,_main_vy_error_1_133
08CE 9405      2380            subb    a,#0x05
08D0 E5A9      2381            mov     a,(_main_vy_error_1_133 + 1)
08D2 6480      2382            xrl     a,#0x80
08D4 9480      2383            subb    a,#0x80
08D6 5000      2384            jnc     L024013?
08D8           2385   ;        main.c:635: pwm_left = vx_error; 
08D8 AE58      2386            mov     r6,_main_vx_error_1_133
08DA 8EC8      2387            mov     _pwm_left,r6
08DC           2388   ;        main.c:636: pwm_right = vx_error; 
08DC 8E88      2389            mov     _pwm_right,r6
08DE           2390   ;        main.c:637: if (vx_err > 0){ //turn right
08DE C3        2391            clr     c
08DF E4        2392            clr     a
08E0 95F8      2393            subb    a,_main_vx_err_1_133
08E2 E4        2394            clr     a
08E3 6480      2395            xrl     a,#0x80
08E5 85F9F0    2396            mov     b,(_main_vx_err_1_133 + 1)
08E8 63F080    2397            xrl     b,#0x80
08EB 95F0      2398            subb    a,b
08ED 5000      2399            jnc     L024010?
08EF           2400   ;        main.c:638: L_motor_dir = 1; 
08EF 754801    2401            mov     _L_motor_dir,#0x01
08F2           2402   ;        main.c:639: R_motor_dir = 0; 
08F2 750800    2403            mov     _R_motor_dir,#0x00
08F5 8000      2404            sjmp    L024013?
08F7           2405   L024010?:
08F7           2406   ;        main.c:642: L_motor_dir = 0; 
08F7 754800    2407            mov     _L_motor_dir,#0x00
08FA           2408   ;        main.c:643: R_motor_dir = 1; 
08FA 750801    2409            mov     _R_motor_dir,#0x01
08FD           2410   L024013?:
08FD           2411   ;        main.c:646: if ((vx_error>5)&&(vy_error)>5){
08FD ED        2412            mov     a,r5
08FE 7000      2413            jnz     L024090?
0900 020000    2414            ljmp    L024051?
0903           2415   L024090?:
0903 EF        2416            mov     a,r7
0904 7000      2417            jnz     L024091?
0906 020000    2418            ljmp    L024051?
0909           2419   L024091?:
0909           2420   ;        main.c:648: if (vy_err>0){
0909 C3        2421            clr     c
090A E4        2422            clr     a
090B 9548      2423            subb    a,_main_vy_err_1_133
090D E4        2424            clr     a
090E 6480      2425            xrl     a,#0x80
0910 8549F0    2426            mov     b,(_main_vy_err_1_133 + 1)
0913 63F080    2427            xrl     b,#0x80
0916 95F0      2428            subb    a,b
0918 4000      2429            jc      L024092?
091A 020000    2430            ljmp    L024025?
091D           2431   L024092?:
091D           2432   ;        main.c:649: L_motor_dir = 0; 
091D 754800    2433            mov     _L_motor_dir,#0x00
0920           2434   ;        main.c:650: R_motor_dir = 0; 
0920 750800    2435            mov     _R_motor_dir,#0x00
0923           2436   ;        main.c:652: if (vx_err>0){
0923 C3        2437            clr     c
0924 E4        2438            clr     a
0925 95F8      2439            subb    a,_main_vx_err_1_133
0927 E4        2440            clr     a
0928 6480      2441            xrl     a,#0x80
092A 85F9F0    2442            mov     b,(_main_vx_err_1_133 + 1)
092D 63F080    2443            xrl     b,#0x80
0930 95F0      2444            subb    a,b
0932 4000      2445            jc      L024093?
0934 020000    2446            ljmp    L024022?
0937           2447   L024093?:
0937           2448   ;        main.c:653: if (vy*100<=vy_thres*100/2){
0937 85C800    2449            mov     __mulint_PARM_2,_main_vy_1_133
093A 85C901    2450            mov     (__mulint_PARM_2 + 1),(_main_vy_1_133 + 1)
093D 900064    2451            mov     dptr,#0x0064
0940 120000    2452            lcall   __mulint
0943 AD82      2453            mov     r5,dpl
0945 AE83      2454            mov     r6,dph
0947 850800    2455            mov     __mulint_PARM_2,_vy_thres
094A 850901    2456            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
094D 900064    2457            mov     dptr,#0x0064
0950 C005      2458            push    ar5
0952 C006      2459            push    ar6
0954 120000    2460            lcall   __mulint
0957 AF82      2461            mov     r7,dpl
0959 AB83      2462            mov     r3,dph
095B 750002    2463            mov     __divsint_PARM_2,#0x02
095E E4        2464            clr     a
095F F501      2465            mov     (__divsint_PARM_2 + 1),a
0961 8F82      2466            mov     dpl,r7
0963 8B83      2467            mov     dph,r3
0965 120000    2468            lcall   __divsint
0968 AB82      2469            mov     r3,dpl
096A AC83      2470            mov     r4,dph
096C D006      2471            pop     ar6
096E D005      2472            pop     ar5
0970 C3        2473            clr     c
0971 EB        2474            mov     a,r3
0972 9D        2475            subb    a,r5
0973 EC        2476            mov     a,r4
0974 6480      2477            xrl     a,#0x80
0976 8EF0      2478            mov     b,r6
0978 63F080    2479            xrl     b,#0x80
097B 95F0      2480            subb    a,b
097D 4000      2481            jc      L024016?
097F           2482   ;        main.c:654: pwm_left = vy_error; 
097F 85A8C8    2483            mov     _pwm_left,_main_vy_error_1_133
0982           2484   ;        main.c:655: pwm_right = vy_error*100/(vx_error+vy_error);
0982 85A800    2485            mov     __mulint_PARM_2,_main_vy_error_1_133
0985 85A901    2486            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_133 + 1)
0988 900064    2487            mov     dptr,#0x0064
098B 120000    2488            lcall   __mulint
098E AB82      2489            mov     r3,dpl
0990 AC83      2490            mov     r4,dph
0992 E5A8      2491            mov     a,_main_vy_error_1_133
0994 2558      2492            add     a,_main_vx_error_1_133
0996 F500      2493            mov     __divsint_PARM_2,a
0998 E5A9      2494            mov     a,(_main_vy_error_1_133 + 1)
099A 3559      2495            addc    a,(_main_vx_error_1_133 + 1)
099C F501      2496            mov     (__divsint_PARM_2 + 1),a
099E 8B82      2497            mov     dpl,r3
09A0 8C83      2498            mov     dph,r4
09A2 120000    2499            lcall   __divsint
09A5 AB82      2500            mov     r3,dpl
09A7 AC83      2501            mov     r4,dph
09A9 8B88      2502            mov     _pwm_right,r3
09AB 020000    2503            ljmp    L024025?
09AE           2504   L024016?:
09AE           2505   ;        main.c:658: pwm_left = vx_error; 
09AE 8558C8    2506            mov     _pwm_left,_main_vx_error_1_133
09B1           2507   ;        main.c:659: pwm_right = vx_error*100/(vx_error+vy_error);
09B1 855800    2508            mov     __mulint_PARM_2,_main_vx_error_1_133
09B4 855901    2509            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_133 + 1)
09B7 900064    2510            mov     dptr,#0x0064
09BA 120000    2511            lcall   __mulint
09BD AB82      2512            mov     r3,dpl
09BF AC83      2513            mov     r4,dph
09C1 E5A8      2514            mov     a,_main_vy_error_1_133
09C3 2558      2515            add     a,_main_vx_error_1_133
09C5 F500      2516            mov     __divsint_PARM_2,a
09C7 E5A9      2517            mov     a,(_main_vy_error_1_133 + 1)
09C9 3559      2518            addc    a,(_main_vx_error_1_133 + 1)
09CB F501      2519            mov     (__divsint_PARM_2 + 1),a
09CD 8B82      2520            mov     dpl,r3
09CF 8C83      2521            mov     dph,r4
09D1 120000    2522            lcall   __divsint
09D4 AB82      2523            mov     r3,dpl
09D6 AC83      2524            mov     r4,dph
09D8 8B88      2525            mov     _pwm_right,r3
09DA 020000    2526            ljmp    L024025?
09DD           2527   L024022?:
09DD           2528   ;        main.c:664: if (vy*100<=vy_thres*100/2){
09DD 85C800    2529            mov     __mulint_PARM_2,_main_vy_1_133
09E0 85C901    2530            mov     (__mulint_PARM_2 + 1),(_main_vy_1_133 + 1)
09E3 900064    2531            mov     dptr,#0x0064
09E6 120000    2532            lcall   __mulint
09E9 AB82      2533            mov     r3,dpl
09EB AC83      2534            mov     r4,dph
09ED 850800    2535            mov     __mulint_PARM_2,_vy_thres
09F0 850901    2536            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
09F3 900064    2537            mov     dptr,#0x0064
09F6 C003      2538            push    ar3
09F8 C004      2539            push    ar4
09FA 120000    2540            lcall   __mulint
09FD AD82      2541            mov     r5,dpl
09FF AE83      2542            mov     r6,dph
0A01 750002    2543            mov     __divsint_PARM_2,#0x02
0A04 E4        2544            clr     a
0A05 F501      2545            mov     (__divsint_PARM_2 + 1),a
0A07 8D82      2546            mov     dpl,r5
0A09 8E83      2547            mov     dph,r6
0A0B 120000    2548            lcall   __divsint
0A0E AD82      2549            mov     r5,dpl
0A10 AE83      2550            mov     r6,dph
0A12 D004      2551            pop     ar4
0A14 D003      2552            pop     ar3
0A16 C3        2553            clr     c
0A17 ED        2554            mov     a,r5
0A18 9B        2555            subb    a,r3
0A19 EE        2556            mov     a,r6
0A1A 6480      2557            xrl     a,#0x80
0A1C 8CF0      2558            mov     b,r4
0A1E 63F080    2559            xrl     b,#0x80
0A21 95F0      2560            subb    a,b
0A23 4000      2561            jc      L024019?
0A25           2562   ;        main.c:665: pwm_left = vy_error*100/(vx_error+vy_error);
0A25 85A800    2563            mov     __mulint_PARM_2,_main_vy_error_1_133
0A28 85A901    2564            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_133 + 1)
0A2B 900064    2565            mov     dptr,#0x0064
0A2E 120000    2566            lcall   __mulint
0A31 AB82      2567            mov     r3,dpl
0A33 AC83      2568            mov     r4,dph
0A35 E5A8      2569            mov     a,_main_vy_error_1_133
0A37 2558      2570            add     a,_main_vx_error_1_133
0A39 F500      2571            mov     __divsint_PARM_2,a
0A3B E5A9      2572            mov     a,(_main_vy_error_1_133 + 1)
0A3D 3559      2573            addc    a,(_main_vx_error_1_133 + 1)
0A3F F501      2574            mov     (__divsint_PARM_2 + 1),a
0A41 8B82      2575            mov     dpl,r3
0A43 8C83      2576            mov     dph,r4
0A45 120000    2577            lcall   __divsint
0A48 AB82      2578            mov     r3,dpl
0A4A AC83      2579            mov     r4,dph
0A4C 8BC8      2580            mov     _pwm_left,r3
0A4E           2581   ;        main.c:666: pwm_right = vy_error; 
0A4E 85A888    2582            mov     _pwm_right,_main_vy_error_1_133
0A51 8000      2583            sjmp    L024025?
0A53           2584   L024019?:
0A53           2585   ;        main.c:669: pwm_left = vx_error*100/(vx_error+vy_error);
0A53 855800    2586            mov     __mulint_PARM_2,_main_vx_error_1_133
0A56 855901    2587            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_133 + 1)
0A59 900064    2588            mov     dptr,#0x0064
0A5C 120000    2589            lcall   __mulint
0A5F AB82      2590            mov     r3,dpl
0A61 AC83      2591            mov     r4,dph
0A63 E5A8      2592            mov     a,_main_vy_error_1_133
0A65 2558      2593            add     a,_main_vx_error_1_133
0A67 F500      2594            mov     __divsint_PARM_2,a
0A69 E5A9      2595            mov     a,(_main_vy_error_1_133 + 1)
0A6B 3559      2596            addc    a,(_main_vx_error_1_133 + 1)
0A6D F501      2597            mov     (__divsint_PARM_2 + 1),a
0A6F 8B82      2598            mov     dpl,r3
0A71 8C83      2599            mov     dph,r4
0A73 120000    2600            lcall   __divsint
0A76 AB82      2601            mov     r3,dpl
0A78 AC83      2602            mov     r4,dph
0A7A 8BC8      2603            mov     _pwm_left,r3
0A7C           2604   ;        main.c:670: pwm_right = vx_error; 
0A7C 855888    2605            mov     _pwm_right,_main_vx_error_1_133
0A7F           2606   L024025?:
0A7F           2607   ;        main.c:675: if (vy_err<0){
0A7F E549      2608            mov     a,(_main_vy_err_1_133 + 1)
0A81 20E7F8    2609            jb      acc.7,L024096?
0A84 020000    2610            ljmp    L024051?
0A87           2611   L024096?:
0A87           2612   ;        main.c:676: L_motor_dir = 1; 
0A87 754801    2613            mov     _L_motor_dir,#0x01
0A8A           2614   ;        main.c:677: R_motor_dir = 1; 
0A8A 750801    2615            mov     _R_motor_dir,#0x01
0A8D           2616   ;        main.c:679: if (vx_err>0){
0A8D C3        2617            clr     c
0A8E E4        2618            clr     a
0A8F 95F8      2619            subb    a,_main_vx_err_1_133
0A91 E4        2620            clr     a
0A92 6480      2621            xrl     a,#0x80
0A94 85F9F0    2622            mov     b,(_main_vx_err_1_133 + 1)
0A97 63F080    2623            xrl     b,#0x80
0A9A 95F0      2624            subb    a,b
0A9C 4000      2625            jc      L024097?
0A9E 020000    2626            ljmp    L024033?
0AA1           2627   L024097?:
0AA1           2628   ;        main.c:680: if (vy*100<=vy_thres*100/2){
0AA1 85C800    2629            mov     __mulint_PARM_2,_main_vy_1_133
0AA4 85C901    2630            mov     (__mulint_PARM_2 + 1),(_main_vy_1_133 + 1)
0AA7 900064    2631            mov     dptr,#0x0064
0AAA 120000    2632            lcall   __mulint
0AAD AB82      2633            mov     r3,dpl
0AAF AC83      2634            mov     r4,dph
0AB1 850800    2635            mov     __mulint_PARM_2,_vy_thres
0AB4 850901    2636            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0AB7 900064    2637            mov     dptr,#0x0064
0ABA C003      2638            push    ar3
0ABC C004      2639            push    ar4
0ABE 120000    2640            lcall   __mulint
0AC1 AD82      2641            mov     r5,dpl
0AC3 AE83      2642            mov     r6,dph
0AC5 750002    2643            mov     __divsint_PARM_2,#0x02
0AC8 E4        2644            clr     a
0AC9 F501      2645            mov     (__divsint_PARM_2 + 1),a
0ACB 8D82      2646            mov     dpl,r5
0ACD 8E83      2647            mov     dph,r6
0ACF 120000    2648            lcall   __divsint
0AD2 AD82      2649            mov     r5,dpl
0AD4 AE83      2650            mov     r6,dph
0AD6 D004      2651            pop     ar4
0AD8 D003      2652            pop     ar3
0ADA C3        2653            clr     c
0ADB ED        2654            mov     a,r5
0ADC 9B        2655            subb    a,r3
0ADD EE        2656            mov     a,r6
0ADE 6480      2657            xrl     a,#0x80
0AE0 8CF0      2658            mov     b,r4
0AE2 63F080    2659            xrl     b,#0x80
0AE5 95F0      2660            subb    a,b
0AE7 4000      2661            jc      L024027?
0AE9           2662   ;        main.c:681: pwm_left = vy_error; 
0AE9 85A8C8    2663            mov     _pwm_left,_main_vy_error_1_133
0AEC           2664   ;        main.c:682: pwm_right = vy_error*100/(vx_error+vy_error);
0AEC 85A800    2665            mov     __mulint_PARM_2,_main_vy_error_1_133
0AEF 85A901    2666            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_133 + 1)
0AF2 900064    2667            mov     dptr,#0x0064
0AF5 120000    2668            lcall   __mulint
0AF8 AB82      2669            mov     r3,dpl
0AFA AC83      2670            mov     r4,dph
0AFC E5A8      2671            mov     a,_main_vy_error_1_133
0AFE 2558      2672            add     a,_main_vx_error_1_133
0B00 F500      2673            mov     __divsint_PARM_2,a
0B02 E5A9      2674            mov     a,(_main_vy_error_1_133 + 1)
0B04 3559      2675            addc    a,(_main_vx_error_1_133 + 1)
0B06 F501      2676            mov     (__divsint_PARM_2 + 1),a
0B08 8B82      2677            mov     dpl,r3
0B0A 8C83      2678            mov     dph,r4
0B0C 120000    2679            lcall   __divsint
0B0F AB82      2680            mov     r3,dpl
0B11 AC83      2681            mov     r4,dph
0B13 8B88      2682            mov     _pwm_right,r3
0B15 020000    2683            ljmp    L024051?
0B18           2684   L024027?:
0B18           2685   ;        main.c:685: pwm_left = vx_error; 
0B18 8558C8    2686            mov     _pwm_left,_main_vx_error_1_133
0B1B           2687   ;        main.c:686: pwm_right = vx_error*100/(vx_error+vy_error);
0B1B 855800    2688            mov     __mulint_PARM_2,_main_vx_error_1_133
0B1E 855901    2689            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_133 + 1)
0B21 900064    2690            mov     dptr,#0x0064
0B24 120000    2691            lcall   __mulint
0B27 AB82      2692            mov     r3,dpl
0B29 AC83      2693            mov     r4,dph
0B2B E5A8      2694            mov     a,_main_vy_error_1_133
0B2D 2558      2695            add     a,_main_vx_error_1_133
0B2F F500      2696            mov     __divsint_PARM_2,a
0B31 E5A9      2697            mov     a,(_main_vy_error_1_133 + 1)
0B33 3559      2698            addc    a,(_main_vx_error_1_133 + 1)
0B35 F501      2699            mov     (__divsint_PARM_2 + 1),a
0B37 8B82      2700            mov     dpl,r3
0B39 8C83      2701            mov     dph,r4
0B3B 120000    2702            lcall   __divsint
0B3E AB82      2703            mov     r3,dpl
0B40 AC83      2704            mov     r4,dph
0B42 8B88      2705            mov     _pwm_right,r3
0B44 020000    2706            ljmp    L024051?
0B47           2707   L024033?:
0B47           2708   ;        main.c:691: if (vy*100<=vy_thres*100/2){
0B47 85C800    2709            mov     __mulint_PARM_2,_main_vy_1_133
0B4A 85C901    2710            mov     (__mulint_PARM_2 + 1),(_main_vy_1_133 + 1)
0B4D 900064    2711            mov     dptr,#0x0064
0B50 120000    2712            lcall   __mulint
0B53 AB82      2713            mov     r3,dpl
0B55 AC83      2714            mov     r4,dph
0B57 850800    2715            mov     __mulint_PARM_2,_vy_thres
0B5A 850901    2716            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0B5D 900064    2717            mov     dptr,#0x0064
0B60 C003      2718            push    ar3
0B62 C004      2719            push    ar4
0B64 120000    2720            lcall   __mulint
0B67 AD82      2721            mov     r5,dpl
0B69 AE83      2722            mov     r6,dph
0B6B 750002    2723            mov     __divsint_PARM_2,#0x02
0B6E E4        2724            clr     a
0B6F F501      2725            mov     (__divsint_PARM_2 + 1),a
0B71 8D82      2726            mov     dpl,r5
0B73 8E83      2727            mov     dph,r6
0B75 120000    2728            lcall   __divsint
0B78 AD82      2729            mov     r5,dpl
0B7A AE83      2730            mov     r6,dph
0B7C D004      2731            pop     ar4
0B7E D003      2732            pop     ar3
0B80 C3        2733            clr     c
0B81 ED        2734            mov     a,r5
0B82 9B        2735            subb    a,r3
0B83 EE        2736            mov     a,r6
0B84 6480      2737            xrl     a,#0x80
0B86 8CF0      2738            mov     b,r4
0B88 63F080    2739            xrl     b,#0x80
0B8B 95F0      2740            subb    a,b
0B8D 4000      2741            jc      L024030?
0B8F           2742   ;        main.c:692: pwm_left = vy_error*100/(vx_error+vy_error);
0B8F 85A800    2743            mov     __mulint_PARM_2,_main_vy_error_1_133
0B92 85A901    2744            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_133 + 1)
0B95 900064    2745            mov     dptr,#0x0064
0B98 120000    2746            lcall   __mulint
0B9B AB82      2747            mov     r3,dpl
0B9D AC83      2748            mov     r4,dph
0B9F E5A8      2749            mov     a,_main_vy_error_1_133
0BA1 2558      2750            add     a,_main_vx_error_1_133
0BA3 F500      2751            mov     __divsint_PARM_2,a
0BA5 E5A9      2752            mov     a,(_main_vy_error_1_133 + 1)
0BA7 3559      2753            addc    a,(_main_vx_error_1_133 + 1)
0BA9 F501      2754            mov     (__divsint_PARM_2 + 1),a
0BAB 8B82      2755            mov     dpl,r3
0BAD 8C83      2756            mov     dph,r4
0BAF 120000    2757            lcall   __divsint
0BB2 AB82      2758            mov     r3,dpl
0BB4 AC83      2759            mov     r4,dph
0BB6 8BC8      2760            mov     _pwm_left,r3
0BB8           2761   ;        main.c:693: pwm_right = vy_error; 
0BB8 85A888    2762            mov     _pwm_right,_main_vy_error_1_133
0BBB 020000    2763            ljmp    L024051?
0BBE           2764   L024030?:
0BBE           2765   ;        main.c:696: pwm_left = vx_error*100/(vx_error+vy_error);
0BBE 855800    2766            mov     __mulint_PARM_2,_main_vx_error_1_133
0BC1 855901    2767            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_133 + 1)
0BC4 900064    2768            mov     dptr,#0x0064
0BC7 120000    2769            lcall   __mulint
0BCA AB82      2770            mov     r3,dpl
0BCC AC83      2771            mov     r4,dph
0BCE E5A8      2772            mov     a,_main_vy_error_1_133
0BD0 2558      2773            add     a,_main_vx_error_1_133
0BD2 F500      2774            mov     __divsint_PARM_2,a
0BD4 E5A9      2775            mov     a,(_main_vy_error_1_133 + 1)
0BD6 3559      2776            addc    a,(_main_vx_error_1_133 + 1)
0BD8 F501      2777            mov     (__divsint_PARM_2 + 1),a
0BDA 8B82      2778            mov     dpl,r3
0BDC 8C83      2779            mov     dph,r4
0BDE 120000    2780            lcall   __divsint
0BE1 AB82      2781            mov     r3,dpl
0BE3 AC83      2782            mov     r4,dph
0BE5 8BC8      2783            mov     _pwm_left,r3
0BE7           2784   ;        main.c:697: pwm_right = vx_error; 
0BE7 855888    2785            mov     _pwm_right,_main_vx_error_1_133
0BEA 020000    2786            ljmp    L024051?
0BED           2787   L024041?:
0BED           2788   ;        main.c:705: printf("*** BAD MESSAGE ***(%d): %s\r\n", buff,strlen(buff));
0BED 904508    2789            mov     dptr,#_buff
0BF0 75F040    2790            mov     b,#0x40
0BF3 120000    2791            lcall   _strlen
0BF6 AB82      2792            mov     r3,dpl
0BF8 AC83      2793            mov     r4,dph
0BFA C003      2794            push    ar3
0BFC C004      2795            push    ar4
0BFE 7408      2796            mov     a,#_buff
0C00 C0E0      2797            push    acc
0C02 7445      2798            mov     a,#(_buff >> 8)
0C04 C0E0      2799            push    acc
0C06 7440      2800            mov     a,#0x40
0C08 C0E0      2801            push    acc
0C0A 7438      2802            mov     a,#__str_16
0C0C C0E0      2803            push    acc
0C0E 74DF      2804            mov     a,#(__str_16 >> 8)
0C10 C0E0      2805            push    acc
0C12 7480      2806            mov     a,#0x80
0C14 C0E0      2807            push    acc
0C16 120000    2808            lcall   _printf
0C19 E581      2809            mov     a,sp
0C1B 24F8      2810            add     a,#0xf8
0C1D F581      2811            mov     sp,a
0C1F 020000    2812            ljmp    L024051?
0C22           2813   L024046?:
0C22           2814   ;        main.c:711: else if(c=='@') // Master wants slave data
0C22 BA4078    2815            cjne    r2,#0x40,L024100?
0C25 8000      2816            sjmp    L024101?
0C27           2817   L024100?:
0C27 020000    2818            ljmp    L024051?
0C2A           2819   L024101?:
0C2A           2820   ;        main.c:713: sprintf(buff, "%01d,%04d\n", 0, freq100);
0C2A C048      2821            push    _freq100
0C2C C049      2822            push    (_freq100 + 1)
0C2E E4        2823            clr     a
0C2F C0E0      2824            push    acc
0C31 C0E0      2825            push    acc
0C33 74F8      2826            mov     a,#__str_17
0C35 C0E0      2827            push    acc
0C37 74DF      2828            mov     a,#(__str_17 >> 8)
0C39 C0E0      2829            push    acc
0C3B 7480      2830            mov     a,#0x80
0C3D C0E0      2831            push    acc
0C3F 7408      2832            mov     a,#_buff
0C41 C0E0      2833            push    acc
0C43 7445      2834            mov     a,#(_buff >> 8)
0C45 C0E0      2835            push    acc
0C47 7440      2836            mov     a,#0x40
0C49 C0E0      2837            push    acc
0C4B 120000    2838            lcall   _sprintf
0C4E E581      2839            mov     a,sp
0C50 24F6      2840            add     a,#0xf6
0C52 F581      2841            mov     sp,a
0C54           2842   ;        main.c:715: waitms(5); // The radio seems to need this delay...
0C54 900005    2843            mov     dptr,#0x0005
0C57 120000    2844            lcall   _waitms
0C5A           2845   ;        main.c:716: sendstr1(buff);
0C5A 904508    2846            mov     dptr,#_buff
0C5D 75F040    2847            mov     b,#0x40
0C60 120000    2848            lcall   _sendstr1
0C63 020000    2849            ljmp    L024051?
0C66           2850            rseg R_CSEG
0C66           2851   
0000           2852            rseg R_XINIT
0000           2853   
0000           2854            rseg R_CONST
0000           2855   __str_0:
0000 436F6D6D  2856            db 'Command: %s'
     616E643A
     202573
000B 00        2857            db 0x00
000C           2858   __str_1:
000C 52657370  2859            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        2860            db 0x0D
0019 0A        2861            db 0x0A
001A 00        2862            db 0x00
001B           2863   __str_2:
001B 41542B44  2864            db 'AT+DVID0000'
     56494430
     303030
0026 0D        2865            db 0x0D
0027 0A        2866            db 0x0A
0028 00        2867            db 0x00
0029           2868   __str_3:
0029 0D        2869            db 0x0D
002A 0A        2870            db 0x0A
002B 45464D38  2871            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
0046 0D        2872            db 0x0D
0047 0A        2873            db 0x0A
0048 00        2874            db 0x00
0049           2875   __str_4:
0049 41542B56  2876            db 'AT+VER'
     4552
004F 0D        2877            db 0x0D
0050 0A        2878            db 0x0A
0051 00        2879            db 0x00
0052           2880   __str_5:
0052 41542B42  2881            db 'AT+BAUD'
     415544
0059 0D        2882            db 0x0D
005A 0A        2883            db 0x0A
005B 00        2884            db 0x00
005C           2885   __str_6:
005C 41542B52  2886            db 'AT+RFID'
     464944
0063 0D        2887            db 0x0D
0064 0A        2888            db 0x0A
0065 00        2889            db 0x00
0066           2890   __str_7:
0066 41542B44  2891            db 'AT+DVID'
     564944
006D 0D        2892            db 0x0D
006E 0A        2893            db 0x0A
006F 00        2894            db 0x00
0070           2895   __str_8:
0070 41542B52  2896            db 'AT+RFC002'
     46433030
     32
0079 0D        2897            db 0x0D
007A 0A        2898            db 0x0A
007B 00        2899            db 0x00
007C           2900   __str_9:
007C 41542B50  2901            db 'AT+POWE'
     4F5745
0083 0D        2902            db 0x0D
0084 0A        2903            db 0x0A
0085 00        2904            db 0x00
0086           2905   __str_10:
0086 41542B43  2906            db 'AT+CLSS'
     4C5353
008D 0D        2907            db 0x0D
008E 0A        2908            db 0x0A
008F 00        2909            db 0x00
0090           2910   __str_11:
0090 41542B44  2911            db 'AT+DVIDEFEF'
     56494445
     464546
009B 0D        2912            db 0x0D
009C 0A        2913            db 0x0A
009D 00        2914            db 0x00
009E           2915   __str_12:
009E 66726571  2916            db 'freq: %f, bound_flag: %d'
     3A202566
     2C20626F
     756E645F
     666C6167
     3A202564
00B6 0D        2917            db 0x0D
00B7 0A        2918            db 0x0A
00B8 0D        2919            db 0x0D
00B9 00        2920            db 0x00
00BA           2921   __str_13:
00BA 4D617374  2922            db 'Master says: %s'
     65722073
     6179733A
     202573
00C9 0D        2923            db 0x0D
00CA 0A        2924            db 0x0A
00CB 00        2925            db 0x00
00CC           2926   __str_14:
00CC 25303364  2927            db '%03d,%03d,%01d'
     2C253033
     642C2530
     3164
00DA 00        2928            db 0x00
00DB           2929   __str_15:
00DB 4A6F7973  2930            db 'Joystick Received: Vx = %03d, Vy = %03d, Order = %01d'
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25303364
     2C205679
     203D2025
     3033642C
     204F7264
     6572203D
     20253031
     64
0110 0D        2931            db 0x0D
0111 0A        2932            db 0x0A
0112 00        2933            db 0x00
0113           2934   __str_16:
0113 2A2A2A20  2935            db '*** BAD MESSAGE ***(%d): %s'
     42414420
     4D455353
     41474520
     2A2A2A28
     2564293A
     202573
012E 0D        2936            db 0x0D
012F 0A        2937            db 0x0A
0130 00        2938            db 0x00
0131           2939   __str_17:
0131 25303164  2940            db '%01d,%04d'
     2C253034
     64
013A 0A        2941            db 0x0A
013B 00        2942            db 0x00
013C           2943   
0096           2944            CSEG
0096           2945   
0096           2946   end
