0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Mar 27 02:40:10 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _check_bound_PARM_2
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Auto_mode_slave
0000             30            public _get_random_90_250
0000             31            public _simple_rand
0000             32            public _Move_forward
0000             33            public _Right_angle
0000             34            public _Move_back_ms
0000             35            public _Init_all
0000             36            public _check_bound
0000             37            public _servo_pick
0000             38            public _Timer5_ISR
0000             39            public _ADC_at_Pin
0000             40            public _InitPinADC
0000             41            public _InitADC
0000             42            public _Set_Pin_Input
0000             43            public _Set_Pin_Output
0000             44            public _ReceptionOff
0000             45            public _SendATCommand
0000             46            public _waitms_or_RI1
0000             47            public _RXU1
0000             48            public _getstr1
0000             49            public _getchar1_with_timeout
0000             50            public _getchar1
0000             51            public _sendstr1
0000             52            public _putchar1
0000             53            public _UART1_Init
0000             54            public _waitms
0000             55            public _Timer3us
0000             56            public __c51_external_startup
0000             57            public _buff
0000             58            public _getstr1_PARM_2
0000             59            public _seed
0000             60            public _d2
0000             61            public _d1
0000             62            public _fre_mea_count
0000             63            public _freq100
0000             64            public _vy
0000             65            public _vx
0000             66            public _vy_thres
0000             67            public _vx_thres
0000             68            public _servo_arm
0000             69            public _servo_base
0000             70            public _R_motor_dir
0000             71            public _L_motor_dir
0000             72            public _pwm_right
0000             73            public _pwm_left
0000             74            public _servo_counter
0000             75            public _pwm_counter
0000             76   ;--------------------------------------------------------
0000             77   ; Special Function Registers
0000             78   ;--------------------------------------------------------
0000             79   _ACC            DATA 0xe0
0000             80   _ADC0ASAH       DATA 0xb6
0000             81   _ADC0ASAL       DATA 0xb5
0000             82   _ADC0ASCF       DATA 0xa1
0000             83   _ADC0ASCT       DATA 0xc7
0000             84   _ADC0CF0        DATA 0xbc
0000             85   _ADC0CF1        DATA 0xb9
0000             86   _ADC0CF2        DATA 0xdf
0000             87   _ADC0CN0        DATA 0xe8
0000             88   _ADC0CN1        DATA 0xb2
0000             89   _ADC0CN2        DATA 0xb3
0000             90   _ADC0GTH        DATA 0xc4
0000             91   _ADC0GTL        DATA 0xc3
0000             92   _ADC0H          DATA 0xbe
0000             93   _ADC0L          DATA 0xbd
0000             94   _ADC0LTH        DATA 0xc6
0000             95   _ADC0LTL        DATA 0xc5
0000             96   _ADC0MX         DATA 0xbb
0000             97   _B              DATA 0xf0
0000             98   _CKCON0         DATA 0x8e
0000             99   _CKCON1         DATA 0xa6
0000            100   _CLEN0          DATA 0xc6
0000            101   _CLIE0          DATA 0xc7
0000            102   _CLIF0          DATA 0xe8
0000            103   _CLKSEL         DATA 0xa9
0000            104   _CLOUT0         DATA 0xd1
0000            105   _CLU0CF         DATA 0xb1
0000            106   _CLU0FN         DATA 0xaf
0000            107   _CLU0MX         DATA 0x84
0000            108   _CLU1CF         DATA 0xb3
0000            109   _CLU1FN         DATA 0xb2
0000            110   _CLU1MX         DATA 0x85
0000            111   _CLU2CF         DATA 0xb6
0000            112   _CLU2FN         DATA 0xb5
0000            113   _CLU2MX         DATA 0x91
0000            114   _CLU3CF         DATA 0xbf
0000            115   _CLU3FN         DATA 0xbe
0000            116   _CLU3MX         DATA 0xae
0000            117   _CMP0CN0        DATA 0x9b
0000            118   _CMP0CN1        DATA 0x99
0000            119   _CMP0MD         DATA 0x9d
0000            120   _CMP0MX         DATA 0x9f
0000            121   _CMP1CN0        DATA 0xbf
0000            122   _CMP1CN1        DATA 0xac
0000            123   _CMP1MD         DATA 0xab
0000            124   _CMP1MX         DATA 0xaa
0000            125   _CRC0CN0        DATA 0xce
0000            126   _CRC0CN1        DATA 0x86
0000            127   _CRC0CNT        DATA 0xd3
0000            128   _CRC0DAT        DATA 0xcb
0000            129   _CRC0FLIP       DATA 0xcf
0000            130   _CRC0IN         DATA 0xca
0000            131   _CRC0ST         DATA 0xd2
0000            132   _DAC0CF0        DATA 0x91
0000            133   _DAC0CF1        DATA 0x92
0000            134   _DAC0H          DATA 0x85
0000            135   _DAC0L          DATA 0x84
0000            136   _DAC1CF0        DATA 0x93
0000            137   _DAC1CF1        DATA 0x94
0000            138   _DAC1H          DATA 0x8a
0000            139   _DAC1L          DATA 0x89
0000            140   _DAC2CF0        DATA 0x95
0000            141   _DAC2CF1        DATA 0x96
0000            142   _DAC2H          DATA 0x8c
0000            143   _DAC2L          DATA 0x8b
0000            144   _DAC3CF0        DATA 0x9a
0000            145   _DAC3CF1        DATA 0x9c
0000            146   _DAC3H          DATA 0x8e
0000            147   _DAC3L          DATA 0x8d
0000            148   _DACGCF0        DATA 0x88
0000            149   _DACGCF1        DATA 0x98
0000            150   _DACGCF2        DATA 0xa2
0000            151   _DERIVID        DATA 0xad
0000            152   _DEVICEID       DATA 0xb5
0000            153   _DPH            DATA 0x83
0000            154   _DPL            DATA 0x82
0000            155   _EIE1           DATA 0xe6
0000            156   _EIE2           DATA 0xf3
0000            157   _EIP1           DATA 0xbb
0000            158   _EIP1H          DATA 0xee
0000            159   _EIP2           DATA 0xed
0000            160   _EIP2H          DATA 0xf6
0000            161   _EMI0CN         DATA 0xe7
0000            162   _FLKEY          DATA 0xb7
0000            163   _HFO0CAL        DATA 0xc7
0000            164   _HFO1CAL        DATA 0xd6
0000            165   _HFOCN          DATA 0xef
0000            166   _I2C0ADM        DATA 0xff
0000            167   _I2C0CN0        DATA 0xba
0000            168   _I2C0DIN        DATA 0xbc
0000            169   _I2C0DOUT       DATA 0xbb
0000            170   _I2C0FCN0       DATA 0xad
0000            171   _I2C0FCN1       DATA 0xab
0000            172   _I2C0FCT        DATA 0xf5
0000            173   _I2C0SLAD       DATA 0xbd
0000            174   _I2C0STAT       DATA 0xb9
0000            175   _IE             DATA 0xa8
0000            176   _IP             DATA 0xb8
0000            177   _IPH            DATA 0xf2
0000            178   _IT01CF         DATA 0xe4
0000            179   _LFO0CN         DATA 0xb1
0000            180   _P0             DATA 0x80
0000            181   _P0MASK         DATA 0xfe
0000            182   _P0MAT          DATA 0xfd
0000            183   _P0MDIN         DATA 0xf1
0000            184   _P0MDOUT        DATA 0xa4
0000            185   _P0SKIP         DATA 0xd4
0000            186   _P1             DATA 0x90
0000            187   _P1MASK         DATA 0xee
0000            188   _P1MAT          DATA 0xed
0000            189   _P1MDIN         DATA 0xf2
0000            190   _P1MDOUT        DATA 0xa5
0000            191   _P1SKIP         DATA 0xd5
0000            192   _P2             DATA 0xa0
0000            193   _P2MASK         DATA 0xfc
0000            194   _P2MAT          DATA 0xfb
0000            195   _P2MDIN         DATA 0xf3
0000            196   _P2MDOUT        DATA 0xa6
0000            197   _P2SKIP         DATA 0xcc
0000            198   _P3             DATA 0xb0
0000            199   _P3MDIN         DATA 0xf4
0000            200   _P3MDOUT        DATA 0x9c
0000            201   _PCA0CENT       DATA 0x9e
0000            202   _PCA0CLR        DATA 0x9c
0000            203   _PCA0CN0        DATA 0xd8
0000            204   _PCA0CPH0       DATA 0xfc
0000            205   _PCA0CPH1       DATA 0xea
0000            206   _PCA0CPH2       DATA 0xec
0000            207   _PCA0CPH3       DATA 0xf5
0000            208   _PCA0CPH4       DATA 0x85
0000            209   _PCA0CPH5       DATA 0xde
0000            210   _PCA0CPL0       DATA 0xfb
0000            211   _PCA0CPL1       DATA 0xe9
0000            212   _PCA0CPL2       DATA 0xeb
0000            213   _PCA0CPL3       DATA 0xf4
0000            214   _PCA0CPL4       DATA 0x84
0000            215   _PCA0CPL5       DATA 0xdd
0000            216   _PCA0CPM0       DATA 0xda
0000            217   _PCA0CPM1       DATA 0xdb
0000            218   _PCA0CPM2       DATA 0xdc
0000            219   _PCA0CPM3       DATA 0xae
0000            220   _PCA0CPM4       DATA 0xaf
0000            221   _PCA0CPM5       DATA 0xcc
0000            222   _PCA0H          DATA 0xfa
0000            223   _PCA0L          DATA 0xf9
0000            224   _PCA0MD         DATA 0xd9
0000            225   _PCA0POL        DATA 0x96
0000            226   _PCA0PWM        DATA 0xf7
0000            227   _PCON0          DATA 0x87
0000            228   _PCON1          DATA 0xcd
0000            229   _PFE0CN         DATA 0xc1
0000            230   _PRTDRV         DATA 0xf6
0000            231   _PSCTL          DATA 0x8f
0000            232   _PSTAT0         DATA 0xaa
0000            233   _PSW            DATA 0xd0
0000            234   _REF0CN         DATA 0xd1
0000            235   _REG0CN         DATA 0xc9
0000            236   _REVID          DATA 0xb6
0000            237   _RSTSRC         DATA 0xef
0000            238   _SBCON1         DATA 0x94
0000            239   _SBRLH1         DATA 0x96
0000            240   _SBRLL1         DATA 0x95
0000            241   _SBUF           DATA 0x99
0000            242   _SBUF0          DATA 0x99
0000            243   _SBUF1          DATA 0x92
0000            244   _SCON           DATA 0x98
0000            245   _SCON0          DATA 0x98
0000            246   _SCON1          DATA 0xc8
0000            247   _SFRPAGE        DATA 0xa7
0000            248   _SFRPGCN        DATA 0xbc
0000            249   _SFRSTACK       DATA 0xd7
0000            250   _SMB0ADM        DATA 0xd6
0000            251   _SMB0ADR        DATA 0xd7
0000            252   _SMB0CF         DATA 0xc1
0000            253   _SMB0CN0        DATA 0xc0
0000            254   _SMB0DAT        DATA 0xc2
0000            255   _SMB0FCN0       DATA 0xc3
0000            256   _SMB0FCN1       DATA 0xc4
0000            257   _SMB0FCT        DATA 0xef
0000            258   _SMB0RXLN       DATA 0xc5
0000            259   _SMB0TC         DATA 0xac
0000            260   _SMOD1          DATA 0x93
0000            261   _SP             DATA 0x81
0000            262   _SPI0CFG        DATA 0xa1
0000            263   _SPI0CKR        DATA 0xa2
0000            264   _SPI0CN0        DATA 0xf8
0000            265   _SPI0DAT        DATA 0xa3
0000            266   _SPI0FCN0       DATA 0x9a
0000            267   _SPI0FCN1       DATA 0x9b
0000            268   _SPI0FCT        DATA 0xf7
0000            269   _SPI0PCF        DATA 0xdf
0000            270   _TCON           DATA 0x88
0000            271   _TH0            DATA 0x8c
0000            272   _TH1            DATA 0x8d
0000            273   _TL0            DATA 0x8a
0000            274   _TL1            DATA 0x8b
0000            275   _TMOD           DATA 0x89
0000            276   _TMR2CN0        DATA 0xc8
0000            277   _TMR2CN1        DATA 0xfd
0000            278   _TMR2H          DATA 0xcf
0000            279   _TMR2L          DATA 0xce
0000            280   _TMR2RLH        DATA 0xcb
0000            281   _TMR2RLL        DATA 0xca
0000            282   _TMR3CN0        DATA 0x91
0000            283   _TMR3CN1        DATA 0xfe
0000            284   _TMR3H          DATA 0x95
0000            285   _TMR3L          DATA 0x94
0000            286   _TMR3RLH        DATA 0x93
0000            287   _TMR3RLL        DATA 0x92
0000            288   _TMR4CN0        DATA 0x98
0000            289   _TMR4CN1        DATA 0xff
0000            290   _TMR4H          DATA 0xa5
0000            291   _TMR4L          DATA 0xa4
0000            292   _TMR4RLH        DATA 0xa3
0000            293   _TMR4RLL        DATA 0xa2
0000            294   _TMR5CN0        DATA 0xc0
0000            295   _TMR5CN1        DATA 0xf1
0000            296   _TMR5H          DATA 0xd5
0000            297   _TMR5L          DATA 0xd4
0000            298   _TMR5RLH        DATA 0xd3
0000            299   _TMR5RLL        DATA 0xd2
0000            300   _UART0PCF       DATA 0xd9
0000            301   _UART1FCN0      DATA 0x9d
0000            302   _UART1FCN1      DATA 0xd8
0000            303   _UART1FCT       DATA 0xfa
0000            304   _UART1LIN       DATA 0x9e
0000            305   _UART1PCF       DATA 0xda
0000            306   _VDM0CN         DATA 0xff
0000            307   _WDTCN          DATA 0x97
0000            308   _XBR0           DATA 0xe1
0000            309   _XBR1           DATA 0xe2
0000            310   _XBR2           DATA 0xe3
0000            311   _XOSC0CN        DATA 0x86
0000            312   _DPTR           DATA 0x8382
0000            313   _TMR2RL         DATA 0xcbca
0000            314   _TMR3RL         DATA 0x9392
0000            315   _TMR4RL         DATA 0xa3a2
0000            316   _TMR5RL         DATA 0xd3d2
0000            317   _TMR0           DATA 0x8c8a
0000            318   _TMR1           DATA 0x8d8b
0000            319   _TMR2           DATA 0xcfce
0000            320   _TMR3           DATA 0x9594
0000            321   _TMR4           DATA 0xa5a4
0000            322   _TMR5           DATA 0xd5d4
0000            323   _SBRL1          DATA 0x9695
0000            324   _PCA0           DATA 0xfaf9
0000            325   _PCA0CP0        DATA 0xfcfb
0000            326   _PCA0CP1        DATA 0xeae9
0000            327   _PCA0CP2        DATA 0xeceb
0000            328   _PCA0CP3        DATA 0xf5f4
0000            329   _PCA0CP4        DATA 0x8584
0000            330   _PCA0CP5        DATA 0xdedd
0000            331   _ADC0ASA        DATA 0xb6b5
0000            332   _ADC0GT         DATA 0xc4c3
0000            333   _ADC0           DATA 0xbebd
0000            334   _ADC0LT         DATA 0xc6c5
0000            335   _DAC0           DATA 0x8584
0000            336   _DAC1           DATA 0x8a89
0000            337   _DAC2           DATA 0x8c8b
0000            338   _DAC3           DATA 0x8e8d
0000            339   ;--------------------------------------------------------
0000            340   ; special function bits
0000            341   ;--------------------------------------------------------
0000            342   _ACC_0          BIT 0xe0
0000            343   _ACC_1          BIT 0xe1
0000            344   _ACC_2          BIT 0xe2
0000            345   _ACC_3          BIT 0xe3
0000            346   _ACC_4          BIT 0xe4
0000            347   _ACC_5          BIT 0xe5
0000            348   _ACC_6          BIT 0xe6
0000            349   _ACC_7          BIT 0xe7
0000            350   _TEMPE          BIT 0xe8
0000            351   _ADGN0          BIT 0xe9
0000            352   _ADGN1          BIT 0xea
0000            353   _ADWINT         BIT 0xeb
0000            354   _ADBUSY         BIT 0xec
0000            355   _ADINT          BIT 0xed
0000            356   _IPOEN          BIT 0xee
0000            357   _ADEN           BIT 0xef
0000            358   _B_0            BIT 0xf0
0000            359   _B_1            BIT 0xf1
0000            360   _B_2            BIT 0xf2
0000            361   _B_3            BIT 0xf3
0000            362   _B_4            BIT 0xf4
0000            363   _B_5            BIT 0xf5
0000            364   _B_6            BIT 0xf6
0000            365   _B_7            BIT 0xf7
0000            366   _C0FIF          BIT 0xe8
0000            367   _C0RIF          BIT 0xe9
0000            368   _C1FIF          BIT 0xea
0000            369   _C1RIF          BIT 0xeb
0000            370   _C2FIF          BIT 0xec
0000            371   _C2RIF          BIT 0xed
0000            372   _C3FIF          BIT 0xee
0000            373   _C3RIF          BIT 0xef
0000            374   _D1SRC0         BIT 0x88
0000            375   _D1SRC1         BIT 0x89
0000            376   _D1AMEN         BIT 0x8a
0000            377   _D01REFSL       BIT 0x8b
0000            378   _D3SRC0         BIT 0x8c
0000            379   _D3SRC1         BIT 0x8d
0000            380   _D3AMEN         BIT 0x8e
0000            381   _D23REFSL       BIT 0x8f
0000            382   _D0UDIS         BIT 0x98
0000            383   _D1UDIS         BIT 0x99
0000            384   _D2UDIS         BIT 0x9a
0000            385   _D3UDIS         BIT 0x9b
0000            386   _EX0            BIT 0xa8
0000            387   _ET0            BIT 0xa9
0000            388   _EX1            BIT 0xaa
0000            389   _ET1            BIT 0xab
0000            390   _ES0            BIT 0xac
0000            391   _ET2            BIT 0xad
0000            392   _ESPI0          BIT 0xae
0000            393   _EA             BIT 0xaf
0000            394   _PX0            BIT 0xb8
0000            395   _PT0            BIT 0xb9
0000            396   _PX1            BIT 0xba
0000            397   _PT1            BIT 0xbb
0000            398   _PS0            BIT 0xbc
0000            399   _PT2            BIT 0xbd
0000            400   _PSPI0          BIT 0xbe
0000            401   _P0_0           BIT 0x80
0000            402   _P0_1           BIT 0x81
0000            403   _P0_2           BIT 0x82
0000            404   _P0_3           BIT 0x83
0000            405   _P0_4           BIT 0x84
0000            406   _P0_5           BIT 0x85
0000            407   _P0_6           BIT 0x86
0000            408   _P0_7           BIT 0x87
0000            409   _P1_0           BIT 0x90
0000            410   _P1_1           BIT 0x91
0000            411   _P1_2           BIT 0x92
0000            412   _P1_3           BIT 0x93
0000            413   _P1_4           BIT 0x94
0000            414   _P1_5           BIT 0x95
0000            415   _P1_6           BIT 0x96
0000            416   _P1_7           BIT 0x97
0000            417   _P2_0           BIT 0xa0
0000            418   _P2_1           BIT 0xa1
0000            419   _P2_2           BIT 0xa2
0000            420   _P2_3           BIT 0xa3
0000            421   _P2_4           BIT 0xa4
0000            422   _P2_5           BIT 0xa5
0000            423   _P2_6           BIT 0xa6
0000            424   _P3_0           BIT 0xb0
0000            425   _P3_1           BIT 0xb1
0000            426   _P3_2           BIT 0xb2
0000            427   _P3_3           BIT 0xb3
0000            428   _P3_4           BIT 0xb4
0000            429   _P3_7           BIT 0xb7
0000            430   _CCF0           BIT 0xd8
0000            431   _CCF1           BIT 0xd9
0000            432   _CCF2           BIT 0xda
0000            433   _CCF3           BIT 0xdb
0000            434   _CCF4           BIT 0xdc
0000            435   _CCF5           BIT 0xdd
0000            436   _CR             BIT 0xde
0000            437   _CF             BIT 0xdf
0000            438   _PARITY         BIT 0xd0
0000            439   _F1             BIT 0xd1
0000            440   _OV             BIT 0xd2
0000            441   _RS0            BIT 0xd3
0000            442   _RS1            BIT 0xd4
0000            443   _F0             BIT 0xd5
0000            444   _AC             BIT 0xd6
0000            445   _CY             BIT 0xd7
0000            446   _RI             BIT 0x98
0000            447   _TI             BIT 0x99
0000            448   _RB8            BIT 0x9a
0000            449   _TB8            BIT 0x9b
0000            450   _REN            BIT 0x9c
0000            451   _CE             BIT 0x9d
0000            452   _SMODE          BIT 0x9e
0000            453   _RI1            BIT 0xc8
0000            454   _TI1            BIT 0xc9
0000            455   _RBX1           BIT 0xca
0000            456   _TBX1           BIT 0xcb
0000            457   _REN1           BIT 0xcc
0000            458   _PERR1          BIT 0xcd
0000            459   _OVR1           BIT 0xce
0000            460   _SI             BIT 0xc0
0000            461   _ACK            BIT 0xc1
0000            462   _ARBLOST        BIT 0xc2
0000            463   _ACKRQ          BIT 0xc3
0000            464   _STO            BIT 0xc4
0000            465   _STA            BIT 0xc5
0000            466   _TXMODE         BIT 0xc6
0000            467   _MASTER         BIT 0xc7
0000            468   _SPIEN          BIT 0xf8
0000            469   _TXNF           BIT 0xf9
0000            470   _NSSMD0         BIT 0xfa
0000            471   _NSSMD1         BIT 0xfb
0000            472   _RXOVRN         BIT 0xfc
0000            473   _MODF           BIT 0xfd
0000            474   _WCOL           BIT 0xfe
0000            475   _SPIF           BIT 0xff
0000            476   _IT0            BIT 0x88
0000            477   _IE0            BIT 0x89
0000            478   _IT1            BIT 0x8a
0000            479   _IE1            BIT 0x8b
0000            480   _TR0            BIT 0x8c
0000            481   _TF0            BIT 0x8d
0000            482   _TR1            BIT 0x8e
0000            483   _TF1            BIT 0x8f
0000            484   _T2XCLK0        BIT 0xc8
0000            485   _T2XCLK1        BIT 0xc9
0000            486   _TR2            BIT 0xca
0000            487   _T2SPLIT        BIT 0xcb
0000            488   _TF2CEN         BIT 0xcc
0000            489   _TF2LEN         BIT 0xcd
0000            490   _TF2L           BIT 0xce
0000            491   _TF2H           BIT 0xcf
0000            492   _T4XCLK0        BIT 0x98
0000            493   _T4XCLK1        BIT 0x99
0000            494   _TR4            BIT 0x9a
0000            495   _T4SPLIT        BIT 0x9b
0000            496   _TF4CEN         BIT 0x9c
0000            497   _TF4LEN         BIT 0x9d
0000            498   _TF4L           BIT 0x9e
0000            499   _TF4H           BIT 0x9f
0000            500   _T5XCLK0        BIT 0xc0
0000            501   _T5XCLK1        BIT 0xc1
0000            502   _TR5            BIT 0xc2
0000            503   _T5SPLIT        BIT 0xc3
0000            504   _TF5CEN         BIT 0xc4
0000            505   _TF5LEN         BIT 0xc5
0000            506   _TF5L           BIT 0xc6
0000            507   _TF5H           BIT 0xc7
0000            508   _RIE            BIT 0xd8
0000            509   _RXTO0          BIT 0xd9
0000            510   _RXTO1          BIT 0xda
0000            511   _RFRQ           BIT 0xdb
0000            512   _TIE            BIT 0xdc
0000            513   _TXHOLD         BIT 0xdd
0000            514   _TXNF1          BIT 0xde
0000            515   _TFRQ           BIT 0xdf
0000            516   ;--------------------------------------------------------
0000            517   ; overlayable register banks
0000            518   ;--------------------------------------------------------
0000            519            rbank0 segment data overlay
0000            520   ;--------------------------------------------------------
0000            521   ; overlayable bit register bank
0000            522   ;--------------------------------------------------------
0000            523            rseg BIT_BANK
0000            524   bits:
0000            525            ds 1
0001            526            b0 equ  bits.0 
0001            527            b1 equ  bits.1 
0001            528            b2 equ  bits.2 
0001            529            b3 equ  bits.3 
0001            530            b4 equ  bits.4 
0001            531            b5 equ  bits.5 
0001            532            b6 equ  bits.6 
0001            533            b7 equ  bits.7 
0001            534   ;--------------------------------------------------------
0001            535   ; internal ram data
0001            536   ;--------------------------------------------------------
0000            537            rseg R_DSEG
0000            538   _pwm_counter:
0000            539            ds 2
0002            540   _servo_counter:
0002            541            ds 2
0004            542   _pwm_left:
0004            543            ds 1
0005            544   _pwm_right:
0005            545            ds 1
0006            546   _L_motor_dir:
0006            547            ds 1
0007            548   _R_motor_dir:
0007            549            ds 1
0008            550   _servo_base:
0008            551            ds 1
0009            552   _servo_arm:
0009            553            ds 1
000A            554   _vx_thres:
000A            555            ds 2
000C            556   _vy_thres:
000C            557            ds 2
000E            558   _vx:
000E            559            ds 2
0010            560   _vy:
0010            561            ds 2
0012            562   _freq100:
0012            563            ds 4
0016            564   _fre_mea_count:
0016            565            ds 2
0018            566   _d1:
0018            567            ds 2
001A            568   _d2:
001A            569            ds 2
001C            570   _seed:
001C            571            ds 2
001E            572   _getstr1_PARM_2:
001E            573            ds 1
001F            574   _Auto_mode_slave_command_1_139:
001F            575            ds 2
0021            576   _Auto_mode_slave_state_res_1_139:
0021            577            ds 2
0023            578   _Auto_mode_slave_dummy_1_139:
0023            579            ds 2
0025            580   _main_vx_error_1_148:
0025            581            ds 2
0027            582   _main_vy_error_1_148:
0027            583            ds 2
0029            584   _main_vx_err_1_148:
0029            585            ds 2
002B            586   _main_vy_err_1_148:
002B            587            ds 2
002D            588   _main_vx_1_148:
002D            589            ds 2
002F            590   _main_vy_1_148:
002F            591            ds 2
0031            592   _main_pick_1_148:
0031            593            ds 2
0033            594   _main_auto_mode_1_148:
0033            595            ds 2
0035            596   ;--------------------------------------------------------
0035            597   ; overlayable items in internal ram 
0035            598   ;--------------------------------------------------------
0000            599            rseg    R_OSEG
0000            600            rseg    R_OSEG
0000            601            rseg    R_OSEG
0000            602            rseg    R_OSEG
0000            603            rseg    R_OSEG
0000            604            rseg    R_OSEG
0000            605   _InitPinADC_PARM_2:
0000            606            ds 1
0001            607            rseg    R_OSEG
0001            608            rseg    R_OSEG
0001            609   _check_bound_PARM_2:
0001            610            ds 2
0003            611   ;--------------------------------------------------------
0003            612   ; indirectly addressable internal ram data
0003            613   ;--------------------------------------------------------
0000            614            rseg R_ISEG
0000            615   _buff:
0000            616            ds 20
0014            617   ;--------------------------------------------------------
0014            618   ; absolute internal ram data
0014            619   ;--------------------------------------------------------
0000            620            DSEG
0000            621   ;--------------------------------------------------------
0000            622   ; bit data
0000            623   ;--------------------------------------------------------
0000            624            rseg R_BSEG
0000            625   ;--------------------------------------------------------
0000            626   ; paged external ram data
0000            627   ;--------------------------------------------------------
0000            628            rseg R_PSEG
0000            629   ;--------------------------------------------------------
0000            630   ; external ram data
0000            631   ;--------------------------------------------------------
0000            632            rseg R_XSEG
0000            633   ;--------------------------------------------------------
0000            634   ; absolute external ram data
0000            635   ;--------------------------------------------------------
0000            636            XSEG
0000            637   ;--------------------------------------------------------
0000            638   ; external initialized ram data
0000            639   ;--------------------------------------------------------
0000            640            rseg R_IXSEG
0000            641            rseg R_HOME
0000            642            rseg R_GSINIT
0000            643            rseg R_CSEG
0000            644   ;--------------------------------------------------------
0000            645   ; Reset entry point and interrupt vectors
0000            646   ;--------------------------------------------------------
0000            647            CSEG at 0x0000
0000 020000     648            ljmp    _crt0
0093            649            CSEG at 0x0093
0093 020000     650            ljmp    _Timer5_ISR
0096            651   ;--------------------------------------------------------
0096            652   ; global & static initialisations
0096            653   ;--------------------------------------------------------
0000            654            rseg R_HOME
0000            655            rseg R_GSINIT
0000            656            rseg R_GSINIT
0000            657   ;--------------------------------------------------------
0000            658   ; data variables initialization
0000            659   ;--------------------------------------------------------
0000            660            rseg R_DINIT
0000            661   ;        main.c:51: unsigned int pwm_counter = 0; 
0000 E4         662            clr     a
0001 F530       663            mov     _pwm_counter,a
0003 F531       664            mov     (_pwm_counter + 1),a
0005            665   ;        main.c:52: unsigned int servo_counter = 0; 
0005 E4         666            clr     a
0006 F5F0       667            mov     _servo_counter,a
0008 F5F1       668            mov     (_servo_counter + 1),a
000A            669   ;        main.c:53: unsigned char pwm_left = 0, pwm_right = 0; 
000A 75B000     670            mov     _pwm_left,#0x00
000D            671   ;        main.c:53: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
000D 757000     672            mov     _pwm_right,#0x00
0010            673   ;        main.c:54: unsigned char servo_base = 1, servo_arm = 1; 
0010 753001     674            mov     _L_motor_dir,#0x01
0013            675   ;        main.c:54: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
0013 75F001     676            mov     _R_motor_dir,#0x01
0016            677   ;        main.c:55: unsigned char servo_base = 1, servo_arm = 1; 
0016 75B001     678            mov     _servo_base,#0x01
0019            679   ;        main.c:55: int vx_thres = 161, vy_thres = 166; 
0019 757001     680            mov     _servo_arm,#0x01
001C            681   ;        main.c:56: int vx = 0, vy = 0; 
001C 7530A1     682            mov     _vx_thres,#0xA1
001F E4         683            clr     a
0020 F531       684            mov     (_vx_thres + 1),a
0022            685   ;        main.c:56: int vx_thres = 161, vy_thres = 166; 
0022 75F0A6     686            mov     _vy_thres,#0xA6
0025 E4         687            clr     a
0026 F5F1       688            mov     (_vy_thres + 1),a
0028            689   ;        main.c:57: int vx = 0, vy = 0; 
0028 E4         690            clr     a
0029 F5B0       691            mov     _vx,a
002B F5B1       692            mov     (_vx + 1),a
002D            693   ;        main.c:57: long freq100;
002D E4         694            clr     a
002E F570       695            mov     _vy,a
0030 F571       696            mov     (_vy + 1),a
0032            697   ;        main.c:59: unsigned int fre_mea_count = 0;
0032 E4         698            clr     a
0033 F5F0       699            mov     _fre_mea_count,a
0035 F5F1       700            mov     (_fre_mea_count + 1),a
0037            701   ;        main.c:61: unsigned int seed = 12345;
0037 753039     702            mov     _seed,#0x39
003A 753130     703            mov     (_seed + 1),#0x30
003D            704            ; The linker places a 'ret' at the end of segment R_DINIT.
003D            705   ;--------------------------------------------------------
003D            706   ; code
003D            707   ;--------------------------------------------------------
0000            708            rseg R_CSEG
0000            709   ;------------------------------------------------------------
0000            710   ;Allocation info for local variables in function '_c51_external_startup'
0000            711   ;------------------------------------------------------------
0000            712   ;------------------------------------------------------------
0000            713   ;        main.c:64: char _c51_external_startup (void)
0000            714   ;        -----------------------------------------
0000            715   ;         function _c51_external_startup
0000            716   ;        -----------------------------------------
0000            717   __c51_external_startup:
0000            718            using   0
0000            719   ;        main.c:67: SFRPAGE = 0x00;
0000 75A700     720            mov     _SFRPAGE,#0x00
0003            721   ;        main.c:68: WDTCN = 0xDE; //First key
0003 7597DE     722            mov     _WDTCN,#0xDE
0006            723   ;        main.c:69: WDTCN = 0xAD; //Second key
0006 7597AD     724            mov     _WDTCN,#0xAD
0009            725   ;        main.c:71: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     726            mov     _VDM0CN,#0x80
000C            727   ;        main.c:72: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     728            mov     _RSTSRC,#0x06
000F            729   ;        main.c:79: SFRPAGE = 0x10;
000F 75A710     730            mov     _SFRPAGE,#0x10
0012            731   ;        main.c:80: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     732            mov     _PFE0CN,#0x20
0015            733   ;        main.c:81: SFRPAGE = 0x00;
0015 75A700     734            mov     _SFRPAGE,#0x00
0018            735   ;        main.c:102: CLKSEL = 0x00;
0018 75A900     736            mov     _CLKSEL,#0x00
001B            737   ;        main.c:103: CLKSEL = 0x00;
001B 75A900     738            mov     _CLKSEL,#0x00
001E            739   ;        main.c:104: while ((CLKSEL & 0x80) == 0);
001E            740   L002001?:
001E E5A9       741            mov     a,_CLKSEL
0020 30E7D0     742            jnb     acc.7,L002001?
0023            743   ;        main.c:105: CLKSEL = 0x03;
0023 75A903     744            mov     _CLKSEL,#0x03
0026            745   ;        main.c:106: CLKSEL = 0x03;
0026 75A903     746            mov     _CLKSEL,#0x03
0029            747   ;        main.c:107: while ((CLKSEL & 0x80) == 0);
0029            748   L002004?:
0029 E5A9       749            mov     a,_CLKSEL
002B 30E750     750            jnb     acc.7,L002004?
002E            751   ;        main.c:112: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     752            orl     _P0MDOUT,#0x11
0031            753   ;        main.c:113: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     754            orl     _P2MDOUT,#0x01
0034            755   ;        main.c:114: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     756            mov     _XBR0,#0x01
0037            757   ;        main.c:115: XBR1     = 0X00;
0037 75E200     758            mov     _XBR1,#0x00
003A            759   ;        main.c:116: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     760            mov     _XBR2,#0x41
003D            761   ;        main.c:122: SCON0 = 0x10;
003D 759810     762            mov     _SCON0,#0x10
0040            763   ;        main.c:123: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     764            mov     _TH1,#0xE6
0043            765   ;        main.c:124: TL1 = TH1;      // Init Timer1
0043 858D8B     766            mov     _TL1,_TH1
0046            767   ;        main.c:125: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     768            anl     _TMOD,#0x0F
0049            769   ;        main.c:126: TMOD |=  0x20;                       
0049 438920     770            orl     _TMOD,#0x20
004C            771   ;        main.c:127: TR1 = 1; // START Timer1
004C D28E       772            setb    _TR1
004E            773   ;        main.c:128: TI = 1;  // Indicate TX0 ready
004E D299       774            setb    _TI
0050            775   ;        main.c:130: P2_0=1; // 'set' pin to 1 is normal operation mode.
0050 D2A0       776            setb    _P2_0
0052            777   ;        main.c:133: SFRPAGE=0x10;
0052 75A710     778            mov     _SFRPAGE,#0x10
0055            779   ;        main.c:134: TMR5CN0=0x00;
0055 75C000     780            mov     _TMR5CN0,#0x00
0058            781   ;        main.c:135: TMR5=0xffff;   // Set to reload immediately
0058 75D4FF     782            mov     _TMR5,#0xFF
005B 75D5FF     783            mov     (_TMR5 >> 8),#0xFF
005E            784   ;        main.c:136: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
005E 43F308     785            orl     _EIE2,#0x08
0061            786   ;        main.c:137: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0061 D2C2       787            setb    _TR5
0063            788   ;        main.c:140: EA=1;  // Enable global interrupts
0063 D2AF       789            setb    _EA
0065            790   ;        main.c:141: SFRPAGE=0x00;
0065 75A700     791            mov     _SFRPAGE,#0x00
0068            792   ;        main.c:143: return 0;
0068 758200     793            mov     dpl,#0x00
006B 22         794            ret
006C            795   ;------------------------------------------------------------
006C            796   ;Allocation info for local variables in function 'Timer3us'
006C            797   ;------------------------------------------------------------
006C            798   ;us                        Allocated to registers r2 
006C            799   ;i                         Allocated to registers r3 
006C            800   ;------------------------------------------------------------
006C            801   ;        main.c:147: void Timer3us(unsigned char us)
006C            802   ;        -----------------------------------------
006C            803   ;         function Timer3us
006C            804   ;        -----------------------------------------
006C            805   _Timer3us:
006C AA82       806            mov     r2,dpl
006E            807   ;        main.c:152: CKCON0|=0b_0100_0000;
006E 438E40     808            orl     _CKCON0,#0x40
0071            809   ;        main.c:154: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0071 7592B8     810            mov     _TMR3RL,#0xB8
0074 7593FF     811            mov     (_TMR3RL >> 8),#0xFF
0077            812   ;        main.c:155: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0077 859294     813            mov     _TMR3,_TMR3RL
007A 859395     814            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007D            815   ;        main.c:157: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007D 759104     816            mov     _TMR3CN0,#0x04
0080            817   ;        main.c:158: for (i = 0; i < us; i++)       // Count <us> overflows
0080 7B00       818            mov     r3,#0x00
0082            819   L003004?:
0082 C3         820            clr     c
0083 EB         821            mov     a,r3
0084 9A         822            subb    a,r2
0085 5000       823            jnc     L003007?
0087            824   ;        main.c:160: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0087            825   L003001?:
0087 E591       826            mov     a,_TMR3CN0
0089 30E750     827            jnb     acc.7,L003001?
008C            828   ;        main.c:161: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008C 53917F     829            anl     _TMR3CN0,#0x7F
008F            830   ;        main.c:158: for (i = 0; i < us; i++)       // Count <us> overflows
008F 0B         831            inc     r3
0090 8000       832            sjmp    L003004?
0092            833   L003007?:
0092            834   ;        main.c:163: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0092 759100     835            mov     _TMR3CN0,#0x00
0095 22         836            ret
0096            837   ;------------------------------------------------------------
0096            838   ;Allocation info for local variables in function 'waitms'
0096            839   ;------------------------------------------------------------
0096            840   ;ms                        Allocated to registers r2 r3 
0096            841   ;j                         Allocated to registers r4 r5 
0096            842   ;k                         Allocated to registers r6 
0096            843   ;------------------------------------------------------------
0096            844   ;        main.c:166: void waitms (unsigned int ms)
0096            845   ;        -----------------------------------------
0096            846   ;         function waitms
0096            847   ;        -----------------------------------------
0096            848   _waitms:
0096 AA82       849            mov     r2,dpl
0098 AB83       850            mov     r3,dph
009A            851   ;        main.c:170: for(j=0; j<ms; j++)
009A 7C00       852            mov     r4,#0x00
009C 7D00       853            mov     r5,#0x00
009E            854   L004005?:
009E C3         855            clr     c
009F EC         856            mov     a,r4
00A0 9A         857            subb    a,r2
00A1 ED         858            mov     a,r5
00A2 9B         859            subb    a,r3
00A3 5000       860            jnc     L004009?
00A5            861   ;        main.c:171: for (k=0; k<4; k++) Timer3us(250);
00A5 7E00       862            mov     r6,#0x00
00A7            863   L004001?:
00A7 BE0490     864            cjne    r6,#0x04,L004018?
00AA            865   L004018?:
00AA 5000       866            jnc     L004007?
00AC 7582FA     867            mov     dpl,#0xFA
00AF C002       868            push    ar2
00B1 C003       869            push    ar3
00B3 C004       870            push    ar4
00B5 C005       871            push    ar5
00B7 C006       872            push    ar6
00B9 120000     873            lcall   _Timer3us
00BC D006       874            pop     ar6
00BE D005       875            pop     ar5
00C0 D004       876            pop     ar4
00C2 D003       877            pop     ar3
00C4 D002       878            pop     ar2
00C6 0E         879            inc     r6
00C7 8000       880            sjmp    L004001?
00C9            881   L004007?:
00C9            882   ;        main.c:170: for(j=0; j<ms; j++)
00C9 0C         883            inc     r4
00CA BC00D0     884            cjne    r4,#0x00,L004005?
00CD 0D         885            inc     r5
00CE 8000       886            sjmp    L004005?
00D0            887   L004009?:
00D0 22         888            ret
00D1            889   ;------------------------------------------------------------
00D1            890   ;Allocation info for local variables in function 'UART1_Init'
00D1            891   ;------------------------------------------------------------
00D1            892   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00D1            893   ;------------------------------------------------------------
00D1            894   ;        main.c:174: void UART1_Init (unsigned long baudrate)
00D1            895   ;        -----------------------------------------
00D1            896   ;         function UART1_Init
00D1            897   ;        -----------------------------------------
00D1            898   _UART1_Init:
00D1 AA82       899            mov     r2,dpl
00D3 AB83       900            mov     r3,dph
00D5 ACF0       901            mov     r4,b
00D7 FD         902            mov     r5,a
00D8            903   ;        main.c:176: SFRPAGE = 0x20;
00D8 75A720     904            mov     _SFRPAGE,#0x20
00DB            905   ;        main.c:177: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00DB 75930C     906            mov     _SMOD1,#0x0C
00DE            907   ;        main.c:178: SCON1 = 0x10;
00DE 75C810     908            mov     _SCON1,#0x10
00E1            909   ;        main.c:179: SBCON1 =0x00;   // disable baud rate generator
00E1 759400     910            mov     _SBCON1,#0x00
00E4            911   ;        main.c:180: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00E4 8A00       912            mov     __divulong_PARM_2,r2
00E6 8B01       913            mov     (__divulong_PARM_2 + 1),r3
00E8 8C02       914            mov     (__divulong_PARM_2 + 2),r4
00EA 8D03       915            mov     (__divulong_PARM_2 + 3),r5
00EC 90A200     916            mov     dptr,#0xA200
00EF 75F04A     917            mov     b,#0x4A
00F2 7404       918            mov     a,#0x04
00F4 120000     919            lcall   __divulong
00F7 AA82       920            mov     r2,dpl
00F9 AB83       921            mov     r3,dph
00FB ACF0       922            mov     r4,b
00FD FD         923            mov     r5,a
00FE 750018     924            mov     __divulong_PARM_2,#0x18
0101 E4         925            clr     a
0102 F501       926            mov     (__divulong_PARM_2 + 1),a
0104 F502       927            mov     (__divulong_PARM_2 + 2),a
0106 F503       928            mov     (__divulong_PARM_2 + 3),a
0108 8A82       929            mov     dpl,r2
010A 8B83       930            mov     dph,r3
010C 8CF0       931            mov     b,r4
010E ED         932            mov     a,r5
010F 120000     933            lcall   __divulong
0112 AA82       934            mov     r2,dpl
0114 AB83       935            mov     r3,dph
0116 ACF0       936            mov     r4,b
0118 FD         937            mov     r5,a
0119 E4         938            clr     a
011A C3         939            clr     c
011B 9A         940            subb    a,r2
011C FA         941            mov     r2,a
011D E4         942            clr     a
011E 9B         943            subb    a,r3
011F FB         944            mov     r3,a
0120 7401       945            mov     a,#0x01
0122 9C         946            subb    a,r4
0123 E4         947            clr     a
0124 9D         948            subb    a,r5
0125 8A95       949            mov     _SBRL1,r2
0127 8B96       950            mov     (_SBRL1 >> 8),r3
0129            951   ;        main.c:181: TI1 = 1; // indicate ready for TX
0129 D2C9       952            setb    _TI1
012B            953   ;        main.c:182: SBCON1 |= 0x40;   // enable baud rate generator
012B 439440     954            orl     _SBCON1,#0x40
012E            955   ;        main.c:183: SFRPAGE = 0x00;
012E 75A700     956            mov     _SFRPAGE,#0x00
0131 22         957            ret
0132            958   ;------------------------------------------------------------
0132            959   ;Allocation info for local variables in function 'putchar1'
0132            960   ;------------------------------------------------------------
0132            961   ;c                         Allocated to registers r2 
0132            962   ;------------------------------------------------------------
0132            963   ;        main.c:186: void putchar1 (char c) 
0132            964   ;        -----------------------------------------
0132            965   ;         function putchar1
0132            966   ;        -----------------------------------------
0132            967   _putchar1:
0132 AA82       968            mov     r2,dpl
0134            969   ;        main.c:188: SFRPAGE = 0x20;
0134 75A720     970            mov     _SFRPAGE,#0x20
0137            971   ;        main.c:189: while (!TI1);
0137            972   L006001?:
0137            973   ;        main.c:190: TI1=0;
0137 10C920     974            jbc     _TI1,L006008?
013A 8000       975            sjmp    L006001?
013C            976   L006008?:
013C            977   ;        main.c:191: SBUF1 = c;
013C 8A92       978            mov     _SBUF1,r2
013E            979   ;        main.c:192: SFRPAGE = 0x00;
013E 75A700     980            mov     _SFRPAGE,#0x00
0141 22         981            ret
0142            982   ;------------------------------------------------------------
0142            983   ;Allocation info for local variables in function 'sendstr1'
0142            984   ;------------------------------------------------------------
0142            985   ;s                         Allocated to registers r2 r3 r4 
0142            986   ;------------------------------------------------------------
0142            987   ;        main.c:195: void sendstr1 (char * s)
0142            988   ;        -----------------------------------------
0142            989   ;         function sendstr1
0142            990   ;        -----------------------------------------
0142            991   _sendstr1:
0142 AA82       992            mov     r2,dpl
0144 AB83       993            mov     r3,dph
0146 ACF0       994            mov     r4,b
0148            995   ;        main.c:197: while(*s)
0148            996   L007001?:
0148 8A82       997            mov     dpl,r2
014A 8B83       998            mov     dph,r3
014C 8CF0       999            mov     b,r4
014E 120000    1000            lcall   __gptrget
0151 FD        1001            mov     r5,a
0152 6000      1002            jz      L007004?
0154           1003   ;        main.c:199: putchar1(*s);
0154 8D82      1004            mov     dpl,r5
0156 C002      1005            push    ar2
0158 C003      1006            push    ar3
015A C004      1007            push    ar4
015C 120000    1008            lcall   _putchar1
015F D004      1009            pop     ar4
0161 D003      1010            pop     ar3
0163 D002      1011            pop     ar2
0165           1012   ;        main.c:200: s++;        
0165 0A        1013            inc     r2
0166 BA0060    1014            cjne    r2,#0x00,L007001?
0169 0B        1015            inc     r3
016A 8000      1016            sjmp    L007001?
016C           1017   L007004?:
016C 22        1018            ret
016D           1019   ;------------------------------------------------------------
016D           1020   ;Allocation info for local variables in function 'getchar1'
016D           1021   ;------------------------------------------------------------
016D           1022   ;c                         Allocated to registers 
016D           1023   ;------------------------------------------------------------
016D           1024   ;        main.c:204: char getchar1 (void)
016D           1025   ;        -----------------------------------------
016D           1026   ;         function getchar1
016D           1027   ;        -----------------------------------------
016D           1028   _getchar1:
016D           1029   ;        main.c:207: SFRPAGE = 0x20;
016D 75A720    1030            mov     _SFRPAGE,#0x20
0170           1031   ;        main.c:208: while (!RI1);
0170           1032   L008001?:
0170           1033   ;        main.c:209: RI1=0;
0170 10C860    1034            jbc     _RI1,L008008?
0173 8000      1035            sjmp    L008001?
0175           1036   L008008?:
0175           1037   ;        main.c:211: SCON1&=0b_0011_1111;
0175 53C83F    1038            anl     _SCON1,#0x3F
0178           1039   ;        main.c:212: c = SBUF1;
0178 859282    1040            mov     dpl,_SBUF1
017B           1041   ;        main.c:213: SFRPAGE = 0x00;
017B 75A700    1042            mov     _SFRPAGE,#0x00
017E           1043   ;        main.c:214: return (c);
017E 22        1044            ret
017F           1045   ;------------------------------------------------------------
017F           1046   ;Allocation info for local variables in function 'getchar1_with_timeout'
017F           1047   ;------------------------------------------------------------
017F           1048   ;c                         Allocated to registers 
017F           1049   ;timeout                   Allocated to registers r2 r3 
017F           1050   ;------------------------------------------------------------
017F           1051   ;        main.c:217: char getchar1_with_timeout (void)
017F           1052   ;        -----------------------------------------
017F           1053   ;         function getchar1_with_timeout
017F           1054   ;        -----------------------------------------
017F           1055   _getchar1_with_timeout:
017F           1056   ;        main.c:221: SFRPAGE = 0x20;
017F 75A720    1057            mov     _SFRPAGE,#0x20
0182           1058   ;        main.c:223: while (!RI1)
0182 7A00      1059            mov     r2,#0x00
0184 7B00      1060            mov     r3,#0x00
0186           1061   L009003?:
0186 20C8E0    1062            jb      _RI1,L009005?
0189           1063   ;        main.c:225: SFRPAGE = 0x00;
0189 75A700    1064            mov     _SFRPAGE,#0x00
018C           1065   ;        main.c:226: Timer3us(20);
018C 758214    1066            mov     dpl,#0x14
018F C002      1067            push    ar2
0191 C003      1068            push    ar3
0193 120000    1069            lcall   _Timer3us
0196 D003      1070            pop     ar3
0198 D002      1071            pop     ar2
019A           1072   ;        main.c:227: SFRPAGE = 0x20;
019A 75A720    1073            mov     _SFRPAGE,#0x20
019D           1074   ;        main.c:228: timeout++;
019D 0A        1075            inc     r2
019E BA0020    1076            cjne    r2,#0x00,L009012?
01A1 0B        1077            inc     r3
01A2           1078   L009012?:
01A2           1079   ;        main.c:229: if(timeout==25000)
01A2 BAA8A0    1080            cjne    r2,#0xA8,L009003?
01A5 BB61A0    1081            cjne    r3,#0x61,L009003?
01A8           1082   ;        main.c:231: SFRPAGE = 0x00;
01A8 75A700    1083            mov     _SFRPAGE,#0x00
01AB           1084   ;        main.c:232: return ('\n'); // Timeout after half second
01AB 75820A    1085            mov     dpl,#0x0A
01AE 22        1086            ret
01AF           1087   L009005?:
01AF           1088   ;        main.c:235: RI1=0;
01AF C2C8      1089            clr     _RI1
01B1           1090   ;        main.c:237: SCON1&=0b_0011_1111;
01B1 53C83F    1091            anl     _SCON1,#0x3F
01B4           1092   ;        main.c:238: c = SBUF1;
01B4 859282    1093            mov     dpl,_SBUF1
01B7           1094   ;        main.c:239: SFRPAGE = 0x00;
01B7 75A700    1095            mov     _SFRPAGE,#0x00
01BA           1096   ;        main.c:240: return (c);
01BA 22        1097            ret
01BB           1098   ;------------------------------------------------------------
01BB           1099   ;Allocation info for local variables in function 'getstr1'
01BB           1100   ;------------------------------------------------------------
01BB           1101   ;n                         Allocated with name '_getstr1_PARM_2'
01BB           1102   ;s                         Allocated to registers r2 r3 r4 
01BB           1103   ;c                         Allocated to registers r1 
01BB           1104   ;cnt                       Allocated to registers r5 
01BB           1105   ;------------------------------------------------------------
01BB           1106   ;        main.c:243: void getstr1 (char * s, unsigned char n)
01BB           1107   ;        -----------------------------------------
01BB           1108   ;         function getstr1
01BB           1109   ;        -----------------------------------------
01BB           1110   _getstr1:
01BB AA82      1111            mov     r2,dpl
01BD AB83      1112            mov     r3,dph
01BF ACF0      1113            mov     r4,b
01C1           1114   ;        main.c:249: while(1)
01C1 7D00      1115            mov     r5,#0x00
01C3 8A06      1116            mov     ar6,r2
01C5 8B07      1117            mov     ar7,r3
01C7 8C00      1118            mov     ar0,r4
01C9           1119   L010007?:
01C9           1120   ;        main.c:251: c=getchar1_with_timeout();
01C9 C002      1121            push    ar2
01CB C003      1122            push    ar3
01CD C004      1123            push    ar4
01CF C005      1124            push    ar5
01D1 C006      1125            push    ar6
01D3 C007      1126            push    ar7
01D5 C000      1127            push    ar0
01D7 120000    1128            lcall   _getchar1_with_timeout
01DA A982      1129            mov     r1,dpl
01DC D000      1130            pop     ar0
01DE D007      1131            pop     ar7
01E0 D006      1132            pop     ar6
01E2 D005      1133            pop     ar5
01E4 D004      1134            pop     ar4
01E6 D003      1135            pop     ar3
01E8 D002      1136            pop     ar2
01EA           1137   ;        main.c:252: if(c=='\n')
01EA B90AA0    1138            cjne    r1,#0x0A,L010002?
01ED           1139   ;        main.c:254: *s=0;
01ED 8A82      1140            mov     dpl,r2
01EF 8B83      1141            mov     dph,r3
01F1 8CF0      1142            mov     b,r4
01F3 E4        1143            clr     a
01F4           1144   ;        main.c:255: return;
01F4 020000    1145            ljmp    __gptrput
01F7           1146   L010002?:
01F7           1147   ;        main.c:258: if (cnt<n)
01F7 C3        1148            clr     c
01F8 ED        1149            mov     a,r5
01F9 95F0      1150            subb    a,_getstr1_PARM_2
01FB 5000      1151            jnc     L010004?
01FD           1152   ;        main.c:260: cnt++;
01FD 0D        1153            inc     r5
01FE           1154   ;        main.c:261: *s=c;
01FE 8E82      1155            mov     dpl,r6
0200 8F83      1156            mov     dph,r7
0202 88F0      1157            mov     b,r0
0204 E9        1158            mov     a,r1
0205 120000    1159            lcall   __gptrput
0208 A3        1160            inc     dptr
0209 AE82      1161            mov     r6,dpl
020B AF83      1162            mov     r7,dph
020D           1163   ;        main.c:262: s++;
020D 8E02      1164            mov     ar2,r6
020F 8F03      1165            mov     ar3,r7
0211 8804      1166            mov     ar4,r0
0213 8000      1167            sjmp    L010007?
0215           1168   L010004?:
0215           1169   ;        main.c:266: *s=0;
0215 8A82      1170            mov     dpl,r2
0217 8B83      1171            mov     dph,r3
0219 8CF0      1172            mov     b,r4
021B E4        1173            clr     a
021C           1174   ;        main.c:267: return;
021C 020000    1175            ljmp    __gptrput
021F           1176   ;------------------------------------------------------------
021F           1177   ;Allocation info for local variables in function 'RXU1'
021F           1178   ;------------------------------------------------------------
021F           1179   ;------------------------------------------------------------
021F           1180   ;        main.c:273: bit RXU1 (void)
021F           1181   ;        -----------------------------------------
021F           1182   ;         function RXU1
021F           1183   ;        -----------------------------------------
021F           1184   _RXU1:
021F           1185   ;        main.c:276: SFRPAGE = 0x20;
021F 75A720    1186            mov     _SFRPAGE,#0x20
0222           1187   ;        main.c:277: mybit=RI1;
0222 A2C8      1188            mov     c,_RI1
0224           1189   ;        main.c:278: SFRPAGE = 0x00;
0224 75A700    1190            mov     _SFRPAGE,#0x00
0227           1191   ;        main.c:279: return mybit;
0227 22        1192            ret
0228           1193   ;------------------------------------------------------------
0228           1194   ;Allocation info for local variables in function 'waitms_or_RI1'
0228           1195   ;------------------------------------------------------------
0228           1196   ;ms                        Allocated to registers r2 r3 
0228           1197   ;j                         Allocated to registers r4 r5 
0228           1198   ;k                         Allocated to registers r6 
0228           1199   ;------------------------------------------------------------
0228           1200   ;        main.c:282: void waitms_or_RI1 (unsigned int ms)
0228           1201   ;        -----------------------------------------
0228           1202   ;         function waitms_or_RI1
0228           1203   ;        -----------------------------------------
0228           1204   _waitms_or_RI1:
0228 AA82      1205            mov     r2,dpl
022A AB83      1206            mov     r3,dph
022C           1207   ;        main.c:286: for(j=0; j<ms; j++)
022C 7C00      1208            mov     r4,#0x00
022E 7D00      1209            mov     r5,#0x00
0230           1210   L012007?:
0230 C3        1211            clr     c
0231 EC        1212            mov     a,r4
0232 9A        1213            subb    a,r2
0233 ED        1214            mov     a,r5
0234 9B        1215            subb    a,r3
0235 5000      1216            jnc     L012011?
0237           1217   ;        main.c:288: for (k=0; k<4; k++)
0237 7E00      1218            mov     r6,#0x00
0239           1219   L012003?:
0239 BE0420    1220            cjne    r6,#0x04,L012019?
023C           1221   L012019?:
023C 5000      1222            jnc     L012009?
023E           1223   ;        main.c:290: if(RXU1()) return;
023E C002      1224            push    ar2
0240 C003      1225            push    ar3
0242 C004      1226            push    ar4
0244 C005      1227            push    ar5
0246 C006      1228            push    ar6
0248 120000    1229            lcall   _RXU1
024B E4        1230            clr     a
024C 33        1231            rlc     a
024D D006      1232            pop     ar6
024F D005      1233            pop     ar5
0251 D004      1234            pop     ar4
0253 D003      1235            pop     ar3
0255 D002      1236            pop     ar2
0257 6000      1237            jz      L012002?
0259 22        1238            ret
025A           1239   L012002?:
025A           1240   ;        main.c:291: Timer3us(250);
025A 7582FA    1241            mov     dpl,#0xFA
025D C002      1242            push    ar2
025F C003      1243            push    ar3
0261 C004      1244            push    ar4
0263 C005      1245            push    ar5
0265 C006      1246            push    ar6
0267 120000    1247            lcall   _Timer3us
026A D006      1248            pop     ar6
026C D005      1249            pop     ar5
026E D004      1250            pop     ar4
0270 D003      1251            pop     ar3
0272 D002      1252            pop     ar2
0274           1253   ;        main.c:288: for (k=0; k<4; k++)
0274 0E        1254            inc     r6
0275 8000      1255            sjmp    L012003?
0277           1256   L012009?:
0277           1257   ;        main.c:286: for(j=0; j<ms; j++)
0277 0C        1258            inc     r4
0278 BC0060    1259            cjne    r4,#0x00,L012007?
027B 0D        1260            inc     r5
027C 8000      1261            sjmp    L012007?
027E           1262   L012011?:
027E 22        1263            ret
027F           1264   ;------------------------------------------------------------
027F           1265   ;Allocation info for local variables in function 'SendATCommand'
027F           1266   ;------------------------------------------------------------
027F           1267   ;s                         Allocated to registers r2 r3 r4 
027F           1268   ;------------------------------------------------------------
027F           1269   ;        main.c:296: void SendATCommand (char * s)
027F           1270   ;        -----------------------------------------
027F           1271   ;         function SendATCommand
027F           1272   ;        -----------------------------------------
027F           1273   _SendATCommand:
027F AA82      1274            mov     r2,dpl
0281 AB83      1275            mov     r3,dph
0283 ACF0      1276            mov     r4,b
0285           1277   ;        main.c:298: printf("Command: %s", s);
0285 C002      1278            push    ar2
0287 C003      1279            push    ar3
0289 C004      1280            push    ar4
028B C002      1281            push    ar2
028D C003      1282            push    ar3
028F C004      1283            push    ar4
0291 74E0      1284            mov     a,#__str_0
0293 C0E0      1285            push    acc
0295 74C7      1286            mov     a,#(__str_0 >> 8)
0297 C0E0      1287            push    acc
0299 7480      1288            mov     a,#0x80
029B C0E0      1289            push    acc
029D 120000    1290            lcall   _printf
02A0 E581      1291            mov     a,sp
02A2 24FA      1292            add     a,#0xfa
02A4 F581      1293            mov     sp,a
02A6           1294   ;        main.c:299: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02A6 C2A0      1295            clr     _P2_0
02A8           1296   ;        main.c:300: waitms(5);
02A8 900005    1297            mov     dptr,#0x0005
02AB 120000    1298            lcall   _waitms
02AE D004      1299            pop     ar4
02B0 D003      1300            pop     ar3
02B2 D002      1301            pop     ar2
02B4           1302   ;        main.c:301: sendstr1(s);
02B4 8A82      1303            mov     dpl,r2
02B6 8B83      1304            mov     dph,r3
02B8 8CF0      1305            mov     b,r4
02BA 120000    1306            lcall   _sendstr1
02BD           1307   ;        main.c:302: getstr1(buff, sizeof(buff)-1);
02BD 75F013    1308            mov     _getstr1_PARM_2,#0x13
02C0 9046B0    1309            mov     dptr,#_buff
02C3 75F040    1310            mov     b,#0x40
02C6 120000    1311            lcall   _getstr1
02C9           1312   ;        main.c:303: waitms(10);
02C9 90000A    1313            mov     dptr,#0x000A
02CC 120000    1314            lcall   _waitms
02CF           1315   ;        main.c:304: P2_0=1; // 'set' pin to 1 is normal operation mode.
02CF D2A0      1316            setb    _P2_0
02D1           1317   ;        main.c:305: printf("Response: %s\r\n", buff);
02D1 74B0      1318            mov     a,#_buff
02D3 C0E0      1319            push    acc
02D5 7446      1320            mov     a,#(_buff >> 8)
02D7 C0E0      1321            push    acc
02D9 7440      1322            mov     a,#0x40
02DB C0E0      1323            push    acc
02DD 74A0      1324            mov     a,#__str_1
02DF C0E0      1325            push    acc
02E1 74C8      1326            mov     a,#(__str_1 >> 8)
02E3 C0E0      1327            push    acc
02E5 7480      1328            mov     a,#0x80
02E7 C0E0      1329            push    acc
02E9 120000    1330            lcall   _printf
02EC E581      1331            mov     a,sp
02EE 24FA      1332            add     a,#0xfa
02F0 F581      1333            mov     sp,a
02F2 22        1334            ret
02F3           1335   ;------------------------------------------------------------
02F3           1336   ;Allocation info for local variables in function 'ReceptionOff'
02F3           1337   ;------------------------------------------------------------
02F3           1338   ;------------------------------------------------------------
02F3           1339   ;        main.c:308: void ReceptionOff (void)
02F3           1340   ;        -----------------------------------------
02F3           1341   ;         function ReceptionOff
02F3           1342   ;        -----------------------------------------
02F3           1343   _ReceptionOff:
02F3           1344   ;        main.c:310: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02F3 C2A0      1345            clr     _P2_0
02F5           1346   ;        main.c:311: waitms(10);
02F5 90000A    1347            mov     dptr,#0x000A
02F8 120000    1348            lcall   _waitms
02FB           1349   ;        main.c:312: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
02FB 90C8E0    1350            mov     dptr,#__str_2
02FE 75F080    1351            mov     b,#0x80
0301 120000    1352            lcall   _sendstr1
0304           1353   ;        main.c:313: waitms(10);
0304 90000A    1354            mov     dptr,#0x000A
0307 120000    1355            lcall   _waitms
030A           1356   ;        main.c:315: SCON1&=0b_0011_1111;
030A 53C83F    1357            anl     _SCON1,#0x3F
030D           1358   ;        main.c:316: P2_0=1; // 'set' pin to 1 is normal operation mode.
030D D2A0      1359            setb    _P2_0
030F 22        1360            ret
0310           1361   ;------------------------------------------------------------
0310           1362   ;Allocation info for local variables in function 'Set_Pin_Output'
0310           1363   ;------------------------------------------------------------
0310           1364   ;pin                       Allocated to registers r2 
0310           1365   ;mask                      Allocated to registers r3 
0310           1366   ;------------------------------------------------------------
0310           1367   ;        main.c:319: void Set_Pin_Output (unsigned char pin)
0310           1368   ;        -----------------------------------------
0310           1369   ;         function Set_Pin_Output
0310           1370   ;        -----------------------------------------
0310           1371   _Set_Pin_Output:
0310 AA82      1372            mov     r2,dpl
0312           1373   ;        main.c:323: mask=(1<<(pin&0x7));
0312 7407      1374            mov     a,#0x07
0314 5A        1375            anl     a,r2
0315 F5F0      1376            mov     b,a
0317 05F0      1377            inc     b
0319 7401      1378            mov     a,#0x01
031B 8000      1379            sjmp    L015011?
031D           1380   L015009?:
031D 25E0      1381            add     a,acc
031F           1382   L015011?:
031F D5F060    1383            djnz    b,L015009?
0322 FB        1384            mov     r3,a
0323           1385   ;        main.c:324: switch(pin/0x10)
0323 EA        1386            mov     a,r2
0324 C4        1387            swap    a
0325 540F      1388            anl     a,#0x0f
0327 FA        1389            mov  r2,a
0328 24FC      1390            add     a,#0xff - 0x03
032A 4000      1391            jc      L015006?
032C EA        1392            mov     a,r2
032D 2A        1393            add     a,r2
032E 2A        1394            add     a,r2
032F 90C9E0    1395            mov     dptr,#L015013?
0332 73        1396            jmp     @a+dptr
0333           1397   L015013?:
0333 020000    1398            ljmp    L015001?
0336 020000    1399            ljmp    L015002?
0339 020000    1400            ljmp    L015003?
033C 020000    1401            ljmp    L015004?
033F           1402   ;        main.c:326: case 0: P0MDOUT |= mask; break;
033F           1403   L015001?:
033F EB        1404            mov     a,r3
0340 42A4      1405            orl     _P0MDOUT,a
0342           1406   ;        main.c:327: case 1: P1MDOUT |= mask; break;
0342 22        1407            ret
0343           1408   L015002?:
0343 EB        1409            mov     a,r3
0344 42A5      1410            orl     _P1MDOUT,a
0346           1411   ;        main.c:328: case 2: P2MDOUT |= mask; break; 
0346 22        1412            ret
0347           1413   L015003?:
0347 EB        1414            mov     a,r3
0348 42A6      1415            orl     _P2MDOUT,a
034A           1416   ;        main.c:329: case 3: P3MDOUT |= mask; break; 
034A 22        1417            ret
034B           1418   L015004?:
034B EB        1419            mov     a,r3
034C 429C      1420            orl     _P3MDOUT,a
034E           1421   ;        main.c:330: }   
034E           1422   L015006?:
034E 22        1423            ret
034F           1424   ;------------------------------------------------------------
034F           1425   ;Allocation info for local variables in function 'Set_Pin_Input'
034F           1426   ;------------------------------------------------------------
034F           1427   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_101'
034F           1428   ;pin                       Allocated to registers r2 
034F           1429   ;------------------------------------------------------------
034F           1430   ;        main.c:333: void Set_Pin_Input (unsigned char pin)
034F           1431   ;        -----------------------------------------
034F           1432   ;         function Set_Pin_Input
034F           1433   ;        -----------------------------------------
034F           1434   _Set_Pin_Input:
034F AA82      1435            mov     r2,dpl
0351           1436   ;        main.c:337: mask=(1<<(pin&0x7));
0351 7407      1437            mov     a,#0x07
0353 5A        1438            anl     a,r2
0354 F5F0      1439            mov     b,a
0356 05F0      1440            inc     b
0358 7401      1441            mov     a,#0x01
035A 8000      1442            sjmp    L016011?
035C           1443   L016009?:
035C 25E0      1444            add     a,acc
035E           1445   L016011?:
035E D5F060    1446            djnz    b,L016009?
0361           1447   ;        main.c:338: mask=~mask;
0361 F4        1448            cpl     a
0362 FB        1449            mov     r3,a
0363           1450   ;        main.c:339: switch(pin/0x10)
0363 EA        1451            mov     a,r2
0364 C4        1452            swap    a
0365 540F      1453            anl     a,#0x0f
0367 FA        1454            mov  r2,a
0368 24FC      1455            add     a,#0xff - 0x03
036A 4000      1456            jc      L016006?
036C EA        1457            mov     a,r2
036D 2A        1458            add     a,r2
036E 2A        1459            add     a,r2
036F 90CBE0    1460            mov     dptr,#L016013?
0372 73        1461            jmp     @a+dptr
0373           1462   L016013?:
0373 020000    1463            ljmp    L016001?
0376 020000    1464            ljmp    L016002?
0379 020000    1465            ljmp    L016003?
037C 020000    1466            ljmp    L016004?
037F           1467   ;        main.c:341: case 0: P0MDOUT &= mask; break;
037F           1468   L016001?:
037F EB        1469            mov     a,r3
0380 52A4      1470            anl     _P0MDOUT,a
0382           1471   ;        main.c:342: case 1: P1MDOUT &= mask; break;
0382 22        1472            ret
0383           1473   L016002?:
0383 EB        1474            mov     a,r3
0384 52A5      1475            anl     _P1MDOUT,a
0386           1476   ;        main.c:343: case 2: P2MDOUT &= mask; break; 
0386 22        1477            ret
0387           1478   L016003?:
0387 EB        1479            mov     a,r3
0388 52A6      1480            anl     _P2MDOUT,a
038A           1481   ;        main.c:344: case 3: P3MDOUT &= mask; break; 
038A 22        1482            ret
038B           1483   L016004?:
038B EB        1484            mov     a,r3
038C 529C      1485            anl     _P3MDOUT,a
038E           1486   ;        main.c:345: }   
038E           1487   L016006?:
038E 22        1488            ret
038F           1489   ;------------------------------------------------------------
038F           1490   ;Allocation info for local variables in function 'InitADC'
038F           1491   ;------------------------------------------------------------
038F           1492   ;------------------------------------------------------------
038F           1493   ;        main.c:348: void InitADC (void)
038F           1494   ;        -----------------------------------------
038F           1495   ;         function InitADC
038F           1496   ;        -----------------------------------------
038F           1497   _InitADC:
038F           1498   ;        main.c:350: SFRPAGE = 0x00;
038F 75A700    1499            mov     _SFRPAGE,#0x00
0392           1500   ;        main.c:351: ADEN=0; // Disable ADC
0392 C2EF      1501            clr     _ADEN
0394           1502   ;        main.c:356: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0394 75B280    1503            mov     _ADC0CN1,#0x80
0397           1504   ;        main.c:360: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0397 75BC20    1505            mov     _ADC0CF0,#0x20
039A           1506   ;        main.c:364: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
039A 75B91E    1507            mov     _ADC0CF1,#0x1E
039D           1508   ;        main.c:373: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
039D 75E800    1509            mov     _ADC0CN0,#0x00
03A0           1510   ;        main.c:378: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03A0 75DF3F    1511            mov     _ADC0CF2,#0x3F
03A3           1512   ;        main.c:382: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03A3 75B300    1513            mov     _ADC0CN2,#0x00
03A6           1514   ;        main.c:384: ADEN=1; // Enable ADC
03A6 D2EF      1515            setb    _ADEN
03A8 22        1516            ret
03A9           1517   ;------------------------------------------------------------
03A9           1518   ;Allocation info for local variables in function 'InitPinADC'
03A9           1519   ;------------------------------------------------------------
03A9           1520   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
03A9           1521   ;portno                    Allocated to registers r2 
03A9           1522   ;mask                      Allocated to registers r3 
03A9           1523   ;------------------------------------------------------------
03A9           1524   ;        main.c:387: void InitPinADC (unsigned char portno, unsigned char pin_num)
03A9           1525   ;        -----------------------------------------
03A9           1526   ;         function InitPinADC
03A9           1527   ;        -----------------------------------------
03A9           1528   _InitPinADC:
03A9 AA82      1529            mov     r2,dpl
03AB           1530   ;        main.c:391: mask=1<<pin_num;
03AB 85E0F0    1531            mov     b,_InitPinADC_PARM_2
03AE 05F0      1532            inc     b
03B0 7401      1533            mov     a,#0x01
03B2 8000      1534            sjmp    L018013?
03B4           1535   L018011?:
03B4 25E0      1536            add     a,acc
03B6           1537   L018013?:
03B6 D5F060    1538            djnz    b,L018011?
03B9 FB        1539            mov     r3,a
03BA           1540   ;        main.c:393: SFRPAGE = 0x20;
03BA 75A720    1541            mov     _SFRPAGE,#0x20
03BD           1542   ;        main.c:394: switch (portno)
03BD BA00A0    1543            cjne    r2,#0x00,L018014?
03C0 8000      1544            sjmp    L018001?
03C2           1545   L018014?:
03C2 BA0120    1546            cjne    r2,#0x01,L018015?
03C5 8000      1547            sjmp    L018002?
03C7           1548   L018015?:
03C7           1549   ;        main.c:396: case 0:
03C7 BA02A0    1550            cjne    r2,#0x02,L018005?
03CA 8000      1551            sjmp    L018003?
03CC           1552   L018001?:
03CC           1553   ;        main.c:397: P0MDIN &= (~mask); // Set pin as analog input
03CC EB        1554            mov     a,r3
03CD F4        1555            cpl     a
03CE FA        1556            mov     r2,a
03CF 52F1      1557            anl     _P0MDIN,a
03D1           1558   ;        main.c:398: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03D1 EB        1559            mov     a,r3
03D2 42D4      1560            orl     _P0SKIP,a
03D4           1561   ;        main.c:399: break;
03D4           1562   ;        main.c:400: case 1:
03D4 8000      1563            sjmp    L018005?
03D6           1564   L018002?:
03D6           1565   ;        main.c:401: P1MDIN &= (~mask); // Set pin as analog input
03D6 EB        1566            mov     a,r3
03D7 F4        1567            cpl     a
03D8 FA        1568            mov     r2,a
03D9 52F2      1569            anl     _P1MDIN,a
03DB           1570   ;        main.c:402: P1SKIP |= mask; // Skip Crossbar decoding for this pin
03DB EB        1571            mov     a,r3
03DC 42D5      1572            orl     _P1SKIP,a
03DE           1573   ;        main.c:403: break;
03DE           1574   ;        main.c:404: case 2:
03DE 8000      1575            sjmp    L018005?
03E0           1576   L018003?:
03E0           1577   ;        main.c:405: P2MDIN &= (~mask); // Set pin as analog input
03E0 EB        1578            mov     a,r3
03E1 F4        1579            cpl     a
03E2 FA        1580            mov     r2,a
03E3 52F3      1581            anl     _P2MDIN,a
03E5           1582   ;        main.c:406: P2SKIP |= mask; // Skip Crossbar decoding for this pin
03E5 EB        1583            mov     a,r3
03E6 42CC      1584            orl     _P2SKIP,a
03E8           1585   ;        main.c:410: }
03E8           1586   L018005?:
03E8           1587   ;        main.c:411: SFRPAGE = 0x00;
03E8 75A700    1588            mov     _SFRPAGE,#0x00
03EB 22        1589            ret
03EC           1590   ;------------------------------------------------------------
03EC           1591   ;Allocation info for local variables in function 'ADC_at_Pin'
03EC           1592   ;------------------------------------------------------------
03EC           1593   ;pin                       Allocated to registers 
03EC           1594   ;------------------------------------------------------------
03EC           1595   ;        main.c:414: unsigned int ADC_at_Pin(unsigned char pin)
03EC           1596   ;        -----------------------------------------
03EC           1597   ;         function ADC_at_Pin
03EC           1598   ;        -----------------------------------------
03EC           1599   _ADC_at_Pin:
03EC 8582BB    1600            mov     _ADC0MX,dpl
03EF           1601   ;        main.c:417: ADINT = 0;
03EF C2ED      1602            clr     _ADINT
03F1           1603   ;        main.c:418: ADBUSY = 1;     // Convert voltage at the pin
03F1 D2EC      1604            setb    _ADBUSY
03F3           1605   ;        main.c:419: while (!ADINT); // Wait for conversion to complete
03F3           1606   L019001?:
03F3 30ED20    1607            jnb     _ADINT,L019001?
03F6           1608   ;        main.c:420: return (ADC0);
03F6 85BD82    1609            mov     dpl,_ADC0
03F9 85BE83    1610            mov     dph,(_ADC0 >> 8)
03FC 22        1611            ret
03FD           1612   ;------------------------------------------------------------
03FD           1613   ;Allocation info for local variables in function 'Timer5_ISR'
03FD           1614   ;------------------------------------------------------------
03FD           1615   ;------------------------------------------------------------
03FD           1616   ;        main.c:423: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
03FD           1617   ;        -----------------------------------------
03FD           1618   ;         function Timer5_ISR
03FD           1619   ;        -----------------------------------------
03FD           1620   _Timer5_ISR:
03FD C030      1621            push    bits
03FF C0E0      1622            push    acc
0401 C0F0      1623            push    b
0403 C082      1624            push    dpl
0405 C083      1625            push    dph
0407 C002      1626            push    (0+2)
0409 C003      1627            push    (0+3)
040B C004      1628            push    (0+4)
040D C005      1629            push    (0+5)
040F C006      1630            push    (0+6)
0411 C007      1631            push    (0+7)
0413 C000      1632            push    (0+0)
0415 C001      1633            push    (0+1)
0417 C0D0      1634            push    psw
0419 75D000    1635            mov     psw,#0x00
041C           1636   ;        main.c:425: SFRPAGE=0x10;
041C 75A710    1637            mov     _SFRPAGE,#0x10
041F           1638   ;        main.c:426: TF5H = 0; // Clear Timer5 interrupt flag
041F C2C7      1639            clr     _TF5H
0421           1640   ;        main.c:427: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0421 75D2C4    1641            mov     _TMR5RL,#0xC4
0424 75D3FF    1642            mov     (_TMR5RL >> 8),#0xFF
0427           1643   ;        main.c:429: fre_mea_count++;
0427 05F0      1644            inc     _fre_mea_count
0429 E4        1645            clr     a
042A B5F0A0    1646            cjne    a,_fre_mea_count,L020034?
042D 05F1      1647            inc     (_fre_mea_count + 1)
042F           1648   L020034?:
042F           1649   ;        main.c:430: if(fre_mea_count == 1000){
042F 74E8      1650            mov     a,#0xE8
0431 B5F0E8    1651            cjne    a,_fre_mea_count,L020002?
0434 7403      1652            mov     a,#0x03
0436 B5F1E8    1653            cjne    a,(_fre_mea_count + 1),L020002?
0439           1654   ;        main.c:431: fre_mea_count = 0;
0439 E4        1655            clr     a
043A F5F0      1656            mov     _fre_mea_count,a
043C F5F1      1657            mov     (_fre_mea_count + 1),a
043E           1658   ;        main.c:432: freq100 = get_freq();
043E 120000    1659            lcall   _get_freq
0441 AA82      1660            mov     r2,dpl
0443 AB83      1661            mov     r3,dph
0445 8A30      1662            mov     _freq100,r2
0447 EB        1663            mov     a,r3
0448 F531      1664            mov     (_freq100 + 1),a
044A 33        1665            rlc     a
044B 95E0      1666            subb    a,acc
044D F532      1667            mov     (_freq100 + 2),a
044F F533      1668            mov     (_freq100 + 3),a
0451           1669   L020002?:
0451           1670   ;        main.c:436: pwm_counter++; 
0451 0530      1671            inc     _pwm_counter
0453 E4        1672            clr     a
0454 B53068    1673            cjne    a,_pwm_counter,L020037?
0457 0531      1674            inc     (_pwm_counter + 1)
0459           1675   L020037?:
0459           1676   ;        main.c:437: if (pwm_counter == 100){
0459 7464      1677            mov     a,#0x64
045B B530A8    1678            cjne    a,_pwm_counter,L020038?
045E E4        1679            clr     a
045F B531A8    1680            cjne    a,(_pwm_counter + 1),L020038?
0462 8000      1681            sjmp    L020039?
0464           1682   L020038?:
0464 8000      1683            sjmp    L020004?
0466           1684   L020039?:
0466           1685   ;        main.c:438: pwm_counter = 0; 
0466 E4        1686            clr     a
0467 F530      1687            mov     _pwm_counter,a
0469 F531      1688            mov     (_pwm_counter + 1),a
046B           1689   L020004?:
046B           1690   ;        main.c:441: if (pwm_right > pwm_counter){
046B AA70      1691            mov     r2,_pwm_right
046D 7B00      1692            mov     r3,#0x00
046F C3        1693            clr     c
0470 E530      1694            mov     a,_pwm_counter
0472 9A        1695            subb    a,r2
0473 E531      1696            mov     a,(_pwm_counter + 1)
0475 9B        1697            subb    a,r3
0476 5000      1698            jnc     L020009?
0478           1699   ;        main.c:442: if(L_motor_dir){
0478 E530      1700            mov     a,_L_motor_dir
047A 6000      1701            jz      L020006?
047C           1702   ;        main.c:443: L_bridge_1 = 1; 
047C D2A1      1703            setb    _P2_1
047E           1704   ;        main.c:444: L_bridge_2 = 0; 
047E C2A2      1705            clr     _P2_2
0480 8000      1706            sjmp    L020010?
0482           1707   L020006?:
0482           1708   ;        main.c:447: L_bridge_1 = 0; 
0482 C2A1      1709            clr     _P2_1
0484           1710   ;        main.c:448: L_bridge_2 = 1; 
0484 D2A2      1711            setb    _P2_2
0486 8000      1712            sjmp    L020010?
0488           1713   L020009?:
0488           1714   ;        main.c:452: L_bridge_1 = 0; 
0488 C2A1      1715            clr     _P2_1
048A           1716   ;        main.c:453: L_bridge_2 = 0; 
048A C2A2      1717            clr     _P2_2
048C           1718   L020010?:
048C           1719   ;        main.c:455: if (pwm_left > pwm_counter){
048C AAB0      1720            mov     r2,_pwm_left
048E 7B00      1721            mov     r3,#0x00
0490 C3        1722            clr     c
0491 E530      1723            mov     a,_pwm_counter
0493 9A        1724            subb    a,r2
0494 E531      1725            mov     a,(_pwm_counter + 1)
0496 9B        1726            subb    a,r3
0497 5000      1727            jnc     L020015?
0499           1728   ;        main.c:456: if (R_motor_dir){
0499 E5F0      1729            mov     a,_R_motor_dir
049B 6000      1730            jz      L020012?
049D           1731   ;        main.c:457: R_bridge_1 = 1; 
049D D2A4      1732            setb    _P2_4
049F           1733   ;        main.c:458: R_bridge_2 = 0;
049F C2A3      1734            clr     _P2_3
04A1 8000      1735            sjmp    L020016?
04A3           1736   L020012?:
04A3           1737   ;        main.c:461: R_bridge_1 = 0; 
04A3 C2A4      1738            clr     _P2_4
04A5           1739   ;        main.c:462: R_bridge_2 = 1;
04A5 D2A3      1740            setb    _P2_3
04A7 8000      1741            sjmp    L020016?
04A9           1742   L020015?:
04A9           1743   ;        main.c:466: R_bridge_1 = 0; 
04A9 C2A4      1744            clr     _P2_4
04AB           1745   ;        main.c:467: R_bridge_2 = 0; 
04AB C2A3      1746            clr     _P2_3
04AD           1747   L020016?:
04AD           1748   ;        main.c:470: servo_counter++;
04AD 05F0      1749            inc     _servo_counter
04AF E4        1750            clr     a
04B0 B5F0E8    1751            cjne    a,_servo_counter,L020044?
04B3 05F1      1752            inc     (_servo_counter + 1)
04B5           1753   L020044?:
04B5           1754   ;        main.c:471: if(servo_counter==2000)
04B5 74D0      1755            mov     a,#0xD0
04B7 B5F028    1756            cjne    a,_servo_counter,L020018?
04BA 7407      1757            mov     a,#0x07
04BC B5F128    1758            cjne    a,(_servo_counter + 1),L020018?
04BF           1759   ;        main.c:473: servo_counter=0;
04BF E4        1760            clr     a
04C0 F5F0      1761            mov     _servo_counter,a
04C2 F5F1      1762            mov     (_servo_counter + 1),a
04C4           1763   ;        main.c:474: Servo_arm=1;
04C4 D296      1764            setb    _P1_6
04C6           1765   ;        main.c:475: Servo_base=1;
04C6 D297      1766            setb    _P1_7
04C8           1767   L020018?:
04C8           1768   ;        main.c:477: if(servo_arm==servo_counter)
04C8 AA70      1769            mov     r2,_servo_arm
04CA 7B00      1770            mov     r3,#0x00
04CC EA        1771            mov     a,r2
04CD B5F068    1772            cjne    a,_servo_counter,L020020?
04D0 EB        1773            mov     a,r3
04D1 B5F168    1774            cjne    a,(_servo_counter + 1),L020020?
04D4           1775   ;        main.c:479: Servo_arm=0;
04D4 C296      1776            clr     _P1_6
04D6           1777   L020020?:
04D6           1778   ;        main.c:481: if(servo_base==servo_counter)
04D6 AAB0      1779            mov     r2,_servo_base
04D8 7B00      1780            mov     r3,#0x00
04DA EA        1781            mov     a,r2
04DB B5F0A8    1782            cjne    a,_servo_counter,L020023?
04DE EB        1783            mov     a,r3
04DF B5F1A8    1784            cjne    a,(_servo_counter + 1),L020023?
04E2           1785   ;        main.c:483: Servo_base=0;
04E2 C297      1786            clr     _P1_7
04E4           1787   L020023?:
04E4 D0D0      1788            pop     psw
04E6 D001      1789            pop     (0+1)
04E8 D000      1790            pop     (0+0)
04EA D007      1791            pop     (0+7)
04EC D006      1792            pop     (0+6)
04EE D005      1793            pop     (0+5)
04F0 D004      1794            pop     (0+4)
04F2 D003      1795            pop     (0+3)
04F4 D002      1796            pop     (0+2)
04F6 D083      1797            pop     dph
04F8 D082      1798            pop     dpl
04FA D0F0      1799            pop     b
04FC D0E0      1800            pop     acc
04FE D030      1801            pop     bits
0500 32        1802            reti
0501           1803   ;------------------------------------------------------------
0501           1804   ;Allocation info for local variables in function 'servo_pick'
0501           1805   ;------------------------------------------------------------
0501           1806   ;i                         Allocated to registers r2 r3 
0501           1807   ;------------------------------------------------------------
0501           1808   ;        main.c:488: void servo_pick(){
0501           1809   ;        -----------------------------------------
0501           1810   ;         function servo_pick
0501           1811   ;        -----------------------------------------
0501           1812   _servo_pick:
0501           1813   ;        main.c:490: servo_arm = 1;
0501 757001    1814            mov     _servo_arm,#0x01
0504           1815   ;        main.c:492: servo_base = 250;
0504 75B0FA    1816            mov     _servo_base,#0xFA
0507           1817   ;        main.c:493: waitms(200);
0507 9000C8    1818            mov     dptr,#0x00C8
050A 120000    1819            lcall   _waitms
050D           1820   ;        main.c:494: servo_arm = 250;
050D 7570FA    1821            mov     _servo_arm,#0xFA
0510           1822   ;        main.c:495: Magnet = 1;
0510 D295      1823            setb    _P1_5
0512           1824   ;        main.c:496: waitms(200);
0512 9000C8    1825            mov     dptr,#0x00C8
0515 120000    1826            lcall   _waitms
0518           1827   ;        main.c:497: for(i = 0; i<89; i++){
0518 7A00      1828            mov     r2,#0x00
051A 7B00      1829            mov     r3,#0x00
051C           1830   L021001?:
051C C3        1831            clr     c
051D EA        1832            mov     a,r2
051E 9459      1833            subb    a,#0x59
0520 EB        1834            mov     a,r3
0521 6480      1835            xrl     a,#0x80
0523 9480      1836            subb    a,#0x80
0525 5000      1837            jnc     L021004?
0527           1838   ;        main.c:498: waitms(5);
0527 900005    1839            mov     dptr,#0x0005
052A C002      1840            push    ar2
052C C003      1841            push    ar3
052E 120000    1842            lcall   _waitms
0531 D003      1843            pop     ar3
0533 D002      1844            pop     ar2
0535           1845   ;        main.c:499: servo_base--;
0535 15B0      1846            dec     _servo_base
0537           1847   ;        main.c:497: for(i = 0; i<89; i++){
0537 0A        1848            inc     r2
0538 BA00E8    1849            cjne    r2,#0x00,L021001?
053B 0B        1850            inc     r3
053C 8000      1851            sjmp    L021001?
053E           1852   L021004?:
053E           1853   ;        main.c:501: waitms(200);
053E 9000C8    1854            mov     dptr,#0x00C8
0541 120000    1855            lcall   _waitms
0544           1856   ;        main.c:502: for(i = 0; i<159; i++){
0544 7A00      1857            mov     r2,#0x00
0546 7B00      1858            mov     r3,#0x00
0548           1859   L021005?:
0548 C3        1860            clr     c
0549 EA        1861            mov     a,r2
054A 949F      1862            subb    a,#0x9F
054C EB        1863            mov     a,r3
054D 6480      1864            xrl     a,#0x80
054F 9480      1865            subb    a,#0x80
0551 5000      1866            jnc     L021008?
0553           1867   ;        main.c:503: waitms(5);
0553 900005    1868            mov     dptr,#0x0005
0556 C002      1869            push    ar2
0558 C003      1870            push    ar3
055A 120000    1871            lcall   _waitms
055D D003      1872            pop     ar3
055F D002      1873            pop     ar2
0561           1874   ;        main.c:504: servo_arm--;
0561 1570      1875            dec     _servo_arm
0563           1876   ;        main.c:502: for(i = 0; i<159; i++){
0563 0A        1877            inc     r2
0564 BA0068    1878            cjne    r2,#0x00,L021005?
0567 0B        1879            inc     r3
0568 8000      1880            sjmp    L021005?
056A           1881   L021008?:
056A           1882   ;        main.c:506: waitms(200);
056A 9000C8    1883            mov     dptr,#0x00C8
056D 120000    1884            lcall   _waitms
0570           1885   ;        main.c:507: for(i = 0; i<65; i++){
0570 7A00      1886            mov     r2,#0x00
0572 7B00      1887            mov     r3,#0x00
0574           1888   L021009?:
0574 C3        1889            clr     c
0575 EA        1890            mov     a,r2
0576 9441      1891            subb    a,#0x41
0578 EB        1892            mov     a,r3
0579 6480      1893            xrl     a,#0x80
057B 9480      1894            subb    a,#0x80
057D 5000      1895            jnc     L021012?
057F           1896   ;        main.c:508: waitms(5);
057F 900005    1897            mov     dptr,#0x0005
0582 C002      1898            push    ar2
0584 C003      1899            push    ar3
0586 120000    1900            lcall   _waitms
0589 D003      1901            pop     ar3
058B D002      1902            pop     ar2
058D           1903   ;        main.c:509: servo_base--;
058D 15B0      1904            dec     _servo_base
058F           1905   ;        main.c:507: for(i = 0; i<65; i++){
058F 0A        1906            inc     r2
0590 BA00E8    1907            cjne    r2,#0x00,L021009?
0593 0B        1908            inc     r3
0594 8000      1909            sjmp    L021009?
0596           1910   L021012?:
0596           1911   ;        main.c:511: waitms(500);
0596 9001F4    1912            mov     dptr,#0x01F4
0599 120000    1913            lcall   _waitms
059C           1914   ;        main.c:512: Magnet = 0;
059C C295      1915            clr     _P1_5
059E           1916   ;        main.c:513: waitms(200);
059E 9000C8    1917            mov     dptr,#0x00C8
05A1 120000    1918            lcall   _waitms
05A4           1919   ;        main.c:514: servo_arm=1;
05A4 757001    1920            mov     _servo_arm,#0x01
05A7           1921   ;        main.c:515: servo_base=1;
05A7 75B001    1922            mov     _servo_base,#0x01
05AA           1923   ;        main.c:516: return;
05AA 22        1924            ret
05AB           1925   ;------------------------------------------------------------
05AB           1926   ;Allocation info for local variables in function 'check_bound'
05AB           1927   ;------------------------------------------------------------
05AB           1928   ;d2                        Allocated with name '_check_bound_PARM_2'
05AB           1929   ;d1                        Allocated to registers r2 r3 
05AB           1930   ;------------------------------------------------------------
05AB           1931   ;        main.c:519: int check_bound(int d1, int d2){
05AB           1932   ;        -----------------------------------------
05AB           1933   ;         function check_bound
05AB           1934   ;        -----------------------------------------
05AB           1935   _check_bound:
05AB AA82      1936            mov     r2,dpl
05AD AB83      1937            mov     r3,dph
05AF           1938   ;        main.c:520: if(d1>5000||d2>12000)       return 1;
05AF C3        1939            clr     c
05B0 7488      1940            mov     a,#0x88
05B2 9A        1941            subb    a,r2
05B3 7493      1942            mov     a,#(0x13 ^ 0x80)
05B5 8BF0      1943            mov     b,r3
05B7 63F080    1944            xrl     b,#0x80
05BA 95F0      1945            subb    a,b
05BC 4000      1946            jc      L022001?
05BE 74E0      1947            mov     a,#0xE0
05C0 9590      1948            subb    a,_check_bound_PARM_2
05C2 74AE      1949            mov     a,#(0x2E ^ 0x80)
05C4 8591F0    1950            mov     b,(_check_bound_PARM_2 + 1)
05C7 63F080    1951            xrl     b,#0x80
05CA 95F0      1952            subb    a,b
05CC 5000      1953            jnc     L022002?
05CE           1954   L022001?:
05CE 900001    1955            mov     dptr,#0x0001
05D1           1956   ;        main.c:521: else return 0;
05D1 22        1957            ret
05D2           1958   L022002?:
05D2 900000    1959            mov     dptr,#0x0000
05D5 22        1960            ret
05D6           1961   ;------------------------------------------------------------
05D6           1962   ;Allocation info for local variables in function 'Init_all'
05D6           1963   ;------------------------------------------------------------
05D6           1964   ;------------------------------------------------------------
05D6           1965   ;        main.c:524: void Init_all(){
05D6           1966   ;        -----------------------------------------
05D6           1967   ;         function Init_all
05D6           1968   ;        -----------------------------------------
05D6           1969   _Init_all:
05D6           1970   ;        main.c:526: Set_Pin_Output(0x24);
05D6 758224    1971            mov     dpl,#0x24
05D9 120000    1972            lcall   _Set_Pin_Output
05DC           1973   ;        main.c:527: Set_Pin_Output(0x23);
05DC 758223    1974            mov     dpl,#0x23
05DF 120000    1975            lcall   _Set_Pin_Output
05E2           1976   ;        main.c:528: Set_Pin_Output(0x22);
05E2 758222    1977            mov     dpl,#0x22
05E5 120000    1978            lcall   _Set_Pin_Output
05E8           1979   ;        main.c:529: Set_Pin_Output(0x21);
05E8 758221    1980            mov     dpl,#0x21
05EB 120000    1981            lcall   _Set_Pin_Output
05EE           1982   ;        main.c:530: Set_Pin_Output(0x17);
05EE 758217    1983            mov     dpl,#0x17
05F1 120000    1984            lcall   _Set_Pin_Output
05F4           1985   ;        main.c:531: Set_Pin_Output(0x16);
05F4 758216    1986            mov     dpl,#0x16
05F7 120000    1987            lcall   _Set_Pin_Output
05FA           1988   ;        main.c:532: Set_Pin_Output(0x15);
05FA 758215    1989            mov     dpl,#0x15
05FD 120000    1990            lcall   _Set_Pin_Output
0600           1991   ;        main.c:533: Set_Pin_Input(0x02);
0600 758202    1992            mov     dpl,#0x02
0603 120000    1993            lcall   _Set_Pin_Input
0606           1994   ;        main.c:535: InitPinADC(1,3);
0606 75E003    1995            mov     _InitPinADC_PARM_2,#0x03
0609 758201    1996            mov     dpl,#0x01
060C 120000    1997            lcall   _InitPinADC
060F           1998   ;        main.c:536: InitPinADC(1,4);
060F 75E004    1999            mov     _InitPinADC_PARM_2,#0x04
0612 758201    2000            mov     dpl,#0x01
0615 120000    2001            lcall   _InitPinADC
0618           2002   ;        main.c:537: InitADC();
0618 120000    2003            lcall   _InitADC
061B           2004   ;        main.c:539: TMOD&=0b_1111_0000; 
061B 5389F0    2005            anl     _TMOD,#0xF0
061E           2006   ;        main.c:540: TMOD|=0b_0000_0001; 
061E 438901    2007            orl     _TMOD,#0x01
0621           2008   ;        main.c:541: TR0=0; 
0621 C28C      2009            clr     _TR0
0623           2010   ;        main.c:543: Servo_arm=0;
0623 C296      2011            clr     _P1_6
0625           2012   ;        main.c:544: Servo_base=0;
0625 C297      2013            clr     _P1_7
0627           2014   ;        main.c:545: Magnet = 0;
0627 C295      2015            clr     _P1_5
0629           2016   ;        main.c:546: return;
0629 22        2017            ret
062A           2018   ;------------------------------------------------------------
062A           2019   ;Allocation info for local variables in function 'Move_back_ms'
062A           2020   ;------------------------------------------------------------
062A           2021   ;ms                        Allocated to registers r2 r3 
062A           2022   ;------------------------------------------------------------
062A           2023   ;        main.c:549: void Move_back_ms(int ms){
062A           2024   ;        -----------------------------------------
062A           2025   ;         function Move_back_ms
062A           2026   ;        -----------------------------------------
062A           2027   _Move_back_ms:
062A AA82      2028            mov     r2,dpl
062C AB83      2029            mov     r3,dph
062E           2030   ;        main.c:551: L_motor_dir = 1;
062E 753001    2031            mov     _L_motor_dir,#0x01
0631           2032   ;        main.c:552: R_motor_dir = 1;
0631 75F001    2033            mov     _R_motor_dir,#0x01
0634           2034   ;        main.c:554: pwm_left = 50;
0634 75B032    2035            mov     _pwm_left,#0x32
0637           2036   ;        main.c:555: pwm_right = 50;
0637 757032    2037            mov     _pwm_right,#0x32
063A           2038   ;        main.c:557: waitms(ms);
063A 8A82      2039            mov     dpl,r2
063C 8B83      2040            mov     dph,r3
063E 120000    2041            lcall   _waitms
0641           2042   ;        main.c:559: L_motor_dir = 0;
0641 753000    2043            mov     _L_motor_dir,#0x00
0644           2044   ;        main.c:560: R_motor_dir = 0;
0644 75F000    2045            mov     _R_motor_dir,#0x00
0647           2046   ;        main.c:561: pwm_left = 0;
0647 75B000    2047            mov     _pwm_left,#0x00
064A           2048   ;        main.c:562: pwm_right = 0;
064A 757000    2049            mov     _pwm_right,#0x00
064D           2050   ;        main.c:563: return;
064D 22        2051            ret
064E           2052   ;------------------------------------------------------------
064E           2053   ;Allocation info for local variables in function 'Right_angle'
064E           2054   ;------------------------------------------------------------
064E           2055   ;angle                     Allocated to registers r2 r3 
064E           2056   ;------------------------------------------------------------
064E           2057   ;        main.c:566: void Right_angle(int angle){
064E           2058   ;        -----------------------------------------
064E           2059   ;         function Right_angle
064E           2060   ;        -----------------------------------------
064E           2061   _Right_angle:
064E AA82      2062            mov     r2,dpl
0650 AB83      2063            mov     r3,dph
0652           2064   ;        main.c:568: L_motor_dir = 1;
0652 753001    2065            mov     _L_motor_dir,#0x01
0655           2066   ;        main.c:569: R_motor_dir = 0;
0655 75F000    2067            mov     _R_motor_dir,#0x00
0658           2068   ;        main.c:570: pwm_left = 80;
0658 75B050    2069            mov     _pwm_left,#0x50
065B           2070   ;        main.c:571: pwm_right = 80;
065B 757050    2071            mov     _pwm_right,#0x50
065E           2072   ;        main.c:573: waitms(angle);
065E 8A82      2073            mov     dpl,r2
0660 8B83      2074            mov     dph,r3
0662 120000    2075            lcall   _waitms
0665           2076   ;        main.c:575: L_motor_dir = 0;
0665 753000    2077            mov     _L_motor_dir,#0x00
0668           2078   ;        main.c:576: R_motor_dir = 0;
0668 75F000    2079            mov     _R_motor_dir,#0x00
066B           2080   ;        main.c:577: pwm_left = 0;
066B 75B000    2081            mov     _pwm_left,#0x00
066E           2082   ;        main.c:578: pwm_right = 0;
066E 757000    2083            mov     _pwm_right,#0x00
0671           2084   ;        main.c:579: return;
0671 22        2085            ret
0672           2086   ;------------------------------------------------------------
0672           2087   ;Allocation info for local variables in function 'Move_forward'
0672           2088   ;------------------------------------------------------------
0672           2089   ;------------------------------------------------------------
0672           2090   ;        main.c:582: void Move_forward(){
0672           2091   ;        -----------------------------------------
0672           2092   ;         function Move_forward
0672           2093   ;        -----------------------------------------
0672           2094   _Move_forward:
0672           2095   ;        main.c:584: L_motor_dir = 0;
0672 753000    2096            mov     _L_motor_dir,#0x00
0675           2097   ;        main.c:585: R_motor_dir = 0;
0675 75F000    2098            mov     _R_motor_dir,#0x00
0678           2099   ;        main.c:586: pwm_left = 80;
0678 75B050    2100            mov     _pwm_left,#0x50
067B           2101   ;        main.c:587: pwm_right = 80;
067B 757050    2102            mov     _pwm_right,#0x50
067E           2103   ;        main.c:588: return;
067E 22        2104            ret
067F           2105   ;------------------------------------------------------------
067F           2106   ;Allocation info for local variables in function 'simple_rand'
067F           2107   ;------------------------------------------------------------
067F           2108   ;------------------------------------------------------------
067F           2109   ;        main.c:591: unsigned int simple_rand() {
067F           2110   ;        -----------------------------------------
067F           2111   ;         function simple_rand
067F           2112   ;        -----------------------------------------
067F           2113   _simple_rand:
067F           2114   ;        main.c:592: seed = (seed * 25173 + 13849) & 0xFFFF;  
067F 853000    2115            mov     __mulint_PARM_2,_seed
0682 853101    2116            mov     (__mulint_PARM_2 + 1),(_seed + 1)
0685 906255    2117            mov     dptr,#0x6255
0688 120000    2118            lcall   __mulint
068B E582      2119            mov     a,dpl
068D 8583F0    2120            mov     b,dph
0690 2419      2121            add     a,#0x19
0692 F530      2122            mov     _seed,a
0694 7436      2123            mov     a,#0x36
0696 35F0      2124            addc    a,b
0698 F531      2125            mov     (_seed + 1),a
069A           2126   ;        main.c:593: return seed;     
069A 853082    2127            mov     dpl,_seed
069D 853183    2128            mov     dph,(_seed + 1)
06A0 22        2129            ret
06A1           2130   ;------------------------------------------------------------
06A1           2131   ;Allocation info for local variables in function 'get_random_90_250'
06A1           2132   ;------------------------------------------------------------
06A1           2133   ;------------------------------------------------------------
06A1           2134   ;        main.c:596: unsigned int get_random_90_250() {
06A1           2135   ;        -----------------------------------------
06A1           2136   ;         function get_random_90_250
06A1           2137   ;        -----------------------------------------
06A1           2138   _get_random_90_250:
06A1           2139   ;        main.c:597: return (simple_rand() % (250 - 85 + 1)) + 85;
06A1 120000    2140            lcall   _simple_rand
06A4 7500A6    2141            mov     __moduint_PARM_2,#0xA6
06A7 E4        2142            clr     a
06A8 F501      2143            mov     (__moduint_PARM_2 + 1),a
06AA 120000    2144            lcall   __moduint
06AD E582      2145            mov     a,dpl
06AF 8583F0    2146            mov     b,dph
06B2 2455      2147            add     a,#0x55
06B4 F582      2148            mov     dpl,a
06B6 E4        2149            clr     a
06B7 35F0      2150            addc    a,b
06B9 F583      2151            mov     dph,a
06BB 22        2152            ret
06BC           2153   ;------------------------------------------------------------
06BC           2154   ;Allocation info for local variables in function 'Auto_mode_slave'
06BC           2155   ;------------------------------------------------------------
06BC           2156   ;count                     Allocated to registers r4 r5 
06BC           2157   ;command                   Allocated with name '_Auto_mode_slave_command_1_139'
06BC           2158   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_139'
06BC           2159   ;bound                     Allocated to registers r2 r3 
06BC           2160   ;c                         Allocated to registers r6 
06BC           2161   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_139'
06BC           2162   ;angle                     Allocated to registers r2 r3 
06BC           2163   ;------------------------------------------------------------
06BC           2164   ;        main.c:600: void Auto_mode_slave(){
06BC           2165   ;        -----------------------------------------
06BC           2166   ;         function Auto_mode_slave
06BC           2167   ;        -----------------------------------------
06BC           2168   _Auto_mode_slave:
06BC           2169   ;        main.c:603: int state_res = 1;
06BC 75A001    2170            mov     _Auto_mode_slave_state_res_1_139,#0x01
06BF E4        2171            clr     a
06C0 F5A1      2172            mov     (_Auto_mode_slave_state_res_1_139 + 1),a
06C2           2173   ;        main.c:609: while(count < 20 && state_res){
06C2 7C00      2174            mov     r4,#0x00
06C4 7D00      2175            mov     r5,#0x00
06C6           2176   L029018?:
06C6 C3        2177            clr     c
06C7 EC        2178            mov     a,r4
06C8 9414      2179            subb    a,#0x14
06CA ED        2180            mov     a,r5
06CB 6480      2181            xrl     a,#0x80
06CD 9480      2182            subb    a,#0x80
06CF 4000      2183            jc      L029034?
06D1 020000    2184            ljmp    L029020?
06D4           2185   L029034?:
06D4 E5A0      2186            mov     a,_Auto_mode_slave_state_res_1_139
06D6 45A1      2187            orl     a,(_Auto_mode_slave_state_res_1_139 + 1)
06D8 7000      2188            jnz     L029035?
06DA 020000    2189            ljmp    L029020?
06DD           2190   L029035?:
06DD           2191   ;        main.c:611: if(RXU1()){
06DD C004      2192            push    ar4
06DF C005      2193            push    ar5
06E1 120000    2194            lcall   _RXU1
06E4 D005      2195            pop     ar5
06E6 D004      2196            pop     ar4
06E8 4000      2197            jc      L029036?
06EA 020000    2198            ljmp    L029012?
06ED           2199   L029036?:
06ED           2200   ;        main.c:612: c=getchar1();       
06ED C004      2201            push    ar4
06EF C005      2202            push    ar5
06F1 120000    2203            lcall   _getchar1
06F4 AE82      2204            mov     r6,dpl
06F6 D005      2205            pop     ar5
06F8 D004      2206            pop     ar4
06FA           2207   ;        main.c:613: if(c=='!'){
06FA BE2178    2208            cjne    r6,#0x21,L029037?
06FD 8000      2209            sjmp    L029038?
06FF           2210   L029037?:
06FF 020000    2211            ljmp    L029009?
0702           2212   L029038?:
0702           2213   ;        main.c:614: getstr1(buff, sizeof(buff)-1);
0702 75F013    2214            mov     _getstr1_PARM_2,#0x13
0705 9046B0    2215            mov     dptr,#_buff
0708 75F040    2216            mov     b,#0x40
070B C004      2217            push    ar4
070D C005      2218            push    ar5
070F 120000    2219            lcall   _getstr1
0712           2220   ;        main.c:615: if(strlen(buff)==11){
0712 9046B0    2221            mov     dptr,#_buff
0715 75F040    2222            mov     b,#0x40
0718 120000    2223            lcall   _strlen
071B AF82      2224            mov     r7,dpl
071D AA83      2225            mov     r2,dph
071F D005      2226            pop     ar5
0721 D004      2227            pop     ar4
0723 BF0B78    2228            cjne    r7,#0x0B,L029039?
0726 BA0078    2229            cjne    r2,#0x00,L029039?
0729 8000      2230            sjmp    L029040?
072B           2231   L029039?:
072B 020000    2232            ljmp    L029012?
072E           2233   L029040?:
072E           2234   ;        main.c:617: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
072E C004      2235            push    ar4
0730 C005      2236            push    ar5
0732 7440      2237            mov     a,#_Auto_mode_slave_command_1_139
0734 C0E0      2238            push    acc
0736 74BB      2239            mov     a,#(_Auto_mode_slave_command_1_139 >> 8)
0738 C0E0      2240            push    acc
073A 7440      2241            mov     a,#0x40
073C C0E0      2242            push    acc
073E 74F0      2243            mov     a,#_Auto_mode_slave_dummy_1_139
0740 C0E0      2244            push    acc
0742 74BB      2245            mov     a,#(_Auto_mode_slave_dummy_1_139 >> 8)
0744 C0E0      2246            push    acc
0746 7440      2247            mov     a,#0x40
0748 C0E0      2248            push    acc
074A 74F0      2249            mov     a,#_Auto_mode_slave_dummy_1_139
074C C0E0      2250            push    acc
074E 74BB      2251            mov     a,#(_Auto_mode_slave_dummy_1_139 >> 8)
0750 C0E0      2252            push    acc
0752 7440      2253            mov     a,#0x40
0754 C0E0      2254            push    acc
0756 74F0      2255            mov     a,#_Auto_mode_slave_dummy_1_139
0758 C0E0      2256            push    acc
075A 74BB      2257            mov     a,#(_Auto_mode_slave_dummy_1_139 >> 8)
075C C0E0      2258            push    acc
075E 7440      2259            mov     a,#0x40
0760 C0E0      2260            push    acc
0762 74F8      2261            mov     a,#__str_3
0764 C0E0      2262            push    acc
0766 74D9      2263            mov     a,#(__str_3 >> 8)
0768 C0E0      2264            push    acc
076A 7480      2265            mov     a,#0x80
076C C0E0      2266            push    acc
076E 74B0      2267            mov     a,#_buff
0770 C0E0      2268            push    acc
0772 7446      2269            mov     a,#(_buff >> 8)
0774 C0E0      2270            push    acc
0776 7440      2271            mov     a,#0x40
0778 C0E0      2272            push    acc
077A 120000    2273            lcall   _sscanf
077D E581      2274            mov     a,sp
077F 24EE      2275            add     a,#0xee
0781 F581      2276            mov     sp,a
0783 D005      2277            pop     ar5
0785 D004      2278            pop     ar4
0787           2279   ;        main.c:618: if(command) state_res = 1;
0787 E540      2280            mov     a,_Auto_mode_slave_command_1_139
0789 4541      2281            orl     a,(_Auto_mode_slave_command_1_139 + 1)
078B 6000      2282            jz      L029002?
078D 75A001    2283            mov     _Auto_mode_slave_state_res_1_139,#0x01
0790 E4        2284            clr     a
0791 F5A1      2285            mov     (_Auto_mode_slave_state_res_1_139 + 1),a
0793 8000      2286            sjmp    L029012?
0795           2287   L029002?:
0795           2288   ;        main.c:619: else state_res = 0;
0795 E4        2289            clr     a
0796 F5A0      2290            mov     _Auto_mode_slave_state_res_1_139,a
0798 F5A1      2291            mov     (_Auto_mode_slave_state_res_1_139 + 1),a
079A 8000      2292            sjmp    L029012?
079C           2293   L029009?:
079C           2294   ;        main.c:625: else if(c=='@'){
079C BE4038    2295            cjne    r6,#0x40,L029012?
079F           2296   ;        main.c:626: sprintf(buff, "%01d,%02d,0000\n", state_res, count);
079F C004      2297            push    ar4
07A1 C005      2298            push    ar5
07A3 C004      2299            push    ar4
07A5 C005      2300            push    ar5
07A7 C0A0      2301            push    _Auto_mode_slave_state_res_1_139
07A9 C0A1      2302            push    (_Auto_mode_slave_state_res_1_139 + 1)
07AB 74B8      2303            mov     a,#__str_4
07AD C0E0      2304            push    acc
07AF 74DA      2305            mov     a,#(__str_4 >> 8)
07B1 C0E0      2306            push    acc
07B3 7480      2307            mov     a,#0x80
07B5 C0E0      2308            push    acc
07B7 74B0      2309            mov     a,#_buff
07B9 C0E0      2310            push    acc
07BB 7446      2311            mov     a,#(_buff >> 8)
07BD C0E0      2312            push    acc
07BF 7440      2313            mov     a,#0x40
07C1 C0E0      2314            push    acc
07C3 120000    2315            lcall   _sprintf
07C6 E581      2316            mov     a,sp
07C8 24F6      2317            add     a,#0xf6
07CA F581      2318            mov     sp,a
07CC           2319   ;        main.c:627: waitms(5); 
07CC 900005    2320            mov     dptr,#0x0005
07CF 120000    2321            lcall   _waitms
07D2           2322   ;        main.c:628: sendstr1(buff);
07D2 9046B0    2323            mov     dptr,#_buff
07D5 75F040    2324            mov     b,#0x40
07D8 120000    2325            lcall   _sendstr1
07DB D005      2326            pop     ar5
07DD D004      2327            pop     ar4
07DF           2328   L029012?:
07DF           2329   ;        main.c:633: Move_forward();
07DF C004      2330            push    ar4
07E1 C005      2331            push    ar5
07E3 120000    2332            lcall   _Move_forward
07E6           2333   ;        main.c:635: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
07E6 758209    2334            mov     dpl,#0x09
07E9 120000    2335            lcall   _ADC_at_Pin
07EC 8582B0    2336            mov     _d1,dpl
07EF 8583B1    2337            mov     (_d1 + 1),dph
07F2           2338   ;        main.c:636: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
07F2 75820A    2339            mov     dpl,#0x0A
07F5 120000    2340            lcall   _ADC_at_Pin
07F8 858270    2341            mov     _d2,dpl
07FB 858371    2342            mov     (_d2 + 1),dph
07FE           2343   ;        main.c:637: bound = check_bound(d1,d2);
07FE 857090    2344            mov     _check_bound_PARM_2,_d2
0801 857191    2345            mov     (_check_bound_PARM_2 + 1),(_d2 + 1)
0804 85B082    2346            mov     dpl,_d1
0807 85B183    2347            mov     dph,(_d1 + 1)
080A 120000    2348            lcall   _check_bound
080D AA82      2349            mov     r2,dpl
080F AB83      2350            mov     r3,dph
0811 D005      2351            pop     ar5
0813 D004      2352            pop     ar4
0815           2353   ;        main.c:638: printf("f:%04ld, d1:%d, d2:%d, bound_dectect: %d\r\n",freq100, d1,d2,bound);
0815 C002      2354            push    ar2
0817 C003      2355            push    ar3
0819 C004      2356            push    ar4
081B C005      2357            push    ar5
081D C002      2358            push    ar2
081F C003      2359            push    ar3
0821 C070      2360            push    _d2
0823 C071      2361            push    (_d2 + 1)
0825 C0B0      2362            push    _d1
0827 C0B1      2363            push    (_d1 + 1)
0829 C030      2364            push    _freq100
082B C031      2365            push    (_freq100 + 1)
082D C032      2366            push    (_freq100 + 2)
082F C033      2367            push    (_freq100 + 3)
0831 7438      2368            mov     a,#__str_5
0833 C0E0      2369            push    acc
0835 74DB      2370            mov     a,#(__str_5 >> 8)
0837 C0E0      2371            push    acc
0839 7480      2372            mov     a,#0x80
083B C0E0      2373            push    acc
083D 120000    2374            lcall   _printf
0840 E581      2375            mov     a,sp
0842 24F3      2376            add     a,#0xf3
0844 F581      2377            mov     sp,a
0846 D005      2378            pop     ar5
0848 D004      2379            pop     ar4
084A D003      2380            pop     ar3
084C D002      2381            pop     ar2
084E           2382   ;        main.c:640: if (freq100>5400){
084E C3        2383            clr     c
084F 7418      2384            mov     a,#0x18
0851 9530      2385            subb    a,_freq100
0853 7415      2386            mov     a,#0x15
0855 9531      2387            subb    a,(_freq100 + 1)
0857 E4        2388            clr     a
0858 9532      2389            subb    a,(_freq100 + 2)
085A E4        2390            clr     a
085B 6480      2391            xrl     a,#0x80
085D 8533F0    2392            mov     b,(_freq100 + 3)
0860 63F080    2393            xrl     b,#0x80
0863 95F0      2394            subb    a,b
0865 5000      2395            jnc     L029014?
0867           2396   ;        main.c:641: Move_back_ms(300);
0867 90012C    2397            mov     dptr,#0x012C
086A C002      2398            push    ar2
086C C003      2399            push    ar3
086E C004      2400            push    ar4
0870 C005      2401            push    ar5
0872 120000    2402            lcall   _Move_back_ms
0875           2403   ;        main.c:642: servo_pick();
0875 120000    2404            lcall   _servo_pick
0878 D005      2405            pop     ar5
087A D004      2406            pop     ar4
087C D003      2407            pop     ar3
087E D002      2408            pop     ar2
0880           2409   ;        main.c:643: count++;
0880 0C        2410            inc     r4
0881 BC00B8    2411            cjne    r4,#0x00,L029045?
0884 0D        2412            inc     r5
0885           2413   L029045?:
0885           2414   ;        main.c:644: Move_forward();
0885 C002      2415            push    ar2
0887 C003      2416            push    ar3
0889 C004      2417            push    ar4
088B C005      2418            push    ar5
088D 120000    2419            lcall   _Move_forward
0890 D005      2420            pop     ar5
0892 D004      2421            pop     ar4
0894 D003      2422            pop     ar3
0896 D002      2423            pop     ar2
0898           2424   L029014?:
0898           2425   ;        main.c:647: if(bound == 1){
0898 BA01F8    2426            cjne    r2,#0x01,L029046?
089B BB00F8    2427            cjne    r3,#0x00,L029046?
089E 8000      2428            sjmp    L029047?
08A0           2429   L029046?:
08A0 020000    2430            ljmp    L029018?
08A3           2431   L029047?:
08A3           2432   ;        main.c:648: angle = get_random_90_250();
08A3 C004      2433            push    ar4
08A5 C005      2434            push    ar5
08A7 120000    2435            lcall   _get_random_90_250
08AA AA82      2436            mov     r2,dpl
08AC AB83      2437            mov     r3,dph
08AE D005      2438            pop     ar5
08B0 D004      2439            pop     ar4
08B2           2440   ;        main.c:649: Right_angle(angle*600/90);
08B2 8A00      2441            mov     __mulint_PARM_2,r2
08B4 8B01      2442            mov     (__mulint_PARM_2 + 1),r3
08B6 900258    2443            mov     dptr,#0x0258
08B9 C002      2444            push    ar2
08BB C003      2445            push    ar3
08BD C004      2446            push    ar4
08BF C005      2447            push    ar5
08C1 120000    2448            lcall   __mulint
08C4 AE82      2449            mov     r6,dpl
08C6 AF83      2450            mov     r7,dph
08C8 75005A    2451            mov     __divuint_PARM_2,#0x5A
08CB E4        2452            clr     a
08CC F501      2453            mov     (__divuint_PARM_2 + 1),a
08CE 8E82      2454            mov     dpl,r6
08D0 8F83      2455            mov     dph,r7
08D2 120000    2456            lcall   __divuint
08D5 120000    2457            lcall   _Right_angle
08D8 D005      2458            pop     ar5
08DA D004      2459            pop     ar4
08DC D003      2460            pop     ar3
08DE D002      2461            pop     ar2
08E0           2462   ;        main.c:650: printf("Turn!!! %d\r\n", angle);
08E0 C004      2463            push    ar4
08E2 C005      2464            push    ar5
08E4 C002      2465            push    ar2
08E6 C003      2466            push    ar3
08E8 7408      2467            mov     a,#__str_6
08EA C0E0      2468            push    acc
08EC 74DD      2469            mov     a,#(__str_6 >> 8)
08EE C0E0      2470            push    acc
08F0 7480      2471            mov     a,#0x80
08F2 C0E0      2472            push    acc
08F4 120000    2473            lcall   _printf
08F7 E581      2474            mov     a,sp
08F9 24FB      2475            add     a,#0xfb
08FB F581      2476            mov     sp,a
08FD D005      2477            pop     ar5
08FF D004      2478            pop     ar4
0901 020000    2479            ljmp    L029018?
0904           2480   L029020?:
0904           2481   ;        main.c:654: printf("Auto mode finished!\r\n");
0904 7448      2482            mov     a,#__str_7
0906 C0E0      2483            push    acc
0908 74DD      2484            mov     a,#(__str_7 >> 8)
090A C0E0      2485            push    acc
090C 7480      2486            mov     a,#0x80
090E C0E0      2487            push    acc
0910 120000    2488            lcall   _printf
0913 1581      2489            dec     sp
0915 1581      2490            dec     sp
0917 1581      2491            dec     sp
0919 22        2492            ret
091A           2493   ;------------------------------------------------------------
091A           2494   ;Allocation info for local variables in function 'main'
091A           2495   ;------------------------------------------------------------
091A           2496   ;c                         Allocated to registers r2 
091A           2497   ;vx_error                  Allocated with name '_main_vx_error_1_148'
091A           2498   ;vy_error                  Allocated with name '_main_vy_error_1_148'
091A           2499   ;vx_err                    Allocated with name '_main_vx_err_1_148'
091A           2500   ;vy_err                    Allocated with name '_main_vy_err_1_148'
091A           2501   ;vx                        Allocated with name '_main_vx_1_148'
091A           2502   ;vy                        Allocated with name '_main_vy_1_148'
091A           2503   ;threshold                 Allocated to registers 
091A           2504   ;motor_pwm                 Allocated to registers 
091A           2505   ;pick                      Allocated with name '_main_pick_1_148'
091A           2506   ;auto_mode                 Allocated with name '_main_auto_mode_1_148'
091A           2507   ;pick_done                 Allocated to registers 
091A           2508   ;------------------------------------------------------------
091A           2509   ;        main.c:657: void main (void)
091A           2510   ;        -----------------------------------------
091A           2511   ;         function main
091A           2512   ;        -----------------------------------------
091A           2513   _main:
091A           2514   ;        main.c:661: int vx = 0, vy = 0; 
091A           2515   ;        main.c:664: int pick = 0;
091A           2516   ;        main.c:665: int auto_mode = 0;
091A E4        2517            clr     a
091B F570      2518            mov     _main_vx_1_148,a
091D F571      2519            mov     (_main_vx_1_148 + 1),a
091F F5B0      2520            mov     _main_vy_1_148,a
0921 F5B1      2521            mov     (_main_vy_1_148 + 1),a
0923 F500      2522            mov     _main_pick_1_148,a
0925 F501      2523            mov     (_main_pick_1_148 + 1),a
0927 F550      2524            mov     _main_auto_mode_1_148,a
0929 F551      2525            mov     (_main_auto_mode_1_148 + 1),a
092B           2526   ;        main.c:668: Init_all();
092B 120000    2527            lcall   _Init_all
092E           2528   ;        main.c:669: waitms(500);
092E 9001F4    2529            mov     dptr,#0x01F4
0931 120000    2530            lcall   _waitms
0934           2531   ;        main.c:670: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
0934 7488      2532            mov     a,#__str_8
0936 C0E0      2533            push    acc
0938 74DD      2534            mov     a,#(__str_8 >> 8)
093A C0E0      2535            push    acc
093C 7480      2536            mov     a,#0x80
093E C0E0      2537            push    acc
0940 120000    2538            lcall   _printf
0943 1581      2539            dec     sp
0945 1581      2540            dec     sp
0947 1581      2541            dec     sp
0949           2542   ;        main.c:671: UART1_Init(9600);
0949 902580    2543            mov     dptr,#0x2580
094C E4        2544            clr     a
094D F5F0      2545            mov     b,a
094F 120000    2546            lcall   _UART1_Init
0952           2547   ;        main.c:673: ReceptionOff();
0952 120000    2548            lcall   _ReceptionOff
0955           2549   ;        main.c:676: SendATCommand("AT+VER\r\n");
0955 90DDC8    2550            mov     dptr,#__str_9
0958 75F080    2551            mov     b,#0x80
095B 120000    2552            lcall   _SendATCommand
095E           2553   ;        main.c:677: SendATCommand("AT+BAUD\r\n");
095E 90DE08    2554            mov     dptr,#__str_10
0961 75F080    2555            mov     b,#0x80
0964 120000    2556            lcall   _SendATCommand
0967           2557   ;        main.c:678: SendATCommand("AT+RFID\r\n");
0967 90DE48    2558            mov     dptr,#__str_11
096A 75F080    2559            mov     b,#0x80
096D 120000    2560            lcall   _SendATCommand
0970           2561   ;        main.c:679: SendATCommand("AT+DVID\r\n");
0970 90DE88    2562            mov     dptr,#__str_12
0973 75F080    2563            mov     b,#0x80
0976 120000    2564            lcall   _SendATCommand
0979           2565   ;        main.c:680: SendATCommand("AT+RFC002\r\n");
0979 90DEC8    2566            mov     dptr,#__str_13
097C 75F080    2567            mov     b,#0x80
097F 120000    2568            lcall   _SendATCommand
0982           2569   ;        main.c:681: SendATCommand("AT+POWE\r\n");
0982 90DF08    2570            mov     dptr,#__str_14
0985 75F080    2571            mov     b,#0x80
0988 120000    2572            lcall   _SendATCommand
098B           2573   ;        main.c:682: SendATCommand("AT+CLSS\r\n");
098B 90DF48    2574            mov     dptr,#__str_15
098E 75F080    2575            mov     b,#0x80
0991 120000    2576            lcall   _SendATCommand
0994           2577   ;        main.c:683: SendATCommand("AT+DVIDEF11\r\n");  
0994 90DF88    2578            mov     dptr,#__str_16
0997 75F080    2579            mov     b,#0x80
099A 120000    2580            lcall   _SendATCommand
099D           2581   ;        main.c:686: L_bridge_1 = 0; 
099D C2A1      2582            clr     _P2_1
099F           2583   ;        main.c:687: L_bridge_2 = 0; 
099F C2A2      2584            clr     _P2_2
09A1           2585   ;        main.c:688: R_bridge_1 = 0; 
09A1 C2A4      2586            clr     _P2_4
09A3           2587   ;        main.c:689: R_bridge_2 = 0; 
09A3 C2A3      2588            clr     _P2_3
09A5           2589   ;        main.c:691: while(1)
09A5           2590   L030053?:
09A5           2591   ;        main.c:694: if(pick==1){
09A5 7401      2592            mov     a,#0x01
09A7 B50008    2593            cjne    a,_main_pick_1_148,L030080?
09AA E4        2594            clr     a
09AB B50108    2595            cjne    a,(_main_pick_1_148 + 1),L030080?
09AE 8000      2596            sjmp    L030081?
09B0           2597   L030080?:
09B0 8000      2598            sjmp    L030002?
09B2           2599   L030081?:
09B2           2600   ;        main.c:695: servo_pick();
09B2 120000    2601            lcall   _servo_pick
09B5           2602   ;        main.c:696: waitms(1000);
09B5 9003E8    2603            mov     dptr,#0x03E8
09B8 120000    2604            lcall   _waitms
09BB           2605   ;        main.c:697: pick = 0;
09BB E4        2606            clr     a
09BC F500      2607            mov     _main_pick_1_148,a
09BE F501      2608            mov     (_main_pick_1_148 + 1),a
09C0           2609   L030002?:
09C0           2610   ;        main.c:700: if(auto_mode){
09C0 E550      2611            mov     a,_main_auto_mode_1_148
09C2 4551      2612            orl     a,(_main_auto_mode_1_148 + 1)
09C4 6000      2613            jz      L030004?
09C6           2614   ;        main.c:701: Auto_mode_slave();
09C6 120000    2615            lcall   _Auto_mode_slave
09C9           2616   ;        main.c:702: auto_mode = 0;
09C9 E4        2617            clr     a
09CA F550      2618            mov     _main_auto_mode_1_148,a
09CC F551      2619            mov     (_main_auto_mode_1_148 + 1),a
09CE           2620   L030004?:
09CE           2621   ;        main.c:706: if(RXU1()) // Something has arrived
09CE 120000    2622            lcall   _RXU1
09D1 5000      2623            jnc     L030053?
09D3           2624   ;        main.c:708: c=getchar1();
09D3 120000    2625            lcall   _getchar1
09D6 AA82      2626            mov     r2,dpl
09D8           2627   ;        main.c:710: if(c=='!') // Master is sending message
09D8 BA2108    2628            cjne    r2,#0x21,L030084?
09DB 8000      2629            sjmp    L030085?
09DD           2630   L030084?:
09DD 020000    2631            ljmp    L030048?
09E0           2632   L030085?:
09E0           2633   ;        main.c:712: getstr1(buff, sizeof(buff)-1);
09E0 75F013    2634            mov     _getstr1_PARM_2,#0x13
09E3 9046B0    2635            mov     dptr,#_buff
09E6 75F040    2636            mov     b,#0x40
09E9 120000    2637            lcall   _getstr1
09EC           2638   ;        main.c:713: if(strlen(buff)==11)
09EC 9046B0    2639            mov     dptr,#_buff
09EF 75F040    2640            mov     b,#0x40
09F2 120000    2641            lcall   _strlen
09F5 AB82      2642            mov     r3,dpl
09F7 AC83      2643            mov     r4,dph
09F9 BB0BC8    2644            cjne    r3,#0x0B,L030086?
09FC BC00C8    2645            cjne    r4,#0x00,L030086?
09FF 8000      2646            sjmp    L030087?
0A01           2647   L030086?:
0A01 020000    2648            ljmp    L030043?
0A04           2649   L030087?:
0A04           2650   ;        main.c:715: printf("Master says: %s,\r\n", buff);
0A04 74B0      2651            mov     a,#_buff
0A06 C0E0      2652            push    acc
0A08 7446      2653            mov     a,#(_buff >> 8)
0A0A C0E0      2654            push    acc
0A0C 7440      2655            mov     a,#0x40
0A0E C0E0      2656            push    acc
0A10 7488      2657            mov     a,#__str_17
0A12 C0E0      2658            push    acc
0A14 74E2      2659            mov     a,#(__str_17 >> 8)
0A16 C0E0      2660            push    acc
0A18 7480      2661            mov     a,#0x80
0A1A C0E0      2662            push    acc
0A1C 120000    2663            lcall   _printf
0A1F E581      2664            mov     a,sp
0A21 24FA      2665            add     a,#0xfa
0A23 F581      2666            mov     sp,a
0A25           2667   ;        main.c:716: sscanf(buff, "%03d,%03d,%01d,%01d", &vx, &vy, &pick, &auto_mode);
0A25 7450      2668            mov     a,#_main_auto_mode_1_148
0A27 C0E0      2669            push    acc
0A29 74BE      2670            mov     a,#(_main_auto_mode_1_148 >> 8)
0A2B C0E0      2671            push    acc
0A2D 7440      2672            mov     a,#0x40
0A2F C0E0      2673            push    acc
0A31 7400      2674            mov     a,#_main_pick_1_148
0A33 C0E0      2675            push    acc
0A35 74BE      2676            mov     a,#(_main_pick_1_148 >> 8)
0A37 C0E0      2677            push    acc
0A39 7440      2678            mov     a,#0x40
0A3B C0E0      2679            push    acc
0A3D 74B0      2680            mov     a,#_main_vy_1_148
0A3F C0E0      2681            push    acc
0A41 74BD      2682            mov     a,#(_main_vy_1_148 >> 8)
0A43 C0E0      2683            push    acc
0A45 7440      2684            mov     a,#0x40
0A47 C0E0      2685            push    acc
0A49 7470      2686            mov     a,#_main_vx_1_148
0A4B C0E0      2687            push    acc
0A4D 74BD      2688            mov     a,#(_main_vx_1_148 >> 8)
0A4F C0E0      2689            push    acc
0A51 7440      2690            mov     a,#0x40
0A53 C0E0      2691            push    acc
0A55 74F8      2692            mov     a,#__str_3
0A57 C0E0      2693            push    acc
0A59 74D9      2694            mov     a,#(__str_3 >> 8)
0A5B C0E0      2695            push    acc
0A5D 7480      2696            mov     a,#0x80
0A5F C0E0      2697            push    acc
0A61 74B0      2698            mov     a,#_buff
0A63 C0E0      2699            push    acc
0A65 7446      2700            mov     a,#(_buff >> 8)
0A67 C0E0      2701            push    acc
0A69 7440      2702            mov     a,#0x40
0A6B C0E0      2703            push    acc
0A6D 120000    2704            lcall   _sscanf
0A70 E581      2705            mov     a,sp
0A72 24EE      2706            add     a,#0xee
0A74 F581      2707            mov     sp,a
0A76           2708   ;        main.c:717: printf("Joystick Received: Vx = %03d, Vy = %03d, Order = %01d, Auto = %01d\r\n", vx, vy, pick, auto_mode);
0A76 C050      2709            push    _main_auto_mode_1_148
0A78 C051      2710            push    (_main_auto_mode_1_148 + 1)
0A7A C000      2711            push    _main_pick_1_148
0A7C C001      2712            push    (_main_pick_1_148 + 1)
0A7E C0B0      2713            push    _main_vy_1_148
0A80 C0B1      2714            push    (_main_vy_1_148 + 1)
0A82 C070      2715            push    _main_vx_1_148
0A84 C071      2716            push    (_main_vx_1_148 + 1)
0A86 74C8      2717            mov     a,#__str_18
0A88 C0E0      2718            push    acc
0A8A 74E2      2719            mov     a,#(__str_18 >> 8)
0A8C C0E0      2720            push    acc
0A8E 7480      2721            mov     a,#0x80
0A90 C0E0      2722            push    acc
0A92 120000    2723            lcall   _printf
0A95 E581      2724            mov     a,sp
0A97 24F5      2725            add     a,#0xf5
0A99 F581      2726            mov     sp,a
0A9B           2727   ;        main.c:720: vx_error = abs(vx-vx_thres)*100/vx_thres; 
0A9B E570      2728            mov     a,_main_vx_1_148
0A9D C3        2729            clr     c
0A9E 9530      2730            subb    a,_vx_thres
0AA0 F582      2731            mov     dpl,a
0AA2 E571      2732            mov     a,(_main_vx_1_148 + 1)
0AA4 9531      2733            subb    a,(_vx_thres + 1)
0AA6 F583      2734            mov     dph,a
0AA8 120000    2735            lcall   _abs
0AAB 858200    2736            mov     __mulint_PARM_2,dpl
0AAE 858301    2737            mov     (__mulint_PARM_2 + 1),dph
0AB1 900064    2738            mov     dptr,#0x0064
0AB4 120000    2739            lcall   __mulint
0AB7 853000    2740            mov     __divsint_PARM_2,_vx_thres
0ABA 853101    2741            mov     (__divsint_PARM_2 + 1),(_vx_thres + 1)
0ABD 120000    2742            lcall   __divsint
0AC0 858240    2743            mov     _main_vx_error_1_148,dpl
0AC3 858341    2744            mov     (_main_vx_error_1_148 + 1),dph
0AC6           2745   ;        main.c:721: vy_error = abs(vy-vy_thres)*100/vy_thres; 
0AC6 E5B0      2746            mov     a,_main_vy_1_148
0AC8 C3        2747            clr     c
0AC9 95F0      2748            subb    a,_vy_thres
0ACB F582      2749            mov     dpl,a
0ACD E5B1      2750            mov     a,(_main_vy_1_148 + 1)
0ACF 95F1      2751            subb    a,(_vy_thres + 1)
0AD1 F583      2752            mov     dph,a
0AD3 120000    2753            lcall   _abs
0AD6 858200    2754            mov     __mulint_PARM_2,dpl
0AD9 858301    2755            mov     (__mulint_PARM_2 + 1),dph
0ADC 900064    2756            mov     dptr,#0x0064
0ADF 120000    2757            lcall   __mulint
0AE2 85F000    2758            mov     __divsint_PARM_2,_vy_thres
0AE5 85F101    2759            mov     (__divsint_PARM_2 + 1),(_vy_thres + 1)
0AE8 120000    2760            lcall   __divsint
0AEB 858290    2761            mov     _main_vy_error_1_148,dpl
0AEE 858391    2762            mov     (_main_vy_error_1_148 + 1),dph
0AF1           2763   ;        main.c:722: vx_err = vx-vx_thres; 
0AF1 E570      2764            mov     a,_main_vx_1_148
0AF3 C3        2765            clr     c
0AF4 9530      2766            subb    a,_vx_thres
0AF6 F5E0      2767            mov     _main_vx_err_1_148,a
0AF8 E571      2768            mov     a,(_main_vx_1_148 + 1)
0AFA 9531      2769            subb    a,(_vx_thres + 1)
0AFC F5E1      2770            mov     (_main_vx_err_1_148 + 1),a
0AFE           2771   ;        main.c:723: vy_err = vy-vy_thres; 
0AFE E5B0      2772            mov     a,_main_vy_1_148
0B00 C3        2773            clr     c
0B01 95F0      2774            subb    a,_vy_thres
0B03 F530      2775            mov     _main_vy_err_1_148,a
0B05 E5B1      2776            mov     a,(_main_vy_1_148 + 1)
0B07 95F1      2777            subb    a,(_vy_thres + 1)
0B09 F531      2778            mov     (_main_vy_err_1_148 + 1),a
0B0B           2779   ;        main.c:724: pwm_left = 0; 
0B0B 75B000    2780            mov     _pwm_left,#0x00
0B0E           2781   ;        main.c:725: pwm_right = 0; 
0B0E 757000    2782            mov     _pwm_right,#0x00
0B11           2783   ;        main.c:727: if ((vy_error>5) && (vx_error<5)){
0B11 C3        2784            clr     c
0B12 7405      2785            mov     a,#0x05
0B14 9590      2786            subb    a,_main_vy_error_1_148
0B16 E4        2787            clr     a
0B17 6480      2788            xrl     a,#0x80
0B19 8591F0    2789            mov     b,(_main_vy_error_1_148 + 1)
0B1C 63F080    2790            xrl     b,#0x80
0B1F 95F0      2791            subb    a,b
0B21 E4        2792            clr     a
0B22 33        2793            rlc     a
0B23 FF        2794            mov     r7,a
0B24 6000      2795            jz      L030009?
0B26 C3        2796            clr     c
0B27 E540      2797            mov     a,_main_vx_error_1_148
0B29 9405      2798            subb    a,#0x05
0B2B E541      2799            mov     a,(_main_vx_error_1_148 + 1)
0B2D 6480      2800            xrl     a,#0x80
0B2F 9480      2801            subb    a,#0x80
0B31 5000      2802            jnc     L030009?
0B33           2803   ;        main.c:728: pwm_left = vy_error; 
0B33 AD90      2804            mov     r5,_main_vy_error_1_148
0B35 8DB0      2805            mov     _pwm_left,r5
0B37           2806   ;        main.c:729: pwm_right = vy_error; 
0B37 8D70      2807            mov     _pwm_right,r5
0B39           2808   ;        main.c:730: if (vy_err > 0){ //move forward
0B39 C3        2809            clr     c
0B3A E4        2810            clr     a
0B3B 9530      2811            subb    a,_main_vy_err_1_148
0B3D E4        2812            clr     a
0B3E 6480      2813            xrl     a,#0x80
0B40 8531F0    2814            mov     b,(_main_vy_err_1_148 + 1)
0B43 63F080    2815            xrl     b,#0x80
0B46 95F0      2816            subb    a,b
0B48 5000      2817            jnc     L030006?
0B4A           2818   ;        main.c:731: L_motor_dir = 0; 
0B4A 753000    2819            mov     _L_motor_dir,#0x00
0B4D           2820   ;        main.c:732: R_motor_dir = 0; 
0B4D 75F000    2821            mov     _R_motor_dir,#0x00
0B50 8000      2822            sjmp    L030009?
0B52           2823   L030006?:
0B52           2824   ;        main.c:735: L_motor_dir = 1; 
0B52 753001    2825            mov     _L_motor_dir,#0x01
0B55           2826   ;        main.c:736: R_motor_dir = 1; 
0B55 75F001    2827            mov     _R_motor_dir,#0x01
0B58           2828   L030009?:
0B58           2829   ;        main.c:739: if ((vx_error>5)&&(vy_error<5)){
0B58 C3        2830            clr     c
0B59 7405      2831            mov     a,#0x05
0B5B 9540      2832            subb    a,_main_vx_error_1_148
0B5D E4        2833            clr     a
0B5E 6480      2834            xrl     a,#0x80
0B60 8541F0    2835            mov     b,(_main_vx_error_1_148 + 1)
0B63 63F080    2836            xrl     b,#0x80
0B66 95F0      2837            subb    a,b
0B68 E4        2838            clr     a
0B69 33        2839            rlc     a
0B6A FD        2840            mov     r5,a
0B6B 6000      2841            jz      L030015?
0B6D C3        2842            clr     c
0B6E E590      2843            mov     a,_main_vy_error_1_148
0B70 9405      2844            subb    a,#0x05
0B72 E591      2845            mov     a,(_main_vy_error_1_148 + 1)
0B74 6480      2846            xrl     a,#0x80
0B76 9480      2847            subb    a,#0x80
0B78 5000      2848            jnc     L030015?
0B7A           2849   ;        main.c:740: pwm_left = vx_error; 
0B7A AE40      2850            mov     r6,_main_vx_error_1_148
0B7C 8EB0      2851            mov     _pwm_left,r6
0B7E           2852   ;        main.c:741: pwm_right = vx_error; 
0B7E 8E70      2853            mov     _pwm_right,r6
0B80           2854   ;        main.c:742: if (vx_err > 0){ //turn right
0B80 C3        2855            clr     c
0B81 E4        2856            clr     a
0B82 95E0      2857            subb    a,_main_vx_err_1_148
0B84 E4        2858            clr     a
0B85 6480      2859            xrl     a,#0x80
0B87 85E1F0    2860            mov     b,(_main_vx_err_1_148 + 1)
0B8A 63F080    2861            xrl     b,#0x80
0B8D 95F0      2862            subb    a,b
0B8F 5000      2863            jnc     L030012?
0B91           2864   ;        main.c:743: L_motor_dir = 1; 
0B91 753001    2865            mov     _L_motor_dir,#0x01
0B94           2866   ;        main.c:744: R_motor_dir = 0; 
0B94 75F000    2867            mov     _R_motor_dir,#0x00
0B97 8000      2868            sjmp    L030015?
0B99           2869   L030012?:
0B99           2870   ;        main.c:747: L_motor_dir = 0; 
0B99 753000    2871            mov     _L_motor_dir,#0x00
0B9C           2872   ;        main.c:748: R_motor_dir = 1; 
0B9C 75F001    2873            mov     _R_motor_dir,#0x01
0B9F           2874   L030015?:
0B9F           2875   ;        main.c:751: if ((vx_error>5)&&(vy_error)>5){
0B9F ED        2876            mov     a,r5
0BA0 7000      2877            jnz     L030094?
0BA2 020000    2878            ljmp    L030053?
0BA5           2879   L030094?:
0BA5 EF        2880            mov     a,r7
0BA6 7000      2881            jnz     L030095?
0BA8 020000    2882            ljmp    L030053?
0BAB           2883   L030095?:
0BAB           2884   ;        main.c:753: if (vy_err>0){
0BAB C3        2885            clr     c
0BAC E4        2886            clr     a
0BAD 9530      2887            subb    a,_main_vy_err_1_148
0BAF E4        2888            clr     a
0BB0 6480      2889            xrl     a,#0x80
0BB2 8531F0    2890            mov     b,(_main_vy_err_1_148 + 1)
0BB5 63F080    2891            xrl     b,#0x80
0BB8 95F0      2892            subb    a,b
0BBA 4000      2893            jc      L030096?
0BBC 020000    2894            ljmp    L030027?
0BBF           2895   L030096?:
0BBF           2896   ;        main.c:754: L_motor_dir = 0; 
0BBF 753000    2897            mov     _L_motor_dir,#0x00
0BC2           2898   ;        main.c:755: R_motor_dir = 0; 
0BC2 75F000    2899            mov     _R_motor_dir,#0x00
0BC5           2900   ;        main.c:757: if (vx_err>0){
0BC5 C3        2901            clr     c
0BC6 E4        2902            clr     a
0BC7 95E0      2903            subb    a,_main_vx_err_1_148
0BC9 E4        2904            clr     a
0BCA 6480      2905            xrl     a,#0x80
0BCC 85E1F0    2906            mov     b,(_main_vx_err_1_148 + 1)
0BCF 63F080    2907            xrl     b,#0x80
0BD2 95F0      2908            subb    a,b
0BD4 4000      2909            jc      L030097?
0BD6 020000    2910            ljmp    L030024?
0BD9           2911   L030097?:
0BD9           2912   ;        main.c:758: if (vy*100<=vy_thres*100/2){
0BD9 85B000    2913            mov     __mulint_PARM_2,_main_vy_1_148
0BDC 85B101    2914            mov     (__mulint_PARM_2 + 1),(_main_vy_1_148 + 1)
0BDF 900064    2915            mov     dptr,#0x0064
0BE2 120000    2916            lcall   __mulint
0BE5 AD82      2917            mov     r5,dpl
0BE7 AE83      2918            mov     r6,dph
0BE9 85F000    2919            mov     __mulint_PARM_2,_vy_thres
0BEC 85F101    2920            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0BEF 900064    2921            mov     dptr,#0x0064
0BF2 C005      2922            push    ar5
0BF4 C006      2923            push    ar6
0BF6 120000    2924            lcall   __mulint
0BF9 AF82      2925            mov     r7,dpl
0BFB AB83      2926            mov     r3,dph
0BFD 750002    2927            mov     __divsint_PARM_2,#0x02
0C00 E4        2928            clr     a
0C01 F501      2929            mov     (__divsint_PARM_2 + 1),a
0C03 8F82      2930            mov     dpl,r7
0C05 8B83      2931            mov     dph,r3
0C07 120000    2932            lcall   __divsint
0C0A AB82      2933            mov     r3,dpl
0C0C AC83      2934            mov     r4,dph
0C0E D006      2935            pop     ar6
0C10 D005      2936            pop     ar5
0C12 C3        2937            clr     c
0C13 EB        2938            mov     a,r3
0C14 9D        2939            subb    a,r5
0C15 EC        2940            mov     a,r4
0C16 6480      2941            xrl     a,#0x80
0C18 8EF0      2942            mov     b,r6
0C1A 63F080    2943            xrl     b,#0x80
0C1D 95F0      2944            subb    a,b
0C1F 4000      2945            jc      L030018?
0C21           2946   ;        main.c:759: pwm_left = vy_error; 
0C21 8590B0    2947            mov     _pwm_left,_main_vy_error_1_148
0C24           2948   ;        main.c:760: pwm_right = vy_error*100/(vx_error+vy_error);
0C24 859000    2949            mov     __mulint_PARM_2,_main_vy_error_1_148
0C27 859101    2950            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_148 + 1)
0C2A 900064    2951            mov     dptr,#0x0064
0C2D 120000    2952            lcall   __mulint
0C30 AB82      2953            mov     r3,dpl
0C32 AC83      2954            mov     r4,dph
0C34 E590      2955            mov     a,_main_vy_error_1_148
0C36 2540      2956            add     a,_main_vx_error_1_148
0C38 F500      2957            mov     __divsint_PARM_2,a
0C3A E591      2958            mov     a,(_main_vy_error_1_148 + 1)
0C3C 3541      2959            addc    a,(_main_vx_error_1_148 + 1)
0C3E F501      2960            mov     (__divsint_PARM_2 + 1),a
0C40 8B82      2961            mov     dpl,r3
0C42 8C83      2962            mov     dph,r4
0C44 120000    2963            lcall   __divsint
0C47 AB82      2964            mov     r3,dpl
0C49 AC83      2965            mov     r4,dph
0C4B 8B70      2966            mov     _pwm_right,r3
0C4D 020000    2967            ljmp    L030027?
0C50           2968   L030018?:
0C50           2969   ;        main.c:763: pwm_left = vx_error; 
0C50 8540B0    2970            mov     _pwm_left,_main_vx_error_1_148
0C53           2971   ;        main.c:764: pwm_right = vx_error*100/(vx_error+vy_error);
0C53 854000    2972            mov     __mulint_PARM_2,_main_vx_error_1_148
0C56 854101    2973            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_148 + 1)
0C59 900064    2974            mov     dptr,#0x0064
0C5C 120000    2975            lcall   __mulint
0C5F AB82      2976            mov     r3,dpl
0C61 AC83      2977            mov     r4,dph
0C63 E590      2978            mov     a,_main_vy_error_1_148
0C65 2540      2979            add     a,_main_vx_error_1_148
0C67 F500      2980            mov     __divsint_PARM_2,a
0C69 E591      2981            mov     a,(_main_vy_error_1_148 + 1)
0C6B 3541      2982            addc    a,(_main_vx_error_1_148 + 1)
0C6D F501      2983            mov     (__divsint_PARM_2 + 1),a
0C6F 8B82      2984            mov     dpl,r3
0C71 8C83      2985            mov     dph,r4
0C73 120000    2986            lcall   __divsint
0C76 AB82      2987            mov     r3,dpl
0C78 AC83      2988            mov     r4,dph
0C7A 8B70      2989            mov     _pwm_right,r3
0C7C 020000    2990            ljmp    L030027?
0C7F           2991   L030024?:
0C7F           2992   ;        main.c:769: if (vy*100<=vy_thres*100/2){
0C7F 85B000    2993            mov     __mulint_PARM_2,_main_vy_1_148
0C82 85B101    2994            mov     (__mulint_PARM_2 + 1),(_main_vy_1_148 + 1)
0C85 900064    2995            mov     dptr,#0x0064
0C88 120000    2996            lcall   __mulint
0C8B AB82      2997            mov     r3,dpl
0C8D AC83      2998            mov     r4,dph
0C8F 85F000    2999            mov     __mulint_PARM_2,_vy_thres
0C92 85F101    3000            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0C95 900064    3001            mov     dptr,#0x0064
0C98 C003      3002            push    ar3
0C9A C004      3003            push    ar4
0C9C 120000    3004            lcall   __mulint
0C9F AD82      3005            mov     r5,dpl
0CA1 AE83      3006            mov     r6,dph
0CA3 750002    3007            mov     __divsint_PARM_2,#0x02
0CA6 E4        3008            clr     a
0CA7 F501      3009            mov     (__divsint_PARM_2 + 1),a
0CA9 8D82      3010            mov     dpl,r5
0CAB 8E83      3011            mov     dph,r6
0CAD 120000    3012            lcall   __divsint
0CB0 AD82      3013            mov     r5,dpl
0CB2 AE83      3014            mov     r6,dph
0CB4 D004      3015            pop     ar4
0CB6 D003      3016            pop     ar3
0CB8 C3        3017            clr     c
0CB9 ED        3018            mov     a,r5
0CBA 9B        3019            subb    a,r3
0CBB EE        3020            mov     a,r6
0CBC 6480      3021            xrl     a,#0x80
0CBE 8CF0      3022            mov     b,r4
0CC0 63F080    3023            xrl     b,#0x80
0CC3 95F0      3024            subb    a,b
0CC5 4000      3025            jc      L030021?
0CC7           3026   ;        main.c:770: pwm_left = vy_error*100/(vx_error+vy_error);
0CC7 859000    3027            mov     __mulint_PARM_2,_main_vy_error_1_148
0CCA 859101    3028            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_148 + 1)
0CCD 900064    3029            mov     dptr,#0x0064
0CD0 120000    3030            lcall   __mulint
0CD3 AB82      3031            mov     r3,dpl
0CD5 AC83      3032            mov     r4,dph
0CD7 E590      3033            mov     a,_main_vy_error_1_148
0CD9 2540      3034            add     a,_main_vx_error_1_148
0CDB F500      3035            mov     __divsint_PARM_2,a
0CDD E591      3036            mov     a,(_main_vy_error_1_148 + 1)
0CDF 3541      3037            addc    a,(_main_vx_error_1_148 + 1)
0CE1 F501      3038            mov     (__divsint_PARM_2 + 1),a
0CE3 8B82      3039            mov     dpl,r3
0CE5 8C83      3040            mov     dph,r4
0CE7 120000    3041            lcall   __divsint
0CEA AB82      3042            mov     r3,dpl
0CEC AC83      3043            mov     r4,dph
0CEE 8BB0      3044            mov     _pwm_left,r3
0CF0           3045   ;        main.c:771: pwm_right = vy_error; 
0CF0 859070    3046            mov     _pwm_right,_main_vy_error_1_148
0CF3 8000      3047            sjmp    L030027?
0CF5           3048   L030021?:
0CF5           3049   ;        main.c:774: pwm_left = vx_error*100/(vx_error+vy_error);
0CF5 854000    3050            mov     __mulint_PARM_2,_main_vx_error_1_148
0CF8 854101    3051            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_148 + 1)
0CFB 900064    3052            mov     dptr,#0x0064
0CFE 120000    3053            lcall   __mulint
0D01 AB82      3054            mov     r3,dpl
0D03 AC83      3055            mov     r4,dph
0D05 E590      3056            mov     a,_main_vy_error_1_148
0D07 2540      3057            add     a,_main_vx_error_1_148
0D09 F500      3058            mov     __divsint_PARM_2,a
0D0B E591      3059            mov     a,(_main_vy_error_1_148 + 1)
0D0D 3541      3060            addc    a,(_main_vx_error_1_148 + 1)
0D0F F501      3061            mov     (__divsint_PARM_2 + 1),a
0D11 8B82      3062            mov     dpl,r3
0D13 8C83      3063            mov     dph,r4
0D15 120000    3064            lcall   __divsint
0D18 AB82      3065            mov     r3,dpl
0D1A AC83      3066            mov     r4,dph
0D1C 8BB0      3067            mov     _pwm_left,r3
0D1E           3068   ;        main.c:775: pwm_right = vx_error; 
0D1E 854070    3069            mov     _pwm_right,_main_vx_error_1_148
0D21           3070   L030027?:
0D21           3071   ;        main.c:780: if (vy_err<0){
0D21 E531      3072            mov     a,(_main_vy_err_1_148 + 1)
0D23 20E7D8    3073            jb      acc.7,L030100?
0D26 020000    3074            ljmp    L030053?
0D29           3075   L030100?:
0D29           3076   ;        main.c:781: L_motor_dir = 1; 
0D29 753001    3077            mov     _L_motor_dir,#0x01
0D2C           3078   ;        main.c:782: R_motor_dir = 1; 
0D2C 75F001    3079            mov     _R_motor_dir,#0x01
0D2F           3080   ;        main.c:784: if (vx_err>0){
0D2F C3        3081            clr     c
0D30 E4        3082            clr     a
0D31 95E0      3083            subb    a,_main_vx_err_1_148
0D33 E4        3084            clr     a
0D34 6480      3085            xrl     a,#0x80
0D36 85E1F0    3086            mov     b,(_main_vx_err_1_148 + 1)
0D39 63F080    3087            xrl     b,#0x80
0D3C 95F0      3088            subb    a,b
0D3E 4000      3089            jc      L030101?
0D40 020000    3090            ljmp    L030035?
0D43           3091   L030101?:
0D43           3092   ;        main.c:785: if (vy*100<=vy_thres*100/2){
0D43 85B000    3093            mov     __mulint_PARM_2,_main_vy_1_148
0D46 85B101    3094            mov     (__mulint_PARM_2 + 1),(_main_vy_1_148 + 1)
0D49 900064    3095            mov     dptr,#0x0064
0D4C 120000    3096            lcall   __mulint
0D4F AB82      3097            mov     r3,dpl
0D51 AC83      3098            mov     r4,dph
0D53 85F000    3099            mov     __mulint_PARM_2,_vy_thres
0D56 85F101    3100            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0D59 900064    3101            mov     dptr,#0x0064
0D5C C003      3102            push    ar3
0D5E C004      3103            push    ar4
0D60 120000    3104            lcall   __mulint
0D63 AD82      3105            mov     r5,dpl
0D65 AE83      3106            mov     r6,dph
0D67 750002    3107            mov     __divsint_PARM_2,#0x02
0D6A E4        3108            clr     a
0D6B F501      3109            mov     (__divsint_PARM_2 + 1),a
0D6D 8D82      3110            mov     dpl,r5
0D6F 8E83      3111            mov     dph,r6
0D71 120000    3112            lcall   __divsint
0D74 AD82      3113            mov     r5,dpl
0D76 AE83      3114            mov     r6,dph
0D78 D004      3115            pop     ar4
0D7A D003      3116            pop     ar3
0D7C C3        3117            clr     c
0D7D ED        3118            mov     a,r5
0D7E 9B        3119            subb    a,r3
0D7F EE        3120            mov     a,r6
0D80 6480      3121            xrl     a,#0x80
0D82 8CF0      3122            mov     b,r4
0D84 63F080    3123            xrl     b,#0x80
0D87 95F0      3124            subb    a,b
0D89 4000      3125            jc      L030029?
0D8B           3126   ;        main.c:786: pwm_left = vy_error; 
0D8B 8590B0    3127            mov     _pwm_left,_main_vy_error_1_148
0D8E           3128   ;        main.c:787: pwm_right = vy_error*100/(vx_error+vy_error);
0D8E 859000    3129            mov     __mulint_PARM_2,_main_vy_error_1_148
0D91 859101    3130            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_148 + 1)
0D94 900064    3131            mov     dptr,#0x0064
0D97 120000    3132            lcall   __mulint
0D9A AB82      3133            mov     r3,dpl
0D9C AC83      3134            mov     r4,dph
0D9E E590      3135            mov     a,_main_vy_error_1_148
0DA0 2540      3136            add     a,_main_vx_error_1_148
0DA2 F500      3137            mov     __divsint_PARM_2,a
0DA4 E591      3138            mov     a,(_main_vy_error_1_148 + 1)
0DA6 3541      3139            addc    a,(_main_vx_error_1_148 + 1)
0DA8 F501      3140            mov     (__divsint_PARM_2 + 1),a
0DAA 8B82      3141            mov     dpl,r3
0DAC 8C83      3142            mov     dph,r4
0DAE 120000    3143            lcall   __divsint
0DB1 AB82      3144            mov     r3,dpl
0DB3 AC83      3145            mov     r4,dph
0DB5 8B70      3146            mov     _pwm_right,r3
0DB7 020000    3147            ljmp    L030053?
0DBA           3148   L030029?:
0DBA           3149   ;        main.c:790: pwm_left = vx_error; 
0DBA 8540B0    3150            mov     _pwm_left,_main_vx_error_1_148
0DBD           3151   ;        main.c:791: pwm_right = vx_error*100/(vx_error+vy_error);
0DBD 854000    3152            mov     __mulint_PARM_2,_main_vx_error_1_148
0DC0 854101    3153            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_148 + 1)
0DC3 900064    3154            mov     dptr,#0x0064
0DC6 120000    3155            lcall   __mulint
0DC9 AB82      3156            mov     r3,dpl
0DCB AC83      3157            mov     r4,dph
0DCD E590      3158            mov     a,_main_vy_error_1_148
0DCF 2540      3159            add     a,_main_vx_error_1_148
0DD1 F500      3160            mov     __divsint_PARM_2,a
0DD3 E591      3161            mov     a,(_main_vy_error_1_148 + 1)
0DD5 3541      3162            addc    a,(_main_vx_error_1_148 + 1)
0DD7 F501      3163            mov     (__divsint_PARM_2 + 1),a
0DD9 8B82      3164            mov     dpl,r3
0DDB 8C83      3165            mov     dph,r4
0DDD 120000    3166            lcall   __divsint
0DE0 AB82      3167            mov     r3,dpl
0DE2 AC83      3168            mov     r4,dph
0DE4 8B70      3169            mov     _pwm_right,r3
0DE6 020000    3170            ljmp    L030053?
0DE9           3171   L030035?:
0DE9           3172   ;        main.c:796: if (vy*100<=vy_thres*100/2){
0DE9 85B000    3173            mov     __mulint_PARM_2,_main_vy_1_148
0DEC 85B101    3174            mov     (__mulint_PARM_2 + 1),(_main_vy_1_148 + 1)
0DEF 900064    3175            mov     dptr,#0x0064
0DF2 120000    3176            lcall   __mulint
0DF5 AB82      3177            mov     r3,dpl
0DF7 AC83      3178            mov     r4,dph
0DF9 85F000    3179            mov     __mulint_PARM_2,_vy_thres
0DFC 85F101    3180            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0DFF 900064    3181            mov     dptr,#0x0064
0E02 C003      3182            push    ar3
0E04 C004      3183            push    ar4
0E06 120000    3184            lcall   __mulint
0E09 AD82      3185            mov     r5,dpl
0E0B AE83      3186            mov     r6,dph
0E0D 750002    3187            mov     __divsint_PARM_2,#0x02
0E10 E4        3188            clr     a
0E11 F501      3189            mov     (__divsint_PARM_2 + 1),a
0E13 8D82      3190            mov     dpl,r5
0E15 8E83      3191            mov     dph,r6
0E17 120000    3192            lcall   __divsint
0E1A AD82      3193            mov     r5,dpl
0E1C AE83      3194            mov     r6,dph
0E1E D004      3195            pop     ar4
0E20 D003      3196            pop     ar3
0E22 C3        3197            clr     c
0E23 ED        3198            mov     a,r5
0E24 9B        3199            subb    a,r3
0E25 EE        3200            mov     a,r6
0E26 6480      3201            xrl     a,#0x80
0E28 8CF0      3202            mov     b,r4
0E2A 63F080    3203            xrl     b,#0x80
0E2D 95F0      3204            subb    a,b
0E2F 4000      3205            jc      L030032?
0E31           3206   ;        main.c:797: pwm_left = vy_error*100/(vx_error+vy_error);
0E31 859000    3207            mov     __mulint_PARM_2,_main_vy_error_1_148
0E34 859101    3208            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_148 + 1)
0E37 900064    3209            mov     dptr,#0x0064
0E3A 120000    3210            lcall   __mulint
0E3D AB82      3211            mov     r3,dpl
0E3F AC83      3212            mov     r4,dph
0E41 E590      3213            mov     a,_main_vy_error_1_148
0E43 2540      3214            add     a,_main_vx_error_1_148
0E45 F500      3215            mov     __divsint_PARM_2,a
0E47 E591      3216            mov     a,(_main_vy_error_1_148 + 1)
0E49 3541      3217            addc    a,(_main_vx_error_1_148 + 1)
0E4B F501      3218            mov     (__divsint_PARM_2 + 1),a
0E4D 8B82      3219            mov     dpl,r3
0E4F 8C83      3220            mov     dph,r4
0E51 120000    3221            lcall   __divsint
0E54 AB82      3222            mov     r3,dpl
0E56 AC83      3223            mov     r4,dph
0E58 8BB0      3224            mov     _pwm_left,r3
0E5A           3225   ;        main.c:798: pwm_right = vy_error; 
0E5A 859070    3226            mov     _pwm_right,_main_vy_error_1_148
0E5D 020000    3227            ljmp    L030053?
0E60           3228   L030032?:
0E60           3229   ;        main.c:801: pwm_left = vx_error*100/(vx_error+vy_error);
0E60 854000    3230            mov     __mulint_PARM_2,_main_vx_error_1_148
0E63 854101    3231            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_148 + 1)
0E66 900064    3232            mov     dptr,#0x0064
0E69 120000    3233            lcall   __mulint
0E6C AB82      3234            mov     r3,dpl
0E6E AC83      3235            mov     r4,dph
0E70 E590      3236            mov     a,_main_vy_error_1_148
0E72 2540      3237            add     a,_main_vx_error_1_148
0E74 F500      3238            mov     __divsint_PARM_2,a
0E76 E591      3239            mov     a,(_main_vy_error_1_148 + 1)
0E78 3541      3240            addc    a,(_main_vx_error_1_148 + 1)
0E7A F501      3241            mov     (__divsint_PARM_2 + 1),a
0E7C 8B82      3242            mov     dpl,r3
0E7E 8C83      3243            mov     dph,r4
0E80 120000    3244            lcall   __divsint
0E83 AB82      3245            mov     r3,dpl
0E85 AC83      3246            mov     r4,dph
0E87 8BB0      3247            mov     _pwm_left,r3
0E89           3248   ;        main.c:802: pwm_right = vx_error; 
0E89 854070    3249            mov     _pwm_right,_main_vx_error_1_148
0E8C 020000    3250            ljmp    L030053?
0E8F           3251   L030043?:
0E8F           3252   ;        main.c:809: printf("*** BAD MESSAGE ***: %s\r\n", buff);
0E8F 74B0      3253            mov     a,#_buff
0E91 C0E0      3254            push    acc
0E93 7446      3255            mov     a,#(_buff >> 8)
0E95 C0E0      3256            push    acc
0E97 7440      3257            mov     a,#0x40
0E99 C0E0      3258            push    acc
0E9B 7418      3259            mov     a,#__str_19
0E9D C0E0      3260            push    acc
0E9F 74E8      3261            mov     a,#(__str_19 >> 8)
0EA1 C0E0      3262            push    acc
0EA3 7480      3263            mov     a,#0x80
0EA5 C0E0      3264            push    acc
0EA7 120000    3265            lcall   _printf
0EAA E581      3266            mov     a,sp
0EAC 24FA      3267            add     a,#0xfa
0EAE F581      3268            mov     sp,a
0EB0 020000    3269            ljmp    L030053?
0EB3           3270   L030048?:
0EB3           3271   ;        main.c:812: else if(c=='@') // Master wants slave data
0EB3 BA4058    3272            cjne    r2,#0x40,L030104?
0EB6 8000      3273            sjmp    L030105?
0EB8           3274   L030104?:
0EB8 020000    3275            ljmp    L030053?
0EBB           3276   L030105?:
0EBB           3277   ;        main.c:814: sprintf(buff, "0,00,%04ld\n", freq100);
0EBB C030      3278            push    _freq100
0EBD C031      3279            push    (_freq100 + 1)
0EBF C032      3280            push    (_freq100 + 2)
0EC1 C033      3281            push    (_freq100 + 3)
0EC3 74D8      3282            mov     a,#__str_20
0EC5 C0E0      3283            push    acc
0EC7 74E8      3284            mov     a,#(__str_20 >> 8)
0EC9 C0E0      3285            push    acc
0ECB 7480      3286            mov     a,#0x80
0ECD C0E0      3287            push    acc
0ECF 74B0      3288            mov     a,#_buff
0ED1 C0E0      3289            push    acc
0ED3 7446      3290            mov     a,#(_buff >> 8)
0ED5 C0E0      3291            push    acc
0ED7 7440      3292            mov     a,#0x40
0ED9 C0E0      3293            push    acc
0EDB 120000    3294            lcall   _sprintf
0EDE E581      3295            mov     a,sp
0EE0 24F6      3296            add     a,#0xf6
0EE2 F581      3297            mov     sp,a
0EE4           3298   ;        main.c:815: waitms(5); // The radio seems to need this delay...
0EE4 900005    3299            mov     dptr,#0x0005
0EE7 120000    3300            lcall   _waitms
0EEA           3301   ;        main.c:816: sendstr1(buff);
0EEA 9046B0    3302            mov     dptr,#_buff
0EED 75F040    3303            mov     b,#0x40
0EF0 120000    3304            lcall   _sendstr1
0EF3 020000    3305            ljmp    L030053?
0EF6           3306            rseg R_CSEG
0EF6           3307   
0000           3308            rseg R_XINIT
0000           3309   
0000           3310            rseg R_CONST
0000           3311   __str_0:
0000 436F6D6D  3312            db 'Command: %s'
     616E643A
     202573
000B 00        3313            db 0x00
000C           3314   __str_1:
000C 52657370  3315            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        3316            db 0x0D
0019 0A        3317            db 0x0A
001A 00        3318            db 0x00
001B           3319   __str_2:
001B 41542B44  3320            db 'AT+DVID0000'
     56494430
     303030
0026 0D        3321            db 0x0D
0027 0A        3322            db 0x0A
0028 00        3323            db 0x00
0029           3324   __str_3:
0029 25303364  3325            db '%03d,%03d,%01d,%01d'
     2C253033
     642C2530
     31642C25
     303164
003C 00        3326            db 0x00
003D           3327   __str_4:
003D 25303164  3328            db '%01d,%02d,0000'
     2C253032
     642C3030
     3030
004B 0A        3329            db 0x0A
004C 00        3330            db 0x00
004D           3331   __str_5:
004D 663A2530  3332            db 'f:%04ld, d1:%d, d2:%d, bound_dectect: %d'
     346C642C
     2064313A
     25642C20
     64323A25
     642C2062
     6F756E64
     5F646563
     74656374
     3A202564
0075 0D        3333            db 0x0D
0076 0A        3334            db 0x0A
0077 00        3335            db 0x00
0078           3336   __str_6:
0078 5475726E  3337            db 'Turn!!! %d'
     21212120
     2564
0082 0D        3338            db 0x0D
0083 0A        3339            db 0x0A
0084 00        3340            db 0x00
0085           3341   __str_7:
0085 4175746F  3342            db 'Auto mode finished!'
     206D6F64
     65206669
     6E697368
     656421
0098 0D        3343            db 0x0D
0099 0A        3344            db 0x0A
009A 00        3345            db 0x00
009B           3346   __str_8:
009B 0D        3347            db 0x0D
009C 0A        3348            db 0x0A
009D 45464D38  3349            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
00B8 0D        3350            db 0x0D
00B9 0A        3351            db 0x0A
00BA 00        3352            db 0x00
00BB           3353   __str_9:
00BB 41542B56  3354            db 'AT+VER'
     4552
00C1 0D        3355            db 0x0D
00C2 0A        3356            db 0x0A
00C3 00        3357            db 0x00
00C4           3358   __str_10:
00C4 41542B42  3359            db 'AT+BAUD'
     415544
00CB 0D        3360            db 0x0D
00CC 0A        3361            db 0x0A
00CD 00        3362            db 0x00
00CE           3363   __str_11:
00CE 41542B52  3364            db 'AT+RFID'
     464944
00D5 0D        3365            db 0x0D
00D6 0A        3366            db 0x0A
00D7 00        3367            db 0x00
00D8           3368   __str_12:
00D8 41542B44  3369            db 'AT+DVID'
     564944
00DF 0D        3370            db 0x0D
00E0 0A        3371            db 0x0A
00E1 00        3372            db 0x00
00E2           3373   __str_13:
00E2 41542B52  3374            db 'AT+RFC002'
     46433030
     32
00EB 0D        3375            db 0x0D
00EC 0A        3376            db 0x0A
00ED 00        3377            db 0x00
00EE           3378   __str_14:
00EE 41542B50  3379            db 'AT+POWE'
     4F5745
00F5 0D        3380            db 0x0D
00F6 0A        3381            db 0x0A
00F7 00        3382            db 0x00
00F8           3383   __str_15:
00F8 41542B43  3384            db 'AT+CLSS'
     4C5353
00FF 0D        3385            db 0x0D
0100 0A        3386            db 0x0A
0101 00        3387            db 0x00
0102           3388   __str_16:
0102 41542B44  3389            db 'AT+DVIDEF11'
     56494445
     463131
010D 0D        3390            db 0x0D
010E 0A        3391            db 0x0A
010F 00        3392            db 0x00
0110           3393   __str_17:
0110 4D617374  3394            db 'Master says: %s,'
     65722073
     6179733A
     2025732C
0120 0D        3395            db 0x0D
0121 0A        3396            db 0x0A
0122 00        3397            db 0x00
0123           3398   __str_18:
0123 4A6F7973  3399            db 'Joystick Received: Vx = %03d, Vy = %03d, Order = %01d, Auto '
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25303364
     2C205679
     203D2025
     3033642C
     204F7264
     6572203D
     20253031
     642C2041
     75746F20
015F 3D202530  3400            db '= %01d'
     3164
0165 0D        3401            db 0x0D
0166 0A        3402            db 0x0A
0167 00        3403            db 0x00
0168           3404   __str_19:
0168 2A2A2A20  3405            db '*** BAD MESSAGE ***: %s'
     42414420
     4D455353
     41474520
     2A2A2A3A
     202573
017F 0D        3406            db 0x0D
0180 0A        3407            db 0x0A
0181 00        3408            db 0x00
0182           3409   __str_20:
0182 302C3030  3410            db '0,00,%04ld'
     2C253034
     6C64
018C 0A        3411            db 0x0A
018D 00        3412            db 0x00
018E           3413   
0096           3414            CSEG
0096           3415   
0096           3416   end
