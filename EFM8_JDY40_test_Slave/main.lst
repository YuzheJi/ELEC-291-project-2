0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
<<<<<<< HEAD
0000              4   ; This file was generated Mon Mar 31 23:57:52 2025
=======
0000              4   ; This file was generated Mon Mar 31 18:03:53 2025
>>>>>>> 8abda3f8b56aa3564268914109dfaa54e2ba2927
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _check_bound_PARM_2
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Joystick_Control
0000             30            public _Auto_mode_slave
0000             31            public _Read_angle
0000             32            public _get_random_90_250
0000             33            public _simple_rand
0000             34            public _Move_forward
0000             35            public _Right_angle
0000             36            public _Move_back_ms
0000             37            public _Init_all
0000             38            public _check_bound
0000             39            public _servo_pick
0000             40            public _Timer5_ISR
0000             41            public _ReadHX711
0000             42            public _ADC_at_Pin
0000             43            public _InitPinADC
0000             44            public _InitADC
0000             45            public _Set_Pin_Input
0000             46            public _Set_Pin_Output
0000             47            public _ReceptionOff
0000             48            public _SendATCommand
0000             49            public _waitms_or_RI1
0000             50            public _RXU1
0000             51            public _getstr1
0000             52            public _getchar1_with_timeout
0000             53            public _getchar1
0000             54            public _sendstr1
0000             55            public _putchar1
0000             56            public _UART1_Init
0000             57            public _BMM150_Read_Data
0000             58            public _BMM150_compensate_y
0000             59            public _BMM150_compensate_x
0000             60            public _BMM150_Init
0000             61            public _BMM150_Read_Trim_Registers
0000             62            public _SPI_write
0000             63            public _SPI_read
0000             64            public _SPI_transfer
0000             65            public _waitms
0000             66            public _Timer3us
0000             67            public __c51_external_startup
0000             68            public _weight
0000             69            public _mea_yes
0000             70            public _angle_diff
0000             71            public _last_raw_angle
0000             72            public _raw_angle
0000             73            public _curr_angle
0000             74            public _pwm_corr
0000             75            public _seed
0000             76            public _weight_mea_count
0000             77            public _fre_mea_count
0000             78            public _vy
0000             79            public _vx
0000             80            public _vy_thres
0000             81            public _vx_thres
0000             82            public _servo_arm
0000             83            public _servo_base
0000             84            public _R_motor_dir
0000             85            public _L_motor_dir
0000             86            public _pwm_right
0000             87            public _pwm_left
0000             88            public _servo_counter
0000             89            public _pwm_counter
0000             90            public _temp
0000             91            public _dig_xyz1
0000             92            public _dig_xy2
0000             93            public _dig_xy1
0000             94            public _dig_z4
0000             95            public _dig_z3
0000             96            public _dig_z2
0000             97            public _dig_z1
0000             98            public _dig_y2
0000             99            public _dig_y1
0000            100            public _dig_x2
0000            101            public _dig_x1
0000            102            public _d2
0000            103            public _d1
0000            104            public _freq100
0000            105            public _buff
0000            106            public _Joystick_Control_PARM_2
0000            107            public _getstr1_PARM_2
0000            108            public _BMM150_Read_Data_PARM_2
0000            109            public _BMM150_compensate_y_PARM_2
0000            110            public _BMM150_compensate_x_PARM_2
0000            111            public _SPI_write_PARM_2
0000            112   ;--------------------------------------------------------
0000            113   ; Special Function Registers
0000            114   ;--------------------------------------------------------
0000            115   _ACC            DATA 0xe0
0000            116   _ADC0ASAH       DATA 0xb6
0000            117   _ADC0ASAL       DATA 0xb5
0000            118   _ADC0ASCF       DATA 0xa1
0000            119   _ADC0ASCT       DATA 0xc7
0000            120   _ADC0CF0        DATA 0xbc
0000            121   _ADC0CF1        DATA 0xb9
0000            122   _ADC0CF2        DATA 0xdf
0000            123   _ADC0CN0        DATA 0xe8
0000            124   _ADC0CN1        DATA 0xb2
0000            125   _ADC0CN2        DATA 0xb3
0000            126   _ADC0GTH        DATA 0xc4
0000            127   _ADC0GTL        DATA 0xc3
0000            128   _ADC0H          DATA 0xbe
0000            129   _ADC0L          DATA 0xbd
0000            130   _ADC0LTH        DATA 0xc6
0000            131   _ADC0LTL        DATA 0xc5
0000            132   _ADC0MX         DATA 0xbb
0000            133   _B              DATA 0xf0
0000            134   _CKCON0         DATA 0x8e
0000            135   _CKCON1         DATA 0xa6
0000            136   _CLEN0          DATA 0xc6
0000            137   _CLIE0          DATA 0xc7
0000            138   _CLIF0          DATA 0xe8
0000            139   _CLKSEL         DATA 0xa9
0000            140   _CLOUT0         DATA 0xd1
0000            141   _CLU0CF         DATA 0xb1
0000            142   _CLU0FN         DATA 0xaf
0000            143   _CLU0MX         DATA 0x84
0000            144   _CLU1CF         DATA 0xb3
0000            145   _CLU1FN         DATA 0xb2
0000            146   _CLU1MX         DATA 0x85
0000            147   _CLU2CF         DATA 0xb6
0000            148   _CLU2FN         DATA 0xb5
0000            149   _CLU2MX         DATA 0x91
0000            150   _CLU3CF         DATA 0xbf
0000            151   _CLU3FN         DATA 0xbe
0000            152   _CLU3MX         DATA 0xae
0000            153   _CMP0CN0        DATA 0x9b
0000            154   _CMP0CN1        DATA 0x99
0000            155   _CMP0MD         DATA 0x9d
0000            156   _CMP0MX         DATA 0x9f
0000            157   _CMP1CN0        DATA 0xbf
0000            158   _CMP1CN1        DATA 0xac
0000            159   _CMP1MD         DATA 0xab
0000            160   _CMP1MX         DATA 0xaa
0000            161   _CRC0CN0        DATA 0xce
0000            162   _CRC0CN1        DATA 0x86
0000            163   _CRC0CNT        DATA 0xd3
0000            164   _CRC0DAT        DATA 0xcb
0000            165   _CRC0FLIP       DATA 0xcf
0000            166   _CRC0IN         DATA 0xca
0000            167   _CRC0ST         DATA 0xd2
0000            168   _DAC0CF0        DATA 0x91
0000            169   _DAC0CF1        DATA 0x92
0000            170   _DAC0H          DATA 0x85
0000            171   _DAC0L          DATA 0x84
0000            172   _DAC1CF0        DATA 0x93
0000            173   _DAC1CF1        DATA 0x94
0000            174   _DAC1H          DATA 0x8a
0000            175   _DAC1L          DATA 0x89
0000            176   _DAC2CF0        DATA 0x95
0000            177   _DAC2CF1        DATA 0x96
0000            178   _DAC2H          DATA 0x8c
0000            179   _DAC2L          DATA 0x8b
0000            180   _DAC3CF0        DATA 0x9a
0000            181   _DAC3CF1        DATA 0x9c
0000            182   _DAC3H          DATA 0x8e
0000            183   _DAC3L          DATA 0x8d
0000            184   _DACGCF0        DATA 0x88
0000            185   _DACGCF1        DATA 0x98
0000            186   _DACGCF2        DATA 0xa2
0000            187   _DERIVID        DATA 0xad
0000            188   _DEVICEID       DATA 0xb5
0000            189   _DPH            DATA 0x83
0000            190   _DPL            DATA 0x82
0000            191   _EIE1           DATA 0xe6
0000            192   _EIE2           DATA 0xf3
0000            193   _EIP1           DATA 0xbb
0000            194   _EIP1H          DATA 0xee
0000            195   _EIP2           DATA 0xed
0000            196   _EIP2H          DATA 0xf6
0000            197   _EMI0CN         DATA 0xe7
0000            198   _FLKEY          DATA 0xb7
0000            199   _HFO0CAL        DATA 0xc7
0000            200   _HFO1CAL        DATA 0xd6
0000            201   _HFOCN          DATA 0xef
0000            202   _I2C0ADM        DATA 0xff
0000            203   _I2C0CN0        DATA 0xba
0000            204   _I2C0DIN        DATA 0xbc
0000            205   _I2C0DOUT       DATA 0xbb
0000            206   _I2C0FCN0       DATA 0xad
0000            207   _I2C0FCN1       DATA 0xab
0000            208   _I2C0FCT        DATA 0xf5
0000            209   _I2C0SLAD       DATA 0xbd
0000            210   _I2C0STAT       DATA 0xb9
0000            211   _IE             DATA 0xa8
0000            212   _IP             DATA 0xb8
0000            213   _IPH            DATA 0xf2
0000            214   _IT01CF         DATA 0xe4
0000            215   _LFO0CN         DATA 0xb1
0000            216   _P0             DATA 0x80
0000            217   _P0MASK         DATA 0xfe
0000            218   _P0MAT          DATA 0xfd
0000            219   _P0MDIN         DATA 0xf1
0000            220   _P0MDOUT        DATA 0xa4
0000            221   _P0SKIP         DATA 0xd4
0000            222   _P1             DATA 0x90
0000            223   _P1MASK         DATA 0xee
0000            224   _P1MAT          DATA 0xed
0000            225   _P1MDIN         DATA 0xf2
0000            226   _P1MDOUT        DATA 0xa5
0000            227   _P1SKIP         DATA 0xd5
0000            228   _P2             DATA 0xa0
0000            229   _P2MASK         DATA 0xfc
0000            230   _P2MAT          DATA 0xfb
0000            231   _P2MDIN         DATA 0xf3
0000            232   _P2MDOUT        DATA 0xa6
0000            233   _P2SKIP         DATA 0xcc
0000            234   _P3             DATA 0xb0
0000            235   _P3MDIN         DATA 0xf4
0000            236   _P3MDOUT        DATA 0x9c
0000            237   _PCA0CENT       DATA 0x9e
0000            238   _PCA0CLR        DATA 0x9c
0000            239   _PCA0CN0        DATA 0xd8
0000            240   _PCA0CPH0       DATA 0xfc
0000            241   _PCA0CPH1       DATA 0xea
0000            242   _PCA0CPH2       DATA 0xec
0000            243   _PCA0CPH3       DATA 0xf5
0000            244   _PCA0CPH4       DATA 0x85
0000            245   _PCA0CPH5       DATA 0xde
0000            246   _PCA0CPL0       DATA 0xfb
0000            247   _PCA0CPL1       DATA 0xe9
0000            248   _PCA0CPL2       DATA 0xeb
0000            249   _PCA0CPL3       DATA 0xf4
0000            250   _PCA0CPL4       DATA 0x84
0000            251   _PCA0CPL5       DATA 0xdd
0000            252   _PCA0CPM0       DATA 0xda
0000            253   _PCA0CPM1       DATA 0xdb
0000            254   _PCA0CPM2       DATA 0xdc
0000            255   _PCA0CPM3       DATA 0xae
0000            256   _PCA0CPM4       DATA 0xaf
0000            257   _PCA0CPM5       DATA 0xcc
0000            258   _PCA0H          DATA 0xfa
0000            259   _PCA0L          DATA 0xf9
0000            260   _PCA0MD         DATA 0xd9
0000            261   _PCA0POL        DATA 0x96
0000            262   _PCA0PWM        DATA 0xf7
0000            263   _PCON0          DATA 0x87
0000            264   _PCON1          DATA 0xcd
0000            265   _PFE0CN         DATA 0xc1
0000            266   _PRTDRV         DATA 0xf6
0000            267   _PSCTL          DATA 0x8f
0000            268   _PSTAT0         DATA 0xaa
0000            269   _PSW            DATA 0xd0
0000            270   _REF0CN         DATA 0xd1
0000            271   _REG0CN         DATA 0xc9
0000            272   _REVID          DATA 0xb6
0000            273   _RSTSRC         DATA 0xef
0000            274   _SBCON1         DATA 0x94
0000            275   _SBRLH1         DATA 0x96
0000            276   _SBRLL1         DATA 0x95
0000            277   _SBUF           DATA 0x99
0000            278   _SBUF0          DATA 0x99
0000            279   _SBUF1          DATA 0x92
0000            280   _SCON           DATA 0x98
0000            281   _SCON0          DATA 0x98
0000            282   _SCON1          DATA 0xc8
0000            283   _SFRPAGE        DATA 0xa7
0000            284   _SFRPGCN        DATA 0xbc
0000            285   _SFRSTACK       DATA 0xd7
0000            286   _SMB0ADM        DATA 0xd6
0000            287   _SMB0ADR        DATA 0xd7
0000            288   _SMB0CF         DATA 0xc1
0000            289   _SMB0CN0        DATA 0xc0
0000            290   _SMB0DAT        DATA 0xc2
0000            291   _SMB0FCN0       DATA 0xc3
0000            292   _SMB0FCN1       DATA 0xc4
0000            293   _SMB0FCT        DATA 0xef
0000            294   _SMB0RXLN       DATA 0xc5
0000            295   _SMB0TC         DATA 0xac
0000            296   _SMOD1          DATA 0x93
0000            297   _SP             DATA 0x81
0000            298   _SPI0CFG        DATA 0xa1
0000            299   _SPI0CKR        DATA 0xa2
0000            300   _SPI0CN0        DATA 0xf8
0000            301   _SPI0DAT        DATA 0xa3
0000            302   _SPI0FCN0       DATA 0x9a
0000            303   _SPI0FCN1       DATA 0x9b
0000            304   _SPI0FCT        DATA 0xf7
0000            305   _SPI0PCF        DATA 0xdf
0000            306   _TCON           DATA 0x88
0000            307   _TH0            DATA 0x8c
0000            308   _TH1            DATA 0x8d
0000            309   _TL0            DATA 0x8a
0000            310   _TL1            DATA 0x8b
0000            311   _TMOD           DATA 0x89
0000            312   _TMR2CN0        DATA 0xc8
0000            313   _TMR2CN1        DATA 0xfd
0000            314   _TMR2H          DATA 0xcf
0000            315   _TMR2L          DATA 0xce
0000            316   _TMR2RLH        DATA 0xcb
0000            317   _TMR2RLL        DATA 0xca
0000            318   _TMR3CN0        DATA 0x91
0000            319   _TMR3CN1        DATA 0xfe
0000            320   _TMR3H          DATA 0x95
0000            321   _TMR3L          DATA 0x94
0000            322   _TMR3RLH        DATA 0x93
0000            323   _TMR3RLL        DATA 0x92
0000            324   _TMR4CN0        DATA 0x98
0000            325   _TMR4CN1        DATA 0xff
0000            326   _TMR4H          DATA 0xa5
0000            327   _TMR4L          DATA 0xa4
0000            328   _TMR4RLH        DATA 0xa3
0000            329   _TMR4RLL        DATA 0xa2
0000            330   _TMR5CN0        DATA 0xc0
0000            331   _TMR5CN1        DATA 0xf1
0000            332   _TMR5H          DATA 0xd5
0000            333   _TMR5L          DATA 0xd4
0000            334   _TMR5RLH        DATA 0xd3
0000            335   _TMR5RLL        DATA 0xd2
0000            336   _UART0PCF       DATA 0xd9
0000            337   _UART1FCN0      DATA 0x9d
0000            338   _UART1FCN1      DATA 0xd8
0000            339   _UART1FCT       DATA 0xfa
0000            340   _UART1LIN       DATA 0x9e
0000            341   _UART1PCF       DATA 0xda
0000            342   _VDM0CN         DATA 0xff
0000            343   _WDTCN          DATA 0x97
0000            344   _XBR0           DATA 0xe1
0000            345   _XBR1           DATA 0xe2
0000            346   _XBR2           DATA 0xe3
0000            347   _XOSC0CN        DATA 0x86
0000            348   _DPTR           DATA 0x8382
0000            349   _TMR2RL         DATA 0xcbca
0000            350   _TMR3RL         DATA 0x9392
0000            351   _TMR4RL         DATA 0xa3a2
0000            352   _TMR5RL         DATA 0xd3d2
0000            353   _TMR0           DATA 0x8c8a
0000            354   _TMR1           DATA 0x8d8b
0000            355   _TMR2           DATA 0xcfce
0000            356   _TMR3           DATA 0x9594
0000            357   _TMR4           DATA 0xa5a4
0000            358   _TMR5           DATA 0xd5d4
0000            359   _SBRL1          DATA 0x9695
0000            360   _PCA0           DATA 0xfaf9
0000            361   _PCA0CP0        DATA 0xfcfb
0000            362   _PCA0CP1        DATA 0xeae9
0000            363   _PCA0CP2        DATA 0xeceb
0000            364   _PCA0CP3        DATA 0xf5f4
0000            365   _PCA0CP4        DATA 0x8584
0000            366   _PCA0CP5        DATA 0xdedd
0000            367   _ADC0ASA        DATA 0xb6b5
0000            368   _ADC0GT         DATA 0xc4c3
0000            369   _ADC0           DATA 0xbebd
0000            370   _ADC0LT         DATA 0xc6c5
0000            371   _DAC0           DATA 0x8584
0000            372   _DAC1           DATA 0x8a89
0000            373   _DAC2           DATA 0x8c8b
0000            374   _DAC3           DATA 0x8e8d
0000            375   ;--------------------------------------------------------
0000            376   ; special function bits
0000            377   ;--------------------------------------------------------
0000            378   _ACC_0          BIT 0xe0
0000            379   _ACC_1          BIT 0xe1
0000            380   _ACC_2          BIT 0xe2
0000            381   _ACC_3          BIT 0xe3
0000            382   _ACC_4          BIT 0xe4
0000            383   _ACC_5          BIT 0xe5
0000            384   _ACC_6          BIT 0xe6
0000            385   _ACC_7          BIT 0xe7
0000            386   _TEMPE          BIT 0xe8
0000            387   _ADGN0          BIT 0xe9
0000            388   _ADGN1          BIT 0xea
0000            389   _ADWINT         BIT 0xeb
0000            390   _ADBUSY         BIT 0xec
0000            391   _ADINT          BIT 0xed
0000            392   _IPOEN          BIT 0xee
0000            393   _ADEN           BIT 0xef
0000            394   _B_0            BIT 0xf0
0000            395   _B_1            BIT 0xf1
0000            396   _B_2            BIT 0xf2
0000            397   _B_3            BIT 0xf3
0000            398   _B_4            BIT 0xf4
0000            399   _B_5            BIT 0xf5
0000            400   _B_6            BIT 0xf6
0000            401   _B_7            BIT 0xf7
0000            402   _C0FIF          BIT 0xe8
0000            403   _C0RIF          BIT 0xe9
0000            404   _C1FIF          BIT 0xea
0000            405   _C1RIF          BIT 0xeb
0000            406   _C2FIF          BIT 0xec
0000            407   _C2RIF          BIT 0xed
0000            408   _C3FIF          BIT 0xee
0000            409   _C3RIF          BIT 0xef
0000            410   _D1SRC0         BIT 0x88
0000            411   _D1SRC1         BIT 0x89
0000            412   _D1AMEN         BIT 0x8a
0000            413   _D01REFSL       BIT 0x8b
0000            414   _D3SRC0         BIT 0x8c
0000            415   _D3SRC1         BIT 0x8d
0000            416   _D3AMEN         BIT 0x8e
0000            417   _D23REFSL       BIT 0x8f
0000            418   _D0UDIS         BIT 0x98
0000            419   _D1UDIS         BIT 0x99
0000            420   _D2UDIS         BIT 0x9a
0000            421   _D3UDIS         BIT 0x9b
0000            422   _EX0            BIT 0xa8
0000            423   _ET0            BIT 0xa9
0000            424   _EX1            BIT 0xaa
0000            425   _ET1            BIT 0xab
0000            426   _ES0            BIT 0xac
0000            427   _ET2            BIT 0xad
0000            428   _ESPI0          BIT 0xae
0000            429   _EA             BIT 0xaf
0000            430   _PX0            BIT 0xb8
0000            431   _PT0            BIT 0xb9
0000            432   _PX1            BIT 0xba
0000            433   _PT1            BIT 0xbb
0000            434   _PS0            BIT 0xbc
0000            435   _PT2            BIT 0xbd
0000            436   _PSPI0          BIT 0xbe
0000            437   _P0_0           BIT 0x80
0000            438   _P0_1           BIT 0x81
0000            439   _P0_2           BIT 0x82
0000            440   _P0_3           BIT 0x83
0000            441   _P0_4           BIT 0x84
0000            442   _P0_5           BIT 0x85
0000            443   _P0_6           BIT 0x86
0000            444   _P0_7           BIT 0x87
0000            445   _P1_0           BIT 0x90
0000            446   _P1_1           BIT 0x91
0000            447   _P1_2           BIT 0x92
0000            448   _P1_3           BIT 0x93
0000            449   _P1_4           BIT 0x94
0000            450   _P1_5           BIT 0x95
0000            451   _P1_6           BIT 0x96
0000            452   _P1_7           BIT 0x97
0000            453   _P2_0           BIT 0xa0
0000            454   _P2_1           BIT 0xa1
0000            455   _P2_2           BIT 0xa2
0000            456   _P2_3           BIT 0xa3
0000            457   _P2_4           BIT 0xa4
0000            458   _P2_5           BIT 0xa5
0000            459   _P2_6           BIT 0xa6
0000            460   _P3_0           BIT 0xb0
0000            461   _P3_1           BIT 0xb1
0000            462   _P3_2           BIT 0xb2
0000            463   _P3_3           BIT 0xb3
0000            464   _P3_4           BIT 0xb4
0000            465   _P3_7           BIT 0xb7
0000            466   _CCF0           BIT 0xd8
0000            467   _CCF1           BIT 0xd9
0000            468   _CCF2           BIT 0xda
0000            469   _CCF3           BIT 0xdb
0000            470   _CCF4           BIT 0xdc
0000            471   _CCF5           BIT 0xdd
0000            472   _CR             BIT 0xde
0000            473   _CF             BIT 0xdf
0000            474   _PARITY         BIT 0xd0
0000            475   _F1             BIT 0xd1
0000            476   _OV             BIT 0xd2
0000            477   _RS0            BIT 0xd3
0000            478   _RS1            BIT 0xd4
0000            479   _F0             BIT 0xd5
0000            480   _AC             BIT 0xd6
0000            481   _CY             BIT 0xd7
0000            482   _RI             BIT 0x98
0000            483   _TI             BIT 0x99
0000            484   _RB8            BIT 0x9a
0000            485   _TB8            BIT 0x9b
0000            486   _REN            BIT 0x9c
0000            487   _CE             BIT 0x9d
0000            488   _SMODE          BIT 0x9e
0000            489   _RI1            BIT 0xc8
0000            490   _TI1            BIT 0xc9
0000            491   _RBX1           BIT 0xca
0000            492   _TBX1           BIT 0xcb
0000            493   _REN1           BIT 0xcc
0000            494   _PERR1          BIT 0xcd
0000            495   _OVR1           BIT 0xce
0000            496   _SI             BIT 0xc0
0000            497   _ACK            BIT 0xc1
0000            498   _ARBLOST        BIT 0xc2
0000            499   _ACKRQ          BIT 0xc3
0000            500   _STO            BIT 0xc4
0000            501   _STA            BIT 0xc5
0000            502   _TXMODE         BIT 0xc6
0000            503   _MASTER         BIT 0xc7
0000            504   _SPIEN          BIT 0xf8
0000            505   _TXNF           BIT 0xf9
0000            506   _NSSMD0         BIT 0xfa
0000            507   _NSSMD1         BIT 0xfb
0000            508   _RXOVRN         BIT 0xfc
0000            509   _MODF           BIT 0xfd
0000            510   _WCOL           BIT 0xfe
0000            511   _SPIF           BIT 0xff
0000            512   _IT0            BIT 0x88
0000            513   _IE0            BIT 0x89
0000            514   _IT1            BIT 0x8a
0000            515   _IE1            BIT 0x8b
0000            516   _TR0            BIT 0x8c
0000            517   _TF0            BIT 0x8d
0000            518   _TR1            BIT 0x8e
0000            519   _TF1            BIT 0x8f
0000            520   _T2XCLK0        BIT 0xc8
0000            521   _T2XCLK1        BIT 0xc9
0000            522   _TR2            BIT 0xca
0000            523   _T2SPLIT        BIT 0xcb
0000            524   _TF2CEN         BIT 0xcc
0000            525   _TF2LEN         BIT 0xcd
0000            526   _TF2L           BIT 0xce
0000            527   _TF2H           BIT 0xcf
0000            528   _T4XCLK0        BIT 0x98
0000            529   _T4XCLK1        BIT 0x99
0000            530   _TR4            BIT 0x9a
0000            531   _T4SPLIT        BIT 0x9b
0000            532   _TF4CEN         BIT 0x9c
0000            533   _TF4LEN         BIT 0x9d
0000            534   _TF4L           BIT 0x9e
0000            535   _TF4H           BIT 0x9f
0000            536   _T5XCLK0        BIT 0xc0
0000            537   _T5XCLK1        BIT 0xc1
0000            538   _TR5            BIT 0xc2
0000            539   _T5SPLIT        BIT 0xc3
0000            540   _TF5CEN         BIT 0xc4
0000            541   _TF5LEN         BIT 0xc5
0000            542   _TF5L           BIT 0xc6
0000            543   _TF5H           BIT 0xc7
0000            544   _RIE            BIT 0xd8
0000            545   _RXTO0          BIT 0xd9
0000            546   _RXTO1          BIT 0xda
0000            547   _RFRQ           BIT 0xdb
0000            548   _TIE            BIT 0xdc
0000            549   _TXHOLD         BIT 0xdd
0000            550   _TXNF1          BIT 0xde
0000            551   _TFRQ           BIT 0xdf
0000            552   ;--------------------------------------------------------
0000            553   ; overlayable register banks
0000            554   ;--------------------------------------------------------
0000            555            rbank0 segment data overlay
0000            556   ;--------------------------------------------------------
0000            557   ; overlayable bit register bank
0000            558   ;--------------------------------------------------------
0000            559            rseg BIT_BANK
0000            560   bits:
0000            561            ds 1
0001            562            b0 equ  bits.0 
0001            563            b1 equ  bits.1 
0001            564            b2 equ  bits.2 
0001            565            b3 equ  bits.3 
0001            566            b4 equ  bits.4 
0001            567            b5 equ  bits.5 
0001            568            b6 equ  bits.6 
0001            569            b7 equ  bits.7 
0001            570   ;--------------------------------------------------------
0001            571   ; internal ram data
0001            572   ;--------------------------------------------------------
0000            573            rseg R_DSEG
0000            574   _SPI_write_PARM_2:
0000            575            ds 1
0001            576   _BMM150_compensate_x_PARM_2:
0001            577            ds 3
0004            578   _BMM150_compensate_x_sloc0_1_0:
0004            579            ds 4
0008            580   _BMM150_compensate_y_PARM_2:
0008            581            ds 3
000B            582   _BMM150_compensate_y_sloc0_1_0:
000B            583            ds 4
000F            584   _BMM150_Read_Data_PARM_2:
000F            585            ds 3
0012            586   _BMM150_Read_Data_mag_x_1_124:
0012            587            ds 3
0015            588   _getstr1_PARM_2:
0015            589            ds 1
0016            590   _Read_angle_sloc0_1_0:
0016            591            ds 4
001A            592   _Auto_mode_slave_sloc0_1_0:
001A            593            ds 2
001C            594   _Joystick_Control_PARM_2:
001C            595            ds 3
001F            596   _Joystick_Control_sloc0_1_0:
001F            597            ds 2
0021            598   _Joystick_Control_sloc1_1_0:
0021            599            ds 4
0025            600   _Joystick_Control_sloc2_1_0:
0025            601            ds 4
0029            602   _Joystick_Control_sloc3_1_0:
0029            603            ds 4
002D            604   _main_pick_char_1_237:
002D            605            ds 1
002E            606   ;--------------------------------------------------------
002E            607   ; overlayable items in internal ram 
002E            608   ;--------------------------------------------------------
0000            609            rseg    R_OSEG
0000            610            rseg    R_OSEG
0000            611            rseg    R_OSEG
0000            612            rseg    R_OSEG
0000            613            rseg    R_OSEG
0000            614            rseg    R_OSEG
<<<<<<< HEAD
0000            615   _InitPinADC_PARM_2:
0000            616            ds 1
0001            617            rseg    R_OSEG
0001            618            rseg    R_OSEG
0001            619   _check_bound_PARM_2:
0001            620            ds 2
0003            621   ;--------------------------------------------------------
0003            622   ; indirectly addressable internal ram data
0003            623   ;--------------------------------------------------------
0000            624            rseg R_ISEG
0000            625   _buff:
0000            626            ds 20
0014            627   ;--------------------------------------------------------
0014            628   ; absolute internal ram data
0014            629   ;--------------------------------------------------------
0000            630            DSEG
0000            631   ;--------------------------------------------------------
0000            632   ; bit data
0000            633   ;--------------------------------------------------------
0000            634            rseg R_BSEG
0000            635   ;--------------------------------------------------------
0000            636   ; paged external ram data
0000            637   ;--------------------------------------------------------
0000            638            rseg R_PSEG
0000            639   ;--------------------------------------------------------
0000            640   ; external ram data
0000            641   ;--------------------------------------------------------
0000            642            rseg R_XSEG
0000            643   _freq100:
0000            644            ds 4
0004            645   _d1:
0004            646            ds 2
0006            647   _d2:
0006            648            ds 2
0008            649   _dig_x1:
0008            650            ds 1
0009            651   _dig_x2:
0009            652            ds 1
000A            653   _dig_y1:
000A            654            ds 1
000B            655   _dig_y2:
000B            656            ds 1
000C            657   _dig_z1:
000C            658            ds 2
000E            659   _dig_z2:
000E            660            ds 2
0010            661   _dig_z3:
0010            662            ds 2
0012            663   _dig_z4:
0012            664            ds 2
0014            665   _dig_xy1:
0014            666            ds 1
0015            667   _dig_xy2:
0015            668            ds 1
0016            669   _dig_xyz1:
0016            670            ds 2
0018            671   _temp:
0018            672            ds 4
001C            673   _BMM150_Read_Trim_Registers_trim_x1y1_1_97:
001C            674            ds 2
001E            675   _BMM150_Read_Trim_Registers_trim_xyz_data_1_97:
001E            676            ds 4
0022            677   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_97:
0022            678            ds 10
002C            679   _BMM150_compensate_x_retval_1_107:
002C            680            ds 2
002E            681   _BMM150_compensate_x_process_comp_x0_1_107:
002E            682            ds 2
0030            683   _BMM150_compensate_y_retval_1_116:
0030            684            ds 2
0032            685   _BMM150_compensate_y_process_comp_y0_1_116:
0032            686            ds 2
0034            687   _BMM150_Read_Data_x_val_1_125:
0034            688            ds 2
0036            689   _BMM150_Read_Data_y_val_1_125:
0036            690            ds 2
0038            691   _BMM150_Read_Data_rhall_val_1_125:
0038            692            ds 2
003A            693   _ReadHX711_dataa_1_169:
003A            694            ds 4
003E            695   _ReadHX711_j_1_169:
003E            696            ds 1
003F            697   _Read_angle_mag_x_1_203:
003F            698            ds 2
0041            699   _Read_angle_mag_y_1_203:
0041            700            ds 2
0043            701   _Read_angle_sum_x_1_203:
0043            702            ds 4
0047            703   _Read_angle_sum_y_1_203:
0047            704            ds 4
004B            705   _Read_angle_angle_1_203:
004B            706            ds 4
004F            707   _Auto_mode_slave_command_1_205:
004F            708            ds 2
0051            709   _Auto_mode_slave_state_res_1_205:
0051            710            ds 2
0053            711   _Auto_mode_slave_dummy_1_205:
0053            712            ds 2
0055            713   _Joystick_Control_vx_error_1_214:
0055            714            ds 2
0057            715   _Joystick_Control_vy_error_1_214:
0057            716            ds 2
0059            717   _Joystick_Control_vx_err_1_214:
0059            718            ds 2
005B            719   _Joystick_Control_vy_err_1_214:
005B            720            ds 2
005D            721   _main_vx_1_237:
005D            722            ds 2
005F            723   _main_vy_1_237:
005F            724            ds 2
0061            725   _main_auto_mode_1_237:
0061            726            ds 2
0063            727   ;--------------------------------------------------------
0063            728   ; absolute external ram data
0063            729   ;--------------------------------------------------------
0000            730            XSEG
0000            731   ;--------------------------------------------------------
0000            732   ; external initialized ram data
0000            733   ;--------------------------------------------------------
0000            734            rseg R_IXSEG
0000            735   _pwm_counter:
0000            736            ds 2
0002            737   _servo_counter:
0002            738            ds 2
0004            739   _pwm_left:
0004            740            ds 1
0005            741   _pwm_right:
0005            742            ds 1
0006            743   _L_motor_dir:
0006            744            ds 1
0007            745   _R_motor_dir:
0007            746            ds 1
0008            747   _servo_base:
0008            748            ds 1
0009            749   _servo_arm:
0009            750            ds 1
000A            751   _vx_thres:
000A            752            ds 2
000C            753   _vy_thres:
000C            754            ds 2
000E            755   _vx:
000E            756            ds 2
0010            757   _vy:
0010            758            ds 2
0012            759   _fre_mea_count:
0012            760            ds 2
0014            761   _weight_mea_count:
0014            762            ds 2
0016            763   _seed:
0016            764            ds 2
0018            765   _pwm_corr:
0018            766            ds 4
001C            767   _curr_angle:
001C            768            ds 4
0020            769   _raw_angle:
0020            770            ds 4
0024            771   _last_raw_angle:
0024            772            ds 4
0028            773   _angle_diff:
0028            774            ds 4
002C            775   _mea_yes:
002C            776            ds 1
002D            777   _weight:
002D            778            ds 2
0000            779            rseg R_HOME
0000            780            rseg R_GSINIT
0000            781            rseg R_CSEG
0000            782   ;--------------------------------------------------------
0000            783   ; Reset entry point and interrupt vectors
0000            784   ;--------------------------------------------------------
0000            785            CSEG at 0x0000
0000 020000     786            ljmp    _crt0
0093            787            CSEG at 0x0093
0093 020000     788            ljmp    _Timer5_ISR
0096            789   ;--------------------------------------------------------
0096            790   ; global & static initialisations
0096            791   ;--------------------------------------------------------
0000            792            rseg R_HOME
0000            793            rseg R_GSINIT
0000            794            rseg R_GSINIT
0000            795   ;--------------------------------------------------------
0000            796   ; data variables initialization
0000            797   ;--------------------------------------------------------
0000            798            rseg R_DINIT
0000            799            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            800   ;--------------------------------------------------------
0000            801   ; code
0000            802   ;--------------------------------------------------------
0000            803            rseg R_CSEG
0000            804   ;------------------------------------------------------------
0000            805   ;Allocation info for local variables in function '_c51_external_startup'
0000            806   ;------------------------------------------------------------
0000            807   ;------------------------------------------------------------
0000            808   ;        main.c:111: char _c51_external_startup (void)
0000            809   ;        -----------------------------------------
0000            810   ;         function _c51_external_startup
0000            811   ;        -----------------------------------------
0000            812   __c51_external_startup:
0000            813            using   0
0000            814   ;        main.c:114: SFRPAGE = 0x00;
0000 75A700     815            mov     _SFRPAGE,#0x00
0003            816   ;        main.c:115: WDTCN = 0xDE; //First key
0003 7597DE     817            mov     _WDTCN,#0xDE
0006            818   ;        main.c:116: WDTCN = 0xAD; //Second key
0006 7597AD     819            mov     _WDTCN,#0xAD
0009            820   ;        main.c:118: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     821            mov     _VDM0CN,#0x80
000C            822   ;        main.c:119: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     823            mov     _RSTSRC,#0x06
000F            824   ;        main.c:126: SFRPAGE = 0x10;
000F 75A710     825            mov     _SFRPAGE,#0x10
0012            826   ;        main.c:127: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     827            mov     _PFE0CN,#0x20
0015            828   ;        main.c:128: SFRPAGE = 0x00;
0015 75A700     829            mov     _SFRPAGE,#0x00
0018            830   ;        main.c:149: CLKSEL = 0x00;
0018 75A900     831            mov     _CLKSEL,#0x00
001B            832   ;        main.c:150: CLKSEL = 0x00;
001B 75A900     833            mov     _CLKSEL,#0x00
001E            834   ;        main.c:151: while ((CLKSEL & 0x80) == 0);
001E            835   L002001?:
001E E5A9       836            mov     a,_CLKSEL
0020 30E7B8     837            jnb     acc.7,L002001?
0023            838   ;        main.c:152: CLKSEL = 0x03;
0023 75A903     839            mov     _CLKSEL,#0x03
0026            840   ;        main.c:153: CLKSEL = 0x03;
0026 75A903     841            mov     _CLKSEL,#0x03
0029            842   ;        main.c:154: while ((CLKSEL & 0x80) == 0);
0029            843   L002004?:
0029 E5A9       844            mov     a,_CLKSEL
002B 30E738     845            jnb     acc.7,L002004?
002E            846   ;        main.c:160: P0MDOUT |= 0b_1100_0000;
002E 43A4C0     847            orl     _P0MDOUT,#0xC0
0031            848   ;        main.c:161: P1MDOUT |= 0b_0000_0110;
0031 43A506     849            orl     _P1MDOUT,#0x06
0034            850   ;        main.c:162: P2MDOUT |= 0b_0000_0001; // P2.0 in push-pull mode
0034 43A601     851            orl     _P2MDOUT,#0x01
0037            852   ;        main.c:163: XBR0     = 0b_0000_0011; // UART0E = 1 and SPI0E = 1               
0037 75E103     853            mov     _XBR0,#0x03
003A            854   ;        main.c:164: XBR1     = 0b_0000_0000;
003A 75E200     855            mov     _XBR1,#0x00
003D            856   ;        main.c:165: XBR2     = 0b_0100_0001; // Enable crossbar and uart 1
003D 75E341     857            mov     _XBR2,#0x41
0040            858   ;        main.c:166: P0SKIP       = 0b_0000_0111; 
0040 75D407     859            mov     _P0SKIP,#0x07
0043            860   ;        main.c:167: P1SKIP   = 0b_1111_1001;
0043 75D5F9     861            mov     _P1SKIP,#0xF9
0046            862   ;        main.c:172: SCON0 = 0x10;
0046 759810     863            mov     _SCON0,#0x10
0049            864   ;        main.c:173: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     865            mov     _TH1,#0xE6
004C            866   ;        main.c:174: TL1 = TH1;      // Init Timer1
004C 858D8B     867            mov     _TL1,_TH1
004F            868   ;        main.c:175: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     869            anl     _TMOD,#0x0F
0052            870   ;        main.c:176: TMOD |=  0x20;                       
0052 438920     871            orl     _TMOD,#0x20
0055            872   ;        main.c:177: TR1 = 1; // START Timer1
0055 D28E       873            setb    _TR1
0057            874   ;        main.c:178: TI = 1;  // Indicate TX0 ready
0057 D299       875            setb    _TI
0059            876   ;        main.c:179: P2_0=1; // 'set' pin to 1 is normal operation mode.
0059 D2A0       877            setb    _P2_0
005B            878   ;        main.c:182: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
005B 75A211     879            mov     _SPI0CKR,#0x11
005E            880   ;        main.c:183: SPI0CFG = 0b_1110_0000; // SPI mode 3
005E 75A1E0     881            mov     _SPI0CFG,#0xE0
0061            882   ;        main.c:184: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0061 75F801     883            mov     _SPI0CN0,#0x01
0064            884   ;        main.c:187: SFRPAGE=0x10;
0064 75A710     885            mov     _SFRPAGE,#0x10
0067            886   ;        main.c:188: TMR5CN0=0x00;
0067 75C000     887            mov     _TMR5CN0,#0x00
006A            888   ;        main.c:189: TMR5=0xffff;   // Set to reload immediately
006A 75D4FF     889            mov     _TMR5,#0xFF
006D 75D5FF     890            mov     (_TMR5 >> 8),#0xFF
0070            891   ;        main.c:190: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
0070 43F308     892            orl     _EIE2,#0x08
0073            893   ;        main.c:191: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0073 D2C2       894            setb    _TR5
0075            895   ;        main.c:193: EA=1;  // Enable global interrupts
0075 D2AF       896            setb    _EA
0077            897   ;        main.c:194: SFRPAGE=0x00;
0077 75A700     898            mov     _SFRPAGE,#0x00
007A            899   ;        main.c:196: return 0;
007A 758200     900            mov     dpl,#0x00
007D 22         901            ret
007E            902   ;------------------------------------------------------------
007E            903   ;Allocation info for local variables in function 'Timer3us'
007E            904   ;------------------------------------------------------------
007E            905   ;us                        Allocated to registers r2 
007E            906   ;i                         Allocated to registers r3 
007E            907   ;------------------------------------------------------------
007E            908   ;        main.c:200: void Timer3us(unsigned char us)
007E            909   ;        -----------------------------------------
007E            910   ;         function Timer3us
007E            911   ;        -----------------------------------------
007E            912   _Timer3us:
007E AA82       913            mov     r2,dpl
0080            914   ;        main.c:205: CKCON0|=0b_0100_0000;
0080 438E40     915            orl     _CKCON0,#0x40
0083            916   ;        main.c:207: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0083 7592B8     917            mov     _TMR3RL,#0xB8
0086 7593FF     918            mov     (_TMR3RL >> 8),#0xFF
0089            919   ;        main.c:208: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0089 859294     920            mov     _TMR3,_TMR3RL
008C 859395     921            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
008F            922   ;        main.c:210: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
008F 759104     923            mov     _TMR3CN0,#0x04
0092            924   ;        main.c:211: for (i = 0; i < us; i++)       // Count <us> overflows
0092 7B00       925            mov     r3,#0x00
0094            926   L003004?:
0094 C3         927            clr     c
0095 EB         928            mov     a,r3
0096 9A         929            subb    a,r2
0097 5000       930            jnc     L003007?
0099            931   ;        main.c:213: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0099            932   L003001?:
0099 E591       933            mov     a,_TMR3CN0
009B 30E738     934            jnb     acc.7,L003001?
009E            935   ;        main.c:214: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
009E 53917F     936            anl     _TMR3CN0,#0x7F
00A1            937   ;        main.c:211: for (i = 0; i < us; i++)       // Count <us> overflows
00A1 0B         938            inc     r3
00A2 8000       939            sjmp    L003004?
00A4            940   L003007?:
00A4            941   ;        main.c:216: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00A4 759100     942            mov     _TMR3CN0,#0x00
00A7 22         943            ret
00A8            944   ;------------------------------------------------------------
00A8            945   ;Allocation info for local variables in function 'waitms'
00A8            946   ;------------------------------------------------------------
00A8            947   ;ms                        Allocated to registers r2 r3 
00A8            948   ;j                         Allocated to registers r4 r5 
00A8            949   ;k                         Allocated to registers r6 
00A8            950   ;------------------------------------------------------------
00A8            951   ;        main.c:219: void waitms (unsigned int ms)
00A8            952   ;        -----------------------------------------
00A8            953   ;         function waitms
00A8            954   ;        -----------------------------------------
00A8            955   _waitms:
00A8 AA82       956            mov     r2,dpl
00AA AB83       957            mov     r3,dph
00AC            958   ;        main.c:223: for(j=0; j<ms; j++)
00AC 7C00       959            mov     r4,#0x00
00AE 7D00       960            mov     r5,#0x00
00B0            961   L004005?:
00B0 C3         962            clr     c
00B1 EC         963            mov     a,r4
00B2 9A         964            subb    a,r2
00B3 ED         965            mov     a,r5
00B4 9B         966            subb    a,r3
00B5 5000       967            jnc     L004009?
00B7            968   ;        main.c:224: for (k=0; k<4; k++) Timer3us(250);
00B7 7E00       969            mov     r6,#0x00
00B9            970   L004001?:
00B9 BE0478     971            cjne    r6,#0x04,L004018?
00BC            972   L004018?:
00BC 5000       973            jnc     L004007?
00BE 7582FA     974            mov     dpl,#0xFA
00C1 C002       975            push    ar2
00C3 C003       976            push    ar3
00C5 C004       977            push    ar4
00C7 C005       978            push    ar5
00C9 C006       979            push    ar6
00CB 120000     980            lcall   _Timer3us
00CE D006       981            pop     ar6
00D0 D005       982            pop     ar5
00D2 D004       983            pop     ar4
00D4 D003       984            pop     ar3
00D6 D002       985            pop     ar2
00D8 0E         986            inc     r6
00D9 8000       987            sjmp    L004001?
00DB            988   L004007?:
00DB            989   ;        main.c:223: for(j=0; j<ms; j++)
00DB 0C         990            inc     r4
00DC BC00B8     991            cjne    r4,#0x00,L004005?
00DF 0D         992            inc     r5
00E0 8000       993            sjmp    L004005?
00E2            994   L004009?:
00E2 22         995            ret
00E3            996   ;------------------------------------------------------------
00E3            997   ;Allocation info for local variables in function 'SPI_transfer'
00E3            998   ;------------------------------------------------------------
00E3            999   ;tx_data                   Allocated to registers 
00E3           1000   ;------------------------------------------------------------
00E3           1001   ;        main.c:227: unsigned char SPI_transfer(unsigned char tx_data)
00E3           1002   ;        -----------------------------------------
00E3           1003   ;         function SPI_transfer
00E3           1004   ;        -----------------------------------------
00E3           1005   _SPI_transfer:
00E3 8582A3    1006            mov     _SPI0DAT,dpl
00E6           1007   ;        main.c:230: while (!SPIF);      // Wait for transfer to complete
00E6           1008   L005001?:
00E6           1009   ;        main.c:231: SPIF = 0;           // Clear SPI interrupt flag
00E6 10FF38    1010            jbc     _SPIF,L005008?
00E9 8000      1011            sjmp    L005001?
00EB           1012   L005008?:
00EB           1013   ;        main.c:232: return SPI0DAT;     // Return received data
00EB 85A382    1014            mov     dpl,_SPI0DAT
00EE 22        1015            ret
00EF           1016   ;------------------------------------------------------------
00EF           1017   ;Allocation info for local variables in function 'SPI_read'
00EF           1018   ;------------------------------------------------------------
00EF           1019   ;reg_addr                  Allocated to registers r2 
00EF           1020   ;value                     Allocated with name '_SPI_read_value_1_93'
00EF           1021   ;------------------------------------------------------------
00EF           1022   ;        main.c:235: unsigned char SPI_read(unsigned char reg_addr)
00EF           1023   ;        -----------------------------------------
00EF           1024   ;         function SPI_read
00EF           1025   ;        -----------------------------------------
00EF           1026   _SPI_read:
00EF AA82      1027            mov     r2,dpl
00F1           1028   ;        main.c:240: reg_addr = reg_addr | 0x80;
00F1 430280    1029            orl     ar2,#0x80
00F4           1030   ;        main.c:242: CS = 0;                // Select the device
00F4 C290      1031            clr     _P1_0
00F6           1032   ;        main.c:243: SPI_transfer(reg_addr);     // Send register address
00F6 8A82      1033            mov     dpl,r2
00F8 120000    1034            lcall   _SPI_transfer
00FB           1035   ;        main.c:244: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
00FB 758200    1036            mov     dpl,#0x00
00FE 120000    1037            lcall   _SPI_transfer
0101           1038   ;        main.c:245: CS = 1;                // Deselect the device
0101 D290      1039            setb    _P1_0
0103           1040   ;        main.c:247: return value;
0103 22        1041            ret
0104           1042   ;------------------------------------------------------------
0104           1043   ;Allocation info for local variables in function 'SPI_write'
0104           1044   ;------------------------------------------------------------
0104           1045   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0104           1046   ;reg_addr                  Allocated to registers r2 
0104           1047   ;------------------------------------------------------------
0104           1048   ;        main.c:250: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0104           1049   ;        -----------------------------------------
0104           1050   ;         function SPI_write
0104           1051   ;        -----------------------------------------
0104           1052   _SPI_write:
0104 AA82      1053            mov     r2,dpl
0106           1054   ;        main.c:253: reg_addr = reg_addr & 0x7F;
0106 53027F    1055            anl     ar2,#0x7F
0109           1056   ;        main.c:255: CS = 0;                // Select device
0109 C290      1057            clr     _P1_0
010B           1058   ;        main.c:256: SPI_transfer(reg_addr);     // Send register address
010B 8A82      1059            mov     dpl,r2
010D 120000    1060            lcall   _SPI_transfer
0110           1061   ;        main.c:257: SPI_transfer(reg_value);    // Send value
0110 855882    1062            mov     dpl,_SPI_write_PARM_2
0113 120000    1063            lcall   _SPI_transfer
0116           1064   ;        main.c:258: CS = 1;                // Deselect device
0116 D290      1065            setb    _P1_0
0118 22        1066            ret
0119           1067   ;------------------------------------------------------------
0119           1068   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
0119           1069   ;------------------------------------------------------------
0119           1070   ;i                         Allocated with name '_BMM150_Read_Trim_Registers_i_1_97'
0119           1071   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_97'
0119           1072   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_97'
0119           1073   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_97'
0119           1074   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97'
0119           1075   ;------------------------------------------------------------
0119           1076   ;        main.c:261: void BMM150_Read_Trim_Registers(void)
0119           1077   ;        -----------------------------------------
0119           1078   ;         function BMM150_Read_Trim_Registers
0119           1079   ;        -----------------------------------------
0119           1080   _BMM150_Read_Trim_Registers:
0119           1081   ;        main.c:265: xdata uint8_t trim_x1y1[2] = {0};
0119 90D098    1082            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
011C           1083   ;        main.c:266: xdata uint8_t trim_xyz_data[4] = {0};
011C E4        1084            clr     a
011D F0        1085            movx    @dptr,a
011E 90D099    1086            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
0121 F0        1087            movx    @dptr,a
0122 90D0F8    1088            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0125 F0        1089            movx    @dptr,a
0126 90D0F9    1090            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0001)
0129 F0        1091            movx    @dptr,a
012A 90D0FA    1092            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
012D           1093   ;        main.c:267: xdata uint8_t trim_xy1xy2[10] = {0};
012D E4        1094            clr     a
012E F0        1095            movx    @dptr,a
012F 90D0FB    1096            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0132 F0        1097            movx    @dptr,a
0133 90D158    1098            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0136 F0        1099            movx    @dptr,a
0137 90D159    1100            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0001)
013A F0        1101            movx    @dptr,a
013B 90D15A    1102            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0002)
013E E4        1103            clr     a
013F F0        1104            movx    @dptr,a
0140 90D15B    1105            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0003)
0143 F0        1106            movx    @dptr,a
0144 90D15C    1107            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0147 F0        1108            movx    @dptr,a
0148 90D15D    1109            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
014B F0        1110            movx    @dptr,a
014C 90D15E    1111            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0006)
014F E4        1112            clr     a
0150 F0        1113            movx    @dptr,a
0151 90D15F    1114            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0007)
0154 F0        1115            movx    @dptr,a
0155 90D160    1116            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0158 F0        1117            movx    @dptr,a
0159 90D161    1118            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
015C F0        1119            movx    @dptr,a
015D           1120   ;        main.c:270: for (i=0;i<2;i++){
015D 7A00      1121            mov     r2,#0x00
015F           1122   L008001?:
015F BA02B8    1123            cjne    r2,#0x02,L008024?
0162           1124   L008024?:
0162 5000      1125            jnc     L008004?
0164           1126   ;        main.c:271: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
0164 EA        1127            mov     a,r2
0165 2498      1128            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0167 FB        1129            mov     r3,a
0168 E4        1130            clr     a
0169 34D0      1131            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 >> 8)
016B FC        1132            mov     r4,a
016C 745D      1133            mov     a,#0x5D
016E 2A        1134            add     a,r2
016F F582      1135            mov     dpl,a
0171 C002      1136            push    ar2
0173 C003      1137            push    ar3
0175 C004      1138            push    ar4
0177 120000    1139            lcall   _SPI_read
017A AD82      1140            mov     r5,dpl
017C D004      1141            pop     ar4
017E D003      1142            pop     ar3
0180 D002      1143            pop     ar2
0182 8B82      1144            mov     dpl,r3
0184 8C83      1145            mov     dph,r4
0186 ED        1146            mov     a,r5
0187 F0        1147            movx    @dptr,a
0188           1148   ;        main.c:270: for (i=0;i<2;i++){
0188 0A        1149            inc     r2
0189 8000      1150            sjmp    L008001?
018B           1151   L008004?:
018B           1152   ;        main.c:273: for (i=0;i<4;i++){
018B 7A00      1153            mov     r2,#0x00
018D           1154   L008005?:
018D BA0478    1155            cjne    r2,#0x04,L008026?
0190           1156   L008026?:
0190 5000      1157            jnc     L008008?
0192           1158   ;        main.c:274: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
0192 EA        1159            mov     a,r2
0193 24F8      1160            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0195 FB        1161            mov     r3,a
0196 E4        1162            clr     a
0197 34D0      1163            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 >> 8)
0199 FC        1164            mov     r4,a
019A 7462      1165            mov     a,#0x62
019C 2A        1166            add     a,r2
019D F582      1167            mov     dpl,a
019F C002      1168            push    ar2
01A1 C003      1169            push    ar3
01A3 C004      1170            push    ar4
01A5 120000    1171            lcall   _SPI_read
01A8 AD82      1172            mov     r5,dpl
01AA D004      1173            pop     ar4
01AC D003      1174            pop     ar3
01AE D002      1175            pop     ar2
01B0 8B82      1176            mov     dpl,r3
01B2 8C83      1177            mov     dph,r4
01B4 ED        1178            mov     a,r5
01B5 F0        1179            movx    @dptr,a
01B6           1180   ;        main.c:273: for (i=0;i<4;i++){
01B6 0A        1181            inc     r2
01B7 8000      1182            sjmp    L008005?
01B9           1183   L008008?:
01B9           1184   ;        main.c:276: for (i=0;i<10;i++){
01B9 7A00      1185            mov     r2,#0x00
01BB           1186   L008009?:
01BB BA0A38    1187            cjne    r2,#0x0A,L008028?
01BE           1188   L008028?:
01BE 5000      1189            jnc     L008012?
01C0           1190   ;        main.c:277: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
01C0 EA        1191            mov     a,r2
01C1 2458      1192            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
01C3 FB        1193            mov     r3,a
01C4 E4        1194            clr     a
01C5 34D1      1195            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 >> 8)
01C7 FC        1196            mov     r4,a
01C8 7468      1197            mov     a,#0x68
01CA 2A        1198            add     a,r2
01CB F582      1199            mov     dpl,a
01CD C002      1200            push    ar2
01CF C003      1201            push    ar3
01D1 C004      1202            push    ar4
01D3 120000    1203            lcall   _SPI_read
01D6 AD82      1204            mov     r5,dpl
01D8 D004      1205            pop     ar4
01DA D003      1206            pop     ar3
01DC D002      1207            pop     ar2
01DE 8B82      1208            mov     dpl,r3
01E0 8C83      1209            mov     dph,r4
01E2 ED        1210            mov     a,r5
01E3 F0        1211            movx    @dptr,a
01E4           1212   ;        main.c:276: for (i=0;i<10;i++){
01E4 0A        1213            inc     r2
01E5 8000      1214            sjmp    L008009?
01E7           1215   L008012?:
01E7           1216   ;        main.c:280: dig_x1 = (int8_t) trim_x1y1[0]; 
01E7 90D098    1217            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
01EA E0        1218            movx    a,@dptr
01EB 905A88    1219            mov     dptr,#_dig_x1
01EE F0        1220            movx    @dptr,a
01EF           1221   ;        main.c:281: dig_y1 = (int8_t) trim_x1y1[1]; 
01EF 90D099    1222            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
01F2 E0        1223            movx    a,@dptr
01F3 905A08    1224            mov     dptr,#_dig_y1
01F6 F0        1225            movx    @dptr,a
01F7           1226   ;        main.c:282: dig_x2 = (int8_t) trim_xyz_data[2]; 
01F7 90D0FA    1227            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
01FA E0        1228            movx    a,@dptr
01FB 905A48    1229            mov     dptr,#_dig_x2
01FE F0        1230            movx    @dptr,a
01FF           1231   ;        main.c:283: dig_y2 = (int8_t) trim_xyz_data[3]; 
01FF 90D0FB    1232            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0202 E0        1233            movx    a,@dptr
0203 9059C8    1234            mov     dptr,#_dig_y2
0206 F0        1235            movx    @dptr,a
0207           1236   ;        main.c:297: dig_xy1 = trim_xy1xy2[9];
0207 90D161    1237            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
020A E0        1238            movx    a,@dptr
020B 905888    1239            mov     dptr,#_dig_xy1
020E F0        1240            movx    @dptr,a
020F           1241   ;        main.c:298: dig_xy2 = (int8_t)trim_xy1xy2[8];
020F 90D160    1242            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0212 E0        1243            movx    a,@dptr
0213 905848    1244            mov     dptr,#_dig_xy2
0216 F0        1245            movx    @dptr,a
0217           1246   ;        main.c:300: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
0217 90D15D    1247            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
021A E0        1248            movx    a,@dptr
021B FA        1249            mov     r2,a
021C 53027F    1250            anl     ar2,#0x7F
021F 8A03      1251            mov     ar3,r2
0221 7A00      1252            mov     r2,#0x00
0223           1253   ;        main.c:301: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
0223 90D15C    1254            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0226 E0        1255            movx    a,@dptr
0227 FC        1256            mov     r4,a
0228 7D00      1257            mov     r5,#0x00
022A 905808    1258            mov     dptr,#_dig_xyz1
022D EC        1259            mov     a,r4
022E 4A        1260            orl     a,r2
022F F0        1261            movx    @dptr,a
0230 ED        1262            mov     a,r5
0231 4B        1263            orl     a,r3
0232 A3        1264            inc     dptr
0233 F0        1265            movx    @dptr,a
0234 22        1266            ret
0235           1267   ;------------------------------------------------------------
0235           1268   ;Allocation info for local variables in function 'BMM150_Init'
0235           1269   ;------------------------------------------------------------
0235           1270   ;chip_id                   Allocated with name '_BMM150_Init_chip_id_1_102'
0235           1271   ;------------------------------------------------------------
0235           1272   ;        main.c:305: void BMM150_Init(void)
0235           1273   ;        -----------------------------------------
0235           1274   ;         function BMM150_Init
0235           1275   ;        -----------------------------------------
0235           1276   _BMM150_Init:
0235           1277   ;        main.c:310: CS = 1; // Deselect BMM150
0235 D290      1278            setb    _P1_0
0237           1279   ;        main.c:313: waitms(10);
0237 90000A    1280            mov     dptr,#0x000A
023A 120000    1281            lcall   _waitms
023D           1282   ;        main.c:316: SPI_write(BMM150_POWER_CONTROL, 0x82);
023D 755882    1283            mov     _SPI_write_PARM_2,#0x82
0240 75824B    1284            mov     dpl,#0x4B
0243 120000    1285            lcall   _SPI_write
0246           1286   ;        main.c:317: waitms(10);  // Wait for reset to complete
0246 90000A    1287            mov     dptr,#0x000A
0249 120000    1288            lcall   _waitms
024C           1289   ;        main.c:320: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
024C 755801    1290            mov     _SPI_write_PARM_2,#0x01
024F 75824B    1291            mov     dpl,#0x4B
0252 120000    1292            lcall   _SPI_write
0255           1293   ;        main.c:321: waitms(5);
0255 900005    1294            mov     dptr,#0x0005
0258 120000    1295            lcall   _waitms
025B           1296   ;        main.c:324: chip_id = SPI_read(BMM150_CHIP_ID);
025B 758240    1297            mov     dpl,#0x40
025E 120000    1298            lcall   _SPI_read
0261 AA82      1299            mov     r2,dpl
0263           1300   ;        main.c:325: if (chip_id != BMM150_CHIP_ID_VALUE)
0263 BA32B8    1301            cjne    r2,#0x32,L009011?
0266 8000      1302            sjmp    L009005?
0268           1303   L009011?:
0268           1304   ;        main.c:327: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
0268 8A03      1305            mov     ar3,r2
026A 7C00      1306            mov     r4,#0x00
026C C003      1307            push    ar3
026E C004      1308            push    ar4
0270 7438      1309            mov     a,#__str_0
0272 C0E0      1310            push    acc
0274 74E0      1311            mov     a,#(__str_0 >> 8)
0276 C0E0      1312            push    acc
0278 7480      1313            mov     a,#0x80
027A C0E0      1314            push    acc
027C 120000    1315            lcall   _printf
027F E581      1316            mov     a,sp
0281 24FB      1317            add     a,#0xfb
0283 F581      1318            mov     sp,a
0285           1319   ;        main.c:328: while (1) {
0285           1320   L009002?:
0285           1321   ;        main.c:329: printf("Press restart to check again!\r");
0285 7438      1322            mov     a,#__str_1
0287 C0E0      1323            push    acc
0289 74E1      1324            mov     a,#(__str_1 >> 8)
028B C0E0      1325            push    acc
028D 7480      1326            mov     a,#0x80
028F C0E0      1327            push    acc
0291 120000    1328            lcall   _printf
0294 1581      1329            dec     sp
0296 1581      1330            dec     sp
0298 1581      1331            dec     sp
029A 8000      1332            sjmp    L009002?
029C           1333   L009005?:
029C           1334   ;        main.c:333: printf("DONE! Chip ID = 0x%02X\r\n", chip_id);
029C 7B00      1335            mov     r3,#0x00
029E C002      1336            push    ar2
02A0 C003      1337            push    ar3
02A2 C002      1338            push    ar2
02A4 C003      1339            push    ar3
02A6 7478      1340            mov     a,#__str_2
02A8 C0E0      1341            push    acc
02AA 74E1      1342            mov     a,#(__str_2 >> 8)
02AC C0E0      1343            push    acc
02AE 7480      1344            mov     a,#0x80
02B0 C0E0      1345            push    acc
02B2 120000    1346            lcall   _printf
02B5 E581      1347            mov     a,sp
02B7 24FB      1348            add     a,#0xfb
02B9 F581      1349            mov     sp,a
02BB           1350   ;        main.c:337: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
02BB 755800    1351            mov     _SPI_write_PARM_2,#0x00
02BE 75824C    1352            mov     dpl,#0x4C
02C1 120000    1353            lcall   _SPI_write
02C4           1354   ;        main.c:340: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
02C4 75587F    1355            mov     _SPI_write_PARM_2,#0x7F
02C7 758251    1356            mov     dpl,#0x51
02CA 120000    1357            lcall   _SPI_write
02CD           1358   ;        main.c:341: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
02CD 75580E    1359            mov     _SPI_write_PARM_2,#0x0E
02D0 758252    1360            mov     dpl,#0x52
02D3 120000    1361            lcall   _SPI_write
02D6           1362   ;        main.c:343: BMM150_Read_Trim_Registers();
02D6 120000    1363            lcall   _BMM150_Read_Trim_Registers
02D9           1364   ;        main.c:345: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
02D9 74B8      1365            mov     a,#__str_3
02DB C0E0      1366            push    acc
02DD 74E1      1367            mov     a,#(__str_3 >> 8)
02DF C0E0      1368            push    acc
02E1 7480      1369            mov     a,#0x80
02E3 C0E0      1370            push    acc
02E5 120000    1371            lcall   _printf
02E8 E581      1372            mov     a,sp
02EA 24FB      1373            add     a,#0xfb
02EC F581      1374            mov     sp,a
02EE           1375   ;        main.c:346: return; 
02EE 22        1376            ret
02EF           1377   ;------------------------------------------------------------
02EF           1378   ;Allocation info for local variables in function 'BMM150_compensate_x'
02EF           1379   ;------------------------------------------------------------
02EF           1380   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
02EF           1381   ;mag_data_x                Allocated to registers r2 r3 r4 
02EF           1382   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
02EF           1383   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_107'
02EF           1384   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_107'
02EF           1385   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_107'
02EF           1386   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_107'
02EF           1387   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_107'
02EF           1388   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_107'
02EF           1389   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_107'
02EF           1390   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_107'
02EF           1391   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_107'
02EF           1392   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_107'
02EF           1393   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_107'
02EF           1394   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_107'
02EF           1395   ;------------------------------------------------------------
02EF           1396   ;        main.c:349: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
02EF           1397   ;        -----------------------------------------
02EF           1398   ;         function BMM150_compensate_x
02EF           1399   ;        -----------------------------------------
02EF           1400   _BMM150_compensate_x:
02EF           1401   ;        main.c:367: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
02EF ACF0      1402            mov     r4,b
02F1 120000    1403            lcall   __gptrget
02F4 FA        1404            mov     r2,a
02F5 A3        1405            inc     dptr
02F6 120000    1406            lcall   __gptrget
02F9 FB        1407            mov     r3,a
02FA BA0078    1408            cjne    r2,#0x00,L010019?
02FD BBF078    1409            cjne    r3,#0xF0,L010019?
0300 020000    1410            ljmp    L010011?
0303           1411   L010019?:
0303           1412   ;        main.c:368: if (*data_rhall != 0)
0303 AC08      1413            mov     r4,_BMM150_compensate_x_PARM_2
0305 AD09      1414            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
0307 AE0A      1415            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
0309 8C82      1416            mov     dpl,r4
030B 8D83      1417            mov     dph,r5
030D 8EF0      1418            mov     b,r6
030F 120000    1419            lcall   __gptrget
0312 FC        1420            mov     r4,a
0313 A3        1421            inc     dptr
0314 120000    1422            lcall   __gptrget
0317 FD        1423            mov     r5,a
0318 4C        1424            orl     a,r4
0319 6000      1425            jz      L010005?
031B           1426   ;        main.c:371: process_comp_x0 = *data_rhall;
031B 90D218    1427            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
031E EC        1428            mov     a,r4
031F F0        1429            movx    @dptr,a
0320 A3        1430            inc     dptr
0321 ED        1431            mov     a,r5
0322 F0        1432            movx    @dptr,a
0323 8000      1433            sjmp    L010006?
0325           1434   L010005?:
0325           1435   ;        main.c:373: else if (dig_xyz1 != 0)
0325 905808    1436            mov     dptr,#_dig_xyz1
0328 E0        1437            movx    a,@dptr
0329 FC        1438            mov     r4,a
032A A3        1439            inc     dptr
032B E0        1440            movx    a,@dptr
032C FD        1441            mov     r5,a
032D 4C        1442            orl     a,r4
032E 6000      1443            jz      L010002?
0330           1444   ;        main.c:375: process_comp_x0 = dig_xyz1;
0330 90D218    1445            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
0333 EC        1446            mov     a,r4
0334 F0        1447            movx    @dptr,a
0335 A3        1448            inc     dptr
0336 ED        1449            mov     a,r5
0337 F0        1450            movx    @dptr,a
0338 8000      1451            sjmp    L010006?
033A           1452   L010002?:
033A           1453   ;        main.c:379: process_comp_x0 = 0;
033A 90D218    1454            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
033D E4        1455            clr     a
033E F0        1456            movx    @dptr,a
033F A3        1457            inc     dptr
0340 F0        1458            movx    @dptr,a
0341           1459   L010006?:
0341           1460   ;        main.c:381: if (process_comp_x0 != 0)
0341 90D218    1461            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
0344 E0        1462            movx    a,@dptr
0345 FC        1463            mov     r4,a
0346 A3        1464            inc     dptr
0347 E0        1465            movx    a,@dptr
0348 FD        1466            mov     r5,a
0349 4C        1467            orl     a,r4
034A 7000      1468            jnz     L010022?
034C 020000    1469            ljmp    L010008?
034F           1470   L010022?:
034F           1471   ;        main.c:384: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
034F 905808    1472            mov     dptr,#_dig_xyz1
0352 E0        1473            movx    a,@dptr
0353 FE        1474            mov     r6,a
0354 A3        1475            inc     dptr
0355 E0        1476            movx    a,@dptr
0356 FF        1477            mov     r7,a
0357 E4        1478            clr     a
0358 F8        1479            mov     r0,a
0359 EF        1480            mov     a,r7
035A C8        1481            xch     a,r0
035B 5403      1482            anl     a,#0x03
035D A2E0      1483            mov     c,acc.0
035F C8        1484            xch     a,r0
0360 13        1485            rrc     a
0361 C8        1486            xch     a,r0
0362 13        1487            rrc     a
0363 A2E0      1488            mov     c,acc.0
0365 C8        1489            xch     a,r0
0366 13        1490            rrc     a
0367 C8        1491            xch     a,r0
0368 13        1492            rrc     a
0369 C8        1493            xch     a,r0
036A F9        1494            mov     r1,a
036B EE        1495            mov     a,r6
036C 03        1496            rr      a
036D 03        1497            rr      a
036E 54C0      1498            anl     a,#0xc0
0370 FF        1499            mov     r7,a
0371 EE        1500            mov     a,r6
0372 03        1501            rr      a
0373 03        1502            rr      a
0374 543F      1503            anl     a,#0x3f
0376 48        1504            orl     a,r0
0377 F8        1505            mov     r0,a
0378 7E00      1506            mov     r6,#0x00
037A           1507   ;        main.c:385: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
037A 8C00      1508            mov     __divslong_PARM_2,r4
037C 8D01      1509            mov     (__divslong_PARM_2 + 1),r5
037E 750200    1510            mov     (__divslong_PARM_2 + 2),#0x00
0381 750300    1511            mov     (__divslong_PARM_2 + 3),#0x00
0384 8E82      1512            mov     dpl,r6
0386 8F83      1513            mov     dph,r7
0388 88F0      1514            mov     b,r0
038A E9        1515            mov     a,r1
038B C002      1516            push    ar2
038D C003      1517            push    ar3
038F 120000    1518            lcall   __divslong
0392 AC82      1519            mov     r4,dpl
0394 E583      1520            mov     a,dph
0396 24C0      1521            add     a,#0xc0
0398 FD        1522            mov     r5,a
0399           1523   ;        main.c:387: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
0399 8C06      1524            mov     ar6,r4
039B 8D07      1525            mov     ar7,r5
039D 8E68      1526            mov     _BMM150_compensate_x_sloc0_1_0,r6
039F EF        1527            mov     a,r7
03A0 F569      1528            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
03A2 33        1529            rlc     a
03A3 95E0      1530            subb    a,acc
03A5 F56A      1531            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
03A7 F56B      1532            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03A9 8C06      1533            mov     ar6,r4
03AB 8D07      1534            mov     ar7,r5
03AD 8E00      1535            mov     __mullong_PARM_2,r6
03AF EF        1536            mov     a,r7
03B0 F501      1537            mov     (__mullong_PARM_2 + 1),a
03B2 33        1538            rlc     a
03B3 95E0      1539            subb    a,acc
03B5 F502      1540            mov     (__mullong_PARM_2 + 2),a
03B7 F503      1541            mov     (__mullong_PARM_2 + 3),a
03B9           1542   ;        main.c:388: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
03B9 856882    1543            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03BC 856983    1544            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03BF 856AF0    1545            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03C2 E56B      1546            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03C4 C004      1547            push    ar4
03C6 C005      1548            push    ar5
03C8 120000    1549            lcall   __mullong
03CB 858268    1550            mov     _BMM150_compensate_x_sloc0_1_0,dpl
03CE 858369    1551            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
03D1 85F06A    1552            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
03D4 F56B      1553            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03D6 905848    1554            mov     dptr,#_dig_xy2
03D9 E0        1555            movx    a,@dptr
03DA FE        1556            mov     r6,a
03DB 33        1557            rlc     a
03DC 95E0      1558            subb    a,acc
03DE FF        1559            mov     r7,a
03DF F8        1560            mov     r0,a
03E0 F9        1561            mov     r1,a
03E1 750080    1562            mov     __divslong_PARM_2,#0x80
03E4 E4        1563            clr     a
03E5 F501      1564            mov     (__divslong_PARM_2 + 1),a
03E7 F502      1565            mov     (__divslong_PARM_2 + 2),a
03E9 F503      1566            mov     (__divslong_PARM_2 + 3),a
03EB 856882    1567            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03EE 856983    1568            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03F1 856AF0    1569            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03F4 E56B      1570            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03F6 C006      1571            push    ar6
03F8 C007      1572            push    ar7
03FA C000      1573            push    ar0
03FC C001      1574            push    ar1
03FE 120000    1575            lcall   __divslong
0401 858200    1576            mov     __mullong_PARM_2,dpl
0404 858301    1577            mov     (__mullong_PARM_2 + 1),dph
0407 85F002    1578            mov     (__mullong_PARM_2 + 2),b
040A F503      1579            mov     (__mullong_PARM_2 + 3),a
040C D001      1580            pop     ar1
040E D000      1581            pop     ar0
0410 D007      1582            pop     ar7
0412 D006      1583            pop     ar6
0414           1584   ;        main.c:389: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
0414 8E82      1585            mov     dpl,r6
0416 8F83      1586            mov     dph,r7
0418 88F0      1587            mov     b,r0
041A E9        1588            mov     a,r1
041B 120000    1589            lcall   __mullong
041E 858268    1590            mov     _BMM150_compensate_x_sloc0_1_0,dpl
0421 858369    1591            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
0424 85F06A    1592            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
0427 F56B      1593            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
0429 D005      1594            pop     ar5
042B D004      1595            pop     ar4
042D 905888    1596            mov     dptr,#_dig_xy1
0430 E0        1597            movx    a,@dptr
0431 FE        1598            mov     r6,a
0432 E4        1599            clr     a
0433 5401      1600            anl     a,#0x01
0435 A2E0      1601            mov     c,acc.0
0437 CE        1602            xch     a,r6
0438 13        1603            rrc     a
0439 CE        1604            xch     a,r6
043A 13        1605            rrc     a
043B CE        1606            xch     a,r6
043C 8E00      1607            mov     __mullong_PARM_2,r6
043E F501      1608            mov     (__mullong_PARM_2 + 1),a
0440 33        1609            rlc     a
0441 95E0      1610            subb    a,acc
0443 F502      1611            mov     (__mullong_PARM_2 + 2),a
0445 F503      1612            mov     (__mullong_PARM_2 + 3),a
0447           1613   ;        main.c:390: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
0447 ED        1614            mov     a,r5
0448 33        1615            rlc     a
0449 95E0      1616            subb    a,acc
044B FE        1617            mov     r6,a
044C           1618   ;        main.c:391: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
044C 8C82      1619            mov     dpl,r4
044E 8D83      1620            mov     dph,r5
0450 8EF0      1621            mov     b,r6
0452 120000    1622            lcall   __mullong
0455 AC82      1623            mov     r4,dpl
0457 AD83      1624            mov     r5,dph
0459 AEF0      1625            mov     r6,b
045B FF        1626            mov     r7,a
045C EC        1627            mov     a,r4
045D 2568      1628            add     a,_BMM150_compensate_x_sloc0_1_0
045F FC        1629            mov     r4,a
0460 ED        1630            mov     a,r5
0461 3569      1631            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
0463 FD        1632            mov     r5,a
0464 EE        1633            mov     a,r6
0465 356A      1634            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
0467 FE        1635            mov     r6,a
0468 EF        1636            mov     a,r7
0469 356B      1637            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
046B FF        1638            mov     r7,a
046C 750000    1639            mov     __divslong_PARM_2,#0x00
046F 750102    1640            mov     (__divslong_PARM_2 + 1),#0x02
0472 750200    1641            mov     (__divslong_PARM_2 + 2),#0x00
0475 750300    1642            mov     (__divslong_PARM_2 + 3),#0x00
0478 8C82      1643            mov     dpl,r4
047A 8D83      1644            mov     dph,r5
047C 8EF0      1645            mov     b,r6
047E EF        1646            mov     a,r7
047F 120000    1647            lcall   __divslong
0482 AC82      1648            mov     r4,dpl
0484 AD83      1649            mov     r5,dph
0486 AEF0      1650            mov     r6,b
0488 FF        1651            mov     r7,a
0489 7410      1652            mov     a,#0x10
048B 2E        1653            add     a,r6
048C FE        1654            mov     r6,a
048D E4        1655            clr     a
048E 3F        1656            addc    a,r7
048F FF        1657            mov     r7,a
0490           1658   ;        main.c:392: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
0490 905A48    1659            mov     dptr,#_dig_x2
0493 E0        1660            movx    a,@dptr
0494 F8        1661            mov     r0,a
0495 33        1662            rlc     a
0496 95E0      1663            subb    a,acc
0498 F9        1664            mov     r1,a
0499 74A0      1665            mov     a,#0xA0
049B 28        1666            add     a,r0
049C F8        1667            mov     r0,a
049D E4        1668            clr     a
049E 39        1669            addc    a,r1
049F 8800      1670            mov     __mullong_PARM_2,r0
04A1 F501      1671            mov     (__mullong_PARM_2 + 1),a
04A3 33        1672            rlc     a
04A4 95E0      1673            subb    a,acc
04A6 F502      1674            mov     (__mullong_PARM_2 + 2),a
04A8 F503      1675            mov     (__mullong_PARM_2 + 3),a
04AA           1676   ;        main.c:393: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
04AA 8C82      1677            mov     dpl,r4
04AC 8D83      1678            mov     dph,r5
04AE 8EF0      1679            mov     b,r6
04B0 EF        1680            mov     a,r7
04B1 120000    1681            lcall   __mullong
04B4           1682   ;        main.c:394: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
04B4 750000    1683            mov     __divslong_PARM_2,#0x00
04B7 750110    1684            mov     (__divslong_PARM_2 + 1),#0x10
04BA 750200    1685            mov     (__divslong_PARM_2 + 2),#0x00
04BD 750300    1686            mov     (__divslong_PARM_2 + 3),#0x00
04C0 120000    1687            lcall   __divslong
04C3 858200    1688            mov     __mullong_PARM_2,dpl
04C6 858301    1689            mov     (__mullong_PARM_2 + 1),dph
04C9 85F002    1690            mov     (__mullong_PARM_2 + 2),b
04CC F503      1691            mov     (__mullong_PARM_2 + 3),a
04CE D003      1692            pop     ar3
04D0 D002      1693            pop     ar2
04D2 EB        1694            mov     a,r3
04D3 33        1695            rlc     a
04D4 95E0      1696            subb    a,acc
04D6 FC        1697            mov     r4,a
04D7           1698   ;        main.c:395: retval = ((int16_t)(process_comp_x10 / 8192));
04D7 8A82      1699            mov     dpl,r2
04D9 8B83      1700            mov     dph,r3
04DB 8CF0      1701            mov     b,r4
04DD 120000    1702            lcall   __mullong
04E0 750000    1703            mov     __divslong_PARM_2,#0x00
04E3 750120    1704            mov     (__divslong_PARM_2 + 1),#0x20
04E6 750200    1705            mov     (__divslong_PARM_2 + 2),#0x00
04E9 750300    1706            mov     (__divslong_PARM_2 + 3),#0x00
04EC 120000    1707            lcall   __divslong
04EF AA82      1708            mov     r2,dpl
04F1 AB83      1709            mov     r3,dph
04F3           1710   ;        main.c:396: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
04F3 905A88    1711            mov     dptr,#_dig_x1
04F6 E0        1712            movx    a,@dptr
04F7 FC        1713            mov     r4,a
04F8 33        1714            rlc     a
04F9 95E0      1715            subb    a,acc
04FB C4        1716            swap    a
04FC 03        1717            rr      a
04FD 54F8      1718            anl     a,#0xf8
04FF CC        1719            xch     a,r4
0500 C4        1720            swap    a
0501 03        1721            rr      a
0502 CC        1722            xch     a,r4
0503 6C        1723            xrl     a,r4
0504 CC        1724            xch     a,r4
0505 54F8      1725            anl     a,#0xf8
0507 CC        1726            xch     a,r4
0508 6C        1727            xrl     a,r4
0509 FD        1728            mov     r5,a
050A EC        1729            mov     a,r4
050B 2A        1730            add     a,r2
050C F582      1731            mov     dpl,a
050E ED        1732            mov     a,r5
050F 3B        1733            addc    a,r3
0510 F583      1734            mov     dph,a
0512 750010    1735            mov     __divsint_PARM_2,#0x10
0515 E4        1736            clr     a
0516 F501      1737            mov     (__divsint_PARM_2 + 1),a
0518 120000    1738            lcall   __divsint
051B E582      1739            mov     a,dpl
051D 8583F0    1740            mov     b,dph
0520 90D1B8    1741            mov     dptr,#_BMM150_compensate_x_retval_1_107
0523 F0        1742            movx    @dptr,a
0524 A3        1743            inc     dptr
0525 E5F0      1744            mov     a,b
0527 F0        1745            movx    @dptr,a
0528 8000      1746            sjmp    L010012?
052A           1747   L010008?:
052A           1748   ;        main.c:399: retval = BMM150_OVERFLOW_OUTPUT; 
052A 90D1B8    1749            mov     dptr,#_BMM150_compensate_x_retval_1_107
052D E4        1750            clr     a
052E F0        1751            movx    @dptr,a
052F A3        1752            inc     dptr
0530 7480      1753            mov     a,#0x80
0532 F0        1754            movx    @dptr,a
0533 8000      1755            sjmp    L010012?
0535           1756   L010011?:
0535           1757   ;        main.c:403: retval = BMM150_OVERFLOW_OUTPUT; 
0535 90D1B8    1758            mov     dptr,#_BMM150_compensate_x_retval_1_107
0538 E4        1759            clr     a
0539 F0        1760            movx    @dptr,a
053A A3        1761            inc     dptr
053B 7480      1762            mov     a,#0x80
053D F0        1763            movx    @dptr,a
053E           1764   L010012?:
053E           1765   ;        main.c:405: return retval; 
053E 90D1B8    1766            mov     dptr,#_BMM150_compensate_x_retval_1_107
0541 E0        1767            movx    a,@dptr
0542 FA        1768            mov     r2,a
0543 A3        1769            inc     dptr
0544 E0        1770            movx    a,@dptr
0545 8A82      1771            mov     dpl,r2
0547 F583      1772            mov     dph,a
0549 22        1773            ret
054A           1774   ;------------------------------------------------------------
054A           1775   ;Allocation info for local variables in function 'BMM150_compensate_y'
054A           1776   ;------------------------------------------------------------
054A           1777   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
054A           1778   ;mag_data_y                Allocated to registers r2 r3 r4 
054A           1779   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
054A           1780   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_116'
054A           1781   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_116'
054A           1782   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_116'
054A           1783   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_116'
054A           1784   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_116'
054A           1785   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_116'
054A           1786   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_116'
054A           1787   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_116'
054A           1788   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_116'
054A           1789   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_116'
054A           1790   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_116'
054A           1791   ;------------------------------------------------------------
054A           1792   ;        main.c:408: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
054A           1793   ;        -----------------------------------------
054A           1794   ;         function BMM150_compensate_y
054A           1795   ;        -----------------------------------------
054A           1796   _BMM150_compensate_y:
054A           1797   ;        main.c:426: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
054A ACF0      1798            mov     r4,b
054C 120000    1799            lcall   __gptrget
054F FA        1800            mov     r2,a
0550 A3        1801            inc     dptr
0551 120000    1802            lcall   __gptrget
0554 FB        1803            mov     r3,a
0555 BA0028    1804            cjne    r2,#0x00,L011019?
0558 BBF028    1805            cjne    r3,#0xF0,L011019?
055B 020000    1806            ljmp    L011011?
055E           1807   L011019?:
055E           1808   ;        main.c:428: if (*data_rhall != 0)
055E ACB8      1809            mov     r4,_BMM150_compensate_y_PARM_2
0560 ADB9      1810            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
0562 AEBA      1811            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
0564 8C82      1812            mov     dpl,r4
0566 8D83      1813            mov     dph,r5
0568 8EF0      1814            mov     b,r6
056A 120000    1815            lcall   __gptrget
056D FC        1816            mov     r4,a
056E A3        1817            inc     dptr
056F 120000    1818            lcall   __gptrget
0572 FD        1819            mov     r5,a
0573 4C        1820            orl     a,r4
0574 6000      1821            jz      L011005?
0576           1822   ;        main.c:431: process_comp_y0 = *data_rhall;
0576 90D2D8    1823            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
0579 EC        1824            mov     a,r4
057A F0        1825            movx    @dptr,a
057B A3        1826            inc     dptr
057C ED        1827            mov     a,r5
057D F0        1828            movx    @dptr,a
057E 8000      1829            sjmp    L011006?
0580           1830   L011005?:
0580           1831   ;        main.c:433: else if (dig_xyz1 != 0)
0580 905808    1832            mov     dptr,#_dig_xyz1
0583 E0        1833            movx    a,@dptr
0584 FC        1834            mov     r4,a
0585 A3        1835            inc     dptr
0586 E0        1836            movx    a,@dptr
0587 FD        1837            mov     r5,a
0588 4C        1838            orl     a,r4
0589 6000      1839            jz      L011002?
058B           1840   ;        main.c:435: process_comp_y0 = dig_xyz1;
058B 90D2D8    1841            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
058E EC        1842            mov     a,r4
058F F0        1843            movx    @dptr,a
0590 A3        1844            inc     dptr
0591 ED        1845            mov     a,r5
0592 F0        1846            movx    @dptr,a
0593 8000      1847            sjmp    L011006?
0595           1848   L011002?:
0595           1849   ;        main.c:439: process_comp_y0 = 0;
0595 90D2D8    1850            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
0598 E4        1851            clr     a
0599 F0        1852            movx    @dptr,a
059A A3        1853            inc     dptr
059B F0        1854            movx    @dptr,a
059C           1855   L011006?:
059C           1856   ;        main.c:442: if (process_comp_y0 != 0)
059C 90D2D8    1857            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
059F E0        1858            movx    a,@dptr
05A0 FC        1859            mov     r4,a
05A1 A3        1860            inc     dptr
05A2 E0        1861            movx    a,@dptr
05A3 FD        1862            mov     r5,a
05A4 4C        1863            orl     a,r4
05A5 7000      1864            jnz     L011022?
05A7 020000    1865            ljmp    L011008?
05AA           1866   L011022?:
05AA           1867   ;        main.c:445: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
05AA 905808    1868            mov     dptr,#_dig_xyz1
05AD E0        1869            movx    a,@dptr
05AE FE        1870            mov     r6,a
05AF A3        1871            inc     dptr
05B0 E0        1872            movx    a,@dptr
05B1 FF        1873            mov     r7,a
05B2 E4        1874            clr     a
05B3 F8        1875            mov     r0,a
05B4 EF        1876            mov     a,r7
05B5 C8        1877            xch     a,r0
05B6 5403      1878            anl     a,#0x03
05B8 A2E0      1879            mov     c,acc.0
05BA C8        1880            xch     a,r0
05BB 13        1881            rrc     a
05BC C8        1882            xch     a,r0
05BD 13        1883            rrc     a
05BE A2E0      1884            mov     c,acc.0
05C0 C8        1885            xch     a,r0
05C1 13        1886            rrc     a
05C2 C8        1887            xch     a,r0
05C3 13        1888            rrc     a
05C4 C8        1889            xch     a,r0
05C5 F9        1890            mov     r1,a
05C6 EE        1891            mov     a,r6
05C7 03        1892            rr      a
05C8 03        1893            rr      a
05C9 54C0      1894            anl     a,#0xc0
05CB FF        1895            mov     r7,a
05CC EE        1896            mov     a,r6
05CD 03        1897            rr      a
05CE 03        1898            rr      a
05CF 543F      1899            anl     a,#0x3f
05D1 48        1900            orl     a,r0
05D2 F8        1901            mov     r0,a
05D3 7E00      1902            mov     r6,#0x00
05D5 8C00      1903            mov     __divslong_PARM_2,r4
05D7 8D01      1904            mov     (__divslong_PARM_2 + 1),r5
05D9 750200    1905            mov     (__divslong_PARM_2 + 2),#0x00
05DC 750300    1906            mov     (__divslong_PARM_2 + 3),#0x00
05DF           1907   ;        main.c:446: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
05DF 8E82      1908            mov     dpl,r6
05E1 8F83      1909            mov     dph,r7
05E3 88F0      1910            mov     b,r0
05E5 E9        1911            mov     a,r1
05E6 C002      1912            push    ar2
05E8 C003      1913            push    ar3
05EA 120000    1914            lcall   __divslong
05ED AC82      1915            mov     r4,dpl
05EF E583      1916            mov     a,dph
05F1 24C0      1917            add     a,#0xc0
05F3 FD        1918            mov     r5,a
05F4           1919   ;        main.c:448: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
05F4 8C06      1920            mov     ar6,r4
05F6 8D07      1921            mov     ar7,r5
05F8 8EB8      1922            mov     _BMM150_compensate_y_sloc0_1_0,r6
05FA EF        1923            mov     a,r7
05FB F5B9      1924            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
05FD 33        1925            rlc     a
05FE 95E0      1926            subb    a,acc
0600 F5BA      1927            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
0602 F5BB      1928            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0604 8C06      1929            mov     ar6,r4
0606 8D07      1930            mov     ar7,r5
0608 8E00      1931            mov     __mullong_PARM_2,r6
060A EF        1932            mov     a,r7
060B F501      1933            mov     (__mullong_PARM_2 + 1),a
060D 33        1934            rlc     a
060E 95E0      1935            subb    a,acc
0610 F502      1936            mov     (__mullong_PARM_2 + 2),a
0612 F503      1937            mov     (__mullong_PARM_2 + 3),a
0614           1938   ;        main.c:449: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
0614 85B882    1939            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0617 85B983    1940            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
061A 85BAF0    1941            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
061D E5BB      1942            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
061F C004      1943            push    ar4
0621 C005      1944            push    ar5
0623 120000    1945            lcall   __mullong
0626 8582B8    1946            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0629 8583B9    1947            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
062C 85F0BA    1948            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
062F F5BB      1949            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0631 905848    1950            mov     dptr,#_dig_xy2
0634 E0        1951            movx    a,@dptr
0635 FE        1952            mov     r6,a
0636 33        1953            rlc     a
0637 95E0      1954            subb    a,acc
0639 FF        1955            mov     r7,a
063A F8        1956            mov     r0,a
063B F9        1957            mov     r1,a
063C 750080    1958            mov     __divslong_PARM_2,#0x80
063F E4        1959            clr     a
0640 F501      1960            mov     (__divslong_PARM_2 + 1),a
0642 F502      1961            mov     (__divslong_PARM_2 + 2),a
0644 F503      1962            mov     (__divslong_PARM_2 + 3),a
0646 85B882    1963            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0649 85B983    1964            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
064C 85BAF0    1965            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
064F E5BB      1966            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
0651 C006      1967            push    ar6
0653 C007      1968            push    ar7
0655 C000      1969            push    ar0
0657 C001      1970            push    ar1
0659 120000    1971            lcall   __divslong
065C 858200    1972            mov     __mullong_PARM_2,dpl
065F 858301    1973            mov     (__mullong_PARM_2 + 1),dph
0662 85F002    1974            mov     (__mullong_PARM_2 + 2),b
0665 F503      1975            mov     (__mullong_PARM_2 + 3),a
0667 D001      1976            pop     ar1
0669 D000      1977            pop     ar0
066B D007      1978            pop     ar7
066D D006      1979            pop     ar6
066F           1980   ;        main.c:450: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
066F 8E82      1981            mov     dpl,r6
0671 8F83      1982            mov     dph,r7
0673 88F0      1983            mov     b,r0
0675 E9        1984            mov     a,r1
0676 120000    1985            lcall   __mullong
0679 8582B8    1986            mov     _BMM150_compensate_y_sloc0_1_0,dpl
067C 8583B9    1987            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
067F 85F0BA    1988            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
0682 F5BB      1989            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0684 D005      1990            pop     ar5
0686 D004      1991            pop     ar4
0688 905888    1992            mov     dptr,#_dig_xy1
068B E0        1993            movx    a,@dptr
068C FE        1994            mov     r6,a
068D E4        1995            clr     a
068E 5401      1996            anl     a,#0x01
0690 A2E0      1997            mov     c,acc.0
0692 CE        1998            xch     a,r6
0693 13        1999            rrc     a
0694 CE        2000            xch     a,r6
0695 13        2001            rrc     a
0696 CE        2002            xch     a,r6
0697 8E00      2003            mov     __mullong_PARM_2,r6
0699 F501      2004            mov     (__mullong_PARM_2 + 1),a
069B 33        2005            rlc     a
069C 95E0      2006            subb    a,acc
069E F502      2007            mov     (__mullong_PARM_2 + 2),a
06A0 F503      2008            mov     (__mullong_PARM_2 + 3),a
06A2           2009   ;        main.c:451: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
06A2 ED        2010            mov     a,r5
06A3 33        2011            rlc     a
06A4 95E0      2012            subb    a,acc
06A6 FE        2013            mov     r6,a
06A7 8C82      2014            mov     dpl,r4
06A9 8D83      2015            mov     dph,r5
06AB 8EF0      2016            mov     b,r6
06AD 120000    2017            lcall   __mullong
06B0 AC82      2018            mov     r4,dpl
06B2 AD83      2019            mov     r5,dph
06B4 AEF0      2020            mov     r6,b
06B6 FF        2021            mov     r7,a
06B7 EC        2022            mov     a,r4
06B8 25B8      2023            add     a,_BMM150_compensate_y_sloc0_1_0
06BA FC        2024            mov     r4,a
06BB ED        2025            mov     a,r5
06BC 35B9      2026            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
06BE FD        2027            mov     r5,a
06BF EE        2028            mov     a,r6
06C0 35BA      2029            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
06C2 FE        2030            mov     r6,a
06C3 EF        2031            mov     a,r7
06C4 35BB      2032            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
06C6 FF        2033            mov     r7,a
06C7 750000    2034            mov     __divslong_PARM_2,#0x00
06CA 750102    2035            mov     (__divslong_PARM_2 + 1),#0x02
06CD 750200    2036            mov     (__divslong_PARM_2 + 2),#0x00
06D0 750300    2037            mov     (__divslong_PARM_2 + 3),#0x00
06D3           2038   ;        main.c:452: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
06D3 8C82      2039            mov     dpl,r4
06D5 8D83      2040            mov     dph,r5
06D7 8EF0      2041            mov     b,r6
06D9 EF        2042            mov     a,r7
06DA 120000    2043            lcall   __divslong
06DD AC82      2044            mov     r4,dpl
06DF AD83      2045            mov     r5,dph
06E1 AEF0      2046            mov     r6,b
06E3 FF        2047            mov     r7,a
06E4 9059C8    2048            mov     dptr,#_dig_y2
06E7 E0        2049            movx    a,@dptr
06E8 F8        2050            mov     r0,a
06E9 33        2051            rlc     a
06EA 95E0      2052            subb    a,acc
06EC F9        2053            mov     r1,a
06ED 74A0      2054            mov     a,#0xA0
06EF 28        2055            add     a,r0
06F0 F8        2056            mov     r0,a
06F1 E4        2057            clr     a
06F2 39        2058            addc    a,r1
06F3 8800      2059            mov     __mullong_PARM_2,r0
06F5 F501      2060            mov     (__mullong_PARM_2 + 1),a
06F7 33        2061            rlc     a
06F8 95E0      2062            subb    a,acc
06FA F502      2063            mov     (__mullong_PARM_2 + 2),a
06FC F503      2064            mov     (__mullong_PARM_2 + 3),a
06FE           2065   ;        main.c:453: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
06FE 7410      2066            mov     a,#0x10
0700 2E        2067            add     a,r6
0701 FE        2068            mov     r6,a
0702 E4        2069            clr     a
0703 3F        2070            addc    a,r7
0704 8C82      2071            mov     dpl,r4
0706 8D83      2072            mov     dph,r5
0708 8EF0      2073            mov     b,r6
070A 120000    2074            lcall   __mullong
070D           2075   ;        main.c:454: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
070D 750000    2076            mov     __divslong_PARM_2,#0x00
0710 750110    2077            mov     (__divslong_PARM_2 + 1),#0x10
0713 750200    2078            mov     (__divslong_PARM_2 + 2),#0x00
0716 750300    2079            mov     (__divslong_PARM_2 + 3),#0x00
0719 120000    2080            lcall   __divslong
071C 858200    2081            mov     __mullong_PARM_2,dpl
071F 858301    2082            mov     (__mullong_PARM_2 + 1),dph
0722 85F002    2083            mov     (__mullong_PARM_2 + 2),b
0725 F503      2084            mov     (__mullong_PARM_2 + 3),a
0727 D003      2085            pop     ar3
0729 D002      2086            pop     ar2
072B EB        2087            mov     a,r3
072C 33        2088            rlc     a
072D 95E0      2089            subb    a,acc
072F FC        2090            mov     r4,a
0730           2091   ;        main.c:455: retval = (int16_t)(process_comp_y9 / 8192);
0730 8A82      2092            mov     dpl,r2
0732 8B83      2093            mov     dph,r3
0734 8CF0      2094            mov     b,r4
0736 120000    2095            lcall   __mullong
0739 750000    2096            mov     __divslong_PARM_2,#0x00
073C 750120    2097            mov     (__divslong_PARM_2 + 1),#0x20
073F 750200    2098            mov     (__divslong_PARM_2 + 2),#0x00
0742 750300    2099            mov     (__divslong_PARM_2 + 3),#0x00
0745 120000    2100            lcall   __divslong
0748 AA82      2101            mov     r2,dpl
074A AB83      2102            mov     r3,dph
074C           2103   ;        main.c:456: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
074C 905A08    2104            mov     dptr,#_dig_y1
074F E0        2105            movx    a,@dptr
0750 FC        2106            mov     r4,a
0751 33        2107            rlc     a
0752 95E0      2108            subb    a,acc
0754 C4        2109            swap    a
0755 03        2110            rr      a
0756 54F8      2111            anl     a,#0xf8
0758 CC        2112            xch     a,r4
0759 C4        2113            swap    a
075A 03        2114            rr      a
075B CC        2115            xch     a,r4
075C 6C        2116            xrl     a,r4
075D CC        2117            xch     a,r4
075E 54F8      2118            anl     a,#0xf8
0760 CC        2119            xch     a,r4
0761 6C        2120            xrl     a,r4
0762 FD        2121            mov     r5,a
0763 EC        2122            mov     a,r4
0764 2A        2123            add     a,r2
0765 F582      2124            mov     dpl,a
0767 ED        2125            mov     a,r5
0768 3B        2126            addc    a,r3
0769 F583      2127            mov     dph,a
076B 750010    2128            mov     __divsint_PARM_2,#0x10
076E E4        2129            clr     a
076F F501      2130            mov     (__divsint_PARM_2 + 1),a
0771 120000    2131            lcall   __divsint
0774 E582      2132            mov     a,dpl
0776 8583F0    2133            mov     b,dph
0779 90D278    2134            mov     dptr,#_BMM150_compensate_y_retval_1_116
077C F0        2135            movx    @dptr,a
077D A3        2136            inc     dptr
077E E5F0      2137            mov     a,b
0780 F0        2138            movx    @dptr,a
0781 8000      2139            sjmp    L011012?
0783           2140   L011008?:
0783           2141   ;        main.c:460: retval = BMM150_OVERFLOW_OUTPUT;
0783 90D278    2142            mov     dptr,#_BMM150_compensate_y_retval_1_116
0786 E4        2143            clr     a
0787 F0        2144            movx    @dptr,a
0788 A3        2145            inc     dptr
0789 7480      2146            mov     a,#0x80
078B F0        2147            movx    @dptr,a
078C 8000      2148            sjmp    L011012?
078E           2149   L011011?:
078E           2150   ;        main.c:466: retval = BMM150_OVERFLOW_OUTPUT;
078E 90D278    2151            mov     dptr,#_BMM150_compensate_y_retval_1_116
0791 E4        2152            clr     a
0792 F0        2153            movx    @dptr,a
0793 A3        2154            inc     dptr
0794 7480      2155            mov     a,#0x80
0796 F0        2156            movx    @dptr,a
0797           2157   L011012?:
0797           2158   ;        main.c:469: return retval;
0797 90D278    2159            mov     dptr,#_BMM150_compensate_y_retval_1_116
079A E0        2160            movx    a,@dptr
079B FA        2161            mov     r2,a
079C A3        2162            inc     dptr
079D E0        2163            movx    a,@dptr
079E 8A82      2164            mov     dpl,r2
07A0 F583      2165            mov     dph,a
07A2 22        2166            ret
07A3           2167   ;------------------------------------------------------------
07A3           2168   ;Allocation info for local variables in function 'BMM150_Read_Data'
07A3           2169   ;------------------------------------------------------------
07A3           2170   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
07A3           2171   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_124'
07A3           2172   ;raw_x_lsb                 Allocated with name '_BMM150_Read_Data_raw_x_lsb_1_125'
07A3           2173   ;raw_x_msb                 Allocated with name '_BMM150_Read_Data_raw_x_msb_1_125'
07A3           2174   ;raw_y_lsb                 Allocated with name '_BMM150_Read_Data_raw_y_lsb_1_125'
07A3           2175   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_125'
07A3           2176   ;raw_rhall_lsb             Allocated with name '_BMM150_Read_Data_raw_rhall_lsb_1_125'
07A3           2177   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_125'
07A3           2178   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_125'
07A3           2179   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_125'
07A3           2180   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_125'
07A3           2181   ;msb_data                  Allocated with name '_BMM150_Read_Data_msb_data_1_125'
07A3           2182   ;------------------------------------------------------------
07A3           2183   ;        main.c:472: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y)
07A3           2184   ;        -----------------------------------------
07A3           2185   ;         function BMM150_Read_Data
07A3           2186   ;        -----------------------------------------
07A3           2187   _BMM150_Read_Data:
07A3 858208    2188            mov     _BMM150_Read_Data_mag_x_1_124,dpl
07A6 858309    2189            mov     (_BMM150_Read_Data_mag_x_1_124 + 1),dph
07A9 85F00A    2190            mov     (_BMM150_Read_Data_mag_x_1_124 + 2),b
07AC           2191   ;        main.c:479: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
07AC 758242    2192            mov     dpl,#0x42
07AF 120000    2193            lcall   _SPI_read
07B2 AD82      2194            mov     r5,dpl
07B4           2195   ;        main.c:480: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
07B4 758243    2196            mov     dpl,#0x43
07B7 C005      2197            push    ar5
07B9 120000    2198            lcall   _SPI_read
07BC AE82      2199            mov     r6,dpl
07BE           2200   ;        main.c:481: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
07BE 758244    2201            mov     dpl,#0x44
07C1 C006      2202            push    ar6
07C3 120000    2203            lcall   _SPI_read
07C6 AF82      2204            mov     r7,dpl
07C8           2205   ;        main.c:482: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
07C8 758245    2206            mov     dpl,#0x45
07CB C007      2207            push    ar7
07CD 120000    2208            lcall   _SPI_read
07D0 A882      2209            mov     r0,dpl
07D2           2210   ;        main.c:485: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
07D2 758248    2211            mov     dpl,#0x48
07D5 C000      2212            push    ar0
07D7 120000    2213            lcall   _SPI_read
07DA A982      2214            mov     r1,dpl
07DC           2215   ;        main.c:486: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
07DC 758249    2216            mov     dpl,#0x49
07DF C001      2217            push    ar1
07E1 120000    2218            lcall   _SPI_read
07E4 AA82      2219            mov     r2,dpl
07E6 D001      2220            pop     ar1
07E8 D000      2221            pop     ar0
07EA D007      2222            pop     ar7
07EC D006      2223            pop     ar6
07EE D005      2224            pop     ar5
07F0           2225   ;        main.c:490: raw_x_lsb = ((raw_x_lsb & 0b_1111_1000)) >> 3;
07F0 5305F8    2226            anl     ar5,#0xF8
07F3 ED        2227            mov     a,r5
07F4 C4        2228            swap    a
07F5 23        2229            rl      a
07F6 541F      2230            anl     a,#0x1f
07F8 FD        2231            mov     r5,a
07F9           2232   ;        main.c:491: msb_data = ((int16_t)((int8_t)raw_x_msb)) << 5; 
07F9 EE        2233            mov     a,r6
07FA 33        2234            rlc     a
07FB 95E0      2235            subb    a,acc
07FD C4        2236            swap    a
07FE 23        2237            rl      a
07FF 54E0      2238            anl     a,#0xe0
0801 CE        2239            xch     a,r6
0802 C4        2240            swap    a
0803 23        2241            rl      a
0804 CE        2242            xch     a,r6
0805 6E        2243            xrl     a,r6
0806 CE        2244            xch     a,r6
0807 54E0      2245            anl     a,#0xe0
0809 CE        2246            xch     a,r6
080A 6E        2247            xrl     a,r6
080B FB        2248            mov     r3,a
080C           2249   ;        main.c:492: x_val = (int16_t)(msb_data | raw_x_lsb);
080C 7C00      2250            mov     r4,#0x00
080E 90D328    2251            mov     dptr,#_BMM150_Read_Data_x_val_1_125
0811 ED        2252            mov     a,r5
0812 4E        2253            orl     a,r6
0813 F0        2254            movx    @dptr,a
0814 EC        2255            mov     a,r4
0815 4B        2256            orl     a,r3
0816 A3        2257            inc     dptr
0817 F0        2258            movx    @dptr,a
0818           2259   ;        main.c:495: raw_y_lsb = ((raw_y_lsb & 0b_1111_1000)) >> 3;
0818 5307F8    2260            anl     ar7,#0xF8
081B EF        2261            mov     a,r7
081C C4        2262            swap    a
081D 23        2263            rl      a
081E 541F      2264            anl     a,#0x1f
0820 FF        2265            mov     r7,a
0821           2266   ;        main.c:496: msb_data = ((int16_t)((int8_t)raw_y_msb)) << 5; 
0821 E8        2267            mov     a,r0
0822 33        2268            rlc     a
0823 95E0      2269            subb    a,acc
0825 C4        2270            swap    a
0826 23        2271            rl      a
0827 54E0      2272            anl     a,#0xe0
0829 C8        2273            xch     a,r0
082A C4        2274            swap    a
082B 23        2275            rl      a
082C C8        2276            xch     a,r0
082D 68        2277            xrl     a,r0
082E C8        2278            xch     a,r0
082F 54E0      2279            anl     a,#0xe0
0831 C8        2280            xch     a,r0
0832 68        2281            xrl     a,r0
0833 FB        2282            mov     r3,a
0834           2283   ;        main.c:497: y_val = (int16_t)(msb_data | raw_y_lsb);
0834 7C00      2284            mov     r4,#0x00
0836 90D378    2285            mov     dptr,#_BMM150_Read_Data_y_val_1_125
0839 EF        2286            mov     a,r7
083A 48        2287            orl     a,r0
083B F0        2288            movx    @dptr,a
083C EC        2289            mov     a,r4
083D 4B        2290            orl     a,r3
083E A3        2291            inc     dptr
083F F0        2292            movx    @dptr,a
0840           2293   ;        main.c:505: raw_rhall_lsb = ((raw_rhall_lsb & 0xFC) >> 2);
0840 5301FC    2294            anl     ar1,#0xFC
0843 E9        2295            mov     a,r1
0844 03        2296            rr      a
0845 03        2297            rr      a
0846 543F      2298            anl     a,#0x3f
0848 F9        2299            mov     r1,a
0849           2300   ;        main.c:506: rhall_val = (uint16_t)(((uint16_t)raw_rhall_msb << 6) | raw_rhall_lsb);
0849 E4        2301            clr     a
084A 5403      2302            anl     a,#0x03
084C A2E0      2303            mov     c,acc.0
084E CA        2304            xch     a,r2
084F 13        2305            rrc     a
0850 CA        2306            xch     a,r2
0851 13        2307            rrc     a
0852 A2E0      2308            mov     c,acc.0
0854 CA        2309            xch     a,r2
0855 13        2310            rrc     a
0856 CA        2311            xch     a,r2
0857 13        2312            rrc     a
0858 CA        2313            xch     a,r2
0859 FB        2314            mov     r3,a
085A 7C00      2315            mov     r4,#0x00
085C 90D3D8    2316            mov     dptr,#_BMM150_Read_Data_rhall_val_1_125
085F E9        2317            mov     a,r1
0860 4A        2318            orl     a,r2
0861 F0        2319            movx    @dptr,a
0862 EC        2320            mov     a,r4
0863 4B        2321            orl     a,r3
0864 A3        2322            inc     dptr
0865 F0        2323            movx    @dptr,a
0866           2324   ;        main.c:509: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
0866 7508D8    2325            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_125
0869 7509D3    2326            mov     (_BMM150_compensate_x_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_125 >> 8)
086C 750A00    2327            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x00
086F 90D328    2328            mov     dptr,#_BMM150_Read_Data_x_val_1_125
0872 75F000    2329            mov     b,#0x00
0875 120000    2330            lcall   _BMM150_compensate_x
0878 AA82      2331            mov     r2,dpl
087A AB83      2332            mov     r3,dph
087C 850882    2333            mov     dpl,_BMM150_Read_Data_mag_x_1_124
087F 850983    2334            mov     dph,(_BMM150_Read_Data_mag_x_1_124 + 1)
0882 850AF0    2335            mov     b,(_BMM150_Read_Data_mag_x_1_124 + 2)
0885 EA        2336            mov     a,r2
0886 120000    2337            lcall   __gptrput
0889 A3        2338            inc     dptr
088A EB        2339            mov     a,r3
088B 120000    2340            lcall   __gptrput
088E           2341   ;        main.c:510: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
088E AA68      2342            mov     r2,_BMM150_Read_Data_PARM_2
0890 AB69      2343            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
0892 AC6A      2344            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
0894 75B8D8    2345            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_125
0897 75B9D3    2346            mov     (_BMM150_compensate_y_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_125 >> 8)
089A 75BA00    2347            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x00
089D 90D378    2348            mov     dptr,#_BMM150_Read_Data_y_val_1_125
08A0 75F000    2349            mov     b,#0x00
08A3 C002      2350            push    ar2
08A5 C003      2351            push    ar3
08A7 C004      2352            push    ar4
08A9 120000    2353            lcall   _BMM150_compensate_y
08AC AD82      2354            mov     r5,dpl
08AE AE83      2355            mov     r6,dph
08B0 D004      2356            pop     ar4
08B2 D003      2357            pop     ar3
08B4 D002      2358            pop     ar2
08B6 8A82      2359            mov     dpl,r2
08B8 8B83      2360            mov     dph,r3
08BA 8CF0      2361            mov     b,r4
08BC ED        2362            mov     a,r5
08BD 120000    2363            lcall   __gptrput
08C0 A3        2364            inc     dptr
08C1 EE        2365            mov     a,r6
08C2 020000    2366            ljmp    __gptrput
08C5           2367   ;------------------------------------------------------------
08C5           2368   ;Allocation info for local variables in function 'UART1_Init'
08C5           2369   ;------------------------------------------------------------
08C5           2370   ;baudrate                  Allocated to registers r2 r3 r4 r5 
08C5           2371   ;------------------------------------------------------------
08C5           2372   ;        main.c:516: void UART1_Init (unsigned long baudrate)
08C5           2373   ;        -----------------------------------------
08C5           2374   ;         function UART1_Init
08C5           2375   ;        -----------------------------------------
08C5           2376   _UART1_Init:
08C5 AA82      2377            mov     r2,dpl
08C7 AB83      2378            mov     r3,dph
08C9 ACF0      2379            mov     r4,b
08CB FD        2380            mov     r5,a
08CC           2381   ;        main.c:518: SFRPAGE = 0x20;
08CC 75A720    2382            mov     _SFRPAGE,#0x20
08CF           2383   ;        main.c:519: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
08CF 75930C    2384            mov     _SMOD1,#0x0C
08D2           2385   ;        main.c:520: SCON1 = 0x10;
08D2 75C810    2386            mov     _SCON1,#0x10
08D5           2387   ;        main.c:521: SBCON1 =0x00;   // disable baud rate generator
08D5 759400    2388            mov     _SBCON1,#0x00
08D8           2389   ;        main.c:522: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
08D8 8A00      2390            mov     __divulong_PARM_2,r2
08DA 8B01      2391            mov     (__divulong_PARM_2 + 1),r3
08DC 8C02      2392            mov     (__divulong_PARM_2 + 2),r4
08DE 8D03      2393            mov     (__divulong_PARM_2 + 3),r5
08E0 90A200    2394            mov     dptr,#0xA200
08E3 75F04A    2395            mov     b,#0x4A
08E6 7404      2396            mov     a,#0x04
08E8 120000    2397            lcall   __divulong
08EB AA82      2398            mov     r2,dpl
08ED AB83      2399            mov     r3,dph
08EF ACF0      2400            mov     r4,b
08F1 FD        2401            mov     r5,a
08F2 750018    2402            mov     __divulong_PARM_2,#0x18
08F5 E4        2403            clr     a
08F6 F501      2404            mov     (__divulong_PARM_2 + 1),a
08F8 F502      2405            mov     (__divulong_PARM_2 + 2),a
08FA F503      2406            mov     (__divulong_PARM_2 + 3),a
08FC 8A82      2407            mov     dpl,r2
08FE 8B83      2408            mov     dph,r3
0900 8CF0      2409            mov     b,r4
0902 ED        2410            mov     a,r5
0903 120000    2411            lcall   __divulong
0906 AA82      2412            mov     r2,dpl
0908 AB83      2413            mov     r3,dph
090A ACF0      2414            mov     r4,b
090C FD        2415            mov     r5,a
090D E4        2416            clr     a
090E C3        2417            clr     c
090F 9A        2418            subb    a,r2
0910 FA        2419            mov     r2,a
0911 E4        2420            clr     a
0912 9B        2421            subb    a,r3
0913 FB        2422            mov     r3,a
0914 7401      2423            mov     a,#0x01
0916 9C        2424            subb    a,r4
0917 E4        2425            clr     a
0918 9D        2426            subb    a,r5
0919 8A95      2427            mov     _SBRL1,r2
091B 8B96      2428            mov     (_SBRL1 >> 8),r3
091D           2429   ;        main.c:523: TI1 = 1; // indicate ready for TX
091D D2C9      2430            setb    _TI1
091F           2431   ;        main.c:524: SBCON1 |= 0x40;   // enable baud rate generator
091F 439440    2432            orl     _SBCON1,#0x40
0922           2433   ;        main.c:525: SFRPAGE = 0x00;
0922 75A700    2434            mov     _SFRPAGE,#0x00
0925 22        2435            ret
0926           2436   ;------------------------------------------------------------
0926           2437   ;Allocation info for local variables in function 'putchar1'
0926           2438   ;------------------------------------------------------------
0926           2439   ;c                         Allocated to registers r2 
0926           2440   ;------------------------------------------------------------
0926           2441   ;        main.c:528: void putchar1 (char c) 
0926           2442   ;        -----------------------------------------
0926           2443   ;         function putchar1
0926           2444   ;        -----------------------------------------
0926           2445   _putchar1:
0926 AA82      2446            mov     r2,dpl
0928           2447   ;        main.c:530: SFRPAGE = 0x20;
0928 75A720    2448            mov     _SFRPAGE,#0x20
092B           2449   ;        main.c:531: while (!TI1);
092B           2450   L014001?:
092B           2451   ;        main.c:532: TI1=0;
092B 10C938    2452            jbc     _TI1,L014008?
092E 8000      2453            sjmp    L014001?
0930           2454   L014008?:
0930           2455   ;        main.c:533: SBUF1 = c;
0930 8A92      2456            mov     _SBUF1,r2
0932           2457   ;        main.c:534: SFRPAGE = 0x00;
0932 75A700    2458            mov     _SFRPAGE,#0x00
0935 22        2459            ret
0936           2460   ;------------------------------------------------------------
0936           2461   ;Allocation info for local variables in function 'sendstr1'
0936           2462   ;------------------------------------------------------------
0936           2463   ;s                         Allocated to registers r2 r3 r4 
0936           2464   ;------------------------------------------------------------
0936           2465   ;        main.c:537: void sendstr1 (char * s)
0936           2466   ;        -----------------------------------------
0936           2467   ;         function sendstr1
0936           2468   ;        -----------------------------------------
0936           2469   _sendstr1:
0936 AA82      2470            mov     r2,dpl
0938 AB83      2471            mov     r3,dph
093A ACF0      2472            mov     r4,b
093C           2473   ;        main.c:539: while(*s)
093C           2474   L015001?:
093C 8A82      2475            mov     dpl,r2
093E 8B83      2476            mov     dph,r3
0940 8CF0      2477            mov     b,r4
0942 120000    2478            lcall   __gptrget
0945 FD        2479            mov     r5,a
0946 6000      2480            jz      L015004?
0948           2481   ;        main.c:541: putchar1(*s);
0948 8D82      2482            mov     dpl,r5
094A C002      2483            push    ar2
094C C003      2484            push    ar3
094E C004      2485            push    ar4
0950 120000    2486            lcall   _putchar1
0953 D004      2487            pop     ar4
0955 D003      2488            pop     ar3
0957 D002      2489            pop     ar2
0959           2490   ;        main.c:542: s++;        
0959 0A        2491            inc     r2
095A BA0078    2492            cjne    r2,#0x00,L015001?
095D 0B        2493            inc     r3
095E 8000      2494            sjmp    L015001?
0960           2495   L015004?:
0960 22        2496            ret
0961           2497   ;------------------------------------------------------------
0961           2498   ;Allocation info for local variables in function 'getchar1'
0961           2499   ;------------------------------------------------------------
0961           2500   ;c                         Allocated with name '_getchar1_c_1_134'
0961           2501   ;------------------------------------------------------------
0961           2502   ;        main.c:546: char getchar1 (void)
0961           2503   ;        -----------------------------------------
0961           2504   ;         function getchar1
0961           2505   ;        -----------------------------------------
0961           2506   _getchar1:
0961           2507   ;        main.c:549: SFRPAGE = 0x20;
0961 75A720    2508            mov     _SFRPAGE,#0x20
0964           2509   ;        main.c:550: while (!RI1);
0964           2510   L016001?:
0964           2511   ;        main.c:551: RI1=0;
0964 10C838    2512            jbc     _RI1,L016008?
0967 8000      2513            sjmp    L016001?
0969           2514   L016008?:
0969           2515   ;        main.c:553: SCON1&=0b_0011_1111;
0969 53C83F    2516            anl     _SCON1,#0x3F
096C           2517   ;        main.c:554: c = SBUF1;
096C 859282    2518            mov     dpl,_SBUF1
096F           2519   ;        main.c:555: SFRPAGE = 0x00;
096F 75A700    2520            mov     _SFRPAGE,#0x00
0972           2521   ;        main.c:556: return (c);
0972 22        2522            ret
0973           2523   ;------------------------------------------------------------
0973           2524   ;Allocation info for local variables in function 'getchar1_with_timeout'
0973           2525   ;------------------------------------------------------------
0973           2526   ;c                         Allocated with name '_getchar1_with_timeout_c_1_136'
0973           2527   ;timeout                   Allocated with name '_getchar1_with_timeout_timeout_1_136'
0973           2528   ;------------------------------------------------------------
0973           2529   ;        main.c:559: char getchar1_with_timeout (void)
0973           2530   ;        -----------------------------------------
0973           2531   ;         function getchar1_with_timeout
0973           2532   ;        -----------------------------------------
0973           2533   _getchar1_with_timeout:
0973           2534   ;        main.c:563: SFRPAGE = 0x20;
0973 75A720    2535            mov     _SFRPAGE,#0x20
0976           2536   ;        main.c:565: while (!RI1)
0976 7A00      2537            mov     r2,#0x00
0978 7B00      2538            mov     r3,#0x00
097A           2539   L017003?:
097A 20C8B8    2540            jb      _RI1,L017005?
097D           2541   ;        main.c:567: SFRPAGE = 0x00;
097D 75A700    2542            mov     _SFRPAGE,#0x00
0980           2543   ;        main.c:568: Timer3us(20);
0980 758214    2544            mov     dpl,#0x14
0983 C002      2545            push    ar2
0985 C003      2546            push    ar3
0987 120000    2547            lcall   _Timer3us
098A D003      2548            pop     ar3
098C D002      2549            pop     ar2
098E           2550   ;        main.c:569: SFRPAGE = 0x20;
098E 75A720    2551            mov     _SFRPAGE,#0x20
0991           2552   ;        main.c:570: timeout++;
0991 0A        2553            inc     r2
0992 BA00F8    2554            cjne    r2,#0x00,L017012?
0995 0B        2555            inc     r3
0996           2556   L017012?:
0996           2557   ;        main.c:571: if(timeout==25000)
0996 BAA878    2558            cjne    r2,#0xA8,L017003?
0999 BB6178    2559            cjne    r3,#0x61,L017003?
099C           2560   ;        main.c:573: SFRPAGE = 0x00;
099C 75A700    2561            mov     _SFRPAGE,#0x00
099F           2562   ;        main.c:574: return ('\n'); // Timeout after half second
099F 75820A    2563            mov     dpl,#0x0A
09A2 22        2564            ret
09A3           2565   L017005?:
09A3           2566   ;        main.c:577: RI1=0;
09A3 C2C8      2567            clr     _RI1
09A5           2568   ;        main.c:579: SCON1&=0b_0011_1111;
09A5 53C83F    2569            anl     _SCON1,#0x3F
09A8           2570   ;        main.c:580: c = SBUF1;
09A8 859282    2571            mov     dpl,_SBUF1
09AB           2572   ;        main.c:581: SFRPAGE = 0x00;
09AB 75A700    2573            mov     _SFRPAGE,#0x00
09AE           2574   ;        main.c:582: return (c);
09AE 22        2575            ret
09AF           2576   ;------------------------------------------------------------
09AF           2577   ;Allocation info for local variables in function 'getstr1'
09AF           2578   ;------------------------------------------------------------
09AF           2579   ;n                         Allocated with name '_getstr1_PARM_2'
09AF           2580   ;s                         Allocated to registers r2 r3 r4 
09AF           2581   ;c                         Allocated with name '_getstr1_c_1_140'
09AF           2582   ;cnt                       Allocated with name '_getstr1_cnt_1_140'
09AF           2583   ;------------------------------------------------------------
09AF           2584   ;        main.c:585: void getstr1 (char * s, unsigned char n)
09AF           2585   ;        -----------------------------------------
09AF           2586   ;         function getstr1
09AF           2587   ;        -----------------------------------------
09AF           2588   _getstr1:
09AF AA82      2589            mov     r2,dpl
09B1 AB83      2590            mov     r3,dph
09B3 ACF0      2591            mov     r4,b
09B5           2592   ;        main.c:591: while(1)
09B5 7D00      2593            mov     r5,#0x00
09B7 8A06      2594            mov     ar6,r2
09B9 8B07      2595            mov     ar7,r3
09BB 8C00      2596            mov     ar0,r4
09BD           2597   L018007?:
09BD           2598   ;        main.c:593: c=getchar1_with_timeout();
09BD C002      2599            push    ar2
09BF C003      2600            push    ar3
09C1 C004      2601            push    ar4
09C3 C005      2602            push    ar5
09C5 C006      2603            push    ar6
09C7 C007      2604            push    ar7
09C9 C000      2605            push    ar0
09CB 120000    2606            lcall   _getchar1_with_timeout
09CE A982      2607            mov     r1,dpl
09D0 D000      2608            pop     ar0
09D2 D007      2609            pop     ar7
09D4 D006      2610            pop     ar6
09D6 D005      2611            pop     ar5
09D8 D004      2612            pop     ar4
09DA D003      2613            pop     ar3
09DC D002      2614            pop     ar2
09DE           2615   ;        main.c:594: if(c=='\n')
09DE B90A78    2616            cjne    r1,#0x0A,L018002?
09E1           2617   ;        main.c:596: *s=0;
09E1 8A82      2618            mov     dpl,r2
09E3 8B83      2619            mov     dph,r3
09E5 8CF0      2620            mov     b,r4
09E7 E4        2621            clr     a
09E8           2622   ;        main.c:597: return;
09E8 020000    2623            ljmp    __gptrput
09EB           2624   L018002?:
09EB           2625   ;        main.c:600: if (cnt<n)
09EB C3        2626            clr     c
09EC ED        2627            mov     a,r5
09ED 9518      2628            subb    a,_getstr1_PARM_2
09EF 5000      2629            jnc     L018004?
09F1           2630   ;        main.c:602: cnt++;
09F1 0D        2631            inc     r5
09F2           2632   ;        main.c:603: *s=c;
09F2 8E82      2633            mov     dpl,r6
09F4 8F83      2634            mov     dph,r7
09F6 88F0      2635            mov     b,r0
09F8 E9        2636            mov     a,r1
09F9 120000    2637            lcall   __gptrput
09FC A3        2638            inc     dptr
09FD AE82      2639            mov     r6,dpl
09FF AF83      2640            mov     r7,dph
0A01           2641   ;        main.c:604: s++;
0A01 8E02      2642            mov     ar2,r6
0A03 8F03      2643            mov     ar3,r7
0A05 8804      2644            mov     ar4,r0
0A07 8000      2645            sjmp    L018007?
0A09           2646   L018004?:
0A09           2647   ;        main.c:608: *s=0;
0A09 8A82      2648            mov     dpl,r2
0A0B 8B83      2649            mov     dph,r3
0A0D 8CF0      2650            mov     b,r4
0A0F E4        2651            clr     a
0A10           2652   ;        main.c:609: return;
0A10 020000    2653            ljmp    __gptrput
0A13           2654   ;------------------------------------------------------------
0A13           2655   ;Allocation info for local variables in function 'RXU1'
0A13           2656   ;------------------------------------------------------------
0A13           2657   ;------------------------------------------------------------
0A13           2658   ;        main.c:615: bit RXU1 (void)
0A13           2659   ;        -----------------------------------------
0A13           2660   ;         function RXU1
0A13           2661   ;        -----------------------------------------
0A13           2662   _RXU1:
0A13           2663   ;        main.c:618: SFRPAGE = 0x20;
0A13 75A720    2664            mov     _SFRPAGE,#0x20
0A16           2665   ;        main.c:619: mybit=RI1;
0A16 A2C8      2666            mov     c,_RI1
0A18           2667   ;        main.c:620: SFRPAGE = 0x00;
0A18 75A700    2668            mov     _SFRPAGE,#0x00
0A1B           2669   ;        main.c:621: return mybit;
0A1B 22        2670            ret
0A1C           2671   ;------------------------------------------------------------
0A1C           2672   ;Allocation info for local variables in function 'waitms_or_RI1'
0A1C           2673   ;------------------------------------------------------------
0A1C           2674   ;ms                        Allocated to registers r2 r3 
0A1C           2675   ;j                         Allocated with name '_waitms_or_RI1_j_1_148'
0A1C           2676   ;k                         Allocated with name '_waitms_or_RI1_k_1_148'
0A1C           2677   ;------------------------------------------------------------
0A1C           2678   ;        main.c:624: void waitms_or_RI1 (unsigned int ms)
0A1C           2679   ;        -----------------------------------------
0A1C           2680   ;         function waitms_or_RI1
0A1C           2681   ;        -----------------------------------------
0A1C           2682   _waitms_or_RI1:
0A1C AA82      2683            mov     r2,dpl
0A1E AB83      2684            mov     r3,dph
0A20           2685   ;        main.c:628: for(j=0; j<ms; j++)
0A20 7C00      2686            mov     r4,#0x00
0A22 7D00      2687            mov     r5,#0x00
0A24           2688   L020007?:
0A24 C3        2689            clr     c
0A25 EC        2690            mov     a,r4
0A26 9A        2691            subb    a,r2
0A27 ED        2692            mov     a,r5
0A28 9B        2693            subb    a,r3
0A29 5000      2694            jnc     L020011?
0A2B           2695   ;        main.c:630: for (k=0; k<4; k++)
0A2B 7E00      2696            mov     r6,#0x00
0A2D           2697   L020003?:
0A2D BE04B8    2698            cjne    r6,#0x04,L020019?
0A30           2699   L020019?:
0A30 5000      2700            jnc     L020009?
0A32           2701   ;        main.c:632: if(RXU1()) return;
0A32 C002      2702            push    ar2
0A34 C003      2703            push    ar3
0A36 C004      2704            push    ar4
0A38 C005      2705            push    ar5
0A3A C006      2706            push    ar6
0A3C 120000    2707            lcall   _RXU1
0A3F E4        2708            clr     a
0A40 33        2709            rlc     a
0A41 D006      2710            pop     ar6
0A43 D005      2711            pop     ar5
0A45 D004      2712            pop     ar4
0A47 D003      2713            pop     ar3
0A49 D002      2714            pop     ar2
0A4B 6000      2715            jz      L020002?
0A4D 22        2716            ret
0A4E           2717   L020002?:
0A4E           2718   ;        main.c:633: Timer3us(250);
0A4E 7582FA    2719            mov     dpl,#0xFA
0A51 C002      2720            push    ar2
0A53 C003      2721            push    ar3
0A55 C004      2722            push    ar4
0A57 C005      2723            push    ar5
0A59 C006      2724            push    ar6
0A5B 120000    2725            lcall   _Timer3us
0A5E D006      2726            pop     ar6
0A60 D005      2727            pop     ar5
0A62 D004      2728            pop     ar4
0A64 D003      2729            pop     ar3
0A66 D002      2730            pop     ar2
0A68           2731   ;        main.c:630: for (k=0; k<4; k++)
0A68 0E        2732            inc     r6
0A69 8000      2733            sjmp    L020003?
0A6B           2734   L020009?:
0A6B           2735   ;        main.c:628: for(j=0; j<ms; j++)
0A6B 0C        2736            inc     r4
0A6C BC00F8    2737            cjne    r4,#0x00,L020007?
0A6F 0D        2738            inc     r5
0A70 8000      2739            sjmp    L020007?
0A72           2740   L020011?:
0A72 22        2741            ret
0A73           2742   ;------------------------------------------------------------
0A73           2743   ;Allocation info for local variables in function 'SendATCommand'
0A73           2744   ;------------------------------------------------------------
0A73           2745   ;s                         Allocated to registers r2 r3 r4 
0A73           2746   ;------------------------------------------------------------
0A73           2747   ;        main.c:638: void SendATCommand (char * s)
0A73           2748   ;        -----------------------------------------
0A73           2749   ;         function SendATCommand
0A73           2750   ;        -----------------------------------------
0A73           2751   _SendATCommand:
0A73 AA82      2752            mov     r2,dpl
0A75 AB83      2753            mov     r3,dph
0A77 ACF0      2754            mov     r4,b
0A79           2755   ;        main.c:640: printf("Command: %s", s);
0A79 C002      2756            push    ar2
0A7B C003      2757            push    ar3
0A7D C004      2758            push    ar4
0A7F C002      2759            push    ar2
0A81 C003      2760            push    ar3
0A83 C004      2761            push    ar4
0A85 7478      2762            mov     a,#__str_4
0A87 C0E0      2763            push    acc
0A89 74ED      2764            mov     a,#(__str_4 >> 8)
0A8B C0E0      2765            push    acc
0A8D 7480      2766            mov     a,#0x80
0A8F C0E0      2767            push    acc
0A91 120000    2768            lcall   _printf
0A94 E581      2769            mov     a,sp
0A96 24FA      2770            add     a,#0xfa
0A98 F581      2771            mov     sp,a
0A9A           2772   ;        main.c:641: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0A9A C2A0      2773            clr     _P2_0
0A9C           2774   ;        main.c:642: waitms(5);
0A9C 900005    2775            mov     dptr,#0x0005
0A9F 120000    2776            lcall   _waitms
0AA2 D004      2777            pop     ar4
0AA4 D003      2778            pop     ar3
0AA6 D002      2779            pop     ar2
0AA8           2780   ;        main.c:643: sendstr1(s);
0AA8 8A82      2781            mov     dpl,r2
0AAA 8B83      2782            mov     dph,r3
0AAC 8CF0      2783            mov     b,r4
0AAE 120000    2784            lcall   _sendstr1
0AB1           2785   ;        main.c:644: getstr1(buff, sizeof(buff)-1);
0AB1 751813    2786            mov     _getstr1_PARM_2,#0x13
0AB4 905B88    2787            mov     dptr,#_buff
0AB7 75F040    2788            mov     b,#0x40
0ABA 120000    2789            lcall   _getstr1
0ABD           2790   ;        main.c:645: waitms(10);
0ABD 90000A    2791            mov     dptr,#0x000A
0AC0 120000    2792            lcall   _waitms
0AC3           2793   ;        main.c:646: P2_0=1; // 'set' pin to 1 is normal operation mode.
0AC3 D2A0      2794            setb    _P2_0
0AC5           2795   ;        main.c:647: printf("Response: %s\r\n", buff);
0AC5 7488      2796            mov     a,#_buff
0AC7 C0E0      2797            push    acc
0AC9 745B      2798            mov     a,#(_buff >> 8)
0ACB C0E0      2799            push    acc
0ACD 7440      2800            mov     a,#0x40
0ACF C0E0      2801            push    acc
0AD1 74B8      2802            mov     a,#__str_5
0AD3 C0E0      2803            push    acc
0AD5 74ED      2804            mov     a,#(__str_5 >> 8)
0AD7 C0E0      2805            push    acc
0AD9 7480      2806            mov     a,#0x80
0ADB C0E0      2807            push    acc
0ADD 120000    2808            lcall   _printf
0AE0 E581      2809            mov     a,sp
0AE2 24FA      2810            add     a,#0xfa
0AE4 F581      2811            mov     sp,a
0AE6 22        2812            ret
0AE7           2813   ;------------------------------------------------------------
0AE7           2814   ;Allocation info for local variables in function 'ReceptionOff'
0AE7           2815   ;------------------------------------------------------------
0AE7           2816   ;------------------------------------------------------------
0AE7           2817   ;        main.c:650: void ReceptionOff (void)
0AE7           2818   ;        -----------------------------------------
0AE7           2819   ;         function ReceptionOff
0AE7           2820   ;        -----------------------------------------
0AE7           2821   _ReceptionOff:
0AE7           2822   ;        main.c:652: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0AE7 C2A0      2823            clr     _P2_0
0AE9           2824   ;        main.c:653: waitms(10);
0AE9 90000A    2825            mov     dptr,#0x000A
0AEC 120000    2826            lcall   _waitms
0AEF           2827   ;        main.c:654: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0AEF 90EDF8    2828            mov     dptr,#__str_6
0AF2 75F080    2829            mov     b,#0x80
0AF5 120000    2830            lcall   _sendstr1
0AF8           2831   ;        main.c:655: waitms(10);
0AF8 90000A    2832            mov     dptr,#0x000A
0AFB 120000    2833            lcall   _waitms
0AFE           2834   ;        main.c:657: SCON1&=0b_0011_1111;
0AFE 53C83F    2835            anl     _SCON1,#0x3F
0B01           2836   ;        main.c:658: P2_0=1; // 'set' pin to 1 is normal operation mode.
0B01 D2A0      2837            setb    _P2_0
0B03 22        2838            ret
0B04           2839   ;------------------------------------------------------------
0B04           2840   ;Allocation info for local variables in function 'Set_Pin_Output'
0B04           2841   ;------------------------------------------------------------
0B04           2842   ;pin                       Allocated to registers r2 
0B04           2843   ;mask                      Allocated to registers r3 
0B04           2844   ;------------------------------------------------------------
0B04           2845   ;        main.c:661: void Set_Pin_Output (unsigned char pin)
0B04           2846   ;        -----------------------------------------
0B04           2847   ;         function Set_Pin_Output
0B04           2848   ;        -----------------------------------------
0B04           2849   _Set_Pin_Output:
0B04 AA82      2850            mov     r2,dpl
0B06           2851   ;        main.c:665: mask=(1<<(pin&0x7));
0B06 7407      2852            mov     a,#0x07
0B08 5A        2853            anl     a,r2
0B09 F5F0      2854            mov     b,a
0B0B 05F0      2855            inc     b
0B0D 7401      2856            mov     a,#0x01
0B0F 8000      2857            sjmp    L023011?
0B11           2858   L023009?:
0B11 25E0      2859            add     a,acc
0B13           2860   L023011?:
0B13 D5F078    2861            djnz    b,L023009?
0B16 FB        2862            mov     r3,a
0B17           2863   ;        main.c:666: switch(pin/0x10)
0B17 EA        2864            mov     a,r2
0B18 C4        2865            swap    a
0B19 540F      2866            anl     a,#0x0f
0B1B FA        2867            mov  r2,a
0B1C 24FC      2868            add     a,#0xff - 0x03
0B1E 4000      2869            jc      L023006?
0B20 EA        2870            mov     a,r2
0B21 2A        2871            add     a,r2
0B22 2A        2872            add     a,r2
0B23 90EEF8    2873            mov     dptr,#L023013?
0B26 73        2874            jmp     @a+dptr
0B27           2875   L023013?:
0B27 020000    2876            ljmp    L023001?
0B2A 020000    2877            ljmp    L023002?
0B2D 020000    2878            ljmp    L023003?
0B30 020000    2879            ljmp    L023004?
0B33           2880   ;        main.c:668: case 0: P0MDOUT |= mask; break;
0B33           2881   L023001?:
0B33 EB        2882            mov     a,r3
0B34 42A4      2883            orl     _P0MDOUT,a
0B36           2884   ;        main.c:669: case 1: P1MDOUT |= mask; break;
0B36 22        2885            ret
0B37           2886   L023002?:
0B37 EB        2887            mov     a,r3
0B38 42A5      2888            orl     _P1MDOUT,a
0B3A           2889   ;        main.c:670: case 2: P2MDOUT |= mask; break; 
0B3A 22        2890            ret
0B3B           2891   L023003?:
0B3B EB        2892            mov     a,r3
0B3C 42A6      2893            orl     _P2MDOUT,a
0B3E           2894   ;        main.c:671: case 3: P3MDOUT |= mask; break; 
0B3E 22        2895            ret
0B3F           2896   L023004?:
0B3F EB        2897            mov     a,r3
0B40 429C      2898            orl     _P3MDOUT,a
0B42           2899   ;        main.c:672: }   
0B42           2900   L023006?:
0B42 22        2901            ret
0B43           2902   ;------------------------------------------------------------
0B43           2903   ;Allocation info for local variables in function 'Set_Pin_Input'
0B43           2904   ;------------------------------------------------------------
0B43           2905   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_159'
0B43           2906   ;pin                       Allocated to registers r2 
0B43           2907   ;------------------------------------------------------------
0B43           2908   ;        main.c:675: void Set_Pin_Input (unsigned char pin)
0B43           2909   ;        -----------------------------------------
0B43           2910   ;         function Set_Pin_Input
0B43           2911   ;        -----------------------------------------
0B43           2912   _Set_Pin_Input:
0B43 AA82      2913            mov     r2,dpl
0B45           2914   ;        main.c:679: mask=(1<<(pin&0x7));
0B45 7407      2915            mov     a,#0x07
0B47 5A        2916            anl     a,r2
0B48 F5F0      2917            mov     b,a
0B4A 05F0      2918            inc     b
0B4C 7401      2919            mov     a,#0x01
0B4E 8000      2920            sjmp    L024011?
0B50           2921   L024009?:
0B50 25E0      2922            add     a,acc
0B52           2923   L024011?:
0B52 D5F0E0    2924            djnz    b,L024009?
0B55           2925   ;        main.c:680: mask=~mask;
0B55 F4        2926            cpl     a
0B56 FB        2927            mov     r3,a
0B57           2928   ;        main.c:681: switch(pin/0x10)
0B57 EA        2929            mov     a,r2
0B58 C4        2930            swap    a
0B59 540F      2931            anl     a,#0x0f
0B5B FA        2932            mov  r2,a
0B5C 24FC      2933            add     a,#0xff - 0x03
0B5E 4000      2934            jc      L024006?
0B60 EA        2935            mov     a,r2
0B61 2A        2936            add     a,r2
0B62 2A        2937            add     a,r2
0B63 900160    2938            mov     dptr,#L024013?
0B66 73        2939            jmp     @a+dptr
0B67           2940   L024013?:
0B67 020000    2941            ljmp    L024001?
0B6A 020000    2942            ljmp    L024002?
0B6D 020000    2943            ljmp    L024003?
0B70 020000    2944            ljmp    L024004?
0B73           2945   ;        main.c:683: case 0: P0MDOUT &= mask; break;
0B73           2946   L024001?:
0B73 EB        2947            mov     a,r3
0B74 52A4      2948            anl     _P0MDOUT,a
0B76           2949   ;        main.c:684: case 1: P1MDOUT &= mask; break;
0B76 22        2950            ret
0B77           2951   L024002?:
0B77 EB        2952            mov     a,r3
0B78 52A5      2953            anl     _P1MDOUT,a
0B7A           2954   ;        main.c:685: case 2: P2MDOUT &= mask; break; 
0B7A 22        2955            ret
0B7B           2956   L024003?:
0B7B EB        2957            mov     a,r3
0B7C 52A6      2958            anl     _P2MDOUT,a
0B7E           2959   ;        main.c:686: case 3: P3MDOUT &= mask; break; 
0B7E 22        2960            ret
0B7F           2961   L024004?:
0B7F EB        2962            mov     a,r3
0B80 529C      2963            anl     _P3MDOUT,a
0B82           2964   ;        main.c:687: }   
0B82           2965   L024006?:
0B82 22        2966            ret
0B83           2967   ;------------------------------------------------------------
0B83           2968   ;Allocation info for local variables in function 'InitADC'
0B83           2969   ;------------------------------------------------------------
0B83           2970   ;------------------------------------------------------------
0B83           2971   ;        main.c:690: void InitADC (void)
0B83           2972   ;        -----------------------------------------
0B83           2973   ;         function InitADC
0B83           2974   ;        -----------------------------------------
0B83           2975   _InitADC:
0B83           2976   ;        main.c:692: SFRPAGE = 0x00;
0B83 75A700    2977            mov     _SFRPAGE,#0x00
0B86           2978   ;        main.c:693: ADEN=0; // Disable ADC
0B86 C2EF      2979            clr     _ADEN
0B88           2980   ;        main.c:698: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0B88 75B280    2981            mov     _ADC0CN1,#0x80
0B8B           2982   ;        main.c:702: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0B8B 75BC20    2983            mov     _ADC0CF0,#0x20
0B8E           2984   ;        main.c:706: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
0B8E 75B91E    2985            mov     _ADC0CF1,#0x1E
0B91           2986   ;        main.c:715: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0B91 75E800    2987            mov     _ADC0CN0,#0x00
0B94           2988   ;        main.c:720: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0B94 75DF3F    2989            mov     _ADC0CF2,#0x3F
0B97           2990   ;        main.c:724: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0B97 75B300    2991            mov     _ADC0CN2,#0x00
0B9A           2992   ;        main.c:726: ADEN=1; // Enable ADC
0B9A D2EF      2993            setb    _ADEN
0B9C 22        2994            ret
0B9D           2995   ;------------------------------------------------------------
0B9D           2996   ;Allocation info for local variables in function 'InitPinADC'
0B9D           2997   ;------------------------------------------------------------
0B9D           2998   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
0B9D           2999   ;portno                    Allocated to registers r2 
0B9D           3000   ;mask                      Allocated to registers r3 
0B9D           3001   ;------------------------------------------------------------
0B9D           3002   ;        main.c:729: void InitPinADC (unsigned char portno, unsigned char pin_num)
0B9D           3003   ;        -----------------------------------------
0B9D           3004   ;         function InitPinADC
0B9D           3005   ;        -----------------------------------------
0B9D           3006   _InitPinADC:
0B9D AA82      3007            mov     r2,dpl
0B9F           3008   ;        main.c:733: mask=1<<pin_num;
0B9F 85F8F0    3009            mov     b,_InitPinADC_PARM_2
0BA2 05F0      3010            inc     b
0BA4 7401      3011            mov     a,#0x01
0BA6 8000      3012            sjmp    L026013?
0BA8           3013   L026011?:
0BA8 25E0      3014            add     a,acc
0BAA           3015   L026013?:
0BAA D5F0E0    3016            djnz    b,L026011?
0BAD FB        3017            mov     r3,a
0BAE           3018   ;        main.c:735: SFRPAGE = 0x20;
0BAE 75A720    3019            mov     _SFRPAGE,#0x20
0BB1           3020   ;        main.c:736: switch (portno)
0BB1 BA0020    3021            cjne    r2,#0x00,L026014?
0BB4 8000      3022            sjmp    L026001?
0BB6           3023   L026014?:
0BB6 BA01A0    3024            cjne    r2,#0x01,L026015?
0BB9 8000      3025            sjmp    L026002?
0BBB           3026   L026015?:
0BBB           3027   ;        main.c:738: case 0:
0BBB BA0220    3028            cjne    r2,#0x02,L026005?
0BBE 8000      3029            sjmp    L026003?
0BC0           3030   L026001?:
0BC0           3031   ;        main.c:739: P0MDIN &= (~mask); // Set pin as analog input
0BC0 EB        3032            mov     a,r3
0BC1 F4        3033            cpl     a
0BC2 FA        3034            mov     r2,a
0BC3 52F1      3035            anl     _P0MDIN,a
0BC5           3036   ;        main.c:740: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0BC5 EB        3037            mov     a,r3
0BC6 42D4      3038            orl     _P0SKIP,a
0BC8           3039   ;        main.c:741: break;
0BC8           3040   ;        main.c:742: case 1:
0BC8 8000      3041            sjmp    L026005?
0BCA           3042   L026002?:
0BCA           3043   ;        main.c:743: P1MDIN &= (~mask); // Set pin as analog input
0BCA EB        3044            mov     a,r3
0BCB F4        3045            cpl     a
0BCC FA        3046            mov     r2,a
0BCD 52F2      3047            anl     _P1MDIN,a
0BCF           3048   ;        main.c:744: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0BCF EB        3049            mov     a,r3
0BD0 42D5      3050            orl     _P1SKIP,a
0BD2           3051   ;        main.c:745: break;
0BD2           3052   ;        main.c:746: case 2:
0BD2 8000      3053            sjmp    L026005?
0BD4           3054   L026003?:
0BD4           3055   ;        main.c:747: P2MDIN &= (~mask); // Set pin as analog input
0BD4 EB        3056            mov     a,r3
0BD5 F4        3057            cpl     a
0BD6 FA        3058            mov     r2,a
0BD7 52F3      3059            anl     _P2MDIN,a
0BD9           3060   ;        main.c:748: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0BD9 EB        3061            mov     a,r3
0BDA 42CC      3062            orl     _P2SKIP,a
0BDC           3063   ;        main.c:752: }
0BDC           3064   L026005?:
0BDC           3065   ;        main.c:753: SFRPAGE = 0x00;
0BDC 75A700    3066            mov     _SFRPAGE,#0x00
0BDF 22        3067            ret
0BE0           3068   ;------------------------------------------------------------
0BE0           3069   ;Allocation info for local variables in function 'ADC_at_Pin'
0BE0           3070   ;------------------------------------------------------------
0BE0           3071   ;pin                       Allocated to registers 
0BE0           3072   ;------------------------------------------------------------
0BE0           3073   ;        main.c:756: unsigned int ADC_at_Pin(unsigned char pin)
0BE0           3074   ;        -----------------------------------------
0BE0           3075   ;         function ADC_at_Pin
0BE0           3076   ;        -----------------------------------------
0BE0           3077   _ADC_at_Pin:
0BE0 8582BB    3078            mov     _ADC0MX,dpl
0BE3           3079   ;        main.c:759: ADINT = 0;
0BE3 C2ED      3080            clr     _ADINT
0BE5           3081   ;        main.c:760: ADBUSY = 1;     // Convert voltage at the pin
0BE5 D2EC      3082            setb    _ADBUSY
0BE7           3083   ;        main.c:761: while (!ADINT); // Wait for conversion to complete
0BE7           3084   L027001?:
0BE7 30EDA0    3085            jnb     _ADINT,L027001?
0BEA           3086   ;        main.c:762: return (ADC0);
0BEA 85BD82    3087            mov     dpl,_ADC0
0BED 85BE83    3088            mov     dph,(_ADC0 >> 8)
0BF0 22        3089            ret
0BF1           3090   ;------------------------------------------------------------
0BF1           3091   ;Allocation info for local variables in function 'ReadHX711'
0BF1           3092   ;------------------------------------------------------------
0BF1           3093   ;dataa                     Allocated with name '_ReadHX711_dataa_1_169'
0BF1           3094   ;i                         Allocated with name '_ReadHX711_i_1_169'
0BF1           3095   ;ans                       Allocated with name '_ReadHX711_ans_1_169'
0BF1           3096   ;j                         Allocated with name '_ReadHX711_j_1_169'
0BF1           3097   ;------------------------------------------------------------
0BF1           3098   ;        main.c:765: int ReadHX711(void) {
0BF1           3099   ;        -----------------------------------------
0BF1           3100   ;         function ReadHX711
0BF1           3101   ;        -----------------------------------------
0BF1           3102   _ReadHX711:
0BF1           3103   ;        main.c:766: xdata unsigned long dataa = 0;
0BF1 90D428    3104            mov     dptr,#_ReadHX711_dataa_1_169
0BF4 E4        3105            clr     a
0BF5 F0        3106            movx    @dptr,a
0BF6 A3        3107            inc     dptr
0BF7 F0        3108            movx    @dptr,a
0BF8 A3        3109            inc     dptr
0BF9 F0        3110            movx    @dptr,a
0BFA A3        3111            inc     dptr
0BFB F0        3112            movx    @dptr,a
0BFC           3113   ;        main.c:771: PD_SCK = 0;
0BFC C2A5      3114            clr     _P2_5
0BFE           3115   ;        main.c:773: for (i = 0; i < 24; i++) {
0BFE 7A00      3116            mov     r2,#0x00
0C00           3117   L028011?:
0C00 C3        3118            clr     c
0C01 EA        3119            mov     a,r2
0C02 6480      3120            xrl     a,#0x80
0C04 9498      3121            subb    a,#0x98
0C06 4000      3122            jc      L028037?
0C08 020000    3123            ljmp    L028014?
0C0B           3124   L028037?:
0C0B           3125   ;        main.c:774: PD_SCK = 1;
0C0B D2A5      3126            setb    _P2_5
0C0D           3127   ;        main.c:775: for (j = 0; j < 4; j++);
0C0D 90D478    3128            mov     dptr,#_ReadHX711_j_1_169
0C10 E4        3129            clr     a
0C11 F0        3130            movx    @dptr,a
0C12           3131   L028003?:
0C12 90D478    3132            mov     dptr,#_ReadHX711_j_1_169
0C15 E0        3133            movx    a,@dptr
0C16 FB        3134            mov     r3,a
0C17 C3        3135            clr     c
0C18 6480      3136            xrl     a,#0x80
0C1A 9484      3137            subb    a,#0x84
0C1C 5000      3138            jnc     L028006?
0C1E 90D478    3139            mov     dptr,#_ReadHX711_j_1_169
0C21 E0        3140            movx    a,@dptr
0C22 2401      3141            add     a,#0x01
0C24 F0        3142            movx    @dptr,a
0C25 8000      3143            sjmp    L028003?
0C27           3144   L028006?:
0C27           3145   ;        main.c:776: dataa = dataa << 1;
0C27 90D428    3146            mov     dptr,#_ReadHX711_dataa_1_169
0C2A E0        3147            movx    a,@dptr
0C2B FB        3148            mov     r3,a
0C2C A3        3149            inc     dptr
0C2D E0        3150            movx    a,@dptr
0C2E FC        3151            mov     r4,a
0C2F A3        3152            inc     dptr
0C30 E0        3153            movx    a,@dptr
0C31 FD        3154            mov     r5,a
0C32 A3        3155            inc     dptr
0C33 E0        3156            movx    a,@dptr
0C34 FE        3157            mov     r6,a
0C35 EB        3158            mov     a,r3
0C36 2B        3159            add     a,r3
0C37 FB        3160            mov     r3,a
0C38 EC        3161            mov     a,r4
0C39 33        3162            rlc     a
0C3A FC        3163            mov     r4,a
0C3B ED        3164            mov     a,r5
0C3C 33        3165            rlc     a
0C3D FD        3166            mov     r5,a
0C3E EE        3167            mov     a,r6
0C3F 33        3168            rlc     a
0C40 FE        3169            mov     r6,a
0C41 90D428    3170            mov     dptr,#_ReadHX711_dataa_1_169
0C44 EB        3171            mov     a,r3
0C45 F0        3172            movx    @dptr,a
0C46 A3        3173            inc     dptr
0C47 EC        3174            mov     a,r4
0C48 F0        3175            movx    @dptr,a
0C49 A3        3176            inc     dptr
0C4A ED        3177            mov     a,r5
0C4B F0        3178            movx    @dptr,a
0C4C A3        3179            inc     dptr
0C4D EE        3180            mov     a,r6
0C4E F0        3181            movx    @dptr,a
0C4F           3182   ;        main.c:777: if (DOUT) {
0C4F 30A620    3183            jnb     _P2_6,L028002?
0C52           3184   ;        main.c:778: dataa |= 0x01;
0C52 90D428    3185            mov     dptr,#_ReadHX711_dataa_1_169
0C55 E0        3186            movx    a,@dptr
0C56 FB        3187            mov     r3,a
0C57 A3        3188            inc     dptr
0C58 E0        3189            movx    a,@dptr
0C59 FC        3190            mov     r4,a
0C5A A3        3191            inc     dptr
0C5B E0        3192            movx    a,@dptr
0C5C FD        3193            mov     r5,a
0C5D A3        3194            inc     dptr
0C5E E0        3195            movx    a,@dptr
0C5F FE        3196            mov     r6,a
0C60 90D428    3197            mov     dptr,#_ReadHX711_dataa_1_169
0C63 7401      3198            mov     a,#0x01
0C65 4B        3199            orl     a,r3
0C66 F0        3200            movx    @dptr,a
0C67 A3        3201            inc     dptr
0C68 EC        3202            mov     a,r4
0C69 F0        3203            movx    @dptr,a
0C6A A3        3204            inc     dptr
0C6B ED        3205            mov     a,r5
0C6C F0        3206            movx    @dptr,a
0C6D A3        3207            inc     dptr
0C6E EE        3208            mov     a,r6
0C6F F0        3209            movx    @dptr,a
0C70           3210   L028002?:
0C70           3211   ;        main.c:780: PD_SCK = 0;
0C70 C2A5      3212            clr     _P2_5
0C72           3213   ;        main.c:781: for (j = 0; j < 4; j++);
0C72 90D478    3214            mov     dptr,#_ReadHX711_j_1_169
0C75 E4        3215            clr     a
0C76 F0        3216            movx    @dptr,a
0C77           3217   L028007?:
0C77 90D478    3218            mov     dptr,#_ReadHX711_j_1_169
0C7A E0        3219            movx    a,@dptr
0C7B FB        3220            mov     r3,a
0C7C C3        3221            clr     c
0C7D 6480      3222            xrl     a,#0x80
0C7F 9484      3223            subb    a,#0x84
0C81 5000      3224            jnc     L028013?
0C83 90D478    3225            mov     dptr,#_ReadHX711_j_1_169
0C86 E0        3226            movx    a,@dptr
0C87 2401      3227            add     a,#0x01
0C89 F0        3228            movx    @dptr,a
0C8A 8000      3229            sjmp    L028007?
0C8C           3230   L028013?:
0C8C           3231   ;        main.c:773: for (i = 0; i < 24; i++) {
0C8C 0A        3232            inc     r2
0C8D 020000    3233            ljmp    L028011?
0C90           3234   L028014?:
0C90           3235   ;        main.c:784: PD_SCK = 1;
0C90 D2A5      3236            setb    _P2_5
0C92           3237   ;        main.c:785: for (j = 0; j < 4; j++);
0C92 90D478    3238            mov     dptr,#_ReadHX711_j_1_169
0C95 E4        3239            clr     a
0C96 F0        3240            movx    @dptr,a
0C97           3241   L028015?:
0C97 90D478    3242            mov     dptr,#_ReadHX711_j_1_169
0C9A E0        3243            movx    a,@dptr
0C9B FA        3244            mov     r2,a
0C9C C3        3245            clr     c
0C9D 6480      3246            xrl     a,#0x80
0C9F 9484      3247            subb    a,#0x84
0CA1 5000      3248            jnc     L028018?
0CA3 90D478    3249            mov     dptr,#_ReadHX711_j_1_169
0CA6 E0        3250            movx    a,@dptr
0CA7 2401      3251            add     a,#0x01
0CA9 F0        3252            movx    @dptr,a
0CAA 8000      3253            sjmp    L028015?
0CAC           3254   L028018?:
0CAC           3255   ;        main.c:786: PD_SCK = 0;
0CAC C2A5      3256            clr     _P2_5
0CAE           3257   ;        main.c:787: for (j = 0; j < 4; j++);
0CAE 90D478    3258            mov     dptr,#_ReadHX711_j_1_169
0CB1 E4        3259            clr     a
0CB2 F0        3260            movx    @dptr,a
0CB3           3261   L028019?:
0CB3 90D478    3262            mov     dptr,#_ReadHX711_j_1_169
0CB6 E0        3263            movx    a,@dptr
0CB7 FA        3264            mov     r2,a
0CB8 C3        3265            clr     c
0CB9 6480      3266            xrl     a,#0x80
0CBB 9484      3267            subb    a,#0x84
0CBD 5000      3268            jnc     L028022?
0CBF 90D478    3269            mov     dptr,#_ReadHX711_j_1_169
0CC2 E0        3270            movx    a,@dptr
0CC3 2401      3271            add     a,#0x01
0CC5 F0        3272            movx    @dptr,a
0CC6 8000      3273            sjmp    L028019?
0CC8           3274   L028022?:
0CC8           3275   ;        main.c:788: ans = (dataa % 1000000)/10;
0CC8 90D428    3276            mov     dptr,#_ReadHX711_dataa_1_169
0CCB E0        3277            movx    a,@dptr
0CCC FA        3278            mov     r2,a
0CCD A3        3279            inc     dptr
0CCE E0        3280            movx    a,@dptr
0CCF FB        3281            mov     r3,a
0CD0 A3        3282            inc     dptr
0CD1 E0        3283            movx    a,@dptr
0CD2 FC        3284            mov     r4,a
0CD3 A3        3285            inc     dptr
0CD4 E0        3286            movx    a,@dptr
0CD5 FD        3287            mov     r5,a
0CD6 750040    3288            mov     __modulong_PARM_2,#0x40
0CD9 750142    3289            mov     (__modulong_PARM_2 + 1),#0x42
0CDC 75020F    3290            mov     (__modulong_PARM_2 + 2),#0x0F
0CDF 750300    3291            mov     (__modulong_PARM_2 + 3),#0x00
0CE2 8A82      3292            mov     dpl,r2
0CE4 8B83      3293            mov     dph,r3
0CE6 8CF0      3294            mov     b,r4
0CE8 ED        3295            mov     a,r5
0CE9 120000    3296            lcall   __modulong
0CEC AA82      3297            mov     r2,dpl
0CEE AB83      3298            mov     r3,dph
0CF0 ACF0      3299            mov     r4,b
0CF2 FD        3300            mov     r5,a
0CF3 75000A    3301            mov     __divulong_PARM_2,#0x0A
0CF6 E4        3302            clr     a
0CF7 F501      3303            mov     (__divulong_PARM_2 + 1),a
0CF9 F502      3304            mov     (__divulong_PARM_2 + 2),a
0CFB F503      3305            mov     (__divulong_PARM_2 + 3),a
0CFD 8A82      3306            mov     dpl,r2
0CFF 8B83      3307            mov     dph,r3
0D01 8CF0      3308            mov     b,r4
0D03 ED        3309            mov     a,r5
0D04           3310   ;        main.c:789: return ans;
0D04 020000    3311            ljmp    __divulong
0D07           3312   ;------------------------------------------------------------
0D07           3313   ;Allocation info for local variables in function 'Timer5_ISR'
0D07           3314   ;------------------------------------------------------------
0D07           3315   ;------------------------------------------------------------
0D07           3316   ;        main.c:792: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0D07           3317   ;        -----------------------------------------
0D07           3318   ;         function Timer5_ISR
0D07           3319   ;        -----------------------------------------
0D07           3320   _Timer5_ISR:
0D07 C058      3321            push    bits
0D09 C0E0      3322            push    acc
0D0B C0F0      3323            push    b
0D0D C082      3324            push    dpl
0D0F C083      3325            push    dph
0D11 C002      3326            push    (0+2)
0D13 C003      3327            push    (0+3)
0D15 C004      3328            push    (0+4)
0D17 C005      3329            push    (0+5)
0D19 C006      3330            push    (0+6)
0D1B C007      3331            push    (0+7)
0D1D C000      3332            push    (0+0)
0D1F C001      3333            push    (0+1)
0D21 C0D0      3334            push    psw
0D23 75D000    3335            mov     psw,#0x00
0D26           3336   ;        main.c:794: SFRPAGE=0x10;
0D26 75A710    3337            mov     _SFRPAGE,#0x10
0D29           3338   ;        main.c:795: TF5H = 0; // Clear Timer5 interrupt flag
0D29 C2C7      3339            clr     _TF5H
0D2B           3340   ;        main.c:796: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0D2B 75D2C4    3341            mov     _TMR5RL,#0xC4
0D2E 75D3FF    3342            mov     (_TMR5RL >> 8),#0xFF
0D31           3343   ;        main.c:798: fre_mea_count++;
0D31 905488    3344            mov     dptr,#_fre_mea_count
0D34 E0        3345            movx    a,@dptr
0D35 2401      3346            add     a,#0x01
0D37 F0        3347            movx    @dptr,a
0D38 A3        3348            inc     dptr
0D39 E0        3349            movx    a,@dptr
0D3A 3400      3350            addc    a,#0x00
0D3C F0        3351            movx    @dptr,a
0D3D           3352   ;        main.c:799: if(fre_mea_count == 1000){
0D3D 905488    3353            mov     dptr,#_fre_mea_count
0D40 E0        3354            movx    a,@dptr
0D41 FA        3355            mov     r2,a
0D42 A3        3356            inc     dptr
0D43 E0        3357            movx    a,@dptr
0D44 FB        3358            mov     r3,a
0D45 BAE8B0    3359            cjne    r2,#0xE8,L029004?
0D48 BB03B0    3360            cjne    r3,#0x03,L029004?
0D4B           3361   ;        main.c:800: fre_mea_count = 0;
0D4B 905488    3362            mov     dptr,#_fre_mea_count
0D4E E4        3363            clr     a
0D4F F0        3364            movx    @dptr,a
0D50 A3        3365            inc     dptr
0D51 F0        3366            movx    @dptr,a
0D52           3367   ;        main.c:801: if(mea_yes) freq100 = get_freq();
0D52 905278    3368            mov     dptr,#_mea_yes
0D55 E0        3369            movx    a,@dptr
0D56 FA        3370            mov     r2,a
0D57 6000      3371            jz      L029004?
0D59 120000    3372            lcall   _get_freq
0D5C AA82      3373            mov     r2,dpl
0D5E AB83      3374            mov     r3,dph
0D60 905B48    3375            mov     dptr,#_freq100
0D63 EA        3376            mov     a,r2
0D64 F0        3377            movx    @dptr,a
0D65 A3        3378            inc     dptr
0D66 EB        3379            mov     a,r3
0D67 F0        3380            movx    @dptr,a
0D68 EB        3381            mov     a,r3
0D69 33        3382            rlc     a
0D6A 95E0      3383            subb    a,acc
0D6C A3        3384            inc     dptr
0D6D F0        3385            movx    @dptr,a
0D6E A3        3386            inc     dptr
0D6F F0        3387            movx    @dptr,a
0D70           3388   L029004?:
0D70           3389   ;        main.c:804: weight_mea_count++;
0D70 905448    3390            mov     dptr,#_weight_mea_count
0D73 E0        3391            movx    a,@dptr
0D74 2401      3392            add     a,#0x01
0D76 F0        3393            movx    @dptr,a
0D77 A3        3394            inc     dptr
0D78 E0        3395            movx    a,@dptr
0D79 3400      3396            addc    a,#0x00
0D7B F0        3397            movx    @dptr,a
0D7C           3398   ;        main.c:805: if(weight_mea_count == 20000){
0D7C 905448    3399            mov     dptr,#_weight_mea_count
0D7F E0        3400            movx    a,@dptr
0D80 FA        3401            mov     r2,a
0D81 A3        3402            inc     dptr
0D82 E0        3403            movx    a,@dptr
0D83 FB        3404            mov     r3,a
0D84 BA2030    3405            cjne    r2,#0x20,L029008?
0D87 BB4E30    3406            cjne    r3,#0x4E,L029008?
0D8A           3407   ;        main.c:806: weight_mea_count = 0;
0D8A 905448    3408            mov     dptr,#_weight_mea_count
0D8D E4        3409            clr     a
0D8E F0        3410            movx    @dptr,a
0D8F A3        3411            inc     dptr
0D90 F0        3412            movx    @dptr,a
0D91           3413   ;        main.c:807: if(mea_yes) weight = ReadHX711();
0D91 905278    3414            mov     dptr,#_mea_yes
0D94 E0        3415            movx    a,@dptr
0D95 FA        3416            mov     r2,a
0D96 6000      3417            jz      L029008?
0D98 120000    3418            lcall   _ReadHX711
0D9B E582      3419            mov     a,dpl
0D9D 8583F0    3420            mov     b,dph
0DA0 905238    3421            mov     dptr,#_weight
0DA3 F0        3422            movx    @dptr,a
0DA4 A3        3423            inc     dptr
0DA5 E5F0      3424            mov     a,b
0DA7 F0        3425            movx    @dptr,a
0DA8           3426   L029008?:
0DA8           3427   ;        main.c:810: pwm_counter++; 
0DA8 905788    3428            mov     dptr,#_pwm_counter
0DAB E0        3429            movx    a,@dptr
0DAC 2401      3430            add     a,#0x01
0DAE F0        3431            movx    @dptr,a
0DAF A3        3432            inc     dptr
0DB0 E0        3433            movx    a,@dptr
0DB1 3400      3434            addc    a,#0x00
0DB3 F0        3435            movx    @dptr,a
0DB4           3436   ;        main.c:811: if (pwm_counter == 100){
0DB4 905788    3437            mov     dptr,#_pwm_counter
0DB7 E0        3438            movx    a,@dptr
0DB8 FA        3439            mov     r2,a
0DB9 A3        3440            inc     dptr
0DBA E0        3441            movx    a,@dptr
0DBB FB        3442            mov     r3,a
0DBC BA6470    3443            cjne    r2,#0x64,L029010?
0DBF BB0070    3444            cjne    r3,#0x00,L029010?
0DC2           3445   ;        main.c:812: pwm_counter = 0; 
0DC2 905788    3446            mov     dptr,#_pwm_counter
0DC5 E4        3447            clr     a
0DC6 F0        3448            movx    @dptr,a
0DC7 A3        3449            inc     dptr
0DC8 F0        3450            movx    @dptr,a
0DC9           3451   L029010?:
0DC9           3452   ;        main.c:815: if (pwm_right > pwm_counter){
0DC9 9056C8    3453            mov     dptr,#_pwm_right
0DCC E0        3454            movx    a,@dptr
0DCD FA        3455            mov     r2,a
0DCE 905788    3456            mov     dptr,#_pwm_counter
0DD1 E0        3457            movx    a,@dptr
0DD2 FB        3458            mov     r3,a
0DD3 A3        3459            inc     dptr
0DD4 E0        3460            movx    a,@dptr
0DD5 FC        3461            mov     r4,a
0DD6 7D00      3462            mov     r5,#0x00
0DD8 C3        3463            clr     c
0DD9 EB        3464            mov     a,r3
0DDA 9A        3465            subb    a,r2
0DDB EC        3466            mov     a,r4
0DDC 9D        3467            subb    a,r5
0DDD 5000      3468            jnc     L029015?
0DDF           3469   ;        main.c:816: if(L_motor_dir){
0DDF 905688    3470            mov     dptr,#_L_motor_dir
0DE2 E0        3471            movx    a,@dptr
0DE3 FA        3472            mov     r2,a
0DE4 6000      3473            jz      L029012?
0DE6           3474   ;        main.c:817: L_bridge_1 = 1; 
0DE6 D2A1      3475            setb    _P2_1
0DE8           3476   ;        main.c:818: L_bridge_2 = 0; 
0DE8 C2A2      3477            clr     _P2_2
0DEA 8000      3478            sjmp    L029016?
0DEC           3479   L029012?:
0DEC           3480   ;        main.c:821: L_bridge_1 = 0; 
0DEC C2A1      3481            clr     _P2_1
0DEE           3482   ;        main.c:822: L_bridge_2 = 1; 
0DEE D2A2      3483            setb    _P2_2
0DF0 8000      3484            sjmp    L029016?
0DF2           3485   L029015?:
0DF2           3486   ;        main.c:826: L_bridge_1 = 0; 
0DF2 C2A1      3487            clr     _P2_1
0DF4           3488   ;        main.c:827: L_bridge_2 = 0; 
0DF4 C2A2      3489            clr     _P2_2
0DF6           3490   L029016?:
0DF6           3491   ;        main.c:829: if (pwm_left > pwm_counter){
0DF6 905708    3492            mov     dptr,#_pwm_left
0DF9 E0        3493            movx    a,@dptr
0DFA FA        3494            mov     r2,a
0DFB 7D00      3495            mov     r5,#0x00
0DFD C3        3496            clr     c
0DFE EB        3497            mov     a,r3
0DFF 9A        3498            subb    a,r2
0E00 EC        3499            mov     a,r4
0E01 9D        3500            subb    a,r5
0E02 5000      3501            jnc     L029021?
0E04           3502   ;        main.c:830: if (R_motor_dir){
0E04 905648    3503            mov     dptr,#_R_motor_dir
0E07 E0        3504            movx    a,@dptr
0E08 FA        3505            mov     r2,a
0E09 6000      3506            jz      L029018?
0E0B           3507   ;        main.c:831: R_bridge_1 = 1; 
0E0B D2A4      3508            setb    _P2_4
0E0D           3509   ;        main.c:832: R_bridge_2 = 0;
0E0D C2A3      3510            clr     _P2_3
0E0F 8000      3511            sjmp    L029022?
0E11           3512   L029018?:
0E11           3513   ;        main.c:835: R_bridge_1 = 0; 
0E11 C2A4      3514            clr     _P2_4
0E13           3515   ;        main.c:836: R_bridge_2 = 1;
0E13 D2A3      3516            setb    _P2_3
0E15 8000      3517            sjmp    L029022?
0E17           3518   L029021?:
0E17           3519   ;        main.c:840: R_bridge_1 = 0; 
0E17 C2A4      3520            clr     _P2_4
0E19           3521   ;        main.c:841: R_bridge_2 = 0; 
0E19 C2A3      3522            clr     _P2_3
0E1B           3523   L029022?:
0E1B           3524   ;        main.c:844: servo_counter++;
0E1B 905748    3525            mov     dptr,#_servo_counter
0E1E E0        3526            movx    a,@dptr
0E1F 2401      3527            add     a,#0x01
0E21 F0        3528            movx    @dptr,a
0E22 A3        3529            inc     dptr
0E23 E0        3530            movx    a,@dptr
0E24 3400      3531            addc    a,#0x00
0E26 F0        3532            movx    @dptr,a
0E27           3533   ;        main.c:845: if(servo_counter==2000)
0E27 905748    3534            mov     dptr,#_servo_counter
0E2A E0        3535            movx    a,@dptr
0E2B FA        3536            mov     r2,a
0E2C A3        3537            inc     dptr
0E2D E0        3538            movx    a,@dptr
0E2E FB        3539            mov     r3,a
0E2F BAD030    3540            cjne    r2,#0xD0,L029024?
0E32 BB0730    3541            cjne    r3,#0x07,L029024?
0E35           3542   ;        main.c:847: servo_counter=0;
0E35 905748    3543            mov     dptr,#_servo_counter
0E38 E4        3544            clr     a
0E39 F0        3545            movx    @dptr,a
0E3A A3        3546            inc     dptr
0E3B F0        3547            movx    @dptr,a
0E3C           3548   ;        main.c:848: Servo_arm=1;
0E3C D296      3549            setb    _P1_6
0E3E           3550   ;        main.c:849: Servo_base=1;
0E3E D297      3551            setb    _P1_7
0E40           3552   L029024?:
0E40           3553   ;        main.c:851: if(servo_arm==servo_counter)
0E40 9055C8    3554            mov     dptr,#_servo_arm
0E43 E0        3555            movx    a,@dptr
0E44 FA        3556            mov     r2,a
0E45 905748    3557            mov     dptr,#_servo_counter
0E48 E0        3558            movx    a,@dptr
0E49 FB        3559            mov     r3,a
0E4A A3        3560            inc     dptr
0E4B E0        3561            movx    a,@dptr
0E4C FC        3562            mov     r4,a
0E4D 7D00      3563            mov     r5,#0x00
0E4F EA        3564            mov     a,r2
0E50 B50370    3565            cjne    a,ar3,L029026?
0E53 ED        3566            mov     a,r5
0E54 B50470    3567            cjne    a,ar4,L029026?
0E57           3568   ;        main.c:853: Servo_arm=0;
0E57 C296      3569            clr     _P1_6
0E59           3570   L029026?:
0E59           3571   ;        main.c:855: if(servo_base==servo_counter)
0E59 905608    3572            mov     dptr,#_servo_base
0E5C E0        3573            movx    a,@dptr
0E5D FA        3574            mov     r2,a
0E5E 7D00      3575            mov     r5,#0x00
0E60 B503B0    3576            cjne    a,ar3,L029029?
0E63 ED        3577            mov     a,r5
0E64 B504B0    3578            cjne    a,ar4,L029029?
0E67           3579   ;        main.c:857: Servo_base=0;
0E67 C297      3580            clr     _P1_7
0E69           3581   L029029?:
0E69 D0D0      3582            pop     psw
0E6B D001      3583            pop     (0+1)
0E6D D000      3584            pop     (0+0)
0E6F D007      3585            pop     (0+7)
0E71 D006      3586            pop     (0+6)
0E73 D005      3587            pop     (0+5)
0E75 D004      3588            pop     (0+4)
0E77 D003      3589            pop     (0+3)
0E79 D002      3590            pop     (0+2)
0E7B D083      3591            pop     dph
0E7D D082      3592            pop     dpl
0E7F D0F0      3593            pop     b
0E81 D0E0      3594            pop     acc
0E83 D058      3595            pop     bits
0E85 32        3596            reti
0E86           3597   ;------------------------------------------------------------
0E86           3598   ;Allocation info for local variables in function 'servo_pick'
0E86           3599   ;------------------------------------------------------------
0E86           3600   ;i                         Allocated with name '_servo_pick_i_1_188'
0E86           3601   ;------------------------------------------------------------
0E86           3602   ;        main.c:861: void servo_pick(){
0E86           3603   ;        -----------------------------------------
0E86           3604   ;         function servo_pick
0E86           3605   ;        -----------------------------------------
0E86           3606   _servo_pick:
0E86           3607   ;        main.c:863: servo_arm = 1;
0E86 9055C8    3608            mov     dptr,#_servo_arm
0E89 7401      3609            mov     a,#0x01
0E8B F0        3610            movx    @dptr,a
0E8C           3611   ;        main.c:865: servo_base = 250;
0E8C 905608    3612            mov     dptr,#_servo_base
0E8F 74FA      3613            mov     a,#0xFA
0E91 F0        3614            movx    @dptr,a
0E92           3615   ;        main.c:866: waitms(200);
0E92 9000C8    3616            mov     dptr,#0x00C8
0E95 120000    3617            lcall   _waitms
0E98           3618   ;        main.c:867: servo_arm = 250;
0E98 9055C8    3619            mov     dptr,#_servo_arm
0E9B 74FA      3620            mov     a,#0xFA
0E9D F0        3621            movx    @dptr,a
0E9E           3622   ;        main.c:868: Magnet = 1;
0E9E D295      3623            setb    _P1_5
0EA0           3624   ;        main.c:869: waitms(200);
0EA0 9000C8    3625            mov     dptr,#0x00C8
0EA3 120000    3626            lcall   _waitms
0EA6           3627   ;        main.c:870: for(i = 0; i<89; i++){
0EA6 7A00      3628            mov     r2,#0x00
0EA8 7B00      3629            mov     r3,#0x00
0EAA           3630   L030001?:
0EAA C3        3631            clr     c
0EAB EA        3632            mov     a,r2
0EAC 9459      3633            subb    a,#0x59
0EAE EB        3634            mov     a,r3
0EAF 6480      3635            xrl     a,#0x80
0EB1 9480      3636            subb    a,#0x80
0EB3 5000      3637            jnc     L030004?
0EB5           3638   ;        main.c:871: waitms(5);
0EB5 900005    3639            mov     dptr,#0x0005
0EB8 C002      3640            push    ar2
0EBA C003      3641            push    ar3
0EBC 120000    3642            lcall   _waitms
0EBF D003      3643            pop     ar3
0EC1 D002      3644            pop     ar2
0EC3           3645   ;        main.c:872: servo_base--;
0EC3 905608    3646            mov     dptr,#_servo_base
0EC6 E0        3647            movx    a,@dptr
0EC7 14        3648            dec     a
0EC8 905608    3649            mov     dptr,#_servo_base
0ECB F0        3650            movx    @dptr,a
0ECC           3651   ;        main.c:870: for(i = 0; i<89; i++){
0ECC 0A        3652            inc     r2
0ECD BA00F0    3653            cjne    r2,#0x00,L030001?
0ED0 0B        3654            inc     r3
0ED1 8000      3655            sjmp    L030001?
0ED3           3656   L030004?:
0ED3           3657   ;        main.c:874: waitms(200);
0ED3 9000C8    3658            mov     dptr,#0x00C8
0ED6 120000    3659            lcall   _waitms
0ED9           3660   ;        main.c:875: for(i = 0; i<159; i++){
0ED9 7A00      3661            mov     r2,#0x00
0EDB 7B00      3662            mov     r3,#0x00
0EDD           3663   L030005?:
0EDD C3        3664            clr     c
0EDE EA        3665            mov     a,r2
0EDF 949F      3666            subb    a,#0x9F
0EE1 EB        3667            mov     a,r3
0EE2 6480      3668            xrl     a,#0x80
0EE4 9480      3669            subb    a,#0x80
0EE6 5000      3670            jnc     L030008?
0EE8           3671   ;        main.c:876: waitms(5);
0EE8 900005    3672            mov     dptr,#0x0005
0EEB C002      3673            push    ar2
0EED C003      3674            push    ar3
0EEF 120000    3675            lcall   _waitms
0EF2 D003      3676            pop     ar3
0EF4 D002      3677            pop     ar2
0EF6           3678   ;        main.c:877: servo_arm--;
0EF6 9055C8    3679            mov     dptr,#_servo_arm
0EF9 E0        3680            movx    a,@dptr
0EFA 14        3681            dec     a
0EFB 9055C8    3682            mov     dptr,#_servo_arm
0EFE F0        3683            movx    @dptr,a
0EFF           3684   ;        main.c:875: for(i = 0; i<159; i++){
0EFF 0A        3685            inc     r2
0F00 BA0070    3686            cjne    r2,#0x00,L030005?
0F03 0B        3687            inc     r3
0F04 8000      3688            sjmp    L030005?
0F06           3689   L030008?:
0F06           3690   ;        main.c:879: waitms(200);
0F06 9000C8    3691            mov     dptr,#0x00C8
0F09 120000    3692            lcall   _waitms
0F0C           3693   ;        main.c:880: for(i = 0; i<65; i++){
0F0C 7A00      3694            mov     r2,#0x00
0F0E 7B00      3695            mov     r3,#0x00
0F10           3696   L030009?:
0F10 C3        3697            clr     c
0F11 EA        3698            mov     a,r2
0F12 9441      3699            subb    a,#0x41
0F14 EB        3700            mov     a,r3
0F15 6480      3701            xrl     a,#0x80
0F17 9480      3702            subb    a,#0x80
0F19 5000      3703            jnc     L030012?
0F1B           3704   ;        main.c:881: waitms(5);
0F1B 900005    3705            mov     dptr,#0x0005
0F1E C002      3706            push    ar2
0F20 C003      3707            push    ar3
0F22 120000    3708            lcall   _waitms
0F25 D003      3709            pop     ar3
0F27 D002      3710            pop     ar2
0F29           3711   ;        main.c:882: servo_base--;
0F29 905608    3712            mov     dptr,#_servo_base
0F2C E0        3713            movx    a,@dptr
0F2D 14        3714            dec     a
0F2E 905608    3715            mov     dptr,#_servo_base
0F31 F0        3716            movx    @dptr,a
0F32           3717   ;        main.c:880: for(i = 0; i<65; i++){
0F32 0A        3718            inc     r2
0F33 BA00F0    3719            cjne    r2,#0x00,L030009?
0F36 0B        3720            inc     r3
0F37 8000      3721            sjmp    L030009?
0F39           3722   L030012?:
0F39           3723   ;        main.c:884: waitms(500);
0F39 9001F4    3724            mov     dptr,#0x01F4
0F3C 120000    3725            lcall   _waitms
0F3F           3726   ;        main.c:885: Magnet = 0;
0F3F C295      3727            clr     _P1_5
0F41           3728   ;        main.c:886: waitms(200);
0F41 9000C8    3729            mov     dptr,#0x00C8
0F44 120000    3730            lcall   _waitms
0F47           3731   ;        main.c:887: servo_arm=1;
0F47 9055C8    3732            mov     dptr,#_servo_arm
0F4A 7401      3733            mov     a,#0x01
0F4C F0        3734            movx    @dptr,a
0F4D           3735   ;        main.c:888: servo_base=1;
0F4D 905608    3736            mov     dptr,#_servo_base
0F50 7401      3737            mov     a,#0x01
0F52 F0        3738            movx    @dptr,a
0F53           3739   ;        main.c:889: return;
0F53 22        3740            ret
0F54           3741   ;------------------------------------------------------------
0F54           3742   ;Allocation info for local variables in function 'check_bound'
0F54           3743   ;------------------------------------------------------------
0F54           3744   ;d2                        Allocated with name '_check_bound_PARM_2'
0F54           3745   ;d1                        Allocated to registers r2 r3 
0F54           3746   ;------------------------------------------------------------
0F54           3747   ;        main.c:892: int check_bound(int d1, int d2){
0F54           3748   ;        -----------------------------------------
0F54           3749   ;         function check_bound
0F54           3750   ;        -----------------------------------------
0F54           3751   _check_bound:
0F54 AA82      3752            mov     r2,dpl
0F56 AB83      3753            mov     r3,dph
0F58           3754   ;        main.c:893: if(d1>12000||d2>12000)      return 1;
0F58 C3        3755            clr     c
0F59 74E0      3756            mov     a,#0xE0
0F5B 9A        3757            subb    a,r2
0F5C 74AE      3758            mov     a,#(0x2E ^ 0x80)
0F5E 8BF0      3759            mov     b,r3
0F60 63F080    3760            xrl     b,#0x80
0F63 95F0      3761            subb    a,b
0F65 4000      3762            jc      L031001?
0F67 74E0      3763            mov     a,#0xE0
0F69 95A8      3764            subb    a,_check_bound_PARM_2
0F6B 74AE      3765            mov     a,#(0x2E ^ 0x80)
0F6D 85A9F0    3766            mov     b,(_check_bound_PARM_2 + 1)
0F70 63F080    3767            xrl     b,#0x80
0F73 95F0      3768            subb    a,b
0F75 5000      3769            jnc     L031002?
0F77           3770   L031001?:
0F77 900001    3771            mov     dptr,#0x0001
0F7A           3772   ;        main.c:894: else return 0;
0F7A 22        3773            ret
0F7B           3774   L031002?:
0F7B 900000    3775            mov     dptr,#0x0000
0F7E 22        3776            ret
0F7F           3777   ;------------------------------------------------------------
0F7F           3778   ;Allocation info for local variables in function 'Init_all'
0F7F           3779   ;------------------------------------------------------------
0F7F           3780   ;------------------------------------------------------------
0F7F           3781   ;        main.c:897: void Init_all(){
0F7F           3782   ;        -----------------------------------------
0F7F           3783   ;         function Init_all
0F7F           3784   ;        -----------------------------------------
0F7F           3785   _Init_all:
0F7F           3786   ;        main.c:899: Set_Pin_Output(0x24);
0F7F 758224    3787            mov     dpl,#0x24
0F82 120000    3788            lcall   _Set_Pin_Output
0F85           3789   ;        main.c:900: Set_Pin_Output(0x23);
0F85 758223    3790            mov     dpl,#0x23
0F88 120000    3791            lcall   _Set_Pin_Output
0F8B           3792   ;        main.c:901: Set_Pin_Output(0x22);
0F8B 758222    3793            mov     dpl,#0x22
0F8E 120000    3794            lcall   _Set_Pin_Output
0F91           3795   ;        main.c:902: Set_Pin_Output(0x21);
0F91 758221    3796            mov     dpl,#0x21
0F94 120000    3797            lcall   _Set_Pin_Output
0F97           3798   ;        main.c:903: Set_Pin_Output(0x17);
0F97 758217    3799            mov     dpl,#0x17
0F9A 120000    3800            lcall   _Set_Pin_Output
0F9D           3801   ;        main.c:904: Set_Pin_Output(0x16);
0F9D 758216    3802            mov     dpl,#0x16
0FA0 120000    3803            lcall   _Set_Pin_Output
0FA3           3804   ;        main.c:905: Set_Pin_Output(0x15);
0FA3 758215    3805            mov     dpl,#0x15
0FA6 120000    3806            lcall   _Set_Pin_Output
0FA9           3807   ;        main.c:906: Set_Pin_Output(0x10); // CS
0FA9 758210    3808            mov     dpl,#0x10
0FAC 120000    3809            lcall   _Set_Pin_Output
0FAF           3810   ;        main.c:908: Set_Pin_Input(0x30);
0FAF 758230    3811            mov     dpl,#0x30
0FB2 120000    3812            lcall   _Set_Pin_Input
0FB5           3813   ;        main.c:909: Set_Pin_Output(0x25); // CLK for Load
0FB5 758225    3814            mov     dpl,#0x25
0FB8 120000    3815            lcall   _Set_Pin_Output
0FBB           3816   ;        main.c:910: Set_Pin_Input(0x26);
0FBB 758226    3817            mov     dpl,#0x26
0FBE 120000    3818            lcall   _Set_Pin_Input
0FC1           3819   ;        main.c:913: InitPinADC(1,3);
0FC1 75F803    3820            mov     _InitPinADC_PARM_2,#0x03
0FC4 758201    3821            mov     dpl,#0x01
0FC7 120000    3822            lcall   _InitPinADC
0FCA           3823   ;        main.c:914: InitPinADC(1,4);
0FCA 75F804    3824            mov     _InitPinADC_PARM_2,#0x04
0FCD 758201    3825            mov     dpl,#0x01
0FD0 120000    3826            lcall   _InitPinADC
0FD3           3827   ;        main.c:915: InitADC();
0FD3 120000    3828            lcall   _InitADC
0FD6           3829   ;        main.c:917: TMOD&=0b_1111_0000; 
0FD6 5389F0    3830            anl     _TMOD,#0xF0
0FD9           3831   ;        main.c:918: TMOD|=0b_0000_0001; 
0FD9 438901    3832            orl     _TMOD,#0x01
0FDC           3833   ;        main.c:919: TR0=0; 
0FDC C28C      3834            clr     _TR0
0FDE           3835   ;        main.c:921: Servo_arm=0;
0FDE C296      3836            clr     _P1_6
0FE0           3837   ;        main.c:922: Servo_base=0;
0FE0 C297      3838            clr     _P1_7
0FE2           3839   ;        main.c:923: Magnet = 0;
0FE2 C295      3840            clr     _P1_5
0FE4           3841   ;        main.c:924: PD_SCK = 0;
0FE4 C2A5      3842            clr     _P2_5
0FE6           3843   ;        main.c:925: return;
0FE6 22        3844            ret
0FE7           3845   ;------------------------------------------------------------
0FE7           3846   ;Allocation info for local variables in function 'Move_back_ms'
0FE7           3847   ;------------------------------------------------------------
0FE7           3848   ;ms                        Allocated to registers r2 r3 
0FE7           3849   ;------------------------------------------------------------
0FE7           3850   ;        main.c:928: void Move_back_ms(int ms){
0FE7           3851   ;        -----------------------------------------
0FE7           3852   ;         function Move_back_ms
0FE7           3853   ;        -----------------------------------------
0FE7           3854   _Move_back_ms:
0FE7 AA82      3855            mov     r2,dpl
0FE9 AB83      3856            mov     r3,dph
0FEB           3857   ;        main.c:930: L_motor_dir = 1;
0FEB 905688    3858            mov     dptr,#_L_motor_dir
0FEE 7401      3859            mov     a,#0x01
0FF0 F0        3860            movx    @dptr,a
0FF1           3861   ;        main.c:931: R_motor_dir = 1;
0FF1 905648    3862            mov     dptr,#_R_motor_dir
0FF4 7401      3863            mov     a,#0x01
0FF6 F0        3864            movx    @dptr,a
0FF7           3865   ;        main.c:933: pwm_left = 50;
0FF7 905708    3866            mov     dptr,#_pwm_left
0FFA 7432      3867            mov     a,#0x32
0FFC F0        3868            movx    @dptr,a
0FFD           3869   ;        main.c:934: pwm_right = 50;
0FFD 9056C8    3870            mov     dptr,#_pwm_right
1000 7432      3871            mov     a,#0x32
1002 F0        3872            movx    @dptr,a
1003           3873   ;        main.c:936: waitms(ms);
1003 8A82      3874            mov     dpl,r2
1005 8B83      3875            mov     dph,r3
1007 120000    3876            lcall   _waitms
100A           3877   ;        main.c:938: L_motor_dir = 0;
100A 905688    3878            mov     dptr,#_L_motor_dir
100D           3879   ;        main.c:939: R_motor_dir = 0;
100D           3880   ;        main.c:940: pwm_left = 0;
100D           3881   ;        main.c:941: pwm_right = 0;
100D E4        3882            clr     a
100E F0        3883            movx    @dptr,a
100F 905648    3884            mov     dptr,#_R_motor_dir
1012 F0        3885            movx    @dptr,a
1013 905708    3886            mov     dptr,#_pwm_left
1016 F0        3887            movx    @dptr,a
1017 9056C8    3888            mov     dptr,#_pwm_right
101A F0        3889            movx    @dptr,a
101B           3890   ;        main.c:942: return;
101B 22        3891            ret
101C           3892   ;------------------------------------------------------------
101C           3893   ;Allocation info for local variables in function 'Right_angle'
101C           3894   ;------------------------------------------------------------
101C           3895   ;angle                     Allocated to registers r2 r3 
101C           3896   ;------------------------------------------------------------
101C           3897   ;        main.c:945: void Right_angle(int angle){
101C           3898   ;        -----------------------------------------
101C           3899   ;         function Right_angle
101C           3900   ;        -----------------------------------------
101C           3901   _Right_angle:
101C AA82      3902            mov     r2,dpl
101E AB83      3903            mov     r3,dph
1020           3904   ;        main.c:947: L_motor_dir = 1;
1020 905688    3905            mov     dptr,#_L_motor_dir
1023 7401      3906            mov     a,#0x01
1025 F0        3907            movx    @dptr,a
1026           3908   ;        main.c:948: R_motor_dir = 0;
1026 905648    3909            mov     dptr,#_R_motor_dir
1029 E4        3910            clr     a
102A F0        3911            movx    @dptr,a
102B           3912   ;        main.c:949: pwm_left = 80;
102B 905708    3913            mov     dptr,#_pwm_left
102E 7450      3914            mov     a,#0x50
1030 F0        3915            movx    @dptr,a
1031           3916   ;        main.c:950: pwm_right = 80 * pwm_corr;
1031 C002      3917            push    ar2
1033 C003      3918            push    ar3
1035 9053B8    3919            mov     dptr,#_pwm_corr
1038 E0        3920            movx    a,@dptr
1039 C0E0      3921            push    acc
103B A3        3922            inc     dptr
103C E0        3923            movx    a,@dptr
103D C0E0      3924            push    acc
103F A3        3925            inc     dptr
1040 E0        3926            movx    a,@dptr
1041 C0E0      3927            push    acc
1043 A3        3928            inc     dptr
1044 E0        3929            movx    a,@dptr
1045 C0E0      3930            push    acc
1047 900000    3931            mov     dptr,#0x0000
104A 75F0A0    3932            mov     b,#0xA0
104D 7442      3933            mov     a,#0x42
104F 120000    3934            lcall   ___fsmul
1052 AC82      3935            mov     r4,dpl
1054 AD83      3936            mov     r5,dph
1056 AEF0      3937            mov     r6,b
1058 FF        3938            mov     r7,a
1059 E581      3939            mov     a,sp
105B 24FC      3940            add     a,#0xfc
105D F581      3941            mov     sp,a
105F 8C82      3942            mov     dpl,r4
1061 8D83      3943            mov     dph,r5
1063 8EF0      3944            mov     b,r6
1065 EF        3945            mov     a,r7
1066 120000    3946            lcall   ___fs2uchar
1069 E582      3947            mov     a,dpl
106B D003      3948            pop     ar3
106D D002      3949            pop     ar2
106F 9056C8    3950            mov     dptr,#_pwm_right
1072 F0        3951            movx    @dptr,a
1073           3952   ;        main.c:952: waitms(angle);
1073 8A82      3953            mov     dpl,r2
1075 8B83      3954            mov     dph,r3
1077 120000    3955            lcall   _waitms
107A           3956   ;        main.c:954: L_motor_dir = 0;
107A 905688    3957            mov     dptr,#_L_motor_dir
107D           3958   ;        main.c:955: R_motor_dir = 0;
107D           3959   ;        main.c:956: pwm_left = 0;
107D           3960   ;        main.c:957: pwm_right = 0;
107D E4        3961            clr     a
107E F0        3962            movx    @dptr,a
107F 905648    3963            mov     dptr,#_R_motor_dir
1082 F0        3964            movx    @dptr,a
1083 905708    3965            mov     dptr,#_pwm_left
1086 F0        3966            movx    @dptr,a
1087 9056C8    3967            mov     dptr,#_pwm_right
108A F0        3968            movx    @dptr,a
108B           3969   ;        main.c:958: return;
108B 22        3970            ret
108C           3971   ;------------------------------------------------------------
108C           3972   ;Allocation info for local variables in function 'Move_forward'
108C           3973   ;------------------------------------------------------------
108C           3974   ;------------------------------------------------------------
108C           3975   ;        main.c:961: void Move_forward(){
108C           3976   ;        -----------------------------------------
108C           3977   ;         function Move_forward
108C           3978   ;        -----------------------------------------
108C           3979   _Move_forward:
108C           3980   ;        main.c:963: L_motor_dir = 0;
108C 905688    3981            mov     dptr,#_L_motor_dir
108F           3982   ;        main.c:964: R_motor_dir = 0;
108F E4        3983            clr     a
1090 F0        3984            movx    @dptr,a
1091 905648    3985            mov     dptr,#_R_motor_dir
1094 F0        3986            movx    @dptr,a
1095           3987   ;        main.c:965: pwm_left = 60;
1095 905708    3988            mov     dptr,#_pwm_left
1098 743C      3989            mov     a,#0x3C
109A F0        3990            movx    @dptr,a
109B           3991   ;        main.c:966: pwm_right = 60 * pwm_corr;
109B 9053B8    3992            mov     dptr,#_pwm_corr
109E E0        3993            movx    a,@dptr
109F C0E0      3994            push    acc
10A1 A3        3995            inc     dptr
10A2 E0        3996            movx    a,@dptr
10A3 C0E0      3997            push    acc
10A5 A3        3998            inc     dptr
10A6 E0        3999            movx    a,@dptr
10A7 C0E0      4000            push    acc
10A9 A3        4001            inc     dptr
10AA E0        4002            movx    a,@dptr
10AB C0E0      4003            push    acc
10AD 900000    4004            mov     dptr,#0x0000
10B0 75F070    4005            mov     b,#0x70
10B3 7442      4006            mov     a,#0x42
10B5 120000    4007            lcall   ___fsmul
10B8 AA82      4008            mov     r2,dpl
10BA AB83      4009            mov     r3,dph
10BC ACF0      4010            mov     r4,b
10BE FD        4011            mov     r5,a
10BF E581      4012            mov     a,sp
10C1 24FC      4013            add     a,#0xfc
10C3 F581      4014            mov     sp,a
10C5 8A82      4015            mov     dpl,r2
10C7 8B83      4016            mov     dph,r3
10C9 8CF0      4017            mov     b,r4
10CB ED        4018            mov     a,r5
10CC 120000    4019            lcall   ___fs2uchar
10CF E582      4020            mov     a,dpl
10D1 9056C8    4021            mov     dptr,#_pwm_right
10D4 F0        4022            movx    @dptr,a
10D5           4023   ;        main.c:967: return;
10D5 22        4024            ret
10D6           4025   ;------------------------------------------------------------
10D6           4026   ;Allocation info for local variables in function 'simple_rand'
10D6           4027   ;------------------------------------------------------------
10D6           4028   ;------------------------------------------------------------
10D6           4029   ;        main.c:970: unsigned int simple_rand() {
10D6           4030   ;        -----------------------------------------
10D6           4031   ;         function simple_rand
10D6           4032   ;        -----------------------------------------
10D6           4033   _simple_rand:
10D6           4034   ;        main.c:971: seed = (seed * 25173 + 13849) & 0xFFFF;  
10D6 9053F8    4035            mov     dptr,#_seed
10D9 E0        4036            movx    a,@dptr
10DA F500      4037            mov     __mulint_PARM_2,a
10DC A3        4038            inc     dptr
10DD E0        4039            movx    a,@dptr
10DE F501      4040            mov     (__mulint_PARM_2 + 1),a
10E0 906255    4041            mov     dptr,#0x6255
10E3 120000    4042            lcall   __mulint
10E6 E582      4043            mov     a,dpl
10E8 8583F0    4044            mov     b,dph
10EB 9053F8    4045            mov     dptr,#_seed
10EE 2419      4046            add     a,#0x19
10F0 F0        4047            movx    @dptr,a
10F1 7436      4048            mov     a,#0x36
10F3 35F0      4049            addc    a,b
10F5 A3        4050            inc     dptr
10F6 F0        4051            movx    @dptr,a
10F7           4052   ;        main.c:972: return seed;     
10F7 9053F8    4053            mov     dptr,#_seed
10FA E0        4054            movx    a,@dptr
10FB FA        4055            mov     r2,a
10FC A3        4056            inc     dptr
10FD E0        4057            movx    a,@dptr
10FE 8A82      4058            mov     dpl,r2
1100 F583      4059            mov     dph,a
1102 22        4060            ret
1103           4061   ;------------------------------------------------------------
1103           4062   ;Allocation info for local variables in function 'get_random_90_250'
1103           4063   ;------------------------------------------------------------
1103           4064   ;------------------------------------------------------------
1103           4065   ;        main.c:975: unsigned int get_random_90_250() {
1103           4066   ;        -----------------------------------------
1103           4067   ;         function get_random_90_250
1103           4068   ;        -----------------------------------------
1103           4069   _get_random_90_250:
1103           4070   ;        main.c:976: return (simple_rand() % (250 - 85 + 1)) + 85;
1103 120000    4071            lcall   _simple_rand
1106 7500A6    4072            mov     __moduint_PARM_2,#0xA6
1109 E4        4073            clr     a
110A F501      4074            mov     (__moduint_PARM_2 + 1),a
110C 120000    4075            lcall   __moduint
110F E582      4076            mov     a,dpl
1111 8583F0    4077            mov     b,dph
1114 2455      4078            add     a,#0x55
1116 F582      4079            mov     dpl,a
1118 E4        4080            clr     a
1119 35F0      4081            addc    a,b
111B F583      4082            mov     dph,a
111D 22        4083            ret
111E           4084   ;------------------------------------------------------------
111E           4085   ;Allocation info for local variables in function 'Read_angle'
111E           4086   ;------------------------------------------------------------
111E           4087   ;sloc0                     Allocated with name '_Read_angle_sloc0_1_0'
111E           4088   ;i                         Allocated with name '_Read_angle_i_1_203'
111E           4089   ;mag_x                     Allocated with name '_Read_angle_mag_x_1_203'
111E           4090   ;mag_y                     Allocated with name '_Read_angle_mag_y_1_203'
111E           4091   ;sum_x                     Allocated with name '_Read_angle_sum_x_1_203'
111E           4092   ;sum_y                     Allocated with name '_Read_angle_sum_y_1_203'
111E           4093   ;angle                     Allocated with name '_Read_angle_angle_1_203'
111E           4094   ;------------------------------------------------------------
111E           4095   ;        main.c:979: float Read_angle(void)
111E           4096   ;        -----------------------------------------
111E           4097   ;         function Read_angle
111E           4098   ;        -----------------------------------------
111E           4099   _Read_angle:
111E           4100   ;        main.c:986: sum_x = 0.0; sum_y = 0.0;
111E 90D568    4101            mov     dptr,#_Read_angle_sum_x_1_203
1121 E4        4102            clr     a
1122 F0        4103            movx    @dptr,a
1123 A3        4104            inc     dptr
1124 F0        4105            movx    @dptr,a
1125 A3        4106            inc     dptr
1126 F0        4107            movx    @dptr,a
1127 A3        4108            inc     dptr
1128 F0        4109            movx    @dptr,a
1129 90D5B8    4110            mov     dptr,#_Read_angle_sum_y_1_203
112C F0        4111            movx    @dptr,a
112D A3        4112            inc     dptr
112E E4        4113            clr     a
112F F0        4114            movx    @dptr,a
1130 A3        4115            inc     dptr
1131 F0        4116            movx    @dptr,a
1132 A3        4117            inc     dptr
1133 F0        4118            movx    @dptr,a
1134           4119   ;        main.c:989: for (i = 0; i < 10; i++){
1134 7A00      4120            mov     r2,#0x00
1136           4121   L038005?:
1136 BA0AC0    4122            cjne    r2,#0x0A,L038016?
1139           4123   L038016?:
1139 4000      4124            jc      L038017?
113B 020000    4125            ljmp    L038008?
113E           4126   L038017?:
113E           4127   ;        main.c:990: BMM150_Read_Data(&mag_x, &mag_y);
113E 756818    4128            mov     _BMM150_Read_Data_PARM_2,#_Read_angle_mag_y_1_203
1141 7569D5    4129            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_Read_angle_mag_y_1_203 >> 8)
1144 756A00    4130            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
1147 90D4C8    4131            mov     dptr,#_Read_angle_mag_x_1_203
114A 75F000    4132            mov     b,#0x00
114D C002      4133            push    ar2
114F 120000    4134            lcall   _BMM150_Read_Data
1152           4135   ;        main.c:991: sum_x += (float)mag_x; 
1152 90D4C8    4136            mov     dptr,#_Read_angle_mag_x_1_203
1155 E0        4137            movx    a,@dptr
1156 FB        4138            mov     r3,a
1157 A3        4139            inc     dptr
1158 E0        4140            movx    a,@dptr
1159 FC        4141            mov     r4,a
115A 8B82      4142            mov     dpl,r3
115C 8C83      4143            mov     dph,r4
115E 120000    4144            lcall   ___sint2fs
1161 858258    4145            mov     _Read_angle_sloc0_1_0,dpl
1164 858359    4146            mov     (_Read_angle_sloc0_1_0 + 1),dph
1167 85F05A    4147            mov     (_Read_angle_sloc0_1_0 + 2),b
116A F55B      4148            mov     (_Read_angle_sloc0_1_0 + 3),a
116C 90D568    4149            mov     dptr,#_Read_angle_sum_x_1_203
116F E0        4150            movx    a,@dptr
1170 FF        4151            mov     r7,a
1171 A3        4152            inc     dptr
1172 E0        4153            movx    a,@dptr
1173 F8        4154            mov     r0,a
1174 A3        4155            inc     dptr
1175 E0        4156            movx    a,@dptr
1176 F9        4157            mov     r1,a
1177 A3        4158            inc     dptr
1178 E0        4159            movx    a,@dptr
1179 FB        4160            mov     r3,a
117A C058      4161            push    _Read_angle_sloc0_1_0
117C C059      4162            push    (_Read_angle_sloc0_1_0 + 1)
117E C05A      4163            push    (_Read_angle_sloc0_1_0 + 2)
1180 C05B      4164            push    (_Read_angle_sloc0_1_0 + 3)
1182 8F82      4165            mov     dpl,r7
1184 8883      4166            mov     dph,r0
1186 89F0      4167            mov     b,r1
1188 EB        4168            mov     a,r3
1189 120000    4169            lcall   ___fsadd
118C AB82      4170            mov     r3,dpl
118E AC83      4171            mov     r4,dph
1190 ADF0      4172            mov     r5,b
1192 FE        4173            mov     r6,a
1193 E581      4174            mov     a,sp
1195 24FC      4175            add     a,#0xfc
1197 F581      4176            mov     sp,a
1199 90D568    4177            mov     dptr,#_Read_angle_sum_x_1_203
119C EB        4178            mov     a,r3
119D F0        4179            movx    @dptr,a
119E A3        4180            inc     dptr
119F EC        4181            mov     a,r4
11A0 F0        4182            movx    @dptr,a
11A1 A3        4183            inc     dptr
11A2 ED        4184            mov     a,r5
11A3 F0        4185            movx    @dptr,a
11A4 A3        4186            inc     dptr
11A5 EE        4187            mov     a,r6
11A6 F0        4188            movx    @dptr,a
11A7           4189   ;        main.c:992: sum_y += (float)mag_y; 
11A7 90D518    4190            mov     dptr,#_Read_angle_mag_y_1_203
11AA E0        4191            movx    a,@dptr
11AB FB        4192            mov     r3,a
11AC A3        4193            inc     dptr
11AD E0        4194            movx    a,@dptr
11AE FC        4195            mov     r4,a
11AF 8B82      4196            mov     dpl,r3
11B1 8C83      4197            mov     dph,r4
11B3 120000    4198            lcall   ___sint2fs
11B6 858258    4199            mov     _Read_angle_sloc0_1_0,dpl
11B9 858359    4200            mov     (_Read_angle_sloc0_1_0 + 1),dph
11BC 85F05A    4201            mov     (_Read_angle_sloc0_1_0 + 2),b
11BF F55B      4202            mov     (_Read_angle_sloc0_1_0 + 3),a
11C1 90D5B8    4203            mov     dptr,#_Read_angle_sum_y_1_203
11C4 E0        4204            movx    a,@dptr
11C5 FF        4205            mov     r7,a
11C6 A3        4206            inc     dptr
11C7 E0        4207            movx    a,@dptr
11C8 F8        4208            mov     r0,a
11C9 A3        4209            inc     dptr
11CA E0        4210            movx    a,@dptr
11CB F9        4211            mov     r1,a
11CC A3        4212            inc     dptr
11CD E0        4213            movx    a,@dptr
11CE FB        4214            mov     r3,a
11CF C058      4215            push    _Read_angle_sloc0_1_0
11D1 C059      4216            push    (_Read_angle_sloc0_1_0 + 1)
11D3 C05A      4217            push    (_Read_angle_sloc0_1_0 + 2)
11D5 C05B      4218            push    (_Read_angle_sloc0_1_0 + 3)
11D7 8F82      4219            mov     dpl,r7
11D9 8883      4220            mov     dph,r0
11DB 89F0      4221            mov     b,r1
11DD EB        4222            mov     a,r3
11DE 120000    4223            lcall   ___fsadd
11E1 AB82      4224            mov     r3,dpl
11E3 AC83      4225            mov     r4,dph
11E5 ADF0      4226            mov     r5,b
11E7 FE        4227            mov     r6,a
11E8 E581      4228            mov     a,sp
11EA 24FC      4229            add     a,#0xfc
11EC F581      4230            mov     sp,a
11EE 90D5B8    4231            mov     dptr,#_Read_angle_sum_y_1_203
11F1 EB        4232            mov     a,r3
11F2 F0        4233            movx    @dptr,a
11F3 A3        4234            inc     dptr
11F4 EC        4235            mov     a,r4
11F5 F0        4236            movx    @dptr,a
11F6 A3        4237            inc     dptr
11F7 ED        4238            mov     a,r5
11F8 F0        4239            movx    @dptr,a
11F9 A3        4240            inc     dptr
11FA EE        4241            mov     a,r6
11FB F0        4242            movx    @dptr,a
11FC           4243   ;        main.c:993: Timer3us(1);
11FC 758201    4244            mov     dpl,#0x01
11FF 120000    4245            lcall   _Timer3us
1202 D002      4246            pop     ar2
1204           4247   ;        main.c:989: for (i = 0; i < 10; i++){
1204 0A        4248            inc     r2
1205 020000    4249            ljmp    L038005?
1208           4250   L038008?:
1208           4251   ;        main.c:995: angle = atan2f(sum_y, sum_x) * 180.0 / M_PI;
1208 90D5B8    4252            mov     dptr,#_Read_angle_sum_y_1_203
120B E0        4253            movx    a,@dptr
120C FA        4254            mov     r2,a
120D A3        4255            inc     dptr
120E E0        4256            movx    a,@dptr
120F FB        4257            mov     r3,a
1210 A3        4258            inc     dptr
1211 E0        4259            movx    a,@dptr
1212 FC        4260            mov     r4,a
1213 A3        4261            inc     dptr
1214 E0        4262            movx    a,@dptr
1215 FD        4263            mov     r5,a
1216 90D568    4264            mov     dptr,#_Read_angle_sum_x_1_203
1219 E0        4265            movx    a,@dptr
121A F500      4266            mov     _atan2f_PARM_2,a
121C A3        4267            inc     dptr
121D E0        4268            movx    a,@dptr
121E F501      4269            mov     (_atan2f_PARM_2 + 1),a
1220 A3        4270            inc     dptr
1221 E0        4271            movx    a,@dptr
1222 F502      4272            mov     (_atan2f_PARM_2 + 2),a
1224 A3        4273            inc     dptr
1225 E0        4274            movx    a,@dptr
1226 F503      4275            mov     (_atan2f_PARM_2 + 3),a
1228 8A82      4276            mov     dpl,r2
122A 8B83      4277            mov     dph,r3
122C 8CF0      4278            mov     b,r4
122E ED        4279            mov     a,r5
122F 120000    4280            lcall   _atan2f
1232 AA82      4281            mov     r2,dpl
1234 AB83      4282            mov     r3,dph
1236 ACF0      4283            mov     r4,b
1238 FD        4284            mov     r5,a
1239 C002      4285            push    ar2
123B C003      4286            push    ar3
123D C004      4287            push    ar4
123F C005      4288            push    ar5
1241 900000    4289            mov     dptr,#0x0000
1244 75F034    4290            mov     b,#0x34
1247 7443      4291            mov     a,#0x43
1249 120000    4292            lcall   ___fsmul
124C AA82      4293            mov     r2,dpl
124E AB83      4294            mov     r3,dph
1250 ACF0      4295            mov     r4,b
1252 FD        4296            mov     r5,a
1253 E581      4297            mov     a,sp
1255 24FC      4298            add     a,#0xfc
1257 F581      4299            mov     sp,a
1259 74DB      4300            mov     a,#0xDB
125B C0E0      4301            push    acc
125D 740F      4302            mov     a,#0x0F
125F C0E0      4303            push    acc
1261 7449      4304            mov     a,#0x49
1263 C0E0      4305            push    acc
1265 7440      4306            mov     a,#0x40
1267 C0E0      4307            push    acc
1269 8A82      4308            mov     dpl,r2
126B 8B83      4309            mov     dph,r3
126D 8CF0      4310            mov     b,r4
126F ED        4311            mov     a,r5
1270 120000    4312            lcall   ___fsdiv
1273 AA82      4313            mov     r2,dpl
1275 AB83      4314            mov     r3,dph
1277 ACF0      4315            mov     r4,b
1279 FD        4316            mov     r5,a
127A E581      4317            mov     a,sp
127C 24FC      4318            add     a,#0xfc
127E F581      4319            mov     sp,a
1280 90D608    4320            mov     dptr,#_Read_angle_angle_1_203
1283 EA        4321            mov     a,r2
1284 F0        4322            movx    @dptr,a
1285 A3        4323            inc     dptr
1286 EB        4324            mov     a,r3
1287 F0        4325            movx    @dptr,a
1288 A3        4326            inc     dptr
1289 EC        4327            mov     a,r4
128A F0        4328            movx    @dptr,a
128B A3        4329            inc     dptr
128C ED        4330            mov     a,r5
128D F0        4331            movx    @dptr,a
128E           4332   ;        main.c:996: if (angle < 0.0) angle += 360.0; 
128E C002      4333            push    ar2
1290 C003      4334            push    ar3
1292 C004      4335            push    ar4
1294 C005      4336            push    ar5
1296 E4        4337            clr     a
1297 C0E0      4338            push    acc
1299 C0E0      4339            push    acc
129B C0E0      4340            push    acc
129D C0E0      4341            push    acc
129F 8A82      4342            mov     dpl,r2
12A1 8B83      4343            mov     dph,r3
12A3 8CF0      4344            mov     b,r4
12A5 ED        4345            mov     a,r5
12A6 120000    4346            lcall   ___fslt
12A9 AE82      4347            mov     r6,dpl
12AB E581      4348            mov     a,sp
12AD 24FC      4349            add     a,#0xfc
12AF F581      4350            mov     sp,a
12B1 D005      4351            pop     ar5
12B3 D004      4352            pop     ar4
12B5 D003      4353            pop     ar3
12B7 D002      4354            pop     ar2
12B9 EE        4355            mov     a,r6
12BA 6000      4356            jz      L038002?
12BC E4        4357            clr     a
12BD C0E0      4358            push    acc
12BF C0E0      4359            push    acc
12C1 74B4      4360            mov     a,#0xB4
12C3 C0E0      4361            push    acc
12C5 7443      4362            mov     a,#0x43
12C7 C0E0      4363            push    acc
12C9 8A82      4364            mov     dpl,r2
12CB 8B83      4365            mov     dph,r3
12CD 8CF0      4366            mov     b,r4
12CF ED        4367            mov     a,r5
12D0 120000    4368            lcall   ___fsadd
12D3 AA82      4369            mov     r2,dpl
12D5 AB83      4370            mov     r3,dph
12D7 ACF0      4371            mov     r4,b
12D9 FD        4372            mov     r5,a
12DA E581      4373            mov     a,sp
12DC 24FC      4374            add     a,#0xfc
12DE F581      4375            mov     sp,a
12E0 90D608    4376            mov     dptr,#_Read_angle_angle_1_203
12E3 EA        4377            mov     a,r2
12E4 F0        4378            movx    @dptr,a
12E5 A3        4379            inc     dptr
12E6 EB        4380            mov     a,r3
12E7 F0        4381            movx    @dptr,a
12E8 A3        4382            inc     dptr
12E9 EC        4383            mov     a,r4
12EA F0        4384            movx    @dptr,a
12EB A3        4385            inc     dptr
12EC ED        4386            mov     a,r5
12ED F0        4387            movx    @dptr,a
12EE           4388   L038002?:
12EE           4389   ;        main.c:997: if (angle > 360.0) angle -= 360.0; 
12EE 90D608    4390            mov     dptr,#_Read_angle_angle_1_203
12F1 E0        4391            movx    a,@dptr
12F2 FA        4392            mov     r2,a
12F3 A3        4393            inc     dptr
12F4 E0        4394            movx    a,@dptr
12F5 FB        4395            mov     r3,a
12F6 A3        4396            inc     dptr
12F7 E0        4397            movx    a,@dptr
12F8 FC        4398            mov     r4,a
12F9 A3        4399            inc     dptr
12FA E0        4400            movx    a,@dptr
12FB FD        4401            mov     r5,a
12FC C002      4402            push    ar2
12FE C003      4403            push    ar3
1300 C004      4404            push    ar4
1302 C005      4405            push    ar5
1304 E4        4406            clr     a
1305 C0E0      4407            push    acc
1307 C0E0      4408            push    acc
1309 74B4      4409            mov     a,#0xB4
130B C0E0      4410            push    acc
130D 7443      4411            mov     a,#0x43
130F C0E0      4412            push    acc
1311 8A82      4413            mov     dpl,r2
1313 8B83      4414            mov     dph,r3
1315 8CF0      4415            mov     b,r4
1317 ED        4416            mov     a,r5
1318 120000    4417            lcall   ___fsgt
131B AE82      4418            mov     r6,dpl
131D E581      4419            mov     a,sp
131F 24FC      4420            add     a,#0xfc
1321 F581      4421            mov     sp,a
1323 D005      4422            pop     ar5
1325 D004      4423            pop     ar4
1327 D003      4424            pop     ar3
1329 D002      4425            pop     ar2
132B EE        4426            mov     a,r6
132C 6000      4427            jz      L038004?
132E E4        4428            clr     a
132F C0E0      4429            push    acc
1331 C0E0      4430            push    acc
1333 74B4      4431            mov     a,#0xB4
1335 C0E0      4432            push    acc
1337 7443      4433            mov     a,#0x43
1339 C0E0      4434            push    acc
133B 8A82      4435            mov     dpl,r2
133D 8B83      4436            mov     dph,r3
133F 8CF0      4437            mov     b,r4
1341 ED        4438            mov     a,r5
1342 120000    4439            lcall   ___fssub
1345 AA82      4440            mov     r2,dpl
1347 AB83      4441            mov     r3,dph
1349 ACF0      4442            mov     r4,b
134B FD        4443            mov     r5,a
134C E581      4444            mov     a,sp
134E 24FC      4445            add     a,#0xfc
1350 F581      4446            mov     sp,a
1352 90D608    4447            mov     dptr,#_Read_angle_angle_1_203
1355 EA        4448            mov     a,r2
1356 F0        4449            movx    @dptr,a
1357 A3        4450            inc     dptr
1358 EB        4451            mov     a,r3
1359 F0        4452            movx    @dptr,a
135A A3        4453            inc     dptr
135B EC        4454            mov     a,r4
135C F0        4455            movx    @dptr,a
135D A3        4456            inc     dptr
135E ED        4457            mov     a,r5
135F F0        4458            movx    @dptr,a
1360           4459   L038004?:
1360           4460   ;        main.c:998: return angle; 
1360 90D608    4461            mov     dptr,#_Read_angle_angle_1_203
1363 E0        4462            movx    a,@dptr
1364 FA        4463            mov     r2,a
1365 A3        4464            inc     dptr
1366 E0        4465            movx    a,@dptr
1367 FB        4466            mov     r3,a
1368 A3        4467            inc     dptr
1369 E0        4468            movx    a,@dptr
136A FC        4469            mov     r4,a
136B A3        4470            inc     dptr
136C E0        4471            movx    a,@dptr
136D 8A82      4472            mov     dpl,r2
136F 8B83      4473            mov     dph,r3
1371 8CF0      4474            mov     b,r4
1373 22        4475            ret
1374           4476   ;------------------------------------------------------------
1374           4477   ;Allocation info for local variables in function 'Auto_mode_slave'
1374           4478   ;------------------------------------------------------------
1374           4479   ;sloc0                     Allocated with name '_Auto_mode_slave_sloc0_1_0'
1374           4480   ;count                     Allocated with name '_Auto_mode_slave_count_1_205'
1374           4481   ;command                   Allocated with name '_Auto_mode_slave_command_1_205'
1374           4482   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_205'
1374           4483   ;bound                     Allocated with name '_Auto_mode_slave_bound_1_205'
1374           4484   ;c                         Allocated with name '_Auto_mode_slave_c_1_205'
1374           4485   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_205'
1374           4486   ;angle                     Allocated with name '_Auto_mode_slave_angle_1_205'
1374           4487   ;------------------------------------------------------------
1374           4488   ;        main.c:1001: void Auto_mode_slave(){
1374           4489   ;        -----------------------------------------
1374           4490   ;         function Auto_mode_slave
1374           4491   ;        -----------------------------------------
1374           4492   _Auto_mode_slave:
1374           4493   ;        main.c:1004: xdata int state_res = 1;
1374 90D6B8    4494            mov     dptr,#_Auto_mode_slave_state_res_1_205
1377 7401      4495            mov     a,#0x01
1379 F0        4496            movx    @dptr,a
137A E4        4497            clr     a
137B A3        4498            inc     dptr
137C F0        4499            movx    @dptr,a
137D           4500   ;        main.c:1010: curr_angle = Read_angle();
137D 120000    4501            lcall   _Read_angle
1380 AA82      4502            mov     r2,dpl
1382 AB83      4503            mov     r3,dph
1384 ACF0      4504            mov     r4,b
1386 FD        4505            mov     r5,a
1387 905378    4506            mov     dptr,#_curr_angle
138A EA        4507            mov     a,r2
138B F0        4508            movx    @dptr,a
138C A3        4509            inc     dptr
138D EB        4510            mov     a,r3
138E F0        4511            movx    @dptr,a
138F A3        4512            inc     dptr
1390 EC        4513            mov     a,r4
1391 F0        4514            movx    @dptr,a
1392 A3        4515            inc     dptr
1393 ED        4516            mov     a,r5
1394 F0        4517            movx    @dptr,a
1395           4518   ;        main.c:1012: while(count < 20 && state_res){
1395 E4        4519            clr     a
1396 F5A8      4520            mov     _Auto_mode_slave_sloc0_1_0,a
1398 F5A9      4521            mov     (_Auto_mode_slave_sloc0_1_0 + 1),a
139A           4522   L039018?:
139A C3        4523            clr     c
139B E5A8      4524            mov     a,_Auto_mode_slave_sloc0_1_0
139D 9414      4525            subb    a,#0x14
139F E5A9      4526            mov     a,(_Auto_mode_slave_sloc0_1_0 + 1)
13A1 6480      4527            xrl     a,#0x80
13A3 9480      4528            subb    a,#0x80
13A5 4000      4529            jc      L039034?
13A7 22        4530            ret
13A8           4531   L039034?:
13A8 90D6B8    4532            mov     dptr,#_Auto_mode_slave_state_res_1_205
13AB E0        4533            movx    a,@dptr
13AC FC        4534            mov     r4,a
13AD A3        4535            inc     dptr
13AE E0        4536            movx    a,@dptr
13AF FD        4537            mov     r5,a
13B0 4C        4538            orl     a,r4
13B1 7000      4539            jnz     L039035?
13B3 22        4540            ret
13B4           4541   L039035?:
13B4           4542   ;        main.c:1014: if(RXU1()){
13B4 C004      4543            push    ar4
13B6 C005      4544            push    ar5
13B8 120000    4545            lcall   _RXU1
13BB D005      4546            pop     ar5
13BD D004      4547            pop     ar4
13BF 4000      4548            jc      L039036?
13C1 020000    4549            ljmp    L039012?
13C4           4550   L039036?:
13C4           4551   ;        main.c:1015: c=getchar1();      
13C4 C004      4552            push    ar4
13C6 C005      4553            push    ar5
13C8 120000    4554            lcall   _getchar1
13CB AE82      4555            mov     r6,dpl
13CD D005      4556            pop     ar5
13CF D004      4557            pop     ar4
13D1           4558   ;        main.c:1016: if(c=='!'){
13D1 BE2140    4559            cjne    r6,#0x21,L039037?
13D4 8000      4560            sjmp    L039038?
13D6           4561   L039037?:
13D6 020000    4562            ljmp    L039009?
13D9           4563   L039038?:
13D9           4564   ;        main.c:1017: getstr1(buff, sizeof(buff)-1);
13D9 751813    4565            mov     _getstr1_PARM_2,#0x13
13DC 905B88    4566            mov     dptr,#_buff
13DF 75F040    4567            mov     b,#0x40
13E2 120000    4568            lcall   _getstr1
13E5           4569   ;        main.c:1018: if(strlen(buff)==11){
13E5 905B88    4570            mov     dptr,#_buff
13E8 75F040    4571            mov     b,#0x40
13EB 120000    4572            lcall   _strlen
13EE AF82      4573            mov     r7,dpl
13F0 AA83      4574            mov     r2,dph
13F2 BF0B40    4575            cjne    r7,#0x0B,L039039?
13F5 BA0040    4576            cjne    r2,#0x00,L039039?
13F8 8000      4577            sjmp    L039040?
13FA           4578   L039039?:
13FA 020000    4579            ljmp    L039012?
13FD           4580   L039040?:
13FD           4581   ;        main.c:1019: printf("master_messgae_auto_mode: %s\r\n", buff);
13FD 7488      4582            mov     a,#_buff
13FF C0E0      4583            push    acc
1401 745B      4584            mov     a,#(_buff >> 8)
1403 C0E0      4585            push    acc
1405 7440      4586            mov     a,#0x40
1407 C0E0      4587            push    acc
1409 74C0      4588            mov     a,#__str_7
140B C0E0      4589            push    acc
140D 7415      4590            mov     a,#(__str_7 >> 8)
140F C0E0      4591            push    acc
1411 7480      4592            mov     a,#0x80
1413 C0E0      4593            push    acc
1415 120000    4594            lcall   _printf
1418 E581      4595            mov     a,sp
141A 24FA      4596            add     a,#0xfa
141C F581      4597            mov     sp,a
141E           4598   ;        main.c:1020: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
141E 7458      4599            mov     a,#_Auto_mode_slave_command_1_205
1420 C0E0      4600            push    acc
1422 74D6      4601            mov     a,#(_Auto_mode_slave_command_1_205 >> 8)
1424 C0E0      4602            push    acc
1426 E4        4603            clr     a
1427 C0E0      4604            push    acc
1429 7408      4605            mov     a,#_Auto_mode_slave_dummy_1_205
142B C0E0      4606            push    acc
142D 74D7      4607            mov     a,#(_Auto_mode_slave_dummy_1_205 >> 8)
142F C0E0      4608            push    acc
1431 E4        4609            clr     a
1432 C0E0      4610            push    acc
1434 7408      4611            mov     a,#_Auto_mode_slave_dummy_1_205
1436 C0E0      4612            push    acc
1438 74D7      4613            mov     a,#(_Auto_mode_slave_dummy_1_205 >> 8)
143A C0E0      4614            push    acc
143C E4        4615            clr     a
143D C0E0      4616            push    acc
143F 7408      4617            mov     a,#_Auto_mode_slave_dummy_1_205
1441 C0E0      4618            push    acc
1443 74D7      4619            mov     a,#(_Auto_mode_slave_dummy_1_205 >> 8)
1445 C0E0      4620            push    acc
1447 E4        4621            clr     a
1448 C0E0      4622            push    acc
144A 7400      4623            mov     a,#__str_8
144C C0E0      4624            push    acc
144E 7416      4625            mov     a,#(__str_8 >> 8)
1450 C0E0      4626            push    acc
1452 7480      4627            mov     a,#0x80
1454 C0E0      4628            push    acc
1456 7488      4629            mov     a,#_buff
1458 C0E0      4630            push    acc
145A 745B      4631            mov     a,#(_buff >> 8)
145C C0E0      4632            push    acc
145E 7440      4633            mov     a,#0x40
1460 C0E0      4634            push    acc
1462 120000    4635            lcall   _sscanf
1465 E581      4636            mov     a,sp
1467 24EE      4637            add     a,#0xee
1469 F581      4638            mov     sp,a
146B           4639   ;        main.c:1021: if(command) state_res = 1;
146B 90D658    4640            mov     dptr,#_Auto_mode_slave_command_1_205
146E E0        4641            movx    a,@dptr
146F FF        4642            mov     r7,a
1470 A3        4643            inc     dptr
1471 E0        4644            movx    a,@dptr
1472 FA        4645            mov     r2,a
1473 4F        4646            orl     a,r7
1474 6000      4647            jz      L039002?
1476 90D6B8    4648            mov     dptr,#_Auto_mode_slave_state_res_1_205
1479 7401      4649            mov     a,#0x01
147B F0        4650            movx    @dptr,a
147C E4        4651            clr     a
147D A3        4652            inc     dptr
147E F0        4653            movx    @dptr,a
147F 020000    4654            ljmp    L039012?
1482           4655   L039002?:
1482           4656   ;        main.c:1022: else state_res = 0;
1482 90D6B8    4657            mov     dptr,#_Auto_mode_slave_state_res_1_205
1485 E4        4658            clr     a
1486 F0        4659            movx    @dptr,a
1487 A3        4660            inc     dptr
1488 F0        4661            movx    @dptr,a
1489 8000      4662            sjmp    L039012?
148B           4663   L039009?:
148B           4664   ;        main.c:1028: else if(c=='@'){
148B BE4000    4665            cjne    r6,#0x40,L039012?
148E           4666   ;        main.c:1029: sprintf(buff, "%01d,%02d,%ld,%05d,%03d\n", state_res, count,freq100, 0, (int)curr_angle);
148E 905378    4667            mov     dptr,#_curr_angle
1491 E0        4668            movx    a,@dptr
1492 FA        4669            mov     r2,a
1493 A3        4670            inc     dptr
1494 E0        4671            movx    a,@dptr
1495 FB        4672            mov     r3,a
1496 A3        4673            inc     dptr
1497 E0        4674            movx    a,@dptr
1498 FE        4675            mov     r6,a
1499 A3        4676            inc     dptr
149A E0        4677            movx    a,@dptr
149B 8A82      4678            mov     dpl,r2
149D 8B83      4679            mov     dph,r3
149F 8EF0      4680            mov     b,r6
14A1 C004      4681            push    ar4
14A3 C005      4682            push    ar5
14A5 120000    4683            lcall   ___fs2sint
14A8 AA82      4684            mov     r2,dpl
14AA AB83      4685            mov     r3,dph
14AC D005      4686            pop     ar5
14AE D004      4687            pop     ar4
14B0 C002      4688            push    ar2
14B2 C003      4689            push    ar3
14B4 E4        4690            clr     a
14B5 C0E0      4691            push    acc
14B7 C0E0      4692            push    acc
14B9 905B48    4693            mov     dptr,#_freq100
14BC E0        4694            movx    a,@dptr
14BD C0E0      4695            push    acc
14BF A3        4696            inc     dptr
14C0 E0        4697            movx    a,@dptr
14C1 C0E0      4698            push    acc
14C3 A3        4699            inc     dptr
14C4 E0        4700            movx    a,@dptr
14C5 C0E0      4701            push    acc
14C7 A3        4702            inc     dptr
14C8 E0        4703            movx    a,@dptr
14C9 C0E0      4704            push    acc
14CB C0A8      4705            push    _Auto_mode_slave_sloc0_1_0
14CD C0A9      4706            push    (_Auto_mode_slave_sloc0_1_0 + 1)
14CF C004      4707            push    ar4
14D1 C005      4708            push    ar5
14D3 7400      4709            mov     a,#__str_9
14D5 C0E0      4710            push    acc
14D7 7417      4711            mov     a,#(__str_9 >> 8)
14D9 C0E0      4712            push    acc
14DB 7480      4713            mov     a,#0x80
14DD C0E0      4714            push    acc
14DF 7488      4715            mov     a,#_buff
14E1 C0E0      4716            push    acc
14E3 745B      4717            mov     a,#(_buff >> 8)
14E5 C0E0      4718            push    acc
14E7 7440      4719            mov     a,#0x40
14E9 C0E0      4720            push    acc
14EB 120000    4721            lcall   _sprintf
14EE E581      4722            mov     a,sp
14F0 24EE      4723            add     a,#0xee
14F2 F581      4724            mov     sp,a
14F4           4725   ;        main.c:1030: waitms(5); 
14F4 900005    4726            mov     dptr,#0x0005
14F7 120000    4727            lcall   _waitms
14FA           4728   ;        main.c:1031: sendstr1(buff);
14FA 905B88    4729            mov     dptr,#_buff
14FD 75F040    4730            mov     b,#0x40
1500 120000    4731            lcall   _sendstr1
1503           4732   L039012?:
1503           4733   ;        main.c:1036: Move_forward();
1503 120000    4734            lcall   _Move_forward
1506           4735   ;        main.c:1038: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
1506 758209    4736            mov     dpl,#0x09
1509 120000    4737            lcall   _ADC_at_Pin
150C E582      4738            mov     a,dpl
150E 8583F0    4739            mov     b,dph
1511 905B08    4740            mov     dptr,#_d1
1514 F0        4741            movx    @dptr,a
1515 A3        4742            inc     dptr
1516 E5F0      4743            mov     a,b
1518 F0        4744            movx    @dptr,a
1519           4745   ;        main.c:1039: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
1519 75820A    4746            mov     dpl,#0x0A
151C 120000    4747            lcall   _ADC_at_Pin
151F AA82      4748            mov     r2,dpl
1521 AB83      4749            mov     r3,dph
1523 905AC8    4750            mov     dptr,#_d2
1526 EA        4751            mov     a,r2
1527 F0        4752            movx    @dptr,a
1528 A3        4753            inc     dptr
1529 EB        4754            mov     a,r3
152A F0        4755            movx    @dptr,a
152B           4756   ;        main.c:1040: bound = check_bound(d1,d2);
152B 905B08    4757            mov     dptr,#_d1
152E E0        4758            movx    a,@dptr
152F FC        4759            mov     r4,a
1530 A3        4760            inc     dptr
1531 E0        4761            movx    a,@dptr
1532 FD        4762            mov     r5,a
1533 8AA8      4763            mov     _check_bound_PARM_2,r2
1535 8BA9      4764            mov     (_check_bound_PARM_2 + 1),r3
1537 8C82      4765            mov     dpl,r4
1539 8D83      4766            mov     dph,r5
153B 120000    4767            lcall   _check_bound
153E AA82      4768            mov     r2,dpl
1540 AB83      4769            mov     r3,dph
1542           4770   ;        main.c:1041: printf("f:%04ld, d1:%d, d2:%d, bound_dectect: %d\r\n",freq100, d1,d2,bound);
1542 C002      4771            push    ar2
1544 C003      4772            push    ar3
1546 C002      4773            push    ar2
1548 C003      4774            push    ar3
154A 905AC8    4775            mov     dptr,#_d2
154D E0        4776            movx    a,@dptr
154E C0E0      4777            push    acc
1550 A3        4778            inc     dptr
1551 E0        4779            movx    a,@dptr
1552 C0E0      4780            push    acc
1554 905B08    4781            mov     dptr,#_d1
1557 E0        4782            movx    a,@dptr
1558 C0E0      4783            push    acc
155A A3        4784            inc     dptr
155B E0        4785            movx    a,@dptr
155C C0E0      4786            push    acc
155E 905B48    4787            mov     dptr,#_freq100
1561 E0        4788            movx    a,@dptr
1562 C0E0      4789            push    acc
1564 A3        4790            inc     dptr
1565 E0        4791            movx    a,@dptr
1566 C0E0      4792            push    acc
1568 A3        4793            inc     dptr
1569 E0        4794            movx    a,@dptr
156A C0E0      4795            push    acc
156C A3        4796            inc     dptr
156D E0        4797            movx    a,@dptr
156E C0E0      4798            push    acc
1570 7480      4799            mov     a,#__str_10
1572 C0E0      4800            push    acc
1574 7417      4801            mov     a,#(__str_10 >> 8)
1576 C0E0      4802            push    acc
1578 7480      4803            mov     a,#0x80
157A C0E0      4804            push    acc
157C 120000    4805            lcall   _printf
157F E581      4806            mov     a,sp
1581 24F3      4807            add     a,#0xf3
1583 F581      4808            mov     sp,a
1585 D003      4809            pop     ar3
1587 D002      4810            pop     ar2
1589           4811   ;        main.c:1043: if (freq100>=5340){
1589 905B48    4812            mov     dptr,#_freq100
158C E0        4813            movx    a,@dptr
158D FC        4814            mov     r4,a
158E A3        4815            inc     dptr
158F E0        4816            movx    a,@dptr
1590 FD        4817            mov     r5,a
1591 A3        4818            inc     dptr
1592 E0        4819            movx    a,@dptr
1593 FE        4820            mov     r6,a
1594 A3        4821            inc     dptr
1595 E0        4822            movx    a,@dptr
1596 FF        4823            mov     r7,a
1597 C3        4824            clr     c
1598 EC        4825            mov     a,r4
1599 94DC      4826            subb    a,#0xDC
159B ED        4827            mov     a,r5
159C 9414      4828            subb    a,#0x14
159E EE        4829            mov     a,r6
159F 9400      4830            subb    a,#0x00
15A1 EF        4831            mov     a,r7
15A2 6480      4832            xrl     a,#0x80
15A4 9480      4833            subb    a,#0x80
15A6 4000      4834            jc      L039014?
15A8           4835   ;        main.c:1044: mea_yes = 0;
15A8 905278    4836            mov     dptr,#_mea_yes
15AB E4        4837            clr     a
15AC F0        4838            movx    @dptr,a
15AD           4839   ;        main.c:1045: Move_back_ms(300);
15AD 90012C    4840            mov     dptr,#0x012C
15B0 C002      4841            push    ar2
15B2 C003      4842            push    ar3
15B4 120000    4843            lcall   _Move_back_ms
15B7           4844   ;        main.c:1046: waitms(100);
15B7 900064    4845            mov     dptr,#0x0064
15BA 120000    4846            lcall   _waitms
15BD           4847   ;        main.c:1047: servo_pick();
15BD 120000    4848            lcall   _servo_pick
15C0 D003      4849            pop     ar3
15C2 D002      4850            pop     ar2
15C4           4851   ;        main.c:1048: count++;
15C4 05A8      4852            inc     _Auto_mode_slave_sloc0_1_0
15C6 E4        4853            clr     a
15C7 B5A800    4854            cjne    a,_Auto_mode_slave_sloc0_1_0,L039045?
15CA 05A9      4855            inc     (_Auto_mode_slave_sloc0_1_0 + 1)
15CC           4856   L039045?:
15CC           4857   ;        main.c:1049: waitms(100);
15CC 900064    4858            mov     dptr,#0x0064
15CF C002      4859            push    ar2
15D1 C003      4860            push    ar3
15D3 120000    4861            lcall   _waitms
15D6           4862   ;        main.c:1050: mea_yes = 1;
15D6 905278    4863            mov     dptr,#_mea_yes
15D9 7401      4864            mov     a,#0x01
15DB F0        4865            movx    @dptr,a
15DC           4866   ;        main.c:1051: Move_forward();
15DC 120000    4867            lcall   _Move_forward
15DF D003      4868            pop     ar3
15E1 D002      4869            pop     ar2
15E3           4870   L039014?:
15E3           4871   ;        main.c:1054: if(bound == 1){
15E3 BA0140    4872            cjne    r2,#0x01,L039046?
15E6 BB0040    4873            cjne    r3,#0x00,L039046?
15E9 8000      4874            sjmp    L039047?
15EB           4875   L039046?:
15EB 020000    4876            ljmp    L039018?
15EE           4877   L039047?:
15EE           4878   ;        main.c:1055: Move_back_ms(500);
15EE 9001F4    4879            mov     dptr,#0x01F4
15F1 120000    4880            lcall   _Move_back_ms
15F4           4881   ;        main.c:1056: waitms(100);
15F4 900064    4882            mov     dptr,#0x0064
15F7 120000    4883            lcall   _waitms
15FA           4884   ;        main.c:1057: angle = get_random_90_250();
15FA 120000    4885            lcall   _get_random_90_250
15FD 858200    4886            mov     __mulint_PARM_2,dpl
1600 858301    4887            mov     (__mulint_PARM_2 + 1),dph
1603           4888   ;        main.c:1058: Right_angle(angle*600/90);
1603 900258    4889            mov     dptr,#0x0258
1606 120000    4890            lcall   __mulint
1609 AA82      4891            mov     r2,dpl
160B AB83      4892            mov     r3,dph
160D 75005A    4893            mov     __divuint_PARM_2,#0x5A
1610 E4        4894            clr     a
1611 F501      4895            mov     (__divuint_PARM_2 + 1),a
1613 8A82      4896            mov     dpl,r2
1615 8B83      4897            mov     dph,r3
1617 120000    4898            lcall   __divuint
161A 120000    4899            lcall   _Right_angle
161D           4900   ;        main.c:1059: curr_angle = Read_angle() * 1.2;
161D 120000    4901            lcall   _Read_angle
1620 AA82      4902            mov     r2,dpl
1622 AB83      4903            mov     r3,dph
1624 ACF0      4904            mov     r4,b
1626 FD        4905            mov     r5,a
1627 C002      4906            push    ar2
1629 C003      4907            push    ar3
162B C004      4908            push    ar4
162D C005      4909            push    ar5
162F 90999A    4910            mov     dptr,#0x999A
1632 75F099    4911            mov     b,#0x99
1635 743F      4912            mov     a,#0x3F
1637 120000    4913            lcall   ___fsmul
163A AA82      4914            mov     r2,dpl
163C AB83      4915            mov     r3,dph
163E ACF0      4916            mov     r4,b
1640 FD        4917            mov     r5,a
1641 E581      4918            mov     a,sp
1643 24FC      4919            add     a,#0xfc
1645 F581      4920            mov     sp,a
1647 905378    4921            mov     dptr,#_curr_angle
164A EA        4922            mov     a,r2
164B F0        4923            movx    @dptr,a
164C A3        4924            inc     dptr
164D EB        4925            mov     a,r3
164E F0        4926            movx    @dptr,a
164F A3        4927            inc     dptr
1650 EC        4928            mov     a,r4
1651 F0        4929            movx    @dptr,a
1652 A3        4930            inc     dptr
1653 ED        4931            mov     a,r5
1654 F0        4932            movx    @dptr,a
1655 020000    4933            ljmp    L039018?
1658           4934   ;------------------------------------------------------------
1658           4935   ;Allocation info for local variables in function 'Joystick_Control'
1658           4936   ;------------------------------------------------------------
1658           4937   ;vy_ptr                    Allocated with name '_Joystick_Control_PARM_2'
1658           4938   ;vx_ptr                    Allocated to registers r2 r3 r4 
1658           4939   ;sloc0                     Allocated with name '_Joystick_Control_sloc0_1_0'
1658           4940   ;sloc1                     Allocated with name '_Joystick_Control_sloc1_1_0'
1658           4941   ;sloc2                     Allocated with name '_Joystick_Control_sloc2_1_0'
1658           4942   ;sloc3                     Allocated with name '_Joystick_Control_sloc3_1_0'
1658           4943   ;vx                        Allocated with name '_Joystick_Control_vx_1_214'
1658           4944   ;vy                        Allocated with name '_Joystick_Control_vy_1_214'
1658           4945   ;vx_error                  Allocated with name '_Joystick_Control_vx_error_1_214'
1658           4946   ;vy_error                  Allocated with name '_Joystick_Control_vy_error_1_214'
1658           4947   ;vx_err                    Allocated with name '_Joystick_Control_vx_err_1_214'
1658           4948   ;vy_err                    Allocated with name '_Joystick_Control_vy_err_1_214'
1658           4949   ;------------------------------------------------------------
1658           4950   ;        main.c:1066: float Joystick_Control(int *vx_ptr, int *vy_ptr)
1658           4951   ;        -----------------------------------------
1658           4952   ;         function Joystick_Control
1658           4953   ;        -----------------------------------------
1658           4954   _Joystick_Control:
1658           4955   ;        main.c:1070: vx = *vx_ptr; 
1658 120000    4956            lcall   __gptrget
165B FA        4957            mov     r2,a
165C A3        4958            inc     dptr
165D 120000    4959            lcall   __gptrget
1660 FB        4960            mov     r3,a
1661           4961   ;        main.c:1071: vy = *vy_ptr; 
1661 ACD8      4962            mov     r4,_Joystick_Control_PARM_2
1663 ADD9      4963            mov     r5,(_Joystick_Control_PARM_2 + 1)
1665 AEDA      4964            mov     r6,(_Joystick_Control_PARM_2 + 2)
1667 8C82      4965            mov     dpl,r4
1669 8D83      4966            mov     dph,r5
166B 8EF0      4967            mov     b,r6
166D 120000    4968            lcall   __gptrget
1670 FC        4969            mov     r4,a
1671 A3        4970            inc     dptr
1672 120000    4971            lcall   __gptrget
1675 FD        4972            mov     r5,a
1676           4973   ;        main.c:1077: vx_error = abs(vx-vx_thres)*100/vx_thres; 
1676 905588    4974            mov     dptr,#_vx_thres
1679 E0        4975            movx    a,@dptr
167A FE        4976            mov     r6,a
167B A3        4977            inc     dptr
167C E0        4978            movx    a,@dptr
167D FF        4979            mov     r7,a
167E EA        4980            mov     a,r2
167F C3        4981            clr     c
1680 9E        4982            subb    a,r6
1681 F582      4983            mov     dpl,a
1683 EB        4984            mov     a,r3
1684 9F        4985            subb    a,r7
1685 F583      4986            mov     dph,a
1687 C002      4987            push    ar2
1689 C003      4988            push    ar3
168B C004      4989            push    ar4
168D C005      4990            push    ar5
168F 120000    4991            lcall   _abs
1692 858200    4992            mov     __mulint_PARM_2,dpl
1695 858301    4993            mov     (__mulint_PARM_2 + 1),dph
1698 900064    4994            mov     dptr,#0x0064
169B 120000    4995            lcall   __mulint
169E AE82      4996            mov     r6,dpl
16A0 AF83      4997            mov     r7,dph
16A2 905588    4998            mov     dptr,#_vx_thres
16A5 E0        4999            movx    a,@dptr
16A6 F500      5000            mov     __divsint_PARM_2,a
16A8 A3        5001            inc     dptr
16A9 E0        5002            movx    a,@dptr
16AA F501      5003            mov     (__divsint_PARM_2 + 1),a
16AC 8E82      5004            mov     dpl,r6
16AE 8F83      5005            mov     dph,r7
16B0 120000    5006            lcall   __divsint
16B3 E582      5007            mov     a,dpl
16B5 8583F0    5008            mov     b,dph
16B8 D005      5009            pop     ar5
16BA D004      5010            pop     ar4
16BC 90D768    5011            mov     dptr,#_Joystick_Control_vx_error_1_214
16BF F0        5012            movx    @dptr,a
16C0 A3        5013            inc     dptr
16C1 E5F0      5014            mov     a,b
16C3 F0        5015            movx    @dptr,a
16C4           5016   ;        main.c:1078: vy_error = abs(vy-vy_thres)*100/vy_thres; 
16C4 905548    5017            mov     dptr,#_vy_thres
16C7 E0        5018            movx    a,@dptr
16C8 FE        5019            mov     r6,a
16C9 A3        5020            inc     dptr
16CA E0        5021            movx    a,@dptr
16CB FF        5022            mov     r7,a
16CC EC        5023            mov     a,r4
16CD C3        5024            clr     c
16CE 9E        5025            subb    a,r6
16CF F582      5026            mov     dpl,a
16D1 ED        5027            mov     a,r5
16D2 9F        5028            subb    a,r7
16D3 F583      5029            mov     dph,a
16D5 C004      5030            push    ar4
16D7 C005      5031            push    ar5
16D9 120000    5032            lcall   _abs
16DC 858200    5033            mov     __mulint_PARM_2,dpl
16DF 858301    5034            mov     (__mulint_PARM_2 + 1),dph
16E2 900064    5035            mov     dptr,#0x0064
16E5 120000    5036            lcall   __mulint
16E8 AE82      5037            mov     r6,dpl
16EA AF83      5038            mov     r7,dph
16EC 905548    5039            mov     dptr,#_vy_thres
16EF E0        5040            movx    a,@dptr
16F0 F5F8      5041            mov     _Joystick_Control_sloc0_1_0,a
16F2 A3        5042            inc     dptr
16F3 E0        5043            movx    a,@dptr
16F4 F5F9      5044            mov     (_Joystick_Control_sloc0_1_0 + 1),a
16F6 85F800    5045            mov     __divsint_PARM_2,_Joystick_Control_sloc0_1_0
16F9 85F901    5046            mov     (__divsint_PARM_2 + 1),(_Joystick_Control_sloc0_1_0 + 1)
16FC 8E82      5047            mov     dpl,r6
16FE 8F83      5048            mov     dph,r7
1700 120000    5049            lcall   __divsint
1703 AE82      5050            mov     r6,dpl
1705 AF83      5051            mov     r7,dph
1707 D005      5052            pop     ar5
1709 D004      5053            pop     ar4
170B D003      5054            pop     ar3
170D D002      5055            pop     ar2
170F 90D7C8    5056            mov     dptr,#_Joystick_Control_vy_error_1_214
1712 EE        5057            mov     a,r6
1713 F0        5058            movx    @dptr,a
1714 A3        5059            inc     dptr
1715 EF        5060            mov     a,r7
1716 F0        5061            movx    @dptr,a
1717           5062   ;        main.c:1079: vx_err = vx-vx_thres; 
1717 905588    5063            mov     dptr,#_vx_thres
171A E0        5064            movx    a,@dptr
171B F8        5065            mov     r0,a
171C A3        5066            inc     dptr
171D E0        5067            movx    a,@dptr
171E F9        5068            mov     r1,a
171F 90D818    5069            mov     dptr,#_Joystick_Control_vx_err_1_214
1722 EA        5070            mov     a,r2
1723 C3        5071            clr     c
1724 98        5072            subb    a,r0
1725 F0        5073            movx    @dptr,a
1726 EB        5074            mov     a,r3
1727 99        5075            subb    a,r1
1728 A3        5076            inc     dptr
1729 F0        5077            movx    @dptr,a
172A           5078   ;        main.c:1080: vy_err = vy-vy_thres; 
172A EC        5079            mov     a,r4
172B C3        5080            clr     c
172C 95F8      5081            subb    a,_Joystick_Control_sloc0_1_0
172E FA        5082            mov     r2,a
172F ED        5083            mov     a,r5
1730 95F9      5084            subb    a,(_Joystick_Control_sloc0_1_0 + 1)
1732 FB        5085            mov     r3,a
1733 90D868    5086            mov     dptr,#_Joystick_Control_vy_err_1_214
1736 EA        5087            mov     a,r2
1737 F0        5088            movx    @dptr,a
1738 A3        5089            inc     dptr
1739 EB        5090            mov     a,r3
173A F0        5091            movx    @dptr,a
173B           5092   ;        main.c:1081: pwm_left = 0; 
173B 905708    5093            mov     dptr,#_pwm_left
173E           5094   ;        main.c:1082: pwm_right = 0; 
173E E4        5095            clr     a
173F F0        5096            movx    @dptr,a
1740 9056C8    5097            mov     dptr,#_pwm_right
1743 F0        5098            movx    @dptr,a
1744           5099   ;        main.c:1084: if ((vy_error>5) && (vx_error<5)){
1744 C3        5100            clr     c
1745 7405      5101            mov     a,#0x05
1747 9E        5102            subb    a,r6
1748 E4        5103            clr     a
1749 6480      5104            xrl     a,#0x80
174B 8FF0      5105            mov     b,r7
174D 63F080    5106            xrl     b,#0x80
1750 95F0      5107            subb    a,b
1752 4000      5108            jc      L040062?
1754 020000    5109            ljmp    L040005?
1757           5110   L040062?:
1757 90D768    5111            mov     dptr,#_Joystick_Control_vx_error_1_214
175A E0        5112            movx    a,@dptr
175B F8        5113            mov     r0,a
175C A3        5114            inc     dptr
175D E0        5115            movx    a,@dptr
175E F9        5116            mov     r1,a
175F C3        5117            clr     c
1760 E8        5118            mov     a,r0
1761 9405      5119            subb    a,#0x05
1763 E9        5120            mov     a,r1
1764 6480      5121            xrl     a,#0x80
1766 9480      5122            subb    a,#0x80
1768 4000      5123            jc      L040063?
176A 020000    5124            ljmp    L040005?
176D           5125   L040063?:
176D           5126   ;        main.c:1085: pwm_left = vy_error; 
176D C004      5127            push    ar4
176F C005      5128            push    ar5
1771 905708    5129            mov     dptr,#_pwm_left
1774 EE        5130            mov     a,r6
1775 F0        5131            movx    @dptr,a
1776           5132   ;        main.c:1086: pwm_right = vy_error * pwm_corr; 
1776 8E82      5133            mov     dpl,r6
1778 8F83      5134            mov     dph,r7
177A C002      5135            push    ar2
177C C003      5136            push    ar3
177E C006      5137            push    ar6
1780 C007      5138            push    ar7
1782 120000    5139            lcall   ___sint2fs
1785 A882      5140            mov     r0,dpl
1787 A983      5141            mov     r1,dph
1789 ACF0      5142            mov     r4,b
178B FD        5143            mov     r5,a
178C 9053B8    5144            mov     dptr,#_pwm_corr
178F E0        5145            movx    a,@dptr
1790 C0E0      5146            push    acc
1792 A3        5147            inc     dptr
1793 E0        5148            movx    a,@dptr
1794 C0E0      5149            push    acc
1796 A3        5150            inc     dptr
1797 E0        5151            movx    a,@dptr
1798 C0E0      5152            push    acc
179A A3        5153            inc     dptr
179B E0        5154            movx    a,@dptr
179C C0E0      5155            push    acc
179E 8882      5156            mov     dpl,r0
17A0 8983      5157            mov     dph,r1
17A2 8CF0      5158            mov     b,r4
17A4 ED        5159            mov     a,r5
17A5 120000    5160            lcall   ___fsmul
17A8 AC82      5161            mov     r4,dpl
17AA AD83      5162            mov     r5,dph
17AC A8F0      5163            mov     r0,b
17AE F9        5164            mov     r1,a
17AF E581      5165            mov     a,sp
17B1 24FC      5166            add     a,#0xfc
17B3 F581      5167            mov     sp,a
17B5 D007      5168            pop     ar7
17B7 D006      5169            pop     ar6
17B9 8C82      5170            mov     dpl,r4
17BB 8D83      5171            mov     dph,r5
17BD 88F0      5172            mov     b,r0
17BF E9        5173            mov     a,r1
17C0 C004      5174            push    ar4
17C2 C005      5175            push    ar5
17C4 C006      5176            push    ar6
17C6 C007      5177            push    ar7
17C8 120000    5178            lcall   ___fs2uchar
17CB 8582F8    5179            mov     _Joystick_Control_sloc0_1_0,dpl
17CE D007      5180            pop     ar7
17D0 D006      5181            pop     ar6
17D2 D005      5182            pop     ar5
17D4 D004      5183            pop     ar4
17D6 D003      5184            pop     ar3
17D8 D002      5185            pop     ar2
17DA 9056C8    5186            mov     dptr,#_pwm_right
17DD E5F8      5187            mov     a,_Joystick_Control_sloc0_1_0
17DF F0        5188            movx    @dptr,a
17E0           5189   ;        main.c:1087: if (vy_err > 0){ //move forward
17E0 C3        5190            clr     c
17E1 E4        5191            clr     a
17E2 9A        5192            subb    a,r2
17E3 E4        5193            clr     a
17E4 6480      5194            xrl     a,#0x80
17E6 8BF0      5195            mov     b,r3
17E8 63F080    5196            xrl     b,#0x80
17EB 95F0      5197            subb    a,b
17ED D005      5198            pop     ar5
17EF D004      5199            pop     ar4
17F1 5000      5200            jnc     L040002?
17F3           5201   ;        main.c:1088: L_motor_dir = 0; 
17F3 905688    5202            mov     dptr,#_L_motor_dir
17F6           5203   ;        main.c:1089: R_motor_dir = 0; 
17F6 E4        5204            clr     a
17F7 F0        5205            movx    @dptr,a
17F8 905648    5206            mov     dptr,#_R_motor_dir
17FB F0        5207            movx    @dptr,a
17FC 8000      5208            sjmp    L040005?
17FE           5209   L040002?:
17FE           5210   ;        main.c:1092: L_motor_dir = 1; 
17FE 905688    5211            mov     dptr,#_L_motor_dir
1801 7401      5212            mov     a,#0x01
1803 F0        5213            movx    @dptr,a
1804           5214   ;        main.c:1093: R_motor_dir = 1; 
1804 905648    5215            mov     dptr,#_R_motor_dir
1807 7401      5216            mov     a,#0x01
1809 F0        5217            movx    @dptr,a
180A           5218   ;        main.c:1094: pwm_right *= 1.05;
180A 85F882    5219            mov     dpl,_Joystick_Control_sloc0_1_0
180D C004      5220            push    ar4
180F C005      5221            push    ar5
1811 C006      5222            push    ar6
1813 C007      5223            push    ar7
1815 120000    5224            lcall   ___uchar2fs
1818 AA82      5225            mov     r2,dpl
181A AB83      5226            mov     r3,dph
181C A8F0      5227            mov     r0,b
181E F9        5228            mov     r1,a
181F C002      5229            push    ar2
1821 C003      5230            push    ar3
1823 C000      5231            push    ar0
1825 C001      5232            push    ar1
1827 906666    5233            mov     dptr,#0x6666
182A 75F086    5234            mov     b,#0x86
182D 743F      5235            mov     a,#0x3F
182F 120000    5236            lcall   ___fsmul
1832 AA82      5237            mov     r2,dpl
1834 AB83      5238            mov     r3,dph
1836 A8F0      5239            mov     r0,b
1838 F9        5240            mov     r1,a
1839 E581      5241            mov     a,sp
183B 24FC      5242            add     a,#0xfc
183D F581      5243            mov     sp,a
183F 8A82      5244            mov     dpl,r2
1841 8B83      5245            mov     dph,r3
1843 88F0      5246            mov     b,r0
1845 E9        5247            mov     a,r1
1846 120000    5248            lcall   ___fs2uchar
1849 E582      5249            mov     a,dpl
184B D007      5250            pop     ar7
184D D006      5251            pop     ar6
184F D005      5252            pop     ar5
1851 D004      5253            pop     ar4
1853 9056C8    5254            mov     dptr,#_pwm_right
1856 F0        5255            movx    @dptr,a
1857           5256   L040005?:
1857           5257   ;        main.c:1097: if ((vx_error>5)&&(vy_error<5)){
1857 90D768    5258            mov     dptr,#_Joystick_Control_vx_error_1_214
185A E0        5259            movx    a,@dptr
185B FA        5260            mov     r2,a
185C A3        5261            inc     dptr
185D E0        5262            movx    a,@dptr
185E FB        5263            mov     r3,a
185F C3        5264            clr     c
1860 7405      5265            mov     a,#0x05
1862 9A        5266            subb    a,r2
1863 E4        5267            clr     a
1864 6480      5268            xrl     a,#0x80
1866 8BF0      5269            mov     b,r3
1868 63F080    5270            xrl     b,#0x80
186B 95F0      5271            subb    a,b
186D E4        5272            clr     a
186E 33        5273            rlc     a
186F F5F8      5274            mov     _Joystick_Control_sloc0_1_0,a
1871 7000      5275            jnz     L040065?
1873 020000    5276            ljmp    L040015?
1876           5277   L040065?:
1876 C3        5278            clr     c
1877 EE        5279            mov     a,r6
1878 9405      5280            subb    a,#0x05
187A EF        5281            mov     a,r7
187B 6480      5282            xrl     a,#0x80
187D 9480      5283            subb    a,#0x80
187F 4000      5284            jc      L040066?
1881 020000    5285            ljmp    L040015?
1884           5286   L040066?:
1884           5287   ;        main.c:1098: angle_diff = fabsf(raw_angle - last_raw_angle); //calculate the angle difference 
1884 905338    5288            mov     dptr,#_raw_angle
1887 E0        5289            movx    a,@dptr
1888 FE        5290            mov     r6,a
1889 A3        5291            inc     dptr
188A E0        5292            movx    a,@dptr
188B FF        5293            mov     r7,a
188C A3        5294            inc     dptr
188D E0        5295            movx    a,@dptr
188E F9        5296            mov     r1,a
188F A3        5297            inc     dptr
1890 E0        5298            movx    a,@dptr
1891 F8        5299            mov     r0,a
1892 C002      5300            push    ar2
1894 C003      5301            push    ar3
1896 C004      5302            push    ar4
1898 C005      5303            push    ar5
189A 9052F8    5304            mov     dptr,#_last_raw_angle
189D E0        5305            movx    a,@dptr
189E C0E0      5306            push    acc
18A0 A3        5307            inc     dptr
18A1 E0        5308            movx    a,@dptr
18A2 C0E0      5309            push    acc
18A4 A3        5310            inc     dptr
18A5 E0        5311            movx    a,@dptr
18A6 C0E0      5312            push    acc
18A8 A3        5313            inc     dptr
18A9 E0        5314            movx    a,@dptr
18AA C0E0      5315            push    acc
18AC 8E82      5316            mov     dpl,r6
18AE 8F83      5317            mov     dph,r7
18B0 89F0      5318            mov     b,r1
18B2 E8        5319            mov     a,r0
18B3 120000    5320            lcall   ___fssub
18B6 AE82      5321            mov     r6,dpl
18B8 AF83      5322            mov     r7,dph
18BA A8F0      5323            mov     r0,b
18BC F9        5324            mov     r1,a
18BD E581      5325            mov     a,sp
18BF 24FC      5326            add     a,#0xfc
18C1 F581      5327            mov     sp,a
18C3 8E82      5328            mov     dpl,r6
18C5 8F83      5329            mov     dph,r7
18C7 88F0      5330            mov     b,r0
18C9 E9        5331            mov     a,r1
18CA 120000    5332            lcall   _fabsf
18CD 858248    5333            mov     _Joystick_Control_sloc1_1_0,dpl
18D0 858349    5334            mov     (_Joystick_Control_sloc1_1_0 + 1),dph
18D3 85F04A    5335            mov     (_Joystick_Control_sloc1_1_0 + 2),b
18D6 F54B      5336            mov     (_Joystick_Control_sloc1_1_0 + 3),a
18D8 D005      5337            pop     ar5
18DA D004      5338            pop     ar4
18DC D003      5339            pop     ar3
18DE D002      5340            pop     ar2
18E0 9052B8    5341            mov     dptr,#_angle_diff
18E3 E548      5342            mov     a,_Joystick_Control_sloc1_1_0
18E5 F0        5343            movx    @dptr,a
18E6 A3        5344            inc     dptr
18E7 E549      5345            mov     a,(_Joystick_Control_sloc1_1_0 + 1)
18E9 F0        5346            movx    @dptr,a
18EA A3        5347            inc     dptr
18EB E54A      5348            mov     a,(_Joystick_Control_sloc1_1_0 + 2)
18ED F0        5349            movx    @dptr,a
18EE A3        5350            inc     dptr
18EF E54B      5351            mov     a,(_Joystick_Control_sloc1_1_0 + 3)
18F1 F0        5352            movx    @dptr,a
18F2           5353   ;        main.c:1099: pwm_left = vx_error; 
18F2 905708    5354            mov     dptr,#_pwm_left
18F5 EA        5355            mov     a,r2
18F6 F0        5356            movx    @dptr,a
18F7           5357   ;        main.c:1100: pwm_right = vx_error * pwm_corr; 
18F7 8A82      5358            mov     dpl,r2
18F9 8B83      5359            mov     dph,r3
18FB C002      5360            push    ar2
18FD C003      5361            push    ar3
18FF C004      5362            push    ar4
1901 C005      5363            push    ar5
1903 120000    5364            lcall   ___sint2fs
1906 AE82      5365            mov     r6,dpl
1908 AF83      5366            mov     r7,dph
190A A8F0      5367            mov     r0,b
190C F9        5368            mov     r1,a
190D 9053B8    5369            mov     dptr,#_pwm_corr
1910 E0        5370            movx    a,@dptr
1911 C0E0      5371            push    acc
1913 A3        5372            inc     dptr
1914 E0        5373            movx    a,@dptr
1915 C0E0      5374            push    acc
1917 A3        5375            inc     dptr
1918 E0        5376            movx    a,@dptr
1919 C0E0      5377            push    acc
191B A3        5378            inc     dptr
191C E0        5379            movx    a,@dptr
191D C0E0      5380            push    acc
191F 8E82      5381            mov     dpl,r6
1921 8F83      5382            mov     dph,r7
1923 88F0      5383            mov     b,r0
1925 E9        5384            mov     a,r1
1926 120000    5385            lcall   ___fsmul
1929 AE82      5386            mov     r6,dpl
192B AF83      5387            mov     r7,dph
192D A8F0      5388            mov     r0,b
192F F9        5389            mov     r1,a
1930 E581      5390            mov     a,sp
1932 24FC      5391            add     a,#0xfc
1934 F581      5392            mov     sp,a
1936 8E82      5393            mov     dpl,r6
1938 8F83      5394            mov     dph,r7
193A 88F0      5395            mov     b,r0
193C E9        5396            mov     a,r1
193D 120000    5397            lcall   ___fs2uchar
1940 E582      5398            mov     a,dpl
1942 D005      5399            pop     ar5
1944 D004      5400            pop     ar4
1946 D003      5401            pop     ar3
1948 D002      5402            pop     ar2
194A 9056C8    5403            mov     dptr,#_pwm_right
194D F0        5404            movx    @dptr,a
194E           5405   ;        main.c:1101: if (vx_err > 0){ //turn right
194E 90D818    5406            mov     dptr,#_Joystick_Control_vx_err_1_214
1951 E0        5407            movx    a,@dptr
1952 FE        5408            mov     r6,a
1953 A3        5409            inc     dptr
1954 E0        5410            movx    a,@dptr
1955 FF        5411            mov     r7,a
1956 C3        5412            clr     c
1957 E4        5413            clr     a
1958 9E        5414            subb    a,r6
1959 E4        5415            clr     a
195A 6480      5416            xrl     a,#0x80
195C 8FF0      5417            mov     b,r7
195E 63F080    5418            xrl     b,#0x80
1961 95F0      5419            subb    a,b
1963 5000      5420            jnc     L040008?
1965           5421   ;        main.c:1102: L_motor_dir = 1; 
1965 905688    5422            mov     dptr,#_L_motor_dir
1968 7401      5423            mov     a,#0x01
196A F0        5424            movx    @dptr,a
196B           5425   ;        main.c:1103: R_motor_dir = 0;
196B 905648    5426            mov     dptr,#_R_motor_dir
196E E4        5427            clr     a
196F F0        5428            movx    @dptr,a
1970           5429   ;        main.c:1104: curr_angle += angle_diff * 1.45; // TUNE THIS
1970 C002      5430            push    ar2
1972 C003      5431            push    ar3
1974 C004      5432            push    ar4
1976 C005      5433            push    ar5
1978 C048      5434            push    _Joystick_Control_sloc1_1_0
197A C049      5435            push    (_Joystick_Control_sloc1_1_0 + 1)
197C C04A      5436            push    (_Joystick_Control_sloc1_1_0 + 2)
197E C04B      5437            push    (_Joystick_Control_sloc1_1_0 + 3)
1980 90999A    5438            mov     dptr,#0x999A
1983 75F0B9    5439            mov     b,#0xB9
1986 743F      5440            mov     a,#0x3F
1988 120000    5441            lcall   ___fsmul
198B 858298    5442            mov     _Joystick_Control_sloc2_1_0,dpl
198E 858399    5443            mov     (_Joystick_Control_sloc2_1_0 + 1),dph
1991 85F09A    5444            mov     (_Joystick_Control_sloc2_1_0 + 2),b
1994 F59B      5445            mov     (_Joystick_Control_sloc2_1_0 + 3),a
1996 E581      5446            mov     a,sp
1998 24FC      5447            add     a,#0xfc
199A F581      5448            mov     sp,a
199C 905378    5449            mov     dptr,#_curr_angle
199F E0        5450            movx    a,@dptr
19A0 FE        5451            mov     r6,a
19A1 A3        5452            inc     dptr
19A2 E0        5453            movx    a,@dptr
19A3 FF        5454            mov     r7,a
19A4 A3        5455            inc     dptr
19A5 E0        5456            movx    a,@dptr
19A6 F8        5457            mov     r0,a
19A7 A3        5458            inc     dptr
19A8 E0        5459            movx    a,@dptr
19A9 F9        5460            mov     r1,a
19AA C098      5461            push    _Joystick_Control_sloc2_1_0
19AC C099      5462            push    (_Joystick_Control_sloc2_1_0 + 1)
19AE C09A      5463            push    (_Joystick_Control_sloc2_1_0 + 2)
19B0 C09B      5464            push    (_Joystick_Control_sloc2_1_0 + 3)
19B2 8E82      5465            mov     dpl,r6
19B4 8F83      5466            mov     dph,r7
19B6 88F0      5467            mov     b,r0
19B8 E9        5468            mov     a,r1
19B9 120000    5469            lcall   ___fsadd
19BC AE82      5470            mov     r6,dpl
19BE AF83      5471            mov     r7,dph
19C0 A8F0      5472            mov     r0,b
19C2 F9        5473            mov     r1,a
19C3 E581      5474            mov     a,sp
19C5 24FC      5475            add     a,#0xfc
19C7 F581      5476            mov     sp,a
19C9 D005      5477            pop     ar5
19CB D004      5478            pop     ar4
19CD D003      5479            pop     ar3
19CF D002      5480            pop     ar2
19D1 905378    5481            mov     dptr,#_curr_angle
19D4 EE        5482            mov     a,r6
19D5 F0        5483            movx    @dptr,a
19D6 A3        5484            inc     dptr
19D7 EF        5485            mov     a,r7
19D8 F0        5486            movx    @dptr,a
19D9 A3        5487            inc     dptr
19DA E8        5488            mov     a,r0
19DB F0        5489            movx    @dptr,a
19DC A3        5490            inc     dptr
19DD E9        5491            mov     a,r1
19DE F0        5492            movx    @dptr,a
19DF 8000      5493            sjmp    L040009?
19E1           5494   L040008?:
19E1           5495   ;        main.c:1107: L_motor_dir = 0; 
19E1 905688    5496            mov     dptr,#_L_motor_dir
19E4 E4        5497            clr     a
19E5 F0        5498            movx    @dptr,a
19E6           5499   ;        main.c:1108: R_motor_dir = 1; 
19E6 905648    5500            mov     dptr,#_R_motor_dir
19E9 7401      5501            mov     a,#0x01
19EB F0        5502            movx    @dptr,a
19EC           5503   ;        main.c:1109: curr_angle -= angle_diff * 1.4; // TUNE THIS
19EC C002      5504            push    ar2
19EE C003      5505            push    ar3
19F0 C004      5506            push    ar4
19F2 C005      5507            push    ar5
19F4 C048      5508            push    _Joystick_Control_sloc1_1_0
19F6 C049      5509            push    (_Joystick_Control_sloc1_1_0 + 1)
19F8 C04A      5510            push    (_Joystick_Control_sloc1_1_0 + 2)
19FA C04B      5511            push    (_Joystick_Control_sloc1_1_0 + 3)
19FC 903333    5512            mov     dptr,#0x3333
19FF 75F0B3    5513            mov     b,#0xB3
1A02 743F      5514            mov     a,#0x3F
1A04 120000    5515            lcall   ___fsmul
1A07 858298    5516            mov     _Joystick_Control_sloc2_1_0,dpl
1A0A 858399    5517            mov     (_Joystick_Control_sloc2_1_0 + 1),dph
1A0D 85F09A    5518            mov     (_Joystick_Control_sloc2_1_0 + 2),b
1A10 F59B      5519            mov     (_Joystick_Control_sloc2_1_0 + 3),a
1A12 E581      5520            mov     a,sp
1A14 24FC      5521            add     a,#0xfc
1A16 F581      5522            mov     sp,a
1A18 905378    5523            mov     dptr,#_curr_angle
1A1B E0        5524            movx    a,@dptr
1A1C FE        5525            mov     r6,a
1A1D A3        5526            inc     dptr
1A1E E0        5527            movx    a,@dptr
1A1F FF        5528            mov     r7,a
1A20 A3        5529            inc     dptr
1A21 E0        5530            movx    a,@dptr
1A22 F8        5531            mov     r0,a
1A23 A3        5532            inc     dptr
1A24 E0        5533            movx    a,@dptr
1A25 F9        5534            mov     r1,a
1A26 C098      5535            push    _Joystick_Control_sloc2_1_0
1A28 C099      5536            push    (_Joystick_Control_sloc2_1_0 + 1)
1A2A C09A      5537            push    (_Joystick_Control_sloc2_1_0 + 2)
1A2C C09B      5538            push    (_Joystick_Control_sloc2_1_0 + 3)
1A2E 8E82      5539            mov     dpl,r6
1A30 8F83      5540            mov     dph,r7
1A32 88F0      5541            mov     b,r0
1A34 E9        5542            mov     a,r1
1A35 120000    5543            lcall   ___fssub
1A38 AE82      5544            mov     r6,dpl
1A3A AF83      5545            mov     r7,dph
1A3C A8F0      5546            mov     r0,b
1A3E F9        5547            mov     r1,a
1A3F E581      5548            mov     a,sp
1A41 24FC      5549            add     a,#0xfc
1A43 F581      5550            mov     sp,a
1A45 D005      5551            pop     ar5
1A47 D004      5552            pop     ar4
1A49 D003      5553            pop     ar3
1A4B D002      5554            pop     ar2
1A4D 905378    5555            mov     dptr,#_curr_angle
1A50 EE        5556            mov     a,r6
1A51 F0        5557            movx    @dptr,a
1A52 A3        5558            inc     dptr
1A53 EF        5559            mov     a,r7
1A54 F0        5560            movx    @dptr,a
1A55 A3        5561            inc     dptr
1A56 E8        5562            mov     a,r0
1A57 F0        5563            movx    @dptr,a
1A58 A3        5564            inc     dptr
1A59 E9        5565            mov     a,r1
1A5A F0        5566            movx    @dptr,a
1A5B           5567   ;        main.c:1178: return curr_angle; 
1A5B           5568   ;        main.c:1109: curr_angle -= angle_diff * 1.4; // TUNE THIS
1A5B           5569   L040009?:
1A5B           5570   ;        main.c:1111: if (curr_angle > 360.0) curr_angle -= 360.0; 
1A5B 905378    5571            mov     dptr,#_curr_angle
1A5E E0        5572            movx    a,@dptr
1A5F F598      5573            mov     _Joystick_Control_sloc2_1_0,a
1A61 A3        5574            inc     dptr
1A62 E0        5575            movx    a,@dptr
1A63 F599      5576            mov     (_Joystick_Control_sloc2_1_0 + 1),a
1A65 A3        5577            inc     dptr
1A66 E0        5578            movx    a,@dptr
1A67 F59A      5579            mov     (_Joystick_Control_sloc2_1_0 + 2),a
1A69 A3        5580            inc     dptr
1A6A E0        5581            movx    a,@dptr
1A6B F59B      5582            mov     (_Joystick_Control_sloc2_1_0 + 3),a
1A6D C002      5583            push    ar2
1A6F C003      5584            push    ar3
1A71 C004      5585            push    ar4
1A73 C005      5586            push    ar5
1A75 E4        5587            clr     a
1A76 C0E0      5588            push    acc
1A78 C0E0      5589            push    acc
1A7A 74B4      5590            mov     a,#0xB4
1A7C C0E0      5591            push    acc
1A7E 7443      5592            mov     a,#0x43
1A80 C0E0      5593            push    acc
1A82 859882    5594            mov     dpl,_Joystick_Control_sloc2_1_0
1A85 859983    5595            mov     dph,(_Joystick_Control_sloc2_1_0 + 1)
1A88 859AF0    5596            mov     b,(_Joystick_Control_sloc2_1_0 + 2)
1A8B E59B      5597            mov     a,(_Joystick_Control_sloc2_1_0 + 3)
1A8D 120000    5598            lcall   ___fsgt
1A90 AE82      5599            mov     r6,dpl
1A92 E581      5600            mov     a,sp
1A94 24FC      5601            add     a,#0xfc
1A96 F581      5602            mov     sp,a
1A98 D005      5603            pop     ar5
1A9A D004      5604            pop     ar4
1A9C D003      5605            pop     ar3
1A9E D002      5606            pop     ar2
1AA0 EE        5607            mov     a,r6
1AA1 6000      5608            jz      L040011?
1AA3 C002      5609            push    ar2
1AA5 C003      5610            push    ar3
1AA7 C004      5611            push    ar4
1AA9 C005      5612            push    ar5
1AAB E4        5613            clr     a
1AAC C0E0      5614            push    acc
1AAE C0E0      5615            push    acc
1AB0 74B4      5616            mov     a,#0xB4
1AB2 C0E0      5617            push    acc
1AB4 7443      5618            mov     a,#0x43
1AB6 C0E0      5619            push    acc
1AB8 859882    5620            mov     dpl,_Joystick_Control_sloc2_1_0
1ABB 859983    5621            mov     dph,(_Joystick_Control_sloc2_1_0 + 1)
1ABE 859AF0    5622            mov     b,(_Joystick_Control_sloc2_1_0 + 2)
1AC1 E59B      5623            mov     a,(_Joystick_Control_sloc2_1_0 + 3)
1AC3 120000    5624            lcall   ___fssub
1AC6 AE82      5625            mov     r6,dpl
1AC8 AF83      5626            mov     r7,dph
1ACA A9F0      5627            mov     r1,b
1ACC F8        5628            mov     r0,a
1ACD E581      5629            mov     a,sp
1ACF 24FC      5630            add     a,#0xfc
1AD1 F581      5631            mov     sp,a
1AD3 D005      5632            pop     ar5
1AD5 D004      5633            pop     ar4
1AD7 D003      5634            pop     ar3
1AD9 D002      5635            pop     ar2
1ADB 905378    5636            mov     dptr,#_curr_angle
1ADE EE        5637            mov     a,r6
1ADF F0        5638            movx    @dptr,a
1AE0 A3        5639            inc     dptr
1AE1 EF        5640            mov     a,r7
1AE2 F0        5641            movx    @dptr,a
1AE3 A3        5642            inc     dptr
1AE4 E9        5643            mov     a,r1
1AE5 F0        5644            movx    @dptr,a
1AE6 A3        5645            inc     dptr
1AE7 E8        5646            mov     a,r0
1AE8 F0        5647            movx    @dptr,a
1AE9           5648   L040011?:
1AE9           5649   ;        main.c:1112: if (curr_angle < 0.0) curr_angle += 360.0; 
1AE9 905378    5650            mov     dptr,#_curr_angle
1AEC E0        5651            movx    a,@dptr
1AED F598      5652            mov     _Joystick_Control_sloc2_1_0,a
1AEF A3        5653            inc     dptr
1AF0 E0        5654            movx    a,@dptr
1AF1 F599      5655            mov     (_Joystick_Control_sloc2_1_0 + 1),a
1AF3 A3        5656            inc     dptr
1AF4 E0        5657            movx    a,@dptr
1AF5 F59A      5658            mov     (_Joystick_Control_sloc2_1_0 + 2),a
1AF7 A3        5659            inc     dptr
1AF8 E0        5660            movx    a,@dptr
1AF9 F59B      5661            mov     (_Joystick_Control_sloc2_1_0 + 3),a
1AFB C002      5662            push    ar2
1AFD C003      5663            push    ar3
1AFF C004      5664            push    ar4
1B01 C005      5665            push    ar5
1B03 E4        5666            clr     a
1B04 C0E0      5667            push    acc
1B06 C0E0      5668            push    acc
1B08 C0E0      5669            push    acc
1B0A C0E0      5670            push    acc
1B0C 859882    5671            mov     dpl,_Joystick_Control_sloc2_1_0
1B0F 859983    5672            mov     dph,(_Joystick_Control_sloc2_1_0 + 1)
1B12 859AF0    5673            mov     b,(_Joystick_Control_sloc2_1_0 + 2)
1B15 E59B      5674            mov     a,(_Joystick_Control_sloc2_1_0 + 3)
1B17 120000    5675            lcall   ___fslt
1B1A AE82      5676            mov     r6,dpl
1B1C E581      5677            mov     a,sp
1B1E 24FC      5678            add     a,#0xfc
1B20 F581      5679            mov     sp,a
1B22 D005      5680            pop     ar5
1B24 D004      5681            pop     ar4
1B26 D003      5682            pop     ar3
1B28 D002      5683            pop     ar2
1B2A EE        5684            mov     a,r6
1B2B 6000      5685            jz      L040015?
1B2D C002      5686            push    ar2
1B2F C003      5687            push    ar3
1B31 C004      5688            push    ar4
1B33 C005      5689            push    ar5
1B35 E4        5690            clr     a
1B36 C0E0      5691            push    acc
1B38 C0E0      5692            push    acc
1B3A 74B4      5693            mov     a,#0xB4
1B3C C0E0      5694            push    acc
1B3E 7443      5695            mov     a,#0x43
1B40 C0E0      5696            push    acc
1B42 859882    5697            mov     dpl,_Joystick_Control_sloc2_1_0
1B45 859983    5698            mov     dph,(_Joystick_Control_sloc2_1_0 + 1)
1B48 859AF0    5699            mov     b,(_Joystick_Control_sloc2_1_0 + 2)
1B4B E59B      5700            mov     a,(_Joystick_Control_sloc2_1_0 + 3)
1B4D 120000    5701            lcall   ___fsadd
1B50 AE82      5702            mov     r6,dpl
1B52 AF83      5703            mov     r7,dph
1B54 A8F0      5704            mov     r0,b
1B56 F9        5705            mov     r1,a
1B57 E581      5706            mov     a,sp
1B59 24FC      5707            add     a,#0xfc
1B5B F581      5708            mov     sp,a
1B5D D005      5709            pop     ar5
1B5F D004      5710            pop     ar4
1B61 D003      5711            pop     ar3
1B63 D002      5712            pop     ar2
1B65 905378    5713            mov     dptr,#_curr_angle
1B68 EE        5714            mov     a,r6
1B69 F0        5715            movx    @dptr,a
1B6A A3        5716            inc     dptr
1B6B EF        5717            mov     a,r7
1B6C F0        5718            movx    @dptr,a
1B6D A3        5719            inc     dptr
1B6E E8        5720            mov     a,r0
1B6F F0        5721            movx    @dptr,a
1B70 A3        5722            inc     dptr
1B71 E9        5723            mov     a,r1
1B72 F0        5724            movx    @dptr,a
1B73           5725   L040015?:
1B73           5726   ;        main.c:1114: if ((vx_error>5)&&(vy_error)>5){
1B73 E5F8      5727            mov     a,_Joystick_Control_sloc0_1_0
1B75 7000      5728            jnz     L040070?
1B77 020000    5729            ljmp    L040040?
1B7A           5730   L040070?:
1B7A 90D7C8    5731            mov     dptr,#_Joystick_Control_vy_error_1_214
1B7D E0        5732            movx    a,@dptr
1B7E F5F8      5733            mov     _Joystick_Control_sloc0_1_0,a
1B80 A3        5734            inc     dptr
1B81 E0        5735            movx    a,@dptr
1B82 F5F9      5736            mov     (_Joystick_Control_sloc0_1_0 + 1),a
1B84 C3        5737            clr     c
1B85 7405      5738            mov     a,#0x05
1B87 95F8      5739            subb    a,_Joystick_Control_sloc0_1_0
1B89 E4        5740            clr     a
1B8A 6480      5741            xrl     a,#0x80
1B8C 85F9F0    5742            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
1B8F 63F080    5743            xrl     b,#0x80
1B92 95F0      5744            subb    a,b
1B94 4000      5745            jc      L040071?
1B96 020000    5746            ljmp    L040040?
1B99           5747   L040071?:
1B99           5748   ;        main.c:1116: angle_diff = fabsf(raw_angle - last_raw_angle);
1B99 C004      5749            push    ar4
1B9B C005      5750            push    ar5
1B9D 905338    5751            mov     dptr,#_raw_angle
1BA0 E0        5752            movx    a,@dptr
1BA1 F8        5753            mov     r0,a
1BA2 A3        5754            inc     dptr
1BA3 E0        5755            movx    a,@dptr
1BA4 F9        5756            mov     r1,a
1BA5 A3        5757            inc     dptr
1BA6 E0        5758            movx    a,@dptr
1BA7 FC        5759            mov     r4,a
1BA8 A3        5760            inc     dptr
1BA9 E0        5761            movx    a,@dptr
1BAA FD        5762            mov     r5,a
1BAB C002      5763            push    ar2
1BAD C003      5764            push    ar3
1BAF 9052F8    5765            mov     dptr,#_last_raw_angle
1BB2 E0        5766            movx    a,@dptr
1BB3 C0E0      5767            push    acc
1BB5 A3        5768            inc     dptr
1BB6 E0        5769            movx    a,@dptr
1BB7 C0E0      5770            push    acc
1BB9 A3        5771            inc     dptr
1BBA E0        5772            movx    a,@dptr
1BBB C0E0      5773            push    acc
1BBD A3        5774            inc     dptr
1BBE E0        5775            movx    a,@dptr
1BBF C0E0      5776            push    acc
1BC1 8882      5777            mov     dpl,r0
1BC3 8983      5778            mov     dph,r1
1BC5 8CF0      5779            mov     b,r4
1BC7 ED        5780            mov     a,r5
1BC8 120000    5781            lcall   ___fssub
1BCB AC82      5782            mov     r4,dpl
1BCD AD83      5783            mov     r5,dph
1BCF A8F0      5784            mov     r0,b
1BD1 F9        5785            mov     r1,a
1BD2 E581      5786            mov     a,sp
1BD4 24FC      5787            add     a,#0xfc
1BD6 F581      5788            mov     sp,a
1BD8 8C82      5789            mov     dpl,r4
1BDA 8D83      5790            mov     dph,r5
1BDC 88F0      5791            mov     b,r0
1BDE E9        5792            mov     a,r1
1BDF C004      5793            push    ar4
1BE1 C005      5794            push    ar5
1BE3 120000    5795            lcall   _fabsf
1BE6 858298    5796            mov     _Joystick_Control_sloc2_1_0,dpl
1BE9 858399    5797            mov     (_Joystick_Control_sloc2_1_0 + 1),dph
1BEC 85F09A    5798            mov     (_Joystick_Control_sloc2_1_0 + 2),b
1BEF F59B      5799            mov     (_Joystick_Control_sloc2_1_0 + 3),a
1BF1 D005      5800            pop     ar5
1BF3 D004      5801            pop     ar4
1BF5 D003      5802            pop     ar3
1BF7 D002      5803            pop     ar2
1BF9 9052B8    5804            mov     dptr,#_angle_diff
1BFC E598      5805            mov     a,_Joystick_Control_sloc2_1_0
1BFE F0        5806            movx    @dptr,a
1BFF A3        5807            inc     dptr
1C00 E599      5808            mov     a,(_Joystick_Control_sloc2_1_0 + 1)
1C02 F0        5809            movx    @dptr,a
1C03 A3        5810            inc     dptr
1C04 E59A      5811            mov     a,(_Joystick_Control_sloc2_1_0 + 2)
1C06 F0        5812            movx    @dptr,a
1C07 A3        5813            inc     dptr
1C08 E59B      5814            mov     a,(_Joystick_Control_sloc2_1_0 + 3)
1C0A F0        5815            movx    @dptr,a
1C0B           5816   ;        main.c:1117: if (vy_err>0){
1C0B 90D868    5817            mov     dptr,#_Joystick_Control_vy_err_1_214
1C0E E0        5818            movx    a,@dptr
1C0F F548      5819            mov     _Joystick_Control_sloc1_1_0,a
1C11 A3        5820            inc     dptr
1C12 E0        5821            movx    a,@dptr
1C13 F549      5822            mov     (_Joystick_Control_sloc1_1_0 + 1),a
1C15 C3        5823            clr     c
1C16 E4        5824            clr     a
1C17 9548      5825            subb    a,_Joystick_Control_sloc1_1_0
1C19 E4        5826            clr     a
1C1A 6480      5827            xrl     a,#0x80
1C1C 8549F0    5828            mov     b,(_Joystick_Control_sloc1_1_0 + 1)
1C1F 63F080    5829            xrl     b,#0x80
1C22 95F0      5830            subb    a,b
1C24 D005      5831            pop     ar5
1C26 D004      5832            pop     ar4
1C28 4000      5833            jc      L040072?
1C2A 020000    5834            ljmp    L040027?
1C2D           5835   L040072?:
1C2D           5836   ;        main.c:1118: L_motor_dir = 0; 
1C2D 905688    5837            mov     dptr,#_L_motor_dir
1C30           5838   ;        main.c:1119: R_motor_dir = 0; 
1C30 E4        5839            clr     a
1C31 F0        5840            movx    @dptr,a
1C32 905648    5841            mov     dptr,#_R_motor_dir
1C35 F0        5842            movx    @dptr,a
1C36           5843   ;        main.c:1121: if (vx_err>0){
1C36 90D818    5844            mov     dptr,#_Joystick_Control_vx_err_1_214
1C39 E0        5845            movx    a,@dptr
1C3A F8        5846            mov     r0,a
1C3B A3        5847            inc     dptr
1C3C E0        5848            movx    a,@dptr
1C3D F9        5849            mov     r1,a
1C3E C3        5850            clr     c
1C3F E4        5851            clr     a
1C40 98        5852            subb    a,r0
1C41 E4        5853            clr     a
1C42 6480      5854            xrl     a,#0x80
1C44 89F0      5855            mov     b,r1
1C46 63F080    5856            xrl     b,#0x80
1C49 95F0      5857            subb    a,b
1C4B 4000      5858            jc      L040073?
1C4D 020000    5859            ljmp    L040024?
1C50           5860   L040073?:
1C50           5861   ;        main.c:1123: if (vy*100<=vy_thres*100/2){
1C50 8C00      5862            mov     __mulint_PARM_2,r4
1C52 8D01      5863            mov     (__mulint_PARM_2 + 1),r5
1C54 900064    5864            mov     dptr,#0x0064
1C57 C002      5865            push    ar2
1C59 C003      5866            push    ar3
1C5B C004      5867            push    ar4
1C5D C005      5868            push    ar5
1C5F 120000    5869            lcall   __mulint
1C62 A882      5870            mov     r0,dpl
1C64 A983      5871            mov     r1,dph
1C66 905548    5872            mov     dptr,#_vy_thres
1C69 E0        5873            movx    a,@dptr
1C6A F500      5874            mov     __mulint_PARM_2,a
1C6C A3        5875            inc     dptr
1C6D E0        5876            movx    a,@dptr
1C6E F501      5877            mov     (__mulint_PARM_2 + 1),a
1C70 900064    5878            mov     dptr,#0x0064
1C73 C000      5879            push    ar0
1C75 C001      5880            push    ar1
1C77 120000    5881            lcall   __mulint
1C7A AE82      5882            mov     r6,dpl
1C7C AF83      5883            mov     r7,dph
1C7E 750002    5884            mov     __divsint_PARM_2,#0x02
1C81 E4        5885            clr     a
1C82 F501      5886            mov     (__divsint_PARM_2 + 1),a
1C84 8E82      5887            mov     dpl,r6
1C86 8F83      5888            mov     dph,r7
1C88 120000    5889            lcall   __divsint
1C8B AE82      5890            mov     r6,dpl
1C8D AF83      5891            mov     r7,dph
1C8F D001      5892            pop     ar1
1C91 D000      5893            pop     ar0
1C93 D005      5894            pop     ar5
1C95 D004      5895            pop     ar4
1C97 D003      5896            pop     ar3
1C99 D002      5897            pop     ar2
1C9B C3        5898            clr     c
1C9C EE        5899            mov     a,r6
1C9D 98        5900            subb    a,r0
1C9E EF        5901            mov     a,r7
1C9F 6480      5902            xrl     a,#0x80
1CA1 89F0      5903            mov     b,r1
1CA3 63F080    5904            xrl     b,#0x80
1CA6 95F0      5905            subb    a,b
1CA8 5000      5906            jnc     L040074?
1CAA 020000    5907            ljmp    L040018?
1CAD           5908   L040074?:
1CAD           5909   ;        main.c:1124: pwm_left = vy_error; 
1CAD C004      5910            push    ar4
1CAF C005      5911            push    ar5
1CB1 905708    5912            mov     dptr,#_pwm_left
1CB4 E5F8      5913            mov     a,_Joystick_Control_sloc0_1_0
1CB6 F0        5914            movx    @dptr,a
1CB7           5915   ;        main.c:1125: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
1CB7 9053B8    5916            mov     dptr,#_pwm_corr
1CBA E0        5917            movx    a,@dptr
1CBB F5E8      5918            mov     _Joystick_Control_sloc3_1_0,a
1CBD A3        5919            inc     dptr
1CBE E0        5920            movx    a,@dptr
1CBF F5E9      5921            mov     (_Joystick_Control_sloc3_1_0 + 1),a
1CC1 A3        5922            inc     dptr
1CC2 E0        5923            movx    a,@dptr
1CC3 F5EA      5924            mov     (_Joystick_Control_sloc3_1_0 + 2),a
1CC5 A3        5925            inc     dptr
1CC6 E0        5926            movx    a,@dptr
1CC7 F5EB      5927            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1CC9 85F882    5928            mov     dpl,_Joystick_Control_sloc0_1_0
1CCC 85F983    5929            mov     dph,(_Joystick_Control_sloc0_1_0 + 1)
1CCF C002      5930            push    ar2
1CD1 C003      5931            push    ar3
1CD3 120000    5932            lcall   ___sint2fs
1CD6 AC82      5933            mov     r4,dpl
1CD8 AD83      5934            mov     r5,dph
1CDA A8F0      5935            mov     r0,b
1CDC F9        5936            mov     r1,a
1CDD C004      5937            push    ar4
1CDF C005      5938            push    ar5
1CE1 C000      5939            push    ar0
1CE3 C001      5940            push    ar1
1CE5 85E882    5941            mov     dpl,_Joystick_Control_sloc3_1_0
1CE8 85E983    5942            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
1CEB 85EAF0    5943            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
1CEE E5EB      5944            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
1CF0 120000    5945            lcall   ___fsmul
1CF3 AC82      5946            mov     r4,dpl
1CF5 AD83      5947            mov     r5,dph
1CF7 A8F0      5948            mov     r0,b
1CF9 F9        5949            mov     r1,a
1CFA E581      5950            mov     a,sp
1CFC 24FC      5951            add     a,#0xfc
1CFE F581      5952            mov     sp,a
1D00 C004      5953            push    ar4
1D02 C005      5954            push    ar5
1D04 C004      5955            push    ar4
1D06 C005      5956            push    ar5
1D08 C000      5957            push    ar0
1D0A C001      5958            push    ar1
1D0C 900000    5959            mov     dptr,#0x0000
1D0F 75F0C8    5960            mov     b,#0xC8
1D12 7442      5961            mov     a,#0x42
1D14 120000    5962            lcall   ___fsmul
1D17 8582E8    5963            mov     _Joystick_Control_sloc3_1_0,dpl
1D1A 8583E9    5964            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
1D1D 85F0EA    5965            mov     (_Joystick_Control_sloc3_1_0 + 2),b
1D20 F5EB      5966            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1D22 E581      5967            mov     a,sp
1D24 24FC      5968            add     a,#0xfc
1D26 F581      5969            mov     sp,a
1D28 D005      5970            pop     ar5
1D2A D004      5971            pop     ar4
1D2C D003      5972            pop     ar3
1D2E D002      5973            pop     ar2
1D30 E5F8      5974            mov     a,_Joystick_Control_sloc0_1_0
1D32 2A        5975            add     a,r2
1D33 F582      5976            mov     dpl,a
1D35 E5F9      5977            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
1D37 3B        5978            addc    a,r3
1D38 F583      5979            mov     dph,a
1D3A C002      5980            push    ar2
1D3C C003      5981            push    ar3
1D3E 120000    5982            lcall   ___sint2fs
1D41 AC82      5983            mov     r4,dpl
1D43 AD83      5984            mov     r5,dph
1D45 A8F0      5985            mov     r0,b
1D47 F9        5986            mov     r1,a
1D48 C004      5987            push    ar4
1D4A C005      5988            push    ar5
1D4C C000      5989            push    ar0
1D4E C001      5990            push    ar1
1D50 85E882    5991            mov     dpl,_Joystick_Control_sloc3_1_0
1D53 85E983    5992            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
1D56 85EAF0    5993            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
1D59 E5EB      5994            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
1D5B 120000    5995            lcall   ___fsdiv
1D5E AC82      5996            mov     r4,dpl
1D60 AD83      5997            mov     r5,dph
1D62 A8F0      5998            mov     r0,b
1D64 F9        5999            mov     r1,a
1D65 E581      6000            mov     a,sp
1D67 24FC      6001            add     a,#0xfc
1D69 F581      6002            mov     sp,a
1D6B 8C82      6003            mov     dpl,r4
1D6D 8D83      6004            mov     dph,r5
1D6F 88F0      6005            mov     b,r0
1D71 E9        6006            mov     a,r1
1D72 C004      6007            push    ar4
1D74 C005      6008            push    ar5
1D76 120000    6009            lcall   ___fs2uchar
1D79 E582      6010            mov     a,dpl
1D7B D005      6011            pop     ar5
1D7D D004      6012            pop     ar4
1D7F D003      6013            pop     ar3
1D81 D002      6014            pop     ar2
1D83 9056C8    6015            mov     dptr,#_pwm_right
1D86 F0        6016            movx    @dptr,a
1D87 D005      6017            pop     ar5
1D89 D004      6018            pop     ar4
1D8B 020000    6019            ljmp    L040019?
1D8E           6020   L040018?:
1D8E           6021   ;        main.c:1128: pwm_left = vx_error; 
1D8E C004      6022            push    ar4
1D90 C005      6023            push    ar5
1D92 905708    6024            mov     dptr,#_pwm_left
1D95 EA        6025            mov     a,r2
1D96 F0        6026            movx    @dptr,a
1D97           6027   ;        main.c:1129: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
1D97 9053B8    6028            mov     dptr,#_pwm_corr
1D9A E0        6029            movx    a,@dptr
1D9B F5E8      6030            mov     _Joystick_Control_sloc3_1_0,a
1D9D A3        6031            inc     dptr
1D9E E0        6032            movx    a,@dptr
1D9F F5E9      6033            mov     (_Joystick_Control_sloc3_1_0 + 1),a
1DA1 A3        6034            inc     dptr
1DA2 E0        6035            movx    a,@dptr
1DA3 F5EA      6036            mov     (_Joystick_Control_sloc3_1_0 + 2),a
1DA5 A3        6037            inc     dptr
1DA6 E0        6038            movx    a,@dptr
1DA7 F5EB      6039            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1DA9 8A82      6040            mov     dpl,r2
1DAB 8B83      6041            mov     dph,r3
1DAD C002      6042            push    ar2
1DAF C003      6043            push    ar3
1DB1 120000    6044            lcall   ___sint2fs
1DB4 AC82      6045            mov     r4,dpl
1DB6 AD83      6046            mov     r5,dph
1DB8 A8F0      6047            mov     r0,b
1DBA F9        6048            mov     r1,a
1DBB C004      6049            push    ar4
1DBD C005      6050            push    ar5
1DBF C000      6051            push    ar0
1DC1 C001      6052            push    ar1
1DC3 85E882    6053            mov     dpl,_Joystick_Control_sloc3_1_0
1DC6 85E983    6054            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
1DC9 85EAF0    6055            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
1DCC E5EB      6056            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
1DCE 120000    6057            lcall   ___fsmul
1DD1 AC82      6058            mov     r4,dpl
1DD3 AD83      6059            mov     r5,dph
1DD5 A8F0      6060            mov     r0,b
1DD7 F9        6061            mov     r1,a
1DD8 E581      6062            mov     a,sp
1DDA 24FC      6063            add     a,#0xfc
1DDC F581      6064            mov     sp,a
1DDE C004      6065            push    ar4
1DE0 C005      6066            push    ar5
1DE2 C004      6067            push    ar4
1DE4 C005      6068            push    ar5
1DE6 C000      6069            push    ar0
1DE8 C001      6070            push    ar1
1DEA 900000    6071            mov     dptr,#0x0000
1DED 75F0C8    6072            mov     b,#0xC8
1DF0 7442      6073            mov     a,#0x42
1DF2 120000    6074            lcall   ___fsmul
1DF5 8582E8    6075            mov     _Joystick_Control_sloc3_1_0,dpl
1DF8 8583E9    6076            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
1DFB 85F0EA    6077            mov     (_Joystick_Control_sloc3_1_0 + 2),b
1DFE F5EB      6078            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1E00 E581      6079            mov     a,sp
1E02 24FC      6080            add     a,#0xfc
1E04 F581      6081            mov     sp,a
1E06 D005      6082            pop     ar5
1E08 D004      6083            pop     ar4
1E0A D003      6084            pop     ar3
1E0C D002      6085            pop     ar2
1E0E E5F8      6086            mov     a,_Joystick_Control_sloc0_1_0
1E10 2A        6087            add     a,r2
1E11 F582      6088            mov     dpl,a
1E13 E5F9      6089            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
1E15 3B        6090            addc    a,r3
1E16 F583      6091            mov     dph,a
1E18 C002      6092            push    ar2
1E1A C003      6093            push    ar3
1E1C 120000    6094            lcall   ___sint2fs
1E1F AC82      6095            mov     r4,dpl
1E21 AD83      6096            mov     r5,dph
1E23 A8F0      6097            mov     r0,b
1E25 F9        6098            mov     r1,a
1E26 C004      6099            push    ar4
1E28 C005      6100            push    ar5
1E2A C000      6101            push    ar0
1E2C C001      6102            push    ar1
1E2E 85E882    6103            mov     dpl,_Joystick_Control_sloc3_1_0
1E31 85E983    6104            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
1E34 85EAF0    6105            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
1E37 E5EB      6106            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
1E39 120000    6107            lcall   ___fsdiv
1E3C AC82      6108            mov     r4,dpl
1E3E AD83      6109            mov     r5,dph
1E40 A8F0      6110            mov     r0,b
1E42 F9        6111            mov     r1,a
1E43 E581      6112            mov     a,sp
1E45 24FC      6113            add     a,#0xfc
1E47 F581      6114            mov     sp,a
1E49 8C82      6115            mov     dpl,r4
1E4B 8D83      6116            mov     dph,r5
1E4D 88F0      6117            mov     b,r0
1E4F E9        6118            mov     a,r1
1E50 C004      6119            push    ar4
1E52 C005      6120            push    ar5
1E54 120000    6121            lcall   ___fs2uchar
1E57 E582      6122            mov     a,dpl
1E59 D005      6123            pop     ar5
1E5B D004      6124            pop     ar4
1E5D D003      6125            pop     ar3
1E5F D002      6126            pop     ar2
1E61 9056C8    6127            mov     dptr,#_pwm_right
1E64 F0        6128            movx    @dptr,a
1E65           6129   ;        main.c:1178: return curr_angle; 
1E65 D005      6130            pop     ar5
1E67 D004      6131            pop     ar4
1E69           6132   ;        main.c:1129: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
1E69           6133   L040019?:
1E69           6134   ;        main.c:1131: curr_angle += angle_diff * 1.5; // TUNE THIS 
1E69 C004      6135            push    ar4
1E6B C005      6136            push    ar5
1E6D C002      6137            push    ar2
1E6F C003      6138            push    ar3
1E71 C004      6139            push    ar4
1E73 C005      6140            push    ar5
1E75 C098      6141            push    _Joystick_Control_sloc2_1_0
1E77 C099      6142            push    (_Joystick_Control_sloc2_1_0 + 1)
1E79 C09A      6143            push    (_Joystick_Control_sloc2_1_0 + 2)
1E7B C09B      6144            push    (_Joystick_Control_sloc2_1_0 + 3)
1E7D 900000    6145            mov     dptr,#0x0000
1E80 75F0C0    6146            mov     b,#0xC0
1E83 743F      6147            mov     a,#0x3F
1E85 120000    6148            lcall   ___fsmul
1E88 8582E8    6149            mov     _Joystick_Control_sloc3_1_0,dpl
1E8B 8583E9    6150            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
1E8E 85F0EA    6151            mov     (_Joystick_Control_sloc3_1_0 + 2),b
1E91 F5EB      6152            mov     (_Joystick_Control_sloc3_1_0 + 3),a
1E93 E581      6153            mov     a,sp
1E95 24FC      6154            add     a,#0xfc
1E97 F581      6155            mov     sp,a
1E99 D005      6156            pop     ar5
1E9B D004      6157            pop     ar4
1E9D 905378    6158            mov     dptr,#_curr_angle
1EA0 E0        6159            movx    a,@dptr
1EA1 FC        6160            mov     r4,a
1EA2 A3        6161            inc     dptr
1EA3 E0        6162            movx    a,@dptr
1EA4 FD        6163            mov     r5,a
1EA5 A3        6164            inc     dptr
1EA6 E0        6165            movx    a,@dptr
1EA7 F8        6166            mov     r0,a
1EA8 A3        6167            inc     dptr
1EA9 E0        6168            movx    a,@dptr
1EAA F9        6169            mov     r1,a
1EAB C0E8      6170            push    _Joystick_Control_sloc3_1_0
1EAD C0E9      6171            push    (_Joystick_Control_sloc3_1_0 + 1)
1EAF C0EA      6172            push    (_Joystick_Control_sloc3_1_0 + 2)
1EB1 C0EB      6173            push    (_Joystick_Control_sloc3_1_0 + 3)
1EB3 8C82      6174            mov     dpl,r4
1EB5 8D83      6175            mov     dph,r5
1EB7 88F0      6176            mov     b,r0
1EB9 E9        6177            mov     a,r1
1EBA 120000    6178            lcall   ___fsadd
1EBD AC82      6179            mov     r4,dpl
1EBF AD83      6180            mov     r5,dph
1EC1 A8F0      6181            mov     r0,b
1EC3 F9        6182            mov     r1,a
1EC4 E581      6183            mov     a,sp
1EC6 24FC      6184            add     a,#0xfc
1EC8 F581      6185            mov     sp,a
1ECA D003      6186            pop     ar3
1ECC D002      6187            pop     ar2
1ECE 905378    6188            mov     dptr,#_curr_angle
1ED1 EC        6189            mov     a,r4
1ED2 F0        6190            movx    @dptr,a
1ED3 A3        6191            inc     dptr
1ED4 ED        6192            mov     a,r5
1ED5 F0        6193            movx    @dptr,a
1ED6 A3        6194            inc     dptr
1ED7 E8        6195            mov     a,r0
1ED8 F0        6196            movx    @dptr,a
1ED9 A3        6197            inc     dptr
1EDA E9        6198            mov     a,r1
1EDB F0        6199            movx    @dptr,a
1EDC D005      6200            pop     ar5
1EDE D004      6201            pop     ar4
1EE0 020000    6202            ljmp    L040027?
1EE3           6203   L040024?:
1EE3           6204   ;        main.c:1135: if (vy*100<=vy_thres*100/2){
1EE3 8C00      6205            mov     __mulint_PARM_2,r4
1EE5 8D01      6206            mov     (__mulint_PARM_2 + 1),r5
1EE7 900064    6207            mov     dptr,#0x0064
1EEA C002      6208            push    ar2
1EEC C003      6209            push    ar3
1EEE C004      6210            push    ar4
1EF0 C005      6211            push    ar5
1EF2 120000    6212            lcall   __mulint
1EF5 A882      6213            mov     r0,dpl
1EF7 A983      6214            mov     r1,dph
1EF9 905548    6215            mov     dptr,#_vy_thres
1EFC E0        6216            movx    a,@dptr
1EFD F500      6217            mov     __mulint_PARM_2,a
1EFF A3        6218            inc     dptr
1F00 E0        6219            movx    a,@dptr
1F01 F501      6220            mov     (__mulint_PARM_2 + 1),a
1F03 900064    6221            mov     dptr,#0x0064
1F06 C000      6222            push    ar0
1F08 C001      6223            push    ar1
1F0A 120000    6224            lcall   __mulint
1F0D AE82      6225            mov     r6,dpl
1F0F AF83      6226            mov     r7,dph
1F11 750002    6227            mov     __divsint_PARM_2,#0x02
1F14 E4        6228            clr     a
1F15 F501      6229            mov     (__divsint_PARM_2 + 1),a
1F17 8E82      6230            mov     dpl,r6
1F19 8F83      6231            mov     dph,r7
1F1B 120000    6232            lcall   __divsint
1F1E AE82      6233            mov     r6,dpl
1F20 AF83      6234            mov     r7,dph
1F22 D001      6235            pop     ar1
1F24 D000      6236            pop     ar0
1F26 D005      6237            pop     ar5
1F28 D004      6238            pop     ar4
1F2A D003      6239            pop     ar3
1F2C D002      6240            pop     ar2
1F2E C3        6241            clr     c
1F2F EE        6242            mov     a,r6
1F30 98        6243            subb    a,r0
1F31 EF        6244            mov     a,r7
1F32 6480      6245            xrl     a,#0x80
1F34 89F0      6246            mov     b,r1
1F36 63F080    6247            xrl     b,#0x80
1F39 95F0      6248            subb    a,b
1F3B 5000      6249            jnc     L040075?
1F3D 020000    6250            ljmp    L040021?
1F40           6251   L040075?:
1F40           6252   ;        main.c:1136: pwm_left = vy_error*100/(vx_error+vy_error);
1F40 C004      6253            push    ar4
1F42 C005      6254            push    ar5
1F44 85F800    6255            mov     __mulint_PARM_2,_Joystick_Control_sloc0_1_0
1F47 85F901    6256            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc0_1_0 + 1)
1F4A 900064    6257            mov     dptr,#0x0064
1F4D C002      6258            push    ar2
1F4F C003      6259            push    ar3
1F51 C004      6260            push    ar4
1F53 C005      6261            push    ar5
1F55 120000    6262            lcall   __mulint
1F58 A882      6263            mov     r0,dpl
1F5A A983      6264            mov     r1,dph
1F5C D005      6265            pop     ar5
1F5E D004      6266            pop     ar4
1F60 D003      6267            pop     ar3
1F62 D002      6268            pop     ar2
1F64 E5F8      6269            mov     a,_Joystick_Control_sloc0_1_0
1F66 2A        6270            add     a,r2
1F67 F500      6271            mov     __divsint_PARM_2,a
1F69 E5F9      6272            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
1F6B 3B        6273            addc    a,r3
1F6C F501      6274            mov     (__divsint_PARM_2 + 1),a
1F6E 8882      6275            mov     dpl,r0
1F70 8983      6276            mov     dph,r1
1F72 C002      6277            push    ar2
1F74 C003      6278            push    ar3
1F76 C004      6279            push    ar4
1F78 C005      6280            push    ar5
1F7A 120000    6281            lcall   __divsint
1F7D A882      6282            mov     r0,dpl
1F7F D005      6283            pop     ar5
1F81 D004      6284            pop     ar4
1F83 905708    6285            mov     dptr,#_pwm_left
1F86 E8        6286            mov     a,r0
1F87 F0        6287            movx    @dptr,a
1F88           6288   ;        main.c:1137: pwm_right = vy_error*pwm_corr; 
1F88 85F882    6289            mov     dpl,_Joystick_Control_sloc0_1_0
1F8B 85F983    6290            mov     dph,(_Joystick_Control_sloc0_1_0 + 1)
1F8E 120000    6291            lcall   ___sint2fs
1F91 A882      6292            mov     r0,dpl
1F93 A983      6293            mov     r1,dph
1F95 ACF0      6294            mov     r4,b
1F97 FD        6295            mov     r5,a
1F98 9053B8    6296            mov     dptr,#_pwm_corr
1F9B E0        6297            movx    a,@dptr
1F9C C0E0      6298            push    acc
1F9E A3        6299            inc     dptr
1F9F E0        6300            movx    a,@dptr
1FA0 C0E0      6301            push    acc
1FA2 A3        6302            inc     dptr
1FA3 E0        6303            movx    a,@dptr
1FA4 C0E0      6304            push    acc
1FA6 A3        6305            inc     dptr
1FA7 E0        6306            movx    a,@dptr
1FA8 C0E0      6307            push    acc
1FAA 8882      6308            mov     dpl,r0
1FAC 8983      6309            mov     dph,r1
1FAE 8CF0      6310            mov     b,r4
1FB0 ED        6311            mov     a,r5
1FB1 120000    6312            lcall   ___fsmul
1FB4 AC82      6313            mov     r4,dpl
1FB6 AD83      6314            mov     r5,dph
1FB8 A8F0      6315            mov     r0,b
1FBA F9        6316            mov     r1,a
1FBB E581      6317            mov     a,sp
1FBD 24FC      6318            add     a,#0xfc
1FBF F581      6319            mov     sp,a
1FC1 8C82      6320            mov     dpl,r4
1FC3 8D83      6321            mov     dph,r5
1FC5 88F0      6322            mov     b,r0
1FC7 E9        6323            mov     a,r1
1FC8 C004      6324            push    ar4
1FCA C005      6325            push    ar5
1FCC 120000    6326            lcall   ___fs2uchar
1FCF E582      6327            mov     a,dpl
1FD1 D005      6328            pop     ar5
1FD3 D004      6329            pop     ar4
1FD5 D003      6330            pop     ar3
1FD7 D002      6331            pop     ar2
1FD9 9056C8    6332            mov     dptr,#_pwm_right
1FDC F0        6333            movx    @dptr,a
1FDD D005      6334            pop     ar5
1FDF D004      6335            pop     ar4
1FE1 020000    6336            ljmp    L040022?
1FE4           6337   L040021?:
1FE4           6338   ;        main.c:1140: pwm_left = vx_error*100/(vx_error+vy_error);
1FE4 C004      6339            push    ar4
1FE6 C005      6340            push    ar5
1FE8 8A00      6341            mov     __mulint_PARM_2,r2
1FEA 8B01      6342            mov     (__mulint_PARM_2 + 1),r3
1FEC 900064    6343            mov     dptr,#0x0064
1FEF C002      6344            push    ar2
1FF1 C003      6345            push    ar3
1FF3 C004      6346            push    ar4
1FF5 C005      6347            push    ar5
1FF7 120000    6348            lcall   __mulint
1FFA A882      6349            mov     r0,dpl
1FFC A983      6350            mov     r1,dph
1FFE D005      6351            pop     ar5
2000 D004      6352            pop     ar4
2002 D003      6353            pop     ar3
2004 D002      6354            pop     ar2
2006 E5F8      6355            mov     a,_Joystick_Control_sloc0_1_0
2008 2A        6356            add     a,r2
2009 F500      6357            mov     __divsint_PARM_2,a
200B E5F9      6358            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
200D 3B        6359            addc    a,r3
200E F501      6360            mov     (__divsint_PARM_2 + 1),a
2010 8882      6361            mov     dpl,r0
2012 8983      6362            mov     dph,r1
2014 C002      6363            push    ar2
2016 C003      6364            push    ar3
2018 C004      6365            push    ar4
201A C005      6366            push    ar5
201C 120000    6367            lcall   __divsint
201F A882      6368            mov     r0,dpl
2021 D005      6369            pop     ar5
2023 D004      6370            pop     ar4
2025 D003      6371            pop     ar3
2027 D002      6372            pop     ar2
2029 905708    6373            mov     dptr,#_pwm_left
202C E8        6374            mov     a,r0
202D F0        6375            movx    @dptr,a
202E           6376   ;        main.c:1141: pwm_right = vx_error*pwm_corr; 
202E 8A82      6377            mov     dpl,r2
2030 8B83      6378            mov     dph,r3
2032 C002      6379            push    ar2
2034 C003      6380            push    ar3
2036 120000    6381            lcall   ___sint2fs
2039 A882      6382            mov     r0,dpl
203B A983      6383            mov     r1,dph
203D ACF0      6384            mov     r4,b
203F FD        6385            mov     r5,a
2040 9053B8    6386            mov     dptr,#_pwm_corr
2043 E0        6387            movx    a,@dptr
2044 C0E0      6388            push    acc
2046 A3        6389            inc     dptr
2047 E0        6390            movx    a,@dptr
2048 C0E0      6391            push    acc
204A A3        6392            inc     dptr
204B E0        6393            movx    a,@dptr
204C C0E0      6394            push    acc
204E A3        6395            inc     dptr
204F E0        6396            movx    a,@dptr
2050 C0E0      6397            push    acc
2052 8882      6398            mov     dpl,r0
2054 8983      6399            mov     dph,r1
2056 8CF0      6400            mov     b,r4
2058 ED        6401            mov     a,r5
2059 120000    6402            lcall   ___fsmul
205C AC82      6403            mov     r4,dpl
205E AD83      6404            mov     r5,dph
2060 A8F0      6405            mov     r0,b
2062 F9        6406            mov     r1,a
2063 E581      6407            mov     a,sp
2065 24FC      6408            add     a,#0xfc
2067 F581      6409            mov     sp,a
2069 8C82      6410            mov     dpl,r4
206B 8D83      6411            mov     dph,r5
206D 88F0      6412            mov     b,r0
206F E9        6413            mov     a,r1
2070 C004      6414            push    ar4
2072 C005      6415            push    ar5
2074 120000    6416            lcall   ___fs2uchar
2077 E582      6417            mov     a,dpl
2079 D005      6418            pop     ar5
207B D004      6419            pop     ar4
207D D003      6420            pop     ar3
207F D002      6421            pop     ar2
2081 9056C8    6422            mov     dptr,#_pwm_right
2084 F0        6423            movx    @dptr,a
2085           6424   ;        main.c:1178: return curr_angle; 
2085 D005      6425            pop     ar5
2087 D004      6426            pop     ar4
2089           6427   ;        main.c:1141: pwm_right = vx_error*pwm_corr; 
2089           6428   L040022?:
2089           6429   ;        main.c:1143: curr_angle -= angle_diff * 1.5; // TUNE THIS 
2089 C004      6430            push    ar4
208B C005      6431            push    ar5
208D C002      6432            push    ar2
208F C003      6433            push    ar3
2091 C004      6434            push    ar4
2093 C005      6435            push    ar5
2095 C098      6436            push    _Joystick_Control_sloc2_1_0
2097 C099      6437            push    (_Joystick_Control_sloc2_1_0 + 1)
2099 C09A      6438            push    (_Joystick_Control_sloc2_1_0 + 2)
209B C09B      6439            push    (_Joystick_Control_sloc2_1_0 + 3)
209D 900000    6440            mov     dptr,#0x0000
20A0 75F0C0    6441            mov     b,#0xC0
20A3 743F      6442            mov     a,#0x3F
20A5 120000    6443            lcall   ___fsmul
20A8 8582E8    6444            mov     _Joystick_Control_sloc3_1_0,dpl
20AB 8583E9    6445            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
20AE 85F0EA    6446            mov     (_Joystick_Control_sloc3_1_0 + 2),b
20B1 F5EB      6447            mov     (_Joystick_Control_sloc3_1_0 + 3),a
20B3 E581      6448            mov     a,sp
20B5 24FC      6449            add     a,#0xfc
20B7 F581      6450            mov     sp,a
20B9 D005      6451            pop     ar5
20BB D004      6452            pop     ar4
20BD 905378    6453            mov     dptr,#_curr_angle
20C0 E0        6454            movx    a,@dptr
20C1 FC        6455            mov     r4,a
20C2 A3        6456            inc     dptr
20C3 E0        6457            movx    a,@dptr
20C4 FD        6458            mov     r5,a
20C5 A3        6459            inc     dptr
20C6 E0        6460            movx    a,@dptr
20C7 F8        6461            mov     r0,a
20C8 A3        6462            inc     dptr
20C9 E0        6463            movx    a,@dptr
20CA F9        6464            mov     r1,a
20CB C0E8      6465            push    _Joystick_Control_sloc3_1_0
20CD C0E9      6466            push    (_Joystick_Control_sloc3_1_0 + 1)
20CF C0EA      6467            push    (_Joystick_Control_sloc3_1_0 + 2)
20D1 C0EB      6468            push    (_Joystick_Control_sloc3_1_0 + 3)
20D3 8C82      6469            mov     dpl,r4
20D5 8D83      6470            mov     dph,r5
20D7 88F0      6471            mov     b,r0
20D9 E9        6472            mov     a,r1
20DA 120000    6473            lcall   ___fssub
20DD AC82      6474            mov     r4,dpl
20DF AD83      6475            mov     r5,dph
20E1 A8F0      6476            mov     r0,b
20E3 F9        6477            mov     r1,a
20E4 E581      6478            mov     a,sp
20E6 24FC      6479            add     a,#0xfc
20E8 F581      6480            mov     sp,a
20EA D003      6481            pop     ar3
20EC D002      6482            pop     ar2
20EE 905378    6483            mov     dptr,#_curr_angle
20F1 EC        6484            mov     a,r4
20F2 F0        6485            movx    @dptr,a
20F3 A3        6486            inc     dptr
20F4 ED        6487            mov     a,r5
20F5 F0        6488            movx    @dptr,a
20F6 A3        6489            inc     dptr
20F7 E8        6490            mov     a,r0
20F8 F0        6491            movx    @dptr,a
20F9 A3        6492            inc     dptr
20FA E9        6493            mov     a,r1
20FB F0        6494            movx    @dptr,a
20FC           6495   ;        main.c:1178: return curr_angle; 
20FC D005      6496            pop     ar5
20FE D004      6497            pop     ar4
2100           6498   ;        main.c:1143: curr_angle -= angle_diff * 1.5; // TUNE THIS 
2100           6499   L040027?:
2100           6500   ;        main.c:1147: if (vy_err<0){
2100 E549      6501            mov     a,(_Joystick_Control_sloc1_1_0 + 1)
2102 20E7D0    6502            jb      acc.7,L040076?
2105 020000    6503            ljmp    L040040?
2108           6504   L040076?:
2108           6505   ;        main.c:1148: L_motor_dir = 1; 
2108 905688    6506            mov     dptr,#_L_motor_dir
210B 7401      6507            mov     a,#0x01
210D F0        6508            movx    @dptr,a
210E           6509   ;        main.c:1149: R_motor_dir = 1; 
210E 905648    6510            mov     dptr,#_R_motor_dir
2111 7401      6511            mov     a,#0x01
2113 F0        6512            movx    @dptr,a
2114           6513   ;        main.c:1151: if (vx_err>0){
2114 90D818    6514            mov     dptr,#_Joystick_Control_vx_err_1_214
2117 E0        6515            movx    a,@dptr
2118 F8        6516            mov     r0,a
2119 A3        6517            inc     dptr
211A E0        6518            movx    a,@dptr
211B F9        6519            mov     r1,a
211C C3        6520            clr     c
211D E4        6521            clr     a
211E 98        6522            subb    a,r0
211F E4        6523            clr     a
2120 6480      6524            xrl     a,#0x80
2122 89F0      6525            mov     b,r1
2124 63F080    6526            xrl     b,#0x80
2127 95F0      6527            subb    a,b
2129 4000      6528            jc      L040077?
212B 020000    6529            ljmp    L040035?
212E           6530   L040077?:
212E           6531   ;        main.c:1152: if (vy*100<=vy_thres*100/2){
212E 8C00      6532            mov     __mulint_PARM_2,r4
2130 8D01      6533            mov     (__mulint_PARM_2 + 1),r5
2132 900064    6534            mov     dptr,#0x0064
2135 C002      6535            push    ar2
2137 C003      6536            push    ar3
2139 120000    6537            lcall   __mulint
213C A882      6538            mov     r0,dpl
213E A983      6539            mov     r1,dph
2140 905548    6540            mov     dptr,#_vy_thres
2143 E0        6541            movx    a,@dptr
2144 F500      6542            mov     __mulint_PARM_2,a
2146 A3        6543            inc     dptr
2147 E0        6544            movx    a,@dptr
2148 F501      6545            mov     (__mulint_PARM_2 + 1),a
214A 900064    6546            mov     dptr,#0x0064
214D C000      6547            push    ar0
214F C001      6548            push    ar1
2151 120000    6549            lcall   __mulint
2154 AE82      6550            mov     r6,dpl
2156 AF83      6551            mov     r7,dph
2158 750002    6552            mov     __divsint_PARM_2,#0x02
215B E4        6553            clr     a
215C F501      6554            mov     (__divsint_PARM_2 + 1),a
215E 8E82      6555            mov     dpl,r6
2160 8F83      6556            mov     dph,r7
2162 120000    6557            lcall   __divsint
2165 AE82      6558            mov     r6,dpl
2167 AF83      6559            mov     r7,dph
2169 D001      6560            pop     ar1
216B D000      6561            pop     ar0
216D D003      6562            pop     ar3
216F D002      6563            pop     ar2
2171 C3        6564            clr     c
2172 EE        6565            mov     a,r6
2173 98        6566            subb    a,r0
2174 EF        6567            mov     a,r7
2175 6480      6568            xrl     a,#0x80
2177 89F0      6569            mov     b,r1
2179 63F080    6570            xrl     b,#0x80
217C 95F0      6571            subb    a,b
217E 5000      6572            jnc     L040078?
2180 020000    6573            ljmp    L040029?
2183           6574   L040078?:
2183           6575   ;        main.c:1153: pwm_left = vy_error; 
2183 905708    6576            mov     dptr,#_pwm_left
2186 E5F8      6577            mov     a,_Joystick_Control_sloc0_1_0
2188 F0        6578            movx    @dptr,a
2189           6579   ;        main.c:1154: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
2189 9053B8    6580            mov     dptr,#_pwm_corr
218C E0        6581            movx    a,@dptr
218D F5E8      6582            mov     _Joystick_Control_sloc3_1_0,a
218F A3        6583            inc     dptr
2190 E0        6584            movx    a,@dptr
2191 F5E9      6585            mov     (_Joystick_Control_sloc3_1_0 + 1),a
2193 A3        6586            inc     dptr
2194 E0        6587            movx    a,@dptr
2195 F5EA      6588            mov     (_Joystick_Control_sloc3_1_0 + 2),a
2197 A3        6589            inc     dptr
2198 E0        6590            movx    a,@dptr
2199 F5EB      6591            mov     (_Joystick_Control_sloc3_1_0 + 3),a
219B 85F882    6592            mov     dpl,_Joystick_Control_sloc0_1_0
219E 85F983    6593            mov     dph,(_Joystick_Control_sloc0_1_0 + 1)
21A1 C002      6594            push    ar2
21A3 C003      6595            push    ar3
21A5 120000    6596            lcall   ___sint2fs
21A8 AE82      6597            mov     r6,dpl
21AA AF83      6598            mov     r7,dph
21AC A8F0      6599            mov     r0,b
21AE F9        6600            mov     r1,a
21AF C006      6601            push    ar6
21B1 C007      6602            push    ar7
21B3 C000      6603            push    ar0
21B5 C001      6604            push    ar1
21B7 85E882    6605            mov     dpl,_Joystick_Control_sloc3_1_0
21BA 85E983    6606            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
21BD 85EAF0    6607            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
21C0 E5EB      6608            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
21C2 120000    6609            lcall   ___fsmul
21C5 AE82      6610            mov     r6,dpl
21C7 AF83      6611            mov     r7,dph
21C9 A8F0      6612            mov     r0,b
21CB F9        6613            mov     r1,a
21CC E581      6614            mov     a,sp
21CE 24FC      6615            add     a,#0xfc
21D0 F581      6616            mov     sp,a
21D2 C006      6617            push    ar6
21D4 C007      6618            push    ar7
21D6 C000      6619            push    ar0
21D8 C001      6620            push    ar1
21DA 900000    6621            mov     dptr,#0x0000
21DD 75F0C8    6622            mov     b,#0xC8
21E0 7442      6623            mov     a,#0x42
21E2 120000    6624            lcall   ___fsmul
21E5 8582E8    6625            mov     _Joystick_Control_sloc3_1_0,dpl
21E8 8583E9    6626            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
21EB 85F0EA    6627            mov     (_Joystick_Control_sloc3_1_0 + 2),b
21EE F5EB      6628            mov     (_Joystick_Control_sloc3_1_0 + 3),a
21F0 E581      6629            mov     a,sp
21F2 24FC      6630            add     a,#0xfc
21F4 F581      6631            mov     sp,a
21F6 D003      6632            pop     ar3
21F8 D002      6633            pop     ar2
21FA E5F8      6634            mov     a,_Joystick_Control_sloc0_1_0
21FC 2A        6635            add     a,r2
21FD F582      6636            mov     dpl,a
21FF E5F9      6637            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
2201 3B        6638            addc    a,r3
2202 F583      6639            mov     dph,a
2204 120000    6640            lcall   ___sint2fs
2207 AE82      6641            mov     r6,dpl
2209 AF83      6642            mov     r7,dph
220B A8F0      6643            mov     r0,b
220D F9        6644            mov     r1,a
220E C006      6645            push    ar6
2210 C007      6646            push    ar7
2212 C000      6647            push    ar0
2214 C001      6648            push    ar1
2216 85E882    6649            mov     dpl,_Joystick_Control_sloc3_1_0
2219 85E983    6650            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
221C 85EAF0    6651            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
221F E5EB      6652            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
2221 120000    6653            lcall   ___fsdiv
2224 AE82      6654            mov     r6,dpl
2226 AF83      6655            mov     r7,dph
2228 A8F0      6656            mov     r0,b
222A F9        6657            mov     r1,a
222B E581      6658            mov     a,sp
222D 24FC      6659            add     a,#0xfc
222F F581      6660            mov     sp,a
2231 8E82      6661            mov     dpl,r6
2233 8F83      6662            mov     dph,r7
2235 88F0      6663            mov     b,r0
2237 E9        6664            mov     a,r1
2238 120000    6665            lcall   ___fs2uchar
223B E582      6666            mov     a,dpl
223D 9056C8    6667            mov     dptr,#_pwm_right
2240 F0        6668            movx    @dptr,a
2241 020000    6669            ljmp    L040030?
2244           6670   L040029?:
2244           6671   ;        main.c:1157: pwm_left = vx_error; 
2244 905708    6672            mov     dptr,#_pwm_left
2247 EA        6673            mov     a,r2
2248 F0        6674            movx    @dptr,a
2249           6675   ;        main.c:1158: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
2249 9053B8    6676            mov     dptr,#_pwm_corr
224C E0        6677            movx    a,@dptr
224D F5E8      6678            mov     _Joystick_Control_sloc3_1_0,a
224F A3        6679            inc     dptr
2250 E0        6680            movx    a,@dptr
2251 F5E9      6681            mov     (_Joystick_Control_sloc3_1_0 + 1),a
2253 A3        6682            inc     dptr
2254 E0        6683            movx    a,@dptr
2255 F5EA      6684            mov     (_Joystick_Control_sloc3_1_0 + 2),a
2257 A3        6685            inc     dptr
2258 E0        6686            movx    a,@dptr
2259 F5EB      6687            mov     (_Joystick_Control_sloc3_1_0 + 3),a
225B 8A82      6688            mov     dpl,r2
225D 8B83      6689            mov     dph,r3
225F C002      6690            push    ar2
2261 C003      6691            push    ar3
2263 120000    6692            lcall   ___sint2fs
2266 AE82      6693            mov     r6,dpl
2268 AF83      6694            mov     r7,dph
226A A8F0      6695            mov     r0,b
226C F9        6696            mov     r1,a
226D C006      6697            push    ar6
226F C007      6698            push    ar7
2271 C000      6699            push    ar0
2273 C001      6700            push    ar1
2275 85E882    6701            mov     dpl,_Joystick_Control_sloc3_1_0
2278 85E983    6702            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
227B 85EAF0    6703            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
227E E5EB      6704            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
2280 120000    6705            lcall   ___fsmul
2283 AE82      6706            mov     r6,dpl
2285 AF83      6707            mov     r7,dph
2287 A8F0      6708            mov     r0,b
2289 F9        6709            mov     r1,a
228A E581      6710            mov     a,sp
228C 24FC      6711            add     a,#0xfc
228E F581      6712            mov     sp,a
2290 C006      6713            push    ar6
2292 C007      6714            push    ar7
2294 C000      6715            push    ar0
2296 C001      6716            push    ar1
2298 900000    6717            mov     dptr,#0x0000
229B 75F0C8    6718            mov     b,#0xC8
229E 7442      6719            mov     a,#0x42
22A0 120000    6720            lcall   ___fsmul
22A3 8582E8    6721            mov     _Joystick_Control_sloc3_1_0,dpl
22A6 8583E9    6722            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
22A9 85F0EA    6723            mov     (_Joystick_Control_sloc3_1_0 + 2),b
22AC F5EB      6724            mov     (_Joystick_Control_sloc3_1_0 + 3),a
22AE E581      6725            mov     a,sp
22B0 24FC      6726            add     a,#0xfc
22B2 F581      6727            mov     sp,a
22B4 D003      6728            pop     ar3
22B6 D002      6729            pop     ar2
22B8 E5F8      6730            mov     a,_Joystick_Control_sloc0_1_0
22BA 2A        6731            add     a,r2
22BB F582      6732            mov     dpl,a
22BD E5F9      6733            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
22BF 3B        6734            addc    a,r3
22C0 F583      6735            mov     dph,a
22C2 120000    6736            lcall   ___sint2fs
22C5 AE82      6737            mov     r6,dpl
22C7 AF83      6738            mov     r7,dph
22C9 A8F0      6739            mov     r0,b
22CB F9        6740            mov     r1,a
22CC C006      6741            push    ar6
22CE C007      6742            push    ar7
22D0 C000      6743            push    ar0
22D2 C001      6744            push    ar1
22D4 85E882    6745            mov     dpl,_Joystick_Control_sloc3_1_0
22D7 85E983    6746            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
22DA 85EAF0    6747            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
22DD E5EB      6748            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
22DF 120000    6749            lcall   ___fsdiv
22E2 AE82      6750            mov     r6,dpl
22E4 AF83      6751            mov     r7,dph
22E6 A8F0      6752            mov     r0,b
22E8 F9        6753            mov     r1,a
22E9 E581      6754            mov     a,sp
22EB 24FC      6755            add     a,#0xfc
22ED F581      6756            mov     sp,a
22EF 8E82      6757            mov     dpl,r6
22F1 8F83      6758            mov     dph,r7
22F3 88F0      6759            mov     b,r0
22F5 E9        6760            mov     a,r1
22F6 120000    6761            lcall   ___fs2uchar
22F9 E582      6762            mov     a,dpl
22FB 9056C8    6763            mov     dptr,#_pwm_right
22FE F0        6764            movx    @dptr,a
22FF           6765   L040030?:
22FF           6766   ;        main.c:1160: curr_angle -= angle_diff * 1.4; // TUNE THIS 
22FF C098      6767            push    _Joystick_Control_sloc2_1_0
2301 C099      6768            push    (_Joystick_Control_sloc2_1_0 + 1)
2303 C09A      6769            push    (_Joystick_Control_sloc2_1_0 + 2)
2305 C09B      6770            push    (_Joystick_Control_sloc2_1_0 + 3)
2307 903333    6771            mov     dptr,#0x3333
230A 75F0B3    6772            mov     b,#0xB3
230D 743F      6773            mov     a,#0x3F
230F 120000    6774            lcall   ___fsmul
2312 8582E8    6775            mov     _Joystick_Control_sloc3_1_0,dpl
2315 8583E9    6776            mov     (_Joystick_Control_sloc3_1_0 + 1),dph
2318 85F0EA    6777            mov     (_Joystick_Control_sloc3_1_0 + 2),b
231B F5EB      6778            mov     (_Joystick_Control_sloc3_1_0 + 3),a
231D E581      6779            mov     a,sp
231F 24FC      6780            add     a,#0xfc
2321 F581      6781            mov     sp,a
2323 905378    6782            mov     dptr,#_curr_angle
2326 E0        6783            movx    a,@dptr
2327 FE        6784            mov     r6,a
2328 A3        6785            inc     dptr
2329 E0        6786            movx    a,@dptr
232A FF        6787            mov     r7,a
232B A3        6788            inc     dptr
232C E0        6789            movx    a,@dptr
232D F8        6790            mov     r0,a
232E A3        6791            inc     dptr
232F E0        6792            movx    a,@dptr
2330 F9        6793            mov     r1,a
2331 C0E8      6794            push    _Joystick_Control_sloc3_1_0
2333 C0E9      6795            push    (_Joystick_Control_sloc3_1_0 + 1)
2335 C0EA      6796            push    (_Joystick_Control_sloc3_1_0 + 2)
2337 C0EB      6797            push    (_Joystick_Control_sloc3_1_0 + 3)
2339 8E82      6798            mov     dpl,r6
233B 8F83      6799            mov     dph,r7
233D 88F0      6800            mov     b,r0
233F E9        6801            mov     a,r1
2340 120000    6802            lcall   ___fssub
2343 AE82      6803            mov     r6,dpl
2345 AF83      6804            mov     r7,dph
2347 A8F0      6805            mov     r0,b
2349 F9        6806            mov     r1,a
234A E581      6807            mov     a,sp
234C 24FC      6808            add     a,#0xfc
234E F581      6809            mov     sp,a
2350 905378    6810            mov     dptr,#_curr_angle
2353 EE        6811            mov     a,r6
2354 F0        6812            movx    @dptr,a
2355 A3        6813            inc     dptr
2356 EF        6814            mov     a,r7
2357 F0        6815            movx    @dptr,a
2358 A3        6816            inc     dptr
2359 E8        6817            mov     a,r0
235A F0        6818            movx    @dptr,a
235B A3        6819            inc     dptr
235C E9        6820            mov     a,r1
235D F0        6821            movx    @dptr,a
235E 020000    6822            ljmp    L040040?
2361           6823   L040035?:
2361           6824   ;        main.c:1164: if (vy*100<=vy_thres*100/2){
2361 8C00      6825            mov     __mulint_PARM_2,r4
2363 8D01      6826            mov     (__mulint_PARM_2 + 1),r5
2365 900064    6827            mov     dptr,#0x0064
2368 C002      6828            push    ar2
236A C003      6829            push    ar3
236C 120000    6830            lcall   __mulint
236F AC82      6831            mov     r4,dpl
2371 AD83      6832            mov     r5,dph
2373 905548    6833            mov     dptr,#_vy_thres
2376 E0        6834            movx    a,@dptr
2377 F500      6835            mov     __mulint_PARM_2,a
2379 A3        6836            inc     dptr
237A E0        6837            movx    a,@dptr
237B F501      6838            mov     (__mulint_PARM_2 + 1),a
237D 900064    6839            mov     dptr,#0x0064
2380 C004      6840            push    ar4
2382 C005      6841            push    ar5
2384 120000    6842            lcall   __mulint
2387 AE82      6843            mov     r6,dpl
2389 AF83      6844            mov     r7,dph
238B 750002    6845            mov     __divsint_PARM_2,#0x02
238E E4        6846            clr     a
238F F501      6847            mov     (__divsint_PARM_2 + 1),a
2391 8E82      6848            mov     dpl,r6
2393 8F83      6849            mov     dph,r7
2395 120000    6850            lcall   __divsint
2398 AE82      6851            mov     r6,dpl
239A AF83      6852            mov     r7,dph
239C D005      6853            pop     ar5
239E D004      6854            pop     ar4
23A0 D003      6855            pop     ar3
23A2 D002      6856            pop     ar2
23A4 C3        6857            clr     c
23A5 EE        6858            mov     a,r6
23A6 9C        6859            subb    a,r4
23A7 EF        6860            mov     a,r7
23A8 6480      6861            xrl     a,#0x80
23AA 8DF0      6862            mov     b,r5
23AC 63F080    6863            xrl     b,#0x80
23AF 95F0      6864            subb    a,b
23B1 5000      6865            jnc     L040079?
23B3 020000    6866            ljmp    L040032?
23B6           6867   L040079?:
23B6           6868   ;        main.c:1165: pwm_left = vy_error*100/(vx_error+vy_error);
23B6 85F800    6869            mov     __mulint_PARM_2,_Joystick_Control_sloc0_1_0
23B9 85F901    6870            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc0_1_0 + 1)
23BC 900064    6871            mov     dptr,#0x0064
23BF C002      6872            push    ar2
23C1 C003      6873            push    ar3
23C3 120000    6874            lcall   __mulint
23C6 AC82      6875            mov     r4,dpl
23C8 AD83      6876            mov     r5,dph
23CA D003      6877            pop     ar3
23CC D002      6878            pop     ar2
23CE E5F8      6879            mov     a,_Joystick_Control_sloc0_1_0
23D0 2A        6880            add     a,r2
23D1 F500      6881            mov     __divsint_PARM_2,a
23D3 E5F9      6882            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
23D5 3B        6883            addc    a,r3
23D6 F501      6884            mov     (__divsint_PARM_2 + 1),a
23D8 8C82      6885            mov     dpl,r4
23DA 8D83      6886            mov     dph,r5
23DC 120000    6887            lcall   __divsint
23DF AC82      6888            mov     r4,dpl
23E1 905708    6889            mov     dptr,#_pwm_left
23E4 EC        6890            mov     a,r4
23E5 F0        6891            movx    @dptr,a
23E6           6892   ;        main.c:1166: pwm_right =pwm_corr*vy_error; 
23E6 9053B8    6893            mov     dptr,#_pwm_corr
23E9 E0        6894            movx    a,@dptr
23EA F5E8      6895            mov     _Joystick_Control_sloc3_1_0,a
23EC A3        6896            inc     dptr
23ED E0        6897            movx    a,@dptr
23EE F5E9      6898            mov     (_Joystick_Control_sloc3_1_0 + 1),a
23F0 A3        6899            inc     dptr
23F1 E0        6900            movx    a,@dptr
23F2 F5EA      6901            mov     (_Joystick_Control_sloc3_1_0 + 2),a
23F4 A3        6902            inc     dptr
23F5 E0        6903            movx    a,@dptr
23F6 F5EB      6904            mov     (_Joystick_Control_sloc3_1_0 + 3),a
23F8 85F882    6905            mov     dpl,_Joystick_Control_sloc0_1_0
23FB 85F983    6906            mov     dph,(_Joystick_Control_sloc0_1_0 + 1)
23FE 120000    6907            lcall   ___sint2fs
2401 A882      6908            mov     r0,dpl
2403 A983      6909            mov     r1,dph
2405 ACF0      6910            mov     r4,b
2407 FD        6911            mov     r5,a
2408 C000      6912            push    ar0
240A C001      6913            push    ar1
240C C004      6914            push    ar4
240E C005      6915            push    ar5
2410 85E882    6916            mov     dpl,_Joystick_Control_sloc3_1_0
2413 85E983    6917            mov     dph,(_Joystick_Control_sloc3_1_0 + 1)
2416 85EAF0    6918            mov     b,(_Joystick_Control_sloc3_1_0 + 2)
2419 E5EB      6919            mov     a,(_Joystick_Control_sloc3_1_0 + 3)
241B 120000    6920            lcall   ___fsmul
241E AC82      6921            mov     r4,dpl
2420 AD83      6922            mov     r5,dph
2422 AEF0      6923            mov     r6,b
2424 FF        6924            mov     r7,a
2425 E581      6925            mov     a,sp
2427 24FC      6926            add     a,#0xfc
2429 F581      6927            mov     sp,a
242B 8C82      6928            mov     dpl,r4
242D 8D83      6929            mov     dph,r5
242F 8EF0      6930            mov     b,r6
2431 EF        6931            mov     a,r7
2432 120000    6932            lcall   ___fs2uchar
2435 E582      6933            mov     a,dpl
2437 9056C8    6934            mov     dptr,#_pwm_right
243A F0        6935            movx    @dptr,a
243B 020000    6936            ljmp    L040033?
243E           6937   L040032?:
243E           6938   ;        main.c:1169: pwm_left = vx_error*100/(vx_error+vy_error);
243E 8A00      6939            mov     __mulint_PARM_2,r2
2440 8B01      6940            mov     (__mulint_PARM_2 + 1),r3
2442 900064    6941            mov     dptr,#0x0064
2445 C002      6942            push    ar2
2447 C003      6943            push    ar3
2449 120000    6944            lcall   __mulint
244C AC82      6945            mov     r4,dpl
244E AD83      6946            mov     r5,dph
2450 D003      6947            pop     ar3
2452 D002      6948            pop     ar2
2454 E5F8      6949            mov     a,_Joystick_Control_sloc0_1_0
2456 2A        6950            add     a,r2
2457 F500      6951            mov     __divsint_PARM_2,a
2459 E5F9      6952            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
245B 3B        6953            addc    a,r3
245C F501      6954            mov     (__divsint_PARM_2 + 1),a
245E 8C82      6955            mov     dpl,r4
2460 8D83      6956            mov     dph,r5
2462 C002      6957            push    ar2
2464 C003      6958            push    ar3
2466 120000    6959            lcall   __divsint
2469 AC82      6960            mov     r4,dpl
246B D003      6961            pop     ar3
246D D002      6962            pop     ar2
246F 905708    6963            mov     dptr,#_pwm_left
2472 EC        6964            mov     a,r4
2473 F0        6965            movx    @dptr,a
2474           6966   ;        main.c:1170: pwm_right = pwm_corr*vx_error; 
2474 9053B8    6967            mov     dptr,#_pwm_corr
2477 E0        6968            movx    a,@dptr
2478 FC        6969            mov     r4,a
2479 A3        6970            inc     dptr
247A E0        6971            movx    a,@dptr
247B FD        6972            mov     r5,a
247C A3        6973            inc     dptr
247D E0        6974            movx    a,@dptr
247E FE        6975            mov     r6,a
247F A3        6976            inc     dptr
2480 E0        6977            movx    a,@dptr
2481 FF        6978            mov     r7,a
2482 8A82      6979            mov     dpl,r2
2484 8B83      6980            mov     dph,r3
2486 C004      6981            push    ar4
2488 C005      6982            push    ar5
248A C006      6983            push    ar6
248C C007      6984            push    ar7
248E 120000    6985            lcall   ___sint2fs
2491 AA82      6986            mov     r2,dpl
2493 AB83      6987            mov     r3,dph
2495 A8F0      6988            mov     r0,b
2497 F9        6989            mov     r1,a
2498 D007      6990            pop     ar7
249A D006      6991            pop     ar6
249C D005      6992            pop     ar5
249E D004      6993            pop     ar4
24A0 C002      6994            push    ar2
24A2 C003      6995            push    ar3
24A4 C000      6996            push    ar0
24A6 C001      6997            push    ar1
24A8 8C82      6998            mov     dpl,r4
24AA 8D83      6999            mov     dph,r5
24AC 8EF0      7000            mov     b,r6
24AE EF        7001            mov     a,r7
24AF 120000    7002            lcall   ___fsmul
24B2 AA82      7003            mov     r2,dpl
24B4 AB83      7004            mov     r3,dph
24B6 ACF0      7005            mov     r4,b
24B8 FD        7006            mov     r5,a
24B9 E581      7007            mov     a,sp
24BB 24FC      7008            add     a,#0xfc
24BD F581      7009            mov     sp,a
24BF 8A82      7010            mov     dpl,r2
24C1 8B83      7011            mov     dph,r3
24C3 8CF0      7012            mov     b,r4
24C5 ED        7013            mov     a,r5
24C6 120000    7014            lcall   ___fs2uchar
24C9 E582      7015            mov     a,dpl
24CB 9056C8    7016            mov     dptr,#_pwm_right
24CE F0        7017            movx    @dptr,a
24CF           7018   L040033?:
24CF           7019   ;        main.c:1172: curr_angle += angle_diff * 1.4; // TUNE THIS 
24CF C098      7020            push    _Joystick_Control_sloc2_1_0
24D1 C099      7021            push    (_Joystick_Control_sloc2_1_0 + 1)
24D3 C09A      7022            push    (_Joystick_Control_sloc2_1_0 + 2)
24D5 C09B      7023            push    (_Joystick_Control_sloc2_1_0 + 3)
24D7 903333    7024            mov     dptr,#0x3333
24DA 75F0B3    7025            mov     b,#0xB3
24DD 743F      7026            mov     a,#0x3F
24DF 120000    7027            lcall   ___fsmul
24E2 AA82      7028            mov     r2,dpl
24E4 AB83      7029            mov     r3,dph
24E6 ACF0      7030            mov     r4,b
24E8 FD        7031            mov     r5,a
24E9 E581      7032            mov     a,sp
24EB 24FC      7033            add     a,#0xfc
24ED F581      7034            mov     sp,a
24EF 905378    7035            mov     dptr,#_curr_angle
24F2 E0        7036            movx    a,@dptr
24F3 FE        7037            mov     r6,a
24F4 A3        7038            inc     dptr
24F5 E0        7039            movx    a,@dptr
24F6 FF        7040            mov     r7,a
24F7 A3        7041            inc     dptr
24F8 E0        7042            movx    a,@dptr
24F9 F8        7043            mov     r0,a
24FA A3        7044            inc     dptr
24FB E0        7045            movx    a,@dptr
24FC F9        7046            mov     r1,a
24FD C002      7047            push    ar2
24FF C003      7048            push    ar3
2501 C004      7049            push    ar4
2503 C005      7050            push    ar5
2505 8E82      7051            mov     dpl,r6
2507 8F83      7052            mov     dph,r7
2509 88F0      7053            mov     b,r0
250B E9        7054            mov     a,r1
250C 120000    7055            lcall   ___fsadd
250F AA82      7056            mov     r2,dpl
2511 AB83      7057            mov     r3,dph
2513 ACF0      7058            mov     r4,b
2515 FD        7059            mov     r5,a
2516 E581      7060            mov     a,sp
2518 24FC      7061            add     a,#0xfc
251A F581      7062            mov     sp,a
251C 905378    7063            mov     dptr,#_curr_angle
251F EA        7064            mov     a,r2
2520 F0        7065            movx    @dptr,a
2521 A3        7066            inc     dptr
2522 EB        7067            mov     a,r3
2523 F0        7068            movx    @dptr,a
2524 A3        7069            inc     dptr
2525 EC        7070            mov     a,r4
2526 F0        7071            movx    @dptr,a
2527 A3        7072            inc     dptr
2528 ED        7073            mov     a,r5
2529 F0        7074            movx    @dptr,a
252A           7075   L040040?:
252A           7076   ;        main.c:1177: last_raw_angle = raw_angle; 
252A 905338    7077            mov     dptr,#_raw_angle
252D E0        7078            movx    a,@dptr
252E FA        7079            mov     r2,a
252F A3        7080            inc     dptr
2530 E0        7081            movx    a,@dptr
2531 FB        7082            mov     r3,a
2532 A3        7083            inc     dptr
2533 E0        7084            movx    a,@dptr
2534 FC        7085            mov     r4,a
2535 A3        7086            inc     dptr
2536 E0        7087            movx    a,@dptr
2537 FD        7088            mov     r5,a
2538 9052F8    7089            mov     dptr,#_last_raw_angle
253B EA        7090            mov     a,r2
253C F0        7091            movx    @dptr,a
253D A3        7092            inc     dptr
253E EB        7093            mov     a,r3
253F F0        7094            movx    @dptr,a
2540 A3        7095            inc     dptr
2541 EC        7096            mov     a,r4
2542 F0        7097            movx    @dptr,a
2543 A3        7098            inc     dptr
2544 ED        7099            mov     a,r5
2545 F0        7100            movx    @dptr,a
2546           7101   ;        main.c:1178: return curr_angle; 
2546 905378    7102            mov     dptr,#_curr_angle
2549 E0        7103            movx    a,@dptr
254A FA        7104            mov     r2,a
254B A3        7105            inc     dptr
254C E0        7106            movx    a,@dptr
254D FB        7107            mov     r3,a
254E A3        7108            inc     dptr
254F E0        7109            movx    a,@dptr
2550 FC        7110            mov     r4,a
2551 A3        7111            inc     dptr
2552 E0        7112            movx    a,@dptr
2553 8A82      7113            mov     dpl,r2
2555 8B83      7114            mov     dph,r3
2557 8CF0      7115            mov     b,r4
2559 22        7116            ret
255A           7117   ;------------------------------------------------------------
255A           7118   ;Allocation info for local variables in function 'main'
255A           7119   ;------------------------------------------------------------
255A           7120   ;pick_char                 Allocated with name '_main_pick_char_1_237'
255A           7121   ;c                         Allocated with name '_main_c_1_237'
255A           7122   ;vx                        Allocated with name '_main_vx_1_237'
255A           7123   ;vy                        Allocated with name '_main_vy_1_237'
255A           7124   ;auto_mode                 Allocated with name '_main_auto_mode_1_237'
255A           7125   ;angle_count               Allocated with name '_main_angle_count_1_237'
255A           7126   ;------------------------------------------------------------
255A           7127   ;        main.c:1181: void main (void)
255A           7128   ;        -----------------------------------------
255A           7129   ;         function main
255A           7130   ;        -----------------------------------------
255A           7131   _main:
255A           7132   ;        main.c:1184: xdata int vx = 0, vy = 0; 
255A 90D8A8    7133            mov     dptr,#_main_vx_1_237
255D E4        7134            clr     a
255E F0        7135            movx    @dptr,a
255F A3        7136            inc     dptr
2560 F0        7137            movx    @dptr,a
2561 90D8E8    7138            mov     dptr,#_main_vy_1_237
2564 E4        7139            clr     a
2565 F0        7140            movx    @dptr,a
2566 A3        7141            inc     dptr
2567 F0        7142            movx    @dptr,a
2568           7143   ;        main.c:1185: xdata int auto_mode = 0;
2568 90D938    7144            mov     dptr,#_main_auto_mode_1_237
256B E4        7145            clr     a
256C F0        7146            movx    @dptr,a
256D A3        7147            inc     dptr
256E F0        7148            movx    @dptr,a
256F           7149   ;        main.c:1186: char pick_char = '0';
256F 753830    7150            mov     _main_pick_char_1_237,#0x30
2572           7151   ;        main.c:1190: Init_all();
2572 120000    7152            lcall   _Init_all
2575           7153   ;        main.c:1191: BMM150_Init();
2575 120000    7154            lcall   _BMM150_Init
2578           7155   ;        main.c:1192: waitms(500);
2578 9001F4    7156            mov     dptr,#0x01F4
257B 120000    7157            lcall   _waitms
257E           7158   ;        main.c:1193: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
257E 7410      7159            mov     a,#__str_11
2580 C0E0      7160            push    acc
2582 7422      7161            mov     a,#(__str_11 >> 8)
2584 C0E0      7162            push    acc
2586 7480      7163            mov     a,#0x80
2588 C0E0      7164            push    acc
258A 120000    7165            lcall   _printf
258D 1581      7166            dec     sp
258F 1581      7167            dec     sp
2591 1581      7168            dec     sp
2593           7169   ;        main.c:1194: UART1_Init(9600);
2593 902580    7170            mov     dptr,#0x2580
2596 E4        7171            clr     a
2597 F5F0      7172            mov     b,a
2599 120000    7173            lcall   _UART1_Init
259C           7174   ;        main.c:1196: ReceptionOff();
259C 120000    7175            lcall   _ReceptionOff
259F           7176   ;        main.c:1199: SendATCommand("AT+VER\r\n");
259F 902250    7177            mov     dptr,#__str_12
25A2 75F080    7178            mov     b,#0x80
25A5 120000    7179            lcall   _SendATCommand
25A8           7180   ;        main.c:1200: SendATCommand("AT+BAUD\r\n");
25A8 902290    7181            mov     dptr,#__str_13
25AB 75F080    7182            mov     b,#0x80
25AE 120000    7183            lcall   _SendATCommand
25B1           7184   ;        main.c:1201: SendATCommand("AT+RFID\r\n");
25B1 9022D0    7185            mov     dptr,#__str_14
25B4 75F080    7186            mov     b,#0x80
25B7 120000    7187            lcall   _SendATCommand
25BA           7188   ;        main.c:1202: SendATCommand("AT+DVID\r\n");
25BA 902310    7189            mov     dptr,#__str_15
25BD 75F080    7190            mov     b,#0x80
25C0 120000    7191            lcall   _SendATCommand
25C3           7192   ;        main.c:1203: SendATCommand("AT+RFC002\r\n");
25C3 902350    7193            mov     dptr,#__str_16
25C6 75F080    7194            mov     b,#0x80
25C9 120000    7195            lcall   _SendATCommand
25CC           7196   ;        main.c:1204: SendATCommand("AT+POWE\r\n");
25CC 902390    7197            mov     dptr,#__str_17
25CF 75F080    7198            mov     b,#0x80
25D2 120000    7199            lcall   _SendATCommand
25D5           7200   ;        main.c:1205: SendATCommand("AT+CLSS\r\n");
25D5 9023D0    7201            mov     dptr,#__str_18
25D8 75F080    7202            mov     b,#0x80
25DB 120000    7203            lcall   _SendATCommand
25DE           7204   ;        main.c:1206: SendATCommand("AT+DVIDEF11\r\n");  
25DE 902410    7205            mov     dptr,#__str_19
25E1 75F080    7206            mov     b,#0x80
25E4 120000    7207            lcall   _SendATCommand
25E7           7208   ;        main.c:1209: L_bridge_1 = 0; 
25E7 C2A1      7209            clr     _P2_1
25E9           7210   ;        main.c:1210: L_bridge_2 = 0; 
25E9 C2A2      7211            clr     _P2_2
25EB           7212   ;        main.c:1211: R_bridge_1 = 0; 
25EB C2A4      7213            clr     _P2_4
25ED           7214   ;        main.c:1212: R_bridge_2 = 0; 
25ED C2A3      7215            clr     _P2_3
25EF           7216   ;        main.c:1215: curr_angle = Read_angle();
25EF 120000    7217            lcall   _Read_angle
25F2 AA82      7218            mov     r2,dpl
25F4 AB83      7219            mov     r3,dph
25F6 ACF0      7220            mov     r4,b
25F8 FD        7221            mov     r5,a
25F9 905378    7222            mov     dptr,#_curr_angle
25FC EA        7223            mov     a,r2
25FD F0        7224            movx    @dptr,a
25FE A3        7225            inc     dptr
25FF EB        7226            mov     a,r3
2600 F0        7227            movx    @dptr,a
2601 A3        7228            inc     dptr
2602 EC        7229            mov     a,r4
2603 F0        7230            movx    @dptr,a
2604 A3        7231            inc     dptr
2605 ED        7232            mov     a,r5
2606 F0        7233            movx    @dptr,a
2607           7234   ;        main.c:1216: while(1)
2607           7235   L041016?:
2607           7236   ;        main.c:1218: temp = Read_angle();
2607 120000    7237            lcall   _Read_angle
260A AA82      7238            mov     r2,dpl
260C AB83      7239            mov     r3,dph
260E ACF0      7240            mov     r4,b
2610 FD        7241            mov     r5,a
2611 9057C8    7242            mov     dptr,#_temp
2614 EA        7243            mov     a,r2
2615 F0        7244            movx    @dptr,a
2616 A3        7245            inc     dptr
2617 EB        7246            mov     a,r3
2618 F0        7247            movx    @dptr,a
2619 A3        7248            inc     dptr
261A EC        7249            mov     a,r4
261B F0        7250            movx    @dptr,a
261C A3        7251            inc     dptr
261D ED        7252            mov     a,r5
261E F0        7253            movx    @dptr,a
261F           7254   ;        main.c:1222: if(pick_char=='1'){
261F 7431      7255            mov     a,#0x31
2621 B53890    7256            cjne    a,_main_pick_char_1_237,L041002?
2624           7257   ;        main.c:1223: servo_pick();
2624 120000    7258            lcall   _servo_pick
2627           7259   ;        main.c:1224: waitms(1000);
2627 9003E8    7260            mov     dptr,#0x03E8
262A 120000    7261            lcall   _waitms
262D           7262   ;        main.c:1225: pick_char = '0';
262D 753830    7263            mov     _main_pick_char_1_237,#0x30
2630           7264   L041002?:
2630           7265   ;        main.c:1228: if(auto_mode){
2630 90D938    7266            mov     dptr,#_main_auto_mode_1_237
2633 E0        7267            movx    a,@dptr
2634 FA        7268            mov     r2,a
2635 A3        7269            inc     dptr
2636 E0        7270            movx    a,@dptr
2637 FB        7271            mov     r3,a
2638 4A        7272            orl     a,r2
2639 6000      7273            jz      L041004?
263B           7274   ;        main.c:1229: Auto_mode_slave();
263B 120000    7275            lcall   _Auto_mode_slave
263E           7276   ;        main.c:1230: auto_mode = 0;
263E 90D938    7277            mov     dptr,#_main_auto_mode_1_237
2641 E4        7278            clr     a
2642 F0        7279            movx    @dptr,a
2643 A3        7280            inc     dptr
2644 F0        7281            movx    @dptr,a
2645           7282   L041004?:
2645           7283   ;        main.c:1233: if(RXU1()) // Something has arrived
2645 120000    7284            lcall   _RXU1
2648 5000      7285            jnc     L041016?
264A           7286   ;        main.c:1235: c=getchar1();
264A 120000    7287            lcall   _getchar1
264D AA82      7288            mov     r2,dpl
264F           7289   ;        main.c:1236: if(c=='!') // Master is sending message
264F BA2110    7290            cjne    r2,#0x21,L041031?
2652 8000      7291            sjmp    L041032?
2654           7292   L041031?:
2654 020000    7293            ljmp    L041011?
2657           7294   L041032?:
2657           7295   ;        main.c:1238: getstr1(buff, sizeof(buff)-1);
2657 751813    7296            mov     _getstr1_PARM_2,#0x13
265A 905B88    7297            mov     dptr,#_buff
265D 75F040    7298            mov     b,#0x40
2660 120000    7299            lcall   _getstr1
2663           7300   ;        main.c:1239: if(strlen(buff)==11)
2663 905B88    7301            mov     dptr,#_buff
2666 75F040    7302            mov     b,#0x40
2669 120000    7303            lcall   _strlen
266C AB82      7304            mov     r3,dpl
266E AC83      7305            mov     r4,dph
2670 BB0BD0    7306            cjne    r3,#0x0B,L041033?
2673 BC00D0    7307            cjne    r4,#0x00,L041033?
2676 8000      7308            sjmp    L041034?
2678           7309   L041033?:
2678 020000    7310            ljmp    L041006?
267B           7311   L041034?:
267B           7312   ;        main.c:1242: sscanf(buff, "%03d,%03d,%c,%01d", &vx, &vy, &pick_char, &auto_mode);
267B 7438      7313            mov     a,#_main_auto_mode_1_237
267D C0E0      7314            push    acc
267F 74D9      7315            mov     a,#(_main_auto_mode_1_237 >> 8)
2681 C0E0      7316            push    acc
2683 E4        7317            clr     a
2684 C0E0      7318            push    acc
2686 7438      7319            mov     a,#_main_pick_char_1_237
2688 C0E0      7320            push    acc
268A 74D0      7321            mov     a,#(_main_pick_char_1_237 >> 8)
268C C0E0      7322            push    acc
268E 7440      7323            mov     a,#0x40
2690 C0E0      7324            push    acc
2692 74E8      7325            mov     a,#_main_vy_1_237
2694 C0E0      7326            push    acc
2696 74D8      7327            mov     a,#(_main_vy_1_237 >> 8)
2698 C0E0      7328            push    acc
269A E4        7329            clr     a
269B C0E0      7330            push    acc
269D 74A8      7331            mov     a,#_main_vx_1_237
269F C0E0      7332            push    acc
26A1 74D8      7333            mov     a,#(_main_vx_1_237 >> 8)
26A3 C0E0      7334            push    acc
26A5 E4        7335            clr     a
26A6 C0E0      7336            push    acc
26A8 7490      7337            mov     a,#__str_20
26AA C0E0      7338            push    acc
26AC 7426      7339            mov     a,#(__str_20 >> 8)
26AE C0E0      7340            push    acc
26B0 7480      7341            mov     a,#0x80
26B2 C0E0      7342            push    acc
26B4 7488      7343            mov     a,#_buff
26B6 C0E0      7344            push    acc
26B8 745B      7345            mov     a,#(_buff >> 8)
26BA C0E0      7346            push    acc
26BC 7440      7347            mov     a,#0x40
26BE C0E0      7348            push    acc
26C0 120000    7349            lcall   _sscanf
26C3 E581      7350            mov     a,sp
26C5 24EE      7351            add     a,#0xee
26C7 F581      7352            mov     sp,a
26C9           7353   ;        main.c:1243: printf("Joystick Received: Vx = %d, Vy = %d, Order = %c, Auto = %d\r\n", vx, vy, pick_char, auto_mode);
26C9 E538      7354            mov     a,_main_pick_char_1_237
26CB FB        7355            mov     r3,a
26CC 33        7356            rlc     a
26CD 95E0      7357            subb    a,acc
26CF FC        7358            mov     r4,a
26D0 90D938    7359            mov     dptr,#_main_auto_mode_1_237
26D3 E0        7360            movx    a,@dptr
26D4 C0E0      7361            push    acc
26D6 A3        7362            inc     dptr
26D7 E0        7363            movx    a,@dptr
26D8 C0E0      7364            push    acc
26DA C003      7365            push    ar3
26DC C004      7366            push    ar4
26DE 90D8E8    7367            mov     dptr,#_main_vy_1_237
26E1 E0        7368            movx    a,@dptr
26E2 C0E0      7369            push    acc
26E4 A3        7370            inc     dptr
26E5 E0        7371            movx    a,@dptr
26E6 C0E0      7372            push    acc
26E8 90D8A8    7373            mov     dptr,#_main_vx_1_237
26EB E0        7374            movx    a,@dptr
26EC C0E0      7375            push    acc
26EE A3        7376            inc     dptr
26EF E0        7377            movx    a,@dptr
26F0 C0E0      7378            push    acc
26F2 74D0      7379            mov     a,#__str_21
26F4 C0E0      7380            push    acc
26F6 7426      7381            mov     a,#(__str_21 >> 8)
26F8 C0E0      7382            push    acc
26FA 7480      7383            mov     a,#0x80
26FC C0E0      7384            push    acc
26FE 120000    7385            lcall   _printf
2701 E581      7386            mov     a,sp
2703 24F5      7387            add     a,#0xf5
2705 F581      7388            mov     sp,a
2707           7389   ;        main.c:1244: curr_angle = Joystick_Control(&vx, &vy);
2707 75D8E8    7390            mov     _Joystick_Control_PARM_2,#_main_vy_1_237
270A 75D9D8    7391            mov     (_Joystick_Control_PARM_2 + 1),#(_main_vy_1_237 >> 8)
270D 75DA00    7392            mov     (_Joystick_Control_PARM_2 + 2),#0x00
2710 90D8A8    7393            mov     dptr,#_main_vx_1_237
2713 75F000    7394            mov     b,#0x00
2716 120000    7395            lcall   _Joystick_Control
2719 AB82      7396            mov     r3,dpl
271B AC83      7397            mov     r4,dph
271D ADF0      7398            mov     r5,b
271F FE        7399            mov     r6,a
2720 905378    7400            mov     dptr,#_curr_angle
2723 EB        7401            mov     a,r3
2724 F0        7402            movx    @dptr,a
2725 A3        7403            inc     dptr
2726 EC        7404            mov     a,r4
2727 F0        7405            movx    @dptr,a
2728 A3        7406            inc     dptr
2729 ED        7407            mov     a,r5
272A F0        7408            movx    @dptr,a
272B A3        7409            inc     dptr
272C EE        7410            mov     a,r6
272D F0        7411            movx    @dptr,a
272E 020000    7412            ljmp    L041016?
2731           7413   L041006?:
2731           7414   ;        main.c:1247: printf("*** BAD MESSAGE ***: %s\r\n", buff);
2731 7488      7415            mov     a,#_buff
2733 C0E0      7416            push    acc
2735 745B      7417            mov     a,#(_buff >> 8)
2737 C0E0      7418            push    acc
2739 7440      7419            mov     a,#0x40
273B C0E0      7420            push    acc
273D 7410      7421            mov     a,#__str_22
273F C0E0      7422            push    acc
2741 7427      7423            mov     a,#(__str_22 >> 8)
2743 C0E0      7424            push    acc
2745 7480      7425            mov     a,#0x80
2747 C0E0      7426            push    acc
2749 120000    7427            lcall   _printf
274C E581      7428            mov     a,sp
274E 24FA      7429            add     a,#0xfa
2750 F581      7430            mov     sp,a
2752 020000    7431            ljmp    L041016?
2755           7432   L041011?:
2755           7433   ;        main.c:1250: else if(c=='@') // Master wants slave data
2755 BA4050    7434            cjne    r2,#0x40,L041035?
2758 8000      7435            sjmp    L041036?
275A           7436   L041035?:
275A 020000    7437            ljmp    L041016?
275D           7438   L041036?:
275D           7439   ;        main.c:1252: sprintf(buff, "0,00,%04ld,%05d,%03d\n", freq100, weight, (int)curr_angle);
275D 905378    7440            mov     dptr,#_curr_angle
2760 E0        7441            movx    a,@dptr
2761 FA        7442            mov     r2,a
2762 A3        7443            inc     dptr
2763 E0        7444            movx    a,@dptr
2764 FB        7445            mov     r3,a
2765 A3        7446            inc     dptr
2766 E0        7447            movx    a,@dptr
2767 FC        7448            mov     r4,a
2768 A3        7449            inc     dptr
2769 E0        7450            movx    a,@dptr
276A 8A82      7451            mov     dpl,r2
276C 8B83      7452            mov     dph,r3
276E 8CF0      7453            mov     b,r4
2770 120000    7454            lcall   ___fs2sint
2773 AA82      7455            mov     r2,dpl
2775 AB83      7456            mov     r3,dph
2777 C002      7457            push    ar2
2779 C003      7458            push    ar3
277B 905238    7459            mov     dptr,#_weight
277E E0        7460            movx    a,@dptr
277F C0E0      7461            push    acc
2781 A3        7462            inc     dptr
2782 E0        7463            movx    a,@dptr
2783 C0E0      7464            push    acc
2785 905B48    7465            mov     dptr,#_freq100
2788 E0        7466            movx    a,@dptr
2789 C0E0      7467            push    acc
278B A3        7468            inc     dptr
278C E0        7469            movx    a,@dptr
278D C0E0      7470            push    acc
278F A3        7471            inc     dptr
2790 E0        7472            movx    a,@dptr
2791 C0E0      7473            push    acc
2793 A3        7474            inc     dptr
2794 E0        7475            movx    a,@dptr
2795 C0E0      7476            push    acc
2797 74D0      7477            mov     a,#__str_23
2799 C0E0      7478            push    acc
279B 7427      7479            mov     a,#(__str_23 >> 8)
279D C0E0      7480            push    acc
279F 7480      7481            mov     a,#0x80
27A1 C0E0      7482            push    acc
27A3 7488      7483            mov     a,#_buff
27A5 C0E0      7484            push    acc
27A7 745B      7485            mov     a,#(_buff >> 8)
27A9 C0E0      7486            push    acc
27AB 7440      7487            mov     a,#0x40
27AD C0E0      7488            push    acc
27AF 120000    7489            lcall   _sprintf
27B2 E581      7490            mov     a,sp
27B4 24F2      7491            add     a,#0xf2
27B6 F581      7492            mov     sp,a
27B8           7493   ;        main.c:1253: printf("%s\r\n",buff);
27B8 7488      7494            mov     a,#_buff
27BA C0E0      7495            push    acc
27BC 745B      7496            mov     a,#(_buff >> 8)
27BE C0E0      7497            push    acc
27C0 7440      7498            mov     a,#0x40
27C2 C0E0      7499            push    acc
27C4 7410      7500            mov     a,#__str_24
27C6 C0E0      7501            push    acc
27C8 7428      7502            mov     a,#(__str_24 >> 8)
27CA C0E0      7503            push    acc
27CC 7480      7504            mov     a,#0x80
27CE C0E0      7505            push    acc
27D0 120000    7506            lcall   _printf
27D3 E581      7507            mov     a,sp
27D5 24FA      7508            add     a,#0xfa
27D7 F581      7509            mov     sp,a
27D9           7510   ;        main.c:1254: waitms(5); // The radio seems to need this delay...
27D9 900005    7511            mov     dptr,#0x0005
27DC 120000    7512            lcall   _waitms
27DF           7513   ;        main.c:1255: sendstr1(buff);
27DF 905B88    7514            mov     dptr,#_buff
27E2 75F040    7515            mov     b,#0x40
27E5 120000    7516            lcall   _sendstr1
27E8 020000    7517            ljmp    L041016?
27EB           7518            rseg R_CSEG
27EB           7519   
0000           7520            rseg R_XINIT
0000           7521   __xinit__pwm_counter:
0000 0000      7522            db 0x00,0x00    ; 0
0002           7523   __xinit__servo_counter:
0002 0000      7524            db 0x00,0x00    ; 0
0004           7525   __xinit__pwm_left:
0004 00        7526            db 0x00         ; 0
0005           7527   __xinit__pwm_right:
0005 00        7528            db 0x00         ; 0
0006           7529   __xinit__L_motor_dir:
0006 01        7530            db 0x01         ; 1
0007           7531   __xinit__R_motor_dir:
0007 01        7532            db 0x01         ; 1
0008           7533   __xinit__servo_base:
0008 01        7534            db 0x01         ; 1
0009           7535   __xinit__servo_arm:
0009 01        7536            db 0x01         ; 1
000A           7537   __xinit__vx_thres:
000A A100      7538            db 0xA1,0x00    ;  161
000C           7539   __xinit__vy_thres:
000C A600      7540            db 0xA6,0x00    ;  166
000E           7541   __xinit__vx:
000E 0000      7542            db 0x00,0x00    ;  0
0010           7543   __xinit__vy:
0010 0000      7544            db 0x00,0x00    ;  0
0012           7545   __xinit__fre_mea_count:
0012 0000      7546            db 0x00,0x00    ; 0
0014           7547   __xinit__weight_mea_count:
0014 0000      7548            db 0x00,0x00    ; 0
0016           7549   __xinit__seed:
0016 3930      7550            db 0x39,0x30    ; 12345
0018           7551   __xinit__pwm_corr:
0018 3333733F  7552            db 0x33,0x33,0x73,0x3F  ;  9.500000e-001
001C           7553   __xinit__curr_angle:
001C 00000000  7554            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0020           7555   __xinit__raw_angle:
0020 00000000  7556            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0024           7557   __xinit__last_raw_angle:
0024 00000000  7558            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0028           7559   __xinit__angle_diff:
0028 00000000  7560            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
002C           7561   __xinit__mea_yes:
002C 01        7562            db 0x01         ;  1
002D           7563   __xinit__weight:
002D 0000      7564            db 0x00,0x00    ; 0
002F           7565   
0000           7566            rseg R_CONST
0000           7567   __str_0:
0000 4572726F  7568            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
=======
0000            615            rseg    R_OSEG
0000            616            rseg    R_OSEG
0000            617            rseg    R_OSEG
0000            618            rseg    R_OSEG
0000            619            rseg    R_OSEG
0000            620   _InitPinADC_PARM_2:
0000            621            ds 1
0001            622            rseg    R_OSEG
0001            623            rseg    R_OSEG
0001            624   _check_bound_PARM_2:
0001            625            ds 2
0003            626   ;--------------------------------------------------------
0003            627   ; indirectly addressable internal ram data
0003            628   ;--------------------------------------------------------
0000            629            rseg R_ISEG
0000            630   _buff:
0000            631            ds 20
0014            632   ;--------------------------------------------------------
0014            633   ; absolute internal ram data
0014            634   ;--------------------------------------------------------
0000            635            DSEG
0000            636   ;--------------------------------------------------------
0000            637   ; bit data
0000            638   ;--------------------------------------------------------
0000            639            rseg R_BSEG
0000            640   ;--------------------------------------------------------
0000            641   ; paged external ram data
0000            642   ;--------------------------------------------------------
0000            643            rseg R_PSEG
0000            644   ;--------------------------------------------------------
0000            645   ; external ram data
0000            646   ;--------------------------------------------------------
0000            647            rseg R_XSEG
0000            648   _freq100:
0000            649            ds 4
0004            650   _d1:
0004            651            ds 2
0006            652   _d2:
0006            653            ds 2
0008            654   _dig_x1:
0008            655            ds 1
0009            656   _dig_x2:
0009            657            ds 1
000A            658   _dig_y1:
000A            659            ds 1
000B            660   _dig_y2:
000B            661            ds 1
000C            662   _dig_z1:
000C            663            ds 2
000E            664   _dig_z2:
000E            665            ds 2
0010            666   _dig_z3:
0010            667            ds 2
0012            668   _dig_z4:
0012            669            ds 2
0014            670   _dig_xy1:
0014            671            ds 1
0015            672   _dig_xy2:
0015            673            ds 1
0016            674   _dig_xyz1:
0016            675            ds 2
0018            676   _BMM150_Read_Trim_Registers_trim_x1y1_1_97:
0018            677            ds 2
001A            678   _BMM150_Read_Trim_Registers_trim_xyz_data_1_97:
001A            679            ds 4
001E            680   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_97:
001E            681            ds 10
0028            682   _BMM150_compensate_x_retval_1_107:
0028            683            ds 2
002A            684   _BMM150_compensate_x_process_comp_x0_1_107:
002A            685            ds 2
002C            686   _BMM150_compensate_y_retval_1_116:
002C            687            ds 2
002E            688   _BMM150_compensate_y_process_comp_y0_1_116:
002E            689            ds 2
0030            690   _BMM150_Read_Data_x_val_1_125:
0030            691            ds 2
0032            692   _BMM150_Read_Data_y_val_1_125:
0032            693            ds 2
0034            694   _BMM150_Read_Data_rhall_val_1_125:
0034            695            ds 2
0036            696   _ReadHX711_dataa_1_169:
0036            697            ds 4
003A            698   _ReadHX711_j_1_169:
003A            699            ds 1
003B            700   _Read_angle_mag_x_1_203:
003B            701            ds 2
003D            702   _Read_angle_mag_y_1_203:
003D            703            ds 2
003F            704   _Read_angle_sum_x_1_203:
003F            705            ds 4
0043            706   _Read_angle_sum_y_1_203:
0043            707            ds 4
0047            708   _Read_angle_angle_1_203:
0047            709            ds 4
004B            710   _Auto_mode_slave_command_1_205:
004B            711            ds 2
004D            712   _Auto_mode_slave_state_res_1_205:
004D            713            ds 2
004F            714   _Auto_mode_slave_dummy_1_205:
004F            715            ds 2
0051            716   _Joystick_Control_vx_error_1_214:
0051            717            ds 2
0053            718   _main_vx_1_237:
0053            719            ds 2
0055            720   _main_vy_1_237:
0055            721            ds 2
0057            722   _main_auto_mode_1_237:
0057            723            ds 2
0059            724   ;--------------------------------------------------------
0059            725   ; absolute external ram data
0059            726   ;--------------------------------------------------------
0000            727            XSEG
0000            728   ;--------------------------------------------------------
0000            729   ; external initialized ram data
0000            730   ;--------------------------------------------------------
0000            731            rseg R_IXSEG
0000            732   _pwm_counter:
0000            733            ds 2
0002            734   _servo_counter:
0002            735            ds 2
0004            736   _pwm_left:
0004            737            ds 1
0005            738   _pwm_right:
0005            739            ds 1
0006            740   _L_motor_dir:
0006            741            ds 1
0007            742   _R_motor_dir:
0007            743            ds 1
0008            744   _servo_base:
0008            745            ds 1
0009            746   _servo_arm:
0009            747            ds 1
000A            748   _vx_thres:
000A            749            ds 2
000C            750   _vy_thres:
000C            751            ds 2
000E            752   _vx:
000E            753            ds 2
0010            754   _vy:
0010            755            ds 2
0012            756   _fre_mea_count:
0012            757            ds 2
0014            758   _weight_mea_count:
0014            759            ds 2
0016            760   _seed:
0016            761            ds 2
0018            762   _pwm_corr:
0018            763            ds 4
001C            764   _curr_angle:
001C            765            ds 4
0020            766   _mea_yes:
0020            767            ds 1
0021            768   _weight:
0021            769            ds 2
0000            770            rseg R_HOME
0000            771            rseg R_GSINIT
0000            772            rseg R_CSEG
0000            773   ;--------------------------------------------------------
0000            774   ; Reset entry point and interrupt vectors
0000            775   ;--------------------------------------------------------
0000            776            CSEG at 0x0000
0000 020000     777            ljmp    _crt0
0093            778            CSEG at 0x0093
0093 020000     779            ljmp    _Timer5_ISR
0096            780   ;--------------------------------------------------------
0096            781   ; global & static initialisations
0096            782   ;--------------------------------------------------------
0000            783            rseg R_HOME
0000            784            rseg R_GSINIT
0000            785            rseg R_GSINIT
0000            786   ;--------------------------------------------------------
0000            787   ; data variables initialization
0000            788   ;--------------------------------------------------------
0000            789            rseg R_DINIT
0000            790            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            791   ;--------------------------------------------------------
0000            792   ; code
0000            793   ;--------------------------------------------------------
0000            794            rseg R_CSEG
0000            795   ;------------------------------------------------------------
0000            796   ;Allocation info for local variables in function '_c51_external_startup'
0000            797   ;------------------------------------------------------------
0000            798   ;------------------------------------------------------------
0000            799   ;        main.c:111: char _c51_external_startup (void)
0000            800   ;        -----------------------------------------
0000            801   ;         function _c51_external_startup
0000            802   ;        -----------------------------------------
0000            803   __c51_external_startup:
0000            804            using   0
0000            805   ;        main.c:114: SFRPAGE = 0x00;
0000 75A700     806            mov     _SFRPAGE,#0x00
0003            807   ;        main.c:115: WDTCN = 0xDE; //First key
0003 7597DE     808            mov     _WDTCN,#0xDE
0006            809   ;        main.c:116: WDTCN = 0xAD; //Second key
0006 7597AD     810            mov     _WDTCN,#0xAD
0009            811   ;        main.c:118: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     812            mov     _VDM0CN,#0x80
000C            813   ;        main.c:119: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     814            mov     _RSTSRC,#0x06
000F            815   ;        main.c:126: SFRPAGE = 0x10;
000F 75A710     816            mov     _SFRPAGE,#0x10
0012            817   ;        main.c:127: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     818            mov     _PFE0CN,#0x20
0015            819   ;        main.c:128: SFRPAGE = 0x00;
0015 75A700     820            mov     _SFRPAGE,#0x00
0018            821   ;        main.c:149: CLKSEL = 0x00;
0018 75A900     822            mov     _CLKSEL,#0x00
001B            823   ;        main.c:150: CLKSEL = 0x00;
001B 75A900     824            mov     _CLKSEL,#0x00
001E            825   ;        main.c:151: while ((CLKSEL & 0x80) == 0);
001E            826   L002001?:
001E E5A9       827            mov     a,_CLKSEL
0020 30E730     828            jnb     acc.7,L002001?
0023            829   ;        main.c:152: CLKSEL = 0x03;
0023 75A903     830            mov     _CLKSEL,#0x03
0026            831   ;        main.c:153: CLKSEL = 0x03;
0026 75A903     832            mov     _CLKSEL,#0x03
0029            833   ;        main.c:154: while ((CLKSEL & 0x80) == 0);
0029            834   L002004?:
0029 E5A9       835            mov     a,_CLKSEL
002B 30E7B0     836            jnb     acc.7,L002004?
002E            837   ;        main.c:160: P0MDOUT |= 0b_1100_0000;
002E 43A4C0     838            orl     _P0MDOUT,#0xC0
0031            839   ;        main.c:161: P1MDOUT |= 0b_0000_0110;
0031 43A506     840            orl     _P1MDOUT,#0x06
0034            841   ;        main.c:162: P2MDOUT |= 0b_0000_0001; // P2.0 in push-pull mode
0034 43A601     842            orl     _P2MDOUT,#0x01
0037            843   ;        main.c:163: XBR0     = 0b_0000_0011; // UART0E = 1 and SPI0E = 1               
0037 75E103     844            mov     _XBR0,#0x03
003A            845   ;        main.c:164: XBR1     = 0b_0000_0000;
003A 75E200     846            mov     _XBR1,#0x00
003D            847   ;        main.c:165: XBR2     = 0b_0100_0001; // Enable crossbar and uart 1
003D 75E341     848            mov     _XBR2,#0x41
0040            849   ;        main.c:166: P0SKIP       = 0b_0000_0111; 
0040 75D407     850            mov     _P0SKIP,#0x07
0043            851   ;        main.c:167: P1SKIP   = 0b_1111_1001;
0043 75D5F9     852            mov     _P1SKIP,#0xF9
0046            853   ;        main.c:172: SCON0 = 0x10;
0046 759810     854            mov     _SCON0,#0x10
0049            855   ;        main.c:173: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0049 758DE6     856            mov     _TH1,#0xE6
004C            857   ;        main.c:174: TL1 = TH1;      // Init Timer1
004C 858D8B     858            mov     _TL1,_TH1
004F            859   ;        main.c:175: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
004F 53890F     860            anl     _TMOD,#0x0F
0052            861   ;        main.c:176: TMOD |=  0x20;                       
0052 438920     862            orl     _TMOD,#0x20
0055            863   ;        main.c:177: TR1 = 1; // START Timer1
0055 D28E       864            setb    _TR1
0057            865   ;        main.c:178: TI = 1;  // Indicate TX0 ready
0057 D299       866            setb    _TI
0059            867   ;        main.c:179: P2_0=1; // 'set' pin to 1 is normal operation mode.
0059 D2A0       868            setb    _P2_0
005B            869   ;        main.c:182: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
005B 75A211     870            mov     _SPI0CKR,#0x11
005E            871   ;        main.c:183: SPI0CFG = 0b_1110_0000; // SPI mode 3
005E 75A1E0     872            mov     _SPI0CFG,#0xE0
0061            873   ;        main.c:184: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0061 75F801     874            mov     _SPI0CN0,#0x01
0064            875   ;        main.c:187: SFRPAGE=0x10;
0064 75A710     876            mov     _SFRPAGE,#0x10
0067            877   ;        main.c:188: TMR5CN0=0x00;
0067 75C000     878            mov     _TMR5CN0,#0x00
006A            879   ;        main.c:189: TMR5=0xffff;   // Set to reload immediately
006A 75D4FF     880            mov     _TMR5,#0xFF
006D 75D5FF     881            mov     (_TMR5 >> 8),#0xFF
0070            882   ;        main.c:190: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
0070 43F308     883            orl     _EIE2,#0x08
0073            884   ;        main.c:191: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0073 D2C2       885            setb    _TR5
0075            886   ;        main.c:193: EA=1;  // Enable global interrupts
0075 D2AF       887            setb    _EA
0077            888   ;        main.c:194: SFRPAGE=0x00;
0077 75A700     889            mov     _SFRPAGE,#0x00
007A            890   ;        main.c:196: return 0;
007A 758200     891            mov     dpl,#0x00
007D 22         892            ret
007E            893   ;------------------------------------------------------------
007E            894   ;Allocation info for local variables in function 'Timer3us'
007E            895   ;------------------------------------------------------------
007E            896   ;us                        Allocated to registers r2 
007E            897   ;i                         Allocated to registers r3 
007E            898   ;------------------------------------------------------------
007E            899   ;        main.c:200: void Timer3us(unsigned char us)
007E            900   ;        -----------------------------------------
007E            901   ;         function Timer3us
007E            902   ;        -----------------------------------------
007E            903   _Timer3us:
007E AA82       904            mov     r2,dpl
0080            905   ;        main.c:205: CKCON0|=0b_0100_0000;
0080 438E40     906            orl     _CKCON0,#0x40
0083            907   ;        main.c:207: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0083 7592B8     908            mov     _TMR3RL,#0xB8
0086 7593FF     909            mov     (_TMR3RL >> 8),#0xFF
0089            910   ;        main.c:208: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0089 859294     911            mov     _TMR3,_TMR3RL
008C 859395     912            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
008F            913   ;        main.c:210: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
008F 759104     914            mov     _TMR3CN0,#0x04
0092            915   ;        main.c:211: for (i = 0; i < us; i++)       // Count <us> overflows
0092 7B00       916            mov     r3,#0x00
0094            917   L003004?:
0094 C3         918            clr     c
0095 EB         919            mov     a,r3
0096 9A         920            subb    a,r2
0097 5000       921            jnc     L003007?
0099            922   ;        main.c:213: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0099            923   L003001?:
0099 E591       924            mov     a,_TMR3CN0
009B 30E7B0     925            jnb     acc.7,L003001?
009E            926   ;        main.c:214: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
009E 53917F     927            anl     _TMR3CN0,#0x7F
00A1            928   ;        main.c:211: for (i = 0; i < us; i++)       // Count <us> overflows
00A1 0B         929            inc     r3
00A2 8000       930            sjmp    L003004?
00A4            931   L003007?:
00A4            932   ;        main.c:216: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00A4 759100     933            mov     _TMR3CN0,#0x00
00A7 22         934            ret
00A8            935   ;------------------------------------------------------------
00A8            936   ;Allocation info for local variables in function 'waitms'
00A8            937   ;------------------------------------------------------------
00A8            938   ;ms                        Allocated to registers r2 r3 
00A8            939   ;j                         Allocated to registers r4 r5 
00A8            940   ;k                         Allocated to registers r6 
00A8            941   ;------------------------------------------------------------
00A8            942   ;        main.c:219: void waitms (unsigned int ms)
00A8            943   ;        -----------------------------------------
00A8            944   ;         function waitms
00A8            945   ;        -----------------------------------------
00A8            946   _waitms:
00A8 AA82       947            mov     r2,dpl
00AA AB83       948            mov     r3,dph
00AC            949   ;        main.c:223: for(j=0; j<ms; j++)
00AC 7C00       950            mov     r4,#0x00
00AE 7D00       951            mov     r5,#0x00
00B0            952   L004005?:
00B0 C3         953            clr     c
00B1 EC         954            mov     a,r4
00B2 9A         955            subb    a,r2
00B3 ED         956            mov     a,r5
00B4 9B         957            subb    a,r3
00B5 5000       958            jnc     L004009?
00B7            959   ;        main.c:224: for (k=0; k<4; k++) Timer3us(250);
00B7 7E00       960            mov     r6,#0x00
00B9            961   L004001?:
00B9 BE04F0     962            cjne    r6,#0x04,L004018?
00BC            963   L004018?:
00BC 5000       964            jnc     L004007?
00BE 7582FA     965            mov     dpl,#0xFA
00C1 C002       966            push    ar2
00C3 C003       967            push    ar3
00C5 C004       968            push    ar4
00C7 C005       969            push    ar5
00C9 C006       970            push    ar6
00CB 120000     971            lcall   _Timer3us
00CE D006       972            pop     ar6
00D0 D005       973            pop     ar5
00D2 D004       974            pop     ar4
00D4 D003       975            pop     ar3
00D6 D002       976            pop     ar2
00D8 0E         977            inc     r6
00D9 8000       978            sjmp    L004001?
00DB            979   L004007?:
00DB            980   ;        main.c:223: for(j=0; j<ms; j++)
00DB 0C         981            inc     r4
00DC BC0030     982            cjne    r4,#0x00,L004005?
00DF 0D         983            inc     r5
00E0 8000       984            sjmp    L004005?
00E2            985   L004009?:
00E2 22         986            ret
00E3            987   ;------------------------------------------------------------
00E3            988   ;Allocation info for local variables in function 'SPI_transfer'
00E3            989   ;------------------------------------------------------------
00E3            990   ;tx_data                   Allocated to registers 
00E3            991   ;------------------------------------------------------------
00E3            992   ;        main.c:227: unsigned char SPI_transfer(unsigned char tx_data)
00E3            993   ;        -----------------------------------------
00E3            994   ;         function SPI_transfer
00E3            995   ;        -----------------------------------------
00E3            996   _SPI_transfer:
00E3 8582A3     997            mov     _SPI0DAT,dpl
00E6            998   ;        main.c:230: while (!SPIF);      // Wait for transfer to complete
00E6            999   L005001?:
00E6           1000   ;        main.c:231: SPIF = 0;           // Clear SPI interrupt flag
00E6 10FFB0    1001            jbc     _SPIF,L005008?
00E9 8000      1002            sjmp    L005001?
00EB           1003   L005008?:
00EB           1004   ;        main.c:232: return SPI0DAT;     // Return received data
00EB 85A382    1005            mov     dpl,_SPI0DAT
00EE 22        1006            ret
00EF           1007   ;------------------------------------------------------------
00EF           1008   ;Allocation info for local variables in function 'SPI_read'
00EF           1009   ;------------------------------------------------------------
00EF           1010   ;reg_addr                  Allocated to registers r2 
00EF           1011   ;value                     Allocated with name '_SPI_read_value_1_93'
00EF           1012   ;------------------------------------------------------------
00EF           1013   ;        main.c:235: unsigned char SPI_read(unsigned char reg_addr)
00EF           1014   ;        -----------------------------------------
00EF           1015   ;         function SPI_read
00EF           1016   ;        -----------------------------------------
00EF           1017   _SPI_read:
00EF AA82      1018            mov     r2,dpl
00F1           1019   ;        main.c:240: reg_addr = reg_addr | 0x80;
00F1 430280    1020            orl     ar2,#0x80
00F4           1021   ;        main.c:242: CS = 0;                // Select the device
00F4 C290      1022            clr     _P1_0
00F6           1023   ;        main.c:243: SPI_transfer(reg_addr);     // Send register address
00F6 8A82      1024            mov     dpl,r2
00F8 120000    1025            lcall   _SPI_transfer
00FB           1026   ;        main.c:244: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
00FB 758200    1027            mov     dpl,#0x00
00FE 120000    1028            lcall   _SPI_transfer
0101           1029   ;        main.c:245: CS = 1;                // Deselect the device
0101 D290      1030            setb    _P1_0
0103           1031   ;        main.c:247: return value;
0103 22        1032            ret
0104           1033   ;------------------------------------------------------------
0104           1034   ;Allocation info for local variables in function 'SPI_write'
0104           1035   ;------------------------------------------------------------
0104           1036   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0104           1037   ;reg_addr                  Allocated to registers r2 
0104           1038   ;------------------------------------------------------------
0104           1039   ;        main.c:250: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0104           1040   ;        -----------------------------------------
0104           1041   ;         function SPI_write
0104           1042   ;        -----------------------------------------
0104           1043   _SPI_write:
0104 AA82      1044            mov     r2,dpl
0106           1045   ;        main.c:253: reg_addr = reg_addr & 0x7F;
0106 53027F    1046            anl     ar2,#0x7F
0109           1047   ;        main.c:255: CS = 0;                // Select device
0109 C290      1048            clr     _P1_0
010B           1049   ;        main.c:256: SPI_transfer(reg_addr);     // Send register address
010B 8A82      1050            mov     dpl,r2
010D 120000    1051            lcall   _SPI_transfer
0110           1052   ;        main.c:257: SPI_transfer(reg_value);    // Send value
0110 859082    1053            mov     dpl,_SPI_write_PARM_2
0113 120000    1054            lcall   _SPI_transfer
0116           1055   ;        main.c:258: CS = 1;                // Deselect device
0116 D290      1056            setb    _P1_0
0118 22        1057            ret
0119           1058   ;------------------------------------------------------------
0119           1059   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
0119           1060   ;------------------------------------------------------------
0119           1061   ;i                         Allocated with name '_BMM150_Read_Trim_Registers_i_1_97'
0119           1062   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_97'
0119           1063   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_97'
0119           1064   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_97'
0119           1065   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97'
0119           1066   ;------------------------------------------------------------
0119           1067   ;        main.c:261: void BMM150_Read_Trim_Registers(void)
0119           1068   ;        -----------------------------------------
0119           1069   ;         function BMM150_Read_Trim_Registers
0119           1070   ;        -----------------------------------------
0119           1071   _BMM150_Read_Trim_Registers:
0119           1072   ;        main.c:265: xdata uint8_t trim_x1y1[2] = {0};
0119 90CA10    1073            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
011C           1074   ;        main.c:266: xdata uint8_t trim_xyz_data[4] = {0};
011C E4        1075            clr     a
011D F0        1076            movx    @dptr,a
011E 90CA11    1077            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
0121 F0        1078            movx    @dptr,a
0122 90CA70    1079            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0125 F0        1080            movx    @dptr,a
0126 90CA71    1081            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0001)
0129 F0        1082            movx    @dptr,a
012A 90CA72    1083            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
012D           1084   ;        main.c:267: xdata uint8_t trim_xy1xy2[10] = {0};
012D E4        1085            clr     a
012E F0        1086            movx    @dptr,a
012F 90CA73    1087            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0132 F0        1088            movx    @dptr,a
0133 90CAD0    1089            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
0136 F0        1090            movx    @dptr,a
0137 90CAD1    1091            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0001)
013A F0        1092            movx    @dptr,a
013B 90CAD2    1093            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0002)
013E E4        1094            clr     a
013F F0        1095            movx    @dptr,a
0140 90CAD3    1096            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0003)
0143 F0        1097            movx    @dptr,a
0144 90CAD4    1098            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0147 F0        1099            movx    @dptr,a
0148 90CAD5    1100            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
014B F0        1101            movx    @dptr,a
014C 90CAD6    1102            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0006)
014F E4        1103            clr     a
0150 F0        1104            movx    @dptr,a
0151 90CAD7    1105            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0007)
0154 F0        1106            movx    @dptr,a
0155 90CAD8    1107            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0158 F0        1108            movx    @dptr,a
0159 90CAD9    1109            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
015C F0        1110            movx    @dptr,a
015D           1111   ;        main.c:270: for (i=0;i<2;i++){
015D 7A00      1112            mov     r2,#0x00
015F           1113   L008001?:
015F BA0230    1114            cjne    r2,#0x02,L008024?
0162           1115   L008024?:
0162 5000      1116            jnc     L008004?
0164           1117   ;        main.c:271: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
0164 EA        1118            mov     a,r2
0165 2410      1119            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
0167 FB        1120            mov     r3,a
0168 E4        1121            clr     a
0169 34CA      1122            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 >> 8)
016B FC        1123            mov     r4,a
016C 745D      1124            mov     a,#0x5D
016E 2A        1125            add     a,r2
016F F582      1126            mov     dpl,a
0171 C002      1127            push    ar2
0173 C003      1128            push    ar3
0175 C004      1129            push    ar4
0177 120000    1130            lcall   _SPI_read
017A AD82      1131            mov     r5,dpl
017C D004      1132            pop     ar4
017E D003      1133            pop     ar3
0180 D002      1134            pop     ar2
0182 8B82      1135            mov     dpl,r3
0184 8C83      1136            mov     dph,r4
0186 ED        1137            mov     a,r5
0187 F0        1138            movx    @dptr,a
0188           1139   ;        main.c:270: for (i=0;i<2;i++){
0188 0A        1140            inc     r2
0189 8000      1141            sjmp    L008001?
018B           1142   L008004?:
018B           1143   ;        main.c:273: for (i=0;i<4;i++){
018B 7A00      1144            mov     r2,#0x00
018D           1145   L008005?:
018D BA04F0    1146            cjne    r2,#0x04,L008026?
0190           1147   L008026?:
0190 5000      1148            jnc     L008008?
0192           1149   ;        main.c:274: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
0192 EA        1150            mov     a,r2
0193 2470      1151            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_97
0195 FB        1152            mov     r3,a
0196 E4        1153            clr     a
0197 34CA      1154            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 >> 8)
0199 FC        1155            mov     r4,a
019A 7462      1156            mov     a,#0x62
019C 2A        1157            add     a,r2
019D F582      1158            mov     dpl,a
019F C002      1159            push    ar2
01A1 C003      1160            push    ar3
01A3 C004      1161            push    ar4
01A5 120000    1162            lcall   _SPI_read
01A8 AD82      1163            mov     r5,dpl
01AA D004      1164            pop     ar4
01AC D003      1165            pop     ar3
01AE D002      1166            pop     ar2
01B0 8B82      1167            mov     dpl,r3
01B2 8C83      1168            mov     dph,r4
01B4 ED        1169            mov     a,r5
01B5 F0        1170            movx    @dptr,a
01B6           1171   ;        main.c:273: for (i=0;i<4;i++){
01B6 0A        1172            inc     r2
01B7 8000      1173            sjmp    L008005?
01B9           1174   L008008?:
01B9           1175   ;        main.c:276: for (i=0;i<10;i++){
01B9 7A00      1176            mov     r2,#0x00
01BB           1177   L008009?:
01BB BA0AB0    1178            cjne    r2,#0x0A,L008028?
01BE           1179   L008028?:
01BE 5000      1180            jnc     L008012?
01C0           1181   ;        main.c:277: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
01C0 EA        1182            mov     a,r2
01C1 24D0      1183            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97
01C3 FB        1184            mov     r3,a
01C4 E4        1185            clr     a
01C5 34CA      1186            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 >> 8)
01C7 FC        1187            mov     r4,a
01C8 7468      1188            mov     a,#0x68
01CA 2A        1189            add     a,r2
01CB F582      1190            mov     dpl,a
01CD C002      1191            push    ar2
01CF C003      1192            push    ar3
01D1 C004      1193            push    ar4
01D3 120000    1194            lcall   _SPI_read
01D6 AD82      1195            mov     r5,dpl
01D8 D004      1196            pop     ar4
01DA D003      1197            pop     ar3
01DC D002      1198            pop     ar2
01DE 8B82      1199            mov     dpl,r3
01E0 8C83      1200            mov     dph,r4
01E2 ED        1201            mov     a,r5
01E3 F0        1202            movx    @dptr,a
01E4           1203   ;        main.c:276: for (i=0;i<10;i++){
01E4 0A        1204            inc     r2
01E5 8000      1205            sjmp    L008009?
01E7           1206   L008012?:
01E7           1207   ;        main.c:280: dig_x1 = (int8_t) trim_x1y1[0]; 
01E7 90CA10    1208            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_97
01EA E0        1209            movx    a,@dptr
01EB 9052C0    1210            mov     dptr,#_dig_x1
01EE F0        1211            movx    @dptr,a
01EF           1212   ;        main.c:281: dig_y1 = (int8_t) trim_x1y1[1]; 
01EF 90CA11    1213            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_97 + 0x0001)
01F2 E0        1214            movx    a,@dptr
01F3 905240    1215            mov     dptr,#_dig_y1
01F6 F0        1216            movx    @dptr,a
01F7           1217   ;        main.c:282: dig_x2 = (int8_t) trim_xyz_data[2]; 
01F7 90CA72    1218            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0002)
01FA E0        1219            movx    a,@dptr
01FB 905280    1220            mov     dptr,#_dig_x2
01FE F0        1221            movx    @dptr,a
01FF           1222   ;        main.c:283: dig_y2 = (int8_t) trim_xyz_data[3]; 
01FF 90CA73    1223            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_97 + 0x0003)
0202 E0        1224            movx    a,@dptr
0203 905200    1225            mov     dptr,#_dig_y2
0206 F0        1226            movx    @dptr,a
0207           1227   ;        main.c:297: dig_xy1 = trim_xy1xy2[9];
0207 90CAD9    1228            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0009)
020A E0        1229            movx    a,@dptr
020B 9050C0    1230            mov     dptr,#_dig_xy1
020E F0        1231            movx    @dptr,a
020F           1232   ;        main.c:298: dig_xy2 = (int8_t)trim_xy1xy2[8];
020F 90CAD8    1233            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0008)
0212 E0        1234            movx    a,@dptr
0213 905080    1235            mov     dptr,#_dig_xy2
0216 F0        1236            movx    @dptr,a
0217           1237   ;        main.c:300: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
0217 90CAD5    1238            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0005)
021A E0        1239            movx    a,@dptr
021B FA        1240            mov     r2,a
021C 53027F    1241            anl     ar2,#0x7F
021F 8A03      1242            mov     ar3,r2
0221 7A00      1243            mov     r2,#0x00
0223           1244   ;        main.c:301: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
0223 90CAD4    1245            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_97 + 0x0004)
0226 E0        1246            movx    a,@dptr
0227 FC        1247            mov     r4,a
0228 7D00      1248            mov     r5,#0x00
022A 905040    1249            mov     dptr,#_dig_xyz1
022D EC        1250            mov     a,r4
022E 4A        1251            orl     a,r2
022F F0        1252            movx    @dptr,a
0230 ED        1253            mov     a,r5
0231 4B        1254            orl     a,r3
0232 A3        1255            inc     dptr
0233 F0        1256            movx    @dptr,a
0234 22        1257            ret
0235           1258   ;------------------------------------------------------------
0235           1259   ;Allocation info for local variables in function 'BMM150_Init'
0235           1260   ;------------------------------------------------------------
0235           1261   ;chip_id                   Allocated with name '_BMM150_Init_chip_id_1_102'
0235           1262   ;------------------------------------------------------------
0235           1263   ;        main.c:305: void BMM150_Init(void)
0235           1264   ;        -----------------------------------------
0235           1265   ;         function BMM150_Init
0235           1266   ;        -----------------------------------------
0235           1267   _BMM150_Init:
0235           1268   ;        main.c:310: CS = 1; // Deselect BMM150
0235 D290      1269            setb    _P1_0
0237           1270   ;        main.c:313: waitms(10);
0237 90000A    1271            mov     dptr,#0x000A
023A 120000    1272            lcall   _waitms
023D           1273   ;        main.c:316: SPI_write(BMM150_POWER_CONTROL, 0x82);
023D 759082    1274            mov     _SPI_write_PARM_2,#0x82
0240 75824B    1275            mov     dpl,#0x4B
0243 120000    1276            lcall   _SPI_write
0246           1277   ;        main.c:317: waitms(10);  // Wait for reset to complete
0246 90000A    1278            mov     dptr,#0x000A
0249 120000    1279            lcall   _waitms
024C           1280   ;        main.c:320: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
024C 759001    1281            mov     _SPI_write_PARM_2,#0x01
024F 75824B    1282            mov     dpl,#0x4B
0252 120000    1283            lcall   _SPI_write
0255           1284   ;        main.c:321: waitms(5);
0255 900005    1285            mov     dptr,#0x0005
0258 120000    1286            lcall   _waitms
025B           1287   ;        main.c:324: chip_id = SPI_read(BMM150_CHIP_ID);
025B 758240    1288            mov     dpl,#0x40
025E 120000    1289            lcall   _SPI_read
0261 AA82      1290            mov     r2,dpl
0263           1291   ;        main.c:325: if (chip_id != BMM150_CHIP_ID_VALUE)
0263 BA3230    1292            cjne    r2,#0x32,L009011?
0266 8000      1293            sjmp    L009005?
0268           1294   L009011?:
0268           1295   ;        main.c:327: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
0268 8A03      1296            mov     ar3,r2
026A 7C00      1297            mov     r4,#0x00
026C C003      1298            push    ar3
026E C004      1299            push    ar4
0270 74B0      1300            mov     a,#__str_0
0272 C0E0      1301            push    acc
0274 74D8      1302            mov     a,#(__str_0 >> 8)
0276 C0E0      1303            push    acc
0278 7480      1304            mov     a,#0x80
027A C0E0      1305            push    acc
027C 120000    1306            lcall   _printf
027F E581      1307            mov     a,sp
0281 24FB      1308            add     a,#0xfb
0283 F581      1309            mov     sp,a
0285           1310   ;        main.c:328: while (1) {
0285           1311   L009002?:
0285           1312   ;        main.c:329: printf("Press restart to check again!\r");
0285 74B0      1313            mov     a,#__str_1
0287 C0E0      1314            push    acc
0289 74D9      1315            mov     a,#(__str_1 >> 8)
028B C0E0      1316            push    acc
028D 7480      1317            mov     a,#0x80
028F C0E0      1318            push    acc
0291 120000    1319            lcall   _printf
0294 1581      1320            dec     sp
0296 1581      1321            dec     sp
0298 1581      1322            dec     sp
029A 8000      1323            sjmp    L009002?
029C           1324   L009005?:
029C           1325   ;        main.c:333: printf("DONE! Chip ID = 0x%02X\r\n", chip_id);
029C 7B00      1326            mov     r3,#0x00
029E C002      1327            push    ar2
02A0 C003      1328            push    ar3
02A2 C002      1329            push    ar2
02A4 C003      1330            push    ar3
02A6 74F0      1331            mov     a,#__str_2
02A8 C0E0      1332            push    acc
02AA 74D9      1333            mov     a,#(__str_2 >> 8)
02AC C0E0      1334            push    acc
02AE 7480      1335            mov     a,#0x80
02B0 C0E0      1336            push    acc
02B2 120000    1337            lcall   _printf
02B5 E581      1338            mov     a,sp
02B7 24FB      1339            add     a,#0xfb
02B9 F581      1340            mov     sp,a
02BB           1341   ;        main.c:337: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
02BB 759000    1342            mov     _SPI_write_PARM_2,#0x00
02BE 75824C    1343            mov     dpl,#0x4C
02C1 120000    1344            lcall   _SPI_write
02C4           1345   ;        main.c:340: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
02C4 75907F    1346            mov     _SPI_write_PARM_2,#0x7F
02C7 758251    1347            mov     dpl,#0x51
02CA 120000    1348            lcall   _SPI_write
02CD           1349   ;        main.c:341: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
02CD 75900E    1350            mov     _SPI_write_PARM_2,#0x0E
02D0 758252    1351            mov     dpl,#0x52
02D3 120000    1352            lcall   _SPI_write
02D6           1353   ;        main.c:343: BMM150_Read_Trim_Registers();
02D6 120000    1354            lcall   _BMM150_Read_Trim_Registers
02D9           1355   ;        main.c:345: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
02D9 7430      1356            mov     a,#__str_3
02DB C0E0      1357            push    acc
02DD 74DA      1358            mov     a,#(__str_3 >> 8)
02DF C0E0      1359            push    acc
02E1 7480      1360            mov     a,#0x80
02E3 C0E0      1361            push    acc
02E5 120000    1362            lcall   _printf
02E8 E581      1363            mov     a,sp
02EA 24FB      1364            add     a,#0xfb
02EC F581      1365            mov     sp,a
02EE           1366   ;        main.c:346: return; 
02EE 22        1367            ret
02EF           1368   ;------------------------------------------------------------
02EF           1369   ;Allocation info for local variables in function 'BMM150_compensate_x'
02EF           1370   ;------------------------------------------------------------
02EF           1371   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
02EF           1372   ;mag_data_x                Allocated to registers r2 r3 r4 
02EF           1373   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
02EF           1374   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_107'
02EF           1375   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_107'
02EF           1376   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_107'
02EF           1377   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_107'
02EF           1378   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_107'
02EF           1379   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_107'
02EF           1380   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_107'
02EF           1381   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_107'
02EF           1382   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_107'
02EF           1383   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_107'
02EF           1384   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_107'
02EF           1385   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_107'
02EF           1386   ;------------------------------------------------------------
02EF           1387   ;        main.c:349: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
02EF           1388   ;        -----------------------------------------
02EF           1389   ;         function BMM150_compensate_x
02EF           1390   ;        -----------------------------------------
02EF           1391   _BMM150_compensate_x:
02EF           1392   ;        main.c:367: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
02EF ACF0      1393            mov     r4,b
02F1 120000    1394            lcall   __gptrget
02F4 FA        1395            mov     r2,a
02F5 A3        1396            inc     dptr
02F6 120000    1397            lcall   __gptrget
02F9 FB        1398            mov     r3,a
02FA BA00F0    1399            cjne    r2,#0x00,L010019?
02FD BBF0F0    1400            cjne    r3,#0xF0,L010019?
0300 020000    1401            ljmp    L010011?
0303           1402   L010019?:
0303           1403   ;        main.c:368: if (*data_rhall != 0)
0303 AC40      1404            mov     r4,_BMM150_compensate_x_PARM_2
0305 AD41      1405            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
0307 AE42      1406            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
0309 8C82      1407            mov     dpl,r4
030B 8D83      1408            mov     dph,r5
030D 8EF0      1409            mov     b,r6
030F 120000    1410            lcall   __gptrget
0312 FC        1411            mov     r4,a
0313 A3        1412            inc     dptr
0314 120000    1413            lcall   __gptrget
0317 FD        1414            mov     r5,a
0318 4C        1415            orl     a,r4
0319 6000      1416            jz      L010005?
031B           1417   ;        main.c:371: process_comp_x0 = *data_rhall;
031B 90CB90    1418            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
031E EC        1419            mov     a,r4
031F F0        1420            movx    @dptr,a
0320 A3        1421            inc     dptr
0321 ED        1422            mov     a,r5
0322 F0        1423            movx    @dptr,a
0323 8000      1424            sjmp    L010006?
0325           1425   L010005?:
0325           1426   ;        main.c:373: else if (dig_xyz1 != 0)
0325 905040    1427            mov     dptr,#_dig_xyz1
0328 E0        1428            movx    a,@dptr
0329 FC        1429            mov     r4,a
032A A3        1430            inc     dptr
032B E0        1431            movx    a,@dptr
032C FD        1432            mov     r5,a
032D 4C        1433            orl     a,r4
032E 6000      1434            jz      L010002?
0330           1435   ;        main.c:375: process_comp_x0 = dig_xyz1;
0330 90CB90    1436            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
0333 EC        1437            mov     a,r4
0334 F0        1438            movx    @dptr,a
0335 A3        1439            inc     dptr
0336 ED        1440            mov     a,r5
0337 F0        1441            movx    @dptr,a
0338 8000      1442            sjmp    L010006?
033A           1443   L010002?:
033A           1444   ;        main.c:379: process_comp_x0 = 0;
033A 90CB90    1445            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
033D E4        1446            clr     a
033E F0        1447            movx    @dptr,a
033F A3        1448            inc     dptr
0340 F0        1449            movx    @dptr,a
0341           1450   L010006?:
0341           1451   ;        main.c:381: if (process_comp_x0 != 0)
0341 90CB90    1452            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_107
0344 E0        1453            movx    a,@dptr
0345 FC        1454            mov     r4,a
0346 A3        1455            inc     dptr
0347 E0        1456            movx    a,@dptr
0348 FD        1457            mov     r5,a
0349 4C        1458            orl     a,r4
034A 7000      1459            jnz     L010022?
034C 020000    1460            ljmp    L010008?
034F           1461   L010022?:
034F           1462   ;        main.c:384: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
034F 905040    1463            mov     dptr,#_dig_xyz1
0352 E0        1464            movx    a,@dptr
0353 FE        1465            mov     r6,a
0354 A3        1466            inc     dptr
0355 E0        1467            movx    a,@dptr
0356 FF        1468            mov     r7,a
0357 E4        1469            clr     a
0358 F8        1470            mov     r0,a
0359 EF        1471            mov     a,r7
035A C8        1472            xch     a,r0
035B 5403      1473            anl     a,#0x03
035D A2E0      1474            mov     c,acc.0
035F C8        1475            xch     a,r0
0360 13        1476            rrc     a
0361 C8        1477            xch     a,r0
0362 13        1478            rrc     a
0363 A2E0      1479            mov     c,acc.0
0365 C8        1480            xch     a,r0
0366 13        1481            rrc     a
0367 C8        1482            xch     a,r0
0368 13        1483            rrc     a
0369 C8        1484            xch     a,r0
036A F9        1485            mov     r1,a
036B EE        1486            mov     a,r6
036C 03        1487            rr      a
036D 03        1488            rr      a
036E 54C0      1489            anl     a,#0xc0
0370 FF        1490            mov     r7,a
0371 EE        1491            mov     a,r6
0372 03        1492            rr      a
0373 03        1493            rr      a
0374 543F      1494            anl     a,#0x3f
0376 48        1495            orl     a,r0
0377 F8        1496            mov     r0,a
0378 7E00      1497            mov     r6,#0x00
037A           1498   ;        main.c:385: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
037A 8C00      1499            mov     __divslong_PARM_2,r4
037C 8D01      1500            mov     (__divslong_PARM_2 + 1),r5
037E 750200    1501            mov     (__divslong_PARM_2 + 2),#0x00
0381 750300    1502            mov     (__divslong_PARM_2 + 3),#0x00
0384 8E82      1503            mov     dpl,r6
0386 8F83      1504            mov     dph,r7
0388 88F0      1505            mov     b,r0
038A E9        1506            mov     a,r1
038B C002      1507            push    ar2
038D C003      1508            push    ar3
038F 120000    1509            lcall   __divslong
0392 AC82      1510            mov     r4,dpl
0394 E583      1511            mov     a,dph
0396 24C0      1512            add     a,#0xc0
0398 FD        1513            mov     r5,a
0399           1514   ;        main.c:387: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
0399 8C06      1515            mov     ar6,r4
039B 8D07      1516            mov     ar7,r5
039D 8EA0      1517            mov     _BMM150_compensate_x_sloc0_1_0,r6
039F EF        1518            mov     a,r7
03A0 F5A1      1519            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
03A2 33        1520            rlc     a
03A3 95E0      1521            subb    a,acc
03A5 F5A2      1522            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
03A7 F5A3      1523            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03A9 8C06      1524            mov     ar6,r4
03AB 8D07      1525            mov     ar7,r5
03AD 8E00      1526            mov     __mullong_PARM_2,r6
03AF EF        1527            mov     a,r7
03B0 F501      1528            mov     (__mullong_PARM_2 + 1),a
03B2 33        1529            rlc     a
03B3 95E0      1530            subb    a,acc
03B5 F502      1531            mov     (__mullong_PARM_2 + 2),a
03B7 F503      1532            mov     (__mullong_PARM_2 + 3),a
03B9           1533   ;        main.c:388: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
03B9 85A082    1534            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03BC 85A183    1535            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03BF 85A2F0    1536            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03C2 E5A3      1537            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03C4 C004      1538            push    ar4
03C6 C005      1539            push    ar5
03C8 120000    1540            lcall   __mullong
03CB 8582A0    1541            mov     _BMM150_compensate_x_sloc0_1_0,dpl
03CE 8583A1    1542            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
03D1 85F0A2    1543            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
03D4 F5A3      1544            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
03D6 905080    1545            mov     dptr,#_dig_xy2
03D9 E0        1546            movx    a,@dptr
03DA FE        1547            mov     r6,a
03DB 33        1548            rlc     a
03DC 95E0      1549            subb    a,acc
03DE FF        1550            mov     r7,a
03DF F8        1551            mov     r0,a
03E0 F9        1552            mov     r1,a
03E1 750080    1553            mov     __divslong_PARM_2,#0x80
03E4 E4        1554            clr     a
03E5 F501      1555            mov     (__divslong_PARM_2 + 1),a
03E7 F502      1556            mov     (__divslong_PARM_2 + 2),a
03E9 F503      1557            mov     (__divslong_PARM_2 + 3),a
03EB 85A082    1558            mov     dpl,_BMM150_compensate_x_sloc0_1_0
03EE 85A183    1559            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
03F1 85A2F0    1560            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
03F4 E5A3      1561            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
03F6 C006      1562            push    ar6
03F8 C007      1563            push    ar7
03FA C000      1564            push    ar0
03FC C001      1565            push    ar1
03FE 120000    1566            lcall   __divslong
0401 858200    1567            mov     __mullong_PARM_2,dpl
0404 858301    1568            mov     (__mullong_PARM_2 + 1),dph
0407 85F002    1569            mov     (__mullong_PARM_2 + 2),b
040A F503      1570            mov     (__mullong_PARM_2 + 3),a
040C D001      1571            pop     ar1
040E D000      1572            pop     ar0
0410 D007      1573            pop     ar7
0412 D006      1574            pop     ar6
0414           1575   ;        main.c:389: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
0414 8E82      1576            mov     dpl,r6
0416 8F83      1577            mov     dph,r7
0418 88F0      1578            mov     b,r0
041A E9        1579            mov     a,r1
041B 120000    1580            lcall   __mullong
041E 8582A0    1581            mov     _BMM150_compensate_x_sloc0_1_0,dpl
0421 8583A1    1582            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
0424 85F0A2    1583            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
0427 F5A3      1584            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
0429 D005      1585            pop     ar5
042B D004      1586            pop     ar4
042D 9050C0    1587            mov     dptr,#_dig_xy1
0430 E0        1588            movx    a,@dptr
0431 FE        1589            mov     r6,a
0432 E4        1590            clr     a
0433 5401      1591            anl     a,#0x01
0435 A2E0      1592            mov     c,acc.0
0437 CE        1593            xch     a,r6
0438 13        1594            rrc     a
0439 CE        1595            xch     a,r6
043A 13        1596            rrc     a
043B CE        1597            xch     a,r6
043C 8E00      1598            mov     __mullong_PARM_2,r6
043E F501      1599            mov     (__mullong_PARM_2 + 1),a
0440 33        1600            rlc     a
0441 95E0      1601            subb    a,acc
0443 F502      1602            mov     (__mullong_PARM_2 + 2),a
0445 F503      1603            mov     (__mullong_PARM_2 + 3),a
0447           1604   ;        main.c:390: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
0447 ED        1605            mov     a,r5
0448 33        1606            rlc     a
0449 95E0      1607            subb    a,acc
044B FE        1608            mov     r6,a
044C           1609   ;        main.c:391: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
044C 8C82      1610            mov     dpl,r4
044E 8D83      1611            mov     dph,r5
0450 8EF0      1612            mov     b,r6
0452 120000    1613            lcall   __mullong
0455 AC82      1614            mov     r4,dpl
0457 AD83      1615            mov     r5,dph
0459 AEF0      1616            mov     r6,b
045B FF        1617            mov     r7,a
045C EC        1618            mov     a,r4
045D 25A0      1619            add     a,_BMM150_compensate_x_sloc0_1_0
045F FC        1620            mov     r4,a
0460 ED        1621            mov     a,r5
0461 35A1      1622            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
0463 FD        1623            mov     r5,a
0464 EE        1624            mov     a,r6
0465 35A2      1625            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
0467 FE        1626            mov     r6,a
0468 EF        1627            mov     a,r7
0469 35A3      1628            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
046B FF        1629            mov     r7,a
046C 750000    1630            mov     __divslong_PARM_2,#0x00
046F 750102    1631            mov     (__divslong_PARM_2 + 1),#0x02
0472 750200    1632            mov     (__divslong_PARM_2 + 2),#0x00
0475 750300    1633            mov     (__divslong_PARM_2 + 3),#0x00
0478 8C82      1634            mov     dpl,r4
047A 8D83      1635            mov     dph,r5
047C 8EF0      1636            mov     b,r6
047E EF        1637            mov     a,r7
047F 120000    1638            lcall   __divslong
0482 AC82      1639            mov     r4,dpl
0484 AD83      1640            mov     r5,dph
0486 AEF0      1641            mov     r6,b
0488 FF        1642            mov     r7,a
0489 7410      1643            mov     a,#0x10
048B 2E        1644            add     a,r6
048C FE        1645            mov     r6,a
048D E4        1646            clr     a
048E 3F        1647            addc    a,r7
048F FF        1648            mov     r7,a
0490           1649   ;        main.c:392: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
0490 905280    1650            mov     dptr,#_dig_x2
0493 E0        1651            movx    a,@dptr
0494 F8        1652            mov     r0,a
0495 33        1653            rlc     a
0496 95E0      1654            subb    a,acc
0498 F9        1655            mov     r1,a
0499 74A0      1656            mov     a,#0xA0
049B 28        1657            add     a,r0
049C F8        1658            mov     r0,a
049D E4        1659            clr     a
049E 39        1660            addc    a,r1
049F 8800      1661            mov     __mullong_PARM_2,r0
04A1 F501      1662            mov     (__mullong_PARM_2 + 1),a
04A3 33        1663            rlc     a
04A4 95E0      1664            subb    a,acc
04A6 F502      1665            mov     (__mullong_PARM_2 + 2),a
04A8 F503      1666            mov     (__mullong_PARM_2 + 3),a
04AA           1667   ;        main.c:393: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
04AA 8C82      1668            mov     dpl,r4
04AC 8D83      1669            mov     dph,r5
04AE 8EF0      1670            mov     b,r6
04B0 EF        1671            mov     a,r7
04B1 120000    1672            lcall   __mullong
04B4           1673   ;        main.c:394: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
04B4 750000    1674            mov     __divslong_PARM_2,#0x00
04B7 750110    1675            mov     (__divslong_PARM_2 + 1),#0x10
04BA 750200    1676            mov     (__divslong_PARM_2 + 2),#0x00
04BD 750300    1677            mov     (__divslong_PARM_2 + 3),#0x00
04C0 120000    1678            lcall   __divslong
04C3 858200    1679            mov     __mullong_PARM_2,dpl
04C6 858301    1680            mov     (__mullong_PARM_2 + 1),dph
04C9 85F002    1681            mov     (__mullong_PARM_2 + 2),b
04CC F503      1682            mov     (__mullong_PARM_2 + 3),a
04CE D003      1683            pop     ar3
04D0 D002      1684            pop     ar2
04D2 EB        1685            mov     a,r3
04D3 33        1686            rlc     a
04D4 95E0      1687            subb    a,acc
04D6 FC        1688            mov     r4,a
04D7           1689   ;        main.c:395: retval = ((int16_t)(process_comp_x10 / 8192));
04D7 8A82      1690            mov     dpl,r2
04D9 8B83      1691            mov     dph,r3
04DB 8CF0      1692            mov     b,r4
04DD 120000    1693            lcall   __mullong
04E0 750000    1694            mov     __divslong_PARM_2,#0x00
04E3 750120    1695            mov     (__divslong_PARM_2 + 1),#0x20
04E6 750200    1696            mov     (__divslong_PARM_2 + 2),#0x00
04E9 750300    1697            mov     (__divslong_PARM_2 + 3),#0x00
04EC 120000    1698            lcall   __divslong
04EF AA82      1699            mov     r2,dpl
04F1 AB83      1700            mov     r3,dph
04F3           1701   ;        main.c:396: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
04F3 9052C0    1702            mov     dptr,#_dig_x1
04F6 E0        1703            movx    a,@dptr
04F7 FC        1704            mov     r4,a
04F8 33        1705            rlc     a
04F9 95E0      1706            subb    a,acc
04FB C4        1707            swap    a
04FC 03        1708            rr      a
04FD 54F8      1709            anl     a,#0xf8
04FF CC        1710            xch     a,r4
0500 C4        1711            swap    a
0501 03        1712            rr      a
0502 CC        1713            xch     a,r4
0503 6C        1714            xrl     a,r4
0504 CC        1715            xch     a,r4
0505 54F8      1716            anl     a,#0xf8
0507 CC        1717            xch     a,r4
0508 6C        1718            xrl     a,r4
0509 FD        1719            mov     r5,a
050A EC        1720            mov     a,r4
050B 2A        1721            add     a,r2
050C F582      1722            mov     dpl,a
050E ED        1723            mov     a,r5
050F 3B        1724            addc    a,r3
0510 F583      1725            mov     dph,a
0512 750010    1726            mov     __divsint_PARM_2,#0x10
0515 E4        1727            clr     a
0516 F501      1728            mov     (__divsint_PARM_2 + 1),a
0518 120000    1729            lcall   __divsint
051B E582      1730            mov     a,dpl
051D 8583F0    1731            mov     b,dph
0520 90CB30    1732            mov     dptr,#_BMM150_compensate_x_retval_1_107
0523 F0        1733            movx    @dptr,a
0524 A3        1734            inc     dptr
0525 E5F0      1735            mov     a,b
0527 F0        1736            movx    @dptr,a
0528 8000      1737            sjmp    L010012?
052A           1738   L010008?:
052A           1739   ;        main.c:399: retval = BMM150_OVERFLOW_OUTPUT; 
052A 90CB30    1740            mov     dptr,#_BMM150_compensate_x_retval_1_107
052D E4        1741            clr     a
052E F0        1742            movx    @dptr,a
052F A3        1743            inc     dptr
0530 7480      1744            mov     a,#0x80
0532 F0        1745            movx    @dptr,a
0533 8000      1746            sjmp    L010012?
0535           1747   L010011?:
0535           1748   ;        main.c:403: retval = BMM150_OVERFLOW_OUTPUT; 
0535 90CB30    1749            mov     dptr,#_BMM150_compensate_x_retval_1_107
0538 E4        1750            clr     a
0539 F0        1751            movx    @dptr,a
053A A3        1752            inc     dptr
053B 7480      1753            mov     a,#0x80
053D F0        1754            movx    @dptr,a
053E           1755   L010012?:
053E           1756   ;        main.c:405: return retval; 
053E 90CB30    1757            mov     dptr,#_BMM150_compensate_x_retval_1_107
0541 E0        1758            movx    a,@dptr
0542 FA        1759            mov     r2,a
0543 A3        1760            inc     dptr
0544 E0        1761            movx    a,@dptr
0545 8A82      1762            mov     dpl,r2
0547 F583      1763            mov     dph,a
0549 22        1764            ret
054A           1765   ;------------------------------------------------------------
054A           1766   ;Allocation info for local variables in function 'BMM150_compensate_y'
054A           1767   ;------------------------------------------------------------
054A           1768   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
054A           1769   ;mag_data_y                Allocated to registers r2 r3 r4 
054A           1770   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
054A           1771   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_116'
054A           1772   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_116'
054A           1773   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_116'
054A           1774   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_116'
054A           1775   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_116'
054A           1776   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_116'
054A           1777   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_116'
054A           1778   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_116'
054A           1779   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_116'
054A           1780   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_116'
054A           1781   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_116'
054A           1782   ;------------------------------------------------------------
054A           1783   ;        main.c:408: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
054A           1784   ;        -----------------------------------------
054A           1785   ;         function BMM150_compensate_y
054A           1786   ;        -----------------------------------------
054A           1787   _BMM150_compensate_y:
054A           1788   ;        main.c:426: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
054A ACF0      1789            mov     r4,b
054C 120000    1790            lcall   __gptrget
054F FA        1791            mov     r2,a
0550 A3        1792            inc     dptr
0551 120000    1793            lcall   __gptrget
0554 FB        1794            mov     r3,a
0555 BA00A0    1795            cjne    r2,#0x00,L011019?
0558 BBF0A0    1796            cjne    r3,#0xF0,L011019?
055B 020000    1797            ljmp    L011011?
055E           1798   L011019?:
055E           1799   ;        main.c:428: if (*data_rhall != 0)
055E ACF0      1800            mov     r4,_BMM150_compensate_y_PARM_2
0560 ADF1      1801            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
0562 AEF2      1802            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
0564 8C82      1803            mov     dpl,r4
0566 8D83      1804            mov     dph,r5
0568 8EF0      1805            mov     b,r6
056A 120000    1806            lcall   __gptrget
056D FC        1807            mov     r4,a
056E A3        1808            inc     dptr
056F 120000    1809            lcall   __gptrget
0572 FD        1810            mov     r5,a
0573 4C        1811            orl     a,r4
0574 6000      1812            jz      L011005?
0576           1813   ;        main.c:431: process_comp_y0 = *data_rhall;
0576 90CC50    1814            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
0579 EC        1815            mov     a,r4
057A F0        1816            movx    @dptr,a
057B A3        1817            inc     dptr
057C ED        1818            mov     a,r5
057D F0        1819            movx    @dptr,a
057E 8000      1820            sjmp    L011006?
0580           1821   L011005?:
0580           1822   ;        main.c:433: else if (dig_xyz1 != 0)
0580 905040    1823            mov     dptr,#_dig_xyz1
0583 E0        1824            movx    a,@dptr
0584 FC        1825            mov     r4,a
0585 A3        1826            inc     dptr
0586 E0        1827            movx    a,@dptr
0587 FD        1828            mov     r5,a
0588 4C        1829            orl     a,r4
0589 6000      1830            jz      L011002?
058B           1831   ;        main.c:435: process_comp_y0 = dig_xyz1;
058B 90CC50    1832            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
058E EC        1833            mov     a,r4
058F F0        1834            movx    @dptr,a
0590 A3        1835            inc     dptr
0591 ED        1836            mov     a,r5
0592 F0        1837            movx    @dptr,a
0593 8000      1838            sjmp    L011006?
0595           1839   L011002?:
0595           1840   ;        main.c:439: process_comp_y0 = 0;
0595 90CC50    1841            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
0598 E4        1842            clr     a
0599 F0        1843            movx    @dptr,a
059A A3        1844            inc     dptr
059B F0        1845            movx    @dptr,a
059C           1846   L011006?:
059C           1847   ;        main.c:442: if (process_comp_y0 != 0)
059C 90CC50    1848            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_116
059F E0        1849            movx    a,@dptr
05A0 FC        1850            mov     r4,a
05A1 A3        1851            inc     dptr
05A2 E0        1852            movx    a,@dptr
05A3 FD        1853            mov     r5,a
05A4 4C        1854            orl     a,r4
05A5 7000      1855            jnz     L011022?
05A7 020000    1856            ljmp    L011008?
05AA           1857   L011022?:
05AA           1858   ;        main.c:445: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
05AA 905040    1859            mov     dptr,#_dig_xyz1
05AD E0        1860            movx    a,@dptr
05AE FE        1861            mov     r6,a
05AF A3        1862            inc     dptr
05B0 E0        1863            movx    a,@dptr
05B1 FF        1864            mov     r7,a
05B2 E4        1865            clr     a
05B3 F8        1866            mov     r0,a
05B4 EF        1867            mov     a,r7
05B5 C8        1868            xch     a,r0
05B6 5403      1869            anl     a,#0x03
05B8 A2E0      1870            mov     c,acc.0
05BA C8        1871            xch     a,r0
05BB 13        1872            rrc     a
05BC C8        1873            xch     a,r0
05BD 13        1874            rrc     a
05BE A2E0      1875            mov     c,acc.0
05C0 C8        1876            xch     a,r0
05C1 13        1877            rrc     a
05C2 C8        1878            xch     a,r0
05C3 13        1879            rrc     a
05C4 C8        1880            xch     a,r0
05C5 F9        1881            mov     r1,a
05C6 EE        1882            mov     a,r6
05C7 03        1883            rr      a
05C8 03        1884            rr      a
05C9 54C0      1885            anl     a,#0xc0
05CB FF        1886            mov     r7,a
05CC EE        1887            mov     a,r6
05CD 03        1888            rr      a
05CE 03        1889            rr      a
05CF 543F      1890            anl     a,#0x3f
05D1 48        1891            orl     a,r0
05D2 F8        1892            mov     r0,a
05D3 7E00      1893            mov     r6,#0x00
05D5 8C00      1894            mov     __divslong_PARM_2,r4
05D7 8D01      1895            mov     (__divslong_PARM_2 + 1),r5
05D9 750200    1896            mov     (__divslong_PARM_2 + 2),#0x00
05DC 750300    1897            mov     (__divslong_PARM_2 + 3),#0x00
05DF           1898   ;        main.c:446: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
05DF 8E82      1899            mov     dpl,r6
05E1 8F83      1900            mov     dph,r7
05E3 88F0      1901            mov     b,r0
05E5 E9        1902            mov     a,r1
05E6 C002      1903            push    ar2
05E8 C003      1904            push    ar3
05EA 120000    1905            lcall   __divslong
05ED AC82      1906            mov     r4,dpl
05EF E583      1907            mov     a,dph
05F1 24C0      1908            add     a,#0xc0
05F3 FD        1909            mov     r5,a
05F4           1910   ;        main.c:448: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
05F4 8C06      1911            mov     ar6,r4
05F6 8D07      1912            mov     ar7,r5
05F8 8EF0      1913            mov     _BMM150_compensate_y_sloc0_1_0,r6
05FA EF        1914            mov     a,r7
05FB F5F1      1915            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
05FD 33        1916            rlc     a
05FE 95E0      1917            subb    a,acc
0600 F5F2      1918            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
0602 F5F3      1919            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0604 8C06      1920            mov     ar6,r4
0606 8D07      1921            mov     ar7,r5
0608 8E00      1922            mov     __mullong_PARM_2,r6
060A EF        1923            mov     a,r7
060B F501      1924            mov     (__mullong_PARM_2 + 1),a
060D 33        1925            rlc     a
060E 95E0      1926            subb    a,acc
0610 F502      1927            mov     (__mullong_PARM_2 + 2),a
0612 F503      1928            mov     (__mullong_PARM_2 + 3),a
0614           1929   ;        main.c:449: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
0614 85F082    1930            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0617 85F183    1931            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
061A 85F2F0    1932            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
061D E5F3      1933            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
061F C004      1934            push    ar4
0621 C005      1935            push    ar5
0623 120000    1936            lcall   __mullong
0626 8582F0    1937            mov     _BMM150_compensate_y_sloc0_1_0,dpl
0629 8583F1    1938            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
062C 85F0F2    1939            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
062F F5F3      1940            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0631 905080    1941            mov     dptr,#_dig_xy2
0634 E0        1942            movx    a,@dptr
0635 FE        1943            mov     r6,a
0636 33        1944            rlc     a
0637 95E0      1945            subb    a,acc
0639 FF        1946            mov     r7,a
063A F8        1947            mov     r0,a
063B F9        1948            mov     r1,a
063C 750080    1949            mov     __divslong_PARM_2,#0x80
063F E4        1950            clr     a
0640 F501      1951            mov     (__divslong_PARM_2 + 1),a
0642 F502      1952            mov     (__divslong_PARM_2 + 2),a
0644 F503      1953            mov     (__divslong_PARM_2 + 3),a
0646 85F082    1954            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0649 85F183    1955            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
064C 85F2F0    1956            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
064F E5F3      1957            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
0651 C006      1958            push    ar6
0653 C007      1959            push    ar7
0655 C000      1960            push    ar0
0657 C001      1961            push    ar1
0659 120000    1962            lcall   __divslong
065C 858200    1963            mov     __mullong_PARM_2,dpl
065F 858301    1964            mov     (__mullong_PARM_2 + 1),dph
0662 85F002    1965            mov     (__mullong_PARM_2 + 2),b
0665 F503      1966            mov     (__mullong_PARM_2 + 3),a
0667 D001      1967            pop     ar1
0669 D000      1968            pop     ar0
066B D007      1969            pop     ar7
066D D006      1970            pop     ar6
066F           1971   ;        main.c:450: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
066F 8E82      1972            mov     dpl,r6
0671 8F83      1973            mov     dph,r7
0673 88F0      1974            mov     b,r0
0675 E9        1975            mov     a,r1
0676 120000    1976            lcall   __mullong
0679 8582F0    1977            mov     _BMM150_compensate_y_sloc0_1_0,dpl
067C 8583F1    1978            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
067F 85F0F2    1979            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
0682 F5F3      1980            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0684 D005      1981            pop     ar5
0686 D004      1982            pop     ar4
0688 9050C0    1983            mov     dptr,#_dig_xy1
068B E0        1984            movx    a,@dptr
068C FE        1985            mov     r6,a
068D E4        1986            clr     a
068E 5401      1987            anl     a,#0x01
0690 A2E0      1988            mov     c,acc.0
0692 CE        1989            xch     a,r6
0693 13        1990            rrc     a
0694 CE        1991            xch     a,r6
0695 13        1992            rrc     a
0696 CE        1993            xch     a,r6
0697 8E00      1994            mov     __mullong_PARM_2,r6
0699 F501      1995            mov     (__mullong_PARM_2 + 1),a
069B 33        1996            rlc     a
069C 95E0      1997            subb    a,acc
069E F502      1998            mov     (__mullong_PARM_2 + 2),a
06A0 F503      1999            mov     (__mullong_PARM_2 + 3),a
06A2           2000   ;        main.c:451: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
06A2 ED        2001            mov     a,r5
06A3 33        2002            rlc     a
06A4 95E0      2003            subb    a,acc
06A6 FE        2004            mov     r6,a
06A7 8C82      2005            mov     dpl,r4
06A9 8D83      2006            mov     dph,r5
06AB 8EF0      2007            mov     b,r6
06AD 120000    2008            lcall   __mullong
06B0 AC82      2009            mov     r4,dpl
06B2 AD83      2010            mov     r5,dph
06B4 AEF0      2011            mov     r6,b
06B6 FF        2012            mov     r7,a
06B7 EC        2013            mov     a,r4
06B8 25F0      2014            add     a,_BMM150_compensate_y_sloc0_1_0
06BA FC        2015            mov     r4,a
06BB ED        2016            mov     a,r5
06BC 35F1      2017            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
06BE FD        2018            mov     r5,a
06BF EE        2019            mov     a,r6
06C0 35F2      2020            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
06C2 FE        2021            mov     r6,a
06C3 EF        2022            mov     a,r7
06C4 35F3      2023            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
06C6 FF        2024            mov     r7,a
06C7 750000    2025            mov     __divslong_PARM_2,#0x00
06CA 750102    2026            mov     (__divslong_PARM_2 + 1),#0x02
06CD 750200    2027            mov     (__divslong_PARM_2 + 2),#0x00
06D0 750300    2028            mov     (__divslong_PARM_2 + 3),#0x00
06D3           2029   ;        main.c:452: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
06D3 8C82      2030            mov     dpl,r4
06D5 8D83      2031            mov     dph,r5
06D7 8EF0      2032            mov     b,r6
06D9 EF        2033            mov     a,r7
06DA 120000    2034            lcall   __divslong
06DD AC82      2035            mov     r4,dpl
06DF AD83      2036            mov     r5,dph
06E1 AEF0      2037            mov     r6,b
06E3 FF        2038            mov     r7,a
06E4 905200    2039            mov     dptr,#_dig_y2
06E7 E0        2040            movx    a,@dptr
06E8 F8        2041            mov     r0,a
06E9 33        2042            rlc     a
06EA 95E0      2043            subb    a,acc
06EC F9        2044            mov     r1,a
06ED 74A0      2045            mov     a,#0xA0
06EF 28        2046            add     a,r0
06F0 F8        2047            mov     r0,a
06F1 E4        2048            clr     a
06F2 39        2049            addc    a,r1
06F3 8800      2050            mov     __mullong_PARM_2,r0
06F5 F501      2051            mov     (__mullong_PARM_2 + 1),a
06F7 33        2052            rlc     a
06F8 95E0      2053            subb    a,acc
06FA F502      2054            mov     (__mullong_PARM_2 + 2),a
06FC F503      2055            mov     (__mullong_PARM_2 + 3),a
06FE           2056   ;        main.c:453: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
06FE 7410      2057            mov     a,#0x10
0700 2E        2058            add     a,r6
0701 FE        2059            mov     r6,a
0702 E4        2060            clr     a
0703 3F        2061            addc    a,r7
0704 8C82      2062            mov     dpl,r4
0706 8D83      2063            mov     dph,r5
0708 8EF0      2064            mov     b,r6
070A 120000    2065            lcall   __mullong
070D           2066   ;        main.c:454: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
070D 750000    2067            mov     __divslong_PARM_2,#0x00
0710 750110    2068            mov     (__divslong_PARM_2 + 1),#0x10
0713 750200    2069            mov     (__divslong_PARM_2 + 2),#0x00
0716 750300    2070            mov     (__divslong_PARM_2 + 3),#0x00
0719 120000    2071            lcall   __divslong
071C 858200    2072            mov     __mullong_PARM_2,dpl
071F 858301    2073            mov     (__mullong_PARM_2 + 1),dph
0722 85F002    2074            mov     (__mullong_PARM_2 + 2),b
0725 F503      2075            mov     (__mullong_PARM_2 + 3),a
0727 D003      2076            pop     ar3
0729 D002      2077            pop     ar2
072B EB        2078            mov     a,r3
072C 33        2079            rlc     a
072D 95E0      2080            subb    a,acc
072F FC        2081            mov     r4,a
0730           2082   ;        main.c:455: retval = (int16_t)(process_comp_y9 / 8192);
0730 8A82      2083            mov     dpl,r2
0732 8B83      2084            mov     dph,r3
0734 8CF0      2085            mov     b,r4
0736 120000    2086            lcall   __mullong
0739 750000    2087            mov     __divslong_PARM_2,#0x00
073C 750120    2088            mov     (__divslong_PARM_2 + 1),#0x20
073F 750200    2089            mov     (__divslong_PARM_2 + 2),#0x00
0742 750300    2090            mov     (__divslong_PARM_2 + 3),#0x00
0745 120000    2091            lcall   __divslong
0748 AA82      2092            mov     r2,dpl
074A AB83      2093            mov     r3,dph
074C           2094   ;        main.c:456: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
074C 905240    2095            mov     dptr,#_dig_y1
074F E0        2096            movx    a,@dptr
0750 FC        2097            mov     r4,a
0751 33        2098            rlc     a
0752 95E0      2099            subb    a,acc
0754 C4        2100            swap    a
0755 03        2101            rr      a
0756 54F8      2102            anl     a,#0xf8
0758 CC        2103            xch     a,r4
0759 C4        2104            swap    a
075A 03        2105            rr      a
075B CC        2106            xch     a,r4
075C 6C        2107            xrl     a,r4
075D CC        2108            xch     a,r4
075E 54F8      2109            anl     a,#0xf8
0760 CC        2110            xch     a,r4
0761 6C        2111            xrl     a,r4
0762 FD        2112            mov     r5,a
0763 EC        2113            mov     a,r4
0764 2A        2114            add     a,r2
0765 F582      2115            mov     dpl,a
0767 ED        2116            mov     a,r5
0768 3B        2117            addc    a,r3
0769 F583      2118            mov     dph,a
076B 750010    2119            mov     __divsint_PARM_2,#0x10
076E E4        2120            clr     a
076F F501      2121            mov     (__divsint_PARM_2 + 1),a
0771 120000    2122            lcall   __divsint
0774 E582      2123            mov     a,dpl
0776 8583F0    2124            mov     b,dph
0779 90CBF0    2125            mov     dptr,#_BMM150_compensate_y_retval_1_116
077C F0        2126            movx    @dptr,a
077D A3        2127            inc     dptr
077E E5F0      2128            mov     a,b
0780 F0        2129            movx    @dptr,a
0781 8000      2130            sjmp    L011012?
0783           2131   L011008?:
0783           2132   ;        main.c:460: retval = BMM150_OVERFLOW_OUTPUT;
0783 90CBF0    2133            mov     dptr,#_BMM150_compensate_y_retval_1_116
0786 E4        2134            clr     a
0787 F0        2135            movx    @dptr,a
0788 A3        2136            inc     dptr
0789 7480      2137            mov     a,#0x80
078B F0        2138            movx    @dptr,a
078C 8000      2139            sjmp    L011012?
078E           2140   L011011?:
078E           2141   ;        main.c:466: retval = BMM150_OVERFLOW_OUTPUT;
078E 90CBF0    2142            mov     dptr,#_BMM150_compensate_y_retval_1_116
0791 E4        2143            clr     a
0792 F0        2144            movx    @dptr,a
0793 A3        2145            inc     dptr
0794 7480      2146            mov     a,#0x80
0796 F0        2147            movx    @dptr,a
0797           2148   L011012?:
0797           2149   ;        main.c:469: return retval;
0797 90CBF0    2150            mov     dptr,#_BMM150_compensate_y_retval_1_116
079A E0        2151            movx    a,@dptr
079B FA        2152            mov     r2,a
079C A3        2153            inc     dptr
079D E0        2154            movx    a,@dptr
079E 8A82      2155            mov     dpl,r2
07A0 F583      2156            mov     dph,a
07A2 22        2157            ret
07A3           2158   ;------------------------------------------------------------
07A3           2159   ;Allocation info for local variables in function 'BMM150_Read_Data'
07A3           2160   ;------------------------------------------------------------
07A3           2161   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
07A3           2162   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_124'
07A3           2163   ;raw_x_lsb                 Allocated with name '_BMM150_Read_Data_raw_x_lsb_1_125'
07A3           2164   ;raw_x_msb                 Allocated with name '_BMM150_Read_Data_raw_x_msb_1_125'
07A3           2165   ;raw_y_lsb                 Allocated with name '_BMM150_Read_Data_raw_y_lsb_1_125'
07A3           2166   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_125'
07A3           2167   ;raw_rhall_lsb             Allocated with name '_BMM150_Read_Data_raw_rhall_lsb_1_125'
07A3           2168   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_125'
07A3           2169   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_125'
07A3           2170   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_125'
07A3           2171   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_125'
07A3           2172   ;msb_data                  Allocated with name '_BMM150_Read_Data_msb_data_1_125'
07A3           2173   ;------------------------------------------------------------
07A3           2174   ;        main.c:472: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y)
07A3           2175   ;        -----------------------------------------
07A3           2176   ;         function BMM150_Read_Data
07A3           2177   ;        -----------------------------------------
07A3           2178   _BMM150_Read_Data:
07A3 858240    2179            mov     _BMM150_Read_Data_mag_x_1_124,dpl
07A6 858341    2180            mov     (_BMM150_Read_Data_mag_x_1_124 + 1),dph
07A9 85F042    2181            mov     (_BMM150_Read_Data_mag_x_1_124 + 2),b
07AC           2182   ;        main.c:479: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
07AC 758242    2183            mov     dpl,#0x42
07AF 120000    2184            lcall   _SPI_read
07B2 AD82      2185            mov     r5,dpl
07B4           2186   ;        main.c:480: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
07B4 758243    2187            mov     dpl,#0x43
07B7 C005      2188            push    ar5
07B9 120000    2189            lcall   _SPI_read
07BC AE82      2190            mov     r6,dpl
07BE           2191   ;        main.c:481: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
07BE 758244    2192            mov     dpl,#0x44
07C1 C006      2193            push    ar6
07C3 120000    2194            lcall   _SPI_read
07C6 AF82      2195            mov     r7,dpl
07C8           2196   ;        main.c:482: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
07C8 758245    2197            mov     dpl,#0x45
07CB C007      2198            push    ar7
07CD 120000    2199            lcall   _SPI_read
07D0 A882      2200            mov     r0,dpl
07D2           2201   ;        main.c:485: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
07D2 758248    2202            mov     dpl,#0x48
07D5 C000      2203            push    ar0
07D7 120000    2204            lcall   _SPI_read
07DA A982      2205            mov     r1,dpl
07DC           2206   ;        main.c:486: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
07DC 758249    2207            mov     dpl,#0x49
07DF C001      2208            push    ar1
07E1 120000    2209            lcall   _SPI_read
07E4 AA82      2210            mov     r2,dpl
07E6 D001      2211            pop     ar1
07E8 D000      2212            pop     ar0
07EA D007      2213            pop     ar7
07EC D006      2214            pop     ar6
07EE D005      2215            pop     ar5
07F0           2216   ;        main.c:490: raw_x_lsb = ((raw_x_lsb & 0b_1111_1000)) >> 3;
07F0 5305F8    2217            anl     ar5,#0xF8
07F3 ED        2218            mov     a,r5
07F4 C4        2219            swap    a
07F5 23        2220            rl      a
07F6 541F      2221            anl     a,#0x1f
07F8 FD        2222            mov     r5,a
07F9           2223   ;        main.c:491: msb_data = ((int16_t)((int8_t)raw_x_msb)) << 5; 
07F9 EE        2224            mov     a,r6
07FA 33        2225            rlc     a
07FB 95E0      2226            subb    a,acc
07FD C4        2227            swap    a
07FE 23        2228            rl      a
07FF 54E0      2229            anl     a,#0xe0
0801 CE        2230            xch     a,r6
0802 C4        2231            swap    a
0803 23        2232            rl      a
0804 CE        2233            xch     a,r6
0805 6E        2234            xrl     a,r6
0806 CE        2235            xch     a,r6
0807 54E0      2236            anl     a,#0xe0
0809 CE        2237            xch     a,r6
080A 6E        2238            xrl     a,r6
080B FB        2239            mov     r3,a
080C           2240   ;        main.c:492: x_val = (int16_t)(msb_data | raw_x_lsb);
080C 7C00      2241            mov     r4,#0x00
080E 90CCA0    2242            mov     dptr,#_BMM150_Read_Data_x_val_1_125
0811 ED        2243            mov     a,r5
0812 4E        2244            orl     a,r6
0813 F0        2245            movx    @dptr,a
0814 EC        2246            mov     a,r4
0815 4B        2247            orl     a,r3
0816 A3        2248            inc     dptr
0817 F0        2249            movx    @dptr,a
0818           2250   ;        main.c:495: raw_y_lsb = ((raw_y_lsb & 0b_1111_1000)) >> 3;
0818 5307F8    2251            anl     ar7,#0xF8
081B EF        2252            mov     a,r7
081C C4        2253            swap    a
081D 23        2254            rl      a
081E 541F      2255            anl     a,#0x1f
0820 FF        2256            mov     r7,a
0821           2257   ;        main.c:496: msb_data = ((int16_t)((int8_t)raw_y_msb)) << 5; 
0821 E8        2258            mov     a,r0
0822 33        2259            rlc     a
0823 95E0      2260            subb    a,acc
0825 C4        2261            swap    a
0826 23        2262            rl      a
0827 54E0      2263            anl     a,#0xe0
0829 C8        2264            xch     a,r0
082A C4        2265            swap    a
082B 23        2266            rl      a
082C C8        2267            xch     a,r0
082D 68        2268            xrl     a,r0
082E C8        2269            xch     a,r0
082F 54E0      2270            anl     a,#0xe0
0831 C8        2271            xch     a,r0
0832 68        2272            xrl     a,r0
0833 FB        2273            mov     r3,a
0834           2274   ;        main.c:497: y_val = (int16_t)(msb_data | raw_y_lsb);
0834 7C00      2275            mov     r4,#0x00
0836 90CCF0    2276            mov     dptr,#_BMM150_Read_Data_y_val_1_125
0839 EF        2277            mov     a,r7
083A 48        2278            orl     a,r0
083B F0        2279            movx    @dptr,a
083C EC        2280            mov     a,r4
083D 4B        2281            orl     a,r3
083E A3        2282            inc     dptr
083F F0        2283            movx    @dptr,a
0840           2284   ;        main.c:505: raw_rhall_lsb = ((raw_rhall_lsb & 0xFC) >> 2);
0840 5301FC    2285            anl     ar1,#0xFC
0843 E9        2286            mov     a,r1
0844 03        2287            rr      a
0845 03        2288            rr      a
0846 543F      2289            anl     a,#0x3f
0848 F9        2290            mov     r1,a
0849           2291   ;        main.c:506: rhall_val = (uint16_t)(((uint16_t)raw_rhall_msb << 6) | raw_rhall_lsb);
0849 E4        2292            clr     a
084A 5403      2293            anl     a,#0x03
084C A2E0      2294            mov     c,acc.0
084E CA        2295            xch     a,r2
084F 13        2296            rrc     a
0850 CA        2297            xch     a,r2
0851 13        2298            rrc     a
0852 A2E0      2299            mov     c,acc.0
0854 CA        2300            xch     a,r2
0855 13        2301            rrc     a
0856 CA        2302            xch     a,r2
0857 13        2303            rrc     a
0858 CA        2304            xch     a,r2
0859 FB        2305            mov     r3,a
085A 7C00      2306            mov     r4,#0x00
085C 90CD50    2307            mov     dptr,#_BMM150_Read_Data_rhall_val_1_125
085F E9        2308            mov     a,r1
0860 4A        2309            orl     a,r2
0861 F0        2310            movx    @dptr,a
0862 EC        2311            mov     a,r4
0863 4B        2312            orl     a,r3
0864 A3        2313            inc     dptr
0865 F0        2314            movx    @dptr,a
0866           2315   ;        main.c:509: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
0866 754050    2316            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_125
0869 7541CD    2317            mov     (_BMM150_compensate_x_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_125 >> 8)
086C 754200    2318            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x00
086F 90CCA0    2319            mov     dptr,#_BMM150_Read_Data_x_val_1_125
0872 75F000    2320            mov     b,#0x00
0875 120000    2321            lcall   _BMM150_compensate_x
0878 AA82      2322            mov     r2,dpl
087A AB83      2323            mov     r3,dph
087C 854082    2324            mov     dpl,_BMM150_Read_Data_mag_x_1_124
087F 854183    2325            mov     dph,(_BMM150_Read_Data_mag_x_1_124 + 1)
0882 8542F0    2326            mov     b,(_BMM150_Read_Data_mag_x_1_124 + 2)
0885 EA        2327            mov     a,r2
0886 120000    2328            lcall   __gptrput
0889 A3        2329            inc     dptr
088A EB        2330            mov     a,r3
088B 120000    2331            lcall   __gptrput
088E           2332   ;        main.c:510: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
088E AAA0      2333            mov     r2,_BMM150_Read_Data_PARM_2
0890 ABA1      2334            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
0892 ACA2      2335            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
0894 75F050    2336            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_125
0897 75F1CD    2337            mov     (_BMM150_compensate_y_PARM_2 + 1),#(_BMM150_Read_Data_rhall_val_1_125 >> 8)
089A 75F200    2338            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x00
089D 90CCF0    2339            mov     dptr,#_BMM150_Read_Data_y_val_1_125
08A0 75F000    2340            mov     b,#0x00
08A3 C002      2341            push    ar2
08A5 C003      2342            push    ar3
08A7 C004      2343            push    ar4
08A9 120000    2344            lcall   _BMM150_compensate_y
08AC AD82      2345            mov     r5,dpl
08AE AE83      2346            mov     r6,dph
08B0 D004      2347            pop     ar4
08B2 D003      2348            pop     ar3
08B4 D002      2349            pop     ar2
08B6 8A82      2350            mov     dpl,r2
08B8 8B83      2351            mov     dph,r3
08BA 8CF0      2352            mov     b,r4
08BC ED        2353            mov     a,r5
08BD 120000    2354            lcall   __gptrput
08C0 A3        2355            inc     dptr
08C1 EE        2356            mov     a,r6
08C2 020000    2357            ljmp    __gptrput
08C5           2358   ;------------------------------------------------------------
08C5           2359   ;Allocation info for local variables in function 'UART1_Init'
08C5           2360   ;------------------------------------------------------------
08C5           2361   ;baudrate                  Allocated to registers r2 r3 r4 r5 
08C5           2362   ;------------------------------------------------------------
08C5           2363   ;        main.c:516: void UART1_Init (unsigned long baudrate)
08C5           2364   ;        -----------------------------------------
08C5           2365   ;         function UART1_Init
08C5           2366   ;        -----------------------------------------
08C5           2367   _UART1_Init:
08C5 AA82      2368            mov     r2,dpl
08C7 AB83      2369            mov     r3,dph
08C9 ACF0      2370            mov     r4,b
08CB FD        2371            mov     r5,a
08CC           2372   ;        main.c:518: SFRPAGE = 0x20;
08CC 75A720    2373            mov     _SFRPAGE,#0x20
08CF           2374   ;        main.c:519: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
08CF 75930C    2375            mov     _SMOD1,#0x0C
08D2           2376   ;        main.c:520: SCON1 = 0x10;
08D2 75C810    2377            mov     _SCON1,#0x10
08D5           2378   ;        main.c:521: SBCON1 =0x00;   // disable baud rate generator
08D5 759400    2379            mov     _SBCON1,#0x00
08D8           2380   ;        main.c:522: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
08D8 8A00      2381            mov     __divulong_PARM_2,r2
08DA 8B01      2382            mov     (__divulong_PARM_2 + 1),r3
08DC 8C02      2383            mov     (__divulong_PARM_2 + 2),r4
08DE 8D03      2384            mov     (__divulong_PARM_2 + 3),r5
08E0 90A200    2385            mov     dptr,#0xA200
08E3 75F04A    2386            mov     b,#0x4A
08E6 7404      2387            mov     a,#0x04
08E8 120000    2388            lcall   __divulong
08EB AA82      2389            mov     r2,dpl
08ED AB83      2390            mov     r3,dph
08EF ACF0      2391            mov     r4,b
08F1 FD        2392            mov     r5,a
08F2 750018    2393            mov     __divulong_PARM_2,#0x18
08F5 E4        2394            clr     a
08F6 F501      2395            mov     (__divulong_PARM_2 + 1),a
08F8 F502      2396            mov     (__divulong_PARM_2 + 2),a
08FA F503      2397            mov     (__divulong_PARM_2 + 3),a
08FC 8A82      2398            mov     dpl,r2
08FE 8B83      2399            mov     dph,r3
0900 8CF0      2400            mov     b,r4
0902 ED        2401            mov     a,r5
0903 120000    2402            lcall   __divulong
0906 AA82      2403            mov     r2,dpl
0908 AB83      2404            mov     r3,dph
090A ACF0      2405            mov     r4,b
090C FD        2406            mov     r5,a
090D E4        2407            clr     a
090E C3        2408            clr     c
090F 9A        2409            subb    a,r2
0910 FA        2410            mov     r2,a
0911 E4        2411            clr     a
0912 9B        2412            subb    a,r3
0913 FB        2413            mov     r3,a
0914 7401      2414            mov     a,#0x01
0916 9C        2415            subb    a,r4
0917 E4        2416            clr     a
0918 9D        2417            subb    a,r5
0919 8A95      2418            mov     _SBRL1,r2
091B 8B96      2419            mov     (_SBRL1 >> 8),r3
091D           2420   ;        main.c:523: TI1 = 1; // indicate ready for TX
091D D2C9      2421            setb    _TI1
091F           2422   ;        main.c:524: SBCON1 |= 0x40;   // enable baud rate generator
091F 439440    2423            orl     _SBCON1,#0x40
0922           2424   ;        main.c:525: SFRPAGE = 0x00;
0922 75A700    2425            mov     _SFRPAGE,#0x00
0925 22        2426            ret
0926           2427   ;------------------------------------------------------------
0926           2428   ;Allocation info for local variables in function 'putchar1'
0926           2429   ;------------------------------------------------------------
0926           2430   ;c                         Allocated to registers r2 
0926           2431   ;------------------------------------------------------------
0926           2432   ;        main.c:528: void putchar1 (char c) 
0926           2433   ;        -----------------------------------------
0926           2434   ;         function putchar1
0926           2435   ;        -----------------------------------------
0926           2436   _putchar1:
0926 AA82      2437            mov     r2,dpl
0928           2438   ;        main.c:530: SFRPAGE = 0x20;
0928 75A720    2439            mov     _SFRPAGE,#0x20
092B           2440   ;        main.c:531: while (!TI1);
092B           2441   L014001?:
092B           2442   ;        main.c:532: TI1=0;
092B 10C9B0    2443            jbc     _TI1,L014008?
092E 8000      2444            sjmp    L014001?
0930           2445   L014008?:
0930           2446   ;        main.c:533: SBUF1 = c;
0930 8A92      2447            mov     _SBUF1,r2
0932           2448   ;        main.c:534: SFRPAGE = 0x00;
0932 75A700    2449            mov     _SFRPAGE,#0x00
0935 22        2450            ret
0936           2451   ;------------------------------------------------------------
0936           2452   ;Allocation info for local variables in function 'sendstr1'
0936           2453   ;------------------------------------------------------------
0936           2454   ;s                         Allocated to registers r2 r3 r4 
0936           2455   ;------------------------------------------------------------
0936           2456   ;        main.c:537: void sendstr1 (char * s)
0936           2457   ;        -----------------------------------------
0936           2458   ;         function sendstr1
0936           2459   ;        -----------------------------------------
0936           2460   _sendstr1:
0936 AA82      2461            mov     r2,dpl
0938 AB83      2462            mov     r3,dph
093A ACF0      2463            mov     r4,b
093C           2464   ;        main.c:539: while(*s)
093C           2465   L015001?:
093C 8A82      2466            mov     dpl,r2
093E 8B83      2467            mov     dph,r3
0940 8CF0      2468            mov     b,r4
0942 120000    2469            lcall   __gptrget
0945 FD        2470            mov     r5,a
0946 6000      2471            jz      L015004?
0948           2472   ;        main.c:541: putchar1(*s);
0948 8D82      2473            mov     dpl,r5
094A C002      2474            push    ar2
094C C003      2475            push    ar3
094E C004      2476            push    ar4
0950 120000    2477            lcall   _putchar1
0953 D004      2478            pop     ar4
0955 D003      2479            pop     ar3
0957 D002      2480            pop     ar2
0959           2481   ;        main.c:542: s++;        
0959 0A        2482            inc     r2
095A BA00F0    2483            cjne    r2,#0x00,L015001?
095D 0B        2484            inc     r3
095E 8000      2485            sjmp    L015001?
0960           2486   L015004?:
0960 22        2487            ret
0961           2488   ;------------------------------------------------------------
0961           2489   ;Allocation info for local variables in function 'getchar1'
0961           2490   ;------------------------------------------------------------
0961           2491   ;c                         Allocated with name '_getchar1_c_1_134'
0961           2492   ;------------------------------------------------------------
0961           2493   ;        main.c:546: char getchar1 (void)
0961           2494   ;        -----------------------------------------
0961           2495   ;         function getchar1
0961           2496   ;        -----------------------------------------
0961           2497   _getchar1:
0961           2498   ;        main.c:549: SFRPAGE = 0x20;
0961 75A720    2499            mov     _SFRPAGE,#0x20
0964           2500   ;        main.c:550: while (!RI1);
0964           2501   L016001?:
0964           2502   ;        main.c:551: RI1=0;
0964 10C8B0    2503            jbc     _RI1,L016008?
0967 8000      2504            sjmp    L016001?
0969           2505   L016008?:
0969           2506   ;        main.c:553: SCON1&=0b_0011_1111;
0969 53C83F    2507            anl     _SCON1,#0x3F
096C           2508   ;        main.c:554: c = SBUF1;
096C 859282    2509            mov     dpl,_SBUF1
096F           2510   ;        main.c:555: SFRPAGE = 0x00;
096F 75A700    2511            mov     _SFRPAGE,#0x00
0972           2512   ;        main.c:556: return (c);
0972 22        2513            ret
0973           2514   ;------------------------------------------------------------
0973           2515   ;Allocation info for local variables in function 'getchar1_with_timeout'
0973           2516   ;------------------------------------------------------------
0973           2517   ;c                         Allocated with name '_getchar1_with_timeout_c_1_136'
0973           2518   ;timeout                   Allocated with name '_getchar1_with_timeout_timeout_1_136'
0973           2519   ;------------------------------------------------------------
0973           2520   ;        main.c:559: char getchar1_with_timeout (void)
0973           2521   ;        -----------------------------------------
0973           2522   ;         function getchar1_with_timeout
0973           2523   ;        -----------------------------------------
0973           2524   _getchar1_with_timeout:
0973           2525   ;        main.c:563: SFRPAGE = 0x20;
0973 75A720    2526            mov     _SFRPAGE,#0x20
0976           2527   ;        main.c:565: while (!RI1)
0976 7A00      2528            mov     r2,#0x00
0978 7B00      2529            mov     r3,#0x00
097A           2530   L017003?:
097A 20C830    2531            jb      _RI1,L017005?
097D           2532   ;        main.c:567: SFRPAGE = 0x00;
097D 75A700    2533            mov     _SFRPAGE,#0x00
0980           2534   ;        main.c:568: Timer3us(20);
0980 758214    2535            mov     dpl,#0x14
0983 C002      2536            push    ar2
0985 C003      2537            push    ar3
0987 120000    2538            lcall   _Timer3us
098A D003      2539            pop     ar3
098C D002      2540            pop     ar2
098E           2541   ;        main.c:569: SFRPAGE = 0x20;
098E 75A720    2542            mov     _SFRPAGE,#0x20
0991           2543   ;        main.c:570: timeout++;
0991 0A        2544            inc     r2
0992 BA0070    2545            cjne    r2,#0x00,L017012?
0995 0B        2546            inc     r3
0996           2547   L017012?:
0996           2548   ;        main.c:571: if(timeout==25000)
0996 BAA8F0    2549            cjne    r2,#0xA8,L017003?
0999 BB61F0    2550            cjne    r3,#0x61,L017003?
099C           2551   ;        main.c:573: SFRPAGE = 0x00;
099C 75A700    2552            mov     _SFRPAGE,#0x00
099F           2553   ;        main.c:574: return ('\n'); // Timeout after half second
099F 75820A    2554            mov     dpl,#0x0A
09A2 22        2555            ret
09A3           2556   L017005?:
09A3           2557   ;        main.c:577: RI1=0;
09A3 C2C8      2558            clr     _RI1
09A5           2559   ;        main.c:579: SCON1&=0b_0011_1111;
09A5 53C83F    2560            anl     _SCON1,#0x3F
09A8           2561   ;        main.c:580: c = SBUF1;
09A8 859282    2562            mov     dpl,_SBUF1
09AB           2563   ;        main.c:581: SFRPAGE = 0x00;
09AB 75A700    2564            mov     _SFRPAGE,#0x00
09AE           2565   ;        main.c:582: return (c);
09AE 22        2566            ret
09AF           2567   ;------------------------------------------------------------
09AF           2568   ;Allocation info for local variables in function 'getstr1'
09AF           2569   ;------------------------------------------------------------
09AF           2570   ;n                         Allocated with name '_getstr1_PARM_2'
09AF           2571   ;s                         Allocated to registers r2 r3 r4 
09AF           2572   ;c                         Allocated with name '_getstr1_c_1_140'
09AF           2573   ;cnt                       Allocated with name '_getstr1_cnt_1_140'
09AF           2574   ;------------------------------------------------------------
09AF           2575   ;        main.c:585: void getstr1 (char * s, unsigned char n)
09AF           2576   ;        -----------------------------------------
09AF           2577   ;         function getstr1
09AF           2578   ;        -----------------------------------------
09AF           2579   _getstr1:
09AF AA82      2580            mov     r2,dpl
09B1 AB83      2581            mov     r3,dph
09B3 ACF0      2582            mov     r4,b
09B5           2583   ;        main.c:591: while(1)
09B5 7D00      2584            mov     r5,#0x00
09B7 8A06      2585            mov     ar6,r2
09B9 8B07      2586            mov     ar7,r3
09BB 8C00      2587            mov     ar0,r4
09BD           2588   L018007?:
09BD           2589   ;        main.c:593: c=getchar1_with_timeout();
09BD C002      2590            push    ar2
09BF C003      2591            push    ar3
09C1 C004      2592            push    ar4
09C3 C005      2593            push    ar5
09C5 C006      2594            push    ar6
09C7 C007      2595            push    ar7
09C9 C000      2596            push    ar0
09CB 120000    2597            lcall   _getchar1_with_timeout
09CE A982      2598            mov     r1,dpl
09D0 D000      2599            pop     ar0
09D2 D007      2600            pop     ar7
09D4 D006      2601            pop     ar6
09D6 D005      2602            pop     ar5
09D8 D004      2603            pop     ar4
09DA D003      2604            pop     ar3
09DC D002      2605            pop     ar2
09DE           2606   ;        main.c:594: if(c=='\n')
09DE B90AF0    2607            cjne    r1,#0x0A,L018002?
09E1           2608   ;        main.c:596: *s=0;
09E1 8A82      2609            mov     dpl,r2
09E3 8B83      2610            mov     dph,r3
09E5 8CF0      2611            mov     b,r4
09E7 E4        2612            clr     a
09E8           2613   ;        main.c:597: return;
09E8 020000    2614            ljmp    __gptrput
09EB           2615   L018002?:
09EB           2616   ;        main.c:600: if (cnt<n)
09EB C3        2617            clr     c
09EC ED        2618            mov     a,r5
09ED 9550      2619            subb    a,_getstr1_PARM_2
09EF 5000      2620            jnc     L018004?
09F1           2621   ;        main.c:602: cnt++;
09F1 0D        2622            inc     r5
09F2           2623   ;        main.c:603: *s=c;
09F2 8E82      2624            mov     dpl,r6
09F4 8F83      2625            mov     dph,r7
09F6 88F0      2626            mov     b,r0
09F8 E9        2627            mov     a,r1
09F9 120000    2628            lcall   __gptrput
09FC A3        2629            inc     dptr
09FD AE82      2630            mov     r6,dpl
09FF AF83      2631            mov     r7,dph
0A01           2632   ;        main.c:604: s++;
0A01 8E02      2633            mov     ar2,r6
0A03 8F03      2634            mov     ar3,r7
0A05 8804      2635            mov     ar4,r0
0A07 8000      2636            sjmp    L018007?
0A09           2637   L018004?:
0A09           2638   ;        main.c:608: *s=0;
0A09 8A82      2639            mov     dpl,r2
0A0B 8B83      2640            mov     dph,r3
0A0D 8CF0      2641            mov     b,r4
0A0F E4        2642            clr     a
0A10           2643   ;        main.c:609: return;
0A10 020000    2644            ljmp    __gptrput
0A13           2645   ;------------------------------------------------------------
0A13           2646   ;Allocation info for local variables in function 'RXU1'
0A13           2647   ;------------------------------------------------------------
0A13           2648   ;------------------------------------------------------------
0A13           2649   ;        main.c:615: bit RXU1 (void)
0A13           2650   ;        -----------------------------------------
0A13           2651   ;         function RXU1
0A13           2652   ;        -----------------------------------------
0A13           2653   _RXU1:
0A13           2654   ;        main.c:618: SFRPAGE = 0x20;
0A13 75A720    2655            mov     _SFRPAGE,#0x20
0A16           2656   ;        main.c:619: mybit=RI1;
0A16 A2C8      2657            mov     c,_RI1
0A18           2658   ;        main.c:620: SFRPAGE = 0x00;
0A18 75A700    2659            mov     _SFRPAGE,#0x00
0A1B           2660   ;        main.c:621: return mybit;
0A1B 22        2661            ret
0A1C           2662   ;------------------------------------------------------------
0A1C           2663   ;Allocation info for local variables in function 'waitms_or_RI1'
0A1C           2664   ;------------------------------------------------------------
0A1C           2665   ;ms                        Allocated to registers r2 r3 
0A1C           2666   ;j                         Allocated with name '_waitms_or_RI1_j_1_148'
0A1C           2667   ;k                         Allocated with name '_waitms_or_RI1_k_1_148'
0A1C           2668   ;------------------------------------------------------------
0A1C           2669   ;        main.c:624: void waitms_or_RI1 (unsigned int ms)
0A1C           2670   ;        -----------------------------------------
0A1C           2671   ;         function waitms_or_RI1
0A1C           2672   ;        -----------------------------------------
0A1C           2673   _waitms_or_RI1:
0A1C AA82      2674            mov     r2,dpl
0A1E AB83      2675            mov     r3,dph
0A20           2676   ;        main.c:628: for(j=0; j<ms; j++)
0A20 7C00      2677            mov     r4,#0x00
0A22 7D00      2678            mov     r5,#0x00
0A24           2679   L020007?:
0A24 C3        2680            clr     c
0A25 EC        2681            mov     a,r4
0A26 9A        2682            subb    a,r2
0A27 ED        2683            mov     a,r5
0A28 9B        2684            subb    a,r3
0A29 5000      2685            jnc     L020011?
0A2B           2686   ;        main.c:630: for (k=0; k<4; k++)
0A2B 7E00      2687            mov     r6,#0x00
0A2D           2688   L020003?:
0A2D BE0430    2689            cjne    r6,#0x04,L020019?
0A30           2690   L020019?:
0A30 5000      2691            jnc     L020009?
0A32           2692   ;        main.c:632: if(RXU1()) return;
0A32 C002      2693            push    ar2
0A34 C003      2694            push    ar3
0A36 C004      2695            push    ar4
0A38 C005      2696            push    ar5
0A3A C006      2697            push    ar6
0A3C 120000    2698            lcall   _RXU1
0A3F E4        2699            clr     a
0A40 33        2700            rlc     a
0A41 D006      2701            pop     ar6
0A43 D005      2702            pop     ar5
0A45 D004      2703            pop     ar4
0A47 D003      2704            pop     ar3
0A49 D002      2705            pop     ar2
0A4B 6000      2706            jz      L020002?
0A4D 22        2707            ret
0A4E           2708   L020002?:
0A4E           2709   ;        main.c:633: Timer3us(250);
0A4E 7582FA    2710            mov     dpl,#0xFA
0A51 C002      2711            push    ar2
0A53 C003      2712            push    ar3
0A55 C004      2713            push    ar4
0A57 C005      2714            push    ar5
0A59 C006      2715            push    ar6
0A5B 120000    2716            lcall   _Timer3us
0A5E D006      2717            pop     ar6
0A60 D005      2718            pop     ar5
0A62 D004      2719            pop     ar4
0A64 D003      2720            pop     ar3
0A66 D002      2721            pop     ar2
0A68           2722   ;        main.c:630: for (k=0; k<4; k++)
0A68 0E        2723            inc     r6
0A69 8000      2724            sjmp    L020003?
0A6B           2725   L020009?:
0A6B           2726   ;        main.c:628: for(j=0; j<ms; j++)
0A6B 0C        2727            inc     r4
0A6C BC0070    2728            cjne    r4,#0x00,L020007?
0A6F 0D        2729            inc     r5
0A70 8000      2730            sjmp    L020007?
0A72           2731   L020011?:
0A72 22        2732            ret
0A73           2733   ;------------------------------------------------------------
0A73           2734   ;Allocation info for local variables in function 'SendATCommand'
0A73           2735   ;------------------------------------------------------------
0A73           2736   ;s                         Allocated to registers r2 r3 r4 
0A73           2737   ;------------------------------------------------------------
0A73           2738   ;        main.c:638: void SendATCommand (char * s)
0A73           2739   ;        -----------------------------------------
0A73           2740   ;         function SendATCommand
0A73           2741   ;        -----------------------------------------
0A73           2742   _SendATCommand:
0A73 AA82      2743            mov     r2,dpl
0A75 AB83      2744            mov     r3,dph
0A77 ACF0      2745            mov     r4,b
0A79           2746   ;        main.c:640: printf("Command: %s", s);
0A79 C002      2747            push    ar2
0A7B C003      2748            push    ar3
0A7D C004      2749            push    ar4
0A7F C002      2750            push    ar2
0A81 C003      2751            push    ar3
0A83 C004      2752            push    ar4
0A85 74F0      2753            mov     a,#__str_4
0A87 C0E0      2754            push    acc
0A89 74E5      2755            mov     a,#(__str_4 >> 8)
0A8B C0E0      2756            push    acc
0A8D 7480      2757            mov     a,#0x80
0A8F C0E0      2758            push    acc
0A91 120000    2759            lcall   _printf
0A94 E581      2760            mov     a,sp
0A96 24FA      2761            add     a,#0xfa
0A98 F581      2762            mov     sp,a
0A9A           2763   ;        main.c:641: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0A9A C2A0      2764            clr     _P2_0
0A9C           2765   ;        main.c:642: waitms(5);
0A9C 900005    2766            mov     dptr,#0x0005
0A9F 120000    2767            lcall   _waitms
0AA2 D004      2768            pop     ar4
0AA4 D003      2769            pop     ar3
0AA6 D002      2770            pop     ar2
0AA8           2771   ;        main.c:643: sendstr1(s);
0AA8 8A82      2772            mov     dpl,r2
0AAA 8B83      2773            mov     dph,r3
0AAC 8CF0      2774            mov     b,r4
0AAE 120000    2775            lcall   _sendstr1
0AB1           2776   ;        main.c:644: getstr1(buff, sizeof(buff)-1);
0AB1 755013    2777            mov     _getstr1_PARM_2,#0x13
0AB4 9053C0    2778            mov     dptr,#_buff
0AB7 75F040    2779            mov     b,#0x40
0ABA 120000    2780            lcall   _getstr1
0ABD           2781   ;        main.c:645: waitms(10);
0ABD 90000A    2782            mov     dptr,#0x000A
0AC0 120000    2783            lcall   _waitms
0AC3           2784   ;        main.c:646: P2_0=1; // 'set' pin to 1 is normal operation mode.
0AC3 D2A0      2785            setb    _P2_0
0AC5           2786   ;        main.c:647: printf("Response: %s\r\n", buff);
0AC5 74C0      2787            mov     a,#_buff
0AC7 C0E0      2788            push    acc
0AC9 7453      2789            mov     a,#(_buff >> 8)
0ACB C0E0      2790            push    acc
0ACD 7440      2791            mov     a,#0x40
0ACF C0E0      2792            push    acc
0AD1 7430      2793            mov     a,#__str_5
0AD3 C0E0      2794            push    acc
0AD5 74E6      2795            mov     a,#(__str_5 >> 8)
0AD7 C0E0      2796            push    acc
0AD9 7480      2797            mov     a,#0x80
0ADB C0E0      2798            push    acc
0ADD 120000    2799            lcall   _printf
0AE0 E581      2800            mov     a,sp
0AE2 24FA      2801            add     a,#0xfa
0AE4 F581      2802            mov     sp,a
0AE6 22        2803            ret
0AE7           2804   ;------------------------------------------------------------
0AE7           2805   ;Allocation info for local variables in function 'ReceptionOff'
0AE7           2806   ;------------------------------------------------------------
0AE7           2807   ;------------------------------------------------------------
0AE7           2808   ;        main.c:650: void ReceptionOff (void)
0AE7           2809   ;        -----------------------------------------
0AE7           2810   ;         function ReceptionOff
0AE7           2811   ;        -----------------------------------------
0AE7           2812   _ReceptionOff:
0AE7           2813   ;        main.c:652: P2_0=0; // 'set' pin to 0 is 'AT' mode.
0AE7 C2A0      2814            clr     _P2_0
0AE9           2815   ;        main.c:653: waitms(10);
0AE9 90000A    2816            mov     dptr,#0x000A
0AEC 120000    2817            lcall   _waitms
0AEF           2818   ;        main.c:654: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
0AEF 90E670    2819            mov     dptr,#__str_6
0AF2 75F080    2820            mov     b,#0x80
0AF5 120000    2821            lcall   _sendstr1
0AF8           2822   ;        main.c:655: waitms(10);
0AF8 90000A    2823            mov     dptr,#0x000A
0AFB 120000    2824            lcall   _waitms
0AFE           2825   ;        main.c:657: SCON1&=0b_0011_1111;
0AFE 53C83F    2826            anl     _SCON1,#0x3F
0B01           2827   ;        main.c:658: P2_0=1; // 'set' pin to 1 is normal operation mode.
0B01 D2A0      2828            setb    _P2_0
0B03 22        2829            ret
0B04           2830   ;------------------------------------------------------------
0B04           2831   ;Allocation info for local variables in function 'Set_Pin_Output'
0B04           2832   ;------------------------------------------------------------
0B04           2833   ;pin                       Allocated to registers r2 
0B04           2834   ;mask                      Allocated to registers r3 
0B04           2835   ;------------------------------------------------------------
0B04           2836   ;        main.c:661: void Set_Pin_Output (unsigned char pin)
0B04           2837   ;        -----------------------------------------
0B04           2838   ;         function Set_Pin_Output
0B04           2839   ;        -----------------------------------------
0B04           2840   _Set_Pin_Output:
0B04 AA82      2841            mov     r2,dpl
0B06           2842   ;        main.c:665: mask=(1<<(pin&0x7));
0B06 7407      2843            mov     a,#0x07
0B08 5A        2844            anl     a,r2
0B09 F5F0      2845            mov     b,a
0B0B 05F0      2846            inc     b
0B0D 7401      2847            mov     a,#0x01
0B0F 8000      2848            sjmp    L023011?
0B11           2849   L023009?:
0B11 25E0      2850            add     a,acc
0B13           2851   L023011?:
0B13 D5F0F0    2852            djnz    b,L023009?
0B16 FB        2853            mov     r3,a
0B17           2854   ;        main.c:666: switch(pin/0x10)
0B17 EA        2855            mov     a,r2
0B18 C4        2856            swap    a
0B19 540F      2857            anl     a,#0x0f
0B1B FA        2858            mov  r2,a
0B1C 24FC      2859            add     a,#0xff - 0x03
0B1E 4000      2860            jc      L023006?
0B20 EA        2861            mov     a,r2
0B21 2A        2862            add     a,r2
0B22 2A        2863            add     a,r2
0B23 90E770    2864            mov     dptr,#L023013?
0B26 73        2865            jmp     @a+dptr
0B27           2866   L023013?:
0B27 020000    2867            ljmp    L023001?
0B2A 020000    2868            ljmp    L023002?
0B2D 020000    2869            ljmp    L023003?
0B30 020000    2870            ljmp    L023004?
0B33           2871   ;        main.c:668: case 0: P0MDOUT |= mask; break;
0B33           2872   L023001?:
0B33 EB        2873            mov     a,r3
0B34 42A4      2874            orl     _P0MDOUT,a
0B36           2875   ;        main.c:669: case 1: P1MDOUT |= mask; break;
0B36 22        2876            ret
0B37           2877   L023002?:
0B37 EB        2878            mov     a,r3
0B38 42A5      2879            orl     _P1MDOUT,a
0B3A           2880   ;        main.c:670: case 2: P2MDOUT |= mask; break; 
0B3A 22        2881            ret
0B3B           2882   L023003?:
0B3B EB        2883            mov     a,r3
0B3C 42A6      2884            orl     _P2MDOUT,a
0B3E           2885   ;        main.c:671: case 3: P3MDOUT |= mask; break; 
0B3E 22        2886            ret
0B3F           2887   L023004?:
0B3F EB        2888            mov     a,r3
0B40 429C      2889            orl     _P3MDOUT,a
0B42           2890   ;        main.c:672: }   
0B42           2891   L023006?:
0B42 22        2892            ret
0B43           2893   ;------------------------------------------------------------
0B43           2894   ;Allocation info for local variables in function 'Set_Pin_Input'
0B43           2895   ;------------------------------------------------------------
0B43           2896   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_159'
0B43           2897   ;pin                       Allocated to registers r2 
0B43           2898   ;------------------------------------------------------------
0B43           2899   ;        main.c:675: void Set_Pin_Input (unsigned char pin)
0B43           2900   ;        -----------------------------------------
0B43           2901   ;         function Set_Pin_Input
0B43           2902   ;        -----------------------------------------
0B43           2903   _Set_Pin_Input:
0B43 AA82      2904            mov     r2,dpl
0B45           2905   ;        main.c:679: mask=(1<<(pin&0x7));
0B45 7407      2906            mov     a,#0x07
0B47 5A        2907            anl     a,r2
0B48 F5F0      2908            mov     b,a
0B4A 05F0      2909            inc     b
0B4C 7401      2910            mov     a,#0x01
0B4E 8000      2911            sjmp    L024011?
0B50           2912   L024009?:
0B50 25E0      2913            add     a,acc
0B52           2914   L024011?:
0B52 D5F0F0    2915            djnz    b,L024009?
0B55           2916   ;        main.c:680: mask=~mask;
0B55 F4        2917            cpl     a
0B56 FB        2918            mov     r3,a
0B57           2919   ;        main.c:681: switch(pin/0x10)
0B57 EA        2920            mov     a,r2
0B58 C4        2921            swap    a
0B59 540F      2922            anl     a,#0x0f
0B5B FA        2923            mov  r2,a
0B5C 24FC      2924            add     a,#0xff - 0x03
0B5E 4000      2925            jc      L024006?
0B60 EA        2926            mov     a,r2
0B61 2A        2927            add     a,r2
0B62 2A        2928            add     a,r2
0B63 90E970    2929            mov     dptr,#L024013?
0B66 73        2930            jmp     @a+dptr
0B67           2931   L024013?:
0B67 020000    2932            ljmp    L024001?
0B6A 020000    2933            ljmp    L024002?
0B6D 020000    2934            ljmp    L024003?
0B70 020000    2935            ljmp    L024004?
0B73           2936   ;        main.c:683: case 0: P0MDOUT &= mask; break;
0B73           2937   L024001?:
0B73 EB        2938            mov     a,r3
0B74 52A4      2939            anl     _P0MDOUT,a
0B76           2940   ;        main.c:684: case 1: P1MDOUT &= mask; break;
0B76 22        2941            ret
0B77           2942   L024002?:
0B77 EB        2943            mov     a,r3
0B78 52A5      2944            anl     _P1MDOUT,a
0B7A           2945   ;        main.c:685: case 2: P2MDOUT &= mask; break; 
0B7A 22        2946            ret
0B7B           2947   L024003?:
0B7B EB        2948            mov     a,r3
0B7C 52A6      2949            anl     _P2MDOUT,a
0B7E           2950   ;        main.c:686: case 3: P3MDOUT &= mask; break; 
0B7E 22        2951            ret
0B7F           2952   L024004?:
0B7F EB        2953            mov     a,r3
0B80 529C      2954            anl     _P3MDOUT,a
0B82           2955   ;        main.c:687: }   
0B82           2956   L024006?:
0B82 22        2957            ret
0B83           2958   ;------------------------------------------------------------
0B83           2959   ;Allocation info for local variables in function 'InitADC'
0B83           2960   ;------------------------------------------------------------
0B83           2961   ;------------------------------------------------------------
0B83           2962   ;        main.c:690: void InitADC (void)
0B83           2963   ;        -----------------------------------------
0B83           2964   ;         function InitADC
0B83           2965   ;        -----------------------------------------
0B83           2966   _InitADC:
0B83           2967   ;        main.c:692: SFRPAGE = 0x00;
0B83 75A700    2968            mov     _SFRPAGE,#0x00
0B86           2969   ;        main.c:693: ADEN=0; // Disable ADC
0B86 C2EF      2970            clr     _ADEN
0B88           2971   ;        main.c:698: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0B88 75B280    2972            mov     _ADC0CN1,#0x80
0B8B           2973   ;        main.c:702: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0B8B 75BC20    2974            mov     _ADC0CF0,#0x20
0B8E           2975   ;        main.c:706: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
0B8E 75B91E    2976            mov     _ADC0CF1,#0x1E
0B91           2977   ;        main.c:715: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0B91 75E800    2978            mov     _ADC0CN0,#0x00
0B94           2979   ;        main.c:720: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0B94 75DF3F    2980            mov     _ADC0CF2,#0x3F
0B97           2981   ;        main.c:724: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0B97 75B300    2982            mov     _ADC0CN2,#0x00
0B9A           2983   ;        main.c:726: ADEN=1; // Enable ADC
0B9A D2EF      2984            setb    _ADEN
0B9C 22        2985            ret
0B9D           2986   ;------------------------------------------------------------
0B9D           2987   ;Allocation info for local variables in function 'InitPinADC'
0B9D           2988   ;------------------------------------------------------------
0B9D           2989   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
0B9D           2990   ;portno                    Allocated to registers r2 
0B9D           2991   ;mask                      Allocated to registers r3 
0B9D           2992   ;------------------------------------------------------------
0B9D           2993   ;        main.c:729: void InitPinADC (unsigned char portno, unsigned char pin_num)
0B9D           2994   ;        -----------------------------------------
0B9D           2995   ;         function InitPinADC
0B9D           2996   ;        -----------------------------------------
0B9D           2997   _InitPinADC:
0B9D AA82      2998            mov     r2,dpl
0B9F           2999   ;        main.c:733: mask=1<<pin_num;
0B9F 85E0F0    3000            mov     b,_InitPinADC_PARM_2
0BA2 05F0      3001            inc     b
0BA4 7401      3002            mov     a,#0x01
0BA6 8000      3003            sjmp    L026013?
0BA8           3004   L026011?:
0BA8 25E0      3005            add     a,acc
0BAA           3006   L026013?:
0BAA D5F0F0    3007            djnz    b,L026011?
0BAD FB        3008            mov     r3,a
0BAE           3009   ;        main.c:735: SFRPAGE = 0x20;
0BAE 75A720    3010            mov     _SFRPAGE,#0x20
0BB1           3011   ;        main.c:736: switch (portno)
0BB1 BA0030    3012            cjne    r2,#0x00,L026014?
0BB4 8000      3013            sjmp    L026001?
0BB6           3014   L026014?:
0BB6 BA01B0    3015            cjne    r2,#0x01,L026015?
0BB9 8000      3016            sjmp    L026002?
0BBB           3017   L026015?:
0BBB           3018   ;        main.c:738: case 0:
0BBB BA0230    3019            cjne    r2,#0x02,L026005?
0BBE 8000      3020            sjmp    L026003?
0BC0           3021   L026001?:
0BC0           3022   ;        main.c:739: P0MDIN &= (~mask); // Set pin as analog input
0BC0 EB        3023            mov     a,r3
0BC1 F4        3024            cpl     a
0BC2 FA        3025            mov     r2,a
0BC3 52F1      3026            anl     _P0MDIN,a
0BC5           3027   ;        main.c:740: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0BC5 EB        3028            mov     a,r3
0BC6 42D4      3029            orl     _P0SKIP,a
0BC8           3030   ;        main.c:741: break;
0BC8           3031   ;        main.c:742: case 1:
0BC8 8000      3032            sjmp    L026005?
0BCA           3033   L026002?:
0BCA           3034   ;        main.c:743: P1MDIN &= (~mask); // Set pin as analog input
0BCA EB        3035            mov     a,r3
0BCB F4        3036            cpl     a
0BCC FA        3037            mov     r2,a
0BCD 52F2      3038            anl     _P1MDIN,a
0BCF           3039   ;        main.c:744: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0BCF EB        3040            mov     a,r3
0BD0 42D5      3041            orl     _P1SKIP,a
0BD2           3042   ;        main.c:745: break;
0BD2           3043   ;        main.c:746: case 2:
0BD2 8000      3044            sjmp    L026005?
0BD4           3045   L026003?:
0BD4           3046   ;        main.c:747: P2MDIN &= (~mask); // Set pin as analog input
0BD4 EB        3047            mov     a,r3
0BD5 F4        3048            cpl     a
0BD6 FA        3049            mov     r2,a
0BD7 52F3      3050            anl     _P2MDIN,a
0BD9           3051   ;        main.c:748: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0BD9 EB        3052            mov     a,r3
0BDA 42CC      3053            orl     _P2SKIP,a
0BDC           3054   ;        main.c:752: }
0BDC           3055   L026005?:
0BDC           3056   ;        main.c:753: SFRPAGE = 0x00;
0BDC 75A700    3057            mov     _SFRPAGE,#0x00
0BDF 22        3058            ret
0BE0           3059   ;------------------------------------------------------------
0BE0           3060   ;Allocation info for local variables in function 'ADC_at_Pin'
0BE0           3061   ;------------------------------------------------------------
0BE0           3062   ;pin                       Allocated to registers 
0BE0           3063   ;------------------------------------------------------------
0BE0           3064   ;        main.c:756: unsigned int ADC_at_Pin(unsigned char pin)
0BE0           3065   ;        -----------------------------------------
0BE0           3066   ;         function ADC_at_Pin
0BE0           3067   ;        -----------------------------------------
0BE0           3068   _ADC_at_Pin:
0BE0 8582BB    3069            mov     _ADC0MX,dpl
0BE3           3070   ;        main.c:759: ADINT = 0;
0BE3 C2ED      3071            clr     _ADINT
0BE5           3072   ;        main.c:760: ADBUSY = 1;     // Convert voltage at the pin
0BE5 D2EC      3073            setb    _ADBUSY
0BE7           3074   ;        main.c:761: while (!ADINT); // Wait for conversion to complete
0BE7           3075   L027001?:
0BE7 30EDB0    3076            jnb     _ADINT,L027001?
0BEA           3077   ;        main.c:762: return (ADC0);
0BEA 85BD82    3078            mov     dpl,_ADC0
0BED 85BE83    3079            mov     dph,(_ADC0 >> 8)
0BF0 22        3080            ret
0BF1           3081   ;------------------------------------------------------------
0BF1           3082   ;Allocation info for local variables in function 'ReadHX711'
0BF1           3083   ;------------------------------------------------------------
0BF1           3084   ;dataa                     Allocated with name '_ReadHX711_dataa_1_169'
0BF1           3085   ;i                         Allocated with name '_ReadHX711_i_1_169'
0BF1           3086   ;ans                       Allocated with name '_ReadHX711_ans_1_169'
0BF1           3087   ;j                         Allocated with name '_ReadHX711_j_1_169'
0BF1           3088   ;------------------------------------------------------------
0BF1           3089   ;        main.c:765: int ReadHX711(void) {
0BF1           3090   ;        -----------------------------------------
0BF1           3091   ;         function ReadHX711
0BF1           3092   ;        -----------------------------------------
0BF1           3093   _ReadHX711:
0BF1           3094   ;        main.c:766: xdata unsigned long dataa = 0;
0BF1 90CDA0    3095            mov     dptr,#_ReadHX711_dataa_1_169
0BF4 E4        3096            clr     a
0BF5 F0        3097            movx    @dptr,a
0BF6 A3        3098            inc     dptr
0BF7 F0        3099            movx    @dptr,a
0BF8 A3        3100            inc     dptr
0BF9 F0        3101            movx    @dptr,a
0BFA A3        3102            inc     dptr
0BFB F0        3103            movx    @dptr,a
0BFC           3104   ;        main.c:771: PD_SCK = 0;
0BFC C2A5      3105            clr     _P2_5
0BFE           3106   ;        main.c:773: for (i = 0; i < 24; i++) {
0BFE 7A00      3107            mov     r2,#0x00
0C00           3108   L028011?:
0C00 C3        3109            clr     c
0C01 EA        3110            mov     a,r2
0C02 6480      3111            xrl     a,#0x80
0C04 9498      3112            subb    a,#0x98
0C06 4000      3113            jc      L028037?
0C08 020000    3114            ljmp    L028014?
0C0B           3115   L028037?:
0C0B           3116   ;        main.c:774: PD_SCK = 1;
0C0B D2A5      3117            setb    _P2_5
0C0D           3118   ;        main.c:775: for (j = 0; j < 4; j++);
0C0D 90CDF0    3119            mov     dptr,#_ReadHX711_j_1_169
0C10 E4        3120            clr     a
0C11 F0        3121            movx    @dptr,a
0C12           3122   L028003?:
0C12 90CDF0    3123            mov     dptr,#_ReadHX711_j_1_169
0C15 E0        3124            movx    a,@dptr
0C16 FB        3125            mov     r3,a
0C17 C3        3126            clr     c
0C18 6480      3127            xrl     a,#0x80
0C1A 9484      3128            subb    a,#0x84
0C1C 5000      3129            jnc     L028006?
0C1E 90CDF0    3130            mov     dptr,#_ReadHX711_j_1_169
0C21 E0        3131            movx    a,@dptr
0C22 2401      3132            add     a,#0x01
0C24 F0        3133            movx    @dptr,a
0C25 8000      3134            sjmp    L028003?
0C27           3135   L028006?:
0C27           3136   ;        main.c:776: dataa = dataa << 1;
0C27 90CDA0    3137            mov     dptr,#_ReadHX711_dataa_1_169
0C2A E0        3138            movx    a,@dptr
0C2B FB        3139            mov     r3,a
0C2C A3        3140            inc     dptr
0C2D E0        3141            movx    a,@dptr
0C2E FC        3142            mov     r4,a
0C2F A3        3143            inc     dptr
0C30 E0        3144            movx    a,@dptr
0C31 FD        3145            mov     r5,a
0C32 A3        3146            inc     dptr
0C33 E0        3147            movx    a,@dptr
0C34 FE        3148            mov     r6,a
0C35 EB        3149            mov     a,r3
0C36 2B        3150            add     a,r3
0C37 FB        3151            mov     r3,a
0C38 EC        3152            mov     a,r4
0C39 33        3153            rlc     a
0C3A FC        3154            mov     r4,a
0C3B ED        3155            mov     a,r5
0C3C 33        3156            rlc     a
0C3D FD        3157            mov     r5,a
0C3E EE        3158            mov     a,r6
0C3F 33        3159            rlc     a
0C40 FE        3160            mov     r6,a
0C41 90CDA0    3161            mov     dptr,#_ReadHX711_dataa_1_169
0C44 EB        3162            mov     a,r3
0C45 F0        3163            movx    @dptr,a
0C46 A3        3164            inc     dptr
0C47 EC        3165            mov     a,r4
0C48 F0        3166            movx    @dptr,a
0C49 A3        3167            inc     dptr
0C4A ED        3168            mov     a,r5
0C4B F0        3169            movx    @dptr,a
0C4C A3        3170            inc     dptr
0C4D EE        3171            mov     a,r6
0C4E F0        3172            movx    @dptr,a
0C4F           3173   ;        main.c:777: if (DOUT) {
0C4F 30A630    3174            jnb     _P2_6,L028002?
0C52           3175   ;        main.c:778: dataa |= 0x01;
0C52 90CDA0    3176            mov     dptr,#_ReadHX711_dataa_1_169
0C55 E0        3177            movx    a,@dptr
0C56 FB        3178            mov     r3,a
0C57 A3        3179            inc     dptr
0C58 E0        3180            movx    a,@dptr
0C59 FC        3181            mov     r4,a
0C5A A3        3182            inc     dptr
0C5B E0        3183            movx    a,@dptr
0C5C FD        3184            mov     r5,a
0C5D A3        3185            inc     dptr
0C5E E0        3186            movx    a,@dptr
0C5F FE        3187            mov     r6,a
0C60 90CDA0    3188            mov     dptr,#_ReadHX711_dataa_1_169
0C63 7401      3189            mov     a,#0x01
0C65 4B        3190            orl     a,r3
0C66 F0        3191            movx    @dptr,a
0C67 A3        3192            inc     dptr
0C68 EC        3193            mov     a,r4
0C69 F0        3194            movx    @dptr,a
0C6A A3        3195            inc     dptr
0C6B ED        3196            mov     a,r5
0C6C F0        3197            movx    @dptr,a
0C6D A3        3198            inc     dptr
0C6E EE        3199            mov     a,r6
0C6F F0        3200            movx    @dptr,a
0C70           3201   L028002?:
0C70           3202   ;        main.c:780: PD_SCK = 0;
0C70 C2A5      3203            clr     _P2_5
0C72           3204   ;        main.c:781: for (j = 0; j < 4; j++);
0C72 90CDF0    3205            mov     dptr,#_ReadHX711_j_1_169
0C75 E4        3206            clr     a
0C76 F0        3207            movx    @dptr,a
0C77           3208   L028007?:
0C77 90CDF0    3209            mov     dptr,#_ReadHX711_j_1_169
0C7A E0        3210            movx    a,@dptr
0C7B FB        3211            mov     r3,a
0C7C C3        3212            clr     c
0C7D 6480      3213            xrl     a,#0x80
0C7F 9484      3214            subb    a,#0x84
0C81 5000      3215            jnc     L028013?
0C83 90CDF0    3216            mov     dptr,#_ReadHX711_j_1_169
0C86 E0        3217            movx    a,@dptr
0C87 2401      3218            add     a,#0x01
0C89 F0        3219            movx    @dptr,a
0C8A 8000      3220            sjmp    L028007?
0C8C           3221   L028013?:
0C8C           3222   ;        main.c:773: for (i = 0; i < 24; i++) {
0C8C 0A        3223            inc     r2
0C8D 020000    3224            ljmp    L028011?
0C90           3225   L028014?:
0C90           3226   ;        main.c:784: PD_SCK = 1;
0C90 D2A5      3227            setb    _P2_5
0C92           3228   ;        main.c:785: for (j = 0; j < 4; j++);
0C92 90CDF0    3229            mov     dptr,#_ReadHX711_j_1_169
0C95 E4        3230            clr     a
0C96 F0        3231            movx    @dptr,a
0C97           3232   L028015?:
0C97 90CDF0    3233            mov     dptr,#_ReadHX711_j_1_169
0C9A E0        3234            movx    a,@dptr
0C9B FA        3235            mov     r2,a
0C9C C3        3236            clr     c
0C9D 6480      3237            xrl     a,#0x80
0C9F 9484      3238            subb    a,#0x84
0CA1 5000      3239            jnc     L028018?
0CA3 90CDF0    3240            mov     dptr,#_ReadHX711_j_1_169
0CA6 E0        3241            movx    a,@dptr
0CA7 2401      3242            add     a,#0x01
0CA9 F0        3243            movx    @dptr,a
0CAA 8000      3244            sjmp    L028015?
0CAC           3245   L028018?:
0CAC           3246   ;        main.c:786: PD_SCK = 0;
0CAC C2A5      3247            clr     _P2_5
0CAE           3248   ;        main.c:787: for (j = 0; j < 4; j++);
0CAE 90CDF0    3249            mov     dptr,#_ReadHX711_j_1_169
0CB1 E4        3250            clr     a
0CB2 F0        3251            movx    @dptr,a
0CB3           3252   L028019?:
0CB3 90CDF0    3253            mov     dptr,#_ReadHX711_j_1_169
0CB6 E0        3254            movx    a,@dptr
0CB7 FA        3255            mov     r2,a
0CB8 C3        3256            clr     c
0CB9 6480      3257            xrl     a,#0x80
0CBB 9484      3258            subb    a,#0x84
0CBD 5000      3259            jnc     L028022?
0CBF 90CDF0    3260            mov     dptr,#_ReadHX711_j_1_169
0CC2 E0        3261            movx    a,@dptr
0CC3 2401      3262            add     a,#0x01
0CC5 F0        3263            movx    @dptr,a
0CC6 8000      3264            sjmp    L028019?
0CC8           3265   L028022?:
0CC8           3266   ;        main.c:788: ans = (dataa % 1000000)/10;
0CC8 90CDA0    3267            mov     dptr,#_ReadHX711_dataa_1_169
0CCB E0        3268            movx    a,@dptr
0CCC FA        3269            mov     r2,a
0CCD A3        3270            inc     dptr
0CCE E0        3271            movx    a,@dptr
0CCF FB        3272            mov     r3,a
0CD0 A3        3273            inc     dptr
0CD1 E0        3274            movx    a,@dptr
0CD2 FC        3275            mov     r4,a
0CD3 A3        3276            inc     dptr
0CD4 E0        3277            movx    a,@dptr
0CD5 FD        3278            mov     r5,a
0CD6 750040    3279            mov     __modulong_PARM_2,#0x40
0CD9 750142    3280            mov     (__modulong_PARM_2 + 1),#0x42
0CDC 75020F    3281            mov     (__modulong_PARM_2 + 2),#0x0F
0CDF 750300    3282            mov     (__modulong_PARM_2 + 3),#0x00
0CE2 8A82      3283            mov     dpl,r2
0CE4 8B83      3284            mov     dph,r3
0CE6 8CF0      3285            mov     b,r4
0CE8 ED        3286            mov     a,r5
0CE9 120000    3287            lcall   __modulong
0CEC AA82      3288            mov     r2,dpl
0CEE AB83      3289            mov     r3,dph
0CF0 ACF0      3290            mov     r4,b
0CF2 FD        3291            mov     r5,a
0CF3 75000A    3292            mov     __divulong_PARM_2,#0x0A
0CF6 E4        3293            clr     a
0CF7 F501      3294            mov     (__divulong_PARM_2 + 1),a
0CF9 F502      3295            mov     (__divulong_PARM_2 + 2),a
0CFB F503      3296            mov     (__divulong_PARM_2 + 3),a
0CFD 8A82      3297            mov     dpl,r2
0CFF 8B83      3298            mov     dph,r3
0D01 8CF0      3299            mov     b,r4
0D03 ED        3300            mov     a,r5
0D04           3301   ;        main.c:789: return ans;
0D04 020000    3302            ljmp    __divulong
0D07           3303   ;------------------------------------------------------------
0D07           3304   ;Allocation info for local variables in function 'Timer5_ISR'
0D07           3305   ;------------------------------------------------------------
0D07           3306   ;------------------------------------------------------------
0D07           3307   ;        main.c:792: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
0D07           3308   ;        -----------------------------------------
0D07           3309   ;         function Timer5_ISR
0D07           3310   ;        -----------------------------------------
0D07           3311   _Timer5_ISR:
0D07 C090      3312            push    bits
0D09 C0E0      3313            push    acc
0D0B C0F0      3314            push    b
0D0D C082      3315            push    dpl
0D0F C083      3316            push    dph
0D11 C002      3317            push    (0+2)
0D13 C003      3318            push    (0+3)
0D15 C004      3319            push    (0+4)
0D17 C005      3320            push    (0+5)
0D19 C006      3321            push    (0+6)
0D1B C007      3322            push    (0+7)
0D1D C000      3323            push    (0+0)
0D1F C001      3324            push    (0+1)
0D21 C0D0      3325            push    psw
0D23 75D000    3326            mov     psw,#0x00
0D26           3327   ;        main.c:794: SFRPAGE=0x10;
0D26 75A710    3328            mov     _SFRPAGE,#0x10
0D29           3329   ;        main.c:795: TF5H = 0; // Clear Timer5 interrupt flag
0D29 C2C7      3330            clr     _TF5H
0D2B           3331   ;        main.c:796: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0D2B 75D2C4    3332            mov     _TMR5RL,#0xC4
0D2E 75D3FF    3333            mov     (_TMR5RL >> 8),#0xFF
0D31           3334   ;        main.c:798: fre_mea_count++;
0D31 904D00    3335            mov     dptr,#_fre_mea_count
0D34 E0        3336            movx    a,@dptr
0D35 2401      3337            add     a,#0x01
0D37 F0        3338            movx    @dptr,a
0D38 A3        3339            inc     dptr
0D39 E0        3340            movx    a,@dptr
0D3A 3400      3341            addc    a,#0x00
0D3C F0        3342            movx    @dptr,a
0D3D           3343   ;        main.c:799: if(fre_mea_count == 1000){
0D3D 904D00    3344            mov     dptr,#_fre_mea_count
0D40 E0        3345            movx    a,@dptr
0D41 FA        3346            mov     r2,a
0D42 A3        3347            inc     dptr
0D43 E0        3348            movx    a,@dptr
0D44 FB        3349            mov     r3,a
0D45 BAE830    3350            cjne    r2,#0xE8,L029004?
0D48 BB0330    3351            cjne    r3,#0x03,L029004?
0D4B           3352   ;        main.c:800: fre_mea_count = 0;
0D4B 904D00    3353            mov     dptr,#_fre_mea_count
0D4E E4        3354            clr     a
0D4F F0        3355            movx    @dptr,a
0D50 A3        3356            inc     dptr
0D51 F0        3357            movx    @dptr,a
0D52           3358   ;        main.c:801: if(mea_yes) freq100 = get_freq();
0D52 904BB0    3359            mov     dptr,#_mea_yes
0D55 E0        3360            movx    a,@dptr
0D56 FA        3361            mov     r2,a
0D57 6000      3362            jz      L029004?
0D59 120000    3363            lcall   _get_freq
0D5C AA82      3364            mov     r2,dpl
0D5E AB83      3365            mov     r3,dph
0D60 905380    3366            mov     dptr,#_freq100
0D63 EA        3367            mov     a,r2
0D64 F0        3368            movx    @dptr,a
0D65 A3        3369            inc     dptr
0D66 EB        3370            mov     a,r3
0D67 F0        3371            movx    @dptr,a
0D68 EB        3372            mov     a,r3
0D69 33        3373            rlc     a
0D6A 95E0      3374            subb    a,acc
0D6C A3        3375            inc     dptr
0D6D F0        3376            movx    @dptr,a
0D6E A3        3377            inc     dptr
0D6F F0        3378            movx    @dptr,a
0D70           3379   L029004?:
0D70           3380   ;        main.c:804: weight_mea_count++;
0D70 904CC0    3381            mov     dptr,#_weight_mea_count
0D73 E0        3382            movx    a,@dptr
0D74 2401      3383            add     a,#0x01
0D76 F0        3384            movx    @dptr,a
0D77 A3        3385            inc     dptr
0D78 E0        3386            movx    a,@dptr
0D79 3400      3387            addc    a,#0x00
0D7B F0        3388            movx    @dptr,a
0D7C           3389   ;        main.c:805: if(weight_mea_count == 20000){
0D7C 904CC0    3390            mov     dptr,#_weight_mea_count
0D7F E0        3391            movx    a,@dptr
0D80 FA        3392            mov     r2,a
0D81 A3        3393            inc     dptr
0D82 E0        3394            movx    a,@dptr
0D83 FB        3395            mov     r3,a
0D84 BA20B0    3396            cjne    r2,#0x20,L029008?
0D87 BB4EB0    3397            cjne    r3,#0x4E,L029008?
0D8A           3398   ;        main.c:806: weight_mea_count = 0;
0D8A 904CC0    3399            mov     dptr,#_weight_mea_count
0D8D E4        3400            clr     a
0D8E F0        3401            movx    @dptr,a
0D8F A3        3402            inc     dptr
0D90 F0        3403            movx    @dptr,a
0D91           3404   ;        main.c:807: if(mea_yes) weight = ReadHX711();
0D91 904BB0    3405            mov     dptr,#_mea_yes
0D94 E0        3406            movx    a,@dptr
0D95 FA        3407            mov     r2,a
0D96 6000      3408            jz      L029008?
0D98 120000    3409            lcall   _ReadHX711
0D9B E582      3410            mov     a,dpl
0D9D 8583F0    3411            mov     b,dph
0DA0 904B70    3412            mov     dptr,#_weight
0DA3 F0        3413            movx    @dptr,a
0DA4 A3        3414            inc     dptr
0DA5 E5F0      3415            mov     a,b
0DA7 F0        3416            movx    @dptr,a
0DA8           3417   L029008?:
0DA8           3418   ;        main.c:810: pwm_counter++; 
0DA8 905000    3419            mov     dptr,#_pwm_counter
0DAB E0        3420            movx    a,@dptr
0DAC 2401      3421            add     a,#0x01
0DAE F0        3422            movx    @dptr,a
0DAF A3        3423            inc     dptr
0DB0 E0        3424            movx    a,@dptr
0DB1 3400      3425            addc    a,#0x00
0DB3 F0        3426            movx    @dptr,a
0DB4           3427   ;        main.c:811: if (pwm_counter == 100){
0DB4 905000    3428            mov     dptr,#_pwm_counter
0DB7 E0        3429            movx    a,@dptr
0DB8 FA        3430            mov     r2,a
0DB9 A3        3431            inc     dptr
0DBA E0        3432            movx    a,@dptr
0DBB FB        3433            mov     r3,a
0DBC BA64F0    3434            cjne    r2,#0x64,L029010?
0DBF BB00F0    3435            cjne    r3,#0x00,L029010?
0DC2           3436   ;        main.c:812: pwm_counter = 0; 
0DC2 905000    3437            mov     dptr,#_pwm_counter
0DC5 E4        3438            clr     a
0DC6 F0        3439            movx    @dptr,a
0DC7 A3        3440            inc     dptr
0DC8 F0        3441            movx    @dptr,a
0DC9           3442   L029010?:
0DC9           3443   ;        main.c:815: if (pwm_right > pwm_counter){
0DC9 904F40    3444            mov     dptr,#_pwm_right
0DCC E0        3445            movx    a,@dptr
0DCD FA        3446            mov     r2,a
0DCE 905000    3447            mov     dptr,#_pwm_counter
0DD1 E0        3448            movx    a,@dptr
0DD2 FB        3449            mov     r3,a
0DD3 A3        3450            inc     dptr
0DD4 E0        3451            movx    a,@dptr
0DD5 FC        3452            mov     r4,a
0DD6 7D00      3453            mov     r5,#0x00
0DD8 C3        3454            clr     c
0DD9 EB        3455            mov     a,r3
0DDA 9A        3456            subb    a,r2
0DDB EC        3457            mov     a,r4
0DDC 9D        3458            subb    a,r5
0DDD 5000      3459            jnc     L029015?
0DDF           3460   ;        main.c:816: if(L_motor_dir){
0DDF 904F00    3461            mov     dptr,#_L_motor_dir
0DE2 E0        3462            movx    a,@dptr
0DE3 FA        3463            mov     r2,a
0DE4 6000      3464            jz      L029012?
0DE6           3465   ;        main.c:817: L_bridge_1 = 1; 
0DE6 D2A1      3466            setb    _P2_1
0DE8           3467   ;        main.c:818: L_bridge_2 = 0; 
0DE8 C2A2      3468            clr     _P2_2
0DEA 8000      3469            sjmp    L029016?
0DEC           3470   L029012?:
0DEC           3471   ;        main.c:821: L_bridge_1 = 0; 
0DEC C2A1      3472            clr     _P2_1
0DEE           3473   ;        main.c:822: L_bridge_2 = 1; 
0DEE D2A2      3474            setb    _P2_2
0DF0 8000      3475            sjmp    L029016?
0DF2           3476   L029015?:
0DF2           3477   ;        main.c:826: L_bridge_1 = 0; 
0DF2 C2A1      3478            clr     _P2_1
0DF4           3479   ;        main.c:827: L_bridge_2 = 0; 
0DF4 C2A2      3480            clr     _P2_2
0DF6           3481   L029016?:
0DF6           3482   ;        main.c:829: if (pwm_left > pwm_counter){
0DF6 904F80    3483            mov     dptr,#_pwm_left
0DF9 E0        3484            movx    a,@dptr
0DFA FA        3485            mov     r2,a
0DFB 7D00      3486            mov     r5,#0x00
0DFD C3        3487            clr     c
0DFE EB        3488            mov     a,r3
0DFF 9A        3489            subb    a,r2
0E00 EC        3490            mov     a,r4
0E01 9D        3491            subb    a,r5
0E02 5000      3492            jnc     L029021?
0E04           3493   ;        main.c:830: if (R_motor_dir){
0E04 904EC0    3494            mov     dptr,#_R_motor_dir
0E07 E0        3495            movx    a,@dptr
0E08 FA        3496            mov     r2,a
0E09 6000      3497            jz      L029018?
0E0B           3498   ;        main.c:831: R_bridge_1 = 1; 
0E0B D2A4      3499            setb    _P2_4
0E0D           3500   ;        main.c:832: R_bridge_2 = 0;
0E0D C2A3      3501            clr     _P2_3
0E0F 8000      3502            sjmp    L029022?
0E11           3503   L029018?:
0E11           3504   ;        main.c:835: R_bridge_1 = 0; 
0E11 C2A4      3505            clr     _P2_4
0E13           3506   ;        main.c:836: R_bridge_2 = 1;
0E13 D2A3      3507            setb    _P2_3
0E15 8000      3508            sjmp    L029022?
0E17           3509   L029021?:
0E17           3510   ;        main.c:840: R_bridge_1 = 0; 
0E17 C2A4      3511            clr     _P2_4
0E19           3512   ;        main.c:841: R_bridge_2 = 0; 
0E19 C2A3      3513            clr     _P2_3
0E1B           3514   L029022?:
0E1B           3515   ;        main.c:844: servo_counter++;
0E1B 904FC0    3516            mov     dptr,#_servo_counter
0E1E E0        3517            movx    a,@dptr
0E1F 2401      3518            add     a,#0x01
0E21 F0        3519            movx    @dptr,a
0E22 A3        3520            inc     dptr
0E23 E0        3521            movx    a,@dptr
0E24 3400      3522            addc    a,#0x00
0E26 F0        3523            movx    @dptr,a
0E27           3524   ;        main.c:845: if(servo_counter==2000)
0E27 904FC0    3525            mov     dptr,#_servo_counter
0E2A E0        3526            movx    a,@dptr
0E2B FA        3527            mov     r2,a
0E2C A3        3528            inc     dptr
0E2D E0        3529            movx    a,@dptr
0E2E FB        3530            mov     r3,a
0E2F BAD0B0    3531            cjne    r2,#0xD0,L029024?
0E32 BB07B0    3532            cjne    r3,#0x07,L029024?
0E35           3533   ;        main.c:847: servo_counter=0;
0E35 904FC0    3534            mov     dptr,#_servo_counter
0E38 E4        3535            clr     a
0E39 F0        3536            movx    @dptr,a
0E3A A3        3537            inc     dptr
0E3B F0        3538            movx    @dptr,a
0E3C           3539   ;        main.c:848: Servo_arm=1;
0E3C D296      3540            setb    _P1_6
0E3E           3541   ;        main.c:849: Servo_base=1;
0E3E D297      3542            setb    _P1_7
0E40           3543   L029024?:
0E40           3544   ;        main.c:851: if(servo_arm==servo_counter)
0E40 904E40    3545            mov     dptr,#_servo_arm
0E43 E0        3546            movx    a,@dptr
0E44 FA        3547            mov     r2,a
0E45 904FC0    3548            mov     dptr,#_servo_counter
0E48 E0        3549            movx    a,@dptr
0E49 FB        3550            mov     r3,a
0E4A A3        3551            inc     dptr
0E4B E0        3552            movx    a,@dptr
0E4C FC        3553            mov     r4,a
0E4D 7D00      3554            mov     r5,#0x00
0E4F EA        3555            mov     a,r2
0E50 B503F0    3556            cjne    a,ar3,L029026?
0E53 ED        3557            mov     a,r5
0E54 B504F0    3558            cjne    a,ar4,L029026?
0E57           3559   ;        main.c:853: Servo_arm=0;
0E57 C296      3560            clr     _P1_6
0E59           3561   L029026?:
0E59           3562   ;        main.c:855: if(servo_base==servo_counter)
0E59 904E80    3563            mov     dptr,#_servo_base
0E5C E0        3564            movx    a,@dptr
0E5D FA        3565            mov     r2,a
0E5E 7D00      3566            mov     r5,#0x00
0E60 B50330    3567            cjne    a,ar3,L029029?
0E63 ED        3568            mov     a,r5
0E64 B50430    3569            cjne    a,ar4,L029029?
0E67           3570   ;        main.c:857: Servo_base=0;
0E67 C297      3571            clr     _P1_7
0E69           3572   L029029?:
0E69 D0D0      3573            pop     psw
0E6B D001      3574            pop     (0+1)
0E6D D000      3575            pop     (0+0)
0E6F D007      3576            pop     (0+7)
0E71 D006      3577            pop     (0+6)
0E73 D005      3578            pop     (0+5)
0E75 D004      3579            pop     (0+4)
0E77 D003      3580            pop     (0+3)
0E79 D002      3581            pop     (0+2)
0E7B D083      3582            pop     dph
0E7D D082      3583            pop     dpl
0E7F D0F0      3584            pop     b
0E81 D0E0      3585            pop     acc
0E83 D090      3586            pop     bits
0E85 32        3587            reti
0E86           3588   ;------------------------------------------------------------
0E86           3589   ;Allocation info for local variables in function 'servo_pick'
0E86           3590   ;------------------------------------------------------------
0E86           3591   ;i                         Allocated with name '_servo_pick_i_1_188'
0E86           3592   ;------------------------------------------------------------
0E86           3593   ;        main.c:861: void servo_pick(){
0E86           3594   ;        -----------------------------------------
0E86           3595   ;         function servo_pick
0E86           3596   ;        -----------------------------------------
0E86           3597   _servo_pick:
0E86           3598   ;        main.c:863: servo_arm = 1;
0E86 904E40    3599            mov     dptr,#_servo_arm
0E89 7401      3600            mov     a,#0x01
0E8B F0        3601            movx    @dptr,a
0E8C           3602   ;        main.c:865: servo_base = 250;
0E8C 904E80    3603            mov     dptr,#_servo_base
0E8F 74FA      3604            mov     a,#0xFA
0E91 F0        3605            movx    @dptr,a
0E92           3606   ;        main.c:866: waitms(200);
0E92 9000C8    3607            mov     dptr,#0x00C8
0E95 120000    3608            lcall   _waitms
0E98           3609   ;        main.c:867: servo_arm = 250;
0E98 904E40    3610            mov     dptr,#_servo_arm
0E9B 74FA      3611            mov     a,#0xFA
0E9D F0        3612            movx    @dptr,a
0E9E           3613   ;        main.c:868: Magnet = 1;
0E9E D295      3614            setb    _P1_5
0EA0           3615   ;        main.c:869: waitms(200);
0EA0 9000C8    3616            mov     dptr,#0x00C8
0EA3 120000    3617            lcall   _waitms
0EA6           3618   ;        main.c:870: for(i = 0; i<89; i++){
0EA6 7A00      3619            mov     r2,#0x00
0EA8 7B00      3620            mov     r3,#0x00
0EAA           3621   L030001?:
0EAA C3        3622            clr     c
0EAB EA        3623            mov     a,r2
0EAC 9459      3624            subb    a,#0x59
0EAE EB        3625            mov     a,r3
0EAF 6480      3626            xrl     a,#0x80
0EB1 9480      3627            subb    a,#0x80
0EB3 5000      3628            jnc     L030004?
0EB5           3629   ;        main.c:871: waitms(5);
0EB5 900005    3630            mov     dptr,#0x0005
0EB8 C002      3631            push    ar2
0EBA C003      3632            push    ar3
0EBC 120000    3633            lcall   _waitms
0EBF D003      3634            pop     ar3
0EC1 D002      3635            pop     ar2
0EC3           3636   ;        main.c:872: servo_base--;
0EC3 904E80    3637            mov     dptr,#_servo_base
0EC6 E0        3638            movx    a,@dptr
0EC7 14        3639            dec     a
0EC8 904E80    3640            mov     dptr,#_servo_base
0ECB F0        3641            movx    @dptr,a
0ECC           3642   ;        main.c:870: for(i = 0; i<89; i++){
0ECC 0A        3643            inc     r2
0ECD BA0070    3644            cjne    r2,#0x00,L030001?
0ED0 0B        3645            inc     r3
0ED1 8000      3646            sjmp    L030001?
0ED3           3647   L030004?:
0ED3           3648   ;        main.c:874: waitms(200);
0ED3 9000C8    3649            mov     dptr,#0x00C8
0ED6 120000    3650            lcall   _waitms
0ED9           3651   ;        main.c:875: for(i = 0; i<159; i++){
0ED9 7A00      3652            mov     r2,#0x00
0EDB 7B00      3653            mov     r3,#0x00
0EDD           3654   L030005?:
0EDD C3        3655            clr     c
0EDE EA        3656            mov     a,r2
0EDF 949F      3657            subb    a,#0x9F
0EE1 EB        3658            mov     a,r3
0EE2 6480      3659            xrl     a,#0x80
0EE4 9480      3660            subb    a,#0x80
0EE6 5000      3661            jnc     L030008?
0EE8           3662   ;        main.c:876: waitms(5);
0EE8 900005    3663            mov     dptr,#0x0005
0EEB C002      3664            push    ar2
0EED C003      3665            push    ar3
0EEF 120000    3666            lcall   _waitms
0EF2 D003      3667            pop     ar3
0EF4 D002      3668            pop     ar2
0EF6           3669   ;        main.c:877: servo_arm--;
0EF6 904E40    3670            mov     dptr,#_servo_arm
0EF9 E0        3671            movx    a,@dptr
0EFA 14        3672            dec     a
0EFB 904E40    3673            mov     dptr,#_servo_arm
0EFE F0        3674            movx    @dptr,a
0EFF           3675   ;        main.c:875: for(i = 0; i<159; i++){
0EFF 0A        3676            inc     r2
0F00 BA00F0    3677            cjne    r2,#0x00,L030005?
0F03 0B        3678            inc     r3
0F04 8000      3679            sjmp    L030005?
0F06           3680   L030008?:
0F06           3681   ;        main.c:879: waitms(200);
0F06 9000C8    3682            mov     dptr,#0x00C8
0F09 120000    3683            lcall   _waitms
0F0C           3684   ;        main.c:880: for(i = 0; i<65; i++){
0F0C 7A00      3685            mov     r2,#0x00
0F0E 7B00      3686            mov     r3,#0x00
0F10           3687   L030009?:
0F10 C3        3688            clr     c
0F11 EA        3689            mov     a,r2
0F12 9441      3690            subb    a,#0x41
0F14 EB        3691            mov     a,r3
0F15 6480      3692            xrl     a,#0x80
0F17 9480      3693            subb    a,#0x80
0F19 5000      3694            jnc     L030012?
0F1B           3695   ;        main.c:881: waitms(5);
0F1B 900005    3696            mov     dptr,#0x0005
0F1E C002      3697            push    ar2
0F20 C003      3698            push    ar3
0F22 120000    3699            lcall   _waitms
0F25 D003      3700            pop     ar3
0F27 D002      3701            pop     ar2
0F29           3702   ;        main.c:882: servo_base--;
0F29 904E80    3703            mov     dptr,#_servo_base
0F2C E0        3704            movx    a,@dptr
0F2D 14        3705            dec     a
0F2E 904E80    3706            mov     dptr,#_servo_base
0F31 F0        3707            movx    @dptr,a
0F32           3708   ;        main.c:880: for(i = 0; i<65; i++){
0F32 0A        3709            inc     r2
0F33 BA0070    3710            cjne    r2,#0x00,L030009?
0F36 0B        3711            inc     r3
0F37 8000      3712            sjmp    L030009?
0F39           3713   L030012?:
0F39           3714   ;        main.c:884: waitms(500);
0F39 9001F4    3715            mov     dptr,#0x01F4
0F3C 120000    3716            lcall   _waitms
0F3F           3717   ;        main.c:885: Magnet = 0;
0F3F C295      3718            clr     _P1_5
0F41           3719   ;        main.c:886: waitms(200);
0F41 9000C8    3720            mov     dptr,#0x00C8
0F44 120000    3721            lcall   _waitms
0F47           3722   ;        main.c:887: servo_arm=1;
0F47 904E40    3723            mov     dptr,#_servo_arm
0F4A 7401      3724            mov     a,#0x01
0F4C F0        3725            movx    @dptr,a
0F4D           3726   ;        main.c:888: servo_base=1;
0F4D 904E80    3727            mov     dptr,#_servo_base
0F50 7401      3728            mov     a,#0x01
0F52 F0        3729            movx    @dptr,a
0F53           3730   ;        main.c:889: return;
0F53 22        3731            ret
0F54           3732   ;------------------------------------------------------------
0F54           3733   ;Allocation info for local variables in function 'check_bound'
0F54           3734   ;------------------------------------------------------------
0F54           3735   ;d2                        Allocated with name '_check_bound_PARM_2'
0F54           3736   ;d1                        Allocated to registers r2 r3 
0F54           3737   ;------------------------------------------------------------
0F54           3738   ;        main.c:892: int check_bound(int d1, int d2){
0F54           3739   ;        -----------------------------------------
0F54           3740   ;         function check_bound
0F54           3741   ;        -----------------------------------------
0F54           3742   _check_bound:
0F54 AA82      3743            mov     r2,dpl
0F56 AB83      3744            mov     r3,dph
0F58           3745   ;        main.c:893: if(d1>12000||d2>12000)      return 1;
0F58 C3        3746            clr     c
0F59 74E0      3747            mov     a,#0xE0
0F5B 9A        3748            subb    a,r2
0F5C 74AE      3749            mov     a,#(0x2E ^ 0x80)
0F5E 8BF0      3750            mov     b,r3
0F60 63F080    3751            xrl     b,#0x80
0F63 95F0      3752            subb    a,b
0F65 4000      3753            jc      L031001?
0F67 74E0      3754            mov     a,#0xE0
0F69 9590      3755            subb    a,_check_bound_PARM_2
0F6B 74AE      3756            mov     a,#(0x2E ^ 0x80)
0F6D 8591F0    3757            mov     b,(_check_bound_PARM_2 + 1)
0F70 63F080    3758            xrl     b,#0x80
0F73 95F0      3759            subb    a,b
0F75 5000      3760            jnc     L031002?
0F77           3761   L031001?:
0F77 900001    3762            mov     dptr,#0x0001
0F7A           3763   ;        main.c:894: else return 0;
0F7A 22        3764            ret
0F7B           3765   L031002?:
0F7B 900000    3766            mov     dptr,#0x0000
0F7E 22        3767            ret
0F7F           3768   ;------------------------------------------------------------
0F7F           3769   ;Allocation info for local variables in function 'Init_all'
0F7F           3770   ;------------------------------------------------------------
0F7F           3771   ;------------------------------------------------------------
0F7F           3772   ;        main.c:897: void Init_all(){
0F7F           3773   ;        -----------------------------------------
0F7F           3774   ;         function Init_all
0F7F           3775   ;        -----------------------------------------
0F7F           3776   _Init_all:
0F7F           3777   ;        main.c:899: Set_Pin_Output(0x24);
0F7F 758224    3778            mov     dpl,#0x24
0F82 120000    3779            lcall   _Set_Pin_Output
0F85           3780   ;        main.c:900: Set_Pin_Output(0x23);
0F85 758223    3781            mov     dpl,#0x23
0F88 120000    3782            lcall   _Set_Pin_Output
0F8B           3783   ;        main.c:901: Set_Pin_Output(0x22);
0F8B 758222    3784            mov     dpl,#0x22
0F8E 120000    3785            lcall   _Set_Pin_Output
0F91           3786   ;        main.c:902: Set_Pin_Output(0x21);
0F91 758221    3787            mov     dpl,#0x21
0F94 120000    3788            lcall   _Set_Pin_Output
0F97           3789   ;        main.c:903: Set_Pin_Output(0x17);
0F97 758217    3790            mov     dpl,#0x17
0F9A 120000    3791            lcall   _Set_Pin_Output
0F9D           3792   ;        main.c:904: Set_Pin_Output(0x16);
0F9D 758216    3793            mov     dpl,#0x16
0FA0 120000    3794            lcall   _Set_Pin_Output
0FA3           3795   ;        main.c:905: Set_Pin_Output(0x15);
0FA3 758215    3796            mov     dpl,#0x15
0FA6 120000    3797            lcall   _Set_Pin_Output
0FA9           3798   ;        main.c:906: Set_Pin_Output(0x10); // CS
0FA9 758210    3799            mov     dpl,#0x10
0FAC 120000    3800            lcall   _Set_Pin_Output
0FAF           3801   ;        main.c:908: Set_Pin_Input(0x30);
0FAF 758230    3802            mov     dpl,#0x30
0FB2 120000    3803            lcall   _Set_Pin_Input
0FB5           3804   ;        main.c:909: Set_Pin_Output(0x25); // CLK for Load
0FB5 758225    3805            mov     dpl,#0x25
0FB8 120000    3806            lcall   _Set_Pin_Output
0FBB           3807   ;        main.c:910: Set_Pin_Input(0x26);
0FBB 758226    3808            mov     dpl,#0x26
0FBE 120000    3809            lcall   _Set_Pin_Input
0FC1           3810   ;        main.c:913: InitPinADC(1,3);
0FC1 75E003    3811            mov     _InitPinADC_PARM_2,#0x03
0FC4 758201    3812            mov     dpl,#0x01
0FC7 120000    3813            lcall   _InitPinADC
0FCA           3814   ;        main.c:914: InitPinADC(1,4);
0FCA 75E004    3815            mov     _InitPinADC_PARM_2,#0x04
0FCD 758201    3816            mov     dpl,#0x01
0FD0 120000    3817            lcall   _InitPinADC
0FD3           3818   ;        main.c:915: InitADC();
0FD3 120000    3819            lcall   _InitADC
0FD6           3820   ;        main.c:917: TMOD&=0b_1111_0000; 
0FD6 5389F0    3821            anl     _TMOD,#0xF0
0FD9           3822   ;        main.c:918: TMOD|=0b_0000_0001; 
0FD9 438901    3823            orl     _TMOD,#0x01
0FDC           3824   ;        main.c:919: TR0=0; 
0FDC C28C      3825            clr     _TR0
0FDE           3826   ;        main.c:921: Servo_arm=0;
0FDE C296      3827            clr     _P1_6
0FE0           3828   ;        main.c:922: Servo_base=0;
0FE0 C297      3829            clr     _P1_7
0FE2           3830   ;        main.c:923: Magnet = 0;
0FE2 C295      3831            clr     _P1_5
0FE4           3832   ;        main.c:924: PD_SCK = 0;
0FE4 C2A5      3833            clr     _P2_5
0FE6           3834   ;        main.c:925: return;
0FE6 22        3835            ret
0FE7           3836   ;------------------------------------------------------------
0FE7           3837   ;Allocation info for local variables in function 'Move_back_ms'
0FE7           3838   ;------------------------------------------------------------
0FE7           3839   ;ms                        Allocated to registers r2 r3 
0FE7           3840   ;------------------------------------------------------------
0FE7           3841   ;        main.c:928: void Move_back_ms(int ms){
0FE7           3842   ;        -----------------------------------------
0FE7           3843   ;         function Move_back_ms
0FE7           3844   ;        -----------------------------------------
0FE7           3845   _Move_back_ms:
0FE7 AA82      3846            mov     r2,dpl
0FE9 AB83      3847            mov     r3,dph
0FEB           3848   ;        main.c:930: L_motor_dir = 1;
0FEB 904F00    3849            mov     dptr,#_L_motor_dir
0FEE 7401      3850            mov     a,#0x01
0FF0 F0        3851            movx    @dptr,a
0FF1           3852   ;        main.c:931: R_motor_dir = 1;
0FF1 904EC0    3853            mov     dptr,#_R_motor_dir
0FF4 7401      3854            mov     a,#0x01
0FF6 F0        3855            movx    @dptr,a
0FF7           3856   ;        main.c:933: pwm_left = 50;
0FF7 904F80    3857            mov     dptr,#_pwm_left
0FFA 7432      3858            mov     a,#0x32
0FFC F0        3859            movx    @dptr,a
0FFD           3860   ;        main.c:934: pwm_right = 50;
0FFD 904F40    3861            mov     dptr,#_pwm_right
1000 7432      3862            mov     a,#0x32
1002 F0        3863            movx    @dptr,a
1003           3864   ;        main.c:936: waitms(ms);
1003 8A82      3865            mov     dpl,r2
1005 8B83      3866            mov     dph,r3
1007 120000    3867            lcall   _waitms
100A           3868   ;        main.c:938: L_motor_dir = 0;
100A 904F00    3869            mov     dptr,#_L_motor_dir
100D           3870   ;        main.c:939: R_motor_dir = 0;
100D           3871   ;        main.c:940: pwm_left = 0;
100D           3872   ;        main.c:941: pwm_right = 0;
100D E4        3873            clr     a
100E F0        3874            movx    @dptr,a
100F 904EC0    3875            mov     dptr,#_R_motor_dir
1012 F0        3876            movx    @dptr,a
1013 904F80    3877            mov     dptr,#_pwm_left
1016 F0        3878            movx    @dptr,a
1017 904F40    3879            mov     dptr,#_pwm_right
101A F0        3880            movx    @dptr,a
101B           3881   ;        main.c:942: return;
101B 22        3882            ret
101C           3883   ;------------------------------------------------------------
101C           3884   ;Allocation info for local variables in function 'Right_angle'
101C           3885   ;------------------------------------------------------------
101C           3886   ;angle                     Allocated to registers r2 r3 
101C           3887   ;------------------------------------------------------------
101C           3888   ;        main.c:945: void Right_angle(int angle){
101C           3889   ;        -----------------------------------------
101C           3890   ;         function Right_angle
101C           3891   ;        -----------------------------------------
101C           3892   _Right_angle:
101C AA82      3893            mov     r2,dpl
101E AB83      3894            mov     r3,dph
1020           3895   ;        main.c:947: L_motor_dir = 1;
1020 904F00    3896            mov     dptr,#_L_motor_dir
1023 7401      3897            mov     a,#0x01
1025 F0        3898            movx    @dptr,a
1026           3899   ;        main.c:948: R_motor_dir = 0;
1026 904EC0    3900            mov     dptr,#_R_motor_dir
1029 E4        3901            clr     a
102A F0        3902            movx    @dptr,a
102B           3903   ;        main.c:949: pwm_left = 80;
102B 904F80    3904            mov     dptr,#_pwm_left
102E 7450      3905            mov     a,#0x50
1030 F0        3906            movx    @dptr,a
1031           3907   ;        main.c:950: pwm_right = 80 * pwm_corr;
1031 C002      3908            push    ar2
1033 C003      3909            push    ar3
1035 904C30    3910            mov     dptr,#_pwm_corr
1038 E0        3911            movx    a,@dptr
1039 C0E0      3912            push    acc
103B A3        3913            inc     dptr
103C E0        3914            movx    a,@dptr
103D C0E0      3915            push    acc
103F A3        3916            inc     dptr
1040 E0        3917            movx    a,@dptr
1041 C0E0      3918            push    acc
1043 A3        3919            inc     dptr
1044 E0        3920            movx    a,@dptr
1045 C0E0      3921            push    acc
1047 900000    3922            mov     dptr,#0x0000
104A 75F0A0    3923            mov     b,#0xA0
104D 7442      3924            mov     a,#0x42
104F 120000    3925            lcall   ___fsmul
1052 AC82      3926            mov     r4,dpl
1054 AD83      3927            mov     r5,dph
1056 AEF0      3928            mov     r6,b
1058 FF        3929            mov     r7,a
1059 E581      3930            mov     a,sp
105B 24FC      3931            add     a,#0xfc
105D F581      3932            mov     sp,a
105F 8C82      3933            mov     dpl,r4
1061 8D83      3934            mov     dph,r5
1063 8EF0      3935            mov     b,r6
1065 EF        3936            mov     a,r7
1066 120000    3937            lcall   ___fs2uchar
1069 E582      3938            mov     a,dpl
106B D003      3939            pop     ar3
106D D002      3940            pop     ar2
106F 904F40    3941            mov     dptr,#_pwm_right
1072 F0        3942            movx    @dptr,a
1073           3943   ;        main.c:952: waitms(angle);
1073 8A82      3944            mov     dpl,r2
1075 8B83      3945            mov     dph,r3
1077 120000    3946            lcall   _waitms
107A           3947   ;        main.c:954: L_motor_dir = 0;
107A 904F00    3948            mov     dptr,#_L_motor_dir
107D           3949   ;        main.c:955: R_motor_dir = 0;
107D           3950   ;        main.c:956: pwm_left = 0;
107D           3951   ;        main.c:957: pwm_right = 0;
107D E4        3952            clr     a
107E F0        3953            movx    @dptr,a
107F 904EC0    3954            mov     dptr,#_R_motor_dir
1082 F0        3955            movx    @dptr,a
1083 904F80    3956            mov     dptr,#_pwm_left
1086 F0        3957            movx    @dptr,a
1087 904F40    3958            mov     dptr,#_pwm_right
108A F0        3959            movx    @dptr,a
108B           3960   ;        main.c:958: return;
108B 22        3961            ret
108C           3962   ;------------------------------------------------------------
108C           3963   ;Allocation info for local variables in function 'Move_forward'
108C           3964   ;------------------------------------------------------------
108C           3965   ;------------------------------------------------------------
108C           3966   ;        main.c:961: void Move_forward(){
108C           3967   ;        -----------------------------------------
108C           3968   ;         function Move_forward
108C           3969   ;        -----------------------------------------
108C           3970   _Move_forward:
108C           3971   ;        main.c:963: L_motor_dir = 0;
108C 904F00    3972            mov     dptr,#_L_motor_dir
108F           3973   ;        main.c:964: R_motor_dir = 0;
108F E4        3974            clr     a
1090 F0        3975            movx    @dptr,a
1091 904EC0    3976            mov     dptr,#_R_motor_dir
1094 F0        3977            movx    @dptr,a
1095           3978   ;        main.c:965: pwm_left = 60;
1095 904F80    3979            mov     dptr,#_pwm_left
1098 743C      3980            mov     a,#0x3C
109A F0        3981            movx    @dptr,a
109B           3982   ;        main.c:966: pwm_right = 60 * pwm_corr;
109B 904C30    3983            mov     dptr,#_pwm_corr
109E E0        3984            movx    a,@dptr
109F C0E0      3985            push    acc
10A1 A3        3986            inc     dptr
10A2 E0        3987            movx    a,@dptr
10A3 C0E0      3988            push    acc
10A5 A3        3989            inc     dptr
10A6 E0        3990            movx    a,@dptr
10A7 C0E0      3991            push    acc
10A9 A3        3992            inc     dptr
10AA E0        3993            movx    a,@dptr
10AB C0E0      3994            push    acc
10AD 900000    3995            mov     dptr,#0x0000
10B0 75F070    3996            mov     b,#0x70
10B3 7442      3997            mov     a,#0x42
10B5 120000    3998            lcall   ___fsmul
10B8 AA82      3999            mov     r2,dpl
10BA AB83      4000            mov     r3,dph
10BC ACF0      4001            mov     r4,b
10BE FD        4002            mov     r5,a
10BF E581      4003            mov     a,sp
10C1 24FC      4004            add     a,#0xfc
10C3 F581      4005            mov     sp,a
10C5 8A82      4006            mov     dpl,r2
10C7 8B83      4007            mov     dph,r3
10C9 8CF0      4008            mov     b,r4
10CB ED        4009            mov     a,r5
10CC 120000    4010            lcall   ___fs2uchar
10CF E582      4011            mov     a,dpl
10D1 904F40    4012            mov     dptr,#_pwm_right
10D4 F0        4013            movx    @dptr,a
10D5           4014   ;        main.c:967: return;
10D5 22        4015            ret
10D6           4016   ;------------------------------------------------------------
10D6           4017   ;Allocation info for local variables in function 'simple_rand'
10D6           4018   ;------------------------------------------------------------
10D6           4019   ;------------------------------------------------------------
10D6           4020   ;        main.c:970: unsigned int simple_rand() {
10D6           4021   ;        -----------------------------------------
10D6           4022   ;         function simple_rand
10D6           4023   ;        -----------------------------------------
10D6           4024   _simple_rand:
10D6           4025   ;        main.c:971: seed = (seed * 25173 + 13849) & 0xFFFF;  
10D6 904C70    4026            mov     dptr,#_seed
10D9 E0        4027            movx    a,@dptr
10DA F500      4028            mov     __mulint_PARM_2,a
10DC A3        4029            inc     dptr
10DD E0        4030            movx    a,@dptr
10DE F501      4031            mov     (__mulint_PARM_2 + 1),a
10E0 906255    4032            mov     dptr,#0x6255
10E3 120000    4033            lcall   __mulint
10E6 E582      4034            mov     a,dpl
10E8 8583F0    4035            mov     b,dph
10EB 904C70    4036            mov     dptr,#_seed
10EE 2419      4037            add     a,#0x19
10F0 F0        4038            movx    @dptr,a
10F1 7436      4039            mov     a,#0x36
10F3 35F0      4040            addc    a,b
10F5 A3        4041            inc     dptr
10F6 F0        4042            movx    @dptr,a
10F7           4043   ;        main.c:972: return seed;     
10F7 904C70    4044            mov     dptr,#_seed
10FA E0        4045            movx    a,@dptr
10FB FA        4046            mov     r2,a
10FC A3        4047            inc     dptr
10FD E0        4048            movx    a,@dptr
10FE 8A82      4049            mov     dpl,r2
1100 F583      4050            mov     dph,a
1102 22        4051            ret
1103           4052   ;------------------------------------------------------------
1103           4053   ;Allocation info for local variables in function 'get_random_90_250'
1103           4054   ;------------------------------------------------------------
1103           4055   ;------------------------------------------------------------
1103           4056   ;        main.c:975: unsigned int get_random_90_250() {
1103           4057   ;        -----------------------------------------
1103           4058   ;         function get_random_90_250
1103           4059   ;        -----------------------------------------
1103           4060   _get_random_90_250:
1103           4061   ;        main.c:976: return (simple_rand() % (250 - 85 + 1)) + 85;
1103 120000    4062            lcall   _simple_rand
1106 7500A6    4063            mov     __moduint_PARM_2,#0xA6
1109 E4        4064            clr     a
110A F501      4065            mov     (__moduint_PARM_2 + 1),a
110C 120000    4066            lcall   __moduint
110F E582      4067            mov     a,dpl
1111 8583F0    4068            mov     b,dph
1114 2455      4069            add     a,#0x55
1116 F582      4070            mov     dpl,a
1118 E4        4071            clr     a
1119 35F0      4072            addc    a,b
111B F583      4073            mov     dph,a
111D 22        4074            ret
111E           4075   ;------------------------------------------------------------
111E           4076   ;Allocation info for local variables in function 'Read_angle'
111E           4077   ;------------------------------------------------------------
111E           4078   ;sloc0                     Allocated with name '_Read_angle_sloc0_1_0'
111E           4079   ;i                         Allocated with name '_Read_angle_i_1_203'
111E           4080   ;mag_x                     Allocated with name '_Read_angle_mag_x_1_203'
111E           4081   ;mag_y                     Allocated with name '_Read_angle_mag_y_1_203'
111E           4082   ;sum_x                     Allocated with name '_Read_angle_sum_x_1_203'
111E           4083   ;sum_y                     Allocated with name '_Read_angle_sum_y_1_203'
111E           4084   ;angle                     Allocated with name '_Read_angle_angle_1_203'
111E           4085   ;------------------------------------------------------------
111E           4086   ;        main.c:979: float Read_angle(void)
111E           4087   ;        -----------------------------------------
111E           4088   ;         function Read_angle
111E           4089   ;        -----------------------------------------
111E           4090   _Read_angle:
111E           4091   ;        main.c:986: sum_x = 0.0; sum_y = 0.0;
111E 90CEE0    4092            mov     dptr,#_Read_angle_sum_x_1_203
1121 E4        4093            clr     a
1122 F0        4094            movx    @dptr,a
1123 A3        4095            inc     dptr
1124 F0        4096            movx    @dptr,a
1125 A3        4097            inc     dptr
1126 F0        4098            movx    @dptr,a
1127 A3        4099            inc     dptr
1128 F0        4100            movx    @dptr,a
1129 90CF30    4101            mov     dptr,#_Read_angle_sum_y_1_203
112C F0        4102            movx    @dptr,a
112D A3        4103            inc     dptr
112E E4        4104            clr     a
112F F0        4105            movx    @dptr,a
1130 A3        4106            inc     dptr
1131 F0        4107            movx    @dptr,a
1132 A3        4108            inc     dptr
1133 F0        4109            movx    @dptr,a
1134           4110   ;        main.c:989: for (i = 0; i < 10; i++){
1134 7A00      4111            mov     r2,#0x00
1136           4112   L038005?:
1136 BA0A40    4113            cjne    r2,#0x0A,L038016?
1139           4114   L038016?:
1139 4000      4115            jc      L038017?
113B 020000    4116            ljmp    L038008?
113E           4117   L038017?:
113E           4118   ;        main.c:990: BMM150_Read_Data(&mag_x, &mag_y);
113E 75A090    4119            mov     _BMM150_Read_Data_PARM_2,#_Read_angle_mag_y_1_203
1141 75A1CE    4120            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_Read_angle_mag_y_1_203 >> 8)
1144 75A200    4121            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
1147 90CE40    4122            mov     dptr,#_Read_angle_mag_x_1_203
114A 75F000    4123            mov     b,#0x00
114D C002      4124            push    ar2
114F 120000    4125            lcall   _BMM150_Read_Data
1152           4126   ;        main.c:991: sum_x += (float)mag_x; 
1152 90CE40    4127            mov     dptr,#_Read_angle_mag_x_1_203
1155 E0        4128            movx    a,@dptr
1156 FB        4129            mov     r3,a
1157 A3        4130            inc     dptr
1158 E0        4131            movx    a,@dptr
1159 FC        4132            mov     r4,a
115A 8B82      4133            mov     dpl,r3
115C 8C83      4134            mov     dph,r4
115E 120000    4135            lcall   ___sint2fs
1161 858290    4136            mov     _Read_angle_sloc0_1_0,dpl
1164 858391    4137            mov     (_Read_angle_sloc0_1_0 + 1),dph
1167 85F092    4138            mov     (_Read_angle_sloc0_1_0 + 2),b
116A F593      4139            mov     (_Read_angle_sloc0_1_0 + 3),a
116C 90CEE0    4140            mov     dptr,#_Read_angle_sum_x_1_203
116F E0        4141            movx    a,@dptr
1170 FF        4142            mov     r7,a
1171 A3        4143            inc     dptr
1172 E0        4144            movx    a,@dptr
1173 F8        4145            mov     r0,a
1174 A3        4146            inc     dptr
1175 E0        4147            movx    a,@dptr
1176 F9        4148            mov     r1,a
1177 A3        4149            inc     dptr
1178 E0        4150            movx    a,@dptr
1179 FB        4151            mov     r3,a
117A C090      4152            push    _Read_angle_sloc0_1_0
117C C091      4153            push    (_Read_angle_sloc0_1_0 + 1)
117E C092      4154            push    (_Read_angle_sloc0_1_0 + 2)
1180 C093      4155            push    (_Read_angle_sloc0_1_0 + 3)
1182 8F82      4156            mov     dpl,r7
1184 8883      4157            mov     dph,r0
1186 89F0      4158            mov     b,r1
1188 EB        4159            mov     a,r3
1189 120000    4160            lcall   ___fsadd
118C AB82      4161            mov     r3,dpl
118E AC83      4162            mov     r4,dph
1190 ADF0      4163            mov     r5,b
1192 FE        4164            mov     r6,a
1193 E581      4165            mov     a,sp
1195 24FC      4166            add     a,#0xfc
1197 F581      4167            mov     sp,a
1199 90CEE0    4168            mov     dptr,#_Read_angle_sum_x_1_203
119C EB        4169            mov     a,r3
119D F0        4170            movx    @dptr,a
119E A3        4171            inc     dptr
119F EC        4172            mov     a,r4
11A0 F0        4173            movx    @dptr,a
11A1 A3        4174            inc     dptr
11A2 ED        4175            mov     a,r5
11A3 F0        4176            movx    @dptr,a
11A4 A3        4177            inc     dptr
11A5 EE        4178            mov     a,r6
11A6 F0        4179            movx    @dptr,a
11A7           4180   ;        main.c:992: sum_y += (float)mag_y; 
11A7 90CE90    4181            mov     dptr,#_Read_angle_mag_y_1_203
11AA E0        4182            movx    a,@dptr
11AB FB        4183            mov     r3,a
11AC A3        4184            inc     dptr
11AD E0        4185            movx    a,@dptr
11AE FC        4186            mov     r4,a
11AF 8B82      4187            mov     dpl,r3
11B1 8C83      4188            mov     dph,r4
11B3 120000    4189            lcall   ___sint2fs
11B6 858290    4190            mov     _Read_angle_sloc0_1_0,dpl
11B9 858391    4191            mov     (_Read_angle_sloc0_1_0 + 1),dph
11BC 85F092    4192            mov     (_Read_angle_sloc0_1_0 + 2),b
11BF F593      4193            mov     (_Read_angle_sloc0_1_0 + 3),a
11C1 90CF30    4194            mov     dptr,#_Read_angle_sum_y_1_203
11C4 E0        4195            movx    a,@dptr
11C5 FF        4196            mov     r7,a
11C6 A3        4197            inc     dptr
11C7 E0        4198            movx    a,@dptr
11C8 F8        4199            mov     r0,a
11C9 A3        4200            inc     dptr
11CA E0        4201            movx    a,@dptr
11CB F9        4202            mov     r1,a
11CC A3        4203            inc     dptr
11CD E0        4204            movx    a,@dptr
11CE FB        4205            mov     r3,a
11CF C090      4206            push    _Read_angle_sloc0_1_0
11D1 C091      4207            push    (_Read_angle_sloc0_1_0 + 1)
11D3 C092      4208            push    (_Read_angle_sloc0_1_0 + 2)
11D5 C093      4209            push    (_Read_angle_sloc0_1_0 + 3)
11D7 8F82      4210            mov     dpl,r7
11D9 8883      4211            mov     dph,r0
11DB 89F0      4212            mov     b,r1
11DD EB        4213            mov     a,r3
11DE 120000    4214            lcall   ___fsadd
11E1 AB82      4215            mov     r3,dpl
11E3 AC83      4216            mov     r4,dph
11E5 ADF0      4217            mov     r5,b
11E7 FE        4218            mov     r6,a
11E8 E581      4219            mov     a,sp
11EA 24FC      4220            add     a,#0xfc
11EC F581      4221            mov     sp,a
11EE 90CF30    4222            mov     dptr,#_Read_angle_sum_y_1_203
11F1 EB        4223            mov     a,r3
11F2 F0        4224            movx    @dptr,a
11F3 A3        4225            inc     dptr
11F4 EC        4226            mov     a,r4
11F5 F0        4227            movx    @dptr,a
11F6 A3        4228            inc     dptr
11F7 ED        4229            mov     a,r5
11F8 F0        4230            movx    @dptr,a
11F9 A3        4231            inc     dptr
11FA EE        4232            mov     a,r6
11FB F0        4233            movx    @dptr,a
11FC           4234   ;        main.c:993: waitms(1);
11FC 900001    4235            mov     dptr,#0x0001
11FF 120000    4236            lcall   _waitms
1202 D002      4237            pop     ar2
1204           4238   ;        main.c:989: for (i = 0; i < 10; i++){
1204 0A        4239            inc     r2
1205 020000    4240            ljmp    L038005?
1208           4241   L038008?:
1208           4242   ;        main.c:995: angle = atan2f(sum_y/25.0, sum_x/25.0) * 180.0 / M_PI;
1208 90CF30    4243            mov     dptr,#_Read_angle_sum_y_1_203
120B E0        4244            movx    a,@dptr
120C FA        4245            mov     r2,a
120D A3        4246            inc     dptr
120E E0        4247            movx    a,@dptr
120F FB        4248            mov     r3,a
1210 A3        4249            inc     dptr
1211 E0        4250            movx    a,@dptr
1212 FC        4251            mov     r4,a
1213 A3        4252            inc     dptr
1214 E0        4253            movx    a,@dptr
1215 FD        4254            mov     r5,a
1216 E4        4255            clr     a
1217 C0E0      4256            push    acc
1219 C0E0      4257            push    acc
121B 74C8      4258            mov     a,#0xC8
121D C0E0      4259            push    acc
121F 7441      4260            mov     a,#0x41
1221 C0E0      4261            push    acc
1223 8A82      4262            mov     dpl,r2
1225 8B83      4263            mov     dph,r3
1227 8CF0      4264            mov     b,r4
1229 ED        4265            mov     a,r5
122A 120000    4266            lcall   ___fsdiv
122D AA82      4267            mov     r2,dpl
122F AB83      4268            mov     r3,dph
1231 ACF0      4269            mov     r4,b
1233 FD        4270            mov     r5,a
1234 E581      4271            mov     a,sp
1236 24FC      4272            add     a,#0xfc
1238 F581      4273            mov     sp,a
123A 90CEE0    4274            mov     dptr,#_Read_angle_sum_x_1_203
123D E0        4275            movx    a,@dptr
123E FE        4276            mov     r6,a
123F A3        4277            inc     dptr
1240 E0        4278            movx    a,@dptr
1241 FF        4279            mov     r7,a
1242 A3        4280            inc     dptr
1243 E0        4281            movx    a,@dptr
1244 F8        4282            mov     r0,a
1245 A3        4283            inc     dptr
1246 E0        4284            movx    a,@dptr
1247 F9        4285            mov     r1,a
1248 C002      4286            push    ar2
124A C003      4287            push    ar3
124C C004      4288            push    ar4
124E C005      4289            push    ar5
1250 E4        4290            clr     a
1251 C0E0      4291            push    acc
1253 C0E0      4292            push    acc
1255 74C8      4293            mov     a,#0xC8
1257 C0E0      4294            push    acc
1259 7441      4295            mov     a,#0x41
125B C0E0      4296            push    acc
125D 8E82      4297            mov     dpl,r6
125F 8F83      4298            mov     dph,r7
1261 88F0      4299            mov     b,r0
1263 E9        4300            mov     a,r1
1264 120000    4301            lcall   ___fsdiv
1267 858200    4302            mov     _atan2f_PARM_2,dpl
126A 858301    4303            mov     (_atan2f_PARM_2 + 1),dph
126D 85F002    4304            mov     (_atan2f_PARM_2 + 2),b
1270 F503      4305            mov     (_atan2f_PARM_2 + 3),a
1272 E581      4306            mov     a,sp
1274 24FC      4307            add     a,#0xfc
1276 F581      4308            mov     sp,a
1278 D005      4309            pop     ar5
127A D004      4310            pop     ar4
127C D003      4311            pop     ar3
127E D002      4312            pop     ar2
1280 8A82      4313            mov     dpl,r2
1282 8B83      4314            mov     dph,r3
1284 8CF0      4315            mov     b,r4
1286 ED        4316            mov     a,r5
1287 120000    4317            lcall   _atan2f
128A AA82      4318            mov     r2,dpl
128C AB83      4319            mov     r3,dph
128E ACF0      4320            mov     r4,b
1290 FD        4321            mov     r5,a
1291 C002      4322            push    ar2
1293 C003      4323            push    ar3
1295 C004      4324            push    ar4
1297 C005      4325            push    ar5
1299 900000    4326            mov     dptr,#0x0000
129C 75F034    4327            mov     b,#0x34
129F 7443      4328            mov     a,#0x43
12A1 120000    4329            lcall   ___fsmul
12A4 AA82      4330            mov     r2,dpl
12A6 AB83      4331            mov     r3,dph
12A8 ACF0      4332            mov     r4,b
12AA FD        4333            mov     r5,a
12AB E581      4334            mov     a,sp
12AD 24FC      4335            add     a,#0xfc
12AF F581      4336            mov     sp,a
12B1 74DB      4337            mov     a,#0xDB
12B3 C0E0      4338            push    acc
12B5 740F      4339            mov     a,#0x0F
12B7 C0E0      4340            push    acc
12B9 7449      4341            mov     a,#0x49
12BB C0E0      4342            push    acc
12BD 7440      4343            mov     a,#0x40
12BF C0E0      4344            push    acc
12C1 8A82      4345            mov     dpl,r2
12C3 8B83      4346            mov     dph,r3
12C5 8CF0      4347            mov     b,r4
12C7 ED        4348            mov     a,r5
12C8 120000    4349            lcall   ___fsdiv
12CB AA82      4350            mov     r2,dpl
12CD AB83      4351            mov     r3,dph
12CF ACF0      4352            mov     r4,b
12D1 FD        4353            mov     r5,a
12D2 E581      4354            mov     a,sp
12D4 24FC      4355            add     a,#0xfc
12D6 F581      4356            mov     sp,a
12D8 90CF80    4357            mov     dptr,#_Read_angle_angle_1_203
12DB EA        4358            mov     a,r2
12DC F0        4359            movx    @dptr,a
12DD A3        4360            inc     dptr
12DE EB        4361            mov     a,r3
12DF F0        4362            movx    @dptr,a
12E0 A3        4363            inc     dptr
12E1 EC        4364            mov     a,r4
12E2 F0        4365            movx    @dptr,a
12E3 A3        4366            inc     dptr
12E4 ED        4367            mov     a,r5
12E5 F0        4368            movx    @dptr,a
12E6           4369   ;        main.c:996: if (angle < 0.0) angle += 360.0; 
12E6 C002      4370            push    ar2
12E8 C003      4371            push    ar3
12EA C004      4372            push    ar4
12EC C005      4373            push    ar5
12EE E4        4374            clr     a
12EF C0E0      4375            push    acc
12F1 C0E0      4376            push    acc
12F3 C0E0      4377            push    acc
12F5 C0E0      4378            push    acc
12F7 8A82      4379            mov     dpl,r2
12F9 8B83      4380            mov     dph,r3
12FB 8CF0      4381            mov     b,r4
12FD ED        4382            mov     a,r5
12FE 120000    4383            lcall   ___fslt
1301 AE82      4384            mov     r6,dpl
1303 E581      4385            mov     a,sp
1305 24FC      4386            add     a,#0xfc
1307 F581      4387            mov     sp,a
1309 D005      4388            pop     ar5
130B D004      4389            pop     ar4
130D D003      4390            pop     ar3
130F D002      4391            pop     ar2
1311 EE        4392            mov     a,r6
1312 6000      4393            jz      L038002?
1314 E4        4394            clr     a
1315 C0E0      4395            push    acc
1317 C0E0      4396            push    acc
1319 74B4      4397            mov     a,#0xB4
131B C0E0      4398            push    acc
131D 7443      4399            mov     a,#0x43
131F C0E0      4400            push    acc
1321 8A82      4401            mov     dpl,r2
1323 8B83      4402            mov     dph,r3
1325 8CF0      4403            mov     b,r4
1327 ED        4404            mov     a,r5
1328 120000    4405            lcall   ___fsadd
132B AA82      4406            mov     r2,dpl
132D AB83      4407            mov     r3,dph
132F ACF0      4408            mov     r4,b
1331 FD        4409            mov     r5,a
1332 E581      4410            mov     a,sp
1334 24FC      4411            add     a,#0xfc
1336 F581      4412            mov     sp,a
1338 90CF80    4413            mov     dptr,#_Read_angle_angle_1_203
133B EA        4414            mov     a,r2
133C F0        4415            movx    @dptr,a
133D A3        4416            inc     dptr
133E EB        4417            mov     a,r3
133F F0        4418            movx    @dptr,a
1340 A3        4419            inc     dptr
1341 EC        4420            mov     a,r4
1342 F0        4421            movx    @dptr,a
1343 A3        4422            inc     dptr
1344 ED        4423            mov     a,r5
1345 F0        4424            movx    @dptr,a
1346           4425   L038002?:
1346           4426   ;        main.c:997: if (angle > 360.0) angle -= 360.0; 
1346 90CF80    4427            mov     dptr,#_Read_angle_angle_1_203
1349 E0        4428            movx    a,@dptr
134A FA        4429            mov     r2,a
134B A3        4430            inc     dptr
134C E0        4431            movx    a,@dptr
134D FB        4432            mov     r3,a
134E A3        4433            inc     dptr
134F E0        4434            movx    a,@dptr
1350 FC        4435            mov     r4,a
1351 A3        4436            inc     dptr
1352 E0        4437            movx    a,@dptr
1353 FD        4438            mov     r5,a
1354 C002      4439            push    ar2
1356 C003      4440            push    ar3
1358 C004      4441            push    ar4
135A C005      4442            push    ar5
135C E4        4443            clr     a
135D C0E0      4444            push    acc
135F C0E0      4445            push    acc
1361 74B4      4446            mov     a,#0xB4
1363 C0E0      4447            push    acc
1365 7443      4448            mov     a,#0x43
1367 C0E0      4449            push    acc
1369 8A82      4450            mov     dpl,r2
136B 8B83      4451            mov     dph,r3
136D 8CF0      4452            mov     b,r4
136F ED        4453            mov     a,r5
1370 120000    4454            lcall   ___fsgt
1373 AE82      4455            mov     r6,dpl
1375 E581      4456            mov     a,sp
1377 24FC      4457            add     a,#0xfc
1379 F581      4458            mov     sp,a
137B D005      4459            pop     ar5
137D D004      4460            pop     ar4
137F D003      4461            pop     ar3
1381 D002      4462            pop     ar2
1383 EE        4463            mov     a,r6
1384 6000      4464            jz      L038004?
1386 E4        4465            clr     a
1387 C0E0      4466            push    acc
1389 C0E0      4467            push    acc
138B 74B4      4468            mov     a,#0xB4
138D C0E0      4469            push    acc
138F 7443      4470            mov     a,#0x43
1391 C0E0      4471            push    acc
1393 8A82      4472            mov     dpl,r2
1395 8B83      4473            mov     dph,r3
1397 8CF0      4474            mov     b,r4
1399 ED        4475            mov     a,r5
139A 120000    4476            lcall   ___fssub
139D AA82      4477            mov     r2,dpl
139F AB83      4478            mov     r3,dph
13A1 ACF0      4479            mov     r4,b
13A3 FD        4480            mov     r5,a
13A4 E581      4481            mov     a,sp
13A6 24FC      4482            add     a,#0xfc
13A8 F581      4483            mov     sp,a
13AA 90CF80    4484            mov     dptr,#_Read_angle_angle_1_203
13AD EA        4485            mov     a,r2
13AE F0        4486            movx    @dptr,a
13AF A3        4487            inc     dptr
13B0 EB        4488            mov     a,r3
13B1 F0        4489            movx    @dptr,a
13B2 A3        4490            inc     dptr
13B3 EC        4491            mov     a,r4
13B4 F0        4492            movx    @dptr,a
13B5 A3        4493            inc     dptr
13B6 ED        4494            mov     a,r5
13B7 F0        4495            movx    @dptr,a
13B8           4496   L038004?:
13B8           4497   ;        main.c:998: return angle; 
13B8 90CF80    4498            mov     dptr,#_Read_angle_angle_1_203
13BB E0        4499            movx    a,@dptr
13BC FA        4500            mov     r2,a
13BD A3        4501            inc     dptr
13BE E0        4502            movx    a,@dptr
13BF FB        4503            mov     r3,a
13C0 A3        4504            inc     dptr
13C1 E0        4505            movx    a,@dptr
13C2 FC        4506            mov     r4,a
13C3 A3        4507            inc     dptr
13C4 E0        4508            movx    a,@dptr
13C5 8A82      4509            mov     dpl,r2
13C7 8B83      4510            mov     dph,r3
13C9 8CF0      4511            mov     b,r4
13CB 22        4512            ret
13CC           4513   ;------------------------------------------------------------
13CC           4514   ;Allocation info for local variables in function 'Auto_mode_slave'
13CC           4515   ;------------------------------------------------------------
13CC           4516   ;sloc0                     Allocated with name '_Auto_mode_slave_sloc0_1_0'
13CC           4517   ;sloc1                     Allocated with name '_Auto_mode_slave_sloc1_1_0'
13CC           4518   ;count                     Allocated with name '_Auto_mode_slave_count_1_205'
13CC           4519   ;command                   Allocated with name '_Auto_mode_slave_command_1_205'
13CC           4520   ;state_res                 Allocated with name '_Auto_mode_slave_state_res_1_205'
13CC           4521   ;bound                     Allocated with name '_Auto_mode_slave_bound_1_205'
13CC           4522   ;c                         Allocated with name '_Auto_mode_slave_c_1_205'
13CC           4523   ;dummy                     Allocated with name '_Auto_mode_slave_dummy_1_205'
13CC           4524   ;angle                     Allocated with name '_Auto_mode_slave_angle_1_205'
13CC           4525   ;------------------------------------------------------------
13CC           4526   ;        main.c:1001: void Auto_mode_slave(){
13CC           4527   ;        -----------------------------------------
13CC           4528   ;         function Auto_mode_slave
13CC           4529   ;        -----------------------------------------
13CC           4530   _Auto_mode_slave:
13CC           4531   ;        main.c:1004: xdata int state_res = 1;
13CC 90D030    4532            mov     dptr,#_Auto_mode_slave_state_res_1_205
13CF 7401      4533            mov     a,#0x01
13D1 F0        4534            movx    @dptr,a
13D2 E4        4535            clr     a
13D3 A3        4536            inc     dptr
13D4 F0        4537            movx    @dptr,a
13D5           4538   ;        main.c:1011: while(count < 20 && state_res){
13D5 E4        4539            clr     a
13D6 F5E0      4540            mov     _Auto_mode_slave_sloc0_1_0,a
13D8 F5E1      4541            mov     (_Auto_mode_slave_sloc0_1_0 + 1),a
13DA           4542   L039018?:
13DA C3        4543            clr     c
13DB E5E0      4544            mov     a,_Auto_mode_slave_sloc0_1_0
13DD 9414      4545            subb    a,#0x14
13DF E5E1      4546            mov     a,(_Auto_mode_slave_sloc0_1_0 + 1)
13E1 6480      4547            xrl     a,#0x80
13E3 9480      4548            subb    a,#0x80
13E5 4000      4549            jc      L039034?
13E7 020000    4550            ljmp    L039020?
13EA           4551   L039034?:
13EA 90D030    4552            mov     dptr,#_Auto_mode_slave_state_res_1_205
13ED E0        4553            movx    a,@dptr
13EE FC        4554            mov     r4,a
13EF A3        4555            inc     dptr
13F0 E0        4556            movx    a,@dptr
13F1 FD        4557            mov     r5,a
13F2 4C        4558            orl     a,r4
13F3 7000      4559            jnz     L039035?
13F5 020000    4560            ljmp    L039020?
13F8           4561   L039035?:
13F8           4562   ;        main.c:1013: if(RXU1()){
13F8 C004      4563            push    ar4
13FA C005      4564            push    ar5
13FC 120000    4565            lcall   _RXU1
13FF D005      4566            pop     ar5
1401 D004      4567            pop     ar4
1403 4000      4568            jc      L039036?
1405 020000    4569            ljmp    L039012?
1408           4570   L039036?:
1408           4571   ;        main.c:1014: c=getchar1();      
1408 C004      4572            push    ar4
140A C005      4573            push    ar5
140C 120000    4574            lcall   _getchar1
140F AE82      4575            mov     r6,dpl
1411 D005      4576            pop     ar5
1413 D004      4577            pop     ar4
1415           4578   ;        main.c:1015: if(c=='!'){
1415 BE2100    4579            cjne    r6,#0x21,L039037?
1418 8000      4580            sjmp    L039038?
141A           4581   L039037?:
141A 020000    4582            ljmp    L039009?
141D           4583   L039038?:
141D           4584   ;        main.c:1016: getstr1(buff, sizeof(buff)-1);
141D 755013    4585            mov     _getstr1_PARM_2,#0x13
1420 9053C0    4586            mov     dptr,#_buff
1423 75F040    4587            mov     b,#0x40
1426 120000    4588            lcall   _getstr1
1429           4589   ;        main.c:1017: if(strlen(buff)==11){
1429 9053C0    4590            mov     dptr,#_buff
142C 75F040    4591            mov     b,#0x40
142F 120000    4592            lcall   _strlen
1432 AF82      4593            mov     r7,dpl
1434 AA83      4594            mov     r2,dph
1436 BF0B00    4595            cjne    r7,#0x0B,L039039?
1439 BA0000    4596            cjne    r2,#0x00,L039039?
143C 8000      4597            sjmp    L039040?
143E           4598   L039039?:
143E 020000    4599            ljmp    L039012?
1441           4600   L039040?:
1441           4601   ;        main.c:1018: printf("master_messgae_auto_mode: %s\r\n", buff);
1441 74C0      4602            mov     a,#_buff
1443 C0E0      4603            push    acc
1445 7453      4604            mov     a,#(_buff >> 8)
1447 C0E0      4605            push    acc
1449 7440      4606            mov     a,#0x40
144B C0E0      4607            push    acc
144D 7480      4608            mov     a,#__str_7
144F C0E0      4609            push    acc
1451 740E      4610            mov     a,#(__str_7 >> 8)
1453 C0E0      4611            push    acc
1455 7480      4612            mov     a,#0x80
1457 C0E0      4613            push    acc
1459 120000    4614            lcall   _printf
145C E581      4615            mov     a,sp
145E 24FA      4616            add     a,#0xfa
1460 F581      4617            mov     sp,a
1462           4618   ;        main.c:1019: sscanf(buff,"%03d,%03d,%01d,%01d",&dummy, &dummy,&dummy,&command);
1462 74D0      4619            mov     a,#_Auto_mode_slave_command_1_205
1464 C0E0      4620            push    acc
1466 74CF      4621            mov     a,#(_Auto_mode_slave_command_1_205 >> 8)
1468 C0E0      4622            push    acc
146A E4        4623            clr     a
146B C0E0      4624            push    acc
146D 7480      4625            mov     a,#_Auto_mode_slave_dummy_1_205
146F C0E0      4626            push    acc
1471 74D0      4627            mov     a,#(_Auto_mode_slave_dummy_1_205 >> 8)
1473 C0E0      4628            push    acc
1475 E4        4629            clr     a
1476 C0E0      4630            push    acc
1478 7480      4631            mov     a,#_Auto_mode_slave_dummy_1_205
147A C0E0      4632            push    acc
147C 74D0      4633            mov     a,#(_Auto_mode_slave_dummy_1_205 >> 8)
147E C0E0      4634            push    acc
1480 E4        4635            clr     a
1481 C0E0      4636            push    acc
1483 7480      4637            mov     a,#_Auto_mode_slave_dummy_1_205
1485 C0E0      4638            push    acc
1487 74D0      4639            mov     a,#(_Auto_mode_slave_dummy_1_205 >> 8)
1489 C0E0      4640            push    acc
148B E4        4641            clr     a
148C C0E0      4642            push    acc
148E 74C0      4643            mov     a,#__str_8
1490 C0E0      4644            push    acc
1492 740E      4645            mov     a,#(__str_8 >> 8)
1494 C0E0      4646            push    acc
1496 7480      4647            mov     a,#0x80
1498 C0E0      4648            push    acc
149A 74C0      4649            mov     a,#_buff
149C C0E0      4650            push    acc
149E 7453      4651            mov     a,#(_buff >> 8)
14A0 C0E0      4652            push    acc
14A2 7440      4653            mov     a,#0x40
14A4 C0E0      4654            push    acc
14A6 120000    4655            lcall   _sscanf
14A9 E581      4656            mov     a,sp
14AB 24EE      4657            add     a,#0xee
14AD F581      4658            mov     sp,a
14AF           4659   ;        main.c:1020: if(command) state_res = 1;
14AF 90CFD0    4660            mov     dptr,#_Auto_mode_slave_command_1_205
14B2 E0        4661            movx    a,@dptr
14B3 FF        4662            mov     r7,a
14B4 A3        4663            inc     dptr
14B5 E0        4664            movx    a,@dptr
14B6 FA        4665            mov     r2,a
14B7 4F        4666            orl     a,r7
14B8 6000      4667            jz      L039002?
14BA 90D030    4668            mov     dptr,#_Auto_mode_slave_state_res_1_205
14BD 7401      4669            mov     a,#0x01
14BF F0        4670            movx    @dptr,a
14C0 E4        4671            clr     a
14C1 A3        4672            inc     dptr
14C2 F0        4673            movx    @dptr,a
14C3 8000      4674            sjmp    L039012?
14C5           4675   L039002?:
14C5           4676   ;        main.c:1021: else state_res = 0;
14C5 90D030    4677            mov     dptr,#_Auto_mode_slave_state_res_1_205
14C8 E4        4678            clr     a
14C9 F0        4679            movx    @dptr,a
14CA A3        4680            inc     dptr
14CB F0        4681            movx    @dptr,a
14CC 8000      4682            sjmp    L039012?
14CE           4683   L039009?:
14CE           4684   ;        main.c:1027: else if(c=='@'){
14CE BE40C0    4685            cjne    r6,#0x40,L039012?
14D1           4686   ;        main.c:1028: sprintf(buff, "%01d,%02d,%ld,%05d,%4.1f\n", state_res, count,freq100, 0, curr_angle);
14D1 904BF0    4687            mov     dptr,#_curr_angle
14D4 E0        4688            movx    a,@dptr
14D5 C0E0      4689            push    acc
14D7 A3        4690            inc     dptr
14D8 E0        4691            movx    a,@dptr
14D9 C0E0      4692            push    acc
14DB A3        4693            inc     dptr
14DC E0        4694            movx    a,@dptr
14DD C0E0      4695            push    acc
14DF A3        4696            inc     dptr
14E0 E0        4697            movx    a,@dptr
14E1 C0E0      4698            push    acc
14E3 E4        4699            clr     a
14E4 C0E0      4700            push    acc
14E6 C0E0      4701            push    acc
14E8 905380    4702            mov     dptr,#_freq100
14EB E0        4703            movx    a,@dptr
14EC C0E0      4704            push    acc
14EE A3        4705            inc     dptr
14EF E0        4706            movx    a,@dptr
14F0 C0E0      4707            push    acc
14F2 A3        4708            inc     dptr
14F3 E0        4709            movx    a,@dptr
14F4 C0E0      4710            push    acc
14F6 A3        4711            inc     dptr
14F7 E0        4712            movx    a,@dptr
14F8 C0E0      4713            push    acc
14FA C0E0      4714            push    _Auto_mode_slave_sloc0_1_0
14FC C0E1      4715            push    (_Auto_mode_slave_sloc0_1_0 + 1)
14FE C004      4716            push    ar4
1500 C005      4717            push    ar5
1502 7480      4718            mov     a,#__str_9
1504 C0E0      4719            push    acc
1506 740F      4720            mov     a,#(__str_9 >> 8)
1508 C0E0      4721            push    acc
150A 7480      4722            mov     a,#0x80
150C C0E0      4723            push    acc
150E 74C0      4724            mov     a,#_buff
1510 C0E0      4725            push    acc
1512 7453      4726            mov     a,#(_buff >> 8)
1514 C0E0      4727            push    acc
1516 7440      4728            mov     a,#0x40
1518 C0E0      4729            push    acc
151A 120000    4730            lcall   _sprintf
151D E581      4731            mov     a,sp
151F 24EC      4732            add     a,#0xec
1521 F581      4733            mov     sp,a
1523           4734   ;        main.c:1029: waitms(5); 
1523 900005    4735            mov     dptr,#0x0005
1526 120000    4736            lcall   _waitms
1529           4737   ;        main.c:1030: sendstr1(buff);
1529 9053C0    4738            mov     dptr,#_buff
152C 75F040    4739            mov     b,#0x40
152F 120000    4740            lcall   _sendstr1
1532           4741   L039012?:
1532           4742   ;        main.c:1035: Move_forward();
1532 120000    4743            lcall   _Move_forward
1535           4744   ;        main.c:1037: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
1535 758209    4745            mov     dpl,#0x09
1538 120000    4746            lcall   _ADC_at_Pin
153B E582      4747            mov     a,dpl
153D 8583F0    4748            mov     b,dph
1540 905340    4749            mov     dptr,#_d1
1543 F0        4750            movx    @dptr,a
1544 A3        4751            inc     dptr
1545 E5F0      4752            mov     a,b
1547 F0        4753            movx    @dptr,a
1548           4754   ;        main.c:1038: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
1548 75820A    4755            mov     dpl,#0x0A
154B 120000    4756            lcall   _ADC_at_Pin
154E AA82      4757            mov     r2,dpl
1550 AB83      4758            mov     r3,dph
1552 905300    4759            mov     dptr,#_d2
1555 EA        4760            mov     a,r2
1556 F0        4761            movx    @dptr,a
1557 A3        4762            inc     dptr
1558 EB        4763            mov     a,r3
1559 F0        4764            movx    @dptr,a
155A           4765   ;        main.c:1039: bound = check_bound(d1,d2);
155A 905340    4766            mov     dptr,#_d1
155D E0        4767            movx    a,@dptr
155E FC        4768            mov     r4,a
155F A3        4769            inc     dptr
1560 E0        4770            movx    a,@dptr
1561 FD        4771            mov     r5,a
1562 8A90      4772            mov     _check_bound_PARM_2,r2
1564 8B91      4773            mov     (_check_bound_PARM_2 + 1),r3
1566 8C82      4774            mov     dpl,r4
1568 8D83      4775            mov     dph,r5
156A 120000    4776            lcall   _check_bound
156D AA82      4777            mov     r2,dpl
156F AB83      4778            mov     r3,dph
1571           4779   ;        main.c:1040: printf("f:%04ld, d1:%d, d2:%d, bound_dectect: %d\r\n",freq100, d1,d2,bound);
1571 C002      4780            push    ar2
1573 C003      4781            push    ar3
1575 C002      4782            push    ar2
1577 C003      4783            push    ar3
1579 905300    4784            mov     dptr,#_d2
157C E0        4785            movx    a,@dptr
157D C0E0      4786            push    acc
157F A3        4787            inc     dptr
1580 E0        4788            movx    a,@dptr
1581 C0E0      4789            push    acc
1583 905340    4790            mov     dptr,#_d1
1586 E0        4791            movx    a,@dptr
1587 C0E0      4792            push    acc
1589 A3        4793            inc     dptr
158A E0        4794            movx    a,@dptr
158B C0E0      4795            push    acc
158D 905380    4796            mov     dptr,#_freq100
1590 E0        4797            movx    a,@dptr
1591 C0E0      4798            push    acc
1593 A3        4799            inc     dptr
1594 E0        4800            movx    a,@dptr
1595 C0E0      4801            push    acc
1597 A3        4802            inc     dptr
1598 E0        4803            movx    a,@dptr
1599 C0E0      4804            push    acc
159B A3        4805            inc     dptr
159C E0        4806            movx    a,@dptr
159D C0E0      4807            push    acc
159F 7400      4808            mov     a,#__str_10
15A1 C0E0      4809            push    acc
15A3 7410      4810            mov     a,#(__str_10 >> 8)
15A5 C0E0      4811            push    acc
15A7 7480      4812            mov     a,#0x80
15A9 C0E0      4813            push    acc
15AB 120000    4814            lcall   _printf
15AE E581      4815            mov     a,sp
15B0 24F3      4816            add     a,#0xf3
15B2 F581      4817            mov     sp,a
15B4 D003      4818            pop     ar3
15B6 D002      4819            pop     ar2
15B8           4820   ;        main.c:1042: if (freq100>=5340){
15B8 905380    4821            mov     dptr,#_freq100
15BB E0        4822            movx    a,@dptr
15BC FC        4823            mov     r4,a
15BD A3        4824            inc     dptr
15BE E0        4825            movx    a,@dptr
15BF FD        4826            mov     r5,a
15C0 A3        4827            inc     dptr
15C1 E0        4828            movx    a,@dptr
15C2 FE        4829            mov     r6,a
15C3 A3        4830            inc     dptr
15C4 E0        4831            movx    a,@dptr
15C5 FF        4832            mov     r7,a
15C6 C3        4833            clr     c
15C7 EC        4834            mov     a,r4
15C8 94DC      4835            subb    a,#0xDC
15CA ED        4836            mov     a,r5
15CB 9414      4837            subb    a,#0x14
15CD EE        4838            mov     a,r6
15CE 9400      4839            subb    a,#0x00
15D0 EF        4840            mov     a,r7
15D1 6480      4841            xrl     a,#0x80
15D3 9480      4842            subb    a,#0x80
15D5 4000      4843            jc      L039014?
15D7           4844   ;        main.c:1043: mea_yes = 0;
15D7 904BB0    4845            mov     dptr,#_mea_yes
15DA E4        4846            clr     a
15DB F0        4847            movx    @dptr,a
15DC           4848   ;        main.c:1044: Move_back_ms(300);
15DC 90012C    4849            mov     dptr,#0x012C
15DF C002      4850            push    ar2
15E1 C003      4851            push    ar3
15E3 120000    4852            lcall   _Move_back_ms
15E6           4853   ;        main.c:1045: waitms(100);
15E6 900064    4854            mov     dptr,#0x0064
15E9 120000    4855            lcall   _waitms
15EC           4856   ;        main.c:1046: servo_pick();
15EC 120000    4857            lcall   _servo_pick
15EF D003      4858            pop     ar3
15F1 D002      4859            pop     ar2
15F3           4860   ;        main.c:1047: count++;
15F3 05E0      4861            inc     _Auto_mode_slave_sloc0_1_0
15F5 E4        4862            clr     a
15F6 B5E080    4863            cjne    a,_Auto_mode_slave_sloc0_1_0,L039045?
15F9 05E1      4864            inc     (_Auto_mode_slave_sloc0_1_0 + 1)
15FB           4865   L039045?:
15FB           4866   ;        main.c:1048: waitms(100);
15FB 900064    4867            mov     dptr,#0x0064
15FE C002      4868            push    ar2
1600 C003      4869            push    ar3
1602 120000    4870            lcall   _waitms
1605           4871   ;        main.c:1049: mea_yes = 1;
1605 904BB0    4872            mov     dptr,#_mea_yes
1608 7401      4873            mov     a,#0x01
160A F0        4874            movx    @dptr,a
160B           4875   ;        main.c:1050: Move_forward();
160B 120000    4876            lcall   _Move_forward
160E D003      4877            pop     ar3
1610 D002      4878            pop     ar2
1612           4879   L039014?:
1612           4880   ;        main.c:1053: if(bound == 1){
1612 BA01C0    4881            cjne    r2,#0x01,L039046?
1615 BB00C0    4882            cjne    r3,#0x00,L039046?
1618 8000      4883            sjmp    L039047?
161A           4884   L039046?:
161A 020000    4885            ljmp    L039018?
161D           4886   L039047?:
161D           4887   ;        main.c:1054: Move_back_ms(500);
161D 9001F4    4888            mov     dptr,#0x01F4
1620 120000    4889            lcall   _Move_back_ms
1623           4890   ;        main.c:1055: waitms(100);
1623 900064    4891            mov     dptr,#0x0064
1626 120000    4892            lcall   _waitms
1629           4893   ;        main.c:1056: curr_angle = Read_angle();
1629 120000    4894            lcall   _Read_angle
162C AA82      4895            mov     r2,dpl
162E AB83      4896            mov     r3,dph
1630 ACF0      4897            mov     r4,b
1632 FD        4898            mov     r5,a
1633 904BF0    4899            mov     dptr,#_curr_angle
1636 EA        4900            mov     a,r2
1637 F0        4901            movx    @dptr,a
1638 A3        4902            inc     dptr
1639 EB        4903            mov     a,r3
163A F0        4904            movx    @dptr,a
163B A3        4905            inc     dptr
163C EC        4906            mov     a,r4
163D F0        4907            movx    @dptr,a
163E A3        4908            inc     dptr
163F ED        4909            mov     a,r5
1640 F0        4910            movx    @dptr,a
1641           4911   ;        main.c:1057: angle = get_random_90_250();
1641 120000    4912            lcall   _get_random_90_250
1644 858200    4913            mov     __mulint_PARM_2,dpl
1647 858301    4914            mov     (__mulint_PARM_2 + 1),dph
164A           4915   ;        main.c:1058: Right_angle(angle*600/90);
164A 900258    4916            mov     dptr,#0x0258
164D 120000    4917            lcall   __mulint
1650 AA82      4918            mov     r2,dpl
1652 AB83      4919            mov     r3,dph
1654 75005A    4920            mov     __divuint_PARM_2,#0x5A
1657 E4        4921            clr     a
1658 F501      4922            mov     (__divuint_PARM_2 + 1),a
165A 8A82      4923            mov     dpl,r2
165C 8B83      4924            mov     dph,r3
165E 120000    4925            lcall   __divuint
1661 120000    4926            lcall   _Right_angle
1664           4927   ;        main.c:1059: curr_angle = fabsf(curr_angle - Read_angle());
1664 120000    4928            lcall   _Read_angle
1667 858230    4929            mov     _Auto_mode_slave_sloc1_1_0,dpl
166A 858331    4930            mov     (_Auto_mode_slave_sloc1_1_0 + 1),dph
166D 85F032    4931            mov     (_Auto_mode_slave_sloc1_1_0 + 2),b
1670 F533      4932            mov     (_Auto_mode_slave_sloc1_1_0 + 3),a
1672 904BF0    4933            mov     dptr,#_curr_angle
1675 E0        4934            movx    a,@dptr
1676 FE        4935            mov     r6,a
1677 A3        4936            inc     dptr
1678 E0        4937            movx    a,@dptr
1679 FF        4938            mov     r7,a
167A A3        4939            inc     dptr
167B E0        4940            movx    a,@dptr
167C FA        4941            mov     r2,a
167D A3        4942            inc     dptr
167E E0        4943            movx    a,@dptr
167F FB        4944            mov     r3,a
1680 C030      4945            push    _Auto_mode_slave_sloc1_1_0
1682 C031      4946            push    (_Auto_mode_slave_sloc1_1_0 + 1)
1684 C032      4947            push    (_Auto_mode_slave_sloc1_1_0 + 2)
1686 C033      4948            push    (_Auto_mode_slave_sloc1_1_0 + 3)
1688 8E82      4949            mov     dpl,r6
168A 8F83      4950            mov     dph,r7
168C 8AF0      4951            mov     b,r2
168E EB        4952            mov     a,r3
168F 120000    4953            lcall   ___fssub
1692 AA82      4954            mov     r2,dpl
1694 AB83      4955            mov     r3,dph
1696 ACF0      4956            mov     r4,b
1698 FD        4957            mov     r5,a
1699 E581      4958            mov     a,sp
169B 24FC      4959            add     a,#0xfc
169D F581      4960            mov     sp,a
169F 8A82      4961            mov     dpl,r2
16A1 8B83      4962            mov     dph,r3
16A3 8CF0      4963            mov     b,r4
16A5 ED        4964            mov     a,r5
16A6 120000    4965            lcall   _fabsf
16A9 AA82      4966            mov     r2,dpl
16AB AB83      4967            mov     r3,dph
16AD ACF0      4968            mov     r4,b
16AF FD        4969            mov     r5,a
16B0 904BF0    4970            mov     dptr,#_curr_angle
16B3 EA        4971            mov     a,r2
16B4 F0        4972            movx    @dptr,a
16B5 A3        4973            inc     dptr
16B6 EB        4974            mov     a,r3
16B7 F0        4975            movx    @dptr,a
16B8 A3        4976            inc     dptr
16B9 EC        4977            mov     a,r4
16BA F0        4978            movx    @dptr,a
16BB A3        4979            inc     dptr
16BC ED        4980            mov     a,r5
16BD F0        4981            movx    @dptr,a
16BE 020000    4982            ljmp    L039018?
16C1           4983   L039020?:
16C1           4984   ;        main.c:1063: printf("Auto mode finished!\r\n");
16C1 7410      4985            mov     a,#__str_11
16C3 C0E0      4986            push    acc
16C5 7412      4987            mov     a,#(__str_11 >> 8)
16C7 C0E0      4988            push    acc
16C9 7480      4989            mov     a,#0x80
16CB C0E0      4990            push    acc
16CD 120000    4991            lcall   _printf
16D0 1581      4992            dec     sp
16D2 1581      4993            dec     sp
16D4 1581      4994            dec     sp
16D6 22        4995            ret
16D7           4996   ;------------------------------------------------------------
16D7           4997   ;Allocation info for local variables in function 'Joystick_Control'
16D7           4998   ;------------------------------------------------------------
16D7           4999   ;vy_ptr                    Allocated with name '_Joystick_Control_PARM_2'
16D7           5000   ;vx_ptr                    Allocated to registers r2 r3 r4 
16D7           5001   ;sloc0                     Allocated with name '_Joystick_Control_sloc0_1_0'
16D7           5002   ;sloc1                     Allocated with name '_Joystick_Control_sloc1_1_0'
16D7           5003   ;sloc2                     Allocated with name '_Joystick_Control_sloc2_1_0'
16D7           5004   ;sloc3                     Allocated with name '_Joystick_Control_sloc3_1_0'
16D7           5005   ;sloc4                     Allocated with name '_Joystick_Control_sloc4_1_0'
16D7           5006   ;sloc5                     Allocated with name '_Joystick_Control_sloc5_1_0'
16D7           5007   ;sloc6                     Allocated with name '_Joystick_Control_sloc6_1_0'
16D7           5008   ;vx                        Allocated with name '_Joystick_Control_vx_1_214'
16D7           5009   ;vy                        Allocated with name '_Joystick_Control_vy_1_214'
16D7           5010   ;vx_error                  Allocated with name '_Joystick_Control_vx_error_1_214'
16D7           5011   ;vy_error                  Allocated with name '_Joystick_Control_vy_error_1_214'
16D7           5012   ;vx_err                    Allocated with name '_Joystick_Control_vx_err_1_214'
16D7           5013   ;vy_err                    Allocated with name '_Joystick_Control_vy_err_1_214'
16D7           5014   ;threshold                 Allocated with name '_Joystick_Control_threshold_1_214'
16D7           5015   ;------------------------------------------------------------
16D7           5016   ;        main.c:1066: void Joystick_Control(int *vx_ptr, int *vy_ptr)
16D7           5017   ;        -----------------------------------------
16D7           5018   ;         function Joystick_Control
16D7           5019   ;        -----------------------------------------
16D7           5020   _Joystick_Control:
16D7           5021   ;        main.c:1071: vx = *vx_ptr; 
16D7 120000    5022            lcall   __gptrget
16DA F580      5023            mov     _Joystick_Control_sloc0_1_0,a
16DC A3        5024            inc     dptr
16DD 120000    5025            lcall   __gptrget
16E0 F581      5026            mov     (_Joystick_Control_sloc0_1_0 + 1),a
16E2           5027   ;        main.c:1072: vy = *vy_ptr; 
16E2 AC10      5028            mov     r4,_Joystick_Control_PARM_2
16E4 AD11      5029            mov     r5,(_Joystick_Control_PARM_2 + 1)
16E6 AE12      5030            mov     r6,(_Joystick_Control_PARM_2 + 2)
16E8 8C82      5031            mov     dpl,r4
16EA 8D83      5032            mov     dph,r5
16EC 8EF0      5033            mov     b,r6
16EE 120000    5034            lcall   __gptrget
16F1 FC        5035            mov     r4,a
16F2 A3        5036            inc     dptr
16F3 120000    5037            lcall   __gptrget
16F6 FD        5038            mov     r5,a
16F7           5039   ;        main.c:1074: vx_error = abs(vx-vx_thres)*100/vx_thres; 
16F7 904E00    5040            mov     dptr,#_vx_thres
16FA E0        5041            movx    a,@dptr
16FB FE        5042            mov     r6,a
16FC A3        5043            inc     dptr
16FD E0        5044            movx    a,@dptr
16FE FF        5045            mov     r7,a
16FF E580      5046            mov     a,_Joystick_Control_sloc0_1_0
1701 C3        5047            clr     c
1702 9E        5048            subb    a,r6
1703 F582      5049            mov     dpl,a
1705 E581      5050            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
1707 9F        5051            subb    a,r7
1708 F583      5052            mov     dph,a
170A C004      5053            push    ar4
170C C005      5054            push    ar5
170E 120000    5055            lcall   _abs
1711 858200    5056            mov     __mulint_PARM_2,dpl
1714 858301    5057            mov     (__mulint_PARM_2 + 1),dph
1717 900064    5058            mov     dptr,#0x0064
171A 120000    5059            lcall   __mulint
171D AE82      5060            mov     r6,dpl
171F AF83      5061            mov     r7,dph
1721 904E00    5062            mov     dptr,#_vx_thres
1724 E0        5063            movx    a,@dptr
1725 F500      5064            mov     __divsint_PARM_2,a
1727 A3        5065            inc     dptr
1728 E0        5066            movx    a,@dptr
1729 F501      5067            mov     (__divsint_PARM_2 + 1),a
172B 8E82      5068            mov     dpl,r6
172D 8F83      5069            mov     dph,r7
172F 120000    5070            lcall   __divsint
1732 E582      5071            mov     a,dpl
1734 8583F0    5072            mov     b,dph
1737 D005      5073            pop     ar5
1739 D004      5074            pop     ar4
173B 90D0E0    5075            mov     dptr,#_Joystick_Control_vx_error_1_214
173E F0        5076            movx    @dptr,a
173F A3        5077            inc     dptr
1740 E5F0      5078            mov     a,b
1742 F0        5079            movx    @dptr,a
1743           5080   ;        main.c:1075: vy_error = abs(vy-vy_thres)*100/vy_thres; 
1743 904DC0    5081            mov     dptr,#_vy_thres
1746 E0        5082            movx    a,@dptr
1747 FE        5083            mov     r6,a
1748 A3        5084            inc     dptr
1749 E0        5085            movx    a,@dptr
174A FF        5086            mov     r7,a
174B EC        5087            mov     a,r4
174C C3        5088            clr     c
174D 9E        5089            subb    a,r6
174E F582      5090            mov     dpl,a
1750 ED        5091            mov     a,r5
1751 9F        5092            subb    a,r7
1752 F583      5093            mov     dph,a
1754 C004      5094            push    ar4
1756 C005      5095            push    ar5
1758 120000    5096            lcall   _abs
175B 858200    5097            mov     __mulint_PARM_2,dpl
175E 858301    5098            mov     (__mulint_PARM_2 + 1),dph
1761 900064    5099            mov     dptr,#0x0064
1764 120000    5100            lcall   __mulint
1767 AE82      5101            mov     r6,dpl
1769 AF83      5102            mov     r7,dph
176B 904DC0    5103            mov     dptr,#_vy_thres
176E E0        5104            movx    a,@dptr
176F F520      5105            mov     _Joystick_Control_sloc2_1_0,a
1771 A3        5106            inc     dptr
1772 E0        5107            movx    a,@dptr
1773 F521      5108            mov     (_Joystick_Control_sloc2_1_0 + 1),a
1775 852000    5109            mov     __divsint_PARM_2,_Joystick_Control_sloc2_1_0
1778 852101    5110            mov     (__divsint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
177B           5111   ;        main.c:1076: vx_err = vx-vx_thres; 
177B 8E82      5112            mov     dpl,r6
177D 8F83      5113            mov     dph,r7
177F 120000    5114            lcall   __divsint
1782 AE82      5115            mov     r6,dpl
1784 AF83      5116            mov     r7,dph
1786 D005      5117            pop     ar5
1788 D004      5118            pop     ar4
178A 904E00    5119            mov     dptr,#_vx_thres
178D E0        5120            movx    a,@dptr
178E FA        5121            mov     r2,a
178F A3        5122            inc     dptr
1790 E0        5123            movx    a,@dptr
1791 FB        5124            mov     r3,a
1792 E580      5125            mov     a,_Joystick_Control_sloc0_1_0
1794 C3        5126            clr     c
1795 9A        5127            subb    a,r2
1796 F5C0      5128            mov     _Joystick_Control_sloc4_1_0,a
1798 E581      5129            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
179A 9B        5130            subb    a,r3
179B F5C1      5131            mov     (_Joystick_Control_sloc4_1_0 + 1),a
179D           5132   ;        main.c:1077: vy_err = vy-vy_thres; 
179D EC        5133            mov     a,r4
179E C3        5134            clr     c
179F 9520      5135            subb    a,_Joystick_Control_sloc2_1_0
17A1 F580      5136            mov     _Joystick_Control_sloc0_1_0,a
17A3 ED        5137            mov     a,r5
17A4 9521      5138            subb    a,(_Joystick_Control_sloc2_1_0 + 1)
17A6 F581      5139            mov     (_Joystick_Control_sloc0_1_0 + 1),a
17A8           5140   ;        main.c:1078: pwm_left = 0; 
17A8 904F80    5141            mov     dptr,#_pwm_left
17AB           5142   ;        main.c:1079: pwm_right = 0; 
17AB E4        5143            clr     a
17AC F0        5144            movx    @dptr,a
17AD 904F40    5145            mov     dptr,#_pwm_right
17B0 F0        5146            movx    @dptr,a
17B1           5147   ;        main.c:1081: if ((vy_error>5) && (vx_error<5)){
17B1 C3        5148            clr     c
17B2 7405      5149            mov     a,#0x05
17B4 9E        5150            subb    a,r6
17B5 E4        5151            clr     a
17B6 6480      5152            xrl     a,#0x80
17B8 8FF0      5153            mov     b,r7
17BA 63F080    5154            xrl     b,#0x80
17BD 95F0      5155            subb    a,b
17BF E4        5156            clr     a
17C0 33        5157            rlc     a
17C1 F5D0      5158            mov     _Joystick_Control_sloc1_1_0,a
17C3 7000      5159            jnz     L040056?
17C5 020000    5160            ljmp    L040005?
17C8           5161   L040056?:
17C8 90D0E0    5162            mov     dptr,#_Joystick_Control_vx_error_1_214
17CB E0        5163            movx    a,@dptr
17CC FA        5164            mov     r2,a
17CD A3        5165            inc     dptr
17CE E0        5166            movx    a,@dptr
17CF FB        5167            mov     r3,a
17D0 C3        5168            clr     c
17D1 EA        5169            mov     a,r2
17D2 9405      5170            subb    a,#0x05
17D4 EB        5171            mov     a,r3
17D5 6480      5172            xrl     a,#0x80
17D7 9480      5173            subb    a,#0x80
17D9 4000      5174            jc      L040057?
17DB 020000    5175            ljmp    L040005?
17DE           5176   L040057?:
17DE           5177   ;        main.c:1082: pwm_left = vy_error; 
17DE 904F80    5178            mov     dptr,#_pwm_left
17E1 EE        5179            mov     a,r6
17E2 F0        5180            movx    @dptr,a
17E3           5181   ;        main.c:1083: pwm_right = vy_error * pwm_corr; 
17E3 8E82      5182            mov     dpl,r6
17E5 8F83      5183            mov     dph,r7
17E7 C004      5184            push    ar4
17E9 C005      5185            push    ar5
17EB C006      5186            push    ar6
17ED C007      5187            push    ar7
17EF 120000    5188            lcall   ___sint2fs
17F2 AA82      5189            mov     r2,dpl
17F4 AB83      5190            mov     r3,dph
17F6 A8F0      5191            mov     r0,b
17F8 F9        5192            mov     r1,a
17F9 904C30    5193            mov     dptr,#_pwm_corr
17FC E0        5194            movx    a,@dptr
17FD C0E0      5195            push    acc
17FF A3        5196            inc     dptr
1800 E0        5197            movx    a,@dptr
1801 C0E0      5198            push    acc
1803 A3        5199            inc     dptr
1804 E0        5200            movx    a,@dptr
1805 C0E0      5201            push    acc
1807 A3        5202            inc     dptr
1808 E0        5203            movx    a,@dptr
1809 C0E0      5204            push    acc
180B 8A82      5205            mov     dpl,r2
180D 8B83      5206            mov     dph,r3
180F 88F0      5207            mov     b,r0
1811 E9        5208            mov     a,r1
1812 120000    5209            lcall   ___fsmul
1815 AA82      5210            mov     r2,dpl
1817 AB83      5211            mov     r3,dph
1819 A8F0      5212            mov     r0,b
181B F9        5213            mov     r1,a
181C E581      5214            mov     a,sp
181E 24FC      5215            add     a,#0xfc
1820 F581      5216            mov     sp,a
1822 8A82      5217            mov     dpl,r2
1824 8B83      5218            mov     dph,r3
1826 88F0      5219            mov     b,r0
1828 E9        5220            mov     a,r1
1829 120000    5221            lcall   ___fs2uchar
182C 858270    5222            mov     _Joystick_Control_sloc3_1_0,dpl
182F D007      5223            pop     ar7
1831 D006      5224            pop     ar6
1833 D005      5225            pop     ar5
1835 D004      5226            pop     ar4
1837 904F40    5227            mov     dptr,#_pwm_right
183A E570      5228            mov     a,_Joystick_Control_sloc3_1_0
183C F0        5229            movx    @dptr,a
183D           5230   ;        main.c:1084: if (vy_err > 0){ //move forward
183D C3        5231            clr     c
183E E4        5232            clr     a
183F 9580      5233            subb    a,_Joystick_Control_sloc0_1_0
1841 E4        5234            clr     a
1842 6480      5235            xrl     a,#0x80
1844 8581F0    5236            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
1847 63F080    5237            xrl     b,#0x80
184A 95F0      5238            subb    a,b
184C 5000      5239            jnc     L040002?
184E           5240   ;        main.c:1085: L_motor_dir = 0; 
184E 904F00    5241            mov     dptr,#_L_motor_dir
1851           5242   ;        main.c:1086: R_motor_dir = 0; 
1851 E4        5243            clr     a
1852 F0        5244            movx    @dptr,a
1853 904EC0    5245            mov     dptr,#_R_motor_dir
1856 F0        5246            movx    @dptr,a
1857 8000      5247            sjmp    L040005?
1859           5248   L040002?:
1859           5249   ;        main.c:1089: L_motor_dir = 1; 
1859 904F00    5250            mov     dptr,#_L_motor_dir
185C 7401      5251            mov     a,#0x01
185E F0        5252            movx    @dptr,a
185F           5253   ;        main.c:1090: R_motor_dir = 1; 
185F 904EC0    5254            mov     dptr,#_R_motor_dir
1862 7401      5255            mov     a,#0x01
1864 F0        5256            movx    @dptr,a
1865           5257   ;        main.c:1091: pwm_right *= 1.05;
1865 857082    5258            mov     dpl,_Joystick_Control_sloc3_1_0
1868 C004      5259            push    ar4
186A C005      5260            push    ar5
186C C006      5261            push    ar6
186E C007      5262            push    ar7
1870 120000    5263            lcall   ___uchar2fs
1873 A882      5264            mov     r0,dpl
1875 A983      5265            mov     r1,dph
1877 AAF0      5266            mov     r2,b
1879 FB        5267            mov     r3,a
187A C000      5268            push    ar0
187C C001      5269            push    ar1
187E C002      5270            push    ar2
1880 C003      5271            push    ar3
1882 906666    5272            mov     dptr,#0x6666
1885 75F086    5273            mov     b,#0x86
1888 743F      5274            mov     a,#0x3F
188A 120000    5275            lcall   ___fsmul
188D AA82      5276            mov     r2,dpl
188F AB83      5277            mov     r3,dph
1891 A8F0      5278            mov     r0,b
1893 F9        5279            mov     r1,a
1894 E581      5280            mov     a,sp
1896 24FC      5281            add     a,#0xfc
1898 F581      5282            mov     sp,a
189A 8A82      5283            mov     dpl,r2
189C 8B83      5284            mov     dph,r3
189E 88F0      5285            mov     b,r0
18A0 E9        5286            mov     a,r1
18A1 120000    5287            lcall   ___fs2uchar
18A4 E582      5288            mov     a,dpl
18A6 D007      5289            pop     ar7
18A8 D006      5290            pop     ar6
18AA D005      5291            pop     ar5
18AC D004      5292            pop     ar4
18AE 904F40    5293            mov     dptr,#_pwm_right
18B1 F0        5294            movx    @dptr,a
18B2           5295   ;        main.c:1162: return; 
18B2           5296   ;        main.c:1091: pwm_right *= 1.05;
18B2           5297   L040005?:
18B2           5298   ;        main.c:1094: if ((vx_error>5)&&(vy_error<5)){
18B2 90D0E0    5299            mov     dptr,#_Joystick_Control_vx_error_1_214
18B5 E0        5300            movx    a,@dptr
18B6 F560      5301            mov     _Joystick_Control_sloc6_1_0,a
18B8 A3        5302            inc     dptr
18B9 E0        5303            movx    a,@dptr
18BA F561      5304            mov     (_Joystick_Control_sloc6_1_0 + 1),a
18BC C3        5305            clr     c
18BD 7405      5306            mov     a,#0x05
18BF 9560      5307            subb    a,_Joystick_Control_sloc6_1_0
18C1 E4        5308            clr     a
18C2 6480      5309            xrl     a,#0x80
18C4 8561F0    5310            mov     b,(_Joystick_Control_sloc6_1_0 + 1)
18C7 63F080    5311            xrl     b,#0x80
18CA 95F0      5312            subb    a,b
18CC E4        5313            clr     a
18CD 33        5314            rlc     a
18CE F570      5315            mov     _Joystick_Control_sloc3_1_0,a
18D0 7000      5316            jnz     L040059?
18D2 020000    5317            ljmp    L040011?
18D5           5318   L040059?:
18D5 C3        5319            clr     c
18D6 EE        5320            mov     a,r6
18D7 9405      5321            subb    a,#0x05
18D9 EF        5322            mov     a,r7
18DA 6480      5323            xrl     a,#0x80
18DC 9480      5324            subb    a,#0x80
18DE 4000      5325            jc      L040060?
18E0 020000    5326            ljmp    L040011?
18E3           5327   L040060?:
18E3           5328   ;        main.c:1095: pwm_left = vx_error; 
18E3 C004      5329            push    ar4
18E5 C005      5330            push    ar5
18E7 904F80    5331            mov     dptr,#_pwm_left
18EA E560      5332            mov     a,_Joystick_Control_sloc6_1_0
18EC F0        5333            movx    @dptr,a
18ED           5334   ;        main.c:1096: pwm_right = vx_error * pwm_corr; 
18ED 856082    5335            mov     dpl,_Joystick_Control_sloc6_1_0
18F0 856183    5336            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
18F3 C006      5337            push    ar6
18F5 C007      5338            push    ar7
18F7 120000    5339            lcall   ___sint2fs
18FA AC82      5340            mov     r4,dpl
18FC AD83      5341            mov     r5,dph
18FE AAF0      5342            mov     r2,b
1900 FB        5343            mov     r3,a
1901 904C30    5344            mov     dptr,#_pwm_corr
1904 E0        5345            movx    a,@dptr
1905 C0E0      5346            push    acc
1907 A3        5347            inc     dptr
1908 E0        5348            movx    a,@dptr
1909 C0E0      5349            push    acc
190B A3        5350            inc     dptr
190C E0        5351            movx    a,@dptr
190D C0E0      5352            push    acc
190F A3        5353            inc     dptr
1910 E0        5354            movx    a,@dptr
1911 C0E0      5355            push    acc
1913 8C82      5356            mov     dpl,r4
1915 8D83      5357            mov     dph,r5
1917 8AF0      5358            mov     b,r2
1919 EB        5359            mov     a,r3
191A 120000    5360            lcall   ___fsmul
191D AA82      5361            mov     r2,dpl
191F AB83      5362            mov     r3,dph
1921 ACF0      5363            mov     r4,b
1923 FD        5364            mov     r5,a
1924 E581      5365            mov     a,sp
1926 24FC      5366            add     a,#0xfc
1928 F581      5367            mov     sp,a
192A D007      5368            pop     ar7
192C D006      5369            pop     ar6
192E 8A82      5370            mov     dpl,r2
1930 8B83      5371            mov     dph,r3
1932 8CF0      5372            mov     b,r4
1934 ED        5373            mov     a,r5
1935 C004      5374            push    ar4
1937 C005      5375            push    ar5
1939 C006      5376            push    ar6
193B C007      5377            push    ar7
193D 120000    5378            lcall   ___fs2uchar
1940 E582      5379            mov     a,dpl
1942 D007      5380            pop     ar7
1944 D006      5381            pop     ar6
1946 D005      5382            pop     ar5
1948 D004      5383            pop     ar4
194A 904F40    5384            mov     dptr,#_pwm_right
194D F0        5385            movx    @dptr,a
194E           5386   ;        main.c:1097: if (vx_err > 0){ //turn right
194E C3        5387            clr     c
194F E4        5388            clr     a
1950 95C0      5389            subb    a,_Joystick_Control_sloc4_1_0
1952 E4        5390            clr     a
1953 6480      5391            xrl     a,#0x80
1955 85C1F0    5392            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
1958 63F080    5393            xrl     b,#0x80
195B 95F0      5394            subb    a,b
195D D005      5395            pop     ar5
195F D004      5396            pop     ar4
1961 5000      5397            jnc     L040008?
1963           5398   ;        main.c:1098: L_motor_dir = 1; 
1963 904F00    5399            mov     dptr,#_L_motor_dir
1966 7401      5400            mov     a,#0x01
1968 F0        5401            movx    @dptr,a
1969           5402   ;        main.c:1099: R_motor_dir = 0; 
1969 904EC0    5403            mov     dptr,#_R_motor_dir
196C E4        5404            clr     a
196D F0        5405            movx    @dptr,a
196E 8000      5406            sjmp    L040011?
1970           5407   L040008?:
1970           5408   ;        main.c:1102: L_motor_dir = 0; 
1970 904F00    5409            mov     dptr,#_L_motor_dir
1973 E4        5410            clr     a
1974 F0        5411            movx    @dptr,a
1975           5412   ;        main.c:1103: R_motor_dir = 1; 
1975 904EC0    5413            mov     dptr,#_R_motor_dir
1978 7401      5414            mov     a,#0x01
197A F0        5415            movx    @dptr,a
197B           5416   L040011?:
197B           5417   ;        main.c:1106: if ((vx_error>5)&&(vy_error)>5){
197B E570      5418            mov     a,_Joystick_Control_sloc3_1_0
197D 7000      5419            jnz     L040062?
197F 22        5420            ret
1980           5421   L040062?:
1980 E5D0      5422            mov     a,_Joystick_Control_sloc1_1_0
1982 7000      5423            jnz     L040063?
1984 22        5424            ret
1985           5425   L040063?:
1985           5426   ;        main.c:1108: if (vy_err>0){
1985 C3        5427            clr     c
1986 E4        5428            clr     a
1987 9580      5429            subb    a,_Joystick_Control_sloc0_1_0
1989 E4        5430            clr     a
198A 6480      5431            xrl     a,#0x80
198C 8581F0    5432            mov     b,(_Joystick_Control_sloc0_1_0 + 1)
198F 63F080    5433            xrl     b,#0x80
1992 95F0      5434            subb    a,b
1994 4000      5435            jc      L040064?
1996 020000    5436            ljmp    L040023?
1999           5437   L040064?:
1999           5438   ;        main.c:1109: L_motor_dir = 0; 
1999 904F00    5439            mov     dptr,#_L_motor_dir
199C           5440   ;        main.c:1110: R_motor_dir = 0; 
199C E4        5441            clr     a
199D F0        5442            movx    @dptr,a
199E 904EC0    5443            mov     dptr,#_R_motor_dir
19A1 F0        5444            movx    @dptr,a
19A2           5445   ;        main.c:1112: if (vx_err>0){
19A2 C3        5446            clr     c
19A3 E4        5447            clr     a
19A4 95C0      5448            subb    a,_Joystick_Control_sloc4_1_0
19A6 E4        5449            clr     a
19A7 6480      5450            xrl     a,#0x80
19A9 85C1F0    5451            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
19AC 63F080    5452            xrl     b,#0x80
19AF 95F0      5453            subb    a,b
19B1 4000      5454            jc      L040065?
19B3 020000    5455            ljmp    L040020?
19B6           5456   L040065?:
19B6           5457   ;        main.c:1113: if (vy*100<=vy_thres*100/2){
19B6 8C00      5458            mov     __mulint_PARM_2,r4
19B8 8D01      5459            mov     (__mulint_PARM_2 + 1),r5
19BA 900064    5460            mov     dptr,#0x0064
19BD C004      5461            push    ar4
19BF C005      5462            push    ar5
19C1 C006      5463            push    ar6
19C3 C007      5464            push    ar7
19C5 120000    5465            lcall   __mulint
19C8 AA82      5466            mov     r2,dpl
19CA AB83      5467            mov     r3,dph
19CC D007      5468            pop     ar7
19CE D006      5469            pop     ar6
19D0 D005      5470            pop     ar5
19D2 D004      5471            pop     ar4
19D4 852000    5472            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
19D7 852101    5473            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
19DA 900064    5474            mov     dptr,#0x0064
19DD C002      5475            push    ar2
19DF C003      5476            push    ar3
19E1 C004      5477            push    ar4
19E3 C005      5478            push    ar5
19E5 C006      5479            push    ar6
19E7 C007      5480            push    ar7
19E9 120000    5481            lcall   __mulint
19EC A882      5482            mov     r0,dpl
19EE A983      5483            mov     r1,dph
19F0 750002    5484            mov     __divsint_PARM_2,#0x02
19F3 E4        5485            clr     a
19F4 F501      5486            mov     (__divsint_PARM_2 + 1),a
19F6 8882      5487            mov     dpl,r0
19F8 8983      5488            mov     dph,r1
19FA 120000    5489            lcall   __divsint
19FD A882      5490            mov     r0,dpl
19FF A983      5491            mov     r1,dph
1A01 D007      5492            pop     ar7
1A03 D006      5493            pop     ar6
1A05 D005      5494            pop     ar5
1A07 D004      5495            pop     ar4
1A09 D003      5496            pop     ar3
1A0B D002      5497            pop     ar2
1A0D C3        5498            clr     c
1A0E E8        5499            mov     a,r0
1A0F 9A        5500            subb    a,r2
1A10 E9        5501            mov     a,r1
1A11 6480      5502            xrl     a,#0x80
1A13 8BF0      5503            mov     b,r3
1A15 63F080    5504            xrl     b,#0x80
1A18 95F0      5505            subb    a,b
1A1A 5000      5506            jnc     L040066?
1A1C 020000    5507            ljmp    L040014?
1A1F           5508   L040066?:
1A1F           5509   ;        main.c:1114: pwm_left = vy_error; 
1A1F C004      5510            push    ar4
1A21 C005      5511            push    ar5
1A23 904F80    5512            mov     dptr,#_pwm_left
1A26 EE        5513            mov     a,r6
1A27 F0        5514            movx    @dptr,a
1A28           5515   ;        main.c:1115: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
1A28 904C30    5516            mov     dptr,#_pwm_corr
1A2B E0        5517            movx    a,@dptr
1A2C F510      5518            mov     _Joystick_Control_sloc5_1_0,a
1A2E A3        5519            inc     dptr
1A2F E0        5520            movx    a,@dptr
1A30 F511      5521            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1A32 A3        5522            inc     dptr
1A33 E0        5523            movx    a,@dptr
1A34 F512      5524            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1A36 A3        5525            inc     dptr
1A37 E0        5526            movx    a,@dptr
1A38 F513      5527            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1A3A 8E82      5528            mov     dpl,r6
1A3C 8F83      5529            mov     dph,r7
1A3E C006      5530            push    ar6
1A40 C007      5531            push    ar7
1A42 120000    5532            lcall   ___sint2fs
1A45 AA82      5533            mov     r2,dpl
1A47 AB83      5534            mov     r3,dph
1A49 ACF0      5535            mov     r4,b
1A4B FD        5536            mov     r5,a
1A4C C002      5537            push    ar2
1A4E C003      5538            push    ar3
1A50 C004      5539            push    ar4
1A52 C005      5540            push    ar5
1A54 851082    5541            mov     dpl,_Joystick_Control_sloc5_1_0
1A57 851183    5542            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1A5A 8512F0    5543            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1A5D E513      5544            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1A5F 120000    5545            lcall   ___fsmul
1A62 AA82      5546            mov     r2,dpl
1A64 AB83      5547            mov     r3,dph
1A66 ACF0      5548            mov     r4,b
1A68 FD        5549            mov     r5,a
1A69 E581      5550            mov     a,sp
1A6B 24FC      5551            add     a,#0xfc
1A6D F581      5552            mov     sp,a
1A6F D007      5553            pop     ar7
1A71 D006      5554            pop     ar6
1A73 C004      5555            push    ar4
1A75 C005      5556            push    ar5
1A77 C006      5557            push    ar6
1A79 C007      5558            push    ar7
1A7B C002      5559            push    ar2
1A7D C003      5560            push    ar3
1A7F C004      5561            push    ar4
1A81 C005      5562            push    ar5
1A83 900000    5563            mov     dptr,#0x0000
1A86 75F0C8    5564            mov     b,#0xC8
1A89 7442      5565            mov     a,#0x42
1A8B 120000    5566            lcall   ___fsmul
1A8E 858210    5567            mov     _Joystick_Control_sloc5_1_0,dpl
1A91 858311    5568            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1A94 85F012    5569            mov     (_Joystick_Control_sloc5_1_0 + 2),b
1A97 F513      5570            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1A99 E581      5571            mov     a,sp
1A9B 24FC      5572            add     a,#0xfc
1A9D F581      5573            mov     sp,a
1A9F D007      5574            pop     ar7
1AA1 D006      5575            pop     ar6
1AA3 D005      5576            pop     ar5
1AA5 D004      5577            pop     ar4
1AA7 EE        5578            mov     a,r6
1AA8 2560      5579            add     a,_Joystick_Control_sloc6_1_0
1AAA F582      5580            mov     dpl,a
1AAC EF        5581            mov     a,r7
1AAD 3561      5582            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1AAF F583      5583            mov     dph,a
1AB1 C006      5584            push    ar6
1AB3 C007      5585            push    ar7
1AB5 120000    5586            lcall   ___sint2fs
1AB8 AA82      5587            mov     r2,dpl
1ABA AB83      5588            mov     r3,dph
1ABC ACF0      5589            mov     r4,b
1ABE FD        5590            mov     r5,a
1ABF C002      5591            push    ar2
1AC1 C003      5592            push    ar3
1AC3 C004      5593            push    ar4
1AC5 C005      5594            push    ar5
1AC7 851082    5595            mov     dpl,_Joystick_Control_sloc5_1_0
1ACA 851183    5596            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1ACD 8512F0    5597            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1AD0 E513      5598            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1AD2 120000    5599            lcall   ___fsdiv
1AD5 AA82      5600            mov     r2,dpl
1AD7 AB83      5601            mov     r3,dph
1AD9 ACF0      5602            mov     r4,b
1ADB FD        5603            mov     r5,a
1ADC E581      5604            mov     a,sp
1ADE 24FC      5605            add     a,#0xfc
1AE0 F581      5606            mov     sp,a
1AE2 D007      5607            pop     ar7
1AE4 D006      5608            pop     ar6
1AE6 8A82      5609            mov     dpl,r2
1AE8 8B83      5610            mov     dph,r3
1AEA 8CF0      5611            mov     b,r4
1AEC ED        5612            mov     a,r5
1AED C004      5613            push    ar4
1AEF C005      5614            push    ar5
1AF1 C006      5615            push    ar6
1AF3 C007      5616            push    ar7
1AF5 120000    5617            lcall   ___fs2uchar
1AF8 E582      5618            mov     a,dpl
1AFA D007      5619            pop     ar7
1AFC D006      5620            pop     ar6
1AFE D005      5621            pop     ar5
1B00 D004      5622            pop     ar4
1B02 904F40    5623            mov     dptr,#_pwm_right
1B05 F0        5624            movx    @dptr,a
1B06 D005      5625            pop     ar5
1B08 D004      5626            pop     ar4
1B0A 020000    5627            ljmp    L040023?
1B0D           5628   L040014?:
1B0D           5629   ;        main.c:1118: pwm_left = vx_error; 
1B0D C004      5630            push    ar4
1B0F C005      5631            push    ar5
1B11 904F80    5632            mov     dptr,#_pwm_left
1B14 E560      5633            mov     a,_Joystick_Control_sloc6_1_0
1B16 F0        5634            movx    @dptr,a
1B17           5635   ;        main.c:1119: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
1B17 904C30    5636            mov     dptr,#_pwm_corr
1B1A E0        5637            movx    a,@dptr
1B1B F510      5638            mov     _Joystick_Control_sloc5_1_0,a
1B1D A3        5639            inc     dptr
1B1E E0        5640            movx    a,@dptr
1B1F F511      5641            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1B21 A3        5642            inc     dptr
1B22 E0        5643            movx    a,@dptr
1B23 F512      5644            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1B25 A3        5645            inc     dptr
1B26 E0        5646            movx    a,@dptr
1B27 F513      5647            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1B29 856082    5648            mov     dpl,_Joystick_Control_sloc6_1_0
1B2C 856183    5649            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
1B2F C006      5650            push    ar6
1B31 C007      5651            push    ar7
1B33 120000    5652            lcall   ___sint2fs
1B36 AA82      5653            mov     r2,dpl
1B38 AB83      5654            mov     r3,dph
1B3A ACF0      5655            mov     r4,b
1B3C FD        5656            mov     r5,a
1B3D C002      5657            push    ar2
1B3F C003      5658            push    ar3
1B41 C004      5659            push    ar4
1B43 C005      5660            push    ar5
1B45 851082    5661            mov     dpl,_Joystick_Control_sloc5_1_0
1B48 851183    5662            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1B4B 8512F0    5663            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1B4E E513      5664            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1B50 120000    5665            lcall   ___fsmul
1B53 AA82      5666            mov     r2,dpl
1B55 AB83      5667            mov     r3,dph
1B57 ACF0      5668            mov     r4,b
1B59 FD        5669            mov     r5,a
1B5A E581      5670            mov     a,sp
1B5C 24FC      5671            add     a,#0xfc
1B5E F581      5672            mov     sp,a
1B60 D007      5673            pop     ar7
1B62 D006      5674            pop     ar6
1B64 C004      5675            push    ar4
1B66 C005      5676            push    ar5
1B68 C006      5677            push    ar6
1B6A C007      5678            push    ar7
1B6C C002      5679            push    ar2
1B6E C003      5680            push    ar3
1B70 C004      5681            push    ar4
1B72 C005      5682            push    ar5
1B74 900000    5683            mov     dptr,#0x0000
1B77 75F0C8    5684            mov     b,#0xC8
1B7A 7442      5685            mov     a,#0x42
1B7C 120000    5686            lcall   ___fsmul
1B7F 858210    5687            mov     _Joystick_Control_sloc5_1_0,dpl
1B82 858311    5688            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1B85 85F012    5689            mov     (_Joystick_Control_sloc5_1_0 + 2),b
1B88 F513      5690            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1B8A E581      5691            mov     a,sp
1B8C 24FC      5692            add     a,#0xfc
1B8E F581      5693            mov     sp,a
1B90 D007      5694            pop     ar7
1B92 D006      5695            pop     ar6
1B94 D005      5696            pop     ar5
1B96 D004      5697            pop     ar4
1B98 EE        5698            mov     a,r6
1B99 2560      5699            add     a,_Joystick_Control_sloc6_1_0
1B9B F582      5700            mov     dpl,a
1B9D EF        5701            mov     a,r7
1B9E 3561      5702            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1BA0 F583      5703            mov     dph,a
1BA2 C006      5704            push    ar6
1BA4 C007      5705            push    ar7
1BA6 120000    5706            lcall   ___sint2fs
1BA9 AA82      5707            mov     r2,dpl
1BAB AB83      5708            mov     r3,dph
1BAD ACF0      5709            mov     r4,b
1BAF FD        5710            mov     r5,a
1BB0 C002      5711            push    ar2
1BB2 C003      5712            push    ar3
1BB4 C004      5713            push    ar4
1BB6 C005      5714            push    ar5
1BB8 851082    5715            mov     dpl,_Joystick_Control_sloc5_1_0
1BBB 851183    5716            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1BBE 8512F0    5717            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1BC1 E513      5718            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1BC3 120000    5719            lcall   ___fsdiv
1BC6 AA82      5720            mov     r2,dpl
1BC8 AB83      5721            mov     r3,dph
1BCA ACF0      5722            mov     r4,b
1BCC FD        5723            mov     r5,a
1BCD E581      5724            mov     a,sp
1BCF 24FC      5725            add     a,#0xfc
1BD1 F581      5726            mov     sp,a
1BD3 D007      5727            pop     ar7
1BD5 D006      5728            pop     ar6
1BD7 8A82      5729            mov     dpl,r2
1BD9 8B83      5730            mov     dph,r3
1BDB 8CF0      5731            mov     b,r4
1BDD ED        5732            mov     a,r5
1BDE C004      5733            push    ar4
1BE0 C005      5734            push    ar5
1BE2 C006      5735            push    ar6
1BE4 C007      5736            push    ar7
1BE6 120000    5737            lcall   ___fs2uchar
1BE9 E582      5738            mov     a,dpl
1BEB D007      5739            pop     ar7
1BED D006      5740            pop     ar6
1BEF D005      5741            pop     ar5
1BF1 D004      5742            pop     ar4
1BF3 904F40    5743            mov     dptr,#_pwm_right
1BF6 F0        5744            movx    @dptr,a
1BF7 D005      5745            pop     ar5
1BF9 D004      5746            pop     ar4
1BFB 020000    5747            ljmp    L040023?
1BFE           5748   L040020?:
1BFE           5749   ;        main.c:1124: if (vy*100<=vy_thres*100/2){
1BFE 8C00      5750            mov     __mulint_PARM_2,r4
1C00 8D01      5751            mov     (__mulint_PARM_2 + 1),r5
1C02 900064    5752            mov     dptr,#0x0064
1C05 C004      5753            push    ar4
1C07 C005      5754            push    ar5
1C09 C006      5755            push    ar6
1C0B C007      5756            push    ar7
1C0D 120000    5757            lcall   __mulint
1C10 AA82      5758            mov     r2,dpl
1C12 AB83      5759            mov     r3,dph
1C14 D007      5760            pop     ar7
1C16 D006      5761            pop     ar6
1C18 D005      5762            pop     ar5
1C1A D004      5763            pop     ar4
1C1C 852000    5764            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
1C1F 852101    5765            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
1C22 900064    5766            mov     dptr,#0x0064
1C25 C002      5767            push    ar2
1C27 C003      5768            push    ar3
1C29 C004      5769            push    ar4
1C2B C005      5770            push    ar5
1C2D C006      5771            push    ar6
1C2F C007      5772            push    ar7
1C31 120000    5773            lcall   __mulint
1C34 A882      5774            mov     r0,dpl
1C36 A983      5775            mov     r1,dph
1C38 750002    5776            mov     __divsint_PARM_2,#0x02
1C3B E4        5777            clr     a
1C3C F501      5778            mov     (__divsint_PARM_2 + 1),a
1C3E 8882      5779            mov     dpl,r0
1C40 8983      5780            mov     dph,r1
1C42 120000    5781            lcall   __divsint
1C45 A882      5782            mov     r0,dpl
1C47 A983      5783            mov     r1,dph
1C49 D007      5784            pop     ar7
1C4B D006      5785            pop     ar6
1C4D D005      5786            pop     ar5
1C4F D004      5787            pop     ar4
1C51 D003      5788            pop     ar3
1C53 D002      5789            pop     ar2
1C55 C3        5790            clr     c
1C56 E8        5791            mov     a,r0
1C57 9A        5792            subb    a,r2
1C58 E9        5793            mov     a,r1
1C59 6480      5794            xrl     a,#0x80
1C5B 8BF0      5795            mov     b,r3
1C5D 63F080    5796            xrl     b,#0x80
1C60 95F0      5797            subb    a,b
1C62 5000      5798            jnc     L040067?
1C64 020000    5799            ljmp    L040017?
1C67           5800   L040067?:
1C67           5801   ;        main.c:1125: pwm_left = vy_error*100/(vx_error+vy_error);
1C67 C004      5802            push    ar4
1C69 C005      5803            push    ar5
1C6B 8E00      5804            mov     __mulint_PARM_2,r6
1C6D 8F01      5805            mov     (__mulint_PARM_2 + 1),r7
1C6F 900064    5806            mov     dptr,#0x0064
1C72 C004      5807            push    ar4
1C74 C005      5808            push    ar5
1C76 C006      5809            push    ar6
1C78 C007      5810            push    ar7
1C7A 120000    5811            lcall   __mulint
1C7D AA82      5812            mov     r2,dpl
1C7F AB83      5813            mov     r3,dph
1C81 D007      5814            pop     ar7
1C83 D006      5815            pop     ar6
1C85 EE        5816            mov     a,r6
1C86 2560      5817            add     a,_Joystick_Control_sloc6_1_0
1C88 F500      5818            mov     __divsint_PARM_2,a
1C8A EF        5819            mov     a,r7
1C8B 3561      5820            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1C8D F501      5821            mov     (__divsint_PARM_2 + 1),a
1C8F 8A82      5822            mov     dpl,r2
1C91 8B83      5823            mov     dph,r3
1C93 C006      5824            push    ar6
1C95 C007      5825            push    ar7
1C97 120000    5826            lcall   __divsint
1C9A AA82      5827            mov     r2,dpl
1C9C D007      5828            pop     ar7
1C9E D006      5829            pop     ar6
1CA0 D005      5830            pop     ar5
1CA2 D004      5831            pop     ar4
1CA4 904F80    5832            mov     dptr,#_pwm_left
1CA7 EA        5833            mov     a,r2
1CA8 F0        5834            movx    @dptr,a
1CA9           5835   ;        main.c:1126: pwm_right = vy_error*pwm_corr; 
1CA9 8E82      5836            mov     dpl,r6
1CAB 8F83      5837            mov     dph,r7
1CAD C006      5838            push    ar6
1CAF C007      5839            push    ar7
1CB1 120000    5840            lcall   ___sint2fs
1CB4 AA82      5841            mov     r2,dpl
1CB6 AB83      5842            mov     r3,dph
1CB8 ACF0      5843            mov     r4,b
1CBA FD        5844            mov     r5,a
1CBB 904C30    5845            mov     dptr,#_pwm_corr
1CBE E0        5846            movx    a,@dptr
1CBF C0E0      5847            push    acc
1CC1 A3        5848            inc     dptr
1CC2 E0        5849            movx    a,@dptr
1CC3 C0E0      5850            push    acc
1CC5 A3        5851            inc     dptr
1CC6 E0        5852            movx    a,@dptr
1CC7 C0E0      5853            push    acc
1CC9 A3        5854            inc     dptr
1CCA E0        5855            movx    a,@dptr
1CCB C0E0      5856            push    acc
1CCD 8A82      5857            mov     dpl,r2
1CCF 8B83      5858            mov     dph,r3
1CD1 8CF0      5859            mov     b,r4
1CD3 ED        5860            mov     a,r5
1CD4 120000    5861            lcall   ___fsmul
1CD7 AA82      5862            mov     r2,dpl
1CD9 AB83      5863            mov     r3,dph
1CDB ACF0      5864            mov     r4,b
1CDD FD        5865            mov     r5,a
1CDE E581      5866            mov     a,sp
1CE0 24FC      5867            add     a,#0xfc
1CE2 F581      5868            mov     sp,a
1CE4 D007      5869            pop     ar7
1CE6 D006      5870            pop     ar6
1CE8 8A82      5871            mov     dpl,r2
1CEA 8B83      5872            mov     dph,r3
1CEC 8CF0      5873            mov     b,r4
1CEE ED        5874            mov     a,r5
1CEF C004      5875            push    ar4
1CF1 C005      5876            push    ar5
1CF3 C006      5877            push    ar6
1CF5 C007      5878            push    ar7
1CF7 120000    5879            lcall   ___fs2uchar
1CFA E582      5880            mov     a,dpl
1CFC D007      5881            pop     ar7
1CFE D006      5882            pop     ar6
1D00 D005      5883            pop     ar5
1D02 D004      5884            pop     ar4
1D04 904F40    5885            mov     dptr,#_pwm_right
1D07 F0        5886            movx    @dptr,a
1D08 D005      5887            pop     ar5
1D0A D004      5888            pop     ar4
1D0C 020000    5889            ljmp    L040023?
1D0F           5890   L040017?:
1D0F           5891   ;        main.c:1129: pwm_left = vx_error*100/(vx_error+vy_error);
1D0F C004      5892            push    ar4
1D11 C005      5893            push    ar5
1D13 856000    5894            mov     __mulint_PARM_2,_Joystick_Control_sloc6_1_0
1D16 856101    5895            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc6_1_0 + 1)
1D19 900064    5896            mov     dptr,#0x0064
1D1C C004      5897            push    ar4
1D1E C005      5898            push    ar5
1D20 C006      5899            push    ar6
1D22 C007      5900            push    ar7
1D24 120000    5901            lcall   __mulint
1D27 AA82      5902            mov     r2,dpl
1D29 AB83      5903            mov     r3,dph
1D2B D007      5904            pop     ar7
1D2D D006      5905            pop     ar6
1D2F EE        5906            mov     a,r6
1D30 2560      5907            add     a,_Joystick_Control_sloc6_1_0
1D32 F500      5908            mov     __divsint_PARM_2,a
1D34 EF        5909            mov     a,r7
1D35 3561      5910            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1D37 F501      5911            mov     (__divsint_PARM_2 + 1),a
1D39 8A82      5912            mov     dpl,r2
1D3B 8B83      5913            mov     dph,r3
1D3D C006      5914            push    ar6
1D3F C007      5915            push    ar7
1D41 120000    5916            lcall   __divsint
1D44 AA82      5917            mov     r2,dpl
1D46 D007      5918            pop     ar7
1D48 D006      5919            pop     ar6
1D4A D005      5920            pop     ar5
1D4C D004      5921            pop     ar4
1D4E 904F80    5922            mov     dptr,#_pwm_left
1D51 EA        5923            mov     a,r2
1D52 F0        5924            movx    @dptr,a
1D53           5925   ;        main.c:1130: pwm_right = vx_error*pwm_corr; 
1D53 856082    5926            mov     dpl,_Joystick_Control_sloc6_1_0
1D56 856183    5927            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
1D59 C006      5928            push    ar6
1D5B C007      5929            push    ar7
1D5D 120000    5930            lcall   ___sint2fs
1D60 AA82      5931            mov     r2,dpl
1D62 AB83      5932            mov     r3,dph
1D64 ACF0      5933            mov     r4,b
1D66 FD        5934            mov     r5,a
1D67 904C30    5935            mov     dptr,#_pwm_corr
1D6A E0        5936            movx    a,@dptr
1D6B C0E0      5937            push    acc
1D6D A3        5938            inc     dptr
1D6E E0        5939            movx    a,@dptr
1D6F C0E0      5940            push    acc
1D71 A3        5941            inc     dptr
1D72 E0        5942            movx    a,@dptr
1D73 C0E0      5943            push    acc
1D75 A3        5944            inc     dptr
1D76 E0        5945            movx    a,@dptr
1D77 C0E0      5946            push    acc
1D79 8A82      5947            mov     dpl,r2
1D7B 8B83      5948            mov     dph,r3
1D7D 8CF0      5949            mov     b,r4
1D7F ED        5950            mov     a,r5
1D80 120000    5951            lcall   ___fsmul
1D83 AA82      5952            mov     r2,dpl
1D85 AB83      5953            mov     r3,dph
1D87 ACF0      5954            mov     r4,b
1D89 FD        5955            mov     r5,a
1D8A E581      5956            mov     a,sp
1D8C 24FC      5957            add     a,#0xfc
1D8E F581      5958            mov     sp,a
1D90 D007      5959            pop     ar7
1D92 D006      5960            pop     ar6
1D94 8A82      5961            mov     dpl,r2
1D96 8B83      5962            mov     dph,r3
1D98 8CF0      5963            mov     b,r4
1D9A ED        5964            mov     a,r5
1D9B C004      5965            push    ar4
1D9D C005      5966            push    ar5
1D9F C006      5967            push    ar6
1DA1 C007      5968            push    ar7
1DA3 120000    5969            lcall   ___fs2uchar
1DA6 E582      5970            mov     a,dpl
1DA8 D007      5971            pop     ar7
1DAA D006      5972            pop     ar6
1DAC D005      5973            pop     ar5
1DAE D004      5974            pop     ar4
1DB0 904F40    5975            mov     dptr,#_pwm_right
1DB3 F0        5976            movx    @dptr,a
1DB4           5977   ;        main.c:1162: return; 
1DB4 D005      5978            pop     ar5
1DB6 D004      5979            pop     ar4
1DB8           5980   ;        main.c:1130: pwm_right = vx_error*pwm_corr; 
1DB8           5981   L040023?:
1DB8           5982   ;        main.c:1135: if (vy_err<0){
1DB8 E581      5983            mov     a,(_Joystick_Control_sloc0_1_0 + 1)
1DBA 20E750    5984            jb      acc.7,L040068?
1DBD 22        5985            ret
1DBE           5986   L040068?:
1DBE           5987   ;        main.c:1136: L_motor_dir = 1; 
1DBE 904F00    5988            mov     dptr,#_L_motor_dir
1DC1 7401      5989            mov     a,#0x01
1DC3 F0        5990            movx    @dptr,a
1DC4           5991   ;        main.c:1137: R_motor_dir = 1; 
1DC4 904EC0    5992            mov     dptr,#_R_motor_dir
1DC7 7401      5993            mov     a,#0x01
1DC9 F0        5994            movx    @dptr,a
1DCA           5995   ;        main.c:1139: if (vx_err>0){
1DCA C3        5996            clr     c
1DCB E4        5997            clr     a
1DCC 95C0      5998            subb    a,_Joystick_Control_sloc4_1_0
1DCE E4        5999            clr     a
1DCF 6480      6000            xrl     a,#0x80
1DD1 85C1F0    6001            mov     b,(_Joystick_Control_sloc4_1_0 + 1)
1DD4 63F080    6002            xrl     b,#0x80
1DD7 95F0      6003            subb    a,b
1DD9 4000      6004            jc      L040069?
1DDB 020000    6005            ljmp    L040031?
1DDE           6006   L040069?:
1DDE           6007   ;        main.c:1140: if (vy*100<=vy_thres*100/2){
1DDE 8C00      6008            mov     __mulint_PARM_2,r4
1DE0 8D01      6009            mov     (__mulint_PARM_2 + 1),r5
1DE2 900064    6010            mov     dptr,#0x0064
1DE5 C006      6011            push    ar6
1DE7 C007      6012            push    ar7
1DE9 120000    6013            lcall   __mulint
1DEC AA82      6014            mov     r2,dpl
1DEE AB83      6015            mov     r3,dph
1DF0 D007      6016            pop     ar7
1DF2 D006      6017            pop     ar6
1DF4 852000    6018            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
1DF7 852101    6019            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
1DFA 900064    6020            mov     dptr,#0x0064
1DFD C002      6021            push    ar2
1DFF C003      6022            push    ar3
1E01 C006      6023            push    ar6
1E03 C007      6024            push    ar7
1E05 120000    6025            lcall   __mulint
1E08 A882      6026            mov     r0,dpl
1E0A A983      6027            mov     r1,dph
1E0C 750002    6028            mov     __divsint_PARM_2,#0x02
1E0F E4        6029            clr     a
1E10 F501      6030            mov     (__divsint_PARM_2 + 1),a
1E12 8882      6031            mov     dpl,r0
1E14 8983      6032            mov     dph,r1
1E16 120000    6033            lcall   __divsint
1E19 A882      6034            mov     r0,dpl
1E1B A983      6035            mov     r1,dph
1E1D D007      6036            pop     ar7
1E1F D006      6037            pop     ar6
1E21 D003      6038            pop     ar3
1E23 D002      6039            pop     ar2
1E25 C3        6040            clr     c
1E26 E8        6041            mov     a,r0
1E27 9A        6042            subb    a,r2
1E28 E9        6043            mov     a,r1
1E29 6480      6044            xrl     a,#0x80
1E2B 8BF0      6045            mov     b,r3
1E2D 63F080    6046            xrl     b,#0x80
1E30 95F0      6047            subb    a,b
1E32 5000      6048            jnc     L040070?
1E34 020000    6049            ljmp    L040025?
1E37           6050   L040070?:
1E37           6051   ;        main.c:1141: pwm_left = vy_error; 
1E37 904F80    6052            mov     dptr,#_pwm_left
1E3A EE        6053            mov     a,r6
1E3B F0        6054            movx    @dptr,a
1E3C           6055   ;        main.c:1142: pwm_right = pwm_corr*vy_error*100/(vx_error+vy_error);
1E3C 904C30    6056            mov     dptr,#_pwm_corr
1E3F E0        6057            movx    a,@dptr
1E40 F510      6058            mov     _Joystick_Control_sloc5_1_0,a
1E42 A3        6059            inc     dptr
1E43 E0        6060            movx    a,@dptr
1E44 F511      6061            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1E46 A3        6062            inc     dptr
1E47 E0        6063            movx    a,@dptr
1E48 F512      6064            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1E4A A3        6065            inc     dptr
1E4B E0        6066            movx    a,@dptr
1E4C F513      6067            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1E4E 8E82      6068            mov     dpl,r6
1E50 8F83      6069            mov     dph,r7
1E52 C006      6070            push    ar6
1E54 C007      6071            push    ar7
1E56 120000    6072            lcall   ___sint2fs
1E59 AA82      6073            mov     r2,dpl
1E5B AB83      6074            mov     r3,dph
1E5D A8F0      6075            mov     r0,b
1E5F F9        6076            mov     r1,a
1E60 C002      6077            push    ar2
1E62 C003      6078            push    ar3
1E64 C000      6079            push    ar0
1E66 C001      6080            push    ar1
1E68 851082    6081            mov     dpl,_Joystick_Control_sloc5_1_0
1E6B 851183    6082            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1E6E 8512F0    6083            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1E71 E513      6084            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1E73 120000    6085            lcall   ___fsmul
1E76 AA82      6086            mov     r2,dpl
1E78 AB83      6087            mov     r3,dph
1E7A A8F0      6088            mov     r0,b
1E7C F9        6089            mov     r1,a
1E7D E581      6090            mov     a,sp
1E7F 24FC      6091            add     a,#0xfc
1E81 F581      6092            mov     sp,a
1E83 C002      6093            push    ar2
1E85 C003      6094            push    ar3
1E87 C000      6095            push    ar0
1E89 C001      6096            push    ar1
1E8B 900000    6097            mov     dptr,#0x0000
1E8E 75F0C8    6098            mov     b,#0xC8
1E91 7442      6099            mov     a,#0x42
1E93 120000    6100            lcall   ___fsmul
1E96 858210    6101            mov     _Joystick_Control_sloc5_1_0,dpl
1E99 858311    6102            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1E9C 85F012    6103            mov     (_Joystick_Control_sloc5_1_0 + 2),b
1E9F F513      6104            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1EA1 E581      6105            mov     a,sp
1EA3 24FC      6106            add     a,#0xfc
1EA5 F581      6107            mov     sp,a
1EA7 D007      6108            pop     ar7
1EA9 D006      6109            pop     ar6
1EAB EE        6110            mov     a,r6
1EAC 2560      6111            add     a,_Joystick_Control_sloc6_1_0
1EAE F582      6112            mov     dpl,a
1EB0 EF        6113            mov     a,r7
1EB1 3561      6114            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1EB3 F583      6115            mov     dph,a
1EB5 120000    6116            lcall   ___sint2fs
1EB8 AA82      6117            mov     r2,dpl
1EBA AB83      6118            mov     r3,dph
1EBC A8F0      6119            mov     r0,b
1EBE F9        6120            mov     r1,a
1EBF C002      6121            push    ar2
1EC1 C003      6122            push    ar3
1EC3 C000      6123            push    ar0
1EC5 C001      6124            push    ar1
1EC7 851082    6125            mov     dpl,_Joystick_Control_sloc5_1_0
1ECA 851183    6126            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1ECD 8512F0    6127            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1ED0 E513      6128            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1ED2 120000    6129            lcall   ___fsdiv
1ED5 AA82      6130            mov     r2,dpl
1ED7 AB83      6131            mov     r3,dph
1ED9 A8F0      6132            mov     r0,b
1EDB F9        6133            mov     r1,a
1EDC E581      6134            mov     a,sp
1EDE 24FC      6135            add     a,#0xfc
1EE0 F581      6136            mov     sp,a
1EE2 8A82      6137            mov     dpl,r2
1EE4 8B83      6138            mov     dph,r3
1EE6 88F0      6139            mov     b,r0
1EE8 E9        6140            mov     a,r1
1EE9 120000    6141            lcall   ___fs2uchar
1EEC E582      6142            mov     a,dpl
1EEE 904F40    6143            mov     dptr,#_pwm_right
1EF1 F0        6144            movx    @dptr,a
1EF2 22        6145            ret
1EF3           6146   L040025?:
1EF3           6147   ;        main.c:1145: pwm_left = vx_error; 
1EF3 904F80    6148            mov     dptr,#_pwm_left
1EF6 E560      6149            mov     a,_Joystick_Control_sloc6_1_0
1EF8 F0        6150            movx    @dptr,a
1EF9           6151   ;        main.c:1146: pwm_right = pwm_corr*vx_error*100/(vx_error+vy_error);
1EF9 904C30    6152            mov     dptr,#_pwm_corr
1EFC E0        6153            movx    a,@dptr
1EFD F510      6154            mov     _Joystick_Control_sloc5_1_0,a
1EFF A3        6155            inc     dptr
1F00 E0        6156            movx    a,@dptr
1F01 F511      6157            mov     (_Joystick_Control_sloc5_1_0 + 1),a
1F03 A3        6158            inc     dptr
1F04 E0        6159            movx    a,@dptr
1F05 F512      6160            mov     (_Joystick_Control_sloc5_1_0 + 2),a
1F07 A3        6161            inc     dptr
1F08 E0        6162            movx    a,@dptr
1F09 F513      6163            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1F0B 856082    6164            mov     dpl,_Joystick_Control_sloc6_1_0
1F0E 856183    6165            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
1F11 C006      6166            push    ar6
1F13 C007      6167            push    ar7
1F15 120000    6168            lcall   ___sint2fs
1F18 AA82      6169            mov     r2,dpl
1F1A AB83      6170            mov     r3,dph
1F1C A8F0      6171            mov     r0,b
1F1E F9        6172            mov     r1,a
1F1F C002      6173            push    ar2
1F21 C003      6174            push    ar3
1F23 C000      6175            push    ar0
1F25 C001      6176            push    ar1
1F27 851082    6177            mov     dpl,_Joystick_Control_sloc5_1_0
1F2A 851183    6178            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1F2D 8512F0    6179            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1F30 E513      6180            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1F32 120000    6181            lcall   ___fsmul
1F35 AA82      6182            mov     r2,dpl
1F37 AB83      6183            mov     r3,dph
1F39 A8F0      6184            mov     r0,b
1F3B F9        6185            mov     r1,a
1F3C E581      6186            mov     a,sp
1F3E 24FC      6187            add     a,#0xfc
1F40 F581      6188            mov     sp,a
1F42 C002      6189            push    ar2
1F44 C003      6190            push    ar3
1F46 C000      6191            push    ar0
1F48 C001      6192            push    ar1
1F4A 900000    6193            mov     dptr,#0x0000
1F4D 75F0C8    6194            mov     b,#0xC8
1F50 7442      6195            mov     a,#0x42
1F52 120000    6196            lcall   ___fsmul
1F55 858210    6197            mov     _Joystick_Control_sloc5_1_0,dpl
1F58 858311    6198            mov     (_Joystick_Control_sloc5_1_0 + 1),dph
1F5B 85F012    6199            mov     (_Joystick_Control_sloc5_1_0 + 2),b
1F5E F513      6200            mov     (_Joystick_Control_sloc5_1_0 + 3),a
1F60 E581      6201            mov     a,sp
1F62 24FC      6202            add     a,#0xfc
1F64 F581      6203            mov     sp,a
1F66 D007      6204            pop     ar7
1F68 D006      6205            pop     ar6
1F6A EE        6206            mov     a,r6
1F6B 2560      6207            add     a,_Joystick_Control_sloc6_1_0
1F6D F582      6208            mov     dpl,a
1F6F EF        6209            mov     a,r7
1F70 3561      6210            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
1F72 F583      6211            mov     dph,a
1F74 120000    6212            lcall   ___sint2fs
1F77 AA82      6213            mov     r2,dpl
1F79 AB83      6214            mov     r3,dph
1F7B A8F0      6215            mov     r0,b
1F7D F9        6216            mov     r1,a
1F7E C002      6217            push    ar2
1F80 C003      6218            push    ar3
1F82 C000      6219            push    ar0
1F84 C001      6220            push    ar1
1F86 851082    6221            mov     dpl,_Joystick_Control_sloc5_1_0
1F89 851183    6222            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
1F8C 8512F0    6223            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
1F8F E513      6224            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
1F91 120000    6225            lcall   ___fsdiv
1F94 AA82      6226            mov     r2,dpl
1F96 AB83      6227            mov     r3,dph
1F98 A8F0      6228            mov     r0,b
1F9A F9        6229            mov     r1,a
1F9B E581      6230            mov     a,sp
1F9D 24FC      6231            add     a,#0xfc
1F9F F581      6232            mov     sp,a
1FA1 8A82      6233            mov     dpl,r2
1FA3 8B83      6234            mov     dph,r3
1FA5 88F0      6235            mov     b,r0
1FA7 E9        6236            mov     a,r1
1FA8 120000    6237            lcall   ___fs2uchar
1FAB E582      6238            mov     a,dpl
1FAD 904F40    6239            mov     dptr,#_pwm_right
1FB0 F0        6240            movx    @dptr,a
1FB1 22        6241            ret
1FB2           6242   L040031?:
1FB2           6243   ;        main.c:1151: if (vy*100<=vy_thres*100/2){
1FB2 8C00      6244            mov     __mulint_PARM_2,r4
1FB4 8D01      6245            mov     (__mulint_PARM_2 + 1),r5
1FB6 900064    6246            mov     dptr,#0x0064
1FB9 C006      6247            push    ar6
1FBB C007      6248            push    ar7
1FBD 120000    6249            lcall   __mulint
1FC0 AA82      6250            mov     r2,dpl
1FC2 AB83      6251            mov     r3,dph
1FC4 D007      6252            pop     ar7
1FC6 D006      6253            pop     ar6
1FC8 852000    6254            mov     __mulint_PARM_2,_Joystick_Control_sloc2_1_0
1FCB 852101    6255            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc2_1_0 + 1)
1FCE 900064    6256            mov     dptr,#0x0064
1FD1 C002      6257            push    ar2
1FD3 C003      6258            push    ar3
1FD5 C006      6259            push    ar6
1FD7 C007      6260            push    ar7
1FD9 120000    6261            lcall   __mulint
1FDC AC82      6262            mov     r4,dpl
1FDE AD83      6263            mov     r5,dph
1FE0 750002    6264            mov     __divsint_PARM_2,#0x02
1FE3 E4        6265            clr     a
1FE4 F501      6266            mov     (__divsint_PARM_2 + 1),a
1FE6 8C82      6267            mov     dpl,r4
1FE8 8D83      6268            mov     dph,r5
1FEA 120000    6269            lcall   __divsint
1FED AC82      6270            mov     r4,dpl
1FEF AD83      6271            mov     r5,dph
1FF1 D007      6272            pop     ar7
1FF3 D006      6273            pop     ar6
1FF5 D003      6274            pop     ar3
1FF7 D002      6275            pop     ar2
1FF9 C3        6276            clr     c
1FFA EC        6277            mov     a,r4
1FFB 9A        6278            subb    a,r2
1FFC ED        6279            mov     a,r5
1FFD 6480      6280            xrl     a,#0x80
1FFF 8BF0      6281            mov     b,r3
2001 63F080    6282            xrl     b,#0x80
2004 95F0      6283            subb    a,b
2006 5000      6284            jnc     L040071?
2008 020000    6285            ljmp    L040028?
200B           6286   L040071?:
200B           6287   ;        main.c:1152: pwm_left = vy_error*100/(vx_error+vy_error);
200B 8E00      6288            mov     __mulint_PARM_2,r6
200D 8F01      6289            mov     (__mulint_PARM_2 + 1),r7
200F 900064    6290            mov     dptr,#0x0064
2012 C006      6291            push    ar6
2014 C007      6292            push    ar7
2016 120000    6293            lcall   __mulint
2019 AA82      6294            mov     r2,dpl
201B AB83      6295            mov     r3,dph
201D D007      6296            pop     ar7
201F D006      6297            pop     ar6
2021 EE        6298            mov     a,r6
2022 2560      6299            add     a,_Joystick_Control_sloc6_1_0
2024 F500      6300            mov     __divsint_PARM_2,a
2026 EF        6301            mov     a,r7
2027 3561      6302            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
2029 F501      6303            mov     (__divsint_PARM_2 + 1),a
202B 8A82      6304            mov     dpl,r2
202D 8B83      6305            mov     dph,r3
202F C006      6306            push    ar6
2031 C007      6307            push    ar7
2033 120000    6308            lcall   __divsint
2036 AA82      6309            mov     r2,dpl
2038 D007      6310            pop     ar7
203A D006      6311            pop     ar6
203C 904F80    6312            mov     dptr,#_pwm_left
203F EA        6313            mov     a,r2
2040 F0        6314            movx    @dptr,a
2041           6315   ;        main.c:1153: pwm_right =pwm_corr*vy_error; 
2041 904C30    6316            mov     dptr,#_pwm_corr
2044 E0        6317            movx    a,@dptr
2045 F510      6318            mov     _Joystick_Control_sloc5_1_0,a
2047 A3        6319            inc     dptr
2048 E0        6320            movx    a,@dptr
2049 F511      6321            mov     (_Joystick_Control_sloc5_1_0 + 1),a
204B A3        6322            inc     dptr
204C E0        6323            movx    a,@dptr
204D F512      6324            mov     (_Joystick_Control_sloc5_1_0 + 2),a
204F A3        6325            inc     dptr
2050 E0        6326            movx    a,@dptr
2051 F513      6327            mov     (_Joystick_Control_sloc5_1_0 + 3),a
2053 8E82      6328            mov     dpl,r6
2055 8F83      6329            mov     dph,r7
2057 120000    6330            lcall   ___sint2fs
205A A882      6331            mov     r0,dpl
205C A983      6332            mov     r1,dph
205E AAF0      6333            mov     r2,b
2060 FB        6334            mov     r3,a
2061 C000      6335            push    ar0
2063 C001      6336            push    ar1
2065 C002      6337            push    ar2
2067 C003      6338            push    ar3
2069 851082    6339            mov     dpl,_Joystick_Control_sloc5_1_0
206C 851183    6340            mov     dph,(_Joystick_Control_sloc5_1_0 + 1)
206F 8512F0    6341            mov     b,(_Joystick_Control_sloc5_1_0 + 2)
2072 E513      6342            mov     a,(_Joystick_Control_sloc5_1_0 + 3)
2074 120000    6343            lcall   ___fsmul
2077 AA82      6344            mov     r2,dpl
2079 AB83      6345            mov     r3,dph
207B ACF0      6346            mov     r4,b
207D FD        6347            mov     r5,a
207E E581      6348            mov     a,sp
2080 24FC      6349            add     a,#0xfc
2082 F581      6350            mov     sp,a
2084 8A82      6351            mov     dpl,r2
2086 8B83      6352            mov     dph,r3
2088 8CF0      6353            mov     b,r4
208A ED        6354            mov     a,r5
208B 120000    6355            lcall   ___fs2uchar
208E E582      6356            mov     a,dpl
2090 904F40    6357            mov     dptr,#_pwm_right
2093 F0        6358            movx    @dptr,a
2094 22        6359            ret
2095           6360   L040028?:
2095           6361   ;        main.c:1156: pwm_left = vx_error*100/(vx_error+vy_error);
2095 856000    6362            mov     __mulint_PARM_2,_Joystick_Control_sloc6_1_0
2098 856101    6363            mov     (__mulint_PARM_2 + 1),(_Joystick_Control_sloc6_1_0 + 1)
209B 900064    6364            mov     dptr,#0x0064
209E C006      6365            push    ar6
20A0 C007      6366            push    ar7
20A2 120000    6367            lcall   __mulint
20A5 AA82      6368            mov     r2,dpl
20A7 AB83      6369            mov     r3,dph
20A9 D007      6370            pop     ar7
20AB D006      6371            pop     ar6
20AD EE        6372            mov     a,r6
20AE 2560      6373            add     a,_Joystick_Control_sloc6_1_0
20B0 F500      6374            mov     __divsint_PARM_2,a
20B2 EF        6375            mov     a,r7
20B3 3561      6376            addc    a,(_Joystick_Control_sloc6_1_0 + 1)
20B5 F501      6377            mov     (__divsint_PARM_2 + 1),a
20B7 8A82      6378            mov     dpl,r2
20B9 8B83      6379            mov     dph,r3
20BB 120000    6380            lcall   __divsint
20BE AA82      6381            mov     r2,dpl
20C0 904F80    6382            mov     dptr,#_pwm_left
20C3 EA        6383            mov     a,r2
20C4 F0        6384            movx    @dptr,a
20C5           6385   ;        main.c:1157: pwm_right = pwm_corr*vx_error; 
20C5 904C30    6386            mov     dptr,#_pwm_corr
20C8 E0        6387            movx    a,@dptr
20C9 FA        6388            mov     r2,a
20CA A3        6389            inc     dptr
20CB E0        6390            movx    a,@dptr
20CC FB        6391            mov     r3,a
20CD A3        6392            inc     dptr
20CE E0        6393            movx    a,@dptr
20CF FC        6394            mov     r4,a
20D0 A3        6395            inc     dptr
20D1 E0        6396            movx    a,@dptr
20D2 FD        6397            mov     r5,a
20D3 856082    6398            mov     dpl,_Joystick_Control_sloc6_1_0
20D6 856183    6399            mov     dph,(_Joystick_Control_sloc6_1_0 + 1)
20D9 C002      6400            push    ar2
20DB C003      6401            push    ar3
20DD C004      6402            push    ar4
20DF C005      6403            push    ar5
20E1 120000    6404            lcall   ___sint2fs
20E4 AE82      6405            mov     r6,dpl
20E6 AF83      6406            mov     r7,dph
20E8 A8F0      6407            mov     r0,b
20EA F9        6408            mov     r1,a
20EB D005      6409            pop     ar5
20ED D004      6410            pop     ar4
20EF D003      6411            pop     ar3
20F1 D002      6412            pop     ar2
20F3 C006      6413            push    ar6
20F5 C007      6414            push    ar7
20F7 C000      6415            push    ar0
20F9 C001      6416            push    ar1
20FB 8A82      6417            mov     dpl,r2
20FD 8B83      6418            mov     dph,r3
20FF 8CF0      6419            mov     b,r4
2101 ED        6420            mov     a,r5
2102 120000    6421            lcall   ___fsmul
2105 AA82      6422            mov     r2,dpl
2107 AB83      6423            mov     r3,dph
2109 ACF0      6424            mov     r4,b
210B FD        6425            mov     r5,a
210C E581      6426            mov     a,sp
210E 24FC      6427            add     a,#0xfc
2110 F581      6428            mov     sp,a
2112 8A82      6429            mov     dpl,r2
2114 8B83      6430            mov     dph,r3
2116 8CF0      6431            mov     b,r4
2118 ED        6432            mov     a,r5
2119 120000    6433            lcall   ___fs2uchar
211C E582      6434            mov     a,dpl
211E 904F40    6435            mov     dptr,#_pwm_right
2121 F0        6436            movx    @dptr,a
2122           6437   ;        main.c:1162: return; 
2122 22        6438            ret
2123           6439   ;------------------------------------------------------------
2123           6440   ;Allocation info for local variables in function 'main'
2123           6441   ;------------------------------------------------------------
2123           6442   ;pick_char                 Allocated with name '_main_pick_char_1_237'
2123           6443   ;c                         Allocated with name '_main_c_1_237'
2123           6444   ;vx                        Allocated with name '_main_vx_1_237'
2123           6445   ;vy                        Allocated with name '_main_vy_1_237'
2123           6446   ;auto_mode                 Allocated with name '_main_auto_mode_1_237'
2123           6447   ;------------------------------------------------------------
2123           6448   ;        main.c:1165: void main (void)
2123           6449   ;        -----------------------------------------
2123           6450   ;         function main
2123           6451   ;        -----------------------------------------
2123           6452   _main:
2123           6453   ;        main.c:1168: xdata int vx = 0, vy = 0; 
2123 90D120    6454            mov     dptr,#_main_vx_1_237
2126 E4        6455            clr     a
2127 F0        6456            movx    @dptr,a
2128 A3        6457            inc     dptr
2129 F0        6458            movx    @dptr,a
212A 90D160    6459            mov     dptr,#_main_vy_1_237
212D E4        6460            clr     a
212E F0        6461            movx    @dptr,a
212F A3        6462            inc     dptr
2130 F0        6463            movx    @dptr,a
2131           6464   ;        main.c:1169: xdata int auto_mode = 0;
2131 90D1B0    6465            mov     dptr,#_main_auto_mode_1_237
2134 E4        6466            clr     a
2135 F0        6467            movx    @dptr,a
2136 A3        6468            inc     dptr
2137 F0        6469            movx    @dptr,a
2138           6470   ;        main.c:1170: char pick_char = '0';
2138 75B030    6471            mov     _main_pick_char_1_237,#0x30
213B           6472   ;        main.c:1173: Init_all();
213B 120000    6473            lcall   _Init_all
213E           6474   ;        main.c:1174: BMM150_Init();
213E 120000    6475            lcall   _BMM150_Init
2141           6476   ;        main.c:1175: waitms(500);
2141 9001F4    6477            mov     dptr,#0x01F4
2144 120000    6478            lcall   _waitms
2147           6479   ;        main.c:1176: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
2147 7410      6480            mov     a,#__str_12
2149 C0E0      6481            push    acc
214B 7419      6482            mov     a,#(__str_12 >> 8)
214D C0E0      6483            push    acc
214F 7480      6484            mov     a,#0x80
2151 C0E0      6485            push    acc
2153 120000    6486            lcall   _printf
2156 1581      6487            dec     sp
2158 1581      6488            dec     sp
215A 1581      6489            dec     sp
215C           6490   ;        main.c:1177: UART1_Init(9600);
215C 902580    6491            mov     dptr,#0x2580
215F E4        6492            clr     a
2160 F5F0      6493            mov     b,a
2162 120000    6494            lcall   _UART1_Init
2165           6495   ;        main.c:1179: ReceptionOff();
2165 120000    6496            lcall   _ReceptionOff
2168           6497   ;        main.c:1182: SendATCommand("AT+VER\r\n");
2168 901950    6498            mov     dptr,#__str_13
216B 75F080    6499            mov     b,#0x80
216E 120000    6500            lcall   _SendATCommand
2171           6501   ;        main.c:1183: SendATCommand("AT+BAUD\r\n");
2171 901990    6502            mov     dptr,#__str_14
2174 75F080    6503            mov     b,#0x80
2177 120000    6504            lcall   _SendATCommand
217A           6505   ;        main.c:1184: SendATCommand("AT+RFID\r\n");
217A 9019D0    6506            mov     dptr,#__str_15
217D 75F080    6507            mov     b,#0x80
2180 120000    6508            lcall   _SendATCommand
2183           6509   ;        main.c:1185: SendATCommand("AT+DVID\r\n");
2183 901A10    6510            mov     dptr,#__str_16
2186 75F080    6511            mov     b,#0x80
2189 120000    6512            lcall   _SendATCommand
218C           6513   ;        main.c:1186: SendATCommand("AT+RFC002\r\n");
218C 901A50    6514            mov     dptr,#__str_17
218F 75F080    6515            mov     b,#0x80
2192 120000    6516            lcall   _SendATCommand
2195           6517   ;        main.c:1187: SendATCommand("AT+POWE\r\n");
2195 901A90    6518            mov     dptr,#__str_18
2198 75F080    6519            mov     b,#0x80
219B 120000    6520            lcall   _SendATCommand
219E           6521   ;        main.c:1188: SendATCommand("AT+CLSS\r\n");
219E 901AD0    6522            mov     dptr,#__str_19
21A1 75F080    6523            mov     b,#0x80
21A4 120000    6524            lcall   _SendATCommand
21A7           6525   ;        main.c:1189: SendATCommand("AT+DVIDEF11\r\n");  
21A7 901B10    6526            mov     dptr,#__str_20
21AA 75F080    6527            mov     b,#0x80
21AD 120000    6528            lcall   _SendATCommand
21B0           6529   ;        main.c:1192: L_bridge_1 = 0; 
21B0 C2A1      6530            clr     _P2_1
21B2           6531   ;        main.c:1193: L_bridge_2 = 0; 
21B2 C2A2      6532            clr     _P2_2
21B4           6533   ;        main.c:1194: R_bridge_1 = 0; 
21B4 C2A4      6534            clr     _P2_4
21B6           6535   ;        main.c:1195: R_bridge_2 = 0; 
21B6 C2A3      6536            clr     _P2_3
21B8           6537   ;        main.c:1197: while(1)
21B8           6538   L041016?:
21B8           6539   ;        main.c:1201: if(pick_char=='1'){
21B8 7431      6540            mov     a,#0x31
21BA B5B090    6541            cjne    a,_main_pick_char_1_237,L041002?
21BD           6542   ;        main.c:1202: servo_pick();
21BD 120000    6543            lcall   _servo_pick
21C0           6544   ;        main.c:1203: waitms(1000);
21C0 9003E8    6545            mov     dptr,#0x03E8
21C3 120000    6546            lcall   _waitms
21C6           6547   ;        main.c:1204: pick_char = '0';
21C6 75B030    6548            mov     _main_pick_char_1_237,#0x30
21C9           6549   L041002?:
21C9           6550   ;        main.c:1207: if(auto_mode){
21C9 90D1B0    6551            mov     dptr,#_main_auto_mode_1_237
21CC E0        6552            movx    a,@dptr
21CD FA        6553            mov     r2,a
21CE A3        6554            inc     dptr
21CF E0        6555            movx    a,@dptr
21D0 FB        6556            mov     r3,a
21D1 4A        6557            orl     a,r2
21D2 6000      6558            jz      L041004?
21D4           6559   ;        main.c:1208: Auto_mode_slave();
21D4 120000    6560            lcall   _Auto_mode_slave
21D7           6561   ;        main.c:1209: auto_mode = 0;
21D7 90D1B0    6562            mov     dptr,#_main_auto_mode_1_237
21DA E4        6563            clr     a
21DB F0        6564            movx    @dptr,a
21DC A3        6565            inc     dptr
21DD F0        6566            movx    @dptr,a
21DE           6567   L041004?:
21DE           6568   ;        main.c:1211: curr_angle = Read_angle();
21DE 120000    6569            lcall   _Read_angle
21E1 AA82      6570            mov     r2,dpl
21E3 AB83      6571            mov     r3,dph
21E5 ACF0      6572            mov     r4,b
21E7 FD        6573            mov     r5,a
21E8 904BF0    6574            mov     dptr,#_curr_angle
21EB EA        6575            mov     a,r2
21EC F0        6576            movx    @dptr,a
21ED A3        6577            inc     dptr
21EE EB        6578            mov     a,r3
21EF F0        6579            movx    @dptr,a
21F0 A3        6580            inc     dptr
21F1 EC        6581            mov     a,r4
21F2 F0        6582            movx    @dptr,a
21F3 A3        6583            inc     dptr
21F4 ED        6584            mov     a,r5
21F5 F0        6585            movx    @dptr,a
21F6           6586   ;        main.c:1212: if(RXU1()) // Something has arrived
21F6 120000    6587            lcall   _RXU1
21F9 5000      6588            jnc     L041016?
21FB           6589   ;        main.c:1214: c=getchar1();
21FB 120000    6590            lcall   _getchar1
21FE AA82      6591            mov     r2,dpl
2200           6592   ;        main.c:1215: if(c=='!') // Master is sending message
2200 BA2110    6593            cjne    r2,#0x21,L041031?
2203 8000      6594            sjmp    L041032?
2205           6595   L041031?:
2205 020000    6596            ljmp    L041011?
2208           6597   L041032?:
2208           6598   ;        main.c:1217: getstr1(buff, sizeof(buff)-1);
2208 755013    6599            mov     _getstr1_PARM_2,#0x13
220B 9053C0    6600            mov     dptr,#_buff
220E 75F040    6601            mov     b,#0x40
2211 120000    6602            lcall   _getstr1
2214           6603   ;        main.c:1218: if(strlen(buff)==11)
2214 9053C0    6604            mov     dptr,#_buff
2217 75F040    6605            mov     b,#0x40
221A 120000    6606            lcall   _strlen
221D AB82      6607            mov     r3,dpl
221F AC83      6608            mov     r4,dph
2221 BB0BD0    6609            cjne    r3,#0x0B,L041033?
2224 BC00D0    6610            cjne    r4,#0x00,L041033?
2227 8000      6611            sjmp    L041034?
2229           6612   L041033?:
2229 020000    6613            ljmp    L041006?
222C           6614   L041034?:
222C           6615   ;        main.c:1220: sscanf(buff, "%03d,%03d,%c,%01d", &vx, &vy, &pick_char, &auto_mode);
222C 74B0      6616            mov     a,#_main_auto_mode_1_237
222E C0E0      6617            push    acc
2230 74D1      6618            mov     a,#(_main_auto_mode_1_237 >> 8)
2232 C0E0      6619            push    acc
2234 E4        6620            clr     a
2235 C0E0      6621            push    acc
2237 74B0      6622            mov     a,#_main_pick_char_1_237
2239 C0E0      6623            push    acc
223B 74C9      6624            mov     a,#(_main_pick_char_1_237 >> 8)
223D C0E0      6625            push    acc
223F 7440      6626            mov     a,#0x40
2241 C0E0      6627            push    acc
2243 7460      6628            mov     a,#_main_vy_1_237
2245 C0E0      6629            push    acc
2247 74D1      6630            mov     a,#(_main_vy_1_237 >> 8)
2249 C0E0      6631            push    acc
224B E4        6632            clr     a
224C C0E0      6633            push    acc
224E 7420      6634            mov     a,#_main_vx_1_237
2250 C0E0      6635            push    acc
2252 74D1      6636            mov     a,#(_main_vx_1_237 >> 8)
2254 C0E0      6637            push    acc
2256 E4        6638            clr     a
2257 C0E0      6639            push    acc
2259 7490      6640            mov     a,#__str_21
225B C0E0      6641            push    acc
225D 741D      6642            mov     a,#(__str_21 >> 8)
225F C0E0      6643            push    acc
2261 7480      6644            mov     a,#0x80
2263 C0E0      6645            push    acc
2265 74C0      6646            mov     a,#_buff
2267 C0E0      6647            push    acc
2269 7453      6648            mov     a,#(_buff >> 8)
226B C0E0      6649            push    acc
226D 7440      6650            mov     a,#0x40
226F C0E0      6651            push    acc
2271 120000    6652            lcall   _sscanf
2274 E581      6653            mov     a,sp
2276 24EE      6654            add     a,#0xee
2278 F581      6655            mov     sp,a
227A           6656   ;        main.c:1221: printf("Joystick Received: Vx = %d, Vy = %d, Order = %c, Auto = %d\r\n", vx, vy, pick_char, auto_mode);
227A E5B0      6657            mov     a,_main_pick_char_1_237
227C FB        6658            mov     r3,a
227D 33        6659            rlc     a
227E 95E0      6660            subb    a,acc
2280 FC        6661            mov     r4,a
2281 90D1B0    6662            mov     dptr,#_main_auto_mode_1_237
2284 E0        6663            movx    a,@dptr
2285 C0E0      6664            push    acc
2287 A3        6665            inc     dptr
2288 E0        6666            movx    a,@dptr
2289 C0E0      6667            push    acc
228B C003      6668            push    ar3
228D C004      6669            push    ar4
228F 90D160    6670            mov     dptr,#_main_vy_1_237
2292 E0        6671            movx    a,@dptr
2293 C0E0      6672            push    acc
2295 A3        6673            inc     dptr
2296 E0        6674            movx    a,@dptr
2297 C0E0      6675            push    acc
2299 90D120    6676            mov     dptr,#_main_vx_1_237
229C E0        6677            movx    a,@dptr
229D C0E0      6678            push    acc
229F A3        6679            inc     dptr
22A0 E0        6680            movx    a,@dptr
22A1 C0E0      6681            push    acc
22A3 74D0      6682            mov     a,#__str_22
22A5 C0E0      6683            push    acc
22A7 741D      6684            mov     a,#(__str_22 >> 8)
22A9 C0E0      6685            push    acc
22AB 7480      6686            mov     a,#0x80
22AD C0E0      6687            push    acc
22AF 120000    6688            lcall   _printf
22B2 E581      6689            mov     a,sp
22B4 24F5      6690            add     a,#0xf5
22B6 F581      6691            mov     sp,a
22B8           6692   ;        main.c:1222: Joystick_Control(&vx, &vy);
22B8 751060    6693            mov     _Joystick_Control_PARM_2,#_main_vy_1_237
22BB 7511D1    6694            mov     (_Joystick_Control_PARM_2 + 1),#(_main_vy_1_237 >> 8)
22BE 751200    6695            mov     (_Joystick_Control_PARM_2 + 2),#0x00
22C1 90D120    6696            mov     dptr,#_main_vx_1_237
22C4 75F000    6697            mov     b,#0x00
22C7 120000    6698            lcall   _Joystick_Control
22CA 020000    6699            ljmp    L041016?
22CD           6700   L041006?:
22CD           6701   ;        main.c:1225: printf("*** BAD MESSAGE ***: %s\r\n", buff);
22CD 74C0      6702            mov     a,#_buff
22CF C0E0      6703            push    acc
22D1 7453      6704            mov     a,#(_buff >> 8)
22D3 C0E0      6705            push    acc
22D5 7440      6706            mov     a,#0x40
22D7 C0E0      6707            push    acc
22D9 7410      6708            mov     a,#__str_23
22DB C0E0      6709            push    acc
22DD 741E      6710            mov     a,#(__str_23 >> 8)
22DF C0E0      6711            push    acc
22E1 7480      6712            mov     a,#0x80
22E3 C0E0      6713            push    acc
22E5 120000    6714            lcall   _printf
22E8 E581      6715            mov     a,sp
22EA 24FA      6716            add     a,#0xfa
22EC F581      6717            mov     sp,a
22EE 020000    6718            ljmp    L041016?
22F1           6719   L041011?:
22F1           6720   ;        main.c:1228: else if(c=='@') // Master wants slave data
22F1 BA4050    6721            cjne    r2,#0x40,L041035?
22F4 8000      6722            sjmp    L041036?
22F6           6723   L041035?:
22F6 020000    6724            ljmp    L041016?
22F9           6725   L041036?:
22F9           6726   ;        main.c:1230: sprintf(buff, "0,00,%04ld,%05d,%4.1f\n", freq100, weight, curr_angle);
22F9 904BF0    6727            mov     dptr,#_curr_angle
22FC E0        6728            movx    a,@dptr
22FD C0E0      6729            push    acc
22FF A3        6730            inc     dptr
2300 E0        6731            movx    a,@dptr
2301 C0E0      6732            push    acc
2303 A3        6733            inc     dptr
2304 E0        6734            movx    a,@dptr
2305 C0E0      6735            push    acc
2307 A3        6736            inc     dptr
2308 E0        6737            movx    a,@dptr
2309 C0E0      6738            push    acc
230B 904B70    6739            mov     dptr,#_weight
230E E0        6740            movx    a,@dptr
230F C0E0      6741            push    acc
2311 A3        6742            inc     dptr
2312 E0        6743            movx    a,@dptr
2313 C0E0      6744            push    acc
2315 905380    6745            mov     dptr,#_freq100
2318 E0        6746            movx    a,@dptr
2319 C0E0      6747            push    acc
231B A3        6748            inc     dptr
231C E0        6749            movx    a,@dptr
231D C0E0      6750            push    acc
231F A3        6751            inc     dptr
2320 E0        6752            movx    a,@dptr
2321 C0E0      6753            push    acc
2323 A3        6754            inc     dptr
2324 E0        6755            movx    a,@dptr
2325 C0E0      6756            push    acc
2327 74D0      6757            mov     a,#__str_24
2329 C0E0      6758            push    acc
232B 741E      6759            mov     a,#(__str_24 >> 8)
232D C0E0      6760            push    acc
232F 7480      6761            mov     a,#0x80
2331 C0E0      6762            push    acc
2333 74C0      6763            mov     a,#_buff
2335 C0E0      6764            push    acc
2337 7453      6765            mov     a,#(_buff >> 8)
2339 C0E0      6766            push    acc
233B 7440      6767            mov     a,#0x40
233D C0E0      6768            push    acc
233F 120000    6769            lcall   _sprintf
2342 E581      6770            mov     a,sp
2344 24F0      6771            add     a,#0xf0
2346 F581      6772            mov     sp,a
2348           6773   ;        main.c:1231: printf("%s\r\n",buff);
2348 74C0      6774            mov     a,#_buff
234A C0E0      6775            push    acc
234C 7453      6776            mov     a,#(_buff >> 8)
234E C0E0      6777            push    acc
2350 7440      6778            mov     a,#0x40
2352 C0E0      6779            push    acc
2354 7410      6780            mov     a,#__str_25
2356 C0E0      6781            push    acc
2358 741F      6782            mov     a,#(__str_25 >> 8)
235A C0E0      6783            push    acc
235C 7480      6784            mov     a,#0x80
235E C0E0      6785            push    acc
2360 120000    6786            lcall   _printf
2363 E581      6787            mov     a,sp
2365 24FA      6788            add     a,#0xfa
2367 F581      6789            mov     sp,a
2369           6790   ;        main.c:1232: waitms(10); // The radio seems to need this delay...
2369 90000A    6791            mov     dptr,#0x000A
236C 120000    6792            lcall   _waitms
236F           6793   ;        main.c:1233: sendstr1(buff);
236F 9053C0    6794            mov     dptr,#_buff
2372 75F040    6795            mov     b,#0x40
2375 120000    6796            lcall   _sendstr1
2378 020000    6797            ljmp    L041016?
237B           6798            rseg R_CSEG
237B           6799   
0000           6800            rseg R_XINIT
0000           6801   __xinit__pwm_counter:
0000 0000      6802            db 0x00,0x00    ; 0
0002           6803   __xinit__servo_counter:
0002 0000      6804            db 0x00,0x00    ; 0
0004           6805   __xinit__pwm_left:
0004 00        6806            db 0x00         ; 0
0005           6807   __xinit__pwm_right:
0005 00        6808            db 0x00         ; 0
0006           6809   __xinit__L_motor_dir:
0006 01        6810            db 0x01         ; 1
0007           6811   __xinit__R_motor_dir:
0007 01        6812            db 0x01         ; 1
0008           6813   __xinit__servo_base:
0008 01        6814            db 0x01         ; 1
0009           6815   __xinit__servo_arm:
0009 01        6816            db 0x01         ; 1
000A           6817   __xinit__vx_thres:
000A A100      6818            db 0xA1,0x00    ;  161
000C           6819   __xinit__vy_thres:
000C A600      6820            db 0xA6,0x00    ;  166
000E           6821   __xinit__vx:
000E 0000      6822            db 0x00,0x00    ;  0
0010           6823   __xinit__vy:
0010 0000      6824            db 0x00,0x00    ;  0
0012           6825   __xinit__fre_mea_count:
0012 0000      6826            db 0x00,0x00    ; 0
0014           6827   __xinit__weight_mea_count:
0014 0000      6828            db 0x00,0x00    ; 0
0016           6829   __xinit__seed:
0016 3930      6830            db 0x39,0x30    ; 12345
0018           6831   __xinit__pwm_corr:
0018 3333733F  6832            db 0x33,0x33,0x73,0x3F  ;  9.500000e-001
001C           6833   __xinit__curr_angle:
001C 00000000  6834            db 0x00,0x00,0x00,0x00  ;  0.000000e+000
0020           6835   __xinit__mea_yes:
0020 01        6836            db 0x01         ;  1
0021           6837   __xinit__weight:
0021 0000      6838            db 0x00,0x00    ; 0
0023           6839   
0000           6840            rseg R_CONST
0000           6841   __str_0:
0000 4572726F  6842            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
>>>>>>> 8abda3f8b56aa3564268914109dfaa54e2ba2927
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
<<<<<<< HEAD
0035 0D        7569            db 0x0D
0036 0A        7570            db 0x0A
0037 00        7571            db 0x00
0038           7572   __str_1:
0038 50726573  7573            db 'Press restart to check again!'
=======
0035 0D        6843            db 0x0D
0036 0A        6844            db 0x0A
0037 00        6845            db 0x00
0038           6846   __str_1:
0038 50726573  6847            db 'Press restart to check again!'
>>>>>>> 8abda3f8b56aa3564268914109dfaa54e2ba2927
     73207265
     73746172
     7420746F
     20636865
     636B2061
     6761696E
     21
<<<<<<< HEAD
0055 0D        7574            db 0x0D
0056 00        7575            db 0x00
0057           7576   __str_2:
0057 444F4E45  7577            db 'DONE! Chip ID = 0x%02X'
=======
0055 0D        6848            db 0x0D
0056 00        6849            db 0x00
0057           6850   __str_2:
0057 444F4E45  6851            db 'DONE! Chip ID = 0x%02X'
>>>>>>> 8abda3f8b56aa3564268914109dfaa54e2ba2927
     21204368
     69702049
     44203D20
     30782530
     3258
<<<<<<< HEAD
006D 0D        7578            db 0x0D
006E 0A        7579            db 0x0A
006F 00        7580            db 0x00
0070           7581   __str_3:
0070 424D4D31  7582            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
=======
006D 0D        6852            db 0x0D
006E 0A        6853            db 0x0A
006F 00        6854            db 0x00
0070           6855   __str_3:
0070 424D4D31  6856            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
>>>>>>> 8abda3f8b56aa3564268914109dfaa54e2ba2927
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
<<<<<<< HEAD
00A0 0D        7583            db 0x0D
00A1 0A        7584            db 0x0A
00A2 00        7585            db 0x00
00A3           7586   __str_4:
00A3 436F6D6D  7587            db 'Command: %s'
     616E643A
     202573
00AE 00        7588            db 0x00
00AF           7589   __str_5:
00AF 52657370  7590            db 'Response: %s'
     6F6E7365
     3A202573
00BB 0D        7591            db 0x0D
00BC 0A        7592            db 0x0A
00BD 00        7593            db 0x00
00BE           7594   __str_6:
00BE 41542B44  7595            db 'AT+DVID0000'
     56494430
     303030
00C9 0D        7596            db 0x0D
00CA 0A        7597            db 0x0A
00CB 00        7598            db 0x00
00CC           7599   __str_7:
00CC 6D617374  7600            db 'master_messgae_auto_mode: %s'
=======
00A0 0D        6857            db 0x0D
00A1 0A        6858            db 0x0A
00A2 00        6859            db 0x00
00A3           6860   __str_4:
00A3 436F6D6D  6861            db 'Command: %s'
     616E643A
     202573
00AE 00        6862            db 0x00
00AF           6863   __str_5:
00AF 52657370  6864            db 'Response: %s'
     6F6E7365
     3A202573
00BB 0D        6865            db 0x0D
00BC 0A        6866            db 0x0A
00BD 00        6867            db 0x00
00BE           6868   __str_6:
00BE 41542B44  6869            db 'AT+DVID0000'
     56494430
     303030
00C9 0D        6870            db 0x0D
00CA 0A        6871            db 0x0A
00CB 00        6872            db 0x00
00CC           6873   __str_7:
00CC 6D617374  6874            db 'master_messgae_auto_mode: %s'
>>>>>>> 8abda3f8b56aa3564268914109dfaa54e2ba2927
     65725F6D
     65737367
     61655F61
     75746F5F
     6D6F6465
     3A202573
<<<<<<< HEAD
00E8 0D        7601            db 0x0D
00E9 0A        7602            db 0x0A
00EA 00        7603            db 0x00
00EB           7604   __str_8:
00EB 25303364  7605            db '%03d,%03d,%01d,%01d'
=======
00E8 0D        6875            db 0x0D
00E9 0A        6876            db 0x0A
00EA 00        6877            db 0x00
00EB           6878   __str_8:
00EB 25303364  6879            db '%03d,%03d,%01d,%01d'
>>>>>>> 8abda3f8b56aa3564268914109dfaa54e2ba2927
     2C253033
     642C2530
     31642C25
     303164
<<<<<<< HEAD
00FE 00        7606            db 0x00
00FF           7607   __str_9:
00FF 25303164  7608            db '%01d,%02d,%ld,%05d,%03d'
=======
00FE 00        6880            db 0x00
00FF           6881   __str_9:
00FF 25303164  6882            db '%01d,%02d,%ld,%05d,%4.1f'
>>>>>>> 8abda3f8b56aa3564268914109dfaa54e2ba2927
     2C253032
     642C256C
     642C2530
     35642C25
<<<<<<< HEAD
     303364
0116 0A        7609            db 0x0A
0117 00        7610            db 0x00
0118           7611   __str_10:
0118 663A2530  7612            db 'f:%04ld, d1:%d, d2:%d, bound_dectect: %d'
=======
     342E3166
0117 0A        6883            db 0x0A
0118 00        6884            db 0x00
0119           6885   __str_10:
0119 663A2530  6886            db 'f:%04ld, d1:%d, d2:%d, bound_dectect: %d'
>>>>>>> 8abda3f8b56aa3564268914109dfaa54e2ba2927
     346C642C
     2064313A
     25642C20
     64323A25
     642C2062
     6F756E64
     5F646563
     74656374
     3A202564
<<<<<<< HEAD
0140 0D        7613            db 0x0D
0141 0A        7614            db 0x0A
0142 00        7615            db 0x00
0143           7616   __str_11:
0143 0D        7617            db 0x0D
0144 0A        7618            db 0x0A
0145 45464D38  7619            db 'EFM8LB12 JDY-40 Slave Test.'
=======
0141 0D        6887            db 0x0D
0142 0A        6888            db 0x0A
0143 00        6889            db 0x00
0144           6890   __str_11:
0144 4175746F  6891            db 'Auto mode finished!'
     206D6F64
     65206669
     6E697368
     656421
0157 0D        6892            db 0x0D
0158 0A        6893            db 0x0A
0159 00        6894            db 0x00
015A           6895   __str_12:
015A 0D        6896            db 0x0D
015B 0A        6897            db 0x0A
015C 45464D38  6898            db 'EFM8LB12 JDY-40 Slave Test.'
>>>>>>> 8abda3f8b56aa3564268914109dfaa54e2ba2927
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
<<<<<<< HEAD
0160 0D        7620            db 0x0D
0161 0A        7621            db 0x0A
0162 00        7622            db 0x00
0163           7623   __str_12:
0163 41542B56  7624            db 'AT+VER'
     4552
0169 0D        7625            db 0x0D
016A 0A        7626            db 0x0A
016B 00        7627            db 0x00
016C           7628   __str_13:
016C 41542B42  7629            db 'AT+BAUD'
     415544
0173 0D        7630            db 0x0D
0174 0A        7631            db 0x0A
0175 00        7632            db 0x00
0176           7633   __str_14:
0176 41542B52  7634            db 'AT+RFID'
     464944
017D 0D        7635            db 0x0D
017E 0A        7636            db 0x0A
017F 00        7637            db 0x00
0180           7638   __str_15:
0180 41542B44  7639            db 'AT+DVID'
     564944
0187 0D        7640            db 0x0D
0188 0A        7641            db 0x0A
0189 00        7642            db 0x00
018A           7643   __str_16:
018A 41542B52  7644            db 'AT+RFC002'
     46433030
     32
0193 0D        7645            db 0x0D
0194 0A        7646            db 0x0A
0195 00        7647            db 0x00
0196           7648   __str_17:
0196 41542B50  7649            db 'AT+POWE'
     4F5745
019D 0D        7650            db 0x0D
019E 0A        7651            db 0x0A
019F 00        7652            db 0x00
01A0           7653   __str_18:
01A0 41542B43  7654            db 'AT+CLSS'
     4C5353
01A7 0D        7655            db 0x0D
01A8 0A        7656            db 0x0A
01A9 00        7657            db 0x00
01AA           7658   __str_19:
01AA 41542B44  7659            db 'AT+DVIDEF11'
     56494445
     463131
01B5 0D        7660            db 0x0D
01B6 0A        7661            db 0x0A
01B7 00        7662            db 0x00
01B8           7663   __str_20:
01B8 25303364  7664            db '%03d,%03d,%c,%01d'
=======
0177 0D        6899            db 0x0D
0178 0A        6900            db 0x0A
0179 00        6901            db 0x00
017A           6902   __str_13:
017A 41542B56  6903            db 'AT+VER'
     4552
0180 0D        6904            db 0x0D
0181 0A        6905            db 0x0A
0182 00        6906            db 0x00
0183           6907   __str_14:
0183 41542B42  6908            db 'AT+BAUD'
     415544
018A 0D        6909            db 0x0D
018B 0A        6910            db 0x0A
018C 00        6911            db 0x00
018D           6912   __str_15:
018D 41542B52  6913            db 'AT+RFID'
     464944
0194 0D        6914            db 0x0D
0195 0A        6915            db 0x0A
0196 00        6916            db 0x00
0197           6917   __str_16:
0197 41542B44  6918            db 'AT+DVID'
     564944
019E 0D        6919            db 0x0D
019F 0A        6920            db 0x0A
01A0 00        6921            db 0x00
01A1           6922   __str_17:
01A1 41542B52  6923            db 'AT+RFC002'
     46433030
     32
01AA 0D        6924            db 0x0D
01AB 0A        6925            db 0x0A
01AC 00        6926            db 0x00
01AD           6927   __str_18:
01AD 41542B50  6928            db 'AT+POWE'
     4F5745
01B4 0D        6929            db 0x0D
01B5 0A        6930            db 0x0A
01B6 00        6931            db 0x00
01B7           6932   __str_19:
01B7 41542B43  6933            db 'AT+CLSS'
     4C5353
01BE 0D        6934            db 0x0D
01BF 0A        6935            db 0x0A
01C0 00        6936            db 0x00
01C1           6937   __str_20:
01C1 41542B44  6938            db 'AT+DVIDEF11'
     56494445
     463131
01CC 0D        6939            db 0x0D
01CD 0A        6940            db 0x0A
01CE 00        6941            db 0x00
01CF           6942   __str_21:
01CF 25303364  6943            db '%03d,%03d,%c,%01d'
>>>>>>> 8abda3f8b56aa3564268914109dfaa54e2ba2927
     2C253033
     642C2563
     2C253031
     64
<<<<<<< HEAD
01C9 00        7665            db 0x00
01CA           7666   __str_21:
01CA 4A6F7973  7667            db 'Joystick Received: Vx = %d, Vy = %d, Order = %c, Auto = %d'
=======
01E0 00        6944            db 0x00
01E1           6945   __str_22:
01E1 4A6F7973  6946            db 'Joystick Received: Vx = %d, Vy = %d, Order = %c, Auto = %d'
>>>>>>> 8abda3f8b56aa3564268914109dfaa54e2ba2927
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25642C20
     5679203D
     2025642C
     204F7264
     6572203D
     2025632C
     20417574
     6F203D20
     2564
<<<<<<< HEAD
0204 0D        7668            db 0x0D
0205 0A        7669            db 0x0A
0206 00        7670            db 0x00
0207           7671   __str_22:
0207 2A2A2A20  7672            db '*** BAD MESSAGE ***: %s'
=======
021B 0D        6947            db 0x0D
021C 0A        6948            db 0x0A
021D 00        6949            db 0x00
021E           6950   __str_23:
021E 2A2A2A20  6951            db '*** BAD MESSAGE ***: %s'
>>>>>>> 8abda3f8b56aa3564268914109dfaa54e2ba2927
     42414420
     4D455353
     41474520
     2A2A2A3A
     202573
<<<<<<< HEAD
021E 0D        7673            db 0x0D
021F 0A        7674            db 0x0A
0220 00        7675            db 0x00
0221           7676   __str_23:
0221 302C3030  7677            db '0,00,%04ld,%05d,%03d'
     2C253034
     6C642C25
     3035642C
     25303364
0235 0A        7678            db 0x0A
0236 00        7679            db 0x00
0237           7680   __str_24:
0237 2573      7681            db '%s'
0239 0D        7682            db 0x0D
023A 0A        7683            db 0x0A
023B 00        7684            db 0x00
023C           7685   
0096           7686            CSEG
0096           7687   
0096           7688   end
=======
0235 0D        6952            db 0x0D
0236 0A        6953            db 0x0A
0237 00        6954            db 0x00
0238           6955   __str_24:
0238 302C3030  6956            db '0,00,%04ld,%05d,%4.1f'
     2C253034
     6C642C25
     3035642C
     25342E31
     66
024D 0A        6957            db 0x0A
024E 00        6958            db 0x00
024F           6959   __str_25:
024F 2573      6960            db '%s'
0251 0D        6961            db 0x0D
0252 0A        6962            db 0x0A
0253 00        6963            db 0x00
0254           6964   
0096           6965            CSEG
0096           6966   
0096           6967   end
>>>>>>> 8abda3f8b56aa3564268914109dfaa54e2ba2927
