0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Mar 26 13:26:18 2025
0000              5   ;--------------------------------------------------------
                  5   $name main
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _check_bound_PARM_2
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _Auto_mode_slave
0000             30            public _Init_all
0000             31            public _check_bound
0000             32            public _servo_pick
0000             33            public _Timer5_ISR
0000             34            public _ADC_at_Pin
0000             35            public _InitPinADC
0000             36            public _InitADC
0000             37            public _Set_Pin_Input
0000             38            public _Set_Pin_Output
0000             39            public _ReceptionOff
0000             40            public _SendATCommand
0000             41            public _waitms_or_RI1
0000             42            public _RXU1
0000             43            public _getstr1
0000             44            public _getchar1_with_timeout
0000             45            public _getchar1
0000             46            public _sendstr1
0000             47            public _putchar1
0000             48            public _UART1_Init
0000             49            public _waitms
0000             50            public _Timer3us
0000             51            public __c51_external_startup
0000             52            public _buff
0000             53            public _getstr1_PARM_2
0000             54            public _d2
0000             55            public _d1
0000             56            public _fre_mea_count
0000             57            public _freq100
0000             58            public _vy
0000             59            public _vx
0000             60            public _vy_thres
0000             61            public _vx_thres
0000             62            public _servo_arm
0000             63            public _servo_base
0000             64            public _R_motor_dir
0000             65            public _L_motor_dir
0000             66            public _pwm_right
0000             67            public _pwm_left
0000             68            public _servo_counter
0000             69            public _pwm_counter
0000             70   ;--------------------------------------------------------
0000             71   ; Special Function Registers
0000             72   ;--------------------------------------------------------
0000             73   _ACC            DATA 0xe0
0000             74   _ADC0ASAH       DATA 0xb6
0000             75   _ADC0ASAL       DATA 0xb5
0000             76   _ADC0ASCF       DATA 0xa1
0000             77   _ADC0ASCT       DATA 0xc7
0000             78   _ADC0CF0        DATA 0xbc
0000             79   _ADC0CF1        DATA 0xb9
0000             80   _ADC0CF2        DATA 0xdf
0000             81   _ADC0CN0        DATA 0xe8
0000             82   _ADC0CN1        DATA 0xb2
0000             83   _ADC0CN2        DATA 0xb3
0000             84   _ADC0GTH        DATA 0xc4
0000             85   _ADC0GTL        DATA 0xc3
0000             86   _ADC0H          DATA 0xbe
0000             87   _ADC0L          DATA 0xbd
0000             88   _ADC0LTH        DATA 0xc6
0000             89   _ADC0LTL        DATA 0xc5
0000             90   _ADC0MX         DATA 0xbb
0000             91   _B              DATA 0xf0
0000             92   _CKCON0         DATA 0x8e
0000             93   _CKCON1         DATA 0xa6
0000             94   _CLEN0          DATA 0xc6
0000             95   _CLIE0          DATA 0xc7
0000             96   _CLIF0          DATA 0xe8
0000             97   _CLKSEL         DATA 0xa9
0000             98   _CLOUT0         DATA 0xd1
0000             99   _CLU0CF         DATA 0xb1
0000            100   _CLU0FN         DATA 0xaf
0000            101   _CLU0MX         DATA 0x84
0000            102   _CLU1CF         DATA 0xb3
0000            103   _CLU1FN         DATA 0xb2
0000            104   _CLU1MX         DATA 0x85
0000            105   _CLU2CF         DATA 0xb6
0000            106   _CLU2FN         DATA 0xb5
0000            107   _CLU2MX         DATA 0x91
0000            108   _CLU3CF         DATA 0xbf
0000            109   _CLU3FN         DATA 0xbe
0000            110   _CLU3MX         DATA 0xae
0000            111   _CMP0CN0        DATA 0x9b
0000            112   _CMP0CN1        DATA 0x99
0000            113   _CMP0MD         DATA 0x9d
0000            114   _CMP0MX         DATA 0x9f
0000            115   _CMP1CN0        DATA 0xbf
0000            116   _CMP1CN1        DATA 0xac
0000            117   _CMP1MD         DATA 0xab
0000            118   _CMP1MX         DATA 0xaa
0000            119   _CRC0CN0        DATA 0xce
0000            120   _CRC0CN1        DATA 0x86
0000            121   _CRC0CNT        DATA 0xd3
0000            122   _CRC0DAT        DATA 0xcb
0000            123   _CRC0FLIP       DATA 0xcf
0000            124   _CRC0IN         DATA 0xca
0000            125   _CRC0ST         DATA 0xd2
0000            126   _DAC0CF0        DATA 0x91
0000            127   _DAC0CF1        DATA 0x92
0000            128   _DAC0H          DATA 0x85
0000            129   _DAC0L          DATA 0x84
0000            130   _DAC1CF0        DATA 0x93
0000            131   _DAC1CF1        DATA 0x94
0000            132   _DAC1H          DATA 0x8a
0000            133   _DAC1L          DATA 0x89
0000            134   _DAC2CF0        DATA 0x95
0000            135   _DAC2CF1        DATA 0x96
0000            136   _DAC2H          DATA 0x8c
0000            137   _DAC2L          DATA 0x8b
0000            138   _DAC3CF0        DATA 0x9a
0000            139   _DAC3CF1        DATA 0x9c
0000            140   _DAC3H          DATA 0x8e
0000            141   _DAC3L          DATA 0x8d
0000            142   _DACGCF0        DATA 0x88
0000            143   _DACGCF1        DATA 0x98
0000            144   _DACGCF2        DATA 0xa2
0000            145   _DERIVID        DATA 0xad
0000            146   _DEVICEID       DATA 0xb5
0000            147   _DPH            DATA 0x83
0000            148   _DPL            DATA 0x82
0000            149   _EIE1           DATA 0xe6
0000            150   _EIE2           DATA 0xf3
0000            151   _EIP1           DATA 0xbb
0000            152   _EIP1H          DATA 0xee
0000            153   _EIP2           DATA 0xed
0000            154   _EIP2H          DATA 0xf6
0000            155   _EMI0CN         DATA 0xe7
0000            156   _FLKEY          DATA 0xb7
0000            157   _HFO0CAL        DATA 0xc7
0000            158   _HFO1CAL        DATA 0xd6
0000            159   _HFOCN          DATA 0xef
0000            160   _I2C0ADM        DATA 0xff
0000            161   _I2C0CN0        DATA 0xba
0000            162   _I2C0DIN        DATA 0xbc
0000            163   _I2C0DOUT       DATA 0xbb
0000            164   _I2C0FCN0       DATA 0xad
0000            165   _I2C0FCN1       DATA 0xab
0000            166   _I2C0FCT        DATA 0xf5
0000            167   _I2C0SLAD       DATA 0xbd
0000            168   _I2C0STAT       DATA 0xb9
0000            169   _IE             DATA 0xa8
0000            170   _IP             DATA 0xb8
0000            171   _IPH            DATA 0xf2
0000            172   _IT01CF         DATA 0xe4
0000            173   _LFO0CN         DATA 0xb1
0000            174   _P0             DATA 0x80
0000            175   _P0MASK         DATA 0xfe
0000            176   _P0MAT          DATA 0xfd
0000            177   _P0MDIN         DATA 0xf1
0000            178   _P0MDOUT        DATA 0xa4
0000            179   _P0SKIP         DATA 0xd4
0000            180   _P1             DATA 0x90
0000            181   _P1MASK         DATA 0xee
0000            182   _P1MAT          DATA 0xed
0000            183   _P1MDIN         DATA 0xf2
0000            184   _P1MDOUT        DATA 0xa5
0000            185   _P1SKIP         DATA 0xd5
0000            186   _P2             DATA 0xa0
0000            187   _P2MASK         DATA 0xfc
0000            188   _P2MAT          DATA 0xfb
0000            189   _P2MDIN         DATA 0xf3
0000            190   _P2MDOUT        DATA 0xa6
0000            191   _P2SKIP         DATA 0xcc
0000            192   _P3             DATA 0xb0
0000            193   _P3MDIN         DATA 0xf4
0000            194   _P3MDOUT        DATA 0x9c
0000            195   _PCA0CENT       DATA 0x9e
0000            196   _PCA0CLR        DATA 0x9c
0000            197   _PCA0CN0        DATA 0xd8
0000            198   _PCA0CPH0       DATA 0xfc
0000            199   _PCA0CPH1       DATA 0xea
0000            200   _PCA0CPH2       DATA 0xec
0000            201   _PCA0CPH3       DATA 0xf5
0000            202   _PCA0CPH4       DATA 0x85
0000            203   _PCA0CPH5       DATA 0xde
0000            204   _PCA0CPL0       DATA 0xfb
0000            205   _PCA0CPL1       DATA 0xe9
0000            206   _PCA0CPL2       DATA 0xeb
0000            207   _PCA0CPL3       DATA 0xf4
0000            208   _PCA0CPL4       DATA 0x84
0000            209   _PCA0CPL5       DATA 0xdd
0000            210   _PCA0CPM0       DATA 0xda
0000            211   _PCA0CPM1       DATA 0xdb
0000            212   _PCA0CPM2       DATA 0xdc
0000            213   _PCA0CPM3       DATA 0xae
0000            214   _PCA0CPM4       DATA 0xaf
0000            215   _PCA0CPM5       DATA 0xcc
0000            216   _PCA0H          DATA 0xfa
0000            217   _PCA0L          DATA 0xf9
0000            218   _PCA0MD         DATA 0xd9
0000            219   _PCA0POL        DATA 0x96
0000            220   _PCA0PWM        DATA 0xf7
0000            221   _PCON0          DATA 0x87
0000            222   _PCON1          DATA 0xcd
0000            223   _PFE0CN         DATA 0xc1
0000            224   _PRTDRV         DATA 0xf6
0000            225   _PSCTL          DATA 0x8f
0000            226   _PSTAT0         DATA 0xaa
0000            227   _PSW            DATA 0xd0
0000            228   _REF0CN         DATA 0xd1
0000            229   _REG0CN         DATA 0xc9
0000            230   _REVID          DATA 0xb6
0000            231   _RSTSRC         DATA 0xef
0000            232   _SBCON1         DATA 0x94
0000            233   _SBRLH1         DATA 0x96
0000            234   _SBRLL1         DATA 0x95
0000            235   _SBUF           DATA 0x99
0000            236   _SBUF0          DATA 0x99
0000            237   _SBUF1          DATA 0x92
0000            238   _SCON           DATA 0x98
0000            239   _SCON0          DATA 0x98
0000            240   _SCON1          DATA 0xc8
0000            241   _SFRPAGE        DATA 0xa7
0000            242   _SFRPGCN        DATA 0xbc
0000            243   _SFRSTACK       DATA 0xd7
0000            244   _SMB0ADM        DATA 0xd6
0000            245   _SMB0ADR        DATA 0xd7
0000            246   _SMB0CF         DATA 0xc1
0000            247   _SMB0CN0        DATA 0xc0
0000            248   _SMB0DAT        DATA 0xc2
0000            249   _SMB0FCN0       DATA 0xc3
0000            250   _SMB0FCN1       DATA 0xc4
0000            251   _SMB0FCT        DATA 0xef
0000            252   _SMB0RXLN       DATA 0xc5
0000            253   _SMB0TC         DATA 0xac
0000            254   _SMOD1          DATA 0x93
0000            255   _SP             DATA 0x81
0000            256   _SPI0CFG        DATA 0xa1
0000            257   _SPI0CKR        DATA 0xa2
0000            258   _SPI0CN0        DATA 0xf8
0000            259   _SPI0DAT        DATA 0xa3
0000            260   _SPI0FCN0       DATA 0x9a
0000            261   _SPI0FCN1       DATA 0x9b
0000            262   _SPI0FCT        DATA 0xf7
0000            263   _SPI0PCF        DATA 0xdf
0000            264   _TCON           DATA 0x88
0000            265   _TH0            DATA 0x8c
0000            266   _TH1            DATA 0x8d
0000            267   _TL0            DATA 0x8a
0000            268   _TL1            DATA 0x8b
0000            269   _TMOD           DATA 0x89
0000            270   _TMR2CN0        DATA 0xc8
0000            271   _TMR2CN1        DATA 0xfd
0000            272   _TMR2H          DATA 0xcf
0000            273   _TMR2L          DATA 0xce
0000            274   _TMR2RLH        DATA 0xcb
0000            275   _TMR2RLL        DATA 0xca
0000            276   _TMR3CN0        DATA 0x91
0000            277   _TMR3CN1        DATA 0xfe
0000            278   _TMR3H          DATA 0x95
0000            279   _TMR3L          DATA 0x94
0000            280   _TMR3RLH        DATA 0x93
0000            281   _TMR3RLL        DATA 0x92
0000            282   _TMR4CN0        DATA 0x98
0000            283   _TMR4CN1        DATA 0xff
0000            284   _TMR4H          DATA 0xa5
0000            285   _TMR4L          DATA 0xa4
0000            286   _TMR4RLH        DATA 0xa3
0000            287   _TMR4RLL        DATA 0xa2
0000            288   _TMR5CN0        DATA 0xc0
0000            289   _TMR5CN1        DATA 0xf1
0000            290   _TMR5H          DATA 0xd5
0000            291   _TMR5L          DATA 0xd4
0000            292   _TMR5RLH        DATA 0xd3
0000            293   _TMR5RLL        DATA 0xd2
0000            294   _UART0PCF       DATA 0xd9
0000            295   _UART1FCN0      DATA 0x9d
0000            296   _UART1FCN1      DATA 0xd8
0000            297   _UART1FCT       DATA 0xfa
0000            298   _UART1LIN       DATA 0x9e
0000            299   _UART1PCF       DATA 0xda
0000            300   _VDM0CN         DATA 0xff
0000            301   _WDTCN          DATA 0x97
0000            302   _XBR0           DATA 0xe1
0000            303   _XBR1           DATA 0xe2
0000            304   _XBR2           DATA 0xe3
0000            305   _XOSC0CN        DATA 0x86
0000            306   _DPTR           DATA 0x8382
0000            307   _TMR2RL         DATA 0xcbca
0000            308   _TMR3RL         DATA 0x9392
0000            309   _TMR4RL         DATA 0xa3a2
0000            310   _TMR5RL         DATA 0xd3d2
0000            311   _TMR0           DATA 0x8c8a
0000            312   _TMR1           DATA 0x8d8b
0000            313   _TMR2           DATA 0xcfce
0000            314   _TMR3           DATA 0x9594
0000            315   _TMR4           DATA 0xa5a4
0000            316   _TMR5           DATA 0xd5d4
0000            317   _SBRL1          DATA 0x9695
0000            318   _PCA0           DATA 0xfaf9
0000            319   _PCA0CP0        DATA 0xfcfb
0000            320   _PCA0CP1        DATA 0xeae9
0000            321   _PCA0CP2        DATA 0xeceb
0000            322   _PCA0CP3        DATA 0xf5f4
0000            323   _PCA0CP4        DATA 0x8584
0000            324   _PCA0CP5        DATA 0xdedd
0000            325   _ADC0ASA        DATA 0xb6b5
0000            326   _ADC0GT         DATA 0xc4c3
0000            327   _ADC0           DATA 0xbebd
0000            328   _ADC0LT         DATA 0xc6c5
0000            329   _DAC0           DATA 0x8584
0000            330   _DAC1           DATA 0x8a89
0000            331   _DAC2           DATA 0x8c8b
0000            332   _DAC3           DATA 0x8e8d
0000            333   ;--------------------------------------------------------
0000            334   ; special function bits
0000            335   ;--------------------------------------------------------
0000            336   _ACC_0          BIT 0xe0
0000            337   _ACC_1          BIT 0xe1
0000            338   _ACC_2          BIT 0xe2
0000            339   _ACC_3          BIT 0xe3
0000            340   _ACC_4          BIT 0xe4
0000            341   _ACC_5          BIT 0xe5
0000            342   _ACC_6          BIT 0xe6
0000            343   _ACC_7          BIT 0xe7
0000            344   _TEMPE          BIT 0xe8
0000            345   _ADGN0          BIT 0xe9
0000            346   _ADGN1          BIT 0xea
0000            347   _ADWINT         BIT 0xeb
0000            348   _ADBUSY         BIT 0xec
0000            349   _ADINT          BIT 0xed
0000            350   _IPOEN          BIT 0xee
0000            351   _ADEN           BIT 0xef
0000            352   _B_0            BIT 0xf0
0000            353   _B_1            BIT 0xf1
0000            354   _B_2            BIT 0xf2
0000            355   _B_3            BIT 0xf3
0000            356   _B_4            BIT 0xf4
0000            357   _B_5            BIT 0xf5
0000            358   _B_6            BIT 0xf6
0000            359   _B_7            BIT 0xf7
0000            360   _C0FIF          BIT 0xe8
0000            361   _C0RIF          BIT 0xe9
0000            362   _C1FIF          BIT 0xea
0000            363   _C1RIF          BIT 0xeb
0000            364   _C2FIF          BIT 0xec
0000            365   _C2RIF          BIT 0xed
0000            366   _C3FIF          BIT 0xee
0000            367   _C3RIF          BIT 0xef
0000            368   _D1SRC0         BIT 0x88
0000            369   _D1SRC1         BIT 0x89
0000            370   _D1AMEN         BIT 0x8a
0000            371   _D01REFSL       BIT 0x8b
0000            372   _D3SRC0         BIT 0x8c
0000            373   _D3SRC1         BIT 0x8d
0000            374   _D3AMEN         BIT 0x8e
0000            375   _D23REFSL       BIT 0x8f
0000            376   _D0UDIS         BIT 0x98
0000            377   _D1UDIS         BIT 0x99
0000            378   _D2UDIS         BIT 0x9a
0000            379   _D3UDIS         BIT 0x9b
0000            380   _EX0            BIT 0xa8
0000            381   _ET0            BIT 0xa9
0000            382   _EX1            BIT 0xaa
0000            383   _ET1            BIT 0xab
0000            384   _ES0            BIT 0xac
0000            385   _ET2            BIT 0xad
0000            386   _ESPI0          BIT 0xae
0000            387   _EA             BIT 0xaf
0000            388   _PX0            BIT 0xb8
0000            389   _PT0            BIT 0xb9
0000            390   _PX1            BIT 0xba
0000            391   _PT1            BIT 0xbb
0000            392   _PS0            BIT 0xbc
0000            393   _PT2            BIT 0xbd
0000            394   _PSPI0          BIT 0xbe
0000            395   _P0_0           BIT 0x80
0000            396   _P0_1           BIT 0x81
0000            397   _P0_2           BIT 0x82
0000            398   _P0_3           BIT 0x83
0000            399   _P0_4           BIT 0x84
0000            400   _P0_5           BIT 0x85
0000            401   _P0_6           BIT 0x86
0000            402   _P0_7           BIT 0x87
0000            403   _P1_0           BIT 0x90
0000            404   _P1_1           BIT 0x91
0000            405   _P1_2           BIT 0x92
0000            406   _P1_3           BIT 0x93
0000            407   _P1_4           BIT 0x94
0000            408   _P1_5           BIT 0x95
0000            409   _P1_6           BIT 0x96
0000            410   _P1_7           BIT 0x97
0000            411   _P2_0           BIT 0xa0
0000            412   _P2_1           BIT 0xa1
0000            413   _P2_2           BIT 0xa2
0000            414   _P2_3           BIT 0xa3
0000            415   _P2_4           BIT 0xa4
0000            416   _P2_5           BIT 0xa5
0000            417   _P2_6           BIT 0xa6
0000            418   _P3_0           BIT 0xb0
0000            419   _P3_1           BIT 0xb1
0000            420   _P3_2           BIT 0xb2
0000            421   _P3_3           BIT 0xb3
0000            422   _P3_4           BIT 0xb4
0000            423   _P3_7           BIT 0xb7
0000            424   _CCF0           BIT 0xd8
0000            425   _CCF1           BIT 0xd9
0000            426   _CCF2           BIT 0xda
0000            427   _CCF3           BIT 0xdb
0000            428   _CCF4           BIT 0xdc
0000            429   _CCF5           BIT 0xdd
0000            430   _CR             BIT 0xde
0000            431   _CF             BIT 0xdf
0000            432   _PARITY         BIT 0xd0
0000            433   _F1             BIT 0xd1
0000            434   _OV             BIT 0xd2
0000            435   _RS0            BIT 0xd3
0000            436   _RS1            BIT 0xd4
0000            437   _F0             BIT 0xd5
0000            438   _AC             BIT 0xd6
0000            439   _CY             BIT 0xd7
0000            440   _RI             BIT 0x98
0000            441   _TI             BIT 0x99
0000            442   _RB8            BIT 0x9a
0000            443   _TB8            BIT 0x9b
0000            444   _REN            BIT 0x9c
0000            445   _CE             BIT 0x9d
0000            446   _SMODE          BIT 0x9e
0000            447   _RI1            BIT 0xc8
0000            448   _TI1            BIT 0xc9
0000            449   _RBX1           BIT 0xca
0000            450   _TBX1           BIT 0xcb
0000            451   _REN1           BIT 0xcc
0000            452   _PERR1          BIT 0xcd
0000            453   _OVR1           BIT 0xce
0000            454   _SI             BIT 0xc0
0000            455   _ACK            BIT 0xc1
0000            456   _ARBLOST        BIT 0xc2
0000            457   _ACKRQ          BIT 0xc3
0000            458   _STO            BIT 0xc4
0000            459   _STA            BIT 0xc5
0000            460   _TXMODE         BIT 0xc6
0000            461   _MASTER         BIT 0xc7
0000            462   _SPIEN          BIT 0xf8
0000            463   _TXNF           BIT 0xf9
0000            464   _NSSMD0         BIT 0xfa
0000            465   _NSSMD1         BIT 0xfb
0000            466   _RXOVRN         BIT 0xfc
0000            467   _MODF           BIT 0xfd
0000            468   _WCOL           BIT 0xfe
0000            469   _SPIF           BIT 0xff
0000            470   _IT0            BIT 0x88
0000            471   _IE0            BIT 0x89
0000            472   _IT1            BIT 0x8a
0000            473   _IE1            BIT 0x8b
0000            474   _TR0            BIT 0x8c
0000            475   _TF0            BIT 0x8d
0000            476   _TR1            BIT 0x8e
0000            477   _TF1            BIT 0x8f
0000            478   _T2XCLK0        BIT 0xc8
0000            479   _T2XCLK1        BIT 0xc9
0000            480   _TR2            BIT 0xca
0000            481   _T2SPLIT        BIT 0xcb
0000            482   _TF2CEN         BIT 0xcc
0000            483   _TF2LEN         BIT 0xcd
0000            484   _TF2L           BIT 0xce
0000            485   _TF2H           BIT 0xcf
0000            486   _T4XCLK0        BIT 0x98
0000            487   _T4XCLK1        BIT 0x99
0000            488   _TR4            BIT 0x9a
0000            489   _T4SPLIT        BIT 0x9b
0000            490   _TF4CEN         BIT 0x9c
0000            491   _TF4LEN         BIT 0x9d
0000            492   _TF4L           BIT 0x9e
0000            493   _TF4H           BIT 0x9f
0000            494   _T5XCLK0        BIT 0xc0
0000            495   _T5XCLK1        BIT 0xc1
0000            496   _TR5            BIT 0xc2
0000            497   _T5SPLIT        BIT 0xc3
0000            498   _TF5CEN         BIT 0xc4
0000            499   _TF5LEN         BIT 0xc5
0000            500   _TF5L           BIT 0xc6
0000            501   _TF5H           BIT 0xc7
0000            502   _RIE            BIT 0xd8
0000            503   _RXTO0          BIT 0xd9
0000            504   _RXTO1          BIT 0xda
0000            505   _RFRQ           BIT 0xdb
0000            506   _TIE            BIT 0xdc
0000            507   _TXHOLD         BIT 0xdd
0000            508   _TXNF1          BIT 0xde
0000            509   _TFRQ           BIT 0xdf
0000            510   ;--------------------------------------------------------
0000            511   ; overlayable register banks
0000            512   ;--------------------------------------------------------
0000            513            rbank0 segment data overlay
0000            514   ;--------------------------------------------------------
0000            515   ; overlayable bit register bank
0000            516   ;--------------------------------------------------------
0000            517            rseg BIT_BANK
0000            518   bits:
0000            519            ds 1
0001            520            b0 equ  bits.0 
0001            521            b1 equ  bits.1 
0001            522            b2 equ  bits.2 
0001            523            b3 equ  bits.3 
0001            524            b4 equ  bits.4 
0001            525            b5 equ  bits.5 
0001            526            b6 equ  bits.6 
0001            527            b7 equ  bits.7 
0001            528   ;--------------------------------------------------------
0001            529   ; internal ram data
0001            530   ;--------------------------------------------------------
0000            531            rseg R_DSEG
0000            532   _pwm_counter:
0000            533            ds 2
0002            534   _servo_counter:
0002            535            ds 2
0004            536   _pwm_left:
0004            537            ds 1
0005            538   _pwm_right:
0005            539            ds 1
0006            540   _L_motor_dir:
0006            541            ds 1
0007            542   _R_motor_dir:
0007            543            ds 1
0008            544   _servo_base:
0008            545            ds 1
0009            546   _servo_arm:
0009            547            ds 1
000A            548   _vx_thres:
000A            549            ds 2
000C            550   _vy_thres:
000C            551            ds 2
000E            552   _vx:
000E            553            ds 2
0010            554   _vy:
0010            555            ds 2
0012            556   _freq100:
0012            557            ds 4
0016            558   _fre_mea_count:
0016            559            ds 2
0018            560   _d1:
0018            561            ds 2
001A            562   _d2:
001A            563            ds 2
001C            564   _getstr1_PARM_2:
001C            565            ds 1
001D            566   _main_vx_error_1_141:
001D            567            ds 2
001F            568   _main_vy_error_1_141:
001F            569            ds 2
0021            570   _main_vx_err_1_141:
0021            571            ds 2
0023            572   _main_vy_err_1_141:
0023            573            ds 2
0025            574   _main_vx_1_141:
0025            575            ds 2
0027            576   _main_vy_1_141:
0027            577            ds 2
0029            578   _main_pick_1_141:
0029            579            ds 2
002B            580   _main_auto_mode_1_141:
002B            581            ds 2
002D            582   ;--------------------------------------------------------
002D            583   ; overlayable items in internal ram 
002D            584   ;--------------------------------------------------------
0000            585            rseg    R_OSEG
0000            586            rseg    R_OSEG
0000            587            rseg    R_OSEG
0000            588            rseg    R_OSEG
0000            589            rseg    R_OSEG
0000            590            rseg    R_OSEG
0000            591   _InitPinADC_PARM_2:
0000            592            ds 1
0001            593            rseg    R_OSEG
0001            594            rseg    R_OSEG
0001            595   _check_bound_PARM_2:
0001            596            ds 2
0003            597   ;--------------------------------------------------------
0003            598   ; indirectly addressable internal ram data
0003            599   ;--------------------------------------------------------
0000            600            rseg R_ISEG
0000            601   _buff:
0000            602            ds 20
0014            603   ;--------------------------------------------------------
0014            604   ; absolute internal ram data
0014            605   ;--------------------------------------------------------
0000            606            DSEG
0000            607   ;--------------------------------------------------------
0000            608   ; bit data
0000            609   ;--------------------------------------------------------
0000            610            rseg R_BSEG
0000            611   ;--------------------------------------------------------
0000            612   ; paged external ram data
0000            613   ;--------------------------------------------------------
0000            614            rseg R_PSEG
0000            615   ;--------------------------------------------------------
0000            616   ; external ram data
0000            617   ;--------------------------------------------------------
0000            618            rseg R_XSEG
0000            619   ;--------------------------------------------------------
0000            620   ; absolute external ram data
0000            621   ;--------------------------------------------------------
0000            622            XSEG
0000            623   ;--------------------------------------------------------
0000            624   ; external initialized ram data
0000            625   ;--------------------------------------------------------
0000            626            rseg R_IXSEG
0000            627            rseg R_HOME
0000            628            rseg R_GSINIT
0000            629            rseg R_CSEG
0000            630   ;--------------------------------------------------------
0000            631   ; Reset entry point and interrupt vectors
0000            632   ;--------------------------------------------------------
0000            633            CSEG at 0x0000
0000 020000     634            ljmp    _crt0
0093            635            CSEG at 0x0093
0093 020000     636            ljmp    _Timer5_ISR
0096            637   ;--------------------------------------------------------
0096            638   ; global & static initialisations
0096            639   ;--------------------------------------------------------
0000            640            rseg R_HOME
0000            641            rseg R_GSINIT
0000            642            rseg R_GSINIT
0000            643   ;--------------------------------------------------------
0000            644   ; data variables initialization
0000            645   ;--------------------------------------------------------
0000            646            rseg R_DINIT
0000            647   ;        main.c:51: unsigned int pwm_counter = 0; 
0000 E4         648            clr     a
0001 F598       649            mov     _pwm_counter,a
0003 F599       650            mov     (_pwm_counter + 1),a
0005            651   ;        main.c:52: unsigned int servo_counter = 0; 
0005 E4         652            clr     a
0006 F558       653            mov     _servo_counter,a
0008 F559       654            mov     (_servo_counter + 1),a
000A            655   ;        main.c:53: unsigned char pwm_left = 0, pwm_right = 0; 
000A 751800     656            mov     _pwm_left,#0x00
000D            657   ;        main.c:53: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
000D 75D800     658            mov     _pwm_right,#0x00
0010            659   ;        main.c:54: unsigned char servo_base = 1, servo_arm = 1; 
0010 759801     660            mov     _L_motor_dir,#0x01
0013            661   ;        main.c:54: unsigned char L_motor_dir = 1, R_motor_dir = 1; // 1 - Forward, 0 - Backward
0013 755801     662            mov     _R_motor_dir,#0x01
0016            663   ;        main.c:55: unsigned char servo_base = 1, servo_arm = 1; 
0016 751801     664            mov     _servo_base,#0x01
0019            665   ;        main.c:55: int vx_thres = 161, vy_thres = 166; 
0019 75D801     666            mov     _servo_arm,#0x01
001C            667   ;        main.c:56: int vx = 0, vy = 0; 
001C 7598A1     668            mov     _vx_thres,#0xA1
001F E4         669            clr     a
0020 F599       670            mov     (_vx_thres + 1),a
0022            671   ;        main.c:56: int vx_thres = 161, vy_thres = 166; 
0022 7558A6     672            mov     _vy_thres,#0xA6
0025 E4         673            clr     a
0026 F559       674            mov     (_vy_thres + 1),a
0028            675   ;        main.c:57: int vx = 0, vy = 0; 
0028 E4         676            clr     a
0029 F518       677            mov     _vx,a
002B F519       678            mov     (_vx + 1),a
002D            679   ;        main.c:57: long freq100;
002D E4         680            clr     a
002E F5D8       681            mov     _vy,a
0030 F5D9       682            mov     (_vy + 1),a
0032            683   ;        main.c:59: unsigned int fre_mea_count = 0;
0032 E4         684            clr     a
0033 F558       685            mov     _fre_mea_count,a
0035 F559       686            mov     (_fre_mea_count + 1),a
0037            687            ; The linker places a 'ret' at the end of segment R_DINIT.
0037            688   ;--------------------------------------------------------
0037            689   ; code
0037            690   ;--------------------------------------------------------
0000            691            rseg R_CSEG
0000            692   ;------------------------------------------------------------
0000            693   ;Allocation info for local variables in function '_c51_external_startup'
0000            694   ;------------------------------------------------------------
0000            695   ;------------------------------------------------------------
0000            696   ;        main.c:63: char _c51_external_startup (void)
0000            697   ;        -----------------------------------------
0000            698   ;         function _c51_external_startup
0000            699   ;        -----------------------------------------
0000            700   __c51_external_startup:
0000            701            using   0
0000            702   ;        main.c:66: SFRPAGE = 0x00;
0000 75A700     703            mov     _SFRPAGE,#0x00
0003            704   ;        main.c:67: WDTCN = 0xDE; //First key
0003 7597DE     705            mov     _WDTCN,#0xDE
0006            706   ;        main.c:68: WDTCN = 0xAD; //Second key
0006 7597AD     707            mov     _WDTCN,#0xAD
0009            708   ;        main.c:70: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     709            mov     _VDM0CN,#0x80
000C            710   ;        main.c:71: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     711            mov     _RSTSRC,#0x06
000F            712   ;        main.c:78: SFRPAGE = 0x10;
000F 75A710     713            mov     _SFRPAGE,#0x10
0012            714   ;        main.c:79: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     715            mov     _PFE0CN,#0x20
0015            716   ;        main.c:80: SFRPAGE = 0x00;
0015 75A700     717            mov     _SFRPAGE,#0x00
0018            718   ;        main.c:101: CLKSEL = 0x00;
0018 75A900     719            mov     _CLKSEL,#0x00
001B            720   ;        main.c:102: CLKSEL = 0x00;
001B 75A900     721            mov     _CLKSEL,#0x00
001E            722   ;        main.c:103: while ((CLKSEL & 0x80) == 0);
001E            723   L002001?:
001E E5A9       724            mov     a,_CLKSEL
0020 30E738     725            jnb     acc.7,L002001?
0023            726   ;        main.c:104: CLKSEL = 0x03;
0023 75A903     727            mov     _CLKSEL,#0x03
0026            728   ;        main.c:105: CLKSEL = 0x03;
0026 75A903     729            mov     _CLKSEL,#0x03
0029            730   ;        main.c:106: while ((CLKSEL & 0x80) == 0);
0029            731   L002004?:
0029 E5A9       732            mov     a,_CLKSEL
002B 30E7B8     733            jnb     acc.7,L002004?
002E            734   ;        main.c:111: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     735            orl     _P0MDOUT,#0x11
0031            736   ;        main.c:112: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     737            orl     _P2MDOUT,#0x01
0034            738   ;        main.c:113: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     739            mov     _XBR0,#0x01
0037            740   ;        main.c:114: XBR1     = 0X00;
0037 75E200     741            mov     _XBR1,#0x00
003A            742   ;        main.c:115: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     743            mov     _XBR2,#0x41
003D            744   ;        main.c:121: SCON0 = 0x10;
003D 759810     745            mov     _SCON0,#0x10
0040            746   ;        main.c:122: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     747            mov     _TH1,#0xE6
0043            748   ;        main.c:123: TL1 = TH1;      // Init Timer1
0043 858D8B     749            mov     _TL1,_TH1
0046            750   ;        main.c:124: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     751            anl     _TMOD,#0x0F
0049            752   ;        main.c:125: TMOD |=  0x20;                       
0049 438920     753            orl     _TMOD,#0x20
004C            754   ;        main.c:126: TR1 = 1; // START Timer1
004C D28E       755            setb    _TR1
004E            756   ;        main.c:127: TI = 1;  // Indicate TX0 ready
004E D299       757            setb    _TI
0050            758   ;        main.c:129: P2_0=1; // 'set' pin to 1 is normal operation mode.
0050 D2A0       759            setb    _P2_0
0052            760   ;        main.c:132: SFRPAGE=0x10;
0052 75A710     761            mov     _SFRPAGE,#0x10
0055            762   ;        main.c:133: TMR5CN0=0x00;
0055 75C000     763            mov     _TMR5CN0,#0x00
0058            764   ;        main.c:134: TMR5=0xffff;   // Set to reload immediately
0058 75D4FF     765            mov     _TMR5,#0xFF
005B 75D5FF     766            mov     (_TMR5 >> 8),#0xFF
005E            767   ;        main.c:135: EIE2|=0b_0000_1000; // Enable Timer5 interrupts
005E 43F308     768            orl     _EIE2,#0x08
0061            769   ;        main.c:136: TR5=1;         // Start Timer5 (TMR5CN0 is bit addressable)
0061 D2C2       770            setb    _TR5
0063            771   ;        main.c:139: EA=1;  // Enable global interrupts
0063 D2AF       772            setb    _EA
0065            773   ;        main.c:140: SFRPAGE=0x00;
0065 75A700     774            mov     _SFRPAGE,#0x00
0068            775   ;        main.c:142: return 0;
0068 758200     776            mov     dpl,#0x00
006B 22         777            ret
006C            778   ;------------------------------------------------------------
006C            779   ;Allocation info for local variables in function 'Timer3us'
006C            780   ;------------------------------------------------------------
006C            781   ;us                        Allocated to registers r2 
006C            782   ;i                         Allocated to registers r3 
006C            783   ;------------------------------------------------------------
006C            784   ;        main.c:146: void Timer3us(unsigned char us)
006C            785   ;        -----------------------------------------
006C            786   ;         function Timer3us
006C            787   ;        -----------------------------------------
006C            788   _Timer3us:
006C AA82       789            mov     r2,dpl
006E            790   ;        main.c:151: CKCON0|=0b_0100_0000;
006E 438E40     791            orl     _CKCON0,#0x40
0071            792   ;        main.c:153: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0071 7592B8     793            mov     _TMR3RL,#0xB8
0074 7593FF     794            mov     (_TMR3RL >> 8),#0xFF
0077            795   ;        main.c:154: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0077 859294     796            mov     _TMR3,_TMR3RL
007A 859395     797            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007D            798   ;        main.c:156: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007D 759104     799            mov     _TMR3CN0,#0x04
0080            800   ;        main.c:157: for (i = 0; i < us; i++)       // Count <us> overflows
0080 7B00       801            mov     r3,#0x00
0082            802   L003004?:
0082 C3         803            clr     c
0083 EB         804            mov     a,r3
0084 9A         805            subb    a,r2
0085 5000       806            jnc     L003007?
0087            807   ;        main.c:159: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0087            808   L003001?:
0087 E591       809            mov     a,_TMR3CN0
0089 30E7B8     810            jnb     acc.7,L003001?
008C            811   ;        main.c:160: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008C 53917F     812            anl     _TMR3CN0,#0x7F
008F            813   ;        main.c:157: for (i = 0; i < us; i++)       // Count <us> overflows
008F 0B         814            inc     r3
0090 8000       815            sjmp    L003004?
0092            816   L003007?:
0092            817   ;        main.c:162: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0092 759100     818            mov     _TMR3CN0,#0x00
0095 22         819            ret
0096            820   ;------------------------------------------------------------
0096            821   ;Allocation info for local variables in function 'waitms'
0096            822   ;------------------------------------------------------------
0096            823   ;ms                        Allocated to registers r2 r3 
0096            824   ;j                         Allocated to registers r4 r5 
0096            825   ;k                         Allocated to registers r6 
0096            826   ;------------------------------------------------------------
0096            827   ;        main.c:165: void waitms (unsigned int ms)
0096            828   ;        -----------------------------------------
0096            829   ;         function waitms
0096            830   ;        -----------------------------------------
0096            831   _waitms:
0096 AA82       832            mov     r2,dpl
0098 AB83       833            mov     r3,dph
009A            834   ;        main.c:169: for(j=0; j<ms; j++)
009A 7C00       835            mov     r4,#0x00
009C 7D00       836            mov     r5,#0x00
009E            837   L004005?:
009E C3         838            clr     c
009F EC         839            mov     a,r4
00A0 9A         840            subb    a,r2
00A1 ED         841            mov     a,r5
00A2 9B         842            subb    a,r3
00A3 5000       843            jnc     L004009?
00A5            844   ;        main.c:170: for (k=0; k<4; k++) Timer3us(250);
00A5 7E00       845            mov     r6,#0x00
00A7            846   L004001?:
00A7 BE04F8     847            cjne    r6,#0x04,L004018?
00AA            848   L004018?:
00AA 5000       849            jnc     L004007?
00AC 7582FA     850            mov     dpl,#0xFA
00AF C002       851            push    ar2
00B1 C003       852            push    ar3
00B3 C004       853            push    ar4
00B5 C005       854            push    ar5
00B7 C006       855            push    ar6
00B9 120000     856            lcall   _Timer3us
00BC D006       857            pop     ar6
00BE D005       858            pop     ar5
00C0 D004       859            pop     ar4
00C2 D003       860            pop     ar3
00C4 D002       861            pop     ar2
00C6 0E         862            inc     r6
00C7 8000       863            sjmp    L004001?
00C9            864   L004007?:
00C9            865   ;        main.c:169: for(j=0; j<ms; j++)
00C9 0C         866            inc     r4
00CA BC0038     867            cjne    r4,#0x00,L004005?
00CD 0D         868            inc     r5
00CE 8000       869            sjmp    L004005?
00D0            870   L004009?:
00D0 22         871            ret
00D1            872   ;------------------------------------------------------------
00D1            873   ;Allocation info for local variables in function 'UART1_Init'
00D1            874   ;------------------------------------------------------------
00D1            875   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00D1            876   ;------------------------------------------------------------
00D1            877   ;        main.c:173: void UART1_Init (unsigned long baudrate)
00D1            878   ;        -----------------------------------------
00D1            879   ;         function UART1_Init
00D1            880   ;        -----------------------------------------
00D1            881   _UART1_Init:
00D1 AA82       882            mov     r2,dpl
00D3 AB83       883            mov     r3,dph
00D5 ACF0       884            mov     r4,b
00D7 FD         885            mov     r5,a
00D8            886   ;        main.c:175: SFRPAGE = 0x20;
00D8 75A720     887            mov     _SFRPAGE,#0x20
00DB            888   ;        main.c:176: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00DB 75930C     889            mov     _SMOD1,#0x0C
00DE            890   ;        main.c:177: SCON1 = 0x10;
00DE 75C810     891            mov     _SCON1,#0x10
00E1            892   ;        main.c:178: SBCON1 =0x00;   // disable baud rate generator
00E1 759400     893            mov     _SBCON1,#0x00
00E4            894   ;        main.c:179: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00E4 8A00       895            mov     __divulong_PARM_2,r2
00E6 8B01       896            mov     (__divulong_PARM_2 + 1),r3
00E8 8C02       897            mov     (__divulong_PARM_2 + 2),r4
00EA 8D03       898            mov     (__divulong_PARM_2 + 3),r5
00EC 90A200     899            mov     dptr,#0xA200
00EF 75F04A     900            mov     b,#0x4A
00F2 7404       901            mov     a,#0x04
00F4 120000     902            lcall   __divulong
00F7 AA82       903            mov     r2,dpl
00F9 AB83       904            mov     r3,dph
00FB ACF0       905            mov     r4,b
00FD FD         906            mov     r5,a
00FE 750018     907            mov     __divulong_PARM_2,#0x18
0101 E4         908            clr     a
0102 F501       909            mov     (__divulong_PARM_2 + 1),a
0104 F502       910            mov     (__divulong_PARM_2 + 2),a
0106 F503       911            mov     (__divulong_PARM_2 + 3),a
0108 8A82       912            mov     dpl,r2
010A 8B83       913            mov     dph,r3
010C 8CF0       914            mov     b,r4
010E ED         915            mov     a,r5
010F 120000     916            lcall   __divulong
0112 AA82       917            mov     r2,dpl
0114 AB83       918            mov     r3,dph
0116 ACF0       919            mov     r4,b
0118 FD         920            mov     r5,a
0119 E4         921            clr     a
011A C3         922            clr     c
011B 9A         923            subb    a,r2
011C FA         924            mov     r2,a
011D E4         925            clr     a
011E 9B         926            subb    a,r3
011F FB         927            mov     r3,a
0120 7401       928            mov     a,#0x01
0122 9C         929            subb    a,r4
0123 E4         930            clr     a
0124 9D         931            subb    a,r5
0125 8A95       932            mov     _SBRL1,r2
0127 8B96       933            mov     (_SBRL1 >> 8),r3
0129            934   ;        main.c:180: TI1 = 1; // indicate ready for TX
0129 D2C9       935            setb    _TI1
012B            936   ;        main.c:181: SBCON1 |= 0x40;   // enable baud rate generator
012B 439440     937            orl     _SBCON1,#0x40
012E            938   ;        main.c:182: SFRPAGE = 0x00;
012E 75A700     939            mov     _SFRPAGE,#0x00
0131 22         940            ret
0132            941   ;------------------------------------------------------------
0132            942   ;Allocation info for local variables in function 'putchar1'
0132            943   ;------------------------------------------------------------
0132            944   ;c                         Allocated to registers r2 
0132            945   ;------------------------------------------------------------
0132            946   ;        main.c:185: void putchar1 (char c) 
0132            947   ;        -----------------------------------------
0132            948   ;         function putchar1
0132            949   ;        -----------------------------------------
0132            950   _putchar1:
0132 AA82       951            mov     r2,dpl
0134            952   ;        main.c:187: SFRPAGE = 0x20;
0134 75A720     953            mov     _SFRPAGE,#0x20
0137            954   ;        main.c:188: while (!TI1);
0137            955   L006001?:
0137            956   ;        main.c:189: TI1=0;
0137 10C988     957            jbc     _TI1,L006008?
013A 8000       958            sjmp    L006001?
013C            959   L006008?:
013C            960   ;        main.c:190: SBUF1 = c;
013C 8A92       961            mov     _SBUF1,r2
013E            962   ;        main.c:191: SFRPAGE = 0x00;
013E 75A700     963            mov     _SFRPAGE,#0x00
0141 22         964            ret
0142            965   ;------------------------------------------------------------
0142            966   ;Allocation info for local variables in function 'sendstr1'
0142            967   ;------------------------------------------------------------
0142            968   ;s                         Allocated to registers r2 r3 r4 
0142            969   ;------------------------------------------------------------
0142            970   ;        main.c:194: void sendstr1 (char * s)
0142            971   ;        -----------------------------------------
0142            972   ;         function sendstr1
0142            973   ;        -----------------------------------------
0142            974   _sendstr1:
0142 AA82       975            mov     r2,dpl
0144 AB83       976            mov     r3,dph
0146 ACF0       977            mov     r4,b
0148            978   ;        main.c:196: while(*s)
0148            979   L007001?:
0148 8A82       980            mov     dpl,r2
014A 8B83       981            mov     dph,r3
014C 8CF0       982            mov     b,r4
014E 120000     983            lcall   __gptrget
0151 FD         984            mov     r5,a
0152 6000       985            jz      L007004?
0154            986   ;        main.c:198: putchar1(*s);
0154 8D82       987            mov     dpl,r5
0156 C002       988            push    ar2
0158 C003       989            push    ar3
015A C004       990            push    ar4
015C 120000     991            lcall   _putchar1
015F D004       992            pop     ar4
0161 D003       993            pop     ar3
0163 D002       994            pop     ar2
0165            995   ;        main.c:199: s++;        
0165 0A         996            inc     r2
0166 BA00C8     997            cjne    r2,#0x00,L007001?
0169 0B         998            inc     r3
016A 8000       999            sjmp    L007001?
016C           1000   L007004?:
016C 22        1001            ret
016D           1002   ;------------------------------------------------------------
016D           1003   ;Allocation info for local variables in function 'getchar1'
016D           1004   ;------------------------------------------------------------
016D           1005   ;c                         Allocated to registers 
016D           1006   ;------------------------------------------------------------
016D           1007   ;        main.c:203: char getchar1 (void)
016D           1008   ;        -----------------------------------------
016D           1009   ;         function getchar1
016D           1010   ;        -----------------------------------------
016D           1011   _getchar1:
016D           1012   ;        main.c:206: SFRPAGE = 0x20;
016D 75A720    1013            mov     _SFRPAGE,#0x20
0170           1014   ;        main.c:207: while (!RI1);
0170           1015   L008001?:
0170           1016   ;        main.c:208: RI1=0;
0170 10C8C8    1017            jbc     _RI1,L008008?
0173 8000      1018            sjmp    L008001?
0175           1019   L008008?:
0175           1020   ;        main.c:210: SCON1&=0b_0011_1111;
0175 53C83F    1021            anl     _SCON1,#0x3F
0178           1022   ;        main.c:211: c = SBUF1;
0178 859282    1023            mov     dpl,_SBUF1
017B           1024   ;        main.c:212: SFRPAGE = 0x00;
017B 75A700    1025            mov     _SFRPAGE,#0x00
017E           1026   ;        main.c:213: return (c);
017E 22        1027            ret
017F           1028   ;------------------------------------------------------------
017F           1029   ;Allocation info for local variables in function 'getchar1_with_timeout'
017F           1030   ;------------------------------------------------------------
017F           1031   ;c                         Allocated to registers 
017F           1032   ;timeout                   Allocated to registers r2 r3 
017F           1033   ;------------------------------------------------------------
017F           1034   ;        main.c:216: char getchar1_with_timeout (void)
017F           1035   ;        -----------------------------------------
017F           1036   ;         function getchar1_with_timeout
017F           1037   ;        -----------------------------------------
017F           1038   _getchar1_with_timeout:
017F           1039   ;        main.c:220: SFRPAGE = 0x20;
017F 75A720    1040            mov     _SFRPAGE,#0x20
0182           1041   ;        main.c:222: while (!RI1)
0182 7A00      1042            mov     r2,#0x00
0184 7B00      1043            mov     r3,#0x00
0186           1044   L009003?:
0186 20C848    1045            jb      _RI1,L009005?
0189           1046   ;        main.c:224: SFRPAGE = 0x00;
0189 75A700    1047            mov     _SFRPAGE,#0x00
018C           1048   ;        main.c:225: Timer3us(20);
018C 758214    1049            mov     dpl,#0x14
018F C002      1050            push    ar2
0191 C003      1051            push    ar3
0193 120000    1052            lcall   _Timer3us
0196 D003      1053            pop     ar3
0198 D002      1054            pop     ar2
019A           1055   ;        main.c:226: SFRPAGE = 0x20;
019A 75A720    1056            mov     _SFRPAGE,#0x20
019D           1057   ;        main.c:227: timeout++;
019D 0A        1058            inc     r2
019E BA0088    1059            cjne    r2,#0x00,L009012?
01A1 0B        1060            inc     r3
01A2           1061   L009012?:
01A2           1062   ;        main.c:228: if(timeout==25000)
01A2 BAA808    1063            cjne    r2,#0xA8,L009003?
01A5 BB6108    1064            cjne    r3,#0x61,L009003?
01A8           1065   ;        main.c:230: SFRPAGE = 0x00;
01A8 75A700    1066            mov     _SFRPAGE,#0x00
01AB           1067   ;        main.c:231: return ('\n'); // Timeout after half second
01AB 75820A    1068            mov     dpl,#0x0A
01AE 22        1069            ret
01AF           1070   L009005?:
01AF           1071   ;        main.c:234: RI1=0;
01AF C2C8      1072            clr     _RI1
01B1           1073   ;        main.c:236: SCON1&=0b_0011_1111;
01B1 53C83F    1074            anl     _SCON1,#0x3F
01B4           1075   ;        main.c:237: c = SBUF1;
01B4 859282    1076            mov     dpl,_SBUF1
01B7           1077   ;        main.c:238: SFRPAGE = 0x00;
01B7 75A700    1078            mov     _SFRPAGE,#0x00
01BA           1079   ;        main.c:239: return (c);
01BA 22        1080            ret
01BB           1081   ;------------------------------------------------------------
01BB           1082   ;Allocation info for local variables in function 'getstr1'
01BB           1083   ;------------------------------------------------------------
01BB           1084   ;n                         Allocated with name '_getstr1_PARM_2'
01BB           1085   ;s                         Allocated to registers r2 r3 r4 
01BB           1086   ;c                         Allocated to registers r1 
01BB           1087   ;cnt                       Allocated to registers r5 
01BB           1088   ;------------------------------------------------------------
01BB           1089   ;        main.c:242: void getstr1 (char * s, unsigned char n)
01BB           1090   ;        -----------------------------------------
01BB           1091   ;         function getstr1
01BB           1092   ;        -----------------------------------------
01BB           1093   _getstr1:
01BB AA82      1094            mov     r2,dpl
01BD AB83      1095            mov     r3,dph
01BF ACF0      1096            mov     r4,b
01C1           1097   ;        main.c:248: while(1)
01C1 7D00      1098            mov     r5,#0x00
01C3 8A06      1099            mov     ar6,r2
01C5 8B07      1100            mov     ar7,r3
01C7 8C00      1101            mov     ar0,r4
01C9           1102   L010007?:
01C9           1103   ;        main.c:250: c=getchar1_with_timeout();
01C9 C002      1104            push    ar2
01CB C003      1105            push    ar3
01CD C004      1106            push    ar4
01CF C005      1107            push    ar5
01D1 C006      1108            push    ar6
01D3 C007      1109            push    ar7
01D5 C000      1110            push    ar0
01D7 120000    1111            lcall   _getchar1_with_timeout
01DA A982      1112            mov     r1,dpl
01DC D000      1113            pop     ar0
01DE D007      1114            pop     ar7
01E0 D006      1115            pop     ar6
01E2 D005      1116            pop     ar5
01E4 D004      1117            pop     ar4
01E6 D003      1118            pop     ar3
01E8 D002      1119            pop     ar2
01EA           1120   ;        main.c:251: if(c=='\n')
01EA B90A08    1121            cjne    r1,#0x0A,L010002?
01ED           1122   ;        main.c:253: *s=0;
01ED 8A82      1123            mov     dpl,r2
01EF 8B83      1124            mov     dph,r3
01F1 8CF0      1125            mov     b,r4
01F3 E4        1126            clr     a
01F4           1127   ;        main.c:254: return;
01F4 020000    1128            ljmp    __gptrput
01F7           1129   L010002?:
01F7           1130   ;        main.c:257: if (cnt<n)
01F7 C3        1131            clr     c
01F8 ED        1132            mov     a,r5
01F9 9598      1133            subb    a,_getstr1_PARM_2
01FB 5000      1134            jnc     L010004?
01FD           1135   ;        main.c:259: cnt++;
01FD 0D        1136            inc     r5
01FE           1137   ;        main.c:260: *s=c;
01FE 8E82      1138            mov     dpl,r6
0200 8F83      1139            mov     dph,r7
0202 88F0      1140            mov     b,r0
0204 E9        1141            mov     a,r1
0205 120000    1142            lcall   __gptrput
0208 A3        1143            inc     dptr
0209 AE82      1144            mov     r6,dpl
020B AF83      1145            mov     r7,dph
020D           1146   ;        main.c:261: s++;
020D 8E02      1147            mov     ar2,r6
020F 8F03      1148            mov     ar3,r7
0211 8804      1149            mov     ar4,r0
0213 8000      1150            sjmp    L010007?
0215           1151   L010004?:
0215           1152   ;        main.c:265: *s=0;
0215 8A82      1153            mov     dpl,r2
0217 8B83      1154            mov     dph,r3
0219 8CF0      1155            mov     b,r4
021B E4        1156            clr     a
021C           1157   ;        main.c:266: return;
021C 020000    1158            ljmp    __gptrput
021F           1159   ;------------------------------------------------------------
021F           1160   ;Allocation info for local variables in function 'RXU1'
021F           1161   ;------------------------------------------------------------
021F           1162   ;------------------------------------------------------------
021F           1163   ;        main.c:272: bit RXU1 (void)
021F           1164   ;        -----------------------------------------
021F           1165   ;         function RXU1
021F           1166   ;        -----------------------------------------
021F           1167   _RXU1:
021F           1168   ;        main.c:275: SFRPAGE = 0x20;
021F 75A720    1169            mov     _SFRPAGE,#0x20
0222           1170   ;        main.c:276: mybit=RI1;
0222 A2C8      1171            mov     c,_RI1
0224           1172   ;        main.c:277: SFRPAGE = 0x00;
0224 75A700    1173            mov     _SFRPAGE,#0x00
0227           1174   ;        main.c:278: return mybit;
0227 22        1175            ret
0228           1176   ;------------------------------------------------------------
0228           1177   ;Allocation info for local variables in function 'waitms_or_RI1'
0228           1178   ;------------------------------------------------------------
0228           1179   ;ms                        Allocated to registers r2 r3 
0228           1180   ;j                         Allocated to registers r4 r5 
0228           1181   ;k                         Allocated to registers r6 
0228           1182   ;------------------------------------------------------------
0228           1183   ;        main.c:281: void waitms_or_RI1 (unsigned int ms)
0228           1184   ;        -----------------------------------------
0228           1185   ;         function waitms_or_RI1
0228           1186   ;        -----------------------------------------
0228           1187   _waitms_or_RI1:
0228 AA82      1188            mov     r2,dpl
022A AB83      1189            mov     r3,dph
022C           1190   ;        main.c:285: for(j=0; j<ms; j++)
022C 7C00      1191            mov     r4,#0x00
022E 7D00      1192            mov     r5,#0x00
0230           1193   L012007?:
0230 C3        1194            clr     c
0231 EC        1195            mov     a,r4
0232 9A        1196            subb    a,r2
0233 ED        1197            mov     a,r5
0234 9B        1198            subb    a,r3
0235 5000      1199            jnc     L012011?
0237           1200   ;        main.c:287: for (k=0; k<4; k++)
0237 7E00      1201            mov     r6,#0x00
0239           1202   L012003?:
0239 BE0488    1203            cjne    r6,#0x04,L012019?
023C           1204   L012019?:
023C 5000      1205            jnc     L012009?
023E           1206   ;        main.c:289: if(RXU1()) return;
023E C002      1207            push    ar2
0240 C003      1208            push    ar3
0242 C004      1209            push    ar4
0244 C005      1210            push    ar5
0246 C006      1211            push    ar6
0248 120000    1212            lcall   _RXU1
024B E4        1213            clr     a
024C 33        1214            rlc     a
024D D006      1215            pop     ar6
024F D005      1216            pop     ar5
0251 D004      1217            pop     ar4
0253 D003      1218            pop     ar3
0255 D002      1219            pop     ar2
0257 6000      1220            jz      L012002?
0259 22        1221            ret
025A           1222   L012002?:
025A           1223   ;        main.c:290: Timer3us(250);
025A 7582FA    1224            mov     dpl,#0xFA
025D C002      1225            push    ar2
025F C003      1226            push    ar3
0261 C004      1227            push    ar4
0263 C005      1228            push    ar5
0265 C006      1229            push    ar6
0267 120000    1230            lcall   _Timer3us
026A D006      1231            pop     ar6
026C D005      1232            pop     ar5
026E D004      1233            pop     ar4
0270 D003      1234            pop     ar3
0272 D002      1235            pop     ar2
0274           1236   ;        main.c:287: for (k=0; k<4; k++)
0274 0E        1237            inc     r6
0275 8000      1238            sjmp    L012003?
0277           1239   L012009?:
0277           1240   ;        main.c:285: for(j=0; j<ms; j++)
0277 0C        1241            inc     r4
0278 BC00C8    1242            cjne    r4,#0x00,L012007?
027B 0D        1243            inc     r5
027C 8000      1244            sjmp    L012007?
027E           1245   L012011?:
027E 22        1246            ret
027F           1247   ;------------------------------------------------------------
027F           1248   ;Allocation info for local variables in function 'SendATCommand'
027F           1249   ;------------------------------------------------------------
027F           1250   ;s                         Allocated to registers r2 r3 r4 
027F           1251   ;------------------------------------------------------------
027F           1252   ;        main.c:295: void SendATCommand (char * s)
027F           1253   ;        -----------------------------------------
027F           1254   ;         function SendATCommand
027F           1255   ;        -----------------------------------------
027F           1256   _SendATCommand:
027F AA82      1257            mov     r2,dpl
0281 AB83      1258            mov     r3,dph
0283 ACF0      1259            mov     r4,b
0285           1260   ;        main.c:297: printf("Command: %s", s);
0285 C002      1261            push    ar2
0287 C003      1262            push    ar3
0289 C004      1263            push    ar4
028B C002      1264            push    ar2
028D C003      1265            push    ar3
028F C004      1266            push    ar4
0291 7448      1267            mov     a,#__str_0
0293 C0E0      1268            push    acc
0295 74C5      1269            mov     a,#(__str_0 >> 8)
0297 C0E0      1270            push    acc
0299 7480      1271            mov     a,#0x80
029B C0E0      1272            push    acc
029D 120000    1273            lcall   _printf
02A0 E581      1274            mov     a,sp
02A2 24FA      1275            add     a,#0xfa
02A4 F581      1276            mov     sp,a
02A6           1277   ;        main.c:298: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02A6 C2A0      1278            clr     _P2_0
02A8           1279   ;        main.c:299: waitms(5);
02A8 900005    1280            mov     dptr,#0x0005
02AB 120000    1281            lcall   _waitms
02AE D004      1282            pop     ar4
02B0 D003      1283            pop     ar3
02B2 D002      1284            pop     ar2
02B4           1285   ;        main.c:300: sendstr1(s);
02B4 8A82      1286            mov     dpl,r2
02B6 8B83      1287            mov     dph,r3
02B8 8CF0      1288            mov     b,r4
02BA 120000    1289            lcall   _sendstr1
02BD           1290   ;        main.c:301: getstr1(buff, sizeof(buff)-1);
02BD 759813    1291            mov     _getstr1_PARM_2,#0x13
02C0 904558    1292            mov     dptr,#_buff
02C3 75F040    1293            mov     b,#0x40
02C6 120000    1294            lcall   _getstr1
02C9           1295   ;        main.c:302: waitms(10);
02C9 90000A    1296            mov     dptr,#0x000A
02CC 120000    1297            lcall   _waitms
02CF           1298   ;        main.c:303: P2_0=1; // 'set' pin to 1 is normal operation mode.
02CF D2A0      1299            setb    _P2_0
02D1           1300   ;        main.c:304: printf("Response: %s\r\n", buff);
02D1 7458      1301            mov     a,#_buff
02D3 C0E0      1302            push    acc
02D5 7445      1303            mov     a,#(_buff >> 8)
02D7 C0E0      1304            push    acc
02D9 7440      1305            mov     a,#0x40
02DB C0E0      1306            push    acc
02DD 7408      1307            mov     a,#__str_1
02DF C0E0      1308            push    acc
02E1 74C6      1309            mov     a,#(__str_1 >> 8)
02E3 C0E0      1310            push    acc
02E5 7480      1311            mov     a,#0x80
02E7 C0E0      1312            push    acc
02E9 120000    1313            lcall   _printf
02EC E581      1314            mov     a,sp
02EE 24FA      1315            add     a,#0xfa
02F0 F581      1316            mov     sp,a
02F2 22        1317            ret
02F3           1318   ;------------------------------------------------------------
02F3           1319   ;Allocation info for local variables in function 'ReceptionOff'
02F3           1320   ;------------------------------------------------------------
02F3           1321   ;------------------------------------------------------------
02F3           1322   ;        main.c:307: void ReceptionOff (void)
02F3           1323   ;        -----------------------------------------
02F3           1324   ;         function ReceptionOff
02F3           1325   ;        -----------------------------------------
02F3           1326   _ReceptionOff:
02F3           1327   ;        main.c:309: P2_0=0; // 'set' pin to 0 is 'AT' mode.
02F3 C2A0      1328            clr     _P2_0
02F5           1329   ;        main.c:310: waitms(10);
02F5 90000A    1330            mov     dptr,#0x000A
02F8 120000    1331            lcall   _waitms
02FB           1332   ;        main.c:311: sendstr1("AT+DVID0000\r\n"); // Some unused id, so that we get nothing in RXD1.
02FB 90C648    1333            mov     dptr,#__str_2
02FE 75F080    1334            mov     b,#0x80
0301 120000    1335            lcall   _sendstr1
0304           1336   ;        main.c:312: waitms(10);
0304 90000A    1337            mov     dptr,#0x000A
0307 120000    1338            lcall   _waitms
030A           1339   ;        main.c:314: SCON1&=0b_0011_1111;
030A 53C83F    1340            anl     _SCON1,#0x3F
030D           1341   ;        main.c:315: P2_0=1; // 'set' pin to 1 is normal operation mode.
030D D2A0      1342            setb    _P2_0
030F 22        1343            ret
0310           1344   ;------------------------------------------------------------
0310           1345   ;Allocation info for local variables in function 'Set_Pin_Output'
0310           1346   ;------------------------------------------------------------
0310           1347   ;pin                       Allocated to registers r2 
0310           1348   ;mask                      Allocated to registers r3 
0310           1349   ;------------------------------------------------------------
0310           1350   ;        main.c:318: void Set_Pin_Output (unsigned char pin)
0310           1351   ;        -----------------------------------------
0310           1352   ;         function Set_Pin_Output
0310           1353   ;        -----------------------------------------
0310           1354   _Set_Pin_Output:
0310 AA82      1355            mov     r2,dpl
0312           1356   ;        main.c:322: mask=(1<<(pin&0x7));
0312 7407      1357            mov     a,#0x07
0314 5A        1358            anl     a,r2
0315 F5F0      1359            mov     b,a
0317 05F0      1360            inc     b
0319 7401      1361            mov     a,#0x01
031B 8000      1362            sjmp    L015011?
031D           1363   L015009?:
031D 25E0      1364            add     a,acc
031F           1365   L015011?:
031F D5F0C8    1366            djnz    b,L015009?
0322 FB        1367            mov     r3,a
0323           1368   ;        main.c:323: switch(pin/0x10)
0323 EA        1369            mov     a,r2
0324 C4        1370            swap    a
0325 540F      1371            anl     a,#0x0f
0327 FA        1372            mov  r2,a
0328 24FC      1373            add     a,#0xff - 0x03
032A 4000      1374            jc      L015006?
032C EA        1375            mov     a,r2
032D 2A        1376            add     a,r2
032E 2A        1377            add     a,r2
032F 90C748    1378            mov     dptr,#L015013?
0332 73        1379            jmp     @a+dptr
0333           1380   L015013?:
0333 020000    1381            ljmp    L015001?
0336 020000    1382            ljmp    L015002?
0339 020000    1383            ljmp    L015003?
033C 020000    1384            ljmp    L015004?
033F           1385   ;        main.c:325: case 0: P0MDOUT |= mask; break;
033F           1386   L015001?:
033F EB        1387            mov     a,r3
0340 42A4      1388            orl     _P0MDOUT,a
0342           1389   ;        main.c:326: case 1: P1MDOUT |= mask; break;
0342 22        1390            ret
0343           1391   L015002?:
0343 EB        1392            mov     a,r3
0344 42A5      1393            orl     _P1MDOUT,a
0346           1394   ;        main.c:327: case 2: P2MDOUT |= mask; break; 
0346 22        1395            ret
0347           1396   L015003?:
0347 EB        1397            mov     a,r3
0348 42A6      1398            orl     _P2MDOUT,a
034A           1399   ;        main.c:328: case 3: P3MDOUT |= mask; break; 
034A 22        1400            ret
034B           1401   L015004?:
034B EB        1402            mov     a,r3
034C 429C      1403            orl     _P3MDOUT,a
034E           1404   ;        main.c:329: }   
034E           1405   L015006?:
034E 22        1406            ret
034F           1407   ;------------------------------------------------------------
034F           1408   ;Allocation info for local variables in function 'Set_Pin_Input'
034F           1409   ;------------------------------------------------------------
034F           1410   ;mask                      Allocated with name '_Set_Pin_Input_mask_1_101'
034F           1411   ;pin                       Allocated to registers r2 
034F           1412   ;------------------------------------------------------------
034F           1413   ;        main.c:332: void Set_Pin_Input (unsigned char pin)
034F           1414   ;        -----------------------------------------
034F           1415   ;         function Set_Pin_Input
034F           1416   ;        -----------------------------------------
034F           1417   _Set_Pin_Input:
034F AA82      1418            mov     r2,dpl
0351           1419   ;        main.c:336: mask=(1<<(pin&0x7));
0351 7407      1420            mov     a,#0x07
0353 5A        1421            anl     a,r2
0354 F5F0      1422            mov     b,a
0356 05F0      1423            inc     b
0358 7401      1424            mov     a,#0x01
035A 8000      1425            sjmp    L016011?
035C           1426   L016009?:
035C 25E0      1427            add     a,acc
035E           1428   L016011?:
035E D5F0C8    1429            djnz    b,L016009?
0361           1430   ;        main.c:337: mask=~mask;
0361 F4        1431            cpl     a
0362 FB        1432            mov     r3,a
0363           1433   ;        main.c:338: switch(pin/0x10)
0363 EA        1434            mov     a,r2
0364 C4        1435            swap    a
0365 540F      1436            anl     a,#0x0f
0367 FA        1437            mov  r2,a
0368 24FC      1438            add     a,#0xff - 0x03
036A 4000      1439            jc      L016006?
036C EA        1440            mov     a,r2
036D 2A        1441            add     a,r2
036E 2A        1442            add     a,r2
036F 90C948    1443            mov     dptr,#L016013?
0372 73        1444            jmp     @a+dptr
0373           1445   L016013?:
0373 020000    1446            ljmp    L016001?
0376 020000    1447            ljmp    L016002?
0379 020000    1448            ljmp    L016003?
037C 020000    1449            ljmp    L016004?
037F           1450   ;        main.c:340: case 0: P0MDOUT &= mask; break;
037F           1451   L016001?:
037F EB        1452            mov     a,r3
0380 52A4      1453            anl     _P0MDOUT,a
0382           1454   ;        main.c:341: case 1: P1MDOUT &= mask; break;
0382 22        1455            ret
0383           1456   L016002?:
0383 EB        1457            mov     a,r3
0384 52A5      1458            anl     _P1MDOUT,a
0386           1459   ;        main.c:342: case 2: P2MDOUT &= mask; break; 
0386 22        1460            ret
0387           1461   L016003?:
0387 EB        1462            mov     a,r3
0388 52A6      1463            anl     _P2MDOUT,a
038A           1464   ;        main.c:343: case 3: P3MDOUT &= mask; break; 
038A 22        1465            ret
038B           1466   L016004?:
038B EB        1467            mov     a,r3
038C 529C      1468            anl     _P3MDOUT,a
038E           1469   ;        main.c:344: }   
038E           1470   L016006?:
038E 22        1471            ret
038F           1472   ;------------------------------------------------------------
038F           1473   ;Allocation info for local variables in function 'InitADC'
038F           1474   ;------------------------------------------------------------
038F           1475   ;------------------------------------------------------------
038F           1476   ;        main.c:347: void InitADC (void)
038F           1477   ;        -----------------------------------------
038F           1478   ;         function InitADC
038F           1479   ;        -----------------------------------------
038F           1480   _InitADC:
038F           1481   ;        main.c:349: SFRPAGE = 0x00;
038F 75A700    1482            mov     _SFRPAGE,#0x00
0392           1483   ;        main.c:350: ADEN=0; // Disable ADC
0392 C2EF      1484            clr     _ADEN
0394           1485   ;        main.c:355: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0394 75B280    1486            mov     _ADC0CN1,#0x80
0397           1487   ;        main.c:359: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0397 75BC20    1488            mov     _ADC0CF0,#0x20
039A           1489   ;        main.c:363: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
039A 75B91E    1490            mov     _ADC0CF1,#0x1E
039D           1491   ;        main.c:372: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
039D 75E800    1492            mov     _ADC0CN0,#0x00
03A0           1493   ;        main.c:377: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
03A0 75DF3F    1494            mov     _ADC0CF2,#0x3F
03A3           1495   ;        main.c:381: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
03A3 75B300    1496            mov     _ADC0CN2,#0x00
03A6           1497   ;        main.c:383: ADEN=1; // Enable ADC
03A6 D2EF      1498            setb    _ADEN
03A8 22        1499            ret
03A9           1500   ;------------------------------------------------------------
03A9           1501   ;Allocation info for local variables in function 'InitPinADC'
03A9           1502   ;------------------------------------------------------------
03A9           1503   ;pin_num                   Allocated with name '_InitPinADC_PARM_2'
03A9           1504   ;portno                    Allocated to registers r2 
03A9           1505   ;mask                      Allocated to registers r3 
03A9           1506   ;------------------------------------------------------------
03A9           1507   ;        main.c:386: void InitPinADC (unsigned char portno, unsigned char pin_num)
03A9           1508   ;        -----------------------------------------
03A9           1509   ;         function InitPinADC
03A9           1510   ;        -----------------------------------------
03A9           1511   _InitPinADC:
03A9 AA82      1512            mov     r2,dpl
03AB           1513   ;        main.c:390: mask=1<<pin_num;
03AB 85E0F0    1514            mov     b,_InitPinADC_PARM_2
03AE 05F0      1515            inc     b
03B0 7401      1516            mov     a,#0x01
03B2 8000      1517            sjmp    L018013?
03B4           1518   L018011?:
03B4 25E0      1519            add     a,acc
03B6           1520   L018013?:
03B6 D5F0C8    1521            djnz    b,L018011?
03B9 FB        1522            mov     r3,a
03BA           1523   ;        main.c:392: SFRPAGE = 0x20;
03BA 75A720    1524            mov     _SFRPAGE,#0x20
03BD           1525   ;        main.c:393: switch (portno)
03BD BA0008    1526            cjne    r2,#0x00,L018014?
03C0 8000      1527            sjmp    L018001?
03C2           1528   L018014?:
03C2 BA0188    1529            cjne    r2,#0x01,L018015?
03C5 8000      1530            sjmp    L018002?
03C7           1531   L018015?:
03C7           1532   ;        main.c:395: case 0:
03C7 BA0208    1533            cjne    r2,#0x02,L018005?
03CA 8000      1534            sjmp    L018003?
03CC           1535   L018001?:
03CC           1536   ;        main.c:396: P0MDIN &= (~mask); // Set pin as analog input
03CC EB        1537            mov     a,r3
03CD F4        1538            cpl     a
03CE FA        1539            mov     r2,a
03CF 52F1      1540            anl     _P0MDIN,a
03D1           1541   ;        main.c:397: P0SKIP |= mask; // Skip Crossbar decoding for this pin
03D1 EB        1542            mov     a,r3
03D2 42D4      1543            orl     _P0SKIP,a
03D4           1544   ;        main.c:398: break;
03D4           1545   ;        main.c:399: case 1:
03D4 8000      1546            sjmp    L018005?
03D6           1547   L018002?:
03D6           1548   ;        main.c:400: P1MDIN &= (~mask); // Set pin as analog input
03D6 EB        1549            mov     a,r3
03D7 F4        1550            cpl     a
03D8 FA        1551            mov     r2,a
03D9 52F2      1552            anl     _P1MDIN,a
03DB           1553   ;        main.c:401: P1SKIP |= mask; // Skip Crossbar decoding for this pin
03DB EB        1554            mov     a,r3
03DC 42D5      1555            orl     _P1SKIP,a
03DE           1556   ;        main.c:402: break;
03DE           1557   ;        main.c:403: case 2:
03DE 8000      1558            sjmp    L018005?
03E0           1559   L018003?:
03E0           1560   ;        main.c:404: P2MDIN &= (~mask); // Set pin as analog input
03E0 EB        1561            mov     a,r3
03E1 F4        1562            cpl     a
03E2 FA        1563            mov     r2,a
03E3 52F3      1564            anl     _P2MDIN,a
03E5           1565   ;        main.c:405: P2SKIP |= mask; // Skip Crossbar decoding for this pin
03E5 EB        1566            mov     a,r3
03E6 42CC      1567            orl     _P2SKIP,a
03E8           1568   ;        main.c:409: }
03E8           1569   L018005?:
03E8           1570   ;        main.c:410: SFRPAGE = 0x00;
03E8 75A700    1571            mov     _SFRPAGE,#0x00
03EB 22        1572            ret
03EC           1573   ;------------------------------------------------------------
03EC           1574   ;Allocation info for local variables in function 'ADC_at_Pin'
03EC           1575   ;------------------------------------------------------------
03EC           1576   ;pin                       Allocated to registers 
03EC           1577   ;------------------------------------------------------------
03EC           1578   ;        main.c:413: unsigned int ADC_at_Pin(unsigned char pin)
03EC           1579   ;        -----------------------------------------
03EC           1580   ;         function ADC_at_Pin
03EC           1581   ;        -----------------------------------------
03EC           1582   _ADC_at_Pin:
03EC 8582BB    1583            mov     _ADC0MX,dpl
03EF           1584   ;        main.c:416: ADINT = 0;
03EF C2ED      1585            clr     _ADINT
03F1           1586   ;        main.c:417: ADBUSY = 1;     // Convert voltage at the pin
03F1 D2EC      1587            setb    _ADBUSY
03F3           1588   ;        main.c:418: while (!ADINT); // Wait for conversion to complete
03F3           1589   L019001?:
03F3 30ED88    1590            jnb     _ADINT,L019001?
03F6           1591   ;        main.c:419: return (ADC0);
03F6 85BD82    1592            mov     dpl,_ADC0
03F9 85BE83    1593            mov     dph,(_ADC0 >> 8)
03FC 22        1594            ret
03FD           1595   ;------------------------------------------------------------
03FD           1596   ;Allocation info for local variables in function 'Timer5_ISR'
03FD           1597   ;------------------------------------------------------------
03FD           1598   ;------------------------------------------------------------
03FD           1599   ;        main.c:422: void Timer5_ISR (void) interrupt INTERRUPT_TIMER5
03FD           1600   ;        -----------------------------------------
03FD           1601   ;         function Timer5_ISR
03FD           1602   ;        -----------------------------------------
03FD           1603   _Timer5_ISR:
03FD C098      1604            push    bits
03FF C0E0      1605            push    acc
0401 C0F0      1606            push    b
0403 C082      1607            push    dpl
0405 C083      1608            push    dph
0407 C002      1609            push    (0+2)
0409 C003      1610            push    (0+3)
040B C004      1611            push    (0+4)
040D C005      1612            push    (0+5)
040F C006      1613            push    (0+6)
0411 C007      1614            push    (0+7)
0413 C000      1615            push    (0+0)
0415 C001      1616            push    (0+1)
0417 C0D0      1617            push    psw
0419 75D000    1618            mov     psw,#0x00
041C           1619   ;        main.c:424: SFRPAGE=0x10;
041C 75A710    1620            mov     _SFRPAGE,#0x10
041F           1621   ;        main.c:425: TF5H = 0; // Clear Timer5 interrupt flag
041F C2C7      1622            clr     _TF5H
0421           1623   ;        main.c:426: TMR5RL = RELOAD_10us; // Reload Timer5 for 10us intervals 
0421 75D2C4    1624            mov     _TMR5RL,#0xC4
0424 75D3FF    1625            mov     (_TMR5RL >> 8),#0xFF
0427           1626   ;        main.c:428: fre_mea_count++;
0427 0558      1627            inc     _fre_mea_count
0429 E4        1628            clr     a
042A B55808    1629            cjne    a,_fre_mea_count,L020034?
042D 0559      1630            inc     (_fre_mea_count + 1)
042F           1631   L020034?:
042F           1632   ;        main.c:429: if(fre_mea_count == 1000){
042F 74E8      1633            mov     a,#0xE8
0431 B55848    1634            cjne    a,_fre_mea_count,L020002?
0434 7403      1635            mov     a,#0x03
0436 B55948    1636            cjne    a,(_fre_mea_count + 1),L020002?
0439           1637   ;        main.c:430: fre_mea_count = 0;
0439 E4        1638            clr     a
043A F558      1639            mov     _fre_mea_count,a
043C F559      1640            mov     (_fre_mea_count + 1),a
043E           1641   ;        main.c:431: freq100 = get_freq();
043E 120000    1642            lcall   _get_freq
0441 AA82      1643            mov     r2,dpl
0443 AB83      1644            mov     r3,dph
0445 8A98      1645            mov     _freq100,r2
0447 EB        1646            mov     a,r3
0448 F599      1647            mov     (_freq100 + 1),a
044A 33        1648            rlc     a
044B 95E0      1649            subb    a,acc
044D F59A      1650            mov     (_freq100 + 2),a
044F F59B      1651            mov     (_freq100 + 3),a
0451           1652   L020002?:
0451           1653   ;        main.c:435: pwm_counter++; 
0451 0598      1654            inc     _pwm_counter
0453 E4        1655            clr     a
0454 B598C8    1656            cjne    a,_pwm_counter,L020037?
0457 0599      1657            inc     (_pwm_counter + 1)
0459           1658   L020037?:
0459           1659   ;        main.c:436: if (pwm_counter == 100){
0459 7464      1660            mov     a,#0x64
045B B59808    1661            cjne    a,_pwm_counter,L020038?
045E E4        1662            clr     a
045F B59908    1663            cjne    a,(_pwm_counter + 1),L020038?
0462 8000      1664            sjmp    L020039?
0464           1665   L020038?:
0464 8000      1666            sjmp    L020004?
0466           1667   L020039?:
0466           1668   ;        main.c:437: pwm_counter = 0; 
0466 E4        1669            clr     a
0467 F598      1670            mov     _pwm_counter,a
0469 F599      1671            mov     (_pwm_counter + 1),a
046B           1672   L020004?:
046B           1673   ;        main.c:440: if (pwm_right > pwm_counter){
046B AAD8      1674            mov     r2,_pwm_right
046D 7B00      1675            mov     r3,#0x00
046F C3        1676            clr     c
0470 E598      1677            mov     a,_pwm_counter
0472 9A        1678            subb    a,r2
0473 E599      1679            mov     a,(_pwm_counter + 1)
0475 9B        1680            subb    a,r3
0476 5000      1681            jnc     L020009?
0478           1682   ;        main.c:441: if(L_motor_dir){
0478 E598      1683            mov     a,_L_motor_dir
047A 6000      1684            jz      L020006?
047C           1685   ;        main.c:442: L_bridge_1 = 1; 
047C D2A1      1686            setb    _P2_1
047E           1687   ;        main.c:443: L_bridge_2 = 0; 
047E C2A2      1688            clr     _P2_2
0480 8000      1689            sjmp    L020010?
0482           1690   L020006?:
0482           1691   ;        main.c:446: L_bridge_1 = 0; 
0482 C2A1      1692            clr     _P2_1
0484           1693   ;        main.c:447: L_bridge_2 = 1; 
0484 D2A2      1694            setb    _P2_2
0486 8000      1695            sjmp    L020010?
0488           1696   L020009?:
0488           1697   ;        main.c:451: L_bridge_1 = 0; 
0488 C2A1      1698            clr     _P2_1
048A           1699   ;        main.c:452: L_bridge_2 = 0; 
048A C2A2      1700            clr     _P2_2
048C           1701   L020010?:
048C           1702   ;        main.c:454: if (pwm_left > pwm_counter){
048C AA18      1703            mov     r2,_pwm_left
048E 7B00      1704            mov     r3,#0x00
0490 C3        1705            clr     c
0491 E598      1706            mov     a,_pwm_counter
0493 9A        1707            subb    a,r2
0494 E599      1708            mov     a,(_pwm_counter + 1)
0496 9B        1709            subb    a,r3
0497 5000      1710            jnc     L020015?
0499           1711   ;        main.c:455: if (R_motor_dir){
0499 E558      1712            mov     a,_R_motor_dir
049B 6000      1713            jz      L020012?
049D           1714   ;        main.c:456: R_bridge_1 = 1; 
049D D2A4      1715            setb    _P2_4
049F           1716   ;        main.c:457: R_bridge_2 = 0;
049F C2A3      1717            clr     _P2_3
04A1 8000      1718            sjmp    L020016?
04A3           1719   L020012?:
04A3           1720   ;        main.c:460: R_bridge_1 = 0; 
04A3 C2A4      1721            clr     _P2_4
04A5           1722   ;        main.c:461: R_bridge_2 = 1;
04A5 D2A3      1723            setb    _P2_3
04A7 8000      1724            sjmp    L020016?
04A9           1725   L020015?:
04A9           1726   ;        main.c:465: R_bridge_1 = 0; 
04A9 C2A4      1727            clr     _P2_4
04AB           1728   ;        main.c:466: R_bridge_2 = 0; 
04AB C2A3      1729            clr     _P2_3
04AD           1730   L020016?:
04AD           1731   ;        main.c:469: servo_counter++;
04AD 0558      1732            inc     _servo_counter
04AF E4        1733            clr     a
04B0 B55848    1734            cjne    a,_servo_counter,L020044?
04B3 0559      1735            inc     (_servo_counter + 1)
04B5           1736   L020044?:
04B5           1737   ;        main.c:470: if(servo_counter==2000)
04B5 74D0      1738            mov     a,#0xD0
04B7 B55888    1739            cjne    a,_servo_counter,L020018?
04BA 7407      1740            mov     a,#0x07
04BC B55988    1741            cjne    a,(_servo_counter + 1),L020018?
04BF           1742   ;        main.c:472: servo_counter=0;
04BF E4        1743            clr     a
04C0 F558      1744            mov     _servo_counter,a
04C2 F559      1745            mov     (_servo_counter + 1),a
04C4           1746   ;        main.c:473: Servo_arm=1;
04C4 D296      1747            setb    _P1_6
04C6           1748   ;        main.c:474: Servo_base=1;
04C6 D297      1749            setb    _P1_7
04C8           1750   L020018?:
04C8           1751   ;        main.c:476: if(servo_arm==servo_counter)
04C8 AAD8      1752            mov     r2,_servo_arm
04CA 7B00      1753            mov     r3,#0x00
04CC EA        1754            mov     a,r2
04CD B558C8    1755            cjne    a,_servo_counter,L020020?
04D0 EB        1756            mov     a,r3
04D1 B559C8    1757            cjne    a,(_servo_counter + 1),L020020?
04D4           1758   ;        main.c:478: Servo_arm=0;
04D4 C296      1759            clr     _P1_6
04D6           1760   L020020?:
04D6           1761   ;        main.c:480: if(servo_base==servo_counter)
04D6 AA18      1762            mov     r2,_servo_base
04D8 7B00      1763            mov     r3,#0x00
04DA EA        1764            mov     a,r2
04DB B55808    1765            cjne    a,_servo_counter,L020023?
04DE EB        1766            mov     a,r3
04DF B55908    1767            cjne    a,(_servo_counter + 1),L020023?
04E2           1768   ;        main.c:482: Servo_base=0;
04E2 C297      1769            clr     _P1_7
04E4           1770   L020023?:
04E4 D0D0      1771            pop     psw
04E6 D001      1772            pop     (0+1)
04E8 D000      1773            pop     (0+0)
04EA D007      1774            pop     (0+7)
04EC D006      1775            pop     (0+6)
04EE D005      1776            pop     (0+5)
04F0 D004      1777            pop     (0+4)
04F2 D003      1778            pop     (0+3)
04F4 D002      1779            pop     (0+2)
04F6 D083      1780            pop     dph
04F8 D082      1781            pop     dpl
04FA D0F0      1782            pop     b
04FC D0E0      1783            pop     acc
04FE D098      1784            pop     bits
0500 32        1785            reti
0501           1786   ;------------------------------------------------------------
0501           1787   ;Allocation info for local variables in function 'servo_pick'
0501           1788   ;------------------------------------------------------------
0501           1789   ;i                         Allocated to registers r2 r3 
0501           1790   ;------------------------------------------------------------
0501           1791   ;        main.c:487: void servo_pick(){
0501           1792   ;        -----------------------------------------
0501           1793   ;         function servo_pick
0501           1794   ;        -----------------------------------------
0501           1795   _servo_pick:
0501           1796   ;        main.c:489: servo_arm = 1;
0501 75D801    1797            mov     _servo_arm,#0x01
0504           1798   ;        main.c:491: servo_base = 250;
0504 7518FA    1799            mov     _servo_base,#0xFA
0507           1800   ;        main.c:492: waitms(200);
0507 9000C8    1801            mov     dptr,#0x00C8
050A 120000    1802            lcall   _waitms
050D           1803   ;        main.c:493: servo_arm = 250;
050D 75D8FA    1804            mov     _servo_arm,#0xFA
0510           1805   ;        main.c:494: Magnet = 1;
0510 D295      1806            setb    _P1_5
0512           1807   ;        main.c:495: waitms(200);
0512 9000C8    1808            mov     dptr,#0x00C8
0515 120000    1809            lcall   _waitms
0518           1810   ;        main.c:496: for(i = 0; i<109; i++){
0518 7A00      1811            mov     r2,#0x00
051A 7B00      1812            mov     r3,#0x00
051C           1813   L021001?:
051C C3        1814            clr     c
051D EA        1815            mov     a,r2
051E 946D      1816            subb    a,#0x6D
0520 EB        1817            mov     a,r3
0521 6480      1818            xrl     a,#0x80
0523 9480      1819            subb    a,#0x80
0525 5000      1820            jnc     L021004?
0527           1821   ;        main.c:497: waitms(5);
0527 900005    1822            mov     dptr,#0x0005
052A C002      1823            push    ar2
052C C003      1824            push    ar3
052E 120000    1825            lcall   _waitms
0531 D003      1826            pop     ar3
0533 D002      1827            pop     ar2
0535           1828   ;        main.c:498: servo_base--;
0535 1518      1829            dec     _servo_base
0537           1830   ;        main.c:496: for(i = 0; i<109; i++){
0537 0A        1831            inc     r2
0538 BA0048    1832            cjne    r2,#0x00,L021001?
053B 0B        1833            inc     r3
053C 8000      1834            sjmp    L021001?
053E           1835   L021004?:
053E           1836   ;        main.c:500: waitms(200);
053E 9000C8    1837            mov     dptr,#0x00C8
0541 120000    1838            lcall   _waitms
0544           1839   ;        main.c:501: for(i = 0; i<159; i++){
0544 7A00      1840            mov     r2,#0x00
0546 7B00      1841            mov     r3,#0x00
0548           1842   L021005?:
0548 C3        1843            clr     c
0549 EA        1844            mov     a,r2
054A 949F      1845            subb    a,#0x9F
054C EB        1846            mov     a,r3
054D 6480      1847            xrl     a,#0x80
054F 9480      1848            subb    a,#0x80
0551 5000      1849            jnc     L021008?
0553           1850   ;        main.c:502: waitms(5);
0553 900005    1851            mov     dptr,#0x0005
0556 C002      1852            push    ar2
0558 C003      1853            push    ar3
055A 120000    1854            lcall   _waitms
055D D003      1855            pop     ar3
055F D002      1856            pop     ar2
0561           1857   ;        main.c:503: servo_arm--;
0561 15D8      1858            dec     _servo_arm
0563           1859   ;        main.c:501: for(i = 0; i<159; i++){
0563 0A        1860            inc     r2
0564 BA00C8    1861            cjne    r2,#0x00,L021005?
0567 0B        1862            inc     r3
0568 8000      1863            sjmp    L021005?
056A           1864   L021008?:
056A           1865   ;        main.c:505: waitms(200);
056A 9000C8    1866            mov     dptr,#0x00C8
056D 120000    1867            lcall   _waitms
0570           1868   ;        main.c:506: for(i = 0; i<45; i++){
0570 7A00      1869            mov     r2,#0x00
0572 7B00      1870            mov     r3,#0x00
0574           1871   L021009?:
0574 C3        1872            clr     c
0575 EA        1873            mov     a,r2
0576 942D      1874            subb    a,#0x2D
0578 EB        1875            mov     a,r3
0579 6480      1876            xrl     a,#0x80
057B 9480      1877            subb    a,#0x80
057D 5000      1878            jnc     L021012?
057F           1879   ;        main.c:507: waitms(5);
057F 900005    1880            mov     dptr,#0x0005
0582 C002      1881            push    ar2
0584 C003      1882            push    ar3
0586 120000    1883            lcall   _waitms
0589 D003      1884            pop     ar3
058B D002      1885            pop     ar2
058D           1886   ;        main.c:508: servo_base--;
058D 1518      1887            dec     _servo_base
058F           1888   ;        main.c:506: for(i = 0; i<45; i++){
058F 0A        1889            inc     r2
0590 BA0048    1890            cjne    r2,#0x00,L021009?
0593 0B        1891            inc     r3
0594 8000      1892            sjmp    L021009?
0596           1893   L021012?:
0596           1894   ;        main.c:510: waitms(500);
0596 9001F4    1895            mov     dptr,#0x01F4
0599 120000    1896            lcall   _waitms
059C           1897   ;        main.c:511: Magnet = 0;
059C C295      1898            clr     _P1_5
059E           1899   ;        main.c:512: waitms(200);
059E 9000C8    1900            mov     dptr,#0x00C8
05A1 120000    1901            lcall   _waitms
05A4           1902   ;        main.c:513: servo_arm=1;
05A4 75D801    1903            mov     _servo_arm,#0x01
05A7           1904   ;        main.c:514: servo_base=1;
05A7 751801    1905            mov     _servo_base,#0x01
05AA           1906   ;        main.c:515: return;
05AA 22        1907            ret
05AB           1908   ;------------------------------------------------------------
05AB           1909   ;Allocation info for local variables in function 'check_bound'
05AB           1910   ;------------------------------------------------------------
05AB           1911   ;d2                        Allocated with name '_check_bound_PARM_2'
05AB           1912   ;d1                        Allocated to registers r2 r3 
05AB           1913   ;------------------------------------------------------------
05AB           1914   ;        main.c:518: int check_bound(int d1, int d2){
05AB           1915   ;        -----------------------------------------
05AB           1916   ;         function check_bound
05AB           1917   ;        -----------------------------------------
05AB           1918   _check_bound:
05AB AA82      1919            mov     r2,dpl
05AD AB83      1920            mov     r3,dph
05AF           1921   ;        main.c:519: if(d1>14000||d2>14000)      return 1;
05AF C3        1922            clr     c
05B0 74B0      1923            mov     a,#0xB0
05B2 9A        1924            subb    a,r2
05B3 74B6      1925            mov     a,#(0x36 ^ 0x80)
05B5 8BF0      1926            mov     b,r3
05B7 63F080    1927            xrl     b,#0x80
05BA 95F0      1928            subb    a,b
05BC 4000      1929            jc      L022001?
05BE 74B0      1930            mov     a,#0xB0
05C0 9590      1931            subb    a,_check_bound_PARM_2
05C2 74B6      1932            mov     a,#(0x36 ^ 0x80)
05C4 8591F0    1933            mov     b,(_check_bound_PARM_2 + 1)
05C7 63F080    1934            xrl     b,#0x80
05CA 95F0      1935            subb    a,b
05CC 5000      1936            jnc     L022002?
05CE           1937   L022001?:
05CE 900001    1938            mov     dptr,#0x0001
05D1           1939   ;        main.c:520: else return 0;
05D1 22        1940            ret
05D2           1941   L022002?:
05D2 900000    1942            mov     dptr,#0x0000
05D5 22        1943            ret
05D6           1944   ;------------------------------------------------------------
05D6           1945   ;Allocation info for local variables in function 'Init_all'
05D6           1946   ;------------------------------------------------------------
05D6           1947   ;------------------------------------------------------------
05D6           1948   ;        main.c:523: void Init_all(){
05D6           1949   ;        -----------------------------------------
05D6           1950   ;         function Init_all
05D6           1951   ;        -----------------------------------------
05D6           1952   _Init_all:
05D6           1953   ;        main.c:525: Set_Pin_Output(0x24);
05D6 758224    1954            mov     dpl,#0x24
05D9 120000    1955            lcall   _Set_Pin_Output
05DC           1956   ;        main.c:526: Set_Pin_Output(0x23);
05DC 758223    1957            mov     dpl,#0x23
05DF 120000    1958            lcall   _Set_Pin_Output
05E2           1959   ;        main.c:527: Set_Pin_Output(0x22);
05E2 758222    1960            mov     dpl,#0x22
05E5 120000    1961            lcall   _Set_Pin_Output
05E8           1962   ;        main.c:528: Set_Pin_Output(0x21);
05E8 758221    1963            mov     dpl,#0x21
05EB 120000    1964            lcall   _Set_Pin_Output
05EE           1965   ;        main.c:529: Set_Pin_Output(0x17);
05EE 758217    1966            mov     dpl,#0x17
05F1 120000    1967            lcall   _Set_Pin_Output
05F4           1968   ;        main.c:530: Set_Pin_Output(0x16);
05F4 758216    1969            mov     dpl,#0x16
05F7 120000    1970            lcall   _Set_Pin_Output
05FA           1971   ;        main.c:531: Set_Pin_Output(0x15);
05FA 758215    1972            mov     dpl,#0x15
05FD 120000    1973            lcall   _Set_Pin_Output
0600           1974   ;        main.c:532: Set_Pin_Input(0x02);
0600 758202    1975            mov     dpl,#0x02
0603 120000    1976            lcall   _Set_Pin_Input
0606           1977   ;        main.c:534: InitPinADC(1,3);
0606 75E003    1978            mov     _InitPinADC_PARM_2,#0x03
0609 758201    1979            mov     dpl,#0x01
060C 120000    1980            lcall   _InitPinADC
060F           1981   ;        main.c:535: InitPinADC(1,4);
060F 75E004    1982            mov     _InitPinADC_PARM_2,#0x04
0612 758201    1983            mov     dpl,#0x01
0615 120000    1984            lcall   _InitPinADC
0618           1985   ;        main.c:536: InitADC();
0618 120000    1986            lcall   _InitADC
061B           1987   ;        main.c:538: TMOD&=0b_1111_0000; 
061B 5389F0    1988            anl     _TMOD,#0xF0
061E           1989   ;        main.c:539: TMOD|=0b_0000_0001; 
061E 438901    1990            orl     _TMOD,#0x01
0621           1991   ;        main.c:540: TR0=0; 
0621 C28C      1992            clr     _TR0
0623           1993   ;        main.c:542: Servo_arm=0;
0623 C296      1994            clr     _P1_6
0625           1995   ;        main.c:543: Servo_base=0;
0625 C297      1996            clr     _P1_7
0627           1997   ;        main.c:544: Magnet = 0;
0627 C295      1998            clr     _P1_5
0629           1999   ;        main.c:545: return;
0629 22        2000            ret
062A           2001   ;------------------------------------------------------------
062A           2002   ;Allocation info for local variables in function 'Auto_mode_slave'
062A           2003   ;------------------------------------------------------------
062A           2004   ;count                     Allocated to registers r2 r3 
062A           2005   ;c                         Allocated to registers r4 
062A           2006   ;------------------------------------------------------------
062A           2007   ;        main.c:548: void Auto_mode_slave(){
062A           2008   ;        -----------------------------------------
062A           2009   ;         function Auto_mode_slave
062A           2010   ;        -----------------------------------------
062A           2011   _Auto_mode_slave:
062A           2012   ;        main.c:552: while(count < 20){
062A 7A00      2013            mov     r2,#0x00
062C 7B00      2014            mov     r3,#0x00
062E           2015   L024013?:
062E C3        2016            clr     c
062F EA        2017            mov     a,r2
0630 9414      2018            subb    a,#0x14
0632 EB        2019            mov     a,r3
0633 6480      2020            xrl     a,#0x80
0635 9480      2021            subb    a,#0x80
0637 4000      2022            jc      L024026?
0639 22        2023            ret
063A           2024   L024026?:
063A           2025   ;        main.c:553: if(RXU1()){
063A C002      2026            push    ar2
063C C003      2027            push    ar3
063E 120000    2028            lcall   _RXU1
0641 D003      2029            pop     ar3
0643 D002      2030            pop     ar2
0645 4000      2031            jc      L024027?
0647 020000    2032            ljmp    L024010?
064A           2033   L024027?:
064A           2034   ;        main.c:554: c=getchar1();       
064A C002      2035            push    ar2
064C C003      2036            push    ar3
064E 120000    2037            lcall   _getchar1
0651 AC82      2038            mov     r4,dpl
0653 D003      2039            pop     ar3
0655 D002      2040            pop     ar2
0657           2041   ;        main.c:555: if(c=='!'){
0657 BC2148    2042            cjne    r4,#0x21,L024028?
065A 8000      2043            sjmp    L024029?
065C           2044   L024028?:
065C 020000    2045            ljmp    L024007?
065F           2046   L024029?:
065F           2047   ;        main.c:556: getstr1(buff, sizeof(buff)-1);
065F 759813    2048            mov     _getstr1_PARM_2,#0x13
0662 904558    2049            mov     dptr,#_buff
0665 75F040    2050            mov     b,#0x40
0668 C002      2051            push    ar2
066A C003      2052            push    ar3
066C 120000    2053            lcall   _getstr1
066F           2054   ;        main.c:557: if(strlen(buff)==11){
066F 904558    2055            mov     dptr,#_buff
0672 75F040    2056            mov     b,#0x40
0675 120000    2057            lcall   _strlen
0678 AD82      2058            mov     r5,dpl
067A AE83      2059            mov     r6,dph
067C D003      2060            pop     ar3
067E D002      2061            pop     ar2
0680 BD0B48    2062            cjne    r5,#0x0B,L024002?
0683 BE0048    2063            cjne    r6,#0x00,L024002?
0686           2064   ;        main.c:558: printf("Master says: %s\r\n", buff);
0686 C002      2065            push    ar2
0688 C003      2066            push    ar3
068A 7458      2067            mov     a,#_buff
068C C0E0      2068            push    acc
068E 7445      2069            mov     a,#(_buff >> 8)
0690 C0E0      2070            push    acc
0692 7440      2071            mov     a,#0x40
0694 C0E0      2072            push    acc
0696 7488      2073            mov     a,#__str_3
0698 C0E0      2074            push    acc
069A 74D5      2075            mov     a,#(__str_3 >> 8)
069C C0E0      2076            push    acc
069E 7480      2077            mov     a,#0x80
06A0 C0E0      2078            push    acc
06A2 120000    2079            lcall   _printf
06A5 E581      2080            mov     a,sp
06A7 24FA      2081            add     a,#0xfa
06A9 F581      2082            mov     sp,a
06AB D003      2083            pop     ar3
06AD D002      2084            pop     ar2
06AF 8000      2085            sjmp    L024010?
06B1           2086   L024002?:
06B1           2087   ;        main.c:561: printf("*** BAD MESSAGE ***(%d): %s\r\n", buff,strlen(buff));
06B1 904558    2088            mov     dptr,#_buff
06B4 75F040    2089            mov     b,#0x40
06B7 C002      2090            push    ar2
06B9 C003      2091            push    ar3
06BB 120000    2092            lcall   _strlen
06BE AD82      2093            mov     r5,dpl
06C0 AE83      2094            mov     r6,dph
06C2 C005      2095            push    ar5
06C4 C006      2096            push    ar6
06C6 7458      2097            mov     a,#_buff
06C8 C0E0      2098            push    acc
06CA 7445      2099            mov     a,#(_buff >> 8)
06CC C0E0      2100            push    acc
06CE 7440      2101            mov     a,#0x40
06D0 C0E0      2102            push    acc
06D2 74C8      2103            mov     a,#__str_4
06D4 C0E0      2104            push    acc
06D6 74D5      2105            mov     a,#(__str_4 >> 8)
06D8 C0E0      2106            push    acc
06DA 7480      2107            mov     a,#0x80
06DC C0E0      2108            push    acc
06DE 120000    2109            lcall   _printf
06E1 E581      2110            mov     a,sp
06E3 24F8      2111            add     a,#0xf8
06E5 F581      2112            mov     sp,a
06E7 D003      2113            pop     ar3
06E9 D002      2114            pop     ar2
06EB 8000      2115            sjmp    L024010?
06ED           2116   L024007?:
06ED           2117   ;        main.c:564: else if(c=='@'){
06ED BC4008    2118            cjne    r4,#0x40,L024010?
06F0           2119   ;        main.c:565: sprintf(buff, "%02d\n", count);
06F0 C002      2120            push    ar2
06F2 C003      2121            push    ar3
06F4 C002      2122            push    ar2
06F6 C003      2123            push    ar3
06F8 7408      2124            mov     a,#__str_5
06FA C0E0      2125            push    acc
06FC 74D6      2126            mov     a,#(__str_5 >> 8)
06FE C0E0      2127            push    acc
0700 7480      2128            mov     a,#0x80
0702 C0E0      2129            push    acc
0704 7458      2130            mov     a,#_buff
0706 C0E0      2131            push    acc
0708 7445      2132            mov     a,#(_buff >> 8)
070A C0E0      2133            push    acc
070C 7440      2134            mov     a,#0x40
070E C0E0      2135            push    acc
0710 120000    2136            lcall   _sprintf
0713 E581      2137            mov     a,sp
0715 24F8      2138            add     a,#0xf8
0717 F581      2139            mov     sp,a
0719           2140   ;        main.c:566: waitms(5); // The radio seems to need this delay...
0719 900005    2141            mov     dptr,#0x0005
071C 120000    2142            lcall   _waitms
071F           2143   ;        main.c:567: sendstr1(buff);
071F 904558    2144            mov     dptr,#_buff
0722 75F040    2145            mov     b,#0x40
0725 120000    2146            lcall   _sendstr1
0728 D003      2147            pop     ar3
072A D002      2148            pop     ar2
072C           2149   L024010?:
072C           2150   ;        main.c:570: if (freq100>5400){
072C C3        2151            clr     c
072D 7418      2152            mov     a,#0x18
072F 9598      2153            subb    a,_freq100
0731 7415      2154            mov     a,#0x15
0733 9599      2155            subb    a,(_freq100 + 1)
0735 E4        2156            clr     a
0736 959A      2157            subb    a,(_freq100 + 2)
0738 E4        2158            clr     a
0739 6480      2159            xrl     a,#0x80
073B 859BF0    2160            mov     b,(_freq100 + 3)
073E 63F080    2161            xrl     b,#0x80
0741 95F0      2162            subb    a,b
0743 4000      2163            jc      L024034?
0745 020000    2164            ljmp    L024013?
0748           2165   L024034?:
0748           2166   ;        main.c:571: servo_pick();
0748 C002      2167            push    ar2
074A C003      2168            push    ar3
074C 120000    2169            lcall   _servo_pick
074F D003      2170            pop     ar3
0751 D002      2171            pop     ar2
0753           2172   ;        main.c:572: count++;
0753 0A        2173            inc     r2
0754 BA00C8    2174            cjne    r2,#0x00,L024035?
0757 0B        2175            inc     r3
0758           2176   L024035?:
0758 020000    2177            ljmp    L024013?
075B           2178   ;------------------------------------------------------------
075B           2179   ;Allocation info for local variables in function 'main'
075B           2180   ;------------------------------------------------------------
075B           2181   ;c                         Allocated to registers r2 
075B           2182   ;vx_error                  Allocated with name '_main_vx_error_1_141'
075B           2183   ;vy_error                  Allocated with name '_main_vy_error_1_141'
075B           2184   ;vx_err                    Allocated with name '_main_vx_err_1_141'
075B           2185   ;vy_err                    Allocated with name '_main_vy_err_1_141'
075B           2186   ;vx                        Allocated with name '_main_vx_1_141'
075B           2187   ;vy                        Allocated with name '_main_vy_1_141'
075B           2188   ;threshold                 Allocated to registers 
075B           2189   ;motor_pwm                 Allocated to registers 
075B           2190   ;pick                      Allocated with name '_main_pick_1_141'
075B           2191   ;auto_mode                 Allocated with name '_main_auto_mode_1_141'
075B           2192   ;pick_done                 Allocated to registers 
075B           2193   ;bound_flag                Allocated to registers 
075B           2194   ;------------------------------------------------------------
075B           2195   ;        main.c:577: void main (void)
075B           2196   ;        -----------------------------------------
075B           2197   ;         function main
075B           2198   ;        -----------------------------------------
075B           2199   _main:
075B           2200   ;        main.c:581: int vx = 0, vy = 0; 
075B E4        2201            clr     a
075C F5D8      2202            mov     _main_vx_1_141,a
075E F5D9      2203            mov     (_main_vx_1_141 + 1),a
0760 F518      2204            mov     _main_vy_1_141,a
0762 F519      2205            mov     (_main_vy_1_141 + 1),a
0764           2206   ;        main.c:589: Init_all();
0764 120000    2207            lcall   _Init_all
0767           2208   ;        main.c:590: waitms(500);
0767 9001F4    2209            mov     dptr,#0x01F4
076A 120000    2210            lcall   _waitms
076D           2211   ;        main.c:591: printf("\r\nEFM8LB12 JDY-40 Slave Test.\r\n");
076D 7408      2212            mov     a,#__str_6
076F C0E0      2213            push    acc
0771 74D7      2214            mov     a,#(__str_6 >> 8)
0773 C0E0      2215            push    acc
0775 7480      2216            mov     a,#0x80
0777 C0E0      2217            push    acc
0779 120000    2218            lcall   _printf
077C 1581      2219            dec     sp
077E 1581      2220            dec     sp
0780 1581      2221            dec     sp
0782           2222   ;        main.c:592: UART1_Init(9600);
0782 902580    2223            mov     dptr,#0x2580
0785 E4        2224            clr     a
0786 F5F0      2225            mov     b,a
0788 120000    2226            lcall   _UART1_Init
078B           2227   ;        main.c:594: ReceptionOff();
078B 120000    2228            lcall   _ReceptionOff
078E           2229   ;        main.c:597: SendATCommand("AT+VER\r\n");
078E 90D748    2230            mov     dptr,#__str_7
0791 75F080    2231            mov     b,#0x80
0794 120000    2232            lcall   _SendATCommand
0797           2233   ;        main.c:598: SendATCommand("AT+BAUD\r\n");
0797 90D788    2234            mov     dptr,#__str_8
079A 75F080    2235            mov     b,#0x80
079D 120000    2236            lcall   _SendATCommand
07A0           2237   ;        main.c:599: SendATCommand("AT+RFID\r\n");
07A0 90D7C8    2238            mov     dptr,#__str_9
07A3 75F080    2239            mov     b,#0x80
07A6 120000    2240            lcall   _SendATCommand
07A9           2241   ;        main.c:600: SendATCommand("AT+DVID\r\n");
07A9 90D808    2242            mov     dptr,#__str_10
07AC 75F080    2243            mov     b,#0x80
07AF 120000    2244            lcall   _SendATCommand
07B2           2245   ;        main.c:601: SendATCommand("AT+RFC002\r\n");
07B2 90D848    2246            mov     dptr,#__str_11
07B5 75F080    2247            mov     b,#0x80
07B8 120000    2248            lcall   _SendATCommand
07BB           2249   ;        main.c:602: SendATCommand("AT+POWE\r\n");
07BB 90D888    2250            mov     dptr,#__str_12
07BE 75F080    2251            mov     b,#0x80
07C1 120000    2252            lcall   _SendATCommand
07C4           2253   ;        main.c:603: SendATCommand("AT+CLSS\r\n");
07C4 90D8C8    2254            mov     dptr,#__str_13
07C7 75F080    2255            mov     b,#0x80
07CA 120000    2256            lcall   _SendATCommand
07CD           2257   ;        main.c:604: SendATCommand("AT+DVIDEFEF\r\n");  
07CD 90D908    2258            mov     dptr,#__str_14
07D0 75F080    2259            mov     b,#0x80
07D3 120000    2260            lcall   _SendATCommand
07D6           2261   ;        main.c:607: L_bridge_1 = 0; 
07D6 C2A1      2262            clr     _P2_1
07D8           2263   ;        main.c:608: L_bridge_2 = 0; 
07D8 C2A2      2264            clr     _P2_2
07DA           2265   ;        main.c:609: R_bridge_1 = 0; 
07DA C2A4      2266            clr     _P2_4
07DC           2267   ;        main.c:610: R_bridge_2 = 0; 
07DC C2A3      2268            clr     _P2_3
07DE           2269   ;        main.c:612: while(1)
07DE           2270   L025053?:
07DE           2271   ;        main.c:615: d1 = ADC_at_Pin(QFP32_MUX_P1_3);
07DE 758209    2272            mov     dpl,#0x09
07E1 120000    2273            lcall   _ADC_at_Pin
07E4 858218    2274            mov     _d1,dpl
07E7 858319    2275            mov     (_d1 + 1),dph
07EA           2276   ;        main.c:616: d2 = ADC_at_Pin(QFP32_MUX_P1_4);
07EA 75820A    2277            mov     dpl,#0x0A
07ED 120000    2278            lcall   _ADC_at_Pin
07F0 8582D8    2279            mov     _d2,dpl
07F3 8583D9    2280            mov     (_d2 + 1),dph
07F6           2281   ;        main.c:617: bound_flag = check_bound(d1,d2);
07F6 85D890    2282            mov     _check_bound_PARM_2,_d2
07F9 85D991    2283            mov     (_check_bound_PARM_2 + 1),(_d2 + 1)
07FC 851882    2284            mov     dpl,_d1
07FF 851983    2285            mov     dph,(_d1 + 1)
0802 120000    2286            lcall   _check_bound
0805           2287   ;        main.c:622: if(RXU1()) // Something has arrived
0805 120000    2288            lcall   _RXU1
0808 5000      2289            jnc     L025053?
080A           2290   ;        main.c:624: c=getchar1();
080A 120000    2291            lcall   _getchar1
080D AA82      2292            mov     r2,dpl
080F           2293   ;        main.c:626: if(c=='!') // Master is sending message
080F BA2188    2294            cjne    r2,#0x21,L025081?
0812 8000      2295            sjmp    L025082?
0814           2296   L025081?:
0814 020000    2297            ljmp    L025048?
0817           2298   L025082?:
0817           2299   ;        main.c:628: getstr1(buff, sizeof(buff)-1);
0817 759813    2300            mov     _getstr1_PARM_2,#0x13
081A 904558    2301            mov     dptr,#_buff
081D 75F040    2302            mov     b,#0x40
0820 120000    2303            lcall   _getstr1
0823           2304   ;        main.c:629: if(strlen(buff)==11)
0823 904558    2305            mov     dptr,#_buff
0826 75F040    2306            mov     b,#0x40
0829 120000    2307            lcall   _strlen
082C AB82      2308            mov     r3,dpl
082E AC83      2309            mov     r4,dph
0830 BB0B48    2310            cjne    r3,#0x0B,L025083?
0833 BC0048    2311            cjne    r4,#0x00,L025083?
0836 8000      2312            sjmp    L025084?
0838           2313   L025083?:
0838 020000    2314            ljmp    L025043?
083B           2315   L025084?:
083B           2316   ;        main.c:631: printf("Master says: %s\r\n", buff);
083B 7458      2317            mov     a,#_buff
083D C0E0      2318            push    acc
083F 7445      2319            mov     a,#(_buff >> 8)
0841 C0E0      2320            push    acc
0843 7440      2321            mov     a,#0x40
0845 C0E0      2322            push    acc
0847 7488      2323            mov     a,#__str_3
0849 C0E0      2324            push    acc
084B 74D5      2325            mov     a,#(__str_3 >> 8)
084D C0E0      2326            push    acc
084F 7480      2327            mov     a,#0x80
0851 C0E0      2328            push    acc
0853 120000    2329            lcall   _printf
0856 E581      2330            mov     a,sp
0858 24FA      2331            add     a,#0xfa
085A F581      2332            mov     sp,a
085C           2333   ;        main.c:632: sscanf(buff, "%03d,%03d,%01d,%d01", &vx, &vy, &pick, &auto_mode);
085C 74B8      2334            mov     a,#_main_auto_mode_1_141
085E C0E0      2335            push    acc
0860 74BB      2336            mov     a,#(_main_auto_mode_1_141 >> 8)
0862 C0E0      2337            push    acc
0864 7440      2338            mov     a,#0x40
0866 C0E0      2339            push    acc
0868 7468      2340            mov     a,#_main_pick_1_141
086A C0E0      2341            push    acc
086C 74BB      2342            mov     a,#(_main_pick_1_141 >> 8)
086E C0E0      2343            push    acc
0870 7440      2344            mov     a,#0x40
0872 C0E0      2345            push    acc
0874 7418      2346            mov     a,#_main_vy_1_141
0876 C0E0      2347            push    acc
0878 74BB      2348            mov     a,#(_main_vy_1_141 >> 8)
087A C0E0      2349            push    acc
087C 7440      2350            mov     a,#0x40
087E C0E0      2351            push    acc
0880 74D8      2352            mov     a,#_main_vx_1_141
0882 C0E0      2353            push    acc
0884 74BA      2354            mov     a,#(_main_vx_1_141 >> 8)
0886 C0E0      2355            push    acc
0888 7440      2356            mov     a,#0x40
088A C0E0      2357            push    acc
088C 7408      2358            mov     a,#__str_15
088E C0E0      2359            push    acc
0890 74DB      2360            mov     a,#(__str_15 >> 8)
0892 C0E0      2361            push    acc
0894 7480      2362            mov     a,#0x80
0896 C0E0      2363            push    acc
0898 7458      2364            mov     a,#_buff
089A C0E0      2365            push    acc
089C 7445      2366            mov     a,#(_buff >> 8)
089E C0E0      2367            push    acc
08A0 7440      2368            mov     a,#0x40
08A2 C0E0      2369            push    acc
08A4 120000    2370            lcall   _sscanf
08A7 E581      2371            mov     a,sp
08A9 24EE      2372            add     a,#0xee
08AB F581      2373            mov     sp,a
08AD           2374   ;        main.c:633: printf("Joystick Received: Vx = %03d, Vy = %03d, Order = %01d, Auto = %01d\r\n", vx, vy, pick, auto_mode);
08AD C0B8      2375            push    _main_auto_mode_1_141
08AF C0B9      2376            push    (_main_auto_mode_1_141 + 1)
08B1 C068      2377            push    _main_pick_1_141
08B3 C069      2378            push    (_main_pick_1_141 + 1)
08B5 C018      2379            push    _main_vy_1_141
08B7 C019      2380            push    (_main_vy_1_141 + 1)
08B9 C0D8      2381            push    _main_vx_1_141
08BB C0D9      2382            push    (_main_vx_1_141 + 1)
08BD 7488      2383            mov     a,#__str_16
08BF C0E0      2384            push    acc
08C1 74DB      2385            mov     a,#(__str_16 >> 8)
08C3 C0E0      2386            push    acc
08C5 7480      2387            mov     a,#0x80
08C7 C0E0      2388            push    acc
08C9 120000    2389            lcall   _printf
08CC E581      2390            mov     a,sp
08CE 24F5      2391            add     a,#0xf5
08D0 F581      2392            mov     sp,a
08D2           2393   ;        main.c:635: if(pick==1){
08D2 7401      2394            mov     a,#0x01
08D4 B568C8    2395            cjne    a,_main_pick_1_141,L025085?
08D7 E4        2396            clr     a
08D8 B569C8    2397            cjne    a,(_main_pick_1_141 + 1),L025085?
08DB 8000      2398            sjmp    L025086?
08DD           2399   L025085?:
08DD 8000      2400            sjmp    L025002?
08DF           2401   L025086?:
08DF           2402   ;        main.c:636: servo_pick();
08DF 120000    2403            lcall   _servo_pick
08E2           2404   ;        main.c:637: pick = 0;
08E2 E4        2405            clr     a
08E3 F568      2406            mov     _main_pick_1_141,a
08E5 F569      2407            mov     (_main_pick_1_141 + 1),a
08E7           2408   L025002?:
08E7           2409   ;        main.c:640: if(auto_mode){
08E7 E5B8      2410            mov     a,_main_auto_mode_1_141
08E9 45B9      2411            orl     a,(_main_auto_mode_1_141 + 1)
08EB 6000      2412            jz      L025004?
08ED           2413   ;        main.c:641: Auto_mode_slave();
08ED 120000    2414            lcall   _Auto_mode_slave
08F0           2415   L025004?:
08F0           2416   ;        main.c:645: vx_error = abs(vx-vx_thres)*100/vx_thres; 
08F0 E5D8      2417            mov     a,_main_vx_1_141
08F2 C3        2418            clr     c
08F3 9598      2419            subb    a,_vx_thres
08F5 F582      2420            mov     dpl,a
08F7 E5D9      2421            mov     a,(_main_vx_1_141 + 1)
08F9 9599      2422            subb    a,(_vx_thres + 1)
08FB F583      2423            mov     dph,a
08FD 120000    2424            lcall   _abs
0900 858200    2425            mov     __mulint_PARM_2,dpl
0903 858301    2426            mov     (__mulint_PARM_2 + 1),dph
0906 900064    2427            mov     dptr,#0x0064
0909 120000    2428            lcall   __mulint
090C 859800    2429            mov     __divsint_PARM_2,_vx_thres
090F 859901    2430            mov     (__divsint_PARM_2 + 1),(_vx_thres + 1)
0912 120000    2431            lcall   __divsint
0915 8582A8    2432            mov     _main_vx_error_1_141,dpl
0918 8583A9    2433            mov     (_main_vx_error_1_141 + 1),dph
091B           2434   ;        main.c:646: vy_error = abs(vy-vy_thres)*100/vy_thres; 
091B E518      2435            mov     a,_main_vy_1_141
091D C3        2436            clr     c
091E 9558      2437            subb    a,_vy_thres
0920 F582      2438            mov     dpl,a
0922 E519      2439            mov     a,(_main_vy_1_141 + 1)
0924 9559      2440            subb    a,(_vy_thres + 1)
0926 F583      2441            mov     dph,a
0928 120000    2442            lcall   _abs
092B 858200    2443            mov     __mulint_PARM_2,dpl
092E 858301    2444            mov     (__mulint_PARM_2 + 1),dph
0931 900064    2445            mov     dptr,#0x0064
0934 120000    2446            lcall   __mulint
0937 855800    2447            mov     __divsint_PARM_2,_vy_thres
093A 855901    2448            mov     (__divsint_PARM_2 + 1),(_vy_thres + 1)
093D 120000    2449            lcall   __divsint
0940 8582F8    2450            mov     _main_vy_error_1_141,dpl
0943 8583F9    2451            mov     (_main_vy_error_1_141 + 1),dph
0946           2452   ;        main.c:647: vx_err = vx-vx_thres; 
0946 E5D8      2453            mov     a,_main_vx_1_141
0948 C3        2454            clr     c
0949 9598      2455            subb    a,_vx_thres
094B F548      2456            mov     _main_vx_err_1_141,a
094D E5D9      2457            mov     a,(_main_vx_1_141 + 1)
094F 9599      2458            subb    a,(_vx_thres + 1)
0951 F549      2459            mov     (_main_vx_err_1_141 + 1),a
0953           2460   ;        main.c:648: vy_err = vy-vy_thres; 
0953 E518      2461            mov     a,_main_vy_1_141
0955 C3        2462            clr     c
0956 9558      2463            subb    a,_vy_thres
0958 F598      2464            mov     _main_vy_err_1_141,a
095A E519      2465            mov     a,(_main_vy_1_141 + 1)
095C 9559      2466            subb    a,(_vy_thres + 1)
095E F599      2467            mov     (_main_vy_err_1_141 + 1),a
0960           2468   ;        main.c:649: pwm_left = 0; 
0960 751800    2469            mov     _pwm_left,#0x00
0963           2470   ;        main.c:650: pwm_right = 0; 
0963 75D800    2471            mov     _pwm_right,#0x00
0966           2472   ;        main.c:652: if ((vy_error>5) && (vx_error<5)){
0966 C3        2473            clr     c
0967 7405      2474            mov     a,#0x05
0969 95F8      2475            subb    a,_main_vy_error_1_141
096B E4        2476            clr     a
096C 6480      2477            xrl     a,#0x80
096E 85F9F0    2478            mov     b,(_main_vy_error_1_141 + 1)
0971 63F080    2479            xrl     b,#0x80
0974 95F0      2480            subb    a,b
0976 E4        2481            clr     a
0977 33        2482            rlc     a
0978 FF        2483            mov     r7,a
0979 6000      2484            jz      L025009?
097B C3        2485            clr     c
097C E5A8      2486            mov     a,_main_vx_error_1_141
097E 9405      2487            subb    a,#0x05
0980 E5A9      2488            mov     a,(_main_vx_error_1_141 + 1)
0982 6480      2489            xrl     a,#0x80
0984 9480      2490            subb    a,#0x80
0986 5000      2491            jnc     L025009?
0988           2492   ;        main.c:653: pwm_left = vy_error; 
0988 ADF8      2493            mov     r5,_main_vy_error_1_141
098A 8D18      2494            mov     _pwm_left,r5
098C           2495   ;        main.c:654: pwm_right = vy_error; 
098C 8DD8      2496            mov     _pwm_right,r5
098E           2497   ;        main.c:655: if (vy_err > 0){ //move forward
098E C3        2498            clr     c
098F E4        2499            clr     a
0990 9598      2500            subb    a,_main_vy_err_1_141
0992 E4        2501            clr     a
0993 6480      2502            xrl     a,#0x80
0995 8599F0    2503            mov     b,(_main_vy_err_1_141 + 1)
0998 63F080    2504            xrl     b,#0x80
099B 95F0      2505            subb    a,b
099D 5000      2506            jnc     L025006?
099F           2507   ;        main.c:656: L_motor_dir = 0; 
099F 759800    2508            mov     _L_motor_dir,#0x00
09A2           2509   ;        main.c:657: R_motor_dir = 0; 
09A2 755800    2510            mov     _R_motor_dir,#0x00
09A5 8000      2511            sjmp    L025009?
09A7           2512   L025006?:
09A7           2513   ;        main.c:660: L_motor_dir = 1; 
09A7 759801    2514            mov     _L_motor_dir,#0x01
09AA           2515   ;        main.c:661: R_motor_dir = 1; 
09AA 755801    2516            mov     _R_motor_dir,#0x01
09AD           2517   L025009?:
09AD           2518   ;        main.c:664: if ((vx_error>5)&&(vy_error<5)){
09AD C3        2519            clr     c
09AE 7405      2520            mov     a,#0x05
09B0 95A8      2521            subb    a,_main_vx_error_1_141
09B2 E4        2522            clr     a
09B3 6480      2523            xrl     a,#0x80
09B5 85A9F0    2524            mov     b,(_main_vx_error_1_141 + 1)
09B8 63F080    2525            xrl     b,#0x80
09BB 95F0      2526            subb    a,b
09BD E4        2527            clr     a
09BE 33        2528            rlc     a
09BF FD        2529            mov     r5,a
09C0 6000      2530            jz      L025015?
09C2 C3        2531            clr     c
09C3 E5F8      2532            mov     a,_main_vy_error_1_141
09C5 9405      2533            subb    a,#0x05
09C7 E5F9      2534            mov     a,(_main_vy_error_1_141 + 1)
09C9 6480      2535            xrl     a,#0x80
09CB 9480      2536            subb    a,#0x80
09CD 5000      2537            jnc     L025015?
09CF           2538   ;        main.c:665: pwm_left = vx_error; 
09CF AEA8      2539            mov     r6,_main_vx_error_1_141
09D1 8E18      2540            mov     _pwm_left,r6
09D3           2541   ;        main.c:666: pwm_right = vx_error; 
09D3 8ED8      2542            mov     _pwm_right,r6
09D5           2543   ;        main.c:667: if (vx_err > 0){ //turn right
09D5 C3        2544            clr     c
09D6 E4        2545            clr     a
09D7 9548      2546            subb    a,_main_vx_err_1_141
09D9 E4        2547            clr     a
09DA 6480      2548            xrl     a,#0x80
09DC 8549F0    2549            mov     b,(_main_vx_err_1_141 + 1)
09DF 63F080    2550            xrl     b,#0x80
09E2 95F0      2551            subb    a,b
09E4 5000      2552            jnc     L025012?
09E6           2553   ;        main.c:668: L_motor_dir = 1; 
09E6 759801    2554            mov     _L_motor_dir,#0x01
09E9           2555   ;        main.c:669: R_motor_dir = 0; 
09E9 755800    2556            mov     _R_motor_dir,#0x00
09EC 8000      2557            sjmp    L025015?
09EE           2558   L025012?:
09EE           2559   ;        main.c:672: L_motor_dir = 0; 
09EE 759800    2560            mov     _L_motor_dir,#0x00
09F1           2561   ;        main.c:673: R_motor_dir = 1; 
09F1 755801    2562            mov     _R_motor_dir,#0x01
09F4           2563   L025015?:
09F4           2564   ;        main.c:676: if ((vx_error>5)&&(vy_error)>5){
09F4 ED        2565            mov     a,r5
09F5 7000      2566            jnz     L025094?
09F7 020000    2567            ljmp    L025053?
09FA           2568   L025094?:
09FA EF        2569            mov     a,r7
09FB 7000      2570            jnz     L025095?
09FD 020000    2571            ljmp    L025053?
0A00           2572   L025095?:
0A00           2573   ;        main.c:678: if (vy_err>0){
0A00 C3        2574            clr     c
0A01 E4        2575            clr     a
0A02 9598      2576            subb    a,_main_vy_err_1_141
0A04 E4        2577            clr     a
0A05 6480      2578            xrl     a,#0x80
0A07 8599F0    2579            mov     b,(_main_vy_err_1_141 + 1)
0A0A 63F080    2580            xrl     b,#0x80
0A0D 95F0      2581            subb    a,b
0A0F 4000      2582            jc      L025096?
0A11 020000    2583            ljmp    L025027?
0A14           2584   L025096?:
0A14           2585   ;        main.c:679: L_motor_dir = 0; 
0A14 759800    2586            mov     _L_motor_dir,#0x00
0A17           2587   ;        main.c:680: R_motor_dir = 0; 
0A17 755800    2588            mov     _R_motor_dir,#0x00
0A1A           2589   ;        main.c:682: if (vx_err>0){
0A1A C3        2590            clr     c
0A1B E4        2591            clr     a
0A1C 9548      2592            subb    a,_main_vx_err_1_141
0A1E E4        2593            clr     a
0A1F 6480      2594            xrl     a,#0x80
0A21 8549F0    2595            mov     b,(_main_vx_err_1_141 + 1)
0A24 63F080    2596            xrl     b,#0x80
0A27 95F0      2597            subb    a,b
0A29 4000      2598            jc      L025097?
0A2B 020000    2599            ljmp    L025024?
0A2E           2600   L025097?:
0A2E           2601   ;        main.c:683: if (vy*100<=vy_thres*100/2){
0A2E 851800    2602            mov     __mulint_PARM_2,_main_vy_1_141
0A31 851901    2603            mov     (__mulint_PARM_2 + 1),(_main_vy_1_141 + 1)
0A34 900064    2604            mov     dptr,#0x0064
0A37 120000    2605            lcall   __mulint
0A3A AD82      2606            mov     r5,dpl
0A3C AE83      2607            mov     r6,dph
0A3E 855800    2608            mov     __mulint_PARM_2,_vy_thres
0A41 855901    2609            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0A44 900064    2610            mov     dptr,#0x0064
0A47 C005      2611            push    ar5
0A49 C006      2612            push    ar6
0A4B 120000    2613            lcall   __mulint
0A4E AF82      2614            mov     r7,dpl
0A50 AB83      2615            mov     r3,dph
0A52 750002    2616            mov     __divsint_PARM_2,#0x02
0A55 E4        2617            clr     a
0A56 F501      2618            mov     (__divsint_PARM_2 + 1),a
0A58 8F82      2619            mov     dpl,r7
0A5A 8B83      2620            mov     dph,r3
0A5C 120000    2621            lcall   __divsint
0A5F AB82      2622            mov     r3,dpl
0A61 AC83      2623            mov     r4,dph
0A63 D006      2624            pop     ar6
0A65 D005      2625            pop     ar5
0A67 C3        2626            clr     c
0A68 EB        2627            mov     a,r3
0A69 9D        2628            subb    a,r5
0A6A EC        2629            mov     a,r4
0A6B 6480      2630            xrl     a,#0x80
0A6D 8EF0      2631            mov     b,r6
0A6F 63F080    2632            xrl     b,#0x80
0A72 95F0      2633            subb    a,b
0A74 4000      2634            jc      L025018?
0A76           2635   ;        main.c:684: pwm_left = vy_error; 
0A76 85F818    2636            mov     _pwm_left,_main_vy_error_1_141
0A79           2637   ;        main.c:685: pwm_right = vy_error*100/(vx_error+vy_error);
0A79 85F800    2638            mov     __mulint_PARM_2,_main_vy_error_1_141
0A7C 85F901    2639            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_141 + 1)
0A7F 900064    2640            mov     dptr,#0x0064
0A82 120000    2641            lcall   __mulint
0A85 AB82      2642            mov     r3,dpl
0A87 AC83      2643            mov     r4,dph
0A89 E5F8      2644            mov     a,_main_vy_error_1_141
0A8B 25A8      2645            add     a,_main_vx_error_1_141
0A8D F500      2646            mov     __divsint_PARM_2,a
0A8F E5F9      2647            mov     a,(_main_vy_error_1_141 + 1)
0A91 35A9      2648            addc    a,(_main_vx_error_1_141 + 1)
0A93 F501      2649            mov     (__divsint_PARM_2 + 1),a
0A95 8B82      2650            mov     dpl,r3
0A97 8C83      2651            mov     dph,r4
0A99 120000    2652            lcall   __divsint
0A9C AB82      2653            mov     r3,dpl
0A9E AC83      2654            mov     r4,dph
0AA0 8BD8      2655            mov     _pwm_right,r3
0AA2 020000    2656            ljmp    L025027?
0AA5           2657   L025018?:
0AA5           2658   ;        main.c:688: pwm_left = vx_error; 
0AA5 85A818    2659            mov     _pwm_left,_main_vx_error_1_141
0AA8           2660   ;        main.c:689: pwm_right = vx_error*100/(vx_error+vy_error);
0AA8 85A800    2661            mov     __mulint_PARM_2,_main_vx_error_1_141
0AAB 85A901    2662            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_141 + 1)
0AAE 900064    2663            mov     dptr,#0x0064
0AB1 120000    2664            lcall   __mulint
0AB4 AB82      2665            mov     r3,dpl
0AB6 AC83      2666            mov     r4,dph
0AB8 E5F8      2667            mov     a,_main_vy_error_1_141
0ABA 25A8      2668            add     a,_main_vx_error_1_141
0ABC F500      2669            mov     __divsint_PARM_2,a
0ABE E5F9      2670            mov     a,(_main_vy_error_1_141 + 1)
0AC0 35A9      2671            addc    a,(_main_vx_error_1_141 + 1)
0AC2 F501      2672            mov     (__divsint_PARM_2 + 1),a
0AC4 8B82      2673            mov     dpl,r3
0AC6 8C83      2674            mov     dph,r4
0AC8 120000    2675            lcall   __divsint
0ACB AB82      2676            mov     r3,dpl
0ACD AC83      2677            mov     r4,dph
0ACF 8BD8      2678            mov     _pwm_right,r3
0AD1 020000    2679            ljmp    L025027?
0AD4           2680   L025024?:
0AD4           2681   ;        main.c:694: if (vy*100<=vy_thres*100/2){
0AD4 851800    2682            mov     __mulint_PARM_2,_main_vy_1_141
0AD7 851901    2683            mov     (__mulint_PARM_2 + 1),(_main_vy_1_141 + 1)
0ADA 900064    2684            mov     dptr,#0x0064
0ADD 120000    2685            lcall   __mulint
0AE0 AB82      2686            mov     r3,dpl
0AE2 AC83      2687            mov     r4,dph
0AE4 855800    2688            mov     __mulint_PARM_2,_vy_thres
0AE7 855901    2689            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0AEA 900064    2690            mov     dptr,#0x0064
0AED C003      2691            push    ar3
0AEF C004      2692            push    ar4
0AF1 120000    2693            lcall   __mulint
0AF4 AD82      2694            mov     r5,dpl
0AF6 AE83      2695            mov     r6,dph
0AF8 750002    2696            mov     __divsint_PARM_2,#0x02
0AFB E4        2697            clr     a
0AFC F501      2698            mov     (__divsint_PARM_2 + 1),a
0AFE 8D82      2699            mov     dpl,r5
0B00 8E83      2700            mov     dph,r6
0B02 120000    2701            lcall   __divsint
0B05 AD82      2702            mov     r5,dpl
0B07 AE83      2703            mov     r6,dph
0B09 D004      2704            pop     ar4
0B0B D003      2705            pop     ar3
0B0D C3        2706            clr     c
0B0E ED        2707            mov     a,r5
0B0F 9B        2708            subb    a,r3
0B10 EE        2709            mov     a,r6
0B11 6480      2710            xrl     a,#0x80
0B13 8CF0      2711            mov     b,r4
0B15 63F080    2712            xrl     b,#0x80
0B18 95F0      2713            subb    a,b
0B1A 4000      2714            jc      L025021?
0B1C           2715   ;        main.c:695: pwm_left = vy_error*100/(vx_error+vy_error);
0B1C 85F800    2716            mov     __mulint_PARM_2,_main_vy_error_1_141
0B1F 85F901    2717            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_141 + 1)
0B22 900064    2718            mov     dptr,#0x0064
0B25 120000    2719            lcall   __mulint
0B28 AB82      2720            mov     r3,dpl
0B2A AC83      2721            mov     r4,dph
0B2C E5F8      2722            mov     a,_main_vy_error_1_141
0B2E 25A8      2723            add     a,_main_vx_error_1_141
0B30 F500      2724            mov     __divsint_PARM_2,a
0B32 E5F9      2725            mov     a,(_main_vy_error_1_141 + 1)
0B34 35A9      2726            addc    a,(_main_vx_error_1_141 + 1)
0B36 F501      2727            mov     (__divsint_PARM_2 + 1),a
0B38 8B82      2728            mov     dpl,r3
0B3A 8C83      2729            mov     dph,r4
0B3C 120000    2730            lcall   __divsint
0B3F AB82      2731            mov     r3,dpl
0B41 AC83      2732            mov     r4,dph
0B43 8B18      2733            mov     _pwm_left,r3
0B45           2734   ;        main.c:696: pwm_right = vy_error; 
0B45 85F8D8    2735            mov     _pwm_right,_main_vy_error_1_141
0B48 8000      2736            sjmp    L025027?
0B4A           2737   L025021?:
0B4A           2738   ;        main.c:699: pwm_left = vx_error*100/(vx_error+vy_error);
0B4A 85A800    2739            mov     __mulint_PARM_2,_main_vx_error_1_141
0B4D 85A901    2740            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_141 + 1)
0B50 900064    2741            mov     dptr,#0x0064
0B53 120000    2742            lcall   __mulint
0B56 AB82      2743            mov     r3,dpl
0B58 AC83      2744            mov     r4,dph
0B5A E5F8      2745            mov     a,_main_vy_error_1_141
0B5C 25A8      2746            add     a,_main_vx_error_1_141
0B5E F500      2747            mov     __divsint_PARM_2,a
0B60 E5F9      2748            mov     a,(_main_vy_error_1_141 + 1)
0B62 35A9      2749            addc    a,(_main_vx_error_1_141 + 1)
0B64 F501      2750            mov     (__divsint_PARM_2 + 1),a
0B66 8B82      2751            mov     dpl,r3
0B68 8C83      2752            mov     dph,r4
0B6A 120000    2753            lcall   __divsint
0B6D AB82      2754            mov     r3,dpl
0B6F AC83      2755            mov     r4,dph
0B71 8B18      2756            mov     _pwm_left,r3
0B73           2757   ;        main.c:700: pwm_right = vx_error; 
0B73 85A8D8    2758            mov     _pwm_right,_main_vx_error_1_141
0B76           2759   L025027?:
0B76           2760   ;        main.c:705: if (vy_err<0){
0B76 E599      2761            mov     a,(_main_vy_err_1_141 + 1)
0B78 20E718    2762            jb      acc.7,L025100?
0B7B 020000    2763            ljmp    L025053?
0B7E           2764   L025100?:
0B7E           2765   ;        main.c:706: L_motor_dir = 1; 
0B7E 759801    2766            mov     _L_motor_dir,#0x01
0B81           2767   ;        main.c:707: R_motor_dir = 1; 
0B81 755801    2768            mov     _R_motor_dir,#0x01
0B84           2769   ;        main.c:709: if (vx_err>0){
0B84 C3        2770            clr     c
0B85 E4        2771            clr     a
0B86 9548      2772            subb    a,_main_vx_err_1_141
0B88 E4        2773            clr     a
0B89 6480      2774            xrl     a,#0x80
0B8B 8549F0    2775            mov     b,(_main_vx_err_1_141 + 1)
0B8E 63F080    2776            xrl     b,#0x80
0B91 95F0      2777            subb    a,b
0B93 4000      2778            jc      L025101?
0B95 020000    2779            ljmp    L025035?
0B98           2780   L025101?:
0B98           2781   ;        main.c:710: if (vy*100<=vy_thres*100/2){
0B98 851800    2782            mov     __mulint_PARM_2,_main_vy_1_141
0B9B 851901    2783            mov     (__mulint_PARM_2 + 1),(_main_vy_1_141 + 1)
0B9E 900064    2784            mov     dptr,#0x0064
0BA1 120000    2785            lcall   __mulint
0BA4 AB82      2786            mov     r3,dpl
0BA6 AC83      2787            mov     r4,dph
0BA8 855800    2788            mov     __mulint_PARM_2,_vy_thres
0BAB 855901    2789            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0BAE 900064    2790            mov     dptr,#0x0064
0BB1 C003      2791            push    ar3
0BB3 C004      2792            push    ar4
0BB5 120000    2793            lcall   __mulint
0BB8 AD82      2794            mov     r5,dpl
0BBA AE83      2795            mov     r6,dph
0BBC 750002    2796            mov     __divsint_PARM_2,#0x02
0BBF E4        2797            clr     a
0BC0 F501      2798            mov     (__divsint_PARM_2 + 1),a
0BC2 8D82      2799            mov     dpl,r5
0BC4 8E83      2800            mov     dph,r6
0BC6 120000    2801            lcall   __divsint
0BC9 AD82      2802            mov     r5,dpl
0BCB AE83      2803            mov     r6,dph
0BCD D004      2804            pop     ar4
0BCF D003      2805            pop     ar3
0BD1 C3        2806            clr     c
0BD2 ED        2807            mov     a,r5
0BD3 9B        2808            subb    a,r3
0BD4 EE        2809            mov     a,r6
0BD5 6480      2810            xrl     a,#0x80
0BD7 8CF0      2811            mov     b,r4
0BD9 63F080    2812            xrl     b,#0x80
0BDC 95F0      2813            subb    a,b
0BDE 4000      2814            jc      L025029?
0BE0           2815   ;        main.c:711: pwm_left = vy_error; 
0BE0 85F818    2816            mov     _pwm_left,_main_vy_error_1_141
0BE3           2817   ;        main.c:712: pwm_right = vy_error*100/(vx_error+vy_error);
0BE3 85F800    2818            mov     __mulint_PARM_2,_main_vy_error_1_141
0BE6 85F901    2819            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_141 + 1)
0BE9 900064    2820            mov     dptr,#0x0064
0BEC 120000    2821            lcall   __mulint
0BEF AB82      2822            mov     r3,dpl
0BF1 AC83      2823            mov     r4,dph
0BF3 E5F8      2824            mov     a,_main_vy_error_1_141
0BF5 25A8      2825            add     a,_main_vx_error_1_141
0BF7 F500      2826            mov     __divsint_PARM_2,a
0BF9 E5F9      2827            mov     a,(_main_vy_error_1_141 + 1)
0BFB 35A9      2828            addc    a,(_main_vx_error_1_141 + 1)
0BFD F501      2829            mov     (__divsint_PARM_2 + 1),a
0BFF 8B82      2830            mov     dpl,r3
0C01 8C83      2831            mov     dph,r4
0C03 120000    2832            lcall   __divsint
0C06 AB82      2833            mov     r3,dpl
0C08 AC83      2834            mov     r4,dph
0C0A 8BD8      2835            mov     _pwm_right,r3
0C0C 020000    2836            ljmp    L025053?
0C0F           2837   L025029?:
0C0F           2838   ;        main.c:715: pwm_left = vx_error; 
0C0F 85A818    2839            mov     _pwm_left,_main_vx_error_1_141
0C12           2840   ;        main.c:716: pwm_right = vx_error*100/(vx_error+vy_error);
0C12 85A800    2841            mov     __mulint_PARM_2,_main_vx_error_1_141
0C15 85A901    2842            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_141 + 1)
0C18 900064    2843            mov     dptr,#0x0064
0C1B 120000    2844            lcall   __mulint
0C1E AB82      2845            mov     r3,dpl
0C20 AC83      2846            mov     r4,dph
0C22 E5F8      2847            mov     a,_main_vy_error_1_141
0C24 25A8      2848            add     a,_main_vx_error_1_141
0C26 F500      2849            mov     __divsint_PARM_2,a
0C28 E5F9      2850            mov     a,(_main_vy_error_1_141 + 1)
0C2A 35A9      2851            addc    a,(_main_vx_error_1_141 + 1)
0C2C F501      2852            mov     (__divsint_PARM_2 + 1),a
0C2E 8B82      2853            mov     dpl,r3
0C30 8C83      2854            mov     dph,r4
0C32 120000    2855            lcall   __divsint
0C35 AB82      2856            mov     r3,dpl
0C37 AC83      2857            mov     r4,dph
0C39 8BD8      2858            mov     _pwm_right,r3
0C3B 020000    2859            ljmp    L025053?
0C3E           2860   L025035?:
0C3E           2861   ;        main.c:721: if (vy*100<=vy_thres*100/2){
0C3E 851800    2862            mov     __mulint_PARM_2,_main_vy_1_141
0C41 851901    2863            mov     (__mulint_PARM_2 + 1),(_main_vy_1_141 + 1)
0C44 900064    2864            mov     dptr,#0x0064
0C47 120000    2865            lcall   __mulint
0C4A AB82      2866            mov     r3,dpl
0C4C AC83      2867            mov     r4,dph
0C4E 855800    2868            mov     __mulint_PARM_2,_vy_thres
0C51 855901    2869            mov     (__mulint_PARM_2 + 1),(_vy_thres + 1)
0C54 900064    2870            mov     dptr,#0x0064
0C57 C003      2871            push    ar3
0C59 C004      2872            push    ar4
0C5B 120000    2873            lcall   __mulint
0C5E AD82      2874            mov     r5,dpl
0C60 AE83      2875            mov     r6,dph
0C62 750002    2876            mov     __divsint_PARM_2,#0x02
0C65 E4        2877            clr     a
0C66 F501      2878            mov     (__divsint_PARM_2 + 1),a
0C68 8D82      2879            mov     dpl,r5
0C6A 8E83      2880            mov     dph,r6
0C6C 120000    2881            lcall   __divsint
0C6F AD82      2882            mov     r5,dpl
0C71 AE83      2883            mov     r6,dph
0C73 D004      2884            pop     ar4
0C75 D003      2885            pop     ar3
0C77 C3        2886            clr     c
0C78 ED        2887            mov     a,r5
0C79 9B        2888            subb    a,r3
0C7A EE        2889            mov     a,r6
0C7B 6480      2890            xrl     a,#0x80
0C7D 8CF0      2891            mov     b,r4
0C7F 63F080    2892            xrl     b,#0x80
0C82 95F0      2893            subb    a,b
0C84 4000      2894            jc      L025032?
0C86           2895   ;        main.c:722: pwm_left = vy_error*100/(vx_error+vy_error);
0C86 85F800    2896            mov     __mulint_PARM_2,_main_vy_error_1_141
0C89 85F901    2897            mov     (__mulint_PARM_2 + 1),(_main_vy_error_1_141 + 1)
0C8C 900064    2898            mov     dptr,#0x0064
0C8F 120000    2899            lcall   __mulint
0C92 AB82      2900            mov     r3,dpl
0C94 AC83      2901            mov     r4,dph
0C96 E5F8      2902            mov     a,_main_vy_error_1_141
0C98 25A8      2903            add     a,_main_vx_error_1_141
0C9A F500      2904            mov     __divsint_PARM_2,a
0C9C E5F9      2905            mov     a,(_main_vy_error_1_141 + 1)
0C9E 35A9      2906            addc    a,(_main_vx_error_1_141 + 1)
0CA0 F501      2907            mov     (__divsint_PARM_2 + 1),a
0CA2 8B82      2908            mov     dpl,r3
0CA4 8C83      2909            mov     dph,r4
0CA6 120000    2910            lcall   __divsint
0CA9 AB82      2911            mov     r3,dpl
0CAB AC83      2912            mov     r4,dph
0CAD 8B18      2913            mov     _pwm_left,r3
0CAF           2914   ;        main.c:723: pwm_right = vy_error; 
0CAF 85F8D8    2915            mov     _pwm_right,_main_vy_error_1_141
0CB2 020000    2916            ljmp    L025053?
0CB5           2917   L025032?:
0CB5           2918   ;        main.c:726: pwm_left = vx_error*100/(vx_error+vy_error);
0CB5 85A800    2919            mov     __mulint_PARM_2,_main_vx_error_1_141
0CB8 85A901    2920            mov     (__mulint_PARM_2 + 1),(_main_vx_error_1_141 + 1)
0CBB 900064    2921            mov     dptr,#0x0064
0CBE 120000    2922            lcall   __mulint
0CC1 AB82      2923            mov     r3,dpl
0CC3 AC83      2924            mov     r4,dph
0CC5 E5F8      2925            mov     a,_main_vy_error_1_141
0CC7 25A8      2926            add     a,_main_vx_error_1_141
0CC9 F500      2927            mov     __divsint_PARM_2,a
0CCB E5F9      2928            mov     a,(_main_vy_error_1_141 + 1)
0CCD 35A9      2929            addc    a,(_main_vx_error_1_141 + 1)
0CCF F501      2930            mov     (__divsint_PARM_2 + 1),a
0CD1 8B82      2931            mov     dpl,r3
0CD3 8C83      2932            mov     dph,r4
0CD5 120000    2933            lcall   __divsint
0CD8 AB82      2934            mov     r3,dpl
0CDA AC83      2935            mov     r4,dph
0CDC 8B18      2936            mov     _pwm_left,r3
0CDE           2937   ;        main.c:727: pwm_right = vx_error; 
0CDE 85A8D8    2938            mov     _pwm_right,_main_vx_error_1_141
0CE1 020000    2939            ljmp    L025053?
0CE4           2940   L025043?:
0CE4           2941   ;        main.c:735: printf("*** BAD MESSAGE ***(%d): %s\r\n", buff,strlen(buff));
0CE4 904558    2942            mov     dptr,#_buff
0CE7 75F040    2943            mov     b,#0x40
0CEA 120000    2944            lcall   _strlen
0CED AB82      2945            mov     r3,dpl
0CEF AC83      2946            mov     r4,dph
0CF1 C003      2947            push    ar3
0CF3 C004      2948            push    ar4
0CF5 7458      2949            mov     a,#_buff
0CF7 C0E0      2950            push    acc
0CF9 7445      2951            mov     a,#(_buff >> 8)
0CFB C0E0      2952            push    acc
0CFD 7440      2953            mov     a,#0x40
0CFF C0E0      2954            push    acc
0D01 74C8      2955            mov     a,#__str_4
0D03 C0E0      2956            push    acc
0D05 74D5      2957            mov     a,#(__str_4 >> 8)
0D07 C0E0      2958            push    acc
0D09 7480      2959            mov     a,#0x80
0D0B C0E0      2960            push    acc
0D0D 120000    2961            lcall   _printf
0D10 E581      2962            mov     a,sp
0D12 24F8      2963            add     a,#0xf8
0D14 F581      2964            mov     sp,a
0D16 020000    2965            ljmp    L025053?
0D19           2966   L025048?:
0D19           2967   ;        main.c:738: else if(c=='@') // Master wants slave data
0D19 BA4058    2968            cjne    r2,#0x40,L025104?
0D1C 8000      2969            sjmp    L025105?
0D1E           2970   L025104?:
0D1E 020000    2971            ljmp    L025053?
0D21           2972   L025105?:
0D21           2973   ;        main.c:740: sprintf(buff, "%04ld\n", freq100);
0D21 C098      2974            push    _freq100
0D23 C099      2975            push    (_freq100 + 1)
0D25 C09A      2976            push    (_freq100 + 2)
0D27 C09B      2977            push    (_freq100 + 3)
0D29 74D8      2978            mov     a,#__str_17
0D2B C0E0      2979            push    acc
0D2D 74E2      2980            mov     a,#(__str_17 >> 8)
0D2F C0E0      2981            push    acc
0D31 7480      2982            mov     a,#0x80
0D33 C0E0      2983            push    acc
0D35 7458      2984            mov     a,#_buff
0D37 C0E0      2985            push    acc
0D39 7445      2986            mov     a,#(_buff >> 8)
0D3B C0E0      2987            push    acc
0D3D 7440      2988            mov     a,#0x40
0D3F C0E0      2989            push    acc
0D41 120000    2990            lcall   _sprintf
0D44 E581      2991            mov     a,sp
0D46 24F6      2992            add     a,#0xf6
0D48 F581      2993            mov     sp,a
0D4A           2994   ;        main.c:741: waitms(5); // The radio seems to need this delay...
0D4A 900005    2995            mov     dptr,#0x0005
0D4D 120000    2996            lcall   _waitms
0D50           2997   ;        main.c:742: sendstr1(buff);
0D50 904558    2998            mov     dptr,#_buff
0D53 75F040    2999            mov     b,#0x40
0D56 120000    3000            lcall   _sendstr1
0D59 020000    3001            ljmp    L025053?
0D5C           3002            rseg R_CSEG
0D5C           3003   
0000           3004            rseg R_XINIT
0000           3005   
0000           3006            rseg R_CONST
0000           3007   __str_0:
0000 436F6D6D  3008            db 'Command: %s'
     616E643A
     202573
000B 00        3009            db 0x00
000C           3010   __str_1:
000C 52657370  3011            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        3012            db 0x0D
0019 0A        3013            db 0x0A
001A 00        3014            db 0x00
001B           3015   __str_2:
001B 41542B44  3016            db 'AT+DVID0000'
     56494430
     303030
0026 0D        3017            db 0x0D
0027 0A        3018            db 0x0A
0028 00        3019            db 0x00
0029           3020   __str_3:
0029 4D617374  3021            db 'Master says: %s'
     65722073
     6179733A
     202573
0038 0D        3022            db 0x0D
0039 0A        3023            db 0x0A
003A 00        3024            db 0x00
003B           3025   __str_4:
003B 2A2A2A20  3026            db '*** BAD MESSAGE ***(%d): %s'
     42414420
     4D455353
     41474520
     2A2A2A28
     2564293A
     202573
0056 0D        3027            db 0x0D
0057 0A        3028            db 0x0A
0058 00        3029            db 0x00
0059           3030   __str_5:
0059 25303264  3031            db '%02d'
005D 0A        3032            db 0x0A
005E 00        3033            db 0x00
005F           3034   __str_6:
005F 0D        3035            db 0x0D
0060 0A        3036            db 0x0A
0061 45464D38  3037            db 'EFM8LB12 JDY-40 Slave Test.'
     4C423132
     204A4459
     2D343020
     536C6176
     65205465
     73742E
007C 0D        3038            db 0x0D
007D 0A        3039            db 0x0A
007E 00        3040            db 0x00
007F           3041   __str_7:
007F 41542B56  3042            db 'AT+VER'
     4552
0085 0D        3043            db 0x0D
0086 0A        3044            db 0x0A
0087 00        3045            db 0x00
0088           3046   __str_8:
0088 41542B42  3047            db 'AT+BAUD'
     415544
008F 0D        3048            db 0x0D
0090 0A        3049            db 0x0A
0091 00        3050            db 0x00
0092           3051   __str_9:
0092 41542B52  3052            db 'AT+RFID'
     464944
0099 0D        3053            db 0x0D
009A 0A        3054            db 0x0A
009B 00        3055            db 0x00
009C           3056   __str_10:
009C 41542B44  3057            db 'AT+DVID'
     564944
00A3 0D        3058            db 0x0D
00A4 0A        3059            db 0x0A
00A5 00        3060            db 0x00
00A6           3061   __str_11:
00A6 41542B52  3062            db 'AT+RFC002'
     46433030
     32
00AF 0D        3063            db 0x0D
00B0 0A        3064            db 0x0A
00B1 00        3065            db 0x00
00B2           3066   __str_12:
00B2 41542B50  3067            db 'AT+POWE'
     4F5745
00B9 0D        3068            db 0x0D
00BA 0A        3069            db 0x0A
00BB 00        3070            db 0x00
00BC           3071   __str_13:
00BC 41542B43  3072            db 'AT+CLSS'
     4C5353
00C3 0D        3073            db 0x0D
00C4 0A        3074            db 0x0A
00C5 00        3075            db 0x00
00C6           3076   __str_14:
00C6 41542B44  3077            db 'AT+DVIDEFEF'
     56494445
     464546
00D1 0D        3078            db 0x0D
00D2 0A        3079            db 0x0A
00D3 00        3080            db 0x00
00D4           3081   __str_15:
00D4 25303364  3082            db '%03d,%03d,%01d,%d01'
     2C253033
     642C2530
     31642C25
     643031
00E7 00        3083            db 0x00
00E8           3084   __str_16:
00E8 4A6F7973  3085            db 'Joystick Received: Vx = %03d, Vy = %03d, Order = %01d, Auto '
     7469636B
     20526563
     65697665
     643A2056
     78203D20
     25303364
     2C205679
     203D2025
     3033642C
     204F7264
     6572203D
     20253031
     642C2041
     75746F20
0124 3D202530  3086            db '= %01d'
     3164
012A 0D        3087            db 0x0D
012B 0A        3088            db 0x0A
012C 00        3089            db 0x00
012D           3090   __str_17:
012D 2530346C  3091            db '%04ld'
     64
0132 0A        3092            db 0x0A
0133 00        3093            db 0x00
0134           3094   
0096           3095            CSEG
0096           3096   
0096           3097   end
