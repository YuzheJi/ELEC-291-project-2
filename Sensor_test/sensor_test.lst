0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Sat Mar 29 15:32:47 2025
0000              5   ;--------------------------------------------------------
                  5   $name sensor_test
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _BMM150_Read_Data
0000             29            public _BMM150_compensate_y
0000             30            public _BMM150_compensate_x
0000             31            public _BMM150_Init
0000             32            public _BMM150_Read_Trim_Registers
0000             33            public _SPI_write
0000             34            public _SPI_read_block
0000             35            public _SPI_read
0000             36            public _SPI_transfer
0000             37            public _waitms
0000             38            public _Timer3us
0000             39            public _Set_Pin_Output
0000             40            public __c51_external_startup
0000             41            public _BMM150_Read_Data_PARM_2
0000             42            public _BMM150_compensate_y_PARM_2
0000             43            public _BMM150_compensate_x_PARM_2
0000             44            public _SPI_write_PARM_2
0000             45            public _SPI_read_block_PARM_3
0000             46            public _SPI_read_block_PARM_2
0000             47            public _dig_xyz1
0000             48            public _dig_xy2
0000             49            public _dig_xy1
0000             50            public _dig_z4
0000             51            public _dig_z3
0000             52            public _dig_z2
0000             53            public _dig_z1
0000             54            public _dig_y2
0000             55            public _dig_y1
0000             56            public _dig_x2
0000             57            public _dig_x1
0000             58   ;--------------------------------------------------------
0000             59   ; Special Function Registers
0000             60   ;--------------------------------------------------------
0000             61   _ACC            DATA 0xe0
0000             62   _ADC0ASAH       DATA 0xb6
0000             63   _ADC0ASAL       DATA 0xb5
0000             64   _ADC0ASCF       DATA 0xa1
0000             65   _ADC0ASCT       DATA 0xc7
0000             66   _ADC0CF0        DATA 0xbc
0000             67   _ADC0CF1        DATA 0xb9
0000             68   _ADC0CF2        DATA 0xdf
0000             69   _ADC0CN0        DATA 0xe8
0000             70   _ADC0CN1        DATA 0xb2
0000             71   _ADC0CN2        DATA 0xb3
0000             72   _ADC0GTH        DATA 0xc4
0000             73   _ADC0GTL        DATA 0xc3
0000             74   _ADC0H          DATA 0xbe
0000             75   _ADC0L          DATA 0xbd
0000             76   _ADC0LTH        DATA 0xc6
0000             77   _ADC0LTL        DATA 0xc5
0000             78   _ADC0MX         DATA 0xbb
0000             79   _B              DATA 0xf0
0000             80   _CKCON0         DATA 0x8e
0000             81   _CKCON1         DATA 0xa6
0000             82   _CLEN0          DATA 0xc6
0000             83   _CLIE0          DATA 0xc7
0000             84   _CLIF0          DATA 0xe8
0000             85   _CLKSEL         DATA 0xa9
0000             86   _CLOUT0         DATA 0xd1
0000             87   _CLU0CF         DATA 0xb1
0000             88   _CLU0FN         DATA 0xaf
0000             89   _CLU0MX         DATA 0x84
0000             90   _CLU1CF         DATA 0xb3
0000             91   _CLU1FN         DATA 0xb2
0000             92   _CLU1MX         DATA 0x85
0000             93   _CLU2CF         DATA 0xb6
0000             94   _CLU2FN         DATA 0xb5
0000             95   _CLU2MX         DATA 0x91
0000             96   _CLU3CF         DATA 0xbf
0000             97   _CLU3FN         DATA 0xbe
0000             98   _CLU3MX         DATA 0xae
0000             99   _CMP0CN0        DATA 0x9b
0000            100   _CMP0CN1        DATA 0x99
0000            101   _CMP0MD         DATA 0x9d
0000            102   _CMP0MX         DATA 0x9f
0000            103   _CMP1CN0        DATA 0xbf
0000            104   _CMP1CN1        DATA 0xac
0000            105   _CMP1MD         DATA 0xab
0000            106   _CMP1MX         DATA 0xaa
0000            107   _CRC0CN0        DATA 0xce
0000            108   _CRC0CN1        DATA 0x86
0000            109   _CRC0CNT        DATA 0xd3
0000            110   _CRC0DAT        DATA 0xcb
0000            111   _CRC0FLIP       DATA 0xcf
0000            112   _CRC0IN         DATA 0xca
0000            113   _CRC0ST         DATA 0xd2
0000            114   _DAC0CF0        DATA 0x91
0000            115   _DAC0CF1        DATA 0x92
0000            116   _DAC0H          DATA 0x85
0000            117   _DAC0L          DATA 0x84
0000            118   _DAC1CF0        DATA 0x93
0000            119   _DAC1CF1        DATA 0x94
0000            120   _DAC1H          DATA 0x8a
0000            121   _DAC1L          DATA 0x89
0000            122   _DAC2CF0        DATA 0x95
0000            123   _DAC2CF1        DATA 0x96
0000            124   _DAC2H          DATA 0x8c
0000            125   _DAC2L          DATA 0x8b
0000            126   _DAC3CF0        DATA 0x9a
0000            127   _DAC3CF1        DATA 0x9c
0000            128   _DAC3H          DATA 0x8e
0000            129   _DAC3L          DATA 0x8d
0000            130   _DACGCF0        DATA 0x88
0000            131   _DACGCF1        DATA 0x98
0000            132   _DACGCF2        DATA 0xa2
0000            133   _DERIVID        DATA 0xad
0000            134   _DEVICEID       DATA 0xb5
0000            135   _DPH            DATA 0x83
0000            136   _DPL            DATA 0x82
0000            137   _EIE1           DATA 0xe6
0000            138   _EIE2           DATA 0xf3
0000            139   _EIP1           DATA 0xbb
0000            140   _EIP1H          DATA 0xee
0000            141   _EIP2           DATA 0xed
0000            142   _EIP2H          DATA 0xf6
0000            143   _EMI0CN         DATA 0xe7
0000            144   _FLKEY          DATA 0xb7
0000            145   _HFO0CAL        DATA 0xc7
0000            146   _HFO1CAL        DATA 0xd6
0000            147   _HFOCN          DATA 0xef
0000            148   _I2C0ADM        DATA 0xff
0000            149   _I2C0CN0        DATA 0xba
0000            150   _I2C0DIN        DATA 0xbc
0000            151   _I2C0DOUT       DATA 0xbb
0000            152   _I2C0FCN0       DATA 0xad
0000            153   _I2C0FCN1       DATA 0xab
0000            154   _I2C0FCT        DATA 0xf5
0000            155   _I2C0SLAD       DATA 0xbd
0000            156   _I2C0STAT       DATA 0xb9
0000            157   _IE             DATA 0xa8
0000            158   _IP             DATA 0xb8
0000            159   _IPH            DATA 0xf2
0000            160   _IT01CF         DATA 0xe4
0000            161   _LFO0CN         DATA 0xb1
0000            162   _P0             DATA 0x80
0000            163   _P0MASK         DATA 0xfe
0000            164   _P0MAT          DATA 0xfd
0000            165   _P0MDIN         DATA 0xf1
0000            166   _P0MDOUT        DATA 0xa4
0000            167   _P0SKIP         DATA 0xd4
0000            168   _P1             DATA 0x90
0000            169   _P1MASK         DATA 0xee
0000            170   _P1MAT          DATA 0xed
0000            171   _P1MDIN         DATA 0xf2
0000            172   _P1MDOUT        DATA 0xa5
0000            173   _P1SKIP         DATA 0xd5
0000            174   _P2             DATA 0xa0
0000            175   _P2MASK         DATA 0xfc
0000            176   _P2MAT          DATA 0xfb
0000            177   _P2MDIN         DATA 0xf3
0000            178   _P2MDOUT        DATA 0xa6
0000            179   _P2SKIP         DATA 0xcc
0000            180   _P3             DATA 0xb0
0000            181   _P3MDIN         DATA 0xf4
0000            182   _P3MDOUT        DATA 0x9c
0000            183   _PCA0CENT       DATA 0x9e
0000            184   _PCA0CLR        DATA 0x9c
0000            185   _PCA0CN0        DATA 0xd8
0000            186   _PCA0CPH0       DATA 0xfc
0000            187   _PCA0CPH1       DATA 0xea
0000            188   _PCA0CPH2       DATA 0xec
0000            189   _PCA0CPH3       DATA 0xf5
0000            190   _PCA0CPH4       DATA 0x85
0000            191   _PCA0CPH5       DATA 0xde
0000            192   _PCA0CPL0       DATA 0xfb
0000            193   _PCA0CPL1       DATA 0xe9
0000            194   _PCA0CPL2       DATA 0xeb
0000            195   _PCA0CPL3       DATA 0xf4
0000            196   _PCA0CPL4       DATA 0x84
0000            197   _PCA0CPL5       DATA 0xdd
0000            198   _PCA0CPM0       DATA 0xda
0000            199   _PCA0CPM1       DATA 0xdb
0000            200   _PCA0CPM2       DATA 0xdc
0000            201   _PCA0CPM3       DATA 0xae
0000            202   _PCA0CPM4       DATA 0xaf
0000            203   _PCA0CPM5       DATA 0xcc
0000            204   _PCA0H          DATA 0xfa
0000            205   _PCA0L          DATA 0xf9
0000            206   _PCA0MD         DATA 0xd9
0000            207   _PCA0POL        DATA 0x96
0000            208   _PCA0PWM        DATA 0xf7
0000            209   _PCON0          DATA 0x87
0000            210   _PCON1          DATA 0xcd
0000            211   _PFE0CN         DATA 0xc1
0000            212   _PRTDRV         DATA 0xf6
0000            213   _PSCTL          DATA 0x8f
0000            214   _PSTAT0         DATA 0xaa
0000            215   _PSW            DATA 0xd0
0000            216   _REF0CN         DATA 0xd1
0000            217   _REG0CN         DATA 0xc9
0000            218   _REVID          DATA 0xb6
0000            219   _RSTSRC         DATA 0xef
0000            220   _SBCON1         DATA 0x94
0000            221   _SBRLH1         DATA 0x96
0000            222   _SBRLL1         DATA 0x95
0000            223   _SBUF           DATA 0x99
0000            224   _SBUF0          DATA 0x99
0000            225   _SBUF1          DATA 0x92
0000            226   _SCON           DATA 0x98
0000            227   _SCON0          DATA 0x98
0000            228   _SCON1          DATA 0xc8
0000            229   _SFRPAGE        DATA 0xa7
0000            230   _SFRPGCN        DATA 0xbc
0000            231   _SFRSTACK       DATA 0xd7
0000            232   _SMB0ADM        DATA 0xd6
0000            233   _SMB0ADR        DATA 0xd7
0000            234   _SMB0CF         DATA 0xc1
0000            235   _SMB0CN0        DATA 0xc0
0000            236   _SMB0DAT        DATA 0xc2
0000            237   _SMB0FCN0       DATA 0xc3
0000            238   _SMB0FCN1       DATA 0xc4
0000            239   _SMB0FCT        DATA 0xef
0000            240   _SMB0RXLN       DATA 0xc5
0000            241   _SMB0TC         DATA 0xac
0000            242   _SMOD1          DATA 0x93
0000            243   _SP             DATA 0x81
0000            244   _SPI0CFG        DATA 0xa1
0000            245   _SPI0CKR        DATA 0xa2
0000            246   _SPI0CN0        DATA 0xf8
0000            247   _SPI0DAT        DATA 0xa3
0000            248   _SPI0FCN0       DATA 0x9a
0000            249   _SPI0FCN1       DATA 0x9b
0000            250   _SPI0FCT        DATA 0xf7
0000            251   _SPI0PCF        DATA 0xdf
0000            252   _TCON           DATA 0x88
0000            253   _TH0            DATA 0x8c
0000            254   _TH1            DATA 0x8d
0000            255   _TL0            DATA 0x8a
0000            256   _TL1            DATA 0x8b
0000            257   _TMOD           DATA 0x89
0000            258   _TMR2CN0        DATA 0xc8
0000            259   _TMR2CN1        DATA 0xfd
0000            260   _TMR2H          DATA 0xcf
0000            261   _TMR2L          DATA 0xce
0000            262   _TMR2RLH        DATA 0xcb
0000            263   _TMR2RLL        DATA 0xca
0000            264   _TMR3CN0        DATA 0x91
0000            265   _TMR3CN1        DATA 0xfe
0000            266   _TMR3H          DATA 0x95
0000            267   _TMR3L          DATA 0x94
0000            268   _TMR3RLH        DATA 0x93
0000            269   _TMR3RLL        DATA 0x92
0000            270   _TMR4CN0        DATA 0x98
0000            271   _TMR4CN1        DATA 0xff
0000            272   _TMR4H          DATA 0xa5
0000            273   _TMR4L          DATA 0xa4
0000            274   _TMR4RLH        DATA 0xa3
0000            275   _TMR4RLL        DATA 0xa2
0000            276   _TMR5CN0        DATA 0xc0
0000            277   _TMR5CN1        DATA 0xf1
0000            278   _TMR5H          DATA 0xd5
0000            279   _TMR5L          DATA 0xd4
0000            280   _TMR5RLH        DATA 0xd3
0000            281   _TMR5RLL        DATA 0xd2
0000            282   _UART0PCF       DATA 0xd9
0000            283   _UART1FCN0      DATA 0x9d
0000            284   _UART1FCN1      DATA 0xd8
0000            285   _UART1FCT       DATA 0xfa
0000            286   _UART1LIN       DATA 0x9e
0000            287   _UART1PCF       DATA 0xda
0000            288   _VDM0CN         DATA 0xff
0000            289   _WDTCN          DATA 0x97
0000            290   _XBR0           DATA 0xe1
0000            291   _XBR1           DATA 0xe2
0000            292   _XBR2           DATA 0xe3
0000            293   _XOSC0CN        DATA 0x86
0000            294   _DPTR           DATA 0x8382
0000            295   _TMR2RL         DATA 0xcbca
0000            296   _TMR3RL         DATA 0x9392
0000            297   _TMR4RL         DATA 0xa3a2
0000            298   _TMR5RL         DATA 0xd3d2
0000            299   _TMR0           DATA 0x8c8a
0000            300   _TMR1           DATA 0x8d8b
0000            301   _TMR2           DATA 0xcfce
0000            302   _TMR3           DATA 0x9594
0000            303   _TMR4           DATA 0xa5a4
0000            304   _TMR5           DATA 0xd5d4
0000            305   _SBRL1          DATA 0x9695
0000            306   _PCA0           DATA 0xfaf9
0000            307   _PCA0CP0        DATA 0xfcfb
0000            308   _PCA0CP1        DATA 0xeae9
0000            309   _PCA0CP2        DATA 0xeceb
0000            310   _PCA0CP3        DATA 0xf5f4
0000            311   _PCA0CP4        DATA 0x8584
0000            312   _PCA0CP5        DATA 0xdedd
0000            313   _ADC0ASA        DATA 0xb6b5
0000            314   _ADC0GT         DATA 0xc4c3
0000            315   _ADC0           DATA 0xbebd
0000            316   _ADC0LT         DATA 0xc6c5
0000            317   _DAC0           DATA 0x8584
0000            318   _DAC1           DATA 0x8a89
0000            319   _DAC2           DATA 0x8c8b
0000            320   _DAC3           DATA 0x8e8d
0000            321   ;--------------------------------------------------------
0000            322   ; special function bits
0000            323   ;--------------------------------------------------------
0000            324   _ACC_0          BIT 0xe0
0000            325   _ACC_1          BIT 0xe1
0000            326   _ACC_2          BIT 0xe2
0000            327   _ACC_3          BIT 0xe3
0000            328   _ACC_4          BIT 0xe4
0000            329   _ACC_5          BIT 0xe5
0000            330   _ACC_6          BIT 0xe6
0000            331   _ACC_7          BIT 0xe7
0000            332   _TEMPE          BIT 0xe8
0000            333   _ADGN0          BIT 0xe9
0000            334   _ADGN1          BIT 0xea
0000            335   _ADWINT         BIT 0xeb
0000            336   _ADBUSY         BIT 0xec
0000            337   _ADINT          BIT 0xed
0000            338   _IPOEN          BIT 0xee
0000            339   _ADEN           BIT 0xef
0000            340   _B_0            BIT 0xf0
0000            341   _B_1            BIT 0xf1
0000            342   _B_2            BIT 0xf2
0000            343   _B_3            BIT 0xf3
0000            344   _B_4            BIT 0xf4
0000            345   _B_5            BIT 0xf5
0000            346   _B_6            BIT 0xf6
0000            347   _B_7            BIT 0xf7
0000            348   _C0FIF          BIT 0xe8
0000            349   _C0RIF          BIT 0xe9
0000            350   _C1FIF          BIT 0xea
0000            351   _C1RIF          BIT 0xeb
0000            352   _C2FIF          BIT 0xec
0000            353   _C2RIF          BIT 0xed
0000            354   _C3FIF          BIT 0xee
0000            355   _C3RIF          BIT 0xef
0000            356   _D1SRC0         BIT 0x88
0000            357   _D1SRC1         BIT 0x89
0000            358   _D1AMEN         BIT 0x8a
0000            359   _D01REFSL       BIT 0x8b
0000            360   _D3SRC0         BIT 0x8c
0000            361   _D3SRC1         BIT 0x8d
0000            362   _D3AMEN         BIT 0x8e
0000            363   _D23REFSL       BIT 0x8f
0000            364   _D0UDIS         BIT 0x98
0000            365   _D1UDIS         BIT 0x99
0000            366   _D2UDIS         BIT 0x9a
0000            367   _D3UDIS         BIT 0x9b
0000            368   _EX0            BIT 0xa8
0000            369   _ET0            BIT 0xa9
0000            370   _EX1            BIT 0xaa
0000            371   _ET1            BIT 0xab
0000            372   _ES0            BIT 0xac
0000            373   _ET2            BIT 0xad
0000            374   _ESPI0          BIT 0xae
0000            375   _EA             BIT 0xaf
0000            376   _PX0            BIT 0xb8
0000            377   _PT0            BIT 0xb9
0000            378   _PX1            BIT 0xba
0000            379   _PT1            BIT 0xbb
0000            380   _PS0            BIT 0xbc
0000            381   _PT2            BIT 0xbd
0000            382   _PSPI0          BIT 0xbe
0000            383   _P0_0           BIT 0x80
0000            384   _P0_1           BIT 0x81
0000            385   _P0_2           BIT 0x82
0000            386   _P0_3           BIT 0x83
0000            387   _P0_4           BIT 0x84
0000            388   _P0_5           BIT 0x85
0000            389   _P0_6           BIT 0x86
0000            390   _P0_7           BIT 0x87
0000            391   _P1_0           BIT 0x90
0000            392   _P1_1           BIT 0x91
0000            393   _P1_2           BIT 0x92
0000            394   _P1_3           BIT 0x93
0000            395   _P1_4           BIT 0x94
0000            396   _P1_5           BIT 0x95
0000            397   _P1_6           BIT 0x96
0000            398   _P1_7           BIT 0x97
0000            399   _P2_0           BIT 0xa0
0000            400   _P2_1           BIT 0xa1
0000            401   _P2_2           BIT 0xa2
0000            402   _P2_3           BIT 0xa3
0000            403   _P2_4           BIT 0xa4
0000            404   _P2_5           BIT 0xa5
0000            405   _P2_6           BIT 0xa6
0000            406   _P3_0           BIT 0xb0
0000            407   _P3_1           BIT 0xb1
0000            408   _P3_2           BIT 0xb2
0000            409   _P3_3           BIT 0xb3
0000            410   _P3_4           BIT 0xb4
0000            411   _P3_7           BIT 0xb7
0000            412   _CCF0           BIT 0xd8
0000            413   _CCF1           BIT 0xd9
0000            414   _CCF2           BIT 0xda
0000            415   _CCF3           BIT 0xdb
0000            416   _CCF4           BIT 0xdc
0000            417   _CCF5           BIT 0xdd
0000            418   _CR             BIT 0xde
0000            419   _CF             BIT 0xdf
0000            420   _PARITY         BIT 0xd0
0000            421   _F1             BIT 0xd1
0000            422   _OV             BIT 0xd2
0000            423   _RS0            BIT 0xd3
0000            424   _RS1            BIT 0xd4
0000            425   _F0             BIT 0xd5
0000            426   _AC             BIT 0xd6
0000            427   _CY             BIT 0xd7
0000            428   _RI             BIT 0x98
0000            429   _TI             BIT 0x99
0000            430   _RB8            BIT 0x9a
0000            431   _TB8            BIT 0x9b
0000            432   _REN            BIT 0x9c
0000            433   _CE             BIT 0x9d
0000            434   _SMODE          BIT 0x9e
0000            435   _RI1            BIT 0xc8
0000            436   _TI1            BIT 0xc9
0000            437   _RBX1           BIT 0xca
0000            438   _TBX1           BIT 0xcb
0000            439   _REN1           BIT 0xcc
0000            440   _PERR1          BIT 0xcd
0000            441   _OVR1           BIT 0xce
0000            442   _SI             BIT 0xc0
0000            443   _ACK            BIT 0xc1
0000            444   _ARBLOST        BIT 0xc2
0000            445   _ACKRQ          BIT 0xc3
0000            446   _STO            BIT 0xc4
0000            447   _STA            BIT 0xc5
0000            448   _TXMODE         BIT 0xc6
0000            449   _MASTER         BIT 0xc7
0000            450   _SPIEN          BIT 0xf8
0000            451   _TXNF           BIT 0xf9
0000            452   _NSSMD0         BIT 0xfa
0000            453   _NSSMD1         BIT 0xfb
0000            454   _RXOVRN         BIT 0xfc
0000            455   _MODF           BIT 0xfd
0000            456   _WCOL           BIT 0xfe
0000            457   _SPIF           BIT 0xff
0000            458   _IT0            BIT 0x88
0000            459   _IE0            BIT 0x89
0000            460   _IT1            BIT 0x8a
0000            461   _IE1            BIT 0x8b
0000            462   _TR0            BIT 0x8c
0000            463   _TF0            BIT 0x8d
0000            464   _TR1            BIT 0x8e
0000            465   _TF1            BIT 0x8f
0000            466   _T2XCLK0        BIT 0xc8
0000            467   _T2XCLK1        BIT 0xc9
0000            468   _TR2            BIT 0xca
0000            469   _T2SPLIT        BIT 0xcb
0000            470   _TF2CEN         BIT 0xcc
0000            471   _TF2LEN         BIT 0xcd
0000            472   _TF2L           BIT 0xce
0000            473   _TF2H           BIT 0xcf
0000            474   _T4XCLK0        BIT 0x98
0000            475   _T4XCLK1        BIT 0x99
0000            476   _TR4            BIT 0x9a
0000            477   _T4SPLIT        BIT 0x9b
0000            478   _TF4CEN         BIT 0x9c
0000            479   _TF4LEN         BIT 0x9d
0000            480   _TF4L           BIT 0x9e
0000            481   _TF4H           BIT 0x9f
0000            482   _T5XCLK0        BIT 0xc0
0000            483   _T5XCLK1        BIT 0xc1
0000            484   _TR5            BIT 0xc2
0000            485   _T5SPLIT        BIT 0xc3
0000            486   _TF5CEN         BIT 0xc4
0000            487   _TF5LEN         BIT 0xc5
0000            488   _TF5L           BIT 0xc6
0000            489   _TF5H           BIT 0xc7
0000            490   _RIE            BIT 0xd8
0000            491   _RXTO0          BIT 0xd9
0000            492   _RXTO1          BIT 0xda
0000            493   _RFRQ           BIT 0xdb
0000            494   _TIE            BIT 0xdc
0000            495   _TXHOLD         BIT 0xdd
0000            496   _TXNF1          BIT 0xde
0000            497   _TFRQ           BIT 0xdf
0000            498   ;--------------------------------------------------------
0000            499   ; overlayable register banks
0000            500   ;--------------------------------------------------------
0000            501            rbank0 segment data overlay
0000            502   ;--------------------------------------------------------
0000            503   ; internal ram data
0000            504   ;--------------------------------------------------------
0000            505            rseg R_DSEG
0000            506   _dig_x1:
0000            507            ds 1
0001            508   _dig_x2:
0001            509            ds 1
0002            510   _dig_y1:
0002            511            ds 1
0003            512   _dig_y2:
0003            513            ds 1
0004            514   _dig_z1:
0004            515            ds 1
0005            516   _dig_z2:
0005            517            ds 1
0006            518   _dig_z3:
0006            519            ds 1
0007            520   _dig_z4:
0007            521            ds 1
0008            522   _dig_xy1:
0008            523            ds 1
0009            524   _dig_xy2:
0009            525            ds 1
000A            526   _dig_xyz1:
000A            527            ds 1
000B            528   _SPI_read_block_PARM_2:
000B            529            ds 3
000E            530   _SPI_read_block_PARM_3:
000E            531            ds 1
000F            532   _SPI_write_PARM_2:
000F            533            ds 1
0010            534   _BMM150_compensate_x_PARM_2:
0010            535            ds 3
0013            536   _BMM150_compensate_x_sloc0_1_0:
0013            537            ds 4
0017            538   _BMM150_compensate_y_PARM_2:
0017            539            ds 3
001A            540   _BMM150_compensate_y_sloc0_1_0:
001A            541            ds 4
001E            542   _BMM150_Read_Data_PARM_2:
001E            543            ds 3
0021            544   _BMM150_Read_Data_mag_x_1_110:
0021            545            ds 3
0024            546   _BMM150_Read_Data_raw_y_msb_1_111:
0024            547            ds 1
0025            548   _BMM150_Read_Data_raw_rhall_msb_1_111:
0025            549            ds 1
0026            550   _BMM150_Read_Data_x_val_1_111:
0026            551            ds 2
0028            552   _BMM150_Read_Data_y_val_1_111:
0028            553            ds 2
002A            554   _BMM150_Read_Data_rhall_val_1_111:
002A            555            ds 2
002C            556   _main_sloc0_1_0:
002C            557            ds 4
0030            558   _main_sloc1_1_0:
0030            559            ds 4
0034            560   ;--------------------------------------------------------
0034            561   ; overlayable items in internal ram 
0034            562   ;--------------------------------------------------------
0000            563            rseg    R_OSEG
0000            564            rseg    R_OSEG
0000            565            rseg    R_OSEG
0000            566   ;--------------------------------------------------------
0000            567   ; indirectly addressable internal ram data
0000            568   ;--------------------------------------------------------
0000            569            rseg R_ISEG
0000            570   ;--------------------------------------------------------
0000            571   ; absolute internal ram data
0000            572   ;--------------------------------------------------------
0000            573            DSEG
0000            574   ;--------------------------------------------------------
0000            575   ; bit data
0000            576   ;--------------------------------------------------------
0000            577            rseg R_BSEG
0000            578   ;--------------------------------------------------------
0000            579   ; paged external ram data
0000            580   ;--------------------------------------------------------
0000            581            rseg R_PSEG
0000            582   ;--------------------------------------------------------
0000            583   ; external ram data
0000            584   ;--------------------------------------------------------
0000            585            rseg R_XSEG
0000            586   _BMM150_Read_Trim_Registers_trim_x1y1_1_84:
0000            587            ds 2
0002            588   _BMM150_Read_Trim_Registers_trim_xyz_data_1_84:
0002            589            ds 4
0006            590   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_84:
0006            591            ds 10
0010            592   _BMM150_compensate_x_retval_1_93:
0010            593            ds 2
0012            594   _BMM150_compensate_x_process_comp_x0_1_93:
0012            595            ds 2
0014            596   _BMM150_compensate_y_retval_1_102:
0014            597            ds 2
0016            598   _BMM150_compensate_y_process_comp_y0_1_102:
0016            599            ds 2
0018            600   _main_mag_x_1_113:
0018            601            ds 2
001A            602   _main_mag_y_1_113:
001A            603            ds 2
001C            604   _main_sum_x_1_113:
001C            605            ds 4
0020            606   _main_sum_y_1_113:
0020            607            ds 4
0024            608   _main_avg_angle_1_113:
0024            609            ds 4
0028            610   _main_smoothed_angle_1_113:
0028            611            ds 4
002C            612   ;--------------------------------------------------------
002C            613   ; absolute external ram data
002C            614   ;--------------------------------------------------------
0000            615            XSEG
0000            616   ;--------------------------------------------------------
0000            617   ; external initialized ram data
0000            618   ;--------------------------------------------------------
0000            619            rseg R_IXSEG
0000            620            rseg R_HOME
0000            621            rseg R_GSINIT
0000            622            rseg R_CSEG
0000            623   ;--------------------------------------------------------
0000            624   ; Reset entry point and interrupt vectors
0000            625   ;--------------------------------------------------------
0000            626            CSEG at 0x0000
0000 020000     627            ljmp    _crt0
0003            628   ;--------------------------------------------------------
0003            629   ; global & static initialisations
0003            630   ;--------------------------------------------------------
0000            631            rseg R_HOME
0000            632            rseg R_GSINIT
0000            633            rseg R_GSINIT
0000            634   ;--------------------------------------------------------
0000            635   ; data variables initialization
0000            636   ;--------------------------------------------------------
0000            637            rseg R_DINIT
0000            638            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            639   ;--------------------------------------------------------
0000            640   ; code
0000            641   ;--------------------------------------------------------
0000            642            rseg R_CSEG
0000            643   ;------------------------------------------------------------
0000            644   ;Allocation info for local variables in function '_c51_external_startup'
0000            645   ;------------------------------------------------------------
0000            646   ;------------------------------------------------------------
0000            647   ;        sensor_test.c:74: char _c51_external_startup (void)
0000            648   ;        -----------------------------------------
0000            649   ;         function _c51_external_startup
0000            650   ;        -----------------------------------------
0000            651   __c51_external_startup:
0000            652            using   0
0000            653   ;        sensor_test.c:77: SFRPAGE = 0x00;
0000 75A700     654            mov     _SFRPAGE,#0x00
0003            655   ;        sensor_test.c:78: WDTCN = 0xDE; //First key
0003 7597DE     656            mov     _WDTCN,#0xDE
0006            657   ;        sensor_test.c:79: WDTCN = 0xAD; //Second key
0006 7597AD     658            mov     _WDTCN,#0xAD
0009            659   ;        sensor_test.c:81: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     660            mov     _VDM0CN,#0x80
000C            661   ;        sensor_test.c:82: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     662            mov     _RSTSRC,#0x06
000F            663   ;        sensor_test.c:89: SFRPAGE = 0x10;
000F 75A710     664            mov     _SFRPAGE,#0x10
0012            665   ;        sensor_test.c:90: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     666            mov     _PFE0CN,#0x20
0015            667   ;        sensor_test.c:91: SFRPAGE = 0x00;
0015 75A700     668            mov     _SFRPAGE,#0x00
0018            669   ;        sensor_test.c:112: CLKSEL = 0x00;
0018 75A900     670            mov     _CLKSEL,#0x00
001B            671   ;        sensor_test.c:113: CLKSEL = 0x00;
001B 75A900     672            mov     _CLKSEL,#0x00
001E            673   ;        sensor_test.c:114: while ((CLKSEL & 0x80) == 0);
001E            674   L002001?:
001E E5A9       675            mov     a,_CLKSEL
0020 30E7C0     676            jnb     acc.7,L002001?
0023            677   ;        sensor_test.c:115: CLKSEL = 0x03;
0023 75A903     678            mov     _CLKSEL,#0x03
0026            679   ;        sensor_test.c:116: CLKSEL = 0x03;
0026 75A903     680            mov     _CLKSEL,#0x03
0029            681   ;        sensor_test.c:117: while ((CLKSEL & 0x80) == 0);
0029            682   L002004?:
0029 E5A9       683            mov     a,_CLKSEL
002B 30E740     684            jnb     acc.7,L002004?
002E            685   ;        sensor_test.c:124: P0MDOUT |= 0b_1100_0000;
002E 43A4C0     686            orl     _P0MDOUT,#0xC0
0031            687   ;        sensor_test.c:125: P1MDOUT = 0b_0000_0000; // P1 all open-drain
0031 75A500     688            mov     _P1MDOUT,#0x00
0034            689   ;        sensor_test.c:126: XBR0 = 0b_0000_0011;    // SPI0E=1, URT0E=1
0034 75E103     690            mov     _XBR0,#0x03
0037            691   ;        sensor_test.c:127: XBR1 = 0b_0000_0000;
0037 75E200     692            mov     _XBR1,#0x00
003A            693   ;        sensor_test.c:128: XBR2 = 0b_0100_0000;    // Enable crossbar and weak pull-ups
003A 75E340     694            mov     _XBR2,#0x40
003D            695   ;        sensor_test.c:129: P0SKIP        = 0b_0000_0111; 
003D 75D407     696            mov     _P0SKIP,#0x07
0040            697   ;        sensor_test.c:135: SCON0 = 0x10;
0040 759810     698            mov     _SCON0,#0x10
0043            699   ;        sensor_test.c:136: TH1 = 0x100-((SYSCLK/BAUDRATE)/(12L*2L));
0043 758DE6     700            mov     _TH1,#0xE6
0046            701   ;        sensor_test.c:137: TL1 = TH1;      // Init Timer1
0046 858D8B     702            mov     _TL1,_TH1
0049            703   ;        sensor_test.c:138: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0049 53890F     704            anl     _TMOD,#0x0F
004C            705   ;        sensor_test.c:139: TMOD |=  0x20;                       
004C 438920     706            orl     _TMOD,#0x20
004F            707   ;        sensor_test.c:140: TR1 = 1; // START Timer1
004F D28E       708            setb    _TR1
0051            709   ;        sensor_test.c:141: TI = 1;  // Indicate TX0 ready
0051 D299       710            setb    _TI
0053            711   ;        sensor_test.c:144: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
0053 75A211     712            mov     _SPI0CKR,#0x11
0056            713   ;        sensor_test.c:145: SPI0CFG = 0b_1110_0000; // this is mode 3, you need to determine the sampling etc. in datasheet
0056 75A1E0     714            mov     _SPI0CFG,#0xE0
0059            715   ;        sensor_test.c:146: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0059 75F801     716            mov     _SPI0CN0,#0x01
005C            717   ;        sensor_test.c:148: return 0;
005C 758200     718            mov     dpl,#0x00
005F 22         719            ret
0060            720   ;------------------------------------------------------------
0060            721   ;Allocation info for local variables in function 'Set_Pin_Output'
0060            722   ;------------------------------------------------------------
0060            723   ;mask                      Allocated with name '_Set_Pin_Output_mask_1_67'
0060            724   ;pin                       Allocated to registers r2 
0060            725   ;------------------------------------------------------------
0060            726   ;        sensor_test.c:151: void Set_Pin_Output (unsigned char pin)
0060            727   ;        -----------------------------------------
0060            728   ;         function Set_Pin_Output
0060            729   ;        -----------------------------------------
0060            730   _Set_Pin_Output:
0060 AA82       731            mov     r2,dpl
0062            732   ;        sensor_test.c:155: mask=(1<<(pin&0x7));
0062 7407       733            mov     a,#0x07
0064 5A         734            anl     a,r2
0065 F5F0       735            mov     b,a
0067 05F0       736            inc     b
0069 7401       737            mov     a,#0x01
006B 8000       738            sjmp    L003011?
006D            739   L003009?:
006D 25E0       740            add     a,acc
006F            741   L003011?:
006F D5F040     742            djnz    b,L003009?
0072 FB         743            mov     r3,a
0073            744   ;        sensor_test.c:156: switch(pin/0x10)
0073 EA         745            mov     a,r2
0074 C4         746            swap    a
0075 540F       747            anl     a,#0x0f
0077 FA         748            mov  r2,a
0078 24FC       749            add     a,#0xff - 0x03
007A 4000       750            jc      L003006?
007C EA         751            mov     a,r2
007D 2A         752            add     a,r2
007E 2A         753            add     a,r2
007F 90C4C0     754            mov     dptr,#L003013?
0082 73         755            jmp     @a+dptr
0083            756   L003013?:
0083 020000     757            ljmp    L003001?
0086 020000     758            ljmp    L003002?
0089 020000     759            ljmp    L003003?
008C 020000     760            ljmp    L003004?
008F            761   ;        sensor_test.c:158: case 0: P0MDOUT |= mask; break;
008F            762   L003001?:
008F EB         763            mov     a,r3
0090 42A4       764            orl     _P0MDOUT,a
0092            765   ;        sensor_test.c:159: case 1: P1MDOUT |= mask; break;
0092 22         766            ret
0093            767   L003002?:
0093 EB         768            mov     a,r3
0094 42A5       769            orl     _P1MDOUT,a
0096            770   ;        sensor_test.c:160: case 2: P2MDOUT |= mask; break; 
0096 22         771            ret
0097            772   L003003?:
0097 EB         773            mov     a,r3
0098 42A6       774            orl     _P2MDOUT,a
009A            775   ;        sensor_test.c:161: case 3: P3MDOUT |= mask; break; 
009A 22         776            ret
009B            777   L003004?:
009B EB         778            mov     a,r3
009C 429C       779            orl     _P3MDOUT,a
009E            780   ;        sensor_test.c:162: }    
009E            781   L003006?:
009E 22         782            ret
009F            783   ;------------------------------------------------------------
009F            784   ;Allocation info for local variables in function 'Timer3us'
009F            785   ;------------------------------------------------------------
009F            786   ;i                         Allocated with name '_Timer3us_i_1_70'
009F            787   ;us                        Allocated to registers r2 
009F            788   ;------------------------------------------------------------
009F            789   ;        sensor_test.c:166: void Timer3us(unsigned char us)
009F            790   ;        -----------------------------------------
009F            791   ;         function Timer3us
009F            792   ;        -----------------------------------------
009F            793   _Timer3us:
009F AA82       794            mov     r2,dpl
00A1            795   ;        sensor_test.c:171: CKCON0|=0b_0100_0000;
00A1 438E40     796            orl     _CKCON0,#0x40
00A4            797   ;        sensor_test.c:173: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
00A4 7592B8     798            mov     _TMR3RL,#0xB8
00A7 7593FF     799            mov     (_TMR3RL >> 8),#0xFF
00AA            800   ;        sensor_test.c:174: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
00AA 859294     801            mov     _TMR3,_TMR3RL
00AD 859395     802            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
00B0            803   ;        sensor_test.c:176: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
00B0 759104     804            mov     _TMR3CN0,#0x04
00B3            805   ;        sensor_test.c:177: for (i = 0; i < us; i++)       // Count <us> overflows
00B3 7B00       806            mov     r3,#0x00
00B5            807   L004004?:
00B5 C3         808            clr     c
00B6 EB         809            mov     a,r3
00B7 9A         810            subb    a,r2
00B8 5000       811            jnc     L004007?
00BA            812   ;        sensor_test.c:179: while (!(TMR3CN0 & 0x80));  // Wait for overflow
00BA            813   L004001?:
00BA E591       814            mov     a,_TMR3CN0
00BC 30E780     815            jnb     acc.7,L004001?
00BF            816   ;        sensor_test.c:180: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
00BF 53917F     817            anl     _TMR3CN0,#0x7F
00C2            818   ;        sensor_test.c:177: for (i = 0; i < us; i++)       // Count <us> overflows
00C2 0B         819            inc     r3
00C3 8000       820            sjmp    L004004?
00C5            821   L004007?:
00C5            822   ;        sensor_test.c:182: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00C5 759100     823            mov     _TMR3CN0,#0x00
00C8 22         824            ret
00C9            825   ;------------------------------------------------------------
00C9            826   ;Allocation info for local variables in function 'waitms'
00C9            827   ;------------------------------------------------------------
00C9            828   ;ms                        Allocated to registers r2 r3 
00C9            829   ;j                         Allocated with name '_waitms_j_1_73'
00C9            830   ;k                         Allocated with name '_waitms_k_1_73'
00C9            831   ;------------------------------------------------------------
00C9            832   ;        sensor_test.c:185: void waitms (unsigned int ms)
00C9            833   ;        -----------------------------------------
00C9            834   ;         function waitms
00C9            835   ;        -----------------------------------------
00C9            836   _waitms:
00C9 AA82       837            mov     r2,dpl
00CB AB83       838            mov     r3,dph
00CD            839   ;        sensor_test.c:189: for(j=0; j<ms; j++)
00CD 7C00       840            mov     r4,#0x00
00CF 7D00       841            mov     r5,#0x00
00D1            842   L005005?:
00D1 C3         843            clr     c
00D2 EC         844            mov     a,r4
00D3 9A         845            subb    a,r2
00D4 ED         846            mov     a,r5
00D5 9B         847            subb    a,r3
00D6 5000       848            jnc     L005009?
00D8            849   ;        sensor_test.c:190: for (k=0; k<4; k++) Timer3us(250);
00D8 7E00       850            mov     r6,#0x00
00DA            851   L005001?:
00DA BE04C0     852            cjne    r6,#0x04,L005018?
00DD            853   L005018?:
00DD 5000       854            jnc     L005007?
00DF 7582FA     855            mov     dpl,#0xFA
00E2 C002       856            push    ar2
00E4 C003       857            push    ar3
00E6 C004       858            push    ar4
00E8 C005       859            push    ar5
00EA C006       860            push    ar6
00EC 120000     861            lcall   _Timer3us
00EF D006       862            pop     ar6
00F1 D005       863            pop     ar5
00F3 D004       864            pop     ar4
00F5 D003       865            pop     ar3
00F7 D002       866            pop     ar2
00F9 0E         867            inc     r6
00FA 8000       868            sjmp    L005001?
00FC            869   L005007?:
00FC            870   ;        sensor_test.c:189: for(j=0; j<ms; j++)
00FC 0C         871            inc     r4
00FD BC0000     872            cjne    r4,#0x00,L005005?
0100 0D         873            inc     r5
0101 8000       874            sjmp    L005005?
0103            875   L005009?:
0103 22         876            ret
0104            877   ;------------------------------------------------------------
0104            878   ;Allocation info for local variables in function 'SPI_transfer'
0104            879   ;------------------------------------------------------------
0104            880   ;tx_data                   Allocated to registers 
0104            881   ;------------------------------------------------------------
0104            882   ;        sensor_test.c:193: unsigned char SPI_transfer(unsigned char tx_data)
0104            883   ;        -----------------------------------------
0104            884   ;         function SPI_transfer
0104            885   ;        -----------------------------------------
0104            886   _SPI_transfer:
0104 8582A3     887            mov     _SPI0DAT,dpl
0107            888   ;        sensor_test.c:196: while (!SPIF);      // Wait for transfer to complete
0107            889   L006001?:
0107            890   ;        sensor_test.c:197: SPIF = 0;           // Clear SPI interrupt flag
0107 10FF80     891            jbc     _SPIF,L006008?
010A 8000       892            sjmp    L006001?
010C            893   L006008?:
010C            894   ;        sensor_test.c:198: return SPI0DAT;     // Return received data
010C 85A382     895            mov     dpl,_SPI0DAT
010F 22         896            ret
0110            897   ;------------------------------------------------------------
0110            898   ;Allocation info for local variables in function 'SPI_read'
0110            899   ;------------------------------------------------------------
0110            900   ;reg_addr                  Allocated to registers r2 
0110            901   ;value                     Allocated to registers 
0110            902   ;------------------------------------------------------------
0110            903   ;        sensor_test.c:201: unsigned char SPI_read(unsigned char reg_addr)
0110            904   ;        -----------------------------------------
0110            905   ;         function SPI_read
0110            906   ;        -----------------------------------------
0110            907   _SPI_read:
0110 AA82       908            mov     r2,dpl
0112            909   ;        sensor_test.c:206: reg_addr = reg_addr | 0x80;
0112 430280     910            orl     ar2,#0x80
0115            911   ;        sensor_test.c:208: CS = 0;                // Select the device
0115 C290       912            clr     _P1_0
0117            913   ;        sensor_test.c:209: SPI_transfer(reg_addr);     // Send register address
0117 8A82       914            mov     dpl,r2
0119 120000     915            lcall   _SPI_transfer
011C            916   ;        sensor_test.c:210: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
011C 758200     917            mov     dpl,#0x00
011F 120000     918            lcall   _SPI_transfer
0122            919   ;        sensor_test.c:211: CS = 1;                // Deselect the device
0122 D290       920            setb    _P1_0
0124            921   ;        sensor_test.c:213: return value;
0124 22         922            ret
0125            923   ;------------------------------------------------------------
0125            924   ;Allocation info for local variables in function 'SPI_read_block'
0125            925   ;------------------------------------------------------------
0125            926   ;buffer                    Allocated with name '_SPI_read_block_PARM_2'
0125            927   ;len                       Allocated with name '_SPI_read_block_PARM_3'
0125            928   ;start_addr                Allocated to registers r2 
0125            929   ;i                         Allocated to registers r2 
0125            930   ;------------------------------------------------------------
0125            931   ;        sensor_test.c:216: void SPI_read_block(unsigned char start_addr, uint8_t *buffer, uint8_t len)
0125            932   ;        -----------------------------------------
0125            933   ;         function SPI_read_block
0125            934   ;        -----------------------------------------
0125            935   _SPI_read_block:
0125 AA82       936            mov     r2,dpl
0127            937   ;        sensor_test.c:219: start_addr |= 0x80; // Set MSB for read
0127 430280     938            orl     ar2,#0x80
012A            939   ;        sensor_test.c:220: CS = 0;
012A C290       940            clr     _P1_0
012C            941   ;        sensor_test.c:221: SPI_transfer(start_addr);
012C 8A82       942            mov     dpl,r2
012E 120000     943            lcall   _SPI_transfer
0131            944   ;        sensor_test.c:222: for (i = 0; i < len; i++) {
0131 7A00       945            mov     r2,#0x00
0133            946   L008001?:
0133 C3         947            clr     c
0134 EA         948            mov     a,r2
0135 9570       949            subb    a,_SPI_read_block_PARM_3
0137 5000       950            jnc     L008004?
0139            951   ;        sensor_test.c:223: buffer[i] = SPI_transfer(0x00); // Dummy writes
0139 EA         952            mov     a,r2
013A 25C0       953            add     a,_SPI_read_block_PARM_2
013C FB         954            mov     r3,a
013D E4         955            clr     a
013E 35C1       956            addc    a,(_SPI_read_block_PARM_2 + 1)
0140 FC         957            mov     r4,a
0141 ADC2       958            mov     r5,(_SPI_read_block_PARM_2 + 2)
0143 758200     959            mov     dpl,#0x00
0146 C002       960            push    ar2
0148 C003       961            push    ar3
014A C004       962            push    ar4
014C C005       963            push    ar5
014E 120000     964            lcall   _SPI_transfer
0151 AE82       965            mov     r6,dpl
0153 D005       966            pop     ar5
0155 D004       967            pop     ar4
0157 D003       968            pop     ar3
0159 D002       969            pop     ar2
015B 8B82       970            mov     dpl,r3
015D 8C83       971            mov     dph,r4
015F 8DF0       972            mov     b,r5
0161 EE         973            mov     a,r6
0162 120000     974            lcall   __gptrput
0165            975   ;        sensor_test.c:222: for (i = 0; i < len; i++) {
0165 0A         976            inc     r2
0166 8000       977            sjmp    L008001?
0168            978   L008004?:
0168            979   ;        sensor_test.c:225: CS = 1;
0168 D290       980            setb    _P1_0
016A 22         981            ret
016B            982   ;------------------------------------------------------------
016B            983   ;Allocation info for local variables in function 'SPI_write'
016B            984   ;------------------------------------------------------------
016B            985   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
016B            986   ;reg_addr                  Allocated to registers r2 
016B            987   ;------------------------------------------------------------
016B            988   ;        sensor_test.c:229: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
016B            989   ;        -----------------------------------------
016B            990   ;         function SPI_write
016B            991   ;        -----------------------------------------
016B            992   _SPI_write:
016B AA82       993            mov     r2,dpl
016D            994   ;        sensor_test.c:232: reg_addr = reg_addr & 0x7F;
016D 53027F     995            anl     ar2,#0x7F
0170            996   ;        sensor_test.c:234: CS = 0;                // Select device
0170 C290       997            clr     _P1_0
0172            998   ;        sensor_test.c:235: SPI_transfer(reg_addr);     // Send register address
0172 8A82       999            mov     dpl,r2
0174 120000    1000            lcall   _SPI_transfer
0177           1001   ;        sensor_test.c:236: SPI_transfer(reg_value);    // Send value
0177 852082    1002            mov     dpl,_SPI_write_PARM_2
017A 120000    1003            lcall   _SPI_transfer
017D           1004   ;        sensor_test.c:237: CS = 1;                // Deselect device
017D D290      1005            setb    _P1_0
017F 22        1006            ret
0180           1007   ;------------------------------------------------------------
0180           1008   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
0180           1009   ;------------------------------------------------------------
0180           1010   ;i                         Allocated with name '_BMM150_Read_Trim_Registers_i_1_84'
0180           1011   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_84'
0180           1012   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_84'
0180           1013   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_84'
0180           1014   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84'
0180           1015   ;------------------------------------------------------------
0180           1016   ;        sensor_test.c:240: void BMM150_Read_Trim_Registers(void)
0180           1017   ;        -----------------------------------------
0180           1018   ;         function BMM150_Read_Trim_Registers
0180           1019   ;        -----------------------------------------
0180           1020   _BMM150_Read_Trim_Registers:
0180           1021   ;        sensor_test.c:244: xdata uint8_t trim_x1y1[2] = {0};
0180 90BE20    1022            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_84
0183           1023   ;        sensor_test.c:245: xdata uint8_t trim_xyz_data[4] = {0};
0183 E4        1024            clr     a
0184 F0        1025            movx    @dptr,a
0185 90BE21    1026            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_84 + 0x0001)
0188 F0        1027            movx    @dptr,a
0189 90BE80    1028            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_84
018C F0        1029            movx    @dptr,a
018D 90BE81    1030            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0001)
0190 F0        1031            movx    @dptr,a
0191 90BE82    1032            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0002)
0194           1033   ;        sensor_test.c:246: xdata uint8_t trim_xy1xy2[10] = {0};
0194 E4        1034            clr     a
0195 F0        1035            movx    @dptr,a
0196 90BE83    1036            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0003)
0199 F0        1037            movx    @dptr,a
019A 90BEE0    1038            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84
019D F0        1039            movx    @dptr,a
019E 90BEE1    1040            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0001)
01A1 F0        1041            movx    @dptr,a
01A2 90BEE2    1042            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0002)
01A5 E4        1043            clr     a
01A6 F0        1044            movx    @dptr,a
01A7 90BEE3    1045            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0003)
01AA F0        1046            movx    @dptr,a
01AB 90BEE4    1047            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0004)
01AE F0        1048            movx    @dptr,a
01AF 90BEE5    1049            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0005)
01B2 F0        1050            movx    @dptr,a
01B3 90BEE6    1051            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0006)
01B6 E4        1052            clr     a
01B7 F0        1053            movx    @dptr,a
01B8 90BEE7    1054            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0007)
01BB F0        1055            movx    @dptr,a
01BC 90BEE8    1056            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0008)
01BF F0        1057            movx    @dptr,a
01C0 90BEE9    1058            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0009)
01C3 F0        1059            movx    @dptr,a
01C4           1060   ;        sensor_test.c:249: for (i=0;i<2;i++){
01C4 7A00      1061            mov     r2,#0x00
01C6           1062   L010001?:
01C6 BA02C0    1063            cjne    r2,#0x02,L010024?
01C9           1064   L010024?:
01C9 5000      1065            jnc     L010004?
01CB           1066   ;        sensor_test.c:250: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
01CB EA        1067            mov     a,r2
01CC 2420      1068            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_84
01CE FB        1069            mov     r3,a
01CF E4        1070            clr     a
01D0 34BE      1071            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_84 >> 8)
01D2 FC        1072            mov     r4,a
01D3 745D      1073            mov     a,#0x5D
01D5 2A        1074            add     a,r2
01D6 F582      1075            mov     dpl,a
01D8 C002      1076            push    ar2
01DA C003      1077            push    ar3
01DC C004      1078            push    ar4
01DE 120000    1079            lcall   _SPI_read
01E1 AD82      1080            mov     r5,dpl
01E3 D004      1081            pop     ar4
01E5 D003      1082            pop     ar3
01E7 D002      1083            pop     ar2
01E9 8B82      1084            mov     dpl,r3
01EB 8C83      1085            mov     dph,r4
01ED ED        1086            mov     a,r5
01EE F0        1087            movx    @dptr,a
01EF           1088   ;        sensor_test.c:249: for (i=0;i<2;i++){
01EF 0A        1089            inc     r2
01F0 8000      1090            sjmp    L010001?
01F2           1091   L010004?:
01F2           1092   ;        sensor_test.c:252: for (i=0;i<4;i++){
01F2 7A00      1093            mov     r2,#0x00
01F4           1094   L010005?:
01F4 BA0480    1095            cjne    r2,#0x04,L010026?
01F7           1096   L010026?:
01F7 5000      1097            jnc     L010008?
01F9           1098   ;        sensor_test.c:253: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
01F9 EA        1099            mov     a,r2
01FA 2480      1100            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_84
01FC FB        1101            mov     r3,a
01FD E4        1102            clr     a
01FE 34BE      1103            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 >> 8)
0200 FC        1104            mov     r4,a
0201 7462      1105            mov     a,#0x62
0203 2A        1106            add     a,r2
0204 F582      1107            mov     dpl,a
0206 C002      1108            push    ar2
0208 C003      1109            push    ar3
020A C004      1110            push    ar4
020C 120000    1111            lcall   _SPI_read
020F AD82      1112            mov     r5,dpl
0211 D004      1113            pop     ar4
0213 D003      1114            pop     ar3
0215 D002      1115            pop     ar2
0217 8B82      1116            mov     dpl,r3
0219 8C83      1117            mov     dph,r4
021B ED        1118            mov     a,r5
021C F0        1119            movx    @dptr,a
021D           1120   ;        sensor_test.c:252: for (i=0;i<4;i++){
021D 0A        1121            inc     r2
021E 8000      1122            sjmp    L010005?
0220           1123   L010008?:
0220           1124   ;        sensor_test.c:255: for (i=0;i<10;i++){
0220 7A00      1125            mov     r2,#0x00
0222           1126   L010009?:
0222 BA0A40    1127            cjne    r2,#0x0A,L010028?
0225           1128   L010028?:
0225 5000      1129            jnc     L010012?
0227           1130   ;        sensor_test.c:256: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
0227 EA        1131            mov     a,r2
0228 24E0      1132            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84
022A FB        1133            mov     r3,a
022B E4        1134            clr     a
022C 34BE      1135            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 >> 8)
022E FC        1136            mov     r4,a
022F 7468      1137            mov     a,#0x68
0231 2A        1138            add     a,r2
0232 F582      1139            mov     dpl,a
0234 C002      1140            push    ar2
0236 C003      1141            push    ar3
0238 C004      1142            push    ar4
023A 120000    1143            lcall   _SPI_read
023D AD82      1144            mov     r5,dpl
023F D004      1145            pop     ar4
0241 D003      1146            pop     ar3
0243 D002      1147            pop     ar2
0245 8B82      1148            mov     dpl,r3
0247 8C83      1149            mov     dph,r4
0249 ED        1150            mov     a,r5
024A F0        1151            movx    @dptr,a
024B           1152   ;        sensor_test.c:255: for (i=0;i<10;i++){
024B 0A        1153            inc     r2
024C 8000      1154            sjmp    L010009?
024E           1155   L010012?:
024E           1156   ;        sensor_test.c:259: dig_x1 = (int8_t) trim_x1y1[0]; 
024E 90BE20    1157            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_84
0251 E0        1158            movx    a,@dptr
0252 F580      1159            mov     _dig_x1,a
0254           1160   ;        sensor_test.c:260: dig_y1 = (int8_t) trim_x1y1[1]; 
0254 90BE21    1161            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_84 + 0x0001)
0257 E0        1162            movx    a,@dptr
0258 F500      1163            mov     _dig_y1,a
025A           1164   ;        sensor_test.c:261: dig_x2 = (int8_t) trim_xyz_data[2]; 
025A 90BE82    1165            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0002)
025D E0        1166            movx    a,@dptr
025E F540      1167            mov     _dig_x2,a
0260           1168   ;        sensor_test.c:262: dig_y2 = (int8_t) trim_xyz_data[3]; 
0260 90BE83    1169            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0003)
0263 E0        1170            movx    a,@dptr
0264 F5C0      1171            mov     _dig_y2,a
0266           1172   ;        sensor_test.c:264: temp_msb = ((uint16_t)trim_xy1xy2[3]) << 8;
0266 90BEE3    1173            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0003)
0269 E0        1174            movx    a,@dptr
026A FB        1175            mov     r3,a
026B 7A00      1176            mov     r2,#0x00
026D           1177   ;        sensor_test.c:265: dig_z1 = (uint16_t)(temp_msb | trim_xy1xy2[2]);
026D 90BEE2    1178            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0002)
0270 E0        1179            movx    a,@dptr
0271 7D00      1180            mov     r5,#0x00
0273 4202      1181            orl     ar2,a
0275 ED        1182            mov     a,r5
0276 4203      1183            orl     ar3,a
0278 8A80      1184            mov     _dig_z1,r2
027A           1185   ;        sensor_test.c:267: temp_msb = ((uint16_t)trim_xy1xy2[1]) << 8;
027A 90BEE1    1186            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0001)
027D E0        1187            movx    a,@dptr
027E FB        1188            mov     r3,a
027F 7A00      1189            mov     r2,#0x00
0281           1190   ;        sensor_test.c:268: dig_z2 = (int16_t)(temp_msb | trim_xy1xy2[0]);
0281 90BEE0    1191            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84
0284 E0        1192            movx    a,@dptr
0285 7D00      1193            mov     r5,#0x00
0287 4202      1194            orl     ar2,a
0289 ED        1195            mov     a,r5
028A 4203      1196            orl     ar3,a
028C 8A40      1197            mov     _dig_z2,r2
028E           1198   ;        sensor_test.c:270: temp_msb = ((uint16_t)trim_xy1xy2[7]) << 8;
028E 90BEE7    1199            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0007)
0291 E0        1200            movx    a,@dptr
0292 FB        1201            mov     r3,a
0293 7A00      1202            mov     r2,#0x00
0295           1203   ;        sensor_test.c:271: dig_z3 = (int16_t)(temp_msb | trim_xy1xy2[6]);
0295 90BEE6    1204            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0006)
0298 E0        1205            movx    a,@dptr
0299 7D00      1206            mov     r5,#0x00
029B 4202      1207            orl     ar2,a
029D ED        1208            mov     a,r5
029E 4203      1209            orl     ar3,a
02A0 8A00      1210            mov     _dig_z3,r2
02A2           1211   ;        sensor_test.c:273: temp_msb = ((uint16_t)trim_xyz_data[1]) << 8;
02A2 90BE81    1212            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0001)
02A5 E0        1213            movx    a,@dptr
02A6 FB        1214            mov     r3,a
02A7 7A00      1215            mov     r2,#0x00
02A9           1216   ;        sensor_test.c:274: dig_z4 = (int16_t)(temp_msb | trim_xyz_data[0]);
02A9 90BE80    1217            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_84
02AC E0        1218            movx    a,@dptr
02AD 7D00      1219            mov     r5,#0x00
02AF 4202      1220            orl     ar2,a
02B1 ED        1221            mov     a,r5
02B2 4203      1222            orl     ar3,a
02B4 8AC0      1223            mov     _dig_z4,r2
02B6           1224   ;        sensor_test.c:276: dig_xy1 = trim_xy1xy2[9];
02B6 90BEE9    1225            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0009)
02B9 E0        1226            movx    a,@dptr
02BA F580      1227            mov     _dig_xy1,a
02BC           1228   ;        sensor_test.c:277: dig_xy2 = (int8_t)trim_xy1xy2[8];
02BC 90BEE8    1229            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0008)
02BF E0        1230            movx    a,@dptr
02C0 F540      1231            mov     _dig_xy2,a
02C2           1232   ;        sensor_test.c:279: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
02C2 90BEE5    1233            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0005)
02C5 E0        1234            movx    a,@dptr
02C6 FA        1235            mov     r2,a
02C7 53027F    1236            anl     ar2,#0x7F
02CA 8A03      1237            mov     ar3,r2
02CC 7A00      1238            mov     r2,#0x00
02CE           1239   ;        sensor_test.c:280: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
02CE 90BEE4    1240            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0004)
02D1 E0        1241            movx    a,@dptr
02D2 7D00      1242            mov     r5,#0x00
02D4 4202      1243            orl     ar2,a
02D6 ED        1244            mov     a,r5
02D7 4203      1245            orl     ar3,a
02D9 8A00      1246            mov     _dig_xyz1,r2
02DB 22        1247            ret
02DC           1248   ;------------------------------------------------------------
02DC           1249   ;Allocation info for local variables in function 'BMM150_Init'
02DC           1250   ;------------------------------------------------------------
02DC           1251   ;chip_id                   Allocated to registers r2 
02DC           1252   ;------------------------------------------------------------
02DC           1253   ;        sensor_test.c:285: void BMM150_Init(void)
02DC           1254   ;        -----------------------------------------
02DC           1255   ;         function BMM150_Init
02DC           1256   ;        -----------------------------------------
02DC           1257   _BMM150_Init:
02DC           1258   ;        sensor_test.c:290: CS = 1;         // Deselect BMM150
02DC D290      1259            setb    _P1_0
02DE           1260   ;        sensor_test.c:293: waitms(10);
02DE 90000A    1261            mov     dptr,#0x000A
02E1 120000    1262            lcall   _waitms
02E4           1263   ;        sensor_test.c:296: SPI_write(BMM150_POWER_CONTROL, 0x82);
02E4 752082    1264            mov     _SPI_write_PARM_2,#0x82
02E7 75824B    1265            mov     dpl,#0x4B
02EA 120000    1266            lcall   _SPI_write
02ED           1267   ;        sensor_test.c:297: waitms(10);  // Wait for reset to complete
02ED 90000A    1268            mov     dptr,#0x000A
02F0 120000    1269            lcall   _waitms
02F3           1270   ;        sensor_test.c:300: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
02F3 752001    1271            mov     _SPI_write_PARM_2,#0x01
02F6 75824B    1272            mov     dpl,#0x4B
02F9 120000    1273            lcall   _SPI_write
02FC           1274   ;        sensor_test.c:301: waitms(5);
02FC 900005    1275            mov     dptr,#0x0005
02FF 120000    1276            lcall   _waitms
0302           1277   ;        sensor_test.c:304: chip_id = SPI_read(BMM150_CHIP_ID);
0302 758240    1278            mov     dpl,#0x40
0305 120000    1279            lcall   _SPI_read
0308 AA82      1280            mov     r2,dpl
030A           1281   ;        sensor_test.c:305: if (chip_id != BMM150_CHIP_ID_VALUE)
030A BA32C0    1282            cjne    r2,#0x32,L011010?
030D 8000      1283            sjmp    L011005?
030F           1284   L011010?:
030F           1285   ;        sensor_test.c:307: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
030F 8A03      1286            mov     ar3,r2
0311 7C00      1287            mov     r4,#0x00
0313 C003      1288            push    ar3
0315 C004      1289            push    ar4
0317 7440      1290            mov     a,#__str_0
0319 C0E0      1291            push    acc
031B 74CC      1292            mov     a,#(__str_0 >> 8)
031D C0E0      1293            push    acc
031F 7480      1294            mov     a,#0x80
0321 C0E0      1295            push    acc
0323 120000    1296            lcall   _printf
0326 E581      1297            mov     a,sp
0328 24FB      1298            add     a,#0xfb
032A F581      1299            mov     sp,a
032C           1300   ;        sensor_test.c:308: while (1) {
032C           1301   L011002?:
032C           1302   ;        sensor_test.c:309: printf("Press restart to check again!\r");
032C 7440      1303            mov     a,#__str_1
032E C0E0      1304            push    acc
0330 74CD      1305            mov     a,#(__str_1 >> 8)
0332 C0E0      1306            push    acc
0334 7480      1307            mov     a,#0x80
0336 C0E0      1308            push    acc
0338 120000    1309            lcall   _printf
033B 1581      1310            dec     sp
033D 1581      1311            dec     sp
033F 1581      1312            dec     sp
0341 8000      1313            sjmp    L011002?
0343           1314   L011005?:
0343           1315   ;        sensor_test.c:314: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
0343 752000    1316            mov     _SPI_write_PARM_2,#0x00
0346 75824C    1317            mov     dpl,#0x4C
0349 C002      1318            push    ar2
034B 120000    1319            lcall   _SPI_write
034E           1320   ;        sensor_test.c:317: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
034E 75207F    1321            mov     _SPI_write_PARM_2,#0x7F
0351 758251    1322            mov     dpl,#0x51
0354 120000    1323            lcall   _SPI_write
0357           1324   ;        sensor_test.c:318: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
0357 75200E    1325            mov     _SPI_write_PARM_2,#0x0E
035A 758252    1326            mov     dpl,#0x52
035D 120000    1327            lcall   _SPI_write
0360           1328   ;        sensor_test.c:320: BMM150_Read_Trim_Registers();
0360 120000    1329            lcall   _BMM150_Read_Trim_Registers
0363           1330   ;        sensor_test.c:322: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
0363 7B00      1331            mov     r3,#0x00
0365 C003      1332            push    ar3
0367 7480      1333            mov     a,#__str_2
0369 C0E0      1334            push    acc
036B 74CD      1335            mov     a,#(__str_2 >> 8)
036D C0E0      1336            push    acc
036F 7480      1337            mov     a,#0x80
0371 C0E0      1338            push    acc
0373 120000    1339            lcall   _printf
0376 E581      1340            mov     a,sp
0378 24FB      1341            add     a,#0xfb
037A F581      1342            mov     sp,a
037C 22        1343            ret
037D           1344   ;------------------------------------------------------------
037D           1345   ;Allocation info for local variables in function 'BMM150_compensate_x'
037D           1346   ;------------------------------------------------------------
037D           1347   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
037D           1348   ;mag_data_x                Allocated to registers r2 r3 r4 
037D           1349   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
037D           1350   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_93'
037D           1351   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_93'
037D           1352   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_93'
037D           1353   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_93'
037D           1354   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_93'
037D           1355   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_93'
037D           1356   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_93'
037D           1357   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_93'
037D           1358   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_93'
037D           1359   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_93'
037D           1360   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_93'
037D           1361   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_93'
037D           1362   ;------------------------------------------------------------
037D           1363   ;        sensor_test.c:325: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
037D           1364   ;        -----------------------------------------
037D           1365   ;         function BMM150_compensate_x
037D           1366   ;        -----------------------------------------
037D           1367   _BMM150_compensate_x:
037D           1368   ;        sensor_test.c:343: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
037D ACF0      1369            mov     r4,b
037F 120000    1370            lcall   __gptrget
0382 FA        1371            mov     r2,a
0383 A3        1372            inc     dptr
0384 120000    1373            lcall   __gptrget
0387 FB        1374            mov     r3,a
0388 BA0000    1375            cjne    r2,#0x00,L012019?
038B BBF000    1376            cjne    r3,#0xF0,L012019?
038E 020000    1377            ljmp    L012011?
0391           1378   L012019?:
0391           1379   ;        sensor_test.c:344: if (*data_rhall != 0)
0391 ACD0      1380            mov     r4,_BMM150_compensate_x_PARM_2
0393 ADD1      1381            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
0395 AED2      1382            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
0397 8C82      1383            mov     dpl,r4
0399 8D83      1384            mov     dph,r5
039B 8EF0      1385            mov     b,r6
039D 120000    1386            lcall   __gptrget
03A0 FC        1387            mov     r4,a
03A1 A3        1388            inc     dptr
03A2 120000    1389            lcall   __gptrget
03A5 FD        1390            mov     r5,a
03A6 4C        1391            orl     a,r4
03A7 6000      1392            jz      L012005?
03A9           1393   ;        sensor_test.c:347: process_comp_x0 = *data_rhall;
03A9 90BFA0    1394            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03AC EC        1395            mov     a,r4
03AD F0        1396            movx    @dptr,a
03AE A3        1397            inc     dptr
03AF ED        1398            mov     a,r5
03B0 F0        1399            movx    @dptr,a
03B1 8000      1400            sjmp    L012006?
03B3           1401   L012005?:
03B3           1402   ;        sensor_test.c:349: else if (dig_xyz1 != 0)
03B3 E500      1403            mov     a,_dig_xyz1
03B5 6000      1404            jz      L012002?
03B7           1405   ;        sensor_test.c:351: process_comp_x0 = dig_xyz1;
03B7 90BFA0    1406            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03BA E500      1407            mov     a,_dig_xyz1
03BC F0        1408            movx    @dptr,a
03BD E500      1409            mov     a,_dig_xyz1
03BF 33        1410            rlc     a
03C0 95E0      1411            subb    a,acc
03C2 A3        1412            inc     dptr
03C3 F0        1413            movx    @dptr,a
03C4 8000      1414            sjmp    L012006?
03C6           1415   L012002?:
03C6           1416   ;        sensor_test.c:355: process_comp_x0 = 0;
03C6 90BFA0    1417            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03C9 E4        1418            clr     a
03CA F0        1419            movx    @dptr,a
03CB A3        1420            inc     dptr
03CC F0        1421            movx    @dptr,a
03CD           1422   L012006?:
03CD           1423   ;        sensor_test.c:357: if (process_comp_x0 != 0)
03CD 90BFA0    1424            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03D0 E0        1425            movx    a,@dptr
03D1 FC        1426            mov     r4,a
03D2 A3        1427            inc     dptr
03D3 E0        1428            movx    a,@dptr
03D4 FD        1429            mov     r5,a
03D5 4C        1430            orl     a,r4
03D6 7000      1431            jnz     L012022?
03D8 020000    1432            ljmp    L012008?
03DB           1433   L012022?:
03DB           1434   ;        sensor_test.c:360: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
03DB E500      1435            mov     a,_dig_xyz1
03DD FE        1436            mov     r6,a
03DE 33        1437            rlc     a
03DF 95E0      1438            subb    a,acc
03E1 F8        1439            mov     r0,a
03E2 C8        1440            xch     a,r0
03E3 5403      1441            anl     a,#0x03
03E5 A2E0      1442            mov     c,acc.0
03E7 C8        1443            xch     a,r0
03E8 13        1444            rrc     a
03E9 C8        1445            xch     a,r0
03EA 13        1446            rrc     a
03EB A2E0      1447            mov     c,acc.0
03ED C8        1448            xch     a,r0
03EE 13        1449            rrc     a
03EF C8        1450            xch     a,r0
03F0 13        1451            rrc     a
03F1 C8        1452            xch     a,r0
03F2 F9        1453            mov     r1,a
03F3 EE        1454            mov     a,r6
03F4 03        1455            rr      a
03F5 03        1456            rr      a
03F6 54C0      1457            anl     a,#0xc0
03F8 FF        1458            mov     r7,a
03F9 EE        1459            mov     a,r6
03FA 03        1460            rr      a
03FB 03        1461            rr      a
03FC 543F      1462            anl     a,#0x3f
03FE 48        1463            orl     a,r0
03FF F8        1464            mov     r0,a
0400 7E00      1465            mov     r6,#0x00
0402           1466   ;        sensor_test.c:361: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
0402 8C00      1467            mov     __divslong_PARM_2,r4
0404 8D01      1468            mov     (__divslong_PARM_2 + 1),r5
0406 750200    1469            mov     (__divslong_PARM_2 + 2),#0x00
0409 750300    1470            mov     (__divslong_PARM_2 + 3),#0x00
040C 8E82      1471            mov     dpl,r6
040E 8F83      1472            mov     dph,r7
0410 88F0      1473            mov     b,r0
0412 E9        1474            mov     a,r1
0413 C002      1475            push    ar2
0415 C003      1476            push    ar3
0417 120000    1477            lcall   __divslong
041A AC82      1478            mov     r4,dpl
041C E583      1479            mov     a,dph
041E 24C0      1480            add     a,#0xc0
0420 FD        1481            mov     r5,a
0421           1482   ;        sensor_test.c:363: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
0421 8C06      1483            mov     ar6,r4
0423 8D07      1484            mov     ar7,r5
0425 8EE0      1485            mov     _BMM150_compensate_x_sloc0_1_0,r6
0427 EF        1486            mov     a,r7
0428 F5E1      1487            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
042A 33        1488            rlc     a
042B 95E0      1489            subb    a,acc
042D F5E2      1490            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
042F F5E3      1491            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
0431 8C06      1492            mov     ar6,r4
0433 8D07      1493            mov     ar7,r5
0435 8E00      1494            mov     __mullong_PARM_2,r6
0437 EF        1495            mov     a,r7
0438 F501      1496            mov     (__mullong_PARM_2 + 1),a
043A 33        1497            rlc     a
043B 95E0      1498            subb    a,acc
043D F502      1499            mov     (__mullong_PARM_2 + 2),a
043F F503      1500            mov     (__mullong_PARM_2 + 3),a
0441           1501   ;        sensor_test.c:364: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
0441 85E082    1502            mov     dpl,_BMM150_compensate_x_sloc0_1_0
0444 85E183    1503            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
0447 85E2F0    1504            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
044A E5E3      1505            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
044C C004      1506            push    ar4
044E C005      1507            push    ar5
0450 120000    1508            lcall   __mullong
0453 8582E0    1509            mov     _BMM150_compensate_x_sloc0_1_0,dpl
0456 8583E1    1510            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
0459 85F0E2    1511            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
045C F5E3      1512            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
045E E540      1513            mov     a,_dig_xy2
0460 FE        1514            mov     r6,a
0461 33        1515            rlc     a
0462 95E0      1516            subb    a,acc
0464 FF        1517            mov     r7,a
0465 F8        1518            mov     r0,a
0466 F9        1519            mov     r1,a
0467 750080    1520            mov     __divslong_PARM_2,#0x80
046A E4        1521            clr     a
046B F501      1522            mov     (__divslong_PARM_2 + 1),a
046D F502      1523            mov     (__divslong_PARM_2 + 2),a
046F F503      1524            mov     (__divslong_PARM_2 + 3),a
0471 85E082    1525            mov     dpl,_BMM150_compensate_x_sloc0_1_0
0474 85E183    1526            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
0477 85E2F0    1527            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
047A E5E3      1528            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
047C C006      1529            push    ar6
047E C007      1530            push    ar7
0480 C000      1531            push    ar0
0482 C001      1532            push    ar1
0484 120000    1533            lcall   __divslong
0487 858200    1534            mov     __mullong_PARM_2,dpl
048A 858301    1535            mov     (__mullong_PARM_2 + 1),dph
048D 85F002    1536            mov     (__mullong_PARM_2 + 2),b
0490 F503      1537            mov     (__mullong_PARM_2 + 3),a
0492 D001      1538            pop     ar1
0494 D000      1539            pop     ar0
0496 D007      1540            pop     ar7
0498 D006      1541            pop     ar6
049A           1542   ;        sensor_test.c:365: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
049A 8E82      1543            mov     dpl,r6
049C 8F83      1544            mov     dph,r7
049E 88F0      1545            mov     b,r0
04A0 E9        1546            mov     a,r1
04A1 120000    1547            lcall   __mullong
04A4 8582E0    1548            mov     _BMM150_compensate_x_sloc0_1_0,dpl
04A7 8583E1    1549            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
04AA 85F0E2    1550            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
04AD F5E3      1551            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
04AF D005      1552            pop     ar5
04B1 D004      1553            pop     ar4
04B3 E580      1554            mov     a,_dig_xy1
04B5 FE        1555            mov     r6,a
04B6 33        1556            rlc     a
04B7 95E0      1557            subb    a,acc
04B9 5401      1558            anl     a,#0x01
04BB A2E0      1559            mov     c,acc.0
04BD CE        1560            xch     a,r6
04BE 13        1561            rrc     a
04BF CE        1562            xch     a,r6
04C0 13        1563            rrc     a
04C1 CE        1564            xch     a,r6
04C2 8E00      1565            mov     __mullong_PARM_2,r6
04C4 F501      1566            mov     (__mullong_PARM_2 + 1),a
04C6 33        1567            rlc     a
04C7 95E0      1568            subb    a,acc
04C9 F502      1569            mov     (__mullong_PARM_2 + 2),a
04CB F503      1570            mov     (__mullong_PARM_2 + 3),a
04CD           1571   ;        sensor_test.c:366: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
04CD ED        1572            mov     a,r5
04CE 33        1573            rlc     a
04CF 95E0      1574            subb    a,acc
04D1 FE        1575            mov     r6,a
04D2           1576   ;        sensor_test.c:367: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
04D2 8C82      1577            mov     dpl,r4
04D4 8D83      1578            mov     dph,r5
04D6 8EF0      1579            mov     b,r6
04D8 120000    1580            lcall   __mullong
04DB AC82      1581            mov     r4,dpl
04DD AD83      1582            mov     r5,dph
04DF AEF0      1583            mov     r6,b
04E1 FF        1584            mov     r7,a
04E2 EC        1585            mov     a,r4
04E3 25E0      1586            add     a,_BMM150_compensate_x_sloc0_1_0
04E5 FC        1587            mov     r4,a
04E6 ED        1588            mov     a,r5
04E7 35E1      1589            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
04E9 FD        1590            mov     r5,a
04EA EE        1591            mov     a,r6
04EB 35E2      1592            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
04ED FE        1593            mov     r6,a
04EE EF        1594            mov     a,r7
04EF 35E3      1595            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
04F1 FF        1596            mov     r7,a
04F2 750000    1597            mov     __divslong_PARM_2,#0x00
04F5 750102    1598            mov     (__divslong_PARM_2 + 1),#0x02
04F8 750200    1599            mov     (__divslong_PARM_2 + 2),#0x00
04FB 750300    1600            mov     (__divslong_PARM_2 + 3),#0x00
04FE 8C82      1601            mov     dpl,r4
0500 8D83      1602            mov     dph,r5
0502 8EF0      1603            mov     b,r6
0504 EF        1604            mov     a,r7
0505 120000    1605            lcall   __divslong
0508 AC82      1606            mov     r4,dpl
050A AD83      1607            mov     r5,dph
050C AEF0      1608            mov     r6,b
050E FF        1609            mov     r7,a
050F 7410      1610            mov     a,#0x10
0511 2E        1611            add     a,r6
0512 FE        1612            mov     r6,a
0513 E4        1613            clr     a
0514 3F        1614            addc    a,r7
0515 FF        1615            mov     r7,a
0516           1616   ;        sensor_test.c:368: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
0516 E540      1617            mov     a,_dig_x2
0518 F8        1618            mov     r0,a
0519 33        1619            rlc     a
051A 95E0      1620            subb    a,acc
051C F9        1621            mov     r1,a
051D 74A0      1622            mov     a,#0xA0
051F 28        1623            add     a,r0
0520 F8        1624            mov     r0,a
0521 E4        1625            clr     a
0522 39        1626            addc    a,r1
0523 8800      1627            mov     __mullong_PARM_2,r0
0525 F501      1628            mov     (__mullong_PARM_2 + 1),a
0527 33        1629            rlc     a
0528 95E0      1630            subb    a,acc
052A F502      1631            mov     (__mullong_PARM_2 + 2),a
052C F503      1632            mov     (__mullong_PARM_2 + 3),a
052E           1633   ;        sensor_test.c:369: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
052E 8C82      1634            mov     dpl,r4
0530 8D83      1635            mov     dph,r5
0532 8EF0      1636            mov     b,r6
0534 EF        1637            mov     a,r7
0535 120000    1638            lcall   __mullong
0538           1639   ;        sensor_test.c:370: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
0538 750000    1640            mov     __divslong_PARM_2,#0x00
053B 750110    1641            mov     (__divslong_PARM_2 + 1),#0x10
053E 750200    1642            mov     (__divslong_PARM_2 + 2),#0x00
0541 750300    1643            mov     (__divslong_PARM_2 + 3),#0x00
0544 120000    1644            lcall   __divslong
0547 858200    1645            mov     __mullong_PARM_2,dpl
054A 858301    1646            mov     (__mullong_PARM_2 + 1),dph
054D 85F002    1647            mov     (__mullong_PARM_2 + 2),b
0550 F503      1648            mov     (__mullong_PARM_2 + 3),a
0552 D003      1649            pop     ar3
0554 D002      1650            pop     ar2
0556 EB        1651            mov     a,r3
0557 33        1652            rlc     a
0558 95E0      1653            subb    a,acc
055A FC        1654            mov     r4,a
055B           1655   ;        sensor_test.c:371: retval = ((int16_t)(process_comp_x10 / 8192));
055B 8A82      1656            mov     dpl,r2
055D 8B83      1657            mov     dph,r3
055F 8CF0      1658            mov     b,r4
0561 120000    1659            lcall   __mullong
0564 750000    1660            mov     __divslong_PARM_2,#0x00
0567 750120    1661            mov     (__divslong_PARM_2 + 1),#0x20
056A 750200    1662            mov     (__divslong_PARM_2 + 2),#0x00
056D 750300    1663            mov     (__divslong_PARM_2 + 3),#0x00
0570 120000    1664            lcall   __divslong
0573 AA82      1665            mov     r2,dpl
0575 AB83      1666            mov     r3,dph
0577           1667   ;        sensor_test.c:372: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
0577 E580      1668            mov     a,_dig_x1
0579 FC        1669            mov     r4,a
057A 33        1670            rlc     a
057B 95E0      1671            subb    a,acc
057D C4        1672            swap    a
057E 03        1673            rr      a
057F 54F8      1674            anl     a,#0xf8
0581 CC        1675            xch     a,r4
0582 C4        1676            swap    a
0583 03        1677            rr      a
0584 CC        1678            xch     a,r4
0585 6C        1679            xrl     a,r4
0586 CC        1680            xch     a,r4
0587 54F8      1681            anl     a,#0xf8
0589 CC        1682            xch     a,r4
058A 6C        1683            xrl     a,r4
058B FD        1684            mov     r5,a
058C EC        1685            mov     a,r4
058D 2A        1686            add     a,r2
058E F582      1687            mov     dpl,a
0590 ED        1688            mov     a,r5
0591 3B        1689            addc    a,r3
0592 F583      1690            mov     dph,a
0594 750010    1691            mov     __divsint_PARM_2,#0x10
0597 E4        1692            clr     a
0598 F501      1693            mov     (__divsint_PARM_2 + 1),a
059A 120000    1694            lcall   __divsint
059D E582      1695            mov     a,dpl
059F 8583F0    1696            mov     b,dph
05A2 90BF40    1697            mov     dptr,#_BMM150_compensate_x_retval_1_93
05A5 F0        1698            movx    @dptr,a
05A6 A3        1699            inc     dptr
05A7 E5F0      1700            mov     a,b
05A9 F0        1701            movx    @dptr,a
05AA 8000      1702            sjmp    L012012?
05AC           1703   L012008?:
05AC           1704   ;        sensor_test.c:375: retval = BMM150_OVERFLOW_OUTPUT; 
05AC 90BF40    1705            mov     dptr,#_BMM150_compensate_x_retval_1_93
05AF E4        1706            clr     a
05B0 F0        1707            movx    @dptr,a
05B1 A3        1708            inc     dptr
05B2 7480      1709            mov     a,#0x80
05B4 F0        1710            movx    @dptr,a
05B5 8000      1711            sjmp    L012012?
05B7           1712   L012011?:
05B7           1713   ;        sensor_test.c:379: retval = BMM150_OVERFLOW_OUTPUT; 
05B7 90BF40    1714            mov     dptr,#_BMM150_compensate_x_retval_1_93
05BA E4        1715            clr     a
05BB F0        1716            movx    @dptr,a
05BC A3        1717            inc     dptr
05BD 7480      1718            mov     a,#0x80
05BF F0        1719            movx    @dptr,a
05C0           1720   L012012?:
05C0           1721   ;        sensor_test.c:381: return retval; 
05C0 90BF40    1722            mov     dptr,#_BMM150_compensate_x_retval_1_93
05C3 E0        1723            movx    a,@dptr
05C4 FA        1724            mov     r2,a
05C5 A3        1725            inc     dptr
05C6 E0        1726            movx    a,@dptr
05C7 8A82      1727            mov     dpl,r2
05C9 F583      1728            mov     dph,a
05CB 22        1729            ret
05CC           1730   ;------------------------------------------------------------
05CC           1731   ;Allocation info for local variables in function 'BMM150_compensate_y'
05CC           1732   ;------------------------------------------------------------
05CC           1733   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
05CC           1734   ;mag_data_y                Allocated to registers r2 r3 r4 
05CC           1735   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
05CC           1736   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_102'
05CC           1737   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_102'
05CC           1738   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_102'
05CC           1739   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_102'
05CC           1740   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_102'
05CC           1741   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_102'
05CC           1742   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_102'
05CC           1743   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_102'
05CC           1744   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_102'
05CC           1745   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_102'
05CC           1746   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_102'
05CC           1747   ;------------------------------------------------------------
05CC           1748   ;        sensor_test.c:384: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
05CC           1749   ;        -----------------------------------------
05CC           1750   ;         function BMM150_compensate_y
05CC           1751   ;        -----------------------------------------
05CC           1752   _BMM150_compensate_y:
05CC           1753   ;        sensor_test.c:402: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
05CC ACF0      1754            mov     r4,b
05CE 120000    1755            lcall   __gptrget
05D1 FA        1756            mov     r2,a
05D2 A3        1757            inc     dptr
05D3 120000    1758            lcall   __gptrget
05D6 FB        1759            mov     r3,a
05D7 BA00B0    1760            cjne    r2,#0x00,L013019?
05DA BBF0B0    1761            cjne    r3,#0xF0,L013019?
05DD 020000    1762            ljmp    L013011?
05E0           1763   L013019?:
05E0           1764   ;        sensor_test.c:404: if (*data_rhall != 0)
05E0 AC80      1765            mov     r4,_BMM150_compensate_y_PARM_2
05E2 AD81      1766            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
05E4 AE82      1767            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
05E6 8C82      1768            mov     dpl,r4
05E8 8D83      1769            mov     dph,r5
05EA 8EF0      1770            mov     b,r6
05EC 120000    1771            lcall   __gptrget
05EF FC        1772            mov     r4,a
05F0 A3        1773            inc     dptr
05F1 120000    1774            lcall   __gptrget
05F4 FD        1775            mov     r5,a
05F5 4C        1776            orl     a,r4
05F6 6000      1777            jz      L013005?
05F8           1778   ;        sensor_test.c:407: process_comp_y0 = *data_rhall;
05F8 90C060    1779            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
05FB EC        1780            mov     a,r4
05FC F0        1781            movx    @dptr,a
05FD A3        1782            inc     dptr
05FE ED        1783            mov     a,r5
05FF F0        1784            movx    @dptr,a
0600 8000      1785            sjmp    L013006?
0602           1786   L013005?:
0602           1787   ;        sensor_test.c:409: else if (dig_xyz1 != 0)
0602 E500      1788            mov     a,_dig_xyz1
0604 6000      1789            jz      L013002?
0606           1790   ;        sensor_test.c:411: process_comp_y0 = dig_xyz1;
0606 90C060    1791            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
0609 E500      1792            mov     a,_dig_xyz1
060B F0        1793            movx    @dptr,a
060C E500      1794            mov     a,_dig_xyz1
060E 33        1795            rlc     a
060F 95E0      1796            subb    a,acc
0611 A3        1797            inc     dptr
0612 F0        1798            movx    @dptr,a
0613 8000      1799            sjmp    L013006?
0615           1800   L013002?:
0615           1801   ;        sensor_test.c:415: process_comp_y0 = 0;
0615 90C060    1802            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
0618 E4        1803            clr     a
0619 F0        1804            movx    @dptr,a
061A A3        1805            inc     dptr
061B F0        1806            movx    @dptr,a
061C           1807   L013006?:
061C           1808   ;        sensor_test.c:418: if (process_comp_y0 != 0)
061C 90C060    1809            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
061F E0        1810            movx    a,@dptr
0620 FC        1811            mov     r4,a
0621 A3        1812            inc     dptr
0622 E0        1813            movx    a,@dptr
0623 FD        1814            mov     r5,a
0624 4C        1815            orl     a,r4
0625 7000      1816            jnz     L013022?
0627 020000    1817            ljmp    L013008?
062A           1818   L013022?:
062A           1819   ;        sensor_test.c:421: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
062A E500      1820            mov     a,_dig_xyz1
062C FE        1821            mov     r6,a
062D 33        1822            rlc     a
062E 95E0      1823            subb    a,acc
0630 F8        1824            mov     r0,a
0631 C8        1825            xch     a,r0
0632 5403      1826            anl     a,#0x03
0634 A2E0      1827            mov     c,acc.0
0636 C8        1828            xch     a,r0
0637 13        1829            rrc     a
0638 C8        1830            xch     a,r0
0639 13        1831            rrc     a
063A A2E0      1832            mov     c,acc.0
063C C8        1833            xch     a,r0
063D 13        1834            rrc     a
063E C8        1835            xch     a,r0
063F 13        1836            rrc     a
0640 C8        1837            xch     a,r0
0641 F9        1838            mov     r1,a
0642 EE        1839            mov     a,r6
0643 03        1840            rr      a
0644 03        1841            rr      a
0645 54C0      1842            anl     a,#0xc0
0647 FF        1843            mov     r7,a
0648 EE        1844            mov     a,r6
0649 03        1845            rr      a
064A 03        1846            rr      a
064B 543F      1847            anl     a,#0x3f
064D 48        1848            orl     a,r0
064E F8        1849            mov     r0,a
064F 7E00      1850            mov     r6,#0x00
0651 8C00      1851            mov     __divslong_PARM_2,r4
0653 8D01      1852            mov     (__divslong_PARM_2 + 1),r5
0655 750200    1853            mov     (__divslong_PARM_2 + 2),#0x00
0658 750300    1854            mov     (__divslong_PARM_2 + 3),#0x00
065B           1855   ;        sensor_test.c:422: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
065B 8E82      1856            mov     dpl,r6
065D 8F83      1857            mov     dph,r7
065F 88F0      1858            mov     b,r0
0661 E9        1859            mov     a,r1
0662 C002      1860            push    ar2
0664 C003      1861            push    ar3
0666 120000    1862            lcall   __divslong
0669 AC82      1863            mov     r4,dpl
066B E583      1864            mov     a,dph
066D 24C0      1865            add     a,#0xc0
066F FD        1866            mov     r5,a
0670           1867   ;        sensor_test.c:424: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
0670 8C06      1868            mov     ar6,r4
0672 8D07      1869            mov     ar7,r5
0674 8E30      1870            mov     _BMM150_compensate_y_sloc0_1_0,r6
0676 EF        1871            mov     a,r7
0677 F531      1872            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
0679 33        1873            rlc     a
067A 95E0      1874            subb    a,acc
067C F532      1875            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
067E F533      1876            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0680 8C06      1877            mov     ar6,r4
0682 8D07      1878            mov     ar7,r5
0684 8E00      1879            mov     __mullong_PARM_2,r6
0686 EF        1880            mov     a,r7
0687 F501      1881            mov     (__mullong_PARM_2 + 1),a
0689 33        1882            rlc     a
068A 95E0      1883            subb    a,acc
068C F502      1884            mov     (__mullong_PARM_2 + 2),a
068E F503      1885            mov     (__mullong_PARM_2 + 3),a
0690           1886   ;        sensor_test.c:425: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
0690 853082    1887            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0693 853183    1888            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0696 8532F0    1889            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
0699 E533      1890            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
069B C004      1891            push    ar4
069D C005      1892            push    ar5
069F 120000    1893            lcall   __mullong
06A2 858230    1894            mov     _BMM150_compensate_y_sloc0_1_0,dpl
06A5 858331    1895            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
06A8 85F032    1896            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
06AB F533      1897            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
06AD E540      1898            mov     a,_dig_xy2
06AF FE        1899            mov     r6,a
06B0 33        1900            rlc     a
06B1 95E0      1901            subb    a,acc
06B3 FF        1902            mov     r7,a
06B4 F8        1903            mov     r0,a
06B5 F9        1904            mov     r1,a
06B6 750080    1905            mov     __divslong_PARM_2,#0x80
06B9 E4        1906            clr     a
06BA F501      1907            mov     (__divslong_PARM_2 + 1),a
06BC F502      1908            mov     (__divslong_PARM_2 + 2),a
06BE F503      1909            mov     (__divslong_PARM_2 + 3),a
06C0 853082    1910            mov     dpl,_BMM150_compensate_y_sloc0_1_0
06C3 853183    1911            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
06C6 8532F0    1912            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
06C9 E533      1913            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
06CB C006      1914            push    ar6
06CD C007      1915            push    ar7
06CF C000      1916            push    ar0
06D1 C001      1917            push    ar1
06D3 120000    1918            lcall   __divslong
06D6 858200    1919            mov     __mullong_PARM_2,dpl
06D9 858301    1920            mov     (__mullong_PARM_2 + 1),dph
06DC 85F002    1921            mov     (__mullong_PARM_2 + 2),b
06DF F503      1922            mov     (__mullong_PARM_2 + 3),a
06E1 D001      1923            pop     ar1
06E3 D000      1924            pop     ar0
06E5 D007      1925            pop     ar7
06E7 D006      1926            pop     ar6
06E9           1927   ;        sensor_test.c:426: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
06E9 8E82      1928            mov     dpl,r6
06EB 8F83      1929            mov     dph,r7
06ED 88F0      1930            mov     b,r0
06EF E9        1931            mov     a,r1
06F0 120000    1932            lcall   __mullong
06F3 858230    1933            mov     _BMM150_compensate_y_sloc0_1_0,dpl
06F6 858331    1934            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
06F9 85F032    1935            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
06FC F533      1936            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
06FE D005      1937            pop     ar5
0700 D004      1938            pop     ar4
0702 E580      1939            mov     a,_dig_xy1
0704 FE        1940            mov     r6,a
0705 33        1941            rlc     a
0706 95E0      1942            subb    a,acc
0708 5401      1943            anl     a,#0x01
070A A2E0      1944            mov     c,acc.0
070C CE        1945            xch     a,r6
070D 13        1946            rrc     a
070E CE        1947            xch     a,r6
070F 13        1948            rrc     a
0710 CE        1949            xch     a,r6
0711 8E00      1950            mov     __mullong_PARM_2,r6
0713 F501      1951            mov     (__mullong_PARM_2 + 1),a
0715 33        1952            rlc     a
0716 95E0      1953            subb    a,acc
0718 F502      1954            mov     (__mullong_PARM_2 + 2),a
071A F503      1955            mov     (__mullong_PARM_2 + 3),a
071C           1956   ;        sensor_test.c:427: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
071C ED        1957            mov     a,r5
071D 33        1958            rlc     a
071E 95E0      1959            subb    a,acc
0720 FE        1960            mov     r6,a
0721 8C82      1961            mov     dpl,r4
0723 8D83      1962            mov     dph,r5
0725 8EF0      1963            mov     b,r6
0727 120000    1964            lcall   __mullong
072A AC82      1965            mov     r4,dpl
072C AD83      1966            mov     r5,dph
072E AEF0      1967            mov     r6,b
0730 FF        1968            mov     r7,a
0731 EC        1969            mov     a,r4
0732 2530      1970            add     a,_BMM150_compensate_y_sloc0_1_0
0734 FC        1971            mov     r4,a
0735 ED        1972            mov     a,r5
0736 3531      1973            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
0738 FD        1974            mov     r5,a
0739 EE        1975            mov     a,r6
073A 3532      1976            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
073C FE        1977            mov     r6,a
073D EF        1978            mov     a,r7
073E 3533      1979            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
0740 FF        1980            mov     r7,a
0741 750000    1981            mov     __divslong_PARM_2,#0x00
0744 750102    1982            mov     (__divslong_PARM_2 + 1),#0x02
0747 750200    1983            mov     (__divslong_PARM_2 + 2),#0x00
074A 750300    1984            mov     (__divslong_PARM_2 + 3),#0x00
074D           1985   ;        sensor_test.c:428: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
074D 8C82      1986            mov     dpl,r4
074F 8D83      1987            mov     dph,r5
0751 8EF0      1988            mov     b,r6
0753 EF        1989            mov     a,r7
0754 120000    1990            lcall   __divslong
0757 AC82      1991            mov     r4,dpl
0759 AD83      1992            mov     r5,dph
075B AEF0      1993            mov     r6,b
075D FF        1994            mov     r7,a
075E E5C0      1995            mov     a,_dig_y2
0760 F8        1996            mov     r0,a
0761 33        1997            rlc     a
0762 95E0      1998            subb    a,acc
0764 F9        1999            mov     r1,a
0765 74A0      2000            mov     a,#0xA0
0767 28        2001            add     a,r0
0768 F8        2002            mov     r0,a
0769 E4        2003            clr     a
076A 39        2004            addc    a,r1
076B 8800      2005            mov     __mullong_PARM_2,r0
076D F501      2006            mov     (__mullong_PARM_2 + 1),a
076F 33        2007            rlc     a
0770 95E0      2008            subb    a,acc
0772 F502      2009            mov     (__mullong_PARM_2 + 2),a
0774 F503      2010            mov     (__mullong_PARM_2 + 3),a
0776           2011   ;        sensor_test.c:429: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
0776 7410      2012            mov     a,#0x10
0778 2E        2013            add     a,r6
0779 FE        2014            mov     r6,a
077A E4        2015            clr     a
077B 3F        2016            addc    a,r7
077C 8C82      2017            mov     dpl,r4
077E 8D83      2018            mov     dph,r5
0780 8EF0      2019            mov     b,r6
0782 120000    2020            lcall   __mullong
0785           2021   ;        sensor_test.c:430: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
0785 750000    2022            mov     __divslong_PARM_2,#0x00
0788 750110    2023            mov     (__divslong_PARM_2 + 1),#0x10
078B 750200    2024            mov     (__divslong_PARM_2 + 2),#0x00
078E 750300    2025            mov     (__divslong_PARM_2 + 3),#0x00
0791 120000    2026            lcall   __divslong
0794 858200    2027            mov     __mullong_PARM_2,dpl
0797 858301    2028            mov     (__mullong_PARM_2 + 1),dph
079A 85F002    2029            mov     (__mullong_PARM_2 + 2),b
079D F503      2030            mov     (__mullong_PARM_2 + 3),a
079F D003      2031            pop     ar3
07A1 D002      2032            pop     ar2
07A3 EB        2033            mov     a,r3
07A4 33        2034            rlc     a
07A5 95E0      2035            subb    a,acc
07A7 FC        2036            mov     r4,a
07A8           2037   ;        sensor_test.c:431: retval = (int16_t)(process_comp_y9 / 8192);
07A8 8A82      2038            mov     dpl,r2
07AA 8B83      2039            mov     dph,r3
07AC 8CF0      2040            mov     b,r4
07AE 120000    2041            lcall   __mullong
07B1 750000    2042            mov     __divslong_PARM_2,#0x00
07B4 750120    2043            mov     (__divslong_PARM_2 + 1),#0x20
07B7 750200    2044            mov     (__divslong_PARM_2 + 2),#0x00
07BA 750300    2045            mov     (__divslong_PARM_2 + 3),#0x00
07BD 120000    2046            lcall   __divslong
07C0 AA82      2047            mov     r2,dpl
07C2 AB83      2048            mov     r3,dph
07C4           2049   ;        sensor_test.c:432: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
07C4 E500      2050            mov     a,_dig_y1
07C6 FC        2051            mov     r4,a
07C7 33        2052            rlc     a
07C8 95E0      2053            subb    a,acc
07CA C4        2054            swap    a
07CB 03        2055            rr      a
07CC 54F8      2056            anl     a,#0xf8
07CE CC        2057            xch     a,r4
07CF C4        2058            swap    a
07D0 03        2059            rr      a
07D1 CC        2060            xch     a,r4
07D2 6C        2061            xrl     a,r4
07D3 CC        2062            xch     a,r4
07D4 54F8      2063            anl     a,#0xf8
07D6 CC        2064            xch     a,r4
07D7 6C        2065            xrl     a,r4
07D8 FD        2066            mov     r5,a
07D9 EC        2067            mov     a,r4
07DA 2A        2068            add     a,r2
07DB F582      2069            mov     dpl,a
07DD ED        2070            mov     a,r5
07DE 3B        2071            addc    a,r3
07DF F583      2072            mov     dph,a
07E1 750010    2073            mov     __divsint_PARM_2,#0x10
07E4 E4        2074            clr     a
07E5 F501      2075            mov     (__divsint_PARM_2 + 1),a
07E7 120000    2076            lcall   __divsint
07EA E582      2077            mov     a,dpl
07EC 8583F0    2078            mov     b,dph
07EF 90C000    2079            mov     dptr,#_BMM150_compensate_y_retval_1_102
07F2 F0        2080            movx    @dptr,a
07F3 A3        2081            inc     dptr
07F4 E5F0      2082            mov     a,b
07F6 F0        2083            movx    @dptr,a
07F7 8000      2084            sjmp    L013012?
07F9           2085   L013008?:
07F9           2086   ;        sensor_test.c:436: retval = BMM150_OVERFLOW_OUTPUT;
07F9 90C000    2087            mov     dptr,#_BMM150_compensate_y_retval_1_102
07FC E4        2088            clr     a
07FD F0        2089            movx    @dptr,a
07FE A3        2090            inc     dptr
07FF 7480      2091            mov     a,#0x80
0801 F0        2092            movx    @dptr,a
0802 8000      2093            sjmp    L013012?
0804           2094   L013011?:
0804           2095   ;        sensor_test.c:442: retval = BMM150_OVERFLOW_OUTPUT;
0804 90C000    2096            mov     dptr,#_BMM150_compensate_y_retval_1_102
0807 E4        2097            clr     a
0808 F0        2098            movx    @dptr,a
0809 A3        2099            inc     dptr
080A 7480      2100            mov     a,#0x80
080C F0        2101            movx    @dptr,a
080D           2102   L013012?:
080D           2103   ;        sensor_test.c:445: return retval;
080D 90C000    2104            mov     dptr,#_BMM150_compensate_y_retval_1_102
0810 E0        2105            movx    a,@dptr
0811 FA        2106            mov     r2,a
0812 A3        2107            inc     dptr
0813 E0        2108            movx    a,@dptr
0814 8A82      2109            mov     dpl,r2
0816 F583      2110            mov     dph,a
0818 22        2111            ret
0819           2112   ;------------------------------------------------------------
0819           2113   ;Allocation info for local variables in function 'BMM150_Read_Data'
0819           2114   ;------------------------------------------------------------
0819           2115   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
0819           2116   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_110'
0819           2117   ;raw_x_lsb                 Allocated to registers r5 
0819           2118   ;raw_x_msb                 Allocated to registers r6 
0819           2119   ;raw_y_lsb                 Allocated to registers r7 
0819           2120   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_111'
0819           2121   ;raw_rhall_lsb             Allocated to registers r1 
0819           2122   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_111'
0819           2123   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_111'
0819           2124   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_111'
0819           2125   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_111'
0819           2126   ;msb_data                  Allocated to registers r6 r0 
0819           2127   ;------------------------------------------------------------
0819           2128   ;        sensor_test.c:496: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y)
0819           2129   ;        -----------------------------------------
0819           2130   ;         function BMM150_Read_Data
0819           2131   ;        -----------------------------------------
0819           2132   _BMM150_Read_Data:
0819 858280    2133            mov     _BMM150_Read_Data_mag_x_1_110,dpl
081C 858381    2134            mov     (_BMM150_Read_Data_mag_x_1_110 + 1),dph
081F 85F082    2135            mov     (_BMM150_Read_Data_mag_x_1_110 + 2),b
0822           2136   ;        sensor_test.c:502: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
0822 758242    2137            mov     dpl,#0x42
0825 120000    2138            lcall   _SPI_read
0828 AD82      2139            mov     r5,dpl
082A           2140   ;        sensor_test.c:503: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
082A 758243    2141            mov     dpl,#0x43
082D C005      2142            push    ar5
082F 120000    2143            lcall   _SPI_read
0832 AE82      2144            mov     r6,dpl
0834           2145   ;        sensor_test.c:504: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
0834 758244    2146            mov     dpl,#0x44
0837 C006      2147            push    ar6
0839 120000    2148            lcall   _SPI_read
083C AF82      2149            mov     r7,dpl
083E           2150   ;        sensor_test.c:505: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
083E 758245    2151            mov     dpl,#0x45
0841 C007      2152            push    ar7
0843 120000    2153            lcall   _SPI_read
0846 8582E0    2154            mov     _BMM150_Read_Data_raw_y_msb_1_111,dpl
0849           2155   ;        sensor_test.c:508: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
0849 758248    2156            mov     dpl,#0x48
084C 120000    2157            lcall   _SPI_read
084F A982      2158            mov     r1,dpl
0851           2159   ;        sensor_test.c:509: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
0851 758249    2160            mov     dpl,#0x49
0854 C001      2161            push    ar1
0856 120000    2162            lcall   _SPI_read
0859 858240    2163            mov     _BMM150_Read_Data_raw_rhall_msb_1_111,dpl
085C D001      2164            pop     ar1
085E D007      2165            pop     ar7
0860 D006      2166            pop     ar6
0862 D005      2167            pop     ar5
0864           2168   ;        sensor_test.c:520: raw_x_lsb = ((raw_x_lsb & 0b_1111_1000)) >> 3;
0864 74F8      2169            mov     a,#0xF8
0866 5D        2170            anl     a,r5
0867 C4        2171            swap    a
0868 23        2172            rl      a
0869 541F      2173            anl     a,#0x1f
086B FD        2174            mov     r5,a
086C           2175   ;        sensor_test.c:521: msb_data = ((int16_t)((int8_t)raw_x_msb)) << 5; 
086C EE        2176            mov     a,r6
086D 33        2177            rlc     a
086E 95E0      2178            subb    a,acc
0870 C4        2179            swap    a
0871 23        2180            rl      a
0872 54E0      2181            anl     a,#0xe0
0874 CE        2182            xch     a,r6
0875 C4        2183            swap    a
0876 23        2184            rl      a
0877 CE        2185            xch     a,r6
0878 6E        2186            xrl     a,r6
0879 CE        2187            xch     a,r6
087A 54E0      2188            anl     a,#0xe0
087C CE        2189            xch     a,r6
087D 6E        2190            xrl     a,r6
087E F8        2191            mov     r0,a
087F           2192   ;        sensor_test.c:522: x_val = (int16_t)(msb_data | raw_x_lsb);
087F 7A00      2193            mov     r2,#0x00
0881 ED        2194            mov     a,r5
0882 4E        2195            orl     a,r6
0883 F590      2196            mov     _BMM150_Read_Data_x_val_1_111,a
0885 EA        2197            mov     a,r2
0886 48        2198            orl     a,r0
0887 F591      2199            mov     (_BMM150_Read_Data_x_val_1_111 + 1),a
0889           2200   ;        sensor_test.c:531: raw_y_lsb = ((raw_y_lsb & 0b_1111_1000)) >> 3;
0889 74F8      2201            mov     a,#0xF8
088B 5F        2202            anl     a,r7
088C C4        2203            swap    a
088D 23        2204            rl      a
088E 541F      2205            anl     a,#0x1f
0890 FF        2206            mov     r7,a
0891           2207   ;        sensor_test.c:532: msb_data = ((int16_t)((int8_t)raw_y_msb)) << 5; 
0891 E5E0      2208            mov     a,_BMM150_Read_Data_raw_y_msb_1_111
0893 FA        2209            mov     r2,a
0894 33        2210            rlc     a
0895 95E0      2211            subb    a,acc
0897 8A06      2212            mov     ar6,r2
0899 C4        2213            swap    a
089A 23        2214            rl      a
089B 54E0      2215            anl     a,#0xe0
089D CE        2216            xch     a,r6
089E C4        2217            swap    a
089F 23        2218            rl      a
08A0 CE        2219            xch     a,r6
08A1 6E        2220            xrl     a,r6
08A2 CE        2221            xch     a,r6
08A3 54E0      2222            anl     a,#0xe0
08A5 CE        2223            xch     a,r6
08A6 6E        2224            xrl     a,r6
08A7 F8        2225            mov     r0,a
08A8           2226   ;        sensor_test.c:533: y_val = (int16_t)(msb_data | raw_y_lsb);
08A8 7A00      2227            mov     r2,#0x00
08AA EF        2228            mov     a,r7
08AB 4E        2229            orl     a,r6
08AC F5E0      2230            mov     _BMM150_Read_Data_y_val_1_111,a
08AE EA        2231            mov     a,r2
08AF 48        2232            orl     a,r0
08B0 F5E1      2233            mov     (_BMM150_Read_Data_y_val_1_111 + 1),a
08B2           2234   ;        sensor_test.c:549: raw_rhall_lsb = ((raw_rhall_lsb & 0xFC) >> 2);
08B2 74FC      2235            mov     a,#0xFC
08B4 59        2236            anl     a,r1
08B5 03        2237            rr      a
08B6 03        2238            rr      a
08B7 543F      2239            anl     a,#0x3f
08B9 F9        2240            mov     r1,a
08BA           2241   ;        sensor_test.c:550: rhall_val = (uint16_t)(((uint16_t)raw_rhall_msb << 6) | raw_rhall_lsb);
08BA A840      2242            mov     r0,_BMM150_Read_Data_raw_rhall_msb_1_111
08BC E4        2243            clr     a
08BD 5403      2244            anl     a,#0x03
08BF A2E0      2245            mov     c,acc.0
08C1 C8        2246            xch     a,r0
08C2 13        2247            rrc     a
08C3 C8        2248            xch     a,r0
08C4 13        2249            rrc     a
08C5 A2E0      2250            mov     c,acc.0
08C7 C8        2251            xch     a,r0
08C8 13        2252            rrc     a
08C9 C8        2253            xch     a,r0
08CA 13        2254            rrc     a
08CB C8        2255            xch     a,r0
08CC FA        2256            mov     r2,a
08CD 7B00      2257            mov     r3,#0x00
08CF E9        2258            mov     a,r1
08D0 48        2259            orl     a,r0
08D1 F540      2260            mov     _BMM150_Read_Data_rhall_val_1_111,a
08D3 EB        2261            mov     a,r3
08D4 4A        2262            orl     a,r2
08D5 F541      2263            mov     (_BMM150_Read_Data_rhall_val_1_111 + 1),a
08D7           2264   ;        sensor_test.c:555: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
08D7 75D040    2265            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_111
08DA 75D100    2266            mov     (_BMM150_compensate_x_PARM_2 + 1),#0x00
08DD 75D240    2267            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x40
08E0 90BC90    2268            mov     dptr,#_BMM150_Read_Data_x_val_1_111
08E3 75F040    2269            mov     b,#0x40
08E6 120000    2270            lcall   _BMM150_compensate_x
08E9 AA82      2271            mov     r2,dpl
08EB AB83      2272            mov     r3,dph
08ED 858082    2273            mov     dpl,_BMM150_Read_Data_mag_x_1_110
08F0 858183    2274            mov     dph,(_BMM150_Read_Data_mag_x_1_110 + 1)
08F3 8582F0    2275            mov     b,(_BMM150_Read_Data_mag_x_1_110 + 2)
08F6 EA        2276            mov     a,r2
08F7 120000    2277            lcall   __gptrput
08FA A3        2278            inc     dptr
08FB EB        2279            mov     a,r3
08FC 120000    2280            lcall   __gptrput
08FF           2281   ;        sensor_test.c:556: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
08FF AA30      2282            mov     r2,_BMM150_Read_Data_PARM_2
0901 AB31      2283            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
0903 AC32      2284            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
0905 758040    2285            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_111
0908 758100    2286            mov     (_BMM150_compensate_y_PARM_2 + 1),#0x00
090B 758240    2287            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x40
090E 90BCE0    2288            mov     dptr,#_BMM150_Read_Data_y_val_1_111
0911 75F040    2289            mov     b,#0x40
0914 C002      2290            push    ar2
0916 C003      2291            push    ar3
0918 C004      2292            push    ar4
091A 120000    2293            lcall   _BMM150_compensate_y
091D AD82      2294            mov     r5,dpl
091F AE83      2295            mov     r6,dph
0921 D004      2296            pop     ar4
0923 D003      2297            pop     ar3
0925 D002      2298            pop     ar2
0927 8A82      2299            mov     dpl,r2
0929 8B83      2300            mov     dph,r3
092B 8CF0      2301            mov     b,r4
092D ED        2302            mov     a,r5
092E 120000    2303            lcall   __gptrput
0931 A3        2304            inc     dptr
0932 EE        2305            mov     a,r6
0933 020000    2306            ljmp    __gptrput
0936           2307   ;------------------------------------------------------------
0936           2308   ;Allocation info for local variables in function 'main'
0936           2309   ;------------------------------------------------------------
0936           2310   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0936           2311   ;sloc1                     Allocated with name '_main_sloc1_1_0'
0936           2312   ;i                         Allocated with name '_main_i_1_113'
0936           2313   ;mag_x                     Allocated with name '_main_mag_x_1_113'
0936           2314   ;mag_y                     Allocated with name '_main_mag_y_1_113'
0936           2315   ;sum_x                     Allocated with name '_main_sum_x_1_113'
0936           2316   ;sum_y                     Allocated with name '_main_sum_y_1_113'
0936           2317   ;alpha                     Allocated with name '_main_alpha_1_113'
0936           2318   ;avg_angle                 Allocated with name '_main_avg_angle_1_113'
0936           2319   ;smoothed_angle            Allocated with name '_main_smoothed_angle_1_113'
0936           2320   ;cal_x                     Allocated with name '_main_cal_x_1_113'
0936           2321   ;cal_y                     Allocated with name '_main_cal_y_1_113'
0936           2322   ;declination_angle         Allocated with name '_main_declination_angle_1_113'
0936           2323   ;x_scale                   Allocated with name '_main_x_scale_1_113'
0936           2324   ;y_scale                   Allocated with name '_main_y_scale_1_113'
0936           2325   ;------------------------------------------------------------
0936           2326   ;        sensor_test.c:563: void main (void)
0936           2327   ;        -----------------------------------------
0936           2328   ;         function main
0936           2329   ;        -----------------------------------------
0936           2330   _main:
0936           2331   ;        sensor_test.c:574: mag_x = 0; mag_y = 0; 
0936 90C0B0    2332            mov     dptr,#_main_mag_x_1_113
0939 E4        2333            clr     a
093A F0        2334            movx    @dptr,a
093B A3        2335            inc     dptr
093C F0        2336            movx    @dptr,a
093D 90C100    2337            mov     dptr,#_main_mag_y_1_113
0940 E4        2338            clr     a
0941 F0        2339            movx    @dptr,a
0942 A3        2340            inc     dptr
0943 F0        2341            movx    @dptr,a
0944           2342   ;        sensor_test.c:581: smoothed_angle = 0.0; 
0944 90C240    2343            mov     dptr,#_main_smoothed_angle_1_113
0947 E4        2344            clr     a
0948 F0        2345            movx    @dptr,a
0949 A3        2346            inc     dptr
094A F0        2347            movx    @dptr,a
094B A3        2348            inc     dptr
094C F0        2349            movx    @dptr,a
094D A3        2350            inc     dptr
094E F0        2351            movx    @dptr,a
094F           2352   ;        sensor_test.c:583: Set_Pin_Output(0x10); 
094F 758210    2353            mov     dpl,#0x10
0952 120000    2354            lcall   _Set_Pin_Output
0955           2355   ;        sensor_test.c:584: BMM150_Init();
0955 120000    2356            lcall   _BMM150_Init
0958           2357   ;        sensor_test.c:586: waitms(500);
0958 9001F4    2358            mov     dptr,#0x01F4
095B 120000    2359            lcall   _waitms
095E           2360   ;        sensor_test.c:587: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
095E 74B0      2361            mov     a,#__str_3
0960 C0E0      2362            push    acc
0962 74D3      2363            mov     a,#(__str_3 >> 8)
0964 C0E0      2364            push    acc
0966 7480      2365            mov     a,#0x80
0968 C0E0      2366            push    acc
096A 120000    2367            lcall   _printf
096D 1581      2368            dec     sp
096F 1581      2369            dec     sp
0971 1581      2370            dec     sp
0973           2371   ;        sensor_test.c:591: __FILE__, __DATE__, __TIME__);
0973           2372   ;        sensor_test.c:590: "Compiled: %s, %s\n\n",
0973 74F0      2373            mov     a,#__str_7
0975 C0E0      2374            push    acc
0977 74D3      2375            mov     a,#(__str_7 >> 8)
0979 C0E0      2376            push    acc
097B 7480      2377            mov     a,#0x80
097D C0E0      2378            push    acc
097F 7430      2379            mov     a,#__str_6
0981 C0E0      2380            push    acc
0983 74D4      2381            mov     a,#(__str_6 >> 8)
0985 C0E0      2382            push    acc
0987 7480      2383            mov     a,#0x80
0989 C0E0      2384            push    acc
098B 7470      2385            mov     a,#__str_5
098D C0E0      2386            push    acc
098F 74D4      2387            mov     a,#(__str_5 >> 8)
0991 C0E0      2388            push    acc
0993 7480      2389            mov     a,#0x80
0995 C0E0      2390            push    acc
0997 74B0      2391            mov     a,#__str_4
0999 C0E0      2392            push    acc
099B 74D4      2393            mov     a,#(__str_4 >> 8)
099D C0E0      2394            push    acc
099F 7480      2395            mov     a,#0x80
09A1 C0E0      2396            push    acc
09A3 120000    2397            lcall   _printf
09A6 E581      2398            mov     a,sp
09A8 24F4      2399            add     a,#0xf4
09AA F581      2400            mov     sp,a
09AC           2401   ;        sensor_test.c:593: while(1)
09AC           2402   L015006?:
09AC           2403   ;        sensor_test.c:595: sum_x = 0.0; 
09AC 90C150    2404            mov     dptr,#_main_sum_x_1_113
09AF           2405   ;        sensor_test.c:596: sum_y = 0.0;  
09AF E4        2406            clr     a
09B0 F0        2407            movx    @dptr,a
09B1 A3        2408            inc     dptr
09B2 F0        2409            movx    @dptr,a
09B3 A3        2410            inc     dptr
09B4 F0        2411            movx    @dptr,a
09B5 A3        2412            inc     dptr
09B6 F0        2413            movx    @dptr,a
09B7 90C1A0    2414            mov     dptr,#_main_sum_y_1_113
09BA F0        2415            movx    @dptr,a
09BB A3        2416            inc     dptr
09BC E4        2417            clr     a
09BD F0        2418            movx    @dptr,a
09BE A3        2419            inc     dptr
09BF F0        2420            movx    @dptr,a
09C0 A3        2421            inc     dptr
09C1 F0        2422            movx    @dptr,a
09C2           2423   ;        sensor_test.c:597: for (i = 0; i < 25; i++){
09C2 7A00      2424            mov     r2,#0x00
09C4           2425   L015008?:
09C4 BA1970    2426            cjne    r2,#0x19,L015020?
09C7           2427   L015020?:
09C7 4000      2428            jc      L015021?
09C9 020000    2429            ljmp    L015011?
09CC           2430   L015021?:
09CC           2431   ;        sensor_test.c:598: BMM150_Read_Data(&mag_x, &mag_y);
09CC 753000    2432            mov     _BMM150_Read_Data_PARM_2,#_main_mag_y_1_113
09CF 7531C1    2433            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_main_mag_y_1_113 >> 8)
09D2 753200    2434            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
09D5 90C0B0    2435            mov     dptr,#_main_mag_x_1_113
09D8 75F000    2436            mov     b,#0x00
09DB C002      2437            push    ar2
09DD 120000    2438            lcall   _BMM150_Read_Data
09E0           2439   ;        sensor_test.c:601: sum_x += (float)mag_x; 
09E0 90C0B0    2440            mov     dptr,#_main_mag_x_1_113
09E3 E0        2441            movx    a,@dptr
09E4 FB        2442            mov     r3,a
09E5 A3        2443            inc     dptr
09E6 E0        2444            movx    a,@dptr
09E7 FC        2445            mov     r4,a
09E8 8B82      2446            mov     dpl,r3
09EA 8C83      2447            mov     dph,r4
09EC 120000    2448            lcall   ___sint2fs
09EF 858280    2449            mov     _main_sloc0_1_0,dpl
09F2 858381    2450            mov     (_main_sloc0_1_0 + 1),dph
09F5 85F082    2451            mov     (_main_sloc0_1_0 + 2),b
09F8 F583      2452            mov     (_main_sloc0_1_0 + 3),a
09FA 90C150    2453            mov     dptr,#_main_sum_x_1_113
09FD E0        2454            movx    a,@dptr
09FE FF        2455            mov     r7,a
09FF A3        2456            inc     dptr
0A00 E0        2457            movx    a,@dptr
0A01 F8        2458            mov     r0,a
0A02 A3        2459            inc     dptr
0A03 E0        2460            movx    a,@dptr
0A04 F9        2461            mov     r1,a
0A05 A3        2462            inc     dptr
0A06 E0        2463            movx    a,@dptr
0A07 FB        2464            mov     r3,a
0A08 C080      2465            push    _main_sloc0_1_0
0A0A C081      2466            push    (_main_sloc0_1_0 + 1)
0A0C C082      2467            push    (_main_sloc0_1_0 + 2)
0A0E C083      2468            push    (_main_sloc0_1_0 + 3)
0A10 8F82      2469            mov     dpl,r7
0A12 8883      2470            mov     dph,r0
0A14 89F0      2471            mov     b,r1
0A16 EB        2472            mov     a,r3
0A17 120000    2473            lcall   ___fsadd
0A1A AB82      2474            mov     r3,dpl
0A1C AC83      2475            mov     r4,dph
0A1E ADF0      2476            mov     r5,b
0A20 FE        2477            mov     r6,a
0A21 E581      2478            mov     a,sp
0A23 24FC      2479            add     a,#0xfc
0A25 F581      2480            mov     sp,a
0A27 90C150    2481            mov     dptr,#_main_sum_x_1_113
0A2A EB        2482            mov     a,r3
0A2B F0        2483            movx    @dptr,a
0A2C A3        2484            inc     dptr
0A2D EC        2485            mov     a,r4
0A2E F0        2486            movx    @dptr,a
0A2F A3        2487            inc     dptr
0A30 ED        2488            mov     a,r5
0A31 F0        2489            movx    @dptr,a
0A32 A3        2490            inc     dptr
0A33 EE        2491            mov     a,r6
0A34 F0        2492            movx    @dptr,a
0A35           2493   ;        sensor_test.c:602: sum_y += (float)mag_y; 
0A35 90C100    2494            mov     dptr,#_main_mag_y_1_113
0A38 E0        2495            movx    a,@dptr
0A39 FB        2496            mov     r3,a
0A3A A3        2497            inc     dptr
0A3B E0        2498            movx    a,@dptr
0A3C FC        2499            mov     r4,a
0A3D 8B82      2500            mov     dpl,r3
0A3F 8C83      2501            mov     dph,r4
0A41 120000    2502            lcall   ___sint2fs
0A44 858280    2503            mov     _main_sloc0_1_0,dpl
0A47 858381    2504            mov     (_main_sloc0_1_0 + 1),dph
0A4A 85F082    2505            mov     (_main_sloc0_1_0 + 2),b
0A4D F583      2506            mov     (_main_sloc0_1_0 + 3),a
0A4F 90C1A0    2507            mov     dptr,#_main_sum_y_1_113
0A52 E0        2508            movx    a,@dptr
0A53 FF        2509            mov     r7,a
0A54 A3        2510            inc     dptr
0A55 E0        2511            movx    a,@dptr
0A56 F8        2512            mov     r0,a
0A57 A3        2513            inc     dptr
0A58 E0        2514            movx    a,@dptr
0A59 F9        2515            mov     r1,a
0A5A A3        2516            inc     dptr
0A5B E0        2517            movx    a,@dptr
0A5C FB        2518            mov     r3,a
0A5D C080      2519            push    _main_sloc0_1_0
0A5F C081      2520            push    (_main_sloc0_1_0 + 1)
0A61 C082      2521            push    (_main_sloc0_1_0 + 2)
0A63 C083      2522            push    (_main_sloc0_1_0 + 3)
0A65 8F82      2523            mov     dpl,r7
0A67 8883      2524            mov     dph,r0
0A69 89F0      2525            mov     b,r1
0A6B EB        2526            mov     a,r3
0A6C 120000    2527            lcall   ___fsadd
0A6F AB82      2528            mov     r3,dpl
0A71 AC83      2529            mov     r4,dph
0A73 ADF0      2530            mov     r5,b
0A75 FE        2531            mov     r6,a
0A76 E581      2532            mov     a,sp
0A78 24FC      2533            add     a,#0xfc
0A7A F581      2534            mov     sp,a
0A7C D002      2535            pop     ar2
0A7E 90C1A0    2536            mov     dptr,#_main_sum_y_1_113
0A81 EB        2537            mov     a,r3
0A82 F0        2538            movx    @dptr,a
0A83 A3        2539            inc     dptr
0A84 EC        2540            mov     a,r4
0A85 F0        2541            movx    @dptr,a
0A86 A3        2542            inc     dptr
0A87 ED        2543            mov     a,r5
0A88 F0        2544            movx    @dptr,a
0A89 A3        2545            inc     dptr
0A8A EE        2546            mov     a,r6
0A8B F0        2547            movx    @dptr,a
0A8C           2548   ;        sensor_test.c:597: for (i = 0; i < 25; i++){
0A8C 0A        2549            inc     r2
0A8D 020000    2550            ljmp    L015008?
0A90           2551   L015011?:
0A90           2552   ;        sensor_test.c:605: avg_angle = atan2f(sum_y/25.0, sum_x/25.0); 
0A90 90C1A0    2553            mov     dptr,#_main_sum_y_1_113
0A93 E0        2554            movx    a,@dptr
0A94 FA        2555            mov     r2,a
0A95 A3        2556            inc     dptr
0A96 E0        2557            movx    a,@dptr
0A97 FB        2558            mov     r3,a
0A98 A3        2559            inc     dptr
0A99 E0        2560            movx    a,@dptr
0A9A FC        2561            mov     r4,a
0A9B A3        2562            inc     dptr
0A9C E0        2563            movx    a,@dptr
0A9D FD        2564            mov     r5,a
0A9E E4        2565            clr     a
0A9F C0E0      2566            push    acc
0AA1 C0E0      2567            push    acc
0AA3 74C8      2568            mov     a,#0xC8
0AA5 C0E0      2569            push    acc
0AA7 7441      2570            mov     a,#0x41
0AA9 C0E0      2571            push    acc
0AAB 8A82      2572            mov     dpl,r2
0AAD 8B83      2573            mov     dph,r3
0AAF 8CF0      2574            mov     b,r4
0AB1 ED        2575            mov     a,r5
0AB2 120000    2576            lcall   ___fsdiv
0AB5 8582C0    2577            mov     _main_sloc1_1_0,dpl
0AB8 8583C1    2578            mov     (_main_sloc1_1_0 + 1),dph
0ABB 85F0C2    2579            mov     (_main_sloc1_1_0 + 2),b
0ABE F5C3      2580            mov     (_main_sloc1_1_0 + 3),a
0AC0 E581      2581            mov     a,sp
0AC2 24FC      2582            add     a,#0xfc
0AC4 F581      2583            mov     sp,a
0AC6 90C150    2584            mov     dptr,#_main_sum_x_1_113
0AC9 E0        2585            movx    a,@dptr
0ACA FE        2586            mov     r6,a
0ACB A3        2587            inc     dptr
0ACC E0        2588            movx    a,@dptr
0ACD FF        2589            mov     r7,a
0ACE A3        2590            inc     dptr
0ACF E0        2591            movx    a,@dptr
0AD0 F8        2592            mov     r0,a
0AD1 A3        2593            inc     dptr
0AD2 E0        2594            movx    a,@dptr
0AD3 F9        2595            mov     r1,a
0AD4 E4        2596            clr     a
0AD5 C0E0      2597            push    acc
0AD7 C0E0      2598            push    acc
0AD9 74C8      2599            mov     a,#0xC8
0ADB C0E0      2600            push    acc
0ADD 7441      2601            mov     a,#0x41
0ADF C0E0      2602            push    acc
0AE1 8E82      2603            mov     dpl,r6
0AE3 8F83      2604            mov     dph,r7
0AE5 88F0      2605            mov     b,r0
0AE7 E9        2606            mov     a,r1
0AE8 120000    2607            lcall   ___fsdiv
0AEB 858280    2608            mov     _main_sloc0_1_0,dpl
0AEE 858381    2609            mov     (_main_sloc0_1_0 + 1),dph
0AF1 85F082    2610            mov     (_main_sloc0_1_0 + 2),b
0AF4 F583      2611            mov     (_main_sloc0_1_0 + 3),a
0AF6 E581      2612            mov     a,sp
0AF8 24FC      2613            add     a,#0xfc
0AFA F581      2614            mov     sp,a
0AFC 858000    2615            mov     _atan2f_PARM_2,_main_sloc0_1_0
0AFF 858101    2616            mov     (_atan2f_PARM_2 + 1),(_main_sloc0_1_0 + 1)
0B02 858202    2617            mov     (_atan2f_PARM_2 + 2),(_main_sloc0_1_0 + 2)
0B05 858303    2618            mov     (_atan2f_PARM_2 + 3),(_main_sloc0_1_0 + 3)
0B08 85C082    2619            mov     dpl,_main_sloc1_1_0
0B0B 85C183    2620            mov     dph,(_main_sloc1_1_0 + 1)
0B0E 85C2F0    2621            mov     b,(_main_sloc1_1_0 + 2)
0B11 E5C3      2622            mov     a,(_main_sloc1_1_0 + 3)
0B13 120000    2623            lcall   _atan2f
0B16 AE82      2624            mov     r6,dpl
0B18 AF83      2625            mov     r7,dph
0B1A A8F0      2626            mov     r0,b
0B1C F9        2627            mov     r1,a
0B1D           2628   ;        sensor_test.c:606: avg_angle *= 180.0 / M_PI; 
0B1D C006      2629            push    ar6
0B1F C007      2630            push    ar7
0B21 C000      2631            push    ar0
0B23 C001      2632            push    ar1
0B25 902EE1    2633            mov     dptr,#0x2EE1
0B28 75F065    2634            mov     b,#0x65
0B2B 7442      2635            mov     a,#0x42
0B2D 120000    2636            lcall   ___fsmul
0B30 AE82      2637            mov     r6,dpl
0B32 AF83      2638            mov     r7,dph
0B34 A8F0      2639            mov     r0,b
0B36 F9        2640            mov     r1,a
0B37 E581      2641            mov     a,sp
0B39 24FC      2642            add     a,#0xfc
0B3B F581      2643            mov     sp,a
0B3D 90C1F0    2644            mov     dptr,#_main_avg_angle_1_113
0B40 EE        2645            mov     a,r6
0B41 F0        2646            movx    @dptr,a
0B42 A3        2647            inc     dptr
0B43 EF        2648            mov     a,r7
0B44 F0        2649            movx    @dptr,a
0B45 A3        2650            inc     dptr
0B46 E8        2651            mov     a,r0
0B47 F0        2652            movx    @dptr,a
0B48 A3        2653            inc     dptr
0B49 E9        2654            mov     a,r1
0B4A F0        2655            movx    @dptr,a
0B4B           2656   ;        sensor_test.c:609: if (avg_angle < 0.0) avg_angle += 360.0; 
0B4B C006      2657            push    ar6
0B4D C007      2658            push    ar7
0B4F C000      2659            push    ar0
0B51 C001      2660            push    ar1
0B53 E4        2661            clr     a
0B54 C0E0      2662            push    acc
0B56 C0E0      2663            push    acc
0B58 C0E0      2664            push    acc
0B5A C0E0      2665            push    acc
0B5C 8E82      2666            mov     dpl,r6
0B5E 8F83      2667            mov     dph,r7
0B60 88F0      2668            mov     b,r0
0B62 E9        2669            mov     a,r1
0B63 120000    2670            lcall   ___fslt
0B66 AA82      2671            mov     r2,dpl
0B68 E581      2672            mov     a,sp
0B6A 24FC      2673            add     a,#0xfc
0B6C F581      2674            mov     sp,a
0B6E D001      2675            pop     ar1
0B70 D000      2676            pop     ar0
0B72 D007      2677            pop     ar7
0B74 D006      2678            pop     ar6
0B76 EA        2679            mov     a,r2
0B77 6000      2680            jz      L015002?
0B79 E4        2681            clr     a
0B7A C0E0      2682            push    acc
0B7C C0E0      2683            push    acc
0B7E 74B4      2684            mov     a,#0xB4
0B80 C0E0      2685            push    acc
0B82 7443      2686            mov     a,#0x43
0B84 C0E0      2687            push    acc
0B86 8E82      2688            mov     dpl,r6
0B88 8F83      2689            mov     dph,r7
0B8A 88F0      2690            mov     b,r0
0B8C E9        2691            mov     a,r1
0B8D 120000    2692            lcall   ___fsadd
0B90 AA82      2693            mov     r2,dpl
0B92 AB83      2694            mov     r3,dph
0B94 ACF0      2695            mov     r4,b
0B96 FD        2696            mov     r5,a
0B97 E581      2697            mov     a,sp
0B99 24FC      2698            add     a,#0xfc
0B9B F581      2699            mov     sp,a
0B9D 90C1F0    2700            mov     dptr,#_main_avg_angle_1_113
0BA0 EA        2701            mov     a,r2
0BA1 F0        2702            movx    @dptr,a
0BA2 A3        2703            inc     dptr
0BA3 EB        2704            mov     a,r3
0BA4 F0        2705            movx    @dptr,a
0BA5 A3        2706            inc     dptr
0BA6 EC        2707            mov     a,r4
0BA7 F0        2708            movx    @dptr,a
0BA8 A3        2709            inc     dptr
0BA9 ED        2710            mov     a,r5
0BAA F0        2711            movx    @dptr,a
0BAB           2712   L015002?:
0BAB           2713   ;        sensor_test.c:610: if (avg_angle > 360.0) avg_angle -= 360.0; 
0BAB 90C1F0    2714            mov     dptr,#_main_avg_angle_1_113
0BAE E0        2715            movx    a,@dptr
0BAF FA        2716            mov     r2,a
0BB0 A3        2717            inc     dptr
0BB1 E0        2718            movx    a,@dptr
0BB2 FB        2719            mov     r3,a
0BB3 A3        2720            inc     dptr
0BB4 E0        2721            movx    a,@dptr
0BB5 FC        2722            mov     r4,a
0BB6 A3        2723            inc     dptr
0BB7 E0        2724            movx    a,@dptr
0BB8 FD        2725            mov     r5,a
0BB9 C002      2726            push    ar2
0BBB C003      2727            push    ar3
0BBD C004      2728            push    ar4
0BBF C005      2729            push    ar5
0BC1 E4        2730            clr     a
0BC2 C0E0      2731            push    acc
0BC4 C0E0      2732            push    acc
0BC6 74B4      2733            mov     a,#0xB4
0BC8 C0E0      2734            push    acc
0BCA 7443      2735            mov     a,#0x43
0BCC C0E0      2736            push    acc
0BCE 8A82      2737            mov     dpl,r2
0BD0 8B83      2738            mov     dph,r3
0BD2 8CF0      2739            mov     b,r4
0BD4 ED        2740            mov     a,r5
0BD5 120000    2741            lcall   ___fsgt
0BD8 AE82      2742            mov     r6,dpl
0BDA E581      2743            mov     a,sp
0BDC 24FC      2744            add     a,#0xfc
0BDE F581      2745            mov     sp,a
0BE0 D005      2746            pop     ar5
0BE2 D004      2747            pop     ar4
0BE4 D003      2748            pop     ar3
0BE6 D002      2749            pop     ar2
0BE8 EE        2750            mov     a,r6
0BE9 6000      2751            jz      L015004?
0BEB E4        2752            clr     a
0BEC C0E0      2753            push    acc
0BEE C0E0      2754            push    acc
0BF0 74B4      2755            mov     a,#0xB4
0BF2 C0E0      2756            push    acc
0BF4 7443      2757            mov     a,#0x43
0BF6 C0E0      2758            push    acc
0BF8 8A82      2759            mov     dpl,r2
0BFA 8B83      2760            mov     dph,r3
0BFC 8CF0      2761            mov     b,r4
0BFE ED        2762            mov     a,r5
0BFF 120000    2763            lcall   ___fssub
0C02 AA82      2764            mov     r2,dpl
0C04 AB83      2765            mov     r3,dph
0C06 ACF0      2766            mov     r4,b
0C08 FD        2767            mov     r5,a
0C09 E581      2768            mov     a,sp
0C0B 24FC      2769            add     a,#0xfc
0C0D F581      2770            mov     sp,a
0C0F 90C1F0    2771            mov     dptr,#_main_avg_angle_1_113
0C12 EA        2772            mov     a,r2
0C13 F0        2773            movx    @dptr,a
0C14 A3        2774            inc     dptr
0C15 EB        2775            mov     a,r3
0C16 F0        2776            movx    @dptr,a
0C17 A3        2777            inc     dptr
0C18 EC        2778            mov     a,r4
0C19 F0        2779            movx    @dptr,a
0C1A A3        2780            inc     dptr
0C1B ED        2781            mov     a,r5
0C1C F0        2782            movx    @dptr,a
0C1D           2783   L015004?:
0C1D           2784   ;        sensor_test.c:611: smoothed_angle = alpha * avg_angle + (1-alpha) * smoothed_angle; 
0C1D 90C1F0    2785            mov     dptr,#_main_avg_angle_1_113
0C20 E0        2786            movx    a,@dptr
0C21 C0E0      2787            push    acc
0C23 A3        2788            inc     dptr
0C24 E0        2789            movx    a,@dptr
0C25 C0E0      2790            push    acc
0C27 A3        2791            inc     dptr
0C28 E0        2792            movx    a,@dptr
0C29 C0E0      2793            push    acc
0C2B A3        2794            inc     dptr
0C2C E0        2795            movx    a,@dptr
0C2D C0E0      2796            push    acc
0C2F 900000    2797            mov     dptr,#0x0000
0C32 75F080    2798            mov     b,#0x80
0C35 743E      2799            mov     a,#0x3E
0C37 120000    2800            lcall   ___fsmul
0C3A AA82      2801            mov     r2,dpl
0C3C AB83      2802            mov     r3,dph
0C3E ACF0      2803            mov     r4,b
0C40 FD        2804            mov     r5,a
0C41 E581      2805            mov     a,sp
0C43 24FC      2806            add     a,#0xfc
0C45 F581      2807            mov     sp,a
0C47 C002      2808            push    ar2
0C49 C003      2809            push    ar3
0C4B C004      2810            push    ar4
0C4D C005      2811            push    ar5
0C4F 90C240    2812            mov     dptr,#_main_smoothed_angle_1_113
0C52 E0        2813            movx    a,@dptr
0C53 C0E0      2814            push    acc
0C55 A3        2815            inc     dptr
0C56 E0        2816            movx    a,@dptr
0C57 C0E0      2817            push    acc
0C59 A3        2818            inc     dptr
0C5A E0        2819            movx    a,@dptr
0C5B C0E0      2820            push    acc
0C5D A3        2821            inc     dptr
0C5E E0        2822            movx    a,@dptr
0C5F C0E0      2823            push    acc
0C61 900000    2824            mov     dptr,#0x0000
0C64 75F040    2825            mov     b,#0x40
0C67 743F      2826            mov     a,#0x3F
0C69 120000    2827            lcall   ___fsmul
0C6C AE82      2828            mov     r6,dpl
0C6E AF83      2829            mov     r7,dph
0C70 A8F0      2830            mov     r0,b
0C72 F9        2831            mov     r1,a
0C73 E581      2832            mov     a,sp
0C75 24FC      2833            add     a,#0xfc
0C77 F581      2834            mov     sp,a
0C79 D005      2835            pop     ar5
0C7B D004      2836            pop     ar4
0C7D D003      2837            pop     ar3
0C7F D002      2838            pop     ar2
0C81 C006      2839            push    ar6
0C83 C007      2840            push    ar7
0C85 C000      2841            push    ar0
0C87 C001      2842            push    ar1
0C89 8A82      2843            mov     dpl,r2
0C8B 8B83      2844            mov     dph,r3
0C8D 8CF0      2845            mov     b,r4
0C8F ED        2846            mov     a,r5
0C90 120000    2847            lcall   ___fsadd
0C93 AA82      2848            mov     r2,dpl
0C95 AB83      2849            mov     r3,dph
0C97 ACF0      2850            mov     r4,b
0C99 FD        2851            mov     r5,a
0C9A E581      2852            mov     a,sp
0C9C 24FC      2853            add     a,#0xfc
0C9E F581      2854            mov     sp,a
0CA0 90C240    2855            mov     dptr,#_main_smoothed_angle_1_113
0CA3 EA        2856            mov     a,r2
0CA4 F0        2857            movx    @dptr,a
0CA5 A3        2858            inc     dptr
0CA6 EB        2859            mov     a,r3
0CA7 F0        2860            movx    @dptr,a
0CA8 A3        2861            inc     dptr
0CA9 EC        2862            mov     a,r4
0CAA F0        2863            movx    @dptr,a
0CAB A3        2864            inc     dptr
0CAC ED        2865            mov     a,r5
0CAD F0        2866            movx    @dptr,a
0CAE           2867   ;        sensor_test.c:613: printf("%f,%f,%f\r\n", sum_x/25.0, sum_y/25.0, smoothed_angle);
0CAE 90C240    2868            mov     dptr,#_main_smoothed_angle_1_113
0CB1 E0        2869            movx    a,@dptr
0CB2 C0E0      2870            push    acc
0CB4 A3        2871            inc     dptr
0CB5 E0        2872            movx    a,@dptr
0CB6 C0E0      2873            push    acc
0CB8 A3        2874            inc     dptr
0CB9 E0        2875            movx    a,@dptr
0CBA C0E0      2876            push    acc
0CBC A3        2877            inc     dptr
0CBD E0        2878            movx    a,@dptr
0CBE C0E0      2879            push    acc
0CC0 C0C0      2880            push    _main_sloc1_1_0
0CC2 C0C1      2881            push    (_main_sloc1_1_0 + 1)
0CC4 C0C2      2882            push    (_main_sloc1_1_0 + 2)
0CC6 C0C3      2883            push    (_main_sloc1_1_0 + 3)
0CC8 C080      2884            push    _main_sloc0_1_0
0CCA C081      2885            push    (_main_sloc0_1_0 + 1)
0CCC C082      2886            push    (_main_sloc0_1_0 + 2)
0CCE C083      2887            push    (_main_sloc0_1_0 + 3)
0CD0 74F0      2888            mov     a,#__str_8
0CD2 C0E0      2889            push    acc
0CD4 74D8      2890            mov     a,#(__str_8 >> 8)
0CD6 C0E0      2891            push    acc
0CD8 7480      2892            mov     a,#0x80
0CDA C0E0      2893            push    acc
0CDC 120000    2894            lcall   _printf
0CDF E581      2895            mov     a,sp
0CE1 24F1      2896            add     a,#0xf1
0CE3 F581      2897            mov     sp,a
0CE5           2898   ;        sensor_test.c:618: waitms(10);
0CE5 90000A    2899            mov     dptr,#0x000A
0CE8 120000    2900            lcall   _waitms
0CEB 020000    2901            ljmp    L015006?
0CEE           2902            rseg R_CSEG
0CEE           2903   
0000           2904            rseg R_XINIT
0000           2905   
0000           2906            rseg R_CONST
0000           2907   __str_0:
0000 4572726F  2908            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
0035 0D        2909            db 0x0D
0036 0A        2910            db 0x0A
0037 00        2911            db 0x00
0038           2912   __str_1:
0038 50726573  2913            db 'Press restart to check again!'
     73207265
     73746172
     7420746F
     20636865
     636B2061
     6761696E
     21
0055 0D        2914            db 0x0D
0056 00        2915            db 0x00
0057           2916   __str_2:
0057 424D4D31  2917            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
0087 0D        2918            db 0x0D
0088 0A        2919            db 0x0A
0089 00        2920            db 0x00
008A           2921   __str_3:
008A 1B        2922            db 0x1B
008B 5B324A    2923            db '[2J'
008E 00        2924            db 0x00
008F           2925   __str_4:
008F 45464D38  2926            db 'EFM8LB1 SPI/BMM150 test program'
     4C423120
     5350492F
     424D4D31
     35302074
     65737420
     70726F67
     72616D
00AE 0A        2927            db 0x0A
00AF 46696C65  2928            db 'File: %s'
     3A202573
00B7 0A        2929            db 0x0A
00B8 436F6D70  2930            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
00C8 0A        2931            db 0x0A
00C9 0A        2932            db 0x0A
00CA 00        2933            db 0x00
00CB           2934   __str_5:
00CB 73656E73  2935            db 'sensor_test.c'
     6F725F74
     6573742E
     63
00D8 00        2936            db 0x00
00D9           2937   __str_6:
00D9 4D617220  2938            db 'Mar 29 2025'
     32392032
     303235
00E4 00        2939            db 0x00
00E5           2940   __str_7:
00E5 31353A33  2941            db '15:32:47'
     323A3437
00ED 00        2942            db 0x00
00EE           2943   __str_8:
00EE 25662C25  2944            db '%f,%f,%f'
     662C2566
00F6 0D        2945            db 0x0D
00F7 0A        2946            db 0x0A
00F8 00        2947            db 0x00
00F9           2948   
0003           2949            CSEG
0003           2950   
0003           2951   end
