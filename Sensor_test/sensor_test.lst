0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Mar 26 13:24:54 2025
0000              5   ;--------------------------------------------------------
                  5   $name sensor_test
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _BMM150_Read_Data
0000             29            public _BMM150_compensate_z
0000             30            public _BMM150_compensate_y
0000             31            public _BMM150_compensate_x
0000             32            public _BMM150_Init
0000             33            public _BMM150_Read_Trim_Registers
0000             34            public _SPI_write
0000             35            public _SPI_read_block
0000             36            public _SPI_read
0000             37            public _SPI_transfer
0000             38            public _waitms
0000             39            public _Timer3us
0000             40            public _Set_Pin_Output
0000             41            public __c51_external_startup
0000             42            public _BMM150_Read_Data_PARM_3
0000             43            public _BMM150_Read_Data_PARM_2
0000             44            public _BMM150_compensate_z_PARM_2
0000             45            public _BMM150_compensate_y_PARM_2
0000             46            public _BMM150_compensate_x_PARM_2
0000             47            public _SPI_write_PARM_2
0000             48            public _SPI_read_block_PARM_3
0000             49            public _SPI_read_block_PARM_2
0000             50            public _dig_xyz1
0000             51            public _dig_xy2
0000             52            public _dig_xy1
0000             53            public _dig_z4
0000             54            public _dig_z3
0000             55            public _dig_z2
0000             56            public _dig_z1
0000             57            public _dig_y2
0000             58            public _dig_y1
0000             59            public _dig_x2
0000             60            public _dig_x1
0000             61   ;--------------------------------------------------------
0000             62   ; Special Function Registers
0000             63   ;--------------------------------------------------------
0000             64   _ACC            DATA 0xe0
0000             65   _ADC0ASAH       DATA 0xb6
0000             66   _ADC0ASAL       DATA 0xb5
0000             67   _ADC0ASCF       DATA 0xa1
0000             68   _ADC0ASCT       DATA 0xc7
0000             69   _ADC0CF0        DATA 0xbc
0000             70   _ADC0CF1        DATA 0xb9
0000             71   _ADC0CF2        DATA 0xdf
0000             72   _ADC0CN0        DATA 0xe8
0000             73   _ADC0CN1        DATA 0xb2
0000             74   _ADC0CN2        DATA 0xb3
0000             75   _ADC0GTH        DATA 0xc4
0000             76   _ADC0GTL        DATA 0xc3
0000             77   _ADC0H          DATA 0xbe
0000             78   _ADC0L          DATA 0xbd
0000             79   _ADC0LTH        DATA 0xc6
0000             80   _ADC0LTL        DATA 0xc5
0000             81   _ADC0MX         DATA 0xbb
0000             82   _B              DATA 0xf0
0000             83   _CKCON0         DATA 0x8e
0000             84   _CKCON1         DATA 0xa6
0000             85   _CLEN0          DATA 0xc6
0000             86   _CLIE0          DATA 0xc7
0000             87   _CLIF0          DATA 0xe8
0000             88   _CLKSEL         DATA 0xa9
0000             89   _CLOUT0         DATA 0xd1
0000             90   _CLU0CF         DATA 0xb1
0000             91   _CLU0FN         DATA 0xaf
0000             92   _CLU0MX         DATA 0x84
0000             93   _CLU1CF         DATA 0xb3
0000             94   _CLU1FN         DATA 0xb2
0000             95   _CLU1MX         DATA 0x85
0000             96   _CLU2CF         DATA 0xb6
0000             97   _CLU2FN         DATA 0xb5
0000             98   _CLU2MX         DATA 0x91
0000             99   _CLU3CF         DATA 0xbf
0000            100   _CLU3FN         DATA 0xbe
0000            101   _CLU3MX         DATA 0xae
0000            102   _CMP0CN0        DATA 0x9b
0000            103   _CMP0CN1        DATA 0x99
0000            104   _CMP0MD         DATA 0x9d
0000            105   _CMP0MX         DATA 0x9f
0000            106   _CMP1CN0        DATA 0xbf
0000            107   _CMP1CN1        DATA 0xac
0000            108   _CMP1MD         DATA 0xab
0000            109   _CMP1MX         DATA 0xaa
0000            110   _CRC0CN0        DATA 0xce
0000            111   _CRC0CN1        DATA 0x86
0000            112   _CRC0CNT        DATA 0xd3
0000            113   _CRC0DAT        DATA 0xcb
0000            114   _CRC0FLIP       DATA 0xcf
0000            115   _CRC0IN         DATA 0xca
0000            116   _CRC0ST         DATA 0xd2
0000            117   _DAC0CF0        DATA 0x91
0000            118   _DAC0CF1        DATA 0x92
0000            119   _DAC0H          DATA 0x85
0000            120   _DAC0L          DATA 0x84
0000            121   _DAC1CF0        DATA 0x93
0000            122   _DAC1CF1        DATA 0x94
0000            123   _DAC1H          DATA 0x8a
0000            124   _DAC1L          DATA 0x89
0000            125   _DAC2CF0        DATA 0x95
0000            126   _DAC2CF1        DATA 0x96
0000            127   _DAC2H          DATA 0x8c
0000            128   _DAC2L          DATA 0x8b
0000            129   _DAC3CF0        DATA 0x9a
0000            130   _DAC3CF1        DATA 0x9c
0000            131   _DAC3H          DATA 0x8e
0000            132   _DAC3L          DATA 0x8d
0000            133   _DACGCF0        DATA 0x88
0000            134   _DACGCF1        DATA 0x98
0000            135   _DACGCF2        DATA 0xa2
0000            136   _DERIVID        DATA 0xad
0000            137   _DEVICEID       DATA 0xb5
0000            138   _DPH            DATA 0x83
0000            139   _DPL            DATA 0x82
0000            140   _EIE1           DATA 0xe6
0000            141   _EIE2           DATA 0xf3
0000            142   _EIP1           DATA 0xbb
0000            143   _EIP1H          DATA 0xee
0000            144   _EIP2           DATA 0xed
0000            145   _EIP2H          DATA 0xf6
0000            146   _EMI0CN         DATA 0xe7
0000            147   _FLKEY          DATA 0xb7
0000            148   _HFO0CAL        DATA 0xc7
0000            149   _HFO1CAL        DATA 0xd6
0000            150   _HFOCN          DATA 0xef
0000            151   _I2C0ADM        DATA 0xff
0000            152   _I2C0CN0        DATA 0xba
0000            153   _I2C0DIN        DATA 0xbc
0000            154   _I2C0DOUT       DATA 0xbb
0000            155   _I2C0FCN0       DATA 0xad
0000            156   _I2C0FCN1       DATA 0xab
0000            157   _I2C0FCT        DATA 0xf5
0000            158   _I2C0SLAD       DATA 0xbd
0000            159   _I2C0STAT       DATA 0xb9
0000            160   _IE             DATA 0xa8
0000            161   _IP             DATA 0xb8
0000            162   _IPH            DATA 0xf2
0000            163   _IT01CF         DATA 0xe4
0000            164   _LFO0CN         DATA 0xb1
0000            165   _P0             DATA 0x80
0000            166   _P0MASK         DATA 0xfe
0000            167   _P0MAT          DATA 0xfd
0000            168   _P0MDIN         DATA 0xf1
0000            169   _P0MDOUT        DATA 0xa4
0000            170   _P0SKIP         DATA 0xd4
0000            171   _P1             DATA 0x90
0000            172   _P1MASK         DATA 0xee
0000            173   _P1MAT          DATA 0xed
0000            174   _P1MDIN         DATA 0xf2
0000            175   _P1MDOUT        DATA 0xa5
0000            176   _P1SKIP         DATA 0xd5
0000            177   _P2             DATA 0xa0
0000            178   _P2MASK         DATA 0xfc
0000            179   _P2MAT          DATA 0xfb
0000            180   _P2MDIN         DATA 0xf3
0000            181   _P2MDOUT        DATA 0xa6
0000            182   _P2SKIP         DATA 0xcc
0000            183   _P3             DATA 0xb0
0000            184   _P3MDIN         DATA 0xf4
0000            185   _P3MDOUT        DATA 0x9c
0000            186   _PCA0CENT       DATA 0x9e
0000            187   _PCA0CLR        DATA 0x9c
0000            188   _PCA0CN0        DATA 0xd8
0000            189   _PCA0CPH0       DATA 0xfc
0000            190   _PCA0CPH1       DATA 0xea
0000            191   _PCA0CPH2       DATA 0xec
0000            192   _PCA0CPH3       DATA 0xf5
0000            193   _PCA0CPH4       DATA 0x85
0000            194   _PCA0CPH5       DATA 0xde
0000            195   _PCA0CPL0       DATA 0xfb
0000            196   _PCA0CPL1       DATA 0xe9
0000            197   _PCA0CPL2       DATA 0xeb
0000            198   _PCA0CPL3       DATA 0xf4
0000            199   _PCA0CPL4       DATA 0x84
0000            200   _PCA0CPL5       DATA 0xdd
0000            201   _PCA0CPM0       DATA 0xda
0000            202   _PCA0CPM1       DATA 0xdb
0000            203   _PCA0CPM2       DATA 0xdc
0000            204   _PCA0CPM3       DATA 0xae
0000            205   _PCA0CPM4       DATA 0xaf
0000            206   _PCA0CPM5       DATA 0xcc
0000            207   _PCA0H          DATA 0xfa
0000            208   _PCA0L          DATA 0xf9
0000            209   _PCA0MD         DATA 0xd9
0000            210   _PCA0POL        DATA 0x96
0000            211   _PCA0PWM        DATA 0xf7
0000            212   _PCON0          DATA 0x87
0000            213   _PCON1          DATA 0xcd
0000            214   _PFE0CN         DATA 0xc1
0000            215   _PRTDRV         DATA 0xf6
0000            216   _PSCTL          DATA 0x8f
0000            217   _PSTAT0         DATA 0xaa
0000            218   _PSW            DATA 0xd0
0000            219   _REF0CN         DATA 0xd1
0000            220   _REG0CN         DATA 0xc9
0000            221   _REVID          DATA 0xb6
0000            222   _RSTSRC         DATA 0xef
0000            223   _SBCON1         DATA 0x94
0000            224   _SBRLH1         DATA 0x96
0000            225   _SBRLL1         DATA 0x95
0000            226   _SBUF           DATA 0x99
0000            227   _SBUF0          DATA 0x99
0000            228   _SBUF1          DATA 0x92
0000            229   _SCON           DATA 0x98
0000            230   _SCON0          DATA 0x98
0000            231   _SCON1          DATA 0xc8
0000            232   _SFRPAGE        DATA 0xa7
0000            233   _SFRPGCN        DATA 0xbc
0000            234   _SFRSTACK       DATA 0xd7
0000            235   _SMB0ADM        DATA 0xd6
0000            236   _SMB0ADR        DATA 0xd7
0000            237   _SMB0CF         DATA 0xc1
0000            238   _SMB0CN0        DATA 0xc0
0000            239   _SMB0DAT        DATA 0xc2
0000            240   _SMB0FCN0       DATA 0xc3
0000            241   _SMB0FCN1       DATA 0xc4
0000            242   _SMB0FCT        DATA 0xef
0000            243   _SMB0RXLN       DATA 0xc5
0000            244   _SMB0TC         DATA 0xac
0000            245   _SMOD1          DATA 0x93
0000            246   _SP             DATA 0x81
0000            247   _SPI0CFG        DATA 0xa1
0000            248   _SPI0CKR        DATA 0xa2
0000            249   _SPI0CN0        DATA 0xf8
0000            250   _SPI0DAT        DATA 0xa3
0000            251   _SPI0FCN0       DATA 0x9a
0000            252   _SPI0FCN1       DATA 0x9b
0000            253   _SPI0FCT        DATA 0xf7
0000            254   _SPI0PCF        DATA 0xdf
0000            255   _TCON           DATA 0x88
0000            256   _TH0            DATA 0x8c
0000            257   _TH1            DATA 0x8d
0000            258   _TL0            DATA 0x8a
0000            259   _TL1            DATA 0x8b
0000            260   _TMOD           DATA 0x89
0000            261   _TMR2CN0        DATA 0xc8
0000            262   _TMR2CN1        DATA 0xfd
0000            263   _TMR2H          DATA 0xcf
0000            264   _TMR2L          DATA 0xce
0000            265   _TMR2RLH        DATA 0xcb
0000            266   _TMR2RLL        DATA 0xca
0000            267   _TMR3CN0        DATA 0x91
0000            268   _TMR3CN1        DATA 0xfe
0000            269   _TMR3H          DATA 0x95
0000            270   _TMR3L          DATA 0x94
0000            271   _TMR3RLH        DATA 0x93
0000            272   _TMR3RLL        DATA 0x92
0000            273   _TMR4CN0        DATA 0x98
0000            274   _TMR4CN1        DATA 0xff
0000            275   _TMR4H          DATA 0xa5
0000            276   _TMR4L          DATA 0xa4
0000            277   _TMR4RLH        DATA 0xa3
0000            278   _TMR4RLL        DATA 0xa2
0000            279   _TMR5CN0        DATA 0xc0
0000            280   _TMR5CN1        DATA 0xf1
0000            281   _TMR5H          DATA 0xd5
0000            282   _TMR5L          DATA 0xd4
0000            283   _TMR5RLH        DATA 0xd3
0000            284   _TMR5RLL        DATA 0xd2
0000            285   _UART0PCF       DATA 0xd9
0000            286   _UART1FCN0      DATA 0x9d
0000            287   _UART1FCN1      DATA 0xd8
0000            288   _UART1FCT       DATA 0xfa
0000            289   _UART1LIN       DATA 0x9e
0000            290   _UART1PCF       DATA 0xda
0000            291   _VDM0CN         DATA 0xff
0000            292   _WDTCN          DATA 0x97
0000            293   _XBR0           DATA 0xe1
0000            294   _XBR1           DATA 0xe2
0000            295   _XBR2           DATA 0xe3
0000            296   _XOSC0CN        DATA 0x86
0000            297   _DPTR           DATA 0x8382
0000            298   _TMR2RL         DATA 0xcbca
0000            299   _TMR3RL         DATA 0x9392
0000            300   _TMR4RL         DATA 0xa3a2
0000            301   _TMR5RL         DATA 0xd3d2
0000            302   _TMR0           DATA 0x8c8a
0000            303   _TMR1           DATA 0x8d8b
0000            304   _TMR2           DATA 0xcfce
0000            305   _TMR3           DATA 0x9594
0000            306   _TMR4           DATA 0xa5a4
0000            307   _TMR5           DATA 0xd5d4
0000            308   _SBRL1          DATA 0x9695
0000            309   _PCA0           DATA 0xfaf9
0000            310   _PCA0CP0        DATA 0xfcfb
0000            311   _PCA0CP1        DATA 0xeae9
0000            312   _PCA0CP2        DATA 0xeceb
0000            313   _PCA0CP3        DATA 0xf5f4
0000            314   _PCA0CP4        DATA 0x8584
0000            315   _PCA0CP5        DATA 0xdedd
0000            316   _ADC0ASA        DATA 0xb6b5
0000            317   _ADC0GT         DATA 0xc4c3
0000            318   _ADC0           DATA 0xbebd
0000            319   _ADC0LT         DATA 0xc6c5
0000            320   _DAC0           DATA 0x8584
0000            321   _DAC1           DATA 0x8a89
0000            322   _DAC2           DATA 0x8c8b
0000            323   _DAC3           DATA 0x8e8d
0000            324   ;--------------------------------------------------------
0000            325   ; special function bits
0000            326   ;--------------------------------------------------------
0000            327   _ACC_0          BIT 0xe0
0000            328   _ACC_1          BIT 0xe1
0000            329   _ACC_2          BIT 0xe2
0000            330   _ACC_3          BIT 0xe3
0000            331   _ACC_4          BIT 0xe4
0000            332   _ACC_5          BIT 0xe5
0000            333   _ACC_6          BIT 0xe6
0000            334   _ACC_7          BIT 0xe7
0000            335   _TEMPE          BIT 0xe8
0000            336   _ADGN0          BIT 0xe9
0000            337   _ADGN1          BIT 0xea
0000            338   _ADWINT         BIT 0xeb
0000            339   _ADBUSY         BIT 0xec
0000            340   _ADINT          BIT 0xed
0000            341   _IPOEN          BIT 0xee
0000            342   _ADEN           BIT 0xef
0000            343   _B_0            BIT 0xf0
0000            344   _B_1            BIT 0xf1
0000            345   _B_2            BIT 0xf2
0000            346   _B_3            BIT 0xf3
0000            347   _B_4            BIT 0xf4
0000            348   _B_5            BIT 0xf5
0000            349   _B_6            BIT 0xf6
0000            350   _B_7            BIT 0xf7
0000            351   _C0FIF          BIT 0xe8
0000            352   _C0RIF          BIT 0xe9
0000            353   _C1FIF          BIT 0xea
0000            354   _C1RIF          BIT 0xeb
0000            355   _C2FIF          BIT 0xec
0000            356   _C2RIF          BIT 0xed
0000            357   _C3FIF          BIT 0xee
0000            358   _C3RIF          BIT 0xef
0000            359   _D1SRC0         BIT 0x88
0000            360   _D1SRC1         BIT 0x89
0000            361   _D1AMEN         BIT 0x8a
0000            362   _D01REFSL       BIT 0x8b
0000            363   _D3SRC0         BIT 0x8c
0000            364   _D3SRC1         BIT 0x8d
0000            365   _D3AMEN         BIT 0x8e
0000            366   _D23REFSL       BIT 0x8f
0000            367   _D0UDIS         BIT 0x98
0000            368   _D1UDIS         BIT 0x99
0000            369   _D2UDIS         BIT 0x9a
0000            370   _D3UDIS         BIT 0x9b
0000            371   _EX0            BIT 0xa8
0000            372   _ET0            BIT 0xa9
0000            373   _EX1            BIT 0xaa
0000            374   _ET1            BIT 0xab
0000            375   _ES0            BIT 0xac
0000            376   _ET2            BIT 0xad
0000            377   _ESPI0          BIT 0xae
0000            378   _EA             BIT 0xaf
0000            379   _PX0            BIT 0xb8
0000            380   _PT0            BIT 0xb9
0000            381   _PX1            BIT 0xba
0000            382   _PT1            BIT 0xbb
0000            383   _PS0            BIT 0xbc
0000            384   _PT2            BIT 0xbd
0000            385   _PSPI0          BIT 0xbe
0000            386   _P0_0           BIT 0x80
0000            387   _P0_1           BIT 0x81
0000            388   _P0_2           BIT 0x82
0000            389   _P0_3           BIT 0x83
0000            390   _P0_4           BIT 0x84
0000            391   _P0_5           BIT 0x85
0000            392   _P0_6           BIT 0x86
0000            393   _P0_7           BIT 0x87
0000            394   _P1_0           BIT 0x90
0000            395   _P1_1           BIT 0x91
0000            396   _P1_2           BIT 0x92
0000            397   _P1_3           BIT 0x93
0000            398   _P1_4           BIT 0x94
0000            399   _P1_5           BIT 0x95
0000            400   _P1_6           BIT 0x96
0000            401   _P1_7           BIT 0x97
0000            402   _P2_0           BIT 0xa0
0000            403   _P2_1           BIT 0xa1
0000            404   _P2_2           BIT 0xa2
0000            405   _P2_3           BIT 0xa3
0000            406   _P2_4           BIT 0xa4
0000            407   _P2_5           BIT 0xa5
0000            408   _P2_6           BIT 0xa6
0000            409   _P3_0           BIT 0xb0
0000            410   _P3_1           BIT 0xb1
0000            411   _P3_2           BIT 0xb2
0000            412   _P3_3           BIT 0xb3
0000            413   _P3_4           BIT 0xb4
0000            414   _P3_7           BIT 0xb7
0000            415   _CCF0           BIT 0xd8
0000            416   _CCF1           BIT 0xd9
0000            417   _CCF2           BIT 0xda
0000            418   _CCF3           BIT 0xdb
0000            419   _CCF4           BIT 0xdc
0000            420   _CCF5           BIT 0xdd
0000            421   _CR             BIT 0xde
0000            422   _CF             BIT 0xdf
0000            423   _PARITY         BIT 0xd0
0000            424   _F1             BIT 0xd1
0000            425   _OV             BIT 0xd2
0000            426   _RS0            BIT 0xd3
0000            427   _RS1            BIT 0xd4
0000            428   _F0             BIT 0xd5
0000            429   _AC             BIT 0xd6
0000            430   _CY             BIT 0xd7
0000            431   _RI             BIT 0x98
0000            432   _TI             BIT 0x99
0000            433   _RB8            BIT 0x9a
0000            434   _TB8            BIT 0x9b
0000            435   _REN            BIT 0x9c
0000            436   _CE             BIT 0x9d
0000            437   _SMODE          BIT 0x9e
0000            438   _RI1            BIT 0xc8
0000            439   _TI1            BIT 0xc9
0000            440   _RBX1           BIT 0xca
0000            441   _TBX1           BIT 0xcb
0000            442   _REN1           BIT 0xcc
0000            443   _PERR1          BIT 0xcd
0000            444   _OVR1           BIT 0xce
0000            445   _SI             BIT 0xc0
0000            446   _ACK            BIT 0xc1
0000            447   _ARBLOST        BIT 0xc2
0000            448   _ACKRQ          BIT 0xc3
0000            449   _STO            BIT 0xc4
0000            450   _STA            BIT 0xc5
0000            451   _TXMODE         BIT 0xc6
0000            452   _MASTER         BIT 0xc7
0000            453   _SPIEN          BIT 0xf8
0000            454   _TXNF           BIT 0xf9
0000            455   _NSSMD0         BIT 0xfa
0000            456   _NSSMD1         BIT 0xfb
0000            457   _RXOVRN         BIT 0xfc
0000            458   _MODF           BIT 0xfd
0000            459   _WCOL           BIT 0xfe
0000            460   _SPIF           BIT 0xff
0000            461   _IT0            BIT 0x88
0000            462   _IE0            BIT 0x89
0000            463   _IT1            BIT 0x8a
0000            464   _IE1            BIT 0x8b
0000            465   _TR0            BIT 0x8c
0000            466   _TF0            BIT 0x8d
0000            467   _TR1            BIT 0x8e
0000            468   _TF1            BIT 0x8f
0000            469   _T2XCLK0        BIT 0xc8
0000            470   _T2XCLK1        BIT 0xc9
0000            471   _TR2            BIT 0xca
0000            472   _T2SPLIT        BIT 0xcb
0000            473   _TF2CEN         BIT 0xcc
0000            474   _TF2LEN         BIT 0xcd
0000            475   _TF2L           BIT 0xce
0000            476   _TF2H           BIT 0xcf
0000            477   _T4XCLK0        BIT 0x98
0000            478   _T4XCLK1        BIT 0x99
0000            479   _TR4            BIT 0x9a
0000            480   _T4SPLIT        BIT 0x9b
0000            481   _TF4CEN         BIT 0x9c
0000            482   _TF4LEN         BIT 0x9d
0000            483   _TF4L           BIT 0x9e
0000            484   _TF4H           BIT 0x9f
0000            485   _T5XCLK0        BIT 0xc0
0000            486   _T5XCLK1        BIT 0xc1
0000            487   _TR5            BIT 0xc2
0000            488   _T5SPLIT        BIT 0xc3
0000            489   _TF5CEN         BIT 0xc4
0000            490   _TF5LEN         BIT 0xc5
0000            491   _TF5L           BIT 0xc6
0000            492   _TF5H           BIT 0xc7
0000            493   _RIE            BIT 0xd8
0000            494   _RXTO0          BIT 0xd9
0000            495   _RXTO1          BIT 0xda
0000            496   _RFRQ           BIT 0xdb
0000            497   _TIE            BIT 0xdc
0000            498   _TXHOLD         BIT 0xdd
0000            499   _TXNF1          BIT 0xde
0000            500   _TFRQ           BIT 0xdf
0000            501   ;--------------------------------------------------------
0000            502   ; overlayable register banks
0000            503   ;--------------------------------------------------------
0000            504            rbank0 segment data overlay
0000            505   ;--------------------------------------------------------
0000            506   ; internal ram data
0000            507   ;--------------------------------------------------------
0000            508            rseg R_DSEG
0000            509   _dig_x1:
0000            510            ds 1
0001            511   _dig_x2:
0001            512            ds 1
0002            513   _dig_y1:
0002            514            ds 1
0003            515   _dig_y2:
0003            516            ds 1
0004            517   _dig_z1:
0004            518            ds 1
0005            519   _dig_z2:
0005            520            ds 1
0006            521   _dig_z3:
0006            522            ds 1
0007            523   _dig_z4:
0007            524            ds 1
0008            525   _dig_xy1:
0008            526            ds 1
0009            527   _dig_xy2:
0009            528            ds 1
000A            529   _dig_xyz1:
000A            530            ds 1
000B            531   _SPI_read_block_PARM_2:
000B            532            ds 3
000E            533   _SPI_read_block_PARM_3:
000E            534            ds 1
000F            535   _SPI_write_PARM_2:
000F            536            ds 1
0010            537   _BMM150_compensate_x_PARM_2:
0010            538            ds 3
0013            539   _BMM150_compensate_x_sloc0_1_0:
0013            540            ds 4
0017            541   _BMM150_compensate_y_PARM_2:
0017            542            ds 3
001A            543   _BMM150_compensate_y_sloc0_1_0:
001A            544            ds 4
001E            545   _BMM150_compensate_z_PARM_2:
001E            546            ds 3
0021            547   _BMM150_compensate_z_sloc0_1_0:
0021            548            ds 2
0023            549   _BMM150_compensate_z_sloc1_1_0:
0023            550            ds 4
0027            551   _BMM150_compensate_z_sloc2_1_0:
0027            552            ds 4
002B            553   _BMM150_Read_Data_PARM_2:
002B            554            ds 3
002E            555   _BMM150_Read_Data_PARM_3:
002E            556            ds 3
0031            557   _BMM150_Read_Data_mag_x_1_118:
0031            558            ds 3
0034            559   _BMM150_Read_Data_raw_y_lsb_1_119:
0034            560            ds 1
0035            561   _BMM150_Read_Data_raw_y_msb_1_119:
0035            562            ds 1
0036            563   _BMM150_Read_Data_raw_z_lsb_1_119:
0036            564            ds 1
0037            565   _BMM150_Read_Data_raw_z_msb_1_119:
0037            566            ds 1
0038            567   _BMM150_Read_Data_raw_rhall_lsb_1_119:
0038            568            ds 1
0039            569   _BMM150_Read_Data_raw_rhall_msb_1_119:
0039            570            ds 1
003A            571   _BMM150_Read_Data_raw_z_1_119:
003A            572            ds 2
003C            573   _BMM150_Read_Data_x_val_1_119:
003C            574            ds 2
003E            575   _BMM150_Read_Data_y_val_1_119:
003E            576            ds 2
0040            577   _BMM150_Read_Data_z_val_1_119:
0040            578            ds 2
0042            579   _BMM150_Read_Data_rhall_val_1_119:
0042            580            ds 2
0044            581   _main_sloc0_1_0:
0044            582            ds 1
0045            583   _main_sloc1_1_0:
0045            584            ds 4
0049            585   ;--------------------------------------------------------
0049            586   ; overlayable items in internal ram 
0049            587   ;--------------------------------------------------------
0000            588            rseg    R_OSEG
0000            589            rseg    R_OSEG
0000            590            rseg    R_OSEG
0000            591   ;--------------------------------------------------------
0000            592   ; indirectly addressable internal ram data
0000            593   ;--------------------------------------------------------
0000            594            rseg R_ISEG
0000            595   ;--------------------------------------------------------
0000            596   ; absolute internal ram data
0000            597   ;--------------------------------------------------------
0000            598            DSEG
0000            599   ;--------------------------------------------------------
0000            600   ; bit data
0000            601   ;--------------------------------------------------------
0000            602            rseg R_BSEG
0000            603   ;--------------------------------------------------------
0000            604   ; paged external ram data
0000            605   ;--------------------------------------------------------
0000            606            rseg R_PSEG
0000            607   ;--------------------------------------------------------
0000            608   ; external ram data
0000            609   ;--------------------------------------------------------
0000            610            rseg R_XSEG
0000            611   _BMM150_Read_Trim_Registers_trim_x1y1_1_84:
0000            612            ds 2
0002            613   _BMM150_Read_Trim_Registers_trim_xyz_data_1_84:
0002            614            ds 4
0006            615   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_84:
0006            616            ds 10
0010            617   _BMM150_compensate_x_retval_1_93:
0010            618            ds 2
0012            619   _BMM150_compensate_x_process_comp_x0_1_93:
0012            620            ds 2
0014            621   _BMM150_compensate_y_retval_1_102:
0014            622            ds 2
0016            623   _BMM150_compensate_y_process_comp_y0_1_102:
0016            624            ds 2
0018            625   _BMM150_compensate_z_retval_1_111:
0018            626            ds 4
001C            627   _main_mag_x_1_123:
001C            628            ds 2
001E            629   _main_mag_y_1_123:
001E            630            ds 2
0020            631   _main_mag_z_1_123:
0020            632            ds 2
0022            633   _main_angle_1_123:
0022            634            ds 4
0026            635   _main_sum_x_1_123:
0026            636            ds 4
002A            637   _main_sum_y_1_123:
002A            638            ds 4
002E            639   _main_avg_angle_1_123:
002E            640            ds 4
0032            641   _main_smoothed_angle_1_123:
0032            642            ds 4
0036            643   ;--------------------------------------------------------
0036            644   ; absolute external ram data
0036            645   ;--------------------------------------------------------
0000            646            XSEG
0000            647   ;--------------------------------------------------------
0000            648   ; external initialized ram data
0000            649   ;--------------------------------------------------------
0000            650            rseg R_IXSEG
0000            651            rseg R_HOME
0000            652            rseg R_GSINIT
0000            653            rseg R_CSEG
0000            654   ;--------------------------------------------------------
0000            655   ; Reset entry point and interrupt vectors
0000            656   ;--------------------------------------------------------
0000            657            CSEG at 0x0000
0000 020000     658            ljmp    _crt0
0003            659   ;--------------------------------------------------------
0003            660   ; global & static initialisations
0003            661   ;--------------------------------------------------------
0000            662            rseg R_HOME
0000            663            rseg R_GSINIT
0000            664            rseg R_GSINIT
0000            665   ;--------------------------------------------------------
0000            666   ; data variables initialization
0000            667   ;--------------------------------------------------------
0000            668            rseg R_DINIT
0000            669            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            670   ;--------------------------------------------------------
0000            671   ; code
0000            672   ;--------------------------------------------------------
0000            673            rseg R_CSEG
0000            674   ;------------------------------------------------------------
0000            675   ;Allocation info for local variables in function '_c51_external_startup'
0000            676   ;------------------------------------------------------------
0000            677   ;------------------------------------------------------------
0000            678   ;        sensor_test.c:74: char _c51_external_startup (void)
0000            679   ;        -----------------------------------------
0000            680   ;         function _c51_external_startup
0000            681   ;        -----------------------------------------
0000            682   __c51_external_startup:
0000            683            using   0
0000            684   ;        sensor_test.c:77: SFRPAGE = 0x00;
0000 75A700     685            mov     _SFRPAGE,#0x00
0003            686   ;        sensor_test.c:78: WDTCN = 0xDE; //First key
0003 7597DE     687            mov     _WDTCN,#0xDE
0006            688   ;        sensor_test.c:79: WDTCN = 0xAD; //Second key
0006 7597AD     689            mov     _WDTCN,#0xAD
0009            690   ;        sensor_test.c:81: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     691            mov     _VDM0CN,#0x80
000C            692   ;        sensor_test.c:82: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     693            mov     _RSTSRC,#0x06
000F            694   ;        sensor_test.c:89: SFRPAGE = 0x10;
000F 75A710     695            mov     _SFRPAGE,#0x10
0012            696   ;        sensor_test.c:90: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     697            mov     _PFE0CN,#0x20
0015            698   ;        sensor_test.c:91: SFRPAGE = 0x00;
0015 75A700     699            mov     _SFRPAGE,#0x00
0018            700   ;        sensor_test.c:112: CLKSEL = 0x00;
0018 75A900     701            mov     _CLKSEL,#0x00
001B            702   ;        sensor_test.c:113: CLKSEL = 0x00;
001B 75A900     703            mov     _CLKSEL,#0x00
001E            704   ;        sensor_test.c:114: while ((CLKSEL & 0x80) == 0);
001E            705   L002001?:
001E E5A9       706            mov     a,_CLKSEL
0020 30E728     707            jnb     acc.7,L002001?
0023            708   ;        sensor_test.c:115: CLKSEL = 0x03;
0023 75A903     709            mov     _CLKSEL,#0x03
0026            710   ;        sensor_test.c:116: CLKSEL = 0x03;
0026 75A903     711            mov     _CLKSEL,#0x03
0029            712   ;        sensor_test.c:117: while ((CLKSEL & 0x80) == 0);
0029            713   L002004?:
0029 E5A9       714            mov     a,_CLKSEL
002B 30E7A8     715            jnb     acc.7,L002004?
002E            716   ;        sensor_test.c:123: P0MDOUT = 0b_0000_1101; // SCK, MOSI, and P0.3 are push-pull, others open-drain
002E 75A40D     717            mov     _P0MDOUT,#0x0D
0031            718   ;        sensor_test.c:124: P1MDOUT = 0b_0000_0000; // P1 all open-drain
0031 75A500     719            mov     _P1MDOUT,#0x00
0034            720   ;        sensor_test.c:125: XBR0 = 0b_0000_0011;    // SPI0E=1, URT0E=1
0034 75E103     721            mov     _XBR0,#0x03
0037            722   ;        sensor_test.c:126: XBR1 = 0b_0000_0000;
0037 75E200     723            mov     _XBR1,#0x00
003A            724   ;        sensor_test.c:127: XBR2 = 0b_0100_0000;    // Enable crossbar and weak pull-ups
003A 75E340     725            mov     _XBR2,#0x40
003D            726   ;        sensor_test.c:133: SCON0 = 0x10;
003D 759810     727            mov     _SCON0,#0x10
0040            728   ;        sensor_test.c:134: TH1 = 0x100-((SYSCLK/BAUDRATE)/(12L*2L));
0040 758DE6     729            mov     _TH1,#0xE6
0043            730   ;        sensor_test.c:135: TL1 = TH1;      // Init Timer1
0043 858D8B     731            mov     _TL1,_TH1
0046            732   ;        sensor_test.c:136: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     733            anl     _TMOD,#0x0F
0049            734   ;        sensor_test.c:137: TMOD |=  0x20;                       
0049 438920     735            orl     _TMOD,#0x20
004C            736   ;        sensor_test.c:138: TR1 = 1; // START Timer1
004C D28E       737            setb    _TR1
004E            738   ;        sensor_test.c:139: TI = 1;  // Indicate TX0 ready
004E D299       739            setb    _TI
0050            740   ;        sensor_test.c:142: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
0050 75A211     741            mov     _SPI0CKR,#0x11
0053            742   ;        sensor_test.c:143: SPI0CFG = 0b_1110_0000; // this is mode 3, you need to determine the sampling etc. in datasheet
0053 75A1E0     743            mov     _SPI0CFG,#0xE0
0056            744   ;        sensor_test.c:144: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0056 75F801     745            mov     _SPI0CN0,#0x01
0059            746   ;        sensor_test.c:146: return 0;
0059 758200     747            mov     dpl,#0x00
005C 22         748            ret
005D            749   ;------------------------------------------------------------
005D            750   ;Allocation info for local variables in function 'Set_Pin_Output'
005D            751   ;------------------------------------------------------------
005D            752   ;mask                      Allocated with name '_Set_Pin_Output_mask_1_67'
005D            753   ;pin                       Allocated to registers r2 
005D            754   ;------------------------------------------------------------
005D            755   ;        sensor_test.c:149: void Set_Pin_Output (unsigned char pin)
005D            756   ;        -----------------------------------------
005D            757   ;         function Set_Pin_Output
005D            758   ;        -----------------------------------------
005D            759   _Set_Pin_Output:
005D AA82       760            mov     r2,dpl
005F            761   ;        sensor_test.c:153: mask=(1<<(pin&0x7));
005F 7407       762            mov     a,#0x07
0061 5A         763            anl     a,r2
0062 F5F0       764            mov     b,a
0064 05F0       765            inc     b
0066 7401       766            mov     a,#0x01
0068 8000       767            sjmp    L003011?
006A            768   L003009?:
006A 25E0       769            add     a,acc
006C            770   L003011?:
006C D5F0A8     771            djnz    b,L003009?
006F FB         772            mov     r3,a
0070            773   ;        sensor_test.c:154: switch(pin/0x10)
0070 EA         774            mov     a,r2
0071 C4         775            swap    a
0072 540F       776            anl     a,#0x0f
0074 FA         777            mov  r2,a
0075 24FC       778            add     a,#0xff - 0x03
0077 4000       779            jc      L003006?
0079 EA         780            mov     a,r2
007A 2A         781            add     a,r2
007B 2A         782            add     a,r2
007C 90C828     783            mov     dptr,#L003013?
007F 73         784            jmp     @a+dptr
0080            785   L003013?:
0080 020000     786            ljmp    L003001?
0083 020000     787            ljmp    L003002?
0086 020000     788            ljmp    L003003?
0089 020000     789            ljmp    L003004?
008C            790   ;        sensor_test.c:156: case 0: P0MDOUT |= mask; break;
008C            791   L003001?:
008C EB         792            mov     a,r3
008D 42A4       793            orl     _P0MDOUT,a
008F            794   ;        sensor_test.c:157: case 1: P1MDOUT |= mask; break;
008F 22         795            ret
0090            796   L003002?:
0090 EB         797            mov     a,r3
0091 42A5       798            orl     _P1MDOUT,a
0093            799   ;        sensor_test.c:158: case 2: P2MDOUT |= mask; break; 
0093 22         800            ret
0094            801   L003003?:
0094 EB         802            mov     a,r3
0095 42A6       803            orl     _P2MDOUT,a
0097            804   ;        sensor_test.c:159: case 3: P3MDOUT |= mask; break; 
0097 22         805            ret
0098            806   L003004?:
0098 EB         807            mov     a,r3
0099 429C       808            orl     _P3MDOUT,a
009B            809   ;        sensor_test.c:160: }    
009B            810   L003006?:
009B 22         811            ret
009C            812   ;------------------------------------------------------------
009C            813   ;Allocation info for local variables in function 'Timer3us'
009C            814   ;------------------------------------------------------------
009C            815   ;i                         Allocated with name '_Timer3us_i_1_70'
009C            816   ;us                        Allocated to registers r2 
009C            817   ;------------------------------------------------------------
009C            818   ;        sensor_test.c:164: void Timer3us(unsigned char us)
009C            819   ;        -----------------------------------------
009C            820   ;         function Timer3us
009C            821   ;        -----------------------------------------
009C            822   _Timer3us:
009C AA82       823            mov     r2,dpl
009E            824   ;        sensor_test.c:169: CKCON0|=0b_0100_0000;
009E 438E40     825            orl     _CKCON0,#0x40
00A1            826   ;        sensor_test.c:171: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
00A1 7592B8     827            mov     _TMR3RL,#0xB8
00A4 7593FF     828            mov     (_TMR3RL >> 8),#0xFF
00A7            829   ;        sensor_test.c:172: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
00A7 859294     830            mov     _TMR3,_TMR3RL
00AA 859395     831            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
00AD            832   ;        sensor_test.c:174: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
00AD 759104     833            mov     _TMR3CN0,#0x04
00B0            834   ;        sensor_test.c:175: for (i = 0; i < us; i++)       // Count <us> overflows
00B0 7B00       835            mov     r3,#0x00
00B2            836   L004004?:
00B2 C3         837            clr     c
00B3 EB         838            mov     a,r3
00B4 9A         839            subb    a,r2
00B5 5000       840            jnc     L004007?
00B7            841   ;        sensor_test.c:177: while (!(TMR3CN0 & 0x80));  // Wait for overflow
00B7            842   L004001?:
00B7 E591       843            mov     a,_TMR3CN0
00B9 30E7E8     844            jnb     acc.7,L004001?
00BC            845   ;        sensor_test.c:178: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
00BC 53917F     846            anl     _TMR3CN0,#0x7F
00BF            847   ;        sensor_test.c:175: for (i = 0; i < us; i++)       // Count <us> overflows
00BF 0B         848            inc     r3
00C0 8000       849            sjmp    L004004?
00C2            850   L004007?:
00C2            851   ;        sensor_test.c:180: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00C2 759100     852            mov     _TMR3CN0,#0x00
00C5 22         853            ret
00C6            854   ;------------------------------------------------------------
00C6            855   ;Allocation info for local variables in function 'waitms'
00C6            856   ;------------------------------------------------------------
00C6            857   ;ms                        Allocated to registers r2 r3 
00C6            858   ;j                         Allocated with name '_waitms_j_1_73'
00C6            859   ;k                         Allocated with name '_waitms_k_1_73'
00C6            860   ;------------------------------------------------------------
00C6            861   ;        sensor_test.c:183: void waitms (unsigned int ms)
00C6            862   ;        -----------------------------------------
00C6            863   ;         function waitms
00C6            864   ;        -----------------------------------------
00C6            865   _waitms:
00C6 AA82       866            mov     r2,dpl
00C8 AB83       867            mov     r3,dph
00CA            868   ;        sensor_test.c:187: for(j=0; j<ms; j++)
00CA 7C00       869            mov     r4,#0x00
00CC 7D00       870            mov     r5,#0x00
00CE            871   L005005?:
00CE C3         872            clr     c
00CF EC         873            mov     a,r4
00D0 9A         874            subb    a,r2
00D1 ED         875            mov     a,r5
00D2 9B         876            subb    a,r3
00D3 5000       877            jnc     L005009?
00D5            878   ;        sensor_test.c:188: for (k=0; k<4; k++) Timer3us(250);
00D5 7E00       879            mov     r6,#0x00
00D7            880   L005001?:
00D7 BE0428     881            cjne    r6,#0x04,L005018?
00DA            882   L005018?:
00DA 5000       883            jnc     L005007?
00DC 7582FA     884            mov     dpl,#0xFA
00DF C002       885            push    ar2
00E1 C003       886            push    ar3
00E3 C004       887            push    ar4
00E5 C005       888            push    ar5
00E7 C006       889            push    ar6
00E9 120000     890            lcall   _Timer3us
00EC D006       891            pop     ar6
00EE D005       892            pop     ar5
00F0 D004       893            pop     ar4
00F2 D003       894            pop     ar3
00F4 D002       895            pop     ar2
00F6 0E         896            inc     r6
00F7 8000       897            sjmp    L005001?
00F9            898   L005007?:
00F9            899   ;        sensor_test.c:187: for(j=0; j<ms; j++)
00F9 0C         900            inc     r4
00FA BC0068     901            cjne    r4,#0x00,L005005?
00FD 0D         902            inc     r5
00FE 8000       903            sjmp    L005005?
0100            904   L005009?:
0100 22         905            ret
0101            906   ;------------------------------------------------------------
0101            907   ;Allocation info for local variables in function 'SPI_transfer'
0101            908   ;------------------------------------------------------------
0101            909   ;tx_data                   Allocated to registers 
0101            910   ;------------------------------------------------------------
0101            911   ;        sensor_test.c:191: unsigned char SPI_transfer(unsigned char tx_data)
0101            912   ;        -----------------------------------------
0101            913   ;         function SPI_transfer
0101            914   ;        -----------------------------------------
0101            915   _SPI_transfer:
0101 8582A3     916            mov     _SPI0DAT,dpl
0104            917   ;        sensor_test.c:194: while (!SPIF);      // Wait for transfer to complete
0104            918   L006001?:
0104            919   ;        sensor_test.c:195: SPIF = 0;           // Clear SPI interrupt flag
0104 10FFE8     920            jbc     _SPIF,L006008?
0107 8000       921            sjmp    L006001?
0109            922   L006008?:
0109            923   ;        sensor_test.c:196: return SPI0DAT;     // Return received data
0109 85A382     924            mov     dpl,_SPI0DAT
010C 22         925            ret
010D            926   ;------------------------------------------------------------
010D            927   ;Allocation info for local variables in function 'SPI_read'
010D            928   ;------------------------------------------------------------
010D            929   ;reg_addr                  Allocated to registers r2 
010D            930   ;value                     Allocated to registers 
010D            931   ;------------------------------------------------------------
010D            932   ;        sensor_test.c:199: unsigned char SPI_read(unsigned char reg_addr)
010D            933   ;        -----------------------------------------
010D            934   ;         function SPI_read
010D            935   ;        -----------------------------------------
010D            936   _SPI_read:
010D AA82       937            mov     r2,dpl
010F            938   ;        sensor_test.c:204: reg_addr = reg_addr | 0x80;
010F 430280     939            orl     ar2,#0x80
0112            940   ;        sensor_test.c:206: CS = 0;                // Select the device
0112 C283       941            clr     _P0_3
0114            942   ;        sensor_test.c:207: SPI_transfer(reg_addr);     // Send register address
0114 8A82       943            mov     dpl,r2
0116 120000     944            lcall   _SPI_transfer
0119            945   ;        sensor_test.c:208: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
0119 758200     946            mov     dpl,#0x00
011C 120000     947            lcall   _SPI_transfer
011F            948   ;        sensor_test.c:209: CS = 1;                // Deselect the device
011F D283       949            setb    _P0_3
0121            950   ;        sensor_test.c:211: return value;
0121 22         951            ret
0122            952   ;------------------------------------------------------------
0122            953   ;Allocation info for local variables in function 'SPI_read_block'
0122            954   ;------------------------------------------------------------
0122            955   ;buffer                    Allocated with name '_SPI_read_block_PARM_2'
0122            956   ;len                       Allocated with name '_SPI_read_block_PARM_3'
0122            957   ;start_addr                Allocated to registers r2 
0122            958   ;i                         Allocated to registers r2 
0122            959   ;------------------------------------------------------------
0122            960   ;        sensor_test.c:214: void SPI_read_block(unsigned char start_addr, uint8_t *buffer, uint8_t len)
0122            961   ;        -----------------------------------------
0122            962   ;         function SPI_read_block
0122            963   ;        -----------------------------------------
0122            964   _SPI_read_block:
0122 AA82       965            mov     r2,dpl
0124            966   ;        sensor_test.c:217: start_addr |= 0x80; // Set MSB for read
0124 430280     967            orl     ar2,#0x80
0127            968   ;        sensor_test.c:218: CS = 0;
0127 C283       969            clr     _P0_3
0129            970   ;        sensor_test.c:219: SPI_transfer(start_addr);
0129 8A82       971            mov     dpl,r2
012B 120000     972            lcall   _SPI_transfer
012E            973   ;        sensor_test.c:220: for (i = 0; i < len; i++) {
012E 7A00       974            mov     r2,#0x00
0130            975   L008001?:
0130 C3         976            clr     c
0131 EA         977            mov     a,r2
0132 9560       978            subb    a,_SPI_read_block_PARM_3
0134 5000       979            jnc     L008004?
0136            980   ;        sensor_test.c:221: buffer[i] = SPI_transfer(0x00); // Dummy writes
0136 EA         981            mov     a,r2
0137 25B0       982            add     a,_SPI_read_block_PARM_2
0139 FB         983            mov     r3,a
013A E4         984            clr     a
013B 35B1       985            addc    a,(_SPI_read_block_PARM_2 + 1)
013D FC         986            mov     r4,a
013E ADB2       987            mov     r5,(_SPI_read_block_PARM_2 + 2)
0140 758200     988            mov     dpl,#0x00
0143 C002       989            push    ar2
0145 C003       990            push    ar3
0147 C004       991            push    ar4
0149 C005       992            push    ar5
014B 120000     993            lcall   _SPI_transfer
014E AE82       994            mov     r6,dpl
0150 D005       995            pop     ar5
0152 D004       996            pop     ar4
0154 D003       997            pop     ar3
0156 D002       998            pop     ar2
0158 8B82       999            mov     dpl,r3
015A 8C83      1000            mov     dph,r4
015C 8DF0      1001            mov     b,r5
015E EE        1002            mov     a,r6
015F 120000    1003            lcall   __gptrput
0162           1004   ;        sensor_test.c:220: for (i = 0; i < len; i++) {
0162 0A        1005            inc     r2
0163 8000      1006            sjmp    L008001?
0165           1007   L008004?:
0165           1008   ;        sensor_test.c:223: CS = 1;
0165 D283      1009            setb    _P0_3
0167 22        1010            ret
0168           1011   ;------------------------------------------------------------
0168           1012   ;Allocation info for local variables in function 'SPI_write'
0168           1013   ;------------------------------------------------------------
0168           1014   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0168           1015   ;reg_addr                  Allocated to registers r2 
0168           1016   ;------------------------------------------------------------
0168           1017   ;        sensor_test.c:227: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0168           1018   ;        -----------------------------------------
0168           1019   ;         function SPI_write
0168           1020   ;        -----------------------------------------
0168           1021   _SPI_write:
0168 AA82      1022            mov     r2,dpl
016A           1023   ;        sensor_test.c:230: reg_addr = reg_addr & 0x7F;
016A 53027F    1024            anl     ar2,#0x7F
016D           1025   ;        sensor_test.c:232: CS = 0;                // Select device
016D C283      1026            clr     _P0_3
016F           1027   ;        sensor_test.c:233: SPI_transfer(reg_addr);     // Send register address
016F 8A82      1028            mov     dpl,r2
0171 120000    1029            lcall   _SPI_transfer
0174           1030   ;        sensor_test.c:234: SPI_transfer(reg_value);    // Send value
0174 851082    1031            mov     dpl,_SPI_write_PARM_2
0177 120000    1032            lcall   _SPI_transfer
017A           1033   ;        sensor_test.c:235: CS = 1;                // Deselect device
017A D283      1034            setb    _P0_3
017C 22        1035            ret
017D           1036   ;------------------------------------------------------------
017D           1037   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
017D           1038   ;------------------------------------------------------------
017D           1039   ;i                         Allocated with name '_BMM150_Read_Trim_Registers_i_1_84'
017D           1040   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_84'
017D           1041   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_84'
017D           1042   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_84'
017D           1043   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84'
017D           1044   ;------------------------------------------------------------
017D           1045   ;        sensor_test.c:238: void BMM150_Read_Trim_Registers(void)
017D           1046   ;        -----------------------------------------
017D           1047   ;         function BMM150_Read_Trim_Registers
017D           1048   ;        -----------------------------------------
017D           1049   _BMM150_Read_Trim_Registers:
017D           1050   ;        sensor_test.c:242: xdata uint8_t trim_x1y1[2] = {0};
017D 90C088    1051            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_84
0180           1052   ;        sensor_test.c:243: xdata uint8_t trim_xyz_data[4] = {0};
0180 E4        1053            clr     a
0181 F0        1054            movx    @dptr,a
0182 90C089    1055            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_84 + 0x0001)
0185 F0        1056            movx    @dptr,a
0186 90C0E8    1057            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_84
0189 F0        1058            movx    @dptr,a
018A 90C0E9    1059            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0001)
018D F0        1060            movx    @dptr,a
018E 90C0EA    1061            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0002)
0191           1062   ;        sensor_test.c:244: xdata uint8_t trim_xy1xy2[10] = {0};
0191 E4        1063            clr     a
0192 F0        1064            movx    @dptr,a
0193 90C0EB    1065            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0003)
0196 F0        1066            movx    @dptr,a
0197 90C148    1067            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84
019A F0        1068            movx    @dptr,a
019B 90C149    1069            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0001)
019E F0        1070            movx    @dptr,a
019F 90C14A    1071            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0002)
01A2 E4        1072            clr     a
01A3 F0        1073            movx    @dptr,a
01A4 90C14B    1074            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0003)
01A7 F0        1075            movx    @dptr,a
01A8 90C14C    1076            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0004)
01AB F0        1077            movx    @dptr,a
01AC 90C14D    1078            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0005)
01AF F0        1079            movx    @dptr,a
01B0 90C14E    1080            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0006)
01B3 E4        1081            clr     a
01B4 F0        1082            movx    @dptr,a
01B5 90C14F    1083            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0007)
01B8 F0        1084            movx    @dptr,a
01B9 90C150    1085            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0008)
01BC F0        1086            movx    @dptr,a
01BD 90C151    1087            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0009)
01C0 F0        1088            movx    @dptr,a
01C1           1089   ;        sensor_test.c:247: for (i=0;i<2;i++){
01C1 7A00      1090            mov     r2,#0x00
01C3           1091   L010001?:
01C3 BA0228    1092            cjne    r2,#0x02,L010024?
01C6           1093   L010024?:
01C6 5000      1094            jnc     L010004?
01C8           1095   ;        sensor_test.c:248: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
01C8 EA        1096            mov     a,r2
01C9 2488      1097            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_84
01CB FB        1098            mov     r3,a
01CC E4        1099            clr     a
01CD 34C0      1100            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_84 >> 8)
01CF FC        1101            mov     r4,a
01D0 745D      1102            mov     a,#0x5D
01D2 2A        1103            add     a,r2
01D3 F582      1104            mov     dpl,a
01D5 C002      1105            push    ar2
01D7 C003      1106            push    ar3
01D9 C004      1107            push    ar4
01DB 120000    1108            lcall   _SPI_read
01DE AD82      1109            mov     r5,dpl
01E0 D004      1110            pop     ar4
01E2 D003      1111            pop     ar3
01E4 D002      1112            pop     ar2
01E6 8B82      1113            mov     dpl,r3
01E8 8C83      1114            mov     dph,r4
01EA ED        1115            mov     a,r5
01EB F0        1116            movx    @dptr,a
01EC           1117   ;        sensor_test.c:247: for (i=0;i<2;i++){
01EC 0A        1118            inc     r2
01ED 8000      1119            sjmp    L010001?
01EF           1120   L010004?:
01EF           1121   ;        sensor_test.c:250: for (i=0;i<4;i++){
01EF 7A00      1122            mov     r2,#0x00
01F1           1123   L010005?:
01F1 BA04E8    1124            cjne    r2,#0x04,L010026?
01F4           1125   L010026?:
01F4 5000      1126            jnc     L010008?
01F6           1127   ;        sensor_test.c:251: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
01F6 EA        1128            mov     a,r2
01F7 24E8      1129            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_84
01F9 FB        1130            mov     r3,a
01FA E4        1131            clr     a
01FB 34C0      1132            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 >> 8)
01FD FC        1133            mov     r4,a
01FE 7462      1134            mov     a,#0x62
0200 2A        1135            add     a,r2
0201 F582      1136            mov     dpl,a
0203 C002      1137            push    ar2
0205 C003      1138            push    ar3
0207 C004      1139            push    ar4
0209 120000    1140            lcall   _SPI_read
020C AD82      1141            mov     r5,dpl
020E D004      1142            pop     ar4
0210 D003      1143            pop     ar3
0212 D002      1144            pop     ar2
0214 8B82      1145            mov     dpl,r3
0216 8C83      1146            mov     dph,r4
0218 ED        1147            mov     a,r5
0219 F0        1148            movx    @dptr,a
021A           1149   ;        sensor_test.c:250: for (i=0;i<4;i++){
021A 0A        1150            inc     r2
021B 8000      1151            sjmp    L010005?
021D           1152   L010008?:
021D           1153   ;        sensor_test.c:253: for (i=0;i<10;i++){
021D 7A00      1154            mov     r2,#0x00
021F           1155   L010009?:
021F BA0AA8    1156            cjne    r2,#0x0A,L010028?
0222           1157   L010028?:
0222 5000      1158            jnc     L010012?
0224           1159   ;        sensor_test.c:254: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
0224 EA        1160            mov     a,r2
0225 2448      1161            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84
0227 FB        1162            mov     r3,a
0228 E4        1163            clr     a
0229 34C1      1164            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 >> 8)
022B FC        1165            mov     r4,a
022C 7468      1166            mov     a,#0x68
022E 2A        1167            add     a,r2
022F F582      1168            mov     dpl,a
0231 C002      1169            push    ar2
0233 C003      1170            push    ar3
0235 C004      1171            push    ar4
0237 120000    1172            lcall   _SPI_read
023A AD82      1173            mov     r5,dpl
023C D004      1174            pop     ar4
023E D003      1175            pop     ar3
0240 D002      1176            pop     ar2
0242 8B82      1177            mov     dpl,r3
0244 8C83      1178            mov     dph,r4
0246 ED        1179            mov     a,r5
0247 F0        1180            movx    @dptr,a
0248           1181   ;        sensor_test.c:253: for (i=0;i<10;i++){
0248 0A        1182            inc     r2
0249 8000      1183            sjmp    L010009?
024B           1184   L010012?:
024B           1185   ;        sensor_test.c:257: dig_x1 = (int8_t) trim_x1y1[0]; 
024B 90C088    1186            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_84
024E E0        1187            movx    a,@dptr
024F F520      1188            mov     _dig_x1,a
0251           1189   ;        sensor_test.c:258: dig_y1 = (int8_t) trim_x1y1[1]; 
0251 90C089    1190            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_84 + 0x0001)
0254 E0        1191            movx    a,@dptr
0255 F5A0      1192            mov     _dig_y1,a
0257           1193   ;        sensor_test.c:259: dig_x2 = (int8_t) trim_xyz_data[2]; 
0257 90C0EA    1194            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0002)
025A E0        1195            movx    a,@dptr
025B F5E0      1196            mov     _dig_x2,a
025D           1197   ;        sensor_test.c:260: dig_y2 = (int8_t) trim_xyz_data[3]; 
025D 90C0EB    1198            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0003)
0260 E0        1199            movx    a,@dptr
0261 F560      1200            mov     _dig_y2,a
0263           1201   ;        sensor_test.c:262: temp_msb = ((uint16_t)trim_xy1xy2[3]) << 8;
0263 90C14B    1202            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0003)
0266 E0        1203            movx    a,@dptr
0267 FB        1204            mov     r3,a
0268 7A00      1205            mov     r2,#0x00
026A           1206   ;        sensor_test.c:263: dig_z1 = (uint16_t)(temp_msb | trim_xy1xy2[2]);
026A 90C14A    1207            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0002)
026D E0        1208            movx    a,@dptr
026E 7D00      1209            mov     r5,#0x00
0270 4202      1210            orl     ar2,a
0272 ED        1211            mov     a,r5
0273 4203      1212            orl     ar3,a
0275 8A20      1213            mov     _dig_z1,r2
0277           1214   ;        sensor_test.c:265: temp_msb = ((uint16_t)trim_xy1xy2[1]) << 8;
0277 90C149    1215            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0001)
027A E0        1216            movx    a,@dptr
027B FB        1217            mov     r3,a
027C 7A00      1218            mov     r2,#0x00
027E           1219   ;        sensor_test.c:266: dig_z2 = (int16_t)(temp_msb | trim_xy1xy2[0]);
027E 90C148    1220            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84
0281 E0        1221            movx    a,@dptr
0282 7D00      1222            mov     r5,#0x00
0284 4202      1223            orl     ar2,a
0286 ED        1224            mov     a,r5
0287 4203      1225            orl     ar3,a
0289 8A30      1226            mov     _dig_z2,r2
028B           1227   ;        sensor_test.c:268: temp_msb = ((uint16_t)trim_xy1xy2[7]) << 8;
028B 90C14F    1228            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0007)
028E E0        1229            movx    a,@dptr
028F FB        1230            mov     r3,a
0290 7A00      1231            mov     r2,#0x00
0292           1232   ;        sensor_test.c:269: dig_z3 = (int16_t)(temp_msb | trim_xy1xy2[6]);
0292 90C14E    1233            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0006)
0295 E0        1234            movx    a,@dptr
0296 7D00      1235            mov     r5,#0x00
0298 4202      1236            orl     ar2,a
029A ED        1237            mov     a,r5
029B 4203      1238            orl     ar3,a
029D 8AF0      1239            mov     _dig_z3,r2
029F           1240   ;        sensor_test.c:271: temp_msb = ((uint16_t)trim_xyz_data[1]) << 8;
029F 90C0E9    1241            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0001)
02A2 E0        1242            movx    a,@dptr
02A3 FB        1243            mov     r3,a
02A4 7A00      1244            mov     r2,#0x00
02A6           1245   ;        sensor_test.c:272: dig_z4 = (int16_t)(temp_msb | trim_xyz_data[0]);
02A6 90C0E8    1246            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_84
02A9 E0        1247            movx    a,@dptr
02AA 7D00      1248            mov     r5,#0x00
02AC 4202      1249            orl     ar2,a
02AE ED        1250            mov     a,r5
02AF 4203      1251            orl     ar3,a
02B1 8AB0      1252            mov     _dig_z4,r2
02B3           1253   ;        sensor_test.c:274: dig_xy1 = trim_xy1xy2[9];
02B3 90C151    1254            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0009)
02B6 E0        1255            movx    a,@dptr
02B7 F570      1256            mov     _dig_xy1,a
02B9           1257   ;        sensor_test.c:275: dig_xy2 = (int8_t)trim_xy1xy2[8];
02B9 90C150    1258            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0008)
02BC E0        1259            movx    a,@dptr
02BD F530      1260            mov     _dig_xy2,a
02BF           1261   ;        sensor_test.c:277: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
02BF 90C14D    1262            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0005)
02C2 E0        1263            movx    a,@dptr
02C3 FA        1264            mov     r2,a
02C4 53027F    1265            anl     ar2,#0x7F
02C7 8A03      1266            mov     ar3,r2
02C9 7A00      1267            mov     r2,#0x00
02CB           1268   ;        sensor_test.c:278: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
02CB 90C14C    1269            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0004)
02CE E0        1270            movx    a,@dptr
02CF 7D00      1271            mov     r5,#0x00
02D1 4202      1272            orl     ar2,a
02D3 ED        1273            mov     a,r5
02D4 4203      1274            orl     ar3,a
02D6 8AF0      1275            mov     _dig_xyz1,r2
02D8 22        1276            ret
02D9           1277   ;------------------------------------------------------------
02D9           1278   ;Allocation info for local variables in function 'BMM150_Init'
02D9           1279   ;------------------------------------------------------------
02D9           1280   ;chip_id                   Allocated to registers r2 
02D9           1281   ;------------------------------------------------------------
02D9           1282   ;        sensor_test.c:283: void BMM150_Init(void)
02D9           1283   ;        -----------------------------------------
02D9           1284   ;         function BMM150_Init
02D9           1285   ;        -----------------------------------------
02D9           1286   _BMM150_Init:
02D9           1287   ;        sensor_test.c:288: CS = 1;         // Deselect BMM150
02D9 D283      1288            setb    _P0_3
02DB           1289   ;        sensor_test.c:291: waitms(10);
02DB 90000A    1290            mov     dptr,#0x000A
02DE 120000    1291            lcall   _waitms
02E1           1292   ;        sensor_test.c:294: SPI_write(BMM150_POWER_CONTROL, 0x82);
02E1 751082    1293            mov     _SPI_write_PARM_2,#0x82
02E4 75824B    1294            mov     dpl,#0x4B
02E7 120000    1295            lcall   _SPI_write
02EA           1296   ;        sensor_test.c:295: waitms(10);  // Wait for reset to complete
02EA 90000A    1297            mov     dptr,#0x000A
02ED 120000    1298            lcall   _waitms
02F0           1299   ;        sensor_test.c:298: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
02F0 751001    1300            mov     _SPI_write_PARM_2,#0x01
02F3 75824B    1301            mov     dpl,#0x4B
02F6 120000    1302            lcall   _SPI_write
02F9           1303   ;        sensor_test.c:299: waitms(5);
02F9 900005    1304            mov     dptr,#0x0005
02FC 120000    1305            lcall   _waitms
02FF           1306   ;        sensor_test.c:302: chip_id = SPI_read(BMM150_CHIP_ID);
02FF 758240    1307            mov     dpl,#0x40
0302 120000    1308            lcall   _SPI_read
0305 AA82      1309            mov     r2,dpl
0307           1310   ;        sensor_test.c:303: if (chip_id != BMM150_CHIP_ID_VALUE)
0307 BA3228    1311            cjne    r2,#0x32,L011010?
030A 8000      1312            sjmp    L011005?
030C           1313   L011010?:
030C           1314   ;        sensor_test.c:305: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
030C 8A03      1315            mov     ar3,r2
030E 7C00      1316            mov     r4,#0x00
0310 C003      1317            push    ar3
0312 C004      1318            push    ar4
0314 74A8      1319            mov     a,#__str_0
0316 C0E0      1320            push    acc
0318 74CF      1321            mov     a,#(__str_0 >> 8)
031A C0E0      1322            push    acc
031C 7480      1323            mov     a,#0x80
031E C0E0      1324            push    acc
0320 120000    1325            lcall   _printf
0323 E581      1326            mov     a,sp
0325 24FB      1327            add     a,#0xfb
0327 F581      1328            mov     sp,a
0329           1329   ;        sensor_test.c:306: while (1) {
0329           1330   L011002?:
0329           1331   ;        sensor_test.c:307: printf("Press restart to check again!\r");
0329 74A8      1332            mov     a,#__str_1
032B C0E0      1333            push    acc
032D 74D0      1334            mov     a,#(__str_1 >> 8)
032F C0E0      1335            push    acc
0331 7480      1336            mov     a,#0x80
0333 C0E0      1337            push    acc
0335 120000    1338            lcall   _printf
0338 1581      1339            dec     sp
033A 1581      1340            dec     sp
033C 1581      1341            dec     sp
033E 8000      1342            sjmp    L011002?
0340           1343   L011005?:
0340           1344   ;        sensor_test.c:312: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
0340 751000    1345            mov     _SPI_write_PARM_2,#0x00
0343 75824C    1346            mov     dpl,#0x4C
0346 C002      1347            push    ar2
0348 120000    1348            lcall   _SPI_write
034B           1349   ;        sensor_test.c:315: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
034B 75107F    1350            mov     _SPI_write_PARM_2,#0x7F
034E 758251    1351            mov     dpl,#0x51
0351 120000    1352            lcall   _SPI_write
0354           1353   ;        sensor_test.c:316: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
0354 75100E    1354            mov     _SPI_write_PARM_2,#0x0E
0357 758252    1355            mov     dpl,#0x52
035A 120000    1356            lcall   _SPI_write
035D           1357   ;        sensor_test.c:318: BMM150_Read_Trim_Registers();
035D 120000    1358            lcall   _BMM150_Read_Trim_Registers
0360           1359   ;        sensor_test.c:320: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
0360 7B00      1360            mov     r3,#0x00
0362 C003      1361            push    ar3
0364 74E8      1362            mov     a,#__str_2
0366 C0E0      1363            push    acc
0368 74D0      1364            mov     a,#(__str_2 >> 8)
036A C0E0      1365            push    acc
036C 7480      1366            mov     a,#0x80
036E C0E0      1367            push    acc
0370 120000    1368            lcall   _printf
0373 E581      1369            mov     a,sp
0375 24FB      1370            add     a,#0xfb
0377 F581      1371            mov     sp,a
0379 22        1372            ret
037A           1373   ;------------------------------------------------------------
037A           1374   ;Allocation info for local variables in function 'BMM150_compensate_x'
037A           1375   ;------------------------------------------------------------
037A           1376   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
037A           1377   ;mag_data_x                Allocated to registers r2 r3 r4 
037A           1378   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
037A           1379   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_93'
037A           1380   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_93'
037A           1381   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_93'
037A           1382   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_93'
037A           1383   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_93'
037A           1384   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_93'
037A           1385   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_93'
037A           1386   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_93'
037A           1387   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_93'
037A           1388   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_93'
037A           1389   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_93'
037A           1390   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_93'
037A           1391   ;------------------------------------------------------------
037A           1392   ;        sensor_test.c:323: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
037A           1393   ;        -----------------------------------------
037A           1394   ;         function BMM150_compensate_x
037A           1395   ;        -----------------------------------------
037A           1396   _BMM150_compensate_x:
037A           1397   ;        sensor_test.c:341: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
037A ACF0      1398            mov     r4,b
037C 120000    1399            lcall   __gptrget
037F FA        1400            mov     r2,a
0380 A3        1401            inc     dptr
0381 120000    1402            lcall   __gptrget
0384 FB        1403            mov     r3,a
0385 BA0068    1404            cjne    r2,#0x00,L012019?
0388 BBF068    1405            cjne    r3,#0xF0,L012019?
038B 020000    1406            ljmp    L012011?
038E           1407   L012019?:
038E           1408   ;        sensor_test.c:342: if (*data_rhall != 0)
038E ACC0      1409            mov     r4,_BMM150_compensate_x_PARM_2
0390 ADC1      1410            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
0392 AEC2      1411            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
0394 8C82      1412            mov     dpl,r4
0396 8D83      1413            mov     dph,r5
0398 8EF0      1414            mov     b,r6
039A 120000    1415            lcall   __gptrget
039D FC        1416            mov     r4,a
039E A3        1417            inc     dptr
039F 120000    1418            lcall   __gptrget
03A2 FD        1419            mov     r5,a
03A3 4C        1420            orl     a,r4
03A4 6000      1421            jz      L012005?
03A6           1422   ;        sensor_test.c:345: process_comp_x0 = *data_rhall;
03A6 90C208    1423            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03A9 EC        1424            mov     a,r4
03AA F0        1425            movx    @dptr,a
03AB A3        1426            inc     dptr
03AC ED        1427            mov     a,r5
03AD F0        1428            movx    @dptr,a
03AE 8000      1429            sjmp    L012006?
03B0           1430   L012005?:
03B0           1431   ;        sensor_test.c:347: else if (dig_xyz1 != 0)
03B0 E5F0      1432            mov     a,_dig_xyz1
03B2 6000      1433            jz      L012002?
03B4           1434   ;        sensor_test.c:349: process_comp_x0 = dig_xyz1;
03B4 90C208    1435            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03B7 E5F0      1436            mov     a,_dig_xyz1
03B9 F0        1437            movx    @dptr,a
03BA E5F0      1438            mov     a,_dig_xyz1
03BC 33        1439            rlc     a
03BD 95E0      1440            subb    a,acc
03BF A3        1441            inc     dptr
03C0 F0        1442            movx    @dptr,a
03C1 8000      1443            sjmp    L012006?
03C3           1444   L012002?:
03C3           1445   ;        sensor_test.c:353: process_comp_x0 = 0;
03C3 90C208    1446            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03C6 E4        1447            clr     a
03C7 F0        1448            movx    @dptr,a
03C8 A3        1449            inc     dptr
03C9 F0        1450            movx    @dptr,a
03CA           1451   L012006?:
03CA           1452   ;        sensor_test.c:355: if (process_comp_x0 != 0)
03CA 90C208    1453            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03CD E0        1454            movx    a,@dptr
03CE FC        1455            mov     r4,a
03CF A3        1456            inc     dptr
03D0 E0        1457            movx    a,@dptr
03D1 FD        1458            mov     r5,a
03D2 4C        1459            orl     a,r4
03D3 7000      1460            jnz     L012022?
03D5 020000    1461            ljmp    L012008?
03D8           1462   L012022?:
03D8           1463   ;        sensor_test.c:358: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
03D8 E5F0      1464            mov     a,_dig_xyz1
03DA FE        1465            mov     r6,a
03DB 33        1466            rlc     a
03DC 95E0      1467            subb    a,acc
03DE F8        1468            mov     r0,a
03DF C8        1469            xch     a,r0
03E0 5403      1470            anl     a,#0x03
03E2 A2E0      1471            mov     c,acc.0
03E4 C8        1472            xch     a,r0
03E5 13        1473            rrc     a
03E6 C8        1474            xch     a,r0
03E7 13        1475            rrc     a
03E8 A2E0      1476            mov     c,acc.0
03EA C8        1477            xch     a,r0
03EB 13        1478            rrc     a
03EC C8        1479            xch     a,r0
03ED 13        1480            rrc     a
03EE C8        1481            xch     a,r0
03EF F9        1482            mov     r1,a
03F0 EE        1483            mov     a,r6
03F1 03        1484            rr      a
03F2 03        1485            rr      a
03F3 54C0      1486            anl     a,#0xc0
03F5 FF        1487            mov     r7,a
03F6 EE        1488            mov     a,r6
03F7 03        1489            rr      a
03F8 03        1490            rr      a
03F9 543F      1491            anl     a,#0x3f
03FB 48        1492            orl     a,r0
03FC F8        1493            mov     r0,a
03FD 7E00      1494            mov     r6,#0x00
03FF           1495   ;        sensor_test.c:359: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
03FF 8C00      1496            mov     __divslong_PARM_2,r4
0401 8D01      1497            mov     (__divslong_PARM_2 + 1),r5
0403 750200    1498            mov     (__divslong_PARM_2 + 2),#0x00
0406 750300    1499            mov     (__divslong_PARM_2 + 3),#0x00
0409 8E82      1500            mov     dpl,r6
040B 8F83      1501            mov     dph,r7
040D 88F0      1502            mov     b,r0
040F E9        1503            mov     a,r1
0410 C002      1504            push    ar2
0412 C003      1505            push    ar3
0414 120000    1506            lcall   __divslong
0417 AC82      1507            mov     r4,dpl
0419 E583      1508            mov     a,dph
041B 24C0      1509            add     a,#0xc0
041D FD        1510            mov     r5,a
041E           1511   ;        sensor_test.c:361: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
041E 8C06      1512            mov     ar6,r4
0420 8D07      1513            mov     ar7,r5
0422 8E38      1514            mov     _BMM150_compensate_x_sloc0_1_0,r6
0424 EF        1515            mov     a,r7
0425 F539      1516            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
0427 33        1517            rlc     a
0428 95E0      1518            subb    a,acc
042A F53A      1519            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
042C F53B      1520            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
042E 8C06      1521            mov     ar6,r4
0430 8D07      1522            mov     ar7,r5
0432 8E00      1523            mov     __mullong_PARM_2,r6
0434 EF        1524            mov     a,r7
0435 F501      1525            mov     (__mullong_PARM_2 + 1),a
0437 33        1526            rlc     a
0438 95E0      1527            subb    a,acc
043A F502      1528            mov     (__mullong_PARM_2 + 2),a
043C F503      1529            mov     (__mullong_PARM_2 + 3),a
043E           1530   ;        sensor_test.c:362: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
043E 853882    1531            mov     dpl,_BMM150_compensate_x_sloc0_1_0
0441 853983    1532            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
0444 853AF0    1533            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
0447 E53B      1534            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0449 C004      1535            push    ar4
044B C005      1536            push    ar5
044D 120000    1537            lcall   __mullong
0450 858238    1538            mov     _BMM150_compensate_x_sloc0_1_0,dpl
0453 858339    1539            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
0456 85F03A    1540            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
0459 F53B      1541            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
045B E530      1542            mov     a,_dig_xy2
045D FE        1543            mov     r6,a
045E 33        1544            rlc     a
045F 95E0      1545            subb    a,acc
0461 FF        1546            mov     r7,a
0462 F8        1547            mov     r0,a
0463 F9        1548            mov     r1,a
0464 750080    1549            mov     __divslong_PARM_2,#0x80
0467 E4        1550            clr     a
0468 F501      1551            mov     (__divslong_PARM_2 + 1),a
046A F502      1552            mov     (__divslong_PARM_2 + 2),a
046C F503      1553            mov     (__divslong_PARM_2 + 3),a
046E 853882    1554            mov     dpl,_BMM150_compensate_x_sloc0_1_0
0471 853983    1555            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
0474 853AF0    1556            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
0477 E53B      1557            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0479 C006      1558            push    ar6
047B C007      1559            push    ar7
047D C000      1560            push    ar0
047F C001      1561            push    ar1
0481 120000    1562            lcall   __divslong
0484 858200    1563            mov     __mullong_PARM_2,dpl
0487 858301    1564            mov     (__mullong_PARM_2 + 1),dph
048A 85F002    1565            mov     (__mullong_PARM_2 + 2),b
048D F503      1566            mov     (__mullong_PARM_2 + 3),a
048F D001      1567            pop     ar1
0491 D000      1568            pop     ar0
0493 D007      1569            pop     ar7
0495 D006      1570            pop     ar6
0497           1571   ;        sensor_test.c:363: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
0497 8E82      1572            mov     dpl,r6
0499 8F83      1573            mov     dph,r7
049B 88F0      1574            mov     b,r0
049D E9        1575            mov     a,r1
049E 120000    1576            lcall   __mullong
04A1 858238    1577            mov     _BMM150_compensate_x_sloc0_1_0,dpl
04A4 858339    1578            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
04A7 85F03A    1579            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
04AA F53B      1580            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
04AC D005      1581            pop     ar5
04AE D004      1582            pop     ar4
04B0 E570      1583            mov     a,_dig_xy1
04B2 FE        1584            mov     r6,a
04B3 33        1585            rlc     a
04B4 95E0      1586            subb    a,acc
04B6 5401      1587            anl     a,#0x01
04B8 A2E0      1588            mov     c,acc.0
04BA CE        1589            xch     a,r6
04BB 13        1590            rrc     a
04BC CE        1591            xch     a,r6
04BD 13        1592            rrc     a
04BE CE        1593            xch     a,r6
04BF 8E00      1594            mov     __mullong_PARM_2,r6
04C1 F501      1595            mov     (__mullong_PARM_2 + 1),a
04C3 33        1596            rlc     a
04C4 95E0      1597            subb    a,acc
04C6 F502      1598            mov     (__mullong_PARM_2 + 2),a
04C8 F503      1599            mov     (__mullong_PARM_2 + 3),a
04CA           1600   ;        sensor_test.c:364: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
04CA ED        1601            mov     a,r5
04CB 33        1602            rlc     a
04CC 95E0      1603            subb    a,acc
04CE FE        1604            mov     r6,a
04CF           1605   ;        sensor_test.c:365: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
04CF 8C82      1606            mov     dpl,r4
04D1 8D83      1607            mov     dph,r5
04D3 8EF0      1608            mov     b,r6
04D5 120000    1609            lcall   __mullong
04D8 AC82      1610            mov     r4,dpl
04DA AD83      1611            mov     r5,dph
04DC AEF0      1612            mov     r6,b
04DE FF        1613            mov     r7,a
04DF EC        1614            mov     a,r4
04E0 2538      1615            add     a,_BMM150_compensate_x_sloc0_1_0
04E2 FC        1616            mov     r4,a
04E3 ED        1617            mov     a,r5
04E4 3539      1618            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
04E6 FD        1619            mov     r5,a
04E7 EE        1620            mov     a,r6
04E8 353A      1621            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
04EA FE        1622            mov     r6,a
04EB EF        1623            mov     a,r7
04EC 353B      1624            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
04EE FF        1625            mov     r7,a
04EF 750000    1626            mov     __divslong_PARM_2,#0x00
04F2 750102    1627            mov     (__divslong_PARM_2 + 1),#0x02
04F5 750200    1628            mov     (__divslong_PARM_2 + 2),#0x00
04F8 750300    1629            mov     (__divslong_PARM_2 + 3),#0x00
04FB 8C82      1630            mov     dpl,r4
04FD 8D83      1631            mov     dph,r5
04FF 8EF0      1632            mov     b,r6
0501 EF        1633            mov     a,r7
0502 120000    1634            lcall   __divslong
0505 AC82      1635            mov     r4,dpl
0507 AD83      1636            mov     r5,dph
0509 AEF0      1637            mov     r6,b
050B FF        1638            mov     r7,a
050C 7410      1639            mov     a,#0x10
050E 2E        1640            add     a,r6
050F FE        1641            mov     r6,a
0510 E4        1642            clr     a
0511 3F        1643            addc    a,r7
0512 FF        1644            mov     r7,a
0513           1645   ;        sensor_test.c:366: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
0513 E5E0      1646            mov     a,_dig_x2
0515 F8        1647            mov     r0,a
0516 33        1648            rlc     a
0517 95E0      1649            subb    a,acc
0519 F9        1650            mov     r1,a
051A 74A0      1651            mov     a,#0xA0
051C 28        1652            add     a,r0
051D F8        1653            mov     r0,a
051E E4        1654            clr     a
051F 39        1655            addc    a,r1
0520 8800      1656            mov     __mullong_PARM_2,r0
0522 F501      1657            mov     (__mullong_PARM_2 + 1),a
0524 33        1658            rlc     a
0525 95E0      1659            subb    a,acc
0527 F502      1660            mov     (__mullong_PARM_2 + 2),a
0529 F503      1661            mov     (__mullong_PARM_2 + 3),a
052B           1662   ;        sensor_test.c:367: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
052B 8C82      1663            mov     dpl,r4
052D 8D83      1664            mov     dph,r5
052F 8EF0      1665            mov     b,r6
0531 EF        1666            mov     a,r7
0532 120000    1667            lcall   __mullong
0535           1668   ;        sensor_test.c:368: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
0535 750000    1669            mov     __divslong_PARM_2,#0x00
0538 750110    1670            mov     (__divslong_PARM_2 + 1),#0x10
053B 750200    1671            mov     (__divslong_PARM_2 + 2),#0x00
053E 750300    1672            mov     (__divslong_PARM_2 + 3),#0x00
0541 120000    1673            lcall   __divslong
0544 858200    1674            mov     __mullong_PARM_2,dpl
0547 858301    1675            mov     (__mullong_PARM_2 + 1),dph
054A 85F002    1676            mov     (__mullong_PARM_2 + 2),b
054D F503      1677            mov     (__mullong_PARM_2 + 3),a
054F D003      1678            pop     ar3
0551 D002      1679            pop     ar2
0553 EB        1680            mov     a,r3
0554 33        1681            rlc     a
0555 95E0      1682            subb    a,acc
0557 FC        1683            mov     r4,a
0558           1684   ;        sensor_test.c:369: retval = ((int16_t)(process_comp_x10 / 8192));
0558 8A82      1685            mov     dpl,r2
055A 8B83      1686            mov     dph,r3
055C 8CF0      1687            mov     b,r4
055E 120000    1688            lcall   __mullong
0561 750000    1689            mov     __divslong_PARM_2,#0x00
0564 750120    1690            mov     (__divslong_PARM_2 + 1),#0x20
0567 750200    1691            mov     (__divslong_PARM_2 + 2),#0x00
056A 750300    1692            mov     (__divslong_PARM_2 + 3),#0x00
056D 120000    1693            lcall   __divslong
0570 AA82      1694            mov     r2,dpl
0572 AB83      1695            mov     r3,dph
0574           1696   ;        sensor_test.c:370: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
0574 E520      1697            mov     a,_dig_x1
0576 FC        1698            mov     r4,a
0577 33        1699            rlc     a
0578 95E0      1700            subb    a,acc
057A C4        1701            swap    a
057B 03        1702            rr      a
057C 54F8      1703            anl     a,#0xf8
057E CC        1704            xch     a,r4
057F C4        1705            swap    a
0580 03        1706            rr      a
0581 CC        1707            xch     a,r4
0582 6C        1708            xrl     a,r4
0583 CC        1709            xch     a,r4
0584 54F8      1710            anl     a,#0xf8
0586 CC        1711            xch     a,r4
0587 6C        1712            xrl     a,r4
0588 FD        1713            mov     r5,a
0589 EC        1714            mov     a,r4
058A 2A        1715            add     a,r2
058B F582      1716            mov     dpl,a
058D ED        1717            mov     a,r5
058E 3B        1718            addc    a,r3
058F F583      1719            mov     dph,a
0591 750010    1720            mov     __divsint_PARM_2,#0x10
0594 E4        1721            clr     a
0595 F501      1722            mov     (__divsint_PARM_2 + 1),a
0597 120000    1723            lcall   __divsint
059A E582      1724            mov     a,dpl
059C 8583F0    1725            mov     b,dph
059F 90C1A8    1726            mov     dptr,#_BMM150_compensate_x_retval_1_93
05A2 F0        1727            movx    @dptr,a
05A3 A3        1728            inc     dptr
05A4 E5F0      1729            mov     a,b
05A6 F0        1730            movx    @dptr,a
05A7 8000      1731            sjmp    L012012?
05A9           1732   L012008?:
05A9           1733   ;        sensor_test.c:373: retval = BMM150_OVERFLOW_OUTPUT; 
05A9 90C1A8    1734            mov     dptr,#_BMM150_compensate_x_retval_1_93
05AC E4        1735            clr     a
05AD F0        1736            movx    @dptr,a
05AE A3        1737            inc     dptr
05AF 7480      1738            mov     a,#0x80
05B1 F0        1739            movx    @dptr,a
05B2 8000      1740            sjmp    L012012?
05B4           1741   L012011?:
05B4           1742   ;        sensor_test.c:377: retval = BMM150_OVERFLOW_OUTPUT; 
05B4 90C1A8    1743            mov     dptr,#_BMM150_compensate_x_retval_1_93
05B7 E4        1744            clr     a
05B8 F0        1745            movx    @dptr,a
05B9 A3        1746            inc     dptr
05BA 7480      1747            mov     a,#0x80
05BC F0        1748            movx    @dptr,a
05BD           1749   L012012?:
05BD           1750   ;        sensor_test.c:379: return retval; 
05BD 90C1A8    1751            mov     dptr,#_BMM150_compensate_x_retval_1_93
05C0 E0        1752            movx    a,@dptr
05C1 FA        1753            mov     r2,a
05C2 A3        1754            inc     dptr
05C3 E0        1755            movx    a,@dptr
05C4 8A82      1756            mov     dpl,r2
05C6 F583      1757            mov     dph,a
05C8 22        1758            ret
05C9           1759   ;------------------------------------------------------------
05C9           1760   ;Allocation info for local variables in function 'BMM150_compensate_y'
05C9           1761   ;------------------------------------------------------------
05C9           1762   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
05C9           1763   ;mag_data_y                Allocated to registers r2 r3 r4 
05C9           1764   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
05C9           1765   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_102'
05C9           1766   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_102'
05C9           1767   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_102'
05C9           1768   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_102'
05C9           1769   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_102'
05C9           1770   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_102'
05C9           1771   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_102'
05C9           1772   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_102'
05C9           1773   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_102'
05C9           1774   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_102'
05C9           1775   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_102'
05C9           1776   ;------------------------------------------------------------
05C9           1777   ;        sensor_test.c:382: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
05C9           1778   ;        -----------------------------------------
05C9           1779   ;         function BMM150_compensate_y
05C9           1780   ;        -----------------------------------------
05C9           1781   _BMM150_compensate_y:
05C9           1782   ;        sensor_test.c:400: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
05C9 ACF0      1783            mov     r4,b
05CB 120000    1784            lcall   __gptrget
05CE FA        1785            mov     r2,a
05CF A3        1786            inc     dptr
05D0 120000    1787            lcall   __gptrget
05D3 FB        1788            mov     r3,a
05D4 BA0018    1789            cjne    r2,#0x00,L013019?
05D7 BBF018    1790            cjne    r3,#0xF0,L013019?
05DA 020000    1791            ljmp    L013011?
05DD           1792   L013019?:
05DD           1793   ;        sensor_test.c:402: if (*data_rhall != 0)
05DD AC70      1794            mov     r4,_BMM150_compensate_y_PARM_2
05DF AD71      1795            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
05E1 AE72      1796            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
05E3 8C82      1797            mov     dpl,r4
05E5 8D83      1798            mov     dph,r5
05E7 8EF0      1799            mov     b,r6
05E9 120000    1800            lcall   __gptrget
05EC FC        1801            mov     r4,a
05ED A3        1802            inc     dptr
05EE 120000    1803            lcall   __gptrget
05F1 FD        1804            mov     r5,a
05F2 4C        1805            orl     a,r4
05F3 6000      1806            jz      L013005?
05F5           1807   ;        sensor_test.c:405: process_comp_y0 = *data_rhall;
05F5 90C2C8    1808            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
05F8 EC        1809            mov     a,r4
05F9 F0        1810            movx    @dptr,a
05FA A3        1811            inc     dptr
05FB ED        1812            mov     a,r5
05FC F0        1813            movx    @dptr,a
05FD 8000      1814            sjmp    L013006?
05FF           1815   L013005?:
05FF           1816   ;        sensor_test.c:407: else if (dig_xyz1 != 0)
05FF E5F0      1817            mov     a,_dig_xyz1
0601 6000      1818            jz      L013002?
0603           1819   ;        sensor_test.c:409: process_comp_y0 = dig_xyz1;
0603 90C2C8    1820            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
0606 E5F0      1821            mov     a,_dig_xyz1
0608 F0        1822            movx    @dptr,a
0609 E5F0      1823            mov     a,_dig_xyz1
060B 33        1824            rlc     a
060C 95E0      1825            subb    a,acc
060E A3        1826            inc     dptr
060F F0        1827            movx    @dptr,a
0610 8000      1828            sjmp    L013006?
0612           1829   L013002?:
0612           1830   ;        sensor_test.c:413: process_comp_y0 = 0;
0612 90C2C8    1831            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
0615 E4        1832            clr     a
0616 F0        1833            movx    @dptr,a
0617 A3        1834            inc     dptr
0618 F0        1835            movx    @dptr,a
0619           1836   L013006?:
0619           1837   ;        sensor_test.c:416: if (process_comp_y0 != 0)
0619 90C2C8    1838            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
061C E0        1839            movx    a,@dptr
061D FC        1840            mov     r4,a
061E A3        1841            inc     dptr
061F E0        1842            movx    a,@dptr
0620 FD        1843            mov     r5,a
0621 4C        1844            orl     a,r4
0622 7000      1845            jnz     L013022?
0624 020000    1846            ljmp    L013008?
0627           1847   L013022?:
0627           1848   ;        sensor_test.c:419: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
0627 E5F0      1849            mov     a,_dig_xyz1
0629 FE        1850            mov     r6,a
062A 33        1851            rlc     a
062B 95E0      1852            subb    a,acc
062D F8        1853            mov     r0,a
062E C8        1854            xch     a,r0
062F 5403      1855            anl     a,#0x03
0631 A2E0      1856            mov     c,acc.0
0633 C8        1857            xch     a,r0
0634 13        1858            rrc     a
0635 C8        1859            xch     a,r0
0636 13        1860            rrc     a
0637 A2E0      1861            mov     c,acc.0
0639 C8        1862            xch     a,r0
063A 13        1863            rrc     a
063B C8        1864            xch     a,r0
063C 13        1865            rrc     a
063D C8        1866            xch     a,r0
063E F9        1867            mov     r1,a
063F EE        1868            mov     a,r6
0640 03        1869            rr      a
0641 03        1870            rr      a
0642 54C0      1871            anl     a,#0xc0
0644 FF        1872            mov     r7,a
0645 EE        1873            mov     a,r6
0646 03        1874            rr      a
0647 03        1875            rr      a
0648 543F      1876            anl     a,#0x3f
064A 48        1877            orl     a,r0
064B F8        1878            mov     r0,a
064C 7E00      1879            mov     r6,#0x00
064E 8C00      1880            mov     __divslong_PARM_2,r4
0650 8D01      1881            mov     (__divslong_PARM_2 + 1),r5
0652 750200    1882            mov     (__divslong_PARM_2 + 2),#0x00
0655 750300    1883            mov     (__divslong_PARM_2 + 3),#0x00
0658           1884   ;        sensor_test.c:420: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
0658 8E82      1885            mov     dpl,r6
065A 8F83      1886            mov     dph,r7
065C 88F0      1887            mov     b,r0
065E E9        1888            mov     a,r1
065F C002      1889            push    ar2
0661 C003      1890            push    ar3
0663 120000    1891            lcall   __divslong
0666 AC82      1892            mov     r4,dpl
0668 E583      1893            mov     a,dph
066A 24C0      1894            add     a,#0xc0
066C FD        1895            mov     r5,a
066D           1896   ;        sensor_test.c:422: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
066D 8C06      1897            mov     ar6,r4
066F 8D07      1898            mov     ar7,r5
0671 8E88      1899            mov     _BMM150_compensate_y_sloc0_1_0,r6
0673 EF        1900            mov     a,r7
0674 F589      1901            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
0676 33        1902            rlc     a
0677 95E0      1903            subb    a,acc
0679 F58A      1904            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
067B F58B      1905            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
067D 8C06      1906            mov     ar6,r4
067F 8D07      1907            mov     ar7,r5
0681 8E00      1908            mov     __mullong_PARM_2,r6
0683 EF        1909            mov     a,r7
0684 F501      1910            mov     (__mullong_PARM_2 + 1),a
0686 33        1911            rlc     a
0687 95E0      1912            subb    a,acc
0689 F502      1913            mov     (__mullong_PARM_2 + 2),a
068B F503      1914            mov     (__mullong_PARM_2 + 3),a
068D           1915   ;        sensor_test.c:423: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
068D 858882    1916            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0690 858983    1917            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0693 858AF0    1918            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
0696 E58B      1919            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
0698 C004      1920            push    ar4
069A C005      1921            push    ar5
069C 120000    1922            lcall   __mullong
069F 858288    1923            mov     _BMM150_compensate_y_sloc0_1_0,dpl
06A2 858389    1924            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
06A5 85F08A    1925            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
06A8 F58B      1926            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
06AA E530      1927            mov     a,_dig_xy2
06AC FE        1928            mov     r6,a
06AD 33        1929            rlc     a
06AE 95E0      1930            subb    a,acc
06B0 FF        1931            mov     r7,a
06B1 F8        1932            mov     r0,a
06B2 F9        1933            mov     r1,a
06B3 750080    1934            mov     __divslong_PARM_2,#0x80
06B6 E4        1935            clr     a
06B7 F501      1936            mov     (__divslong_PARM_2 + 1),a
06B9 F502      1937            mov     (__divslong_PARM_2 + 2),a
06BB F503      1938            mov     (__divslong_PARM_2 + 3),a
06BD 858882    1939            mov     dpl,_BMM150_compensate_y_sloc0_1_0
06C0 858983    1940            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
06C3 858AF0    1941            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
06C6 E58B      1942            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
06C8 C006      1943            push    ar6
06CA C007      1944            push    ar7
06CC C000      1945            push    ar0
06CE C001      1946            push    ar1
06D0 120000    1947            lcall   __divslong
06D3 858200    1948            mov     __mullong_PARM_2,dpl
06D6 858301    1949            mov     (__mullong_PARM_2 + 1),dph
06D9 85F002    1950            mov     (__mullong_PARM_2 + 2),b
06DC F503      1951            mov     (__mullong_PARM_2 + 3),a
06DE D001      1952            pop     ar1
06E0 D000      1953            pop     ar0
06E2 D007      1954            pop     ar7
06E4 D006      1955            pop     ar6
06E6           1956   ;        sensor_test.c:424: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
06E6 8E82      1957            mov     dpl,r6
06E8 8F83      1958            mov     dph,r7
06EA 88F0      1959            mov     b,r0
06EC E9        1960            mov     a,r1
06ED 120000    1961            lcall   __mullong
06F0 858288    1962            mov     _BMM150_compensate_y_sloc0_1_0,dpl
06F3 858389    1963            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
06F6 85F08A    1964            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
06F9 F58B      1965            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
06FB D005      1966            pop     ar5
06FD D004      1967            pop     ar4
06FF E570      1968            mov     a,_dig_xy1
0701 FE        1969            mov     r6,a
0702 33        1970            rlc     a
0703 95E0      1971            subb    a,acc
0705 5401      1972            anl     a,#0x01
0707 A2E0      1973            mov     c,acc.0
0709 CE        1974            xch     a,r6
070A 13        1975            rrc     a
070B CE        1976            xch     a,r6
070C 13        1977            rrc     a
070D CE        1978            xch     a,r6
070E 8E00      1979            mov     __mullong_PARM_2,r6
0710 F501      1980            mov     (__mullong_PARM_2 + 1),a
0712 33        1981            rlc     a
0713 95E0      1982            subb    a,acc
0715 F502      1983            mov     (__mullong_PARM_2 + 2),a
0717 F503      1984            mov     (__mullong_PARM_2 + 3),a
0719           1985   ;        sensor_test.c:425: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
0719 ED        1986            mov     a,r5
071A 33        1987            rlc     a
071B 95E0      1988            subb    a,acc
071D FE        1989            mov     r6,a
071E 8C82      1990            mov     dpl,r4
0720 8D83      1991            mov     dph,r5
0722 8EF0      1992            mov     b,r6
0724 120000    1993            lcall   __mullong
0727 AC82      1994            mov     r4,dpl
0729 AD83      1995            mov     r5,dph
072B AEF0      1996            mov     r6,b
072D FF        1997            mov     r7,a
072E EC        1998            mov     a,r4
072F 2588      1999            add     a,_BMM150_compensate_y_sloc0_1_0
0731 FC        2000            mov     r4,a
0732 ED        2001            mov     a,r5
0733 3589      2002            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
0735 FD        2003            mov     r5,a
0736 EE        2004            mov     a,r6
0737 358A      2005            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
0739 FE        2006            mov     r6,a
073A EF        2007            mov     a,r7
073B 358B      2008            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
073D FF        2009            mov     r7,a
073E 750000    2010            mov     __divslong_PARM_2,#0x00
0741 750102    2011            mov     (__divslong_PARM_2 + 1),#0x02
0744 750200    2012            mov     (__divslong_PARM_2 + 2),#0x00
0747 750300    2013            mov     (__divslong_PARM_2 + 3),#0x00
074A           2014   ;        sensor_test.c:426: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
074A 8C82      2015            mov     dpl,r4
074C 8D83      2016            mov     dph,r5
074E 8EF0      2017            mov     b,r6
0750 EF        2018            mov     a,r7
0751 120000    2019            lcall   __divslong
0754 AC82      2020            mov     r4,dpl
0756 AD83      2021            mov     r5,dph
0758 AEF0      2022            mov     r6,b
075A FF        2023            mov     r7,a
075B E560      2024            mov     a,_dig_y2
075D F8        2025            mov     r0,a
075E 33        2026            rlc     a
075F 95E0      2027            subb    a,acc
0761 F9        2028            mov     r1,a
0762 74A0      2029            mov     a,#0xA0
0764 28        2030            add     a,r0
0765 F8        2031            mov     r0,a
0766 E4        2032            clr     a
0767 39        2033            addc    a,r1
0768 8800      2034            mov     __mullong_PARM_2,r0
076A F501      2035            mov     (__mullong_PARM_2 + 1),a
076C 33        2036            rlc     a
076D 95E0      2037            subb    a,acc
076F F502      2038            mov     (__mullong_PARM_2 + 2),a
0771 F503      2039            mov     (__mullong_PARM_2 + 3),a
0773           2040   ;        sensor_test.c:427: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
0773 7410      2041            mov     a,#0x10
0775 2E        2042            add     a,r6
0776 FE        2043            mov     r6,a
0777 E4        2044            clr     a
0778 3F        2045            addc    a,r7
0779 8C82      2046            mov     dpl,r4
077B 8D83      2047            mov     dph,r5
077D 8EF0      2048            mov     b,r6
077F 120000    2049            lcall   __mullong
0782           2050   ;        sensor_test.c:428: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
0782 750000    2051            mov     __divslong_PARM_2,#0x00
0785 750110    2052            mov     (__divslong_PARM_2 + 1),#0x10
0788 750200    2053            mov     (__divslong_PARM_2 + 2),#0x00
078B 750300    2054            mov     (__divslong_PARM_2 + 3),#0x00
078E 120000    2055            lcall   __divslong
0791 858200    2056            mov     __mullong_PARM_2,dpl
0794 858301    2057            mov     (__mullong_PARM_2 + 1),dph
0797 85F002    2058            mov     (__mullong_PARM_2 + 2),b
079A F503      2059            mov     (__mullong_PARM_2 + 3),a
079C D003      2060            pop     ar3
079E D002      2061            pop     ar2
07A0 EB        2062            mov     a,r3
07A1 33        2063            rlc     a
07A2 95E0      2064            subb    a,acc
07A4 FC        2065            mov     r4,a
07A5           2066   ;        sensor_test.c:429: retval = (int16_t)(process_comp_y9 / 8192);
07A5 8A82      2067            mov     dpl,r2
07A7 8B83      2068            mov     dph,r3
07A9 8CF0      2069            mov     b,r4
07AB 120000    2070            lcall   __mullong
07AE 750000    2071            mov     __divslong_PARM_2,#0x00
07B1 750120    2072            mov     (__divslong_PARM_2 + 1),#0x20
07B4 750200    2073            mov     (__divslong_PARM_2 + 2),#0x00
07B7 750300    2074            mov     (__divslong_PARM_2 + 3),#0x00
07BA 120000    2075            lcall   __divslong
07BD AA82      2076            mov     r2,dpl
07BF AB83      2077            mov     r3,dph
07C1           2078   ;        sensor_test.c:430: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
07C1 E5A0      2079            mov     a,_dig_y1
07C3 FC        2080            mov     r4,a
07C4 33        2081            rlc     a
07C5 95E0      2082            subb    a,acc
07C7 C4        2083            swap    a
07C8 03        2084            rr      a
07C9 54F8      2085            anl     a,#0xf8
07CB CC        2086            xch     a,r4
07CC C4        2087            swap    a
07CD 03        2088            rr      a
07CE CC        2089            xch     a,r4
07CF 6C        2090            xrl     a,r4
07D0 CC        2091            xch     a,r4
07D1 54F8      2092            anl     a,#0xf8
07D3 CC        2093            xch     a,r4
07D4 6C        2094            xrl     a,r4
07D5 FD        2095            mov     r5,a
07D6 EC        2096            mov     a,r4
07D7 2A        2097            add     a,r2
07D8 F582      2098            mov     dpl,a
07DA ED        2099            mov     a,r5
07DB 3B        2100            addc    a,r3
07DC F583      2101            mov     dph,a
07DE 750010    2102            mov     __divsint_PARM_2,#0x10
07E1 E4        2103            clr     a
07E2 F501      2104            mov     (__divsint_PARM_2 + 1),a
07E4 120000    2105            lcall   __divsint
07E7 E582      2106            mov     a,dpl
07E9 8583F0    2107            mov     b,dph
07EC 90C268    2108            mov     dptr,#_BMM150_compensate_y_retval_1_102
07EF F0        2109            movx    @dptr,a
07F0 A3        2110            inc     dptr
07F1 E5F0      2111            mov     a,b
07F3 F0        2112            movx    @dptr,a
07F4 8000      2113            sjmp    L013012?
07F6           2114   L013008?:
07F6           2115   ;        sensor_test.c:434: retval = BMM150_OVERFLOW_OUTPUT;
07F6 90C268    2116            mov     dptr,#_BMM150_compensate_y_retval_1_102
07F9 E4        2117            clr     a
07FA F0        2118            movx    @dptr,a
07FB A3        2119            inc     dptr
07FC 7480      2120            mov     a,#0x80
07FE F0        2121            movx    @dptr,a
07FF 8000      2122            sjmp    L013012?
0801           2123   L013011?:
0801           2124   ;        sensor_test.c:440: retval = BMM150_OVERFLOW_OUTPUT;
0801 90C268    2125            mov     dptr,#_BMM150_compensate_y_retval_1_102
0804 E4        2126            clr     a
0805 F0        2127            movx    @dptr,a
0806 A3        2128            inc     dptr
0807 7480      2129            mov     a,#0x80
0809 F0        2130            movx    @dptr,a
080A           2131   L013012?:
080A           2132   ;        sensor_test.c:443: return retval;
080A 90C268    2133            mov     dptr,#_BMM150_compensate_y_retval_1_102
080D E0        2134            movx    a,@dptr
080E FA        2135            mov     r2,a
080F A3        2136            inc     dptr
0810 E0        2137            movx    a,@dptr
0811 8A82      2138            mov     dpl,r2
0813 F583      2139            mov     dph,a
0815 22        2140            ret
0816           2141   ;------------------------------------------------------------
0816           2142   ;Allocation info for local variables in function 'BMM150_compensate_z'
0816           2143   ;------------------------------------------------------------
0816           2144   ;data_rhall                Allocated with name '_BMM150_compensate_z_PARM_2'
0816           2145   ;mag_data_z                Allocated to registers r2 r3 r4 
0816           2146   ;sloc0                     Allocated with name '_BMM150_compensate_z_sloc0_1_0'
0816           2147   ;sloc1                     Allocated with name '_BMM150_compensate_z_sloc1_1_0'
0816           2148   ;sloc2                     Allocated with name '_BMM150_compensate_z_sloc2_1_0'
0816           2149   ;retval                    Allocated with name '_BMM150_compensate_z_retval_1_111'
0816           2150   ;process_comp_z0           Allocated with name '_BMM150_compensate_z_process_comp_z0_1_111'
0816           2151   ;process_comp_z1           Allocated with name '_BMM150_compensate_z_process_comp_z1_1_111'
0816           2152   ;process_comp_z2           Allocated with name '_BMM150_compensate_z_process_comp_z2_1_111'
0816           2153   ;process_comp_z3           Allocated with name '_BMM150_compensate_z_process_comp_z3_1_111'
0816           2154   ;process_comp_z4           Allocated with name '_BMM150_compensate_z_process_comp_z4_1_111'
0816           2155   ;------------------------------------------------------------
0816           2156   ;        sensor_test.c:446: int16_t BMM150_compensate_z (int16_t *mag_data_z, int16_t *data_rhall){
0816           2157   ;        -----------------------------------------
0816           2158   ;         function BMM150_compensate_z
0816           2159   ;        -----------------------------------------
0816           2160   _BMM150_compensate_z:
0816           2161   ;        sensor_test.c:454: if (*mag_data_z != BMM150_OVERFLOW_ADCVAL_ZAXIS_HALL)
0816 ACF0      2162            mov     r4,b
0818 120000    2163            lcall   __gptrget
081B FA        2164            mov     r2,a
081C A3        2165            inc     dptr
081D 120000    2166            lcall   __gptrget
0820 FB        2167            mov     r3,a
0821 BA0018    2168            cjne    r2,#0x00,L014024?
0824 BBC018    2169            cjne    r3,#0xC0,L014024?
0827 020000    2170            ljmp    L014013?
082A           2171   L014024?:
082A           2172   ;        sensor_test.c:456: if ((dig_z2 != 0) && (dig_z1 != 0) && (*data_rhall != 0) &&
082A E530      2173            mov     a,_dig_z2
082C 7000      2174            jnz     L014025?
082E 020000    2175            ljmp    L014007?
0831           2176   L014025?:
0831 E520      2177            mov     a,_dig_z1
0833 7000      2178            jnz     L014026?
0835 020000    2179            ljmp    L014007?
0838           2180   L014026?:
0838 AC20      2181            mov     r4,_BMM150_compensate_z_PARM_2
083A AD21      2182            mov     r5,(_BMM150_compensate_z_PARM_2 + 1)
083C AE22      2183            mov     r6,(_BMM150_compensate_z_PARM_2 + 2)
083E 8C82      2184            mov     dpl,r4
0840 8D83      2185            mov     dph,r5
0842 8EF0      2186            mov     b,r6
0844 120000    2187            lcall   __gptrget
0847 FC        2188            mov     r4,a
0848 A3        2189            inc     dptr
0849 120000    2190            lcall   __gptrget
084C FD        2191            mov     r5,a
084D 4C        2192            orl     a,r4
084E 7000      2193            jnz     L014027?
0850 020000    2194            ljmp    L014007?
0853           2195   L014027?:
0853           2196   ;        sensor_test.c:457: (dig_xyz1 != 0))
0853 E5F0      2197            mov     a,_dig_xyz1
0855 7000      2198            jnz     L014028?
0857 020000    2199            ljmp    L014007?
085A           2200   L014028?:
085A           2201   ;        sensor_test.c:460: process_comp_z0 = ((int16_t)*data_rhall) - ((int16_t)dig_xyz1);
085A E5F0      2202            mov     a,_dig_xyz1
085C FE        2203            mov     r6,a
085D 33        2204            rlc     a
085E 95E0      2205            subb    a,acc
0860 FF        2206            mov     r7,a
0861 EC        2207            mov     a,r4
0862 C3        2208            clr     c
0863 9E        2209            subb    a,r6
0864 F5D8      2210            mov     _BMM150_compensate_z_sloc0_1_0,a
0866 ED        2211            mov     a,r5
0867 9F        2212            subb    a,r7
0868 F5D9      2213            mov     (_BMM150_compensate_z_sloc0_1_0 + 1),a
086A           2214   ;        sensor_test.c:461: process_comp_z1 = (((int32_t)dig_z3) * ((int32_t)(process_comp_z0))) / 4;
086A E5F0      2215            mov     a,_dig_z3
086C F8        2216            mov     r0,a
086D 33        2217            rlc     a
086E 95E0      2218            subb    a,acc
0870 F9        2219            mov     r1,a
0871 FE        2220            mov     r6,a
0872 FF        2221            mov     r7,a
0873 85D800    2222            mov     __mullong_PARM_2,_BMM150_compensate_z_sloc0_1_0
0876 E5D9      2223            mov     a,(_BMM150_compensate_z_sloc0_1_0 + 1)
0878 F501      2224            mov     (__mullong_PARM_2 + 1),a
087A 33        2225            rlc     a
087B 95E0      2226            subb    a,acc
087D F502      2227            mov     (__mullong_PARM_2 + 2),a
087F F503      2228            mov     (__mullong_PARM_2 + 3),a
0881 8882      2229            mov     dpl,r0
0883 8983      2230            mov     dph,r1
0885 8EF0      2231            mov     b,r6
0887 EF        2232            mov     a,r7
0888 C002      2233            push    ar2
088A C003      2234            push    ar3
088C C004      2235            push    ar4
088E C005      2236            push    ar5
0890 120000    2237            lcall   __mullong
0893 AE82      2238            mov     r6,dpl
0895 AF83      2239            mov     r7,dph
0897 A8F0      2240            mov     r0,b
0899 F9        2241            mov     r1,a
089A 750004    2242            mov     __divslong_PARM_2,#0x04
089D E4        2243            clr     a
089E F501      2244            mov     (__divslong_PARM_2 + 1),a
08A0 F502      2245            mov     (__divslong_PARM_2 + 2),a
08A2 F503      2246            mov     (__divslong_PARM_2 + 3),a
08A4           2247   ;        sensor_test.c:462: process_comp_z2 = (((int32_t)(*mag_data_z - dig_z4)) * 32768);
08A4 8E82      2248            mov     dpl,r6
08A6 8F83      2249            mov     dph,r7
08A8 88F0      2250            mov     b,r0
08AA E9        2251            mov     a,r1
08AB 120000    2252            lcall   __divslong
08AE 858228    2253            mov     _BMM150_compensate_z_sloc1_1_0,dpl
08B1 858329    2254            mov     (_BMM150_compensate_z_sloc1_1_0 + 1),dph
08B4 85F02A    2255            mov     (_BMM150_compensate_z_sloc1_1_0 + 2),b
08B7 F52B      2256            mov     (_BMM150_compensate_z_sloc1_1_0 + 3),a
08B9 D005      2257            pop     ar5
08BB D004      2258            pop     ar4
08BD D003      2259            pop     ar3
08BF D002      2260            pop     ar2
08C1 E5B0      2261            mov     a,_dig_z4
08C3 FE        2262            mov     r6,a
08C4 33        2263            rlc     a
08C5 95E0      2264            subb    a,acc
08C7 FF        2265            mov     r7,a
08C8 EA        2266            mov     a,r2
08C9 C3        2267            clr     c
08CA 9E        2268            subb    a,r6
08CB FA        2269            mov     r2,a
08CC EB        2270            mov     a,r3
08CD 9F        2271            subb    a,r7
08CE FB        2272            mov     r3,a
08CF 33        2273            rlc     a
08D0 95E0      2274            subb    a,acc
08D2 8B7A      2275            mov     (_BMM150_compensate_z_sloc2_1_0 + 2),r3
08D4 5401      2276            anl     a,#0x01
08D6 A2E0      2277            mov     c,acc.0
08D8 C57A      2278            xch     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
08DA 13        2279            rrc     a
08DB C57A      2280            xch     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
08DD 13        2281            rrc     a
08DE C57A      2282            xch     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
08E0 F57B      2283            mov     (_BMM150_compensate_z_sloc2_1_0 + 3),a
08E2 EA        2284            mov     a,r2
08E3 03        2285            rr      a
08E4 5480      2286            anl     a,#0x80
08E6 F579      2287            mov     (_BMM150_compensate_z_sloc2_1_0 + 1),a
08E8 EA        2288            mov     a,r2
08E9 C3        2289            clr     c
08EA 13        2290            rrc     a
08EB 457A      2291            orl     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
08ED F57A      2292            mov     (_BMM150_compensate_z_sloc2_1_0 + 2),a
08EF 757800    2293            mov     _BMM150_compensate_z_sloc2_1_0,#0x00
08F2           2294   ;        sensor_test.c:463: process_comp_z3 = ((int32_t)dig_z1) * (((int16_t)*data_rhall) * 2);
08F2 E520      2295            mov     a,_dig_z1
08F4 F8        2296            mov     r0,a
08F5 33        2297            rlc     a
08F6 95E0      2298            subb    a,acc
08F8 F9        2299            mov     r1,a
08F9 FA        2300            mov     r2,a
08FA FB        2301            mov     r3,a
08FB ED        2302            mov     a,r5
08FC CC        2303            xch     a,r4
08FD 25E0      2304            add     a,acc
08FF CC        2305            xch     a,r4
0900 33        2306            rlc     a
0901 8C00      2307            mov     __mullong_PARM_2,r4
0903 F501      2308            mov     (__mullong_PARM_2 + 1),a
0905 33        2309            rlc     a
0906 95E0      2310            subb    a,acc
0908 F502      2311            mov     (__mullong_PARM_2 + 2),a
090A F503      2312            mov     (__mullong_PARM_2 + 3),a
090C           2313   ;        sensor_test.c:464: process_comp_z4 = (int16_t)((process_comp_z3 + (32768)) / 65536);
090C 8882      2314            mov     dpl,r0
090E 8983      2315            mov     dph,r1
0910 8AF0      2316            mov     b,r2
0912 EB        2317            mov     a,r3
0913 120000    2318            lcall   __mullong
0916 AA82      2319            mov     r2,dpl
0918 AB83      2320            mov     r3,dph
091A ACF0      2321            mov     r4,b
091C FD        2322            mov     r5,a
091D 7480      2323            mov     a,#0x80
091F 2B        2324            add     a,r3
0920 FB        2325            mov     r3,a
0921 E4        2326            clr     a
0922 3C        2327            addc    a,r4
0923 FC        2328            mov     r4,a
0924 E4        2329            clr     a
0925 3D        2330            addc    a,r5
0926 FD        2331            mov     r5,a
0927 750000    2332            mov     __divslong_PARM_2,#0x00
092A 750100    2333            mov     (__divslong_PARM_2 + 1),#0x00
092D 750201    2334            mov     (__divslong_PARM_2 + 2),#0x01
0930 750300    2335            mov     (__divslong_PARM_2 + 3),#0x00
0933 8A82      2336            mov     dpl,r2
0935 8B83      2337            mov     dph,r3
0937 8CF0      2338            mov     b,r4
0939 ED        2339            mov     a,r5
093A 120000    2340            lcall   __divslong
093D AA82      2341            mov     r2,dpl
093F AB83      2342            mov     r3,dph
0941           2343   ;        sensor_test.c:465: retval = ((process_comp_z2 - process_comp_z1) / (dig_z2 + process_comp_z4));
0941 E578      2344            mov     a,_BMM150_compensate_z_sloc2_1_0
0943 C3        2345            clr     c
0944 9528      2346            subb    a,_BMM150_compensate_z_sloc1_1_0
0946 FC        2347            mov     r4,a
0947 E579      2348            mov     a,(_BMM150_compensate_z_sloc2_1_0 + 1)
0949 9529      2349            subb    a,(_BMM150_compensate_z_sloc1_1_0 + 1)
094B FD        2350            mov     r5,a
094C E57A      2351            mov     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
094E 952A      2352            subb    a,(_BMM150_compensate_z_sloc1_1_0 + 2)
0950 FE        2353            mov     r6,a
0951 E57B      2354            mov     a,(_BMM150_compensate_z_sloc2_1_0 + 3)
0953 952B      2355            subb    a,(_BMM150_compensate_z_sloc1_1_0 + 3)
0955 FF        2356            mov     r7,a
0956 E530      2357            mov     a,_dig_z2
0958 F8        2358            mov     r0,a
0959 33        2359            rlc     a
095A 95E0      2360            subb    a,acc
095C F9        2361            mov     r1,a
095D EA        2362            mov     a,r2
095E 28        2363            add     a,r0
095F FA        2364            mov     r2,a
0960 EB        2365            mov     a,r3
0961 39        2366            addc    a,r1
0962 8A00      2367            mov     __divslong_PARM_2,r2
0964 F501      2368            mov     (__divslong_PARM_2 + 1),a
0966 33        2369            rlc     a
0967 95E0      2370            subb    a,acc
0969 F502      2371            mov     (__divslong_PARM_2 + 2),a
096B F503      2372            mov     (__divslong_PARM_2 + 3),a
096D 8C82      2373            mov     dpl,r4
096F 8D83      2374            mov     dph,r5
0971 8EF0      2375            mov     b,r6
0973 EF        2376            mov     a,r7
0974 120000    2377            lcall   __divslong
0977 AA82      2378            mov     r2,dpl
0979 AB83      2379            mov     r3,dph
097B ACF0      2380            mov     r4,b
097D FD        2381            mov     r5,a
097E 90C328    2382            mov     dptr,#_BMM150_compensate_z_retval_1_111
0981 EA        2383            mov     a,r2
0982 F0        2384            movx    @dptr,a
0983 A3        2385            inc     dptr
0984 EB        2386            mov     a,r3
0985 F0        2387            movx    @dptr,a
0986 A3        2388            inc     dptr
0987 EC        2389            mov     a,r4
0988 F0        2390            movx    @dptr,a
0989 A3        2391            inc     dptr
098A ED        2392            mov     a,r5
098B F0        2393            movx    @dptr,a
098C           2394   ;        sensor_test.c:468: if (retval > BMM150_POSITIVE_SATURATION_Z)
098C C3        2395            clr     c
098D 74FF      2396            mov     a,#0xFF
098F 9A        2397            subb    a,r2
0990 747F      2398            mov     a,#0x7F
0992 9B        2399            subb    a,r3
0993 E4        2400            clr     a
0994 9C        2401            subb    a,r4
0995 E4        2402            clr     a
0996 6480      2403            xrl     a,#0x80
0998 8DF0      2404            mov     b,r5
099A 63F080    2405            xrl     b,#0x80
099D 95F0      2406            subb    a,b
099F 5000      2407            jnc     L014004?
09A1           2408   ;        sensor_test.c:470: retval = BMM150_POSITIVE_SATURATION_Z;
09A1 90C328    2409            mov     dptr,#_BMM150_compensate_z_retval_1_111
09A4 74FF      2410            mov     a,#0xFF
09A6 F0        2411            movx    @dptr,a
09A7 A3        2412            inc     dptr
09A8 747F      2413            mov     a,#0x7F
09AA F0        2414            movx    @dptr,a
09AB A3        2415            inc     dptr
09AC E4        2416            clr     a
09AD F0        2417            movx    @dptr,a
09AE A3        2418            inc     dptr
09AF F0        2419            movx    @dptr,a
09B0 8000      2420            sjmp    L014005?
09B2           2421   L014004?:
09B2           2422   ;        sensor_test.c:472: else if (retval < BMM150_NEGATIVE_SATURATION_Z)
09B2 C3        2423            clr     c
09B3 EA        2424            mov     a,r2
09B4 9401      2425            subb    a,#0x01
09B6 EB        2426            mov     a,r3
09B7 9480      2427            subb    a,#0x80
09B9 EC        2428            mov     a,r4
09BA 94FF      2429            subb    a,#0xFF
09BC ED        2430            mov     a,r5
09BD 6480      2431            xrl     a,#0x80
09BF 947F      2432            subb    a,#0x7f
09C1 5000      2433            jnc     L014005?
09C3           2434   ;        sensor_test.c:474: retval = BMM150_NEGATIVE_SATURATION_Z;
09C3 90C328    2435            mov     dptr,#_BMM150_compensate_z_retval_1_111
09C6 7401      2436            mov     a,#0x01
09C8 F0        2437            movx    @dptr,a
09C9 A3        2438            inc     dptr
09CA 7480      2439            mov     a,#0x80
09CC F0        2440            movx    @dptr,a
09CD A3        2441            inc     dptr
09CE 74FF      2442            mov     a,#0xFF
09D0 F0        2443            movx    @dptr,a
09D1 A3        2444            inc     dptr
09D2 F0        2445            movx    @dptr,a
09D3           2446   L014005?:
09D3           2447   ;        sensor_test.c:478: retval = retval / 16;
09D3 90C328    2448            mov     dptr,#_BMM150_compensate_z_retval_1_111
09D6 E0        2449            movx    a,@dptr
09D7 FA        2450            mov     r2,a
09D8 A3        2451            inc     dptr
09D9 E0        2452            movx    a,@dptr
09DA FB        2453            mov     r3,a
09DB A3        2454            inc     dptr
09DC E0        2455            movx    a,@dptr
09DD FC        2456            mov     r4,a
09DE A3        2457            inc     dptr
09DF E0        2458            movx    a,@dptr
09E0 FD        2459            mov     r5,a
09E1 750010    2460            mov     __divslong_PARM_2,#0x10
09E4 E4        2461            clr     a
09E5 F501      2462            mov     (__divslong_PARM_2 + 1),a
09E7 F502      2463            mov     (__divslong_PARM_2 + 2),a
09E9 F503      2464            mov     (__divslong_PARM_2 + 3),a
09EB 8A82      2465            mov     dpl,r2
09ED 8B83      2466            mov     dph,r3
09EF 8CF0      2467            mov     b,r4
09F1 ED        2468            mov     a,r5
09F2 120000    2469            lcall   __divslong
09F5 AA82      2470            mov     r2,dpl
09F7 AB83      2471            mov     r3,dph
09F9 ACF0      2472            mov     r4,b
09FB FD        2473            mov     r5,a
09FC 90C328    2474            mov     dptr,#_BMM150_compensate_z_retval_1_111
09FF EA        2475            mov     a,r2
0A00 F0        2476            movx    @dptr,a
0A01 A3        2477            inc     dptr
0A02 EB        2478            mov     a,r3
0A03 F0        2479            movx    @dptr,a
0A04 A3        2480            inc     dptr
0A05 EC        2481            mov     a,r4
0A06 F0        2482            movx    @dptr,a
0A07 A3        2483            inc     dptr
0A08 ED        2484            mov     a,r5
0A09 F0        2485            movx    @dptr,a
0A0A 8000      2486            sjmp    L014014?
0A0C           2487   L014007?:
0A0C           2488   ;        sensor_test.c:482: retval = BMM150_OVERFLOW_OUTPUT;
0A0C 90C328    2489            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A0F E4        2490            clr     a
0A10 F0        2491            movx    @dptr,a
0A11 A3        2492            inc     dptr
0A12 7480      2493            mov     a,#0x80
0A14 F0        2494            movx    @dptr,a
0A15 A3        2495            inc     dptr
0A16 74FF      2496            mov     a,#0xFF
0A18 F0        2497            movx    @dptr,a
0A19 A3        2498            inc     dptr
0A1A F0        2499            movx    @dptr,a
0A1B 8000      2500            sjmp    L014014?
0A1D           2501   L014013?:
0A1D           2502   ;        sensor_test.c:488: retval = BMM150_OVERFLOW_OUTPUT;
0A1D 90C328    2503            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A20 E4        2504            clr     a
0A21 F0        2505            movx    @dptr,a
0A22 A3        2506            inc     dptr
0A23 7480      2507            mov     a,#0x80
0A25 F0        2508            movx    @dptr,a
0A26 A3        2509            inc     dptr
0A27 74FF      2510            mov     a,#0xFF
0A29 F0        2511            movx    @dptr,a
0A2A A3        2512            inc     dptr
0A2B F0        2513            movx    @dptr,a
0A2C           2514   L014014?:
0A2C           2515   ;        sensor_test.c:491: return (int16_t)retval;
0A2C 90C328    2516            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A2F E0        2517            movx    a,@dptr
0A30 FA        2518            mov     r2,a
0A31 A3        2519            inc     dptr
0A32 E0        2520            movx    a,@dptr
0A33 FB        2521            mov     r3,a
0A34 A3        2522            inc     dptr
0A35 E0        2523            movx    a,@dptr
0A36 A3        2524            inc     dptr
0A37 E0        2525            movx    a,@dptr
0A38 8A82      2526            mov     dpl,r2
0A3A 8B83      2527            mov     dph,r3
0A3C 22        2528            ret
0A3D           2529   ;------------------------------------------------------------
0A3D           2530   ;Allocation info for local variables in function 'BMM150_Read_Data'
0A3D           2531   ;------------------------------------------------------------
0A3D           2532   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
0A3D           2533   ;mag_z                     Allocated with name '_BMM150_Read_Data_PARM_3'
0A3D           2534   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_118'
0A3D           2535   ;raw_x_lsb                 Allocated to registers r5 
0A3D           2536   ;raw_x_msb                 Allocated to registers r6 
0A3D           2537   ;raw_y_lsb                 Allocated with name '_BMM150_Read_Data_raw_y_lsb_1_119'
0A3D           2538   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_119'
0A3D           2539   ;raw_z_lsb                 Allocated with name '_BMM150_Read_Data_raw_z_lsb_1_119'
0A3D           2540   ;raw_z_msb                 Allocated with name '_BMM150_Read_Data_raw_z_msb_1_119'
0A3D           2541   ;raw_rhall_lsb             Allocated with name '_BMM150_Read_Data_raw_rhall_lsb_1_119'
0A3D           2542   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_119'
0A3D           2543   ;raw_z                     Allocated with name '_BMM150_Read_Data_raw_z_1_119'
0A3D           2544   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_119'
0A3D           2545   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_119'
0A3D           2546   ;z_val                     Allocated with name '_BMM150_Read_Data_z_val_1_119'
0A3D           2547   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_119'
0A3D           2548   ;z_raw                     Allocated to registers r3 r2 
0A3D           2549   ;------------------------------------------------------------
0A3D           2550   ;        sensor_test.c:494: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y, int16_t *mag_z)
0A3D           2551   ;        -----------------------------------------
0A3D           2552   ;         function BMM150_Read_Data
0A3D           2553   ;        -----------------------------------------
0A3D           2554   _BMM150_Read_Data:
0A3D 8582C8    2555            mov     _BMM150_Read_Data_mag_x_1_118,dpl
0A40 8583C9    2556            mov     (_BMM150_Read_Data_mag_x_1_118 + 1),dph
0A43 85F0CA    2557            mov     (_BMM150_Read_Data_mag_x_1_118 + 2),b
0A46           2558   ;        sensor_test.c:499: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
0A46 758242    2559            mov     dpl,#0x42
0A49 120000    2560            lcall   _SPI_read
0A4C AD82      2561            mov     r5,dpl
0A4E           2562   ;        sensor_test.c:500: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
0A4E 758243    2563            mov     dpl,#0x43
0A51 C005      2564            push    ar5
0A53 120000    2565            lcall   _SPI_read
0A56 AE82      2566            mov     r6,dpl
0A58           2567   ;        sensor_test.c:501: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
0A58 758244    2568            mov     dpl,#0x44
0A5B C006      2569            push    ar6
0A5D 120000    2570            lcall   _SPI_read
0A60 858228    2571            mov     _BMM150_Read_Data_raw_y_lsb_1_119,dpl
0A63           2572   ;        sensor_test.c:502: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
0A63 758245    2573            mov     dpl,#0x45
0A66 120000    2574            lcall   _SPI_read
0A69 858288    2575            mov     _BMM150_Read_Data_raw_y_msb_1_119,dpl
0A6C           2576   ;        sensor_test.c:503: SPI_read_block(BMM150_DATA_X_LSB, raw_z, 2);
0A6C 75B058    2577            mov     _SPI_read_block_PARM_2,#_BMM150_Read_Data_raw_z_1_119
0A6F 75B100    2578            mov     (_SPI_read_block_PARM_2 + 1),#0x00
0A72 75B240    2579            mov     (_SPI_read_block_PARM_2 + 2),#0x40
0A75 756002    2580            mov     _SPI_read_block_PARM_3,#0x02
0A78 758242    2581            mov     dpl,#0x42
0A7B 120000    2582            lcall   _SPI_read_block
0A7E           2583   ;        sensor_test.c:506: raw_z_lsb = raw_z[0];
0A7E 8558E8    2584            mov     _BMM150_Read_Data_raw_z_lsb_1_119,_BMM150_Read_Data_raw_z_1_119
0A81           2585   ;        sensor_test.c:507: raw_z_msb = raw_z[1];
0A81 855948    2586            mov     _BMM150_Read_Data_raw_z_msb_1_119,(_BMM150_Read_Data_raw_z_1_119 + 0x0001)
0A84           2587   ;        sensor_test.c:508: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
0A84 758248    2588            mov     dpl,#0x48
0A87 120000    2589            lcall   _SPI_read
0A8A 8582A8    2590            mov     _BMM150_Read_Data_raw_rhall_lsb_1_119,dpl
0A8D           2591   ;        sensor_test.c:509: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
0A8D 758249    2592            mov     dpl,#0x49
0A90 120000    2593            lcall   _SPI_read
0A93 858208    2594            mov     _BMM150_Read_Data_raw_rhall_msb_1_119,dpl
0A96           2595   ;        sensor_test.c:510: SPI_read_block(BMM150_DATA_X_LSB, raw_z, 2);
0A96 75B058    2596            mov     _SPI_read_block_PARM_2,#_BMM150_Read_Data_raw_z_1_119
0A99 75B100    2597            mov     (_SPI_read_block_PARM_2 + 1),#0x00
0A9C 75B240    2598            mov     (_SPI_read_block_PARM_2 + 2),#0x40
0A9F 756002    2599            mov     _SPI_read_block_PARM_3,#0x02
0AA2 758242    2600            mov     dpl,#0x42
0AA5 120000    2601            lcall   _SPI_read_block
0AA8 D006      2602            pop     ar6
0AAA D005      2603            pop     ar5
0AAC           2604   ;        sensor_test.c:515: x_val = ((int16_t)((int8_t)raw_x_msb)) * 32 + ((raw_x_lsb & 0xF8) >> 3);
0AAC EE        2605            mov     a,r6
0AAD 33        2606            rlc     a
0AAE 95E0      2607            subb    a,acc
0AB0 C4        2608            swap    a
0AB1 23        2609            rl      a
0AB2 54E0      2610            anl     a,#0xe0
0AB4 CE        2611            xch     a,r6
0AB5 C4        2612            swap    a
0AB6 23        2613            rl      a
0AB7 CE        2614            xch     a,r6
0AB8 6E        2615            xrl     a,r6
0AB9 CE        2616            xch     a,r6
0ABA 54E0      2617            anl     a,#0xe0
0ABC CE        2618            xch     a,r6
0ABD 6E        2619            xrl     a,r6
0ABE FF        2620            mov     r7,a
0ABF 5305F8    2621            anl     ar5,#0xF8
0AC2 ED        2622            mov     a,r5
0AC3 C4        2623            swap    a
0AC4 23        2624            rl      a
0AC5 541F      2625            anl     a,#0x1f
0AC7 FD        2626            mov     r5,a
0AC8 7A00      2627            mov     r2,#0x00
0ACA 2E        2628            add     a,r6
0ACB FB        2629            mov     r3,a
0ACC EA        2630            mov     a,r2
0ACD 3F        2631            addc    a,r7
0ACE FA        2632            mov     r2,a
0ACF 8BA8      2633            mov     _BMM150_Read_Data_x_val_1_119,r3
0AD1 8AA9      2634            mov     (_BMM150_Read_Data_x_val_1_119 + 1),r2
0AD3           2635   ;        sensor_test.c:516: if (x_val > 4095){
0AD3 C3        2636            clr     c
0AD4 74FF      2637            mov     a,#0xFF
0AD6 9B        2638            subb    a,r3
0AD7 748F      2639            mov     a,#(0x0F ^ 0x80)
0AD9 8AF0      2640            mov     b,r2
0ADB 63F080    2641            xrl     b,#0x80
0ADE 95F0      2642            subb    a,b
0AE0 5000      2643            jnc     L015002?
0AE2           2644   ;        sensor_test.c:517: x_val = x_val - 8192;  // 2's complement sign correction
0AE2 8BA8      2645            mov     _BMM150_Read_Data_x_val_1_119,r3
0AE4 EA        2646            mov     a,r2
0AE5 24E0      2647            add     a,#0xe0
0AE7 F5A9      2648            mov     (_BMM150_Read_Data_x_val_1_119 + 1),a
0AE9           2649   L015002?:
0AE9           2650   ;        sensor_test.c:520: y_val = ((int16_t)((int8_t)raw_y_msb)) * 32 + ((raw_y_lsb & 0xF8) >> 3);
0AE9 E588      2651            mov     a,_BMM150_Read_Data_raw_y_msb_1_119
0AEB FA        2652            mov     r2,a
0AEC 33        2653            rlc     a
0AED 95E0      2654            subb    a,acc
0AEF C4        2655            swap    a
0AF0 23        2656            rl      a
0AF1 54E0      2657            anl     a,#0xe0
0AF3 CA        2658            xch     a,r2
0AF4 C4        2659            swap    a
0AF5 23        2660            rl      a
0AF6 CA        2661            xch     a,r2
0AF7 6A        2662            xrl     a,r2
0AF8 CA        2663            xch     a,r2
0AF9 54E0      2664            anl     a,#0xe0
0AFB CA        2665            xch     a,r2
0AFC 6A        2666            xrl     a,r2
0AFD FB        2667            mov     r3,a
0AFE 74F8      2668            mov     a,#0xF8
0B00 5528      2669            anl     a,_BMM150_Read_Data_raw_y_lsb_1_119
0B02 C4        2670            swap    a
0B03 23        2671            rl      a
0B04 541F      2672            anl     a,#0x1f
0B06 FC        2673            mov     r4,a
0B07 7D00      2674            mov     r5,#0x00
0B09 2A        2675            add     a,r2
0B0A FA        2676            mov     r2,a
0B0B ED        2677            mov     a,r5
0B0C 3B        2678            addc    a,r3
0B0D FB        2679            mov     r3,a
0B0E 8AF8      2680            mov     _BMM150_Read_Data_y_val_1_119,r2
0B10 8BF9      2681            mov     (_BMM150_Read_Data_y_val_1_119 + 1),r3
0B12           2682   ;        sensor_test.c:521: if (y_val > 4095) {
0B12 C3        2683            clr     c
0B13 74FF      2684            mov     a,#0xFF
0B15 9A        2685            subb    a,r2
0B16 748F      2686            mov     a,#(0x0F ^ 0x80)
0B18 8BF0      2687            mov     b,r3
0B1A 63F080    2688            xrl     b,#0x80
0B1D 95F0      2689            subb    a,b
0B1F 5000      2690            jnc     L015004?
0B21           2691   ;        sensor_test.c:522: y_val = y_val - 8192;  // 2's complement sign correction
0B21 8AF8      2692            mov     _BMM150_Read_Data_y_val_1_119,r2
0B23 EB        2693            mov     a,r3
0B24 24E0      2694            add     a,#0xe0
0B26 F5F9      2695            mov     (_BMM150_Read_Data_y_val_1_119 + 1),a
0B28           2696   L015004?:
0B28           2697   ;        sensor_test.c:529: z_raw = ((uint16_t)raw_z_msb << 7) | ((raw_z_lsb & 0xFE) >> 1);
0B28 AF48      2698            mov     r7,_BMM150_Read_Data_raw_z_msb_1_119
0B2A E4        2699            clr     a
0B2B 5401      2700            anl     a,#0x01
0B2D A2E0      2701            mov     c,acc.0
0B2F CF        2702            xch     a,r7
0B30 13        2703            rrc     a
0B31 CF        2704            xch     a,r7
0B32 13        2705            rrc     a
0B33 CF        2706            xch     a,r7
0B34 FA        2707            mov     r2,a
0B35 74FE      2708            mov     a,#0xFE
0B37 55E8      2709            anl     a,_BMM150_Read_Data_raw_z_lsb_1_119
0B39 C3        2710            clr     c
0B3A 13        2711            rrc     a
0B3B 7C00      2712            mov     r4,#0x00
0B3D 4F        2713            orl     a,r7
0B3E FB        2714            mov     r3,a
0B3F EC        2715            mov     a,r4
0B40 4A        2716            orl     a,r2
0B41 FA        2717            mov     r2,a
0B42           2718   ;        sensor_test.c:530: if (z_raw > 0x3FFF) z_val = z_raw - 0x8000;
0B42 C3        2719            clr     c
0B43 74FF      2720            mov     a,#0xFF
0B45 9B        2721            subb    a,r3
0B46 743F      2722            mov     a,#0x3F
0B48 9A        2723            subb    a,r2
0B49 5000      2724            jnc     L015006?
0B4B 8B48      2725            mov     _BMM150_Read_Data_z_val_1_119,r3
0B4D EA        2726            mov     a,r2
0B4E 2480      2727            add     a,#0x80
0B50 F549      2728            mov     (_BMM150_Read_Data_z_val_1_119 + 1),a
0B52 8000      2729            sjmp    L015007?
0B54           2730   L015006?:
0B54           2731   ;        sensor_test.c:531: else z_val = z_raw; 
0B54 8B48      2732            mov     _BMM150_Read_Data_z_val_1_119,r3
0B56 8A49      2733            mov     (_BMM150_Read_Data_z_val_1_119 + 1),r2
0B58           2734   L015007?:
0B58           2735   ;        sensor_test.c:534: rhall_val = ((uint16_t)raw_rhall_msb) * 64 + (raw_rhall_lsb & 0x3F); 
0B58 AF08      2736            mov     r7,_BMM150_Read_Data_raw_rhall_msb_1_119
0B5A E4        2737            clr     a
0B5B 5403      2738            anl     a,#0x03
0B5D A2E0      2739            mov     c,acc.0
0B5F CF        2740            xch     a,r7
0B60 13        2741            rrc     a
0B61 CF        2742            xch     a,r7
0B62 13        2743            rrc     a
0B63 A2E0      2744            mov     c,acc.0
0B65 CF        2745            xch     a,r7
0B66 13        2746            rrc     a
0B67 CF        2747            xch     a,r7
0B68 13        2748            rrc     a
0B69 CF        2749            xch     a,r7
0B6A FA        2750            mov     r2,a
0B6B 743F      2751            mov     a,#0x3F
0B6D 55A8      2752            anl     a,_BMM150_Read_Data_raw_rhall_lsb_1_119
0B6F 7C00      2753            mov     r4,#0x00
0B71 2F        2754            add     a,r7
0B72 F5A8      2755            mov     _BMM150_Read_Data_rhall_val_1_119,a
0B74 EC        2756            mov     a,r4
0B75 3A        2757            addc    a,r2
0B76 F5A9      2758            mov     (_BMM150_Read_Data_rhall_val_1_119 + 1),a
0B78           2759   ;        sensor_test.c:538: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
0B78 75C0A8    2760            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_119
0B7B 75C100    2761            mov     (_BMM150_compensate_x_PARM_2 + 1),#0x00
0B7E 75C240    2762            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x40
0B81 90BEA8    2763            mov     dptr,#_BMM150_Read_Data_x_val_1_119
0B84 75F040    2764            mov     b,#0x40
0B87 120000    2765            lcall   _BMM150_compensate_x
0B8A AA82      2766            mov     r2,dpl
0B8C AB83      2767            mov     r3,dph
0B8E 85C882    2768            mov     dpl,_BMM150_Read_Data_mag_x_1_118
0B91 85C983    2769            mov     dph,(_BMM150_Read_Data_mag_x_1_118 + 1)
0B94 85CAF0    2770            mov     b,(_BMM150_Read_Data_mag_x_1_118 + 2)
0B97 EA        2771            mov     a,r2
0B98 120000    2772            lcall   __gptrput
0B9B A3        2773            inc     dptr
0B9C EB        2774            mov     a,r3
0B9D 120000    2775            lcall   __gptrput
0BA0           2776   ;        sensor_test.c:539: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
0BA0 AAD0      2777            mov     r2,_BMM150_Read_Data_PARM_2
0BA2 ABD1      2778            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
0BA4 ACD2      2779            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
0BA6 7570A8    2780            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_119
0BA9 757100    2781            mov     (_BMM150_compensate_y_PARM_2 + 1),#0x00
0BAC 757240    2782            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x40
0BAF 90BEF8    2783            mov     dptr,#_BMM150_Read_Data_y_val_1_119
0BB2 75F040    2784            mov     b,#0x40
0BB5 C002      2785            push    ar2
0BB7 C003      2786            push    ar3
0BB9 C004      2787            push    ar4
0BBB 120000    2788            lcall   _BMM150_compensate_y
0BBE AD82      2789            mov     r5,dpl
0BC0 AE83      2790            mov     r6,dph
0BC2 D004      2791            pop     ar4
0BC4 D003      2792            pop     ar3
0BC6 D002      2793            pop     ar2
0BC8 8A82      2794            mov     dpl,r2
0BCA 8B83      2795            mov     dph,r3
0BCC 8CF0      2796            mov     b,r4
0BCE ED        2797            mov     a,r5
0BCF 120000    2798            lcall   __gptrput
0BD2 A3        2799            inc     dptr
0BD3 EE        2800            mov     a,r6
0BD4 120000    2801            lcall   __gptrput
0BD7           2802   ;        sensor_test.c:540: *mag_z = BMM150_compensate_z(&z_val, &rhall_val);
0BD7 AA80      2803            mov     r2,_BMM150_Read_Data_PARM_3
0BD9 AB81      2804            mov     r3,(_BMM150_Read_Data_PARM_3 + 1)
0BDB AC82      2805            mov     r4,(_BMM150_Read_Data_PARM_3 + 2)
0BDD 7520A8    2806            mov     _BMM150_compensate_z_PARM_2,#_BMM150_Read_Data_rhall_val_1_119
0BE0 752100    2807            mov     (_BMM150_compensate_z_PARM_2 + 1),#0x00
0BE3 752240    2808            mov     (_BMM150_compensate_z_PARM_2 + 2),#0x40
0BE6 90BF48    2809            mov     dptr,#_BMM150_Read_Data_z_val_1_119
0BE9 75F040    2810            mov     b,#0x40
0BEC C002      2811            push    ar2
0BEE C003      2812            push    ar3
0BF0 C004      2813            push    ar4
0BF2 120000    2814            lcall   _BMM150_compensate_z
0BF5 AD82      2815            mov     r5,dpl
0BF7 AE83      2816            mov     r6,dph
0BF9 D004      2817            pop     ar4
0BFB D003      2818            pop     ar3
0BFD D002      2819            pop     ar2
0BFF 8A82      2820            mov     dpl,r2
0C01 8B83      2821            mov     dph,r3
0C03 8CF0      2822            mov     b,r4
0C05 ED        2823            mov     a,r5
0C06 120000    2824            lcall   __gptrput
0C09 A3        2825            inc     dptr
0C0A EE        2826            mov     a,r6
0C0B 020000    2827            ljmp    __gptrput
0C0E           2828   ;------------------------------------------------------------
0C0E           2829   ;Allocation info for local variables in function 'main'
0C0E           2830   ;------------------------------------------------------------
0C0E           2831   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0C0E           2832   ;sloc1                     Allocated with name '_main_sloc1_1_0'
0C0E           2833   ;i                         Allocated with name '_main_i_1_123'
0C0E           2834   ;mag_x                     Allocated with name '_main_mag_x_1_123'
0C0E           2835   ;mag_y                     Allocated with name '_main_mag_y_1_123'
0C0E           2836   ;mag_z                     Allocated with name '_main_mag_z_1_123'
0C0E           2837   ;angle                     Allocated with name '_main_angle_1_123'
0C0E           2838   ;sum_x                     Allocated with name '_main_sum_x_1_123'
0C0E           2839   ;sum_y                     Allocated with name '_main_sum_y_1_123'
0C0E           2840   ;alpha                     Allocated with name '_main_alpha_1_123'
0C0E           2841   ;avg_angle                 Allocated with name '_main_avg_angle_1_123'
0C0E           2842   ;smoothed_angle            Allocated with name '_main_smoothed_angle_1_123'
0C0E           2843   ;------------------------------------------------------------
0C0E           2844   ;        sensor_test.c:546: void main (void)
0C0E           2845   ;        -----------------------------------------
0C0E           2846   ;         function main
0C0E           2847   ;        -----------------------------------------
0C0E           2848   _main:
0C0E           2849   ;        sensor_test.c:557: sum_x = 0.0; 
0C0E 90C4B8    2850            mov     dptr,#_main_sum_x_1_123
0C11           2851   ;        sensor_test.c:558: sum_y = 0.0; 
0C11 E4        2852            clr     a
0C12 F0        2853            movx    @dptr,a
0C13 A3        2854            inc     dptr
0C14 F0        2855            movx    @dptr,a
0C15 A3        2856            inc     dptr
0C16 F0        2857            movx    @dptr,a
0C17 A3        2858            inc     dptr
0C18 F0        2859            movx    @dptr,a
0C19 90C508    2860            mov     dptr,#_main_sum_y_1_123
0C1C F0        2861            movx    @dptr,a
0C1D A3        2862            inc     dptr
0C1E           2863   ;        sensor_test.c:560: smoothed_angle = 0.0; 
0C1E E4        2864            clr     a
0C1F F0        2865            movx    @dptr,a
0C20 A3        2866            inc     dptr
0C21 F0        2867            movx    @dptr,a
0C22 A3        2868            inc     dptr
0C23 F0        2869            movx    @dptr,a
0C24 90C5A8    2870            mov     dptr,#_main_smoothed_angle_1_123
0C27 F0        2871            movx    @dptr,a
0C28 A3        2872            inc     dptr
0C29 E4        2873            clr     a
0C2A F0        2874            movx    @dptr,a
0C2B A3        2875            inc     dptr
0C2C F0        2876            movx    @dptr,a
0C2D A3        2877            inc     dptr
0C2E F0        2878            movx    @dptr,a
0C2F           2879   ;        sensor_test.c:562: Set_Pin_Output(0x03); 
0C2F 758203    2880            mov     dpl,#0x03
0C32 120000    2881            lcall   _Set_Pin_Output
0C35           2882   ;        sensor_test.c:563: BMM150_Init();
0C35 120000    2883            lcall   _BMM150_Init
0C38           2884   ;        sensor_test.c:565: waitms(500);
0C38 9001F4    2885            mov     dptr,#0x01F4
0C3B 120000    2886            lcall   _waitms
0C3E           2887   ;        sensor_test.c:566: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0C3E 7498      2888            mov     a,#__str_3
0C40 C0E0      2889            push    acc
0C42 74DA      2890            mov     a,#(__str_3 >> 8)
0C44 C0E0      2891            push    acc
0C46 7480      2892            mov     a,#0x80
0C48 C0E0      2893            push    acc
0C4A 120000    2894            lcall   _printf
0C4D 1581      2895            dec     sp
0C4F 1581      2896            dec     sp
0C51 1581      2897            dec     sp
0C53           2898   ;        sensor_test.c:570: __FILE__, __DATE__, __TIME__);
0C53           2899   ;        sensor_test.c:569: "Compiled: %s, %s\n\n",
0C53 74D8      2900            mov     a,#__str_7
0C55 C0E0      2901            push    acc
0C57 74DA      2902            mov     a,#(__str_7 >> 8)
0C59 C0E0      2903            push    acc
0C5B 7480      2904            mov     a,#0x80
0C5D C0E0      2905            push    acc
0C5F 7418      2906            mov     a,#__str_6
0C61 C0E0      2907            push    acc
0C63 74DB      2908            mov     a,#(__str_6 >> 8)
0C65 C0E0      2909            push    acc
0C67 7480      2910            mov     a,#0x80
0C69 C0E0      2911            push    acc
0C6B 7458      2912            mov     a,#__str_5
0C6D C0E0      2913            push    acc
0C6F 74DB      2914            mov     a,#(__str_5 >> 8)
0C71 C0E0      2915            push    acc
0C73 7480      2916            mov     a,#0x80
0C75 C0E0      2917            push    acc
0C77 7498      2918            mov     a,#__str_4
0C79 C0E0      2919            push    acc
0C7B 74DB      2920            mov     a,#(__str_4 >> 8)
0C7D C0E0      2921            push    acc
0C7F 7480      2922            mov     a,#0x80
0C81 C0E0      2923            push    acc
0C83 120000    2924            lcall   _printf
0C86 E581      2925            mov     a,sp
0C88 24F4      2926            add     a,#0xf4
0C8A F581      2927            mov     sp,a
0C8C           2928   ;        sensor_test.c:574: for (i = 0; i < 100; i++){
0C8C           2929   L016020?:
0C8C 75E800    2930            mov     _main_sloc0_1_0,#0x00
0C8F           2931   L016011?:
0C8F 749C      2932            mov     a,#0x100 - 0x64
0C91 25E8      2933            add     a,_main_sloc0_1_0
0C93 5000      2934            jnc     L016024?
0C95 020000    2935            ljmp    L016014?
0C98           2936   L016024?:
0C98           2937   ;        sensor_test.c:575: BMM150_Read_Data(&mag_x, &mag_y, &mag_z);
0C98 75D0C8    2938            mov     _BMM150_Read_Data_PARM_2,#_main_mag_y_1_123
0C9B 75D1C3    2939            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_main_mag_y_1_123 >> 8)
0C9E 75D200    2940            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
0CA1 758018    2941            mov     _BMM150_Read_Data_PARM_3,#_main_mag_z_1_123
0CA4 7581C4    2942            mov     (_BMM150_Read_Data_PARM_3 + 1),#(_main_mag_z_1_123 >> 8)
0CA7 758200    2943            mov     (_BMM150_Read_Data_PARM_3 + 2),#0x00
0CAA 90C378    2944            mov     dptr,#_main_mag_x_1_123
0CAD 75F000    2945            mov     b,#0x00
0CB0 120000    2946            lcall   _BMM150_Read_Data
0CB3           2947   ;        sensor_test.c:576: angle = atan2f((float)mag_y, (float)mag_x) * 180.0 / M_PI;
0CB3 90C3C8    2948            mov     dptr,#_main_mag_y_1_123
0CB6 E0        2949            movx    a,@dptr
0CB7 FB        2950            mov     r3,a
0CB8 A3        2951            inc     dptr
0CB9 E0        2952            movx    a,@dptr
0CBA FC        2953            mov     r4,a
0CBB 8B82      2954            mov     dpl,r3
0CBD 8C83      2955            mov     dph,r4
0CBF 120000    2956            lcall   ___sint2fs
0CC2 AB82      2957            mov     r3,dpl
0CC4 AC83      2958            mov     r4,dph
0CC6 ADF0      2959            mov     r5,b
0CC8 FE        2960            mov     r6,a
0CC9 90C378    2961            mov     dptr,#_main_mag_x_1_123
0CCC E0        2962            movx    a,@dptr
0CCD FF        2963            mov     r7,a
0CCE A3        2964            inc     dptr
0CCF E0        2965            movx    a,@dptr
0CD0 F8        2966            mov     r0,a
0CD1 8F82      2967            mov     dpl,r7
0CD3 8883      2968            mov     dph,r0
0CD5 C003      2969            push    ar3
0CD7 C004      2970            push    ar4
0CD9 C005      2971            push    ar5
0CDB C006      2972            push    ar6
0CDD 120000    2973            lcall   ___sint2fs
0CE0 858200    2974            mov     _atan2f_PARM_2,dpl
0CE3 858301    2975            mov     (_atan2f_PARM_2 + 1),dph
0CE6 85F002    2976            mov     (_atan2f_PARM_2 + 2),b
0CE9 F503      2977            mov     (_atan2f_PARM_2 + 3),a
0CEB D006      2978            pop     ar6
0CED D005      2979            pop     ar5
0CEF D004      2980            pop     ar4
0CF1 D003      2981            pop     ar3
0CF3 8B82      2982            mov     dpl,r3
0CF5 8C83      2983            mov     dph,r4
0CF7 8DF0      2984            mov     b,r5
0CF9 EE        2985            mov     a,r6
0CFA 120000    2986            lcall   _atan2f
0CFD AB82      2987            mov     r3,dpl
0CFF AC83      2988            mov     r4,dph
0D01 ADF0      2989            mov     r5,b
0D03 FE        2990            mov     r6,a
0D04 C003      2991            push    ar3
0D06 C004      2992            push    ar4
0D08 C005      2993            push    ar5
0D0A C006      2994            push    ar6
0D0C 900000    2995            mov     dptr,#0x0000
0D0F 75F034    2996            mov     b,#0x34
0D12 7443      2997            mov     a,#0x43
0D14 120000    2998            lcall   ___fsmul
0D17 AB82      2999            mov     r3,dpl
0D19 AC83      3000            mov     r4,dph
0D1B ADF0      3001            mov     r5,b
0D1D FE        3002            mov     r6,a
0D1E E581      3003            mov     a,sp
0D20 24FC      3004            add     a,#0xfc
0D22 F581      3005            mov     sp,a
0D24 74DB      3006            mov     a,#0xDB
0D26 C0E0      3007            push    acc
0D28 740F      3008            mov     a,#0x0F
0D2A C0E0      3009            push    acc
0D2C 7449      3010            mov     a,#0x49
0D2E C0E0      3011            push    acc
0D30 7440      3012            mov     a,#0x40
0D32 C0E0      3013            push    acc
0D34 8B82      3014            mov     dpl,r3
0D36 8C83      3015            mov     dph,r4
0D38 8DF0      3016            mov     b,r5
0D3A EE        3017            mov     a,r6
0D3B 120000    3018            lcall   ___fsdiv
0D3E AB82      3019            mov     r3,dpl
0D40 AC83      3020            mov     r4,dph
0D42 ADF0      3021            mov     r5,b
0D44 FE        3022            mov     r6,a
0D45 E581      3023            mov     a,sp
0D47 24FC      3024            add     a,#0xfc
0D49 F581      3025            mov     sp,a
0D4B 90C468    3026            mov     dptr,#_main_angle_1_123
0D4E EB        3027            mov     a,r3
0D4F F0        3028            movx    @dptr,a
0D50 A3        3029            inc     dptr
0D51 EC        3030            mov     a,r4
0D52 F0        3031            movx    @dptr,a
0D53 A3        3032            inc     dptr
0D54 ED        3033            mov     a,r5
0D55 F0        3034            movx    @dptr,a
0D56 A3        3035            inc     dptr
0D57 EE        3036            mov     a,r6
0D58 F0        3037            movx    @dptr,a
0D59           3038   ;        sensor_test.c:579: if (angle < 0.0) angle += 360.0; 
0D59 C003      3039            push    ar3
0D5B C004      3040            push    ar4
0D5D C005      3041            push    ar5
0D5F C006      3042            push    ar6
0D61 E4        3043            clr     a
0D62 C0E0      3044            push    acc
0D64 C0E0      3045            push    acc
0D66 C0E0      3046            push    acc
0D68 C0E0      3047            push    acc
0D6A 8B82      3048            mov     dpl,r3
0D6C 8C83      3049            mov     dph,r4
0D6E 8DF0      3050            mov     b,r5
0D70 EE        3051            mov     a,r6
0D71 120000    3052            lcall   ___fslt
0D74 AF82      3053            mov     r7,dpl
0D76 E581      3054            mov     a,sp
0D78 24FC      3055            add     a,#0xfc
0D7A F581      3056            mov     sp,a
0D7C D006      3057            pop     ar6
0D7E D005      3058            pop     ar5
0D80 D004      3059            pop     ar4
0D82 D003      3060            pop     ar3
0D84 EF        3061            mov     a,r7
0D85 6000      3062            jz      L016004?
0D87 E4        3063            clr     a
0D88 C0E0      3064            push    acc
0D8A C0E0      3065            push    acc
0D8C 74B4      3066            mov     a,#0xB4
0D8E C0E0      3067            push    acc
0D90 7443      3068            mov     a,#0x43
0D92 C0E0      3069            push    acc
0D94 8B82      3070            mov     dpl,r3
0D96 8C83      3071            mov     dph,r4
0D98 8DF0      3072            mov     b,r5
0D9A EE        3073            mov     a,r6
0D9B 120000    3074            lcall   ___fsadd
0D9E AF82      3075            mov     r7,dpl
0DA0 A883      3076            mov     r0,dph
0DA2 A9F0      3077            mov     r1,b
0DA4 FA        3078            mov     r2,a
0DA5 E581      3079            mov     a,sp
0DA7 24FC      3080            add     a,#0xfc
0DA9 F581      3081            mov     sp,a
0DAB 90C468    3082            mov     dptr,#_main_angle_1_123
0DAE EF        3083            mov     a,r7
0DAF F0        3084            movx    @dptr,a
0DB0 A3        3085            inc     dptr
0DB1 E8        3086            mov     a,r0
0DB2 F0        3087            movx    @dptr,a
0DB3 A3        3088            inc     dptr
0DB4 E9        3089            mov     a,r1
0DB5 F0        3090            movx    @dptr,a
0DB6 A3        3091            inc     dptr
0DB7 EA        3092            mov     a,r2
0DB8 F0        3093            movx    @dptr,a
0DB9 8000      3094            sjmp    L016005?
0DBB           3095   L016004?:
0DBB           3096   ;        sensor_test.c:580: else if (angle > 360.0) angle -= 360.0;
0DBB C003      3097            push    ar3
0DBD C004      3098            push    ar4
0DBF C005      3099            push    ar5
0DC1 C006      3100            push    ar6
0DC3 E4        3101            clr     a
0DC4 C0E0      3102            push    acc
0DC6 C0E0      3103            push    acc
0DC8 74B4      3104            mov     a,#0xB4
0DCA C0E0      3105            push    acc
0DCC 7443      3106            mov     a,#0x43
0DCE C0E0      3107            push    acc
0DD0 8B82      3108            mov     dpl,r3
0DD2 8C83      3109            mov     dph,r4
0DD4 8DF0      3110            mov     b,r5
0DD6 EE        3111            mov     a,r6
0DD7 120000    3112            lcall   ___fsgt
0DDA AF82      3113            mov     r7,dpl
0DDC E581      3114            mov     a,sp
0DDE 24FC      3115            add     a,#0xfc
0DE0 F581      3116            mov     sp,a
0DE2 D006      3117            pop     ar6
0DE4 D005      3118            pop     ar5
0DE6 D004      3119            pop     ar4
0DE8 D003      3120            pop     ar3
0DEA EF        3121            mov     a,r7
0DEB 6000      3122            jz      L016005?
0DED E4        3123            clr     a
0DEE C0E0      3124            push    acc
0DF0 C0E0      3125            push    acc
0DF2 74B4      3126            mov     a,#0xB4
0DF4 C0E0      3127            push    acc
0DF6 7443      3128            mov     a,#0x43
0DF8 C0E0      3129            push    acc
0DFA 8B82      3130            mov     dpl,r3
0DFC 8C83      3131            mov     dph,r4
0DFE 8DF0      3132            mov     b,r5
0E00 EE        3133            mov     a,r6
0E01 120000    3134            lcall   ___fssub
0E04 AB82      3135            mov     r3,dpl
0E06 AC83      3136            mov     r4,dph
0E08 ADF0      3137            mov     r5,b
0E0A FE        3138            mov     r6,a
0E0B E581      3139            mov     a,sp
0E0D 24FC      3140            add     a,#0xfc
0E0F F581      3141            mov     sp,a
0E11 90C468    3142            mov     dptr,#_main_angle_1_123
0E14 EB        3143            mov     a,r3
0E15 F0        3144            movx    @dptr,a
0E16 A3        3145            inc     dptr
0E17 EC        3146            mov     a,r4
0E18 F0        3147            movx    @dptr,a
0E19 A3        3148            inc     dptr
0E1A ED        3149            mov     a,r5
0E1B F0        3150            movx    @dptr,a
0E1C A3        3151            inc     dptr
0E1D EE        3152            mov     a,r6
0E1E F0        3153            movx    @dptr,a
0E1F           3154   L016005?:
0E1F           3155   ;        sensor_test.c:582: sum_x += cosf(angle * M_PI / 180.0); 
0E1F 90C468    3156            mov     dptr,#_main_angle_1_123
0E22 E0        3157            movx    a,@dptr
0E23 C0E0      3158            push    acc
0E25 A3        3159            inc     dptr
0E26 E0        3160            movx    a,@dptr
0E27 C0E0      3161            push    acc
0E29 A3        3162            inc     dptr
0E2A E0        3163            movx    a,@dptr
0E2B C0E0      3164            push    acc
0E2D A3        3165            inc     dptr
0E2E E0        3166            movx    a,@dptr
0E2F C0E0      3167            push    acc
0E31 900FDB    3168            mov     dptr,#0x0FDB
0E34 75F049    3169            mov     b,#0x49
0E37 7440      3170            mov     a,#0x40
0E39 120000    3171            lcall   ___fsmul
0E3C AB82      3172            mov     r3,dpl
0E3E AC83      3173            mov     r4,dph
0E40 ADF0      3174            mov     r5,b
0E42 FE        3175            mov     r6,a
0E43 E581      3176            mov     a,sp
0E45 24FC      3177            add     a,#0xfc
0E47 F581      3178            mov     sp,a
0E49 E4        3179            clr     a
0E4A C0E0      3180            push    acc
0E4C C0E0      3181            push    acc
0E4E 7434      3182            mov     a,#0x34
0E50 C0E0      3183            push    acc
0E52 7443      3184            mov     a,#0x43
0E54 C0E0      3185            push    acc
0E56 8B82      3186            mov     dpl,r3
0E58 8C83      3187            mov     dph,r4
0E5A 8DF0      3188            mov     b,r5
0E5C EE        3189            mov     a,r6
0E5D 120000    3190            lcall   ___fsdiv
0E60 AB82      3191            mov     r3,dpl
0E62 AC83      3192            mov     r4,dph
0E64 ADF0      3193            mov     r5,b
0E66 FE        3194            mov     r6,a
0E67 E581      3195            mov     a,sp
0E69 24FC      3196            add     a,#0xfc
0E6B F581      3197            mov     sp,a
0E6D 8B82      3198            mov     dpl,r3
0E6F 8C83      3199            mov     dph,r4
0E71 8DF0      3200            mov     b,r5
0E73 EE        3201            mov     a,r6
0E74 C003      3202            push    ar3
0E76 C004      3203            push    ar4
0E78 C005      3204            push    ar5
0E7A C006      3205            push    ar6
0E7C 120000    3206            lcall   _cosf
0E7F 858228    3207            mov     _main_sloc1_1_0,dpl
0E82 858329    3208            mov     (_main_sloc1_1_0 + 1),dph
0E85 85F02A    3209            mov     (_main_sloc1_1_0 + 2),b
0E88 F52B      3210            mov     (_main_sloc1_1_0 + 3),a
0E8A 90C4B8    3211            mov     dptr,#_main_sum_x_1_123
0E8D E0        3212            movx    a,@dptr
0E8E FA        3213            mov     r2,a
0E8F A3        3214            inc     dptr
0E90 E0        3215            movx    a,@dptr
0E91 FF        3216            mov     r7,a
0E92 A3        3217            inc     dptr
0E93 E0        3218            movx    a,@dptr
0E94 F8        3219            mov     r0,a
0E95 A3        3220            inc     dptr
0E96 E0        3221            movx    a,@dptr
0E97 F9        3222            mov     r1,a
0E98 C028      3223            push    _main_sloc1_1_0
0E9A C029      3224            push    (_main_sloc1_1_0 + 1)
0E9C C02A      3225            push    (_main_sloc1_1_0 + 2)
0E9E C02B      3226            push    (_main_sloc1_1_0 + 3)
0EA0 8A82      3227            mov     dpl,r2
0EA2 8F83      3228            mov     dph,r7
0EA4 88F0      3229            mov     b,r0
0EA6 E9        3230            mov     a,r1
0EA7 120000    3231            lcall   ___fsadd
0EAA AA82      3232            mov     r2,dpl
0EAC AF83      3233            mov     r7,dph
0EAE A8F0      3234            mov     r0,b
0EB0 F9        3235            mov     r1,a
0EB1 E581      3236            mov     a,sp
0EB3 24FC      3237            add     a,#0xfc
0EB5 F581      3238            mov     sp,a
0EB7 D006      3239            pop     ar6
0EB9 D005      3240            pop     ar5
0EBB D004      3241            pop     ar4
0EBD D003      3242            pop     ar3
0EBF 90C4B8    3243            mov     dptr,#_main_sum_x_1_123
0EC2 EA        3244            mov     a,r2
0EC3 F0        3245            movx    @dptr,a
0EC4 A3        3246            inc     dptr
0EC5 EF        3247            mov     a,r7
0EC6 F0        3248            movx    @dptr,a
0EC7 A3        3249            inc     dptr
0EC8 E8        3250            mov     a,r0
0EC9 F0        3251            movx    @dptr,a
0ECA A3        3252            inc     dptr
0ECB E9        3253            mov     a,r1
0ECC F0        3254            movx    @dptr,a
0ECD           3255   ;        sensor_test.c:583: sum_y += sinf(angle * M_PI / 180.0); 
0ECD 8B82      3256            mov     dpl,r3
0ECF 8C83      3257            mov     dph,r4
0ED1 8DF0      3258            mov     b,r5
0ED3 EE        3259            mov     a,r6
0ED4 120000    3260            lcall   _sinf
0ED7 AA82      3261            mov     r2,dpl
0ED9 AB83      3262            mov     r3,dph
0EDB ACF0      3263            mov     r4,b
0EDD FD        3264            mov     r5,a
0EDE 90C508    3265            mov     dptr,#_main_sum_y_1_123
0EE1 E0        3266            movx    a,@dptr
0EE2 FE        3267            mov     r6,a
0EE3 A3        3268            inc     dptr
0EE4 E0        3269            movx    a,@dptr
0EE5 FF        3270            mov     r7,a
0EE6 A3        3271            inc     dptr
0EE7 E0        3272            movx    a,@dptr
0EE8 F8        3273            mov     r0,a
0EE9 A3        3274            inc     dptr
0EEA E0        3275            movx    a,@dptr
0EEB F9        3276            mov     r1,a
0EEC C002      3277            push    ar2
0EEE C003      3278            push    ar3
0EF0 C004      3279            push    ar4
0EF2 C005      3280            push    ar5
0EF4 8E82      3281            mov     dpl,r6
0EF6 8F83      3282            mov     dph,r7
0EF8 88F0      3283            mov     b,r0
0EFA E9        3284            mov     a,r1
0EFB 120000    3285            lcall   ___fsadd
0EFE AA82      3286            mov     r2,dpl
0F00 AB83      3287            mov     r3,dph
0F02 ACF0      3288            mov     r4,b
0F04 FD        3289            mov     r5,a
0F05 E581      3290            mov     a,sp
0F07 24FC      3291            add     a,#0xfc
0F09 F581      3292            mov     sp,a
0F0B 90C508    3293            mov     dptr,#_main_sum_y_1_123
0F0E EA        3294            mov     a,r2
0F0F F0        3295            movx    @dptr,a
0F10 A3        3296            inc     dptr
0F11 EB        3297            mov     a,r3
0F12 F0        3298            movx    @dptr,a
0F13 A3        3299            inc     dptr
0F14 EC        3300            mov     a,r4
0F15 F0        3301            movx    @dptr,a
0F16 A3        3302            inc     dptr
0F17 ED        3303            mov     a,r5
0F18 F0        3304            movx    @dptr,a
0F19           3305   ;        sensor_test.c:584: waitms(1);
0F19 900001    3306            mov     dptr,#0x0001
0F1C 120000    3307            lcall   _waitms
0F1F           3308   ;        sensor_test.c:574: for (i = 0; i < 100; i++){
0F1F 05E8      3309            inc     _main_sloc0_1_0
0F21 020000    3310            ljmp    L016011?
0F24           3311   L016014?:
0F24           3312   ;        sensor_test.c:586: avg_angle = atan2f(sum_y/100.0, sum_x/100.0); 
0F24 90C508    3313            mov     dptr,#_main_sum_y_1_123
0F27 E0        3314            movx    a,@dptr
0F28 FA        3315            mov     r2,a
0F29 A3        3316            inc     dptr
0F2A E0        3317            movx    a,@dptr
0F2B FB        3318            mov     r3,a
0F2C A3        3319            inc     dptr
0F2D E0        3320            movx    a,@dptr
0F2E FC        3321            mov     r4,a
0F2F A3        3322            inc     dptr
0F30 E0        3323            movx    a,@dptr
0F31 FD        3324            mov     r5,a
0F32 E4        3325            clr     a
0F33 C0E0      3326            push    acc
0F35 C0E0      3327            push    acc
0F37 74C8      3328            mov     a,#0xC8
0F39 C0E0      3329            push    acc
0F3B 7442      3330            mov     a,#0x42
0F3D C0E0      3331            push    acc
0F3F 8A82      3332            mov     dpl,r2
0F41 8B83      3333            mov     dph,r3
0F43 8CF0      3334            mov     b,r4
0F45 ED        3335            mov     a,r5
0F46 120000    3336            lcall   ___fsdiv
0F49 AA82      3337            mov     r2,dpl
0F4B AB83      3338            mov     r3,dph
0F4D ACF0      3339            mov     r4,b
0F4F FD        3340            mov     r5,a
0F50 E581      3341            mov     a,sp
0F52 24FC      3342            add     a,#0xfc
0F54 F581      3343            mov     sp,a
0F56 90C4B8    3344            mov     dptr,#_main_sum_x_1_123
0F59 E0        3345            movx    a,@dptr
0F5A FE        3346            mov     r6,a
0F5B A3        3347            inc     dptr
0F5C E0        3348            movx    a,@dptr
0F5D FF        3349            mov     r7,a
0F5E A3        3350            inc     dptr
0F5F E0        3351            movx    a,@dptr
0F60 F8        3352            mov     r0,a
0F61 A3        3353            inc     dptr
0F62 E0        3354            movx    a,@dptr
0F63 F9        3355            mov     r1,a
0F64 C002      3356            push    ar2
0F66 C003      3357            push    ar3
0F68 C004      3358            push    ar4
0F6A C005      3359            push    ar5
0F6C E4        3360            clr     a
0F6D C0E0      3361            push    acc
0F6F C0E0      3362            push    acc
0F71 74C8      3363            mov     a,#0xC8
0F73 C0E0      3364            push    acc
0F75 7442      3365            mov     a,#0x42
0F77 C0E0      3366            push    acc
0F79 8E82      3367            mov     dpl,r6
0F7B 8F83      3368            mov     dph,r7
0F7D 88F0      3369            mov     b,r0
0F7F E9        3370            mov     a,r1
0F80 120000    3371            lcall   ___fsdiv
0F83 858200    3372            mov     _atan2f_PARM_2,dpl
0F86 858301    3373            mov     (_atan2f_PARM_2 + 1),dph
0F89 85F002    3374            mov     (_atan2f_PARM_2 + 2),b
0F8C F503      3375            mov     (_atan2f_PARM_2 + 3),a
0F8E E581      3376            mov     a,sp
0F90 24FC      3377            add     a,#0xfc
0F92 F581      3378            mov     sp,a
0F94 D005      3379            pop     ar5
0F96 D004      3380            pop     ar4
0F98 D003      3381            pop     ar3
0F9A D002      3382            pop     ar2
0F9C 8A82      3383            mov     dpl,r2
0F9E 8B83      3384            mov     dph,r3
0FA0 8CF0      3385            mov     b,r4
0FA2 ED        3386            mov     a,r5
0FA3 120000    3387            lcall   _atan2f
0FA6 AA82      3388            mov     r2,dpl
0FA8 AB83      3389            mov     r3,dph
0FAA ACF0      3390            mov     r4,b
0FAC FD        3391            mov     r5,a
0FAD 90C558    3392            mov     dptr,#_main_avg_angle_1_123
0FB0 EA        3393            mov     a,r2
0FB1 F0        3394            movx    @dptr,a
0FB2 A3        3395            inc     dptr
0FB3 EB        3396            mov     a,r3
0FB4 F0        3397            movx    @dptr,a
0FB5 A3        3398            inc     dptr
0FB6 EC        3399            mov     a,r4
0FB7 F0        3400            movx    @dptr,a
0FB8 A3        3401            inc     dptr
0FB9 ED        3402            mov     a,r5
0FBA F0        3403            movx    @dptr,a
0FBB           3404   ;        sensor_test.c:587: if (avg_angle < 0.0) avg_angle += 2 * M_PI; 
0FBB C002      3405            push    ar2
0FBD C003      3406            push    ar3
0FBF C004      3407            push    ar4
0FC1 C005      3408            push    ar5
0FC3 E4        3409            clr     a
0FC4 C0E0      3410            push    acc
0FC6 C0E0      3411            push    acc
0FC8 C0E0      3412            push    acc
0FCA C0E0      3413            push    acc
0FCC 8A82      3414            mov     dpl,r2
0FCE 8B83      3415            mov     dph,r3
0FD0 8CF0      3416            mov     b,r4
0FD2 ED        3417            mov     a,r5
0FD3 120000    3418            lcall   ___fslt
0FD6 AE82      3419            mov     r6,dpl
0FD8 E581      3420            mov     a,sp
0FDA 24FC      3421            add     a,#0xfc
0FDC F581      3422            mov     sp,a
0FDE D005      3423            pop     ar5
0FE0 D004      3424            pop     ar4
0FE2 D003      3425            pop     ar3
0FE4 D002      3426            pop     ar2
0FE6 EE        3427            mov     a,r6
0FE7 6000      3428            jz      L016007?
0FE9 74DB      3429            mov     a,#0xDB
0FEB C0E0      3430            push    acc
0FED 740F      3431            mov     a,#0x0F
0FEF C0E0      3432            push    acc
0FF1 74C9      3433            mov     a,#0xC9
0FF3 C0E0      3434            push    acc
0FF5 7440      3435            mov     a,#0x40
0FF7 C0E0      3436            push    acc
0FF9 8A82      3437            mov     dpl,r2
0FFB 8B83      3438            mov     dph,r3
0FFD 8CF0      3439            mov     b,r4
0FFF ED        3440            mov     a,r5
1000 120000    3441            lcall   ___fsadd
1003 AA82      3442            mov     r2,dpl
1005 AB83      3443            mov     r3,dph
1007 ACF0      3444            mov     r4,b
1009 FD        3445            mov     r5,a
100A E581      3446            mov     a,sp
100C 24FC      3447            add     a,#0xfc
100E F581      3448            mov     sp,a
1010 90C558    3449            mov     dptr,#_main_avg_angle_1_123
1013 EA        3450            mov     a,r2
1014 F0        3451            movx    @dptr,a
1015 A3        3452            inc     dptr
1016 EB        3453            mov     a,r3
1017 F0        3454            movx    @dptr,a
1018 A3        3455            inc     dptr
1019 EC        3456            mov     a,r4
101A F0        3457            movx    @dptr,a
101B A3        3458            inc     dptr
101C ED        3459            mov     a,r5
101D F0        3460            movx    @dptr,a
101E           3461   L016007?:
101E           3462   ;        sensor_test.c:588: avg_angle = avg_angle * 180.0/M_PI; 
101E 90C558    3463            mov     dptr,#_main_avg_angle_1_123
1021 E0        3464            movx    a,@dptr
1022 C0E0      3465            push    acc
1024 A3        3466            inc     dptr
1025 E0        3467            movx    a,@dptr
1026 C0E0      3468            push    acc
1028 A3        3469            inc     dptr
1029 E0        3470            movx    a,@dptr
102A C0E0      3471            push    acc
102C A3        3472            inc     dptr
102D E0        3473            movx    a,@dptr
102E C0E0      3474            push    acc
1030 900000    3475            mov     dptr,#0x0000
1033 75F034    3476            mov     b,#0x34
1036 7443      3477            mov     a,#0x43
1038 120000    3478            lcall   ___fsmul
103B AA82      3479            mov     r2,dpl
103D AB83      3480            mov     r3,dph
103F ACF0      3481            mov     r4,b
1041 FD        3482            mov     r5,a
1042 E581      3483            mov     a,sp
1044 24FC      3484            add     a,#0xfc
1046 F581      3485            mov     sp,a
1048 74DB      3486            mov     a,#0xDB
104A C0E0      3487            push    acc
104C 740F      3488            mov     a,#0x0F
104E C0E0      3489            push    acc
1050 7449      3490            mov     a,#0x49
1052 C0E0      3491            push    acc
1054 7440      3492            mov     a,#0x40
1056 C0E0      3493            push    acc
1058 8A82      3494            mov     dpl,r2
105A 8B83      3495            mov     dph,r3
105C 8CF0      3496            mov     b,r4
105E ED        3497            mov     a,r5
105F 120000    3498            lcall   ___fsdiv
1062 AA82      3499            mov     r2,dpl
1064 AB83      3500            mov     r3,dph
1066 ACF0      3501            mov     r4,b
1068 FD        3502            mov     r5,a
1069 E581      3503            mov     a,sp
106B 24FC      3504            add     a,#0xfc
106D F581      3505            mov     sp,a
106F 90C558    3506            mov     dptr,#_main_avg_angle_1_123
1072 EA        3507            mov     a,r2
1073 F0        3508            movx    @dptr,a
1074 A3        3509            inc     dptr
1075 EB        3510            mov     a,r3
1076 F0        3511            movx    @dptr,a
1077 A3        3512            inc     dptr
1078 EC        3513            mov     a,r4
1079 F0        3514            movx    @dptr,a
107A A3        3515            inc     dptr
107B ED        3516            mov     a,r5
107C F0        3517            movx    @dptr,a
107D           3518   ;        sensor_test.c:589: smoothed_angle = alpha * avg_angle + (1-alpha) * smoothed_angle; 
107D 90C558    3519            mov     dptr,#_main_avg_angle_1_123
1080 E0        3520            movx    a,@dptr
1081 C0E0      3521            push    acc
1083 A3        3522            inc     dptr
1084 E0        3523            movx    a,@dptr
1085 C0E0      3524            push    acc
1087 A3        3525            inc     dptr
1088 E0        3526            movx    a,@dptr
1089 C0E0      3527            push    acc
108B A3        3528            inc     dptr
108C E0        3529            movx    a,@dptr
108D C0E0      3530            push    acc
108F 90CCCD    3531            mov     dptr,#0xCCCD
1092 75F04C    3532            mov     b,#0x4C
1095 743E      3533            mov     a,#0x3E
1097 120000    3534            lcall   ___fsmul
109A AA82      3535            mov     r2,dpl
109C AB83      3536            mov     r3,dph
109E ACF0      3537            mov     r4,b
10A0 FD        3538            mov     r5,a
10A1 E581      3539            mov     a,sp
10A3 24FC      3540            add     a,#0xfc
10A5 F581      3541            mov     sp,a
10A7 C002      3542            push    ar2
10A9 C003      3543            push    ar3
10AB C004      3544            push    ar4
10AD C005      3545            push    ar5
10AF 90C5A8    3546            mov     dptr,#_main_smoothed_angle_1_123
10B2 E0        3547            movx    a,@dptr
10B3 C0E0      3548            push    acc
10B5 A3        3549            inc     dptr
10B6 E0        3550            movx    a,@dptr
10B7 C0E0      3551            push    acc
10B9 A3        3552            inc     dptr
10BA E0        3553            movx    a,@dptr
10BB C0E0      3554            push    acc
10BD A3        3555            inc     dptr
10BE E0        3556            movx    a,@dptr
10BF C0E0      3557            push    acc
10C1 90CCCD    3558            mov     dptr,#0xCCCD
10C4 75F04C    3559            mov     b,#0x4C
10C7 743F      3560            mov     a,#0x3F
10C9 120000    3561            lcall   ___fsmul
10CC AE82      3562            mov     r6,dpl
10CE AF83      3563            mov     r7,dph
10D0 A8F0      3564            mov     r0,b
10D2 F9        3565            mov     r1,a
10D3 E581      3566            mov     a,sp
10D5 24FC      3567            add     a,#0xfc
10D7 F581      3568            mov     sp,a
10D9 D005      3569            pop     ar5
10DB D004      3570            pop     ar4
10DD D003      3571            pop     ar3
10DF D002      3572            pop     ar2
10E1 C006      3573            push    ar6
10E3 C007      3574            push    ar7
10E5 C000      3575            push    ar0
10E7 C001      3576            push    ar1
10E9 8A82      3577            mov     dpl,r2
10EB 8B83      3578            mov     dph,r3
10ED 8CF0      3579            mov     b,r4
10EF ED        3580            mov     a,r5
10F0 120000    3581            lcall   ___fsadd
10F3 AA82      3582            mov     r2,dpl
10F5 AB83      3583            mov     r3,dph
10F7 ACF0      3584            mov     r4,b
10F9 FD        3585            mov     r5,a
10FA E581      3586            mov     a,sp
10FC 24FC      3587            add     a,#0xfc
10FE F581      3588            mov     sp,a
1100 90C5A8    3589            mov     dptr,#_main_smoothed_angle_1_123
1103 EA        3590            mov     a,r2
1104 F0        3591            movx    @dptr,a
1105 A3        3592            inc     dptr
1106 EB        3593            mov     a,r3
1107 F0        3594            movx    @dptr,a
1108 A3        3595            inc     dptr
1109 EC        3596            mov     a,r4
110A F0        3597            movx    @dptr,a
110B A3        3598            inc     dptr
110C ED        3599            mov     a,r5
110D F0        3600            movx    @dptr,a
110E           3601   ;        sensor_test.c:590: printf("%d,%d,%f\r\n", mag_x, mag_y, smoothed_angle);
110E 90C5A8    3602            mov     dptr,#_main_smoothed_angle_1_123
1111 E0        3603            movx    a,@dptr
1112 C0E0      3604            push    acc
1114 A3        3605            inc     dptr
1115 E0        3606            movx    a,@dptr
1116 C0E0      3607            push    acc
1118 A3        3608            inc     dptr
1119 E0        3609            movx    a,@dptr
111A C0E0      3610            push    acc
111C A3        3611            inc     dptr
111D E0        3612            movx    a,@dptr
111E C0E0      3613            push    acc
1120 90C3C8    3614            mov     dptr,#_main_mag_y_1_123
1123 E0        3615            movx    a,@dptr
1124 C0E0      3616            push    acc
1126 A3        3617            inc     dptr
1127 E0        3618            movx    a,@dptr
1128 C0E0      3619            push    acc
112A 90C378    3620            mov     dptr,#_main_mag_x_1_123
112D E0        3621            movx    a,@dptr
112E C0E0      3622            push    acc
1130 A3        3623            inc     dptr
1131 E0        3624            movx    a,@dptr
1132 C0E0      3625            push    acc
1134 7458      3626            mov     a,#__str_8
1136 C0E0      3627            push    acc
1138 74E0      3628            mov     a,#(__str_8 >> 8)
113A C0E0      3629            push    acc
113C 7480      3630            mov     a,#0x80
113E C0E0      3631            push    acc
1140 120000    3632            lcall   _printf
1143 E581      3633            mov     a,sp
1145 24F5      3634            add     a,#0xf5
1147 F581      3635            mov     sp,a
1149           3636   ;        sensor_test.c:593: sum_x = 0.0; 
1149 90C4B8    3637            mov     dptr,#_main_sum_x_1_123
114C           3638   ;        sensor_test.c:594: sum_y = 0.0;  
114C E4        3639            clr     a
114D F0        3640            movx    @dptr,a
114E A3        3641            inc     dptr
114F F0        3642            movx    @dptr,a
1150 A3        3643            inc     dptr
1151 F0        3644            movx    @dptr,a
1152 A3        3645            inc     dptr
1153 F0        3646            movx    @dptr,a
1154 90C508    3647            mov     dptr,#_main_sum_y_1_123
1157 F0        3648            movx    @dptr,a
1158 A3        3649            inc     dptr
1159 E4        3650            clr     a
115A F0        3651            movx    @dptr,a
115B A3        3652            inc     dptr
115C F0        3653            movx    @dptr,a
115D A3        3654            inc     dptr
115E F0        3655            movx    @dptr,a
115F           3656   ;        sensor_test.c:600: waitms(100);
115F 900064    3657            mov     dptr,#0x0064
1162 120000    3658            lcall   _waitms
1165 020000    3659            ljmp    L016020?
1168           3660            rseg R_CSEG
1168           3661   
0000           3662            rseg R_XINIT
0000           3663   
0000           3664            rseg R_CONST
0000           3665   __str_0:
0000 4572726F  3666            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
0035 0D        3667            db 0x0D
0036 0A        3668            db 0x0A
0037 00        3669            db 0x00
0038           3670   __str_1:
0038 50726573  3671            db 'Press restart to check again!'
     73207265
     73746172
     7420746F
     20636865
     636B2061
     6761696E
     21
0055 0D        3672            db 0x0D
0056 00        3673            db 0x00
0057           3674   __str_2:
0057 424D4D31  3675            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
0087 0D        3676            db 0x0D
0088 0A        3677            db 0x0A
0089 00        3678            db 0x00
008A           3679   __str_3:
008A 1B        3680            db 0x1B
008B 5B324A    3681            db '[2J'
008E 00        3682            db 0x00
008F           3683   __str_4:
008F 45464D38  3684            db 'EFM8LB1 SPI/BMM150 test program'
     4C423120
     5350492F
     424D4D31
     35302074
     65737420
     70726F67
     72616D
00AE 0A        3685            db 0x0A
00AF 46696C65  3686            db 'File: %s'
     3A202573
00B7 0A        3687            db 0x0A
00B8 436F6D70  3688            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
00C8 0A        3689            db 0x0A
00C9 0A        3690            db 0x0A
00CA 00        3691            db 0x00
00CB           3692   __str_5:
00CB 73656E73  3693            db 'sensor_test.c'
     6F725F74
     6573742E
     63
00D8 00        3694            db 0x00
00D9           3695   __str_6:
00D9 4D617220  3696            db 'Mar 26 2025'
     32362032
     303235
00E4 00        3697            db 0x00
00E5           3698   __str_7:
00E5 31333A32  3699            db '13:24:53'
     343A3533
00ED 00        3700            db 0x00
00EE           3701   __str_8:
00EE 25642C25  3702            db '%d,%d,%f'
     642C2566
00F6 0D        3703            db 0x0D
00F7 0A        3704            db 0x0A
00F8 00        3705            db 0x00
00F9           3706   
0003           3707            CSEG
0003           3708   
0003           3709   end
