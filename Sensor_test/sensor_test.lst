0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Mar 27 15:20:43 2025
0000              5   ;--------------------------------------------------------
                  5   $name sensor_test
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _BMM150_Read_Data
0000             29            public _BMM150_compensate_z
0000             30            public _BMM150_compensate_y
0000             31            public _BMM150_compensate_x
0000             32            public _BMM150_Init
0000             33            public _BMM150_Read_Trim_Registers
0000             34            public _SPI_write
0000             35            public _SPI_read_block
0000             36            public _SPI_read
0000             37            public _SPI_transfer
0000             38            public _waitms
0000             39            public _Timer3us
0000             40            public _Set_Pin_Output
0000             41            public __c51_external_startup
0000             42            public _BMM150_Read_Data_PARM_3
0000             43            public _BMM150_Read_Data_PARM_2
0000             44            public _BMM150_compensate_z_PARM_2
0000             45            public _BMM150_compensate_y_PARM_2
0000             46            public _BMM150_compensate_x_PARM_2
0000             47            public _SPI_write_PARM_2
0000             48            public _SPI_read_block_PARM_3
0000             49            public _SPI_read_block_PARM_2
0000             50            public _dig_xyz1
0000             51            public _dig_xy2
0000             52            public _dig_xy1
0000             53            public _dig_z4
0000             54            public _dig_z3
0000             55            public _dig_z2
0000             56            public _dig_z1
0000             57            public _dig_y2
0000             58            public _dig_y1
0000             59            public _dig_x2
0000             60            public _dig_x1
0000             61   ;--------------------------------------------------------
0000             62   ; Special Function Registers
0000             63   ;--------------------------------------------------------
0000             64   _ACC            DATA 0xe0
0000             65   _ADC0ASAH       DATA 0xb6
0000             66   _ADC0ASAL       DATA 0xb5
0000             67   _ADC0ASCF       DATA 0xa1
0000             68   _ADC0ASCT       DATA 0xc7
0000             69   _ADC0CF0        DATA 0xbc
0000             70   _ADC0CF1        DATA 0xb9
0000             71   _ADC0CF2        DATA 0xdf
0000             72   _ADC0CN0        DATA 0xe8
0000             73   _ADC0CN1        DATA 0xb2
0000             74   _ADC0CN2        DATA 0xb3
0000             75   _ADC0GTH        DATA 0xc4
0000             76   _ADC0GTL        DATA 0xc3
0000             77   _ADC0H          DATA 0xbe
0000             78   _ADC0L          DATA 0xbd
0000             79   _ADC0LTH        DATA 0xc6
0000             80   _ADC0LTL        DATA 0xc5
0000             81   _ADC0MX         DATA 0xbb
0000             82   _B              DATA 0xf0
0000             83   _CKCON0         DATA 0x8e
0000             84   _CKCON1         DATA 0xa6
0000             85   _CLEN0          DATA 0xc6
0000             86   _CLIE0          DATA 0xc7
0000             87   _CLIF0          DATA 0xe8
0000             88   _CLKSEL         DATA 0xa9
0000             89   _CLOUT0         DATA 0xd1
0000             90   _CLU0CF         DATA 0xb1
0000             91   _CLU0FN         DATA 0xaf
0000             92   _CLU0MX         DATA 0x84
0000             93   _CLU1CF         DATA 0xb3
0000             94   _CLU1FN         DATA 0xb2
0000             95   _CLU1MX         DATA 0x85
0000             96   _CLU2CF         DATA 0xb6
0000             97   _CLU2FN         DATA 0xb5
0000             98   _CLU2MX         DATA 0x91
0000             99   _CLU3CF         DATA 0xbf
0000            100   _CLU3FN         DATA 0xbe
0000            101   _CLU3MX         DATA 0xae
0000            102   _CMP0CN0        DATA 0x9b
0000            103   _CMP0CN1        DATA 0x99
0000            104   _CMP0MD         DATA 0x9d
0000            105   _CMP0MX         DATA 0x9f
0000            106   _CMP1CN0        DATA 0xbf
0000            107   _CMP1CN1        DATA 0xac
0000            108   _CMP1MD         DATA 0xab
0000            109   _CMP1MX         DATA 0xaa
0000            110   _CRC0CN0        DATA 0xce
0000            111   _CRC0CN1        DATA 0x86
0000            112   _CRC0CNT        DATA 0xd3
0000            113   _CRC0DAT        DATA 0xcb
0000            114   _CRC0FLIP       DATA 0xcf
0000            115   _CRC0IN         DATA 0xca
0000            116   _CRC0ST         DATA 0xd2
0000            117   _DAC0CF0        DATA 0x91
0000            118   _DAC0CF1        DATA 0x92
0000            119   _DAC0H          DATA 0x85
0000            120   _DAC0L          DATA 0x84
0000            121   _DAC1CF0        DATA 0x93
0000            122   _DAC1CF1        DATA 0x94
0000            123   _DAC1H          DATA 0x8a
0000            124   _DAC1L          DATA 0x89
0000            125   _DAC2CF0        DATA 0x95
0000            126   _DAC2CF1        DATA 0x96
0000            127   _DAC2H          DATA 0x8c
0000            128   _DAC2L          DATA 0x8b
0000            129   _DAC3CF0        DATA 0x9a
0000            130   _DAC3CF1        DATA 0x9c
0000            131   _DAC3H          DATA 0x8e
0000            132   _DAC3L          DATA 0x8d
0000            133   _DACGCF0        DATA 0x88
0000            134   _DACGCF1        DATA 0x98
0000            135   _DACGCF2        DATA 0xa2
0000            136   _DERIVID        DATA 0xad
0000            137   _DEVICEID       DATA 0xb5
0000            138   _DPH            DATA 0x83
0000            139   _DPL            DATA 0x82
0000            140   _EIE1           DATA 0xe6
0000            141   _EIE2           DATA 0xf3
0000            142   _EIP1           DATA 0xbb
0000            143   _EIP1H          DATA 0xee
0000            144   _EIP2           DATA 0xed
0000            145   _EIP2H          DATA 0xf6
0000            146   _EMI0CN         DATA 0xe7
0000            147   _FLKEY          DATA 0xb7
0000            148   _HFO0CAL        DATA 0xc7
0000            149   _HFO1CAL        DATA 0xd6
0000            150   _HFOCN          DATA 0xef
0000            151   _I2C0ADM        DATA 0xff
0000            152   _I2C0CN0        DATA 0xba
0000            153   _I2C0DIN        DATA 0xbc
0000            154   _I2C0DOUT       DATA 0xbb
0000            155   _I2C0FCN0       DATA 0xad
0000            156   _I2C0FCN1       DATA 0xab
0000            157   _I2C0FCT        DATA 0xf5
0000            158   _I2C0SLAD       DATA 0xbd
0000            159   _I2C0STAT       DATA 0xb9
0000            160   _IE             DATA 0xa8
0000            161   _IP             DATA 0xb8
0000            162   _IPH            DATA 0xf2
0000            163   _IT01CF         DATA 0xe4
0000            164   _LFO0CN         DATA 0xb1
0000            165   _P0             DATA 0x80
0000            166   _P0MASK         DATA 0xfe
0000            167   _P0MAT          DATA 0xfd
0000            168   _P0MDIN         DATA 0xf1
0000            169   _P0MDOUT        DATA 0xa4
0000            170   _P0SKIP         DATA 0xd4
0000            171   _P1             DATA 0x90
0000            172   _P1MASK         DATA 0xee
0000            173   _P1MAT          DATA 0xed
0000            174   _P1MDIN         DATA 0xf2
0000            175   _P1MDOUT        DATA 0xa5
0000            176   _P1SKIP         DATA 0xd5
0000            177   _P2             DATA 0xa0
0000            178   _P2MASK         DATA 0xfc
0000            179   _P2MAT          DATA 0xfb
0000            180   _P2MDIN         DATA 0xf3
0000            181   _P2MDOUT        DATA 0xa6
0000            182   _P2SKIP         DATA 0xcc
0000            183   _P3             DATA 0xb0
0000            184   _P3MDIN         DATA 0xf4
0000            185   _P3MDOUT        DATA 0x9c
0000            186   _PCA0CENT       DATA 0x9e
0000            187   _PCA0CLR        DATA 0x9c
0000            188   _PCA0CN0        DATA 0xd8
0000            189   _PCA0CPH0       DATA 0xfc
0000            190   _PCA0CPH1       DATA 0xea
0000            191   _PCA0CPH2       DATA 0xec
0000            192   _PCA0CPH3       DATA 0xf5
0000            193   _PCA0CPH4       DATA 0x85
0000            194   _PCA0CPH5       DATA 0xde
0000            195   _PCA0CPL0       DATA 0xfb
0000            196   _PCA0CPL1       DATA 0xe9
0000            197   _PCA0CPL2       DATA 0xeb
0000            198   _PCA0CPL3       DATA 0xf4
0000            199   _PCA0CPL4       DATA 0x84
0000            200   _PCA0CPL5       DATA 0xdd
0000            201   _PCA0CPM0       DATA 0xda
0000            202   _PCA0CPM1       DATA 0xdb
0000            203   _PCA0CPM2       DATA 0xdc
0000            204   _PCA0CPM3       DATA 0xae
0000            205   _PCA0CPM4       DATA 0xaf
0000            206   _PCA0CPM5       DATA 0xcc
0000            207   _PCA0H          DATA 0xfa
0000            208   _PCA0L          DATA 0xf9
0000            209   _PCA0MD         DATA 0xd9
0000            210   _PCA0POL        DATA 0x96
0000            211   _PCA0PWM        DATA 0xf7
0000            212   _PCON0          DATA 0x87
0000            213   _PCON1          DATA 0xcd
0000            214   _PFE0CN         DATA 0xc1
0000            215   _PRTDRV         DATA 0xf6
0000            216   _PSCTL          DATA 0x8f
0000            217   _PSTAT0         DATA 0xaa
0000            218   _PSW            DATA 0xd0
0000            219   _REF0CN         DATA 0xd1
0000            220   _REG0CN         DATA 0xc9
0000            221   _REVID          DATA 0xb6
0000            222   _RSTSRC         DATA 0xef
0000            223   _SBCON1         DATA 0x94
0000            224   _SBRLH1         DATA 0x96
0000            225   _SBRLL1         DATA 0x95
0000            226   _SBUF           DATA 0x99
0000            227   _SBUF0          DATA 0x99
0000            228   _SBUF1          DATA 0x92
0000            229   _SCON           DATA 0x98
0000            230   _SCON0          DATA 0x98
0000            231   _SCON1          DATA 0xc8
0000            232   _SFRPAGE        DATA 0xa7
0000            233   _SFRPGCN        DATA 0xbc
0000            234   _SFRSTACK       DATA 0xd7
0000            235   _SMB0ADM        DATA 0xd6
0000            236   _SMB0ADR        DATA 0xd7
0000            237   _SMB0CF         DATA 0xc1
0000            238   _SMB0CN0        DATA 0xc0
0000            239   _SMB0DAT        DATA 0xc2
0000            240   _SMB0FCN0       DATA 0xc3
0000            241   _SMB0FCN1       DATA 0xc4
0000            242   _SMB0FCT        DATA 0xef
0000            243   _SMB0RXLN       DATA 0xc5
0000            244   _SMB0TC         DATA 0xac
0000            245   _SMOD1          DATA 0x93
0000            246   _SP             DATA 0x81
0000            247   _SPI0CFG        DATA 0xa1
0000            248   _SPI0CKR        DATA 0xa2
0000            249   _SPI0CN0        DATA 0xf8
0000            250   _SPI0DAT        DATA 0xa3
0000            251   _SPI0FCN0       DATA 0x9a
0000            252   _SPI0FCN1       DATA 0x9b
0000            253   _SPI0FCT        DATA 0xf7
0000            254   _SPI0PCF        DATA 0xdf
0000            255   _TCON           DATA 0x88
0000            256   _TH0            DATA 0x8c
0000            257   _TH1            DATA 0x8d
0000            258   _TL0            DATA 0x8a
0000            259   _TL1            DATA 0x8b
0000            260   _TMOD           DATA 0x89
0000            261   _TMR2CN0        DATA 0xc8
0000            262   _TMR2CN1        DATA 0xfd
0000            263   _TMR2H          DATA 0xcf
0000            264   _TMR2L          DATA 0xce
0000            265   _TMR2RLH        DATA 0xcb
0000            266   _TMR2RLL        DATA 0xca
0000            267   _TMR3CN0        DATA 0x91
0000            268   _TMR3CN1        DATA 0xfe
0000            269   _TMR3H          DATA 0x95
0000            270   _TMR3L          DATA 0x94
0000            271   _TMR3RLH        DATA 0x93
0000            272   _TMR3RLL        DATA 0x92
0000            273   _TMR4CN0        DATA 0x98
0000            274   _TMR4CN1        DATA 0xff
0000            275   _TMR4H          DATA 0xa5
0000            276   _TMR4L          DATA 0xa4
0000            277   _TMR4RLH        DATA 0xa3
0000            278   _TMR4RLL        DATA 0xa2
0000            279   _TMR5CN0        DATA 0xc0
0000            280   _TMR5CN1        DATA 0xf1
0000            281   _TMR5H          DATA 0xd5
0000            282   _TMR5L          DATA 0xd4
0000            283   _TMR5RLH        DATA 0xd3
0000            284   _TMR5RLL        DATA 0xd2
0000            285   _UART0PCF       DATA 0xd9
0000            286   _UART1FCN0      DATA 0x9d
0000            287   _UART1FCN1      DATA 0xd8
0000            288   _UART1FCT       DATA 0xfa
0000            289   _UART1LIN       DATA 0x9e
0000            290   _UART1PCF       DATA 0xda
0000            291   _VDM0CN         DATA 0xff
0000            292   _WDTCN          DATA 0x97
0000            293   _XBR0           DATA 0xe1
0000            294   _XBR1           DATA 0xe2
0000            295   _XBR2           DATA 0xe3
0000            296   _XOSC0CN        DATA 0x86
0000            297   _DPTR           DATA 0x8382
0000            298   _TMR2RL         DATA 0xcbca
0000            299   _TMR3RL         DATA 0x9392
0000            300   _TMR4RL         DATA 0xa3a2
0000            301   _TMR5RL         DATA 0xd3d2
0000            302   _TMR0           DATA 0x8c8a
0000            303   _TMR1           DATA 0x8d8b
0000            304   _TMR2           DATA 0xcfce
0000            305   _TMR3           DATA 0x9594
0000            306   _TMR4           DATA 0xa5a4
0000            307   _TMR5           DATA 0xd5d4
0000            308   _SBRL1          DATA 0x9695
0000            309   _PCA0           DATA 0xfaf9
0000            310   _PCA0CP0        DATA 0xfcfb
0000            311   _PCA0CP1        DATA 0xeae9
0000            312   _PCA0CP2        DATA 0xeceb
0000            313   _PCA0CP3        DATA 0xf5f4
0000            314   _PCA0CP4        DATA 0x8584
0000            315   _PCA0CP5        DATA 0xdedd
0000            316   _ADC0ASA        DATA 0xb6b5
0000            317   _ADC0GT         DATA 0xc4c3
0000            318   _ADC0           DATA 0xbebd
0000            319   _ADC0LT         DATA 0xc6c5
0000            320   _DAC0           DATA 0x8584
0000            321   _DAC1           DATA 0x8a89
0000            322   _DAC2           DATA 0x8c8b
0000            323   _DAC3           DATA 0x8e8d
0000            324   ;--------------------------------------------------------
0000            325   ; special function bits
0000            326   ;--------------------------------------------------------
0000            327   _ACC_0          BIT 0xe0
0000            328   _ACC_1          BIT 0xe1
0000            329   _ACC_2          BIT 0xe2
0000            330   _ACC_3          BIT 0xe3
0000            331   _ACC_4          BIT 0xe4
0000            332   _ACC_5          BIT 0xe5
0000            333   _ACC_6          BIT 0xe6
0000            334   _ACC_7          BIT 0xe7
0000            335   _TEMPE          BIT 0xe8
0000            336   _ADGN0          BIT 0xe9
0000            337   _ADGN1          BIT 0xea
0000            338   _ADWINT         BIT 0xeb
0000            339   _ADBUSY         BIT 0xec
0000            340   _ADINT          BIT 0xed
0000            341   _IPOEN          BIT 0xee
0000            342   _ADEN           BIT 0xef
0000            343   _B_0            BIT 0xf0
0000            344   _B_1            BIT 0xf1
0000            345   _B_2            BIT 0xf2
0000            346   _B_3            BIT 0xf3
0000            347   _B_4            BIT 0xf4
0000            348   _B_5            BIT 0xf5
0000            349   _B_6            BIT 0xf6
0000            350   _B_7            BIT 0xf7
0000            351   _C0FIF          BIT 0xe8
0000            352   _C0RIF          BIT 0xe9
0000            353   _C1FIF          BIT 0xea
0000            354   _C1RIF          BIT 0xeb
0000            355   _C2FIF          BIT 0xec
0000            356   _C2RIF          BIT 0xed
0000            357   _C3FIF          BIT 0xee
0000            358   _C3RIF          BIT 0xef
0000            359   _D1SRC0         BIT 0x88
0000            360   _D1SRC1         BIT 0x89
0000            361   _D1AMEN         BIT 0x8a
0000            362   _D01REFSL       BIT 0x8b
0000            363   _D3SRC0         BIT 0x8c
0000            364   _D3SRC1         BIT 0x8d
0000            365   _D3AMEN         BIT 0x8e
0000            366   _D23REFSL       BIT 0x8f
0000            367   _D0UDIS         BIT 0x98
0000            368   _D1UDIS         BIT 0x99
0000            369   _D2UDIS         BIT 0x9a
0000            370   _D3UDIS         BIT 0x9b
0000            371   _EX0            BIT 0xa8
0000            372   _ET0            BIT 0xa9
0000            373   _EX1            BIT 0xaa
0000            374   _ET1            BIT 0xab
0000            375   _ES0            BIT 0xac
0000            376   _ET2            BIT 0xad
0000            377   _ESPI0          BIT 0xae
0000            378   _EA             BIT 0xaf
0000            379   _PX0            BIT 0xb8
0000            380   _PT0            BIT 0xb9
0000            381   _PX1            BIT 0xba
0000            382   _PT1            BIT 0xbb
0000            383   _PS0            BIT 0xbc
0000            384   _PT2            BIT 0xbd
0000            385   _PSPI0          BIT 0xbe
0000            386   _P0_0           BIT 0x80
0000            387   _P0_1           BIT 0x81
0000            388   _P0_2           BIT 0x82
0000            389   _P0_3           BIT 0x83
0000            390   _P0_4           BIT 0x84
0000            391   _P0_5           BIT 0x85
0000            392   _P0_6           BIT 0x86
0000            393   _P0_7           BIT 0x87
0000            394   _P1_0           BIT 0x90
0000            395   _P1_1           BIT 0x91
0000            396   _P1_2           BIT 0x92
0000            397   _P1_3           BIT 0x93
0000            398   _P1_4           BIT 0x94
0000            399   _P1_5           BIT 0x95
0000            400   _P1_6           BIT 0x96
0000            401   _P1_7           BIT 0x97
0000            402   _P2_0           BIT 0xa0
0000            403   _P2_1           BIT 0xa1
0000            404   _P2_2           BIT 0xa2
0000            405   _P2_3           BIT 0xa3
0000            406   _P2_4           BIT 0xa4
0000            407   _P2_5           BIT 0xa5
0000            408   _P2_6           BIT 0xa6
0000            409   _P3_0           BIT 0xb0
0000            410   _P3_1           BIT 0xb1
0000            411   _P3_2           BIT 0xb2
0000            412   _P3_3           BIT 0xb3
0000            413   _P3_4           BIT 0xb4
0000            414   _P3_7           BIT 0xb7
0000            415   _CCF0           BIT 0xd8
0000            416   _CCF1           BIT 0xd9
0000            417   _CCF2           BIT 0xda
0000            418   _CCF3           BIT 0xdb
0000            419   _CCF4           BIT 0xdc
0000            420   _CCF5           BIT 0xdd
0000            421   _CR             BIT 0xde
0000            422   _CF             BIT 0xdf
0000            423   _PARITY         BIT 0xd0
0000            424   _F1             BIT 0xd1
0000            425   _OV             BIT 0xd2
0000            426   _RS0            BIT 0xd3
0000            427   _RS1            BIT 0xd4
0000            428   _F0             BIT 0xd5
0000            429   _AC             BIT 0xd6
0000            430   _CY             BIT 0xd7
0000            431   _RI             BIT 0x98
0000            432   _TI             BIT 0x99
0000            433   _RB8            BIT 0x9a
0000            434   _TB8            BIT 0x9b
0000            435   _REN            BIT 0x9c
0000            436   _CE             BIT 0x9d
0000            437   _SMODE          BIT 0x9e
0000            438   _RI1            BIT 0xc8
0000            439   _TI1            BIT 0xc9
0000            440   _RBX1           BIT 0xca
0000            441   _TBX1           BIT 0xcb
0000            442   _REN1           BIT 0xcc
0000            443   _PERR1          BIT 0xcd
0000            444   _OVR1           BIT 0xce
0000            445   _SI             BIT 0xc0
0000            446   _ACK            BIT 0xc1
0000            447   _ARBLOST        BIT 0xc2
0000            448   _ACKRQ          BIT 0xc3
0000            449   _STO            BIT 0xc4
0000            450   _STA            BIT 0xc5
0000            451   _TXMODE         BIT 0xc6
0000            452   _MASTER         BIT 0xc7
0000            453   _SPIEN          BIT 0xf8
0000            454   _TXNF           BIT 0xf9
0000            455   _NSSMD0         BIT 0xfa
0000            456   _NSSMD1         BIT 0xfb
0000            457   _RXOVRN         BIT 0xfc
0000            458   _MODF           BIT 0xfd
0000            459   _WCOL           BIT 0xfe
0000            460   _SPIF           BIT 0xff
0000            461   _IT0            BIT 0x88
0000            462   _IE0            BIT 0x89
0000            463   _IT1            BIT 0x8a
0000            464   _IE1            BIT 0x8b
0000            465   _TR0            BIT 0x8c
0000            466   _TF0            BIT 0x8d
0000            467   _TR1            BIT 0x8e
0000            468   _TF1            BIT 0x8f
0000            469   _T2XCLK0        BIT 0xc8
0000            470   _T2XCLK1        BIT 0xc9
0000            471   _TR2            BIT 0xca
0000            472   _T2SPLIT        BIT 0xcb
0000            473   _TF2CEN         BIT 0xcc
0000            474   _TF2LEN         BIT 0xcd
0000            475   _TF2L           BIT 0xce
0000            476   _TF2H           BIT 0xcf
0000            477   _T4XCLK0        BIT 0x98
0000            478   _T4XCLK1        BIT 0x99
0000            479   _TR4            BIT 0x9a
0000            480   _T4SPLIT        BIT 0x9b
0000            481   _TF4CEN         BIT 0x9c
0000            482   _TF4LEN         BIT 0x9d
0000            483   _TF4L           BIT 0x9e
0000            484   _TF4H           BIT 0x9f
0000            485   _T5XCLK0        BIT 0xc0
0000            486   _T5XCLK1        BIT 0xc1
0000            487   _TR5            BIT 0xc2
0000            488   _T5SPLIT        BIT 0xc3
0000            489   _TF5CEN         BIT 0xc4
0000            490   _TF5LEN         BIT 0xc5
0000            491   _TF5L           BIT 0xc6
0000            492   _TF5H           BIT 0xc7
0000            493   _RIE            BIT 0xd8
0000            494   _RXTO0          BIT 0xd9
0000            495   _RXTO1          BIT 0xda
0000            496   _RFRQ           BIT 0xdb
0000            497   _TIE            BIT 0xdc
0000            498   _TXHOLD         BIT 0xdd
0000            499   _TXNF1          BIT 0xde
0000            500   _TFRQ           BIT 0xdf
0000            501   ;--------------------------------------------------------
0000            502   ; overlayable register banks
0000            503   ;--------------------------------------------------------
0000            504            rbank0 segment data overlay
0000            505   ;--------------------------------------------------------
0000            506   ; internal ram data
0000            507   ;--------------------------------------------------------
0000            508            rseg R_DSEG
0000            509   _dig_x1:
0000            510            ds 1
0001            511   _dig_x2:
0001            512            ds 1
0002            513   _dig_y1:
0002            514            ds 1
0003            515   _dig_y2:
0003            516            ds 1
0004            517   _dig_z1:
0004            518            ds 1
0005            519   _dig_z2:
0005            520            ds 1
0006            521   _dig_z3:
0006            522            ds 1
0007            523   _dig_z4:
0007            524            ds 1
0008            525   _dig_xy1:
0008            526            ds 1
0009            527   _dig_xy2:
0009            528            ds 1
000A            529   _dig_xyz1:
000A            530            ds 1
000B            531   _SPI_read_block_PARM_2:
000B            532            ds 3
000E            533   _SPI_read_block_PARM_3:
000E            534            ds 1
000F            535   _SPI_write_PARM_2:
000F            536            ds 1
0010            537   _BMM150_compensate_x_PARM_2:
0010            538            ds 3
0013            539   _BMM150_compensate_x_sloc0_1_0:
0013            540            ds 4
0017            541   _BMM150_compensate_y_PARM_2:
0017            542            ds 3
001A            543   _BMM150_compensate_y_sloc0_1_0:
001A            544            ds 4
001E            545   _BMM150_compensate_z_PARM_2:
001E            546            ds 3
0021            547   _BMM150_compensate_z_sloc0_1_0:
0021            548            ds 2
0023            549   _BMM150_compensate_z_sloc1_1_0:
0023            550            ds 4
0027            551   _BMM150_compensate_z_sloc2_1_0:
0027            552            ds 4
002B            553   _BMM150_Read_Data_PARM_2:
002B            554            ds 3
002E            555   _BMM150_Read_Data_PARM_3:
002E            556            ds 3
0031            557   _BMM150_Read_Data_mag_x_1_118:
0031            558            ds 3
0034            559   _BMM150_Read_Data_raw_x_msb_1_119:
0034            560            ds 1
0035            561   _BMM150_Read_Data_raw_y_msb_1_119:
0035            562            ds 1
0036            563   _BMM150_Read_Data_raw_z_msb_1_119:
0036            564            ds 1
0037            565   _BMM150_Read_Data_raw_rhall_msb_1_119:
0037            566            ds 1
0038            567   _BMM150_Read_Data_x_val_1_119:
0038            568            ds 2
003A            569   _BMM150_Read_Data_y_val_1_119:
003A            570            ds 2
003C            571   _BMM150_Read_Data_z_val_1_119:
003C            572            ds 2
003E            573   _BMM150_Read_Data_rhall_val_1_119:
003E            574            ds 2
0040            575   _main_sloc0_1_0:
0040            576            ds 4
0044            577   _main_sloc1_1_0:
0044            578            ds 4
0048            579   ;--------------------------------------------------------
0048            580   ; overlayable items in internal ram 
0048            581   ;--------------------------------------------------------
0000            582            rseg    R_OSEG
0000            583            rseg    R_OSEG
0000            584            rseg    R_OSEG
0000            585   ;--------------------------------------------------------
0000            586   ; indirectly addressable internal ram data
0000            587   ;--------------------------------------------------------
0000            588            rseg R_ISEG
0000            589   ;--------------------------------------------------------
0000            590   ; absolute internal ram data
0000            591   ;--------------------------------------------------------
0000            592            DSEG
0000            593   ;--------------------------------------------------------
0000            594   ; bit data
0000            595   ;--------------------------------------------------------
0000            596            rseg R_BSEG
0000            597   ;--------------------------------------------------------
0000            598   ; paged external ram data
0000            599   ;--------------------------------------------------------
0000            600            rseg R_PSEG
0000            601   ;--------------------------------------------------------
0000            602   ; external ram data
0000            603   ;--------------------------------------------------------
0000            604            rseg R_XSEG
0000            605   _BMM150_Read_Trim_Registers_trim_x1y1_1_84:
0000            606            ds 2
0002            607   _BMM150_Read_Trim_Registers_trim_xyz_data_1_84:
0002            608            ds 4
0006            609   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_84:
0006            610            ds 10
0010            611   _BMM150_compensate_x_retval_1_93:
0010            612            ds 2
0012            613   _BMM150_compensate_x_process_comp_x0_1_93:
0012            614            ds 2
0014            615   _BMM150_compensate_y_retval_1_102:
0014            616            ds 2
0016            617   _BMM150_compensate_y_process_comp_y0_1_102:
0016            618            ds 2
0018            619   _BMM150_compensate_z_retval_1_111:
0018            620            ds 4
001C            621   _main_mag_x_1_121:
001C            622            ds 2
001E            623   _main_mag_y_1_121:
001E            624            ds 2
0020            625   _main_mag_z_1_121:
0020            626            ds 2
0022            627   _main_sum_x_1_121:
0022            628            ds 4
0026            629   _main_sum_y_1_121:
0026            630            ds 4
002A            631   _main_avg_angle_1_121:
002A            632            ds 4
002E            633   _main_smoothed_angle_1_121:
002E            634            ds 4
0032            635   ;--------------------------------------------------------
0032            636   ; absolute external ram data
0032            637   ;--------------------------------------------------------
0000            638            XSEG
0000            639   ;--------------------------------------------------------
0000            640   ; external initialized ram data
0000            641   ;--------------------------------------------------------
0000            642            rseg R_IXSEG
0000            643            rseg R_HOME
0000            644            rseg R_GSINIT
0000            645            rseg R_CSEG
0000            646   ;--------------------------------------------------------
0000            647   ; Reset entry point and interrupt vectors
0000            648   ;--------------------------------------------------------
0000            649            CSEG at 0x0000
0000 020000     650            ljmp    _crt0
0003            651   ;--------------------------------------------------------
0003            652   ; global & static initialisations
0003            653   ;--------------------------------------------------------
0000            654            rseg R_HOME
0000            655            rseg R_GSINIT
0000            656            rseg R_GSINIT
0000            657   ;--------------------------------------------------------
0000            658   ; data variables initialization
0000            659   ;--------------------------------------------------------
0000            660            rseg R_DINIT
0000            661            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            662   ;--------------------------------------------------------
0000            663   ; code
0000            664   ;--------------------------------------------------------
0000            665            rseg R_CSEG
0000            666   ;------------------------------------------------------------
0000            667   ;Allocation info for local variables in function '_c51_external_startup'
0000            668   ;------------------------------------------------------------
0000            669   ;------------------------------------------------------------
0000            670   ;        sensor_test.c:74: char _c51_external_startup (void)
0000            671   ;        -----------------------------------------
0000            672   ;         function _c51_external_startup
0000            673   ;        -----------------------------------------
0000            674   __c51_external_startup:
0000            675            using   0
0000            676   ;        sensor_test.c:77: SFRPAGE = 0x00;
0000 75A700     677            mov     _SFRPAGE,#0x00
0003            678   ;        sensor_test.c:78: WDTCN = 0xDE; //First key
0003 7597DE     679            mov     _WDTCN,#0xDE
0006            680   ;        sensor_test.c:79: WDTCN = 0xAD; //Second key
0006 7597AD     681            mov     _WDTCN,#0xAD
0009            682   ;        sensor_test.c:81: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     683            mov     _VDM0CN,#0x80
000C            684   ;        sensor_test.c:82: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     685            mov     _RSTSRC,#0x06
000F            686   ;        sensor_test.c:89: SFRPAGE = 0x10;
000F 75A710     687            mov     _SFRPAGE,#0x10
0012            688   ;        sensor_test.c:90: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     689            mov     _PFE0CN,#0x20
0015            690   ;        sensor_test.c:91: SFRPAGE = 0x00;
0015 75A700     691            mov     _SFRPAGE,#0x00
0018            692   ;        sensor_test.c:112: CLKSEL = 0x00;
0018 75A900     693            mov     _CLKSEL,#0x00
001B            694   ;        sensor_test.c:113: CLKSEL = 0x00;
001B 75A900     695            mov     _CLKSEL,#0x00
001E            696   ;        sensor_test.c:114: while ((CLKSEL & 0x80) == 0);
001E            697   L002001?:
001E E5A9       698            mov     a,_CLKSEL
0020 30E7D0     699            jnb     acc.7,L002001?
0023            700   ;        sensor_test.c:115: CLKSEL = 0x03;
0023 75A903     701            mov     _CLKSEL,#0x03
0026            702   ;        sensor_test.c:116: CLKSEL = 0x03;
0026 75A903     703            mov     _CLKSEL,#0x03
0029            704   ;        sensor_test.c:117: while ((CLKSEL & 0x80) == 0);
0029            705   L002004?:
0029 E5A9       706            mov     a,_CLKSEL
002B 30E750     707            jnb     acc.7,L002004?
002E            708   ;        sensor_test.c:123: P0MDOUT = 0b_0000_1101; // SCK, MOSI, and P0.3 are push-pull, others open-drain
002E 75A40D     709            mov     _P0MDOUT,#0x0D
0031            710   ;        sensor_test.c:124: P1MDOUT = 0b_0000_0000; // P1 all open-drain
0031 75A500     711            mov     _P1MDOUT,#0x00
0034            712   ;        sensor_test.c:125: XBR0 = 0b_0000_0011;    // SPI0E=1, URT0E=1
0034 75E103     713            mov     _XBR0,#0x03
0037            714   ;        sensor_test.c:126: XBR1 = 0b_0000_0000;
0037 75E200     715            mov     _XBR1,#0x00
003A            716   ;        sensor_test.c:127: XBR2 = 0b_0100_0000;    // Enable crossbar and weak pull-ups
003A 75E340     717            mov     _XBR2,#0x40
003D            718   ;        sensor_test.c:133: SCON0 = 0x10;
003D 759810     719            mov     _SCON0,#0x10
0040            720   ;        sensor_test.c:134: TH1 = 0x100-((SYSCLK/BAUDRATE)/(12L*2L));
0040 758DE6     721            mov     _TH1,#0xE6
0043            722   ;        sensor_test.c:135: TL1 = TH1;      // Init Timer1
0043 858D8B     723            mov     _TL1,_TH1
0046            724   ;        sensor_test.c:136: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     725            anl     _TMOD,#0x0F
0049            726   ;        sensor_test.c:137: TMOD |=  0x20;                       
0049 438920     727            orl     _TMOD,#0x20
004C            728   ;        sensor_test.c:138: TR1 = 1; // START Timer1
004C D28E       729            setb    _TR1
004E            730   ;        sensor_test.c:139: TI = 1;  // Indicate TX0 ready
004E D299       731            setb    _TI
0050            732   ;        sensor_test.c:142: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
0050 75A211     733            mov     _SPI0CKR,#0x11
0053            734   ;        sensor_test.c:143: SPI0CFG = 0b_1110_0000; // this is mode 3, you need to determine the sampling etc. in datasheet
0053 75A1E0     735            mov     _SPI0CFG,#0xE0
0056            736   ;        sensor_test.c:144: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0056 75F801     737            mov     _SPI0CN0,#0x01
0059            738   ;        sensor_test.c:146: return 0;
0059 758200     739            mov     dpl,#0x00
005C 22         740            ret
005D            741   ;------------------------------------------------------------
005D            742   ;Allocation info for local variables in function 'Set_Pin_Output'
005D            743   ;------------------------------------------------------------
005D            744   ;mask                      Allocated with name '_Set_Pin_Output_mask_1_67'
005D            745   ;pin                       Allocated to registers r2 
005D            746   ;------------------------------------------------------------
005D            747   ;        sensor_test.c:149: void Set_Pin_Output (unsigned char pin)
005D            748   ;        -----------------------------------------
005D            749   ;         function Set_Pin_Output
005D            750   ;        -----------------------------------------
005D            751   _Set_Pin_Output:
005D AA82       752            mov     r2,dpl
005F            753   ;        sensor_test.c:153: mask=(1<<(pin&0x7));
005F 7407       754            mov     a,#0x07
0061 5A         755            anl     a,r2
0062 F5F0       756            mov     b,a
0064 05F0       757            inc     b
0066 7401       758            mov     a,#0x01
0068 8000       759            sjmp    L003011?
006A            760   L003009?:
006A 25E0       761            add     a,acc
006C            762   L003011?:
006C D5F050     763            djnz    b,L003009?
006F FB         764            mov     r3,a
0070            765   ;        sensor_test.c:154: switch(pin/0x10)
0070 EA         766            mov     a,r2
0071 C4         767            swap    a
0072 540F       768            anl     a,#0x0f
0074 FA         769            mov  r2,a
0075 24FC       770            add     a,#0xff - 0x03
0077 4000       771            jc      L003006?
0079 EA         772            mov     a,r2
007A 2A         773            add     a,r2
007B 2A         774            add     a,r2
007C 90C9D0     775            mov     dptr,#L003013?
007F 73         776            jmp     @a+dptr
0080            777   L003013?:
0080 020000     778            ljmp    L003001?
0083 020000     779            ljmp    L003002?
0086 020000     780            ljmp    L003003?
0089 020000     781            ljmp    L003004?
008C            782   ;        sensor_test.c:156: case 0: P0MDOUT |= mask; break;
008C            783   L003001?:
008C EB         784            mov     a,r3
008D 42A4       785            orl     _P0MDOUT,a
008F            786   ;        sensor_test.c:157: case 1: P1MDOUT |= mask; break;
008F 22         787            ret
0090            788   L003002?:
0090 EB         789            mov     a,r3
0091 42A5       790            orl     _P1MDOUT,a
0093            791   ;        sensor_test.c:158: case 2: P2MDOUT |= mask; break; 
0093 22         792            ret
0094            793   L003003?:
0094 EB         794            mov     a,r3
0095 42A6       795            orl     _P2MDOUT,a
0097            796   ;        sensor_test.c:159: case 3: P3MDOUT |= mask; break; 
0097 22         797            ret
0098            798   L003004?:
0098 EB         799            mov     a,r3
0099 429C       800            orl     _P3MDOUT,a
009B            801   ;        sensor_test.c:160: }    
009B            802   L003006?:
009B 22         803            ret
009C            804   ;------------------------------------------------------------
009C            805   ;Allocation info for local variables in function 'Timer3us'
009C            806   ;------------------------------------------------------------
009C            807   ;i                         Allocated with name '_Timer3us_i_1_70'
009C            808   ;us                        Allocated to registers r2 
009C            809   ;------------------------------------------------------------
009C            810   ;        sensor_test.c:164: void Timer3us(unsigned char us)
009C            811   ;        -----------------------------------------
009C            812   ;         function Timer3us
009C            813   ;        -----------------------------------------
009C            814   _Timer3us:
009C AA82       815            mov     r2,dpl
009E            816   ;        sensor_test.c:169: CKCON0|=0b_0100_0000;
009E 438E40     817            orl     _CKCON0,#0x40
00A1            818   ;        sensor_test.c:171: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
00A1 7592B8     819            mov     _TMR3RL,#0xB8
00A4 7593FF     820            mov     (_TMR3RL >> 8),#0xFF
00A7            821   ;        sensor_test.c:172: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
00A7 859294     822            mov     _TMR3,_TMR3RL
00AA 859395     823            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
00AD            824   ;        sensor_test.c:174: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
00AD 759104     825            mov     _TMR3CN0,#0x04
00B0            826   ;        sensor_test.c:175: for (i = 0; i < us; i++)       // Count <us> overflows
00B0 7B00       827            mov     r3,#0x00
00B2            828   L004004?:
00B2 C3         829            clr     c
00B3 EB         830            mov     a,r3
00B4 9A         831            subb    a,r2
00B5 5000       832            jnc     L004007?
00B7            833   ;        sensor_test.c:177: while (!(TMR3CN0 & 0x80));  // Wait for overflow
00B7            834   L004001?:
00B7 E591       835            mov     a,_TMR3CN0
00B9 30E790     836            jnb     acc.7,L004001?
00BC            837   ;        sensor_test.c:178: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
00BC 53917F     838            anl     _TMR3CN0,#0x7F
00BF            839   ;        sensor_test.c:175: for (i = 0; i < us; i++)       // Count <us> overflows
00BF 0B         840            inc     r3
00C0 8000       841            sjmp    L004004?
00C2            842   L004007?:
00C2            843   ;        sensor_test.c:180: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00C2 759100     844            mov     _TMR3CN0,#0x00
00C5 22         845            ret
00C6            846   ;------------------------------------------------------------
00C6            847   ;Allocation info for local variables in function 'waitms'
00C6            848   ;------------------------------------------------------------
00C6            849   ;ms                        Allocated to registers r2 r3 
00C6            850   ;j                         Allocated with name '_waitms_j_1_73'
00C6            851   ;k                         Allocated with name '_waitms_k_1_73'
00C6            852   ;------------------------------------------------------------
00C6            853   ;        sensor_test.c:183: void waitms (unsigned int ms)
00C6            854   ;        -----------------------------------------
00C6            855   ;         function waitms
00C6            856   ;        -----------------------------------------
00C6            857   _waitms:
00C6 AA82       858            mov     r2,dpl
00C8 AB83       859            mov     r3,dph
00CA            860   ;        sensor_test.c:187: for(j=0; j<ms; j++)
00CA 7C00       861            mov     r4,#0x00
00CC 7D00       862            mov     r5,#0x00
00CE            863   L005005?:
00CE C3         864            clr     c
00CF EC         865            mov     a,r4
00D0 9A         866            subb    a,r2
00D1 ED         867            mov     a,r5
00D2 9B         868            subb    a,r3
00D3 5000       869            jnc     L005009?
00D5            870   ;        sensor_test.c:188: for (k=0; k<4; k++) Timer3us(250);
00D5 7E00       871            mov     r6,#0x00
00D7            872   L005001?:
00D7 BE04D0     873            cjne    r6,#0x04,L005018?
00DA            874   L005018?:
00DA 5000       875            jnc     L005007?
00DC 7582FA     876            mov     dpl,#0xFA
00DF C002       877            push    ar2
00E1 C003       878            push    ar3
00E3 C004       879            push    ar4
00E5 C005       880            push    ar5
00E7 C006       881            push    ar6
00E9 120000     882            lcall   _Timer3us
00EC D006       883            pop     ar6
00EE D005       884            pop     ar5
00F0 D004       885            pop     ar4
00F2 D003       886            pop     ar3
00F4 D002       887            pop     ar2
00F6 0E         888            inc     r6
00F7 8000       889            sjmp    L005001?
00F9            890   L005007?:
00F9            891   ;        sensor_test.c:187: for(j=0; j<ms; j++)
00F9 0C         892            inc     r4
00FA BC0010     893            cjne    r4,#0x00,L005005?
00FD 0D         894            inc     r5
00FE 8000       895            sjmp    L005005?
0100            896   L005009?:
0100 22         897            ret
0101            898   ;------------------------------------------------------------
0101            899   ;Allocation info for local variables in function 'SPI_transfer'
0101            900   ;------------------------------------------------------------
0101            901   ;tx_data                   Allocated to registers 
0101            902   ;------------------------------------------------------------
0101            903   ;        sensor_test.c:191: unsigned char SPI_transfer(unsigned char tx_data)
0101            904   ;        -----------------------------------------
0101            905   ;         function SPI_transfer
0101            906   ;        -----------------------------------------
0101            907   _SPI_transfer:
0101 8582A3     908            mov     _SPI0DAT,dpl
0104            909   ;        sensor_test.c:194: while (!SPIF);      // Wait for transfer to complete
0104            910   L006001?:
0104            911   ;        sensor_test.c:195: SPIF = 0;           // Clear SPI interrupt flag
0104 10FF90     912            jbc     _SPIF,L006008?
0107 8000       913            sjmp    L006001?
0109            914   L006008?:
0109            915   ;        sensor_test.c:196: return SPI0DAT;     // Return received data
0109 85A382     916            mov     dpl,_SPI0DAT
010C 22         917            ret
010D            918   ;------------------------------------------------------------
010D            919   ;Allocation info for local variables in function 'SPI_read'
010D            920   ;------------------------------------------------------------
010D            921   ;reg_addr                  Allocated to registers r2 
010D            922   ;value                     Allocated to registers 
010D            923   ;------------------------------------------------------------
010D            924   ;        sensor_test.c:199: unsigned char SPI_read(unsigned char reg_addr)
010D            925   ;        -----------------------------------------
010D            926   ;         function SPI_read
010D            927   ;        -----------------------------------------
010D            928   _SPI_read:
010D AA82       929            mov     r2,dpl
010F            930   ;        sensor_test.c:204: reg_addr = reg_addr | 0x80;
010F 430280     931            orl     ar2,#0x80
0112            932   ;        sensor_test.c:206: CS = 0;                // Select the device
0112 C283       933            clr     _P0_3
0114            934   ;        sensor_test.c:207: SPI_transfer(reg_addr);     // Send register address
0114 8A82       935            mov     dpl,r2
0116 120000     936            lcall   _SPI_transfer
0119            937   ;        sensor_test.c:208: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
0119 758200     938            mov     dpl,#0x00
011C 120000     939            lcall   _SPI_transfer
011F            940   ;        sensor_test.c:209: CS = 1;                // Deselect the device
011F D283       941            setb    _P0_3
0121            942   ;        sensor_test.c:211: return value;
0121 22         943            ret
0122            944   ;------------------------------------------------------------
0122            945   ;Allocation info for local variables in function 'SPI_read_block'
0122            946   ;------------------------------------------------------------
0122            947   ;buffer                    Allocated with name '_SPI_read_block_PARM_2'
0122            948   ;len                       Allocated with name '_SPI_read_block_PARM_3'
0122            949   ;start_addr                Allocated to registers r2 
0122            950   ;i                         Allocated to registers r2 
0122            951   ;------------------------------------------------------------
0122            952   ;        sensor_test.c:214: void SPI_read_block(unsigned char start_addr, uint8_t *buffer, uint8_t len)
0122            953   ;        -----------------------------------------
0122            954   ;         function SPI_read_block
0122            955   ;        -----------------------------------------
0122            956   _SPI_read_block:
0122 AA82       957            mov     r2,dpl
0124            958   ;        sensor_test.c:217: start_addr |= 0x80; // Set MSB for read
0124 430280     959            orl     ar2,#0x80
0127            960   ;        sensor_test.c:218: CS = 0;
0127 C283       961            clr     _P0_3
0129            962   ;        sensor_test.c:219: SPI_transfer(start_addr);
0129 8A82       963            mov     dpl,r2
012B 120000     964            lcall   _SPI_transfer
012E            965   ;        sensor_test.c:220: for (i = 0; i < len; i++) {
012E 7A00       966            mov     r2,#0x00
0130            967   L008001?:
0130 C3         968            clr     c
0131 EA         969            mov     a,r2
0132 9520       970            subb    a,_SPI_read_block_PARM_3
0134 5000       971            jnc     L008004?
0136            972   ;        sensor_test.c:221: buffer[i] = SPI_transfer(0x00); // Dummy writes
0136 EA         973            mov     a,r2
0137 2570       974            add     a,_SPI_read_block_PARM_2
0139 FB         975            mov     r3,a
013A E4         976            clr     a
013B 3571       977            addc    a,(_SPI_read_block_PARM_2 + 1)
013D FC         978            mov     r4,a
013E AD72       979            mov     r5,(_SPI_read_block_PARM_2 + 2)
0140 758200     980            mov     dpl,#0x00
0143 C002       981            push    ar2
0145 C003       982            push    ar3
0147 C004       983            push    ar4
0149 C005       984            push    ar5
014B 120000     985            lcall   _SPI_transfer
014E AE82       986            mov     r6,dpl
0150 D005       987            pop     ar5
0152 D004       988            pop     ar4
0154 D003       989            pop     ar3
0156 D002       990            pop     ar2
0158 8B82       991            mov     dpl,r3
015A 8C83       992            mov     dph,r4
015C 8DF0       993            mov     b,r5
015E EE         994            mov     a,r6
015F 120000     995            lcall   __gptrput
0162            996   ;        sensor_test.c:220: for (i = 0; i < len; i++) {
0162 0A         997            inc     r2
0163 8000       998            sjmp    L008001?
0165            999   L008004?:
0165           1000   ;        sensor_test.c:223: CS = 1;
0165 D283      1001            setb    _P0_3
0167 22        1002            ret
0168           1003   ;------------------------------------------------------------
0168           1004   ;Allocation info for local variables in function 'SPI_write'
0168           1005   ;------------------------------------------------------------
0168           1006   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0168           1007   ;reg_addr                  Allocated to registers r2 
0168           1008   ;------------------------------------------------------------
0168           1009   ;        sensor_test.c:227: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0168           1010   ;        -----------------------------------------
0168           1011   ;         function SPI_write
0168           1012   ;        -----------------------------------------
0168           1013   _SPI_write:
0168 AA82      1014            mov     r2,dpl
016A           1015   ;        sensor_test.c:230: reg_addr = reg_addr & 0x7F;
016A 53027F    1016            anl     ar2,#0x7F
016D           1017   ;        sensor_test.c:232: CS = 0;                // Select device
016D C283      1018            clr     _P0_3
016F           1019   ;        sensor_test.c:233: SPI_transfer(reg_addr);     // Send register address
016F 8A82      1020            mov     dpl,r2
0171 120000    1021            lcall   _SPI_transfer
0174           1022   ;        sensor_test.c:234: SPI_transfer(reg_value);    // Send value
0174 85D082    1023            mov     dpl,_SPI_write_PARM_2
0177 120000    1024            lcall   _SPI_transfer
017A           1025   ;        sensor_test.c:235: CS = 1;                // Deselect device
017A D283      1026            setb    _P0_3
017C 22        1027            ret
017D           1028   ;------------------------------------------------------------
017D           1029   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
017D           1030   ;------------------------------------------------------------
017D           1031   ;i                         Allocated with name '_BMM150_Read_Trim_Registers_i_1_84'
017D           1032   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_84'
017D           1033   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_84'
017D           1034   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_84'
017D           1035   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84'
017D           1036   ;------------------------------------------------------------
017D           1037   ;        sensor_test.c:238: void BMM150_Read_Trim_Registers(void)
017D           1038   ;        -----------------------------------------
017D           1039   ;         function BMM150_Read_Trim_Registers
017D           1040   ;        -----------------------------------------
017D           1041   _BMM150_Read_Trim_Registers:
017D           1042   ;        sensor_test.c:242: xdata uint8_t trim_x1y1[2] = {0};
017D 90C280    1043            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_84
0180           1044   ;        sensor_test.c:243: xdata uint8_t trim_xyz_data[4] = {0};
0180 E4        1045            clr     a
0181 F0        1046            movx    @dptr,a
0182 90C281    1047            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_84 + 0x0001)
0185 F0        1048            movx    @dptr,a
0186 90C2E0    1049            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_84
0189 F0        1050            movx    @dptr,a
018A 90C2E1    1051            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0001)
018D F0        1052            movx    @dptr,a
018E 90C2E2    1053            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0002)
0191           1054   ;        sensor_test.c:244: xdata uint8_t trim_xy1xy2[10] = {0};
0191 E4        1055            clr     a
0192 F0        1056            movx    @dptr,a
0193 90C2E3    1057            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0003)
0196 F0        1058            movx    @dptr,a
0197 90C340    1059            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84
019A F0        1060            movx    @dptr,a
019B 90C341    1061            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0001)
019E F0        1062            movx    @dptr,a
019F 90C342    1063            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0002)
01A2 E4        1064            clr     a
01A3 F0        1065            movx    @dptr,a
01A4 90C343    1066            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0003)
01A7 F0        1067            movx    @dptr,a
01A8 90C344    1068            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0004)
01AB F0        1069            movx    @dptr,a
01AC 90C345    1070            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0005)
01AF F0        1071            movx    @dptr,a
01B0 90C346    1072            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0006)
01B3 E4        1073            clr     a
01B4 F0        1074            movx    @dptr,a
01B5 90C347    1075            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0007)
01B8 F0        1076            movx    @dptr,a
01B9 90C348    1077            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0008)
01BC F0        1078            movx    @dptr,a
01BD 90C349    1079            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0009)
01C0 F0        1080            movx    @dptr,a
01C1           1081   ;        sensor_test.c:247: for (i=0;i<2;i++){
01C1 7A00      1082            mov     r2,#0x00
01C3           1083   L010001?:
01C3 BA02D0    1084            cjne    r2,#0x02,L010024?
01C6           1085   L010024?:
01C6 5000      1086            jnc     L010004?
01C8           1087   ;        sensor_test.c:248: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
01C8 EA        1088            mov     a,r2
01C9 2480      1089            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_84
01CB FB        1090            mov     r3,a
01CC E4        1091            clr     a
01CD 34C2      1092            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_84 >> 8)
01CF FC        1093            mov     r4,a
01D0 745D      1094            mov     a,#0x5D
01D2 2A        1095            add     a,r2
01D3 F582      1096            mov     dpl,a
01D5 C002      1097            push    ar2
01D7 C003      1098            push    ar3
01D9 C004      1099            push    ar4
01DB 120000    1100            lcall   _SPI_read
01DE AD82      1101            mov     r5,dpl
01E0 D004      1102            pop     ar4
01E2 D003      1103            pop     ar3
01E4 D002      1104            pop     ar2
01E6 8B82      1105            mov     dpl,r3
01E8 8C83      1106            mov     dph,r4
01EA ED        1107            mov     a,r5
01EB F0        1108            movx    @dptr,a
01EC           1109   ;        sensor_test.c:247: for (i=0;i<2;i++){
01EC 0A        1110            inc     r2
01ED 8000      1111            sjmp    L010001?
01EF           1112   L010004?:
01EF           1113   ;        sensor_test.c:250: for (i=0;i<4;i++){
01EF 7A00      1114            mov     r2,#0x00
01F1           1115   L010005?:
01F1 BA0490    1116            cjne    r2,#0x04,L010026?
01F4           1117   L010026?:
01F4 5000      1118            jnc     L010008?
01F6           1119   ;        sensor_test.c:251: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
01F6 EA        1120            mov     a,r2
01F7 24E0      1121            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_84
01F9 FB        1122            mov     r3,a
01FA E4        1123            clr     a
01FB 34C2      1124            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 >> 8)
01FD FC        1125            mov     r4,a
01FE 7462      1126            mov     a,#0x62
0200 2A        1127            add     a,r2
0201 F582      1128            mov     dpl,a
0203 C002      1129            push    ar2
0205 C003      1130            push    ar3
0207 C004      1131            push    ar4
0209 120000    1132            lcall   _SPI_read
020C AD82      1133            mov     r5,dpl
020E D004      1134            pop     ar4
0210 D003      1135            pop     ar3
0212 D002      1136            pop     ar2
0214 8B82      1137            mov     dpl,r3
0216 8C83      1138            mov     dph,r4
0218 ED        1139            mov     a,r5
0219 F0        1140            movx    @dptr,a
021A           1141   ;        sensor_test.c:250: for (i=0;i<4;i++){
021A 0A        1142            inc     r2
021B 8000      1143            sjmp    L010005?
021D           1144   L010008?:
021D           1145   ;        sensor_test.c:253: for (i=0;i<10;i++){
021D 7A00      1146            mov     r2,#0x00
021F           1147   L010009?:
021F BA0A50    1148            cjne    r2,#0x0A,L010028?
0222           1149   L010028?:
0222 5000      1150            jnc     L010012?
0224           1151   ;        sensor_test.c:254: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
0224 EA        1152            mov     a,r2
0225 2440      1153            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84
0227 FB        1154            mov     r3,a
0228 E4        1155            clr     a
0229 34C3      1156            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 >> 8)
022B FC        1157            mov     r4,a
022C 7468      1158            mov     a,#0x68
022E 2A        1159            add     a,r2
022F F582      1160            mov     dpl,a
0231 C002      1161            push    ar2
0233 C003      1162            push    ar3
0235 C004      1163            push    ar4
0237 120000    1164            lcall   _SPI_read
023A AD82      1165            mov     r5,dpl
023C D004      1166            pop     ar4
023E D003      1167            pop     ar3
0240 D002      1168            pop     ar2
0242 8B82      1169            mov     dpl,r3
0244 8C83      1170            mov     dph,r4
0246 ED        1171            mov     a,r5
0247 F0        1172            movx    @dptr,a
0248           1173   ;        sensor_test.c:253: for (i=0;i<10;i++){
0248 0A        1174            inc     r2
0249 8000      1175            sjmp    L010009?
024B           1176   L010012?:
024B           1177   ;        sensor_test.c:257: dig_x1 = (int8_t) trim_x1y1[0]; 
024B 90C280    1178            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_84
024E E0        1179            movx    a,@dptr
024F F530      1180            mov     _dig_x1,a
0251           1181   ;        sensor_test.c:258: dig_y1 = (int8_t) trim_x1y1[1]; 
0251 90C281    1182            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_84 + 0x0001)
0254 E0        1183            movx    a,@dptr
0255 F5B0      1184            mov     _dig_y1,a
0257           1185   ;        sensor_test.c:259: dig_x2 = (int8_t) trim_xyz_data[2]; 
0257 90C2E2    1186            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0002)
025A E0        1187            movx    a,@dptr
025B F5F0      1188            mov     _dig_x2,a
025D           1189   ;        sensor_test.c:260: dig_y2 = (int8_t) trim_xyz_data[3]; 
025D 90C2E3    1190            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0003)
0260 E0        1191            movx    a,@dptr
0261 F570      1192            mov     _dig_y2,a
0263           1193   ;        sensor_test.c:262: temp_msb = ((uint16_t)trim_xy1xy2[3]) << 8;
0263 90C343    1194            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0003)
0266 E0        1195            movx    a,@dptr
0267 FB        1196            mov     r3,a
0268 7A00      1197            mov     r2,#0x00
026A           1198   ;        sensor_test.c:263: dig_z1 = (uint16_t)(temp_msb | trim_xy1xy2[2]);
026A 90C342    1199            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0002)
026D E0        1200            movx    a,@dptr
026E 7D00      1201            mov     r5,#0x00
0270 4202      1202            orl     ar2,a
0272 ED        1203            mov     a,r5
0273 4203      1204            orl     ar3,a
0275 8A30      1205            mov     _dig_z1,r2
0277           1206   ;        sensor_test.c:265: temp_msb = ((uint16_t)trim_xy1xy2[1]) << 8;
0277 90C341    1207            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0001)
027A E0        1208            movx    a,@dptr
027B FB        1209            mov     r3,a
027C 7A00      1210            mov     r2,#0x00
027E           1211   ;        sensor_test.c:266: dig_z2 = (int16_t)(temp_msb | trim_xy1xy2[0]);
027E 90C340    1212            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84
0281 E0        1213            movx    a,@dptr
0282 7D00      1214            mov     r5,#0x00
0284 4202      1215            orl     ar2,a
0286 ED        1216            mov     a,r5
0287 4203      1217            orl     ar3,a
0289 8AF0      1218            mov     _dig_z2,r2
028B           1219   ;        sensor_test.c:268: temp_msb = ((uint16_t)trim_xy1xy2[7]) << 8;
028B 90C347    1220            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0007)
028E E0        1221            movx    a,@dptr
028F FB        1222            mov     r3,a
0290 7A00      1223            mov     r2,#0x00
0292           1224   ;        sensor_test.c:269: dig_z3 = (int16_t)(temp_msb | trim_xy1xy2[6]);
0292 90C346    1225            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0006)
0295 E0        1226            movx    a,@dptr
0296 7D00      1227            mov     r5,#0x00
0298 4202      1228            orl     ar2,a
029A ED        1229            mov     a,r5
029B 4203      1230            orl     ar3,a
029D 8AB0      1231            mov     _dig_z3,r2
029F           1232   ;        sensor_test.c:271: temp_msb = ((uint16_t)trim_xyz_data[1]) << 8;
029F 90C2E1    1233            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0001)
02A2 E0        1234            movx    a,@dptr
02A3 FB        1235            mov     r3,a
02A4 7A00      1236            mov     r2,#0x00
02A6           1237   ;        sensor_test.c:272: dig_z4 = (int16_t)(temp_msb | trim_xyz_data[0]);
02A6 90C2E0    1238            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_84
02A9 E0        1239            movx    a,@dptr
02AA 7D00      1240            mov     r5,#0x00
02AC 4202      1241            orl     ar2,a
02AE ED        1242            mov     a,r5
02AF 4203      1243            orl     ar3,a
02B1 8A70      1244            mov     _dig_z4,r2
02B3           1245   ;        sensor_test.c:274: dig_xy1 = trim_xy1xy2[9];
02B3 90C349    1246            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0009)
02B6 E0        1247            movx    a,@dptr
02B7 F530      1248            mov     _dig_xy1,a
02B9           1249   ;        sensor_test.c:275: dig_xy2 = (int8_t)trim_xy1xy2[8];
02B9 90C348    1250            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0008)
02BC E0        1251            movx    a,@dptr
02BD F5F0      1252            mov     _dig_xy2,a
02BF           1253   ;        sensor_test.c:277: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
02BF 90C345    1254            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0005)
02C2 E0        1255            movx    a,@dptr
02C3 FA        1256            mov     r2,a
02C4 53027F    1257            anl     ar2,#0x7F
02C7 8A03      1258            mov     ar3,r2
02C9 7A00      1259            mov     r2,#0x00
02CB           1260   ;        sensor_test.c:278: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
02CB 90C344    1261            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0004)
02CE E0        1262            movx    a,@dptr
02CF 7D00      1263            mov     r5,#0x00
02D1 4202      1264            orl     ar2,a
02D3 ED        1265            mov     a,r5
02D4 4203      1266            orl     ar3,a
02D6 8AB0      1267            mov     _dig_xyz1,r2
02D8 22        1268            ret
02D9           1269   ;------------------------------------------------------------
02D9           1270   ;Allocation info for local variables in function 'BMM150_Init'
02D9           1271   ;------------------------------------------------------------
02D9           1272   ;chip_id                   Allocated to registers r2 
02D9           1273   ;------------------------------------------------------------
02D9           1274   ;        sensor_test.c:283: void BMM150_Init(void)
02D9           1275   ;        -----------------------------------------
02D9           1276   ;         function BMM150_Init
02D9           1277   ;        -----------------------------------------
02D9           1278   _BMM150_Init:
02D9           1279   ;        sensor_test.c:288: CS = 1;         // Deselect BMM150
02D9 D283      1280            setb    _P0_3
02DB           1281   ;        sensor_test.c:291: waitms(10);
02DB 90000A    1282            mov     dptr,#0x000A
02DE 120000    1283            lcall   _waitms
02E1           1284   ;        sensor_test.c:294: SPI_write(BMM150_POWER_CONTROL, 0x82);
02E1 75D082    1285            mov     _SPI_write_PARM_2,#0x82
02E4 75824B    1286            mov     dpl,#0x4B
02E7 120000    1287            lcall   _SPI_write
02EA           1288   ;        sensor_test.c:295: waitms(10);  // Wait for reset to complete
02EA 90000A    1289            mov     dptr,#0x000A
02ED 120000    1290            lcall   _waitms
02F0           1291   ;        sensor_test.c:298: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
02F0 75D001    1292            mov     _SPI_write_PARM_2,#0x01
02F3 75824B    1293            mov     dpl,#0x4B
02F6 120000    1294            lcall   _SPI_write
02F9           1295   ;        sensor_test.c:299: waitms(5);
02F9 900005    1296            mov     dptr,#0x0005
02FC 120000    1297            lcall   _waitms
02FF           1298   ;        sensor_test.c:302: chip_id = SPI_read(BMM150_CHIP_ID);
02FF 758240    1299            mov     dpl,#0x40
0302 120000    1300            lcall   _SPI_read
0305 AA82      1301            mov     r2,dpl
0307           1302   ;        sensor_test.c:303: if (chip_id != BMM150_CHIP_ID_VALUE)
0307 BA32D0    1303            cjne    r2,#0x32,L011010?
030A 8000      1304            sjmp    L011005?
030C           1305   L011010?:
030C           1306   ;        sensor_test.c:305: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
030C 8A03      1307            mov     ar3,r2
030E 7C00      1308            mov     r4,#0x00
0310 C003      1309            push    ar3
0312 C004      1310            push    ar4
0314 7450      1311            mov     a,#__str_0
0316 C0E0      1312            push    acc
0318 74D1      1313            mov     a,#(__str_0 >> 8)
031A C0E0      1314            push    acc
031C 7480      1315            mov     a,#0x80
031E C0E0      1316            push    acc
0320 120000    1317            lcall   _printf
0323 E581      1318            mov     a,sp
0325 24FB      1319            add     a,#0xfb
0327 F581      1320            mov     sp,a
0329           1321   ;        sensor_test.c:306: while (1) {
0329           1322   L011002?:
0329           1323   ;        sensor_test.c:307: printf("Press restart to check again!\r");
0329 7450      1324            mov     a,#__str_1
032B C0E0      1325            push    acc
032D 74D2      1326            mov     a,#(__str_1 >> 8)
032F C0E0      1327            push    acc
0331 7480      1328            mov     a,#0x80
0333 C0E0      1329            push    acc
0335 120000    1330            lcall   _printf
0338 1581      1331            dec     sp
033A 1581      1332            dec     sp
033C 1581      1333            dec     sp
033E 8000      1334            sjmp    L011002?
0340           1335   L011005?:
0340           1336   ;        sensor_test.c:312: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
0340 75D000    1337            mov     _SPI_write_PARM_2,#0x00
0343 75824C    1338            mov     dpl,#0x4C
0346 C002      1339            push    ar2
0348 120000    1340            lcall   _SPI_write
034B           1341   ;        sensor_test.c:315: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
034B 75D07F    1342            mov     _SPI_write_PARM_2,#0x7F
034E 758251    1343            mov     dpl,#0x51
0351 120000    1344            lcall   _SPI_write
0354           1345   ;        sensor_test.c:316: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
0354 75D00E    1346            mov     _SPI_write_PARM_2,#0x0E
0357 758252    1347            mov     dpl,#0x52
035A 120000    1348            lcall   _SPI_write
035D           1349   ;        sensor_test.c:318: BMM150_Read_Trim_Registers();
035D 120000    1350            lcall   _BMM150_Read_Trim_Registers
0360           1351   ;        sensor_test.c:320: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
0360 7B00      1352            mov     r3,#0x00
0362 C003      1353            push    ar3
0364 7490      1354            mov     a,#__str_2
0366 C0E0      1355            push    acc
0368 74D2      1356            mov     a,#(__str_2 >> 8)
036A C0E0      1357            push    acc
036C 7480      1358            mov     a,#0x80
036E C0E0      1359            push    acc
0370 120000    1360            lcall   _printf
0373 E581      1361            mov     a,sp
0375 24FB      1362            add     a,#0xfb
0377 F581      1363            mov     sp,a
0379 22        1364            ret
037A           1365   ;------------------------------------------------------------
037A           1366   ;Allocation info for local variables in function 'BMM150_compensate_x'
037A           1367   ;------------------------------------------------------------
037A           1368   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
037A           1369   ;mag_data_x                Allocated to registers r2 r3 r4 
037A           1370   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
037A           1371   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_93'
037A           1372   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_93'
037A           1373   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_93'
037A           1374   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_93'
037A           1375   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_93'
037A           1376   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_93'
037A           1377   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_93'
037A           1378   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_93'
037A           1379   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_93'
037A           1380   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_93'
037A           1381   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_93'
037A           1382   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_93'
037A           1383   ;------------------------------------------------------------
037A           1384   ;        sensor_test.c:323: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
037A           1385   ;        -----------------------------------------
037A           1386   ;         function BMM150_compensate_x
037A           1387   ;        -----------------------------------------
037A           1388   _BMM150_compensate_x:
037A           1389   ;        sensor_test.c:341: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
037A ACF0      1390            mov     r4,b
037C 120000    1391            lcall   __gptrget
037F FA        1392            mov     r2,a
0380 A3        1393            inc     dptr
0381 120000    1394            lcall   __gptrget
0384 FB        1395            mov     r3,a
0385 BA0010    1396            cjne    r2,#0x00,L012019?
0388 BBF010    1397            cjne    r3,#0xF0,L012019?
038B 020000    1398            ljmp    L012011?
038E           1399   L012019?:
038E           1400   ;        sensor_test.c:342: if (*data_rhall != 0)
038E AC80      1401            mov     r4,_BMM150_compensate_x_PARM_2
0390 AD81      1402            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
0392 AE82      1403            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
0394 8C82      1404            mov     dpl,r4
0396 8D83      1405            mov     dph,r5
0398 8EF0      1406            mov     b,r6
039A 120000    1407            lcall   __gptrget
039D FC        1408            mov     r4,a
039E A3        1409            inc     dptr
039F 120000    1410            lcall   __gptrget
03A2 FD        1411            mov     r5,a
03A3 4C        1412            orl     a,r4
03A4 6000      1413            jz      L012005?
03A6           1414   ;        sensor_test.c:345: process_comp_x0 = *data_rhall;
03A6 90C400    1415            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03A9 EC        1416            mov     a,r4
03AA F0        1417            movx    @dptr,a
03AB A3        1418            inc     dptr
03AC ED        1419            mov     a,r5
03AD F0        1420            movx    @dptr,a
03AE 8000      1421            sjmp    L012006?
03B0           1422   L012005?:
03B0           1423   ;        sensor_test.c:347: else if (dig_xyz1 != 0)
03B0 E5B0      1424            mov     a,_dig_xyz1
03B2 6000      1425            jz      L012002?
03B4           1426   ;        sensor_test.c:349: process_comp_x0 = dig_xyz1;
03B4 90C400    1427            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03B7 E5B0      1428            mov     a,_dig_xyz1
03B9 F0        1429            movx    @dptr,a
03BA E5B0      1430            mov     a,_dig_xyz1
03BC 33        1431            rlc     a
03BD 95E0      1432            subb    a,acc
03BF A3        1433            inc     dptr
03C0 F0        1434            movx    @dptr,a
03C1 8000      1435            sjmp    L012006?
03C3           1436   L012002?:
03C3           1437   ;        sensor_test.c:353: process_comp_x0 = 0;
03C3 90C400    1438            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03C6 E4        1439            clr     a
03C7 F0        1440            movx    @dptr,a
03C8 A3        1441            inc     dptr
03C9 F0        1442            movx    @dptr,a
03CA           1443   L012006?:
03CA           1444   ;        sensor_test.c:355: if (process_comp_x0 != 0)
03CA 90C400    1445            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03CD E0        1446            movx    a,@dptr
03CE FC        1447            mov     r4,a
03CF A3        1448            inc     dptr
03D0 E0        1449            movx    a,@dptr
03D1 FD        1450            mov     r5,a
03D2 4C        1451            orl     a,r4
03D3 7000      1452            jnz     L012022?
03D5 020000    1453            ljmp    L012008?
03D8           1454   L012022?:
03D8           1455   ;        sensor_test.c:358: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
03D8 E5B0      1456            mov     a,_dig_xyz1
03DA FE        1457            mov     r6,a
03DB 33        1458            rlc     a
03DC 95E0      1459            subb    a,acc
03DE F8        1460            mov     r0,a
03DF C8        1461            xch     a,r0
03E0 5403      1462            anl     a,#0x03
03E2 A2E0      1463            mov     c,acc.0
03E4 C8        1464            xch     a,r0
03E5 13        1465            rrc     a
03E6 C8        1466            xch     a,r0
03E7 13        1467            rrc     a
03E8 A2E0      1468            mov     c,acc.0
03EA C8        1469            xch     a,r0
03EB 13        1470            rrc     a
03EC C8        1471            xch     a,r0
03ED 13        1472            rrc     a
03EE C8        1473            xch     a,r0
03EF F9        1474            mov     r1,a
03F0 EE        1475            mov     a,r6
03F1 03        1476            rr      a
03F2 03        1477            rr      a
03F3 54C0      1478            anl     a,#0xc0
03F5 FF        1479            mov     r7,a
03F6 EE        1480            mov     a,r6
03F7 03        1481            rr      a
03F8 03        1482            rr      a
03F9 543F      1483            anl     a,#0x3f
03FB 48        1484            orl     a,r0
03FC F8        1485            mov     r0,a
03FD 7E00      1486            mov     r6,#0x00
03FF           1487   ;        sensor_test.c:359: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
03FF 8C00      1488            mov     __divslong_PARM_2,r4
0401 8D01      1489            mov     (__divslong_PARM_2 + 1),r5
0403 750200    1490            mov     (__divslong_PARM_2 + 2),#0x00
0406 750300    1491            mov     (__divslong_PARM_2 + 3),#0x00
0409 8E82      1492            mov     dpl,r6
040B 8F83      1493            mov     dph,r7
040D 88F0      1494            mov     b,r0
040F E9        1495            mov     a,r1
0410 C002      1496            push    ar2
0412 C003      1497            push    ar3
0414 120000    1498            lcall   __divslong
0417 AC82      1499            mov     r4,dpl
0419 E583      1500            mov     a,dph
041B 24C0      1501            add     a,#0xc0
041D FD        1502            mov     r5,a
041E           1503   ;        sensor_test.c:361: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
041E 8C06      1504            mov     ar6,r4
0420 8D07      1505            mov     ar7,r5
0422 8E40      1506            mov     _BMM150_compensate_x_sloc0_1_0,r6
0424 EF        1507            mov     a,r7
0425 F541      1508            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
0427 33        1509            rlc     a
0428 95E0      1510            subb    a,acc
042A F542      1511            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
042C F543      1512            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
042E 8C06      1513            mov     ar6,r4
0430 8D07      1514            mov     ar7,r5
0432 8E00      1515            mov     __mullong_PARM_2,r6
0434 EF        1516            mov     a,r7
0435 F501      1517            mov     (__mullong_PARM_2 + 1),a
0437 33        1518            rlc     a
0438 95E0      1519            subb    a,acc
043A F502      1520            mov     (__mullong_PARM_2 + 2),a
043C F503      1521            mov     (__mullong_PARM_2 + 3),a
043E           1522   ;        sensor_test.c:362: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
043E 854082    1523            mov     dpl,_BMM150_compensate_x_sloc0_1_0
0441 854183    1524            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
0444 8542F0    1525            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
0447 E543      1526            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0449 C004      1527            push    ar4
044B C005      1528            push    ar5
044D 120000    1529            lcall   __mullong
0450 858240    1530            mov     _BMM150_compensate_x_sloc0_1_0,dpl
0453 858341    1531            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
0456 85F042    1532            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
0459 F543      1533            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
045B E5F0      1534            mov     a,_dig_xy2
045D FE        1535            mov     r6,a
045E 33        1536            rlc     a
045F 95E0      1537            subb    a,acc
0461 FF        1538            mov     r7,a
0462 F8        1539            mov     r0,a
0463 F9        1540            mov     r1,a
0464 750080    1541            mov     __divslong_PARM_2,#0x80
0467 E4        1542            clr     a
0468 F501      1543            mov     (__divslong_PARM_2 + 1),a
046A F502      1544            mov     (__divslong_PARM_2 + 2),a
046C F503      1545            mov     (__divslong_PARM_2 + 3),a
046E 854082    1546            mov     dpl,_BMM150_compensate_x_sloc0_1_0
0471 854183    1547            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
0474 8542F0    1548            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
0477 E543      1549            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0479 C006      1550            push    ar6
047B C007      1551            push    ar7
047D C000      1552            push    ar0
047F C001      1553            push    ar1
0481 120000    1554            lcall   __divslong
0484 858200    1555            mov     __mullong_PARM_2,dpl
0487 858301    1556            mov     (__mullong_PARM_2 + 1),dph
048A 85F002    1557            mov     (__mullong_PARM_2 + 2),b
048D F503      1558            mov     (__mullong_PARM_2 + 3),a
048F D001      1559            pop     ar1
0491 D000      1560            pop     ar0
0493 D007      1561            pop     ar7
0495 D006      1562            pop     ar6
0497           1563   ;        sensor_test.c:363: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
0497 8E82      1564            mov     dpl,r6
0499 8F83      1565            mov     dph,r7
049B 88F0      1566            mov     b,r0
049D E9        1567            mov     a,r1
049E 120000    1568            lcall   __mullong
04A1 858240    1569            mov     _BMM150_compensate_x_sloc0_1_0,dpl
04A4 858341    1570            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
04A7 85F042    1571            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
04AA F543      1572            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
04AC D005      1573            pop     ar5
04AE D004      1574            pop     ar4
04B0 E530      1575            mov     a,_dig_xy1
04B2 FE        1576            mov     r6,a
04B3 33        1577            rlc     a
04B4 95E0      1578            subb    a,acc
04B6 5401      1579            anl     a,#0x01
04B8 A2E0      1580            mov     c,acc.0
04BA CE        1581            xch     a,r6
04BB 13        1582            rrc     a
04BC CE        1583            xch     a,r6
04BD 13        1584            rrc     a
04BE CE        1585            xch     a,r6
04BF 8E00      1586            mov     __mullong_PARM_2,r6
04C1 F501      1587            mov     (__mullong_PARM_2 + 1),a
04C3 33        1588            rlc     a
04C4 95E0      1589            subb    a,acc
04C6 F502      1590            mov     (__mullong_PARM_2 + 2),a
04C8 F503      1591            mov     (__mullong_PARM_2 + 3),a
04CA           1592   ;        sensor_test.c:364: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
04CA ED        1593            mov     a,r5
04CB 33        1594            rlc     a
04CC 95E0      1595            subb    a,acc
04CE FE        1596            mov     r6,a
04CF           1597   ;        sensor_test.c:365: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
04CF 8C82      1598            mov     dpl,r4
04D1 8D83      1599            mov     dph,r5
04D3 8EF0      1600            mov     b,r6
04D5 120000    1601            lcall   __mullong
04D8 AC82      1602            mov     r4,dpl
04DA AD83      1603            mov     r5,dph
04DC AEF0      1604            mov     r6,b
04DE FF        1605            mov     r7,a
04DF EC        1606            mov     a,r4
04E0 2540      1607            add     a,_BMM150_compensate_x_sloc0_1_0
04E2 FC        1608            mov     r4,a
04E3 ED        1609            mov     a,r5
04E4 3541      1610            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
04E6 FD        1611            mov     r5,a
04E7 EE        1612            mov     a,r6
04E8 3542      1613            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
04EA FE        1614            mov     r6,a
04EB EF        1615            mov     a,r7
04EC 3543      1616            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
04EE FF        1617            mov     r7,a
04EF 750000    1618            mov     __divslong_PARM_2,#0x00
04F2 750102    1619            mov     (__divslong_PARM_2 + 1),#0x02
04F5 750200    1620            mov     (__divslong_PARM_2 + 2),#0x00
04F8 750300    1621            mov     (__divslong_PARM_2 + 3),#0x00
04FB 8C82      1622            mov     dpl,r4
04FD 8D83      1623            mov     dph,r5
04FF 8EF0      1624            mov     b,r6
0501 EF        1625            mov     a,r7
0502 120000    1626            lcall   __divslong
0505 AC82      1627            mov     r4,dpl
0507 AD83      1628            mov     r5,dph
0509 AEF0      1629            mov     r6,b
050B FF        1630            mov     r7,a
050C 7410      1631            mov     a,#0x10
050E 2E        1632            add     a,r6
050F FE        1633            mov     r6,a
0510 E4        1634            clr     a
0511 3F        1635            addc    a,r7
0512 FF        1636            mov     r7,a
0513           1637   ;        sensor_test.c:366: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
0513 E5F0      1638            mov     a,_dig_x2
0515 F8        1639            mov     r0,a
0516 33        1640            rlc     a
0517 95E0      1641            subb    a,acc
0519 F9        1642            mov     r1,a
051A 74A0      1643            mov     a,#0xA0
051C 28        1644            add     a,r0
051D F8        1645            mov     r0,a
051E E4        1646            clr     a
051F 39        1647            addc    a,r1
0520 8800      1648            mov     __mullong_PARM_2,r0
0522 F501      1649            mov     (__mullong_PARM_2 + 1),a
0524 33        1650            rlc     a
0525 95E0      1651            subb    a,acc
0527 F502      1652            mov     (__mullong_PARM_2 + 2),a
0529 F503      1653            mov     (__mullong_PARM_2 + 3),a
052B           1654   ;        sensor_test.c:367: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
052B 8C82      1655            mov     dpl,r4
052D 8D83      1656            mov     dph,r5
052F 8EF0      1657            mov     b,r6
0531 EF        1658            mov     a,r7
0532 120000    1659            lcall   __mullong
0535           1660   ;        sensor_test.c:368: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
0535 750000    1661            mov     __divslong_PARM_2,#0x00
0538 750110    1662            mov     (__divslong_PARM_2 + 1),#0x10
053B 750200    1663            mov     (__divslong_PARM_2 + 2),#0x00
053E 750300    1664            mov     (__divslong_PARM_2 + 3),#0x00
0541 120000    1665            lcall   __divslong
0544 858200    1666            mov     __mullong_PARM_2,dpl
0547 858301    1667            mov     (__mullong_PARM_2 + 1),dph
054A 85F002    1668            mov     (__mullong_PARM_2 + 2),b
054D F503      1669            mov     (__mullong_PARM_2 + 3),a
054F D003      1670            pop     ar3
0551 D002      1671            pop     ar2
0553 EB        1672            mov     a,r3
0554 33        1673            rlc     a
0555 95E0      1674            subb    a,acc
0557 FC        1675            mov     r4,a
0558           1676   ;        sensor_test.c:369: retval = ((int16_t)(process_comp_x10 / 8192));
0558 8A82      1677            mov     dpl,r2
055A 8B83      1678            mov     dph,r3
055C 8CF0      1679            mov     b,r4
055E 120000    1680            lcall   __mullong
0561 750000    1681            mov     __divslong_PARM_2,#0x00
0564 750120    1682            mov     (__divslong_PARM_2 + 1),#0x20
0567 750200    1683            mov     (__divslong_PARM_2 + 2),#0x00
056A 750300    1684            mov     (__divslong_PARM_2 + 3),#0x00
056D 120000    1685            lcall   __divslong
0570 AA82      1686            mov     r2,dpl
0572 AB83      1687            mov     r3,dph
0574           1688   ;        sensor_test.c:370: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
0574 E530      1689            mov     a,_dig_x1
0576 FC        1690            mov     r4,a
0577 33        1691            rlc     a
0578 95E0      1692            subb    a,acc
057A C4        1693            swap    a
057B 03        1694            rr      a
057C 54F8      1695            anl     a,#0xf8
057E CC        1696            xch     a,r4
057F C4        1697            swap    a
0580 03        1698            rr      a
0581 CC        1699            xch     a,r4
0582 6C        1700            xrl     a,r4
0583 CC        1701            xch     a,r4
0584 54F8      1702            anl     a,#0xf8
0586 CC        1703            xch     a,r4
0587 6C        1704            xrl     a,r4
0588 FD        1705            mov     r5,a
0589 EC        1706            mov     a,r4
058A 2A        1707            add     a,r2
058B F582      1708            mov     dpl,a
058D ED        1709            mov     a,r5
058E 3B        1710            addc    a,r3
058F F583      1711            mov     dph,a
0591 750010    1712            mov     __divsint_PARM_2,#0x10
0594 E4        1713            clr     a
0595 F501      1714            mov     (__divsint_PARM_2 + 1),a
0597 120000    1715            lcall   __divsint
059A E582      1716            mov     a,dpl
059C 8583F0    1717            mov     b,dph
059F 90C3A0    1718            mov     dptr,#_BMM150_compensate_x_retval_1_93
05A2 F0        1719            movx    @dptr,a
05A3 A3        1720            inc     dptr
05A4 E5F0      1721            mov     a,b
05A6 F0        1722            movx    @dptr,a
05A7 8000      1723            sjmp    L012012?
05A9           1724   L012008?:
05A9           1725   ;        sensor_test.c:373: retval = BMM150_OVERFLOW_OUTPUT; 
05A9 90C3A0    1726            mov     dptr,#_BMM150_compensate_x_retval_1_93
05AC E4        1727            clr     a
05AD F0        1728            movx    @dptr,a
05AE A3        1729            inc     dptr
05AF 7480      1730            mov     a,#0x80
05B1 F0        1731            movx    @dptr,a
05B2 8000      1732            sjmp    L012012?
05B4           1733   L012011?:
05B4           1734   ;        sensor_test.c:377: retval = BMM150_OVERFLOW_OUTPUT; 
05B4 90C3A0    1735            mov     dptr,#_BMM150_compensate_x_retval_1_93
05B7 E4        1736            clr     a
05B8 F0        1737            movx    @dptr,a
05B9 A3        1738            inc     dptr
05BA 7480      1739            mov     a,#0x80
05BC F0        1740            movx    @dptr,a
05BD           1741   L012012?:
05BD           1742   ;        sensor_test.c:379: return retval; 
05BD 90C3A0    1743            mov     dptr,#_BMM150_compensate_x_retval_1_93
05C0 E0        1744            movx    a,@dptr
05C1 FA        1745            mov     r2,a
05C2 A3        1746            inc     dptr
05C3 E0        1747            movx    a,@dptr
05C4 8A82      1748            mov     dpl,r2
05C6 F583      1749            mov     dph,a
05C8 22        1750            ret
05C9           1751   ;------------------------------------------------------------
05C9           1752   ;Allocation info for local variables in function 'BMM150_compensate_y'
05C9           1753   ;------------------------------------------------------------
05C9           1754   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
05C9           1755   ;mag_data_y                Allocated to registers r2 r3 r4 
05C9           1756   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
05C9           1757   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_102'
05C9           1758   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_102'
05C9           1759   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_102'
05C9           1760   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_102'
05C9           1761   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_102'
05C9           1762   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_102'
05C9           1763   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_102'
05C9           1764   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_102'
05C9           1765   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_102'
05C9           1766   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_102'
05C9           1767   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_102'
05C9           1768   ;------------------------------------------------------------
05C9           1769   ;        sensor_test.c:382: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
05C9           1770   ;        -----------------------------------------
05C9           1771   ;         function BMM150_compensate_y
05C9           1772   ;        -----------------------------------------
05C9           1773   _BMM150_compensate_y:
05C9           1774   ;        sensor_test.c:400: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
05C9 ACF0      1775            mov     r4,b
05CB 120000    1776            lcall   __gptrget
05CE FA        1777            mov     r2,a
05CF A3        1778            inc     dptr
05D0 120000    1779            lcall   __gptrget
05D3 FB        1780            mov     r3,a
05D4 BA00C0    1781            cjne    r2,#0x00,L013019?
05D7 BBF0C0    1782            cjne    r3,#0xF0,L013019?
05DA 020000    1783            ljmp    L013011?
05DD           1784   L013019?:
05DD           1785   ;        sensor_test.c:402: if (*data_rhall != 0)
05DD AC30      1786            mov     r4,_BMM150_compensate_y_PARM_2
05DF AD31      1787            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
05E1 AE32      1788            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
05E3 8C82      1789            mov     dpl,r4
05E5 8D83      1790            mov     dph,r5
05E7 8EF0      1791            mov     b,r6
05E9 120000    1792            lcall   __gptrget
05EC FC        1793            mov     r4,a
05ED A3        1794            inc     dptr
05EE 120000    1795            lcall   __gptrget
05F1 FD        1796            mov     r5,a
05F2 4C        1797            orl     a,r4
05F3 6000      1798            jz      L013005?
05F5           1799   ;        sensor_test.c:405: process_comp_y0 = *data_rhall;
05F5 90C4C0    1800            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
05F8 EC        1801            mov     a,r4
05F9 F0        1802            movx    @dptr,a
05FA A3        1803            inc     dptr
05FB ED        1804            mov     a,r5
05FC F0        1805            movx    @dptr,a
05FD 8000      1806            sjmp    L013006?
05FF           1807   L013005?:
05FF           1808   ;        sensor_test.c:407: else if (dig_xyz1 != 0)
05FF E5B0      1809            mov     a,_dig_xyz1
0601 6000      1810            jz      L013002?
0603           1811   ;        sensor_test.c:409: process_comp_y0 = dig_xyz1;
0603 90C4C0    1812            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
0606 E5B0      1813            mov     a,_dig_xyz1
0608 F0        1814            movx    @dptr,a
0609 E5B0      1815            mov     a,_dig_xyz1
060B 33        1816            rlc     a
060C 95E0      1817            subb    a,acc
060E A3        1818            inc     dptr
060F F0        1819            movx    @dptr,a
0610 8000      1820            sjmp    L013006?
0612           1821   L013002?:
0612           1822   ;        sensor_test.c:413: process_comp_y0 = 0;
0612 90C4C0    1823            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
0615 E4        1824            clr     a
0616 F0        1825            movx    @dptr,a
0617 A3        1826            inc     dptr
0618 F0        1827            movx    @dptr,a
0619           1828   L013006?:
0619           1829   ;        sensor_test.c:416: if (process_comp_y0 != 0)
0619 90C4C0    1830            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
061C E0        1831            movx    a,@dptr
061D FC        1832            mov     r4,a
061E A3        1833            inc     dptr
061F E0        1834            movx    a,@dptr
0620 FD        1835            mov     r5,a
0621 4C        1836            orl     a,r4
0622 7000      1837            jnz     L013022?
0624 020000    1838            ljmp    L013008?
0627           1839   L013022?:
0627           1840   ;        sensor_test.c:419: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
0627 E5B0      1841            mov     a,_dig_xyz1
0629 FE        1842            mov     r6,a
062A 33        1843            rlc     a
062B 95E0      1844            subb    a,acc
062D F8        1845            mov     r0,a
062E C8        1846            xch     a,r0
062F 5403      1847            anl     a,#0x03
0631 A2E0      1848            mov     c,acc.0
0633 C8        1849            xch     a,r0
0634 13        1850            rrc     a
0635 C8        1851            xch     a,r0
0636 13        1852            rrc     a
0637 A2E0      1853            mov     c,acc.0
0639 C8        1854            xch     a,r0
063A 13        1855            rrc     a
063B C8        1856            xch     a,r0
063C 13        1857            rrc     a
063D C8        1858            xch     a,r0
063E F9        1859            mov     r1,a
063F EE        1860            mov     a,r6
0640 03        1861            rr      a
0641 03        1862            rr      a
0642 54C0      1863            anl     a,#0xc0
0644 FF        1864            mov     r7,a
0645 EE        1865            mov     a,r6
0646 03        1866            rr      a
0647 03        1867            rr      a
0648 543F      1868            anl     a,#0x3f
064A 48        1869            orl     a,r0
064B F8        1870            mov     r0,a
064C 7E00      1871            mov     r6,#0x00
064E 8C00      1872            mov     __divslong_PARM_2,r4
0650 8D01      1873            mov     (__divslong_PARM_2 + 1),r5
0652 750200    1874            mov     (__divslong_PARM_2 + 2),#0x00
0655 750300    1875            mov     (__divslong_PARM_2 + 3),#0x00
0658           1876   ;        sensor_test.c:420: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
0658 8E82      1877            mov     dpl,r6
065A 8F83      1878            mov     dph,r7
065C 88F0      1879            mov     b,r0
065E E9        1880            mov     a,r1
065F C002      1881            push    ar2
0661 C003      1882            push    ar3
0663 120000    1883            lcall   __divslong
0666 AC82      1884            mov     r4,dpl
0668 E583      1885            mov     a,dph
066A 24C0      1886            add     a,#0xc0
066C FD        1887            mov     r5,a
066D           1888   ;        sensor_test.c:422: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
066D 8C06      1889            mov     ar6,r4
066F 8D07      1890            mov     ar7,r5
0671 8E90      1891            mov     _BMM150_compensate_y_sloc0_1_0,r6
0673 EF        1892            mov     a,r7
0674 F591      1893            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
0676 33        1894            rlc     a
0677 95E0      1895            subb    a,acc
0679 F592      1896            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
067B F593      1897            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
067D 8C06      1898            mov     ar6,r4
067F 8D07      1899            mov     ar7,r5
0681 8E00      1900            mov     __mullong_PARM_2,r6
0683 EF        1901            mov     a,r7
0684 F501      1902            mov     (__mullong_PARM_2 + 1),a
0686 33        1903            rlc     a
0687 95E0      1904            subb    a,acc
0689 F502      1905            mov     (__mullong_PARM_2 + 2),a
068B F503      1906            mov     (__mullong_PARM_2 + 3),a
068D           1907   ;        sensor_test.c:423: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
068D 859082    1908            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0690 859183    1909            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0693 8592F0    1910            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
0696 E593      1911            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
0698 C004      1912            push    ar4
069A C005      1913            push    ar5
069C 120000    1914            lcall   __mullong
069F 858290    1915            mov     _BMM150_compensate_y_sloc0_1_0,dpl
06A2 858391    1916            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
06A5 85F092    1917            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
06A8 F593      1918            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
06AA E5F0      1919            mov     a,_dig_xy2
06AC FE        1920            mov     r6,a
06AD 33        1921            rlc     a
06AE 95E0      1922            subb    a,acc
06B0 FF        1923            mov     r7,a
06B1 F8        1924            mov     r0,a
06B2 F9        1925            mov     r1,a
06B3 750080    1926            mov     __divslong_PARM_2,#0x80
06B6 E4        1927            clr     a
06B7 F501      1928            mov     (__divslong_PARM_2 + 1),a
06B9 F502      1929            mov     (__divslong_PARM_2 + 2),a
06BB F503      1930            mov     (__divslong_PARM_2 + 3),a
06BD 859082    1931            mov     dpl,_BMM150_compensate_y_sloc0_1_0
06C0 859183    1932            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
06C3 8592F0    1933            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
06C6 E593      1934            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
06C8 C006      1935            push    ar6
06CA C007      1936            push    ar7
06CC C000      1937            push    ar0
06CE C001      1938            push    ar1
06D0 120000    1939            lcall   __divslong
06D3 858200    1940            mov     __mullong_PARM_2,dpl
06D6 858301    1941            mov     (__mullong_PARM_2 + 1),dph
06D9 85F002    1942            mov     (__mullong_PARM_2 + 2),b
06DC F503      1943            mov     (__mullong_PARM_2 + 3),a
06DE D001      1944            pop     ar1
06E0 D000      1945            pop     ar0
06E2 D007      1946            pop     ar7
06E4 D006      1947            pop     ar6
06E6           1948   ;        sensor_test.c:424: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
06E6 8E82      1949            mov     dpl,r6
06E8 8F83      1950            mov     dph,r7
06EA 88F0      1951            mov     b,r0
06EC E9        1952            mov     a,r1
06ED 120000    1953            lcall   __mullong
06F0 858290    1954            mov     _BMM150_compensate_y_sloc0_1_0,dpl
06F3 858391    1955            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
06F6 85F092    1956            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
06F9 F593      1957            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
06FB D005      1958            pop     ar5
06FD D004      1959            pop     ar4
06FF E530      1960            mov     a,_dig_xy1
0701 FE        1961            mov     r6,a
0702 33        1962            rlc     a
0703 95E0      1963            subb    a,acc
0705 5401      1964            anl     a,#0x01
0707 A2E0      1965            mov     c,acc.0
0709 CE        1966            xch     a,r6
070A 13        1967            rrc     a
070B CE        1968            xch     a,r6
070C 13        1969            rrc     a
070D CE        1970            xch     a,r6
070E 8E00      1971            mov     __mullong_PARM_2,r6
0710 F501      1972            mov     (__mullong_PARM_2 + 1),a
0712 33        1973            rlc     a
0713 95E0      1974            subb    a,acc
0715 F502      1975            mov     (__mullong_PARM_2 + 2),a
0717 F503      1976            mov     (__mullong_PARM_2 + 3),a
0719           1977   ;        sensor_test.c:425: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
0719 ED        1978            mov     a,r5
071A 33        1979            rlc     a
071B 95E0      1980            subb    a,acc
071D FE        1981            mov     r6,a
071E 8C82      1982            mov     dpl,r4
0720 8D83      1983            mov     dph,r5
0722 8EF0      1984            mov     b,r6
0724 120000    1985            lcall   __mullong
0727 AC82      1986            mov     r4,dpl
0729 AD83      1987            mov     r5,dph
072B AEF0      1988            mov     r6,b
072D FF        1989            mov     r7,a
072E EC        1990            mov     a,r4
072F 2590      1991            add     a,_BMM150_compensate_y_sloc0_1_0
0731 FC        1992            mov     r4,a
0732 ED        1993            mov     a,r5
0733 3591      1994            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
0735 FD        1995            mov     r5,a
0736 EE        1996            mov     a,r6
0737 3592      1997            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
0739 FE        1998            mov     r6,a
073A EF        1999            mov     a,r7
073B 3593      2000            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
073D FF        2001            mov     r7,a
073E 750000    2002            mov     __divslong_PARM_2,#0x00
0741 750102    2003            mov     (__divslong_PARM_2 + 1),#0x02
0744 750200    2004            mov     (__divslong_PARM_2 + 2),#0x00
0747 750300    2005            mov     (__divslong_PARM_2 + 3),#0x00
074A           2006   ;        sensor_test.c:426: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
074A 8C82      2007            mov     dpl,r4
074C 8D83      2008            mov     dph,r5
074E 8EF0      2009            mov     b,r6
0750 EF        2010            mov     a,r7
0751 120000    2011            lcall   __divslong
0754 AC82      2012            mov     r4,dpl
0756 AD83      2013            mov     r5,dph
0758 AEF0      2014            mov     r6,b
075A FF        2015            mov     r7,a
075B E570      2016            mov     a,_dig_y2
075D F8        2017            mov     r0,a
075E 33        2018            rlc     a
075F 95E0      2019            subb    a,acc
0761 F9        2020            mov     r1,a
0762 74A0      2021            mov     a,#0xA0
0764 28        2022            add     a,r0
0765 F8        2023            mov     r0,a
0766 E4        2024            clr     a
0767 39        2025            addc    a,r1
0768 8800      2026            mov     __mullong_PARM_2,r0
076A F501      2027            mov     (__mullong_PARM_2 + 1),a
076C 33        2028            rlc     a
076D 95E0      2029            subb    a,acc
076F F502      2030            mov     (__mullong_PARM_2 + 2),a
0771 F503      2031            mov     (__mullong_PARM_2 + 3),a
0773           2032   ;        sensor_test.c:427: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
0773 7410      2033            mov     a,#0x10
0775 2E        2034            add     a,r6
0776 FE        2035            mov     r6,a
0777 E4        2036            clr     a
0778 3F        2037            addc    a,r7
0779 8C82      2038            mov     dpl,r4
077B 8D83      2039            mov     dph,r5
077D 8EF0      2040            mov     b,r6
077F 120000    2041            lcall   __mullong
0782           2042   ;        sensor_test.c:428: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
0782 750000    2043            mov     __divslong_PARM_2,#0x00
0785 750110    2044            mov     (__divslong_PARM_2 + 1),#0x10
0788 750200    2045            mov     (__divslong_PARM_2 + 2),#0x00
078B 750300    2046            mov     (__divslong_PARM_2 + 3),#0x00
078E 120000    2047            lcall   __divslong
0791 858200    2048            mov     __mullong_PARM_2,dpl
0794 858301    2049            mov     (__mullong_PARM_2 + 1),dph
0797 85F002    2050            mov     (__mullong_PARM_2 + 2),b
079A F503      2051            mov     (__mullong_PARM_2 + 3),a
079C D003      2052            pop     ar3
079E D002      2053            pop     ar2
07A0 EB        2054            mov     a,r3
07A1 33        2055            rlc     a
07A2 95E0      2056            subb    a,acc
07A4 FC        2057            mov     r4,a
07A5           2058   ;        sensor_test.c:429: retval = (int16_t)(process_comp_y9 / 8192);
07A5 8A82      2059            mov     dpl,r2
07A7 8B83      2060            mov     dph,r3
07A9 8CF0      2061            mov     b,r4
07AB 120000    2062            lcall   __mullong
07AE 750000    2063            mov     __divslong_PARM_2,#0x00
07B1 750120    2064            mov     (__divslong_PARM_2 + 1),#0x20
07B4 750200    2065            mov     (__divslong_PARM_2 + 2),#0x00
07B7 750300    2066            mov     (__divslong_PARM_2 + 3),#0x00
07BA 120000    2067            lcall   __divslong
07BD AA82      2068            mov     r2,dpl
07BF AB83      2069            mov     r3,dph
07C1           2070   ;        sensor_test.c:430: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
07C1 E5B0      2071            mov     a,_dig_y1
07C3 FC        2072            mov     r4,a
07C4 33        2073            rlc     a
07C5 95E0      2074            subb    a,acc
07C7 C4        2075            swap    a
07C8 03        2076            rr      a
07C9 54F8      2077            anl     a,#0xf8
07CB CC        2078            xch     a,r4
07CC C4        2079            swap    a
07CD 03        2080            rr      a
07CE CC        2081            xch     a,r4
07CF 6C        2082            xrl     a,r4
07D0 CC        2083            xch     a,r4
07D1 54F8      2084            anl     a,#0xf8
07D3 CC        2085            xch     a,r4
07D4 6C        2086            xrl     a,r4
07D5 FD        2087            mov     r5,a
07D6 EC        2088            mov     a,r4
07D7 2A        2089            add     a,r2
07D8 F582      2090            mov     dpl,a
07DA ED        2091            mov     a,r5
07DB 3B        2092            addc    a,r3
07DC F583      2093            mov     dph,a
07DE 750010    2094            mov     __divsint_PARM_2,#0x10
07E1 E4        2095            clr     a
07E2 F501      2096            mov     (__divsint_PARM_2 + 1),a
07E4 120000    2097            lcall   __divsint
07E7 E582      2098            mov     a,dpl
07E9 8583F0    2099            mov     b,dph
07EC 90C460    2100            mov     dptr,#_BMM150_compensate_y_retval_1_102
07EF F0        2101            movx    @dptr,a
07F0 A3        2102            inc     dptr
07F1 E5F0      2103            mov     a,b
07F3 F0        2104            movx    @dptr,a
07F4 8000      2105            sjmp    L013012?
07F6           2106   L013008?:
07F6           2107   ;        sensor_test.c:434: retval = BMM150_OVERFLOW_OUTPUT;
07F6 90C460    2108            mov     dptr,#_BMM150_compensate_y_retval_1_102
07F9 E4        2109            clr     a
07FA F0        2110            movx    @dptr,a
07FB A3        2111            inc     dptr
07FC 7480      2112            mov     a,#0x80
07FE F0        2113            movx    @dptr,a
07FF 8000      2114            sjmp    L013012?
0801           2115   L013011?:
0801           2116   ;        sensor_test.c:440: retval = BMM150_OVERFLOW_OUTPUT;
0801 90C460    2117            mov     dptr,#_BMM150_compensate_y_retval_1_102
0804 E4        2118            clr     a
0805 F0        2119            movx    @dptr,a
0806 A3        2120            inc     dptr
0807 7480      2121            mov     a,#0x80
0809 F0        2122            movx    @dptr,a
080A           2123   L013012?:
080A           2124   ;        sensor_test.c:443: return retval;
080A 90C460    2125            mov     dptr,#_BMM150_compensate_y_retval_1_102
080D E0        2126            movx    a,@dptr
080E FA        2127            mov     r2,a
080F A3        2128            inc     dptr
0810 E0        2129            movx    a,@dptr
0811 8A82      2130            mov     dpl,r2
0813 F583      2131            mov     dph,a
0815 22        2132            ret
0816           2133   ;------------------------------------------------------------
0816           2134   ;Allocation info for local variables in function 'BMM150_compensate_z'
0816           2135   ;------------------------------------------------------------
0816           2136   ;data_rhall                Allocated with name '_BMM150_compensate_z_PARM_2'
0816           2137   ;mag_data_z                Allocated to registers r2 r3 r4 
0816           2138   ;sloc0                     Allocated with name '_BMM150_compensate_z_sloc0_1_0'
0816           2139   ;sloc1                     Allocated with name '_BMM150_compensate_z_sloc1_1_0'
0816           2140   ;sloc2                     Allocated with name '_BMM150_compensate_z_sloc2_1_0'
0816           2141   ;retval                    Allocated with name '_BMM150_compensate_z_retval_1_111'
0816           2142   ;process_comp_z0           Allocated with name '_BMM150_compensate_z_process_comp_z0_1_111'
0816           2143   ;process_comp_z1           Allocated with name '_BMM150_compensate_z_process_comp_z1_1_111'
0816           2144   ;process_comp_z2           Allocated with name '_BMM150_compensate_z_process_comp_z2_1_111'
0816           2145   ;process_comp_z3           Allocated with name '_BMM150_compensate_z_process_comp_z3_1_111'
0816           2146   ;process_comp_z4           Allocated with name '_BMM150_compensate_z_process_comp_z4_1_111'
0816           2147   ;------------------------------------------------------------
0816           2148   ;        sensor_test.c:446: int16_t BMM150_compensate_z (int16_t *mag_data_z, int16_t *data_rhall){
0816           2149   ;        -----------------------------------------
0816           2150   ;         function BMM150_compensate_z
0816           2151   ;        -----------------------------------------
0816           2152   _BMM150_compensate_z:
0816           2153   ;        sensor_test.c:454: if (*mag_data_z != BMM150_OVERFLOW_ADCVAL_ZAXIS_HALL)
0816 ACF0      2154            mov     r4,b
0818 120000    2155            lcall   __gptrget
081B FA        2156            mov     r2,a
081C A3        2157            inc     dptr
081D 120000    2158            lcall   __gptrget
0820 FB        2159            mov     r3,a
0821 BA00C0    2160            cjne    r2,#0x00,L014024?
0824 BBC0C0    2161            cjne    r3,#0xC0,L014024?
0827 020000    2162            ljmp    L014013?
082A           2163   L014024?:
082A           2164   ;        sensor_test.c:456: if ((dig_z2 != 0) && (dig_z1 != 0) && (*data_rhall != 0) &&
082A E5F0      2165            mov     a,_dig_z2
082C 7000      2166            jnz     L014025?
082E 020000    2167            ljmp    L014007?
0831           2168   L014025?:
0831 E530      2169            mov     a,_dig_z1
0833 7000      2170            jnz     L014026?
0835 020000    2171            ljmp    L014007?
0838           2172   L014026?:
0838 ACE0      2173            mov     r4,_BMM150_compensate_z_PARM_2
083A ADE1      2174            mov     r5,(_BMM150_compensate_z_PARM_2 + 1)
083C AEE2      2175            mov     r6,(_BMM150_compensate_z_PARM_2 + 2)
083E 8C82      2176            mov     dpl,r4
0840 8D83      2177            mov     dph,r5
0842 8EF0      2178            mov     b,r6
0844 120000    2179            lcall   __gptrget
0847 FC        2180            mov     r4,a
0848 A3        2181            inc     dptr
0849 120000    2182            lcall   __gptrget
084C FD        2183            mov     r5,a
084D 4C        2184            orl     a,r4
084E 7000      2185            jnz     L014027?
0850 020000    2186            ljmp    L014007?
0853           2187   L014027?:
0853           2188   ;        sensor_test.c:457: (dig_xyz1 != 0))
0853 E5B0      2189            mov     a,_dig_xyz1
0855 7000      2190            jnz     L014028?
0857 020000    2191            ljmp    L014007?
085A           2192   L014028?:
085A           2193   ;        sensor_test.c:460: process_comp_z0 = ((int16_t)*data_rhall) - ((int16_t)dig_xyz1);
085A E5B0      2194            mov     a,_dig_xyz1
085C FE        2195            mov     r6,a
085D 33        2196            rlc     a
085E 95E0      2197            subb    a,acc
0860 FF        2198            mov     r7,a
0861 EC        2199            mov     a,r4
0862 C3        2200            clr     c
0863 9E        2201            subb    a,r6
0864 F5E0      2202            mov     _BMM150_compensate_z_sloc0_1_0,a
0866 ED        2203            mov     a,r5
0867 9F        2204            subb    a,r7
0868 F5E1      2205            mov     (_BMM150_compensate_z_sloc0_1_0 + 1),a
086A           2206   ;        sensor_test.c:461: process_comp_z1 = (((int32_t)dig_z3) * ((int32_t)(process_comp_z0))) / 4;
086A E5B0      2207            mov     a,_dig_z3
086C F8        2208            mov     r0,a
086D 33        2209            rlc     a
086E 95E0      2210            subb    a,acc
0870 F9        2211            mov     r1,a
0871 FE        2212            mov     r6,a
0872 FF        2213            mov     r7,a
0873 85E000    2214            mov     __mullong_PARM_2,_BMM150_compensate_z_sloc0_1_0
0876 E5E1      2215            mov     a,(_BMM150_compensate_z_sloc0_1_0 + 1)
0878 F501      2216            mov     (__mullong_PARM_2 + 1),a
087A 33        2217            rlc     a
087B 95E0      2218            subb    a,acc
087D F502      2219            mov     (__mullong_PARM_2 + 2),a
087F F503      2220            mov     (__mullong_PARM_2 + 3),a
0881 8882      2221            mov     dpl,r0
0883 8983      2222            mov     dph,r1
0885 8EF0      2223            mov     b,r6
0887 EF        2224            mov     a,r7
0888 C002      2225            push    ar2
088A C003      2226            push    ar3
088C C004      2227            push    ar4
088E C005      2228            push    ar5
0890 120000    2229            lcall   __mullong
0893 AE82      2230            mov     r6,dpl
0895 AF83      2231            mov     r7,dph
0897 A8F0      2232            mov     r0,b
0899 F9        2233            mov     r1,a
089A 750004    2234            mov     __divslong_PARM_2,#0x04
089D E4        2235            clr     a
089E F501      2236            mov     (__divslong_PARM_2 + 1),a
08A0 F502      2237            mov     (__divslong_PARM_2 + 2),a
08A2 F503      2238            mov     (__divslong_PARM_2 + 3),a
08A4           2239   ;        sensor_test.c:462: process_comp_z2 = (((int32_t)(*mag_data_z - dig_z4)) * 32768);
08A4 8E82      2240            mov     dpl,r6
08A6 8F83      2241            mov     dph,r7
08A8 88F0      2242            mov     b,r0
08AA E9        2243            mov     a,r1
08AB 120000    2244            lcall   __divslong
08AE 858230    2245            mov     _BMM150_compensate_z_sloc1_1_0,dpl
08B1 858331    2246            mov     (_BMM150_compensate_z_sloc1_1_0 + 1),dph
08B4 85F032    2247            mov     (_BMM150_compensate_z_sloc1_1_0 + 2),b
08B7 F533      2248            mov     (_BMM150_compensate_z_sloc1_1_0 + 3),a
08B9 D005      2249            pop     ar5
08BB D004      2250            pop     ar4
08BD D003      2251            pop     ar3
08BF D002      2252            pop     ar2
08C1 E570      2253            mov     a,_dig_z4
08C3 FE        2254            mov     r6,a
08C4 33        2255            rlc     a
08C5 95E0      2256            subb    a,acc
08C7 FF        2257            mov     r7,a
08C8 EA        2258            mov     a,r2
08C9 C3        2259            clr     c
08CA 9E        2260            subb    a,r6
08CB FA        2261            mov     r2,a
08CC EB        2262            mov     a,r3
08CD 9F        2263            subb    a,r7
08CE FB        2264            mov     r3,a
08CF 33        2265            rlc     a
08D0 95E0      2266            subb    a,acc
08D2 8B82      2267            mov     (_BMM150_compensate_z_sloc2_1_0 + 2),r3
08D4 5401      2268            anl     a,#0x01
08D6 A2E0      2269            mov     c,acc.0
08D8 C582      2270            xch     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
08DA 13        2271            rrc     a
08DB C582      2272            xch     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
08DD 13        2273            rrc     a
08DE C582      2274            xch     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
08E0 F583      2275            mov     (_BMM150_compensate_z_sloc2_1_0 + 3),a
08E2 EA        2276            mov     a,r2
08E3 03        2277            rr      a
08E4 5480      2278            anl     a,#0x80
08E6 F581      2279            mov     (_BMM150_compensate_z_sloc2_1_0 + 1),a
08E8 EA        2280            mov     a,r2
08E9 C3        2281            clr     c
08EA 13        2282            rrc     a
08EB 4582      2283            orl     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
08ED F582      2284            mov     (_BMM150_compensate_z_sloc2_1_0 + 2),a
08EF 758000    2285            mov     _BMM150_compensate_z_sloc2_1_0,#0x00
08F2           2286   ;        sensor_test.c:463: process_comp_z3 = ((int32_t)dig_z1) * (((int16_t)*data_rhall) * 2);
08F2 E530      2287            mov     a,_dig_z1
08F4 F8        2288            mov     r0,a
08F5 33        2289            rlc     a
08F6 95E0      2290            subb    a,acc
08F8 F9        2291            mov     r1,a
08F9 FA        2292            mov     r2,a
08FA FB        2293            mov     r3,a
08FB ED        2294            mov     a,r5
08FC CC        2295            xch     a,r4
08FD 25E0      2296            add     a,acc
08FF CC        2297            xch     a,r4
0900 33        2298            rlc     a
0901 8C00      2299            mov     __mullong_PARM_2,r4
0903 F501      2300            mov     (__mullong_PARM_2 + 1),a
0905 33        2301            rlc     a
0906 95E0      2302            subb    a,acc
0908 F502      2303            mov     (__mullong_PARM_2 + 2),a
090A F503      2304            mov     (__mullong_PARM_2 + 3),a
090C           2305   ;        sensor_test.c:464: process_comp_z4 = (int16_t)((process_comp_z3 + (32768)) / 65536);
090C 8882      2306            mov     dpl,r0
090E 8983      2307            mov     dph,r1
0910 8AF0      2308            mov     b,r2
0912 EB        2309            mov     a,r3
0913 120000    2310            lcall   __mullong
0916 AA82      2311            mov     r2,dpl
0918 AB83      2312            mov     r3,dph
091A ACF0      2313            mov     r4,b
091C FD        2314            mov     r5,a
091D 7480      2315            mov     a,#0x80
091F 2B        2316            add     a,r3
0920 FB        2317            mov     r3,a
0921 E4        2318            clr     a
0922 3C        2319            addc    a,r4
0923 FC        2320            mov     r4,a
0924 E4        2321            clr     a
0925 3D        2322            addc    a,r5
0926 FD        2323            mov     r5,a
0927 750000    2324            mov     __divslong_PARM_2,#0x00
092A 750100    2325            mov     (__divslong_PARM_2 + 1),#0x00
092D 750201    2326            mov     (__divslong_PARM_2 + 2),#0x01
0930 750300    2327            mov     (__divslong_PARM_2 + 3),#0x00
0933 8A82      2328            mov     dpl,r2
0935 8B83      2329            mov     dph,r3
0937 8CF0      2330            mov     b,r4
0939 ED        2331            mov     a,r5
093A 120000    2332            lcall   __divslong
093D AA82      2333            mov     r2,dpl
093F AB83      2334            mov     r3,dph
0941           2335   ;        sensor_test.c:465: retval = ((process_comp_z2 - process_comp_z1) / (dig_z2 + process_comp_z4));
0941 E580      2336            mov     a,_BMM150_compensate_z_sloc2_1_0
0943 C3        2337            clr     c
0944 9530      2338            subb    a,_BMM150_compensate_z_sloc1_1_0
0946 FC        2339            mov     r4,a
0947 E581      2340            mov     a,(_BMM150_compensate_z_sloc2_1_0 + 1)
0949 9531      2341            subb    a,(_BMM150_compensate_z_sloc1_1_0 + 1)
094B FD        2342            mov     r5,a
094C E582      2343            mov     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
094E 9532      2344            subb    a,(_BMM150_compensate_z_sloc1_1_0 + 2)
0950 FE        2345            mov     r6,a
0951 E583      2346            mov     a,(_BMM150_compensate_z_sloc2_1_0 + 3)
0953 9533      2347            subb    a,(_BMM150_compensate_z_sloc1_1_0 + 3)
0955 FF        2348            mov     r7,a
0956 E5F0      2349            mov     a,_dig_z2
0958 F8        2350            mov     r0,a
0959 33        2351            rlc     a
095A 95E0      2352            subb    a,acc
095C F9        2353            mov     r1,a
095D EA        2354            mov     a,r2
095E 28        2355            add     a,r0
095F FA        2356            mov     r2,a
0960 EB        2357            mov     a,r3
0961 39        2358            addc    a,r1
0962 8A00      2359            mov     __divslong_PARM_2,r2
0964 F501      2360            mov     (__divslong_PARM_2 + 1),a
0966 33        2361            rlc     a
0967 95E0      2362            subb    a,acc
0969 F502      2363            mov     (__divslong_PARM_2 + 2),a
096B F503      2364            mov     (__divslong_PARM_2 + 3),a
096D 8C82      2365            mov     dpl,r4
096F 8D83      2366            mov     dph,r5
0971 8EF0      2367            mov     b,r6
0973 EF        2368            mov     a,r7
0974 120000    2369            lcall   __divslong
0977 AA82      2370            mov     r2,dpl
0979 AB83      2371            mov     r3,dph
097B ACF0      2372            mov     r4,b
097D FD        2373            mov     r5,a
097E 90C520    2374            mov     dptr,#_BMM150_compensate_z_retval_1_111
0981 EA        2375            mov     a,r2
0982 F0        2376            movx    @dptr,a
0983 A3        2377            inc     dptr
0984 EB        2378            mov     a,r3
0985 F0        2379            movx    @dptr,a
0986 A3        2380            inc     dptr
0987 EC        2381            mov     a,r4
0988 F0        2382            movx    @dptr,a
0989 A3        2383            inc     dptr
098A ED        2384            mov     a,r5
098B F0        2385            movx    @dptr,a
098C           2386   ;        sensor_test.c:468: if (retval > BMM150_POSITIVE_SATURATION_Z)
098C C3        2387            clr     c
098D 74FF      2388            mov     a,#0xFF
098F 9A        2389            subb    a,r2
0990 747F      2390            mov     a,#0x7F
0992 9B        2391            subb    a,r3
0993 E4        2392            clr     a
0994 9C        2393            subb    a,r4
0995 E4        2394            clr     a
0996 6480      2395            xrl     a,#0x80
0998 8DF0      2396            mov     b,r5
099A 63F080    2397            xrl     b,#0x80
099D 95F0      2398            subb    a,b
099F 5000      2399            jnc     L014004?
09A1           2400   ;        sensor_test.c:470: retval = BMM150_POSITIVE_SATURATION_Z;
09A1 90C520    2401            mov     dptr,#_BMM150_compensate_z_retval_1_111
09A4 74FF      2402            mov     a,#0xFF
09A6 F0        2403            movx    @dptr,a
09A7 A3        2404            inc     dptr
09A8 747F      2405            mov     a,#0x7F
09AA F0        2406            movx    @dptr,a
09AB A3        2407            inc     dptr
09AC E4        2408            clr     a
09AD F0        2409            movx    @dptr,a
09AE A3        2410            inc     dptr
09AF F0        2411            movx    @dptr,a
09B0 8000      2412            sjmp    L014005?
09B2           2413   L014004?:
09B2           2414   ;        sensor_test.c:472: else if (retval < BMM150_NEGATIVE_SATURATION_Z)
09B2 C3        2415            clr     c
09B3 EA        2416            mov     a,r2
09B4 9401      2417            subb    a,#0x01
09B6 EB        2418            mov     a,r3
09B7 9480      2419            subb    a,#0x80
09B9 EC        2420            mov     a,r4
09BA 94FF      2421            subb    a,#0xFF
09BC ED        2422            mov     a,r5
09BD 6480      2423            xrl     a,#0x80
09BF 947F      2424            subb    a,#0x7f
09C1 5000      2425            jnc     L014005?
09C3           2426   ;        sensor_test.c:474: retval = BMM150_NEGATIVE_SATURATION_Z;
09C3 90C520    2427            mov     dptr,#_BMM150_compensate_z_retval_1_111
09C6 7401      2428            mov     a,#0x01
09C8 F0        2429            movx    @dptr,a
09C9 A3        2430            inc     dptr
09CA 7480      2431            mov     a,#0x80
09CC F0        2432            movx    @dptr,a
09CD A3        2433            inc     dptr
09CE 74FF      2434            mov     a,#0xFF
09D0 F0        2435            movx    @dptr,a
09D1 A3        2436            inc     dptr
09D2 F0        2437            movx    @dptr,a
09D3           2438   L014005?:
09D3           2439   ;        sensor_test.c:478: retval = retval / 16;
09D3 90C520    2440            mov     dptr,#_BMM150_compensate_z_retval_1_111
09D6 E0        2441            movx    a,@dptr
09D7 FA        2442            mov     r2,a
09D8 A3        2443            inc     dptr
09D9 E0        2444            movx    a,@dptr
09DA FB        2445            mov     r3,a
09DB A3        2446            inc     dptr
09DC E0        2447            movx    a,@dptr
09DD FC        2448            mov     r4,a
09DE A3        2449            inc     dptr
09DF E0        2450            movx    a,@dptr
09E0 FD        2451            mov     r5,a
09E1 750010    2452            mov     __divslong_PARM_2,#0x10
09E4 E4        2453            clr     a
09E5 F501      2454            mov     (__divslong_PARM_2 + 1),a
09E7 F502      2455            mov     (__divslong_PARM_2 + 2),a
09E9 F503      2456            mov     (__divslong_PARM_2 + 3),a
09EB 8A82      2457            mov     dpl,r2
09ED 8B83      2458            mov     dph,r3
09EF 8CF0      2459            mov     b,r4
09F1 ED        2460            mov     a,r5
09F2 120000    2461            lcall   __divslong
09F5 AA82      2462            mov     r2,dpl
09F7 AB83      2463            mov     r3,dph
09F9 ACF0      2464            mov     r4,b
09FB FD        2465            mov     r5,a
09FC 90C520    2466            mov     dptr,#_BMM150_compensate_z_retval_1_111
09FF EA        2467            mov     a,r2
0A00 F0        2468            movx    @dptr,a
0A01 A3        2469            inc     dptr
0A02 EB        2470            mov     a,r3
0A03 F0        2471            movx    @dptr,a
0A04 A3        2472            inc     dptr
0A05 EC        2473            mov     a,r4
0A06 F0        2474            movx    @dptr,a
0A07 A3        2475            inc     dptr
0A08 ED        2476            mov     a,r5
0A09 F0        2477            movx    @dptr,a
0A0A 8000      2478            sjmp    L014014?
0A0C           2479   L014007?:
0A0C           2480   ;        sensor_test.c:482: retval = BMM150_OVERFLOW_OUTPUT;
0A0C 90C520    2481            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A0F E4        2482            clr     a
0A10 F0        2483            movx    @dptr,a
0A11 A3        2484            inc     dptr
0A12 7480      2485            mov     a,#0x80
0A14 F0        2486            movx    @dptr,a
0A15 A3        2487            inc     dptr
0A16 74FF      2488            mov     a,#0xFF
0A18 F0        2489            movx    @dptr,a
0A19 A3        2490            inc     dptr
0A1A F0        2491            movx    @dptr,a
0A1B 8000      2492            sjmp    L014014?
0A1D           2493   L014013?:
0A1D           2494   ;        sensor_test.c:488: retval = BMM150_OVERFLOW_OUTPUT;
0A1D 90C520    2495            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A20 E4        2496            clr     a
0A21 F0        2497            movx    @dptr,a
0A22 A3        2498            inc     dptr
0A23 7480      2499            mov     a,#0x80
0A25 F0        2500            movx    @dptr,a
0A26 A3        2501            inc     dptr
0A27 74FF      2502            mov     a,#0xFF
0A29 F0        2503            movx    @dptr,a
0A2A A3        2504            inc     dptr
0A2B F0        2505            movx    @dptr,a
0A2C           2506   L014014?:
0A2C           2507   ;        sensor_test.c:491: return (int16_t)retval;
0A2C 90C520    2508            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A2F E0        2509            movx    a,@dptr
0A30 FA        2510            mov     r2,a
0A31 A3        2511            inc     dptr
0A32 E0        2512            movx    a,@dptr
0A33 FB        2513            mov     r3,a
0A34 A3        2514            inc     dptr
0A35 E0        2515            movx    a,@dptr
0A36 A3        2516            inc     dptr
0A37 E0        2517            movx    a,@dptr
0A38 8A82      2518            mov     dpl,r2
0A3A 8B83      2519            mov     dph,r3
0A3C 22        2520            ret
0A3D           2521   ;------------------------------------------------------------
0A3D           2522   ;Allocation info for local variables in function 'BMM150_Read_Data'
0A3D           2523   ;------------------------------------------------------------
0A3D           2524   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
0A3D           2525   ;mag_z                     Allocated with name '_BMM150_Read_Data_PARM_3'
0A3D           2526   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_118'
0A3D           2527   ;raw_x_lsb                 Allocated to registers r5 
0A3D           2528   ;raw_x_msb                 Allocated with name '_BMM150_Read_Data_raw_x_msb_1_119'
0A3D           2529   ;raw_y_lsb                 Allocated to registers r7 
0A3D           2530   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_119'
0A3D           2531   ;raw_z_lsb                 Allocated to registers r1 
0A3D           2532   ;raw_z_msb                 Allocated with name '_BMM150_Read_Data_raw_z_msb_1_119'
0A3D           2533   ;raw_rhall_lsb             Allocated to registers r0 
0A3D           2534   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_119'
0A3D           2535   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_119'
0A3D           2536   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_119'
0A3D           2537   ;z_val                     Allocated with name '_BMM150_Read_Data_z_val_1_119'
0A3D           2538   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_119'
0A3D           2539   ;msb_data                  Allocated to registers r6 r2 
0A3D           2540   ;------------------------------------------------------------
0A3D           2541   ;        sensor_test.c:494: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y, int16_t *mag_z)
0A3D           2542   ;        -----------------------------------------
0A3D           2543   ;         function BMM150_Read_Data
0A3D           2544   ;        -----------------------------------------
0A3D           2545   _BMM150_Read_Data:
0A3D 8582D0    2546            mov     _BMM150_Read_Data_mag_x_1_118,dpl
0A40 8583D1    2547            mov     (_BMM150_Read_Data_mag_x_1_118 + 1),dph
0A43 85F0D2    2548            mov     (_BMM150_Read_Data_mag_x_1_118 + 2),b
0A46           2549   ;        sensor_test.c:500: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
0A46 758242    2550            mov     dpl,#0x42
0A49 120000    2551            lcall   _SPI_read
0A4C AD82      2552            mov     r5,dpl
0A4E           2553   ;        sensor_test.c:501: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
0A4E 758243    2554            mov     dpl,#0x43
0A51 C005      2555            push    ar5
0A53 120000    2556            lcall   _SPI_read
0A56 858230    2557            mov     _BMM150_Read_Data_raw_x_msb_1_119,dpl
0A59           2558   ;        sensor_test.c:502: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
0A59 758244    2559            mov     dpl,#0x44
0A5C 120000    2560            lcall   _SPI_read
0A5F AF82      2561            mov     r7,dpl
0A61           2562   ;        sensor_test.c:503: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
0A61 758245    2563            mov     dpl,#0x45
0A64 C007      2564            push    ar7
0A66 120000    2565            lcall   _SPI_read
0A69 858290    2566            mov     _BMM150_Read_Data_raw_y_msb_1_119,dpl
0A6C           2567   ;        sensor_test.c:505: raw_z_lsb = SPI_read(BMM150_DATA_Z_LSB);
0A6C 758246    2568            mov     dpl,#0x46
0A6F 120000    2569            lcall   _SPI_read
0A72 A982      2570            mov     r1,dpl
0A74           2571   ;        sensor_test.c:506: raw_z_msb = SPI_read(BMM150_DATA_Z_MSB);
0A74 758247    2572            mov     dpl,#0x47
0A77 C001      2573            push    ar1
0A79 120000    2574            lcall   _SPI_read
0A7C 8582F0    2575            mov     _BMM150_Read_Data_raw_z_msb_1_119,dpl
0A7F           2576   ;        sensor_test.c:509: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
0A7F 758248    2577            mov     dpl,#0x48
0A82 120000    2578            lcall   _SPI_read
0A85 A882      2579            mov     r0,dpl
0A87 D001      2580            pop     ar1
0A89           2581   ;        sensor_test.c:510: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
0A89 758249    2582            mov     dpl,#0x49
0A8C C000      2583            push    ar0
0A8E C001      2584            push    ar1
0A90 120000    2585            lcall   _SPI_read
0A93 858250    2586            mov     _BMM150_Read_Data_raw_rhall_msb_1_119,dpl
0A96 D001      2587            pop     ar1
0A98 D000      2588            pop     ar0
0A9A D007      2589            pop     ar7
0A9C D005      2590            pop     ar5
0A9E           2591   ;        sensor_test.c:521: raw_x_lsb = ((raw_x_lsb & 0b_1111_1000)) >> 3;
0A9E 74F8      2592            mov     a,#0xF8
0AA0 5D        2593            anl     a,r5
0AA1 C4        2594            swap    a
0AA2 23        2595            rl      a
0AA3 541F      2596            anl     a,#0x1f
0AA5 FD        2597            mov     r5,a
0AA6           2598   ;        sensor_test.c:522: msb_data = ((int16_t)((int8_t)raw_x_msb)) << 5; 
0AA6 E530      2599            mov     a,_BMM150_Read_Data_raw_x_msb_1_119
0AA8 FE        2600            mov     r6,a
0AA9 33        2601            rlc     a
0AAA 95E0      2602            subb    a,acc
0AAC C4        2603            swap    a
0AAD 23        2604            rl      a
0AAE 54E0      2605            anl     a,#0xe0
0AB0 CE        2606            xch     a,r6
0AB1 C4        2607            swap    a
0AB2 23        2608            rl      a
0AB3 CE        2609            xch     a,r6
0AB4 6E        2610            xrl     a,r6
0AB5 CE        2611            xch     a,r6
0AB6 54E0      2612            anl     a,#0xe0
0AB8 CE        2613            xch     a,r6
0AB9 6E        2614            xrl     a,r6
0ABA FA        2615            mov     r2,a
0ABB           2616   ;        sensor_test.c:523: x_val = (int16_t)(msb_data | raw_x_lsb);
0ABB 7B00      2617            mov     r3,#0x00
0ABD ED        2618            mov     a,r5
0ABE 4E        2619            orl     a,r6
0ABF F5A0      2620            mov     _BMM150_Read_Data_x_val_1_119,a
0AC1 EB        2621            mov     a,r3
0AC2 4A        2622            orl     a,r2
0AC3 F5A1      2623            mov     (_BMM150_Read_Data_x_val_1_119 + 1),a
0AC5           2624   ;        sensor_test.c:532: raw_y_lsb = ((raw_y_lsb & 0b_1111_1000)) >> 3;
0AC5 74F8      2625            mov     a,#0xF8
0AC7 5F        2626            anl     a,r7
0AC8 C4        2627            swap    a
0AC9 23        2628            rl      a
0ACA 541F      2629            anl     a,#0x1f
0ACC FF        2630            mov     r7,a
0ACD           2631   ;        sensor_test.c:533: msb_data = ((int16_t)((int8_t)raw_y_msb)) << 5; 
0ACD E590      2632            mov     a,_BMM150_Read_Data_raw_y_msb_1_119
0ACF FB        2633            mov     r3,a
0AD0 33        2634            rlc     a
0AD1 95E0      2635            subb    a,acc
0AD3 8B06      2636            mov     ar6,r3
0AD5 C4        2637            swap    a
0AD6 23        2638            rl      a
0AD7 54E0      2639            anl     a,#0xe0
0AD9 CE        2640            xch     a,r6
0ADA C4        2641            swap    a
0ADB 23        2642            rl      a
0ADC CE        2643            xch     a,r6
0ADD 6E        2644            xrl     a,r6
0ADE CE        2645            xch     a,r6
0ADF 54E0      2646            anl     a,#0xe0
0AE1 CE        2647            xch     a,r6
0AE2 6E        2648            xrl     a,r6
0AE3 FA        2649            mov     r2,a
0AE4           2650   ;        sensor_test.c:534: y_val = (int16_t)(msb_data | raw_y_lsb);
0AE4 7B00      2651            mov     r3,#0x00
0AE6 EF        2652            mov     a,r7
0AE7 4E        2653            orl     a,r6
0AE8 F5F0      2654            mov     _BMM150_Read_Data_y_val_1_119,a
0AEA EB        2655            mov     a,r3
0AEB 4A        2656            orl     a,r2
0AEC F5F1      2657            mov     (_BMM150_Read_Data_y_val_1_119 + 1),a
0AEE           2658   ;        sensor_test.c:544: raw_z_lsb = ((raw_z_lsb & 0xFE) >> 1);
0AEE 74FE      2659            mov     a,#0xFE
0AF0 59        2660            anl     a,r1
0AF1 C3        2661            clr     c
0AF2 13        2662            rrc     a
0AF3 F9        2663            mov     r1,a
0AF4           2664   ;        sensor_test.c:545: msb_data = ((int16_t)((int8_t)raw_z_msb)) >> 7; 
0AF4 E5F0      2665            mov     a,_BMM150_Read_Data_raw_z_msb_1_119
0AF6 FB        2666            mov     r3,a
0AF7 33        2667            rlc     a
0AF8 95E0      2668            subb    a,acc
0AFA FC        2669            mov     r4,a
0AFB 8B06      2670            mov     ar6,r3
0AFD A2E7      2671            mov     c,acc.7
0AFF CE        2672            xch     a,r6
0B00 33        2673            rlc     a
0B01 CE        2674            xch     a,r6
0B02 33        2675            rlc     a
0B03 CE        2676            xch     a,r6
0B04 5401      2677            anl     a,#0x01
0B06 30E040    2678            jnb     acc.0,L015003?
0B09 44FE      2679            orl     a,#0xfe
0B0B           2680   L015003?:
0B0B FA        2681            mov     r2,a
0B0C           2682   ;        sensor_test.c:546: z_val = (int16_t)(msb_data | raw_z_lsb);
0B0C 7B00      2683            mov     r3,#0x00
0B0E E9        2684            mov     a,r1
0B0F 4E        2685            orl     a,r6
0B10 F540      2686            mov     _BMM150_Read_Data_z_val_1_119,a
0B12 EB        2687            mov     a,r3
0B13 4A        2688            orl     a,r2
0B14 F541      2689            mov     (_BMM150_Read_Data_z_val_1_119 + 1),a
0B16           2690   ;        sensor_test.c:550: raw_rhall_lsb = ((raw_rhall_lsb & 0xFC) >> 2);
0B16 74FC      2691            mov     a,#0xFC
0B18 58        2692            anl     a,r0
0B19 03        2693            rr      a
0B1A 03        2694            rr      a
0B1B 543F      2695            anl     a,#0x3f
0B1D F8        2696            mov     r0,a
0B1E           2697   ;        sensor_test.c:551: rhall_val = (uint16_t)(((uint16_t)raw_rhall_msb << 6) | raw_rhall_lsb);
0B1E AE50      2698            mov     r6,_BMM150_Read_Data_raw_rhall_msb_1_119
0B20 E4        2699            clr     a
0B21 5403      2700            anl     a,#0x03
0B23 A2E0      2701            mov     c,acc.0
0B25 CE        2702            xch     a,r6
0B26 13        2703            rrc     a
0B27 CE        2704            xch     a,r6
0B28 13        2705            rrc     a
0B29 A2E0      2706            mov     c,acc.0
0B2B CE        2707            xch     a,r6
0B2C 13        2708            rrc     a
0B2D CE        2709            xch     a,r6
0B2E 13        2710            rrc     a
0B2F CE        2711            xch     a,r6
0B30 FA        2712            mov     r2,a
0B31 7B00      2713            mov     r3,#0x00
0B33 E8        2714            mov     a,r0
0B34 4E        2715            orl     a,r6
0B35 F5A0      2716            mov     _BMM150_Read_Data_rhall_val_1_119,a
0B37 EB        2717            mov     a,r3
0B38 4A        2718            orl     a,r2
0B39 F5A1      2719            mov     (_BMM150_Read_Data_rhall_val_1_119 + 1),a
0B3B           2720   ;        sensor_test.c:556: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
0B3B 7580A0    2721            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_119
0B3E 758100    2722            mov     (_BMM150_compensate_x_PARM_2 + 1),#0x00
0B41 758240    2723            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x40
0B44 90C0A0    2724            mov     dptr,#_BMM150_Read_Data_x_val_1_119
0B47 75F040    2725            mov     b,#0x40
0B4A 120000    2726            lcall   _BMM150_compensate_x
0B4D AA82      2727            mov     r2,dpl
0B4F AB83      2728            mov     r3,dph
0B51 85D082    2729            mov     dpl,_BMM150_Read_Data_mag_x_1_118
0B54 85D183    2730            mov     dph,(_BMM150_Read_Data_mag_x_1_118 + 1)
0B57 85D2F0    2731            mov     b,(_BMM150_Read_Data_mag_x_1_118 + 2)
0B5A EA        2732            mov     a,r2
0B5B 120000    2733            lcall   __gptrput
0B5E A3        2734            inc     dptr
0B5F EB        2735            mov     a,r3
0B60 120000    2736            lcall   __gptrput
0B63           2737   ;        sensor_test.c:557: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
0B63 AA90      2738            mov     r2,_BMM150_Read_Data_PARM_2
0B65 AB91      2739            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
0B67 AC92      2740            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
0B69 7530A0    2741            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_119
0B6C 753100    2742            mov     (_BMM150_compensate_y_PARM_2 + 1),#0x00
0B6F 753240    2743            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x40
0B72 90C0F0    2744            mov     dptr,#_BMM150_Read_Data_y_val_1_119
0B75 75F040    2745            mov     b,#0x40
0B78 C002      2746            push    ar2
0B7A C003      2747            push    ar3
0B7C C004      2748            push    ar4
0B7E 120000    2749            lcall   _BMM150_compensate_y
0B81 AD82      2750            mov     r5,dpl
0B83 AE83      2751            mov     r6,dph
0B85 D004      2752            pop     ar4
0B87 D003      2753            pop     ar3
0B89 D002      2754            pop     ar2
0B8B 8A82      2755            mov     dpl,r2
0B8D 8B83      2756            mov     dph,r3
0B8F 8CF0      2757            mov     b,r4
0B91 ED        2758            mov     a,r5
0B92 120000    2759            lcall   __gptrput
0B95 A3        2760            inc     dptr
0B96 EE        2761            mov     a,r6
0B97 120000    2762            lcall   __gptrput
0B9A           2763   ;        sensor_test.c:558: *mag_z = BMM150_compensate_z(&z_val, &rhall_val);
0B9A AA40      2764            mov     r2,_BMM150_Read_Data_PARM_3
0B9C AB41      2765            mov     r3,(_BMM150_Read_Data_PARM_3 + 1)
0B9E AC42      2766            mov     r4,(_BMM150_Read_Data_PARM_3 + 2)
0BA0 75E0A0    2767            mov     _BMM150_compensate_z_PARM_2,#_BMM150_Read_Data_rhall_val_1_119
0BA3 75E100    2768            mov     (_BMM150_compensate_z_PARM_2 + 1),#0x00
0BA6 75E240    2769            mov     (_BMM150_compensate_z_PARM_2 + 2),#0x40
0BA9 90C140    2770            mov     dptr,#_BMM150_Read_Data_z_val_1_119
0BAC 75F040    2771            mov     b,#0x40
0BAF C002      2772            push    ar2
0BB1 C003      2773            push    ar3
0BB3 C004      2774            push    ar4
0BB5 120000    2775            lcall   _BMM150_compensate_z
0BB8 AD82      2776            mov     r5,dpl
0BBA AE83      2777            mov     r6,dph
0BBC D004      2778            pop     ar4
0BBE D003      2779            pop     ar3
0BC0 D002      2780            pop     ar2
0BC2 8A82      2781            mov     dpl,r2
0BC4 8B83      2782            mov     dph,r3
0BC6 8CF0      2783            mov     b,r4
0BC8 ED        2784            mov     a,r5
0BC9 120000    2785            lcall   __gptrput
0BCC A3        2786            inc     dptr
0BCD EE        2787            mov     a,r6
0BCE 020000    2788            ljmp    __gptrput
0BD1           2789   ;------------------------------------------------------------
0BD1           2790   ;Allocation info for local variables in function 'main'
0BD1           2791   ;------------------------------------------------------------
0BD1           2792   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0BD1           2793   ;sloc1                     Allocated with name '_main_sloc1_1_0'
0BD1           2794   ;i                         Allocated with name '_main_i_1_121'
0BD1           2795   ;mag_x                     Allocated with name '_main_mag_x_1_121'
0BD1           2796   ;mag_y                     Allocated with name '_main_mag_y_1_121'
0BD1           2797   ;mag_z                     Allocated with name '_main_mag_z_1_121'
0BD1           2798   ;sum_x                     Allocated with name '_main_sum_x_1_121'
0BD1           2799   ;sum_y                     Allocated with name '_main_sum_y_1_121'
0BD1           2800   ;alpha                     Allocated with name '_main_alpha_1_121'
0BD1           2801   ;avg_angle                 Allocated with name '_main_avg_angle_1_121'
0BD1           2802   ;smoothed_angle            Allocated with name '_main_smoothed_angle_1_121'
0BD1           2803   ;cal_x                     Allocated with name '_main_cal_x_1_121'
0BD1           2804   ;cal_y                     Allocated with name '_main_cal_y_1_121'
0BD1           2805   ;declination_angle         Allocated with name '_main_declination_angle_1_121'
0BD1           2806   ;x_scale                   Allocated with name '_main_x_scale_1_121'
0BD1           2807   ;y_scale                   Allocated with name '_main_y_scale_1_121'
0BD1           2808   ;------------------------------------------------------------
0BD1           2809   ;        sensor_test.c:564: void main (void)
0BD1           2810   ;        -----------------------------------------
0BD1           2811   ;         function main
0BD1           2812   ;        -----------------------------------------
0BD1           2813   _main:
0BD1           2814   ;        sensor_test.c:575: mag_x = 0; mag_y = 0; mag_z = 0; 
0BD1 90C570    2815            mov     dptr,#_main_mag_x_1_121
0BD4 E4        2816            clr     a
0BD5 F0        2817            movx    @dptr,a
0BD6 A3        2818            inc     dptr
0BD7 F0        2819            movx    @dptr,a
0BD8 90C5C0    2820            mov     dptr,#_main_mag_y_1_121
0BDB E4        2821            clr     a
0BDC F0        2822            movx    @dptr,a
0BDD A3        2823            inc     dptr
0BDE F0        2824            movx    @dptr,a
0BDF 90C610    2825            mov     dptr,#_main_mag_z_1_121
0BE2 E4        2826            clr     a
0BE3 F0        2827            movx    @dptr,a
0BE4 A3        2828            inc     dptr
0BE5 F0        2829            movx    @dptr,a
0BE6           2830   ;        sensor_test.c:582: smoothed_angle = 0.0; 
0BE6 90C750    2831            mov     dptr,#_main_smoothed_angle_1_121
0BE9 E4        2832            clr     a
0BEA F0        2833            movx    @dptr,a
0BEB A3        2834            inc     dptr
0BEC F0        2835            movx    @dptr,a
0BED A3        2836            inc     dptr
0BEE F0        2837            movx    @dptr,a
0BEF A3        2838            inc     dptr
0BF0 F0        2839            movx    @dptr,a
0BF1           2840   ;        sensor_test.c:584: Set_Pin_Output(0x03); 
0BF1 758203    2841            mov     dpl,#0x03
0BF4 120000    2842            lcall   _Set_Pin_Output
0BF7           2843   ;        sensor_test.c:585: BMM150_Init();
0BF7 120000    2844            lcall   _BMM150_Init
0BFA           2845   ;        sensor_test.c:587: waitms(500);
0BFA 9001F4    2846            mov     dptr,#0x01F4
0BFD 120000    2847            lcall   _waitms
0C00           2848   ;        sensor_test.c:588: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0C00 7480      2849            mov     a,#__str_3
0C02 C0E0      2850            push    acc
0C04 74DB      2851            mov     a,#(__str_3 >> 8)
0C06 C0E0      2852            push    acc
0C08 7480      2853            mov     a,#0x80
0C0A C0E0      2854            push    acc
0C0C 120000    2855            lcall   _printf
0C0F 1581      2856            dec     sp
0C11 1581      2857            dec     sp
0C13 1581      2858            dec     sp
0C15           2859   ;        sensor_test.c:592: __FILE__, __DATE__, __TIME__);
0C15           2860   ;        sensor_test.c:591: "Compiled: %s, %s\n\n",
0C15 74C0      2861            mov     a,#__str_7
0C17 C0E0      2862            push    acc
0C19 74DB      2863            mov     a,#(__str_7 >> 8)
0C1B C0E0      2864            push    acc
0C1D 7480      2865            mov     a,#0x80
0C1F C0E0      2866            push    acc
0C21 7400      2867            mov     a,#__str_6
0C23 C0E0      2868            push    acc
0C25 74DC      2869            mov     a,#(__str_6 >> 8)
0C27 C0E0      2870            push    acc
0C29 7480      2871            mov     a,#0x80
0C2B C0E0      2872            push    acc
0C2D 7440      2873            mov     a,#__str_5
0C2F C0E0      2874            push    acc
0C31 74DC      2875            mov     a,#(__str_5 >> 8)
0C33 C0E0      2876            push    acc
0C35 7480      2877            mov     a,#0x80
0C37 C0E0      2878            push    acc
0C39 7480      2879            mov     a,#__str_4
0C3B C0E0      2880            push    acc
0C3D 74DC      2881            mov     a,#(__str_4 >> 8)
0C3F C0E0      2882            push    acc
0C41 7480      2883            mov     a,#0x80
0C43 C0E0      2884            push    acc
0C45 120000    2885            lcall   _printf
0C48 E581      2886            mov     a,sp
0C4A 24F4      2887            add     a,#0xf4
0C4C F581      2888            mov     sp,a
0C4E           2889   ;        sensor_test.c:594: while(1)
0C4E           2890   L016006?:
0C4E           2891   ;        sensor_test.c:596: sum_x = 0.0; 
0C4E 90C660    2892            mov     dptr,#_main_sum_x_1_121
0C51           2893   ;        sensor_test.c:597: sum_y = 0.0;  
0C51 E4        2894            clr     a
0C52 F0        2895            movx    @dptr,a
0C53 A3        2896            inc     dptr
0C54 F0        2897            movx    @dptr,a
0C55 A3        2898            inc     dptr
0C56 F0        2899            movx    @dptr,a
0C57 A3        2900            inc     dptr
0C58 F0        2901            movx    @dptr,a
0C59 90C6B0    2902            mov     dptr,#_main_sum_y_1_121
0C5C F0        2903            movx    @dptr,a
0C5D A3        2904            inc     dptr
0C5E E4        2905            clr     a
0C5F F0        2906            movx    @dptr,a
0C60 A3        2907            inc     dptr
0C61 F0        2908            movx    @dptr,a
0C62 A3        2909            inc     dptr
0C63 F0        2910            movx    @dptr,a
0C64           2911   ;        sensor_test.c:598: for (i = 0; i < 25; i++){
0C64 7A00      2912            mov     r2,#0x00
0C66           2913   L016008?:
0C66 BA1940    2914            cjne    r2,#0x19,L016020?
0C69           2915   L016020?:
0C69 4000      2916            jc      L016021?
0C6B 020000    2917            ljmp    L016011?
0C6E           2918   L016021?:
0C6E           2919   ;        sensor_test.c:599: BMM150_Read_Data(&mag_x, &mag_y, &mag_z);
0C6E 7590C0    2920            mov     _BMM150_Read_Data_PARM_2,#_main_mag_y_1_121
0C71 7591C5    2921            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_main_mag_y_1_121 >> 8)
0C74 759200    2922            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
0C77 754010    2923            mov     _BMM150_Read_Data_PARM_3,#_main_mag_z_1_121
0C7A 7541C6    2924            mov     (_BMM150_Read_Data_PARM_3 + 1),#(_main_mag_z_1_121 >> 8)
0C7D 754200    2925            mov     (_BMM150_Read_Data_PARM_3 + 2),#0x00
0C80 90C570    2926            mov     dptr,#_main_mag_x_1_121
0C83 75F000    2927            mov     b,#0x00
0C86 C002      2928            push    ar2
0C88 120000    2929            lcall   _BMM150_Read_Data
0C8B           2930   ;        sensor_test.c:602: sum_x += (float)mag_x; 
0C8B 90C570    2931            mov     dptr,#_main_mag_x_1_121
0C8E E0        2932            movx    a,@dptr
0C8F FB        2933            mov     r3,a
0C90 A3        2934            inc     dptr
0C91 E0        2935            movx    a,@dptr
0C92 FC        2936            mov     r4,a
0C93 8B82      2937            mov     dpl,r3
0C95 8C83      2938            mov     dph,r4
0C97 120000    2939            lcall   ___sint2fs
0C9A 8582E0    2940            mov     _main_sloc0_1_0,dpl
0C9D 8583E1    2941            mov     (_main_sloc0_1_0 + 1),dph
0CA0 85F0E2    2942            mov     (_main_sloc0_1_0 + 2),b
0CA3 F5E3      2943            mov     (_main_sloc0_1_0 + 3),a
0CA5 90C660    2944            mov     dptr,#_main_sum_x_1_121
0CA8 E0        2945            movx    a,@dptr
0CA9 FF        2946            mov     r7,a
0CAA A3        2947            inc     dptr
0CAB E0        2948            movx    a,@dptr
0CAC F8        2949            mov     r0,a
0CAD A3        2950            inc     dptr
0CAE E0        2951            movx    a,@dptr
0CAF F9        2952            mov     r1,a
0CB0 A3        2953            inc     dptr
0CB1 E0        2954            movx    a,@dptr
0CB2 FB        2955            mov     r3,a
0CB3 C0E0      2956            push    _main_sloc0_1_0
0CB5 C0E1      2957            push    (_main_sloc0_1_0 + 1)
0CB7 C0E2      2958            push    (_main_sloc0_1_0 + 2)
0CB9 C0E3      2959            push    (_main_sloc0_1_0 + 3)
0CBB 8F82      2960            mov     dpl,r7
0CBD 8883      2961            mov     dph,r0
0CBF 89F0      2962            mov     b,r1
0CC1 EB        2963            mov     a,r3
0CC2 120000    2964            lcall   ___fsadd
0CC5 AB82      2965            mov     r3,dpl
0CC7 AC83      2966            mov     r4,dph
0CC9 ADF0      2967            mov     r5,b
0CCB FE        2968            mov     r6,a
0CCC E581      2969            mov     a,sp
0CCE 24FC      2970            add     a,#0xfc
0CD0 F581      2971            mov     sp,a
0CD2 90C660    2972            mov     dptr,#_main_sum_x_1_121
0CD5 EB        2973            mov     a,r3
0CD6 F0        2974            movx    @dptr,a
0CD7 A3        2975            inc     dptr
0CD8 EC        2976            mov     a,r4
0CD9 F0        2977            movx    @dptr,a
0CDA A3        2978            inc     dptr
0CDB ED        2979            mov     a,r5
0CDC F0        2980            movx    @dptr,a
0CDD A3        2981            inc     dptr
0CDE EE        2982            mov     a,r6
0CDF F0        2983            movx    @dptr,a
0CE0           2984   ;        sensor_test.c:603: sum_y += (float)mag_y; 
0CE0 90C5C0    2985            mov     dptr,#_main_mag_y_1_121
0CE3 E0        2986            movx    a,@dptr
0CE4 FB        2987            mov     r3,a
0CE5 A3        2988            inc     dptr
0CE6 E0        2989            movx    a,@dptr
0CE7 FC        2990            mov     r4,a
0CE8 8B82      2991            mov     dpl,r3
0CEA 8C83      2992            mov     dph,r4
0CEC 120000    2993            lcall   ___sint2fs
0CEF 8582E0    2994            mov     _main_sloc0_1_0,dpl
0CF2 8583E1    2995            mov     (_main_sloc0_1_0 + 1),dph
0CF5 85F0E2    2996            mov     (_main_sloc0_1_0 + 2),b
0CF8 F5E3      2997            mov     (_main_sloc0_1_0 + 3),a
0CFA 90C6B0    2998            mov     dptr,#_main_sum_y_1_121
0CFD E0        2999            movx    a,@dptr
0CFE FF        3000            mov     r7,a
0CFF A3        3001            inc     dptr
0D00 E0        3002            movx    a,@dptr
0D01 F8        3003            mov     r0,a
0D02 A3        3004            inc     dptr
0D03 E0        3005            movx    a,@dptr
0D04 F9        3006            mov     r1,a
0D05 A3        3007            inc     dptr
0D06 E0        3008            movx    a,@dptr
0D07 FB        3009            mov     r3,a
0D08 C0E0      3010            push    _main_sloc0_1_0
0D0A C0E1      3011            push    (_main_sloc0_1_0 + 1)
0D0C C0E2      3012            push    (_main_sloc0_1_0 + 2)
0D0E C0E3      3013            push    (_main_sloc0_1_0 + 3)
0D10 8F82      3014            mov     dpl,r7
0D12 8883      3015            mov     dph,r0
0D14 89F0      3016            mov     b,r1
0D16 EB        3017            mov     a,r3
0D17 120000    3018            lcall   ___fsadd
0D1A AB82      3019            mov     r3,dpl
0D1C AC83      3020            mov     r4,dph
0D1E ADF0      3021            mov     r5,b
0D20 FE        3022            mov     r6,a
0D21 E581      3023            mov     a,sp
0D23 24FC      3024            add     a,#0xfc
0D25 F581      3025            mov     sp,a
0D27 D002      3026            pop     ar2
0D29 90C6B0    3027            mov     dptr,#_main_sum_y_1_121
0D2C EB        3028            mov     a,r3
0D2D F0        3029            movx    @dptr,a
0D2E A3        3030            inc     dptr
0D2F EC        3031            mov     a,r4
0D30 F0        3032            movx    @dptr,a
0D31 A3        3033            inc     dptr
0D32 ED        3034            mov     a,r5
0D33 F0        3035            movx    @dptr,a
0D34 A3        3036            inc     dptr
0D35 EE        3037            mov     a,r6
0D36 F0        3038            movx    @dptr,a
0D37           3039   ;        sensor_test.c:598: for (i = 0; i < 25; i++){
0D37 0A        3040            inc     r2
0D38 020000    3041            ljmp    L016008?
0D3B           3042   L016011?:
0D3B           3043   ;        sensor_test.c:606: avg_angle = atan2f(sum_y/25.0, sum_x/25.0); 
0D3B 90C6B0    3044            mov     dptr,#_main_sum_y_1_121
0D3E E0        3045            movx    a,@dptr
0D3F FA        3046            mov     r2,a
0D40 A3        3047            inc     dptr
0D41 E0        3048            movx    a,@dptr
0D42 FB        3049            mov     r3,a
0D43 A3        3050            inc     dptr
0D44 E0        3051            movx    a,@dptr
0D45 FC        3052            mov     r4,a
0D46 A3        3053            inc     dptr
0D47 E0        3054            movx    a,@dptr
0D48 FD        3055            mov     r5,a
0D49 E4        3056            clr     a
0D4A C0E0      3057            push    acc
0D4C C0E0      3058            push    acc
0D4E 74C8      3059            mov     a,#0xC8
0D50 C0E0      3060            push    acc
0D52 7441      3061            mov     a,#0x41
0D54 C0E0      3062            push    acc
0D56 8A82      3063            mov     dpl,r2
0D58 8B83      3064            mov     dph,r3
0D5A 8CF0      3065            mov     b,r4
0D5C ED        3066            mov     a,r5
0D5D 120000    3067            lcall   ___fsdiv
0D60 858220    3068            mov     _main_sloc1_1_0,dpl
0D63 858321    3069            mov     (_main_sloc1_1_0 + 1),dph
0D66 85F022    3070            mov     (_main_sloc1_1_0 + 2),b
0D69 F523      3071            mov     (_main_sloc1_1_0 + 3),a
0D6B E581      3072            mov     a,sp
0D6D 24FC      3073            add     a,#0xfc
0D6F F581      3074            mov     sp,a
0D71 90C660    3075            mov     dptr,#_main_sum_x_1_121
0D74 E0        3076            movx    a,@dptr
0D75 FE        3077            mov     r6,a
0D76 A3        3078            inc     dptr
0D77 E0        3079            movx    a,@dptr
0D78 FF        3080            mov     r7,a
0D79 A3        3081            inc     dptr
0D7A E0        3082            movx    a,@dptr
0D7B F8        3083            mov     r0,a
0D7C A3        3084            inc     dptr
0D7D E0        3085            movx    a,@dptr
0D7E F9        3086            mov     r1,a
0D7F E4        3087            clr     a
0D80 C0E0      3088            push    acc
0D82 C0E0      3089            push    acc
0D84 74C8      3090            mov     a,#0xC8
0D86 C0E0      3091            push    acc
0D88 7441      3092            mov     a,#0x41
0D8A C0E0      3093            push    acc
0D8C 8E82      3094            mov     dpl,r6
0D8E 8F83      3095            mov     dph,r7
0D90 88F0      3096            mov     b,r0
0D92 E9        3097            mov     a,r1
0D93 120000    3098            lcall   ___fsdiv
0D96 8582E0    3099            mov     _main_sloc0_1_0,dpl
0D99 8583E1    3100            mov     (_main_sloc0_1_0 + 1),dph
0D9C 85F0E2    3101            mov     (_main_sloc0_1_0 + 2),b
0D9F F5E3      3102            mov     (_main_sloc0_1_0 + 3),a
0DA1 E581      3103            mov     a,sp
0DA3 24FC      3104            add     a,#0xfc
0DA5 F581      3105            mov     sp,a
0DA7 85E000    3106            mov     _atan2f_PARM_2,_main_sloc0_1_0
0DAA 85E101    3107            mov     (_atan2f_PARM_2 + 1),(_main_sloc0_1_0 + 1)
0DAD 85E202    3108            mov     (_atan2f_PARM_2 + 2),(_main_sloc0_1_0 + 2)
0DB0 85E303    3109            mov     (_atan2f_PARM_2 + 3),(_main_sloc0_1_0 + 3)
0DB3 852082    3110            mov     dpl,_main_sloc1_1_0
0DB6 852183    3111            mov     dph,(_main_sloc1_1_0 + 1)
0DB9 8522F0    3112            mov     b,(_main_sloc1_1_0 + 2)
0DBC E523      3113            mov     a,(_main_sloc1_1_0 + 3)
0DBE 120000    3114            lcall   _atan2f
0DC1 AE82      3115            mov     r6,dpl
0DC3 AF83      3116            mov     r7,dph
0DC5 A8F0      3117            mov     r0,b
0DC7 F9        3118            mov     r1,a
0DC8           3119   ;        sensor_test.c:607: avg_angle *= 180.0 / M_PI; 
0DC8 C006      3120            push    ar6
0DCA C007      3121            push    ar7
0DCC C000      3122            push    ar0
0DCE C001      3123            push    ar1
0DD0 902EE1    3124            mov     dptr,#0x2EE1
0DD3 75F065    3125            mov     b,#0x65
0DD6 7442      3126            mov     a,#0x42
0DD8 120000    3127            lcall   ___fsmul
0DDB AE82      3128            mov     r6,dpl
0DDD AF83      3129            mov     r7,dph
0DDF A8F0      3130            mov     r0,b
0DE1 F9        3131            mov     r1,a
0DE2 E581      3132            mov     a,sp
0DE4 24FC      3133            add     a,#0xfc
0DE6 F581      3134            mov     sp,a
0DE8 90C700    3135            mov     dptr,#_main_avg_angle_1_121
0DEB EE        3136            mov     a,r6
0DEC F0        3137            movx    @dptr,a
0DED A3        3138            inc     dptr
0DEE EF        3139            mov     a,r7
0DEF F0        3140            movx    @dptr,a
0DF0 A3        3141            inc     dptr
0DF1 E8        3142            mov     a,r0
0DF2 F0        3143            movx    @dptr,a
0DF3 A3        3144            inc     dptr
0DF4 E9        3145            mov     a,r1
0DF5 F0        3146            movx    @dptr,a
0DF6           3147   ;        sensor_test.c:610: if (avg_angle < 0.0) avg_angle += 360.0; 
0DF6 C006      3148            push    ar6
0DF8 C007      3149            push    ar7
0DFA C000      3150            push    ar0
0DFC C001      3151            push    ar1
0DFE E4        3152            clr     a
0DFF C0E0      3153            push    acc
0E01 C0E0      3154            push    acc
0E03 C0E0      3155            push    acc
0E05 C0E0      3156            push    acc
0E07 8E82      3157            mov     dpl,r6
0E09 8F83      3158            mov     dph,r7
0E0B 88F0      3159            mov     b,r0
0E0D E9        3160            mov     a,r1
0E0E 120000    3161            lcall   ___fslt
0E11 AA82      3162            mov     r2,dpl
0E13 E581      3163            mov     a,sp
0E15 24FC      3164            add     a,#0xfc
0E17 F581      3165            mov     sp,a
0E19 D001      3166            pop     ar1
0E1B D000      3167            pop     ar0
0E1D D007      3168            pop     ar7
0E1F D006      3169            pop     ar6
0E21 EA        3170            mov     a,r2
0E22 6000      3171            jz      L016002?
0E24 E4        3172            clr     a
0E25 C0E0      3173            push    acc
0E27 C0E0      3174            push    acc
0E29 74B4      3175            mov     a,#0xB4
0E2B C0E0      3176            push    acc
0E2D 7443      3177            mov     a,#0x43
0E2F C0E0      3178            push    acc
0E31 8E82      3179            mov     dpl,r6
0E33 8F83      3180            mov     dph,r7
0E35 88F0      3181            mov     b,r0
0E37 E9        3182            mov     a,r1
0E38 120000    3183            lcall   ___fsadd
0E3B AA82      3184            mov     r2,dpl
0E3D AB83      3185            mov     r3,dph
0E3F ACF0      3186            mov     r4,b
0E41 FD        3187            mov     r5,a
0E42 E581      3188            mov     a,sp
0E44 24FC      3189            add     a,#0xfc
0E46 F581      3190            mov     sp,a
0E48 90C700    3191            mov     dptr,#_main_avg_angle_1_121
0E4B EA        3192            mov     a,r2
0E4C F0        3193            movx    @dptr,a
0E4D A3        3194            inc     dptr
0E4E EB        3195            mov     a,r3
0E4F F0        3196            movx    @dptr,a
0E50 A3        3197            inc     dptr
0E51 EC        3198            mov     a,r4
0E52 F0        3199            movx    @dptr,a
0E53 A3        3200            inc     dptr
0E54 ED        3201            mov     a,r5
0E55 F0        3202            movx    @dptr,a
0E56           3203   L016002?:
0E56           3204   ;        sensor_test.c:611: if (avg_angle > 360.0) avg_angle -= 360.0; 
0E56 90C700    3205            mov     dptr,#_main_avg_angle_1_121
0E59 E0        3206            movx    a,@dptr
0E5A FA        3207            mov     r2,a
0E5B A3        3208            inc     dptr
0E5C E0        3209            movx    a,@dptr
0E5D FB        3210            mov     r3,a
0E5E A3        3211            inc     dptr
0E5F E0        3212            movx    a,@dptr
0E60 FC        3213            mov     r4,a
0E61 A3        3214            inc     dptr
0E62 E0        3215            movx    a,@dptr
0E63 FD        3216            mov     r5,a
0E64 C002      3217            push    ar2
0E66 C003      3218            push    ar3
0E68 C004      3219            push    ar4
0E6A C005      3220            push    ar5
0E6C E4        3221            clr     a
0E6D C0E0      3222            push    acc
0E6F C0E0      3223            push    acc
0E71 74B4      3224            mov     a,#0xB4
0E73 C0E0      3225            push    acc
0E75 7443      3226            mov     a,#0x43
0E77 C0E0      3227            push    acc
0E79 8A82      3228            mov     dpl,r2
0E7B 8B83      3229            mov     dph,r3
0E7D 8CF0      3230            mov     b,r4
0E7F ED        3231            mov     a,r5
0E80 120000    3232            lcall   ___fsgt
0E83 AE82      3233            mov     r6,dpl
0E85 E581      3234            mov     a,sp
0E87 24FC      3235            add     a,#0xfc
0E89 F581      3236            mov     sp,a
0E8B D005      3237            pop     ar5
0E8D D004      3238            pop     ar4
0E8F D003      3239            pop     ar3
0E91 D002      3240            pop     ar2
0E93 EE        3241            mov     a,r6
0E94 6000      3242            jz      L016004?
0E96 E4        3243            clr     a
0E97 C0E0      3244            push    acc
0E99 C0E0      3245            push    acc
0E9B 74B4      3246            mov     a,#0xB4
0E9D C0E0      3247            push    acc
0E9F 7443      3248            mov     a,#0x43
0EA1 C0E0      3249            push    acc
0EA3 8A82      3250            mov     dpl,r2
0EA5 8B83      3251            mov     dph,r3
0EA7 8CF0      3252            mov     b,r4
0EA9 ED        3253            mov     a,r5
0EAA 120000    3254            lcall   ___fssub
0EAD AA82      3255            mov     r2,dpl
0EAF AB83      3256            mov     r3,dph
0EB1 ACF0      3257            mov     r4,b
0EB3 FD        3258            mov     r5,a
0EB4 E581      3259            mov     a,sp
0EB6 24FC      3260            add     a,#0xfc
0EB8 F581      3261            mov     sp,a
0EBA 90C700    3262            mov     dptr,#_main_avg_angle_1_121
0EBD EA        3263            mov     a,r2
0EBE F0        3264            movx    @dptr,a
0EBF A3        3265            inc     dptr
0EC0 EB        3266            mov     a,r3
0EC1 F0        3267            movx    @dptr,a
0EC2 A3        3268            inc     dptr
0EC3 EC        3269            mov     a,r4
0EC4 F0        3270            movx    @dptr,a
0EC5 A3        3271            inc     dptr
0EC6 ED        3272            mov     a,r5
0EC7 F0        3273            movx    @dptr,a
0EC8           3274   L016004?:
0EC8           3275   ;        sensor_test.c:612: smoothed_angle = alpha * avg_angle + (1-alpha) * smoothed_angle; 
0EC8 90C700    3276            mov     dptr,#_main_avg_angle_1_121
0ECB E0        3277            movx    a,@dptr
0ECC C0E0      3278            push    acc
0ECE A3        3279            inc     dptr
0ECF E0        3280            movx    a,@dptr
0ED0 C0E0      3281            push    acc
0ED2 A3        3282            inc     dptr
0ED3 E0        3283            movx    a,@dptr
0ED4 C0E0      3284            push    acc
0ED6 A3        3285            inc     dptr
0ED7 E0        3286            movx    a,@dptr
0ED8 C0E0      3287            push    acc
0EDA 900000    3288            mov     dptr,#0x0000
0EDD 75F080    3289            mov     b,#0x80
0EE0 743E      3290            mov     a,#0x3E
0EE2 120000    3291            lcall   ___fsmul
0EE5 AA82      3292            mov     r2,dpl
0EE7 AB83      3293            mov     r3,dph
0EE9 ACF0      3294            mov     r4,b
0EEB FD        3295            mov     r5,a
0EEC E581      3296            mov     a,sp
0EEE 24FC      3297            add     a,#0xfc
0EF0 F581      3298            mov     sp,a
0EF2 C002      3299            push    ar2
0EF4 C003      3300            push    ar3
0EF6 C004      3301            push    ar4
0EF8 C005      3302            push    ar5
0EFA 90C750    3303            mov     dptr,#_main_smoothed_angle_1_121
0EFD E0        3304            movx    a,@dptr
0EFE C0E0      3305            push    acc
0F00 A3        3306            inc     dptr
0F01 E0        3307            movx    a,@dptr
0F02 C0E0      3308            push    acc
0F04 A3        3309            inc     dptr
0F05 E0        3310            movx    a,@dptr
0F06 C0E0      3311            push    acc
0F08 A3        3312            inc     dptr
0F09 E0        3313            movx    a,@dptr
0F0A C0E0      3314            push    acc
0F0C 900000    3315            mov     dptr,#0x0000
0F0F 75F040    3316            mov     b,#0x40
0F12 743F      3317            mov     a,#0x3F
0F14 120000    3318            lcall   ___fsmul
0F17 AE82      3319            mov     r6,dpl
0F19 AF83      3320            mov     r7,dph
0F1B A8F0      3321            mov     r0,b
0F1D F9        3322            mov     r1,a
0F1E E581      3323            mov     a,sp
0F20 24FC      3324            add     a,#0xfc
0F22 F581      3325            mov     sp,a
0F24 D005      3326            pop     ar5
0F26 D004      3327            pop     ar4
0F28 D003      3328            pop     ar3
0F2A D002      3329            pop     ar2
0F2C C006      3330            push    ar6
0F2E C007      3331            push    ar7
0F30 C000      3332            push    ar0
0F32 C001      3333            push    ar1
0F34 8A82      3334            mov     dpl,r2
0F36 8B83      3335            mov     dph,r3
0F38 8CF0      3336            mov     b,r4
0F3A ED        3337            mov     a,r5
0F3B 120000    3338            lcall   ___fsadd
0F3E AA82      3339            mov     r2,dpl
0F40 AB83      3340            mov     r3,dph
0F42 ACF0      3341            mov     r4,b
0F44 FD        3342            mov     r5,a
0F45 E581      3343            mov     a,sp
0F47 24FC      3344            add     a,#0xfc
0F49 F581      3345            mov     sp,a
0F4B 90C750    3346            mov     dptr,#_main_smoothed_angle_1_121
0F4E EA        3347            mov     a,r2
0F4F F0        3348            movx    @dptr,a
0F50 A3        3349            inc     dptr
0F51 EB        3350            mov     a,r3
0F52 F0        3351            movx    @dptr,a
0F53 A3        3352            inc     dptr
0F54 EC        3353            mov     a,r4
0F55 F0        3354            movx    @dptr,a
0F56 A3        3355            inc     dptr
0F57 ED        3356            mov     a,r5
0F58 F0        3357            movx    @dptr,a
0F59           3358   ;        sensor_test.c:614: printf("%f, %f, %f\r\n", sum_x/25.0, sum_y/25.0, smoothed_angle);
0F59 90C750    3359            mov     dptr,#_main_smoothed_angle_1_121
0F5C E0        3360            movx    a,@dptr
0F5D C0E0      3361            push    acc
0F5F A3        3362            inc     dptr
0F60 E0        3363            movx    a,@dptr
0F61 C0E0      3364            push    acc
0F63 A3        3365            inc     dptr
0F64 E0        3366            movx    a,@dptr
0F65 C0E0      3367            push    acc
0F67 A3        3368            inc     dptr
0F68 E0        3369            movx    a,@dptr
0F69 C0E0      3370            push    acc
0F6B C020      3371            push    _main_sloc1_1_0
0F6D C021      3372            push    (_main_sloc1_1_0 + 1)
0F6F C022      3373            push    (_main_sloc1_1_0 + 2)
0F71 C023      3374            push    (_main_sloc1_1_0 + 3)
0F73 C0E0      3375            push    _main_sloc0_1_0
0F75 C0E1      3376            push    (_main_sloc0_1_0 + 1)
0F77 C0E2      3377            push    (_main_sloc0_1_0 + 2)
0F79 C0E3      3378            push    (_main_sloc0_1_0 + 3)
0F7B 74C0      3379            mov     a,#__str_8
0F7D C0E0      3380            push    acc
0F7F 74E0      3381            mov     a,#(__str_8 >> 8)
0F81 C0E0      3382            push    acc
0F83 7480      3383            mov     a,#0x80
0F85 C0E0      3384            push    acc
0F87 120000    3385            lcall   _printf
0F8A E581      3386            mov     a,sp
0F8C 24F1      3387            add     a,#0xf1
0F8E F581      3388            mov     sp,a
0F90           3389   ;        sensor_test.c:619: waitms(10);
0F90 90000A    3390            mov     dptr,#0x000A
0F93 120000    3391            lcall   _waitms
0F96 020000    3392            ljmp    L016006?
0F99           3393            rseg R_CSEG
0F99           3394   
0000           3395            rseg R_XINIT
0000           3396   
0000           3397            rseg R_CONST
0000           3398   __str_0:
0000 4572726F  3399            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
0035 0D        3400            db 0x0D
0036 0A        3401            db 0x0A
0037 00        3402            db 0x00
0038           3403   __str_1:
0038 50726573  3404            db 'Press restart to check again!'
     73207265
     73746172
     7420746F
     20636865
     636B2061
     6761696E
     21
0055 0D        3405            db 0x0D
0056 00        3406            db 0x00
0057           3407   __str_2:
0057 424D4D31  3408            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
0087 0D        3409            db 0x0D
0088 0A        3410            db 0x0A
0089 00        3411            db 0x00
008A           3412   __str_3:
008A 1B        3413            db 0x1B
008B 5B324A    3414            db '[2J'
008E 00        3415            db 0x00
008F           3416   __str_4:
008F 45464D38  3417            db 'EFM8LB1 SPI/BMM150 test program'
     4C423120
     5350492F
     424D4D31
     35302074
     65737420
     70726F67
     72616D
00AE 0A        3418            db 0x0A
00AF 46696C65  3419            db 'File: %s'
     3A202573
00B7 0A        3420            db 0x0A
00B8 436F6D70  3421            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
00C8 0A        3422            db 0x0A
00C9 0A        3423            db 0x0A
00CA 00        3424            db 0x00
00CB           3425   __str_5:
00CB 73656E73  3426            db 'sensor_test.c'
     6F725F74
     6573742E
     63
00D8 00        3427            db 0x00
00D9           3428   __str_6:
00D9 4D617220  3429            db 'Mar 27 2025'
     32372032
     303235
00E4 00        3430            db 0x00
00E5           3431   __str_7:
00E5 31353A32  3432            db '15:20:42'
     303A3432
00ED 00        3433            db 0x00
00EE           3434   __str_8:
00EE 25662C20  3435            db '%f, %f, %f'
     25662C20
     2566
00F8 0D        3436            db 0x0D
00F9 0A        3437            db 0x0A
00FA 00        3438            db 0x00
00FB           3439   
0003           3440            CSEG
0003           3441   
0003           3442   end
