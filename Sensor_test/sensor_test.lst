0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Sat Mar 22 15:47:02 2025
0000              5   ;--------------------------------------------------------
                  5   $name sensor_test
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _bmm150_interface_selection
0000             28            public _bmm150_error_codes_print_result
0000             29            public _bmm150_spi_write
0000             30            public _bmm150_spi_read
0000             31            public _spi_transfer
0000             32            public _waitms
0000             33            public _ptr_delay_us
0000             34            public _Timer3us
0000             35            public _Set_Pin_Output
0000             36            public __c51_external_startup
0000             37            public _bmm150_interface_selection_PARM_2
0000             38            public _bmm150_error_codes_print_result_PARM_2
0000             39   ;--------------------------------------------------------
0000             40   ; Special Function Registers
0000             41   ;--------------------------------------------------------
0000             42   _ACC            DATA 0xe0
0000             43   _ADC0ASAH       DATA 0xb6
0000             44   _ADC0ASAL       DATA 0xb5
0000             45   _ADC0ASCF       DATA 0xa1
0000             46   _ADC0ASCT       DATA 0xc7
0000             47   _ADC0CF0        DATA 0xbc
0000             48   _ADC0CF1        DATA 0xb9
0000             49   _ADC0CF2        DATA 0xdf
0000             50   _ADC0CN0        DATA 0xe8
0000             51   _ADC0CN1        DATA 0xb2
0000             52   _ADC0CN2        DATA 0xb3
0000             53   _ADC0GTH        DATA 0xc4
0000             54   _ADC0GTL        DATA 0xc3
0000             55   _ADC0H          DATA 0xbe
0000             56   _ADC0L          DATA 0xbd
0000             57   _ADC0LTH        DATA 0xc6
0000             58   _ADC0LTL        DATA 0xc5
0000             59   _ADC0MX         DATA 0xbb
0000             60   _B              DATA 0xf0
0000             61   _CKCON0         DATA 0x8e
0000             62   _CKCON1         DATA 0xa6
0000             63   _CLEN0          DATA 0xc6
0000             64   _CLIE0          DATA 0xc7
0000             65   _CLIF0          DATA 0xe8
0000             66   _CLKSEL         DATA 0xa9
0000             67   _CLOUT0         DATA 0xd1
0000             68   _CLU0CF         DATA 0xb1
0000             69   _CLU0FN         DATA 0xaf
0000             70   _CLU0MX         DATA 0x84
0000             71   _CLU1CF         DATA 0xb3
0000             72   _CLU1FN         DATA 0xb2
0000             73   _CLU1MX         DATA 0x85
0000             74   _CLU2CF         DATA 0xb6
0000             75   _CLU2FN         DATA 0xb5
0000             76   _CLU2MX         DATA 0x91
0000             77   _CLU3CF         DATA 0xbf
0000             78   _CLU3FN         DATA 0xbe
0000             79   _CLU3MX         DATA 0xae
0000             80   _CMP0CN0        DATA 0x9b
0000             81   _CMP0CN1        DATA 0x99
0000             82   _CMP0MD         DATA 0x9d
0000             83   _CMP0MX         DATA 0x9f
0000             84   _CMP1CN0        DATA 0xbf
0000             85   _CMP1CN1        DATA 0xac
0000             86   _CMP1MD         DATA 0xab
0000             87   _CMP1MX         DATA 0xaa
0000             88   _CRC0CN0        DATA 0xce
0000             89   _CRC0CN1        DATA 0x86
0000             90   _CRC0CNT        DATA 0xd3
0000             91   _CRC0DAT        DATA 0xcb
0000             92   _CRC0FLIP       DATA 0xcf
0000             93   _CRC0IN         DATA 0xca
0000             94   _CRC0ST         DATA 0xd2
0000             95   _DAC0CF0        DATA 0x91
0000             96   _DAC0CF1        DATA 0x92
0000             97   _DAC0H          DATA 0x85
0000             98   _DAC0L          DATA 0x84
0000             99   _DAC1CF0        DATA 0x93
0000            100   _DAC1CF1        DATA 0x94
0000            101   _DAC1H          DATA 0x8a
0000            102   _DAC1L          DATA 0x89
0000            103   _DAC2CF0        DATA 0x95
0000            104   _DAC2CF1        DATA 0x96
0000            105   _DAC2H          DATA 0x8c
0000            106   _DAC2L          DATA 0x8b
0000            107   _DAC3CF0        DATA 0x9a
0000            108   _DAC3CF1        DATA 0x9c
0000            109   _DAC3H          DATA 0x8e
0000            110   _DAC3L          DATA 0x8d
0000            111   _DACGCF0        DATA 0x88
0000            112   _DACGCF1        DATA 0x98
0000            113   _DACGCF2        DATA 0xa2
0000            114   _DERIVID        DATA 0xad
0000            115   _DEVICEID       DATA 0xb5
0000            116   _DPH            DATA 0x83
0000            117   _DPL            DATA 0x82
0000            118   _EIE1           DATA 0xe6
0000            119   _EIE2           DATA 0xf3
0000            120   _EIP1           DATA 0xbb
0000            121   _EIP1H          DATA 0xee
0000            122   _EIP2           DATA 0xed
0000            123   _EIP2H          DATA 0xf6
0000            124   _EMI0CN         DATA 0xe7
0000            125   _FLKEY          DATA 0xb7
0000            126   _HFO0CAL        DATA 0xc7
0000            127   _HFO1CAL        DATA 0xd6
0000            128   _HFOCN          DATA 0xef
0000            129   _I2C0ADM        DATA 0xff
0000            130   _I2C0CN0        DATA 0xba
0000            131   _I2C0DIN        DATA 0xbc
0000            132   _I2C0DOUT       DATA 0xbb
0000            133   _I2C0FCN0       DATA 0xad
0000            134   _I2C0FCN1       DATA 0xab
0000            135   _I2C0FCT        DATA 0xf5
0000            136   _I2C0SLAD       DATA 0xbd
0000            137   _I2C0STAT       DATA 0xb9
0000            138   _IE             DATA 0xa8
0000            139   _IP             DATA 0xb8
0000            140   _IPH            DATA 0xf2
0000            141   _IT01CF         DATA 0xe4
0000            142   _LFO0CN         DATA 0xb1
0000            143   _P0             DATA 0x80
0000            144   _P0MASK         DATA 0xfe
0000            145   _P0MAT          DATA 0xfd
0000            146   _P0MDIN         DATA 0xf1
0000            147   _P0MDOUT        DATA 0xa4
0000            148   _P0SKIP         DATA 0xd4
0000            149   _P1             DATA 0x90
0000            150   _P1MASK         DATA 0xee
0000            151   _P1MAT          DATA 0xed
0000            152   _P1MDIN         DATA 0xf2
0000            153   _P1MDOUT        DATA 0xa5
0000            154   _P1SKIP         DATA 0xd5
0000            155   _P2             DATA 0xa0
0000            156   _P2MASK         DATA 0xfc
0000            157   _P2MAT          DATA 0xfb
0000            158   _P2MDIN         DATA 0xf3
0000            159   _P2MDOUT        DATA 0xa6
0000            160   _P2SKIP         DATA 0xcc
0000            161   _P3             DATA 0xb0
0000            162   _P3MDIN         DATA 0xf4
0000            163   _P3MDOUT        DATA 0x9c
0000            164   _PCA0CENT       DATA 0x9e
0000            165   _PCA0CLR        DATA 0x9c
0000            166   _PCA0CN0        DATA 0xd8
0000            167   _PCA0CPH0       DATA 0xfc
0000            168   _PCA0CPH1       DATA 0xea
0000            169   _PCA0CPH2       DATA 0xec
0000            170   _PCA0CPH3       DATA 0xf5
0000            171   _PCA0CPH4       DATA 0x85
0000            172   _PCA0CPH5       DATA 0xde
0000            173   _PCA0CPL0       DATA 0xfb
0000            174   _PCA0CPL1       DATA 0xe9
0000            175   _PCA0CPL2       DATA 0xeb
0000            176   _PCA0CPL3       DATA 0xf4
0000            177   _PCA0CPL4       DATA 0x84
0000            178   _PCA0CPL5       DATA 0xdd
0000            179   _PCA0CPM0       DATA 0xda
0000            180   _PCA0CPM1       DATA 0xdb
0000            181   _PCA0CPM2       DATA 0xdc
0000            182   _PCA0CPM3       DATA 0xae
0000            183   _PCA0CPM4       DATA 0xaf
0000            184   _PCA0CPM5       DATA 0xcc
0000            185   _PCA0H          DATA 0xfa
0000            186   _PCA0L          DATA 0xf9
0000            187   _PCA0MD         DATA 0xd9
0000            188   _PCA0POL        DATA 0x96
0000            189   _PCA0PWM        DATA 0xf7
0000            190   _PCON0          DATA 0x87
0000            191   _PCON1          DATA 0xcd
0000            192   _PFE0CN         DATA 0xc1
0000            193   _PRTDRV         DATA 0xf6
0000            194   _PSCTL          DATA 0x8f
0000            195   _PSTAT0         DATA 0xaa
0000            196   _PSW            DATA 0xd0
0000            197   _REF0CN         DATA 0xd1
0000            198   _REG0CN         DATA 0xc9
0000            199   _REVID          DATA 0xb6
0000            200   _RSTSRC         DATA 0xef
0000            201   _SBCON1         DATA 0x94
0000            202   _SBRLH1         DATA 0x96
0000            203   _SBRLL1         DATA 0x95
0000            204   _SBUF           DATA 0x99
0000            205   _SBUF0          DATA 0x99
0000            206   _SBUF1          DATA 0x92
0000            207   _SCON           DATA 0x98
0000            208   _SCON0          DATA 0x98
0000            209   _SCON1          DATA 0xc8
0000            210   _SFRPAGE        DATA 0xa7
0000            211   _SFRPGCN        DATA 0xbc
0000            212   _SFRSTACK       DATA 0xd7
0000            213   _SMB0ADM        DATA 0xd6
0000            214   _SMB0ADR        DATA 0xd7
0000            215   _SMB0CF         DATA 0xc1
0000            216   _SMB0CN0        DATA 0xc0
0000            217   _SMB0DAT        DATA 0xc2
0000            218   _SMB0FCN0       DATA 0xc3
0000            219   _SMB0FCN1       DATA 0xc4
0000            220   _SMB0FCT        DATA 0xef
0000            221   _SMB0RXLN       DATA 0xc5
0000            222   _SMB0TC         DATA 0xac
0000            223   _SMOD1          DATA 0x93
0000            224   _SP             DATA 0x81
0000            225   _SPI0CFG        DATA 0xa1
0000            226   _SPI0CKR        DATA 0xa2
0000            227   _SPI0CN0        DATA 0xf8
0000            228   _SPI0DAT        DATA 0xa3
0000            229   _SPI0FCN0       DATA 0x9a
0000            230   _SPI0FCN1       DATA 0x9b
0000            231   _SPI0FCT        DATA 0xf7
0000            232   _SPI0PCF        DATA 0xdf
0000            233   _TCON           DATA 0x88
0000            234   _TH0            DATA 0x8c
0000            235   _TH1            DATA 0x8d
0000            236   _TL0            DATA 0x8a
0000            237   _TL1            DATA 0x8b
0000            238   _TMOD           DATA 0x89
0000            239   _TMR2CN0        DATA 0xc8
0000            240   _TMR2CN1        DATA 0xfd
0000            241   _TMR2H          DATA 0xcf
0000            242   _TMR2L          DATA 0xce
0000            243   _TMR2RLH        DATA 0xcb
0000            244   _TMR2RLL        DATA 0xca
0000            245   _TMR3CN0        DATA 0x91
0000            246   _TMR3CN1        DATA 0xfe
0000            247   _TMR3H          DATA 0x95
0000            248   _TMR3L          DATA 0x94
0000            249   _TMR3RLH        DATA 0x93
0000            250   _TMR3RLL        DATA 0x92
0000            251   _TMR4CN0        DATA 0x98
0000            252   _TMR4CN1        DATA 0xff
0000            253   _TMR4H          DATA 0xa5
0000            254   _TMR4L          DATA 0xa4
0000            255   _TMR4RLH        DATA 0xa3
0000            256   _TMR4RLL        DATA 0xa2
0000            257   _TMR5CN0        DATA 0xc0
0000            258   _TMR5CN1        DATA 0xf1
0000            259   _TMR5H          DATA 0xd5
0000            260   _TMR5L          DATA 0xd4
0000            261   _TMR5RLH        DATA 0xd3
0000            262   _TMR5RLL        DATA 0xd2
0000            263   _UART0PCF       DATA 0xd9
0000            264   _UART1FCN0      DATA 0x9d
0000            265   _UART1FCN1      DATA 0xd8
0000            266   _UART1FCT       DATA 0xfa
0000            267   _UART1LIN       DATA 0x9e
0000            268   _UART1PCF       DATA 0xda
0000            269   _VDM0CN         DATA 0xff
0000            270   _WDTCN          DATA 0x97
0000            271   _XBR0           DATA 0xe1
0000            272   _XBR1           DATA 0xe2
0000            273   _XBR2           DATA 0xe3
0000            274   _XOSC0CN        DATA 0x86
0000            275   _DPTR           DATA 0x8382
0000            276   _TMR2RL         DATA 0xcbca
0000            277   _TMR3RL         DATA 0x9392
0000            278   _TMR4RL         DATA 0xa3a2
0000            279   _TMR5RL         DATA 0xd3d2
0000            280   _TMR0           DATA 0x8c8a
0000            281   _TMR1           DATA 0x8d8b
0000            282   _TMR2           DATA 0xcfce
0000            283   _TMR3           DATA 0x9594
0000            284   _TMR4           DATA 0xa5a4
0000            285   _TMR5           DATA 0xd5d4
0000            286   _SBRL1          DATA 0x9695
0000            287   _PCA0           DATA 0xfaf9
0000            288   _PCA0CP0        DATA 0xfcfb
0000            289   _PCA0CP1        DATA 0xeae9
0000            290   _PCA0CP2        DATA 0xeceb
0000            291   _PCA0CP3        DATA 0xf5f4
0000            292   _PCA0CP4        DATA 0x8584
0000            293   _PCA0CP5        DATA 0xdedd
0000            294   _ADC0ASA        DATA 0xb6b5
0000            295   _ADC0GT         DATA 0xc4c3
0000            296   _ADC0           DATA 0xbebd
0000            297   _ADC0LT         DATA 0xc6c5
0000            298   _DAC0           DATA 0x8584
0000            299   _DAC1           DATA 0x8a89
0000            300   _DAC2           DATA 0x8c8b
0000            301   _DAC3           DATA 0x8e8d
0000            302   ;--------------------------------------------------------
0000            303   ; special function bits
0000            304   ;--------------------------------------------------------
0000            305   _ACC_0          BIT 0xe0
0000            306   _ACC_1          BIT 0xe1
0000            307   _ACC_2          BIT 0xe2
0000            308   _ACC_3          BIT 0xe3
0000            309   _ACC_4          BIT 0xe4
0000            310   _ACC_5          BIT 0xe5
0000            311   _ACC_6          BIT 0xe6
0000            312   _ACC_7          BIT 0xe7
0000            313   _TEMPE          BIT 0xe8
0000            314   _ADGN0          BIT 0xe9
0000            315   _ADGN1          BIT 0xea
0000            316   _ADWINT         BIT 0xeb
0000            317   _ADBUSY         BIT 0xec
0000            318   _ADINT          BIT 0xed
0000            319   _IPOEN          BIT 0xee
0000            320   _ADEN           BIT 0xef
0000            321   _B_0            BIT 0xf0
0000            322   _B_1            BIT 0xf1
0000            323   _B_2            BIT 0xf2
0000            324   _B_3            BIT 0xf3
0000            325   _B_4            BIT 0xf4
0000            326   _B_5            BIT 0xf5
0000            327   _B_6            BIT 0xf6
0000            328   _B_7            BIT 0xf7
0000            329   _C0FIF          BIT 0xe8
0000            330   _C0RIF          BIT 0xe9
0000            331   _C1FIF          BIT 0xea
0000            332   _C1RIF          BIT 0xeb
0000            333   _C2FIF          BIT 0xec
0000            334   _C2RIF          BIT 0xed
0000            335   _C3FIF          BIT 0xee
0000            336   _C3RIF          BIT 0xef
0000            337   _D1SRC0         BIT 0x88
0000            338   _D1SRC1         BIT 0x89
0000            339   _D1AMEN         BIT 0x8a
0000            340   _D01REFSL       BIT 0x8b
0000            341   _D3SRC0         BIT 0x8c
0000            342   _D3SRC1         BIT 0x8d
0000            343   _D3AMEN         BIT 0x8e
0000            344   _D23REFSL       BIT 0x8f
0000            345   _D0UDIS         BIT 0x98
0000            346   _D1UDIS         BIT 0x99
0000            347   _D2UDIS         BIT 0x9a
0000            348   _D3UDIS         BIT 0x9b
0000            349   _EX0            BIT 0xa8
0000            350   _ET0            BIT 0xa9
0000            351   _EX1            BIT 0xaa
0000            352   _ET1            BIT 0xab
0000            353   _ES0            BIT 0xac
0000            354   _ET2            BIT 0xad
0000            355   _ESPI0          BIT 0xae
0000            356   _EA             BIT 0xaf
0000            357   _PX0            BIT 0xb8
0000            358   _PT0            BIT 0xb9
0000            359   _PX1            BIT 0xba
0000            360   _PT1            BIT 0xbb
0000            361   _PS0            BIT 0xbc
0000            362   _PT2            BIT 0xbd
0000            363   _PSPI0          BIT 0xbe
0000            364   _P0_0           BIT 0x80
0000            365   _P0_1           BIT 0x81
0000            366   _P0_2           BIT 0x82
0000            367   _P0_3           BIT 0x83
0000            368   _P0_4           BIT 0x84
0000            369   _P0_5           BIT 0x85
0000            370   _P0_6           BIT 0x86
0000            371   _P0_7           BIT 0x87
0000            372   _P1_0           BIT 0x90
0000            373   _P1_1           BIT 0x91
0000            374   _P1_2           BIT 0x92
0000            375   _P1_3           BIT 0x93
0000            376   _P1_4           BIT 0x94
0000            377   _P1_5           BIT 0x95
0000            378   _P1_6           BIT 0x96
0000            379   _P1_7           BIT 0x97
0000            380   _P2_0           BIT 0xa0
0000            381   _P2_1           BIT 0xa1
0000            382   _P2_2           BIT 0xa2
0000            383   _P2_3           BIT 0xa3
0000            384   _P2_4           BIT 0xa4
0000            385   _P2_5           BIT 0xa5
0000            386   _P2_6           BIT 0xa6
0000            387   _P3_0           BIT 0xb0
0000            388   _P3_1           BIT 0xb1
0000            389   _P3_2           BIT 0xb2
0000            390   _P3_3           BIT 0xb3
0000            391   _P3_4           BIT 0xb4
0000            392   _P3_7           BIT 0xb7
0000            393   _CCF0           BIT 0xd8
0000            394   _CCF1           BIT 0xd9
0000            395   _CCF2           BIT 0xda
0000            396   _CCF3           BIT 0xdb
0000            397   _CCF4           BIT 0xdc
0000            398   _CCF5           BIT 0xdd
0000            399   _CR             BIT 0xde
0000            400   _CF             BIT 0xdf
0000            401   _PARITY         BIT 0xd0
0000            402   _F1             BIT 0xd1
0000            403   _OV             BIT 0xd2
0000            404   _RS0            BIT 0xd3
0000            405   _RS1            BIT 0xd4
0000            406   _F0             BIT 0xd5
0000            407   _AC             BIT 0xd6
0000            408   _CY             BIT 0xd7
0000            409   _RI             BIT 0x98
0000            410   _TI             BIT 0x99
0000            411   _RB8            BIT 0x9a
0000            412   _TB8            BIT 0x9b
0000            413   _REN            BIT 0x9c
0000            414   _CE             BIT 0x9d
0000            415   _SMODE          BIT 0x9e
0000            416   _RI1            BIT 0xc8
0000            417   _TI1            BIT 0xc9
0000            418   _RBX1           BIT 0xca
0000            419   _TBX1           BIT 0xcb
0000            420   _REN1           BIT 0xcc
0000            421   _PERR1          BIT 0xcd
0000            422   _OVR1           BIT 0xce
0000            423   _SI             BIT 0xc0
0000            424   _ACK            BIT 0xc1
0000            425   _ARBLOST        BIT 0xc2
0000            426   _ACKRQ          BIT 0xc3
0000            427   _STO            BIT 0xc4
0000            428   _STA            BIT 0xc5
0000            429   _TXMODE         BIT 0xc6
0000            430   _MASTER         BIT 0xc7
0000            431   _SPIEN          BIT 0xf8
0000            432   _TXNF           BIT 0xf9
0000            433   _NSSMD0         BIT 0xfa
0000            434   _NSSMD1         BIT 0xfb
0000            435   _RXOVRN         BIT 0xfc
0000            436   _MODF           BIT 0xfd
0000            437   _WCOL           BIT 0xfe
0000            438   _SPIF           BIT 0xff
0000            439   _IT0            BIT 0x88
0000            440   _IE0            BIT 0x89
0000            441   _IT1            BIT 0x8a
0000            442   _IE1            BIT 0x8b
0000            443   _TR0            BIT 0x8c
0000            444   _TF0            BIT 0x8d
0000            445   _TR1            BIT 0x8e
0000            446   _TF1            BIT 0x8f
0000            447   _T2XCLK0        BIT 0xc8
0000            448   _T2XCLK1        BIT 0xc9
0000            449   _TR2            BIT 0xca
0000            450   _T2SPLIT        BIT 0xcb
0000            451   _TF2CEN         BIT 0xcc
0000            452   _TF2LEN         BIT 0xcd
0000            453   _TF2L           BIT 0xce
0000            454   _TF2H           BIT 0xcf
0000            455   _T4XCLK0        BIT 0x98
0000            456   _T4XCLK1        BIT 0x99
0000            457   _TR4            BIT 0x9a
0000            458   _T4SPLIT        BIT 0x9b
0000            459   _TF4CEN         BIT 0x9c
0000            460   _TF4LEN         BIT 0x9d
0000            461   _TF4L           BIT 0x9e
0000            462   _TF4H           BIT 0x9f
0000            463   _T5XCLK0        BIT 0xc0
0000            464   _T5XCLK1        BIT 0xc1
0000            465   _TR5            BIT 0xc2
0000            466   _T5SPLIT        BIT 0xc3
0000            467   _TF5CEN         BIT 0xc4
0000            468   _TF5LEN         BIT 0xc5
0000            469   _TF5L           BIT 0xc6
0000            470   _TF5H           BIT 0xc7
0000            471   _RIE            BIT 0xd8
0000            472   _RXTO0          BIT 0xd9
0000            473   _RXTO1          BIT 0xda
0000            474   _RFRQ           BIT 0xdb
0000            475   _TIE            BIT 0xdc
0000            476   _TXHOLD         BIT 0xdd
0000            477   _TXNF1          BIT 0xde
0000            478   _TFRQ           BIT 0xdf
0000            479   ;--------------------------------------------------------
0000            480   ; overlayable register banks
0000            481   ;--------------------------------------------------------
0000            482            rbank0 segment data overlay
0000            483   ;--------------------------------------------------------
0000            484   ; internal ram data
0000            485   ;--------------------------------------------------------
0000            486            rseg R_DSEG
0000            487   _bmm150_error_codes_print_result_PARM_2:
0000            488            ds 1
0001            489   _bmm150_interface_selection_PARM_2:
0001            490            ds 1
0002            491   _get_data_dev_1_92:
0002            492            ds 2
0004            493   ;--------------------------------------------------------
0004            494   ; overlayable items in internal ram 
0004            495   ;--------------------------------------------------------
0000            496            rseg    R_OSEG
0000            497            rseg    R_OSEG
0000            498            rseg    R_OSEG
0000            499   ;--------------------------------------------------------
0000            500   ; indirectly addressable internal ram data
0000            501   ;--------------------------------------------------------
0000            502            rseg R_ISEG
0000            503   ;--------------------------------------------------------
0000            504   ; absolute internal ram data
0000            505   ;--------------------------------------------------------
0000            506            DSEG
0000            507   ;--------------------------------------------------------
0000            508   ; bit data
0000            509   ;--------------------------------------------------------
0000            510            rseg R_BSEG
0000            511   ;--------------------------------------------------------
0000            512   ; paged external ram data
0000            513   ;--------------------------------------------------------
0000            514            rseg R_PSEG
0000            515   ;--------------------------------------------------------
0000            516   ; external ram data
0000            517   ;--------------------------------------------------------
0000            518            rseg R_XSEG
0000            519   _bmm150_interface_selection_rslt_1_84:
0000            520            ds 1
0001            521   _set_config_rslt_1_90:
0001            522            ds 1
0002            523   _set_config_settings_1_90:
0002            524            ds 5
0007            525   _get_data_rslt_1_93:
0007            526            ds 1
0008            527   _get_data_mag_data_1_93:
0008            528            ds 4
000C            529   _main_dev_1_97:
000C            530            ds 21
0021            531   ;--------------------------------------------------------
0021            532   ; absolute external ram data
0021            533   ;--------------------------------------------------------
0000            534            XSEG
0000            535   ;--------------------------------------------------------
0000            536   ; external initialized ram data
0000            537   ;--------------------------------------------------------
0000            538            rseg R_IXSEG
0000            539            rseg R_HOME
0000            540            rseg R_GSINIT
0000            541            rseg R_CSEG
0000            542   ;--------------------------------------------------------
0000            543   ; Reset entry point and interrupt vectors
0000            544   ;--------------------------------------------------------
0000            545            CSEG at 0x0000
0000 020000     546            ljmp    _crt0
0003            547   ;--------------------------------------------------------
0003            548   ; global & static initialisations
0003            549   ;--------------------------------------------------------
0000            550            rseg R_HOME
0000            551            rseg R_GSINIT
0000            552            rseg R_GSINIT
0000            553   ;--------------------------------------------------------
0000            554   ; data variables initialization
0000            555   ;--------------------------------------------------------
0000            556            rseg R_DINIT
0000            557            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            558   ;--------------------------------------------------------
0000            559   ; code
0000            560   ;--------------------------------------------------------
0000            561            rseg R_CSEG
0000            562   ;------------------------------------------------------------
0000            563   ;Allocation info for local variables in function '_c51_external_startup'
0000            564   ;------------------------------------------------------------
0000            565   ;------------------------------------------------------------
0000            566   ;        sensor_test.c:38: char _c51_external_startup (void)
0000            567   ;        -----------------------------------------
0000            568   ;         function _c51_external_startup
0000            569   ;        -----------------------------------------
0000            570   __c51_external_startup:
0000            571            using   0
0000            572   ;        sensor_test.c:41: SFRPAGE = 0x00;
0000 75A700     573            mov     _SFRPAGE,#0x00
0003            574   ;        sensor_test.c:42: WDTCN = 0xDE; //First key
0003 7597DE     575            mov     _WDTCN,#0xDE
0006            576   ;        sensor_test.c:43: WDTCN = 0xAD; //Second key
0006 7597AD     577            mov     _WDTCN,#0xAD
0009            578   ;        sensor_test.c:45: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     579            mov     _VDM0CN,#0x80
000C            580   ;        sensor_test.c:46: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     581            mov     _RSTSRC,#0x06
000F            582   ;        sensor_test.c:53: SFRPAGE = 0x10;
000F 75A710     583            mov     _SFRPAGE,#0x10
0012            584   ;        sensor_test.c:54: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     585            mov     _PFE0CN,#0x20
0015            586   ;        sensor_test.c:55: SFRPAGE = 0x00;
0015 75A700     587            mov     _SFRPAGE,#0x00
0018            588   ;        sensor_test.c:76: CLKSEL = 0x00;
0018 75A900     589            mov     _CLKSEL,#0x00
001B            590   ;        sensor_test.c:77: CLKSEL = 0x00;
001B 75A900     591            mov     _CLKSEL,#0x00
001E            592   ;        sensor_test.c:78: while ((CLKSEL & 0x80) == 0);
001E            593   L002001?:
001E E5A9       594            mov     a,_CLKSEL
0020 30E758     595            jnb     acc.7,L002001?
0023            596   ;        sensor_test.c:79: CLKSEL = 0x03;
0023 75A903     597            mov     _CLKSEL,#0x03
0026            598   ;        sensor_test.c:80: CLKSEL = 0x03;
0026 75A903     599            mov     _CLKSEL,#0x03
0029            600   ;        sensor_test.c:81: while ((CLKSEL & 0x80) == 0);
0029            601   L002004?:
0029 E5A9       602            mov     a,_CLKSEL
002B 30E7D8     603            jnb     acc.7,L002004?
002E            604   ;        sensor_test.c:86: P0MDOUT |= 0xE0;
002E 43A4E0     605            orl     _P0MDOUT,#0xE0
0031            606   ;        sensor_test.c:87: P1MDOUT |= 0x01; 
0031 43A501     607            orl     _P1MDOUT,#0x01
0034            608   ;        sensor_test.c:88: XBR0=0b_0000_0011; //SPI0E=1, URT0E=1
0034 75E103     609            mov     _XBR0,#0x03
0037            610   ;        sensor_test.c:89: XBR1=0b_0000_0000;
0037 75E200     611            mov     _XBR1,#0x00
003A            612   ;        sensor_test.c:90: XBR2=0b_0100_0000; // Enable crossbar and weak pull-ups
003A 75E340     613            mov     _XBR2,#0x40
003D            614   ;        sensor_test.c:96: SCON0 = 0x10;
003D 759810     615            mov     _SCON0,#0x10
0040            616   ;        sensor_test.c:97: TH1 = 0x100-((SYSCLK/BAUDRATE)/(12L*2L));
0040 758DE6     617            mov     _TH1,#0xE6
0043            618   ;        sensor_test.c:98: TL1 = TH1;      // Init Timer1
0043 858D8B     619            mov     _TL1,_TH1
0046            620   ;        sensor_test.c:99: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     621            anl     _TMOD,#0x0F
0049            622   ;        sensor_test.c:100: TMOD |=  0x20;                       
0049 438920     623            orl     _TMOD,#0x20
004C            624   ;        sensor_test.c:101: TR1 = 1; // START Timer1
004C D28E       625            setb    _TR1
004E            626   ;        sensor_test.c:102: TI = 1;  // Indicate TX0 ready
004E D299       627            setb    _TI
0050            628   ;        sensor_test.c:105: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
0050 75A223     629            mov     _SPI0CKR,#0x23
0053            630   ;        sensor_test.c:106: SPI0CFG = 0b_0100_0000; //SPI in master mode
0053 75A140     631            mov     _SPI0CFG,#0x40
0056            632   ;        sensor_test.c:107: SPI0CN0 = 0b_0000_0001; //SPI enabled and in three wire mode
0056 75F801     633            mov     _SPI0CN0,#0x01
0059            634   ;        sensor_test.c:110: P0MDOUT &= ~(1<<4); // set P0.4 as open drain input 
0059 53A4EF     635            anl     _P0MDOUT,#0xEF
005C            636   ;        sensor_test.c:111: P0 |= (1<<4); //enable pull up resistor on P0.4 
005C 438010     637            orl     _P0,#0x10
005F            638   ;        sensor_test.c:112: EIE2 |= 0x02; 
005F 43F302     639            orl     _EIE2,#0x02
0062            640   ;        sensor_test.c:114: return 0;
0062 758200     641            mov     dpl,#0x00
0065 22         642            ret
0066            643   ;------------------------------------------------------------
0066            644   ;Allocation info for local variables in function 'Set_Pin_Output'
0066            645   ;------------------------------------------------------------
0066            646   ;mask                      Allocated with name '_Set_Pin_Output_mask_1_58'
0066            647   ;pin                       Allocated to registers r2 
0066            648   ;------------------------------------------------------------
0066            649   ;        sensor_test.c:117: void Set_Pin_Output (unsigned char pin)
0066            650   ;        -----------------------------------------
0066            651   ;         function Set_Pin_Output
0066            652   ;        -----------------------------------------
0066            653   _Set_Pin_Output:
0066 AA82       654            mov     r2,dpl
0068            655   ;        sensor_test.c:121: mask=(1<<(pin&0x7));
0068 7407       656            mov     a,#0x07
006A 5A         657            anl     a,r2
006B F5F0       658            mov     b,a
006D 05F0       659            inc     b
006F 7401       660            mov     a,#0x01
0071 8000       661            sjmp    L003011?
0073            662   L003009?:
0073 25E0       663            add     a,acc
0075            664   L003011?:
0075 D5F0D8     665            djnz    b,L003009?
0078 FB         666            mov     r3,a
0079            667   ;        sensor_test.c:122: switch(pin/0x10)
0079 EA         668            mov     a,r2
007A C4         669            swap    a
007B 540F       670            anl     a,#0x0f
007D FA         671            mov  r2,a
007E 24FC       672            add     a,#0xff - 0x03
0080 4000       673            jc      L003006?
0082 EA         674            mov     a,r2
0083 2A         675            add     a,r2
0084 2A         676            add     a,r2
0085 90B858     677            mov     dptr,#L003013?
0088 73         678            jmp     @a+dptr
0089            679   L003013?:
0089 020000     680            ljmp    L003001?
008C 020000     681            ljmp    L003002?
008F 020000     682            ljmp    L003003?
0092 020000     683            ljmp    L003004?
0095            684   ;        sensor_test.c:124: case 0: P0MDOUT |= mask; break;
0095            685   L003001?:
0095 EB         686            mov     a,r3
0096 42A4       687            orl     _P0MDOUT,a
0098            688   ;        sensor_test.c:125: case 1: P1MDOUT |= mask; break;
0098 22         689            ret
0099            690   L003002?:
0099 EB         691            mov     a,r3
009A 42A5       692            orl     _P1MDOUT,a
009C            693   ;        sensor_test.c:126: case 2: P2MDOUT |= mask; break; 
009C 22         694            ret
009D            695   L003003?:
009D EB         696            mov     a,r3
009E 42A6       697            orl     _P2MDOUT,a
00A0            698   ;        sensor_test.c:127: case 3: P3MDOUT |= mask; break; 
00A0 22         699            ret
00A1            700   L003004?:
00A1 EB         701            mov     a,r3
00A2 429C       702            orl     _P3MDOUT,a
00A4            703   ;        sensor_test.c:128: }    
00A4            704   L003006?:
00A4 22         705            ret
00A5            706   ;------------------------------------------------------------
00A5            707   ;Allocation info for local variables in function 'Timer3us'
00A5            708   ;------------------------------------------------------------
00A5            709   ;i                         Allocated with name '_Timer3us_i_1_61'
00A5            710   ;us                        Allocated to registers r2 
00A5            711   ;------------------------------------------------------------
00A5            712   ;        sensor_test.c:132: void Timer3us(unsigned char us)
00A5            713   ;        -----------------------------------------
00A5            714   ;         function Timer3us
00A5            715   ;        -----------------------------------------
00A5            716   _Timer3us:
00A5 AA82       717            mov     r2,dpl
00A7            718   ;        sensor_test.c:137: CKCON0|=0b_0100_0000;
00A7 438E40     719            orl     _CKCON0,#0x40
00AA            720   ;        sensor_test.c:139: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
00AA 7592B8     721            mov     _TMR3RL,#0xB8
00AD 7593FF     722            mov     (_TMR3RL >> 8),#0xFF
00B0            723   ;        sensor_test.c:140: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
00B0 859294     724            mov     _TMR3,_TMR3RL
00B3 859395     725            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
00B6            726   ;        sensor_test.c:142: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
00B6 759104     727            mov     _TMR3CN0,#0x04
00B9            728   ;        sensor_test.c:143: for (i = 0; i < us; i++)       // Count <us> overflows
00B9 7B00       729            mov     r3,#0x00
00BB            730   L004004?:
00BB C3         731            clr     c
00BC EB         732            mov     a,r3
00BD 9A         733            subb    a,r2
00BE 5000       734            jnc     L004007?
00C0            735   ;        sensor_test.c:145: while (!(TMR3CN0 & 0x80));  // Wait for overflow
00C0            736   L004001?:
00C0 E591       737            mov     a,_TMR3CN0
00C2 30E718     738            jnb     acc.7,L004001?
00C5            739   ;        sensor_test.c:146: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
00C5 53917F     740            anl     _TMR3CN0,#0x7F
00C8            741   ;        sensor_test.c:143: for (i = 0; i < us; i++)       // Count <us> overflows
00C8 0B         742            inc     r3
00C9 8000       743            sjmp    L004004?
00CB            744   L004007?:
00CB            745   ;        sensor_test.c:148: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00CB 759100     746            mov     _TMR3CN0,#0x00
00CE 22         747            ret
00CF            748   ;------------------------------------------------------------
00CF            749   ;Allocation info for local variables in function 'ptr_delay_us'
00CF            750   ;------------------------------------------------------------
00CF            751   ;intf_ptr                  Allocated to stack - offset -5
00CF            752   ;period                    Allocated to registers r2 r3 r4 r5 
00CF            753   ;------------------------------------------------------------
00CF            754   ;        sensor_test.c:152: void ptr_delay_us (uint32_t period, void *intf_ptr) reentrant
00CF            755   ;        -----------------------------------------
00CF            756   ;         function ptr_delay_us
00CF            757   ;        -----------------------------------------
00CF            758   _ptr_delay_us:
00CF C000       759            push    _bp
00D1 858100     760            mov     _bp,sp
00D4 AA82       761            mov     r2,dpl
00D6 AB83       762            mov     r3,dph
00D8 ACF0       763            mov     r4,b
00DA FD         764            mov     r5,a
00DB            765   ;        sensor_test.c:155: while (period--)
00DB            766   L005001?:
00DB 8A06       767            mov     ar6,r2
00DD 8B07       768            mov     ar7,r3
00DF 8C00       769            mov     ar0,r4
00E1 8D01       770            mov     ar1,r5
00E3 1A         771            dec     r2
00E4 BAFF58     772            cjne    r2,#0xff,L005009?
00E7 1B         773            dec     r3
00E8 BBFF58     774            cjne    r3,#0xff,L005009?
00EB 1C         775            dec     r4
00EC BCFF58     776            cjne    r4,#0xff,L005009?
00EF 1D         777            dec     r5
00F0            778   L005009?:
00F0 EE         779            mov     a,r6
00F1 4F         780            orl     a,r7
00F2 48         781            orl     a,r0
00F3 49         782            orl     a,r1
00F4 6000       783            jz      L005004?
00F6            784   ;        sensor_test.c:157: Timer3us(1);
00F6 758201     785            mov     dpl,#0x01
00F9 C002       786            push    ar2
00FB C003       787            push    ar3
00FD C004       788            push    ar4
00FF C005       789            push    ar5
0101 120000     790            lcall   _Timer3us
0104 D005       791            pop     ar5
0106 D004       792            pop     ar4
0108 D003       793            pop     ar3
010A D002       794            pop     ar2
010C 8000       795            sjmp    L005001?
010E            796   L005004?:
010E D000       797            pop     _bp
0110 22         798            ret
0111            799   ;------------------------------------------------------------
0111            800   ;Allocation info for local variables in function 'waitms'
0111            801   ;------------------------------------------------------------
0111            802   ;ms                        Allocated to registers r2 r3 
0111            803   ;j                         Allocated with name '_waitms_j_1_67'
0111            804   ;k                         Allocated with name '_waitms_k_1_67'
0111            805   ;------------------------------------------------------------
0111            806   ;        sensor_test.c:161: void waitms (unsigned int ms)
0111            807   ;        -----------------------------------------
0111            808   ;         function waitms
0111            809   ;        -----------------------------------------
0111            810   _waitms:
0111 AA82       811            mov     r2,dpl
0113 AB83       812            mov     r3,dph
0115            813   ;        sensor_test.c:165: for(j=0; j<ms; j++)
0115 7C00       814            mov     r4,#0x00
0117 7D00       815            mov     r5,#0x00
0119            816   L006005?:
0119 C3         817            clr     c
011A EC         818            mov     a,r4
011B 9A         819            subb    a,r2
011C ED         820            mov     a,r5
011D 9B         821            subb    a,r3
011E 5000       822            jnc     L006009?
0120            823   ;        sensor_test.c:166: for (k=0; k<4; k++) Timer3us(250);
0120 7E00       824            mov     r6,#0x00
0122            825   L006001?:
0122 BE0498     826            cjne    r6,#0x04,L006018?
0125            827   L006018?:
0125 5000       828            jnc     L006007?
0127 7582FA     829            mov     dpl,#0xFA
012A C002       830            push    ar2
012C C003       831            push    ar3
012E C004       832            push    ar4
0130 C005       833            push    ar5
0132 C006       834            push    ar6
0134 120000     835            lcall   _Timer3us
0137 D006       836            pop     ar6
0139 D005       837            pop     ar5
013B D004       838            pop     ar4
013D D003       839            pop     ar3
013F D002       840            pop     ar2
0141 0E         841            inc     r6
0142 8000       842            sjmp    L006001?
0144            843   L006007?:
0144            844   ;        sensor_test.c:165: for(j=0; j<ms; j++)
0144 0C         845            inc     r4
0145 BC00D8     846            cjne    r4,#0x00,L006005?
0148 0D         847            inc     r5
0149 8000       848            sjmp    L006005?
014B            849   L006009?:
014B 22         850            ret
014C            851   ;------------------------------------------------------------
014C            852   ;Allocation info for local variables in function 'spi_transfer'
014C            853   ;------------------------------------------------------------
014C            854   ;x                         Allocated to registers 
014C            855   ;------------------------------------------------------------
014C            856   ;        sensor_test.c:170: uint8_t spi_transfer(uint8_t x) // instead of data we used x
014C            857   ;        -----------------------------------------
014C            858   ;         function spi_transfer
014C            859   ;        -----------------------------------------
014C            860   _spi_transfer:
014C 8582A3     861            mov     _SPI0DAT,dpl
014F            862   ;        sensor_test.c:173: while (!(SPI0CN0 & 0x80)); // Wait for transmission to complete (SPIF flag)
014F            863   L007001?:
014F E5F8       864            mov     a,_SPI0CN0
0151 30E718     865            jnb     acc.7,L007001?
0154            866   ;        sensor_test.c:174: SPI0CN0 &= ~0x80;          // Clear the flag
0154 53F87F     867            anl     _SPI0CN0,#0x7F
0157            868   ;        sensor_test.c:175: return SPI0DAT;            // Return received byte
0157 85A382     869            mov     dpl,_SPI0DAT
015A 22         870            ret
015B            871   ;------------------------------------------------------------
015B            872   ;Allocation info for local variables in function 'bmm150_spi_read'
015B            873   ;------------------------------------------------------------
015B            874   ;reg_data                  Allocated to stack - offset -5
015B            875   ;length                    Allocated to stack - offset -9
015B            876   ;intf_ptr                  Allocated to stack - offset -12
015B            877   ;reg_addr                  Allocated to registers r2 
015B            878   ;i                         Allocated to stack - offset 1
015B            879   ;------------------------------------------------------------
015B            880   ;        sensor_test.c:194: int8_t bmm150_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr) __reentrant
015B            881   ;        -----------------------------------------
015B            882   ;         function bmm150_spi_read
015B            883   ;        -----------------------------------------
015B            884   _bmm150_spi_read:
015B C000       885            push    _bp
015D E581       886            mov     a,sp
015F F500       887            mov     _bp,a
0161 2404       888            add     a,#0x04
0163 F581       889            mov     sp,a
0165 AA82       890            mov     r2,dpl
0167            891   ;        sensor_test.c:200: reg_addr |= 0x80;
0167 430280     892            orl     ar2,#0x80
016A            893   ;        sensor_test.c:201: CS = 0;
016A C285       894            clr     _P0_5
016C            895   ;        sensor_test.c:204: if (spi_transfer(reg_addr) == 0xFF)
016C 8A82       896            mov     dpl,r2
016E 120000     897            lcall   _spi_transfer
0171 AA82       898            mov     r2,dpl
0173 BAFF58     899            cjne    r2,#0xFF,L008011?
0176            900   ;        sensor_test.c:206: CS = 1; // End SPI 
0176 D285       901            setb    _P0_5
0178            902   ;        sensor_test.c:207: return BMM150_E_COM_FAIL;
0178 7582FC     903            mov     dpl,#0xFC
017B            904   ;        sensor_test.c:210: for (i = 0; i < length; i++)
017B 8000       905            sjmp    L008007?
017D            906   L008011?:
017D A800       907            mov     r0,_bp
017F 08         908            inc     r0
0180 E4         909            clr     a
0181 F6         910            mov     @r0,a
0182 08         911            inc     r0
0183 F6         912            mov     @r0,a
0184 08         913            inc     r0
0185 F6         914            mov     @r0,a
0186 08         915            inc     r0
0187 F6         916            mov     @r0,a
0188            917   L008003?:
0188 A800       918            mov     r0,_bp
018A 08         919            inc     r0
018B E500       920            mov     a,_bp
018D 24F7       921            add     a,#0xf7
018F F9         922            mov     r1,a
0190 C3         923            clr     c
0191 E6         924            mov     a,@r0
0192 97         925            subb    a,@r1
0193 08         926            inc     r0
0194 E6         927            mov     a,@r0
0195 09         928            inc     r1
0196 97         929            subb    a,@r1
0197 08         930            inc     r0
0198 E6         931            mov     a,@r0
0199 09         932            inc     r1
019A 97         933            subb    a,@r1
019B 08         934            inc     r0
019C E6         935            mov     a,@r0
019D 09         936            inc     r1
019E 97         937            subb    a,@r1
019F 5000       938            jnc     L008006?
01A1            939   ;        sensor_test.c:212: reg_data[i] = spi_transfer(0x00);
01A1 E500       940            mov     a,_bp
01A3 24FB       941            add     a,#0xfb
01A5 F8         942            mov     r0,a
01A6 A900       943            mov     r1,_bp
01A8 09         944            inc     r1
01A9 E7         945            mov     a,@r1
01AA 26         946            add     a,@r0
01AB FE         947            mov     r6,a
01AC 09         948            inc     r1
01AD E7         949            mov     a,@r1
01AE 08         950            inc     r0
01AF 36         951            addc    a,@r0
01B0 FF         952            mov     r7,a
01B1 08         953            inc     r0
01B2 8602       954            mov     ar2,@r0
01B4 758200     955            mov     dpl,#0x00
01B7 C002       956            push    ar2
01B9 C006       957            push    ar6
01BB C007       958            push    ar7
01BD 120000     959            lcall   _spi_transfer
01C0 AB82       960            mov     r3,dpl
01C2 D007       961            pop     ar7
01C4 D006       962            pop     ar6
01C6 D002       963            pop     ar2
01C8 8E82       964            mov     dpl,r6
01CA 8F83       965            mov     dph,r7
01CC 8AF0       966            mov     b,r2
01CE EB         967            mov     a,r3
01CF 120000     968            lcall   __gptrput
01D2            969   ;        sensor_test.c:210: for (i = 0; i < length; i++)
01D2 A800       970            mov     r0,_bp
01D4 08         971            inc     r0
01D5 06         972            inc     @r0
01D6 B60098     973            cjne    @r0,#0x00,L008016?
01D9 08         974            inc     r0
01DA 06         975            inc     @r0
01DB B60098     976            cjne    @r0,#0x00,L008016?
01DE 08         977            inc     r0
01DF 06         978            inc     @r0
01E0 B60098     979            cjne    @r0,#0x00,L008016?
01E3 08         980            inc     r0
01E4 06         981            inc     @r0
01E5            982   L008016?:
01E5 8000       983            sjmp    L008003?
01E7            984   L008006?:
01E7            985   ;        sensor_test.c:215: CS = 1;
01E7 D285       986            setb    _P0_5
01E9            987   ;        sensor_test.c:216: return BMM150_OK;
01E9 758200     988            mov     dpl,#0x00
01EC            989   L008007?:
01EC 850081     990            mov     sp,_bp
01EF D000       991            pop     _bp
01F1 22         992            ret
01F2            993   ;------------------------------------------------------------
01F2            994   ;Allocation info for local variables in function 'bmm150_spi_write'
01F2            995   ;------------------------------------------------------------
01F2            996   ;reg_data                  Allocated to stack - offset -5
01F2            997   ;length                    Allocated to stack - offset -9
01F2            998   ;intf_ptr                  Allocated to stack - offset -12
01F2            999   ;reg_addr                  Allocated to registers r2 
01F2           1000   ;i                         Allocated to stack - offset 1
01F2           1001   ;------------------------------------------------------------
01F2           1002   ;        sensor_test.c:235: int8_t bmm150_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr) __reentrant
01F2           1003   ;        -----------------------------------------
01F2           1004   ;         function bmm150_spi_write
01F2           1005   ;        -----------------------------------------
01F2           1006   _bmm150_spi_write:
01F2 C000      1007            push    _bp
01F4 E581      1008            mov     a,sp
01F6 F500      1009            mov     _bp,a
01F8 2404      1010            add     a,#0x04
01FA F581      1011            mov     sp,a
01FC AA82      1012            mov     r2,dpl
01FE           1013   ;        sensor_test.c:240: CS = 0; // Pull CS low to start communication
01FE C285      1014            clr     _P0_5
0200           1015   ;        sensor_test.c:243: if (spi_transfer(reg_addr & 0x7F) == 0xFF) // Check if transfer failed
0200 747F      1016            mov     a,#0x7F
0202 5A        1017            anl     a,r2
0203 F582      1018            mov     dpl,a
0205 120000    1019            lcall   _spi_transfer
0208 AA82      1020            mov     r2,dpl
020A BAFFD8    1021            cjne    r2,#0xFF,L009014?
020D           1022   ;        sensor_test.c:245: CS = 1; // Pull CS high
020D D285      1023            setb    _P0_5
020F           1024   ;        sensor_test.c:246: return BMM150_E_COM_FAIL; // Return communication failure
020F 7582FC    1025            mov     dpl,#0xFC
0212           1026   ;        sensor_test.c:250: for (i = 0; i < length; i++)
0212 8000      1027            sjmp    L009009?
0214           1028   L009014?:
0214 A800      1029            mov     r0,_bp
0216 08        1030            inc     r0
0217 E4        1031            clr     a
0218 F6        1032            mov     @r0,a
0219 08        1033            inc     r0
021A F6        1034            mov     @r0,a
021B 08        1035            inc     r0
021C F6        1036            mov     @r0,a
021D 08        1037            inc     r0
021E F6        1038            mov     @r0,a
021F           1039   L009005?:
021F A800      1040            mov     r0,_bp
0221 08        1041            inc     r0
0222 E500      1042            mov     a,_bp
0224 24F7      1043            add     a,#0xf7
0226 F9        1044            mov     r1,a
0227 C3        1045            clr     c
0228 E6        1046            mov     a,@r0
0229 97        1047            subb    a,@r1
022A 08        1048            inc     r0
022B E6        1049            mov     a,@r0
022C 09        1050            inc     r1
022D 97        1051            subb    a,@r1
022E 08        1052            inc     r0
022F E6        1053            mov     a,@r0
0230 09        1054            inc     r1
0231 97        1055            subb    a,@r1
0232 08        1056            inc     r0
0233 E6        1057            mov     a,@r0
0234 09        1058            inc     r1
0235 97        1059            subb    a,@r1
0236 5000      1060            jnc     L009008?
0238           1061   ;        sensor_test.c:252: if (spi_transfer(reg_data[i]) == 0xFF) // Check if transfer failed
0238 E500      1062            mov     a,_bp
023A 24FB      1063            add     a,#0xfb
023C F8        1064            mov     r0,a
023D A900      1065            mov     r1,_bp
023F 09        1066            inc     r1
0240 E7        1067            mov     a,@r1
0241 26        1068            add     a,@r0
0242 FE        1069            mov     r6,a
0243 09        1070            inc     r1
0244 E7        1071            mov     a,@r1
0245 08        1072            inc     r0
0246 36        1073            addc    a,@r0
0247 FF        1074            mov     r7,a
0248 08        1075            inc     r0
0249 8602      1076            mov     ar2,@r0
024B 8E82      1077            mov     dpl,r6
024D 8F83      1078            mov     dph,r7
024F 8AF0      1079            mov     b,r2
0251 120000    1080            lcall   __gptrget
0254 F582      1081            mov     dpl,a
0256 120000    1082            lcall   _spi_transfer
0259 AA82      1083            mov     r2,dpl
025B BAFF18    1084            cjne    r2,#0xFF,L009007?
025E           1085   ;        sensor_test.c:254: CS = 1; // Pull CS high
025E D285      1086            setb    _P0_5
0260           1087   ;        sensor_test.c:255: return BMM150_E_COM_FAIL; // Return communication failure
0260 7582FC    1088            mov     dpl,#0xFC
0263 8000      1089            sjmp    L009009?
0265           1090   L009007?:
0265           1091   ;        sensor_test.c:250: for (i = 0; i < length; i++)
0265 A800      1092            mov     r0,_bp
0267 08        1093            inc     r0
0268 06        1094            inc     @r0
0269 B60058    1095            cjne    @r0,#0x00,L009020?
026C 08        1096            inc     r0
026D 06        1097            inc     @r0
026E B60058    1098            cjne    @r0,#0x00,L009020?
0271 08        1099            inc     r0
0272 06        1100            inc     @r0
0273 B60058    1101            cjne    @r0,#0x00,L009020?
0276 08        1102            inc     r0
0277 06        1103            inc     @r0
0278           1104   L009020?:
0278 8000      1105            sjmp    L009005?
027A           1106   L009008?:
027A           1107   ;        sensor_test.c:259: CS = 1; // Pull CS high to end communication
027A D285      1108            setb    _P0_5
027C           1109   ;        sensor_test.c:261: return BMM150_OK; // If all transfers succeeded, return success
027C 758200    1110            mov     dpl,#0x00
027F           1111   L009009?:
027F 850081    1112            mov     sp,_bp
0282 D000      1113            pop     _bp
0284 22        1114            ret
0285           1115   ;------------------------------------------------------------
0285           1116   ;Allocation info for local variables in function 'bmm150_error_codes_print_result'
0285           1117   ;------------------------------------------------------------
0285           1118   ;rslt                      Allocated with name '_bmm150_error_codes_print_result_PARM_2'
0285           1119   ;api_name                  Allocated to registers r2 r3 r4 
0285           1120   ;------------------------------------------------------------
0285           1121   ;        sensor_test.c:267: void bmm150_error_codes_print_result(const char api_name[], int8_t rslt)
0285           1122   ;        -----------------------------------------
0285           1123   ;         function bmm150_error_codes_print_result
0285           1124   ;        -----------------------------------------
0285           1125   _bmm150_error_codes_print_result:
0285 AA82      1126            mov     r2,dpl
0287 AB83      1127            mov     r3,dph
0289 ACF0      1128            mov     r4,b
028B           1129   ;        sensor_test.c:269: if (rslt != BMM150_OK)
028B E5F0      1130            mov     a,_bmm150_error_codes_print_result_PARM_2
028D 7000      1131            jnz     L010016?
028F 22        1132            ret
0290           1133   L010016?:
0290           1134   ;        sensor_test.c:271: printf("%s\t", api_name);
0290 C002      1135            push    ar2
0292 C003      1136            push    ar3
0294 C004      1137            push    ar4
0296 74D8      1138            mov     a,#__str_0
0298 C0E0      1139            push    acc
029A 74C0      1140            mov     a,#(__str_0 >> 8)
029C C0E0      1141            push    acc
029E 7480      1142            mov     a,#0x80
02A0 C0E0      1143            push    acc
02A2 120000    1144            lcall   _printf
02A5 E581      1145            mov     a,sp
02A7 24FA      1146            add     a,#0xfa
02A9 F581      1147            mov     sp,a
02AB           1148   ;        sensor_test.c:273: switch (rslt)
02AB 74FC      1149            mov     a,#0xFC
02AD B5F058    1150            cjne    a,_bmm150_error_codes_print_result_PARM_2,L010017?
02B0 8000      1151            sjmp    L010002?
02B2           1152   L010017?:
02B2 74FD      1153            mov     a,#0xFD
02B4 B5F0D8    1154            cjne    a,_bmm150_error_codes_print_result_PARM_2,L010018?
02B7 020000    1155            ljmp    L010004?
02BA           1156   L010018?:
02BA 74FE      1157            mov     a,#0xFE
02BC B5F058    1158            cjne    a,_bmm150_error_codes_print_result_PARM_2,L010019?
02BF 8000      1159            sjmp    L010003?
02C1           1160   L010019?:
02C1 74FF      1161            mov     a,#0xFF
02C3 B5F0D8    1162            cjne    a,_bmm150_error_codes_print_result_PARM_2,L010020?
02C6 8000      1163            sjmp    L010021?
02C8           1164   L010020?:
02C8 020000    1165            ljmp    L010005?
02CB           1166   L010021?:
02CB           1167   ;        sensor_test.c:276: printf("Error [%d] : Null pointer error.", rslt);
02CB E5F0      1168            mov     a,_bmm150_error_codes_print_result_PARM_2
02CD FA        1169            mov     r2,a
02CE 33        1170            rlc     a
02CF 95E0      1171            subb    a,acc
02D1 FB        1172            mov     r3,a
02D2 C002      1173            push    ar2
02D4 C003      1174            push    ar3
02D6 7498      1175            mov     a,#__str_1
02D8 C0E0      1176            push    acc
02DA 74C3      1177            mov     a,#(__str_1 >> 8)
02DC C0E0      1178            push    acc
02DE 7480      1179            mov     a,#0x80
02E0 C0E0      1180            push    acc
02E2 120000    1181            lcall   _printf
02E5 E581      1182            mov     a,sp
02E7 24FB      1183            add     a,#0xfb
02E9 F581      1184            mov     sp,a
02EB           1185   ;        sensor_test.c:278: "It occurs when the user tries to assign value (not address) to a pointer, which has been initialized to NULL.\r\n");
02EB 74D8      1186            mov     a,#__str_2
02ED C0E0      1187            push    acc
02EF 74C3      1188            mov     a,#(__str_2 >> 8)
02F1 C0E0      1189            push    acc
02F3 7480      1190            mov     a,#0x80
02F5 C0E0      1191            push    acc
02F7 120000    1192            lcall   _printf
02FA 1581      1193            dec     sp
02FC 1581      1194            dec     sp
02FE 1581      1195            dec     sp
0300           1196   ;        sensor_test.c:279: break;
0300 22        1197            ret
0301           1198   ;        sensor_test.c:281: case BMM150_E_COM_FAIL:
0301           1199   L010002?:
0301           1200   ;        sensor_test.c:282: printf("Error [%d] : Communication failure error.", rslt);
0301 E5F0      1201            mov     a,_bmm150_error_codes_print_result_PARM_2
0303 FA        1202            mov     r2,a
0304 33        1203            rlc     a
0305 95E0      1204            subb    a,acc
0307 FB        1205            mov     r3,a
0308 C002      1206            push    ar2
030A C003      1207            push    ar3
030C 7418      1208            mov     a,#__str_3
030E C0E0      1209            push    acc
0310 74C4      1210            mov     a,#(__str_3 >> 8)
0312 C0E0      1211            push    acc
0314 7480      1212            mov     a,#0x80
0316 C0E0      1213            push    acc
0318 120000    1214            lcall   _printf
031B E581      1215            mov     a,sp
031D 24FB      1216            add     a,#0xfb
031F F581      1217            mov     sp,a
0321           1218   ;        sensor_test.c:284: "It occurs due to read/write operation failure and also due to power failure during communication\r\n");
0321 7458      1219            mov     a,#__str_4
0323 C0E0      1220            push    acc
0325 74C4      1221            mov     a,#(__str_4 >> 8)
0327 C0E0      1222            push    acc
0329 7480      1223            mov     a,#0x80
032B C0E0      1224            push    acc
032D 120000    1225            lcall   _printf
0330 1581      1226            dec     sp
0332 1581      1227            dec     sp
0334 1581      1228            dec     sp
0336           1229   ;        sensor_test.c:285: break;
0336 22        1230            ret
0337           1231   ;        sensor_test.c:287: case BMM150_E_DEV_NOT_FOUND:
0337           1232   L010003?:
0337           1233   ;        sensor_test.c:288: printf("Error [%d] : Device not found error. It occurs when the device chip id is incorrectly read\r\n", rslt);
0337 E5F0      1234            mov     a,_bmm150_error_codes_print_result_PARM_2
0339 FA        1235            mov     r2,a
033A 33        1236            rlc     a
033B 95E0      1237            subb    a,acc
033D FB        1238            mov     r3,a
033E C002      1239            push    ar2
0340 C003      1240            push    ar3
0342 7498      1241            mov     a,#__str_5
0344 C0E0      1242            push    acc
0346 74C4      1243            mov     a,#(__str_5 >> 8)
0348 C0E0      1244            push    acc
034A 7480      1245            mov     a,#0x80
034C C0E0      1246            push    acc
034E 120000    1247            lcall   _printf
0351 E581      1248            mov     a,sp
0353 24FB      1249            add     a,#0xfb
0355 F581      1250            mov     sp,a
0357           1251   ;        sensor_test.c:289: break;
0357           1252   ;        sensor_test.c:291: case BMM150_E_INVALID_CONFIG:
0357 22        1253            ret
0358           1254   L010004?:
0358           1255   ;        sensor_test.c:292: printf("Error [%d] : Invalid sensor configuration.", rslt);
0358 E5F0      1256            mov     a,_bmm150_error_codes_print_result_PARM_2
035A FA        1257            mov     r2,a
035B 33        1258            rlc     a
035C 95E0      1259            subb    a,acc
035E FB        1260            mov     r3,a
035F C002      1261            push    ar2
0361 C003      1262            push    ar3
0363 74D8      1263            mov     a,#__str_6
0365 C0E0      1264            push    acc
0367 74C4      1265            mov     a,#(__str_6 >> 8)
0369 C0E0      1266            push    acc
036B 7480      1267            mov     a,#0x80
036D C0E0      1268            push    acc
036F 120000    1269            lcall   _printf
0372 E581      1270            mov     a,sp
0374 24FB      1271            add     a,#0xfb
0376 F581      1272            mov     sp,a
0378           1273   ;        sensor_test.c:293: printf(" It occurs when there is a mismatch in the requested feature with the available one\r\n");
0378 7418      1274            mov     a,#__str_7
037A C0E0      1275            push    acc
037C 74C5      1276            mov     a,#(__str_7 >> 8)
037E C0E0      1277            push    acc
0380 7480      1278            mov     a,#0x80
0382 C0E0      1279            push    acc
0384 120000    1280            lcall   _printf
0387 1581      1281            dec     sp
0389 1581      1282            dec     sp
038B 1581      1283            dec     sp
038D           1284   ;        sensor_test.c:294: break;
038D           1285   ;        sensor_test.c:296: default:
038D 22        1286            ret
038E           1287   L010005?:
038E           1288   ;        sensor_test.c:297: printf("Error [%d] : Unknown error code\r\n", rslt);
038E E5F0      1289            mov     a,_bmm150_error_codes_print_result_PARM_2
0390 FA        1290            mov     r2,a
0391 33        1291            rlc     a
0392 95E0      1292            subb    a,acc
0394 FB        1293            mov     r3,a
0395 C002      1294            push    ar2
0397 C003      1295            push    ar3
0399 7458      1296            mov     a,#__str_8
039B C0E0      1297            push    acc
039D 74C5      1298            mov     a,#(__str_8 >> 8)
039F C0E0      1299            push    acc
03A1 7480      1300            mov     a,#0x80
03A3 C0E0      1301            push    acc
03A5 120000    1302            lcall   _printf
03A8 E581      1303            mov     a,sp
03AA 24FB      1304            add     a,#0xfb
03AC F581      1305            mov     sp,a
03AE           1306   ;        sensor_test.c:299: }
03AE 22        1307            ret
03AF           1308   ;------------------------------------------------------------
03AF           1309   ;Allocation info for local variables in function 'bmm150_interface_selection'
03AF           1310   ;------------------------------------------------------------
03AF           1311   ;intf                      Allocated with name '_bmm150_interface_selection_PARM_2'
03AF           1312   ;dev                       Allocated to registers r2 r3 
03AF           1313   ;rslt                      Allocated with name '_bmm150_interface_selection_rslt_1_84'
03AF           1314   ;------------------------------------------------------------
03AF           1315   ;        sensor_test.c:306: xdata int8_t bmm150_interface_selection(xdata struct bmm150_dev *dev, uint8_t intf)
03AF           1316   ;        -----------------------------------------
03AF           1317   ;         function bmm150_interface_selection
03AF           1318   ;        -----------------------------------------
03AF           1319   _bmm150_interface_selection:
03AF AA82      1320            mov     r2,dpl
03B1 AB83      1321            mov     r3,dph
03B3           1322   ;        sensor_test.c:308: xdata int8_t rslt = BMM150_OK;
03B3 90B458    1323            mov     dptr,#_bmm150_interface_selection_rslt_1_84
03B6 E4        1324            clr     a
03B7 F0        1325            movx    @dptr,a
03B8           1326   ;        sensor_test.c:309: printf("Configuring SPI\n"); 
03B8 C002      1327            push    ar2
03BA C003      1328            push    ar3
03BC 7498      1329            mov     a,#__str_9
03BE C0E0      1330            push    acc
03C0 74C5      1331            mov     a,#(__str_9 >> 8)
03C2 C0E0      1332            push    acc
03C4 7480      1333            mov     a,#0x80
03C6 C0E0      1334            push    acc
03C8 120000    1335            lcall   _printf
03CB 1581      1336            dec     sp
03CD 1581      1337            dec     sp
03CF 1581      1338            dec     sp
03D1 D003      1339            pop     ar3
03D3 D002      1340            pop     ar2
03D5           1341   ;        sensor_test.c:311: if (dev != NULL)
03D5 8A04      1342            mov     ar4,r2
03D7 8B05      1343            mov     ar5,r3
03D9 7E00      1344            mov     r6,#0x00
03DB BC00D8    1345            cjne    r4,#0x00,L011011?
03DE BD00D8    1346            cjne    r5,#0x00,L011011?
03E1 BE00D8    1347            cjne    r6,#0x00,L011011?
03E4 020000    1348            ljmp    L011005?
03E7           1349   L011011?:
03E7           1350   ;        sensor_test.c:313: if (intf == BMM150_SPI_INTF)
03E7 E590      1351            mov     a,_bmm150_interface_selection_PARM_2
03E9 7000      1352            jnz     L011002?
03EB           1353   ;        sensor_test.c:315: printf("SPI Interface Selected\n");
03EB C002      1354            push    ar2
03ED C003      1355            push    ar3
03EF 7498      1356            mov     a,#__str_10
03F1 C0E0      1357            push    acc
03F3 74C6      1358            mov     a,#(__str_10 >> 8)
03F5 C0E0      1359            push    acc
03F7 7480      1360            mov     a,#0x80
03F9 C0E0      1361            push    acc
03FB 120000    1362            lcall   _printf
03FE 1581      1363            dec     sp
0400 1581      1364            dec     sp
0402 1581      1365            dec     sp
0404 D003      1366            pop     ar3
0406 D002      1367            pop     ar2
0408           1368   ;        sensor_test.c:318: dev->read = bmm150_spi_read;
0408 7406      1369            mov     a,#0x06
040A 2A        1370            add     a,r2
040B FC        1371            mov     r4,a
040C E4        1372            clr     a
040D 3B        1373            addc    a,r3
040E FD        1374            mov     r5,a
040F 8C82      1375            mov     dpl,r4
0411 8D83      1376            mov     dph,r5
0413 74A0      1377            mov     a,#_bmm150_spi_read
0415 F0        1378            movx    @dptr,a
0416 A3        1379            inc     dptr
0417 7412      1380            mov     a,#(_bmm150_spi_read >> 8)
0419 F0        1381            movx    @dptr,a
041A           1382   ;        sensor_test.c:319: dev->write = bmm150_spi_write;
041A 7408      1383            mov     a,#0x08
041C 2A        1384            add     a,r2
041D FC        1385            mov     r4,a
041E E4        1386            clr     a
041F 3B        1387            addc    a,r3
0420 FD        1388            mov     r5,a
0421 8C82      1389            mov     dpl,r4
0423 8D83      1390            mov     dph,r5
0425 7450      1391            mov     a,#_bmm150_spi_write
0427 F0        1392            movx    @dptr,a
0428 A3        1393            inc     dptr
0429 7412      1394            mov     a,#(_bmm150_spi_write >> 8)
042B F0        1395            movx    @dptr,a
042C           1396   ;        sensor_test.c:320: dev->intf = BMM150_SPI_INTF;
042C 8A82      1397            mov     dpl,r2
042E 8B83      1398            mov     dph,r3
0430 A3        1399            inc     dptr
0431 E4        1400            clr     a
0432 F0        1401            movx    @dptr,a
0433           1402   ;        sensor_test.c:321: dev->intf_ptr = NULL; // We don't need an intf_ptr for direct GPIO control
0433 8A82      1403            mov     dpl,r2
0435 8B83      1404            mov     dph,r3
0437 A3        1405            inc     dptr
0438 A3        1406            inc     dptr
0439 E4        1407            clr     a
043A F0        1408            movx    @dptr,a
043B A3        1409            inc     dptr
043C F0        1410            movx    @dptr,a
043D A3        1411            inc     dptr
043E F0        1412            movx    @dptr,a
043F           1413   ;        sensor_test.c:322: dev->delay_us = ptr_delay_us;
043F 740A      1414            mov     a,#0x0A
0441 2A        1415            add     a,r2
0442 FA        1416            mov     r2,a
0443 E4        1417            clr     a
0444 3B        1418            addc    a,r3
0445 FB        1419            mov     r3,a
0446 8A82      1420            mov     dpl,r2
0448 8B83      1421            mov     dph,r3
044A 7460      1422            mov     a,#_ptr_delay_us
044C F0        1423            movx    @dptr,a
044D A3        1424            inc     dptr
044E 7413      1425            mov     a,#(_ptr_delay_us >> 8)
0450 F0        1426            movx    @dptr,a
0451 8000      1427            sjmp    L011006?
0453           1428   L011002?:
0453           1429   ;        sensor_test.c:326: printf("Invalid Interface Selection\n");
0453 7418      1430            mov     a,#__str_11
0455 C0E0      1431            push    acc
0457 74C7      1432            mov     a,#(__str_11 >> 8)
0459 C0E0      1433            push    acc
045B 7480      1434            mov     a,#0x80
045D C0E0      1435            push    acc
045F 120000    1436            lcall   _printf
0462 1581      1437            dec     sp
0464 1581      1438            dec     sp
0466 1581      1439            dec     sp
0468           1440   ;        sensor_test.c:327: rslt = BMM150_E_INVALID_CONFIG;
0468 90B458    1441            mov     dptr,#_bmm150_interface_selection_rslt_1_84
046B 74FD      1442            mov     a,#0xFD
046D F0        1443            movx    @dptr,a
046E 8000      1444            sjmp    L011006?
0470           1445   L011005?:
0470           1446   ;        sensor_test.c:332: rslt = BMM150_E_NULL_PTR;
0470 90B458    1447            mov     dptr,#_bmm150_interface_selection_rslt_1_84
0473 74FF      1448            mov     a,#0xFF
0475 F0        1449            movx    @dptr,a
0476           1450   L011006?:
0476           1451   ;        sensor_test.c:335: return rslt;
0476 90B458    1452            mov     dptr,#_bmm150_interface_selection_rslt_1_84
0479 E0        1453            movx    a,@dptr
047A F582      1454            mov     dpl,a
047C 22        1455            ret
047D           1456   ;------------------------------------------------------------
047D           1457   ;Allocation info for local variables in function 'set_config'
047D           1458   ;------------------------------------------------------------
047D           1459   ;dev                       Allocated to registers r2 r3 
047D           1460   ;rslt                      Allocated with name '_set_config_rslt_1_90'
047D           1461   ;settings                  Allocated with name '_set_config_settings_1_90'
047D           1462   ;------------------------------------------------------------
047D           1463   ;        sensor_test.c:338: static int8_t set_config(xdata struct bmm150_dev *dev)
047D           1464   ;        -----------------------------------------
047D           1465   ;         function set_config
047D           1466   ;        -----------------------------------------
047D           1467   _set_config:
047D AA82      1468            mov     r2,dpl
047F AB83      1469            mov     r3,dph
0481           1470   ;        sensor_test.c:346: printf("Configuring Powermode\n"); 
0481 C002      1471            push    ar2
0483 C003      1472            push    ar3
0485 7498      1473            mov     a,#__str_12
0487 C0E0      1474            push    acc
0489 74C7      1475            mov     a,#(__str_12 >> 8)
048B C0E0      1476            push    acc
048D 7480      1477            mov     a,#0x80
048F C0E0      1478            push    acc
0491 120000    1479            lcall   _printf
0494 1581      1480            dec     sp
0496 1581      1481            dec     sp
0498 1581      1482            dec     sp
049A D003      1483            pop     ar3
049C D002      1484            pop     ar2
049E           1485   ;        sensor_test.c:347: settings.pwr_mode = BMM150_POWERMODE_NORMAL;
049E 90B4F9    1486            mov     dptr,#(_set_config_settings_1_90 + 0x0001)
04A1 E4        1487            clr     a
04A2 F0        1488            movx    @dptr,a
04A3           1489   ;        sensor_test.c:348: rslt = bmm150_set_op_mode(&settings, dev);
04A3 8A00      1490            mov     _bmm150_set_op_mode_PARM_2,r2
04A5 8B01      1491            mov     (_bmm150_set_op_mode_PARM_2 + 1),r3
04A7 750200    1492            mov     (_bmm150_set_op_mode_PARM_2 + 2),#0x00
04AA 90B4F8    1493            mov     dptr,#_set_config_settings_1_90
04AD 75F000    1494            mov     b,#0x00
04B0 C002      1495            push    ar2
04B2 C003      1496            push    ar3
04B4 120000    1497            lcall   _bmm150_set_op_mode
04B7 AC82      1498            mov     r4,dpl
04B9 90B4A8    1499            mov     dptr,#_set_config_rslt_1_90
04BC EC        1500            mov     a,r4
04BD F0        1501            movx    @dptr,a
04BE           1502   ;        sensor_test.c:349: bmm150_error_codes_print_result("bmm150_set_op_mode", rslt);
04BE 8CF0      1503            mov     _bmm150_error_codes_print_result_PARM_2,r4
04C0 90C878    1504            mov     dptr,#__str_13
04C3 75F080    1505            mov     b,#0x80
04C6 C004      1506            push    ar4
04C8 120000    1507            lcall   _bmm150_error_codes_print_result
04CB D004      1508            pop     ar4
04CD D003      1509            pop     ar3
04CF D002      1510            pop     ar2
04D1           1511   ;        sensor_test.c:351: if (rslt == BMM150_OK)
04D1 EC        1512            mov     a,r4
04D2 7000      1513            jnz     L012002?
04D4           1514   ;        sensor_test.c:356: printf("Configuring Presetmode\n"); 
04D4 C002      1515            push    ar2
04D6 C003      1516            push    ar3
04D8 74F8      1517            mov     a,#__str_14
04DA C0E0      1518            push    acc
04DC 74C8      1519            mov     a,#(__str_14 >> 8)
04DE C0E0      1520            push    acc
04E0 7480      1521            mov     a,#0x80
04E2 C0E0      1522            push    acc
04E4 120000    1523            lcall   _printf
04E7 1581      1524            dec     sp
04E9 1581      1525            dec     sp
04EB 1581      1526            dec     sp
04ED D003      1527            pop     ar3
04EF D002      1528            pop     ar2
04F1           1529   ;        sensor_test.c:357: settings.preset_mode = BMM150_PRESETMODE_LOWPOWER;
04F1 90B4FC    1530            mov     dptr,#(_set_config_settings_1_90 + 0x0004)
04F4 7401      1531            mov     a,#0x01
04F6 F0        1532            movx    @dptr,a
04F7           1533   ;        sensor_test.c:358: rslt = bmm150_set_presetmode(&settings, dev);
04F7 8A00      1534            mov     _bmm150_set_presetmode_PARM_2,r2
04F9 8B01      1535            mov     (_bmm150_set_presetmode_PARM_2 + 1),r3
04FB 750200    1536            mov     (_bmm150_set_presetmode_PARM_2 + 2),#0x00
04FE 90B4F8    1537            mov     dptr,#_set_config_settings_1_90
0501 75F000    1538            mov     b,#0x00
0504 120000    1539            lcall   _bmm150_set_presetmode
0507 AA82      1540            mov     r2,dpl
0509 90B4A8    1541            mov     dptr,#_set_config_rslt_1_90
050C EA        1542            mov     a,r2
050D F0        1543            movx    @dptr,a
050E           1544   ;        sensor_test.c:359: bmm150_error_codes_print_result("bmm150_set_presetmode", rslt);
050E 8AF0      1545            mov     _bmm150_error_codes_print_result_PARM_2,r2
0510 90C9D8    1546            mov     dptr,#__str_15
0513 75F080    1547            mov     b,#0x80
0516 120000    1548            lcall   _bmm150_error_codes_print_result
0519           1549   L012002?:
0519           1550   ;        sensor_test.c:362: return rslt;
0519 90B4A8    1551            mov     dptr,#_set_config_rslt_1_90
051C E0        1552            movx    a,@dptr
051D F582      1553            mov     dpl,a
051F 22        1554            ret
0520           1555   ;------------------------------------------------------------
0520           1556   ;Allocation info for local variables in function 'get_data'
0520           1557   ;------------------------------------------------------------
0520           1558   ;dev                       Allocated with name '_get_data_dev_1_92'
0520           1559   ;rslt                      Allocated with name '_get_data_rslt_1_93'
0520           1560   ;idx                       Allocated with name '_get_data_idx_1_93'
0520           1561   ;mag_data                  Allocated with name '_get_data_mag_data_1_93'
0520           1562   ;------------------------------------------------------------
0520           1563   ;        sensor_test.c:365: static int8_t get_data(xdata struct bmm150_dev *dev)
0520           1564   ;        -----------------------------------------
0520           1565   ;         function get_data
0520           1566   ;        -----------------------------------------
0520           1567   _get_data:
0520 8582F8    1568            mov     _get_data_dev_1_92,dpl
0523 8583F9    1569            mov     (_get_data_dev_1_92 + 1),dph
0526           1570   ;        sensor_test.c:374: rslt = BMM150_OK; 
0526 90B548    1571            mov     dptr,#_get_data_rslt_1_93
0529 E4        1572            clr     a
052A F0        1573            movx    @dptr,a
052B           1574   ;        sensor_test.c:378: for (idx = 0; idx < 50; idx++)
052B 7C00      1575            mov     r4,#0x00
052D           1576   L013004?:
052D C3        1577            clr     c
052E EC        1578            mov     a,r4
052F 6480      1579            xrl     a,#0x80
0531 94B2      1580            subb    a,#0xb2
0533 5000      1581            jnc     L013003?
0535           1582   ;        sensor_test.c:381: rslt = bmm150_read_mag_data(&mag_data, dev);
0535 85F800    1583            mov     _bmm150_read_mag_data_PARM_2,_get_data_dev_1_92
0538 85F901    1584            mov     (_bmm150_read_mag_data_PARM_2 + 1),(_get_data_dev_1_92 + 1)
053B 750200    1585            mov     (_bmm150_read_mag_data_PARM_2 + 2),#0x00
053E 90B598    1586            mov     dptr,#_get_data_mag_data_1_93
0541 75F000    1587            mov     b,#0x00
0544 C004      1588            push    ar4
0546 120000    1589            lcall   _bmm150_read_mag_data
0549 AD82      1590            mov     r5,dpl
054B 90B548    1591            mov     dptr,#_get_data_rslt_1_93
054E ED        1592            mov     a,r5
054F F0        1593            movx    @dptr,a
0550           1594   ;        sensor_test.c:382: bmm150_error_codes_print_result("bmm150_read_mag_data", rslt);
0550 8DF0      1595            mov     _bmm150_error_codes_print_result_PARM_2,r5
0552 90CB78    1596            mov     dptr,#__str_16
0555 75F080    1597            mov     b,#0x80
0558 120000    1598            lcall   _bmm150_error_codes_print_result
055B D004      1599            pop     ar4
055D           1600   ;        sensor_test.c:385: printf("MAG DATA[%d]  X : %d uT   Y : %d uT \n", idx, mag_data.x, mag_data.y);
055D 90B59A    1601            mov     dptr,#(_get_data_mag_data_1_93 + 0x0002)
0560 E0        1602            movx    a,@dptr
0561 FD        1603            mov     r5,a
0562 A3        1604            inc     dptr
0563 E0        1605            movx    a,@dptr
0564 FE        1606            mov     r6,a
0565 90B598    1607            mov     dptr,#_get_data_mag_data_1_93
0568 E0        1608            movx    a,@dptr
0569 FF        1609            mov     r7,a
056A A3        1610            inc     dptr
056B E0        1611            movx    a,@dptr
056C F8        1612            mov     r0,a
056D EC        1613            mov     a,r4
056E F9        1614            mov     r1,a
056F 33        1615            rlc     a
0570 95E0      1616            subb    a,acc
0572 FA        1617            mov     r2,a
0573 C004      1618            push    ar4
0575 C005      1619            push    ar5
0577 C006      1620            push    ar6
0579 C007      1621            push    ar7
057B C000      1622            push    ar0
057D C001      1623            push    ar1
057F C002      1624            push    ar2
0581 74B8      1625            mov     a,#__str_17
0583 C0E0      1626            push    acc
0585 74CB      1627            mov     a,#(__str_17 >> 8)
0587 C0E0      1628            push    acc
0589 7480      1629            mov     a,#0x80
058B C0E0      1630            push    acc
058D 120000    1631            lcall   _printf
0590 E581      1632            mov     a,sp
0592 24F7      1633            add     a,#0xf7
0594 F581      1634            mov     sp,a
0596 D004      1635            pop     ar4
0598           1636   ;        sensor_test.c:378: for (idx = 0; idx < 50; idx++)
0598 0C        1637            inc     r4
0599           1638   ;        sensor_test.c:387: break; 
0599 8000      1639            sjmp    L013004?
059B           1640   L013003?:
059B           1641   ;        sensor_test.c:389: return rslt;
059B 90B548    1642            mov     dptr,#_get_data_rslt_1_93
059E E0        1643            movx    a,@dptr
059F F582      1644            mov     dpl,a
05A1 22        1645            ret
05A2           1646   ;------------------------------------------------------------
05A2           1647   ;Allocation info for local variables in function 'main'
05A2           1648   ;------------------------------------------------------------
05A2           1649   ;rslt                      Allocated with name '_main_rslt_1_97'
05A2           1650   ;dev                       Allocated with name '_main_dev_1_97'
05A2           1651   ;------------------------------------------------------------
05A2           1652   ;        sensor_test.c:393: void main (void)
05A2           1653   ;        -----------------------------------------
05A2           1654   ;         function main
05A2           1655   ;        -----------------------------------------
05A2           1656   _main:
05A2           1657   ;        sensor_test.c:398: waitms(500);
05A2 9001F4    1658            mov     dptr,#0x01F4
05A5 120000    1659            lcall   _waitms
05A8           1660   ;        sensor_test.c:399: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
05A8 74F8      1661            mov     a,#__str_18
05AA C0E0      1662            push    acc
05AC 74CB      1663            mov     a,#(__str_18 >> 8)
05AE C0E0      1664            push    acc
05B0 7480      1665            mov     a,#0x80
05B2 C0E0      1666            push    acc
05B4 120000    1667            lcall   _printf
05B7 1581      1668            dec     sp
05B9 1581      1669            dec     sp
05BB 1581      1670            dec     sp
05BD           1671   ;        sensor_test.c:404: __FILE__, __DATE__, __TIME__);
05BD           1672   ;        sensor_test.c:403: "Compiled: %s, %s\n\n",
05BD 7438      1673            mov     a,#__str_22
05BF C0E0      1674            push    acc
05C1 74CC      1675            mov     a,#(__str_22 >> 8)
05C3 C0E0      1676            push    acc
05C5 7480      1677            mov     a,#0x80
05C7 C0E0      1678            push    acc
05C9 7478      1679            mov     a,#__str_21
05CB C0E0      1680            push    acc
05CD 74CC      1681            mov     a,#(__str_21 >> 8)
05CF C0E0      1682            push    acc
05D1 7480      1683            mov     a,#0x80
05D3 C0E0      1684            push    acc
05D5 74B8      1685            mov     a,#__str_20
05D7 C0E0      1686            push    acc
05D9 74CC      1687            mov     a,#(__str_20 >> 8)
05DB C0E0      1688            push    acc
05DD 7480      1689            mov     a,#0x80
05DF C0E0      1690            push    acc
05E1 74F8      1691            mov     a,#__str_19
05E3 C0E0      1692            push    acc
05E5 74CC      1693            mov     a,#(__str_19 >> 8)
05E7 C0E0      1694            push    acc
05E9 7480      1695            mov     a,#0x80
05EB C0E0      1696            push    acc
05ED 120000    1697            lcall   _printf
05F0 E581      1698            mov     a,sp
05F2 24F4      1699            add     a,#0xf4
05F4 F581      1700            mov     sp,a
05F6           1701   ;        sensor_test.c:406: Set_Pin_Output(0x05); 
05F6 758205    1702            mov     dpl,#0x05
05F9 120000    1703            lcall   _Set_Pin_Output
05FC           1704   ;        sensor_test.c:407: CS = 1; //initialize chip select 
05FC D285      1705            setb    _P0_5
05FE           1706   ;        sensor_test.c:409: rslt = bmm150_interface_selection(&dev, BMM150_SPI_INTF);
05FE 759000    1707            mov     _bmm150_interface_selection_PARM_2,#0x00
0601 90B5D8    1708            mov     dptr,#_main_dev_1_97
0604 120000    1709            lcall   _bmm150_interface_selection
0607 AA82      1710            mov     r2,dpl
0609           1711   ;        sensor_test.c:410: bmm150_error_codes_print_result("bmm150_interface_selection", rslt);
0609 8AF0      1712            mov     _bmm150_error_codes_print_result_PARM_2,r2
060B 90CD38    1713            mov     dptr,#__str_23
060E 75F080    1714            mov     b,#0x80
0611 C002      1715            push    ar2
0613 120000    1716            lcall   _bmm150_error_codes_print_result
0616 D002      1717            pop     ar2
0618           1718   ;        sensor_test.c:412: if (rslt == BMM150_OK)
0618 EA        1719            mov     a,r2
0619           1720   ;        sensor_test.c:414: rslt = bmm150_init(&dev);
0619 7000      1721            jnz     L014007?
061B 90B5D8    1722            mov     dptr,#_main_dev_1_97
061E F5F0      1723            mov     b,a
0620 120000    1724            lcall   _bmm150_init
0623 AA82      1725            mov     r2,dpl
0625           1726   ;        sensor_test.c:415: bmm150_error_codes_print_result("bmm150_init", rslt);
0625 8AF0      1727            mov     _bmm150_error_codes_print_result_PARM_2,r2
0627 90CDF8    1728            mov     dptr,#__str_24
062A 75F080    1729            mov     b,#0x80
062D C002      1730            push    ar2
062F 120000    1731            lcall   _bmm150_error_codes_print_result
0632 D002      1732            pop     ar2
0634           1733   ;        sensor_test.c:417: if (rslt == BMM150_OK)
0634 EA        1734            mov     a,r2
0635 7000      1735            jnz     L014007?
0637           1736   ;        sensor_test.c:419: rslt = set_config(&dev); 
0637 90B5D8    1737            mov     dptr,#_main_dev_1_97
063A 120000    1738            lcall   _set_config
063D AA82      1739            mov     r2,dpl
063F           1740   ;        sensor_test.c:420: bmm150_error_codes_print_result("set_config", rslt); 
063F 8AF0      1741            mov     _bmm150_error_codes_print_result_PARM_2,r2
0641 90CE38    1742            mov     dptr,#__str_25
0644 75F080    1743            mov     b,#0x80
0647 C002      1744            push    ar2
0649 120000    1745            lcall   _bmm150_error_codes_print_result
064C D002      1746            pop     ar2
064E           1747   ;        sensor_test.c:422: if (rslt == BMM150_OK)
064E EA        1748            mov     a,r2
064F 7000      1749            jnz     L014007?
0651           1750   ;        sensor_test.c:424: rslt = get_data(&dev); 
0651 90B5D8    1751            mov     dptr,#_main_dev_1_97
0654 120000    1752            lcall   _get_data
0657 8582F0    1753            mov     _bmm150_error_codes_print_result_PARM_2,dpl
065A           1754   ;        sensor_test.c:425: bmm150_error_codes_print_result("get_data", rslt); 
065A 90CE78    1755            mov     dptr,#__str_26
065D 75F080    1756            mov     b,#0x80
0660 120000    1757            lcall   _bmm150_error_codes_print_result
0663           1758   ;        sensor_test.c:426: printf("Configuration Complete - Ready to get data"); 
0663 74B8      1759            mov     a,#__str_27
0665 C0E0      1760            push    acc
0667 74CE      1761            mov     a,#(__str_27 >> 8)
0669 C0E0      1762            push    acc
066B 7480      1763            mov     a,#0x80
066D C0E0      1764            push    acc
066F 120000    1765            lcall   _printf
0672 1581      1766            dec     sp
0674 1581      1767            dec     sp
0676 1581      1768            dec     sp
0678           1769   L014007?:
0678 22        1770            ret
0679           1771            rseg R_CSEG
0679           1772   
0000           1773            rseg R_XINIT
0000           1774   
0000           1775            rseg R_CONST
0000           1776   __str_0:
0000 2573      1777            db '%s'
0002 09        1778            db 0x09
0003 00        1779            db 0x00
0004           1780   __str_1:
0004 4572726F  1781            db 'Error [%d] : Null pointer error.'
     72205B25
     645D203A
     204E756C
     6C20706F
     696E7465
     72206572
     726F722E
0024 00        1782            db 0x00
0025           1783   __str_2:
0025 4974206F  1784            db 'It occurs when the user tries to assign value (not address) '
     63637572
     73207768
     656E2074
     68652075
     73657220
     74726965
     7320746F
     20617373
     69676E20
     76616C75
     6520286E
     6F742061
     64647265
     73732920
0061 746F2061  1785            db 'to a pointer, which has been initialized to NULL.'
     20706F69
     6E746572
     2C207768
     69636820
     68617320
     6265656E
     20696E69
     7469616C
     697A6564
     20746F20
     4E554C4C
     2E
0092 0D        1786            db 0x0D
0093 0A        1787            db 0x0A
0094 00        1788            db 0x00
0095           1789   __str_3:
0095 4572726F  1790            db 'Error [%d] : Communication failure error.'
     72205B25
     645D203A
     20436F6D
     6D756E69
     63617469
     6F6E2066
     61696C75
     72652065
     72726F72
     2E
00BE 00        1791            db 0x00
00BF           1792   __str_4:
00BF 4974206F  1793            db 'It occurs due to read/write operation failure and also due t'
     63637572
     73206475
     6520746F
     20726561
     642F7772
     69746520
     6F706572
     6174696F
     6E206661
     696C7572
     6520616E
     6420616C
     736F2064
     75652074
00FB 6F20706F  1794            db 'o power failure during communication'
     77657220
     6661696C
     75726520
     64757269
     6E672063
     6F6D6D75
     6E696361
     74696F6E
011F 0D        1795            db 0x0D
0120 0A        1796            db 0x0A
0121 00        1797            db 0x00
0122           1798   __str_5:
0122 4572726F  1799            db 'Error [%d] : Device not found error. It occurs when the devi'
     72205B25
     645D203A
     20446576
     69636520
     6E6F7420
     666F756E
     64206572
     726F722E
     20497420
     6F636375
     72732077
     68656E20
     74686520
     64657669
015E 63652063  1800            db 'ce chip id is incorrectly read'
     68697020
     69642069
     7320696E
     636F7272
     6563746C
     79207265
     6164
017C 0D        1801            db 0x0D
017D 0A        1802            db 0x0A
017E 00        1803            db 0x00
017F           1804   __str_6:
017F 4572726F  1805            db 'Error [%d] : Invalid sensor configuration.'
     72205B25
     645D203A
     20496E76
     616C6964
     2073656E
     736F7220
     636F6E66
     69677572
     6174696F
     6E2E
01A9 00        1806            db 0x00
01AA           1807   __str_7:
01AA 20497420  1808            db ' It occurs when there is a mismatch in the requested feature'
     6F636375
     72732077
     68656E20
     74686572
     65206973
     2061206D
     69736D61
     74636820
     696E2074
     68652072
     65717565
     73746564
     20666561
     74757265
01E6 20776974  1809            db ' with the available one'
     68207468
     65206176
     61696C61
     626C6520
     6F6E65
01FD 0D        1810            db 0x0D
01FE 0A        1811            db 0x0A
01FF 00        1812            db 0x00
0200           1813   __str_8:
0200 4572726F  1814            db 'Error [%d] : Unknown error code'
     72205B25
     645D203A
     20556E6B
     6E6F776E
     20657272
     6F722063
     6F6465
021F 0D        1815            db 0x0D
0220 0A        1816            db 0x0A
0221 00        1817            db 0x00
0222           1818   __str_9:
0222 436F6E66  1819            db 'Configuring SPI'
     69677572
     696E6720
     535049
0231 0A        1820            db 0x0A
0232 00        1821            db 0x00
0233           1822   __str_10:
0233 53504920  1823            db 'SPI Interface Selected'
     496E7465
     72666163
     65205365
     6C656374
     6564
0249 0A        1824            db 0x0A
024A 00        1825            db 0x00
024B           1826   __str_11:
024B 496E7661  1827            db 'Invalid Interface Selection'
     6C696420
     496E7465
     72666163
     65205365
     6C656374
     696F6E
0266 0A        1828            db 0x0A
0267 00        1829            db 0x00
0268           1830   __str_12:
0268 436F6E66  1831            db 'Configuring Powermode'
     69677572
     696E6720
     506F7765
     726D6F64
     65
027D 0A        1832            db 0x0A
027E 00        1833            db 0x00
027F           1834   __str_13:
027F 626D6D31  1835            db 'bmm150_set_op_mode'
     35305F73
     65745F6F
     705F6D6F
     6465
0291 00        1836            db 0x00
0292           1837   __str_14:
0292 436F6E66  1838            db 'Configuring Presetmode'
     69677572
     696E6720
     50726573
     65746D6F
     6465
02A8 0A        1839            db 0x0A
02A9 00        1840            db 0x00
02AA           1841   __str_15:
02AA 626D6D31  1842            db 'bmm150_set_presetmode'
     35305F73
     65745F70
     72657365
     746D6F64
     65
02BF 00        1843            db 0x00
02C0           1844   __str_16:
02C0 626D6D31  1845            db 'bmm150_read_mag_data'
     35305F72
     6561645F
     6D61675F
     64617461
02D4 00        1846            db 0x00
02D5           1847   __str_17:
02D5 4D414720  1848            db 'MAG DATA[%d]  X : %d uT   Y : %d uT '
     44415441
     5B25645D
     20205820
     3A202564
     20755420
     20205920
     3A202564
     20755420
02F9 0A        1849            db 0x0A
02FA 00        1850            db 0x00
02FB           1851   __str_18:
02FB 1B        1852            db 0x1B
02FC 5B324A    1853            db '[2J'
02FF 00        1854            db 0x00
0300           1855   __str_19:
0300 45464D38  1856            db 'EFM8LB1 SPI/BMM150 test program'
     4C423120
     5350492F
     424D4D31
     35302074
     65737420
     70726F67
     72616D
031F 0A        1857            db 0x0A
0320 46696C65  1858            db 'File: %s'
     3A202573
0328 0A        1859            db 0x0A
0329 436F6D70  1860            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
0339 0A        1861            db 0x0A
033A 0A        1862            db 0x0A
033B 00        1863            db 0x00
033C           1864   __str_20:
033C 73656E73  1865            db 'sensor_test.c'
     6F725F74
     6573742E
     63
0349 00        1866            db 0x00
034A           1867   __str_21:
034A 4D617220  1868            db 'Mar 22 2025'
     32322032
     303235
0355 00        1869            db 0x00
0356           1870   __str_22:
0356 31353A34  1871            db '15:47:02'
     373A3032
035E 00        1872            db 0x00
035F           1873   __str_23:
035F 626D6D31  1874            db 'bmm150_interface_selection'
     35305F69
     6E746572
     66616365
     5F73656C
     65637469
     6F6E
0379 00        1875            db 0x00
037A           1876   __str_24:
037A 626D6D31  1877            db 'bmm150_init'
     35305F69
     6E6974
0385 00        1878            db 0x00
0386           1879   __str_25:
0386 7365745F  1880            db 'set_config'
     636F6E66
     6967
0390 00        1881            db 0x00
0391           1882   __str_26:
0391 6765745F  1883            db 'get_data'
     64617461
0399 00        1884            db 0x00
039A           1885   __str_27:
039A 436F6E66  1886            db 'Configuration Complete - Ready to get data'
     69677572
     6174696F
     6E20436F
     6D706C65
     7465202D
     20526561
     64792074
     6F206765
     74206461
     7461
03C4 00        1887            db 0x00
03C5           1888   
0003           1889            CSEG
0003           1890   
0003           1891   end
