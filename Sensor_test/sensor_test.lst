0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Mar 26 22:57:11 2025
0000              5   ;--------------------------------------------------------
                  5   $name sensor_test
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _BMM150_Read_Data
0000             29            public _BMM150_compensate_z
0000             30            public _BMM150_compensate_y
0000             31            public _BMM150_compensate_x
0000             32            public _BMM150_Init
0000             33            public _BMM150_Read_Trim_Registers
0000             34            public _SPI_write
0000             35            public _SPI_read_block
0000             36            public _SPI_read
0000             37            public _SPI_transfer
0000             38            public _waitms
0000             39            public _Timer3us
0000             40            public _Set_Pin_Output
0000             41            public __c51_external_startup
0000             42            public _BMM150_Read_Data_PARM_3
0000             43            public _BMM150_Read_Data_PARM_2
0000             44            public _BMM150_compensate_z_PARM_2
0000             45            public _BMM150_compensate_y_PARM_2
0000             46            public _BMM150_compensate_x_PARM_2
0000             47            public _SPI_write_PARM_2
0000             48            public _SPI_read_block_PARM_3
0000             49            public _SPI_read_block_PARM_2
0000             50            public _dig_xyz1
0000             51            public _dig_xy2
0000             52            public _dig_xy1
0000             53            public _dig_z4
0000             54            public _dig_z3
0000             55            public _dig_z2
0000             56            public _dig_z1
0000             57            public _dig_y2
0000             58            public _dig_y1
0000             59            public _dig_x2
0000             60            public _dig_x1
0000             61   ;--------------------------------------------------------
0000             62   ; Special Function Registers
0000             63   ;--------------------------------------------------------
0000             64   _ACC            DATA 0xe0
0000             65   _ADC0ASAH       DATA 0xb6
0000             66   _ADC0ASAL       DATA 0xb5
0000             67   _ADC0ASCF       DATA 0xa1
0000             68   _ADC0ASCT       DATA 0xc7
0000             69   _ADC0CF0        DATA 0xbc
0000             70   _ADC0CF1        DATA 0xb9
0000             71   _ADC0CF2        DATA 0xdf
0000             72   _ADC0CN0        DATA 0xe8
0000             73   _ADC0CN1        DATA 0xb2
0000             74   _ADC0CN2        DATA 0xb3
0000             75   _ADC0GTH        DATA 0xc4
0000             76   _ADC0GTL        DATA 0xc3
0000             77   _ADC0H          DATA 0xbe
0000             78   _ADC0L          DATA 0xbd
0000             79   _ADC0LTH        DATA 0xc6
0000             80   _ADC0LTL        DATA 0xc5
0000             81   _ADC0MX         DATA 0xbb
0000             82   _B              DATA 0xf0
0000             83   _CKCON0         DATA 0x8e
0000             84   _CKCON1         DATA 0xa6
0000             85   _CLEN0          DATA 0xc6
0000             86   _CLIE0          DATA 0xc7
0000             87   _CLIF0          DATA 0xe8
0000             88   _CLKSEL         DATA 0xa9
0000             89   _CLOUT0         DATA 0xd1
0000             90   _CLU0CF         DATA 0xb1
0000             91   _CLU0FN         DATA 0xaf
0000             92   _CLU0MX         DATA 0x84
0000             93   _CLU1CF         DATA 0xb3
0000             94   _CLU1FN         DATA 0xb2
0000             95   _CLU1MX         DATA 0x85
0000             96   _CLU2CF         DATA 0xb6
0000             97   _CLU2FN         DATA 0xb5
0000             98   _CLU2MX         DATA 0x91
0000             99   _CLU3CF         DATA 0xbf
0000            100   _CLU3FN         DATA 0xbe
0000            101   _CLU3MX         DATA 0xae
0000            102   _CMP0CN0        DATA 0x9b
0000            103   _CMP0CN1        DATA 0x99
0000            104   _CMP0MD         DATA 0x9d
0000            105   _CMP0MX         DATA 0x9f
0000            106   _CMP1CN0        DATA 0xbf
0000            107   _CMP1CN1        DATA 0xac
0000            108   _CMP1MD         DATA 0xab
0000            109   _CMP1MX         DATA 0xaa
0000            110   _CRC0CN0        DATA 0xce
0000            111   _CRC0CN1        DATA 0x86
0000            112   _CRC0CNT        DATA 0xd3
0000            113   _CRC0DAT        DATA 0xcb
0000            114   _CRC0FLIP       DATA 0xcf
0000            115   _CRC0IN         DATA 0xca
0000            116   _CRC0ST         DATA 0xd2
0000            117   _DAC0CF0        DATA 0x91
0000            118   _DAC0CF1        DATA 0x92
0000            119   _DAC0H          DATA 0x85
0000            120   _DAC0L          DATA 0x84
0000            121   _DAC1CF0        DATA 0x93
0000            122   _DAC1CF1        DATA 0x94
0000            123   _DAC1H          DATA 0x8a
0000            124   _DAC1L          DATA 0x89
0000            125   _DAC2CF0        DATA 0x95
0000            126   _DAC2CF1        DATA 0x96
0000            127   _DAC2H          DATA 0x8c
0000            128   _DAC2L          DATA 0x8b
0000            129   _DAC3CF0        DATA 0x9a
0000            130   _DAC3CF1        DATA 0x9c
0000            131   _DAC3H          DATA 0x8e
0000            132   _DAC3L          DATA 0x8d
0000            133   _DACGCF0        DATA 0x88
0000            134   _DACGCF1        DATA 0x98
0000            135   _DACGCF2        DATA 0xa2
0000            136   _DERIVID        DATA 0xad
0000            137   _DEVICEID       DATA 0xb5
0000            138   _DPH            DATA 0x83
0000            139   _DPL            DATA 0x82
0000            140   _EIE1           DATA 0xe6
0000            141   _EIE2           DATA 0xf3
0000            142   _EIP1           DATA 0xbb
0000            143   _EIP1H          DATA 0xee
0000            144   _EIP2           DATA 0xed
0000            145   _EIP2H          DATA 0xf6
0000            146   _EMI0CN         DATA 0xe7
0000            147   _FLKEY          DATA 0xb7
0000            148   _HFO0CAL        DATA 0xc7
0000            149   _HFO1CAL        DATA 0xd6
0000            150   _HFOCN          DATA 0xef
0000            151   _I2C0ADM        DATA 0xff
0000            152   _I2C0CN0        DATA 0xba
0000            153   _I2C0DIN        DATA 0xbc
0000            154   _I2C0DOUT       DATA 0xbb
0000            155   _I2C0FCN0       DATA 0xad
0000            156   _I2C0FCN1       DATA 0xab
0000            157   _I2C0FCT        DATA 0xf5
0000            158   _I2C0SLAD       DATA 0xbd
0000            159   _I2C0STAT       DATA 0xb9
0000            160   _IE             DATA 0xa8
0000            161   _IP             DATA 0xb8
0000            162   _IPH            DATA 0xf2
0000            163   _IT01CF         DATA 0xe4
0000            164   _LFO0CN         DATA 0xb1
0000            165   _P0             DATA 0x80
0000            166   _P0MASK         DATA 0xfe
0000            167   _P0MAT          DATA 0xfd
0000            168   _P0MDIN         DATA 0xf1
0000            169   _P0MDOUT        DATA 0xa4
0000            170   _P0SKIP         DATA 0xd4
0000            171   _P1             DATA 0x90
0000            172   _P1MASK         DATA 0xee
0000            173   _P1MAT          DATA 0xed
0000            174   _P1MDIN         DATA 0xf2
0000            175   _P1MDOUT        DATA 0xa5
0000            176   _P1SKIP         DATA 0xd5
0000            177   _P2             DATA 0xa0
0000            178   _P2MASK         DATA 0xfc
0000            179   _P2MAT          DATA 0xfb
0000            180   _P2MDIN         DATA 0xf3
0000            181   _P2MDOUT        DATA 0xa6
0000            182   _P2SKIP         DATA 0xcc
0000            183   _P3             DATA 0xb0
0000            184   _P3MDIN         DATA 0xf4
0000            185   _P3MDOUT        DATA 0x9c
0000            186   _PCA0CENT       DATA 0x9e
0000            187   _PCA0CLR        DATA 0x9c
0000            188   _PCA0CN0        DATA 0xd8
0000            189   _PCA0CPH0       DATA 0xfc
0000            190   _PCA0CPH1       DATA 0xea
0000            191   _PCA0CPH2       DATA 0xec
0000            192   _PCA0CPH3       DATA 0xf5
0000            193   _PCA0CPH4       DATA 0x85
0000            194   _PCA0CPH5       DATA 0xde
0000            195   _PCA0CPL0       DATA 0xfb
0000            196   _PCA0CPL1       DATA 0xe9
0000            197   _PCA0CPL2       DATA 0xeb
0000            198   _PCA0CPL3       DATA 0xf4
0000            199   _PCA0CPL4       DATA 0x84
0000            200   _PCA0CPL5       DATA 0xdd
0000            201   _PCA0CPM0       DATA 0xda
0000            202   _PCA0CPM1       DATA 0xdb
0000            203   _PCA0CPM2       DATA 0xdc
0000            204   _PCA0CPM3       DATA 0xae
0000            205   _PCA0CPM4       DATA 0xaf
0000            206   _PCA0CPM5       DATA 0xcc
0000            207   _PCA0H          DATA 0xfa
0000            208   _PCA0L          DATA 0xf9
0000            209   _PCA0MD         DATA 0xd9
0000            210   _PCA0POL        DATA 0x96
0000            211   _PCA0PWM        DATA 0xf7
0000            212   _PCON0          DATA 0x87
0000            213   _PCON1          DATA 0xcd
0000            214   _PFE0CN         DATA 0xc1
0000            215   _PRTDRV         DATA 0xf6
0000            216   _PSCTL          DATA 0x8f
0000            217   _PSTAT0         DATA 0xaa
0000            218   _PSW            DATA 0xd0
0000            219   _REF0CN         DATA 0xd1
0000            220   _REG0CN         DATA 0xc9
0000            221   _REVID          DATA 0xb6
0000            222   _RSTSRC         DATA 0xef
0000            223   _SBCON1         DATA 0x94
0000            224   _SBRLH1         DATA 0x96
0000            225   _SBRLL1         DATA 0x95
0000            226   _SBUF           DATA 0x99
0000            227   _SBUF0          DATA 0x99
0000            228   _SBUF1          DATA 0x92
0000            229   _SCON           DATA 0x98
0000            230   _SCON0          DATA 0x98
0000            231   _SCON1          DATA 0xc8
0000            232   _SFRPAGE        DATA 0xa7
0000            233   _SFRPGCN        DATA 0xbc
0000            234   _SFRSTACK       DATA 0xd7
0000            235   _SMB0ADM        DATA 0xd6
0000            236   _SMB0ADR        DATA 0xd7
0000            237   _SMB0CF         DATA 0xc1
0000            238   _SMB0CN0        DATA 0xc0
0000            239   _SMB0DAT        DATA 0xc2
0000            240   _SMB0FCN0       DATA 0xc3
0000            241   _SMB0FCN1       DATA 0xc4
0000            242   _SMB0FCT        DATA 0xef
0000            243   _SMB0RXLN       DATA 0xc5
0000            244   _SMB0TC         DATA 0xac
0000            245   _SMOD1          DATA 0x93
0000            246   _SP             DATA 0x81
0000            247   _SPI0CFG        DATA 0xa1
0000            248   _SPI0CKR        DATA 0xa2
0000            249   _SPI0CN0        DATA 0xf8
0000            250   _SPI0DAT        DATA 0xa3
0000            251   _SPI0FCN0       DATA 0x9a
0000            252   _SPI0FCN1       DATA 0x9b
0000            253   _SPI0FCT        DATA 0xf7
0000            254   _SPI0PCF        DATA 0xdf
0000            255   _TCON           DATA 0x88
0000            256   _TH0            DATA 0x8c
0000            257   _TH1            DATA 0x8d
0000            258   _TL0            DATA 0x8a
0000            259   _TL1            DATA 0x8b
0000            260   _TMOD           DATA 0x89
0000            261   _TMR2CN0        DATA 0xc8
0000            262   _TMR2CN1        DATA 0xfd
0000            263   _TMR2H          DATA 0xcf
0000            264   _TMR2L          DATA 0xce
0000            265   _TMR2RLH        DATA 0xcb
0000            266   _TMR2RLL        DATA 0xca
0000            267   _TMR3CN0        DATA 0x91
0000            268   _TMR3CN1        DATA 0xfe
0000            269   _TMR3H          DATA 0x95
0000            270   _TMR3L          DATA 0x94
0000            271   _TMR3RLH        DATA 0x93
0000            272   _TMR3RLL        DATA 0x92
0000            273   _TMR4CN0        DATA 0x98
0000            274   _TMR4CN1        DATA 0xff
0000            275   _TMR4H          DATA 0xa5
0000            276   _TMR4L          DATA 0xa4
0000            277   _TMR4RLH        DATA 0xa3
0000            278   _TMR4RLL        DATA 0xa2
0000            279   _TMR5CN0        DATA 0xc0
0000            280   _TMR5CN1        DATA 0xf1
0000            281   _TMR5H          DATA 0xd5
0000            282   _TMR5L          DATA 0xd4
0000            283   _TMR5RLH        DATA 0xd3
0000            284   _TMR5RLL        DATA 0xd2
0000            285   _UART0PCF       DATA 0xd9
0000            286   _UART1FCN0      DATA 0x9d
0000            287   _UART1FCN1      DATA 0xd8
0000            288   _UART1FCT       DATA 0xfa
0000            289   _UART1LIN       DATA 0x9e
0000            290   _UART1PCF       DATA 0xda
0000            291   _VDM0CN         DATA 0xff
0000            292   _WDTCN          DATA 0x97
0000            293   _XBR0           DATA 0xe1
0000            294   _XBR1           DATA 0xe2
0000            295   _XBR2           DATA 0xe3
0000            296   _XOSC0CN        DATA 0x86
0000            297   _DPTR           DATA 0x8382
0000            298   _TMR2RL         DATA 0xcbca
0000            299   _TMR3RL         DATA 0x9392
0000            300   _TMR4RL         DATA 0xa3a2
0000            301   _TMR5RL         DATA 0xd3d2
0000            302   _TMR0           DATA 0x8c8a
0000            303   _TMR1           DATA 0x8d8b
0000            304   _TMR2           DATA 0xcfce
0000            305   _TMR3           DATA 0x9594
0000            306   _TMR4           DATA 0xa5a4
0000            307   _TMR5           DATA 0xd5d4
0000            308   _SBRL1          DATA 0x9695
0000            309   _PCA0           DATA 0xfaf9
0000            310   _PCA0CP0        DATA 0xfcfb
0000            311   _PCA0CP1        DATA 0xeae9
0000            312   _PCA0CP2        DATA 0xeceb
0000            313   _PCA0CP3        DATA 0xf5f4
0000            314   _PCA0CP4        DATA 0x8584
0000            315   _PCA0CP5        DATA 0xdedd
0000            316   _ADC0ASA        DATA 0xb6b5
0000            317   _ADC0GT         DATA 0xc4c3
0000            318   _ADC0           DATA 0xbebd
0000            319   _ADC0LT         DATA 0xc6c5
0000            320   _DAC0           DATA 0x8584
0000            321   _DAC1           DATA 0x8a89
0000            322   _DAC2           DATA 0x8c8b
0000            323   _DAC3           DATA 0x8e8d
0000            324   ;--------------------------------------------------------
0000            325   ; special function bits
0000            326   ;--------------------------------------------------------
0000            327   _ACC_0          BIT 0xe0
0000            328   _ACC_1          BIT 0xe1
0000            329   _ACC_2          BIT 0xe2
0000            330   _ACC_3          BIT 0xe3
0000            331   _ACC_4          BIT 0xe4
0000            332   _ACC_5          BIT 0xe5
0000            333   _ACC_6          BIT 0xe6
0000            334   _ACC_7          BIT 0xe7
0000            335   _TEMPE          BIT 0xe8
0000            336   _ADGN0          BIT 0xe9
0000            337   _ADGN1          BIT 0xea
0000            338   _ADWINT         BIT 0xeb
0000            339   _ADBUSY         BIT 0xec
0000            340   _ADINT          BIT 0xed
0000            341   _IPOEN          BIT 0xee
0000            342   _ADEN           BIT 0xef
0000            343   _B_0            BIT 0xf0
0000            344   _B_1            BIT 0xf1
0000            345   _B_2            BIT 0xf2
0000            346   _B_3            BIT 0xf3
0000            347   _B_4            BIT 0xf4
0000            348   _B_5            BIT 0xf5
0000            349   _B_6            BIT 0xf6
0000            350   _B_7            BIT 0xf7
0000            351   _C0FIF          BIT 0xe8
0000            352   _C0RIF          BIT 0xe9
0000            353   _C1FIF          BIT 0xea
0000            354   _C1RIF          BIT 0xeb
0000            355   _C2FIF          BIT 0xec
0000            356   _C2RIF          BIT 0xed
0000            357   _C3FIF          BIT 0xee
0000            358   _C3RIF          BIT 0xef
0000            359   _D1SRC0         BIT 0x88
0000            360   _D1SRC1         BIT 0x89
0000            361   _D1AMEN         BIT 0x8a
0000            362   _D01REFSL       BIT 0x8b
0000            363   _D3SRC0         BIT 0x8c
0000            364   _D3SRC1         BIT 0x8d
0000            365   _D3AMEN         BIT 0x8e
0000            366   _D23REFSL       BIT 0x8f
0000            367   _D0UDIS         BIT 0x98
0000            368   _D1UDIS         BIT 0x99
0000            369   _D2UDIS         BIT 0x9a
0000            370   _D3UDIS         BIT 0x9b
0000            371   _EX0            BIT 0xa8
0000            372   _ET0            BIT 0xa9
0000            373   _EX1            BIT 0xaa
0000            374   _ET1            BIT 0xab
0000            375   _ES0            BIT 0xac
0000            376   _ET2            BIT 0xad
0000            377   _ESPI0          BIT 0xae
0000            378   _EA             BIT 0xaf
0000            379   _PX0            BIT 0xb8
0000            380   _PT0            BIT 0xb9
0000            381   _PX1            BIT 0xba
0000            382   _PT1            BIT 0xbb
0000            383   _PS0            BIT 0xbc
0000            384   _PT2            BIT 0xbd
0000            385   _PSPI0          BIT 0xbe
0000            386   _P0_0           BIT 0x80
0000            387   _P0_1           BIT 0x81
0000            388   _P0_2           BIT 0x82
0000            389   _P0_3           BIT 0x83
0000            390   _P0_4           BIT 0x84
0000            391   _P0_5           BIT 0x85
0000            392   _P0_6           BIT 0x86
0000            393   _P0_7           BIT 0x87
0000            394   _P1_0           BIT 0x90
0000            395   _P1_1           BIT 0x91
0000            396   _P1_2           BIT 0x92
0000            397   _P1_3           BIT 0x93
0000            398   _P1_4           BIT 0x94
0000            399   _P1_5           BIT 0x95
0000            400   _P1_6           BIT 0x96
0000            401   _P1_7           BIT 0x97
0000            402   _P2_0           BIT 0xa0
0000            403   _P2_1           BIT 0xa1
0000            404   _P2_2           BIT 0xa2
0000            405   _P2_3           BIT 0xa3
0000            406   _P2_4           BIT 0xa4
0000            407   _P2_5           BIT 0xa5
0000            408   _P2_6           BIT 0xa6
0000            409   _P3_0           BIT 0xb0
0000            410   _P3_1           BIT 0xb1
0000            411   _P3_2           BIT 0xb2
0000            412   _P3_3           BIT 0xb3
0000            413   _P3_4           BIT 0xb4
0000            414   _P3_7           BIT 0xb7
0000            415   _CCF0           BIT 0xd8
0000            416   _CCF1           BIT 0xd9
0000            417   _CCF2           BIT 0xda
0000            418   _CCF3           BIT 0xdb
0000            419   _CCF4           BIT 0xdc
0000            420   _CCF5           BIT 0xdd
0000            421   _CR             BIT 0xde
0000            422   _CF             BIT 0xdf
0000            423   _PARITY         BIT 0xd0
0000            424   _F1             BIT 0xd1
0000            425   _OV             BIT 0xd2
0000            426   _RS0            BIT 0xd3
0000            427   _RS1            BIT 0xd4
0000            428   _F0             BIT 0xd5
0000            429   _AC             BIT 0xd6
0000            430   _CY             BIT 0xd7
0000            431   _RI             BIT 0x98
0000            432   _TI             BIT 0x99
0000            433   _RB8            BIT 0x9a
0000            434   _TB8            BIT 0x9b
0000            435   _REN            BIT 0x9c
0000            436   _CE             BIT 0x9d
0000            437   _SMODE          BIT 0x9e
0000            438   _RI1            BIT 0xc8
0000            439   _TI1            BIT 0xc9
0000            440   _RBX1           BIT 0xca
0000            441   _TBX1           BIT 0xcb
0000            442   _REN1           BIT 0xcc
0000            443   _PERR1          BIT 0xcd
0000            444   _OVR1           BIT 0xce
0000            445   _SI             BIT 0xc0
0000            446   _ACK            BIT 0xc1
0000            447   _ARBLOST        BIT 0xc2
0000            448   _ACKRQ          BIT 0xc3
0000            449   _STO            BIT 0xc4
0000            450   _STA            BIT 0xc5
0000            451   _TXMODE         BIT 0xc6
0000            452   _MASTER         BIT 0xc7
0000            453   _SPIEN          BIT 0xf8
0000            454   _TXNF           BIT 0xf9
0000            455   _NSSMD0         BIT 0xfa
0000            456   _NSSMD1         BIT 0xfb
0000            457   _RXOVRN         BIT 0xfc
0000            458   _MODF           BIT 0xfd
0000            459   _WCOL           BIT 0xfe
0000            460   _SPIF           BIT 0xff
0000            461   _IT0            BIT 0x88
0000            462   _IE0            BIT 0x89
0000            463   _IT1            BIT 0x8a
0000            464   _IE1            BIT 0x8b
0000            465   _TR0            BIT 0x8c
0000            466   _TF0            BIT 0x8d
0000            467   _TR1            BIT 0x8e
0000            468   _TF1            BIT 0x8f
0000            469   _T2XCLK0        BIT 0xc8
0000            470   _T2XCLK1        BIT 0xc9
0000            471   _TR2            BIT 0xca
0000            472   _T2SPLIT        BIT 0xcb
0000            473   _TF2CEN         BIT 0xcc
0000            474   _TF2LEN         BIT 0xcd
0000            475   _TF2L           BIT 0xce
0000            476   _TF2H           BIT 0xcf
0000            477   _T4XCLK0        BIT 0x98
0000            478   _T4XCLK1        BIT 0x99
0000            479   _TR4            BIT 0x9a
0000            480   _T4SPLIT        BIT 0x9b
0000            481   _TF4CEN         BIT 0x9c
0000            482   _TF4LEN         BIT 0x9d
0000            483   _TF4L           BIT 0x9e
0000            484   _TF4H           BIT 0x9f
0000            485   _T5XCLK0        BIT 0xc0
0000            486   _T5XCLK1        BIT 0xc1
0000            487   _TR5            BIT 0xc2
0000            488   _T5SPLIT        BIT 0xc3
0000            489   _TF5CEN         BIT 0xc4
0000            490   _TF5LEN         BIT 0xc5
0000            491   _TF5L           BIT 0xc6
0000            492   _TF5H           BIT 0xc7
0000            493   _RIE            BIT 0xd8
0000            494   _RXTO0          BIT 0xd9
0000            495   _RXTO1          BIT 0xda
0000            496   _RFRQ           BIT 0xdb
0000            497   _TIE            BIT 0xdc
0000            498   _TXHOLD         BIT 0xdd
0000            499   _TXNF1          BIT 0xde
0000            500   _TFRQ           BIT 0xdf
0000            501   ;--------------------------------------------------------
0000            502   ; overlayable register banks
0000            503   ;--------------------------------------------------------
0000            504            rbank0 segment data overlay
0000            505   ;--------------------------------------------------------
0000            506   ; internal ram data
0000            507   ;--------------------------------------------------------
0000            508            rseg R_DSEG
0000            509   _dig_x1:
0000            510            ds 1
0001            511   _dig_x2:
0001            512            ds 1
0002            513   _dig_y1:
0002            514            ds 1
0003            515   _dig_y2:
0003            516            ds 1
0004            517   _dig_z1:
0004            518            ds 1
0005            519   _dig_z2:
0005            520            ds 1
0006            521   _dig_z3:
0006            522            ds 1
0007            523   _dig_z4:
0007            524            ds 1
0008            525   _dig_xy1:
0008            526            ds 1
0009            527   _dig_xy2:
0009            528            ds 1
000A            529   _dig_xyz1:
000A            530            ds 1
000B            531   _SPI_read_block_PARM_2:
000B            532            ds 3
000E            533   _SPI_read_block_PARM_3:
000E            534            ds 1
000F            535   _SPI_write_PARM_2:
000F            536            ds 1
0010            537   _BMM150_compensate_x_PARM_2:
0010            538            ds 3
0013            539   _BMM150_compensate_x_sloc0_1_0:
0013            540            ds 4
0017            541   _BMM150_compensate_y_PARM_2:
0017            542            ds 3
001A            543   _BMM150_compensate_y_sloc0_1_0:
001A            544            ds 4
001E            545   _BMM150_compensate_z_PARM_2:
001E            546            ds 3
0021            547   _BMM150_compensate_z_sloc0_1_0:
0021            548            ds 2
0023            549   _BMM150_compensate_z_sloc1_1_0:
0023            550            ds 4
0027            551   _BMM150_compensate_z_sloc2_1_0:
0027            552            ds 4
002B            553   _BMM150_Read_Data_PARM_2:
002B            554            ds 3
002E            555   _BMM150_Read_Data_PARM_3:
002E            556            ds 3
0031            557   _BMM150_Read_Data_mag_x_1_118:
0031            558            ds 3
0034            559   _BMM150_Read_Data_raw_y_lsb_1_119:
0034            560            ds 1
0035            561   _BMM150_Read_Data_raw_y_msb_1_119:
0035            562            ds 1
0036            563   _BMM150_Read_Data_raw_z_lsb_1_119:
0036            564            ds 1
0037            565   _BMM150_Read_Data_raw_z_msb_1_119:
0037            566            ds 1
0038            567   _BMM150_Read_Data_raw_rhall_lsb_1_119:
0038            568            ds 1
0039            569   _BMM150_Read_Data_raw_rhall_msb_1_119:
0039            570            ds 1
003A            571   _BMM150_Read_Data_raw_z_1_119:
003A            572            ds 2
003C            573   _BMM150_Read_Data_x_val_1_119:
003C            574            ds 2
003E            575   _BMM150_Read_Data_y_val_1_119:
003E            576            ds 2
0040            577   _BMM150_Read_Data_z_val_1_119:
0040            578            ds 2
0042            579   _BMM150_Read_Data_rhall_val_1_119:
0042            580            ds 2
0044            581   _main_sloc0_1_0:
0044            582            ds 4
0048            583   _main_sloc1_1_0:
0048            584            ds 1
0049            585   ;--------------------------------------------------------
0049            586   ; overlayable items in internal ram 
0049            587   ;--------------------------------------------------------
0000            588            rseg    R_OSEG
0000            589            rseg    R_OSEG
0000            590            rseg    R_OSEG
0000            591   ;--------------------------------------------------------
0000            592   ; indirectly addressable internal ram data
0000            593   ;--------------------------------------------------------
0000            594            rseg R_ISEG
0000            595   ;--------------------------------------------------------
0000            596   ; absolute internal ram data
0000            597   ;--------------------------------------------------------
0000            598            DSEG
0000            599   ;--------------------------------------------------------
0000            600   ; bit data
0000            601   ;--------------------------------------------------------
0000            602            rseg R_BSEG
0000            603   ;--------------------------------------------------------
0000            604   ; paged external ram data
0000            605   ;--------------------------------------------------------
0000            606            rseg R_PSEG
0000            607   ;--------------------------------------------------------
0000            608   ; external ram data
0000            609   ;--------------------------------------------------------
0000            610            rseg R_XSEG
0000            611   _BMM150_Read_Trim_Registers_trim_x1y1_1_84:
0000            612            ds 2
0002            613   _BMM150_Read_Trim_Registers_trim_xyz_data_1_84:
0002            614            ds 4
0006            615   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_84:
0006            616            ds 10
0010            617   _BMM150_compensate_x_retval_1_93:
0010            618            ds 2
0012            619   _BMM150_compensate_x_process_comp_x0_1_93:
0012            620            ds 2
0014            621   _BMM150_compensate_y_retval_1_102:
0014            622            ds 2
0016            623   _BMM150_compensate_y_process_comp_y0_1_102:
0016            624            ds 2
0018            625   _BMM150_compensate_z_retval_1_111:
0018            626            ds 4
001C            627   _main_mag_x_1_123:
001C            628            ds 2
001E            629   _main_mag_y_1_123:
001E            630            ds 2
0020            631   _main_mag_z_1_123:
0020            632            ds 2
0022            633   _main_sum_x_1_123:
0022            634            ds 4
0026            635   _main_sum_y_1_123:
0026            636            ds 4
002A            637   _main_smoothed_angle_1_123:
002A            638            ds 4
002E            639   _main_delta_1_123:
002E            640            ds 4
0032            641   _main_prev_angle_1_123:
0032            642            ds 4
0036            643   _main_cumulative_angle_1_123:
0036            644            ds 4
003A            645   ;--------------------------------------------------------
003A            646   ; absolute external ram data
003A            647   ;--------------------------------------------------------
0000            648            XSEG
0000            649   ;--------------------------------------------------------
0000            650   ; external initialized ram data
0000            651   ;--------------------------------------------------------
0000            652            rseg R_IXSEG
0000            653            rseg R_HOME
0000            654            rseg R_GSINIT
0000            655            rseg R_CSEG
0000            656   ;--------------------------------------------------------
0000            657   ; Reset entry point and interrupt vectors
0000            658   ;--------------------------------------------------------
0000            659            CSEG at 0x0000
0000 020000     660            ljmp    _crt0
0003            661   ;--------------------------------------------------------
0003            662   ; global & static initialisations
0003            663   ;--------------------------------------------------------
0000            664            rseg R_HOME
0000            665            rseg R_GSINIT
0000            666            rseg R_GSINIT
0000            667   ;--------------------------------------------------------
0000            668   ; data variables initialization
0000            669   ;--------------------------------------------------------
0000            670            rseg R_DINIT
0000            671            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            672   ;--------------------------------------------------------
0000            673   ; code
0000            674   ;--------------------------------------------------------
0000            675            rseg R_CSEG
0000            676   ;------------------------------------------------------------
0000            677   ;Allocation info for local variables in function '_c51_external_startup'
0000            678   ;------------------------------------------------------------
0000            679   ;------------------------------------------------------------
0000            680   ;        sensor_test.c:74: char _c51_external_startup (void)
0000            681   ;        -----------------------------------------
0000            682   ;         function _c51_external_startup
0000            683   ;        -----------------------------------------
0000            684   __c51_external_startup:
0000            685            using   0
0000            686   ;        sensor_test.c:77: SFRPAGE = 0x00;
0000 75A700     687            mov     _SFRPAGE,#0x00
0003            688   ;        sensor_test.c:78: WDTCN = 0xDE; //First key
0003 7597DE     689            mov     _WDTCN,#0xDE
0006            690   ;        sensor_test.c:79: WDTCN = 0xAD; //Second key
0006 7597AD     691            mov     _WDTCN,#0xAD
0009            692   ;        sensor_test.c:81: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     693            mov     _VDM0CN,#0x80
000C            694   ;        sensor_test.c:82: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     695            mov     _RSTSRC,#0x06
000F            696   ;        sensor_test.c:89: SFRPAGE = 0x10;
000F 75A710     697            mov     _SFRPAGE,#0x10
0012            698   ;        sensor_test.c:90: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     699            mov     _PFE0CN,#0x20
0015            700   ;        sensor_test.c:91: SFRPAGE = 0x00;
0015 75A700     701            mov     _SFRPAGE,#0x00
0018            702   ;        sensor_test.c:112: CLKSEL = 0x00;
0018 75A900     703            mov     _CLKSEL,#0x00
001B            704   ;        sensor_test.c:113: CLKSEL = 0x00;
001B 75A900     705            mov     _CLKSEL,#0x00
001E            706   ;        sensor_test.c:114: while ((CLKSEL & 0x80) == 0);
001E            707   L002001?:
001E E5A9       708            mov     a,_CLKSEL
0020 30E7A8     709            jnb     acc.7,L002001?
0023            710   ;        sensor_test.c:115: CLKSEL = 0x03;
0023 75A903     711            mov     _CLKSEL,#0x03
0026            712   ;        sensor_test.c:116: CLKSEL = 0x03;
0026 75A903     713            mov     _CLKSEL,#0x03
0029            714   ;        sensor_test.c:117: while ((CLKSEL & 0x80) == 0);
0029            715   L002004?:
0029 E5A9       716            mov     a,_CLKSEL
002B 30E728     717            jnb     acc.7,L002004?
002E            718   ;        sensor_test.c:123: P0MDOUT = 0b_0000_1101; // SCK, MOSI, and P0.3 are push-pull, others open-drain
002E 75A40D     719            mov     _P0MDOUT,#0x0D
0031            720   ;        sensor_test.c:124: P1MDOUT = 0b_0000_0000; // P1 all open-drain
0031 75A500     721            mov     _P1MDOUT,#0x00
0034            722   ;        sensor_test.c:125: XBR0 = 0b_0000_0011;    // SPI0E=1, URT0E=1
0034 75E103     723            mov     _XBR0,#0x03
0037            724   ;        sensor_test.c:126: XBR1 = 0b_0000_0000;
0037 75E200     725            mov     _XBR1,#0x00
003A            726   ;        sensor_test.c:127: XBR2 = 0b_0100_0000;    // Enable crossbar and weak pull-ups
003A 75E340     727            mov     _XBR2,#0x40
003D            728   ;        sensor_test.c:133: SCON0 = 0x10;
003D 759810     729            mov     _SCON0,#0x10
0040            730   ;        sensor_test.c:134: TH1 = 0x100-((SYSCLK/BAUDRATE)/(12L*2L));
0040 758DE6     731            mov     _TH1,#0xE6
0043            732   ;        sensor_test.c:135: TL1 = TH1;      // Init Timer1
0043 858D8B     733            mov     _TL1,_TH1
0046            734   ;        sensor_test.c:136: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     735            anl     _TMOD,#0x0F
0049            736   ;        sensor_test.c:137: TMOD |=  0x20;                       
0049 438920     737            orl     _TMOD,#0x20
004C            738   ;        sensor_test.c:138: TR1 = 1; // START Timer1
004C D28E       739            setb    _TR1
004E            740   ;        sensor_test.c:139: TI = 1;  // Indicate TX0 ready
004E D299       741            setb    _TI
0050            742   ;        sensor_test.c:142: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
0050 75A211     743            mov     _SPI0CKR,#0x11
0053            744   ;        sensor_test.c:143: SPI0CFG = 0b_1110_0000; // this is mode 3, you need to determine the sampling etc. in datasheet
0053 75A1E0     745            mov     _SPI0CFG,#0xE0
0056            746   ;        sensor_test.c:144: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0056 75F801     747            mov     _SPI0CN0,#0x01
0059            748   ;        sensor_test.c:146: return 0;
0059 758200     749            mov     dpl,#0x00
005C 22         750            ret
005D            751   ;------------------------------------------------------------
005D            752   ;Allocation info for local variables in function 'Set_Pin_Output'
005D            753   ;------------------------------------------------------------
005D            754   ;mask                      Allocated with name '_Set_Pin_Output_mask_1_67'
005D            755   ;pin                       Allocated to registers r2 
005D            756   ;------------------------------------------------------------
005D            757   ;        sensor_test.c:149: void Set_Pin_Output (unsigned char pin)
005D            758   ;        -----------------------------------------
005D            759   ;         function Set_Pin_Output
005D            760   ;        -----------------------------------------
005D            761   _Set_Pin_Output:
005D AA82       762            mov     r2,dpl
005F            763   ;        sensor_test.c:153: mask=(1<<(pin&0x7));
005F 7407       764            mov     a,#0x07
0061 5A         765            anl     a,r2
0062 F5F0       766            mov     b,a
0064 05F0       767            inc     b
0066 7401       768            mov     a,#0x01
0068 8000       769            sjmp    L003011?
006A            770   L003009?:
006A 25E0       771            add     a,acc
006C            772   L003011?:
006C D5F028     773            djnz    b,L003009?
006F FB         774            mov     r3,a
0070            775   ;        sensor_test.c:154: switch(pin/0x10)
0070 EA         776            mov     a,r2
0071 C4         777            swap    a
0072 540F       778            anl     a,#0x0f
0074 FA         779            mov  r2,a
0075 24FC       780            add     a,#0xff - 0x03
0077 4000       781            jc      L003006?
0079 EA         782            mov     a,r2
007A 2A         783            add     a,r2
007B 2A         784            add     a,r2
007C 90CAA8     785            mov     dptr,#L003013?
007F 73         786            jmp     @a+dptr
0080            787   L003013?:
0080 020000     788            ljmp    L003001?
0083 020000     789            ljmp    L003002?
0086 020000     790            ljmp    L003003?
0089 020000     791            ljmp    L003004?
008C            792   ;        sensor_test.c:156: case 0: P0MDOUT |= mask; break;
008C            793   L003001?:
008C EB         794            mov     a,r3
008D 42A4       795            orl     _P0MDOUT,a
008F            796   ;        sensor_test.c:157: case 1: P1MDOUT |= mask; break;
008F 22         797            ret
0090            798   L003002?:
0090 EB         799            mov     a,r3
0091 42A5       800            orl     _P1MDOUT,a
0093            801   ;        sensor_test.c:158: case 2: P2MDOUT |= mask; break; 
0093 22         802            ret
0094            803   L003003?:
0094 EB         804            mov     a,r3
0095 42A6       805            orl     _P2MDOUT,a
0097            806   ;        sensor_test.c:159: case 3: P3MDOUT |= mask; break; 
0097 22         807            ret
0098            808   L003004?:
0098 EB         809            mov     a,r3
0099 429C       810            orl     _P3MDOUT,a
009B            811   ;        sensor_test.c:160: }    
009B            812   L003006?:
009B 22         813            ret
009C            814   ;------------------------------------------------------------
009C            815   ;Allocation info for local variables in function 'Timer3us'
009C            816   ;------------------------------------------------------------
009C            817   ;i                         Allocated with name '_Timer3us_i_1_70'
009C            818   ;us                        Allocated to registers r2 
009C            819   ;------------------------------------------------------------
009C            820   ;        sensor_test.c:164: void Timer3us(unsigned char us)
009C            821   ;        -----------------------------------------
009C            822   ;         function Timer3us
009C            823   ;        -----------------------------------------
009C            824   _Timer3us:
009C AA82       825            mov     r2,dpl
009E            826   ;        sensor_test.c:169: CKCON0|=0b_0100_0000;
009E 438E40     827            orl     _CKCON0,#0x40
00A1            828   ;        sensor_test.c:171: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
00A1 7592B8     829            mov     _TMR3RL,#0xB8
00A4 7593FF     830            mov     (_TMR3RL >> 8),#0xFF
00A7            831   ;        sensor_test.c:172: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
00A7 859294     832            mov     _TMR3,_TMR3RL
00AA 859395     833            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
00AD            834   ;        sensor_test.c:174: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
00AD 759104     835            mov     _TMR3CN0,#0x04
00B0            836   ;        sensor_test.c:175: for (i = 0; i < us; i++)       // Count <us> overflows
00B0 7B00       837            mov     r3,#0x00
00B2            838   L004004?:
00B2 C3         839            clr     c
00B3 EB         840            mov     a,r3
00B4 9A         841            subb    a,r2
00B5 5000       842            jnc     L004007?
00B7            843   ;        sensor_test.c:177: while (!(TMR3CN0 & 0x80));  // Wait for overflow
00B7            844   L004001?:
00B7 E591       845            mov     a,_TMR3CN0
00B9 30E768     846            jnb     acc.7,L004001?
00BC            847   ;        sensor_test.c:178: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
00BC 53917F     848            anl     _TMR3CN0,#0x7F
00BF            849   ;        sensor_test.c:175: for (i = 0; i < us; i++)       // Count <us> overflows
00BF 0B         850            inc     r3
00C0 8000       851            sjmp    L004004?
00C2            852   L004007?:
00C2            853   ;        sensor_test.c:180: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00C2 759100     854            mov     _TMR3CN0,#0x00
00C5 22         855            ret
00C6            856   ;------------------------------------------------------------
00C6            857   ;Allocation info for local variables in function 'waitms'
00C6            858   ;------------------------------------------------------------
00C6            859   ;ms                        Allocated to registers r2 r3 
00C6            860   ;j                         Allocated with name '_waitms_j_1_73'
00C6            861   ;k                         Allocated with name '_waitms_k_1_73'
00C6            862   ;------------------------------------------------------------
00C6            863   ;        sensor_test.c:183: void waitms (unsigned int ms)
00C6            864   ;        -----------------------------------------
00C6            865   ;         function waitms
00C6            866   ;        -----------------------------------------
00C6            867   _waitms:
00C6 AA82       868            mov     r2,dpl
00C8 AB83       869            mov     r3,dph
00CA            870   ;        sensor_test.c:187: for(j=0; j<ms; j++)
00CA 7C00       871            mov     r4,#0x00
00CC 7D00       872            mov     r5,#0x00
00CE            873   L005005?:
00CE C3         874            clr     c
00CF EC         875            mov     a,r4
00D0 9A         876            subb    a,r2
00D1 ED         877            mov     a,r5
00D2 9B         878            subb    a,r3
00D3 5000       879            jnc     L005009?
00D5            880   ;        sensor_test.c:188: for (k=0; k<4; k++) Timer3us(250);
00D5 7E00       881            mov     r6,#0x00
00D7            882   L005001?:
00D7 BE04A8     883            cjne    r6,#0x04,L005018?
00DA            884   L005018?:
00DA 5000       885            jnc     L005007?
00DC 7582FA     886            mov     dpl,#0xFA
00DF C002       887            push    ar2
00E1 C003       888            push    ar3
00E3 C004       889            push    ar4
00E5 C005       890            push    ar5
00E7 C006       891            push    ar6
00E9 120000     892            lcall   _Timer3us
00EC D006       893            pop     ar6
00EE D005       894            pop     ar5
00F0 D004       895            pop     ar4
00F2 D003       896            pop     ar3
00F4 D002       897            pop     ar2
00F6 0E         898            inc     r6
00F7 8000       899            sjmp    L005001?
00F9            900   L005007?:
00F9            901   ;        sensor_test.c:187: for(j=0; j<ms; j++)
00F9 0C         902            inc     r4
00FA BC00E8     903            cjne    r4,#0x00,L005005?
00FD 0D         904            inc     r5
00FE 8000       905            sjmp    L005005?
0100            906   L005009?:
0100 22         907            ret
0101            908   ;------------------------------------------------------------
0101            909   ;Allocation info for local variables in function 'SPI_transfer'
0101            910   ;------------------------------------------------------------
0101            911   ;tx_data                   Allocated to registers 
0101            912   ;------------------------------------------------------------
0101            913   ;        sensor_test.c:191: unsigned char SPI_transfer(unsigned char tx_data)
0101            914   ;        -----------------------------------------
0101            915   ;         function SPI_transfer
0101            916   ;        -----------------------------------------
0101            917   _SPI_transfer:
0101 8582A3     918            mov     _SPI0DAT,dpl
0104            919   ;        sensor_test.c:194: while (!SPIF);      // Wait for transfer to complete
0104            920   L006001?:
0104            921   ;        sensor_test.c:195: SPIF = 0;           // Clear SPI interrupt flag
0104 10FF68     922            jbc     _SPIF,L006008?
0107 8000       923            sjmp    L006001?
0109            924   L006008?:
0109            925   ;        sensor_test.c:196: return SPI0DAT;     // Return received data
0109 85A382     926            mov     dpl,_SPI0DAT
010C 22         927            ret
010D            928   ;------------------------------------------------------------
010D            929   ;Allocation info for local variables in function 'SPI_read'
010D            930   ;------------------------------------------------------------
010D            931   ;reg_addr                  Allocated to registers r2 
010D            932   ;value                     Allocated to registers 
010D            933   ;------------------------------------------------------------
010D            934   ;        sensor_test.c:199: unsigned char SPI_read(unsigned char reg_addr)
010D            935   ;        -----------------------------------------
010D            936   ;         function SPI_read
010D            937   ;        -----------------------------------------
010D            938   _SPI_read:
010D AA82       939            mov     r2,dpl
010F            940   ;        sensor_test.c:204: reg_addr = reg_addr | 0x80;
010F 430280     941            orl     ar2,#0x80
0112            942   ;        sensor_test.c:206: CS = 0;                // Select the device
0112 C283       943            clr     _P0_3
0114            944   ;        sensor_test.c:207: SPI_transfer(reg_addr);     // Send register address
0114 8A82       945            mov     dpl,r2
0116 120000     946            lcall   _SPI_transfer
0119            947   ;        sensor_test.c:208: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
0119 758200     948            mov     dpl,#0x00
011C 120000     949            lcall   _SPI_transfer
011F            950   ;        sensor_test.c:209: CS = 1;                // Deselect the device
011F D283       951            setb    _P0_3
0121            952   ;        sensor_test.c:211: return value;
0121 22         953            ret
0122            954   ;------------------------------------------------------------
0122            955   ;Allocation info for local variables in function 'SPI_read_block'
0122            956   ;------------------------------------------------------------
0122            957   ;buffer                    Allocated with name '_SPI_read_block_PARM_2'
0122            958   ;len                       Allocated with name '_SPI_read_block_PARM_3'
0122            959   ;start_addr                Allocated to registers r2 
0122            960   ;i                         Allocated to registers r2 
0122            961   ;------------------------------------------------------------
0122            962   ;        sensor_test.c:214: void SPI_read_block(unsigned char start_addr, uint8_t *buffer, uint8_t len)
0122            963   ;        -----------------------------------------
0122            964   ;         function SPI_read_block
0122            965   ;        -----------------------------------------
0122            966   _SPI_read_block:
0122 AA82       967            mov     r2,dpl
0124            968   ;        sensor_test.c:217: start_addr |= 0x80; // Set MSB for read
0124 430280     969            orl     ar2,#0x80
0127            970   ;        sensor_test.c:218: CS = 0;
0127 C283       971            clr     _P0_3
0129            972   ;        sensor_test.c:219: SPI_transfer(start_addr);
0129 8A82       973            mov     dpl,r2
012B 120000     974            lcall   _SPI_transfer
012E            975   ;        sensor_test.c:220: for (i = 0; i < len; i++) {
012E 7A00       976            mov     r2,#0x00
0130            977   L008001?:
0130 C3         978            clr     c
0131 EA         979            mov     a,r2
0132 9588       980            subb    a,_SPI_read_block_PARM_3
0134 5000       981            jnc     L008004?
0136            982   ;        sensor_test.c:221: buffer[i] = SPI_transfer(0x00); // Dummy writes
0136 EA         983            mov     a,r2
0137 25D8       984            add     a,_SPI_read_block_PARM_2
0139 FB         985            mov     r3,a
013A E4         986            clr     a
013B 35D9       987            addc    a,(_SPI_read_block_PARM_2 + 1)
013D FC         988            mov     r4,a
013E ADDA       989            mov     r5,(_SPI_read_block_PARM_2 + 2)
0140 758200     990            mov     dpl,#0x00
0143 C002       991            push    ar2
0145 C003       992            push    ar3
0147 C004       993            push    ar4
0149 C005       994            push    ar5
014B 120000     995            lcall   _SPI_transfer
014E AE82       996            mov     r6,dpl
0150 D005       997            pop     ar5
0152 D004       998            pop     ar4
0154 D003       999            pop     ar3
0156 D002      1000            pop     ar2
0158 8B82      1001            mov     dpl,r3
015A 8C83      1002            mov     dph,r4
015C 8DF0      1003            mov     b,r5
015E EE        1004            mov     a,r6
015F 120000    1005            lcall   __gptrput
0162           1006   ;        sensor_test.c:220: for (i = 0; i < len; i++) {
0162 0A        1007            inc     r2
0163 8000      1008            sjmp    L008001?
0165           1009   L008004?:
0165           1010   ;        sensor_test.c:223: CS = 1;
0165 D283      1011            setb    _P0_3
0167 22        1012            ret
0168           1013   ;------------------------------------------------------------
0168           1014   ;Allocation info for local variables in function 'SPI_write'
0168           1015   ;------------------------------------------------------------
0168           1016   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0168           1017   ;reg_addr                  Allocated to registers r2 
0168           1018   ;------------------------------------------------------------
0168           1019   ;        sensor_test.c:227: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0168           1020   ;        -----------------------------------------
0168           1021   ;         function SPI_write
0168           1022   ;        -----------------------------------------
0168           1023   _SPI_write:
0168 AA82      1024            mov     r2,dpl
016A           1025   ;        sensor_test.c:230: reg_addr = reg_addr & 0x7F;
016A 53027F    1026            anl     ar2,#0x7F
016D           1027   ;        sensor_test.c:232: CS = 0;                // Select device
016D C283      1028            clr     _P0_3
016F           1029   ;        sensor_test.c:233: SPI_transfer(reg_addr);     // Send register address
016F 8A82      1030            mov     dpl,r2
0171 120000    1031            lcall   _SPI_transfer
0174           1032   ;        sensor_test.c:234: SPI_transfer(reg_value);    // Send value
0174 853882    1033            mov     dpl,_SPI_write_PARM_2
0177 120000    1034            lcall   _SPI_transfer
017A           1035   ;        sensor_test.c:235: CS = 1;                // Deselect device
017A D283      1036            setb    _P0_3
017C 22        1037            ret
017D           1038   ;------------------------------------------------------------
017D           1039   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
017D           1040   ;------------------------------------------------------------
017D           1041   ;i                         Allocated with name '_BMM150_Read_Trim_Registers_i_1_84'
017D           1042   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_84'
017D           1043   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_84'
017D           1044   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_84'
017D           1045   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84'
017D           1046   ;------------------------------------------------------------
017D           1047   ;        sensor_test.c:238: void BMM150_Read_Trim_Registers(void)
017D           1048   ;        -----------------------------------------
017D           1049   ;         function BMM150_Read_Trim_Registers
017D           1050   ;        -----------------------------------------
017D           1051   _BMM150_Read_Trim_Registers:
017D           1052   ;        sensor_test.c:242: xdata uint8_t trim_x1y1[2] = {0};
017D 90C2B8    1053            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_84
0180           1054   ;        sensor_test.c:243: xdata uint8_t trim_xyz_data[4] = {0};
0180 E4        1055            clr     a
0181 F0        1056            movx    @dptr,a
0182 90C2B9    1057            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_84 + 0x0001)
0185 F0        1058            movx    @dptr,a
0186 90C318    1059            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_84
0189 F0        1060            movx    @dptr,a
018A 90C319    1061            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0001)
018D F0        1062            movx    @dptr,a
018E 90C31A    1063            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0002)
0191           1064   ;        sensor_test.c:244: xdata uint8_t trim_xy1xy2[10] = {0};
0191 E4        1065            clr     a
0192 F0        1066            movx    @dptr,a
0193 90C31B    1067            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0003)
0196 F0        1068            movx    @dptr,a
0197 90C378    1069            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84
019A F0        1070            movx    @dptr,a
019B 90C379    1071            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0001)
019E F0        1072            movx    @dptr,a
019F 90C37A    1073            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0002)
01A2 E4        1074            clr     a
01A3 F0        1075            movx    @dptr,a
01A4 90C37B    1076            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0003)
01A7 F0        1077            movx    @dptr,a
01A8 90C37C    1078            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0004)
01AB F0        1079            movx    @dptr,a
01AC 90C37D    1080            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0005)
01AF F0        1081            movx    @dptr,a
01B0 90C37E    1082            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0006)
01B3 E4        1083            clr     a
01B4 F0        1084            movx    @dptr,a
01B5 90C37F    1085            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0007)
01B8 F0        1086            movx    @dptr,a
01B9 90C380    1087            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0008)
01BC F0        1088            movx    @dptr,a
01BD 90C381    1089            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0009)
01C0 F0        1090            movx    @dptr,a
01C1           1091   ;        sensor_test.c:247: for (i=0;i<2;i++){
01C1 7A00      1092            mov     r2,#0x00
01C3           1093   L010001?:
01C3 BA02A8    1094            cjne    r2,#0x02,L010024?
01C6           1095   L010024?:
01C6 5000      1096            jnc     L010004?
01C8           1097   ;        sensor_test.c:248: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
01C8 EA        1098            mov     a,r2
01C9 24B8      1099            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_84
01CB FB        1100            mov     r3,a
01CC E4        1101            clr     a
01CD 34C2      1102            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_84 >> 8)
01CF FC        1103            mov     r4,a
01D0 745D      1104            mov     a,#0x5D
01D2 2A        1105            add     a,r2
01D3 F582      1106            mov     dpl,a
01D5 C002      1107            push    ar2
01D7 C003      1108            push    ar3
01D9 C004      1109            push    ar4
01DB 120000    1110            lcall   _SPI_read
01DE AD82      1111            mov     r5,dpl
01E0 D004      1112            pop     ar4
01E2 D003      1113            pop     ar3
01E4 D002      1114            pop     ar2
01E6 8B82      1115            mov     dpl,r3
01E8 8C83      1116            mov     dph,r4
01EA ED        1117            mov     a,r5
01EB F0        1118            movx    @dptr,a
01EC           1119   ;        sensor_test.c:247: for (i=0;i<2;i++){
01EC 0A        1120            inc     r2
01ED 8000      1121            sjmp    L010001?
01EF           1122   L010004?:
01EF           1123   ;        sensor_test.c:250: for (i=0;i<4;i++){
01EF 7A00      1124            mov     r2,#0x00
01F1           1125   L010005?:
01F1 BA0468    1126            cjne    r2,#0x04,L010026?
01F4           1127   L010026?:
01F4 5000      1128            jnc     L010008?
01F6           1129   ;        sensor_test.c:251: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
01F6 EA        1130            mov     a,r2
01F7 2418      1131            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_84
01F9 FB        1132            mov     r3,a
01FA E4        1133            clr     a
01FB 34C3      1134            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 >> 8)
01FD FC        1135            mov     r4,a
01FE 7462      1136            mov     a,#0x62
0200 2A        1137            add     a,r2
0201 F582      1138            mov     dpl,a
0203 C002      1139            push    ar2
0205 C003      1140            push    ar3
0207 C004      1141            push    ar4
0209 120000    1142            lcall   _SPI_read
020C AD82      1143            mov     r5,dpl
020E D004      1144            pop     ar4
0210 D003      1145            pop     ar3
0212 D002      1146            pop     ar2
0214 8B82      1147            mov     dpl,r3
0216 8C83      1148            mov     dph,r4
0218 ED        1149            mov     a,r5
0219 F0        1150            movx    @dptr,a
021A           1151   ;        sensor_test.c:250: for (i=0;i<4;i++){
021A 0A        1152            inc     r2
021B 8000      1153            sjmp    L010005?
021D           1154   L010008?:
021D           1155   ;        sensor_test.c:253: for (i=0;i<10;i++){
021D 7A00      1156            mov     r2,#0x00
021F           1157   L010009?:
021F BA0A28    1158            cjne    r2,#0x0A,L010028?
0222           1159   L010028?:
0222 5000      1160            jnc     L010012?
0224           1161   ;        sensor_test.c:254: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
0224 EA        1162            mov     a,r2
0225 2478      1163            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84
0227 FB        1164            mov     r3,a
0228 E4        1165            clr     a
0229 34C3      1166            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 >> 8)
022B FC        1167            mov     r4,a
022C 7468      1168            mov     a,#0x68
022E 2A        1169            add     a,r2
022F F582      1170            mov     dpl,a
0231 C002      1171            push    ar2
0233 C003      1172            push    ar3
0235 C004      1173            push    ar4
0237 120000    1174            lcall   _SPI_read
023A AD82      1175            mov     r5,dpl
023C D004      1176            pop     ar4
023E D003      1177            pop     ar3
0240 D002      1178            pop     ar2
0242 8B82      1179            mov     dpl,r3
0244 8C83      1180            mov     dph,r4
0246 ED        1181            mov     a,r5
0247 F0        1182            movx    @dptr,a
0248           1183   ;        sensor_test.c:253: for (i=0;i<10;i++){
0248 0A        1184            inc     r2
0249 8000      1185            sjmp    L010009?
024B           1186   L010012?:
024B           1187   ;        sensor_test.c:257: dig_x1 = (int8_t) trim_x1y1[0]; 
024B 90C2B8    1188            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_84
024E E0        1189            movx    a,@dptr
024F F598      1190            mov     _dig_x1,a
0251           1191   ;        sensor_test.c:258: dig_y1 = (int8_t) trim_x1y1[1]; 
0251 90C2B9    1192            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_84 + 0x0001)
0254 E0        1193            movx    a,@dptr
0255 F518      1194            mov     _dig_y1,a
0257           1195   ;        sensor_test.c:259: dig_x2 = (int8_t) trim_xyz_data[2]; 
0257 90C31A    1196            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0002)
025A E0        1197            movx    a,@dptr
025B F558      1198            mov     _dig_x2,a
025D           1199   ;        sensor_test.c:260: dig_y2 = (int8_t) trim_xyz_data[3]; 
025D 90C31B    1200            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0003)
0260 E0        1201            movx    a,@dptr
0261 F5D8      1202            mov     _dig_y2,a
0263           1203   ;        sensor_test.c:262: temp_msb = ((uint16_t)trim_xy1xy2[3]) << 8;
0263 90C37B    1204            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0003)
0266 E0        1205            movx    a,@dptr
0267 FB        1206            mov     r3,a
0268 7A00      1207            mov     r2,#0x00
026A           1208   ;        sensor_test.c:263: dig_z1 = (uint16_t)(temp_msb | trim_xy1xy2[2]);
026A 90C37A    1209            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0002)
026D E0        1210            movx    a,@dptr
026E 7D00      1211            mov     r5,#0x00
0270 4202      1212            orl     ar2,a
0272 ED        1213            mov     a,r5
0273 4203      1214            orl     ar3,a
0275 8A98      1215            mov     _dig_z1,r2
0277           1216   ;        sensor_test.c:265: temp_msb = ((uint16_t)trim_xy1xy2[1]) << 8;
0277 90C379    1217            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0001)
027A E0        1218            movx    a,@dptr
027B FB        1219            mov     r3,a
027C 7A00      1220            mov     r2,#0x00
027E           1221   ;        sensor_test.c:266: dig_z2 = (int16_t)(temp_msb | trim_xy1xy2[0]);
027E 90C378    1222            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84
0281 E0        1223            movx    a,@dptr
0282 7D00      1224            mov     r5,#0x00
0284 4202      1225            orl     ar2,a
0286 ED        1226            mov     a,r5
0287 4203      1227            orl     ar3,a
0289 8A58      1228            mov     _dig_z2,r2
028B           1229   ;        sensor_test.c:268: temp_msb = ((uint16_t)trim_xy1xy2[7]) << 8;
028B 90C37F    1230            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0007)
028E E0        1231            movx    a,@dptr
028F FB        1232            mov     r3,a
0290 7A00      1233            mov     r2,#0x00
0292           1234   ;        sensor_test.c:269: dig_z3 = (int16_t)(temp_msb | trim_xy1xy2[6]);
0292 90C37E    1235            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0006)
0295 E0        1236            movx    a,@dptr
0296 7D00      1237            mov     r5,#0x00
0298 4202      1238            orl     ar2,a
029A ED        1239            mov     a,r5
029B 4203      1240            orl     ar3,a
029D 8A18      1241            mov     _dig_z3,r2
029F           1242   ;        sensor_test.c:271: temp_msb = ((uint16_t)trim_xyz_data[1]) << 8;
029F 90C319    1243            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0001)
02A2 E0        1244            movx    a,@dptr
02A3 FB        1245            mov     r3,a
02A4 7A00      1246            mov     r2,#0x00
02A6           1247   ;        sensor_test.c:272: dig_z4 = (int16_t)(temp_msb | trim_xyz_data[0]);
02A6 90C318    1248            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_84
02A9 E0        1249            movx    a,@dptr
02AA 7D00      1250            mov     r5,#0x00
02AC 4202      1251            orl     ar2,a
02AE ED        1252            mov     a,r5
02AF 4203      1253            orl     ar3,a
02B1 8AD8      1254            mov     _dig_z4,r2
02B3           1255   ;        sensor_test.c:274: dig_xy1 = trim_xy1xy2[9];
02B3 90C381    1256            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0009)
02B6 E0        1257            movx    a,@dptr
02B7 F598      1258            mov     _dig_xy1,a
02B9           1259   ;        sensor_test.c:275: dig_xy2 = (int8_t)trim_xy1xy2[8];
02B9 90C380    1260            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0008)
02BC E0        1261            movx    a,@dptr
02BD F558      1262            mov     _dig_xy2,a
02BF           1263   ;        sensor_test.c:277: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
02BF 90C37D    1264            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0005)
02C2 E0        1265            movx    a,@dptr
02C3 FA        1266            mov     r2,a
02C4 53027F    1267            anl     ar2,#0x7F
02C7 8A03      1268            mov     ar3,r2
02C9 7A00      1269            mov     r2,#0x00
02CB           1270   ;        sensor_test.c:278: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
02CB 90C37C    1271            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0004)
02CE E0        1272            movx    a,@dptr
02CF 7D00      1273            mov     r5,#0x00
02D1 4202      1274            orl     ar2,a
02D3 ED        1275            mov     a,r5
02D4 4203      1276            orl     ar3,a
02D6 8A18      1277            mov     _dig_xyz1,r2
02D8 22        1278            ret
02D9           1279   ;------------------------------------------------------------
02D9           1280   ;Allocation info for local variables in function 'BMM150_Init'
02D9           1281   ;------------------------------------------------------------
02D9           1282   ;chip_id                   Allocated to registers r2 
02D9           1283   ;------------------------------------------------------------
02D9           1284   ;        sensor_test.c:283: void BMM150_Init(void)
02D9           1285   ;        -----------------------------------------
02D9           1286   ;         function BMM150_Init
02D9           1287   ;        -----------------------------------------
02D9           1288   _BMM150_Init:
02D9           1289   ;        sensor_test.c:288: CS = 1;         // Deselect BMM150
02D9 D283      1290            setb    _P0_3
02DB           1291   ;        sensor_test.c:291: waitms(10);
02DB 90000A    1292            mov     dptr,#0x000A
02DE 120000    1293            lcall   _waitms
02E1           1294   ;        sensor_test.c:294: SPI_write(BMM150_POWER_CONTROL, 0x82);
02E1 753882    1295            mov     _SPI_write_PARM_2,#0x82
02E4 75824B    1296            mov     dpl,#0x4B
02E7 120000    1297            lcall   _SPI_write
02EA           1298   ;        sensor_test.c:295: waitms(10);  // Wait for reset to complete
02EA 90000A    1299            mov     dptr,#0x000A
02ED 120000    1300            lcall   _waitms
02F0           1301   ;        sensor_test.c:298: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
02F0 753801    1302            mov     _SPI_write_PARM_2,#0x01
02F3 75824B    1303            mov     dpl,#0x4B
02F6 120000    1304            lcall   _SPI_write
02F9           1305   ;        sensor_test.c:299: waitms(5);
02F9 900005    1306            mov     dptr,#0x0005
02FC 120000    1307            lcall   _waitms
02FF           1308   ;        sensor_test.c:302: chip_id = SPI_read(BMM150_CHIP_ID);
02FF 758240    1309            mov     dpl,#0x40
0302 120000    1310            lcall   _SPI_read
0305 AA82      1311            mov     r2,dpl
0307           1312   ;        sensor_test.c:303: if (chip_id != BMM150_CHIP_ID_VALUE)
0307 BA32A8    1313            cjne    r2,#0x32,L011010?
030A 8000      1314            sjmp    L011005?
030C           1315   L011010?:
030C           1316   ;        sensor_test.c:305: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
030C 8A03      1317            mov     ar3,r2
030E 7C00      1318            mov     r4,#0x00
0310 C003      1319            push    ar3
0312 C004      1320            push    ar4
0314 7428      1321            mov     a,#__str_0
0316 C0E0      1322            push    acc
0318 74D2      1323            mov     a,#(__str_0 >> 8)
031A C0E0      1324            push    acc
031C 7480      1325            mov     a,#0x80
031E C0E0      1326            push    acc
0320 120000    1327            lcall   _printf
0323 E581      1328            mov     a,sp
0325 24FB      1329            add     a,#0xfb
0327 F581      1330            mov     sp,a
0329           1331   ;        sensor_test.c:306: while (1) {
0329           1332   L011002?:
0329           1333   ;        sensor_test.c:307: printf("Press restart to check again!\r");
0329 7428      1334            mov     a,#__str_1
032B C0E0      1335            push    acc
032D 74D3      1336            mov     a,#(__str_1 >> 8)
032F C0E0      1337            push    acc
0331 7480      1338            mov     a,#0x80
0333 C0E0      1339            push    acc
0335 120000    1340            lcall   _printf
0338 1581      1341            dec     sp
033A 1581      1342            dec     sp
033C 1581      1343            dec     sp
033E 8000      1344            sjmp    L011002?
0340           1345   L011005?:
0340           1346   ;        sensor_test.c:312: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
0340 753800    1347            mov     _SPI_write_PARM_2,#0x00
0343 75824C    1348            mov     dpl,#0x4C
0346 C002      1349            push    ar2
0348 120000    1350            lcall   _SPI_write
034B           1351   ;        sensor_test.c:315: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
034B 75387F    1352            mov     _SPI_write_PARM_2,#0x7F
034E 758251    1353            mov     dpl,#0x51
0351 120000    1354            lcall   _SPI_write
0354           1355   ;        sensor_test.c:316: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
0354 75380E    1356            mov     _SPI_write_PARM_2,#0x0E
0357 758252    1357            mov     dpl,#0x52
035A 120000    1358            lcall   _SPI_write
035D           1359   ;        sensor_test.c:318: BMM150_Read_Trim_Registers();
035D 120000    1360            lcall   _BMM150_Read_Trim_Registers
0360           1361   ;        sensor_test.c:320: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
0360 7B00      1362            mov     r3,#0x00
0362 C003      1363            push    ar3
0364 7468      1364            mov     a,#__str_2
0366 C0E0      1365            push    acc
0368 74D3      1366            mov     a,#(__str_2 >> 8)
036A C0E0      1367            push    acc
036C 7480      1368            mov     a,#0x80
036E C0E0      1369            push    acc
0370 120000    1370            lcall   _printf
0373 E581      1371            mov     a,sp
0375 24FB      1372            add     a,#0xfb
0377 F581      1373            mov     sp,a
0379 22        1374            ret
037A           1375   ;------------------------------------------------------------
037A           1376   ;Allocation info for local variables in function 'BMM150_compensate_x'
037A           1377   ;------------------------------------------------------------
037A           1378   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
037A           1379   ;mag_data_x                Allocated to registers r2 r3 r4 
037A           1380   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
037A           1381   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_93'
037A           1382   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_93'
037A           1383   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_93'
037A           1384   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_93'
037A           1385   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_93'
037A           1386   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_93'
037A           1387   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_93'
037A           1388   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_93'
037A           1389   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_93'
037A           1390   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_93'
037A           1391   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_93'
037A           1392   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_93'
037A           1393   ;------------------------------------------------------------
037A           1394   ;        sensor_test.c:323: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
037A           1395   ;        -----------------------------------------
037A           1396   ;         function BMM150_compensate_x
037A           1397   ;        -----------------------------------------
037A           1398   _BMM150_compensate_x:
037A           1399   ;        sensor_test.c:341: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
037A ACF0      1400            mov     r4,b
037C 120000    1401            lcall   __gptrget
037F FA        1402            mov     r2,a
0380 A3        1403            inc     dptr
0381 120000    1404            lcall   __gptrget
0384 FB        1405            mov     r3,a
0385 BA00E8    1406            cjne    r2,#0x00,L012019?
0388 BBF0E8    1407            cjne    r3,#0xF0,L012019?
038B 020000    1408            ljmp    L012011?
038E           1409   L012019?:
038E           1410   ;        sensor_test.c:342: if (*data_rhall != 0)
038E ACE8      1411            mov     r4,_BMM150_compensate_x_PARM_2
0390 ADE9      1412            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
0392 AEEA      1413            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
0394 8C82      1414            mov     dpl,r4
0396 8D83      1415            mov     dph,r5
0398 8EF0      1416            mov     b,r6
039A 120000    1417            lcall   __gptrget
039D FC        1418            mov     r4,a
039E A3        1419            inc     dptr
039F 120000    1420            lcall   __gptrget
03A2 FD        1421            mov     r5,a
03A3 4C        1422            orl     a,r4
03A4 6000      1423            jz      L012005?
03A6           1424   ;        sensor_test.c:345: process_comp_x0 = *data_rhall;
03A6 90C438    1425            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03A9 EC        1426            mov     a,r4
03AA F0        1427            movx    @dptr,a
03AB A3        1428            inc     dptr
03AC ED        1429            mov     a,r5
03AD F0        1430            movx    @dptr,a
03AE 8000      1431            sjmp    L012006?
03B0           1432   L012005?:
03B0           1433   ;        sensor_test.c:347: else if (dig_xyz1 != 0)
03B0 E518      1434            mov     a,_dig_xyz1
03B2 6000      1435            jz      L012002?
03B4           1436   ;        sensor_test.c:349: process_comp_x0 = dig_xyz1;
03B4 90C438    1437            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03B7 E518      1438            mov     a,_dig_xyz1
03B9 F0        1439            movx    @dptr,a
03BA E518      1440            mov     a,_dig_xyz1
03BC 33        1441            rlc     a
03BD 95E0      1442            subb    a,acc
03BF A3        1443            inc     dptr
03C0 F0        1444            movx    @dptr,a
03C1 8000      1445            sjmp    L012006?
03C3           1446   L012002?:
03C3           1447   ;        sensor_test.c:353: process_comp_x0 = 0;
03C3 90C438    1448            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03C6 E4        1449            clr     a
03C7 F0        1450            movx    @dptr,a
03C8 A3        1451            inc     dptr
03C9 F0        1452            movx    @dptr,a
03CA           1453   L012006?:
03CA           1454   ;        sensor_test.c:355: if (process_comp_x0 != 0)
03CA 90C438    1455            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03CD E0        1456            movx    a,@dptr
03CE FC        1457            mov     r4,a
03CF A3        1458            inc     dptr
03D0 E0        1459            movx    a,@dptr
03D1 FD        1460            mov     r5,a
03D2 4C        1461            orl     a,r4
03D3 7000      1462            jnz     L012022?
03D5 020000    1463            ljmp    L012008?
03D8           1464   L012022?:
03D8           1465   ;        sensor_test.c:358: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
03D8 E518      1466            mov     a,_dig_xyz1
03DA FE        1467            mov     r6,a
03DB 33        1468            rlc     a
03DC 95E0      1469            subb    a,acc
03DE F8        1470            mov     r0,a
03DF C8        1471            xch     a,r0
03E0 5403      1472            anl     a,#0x03
03E2 A2E0      1473            mov     c,acc.0
03E4 C8        1474            xch     a,r0
03E5 13        1475            rrc     a
03E6 C8        1476            xch     a,r0
03E7 13        1477            rrc     a
03E8 A2E0      1478            mov     c,acc.0
03EA C8        1479            xch     a,r0
03EB 13        1480            rrc     a
03EC C8        1481            xch     a,r0
03ED 13        1482            rrc     a
03EE C8        1483            xch     a,r0
03EF F9        1484            mov     r1,a
03F0 EE        1485            mov     a,r6
03F1 03        1486            rr      a
03F2 03        1487            rr      a
03F3 54C0      1488            anl     a,#0xc0
03F5 FF        1489            mov     r7,a
03F6 EE        1490            mov     a,r6
03F7 03        1491            rr      a
03F8 03        1492            rr      a
03F9 543F      1493            anl     a,#0x3f
03FB 48        1494            orl     a,r0
03FC F8        1495            mov     r0,a
03FD 7E00      1496            mov     r6,#0x00
03FF           1497   ;        sensor_test.c:359: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
03FF 8C00      1498            mov     __divslong_PARM_2,r4
0401 8D01      1499            mov     (__divslong_PARM_2 + 1),r5
0403 750200    1500            mov     (__divslong_PARM_2 + 2),#0x00
0406 750300    1501            mov     (__divslong_PARM_2 + 3),#0x00
0409 8E82      1502            mov     dpl,r6
040B 8F83      1503            mov     dph,r7
040D 88F0      1504            mov     b,r0
040F E9        1505            mov     a,r1
0410 C002      1506            push    ar2
0412 C003      1507            push    ar3
0414 120000    1508            lcall   __divslong
0417 AC82      1509            mov     r4,dpl
0419 E583      1510            mov     a,dph
041B 24C0      1511            add     a,#0xc0
041D FD        1512            mov     r5,a
041E           1513   ;        sensor_test.c:361: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
041E 8C06      1514            mov     ar6,r4
0420 8D07      1515            mov     ar7,r5
0422 8E68      1516            mov     _BMM150_compensate_x_sloc0_1_0,r6
0424 EF        1517            mov     a,r7
0425 F569      1518            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
0427 33        1519            rlc     a
0428 95E0      1520            subb    a,acc
042A F56A      1521            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
042C F56B      1522            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
042E 8C06      1523            mov     ar6,r4
0430 8D07      1524            mov     ar7,r5
0432 8E00      1525            mov     __mullong_PARM_2,r6
0434 EF        1526            mov     a,r7
0435 F501      1527            mov     (__mullong_PARM_2 + 1),a
0437 33        1528            rlc     a
0438 95E0      1529            subb    a,acc
043A F502      1530            mov     (__mullong_PARM_2 + 2),a
043C F503      1531            mov     (__mullong_PARM_2 + 3),a
043E           1532   ;        sensor_test.c:362: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
043E 856882    1533            mov     dpl,_BMM150_compensate_x_sloc0_1_0
0441 856983    1534            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
0444 856AF0    1535            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
0447 E56B      1536            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0449 C004      1537            push    ar4
044B C005      1538            push    ar5
044D 120000    1539            lcall   __mullong
0450 858268    1540            mov     _BMM150_compensate_x_sloc0_1_0,dpl
0453 858369    1541            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
0456 85F06A    1542            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
0459 F56B      1543            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
045B E558      1544            mov     a,_dig_xy2
045D FE        1545            mov     r6,a
045E 33        1546            rlc     a
045F 95E0      1547            subb    a,acc
0461 FF        1548            mov     r7,a
0462 F8        1549            mov     r0,a
0463 F9        1550            mov     r1,a
0464 750080    1551            mov     __divslong_PARM_2,#0x80
0467 E4        1552            clr     a
0468 F501      1553            mov     (__divslong_PARM_2 + 1),a
046A F502      1554            mov     (__divslong_PARM_2 + 2),a
046C F503      1555            mov     (__divslong_PARM_2 + 3),a
046E 856882    1556            mov     dpl,_BMM150_compensate_x_sloc0_1_0
0471 856983    1557            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
0474 856AF0    1558            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
0477 E56B      1559            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0479 C006      1560            push    ar6
047B C007      1561            push    ar7
047D C000      1562            push    ar0
047F C001      1563            push    ar1
0481 120000    1564            lcall   __divslong
0484 858200    1565            mov     __mullong_PARM_2,dpl
0487 858301    1566            mov     (__mullong_PARM_2 + 1),dph
048A 85F002    1567            mov     (__mullong_PARM_2 + 2),b
048D F503      1568            mov     (__mullong_PARM_2 + 3),a
048F D001      1569            pop     ar1
0491 D000      1570            pop     ar0
0493 D007      1571            pop     ar7
0495 D006      1572            pop     ar6
0497           1573   ;        sensor_test.c:363: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
0497 8E82      1574            mov     dpl,r6
0499 8F83      1575            mov     dph,r7
049B 88F0      1576            mov     b,r0
049D E9        1577            mov     a,r1
049E 120000    1578            lcall   __mullong
04A1 858268    1579            mov     _BMM150_compensate_x_sloc0_1_0,dpl
04A4 858369    1580            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
04A7 85F06A    1581            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
04AA F56B      1582            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
04AC D005      1583            pop     ar5
04AE D004      1584            pop     ar4
04B0 E598      1585            mov     a,_dig_xy1
04B2 FE        1586            mov     r6,a
04B3 33        1587            rlc     a
04B4 95E0      1588            subb    a,acc
04B6 5401      1589            anl     a,#0x01
04B8 A2E0      1590            mov     c,acc.0
04BA CE        1591            xch     a,r6
04BB 13        1592            rrc     a
04BC CE        1593            xch     a,r6
04BD 13        1594            rrc     a
04BE CE        1595            xch     a,r6
04BF 8E00      1596            mov     __mullong_PARM_2,r6
04C1 F501      1597            mov     (__mullong_PARM_2 + 1),a
04C3 33        1598            rlc     a
04C4 95E0      1599            subb    a,acc
04C6 F502      1600            mov     (__mullong_PARM_2 + 2),a
04C8 F503      1601            mov     (__mullong_PARM_2 + 3),a
04CA           1602   ;        sensor_test.c:364: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
04CA ED        1603            mov     a,r5
04CB 33        1604            rlc     a
04CC 95E0      1605            subb    a,acc
04CE FE        1606            mov     r6,a
04CF           1607   ;        sensor_test.c:365: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
04CF 8C82      1608            mov     dpl,r4
04D1 8D83      1609            mov     dph,r5
04D3 8EF0      1610            mov     b,r6
04D5 120000    1611            lcall   __mullong
04D8 AC82      1612            mov     r4,dpl
04DA AD83      1613            mov     r5,dph
04DC AEF0      1614            mov     r6,b
04DE FF        1615            mov     r7,a
04DF EC        1616            mov     a,r4
04E0 2568      1617            add     a,_BMM150_compensate_x_sloc0_1_0
04E2 FC        1618            mov     r4,a
04E3 ED        1619            mov     a,r5
04E4 3569      1620            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
04E6 FD        1621            mov     r5,a
04E7 EE        1622            mov     a,r6
04E8 356A      1623            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
04EA FE        1624            mov     r6,a
04EB EF        1625            mov     a,r7
04EC 356B      1626            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
04EE FF        1627            mov     r7,a
04EF 750000    1628            mov     __divslong_PARM_2,#0x00
04F2 750102    1629            mov     (__divslong_PARM_2 + 1),#0x02
04F5 750200    1630            mov     (__divslong_PARM_2 + 2),#0x00
04F8 750300    1631            mov     (__divslong_PARM_2 + 3),#0x00
04FB 8C82      1632            mov     dpl,r4
04FD 8D83      1633            mov     dph,r5
04FF 8EF0      1634            mov     b,r6
0501 EF        1635            mov     a,r7
0502 120000    1636            lcall   __divslong
0505 AC82      1637            mov     r4,dpl
0507 AD83      1638            mov     r5,dph
0509 AEF0      1639            mov     r6,b
050B FF        1640            mov     r7,a
050C 7410      1641            mov     a,#0x10
050E 2E        1642            add     a,r6
050F FE        1643            mov     r6,a
0510 E4        1644            clr     a
0511 3F        1645            addc    a,r7
0512 FF        1646            mov     r7,a
0513           1647   ;        sensor_test.c:366: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
0513 E558      1648            mov     a,_dig_x2
0515 F8        1649            mov     r0,a
0516 33        1650            rlc     a
0517 95E0      1651            subb    a,acc
0519 F9        1652            mov     r1,a
051A 74A0      1653            mov     a,#0xA0
051C 28        1654            add     a,r0
051D F8        1655            mov     r0,a
051E E4        1656            clr     a
051F 39        1657            addc    a,r1
0520 8800      1658            mov     __mullong_PARM_2,r0
0522 F501      1659            mov     (__mullong_PARM_2 + 1),a
0524 33        1660            rlc     a
0525 95E0      1661            subb    a,acc
0527 F502      1662            mov     (__mullong_PARM_2 + 2),a
0529 F503      1663            mov     (__mullong_PARM_2 + 3),a
052B           1664   ;        sensor_test.c:367: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
052B 8C82      1665            mov     dpl,r4
052D 8D83      1666            mov     dph,r5
052F 8EF0      1667            mov     b,r6
0531 EF        1668            mov     a,r7
0532 120000    1669            lcall   __mullong
0535           1670   ;        sensor_test.c:368: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
0535 750000    1671            mov     __divslong_PARM_2,#0x00
0538 750110    1672            mov     (__divslong_PARM_2 + 1),#0x10
053B 750200    1673            mov     (__divslong_PARM_2 + 2),#0x00
053E 750300    1674            mov     (__divslong_PARM_2 + 3),#0x00
0541 120000    1675            lcall   __divslong
0544 858200    1676            mov     __mullong_PARM_2,dpl
0547 858301    1677            mov     (__mullong_PARM_2 + 1),dph
054A 85F002    1678            mov     (__mullong_PARM_2 + 2),b
054D F503      1679            mov     (__mullong_PARM_2 + 3),a
054F D003      1680            pop     ar3
0551 D002      1681            pop     ar2
0553 EB        1682            mov     a,r3
0554 33        1683            rlc     a
0555 95E0      1684            subb    a,acc
0557 FC        1685            mov     r4,a
0558           1686   ;        sensor_test.c:369: retval = ((int16_t)(process_comp_x10 / 8192));
0558 8A82      1687            mov     dpl,r2
055A 8B83      1688            mov     dph,r3
055C 8CF0      1689            mov     b,r4
055E 120000    1690            lcall   __mullong
0561 750000    1691            mov     __divslong_PARM_2,#0x00
0564 750120    1692            mov     (__divslong_PARM_2 + 1),#0x20
0567 750200    1693            mov     (__divslong_PARM_2 + 2),#0x00
056A 750300    1694            mov     (__divslong_PARM_2 + 3),#0x00
056D 120000    1695            lcall   __divslong
0570 AA82      1696            mov     r2,dpl
0572 AB83      1697            mov     r3,dph
0574           1698   ;        sensor_test.c:370: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
0574 E598      1699            mov     a,_dig_x1
0576 FC        1700            mov     r4,a
0577 33        1701            rlc     a
0578 95E0      1702            subb    a,acc
057A C4        1703            swap    a
057B 03        1704            rr      a
057C 54F8      1705            anl     a,#0xf8
057E CC        1706            xch     a,r4
057F C4        1707            swap    a
0580 03        1708            rr      a
0581 CC        1709            xch     a,r4
0582 6C        1710            xrl     a,r4
0583 CC        1711            xch     a,r4
0584 54F8      1712            anl     a,#0xf8
0586 CC        1713            xch     a,r4
0587 6C        1714            xrl     a,r4
0588 FD        1715            mov     r5,a
0589 EC        1716            mov     a,r4
058A 2A        1717            add     a,r2
058B F582      1718            mov     dpl,a
058D ED        1719            mov     a,r5
058E 3B        1720            addc    a,r3
058F F583      1721            mov     dph,a
0591 750010    1722            mov     __divsint_PARM_2,#0x10
0594 E4        1723            clr     a
0595 F501      1724            mov     (__divsint_PARM_2 + 1),a
0597 120000    1725            lcall   __divsint
059A E582      1726            mov     a,dpl
059C 8583F0    1727            mov     b,dph
059F 90C3D8    1728            mov     dptr,#_BMM150_compensate_x_retval_1_93
05A2 F0        1729            movx    @dptr,a
05A3 A3        1730            inc     dptr
05A4 E5F0      1731            mov     a,b
05A6 F0        1732            movx    @dptr,a
05A7 8000      1733            sjmp    L012012?
05A9           1734   L012008?:
05A9           1735   ;        sensor_test.c:373: retval = BMM150_OVERFLOW_OUTPUT; 
05A9 90C3D8    1736            mov     dptr,#_BMM150_compensate_x_retval_1_93
05AC E4        1737            clr     a
05AD F0        1738            movx    @dptr,a
05AE A3        1739            inc     dptr
05AF 7480      1740            mov     a,#0x80
05B1 F0        1741            movx    @dptr,a
05B2 8000      1742            sjmp    L012012?
05B4           1743   L012011?:
05B4           1744   ;        sensor_test.c:377: retval = BMM150_OVERFLOW_OUTPUT; 
05B4 90C3D8    1745            mov     dptr,#_BMM150_compensate_x_retval_1_93
05B7 E4        1746            clr     a
05B8 F0        1747            movx    @dptr,a
05B9 A3        1748            inc     dptr
05BA 7480      1749            mov     a,#0x80
05BC F0        1750            movx    @dptr,a
05BD           1751   L012012?:
05BD           1752   ;        sensor_test.c:379: return retval; 
05BD 90C3D8    1753            mov     dptr,#_BMM150_compensate_x_retval_1_93
05C0 E0        1754            movx    a,@dptr
05C1 FA        1755            mov     r2,a
05C2 A3        1756            inc     dptr
05C3 E0        1757            movx    a,@dptr
05C4 8A82      1758            mov     dpl,r2
05C6 F583      1759            mov     dph,a
05C8 22        1760            ret
05C9           1761   ;------------------------------------------------------------
05C9           1762   ;Allocation info for local variables in function 'BMM150_compensate_y'
05C9           1763   ;------------------------------------------------------------
05C9           1764   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
05C9           1765   ;mag_data_y                Allocated to registers r2 r3 r4 
05C9           1766   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
05C9           1767   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_102'
05C9           1768   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_102'
05C9           1769   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_102'
05C9           1770   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_102'
05C9           1771   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_102'
05C9           1772   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_102'
05C9           1773   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_102'
05C9           1774   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_102'
05C9           1775   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_102'
05C9           1776   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_102'
05C9           1777   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_102'
05C9           1778   ;------------------------------------------------------------
05C9           1779   ;        sensor_test.c:382: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
05C9           1780   ;        -----------------------------------------
05C9           1781   ;         function BMM150_compensate_y
05C9           1782   ;        -----------------------------------------
05C9           1783   _BMM150_compensate_y:
05C9           1784   ;        sensor_test.c:400: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
05C9 ACF0      1785            mov     r4,b
05CB 120000    1786            lcall   __gptrget
05CE FA        1787            mov     r2,a
05CF A3        1788            inc     dptr
05D0 120000    1789            lcall   __gptrget
05D3 FB        1790            mov     r3,a
05D4 BA0098    1791            cjne    r2,#0x00,L013019?
05D7 BBF098    1792            cjne    r3,#0xF0,L013019?
05DA 020000    1793            ljmp    L013011?
05DD           1794   L013019?:
05DD           1795   ;        sensor_test.c:402: if (*data_rhall != 0)
05DD AC98      1796            mov     r4,_BMM150_compensate_y_PARM_2
05DF AD99      1797            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
05E1 AE9A      1798            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
05E3 8C82      1799            mov     dpl,r4
05E5 8D83      1800            mov     dph,r5
05E7 8EF0      1801            mov     b,r6
05E9 120000    1802            lcall   __gptrget
05EC FC        1803            mov     r4,a
05ED A3        1804            inc     dptr
05EE 120000    1805            lcall   __gptrget
05F1 FD        1806            mov     r5,a
05F2 4C        1807            orl     a,r4
05F3 6000      1808            jz      L013005?
05F5           1809   ;        sensor_test.c:405: process_comp_y0 = *data_rhall;
05F5 90C4F8    1810            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
05F8 EC        1811            mov     a,r4
05F9 F0        1812            movx    @dptr,a
05FA A3        1813            inc     dptr
05FB ED        1814            mov     a,r5
05FC F0        1815            movx    @dptr,a
05FD 8000      1816            sjmp    L013006?
05FF           1817   L013005?:
05FF           1818   ;        sensor_test.c:407: else if (dig_xyz1 != 0)
05FF E518      1819            mov     a,_dig_xyz1
0601 6000      1820            jz      L013002?
0603           1821   ;        sensor_test.c:409: process_comp_y0 = dig_xyz1;
0603 90C4F8    1822            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
0606 E518      1823            mov     a,_dig_xyz1
0608 F0        1824            movx    @dptr,a
0609 E518      1825            mov     a,_dig_xyz1
060B 33        1826            rlc     a
060C 95E0      1827            subb    a,acc
060E A3        1828            inc     dptr
060F F0        1829            movx    @dptr,a
0610 8000      1830            sjmp    L013006?
0612           1831   L013002?:
0612           1832   ;        sensor_test.c:413: process_comp_y0 = 0;
0612 90C4F8    1833            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
0615 E4        1834            clr     a
0616 F0        1835            movx    @dptr,a
0617 A3        1836            inc     dptr
0618 F0        1837            movx    @dptr,a
0619           1838   L013006?:
0619           1839   ;        sensor_test.c:416: if (process_comp_y0 != 0)
0619 90C4F8    1840            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
061C E0        1841            movx    a,@dptr
061D FC        1842            mov     r4,a
061E A3        1843            inc     dptr
061F E0        1844            movx    a,@dptr
0620 FD        1845            mov     r5,a
0621 4C        1846            orl     a,r4
0622 7000      1847            jnz     L013022?
0624 020000    1848            ljmp    L013008?
0627           1849   L013022?:
0627           1850   ;        sensor_test.c:419: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
0627 E518      1851            mov     a,_dig_xyz1
0629 FE        1852            mov     r6,a
062A 33        1853            rlc     a
062B 95E0      1854            subb    a,acc
062D F8        1855            mov     r0,a
062E C8        1856            xch     a,r0
062F 5403      1857            anl     a,#0x03
0631 A2E0      1858            mov     c,acc.0
0633 C8        1859            xch     a,r0
0634 13        1860            rrc     a
0635 C8        1861            xch     a,r0
0636 13        1862            rrc     a
0637 A2E0      1863            mov     c,acc.0
0639 C8        1864            xch     a,r0
063A 13        1865            rrc     a
063B C8        1866            xch     a,r0
063C 13        1867            rrc     a
063D C8        1868            xch     a,r0
063E F9        1869            mov     r1,a
063F EE        1870            mov     a,r6
0640 03        1871            rr      a
0641 03        1872            rr      a
0642 54C0      1873            anl     a,#0xc0
0644 FF        1874            mov     r7,a
0645 EE        1875            mov     a,r6
0646 03        1876            rr      a
0647 03        1877            rr      a
0648 543F      1878            anl     a,#0x3f
064A 48        1879            orl     a,r0
064B F8        1880            mov     r0,a
064C 7E00      1881            mov     r6,#0x00
064E 8C00      1882            mov     __divslong_PARM_2,r4
0650 8D01      1883            mov     (__divslong_PARM_2 + 1),r5
0652 750200    1884            mov     (__divslong_PARM_2 + 2),#0x00
0655 750300    1885            mov     (__divslong_PARM_2 + 3),#0x00
0658           1886   ;        sensor_test.c:420: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
0658 8E82      1887            mov     dpl,r6
065A 8F83      1888            mov     dph,r7
065C 88F0      1889            mov     b,r0
065E E9        1890            mov     a,r1
065F C002      1891            push    ar2
0661 C003      1892            push    ar3
0663 120000    1893            lcall   __divslong
0666 AC82      1894            mov     r4,dpl
0668 E583      1895            mov     a,dph
066A 24C0      1896            add     a,#0xc0
066C FD        1897            mov     r5,a
066D           1898   ;        sensor_test.c:422: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
066D 8C06      1899            mov     ar6,r4
066F 8D07      1900            mov     ar7,r5
0671 8EB8      1901            mov     _BMM150_compensate_y_sloc0_1_0,r6
0673 EF        1902            mov     a,r7
0674 F5B9      1903            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
0676 33        1904            rlc     a
0677 95E0      1905            subb    a,acc
0679 F5BA      1906            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
067B F5BB      1907            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
067D 8C06      1908            mov     ar6,r4
067F 8D07      1909            mov     ar7,r5
0681 8E00      1910            mov     __mullong_PARM_2,r6
0683 EF        1911            mov     a,r7
0684 F501      1912            mov     (__mullong_PARM_2 + 1),a
0686 33        1913            rlc     a
0687 95E0      1914            subb    a,acc
0689 F502      1915            mov     (__mullong_PARM_2 + 2),a
068B F503      1916            mov     (__mullong_PARM_2 + 3),a
068D           1917   ;        sensor_test.c:423: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
068D 85B882    1918            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0690 85B983    1919            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0693 85BAF0    1920            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
0696 E5BB      1921            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
0698 C004      1922            push    ar4
069A C005      1923            push    ar5
069C 120000    1924            lcall   __mullong
069F 8582B8    1925            mov     _BMM150_compensate_y_sloc0_1_0,dpl
06A2 8583B9    1926            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
06A5 85F0BA    1927            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
06A8 F5BB      1928            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
06AA E558      1929            mov     a,_dig_xy2
06AC FE        1930            mov     r6,a
06AD 33        1931            rlc     a
06AE 95E0      1932            subb    a,acc
06B0 FF        1933            mov     r7,a
06B1 F8        1934            mov     r0,a
06B2 F9        1935            mov     r1,a
06B3 750080    1936            mov     __divslong_PARM_2,#0x80
06B6 E4        1937            clr     a
06B7 F501      1938            mov     (__divslong_PARM_2 + 1),a
06B9 F502      1939            mov     (__divslong_PARM_2 + 2),a
06BB F503      1940            mov     (__divslong_PARM_2 + 3),a
06BD 85B882    1941            mov     dpl,_BMM150_compensate_y_sloc0_1_0
06C0 85B983    1942            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
06C3 85BAF0    1943            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
06C6 E5BB      1944            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
06C8 C006      1945            push    ar6
06CA C007      1946            push    ar7
06CC C000      1947            push    ar0
06CE C001      1948            push    ar1
06D0 120000    1949            lcall   __divslong
06D3 858200    1950            mov     __mullong_PARM_2,dpl
06D6 858301    1951            mov     (__mullong_PARM_2 + 1),dph
06D9 85F002    1952            mov     (__mullong_PARM_2 + 2),b
06DC F503      1953            mov     (__mullong_PARM_2 + 3),a
06DE D001      1954            pop     ar1
06E0 D000      1955            pop     ar0
06E2 D007      1956            pop     ar7
06E4 D006      1957            pop     ar6
06E6           1958   ;        sensor_test.c:424: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
06E6 8E82      1959            mov     dpl,r6
06E8 8F83      1960            mov     dph,r7
06EA 88F0      1961            mov     b,r0
06EC E9        1962            mov     a,r1
06ED 120000    1963            lcall   __mullong
06F0 8582B8    1964            mov     _BMM150_compensate_y_sloc0_1_0,dpl
06F3 8583B9    1965            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
06F6 85F0BA    1966            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
06F9 F5BB      1967            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
06FB D005      1968            pop     ar5
06FD D004      1969            pop     ar4
06FF E598      1970            mov     a,_dig_xy1
0701 FE        1971            mov     r6,a
0702 33        1972            rlc     a
0703 95E0      1973            subb    a,acc
0705 5401      1974            anl     a,#0x01
0707 A2E0      1975            mov     c,acc.0
0709 CE        1976            xch     a,r6
070A 13        1977            rrc     a
070B CE        1978            xch     a,r6
070C 13        1979            rrc     a
070D CE        1980            xch     a,r6
070E 8E00      1981            mov     __mullong_PARM_2,r6
0710 F501      1982            mov     (__mullong_PARM_2 + 1),a
0712 33        1983            rlc     a
0713 95E0      1984            subb    a,acc
0715 F502      1985            mov     (__mullong_PARM_2 + 2),a
0717 F503      1986            mov     (__mullong_PARM_2 + 3),a
0719           1987   ;        sensor_test.c:425: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
0719 ED        1988            mov     a,r5
071A 33        1989            rlc     a
071B 95E0      1990            subb    a,acc
071D FE        1991            mov     r6,a
071E 8C82      1992            mov     dpl,r4
0720 8D83      1993            mov     dph,r5
0722 8EF0      1994            mov     b,r6
0724 120000    1995            lcall   __mullong
0727 AC82      1996            mov     r4,dpl
0729 AD83      1997            mov     r5,dph
072B AEF0      1998            mov     r6,b
072D FF        1999            mov     r7,a
072E EC        2000            mov     a,r4
072F 25B8      2001            add     a,_BMM150_compensate_y_sloc0_1_0
0731 FC        2002            mov     r4,a
0732 ED        2003            mov     a,r5
0733 35B9      2004            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
0735 FD        2005            mov     r5,a
0736 EE        2006            mov     a,r6
0737 35BA      2007            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
0739 FE        2008            mov     r6,a
073A EF        2009            mov     a,r7
073B 35BB      2010            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
073D FF        2011            mov     r7,a
073E 750000    2012            mov     __divslong_PARM_2,#0x00
0741 750102    2013            mov     (__divslong_PARM_2 + 1),#0x02
0744 750200    2014            mov     (__divslong_PARM_2 + 2),#0x00
0747 750300    2015            mov     (__divslong_PARM_2 + 3),#0x00
074A           2016   ;        sensor_test.c:426: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
074A 8C82      2017            mov     dpl,r4
074C 8D83      2018            mov     dph,r5
074E 8EF0      2019            mov     b,r6
0750 EF        2020            mov     a,r7
0751 120000    2021            lcall   __divslong
0754 AC82      2022            mov     r4,dpl
0756 AD83      2023            mov     r5,dph
0758 AEF0      2024            mov     r6,b
075A FF        2025            mov     r7,a
075B E5D8      2026            mov     a,_dig_y2
075D F8        2027            mov     r0,a
075E 33        2028            rlc     a
075F 95E0      2029            subb    a,acc
0761 F9        2030            mov     r1,a
0762 74A0      2031            mov     a,#0xA0
0764 28        2032            add     a,r0
0765 F8        2033            mov     r0,a
0766 E4        2034            clr     a
0767 39        2035            addc    a,r1
0768 8800      2036            mov     __mullong_PARM_2,r0
076A F501      2037            mov     (__mullong_PARM_2 + 1),a
076C 33        2038            rlc     a
076D 95E0      2039            subb    a,acc
076F F502      2040            mov     (__mullong_PARM_2 + 2),a
0771 F503      2041            mov     (__mullong_PARM_2 + 3),a
0773           2042   ;        sensor_test.c:427: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
0773 7410      2043            mov     a,#0x10
0775 2E        2044            add     a,r6
0776 FE        2045            mov     r6,a
0777 E4        2046            clr     a
0778 3F        2047            addc    a,r7
0779 8C82      2048            mov     dpl,r4
077B 8D83      2049            mov     dph,r5
077D 8EF0      2050            mov     b,r6
077F 120000    2051            lcall   __mullong
0782           2052   ;        sensor_test.c:428: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
0782 750000    2053            mov     __divslong_PARM_2,#0x00
0785 750110    2054            mov     (__divslong_PARM_2 + 1),#0x10
0788 750200    2055            mov     (__divslong_PARM_2 + 2),#0x00
078B 750300    2056            mov     (__divslong_PARM_2 + 3),#0x00
078E 120000    2057            lcall   __divslong
0791 858200    2058            mov     __mullong_PARM_2,dpl
0794 858301    2059            mov     (__mullong_PARM_2 + 1),dph
0797 85F002    2060            mov     (__mullong_PARM_2 + 2),b
079A F503      2061            mov     (__mullong_PARM_2 + 3),a
079C D003      2062            pop     ar3
079E D002      2063            pop     ar2
07A0 EB        2064            mov     a,r3
07A1 33        2065            rlc     a
07A2 95E0      2066            subb    a,acc
07A4 FC        2067            mov     r4,a
07A5           2068   ;        sensor_test.c:429: retval = (int16_t)(process_comp_y9 / 8192);
07A5 8A82      2069            mov     dpl,r2
07A7 8B83      2070            mov     dph,r3
07A9 8CF0      2071            mov     b,r4
07AB 120000    2072            lcall   __mullong
07AE 750000    2073            mov     __divslong_PARM_2,#0x00
07B1 750120    2074            mov     (__divslong_PARM_2 + 1),#0x20
07B4 750200    2075            mov     (__divslong_PARM_2 + 2),#0x00
07B7 750300    2076            mov     (__divslong_PARM_2 + 3),#0x00
07BA 120000    2077            lcall   __divslong
07BD AA82      2078            mov     r2,dpl
07BF AB83      2079            mov     r3,dph
07C1           2080   ;        sensor_test.c:430: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
07C1 E518      2081            mov     a,_dig_y1
07C3 FC        2082            mov     r4,a
07C4 33        2083            rlc     a
07C5 95E0      2084            subb    a,acc
07C7 C4        2085            swap    a
07C8 03        2086            rr      a
07C9 54F8      2087            anl     a,#0xf8
07CB CC        2088            xch     a,r4
07CC C4        2089            swap    a
07CD 03        2090            rr      a
07CE CC        2091            xch     a,r4
07CF 6C        2092            xrl     a,r4
07D0 CC        2093            xch     a,r4
07D1 54F8      2094            anl     a,#0xf8
07D3 CC        2095            xch     a,r4
07D4 6C        2096            xrl     a,r4
07D5 FD        2097            mov     r5,a
07D6 EC        2098            mov     a,r4
07D7 2A        2099            add     a,r2
07D8 F582      2100            mov     dpl,a
07DA ED        2101            mov     a,r5
07DB 3B        2102            addc    a,r3
07DC F583      2103            mov     dph,a
07DE 750010    2104            mov     __divsint_PARM_2,#0x10
07E1 E4        2105            clr     a
07E2 F501      2106            mov     (__divsint_PARM_2 + 1),a
07E4 120000    2107            lcall   __divsint
07E7 E582      2108            mov     a,dpl
07E9 8583F0    2109            mov     b,dph
07EC 90C498    2110            mov     dptr,#_BMM150_compensate_y_retval_1_102
07EF F0        2111            movx    @dptr,a
07F0 A3        2112            inc     dptr
07F1 E5F0      2113            mov     a,b
07F3 F0        2114            movx    @dptr,a
07F4 8000      2115            sjmp    L013012?
07F6           2116   L013008?:
07F6           2117   ;        sensor_test.c:434: retval = BMM150_OVERFLOW_OUTPUT;
07F6 90C498    2118            mov     dptr,#_BMM150_compensate_y_retval_1_102
07F9 E4        2119            clr     a
07FA F0        2120            movx    @dptr,a
07FB A3        2121            inc     dptr
07FC 7480      2122            mov     a,#0x80
07FE F0        2123            movx    @dptr,a
07FF 8000      2124            sjmp    L013012?
0801           2125   L013011?:
0801           2126   ;        sensor_test.c:440: retval = BMM150_OVERFLOW_OUTPUT;
0801 90C498    2127            mov     dptr,#_BMM150_compensate_y_retval_1_102
0804 E4        2128            clr     a
0805 F0        2129            movx    @dptr,a
0806 A3        2130            inc     dptr
0807 7480      2131            mov     a,#0x80
0809 F0        2132            movx    @dptr,a
080A           2133   L013012?:
080A           2134   ;        sensor_test.c:443: return retval;
080A 90C498    2135            mov     dptr,#_BMM150_compensate_y_retval_1_102
080D E0        2136            movx    a,@dptr
080E FA        2137            mov     r2,a
080F A3        2138            inc     dptr
0810 E0        2139            movx    a,@dptr
0811 8A82      2140            mov     dpl,r2
0813 F583      2141            mov     dph,a
0815 22        2142            ret
0816           2143   ;------------------------------------------------------------
0816           2144   ;Allocation info for local variables in function 'BMM150_compensate_z'
0816           2145   ;------------------------------------------------------------
0816           2146   ;data_rhall                Allocated with name '_BMM150_compensate_z_PARM_2'
0816           2147   ;mag_data_z                Allocated to registers r2 r3 r4 
0816           2148   ;sloc0                     Allocated with name '_BMM150_compensate_z_sloc0_1_0'
0816           2149   ;sloc1                     Allocated with name '_BMM150_compensate_z_sloc1_1_0'
0816           2150   ;sloc2                     Allocated with name '_BMM150_compensate_z_sloc2_1_0'
0816           2151   ;retval                    Allocated with name '_BMM150_compensate_z_retval_1_111'
0816           2152   ;process_comp_z0           Allocated with name '_BMM150_compensate_z_process_comp_z0_1_111'
0816           2153   ;process_comp_z1           Allocated with name '_BMM150_compensate_z_process_comp_z1_1_111'
0816           2154   ;process_comp_z2           Allocated with name '_BMM150_compensate_z_process_comp_z2_1_111'
0816           2155   ;process_comp_z3           Allocated with name '_BMM150_compensate_z_process_comp_z3_1_111'
0816           2156   ;process_comp_z4           Allocated with name '_BMM150_compensate_z_process_comp_z4_1_111'
0816           2157   ;------------------------------------------------------------
0816           2158   ;        sensor_test.c:446: int16_t BMM150_compensate_z (int16_t *mag_data_z, int16_t *data_rhall){
0816           2159   ;        -----------------------------------------
0816           2160   ;         function BMM150_compensate_z
0816           2161   ;        -----------------------------------------
0816           2162   _BMM150_compensate_z:
0816           2163   ;        sensor_test.c:454: if (*mag_data_z != BMM150_OVERFLOW_ADCVAL_ZAXIS_HALL)
0816 ACF0      2164            mov     r4,b
0818 120000    2165            lcall   __gptrget
081B FA        2166            mov     r2,a
081C A3        2167            inc     dptr
081D 120000    2168            lcall   __gptrget
0820 FB        2169            mov     r3,a
0821 BA0098    2170            cjne    r2,#0x00,L014024?
0824 BBC098    2171            cjne    r3,#0xC0,L014024?
0827 020000    2172            ljmp    L014013?
082A           2173   L014024?:
082A           2174   ;        sensor_test.c:456: if ((dig_z2 != 0) && (dig_z1 != 0) && (*data_rhall != 0) &&
082A E558      2175            mov     a,_dig_z2
082C 7000      2176            jnz     L014025?
082E 020000    2177            ljmp    L014007?
0831           2178   L014025?:
0831 E598      2179            mov     a,_dig_z1
0833 7000      2180            jnz     L014026?
0835 020000    2181            ljmp    L014007?
0838           2182   L014026?:
0838 AC48      2183            mov     r4,_BMM150_compensate_z_PARM_2
083A AD49      2184            mov     r5,(_BMM150_compensate_z_PARM_2 + 1)
083C AE4A      2185            mov     r6,(_BMM150_compensate_z_PARM_2 + 2)
083E 8C82      2186            mov     dpl,r4
0840 8D83      2187            mov     dph,r5
0842 8EF0      2188            mov     b,r6
0844 120000    2189            lcall   __gptrget
0847 FC        2190            mov     r4,a
0848 A3        2191            inc     dptr
0849 120000    2192            lcall   __gptrget
084C FD        2193            mov     r5,a
084D 4C        2194            orl     a,r4
084E 7000      2195            jnz     L014027?
0850 020000    2196            ljmp    L014007?
0853           2197   L014027?:
0853           2198   ;        sensor_test.c:457: (dig_xyz1 != 0))
0853 E518      2199            mov     a,_dig_xyz1
0855 7000      2200            jnz     L014028?
0857 020000    2201            ljmp    L014007?
085A           2202   L014028?:
085A           2203   ;        sensor_test.c:460: process_comp_z0 = ((int16_t)*data_rhall) - ((int16_t)dig_xyz1);
085A E518      2204            mov     a,_dig_xyz1
085C FE        2205            mov     r6,a
085D 33        2206            rlc     a
085E 95E0      2207            subb    a,acc
0860 FF        2208            mov     r7,a
0861 EC        2209            mov     a,r4
0862 C3        2210            clr     c
0863 9E        2211            subb    a,r6
0864 F508      2212            mov     _BMM150_compensate_z_sloc0_1_0,a
0866 ED        2213            mov     a,r5
0867 9F        2214            subb    a,r7
0868 F509      2215            mov     (_BMM150_compensate_z_sloc0_1_0 + 1),a
086A           2216   ;        sensor_test.c:461: process_comp_z1 = (((int32_t)dig_z3) * ((int32_t)(process_comp_z0))) / 4;
086A E518      2217            mov     a,_dig_z3
086C F8        2218            mov     r0,a
086D 33        2219            rlc     a
086E 95E0      2220            subb    a,acc
0870 F9        2221            mov     r1,a
0871 FE        2222            mov     r6,a
0872 FF        2223            mov     r7,a
0873 850800    2224            mov     __mullong_PARM_2,_BMM150_compensate_z_sloc0_1_0
0876 E509      2225            mov     a,(_BMM150_compensate_z_sloc0_1_0 + 1)
0878 F501      2226            mov     (__mullong_PARM_2 + 1),a
087A 33        2227            rlc     a
087B 95E0      2228            subb    a,acc
087D F502      2229            mov     (__mullong_PARM_2 + 2),a
087F F503      2230            mov     (__mullong_PARM_2 + 3),a
0881 8882      2231            mov     dpl,r0
0883 8983      2232            mov     dph,r1
0885 8EF0      2233            mov     b,r6
0887 EF        2234            mov     a,r7
0888 C002      2235            push    ar2
088A C003      2236            push    ar3
088C C004      2237            push    ar4
088E C005      2238            push    ar5
0890 120000    2239            lcall   __mullong
0893 AE82      2240            mov     r6,dpl
0895 AF83      2241            mov     r7,dph
0897 A8F0      2242            mov     r0,b
0899 F9        2243            mov     r1,a
089A 750004    2244            mov     __divslong_PARM_2,#0x04
089D E4        2245            clr     a
089E F501      2246            mov     (__divslong_PARM_2 + 1),a
08A0 F502      2247            mov     (__divslong_PARM_2 + 2),a
08A2 F503      2248            mov     (__divslong_PARM_2 + 3),a
08A4           2249   ;        sensor_test.c:462: process_comp_z2 = (((int32_t)(*mag_data_z - dig_z4)) * 32768);
08A4 8E82      2250            mov     dpl,r6
08A6 8F83      2251            mov     dph,r7
08A8 88F0      2252            mov     b,r0
08AA E9        2253            mov     a,r1
08AB 120000    2254            lcall   __divslong
08AE 858258    2255            mov     _BMM150_compensate_z_sloc1_1_0,dpl
08B1 858359    2256            mov     (_BMM150_compensate_z_sloc1_1_0 + 1),dph
08B4 85F05A    2257            mov     (_BMM150_compensate_z_sloc1_1_0 + 2),b
08B7 F55B      2258            mov     (_BMM150_compensate_z_sloc1_1_0 + 3),a
08B9 D005      2259            pop     ar5
08BB D004      2260            pop     ar4
08BD D003      2261            pop     ar3
08BF D002      2262            pop     ar2
08C1 E5D8      2263            mov     a,_dig_z4
08C3 FE        2264            mov     r6,a
08C4 33        2265            rlc     a
08C5 95E0      2266            subb    a,acc
08C7 FF        2267            mov     r7,a
08C8 EA        2268            mov     a,r2
08C9 C3        2269            clr     c
08CA 9E        2270            subb    a,r6
08CB FA        2271            mov     r2,a
08CC EB        2272            mov     a,r3
08CD 9F        2273            subb    a,r7
08CE FB        2274            mov     r3,a
08CF 33        2275            rlc     a
08D0 95E0      2276            subb    a,acc
08D2 8BAA      2277            mov     (_BMM150_compensate_z_sloc2_1_0 + 2),r3
08D4 5401      2278            anl     a,#0x01
08D6 A2E0      2279            mov     c,acc.0
08D8 C5AA      2280            xch     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
08DA 13        2281            rrc     a
08DB C5AA      2282            xch     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
08DD 13        2283            rrc     a
08DE C5AA      2284            xch     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
08E0 F5AB      2285            mov     (_BMM150_compensate_z_sloc2_1_0 + 3),a
08E2 EA        2286            mov     a,r2
08E3 03        2287            rr      a
08E4 5480      2288            anl     a,#0x80
08E6 F5A9      2289            mov     (_BMM150_compensate_z_sloc2_1_0 + 1),a
08E8 EA        2290            mov     a,r2
08E9 C3        2291            clr     c
08EA 13        2292            rrc     a
08EB 45AA      2293            orl     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
08ED F5AA      2294            mov     (_BMM150_compensate_z_sloc2_1_0 + 2),a
08EF 75A800    2295            mov     _BMM150_compensate_z_sloc2_1_0,#0x00
08F2           2296   ;        sensor_test.c:463: process_comp_z3 = ((int32_t)dig_z1) * (((int16_t)*data_rhall) * 2);
08F2 E598      2297            mov     a,_dig_z1
08F4 F8        2298            mov     r0,a
08F5 33        2299            rlc     a
08F6 95E0      2300            subb    a,acc
08F8 F9        2301            mov     r1,a
08F9 FA        2302            mov     r2,a
08FA FB        2303            mov     r3,a
08FB ED        2304            mov     a,r5
08FC CC        2305            xch     a,r4
08FD 25E0      2306            add     a,acc
08FF CC        2307            xch     a,r4
0900 33        2308            rlc     a
0901 8C00      2309            mov     __mullong_PARM_2,r4
0903 F501      2310            mov     (__mullong_PARM_2 + 1),a
0905 33        2311            rlc     a
0906 95E0      2312            subb    a,acc
0908 F502      2313            mov     (__mullong_PARM_2 + 2),a
090A F503      2314            mov     (__mullong_PARM_2 + 3),a
090C           2315   ;        sensor_test.c:464: process_comp_z4 = (int16_t)((process_comp_z3 + (32768)) / 65536);
090C 8882      2316            mov     dpl,r0
090E 8983      2317            mov     dph,r1
0910 8AF0      2318            mov     b,r2
0912 EB        2319            mov     a,r3
0913 120000    2320            lcall   __mullong
0916 AA82      2321            mov     r2,dpl
0918 AB83      2322            mov     r3,dph
091A ACF0      2323            mov     r4,b
091C FD        2324            mov     r5,a
091D 7480      2325            mov     a,#0x80
091F 2B        2326            add     a,r3
0920 FB        2327            mov     r3,a
0921 E4        2328            clr     a
0922 3C        2329            addc    a,r4
0923 FC        2330            mov     r4,a
0924 E4        2331            clr     a
0925 3D        2332            addc    a,r5
0926 FD        2333            mov     r5,a
0927 750000    2334            mov     __divslong_PARM_2,#0x00
092A 750100    2335            mov     (__divslong_PARM_2 + 1),#0x00
092D 750201    2336            mov     (__divslong_PARM_2 + 2),#0x01
0930 750300    2337            mov     (__divslong_PARM_2 + 3),#0x00
0933 8A82      2338            mov     dpl,r2
0935 8B83      2339            mov     dph,r3
0937 8CF0      2340            mov     b,r4
0939 ED        2341            mov     a,r5
093A 120000    2342            lcall   __divslong
093D AA82      2343            mov     r2,dpl
093F AB83      2344            mov     r3,dph
0941           2345   ;        sensor_test.c:465: retval = ((process_comp_z2 - process_comp_z1) / (dig_z2 + process_comp_z4));
0941 E5A8      2346            mov     a,_BMM150_compensate_z_sloc2_1_0
0943 C3        2347            clr     c
0944 9558      2348            subb    a,_BMM150_compensate_z_sloc1_1_0
0946 FC        2349            mov     r4,a
0947 E5A9      2350            mov     a,(_BMM150_compensate_z_sloc2_1_0 + 1)
0949 9559      2351            subb    a,(_BMM150_compensate_z_sloc1_1_0 + 1)
094B FD        2352            mov     r5,a
094C E5AA      2353            mov     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
094E 955A      2354            subb    a,(_BMM150_compensate_z_sloc1_1_0 + 2)
0950 FE        2355            mov     r6,a
0951 E5AB      2356            mov     a,(_BMM150_compensate_z_sloc2_1_0 + 3)
0953 955B      2357            subb    a,(_BMM150_compensate_z_sloc1_1_0 + 3)
0955 FF        2358            mov     r7,a
0956 E558      2359            mov     a,_dig_z2
0958 F8        2360            mov     r0,a
0959 33        2361            rlc     a
095A 95E0      2362            subb    a,acc
095C F9        2363            mov     r1,a
095D EA        2364            mov     a,r2
095E 28        2365            add     a,r0
095F FA        2366            mov     r2,a
0960 EB        2367            mov     a,r3
0961 39        2368            addc    a,r1
0962 8A00      2369            mov     __divslong_PARM_2,r2
0964 F501      2370            mov     (__divslong_PARM_2 + 1),a
0966 33        2371            rlc     a
0967 95E0      2372            subb    a,acc
0969 F502      2373            mov     (__divslong_PARM_2 + 2),a
096B F503      2374            mov     (__divslong_PARM_2 + 3),a
096D 8C82      2375            mov     dpl,r4
096F 8D83      2376            mov     dph,r5
0971 8EF0      2377            mov     b,r6
0973 EF        2378            mov     a,r7
0974 120000    2379            lcall   __divslong
0977 AA82      2380            mov     r2,dpl
0979 AB83      2381            mov     r3,dph
097B ACF0      2382            mov     r4,b
097D FD        2383            mov     r5,a
097E 90C558    2384            mov     dptr,#_BMM150_compensate_z_retval_1_111
0981 EA        2385            mov     a,r2
0982 F0        2386            movx    @dptr,a
0983 A3        2387            inc     dptr
0984 EB        2388            mov     a,r3
0985 F0        2389            movx    @dptr,a
0986 A3        2390            inc     dptr
0987 EC        2391            mov     a,r4
0988 F0        2392            movx    @dptr,a
0989 A3        2393            inc     dptr
098A ED        2394            mov     a,r5
098B F0        2395            movx    @dptr,a
098C           2396   ;        sensor_test.c:468: if (retval > BMM150_POSITIVE_SATURATION_Z)
098C C3        2397            clr     c
098D 74FF      2398            mov     a,#0xFF
098F 9A        2399            subb    a,r2
0990 747F      2400            mov     a,#0x7F
0992 9B        2401            subb    a,r3
0993 E4        2402            clr     a
0994 9C        2403            subb    a,r4
0995 E4        2404            clr     a
0996 6480      2405            xrl     a,#0x80
0998 8DF0      2406            mov     b,r5
099A 63F080    2407            xrl     b,#0x80
099D 95F0      2408            subb    a,b
099F 5000      2409            jnc     L014004?
09A1           2410   ;        sensor_test.c:470: retval = BMM150_POSITIVE_SATURATION_Z;
09A1 90C558    2411            mov     dptr,#_BMM150_compensate_z_retval_1_111
09A4 74FF      2412            mov     a,#0xFF
09A6 F0        2413            movx    @dptr,a
09A7 A3        2414            inc     dptr
09A8 747F      2415            mov     a,#0x7F
09AA F0        2416            movx    @dptr,a
09AB A3        2417            inc     dptr
09AC E4        2418            clr     a
09AD F0        2419            movx    @dptr,a
09AE A3        2420            inc     dptr
09AF F0        2421            movx    @dptr,a
09B0 8000      2422            sjmp    L014005?
09B2           2423   L014004?:
09B2           2424   ;        sensor_test.c:472: else if (retval < BMM150_NEGATIVE_SATURATION_Z)
09B2 C3        2425            clr     c
09B3 EA        2426            mov     a,r2
09B4 9401      2427            subb    a,#0x01
09B6 EB        2428            mov     a,r3
09B7 9480      2429            subb    a,#0x80
09B9 EC        2430            mov     a,r4
09BA 94FF      2431            subb    a,#0xFF
09BC ED        2432            mov     a,r5
09BD 6480      2433            xrl     a,#0x80
09BF 947F      2434            subb    a,#0x7f
09C1 5000      2435            jnc     L014005?
09C3           2436   ;        sensor_test.c:474: retval = BMM150_NEGATIVE_SATURATION_Z;
09C3 90C558    2437            mov     dptr,#_BMM150_compensate_z_retval_1_111
09C6 7401      2438            mov     a,#0x01
09C8 F0        2439            movx    @dptr,a
09C9 A3        2440            inc     dptr
09CA 7480      2441            mov     a,#0x80
09CC F0        2442            movx    @dptr,a
09CD A3        2443            inc     dptr
09CE 74FF      2444            mov     a,#0xFF
09D0 F0        2445            movx    @dptr,a
09D1 A3        2446            inc     dptr
09D2 F0        2447            movx    @dptr,a
09D3           2448   L014005?:
09D3           2449   ;        sensor_test.c:478: retval = retval / 16;
09D3 90C558    2450            mov     dptr,#_BMM150_compensate_z_retval_1_111
09D6 E0        2451            movx    a,@dptr
09D7 FA        2452            mov     r2,a
09D8 A3        2453            inc     dptr
09D9 E0        2454            movx    a,@dptr
09DA FB        2455            mov     r3,a
09DB A3        2456            inc     dptr
09DC E0        2457            movx    a,@dptr
09DD FC        2458            mov     r4,a
09DE A3        2459            inc     dptr
09DF E0        2460            movx    a,@dptr
09E0 FD        2461            mov     r5,a
09E1 750010    2462            mov     __divslong_PARM_2,#0x10
09E4 E4        2463            clr     a
09E5 F501      2464            mov     (__divslong_PARM_2 + 1),a
09E7 F502      2465            mov     (__divslong_PARM_2 + 2),a
09E9 F503      2466            mov     (__divslong_PARM_2 + 3),a
09EB 8A82      2467            mov     dpl,r2
09ED 8B83      2468            mov     dph,r3
09EF 8CF0      2469            mov     b,r4
09F1 ED        2470            mov     a,r5
09F2 120000    2471            lcall   __divslong
09F5 AA82      2472            mov     r2,dpl
09F7 AB83      2473            mov     r3,dph
09F9 ACF0      2474            mov     r4,b
09FB FD        2475            mov     r5,a
09FC 90C558    2476            mov     dptr,#_BMM150_compensate_z_retval_1_111
09FF EA        2477            mov     a,r2
0A00 F0        2478            movx    @dptr,a
0A01 A3        2479            inc     dptr
0A02 EB        2480            mov     a,r3
0A03 F0        2481            movx    @dptr,a
0A04 A3        2482            inc     dptr
0A05 EC        2483            mov     a,r4
0A06 F0        2484            movx    @dptr,a
0A07 A3        2485            inc     dptr
0A08 ED        2486            mov     a,r5
0A09 F0        2487            movx    @dptr,a
0A0A 8000      2488            sjmp    L014014?
0A0C           2489   L014007?:
0A0C           2490   ;        sensor_test.c:482: retval = BMM150_OVERFLOW_OUTPUT;
0A0C 90C558    2491            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A0F E4        2492            clr     a
0A10 F0        2493            movx    @dptr,a
0A11 A3        2494            inc     dptr
0A12 7480      2495            mov     a,#0x80
0A14 F0        2496            movx    @dptr,a
0A15 A3        2497            inc     dptr
0A16 74FF      2498            mov     a,#0xFF
0A18 F0        2499            movx    @dptr,a
0A19 A3        2500            inc     dptr
0A1A F0        2501            movx    @dptr,a
0A1B 8000      2502            sjmp    L014014?
0A1D           2503   L014013?:
0A1D           2504   ;        sensor_test.c:488: retval = BMM150_OVERFLOW_OUTPUT;
0A1D 90C558    2505            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A20 E4        2506            clr     a
0A21 F0        2507            movx    @dptr,a
0A22 A3        2508            inc     dptr
0A23 7480      2509            mov     a,#0x80
0A25 F0        2510            movx    @dptr,a
0A26 A3        2511            inc     dptr
0A27 74FF      2512            mov     a,#0xFF
0A29 F0        2513            movx    @dptr,a
0A2A A3        2514            inc     dptr
0A2B F0        2515            movx    @dptr,a
0A2C           2516   L014014?:
0A2C           2517   ;        sensor_test.c:491: return (int16_t)retval;
0A2C 90C558    2518            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A2F E0        2519            movx    a,@dptr
0A30 FA        2520            mov     r2,a
0A31 A3        2521            inc     dptr
0A32 E0        2522            movx    a,@dptr
0A33 FB        2523            mov     r3,a
0A34 A3        2524            inc     dptr
0A35 E0        2525            movx    a,@dptr
0A36 A3        2526            inc     dptr
0A37 E0        2527            movx    a,@dptr
0A38 8A82      2528            mov     dpl,r2
0A3A 8B83      2529            mov     dph,r3
0A3C 22        2530            ret
0A3D           2531   ;------------------------------------------------------------
0A3D           2532   ;Allocation info for local variables in function 'BMM150_Read_Data'
0A3D           2533   ;------------------------------------------------------------
0A3D           2534   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
0A3D           2535   ;mag_z                     Allocated with name '_BMM150_Read_Data_PARM_3'
0A3D           2536   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_118'
0A3D           2537   ;raw_x_lsb                 Allocated to registers r5 
0A3D           2538   ;raw_x_msb                 Allocated to registers r6 
0A3D           2539   ;raw_y_lsb                 Allocated with name '_BMM150_Read_Data_raw_y_lsb_1_119'
0A3D           2540   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_119'
0A3D           2541   ;raw_z_lsb                 Allocated with name '_BMM150_Read_Data_raw_z_lsb_1_119'
0A3D           2542   ;raw_z_msb                 Allocated with name '_BMM150_Read_Data_raw_z_msb_1_119'
0A3D           2543   ;raw_rhall_lsb             Allocated with name '_BMM150_Read_Data_raw_rhall_lsb_1_119'
0A3D           2544   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_119'
0A3D           2545   ;raw_z                     Allocated with name '_BMM150_Read_Data_raw_z_1_119'
0A3D           2546   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_119'
0A3D           2547   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_119'
0A3D           2548   ;z_val                     Allocated with name '_BMM150_Read_Data_z_val_1_119'
0A3D           2549   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_119'
0A3D           2550   ;z_raw                     Allocated to registers r3 r2 
0A3D           2551   ;------------------------------------------------------------
0A3D           2552   ;        sensor_test.c:494: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y, int16_t *mag_z)
0A3D           2553   ;        -----------------------------------------
0A3D           2554   ;         function BMM150_Read_Data
0A3D           2555   ;        -----------------------------------------
0A3D           2556   _BMM150_Read_Data:
0A3D 8582F8    2557            mov     _BMM150_Read_Data_mag_x_1_118,dpl
0A40 8583F9    2558            mov     (_BMM150_Read_Data_mag_x_1_118 + 1),dph
0A43 85F0FA    2559            mov     (_BMM150_Read_Data_mag_x_1_118 + 2),b
0A46           2560   ;        sensor_test.c:499: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
0A46 758242    2561            mov     dpl,#0x42
0A49 120000    2562            lcall   _SPI_read
0A4C AD82      2563            mov     r5,dpl
0A4E           2564   ;        sensor_test.c:500: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
0A4E 758243    2565            mov     dpl,#0x43
0A51 C005      2566            push    ar5
0A53 120000    2567            lcall   _SPI_read
0A56 AE82      2568            mov     r6,dpl
0A58           2569   ;        sensor_test.c:501: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
0A58 758244    2570            mov     dpl,#0x44
0A5B C006      2571            push    ar6
0A5D 120000    2572            lcall   _SPI_read
0A60 858258    2573            mov     _BMM150_Read_Data_raw_y_lsb_1_119,dpl
0A63           2574   ;        sensor_test.c:502: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
0A63 758245    2575            mov     dpl,#0x45
0A66 120000    2576            lcall   _SPI_read
0A69 8582B8    2577            mov     _BMM150_Read_Data_raw_y_msb_1_119,dpl
0A6C           2578   ;        sensor_test.c:503: SPI_read_block(BMM150_DATA_X_LSB, raw_z, 2);
0A6C 75D888    2579            mov     _SPI_read_block_PARM_2,#_BMM150_Read_Data_raw_z_1_119
0A6F 75D900    2580            mov     (_SPI_read_block_PARM_2 + 1),#0x00
0A72 75DA40    2581            mov     (_SPI_read_block_PARM_2 + 2),#0x40
0A75 758802    2582            mov     _SPI_read_block_PARM_3,#0x02
0A78 758242    2583            mov     dpl,#0x42
0A7B 120000    2584            lcall   _SPI_read_block
0A7E           2585   ;        sensor_test.c:506: raw_z_lsb = raw_z[0];
0A7E 858818    2586            mov     _BMM150_Read_Data_raw_z_lsb_1_119,_BMM150_Read_Data_raw_z_1_119
0A81           2587   ;        sensor_test.c:507: raw_z_msb = raw_z[1];
0A81 858978    2588            mov     _BMM150_Read_Data_raw_z_msb_1_119,(_BMM150_Read_Data_raw_z_1_119 + 0x0001)
0A84           2589   ;        sensor_test.c:508: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
0A84 758248    2590            mov     dpl,#0x48
0A87 120000    2591            lcall   _SPI_read
0A8A 8582D8    2592            mov     _BMM150_Read_Data_raw_rhall_lsb_1_119,dpl
0A8D           2593   ;        sensor_test.c:509: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
0A8D 758249    2594            mov     dpl,#0x49
0A90 120000    2595            lcall   _SPI_read
0A93 858238    2596            mov     _BMM150_Read_Data_raw_rhall_msb_1_119,dpl
0A96           2597   ;        sensor_test.c:510: SPI_read_block(BMM150_DATA_X_LSB, raw_z, 2);
0A96 75D888    2598            mov     _SPI_read_block_PARM_2,#_BMM150_Read_Data_raw_z_1_119
0A99 75D900    2599            mov     (_SPI_read_block_PARM_2 + 1),#0x00
0A9C 75DA40    2600            mov     (_SPI_read_block_PARM_2 + 2),#0x40
0A9F 758802    2601            mov     _SPI_read_block_PARM_3,#0x02
0AA2 758242    2602            mov     dpl,#0x42
0AA5 120000    2603            lcall   _SPI_read_block
0AA8 D006      2604            pop     ar6
0AAA D005      2605            pop     ar5
0AAC           2606   ;        sensor_test.c:515: x_val = ((int16_t)((int8_t)raw_x_msb)) * 32 + ((raw_x_lsb & 0xF8) >> 3);
0AAC EE        2607            mov     a,r6
0AAD 33        2608            rlc     a
0AAE 95E0      2609            subb    a,acc
0AB0 C4        2610            swap    a
0AB1 23        2611            rl      a
0AB2 54E0      2612            anl     a,#0xe0
0AB4 CE        2613            xch     a,r6
0AB5 C4        2614            swap    a
0AB6 23        2615            rl      a
0AB7 CE        2616            xch     a,r6
0AB8 6E        2617            xrl     a,r6
0AB9 CE        2618            xch     a,r6
0ABA 54E0      2619            anl     a,#0xe0
0ABC CE        2620            xch     a,r6
0ABD 6E        2621            xrl     a,r6
0ABE FF        2622            mov     r7,a
0ABF 5305F8    2623            anl     ar5,#0xF8
0AC2 ED        2624            mov     a,r5
0AC3 C4        2625            swap    a
0AC4 23        2626            rl      a
0AC5 541F      2627            anl     a,#0x1f
0AC7 FD        2628            mov     r5,a
0AC8 7A00      2629            mov     r2,#0x00
0ACA 2E        2630            add     a,r6
0ACB FB        2631            mov     r3,a
0ACC EA        2632            mov     a,r2
0ACD 3F        2633            addc    a,r7
0ACE FA        2634            mov     r2,a
0ACF 8BD8      2635            mov     _BMM150_Read_Data_x_val_1_119,r3
0AD1 8AD9      2636            mov     (_BMM150_Read_Data_x_val_1_119 + 1),r2
0AD3           2637   ;        sensor_test.c:516: if (x_val > 4095){
0AD3 C3        2638            clr     c
0AD4 74FF      2639            mov     a,#0xFF
0AD6 9B        2640            subb    a,r3
0AD7 748F      2641            mov     a,#(0x0F ^ 0x80)
0AD9 8AF0      2642            mov     b,r2
0ADB 63F080    2643            xrl     b,#0x80
0ADE 95F0      2644            subb    a,b
0AE0 5000      2645            jnc     L015002?
0AE2           2646   ;        sensor_test.c:517: x_val = x_val - 8192;  // 2's complement sign correction
0AE2 8BD8      2647            mov     _BMM150_Read_Data_x_val_1_119,r3
0AE4 EA        2648            mov     a,r2
0AE5 24E0      2649            add     a,#0xe0
0AE7 F5D9      2650            mov     (_BMM150_Read_Data_x_val_1_119 + 1),a
0AE9           2651   L015002?:
0AE9           2652   ;        sensor_test.c:520: y_val = ((int16_t)((int8_t)raw_y_msb)) * 32 + ((raw_y_lsb & 0xF8) >> 3);
0AE9 E5B8      2653            mov     a,_BMM150_Read_Data_raw_y_msb_1_119
0AEB FA        2654            mov     r2,a
0AEC 33        2655            rlc     a
0AED 95E0      2656            subb    a,acc
0AEF C4        2657            swap    a
0AF0 23        2658            rl      a
0AF1 54E0      2659            anl     a,#0xe0
0AF3 CA        2660            xch     a,r2
0AF4 C4        2661            swap    a
0AF5 23        2662            rl      a
0AF6 CA        2663            xch     a,r2
0AF7 6A        2664            xrl     a,r2
0AF8 CA        2665            xch     a,r2
0AF9 54E0      2666            anl     a,#0xe0
0AFB CA        2667            xch     a,r2
0AFC 6A        2668            xrl     a,r2
0AFD FB        2669            mov     r3,a
0AFE 74F8      2670            mov     a,#0xF8
0B00 5558      2671            anl     a,_BMM150_Read_Data_raw_y_lsb_1_119
0B02 C4        2672            swap    a
0B03 23        2673            rl      a
0B04 541F      2674            anl     a,#0x1f
0B06 FC        2675            mov     r4,a
0B07 7D00      2676            mov     r5,#0x00
0B09 2A        2677            add     a,r2
0B0A FA        2678            mov     r2,a
0B0B ED        2679            mov     a,r5
0B0C 3B        2680            addc    a,r3
0B0D FB        2681            mov     r3,a
0B0E 8A28      2682            mov     _BMM150_Read_Data_y_val_1_119,r2
0B10 8B29      2683            mov     (_BMM150_Read_Data_y_val_1_119 + 1),r3
0B12           2684   ;        sensor_test.c:521: if (y_val > 4095) {
0B12 C3        2685            clr     c
0B13 74FF      2686            mov     a,#0xFF
0B15 9A        2687            subb    a,r2
0B16 748F      2688            mov     a,#(0x0F ^ 0x80)
0B18 8BF0      2689            mov     b,r3
0B1A 63F080    2690            xrl     b,#0x80
0B1D 95F0      2691            subb    a,b
0B1F 5000      2692            jnc     L015004?
0B21           2693   ;        sensor_test.c:522: y_val = y_val - 8192;  // 2's complement sign correction
0B21 8A28      2694            mov     _BMM150_Read_Data_y_val_1_119,r2
0B23 EB        2695            mov     a,r3
0B24 24E0      2696            add     a,#0xe0
0B26 F529      2697            mov     (_BMM150_Read_Data_y_val_1_119 + 1),a
0B28           2698   L015004?:
0B28           2699   ;        sensor_test.c:529: z_raw = ((uint16_t)raw_z_msb << 7) | ((raw_z_lsb & 0xFE) >> 1);
0B28 AF78      2700            mov     r7,_BMM150_Read_Data_raw_z_msb_1_119
0B2A E4        2701            clr     a
0B2B 5401      2702            anl     a,#0x01
0B2D A2E0      2703            mov     c,acc.0
0B2F CF        2704            xch     a,r7
0B30 13        2705            rrc     a
0B31 CF        2706            xch     a,r7
0B32 13        2707            rrc     a
0B33 CF        2708            xch     a,r7
0B34 FA        2709            mov     r2,a
0B35 74FE      2710            mov     a,#0xFE
0B37 5518      2711            anl     a,_BMM150_Read_Data_raw_z_lsb_1_119
0B39 C3        2712            clr     c
0B3A 13        2713            rrc     a
0B3B 7C00      2714            mov     r4,#0x00
0B3D 4F        2715            orl     a,r7
0B3E FB        2716            mov     r3,a
0B3F EC        2717            mov     a,r4
0B40 4A        2718            orl     a,r2
0B41 FA        2719            mov     r2,a
0B42           2720   ;        sensor_test.c:530: if (z_raw > 0x3FFF) z_val = z_raw - 0x8000;
0B42 C3        2721            clr     c
0B43 74FF      2722            mov     a,#0xFF
0B45 9B        2723            subb    a,r3
0B46 743F      2724            mov     a,#0x3F
0B48 9A        2725            subb    a,r2
0B49 5000      2726            jnc     L015006?
0B4B 8B78      2727            mov     _BMM150_Read_Data_z_val_1_119,r3
0B4D EA        2728            mov     a,r2
0B4E 2480      2729            add     a,#0x80
0B50 F579      2730            mov     (_BMM150_Read_Data_z_val_1_119 + 1),a
0B52 8000      2731            sjmp    L015007?
0B54           2732   L015006?:
0B54           2733   ;        sensor_test.c:531: else z_val = z_raw; 
0B54 8B78      2734            mov     _BMM150_Read_Data_z_val_1_119,r3
0B56 8A79      2735            mov     (_BMM150_Read_Data_z_val_1_119 + 1),r2
0B58           2736   L015007?:
0B58           2737   ;        sensor_test.c:534: rhall_val = ((uint16_t)raw_rhall_msb) * 64 + (raw_rhall_lsb & 0x3F); 
0B58 AF38      2738            mov     r7,_BMM150_Read_Data_raw_rhall_msb_1_119
0B5A E4        2739            clr     a
0B5B 5403      2740            anl     a,#0x03
0B5D A2E0      2741            mov     c,acc.0
0B5F CF        2742            xch     a,r7
0B60 13        2743            rrc     a
0B61 CF        2744            xch     a,r7
0B62 13        2745            rrc     a
0B63 A2E0      2746            mov     c,acc.0
0B65 CF        2747            xch     a,r7
0B66 13        2748            rrc     a
0B67 CF        2749            xch     a,r7
0B68 13        2750            rrc     a
0B69 CF        2751            xch     a,r7
0B6A FA        2752            mov     r2,a
0B6B 743F      2753            mov     a,#0x3F
0B6D 55D8      2754            anl     a,_BMM150_Read_Data_raw_rhall_lsb_1_119
0B6F 7C00      2755            mov     r4,#0x00
0B71 2F        2756            add     a,r7
0B72 F5D8      2757            mov     _BMM150_Read_Data_rhall_val_1_119,a
0B74 EC        2758            mov     a,r4
0B75 3A        2759            addc    a,r2
0B76 F5D9      2760            mov     (_BMM150_Read_Data_rhall_val_1_119 + 1),a
0B78           2761   ;        sensor_test.c:538: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
0B78 75E8D8    2762            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_119
0B7B 75E900    2763            mov     (_BMM150_compensate_x_PARM_2 + 1),#0x00
0B7E 75EA40    2764            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x40
0B81 90C0D8    2765            mov     dptr,#_BMM150_Read_Data_x_val_1_119
0B84 75F040    2766            mov     b,#0x40
0B87 120000    2767            lcall   _BMM150_compensate_x
0B8A AA82      2768            mov     r2,dpl
0B8C AB83      2769            mov     r3,dph
0B8E 85F882    2770            mov     dpl,_BMM150_Read_Data_mag_x_1_118
0B91 85F983    2771            mov     dph,(_BMM150_Read_Data_mag_x_1_118 + 1)
0B94 85FAF0    2772            mov     b,(_BMM150_Read_Data_mag_x_1_118 + 2)
0B97 EA        2773            mov     a,r2
0B98 120000    2774            lcall   __gptrput
0B9B A3        2775            inc     dptr
0B9C EB        2776            mov     a,r3
0B9D 120000    2777            lcall   __gptrput
0BA0           2778   ;        sensor_test.c:539: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
0BA0 AAF8      2779            mov     r2,_BMM150_Read_Data_PARM_2
0BA2 ABF9      2780            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
0BA4 ACFA      2781            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
0BA6 7598D8    2782            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_119
0BA9 759900    2783            mov     (_BMM150_compensate_y_PARM_2 + 1),#0x00
0BAC 759A40    2784            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x40
0BAF 90C128    2785            mov     dptr,#_BMM150_Read_Data_y_val_1_119
0BB2 75F040    2786            mov     b,#0x40
0BB5 C002      2787            push    ar2
0BB7 C003      2788            push    ar3
0BB9 C004      2789            push    ar4
0BBB 120000    2790            lcall   _BMM150_compensate_y
0BBE AD82      2791            mov     r5,dpl
0BC0 AE83      2792            mov     r6,dph
0BC2 D004      2793            pop     ar4
0BC4 D003      2794            pop     ar3
0BC6 D002      2795            pop     ar2
0BC8 8A82      2796            mov     dpl,r2
0BCA 8B83      2797            mov     dph,r3
0BCC 8CF0      2798            mov     b,r4
0BCE ED        2799            mov     a,r5
0BCF 120000    2800            lcall   __gptrput
0BD2 A3        2801            inc     dptr
0BD3 EE        2802            mov     a,r6
0BD4 120000    2803            lcall   __gptrput
0BD7           2804   ;        sensor_test.c:540: *mag_z = BMM150_compensate_z(&z_val, &rhall_val);
0BD7 AAA8      2805            mov     r2,_BMM150_Read_Data_PARM_3
0BD9 ABA9      2806            mov     r3,(_BMM150_Read_Data_PARM_3 + 1)
0BDB ACAA      2807            mov     r4,(_BMM150_Read_Data_PARM_3 + 2)
0BDD 7548D8    2808            mov     _BMM150_compensate_z_PARM_2,#_BMM150_Read_Data_rhall_val_1_119
0BE0 754900    2809            mov     (_BMM150_compensate_z_PARM_2 + 1),#0x00
0BE3 754A40    2810            mov     (_BMM150_compensate_z_PARM_2 + 2),#0x40
0BE6 90C178    2811            mov     dptr,#_BMM150_Read_Data_z_val_1_119
0BE9 75F040    2812            mov     b,#0x40
0BEC C002      2813            push    ar2
0BEE C003      2814            push    ar3
0BF0 C004      2815            push    ar4
0BF2 120000    2816            lcall   _BMM150_compensate_z
0BF5 AD82      2817            mov     r5,dpl
0BF7 AE83      2818            mov     r6,dph
0BF9 D004      2819            pop     ar4
0BFB D003      2820            pop     ar3
0BFD D002      2821            pop     ar2
0BFF 8A82      2822            mov     dpl,r2
0C01 8B83      2823            mov     dph,r3
0C03 8CF0      2824            mov     b,r4
0C05 ED        2825            mov     a,r5
0C06 120000    2826            lcall   __gptrput
0C09 A3        2827            inc     dptr
0C0A EE        2828            mov     a,r6
0C0B 020000    2829            ljmp    __gptrput
0C0E           2830   ;------------------------------------------------------------
0C0E           2831   ;Allocation info for local variables in function 'main'
0C0E           2832   ;------------------------------------------------------------
0C0E           2833   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0C0E           2834   ;sloc1                     Allocated with name '_main_sloc1_1_0'
0C0E           2835   ;i                         Allocated with name '_main_i_1_123'
0C0E           2836   ;mag_x                     Allocated with name '_main_mag_x_1_123'
0C0E           2837   ;mag_y                     Allocated with name '_main_mag_y_1_123'
0C0E           2838   ;mag_z                     Allocated with name '_main_mag_z_1_123'
0C0E           2839   ;angle                     Allocated with name '_main_angle_1_123'
0C0E           2840   ;sum_x                     Allocated with name '_main_sum_x_1_123'
0C0E           2841   ;sum_y                     Allocated with name '_main_sum_y_1_123'
0C0E           2842   ;alpha                     Allocated with name '_main_alpha_1_123'
0C0E           2843   ;avg_angle                 Allocated with name '_main_avg_angle_1_123'
0C0E           2844   ;smoothed_angle            Allocated with name '_main_smoothed_angle_1_123'
0C0E           2845   ;cal_x                     Allocated with name '_main_cal_x_1_123'
0C0E           2846   ;cal_y                     Allocated with name '_main_cal_y_1_123'
0C0E           2847   ;delta                     Allocated with name '_main_delta_1_123'
0C0E           2848   ;declination_angle         Allocated with name '_main_declination_angle_1_123'
0C0E           2849   ;x_scale                   Allocated with name '_main_x_scale_1_123'
0C0E           2850   ;y_scale                   Allocated with name '_main_y_scale_1_123'
0C0E           2851   ;x_offset                  Allocated with name '_main_x_offset_1_123'
0C0E           2852   ;y_offset                  Allocated with name '_main_y_offset_1_123'
0C0E           2853   ;prev_angle                Allocated with name '_main_prev_angle_1_123'
0C0E           2854   ;cumulative_angle          Allocated with name '_main_cumulative_angle_1_123'
0C0E           2855   ;------------------------------------------------------------
0C0E           2856   ;        sensor_test.c:545: void main (void)
0C0E           2857   ;        -----------------------------------------
0C0E           2858   ;         function main
0C0E           2859   ;        -----------------------------------------
0C0E           2860   _main:
0C0E           2861   ;        sensor_test.c:556: mag_x = 0; mag_y = 0; mag_z = 0; 
0C0E 90C5A8    2862            mov     dptr,#_main_mag_x_1_123
0C11 E4        2863            clr     a
0C12 F0        2864            movx    @dptr,a
0C13 A3        2865            inc     dptr
0C14 F0        2866            movx    @dptr,a
0C15 90C5F8    2867            mov     dptr,#_main_mag_y_1_123
0C18 E4        2868            clr     a
0C19 F0        2869            movx    @dptr,a
0C1A A3        2870            inc     dptr
0C1B F0        2871            movx    @dptr,a
0C1C 90C648    2872            mov     dptr,#_main_mag_z_1_123
0C1F E4        2873            clr     a
0C20 F0        2874            movx    @dptr,a
0C21 A3        2875            inc     dptr
0C22 F0        2876            movx    @dptr,a
0C23           2877   ;        sensor_test.c:557: prev_angle = 0.0; cumulative_angle = 0.0; 
0C23 90C7D8    2878            mov     dptr,#_main_prev_angle_1_123
0C26 E4        2879            clr     a
0C27 F0        2880            movx    @dptr,a
0C28 A3        2881            inc     dptr
0C29 F0        2882            movx    @dptr,a
0C2A A3        2883            inc     dptr
0C2B F0        2884            movx    @dptr,a
0C2C A3        2885            inc     dptr
0C2D F0        2886            movx    @dptr,a
0C2E 90C828    2887            mov     dptr,#_main_cumulative_angle_1_123
0C31 F0        2888            movx    @dptr,a
0C32 A3        2889            inc     dptr
0C33           2890   ;        sensor_test.c:566: smoothed_angle = 0.0; 
0C33 E4        2891            clr     a
0C34 F0        2892            movx    @dptr,a
0C35 A3        2893            inc     dptr
0C36 F0        2894            movx    @dptr,a
0C37 A3        2895            inc     dptr
0C38 F0        2896            movx    @dptr,a
0C39 90C738    2897            mov     dptr,#_main_smoothed_angle_1_123
0C3C F0        2898            movx    @dptr,a
0C3D A3        2899            inc     dptr
0C3E E4        2900            clr     a
0C3F F0        2901            movx    @dptr,a
0C40 A3        2902            inc     dptr
0C41 F0        2903            movx    @dptr,a
0C42 A3        2904            inc     dptr
0C43 F0        2905            movx    @dptr,a
0C44           2906   ;        sensor_test.c:568: Set_Pin_Output(0x03); 
0C44 758203    2907            mov     dpl,#0x03
0C47 120000    2908            lcall   _Set_Pin_Output
0C4A           2909   ;        sensor_test.c:569: BMM150_Init();
0C4A 120000    2910            lcall   _BMM150_Init
0C4D           2911   ;        sensor_test.c:571: waitms(500);
0C4D 9001F4    2912            mov     dptr,#0x01F4
0C50 120000    2913            lcall   _waitms
0C53           2914   ;        sensor_test.c:572: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0C53 7418      2915            mov     a,#__str_3
0C55 C0E0      2916            push    acc
0C57 74DD      2917            mov     a,#(__str_3 >> 8)
0C59 C0E0      2918            push    acc
0C5B 7480      2919            mov     a,#0x80
0C5D C0E0      2920            push    acc
0C5F 120000    2921            lcall   _printf
0C62 1581      2922            dec     sp
0C64 1581      2923            dec     sp
0C66 1581      2924            dec     sp
0C68           2925   ;        sensor_test.c:576: __FILE__, __DATE__, __TIME__);
0C68           2926   ;        sensor_test.c:575: "Compiled: %s, %s\n\n",
0C68 7458      2927            mov     a,#__str_7
0C6A C0E0      2928            push    acc
0C6C 74DD      2929            mov     a,#(__str_7 >> 8)
0C6E C0E0      2930            push    acc
0C70 7480      2931            mov     a,#0x80
0C72 C0E0      2932            push    acc
0C74 7498      2933            mov     a,#__str_6
0C76 C0E0      2934            push    acc
0C78 74DD      2935            mov     a,#(__str_6 >> 8)
0C7A C0E0      2936            push    acc
0C7C 7480      2937            mov     a,#0x80
0C7E C0E0      2938            push    acc
0C80 74D8      2939            mov     a,#__str_5
0C82 C0E0      2940            push    acc
0C84 74DD      2941            mov     a,#(__str_5 >> 8)
0C86 C0E0      2942            push    acc
0C88 7480      2943            mov     a,#0x80
0C8A C0E0      2944            push    acc
0C8C 7418      2945            mov     a,#__str_4
0C8E C0E0      2946            push    acc
0C90 74DE      2947            mov     a,#(__str_4 >> 8)
0C92 C0E0      2948            push    acc
0C94 7480      2949            mov     a,#0x80
0C96 C0E0      2950            push    acc
0C98 120000    2951            lcall   _printf
0C9B E581      2952            mov     a,sp
0C9D 24F4      2953            add     a,#0xf4
0C9F F581      2954            mov     sp,a
0CA1           2955   ;        sensor_test.c:578: while(1)
0CA1           2956   L016007?:
0CA1           2957   ;        sensor_test.c:581: sum_x = 0.0; 
0CA1 90C698    2958            mov     dptr,#_main_sum_x_1_123
0CA4           2959   ;        sensor_test.c:582: sum_y = 0.0;  
0CA4 E4        2960            clr     a
0CA5 F0        2961            movx    @dptr,a
0CA6 A3        2962            inc     dptr
0CA7 F0        2963            movx    @dptr,a
0CA8 A3        2964            inc     dptr
0CA9 F0        2965            movx    @dptr,a
0CAA A3        2966            inc     dptr
0CAB F0        2967            movx    @dptr,a
0CAC 90C6E8    2968            mov     dptr,#_main_sum_y_1_123
0CAF F0        2969            movx    @dptr,a
0CB0 A3        2970            inc     dptr
0CB1 E4        2971            clr     a
0CB2 F0        2972            movx    @dptr,a
0CB3 A3        2973            inc     dptr
0CB4 F0        2974            movx    @dptr,a
0CB5 A3        2975            inc     dptr
0CB6 F0        2976            movx    @dptr,a
0CB7           2977   ;        sensor_test.c:583: for (i = 0; i < 100; i++){
0CB7 755800    2978            mov     _main_sloc1_1_0,#0x00
0CBA           2979   L016009?:
0CBA 749C      2980            mov     a,#0x100 - 0x64
0CBC 2558      2981            add     a,_main_sloc1_1_0
0CBE 5000      2982            jnc     L016021?
0CC0 020000    2983            ljmp    L016012?
0CC3           2984   L016021?:
0CC3           2985   ;        sensor_test.c:584: BMM150_Read_Data(&mag_x, &mag_y, &mag_z);
0CC3 75F8F8    2986            mov     _BMM150_Read_Data_PARM_2,#_main_mag_y_1_123
0CC6 75F9C5    2987            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_main_mag_y_1_123 >> 8)
0CC9 75FA00    2988            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
0CCC 75A848    2989            mov     _BMM150_Read_Data_PARM_3,#_main_mag_z_1_123
0CCF 75A9C6    2990            mov     (_BMM150_Read_Data_PARM_3 + 1),#(_main_mag_z_1_123 >> 8)
0CD2 75AA00    2991            mov     (_BMM150_Read_Data_PARM_3 + 2),#0x00
0CD5 90C5A8    2992            mov     dptr,#_main_mag_x_1_123
0CD8 75F000    2993            mov     b,#0x00
0CDB 120000    2994            lcall   _BMM150_Read_Data
0CDE           2995   ;        sensor_test.c:585: cal_x = ((float)mag_x - x_offset) * x_scale; 
0CDE 90C5A8    2996            mov     dptr,#_main_mag_x_1_123
0CE1 E0        2997            movx    a,@dptr
0CE2 FB        2998            mov     r3,a
0CE3 A3        2999            inc     dptr
0CE4 E0        3000            movx    a,@dptr
0CE5 FC        3001            mov     r4,a
0CE6 8B82      3002            mov     dpl,r3
0CE8 8C83      3003            mov     dph,r4
0CEA 120000    3004            lcall   ___sint2fs
0CED AB82      3005            mov     r3,dpl
0CEF AC83      3006            mov     r4,dph
0CF1 ADF0      3007            mov     r5,b
0CF3 FE        3008            mov     r6,a
0CF4 E4        3009            clr     a
0CF5 C0E0      3010            push    acc
0CF7 C0E0      3011            push    acc
0CF9 74D8      3012            mov     a,#0xD8
0CFB C0E0      3013            push    acc
0CFD 7441      3014            mov     a,#0x41
0CFF C0E0      3015            push    acc
0D01           3016   ;        sensor_test.c:586: cal_y = ((float)mag_y - y_offset) * y_scale; 
0D01 8B82      3017            mov     dpl,r3
0D03 8C83      3018            mov     dph,r4
0D05 8DF0      3019            mov     b,r5
0D07 EE        3020            mov     a,r6
0D08 120000    3021            lcall   ___fssub
0D0B 858218    3022            mov     _main_sloc0_1_0,dpl
0D0E 858319    3023            mov     (_main_sloc0_1_0 + 1),dph
0D11 85F01A    3024            mov     (_main_sloc0_1_0 + 2),b
0D14 F51B      3025            mov     (_main_sloc0_1_0 + 3),a
0D16 E581      3026            mov     a,sp
0D18 24FC      3027            add     a,#0xfc
0D1A F581      3028            mov     sp,a
0D1C 90C5F8    3029            mov     dptr,#_main_mag_y_1_123
0D1F E0        3030            movx    a,@dptr
0D20 FF        3031            mov     r7,a
0D21 A3        3032            inc     dptr
0D22 E0        3033            movx    a,@dptr
0D23 F8        3034            mov     r0,a
0D24 8F82      3035            mov     dpl,r7
0D26 8883      3036            mov     dph,r0
0D28 120000    3037            lcall   ___sint2fs
0D2B AF82      3038            mov     r7,dpl
0D2D A883      3039            mov     r0,dph
0D2F A9F0      3040            mov     r1,b
0D31 FB        3041            mov     r3,a
0D32 E4        3042            clr     a
0D33 C0E0      3043            push    acc
0D35 C0E0      3044            push    acc
0D37 74E4      3045            mov     a,#0xE4
0D39 C0E0      3046            push    acc
0D3B 7441      3047            mov     a,#0x41
0D3D C0E0      3048            push    acc
0D3F 8F82      3049            mov     dpl,r7
0D41 8883      3050            mov     dph,r0
0D43 89F0      3051            mov     b,r1
0D45 EB        3052            mov     a,r3
0D46 120000    3053            lcall   ___fssub
0D49 AB82      3054            mov     r3,dpl
0D4B AC83      3055            mov     r4,dph
0D4D ADF0      3056            mov     r5,b
0D4F FE        3057            mov     r6,a
0D50 E581      3058            mov     a,sp
0D52 24FC      3059            add     a,#0xfc
0D54 F581      3060            mov     sp,a
0D56 74BD      3061            mov     a,#0xBD
0D58 C0E0      3062            push    acc
0D5A 7486      3063            mov     a,#0x86
0D5C C0E0      3064            push    acc
0D5E 7472      3065            mov     a,#0x72
0D60 C0E0      3066            push    acc
0D62 743F      3067            mov     a,#0x3F
0D64 C0E0      3068            push    acc
0D66           3069   ;        sensor_test.c:588: angle = atan2f(cal_y, cal_x) * 180.0 / M_PI;
0D66 8B82      3070            mov     dpl,r3
0D68 8C83      3071            mov     dph,r4
0D6A 8DF0      3072            mov     b,r5
0D6C EE        3073            mov     a,r6
0D6D 120000    3074            lcall   ___fsmul
0D70 AB82      3075            mov     r3,dpl
0D72 AC83      3076            mov     r4,dph
0D74 ADF0      3077            mov     r5,b
0D76 FE        3078            mov     r6,a
0D77 E581      3079            mov     a,sp
0D79 24FC      3080            add     a,#0xfc
0D7B F581      3081            mov     sp,a
0D7D 851800    3082            mov     _atan2f_PARM_2,_main_sloc0_1_0
0D80 851901    3083            mov     (_atan2f_PARM_2 + 1),(_main_sloc0_1_0 + 1)
0D83 851A02    3084            mov     (_atan2f_PARM_2 + 2),(_main_sloc0_1_0 + 2)
0D86 851B03    3085            mov     (_atan2f_PARM_2 + 3),(_main_sloc0_1_0 + 3)
0D89 8B82      3086            mov     dpl,r3
0D8B 8C83      3087            mov     dph,r4
0D8D 8DF0      3088            mov     b,r5
0D8F EE        3089            mov     a,r6
0D90 120000    3090            lcall   _atan2f
0D93 AB82      3091            mov     r3,dpl
0D95 AC83      3092            mov     r4,dph
0D97 ADF0      3093            mov     r5,b
0D99 FE        3094            mov     r6,a
0D9A C003      3095            push    ar3
0D9C C004      3096            push    ar4
0D9E C005      3097            push    ar5
0DA0 C006      3098            push    ar6
0DA2 900000    3099            mov     dptr,#0x0000
0DA5 75F034    3100            mov     b,#0x34
0DA8 7443      3101            mov     a,#0x43
0DAA 120000    3102            lcall   ___fsmul
0DAD AB82      3103            mov     r3,dpl
0DAF AC83      3104            mov     r4,dph
0DB1 ADF0      3105            mov     r5,b
0DB3 FE        3106            mov     r6,a
0DB4 E581      3107            mov     a,sp
0DB6 24FC      3108            add     a,#0xfc
0DB8 F581      3109            mov     sp,a
0DBA 74DB      3110            mov     a,#0xDB
0DBC C0E0      3111            push    acc
0DBE 740F      3112            mov     a,#0x0F
0DC0 C0E0      3113            push    acc
0DC2 7449      3114            mov     a,#0x49
0DC4 C0E0      3115            push    acc
0DC6 7440      3116            mov     a,#0x40
0DC8 C0E0      3117            push    acc
0DCA           3118   ;        sensor_test.c:594: sum_x += cosf(angle * M_PI / 180.0); 
0DCA 8B82      3119            mov     dpl,r3
0DCC 8C83      3120            mov     dph,r4
0DCE 8DF0      3121            mov     b,r5
0DD0 EE        3122            mov     a,r6
0DD1 120000    3123            lcall   ___fsdiv
0DD4 AB82      3124            mov     r3,dpl
0DD6 AC83      3125            mov     r4,dph
0DD8 ADF0      3126            mov     r5,b
0DDA FE        3127            mov     r6,a
0DDB E581      3128            mov     a,sp
0DDD 24FC      3129            add     a,#0xfc
0DDF F581      3130            mov     sp,a
0DE1 C003      3131            push    ar3
0DE3 C004      3132            push    ar4
0DE5 C005      3133            push    ar5
0DE7 C006      3134            push    ar6
0DE9 900FDB    3135            mov     dptr,#0x0FDB
0DEC 75F049    3136            mov     b,#0x49
0DEF 7440      3137            mov     a,#0x40
0DF1 120000    3138            lcall   ___fsmul
0DF4 AB82      3139            mov     r3,dpl
0DF6 AC83      3140            mov     r4,dph
0DF8 ADF0      3141            mov     r5,b
0DFA FE        3142            mov     r6,a
0DFB E581      3143            mov     a,sp
0DFD 24FC      3144            add     a,#0xfc
0DFF F581      3145            mov     sp,a
0E01 E4        3146            clr     a
0E02 C0E0      3147            push    acc
0E04 C0E0      3148            push    acc
0E06 7434      3149            mov     a,#0x34
0E08 C0E0      3150            push    acc
0E0A 7443      3151            mov     a,#0x43
0E0C C0E0      3152            push    acc
0E0E 8B82      3153            mov     dpl,r3
0E10 8C83      3154            mov     dph,r4
0E12 8DF0      3155            mov     b,r5
0E14 EE        3156            mov     a,r6
0E15 120000    3157            lcall   ___fsdiv
0E18 AB82      3158            mov     r3,dpl
0E1A AC83      3159            mov     r4,dph
0E1C ADF0      3160            mov     r5,b
0E1E FE        3161            mov     r6,a
0E1F E581      3162            mov     a,sp
0E21 24FC      3163            add     a,#0xfc
0E23 F581      3164            mov     sp,a
0E25 8B82      3165            mov     dpl,r3
0E27 8C83      3166            mov     dph,r4
0E29 8DF0      3167            mov     b,r5
0E2B EE        3168            mov     a,r6
0E2C C003      3169            push    ar3
0E2E C004      3170            push    ar4
0E30 C005      3171            push    ar5
0E32 C006      3172            push    ar6
0E34 120000    3173            lcall   _cosf
0E37 858218    3174            mov     _main_sloc0_1_0,dpl
0E3A 858319    3175            mov     (_main_sloc0_1_0 + 1),dph
0E3D 85F01A    3176            mov     (_main_sloc0_1_0 + 2),b
0E40 F51B      3177            mov     (_main_sloc0_1_0 + 3),a
0E42 90C698    3178            mov     dptr,#_main_sum_x_1_123
0E45 E0        3179            movx    a,@dptr
0E46 FA        3180            mov     r2,a
0E47 A3        3181            inc     dptr
0E48 E0        3182            movx    a,@dptr
0E49 FF        3183            mov     r7,a
0E4A A3        3184            inc     dptr
0E4B E0        3185            movx    a,@dptr
0E4C F8        3186            mov     r0,a
0E4D A3        3187            inc     dptr
0E4E E0        3188            movx    a,@dptr
0E4F F9        3189            mov     r1,a
0E50 C018      3190            push    _main_sloc0_1_0
0E52 C019      3191            push    (_main_sloc0_1_0 + 1)
0E54 C01A      3192            push    (_main_sloc0_1_0 + 2)
0E56 C01B      3193            push    (_main_sloc0_1_0 + 3)
0E58 8A82      3194            mov     dpl,r2
0E5A 8F83      3195            mov     dph,r7
0E5C 88F0      3196            mov     b,r0
0E5E E9        3197            mov     a,r1
0E5F 120000    3198            lcall   ___fsadd
0E62 AA82      3199            mov     r2,dpl
0E64 AF83      3200            mov     r7,dph
0E66 A8F0      3201            mov     r0,b
0E68 F9        3202            mov     r1,a
0E69 E581      3203            mov     a,sp
0E6B 24FC      3204            add     a,#0xfc
0E6D F581      3205            mov     sp,a
0E6F D006      3206            pop     ar6
0E71 D005      3207            pop     ar5
0E73 D004      3208            pop     ar4
0E75 D003      3209            pop     ar3
0E77 90C698    3210            mov     dptr,#_main_sum_x_1_123
0E7A EA        3211            mov     a,r2
0E7B F0        3212            movx    @dptr,a
0E7C A3        3213            inc     dptr
0E7D EF        3214            mov     a,r7
0E7E F0        3215            movx    @dptr,a
0E7F A3        3216            inc     dptr
0E80 E8        3217            mov     a,r0
0E81 F0        3218            movx    @dptr,a
0E82 A3        3219            inc     dptr
0E83 E9        3220            mov     a,r1
0E84 F0        3221            movx    @dptr,a
0E85           3222   ;        sensor_test.c:595: sum_y += sinf(angle * M_PI / 180.0); 
0E85 8B82      3223            mov     dpl,r3
0E87 8C83      3224            mov     dph,r4
0E89 8DF0      3225            mov     b,r5
0E8B EE        3226            mov     a,r6
0E8C 120000    3227            lcall   _sinf
0E8F AA82      3228            mov     r2,dpl
0E91 AB83      3229            mov     r3,dph
0E93 ACF0      3230            mov     r4,b
0E95 FD        3231            mov     r5,a
0E96 90C6E8    3232            mov     dptr,#_main_sum_y_1_123
0E99 E0        3233            movx    a,@dptr
0E9A FE        3234            mov     r6,a
0E9B A3        3235            inc     dptr
0E9C E0        3236            movx    a,@dptr
0E9D FF        3237            mov     r7,a
0E9E A3        3238            inc     dptr
0E9F E0        3239            movx    a,@dptr
0EA0 F8        3240            mov     r0,a
0EA1 A3        3241            inc     dptr
0EA2 E0        3242            movx    a,@dptr
0EA3 F9        3243            mov     r1,a
0EA4 C002      3244            push    ar2
0EA6 C003      3245            push    ar3
0EA8 C004      3246            push    ar4
0EAA C005      3247            push    ar5
0EAC 8E82      3248            mov     dpl,r6
0EAE 8F83      3249            mov     dph,r7
0EB0 88F0      3250            mov     b,r0
0EB2 E9        3251            mov     a,r1
0EB3 120000    3252            lcall   ___fsadd
0EB6 AA82      3253            mov     r2,dpl
0EB8 AB83      3254            mov     r3,dph
0EBA ACF0      3255            mov     r4,b
0EBC FD        3256            mov     r5,a
0EBD E581      3257            mov     a,sp
0EBF 24FC      3258            add     a,#0xfc
0EC1 F581      3259            mov     sp,a
0EC3 90C6E8    3260            mov     dptr,#_main_sum_y_1_123
0EC6 EA        3261            mov     a,r2
0EC7 F0        3262            movx    @dptr,a
0EC8 A3        3263            inc     dptr
0EC9 EB        3264            mov     a,r3
0ECA F0        3265            movx    @dptr,a
0ECB A3        3266            inc     dptr
0ECC EC        3267            mov     a,r4
0ECD F0        3268            movx    @dptr,a
0ECE A3        3269            inc     dptr
0ECF ED        3270            mov     a,r5
0ED0 F0        3271            movx    @dptr,a
0ED1           3272   ;        sensor_test.c:583: for (i = 0; i < 100; i++){
0ED1 0558      3273            inc     _main_sloc1_1_0
0ED3 020000    3274            ljmp    L016009?
0ED6           3275   L016012?:
0ED6           3276   ;        sensor_test.c:597: avg_angle = atan2f(sum_y/100.0, sum_x/100.0); 
0ED6 90C6E8    3277            mov     dptr,#_main_sum_y_1_123
0ED9 E0        3278            movx    a,@dptr
0EDA FA        3279            mov     r2,a
0EDB A3        3280            inc     dptr
0EDC E0        3281            movx    a,@dptr
0EDD FB        3282            mov     r3,a
0EDE A3        3283            inc     dptr
0EDF E0        3284            movx    a,@dptr
0EE0 FC        3285            mov     r4,a
0EE1 A3        3286            inc     dptr
0EE2 E0        3287            movx    a,@dptr
0EE3 FD        3288            mov     r5,a
0EE4 E4        3289            clr     a
0EE5 C0E0      3290            push    acc
0EE7 C0E0      3291            push    acc
0EE9 74C8      3292            mov     a,#0xC8
0EEB C0E0      3293            push    acc
0EED 7442      3294            mov     a,#0x42
0EEF C0E0      3295            push    acc
0EF1 8A82      3296            mov     dpl,r2
0EF3 8B83      3297            mov     dph,r3
0EF5 8CF0      3298            mov     b,r4
0EF7 ED        3299            mov     a,r5
0EF8 120000    3300            lcall   ___fsdiv
0EFB AA82      3301            mov     r2,dpl
0EFD AB83      3302            mov     r3,dph
0EFF ACF0      3303            mov     r4,b
0F01 FD        3304            mov     r5,a
0F02 E581      3305            mov     a,sp
0F04 24FC      3306            add     a,#0xfc
0F06 F581      3307            mov     sp,a
0F08 90C698    3308            mov     dptr,#_main_sum_x_1_123
0F0B E0        3309            movx    a,@dptr
0F0C FE        3310            mov     r6,a
0F0D A3        3311            inc     dptr
0F0E E0        3312            movx    a,@dptr
0F0F FF        3313            mov     r7,a
0F10 A3        3314            inc     dptr
0F11 E0        3315            movx    a,@dptr
0F12 F8        3316            mov     r0,a
0F13 A3        3317            inc     dptr
0F14 E0        3318            movx    a,@dptr
0F15 F9        3319            mov     r1,a
0F16 C002      3320            push    ar2
0F18 C003      3321            push    ar3
0F1A C004      3322            push    ar4
0F1C C005      3323            push    ar5
0F1E E4        3324            clr     a
0F1F C0E0      3325            push    acc
0F21 C0E0      3326            push    acc
0F23 74C8      3327            mov     a,#0xC8
0F25 C0E0      3328            push    acc
0F27 7442      3329            mov     a,#0x42
0F29 C0E0      3330            push    acc
0F2B 8E82      3331            mov     dpl,r6
0F2D 8F83      3332            mov     dph,r7
0F2F 88F0      3333            mov     b,r0
0F31 E9        3334            mov     a,r1
0F32 120000    3335            lcall   ___fsdiv
0F35 858200    3336            mov     _atan2f_PARM_2,dpl
0F38 858301    3337            mov     (_atan2f_PARM_2 + 1),dph
0F3B 85F002    3338            mov     (_atan2f_PARM_2 + 2),b
0F3E F503      3339            mov     (_atan2f_PARM_2 + 3),a
0F40 E581      3340            mov     a,sp
0F42 24FC      3341            add     a,#0xfc
0F44 F581      3342            mov     sp,a
0F46 D005      3343            pop     ar5
0F48 D004      3344            pop     ar4
0F4A D003      3345            pop     ar3
0F4C D002      3346            pop     ar2
0F4E 8A82      3347            mov     dpl,r2
0F50 8B83      3348            mov     dph,r3
0F52 8CF0      3349            mov     b,r4
0F54 ED        3350            mov     a,r5
0F55 120000    3351            lcall   _atan2f
0F58 AA82      3352            mov     r2,dpl
0F5A AB83      3353            mov     r3,dph
0F5C ACF0      3354            mov     r4,b
0F5E FD        3355            mov     r5,a
0F5F           3356   ;        sensor_test.c:598: avg_angle *= 180.0 / M_PI; 
0F5F C002      3357            push    ar2
0F61 C003      3358            push    ar3
0F63 C004      3359            push    ar4
0F65 C005      3360            push    ar5
0F67           3361   ;        sensor_test.c:599: delta = avg_angle - prev_angle;
0F67 902EE1    3362            mov     dptr,#0x2EE1
0F6A 75F065    3363            mov     b,#0x65
0F6D 7442      3364            mov     a,#0x42
0F6F 120000    3365            lcall   ___fsmul
0F72 858218    3366            mov     _main_sloc0_1_0,dpl
0F75 858319    3367            mov     (_main_sloc0_1_0 + 1),dph
0F78 85F01A    3368            mov     (_main_sloc0_1_0 + 2),b
0F7B F51B      3369            mov     (_main_sloc0_1_0 + 3),a
0F7D E581      3370            mov     a,sp
0F7F 24FC      3371            add     a,#0xfc
0F81 F581      3372            mov     sp,a
0F83 90C7D8    3373            mov     dptr,#_main_prev_angle_1_123
0F86 E0        3374            movx    a,@dptr
0F87 C0E0      3375            push    acc
0F89 A3        3376            inc     dptr
0F8A E0        3377            movx    a,@dptr
0F8B C0E0      3378            push    acc
0F8D A3        3379            inc     dptr
0F8E E0        3380            movx    a,@dptr
0F8F C0E0      3381            push    acc
0F91 A3        3382            inc     dptr
0F92 E0        3383            movx    a,@dptr
0F93 C0E0      3384            push    acc
0F95 851882    3385            mov     dpl,_main_sloc0_1_0
0F98 851983    3386            mov     dph,(_main_sloc0_1_0 + 1)
0F9B 851AF0    3387            mov     b,(_main_sloc0_1_0 + 2)
0F9E E51B      3388            mov     a,(_main_sloc0_1_0 + 3)
0FA0 120000    3389            lcall   ___fssub
0FA3 AE82      3390            mov     r6,dpl
0FA5 AF83      3391            mov     r7,dph
0FA7 A8F0      3392            mov     r0,b
0FA9 F9        3393            mov     r1,a
0FAA E581      3394            mov     a,sp
0FAC 24FC      3395            add     a,#0xfc
0FAE F581      3396            mov     sp,a
0FB0 90C788    3397            mov     dptr,#_main_delta_1_123
0FB3 EE        3398            mov     a,r6
0FB4 F0        3399            movx    @dptr,a
0FB5 A3        3400            inc     dptr
0FB6 EF        3401            mov     a,r7
0FB7 F0        3402            movx    @dptr,a
0FB8 A3        3403            inc     dptr
0FB9 E8        3404            mov     a,r0
0FBA F0        3405            movx    @dptr,a
0FBB A3        3406            inc     dptr
0FBC E9        3407            mov     a,r1
0FBD F0        3408            movx    @dptr,a
0FBE           3409   ;        sensor_test.c:600: if (delta > 180.0) delta -= 360.0;
0FBE C006      3410            push    ar6
0FC0 C007      3411            push    ar7
0FC2 C000      3412            push    ar0
0FC4 C001      3413            push    ar1
0FC6 E4        3414            clr     a
0FC7 C0E0      3415            push    acc
0FC9 C0E0      3416            push    acc
0FCB 7434      3417            mov     a,#0x34
0FCD C0E0      3418            push    acc
0FCF 7443      3419            mov     a,#0x43
0FD1 C0E0      3420            push    acc
0FD3 8E82      3421            mov     dpl,r6
0FD5 8F83      3422            mov     dph,r7
0FD7 88F0      3423            mov     b,r0
0FD9 E9        3424            mov     a,r1
0FDA 120000    3425            lcall   ___fsgt
0FDD AA82      3426            mov     r2,dpl
0FDF E581      3427            mov     a,sp
0FE1 24FC      3428            add     a,#0xfc
0FE3 F581      3429            mov     sp,a
0FE5 D001      3430            pop     ar1
0FE7 D000      3431            pop     ar0
0FE9 D007      3432            pop     ar7
0FEB D006      3433            pop     ar6
0FED EA        3434            mov     a,r2
0FEE 6000      3435            jz      L016004?
0FF0 E4        3436            clr     a
0FF1 C0E0      3437            push    acc
0FF3 C0E0      3438            push    acc
0FF5 74B4      3439            mov     a,#0xB4
0FF7 C0E0      3440            push    acc
0FF9 7443      3441            mov     a,#0x43
0FFB C0E0      3442            push    acc
0FFD 8E82      3443            mov     dpl,r6
0FFF 8F83      3444            mov     dph,r7
1001 88F0      3445            mov     b,r0
1003 E9        3446            mov     a,r1
1004 120000    3447            lcall   ___fssub
1007 AA82      3448            mov     r2,dpl
1009 AB83      3449            mov     r3,dph
100B ACF0      3450            mov     r4,b
100D FD        3451            mov     r5,a
100E E581      3452            mov     a,sp
1010 24FC      3453            add     a,#0xfc
1012 F581      3454            mov     sp,a
1014 90C788    3455            mov     dptr,#_main_delta_1_123
1017 EA        3456            mov     a,r2
1018 F0        3457            movx    @dptr,a
1019 A3        3458            inc     dptr
101A EB        3459            mov     a,r3
101B F0        3460            movx    @dptr,a
101C A3        3461            inc     dptr
101D EC        3462            mov     a,r4
101E F0        3463            movx    @dptr,a
101F A3        3464            inc     dptr
1020 ED        3465            mov     a,r5
1021 F0        3466            movx    @dptr,a
1022 8000      3467            sjmp    L016005?
1024           3468   L016004?:
1024           3469   ;        sensor_test.c:601: else if (delta < - 180.0) delta += 360.0;
1024 C006      3470            push    ar6
1026 C007      3471            push    ar7
1028 C000      3472            push    ar0
102A C001      3473            push    ar1
102C E4        3474            clr     a
102D C0E0      3475            push    acc
102F C0E0      3476            push    acc
1031 7434      3477            mov     a,#0x34
1033 C0E0      3478            push    acc
1035 74C3      3479            mov     a,#0xC3
1037 C0E0      3480            push    acc
1039 8E82      3481            mov     dpl,r6
103B 8F83      3482            mov     dph,r7
103D 88F0      3483            mov     b,r0
103F E9        3484            mov     a,r1
1040 120000    3485            lcall   ___fslt
1043 AA82      3486            mov     r2,dpl
1045 E581      3487            mov     a,sp
1047 24FC      3488            add     a,#0xfc
1049 F581      3489            mov     sp,a
104B D001      3490            pop     ar1
104D D000      3491            pop     ar0
104F D007      3492            pop     ar7
1051 D006      3493            pop     ar6
1053 EA        3494            mov     a,r2
1054 6000      3495            jz      L016005?
1056 E4        3496            clr     a
1057 C0E0      3497            push    acc
1059 C0E0      3498            push    acc
105B 74B4      3499            mov     a,#0xB4
105D C0E0      3500            push    acc
105F 7443      3501            mov     a,#0x43
1061 C0E0      3502            push    acc
1063 8E82      3503            mov     dpl,r6
1065 8F83      3504            mov     dph,r7
1067 88F0      3505            mov     b,r0
1069 E9        3506            mov     a,r1
106A 120000    3507            lcall   ___fsadd
106D AA82      3508            mov     r2,dpl
106F AB83      3509            mov     r3,dph
1071 ACF0      3510            mov     r4,b
1073 FD        3511            mov     r5,a
1074 E581      3512            mov     a,sp
1076 24FC      3513            add     a,#0xfc
1078 F581      3514            mov     sp,a
107A 90C788    3515            mov     dptr,#_main_delta_1_123
107D EA        3516            mov     a,r2
107E F0        3517            movx    @dptr,a
107F A3        3518            inc     dptr
1080 EB        3519            mov     a,r3
1081 F0        3520            movx    @dptr,a
1082 A3        3521            inc     dptr
1083 EC        3522            mov     a,r4
1084 F0        3523            movx    @dptr,a
1085 A3        3524            inc     dptr
1086 ED        3525            mov     a,r5
1087 F0        3526            movx    @dptr,a
1088           3527   L016005?:
1088           3528   ;        sensor_test.c:603: cumulative_angle += delta;
1088 90C828    3529            mov     dptr,#_main_cumulative_angle_1_123
108B E0        3530            movx    a,@dptr
108C FA        3531            mov     r2,a
108D A3        3532            inc     dptr
108E E0        3533            movx    a,@dptr
108F FB        3534            mov     r3,a
1090 A3        3535            inc     dptr
1091 E0        3536            movx    a,@dptr
1092 FC        3537            mov     r4,a
1093 A3        3538            inc     dptr
1094 E0        3539            movx    a,@dptr
1095 FD        3540            mov     r5,a
1096 90C788    3541            mov     dptr,#_main_delta_1_123
1099 E0        3542            movx    a,@dptr
109A C0E0      3543            push    acc
109C A3        3544            inc     dptr
109D E0        3545            movx    a,@dptr
109E C0E0      3546            push    acc
10A0 A3        3547            inc     dptr
10A1 E0        3548            movx    a,@dptr
10A2 C0E0      3549            push    acc
10A4 A3        3550            inc     dptr
10A5 E0        3551            movx    a,@dptr
10A6 C0E0      3552            push    acc
10A8 8A82      3553            mov     dpl,r2
10AA 8B83      3554            mov     dph,r3
10AC 8CF0      3555            mov     b,r4
10AE ED        3556            mov     a,r5
10AF 120000    3557            lcall   ___fsadd
10B2 AA82      3558            mov     r2,dpl
10B4 AB83      3559            mov     r3,dph
10B6 ACF0      3560            mov     r4,b
10B8 FD        3561            mov     r5,a
10B9 E581      3562            mov     a,sp
10BB 24FC      3563            add     a,#0xfc
10BD F581      3564            mov     sp,a
10BF 90C828    3565            mov     dptr,#_main_cumulative_angle_1_123
10C2 EA        3566            mov     a,r2
10C3 F0        3567            movx    @dptr,a
10C4 A3        3568            inc     dptr
10C5 EB        3569            mov     a,r3
10C6 F0        3570            movx    @dptr,a
10C7 A3        3571            inc     dptr
10C8 EC        3572            mov     a,r4
10C9 F0        3573            movx    @dptr,a
10CA A3        3574            inc     dptr
10CB ED        3575            mov     a,r5
10CC F0        3576            movx    @dptr,a
10CD           3577   ;        sensor_test.c:604: prev_angle = avg_angle;
10CD 90C7D8    3578            mov     dptr,#_main_prev_angle_1_123
10D0 E518      3579            mov     a,_main_sloc0_1_0
10D2 F0        3580            movx    @dptr,a
10D3 A3        3581            inc     dptr
10D4 E519      3582            mov     a,(_main_sloc0_1_0 + 1)
10D6 F0        3583            movx    @dptr,a
10D7 A3        3584            inc     dptr
10D8 E51A      3585            mov     a,(_main_sloc0_1_0 + 2)
10DA F0        3586            movx    @dptr,a
10DB A3        3587            inc     dptr
10DC E51B      3588            mov     a,(_main_sloc0_1_0 + 3)
10DE F0        3589            movx    @dptr,a
10DF           3590   ;        sensor_test.c:606: smoothed_angle = alpha * cumulative_angle + (1-alpha) * smoothed_angle; 
10DF 90C828    3591            mov     dptr,#_main_cumulative_angle_1_123
10E2 E0        3592            movx    a,@dptr
10E3 C0E0      3593            push    acc
10E5 A3        3594            inc     dptr
10E6 E0        3595            movx    a,@dptr
10E7 C0E0      3596            push    acc
10E9 A3        3597            inc     dptr
10EA E0        3598            movx    a,@dptr
10EB C0E0      3599            push    acc
10ED A3        3600            inc     dptr
10EE E0        3601            movx    a,@dptr
10EF C0E0      3602            push    acc
10F1 900000    3603            mov     dptr,#0x0000
10F4 75F080    3604            mov     b,#0x80
10F7 743E      3605            mov     a,#0x3E
10F9 120000    3606            lcall   ___fsmul
10FC AA82      3607            mov     r2,dpl
10FE AB83      3608            mov     r3,dph
1100 ACF0      3609            mov     r4,b
1102 FD        3610            mov     r5,a
1103 E581      3611            mov     a,sp
1105 24FC      3612            add     a,#0xfc
1107 F581      3613            mov     sp,a
1109 C002      3614            push    ar2
110B C003      3615            push    ar3
110D C004      3616            push    ar4
110F C005      3617            push    ar5
1111 90C738    3618            mov     dptr,#_main_smoothed_angle_1_123
1114 E0        3619            movx    a,@dptr
1115 C0E0      3620            push    acc
1117 A3        3621            inc     dptr
1118 E0        3622            movx    a,@dptr
1119 C0E0      3623            push    acc
111B A3        3624            inc     dptr
111C E0        3625            movx    a,@dptr
111D C0E0      3626            push    acc
111F A3        3627            inc     dptr
1120 E0        3628            movx    a,@dptr
1121 C0E0      3629            push    acc
1123 900000    3630            mov     dptr,#0x0000
1126 75F040    3631            mov     b,#0x40
1129 743F      3632            mov     a,#0x3F
112B 120000    3633            lcall   ___fsmul
112E AE82      3634            mov     r6,dpl
1130 AF83      3635            mov     r7,dph
1132 A8F0      3636            mov     r0,b
1134 F9        3637            mov     r1,a
1135 E581      3638            mov     a,sp
1137 24FC      3639            add     a,#0xfc
1139 F581      3640            mov     sp,a
113B D005      3641            pop     ar5
113D D004      3642            pop     ar4
113F D003      3643            pop     ar3
1141 D002      3644            pop     ar2
1143 C006      3645            push    ar6
1145 C007      3646            push    ar7
1147 C000      3647            push    ar0
1149 C001      3648            push    ar1
114B 8A82      3649            mov     dpl,r2
114D 8B83      3650            mov     dph,r3
114F 8CF0      3651            mov     b,r4
1151 ED        3652            mov     a,r5
1152 120000    3653            lcall   ___fsadd
1155 AA82      3654            mov     r2,dpl
1157 AB83      3655            mov     r3,dph
1159 ACF0      3656            mov     r4,b
115B FD        3657            mov     r5,a
115C E581      3658            mov     a,sp
115E 24FC      3659            add     a,#0xfc
1160 F581      3660            mov     sp,a
1162 90C738    3661            mov     dptr,#_main_smoothed_angle_1_123
1165 EA        3662            mov     a,r2
1166 F0        3663            movx    @dptr,a
1167 A3        3664            inc     dptr
1168 EB        3665            mov     a,r3
1169 F0        3666            movx    @dptr,a
116A A3        3667            inc     dptr
116B EC        3668            mov     a,r4
116C F0        3669            movx    @dptr,a
116D A3        3670            inc     dptr
116E ED        3671            mov     a,r5
116F F0        3672            movx    @dptr,a
1170           3673   ;        sensor_test.c:607: avg_angle = atan2f((float)mag_y, (float)mag_x) * 180.0 / M_PI - declination_angle;
1170 90C5F8    3674            mov     dptr,#_main_mag_y_1_123
1173 E0        3675            movx    a,@dptr
1174 FA        3676            mov     r2,a
1175 A3        3677            inc     dptr
1176 E0        3678            movx    a,@dptr
1177 FB        3679            mov     r3,a
1178 8A82      3680            mov     dpl,r2
117A 8B83      3681            mov     dph,r3
117C 120000    3682            lcall   ___sint2fs
117F AA82      3683            mov     r2,dpl
1181 AB83      3684            mov     r3,dph
1183 ACF0      3685            mov     r4,b
1185 FD        3686            mov     r5,a
1186 90C5A8    3687            mov     dptr,#_main_mag_x_1_123
1189 E0        3688            movx    a,@dptr
118A FE        3689            mov     r6,a
118B A3        3690            inc     dptr
118C E0        3691            movx    a,@dptr
118D FF        3692            mov     r7,a
118E 8E82      3693            mov     dpl,r6
1190 8F83      3694            mov     dph,r7
1192 C002      3695            push    ar2
1194 C003      3696            push    ar3
1196 C004      3697            push    ar4
1198 C005      3698            push    ar5
119A 120000    3699            lcall   ___sint2fs
119D 858200    3700            mov     _atan2f_PARM_2,dpl
11A0 858301    3701            mov     (_atan2f_PARM_2 + 1),dph
11A3 85F002    3702            mov     (_atan2f_PARM_2 + 2),b
11A6 F503      3703            mov     (_atan2f_PARM_2 + 3),a
11A8 D005      3704            pop     ar5
11AA D004      3705            pop     ar4
11AC D003      3706            pop     ar3
11AE D002      3707            pop     ar2
11B0 8A82      3708            mov     dpl,r2
11B2 8B83      3709            mov     dph,r3
11B4 8CF0      3710            mov     b,r4
11B6 ED        3711            mov     a,r5
11B7 120000    3712            lcall   _atan2f
11BA AA82      3713            mov     r2,dpl
11BC AB83      3714            mov     r3,dph
11BE ACF0      3715            mov     r4,b
11C0 FD        3716            mov     r5,a
11C1 C002      3717            push    ar2
11C3 C003      3718            push    ar3
11C5 C004      3719            push    ar4
11C7 C005      3720            push    ar5
11C9 900000    3721            mov     dptr,#0x0000
11CC 75F034    3722            mov     b,#0x34
11CF 7443      3723            mov     a,#0x43
11D1 120000    3724            lcall   ___fsmul
11D4 AA82      3725            mov     r2,dpl
11D6 AB83      3726            mov     r3,dph
11D8 ACF0      3727            mov     r4,b
11DA FD        3728            mov     r5,a
11DB E581      3729            mov     a,sp
11DD 24FC      3730            add     a,#0xfc
11DF F581      3731            mov     sp,a
11E1 74DB      3732            mov     a,#0xDB
11E3 C0E0      3733            push    acc
11E5 740F      3734            mov     a,#0x0F
11E7 C0E0      3735            push    acc
11E9 7449      3736            mov     a,#0x49
11EB C0E0      3737            push    acc
11ED 7440      3738            mov     a,#0x40
11EF C0E0      3739            push    acc
11F1           3740   ;        sensor_test.c:608: printf("%d,%d,%f\r\n", mag_x, mag_y, avg_angle);
11F1 8A82      3741            mov     dpl,r2
11F3 8B83      3742            mov     dph,r3
11F5 8CF0      3743            mov     b,r4
11F7 ED        3744            mov     a,r5
11F8 120000    3745            lcall   ___fsdiv
11FB AA82      3746            mov     r2,dpl
11FD AB83      3747            mov     r3,dph
11FF ACF0      3748            mov     r4,b
1201 FD        3749            mov     r5,a
1202 E581      3750            mov     a,sp
1204 24FC      3751            add     a,#0xfc
1206 F581      3752            mov     sp,a
1208 C002      3753            push    ar2
120A C003      3754            push    ar3
120C C004      3755            push    ar4
120E C005      3756            push    ar5
1210 90C5F8    3757            mov     dptr,#_main_mag_y_1_123
1213 E0        3758            movx    a,@dptr
1214 C0E0      3759            push    acc
1216 A3        3760            inc     dptr
1217 E0        3761            movx    a,@dptr
1218 C0E0      3762            push    acc
121A 90C5A8    3763            mov     dptr,#_main_mag_x_1_123
121D E0        3764            movx    a,@dptr
121E C0E0      3765            push    acc
1220 A3        3766            inc     dptr
1221 E0        3767            movx    a,@dptr
1222 C0E0      3768            push    acc
1224 7498      3769            mov     a,#__str_8
1226 C0E0      3770            push    acc
1228 74E2      3771            mov     a,#(__str_8 >> 8)
122A C0E0      3772            push    acc
122C 7480      3773            mov     a,#0x80
122E C0E0      3774            push    acc
1230 120000    3775            lcall   _printf
1233 E581      3776            mov     a,sp
1235 24F5      3777            add     a,#0xf5
1237 F581      3778            mov     sp,a
1239 020000    3779            ljmp    L016007?
123C           3780            rseg R_CSEG
123C           3781   
0000           3782            rseg R_XINIT
0000           3783   
0000           3784            rseg R_CONST
0000           3785   __str_0:
0000 4572726F  3786            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
0035 0D        3787            db 0x0D
0036 0A        3788            db 0x0A
0037 00        3789            db 0x00
0038           3790   __str_1:
0038 50726573  3791            db 'Press restart to check again!'
     73207265
     73746172
     7420746F
     20636865
     636B2061
     6761696E
     21
0055 0D        3792            db 0x0D
0056 00        3793            db 0x00
0057           3794   __str_2:
0057 424D4D31  3795            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
0087 0D        3796            db 0x0D
0088 0A        3797            db 0x0A
0089 00        3798            db 0x00
008A           3799   __str_3:
008A 1B        3800            db 0x1B
008B 5B324A    3801            db '[2J'
008E 00        3802            db 0x00
008F           3803   __str_4:
008F 45464D38  3804            db 'EFM8LB1 SPI/BMM150 test program'
     4C423120
     5350492F
     424D4D31
     35302074
     65737420
     70726F67
     72616D
00AE 0A        3805            db 0x0A
00AF 46696C65  3806            db 'File: %s'
     3A202573
00B7 0A        3807            db 0x0A
00B8 436F6D70  3808            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
00C8 0A        3809            db 0x0A
00C9 0A        3810            db 0x0A
00CA 00        3811            db 0x00
00CB           3812   __str_5:
00CB 73656E73  3813            db 'sensor_test.c'
     6F725F74
     6573742E
     63
00D8 00        3814            db 0x00
00D9           3815   __str_6:
00D9 4D617220  3816            db 'Mar 26 2025'
     32362032
     303235
00E4 00        3817            db 0x00
00E5           3818   __str_7:
00E5 32323A35  3819            db '22:57:10'
     373A3130
00ED 00        3820            db 0x00
00EE           3821   __str_8:
00EE 25642C25  3822            db '%d,%d,%f'
     642C2566
00F6 0D        3823            db 0x0D
00F7 0A        3824            db 0x0A
00F8 00        3825            db 0x00
00F9           3826   
0003           3827            CSEG
0003           3828   
0003           3829   end
