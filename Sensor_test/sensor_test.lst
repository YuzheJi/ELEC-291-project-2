0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Mar 26 13:00:43 2025
0000              5   ;--------------------------------------------------------
                  5   $name sensor_test
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _BMM150_Read_Data
0000             28            public _BMM150_compensate_z
0000             29            public _BMM150_compensate_y
0000             30            public _BMM150_compensate_x
0000             31            public _BMM150_Init
0000             32            public _BMM150_Read_Trim_Registers
0000             33            public _SPI_write
0000             34            public _SPI_read_block
0000             35            public _SPI_read
0000             36            public _SPI_transfer
0000             37            public _waitms
0000             38            public _Timer3us
0000             39            public _Set_Pin_Output
0000             40            public __c51_external_startup
0000             41            public _BMM150_Read_Data_PARM_3
0000             42            public _BMM150_Read_Data_PARM_2
0000             43            public _BMM150_compensate_z_PARM_2
0000             44            public _BMM150_compensate_y_PARM_2
0000             45            public _BMM150_compensate_x_PARM_2
0000             46            public _SPI_write_PARM_2
0000             47            public _SPI_read_block_PARM_3
0000             48            public _SPI_read_block_PARM_2
0000             49            public _dig_xyz1
0000             50            public _dig_xy2
0000             51            public _dig_xy1
0000             52            public _dig_z4
0000             53            public _dig_z3
0000             54            public _dig_z2
0000             55            public _dig_z1
0000             56            public _dig_y2
0000             57            public _dig_y1
0000             58            public _dig_x2
0000             59            public _dig_x1
0000             60   ;--------------------------------------------------------
0000             61   ; Special Function Registers
0000             62   ;--------------------------------------------------------
0000             63   _ACC            DATA 0xe0
0000             64   _ADC0ASAH       DATA 0xb6
0000             65   _ADC0ASAL       DATA 0xb5
0000             66   _ADC0ASCF       DATA 0xa1
0000             67   _ADC0ASCT       DATA 0xc7
0000             68   _ADC0CF0        DATA 0xbc
0000             69   _ADC0CF1        DATA 0xb9
0000             70   _ADC0CF2        DATA 0xdf
0000             71   _ADC0CN0        DATA 0xe8
0000             72   _ADC0CN1        DATA 0xb2
0000             73   _ADC0CN2        DATA 0xb3
0000             74   _ADC0GTH        DATA 0xc4
0000             75   _ADC0GTL        DATA 0xc3
0000             76   _ADC0H          DATA 0xbe
0000             77   _ADC0L          DATA 0xbd
0000             78   _ADC0LTH        DATA 0xc6
0000             79   _ADC0LTL        DATA 0xc5
0000             80   _ADC0MX         DATA 0xbb
0000             81   _B              DATA 0xf0
0000             82   _CKCON0         DATA 0x8e
0000             83   _CKCON1         DATA 0xa6
0000             84   _CLEN0          DATA 0xc6
0000             85   _CLIE0          DATA 0xc7
0000             86   _CLIF0          DATA 0xe8
0000             87   _CLKSEL         DATA 0xa9
0000             88   _CLOUT0         DATA 0xd1
0000             89   _CLU0CF         DATA 0xb1
0000             90   _CLU0FN         DATA 0xaf
0000             91   _CLU0MX         DATA 0x84
0000             92   _CLU1CF         DATA 0xb3
0000             93   _CLU1FN         DATA 0xb2
0000             94   _CLU1MX         DATA 0x85
0000             95   _CLU2CF         DATA 0xb6
0000             96   _CLU2FN         DATA 0xb5
0000             97   _CLU2MX         DATA 0x91
0000             98   _CLU3CF         DATA 0xbf
0000             99   _CLU3FN         DATA 0xbe
0000            100   _CLU3MX         DATA 0xae
0000            101   _CMP0CN0        DATA 0x9b
0000            102   _CMP0CN1        DATA 0x99
0000            103   _CMP0MD         DATA 0x9d
0000            104   _CMP0MX         DATA 0x9f
0000            105   _CMP1CN0        DATA 0xbf
0000            106   _CMP1CN1        DATA 0xac
0000            107   _CMP1MD         DATA 0xab
0000            108   _CMP1MX         DATA 0xaa
0000            109   _CRC0CN0        DATA 0xce
0000            110   _CRC0CN1        DATA 0x86
0000            111   _CRC0CNT        DATA 0xd3
0000            112   _CRC0DAT        DATA 0xcb
0000            113   _CRC0FLIP       DATA 0xcf
0000            114   _CRC0IN         DATA 0xca
0000            115   _CRC0ST         DATA 0xd2
0000            116   _DAC0CF0        DATA 0x91
0000            117   _DAC0CF1        DATA 0x92
0000            118   _DAC0H          DATA 0x85
0000            119   _DAC0L          DATA 0x84
0000            120   _DAC1CF0        DATA 0x93
0000            121   _DAC1CF1        DATA 0x94
0000            122   _DAC1H          DATA 0x8a
0000            123   _DAC1L          DATA 0x89
0000            124   _DAC2CF0        DATA 0x95
0000            125   _DAC2CF1        DATA 0x96
0000            126   _DAC2H          DATA 0x8c
0000            127   _DAC2L          DATA 0x8b
0000            128   _DAC3CF0        DATA 0x9a
0000            129   _DAC3CF1        DATA 0x9c
0000            130   _DAC3H          DATA 0x8e
0000            131   _DAC3L          DATA 0x8d
0000            132   _DACGCF0        DATA 0x88
0000            133   _DACGCF1        DATA 0x98
0000            134   _DACGCF2        DATA 0xa2
0000            135   _DERIVID        DATA 0xad
0000            136   _DEVICEID       DATA 0xb5
0000            137   _DPH            DATA 0x83
0000            138   _DPL            DATA 0x82
0000            139   _EIE1           DATA 0xe6
0000            140   _EIE2           DATA 0xf3
0000            141   _EIP1           DATA 0xbb
0000            142   _EIP1H          DATA 0xee
0000            143   _EIP2           DATA 0xed
0000            144   _EIP2H          DATA 0xf6
0000            145   _EMI0CN         DATA 0xe7
0000            146   _FLKEY          DATA 0xb7
0000            147   _HFO0CAL        DATA 0xc7
0000            148   _HFO1CAL        DATA 0xd6
0000            149   _HFOCN          DATA 0xef
0000            150   _I2C0ADM        DATA 0xff
0000            151   _I2C0CN0        DATA 0xba
0000            152   _I2C0DIN        DATA 0xbc
0000            153   _I2C0DOUT       DATA 0xbb
0000            154   _I2C0FCN0       DATA 0xad
0000            155   _I2C0FCN1       DATA 0xab
0000            156   _I2C0FCT        DATA 0xf5
0000            157   _I2C0SLAD       DATA 0xbd
0000            158   _I2C0STAT       DATA 0xb9
0000            159   _IE             DATA 0xa8
0000            160   _IP             DATA 0xb8
0000            161   _IPH            DATA 0xf2
0000            162   _IT01CF         DATA 0xe4
0000            163   _LFO0CN         DATA 0xb1
0000            164   _P0             DATA 0x80
0000            165   _P0MASK         DATA 0xfe
0000            166   _P0MAT          DATA 0xfd
0000            167   _P0MDIN         DATA 0xf1
0000            168   _P0MDOUT        DATA 0xa4
0000            169   _P0SKIP         DATA 0xd4
0000            170   _P1             DATA 0x90
0000            171   _P1MASK         DATA 0xee
0000            172   _P1MAT          DATA 0xed
0000            173   _P1MDIN         DATA 0xf2
0000            174   _P1MDOUT        DATA 0xa5
0000            175   _P1SKIP         DATA 0xd5
0000            176   _P2             DATA 0xa0
0000            177   _P2MASK         DATA 0xfc
0000            178   _P2MAT          DATA 0xfb
0000            179   _P2MDIN         DATA 0xf3
0000            180   _P2MDOUT        DATA 0xa6
0000            181   _P2SKIP         DATA 0xcc
0000            182   _P3             DATA 0xb0
0000            183   _P3MDIN         DATA 0xf4
0000            184   _P3MDOUT        DATA 0x9c
0000            185   _PCA0CENT       DATA 0x9e
0000            186   _PCA0CLR        DATA 0x9c
0000            187   _PCA0CN0        DATA 0xd8
0000            188   _PCA0CPH0       DATA 0xfc
0000            189   _PCA0CPH1       DATA 0xea
0000            190   _PCA0CPH2       DATA 0xec
0000            191   _PCA0CPH3       DATA 0xf5
0000            192   _PCA0CPH4       DATA 0x85
0000            193   _PCA0CPH5       DATA 0xde
0000            194   _PCA0CPL0       DATA 0xfb
0000            195   _PCA0CPL1       DATA 0xe9
0000            196   _PCA0CPL2       DATA 0xeb
0000            197   _PCA0CPL3       DATA 0xf4
0000            198   _PCA0CPL4       DATA 0x84
0000            199   _PCA0CPL5       DATA 0xdd
0000            200   _PCA0CPM0       DATA 0xda
0000            201   _PCA0CPM1       DATA 0xdb
0000            202   _PCA0CPM2       DATA 0xdc
0000            203   _PCA0CPM3       DATA 0xae
0000            204   _PCA0CPM4       DATA 0xaf
0000            205   _PCA0CPM5       DATA 0xcc
0000            206   _PCA0H          DATA 0xfa
0000            207   _PCA0L          DATA 0xf9
0000            208   _PCA0MD         DATA 0xd9
0000            209   _PCA0POL        DATA 0x96
0000            210   _PCA0PWM        DATA 0xf7
0000            211   _PCON0          DATA 0x87
0000            212   _PCON1          DATA 0xcd
0000            213   _PFE0CN         DATA 0xc1
0000            214   _PRTDRV         DATA 0xf6
0000            215   _PSCTL          DATA 0x8f
0000            216   _PSTAT0         DATA 0xaa
0000            217   _PSW            DATA 0xd0
0000            218   _REF0CN         DATA 0xd1
0000            219   _REG0CN         DATA 0xc9
0000            220   _REVID          DATA 0xb6
0000            221   _RSTSRC         DATA 0xef
0000            222   _SBCON1         DATA 0x94
0000            223   _SBRLH1         DATA 0x96
0000            224   _SBRLL1         DATA 0x95
0000            225   _SBUF           DATA 0x99
0000            226   _SBUF0          DATA 0x99
0000            227   _SBUF1          DATA 0x92
0000            228   _SCON           DATA 0x98
0000            229   _SCON0          DATA 0x98
0000            230   _SCON1          DATA 0xc8
0000            231   _SFRPAGE        DATA 0xa7
0000            232   _SFRPGCN        DATA 0xbc
0000            233   _SFRSTACK       DATA 0xd7
0000            234   _SMB0ADM        DATA 0xd6
0000            235   _SMB0ADR        DATA 0xd7
0000            236   _SMB0CF         DATA 0xc1
0000            237   _SMB0CN0        DATA 0xc0
0000            238   _SMB0DAT        DATA 0xc2
0000            239   _SMB0FCN0       DATA 0xc3
0000            240   _SMB0FCN1       DATA 0xc4
0000            241   _SMB0FCT        DATA 0xef
0000            242   _SMB0RXLN       DATA 0xc5
0000            243   _SMB0TC         DATA 0xac
0000            244   _SMOD1          DATA 0x93
0000            245   _SP             DATA 0x81
0000            246   _SPI0CFG        DATA 0xa1
0000            247   _SPI0CKR        DATA 0xa2
0000            248   _SPI0CN0        DATA 0xf8
0000            249   _SPI0DAT        DATA 0xa3
0000            250   _SPI0FCN0       DATA 0x9a
0000            251   _SPI0FCN1       DATA 0x9b
0000            252   _SPI0FCT        DATA 0xf7
0000            253   _SPI0PCF        DATA 0xdf
0000            254   _TCON           DATA 0x88
0000            255   _TH0            DATA 0x8c
0000            256   _TH1            DATA 0x8d
0000            257   _TL0            DATA 0x8a
0000            258   _TL1            DATA 0x8b
0000            259   _TMOD           DATA 0x89
0000            260   _TMR2CN0        DATA 0xc8
0000            261   _TMR2CN1        DATA 0xfd
0000            262   _TMR2H          DATA 0xcf
0000            263   _TMR2L          DATA 0xce
0000            264   _TMR2RLH        DATA 0xcb
0000            265   _TMR2RLL        DATA 0xca
0000            266   _TMR3CN0        DATA 0x91
0000            267   _TMR3CN1        DATA 0xfe
0000            268   _TMR3H          DATA 0x95
0000            269   _TMR3L          DATA 0x94
0000            270   _TMR3RLH        DATA 0x93
0000            271   _TMR3RLL        DATA 0x92
0000            272   _TMR4CN0        DATA 0x98
0000            273   _TMR4CN1        DATA 0xff
0000            274   _TMR4H          DATA 0xa5
0000            275   _TMR4L          DATA 0xa4
0000            276   _TMR4RLH        DATA 0xa3
0000            277   _TMR4RLL        DATA 0xa2
0000            278   _TMR5CN0        DATA 0xc0
0000            279   _TMR5CN1        DATA 0xf1
0000            280   _TMR5H          DATA 0xd5
0000            281   _TMR5L          DATA 0xd4
0000            282   _TMR5RLH        DATA 0xd3
0000            283   _TMR5RLL        DATA 0xd2
0000            284   _UART0PCF       DATA 0xd9
0000            285   _UART1FCN0      DATA 0x9d
0000            286   _UART1FCN1      DATA 0xd8
0000            287   _UART1FCT       DATA 0xfa
0000            288   _UART1LIN       DATA 0x9e
0000            289   _UART1PCF       DATA 0xda
0000            290   _VDM0CN         DATA 0xff
0000            291   _WDTCN          DATA 0x97
0000            292   _XBR0           DATA 0xe1
0000            293   _XBR1           DATA 0xe2
0000            294   _XBR2           DATA 0xe3
0000            295   _XOSC0CN        DATA 0x86
0000            296   _DPTR           DATA 0x8382
0000            297   _TMR2RL         DATA 0xcbca
0000            298   _TMR3RL         DATA 0x9392
0000            299   _TMR4RL         DATA 0xa3a2
0000            300   _TMR5RL         DATA 0xd3d2
0000            301   _TMR0           DATA 0x8c8a
0000            302   _TMR1           DATA 0x8d8b
0000            303   _TMR2           DATA 0xcfce
0000            304   _TMR3           DATA 0x9594
0000            305   _TMR4           DATA 0xa5a4
0000            306   _TMR5           DATA 0xd5d4
0000            307   _SBRL1          DATA 0x9695
0000            308   _PCA0           DATA 0xfaf9
0000            309   _PCA0CP0        DATA 0xfcfb
0000            310   _PCA0CP1        DATA 0xeae9
0000            311   _PCA0CP2        DATA 0xeceb
0000            312   _PCA0CP3        DATA 0xf5f4
0000            313   _PCA0CP4        DATA 0x8584
0000            314   _PCA0CP5        DATA 0xdedd
0000            315   _ADC0ASA        DATA 0xb6b5
0000            316   _ADC0GT         DATA 0xc4c3
0000            317   _ADC0           DATA 0xbebd
0000            318   _ADC0LT         DATA 0xc6c5
0000            319   _DAC0           DATA 0x8584
0000            320   _DAC1           DATA 0x8a89
0000            321   _DAC2           DATA 0x8c8b
0000            322   _DAC3           DATA 0x8e8d
0000            323   ;--------------------------------------------------------
0000            324   ; special function bits
0000            325   ;--------------------------------------------------------
0000            326   _ACC_0          BIT 0xe0
0000            327   _ACC_1          BIT 0xe1
0000            328   _ACC_2          BIT 0xe2
0000            329   _ACC_3          BIT 0xe3
0000            330   _ACC_4          BIT 0xe4
0000            331   _ACC_5          BIT 0xe5
0000            332   _ACC_6          BIT 0xe6
0000            333   _ACC_7          BIT 0xe7
0000            334   _TEMPE          BIT 0xe8
0000            335   _ADGN0          BIT 0xe9
0000            336   _ADGN1          BIT 0xea
0000            337   _ADWINT         BIT 0xeb
0000            338   _ADBUSY         BIT 0xec
0000            339   _ADINT          BIT 0xed
0000            340   _IPOEN          BIT 0xee
0000            341   _ADEN           BIT 0xef
0000            342   _B_0            BIT 0xf0
0000            343   _B_1            BIT 0xf1
0000            344   _B_2            BIT 0xf2
0000            345   _B_3            BIT 0xf3
0000            346   _B_4            BIT 0xf4
0000            347   _B_5            BIT 0xf5
0000            348   _B_6            BIT 0xf6
0000            349   _B_7            BIT 0xf7
0000            350   _C0FIF          BIT 0xe8
0000            351   _C0RIF          BIT 0xe9
0000            352   _C1FIF          BIT 0xea
0000            353   _C1RIF          BIT 0xeb
0000            354   _C2FIF          BIT 0xec
0000            355   _C2RIF          BIT 0xed
0000            356   _C3FIF          BIT 0xee
0000            357   _C3RIF          BIT 0xef
0000            358   _D1SRC0         BIT 0x88
0000            359   _D1SRC1         BIT 0x89
0000            360   _D1AMEN         BIT 0x8a
0000            361   _D01REFSL       BIT 0x8b
0000            362   _D3SRC0         BIT 0x8c
0000            363   _D3SRC1         BIT 0x8d
0000            364   _D3AMEN         BIT 0x8e
0000            365   _D23REFSL       BIT 0x8f
0000            366   _D0UDIS         BIT 0x98
0000            367   _D1UDIS         BIT 0x99
0000            368   _D2UDIS         BIT 0x9a
0000            369   _D3UDIS         BIT 0x9b
0000            370   _EX0            BIT 0xa8
0000            371   _ET0            BIT 0xa9
0000            372   _EX1            BIT 0xaa
0000            373   _ET1            BIT 0xab
0000            374   _ES0            BIT 0xac
0000            375   _ET2            BIT 0xad
0000            376   _ESPI0          BIT 0xae
0000            377   _EA             BIT 0xaf
0000            378   _PX0            BIT 0xb8
0000            379   _PT0            BIT 0xb9
0000            380   _PX1            BIT 0xba
0000            381   _PT1            BIT 0xbb
0000            382   _PS0            BIT 0xbc
0000            383   _PT2            BIT 0xbd
0000            384   _PSPI0          BIT 0xbe
0000            385   _P0_0           BIT 0x80
0000            386   _P0_1           BIT 0x81
0000            387   _P0_2           BIT 0x82
0000            388   _P0_3           BIT 0x83
0000            389   _P0_4           BIT 0x84
0000            390   _P0_5           BIT 0x85
0000            391   _P0_6           BIT 0x86
0000            392   _P0_7           BIT 0x87
0000            393   _P1_0           BIT 0x90
0000            394   _P1_1           BIT 0x91
0000            395   _P1_2           BIT 0x92
0000            396   _P1_3           BIT 0x93
0000            397   _P1_4           BIT 0x94
0000            398   _P1_5           BIT 0x95
0000            399   _P1_6           BIT 0x96
0000            400   _P1_7           BIT 0x97
0000            401   _P2_0           BIT 0xa0
0000            402   _P2_1           BIT 0xa1
0000            403   _P2_2           BIT 0xa2
0000            404   _P2_3           BIT 0xa3
0000            405   _P2_4           BIT 0xa4
0000            406   _P2_5           BIT 0xa5
0000            407   _P2_6           BIT 0xa6
0000            408   _P3_0           BIT 0xb0
0000            409   _P3_1           BIT 0xb1
0000            410   _P3_2           BIT 0xb2
0000            411   _P3_3           BIT 0xb3
0000            412   _P3_4           BIT 0xb4
0000            413   _P3_7           BIT 0xb7
0000            414   _CCF0           BIT 0xd8
0000            415   _CCF1           BIT 0xd9
0000            416   _CCF2           BIT 0xda
0000            417   _CCF3           BIT 0xdb
0000            418   _CCF4           BIT 0xdc
0000            419   _CCF5           BIT 0xdd
0000            420   _CR             BIT 0xde
0000            421   _CF             BIT 0xdf
0000            422   _PARITY         BIT 0xd0
0000            423   _F1             BIT 0xd1
0000            424   _OV             BIT 0xd2
0000            425   _RS0            BIT 0xd3
0000            426   _RS1            BIT 0xd4
0000            427   _F0             BIT 0xd5
0000            428   _AC             BIT 0xd6
0000            429   _CY             BIT 0xd7
0000            430   _RI             BIT 0x98
0000            431   _TI             BIT 0x99
0000            432   _RB8            BIT 0x9a
0000            433   _TB8            BIT 0x9b
0000            434   _REN            BIT 0x9c
0000            435   _CE             BIT 0x9d
0000            436   _SMODE          BIT 0x9e
0000            437   _RI1            BIT 0xc8
0000            438   _TI1            BIT 0xc9
0000            439   _RBX1           BIT 0xca
0000            440   _TBX1           BIT 0xcb
0000            441   _REN1           BIT 0xcc
0000            442   _PERR1          BIT 0xcd
0000            443   _OVR1           BIT 0xce
0000            444   _SI             BIT 0xc0
0000            445   _ACK            BIT 0xc1
0000            446   _ARBLOST        BIT 0xc2
0000            447   _ACKRQ          BIT 0xc3
0000            448   _STO            BIT 0xc4
0000            449   _STA            BIT 0xc5
0000            450   _TXMODE         BIT 0xc6
0000            451   _MASTER         BIT 0xc7
0000            452   _SPIEN          BIT 0xf8
0000            453   _TXNF           BIT 0xf9
0000            454   _NSSMD0         BIT 0xfa
0000            455   _NSSMD1         BIT 0xfb
0000            456   _RXOVRN         BIT 0xfc
0000            457   _MODF           BIT 0xfd
0000            458   _WCOL           BIT 0xfe
0000            459   _SPIF           BIT 0xff
0000            460   _IT0            BIT 0x88
0000            461   _IE0            BIT 0x89
0000            462   _IT1            BIT 0x8a
0000            463   _IE1            BIT 0x8b
0000            464   _TR0            BIT 0x8c
0000            465   _TF0            BIT 0x8d
0000            466   _TR1            BIT 0x8e
0000            467   _TF1            BIT 0x8f
0000            468   _T2XCLK0        BIT 0xc8
0000            469   _T2XCLK1        BIT 0xc9
0000            470   _TR2            BIT 0xca
0000            471   _T2SPLIT        BIT 0xcb
0000            472   _TF2CEN         BIT 0xcc
0000            473   _TF2LEN         BIT 0xcd
0000            474   _TF2L           BIT 0xce
0000            475   _TF2H           BIT 0xcf
0000            476   _T4XCLK0        BIT 0x98
0000            477   _T4XCLK1        BIT 0x99
0000            478   _TR4            BIT 0x9a
0000            479   _T4SPLIT        BIT 0x9b
0000            480   _TF4CEN         BIT 0x9c
0000            481   _TF4LEN         BIT 0x9d
0000            482   _TF4L           BIT 0x9e
0000            483   _TF4H           BIT 0x9f
0000            484   _T5XCLK0        BIT 0xc0
0000            485   _T5XCLK1        BIT 0xc1
0000            486   _TR5            BIT 0xc2
0000            487   _T5SPLIT        BIT 0xc3
0000            488   _TF5CEN         BIT 0xc4
0000            489   _TF5LEN         BIT 0xc5
0000            490   _TF5L           BIT 0xc6
0000            491   _TF5H           BIT 0xc7
0000            492   _RIE            BIT 0xd8
0000            493   _RXTO0          BIT 0xd9
0000            494   _RXTO1          BIT 0xda
0000            495   _RFRQ           BIT 0xdb
0000            496   _TIE            BIT 0xdc
0000            497   _TXHOLD         BIT 0xdd
0000            498   _TXNF1          BIT 0xde
0000            499   _TFRQ           BIT 0xdf
0000            500   ;--------------------------------------------------------
0000            501   ; overlayable register banks
0000            502   ;--------------------------------------------------------
0000            503            rbank0 segment data overlay
0000            504   ;--------------------------------------------------------
0000            505   ; internal ram data
0000            506   ;--------------------------------------------------------
0000            507            rseg R_DSEG
0000            508   _dig_x1:
0000            509            ds 1
0001            510   _dig_x2:
0001            511            ds 1
0002            512   _dig_y1:
0002            513            ds 1
0003            514   _dig_y2:
0003            515            ds 1
0004            516   _dig_z1:
0004            517            ds 1
0005            518   _dig_z2:
0005            519            ds 1
0006            520   _dig_z3:
0006            521            ds 1
0007            522   _dig_z4:
0007            523            ds 1
0008            524   _dig_xy1:
0008            525            ds 1
0009            526   _dig_xy2:
0009            527            ds 1
000A            528   _dig_xyz1:
000A            529            ds 1
000B            530   _SPI_read_block_PARM_2:
000B            531            ds 3
000E            532   _SPI_read_block_PARM_3:
000E            533            ds 1
000F            534   _SPI_write_PARM_2:
000F            535            ds 1
0010            536   _BMM150_compensate_x_PARM_2:
0010            537            ds 3
0013            538   _BMM150_compensate_x_sloc0_1_0:
0013            539            ds 4
0017            540   _BMM150_compensate_y_PARM_2:
0017            541            ds 3
001A            542   _BMM150_compensate_y_sloc0_1_0:
001A            543            ds 4
001E            544   _BMM150_compensate_z_PARM_2:
001E            545            ds 3
0021            546   _BMM150_compensate_z_sloc0_1_0:
0021            547            ds 2
0023            548   _BMM150_compensate_z_sloc1_1_0:
0023            549            ds 4
0027            550   _BMM150_compensate_z_sloc2_1_0:
0027            551            ds 4
002B            552   _BMM150_Read_Data_PARM_2:
002B            553            ds 3
002E            554   _BMM150_Read_Data_PARM_3:
002E            555            ds 3
0031            556   _BMM150_Read_Data_mag_x_1_118:
0031            557            ds 3
0034            558   _BMM150_Read_Data_raw_y_lsb_1_119:
0034            559            ds 1
0035            560   _BMM150_Read_Data_raw_y_msb_1_119:
0035            561            ds 1
0036            562   _BMM150_Read_Data_raw_z_lsb_1_119:
0036            563            ds 1
0037            564   _BMM150_Read_Data_raw_z_msb_1_119:
0037            565            ds 1
0038            566   _BMM150_Read_Data_raw_rhall_lsb_1_119:
0038            567            ds 1
0039            568   _BMM150_Read_Data_raw_rhall_msb_1_119:
0039            569            ds 1
003A            570   _BMM150_Read_Data_raw_z_1_119:
003A            571            ds 2
003C            572   _BMM150_Read_Data_x_val_1_119:
003C            573            ds 2
003E            574   _BMM150_Read_Data_y_val_1_119:
003E            575            ds 2
0040            576   _BMM150_Read_Data_z_val_1_119:
0040            577            ds 2
0042            578   _BMM150_Read_Data_rhall_val_1_119:
0042            579            ds 2
0044            580   ;--------------------------------------------------------
0044            581   ; overlayable items in internal ram 
0044            582   ;--------------------------------------------------------
0000            583            rseg    R_OSEG
0000            584            rseg    R_OSEG
0000            585            rseg    R_OSEG
0000            586   ;--------------------------------------------------------
0000            587   ; indirectly addressable internal ram data
0000            588   ;--------------------------------------------------------
0000            589            rseg R_ISEG
0000            590   ;--------------------------------------------------------
0000            591   ; absolute internal ram data
0000            592   ;--------------------------------------------------------
0000            593            DSEG
0000            594   ;--------------------------------------------------------
0000            595   ; bit data
0000            596   ;--------------------------------------------------------
0000            597            rseg R_BSEG
0000            598   ;--------------------------------------------------------
0000            599   ; paged external ram data
0000            600   ;--------------------------------------------------------
0000            601            rseg R_PSEG
0000            602   ;--------------------------------------------------------
0000            603   ; external ram data
0000            604   ;--------------------------------------------------------
0000            605            rseg R_XSEG
0000            606   _BMM150_Read_Trim_Registers_trim_x1y1_1_84:
0000            607            ds 2
0002            608   _BMM150_Read_Trim_Registers_trim_xyz_data_1_84:
0002            609            ds 4
0006            610   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_84:
0006            611            ds 10
0010            612   _BMM150_compensate_x_retval_1_93:
0010            613            ds 2
0012            614   _BMM150_compensate_x_process_comp_x0_1_93:
0012            615            ds 2
0014            616   _BMM150_compensate_y_retval_1_102:
0014            617            ds 2
0016            618   _BMM150_compensate_y_process_comp_y0_1_102:
0016            619            ds 2
0018            620   _BMM150_compensate_z_retval_1_111:
0018            621            ds 4
001C            622   _main_mag_x_1_123:
001C            623            ds 2
001E            624   _main_mag_y_1_123:
001E            625            ds 2
0020            626   _main_mag_z_1_123:
0020            627            ds 2
0022            628   ;--------------------------------------------------------
0022            629   ; absolute external ram data
0022            630   ;--------------------------------------------------------
0000            631            XSEG
0000            632   ;--------------------------------------------------------
0000            633   ; external initialized ram data
0000            634   ;--------------------------------------------------------
0000            635            rseg R_IXSEG
0000            636            rseg R_HOME
0000            637            rseg R_GSINIT
0000            638            rseg R_CSEG
0000            639   ;--------------------------------------------------------
0000            640   ; Reset entry point and interrupt vectors
0000            641   ;--------------------------------------------------------
0000            642            CSEG at 0x0000
0000 020000     643            ljmp    _crt0
0003            644   ;--------------------------------------------------------
0003            645   ; global & static initialisations
0003            646   ;--------------------------------------------------------
0000            647            rseg R_HOME
0000            648            rseg R_GSINIT
0000            649            rseg R_GSINIT
0000            650   ;--------------------------------------------------------
0000            651   ; data variables initialization
0000            652   ;--------------------------------------------------------
0000            653            rseg R_DINIT
0000            654            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            655   ;--------------------------------------------------------
0000            656   ; code
0000            657   ;--------------------------------------------------------
0000            658            rseg R_CSEG
0000            659   ;------------------------------------------------------------
0000            660   ;Allocation info for local variables in function '_c51_external_startup'
0000            661   ;------------------------------------------------------------
0000            662   ;------------------------------------------------------------
0000            663   ;        sensor_test.c:74: char _c51_external_startup (void)
0000            664   ;        -----------------------------------------
0000            665   ;         function _c51_external_startup
0000            666   ;        -----------------------------------------
0000            667   __c51_external_startup:
0000            668            using   0
0000            669   ;        sensor_test.c:77: SFRPAGE = 0x00;
0000 75A700     670            mov     _SFRPAGE,#0x00
0003            671   ;        sensor_test.c:78: WDTCN = 0xDE; //First key
0003 7597DE     672            mov     _WDTCN,#0xDE
0006            673   ;        sensor_test.c:79: WDTCN = 0xAD; //Second key
0006 7597AD     674            mov     _WDTCN,#0xAD
0009            675   ;        sensor_test.c:81: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     676            mov     _VDM0CN,#0x80
000C            677   ;        sensor_test.c:82: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     678            mov     _RSTSRC,#0x06
000F            679   ;        sensor_test.c:89: SFRPAGE = 0x10;
000F 75A710     680            mov     _SFRPAGE,#0x10
0012            681   ;        sensor_test.c:90: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     682            mov     _PFE0CN,#0x20
0015            683   ;        sensor_test.c:91: SFRPAGE = 0x00;
0015 75A700     684            mov     _SFRPAGE,#0x00
0018            685   ;        sensor_test.c:112: CLKSEL = 0x00;
0018 75A900     686            mov     _CLKSEL,#0x00
001B            687   ;        sensor_test.c:113: CLKSEL = 0x00;
001B 75A900     688            mov     _CLKSEL,#0x00
001E            689   ;        sensor_test.c:114: while ((CLKSEL & 0x80) == 0);
001E            690   L002001?:
001E E5A9       691            mov     a,_CLKSEL
0020 30E798     692            jnb     acc.7,L002001?
0023            693   ;        sensor_test.c:115: CLKSEL = 0x03;
0023 75A903     694            mov     _CLKSEL,#0x03
0026            695   ;        sensor_test.c:116: CLKSEL = 0x03;
0026 75A903     696            mov     _CLKSEL,#0x03
0029            697   ;        sensor_test.c:117: while ((CLKSEL & 0x80) == 0);
0029            698   L002004?:
0029 E5A9       699            mov     a,_CLKSEL
002B 30E718     700            jnb     acc.7,L002004?
002E            701   ;        sensor_test.c:123: P0MDOUT = 0b_0000_1101; // SCK, MOSI, and P0.3 are push-pull, others open-drain
002E 75A40D     702            mov     _P0MDOUT,#0x0D
0031            703   ;        sensor_test.c:124: P1MDOUT = 0b_0000_0000; // P1 all open-drain
0031 75A500     704            mov     _P1MDOUT,#0x00
0034            705   ;        sensor_test.c:125: XBR0 = 0b_0000_0011;    // SPI0E=1, URT0E=1
0034 75E103     706            mov     _XBR0,#0x03
0037            707   ;        sensor_test.c:126: XBR1 = 0b_0000_0000;
0037 75E200     708            mov     _XBR1,#0x00
003A            709   ;        sensor_test.c:127: XBR2 = 0b_0100_0000;    // Enable crossbar and weak pull-ups
003A 75E340     710            mov     _XBR2,#0x40
003D            711   ;        sensor_test.c:133: SCON0 = 0x10;
003D 759810     712            mov     _SCON0,#0x10
0040            713   ;        sensor_test.c:134: TH1 = 0x100-((SYSCLK/BAUDRATE)/(12L*2L));
0040 758DE6     714            mov     _TH1,#0xE6
0043            715   ;        sensor_test.c:135: TL1 = TH1;      // Init Timer1
0043 858D8B     716            mov     _TL1,_TH1
0046            717   ;        sensor_test.c:136: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     718            anl     _TMOD,#0x0F
0049            719   ;        sensor_test.c:137: TMOD |=  0x20;                       
0049 438920     720            orl     _TMOD,#0x20
004C            721   ;        sensor_test.c:138: TR1 = 1; // START Timer1
004C D28E       722            setb    _TR1
004E            723   ;        sensor_test.c:139: TI = 1;  // Indicate TX0 ready
004E D299       724            setb    _TI
0050            725   ;        sensor_test.c:142: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
0050 75A211     726            mov     _SPI0CKR,#0x11
0053            727   ;        sensor_test.c:143: SPI0CFG = 0b_1110_0000; // this is mode 3, you need to determine the sampling etc. in datasheet
0053 75A1E0     728            mov     _SPI0CFG,#0xE0
0056            729   ;        sensor_test.c:144: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0056 75F801     730            mov     _SPI0CN0,#0x01
0059            731   ;        sensor_test.c:146: return 0;
0059 758200     732            mov     dpl,#0x00
005C 22         733            ret
005D            734   ;------------------------------------------------------------
005D            735   ;Allocation info for local variables in function 'Set_Pin_Output'
005D            736   ;------------------------------------------------------------
005D            737   ;mask                      Allocated with name '_Set_Pin_Output_mask_1_67'
005D            738   ;pin                       Allocated to registers r2 
005D            739   ;------------------------------------------------------------
005D            740   ;        sensor_test.c:149: void Set_Pin_Output (unsigned char pin)
005D            741   ;        -----------------------------------------
005D            742   ;         function Set_Pin_Output
005D            743   ;        -----------------------------------------
005D            744   _Set_Pin_Output:
005D AA82       745            mov     r2,dpl
005F            746   ;        sensor_test.c:153: mask=(1<<(pin&0x7));
005F 7407       747            mov     a,#0x07
0061 5A         748            anl     a,r2
0062 F5F0       749            mov     b,a
0064 05F0       750            inc     b
0066 7401       751            mov     a,#0x01
0068 8000       752            sjmp    L003011?
006A            753   L003009?:
006A 25E0       754            add     a,acc
006C            755   L003011?:
006C D5F018     756            djnz    b,L003009?
006F FB         757            mov     r3,a
0070            758   ;        sensor_test.c:154: switch(pin/0x10)
0070 EA         759            mov     a,r2
0071 C4         760            swap    a
0072 540F       761            anl     a,#0x0f
0074 FA         762            mov  r2,a
0075 24FC       763            add     a,#0xff - 0x03
0077 4000       764            jc      L003006?
0079 EA         765            mov     a,r2
007A 2A         766            add     a,r2
007B 2A         767            add     a,r2
007C 90C598     768            mov     dptr,#L003013?
007F 73         769            jmp     @a+dptr
0080            770   L003013?:
0080 020000     771            ljmp    L003001?
0083 020000     772            ljmp    L003002?
0086 020000     773            ljmp    L003003?
0089 020000     774            ljmp    L003004?
008C            775   ;        sensor_test.c:156: case 0: P0MDOUT |= mask; break;
008C            776   L003001?:
008C EB         777            mov     a,r3
008D 42A4       778            orl     _P0MDOUT,a
008F            779   ;        sensor_test.c:157: case 1: P1MDOUT |= mask; break;
008F 22         780            ret
0090            781   L003002?:
0090 EB         782            mov     a,r3
0091 42A5       783            orl     _P1MDOUT,a
0093            784   ;        sensor_test.c:158: case 2: P2MDOUT |= mask; break; 
0093 22         785            ret
0094            786   L003003?:
0094 EB         787            mov     a,r3
0095 42A6       788            orl     _P2MDOUT,a
0097            789   ;        sensor_test.c:159: case 3: P3MDOUT |= mask; break; 
0097 22         790            ret
0098            791   L003004?:
0098 EB         792            mov     a,r3
0099 429C       793            orl     _P3MDOUT,a
009B            794   ;        sensor_test.c:160: }    
009B            795   L003006?:
009B 22         796            ret
009C            797   ;------------------------------------------------------------
009C            798   ;Allocation info for local variables in function 'Timer3us'
009C            799   ;------------------------------------------------------------
009C            800   ;i                         Allocated with name '_Timer3us_i_1_70'
009C            801   ;us                        Allocated to registers r2 
009C            802   ;------------------------------------------------------------
009C            803   ;        sensor_test.c:164: void Timer3us(unsigned char us)
009C            804   ;        -----------------------------------------
009C            805   ;         function Timer3us
009C            806   ;        -----------------------------------------
009C            807   _Timer3us:
009C AA82       808            mov     r2,dpl
009E            809   ;        sensor_test.c:169: CKCON0|=0b_0100_0000;
009E 438E40     810            orl     _CKCON0,#0x40
00A1            811   ;        sensor_test.c:171: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
00A1 7592B8     812            mov     _TMR3RL,#0xB8
00A4 7593FF     813            mov     (_TMR3RL >> 8),#0xFF
00A7            814   ;        sensor_test.c:172: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
00A7 859294     815            mov     _TMR3,_TMR3RL
00AA 859395     816            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
00AD            817   ;        sensor_test.c:174: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
00AD 759104     818            mov     _TMR3CN0,#0x04
00B0            819   ;        sensor_test.c:175: for (i = 0; i < us; i++)       // Count <us> overflows
00B0 7B00       820            mov     r3,#0x00
00B2            821   L004004?:
00B2 C3         822            clr     c
00B3 EB         823            mov     a,r3
00B4 9A         824            subb    a,r2
00B5 5000       825            jnc     L004007?
00B7            826   ;        sensor_test.c:177: while (!(TMR3CN0 & 0x80));  // Wait for overflow
00B7            827   L004001?:
00B7 E591       828            mov     a,_TMR3CN0
00B9 30E758     829            jnb     acc.7,L004001?
00BC            830   ;        sensor_test.c:178: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
00BC 53917F     831            anl     _TMR3CN0,#0x7F
00BF            832   ;        sensor_test.c:175: for (i = 0; i < us; i++)       // Count <us> overflows
00BF 0B         833            inc     r3
00C0 8000       834            sjmp    L004004?
00C2            835   L004007?:
00C2            836   ;        sensor_test.c:180: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00C2 759100     837            mov     _TMR3CN0,#0x00
00C5 22         838            ret
00C6            839   ;------------------------------------------------------------
00C6            840   ;Allocation info for local variables in function 'waitms'
00C6            841   ;------------------------------------------------------------
00C6            842   ;ms                        Allocated to registers r2 r3 
00C6            843   ;j                         Allocated with name '_waitms_j_1_73'
00C6            844   ;k                         Allocated with name '_waitms_k_1_73'
00C6            845   ;------------------------------------------------------------
00C6            846   ;        sensor_test.c:183: void waitms (unsigned int ms)
00C6            847   ;        -----------------------------------------
00C6            848   ;         function waitms
00C6            849   ;        -----------------------------------------
00C6            850   _waitms:
00C6 AA82       851            mov     r2,dpl
00C8 AB83       852            mov     r3,dph
00CA            853   ;        sensor_test.c:187: for(j=0; j<ms; j++)
00CA 7C00       854            mov     r4,#0x00
00CC 7D00       855            mov     r5,#0x00
00CE            856   L005005?:
00CE C3         857            clr     c
00CF EC         858            mov     a,r4
00D0 9A         859            subb    a,r2
00D1 ED         860            mov     a,r5
00D2 9B         861            subb    a,r3
00D3 5000       862            jnc     L005009?
00D5            863   ;        sensor_test.c:188: for (k=0; k<4; k++) Timer3us(250);
00D5 7E00       864            mov     r6,#0x00
00D7            865   L005001?:
00D7 BE0498     866            cjne    r6,#0x04,L005018?
00DA            867   L005018?:
00DA 5000       868            jnc     L005007?
00DC 7582FA     869            mov     dpl,#0xFA
00DF C002       870            push    ar2
00E1 C003       871            push    ar3
00E3 C004       872            push    ar4
00E5 C005       873            push    ar5
00E7 C006       874            push    ar6
00E9 120000     875            lcall   _Timer3us
00EC D006       876            pop     ar6
00EE D005       877            pop     ar5
00F0 D004       878            pop     ar4
00F2 D003       879            pop     ar3
00F4 D002       880            pop     ar2
00F6 0E         881            inc     r6
00F7 8000       882            sjmp    L005001?
00F9            883   L005007?:
00F9            884   ;        sensor_test.c:187: for(j=0; j<ms; j++)
00F9 0C         885            inc     r4
00FA BC00D8     886            cjne    r4,#0x00,L005005?
00FD 0D         887            inc     r5
00FE 8000       888            sjmp    L005005?
0100            889   L005009?:
0100 22         890            ret
0101            891   ;------------------------------------------------------------
0101            892   ;Allocation info for local variables in function 'SPI_transfer'
0101            893   ;------------------------------------------------------------
0101            894   ;tx_data                   Allocated to registers 
0101            895   ;------------------------------------------------------------
0101            896   ;        sensor_test.c:191: unsigned char SPI_transfer(unsigned char tx_data)
0101            897   ;        -----------------------------------------
0101            898   ;         function SPI_transfer
0101            899   ;        -----------------------------------------
0101            900   _SPI_transfer:
0101 8582A3     901            mov     _SPI0DAT,dpl
0104            902   ;        sensor_test.c:194: while (!SPIF);      // Wait for transfer to complete
0104            903   L006001?:
0104            904   ;        sensor_test.c:195: SPIF = 0;           // Clear SPI interrupt flag
0104 10FF58     905            jbc     _SPIF,L006008?
0107 8000       906            sjmp    L006001?
0109            907   L006008?:
0109            908   ;        sensor_test.c:196: return SPI0DAT;     // Return received data
0109 85A382     909            mov     dpl,_SPI0DAT
010C 22         910            ret
010D            911   ;------------------------------------------------------------
010D            912   ;Allocation info for local variables in function 'SPI_read'
010D            913   ;------------------------------------------------------------
010D            914   ;reg_addr                  Allocated to registers r2 
010D            915   ;value                     Allocated to registers 
010D            916   ;------------------------------------------------------------
010D            917   ;        sensor_test.c:199: unsigned char SPI_read(unsigned char reg_addr)
010D            918   ;        -----------------------------------------
010D            919   ;         function SPI_read
010D            920   ;        -----------------------------------------
010D            921   _SPI_read:
010D AA82       922            mov     r2,dpl
010F            923   ;        sensor_test.c:204: reg_addr = reg_addr | 0x80;
010F 430280     924            orl     ar2,#0x80
0112            925   ;        sensor_test.c:206: CS = 0;                // Select the device
0112 C283       926            clr     _P0_3
0114            927   ;        sensor_test.c:207: SPI_transfer(reg_addr);     // Send register address
0114 8A82       928            mov     dpl,r2
0116 120000     929            lcall   _SPI_transfer
0119            930   ;        sensor_test.c:208: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
0119 758200     931            mov     dpl,#0x00
011C 120000     932            lcall   _SPI_transfer
011F            933   ;        sensor_test.c:209: CS = 1;                // Deselect the device
011F D283       934            setb    _P0_3
0121            935   ;        sensor_test.c:211: return value;
0121 22         936            ret
0122            937   ;------------------------------------------------------------
0122            938   ;Allocation info for local variables in function 'SPI_read_block'
0122            939   ;------------------------------------------------------------
0122            940   ;buffer                    Allocated with name '_SPI_read_block_PARM_2'
0122            941   ;len                       Allocated with name '_SPI_read_block_PARM_3'
0122            942   ;start_addr                Allocated to registers r2 
0122            943   ;i                         Allocated to registers r2 
0122            944   ;------------------------------------------------------------
0122            945   ;        sensor_test.c:214: void SPI_read_block(unsigned char start_addr, uint8_t *buffer, uint8_t len)
0122            946   ;        -----------------------------------------
0122            947   ;         function SPI_read_block
0122            948   ;        -----------------------------------------
0122            949   _SPI_read_block:
0122 AA82       950            mov     r2,dpl
0124            951   ;        sensor_test.c:217: start_addr |= 0x80; // Set MSB for read
0124 430280     952            orl     ar2,#0x80
0127            953   ;        sensor_test.c:218: CS = 0;
0127 C283       954            clr     _P0_3
0129            955   ;        sensor_test.c:219: SPI_transfer(start_addr);
0129 8A82       956            mov     dpl,r2
012B 120000     957            lcall   _SPI_transfer
012E            958   ;        sensor_test.c:220: for (i = 0; i < len; i++) {
012E 7A00       959            mov     r2,#0x00
0130            960   L008001?:
0130 C3         961            clr     c
0131 EA         962            mov     a,r2
0132 9560       963            subb    a,_SPI_read_block_PARM_3
0134 5000       964            jnc     L008004?
0136            965   ;        sensor_test.c:221: buffer[i] = SPI_transfer(0x00); // Dummy writes
0136 EA         966            mov     a,r2
0137 25B0       967            add     a,_SPI_read_block_PARM_2
0139 FB         968            mov     r3,a
013A E4         969            clr     a
013B 35B1       970            addc    a,(_SPI_read_block_PARM_2 + 1)
013D FC         971            mov     r4,a
013E ADB2       972            mov     r5,(_SPI_read_block_PARM_2 + 2)
0140 758200     973            mov     dpl,#0x00
0143 C002       974            push    ar2
0145 C003       975            push    ar3
0147 C004       976            push    ar4
0149 C005       977            push    ar5
014B 120000     978            lcall   _SPI_transfer
014E AE82       979            mov     r6,dpl
0150 D005       980            pop     ar5
0152 D004       981            pop     ar4
0154 D003       982            pop     ar3
0156 D002       983            pop     ar2
0158 8B82       984            mov     dpl,r3
015A 8C83       985            mov     dph,r4
015C 8DF0       986            mov     b,r5
015E EE         987            mov     a,r6
015F 120000     988            lcall   __gptrput
0162            989   ;        sensor_test.c:220: for (i = 0; i < len; i++) {
0162 0A         990            inc     r2
0163 8000       991            sjmp    L008001?
0165            992   L008004?:
0165            993   ;        sensor_test.c:223: CS = 1;
0165 D283       994            setb    _P0_3
0167 22         995            ret
0168            996   ;------------------------------------------------------------
0168            997   ;Allocation info for local variables in function 'SPI_write'
0168            998   ;------------------------------------------------------------
0168            999   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0168           1000   ;reg_addr                  Allocated to registers r2 
0168           1001   ;------------------------------------------------------------
0168           1002   ;        sensor_test.c:227: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0168           1003   ;        -----------------------------------------
0168           1004   ;         function SPI_write
0168           1005   ;        -----------------------------------------
0168           1006   _SPI_write:
0168 AA82      1007            mov     r2,dpl
016A           1008   ;        sensor_test.c:230: reg_addr = reg_addr & 0x7F;
016A 53027F    1009            anl     ar2,#0x7F
016D           1010   ;        sensor_test.c:232: CS = 0;                // Select device
016D C283      1011            clr     _P0_3
016F           1012   ;        sensor_test.c:233: SPI_transfer(reg_addr);     // Send register address
016F 8A82      1013            mov     dpl,r2
0171 120000    1014            lcall   _SPI_transfer
0174           1015   ;        sensor_test.c:234: SPI_transfer(reg_value);    // Send value
0174 851082    1016            mov     dpl,_SPI_write_PARM_2
0177 120000    1017            lcall   _SPI_transfer
017A           1018   ;        sensor_test.c:235: CS = 1;                // Deselect device
017A D283      1019            setb    _P0_3
017C 22        1020            ret
017D           1021   ;------------------------------------------------------------
017D           1022   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
017D           1023   ;------------------------------------------------------------
017D           1024   ;i                         Allocated with name '_BMM150_Read_Trim_Registers_i_1_84'
017D           1025   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_84'
017D           1026   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_84'
017D           1027   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_84'
017D           1028   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84'
017D           1029   ;------------------------------------------------------------
017D           1030   ;        sensor_test.c:238: void BMM150_Read_Trim_Registers(void)
017D           1031   ;        -----------------------------------------
017D           1032   ;         function BMM150_Read_Trim_Registers
017D           1033   ;        -----------------------------------------
017D           1034   _BMM150_Read_Trim_Registers:
017D           1035   ;        sensor_test.c:242: xdata uint8_t trim_x1y1[2] = {0};
017D 90BF88    1036            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_84
0180           1037   ;        sensor_test.c:243: xdata uint8_t trim_xyz_data[4] = {0};
0180 E4        1038            clr     a
0181 F0        1039            movx    @dptr,a
0182 90BF89    1040            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_84 + 0x0001)
0185 F0        1041            movx    @dptr,a
0186 90BFE8    1042            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_84
0189 F0        1043            movx    @dptr,a
018A 90BFE9    1044            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0001)
018D F0        1045            movx    @dptr,a
018E 90BFEA    1046            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0002)
0191           1047   ;        sensor_test.c:244: xdata uint8_t trim_xy1xy2[10] = {0};
0191 E4        1048            clr     a
0192 F0        1049            movx    @dptr,a
0193 90BFEB    1050            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0003)
0196 F0        1051            movx    @dptr,a
0197 90C048    1052            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84
019A F0        1053            movx    @dptr,a
019B 90C049    1054            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0001)
019E F0        1055            movx    @dptr,a
019F 90C04A    1056            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0002)
01A2 E4        1057            clr     a
01A3 F0        1058            movx    @dptr,a
01A4 90C04B    1059            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0003)
01A7 F0        1060            movx    @dptr,a
01A8 90C04C    1061            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0004)
01AB F0        1062            movx    @dptr,a
01AC 90C04D    1063            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0005)
01AF F0        1064            movx    @dptr,a
01B0 90C04E    1065            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0006)
01B3 E4        1066            clr     a
01B4 F0        1067            movx    @dptr,a
01B5 90C04F    1068            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0007)
01B8 F0        1069            movx    @dptr,a
01B9 90C050    1070            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0008)
01BC F0        1071            movx    @dptr,a
01BD 90C051    1072            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0009)
01C0 F0        1073            movx    @dptr,a
01C1           1074   ;        sensor_test.c:247: for (i=0;i<2;i++){
01C1 7A00      1075            mov     r2,#0x00
01C3           1076   L010001?:
01C3 BA0298    1077            cjne    r2,#0x02,L010024?
01C6           1078   L010024?:
01C6 5000      1079            jnc     L010004?
01C8           1080   ;        sensor_test.c:248: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
01C8 EA        1081            mov     a,r2
01C9 2488      1082            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_84
01CB FB        1083            mov     r3,a
01CC E4        1084            clr     a
01CD 34BF      1085            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_84 >> 8)
01CF FC        1086            mov     r4,a
01D0 745D      1087            mov     a,#0x5D
01D2 2A        1088            add     a,r2
01D3 F582      1089            mov     dpl,a
01D5 C002      1090            push    ar2
01D7 C003      1091            push    ar3
01D9 C004      1092            push    ar4
01DB 120000    1093            lcall   _SPI_read
01DE AD82      1094            mov     r5,dpl
01E0 D004      1095            pop     ar4
01E2 D003      1096            pop     ar3
01E4 D002      1097            pop     ar2
01E6 8B82      1098            mov     dpl,r3
01E8 8C83      1099            mov     dph,r4
01EA ED        1100            mov     a,r5
01EB F0        1101            movx    @dptr,a
01EC           1102   ;        sensor_test.c:247: for (i=0;i<2;i++){
01EC 0A        1103            inc     r2
01ED 8000      1104            sjmp    L010001?
01EF           1105   L010004?:
01EF           1106   ;        sensor_test.c:250: for (i=0;i<4;i++){
01EF 7A00      1107            mov     r2,#0x00
01F1           1108   L010005?:
01F1 BA0458    1109            cjne    r2,#0x04,L010026?
01F4           1110   L010026?:
01F4 5000      1111            jnc     L010008?
01F6           1112   ;        sensor_test.c:251: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
01F6 EA        1113            mov     a,r2
01F7 24E8      1114            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_84
01F9 FB        1115            mov     r3,a
01FA E4        1116            clr     a
01FB 34BF      1117            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 >> 8)
01FD FC        1118            mov     r4,a
01FE 7462      1119            mov     a,#0x62
0200 2A        1120            add     a,r2
0201 F582      1121            mov     dpl,a
0203 C002      1122            push    ar2
0205 C003      1123            push    ar3
0207 C004      1124            push    ar4
0209 120000    1125            lcall   _SPI_read
020C AD82      1126            mov     r5,dpl
020E D004      1127            pop     ar4
0210 D003      1128            pop     ar3
0212 D002      1129            pop     ar2
0214 8B82      1130            mov     dpl,r3
0216 8C83      1131            mov     dph,r4
0218 ED        1132            mov     a,r5
0219 F0        1133            movx    @dptr,a
021A           1134   ;        sensor_test.c:250: for (i=0;i<4;i++){
021A 0A        1135            inc     r2
021B 8000      1136            sjmp    L010005?
021D           1137   L010008?:
021D           1138   ;        sensor_test.c:253: for (i=0;i<10;i++){
021D 7A00      1139            mov     r2,#0x00
021F           1140   L010009?:
021F BA0A18    1141            cjne    r2,#0x0A,L010028?
0222           1142   L010028?:
0222 5000      1143            jnc     L010012?
0224           1144   ;        sensor_test.c:254: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
0224 EA        1145            mov     a,r2
0225 2448      1146            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84
0227 FB        1147            mov     r3,a
0228 E4        1148            clr     a
0229 34C0      1149            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 >> 8)
022B FC        1150            mov     r4,a
022C 7468      1151            mov     a,#0x68
022E 2A        1152            add     a,r2
022F F582      1153            mov     dpl,a
0231 C002      1154            push    ar2
0233 C003      1155            push    ar3
0235 C004      1156            push    ar4
0237 120000    1157            lcall   _SPI_read
023A AD82      1158            mov     r5,dpl
023C D004      1159            pop     ar4
023E D003      1160            pop     ar3
0240 D002      1161            pop     ar2
0242 8B82      1162            mov     dpl,r3
0244 8C83      1163            mov     dph,r4
0246 ED        1164            mov     a,r5
0247 F0        1165            movx    @dptr,a
0248           1166   ;        sensor_test.c:253: for (i=0;i<10;i++){
0248 0A        1167            inc     r2
0249 8000      1168            sjmp    L010009?
024B           1169   L010012?:
024B           1170   ;        sensor_test.c:257: dig_x1 = (int8_t) trim_x1y1[0]; 
024B 90BF88    1171            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_84
024E E0        1172            movx    a,@dptr
024F F5A8      1173            mov     _dig_x1,a
0251           1174   ;        sensor_test.c:258: dig_y1 = (int8_t) trim_x1y1[1]; 
0251 90BF89    1175            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_84 + 0x0001)
0254 E0        1176            movx    a,@dptr
0255 F528      1177            mov     _dig_y1,a
0257           1178   ;        sensor_test.c:259: dig_x2 = (int8_t) trim_xyz_data[2]; 
0257 90BFEA    1179            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0002)
025A E0        1180            movx    a,@dptr
025B F568      1181            mov     _dig_x2,a
025D           1182   ;        sensor_test.c:260: dig_y2 = (int8_t) trim_xyz_data[3]; 
025D 90BFEB    1183            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0003)
0260 E0        1184            movx    a,@dptr
0261 F5E8      1185            mov     _dig_y2,a
0263           1186   ;        sensor_test.c:262: temp_msb = ((uint16_t)trim_xy1xy2[3]) << 8;
0263 90C04B    1187            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0003)
0266 E0        1188            movx    a,@dptr
0267 FB        1189            mov     r3,a
0268 7A00      1190            mov     r2,#0x00
026A           1191   ;        sensor_test.c:263: dig_z1 = (uint16_t)(temp_msb | trim_xy1xy2[2]);
026A 90C04A    1192            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0002)
026D E0        1193            movx    a,@dptr
026E 7D00      1194            mov     r5,#0x00
0270 4202      1195            orl     ar2,a
0272 ED        1196            mov     a,r5
0273 4203      1197            orl     ar3,a
0275 8AA8      1198            mov     _dig_z1,r2
0277           1199   ;        sensor_test.c:265: temp_msb = ((uint16_t)trim_xy1xy2[1]) << 8;
0277 90C049    1200            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0001)
027A E0        1201            movx    a,@dptr
027B FB        1202            mov     r3,a
027C 7A00      1203            mov     r2,#0x00
027E           1204   ;        sensor_test.c:266: dig_z2 = (int16_t)(temp_msb | trim_xy1xy2[0]);
027E 90C048    1205            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84
0281 E0        1206            movx    a,@dptr
0282 7D00      1207            mov     r5,#0x00
0284 4202      1208            orl     ar2,a
0286 ED        1209            mov     a,r5
0287 4203      1210            orl     ar3,a
0289 8A68      1211            mov     _dig_z2,r2
028B           1212   ;        sensor_test.c:268: temp_msb = ((uint16_t)trim_xy1xy2[7]) << 8;
028B 90C04F    1213            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0007)
028E E0        1214            movx    a,@dptr
028F FB        1215            mov     r3,a
0290 7A00      1216            mov     r2,#0x00
0292           1217   ;        sensor_test.c:269: dig_z3 = (int16_t)(temp_msb | trim_xy1xy2[6]);
0292 90C04E    1218            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0006)
0295 E0        1219            movx    a,@dptr
0296 7D00      1220            mov     r5,#0x00
0298 4202      1221            orl     ar2,a
029A ED        1222            mov     a,r5
029B 4203      1223            orl     ar3,a
029D 8A28      1224            mov     _dig_z3,r2
029F           1225   ;        sensor_test.c:271: temp_msb = ((uint16_t)trim_xyz_data[1]) << 8;
029F 90BFE9    1226            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0001)
02A2 E0        1227            movx    a,@dptr
02A3 FB        1228            mov     r3,a
02A4 7A00      1229            mov     r2,#0x00
02A6           1230   ;        sensor_test.c:272: dig_z4 = (int16_t)(temp_msb | trim_xyz_data[0]);
02A6 90BFE8    1231            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_84
02A9 E0        1232            movx    a,@dptr
02AA 7D00      1233            mov     r5,#0x00
02AC 4202      1234            orl     ar2,a
02AE ED        1235            mov     a,r5
02AF 4203      1236            orl     ar3,a
02B1 8AB0      1237            mov     _dig_z4,r2
02B3           1238   ;        sensor_test.c:274: dig_xy1 = trim_xy1xy2[9];
02B3 90C051    1239            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0009)
02B6 E0        1240            movx    a,@dptr
02B7 F570      1241            mov     _dig_xy1,a
02B9           1242   ;        sensor_test.c:275: dig_xy2 = (int8_t)trim_xy1xy2[8];
02B9 90C050    1243            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0008)
02BC E0        1244            movx    a,@dptr
02BD F530      1245            mov     _dig_xy2,a
02BF           1246   ;        sensor_test.c:277: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
02BF 90C04D    1247            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0005)
02C2 E0        1248            movx    a,@dptr
02C3 FA        1249            mov     r2,a
02C4 53027F    1250            anl     ar2,#0x7F
02C7 8A03      1251            mov     ar3,r2
02C9 7A00      1252            mov     r2,#0x00
02CB           1253   ;        sensor_test.c:278: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
02CB 90C04C    1254            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0004)
02CE E0        1255            movx    a,@dptr
02CF 7D00      1256            mov     r5,#0x00
02D1 4202      1257            orl     ar2,a
02D3 ED        1258            mov     a,r5
02D4 4203      1259            orl     ar3,a
02D6 8AF0      1260            mov     _dig_xyz1,r2
02D8 22        1261            ret
02D9           1262   ;------------------------------------------------------------
02D9           1263   ;Allocation info for local variables in function 'BMM150_Init'
02D9           1264   ;------------------------------------------------------------
02D9           1265   ;chip_id                   Allocated to registers r2 
02D9           1266   ;------------------------------------------------------------
02D9           1267   ;        sensor_test.c:283: void BMM150_Init(void)
02D9           1268   ;        -----------------------------------------
02D9           1269   ;         function BMM150_Init
02D9           1270   ;        -----------------------------------------
02D9           1271   _BMM150_Init:
02D9           1272   ;        sensor_test.c:288: CS = 1;         // Deselect BMM150
02D9 D283      1273            setb    _P0_3
02DB           1274   ;        sensor_test.c:291: waitms(10);
02DB 90000A    1275            mov     dptr,#0x000A
02DE 120000    1276            lcall   _waitms
02E1           1277   ;        sensor_test.c:294: SPI_write(BMM150_POWER_CONTROL, 0x82);
02E1 751082    1278            mov     _SPI_write_PARM_2,#0x82
02E4 75824B    1279            mov     dpl,#0x4B
02E7 120000    1280            lcall   _SPI_write
02EA           1281   ;        sensor_test.c:295: waitms(10);  // Wait for reset to complete
02EA 90000A    1282            mov     dptr,#0x000A
02ED 120000    1283            lcall   _waitms
02F0           1284   ;        sensor_test.c:298: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
02F0 751001    1285            mov     _SPI_write_PARM_2,#0x01
02F3 75824B    1286            mov     dpl,#0x4B
02F6 120000    1287            lcall   _SPI_write
02F9           1288   ;        sensor_test.c:299: waitms(5);
02F9 900005    1289            mov     dptr,#0x0005
02FC 120000    1290            lcall   _waitms
02FF           1291   ;        sensor_test.c:302: chip_id = SPI_read(BMM150_CHIP_ID);
02FF 758240    1292            mov     dpl,#0x40
0302 120000    1293            lcall   _SPI_read
0305 AA82      1294            mov     r2,dpl
0307           1295   ;        sensor_test.c:303: if (chip_id != BMM150_CHIP_ID_VALUE)
0307 BA3298    1296            cjne    r2,#0x32,L011010?
030A 8000      1297            sjmp    L011005?
030C           1298   L011010?:
030C           1299   ;        sensor_test.c:305: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
030C 8A03      1300            mov     ar3,r2
030E 7C00      1301            mov     r4,#0x00
0310 C003      1302            push    ar3
0312 C004      1303            push    ar4
0314 7418      1304            mov     a,#__str_0
0316 C0E0      1305            push    acc
0318 74CD      1306            mov     a,#(__str_0 >> 8)
031A C0E0      1307            push    acc
031C 7480      1308            mov     a,#0x80
031E C0E0      1309            push    acc
0320 120000    1310            lcall   _printf
0323 E581      1311            mov     a,sp
0325 24FB      1312            add     a,#0xfb
0327 F581      1313            mov     sp,a
0329           1314   ;        sensor_test.c:306: while (1) {
0329           1315   L011002?:
0329           1316   ;        sensor_test.c:307: printf("Press restart to check again!\r");
0329 7418      1317            mov     a,#__str_1
032B C0E0      1318            push    acc
032D 74CE      1319            mov     a,#(__str_1 >> 8)
032F C0E0      1320            push    acc
0331 7480      1321            mov     a,#0x80
0333 C0E0      1322            push    acc
0335 120000    1323            lcall   _printf
0338 1581      1324            dec     sp
033A 1581      1325            dec     sp
033C 1581      1326            dec     sp
033E 8000      1327            sjmp    L011002?
0340           1328   L011005?:
0340           1329   ;        sensor_test.c:312: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
0340 751000    1330            mov     _SPI_write_PARM_2,#0x00
0343 75824C    1331            mov     dpl,#0x4C
0346 C002      1332            push    ar2
0348 120000    1333            lcall   _SPI_write
034B           1334   ;        sensor_test.c:315: SPI_write(BMM150_REP_XY, 0x7F); // XY-repetitions = 9
034B 75107F    1335            mov     _SPI_write_PARM_2,#0x7F
034E 758251    1336            mov     dpl,#0x51
0351 120000    1337            lcall   _SPI_write
0354           1338   ;        sensor_test.c:316: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
0354 75100E    1339            mov     _SPI_write_PARM_2,#0x0E
0357 758252    1340            mov     dpl,#0x52
035A 120000    1341            lcall   _SPI_write
035D           1342   ;        sensor_test.c:318: BMM150_Read_Trim_Registers();
035D 120000    1343            lcall   _BMM150_Read_Trim_Registers
0360           1344   ;        sensor_test.c:320: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
0360 7B00      1345            mov     r3,#0x00
0362 C003      1346            push    ar3
0364 7458      1347            mov     a,#__str_2
0366 C0E0      1348            push    acc
0368 74CE      1349            mov     a,#(__str_2 >> 8)
036A C0E0      1350            push    acc
036C 7480      1351            mov     a,#0x80
036E C0E0      1352            push    acc
0370 120000    1353            lcall   _printf
0373 E581      1354            mov     a,sp
0375 24FB      1355            add     a,#0xfb
0377 F581      1356            mov     sp,a
0379 22        1357            ret
037A           1358   ;------------------------------------------------------------
037A           1359   ;Allocation info for local variables in function 'BMM150_compensate_x'
037A           1360   ;------------------------------------------------------------
037A           1361   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
037A           1362   ;mag_data_x                Allocated to registers r2 r3 r4 
037A           1363   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
037A           1364   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_93'
037A           1365   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_93'
037A           1366   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_93'
037A           1367   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_93'
037A           1368   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_93'
037A           1369   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_93'
037A           1370   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_93'
037A           1371   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_93'
037A           1372   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_93'
037A           1373   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_93'
037A           1374   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_93'
037A           1375   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_93'
037A           1376   ;------------------------------------------------------------
037A           1377   ;        sensor_test.c:323: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
037A           1378   ;        -----------------------------------------
037A           1379   ;         function BMM150_compensate_x
037A           1380   ;        -----------------------------------------
037A           1381   _BMM150_compensate_x:
037A           1382   ;        sensor_test.c:341: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
037A ACF0      1383            mov     r4,b
037C 120000    1384            lcall   __gptrget
037F FA        1385            mov     r2,a
0380 A3        1386            inc     dptr
0381 120000    1387            lcall   __gptrget
0384 FB        1388            mov     r3,a
0385 BA00D8    1389            cjne    r2,#0x00,L012019?
0388 BBF0D8    1390            cjne    r3,#0xF0,L012019?
038B 020000    1391            ljmp    L012011?
038E           1392   L012019?:
038E           1393   ;        sensor_test.c:342: if (*data_rhall != 0)
038E ACC0      1394            mov     r4,_BMM150_compensate_x_PARM_2
0390 ADC1      1395            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
0392 AEC2      1396            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
0394 8C82      1397            mov     dpl,r4
0396 8D83      1398            mov     dph,r5
0398 8EF0      1399            mov     b,r6
039A 120000    1400            lcall   __gptrget
039D FC        1401            mov     r4,a
039E A3        1402            inc     dptr
039F 120000    1403            lcall   __gptrget
03A2 FD        1404            mov     r5,a
03A3 4C        1405            orl     a,r4
03A4 6000      1406            jz      L012005?
03A6           1407   ;        sensor_test.c:345: process_comp_x0 = *data_rhall;
03A6 90C108    1408            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03A9 EC        1409            mov     a,r4
03AA F0        1410            movx    @dptr,a
03AB A3        1411            inc     dptr
03AC ED        1412            mov     a,r5
03AD F0        1413            movx    @dptr,a
03AE 8000      1414            sjmp    L012006?
03B0           1415   L012005?:
03B0           1416   ;        sensor_test.c:347: else if (dig_xyz1 != 0)
03B0 E5F0      1417            mov     a,_dig_xyz1
03B2 6000      1418            jz      L012002?
03B4           1419   ;        sensor_test.c:349: process_comp_x0 = dig_xyz1;
03B4 90C108    1420            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03B7 E5F0      1421            mov     a,_dig_xyz1
03B9 F0        1422            movx    @dptr,a
03BA E5F0      1423            mov     a,_dig_xyz1
03BC 33        1424            rlc     a
03BD 95E0      1425            subb    a,acc
03BF A3        1426            inc     dptr
03C0 F0        1427            movx    @dptr,a
03C1 8000      1428            sjmp    L012006?
03C3           1429   L012002?:
03C3           1430   ;        sensor_test.c:353: process_comp_x0 = 0;
03C3 90C108    1431            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03C6 E4        1432            clr     a
03C7 F0        1433            movx    @dptr,a
03C8 A3        1434            inc     dptr
03C9 F0        1435            movx    @dptr,a
03CA           1436   L012006?:
03CA           1437   ;        sensor_test.c:355: if (process_comp_x0 != 0)
03CA 90C108    1438            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
03CD E0        1439            movx    a,@dptr
03CE FC        1440            mov     r4,a
03CF A3        1441            inc     dptr
03D0 E0        1442            movx    a,@dptr
03D1 FD        1443            mov     r5,a
03D2 4C        1444            orl     a,r4
03D3 7000      1445            jnz     L012022?
03D5 020000    1446            ljmp    L012008?
03D8           1447   L012022?:
03D8           1448   ;        sensor_test.c:358: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
03D8 E5F0      1449            mov     a,_dig_xyz1
03DA FE        1450            mov     r6,a
03DB 33        1451            rlc     a
03DC 95E0      1452            subb    a,acc
03DE F8        1453            mov     r0,a
03DF C8        1454            xch     a,r0
03E0 5403      1455            anl     a,#0x03
03E2 A2E0      1456            mov     c,acc.0
03E4 C8        1457            xch     a,r0
03E5 13        1458            rrc     a
03E6 C8        1459            xch     a,r0
03E7 13        1460            rrc     a
03E8 A2E0      1461            mov     c,acc.0
03EA C8        1462            xch     a,r0
03EB 13        1463            rrc     a
03EC C8        1464            xch     a,r0
03ED 13        1465            rrc     a
03EE C8        1466            xch     a,r0
03EF F9        1467            mov     r1,a
03F0 EE        1468            mov     a,r6
03F1 03        1469            rr      a
03F2 03        1470            rr      a
03F3 54C0      1471            anl     a,#0xc0
03F5 FF        1472            mov     r7,a
03F6 EE        1473            mov     a,r6
03F7 03        1474            rr      a
03F8 03        1475            rr      a
03F9 543F      1476            anl     a,#0x3f
03FB 48        1477            orl     a,r0
03FC F8        1478            mov     r0,a
03FD 7E00      1479            mov     r6,#0x00
03FF           1480   ;        sensor_test.c:359: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
03FF 8C00      1481            mov     __divslong_PARM_2,r4
0401 8D01      1482            mov     (__divslong_PARM_2 + 1),r5
0403 750200    1483            mov     (__divslong_PARM_2 + 2),#0x00
0406 750300    1484            mov     (__divslong_PARM_2 + 3),#0x00
0409 8E82      1485            mov     dpl,r6
040B 8F83      1486            mov     dph,r7
040D 88F0      1487            mov     b,r0
040F E9        1488            mov     a,r1
0410 C002      1489            push    ar2
0412 C003      1490            push    ar3
0414 120000    1491            lcall   __divslong
0417 AC82      1492            mov     r4,dpl
0419 E583      1493            mov     a,dph
041B 24C0      1494            add     a,#0xc0
041D FD        1495            mov     r5,a
041E           1496   ;        sensor_test.c:361: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
041E 8C06      1497            mov     ar6,r4
0420 8D07      1498            mov     ar7,r5
0422 8EB8      1499            mov     _BMM150_compensate_x_sloc0_1_0,r6
0424 EF        1500            mov     a,r7
0425 F5B9      1501            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
0427 33        1502            rlc     a
0428 95E0      1503            subb    a,acc
042A F5BA      1504            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
042C F5BB      1505            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
042E 8C06      1506            mov     ar6,r4
0430 8D07      1507            mov     ar7,r5
0432 8E00      1508            mov     __mullong_PARM_2,r6
0434 EF        1509            mov     a,r7
0435 F501      1510            mov     (__mullong_PARM_2 + 1),a
0437 33        1511            rlc     a
0438 95E0      1512            subb    a,acc
043A F502      1513            mov     (__mullong_PARM_2 + 2),a
043C F503      1514            mov     (__mullong_PARM_2 + 3),a
043E           1515   ;        sensor_test.c:362: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
043E 85B882    1516            mov     dpl,_BMM150_compensate_x_sloc0_1_0
0441 85B983    1517            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
0444 85BAF0    1518            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
0447 E5BB      1519            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0449 C004      1520            push    ar4
044B C005      1521            push    ar5
044D 120000    1522            lcall   __mullong
0450 8582B8    1523            mov     _BMM150_compensate_x_sloc0_1_0,dpl
0453 8583B9    1524            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
0456 85F0BA    1525            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
0459 F5BB      1526            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
045B E530      1527            mov     a,_dig_xy2
045D FE        1528            mov     r6,a
045E 33        1529            rlc     a
045F 95E0      1530            subb    a,acc
0461 FF        1531            mov     r7,a
0462 F8        1532            mov     r0,a
0463 F9        1533            mov     r1,a
0464 750080    1534            mov     __divslong_PARM_2,#0x80
0467 E4        1535            clr     a
0468 F501      1536            mov     (__divslong_PARM_2 + 1),a
046A F502      1537            mov     (__divslong_PARM_2 + 2),a
046C F503      1538            mov     (__divslong_PARM_2 + 3),a
046E 85B882    1539            mov     dpl,_BMM150_compensate_x_sloc0_1_0
0471 85B983    1540            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
0474 85BAF0    1541            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
0477 E5BB      1542            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
0479 C006      1543            push    ar6
047B C007      1544            push    ar7
047D C000      1545            push    ar0
047F C001      1546            push    ar1
0481 120000    1547            lcall   __divslong
0484 858200    1548            mov     __mullong_PARM_2,dpl
0487 858301    1549            mov     (__mullong_PARM_2 + 1),dph
048A 85F002    1550            mov     (__mullong_PARM_2 + 2),b
048D F503      1551            mov     (__mullong_PARM_2 + 3),a
048F D001      1552            pop     ar1
0491 D000      1553            pop     ar0
0493 D007      1554            pop     ar7
0495 D006      1555            pop     ar6
0497           1556   ;        sensor_test.c:363: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
0497 8E82      1557            mov     dpl,r6
0499 8F83      1558            mov     dph,r7
049B 88F0      1559            mov     b,r0
049D E9        1560            mov     a,r1
049E 120000    1561            lcall   __mullong
04A1 8582B8    1562            mov     _BMM150_compensate_x_sloc0_1_0,dpl
04A4 8583B9    1563            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
04A7 85F0BA    1564            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
04AA F5BB      1565            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
04AC D005      1566            pop     ar5
04AE D004      1567            pop     ar4
04B0 E570      1568            mov     a,_dig_xy1
04B2 FE        1569            mov     r6,a
04B3 33        1570            rlc     a
04B4 95E0      1571            subb    a,acc
04B6 5401      1572            anl     a,#0x01
04B8 A2E0      1573            mov     c,acc.0
04BA CE        1574            xch     a,r6
04BB 13        1575            rrc     a
04BC CE        1576            xch     a,r6
04BD 13        1577            rrc     a
04BE CE        1578            xch     a,r6
04BF 8E00      1579            mov     __mullong_PARM_2,r6
04C1 F501      1580            mov     (__mullong_PARM_2 + 1),a
04C3 33        1581            rlc     a
04C4 95E0      1582            subb    a,acc
04C6 F502      1583            mov     (__mullong_PARM_2 + 2),a
04C8 F503      1584            mov     (__mullong_PARM_2 + 3),a
04CA           1585   ;        sensor_test.c:364: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
04CA ED        1586            mov     a,r5
04CB 33        1587            rlc     a
04CC 95E0      1588            subb    a,acc
04CE FE        1589            mov     r6,a
04CF           1590   ;        sensor_test.c:365: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
04CF 8C82      1591            mov     dpl,r4
04D1 8D83      1592            mov     dph,r5
04D3 8EF0      1593            mov     b,r6
04D5 120000    1594            lcall   __mullong
04D8 AC82      1595            mov     r4,dpl
04DA AD83      1596            mov     r5,dph
04DC AEF0      1597            mov     r6,b
04DE FF        1598            mov     r7,a
04DF EC        1599            mov     a,r4
04E0 25B8      1600            add     a,_BMM150_compensate_x_sloc0_1_0
04E2 FC        1601            mov     r4,a
04E3 ED        1602            mov     a,r5
04E4 35B9      1603            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
04E6 FD        1604            mov     r5,a
04E7 EE        1605            mov     a,r6
04E8 35BA      1606            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
04EA FE        1607            mov     r6,a
04EB EF        1608            mov     a,r7
04EC 35BB      1609            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
04EE FF        1610            mov     r7,a
04EF 750000    1611            mov     __divslong_PARM_2,#0x00
04F2 750102    1612            mov     (__divslong_PARM_2 + 1),#0x02
04F5 750200    1613            mov     (__divslong_PARM_2 + 2),#0x00
04F8 750300    1614            mov     (__divslong_PARM_2 + 3),#0x00
04FB 8C82      1615            mov     dpl,r4
04FD 8D83      1616            mov     dph,r5
04FF 8EF0      1617            mov     b,r6
0501 EF        1618            mov     a,r7
0502 120000    1619            lcall   __divslong
0505 AC82      1620            mov     r4,dpl
0507 AD83      1621            mov     r5,dph
0509 AEF0      1622            mov     r6,b
050B FF        1623            mov     r7,a
050C 7410      1624            mov     a,#0x10
050E 2E        1625            add     a,r6
050F FE        1626            mov     r6,a
0510 E4        1627            clr     a
0511 3F        1628            addc    a,r7
0512 FF        1629            mov     r7,a
0513           1630   ;        sensor_test.c:366: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
0513 E568      1631            mov     a,_dig_x2
0515 F8        1632            mov     r0,a
0516 33        1633            rlc     a
0517 95E0      1634            subb    a,acc
0519 F9        1635            mov     r1,a
051A 74A0      1636            mov     a,#0xA0
051C 28        1637            add     a,r0
051D F8        1638            mov     r0,a
051E E4        1639            clr     a
051F 39        1640            addc    a,r1
0520 8800      1641            mov     __mullong_PARM_2,r0
0522 F501      1642            mov     (__mullong_PARM_2 + 1),a
0524 33        1643            rlc     a
0525 95E0      1644            subb    a,acc
0527 F502      1645            mov     (__mullong_PARM_2 + 2),a
0529 F503      1646            mov     (__mullong_PARM_2 + 3),a
052B           1647   ;        sensor_test.c:367: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
052B 8C82      1648            mov     dpl,r4
052D 8D83      1649            mov     dph,r5
052F 8EF0      1650            mov     b,r6
0531 EF        1651            mov     a,r7
0532 120000    1652            lcall   __mullong
0535           1653   ;        sensor_test.c:368: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
0535 750000    1654            mov     __divslong_PARM_2,#0x00
0538 750110    1655            mov     (__divslong_PARM_2 + 1),#0x10
053B 750200    1656            mov     (__divslong_PARM_2 + 2),#0x00
053E 750300    1657            mov     (__divslong_PARM_2 + 3),#0x00
0541 120000    1658            lcall   __divslong
0544 858200    1659            mov     __mullong_PARM_2,dpl
0547 858301    1660            mov     (__mullong_PARM_2 + 1),dph
054A 85F002    1661            mov     (__mullong_PARM_2 + 2),b
054D F503      1662            mov     (__mullong_PARM_2 + 3),a
054F D003      1663            pop     ar3
0551 D002      1664            pop     ar2
0553 EB        1665            mov     a,r3
0554 33        1666            rlc     a
0555 95E0      1667            subb    a,acc
0557 FC        1668            mov     r4,a
0558           1669   ;        sensor_test.c:369: retval = ((int16_t)(process_comp_x10 / 8192));
0558 8A82      1670            mov     dpl,r2
055A 8B83      1671            mov     dph,r3
055C 8CF0      1672            mov     b,r4
055E 120000    1673            lcall   __mullong
0561 750000    1674            mov     __divslong_PARM_2,#0x00
0564 750120    1675            mov     (__divslong_PARM_2 + 1),#0x20
0567 750200    1676            mov     (__divslong_PARM_2 + 2),#0x00
056A 750300    1677            mov     (__divslong_PARM_2 + 3),#0x00
056D 120000    1678            lcall   __divslong
0570 AA82      1679            mov     r2,dpl
0572 AB83      1680            mov     r3,dph
0574           1681   ;        sensor_test.c:370: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
0574 E5A8      1682            mov     a,_dig_x1
0576 FC        1683            mov     r4,a
0577 33        1684            rlc     a
0578 95E0      1685            subb    a,acc
057A C4        1686            swap    a
057B 03        1687            rr      a
057C 54F8      1688            anl     a,#0xf8
057E CC        1689            xch     a,r4
057F C4        1690            swap    a
0580 03        1691            rr      a
0581 CC        1692            xch     a,r4
0582 6C        1693            xrl     a,r4
0583 CC        1694            xch     a,r4
0584 54F8      1695            anl     a,#0xf8
0586 CC        1696            xch     a,r4
0587 6C        1697            xrl     a,r4
0588 FD        1698            mov     r5,a
0589 EC        1699            mov     a,r4
058A 2A        1700            add     a,r2
058B F582      1701            mov     dpl,a
058D ED        1702            mov     a,r5
058E 3B        1703            addc    a,r3
058F F583      1704            mov     dph,a
0591 750010    1705            mov     __divsint_PARM_2,#0x10
0594 E4        1706            clr     a
0595 F501      1707            mov     (__divsint_PARM_2 + 1),a
0597 120000    1708            lcall   __divsint
059A E582      1709            mov     a,dpl
059C 8583F0    1710            mov     b,dph
059F 90C0A8    1711            mov     dptr,#_BMM150_compensate_x_retval_1_93
05A2 F0        1712            movx    @dptr,a
05A3 A3        1713            inc     dptr
05A4 E5F0      1714            mov     a,b
05A6 F0        1715            movx    @dptr,a
05A7 8000      1716            sjmp    L012012?
05A9           1717   L012008?:
05A9           1718   ;        sensor_test.c:373: retval = BMM150_OVERFLOW_OUTPUT; 
05A9 90C0A8    1719            mov     dptr,#_BMM150_compensate_x_retval_1_93
05AC E4        1720            clr     a
05AD F0        1721            movx    @dptr,a
05AE A3        1722            inc     dptr
05AF 7480      1723            mov     a,#0x80
05B1 F0        1724            movx    @dptr,a
05B2 8000      1725            sjmp    L012012?
05B4           1726   L012011?:
05B4           1727   ;        sensor_test.c:377: retval = BMM150_OVERFLOW_OUTPUT; 
05B4 90C0A8    1728            mov     dptr,#_BMM150_compensate_x_retval_1_93
05B7 E4        1729            clr     a
05B8 F0        1730            movx    @dptr,a
05B9 A3        1731            inc     dptr
05BA 7480      1732            mov     a,#0x80
05BC F0        1733            movx    @dptr,a
05BD           1734   L012012?:
05BD           1735   ;        sensor_test.c:379: return retval; 
05BD 90C0A8    1736            mov     dptr,#_BMM150_compensate_x_retval_1_93
05C0 E0        1737            movx    a,@dptr
05C1 FA        1738            mov     r2,a
05C2 A3        1739            inc     dptr
05C3 E0        1740            movx    a,@dptr
05C4 8A82      1741            mov     dpl,r2
05C6 F583      1742            mov     dph,a
05C8 22        1743            ret
05C9           1744   ;------------------------------------------------------------
05C9           1745   ;Allocation info for local variables in function 'BMM150_compensate_y'
05C9           1746   ;------------------------------------------------------------
05C9           1747   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
05C9           1748   ;mag_data_y                Allocated to registers r2 r3 r4 
05C9           1749   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
05C9           1750   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_102'
05C9           1751   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_102'
05C9           1752   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_102'
05C9           1753   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_102'
05C9           1754   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_102'
05C9           1755   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_102'
05C9           1756   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_102'
05C9           1757   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_102'
05C9           1758   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_102'
05C9           1759   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_102'
05C9           1760   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_102'
05C9           1761   ;------------------------------------------------------------
05C9           1762   ;        sensor_test.c:382: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
05C9           1763   ;        -----------------------------------------
05C9           1764   ;         function BMM150_compensate_y
05C9           1765   ;        -----------------------------------------
05C9           1766   _BMM150_compensate_y:
05C9           1767   ;        sensor_test.c:400: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
05C9 ACF0      1768            mov     r4,b
05CB 120000    1769            lcall   __gptrget
05CE FA        1770            mov     r2,a
05CF A3        1771            inc     dptr
05D0 120000    1772            lcall   __gptrget
05D3 FB        1773            mov     r3,a
05D4 BA0088    1774            cjne    r2,#0x00,L013019?
05D7 BBF088    1775            cjne    r3,#0xF0,L013019?
05DA 020000    1776            ljmp    L013011?
05DD           1777   L013019?:
05DD           1778   ;        sensor_test.c:402: if (*data_rhall != 0)
05DD AC70      1779            mov     r4,_BMM150_compensate_y_PARM_2
05DF AD71      1780            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
05E1 AE72      1781            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
05E3 8C82      1782            mov     dpl,r4
05E5 8D83      1783            mov     dph,r5
05E7 8EF0      1784            mov     b,r6
05E9 120000    1785            lcall   __gptrget
05EC FC        1786            mov     r4,a
05ED A3        1787            inc     dptr
05EE 120000    1788            lcall   __gptrget
05F1 FD        1789            mov     r5,a
05F2 4C        1790            orl     a,r4
05F3 6000      1791            jz      L013005?
05F5           1792   ;        sensor_test.c:405: process_comp_y0 = *data_rhall;
05F5 90C1C8    1793            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
05F8 EC        1794            mov     a,r4
05F9 F0        1795            movx    @dptr,a
05FA A3        1796            inc     dptr
05FB ED        1797            mov     a,r5
05FC F0        1798            movx    @dptr,a
05FD 8000      1799            sjmp    L013006?
05FF           1800   L013005?:
05FF           1801   ;        sensor_test.c:407: else if (dig_xyz1 != 0)
05FF E5F0      1802            mov     a,_dig_xyz1
0601 6000      1803            jz      L013002?
0603           1804   ;        sensor_test.c:409: process_comp_y0 = dig_xyz1;
0603 90C1C8    1805            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
0606 E5F0      1806            mov     a,_dig_xyz1
0608 F0        1807            movx    @dptr,a
0609 E5F0      1808            mov     a,_dig_xyz1
060B 33        1809            rlc     a
060C 95E0      1810            subb    a,acc
060E A3        1811            inc     dptr
060F F0        1812            movx    @dptr,a
0610 8000      1813            sjmp    L013006?
0612           1814   L013002?:
0612           1815   ;        sensor_test.c:413: process_comp_y0 = 0;
0612 90C1C8    1816            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
0615 E4        1817            clr     a
0616 F0        1818            movx    @dptr,a
0617 A3        1819            inc     dptr
0618 F0        1820            movx    @dptr,a
0619           1821   L013006?:
0619           1822   ;        sensor_test.c:416: if (process_comp_y0 != 0)
0619 90C1C8    1823            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
061C E0        1824            movx    a,@dptr
061D FC        1825            mov     r4,a
061E A3        1826            inc     dptr
061F E0        1827            movx    a,@dptr
0620 FD        1828            mov     r5,a
0621 4C        1829            orl     a,r4
0622 7000      1830            jnz     L013022?
0624 020000    1831            ljmp    L013008?
0627           1832   L013022?:
0627           1833   ;        sensor_test.c:419: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
0627 E5F0      1834            mov     a,_dig_xyz1
0629 FE        1835            mov     r6,a
062A 33        1836            rlc     a
062B 95E0      1837            subb    a,acc
062D F8        1838            mov     r0,a
062E C8        1839            xch     a,r0
062F 5403      1840            anl     a,#0x03
0631 A2E0      1841            mov     c,acc.0
0633 C8        1842            xch     a,r0
0634 13        1843            rrc     a
0635 C8        1844            xch     a,r0
0636 13        1845            rrc     a
0637 A2E0      1846            mov     c,acc.0
0639 C8        1847            xch     a,r0
063A 13        1848            rrc     a
063B C8        1849            xch     a,r0
063C 13        1850            rrc     a
063D C8        1851            xch     a,r0
063E F9        1852            mov     r1,a
063F EE        1853            mov     a,r6
0640 03        1854            rr      a
0641 03        1855            rr      a
0642 54C0      1856            anl     a,#0xc0
0644 FF        1857            mov     r7,a
0645 EE        1858            mov     a,r6
0646 03        1859            rr      a
0647 03        1860            rr      a
0648 543F      1861            anl     a,#0x3f
064A 48        1862            orl     a,r0
064B F8        1863            mov     r0,a
064C 7E00      1864            mov     r6,#0x00
064E 8C00      1865            mov     __divslong_PARM_2,r4
0650 8D01      1866            mov     (__divslong_PARM_2 + 1),r5
0652 750200    1867            mov     (__divslong_PARM_2 + 2),#0x00
0655 750300    1868            mov     (__divslong_PARM_2 + 3),#0x00
0658           1869   ;        sensor_test.c:420: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
0658 8E82      1870            mov     dpl,r6
065A 8F83      1871            mov     dph,r7
065C 88F0      1872            mov     b,r0
065E E9        1873            mov     a,r1
065F C002      1874            push    ar2
0661 C003      1875            push    ar3
0663 120000    1876            lcall   __divslong
0666 AC82      1877            mov     r4,dpl
0668 E583      1878            mov     a,dph
066A 24C0      1879            add     a,#0xc0
066C FD        1880            mov     r5,a
066D           1881   ;        sensor_test.c:422: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
066D 8C06      1882            mov     ar6,r4
066F 8D07      1883            mov     ar7,r5
0671 8E08      1884            mov     _BMM150_compensate_y_sloc0_1_0,r6
0673 EF        1885            mov     a,r7
0674 F509      1886            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
0676 33        1887            rlc     a
0677 95E0      1888            subb    a,acc
0679 F50A      1889            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
067B F50B      1890            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
067D 8C06      1891            mov     ar6,r4
067F 8D07      1892            mov     ar7,r5
0681 8E00      1893            mov     __mullong_PARM_2,r6
0683 EF        1894            mov     a,r7
0684 F501      1895            mov     (__mullong_PARM_2 + 1),a
0686 33        1896            rlc     a
0687 95E0      1897            subb    a,acc
0689 F502      1898            mov     (__mullong_PARM_2 + 2),a
068B F503      1899            mov     (__mullong_PARM_2 + 3),a
068D           1900   ;        sensor_test.c:423: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
068D 850882    1901            mov     dpl,_BMM150_compensate_y_sloc0_1_0
0690 850983    1902            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
0693 850AF0    1903            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
0696 E50B      1904            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
0698 C004      1905            push    ar4
069A C005      1906            push    ar5
069C 120000    1907            lcall   __mullong
069F 858208    1908            mov     _BMM150_compensate_y_sloc0_1_0,dpl
06A2 858309    1909            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
06A5 85F00A    1910            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
06A8 F50B      1911            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
06AA E530      1912            mov     a,_dig_xy2
06AC FE        1913            mov     r6,a
06AD 33        1914            rlc     a
06AE 95E0      1915            subb    a,acc
06B0 FF        1916            mov     r7,a
06B1 F8        1917            mov     r0,a
06B2 F9        1918            mov     r1,a
06B3 750080    1919            mov     __divslong_PARM_2,#0x80
06B6 E4        1920            clr     a
06B7 F501      1921            mov     (__divslong_PARM_2 + 1),a
06B9 F502      1922            mov     (__divslong_PARM_2 + 2),a
06BB F503      1923            mov     (__divslong_PARM_2 + 3),a
06BD 850882    1924            mov     dpl,_BMM150_compensate_y_sloc0_1_0
06C0 850983    1925            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
06C3 850AF0    1926            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
06C6 E50B      1927            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
06C8 C006      1928            push    ar6
06CA C007      1929            push    ar7
06CC C000      1930            push    ar0
06CE C001      1931            push    ar1
06D0 120000    1932            lcall   __divslong
06D3 858200    1933            mov     __mullong_PARM_2,dpl
06D6 858301    1934            mov     (__mullong_PARM_2 + 1),dph
06D9 85F002    1935            mov     (__mullong_PARM_2 + 2),b
06DC F503      1936            mov     (__mullong_PARM_2 + 3),a
06DE D001      1937            pop     ar1
06E0 D000      1938            pop     ar0
06E2 D007      1939            pop     ar7
06E4 D006      1940            pop     ar6
06E6           1941   ;        sensor_test.c:424: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
06E6 8E82      1942            mov     dpl,r6
06E8 8F83      1943            mov     dph,r7
06EA 88F0      1944            mov     b,r0
06EC E9        1945            mov     a,r1
06ED 120000    1946            lcall   __mullong
06F0 858208    1947            mov     _BMM150_compensate_y_sloc0_1_0,dpl
06F3 858309    1948            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
06F6 85F00A    1949            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
06F9 F50B      1950            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
06FB D005      1951            pop     ar5
06FD D004      1952            pop     ar4
06FF E570      1953            mov     a,_dig_xy1
0701 FE        1954            mov     r6,a
0702 33        1955            rlc     a
0703 95E0      1956            subb    a,acc
0705 5401      1957            anl     a,#0x01
0707 A2E0      1958            mov     c,acc.0
0709 CE        1959            xch     a,r6
070A 13        1960            rrc     a
070B CE        1961            xch     a,r6
070C 13        1962            rrc     a
070D CE        1963            xch     a,r6
070E 8E00      1964            mov     __mullong_PARM_2,r6
0710 F501      1965            mov     (__mullong_PARM_2 + 1),a
0712 33        1966            rlc     a
0713 95E0      1967            subb    a,acc
0715 F502      1968            mov     (__mullong_PARM_2 + 2),a
0717 F503      1969            mov     (__mullong_PARM_2 + 3),a
0719           1970   ;        sensor_test.c:425: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
0719 ED        1971            mov     a,r5
071A 33        1972            rlc     a
071B 95E0      1973            subb    a,acc
071D FE        1974            mov     r6,a
071E 8C82      1975            mov     dpl,r4
0720 8D83      1976            mov     dph,r5
0722 8EF0      1977            mov     b,r6
0724 120000    1978            lcall   __mullong
0727 AC82      1979            mov     r4,dpl
0729 AD83      1980            mov     r5,dph
072B AEF0      1981            mov     r6,b
072D FF        1982            mov     r7,a
072E EC        1983            mov     a,r4
072F 2508      1984            add     a,_BMM150_compensate_y_sloc0_1_0
0731 FC        1985            mov     r4,a
0732 ED        1986            mov     a,r5
0733 3509      1987            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
0735 FD        1988            mov     r5,a
0736 EE        1989            mov     a,r6
0737 350A      1990            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
0739 FE        1991            mov     r6,a
073A EF        1992            mov     a,r7
073B 350B      1993            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
073D FF        1994            mov     r7,a
073E 750000    1995            mov     __divslong_PARM_2,#0x00
0741 750102    1996            mov     (__divslong_PARM_2 + 1),#0x02
0744 750200    1997            mov     (__divslong_PARM_2 + 2),#0x00
0747 750300    1998            mov     (__divslong_PARM_2 + 3),#0x00
074A           1999   ;        sensor_test.c:426: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
074A 8C82      2000            mov     dpl,r4
074C 8D83      2001            mov     dph,r5
074E 8EF0      2002            mov     b,r6
0750 EF        2003            mov     a,r7
0751 120000    2004            lcall   __divslong
0754 AC82      2005            mov     r4,dpl
0756 AD83      2006            mov     r5,dph
0758 AEF0      2007            mov     r6,b
075A FF        2008            mov     r7,a
075B E5E8      2009            mov     a,_dig_y2
075D F8        2010            mov     r0,a
075E 33        2011            rlc     a
075F 95E0      2012            subb    a,acc
0761 F9        2013            mov     r1,a
0762 74A0      2014            mov     a,#0xA0
0764 28        2015            add     a,r0
0765 F8        2016            mov     r0,a
0766 E4        2017            clr     a
0767 39        2018            addc    a,r1
0768 8800      2019            mov     __mullong_PARM_2,r0
076A F501      2020            mov     (__mullong_PARM_2 + 1),a
076C 33        2021            rlc     a
076D 95E0      2022            subb    a,acc
076F F502      2023            mov     (__mullong_PARM_2 + 2),a
0771 F503      2024            mov     (__mullong_PARM_2 + 3),a
0773           2025   ;        sensor_test.c:427: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
0773 7410      2026            mov     a,#0x10
0775 2E        2027            add     a,r6
0776 FE        2028            mov     r6,a
0777 E4        2029            clr     a
0778 3F        2030            addc    a,r7
0779 8C82      2031            mov     dpl,r4
077B 8D83      2032            mov     dph,r5
077D 8EF0      2033            mov     b,r6
077F 120000    2034            lcall   __mullong
0782           2035   ;        sensor_test.c:428: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
0782 750000    2036            mov     __divslong_PARM_2,#0x00
0785 750110    2037            mov     (__divslong_PARM_2 + 1),#0x10
0788 750200    2038            mov     (__divslong_PARM_2 + 2),#0x00
078B 750300    2039            mov     (__divslong_PARM_2 + 3),#0x00
078E 120000    2040            lcall   __divslong
0791 858200    2041            mov     __mullong_PARM_2,dpl
0794 858301    2042            mov     (__mullong_PARM_2 + 1),dph
0797 85F002    2043            mov     (__mullong_PARM_2 + 2),b
079A F503      2044            mov     (__mullong_PARM_2 + 3),a
079C D003      2045            pop     ar3
079E D002      2046            pop     ar2
07A0 EB        2047            mov     a,r3
07A1 33        2048            rlc     a
07A2 95E0      2049            subb    a,acc
07A4 FC        2050            mov     r4,a
07A5           2051   ;        sensor_test.c:429: retval = (int16_t)(process_comp_y9 / 8192);
07A5 8A82      2052            mov     dpl,r2
07A7 8B83      2053            mov     dph,r3
07A9 8CF0      2054            mov     b,r4
07AB 120000    2055            lcall   __mullong
07AE 750000    2056            mov     __divslong_PARM_2,#0x00
07B1 750120    2057            mov     (__divslong_PARM_2 + 1),#0x20
07B4 750200    2058            mov     (__divslong_PARM_2 + 2),#0x00
07B7 750300    2059            mov     (__divslong_PARM_2 + 3),#0x00
07BA 120000    2060            lcall   __divslong
07BD AA82      2061            mov     r2,dpl
07BF AB83      2062            mov     r3,dph
07C1           2063   ;        sensor_test.c:430: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
07C1 E528      2064            mov     a,_dig_y1
07C3 FC        2065            mov     r4,a
07C4 33        2066            rlc     a
07C5 95E0      2067            subb    a,acc
07C7 C4        2068            swap    a
07C8 03        2069            rr      a
07C9 54F8      2070            anl     a,#0xf8
07CB CC        2071            xch     a,r4
07CC C4        2072            swap    a
07CD 03        2073            rr      a
07CE CC        2074            xch     a,r4
07CF 6C        2075            xrl     a,r4
07D0 CC        2076            xch     a,r4
07D1 54F8      2077            anl     a,#0xf8
07D3 CC        2078            xch     a,r4
07D4 6C        2079            xrl     a,r4
07D5 FD        2080            mov     r5,a
07D6 EC        2081            mov     a,r4
07D7 2A        2082            add     a,r2
07D8 F582      2083            mov     dpl,a
07DA ED        2084            mov     a,r5
07DB 3B        2085            addc    a,r3
07DC F583      2086            mov     dph,a
07DE 750010    2087            mov     __divsint_PARM_2,#0x10
07E1 E4        2088            clr     a
07E2 F501      2089            mov     (__divsint_PARM_2 + 1),a
07E4 120000    2090            lcall   __divsint
07E7 E582      2091            mov     a,dpl
07E9 8583F0    2092            mov     b,dph
07EC 90C168    2093            mov     dptr,#_BMM150_compensate_y_retval_1_102
07EF F0        2094            movx    @dptr,a
07F0 A3        2095            inc     dptr
07F1 E5F0      2096            mov     a,b
07F3 F0        2097            movx    @dptr,a
07F4 8000      2098            sjmp    L013012?
07F6           2099   L013008?:
07F6           2100   ;        sensor_test.c:434: retval = BMM150_OVERFLOW_OUTPUT;
07F6 90C168    2101            mov     dptr,#_BMM150_compensate_y_retval_1_102
07F9 E4        2102            clr     a
07FA F0        2103            movx    @dptr,a
07FB A3        2104            inc     dptr
07FC 7480      2105            mov     a,#0x80
07FE F0        2106            movx    @dptr,a
07FF 8000      2107            sjmp    L013012?
0801           2108   L013011?:
0801           2109   ;        sensor_test.c:440: retval = BMM150_OVERFLOW_OUTPUT;
0801 90C168    2110            mov     dptr,#_BMM150_compensate_y_retval_1_102
0804 E4        2111            clr     a
0805 F0        2112            movx    @dptr,a
0806 A3        2113            inc     dptr
0807 7480      2114            mov     a,#0x80
0809 F0        2115            movx    @dptr,a
080A           2116   L013012?:
080A           2117   ;        sensor_test.c:443: return retval;
080A 90C168    2118            mov     dptr,#_BMM150_compensate_y_retval_1_102
080D E0        2119            movx    a,@dptr
080E FA        2120            mov     r2,a
080F A3        2121            inc     dptr
0810 E0        2122            movx    a,@dptr
0811 8A82      2123            mov     dpl,r2
0813 F583      2124            mov     dph,a
0815 22        2125            ret
0816           2126   ;------------------------------------------------------------
0816           2127   ;Allocation info for local variables in function 'BMM150_compensate_z'
0816           2128   ;------------------------------------------------------------
0816           2129   ;data_rhall                Allocated with name '_BMM150_compensate_z_PARM_2'
0816           2130   ;mag_data_z                Allocated to registers r2 r3 r4 
0816           2131   ;sloc0                     Allocated with name '_BMM150_compensate_z_sloc0_1_0'
0816           2132   ;sloc1                     Allocated with name '_BMM150_compensate_z_sloc1_1_0'
0816           2133   ;sloc2                     Allocated with name '_BMM150_compensate_z_sloc2_1_0'
0816           2134   ;retval                    Allocated with name '_BMM150_compensate_z_retval_1_111'
0816           2135   ;process_comp_z0           Allocated with name '_BMM150_compensate_z_process_comp_z0_1_111'
0816           2136   ;process_comp_z1           Allocated with name '_BMM150_compensate_z_process_comp_z1_1_111'
0816           2137   ;process_comp_z2           Allocated with name '_BMM150_compensate_z_process_comp_z2_1_111'
0816           2138   ;process_comp_z3           Allocated with name '_BMM150_compensate_z_process_comp_z3_1_111'
0816           2139   ;process_comp_z4           Allocated with name '_BMM150_compensate_z_process_comp_z4_1_111'
0816           2140   ;------------------------------------------------------------
0816           2141   ;        sensor_test.c:446: int16_t BMM150_compensate_z (int16_t *mag_data_z, int16_t *data_rhall){
0816           2142   ;        -----------------------------------------
0816           2143   ;         function BMM150_compensate_z
0816           2144   ;        -----------------------------------------
0816           2145   _BMM150_compensate_z:
0816           2146   ;        sensor_test.c:454: if (*mag_data_z != BMM150_OVERFLOW_ADCVAL_ZAXIS_HALL)
0816 ACF0      2147            mov     r4,b
0818 120000    2148            lcall   __gptrget
081B FA        2149            mov     r2,a
081C A3        2150            inc     dptr
081D 120000    2151            lcall   __gptrget
0820 FB        2152            mov     r3,a
0821 BA0088    2153            cjne    r2,#0x00,L014024?
0824 BBC088    2154            cjne    r3,#0xC0,L014024?
0827 020000    2155            ljmp    L014013?
082A           2156   L014024?:
082A           2157   ;        sensor_test.c:456: if ((dig_z2 != 0) && (dig_z1 != 0) && (*data_rhall != 0) &&
082A E568      2158            mov     a,_dig_z2
082C 7000      2159            jnz     L014025?
082E 020000    2160            ljmp    L014007?
0831           2161   L014025?:
0831 E5A8      2162            mov     a,_dig_z1
0833 7000      2163            jnz     L014026?
0835 020000    2164            ljmp    L014007?
0838           2165   L014026?:
0838 AC20      2166            mov     r4,_BMM150_compensate_z_PARM_2
083A AD21      2167            mov     r5,(_BMM150_compensate_z_PARM_2 + 1)
083C AE22      2168            mov     r6,(_BMM150_compensate_z_PARM_2 + 2)
083E 8C82      2169            mov     dpl,r4
0840 8D83      2170            mov     dph,r5
0842 8EF0      2171            mov     b,r6
0844 120000    2172            lcall   __gptrget
0847 FC        2173            mov     r4,a
0848 A3        2174            inc     dptr
0849 120000    2175            lcall   __gptrget
084C FD        2176            mov     r5,a
084D 4C        2177            orl     a,r4
084E 7000      2178            jnz     L014027?
0850 020000    2179            ljmp    L014007?
0853           2180   L014027?:
0853           2181   ;        sensor_test.c:457: (dig_xyz1 != 0))
0853 E5F0      2182            mov     a,_dig_xyz1
0855 7000      2183            jnz     L014028?
0857 020000    2184            ljmp    L014007?
085A           2185   L014028?:
085A           2186   ;        sensor_test.c:460: process_comp_z0 = ((int16_t)*data_rhall) - ((int16_t)dig_xyz1);
085A E5F0      2187            mov     a,_dig_xyz1
085C FE        2188            mov     r6,a
085D 33        2189            rlc     a
085E 95E0      2190            subb    a,acc
0860 FF        2191            mov     r7,a
0861 EC        2192            mov     a,r4
0862 C3        2193            clr     c
0863 9E        2194            subb    a,r6
0864 F558      2195            mov     _BMM150_compensate_z_sloc0_1_0,a
0866 ED        2196            mov     a,r5
0867 9F        2197            subb    a,r7
0868 F559      2198            mov     (_BMM150_compensate_z_sloc0_1_0 + 1),a
086A           2199   ;        sensor_test.c:461: process_comp_z1 = (((int32_t)dig_z3) * ((int32_t)(process_comp_z0))) / 4;
086A E528      2200            mov     a,_dig_z3
086C F8        2201            mov     r0,a
086D 33        2202            rlc     a
086E 95E0      2203            subb    a,acc
0870 F9        2204            mov     r1,a
0871 FE        2205            mov     r6,a
0872 FF        2206            mov     r7,a
0873 855800    2207            mov     __mullong_PARM_2,_BMM150_compensate_z_sloc0_1_0
0876 E559      2208            mov     a,(_BMM150_compensate_z_sloc0_1_0 + 1)
0878 F501      2209            mov     (__mullong_PARM_2 + 1),a
087A 33        2210            rlc     a
087B 95E0      2211            subb    a,acc
087D F502      2212            mov     (__mullong_PARM_2 + 2),a
087F F503      2213            mov     (__mullong_PARM_2 + 3),a
0881 8882      2214            mov     dpl,r0
0883 8983      2215            mov     dph,r1
0885 8EF0      2216            mov     b,r6
0887 EF        2217            mov     a,r7
0888 C002      2218            push    ar2
088A C003      2219            push    ar3
088C C004      2220            push    ar4
088E C005      2221            push    ar5
0890 120000    2222            lcall   __mullong
0893 AE82      2223            mov     r6,dpl
0895 AF83      2224            mov     r7,dph
0897 A8F0      2225            mov     r0,b
0899 F9        2226            mov     r1,a
089A 750004    2227            mov     __divslong_PARM_2,#0x04
089D E4        2228            clr     a
089E F501      2229            mov     (__divslong_PARM_2 + 1),a
08A0 F502      2230            mov     (__divslong_PARM_2 + 2),a
08A2 F503      2231            mov     (__divslong_PARM_2 + 3),a
08A4           2232   ;        sensor_test.c:462: process_comp_z2 = (((int32_t)(*mag_data_z - dig_z4)) * 32768);
08A4 8E82      2233            mov     dpl,r6
08A6 8F83      2234            mov     dph,r7
08A8 88F0      2235            mov     b,r0
08AA E9        2236            mov     a,r1
08AB 120000    2237            lcall   __divslong
08AE 8582A8    2238            mov     _BMM150_compensate_z_sloc1_1_0,dpl
08B1 8583A9    2239            mov     (_BMM150_compensate_z_sloc1_1_0 + 1),dph
08B4 85F0AA    2240            mov     (_BMM150_compensate_z_sloc1_1_0 + 2),b
08B7 F5AB      2241            mov     (_BMM150_compensate_z_sloc1_1_0 + 3),a
08B9 D005      2242            pop     ar5
08BB D004      2243            pop     ar4
08BD D003      2244            pop     ar3
08BF D002      2245            pop     ar2
08C1 E5B0      2246            mov     a,_dig_z4
08C3 FE        2247            mov     r6,a
08C4 33        2248            rlc     a
08C5 95E0      2249            subb    a,acc
08C7 FF        2250            mov     r7,a
08C8 EA        2251            mov     a,r2
08C9 C3        2252            clr     c
08CA 9E        2253            subb    a,r6
08CB FA        2254            mov     r2,a
08CC EB        2255            mov     a,r3
08CD 9F        2256            subb    a,r7
08CE FB        2257            mov     r3,a
08CF 33        2258            rlc     a
08D0 95E0      2259            subb    a,acc
08D2 8BFA      2260            mov     (_BMM150_compensate_z_sloc2_1_0 + 2),r3
08D4 5401      2261            anl     a,#0x01
08D6 A2E0      2262            mov     c,acc.0
08D8 C5FA      2263            xch     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
08DA 13        2264            rrc     a
08DB C5FA      2265            xch     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
08DD 13        2266            rrc     a
08DE C5FA      2267            xch     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
08E0 F5FB      2268            mov     (_BMM150_compensate_z_sloc2_1_0 + 3),a
08E2 EA        2269            mov     a,r2
08E3 03        2270            rr      a
08E4 5480      2271            anl     a,#0x80
08E6 F5F9      2272            mov     (_BMM150_compensate_z_sloc2_1_0 + 1),a
08E8 EA        2273            mov     a,r2
08E9 C3        2274            clr     c
08EA 13        2275            rrc     a
08EB 45FA      2276            orl     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
08ED F5FA      2277            mov     (_BMM150_compensate_z_sloc2_1_0 + 2),a
08EF 75F800    2278            mov     _BMM150_compensate_z_sloc2_1_0,#0x00
08F2           2279   ;        sensor_test.c:463: process_comp_z3 = ((int32_t)dig_z1) * (((int16_t)*data_rhall) * 2);
08F2 E5A8      2280            mov     a,_dig_z1
08F4 F8        2281            mov     r0,a
08F5 33        2282            rlc     a
08F6 95E0      2283            subb    a,acc
08F8 F9        2284            mov     r1,a
08F9 FA        2285            mov     r2,a
08FA FB        2286            mov     r3,a
08FB ED        2287            mov     a,r5
08FC CC        2288            xch     a,r4
08FD 25E0      2289            add     a,acc
08FF CC        2290            xch     a,r4
0900 33        2291            rlc     a
0901 8C00      2292            mov     __mullong_PARM_2,r4
0903 F501      2293            mov     (__mullong_PARM_2 + 1),a
0905 33        2294            rlc     a
0906 95E0      2295            subb    a,acc
0908 F502      2296            mov     (__mullong_PARM_2 + 2),a
090A F503      2297            mov     (__mullong_PARM_2 + 3),a
090C           2298   ;        sensor_test.c:464: process_comp_z4 = (int16_t)((process_comp_z3 + (32768)) / 65536);
090C 8882      2299            mov     dpl,r0
090E 8983      2300            mov     dph,r1
0910 8AF0      2301            mov     b,r2
0912 EB        2302            mov     a,r3
0913 120000    2303            lcall   __mullong
0916 AA82      2304            mov     r2,dpl
0918 AB83      2305            mov     r3,dph
091A ACF0      2306            mov     r4,b
091C FD        2307            mov     r5,a
091D 7480      2308            mov     a,#0x80
091F 2B        2309            add     a,r3
0920 FB        2310            mov     r3,a
0921 E4        2311            clr     a
0922 3C        2312            addc    a,r4
0923 FC        2313            mov     r4,a
0924 E4        2314            clr     a
0925 3D        2315            addc    a,r5
0926 FD        2316            mov     r5,a
0927 750000    2317            mov     __divslong_PARM_2,#0x00
092A 750100    2318            mov     (__divslong_PARM_2 + 1),#0x00
092D 750201    2319            mov     (__divslong_PARM_2 + 2),#0x01
0930 750300    2320            mov     (__divslong_PARM_2 + 3),#0x00
0933 8A82      2321            mov     dpl,r2
0935 8B83      2322            mov     dph,r3
0937 8CF0      2323            mov     b,r4
0939 ED        2324            mov     a,r5
093A 120000    2325            lcall   __divslong
093D AA82      2326            mov     r2,dpl
093F AB83      2327            mov     r3,dph
0941           2328   ;        sensor_test.c:465: retval = ((process_comp_z2 - process_comp_z1) / (dig_z2 + process_comp_z4));
0941 E5F8      2329            mov     a,_BMM150_compensate_z_sloc2_1_0
0943 C3        2330            clr     c
0944 95A8      2331            subb    a,_BMM150_compensate_z_sloc1_1_0
0946 FC        2332            mov     r4,a
0947 E5F9      2333            mov     a,(_BMM150_compensate_z_sloc2_1_0 + 1)
0949 95A9      2334            subb    a,(_BMM150_compensate_z_sloc1_1_0 + 1)
094B FD        2335            mov     r5,a
094C E5FA      2336            mov     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
094E 95AA      2337            subb    a,(_BMM150_compensate_z_sloc1_1_0 + 2)
0950 FE        2338            mov     r6,a
0951 E5FB      2339            mov     a,(_BMM150_compensate_z_sloc2_1_0 + 3)
0953 95AB      2340            subb    a,(_BMM150_compensate_z_sloc1_1_0 + 3)
0955 FF        2341            mov     r7,a
0956 E568      2342            mov     a,_dig_z2
0958 F8        2343            mov     r0,a
0959 33        2344            rlc     a
095A 95E0      2345            subb    a,acc
095C F9        2346            mov     r1,a
095D EA        2347            mov     a,r2
095E 28        2348            add     a,r0
095F FA        2349            mov     r2,a
0960 EB        2350            mov     a,r3
0961 39        2351            addc    a,r1
0962 8A00      2352            mov     __divslong_PARM_2,r2
0964 F501      2353            mov     (__divslong_PARM_2 + 1),a
0966 33        2354            rlc     a
0967 95E0      2355            subb    a,acc
0969 F502      2356            mov     (__divslong_PARM_2 + 2),a
096B F503      2357            mov     (__divslong_PARM_2 + 3),a
096D 8C82      2358            mov     dpl,r4
096F 8D83      2359            mov     dph,r5
0971 8EF0      2360            mov     b,r6
0973 EF        2361            mov     a,r7
0974 120000    2362            lcall   __divslong
0977 AA82      2363            mov     r2,dpl
0979 AB83      2364            mov     r3,dph
097B ACF0      2365            mov     r4,b
097D FD        2366            mov     r5,a
097E 90C228    2367            mov     dptr,#_BMM150_compensate_z_retval_1_111
0981 EA        2368            mov     a,r2
0982 F0        2369            movx    @dptr,a
0983 A3        2370            inc     dptr
0984 EB        2371            mov     a,r3
0985 F0        2372            movx    @dptr,a
0986 A3        2373            inc     dptr
0987 EC        2374            mov     a,r4
0988 F0        2375            movx    @dptr,a
0989 A3        2376            inc     dptr
098A ED        2377            mov     a,r5
098B F0        2378            movx    @dptr,a
098C           2379   ;        sensor_test.c:468: if (retval > BMM150_POSITIVE_SATURATION_Z)
098C C3        2380            clr     c
098D 74FF      2381            mov     a,#0xFF
098F 9A        2382            subb    a,r2
0990 747F      2383            mov     a,#0x7F
0992 9B        2384            subb    a,r3
0993 E4        2385            clr     a
0994 9C        2386            subb    a,r4
0995 E4        2387            clr     a
0996 6480      2388            xrl     a,#0x80
0998 8DF0      2389            mov     b,r5
099A 63F080    2390            xrl     b,#0x80
099D 95F0      2391            subb    a,b
099F 5000      2392            jnc     L014004?
09A1           2393   ;        sensor_test.c:470: retval = BMM150_POSITIVE_SATURATION_Z;
09A1 90C228    2394            mov     dptr,#_BMM150_compensate_z_retval_1_111
09A4 74FF      2395            mov     a,#0xFF
09A6 F0        2396            movx    @dptr,a
09A7 A3        2397            inc     dptr
09A8 747F      2398            mov     a,#0x7F
09AA F0        2399            movx    @dptr,a
09AB A3        2400            inc     dptr
09AC E4        2401            clr     a
09AD F0        2402            movx    @dptr,a
09AE A3        2403            inc     dptr
09AF F0        2404            movx    @dptr,a
09B0 8000      2405            sjmp    L014005?
09B2           2406   L014004?:
09B2           2407   ;        sensor_test.c:472: else if (retval < BMM150_NEGATIVE_SATURATION_Z)
09B2 C3        2408            clr     c
09B3 EA        2409            mov     a,r2
09B4 9401      2410            subb    a,#0x01
09B6 EB        2411            mov     a,r3
09B7 9480      2412            subb    a,#0x80
09B9 EC        2413            mov     a,r4
09BA 94FF      2414            subb    a,#0xFF
09BC ED        2415            mov     a,r5
09BD 6480      2416            xrl     a,#0x80
09BF 947F      2417            subb    a,#0x7f
09C1 5000      2418            jnc     L014005?
09C3           2419   ;        sensor_test.c:474: retval = BMM150_NEGATIVE_SATURATION_Z;
09C3 90C228    2420            mov     dptr,#_BMM150_compensate_z_retval_1_111
09C6 7401      2421            mov     a,#0x01
09C8 F0        2422            movx    @dptr,a
09C9 A3        2423            inc     dptr
09CA 7480      2424            mov     a,#0x80
09CC F0        2425            movx    @dptr,a
09CD A3        2426            inc     dptr
09CE 74FF      2427            mov     a,#0xFF
09D0 F0        2428            movx    @dptr,a
09D1 A3        2429            inc     dptr
09D2 F0        2430            movx    @dptr,a
09D3           2431   L014005?:
09D3           2432   ;        sensor_test.c:478: retval = retval / 16;
09D3 90C228    2433            mov     dptr,#_BMM150_compensate_z_retval_1_111
09D6 E0        2434            movx    a,@dptr
09D7 FA        2435            mov     r2,a
09D8 A3        2436            inc     dptr
09D9 E0        2437            movx    a,@dptr
09DA FB        2438            mov     r3,a
09DB A3        2439            inc     dptr
09DC E0        2440            movx    a,@dptr
09DD FC        2441            mov     r4,a
09DE A3        2442            inc     dptr
09DF E0        2443            movx    a,@dptr
09E0 FD        2444            mov     r5,a
09E1 750010    2445            mov     __divslong_PARM_2,#0x10
09E4 E4        2446            clr     a
09E5 F501      2447            mov     (__divslong_PARM_2 + 1),a
09E7 F502      2448            mov     (__divslong_PARM_2 + 2),a
09E9 F503      2449            mov     (__divslong_PARM_2 + 3),a
09EB 8A82      2450            mov     dpl,r2
09ED 8B83      2451            mov     dph,r3
09EF 8CF0      2452            mov     b,r4
09F1 ED        2453            mov     a,r5
09F2 120000    2454            lcall   __divslong
09F5 AA82      2455            mov     r2,dpl
09F7 AB83      2456            mov     r3,dph
09F9 ACF0      2457            mov     r4,b
09FB FD        2458            mov     r5,a
09FC 90C228    2459            mov     dptr,#_BMM150_compensate_z_retval_1_111
09FF EA        2460            mov     a,r2
0A00 F0        2461            movx    @dptr,a
0A01 A3        2462            inc     dptr
0A02 EB        2463            mov     a,r3
0A03 F0        2464            movx    @dptr,a
0A04 A3        2465            inc     dptr
0A05 EC        2466            mov     a,r4
0A06 F0        2467            movx    @dptr,a
0A07 A3        2468            inc     dptr
0A08 ED        2469            mov     a,r5
0A09 F0        2470            movx    @dptr,a
0A0A 8000      2471            sjmp    L014014?
0A0C           2472   L014007?:
0A0C           2473   ;        sensor_test.c:482: retval = BMM150_OVERFLOW_OUTPUT;
0A0C 90C228    2474            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A0F E4        2475            clr     a
0A10 F0        2476            movx    @dptr,a
0A11 A3        2477            inc     dptr
0A12 7480      2478            mov     a,#0x80
0A14 F0        2479            movx    @dptr,a
0A15 A3        2480            inc     dptr
0A16 74FF      2481            mov     a,#0xFF
0A18 F0        2482            movx    @dptr,a
0A19 A3        2483            inc     dptr
0A1A F0        2484            movx    @dptr,a
0A1B 8000      2485            sjmp    L014014?
0A1D           2486   L014013?:
0A1D           2487   ;        sensor_test.c:488: retval = BMM150_OVERFLOW_OUTPUT;
0A1D 90C228    2488            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A20 E4        2489            clr     a
0A21 F0        2490            movx    @dptr,a
0A22 A3        2491            inc     dptr
0A23 7480      2492            mov     a,#0x80
0A25 F0        2493            movx    @dptr,a
0A26 A3        2494            inc     dptr
0A27 74FF      2495            mov     a,#0xFF
0A29 F0        2496            movx    @dptr,a
0A2A A3        2497            inc     dptr
0A2B F0        2498            movx    @dptr,a
0A2C           2499   L014014?:
0A2C           2500   ;        sensor_test.c:491: return (int16_t)retval;
0A2C 90C228    2501            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A2F E0        2502            movx    a,@dptr
0A30 FA        2503            mov     r2,a
0A31 A3        2504            inc     dptr
0A32 E0        2505            movx    a,@dptr
0A33 FB        2506            mov     r3,a
0A34 A3        2507            inc     dptr
0A35 E0        2508            movx    a,@dptr
0A36 A3        2509            inc     dptr
0A37 E0        2510            movx    a,@dptr
0A38 8A82      2511            mov     dpl,r2
0A3A 8B83      2512            mov     dph,r3
0A3C 22        2513            ret
0A3D           2514   ;------------------------------------------------------------
0A3D           2515   ;Allocation info for local variables in function 'BMM150_Read_Data'
0A3D           2516   ;------------------------------------------------------------
0A3D           2517   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
0A3D           2518   ;mag_z                     Allocated with name '_BMM150_Read_Data_PARM_3'
0A3D           2519   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_118'
0A3D           2520   ;raw_x_lsb                 Allocated to registers r5 
0A3D           2521   ;raw_x_msb                 Allocated to registers r6 
0A3D           2522   ;raw_y_lsb                 Allocated with name '_BMM150_Read_Data_raw_y_lsb_1_119'
0A3D           2523   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_119'
0A3D           2524   ;raw_z_lsb                 Allocated with name '_BMM150_Read_Data_raw_z_lsb_1_119'
0A3D           2525   ;raw_z_msb                 Allocated with name '_BMM150_Read_Data_raw_z_msb_1_119'
0A3D           2526   ;raw_rhall_lsb             Allocated with name '_BMM150_Read_Data_raw_rhall_lsb_1_119'
0A3D           2527   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_119'
0A3D           2528   ;raw_z                     Allocated with name '_BMM150_Read_Data_raw_z_1_119'
0A3D           2529   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_119'
0A3D           2530   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_119'
0A3D           2531   ;z_val                     Allocated with name '_BMM150_Read_Data_z_val_1_119'
0A3D           2532   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_119'
0A3D           2533   ;z_raw                     Allocated to registers r3 r2 
0A3D           2534   ;------------------------------------------------------------
0A3D           2535   ;        sensor_test.c:494: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y, int16_t *mag_z)
0A3D           2536   ;        -----------------------------------------
0A3D           2537   ;         function BMM150_Read_Data
0A3D           2538   ;        -----------------------------------------
0A3D           2539   _BMM150_Read_Data:
0A3D 858248    2540            mov     _BMM150_Read_Data_mag_x_1_118,dpl
0A40 858349    2541            mov     (_BMM150_Read_Data_mag_x_1_118 + 1),dph
0A43 85F04A    2542            mov     (_BMM150_Read_Data_mag_x_1_118 + 2),b
0A46           2543   ;        sensor_test.c:499: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
0A46 758242    2544            mov     dpl,#0x42
0A49 120000    2545            lcall   _SPI_read
0A4C AD82      2546            mov     r5,dpl
0A4E           2547   ;        sensor_test.c:500: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
0A4E 758243    2548            mov     dpl,#0x43
0A51 C005      2549            push    ar5
0A53 120000    2550            lcall   _SPI_read
0A56 AE82      2551            mov     r6,dpl
0A58           2552   ;        sensor_test.c:501: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
0A58 758244    2553            mov     dpl,#0x44
0A5B C006      2554            push    ar6
0A5D 120000    2555            lcall   _SPI_read
0A60 8582A8    2556            mov     _BMM150_Read_Data_raw_y_lsb_1_119,dpl
0A63           2557   ;        sensor_test.c:502: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
0A63 758245    2558            mov     dpl,#0x45
0A66 120000    2559            lcall   _SPI_read
0A69 858208    2560            mov     _BMM150_Read_Data_raw_y_msb_1_119,dpl
0A6C           2561   ;        sensor_test.c:503: SPI_read_block(BMM150_DATA_X_LSB, raw_z, 2);
0A6C 75B0D8    2562            mov     _SPI_read_block_PARM_2,#_BMM150_Read_Data_raw_z_1_119
0A6F 75B100    2563            mov     (_SPI_read_block_PARM_2 + 1),#0x00
0A72 75B240    2564            mov     (_SPI_read_block_PARM_2 + 2),#0x40
0A75 756002    2565            mov     _SPI_read_block_PARM_3,#0x02
0A78 758242    2566            mov     dpl,#0x42
0A7B 120000    2567            lcall   _SPI_read_block
0A7E           2568   ;        sensor_test.c:506: raw_z_lsb = raw_z[0];
0A7E 85D868    2569            mov     _BMM150_Read_Data_raw_z_lsb_1_119,_BMM150_Read_Data_raw_z_1_119
0A81           2570   ;        sensor_test.c:507: raw_z_msb = raw_z[1];
0A81 85D9C8    2571            mov     _BMM150_Read_Data_raw_z_msb_1_119,(_BMM150_Read_Data_raw_z_1_119 + 0x0001)
0A84           2572   ;        sensor_test.c:508: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
0A84 758248    2573            mov     dpl,#0x48
0A87 120000    2574            lcall   _SPI_read
0A8A 858228    2575            mov     _BMM150_Read_Data_raw_rhall_lsb_1_119,dpl
0A8D           2576   ;        sensor_test.c:509: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
0A8D 758249    2577            mov     dpl,#0x49
0A90 120000    2578            lcall   _SPI_read
0A93 858288    2579            mov     _BMM150_Read_Data_raw_rhall_msb_1_119,dpl
0A96           2580   ;        sensor_test.c:510: SPI_read_block(BMM150_DATA_X_LSB, raw_z, 2);
0A96 75B0D8    2581            mov     _SPI_read_block_PARM_2,#_BMM150_Read_Data_raw_z_1_119
0A99 75B100    2582            mov     (_SPI_read_block_PARM_2 + 1),#0x00
0A9C 75B240    2583            mov     (_SPI_read_block_PARM_2 + 2),#0x40
0A9F 756002    2584            mov     _SPI_read_block_PARM_3,#0x02
0AA2 758242    2585            mov     dpl,#0x42
0AA5 120000    2586            lcall   _SPI_read_block
0AA8 D006      2587            pop     ar6
0AAA D005      2588            pop     ar5
0AAC           2589   ;        sensor_test.c:515: x_val = ((int16_t)((int8_t)raw_x_msb)) * 32 + ((raw_x_lsb & 0xF8) >> 3);
0AAC EE        2590            mov     a,r6
0AAD 33        2591            rlc     a
0AAE 95E0      2592            subb    a,acc
0AB0 C4        2593            swap    a
0AB1 23        2594            rl      a
0AB2 54E0      2595            anl     a,#0xe0
0AB4 CE        2596            xch     a,r6
0AB5 C4        2597            swap    a
0AB6 23        2598            rl      a
0AB7 CE        2599            xch     a,r6
0AB8 6E        2600            xrl     a,r6
0AB9 CE        2601            xch     a,r6
0ABA 54E0      2602            anl     a,#0xe0
0ABC CE        2603            xch     a,r6
0ABD 6E        2604            xrl     a,r6
0ABE FF        2605            mov     r7,a
0ABF 5305F8    2606            anl     ar5,#0xF8
0AC2 ED        2607            mov     a,r5
0AC3 C4        2608            swap    a
0AC4 23        2609            rl      a
0AC5 541F      2610            anl     a,#0x1f
0AC7 FD        2611            mov     r5,a
0AC8 7A00      2612            mov     r2,#0x00
0ACA 2E        2613            add     a,r6
0ACB FB        2614            mov     r3,a
0ACC EA        2615            mov     a,r2
0ACD 3F        2616            addc    a,r7
0ACE FA        2617            mov     r2,a
0ACF 8B28      2618            mov     _BMM150_Read_Data_x_val_1_119,r3
0AD1 8A29      2619            mov     (_BMM150_Read_Data_x_val_1_119 + 1),r2
0AD3           2620   ;        sensor_test.c:516: if (x_val > 4095){
0AD3 C3        2621            clr     c
0AD4 74FF      2622            mov     a,#0xFF
0AD6 9B        2623            subb    a,r3
0AD7 748F      2624            mov     a,#(0x0F ^ 0x80)
0AD9 8AF0      2625            mov     b,r2
0ADB 63F080    2626            xrl     b,#0x80
0ADE 95F0      2627            subb    a,b
0AE0 5000      2628            jnc     L015002?
0AE2           2629   ;        sensor_test.c:517: x_val = x_val - 8192;  // 2's complement sign correction
0AE2 8B28      2630            mov     _BMM150_Read_Data_x_val_1_119,r3
0AE4 EA        2631            mov     a,r2
0AE5 24E0      2632            add     a,#0xe0
0AE7 F529      2633            mov     (_BMM150_Read_Data_x_val_1_119 + 1),a
0AE9           2634   L015002?:
0AE9           2635   ;        sensor_test.c:520: y_val = ((int16_t)((int8_t)raw_y_msb)) * 32 + ((raw_y_lsb & 0xF8) >> 3);
0AE9 E508      2636            mov     a,_BMM150_Read_Data_raw_y_msb_1_119
0AEB FA        2637            mov     r2,a
0AEC 33        2638            rlc     a
0AED 95E0      2639            subb    a,acc
0AEF C4        2640            swap    a
0AF0 23        2641            rl      a
0AF1 54E0      2642            anl     a,#0xe0
0AF3 CA        2643            xch     a,r2
0AF4 C4        2644            swap    a
0AF5 23        2645            rl      a
0AF6 CA        2646            xch     a,r2
0AF7 6A        2647            xrl     a,r2
0AF8 CA        2648            xch     a,r2
0AF9 54E0      2649            anl     a,#0xe0
0AFB CA        2650            xch     a,r2
0AFC 6A        2651            xrl     a,r2
0AFD FB        2652            mov     r3,a
0AFE 74F8      2653            mov     a,#0xF8
0B00 55A8      2654            anl     a,_BMM150_Read_Data_raw_y_lsb_1_119
0B02 C4        2655            swap    a
0B03 23        2656            rl      a
0B04 541F      2657            anl     a,#0x1f
0B06 FC        2658            mov     r4,a
0B07 7D00      2659            mov     r5,#0x00
0B09 2A        2660            add     a,r2
0B0A FA        2661            mov     r2,a
0B0B ED        2662            mov     a,r5
0B0C 3B        2663            addc    a,r3
0B0D FB        2664            mov     r3,a
0B0E 8A78      2665            mov     _BMM150_Read_Data_y_val_1_119,r2
0B10 8B79      2666            mov     (_BMM150_Read_Data_y_val_1_119 + 1),r3
0B12           2667   ;        sensor_test.c:521: if (y_val > 4095) {
0B12 C3        2668            clr     c
0B13 74FF      2669            mov     a,#0xFF
0B15 9A        2670            subb    a,r2
0B16 748F      2671            mov     a,#(0x0F ^ 0x80)
0B18 8BF0      2672            mov     b,r3
0B1A 63F080    2673            xrl     b,#0x80
0B1D 95F0      2674            subb    a,b
0B1F 5000      2675            jnc     L015004?
0B21           2676   ;        sensor_test.c:522: y_val = y_val - 8192;  // 2's complement sign correction
0B21 8A78      2677            mov     _BMM150_Read_Data_y_val_1_119,r2
0B23 EB        2678            mov     a,r3
0B24 24E0      2679            add     a,#0xe0
0B26 F579      2680            mov     (_BMM150_Read_Data_y_val_1_119 + 1),a
0B28           2681   L015004?:
0B28           2682   ;        sensor_test.c:529: z_raw = ((uint16_t)raw_z_msb << 7) | ((raw_z_lsb & 0xFE) >> 1);
0B28 AFC8      2683            mov     r7,_BMM150_Read_Data_raw_z_msb_1_119
0B2A E4        2684            clr     a
0B2B 5401      2685            anl     a,#0x01
0B2D A2E0      2686            mov     c,acc.0
0B2F CF        2687            xch     a,r7
0B30 13        2688            rrc     a
0B31 CF        2689            xch     a,r7
0B32 13        2690            rrc     a
0B33 CF        2691            xch     a,r7
0B34 FA        2692            mov     r2,a
0B35 74FE      2693            mov     a,#0xFE
0B37 5568      2694            anl     a,_BMM150_Read_Data_raw_z_lsb_1_119
0B39 C3        2695            clr     c
0B3A 13        2696            rrc     a
0B3B 7C00      2697            mov     r4,#0x00
0B3D 4F        2698            orl     a,r7
0B3E FB        2699            mov     r3,a
0B3F EC        2700            mov     a,r4
0B40 4A        2701            orl     a,r2
0B41 FA        2702            mov     r2,a
0B42           2703   ;        sensor_test.c:530: if (z_raw > 0x3FFF) z_val = z_raw - 0x8000;
0B42 C3        2704            clr     c
0B43 74FF      2705            mov     a,#0xFF
0B45 9B        2706            subb    a,r3
0B46 743F      2707            mov     a,#0x3F
0B48 9A        2708            subb    a,r2
0B49 5000      2709            jnc     L015006?
0B4B 8BC8      2710            mov     _BMM150_Read_Data_z_val_1_119,r3
0B4D EA        2711            mov     a,r2
0B4E 2480      2712            add     a,#0x80
0B50 F5C9      2713            mov     (_BMM150_Read_Data_z_val_1_119 + 1),a
0B52 8000      2714            sjmp    L015007?
0B54           2715   L015006?:
0B54           2716   ;        sensor_test.c:531: else z_val = z_raw; 
0B54 8BC8      2717            mov     _BMM150_Read_Data_z_val_1_119,r3
0B56 8AC9      2718            mov     (_BMM150_Read_Data_z_val_1_119 + 1),r2
0B58           2719   L015007?:
0B58           2720   ;        sensor_test.c:534: rhall_val = ((uint16_t)raw_rhall_msb) * 64 + (raw_rhall_lsb & 0x3F); 
0B58 AF88      2721            mov     r7,_BMM150_Read_Data_raw_rhall_msb_1_119
0B5A E4        2722            clr     a
0B5B 5403      2723            anl     a,#0x03
0B5D A2E0      2724            mov     c,acc.0
0B5F CF        2725            xch     a,r7
0B60 13        2726            rrc     a
0B61 CF        2727            xch     a,r7
0B62 13        2728            rrc     a
0B63 A2E0      2729            mov     c,acc.0
0B65 CF        2730            xch     a,r7
0B66 13        2731            rrc     a
0B67 CF        2732            xch     a,r7
0B68 13        2733            rrc     a
0B69 CF        2734            xch     a,r7
0B6A FA        2735            mov     r2,a
0B6B 743F      2736            mov     a,#0x3F
0B6D 5528      2737            anl     a,_BMM150_Read_Data_raw_rhall_lsb_1_119
0B6F 7C00      2738            mov     r4,#0x00
0B71 2F        2739            add     a,r7
0B72 F528      2740            mov     _BMM150_Read_Data_rhall_val_1_119,a
0B74 EC        2741            mov     a,r4
0B75 3A        2742            addc    a,r2
0B76 F529      2743            mov     (_BMM150_Read_Data_rhall_val_1_119 + 1),a
0B78           2744   ;        sensor_test.c:538: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
0B78 75C028    2745            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_119
0B7B 75C100    2746            mov     (_BMM150_compensate_x_PARM_2 + 1),#0x00
0B7E 75C240    2747            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x40
0B81 90BE28    2748            mov     dptr,#_BMM150_Read_Data_x_val_1_119
0B84 75F040    2749            mov     b,#0x40
0B87 120000    2750            lcall   _BMM150_compensate_x
0B8A AA82      2751            mov     r2,dpl
0B8C AB83      2752            mov     r3,dph
0B8E 854882    2753            mov     dpl,_BMM150_Read_Data_mag_x_1_118
0B91 854983    2754            mov     dph,(_BMM150_Read_Data_mag_x_1_118 + 1)
0B94 854AF0    2755            mov     b,(_BMM150_Read_Data_mag_x_1_118 + 2)
0B97 EA        2756            mov     a,r2
0B98 120000    2757            lcall   __gptrput
0B9B A3        2758            inc     dptr
0B9C EB        2759            mov     a,r3
0B9D 120000    2760            lcall   __gptrput
0BA0           2761   ;        sensor_test.c:539: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
0BA0 AAD0      2762            mov     r2,_BMM150_Read_Data_PARM_2
0BA2 ABD1      2763            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
0BA4 ACD2      2764            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
0BA6 757028    2765            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_119
0BA9 757100    2766            mov     (_BMM150_compensate_y_PARM_2 + 1),#0x00
0BAC 757240    2767            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x40
0BAF 90BE78    2768            mov     dptr,#_BMM150_Read_Data_y_val_1_119
0BB2 75F040    2769            mov     b,#0x40
0BB5 C002      2770            push    ar2
0BB7 C003      2771            push    ar3
0BB9 C004      2772            push    ar4
0BBB 120000    2773            lcall   _BMM150_compensate_y
0BBE AD82      2774            mov     r5,dpl
0BC0 AE83      2775            mov     r6,dph
0BC2 D004      2776            pop     ar4
0BC4 D003      2777            pop     ar3
0BC6 D002      2778            pop     ar2
0BC8 8A82      2779            mov     dpl,r2
0BCA 8B83      2780            mov     dph,r3
0BCC 8CF0      2781            mov     b,r4
0BCE ED        2782            mov     a,r5
0BCF 120000    2783            lcall   __gptrput
0BD2 A3        2784            inc     dptr
0BD3 EE        2785            mov     a,r6
0BD4 120000    2786            lcall   __gptrput
0BD7           2787   ;        sensor_test.c:540: *mag_z = BMM150_compensate_z(&z_val, &rhall_val);
0BD7 AA80      2788            mov     r2,_BMM150_Read_Data_PARM_3
0BD9 AB81      2789            mov     r3,(_BMM150_Read_Data_PARM_3 + 1)
0BDB AC82      2790            mov     r4,(_BMM150_Read_Data_PARM_3 + 2)
0BDD 752028    2791            mov     _BMM150_compensate_z_PARM_2,#_BMM150_Read_Data_rhall_val_1_119
0BE0 752100    2792            mov     (_BMM150_compensate_z_PARM_2 + 1),#0x00
0BE3 752240    2793            mov     (_BMM150_compensate_z_PARM_2 + 2),#0x40
0BE6 90BEC8    2794            mov     dptr,#_BMM150_Read_Data_z_val_1_119
0BE9 75F040    2795            mov     b,#0x40
0BEC C002      2796            push    ar2
0BEE C003      2797            push    ar3
0BF0 C004      2798            push    ar4
0BF2 120000    2799            lcall   _BMM150_compensate_z
0BF5 AD82      2800            mov     r5,dpl
0BF7 AE83      2801            mov     r6,dph
0BF9 D004      2802            pop     ar4
0BFB D003      2803            pop     ar3
0BFD D002      2804            pop     ar2
0BFF 8A82      2805            mov     dpl,r2
0C01 8B83      2806            mov     dph,r3
0C03 8CF0      2807            mov     b,r4
0C05 ED        2808            mov     a,r5
0C06 120000    2809            lcall   __gptrput
0C09 A3        2810            inc     dptr
0C0A EE        2811            mov     a,r6
0C0B 020000    2812            ljmp    __gptrput
0C0E           2813   ;------------------------------------------------------------
0C0E           2814   ;Allocation info for local variables in function 'main'
0C0E           2815   ;------------------------------------------------------------
0C0E           2816   ;mag_x                     Allocated with name '_main_mag_x_1_123'
0C0E           2817   ;mag_y                     Allocated with name '_main_mag_y_1_123'
0C0E           2818   ;mag_z                     Allocated with name '_main_mag_z_1_123'
0C0E           2819   ;angle                     Allocated with name '_main_angle_1_123'
0C0E           2820   ;sum_x                     Allocated with name '_main_sum_x_1_123'
0C0E           2821   ;sum_y                     Allocated with name '_main_sum_y_1_123'
0C0E           2822   ;alpha                     Allocated with name '_main_alpha_1_123'
0C0E           2823   ;avg_angle                 Allocated with name '_main_avg_angle_1_123'
0C0E           2824   ;smoothed_angle            Allocated with name '_main_smoothed_angle_1_123'
0C0E           2825   ;------------------------------------------------------------
0C0E           2826   ;        sensor_test.c:546: void main (void)
0C0E           2827   ;        -----------------------------------------
0C0E           2828   ;         function main
0C0E           2829   ;        -----------------------------------------
0C0E           2830   _main:
0C0E           2831   ;        sensor_test.c:562: Set_Pin_Output(0x03); 
0C0E 758203    2832            mov     dpl,#0x03
0C11 120000    2833            lcall   _Set_Pin_Output
0C14           2834   ;        sensor_test.c:563: BMM150_Init();
0C14 120000    2835            lcall   _BMM150_Init
0C17           2836   ;        sensor_test.c:565: waitms(500);
0C17 9001F4    2837            mov     dptr,#0x01F4
0C1A 120000    2838            lcall   _waitms
0C1D           2839   ;        sensor_test.c:566: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0C1D 7408      2840            mov     a,#__str_3
0C1F C0E0      2841            push    acc
0C21 74D8      2842            mov     a,#(__str_3 >> 8)
0C23 C0E0      2843            push    acc
0C25 7480      2844            mov     a,#0x80
0C27 C0E0      2845            push    acc
0C29 120000    2846            lcall   _printf
0C2C 1581      2847            dec     sp
0C2E 1581      2848            dec     sp
0C30 1581      2849            dec     sp
0C32           2850   ;        sensor_test.c:570: __FILE__, __DATE__, __TIME__);
0C32           2851   ;        sensor_test.c:569: "Compiled: %s, %s\n\n",
0C32 7448      2852            mov     a,#__str_7
0C34 C0E0      2853            push    acc
0C36 74D8      2854            mov     a,#(__str_7 >> 8)
0C38 C0E0      2855            push    acc
0C3A 7480      2856            mov     a,#0x80
0C3C C0E0      2857            push    acc
0C3E 7488      2858            mov     a,#__str_6
0C40 C0E0      2859            push    acc
0C42 74D8      2860            mov     a,#(__str_6 >> 8)
0C44 C0E0      2861            push    acc
0C46 7480      2862            mov     a,#0x80
0C48 C0E0      2863            push    acc
0C4A 74C8      2864            mov     a,#__str_5
0C4C C0E0      2865            push    acc
0C4E 74D8      2866            mov     a,#(__str_5 >> 8)
0C50 C0E0      2867            push    acc
0C52 7480      2868            mov     a,#0x80
0C54 C0E0      2869            push    acc
0C56 7408      2870            mov     a,#__str_4
0C58 C0E0      2871            push    acc
0C5A 74D9      2872            mov     a,#(__str_4 >> 8)
0C5C C0E0      2873            push    acc
0C5E 7480      2874            mov     a,#0x80
0C60 C0E0      2875            push    acc
0C62 120000    2876            lcall   _printf
0C65 E581      2877            mov     a,sp
0C67 24F4      2878            add     a,#0xf4
0C69 F581      2879            mov     sp,a
0C6B           2880   ;        sensor_test.c:572: while(1)
0C6B           2881   L016002?:
0C6B           2882   ;        sensor_test.c:595: BMM150_Read_Data(&mag_x, &mag_y, &mag_z);
0C6B 75D0C8    2883            mov     _BMM150_Read_Data_PARM_2,#_main_mag_y_1_123
0C6E 75D1C2    2884            mov     (_BMM150_Read_Data_PARM_2 + 1),#(_main_mag_y_1_123 >> 8)
0C71 75D200    2885            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x00
0C74 758018    2886            mov     _BMM150_Read_Data_PARM_3,#_main_mag_z_1_123
0C77 7581C3    2887            mov     (_BMM150_Read_Data_PARM_3 + 1),#(_main_mag_z_1_123 >> 8)
0C7A 758200    2888            mov     (_BMM150_Read_Data_PARM_3 + 2),#0x00
0C7D 90C278    2889            mov     dptr,#_main_mag_x_1_123
0C80 75F000    2890            mov     b,#0x00
0C83 120000    2891            lcall   _BMM150_Read_Data
0C86           2892   ;        sensor_test.c:596: angle = atan2f((float)mag_y, (float)mag_x) * 180.0 / M_PI;
0C86 90C2C8    2893            mov     dptr,#_main_mag_y_1_123
0C89 E0        2894            movx    a,@dptr
0C8A FA        2895            mov     r2,a
0C8B A3        2896            inc     dptr
0C8C E0        2897            movx    a,@dptr
0C8D FB        2898            mov     r3,a
0C8E 8A82      2899            mov     dpl,r2
0C90 8B83      2900            mov     dph,r3
0C92 120000    2901            lcall   ___sint2fs
0C95 AA82      2902            mov     r2,dpl
0C97 AB83      2903            mov     r3,dph
0C99 ACF0      2904            mov     r4,b
0C9B FD        2905            mov     r5,a
0C9C 90C278    2906            mov     dptr,#_main_mag_x_1_123
0C9F E0        2907            movx    a,@dptr
0CA0 FE        2908            mov     r6,a
0CA1 A3        2909            inc     dptr
0CA2 E0        2910            movx    a,@dptr
0CA3 FF        2911            mov     r7,a
0CA4 8E82      2912            mov     dpl,r6
0CA6 8F83      2913            mov     dph,r7
0CA8 C002      2914            push    ar2
0CAA C003      2915            push    ar3
0CAC C004      2916            push    ar4
0CAE C005      2917            push    ar5
0CB0 120000    2918            lcall   ___sint2fs
0CB3 858200    2919            mov     _atan2f_PARM_2,dpl
0CB6 858301    2920            mov     (_atan2f_PARM_2 + 1),dph
0CB9 85F002    2921            mov     (_atan2f_PARM_2 + 2),b
0CBC F503      2922            mov     (_atan2f_PARM_2 + 3),a
0CBE D005      2923            pop     ar5
0CC0 D004      2924            pop     ar4
0CC2 D003      2925            pop     ar3
0CC4 D002      2926            pop     ar2
0CC6 8A82      2927            mov     dpl,r2
0CC8 8B83      2928            mov     dph,r3
0CCA 8CF0      2929            mov     b,r4
0CCC ED        2930            mov     a,r5
0CCD 120000    2931            lcall   _atan2f
0CD0           2932   ;        sensor_test.c:598: printf("%d,%d\r\n", mag_x, mag_y);
0CD0 90C2C8    2933            mov     dptr,#_main_mag_y_1_123
0CD3 E0        2934            movx    a,@dptr
0CD4 C0E0      2935            push    acc
0CD6 A3        2936            inc     dptr
0CD7 E0        2937            movx    a,@dptr
0CD8 C0E0      2938            push    acc
0CDA 90C278    2939            mov     dptr,#_main_mag_x_1_123
0CDD E0        2940            movx    a,@dptr
0CDE C0E0      2941            push    acc
0CE0 A3        2942            inc     dptr
0CE1 E0        2943            movx    a,@dptr
0CE2 C0E0      2944            push    acc
0CE4 7448      2945            mov     a,#__str_8
0CE6 C0E0      2946            push    acc
0CE8 74DA      2947            mov     a,#(__str_8 >> 8)
0CEA C0E0      2948            push    acc
0CEC 7480      2949            mov     a,#0x80
0CEE C0E0      2950            push    acc
0CF0 120000    2951            lcall   _printf
0CF3 E581      2952            mov     a,sp
0CF5 24F9      2953            add     a,#0xf9
0CF7 F581      2954            mov     sp,a
0CF9           2955   ;        sensor_test.c:600: waitms(100);
0CF9 900064    2956            mov     dptr,#0x0064
0CFC 120000    2957            lcall   _waitms
0CFF 020000    2958            ljmp    L016002?
0D02           2959            rseg R_CSEG
0D02           2960   
0000           2961            rseg R_XINIT
0000           2962   
0000           2963            rseg R_CONST
0000           2964   __str_0:
0000 4572726F  2965            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
0035 0D        2966            db 0x0D
0036 0A        2967            db 0x0A
0037 00        2968            db 0x00
0038           2969   __str_1:
0038 50726573  2970            db 'Press restart to check again!'
     73207265
     73746172
     7420746F
     20636865
     636B2061
     6761696E
     21
0055 0D        2971            db 0x0D
0056 00        2972            db 0x00
0057           2973   __str_2:
0057 424D4D31  2974            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
0087 0D        2975            db 0x0D
0088 0A        2976            db 0x0A
0089 00        2977            db 0x00
008A           2978   __str_3:
008A 1B        2979            db 0x1B
008B 5B324A    2980            db '[2J'
008E 00        2981            db 0x00
008F           2982   __str_4:
008F 45464D38  2983            db 'EFM8LB1 SPI/BMM150 test program'
     4C423120
     5350492F
     424D4D31
     35302074
     65737420
     70726F67
     72616D
00AE 0A        2984            db 0x0A
00AF 46696C65  2985            db 'File: %s'
     3A202573
00B7 0A        2986            db 0x0A
00B8 436F6D70  2987            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
00C8 0A        2988            db 0x0A
00C9 0A        2989            db 0x0A
00CA 00        2990            db 0x00
00CB           2991   __str_5:
00CB 73656E73  2992            db 'sensor_test.c'
     6F725F74
     6573742E
     63
00D8 00        2993            db 0x00
00D9           2994   __str_6:
00D9 4D617220  2995            db 'Mar 26 2025'
     32362032
     303235
00E4 00        2996            db 0x00
00E5           2997   __str_7:
00E5 31333A30  2998            db '13:00:43'
     303A3433
00ED 00        2999            db 0x00
00EE           3000   __str_8:
00EE 25642C25  3001            db '%d,%d'
     64
00F3 0D        3002            db 0x0D
00F4 0A        3003            db 0x0A
00F5 00        3004            db 0x00
00F6           3005   
0003           3006            CSEG
0003           3007   
0003           3008   end
