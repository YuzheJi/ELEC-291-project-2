0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Mar 26 02:10:34 2025
0000              5   ;--------------------------------------------------------
                  5   $name sensor_test
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _BMM150_Read_Data
0000             29            public _BMM150_compensate_z
0000             30            public _BMM150_compensate_y
0000             31            public _BMM150_compensate_x
0000             32            public _BMM150_Init
0000             33            public _BMM150_Read_Trim_Registers
0000             34            public _SPI_write
0000             35            public _SPI_read_block
0000             36            public _SPI_read
0000             37            public _SPI_transfer
0000             38            public _waitms
0000             39            public _Timer3us
0000             40            public _Set_Pin_Output
0000             41            public __c51_external_startup
0000             42            public _BMM150_Read_Data_PARM_3
0000             43            public _BMM150_Read_Data_PARM_2
0000             44            public _BMM150_compensate_z_PARM_2
0000             45            public _BMM150_compensate_y_PARM_2
0000             46            public _BMM150_compensate_x_PARM_2
0000             47            public _SPI_write_PARM_2
0000             48            public _SPI_read_block_PARM_3
0000             49            public _SPI_read_block_PARM_2
0000             50            public _dig_xyz1
0000             51            public _dig_xy2
0000             52            public _dig_xy1
0000             53            public _dig_z4
0000             54            public _dig_z3
0000             55            public _dig_z2
0000             56            public _dig_z1
0000             57            public _dig_y2
0000             58            public _dig_y1
0000             59            public _dig_x2
0000             60            public _dig_x1
0000             61   ;--------------------------------------------------------
0000             62   ; Special Function Registers
0000             63   ;--------------------------------------------------------
0000             64   _ACC            DATA 0xe0
0000             65   _ADC0ASAH       DATA 0xb6
0000             66   _ADC0ASAL       DATA 0xb5
0000             67   _ADC0ASCF       DATA 0xa1
0000             68   _ADC0ASCT       DATA 0xc7
0000             69   _ADC0CF0        DATA 0xbc
0000             70   _ADC0CF1        DATA 0xb9
0000             71   _ADC0CF2        DATA 0xdf
0000             72   _ADC0CN0        DATA 0xe8
0000             73   _ADC0CN1        DATA 0xb2
0000             74   _ADC0CN2        DATA 0xb3
0000             75   _ADC0GTH        DATA 0xc4
0000             76   _ADC0GTL        DATA 0xc3
0000             77   _ADC0H          DATA 0xbe
0000             78   _ADC0L          DATA 0xbd
0000             79   _ADC0LTH        DATA 0xc6
0000             80   _ADC0LTL        DATA 0xc5
0000             81   _ADC0MX         DATA 0xbb
0000             82   _B              DATA 0xf0
0000             83   _CKCON0         DATA 0x8e
0000             84   _CKCON1         DATA 0xa6
0000             85   _CLEN0          DATA 0xc6
0000             86   _CLIE0          DATA 0xc7
0000             87   _CLIF0          DATA 0xe8
0000             88   _CLKSEL         DATA 0xa9
0000             89   _CLOUT0         DATA 0xd1
0000             90   _CLU0CF         DATA 0xb1
0000             91   _CLU0FN         DATA 0xaf
0000             92   _CLU0MX         DATA 0x84
0000             93   _CLU1CF         DATA 0xb3
0000             94   _CLU1FN         DATA 0xb2
0000             95   _CLU1MX         DATA 0x85
0000             96   _CLU2CF         DATA 0xb6
0000             97   _CLU2FN         DATA 0xb5
0000             98   _CLU2MX         DATA 0x91
0000             99   _CLU3CF         DATA 0xbf
0000            100   _CLU3FN         DATA 0xbe
0000            101   _CLU3MX         DATA 0xae
0000            102   _CMP0CN0        DATA 0x9b
0000            103   _CMP0CN1        DATA 0x99
0000            104   _CMP0MD         DATA 0x9d
0000            105   _CMP0MX         DATA 0x9f
0000            106   _CMP1CN0        DATA 0xbf
0000            107   _CMP1CN1        DATA 0xac
0000            108   _CMP1MD         DATA 0xab
0000            109   _CMP1MX         DATA 0xaa
0000            110   _CRC0CN0        DATA 0xce
0000            111   _CRC0CN1        DATA 0x86
0000            112   _CRC0CNT        DATA 0xd3
0000            113   _CRC0DAT        DATA 0xcb
0000            114   _CRC0FLIP       DATA 0xcf
0000            115   _CRC0IN         DATA 0xca
0000            116   _CRC0ST         DATA 0xd2
0000            117   _DAC0CF0        DATA 0x91
0000            118   _DAC0CF1        DATA 0x92
0000            119   _DAC0H          DATA 0x85
0000            120   _DAC0L          DATA 0x84
0000            121   _DAC1CF0        DATA 0x93
0000            122   _DAC1CF1        DATA 0x94
0000            123   _DAC1H          DATA 0x8a
0000            124   _DAC1L          DATA 0x89
0000            125   _DAC2CF0        DATA 0x95
0000            126   _DAC2CF1        DATA 0x96
0000            127   _DAC2H          DATA 0x8c
0000            128   _DAC2L          DATA 0x8b
0000            129   _DAC3CF0        DATA 0x9a
0000            130   _DAC3CF1        DATA 0x9c
0000            131   _DAC3H          DATA 0x8e
0000            132   _DAC3L          DATA 0x8d
0000            133   _DACGCF0        DATA 0x88
0000            134   _DACGCF1        DATA 0x98
0000            135   _DACGCF2        DATA 0xa2
0000            136   _DERIVID        DATA 0xad
0000            137   _DEVICEID       DATA 0xb5
0000            138   _DPH            DATA 0x83
0000            139   _DPL            DATA 0x82
0000            140   _EIE1           DATA 0xe6
0000            141   _EIE2           DATA 0xf3
0000            142   _EIP1           DATA 0xbb
0000            143   _EIP1H          DATA 0xee
0000            144   _EIP2           DATA 0xed
0000            145   _EIP2H          DATA 0xf6
0000            146   _EMI0CN         DATA 0xe7
0000            147   _FLKEY          DATA 0xb7
0000            148   _HFO0CAL        DATA 0xc7
0000            149   _HFO1CAL        DATA 0xd6
0000            150   _HFOCN          DATA 0xef
0000            151   _I2C0ADM        DATA 0xff
0000            152   _I2C0CN0        DATA 0xba
0000            153   _I2C0DIN        DATA 0xbc
0000            154   _I2C0DOUT       DATA 0xbb
0000            155   _I2C0FCN0       DATA 0xad
0000            156   _I2C0FCN1       DATA 0xab
0000            157   _I2C0FCT        DATA 0xf5
0000            158   _I2C0SLAD       DATA 0xbd
0000            159   _I2C0STAT       DATA 0xb9
0000            160   _IE             DATA 0xa8
0000            161   _IP             DATA 0xb8
0000            162   _IPH            DATA 0xf2
0000            163   _IT01CF         DATA 0xe4
0000            164   _LFO0CN         DATA 0xb1
0000            165   _P0             DATA 0x80
0000            166   _P0MASK         DATA 0xfe
0000            167   _P0MAT          DATA 0xfd
0000            168   _P0MDIN         DATA 0xf1
0000            169   _P0MDOUT        DATA 0xa4
0000            170   _P0SKIP         DATA 0xd4
0000            171   _P1             DATA 0x90
0000            172   _P1MASK         DATA 0xee
0000            173   _P1MAT          DATA 0xed
0000            174   _P1MDIN         DATA 0xf2
0000            175   _P1MDOUT        DATA 0xa5
0000            176   _P1SKIP         DATA 0xd5
0000            177   _P2             DATA 0xa0
0000            178   _P2MASK         DATA 0xfc
0000            179   _P2MAT          DATA 0xfb
0000            180   _P2MDIN         DATA 0xf3
0000            181   _P2MDOUT        DATA 0xa6
0000            182   _P2SKIP         DATA 0xcc
0000            183   _P3             DATA 0xb0
0000            184   _P3MDIN         DATA 0xf4
0000            185   _P3MDOUT        DATA 0x9c
0000            186   _PCA0CENT       DATA 0x9e
0000            187   _PCA0CLR        DATA 0x9c
0000            188   _PCA0CN0        DATA 0xd8
0000            189   _PCA0CPH0       DATA 0xfc
0000            190   _PCA0CPH1       DATA 0xea
0000            191   _PCA0CPH2       DATA 0xec
0000            192   _PCA0CPH3       DATA 0xf5
0000            193   _PCA0CPH4       DATA 0x85
0000            194   _PCA0CPH5       DATA 0xde
0000            195   _PCA0CPL0       DATA 0xfb
0000            196   _PCA0CPL1       DATA 0xe9
0000            197   _PCA0CPL2       DATA 0xeb
0000            198   _PCA0CPL3       DATA 0xf4
0000            199   _PCA0CPL4       DATA 0x84
0000            200   _PCA0CPL5       DATA 0xdd
0000            201   _PCA0CPM0       DATA 0xda
0000            202   _PCA0CPM1       DATA 0xdb
0000            203   _PCA0CPM2       DATA 0xdc
0000            204   _PCA0CPM3       DATA 0xae
0000            205   _PCA0CPM4       DATA 0xaf
0000            206   _PCA0CPM5       DATA 0xcc
0000            207   _PCA0H          DATA 0xfa
0000            208   _PCA0L          DATA 0xf9
0000            209   _PCA0MD         DATA 0xd9
0000            210   _PCA0POL        DATA 0x96
0000            211   _PCA0PWM        DATA 0xf7
0000            212   _PCON0          DATA 0x87
0000            213   _PCON1          DATA 0xcd
0000            214   _PFE0CN         DATA 0xc1
0000            215   _PRTDRV         DATA 0xf6
0000            216   _PSCTL          DATA 0x8f
0000            217   _PSTAT0         DATA 0xaa
0000            218   _PSW            DATA 0xd0
0000            219   _REF0CN         DATA 0xd1
0000            220   _REG0CN         DATA 0xc9
0000            221   _REVID          DATA 0xb6
0000            222   _RSTSRC         DATA 0xef
0000            223   _SBCON1         DATA 0x94
0000            224   _SBRLH1         DATA 0x96
0000            225   _SBRLL1         DATA 0x95
0000            226   _SBUF           DATA 0x99
0000            227   _SBUF0          DATA 0x99
0000            228   _SBUF1          DATA 0x92
0000            229   _SCON           DATA 0x98
0000            230   _SCON0          DATA 0x98
0000            231   _SCON1          DATA 0xc8
0000            232   _SFRPAGE        DATA 0xa7
0000            233   _SFRPGCN        DATA 0xbc
0000            234   _SFRSTACK       DATA 0xd7
0000            235   _SMB0ADM        DATA 0xd6
0000            236   _SMB0ADR        DATA 0xd7
0000            237   _SMB0CF         DATA 0xc1
0000            238   _SMB0CN0        DATA 0xc0
0000            239   _SMB0DAT        DATA 0xc2
0000            240   _SMB0FCN0       DATA 0xc3
0000            241   _SMB0FCN1       DATA 0xc4
0000            242   _SMB0FCT        DATA 0xef
0000            243   _SMB0RXLN       DATA 0xc5
0000            244   _SMB0TC         DATA 0xac
0000            245   _SMOD1          DATA 0x93
0000            246   _SP             DATA 0x81
0000            247   _SPI0CFG        DATA 0xa1
0000            248   _SPI0CKR        DATA 0xa2
0000            249   _SPI0CN0        DATA 0xf8
0000            250   _SPI0DAT        DATA 0xa3
0000            251   _SPI0FCN0       DATA 0x9a
0000            252   _SPI0FCN1       DATA 0x9b
0000            253   _SPI0FCT        DATA 0xf7
0000            254   _SPI0PCF        DATA 0xdf
0000            255   _TCON           DATA 0x88
0000            256   _TH0            DATA 0x8c
0000            257   _TH1            DATA 0x8d
0000            258   _TL0            DATA 0x8a
0000            259   _TL1            DATA 0x8b
0000            260   _TMOD           DATA 0x89
0000            261   _TMR2CN0        DATA 0xc8
0000            262   _TMR2CN1        DATA 0xfd
0000            263   _TMR2H          DATA 0xcf
0000            264   _TMR2L          DATA 0xce
0000            265   _TMR2RLH        DATA 0xcb
0000            266   _TMR2RLL        DATA 0xca
0000            267   _TMR3CN0        DATA 0x91
0000            268   _TMR3CN1        DATA 0xfe
0000            269   _TMR3H          DATA 0x95
0000            270   _TMR3L          DATA 0x94
0000            271   _TMR3RLH        DATA 0x93
0000            272   _TMR3RLL        DATA 0x92
0000            273   _TMR4CN0        DATA 0x98
0000            274   _TMR4CN1        DATA 0xff
0000            275   _TMR4H          DATA 0xa5
0000            276   _TMR4L          DATA 0xa4
0000            277   _TMR4RLH        DATA 0xa3
0000            278   _TMR4RLL        DATA 0xa2
0000            279   _TMR5CN0        DATA 0xc0
0000            280   _TMR5CN1        DATA 0xf1
0000            281   _TMR5H          DATA 0xd5
0000            282   _TMR5L          DATA 0xd4
0000            283   _TMR5RLH        DATA 0xd3
0000            284   _TMR5RLL        DATA 0xd2
0000            285   _UART0PCF       DATA 0xd9
0000            286   _UART1FCN0      DATA 0x9d
0000            287   _UART1FCN1      DATA 0xd8
0000            288   _UART1FCT       DATA 0xfa
0000            289   _UART1LIN       DATA 0x9e
0000            290   _UART1PCF       DATA 0xda
0000            291   _VDM0CN         DATA 0xff
0000            292   _WDTCN          DATA 0x97
0000            293   _XBR0           DATA 0xe1
0000            294   _XBR1           DATA 0xe2
0000            295   _XBR2           DATA 0xe3
0000            296   _XOSC0CN        DATA 0x86
0000            297   _DPTR           DATA 0x8382
0000            298   _TMR2RL         DATA 0xcbca
0000            299   _TMR3RL         DATA 0x9392
0000            300   _TMR4RL         DATA 0xa3a2
0000            301   _TMR5RL         DATA 0xd3d2
0000            302   _TMR0           DATA 0x8c8a
0000            303   _TMR1           DATA 0x8d8b
0000            304   _TMR2           DATA 0xcfce
0000            305   _TMR3           DATA 0x9594
0000            306   _TMR4           DATA 0xa5a4
0000            307   _TMR5           DATA 0xd5d4
0000            308   _SBRL1          DATA 0x9695
0000            309   _PCA0           DATA 0xfaf9
0000            310   _PCA0CP0        DATA 0xfcfb
0000            311   _PCA0CP1        DATA 0xeae9
0000            312   _PCA0CP2        DATA 0xeceb
0000            313   _PCA0CP3        DATA 0xf5f4
0000            314   _PCA0CP4        DATA 0x8584
0000            315   _PCA0CP5        DATA 0xdedd
0000            316   _ADC0ASA        DATA 0xb6b5
0000            317   _ADC0GT         DATA 0xc4c3
0000            318   _ADC0           DATA 0xbebd
0000            319   _ADC0LT         DATA 0xc6c5
0000            320   _DAC0           DATA 0x8584
0000            321   _DAC1           DATA 0x8a89
0000            322   _DAC2           DATA 0x8c8b
0000            323   _DAC3           DATA 0x8e8d
0000            324   ;--------------------------------------------------------
0000            325   ; special function bits
0000            326   ;--------------------------------------------------------
0000            327   _ACC_0          BIT 0xe0
0000            328   _ACC_1          BIT 0xe1
0000            329   _ACC_2          BIT 0xe2
0000            330   _ACC_3          BIT 0xe3
0000            331   _ACC_4          BIT 0xe4
0000            332   _ACC_5          BIT 0xe5
0000            333   _ACC_6          BIT 0xe6
0000            334   _ACC_7          BIT 0xe7
0000            335   _TEMPE          BIT 0xe8
0000            336   _ADGN0          BIT 0xe9
0000            337   _ADGN1          BIT 0xea
0000            338   _ADWINT         BIT 0xeb
0000            339   _ADBUSY         BIT 0xec
0000            340   _ADINT          BIT 0xed
0000            341   _IPOEN          BIT 0xee
0000            342   _ADEN           BIT 0xef
0000            343   _B_0            BIT 0xf0
0000            344   _B_1            BIT 0xf1
0000            345   _B_2            BIT 0xf2
0000            346   _B_3            BIT 0xf3
0000            347   _B_4            BIT 0xf4
0000            348   _B_5            BIT 0xf5
0000            349   _B_6            BIT 0xf6
0000            350   _B_7            BIT 0xf7
0000            351   _C0FIF          BIT 0xe8
0000            352   _C0RIF          BIT 0xe9
0000            353   _C1FIF          BIT 0xea
0000            354   _C1RIF          BIT 0xeb
0000            355   _C2FIF          BIT 0xec
0000            356   _C2RIF          BIT 0xed
0000            357   _C3FIF          BIT 0xee
0000            358   _C3RIF          BIT 0xef
0000            359   _D1SRC0         BIT 0x88
0000            360   _D1SRC1         BIT 0x89
0000            361   _D1AMEN         BIT 0x8a
0000            362   _D01REFSL       BIT 0x8b
0000            363   _D3SRC0         BIT 0x8c
0000            364   _D3SRC1         BIT 0x8d
0000            365   _D3AMEN         BIT 0x8e
0000            366   _D23REFSL       BIT 0x8f
0000            367   _D0UDIS         BIT 0x98
0000            368   _D1UDIS         BIT 0x99
0000            369   _D2UDIS         BIT 0x9a
0000            370   _D3UDIS         BIT 0x9b
0000            371   _EX0            BIT 0xa8
0000            372   _ET0            BIT 0xa9
0000            373   _EX1            BIT 0xaa
0000            374   _ET1            BIT 0xab
0000            375   _ES0            BIT 0xac
0000            376   _ET2            BIT 0xad
0000            377   _ESPI0          BIT 0xae
0000            378   _EA             BIT 0xaf
0000            379   _PX0            BIT 0xb8
0000            380   _PT0            BIT 0xb9
0000            381   _PX1            BIT 0xba
0000            382   _PT1            BIT 0xbb
0000            383   _PS0            BIT 0xbc
0000            384   _PT2            BIT 0xbd
0000            385   _PSPI0          BIT 0xbe
0000            386   _P0_0           BIT 0x80
0000            387   _P0_1           BIT 0x81
0000            388   _P0_2           BIT 0x82
0000            389   _P0_3           BIT 0x83
0000            390   _P0_4           BIT 0x84
0000            391   _P0_5           BIT 0x85
0000            392   _P0_6           BIT 0x86
0000            393   _P0_7           BIT 0x87
0000            394   _P1_0           BIT 0x90
0000            395   _P1_1           BIT 0x91
0000            396   _P1_2           BIT 0x92
0000            397   _P1_3           BIT 0x93
0000            398   _P1_4           BIT 0x94
0000            399   _P1_5           BIT 0x95
0000            400   _P1_6           BIT 0x96
0000            401   _P1_7           BIT 0x97
0000            402   _P2_0           BIT 0xa0
0000            403   _P2_1           BIT 0xa1
0000            404   _P2_2           BIT 0xa2
0000            405   _P2_3           BIT 0xa3
0000            406   _P2_4           BIT 0xa4
0000            407   _P2_5           BIT 0xa5
0000            408   _P2_6           BIT 0xa6
0000            409   _P3_0           BIT 0xb0
0000            410   _P3_1           BIT 0xb1
0000            411   _P3_2           BIT 0xb2
0000            412   _P3_3           BIT 0xb3
0000            413   _P3_4           BIT 0xb4
0000            414   _P3_7           BIT 0xb7
0000            415   _CCF0           BIT 0xd8
0000            416   _CCF1           BIT 0xd9
0000            417   _CCF2           BIT 0xda
0000            418   _CCF3           BIT 0xdb
0000            419   _CCF4           BIT 0xdc
0000            420   _CCF5           BIT 0xdd
0000            421   _CR             BIT 0xde
0000            422   _CF             BIT 0xdf
0000            423   _PARITY         BIT 0xd0
0000            424   _F1             BIT 0xd1
0000            425   _OV             BIT 0xd2
0000            426   _RS0            BIT 0xd3
0000            427   _RS1            BIT 0xd4
0000            428   _F0             BIT 0xd5
0000            429   _AC             BIT 0xd6
0000            430   _CY             BIT 0xd7
0000            431   _RI             BIT 0x98
0000            432   _TI             BIT 0x99
0000            433   _RB8            BIT 0x9a
0000            434   _TB8            BIT 0x9b
0000            435   _REN            BIT 0x9c
0000            436   _CE             BIT 0x9d
0000            437   _SMODE          BIT 0x9e
0000            438   _RI1            BIT 0xc8
0000            439   _TI1            BIT 0xc9
0000            440   _RBX1           BIT 0xca
0000            441   _TBX1           BIT 0xcb
0000            442   _REN1           BIT 0xcc
0000            443   _PERR1          BIT 0xcd
0000            444   _OVR1           BIT 0xce
0000            445   _SI             BIT 0xc0
0000            446   _ACK            BIT 0xc1
0000            447   _ARBLOST        BIT 0xc2
0000            448   _ACKRQ          BIT 0xc3
0000            449   _STO            BIT 0xc4
0000            450   _STA            BIT 0xc5
0000            451   _TXMODE         BIT 0xc6
0000            452   _MASTER         BIT 0xc7
0000            453   _SPIEN          BIT 0xf8
0000            454   _TXNF           BIT 0xf9
0000            455   _NSSMD0         BIT 0xfa
0000            456   _NSSMD1         BIT 0xfb
0000            457   _RXOVRN         BIT 0xfc
0000            458   _MODF           BIT 0xfd
0000            459   _WCOL           BIT 0xfe
0000            460   _SPIF           BIT 0xff
0000            461   _IT0            BIT 0x88
0000            462   _IE0            BIT 0x89
0000            463   _IT1            BIT 0x8a
0000            464   _IE1            BIT 0x8b
0000            465   _TR0            BIT 0x8c
0000            466   _TF0            BIT 0x8d
0000            467   _TR1            BIT 0x8e
0000            468   _TF1            BIT 0x8f
0000            469   _T2XCLK0        BIT 0xc8
0000            470   _T2XCLK1        BIT 0xc9
0000            471   _TR2            BIT 0xca
0000            472   _T2SPLIT        BIT 0xcb
0000            473   _TF2CEN         BIT 0xcc
0000            474   _TF2LEN         BIT 0xcd
0000            475   _TF2L           BIT 0xce
0000            476   _TF2H           BIT 0xcf
0000            477   _T4XCLK0        BIT 0x98
0000            478   _T4XCLK1        BIT 0x99
0000            479   _TR4            BIT 0x9a
0000            480   _T4SPLIT        BIT 0x9b
0000            481   _TF4CEN         BIT 0x9c
0000            482   _TF4LEN         BIT 0x9d
0000            483   _TF4L           BIT 0x9e
0000            484   _TF4H           BIT 0x9f
0000            485   _T5XCLK0        BIT 0xc0
0000            486   _T5XCLK1        BIT 0xc1
0000            487   _TR5            BIT 0xc2
0000            488   _T5SPLIT        BIT 0xc3
0000            489   _TF5CEN         BIT 0xc4
0000            490   _TF5LEN         BIT 0xc5
0000            491   _TF5L           BIT 0xc6
0000            492   _TF5H           BIT 0xc7
0000            493   _RIE            BIT 0xd8
0000            494   _RXTO0          BIT 0xd9
0000            495   _RXTO1          BIT 0xda
0000            496   _RFRQ           BIT 0xdb
0000            497   _TIE            BIT 0xdc
0000            498   _TXHOLD         BIT 0xdd
0000            499   _TXNF1          BIT 0xde
0000            500   _TFRQ           BIT 0xdf
0000            501   ;--------------------------------------------------------
0000            502   ; overlayable register banks
0000            503   ;--------------------------------------------------------
0000            504            rbank0 segment data overlay
0000            505   ;--------------------------------------------------------
0000            506   ; internal ram data
0000            507   ;--------------------------------------------------------
0000            508            rseg R_DSEG
0000            509   _dig_x1:
0000            510            ds 1
0001            511   _dig_x2:
0001            512            ds 1
0002            513   _dig_y1:
0002            514            ds 1
0003            515   _dig_y2:
0003            516            ds 1
0004            517   _dig_z1:
0004            518            ds 1
0005            519   _dig_z2:
0005            520            ds 1
0006            521   _dig_z3:
0006            522            ds 1
0007            523   _dig_z4:
0007            524            ds 1
0008            525   _dig_xy1:
0008            526            ds 1
0009            527   _dig_xy2:
0009            528            ds 1
000A            529   _dig_xyz1:
000A            530            ds 1
000B            531   _SPI_read_block_PARM_2:
000B            532            ds 3
000E            533   _SPI_read_block_PARM_3:
000E            534            ds 1
000F            535   _SPI_write_PARM_2:
000F            536            ds 1
0010            537   _BMM150_compensate_x_PARM_2:
0010            538            ds 3
0013            539   _BMM150_compensate_x_sloc0_1_0:
0013            540            ds 4
0017            541   _BMM150_compensate_y_PARM_2:
0017            542            ds 3
001A            543   _BMM150_compensate_y_sloc0_1_0:
001A            544            ds 4
001E            545   _BMM150_compensate_z_PARM_2:
001E            546            ds 3
0021            547   _BMM150_compensate_z_sloc0_1_0:
0021            548            ds 2
0023            549   _BMM150_compensate_z_sloc1_1_0:
0023            550            ds 4
0027            551   _BMM150_compensate_z_sloc2_1_0:
0027            552            ds 4
002B            553   _BMM150_Read_Data_PARM_2:
002B            554            ds 3
002E            555   _BMM150_Read_Data_PARM_3:
002E            556            ds 3
0031            557   _BMM150_Read_Data_mag_x_1_118:
0031            558            ds 3
0034            559   _BMM150_Read_Data_raw_y_lsb_1_119:
0034            560            ds 1
0035            561   _BMM150_Read_Data_raw_y_msb_1_119:
0035            562            ds 1
0036            563   _BMM150_Read_Data_raw_z_lsb_1_119:
0036            564            ds 1
0037            565   _BMM150_Read_Data_raw_z_msb_1_119:
0037            566            ds 1
0038            567   _BMM150_Read_Data_raw_rhall_lsb_1_119:
0038            568            ds 1
0039            569   _BMM150_Read_Data_raw_rhall_msb_1_119:
0039            570            ds 1
003A            571   _BMM150_Read_Data_raw_z_1_119:
003A            572            ds 2
003C            573   _BMM150_Read_Data_x_val_1_119:
003C            574            ds 2
003E            575   _BMM150_Read_Data_y_val_1_119:
003E            576            ds 2
0040            577   _BMM150_Read_Data_z_val_1_119:
0040            578            ds 2
0042            579   _BMM150_Read_Data_rhall_val_1_119:
0042            580            ds 2
0044            581   _main_i_1_123:
0044            582            ds 1
0045            583   _main_mag_x_1_123:
0045            584            ds 2
0047            585   _main_mag_y_1_123:
0047            586            ds 2
0049            587   _main_mag_z_1_123:
0049            588            ds 2
004B            589   _main_avg_angle_1_123:
004B            590            ds 4
004F            591   ;--------------------------------------------------------
004F            592   ; overlayable items in internal ram 
004F            593   ;--------------------------------------------------------
0000            594            rseg    R_OSEG
0000            595            rseg    R_OSEG
0000            596            rseg    R_OSEG
0000            597   ;--------------------------------------------------------
0000            598   ; indirectly addressable internal ram data
0000            599   ;--------------------------------------------------------
0000            600            rseg R_ISEG
0000            601   ;--------------------------------------------------------
0000            602   ; absolute internal ram data
0000            603   ;--------------------------------------------------------
0000            604            DSEG
0000            605   ;--------------------------------------------------------
0000            606   ; bit data
0000            607   ;--------------------------------------------------------
0000            608            rseg R_BSEG
0000            609   ;--------------------------------------------------------
0000            610   ; paged external ram data
0000            611   ;--------------------------------------------------------
0000            612            rseg R_PSEG
0000            613   ;--------------------------------------------------------
0000            614   ; external ram data
0000            615   ;--------------------------------------------------------
0000            616            rseg R_XSEG
0000            617   _BMM150_Read_Trim_Registers_trim_x1y1_1_84:
0000            618            ds 2
0002            619   _BMM150_Read_Trim_Registers_trim_xyz_data_1_84:
0002            620            ds 4
0006            621   _BMM150_Read_Trim_Registers_trim_xy1xy2_1_84:
0006            622            ds 10
0010            623   _BMM150_compensate_x_retval_1_93:
0010            624            ds 2
0012            625   _BMM150_compensate_x_process_comp_x0_1_93:
0012            626            ds 2
0014            627   _BMM150_compensate_y_retval_1_102:
0014            628            ds 2
0016            629   _BMM150_compensate_y_process_comp_y0_1_102:
0016            630            ds 2
0018            631   _BMM150_compensate_z_retval_1_111:
0018            632            ds 4
001C            633   ;--------------------------------------------------------
001C            634   ; absolute external ram data
001C            635   ;--------------------------------------------------------
0000            636            XSEG
0000            637   ;--------------------------------------------------------
0000            638   ; external initialized ram data
0000            639   ;--------------------------------------------------------
0000            640            rseg R_IXSEG
0000            641            rseg R_HOME
0000            642            rseg R_GSINIT
0000            643            rseg R_CSEG
0000            644   ;--------------------------------------------------------
0000            645   ; Reset entry point and interrupt vectors
0000            646   ;--------------------------------------------------------
0000            647            CSEG at 0x0000
0000 020000     648            ljmp    _crt0
0003            649   ;--------------------------------------------------------
0003            650   ; global & static initialisations
0003            651   ;--------------------------------------------------------
0000            652            rseg R_HOME
0000            653            rseg R_GSINIT
0000            654            rseg R_GSINIT
0000            655   ;--------------------------------------------------------
0000            656   ; data variables initialization
0000            657   ;--------------------------------------------------------
0000            658            rseg R_DINIT
0000            659            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            660   ;--------------------------------------------------------
0000            661   ; code
0000            662   ;--------------------------------------------------------
0000            663            rseg R_CSEG
0000            664   ;------------------------------------------------------------
0000            665   ;Allocation info for local variables in function '_c51_external_startup'
0000            666   ;------------------------------------------------------------
0000            667   ;------------------------------------------------------------
0000            668   ;        sensor_test.c:74: char _c51_external_startup (void)
0000            669   ;        -----------------------------------------
0000            670   ;         function _c51_external_startup
0000            671   ;        -----------------------------------------
0000            672   __c51_external_startup:
0000            673            using   0
0000            674   ;        sensor_test.c:77: SFRPAGE = 0x00;
0000 75A700     675            mov     _SFRPAGE,#0x00
0003            676   ;        sensor_test.c:78: WDTCN = 0xDE; //First key
0003 7597DE     677            mov     _WDTCN,#0xDE
0006            678   ;        sensor_test.c:79: WDTCN = 0xAD; //Second key
0006 7597AD     679            mov     _WDTCN,#0xAD
0009            680   ;        sensor_test.c:81: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     681            mov     _VDM0CN,#0x80
000C            682   ;        sensor_test.c:82: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     683            mov     _RSTSRC,#0x06
000F            684   ;        sensor_test.c:89: SFRPAGE = 0x10;
000F 75A710     685            mov     _SFRPAGE,#0x10
0012            686   ;        sensor_test.c:90: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     687            mov     _PFE0CN,#0x20
0015            688   ;        sensor_test.c:91: SFRPAGE = 0x00;
0015 75A700     689            mov     _SFRPAGE,#0x00
0018            690   ;        sensor_test.c:112: CLKSEL = 0x00;
0018 75A900     691            mov     _CLKSEL,#0x00
001B            692   ;        sensor_test.c:113: CLKSEL = 0x00;
001B 75A900     693            mov     _CLKSEL,#0x00
001E            694   ;        sensor_test.c:114: while ((CLKSEL & 0x80) == 0);
001E            695   L002001?:
001E E5A9       696            mov     a,_CLKSEL
0020 30E730     697            jnb     acc.7,L002001?
0023            698   ;        sensor_test.c:115: CLKSEL = 0x03;
0023 75A903     699            mov     _CLKSEL,#0x03
0026            700   ;        sensor_test.c:116: CLKSEL = 0x03;
0026 75A903     701            mov     _CLKSEL,#0x03
0029            702   ;        sensor_test.c:117: while ((CLKSEL & 0x80) == 0);
0029            703   L002004?:
0029 E5A9       704            mov     a,_CLKSEL
002B 30E7B0     705            jnb     acc.7,L002004?
002E            706   ;        sensor_test.c:123: P0MDOUT = 0b_0000_1101; // SCK, MOSI, and P0.3 are push-pull, others open-drain
002E 75A40D     707            mov     _P0MDOUT,#0x0D
0031            708   ;        sensor_test.c:124: P1MDOUT = 0b_0000_0000; // P1 all open-drain
0031 75A500     709            mov     _P1MDOUT,#0x00
0034            710   ;        sensor_test.c:125: XBR0 = 0b_0000_0011;    // SPI0E=1, URT0E=1
0034 75E103     711            mov     _XBR0,#0x03
0037            712   ;        sensor_test.c:126: XBR1 = 0b_0000_0000;
0037 75E200     713            mov     _XBR1,#0x00
003A            714   ;        sensor_test.c:127: XBR2 = 0b_0100_0000;    // Enable crossbar and weak pull-ups
003A 75E340     715            mov     _XBR2,#0x40
003D            716   ;        sensor_test.c:133: SCON0 = 0x10;
003D 759810     717            mov     _SCON0,#0x10
0040            718   ;        sensor_test.c:134: TH1 = 0x100-((SYSCLK/BAUDRATE)/(12L*2L));
0040 758DE6     719            mov     _TH1,#0xE6
0043            720   ;        sensor_test.c:135: TL1 = TH1;      // Init Timer1
0043 858D8B     721            mov     _TL1,_TH1
0046            722   ;        sensor_test.c:136: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     723            anl     _TMOD,#0x0F
0049            724   ;        sensor_test.c:137: TMOD |=  0x20;                       
0049 438920     725            orl     _TMOD,#0x20
004C            726   ;        sensor_test.c:138: TR1 = 1; // START Timer1
004C D28E       727            setb    _TR1
004E            728   ;        sensor_test.c:139: TI = 1;  // Indicate TX0 ready
004E D299       729            setb    _TI
0050            730   ;        sensor_test.c:142: SPI0CKR = (SYSCLK/(2*F_SCK_MAX))-1;
0050 75A211     731            mov     _SPI0CKR,#0x11
0053            732   ;        sensor_test.c:143: SPI0CFG = 0b_1110_0000; // this is mode 3, you need to determine the sampling etc. in datasheet
0053 75A1E0     733            mov     _SPI0CFG,#0xE0
0056            734   ;        sensor_test.c:144: SPI0CN0 = 0b_0000_0001; // SPI enabled and in three wire mode
0056 75F801     735            mov     _SPI0CN0,#0x01
0059            736   ;        sensor_test.c:146: return 0;
0059 758200     737            mov     dpl,#0x00
005C 22         738            ret
005D            739   ;------------------------------------------------------------
005D            740   ;Allocation info for local variables in function 'Set_Pin_Output'
005D            741   ;------------------------------------------------------------
005D            742   ;mask                      Allocated with name '_Set_Pin_Output_mask_1_67'
005D            743   ;pin                       Allocated to registers r2 
005D            744   ;------------------------------------------------------------
005D            745   ;        sensor_test.c:149: void Set_Pin_Output (unsigned char pin)
005D            746   ;        -----------------------------------------
005D            747   ;         function Set_Pin_Output
005D            748   ;        -----------------------------------------
005D            749   _Set_Pin_Output:
005D AA82       750            mov     r2,dpl
005F            751   ;        sensor_test.c:153: mask=(1<<(pin&0x7));
005F 7407       752            mov     a,#0x07
0061 5A         753            anl     a,r2
0062 F5F0       754            mov     b,a
0064 05F0       755            inc     b
0066 7401       756            mov     a,#0x01
0068 8000       757            sjmp    L003011?
006A            758   L003009?:
006A 25E0       759            add     a,acc
006C            760   L003011?:
006C D5F0B0     761            djnz    b,L003009?
006F FB         762            mov     r3,a
0070            763   ;        sensor_test.c:154: switch(pin/0x10)
0070 EA         764            mov     a,r2
0071 C4         765            swap    a
0072 540F       766            anl     a,#0x0f
0074 FA         767            mov  r2,a
0075 24FC       768            add     a,#0xff - 0x03
0077 4000       769            jc      L003006?
0079 EA         770            mov     a,r2
007A 2A         771            add     a,r2
007B 2A         772            add     a,r2
007C 90C630     773            mov     dptr,#L003013?
007F 73         774            jmp     @a+dptr
0080            775   L003013?:
0080 020000     776            ljmp    L003001?
0083 020000     777            ljmp    L003002?
0086 020000     778            ljmp    L003003?
0089 020000     779            ljmp    L003004?
008C            780   ;        sensor_test.c:156: case 0: P0MDOUT |= mask; break;
008C            781   L003001?:
008C EB         782            mov     a,r3
008D 42A4       783            orl     _P0MDOUT,a
008F            784   ;        sensor_test.c:157: case 1: P1MDOUT |= mask; break;
008F 22         785            ret
0090            786   L003002?:
0090 EB         787            mov     a,r3
0091 42A5       788            orl     _P1MDOUT,a
0093            789   ;        sensor_test.c:158: case 2: P2MDOUT |= mask; break; 
0093 22         790            ret
0094            791   L003003?:
0094 EB         792            mov     a,r3
0095 42A6       793            orl     _P2MDOUT,a
0097            794   ;        sensor_test.c:159: case 3: P3MDOUT |= mask; break; 
0097 22         795            ret
0098            796   L003004?:
0098 EB         797            mov     a,r3
0099 429C       798            orl     _P3MDOUT,a
009B            799   ;        sensor_test.c:160: }    
009B            800   L003006?:
009B 22         801            ret
009C            802   ;------------------------------------------------------------
009C            803   ;Allocation info for local variables in function 'Timer3us'
009C            804   ;------------------------------------------------------------
009C            805   ;i                         Allocated with name '_Timer3us_i_1_70'
009C            806   ;us                        Allocated to registers r2 
009C            807   ;------------------------------------------------------------
009C            808   ;        sensor_test.c:164: void Timer3us(unsigned char us)
009C            809   ;        -----------------------------------------
009C            810   ;         function Timer3us
009C            811   ;        -----------------------------------------
009C            812   _Timer3us:
009C AA82       813            mov     r2,dpl
009E            814   ;        sensor_test.c:169: CKCON0|=0b_0100_0000;
009E 438E40     815            orl     _CKCON0,#0x40
00A1            816   ;        sensor_test.c:171: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
00A1 7592B8     817            mov     _TMR3RL,#0xB8
00A4 7593FF     818            mov     (_TMR3RL >> 8),#0xFF
00A7            819   ;        sensor_test.c:172: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
00A7 859294     820            mov     _TMR3,_TMR3RL
00AA 859395     821            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
00AD            822   ;        sensor_test.c:174: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
00AD 759104     823            mov     _TMR3CN0,#0x04
00B0            824   ;        sensor_test.c:175: for (i = 0; i < us; i++)       // Count <us> overflows
00B0 7B00       825            mov     r3,#0x00
00B2            826   L004004?:
00B2 C3         827            clr     c
00B3 EB         828            mov     a,r3
00B4 9A         829            subb    a,r2
00B5 5000       830            jnc     L004007?
00B7            831   ;        sensor_test.c:177: while (!(TMR3CN0 & 0x80));  // Wait for overflow
00B7            832   L004001?:
00B7 E591       833            mov     a,_TMR3CN0
00B9 30E7F0     834            jnb     acc.7,L004001?
00BC            835   ;        sensor_test.c:178: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
00BC 53917F     836            anl     _TMR3CN0,#0x7F
00BF            837   ;        sensor_test.c:175: for (i = 0; i < us; i++)       // Count <us> overflows
00BF 0B         838            inc     r3
00C0 8000       839            sjmp    L004004?
00C2            840   L004007?:
00C2            841   ;        sensor_test.c:180: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
00C2 759100     842            mov     _TMR3CN0,#0x00
00C5 22         843            ret
00C6            844   ;------------------------------------------------------------
00C6            845   ;Allocation info for local variables in function 'waitms'
00C6            846   ;------------------------------------------------------------
00C6            847   ;ms                        Allocated to registers r2 r3 
00C6            848   ;j                         Allocated with name '_waitms_j_1_73'
00C6            849   ;k                         Allocated with name '_waitms_k_1_73'
00C6            850   ;------------------------------------------------------------
00C6            851   ;        sensor_test.c:183: void waitms (unsigned int ms)
00C6            852   ;        -----------------------------------------
00C6            853   ;         function waitms
00C6            854   ;        -----------------------------------------
00C6            855   _waitms:
00C6 AA82       856            mov     r2,dpl
00C8 AB83       857            mov     r3,dph
00CA            858   ;        sensor_test.c:187: for(j=0; j<ms; j++)
00CA 7C00       859            mov     r4,#0x00
00CC 7D00       860            mov     r5,#0x00
00CE            861   L005005?:
00CE C3         862            clr     c
00CF EC         863            mov     a,r4
00D0 9A         864            subb    a,r2
00D1 ED         865            mov     a,r5
00D2 9B         866            subb    a,r3
00D3 5000       867            jnc     L005009?
00D5            868   ;        sensor_test.c:188: for (k=0; k<4; k++) Timer3us(250);
00D5 7E00       869            mov     r6,#0x00
00D7            870   L005001?:
00D7 BE0430     871            cjne    r6,#0x04,L005018?
00DA            872   L005018?:
00DA 5000       873            jnc     L005007?
00DC 7582FA     874            mov     dpl,#0xFA
00DF C002       875            push    ar2
00E1 C003       876            push    ar3
00E3 C004       877            push    ar4
00E5 C005       878            push    ar5
00E7 C006       879            push    ar6
00E9 120000     880            lcall   _Timer3us
00EC D006       881            pop     ar6
00EE D005       882            pop     ar5
00F0 D004       883            pop     ar4
00F2 D003       884            pop     ar3
00F4 D002       885            pop     ar2
00F6 0E         886            inc     r6
00F7 8000       887            sjmp    L005001?
00F9            888   L005007?:
00F9            889   ;        sensor_test.c:187: for(j=0; j<ms; j++)
00F9 0C         890            inc     r4
00FA BC0070     891            cjne    r4,#0x00,L005005?
00FD 0D         892            inc     r5
00FE 8000       893            sjmp    L005005?
0100            894   L005009?:
0100 22         895            ret
0101            896   ;------------------------------------------------------------
0101            897   ;Allocation info for local variables in function 'SPI_transfer'
0101            898   ;------------------------------------------------------------
0101            899   ;tx_data                   Allocated to registers 
0101            900   ;------------------------------------------------------------
0101            901   ;        sensor_test.c:191: unsigned char SPI_transfer(unsigned char tx_data)
0101            902   ;        -----------------------------------------
0101            903   ;         function SPI_transfer
0101            904   ;        -----------------------------------------
0101            905   _SPI_transfer:
0101 8582A3     906            mov     _SPI0DAT,dpl
0104            907   ;        sensor_test.c:194: while (!SPIF);      // Wait for transfer to complete
0104            908   L006001?:
0104            909   ;        sensor_test.c:195: SPIF = 0;           // Clear SPI interrupt flag
0104 10FFF0     910            jbc     _SPIF,L006008?
0107 8000       911            sjmp    L006001?
0109            912   L006008?:
0109            913   ;        sensor_test.c:196: return SPI0DAT;     // Return received data
0109 85A382     914            mov     dpl,_SPI0DAT
010C 22         915            ret
010D            916   ;------------------------------------------------------------
010D            917   ;Allocation info for local variables in function 'SPI_read'
010D            918   ;------------------------------------------------------------
010D            919   ;reg_addr                  Allocated to registers r2 
010D            920   ;value                     Allocated to registers 
010D            921   ;------------------------------------------------------------
010D            922   ;        sensor_test.c:199: unsigned char SPI_read(unsigned char reg_addr)
010D            923   ;        -----------------------------------------
010D            924   ;         function SPI_read
010D            925   ;        -----------------------------------------
010D            926   _SPI_read:
010D AA82       927            mov     r2,dpl
010F            928   ;        sensor_test.c:204: reg_addr = reg_addr | 0x80;
010F 430280     929            orl     ar2,#0x80
0112            930   ;        sensor_test.c:206: CS = 0;                // Select the device
0112 C283       931            clr     _P0_3
0114            932   ;        sensor_test.c:207: SPI_transfer(reg_addr);     // Send register address
0114 8A82       933            mov     dpl,r2
0116 120000     934            lcall   _SPI_transfer
0119            935   ;        sensor_test.c:208: value = SPI_transfer(0x00); // Read value (send dummy byte) dummy byte is a placeholder byte sent by the master when it wants to receive data
0119 758200     936            mov     dpl,#0x00
011C 120000     937            lcall   _SPI_transfer
011F            938   ;        sensor_test.c:209: CS = 1;                // Deselect the device
011F D283       939            setb    _P0_3
0121            940   ;        sensor_test.c:211: return value;
0121 22         941            ret
0122            942   ;------------------------------------------------------------
0122            943   ;Allocation info for local variables in function 'SPI_read_block'
0122            944   ;------------------------------------------------------------
0122            945   ;buffer                    Allocated with name '_SPI_read_block_PARM_2'
0122            946   ;len                       Allocated with name '_SPI_read_block_PARM_3'
0122            947   ;start_addr                Allocated to registers r2 
0122            948   ;i                         Allocated to registers r2 
0122            949   ;------------------------------------------------------------
0122            950   ;        sensor_test.c:214: void SPI_read_block(unsigned char start_addr, uint8_t *buffer, uint8_t len)
0122            951   ;        -----------------------------------------
0122            952   ;         function SPI_read_block
0122            953   ;        -----------------------------------------
0122            954   _SPI_read_block:
0122 AA82       955            mov     r2,dpl
0124            956   ;        sensor_test.c:217: start_addr |= 0x80; // Set MSB for read
0124 430280     957            orl     ar2,#0x80
0127            958   ;        sensor_test.c:218: CS = 0;
0127 C283       959            clr     _P0_3
0129            960   ;        sensor_test.c:219: SPI_transfer(start_addr);
0129 8A82       961            mov     dpl,r2
012B 120000     962            lcall   _SPI_transfer
012E            963   ;        sensor_test.c:220: for (i = 0; i < len; i++) {
012E 7A00       964            mov     r2,#0x00
0130            965   L008001?:
0130 C3         966            clr     c
0131 EA         967            mov     a,r2
0132 9560       968            subb    a,_SPI_read_block_PARM_3
0134 5000       969            jnc     L008004?
0136            970   ;        sensor_test.c:221: buffer[i] = SPI_transfer(0x00); // Dummy writes
0136 EA         971            mov     a,r2
0137 25B0       972            add     a,_SPI_read_block_PARM_2
0139 FB         973            mov     r3,a
013A E4         974            clr     a
013B 35B1       975            addc    a,(_SPI_read_block_PARM_2 + 1)
013D FC         976            mov     r4,a
013E ADB2       977            mov     r5,(_SPI_read_block_PARM_2 + 2)
0140 758200     978            mov     dpl,#0x00
0143 C002       979            push    ar2
0145 C003       980            push    ar3
0147 C004       981            push    ar4
0149 C005       982            push    ar5
014B 120000     983            lcall   _SPI_transfer
014E AE82       984            mov     r6,dpl
0150 D005       985            pop     ar5
0152 D004       986            pop     ar4
0154 D003       987            pop     ar3
0156 D002       988            pop     ar2
0158 8B82       989            mov     dpl,r3
015A 8C83       990            mov     dph,r4
015C 8DF0       991            mov     b,r5
015E EE         992            mov     a,r6
015F 120000     993            lcall   __gptrput
0162            994   ;        sensor_test.c:220: for (i = 0; i < len; i++) {
0162 0A         995            inc     r2
0163 8000       996            sjmp    L008001?
0165            997   L008004?:
0165            998   ;        sensor_test.c:223: CS = 1;
0165 D283       999            setb    _P0_3
0167 22        1000            ret
0168           1001   ;------------------------------------------------------------
0168           1002   ;Allocation info for local variables in function 'SPI_write'
0168           1003   ;------------------------------------------------------------
0168           1004   ;reg_value                 Allocated with name '_SPI_write_PARM_2'
0168           1005   ;reg_addr                  Allocated to registers r2 
0168           1006   ;------------------------------------------------------------
0168           1007   ;        sensor_test.c:227: void SPI_write(unsigned char reg_addr, unsigned char reg_value)
0168           1008   ;        -----------------------------------------
0168           1009   ;         function SPI_write
0168           1010   ;        -----------------------------------------
0168           1011   _SPI_write:
0168 AA82      1012            mov     r2,dpl
016A           1013   ;        sensor_test.c:230: reg_addr = reg_addr & 0x7F;
016A 53027F    1014            anl     ar2,#0x7F
016D           1015   ;        sensor_test.c:232: CS = 0;                // Select device
016D C283      1016            clr     _P0_3
016F           1017   ;        sensor_test.c:233: SPI_transfer(reg_addr);     // Send register address
016F 8A82      1018            mov     dpl,r2
0171 120000    1019            lcall   _SPI_transfer
0174           1020   ;        sensor_test.c:234: SPI_transfer(reg_value);    // Send value
0174 851082    1021            mov     dpl,_SPI_write_PARM_2
0177 120000    1022            lcall   _SPI_transfer
017A           1023   ;        sensor_test.c:235: CS = 1;                // Deselect device
017A D283      1024            setb    _P0_3
017C 22        1025            ret
017D           1026   ;------------------------------------------------------------
017D           1027   ;Allocation info for local variables in function 'BMM150_Read_Trim_Registers'
017D           1028   ;------------------------------------------------------------
017D           1029   ;i                         Allocated with name '_BMM150_Read_Trim_Registers_i_1_84'
017D           1030   ;temp_msb                  Allocated with name '_BMM150_Read_Trim_Registers_temp_msb_1_84'
017D           1031   ;trim_x1y1                 Allocated with name '_BMM150_Read_Trim_Registers_trim_x1y1_1_84'
017D           1032   ;trim_xyz_data             Allocated with name '_BMM150_Read_Trim_Registers_trim_xyz_data_1_84'
017D           1033   ;trim_xy1xy2               Allocated with name '_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84'
017D           1034   ;------------------------------------------------------------
017D           1035   ;        sensor_test.c:238: void BMM150_Read_Trim_Registers(void)
017D           1036   ;        -----------------------------------------
017D           1037   ;         function BMM150_Read_Trim_Registers
017D           1038   ;        -----------------------------------------
017D           1039   _BMM150_Read_Trim_Registers:
017D           1040   ;        sensor_test.c:242: xdata uint8_t trim_x1y1[2] = {0};
017D 90C110    1041            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_84
0180           1042   ;        sensor_test.c:243: xdata uint8_t trim_xyz_data[4] = {0};
0180 E4        1043            clr     a
0181 F0        1044            movx    @dptr,a
0182 90C111    1045            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_84 + 0x0001)
0185 F0        1046            movx    @dptr,a
0186 90C170    1047            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_84
0189 F0        1048            movx    @dptr,a
018A 90C171    1049            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0001)
018D F0        1050            movx    @dptr,a
018E 90C172    1051            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0002)
0191           1052   ;        sensor_test.c:244: xdata uint8_t trim_xy1xy2[10] = {0};
0191 E4        1053            clr     a
0192 F0        1054            movx    @dptr,a
0193 90C173    1055            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0003)
0196 F0        1056            movx    @dptr,a
0197 90C1D0    1057            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84
019A F0        1058            movx    @dptr,a
019B 90C1D1    1059            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0001)
019E F0        1060            movx    @dptr,a
019F 90C1D2    1061            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0002)
01A2 E4        1062            clr     a
01A3 F0        1063            movx    @dptr,a
01A4 90C1D3    1064            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0003)
01A7 F0        1065            movx    @dptr,a
01A8 90C1D4    1066            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0004)
01AB F0        1067            movx    @dptr,a
01AC 90C1D5    1068            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0005)
01AF F0        1069            movx    @dptr,a
01B0 90C1D6    1070            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0006)
01B3 E4        1071            clr     a
01B4 F0        1072            movx    @dptr,a
01B5 90C1D7    1073            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0007)
01B8 F0        1074            movx    @dptr,a
01B9 90C1D8    1075            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0008)
01BC F0        1076            movx    @dptr,a
01BD 90C1D9    1077            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0009)
01C0 F0        1078            movx    @dptr,a
01C1           1079   ;        sensor_test.c:247: for (i=0;i<2;i++){
01C1 7A00      1080            mov     r2,#0x00
01C3           1081   L010001?:
01C3 BA0230    1082            cjne    r2,#0x02,L010024?
01C6           1083   L010024?:
01C6 5000      1084            jnc     L010004?
01C8           1085   ;        sensor_test.c:248: trim_x1y1[i] = SPI_read(BMM150_DIG_X1+i); 
01C8 EA        1086            mov     a,r2
01C9 2410      1087            add     a,#_BMM150_Read_Trim_Registers_trim_x1y1_1_84
01CB FB        1088            mov     r3,a
01CC E4        1089            clr     a
01CD 34C1      1090            addc    a,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_84 >> 8)
01CF FC        1091            mov     r4,a
01D0 745D      1092            mov     a,#0x5D
01D2 2A        1093            add     a,r2
01D3 F582      1094            mov     dpl,a
01D5 C002      1095            push    ar2
01D7 C003      1096            push    ar3
01D9 C004      1097            push    ar4
01DB 120000    1098            lcall   _SPI_read
01DE AD82      1099            mov     r5,dpl
01E0 D004      1100            pop     ar4
01E2 D003      1101            pop     ar3
01E4 D002      1102            pop     ar2
01E6 8B82      1103            mov     dpl,r3
01E8 8C83      1104            mov     dph,r4
01EA ED        1105            mov     a,r5
01EB F0        1106            movx    @dptr,a
01EC           1107   ;        sensor_test.c:247: for (i=0;i<2;i++){
01EC 0A        1108            inc     r2
01ED 8000      1109            sjmp    L010001?
01EF           1110   L010004?:
01EF           1111   ;        sensor_test.c:250: for (i=0;i<4;i++){
01EF 7A00      1112            mov     r2,#0x00
01F1           1113   L010005?:
01F1 BA04F0    1114            cjne    r2,#0x04,L010026?
01F4           1115   L010026?:
01F4 5000      1116            jnc     L010008?
01F6           1117   ;        sensor_test.c:251: trim_xyz_data[i] = SPI_read(BMM150_DIG_Z4_LSB+i);
01F6 EA        1118            mov     a,r2
01F7 2470      1119            add     a,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_84
01F9 FB        1120            mov     r3,a
01FA E4        1121            clr     a
01FB 34C1      1122            addc    a,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 >> 8)
01FD FC        1123            mov     r4,a
01FE 7462      1124            mov     a,#0x62
0200 2A        1125            add     a,r2
0201 F582      1126            mov     dpl,a
0203 C002      1127            push    ar2
0205 C003      1128            push    ar3
0207 C004      1129            push    ar4
0209 120000    1130            lcall   _SPI_read
020C AD82      1131            mov     r5,dpl
020E D004      1132            pop     ar4
0210 D003      1133            pop     ar3
0212 D002      1134            pop     ar2
0214 8B82      1135            mov     dpl,r3
0216 8C83      1136            mov     dph,r4
0218 ED        1137            mov     a,r5
0219 F0        1138            movx    @dptr,a
021A           1139   ;        sensor_test.c:250: for (i=0;i<4;i++){
021A 0A        1140            inc     r2
021B 8000      1141            sjmp    L010005?
021D           1142   L010008?:
021D           1143   ;        sensor_test.c:253: for (i=0;i<10;i++){
021D 7A00      1144            mov     r2,#0x00
021F           1145   L010009?:
021F BA0AB0    1146            cjne    r2,#0x0A,L010028?
0222           1147   L010028?:
0222 5000      1148            jnc     L010012?
0224           1149   ;        sensor_test.c:254: trim_xy1xy2[i] = SPI_read(BMM150_DIG_Z2_LSB+i);
0224 EA        1150            mov     a,r2
0225 24D0      1151            add     a,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84
0227 FB        1152            mov     r3,a
0228 E4        1153            clr     a
0229 34C1      1154            addc    a,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 >> 8)
022B FC        1155            mov     r4,a
022C 7468      1156            mov     a,#0x68
022E 2A        1157            add     a,r2
022F F582      1158            mov     dpl,a
0231 C002      1159            push    ar2
0233 C003      1160            push    ar3
0235 C004      1161            push    ar4
0237 120000    1162            lcall   _SPI_read
023A AD82      1163            mov     r5,dpl
023C D004      1164            pop     ar4
023E D003      1165            pop     ar3
0240 8B82      1166            mov     dpl,r3
0242 8C83      1167            mov     dph,r4
0244 ED        1168            mov     a,r5
0245 F0        1169            movx    @dptr,a
0246           1170   ;        sensor_test.c:255: printf("%d ", trim_xy1xy2[i]);
0246 7B00      1171            mov     r3,#0x00
0248 C005      1172            push    ar5
024A C003      1173            push    ar3
024C 7430      1174            mov     a,#__str_0
024E C0E0      1175            push    acc
0250 74CD      1176            mov     a,#(__str_0 >> 8)
0252 C0E0      1177            push    acc
0254 7480      1178            mov     a,#0x80
0256 C0E0      1179            push    acc
0258 120000    1180            lcall   _printf
025B E581      1181            mov     a,sp
025D 24FB      1182            add     a,#0xfb
025F F581      1183            mov     sp,a
0261 D002      1184            pop     ar2
0263           1185   ;        sensor_test.c:253: for (i=0;i<10;i++){
0263 0A        1186            inc     r2
0264 8000      1187            sjmp    L010009?
0266           1188   L010012?:
0266           1189   ;        sensor_test.c:258: dig_x1 = (int8_t) trim_x1y1[0]; 
0266 90C110    1190            mov     dptr,#_BMM150_Read_Trim_Registers_trim_x1y1_1_84
0269 E0        1191            movx    a,@dptr
026A F5A8      1192            mov     _dig_x1,a
026C           1193   ;        sensor_test.c:259: dig_y1 = (int8_t) trim_x1y1[1]; 
026C 90C111    1194            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_x1y1_1_84 + 0x0001)
026F E0        1195            movx    a,@dptr
0270 F528      1196            mov     _dig_y1,a
0272           1197   ;        sensor_test.c:260: dig_x2 = (int8_t) trim_xyz_data[2]; 
0272 90C172    1198            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0002)
0275 E0        1199            movx    a,@dptr
0276 F568      1200            mov     _dig_x2,a
0278           1201   ;        sensor_test.c:261: dig_y2 = (int8_t) trim_xyz_data[3]; 
0278 90C173    1202            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0003)
027B E0        1203            movx    a,@dptr
027C F5E8      1204            mov     _dig_y2,a
027E           1205   ;        sensor_test.c:263: temp_msb = ((uint16_t)trim_xy1xy2[3]) << 8;
027E 90C1D3    1206            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0003)
0281 E0        1207            movx    a,@dptr
0282 FB        1208            mov     r3,a
0283 7A00      1209            mov     r2,#0x00
0285           1210   ;        sensor_test.c:264: dig_z1 = (uint16_t)(temp_msb | trim_xy1xy2[2]);
0285 90C1D2    1211            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0002)
0288 E0        1212            movx    a,@dptr
0289 7D00      1213            mov     r5,#0x00
028B 4202      1214            orl     ar2,a
028D ED        1215            mov     a,r5
028E 4203      1216            orl     ar3,a
0290 8AA8      1217            mov     _dig_z1,r2
0292           1218   ;        sensor_test.c:266: temp_msb = ((uint16_t)trim_xy1xy2[1]) << 8;
0292 90C1D1    1219            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0001)
0295 E0        1220            movx    a,@dptr
0296 FB        1221            mov     r3,a
0297 7A00      1222            mov     r2,#0x00
0299           1223   ;        sensor_test.c:267: dig_z2 = (int16_t)(temp_msb | trim_xy1xy2[0]);
0299 90C1D0    1224            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84
029C E0        1225            movx    a,@dptr
029D 7D00      1226            mov     r5,#0x00
029F 4202      1227            orl     ar2,a
02A1 ED        1228            mov     a,r5
02A2 4203      1229            orl     ar3,a
02A4 8A68      1230            mov     _dig_z2,r2
02A6           1231   ;        sensor_test.c:269: temp_msb = ((uint16_t)trim_xy1xy2[7]) << 8;
02A6 90C1D7    1232            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0007)
02A9 E0        1233            movx    a,@dptr
02AA FB        1234            mov     r3,a
02AB 7A00      1235            mov     r2,#0x00
02AD           1236   ;        sensor_test.c:270: dig_z3 = (int16_t)(temp_msb | trim_xy1xy2[6]);
02AD 90C1D6    1237            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0006)
02B0 E0        1238            movx    a,@dptr
02B1 7D00      1239            mov     r5,#0x00
02B3 4202      1240            orl     ar2,a
02B5 ED        1241            mov     a,r5
02B6 4203      1242            orl     ar3,a
02B8 8A28      1243            mov     _dig_z3,r2
02BA           1244   ;        sensor_test.c:272: temp_msb = ((uint16_t)trim_xyz_data[1]) << 8;
02BA 90C171    1245            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xyz_data_1_84 + 0x0001)
02BD E0        1246            movx    a,@dptr
02BE FB        1247            mov     r3,a
02BF 7A00      1248            mov     r2,#0x00
02C1           1249   ;        sensor_test.c:273: dig_z4 = (int16_t)(temp_msb | trim_xyz_data[0]);
02C1 90C170    1250            mov     dptr,#_BMM150_Read_Trim_Registers_trim_xyz_data_1_84
02C4 E0        1251            movx    a,@dptr
02C5 7D00      1252            mov     r5,#0x00
02C7 4202      1253            orl     ar2,a
02C9 ED        1254            mov     a,r5
02CA 4203      1255            orl     ar3,a
02CC 8AB0      1256            mov     _dig_z4,r2
02CE           1257   ;        sensor_test.c:275: dig_xy1 = trim_xy1xy2[9];
02CE 90C1D9    1258            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0009)
02D1 E0        1259            movx    a,@dptr
02D2 F570      1260            mov     _dig_xy1,a
02D4           1261   ;        sensor_test.c:276: dig_xy2 = (int8_t)trim_xy1xy2[8];
02D4 90C1D8    1262            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0008)
02D7 E0        1263            movx    a,@dptr
02D8 F530      1264            mov     _dig_xy2,a
02DA           1265   ;        sensor_test.c:278: temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
02DA 90C1D5    1266            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0005)
02DD E0        1267            movx    a,@dptr
02DE FA        1268            mov     r2,a
02DF 53027F    1269            anl     ar2,#0x7F
02E2 8A03      1270            mov     ar3,r2
02E4 7A00      1271            mov     r2,#0x00
02E6           1272   ;        sensor_test.c:279: dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);
02E6 90C1D4    1273            mov     dptr,#(_BMM150_Read_Trim_Registers_trim_xy1xy2_1_84 + 0x0004)
02E9 E0        1274            movx    a,@dptr
02EA 7D00      1275            mov     r5,#0x00
02EC 4202      1276            orl     ar2,a
02EE ED        1277            mov     a,r5
02EF 4203      1278            orl     ar3,a
02F1 8AF0      1279            mov     _dig_xyz1,r2
02F3           1280   ;        sensor_test.c:281: printf("%d %d %d %d\n", dig_z1, dig_z2, dig_z3, dig_z4);
02F3 E5B0      1281            mov     a,_dig_z4
02F5 FA        1282            mov     r2,a
02F6 33        1283            rlc     a
02F7 95E0      1284            subb    a,acc
02F9 FB        1285            mov     r3,a
02FA E528      1286            mov     a,_dig_z3
02FC FC        1287            mov     r4,a
02FD 33        1288            rlc     a
02FE 95E0      1289            subb    a,acc
0300 FD        1290            mov     r5,a
0301 E568      1291            mov     a,_dig_z2
0303 FE        1292            mov     r6,a
0304 33        1293            rlc     a
0305 95E0      1294            subb    a,acc
0307 FF        1295            mov     r7,a
0308 E5A8      1296            mov     a,_dig_z1
030A F8        1297            mov     r0,a
030B 33        1298            rlc     a
030C 95E0      1299            subb    a,acc
030E F9        1300            mov     r1,a
030F C002      1301            push    ar2
0311 C003      1302            push    ar3
0313 C004      1303            push    ar4
0315 C005      1304            push    ar5
0317 C006      1305            push    ar6
0319 C007      1306            push    ar7
031B C000      1307            push    ar0
031D C001      1308            push    ar1
031F 74F0      1309            mov     a,#__str_1
0321 C0E0      1310            push    acc
0323 74CD      1311            mov     a,#(__str_1 >> 8)
0325 C0E0      1312            push    acc
0327 7480      1313            mov     a,#0x80
0329 C0E0      1314            push    acc
032B 120000    1315            lcall   _printf
032E E581      1316            mov     a,sp
0330 24F5      1317            add     a,#0xf5
0332 F581      1318            mov     sp,a
0334 22        1319            ret
0335           1320   ;------------------------------------------------------------
0335           1321   ;Allocation info for local variables in function 'BMM150_Init'
0335           1322   ;------------------------------------------------------------
0335           1323   ;chip_id                   Allocated to registers r2 
0335           1324   ;------------------------------------------------------------
0335           1325   ;        sensor_test.c:284: void BMM150_Init(void)
0335           1326   ;        -----------------------------------------
0335           1327   ;         function BMM150_Init
0335           1328   ;        -----------------------------------------
0335           1329   _BMM150_Init:
0335           1330   ;        sensor_test.c:289: CS = 1;         // Deselect BMM150
0335 D283      1331            setb    _P0_3
0337           1332   ;        sensor_test.c:292: waitms(10);
0337 90000A    1333            mov     dptr,#0x000A
033A 120000    1334            lcall   _waitms
033D           1335   ;        sensor_test.c:295: SPI_write(BMM150_POWER_CONTROL, 0x82);
033D 751082    1336            mov     _SPI_write_PARM_2,#0x82
0340 75824B    1337            mov     dpl,#0x4B
0343 120000    1338            lcall   _SPI_write
0346           1339   ;        sensor_test.c:296: waitms(10);  // Wait for reset to complete
0346 90000A    1340            mov     dptr,#0x000A
0349 120000    1341            lcall   _waitms
034C           1342   ;        sensor_test.c:299: SPI_write(BMM150_POWER_CONTROL, BMM150_POWER_ON);
034C 751001    1343            mov     _SPI_write_PARM_2,#0x01
034F 75824B    1344            mov     dpl,#0x4B
0352 120000    1345            lcall   _SPI_write
0355           1346   ;        sensor_test.c:300: waitms(5);
0355 900005    1347            mov     dptr,#0x0005
0358 120000    1348            lcall   _waitms
035B           1349   ;        sensor_test.c:303: chip_id = SPI_read(BMM150_CHIP_ID);
035B 758240    1350            mov     dpl,#0x40
035E 120000    1351            lcall   _SPI_read
0361 AA82      1352            mov     r2,dpl
0363           1353   ;        sensor_test.c:304: if (chip_id != BMM150_CHIP_ID_VALUE)
0363 BA3230    1354            cjne    r2,#0x32,L011010?
0366 8000      1355            sjmp    L011005?
0368           1356   L011010?:
0368           1357   ;        sensor_test.c:306: printf("Error: Could not find BMM150 sensor (Chip ID: 0x%02X)\r\n", chip_id);
0368 8A03      1358            mov     ar3,r2
036A 7C00      1359            mov     r4,#0x00
036C C003      1360            push    ar3
036E C004      1361            push    ar4
0370 74B0      1362            mov     a,#__str_2
0372 C0E0      1363            push    acc
0374 74CE      1364            mov     a,#(__str_2 >> 8)
0376 C0E0      1365            push    acc
0378 7480      1366            mov     a,#0x80
037A C0E0      1367            push    acc
037C 120000    1368            lcall   _printf
037F E581      1369            mov     a,sp
0381 24FB      1370            add     a,#0xfb
0383 F581      1371            mov     sp,a
0385           1372   ;        sensor_test.c:307: while (1) {
0385           1373   L011002?:
0385           1374   ;        sensor_test.c:308: printf("Press restart to check again!\r");
0385 7430      1375            mov     a,#__str_3
0387 C0E0      1376            push    acc
0389 74CF      1377            mov     a,#(__str_3 >> 8)
038B C0E0      1378            push    acc
038D 7480      1379            mov     a,#0x80
038F C0E0      1380            push    acc
0391 120000    1381            lcall   _printf
0394 1581      1382            dec     sp
0396 1581      1383            dec     sp
0398 1581      1384            dec     sp
039A 8000      1385            sjmp    L011002?
039C           1386   L011005?:
039C           1387   ;        sensor_test.c:313: SPI_write(BMM150_OP_MODE, BMM150_NORMAL_MODE | (BMM150_ODR_10HZ * 8));
039C 751000    1388            mov     _SPI_write_PARM_2,#0x00
039F 75824C    1389            mov     dpl,#0x4C
03A2 C002      1390            push    ar2
03A4 120000    1391            lcall   _SPI_write
03A7           1392   ;        sensor_test.c:316: SPI_write(BMM150_REP_XY, 0x04); // XY-repetitions = 9
03A7 751004    1393            mov     _SPI_write_PARM_2,#0x04
03AA 758251    1394            mov     dpl,#0x51
03AD 120000    1395            lcall   _SPI_write
03B0           1396   ;        sensor_test.c:317: SPI_write(BMM150_REP_Z, 0x0E);  // Z-repetitions = 15
03B0 75100E    1397            mov     _SPI_write_PARM_2,#0x0E
03B3 758252    1398            mov     dpl,#0x52
03B6 120000    1399            lcall   _SPI_write
03B9           1400   ;        sensor_test.c:319: BMM150_Read_Trim_Registers();
03B9 120000    1401            lcall   _BMM150_Read_Trim_Registers
03BC           1402   ;        sensor_test.c:321: printf("BMM150 initialized successfully! Chip ID: 0x%02X\r\n", chip_id);
03BC 7B00      1403            mov     r3,#0x00
03BE C003      1404            push    ar3
03C0 7470      1405            mov     a,#__str_4
03C2 C0E0      1406            push    acc
03C4 74CF      1407            mov     a,#(__str_4 >> 8)
03C6 C0E0      1408            push    acc
03C8 7480      1409            mov     a,#0x80
03CA C0E0      1410            push    acc
03CC 120000    1411            lcall   _printf
03CF E581      1412            mov     a,sp
03D1 24FB      1413            add     a,#0xfb
03D3 F581      1414            mov     sp,a
03D5 22        1415            ret
03D6           1416   ;------------------------------------------------------------
03D6           1417   ;Allocation info for local variables in function 'BMM150_compensate_x'
03D6           1418   ;------------------------------------------------------------
03D6           1419   ;data_rhall                Allocated with name '_BMM150_compensate_x_PARM_2'
03D6           1420   ;mag_data_x                Allocated to registers r2 r3 r4 
03D6           1421   ;sloc0                     Allocated with name '_BMM150_compensate_x_sloc0_1_0'
03D6           1422   ;retval                    Allocated with name '_BMM150_compensate_x_retval_1_93'
03D6           1423   ;process_comp_x0           Allocated with name '_BMM150_compensate_x_process_comp_x0_1_93'
03D6           1424   ;process_comp_x1           Allocated with name '_BMM150_compensate_x_process_comp_x1_1_93'
03D6           1425   ;process_comp_x2           Allocated with name '_BMM150_compensate_x_process_comp_x2_1_93'
03D6           1426   ;process_comp_x3           Allocated with name '_BMM150_compensate_x_process_comp_x3_1_93'
03D6           1427   ;process_comp_x4           Allocated with name '_BMM150_compensate_x_process_comp_x4_1_93'
03D6           1428   ;process_comp_x5           Allocated with name '_BMM150_compensate_x_process_comp_x5_1_93'
03D6           1429   ;process_comp_x6           Allocated with name '_BMM150_compensate_x_process_comp_x6_1_93'
03D6           1430   ;process_comp_x7           Allocated with name '_BMM150_compensate_x_process_comp_x7_1_93'
03D6           1431   ;process_comp_x8           Allocated with name '_BMM150_compensate_x_process_comp_x8_1_93'
03D6           1432   ;process_comp_x9           Allocated with name '_BMM150_compensate_x_process_comp_x9_1_93'
03D6           1433   ;process_comp_x10          Allocated with name '_BMM150_compensate_x_process_comp_x10_1_93'
03D6           1434   ;------------------------------------------------------------
03D6           1435   ;        sensor_test.c:324: int16_t BMM150_compensate_x(int16_t *mag_data_x, int16_t *data_rhall)
03D6           1436   ;        -----------------------------------------
03D6           1437   ;         function BMM150_compensate_x
03D6           1438   ;        -----------------------------------------
03D6           1439   _BMM150_compensate_x:
03D6           1440   ;        sensor_test.c:342: if (*mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP){
03D6 ACF0      1441            mov     r4,b
03D8 120000    1442            lcall   __gptrget
03DB FA        1443            mov     r2,a
03DC A3        1444            inc     dptr
03DD 120000    1445            lcall   __gptrget
03E0 FB        1446            mov     r3,a
03E1 BA00F0    1447            cjne    r2,#0x00,L012019?
03E4 BBF0F0    1448            cjne    r3,#0xF0,L012019?
03E7 020000    1449            ljmp    L012011?
03EA           1450   L012019?:
03EA           1451   ;        sensor_test.c:343: if (*data_rhall != 0)
03EA ACC0      1452            mov     r4,_BMM150_compensate_x_PARM_2
03EC ADC1      1453            mov     r5,(_BMM150_compensate_x_PARM_2 + 1)
03EE AEC2      1454            mov     r6,(_BMM150_compensate_x_PARM_2 + 2)
03F0 8C82      1455            mov     dpl,r4
03F2 8D83      1456            mov     dph,r5
03F4 8EF0      1457            mov     b,r6
03F6 120000    1458            lcall   __gptrget
03F9 FC        1459            mov     r4,a
03FA A3        1460            inc     dptr
03FB 120000    1461            lcall   __gptrget
03FE FD        1462            mov     r5,a
03FF 4C        1463            orl     a,r4
0400 6000      1464            jz      L012005?
0402           1465   ;        sensor_test.c:346: process_comp_x0 = *data_rhall;
0402 90C290    1466            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
0405 EC        1467            mov     a,r4
0406 F0        1468            movx    @dptr,a
0407 A3        1469            inc     dptr
0408 ED        1470            mov     a,r5
0409 F0        1471            movx    @dptr,a
040A 8000      1472            sjmp    L012006?
040C           1473   L012005?:
040C           1474   ;        sensor_test.c:348: else if (dig_xyz1 != 0)
040C E5F0      1475            mov     a,_dig_xyz1
040E 6000      1476            jz      L012002?
0410           1477   ;        sensor_test.c:350: process_comp_x0 = dig_xyz1;
0410 90C290    1478            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
0413 E5F0      1479            mov     a,_dig_xyz1
0415 F0        1480            movx    @dptr,a
0416 E5F0      1481            mov     a,_dig_xyz1
0418 33        1482            rlc     a
0419 95E0      1483            subb    a,acc
041B A3        1484            inc     dptr
041C F0        1485            movx    @dptr,a
041D 8000      1486            sjmp    L012006?
041F           1487   L012002?:
041F           1488   ;        sensor_test.c:354: process_comp_x0 = 0;
041F 90C290    1489            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
0422 E4        1490            clr     a
0423 F0        1491            movx    @dptr,a
0424 A3        1492            inc     dptr
0425 F0        1493            movx    @dptr,a
0426           1494   L012006?:
0426           1495   ;        sensor_test.c:356: if (process_comp_x0 != 0)
0426 90C290    1496            mov     dptr,#_BMM150_compensate_x_process_comp_x0_1_93
0429 E0        1497            movx    a,@dptr
042A FC        1498            mov     r4,a
042B A3        1499            inc     dptr
042C E0        1500            movx    a,@dptr
042D FD        1501            mov     r5,a
042E 4C        1502            orl     a,r4
042F 7000      1503            jnz     L012022?
0431 020000    1504            ljmp    L012008?
0434           1505   L012022?:
0434           1506   ;        sensor_test.c:359: process_comp_x1 = ((int32_t)dig_xyz1) * 16384;
0434 E5F0      1507            mov     a,_dig_xyz1
0436 FE        1508            mov     r6,a
0437 33        1509            rlc     a
0438 95E0      1510            subb    a,acc
043A F8        1511            mov     r0,a
043B C8        1512            xch     a,r0
043C 5403      1513            anl     a,#0x03
043E A2E0      1514            mov     c,acc.0
0440 C8        1515            xch     a,r0
0441 13        1516            rrc     a
0442 C8        1517            xch     a,r0
0443 13        1518            rrc     a
0444 A2E0      1519            mov     c,acc.0
0446 C8        1520            xch     a,r0
0447 13        1521            rrc     a
0448 C8        1522            xch     a,r0
0449 13        1523            rrc     a
044A C8        1524            xch     a,r0
044B F9        1525            mov     r1,a
044C EE        1526            mov     a,r6
044D 03        1527            rr      a
044E 03        1528            rr      a
044F 54C0      1529            anl     a,#0xc0
0451 FF        1530            mov     r7,a
0452 EE        1531            mov     a,r6
0453 03        1532            rr      a
0454 03        1533            rr      a
0455 543F      1534            anl     a,#0x3f
0457 48        1535            orl     a,r0
0458 F8        1536            mov     r0,a
0459 7E00      1537            mov     r6,#0x00
045B           1538   ;        sensor_test.c:360: process_comp_x2 = ((uint16_t)(process_comp_x1 / process_comp_x0)) - ((uint16_t)0x4000);
045B 8C00      1539            mov     __divslong_PARM_2,r4
045D 8D01      1540            mov     (__divslong_PARM_2 + 1),r5
045F 750200    1541            mov     (__divslong_PARM_2 + 2),#0x00
0462 750300    1542            mov     (__divslong_PARM_2 + 3),#0x00
0465 8E82      1543            mov     dpl,r6
0467 8F83      1544            mov     dph,r7
0469 88F0      1545            mov     b,r0
046B E9        1546            mov     a,r1
046C C002      1547            push    ar2
046E C003      1548            push    ar3
0470 120000    1549            lcall   __divslong
0473 AC82      1550            mov     r4,dpl
0475 E583      1551            mov     a,dph
0477 24C0      1552            add     a,#0xc0
0479 FD        1553            mov     r5,a
047A           1554   ;        sensor_test.c:362: process_comp_x3 = (((int32_t)retval) * ((int32_t)retval));
047A 8C06      1555            mov     ar6,r4
047C 8D07      1556            mov     ar7,r5
047E 8EB8      1557            mov     _BMM150_compensate_x_sloc0_1_0,r6
0480 EF        1558            mov     a,r7
0481 F5B9      1559            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),a
0483 33        1560            rlc     a
0484 95E0      1561            subb    a,acc
0486 F5BA      1562            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),a
0488 F5BB      1563            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
048A 8C06      1564            mov     ar6,r4
048C 8D07      1565            mov     ar7,r5
048E 8E00      1566            mov     __mullong_PARM_2,r6
0490 EF        1567            mov     a,r7
0491 F501      1568            mov     (__mullong_PARM_2 + 1),a
0493 33        1569            rlc     a
0494 95E0      1570            subb    a,acc
0496 F502      1571            mov     (__mullong_PARM_2 + 2),a
0498 F503      1572            mov     (__mullong_PARM_2 + 3),a
049A           1573   ;        sensor_test.c:363: process_comp_x4 = (((int32_t)dig_xy2) * (process_comp_x3 / 128));
049A 85B882    1574            mov     dpl,_BMM150_compensate_x_sloc0_1_0
049D 85B983    1575            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
04A0 85BAF0    1576            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
04A3 E5BB      1577            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
04A5 C004      1578            push    ar4
04A7 C005      1579            push    ar5
04A9 120000    1580            lcall   __mullong
04AC 8582B8    1581            mov     _BMM150_compensate_x_sloc0_1_0,dpl
04AF 8583B9    1582            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
04B2 85F0BA    1583            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
04B5 F5BB      1584            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
04B7 E530      1585            mov     a,_dig_xy2
04B9 FE        1586            mov     r6,a
04BA 33        1587            rlc     a
04BB 95E0      1588            subb    a,acc
04BD FF        1589            mov     r7,a
04BE F8        1590            mov     r0,a
04BF F9        1591            mov     r1,a
04C0 750080    1592            mov     __divslong_PARM_2,#0x80
04C3 E4        1593            clr     a
04C4 F501      1594            mov     (__divslong_PARM_2 + 1),a
04C6 F502      1595            mov     (__divslong_PARM_2 + 2),a
04C8 F503      1596            mov     (__divslong_PARM_2 + 3),a
04CA 85B882    1597            mov     dpl,_BMM150_compensate_x_sloc0_1_0
04CD 85B983    1598            mov     dph,(_BMM150_compensate_x_sloc0_1_0 + 1)
04D0 85BAF0    1599            mov     b,(_BMM150_compensate_x_sloc0_1_0 + 2)
04D3 E5BB      1600            mov     a,(_BMM150_compensate_x_sloc0_1_0 + 3)
04D5 C006      1601            push    ar6
04D7 C007      1602            push    ar7
04D9 C000      1603            push    ar0
04DB C001      1604            push    ar1
04DD 120000    1605            lcall   __divslong
04E0 858200    1606            mov     __mullong_PARM_2,dpl
04E3 858301    1607            mov     (__mullong_PARM_2 + 1),dph
04E6 85F002    1608            mov     (__mullong_PARM_2 + 2),b
04E9 F503      1609            mov     (__mullong_PARM_2 + 3),a
04EB D001      1610            pop     ar1
04ED D000      1611            pop     ar0
04EF D007      1612            pop     ar7
04F1 D006      1613            pop     ar6
04F3           1614   ;        sensor_test.c:364: process_comp_x5 = (int32_t)(((int16_t)dig_xy1) * 128);
04F3 8E82      1615            mov     dpl,r6
04F5 8F83      1616            mov     dph,r7
04F7 88F0      1617            mov     b,r0
04F9 E9        1618            mov     a,r1
04FA 120000    1619            lcall   __mullong
04FD 8582B8    1620            mov     _BMM150_compensate_x_sloc0_1_0,dpl
0500 8583B9    1621            mov     (_BMM150_compensate_x_sloc0_1_0 + 1),dph
0503 85F0BA    1622            mov     (_BMM150_compensate_x_sloc0_1_0 + 2),b
0506 F5BB      1623            mov     (_BMM150_compensate_x_sloc0_1_0 + 3),a
0508 D005      1624            pop     ar5
050A D004      1625            pop     ar4
050C E570      1626            mov     a,_dig_xy1
050E FE        1627            mov     r6,a
050F 33        1628            rlc     a
0510 95E0      1629            subb    a,acc
0512 5401      1630            anl     a,#0x01
0514 A2E0      1631            mov     c,acc.0
0516 CE        1632            xch     a,r6
0517 13        1633            rrc     a
0518 CE        1634            xch     a,r6
0519 13        1635            rrc     a
051A CE        1636            xch     a,r6
051B 8E00      1637            mov     __mullong_PARM_2,r6
051D F501      1638            mov     (__mullong_PARM_2 + 1),a
051F 33        1639            rlc     a
0520 95E0      1640            subb    a,acc
0522 F502      1641            mov     (__mullong_PARM_2 + 2),a
0524 F503      1642            mov     (__mullong_PARM_2 + 3),a
0526           1643   ;        sensor_test.c:365: process_comp_x6 = ((int32_t)retval) * process_comp_x5;
0526 ED        1644            mov     a,r5
0527 33        1645            rlc     a
0528 95E0      1646            subb    a,acc
052A FE        1647            mov     r6,a
052B           1648   ;        sensor_test.c:366: process_comp_x7 = (((process_comp_x4 + process_comp_x6) / 512) + ((int32_t)0x100000));
052B 8C82      1649            mov     dpl,r4
052D 8D83      1650            mov     dph,r5
052F 8EF0      1651            mov     b,r6
0531 120000    1652            lcall   __mullong
0534 AC82      1653            mov     r4,dpl
0536 AD83      1654            mov     r5,dph
0538 AEF0      1655            mov     r6,b
053A FF        1656            mov     r7,a
053B EC        1657            mov     a,r4
053C 25B8      1658            add     a,_BMM150_compensate_x_sloc0_1_0
053E FC        1659            mov     r4,a
053F ED        1660            mov     a,r5
0540 35B9      1661            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 1)
0542 FD        1662            mov     r5,a
0543 EE        1663            mov     a,r6
0544 35BA      1664            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 2)
0546 FE        1665            mov     r6,a
0547 EF        1666            mov     a,r7
0548 35BB      1667            addc    a,(_BMM150_compensate_x_sloc0_1_0 + 3)
054A FF        1668            mov     r7,a
054B 750000    1669            mov     __divslong_PARM_2,#0x00
054E 750102    1670            mov     (__divslong_PARM_2 + 1),#0x02
0551 750200    1671            mov     (__divslong_PARM_2 + 2),#0x00
0554 750300    1672            mov     (__divslong_PARM_2 + 3),#0x00
0557 8C82      1673            mov     dpl,r4
0559 8D83      1674            mov     dph,r5
055B 8EF0      1675            mov     b,r6
055D EF        1676            mov     a,r7
055E 120000    1677            lcall   __divslong
0561 AC82      1678            mov     r4,dpl
0563 AD83      1679            mov     r5,dph
0565 AEF0      1680            mov     r6,b
0567 FF        1681            mov     r7,a
0568 7410      1682            mov     a,#0x10
056A 2E        1683            add     a,r6
056B FE        1684            mov     r6,a
056C E4        1685            clr     a
056D 3F        1686            addc    a,r7
056E FF        1687            mov     r7,a
056F           1688   ;        sensor_test.c:367: process_comp_x8 = ((int32_t)(((int16_t)dig_x2) + ((int16_t)0xA0)));
056F E568      1689            mov     a,_dig_x2
0571 F8        1690            mov     r0,a
0572 33        1691            rlc     a
0573 95E0      1692            subb    a,acc
0575 F9        1693            mov     r1,a
0576 74A0      1694            mov     a,#0xA0
0578 28        1695            add     a,r0
0579 F8        1696            mov     r0,a
057A E4        1697            clr     a
057B 39        1698            addc    a,r1
057C 8800      1699            mov     __mullong_PARM_2,r0
057E F501      1700            mov     (__mullong_PARM_2 + 1),a
0580 33        1701            rlc     a
0581 95E0      1702            subb    a,acc
0583 F502      1703            mov     (__mullong_PARM_2 + 2),a
0585 F503      1704            mov     (__mullong_PARM_2 + 3),a
0587           1705   ;        sensor_test.c:368: process_comp_x9 = ((process_comp_x7 * process_comp_x8) / 4096);
0587 8C82      1706            mov     dpl,r4
0589 8D83      1707            mov     dph,r5
058B 8EF0      1708            mov     b,r6
058D EF        1709            mov     a,r7
058E 120000    1710            lcall   __mullong
0591           1711   ;        sensor_test.c:369: process_comp_x10 = ((int32_t)*mag_data_x) * process_comp_x9;
0591 750000    1712            mov     __divslong_PARM_2,#0x00
0594 750110    1713            mov     (__divslong_PARM_2 + 1),#0x10
0597 750200    1714            mov     (__divslong_PARM_2 + 2),#0x00
059A 750300    1715            mov     (__divslong_PARM_2 + 3),#0x00
059D 120000    1716            lcall   __divslong
05A0 858200    1717            mov     __mullong_PARM_2,dpl
05A3 858301    1718            mov     (__mullong_PARM_2 + 1),dph
05A6 85F002    1719            mov     (__mullong_PARM_2 + 2),b
05A9 F503      1720            mov     (__mullong_PARM_2 + 3),a
05AB D003      1721            pop     ar3
05AD D002      1722            pop     ar2
05AF EB        1723            mov     a,r3
05B0 33        1724            rlc     a
05B1 95E0      1725            subb    a,acc
05B3 FC        1726            mov     r4,a
05B4           1727   ;        sensor_test.c:370: retval = ((int16_t)(process_comp_x10 / 8192));
05B4 8A82      1728            mov     dpl,r2
05B6 8B83      1729            mov     dph,r3
05B8 8CF0      1730            mov     b,r4
05BA 120000    1731            lcall   __mullong
05BD 750000    1732            mov     __divslong_PARM_2,#0x00
05C0 750120    1733            mov     (__divslong_PARM_2 + 1),#0x20
05C3 750200    1734            mov     (__divslong_PARM_2 + 2),#0x00
05C6 750300    1735            mov     (__divslong_PARM_2 + 3),#0x00
05C9 120000    1736            lcall   __divslong
05CC AA82      1737            mov     r2,dpl
05CE AB83      1738            mov     r3,dph
05D0           1739   ;        sensor_test.c:371: retval = (retval + (((int16_t)dig_x1) * 8)) / 16;
05D0 E5A8      1740            mov     a,_dig_x1
05D2 FC        1741            mov     r4,a
05D3 33        1742            rlc     a
05D4 95E0      1743            subb    a,acc
05D6 C4        1744            swap    a
05D7 03        1745            rr      a
05D8 54F8      1746            anl     a,#0xf8
05DA CC        1747            xch     a,r4
05DB C4        1748            swap    a
05DC 03        1749            rr      a
05DD CC        1750            xch     a,r4
05DE 6C        1751            xrl     a,r4
05DF CC        1752            xch     a,r4
05E0 54F8      1753            anl     a,#0xf8
05E2 CC        1754            xch     a,r4
05E3 6C        1755            xrl     a,r4
05E4 FD        1756            mov     r5,a
05E5 EC        1757            mov     a,r4
05E6 2A        1758            add     a,r2
05E7 F582      1759            mov     dpl,a
05E9 ED        1760            mov     a,r5
05EA 3B        1761            addc    a,r3
05EB F583      1762            mov     dph,a
05ED 750010    1763            mov     __divsint_PARM_2,#0x10
05F0 E4        1764            clr     a
05F1 F501      1765            mov     (__divsint_PARM_2 + 1),a
05F3 120000    1766            lcall   __divsint
05F6 E582      1767            mov     a,dpl
05F8 8583F0    1768            mov     b,dph
05FB 90C230    1769            mov     dptr,#_BMM150_compensate_x_retval_1_93
05FE F0        1770            movx    @dptr,a
05FF A3        1771            inc     dptr
0600 E5F0      1772            mov     a,b
0602 F0        1773            movx    @dptr,a
0603 8000      1774            sjmp    L012012?
0605           1775   L012008?:
0605           1776   ;        sensor_test.c:374: retval = BMM150_OVERFLOW_OUTPUT; 
0605 90C230    1777            mov     dptr,#_BMM150_compensate_x_retval_1_93
0608 E4        1778            clr     a
0609 F0        1779            movx    @dptr,a
060A A3        1780            inc     dptr
060B 7480      1781            mov     a,#0x80
060D F0        1782            movx    @dptr,a
060E 8000      1783            sjmp    L012012?
0610           1784   L012011?:
0610           1785   ;        sensor_test.c:378: retval = BMM150_OVERFLOW_OUTPUT; 
0610 90C230    1786            mov     dptr,#_BMM150_compensate_x_retval_1_93
0613 E4        1787            clr     a
0614 F0        1788            movx    @dptr,a
0615 A3        1789            inc     dptr
0616 7480      1790            mov     a,#0x80
0618 F0        1791            movx    @dptr,a
0619           1792   L012012?:
0619           1793   ;        sensor_test.c:380: return retval; 
0619 90C230    1794            mov     dptr,#_BMM150_compensate_x_retval_1_93
061C E0        1795            movx    a,@dptr
061D FA        1796            mov     r2,a
061E A3        1797            inc     dptr
061F E0        1798            movx    a,@dptr
0620 8A82      1799            mov     dpl,r2
0622 F583      1800            mov     dph,a
0624 22        1801            ret
0625           1802   ;------------------------------------------------------------
0625           1803   ;Allocation info for local variables in function 'BMM150_compensate_y'
0625           1804   ;------------------------------------------------------------
0625           1805   ;data_rhall                Allocated with name '_BMM150_compensate_y_PARM_2'
0625           1806   ;mag_data_y                Allocated to registers r2 r3 r4 
0625           1807   ;sloc0                     Allocated with name '_BMM150_compensate_y_sloc0_1_0'
0625           1808   ;retval                    Allocated with name '_BMM150_compensate_y_retval_1_102'
0625           1809   ;process_comp_y0           Allocated with name '_BMM150_compensate_y_process_comp_y0_1_102'
0625           1810   ;process_comp_y1           Allocated with name '_BMM150_compensate_y_process_comp_y1_1_102'
0625           1811   ;process_comp_y2           Allocated with name '_BMM150_compensate_y_process_comp_y2_1_102'
0625           1812   ;process_comp_y3           Allocated with name '_BMM150_compensate_y_process_comp_y3_1_102'
0625           1813   ;process_comp_y4           Allocated with name '_BMM150_compensate_y_process_comp_y4_1_102'
0625           1814   ;process_comp_y5           Allocated with name '_BMM150_compensate_y_process_comp_y5_1_102'
0625           1815   ;process_comp_y6           Allocated with name '_BMM150_compensate_y_process_comp_y6_1_102'
0625           1816   ;process_comp_y7           Allocated with name '_BMM150_compensate_y_process_comp_y7_1_102'
0625           1817   ;process_comp_y8           Allocated with name '_BMM150_compensate_y_process_comp_y8_1_102'
0625           1818   ;process_comp_y9           Allocated with name '_BMM150_compensate_y_process_comp_y9_1_102'
0625           1819   ;------------------------------------------------------------
0625           1820   ;        sensor_test.c:383: int16_t BMM150_compensate_y (int16_t *mag_data_y, int16_t *data_rhall)
0625           1821   ;        -----------------------------------------
0625           1822   ;         function BMM150_compensate_y
0625           1823   ;        -----------------------------------------
0625           1824   _BMM150_compensate_y:
0625           1825   ;        sensor_test.c:401: if (*mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP)
0625 ACF0      1826            mov     r4,b
0627 120000    1827            lcall   __gptrget
062A FA        1828            mov     r2,a
062B A3        1829            inc     dptr
062C 120000    1830            lcall   __gptrget
062F FB        1831            mov     r3,a
0630 BA00A0    1832            cjne    r2,#0x00,L013019?
0633 BBF0A0    1833            cjne    r3,#0xF0,L013019?
0636 020000    1834            ljmp    L013011?
0639           1835   L013019?:
0639           1836   ;        sensor_test.c:403: if (*data_rhall != 0)
0639 AC70      1837            mov     r4,_BMM150_compensate_y_PARM_2
063B AD71      1838            mov     r5,(_BMM150_compensate_y_PARM_2 + 1)
063D AE72      1839            mov     r6,(_BMM150_compensate_y_PARM_2 + 2)
063F 8C82      1840            mov     dpl,r4
0641 8D83      1841            mov     dph,r5
0643 8EF0      1842            mov     b,r6
0645 120000    1843            lcall   __gptrget
0648 FC        1844            mov     r4,a
0649 A3        1845            inc     dptr
064A 120000    1846            lcall   __gptrget
064D FD        1847            mov     r5,a
064E 4C        1848            orl     a,r4
064F 6000      1849            jz      L013005?
0651           1850   ;        sensor_test.c:406: process_comp_y0 = *data_rhall;
0651 90C350    1851            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
0654 EC        1852            mov     a,r4
0655 F0        1853            movx    @dptr,a
0656 A3        1854            inc     dptr
0657 ED        1855            mov     a,r5
0658 F0        1856            movx    @dptr,a
0659 8000      1857            sjmp    L013006?
065B           1858   L013005?:
065B           1859   ;        sensor_test.c:408: else if (dig_xyz1 != 0)
065B E5F0      1860            mov     a,_dig_xyz1
065D 6000      1861            jz      L013002?
065F           1862   ;        sensor_test.c:410: process_comp_y0 = dig_xyz1;
065F 90C350    1863            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
0662 E5F0      1864            mov     a,_dig_xyz1
0664 F0        1865            movx    @dptr,a
0665 E5F0      1866            mov     a,_dig_xyz1
0667 33        1867            rlc     a
0668 95E0      1868            subb    a,acc
066A A3        1869            inc     dptr
066B F0        1870            movx    @dptr,a
066C 8000      1871            sjmp    L013006?
066E           1872   L013002?:
066E           1873   ;        sensor_test.c:414: process_comp_y0 = 0;
066E 90C350    1874            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
0671 E4        1875            clr     a
0672 F0        1876            movx    @dptr,a
0673 A3        1877            inc     dptr
0674 F0        1878            movx    @dptr,a
0675           1879   L013006?:
0675           1880   ;        sensor_test.c:417: if (process_comp_y0 != 0)
0675 90C350    1881            mov     dptr,#_BMM150_compensate_y_process_comp_y0_1_102
0678 E0        1882            movx    a,@dptr
0679 FC        1883            mov     r4,a
067A A3        1884            inc     dptr
067B E0        1885            movx    a,@dptr
067C FD        1886            mov     r5,a
067D 4C        1887            orl     a,r4
067E 7000      1888            jnz     L013022?
0680 020000    1889            ljmp    L013008?
0683           1890   L013022?:
0683           1891   ;        sensor_test.c:420: process_comp_y1 = (((int32_t)dig_xyz1) * 16384) / process_comp_y0;
0683 E5F0      1892            mov     a,_dig_xyz1
0685 FE        1893            mov     r6,a
0686 33        1894            rlc     a
0687 95E0      1895            subb    a,acc
0689 F8        1896            mov     r0,a
068A C8        1897            xch     a,r0
068B 5403      1898            anl     a,#0x03
068D A2E0      1899            mov     c,acc.0
068F C8        1900            xch     a,r0
0690 13        1901            rrc     a
0691 C8        1902            xch     a,r0
0692 13        1903            rrc     a
0693 A2E0      1904            mov     c,acc.0
0695 C8        1905            xch     a,r0
0696 13        1906            rrc     a
0697 C8        1907            xch     a,r0
0698 13        1908            rrc     a
0699 C8        1909            xch     a,r0
069A F9        1910            mov     r1,a
069B EE        1911            mov     a,r6
069C 03        1912            rr      a
069D 03        1913            rr      a
069E 54C0      1914            anl     a,#0xc0
06A0 FF        1915            mov     r7,a
06A1 EE        1916            mov     a,r6
06A2 03        1917            rr      a
06A3 03        1918            rr      a
06A4 543F      1919            anl     a,#0x3f
06A6 48        1920            orl     a,r0
06A7 F8        1921            mov     r0,a
06A8 7E00      1922            mov     r6,#0x00
06AA 8C00      1923            mov     __divslong_PARM_2,r4
06AC 8D01      1924            mov     (__divslong_PARM_2 + 1),r5
06AE 750200    1925            mov     (__divslong_PARM_2 + 2),#0x00
06B1 750300    1926            mov     (__divslong_PARM_2 + 3),#0x00
06B4           1927   ;        sensor_test.c:421: process_comp_y2 = ((uint16_t)process_comp_y1) - ((uint16_t)0x4000);
06B4 8E82      1928            mov     dpl,r6
06B6 8F83      1929            mov     dph,r7
06B8 88F0      1930            mov     b,r0
06BA E9        1931            mov     a,r1
06BB C002      1932            push    ar2
06BD C003      1933            push    ar3
06BF 120000    1934            lcall   __divslong
06C2 AC82      1935            mov     r4,dpl
06C4 E583      1936            mov     a,dph
06C6 24C0      1937            add     a,#0xc0
06C8 FD        1938            mov     r5,a
06C9           1939   ;        sensor_test.c:423: process_comp_y3 = ((int32_t) retval) * ((int32_t)retval);
06C9 8C06      1940            mov     ar6,r4
06CB 8D07      1941            mov     ar7,r5
06CD 8E08      1942            mov     _BMM150_compensate_y_sloc0_1_0,r6
06CF EF        1943            mov     a,r7
06D0 F509      1944            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),a
06D2 33        1945            rlc     a
06D3 95E0      1946            subb    a,acc
06D5 F50A      1947            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),a
06D7 F50B      1948            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
06D9 8C06      1949            mov     ar6,r4
06DB 8D07      1950            mov     ar7,r5
06DD 8E00      1951            mov     __mullong_PARM_2,r6
06DF EF        1952            mov     a,r7
06E0 F501      1953            mov     (__mullong_PARM_2 + 1),a
06E2 33        1954            rlc     a
06E3 95E0      1955            subb    a,acc
06E5 F502      1956            mov     (__mullong_PARM_2 + 2),a
06E7 F503      1957            mov     (__mullong_PARM_2 + 3),a
06E9           1958   ;        sensor_test.c:424: process_comp_y4 = ((int32_t)dig_xy2) * (process_comp_y3 / 128);
06E9 850882    1959            mov     dpl,_BMM150_compensate_y_sloc0_1_0
06EC 850983    1960            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
06EF 850AF0    1961            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
06F2 E50B      1962            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
06F4 C004      1963            push    ar4
06F6 C005      1964            push    ar5
06F8 120000    1965            lcall   __mullong
06FB 858208    1966            mov     _BMM150_compensate_y_sloc0_1_0,dpl
06FE 858309    1967            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
0701 85F00A    1968            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
0704 F50B      1969            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0706 E530      1970            mov     a,_dig_xy2
0708 FE        1971            mov     r6,a
0709 33        1972            rlc     a
070A 95E0      1973            subb    a,acc
070C FF        1974            mov     r7,a
070D F8        1975            mov     r0,a
070E F9        1976            mov     r1,a
070F 750080    1977            mov     __divslong_PARM_2,#0x80
0712 E4        1978            clr     a
0713 F501      1979            mov     (__divslong_PARM_2 + 1),a
0715 F502      1980            mov     (__divslong_PARM_2 + 2),a
0717 F503      1981            mov     (__divslong_PARM_2 + 3),a
0719 850882    1982            mov     dpl,_BMM150_compensate_y_sloc0_1_0
071C 850983    1983            mov     dph,(_BMM150_compensate_y_sloc0_1_0 + 1)
071F 850AF0    1984            mov     b,(_BMM150_compensate_y_sloc0_1_0 + 2)
0722 E50B      1985            mov     a,(_BMM150_compensate_y_sloc0_1_0 + 3)
0724 C006      1986            push    ar6
0726 C007      1987            push    ar7
0728 C000      1988            push    ar0
072A C001      1989            push    ar1
072C 120000    1990            lcall   __divslong
072F 858200    1991            mov     __mullong_PARM_2,dpl
0732 858301    1992            mov     (__mullong_PARM_2 + 1),dph
0735 85F002    1993            mov     (__mullong_PARM_2 + 2),b
0738 F503      1994            mov     (__mullong_PARM_2 + 3),a
073A D001      1995            pop     ar1
073C D000      1996            pop     ar0
073E D007      1997            pop     ar7
0740 D006      1998            pop     ar6
0742           1999   ;        sensor_test.c:425: process_comp_y5 = ((int32_t)(((int16_t)dig_xy1) * 128));
0742 8E82      2000            mov     dpl,r6
0744 8F83      2001            mov     dph,r7
0746 88F0      2002            mov     b,r0
0748 E9        2003            mov     a,r1
0749 120000    2004            lcall   __mullong
074C 858208    2005            mov     _BMM150_compensate_y_sloc0_1_0,dpl
074F 858309    2006            mov     (_BMM150_compensate_y_sloc0_1_0 + 1),dph
0752 85F00A    2007            mov     (_BMM150_compensate_y_sloc0_1_0 + 2),b
0755 F50B      2008            mov     (_BMM150_compensate_y_sloc0_1_0 + 3),a
0757 D005      2009            pop     ar5
0759 D004      2010            pop     ar4
075B E570      2011            mov     a,_dig_xy1
075D FE        2012            mov     r6,a
075E 33        2013            rlc     a
075F 95E0      2014            subb    a,acc
0761 5401      2015            anl     a,#0x01
0763 A2E0      2016            mov     c,acc.0
0765 CE        2017            xch     a,r6
0766 13        2018            rrc     a
0767 CE        2019            xch     a,r6
0768 13        2020            rrc     a
0769 CE        2021            xch     a,r6
076A 8E00      2022            mov     __mullong_PARM_2,r6
076C F501      2023            mov     (__mullong_PARM_2 + 1),a
076E 33        2024            rlc     a
076F 95E0      2025            subb    a,acc
0771 F502      2026            mov     (__mullong_PARM_2 + 2),a
0773 F503      2027            mov     (__mullong_PARM_2 + 3),a
0775           2028   ;        sensor_test.c:426: process_comp_y6 = ((process_comp_y4 + (((int32_t)retval) * process_comp_y5)) / 512);
0775 ED        2029            mov     a,r5
0776 33        2030            rlc     a
0777 95E0      2031            subb    a,acc
0779 FE        2032            mov     r6,a
077A 8C82      2033            mov     dpl,r4
077C 8D83      2034            mov     dph,r5
077E 8EF0      2035            mov     b,r6
0780 120000    2036            lcall   __mullong
0783 AC82      2037            mov     r4,dpl
0785 AD83      2038            mov     r5,dph
0787 AEF0      2039            mov     r6,b
0789 FF        2040            mov     r7,a
078A EC        2041            mov     a,r4
078B 2508      2042            add     a,_BMM150_compensate_y_sloc0_1_0
078D FC        2043            mov     r4,a
078E ED        2044            mov     a,r5
078F 3509      2045            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 1)
0791 FD        2046            mov     r5,a
0792 EE        2047            mov     a,r6
0793 350A      2048            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 2)
0795 FE        2049            mov     r6,a
0796 EF        2050            mov     a,r7
0797 350B      2051            addc    a,(_BMM150_compensate_y_sloc0_1_0 + 3)
0799 FF        2052            mov     r7,a
079A 750000    2053            mov     __divslong_PARM_2,#0x00
079D 750102    2054            mov     (__divslong_PARM_2 + 1),#0x02
07A0 750200    2055            mov     (__divslong_PARM_2 + 2),#0x00
07A3 750300    2056            mov     (__divslong_PARM_2 + 3),#0x00
07A6           2057   ;        sensor_test.c:427: process_comp_y7 = ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)));
07A6 8C82      2058            mov     dpl,r4
07A8 8D83      2059            mov     dph,r5
07AA 8EF0      2060            mov     b,r6
07AC EF        2061            mov     a,r7
07AD 120000    2062            lcall   __divslong
07B0 AC82      2063            mov     r4,dpl
07B2 AD83      2064            mov     r5,dph
07B4 AEF0      2065            mov     r6,b
07B6 FF        2066            mov     r7,a
07B7 E5E8      2067            mov     a,_dig_y2
07B9 F8        2068            mov     r0,a
07BA 33        2069            rlc     a
07BB 95E0      2070            subb    a,acc
07BD F9        2071            mov     r1,a
07BE 74A0      2072            mov     a,#0xA0
07C0 28        2073            add     a,r0
07C1 F8        2074            mov     r0,a
07C2 E4        2075            clr     a
07C3 39        2076            addc    a,r1
07C4 8800      2077            mov     __mullong_PARM_2,r0
07C6 F501      2078            mov     (__mullong_PARM_2 + 1),a
07C8 33        2079            rlc     a
07C9 95E0      2080            subb    a,acc
07CB F502      2081            mov     (__mullong_PARM_2 + 2),a
07CD F503      2082            mov     (__mullong_PARM_2 + 3),a
07CF           2083   ;        sensor_test.c:428: process_comp_y8 = (((process_comp_y6 + ((int32_t)0x100000)) * process_comp_y7) / 4096);
07CF 7410      2084            mov     a,#0x10
07D1 2E        2085            add     a,r6
07D2 FE        2086            mov     r6,a
07D3 E4        2087            clr     a
07D4 3F        2088            addc    a,r7
07D5 8C82      2089            mov     dpl,r4
07D7 8D83      2090            mov     dph,r5
07D9 8EF0      2091            mov     b,r6
07DB 120000    2092            lcall   __mullong
07DE           2093   ;        sensor_test.c:429: process_comp_y9 = (((int32_t)*mag_data_y) * process_comp_y8);
07DE 750000    2094            mov     __divslong_PARM_2,#0x00
07E1 750110    2095            mov     (__divslong_PARM_2 + 1),#0x10
07E4 750200    2096            mov     (__divslong_PARM_2 + 2),#0x00
07E7 750300    2097            mov     (__divslong_PARM_2 + 3),#0x00
07EA 120000    2098            lcall   __divslong
07ED 858200    2099            mov     __mullong_PARM_2,dpl
07F0 858301    2100            mov     (__mullong_PARM_2 + 1),dph
07F3 85F002    2101            mov     (__mullong_PARM_2 + 2),b
07F6 F503      2102            mov     (__mullong_PARM_2 + 3),a
07F8 D003      2103            pop     ar3
07FA D002      2104            pop     ar2
07FC EB        2105            mov     a,r3
07FD 33        2106            rlc     a
07FE 95E0      2107            subb    a,acc
0800 FC        2108            mov     r4,a
0801           2109   ;        sensor_test.c:430: retval = (int16_t)(process_comp_y9 / 8192);
0801 8A82      2110            mov     dpl,r2
0803 8B83      2111            mov     dph,r3
0805 8CF0      2112            mov     b,r4
0807 120000    2113            lcall   __mullong
080A 750000    2114            mov     __divslong_PARM_2,#0x00
080D 750120    2115            mov     (__divslong_PARM_2 + 1),#0x20
0810 750200    2116            mov     (__divslong_PARM_2 + 2),#0x00
0813 750300    2117            mov     (__divslong_PARM_2 + 3),#0x00
0816 120000    2118            lcall   __divslong
0819 AA82      2119            mov     r2,dpl
081B AB83      2120            mov     r3,dph
081D           2121   ;        sensor_test.c:431: retval = (retval + (((int16_t)dig_y1) * 8)) / 16;
081D E528      2122            mov     a,_dig_y1
081F FC        2123            mov     r4,a
0820 33        2124            rlc     a
0821 95E0      2125            subb    a,acc
0823 C4        2126            swap    a
0824 03        2127            rr      a
0825 54F8      2128            anl     a,#0xf8
0827 CC        2129            xch     a,r4
0828 C4        2130            swap    a
0829 03        2131            rr      a
082A CC        2132            xch     a,r4
082B 6C        2133            xrl     a,r4
082C CC        2134            xch     a,r4
082D 54F8      2135            anl     a,#0xf8
082F CC        2136            xch     a,r4
0830 6C        2137            xrl     a,r4
0831 FD        2138            mov     r5,a
0832 EC        2139            mov     a,r4
0833 2A        2140            add     a,r2
0834 F582      2141            mov     dpl,a
0836 ED        2142            mov     a,r5
0837 3B        2143            addc    a,r3
0838 F583      2144            mov     dph,a
083A 750010    2145            mov     __divsint_PARM_2,#0x10
083D E4        2146            clr     a
083E F501      2147            mov     (__divsint_PARM_2 + 1),a
0840 120000    2148            lcall   __divsint
0843 E582      2149            mov     a,dpl
0845 8583F0    2150            mov     b,dph
0848 90C2F0    2151            mov     dptr,#_BMM150_compensate_y_retval_1_102
084B F0        2152            movx    @dptr,a
084C A3        2153            inc     dptr
084D E5F0      2154            mov     a,b
084F F0        2155            movx    @dptr,a
0850 8000      2156            sjmp    L013012?
0852           2157   L013008?:
0852           2158   ;        sensor_test.c:435: retval = BMM150_OVERFLOW_OUTPUT;
0852 90C2F0    2159            mov     dptr,#_BMM150_compensate_y_retval_1_102
0855 E4        2160            clr     a
0856 F0        2161            movx    @dptr,a
0857 A3        2162            inc     dptr
0858 7480      2163            mov     a,#0x80
085A F0        2164            movx    @dptr,a
085B 8000      2165            sjmp    L013012?
085D           2166   L013011?:
085D           2167   ;        sensor_test.c:441: retval = BMM150_OVERFLOW_OUTPUT;
085D 90C2F0    2168            mov     dptr,#_BMM150_compensate_y_retval_1_102
0860 E4        2169            clr     a
0861 F0        2170            movx    @dptr,a
0862 A3        2171            inc     dptr
0863 7480      2172            mov     a,#0x80
0865 F0        2173            movx    @dptr,a
0866           2174   L013012?:
0866           2175   ;        sensor_test.c:444: return retval;
0866 90C2F0    2176            mov     dptr,#_BMM150_compensate_y_retval_1_102
0869 E0        2177            movx    a,@dptr
086A FA        2178            mov     r2,a
086B A3        2179            inc     dptr
086C E0        2180            movx    a,@dptr
086D 8A82      2181            mov     dpl,r2
086F F583      2182            mov     dph,a
0871 22        2183            ret
0872           2184   ;------------------------------------------------------------
0872           2185   ;Allocation info for local variables in function 'BMM150_compensate_z'
0872           2186   ;------------------------------------------------------------
0872           2187   ;data_rhall                Allocated with name '_BMM150_compensate_z_PARM_2'
0872           2188   ;mag_data_z                Allocated to registers r2 r3 r4 
0872           2189   ;sloc0                     Allocated with name '_BMM150_compensate_z_sloc0_1_0'
0872           2190   ;sloc1                     Allocated with name '_BMM150_compensate_z_sloc1_1_0'
0872           2191   ;sloc2                     Allocated with name '_BMM150_compensate_z_sloc2_1_0'
0872           2192   ;retval                    Allocated with name '_BMM150_compensate_z_retval_1_111'
0872           2193   ;process_comp_z0           Allocated with name '_BMM150_compensate_z_process_comp_z0_1_111'
0872           2194   ;process_comp_z1           Allocated with name '_BMM150_compensate_z_process_comp_z1_1_111'
0872           2195   ;process_comp_z2           Allocated with name '_BMM150_compensate_z_process_comp_z2_1_111'
0872           2196   ;process_comp_z3           Allocated with name '_BMM150_compensate_z_process_comp_z3_1_111'
0872           2197   ;process_comp_z4           Allocated with name '_BMM150_compensate_z_process_comp_z4_1_111'
0872           2198   ;------------------------------------------------------------
0872           2199   ;        sensor_test.c:447: int16_t BMM150_compensate_z (int16_t *mag_data_z, int16_t *data_rhall){
0872           2200   ;        -----------------------------------------
0872           2201   ;         function BMM150_compensate_z
0872           2202   ;        -----------------------------------------
0872           2203   _BMM150_compensate_z:
0872           2204   ;        sensor_test.c:455: if (*mag_data_z != BMM150_OVERFLOW_ADCVAL_ZAXIS_HALL)
0872 ACF0      2205            mov     r4,b
0874 120000    2206            lcall   __gptrget
0877 FA        2207            mov     r2,a
0878 A3        2208            inc     dptr
0879 120000    2209            lcall   __gptrget
087C FB        2210            mov     r3,a
087D BA00A0    2211            cjne    r2,#0x00,L014024?
0880 BBC0A0    2212            cjne    r3,#0xC0,L014024?
0883 020000    2213            ljmp    L014013?
0886           2214   L014024?:
0886           2215   ;        sensor_test.c:457: if ((dig_z2 != 0) && (dig_z1 != 0) && (*data_rhall != 0) &&
0886 E568      2216            mov     a,_dig_z2
0888 7000      2217            jnz     L014025?
088A 020000    2218            ljmp    L014007?
088D           2219   L014025?:
088D E5A8      2220            mov     a,_dig_z1
088F 7000      2221            jnz     L014026?
0891 020000    2222            ljmp    L014007?
0894           2223   L014026?:
0894 AC20      2224            mov     r4,_BMM150_compensate_z_PARM_2
0896 AD21      2225            mov     r5,(_BMM150_compensate_z_PARM_2 + 1)
0898 AE22      2226            mov     r6,(_BMM150_compensate_z_PARM_2 + 2)
089A 8C82      2227            mov     dpl,r4
089C 8D83      2228            mov     dph,r5
089E 8EF0      2229            mov     b,r6
08A0 120000    2230            lcall   __gptrget
08A3 FC        2231            mov     r4,a
08A4 A3        2232            inc     dptr
08A5 120000    2233            lcall   __gptrget
08A8 FD        2234            mov     r5,a
08A9 4C        2235            orl     a,r4
08AA 7000      2236            jnz     L014027?
08AC 020000    2237            ljmp    L014007?
08AF           2238   L014027?:
08AF           2239   ;        sensor_test.c:458: (dig_xyz1 != 0))
08AF E5F0      2240            mov     a,_dig_xyz1
08B1 7000      2241            jnz     L014028?
08B3 020000    2242            ljmp    L014007?
08B6           2243   L014028?:
08B6           2244   ;        sensor_test.c:461: process_comp_z0 = ((int16_t)*data_rhall) - ((int16_t)dig_xyz1);
08B6 E5F0      2245            mov     a,_dig_xyz1
08B8 FE        2246            mov     r6,a
08B9 33        2247            rlc     a
08BA 95E0      2248            subb    a,acc
08BC FF        2249            mov     r7,a
08BD EC        2250            mov     a,r4
08BE C3        2251            clr     c
08BF 9E        2252            subb    a,r6
08C0 F558      2253            mov     _BMM150_compensate_z_sloc0_1_0,a
08C2 ED        2254            mov     a,r5
08C3 9F        2255            subb    a,r7
08C4 F559      2256            mov     (_BMM150_compensate_z_sloc0_1_0 + 1),a
08C6           2257   ;        sensor_test.c:462: process_comp_z1 = (((int32_t)dig_z3) * ((int32_t)(process_comp_z0))) / 4;
08C6 E528      2258            mov     a,_dig_z3
08C8 F8        2259            mov     r0,a
08C9 33        2260            rlc     a
08CA 95E0      2261            subb    a,acc
08CC F9        2262            mov     r1,a
08CD FE        2263            mov     r6,a
08CE FF        2264            mov     r7,a
08CF 855800    2265            mov     __mullong_PARM_2,_BMM150_compensate_z_sloc0_1_0
08D2 E559      2266            mov     a,(_BMM150_compensate_z_sloc0_1_0 + 1)
08D4 F501      2267            mov     (__mullong_PARM_2 + 1),a
08D6 33        2268            rlc     a
08D7 95E0      2269            subb    a,acc
08D9 F502      2270            mov     (__mullong_PARM_2 + 2),a
08DB F503      2271            mov     (__mullong_PARM_2 + 3),a
08DD 8882      2272            mov     dpl,r0
08DF 8983      2273            mov     dph,r1
08E1 8EF0      2274            mov     b,r6
08E3 EF        2275            mov     a,r7
08E4 C002      2276            push    ar2
08E6 C003      2277            push    ar3
08E8 C004      2278            push    ar4
08EA C005      2279            push    ar5
08EC 120000    2280            lcall   __mullong
08EF AE82      2281            mov     r6,dpl
08F1 AF83      2282            mov     r7,dph
08F3 A8F0      2283            mov     r0,b
08F5 F9        2284            mov     r1,a
08F6 750004    2285            mov     __divslong_PARM_2,#0x04
08F9 E4        2286            clr     a
08FA F501      2287            mov     (__divslong_PARM_2 + 1),a
08FC F502      2288            mov     (__divslong_PARM_2 + 2),a
08FE F503      2289            mov     (__divslong_PARM_2 + 3),a
0900           2290   ;        sensor_test.c:463: process_comp_z2 = (((int32_t)(*mag_data_z - dig_z4)) * 32768);
0900 8E82      2291            mov     dpl,r6
0902 8F83      2292            mov     dph,r7
0904 88F0      2293            mov     b,r0
0906 E9        2294            mov     a,r1
0907 120000    2295            lcall   __divslong
090A 8582A8    2296            mov     _BMM150_compensate_z_sloc1_1_0,dpl
090D 8583A9    2297            mov     (_BMM150_compensate_z_sloc1_1_0 + 1),dph
0910 85F0AA    2298            mov     (_BMM150_compensate_z_sloc1_1_0 + 2),b
0913 F5AB      2299            mov     (_BMM150_compensate_z_sloc1_1_0 + 3),a
0915 D005      2300            pop     ar5
0917 D004      2301            pop     ar4
0919 D003      2302            pop     ar3
091B D002      2303            pop     ar2
091D E5B0      2304            mov     a,_dig_z4
091F FE        2305            mov     r6,a
0920 33        2306            rlc     a
0921 95E0      2307            subb    a,acc
0923 FF        2308            mov     r7,a
0924 EA        2309            mov     a,r2
0925 C3        2310            clr     c
0926 9E        2311            subb    a,r6
0927 FA        2312            mov     r2,a
0928 EB        2313            mov     a,r3
0929 9F        2314            subb    a,r7
092A FB        2315            mov     r3,a
092B 33        2316            rlc     a
092C 95E0      2317            subb    a,acc
092E 8BFA      2318            mov     (_BMM150_compensate_z_sloc2_1_0 + 2),r3
0930 5401      2319            anl     a,#0x01
0932 A2E0      2320            mov     c,acc.0
0934 C5FA      2321            xch     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
0936 13        2322            rrc     a
0937 C5FA      2323            xch     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
0939 13        2324            rrc     a
093A C5FA      2325            xch     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
093C F5FB      2326            mov     (_BMM150_compensate_z_sloc2_1_0 + 3),a
093E EA        2327            mov     a,r2
093F 03        2328            rr      a
0940 5480      2329            anl     a,#0x80
0942 F5F9      2330            mov     (_BMM150_compensate_z_sloc2_1_0 + 1),a
0944 EA        2331            mov     a,r2
0945 C3        2332            clr     c
0946 13        2333            rrc     a
0947 45FA      2334            orl     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
0949 F5FA      2335            mov     (_BMM150_compensate_z_sloc2_1_0 + 2),a
094B 75F800    2336            mov     _BMM150_compensate_z_sloc2_1_0,#0x00
094E           2337   ;        sensor_test.c:464: process_comp_z3 = ((int32_t)dig_z1) * (((int16_t)*data_rhall) * 2);
094E E5A8      2338            mov     a,_dig_z1
0950 F8        2339            mov     r0,a
0951 33        2340            rlc     a
0952 95E0      2341            subb    a,acc
0954 F9        2342            mov     r1,a
0955 FA        2343            mov     r2,a
0956 FB        2344            mov     r3,a
0957 ED        2345            mov     a,r5
0958 CC        2346            xch     a,r4
0959 25E0      2347            add     a,acc
095B CC        2348            xch     a,r4
095C 33        2349            rlc     a
095D 8C00      2350            mov     __mullong_PARM_2,r4
095F F501      2351            mov     (__mullong_PARM_2 + 1),a
0961 33        2352            rlc     a
0962 95E0      2353            subb    a,acc
0964 F502      2354            mov     (__mullong_PARM_2 + 2),a
0966 F503      2355            mov     (__mullong_PARM_2 + 3),a
0968           2356   ;        sensor_test.c:465: process_comp_z4 = (int16_t)((process_comp_z3 + (32768)) / 65536);
0968 8882      2357            mov     dpl,r0
096A 8983      2358            mov     dph,r1
096C 8AF0      2359            mov     b,r2
096E EB        2360            mov     a,r3
096F 120000    2361            lcall   __mullong
0972 AA82      2362            mov     r2,dpl
0974 AB83      2363            mov     r3,dph
0976 ACF0      2364            mov     r4,b
0978 FD        2365            mov     r5,a
0979 7480      2366            mov     a,#0x80
097B 2B        2367            add     a,r3
097C FB        2368            mov     r3,a
097D E4        2369            clr     a
097E 3C        2370            addc    a,r4
097F FC        2371            mov     r4,a
0980 E4        2372            clr     a
0981 3D        2373            addc    a,r5
0982 FD        2374            mov     r5,a
0983 750000    2375            mov     __divslong_PARM_2,#0x00
0986 750100    2376            mov     (__divslong_PARM_2 + 1),#0x00
0989 750201    2377            mov     (__divslong_PARM_2 + 2),#0x01
098C 750300    2378            mov     (__divslong_PARM_2 + 3),#0x00
098F 8A82      2379            mov     dpl,r2
0991 8B83      2380            mov     dph,r3
0993 8CF0      2381            mov     b,r4
0995 ED        2382            mov     a,r5
0996 120000    2383            lcall   __divslong
0999 AA82      2384            mov     r2,dpl
099B AB83      2385            mov     r3,dph
099D           2386   ;        sensor_test.c:466: retval = ((process_comp_z2 - process_comp_z1) / (dig_z2 + process_comp_z4));
099D E5F8      2387            mov     a,_BMM150_compensate_z_sloc2_1_0
099F C3        2388            clr     c
09A0 95A8      2389            subb    a,_BMM150_compensate_z_sloc1_1_0
09A2 FC        2390            mov     r4,a
09A3 E5F9      2391            mov     a,(_BMM150_compensate_z_sloc2_1_0 + 1)
09A5 95A9      2392            subb    a,(_BMM150_compensate_z_sloc1_1_0 + 1)
09A7 FD        2393            mov     r5,a
09A8 E5FA      2394            mov     a,(_BMM150_compensate_z_sloc2_1_0 + 2)
09AA 95AA      2395            subb    a,(_BMM150_compensate_z_sloc1_1_0 + 2)
09AC FE        2396            mov     r6,a
09AD E5FB      2397            mov     a,(_BMM150_compensate_z_sloc2_1_0 + 3)
09AF 95AB      2398            subb    a,(_BMM150_compensate_z_sloc1_1_0 + 3)
09B1 FF        2399            mov     r7,a
09B2 E568      2400            mov     a,_dig_z2
09B4 F8        2401            mov     r0,a
09B5 33        2402            rlc     a
09B6 95E0      2403            subb    a,acc
09B8 F9        2404            mov     r1,a
09B9 EA        2405            mov     a,r2
09BA 28        2406            add     a,r0
09BB FA        2407            mov     r2,a
09BC EB        2408            mov     a,r3
09BD 39        2409            addc    a,r1
09BE 8A00      2410            mov     __divslong_PARM_2,r2
09C0 F501      2411            mov     (__divslong_PARM_2 + 1),a
09C2 33        2412            rlc     a
09C3 95E0      2413            subb    a,acc
09C5 F502      2414            mov     (__divslong_PARM_2 + 2),a
09C7 F503      2415            mov     (__divslong_PARM_2 + 3),a
09C9 8C82      2416            mov     dpl,r4
09CB 8D83      2417            mov     dph,r5
09CD 8EF0      2418            mov     b,r6
09CF EF        2419            mov     a,r7
09D0 120000    2420            lcall   __divslong
09D3 AA82      2421            mov     r2,dpl
09D5 AB83      2422            mov     r3,dph
09D7 ACF0      2423            mov     r4,b
09D9 FD        2424            mov     r5,a
09DA 90C3B0    2425            mov     dptr,#_BMM150_compensate_z_retval_1_111
09DD EA        2426            mov     a,r2
09DE F0        2427            movx    @dptr,a
09DF A3        2428            inc     dptr
09E0 EB        2429            mov     a,r3
09E1 F0        2430            movx    @dptr,a
09E2 A3        2431            inc     dptr
09E3 EC        2432            mov     a,r4
09E4 F0        2433            movx    @dptr,a
09E5 A3        2434            inc     dptr
09E6 ED        2435            mov     a,r5
09E7 F0        2436            movx    @dptr,a
09E8           2437   ;        sensor_test.c:469: if (retval > BMM150_POSITIVE_SATURATION_Z)
09E8 C3        2438            clr     c
09E9 74FF      2439            mov     a,#0xFF
09EB 9A        2440            subb    a,r2
09EC 747F      2441            mov     a,#0x7F
09EE 9B        2442            subb    a,r3
09EF E4        2443            clr     a
09F0 9C        2444            subb    a,r4
09F1 E4        2445            clr     a
09F2 6480      2446            xrl     a,#0x80
09F4 8DF0      2447            mov     b,r5
09F6 63F080    2448            xrl     b,#0x80
09F9 95F0      2449            subb    a,b
09FB 5000      2450            jnc     L014004?
09FD           2451   ;        sensor_test.c:471: retval = BMM150_POSITIVE_SATURATION_Z;
09FD 90C3B0    2452            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A00 74FF      2453            mov     a,#0xFF
0A02 F0        2454            movx    @dptr,a
0A03 A3        2455            inc     dptr
0A04 747F      2456            mov     a,#0x7F
0A06 F0        2457            movx    @dptr,a
0A07 A3        2458            inc     dptr
0A08 E4        2459            clr     a
0A09 F0        2460            movx    @dptr,a
0A0A A3        2461            inc     dptr
0A0B F0        2462            movx    @dptr,a
0A0C 8000      2463            sjmp    L014005?
0A0E           2464   L014004?:
0A0E           2465   ;        sensor_test.c:473: else if (retval < BMM150_NEGATIVE_SATURATION_Z)
0A0E C3        2466            clr     c
0A0F EA        2467            mov     a,r2
0A10 9401      2468            subb    a,#0x01
0A12 EB        2469            mov     a,r3
0A13 9480      2470            subb    a,#0x80
0A15 EC        2471            mov     a,r4
0A16 94FF      2472            subb    a,#0xFF
0A18 ED        2473            mov     a,r5
0A19 6480      2474            xrl     a,#0x80
0A1B 947F      2475            subb    a,#0x7f
0A1D 5000      2476            jnc     L014005?
0A1F           2477   ;        sensor_test.c:475: retval = BMM150_NEGATIVE_SATURATION_Z;
0A1F 90C3B0    2478            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A22 7401      2479            mov     a,#0x01
0A24 F0        2480            movx    @dptr,a
0A25 A3        2481            inc     dptr
0A26 7480      2482            mov     a,#0x80
0A28 F0        2483            movx    @dptr,a
0A29 A3        2484            inc     dptr
0A2A 74FF      2485            mov     a,#0xFF
0A2C F0        2486            movx    @dptr,a
0A2D A3        2487            inc     dptr
0A2E F0        2488            movx    @dptr,a
0A2F           2489   L014005?:
0A2F           2490   ;        sensor_test.c:479: retval = retval / 16;
0A2F 90C3B0    2491            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A32 E0        2492            movx    a,@dptr
0A33 FA        2493            mov     r2,a
0A34 A3        2494            inc     dptr
0A35 E0        2495            movx    a,@dptr
0A36 FB        2496            mov     r3,a
0A37 A3        2497            inc     dptr
0A38 E0        2498            movx    a,@dptr
0A39 FC        2499            mov     r4,a
0A3A A3        2500            inc     dptr
0A3B E0        2501            movx    a,@dptr
0A3C FD        2502            mov     r5,a
0A3D 750010    2503            mov     __divslong_PARM_2,#0x10
0A40 E4        2504            clr     a
0A41 F501      2505            mov     (__divslong_PARM_2 + 1),a
0A43 F502      2506            mov     (__divslong_PARM_2 + 2),a
0A45 F503      2507            mov     (__divslong_PARM_2 + 3),a
0A47 8A82      2508            mov     dpl,r2
0A49 8B83      2509            mov     dph,r3
0A4B 8CF0      2510            mov     b,r4
0A4D ED        2511            mov     a,r5
0A4E 120000    2512            lcall   __divslong
0A51 AA82      2513            mov     r2,dpl
0A53 AB83      2514            mov     r3,dph
0A55 ACF0      2515            mov     r4,b
0A57 FD        2516            mov     r5,a
0A58 90C3B0    2517            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A5B EA        2518            mov     a,r2
0A5C F0        2519            movx    @dptr,a
0A5D A3        2520            inc     dptr
0A5E EB        2521            mov     a,r3
0A5F F0        2522            movx    @dptr,a
0A60 A3        2523            inc     dptr
0A61 EC        2524            mov     a,r4
0A62 F0        2525            movx    @dptr,a
0A63 A3        2526            inc     dptr
0A64 ED        2527            mov     a,r5
0A65 F0        2528            movx    @dptr,a
0A66 8000      2529            sjmp    L014014?
0A68           2530   L014007?:
0A68           2531   ;        sensor_test.c:483: retval = BMM150_OVERFLOW_OUTPUT;
0A68 90C3B0    2532            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A6B E4        2533            clr     a
0A6C F0        2534            movx    @dptr,a
0A6D A3        2535            inc     dptr
0A6E 7480      2536            mov     a,#0x80
0A70 F0        2537            movx    @dptr,a
0A71 A3        2538            inc     dptr
0A72 74FF      2539            mov     a,#0xFF
0A74 F0        2540            movx    @dptr,a
0A75 A3        2541            inc     dptr
0A76 F0        2542            movx    @dptr,a
0A77 8000      2543            sjmp    L014014?
0A79           2544   L014013?:
0A79           2545   ;        sensor_test.c:489: retval = BMM150_OVERFLOW_OUTPUT;
0A79 90C3B0    2546            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A7C E4        2547            clr     a
0A7D F0        2548            movx    @dptr,a
0A7E A3        2549            inc     dptr
0A7F 7480      2550            mov     a,#0x80
0A81 F0        2551            movx    @dptr,a
0A82 A3        2552            inc     dptr
0A83 74FF      2553            mov     a,#0xFF
0A85 F0        2554            movx    @dptr,a
0A86 A3        2555            inc     dptr
0A87 F0        2556            movx    @dptr,a
0A88           2557   L014014?:
0A88           2558   ;        sensor_test.c:492: return (int16_t)retval;
0A88 90C3B0    2559            mov     dptr,#_BMM150_compensate_z_retval_1_111
0A8B E0        2560            movx    a,@dptr
0A8C FA        2561            mov     r2,a
0A8D A3        2562            inc     dptr
0A8E E0        2563            movx    a,@dptr
0A8F FB        2564            mov     r3,a
0A90 A3        2565            inc     dptr
0A91 E0        2566            movx    a,@dptr
0A92 A3        2567            inc     dptr
0A93 E0        2568            movx    a,@dptr
0A94 8A82      2569            mov     dpl,r2
0A96 8B83      2570            mov     dph,r3
0A98 22        2571            ret
0A99           2572   ;------------------------------------------------------------
0A99           2573   ;Allocation info for local variables in function 'BMM150_Read_Data'
0A99           2574   ;------------------------------------------------------------
0A99           2575   ;mag_y                     Allocated with name '_BMM150_Read_Data_PARM_2'
0A99           2576   ;mag_z                     Allocated with name '_BMM150_Read_Data_PARM_3'
0A99           2577   ;mag_x                     Allocated with name '_BMM150_Read_Data_mag_x_1_118'
0A99           2578   ;raw_x_lsb                 Allocated to registers r5 
0A99           2579   ;raw_x_msb                 Allocated to registers r6 
0A99           2580   ;raw_y_lsb                 Allocated with name '_BMM150_Read_Data_raw_y_lsb_1_119'
0A99           2581   ;raw_y_msb                 Allocated with name '_BMM150_Read_Data_raw_y_msb_1_119'
0A99           2582   ;raw_z_lsb                 Allocated with name '_BMM150_Read_Data_raw_z_lsb_1_119'
0A99           2583   ;raw_z_msb                 Allocated with name '_BMM150_Read_Data_raw_z_msb_1_119'
0A99           2584   ;raw_rhall_lsb             Allocated with name '_BMM150_Read_Data_raw_rhall_lsb_1_119'
0A99           2585   ;raw_rhall_msb             Allocated with name '_BMM150_Read_Data_raw_rhall_msb_1_119'
0A99           2586   ;raw_z                     Allocated with name '_BMM150_Read_Data_raw_z_1_119'
0A99           2587   ;x_val                     Allocated with name '_BMM150_Read_Data_x_val_1_119'
0A99           2588   ;y_val                     Allocated with name '_BMM150_Read_Data_y_val_1_119'
0A99           2589   ;z_val                     Allocated with name '_BMM150_Read_Data_z_val_1_119'
0A99           2590   ;rhall_val                 Allocated with name '_BMM150_Read_Data_rhall_val_1_119'
0A99           2591   ;z_raw                     Allocated to registers r3 r2 
0A99           2592   ;------------------------------------------------------------
0A99           2593   ;        sensor_test.c:495: void BMM150_Read_Data(int16_t *mag_x, int16_t *mag_y, int16_t *mag_z)
0A99           2594   ;        -----------------------------------------
0A99           2595   ;         function BMM150_Read_Data
0A99           2596   ;        -----------------------------------------
0A99           2597   _BMM150_Read_Data:
0A99 858248    2598            mov     _BMM150_Read_Data_mag_x_1_118,dpl
0A9C 858349    2599            mov     (_BMM150_Read_Data_mag_x_1_118 + 1),dph
0A9F 85F04A    2600            mov     (_BMM150_Read_Data_mag_x_1_118 + 2),b
0AA2           2601   ;        sensor_test.c:500: raw_x_lsb = SPI_read(BMM150_DATA_X_LSB);
0AA2 758242    2602            mov     dpl,#0x42
0AA5 120000    2603            lcall   _SPI_read
0AA8 AD82      2604            mov     r5,dpl
0AAA           2605   ;        sensor_test.c:501: raw_x_msb = SPI_read(BMM150_DATA_X_MSB);
0AAA 758243    2606            mov     dpl,#0x43
0AAD C005      2607            push    ar5
0AAF 120000    2608            lcall   _SPI_read
0AB2 AE82      2609            mov     r6,dpl
0AB4           2610   ;        sensor_test.c:502: raw_y_lsb = SPI_read(BMM150_DATA_Y_LSB);
0AB4 758244    2611            mov     dpl,#0x44
0AB7 C006      2612            push    ar6
0AB9 120000    2613            lcall   _SPI_read
0ABC 8582A8    2614            mov     _BMM150_Read_Data_raw_y_lsb_1_119,dpl
0ABF           2615   ;        sensor_test.c:503: raw_y_msb = SPI_read(BMM150_DATA_Y_MSB);
0ABF 758245    2616            mov     dpl,#0x45
0AC2 120000    2617            lcall   _SPI_read
0AC5 858208    2618            mov     _BMM150_Read_Data_raw_y_msb_1_119,dpl
0AC8           2619   ;        sensor_test.c:504: SPI_read_block(BMM150_DATA_X_LSB, raw_z, 2);
0AC8 75B0D8    2620            mov     _SPI_read_block_PARM_2,#_BMM150_Read_Data_raw_z_1_119
0ACB 75B100    2621            mov     (_SPI_read_block_PARM_2 + 1),#0x00
0ACE 75B240    2622            mov     (_SPI_read_block_PARM_2 + 2),#0x40
0AD1 756002    2623            mov     _SPI_read_block_PARM_3,#0x02
0AD4 758242    2624            mov     dpl,#0x42
0AD7 120000    2625            lcall   _SPI_read_block
0ADA           2626   ;        sensor_test.c:507: raw_z_lsb = raw_z[0];
0ADA 85D868    2627            mov     _BMM150_Read_Data_raw_z_lsb_1_119,_BMM150_Read_Data_raw_z_1_119
0ADD           2628   ;        sensor_test.c:508: raw_z_msb = raw_z[1];
0ADD 85D9C8    2629            mov     _BMM150_Read_Data_raw_z_msb_1_119,(_BMM150_Read_Data_raw_z_1_119 + 0x0001)
0AE0           2630   ;        sensor_test.c:509: raw_rhall_lsb = SPI_read(BMM150_RHALL_LSB); 
0AE0 758248    2631            mov     dpl,#0x48
0AE3 120000    2632            lcall   _SPI_read
0AE6 858228    2633            mov     _BMM150_Read_Data_raw_rhall_lsb_1_119,dpl
0AE9           2634   ;        sensor_test.c:510: raw_rhall_msb = SPI_read(BMM150_RHALL_MSB);
0AE9 758249    2635            mov     dpl,#0x49
0AEC 120000    2636            lcall   _SPI_read
0AEF 858288    2637            mov     _BMM150_Read_Data_raw_rhall_msb_1_119,dpl
0AF2           2638   ;        sensor_test.c:511: SPI_read_block(BMM150_DATA_X_LSB, raw_z, 2);
0AF2 75B0D8    2639            mov     _SPI_read_block_PARM_2,#_BMM150_Read_Data_raw_z_1_119
0AF5 75B100    2640            mov     (_SPI_read_block_PARM_2 + 1),#0x00
0AF8 75B240    2641            mov     (_SPI_read_block_PARM_2 + 2),#0x40
0AFB 756002    2642            mov     _SPI_read_block_PARM_3,#0x02
0AFE 758242    2643            mov     dpl,#0x42
0B01 120000    2644            lcall   _SPI_read_block
0B04 D006      2645            pop     ar6
0B06 D005      2646            pop     ar5
0B08           2647   ;        sensor_test.c:516: x_val = ((int16_t)((int8_t)raw_x_msb)) * 32 + ((raw_x_lsb & 0xF8) >> 3);
0B08 EE        2648            mov     a,r6
0B09 33        2649            rlc     a
0B0A 95E0      2650            subb    a,acc
0B0C C4        2651            swap    a
0B0D 23        2652            rl      a
0B0E 54E0      2653            anl     a,#0xe0
0B10 CE        2654            xch     a,r6
0B11 C4        2655            swap    a
0B12 23        2656            rl      a
0B13 CE        2657            xch     a,r6
0B14 6E        2658            xrl     a,r6
0B15 CE        2659            xch     a,r6
0B16 54E0      2660            anl     a,#0xe0
0B18 CE        2661            xch     a,r6
0B19 6E        2662            xrl     a,r6
0B1A FF        2663            mov     r7,a
0B1B 5305F8    2664            anl     ar5,#0xF8
0B1E ED        2665            mov     a,r5
0B1F C4        2666            swap    a
0B20 23        2667            rl      a
0B21 541F      2668            anl     a,#0x1f
0B23 FD        2669            mov     r5,a
0B24 7A00      2670            mov     r2,#0x00
0B26 2E        2671            add     a,r6
0B27 FB        2672            mov     r3,a
0B28 EA        2673            mov     a,r2
0B29 3F        2674            addc    a,r7
0B2A FA        2675            mov     r2,a
0B2B 8B28      2676            mov     _BMM150_Read_Data_x_val_1_119,r3
0B2D 8A29      2677            mov     (_BMM150_Read_Data_x_val_1_119 + 1),r2
0B2F           2678   ;        sensor_test.c:517: if (x_val > 4095){
0B2F C3        2679            clr     c
0B30 74FF      2680            mov     a,#0xFF
0B32 9B        2681            subb    a,r3
0B33 748F      2682            mov     a,#(0x0F ^ 0x80)
0B35 8AF0      2683            mov     b,r2
0B37 63F080    2684            xrl     b,#0x80
0B3A 95F0      2685            subb    a,b
0B3C 5000      2686            jnc     L015002?
0B3E           2687   ;        sensor_test.c:518: x_val = x_val - 8192;  // 2's complement sign correction
0B3E 8B28      2688            mov     _BMM150_Read_Data_x_val_1_119,r3
0B40 EA        2689            mov     a,r2
0B41 24E0      2690            add     a,#0xe0
0B43 F529      2691            mov     (_BMM150_Read_Data_x_val_1_119 + 1),a
0B45           2692   L015002?:
0B45           2693   ;        sensor_test.c:521: y_val = ((int16_t)((int8_t)raw_y_msb)) * 32 + ((raw_y_lsb & 0xF8) >> 3);
0B45 E508      2694            mov     a,_BMM150_Read_Data_raw_y_msb_1_119
0B47 FA        2695            mov     r2,a
0B48 33        2696            rlc     a
0B49 95E0      2697            subb    a,acc
0B4B C4        2698            swap    a
0B4C 23        2699            rl      a
0B4D 54E0      2700            anl     a,#0xe0
0B4F CA        2701            xch     a,r2
0B50 C4        2702            swap    a
0B51 23        2703            rl      a
0B52 CA        2704            xch     a,r2
0B53 6A        2705            xrl     a,r2
0B54 CA        2706            xch     a,r2
0B55 54E0      2707            anl     a,#0xe0
0B57 CA        2708            xch     a,r2
0B58 6A        2709            xrl     a,r2
0B59 FB        2710            mov     r3,a
0B5A 74F8      2711            mov     a,#0xF8
0B5C 55A8      2712            anl     a,_BMM150_Read_Data_raw_y_lsb_1_119
0B5E C4        2713            swap    a
0B5F 23        2714            rl      a
0B60 541F      2715            anl     a,#0x1f
0B62 FC        2716            mov     r4,a
0B63 7D00      2717            mov     r5,#0x00
0B65 2A        2718            add     a,r2
0B66 FA        2719            mov     r2,a
0B67 ED        2720            mov     a,r5
0B68 3B        2721            addc    a,r3
0B69 FB        2722            mov     r3,a
0B6A 8A78      2723            mov     _BMM150_Read_Data_y_val_1_119,r2
0B6C 8B79      2724            mov     (_BMM150_Read_Data_y_val_1_119 + 1),r3
0B6E           2725   ;        sensor_test.c:522: if (y_val > 4095) {
0B6E C3        2726            clr     c
0B6F 74FF      2727            mov     a,#0xFF
0B71 9A        2728            subb    a,r2
0B72 748F      2729            mov     a,#(0x0F ^ 0x80)
0B74 8BF0      2730            mov     b,r3
0B76 63F080    2731            xrl     b,#0x80
0B79 95F0      2732            subb    a,b
0B7B 5000      2733            jnc     L015004?
0B7D           2734   ;        sensor_test.c:523: y_val = y_val - 8192;  // 2's complement sign correction
0B7D 8A78      2735            mov     _BMM150_Read_Data_y_val_1_119,r2
0B7F EB        2736            mov     a,r3
0B80 24E0      2737            add     a,#0xe0
0B82 F579      2738            mov     (_BMM150_Read_Data_y_val_1_119 + 1),a
0B84           2739   L015004?:
0B84           2740   ;        sensor_test.c:530: z_raw = ((uint16_t)raw_z_msb << 7) | ((raw_z_lsb & 0xFE) >> 1);
0B84 AFC8      2741            mov     r7,_BMM150_Read_Data_raw_z_msb_1_119
0B86 E4        2742            clr     a
0B87 5401      2743            anl     a,#0x01
0B89 A2E0      2744            mov     c,acc.0
0B8B CF        2745            xch     a,r7
0B8C 13        2746            rrc     a
0B8D CF        2747            xch     a,r7
0B8E 13        2748            rrc     a
0B8F CF        2749            xch     a,r7
0B90 FA        2750            mov     r2,a
0B91 74FE      2751            mov     a,#0xFE
0B93 5568      2752            anl     a,_BMM150_Read_Data_raw_z_lsb_1_119
0B95 C3        2753            clr     c
0B96 13        2754            rrc     a
0B97 7C00      2755            mov     r4,#0x00
0B99 4F        2756            orl     a,r7
0B9A FB        2757            mov     r3,a
0B9B EC        2758            mov     a,r4
0B9C 4A        2759            orl     a,r2
0B9D FA        2760            mov     r2,a
0B9E           2761   ;        sensor_test.c:531: if (z_raw > 0x3FFF) z_val = z_raw - 0x8000;
0B9E C3        2762            clr     c
0B9F 74FF      2763            mov     a,#0xFF
0BA1 9B        2764            subb    a,r3
0BA2 743F      2765            mov     a,#0x3F
0BA4 9A        2766            subb    a,r2
0BA5 5000      2767            jnc     L015006?
0BA7 8BC8      2768            mov     _BMM150_Read_Data_z_val_1_119,r3
0BA9 EA        2769            mov     a,r2
0BAA 2480      2770            add     a,#0x80
0BAC F5C9      2771            mov     (_BMM150_Read_Data_z_val_1_119 + 1),a
0BAE 8000      2772            sjmp    L015007?
0BB0           2773   L015006?:
0BB0           2774   ;        sensor_test.c:532: else z_val = z_raw; 
0BB0 8BC8      2775            mov     _BMM150_Read_Data_z_val_1_119,r3
0BB2 8AC9      2776            mov     (_BMM150_Read_Data_z_val_1_119 + 1),r2
0BB4           2777   L015007?:
0BB4           2778   ;        sensor_test.c:535: rhall_val = ((uint16_t)raw_rhall_msb) * 64 + (raw_rhall_lsb & 0x3F); 
0BB4 AF88      2779            mov     r7,_BMM150_Read_Data_raw_rhall_msb_1_119
0BB6 E4        2780            clr     a
0BB7 5403      2781            anl     a,#0x03
0BB9 A2E0      2782            mov     c,acc.0
0BBB CF        2783            xch     a,r7
0BBC 13        2784            rrc     a
0BBD CF        2785            xch     a,r7
0BBE 13        2786            rrc     a
0BBF A2E0      2787            mov     c,acc.0
0BC1 CF        2788            xch     a,r7
0BC2 13        2789            rrc     a
0BC3 CF        2790            xch     a,r7
0BC4 13        2791            rrc     a
0BC5 CF        2792            xch     a,r7
0BC6 FA        2793            mov     r2,a
0BC7 743F      2794            mov     a,#0x3F
0BC9 5528      2795            anl     a,_BMM150_Read_Data_raw_rhall_lsb_1_119
0BCB 7C00      2796            mov     r4,#0x00
0BCD 2F        2797            add     a,r7
0BCE F528      2798            mov     _BMM150_Read_Data_rhall_val_1_119,a
0BD0 EC        2799            mov     a,r4
0BD1 3A        2800            addc    a,r2
0BD2 F529      2801            mov     (_BMM150_Read_Data_rhall_val_1_119 + 1),a
0BD4           2802   ;        sensor_test.c:539: *mag_x = BMM150_compensate_x(&x_val, &rhall_val);
0BD4 75C028    2803            mov     _BMM150_compensate_x_PARM_2,#_BMM150_Read_Data_rhall_val_1_119
0BD7 75C100    2804            mov     (_BMM150_compensate_x_PARM_2 + 1),#0x00
0BDA 75C240    2805            mov     (_BMM150_compensate_x_PARM_2 + 2),#0x40
0BDD 90BE28    2806            mov     dptr,#_BMM150_Read_Data_x_val_1_119
0BE0 75F040    2807            mov     b,#0x40
0BE3 120000    2808            lcall   _BMM150_compensate_x
0BE6 AA82      2809            mov     r2,dpl
0BE8 AB83      2810            mov     r3,dph
0BEA 854882    2811            mov     dpl,_BMM150_Read_Data_mag_x_1_118
0BED 854983    2812            mov     dph,(_BMM150_Read_Data_mag_x_1_118 + 1)
0BF0 854AF0    2813            mov     b,(_BMM150_Read_Data_mag_x_1_118 + 2)
0BF3 EA        2814            mov     a,r2
0BF4 120000    2815            lcall   __gptrput
0BF7 A3        2816            inc     dptr
0BF8 EB        2817            mov     a,r3
0BF9 120000    2818            lcall   __gptrput
0BFC           2819   ;        sensor_test.c:540: *mag_y = BMM150_compensate_y(&y_val, &rhall_val);
0BFC AAD0      2820            mov     r2,_BMM150_Read_Data_PARM_2
0BFE ABD1      2821            mov     r3,(_BMM150_Read_Data_PARM_2 + 1)
0C00 ACD2      2822            mov     r4,(_BMM150_Read_Data_PARM_2 + 2)
0C02 757028    2823            mov     _BMM150_compensate_y_PARM_2,#_BMM150_Read_Data_rhall_val_1_119
0C05 757100    2824            mov     (_BMM150_compensate_y_PARM_2 + 1),#0x00
0C08 757240    2825            mov     (_BMM150_compensate_y_PARM_2 + 2),#0x40
0C0B 90BE78    2826            mov     dptr,#_BMM150_Read_Data_y_val_1_119
0C0E 75F040    2827            mov     b,#0x40
0C11 C002      2828            push    ar2
0C13 C003      2829            push    ar3
0C15 C004      2830            push    ar4
0C17 120000    2831            lcall   _BMM150_compensate_y
0C1A AD82      2832            mov     r5,dpl
0C1C AE83      2833            mov     r6,dph
0C1E D004      2834            pop     ar4
0C20 D003      2835            pop     ar3
0C22 D002      2836            pop     ar2
0C24 8A82      2837            mov     dpl,r2
0C26 8B83      2838            mov     dph,r3
0C28 8CF0      2839            mov     b,r4
0C2A ED        2840            mov     a,r5
0C2B 120000    2841            lcall   __gptrput
0C2E A3        2842            inc     dptr
0C2F EE        2843            mov     a,r6
0C30 120000    2844            lcall   __gptrput
0C33           2845   ;        sensor_test.c:541: *mag_z = BMM150_compensate_z(&z_val, &rhall_val);
0C33 AA80      2846            mov     r2,_BMM150_Read_Data_PARM_3
0C35 AB81      2847            mov     r3,(_BMM150_Read_Data_PARM_3 + 1)
0C37 AC82      2848            mov     r4,(_BMM150_Read_Data_PARM_3 + 2)
0C39 752028    2849            mov     _BMM150_compensate_z_PARM_2,#_BMM150_Read_Data_rhall_val_1_119
0C3C 752100    2850            mov     (_BMM150_compensate_z_PARM_2 + 1),#0x00
0C3F 752240    2851            mov     (_BMM150_compensate_z_PARM_2 + 2),#0x40
0C42 90BEC8    2852            mov     dptr,#_BMM150_Read_Data_z_val_1_119
0C45 75F040    2853            mov     b,#0x40
0C48 C002      2854            push    ar2
0C4A C003      2855            push    ar3
0C4C C004      2856            push    ar4
0C4E 120000    2857            lcall   _BMM150_compensate_z
0C51 AD82      2858            mov     r5,dpl
0C53 AE83      2859            mov     r6,dph
0C55 D004      2860            pop     ar4
0C57 D003      2861            pop     ar3
0C59 D002      2862            pop     ar2
0C5B 8A82      2863            mov     dpl,r2
0C5D 8B83      2864            mov     dph,r3
0C5F 8CF0      2865            mov     b,r4
0C61 ED        2866            mov     a,r5
0C62 120000    2867            lcall   __gptrput
0C65 A3        2868            inc     dptr
0C66 EE        2869            mov     a,r6
0C67 020000    2870            ljmp    __gptrput
0C6A           2871   ;------------------------------------------------------------
0C6A           2872   ;Allocation info for local variables in function 'main'
0C6A           2873   ;------------------------------------------------------------
0C6A           2874   ;i                         Allocated with name '_main_i_1_123'
0C6A           2875   ;mag_x                     Allocated with name '_main_mag_x_1_123'
0C6A           2876   ;mag_y                     Allocated with name '_main_mag_y_1_123'
0C6A           2877   ;mag_z                     Allocated with name '_main_mag_z_1_123'
0C6A           2878   ;angle                     Allocated to registers r6 r7 r0 r1 
0C6A           2879   ;declination_angle         Allocated to registers 
0C6A           2880   ;avg_angle                 Allocated with name '_main_avg_angle_1_123'
0C6A           2881   ;alpha                     Allocated to registers 
0C6A           2882   ;------------------------------------------------------------
0C6A           2883   ;        sensor_test.c:547: void main (void)
0C6A           2884   ;        -----------------------------------------
0C6A           2885   ;         function main
0C6A           2886   ;        -----------------------------------------
0C6A           2887   _main:
0C6A           2888   ;        sensor_test.c:554: waitms(500);
0C6A 9001F4    2889            mov     dptr,#0x01F4
0C6D 120000    2890            lcall   _waitms
0C70           2891   ;        sensor_test.c:555: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0C70 7420      2892            mov     a,#__str_5
0C72 C0E0      2893            push    acc
0C74 74D9      2894            mov     a,#(__str_5 >> 8)
0C76 C0E0      2895            push    acc
0C78 7480      2896            mov     a,#0x80
0C7A C0E0      2897            push    acc
0C7C 120000    2898            lcall   _printf
0C7F 1581      2899            dec     sp
0C81 1581      2900            dec     sp
0C83 1581      2901            dec     sp
0C85           2902   ;        sensor_test.c:559: __FILE__, __DATE__, __TIME__);
0C85           2903   ;        sensor_test.c:558: "Compiled: %s, %s\n\n",
0C85 7460      2904            mov     a,#__str_9
0C87 C0E0      2905            push    acc
0C89 74D9      2906            mov     a,#(__str_9 >> 8)
0C8B C0E0      2907            push    acc
0C8D 7480      2908            mov     a,#0x80
0C8F C0E0      2909            push    acc
0C91 74A0      2910            mov     a,#__str_8
0C93 C0E0      2911            push    acc
0C95 74D9      2912            mov     a,#(__str_8 >> 8)
0C97 C0E0      2913            push    acc
0C99 7480      2914            mov     a,#0x80
0C9B C0E0      2915            push    acc
0C9D 74E0      2916            mov     a,#__str_7
0C9F C0E0      2917            push    acc
0CA1 74D9      2918            mov     a,#(__str_7 >> 8)
0CA3 C0E0      2919            push    acc
0CA5 7480      2920            mov     a,#0x80
0CA7 C0E0      2921            push    acc
0CA9 7420      2922            mov     a,#__str_6
0CAB C0E0      2923            push    acc
0CAD 74DA      2924            mov     a,#(__str_6 >> 8)
0CAF C0E0      2925            push    acc
0CB1 7480      2926            mov     a,#0x80
0CB3 C0E0      2927            push    acc
0CB5 120000    2928            lcall   _printf
0CB8 E581      2929            mov     a,sp
0CBA 24F4      2930            add     a,#0xf4
0CBC F581      2931            mov     sp,a
0CBE           2932   ;        sensor_test.c:561: Set_Pin_Output(0x03); 
0CBE 758203    2933            mov     dpl,#0x03
0CC1 120000    2934            lcall   _Set_Pin_Output
0CC4           2935   ;        sensor_test.c:562: BMM150_Init();
0CC4 120000    2936            lcall   _BMM150_Init
0CC7           2937   ;        sensor_test.c:564: avg_angle = 0.0; 
0CC7 75B000    2938            mov     _main_avg_angle_1_123,#0x00
0CCA 75B100    2939            mov     (_main_avg_angle_1_123 + 1),#0x00
0CCD 75B200    2940            mov     (_main_avg_angle_1_123 + 2),#0x00
0CD0 75B300    2941            mov     (_main_avg_angle_1_123 + 3),#0x00
0CD3           2942   ;        sensor_test.c:569: for (i = 0; i < 50; i++){
0CD3           2943   L016018?:
0CD3 756800    2944            mov     _main_i_1_123,#0x00
0CD6           2945   L016009?:
0CD6 74CE      2946            mov     a,#0x100 - 0x32
0CD8 2568      2947            add     a,_main_i_1_123
0CDA 5000      2948            jnc     L016021?
0CDC 020000    2949            ljmp    L016012?
0CDF           2950   L016021?:
0CDF           2951   ;        sensor_test.c:570: BMM150_Read_Data(&mag_x, &mag_y, &mag_z);
0CDF 75D010    2952            mov     _BMM150_Read_Data_PARM_2,#_main_mag_y_1_123
0CE2 75D100    2953            mov     (_BMM150_Read_Data_PARM_2 + 1),#0x00
0CE5 75D240    2954            mov     (_BMM150_Read_Data_PARM_2 + 2),#0x40
0CE8 758060    2955            mov     _BMM150_Read_Data_PARM_3,#_main_mag_z_1_123
0CEB 758100    2956            mov     (_BMM150_Read_Data_PARM_3 + 1),#0x00
0CEE 758240    2957            mov     (_BMM150_Read_Data_PARM_3 + 2),#0x40
0CF1 90BFB8    2958            mov     dptr,#_main_mag_x_1_123
0CF4 75F040    2959            mov     b,#0x40
0CF7 120000    2960            lcall   _BMM150_Read_Data
0CFA           2961   ;        sensor_test.c:571: angle = atan2f((float)mag_y, (float)mag_x) * 180.0 / M_PI;
0CFA 851082    2962            mov     dpl,_main_mag_y_1_123
0CFD 851183    2963            mov     dph,(_main_mag_y_1_123 + 1)
0D00 120000    2964            lcall   ___sint2fs
0D03 AF82      2965            mov     r7,dpl
0D05 A883      2966            mov     r0,dph
0D07 A9F0      2967            mov     r1,b
0D09 FE        2968            mov     r6,a
0D0A 85B882    2969            mov     dpl,_main_mag_x_1_123
0D0D 85B983    2970            mov     dph,(_main_mag_x_1_123 + 1)
0D10 C006      2971            push    ar6
0D12 C007      2972            push    ar7
0D14 C000      2973            push    ar0
0D16 C001      2974            push    ar1
0D18 120000    2975            lcall   ___sint2fs
0D1B 858200    2976            mov     _atan2f_PARM_2,dpl
0D1E 858301    2977            mov     (_atan2f_PARM_2 + 1),dph
0D21 85F002    2978            mov     (_atan2f_PARM_2 + 2),b
0D24 F503      2979            mov     (_atan2f_PARM_2 + 3),a
0D26 D001      2980            pop     ar1
0D28 D000      2981            pop     ar0
0D2A D007      2982            pop     ar7
0D2C D006      2983            pop     ar6
0D2E 8F82      2984            mov     dpl,r7
0D30 8883      2985            mov     dph,r0
0D32 89F0      2986            mov     b,r1
0D34 EE        2987            mov     a,r6
0D35 120000    2988            lcall   _atan2f
0D38 AE82      2989            mov     r6,dpl
0D3A AF83      2990            mov     r7,dph
0D3C A8F0      2991            mov     r0,b
0D3E F9        2992            mov     r1,a
0D3F C006      2993            push    ar6
0D41 C007      2994            push    ar7
0D43 C000      2995            push    ar0
0D45 C001      2996            push    ar1
0D47 900000    2997            mov     dptr,#0x0000
0D4A 75F034    2998            mov     b,#0x34
0D4D 7443      2999            mov     a,#0x43
0D4F 120000    3000            lcall   ___fsmul
0D52 AE82      3001            mov     r6,dpl
0D54 AF83      3002            mov     r7,dph
0D56 A8F0      3003            mov     r0,b
0D58 F9        3004            mov     r1,a
0D59 E581      3005            mov     a,sp
0D5B 24FC      3006            add     a,#0xfc
0D5D F581      3007            mov     sp,a
0D5F 74DB      3008            mov     a,#0xDB
0D61 C0E0      3009            push    acc
0D63 740F      3010            mov     a,#0x0F
0D65 C0E0      3011            push    acc
0D67 7449      3012            mov     a,#0x49
0D69 C0E0      3013            push    acc
0D6B 7440      3014            mov     a,#0x40
0D6D C0E0      3015            push    acc
0D6F 8E82      3016            mov     dpl,r6
0D71 8F83      3017            mov     dph,r7
0D73 88F0      3018            mov     b,r0
0D75 E9        3019            mov     a,r1
0D76 120000    3020            lcall   ___fsdiv
0D79 AE82      3021            mov     r6,dpl
0D7B AF83      3022            mov     r7,dph
0D7D A8F0      3023            mov     r0,b
0D7F F9        3024            mov     r1,a
0D80 E581      3025            mov     a,sp
0D82 24FC      3026            add     a,#0xfc
0D84 F581      3027            mov     sp,a
0D86           3028   ;        sensor_test.c:572: angle += declination_angle; 
0D86 7411      3029            mov     a,#0x11
0D88 C0E0      3030            push    acc
0D8A C0E0      3031            push    acc
0D8C 7479      3032            mov     a,#0x79
0D8E C0E0      3033            push    acc
0D90 7441      3034            mov     a,#0x41
0D92 C0E0      3035            push    acc
0D94 8E82      3036            mov     dpl,r6
0D96 8F83      3037            mov     dph,r7
0D98 88F0      3038            mov     b,r0
0D9A E9        3039            mov     a,r1
0D9B 120000    3040            lcall   ___fsadd
0D9E AE82      3041            mov     r6,dpl
0DA0 AF83      3042            mov     r7,dph
0DA2 A8F0      3043            mov     r0,b
0DA4 F9        3044            mov     r1,a
0DA5 E581      3045            mov     a,sp
0DA7 24FC      3046            add     a,#0xfc
0DA9 F581      3047            mov     sp,a
0DAB           3048   ;        sensor_test.c:573: if (angle < 0) angle += 360.0; 
0DAB C006      3049            push    ar6
0DAD C007      3050            push    ar7
0DAF C000      3051            push    ar0
0DB1 C001      3052            push    ar1
0DB3 E4        3053            clr     a
0DB4 C0E0      3054            push    acc
0DB6 C0E0      3055            push    acc
0DB8 C0E0      3056            push    acc
0DBA C0E0      3057            push    acc
0DBC 8E82      3058            mov     dpl,r6
0DBE 8F83      3059            mov     dph,r7
0DC0 88F0      3060            mov     b,r0
0DC2 E9        3061            mov     a,r1
0DC3 120000    3062            lcall   ___fslt
0DC6 AA82      3063            mov     r2,dpl
0DC8 E581      3064            mov     a,sp
0DCA 24FC      3065            add     a,#0xfc
0DCC F581      3066            mov     sp,a
0DCE D001      3067            pop     ar1
0DD0 D000      3068            pop     ar0
0DD2 D007      3069            pop     ar7
0DD4 D006      3070            pop     ar6
0DD6 EA        3071            mov     a,r2
0DD7 6000      3072            jz      L016004?
0DD9 E4        3073            clr     a
0DDA C0E0      3074            push    acc
0DDC C0E0      3075            push    acc
0DDE 74B4      3076            mov     a,#0xB4
0DE0 C0E0      3077            push    acc
0DE2 7443      3078            mov     a,#0x43
0DE4 C0E0      3079            push    acc
0DE6 8E82      3080            mov     dpl,r6
0DE8 8F83      3081            mov     dph,r7
0DEA 88F0      3082            mov     b,r0
0DEC E9        3083            mov     a,r1
0DED 120000    3084            lcall   ___fsadd
0DF0 AE82      3085            mov     r6,dpl
0DF2 AF83      3086            mov     r7,dph
0DF4 A8F0      3087            mov     r0,b
0DF6 F9        3088            mov     r1,a
0DF7 E581      3089            mov     a,sp
0DF9 24FC      3090            add     a,#0xfc
0DFB F581      3091            mov     sp,a
0DFD 8000      3092            sjmp    L016005?
0DFF           3093   L016004?:
0DFF           3094   ;        sensor_test.c:574: else if (angle >= 360.0) angle -= 360.0;
0DFF C006      3095            push    ar6
0E01 C007      3096            push    ar7
0E03 C000      3097            push    ar0
0E05 C001      3098            push    ar1
0E07 E4        3099            clr     a
0E08 C0E0      3100            push    acc
0E0A C0E0      3101            push    acc
0E0C 74B4      3102            mov     a,#0xB4
0E0E C0E0      3103            push    acc
0E10 7443      3104            mov     a,#0x43
0E12 C0E0      3105            push    acc
0E14 8E82      3106            mov     dpl,r6
0E16 8F83      3107            mov     dph,r7
0E18 88F0      3108            mov     b,r0
0E1A E9        3109            mov     a,r1
0E1B 120000    3110            lcall   ___fslt
0E1E AA82      3111            mov     r2,dpl
0E20 E581      3112            mov     a,sp
0E22 24FC      3113            add     a,#0xfc
0E24 F581      3114            mov     sp,a
0E26 D001      3115            pop     ar1
0E28 D000      3116            pop     ar0
0E2A D007      3117            pop     ar7
0E2C D006      3118            pop     ar6
0E2E EA        3119            mov     a,r2
0E2F 7000      3120            jnz     L016005?
0E31 C0E0      3121            push    acc
0E33 C0E0      3122            push    acc
0E35 74B4      3123            mov     a,#0xB4
0E37 C0E0      3124            push    acc
0E39 7443      3125            mov     a,#0x43
0E3B C0E0      3126            push    acc
0E3D 8E82      3127            mov     dpl,r6
0E3F 8F83      3128            mov     dph,r7
0E41 88F0      3129            mov     b,r0
0E43 E9        3130            mov     a,r1
0E44 120000    3131            lcall   ___fssub
0E47 AE82      3132            mov     r6,dpl
0E49 AF83      3133            mov     r7,dph
0E4B A8F0      3134            mov     r0,b
0E4D F9        3135            mov     r1,a
0E4E E581      3136            mov     a,sp
0E50 24FC      3137            add     a,#0xfc
0E52 F581      3138            mov     sp,a
0E54           3139   L016005?:
0E54           3140   ;        sensor_test.c:575: avg_angle += angle; 
0E54 C006      3141            push    ar6
0E56 C007      3142            push    ar7
0E58 C000      3143            push    ar0
0E5A C001      3144            push    ar1
0E5C 85B082    3145            mov     dpl,_main_avg_angle_1_123
0E5F 85B183    3146            mov     dph,(_main_avg_angle_1_123 + 1)
0E62 85B2F0    3147            mov     b,(_main_avg_angle_1_123 + 2)
0E65 E5B3      3148            mov     a,(_main_avg_angle_1_123 + 3)
0E67 120000    3149            lcall   ___fsadd
0E6A 8582B0    3150            mov     _main_avg_angle_1_123,dpl
0E6D 8583B1    3151            mov     (_main_avg_angle_1_123 + 1),dph
0E70 85F0B2    3152            mov     (_main_avg_angle_1_123 + 2),b
0E73 F5B3      3153            mov     (_main_avg_angle_1_123 + 3),a
0E75 E581      3154            mov     a,sp
0E77 24FC      3155            add     a,#0xfc
0E79 F581      3156            mov     sp,a
0E7B           3157   ;        sensor_test.c:576: waitms(2);
0E7B 900002    3158            mov     dptr,#0x0002
0E7E 120000    3159            lcall   _waitms
0E81           3160   ;        sensor_test.c:569: for (i = 0; i < 50; i++){
0E81 0568      3161            inc     _main_i_1_123
0E83 020000    3162            ljmp    L016009?
0E86           3163   L016012?:
0E86           3164   ;        sensor_test.c:578: avg_angle /= 50;
0E86 E4        3165            clr     a
0E87 C0E0      3166            push    acc
0E89 C0E0      3167            push    acc
0E8B 7448      3168            mov     a,#0x48
0E8D C0E0      3169            push    acc
0E8F 7442      3170            mov     a,#0x42
0E91 C0E0      3171            push    acc
0E93 85B082    3172            mov     dpl,_main_avg_angle_1_123
0E96 85B183    3173            mov     dph,(_main_avg_angle_1_123 + 1)
0E99 85B2F0    3174            mov     b,(_main_avg_angle_1_123 + 2)
0E9C E5B3      3175            mov     a,(_main_avg_angle_1_123 + 3)
0E9E 120000    3176            lcall   ___fsdiv
0EA1 8582B0    3177            mov     _main_avg_angle_1_123,dpl
0EA4 8583B1    3178            mov     (_main_avg_angle_1_123 + 1),dph
0EA7 85F0B2    3179            mov     (_main_avg_angle_1_123 + 2),b
0EAA F5B3      3180            mov     (_main_avg_angle_1_123 + 3),a
0EAC E581      3181            mov     a,sp
0EAE 24FC      3182            add     a,#0xfc
0EB0 F581      3183            mov     sp,a
0EB2           3184   ;        sensor_test.c:579: avg_angle = alpha * avg_angle + (1-alpha) * avg_angle; 
0EB2 C0B0      3185            push    _main_avg_angle_1_123
0EB4 C0B1      3186            push    (_main_avg_angle_1_123 + 1)
0EB6 C0B2      3187            push    (_main_avg_angle_1_123 + 2)
0EB8 C0B3      3188            push    (_main_avg_angle_1_123 + 3)
0EBA 90CCCD    3189            mov     dptr,#0xCCCD
0EBD 75F0CC    3190            mov     b,#0xCC
0EC0 743D      3191            mov     a,#0x3D
0EC2 120000    3192            lcall   ___fsmul
0EC5 AA82      3193            mov     r2,dpl
0EC7 AB83      3194            mov     r3,dph
0EC9 ACF0      3195            mov     r4,b
0ECB FD        3196            mov     r5,a
0ECC E581      3197            mov     a,sp
0ECE 24FC      3198            add     a,#0xfc
0ED0 F581      3199            mov     sp,a
0ED2 C002      3200            push    ar2
0ED4 C003      3201            push    ar3
0ED6 C004      3202            push    ar4
0ED8 C005      3203            push    ar5
0EDA C0B0      3204            push    _main_avg_angle_1_123
0EDC C0B1      3205            push    (_main_avg_angle_1_123 + 1)
0EDE C0B2      3206            push    (_main_avg_angle_1_123 + 2)
0EE0 C0B3      3207            push    (_main_avg_angle_1_123 + 3)
0EE2 906666    3208            mov     dptr,#0x6666
0EE5 75F066    3209            mov     b,#0x66
0EE8 743F      3210            mov     a,#0x3F
0EEA 120000    3211            lcall   ___fsmul
0EED AE82      3212            mov     r6,dpl
0EEF AF83      3213            mov     r7,dph
0EF1 A8F0      3214            mov     r0,b
0EF3 F9        3215            mov     r1,a
0EF4 E581      3216            mov     a,sp
0EF6 24FC      3217            add     a,#0xfc
0EF8 F581      3218            mov     sp,a
0EFA D005      3219            pop     ar5
0EFC D004      3220            pop     ar4
0EFE D003      3221            pop     ar3
0F00 D002      3222            pop     ar2
0F02 C006      3223            push    ar6
0F04 C007      3224            push    ar7
0F06 C000      3225            push    ar0
0F08 C001      3226            push    ar1
0F0A 8A82      3227            mov     dpl,r2
0F0C 8B83      3228            mov     dph,r3
0F0E 8CF0      3229            mov     b,r4
0F10 ED        3230            mov     a,r5
0F11 120000    3231            lcall   ___fsadd
0F14 8582B0    3232            mov     _main_avg_angle_1_123,dpl
0F17 8583B1    3233            mov     (_main_avg_angle_1_123 + 1),dph
0F1A 85F0B2    3234            mov     (_main_avg_angle_1_123 + 2),b
0F1D F5B3      3235            mov     (_main_avg_angle_1_123 + 3),a
0F1F E581      3236            mov     a,sp
0F21 24FC      3237            add     a,#0xfc
0F23 F581      3238            mov     sp,a
0F25           3239   ;        sensor_test.c:580: printf("%f          \r", avg_angle);
0F25 C0B0      3240            push    _main_avg_angle_1_123
0F27 C0B1      3241            push    (_main_avg_angle_1_123 + 1)
0F29 C0B2      3242            push    (_main_avg_angle_1_123 + 2)
0F2B C0B3      3243            push    (_main_avg_angle_1_123 + 3)
0F2D 74E0      3244            mov     a,#__str_10
0F2F C0E0      3245            push    acc
0F31 74DD      3246            mov     a,#(__str_10 >> 8)
0F33 C0E0      3247            push    acc
0F35 7480      3248            mov     a,#0x80
0F37 C0E0      3249            push    acc
0F39 120000    3250            lcall   _printf
0F3C E581      3251            mov     a,sp
0F3E 24F9      3252            add     a,#0xf9
0F40 F581      3253            mov     sp,a
0F42           3254   ;        sensor_test.c:581: avg_angle = 0.0;  
0F42 75B000    3255            mov     _main_avg_angle_1_123,#0x00
0F45 75B100    3256            mov     (_main_avg_angle_1_123 + 1),#0x00
0F48 75B200    3257            mov     (_main_avg_angle_1_123 + 2),#0x00
0F4B 75B300    3258            mov     (_main_avg_angle_1_123 + 3),#0x00
0F4E           3259   ;        sensor_test.c:583: waitms(100);
0F4E 900064    3260            mov     dptr,#0x0064
0F51 120000    3261            lcall   _waitms
0F54 020000    3262            ljmp    L016018?
0F57           3263            rseg R_CSEG
0F57           3264   
0000           3265            rseg R_XINIT
0000           3266   
0000           3267            rseg R_CONST
0000           3268   __str_0:
0000 256420    3269            db '%d '
0003 00        3270            db 0x00
0004           3271   __str_1:
0004 25642025  3272            db '%d %d %d %d'
     64202564
     202564
000F 0A        3273            db 0x0A
0010 00        3274            db 0x00
0011           3275   __str_2:
0011 4572726F  3276            db 'Error: Could not find BMM150 sensor (Chip ID: 0x%02X)'
     723A2043
     6F756C64
     206E6F74
     2066696E
     6420424D
     4D313530
     2073656E
     736F7220
     28436869
     70204944
     3A203078
     25303258
     29
0046 0D        3277            db 0x0D
0047 0A        3278            db 0x0A
0048 00        3279            db 0x00
0049           3280   __str_3:
0049 50726573  3281            db 'Press restart to check again!'
     73207265
     73746172
     7420746F
     20636865
     636B2061
     6761696E
     21
0066 0D        3282            db 0x0D
0067 00        3283            db 0x00
0068           3284   __str_4:
0068 424D4D31  3285            db 'BMM150 initialized successfully! Chip ID: 0x%02X'
     35302069
     6E697469
     616C697A
     65642073
     75636365
     73736675
     6C6C7921
     20436869
     70204944
     3A203078
     25303258
0098 0D        3286            db 0x0D
0099 0A        3287            db 0x0A
009A 00        3288            db 0x00
009B           3289   __str_5:
009B 1B        3290            db 0x1B
009C 5B324A    3291            db '[2J'
009F 00        3292            db 0x00
00A0           3293   __str_6:
00A0 45464D38  3294            db 'EFM8LB1 SPI/BMM150 test program'
     4C423120
     5350492F
     424D4D31
     35302074
     65737420
     70726F67
     72616D
00BF 0A        3295            db 0x0A
00C0 46696C65  3296            db 'File: %s'
     3A202573
00C8 0A        3297            db 0x0A
00C9 436F6D70  3298            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
00D9 0A        3299            db 0x0A
00DA 0A        3300            db 0x0A
00DB 00        3301            db 0x00
00DC           3302   __str_7:
00DC 73656E73  3303            db 'sensor_test.c'
     6F725F74
     6573742E
     63
00E9 00        3304            db 0x00
00EA           3305   __str_8:
00EA 4D617220  3306            db 'Mar 26 2025'
     32362032
     303235
00F5 00        3307            db 0x00
00F6           3308   __str_9:
00F6 30323A31  3309            db '02:10:34'
     303A3334
00FE 00        3310            db 0x00
00FF           3311   __str_10:
00FF 25662020  3312            db '%f          '
     20202020
     20202020
010B 0D        3313            db 0x0D
010C 00        3314            db 0x00
010D           3315   
0003           3316            CSEG
0003           3317   
0003           3318   end
